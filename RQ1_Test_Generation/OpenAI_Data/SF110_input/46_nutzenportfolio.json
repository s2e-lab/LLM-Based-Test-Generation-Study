[
	{
		"original_code": "// CustomizingAction.java\n/**\r\n * Nutzenportfolio\r\n * Copyright (C) 2006 Kompetenzzentrum E-Business, Simon Bergamin\r\n *\r\n * This program is free software; you can redistribute it and/or\r\n * modify it under the terms of the GNU General Public License\r\n * as published by the Free Software Foundation; either version 2\r\n * of the License, or (at your option) any later version.\r\n *\r\n * This program is distributed in the hope that it will be useful,\r\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n * GNU General Public License for more details.\r\n *\r\n * You should have received a copy of the GNU General Public License\r\n * along with this program; if not, write to the Free Software\r\n * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\r\n */\r\npackage ch.bfh.egov.nutzenportfolio.action;\r\n\r\nimport java.util.List;\r\nimport javax.servlet.http.HttpServletRequest;\r\nimport javax.servlet.http.HttpServletResponse;\r\nimport javax.servlet.http.HttpSession;\r\nimport ch.bfh.egov.nutzenportfolio.Constants;\r\nimport ch.bfh.egov.nutzenportfolio.service.auswahlfeld.AuswahlfeldService;\r\nimport ch.bfh.egov.nutzenportfolio.service.common.CommonService;\r\nimport ch.bfh.egov.nutzenportfolio.service.customizing.CustomizingService;\r\nimport ch.bfh.egov.nutzenportfolio.service.detailziele.DetailzieleService;\r\nimport ch.bfh.egov.nutzenportfolio.service.fragebogen.NaOpNuService;\r\nimport ch.bfh.egov.nutzenportfolio.service.fragebogen.ProjektattraktivitaetService;\r\nimport ch.bfh.egov.nutzenportfolio.service.kategorie.KategorieService;\r\nimport ch.bfh.egov.nutzenportfolio.service.nutzenkriterium.NutzenkriteriumService;\r\nimport ch.bfh.egov.nutzenportfolio.service.projektgruppe.ProjektgruppeService;\r\nimport ch.bfh.egov.nutzenportfolio.service.strategischeziele.StrategischeZieleService;\r\nimport ch.bfh.egov.nutzenportfolio.tos.Customizing;\r\nimport org.apache.commons.logging.Log;\r\nimport org.apache.commons.logging.LogFactory;\r\nimport org.apache.struts.action.ActionForm;\r\nimport org.apache.struts.action.ActionForward;\r\nimport org.apache.struts.action.ActionMapping;\r\nimport org.apache.struts.action.ActionMessage;\r\nimport org.apache.struts.action.ActionMessages;\r\nimport org.apache.struts.action.DynaActionForm;\r\nimport org.apache.struts.actions.DispatchAction;\r\n\r\npublic class CustomizingAction extends DispatchAction {\r\n\r\n    private Log logger = LogFactory.getLog(this.getClass());\r\n\r\n    private CustomizingService service;\r\n\r\n    private CommonService commonService;\r\n\r\n    public CustomizingAction(CustomizingService service, CommonService commonService, StrategischeZieleService szService, DetailzieleService dzService, AuswahlfeldService afService, KategorieService kService, NutzenkriteriumService nService, NaOpNuService naOpNuService, ProjektattraktivitaetService paService, ProjektgruppeService pgService) {\r\n        super();\r\n        this.service = service;\r\n        this.commonService = commonService;\r\n        this.service.init(commonService, szService, dzService, afService, kService, nService, naOpNuService, paService, pgService);\r\n    }\r\n\r\n    public ActionForward list(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {\r\n        populate(request);\r\n        return mapping.findForward(Constants.LIST);\r\n    }\r\n\r\n    public ActionForward prepare(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {\r\n        HttpSession session = request.getSession();\r\n        service.unsetStatus(request);\r\n        DynaActionForm customizingForm = (DynaActionForm) form;\r\n        Integer customizingId = (Integer) customizingForm.get(\"customizingId\");\r\n        logger.debug(\"form customizingId=\" + customizingId);\r\n        if (customizingId != null && customizingId != 0) {\r\n            logger.debug(\"customizingId wird in Session gesetzt\");\r\n            session.setAttribute(Constants.CUSTOMIZING_ID, customizingId);\r\n        }\r\n        logger.debug(\"---\" + (Integer) session.getAttribute(Constants.CUSTOMIZING_ID));\r\n        if (isUpdate(request, customizingForm)) {\r\n            Customizing c = createCustomizing(request);\r\n            customizingId = (Integer) session.getAttribute(Constants.CUSTOMIZING_ID);\r\n            c.setCustomizingId(customizingId);\r\n            Customizing customizing = service.getById(c);\r\n            customizingForm.set(Constants.CUSTOMIZING_ID, customizingId);\r\n            customizingForm.set(\"name\", customizing.getName());\r\n            customizingForm.set(\"update\", true);\r\n            service.setStatus(request);\r\n        }\r\n        return mapping.findForward(Constants.FORM);\r\n    }\r\n\r\n    public ActionForward deletequestion(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {\r\n        Customizing customizing = getCustomizing(request);\r\n        if (customizing == null) {\r\n            populate(request);\r\n            logger.debug(\"customizing = null\");\r\n            return mapping.findForward(Constants.LIST);\r\n        }\r\n        if (customizing.getStatus()) {\r\n            request.setAttribute(\"active\", true);\r\n            request.setAttribute(\"customizingDelete\", true);\r\n        }\r\n        ActionMessages messages = new ActionMessages();\r\n        messages.add(ActionMessages.GLOBAL_MESSAGE, new ActionMessage(\"messages.question.delete\", customizing.getName()));\r\n        saveMessages(request, messages);\r\n        request.setAttribute(Constants.ACTION, Constants.CUSTOMIZING_ACTION);\r\n        request.setAttribute(Constants.DISPATCH_YES, Constants.DELETE);\r\n        request.setAttribute(Constants.DISPATCH_NO, Constants.LIST);\r\n        request.setAttribute(Constants.ID_NAME, Constants.CUSTOMIZING_ID);\r\n        request.setAttribute(Constants.ID_VALUE, customizing.getCustomizingId());\r\n        return mapping.findForward(Constants.QUESTION);\r\n    }\r\n\r\n    public ActionForward delete(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {\r\n        Customizing customizing = getCustomizing(request);\r\n        if (customizing == null || customizing.getStatus()) {\r\n            populate(request);\r\n            logger.debug(\"customizing = null oder noch aktiv\");\r\n            return mapping.findForward(Constants.LIST);\r\n        }\r\n        service.cascadeDelete(request, customizing);\r\n        populate(request);\r\n        return mapping.findForward(Constants.LIST);\r\n    }\r\n\r\n    public ActionForward insertOrUpdate(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {\r\n        // Formulardaten holen\r\n        DynaActionForm customizingForm = (DynaActionForm) form;\r\n        Integer customizingId = (Integer) customizingForm.get(\"customizingId\");\r\n        Integer mandantId = (Integer) request.getSession().getAttribute(\"mandantId\");\r\n        String name = (String) customizingForm.get(\"name\");\r\n        Customizing customizing = new Customizing();\r\n        customizing.setCustomizingId(customizingId);\r\n        customizing.setMandantId(mandantId);\r\n        customizing.setName(name);\r\n        customizing.setStatus(true);\r\n        // customizingname check auf unique\r\n        if (exists(request, customizingForm)) {\r\n            ActionMessages errors = new ActionMessages();\r\n            errors.add(\"name\", new ActionMessage(\"errors.duplicate\", \"Customizing\"));\r\n            logger.debug(\"Name besteht bereits.\");\r\n            saveErrors(request, errors);\r\n            return mapping.findForward(Constants.FAILURE);\r\n        }\r\n        // update?\r\n        if (isUpdate(request, customizingForm)) {\r\n            service.update(customizing);\r\n        } else // insert\r\n        {\r\n            customizingId = service.insert(customizing);\r\n            // Projektattraktivitaet, Nutzenattraktivitaet und\r\n            // OperativerNutzen einfï¿½gen\r\n            commonService.insertCustomizingParts(customizingId);\r\n        }\r\n        populate(request);\r\n        request.getSession().setAttribute(Constants.CUSTOMIZING_ID, customizingId);\r\n        return mapping.findForward(Constants.SUCCESS);\r\n    }\r\n\r\n    public ActionForward copy(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {\r\n        DynaActionForm cForm = (DynaActionForm) form;\r\n        service.copy(request, cForm);\r\n        populate(request);\r\n        return mapping.findForward(Constants.LIST);\r\n    }\r\n\r\n    public ActionForward changeStatus(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {\r\n        DynaActionForm cForm = (DynaActionForm) form;\r\n        service.changeStatus(request, cForm);\r\n        populate(request);\r\n        return mapping.findForward(Constants.LIST);\r\n    }\r\n\r\n    private Customizing getCustomizing(HttpServletRequest request) {\r\n        String param = request.getParameter(Constants.CUSTOMIZING_ID);\r\n        Integer customizingId = null;\r\n        try {\r\n            customizingId = new Integer(param);\r\n        } catch (Exception ex) {\r\n            logger.warn(\"Fehlende customizingId!\");\r\n            return null;\r\n        }\r\n        Customizing c = createCustomizing(request);\r\n        c.setCustomizingId(customizingId);\r\n        c = service.getById(c);\r\n        if (c == null) {\r\n            logger.warn(\"Customizing mit der id \" + customizingId + \" wurde nicht gefunden.\");\r\n            return null;\r\n        }\r\n        return c;\r\n    }\r\n\r\n    private void populate(HttpServletRequest request) {\r\n        request.getSession().removeAttribute(Constants.CUSTOMIZING_ID);\r\n        Customizing c = createCustomizing(request);\r\n        List customizings = service.getAll(c.getMandantId());\r\n        request.setAttribute(Constants.CUSTOMIZINGS, customizings);\r\n    }\r\n\r\n    private boolean isUpdate(HttpServletRequest request, DynaActionForm customizingForm) {\r\n        HttpSession session = request.getSession();\r\n        logger.debug(\"---\" + (Integer) session.getAttribute(Constants.CUSTOMIZING_ID));\r\n        Object obj = request.getSession().getAttribute(Constants.CUSTOMIZING_ID);\r\n        logger.debug(\"session customizingId obj=\" + obj);\r\n        if (obj != null && obj instanceof Integer) {\r\n            logger.debug(\"Update\");\r\n            return true;\r\n        }\r\n        Integer id = (Integer) customizingForm.get(\"customizingId\");\r\n        if (id == null || id == 0) {\r\n            return false;\r\n        }\r\n        return true;\r\n    }\r\n\r\n    private boolean exists(HttpServletRequest request, DynaActionForm customizingForm) {\r\n        Integer id = (Integer) customizingForm.get(\"customizingId\");\r\n        String name = (String) customizingForm.get(\"name\");\r\n        Customizing c = createCustomizing(request);\r\n        c.setCustomizingId(id);\r\n        c.setName(name);\r\n        // update?\r\n        if (id != null && id != 0) {\r\n            Customizing customizing = service.getById(c);\r\n            // customizingname geï¿½ndert, ï¿½berprï¿½fen\r\n            if (!name.equals(customizing.getName())) {\r\n                return service.getByName(c) != null;\r\n            }\r\n        } else // insert\r\n        {\r\n            return service.getByName(c) != null;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    /**\r\n     * Generiert ein Customizing Objekt mit dem aktuellen Mandanten.\r\n     *\r\n     * @param request               der HttpServletRequest\r\n     * @return                      ein Customizing mit gesetzem Mandant\r\n     */\r\n    private Customizing createCustomizing(HttpServletRequest request) {\r\n        Customizing c = new Customizing();\r\n        c.setMandantId((Integer) request.getSession().getAttribute(Constants.MANDANT_ID));\r\n        return c;\r\n    }\r\n}\r\n",
		"id": "EvoSuiteBenchmark/46_nutzenportfolio/src/main/java/ch/bfh/egov/nutzenportfolio/action/CustomizingActionTest0.java",
		"test_prompt": "// CustomizingActionTest0.java\npackage ch.bfh.egov.nutzenportfolio.action;\n\nimport java.util.List;\nimport javax.servlet.http.HttpServletRequest;\nimport javax.servlet.http.HttpServletResponse;\nimport javax.servlet.http.HttpSession;\nimport ch.bfh.egov.nutzenportfolio.Constants;\nimport ch.bfh.egov.nutzenportfolio.service.auswahlfeld.AuswahlfeldService;\nimport ch.bfh.egov.nutzenportfolio.service.common.CommonService;\nimport ch.bfh.egov.nutzenportfolio.service.customizing.CustomizingService;\nimport ch.bfh.egov.nutzenportfolio.service.detailziele.DetailzieleService;\nimport ch.bfh.egov.nutzenportfolio.service.fragebogen.NaOpNuService;\nimport ch.bfh.egov.nutzenportfolio.service.fragebogen.ProjektattraktivitaetService;\nimport ch.bfh.egov.nutzenportfolio.service.kategorie.KategorieService;\nimport ch.bfh.egov.nutzenportfolio.service.nutzenkriterium.NutzenkriteriumService;\nimport ch.bfh.egov.nutzenportfolio.service.projektgruppe.ProjektgruppeService;\nimport ch.bfh.egov.nutzenportfolio.service.strategischeziele.StrategischeZieleService;\nimport ch.bfh.egov.nutzenportfolio.tos.Customizing;\nimport org.apache.commons.logging.Log;\nimport org.apache.commons.logging.LogFactory;\nimport org.apache.struts.action.ActionForm;\nimport org.apache.struts.action.ActionForward;\nimport org.apache.struts.action.ActionMapping;\nimport org.apache.struts.action.ActionMessage;\nimport org.apache.struts.action.ActionMessages;\nimport org.apache.struts.action.DynaActionForm;\nimport org.apache.struts.actions.DispatchAction;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link CustomizingAction}.\n* It contains ten unit test cases for the {@link CustomizingAction#list(ActionMapping, ActionForm, HttpServletRequest, HttpServletResponse)} method.\n*/\nclass CustomizingActionTest0 {"
	},
	{
		"original_code": "// CustomizingAction.java\n/**\r\n * Nutzenportfolio\r\n * Copyright (C) 2006 Kompetenzzentrum E-Business, Simon Bergamin\r\n *\r\n * This program is free software; you can redistribute it and/or\r\n * modify it under the terms of the GNU General Public License\r\n * as published by the Free Software Foundation; either version 2\r\n * of the License, or (at your option) any later version.\r\n *\r\n * This program is distributed in the hope that it will be useful,\r\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n * GNU General Public License for more details.\r\n *\r\n * You should have received a copy of the GNU General Public License\r\n * along with this program; if not, write to the Free Software\r\n * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\r\n */\r\npackage ch.bfh.egov.nutzenportfolio.action;\r\n\r\nimport java.util.List;\r\nimport javax.servlet.http.HttpServletRequest;\r\nimport javax.servlet.http.HttpServletResponse;\r\nimport javax.servlet.http.HttpSession;\r\nimport ch.bfh.egov.nutzenportfolio.Constants;\r\nimport ch.bfh.egov.nutzenportfolio.service.auswahlfeld.AuswahlfeldService;\r\nimport ch.bfh.egov.nutzenportfolio.service.common.CommonService;\r\nimport ch.bfh.egov.nutzenportfolio.service.customizing.CustomizingService;\r\nimport ch.bfh.egov.nutzenportfolio.service.detailziele.DetailzieleService;\r\nimport ch.bfh.egov.nutzenportfolio.service.fragebogen.NaOpNuService;\r\nimport ch.bfh.egov.nutzenportfolio.service.fragebogen.ProjektattraktivitaetService;\r\nimport ch.bfh.egov.nutzenportfolio.service.kategorie.KategorieService;\r\nimport ch.bfh.egov.nutzenportfolio.service.nutzenkriterium.NutzenkriteriumService;\r\nimport ch.bfh.egov.nutzenportfolio.service.projektgruppe.ProjektgruppeService;\r\nimport ch.bfh.egov.nutzenportfolio.service.strategischeziele.StrategischeZieleService;\r\nimport ch.bfh.egov.nutzenportfolio.tos.Customizing;\r\nimport org.apache.commons.logging.Log;\r\nimport org.apache.commons.logging.LogFactory;\r\nimport org.apache.struts.action.ActionForm;\r\nimport org.apache.struts.action.ActionForward;\r\nimport org.apache.struts.action.ActionMapping;\r\nimport org.apache.struts.action.ActionMessage;\r\nimport org.apache.struts.action.ActionMessages;\r\nimport org.apache.struts.action.DynaActionForm;\r\nimport org.apache.struts.actions.DispatchAction;\r\n\r\npublic class CustomizingAction extends DispatchAction {\r\n\r\n    private Log logger = LogFactory.getLog(this.getClass());\r\n\r\n    private CustomizingService service;\r\n\r\n    private CommonService commonService;\r\n\r\n    public CustomizingAction(CustomizingService service, CommonService commonService, StrategischeZieleService szService, DetailzieleService dzService, AuswahlfeldService afService, KategorieService kService, NutzenkriteriumService nService, NaOpNuService naOpNuService, ProjektattraktivitaetService paService, ProjektgruppeService pgService) {\r\n        super();\r\n        this.service = service;\r\n        this.commonService = commonService;\r\n        this.service.init(commonService, szService, dzService, afService, kService, nService, naOpNuService, paService, pgService);\r\n    }\r\n\r\n    public ActionForward list(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {\r\n        populate(request);\r\n        return mapping.findForward(Constants.LIST);\r\n    }\r\n\r\n    public ActionForward prepare(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {\r\n        HttpSession session = request.getSession();\r\n        service.unsetStatus(request);\r\n        DynaActionForm customizingForm = (DynaActionForm) form;\r\n        Integer customizingId = (Integer) customizingForm.get(\"customizingId\");\r\n        logger.debug(\"form customizingId=\" + customizingId);\r\n        if (customizingId != null && customizingId != 0) {\r\n            logger.debug(\"customizingId wird in Session gesetzt\");\r\n            session.setAttribute(Constants.CUSTOMIZING_ID, customizingId);\r\n        }\r\n        logger.debug(\"---\" + (Integer) session.getAttribute(Constants.CUSTOMIZING_ID));\r\n        if (isUpdate(request, customizingForm)) {\r\n            Customizing c = createCustomizing(request);\r\n            customizingId = (Integer) session.getAttribute(Constants.CUSTOMIZING_ID);\r\n            c.setCustomizingId(customizingId);\r\n            Customizing customizing = service.getById(c);\r\n            customizingForm.set(Constants.CUSTOMIZING_ID, customizingId);\r\n            customizingForm.set(\"name\", customizing.getName());\r\n            customizingForm.set(\"update\", true);\r\n            service.setStatus(request);\r\n        }\r\n        return mapping.findForward(Constants.FORM);\r\n    }\r\n\r\n    public ActionForward deletequestion(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {\r\n        Customizing customizing = getCustomizing(request);\r\n        if (customizing == null) {\r\n            populate(request);\r\n            logger.debug(\"customizing = null\");\r\n            return mapping.findForward(Constants.LIST);\r\n        }\r\n        if (customizing.getStatus()) {\r\n            request.setAttribute(\"active\", true);\r\n            request.setAttribute(\"customizingDelete\", true);\r\n        }\r\n        ActionMessages messages = new ActionMessages();\r\n        messages.add(ActionMessages.GLOBAL_MESSAGE, new ActionMessage(\"messages.question.delete\", customizing.getName()));\r\n        saveMessages(request, messages);\r\n        request.setAttribute(Constants.ACTION, Constants.CUSTOMIZING_ACTION);\r\n        request.setAttribute(Constants.DISPATCH_YES, Constants.DELETE);\r\n        request.setAttribute(Constants.DISPATCH_NO, Constants.LIST);\r\n        request.setAttribute(Constants.ID_NAME, Constants.CUSTOMIZING_ID);\r\n        request.setAttribute(Constants.ID_VALUE, customizing.getCustomizingId());\r\n        return mapping.findForward(Constants.QUESTION);\r\n    }\r\n\r\n    public ActionForward delete(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {\r\n        Customizing customizing = getCustomizing(request);\r\n        if (customizing == null || customizing.getStatus()) {\r\n            populate(request);\r\n            logger.debug(\"customizing = null oder noch aktiv\");\r\n            return mapping.findForward(Constants.LIST);\r\n        }\r\n        service.cascadeDelete(request, customizing);\r\n        populate(request);\r\n        return mapping.findForward(Constants.LIST);\r\n    }\r\n\r\n    public ActionForward insertOrUpdate(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {\r\n        // Formulardaten holen\r\n        DynaActionForm customizingForm = (DynaActionForm) form;\r\n        Integer customizingId = (Integer) customizingForm.get(\"customizingId\");\r\n        Integer mandantId = (Integer) request.getSession().getAttribute(\"mandantId\");\r\n        String name = (String) customizingForm.get(\"name\");\r\n        Customizing customizing = new Customizing();\r\n        customizing.setCustomizingId(customizingId);\r\n        customizing.setMandantId(mandantId);\r\n        customizing.setName(name);\r\n        customizing.setStatus(true);\r\n        // customizingname check auf unique\r\n        if (exists(request, customizingForm)) {\r\n            ActionMessages errors = new ActionMessages();\r\n            errors.add(\"name\", new ActionMessage(\"errors.duplicate\", \"Customizing\"));\r\n            logger.debug(\"Name besteht bereits.\");\r\n            saveErrors(request, errors);\r\n            return mapping.findForward(Constants.FAILURE);\r\n        }\r\n        // update?\r\n        if (isUpdate(request, customizingForm)) {\r\n            service.update(customizing);\r\n        } else // insert\r\n        {\r\n            customizingId = service.insert(customizing);\r\n            // Projektattraktivitaet, Nutzenattraktivitaet und\r\n            // OperativerNutzen einfï¿½gen\r\n            commonService.insertCustomizingParts(customizingId);\r\n        }\r\n        populate(request);\r\n        request.getSession().setAttribute(Constants.CUSTOMIZING_ID, customizingId);\r\n        return mapping.findForward(Constants.SUCCESS);\r\n    }\r\n\r\n    public ActionForward copy(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {\r\n        DynaActionForm cForm = (DynaActionForm) form;\r\n        service.copy(request, cForm);\r\n        populate(request);\r\n        return mapping.findForward(Constants.LIST);\r\n    }\r\n\r\n    public ActionForward changeStatus(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {\r\n        DynaActionForm cForm = (DynaActionForm) form;\r\n        service.changeStatus(request, cForm);\r\n        populate(request);\r\n        return mapping.findForward(Constants.LIST);\r\n    }\r\n\r\n    private Customizing getCustomizing(HttpServletRequest request) {\r\n        String param = request.getParameter(Constants.CUSTOMIZING_ID);\r\n        Integer customizingId = null;\r\n        try {\r\n            customizingId = new Integer(param);\r\n        } catch (Exception ex) {\r\n            logger.warn(\"Fehlende customizingId!\");\r\n            return null;\r\n        }\r\n        Customizing c = createCustomizing(request);\r\n        c.setCustomizingId(customizingId);\r\n        c = service.getById(c);\r\n        if (c == null) {\r\n            logger.warn(\"Customizing mit der id \" + customizingId + \" wurde nicht gefunden.\");\r\n            return null;\r\n        }\r\n        return c;\r\n    }\r\n\r\n    private void populate(HttpServletRequest request) {\r\n        request.getSession().removeAttribute(Constants.CUSTOMIZING_ID);\r\n        Customizing c = createCustomizing(request);\r\n        List customizings = service.getAll(c.getMandantId());\r\n        request.setAttribute(Constants.CUSTOMIZINGS, customizings);\r\n    }\r\n\r\n    private boolean isUpdate(HttpServletRequest request, DynaActionForm customizingForm) {\r\n        HttpSession session = request.getSession();\r\n        logger.debug(\"---\" + (Integer) session.getAttribute(Constants.CUSTOMIZING_ID));\r\n        Object obj = request.getSession().getAttribute(Constants.CUSTOMIZING_ID);\r\n        logger.debug(\"session customizingId obj=\" + obj);\r\n        if (obj != null && obj instanceof Integer) {\r\n            logger.debug(\"Update\");\r\n            return true;\r\n        }\r\n        Integer id = (Integer) customizingForm.get(\"customizingId\");\r\n        if (id == null || id == 0) {\r\n            return false;\r\n        }\r\n        return true;\r\n    }\r\n\r\n    private boolean exists(HttpServletRequest request, DynaActionForm customizingForm) {\r\n        Integer id = (Integer) customizingForm.get(\"customizingId\");\r\n        String name = (String) customizingForm.get(\"name\");\r\n        Customizing c = createCustomizing(request);\r\n        c.setCustomizingId(id);\r\n        c.setName(name);\r\n        // update?\r\n        if (id != null && id != 0) {\r\n            Customizing customizing = service.getById(c);\r\n            // customizingname geï¿½ndert, ï¿½berprï¿½fen\r\n            if (!name.equals(customizing.getName())) {\r\n                return service.getByName(c) != null;\r\n            }\r\n        } else // insert\r\n        {\r\n            return service.getByName(c) != null;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    /**\r\n     * Generiert ein Customizing Objekt mit dem aktuellen Mandanten.\r\n     *\r\n     * @param request               der HttpServletRequest\r\n     * @return                      ein Customizing mit gesetzem Mandant\r\n     */\r\n    private Customizing createCustomizing(HttpServletRequest request) {\r\n        Customizing c = new Customizing();\r\n        c.setMandantId((Integer) request.getSession().getAttribute(Constants.MANDANT_ID));\r\n        return c;\r\n    }\r\n}\r\n",
		"id": "EvoSuiteBenchmark/46_nutzenportfolio/src/main/java/ch/bfh/egov/nutzenportfolio/action/CustomizingActionTest1.java",
		"test_prompt": "// CustomizingActionTest1.java\npackage ch.bfh.egov.nutzenportfolio.action;\n\nimport java.util.List;\nimport javax.servlet.http.HttpServletRequest;\nimport javax.servlet.http.HttpServletResponse;\nimport javax.servlet.http.HttpSession;\nimport ch.bfh.egov.nutzenportfolio.Constants;\nimport ch.bfh.egov.nutzenportfolio.service.auswahlfeld.AuswahlfeldService;\nimport ch.bfh.egov.nutzenportfolio.service.common.CommonService;\nimport ch.bfh.egov.nutzenportfolio.service.customizing.CustomizingService;\nimport ch.bfh.egov.nutzenportfolio.service.detailziele.DetailzieleService;\nimport ch.bfh.egov.nutzenportfolio.service.fragebogen.NaOpNuService;\nimport ch.bfh.egov.nutzenportfolio.service.fragebogen.ProjektattraktivitaetService;\nimport ch.bfh.egov.nutzenportfolio.service.kategorie.KategorieService;\nimport ch.bfh.egov.nutzenportfolio.service.nutzenkriterium.NutzenkriteriumService;\nimport ch.bfh.egov.nutzenportfolio.service.projektgruppe.ProjektgruppeService;\nimport ch.bfh.egov.nutzenportfolio.service.strategischeziele.StrategischeZieleService;\nimport ch.bfh.egov.nutzenportfolio.tos.Customizing;\nimport org.apache.commons.logging.Log;\nimport org.apache.commons.logging.LogFactory;\nimport org.apache.struts.action.ActionForm;\nimport org.apache.struts.action.ActionForward;\nimport org.apache.struts.action.ActionMapping;\nimport org.apache.struts.action.ActionMessage;\nimport org.apache.struts.action.ActionMessages;\nimport org.apache.struts.action.DynaActionForm;\nimport org.apache.struts.actions.DispatchAction;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link CustomizingAction}.\n* It contains ten unit test cases for the {@link CustomizingAction#prepare(ActionMapping, ActionForm, HttpServletRequest, HttpServletResponse)} method.\n*/\nclass CustomizingActionTest1 {"
	},
	{
		"original_code": "// CustomizingAction.java\n/**\r\n * Nutzenportfolio\r\n * Copyright (C) 2006 Kompetenzzentrum E-Business, Simon Bergamin\r\n *\r\n * This program is free software; you can redistribute it and/or\r\n * modify it under the terms of the GNU General Public License\r\n * as published by the Free Software Foundation; either version 2\r\n * of the License, or (at your option) any later version.\r\n *\r\n * This program is distributed in the hope that it will be useful,\r\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n * GNU General Public License for more details.\r\n *\r\n * You should have received a copy of the GNU General Public License\r\n * along with this program; if not, write to the Free Software\r\n * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\r\n */\r\npackage ch.bfh.egov.nutzenportfolio.action;\r\n\r\nimport java.util.List;\r\nimport javax.servlet.http.HttpServletRequest;\r\nimport javax.servlet.http.HttpServletResponse;\r\nimport javax.servlet.http.HttpSession;\r\nimport ch.bfh.egov.nutzenportfolio.Constants;\r\nimport ch.bfh.egov.nutzenportfolio.service.auswahlfeld.AuswahlfeldService;\r\nimport ch.bfh.egov.nutzenportfolio.service.common.CommonService;\r\nimport ch.bfh.egov.nutzenportfolio.service.customizing.CustomizingService;\r\nimport ch.bfh.egov.nutzenportfolio.service.detailziele.DetailzieleService;\r\nimport ch.bfh.egov.nutzenportfolio.service.fragebogen.NaOpNuService;\r\nimport ch.bfh.egov.nutzenportfolio.service.fragebogen.ProjektattraktivitaetService;\r\nimport ch.bfh.egov.nutzenportfolio.service.kategorie.KategorieService;\r\nimport ch.bfh.egov.nutzenportfolio.service.nutzenkriterium.NutzenkriteriumService;\r\nimport ch.bfh.egov.nutzenportfolio.service.projektgruppe.ProjektgruppeService;\r\nimport ch.bfh.egov.nutzenportfolio.service.strategischeziele.StrategischeZieleService;\r\nimport ch.bfh.egov.nutzenportfolio.tos.Customizing;\r\nimport org.apache.commons.logging.Log;\r\nimport org.apache.commons.logging.LogFactory;\r\nimport org.apache.struts.action.ActionForm;\r\nimport org.apache.struts.action.ActionForward;\r\nimport org.apache.struts.action.ActionMapping;\r\nimport org.apache.struts.action.ActionMessage;\r\nimport org.apache.struts.action.ActionMessages;\r\nimport org.apache.struts.action.DynaActionForm;\r\nimport org.apache.struts.actions.DispatchAction;\r\n\r\npublic class CustomizingAction extends DispatchAction {\r\n\r\n    private Log logger = LogFactory.getLog(this.getClass());\r\n\r\n    private CustomizingService service;\r\n\r\n    private CommonService commonService;\r\n\r\n    public CustomizingAction(CustomizingService service, CommonService commonService, StrategischeZieleService szService, DetailzieleService dzService, AuswahlfeldService afService, KategorieService kService, NutzenkriteriumService nService, NaOpNuService naOpNuService, ProjektattraktivitaetService paService, ProjektgruppeService pgService) {\r\n        super();\r\n        this.service = service;\r\n        this.commonService = commonService;\r\n        this.service.init(commonService, szService, dzService, afService, kService, nService, naOpNuService, paService, pgService);\r\n    }\r\n\r\n    public ActionForward list(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {\r\n        populate(request);\r\n        return mapping.findForward(Constants.LIST);\r\n    }\r\n\r\n    public ActionForward prepare(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {\r\n        HttpSession session = request.getSession();\r\n        service.unsetStatus(request);\r\n        DynaActionForm customizingForm = (DynaActionForm) form;\r\n        Integer customizingId = (Integer) customizingForm.get(\"customizingId\");\r\n        logger.debug(\"form customizingId=\" + customizingId);\r\n        if (customizingId != null && customizingId != 0) {\r\n            logger.debug(\"customizingId wird in Session gesetzt\");\r\n            session.setAttribute(Constants.CUSTOMIZING_ID, customizingId);\r\n        }\r\n        logger.debug(\"---\" + (Integer) session.getAttribute(Constants.CUSTOMIZING_ID));\r\n        if (isUpdate(request, customizingForm)) {\r\n            Customizing c = createCustomizing(request);\r\n            customizingId = (Integer) session.getAttribute(Constants.CUSTOMIZING_ID);\r\n            c.setCustomizingId(customizingId);\r\n            Customizing customizing = service.getById(c);\r\n            customizingForm.set(Constants.CUSTOMIZING_ID, customizingId);\r\n            customizingForm.set(\"name\", customizing.getName());\r\n            customizingForm.set(\"update\", true);\r\n            service.setStatus(request);\r\n        }\r\n        return mapping.findForward(Constants.FORM);\r\n    }\r\n\r\n    public ActionForward deletequestion(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {\r\n        Customizing customizing = getCustomizing(request);\r\n        if (customizing == null) {\r\n            populate(request);\r\n            logger.debug(\"customizing = null\");\r\n            return mapping.findForward(Constants.LIST);\r\n        }\r\n        if (customizing.getStatus()) {\r\n            request.setAttribute(\"active\", true);\r\n            request.setAttribute(\"customizingDelete\", true);\r\n        }\r\n        ActionMessages messages = new ActionMessages();\r\n        messages.add(ActionMessages.GLOBAL_MESSAGE, new ActionMessage(\"messages.question.delete\", customizing.getName()));\r\n        saveMessages(request, messages);\r\n        request.setAttribute(Constants.ACTION, Constants.CUSTOMIZING_ACTION);\r\n        request.setAttribute(Constants.DISPATCH_YES, Constants.DELETE);\r\n        request.setAttribute(Constants.DISPATCH_NO, Constants.LIST);\r\n        request.setAttribute(Constants.ID_NAME, Constants.CUSTOMIZING_ID);\r\n        request.setAttribute(Constants.ID_VALUE, customizing.getCustomizingId());\r\n        return mapping.findForward(Constants.QUESTION);\r\n    }\r\n\r\n    public ActionForward delete(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {\r\n        Customizing customizing = getCustomizing(request);\r\n        if (customizing == null || customizing.getStatus()) {\r\n            populate(request);\r\n            logger.debug(\"customizing = null oder noch aktiv\");\r\n            return mapping.findForward(Constants.LIST);\r\n        }\r\n        service.cascadeDelete(request, customizing);\r\n        populate(request);\r\n        return mapping.findForward(Constants.LIST);\r\n    }\r\n\r\n    public ActionForward insertOrUpdate(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {\r\n        // Formulardaten holen\r\n        DynaActionForm customizingForm = (DynaActionForm) form;\r\n        Integer customizingId = (Integer) customizingForm.get(\"customizingId\");\r\n        Integer mandantId = (Integer) request.getSession().getAttribute(\"mandantId\");\r\n        String name = (String) customizingForm.get(\"name\");\r\n        Customizing customizing = new Customizing();\r\n        customizing.setCustomizingId(customizingId);\r\n        customizing.setMandantId(mandantId);\r\n        customizing.setName(name);\r\n        customizing.setStatus(true);\r\n        // customizingname check auf unique\r\n        if (exists(request, customizingForm)) {\r\n            ActionMessages errors = new ActionMessages();\r\n            errors.add(\"name\", new ActionMessage(\"errors.duplicate\", \"Customizing\"));\r\n            logger.debug(\"Name besteht bereits.\");\r\n            saveErrors(request, errors);\r\n            return mapping.findForward(Constants.FAILURE);\r\n        }\r\n        // update?\r\n        if (isUpdate(request, customizingForm)) {\r\n            service.update(customizing);\r\n        } else // insert\r\n        {\r\n            customizingId = service.insert(customizing);\r\n            // Projektattraktivitaet, Nutzenattraktivitaet und\r\n            // OperativerNutzen einfï¿½gen\r\n            commonService.insertCustomizingParts(customizingId);\r\n        }\r\n        populate(request);\r\n        request.getSession().setAttribute(Constants.CUSTOMIZING_ID, customizingId);\r\n        return mapping.findForward(Constants.SUCCESS);\r\n    }\r\n\r\n    public ActionForward copy(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {\r\n        DynaActionForm cForm = (DynaActionForm) form;\r\n        service.copy(request, cForm);\r\n        populate(request);\r\n        return mapping.findForward(Constants.LIST);\r\n    }\r\n\r\n    public ActionForward changeStatus(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {\r\n        DynaActionForm cForm = (DynaActionForm) form;\r\n        service.changeStatus(request, cForm);\r\n        populate(request);\r\n        return mapping.findForward(Constants.LIST);\r\n    }\r\n\r\n    private Customizing getCustomizing(HttpServletRequest request) {\r\n        String param = request.getParameter(Constants.CUSTOMIZING_ID);\r\n        Integer customizingId = null;\r\n        try {\r\n            customizingId = new Integer(param);\r\n        } catch (Exception ex) {\r\n            logger.warn(\"Fehlende customizingId!\");\r\n            return null;\r\n        }\r\n        Customizing c = createCustomizing(request);\r\n        c.setCustomizingId(customizingId);\r\n        c = service.getById(c);\r\n        if (c == null) {\r\n            logger.warn(\"Customizing mit der id \" + customizingId + \" wurde nicht gefunden.\");\r\n            return null;\r\n        }\r\n        return c;\r\n    }\r\n\r\n    private void populate(HttpServletRequest request) {\r\n        request.getSession().removeAttribute(Constants.CUSTOMIZING_ID);\r\n        Customizing c = createCustomizing(request);\r\n        List customizings = service.getAll(c.getMandantId());\r\n        request.setAttribute(Constants.CUSTOMIZINGS, customizings);\r\n    }\r\n\r\n    private boolean isUpdate(HttpServletRequest request, DynaActionForm customizingForm) {\r\n        HttpSession session = request.getSession();\r\n        logger.debug(\"---\" + (Integer) session.getAttribute(Constants.CUSTOMIZING_ID));\r\n        Object obj = request.getSession().getAttribute(Constants.CUSTOMIZING_ID);\r\n        logger.debug(\"session customizingId obj=\" + obj);\r\n        if (obj != null && obj instanceof Integer) {\r\n            logger.debug(\"Update\");\r\n            return true;\r\n        }\r\n        Integer id = (Integer) customizingForm.get(\"customizingId\");\r\n        if (id == null || id == 0) {\r\n            return false;\r\n        }\r\n        return true;\r\n    }\r\n\r\n    private boolean exists(HttpServletRequest request, DynaActionForm customizingForm) {\r\n        Integer id = (Integer) customizingForm.get(\"customizingId\");\r\n        String name = (String) customizingForm.get(\"name\");\r\n        Customizing c = createCustomizing(request);\r\n        c.setCustomizingId(id);\r\n        c.setName(name);\r\n        // update?\r\n        if (id != null && id != 0) {\r\n            Customizing customizing = service.getById(c);\r\n            // customizingname geï¿½ndert, ï¿½berprï¿½fen\r\n            if (!name.equals(customizing.getName())) {\r\n                return service.getByName(c) != null;\r\n            }\r\n        } else // insert\r\n        {\r\n            return service.getByName(c) != null;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    /**\r\n     * Generiert ein Customizing Objekt mit dem aktuellen Mandanten.\r\n     *\r\n     * @param request               der HttpServletRequest\r\n     * @return                      ein Customizing mit gesetzem Mandant\r\n     */\r\n    private Customizing createCustomizing(HttpServletRequest request) {\r\n        Customizing c = new Customizing();\r\n        c.setMandantId((Integer) request.getSession().getAttribute(Constants.MANDANT_ID));\r\n        return c;\r\n    }\r\n}\r\n",
		"id": "EvoSuiteBenchmark/46_nutzenportfolio/src/main/java/ch/bfh/egov/nutzenportfolio/action/CustomizingActionTest2.java",
		"test_prompt": "// CustomizingActionTest2.java\npackage ch.bfh.egov.nutzenportfolio.action;\n\nimport java.util.List;\nimport javax.servlet.http.HttpServletRequest;\nimport javax.servlet.http.HttpServletResponse;\nimport javax.servlet.http.HttpSession;\nimport ch.bfh.egov.nutzenportfolio.Constants;\nimport ch.bfh.egov.nutzenportfolio.service.auswahlfeld.AuswahlfeldService;\nimport ch.bfh.egov.nutzenportfolio.service.common.CommonService;\nimport ch.bfh.egov.nutzenportfolio.service.customizing.CustomizingService;\nimport ch.bfh.egov.nutzenportfolio.service.detailziele.DetailzieleService;\nimport ch.bfh.egov.nutzenportfolio.service.fragebogen.NaOpNuService;\nimport ch.bfh.egov.nutzenportfolio.service.fragebogen.ProjektattraktivitaetService;\nimport ch.bfh.egov.nutzenportfolio.service.kategorie.KategorieService;\nimport ch.bfh.egov.nutzenportfolio.service.nutzenkriterium.NutzenkriteriumService;\nimport ch.bfh.egov.nutzenportfolio.service.projektgruppe.ProjektgruppeService;\nimport ch.bfh.egov.nutzenportfolio.service.strategischeziele.StrategischeZieleService;\nimport ch.bfh.egov.nutzenportfolio.tos.Customizing;\nimport org.apache.commons.logging.Log;\nimport org.apache.commons.logging.LogFactory;\nimport org.apache.struts.action.ActionForm;\nimport org.apache.struts.action.ActionForward;\nimport org.apache.struts.action.ActionMapping;\nimport org.apache.struts.action.ActionMessage;\nimport org.apache.struts.action.ActionMessages;\nimport org.apache.struts.action.DynaActionForm;\nimport org.apache.struts.actions.DispatchAction;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link CustomizingAction}.\n* It contains ten unit test cases for the {@link CustomizingAction#deletequestion(ActionMapping, ActionForm, HttpServletRequest, HttpServletResponse)} method.\n*/\nclass CustomizingActionTest2 {"
	},
	{
		"original_code": "// CustomizingAction.java\n/**\r\n * Nutzenportfolio\r\n * Copyright (C) 2006 Kompetenzzentrum E-Business, Simon Bergamin\r\n *\r\n * This program is free software; you can redistribute it and/or\r\n * modify it under the terms of the GNU General Public License\r\n * as published by the Free Software Foundation; either version 2\r\n * of the License, or (at your option) any later version.\r\n *\r\n * This program is distributed in the hope that it will be useful,\r\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n * GNU General Public License for more details.\r\n *\r\n * You should have received a copy of the GNU General Public License\r\n * along with this program; if not, write to the Free Software\r\n * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\r\n */\r\npackage ch.bfh.egov.nutzenportfolio.action;\r\n\r\nimport java.util.List;\r\nimport javax.servlet.http.HttpServletRequest;\r\nimport javax.servlet.http.HttpServletResponse;\r\nimport javax.servlet.http.HttpSession;\r\nimport ch.bfh.egov.nutzenportfolio.Constants;\r\nimport ch.bfh.egov.nutzenportfolio.service.auswahlfeld.AuswahlfeldService;\r\nimport ch.bfh.egov.nutzenportfolio.service.common.CommonService;\r\nimport ch.bfh.egov.nutzenportfolio.service.customizing.CustomizingService;\r\nimport ch.bfh.egov.nutzenportfolio.service.detailziele.DetailzieleService;\r\nimport ch.bfh.egov.nutzenportfolio.service.fragebogen.NaOpNuService;\r\nimport ch.bfh.egov.nutzenportfolio.service.fragebogen.ProjektattraktivitaetService;\r\nimport ch.bfh.egov.nutzenportfolio.service.kategorie.KategorieService;\r\nimport ch.bfh.egov.nutzenportfolio.service.nutzenkriterium.NutzenkriteriumService;\r\nimport ch.bfh.egov.nutzenportfolio.service.projektgruppe.ProjektgruppeService;\r\nimport ch.bfh.egov.nutzenportfolio.service.strategischeziele.StrategischeZieleService;\r\nimport ch.bfh.egov.nutzenportfolio.tos.Customizing;\r\nimport org.apache.commons.logging.Log;\r\nimport org.apache.commons.logging.LogFactory;\r\nimport org.apache.struts.action.ActionForm;\r\nimport org.apache.struts.action.ActionForward;\r\nimport org.apache.struts.action.ActionMapping;\r\nimport org.apache.struts.action.ActionMessage;\r\nimport org.apache.struts.action.ActionMessages;\r\nimport org.apache.struts.action.DynaActionForm;\r\nimport org.apache.struts.actions.DispatchAction;\r\n\r\npublic class CustomizingAction extends DispatchAction {\r\n\r\n    private Log logger = LogFactory.getLog(this.getClass());\r\n\r\n    private CustomizingService service;\r\n\r\n    private CommonService commonService;\r\n\r\n    public CustomizingAction(CustomizingService service, CommonService commonService, StrategischeZieleService szService, DetailzieleService dzService, AuswahlfeldService afService, KategorieService kService, NutzenkriteriumService nService, NaOpNuService naOpNuService, ProjektattraktivitaetService paService, ProjektgruppeService pgService) {\r\n        super();\r\n        this.service = service;\r\n        this.commonService = commonService;\r\n        this.service.init(commonService, szService, dzService, afService, kService, nService, naOpNuService, paService, pgService);\r\n    }\r\n\r\n    public ActionForward list(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {\r\n        populate(request);\r\n        return mapping.findForward(Constants.LIST);\r\n    }\r\n\r\n    public ActionForward prepare(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {\r\n        HttpSession session = request.getSession();\r\n        service.unsetStatus(request);\r\n        DynaActionForm customizingForm = (DynaActionForm) form;\r\n        Integer customizingId = (Integer) customizingForm.get(\"customizingId\");\r\n        logger.debug(\"form customizingId=\" + customizingId);\r\n        if (customizingId != null && customizingId != 0) {\r\n            logger.debug(\"customizingId wird in Session gesetzt\");\r\n            session.setAttribute(Constants.CUSTOMIZING_ID, customizingId);\r\n        }\r\n        logger.debug(\"---\" + (Integer) session.getAttribute(Constants.CUSTOMIZING_ID));\r\n        if (isUpdate(request, customizingForm)) {\r\n            Customizing c = createCustomizing(request);\r\n            customizingId = (Integer) session.getAttribute(Constants.CUSTOMIZING_ID);\r\n            c.setCustomizingId(customizingId);\r\n            Customizing customizing = service.getById(c);\r\n            customizingForm.set(Constants.CUSTOMIZING_ID, customizingId);\r\n            customizingForm.set(\"name\", customizing.getName());\r\n            customizingForm.set(\"update\", true);\r\n            service.setStatus(request);\r\n        }\r\n        return mapping.findForward(Constants.FORM);\r\n    }\r\n\r\n    public ActionForward deletequestion(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {\r\n        Customizing customizing = getCustomizing(request);\r\n        if (customizing == null) {\r\n            populate(request);\r\n            logger.debug(\"customizing = null\");\r\n            return mapping.findForward(Constants.LIST);\r\n        }\r\n        if (customizing.getStatus()) {\r\n            request.setAttribute(\"active\", true);\r\n            request.setAttribute(\"customizingDelete\", true);\r\n        }\r\n        ActionMessages messages = new ActionMessages();\r\n        messages.add(ActionMessages.GLOBAL_MESSAGE, new ActionMessage(\"messages.question.delete\", customizing.getName()));\r\n        saveMessages(request, messages);\r\n        request.setAttribute(Constants.ACTION, Constants.CUSTOMIZING_ACTION);\r\n        request.setAttribute(Constants.DISPATCH_YES, Constants.DELETE);\r\n        request.setAttribute(Constants.DISPATCH_NO, Constants.LIST);\r\n        request.setAttribute(Constants.ID_NAME, Constants.CUSTOMIZING_ID);\r\n        request.setAttribute(Constants.ID_VALUE, customizing.getCustomizingId());\r\n        return mapping.findForward(Constants.QUESTION);\r\n    }\r\n\r\n    public ActionForward delete(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {\r\n        Customizing customizing = getCustomizing(request);\r\n        if (customizing == null || customizing.getStatus()) {\r\n            populate(request);\r\n            logger.debug(\"customizing = null oder noch aktiv\");\r\n            return mapping.findForward(Constants.LIST);\r\n        }\r\n        service.cascadeDelete(request, customizing);\r\n        populate(request);\r\n        return mapping.findForward(Constants.LIST);\r\n    }\r\n\r\n    public ActionForward insertOrUpdate(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {\r\n        // Formulardaten holen\r\n        DynaActionForm customizingForm = (DynaActionForm) form;\r\n        Integer customizingId = (Integer) customizingForm.get(\"customizingId\");\r\n        Integer mandantId = (Integer) request.getSession().getAttribute(\"mandantId\");\r\n        String name = (String) customizingForm.get(\"name\");\r\n        Customizing customizing = new Customizing();\r\n        customizing.setCustomizingId(customizingId);\r\n        customizing.setMandantId(mandantId);\r\n        customizing.setName(name);\r\n        customizing.setStatus(true);\r\n        // customizingname check auf unique\r\n        if (exists(request, customizingForm)) {\r\n            ActionMessages errors = new ActionMessages();\r\n            errors.add(\"name\", new ActionMessage(\"errors.duplicate\", \"Customizing\"));\r\n            logger.debug(\"Name besteht bereits.\");\r\n            saveErrors(request, errors);\r\n            return mapping.findForward(Constants.FAILURE);\r\n        }\r\n        // update?\r\n        if (isUpdate(request, customizingForm)) {\r\n            service.update(customizing);\r\n        } else // insert\r\n        {\r\n            customizingId = service.insert(customizing);\r\n            // Projektattraktivitaet, Nutzenattraktivitaet und\r\n            // OperativerNutzen einfï¿½gen\r\n            commonService.insertCustomizingParts(customizingId);\r\n        }\r\n        populate(request);\r\n        request.getSession().setAttribute(Constants.CUSTOMIZING_ID, customizingId);\r\n        return mapping.findForward(Constants.SUCCESS);\r\n    }\r\n\r\n    public ActionForward copy(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {\r\n        DynaActionForm cForm = (DynaActionForm) form;\r\n        service.copy(request, cForm);\r\n        populate(request);\r\n        return mapping.findForward(Constants.LIST);\r\n    }\r\n\r\n    public ActionForward changeStatus(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {\r\n        DynaActionForm cForm = (DynaActionForm) form;\r\n        service.changeStatus(request, cForm);\r\n        populate(request);\r\n        return mapping.findForward(Constants.LIST);\r\n    }\r\n\r\n    private Customizing getCustomizing(HttpServletRequest request) {\r\n        String param = request.getParameter(Constants.CUSTOMIZING_ID);\r\n        Integer customizingId = null;\r\n        try {\r\n            customizingId = new Integer(param);\r\n        } catch (Exception ex) {\r\n            logger.warn(\"Fehlende customizingId!\");\r\n            return null;\r\n        }\r\n        Customizing c = createCustomizing(request);\r\n        c.setCustomizingId(customizingId);\r\n        c = service.getById(c);\r\n        if (c == null) {\r\n            logger.warn(\"Customizing mit der id \" + customizingId + \" wurde nicht gefunden.\");\r\n            return null;\r\n        }\r\n        return c;\r\n    }\r\n\r\n    private void populate(HttpServletRequest request) {\r\n        request.getSession().removeAttribute(Constants.CUSTOMIZING_ID);\r\n        Customizing c = createCustomizing(request);\r\n        List customizings = service.getAll(c.getMandantId());\r\n        request.setAttribute(Constants.CUSTOMIZINGS, customizings);\r\n    }\r\n\r\n    private boolean isUpdate(HttpServletRequest request, DynaActionForm customizingForm) {\r\n        HttpSession session = request.getSession();\r\n        logger.debug(\"---\" + (Integer) session.getAttribute(Constants.CUSTOMIZING_ID));\r\n        Object obj = request.getSession().getAttribute(Constants.CUSTOMIZING_ID);\r\n        logger.debug(\"session customizingId obj=\" + obj);\r\n        if (obj != null && obj instanceof Integer) {\r\n            logger.debug(\"Update\");\r\n            return true;\r\n        }\r\n        Integer id = (Integer) customizingForm.get(\"customizingId\");\r\n        if (id == null || id == 0) {\r\n            return false;\r\n        }\r\n        return true;\r\n    }\r\n\r\n    private boolean exists(HttpServletRequest request, DynaActionForm customizingForm) {\r\n        Integer id = (Integer) customizingForm.get(\"customizingId\");\r\n        String name = (String) customizingForm.get(\"name\");\r\n        Customizing c = createCustomizing(request);\r\n        c.setCustomizingId(id);\r\n        c.setName(name);\r\n        // update?\r\n        if (id != null && id != 0) {\r\n            Customizing customizing = service.getById(c);\r\n            // customizingname geï¿½ndert, ï¿½berprï¿½fen\r\n            if (!name.equals(customizing.getName())) {\r\n                return service.getByName(c) != null;\r\n            }\r\n        } else // insert\r\n        {\r\n            return service.getByName(c) != null;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    /**\r\n     * Generiert ein Customizing Objekt mit dem aktuellen Mandanten.\r\n     *\r\n     * @param request               der HttpServletRequest\r\n     * @return                      ein Customizing mit gesetzem Mandant\r\n     */\r\n    private Customizing createCustomizing(HttpServletRequest request) {\r\n        Customizing c = new Customizing();\r\n        c.setMandantId((Integer) request.getSession().getAttribute(Constants.MANDANT_ID));\r\n        return c;\r\n    }\r\n}\r\n",
		"id": "EvoSuiteBenchmark/46_nutzenportfolio/src/main/java/ch/bfh/egov/nutzenportfolio/action/CustomizingActionTest3.java",
		"test_prompt": "// CustomizingActionTest3.java\npackage ch.bfh.egov.nutzenportfolio.action;\n\nimport java.util.List;\nimport javax.servlet.http.HttpServletRequest;\nimport javax.servlet.http.HttpServletResponse;\nimport javax.servlet.http.HttpSession;\nimport ch.bfh.egov.nutzenportfolio.Constants;\nimport ch.bfh.egov.nutzenportfolio.service.auswahlfeld.AuswahlfeldService;\nimport ch.bfh.egov.nutzenportfolio.service.common.CommonService;\nimport ch.bfh.egov.nutzenportfolio.service.customizing.CustomizingService;\nimport ch.bfh.egov.nutzenportfolio.service.detailziele.DetailzieleService;\nimport ch.bfh.egov.nutzenportfolio.service.fragebogen.NaOpNuService;\nimport ch.bfh.egov.nutzenportfolio.service.fragebogen.ProjektattraktivitaetService;\nimport ch.bfh.egov.nutzenportfolio.service.kategorie.KategorieService;\nimport ch.bfh.egov.nutzenportfolio.service.nutzenkriterium.NutzenkriteriumService;\nimport ch.bfh.egov.nutzenportfolio.service.projektgruppe.ProjektgruppeService;\nimport ch.bfh.egov.nutzenportfolio.service.strategischeziele.StrategischeZieleService;\nimport ch.bfh.egov.nutzenportfolio.tos.Customizing;\nimport org.apache.commons.logging.Log;\nimport org.apache.commons.logging.LogFactory;\nimport org.apache.struts.action.ActionForm;\nimport org.apache.struts.action.ActionForward;\nimport org.apache.struts.action.ActionMapping;\nimport org.apache.struts.action.ActionMessage;\nimport org.apache.struts.action.ActionMessages;\nimport org.apache.struts.action.DynaActionForm;\nimport org.apache.struts.actions.DispatchAction;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link CustomizingAction}.\n* It contains ten unit test cases for the {@link CustomizingAction#delete(ActionMapping, ActionForm, HttpServletRequest, HttpServletResponse)} method.\n*/\nclass CustomizingActionTest3 {"
	},
	{
		"original_code": "// CustomizingAction.java\n/**\r\n * Nutzenportfolio\r\n * Copyright (C) 2006 Kompetenzzentrum E-Business, Simon Bergamin\r\n *\r\n * This program is free software; you can redistribute it and/or\r\n * modify it under the terms of the GNU General Public License\r\n * as published by the Free Software Foundation; either version 2\r\n * of the License, or (at your option) any later version.\r\n *\r\n * This program is distributed in the hope that it will be useful,\r\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n * GNU General Public License for more details.\r\n *\r\n * You should have received a copy of the GNU General Public License\r\n * along with this program; if not, write to the Free Software\r\n * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\r\n */\r\npackage ch.bfh.egov.nutzenportfolio.action;\r\n\r\nimport java.util.List;\r\nimport javax.servlet.http.HttpServletRequest;\r\nimport javax.servlet.http.HttpServletResponse;\r\nimport javax.servlet.http.HttpSession;\r\nimport ch.bfh.egov.nutzenportfolio.Constants;\r\nimport ch.bfh.egov.nutzenportfolio.service.auswahlfeld.AuswahlfeldService;\r\nimport ch.bfh.egov.nutzenportfolio.service.common.CommonService;\r\nimport ch.bfh.egov.nutzenportfolio.service.customizing.CustomizingService;\r\nimport ch.bfh.egov.nutzenportfolio.service.detailziele.DetailzieleService;\r\nimport ch.bfh.egov.nutzenportfolio.service.fragebogen.NaOpNuService;\r\nimport ch.bfh.egov.nutzenportfolio.service.fragebogen.ProjektattraktivitaetService;\r\nimport ch.bfh.egov.nutzenportfolio.service.kategorie.KategorieService;\r\nimport ch.bfh.egov.nutzenportfolio.service.nutzenkriterium.NutzenkriteriumService;\r\nimport ch.bfh.egov.nutzenportfolio.service.projektgruppe.ProjektgruppeService;\r\nimport ch.bfh.egov.nutzenportfolio.service.strategischeziele.StrategischeZieleService;\r\nimport ch.bfh.egov.nutzenportfolio.tos.Customizing;\r\nimport org.apache.commons.logging.Log;\r\nimport org.apache.commons.logging.LogFactory;\r\nimport org.apache.struts.action.ActionForm;\r\nimport org.apache.struts.action.ActionForward;\r\nimport org.apache.struts.action.ActionMapping;\r\nimport org.apache.struts.action.ActionMessage;\r\nimport org.apache.struts.action.ActionMessages;\r\nimport org.apache.struts.action.DynaActionForm;\r\nimport org.apache.struts.actions.DispatchAction;\r\n\r\npublic class CustomizingAction extends DispatchAction {\r\n\r\n    private Log logger = LogFactory.getLog(this.getClass());\r\n\r\n    private CustomizingService service;\r\n\r\n    private CommonService commonService;\r\n\r\n    public CustomizingAction(CustomizingService service, CommonService commonService, StrategischeZieleService szService, DetailzieleService dzService, AuswahlfeldService afService, KategorieService kService, NutzenkriteriumService nService, NaOpNuService naOpNuService, ProjektattraktivitaetService paService, ProjektgruppeService pgService) {\r\n        super();\r\n        this.service = service;\r\n        this.commonService = commonService;\r\n        this.service.init(commonService, szService, dzService, afService, kService, nService, naOpNuService, paService, pgService);\r\n    }\r\n\r\n    public ActionForward list(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {\r\n        populate(request);\r\n        return mapping.findForward(Constants.LIST);\r\n    }\r\n\r\n    public ActionForward prepare(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {\r\n        HttpSession session = request.getSession();\r\n        service.unsetStatus(request);\r\n        DynaActionForm customizingForm = (DynaActionForm) form;\r\n        Integer customizingId = (Integer) customizingForm.get(\"customizingId\");\r\n        logger.debug(\"form customizingId=\" + customizingId);\r\n        if (customizingId != null && customizingId != 0) {\r\n            logger.debug(\"customizingId wird in Session gesetzt\");\r\n            session.setAttribute(Constants.CUSTOMIZING_ID, customizingId);\r\n        }\r\n        logger.debug(\"---\" + (Integer) session.getAttribute(Constants.CUSTOMIZING_ID));\r\n        if (isUpdate(request, customizingForm)) {\r\n            Customizing c = createCustomizing(request);\r\n            customizingId = (Integer) session.getAttribute(Constants.CUSTOMIZING_ID);\r\n            c.setCustomizingId(customizingId);\r\n            Customizing customizing = service.getById(c);\r\n            customizingForm.set(Constants.CUSTOMIZING_ID, customizingId);\r\n            customizingForm.set(\"name\", customizing.getName());\r\n            customizingForm.set(\"update\", true);\r\n            service.setStatus(request);\r\n        }\r\n        return mapping.findForward(Constants.FORM);\r\n    }\r\n\r\n    public ActionForward deletequestion(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {\r\n        Customizing customizing = getCustomizing(request);\r\n        if (customizing == null) {\r\n            populate(request);\r\n            logger.debug(\"customizing = null\");\r\n            return mapping.findForward(Constants.LIST);\r\n        }\r\n        if (customizing.getStatus()) {\r\n            request.setAttribute(\"active\", true);\r\n            request.setAttribute(\"customizingDelete\", true);\r\n        }\r\n        ActionMessages messages = new ActionMessages();\r\n        messages.add(ActionMessages.GLOBAL_MESSAGE, new ActionMessage(\"messages.question.delete\", customizing.getName()));\r\n        saveMessages(request, messages);\r\n        request.setAttribute(Constants.ACTION, Constants.CUSTOMIZING_ACTION);\r\n        request.setAttribute(Constants.DISPATCH_YES, Constants.DELETE);\r\n        request.setAttribute(Constants.DISPATCH_NO, Constants.LIST);\r\n        request.setAttribute(Constants.ID_NAME, Constants.CUSTOMIZING_ID);\r\n        request.setAttribute(Constants.ID_VALUE, customizing.getCustomizingId());\r\n        return mapping.findForward(Constants.QUESTION);\r\n    }\r\n\r\n    public ActionForward delete(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {\r\n        Customizing customizing = getCustomizing(request);\r\n        if (customizing == null || customizing.getStatus()) {\r\n            populate(request);\r\n            logger.debug(\"customizing = null oder noch aktiv\");\r\n            return mapping.findForward(Constants.LIST);\r\n        }\r\n        service.cascadeDelete(request, customizing);\r\n        populate(request);\r\n        return mapping.findForward(Constants.LIST);\r\n    }\r\n\r\n    public ActionForward insertOrUpdate(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {\r\n        // Formulardaten holen\r\n        DynaActionForm customizingForm = (DynaActionForm) form;\r\n        Integer customizingId = (Integer) customizingForm.get(\"customizingId\");\r\n        Integer mandantId = (Integer) request.getSession().getAttribute(\"mandantId\");\r\n        String name = (String) customizingForm.get(\"name\");\r\n        Customizing customizing = new Customizing();\r\n        customizing.setCustomizingId(customizingId);\r\n        customizing.setMandantId(mandantId);\r\n        customizing.setName(name);\r\n        customizing.setStatus(true);\r\n        // customizingname check auf unique\r\n        if (exists(request, customizingForm)) {\r\n            ActionMessages errors = new ActionMessages();\r\n            errors.add(\"name\", new ActionMessage(\"errors.duplicate\", \"Customizing\"));\r\n            logger.debug(\"Name besteht bereits.\");\r\n            saveErrors(request, errors);\r\n            return mapping.findForward(Constants.FAILURE);\r\n        }\r\n        // update?\r\n        if (isUpdate(request, customizingForm)) {\r\n            service.update(customizing);\r\n        } else // insert\r\n        {\r\n            customizingId = service.insert(customizing);\r\n            // Projektattraktivitaet, Nutzenattraktivitaet und\r\n            // OperativerNutzen einfï¿½gen\r\n            commonService.insertCustomizingParts(customizingId);\r\n        }\r\n        populate(request);\r\n        request.getSession().setAttribute(Constants.CUSTOMIZING_ID, customizingId);\r\n        return mapping.findForward(Constants.SUCCESS);\r\n    }\r\n\r\n    public ActionForward copy(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {\r\n        DynaActionForm cForm = (DynaActionForm) form;\r\n        service.copy(request, cForm);\r\n        populate(request);\r\n        return mapping.findForward(Constants.LIST);\r\n    }\r\n\r\n    public ActionForward changeStatus(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {\r\n        DynaActionForm cForm = (DynaActionForm) form;\r\n        service.changeStatus(request, cForm);\r\n        populate(request);\r\n        return mapping.findForward(Constants.LIST);\r\n    }\r\n\r\n    private Customizing getCustomizing(HttpServletRequest request) {\r\n        String param = request.getParameter(Constants.CUSTOMIZING_ID);\r\n        Integer customizingId = null;\r\n        try {\r\n            customizingId = new Integer(param);\r\n        } catch (Exception ex) {\r\n            logger.warn(\"Fehlende customizingId!\");\r\n            return null;\r\n        }\r\n        Customizing c = createCustomizing(request);\r\n        c.setCustomizingId(customizingId);\r\n        c = service.getById(c);\r\n        if (c == null) {\r\n            logger.warn(\"Customizing mit der id \" + customizingId + \" wurde nicht gefunden.\");\r\n            return null;\r\n        }\r\n        return c;\r\n    }\r\n\r\n    private void populate(HttpServletRequest request) {\r\n        request.getSession().removeAttribute(Constants.CUSTOMIZING_ID);\r\n        Customizing c = createCustomizing(request);\r\n        List customizings = service.getAll(c.getMandantId());\r\n        request.setAttribute(Constants.CUSTOMIZINGS, customizings);\r\n    }\r\n\r\n    private boolean isUpdate(HttpServletRequest request, DynaActionForm customizingForm) {\r\n        HttpSession session = request.getSession();\r\n        logger.debug(\"---\" + (Integer) session.getAttribute(Constants.CUSTOMIZING_ID));\r\n        Object obj = request.getSession().getAttribute(Constants.CUSTOMIZING_ID);\r\n        logger.debug(\"session customizingId obj=\" + obj);\r\n        if (obj != null && obj instanceof Integer) {\r\n            logger.debug(\"Update\");\r\n            return true;\r\n        }\r\n        Integer id = (Integer) customizingForm.get(\"customizingId\");\r\n        if (id == null || id == 0) {\r\n            return false;\r\n        }\r\n        return true;\r\n    }\r\n\r\n    private boolean exists(HttpServletRequest request, DynaActionForm customizingForm) {\r\n        Integer id = (Integer) customizingForm.get(\"customizingId\");\r\n        String name = (String) customizingForm.get(\"name\");\r\n        Customizing c = createCustomizing(request);\r\n        c.setCustomizingId(id);\r\n        c.setName(name);\r\n        // update?\r\n        if (id != null && id != 0) {\r\n            Customizing customizing = service.getById(c);\r\n            // customizingname geï¿½ndert, ï¿½berprï¿½fen\r\n            if (!name.equals(customizing.getName())) {\r\n                return service.getByName(c) != null;\r\n            }\r\n        } else // insert\r\n        {\r\n            return service.getByName(c) != null;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    /**\r\n     * Generiert ein Customizing Objekt mit dem aktuellen Mandanten.\r\n     *\r\n     * @param request               der HttpServletRequest\r\n     * @return                      ein Customizing mit gesetzem Mandant\r\n     */\r\n    private Customizing createCustomizing(HttpServletRequest request) {\r\n        Customizing c = new Customizing();\r\n        c.setMandantId((Integer) request.getSession().getAttribute(Constants.MANDANT_ID));\r\n        return c;\r\n    }\r\n}\r\n",
		"id": "EvoSuiteBenchmark/46_nutzenportfolio/src/main/java/ch/bfh/egov/nutzenportfolio/action/CustomizingActionTest4.java",
		"test_prompt": "// CustomizingActionTest4.java\npackage ch.bfh.egov.nutzenportfolio.action;\n\nimport java.util.List;\nimport javax.servlet.http.HttpServletRequest;\nimport javax.servlet.http.HttpServletResponse;\nimport javax.servlet.http.HttpSession;\nimport ch.bfh.egov.nutzenportfolio.Constants;\nimport ch.bfh.egov.nutzenportfolio.service.auswahlfeld.AuswahlfeldService;\nimport ch.bfh.egov.nutzenportfolio.service.common.CommonService;\nimport ch.bfh.egov.nutzenportfolio.service.customizing.CustomizingService;\nimport ch.bfh.egov.nutzenportfolio.service.detailziele.DetailzieleService;\nimport ch.bfh.egov.nutzenportfolio.service.fragebogen.NaOpNuService;\nimport ch.bfh.egov.nutzenportfolio.service.fragebogen.ProjektattraktivitaetService;\nimport ch.bfh.egov.nutzenportfolio.service.kategorie.KategorieService;\nimport ch.bfh.egov.nutzenportfolio.service.nutzenkriterium.NutzenkriteriumService;\nimport ch.bfh.egov.nutzenportfolio.service.projektgruppe.ProjektgruppeService;\nimport ch.bfh.egov.nutzenportfolio.service.strategischeziele.StrategischeZieleService;\nimport ch.bfh.egov.nutzenportfolio.tos.Customizing;\nimport org.apache.commons.logging.Log;\nimport org.apache.commons.logging.LogFactory;\nimport org.apache.struts.action.ActionForm;\nimport org.apache.struts.action.ActionForward;\nimport org.apache.struts.action.ActionMapping;\nimport org.apache.struts.action.ActionMessage;\nimport org.apache.struts.action.ActionMessages;\nimport org.apache.struts.action.DynaActionForm;\nimport org.apache.struts.actions.DispatchAction;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link CustomizingAction}.\n* It contains ten unit test cases for the {@link CustomizingAction#insertOrUpdate(ActionMapping, ActionForm, HttpServletRequest, HttpServletResponse)} method.\n*/\nclass CustomizingActionTest4 {"
	},
	{
		"original_code": "// CustomizingAction.java\n/**\r\n * Nutzenportfolio\r\n * Copyright (C) 2006 Kompetenzzentrum E-Business, Simon Bergamin\r\n *\r\n * This program is free software; you can redistribute it and/or\r\n * modify it under the terms of the GNU General Public License\r\n * as published by the Free Software Foundation; either version 2\r\n * of the License, or (at your option) any later version.\r\n *\r\n * This program is distributed in the hope that it will be useful,\r\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n * GNU General Public License for more details.\r\n *\r\n * You should have received a copy of the GNU General Public License\r\n * along with this program; if not, write to the Free Software\r\n * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\r\n */\r\npackage ch.bfh.egov.nutzenportfolio.action;\r\n\r\nimport java.util.List;\r\nimport javax.servlet.http.HttpServletRequest;\r\nimport javax.servlet.http.HttpServletResponse;\r\nimport javax.servlet.http.HttpSession;\r\nimport ch.bfh.egov.nutzenportfolio.Constants;\r\nimport ch.bfh.egov.nutzenportfolio.service.auswahlfeld.AuswahlfeldService;\r\nimport ch.bfh.egov.nutzenportfolio.service.common.CommonService;\r\nimport ch.bfh.egov.nutzenportfolio.service.customizing.CustomizingService;\r\nimport ch.bfh.egov.nutzenportfolio.service.detailziele.DetailzieleService;\r\nimport ch.bfh.egov.nutzenportfolio.service.fragebogen.NaOpNuService;\r\nimport ch.bfh.egov.nutzenportfolio.service.fragebogen.ProjektattraktivitaetService;\r\nimport ch.bfh.egov.nutzenportfolio.service.kategorie.KategorieService;\r\nimport ch.bfh.egov.nutzenportfolio.service.nutzenkriterium.NutzenkriteriumService;\r\nimport ch.bfh.egov.nutzenportfolio.service.projektgruppe.ProjektgruppeService;\r\nimport ch.bfh.egov.nutzenportfolio.service.strategischeziele.StrategischeZieleService;\r\nimport ch.bfh.egov.nutzenportfolio.tos.Customizing;\r\nimport org.apache.commons.logging.Log;\r\nimport org.apache.commons.logging.LogFactory;\r\nimport org.apache.struts.action.ActionForm;\r\nimport org.apache.struts.action.ActionForward;\r\nimport org.apache.struts.action.ActionMapping;\r\nimport org.apache.struts.action.ActionMessage;\r\nimport org.apache.struts.action.ActionMessages;\r\nimport org.apache.struts.action.DynaActionForm;\r\nimport org.apache.struts.actions.DispatchAction;\r\n\r\npublic class CustomizingAction extends DispatchAction {\r\n\r\n    private Log logger = LogFactory.getLog(this.getClass());\r\n\r\n    private CustomizingService service;\r\n\r\n    private CommonService commonService;\r\n\r\n    public CustomizingAction(CustomizingService service, CommonService commonService, StrategischeZieleService szService, DetailzieleService dzService, AuswahlfeldService afService, KategorieService kService, NutzenkriteriumService nService, NaOpNuService naOpNuService, ProjektattraktivitaetService paService, ProjektgruppeService pgService) {\r\n        super();\r\n        this.service = service;\r\n        this.commonService = commonService;\r\n        this.service.init(commonService, szService, dzService, afService, kService, nService, naOpNuService, paService, pgService);\r\n    }\r\n\r\n    public ActionForward list(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {\r\n        populate(request);\r\n        return mapping.findForward(Constants.LIST);\r\n    }\r\n\r\n    public ActionForward prepare(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {\r\n        HttpSession session = request.getSession();\r\n        service.unsetStatus(request);\r\n        DynaActionForm customizingForm = (DynaActionForm) form;\r\n        Integer customizingId = (Integer) customizingForm.get(\"customizingId\");\r\n        logger.debug(\"form customizingId=\" + customizingId);\r\n        if (customizingId != null && customizingId != 0) {\r\n            logger.debug(\"customizingId wird in Session gesetzt\");\r\n            session.setAttribute(Constants.CUSTOMIZING_ID, customizingId);\r\n        }\r\n        logger.debug(\"---\" + (Integer) session.getAttribute(Constants.CUSTOMIZING_ID));\r\n        if (isUpdate(request, customizingForm)) {\r\n            Customizing c = createCustomizing(request);\r\n            customizingId = (Integer) session.getAttribute(Constants.CUSTOMIZING_ID);\r\n            c.setCustomizingId(customizingId);\r\n            Customizing customizing = service.getById(c);\r\n            customizingForm.set(Constants.CUSTOMIZING_ID, customizingId);\r\n            customizingForm.set(\"name\", customizing.getName());\r\n            customizingForm.set(\"update\", true);\r\n            service.setStatus(request);\r\n        }\r\n        return mapping.findForward(Constants.FORM);\r\n    }\r\n\r\n    public ActionForward deletequestion(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {\r\n        Customizing customizing = getCustomizing(request);\r\n        if (customizing == null) {\r\n            populate(request);\r\n            logger.debug(\"customizing = null\");\r\n            return mapping.findForward(Constants.LIST);\r\n        }\r\n        if (customizing.getStatus()) {\r\n            request.setAttribute(\"active\", true);\r\n            request.setAttribute(\"customizingDelete\", true);\r\n        }\r\n        ActionMessages messages = new ActionMessages();\r\n        messages.add(ActionMessages.GLOBAL_MESSAGE, new ActionMessage(\"messages.question.delete\", customizing.getName()));\r\n        saveMessages(request, messages);\r\n        request.setAttribute(Constants.ACTION, Constants.CUSTOMIZING_ACTION);\r\n        request.setAttribute(Constants.DISPATCH_YES, Constants.DELETE);\r\n        request.setAttribute(Constants.DISPATCH_NO, Constants.LIST);\r\n        request.setAttribute(Constants.ID_NAME, Constants.CUSTOMIZING_ID);\r\n        request.setAttribute(Constants.ID_VALUE, customizing.getCustomizingId());\r\n        return mapping.findForward(Constants.QUESTION);\r\n    }\r\n\r\n    public ActionForward delete(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {\r\n        Customizing customizing = getCustomizing(request);\r\n        if (customizing == null || customizing.getStatus()) {\r\n            populate(request);\r\n            logger.debug(\"customizing = null oder noch aktiv\");\r\n            return mapping.findForward(Constants.LIST);\r\n        }\r\n        service.cascadeDelete(request, customizing);\r\n        populate(request);\r\n        return mapping.findForward(Constants.LIST);\r\n    }\r\n\r\n    public ActionForward insertOrUpdate(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {\r\n        // Formulardaten holen\r\n        DynaActionForm customizingForm = (DynaActionForm) form;\r\n        Integer customizingId = (Integer) customizingForm.get(\"customizingId\");\r\n        Integer mandantId = (Integer) request.getSession().getAttribute(\"mandantId\");\r\n        String name = (String) customizingForm.get(\"name\");\r\n        Customizing customizing = new Customizing();\r\n        customizing.setCustomizingId(customizingId);\r\n        customizing.setMandantId(mandantId);\r\n        customizing.setName(name);\r\n        customizing.setStatus(true);\r\n        // customizingname check auf unique\r\n        if (exists(request, customizingForm)) {\r\n            ActionMessages errors = new ActionMessages();\r\n            errors.add(\"name\", new ActionMessage(\"errors.duplicate\", \"Customizing\"));\r\n            logger.debug(\"Name besteht bereits.\");\r\n            saveErrors(request, errors);\r\n            return mapping.findForward(Constants.FAILURE);\r\n        }\r\n        // update?\r\n        if (isUpdate(request, customizingForm)) {\r\n            service.update(customizing);\r\n        } else // insert\r\n        {\r\n            customizingId = service.insert(customizing);\r\n            // Projektattraktivitaet, Nutzenattraktivitaet und\r\n            // OperativerNutzen einfï¿½gen\r\n            commonService.insertCustomizingParts(customizingId);\r\n        }\r\n        populate(request);\r\n        request.getSession().setAttribute(Constants.CUSTOMIZING_ID, customizingId);\r\n        return mapping.findForward(Constants.SUCCESS);\r\n    }\r\n\r\n    public ActionForward copy(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {\r\n        DynaActionForm cForm = (DynaActionForm) form;\r\n        service.copy(request, cForm);\r\n        populate(request);\r\n        return mapping.findForward(Constants.LIST);\r\n    }\r\n\r\n    public ActionForward changeStatus(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {\r\n        DynaActionForm cForm = (DynaActionForm) form;\r\n        service.changeStatus(request, cForm);\r\n        populate(request);\r\n        return mapping.findForward(Constants.LIST);\r\n    }\r\n\r\n    private Customizing getCustomizing(HttpServletRequest request) {\r\n        String param = request.getParameter(Constants.CUSTOMIZING_ID);\r\n        Integer customizingId = null;\r\n        try {\r\n            customizingId = new Integer(param);\r\n        } catch (Exception ex) {\r\n            logger.warn(\"Fehlende customizingId!\");\r\n            return null;\r\n        }\r\n        Customizing c = createCustomizing(request);\r\n        c.setCustomizingId(customizingId);\r\n        c = service.getById(c);\r\n        if (c == null) {\r\n            logger.warn(\"Customizing mit der id \" + customizingId + \" wurde nicht gefunden.\");\r\n            return null;\r\n        }\r\n        return c;\r\n    }\r\n\r\n    private void populate(HttpServletRequest request) {\r\n        request.getSession().removeAttribute(Constants.CUSTOMIZING_ID);\r\n        Customizing c = createCustomizing(request);\r\n        List customizings = service.getAll(c.getMandantId());\r\n        request.setAttribute(Constants.CUSTOMIZINGS, customizings);\r\n    }\r\n\r\n    private boolean isUpdate(HttpServletRequest request, DynaActionForm customizingForm) {\r\n        HttpSession session = request.getSession();\r\n        logger.debug(\"---\" + (Integer) session.getAttribute(Constants.CUSTOMIZING_ID));\r\n        Object obj = request.getSession().getAttribute(Constants.CUSTOMIZING_ID);\r\n        logger.debug(\"session customizingId obj=\" + obj);\r\n        if (obj != null && obj instanceof Integer) {\r\n            logger.debug(\"Update\");\r\n            return true;\r\n        }\r\n        Integer id = (Integer) customizingForm.get(\"customizingId\");\r\n        if (id == null || id == 0) {\r\n            return false;\r\n        }\r\n        return true;\r\n    }\r\n\r\n    private boolean exists(HttpServletRequest request, DynaActionForm customizingForm) {\r\n        Integer id = (Integer) customizingForm.get(\"customizingId\");\r\n        String name = (String) customizingForm.get(\"name\");\r\n        Customizing c = createCustomizing(request);\r\n        c.setCustomizingId(id);\r\n        c.setName(name);\r\n        // update?\r\n        if (id != null && id != 0) {\r\n            Customizing customizing = service.getById(c);\r\n            // customizingname geï¿½ndert, ï¿½berprï¿½fen\r\n            if (!name.equals(customizing.getName())) {\r\n                return service.getByName(c) != null;\r\n            }\r\n        } else // insert\r\n        {\r\n            return service.getByName(c) != null;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    /**\r\n     * Generiert ein Customizing Objekt mit dem aktuellen Mandanten.\r\n     *\r\n     * @param request               der HttpServletRequest\r\n     * @return                      ein Customizing mit gesetzem Mandant\r\n     */\r\n    private Customizing createCustomizing(HttpServletRequest request) {\r\n        Customizing c = new Customizing();\r\n        c.setMandantId((Integer) request.getSession().getAttribute(Constants.MANDANT_ID));\r\n        return c;\r\n    }\r\n}\r\n",
		"id": "EvoSuiteBenchmark/46_nutzenportfolio/src/main/java/ch/bfh/egov/nutzenportfolio/action/CustomizingActionTest5.java",
		"test_prompt": "// CustomizingActionTest5.java\npackage ch.bfh.egov.nutzenportfolio.action;\n\nimport java.util.List;\nimport javax.servlet.http.HttpServletRequest;\nimport javax.servlet.http.HttpServletResponse;\nimport javax.servlet.http.HttpSession;\nimport ch.bfh.egov.nutzenportfolio.Constants;\nimport ch.bfh.egov.nutzenportfolio.service.auswahlfeld.AuswahlfeldService;\nimport ch.bfh.egov.nutzenportfolio.service.common.CommonService;\nimport ch.bfh.egov.nutzenportfolio.service.customizing.CustomizingService;\nimport ch.bfh.egov.nutzenportfolio.service.detailziele.DetailzieleService;\nimport ch.bfh.egov.nutzenportfolio.service.fragebogen.NaOpNuService;\nimport ch.bfh.egov.nutzenportfolio.service.fragebogen.ProjektattraktivitaetService;\nimport ch.bfh.egov.nutzenportfolio.service.kategorie.KategorieService;\nimport ch.bfh.egov.nutzenportfolio.service.nutzenkriterium.NutzenkriteriumService;\nimport ch.bfh.egov.nutzenportfolio.service.projektgruppe.ProjektgruppeService;\nimport ch.bfh.egov.nutzenportfolio.service.strategischeziele.StrategischeZieleService;\nimport ch.bfh.egov.nutzenportfolio.tos.Customizing;\nimport org.apache.commons.logging.Log;\nimport org.apache.commons.logging.LogFactory;\nimport org.apache.struts.action.ActionForm;\nimport org.apache.struts.action.ActionForward;\nimport org.apache.struts.action.ActionMapping;\nimport org.apache.struts.action.ActionMessage;\nimport org.apache.struts.action.ActionMessages;\nimport org.apache.struts.action.DynaActionForm;\nimport org.apache.struts.actions.DispatchAction;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link CustomizingAction}.\n* It contains ten unit test cases for the {@link CustomizingAction#copy(ActionMapping, ActionForm, HttpServletRequest, HttpServletResponse)} method.\n*/\nclass CustomizingActionTest5 {"
	},
	{
		"original_code": "// CustomizingAction.java\n/**\r\n * Nutzenportfolio\r\n * Copyright (C) 2006 Kompetenzzentrum E-Business, Simon Bergamin\r\n *\r\n * This program is free software; you can redistribute it and/or\r\n * modify it under the terms of the GNU General Public License\r\n * as published by the Free Software Foundation; either version 2\r\n * of the License, or (at your option) any later version.\r\n *\r\n * This program is distributed in the hope that it will be useful,\r\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n * GNU General Public License for more details.\r\n *\r\n * You should have received a copy of the GNU General Public License\r\n * along with this program; if not, write to the Free Software\r\n * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\r\n */\r\npackage ch.bfh.egov.nutzenportfolio.action;\r\n\r\nimport java.util.List;\r\nimport javax.servlet.http.HttpServletRequest;\r\nimport javax.servlet.http.HttpServletResponse;\r\nimport javax.servlet.http.HttpSession;\r\nimport ch.bfh.egov.nutzenportfolio.Constants;\r\nimport ch.bfh.egov.nutzenportfolio.service.auswahlfeld.AuswahlfeldService;\r\nimport ch.bfh.egov.nutzenportfolio.service.common.CommonService;\r\nimport ch.bfh.egov.nutzenportfolio.service.customizing.CustomizingService;\r\nimport ch.bfh.egov.nutzenportfolio.service.detailziele.DetailzieleService;\r\nimport ch.bfh.egov.nutzenportfolio.service.fragebogen.NaOpNuService;\r\nimport ch.bfh.egov.nutzenportfolio.service.fragebogen.ProjektattraktivitaetService;\r\nimport ch.bfh.egov.nutzenportfolio.service.kategorie.KategorieService;\r\nimport ch.bfh.egov.nutzenportfolio.service.nutzenkriterium.NutzenkriteriumService;\r\nimport ch.bfh.egov.nutzenportfolio.service.projektgruppe.ProjektgruppeService;\r\nimport ch.bfh.egov.nutzenportfolio.service.strategischeziele.StrategischeZieleService;\r\nimport ch.bfh.egov.nutzenportfolio.tos.Customizing;\r\nimport org.apache.commons.logging.Log;\r\nimport org.apache.commons.logging.LogFactory;\r\nimport org.apache.struts.action.ActionForm;\r\nimport org.apache.struts.action.ActionForward;\r\nimport org.apache.struts.action.ActionMapping;\r\nimport org.apache.struts.action.ActionMessage;\r\nimport org.apache.struts.action.ActionMessages;\r\nimport org.apache.struts.action.DynaActionForm;\r\nimport org.apache.struts.actions.DispatchAction;\r\n\r\npublic class CustomizingAction extends DispatchAction {\r\n\r\n    private Log logger = LogFactory.getLog(this.getClass());\r\n\r\n    private CustomizingService service;\r\n\r\n    private CommonService commonService;\r\n\r\n    public CustomizingAction(CustomizingService service, CommonService commonService, StrategischeZieleService szService, DetailzieleService dzService, AuswahlfeldService afService, KategorieService kService, NutzenkriteriumService nService, NaOpNuService naOpNuService, ProjektattraktivitaetService paService, ProjektgruppeService pgService) {\r\n        super();\r\n        this.service = service;\r\n        this.commonService = commonService;\r\n        this.service.init(commonService, szService, dzService, afService, kService, nService, naOpNuService, paService, pgService);\r\n    }\r\n\r\n    public ActionForward list(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {\r\n        populate(request);\r\n        return mapping.findForward(Constants.LIST);\r\n    }\r\n\r\n    public ActionForward prepare(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {\r\n        HttpSession session = request.getSession();\r\n        service.unsetStatus(request);\r\n        DynaActionForm customizingForm = (DynaActionForm) form;\r\n        Integer customizingId = (Integer) customizingForm.get(\"customizingId\");\r\n        logger.debug(\"form customizingId=\" + customizingId);\r\n        if (customizingId != null && customizingId != 0) {\r\n            logger.debug(\"customizingId wird in Session gesetzt\");\r\n            session.setAttribute(Constants.CUSTOMIZING_ID, customizingId);\r\n        }\r\n        logger.debug(\"---\" + (Integer) session.getAttribute(Constants.CUSTOMIZING_ID));\r\n        if (isUpdate(request, customizingForm)) {\r\n            Customizing c = createCustomizing(request);\r\n            customizingId = (Integer) session.getAttribute(Constants.CUSTOMIZING_ID);\r\n            c.setCustomizingId(customizingId);\r\n            Customizing customizing = service.getById(c);\r\n            customizingForm.set(Constants.CUSTOMIZING_ID, customizingId);\r\n            customizingForm.set(\"name\", customizing.getName());\r\n            customizingForm.set(\"update\", true);\r\n            service.setStatus(request);\r\n        }\r\n        return mapping.findForward(Constants.FORM);\r\n    }\r\n\r\n    public ActionForward deletequestion(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {\r\n        Customizing customizing = getCustomizing(request);\r\n        if (customizing == null) {\r\n            populate(request);\r\n            logger.debug(\"customizing = null\");\r\n            return mapping.findForward(Constants.LIST);\r\n        }\r\n        if (customizing.getStatus()) {\r\n            request.setAttribute(\"active\", true);\r\n            request.setAttribute(\"customizingDelete\", true);\r\n        }\r\n        ActionMessages messages = new ActionMessages();\r\n        messages.add(ActionMessages.GLOBAL_MESSAGE, new ActionMessage(\"messages.question.delete\", customizing.getName()));\r\n        saveMessages(request, messages);\r\n        request.setAttribute(Constants.ACTION, Constants.CUSTOMIZING_ACTION);\r\n        request.setAttribute(Constants.DISPATCH_YES, Constants.DELETE);\r\n        request.setAttribute(Constants.DISPATCH_NO, Constants.LIST);\r\n        request.setAttribute(Constants.ID_NAME, Constants.CUSTOMIZING_ID);\r\n        request.setAttribute(Constants.ID_VALUE, customizing.getCustomizingId());\r\n        return mapping.findForward(Constants.QUESTION);\r\n    }\r\n\r\n    public ActionForward delete(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {\r\n        Customizing customizing = getCustomizing(request);\r\n        if (customizing == null || customizing.getStatus()) {\r\n            populate(request);\r\n            logger.debug(\"customizing = null oder noch aktiv\");\r\n            return mapping.findForward(Constants.LIST);\r\n        }\r\n        service.cascadeDelete(request, customizing);\r\n        populate(request);\r\n        return mapping.findForward(Constants.LIST);\r\n    }\r\n\r\n    public ActionForward insertOrUpdate(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {\r\n        // Formulardaten holen\r\n        DynaActionForm customizingForm = (DynaActionForm) form;\r\n        Integer customizingId = (Integer) customizingForm.get(\"customizingId\");\r\n        Integer mandantId = (Integer) request.getSession().getAttribute(\"mandantId\");\r\n        String name = (String) customizingForm.get(\"name\");\r\n        Customizing customizing = new Customizing();\r\n        customizing.setCustomizingId(customizingId);\r\n        customizing.setMandantId(mandantId);\r\n        customizing.setName(name);\r\n        customizing.setStatus(true);\r\n        // customizingname check auf unique\r\n        if (exists(request, customizingForm)) {\r\n            ActionMessages errors = new ActionMessages();\r\n            errors.add(\"name\", new ActionMessage(\"errors.duplicate\", \"Customizing\"));\r\n            logger.debug(\"Name besteht bereits.\");\r\n            saveErrors(request, errors);\r\n            return mapping.findForward(Constants.FAILURE);\r\n        }\r\n        // update?\r\n        if (isUpdate(request, customizingForm)) {\r\n            service.update(customizing);\r\n        } else // insert\r\n        {\r\n            customizingId = service.insert(customizing);\r\n            // Projektattraktivitaet, Nutzenattraktivitaet und\r\n            // OperativerNutzen einfï¿½gen\r\n            commonService.insertCustomizingParts(customizingId);\r\n        }\r\n        populate(request);\r\n        request.getSession().setAttribute(Constants.CUSTOMIZING_ID, customizingId);\r\n        return mapping.findForward(Constants.SUCCESS);\r\n    }\r\n\r\n    public ActionForward copy(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {\r\n        DynaActionForm cForm = (DynaActionForm) form;\r\n        service.copy(request, cForm);\r\n        populate(request);\r\n        return mapping.findForward(Constants.LIST);\r\n    }\r\n\r\n    public ActionForward changeStatus(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {\r\n        DynaActionForm cForm = (DynaActionForm) form;\r\n        service.changeStatus(request, cForm);\r\n        populate(request);\r\n        return mapping.findForward(Constants.LIST);\r\n    }\r\n\r\n    private Customizing getCustomizing(HttpServletRequest request) {\r\n        String param = request.getParameter(Constants.CUSTOMIZING_ID);\r\n        Integer customizingId = null;\r\n        try {\r\n            customizingId = new Integer(param);\r\n        } catch (Exception ex) {\r\n            logger.warn(\"Fehlende customizingId!\");\r\n            return null;\r\n        }\r\n        Customizing c = createCustomizing(request);\r\n        c.setCustomizingId(customizingId);\r\n        c = service.getById(c);\r\n        if (c == null) {\r\n            logger.warn(\"Customizing mit der id \" + customizingId + \" wurde nicht gefunden.\");\r\n            return null;\r\n        }\r\n        return c;\r\n    }\r\n\r\n    private void populate(HttpServletRequest request) {\r\n        request.getSession().removeAttribute(Constants.CUSTOMIZING_ID);\r\n        Customizing c = createCustomizing(request);\r\n        List customizings = service.getAll(c.getMandantId());\r\n        request.setAttribute(Constants.CUSTOMIZINGS, customizings);\r\n    }\r\n\r\n    private boolean isUpdate(HttpServletRequest request, DynaActionForm customizingForm) {\r\n        HttpSession session = request.getSession();\r\n        logger.debug(\"---\" + (Integer) session.getAttribute(Constants.CUSTOMIZING_ID));\r\n        Object obj = request.getSession().getAttribute(Constants.CUSTOMIZING_ID);\r\n        logger.debug(\"session customizingId obj=\" + obj);\r\n        if (obj != null && obj instanceof Integer) {\r\n            logger.debug(\"Update\");\r\n            return true;\r\n        }\r\n        Integer id = (Integer) customizingForm.get(\"customizingId\");\r\n        if (id == null || id == 0) {\r\n            return false;\r\n        }\r\n        return true;\r\n    }\r\n\r\n    private boolean exists(HttpServletRequest request, DynaActionForm customizingForm) {\r\n        Integer id = (Integer) customizingForm.get(\"customizingId\");\r\n        String name = (String) customizingForm.get(\"name\");\r\n        Customizing c = createCustomizing(request);\r\n        c.setCustomizingId(id);\r\n        c.setName(name);\r\n        // update?\r\n        if (id != null && id != 0) {\r\n            Customizing customizing = service.getById(c);\r\n            // customizingname geï¿½ndert, ï¿½berprï¿½fen\r\n            if (!name.equals(customizing.getName())) {\r\n                return service.getByName(c) != null;\r\n            }\r\n        } else // insert\r\n        {\r\n            return service.getByName(c) != null;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    /**\r\n     * Generiert ein Customizing Objekt mit dem aktuellen Mandanten.\r\n     *\r\n     * @param request               der HttpServletRequest\r\n     * @return                      ein Customizing mit gesetzem Mandant\r\n     */\r\n    private Customizing createCustomizing(HttpServletRequest request) {\r\n        Customizing c = new Customizing();\r\n        c.setMandantId((Integer) request.getSession().getAttribute(Constants.MANDANT_ID));\r\n        return c;\r\n    }\r\n}\r\n",
		"id": "EvoSuiteBenchmark/46_nutzenportfolio/src/main/java/ch/bfh/egov/nutzenportfolio/action/CustomizingActionTest6.java",
		"test_prompt": "// CustomizingActionTest6.java\npackage ch.bfh.egov.nutzenportfolio.action;\n\nimport java.util.List;\nimport javax.servlet.http.HttpServletRequest;\nimport javax.servlet.http.HttpServletResponse;\nimport javax.servlet.http.HttpSession;\nimport ch.bfh.egov.nutzenportfolio.Constants;\nimport ch.bfh.egov.nutzenportfolio.service.auswahlfeld.AuswahlfeldService;\nimport ch.bfh.egov.nutzenportfolio.service.common.CommonService;\nimport ch.bfh.egov.nutzenportfolio.service.customizing.CustomizingService;\nimport ch.bfh.egov.nutzenportfolio.service.detailziele.DetailzieleService;\nimport ch.bfh.egov.nutzenportfolio.service.fragebogen.NaOpNuService;\nimport ch.bfh.egov.nutzenportfolio.service.fragebogen.ProjektattraktivitaetService;\nimport ch.bfh.egov.nutzenportfolio.service.kategorie.KategorieService;\nimport ch.bfh.egov.nutzenportfolio.service.nutzenkriterium.NutzenkriteriumService;\nimport ch.bfh.egov.nutzenportfolio.service.projektgruppe.ProjektgruppeService;\nimport ch.bfh.egov.nutzenportfolio.service.strategischeziele.StrategischeZieleService;\nimport ch.bfh.egov.nutzenportfolio.tos.Customizing;\nimport org.apache.commons.logging.Log;\nimport org.apache.commons.logging.LogFactory;\nimport org.apache.struts.action.ActionForm;\nimport org.apache.struts.action.ActionForward;\nimport org.apache.struts.action.ActionMapping;\nimport org.apache.struts.action.ActionMessage;\nimport org.apache.struts.action.ActionMessages;\nimport org.apache.struts.action.DynaActionForm;\nimport org.apache.struts.actions.DispatchAction;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link CustomizingAction}.\n* It contains ten unit test cases for the {@link CustomizingAction#changeStatus(ActionMapping, ActionForm, HttpServletRequest, HttpServletResponse)} method.\n*/\nclass CustomizingActionTest6 {"
	},
	{
		"original_code": "// AuswahlfeldAction.java\n/**\r\n * Nutzenportfolio\r\n * Copyright (C) 2006 Kompetenzzentrum E-Business, Simon Bergamin\r\n *\r\n * This program is free software; you can redistribute it and/or\r\n * modify it under the terms of the GNU General Public License\r\n * as published by the Free Software Foundation; either version 2\r\n * of the License, or (at your option) any later version.\r\n *\r\n * This program is distributed in the hope that it will be useful,\r\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n * GNU General Public License for more details.\r\n *\r\n * You should have received a copy of the GNU General Public License\r\n * along with this program; if not, write to the Free Software\r\n * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\r\n */\r\npackage ch.bfh.egov.nutzenportfolio.action;\r\n\r\nimport javax.servlet.http.HttpServletRequest;\r\nimport javax.servlet.http.HttpServletResponse;\r\nimport ch.bfh.egov.nutzenportfolio.Constants;\r\nimport ch.bfh.egov.nutzenportfolio.service.auswahlfeld.AuswahlfeldService;\r\nimport ch.bfh.egov.nutzenportfolio.service.common.CommonService;\r\nimport ch.bfh.egov.nutzenportfolio.service.customizing.CustomizingService;\r\nimport ch.bfh.egov.nutzenportfolio.service.nutzenkriterium.NutzenkriteriumService;\r\nimport ch.bfh.egov.nutzenportfolio.service.strategischeziele.StrategischeZieleService;\r\nimport ch.bfh.egov.nutzenportfolio.tos.Auswahlfeld;\r\nimport org.apache.commons.logging.Log;\r\nimport org.apache.commons.logging.LogFactory;\r\nimport org.apache.struts.action.ActionForm;\r\nimport org.apache.struts.action.ActionForward;\r\nimport org.apache.struts.action.ActionMapping;\r\nimport org.apache.struts.action.ActionMessages;\r\nimport org.apache.struts.action.DynaActionForm;\r\nimport org.apache.struts.actions.DispatchAction;\r\n\r\npublic class AuswahlfeldAction extends DispatchAction {\r\n\r\n    private Log logger = LogFactory.getLog(this.getClass());\r\n\r\n    private AuswahlfeldService service;\r\n\r\n    public AuswahlfeldAction(AuswahlfeldService service, NutzenkriteriumService nService, CommonService cService, CustomizingService customizingService, StrategischeZieleService szService) {\r\n        super();\r\n        this.service = service;\r\n        service.init(nService, cService, customizingService, szService);\r\n    }\r\n\r\n    public ActionForward list(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {\r\n        service.list(request, mapping.getPath());\r\n        return mapping.findForward(Constants.LIST);\r\n    }\r\n\r\n    public ActionForward prepare(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {\r\n        DynaActionForm afForm = (DynaActionForm) form;\r\n        // Auswahlfelder holen\r\n        service.populate(request, mapping.getPath(), afForm);\r\n        return mapping.findForward(Constants.FORM);\r\n    }\r\n\r\n    public ActionForward edit(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {\r\n        DynaActionForm aForm = (DynaActionForm) form;\r\n        service.edit(request, aForm);\r\n        return mapping.findForward(Constants.FORM);\r\n    }\r\n\r\n    public ActionForward update(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {\r\n        DynaActionForm aForm = (DynaActionForm) form;\r\n        service.update(request, aForm);\r\n        service.list(request, mapping.getPath());\r\n        return mapping.findForward(Constants.LIST);\r\n    }\r\n\r\n    public ActionForward deletequestion(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {\r\n        DynaActionForm aForm = (DynaActionForm) form;\r\n        Auswahlfeld a = service.getAuswahlfeld(request, aForm);\r\n        if (a == null) {\r\n            service.list(request, mapping.getPath());\r\n            return mapping.findForward(Constants.LIST);\r\n        }\r\n        ActionMessages messages = new ActionMessages();\r\n        service.deleteQuestion(request, a, messages);\r\n        saveMessages(request, messages);\r\n        return mapping.findForward(Constants.QUESTION);\r\n    }\r\n\r\n    public ActionForward delete(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {\r\n        DynaActionForm aForm = (DynaActionForm) form;\r\n        Auswahlfeld a = service.getAuswahlfeld(request, aForm);\r\n        if (a == null) {\r\n            service.list(request, mapping.getPath());\r\n            return mapping.findForward(Constants.LIST);\r\n        }\r\n        // Lï¿½schen\r\n        service.delete(request, a);\r\n        service.list(request, mapping.getPath());\r\n        return mapping.findForward(Constants.LIST);\r\n    }\r\n\r\n    public ActionForward next(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {\r\n        // Formulardaten holen, Auswahlfelder setzen und nï¿½chste Action anwï¿½hlen\r\n        DynaActionForm aForm = (DynaActionForm) form;\r\n        String path = mapping.getPath();\r\n        service.setAuswahlfelder(request, aForm, path);\r\n        if (path.contains(Constants.REALISIERBARKEIT_ACTION)) {\r\n            return mapping.findForward(Constants.NEXT);\r\n        }\r\n        // Nï¿½chste Action?\r\n        logger.debug(\"Abstufungen: \" + request.getSession().getAttribute(Constants.ABSTUFUNGEN));\r\n        if (service.next(request)) {\r\n            logger.debug(\"Nï¿½chster Schritt\");\r\n            if (service.isOperativerNutzen(request) && path.contains(Constants.GEWICHTUNG_ACTION)) {\r\n                if (!service.customizingComplete(request)) {\r\n                    service.populate(request, mapping.getPath(), aForm);\r\n                    return mapping.findForward(Constants.FORM);\r\n                }\r\n                return mapping.findForward(Constants.END);\r\n            }\r\n            return mapping.findForward(Constants.NEXT);\r\n        }\r\n        // Nï¿½chste Kategorie\r\n        logger.debug(\"Nï¿½chste Kategorie\");\r\n        service.populate(request, mapping.getPath(), aForm);\r\n        return mapping.findForward(Constants.FORM);\r\n    }\r\n\r\n    public ActionForward add(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {\r\n        DynaActionForm afForm = (DynaActionForm) form;\r\n        ActionMessages errors = new ActionMessages();\r\n        ActionMessages messages = new ActionMessages();\r\n        if (!service.add(request, afForm, errors, messages)) {\r\n            saveErrors(request, errors);\r\n            saveMessages(request, messages);\r\n        }\r\n        service.populate(request, mapping.getPath(), afForm);\r\n        return mapping.findForward(Constants.FORM);\r\n    }\r\n}\r\n",
		"id": "EvoSuiteBenchmark/46_nutzenportfolio/src/main/java/ch/bfh/egov/nutzenportfolio/action/AuswahlfeldActionTest0.java",
		"test_prompt": "// AuswahlfeldActionTest0.java\npackage ch.bfh.egov.nutzenportfolio.action;\n\nimport javax.servlet.http.HttpServletRequest;\nimport javax.servlet.http.HttpServletResponse;\nimport ch.bfh.egov.nutzenportfolio.Constants;\nimport ch.bfh.egov.nutzenportfolio.service.auswahlfeld.AuswahlfeldService;\nimport ch.bfh.egov.nutzenportfolio.service.common.CommonService;\nimport ch.bfh.egov.nutzenportfolio.service.customizing.CustomizingService;\nimport ch.bfh.egov.nutzenportfolio.service.nutzenkriterium.NutzenkriteriumService;\nimport ch.bfh.egov.nutzenportfolio.service.strategischeziele.StrategischeZieleService;\nimport ch.bfh.egov.nutzenportfolio.tos.Auswahlfeld;\nimport org.apache.commons.logging.Log;\nimport org.apache.commons.logging.LogFactory;\nimport org.apache.struts.action.ActionForm;\nimport org.apache.struts.action.ActionForward;\nimport org.apache.struts.action.ActionMapping;\nimport org.apache.struts.action.ActionMessages;\nimport org.apache.struts.action.DynaActionForm;\nimport org.apache.struts.actions.DispatchAction;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link AuswahlfeldAction}.\n* It contains ten unit test cases for the {@link AuswahlfeldAction#list(ActionMapping, ActionForm, HttpServletRequest, HttpServletResponse)} method.\n*/\nclass AuswahlfeldActionTest0 {"
	},
	{
		"original_code": "// AuswahlfeldAction.java\n/**\r\n * Nutzenportfolio\r\n * Copyright (C) 2006 Kompetenzzentrum E-Business, Simon Bergamin\r\n *\r\n * This program is free software; you can redistribute it and/or\r\n * modify it under the terms of the GNU General Public License\r\n * as published by the Free Software Foundation; either version 2\r\n * of the License, or (at your option) any later version.\r\n *\r\n * This program is distributed in the hope that it will be useful,\r\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n * GNU General Public License for more details.\r\n *\r\n * You should have received a copy of the GNU General Public License\r\n * along with this program; if not, write to the Free Software\r\n * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\r\n */\r\npackage ch.bfh.egov.nutzenportfolio.action;\r\n\r\nimport javax.servlet.http.HttpServletRequest;\r\nimport javax.servlet.http.HttpServletResponse;\r\nimport ch.bfh.egov.nutzenportfolio.Constants;\r\nimport ch.bfh.egov.nutzenportfolio.service.auswahlfeld.AuswahlfeldService;\r\nimport ch.bfh.egov.nutzenportfolio.service.common.CommonService;\r\nimport ch.bfh.egov.nutzenportfolio.service.customizing.CustomizingService;\r\nimport ch.bfh.egov.nutzenportfolio.service.nutzenkriterium.NutzenkriteriumService;\r\nimport ch.bfh.egov.nutzenportfolio.service.strategischeziele.StrategischeZieleService;\r\nimport ch.bfh.egov.nutzenportfolio.tos.Auswahlfeld;\r\nimport org.apache.commons.logging.Log;\r\nimport org.apache.commons.logging.LogFactory;\r\nimport org.apache.struts.action.ActionForm;\r\nimport org.apache.struts.action.ActionForward;\r\nimport org.apache.struts.action.ActionMapping;\r\nimport org.apache.struts.action.ActionMessages;\r\nimport org.apache.struts.action.DynaActionForm;\r\nimport org.apache.struts.actions.DispatchAction;\r\n\r\npublic class AuswahlfeldAction extends DispatchAction {\r\n\r\n    private Log logger = LogFactory.getLog(this.getClass());\r\n\r\n    private AuswahlfeldService service;\r\n\r\n    public AuswahlfeldAction(AuswahlfeldService service, NutzenkriteriumService nService, CommonService cService, CustomizingService customizingService, StrategischeZieleService szService) {\r\n        super();\r\n        this.service = service;\r\n        service.init(nService, cService, customizingService, szService);\r\n    }\r\n\r\n    public ActionForward list(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {\r\n        service.list(request, mapping.getPath());\r\n        return mapping.findForward(Constants.LIST);\r\n    }\r\n\r\n    public ActionForward prepare(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {\r\n        DynaActionForm afForm = (DynaActionForm) form;\r\n        // Auswahlfelder holen\r\n        service.populate(request, mapping.getPath(), afForm);\r\n        return mapping.findForward(Constants.FORM);\r\n    }\r\n\r\n    public ActionForward edit(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {\r\n        DynaActionForm aForm = (DynaActionForm) form;\r\n        service.edit(request, aForm);\r\n        return mapping.findForward(Constants.FORM);\r\n    }\r\n\r\n    public ActionForward update(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {\r\n        DynaActionForm aForm = (DynaActionForm) form;\r\n        service.update(request, aForm);\r\n        service.list(request, mapping.getPath());\r\n        return mapping.findForward(Constants.LIST);\r\n    }\r\n\r\n    public ActionForward deletequestion(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {\r\n        DynaActionForm aForm = (DynaActionForm) form;\r\n        Auswahlfeld a = service.getAuswahlfeld(request, aForm);\r\n        if (a == null) {\r\n            service.list(request, mapping.getPath());\r\n            return mapping.findForward(Constants.LIST);\r\n        }\r\n        ActionMessages messages = new ActionMessages();\r\n        service.deleteQuestion(request, a, messages);\r\n        saveMessages(request, messages);\r\n        return mapping.findForward(Constants.QUESTION);\r\n    }\r\n\r\n    public ActionForward delete(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {\r\n        DynaActionForm aForm = (DynaActionForm) form;\r\n        Auswahlfeld a = service.getAuswahlfeld(request, aForm);\r\n        if (a == null) {\r\n            service.list(request, mapping.getPath());\r\n            return mapping.findForward(Constants.LIST);\r\n        }\r\n        // Lï¿½schen\r\n        service.delete(request, a);\r\n        service.list(request, mapping.getPath());\r\n        return mapping.findForward(Constants.LIST);\r\n    }\r\n\r\n    public ActionForward next(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {\r\n        // Formulardaten holen, Auswahlfelder setzen und nï¿½chste Action anwï¿½hlen\r\n        DynaActionForm aForm = (DynaActionForm) form;\r\n        String path = mapping.getPath();\r\n        service.setAuswahlfelder(request, aForm, path);\r\n        if (path.contains(Constants.REALISIERBARKEIT_ACTION)) {\r\n            return mapping.findForward(Constants.NEXT);\r\n        }\r\n        // Nï¿½chste Action?\r\n        logger.debug(\"Abstufungen: \" + request.getSession().getAttribute(Constants.ABSTUFUNGEN));\r\n        if (service.next(request)) {\r\n            logger.debug(\"Nï¿½chster Schritt\");\r\n            if (service.isOperativerNutzen(request) && path.contains(Constants.GEWICHTUNG_ACTION)) {\r\n                if (!service.customizingComplete(request)) {\r\n                    service.populate(request, mapping.getPath(), aForm);\r\n                    return mapping.findForward(Constants.FORM);\r\n                }\r\n                return mapping.findForward(Constants.END);\r\n            }\r\n            return mapping.findForward(Constants.NEXT);\r\n        }\r\n        // Nï¿½chste Kategorie\r\n        logger.debug(\"Nï¿½chste Kategorie\");\r\n        service.populate(request, mapping.getPath(), aForm);\r\n        return mapping.findForward(Constants.FORM);\r\n    }\r\n\r\n    public ActionForward add(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {\r\n        DynaActionForm afForm = (DynaActionForm) form;\r\n        ActionMessages errors = new ActionMessages();\r\n        ActionMessages messages = new ActionMessages();\r\n        if (!service.add(request, afForm, errors, messages)) {\r\n            saveErrors(request, errors);\r\n            saveMessages(request, messages);\r\n        }\r\n        service.populate(request, mapping.getPath(), afForm);\r\n        return mapping.findForward(Constants.FORM);\r\n    }\r\n}\r\n",
		"id": "EvoSuiteBenchmark/46_nutzenportfolio/src/main/java/ch/bfh/egov/nutzenportfolio/action/AuswahlfeldActionTest1.java",
		"test_prompt": "// AuswahlfeldActionTest1.java\npackage ch.bfh.egov.nutzenportfolio.action;\n\nimport javax.servlet.http.HttpServletRequest;\nimport javax.servlet.http.HttpServletResponse;\nimport ch.bfh.egov.nutzenportfolio.Constants;\nimport ch.bfh.egov.nutzenportfolio.service.auswahlfeld.AuswahlfeldService;\nimport ch.bfh.egov.nutzenportfolio.service.common.CommonService;\nimport ch.bfh.egov.nutzenportfolio.service.customizing.CustomizingService;\nimport ch.bfh.egov.nutzenportfolio.service.nutzenkriterium.NutzenkriteriumService;\nimport ch.bfh.egov.nutzenportfolio.service.strategischeziele.StrategischeZieleService;\nimport ch.bfh.egov.nutzenportfolio.tos.Auswahlfeld;\nimport org.apache.commons.logging.Log;\nimport org.apache.commons.logging.LogFactory;\nimport org.apache.struts.action.ActionForm;\nimport org.apache.struts.action.ActionForward;\nimport org.apache.struts.action.ActionMapping;\nimport org.apache.struts.action.ActionMessages;\nimport org.apache.struts.action.DynaActionForm;\nimport org.apache.struts.actions.DispatchAction;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link AuswahlfeldAction}.\n* It contains ten unit test cases for the {@link AuswahlfeldAction#prepare(ActionMapping, ActionForm, HttpServletRequest, HttpServletResponse)} method.\n*/\nclass AuswahlfeldActionTest1 {"
	},
	{
		"original_code": "// AuswahlfeldAction.java\n/**\r\n * Nutzenportfolio\r\n * Copyright (C) 2006 Kompetenzzentrum E-Business, Simon Bergamin\r\n *\r\n * This program is free software; you can redistribute it and/or\r\n * modify it under the terms of the GNU General Public License\r\n * as published by the Free Software Foundation; either version 2\r\n * of the License, or (at your option) any later version.\r\n *\r\n * This program is distributed in the hope that it will be useful,\r\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n * GNU General Public License for more details.\r\n *\r\n * You should have received a copy of the GNU General Public License\r\n * along with this program; if not, write to the Free Software\r\n * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\r\n */\r\npackage ch.bfh.egov.nutzenportfolio.action;\r\n\r\nimport javax.servlet.http.HttpServletRequest;\r\nimport javax.servlet.http.HttpServletResponse;\r\nimport ch.bfh.egov.nutzenportfolio.Constants;\r\nimport ch.bfh.egov.nutzenportfolio.service.auswahlfeld.AuswahlfeldService;\r\nimport ch.bfh.egov.nutzenportfolio.service.common.CommonService;\r\nimport ch.bfh.egov.nutzenportfolio.service.customizing.CustomizingService;\r\nimport ch.bfh.egov.nutzenportfolio.service.nutzenkriterium.NutzenkriteriumService;\r\nimport ch.bfh.egov.nutzenportfolio.service.strategischeziele.StrategischeZieleService;\r\nimport ch.bfh.egov.nutzenportfolio.tos.Auswahlfeld;\r\nimport org.apache.commons.logging.Log;\r\nimport org.apache.commons.logging.LogFactory;\r\nimport org.apache.struts.action.ActionForm;\r\nimport org.apache.struts.action.ActionForward;\r\nimport org.apache.struts.action.ActionMapping;\r\nimport org.apache.struts.action.ActionMessages;\r\nimport org.apache.struts.action.DynaActionForm;\r\nimport org.apache.struts.actions.DispatchAction;\r\n\r\npublic class AuswahlfeldAction extends DispatchAction {\r\n\r\n    private Log logger = LogFactory.getLog(this.getClass());\r\n\r\n    private AuswahlfeldService service;\r\n\r\n    public AuswahlfeldAction(AuswahlfeldService service, NutzenkriteriumService nService, CommonService cService, CustomizingService customizingService, StrategischeZieleService szService) {\r\n        super();\r\n        this.service = service;\r\n        service.init(nService, cService, customizingService, szService);\r\n    }\r\n\r\n    public ActionForward list(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {\r\n        service.list(request, mapping.getPath());\r\n        return mapping.findForward(Constants.LIST);\r\n    }\r\n\r\n    public ActionForward prepare(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {\r\n        DynaActionForm afForm = (DynaActionForm) form;\r\n        // Auswahlfelder holen\r\n        service.populate(request, mapping.getPath(), afForm);\r\n        return mapping.findForward(Constants.FORM);\r\n    }\r\n\r\n    public ActionForward edit(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {\r\n        DynaActionForm aForm = (DynaActionForm) form;\r\n        service.edit(request, aForm);\r\n        return mapping.findForward(Constants.FORM);\r\n    }\r\n\r\n    public ActionForward update(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {\r\n        DynaActionForm aForm = (DynaActionForm) form;\r\n        service.update(request, aForm);\r\n        service.list(request, mapping.getPath());\r\n        return mapping.findForward(Constants.LIST);\r\n    }\r\n\r\n    public ActionForward deletequestion(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {\r\n        DynaActionForm aForm = (DynaActionForm) form;\r\n        Auswahlfeld a = service.getAuswahlfeld(request, aForm);\r\n        if (a == null) {\r\n            service.list(request, mapping.getPath());\r\n            return mapping.findForward(Constants.LIST);\r\n        }\r\n        ActionMessages messages = new ActionMessages();\r\n        service.deleteQuestion(request, a, messages);\r\n        saveMessages(request, messages);\r\n        return mapping.findForward(Constants.QUESTION);\r\n    }\r\n\r\n    public ActionForward delete(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {\r\n        DynaActionForm aForm = (DynaActionForm) form;\r\n        Auswahlfeld a = service.getAuswahlfeld(request, aForm);\r\n        if (a == null) {\r\n            service.list(request, mapping.getPath());\r\n            return mapping.findForward(Constants.LIST);\r\n        }\r\n        // Lï¿½schen\r\n        service.delete(request, a);\r\n        service.list(request, mapping.getPath());\r\n        return mapping.findForward(Constants.LIST);\r\n    }\r\n\r\n    public ActionForward next(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {\r\n        // Formulardaten holen, Auswahlfelder setzen und nï¿½chste Action anwï¿½hlen\r\n        DynaActionForm aForm = (DynaActionForm) form;\r\n        String path = mapping.getPath();\r\n        service.setAuswahlfelder(request, aForm, path);\r\n        if (path.contains(Constants.REALISIERBARKEIT_ACTION)) {\r\n            return mapping.findForward(Constants.NEXT);\r\n        }\r\n        // Nï¿½chste Action?\r\n        logger.debug(\"Abstufungen: \" + request.getSession().getAttribute(Constants.ABSTUFUNGEN));\r\n        if (service.next(request)) {\r\n            logger.debug(\"Nï¿½chster Schritt\");\r\n            if (service.isOperativerNutzen(request) && path.contains(Constants.GEWICHTUNG_ACTION)) {\r\n                if (!service.customizingComplete(request)) {\r\n                    service.populate(request, mapping.getPath(), aForm);\r\n                    return mapping.findForward(Constants.FORM);\r\n                }\r\n                return mapping.findForward(Constants.END);\r\n            }\r\n            return mapping.findForward(Constants.NEXT);\r\n        }\r\n        // Nï¿½chste Kategorie\r\n        logger.debug(\"Nï¿½chste Kategorie\");\r\n        service.populate(request, mapping.getPath(), aForm);\r\n        return mapping.findForward(Constants.FORM);\r\n    }\r\n\r\n    public ActionForward add(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {\r\n        DynaActionForm afForm = (DynaActionForm) form;\r\n        ActionMessages errors = new ActionMessages();\r\n        ActionMessages messages = new ActionMessages();\r\n        if (!service.add(request, afForm, errors, messages)) {\r\n            saveErrors(request, errors);\r\n            saveMessages(request, messages);\r\n        }\r\n        service.populate(request, mapping.getPath(), afForm);\r\n        return mapping.findForward(Constants.FORM);\r\n    }\r\n}\r\n",
		"id": "EvoSuiteBenchmark/46_nutzenportfolio/src/main/java/ch/bfh/egov/nutzenportfolio/action/AuswahlfeldActionTest2.java",
		"test_prompt": "// AuswahlfeldActionTest2.java\npackage ch.bfh.egov.nutzenportfolio.action;\n\nimport javax.servlet.http.HttpServletRequest;\nimport javax.servlet.http.HttpServletResponse;\nimport ch.bfh.egov.nutzenportfolio.Constants;\nimport ch.bfh.egov.nutzenportfolio.service.auswahlfeld.AuswahlfeldService;\nimport ch.bfh.egov.nutzenportfolio.service.common.CommonService;\nimport ch.bfh.egov.nutzenportfolio.service.customizing.CustomizingService;\nimport ch.bfh.egov.nutzenportfolio.service.nutzenkriterium.NutzenkriteriumService;\nimport ch.bfh.egov.nutzenportfolio.service.strategischeziele.StrategischeZieleService;\nimport ch.bfh.egov.nutzenportfolio.tos.Auswahlfeld;\nimport org.apache.commons.logging.Log;\nimport org.apache.commons.logging.LogFactory;\nimport org.apache.struts.action.ActionForm;\nimport org.apache.struts.action.ActionForward;\nimport org.apache.struts.action.ActionMapping;\nimport org.apache.struts.action.ActionMessages;\nimport org.apache.struts.action.DynaActionForm;\nimport org.apache.struts.actions.DispatchAction;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link AuswahlfeldAction}.\n* It contains ten unit test cases for the {@link AuswahlfeldAction#edit(ActionMapping, ActionForm, HttpServletRequest, HttpServletResponse)} method.\n*/\nclass AuswahlfeldActionTest2 {"
	},
	{
		"original_code": "// AuswahlfeldAction.java\n/**\r\n * Nutzenportfolio\r\n * Copyright (C) 2006 Kompetenzzentrum E-Business, Simon Bergamin\r\n *\r\n * This program is free software; you can redistribute it and/or\r\n * modify it under the terms of the GNU General Public License\r\n * as published by the Free Software Foundation; either version 2\r\n * of the License, or (at your option) any later version.\r\n *\r\n * This program is distributed in the hope that it will be useful,\r\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n * GNU General Public License for more details.\r\n *\r\n * You should have received a copy of the GNU General Public License\r\n * along with this program; if not, write to the Free Software\r\n * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\r\n */\r\npackage ch.bfh.egov.nutzenportfolio.action;\r\n\r\nimport javax.servlet.http.HttpServletRequest;\r\nimport javax.servlet.http.HttpServletResponse;\r\nimport ch.bfh.egov.nutzenportfolio.Constants;\r\nimport ch.bfh.egov.nutzenportfolio.service.auswahlfeld.AuswahlfeldService;\r\nimport ch.bfh.egov.nutzenportfolio.service.common.CommonService;\r\nimport ch.bfh.egov.nutzenportfolio.service.customizing.CustomizingService;\r\nimport ch.bfh.egov.nutzenportfolio.service.nutzenkriterium.NutzenkriteriumService;\r\nimport ch.bfh.egov.nutzenportfolio.service.strategischeziele.StrategischeZieleService;\r\nimport ch.bfh.egov.nutzenportfolio.tos.Auswahlfeld;\r\nimport org.apache.commons.logging.Log;\r\nimport org.apache.commons.logging.LogFactory;\r\nimport org.apache.struts.action.ActionForm;\r\nimport org.apache.struts.action.ActionForward;\r\nimport org.apache.struts.action.ActionMapping;\r\nimport org.apache.struts.action.ActionMessages;\r\nimport org.apache.struts.action.DynaActionForm;\r\nimport org.apache.struts.actions.DispatchAction;\r\n\r\npublic class AuswahlfeldAction extends DispatchAction {\r\n\r\n    private Log logger = LogFactory.getLog(this.getClass());\r\n\r\n    private AuswahlfeldService service;\r\n\r\n    public AuswahlfeldAction(AuswahlfeldService service, NutzenkriteriumService nService, CommonService cService, CustomizingService customizingService, StrategischeZieleService szService) {\r\n        super();\r\n        this.service = service;\r\n        service.init(nService, cService, customizingService, szService);\r\n    }\r\n\r\n    public ActionForward list(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {\r\n        service.list(request, mapping.getPath());\r\n        return mapping.findForward(Constants.LIST);\r\n    }\r\n\r\n    public ActionForward prepare(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {\r\n        DynaActionForm afForm = (DynaActionForm) form;\r\n        // Auswahlfelder holen\r\n        service.populate(request, mapping.getPath(), afForm);\r\n        return mapping.findForward(Constants.FORM);\r\n    }\r\n\r\n    public ActionForward edit(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {\r\n        DynaActionForm aForm = (DynaActionForm) form;\r\n        service.edit(request, aForm);\r\n        return mapping.findForward(Constants.FORM);\r\n    }\r\n\r\n    public ActionForward update(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {\r\n        DynaActionForm aForm = (DynaActionForm) form;\r\n        service.update(request, aForm);\r\n        service.list(request, mapping.getPath());\r\n        return mapping.findForward(Constants.LIST);\r\n    }\r\n\r\n    public ActionForward deletequestion(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {\r\n        DynaActionForm aForm = (DynaActionForm) form;\r\n        Auswahlfeld a = service.getAuswahlfeld(request, aForm);\r\n        if (a == null) {\r\n            service.list(request, mapping.getPath());\r\n            return mapping.findForward(Constants.LIST);\r\n        }\r\n        ActionMessages messages = new ActionMessages();\r\n        service.deleteQuestion(request, a, messages);\r\n        saveMessages(request, messages);\r\n        return mapping.findForward(Constants.QUESTION);\r\n    }\r\n\r\n    public ActionForward delete(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {\r\n        DynaActionForm aForm = (DynaActionForm) form;\r\n        Auswahlfeld a = service.getAuswahlfeld(request, aForm);\r\n        if (a == null) {\r\n            service.list(request, mapping.getPath());\r\n            return mapping.findForward(Constants.LIST);\r\n        }\r\n        // Lï¿½schen\r\n        service.delete(request, a);\r\n        service.list(request, mapping.getPath());\r\n        return mapping.findForward(Constants.LIST);\r\n    }\r\n\r\n    public ActionForward next(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {\r\n        // Formulardaten holen, Auswahlfelder setzen und nï¿½chste Action anwï¿½hlen\r\n        DynaActionForm aForm = (DynaActionForm) form;\r\n        String path = mapping.getPath();\r\n        service.setAuswahlfelder(request, aForm, path);\r\n        if (path.contains(Constants.REALISIERBARKEIT_ACTION)) {\r\n            return mapping.findForward(Constants.NEXT);\r\n        }\r\n        // Nï¿½chste Action?\r\n        logger.debug(\"Abstufungen: \" + request.getSession().getAttribute(Constants.ABSTUFUNGEN));\r\n        if (service.next(request)) {\r\n            logger.debug(\"Nï¿½chster Schritt\");\r\n            if (service.isOperativerNutzen(request) && path.contains(Constants.GEWICHTUNG_ACTION)) {\r\n                if (!service.customizingComplete(request)) {\r\n                    service.populate(request, mapping.getPath(), aForm);\r\n                    return mapping.findForward(Constants.FORM);\r\n                }\r\n                return mapping.findForward(Constants.END);\r\n            }\r\n            return mapping.findForward(Constants.NEXT);\r\n        }\r\n        // Nï¿½chste Kategorie\r\n        logger.debug(\"Nï¿½chste Kategorie\");\r\n        service.populate(request, mapping.getPath(), aForm);\r\n        return mapping.findForward(Constants.FORM);\r\n    }\r\n\r\n    public ActionForward add(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {\r\n        DynaActionForm afForm = (DynaActionForm) form;\r\n        ActionMessages errors = new ActionMessages();\r\n        ActionMessages messages = new ActionMessages();\r\n        if (!service.add(request, afForm, errors, messages)) {\r\n            saveErrors(request, errors);\r\n            saveMessages(request, messages);\r\n        }\r\n        service.populate(request, mapping.getPath(), afForm);\r\n        return mapping.findForward(Constants.FORM);\r\n    }\r\n}\r\n",
		"id": "EvoSuiteBenchmark/46_nutzenportfolio/src/main/java/ch/bfh/egov/nutzenportfolio/action/AuswahlfeldActionTest3.java",
		"test_prompt": "// AuswahlfeldActionTest3.java\npackage ch.bfh.egov.nutzenportfolio.action;\n\nimport javax.servlet.http.HttpServletRequest;\nimport javax.servlet.http.HttpServletResponse;\nimport ch.bfh.egov.nutzenportfolio.Constants;\nimport ch.bfh.egov.nutzenportfolio.service.auswahlfeld.AuswahlfeldService;\nimport ch.bfh.egov.nutzenportfolio.service.common.CommonService;\nimport ch.bfh.egov.nutzenportfolio.service.customizing.CustomizingService;\nimport ch.bfh.egov.nutzenportfolio.service.nutzenkriterium.NutzenkriteriumService;\nimport ch.bfh.egov.nutzenportfolio.service.strategischeziele.StrategischeZieleService;\nimport ch.bfh.egov.nutzenportfolio.tos.Auswahlfeld;\nimport org.apache.commons.logging.Log;\nimport org.apache.commons.logging.LogFactory;\nimport org.apache.struts.action.ActionForm;\nimport org.apache.struts.action.ActionForward;\nimport org.apache.struts.action.ActionMapping;\nimport org.apache.struts.action.ActionMessages;\nimport org.apache.struts.action.DynaActionForm;\nimport org.apache.struts.actions.DispatchAction;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link AuswahlfeldAction}.\n* It contains ten unit test cases for the {@link AuswahlfeldAction#update(ActionMapping, ActionForm, HttpServletRequest, HttpServletResponse)} method.\n*/\nclass AuswahlfeldActionTest3 {"
	},
	{
		"original_code": "// AuswahlfeldAction.java\n/**\r\n * Nutzenportfolio\r\n * Copyright (C) 2006 Kompetenzzentrum E-Business, Simon Bergamin\r\n *\r\n * This program is free software; you can redistribute it and/or\r\n * modify it under the terms of the GNU General Public License\r\n * as published by the Free Software Foundation; either version 2\r\n * of the License, or (at your option) any later version.\r\n *\r\n * This program is distributed in the hope that it will be useful,\r\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n * GNU General Public License for more details.\r\n *\r\n * You should have received a copy of the GNU General Public License\r\n * along with this program; if not, write to the Free Software\r\n * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\r\n */\r\npackage ch.bfh.egov.nutzenportfolio.action;\r\n\r\nimport javax.servlet.http.HttpServletRequest;\r\nimport javax.servlet.http.HttpServletResponse;\r\nimport ch.bfh.egov.nutzenportfolio.Constants;\r\nimport ch.bfh.egov.nutzenportfolio.service.auswahlfeld.AuswahlfeldService;\r\nimport ch.bfh.egov.nutzenportfolio.service.common.CommonService;\r\nimport ch.bfh.egov.nutzenportfolio.service.customizing.CustomizingService;\r\nimport ch.bfh.egov.nutzenportfolio.service.nutzenkriterium.NutzenkriteriumService;\r\nimport ch.bfh.egov.nutzenportfolio.service.strategischeziele.StrategischeZieleService;\r\nimport ch.bfh.egov.nutzenportfolio.tos.Auswahlfeld;\r\nimport org.apache.commons.logging.Log;\r\nimport org.apache.commons.logging.LogFactory;\r\nimport org.apache.struts.action.ActionForm;\r\nimport org.apache.struts.action.ActionForward;\r\nimport org.apache.struts.action.ActionMapping;\r\nimport org.apache.struts.action.ActionMessages;\r\nimport org.apache.struts.action.DynaActionForm;\r\nimport org.apache.struts.actions.DispatchAction;\r\n\r\npublic class AuswahlfeldAction extends DispatchAction {\r\n\r\n    private Log logger = LogFactory.getLog(this.getClass());\r\n\r\n    private AuswahlfeldService service;\r\n\r\n    public AuswahlfeldAction(AuswahlfeldService service, NutzenkriteriumService nService, CommonService cService, CustomizingService customizingService, StrategischeZieleService szService) {\r\n        super();\r\n        this.service = service;\r\n        service.init(nService, cService, customizingService, szService);\r\n    }\r\n\r\n    public ActionForward list(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {\r\n        service.list(request, mapping.getPath());\r\n        return mapping.findForward(Constants.LIST);\r\n    }\r\n\r\n    public ActionForward prepare(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {\r\n        DynaActionForm afForm = (DynaActionForm) form;\r\n        // Auswahlfelder holen\r\n        service.populate(request, mapping.getPath(), afForm);\r\n        return mapping.findForward(Constants.FORM);\r\n    }\r\n\r\n    public ActionForward edit(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {\r\n        DynaActionForm aForm = (DynaActionForm) form;\r\n        service.edit(request, aForm);\r\n        return mapping.findForward(Constants.FORM);\r\n    }\r\n\r\n    public ActionForward update(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {\r\n        DynaActionForm aForm = (DynaActionForm) form;\r\n        service.update(request, aForm);\r\n        service.list(request, mapping.getPath());\r\n        return mapping.findForward(Constants.LIST);\r\n    }\r\n\r\n    public ActionForward deletequestion(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {\r\n        DynaActionForm aForm = (DynaActionForm) form;\r\n        Auswahlfeld a = service.getAuswahlfeld(request, aForm);\r\n        if (a == null) {\r\n            service.list(request, mapping.getPath());\r\n            return mapping.findForward(Constants.LIST);\r\n        }\r\n        ActionMessages messages = new ActionMessages();\r\n        service.deleteQuestion(request, a, messages);\r\n        saveMessages(request, messages);\r\n        return mapping.findForward(Constants.QUESTION);\r\n    }\r\n\r\n    public ActionForward delete(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {\r\n        DynaActionForm aForm = (DynaActionForm) form;\r\n        Auswahlfeld a = service.getAuswahlfeld(request, aForm);\r\n        if (a == null) {\r\n            service.list(request, mapping.getPath());\r\n            return mapping.findForward(Constants.LIST);\r\n        }\r\n        // Lï¿½schen\r\n        service.delete(request, a);\r\n        service.list(request, mapping.getPath());\r\n        return mapping.findForward(Constants.LIST);\r\n    }\r\n\r\n    public ActionForward next(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {\r\n        // Formulardaten holen, Auswahlfelder setzen und nï¿½chste Action anwï¿½hlen\r\n        DynaActionForm aForm = (DynaActionForm) form;\r\n        String path = mapping.getPath();\r\n        service.setAuswahlfelder(request, aForm, path);\r\n        if (path.contains(Constants.REALISIERBARKEIT_ACTION)) {\r\n            return mapping.findForward(Constants.NEXT);\r\n        }\r\n        // Nï¿½chste Action?\r\n        logger.debug(\"Abstufungen: \" + request.getSession().getAttribute(Constants.ABSTUFUNGEN));\r\n        if (service.next(request)) {\r\n            logger.debug(\"Nï¿½chster Schritt\");\r\n            if (service.isOperativerNutzen(request) && path.contains(Constants.GEWICHTUNG_ACTION)) {\r\n                if (!service.customizingComplete(request)) {\r\n                    service.populate(request, mapping.getPath(), aForm);\r\n                    return mapping.findForward(Constants.FORM);\r\n                }\r\n                return mapping.findForward(Constants.END);\r\n            }\r\n            return mapping.findForward(Constants.NEXT);\r\n        }\r\n        // Nï¿½chste Kategorie\r\n        logger.debug(\"Nï¿½chste Kategorie\");\r\n        service.populate(request, mapping.getPath(), aForm);\r\n        return mapping.findForward(Constants.FORM);\r\n    }\r\n\r\n    public ActionForward add(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {\r\n        DynaActionForm afForm = (DynaActionForm) form;\r\n        ActionMessages errors = new ActionMessages();\r\n        ActionMessages messages = new ActionMessages();\r\n        if (!service.add(request, afForm, errors, messages)) {\r\n            saveErrors(request, errors);\r\n            saveMessages(request, messages);\r\n        }\r\n        service.populate(request, mapping.getPath(), afForm);\r\n        return mapping.findForward(Constants.FORM);\r\n    }\r\n}\r\n",
		"id": "EvoSuiteBenchmark/46_nutzenportfolio/src/main/java/ch/bfh/egov/nutzenportfolio/action/AuswahlfeldActionTest4.java",
		"test_prompt": "// AuswahlfeldActionTest4.java\npackage ch.bfh.egov.nutzenportfolio.action;\n\nimport javax.servlet.http.HttpServletRequest;\nimport javax.servlet.http.HttpServletResponse;\nimport ch.bfh.egov.nutzenportfolio.Constants;\nimport ch.bfh.egov.nutzenportfolio.service.auswahlfeld.AuswahlfeldService;\nimport ch.bfh.egov.nutzenportfolio.service.common.CommonService;\nimport ch.bfh.egov.nutzenportfolio.service.customizing.CustomizingService;\nimport ch.bfh.egov.nutzenportfolio.service.nutzenkriterium.NutzenkriteriumService;\nimport ch.bfh.egov.nutzenportfolio.service.strategischeziele.StrategischeZieleService;\nimport ch.bfh.egov.nutzenportfolio.tos.Auswahlfeld;\nimport org.apache.commons.logging.Log;\nimport org.apache.commons.logging.LogFactory;\nimport org.apache.struts.action.ActionForm;\nimport org.apache.struts.action.ActionForward;\nimport org.apache.struts.action.ActionMapping;\nimport org.apache.struts.action.ActionMessages;\nimport org.apache.struts.action.DynaActionForm;\nimport org.apache.struts.actions.DispatchAction;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link AuswahlfeldAction}.\n* It contains ten unit test cases for the {@link AuswahlfeldAction#deletequestion(ActionMapping, ActionForm, HttpServletRequest, HttpServletResponse)} method.\n*/\nclass AuswahlfeldActionTest4 {"
	},
	{
		"original_code": "// AuswahlfeldAction.java\n/**\r\n * Nutzenportfolio\r\n * Copyright (C) 2006 Kompetenzzentrum E-Business, Simon Bergamin\r\n *\r\n * This program is free software; you can redistribute it and/or\r\n * modify it under the terms of the GNU General Public License\r\n * as published by the Free Software Foundation; either version 2\r\n * of the License, or (at your option) any later version.\r\n *\r\n * This program is distributed in the hope that it will be useful,\r\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n * GNU General Public License for more details.\r\n *\r\n * You should have received a copy of the GNU General Public License\r\n * along with this program; if not, write to the Free Software\r\n * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\r\n */\r\npackage ch.bfh.egov.nutzenportfolio.action;\r\n\r\nimport javax.servlet.http.HttpServletRequest;\r\nimport javax.servlet.http.HttpServletResponse;\r\nimport ch.bfh.egov.nutzenportfolio.Constants;\r\nimport ch.bfh.egov.nutzenportfolio.service.auswahlfeld.AuswahlfeldService;\r\nimport ch.bfh.egov.nutzenportfolio.service.common.CommonService;\r\nimport ch.bfh.egov.nutzenportfolio.service.customizing.CustomizingService;\r\nimport ch.bfh.egov.nutzenportfolio.service.nutzenkriterium.NutzenkriteriumService;\r\nimport ch.bfh.egov.nutzenportfolio.service.strategischeziele.StrategischeZieleService;\r\nimport ch.bfh.egov.nutzenportfolio.tos.Auswahlfeld;\r\nimport org.apache.commons.logging.Log;\r\nimport org.apache.commons.logging.LogFactory;\r\nimport org.apache.struts.action.ActionForm;\r\nimport org.apache.struts.action.ActionForward;\r\nimport org.apache.struts.action.ActionMapping;\r\nimport org.apache.struts.action.ActionMessages;\r\nimport org.apache.struts.action.DynaActionForm;\r\nimport org.apache.struts.actions.DispatchAction;\r\n\r\npublic class AuswahlfeldAction extends DispatchAction {\r\n\r\n    private Log logger = LogFactory.getLog(this.getClass());\r\n\r\n    private AuswahlfeldService service;\r\n\r\n    public AuswahlfeldAction(AuswahlfeldService service, NutzenkriteriumService nService, CommonService cService, CustomizingService customizingService, StrategischeZieleService szService) {\r\n        super();\r\n        this.service = service;\r\n        service.init(nService, cService, customizingService, szService);\r\n    }\r\n\r\n    public ActionForward list(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {\r\n        service.list(request, mapping.getPath());\r\n        return mapping.findForward(Constants.LIST);\r\n    }\r\n\r\n    public ActionForward prepare(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {\r\n        DynaActionForm afForm = (DynaActionForm) form;\r\n        // Auswahlfelder holen\r\n        service.populate(request, mapping.getPath(), afForm);\r\n        return mapping.findForward(Constants.FORM);\r\n    }\r\n\r\n    public ActionForward edit(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {\r\n        DynaActionForm aForm = (DynaActionForm) form;\r\n        service.edit(request, aForm);\r\n        return mapping.findForward(Constants.FORM);\r\n    }\r\n\r\n    public ActionForward update(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {\r\n        DynaActionForm aForm = (DynaActionForm) form;\r\n        service.update(request, aForm);\r\n        service.list(request, mapping.getPath());\r\n        return mapping.findForward(Constants.LIST);\r\n    }\r\n\r\n    public ActionForward deletequestion(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {\r\n        DynaActionForm aForm = (DynaActionForm) form;\r\n        Auswahlfeld a = service.getAuswahlfeld(request, aForm);\r\n        if (a == null) {\r\n            service.list(request, mapping.getPath());\r\n            return mapping.findForward(Constants.LIST);\r\n        }\r\n        ActionMessages messages = new ActionMessages();\r\n        service.deleteQuestion(request, a, messages);\r\n        saveMessages(request, messages);\r\n        return mapping.findForward(Constants.QUESTION);\r\n    }\r\n\r\n    public ActionForward delete(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {\r\n        DynaActionForm aForm = (DynaActionForm) form;\r\n        Auswahlfeld a = service.getAuswahlfeld(request, aForm);\r\n        if (a == null) {\r\n            service.list(request, mapping.getPath());\r\n            return mapping.findForward(Constants.LIST);\r\n        }\r\n        // Lï¿½schen\r\n        service.delete(request, a);\r\n        service.list(request, mapping.getPath());\r\n        return mapping.findForward(Constants.LIST);\r\n    }\r\n\r\n    public ActionForward next(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {\r\n        // Formulardaten holen, Auswahlfelder setzen und nï¿½chste Action anwï¿½hlen\r\n        DynaActionForm aForm = (DynaActionForm) form;\r\n        String path = mapping.getPath();\r\n        service.setAuswahlfelder(request, aForm, path);\r\n        if (path.contains(Constants.REALISIERBARKEIT_ACTION)) {\r\n            return mapping.findForward(Constants.NEXT);\r\n        }\r\n        // Nï¿½chste Action?\r\n        logger.debug(\"Abstufungen: \" + request.getSession().getAttribute(Constants.ABSTUFUNGEN));\r\n        if (service.next(request)) {\r\n            logger.debug(\"Nï¿½chster Schritt\");\r\n            if (service.isOperativerNutzen(request) && path.contains(Constants.GEWICHTUNG_ACTION)) {\r\n                if (!service.customizingComplete(request)) {\r\n                    service.populate(request, mapping.getPath(), aForm);\r\n                    return mapping.findForward(Constants.FORM);\r\n                }\r\n                return mapping.findForward(Constants.END);\r\n            }\r\n            return mapping.findForward(Constants.NEXT);\r\n        }\r\n        // Nï¿½chste Kategorie\r\n        logger.debug(\"Nï¿½chste Kategorie\");\r\n        service.populate(request, mapping.getPath(), aForm);\r\n        return mapping.findForward(Constants.FORM);\r\n    }\r\n\r\n    public ActionForward add(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {\r\n        DynaActionForm afForm = (DynaActionForm) form;\r\n        ActionMessages errors = new ActionMessages();\r\n        ActionMessages messages = new ActionMessages();\r\n        if (!service.add(request, afForm, errors, messages)) {\r\n            saveErrors(request, errors);\r\n            saveMessages(request, messages);\r\n        }\r\n        service.populate(request, mapping.getPath(), afForm);\r\n        return mapping.findForward(Constants.FORM);\r\n    }\r\n}\r\n",
		"id": "EvoSuiteBenchmark/46_nutzenportfolio/src/main/java/ch/bfh/egov/nutzenportfolio/action/AuswahlfeldActionTest5.java",
		"test_prompt": "// AuswahlfeldActionTest5.java\npackage ch.bfh.egov.nutzenportfolio.action;\n\nimport javax.servlet.http.HttpServletRequest;\nimport javax.servlet.http.HttpServletResponse;\nimport ch.bfh.egov.nutzenportfolio.Constants;\nimport ch.bfh.egov.nutzenportfolio.service.auswahlfeld.AuswahlfeldService;\nimport ch.bfh.egov.nutzenportfolio.service.common.CommonService;\nimport ch.bfh.egov.nutzenportfolio.service.customizing.CustomizingService;\nimport ch.bfh.egov.nutzenportfolio.service.nutzenkriterium.NutzenkriteriumService;\nimport ch.bfh.egov.nutzenportfolio.service.strategischeziele.StrategischeZieleService;\nimport ch.bfh.egov.nutzenportfolio.tos.Auswahlfeld;\nimport org.apache.commons.logging.Log;\nimport org.apache.commons.logging.LogFactory;\nimport org.apache.struts.action.ActionForm;\nimport org.apache.struts.action.ActionForward;\nimport org.apache.struts.action.ActionMapping;\nimport org.apache.struts.action.ActionMessages;\nimport org.apache.struts.action.DynaActionForm;\nimport org.apache.struts.actions.DispatchAction;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link AuswahlfeldAction}.\n* It contains ten unit test cases for the {@link AuswahlfeldAction#delete(ActionMapping, ActionForm, HttpServletRequest, HttpServletResponse)} method.\n*/\nclass AuswahlfeldActionTest5 {"
	},
	{
		"original_code": "// AuswahlfeldAction.java\n/**\r\n * Nutzenportfolio\r\n * Copyright (C) 2006 Kompetenzzentrum E-Business, Simon Bergamin\r\n *\r\n * This program is free software; you can redistribute it and/or\r\n * modify it under the terms of the GNU General Public License\r\n * as published by the Free Software Foundation; either version 2\r\n * of the License, or (at your option) any later version.\r\n *\r\n * This program is distributed in the hope that it will be useful,\r\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n * GNU General Public License for more details.\r\n *\r\n * You should have received a copy of the GNU General Public License\r\n * along with this program; if not, write to the Free Software\r\n * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\r\n */\r\npackage ch.bfh.egov.nutzenportfolio.action;\r\n\r\nimport javax.servlet.http.HttpServletRequest;\r\nimport javax.servlet.http.HttpServletResponse;\r\nimport ch.bfh.egov.nutzenportfolio.Constants;\r\nimport ch.bfh.egov.nutzenportfolio.service.auswahlfeld.AuswahlfeldService;\r\nimport ch.bfh.egov.nutzenportfolio.service.common.CommonService;\r\nimport ch.bfh.egov.nutzenportfolio.service.customizing.CustomizingService;\r\nimport ch.bfh.egov.nutzenportfolio.service.nutzenkriterium.NutzenkriteriumService;\r\nimport ch.bfh.egov.nutzenportfolio.service.strategischeziele.StrategischeZieleService;\r\nimport ch.bfh.egov.nutzenportfolio.tos.Auswahlfeld;\r\nimport org.apache.commons.logging.Log;\r\nimport org.apache.commons.logging.LogFactory;\r\nimport org.apache.struts.action.ActionForm;\r\nimport org.apache.struts.action.ActionForward;\r\nimport org.apache.struts.action.ActionMapping;\r\nimport org.apache.struts.action.ActionMessages;\r\nimport org.apache.struts.action.DynaActionForm;\r\nimport org.apache.struts.actions.DispatchAction;\r\n\r\npublic class AuswahlfeldAction extends DispatchAction {\r\n\r\n    private Log logger = LogFactory.getLog(this.getClass());\r\n\r\n    private AuswahlfeldService service;\r\n\r\n    public AuswahlfeldAction(AuswahlfeldService service, NutzenkriteriumService nService, CommonService cService, CustomizingService customizingService, StrategischeZieleService szService) {\r\n        super();\r\n        this.service = service;\r\n        service.init(nService, cService, customizingService, szService);\r\n    }\r\n\r\n    public ActionForward list(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {\r\n        service.list(request, mapping.getPath());\r\n        return mapping.findForward(Constants.LIST);\r\n    }\r\n\r\n    public ActionForward prepare(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {\r\n        DynaActionForm afForm = (DynaActionForm) form;\r\n        // Auswahlfelder holen\r\n        service.populate(request, mapping.getPath(), afForm);\r\n        return mapping.findForward(Constants.FORM);\r\n    }\r\n\r\n    public ActionForward edit(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {\r\n        DynaActionForm aForm = (DynaActionForm) form;\r\n        service.edit(request, aForm);\r\n        return mapping.findForward(Constants.FORM);\r\n    }\r\n\r\n    public ActionForward update(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {\r\n        DynaActionForm aForm = (DynaActionForm) form;\r\n        service.update(request, aForm);\r\n        service.list(request, mapping.getPath());\r\n        return mapping.findForward(Constants.LIST);\r\n    }\r\n\r\n    public ActionForward deletequestion(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {\r\n        DynaActionForm aForm = (DynaActionForm) form;\r\n        Auswahlfeld a = service.getAuswahlfeld(request, aForm);\r\n        if (a == null) {\r\n            service.list(request, mapping.getPath());\r\n            return mapping.findForward(Constants.LIST);\r\n        }\r\n        ActionMessages messages = new ActionMessages();\r\n        service.deleteQuestion(request, a, messages);\r\n        saveMessages(request, messages);\r\n        return mapping.findForward(Constants.QUESTION);\r\n    }\r\n\r\n    public ActionForward delete(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {\r\n        DynaActionForm aForm = (DynaActionForm) form;\r\n        Auswahlfeld a = service.getAuswahlfeld(request, aForm);\r\n        if (a == null) {\r\n            service.list(request, mapping.getPath());\r\n            return mapping.findForward(Constants.LIST);\r\n        }\r\n        // Lï¿½schen\r\n        service.delete(request, a);\r\n        service.list(request, mapping.getPath());\r\n        return mapping.findForward(Constants.LIST);\r\n    }\r\n\r\n    public ActionForward next(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {\r\n        // Formulardaten holen, Auswahlfelder setzen und nï¿½chste Action anwï¿½hlen\r\n        DynaActionForm aForm = (DynaActionForm) form;\r\n        String path = mapping.getPath();\r\n        service.setAuswahlfelder(request, aForm, path);\r\n        if (path.contains(Constants.REALISIERBARKEIT_ACTION)) {\r\n            return mapping.findForward(Constants.NEXT);\r\n        }\r\n        // Nï¿½chste Action?\r\n        logger.debug(\"Abstufungen: \" + request.getSession().getAttribute(Constants.ABSTUFUNGEN));\r\n        if (service.next(request)) {\r\n            logger.debug(\"Nï¿½chster Schritt\");\r\n            if (service.isOperativerNutzen(request) && path.contains(Constants.GEWICHTUNG_ACTION)) {\r\n                if (!service.customizingComplete(request)) {\r\n                    service.populate(request, mapping.getPath(), aForm);\r\n                    return mapping.findForward(Constants.FORM);\r\n                }\r\n                return mapping.findForward(Constants.END);\r\n            }\r\n            return mapping.findForward(Constants.NEXT);\r\n        }\r\n        // Nï¿½chste Kategorie\r\n        logger.debug(\"Nï¿½chste Kategorie\");\r\n        service.populate(request, mapping.getPath(), aForm);\r\n        return mapping.findForward(Constants.FORM);\r\n    }\r\n\r\n    public ActionForward add(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {\r\n        DynaActionForm afForm = (DynaActionForm) form;\r\n        ActionMessages errors = new ActionMessages();\r\n        ActionMessages messages = new ActionMessages();\r\n        if (!service.add(request, afForm, errors, messages)) {\r\n            saveErrors(request, errors);\r\n            saveMessages(request, messages);\r\n        }\r\n        service.populate(request, mapping.getPath(), afForm);\r\n        return mapping.findForward(Constants.FORM);\r\n    }\r\n}\r\n",
		"id": "EvoSuiteBenchmark/46_nutzenportfolio/src/main/java/ch/bfh/egov/nutzenportfolio/action/AuswahlfeldActionTest6.java",
		"test_prompt": "// AuswahlfeldActionTest6.java\npackage ch.bfh.egov.nutzenportfolio.action;\n\nimport javax.servlet.http.HttpServletRequest;\nimport javax.servlet.http.HttpServletResponse;\nimport ch.bfh.egov.nutzenportfolio.Constants;\nimport ch.bfh.egov.nutzenportfolio.service.auswahlfeld.AuswahlfeldService;\nimport ch.bfh.egov.nutzenportfolio.service.common.CommonService;\nimport ch.bfh.egov.nutzenportfolio.service.customizing.CustomizingService;\nimport ch.bfh.egov.nutzenportfolio.service.nutzenkriterium.NutzenkriteriumService;\nimport ch.bfh.egov.nutzenportfolio.service.strategischeziele.StrategischeZieleService;\nimport ch.bfh.egov.nutzenportfolio.tos.Auswahlfeld;\nimport org.apache.commons.logging.Log;\nimport org.apache.commons.logging.LogFactory;\nimport org.apache.struts.action.ActionForm;\nimport org.apache.struts.action.ActionForward;\nimport org.apache.struts.action.ActionMapping;\nimport org.apache.struts.action.ActionMessages;\nimport org.apache.struts.action.DynaActionForm;\nimport org.apache.struts.actions.DispatchAction;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link AuswahlfeldAction}.\n* It contains ten unit test cases for the {@link AuswahlfeldAction#next(ActionMapping, ActionForm, HttpServletRequest, HttpServletResponse)} method.\n*/\nclass AuswahlfeldActionTest6 {"
	},
	{
		"original_code": "// AuswahlfeldAction.java\n/**\r\n * Nutzenportfolio\r\n * Copyright (C) 2006 Kompetenzzentrum E-Business, Simon Bergamin\r\n *\r\n * This program is free software; you can redistribute it and/or\r\n * modify it under the terms of the GNU General Public License\r\n * as published by the Free Software Foundation; either version 2\r\n * of the License, or (at your option) any later version.\r\n *\r\n * This program is distributed in the hope that it will be useful,\r\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n * GNU General Public License for more details.\r\n *\r\n * You should have received a copy of the GNU General Public License\r\n * along with this program; if not, write to the Free Software\r\n * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\r\n */\r\npackage ch.bfh.egov.nutzenportfolio.action;\r\n\r\nimport javax.servlet.http.HttpServletRequest;\r\nimport javax.servlet.http.HttpServletResponse;\r\nimport ch.bfh.egov.nutzenportfolio.Constants;\r\nimport ch.bfh.egov.nutzenportfolio.service.auswahlfeld.AuswahlfeldService;\r\nimport ch.bfh.egov.nutzenportfolio.service.common.CommonService;\r\nimport ch.bfh.egov.nutzenportfolio.service.customizing.CustomizingService;\r\nimport ch.bfh.egov.nutzenportfolio.service.nutzenkriterium.NutzenkriteriumService;\r\nimport ch.bfh.egov.nutzenportfolio.service.strategischeziele.StrategischeZieleService;\r\nimport ch.bfh.egov.nutzenportfolio.tos.Auswahlfeld;\r\nimport org.apache.commons.logging.Log;\r\nimport org.apache.commons.logging.LogFactory;\r\nimport org.apache.struts.action.ActionForm;\r\nimport org.apache.struts.action.ActionForward;\r\nimport org.apache.struts.action.ActionMapping;\r\nimport org.apache.struts.action.ActionMessages;\r\nimport org.apache.struts.action.DynaActionForm;\r\nimport org.apache.struts.actions.DispatchAction;\r\n\r\npublic class AuswahlfeldAction extends DispatchAction {\r\n\r\n    private Log logger = LogFactory.getLog(this.getClass());\r\n\r\n    private AuswahlfeldService service;\r\n\r\n    public AuswahlfeldAction(AuswahlfeldService service, NutzenkriteriumService nService, CommonService cService, CustomizingService customizingService, StrategischeZieleService szService) {\r\n        super();\r\n        this.service = service;\r\n        service.init(nService, cService, customizingService, szService);\r\n    }\r\n\r\n    public ActionForward list(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {\r\n        service.list(request, mapping.getPath());\r\n        return mapping.findForward(Constants.LIST);\r\n    }\r\n\r\n    public ActionForward prepare(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {\r\n        DynaActionForm afForm = (DynaActionForm) form;\r\n        // Auswahlfelder holen\r\n        service.populate(request, mapping.getPath(), afForm);\r\n        return mapping.findForward(Constants.FORM);\r\n    }\r\n\r\n    public ActionForward edit(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {\r\n        DynaActionForm aForm = (DynaActionForm) form;\r\n        service.edit(request, aForm);\r\n        return mapping.findForward(Constants.FORM);\r\n    }\r\n\r\n    public ActionForward update(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {\r\n        DynaActionForm aForm = (DynaActionForm) form;\r\n        service.update(request, aForm);\r\n        service.list(request, mapping.getPath());\r\n        return mapping.findForward(Constants.LIST);\r\n    }\r\n\r\n    public ActionForward deletequestion(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {\r\n        DynaActionForm aForm = (DynaActionForm) form;\r\n        Auswahlfeld a = service.getAuswahlfeld(request, aForm);\r\n        if (a == null) {\r\n            service.list(request, mapping.getPath());\r\n            return mapping.findForward(Constants.LIST);\r\n        }\r\n        ActionMessages messages = new ActionMessages();\r\n        service.deleteQuestion(request, a, messages);\r\n        saveMessages(request, messages);\r\n        return mapping.findForward(Constants.QUESTION);\r\n    }\r\n\r\n    public ActionForward delete(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {\r\n        DynaActionForm aForm = (DynaActionForm) form;\r\n        Auswahlfeld a = service.getAuswahlfeld(request, aForm);\r\n        if (a == null) {\r\n            service.list(request, mapping.getPath());\r\n            return mapping.findForward(Constants.LIST);\r\n        }\r\n        // Lï¿½schen\r\n        service.delete(request, a);\r\n        service.list(request, mapping.getPath());\r\n        return mapping.findForward(Constants.LIST);\r\n    }\r\n\r\n    public ActionForward next(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {\r\n        // Formulardaten holen, Auswahlfelder setzen und nï¿½chste Action anwï¿½hlen\r\n        DynaActionForm aForm = (DynaActionForm) form;\r\n        String path = mapping.getPath();\r\n        service.setAuswahlfelder(request, aForm, path);\r\n        if (path.contains(Constants.REALISIERBARKEIT_ACTION)) {\r\n            return mapping.findForward(Constants.NEXT);\r\n        }\r\n        // Nï¿½chste Action?\r\n        logger.debug(\"Abstufungen: \" + request.getSession().getAttribute(Constants.ABSTUFUNGEN));\r\n        if (service.next(request)) {\r\n            logger.debug(\"Nï¿½chster Schritt\");\r\n            if (service.isOperativerNutzen(request) && path.contains(Constants.GEWICHTUNG_ACTION)) {\r\n                if (!service.customizingComplete(request)) {\r\n                    service.populate(request, mapping.getPath(), aForm);\r\n                    return mapping.findForward(Constants.FORM);\r\n                }\r\n                return mapping.findForward(Constants.END);\r\n            }\r\n            return mapping.findForward(Constants.NEXT);\r\n        }\r\n        // Nï¿½chste Kategorie\r\n        logger.debug(\"Nï¿½chste Kategorie\");\r\n        service.populate(request, mapping.getPath(), aForm);\r\n        return mapping.findForward(Constants.FORM);\r\n    }\r\n\r\n    public ActionForward add(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {\r\n        DynaActionForm afForm = (DynaActionForm) form;\r\n        ActionMessages errors = new ActionMessages();\r\n        ActionMessages messages = new ActionMessages();\r\n        if (!service.add(request, afForm, errors, messages)) {\r\n            saveErrors(request, errors);\r\n            saveMessages(request, messages);\r\n        }\r\n        service.populate(request, mapping.getPath(), afForm);\r\n        return mapping.findForward(Constants.FORM);\r\n    }\r\n}\r\n",
		"id": "EvoSuiteBenchmark/46_nutzenportfolio/src/main/java/ch/bfh/egov/nutzenportfolio/action/AuswahlfeldActionTest7.java",
		"test_prompt": "// AuswahlfeldActionTest7.java\npackage ch.bfh.egov.nutzenportfolio.action;\n\nimport javax.servlet.http.HttpServletRequest;\nimport javax.servlet.http.HttpServletResponse;\nimport ch.bfh.egov.nutzenportfolio.Constants;\nimport ch.bfh.egov.nutzenportfolio.service.auswahlfeld.AuswahlfeldService;\nimport ch.bfh.egov.nutzenportfolio.service.common.CommonService;\nimport ch.bfh.egov.nutzenportfolio.service.customizing.CustomizingService;\nimport ch.bfh.egov.nutzenportfolio.service.nutzenkriterium.NutzenkriteriumService;\nimport ch.bfh.egov.nutzenportfolio.service.strategischeziele.StrategischeZieleService;\nimport ch.bfh.egov.nutzenportfolio.tos.Auswahlfeld;\nimport org.apache.commons.logging.Log;\nimport org.apache.commons.logging.LogFactory;\nimport org.apache.struts.action.ActionForm;\nimport org.apache.struts.action.ActionForward;\nimport org.apache.struts.action.ActionMapping;\nimport org.apache.struts.action.ActionMessages;\nimport org.apache.struts.action.DynaActionForm;\nimport org.apache.struts.actions.DispatchAction;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link AuswahlfeldAction}.\n* It contains ten unit test cases for the {@link AuswahlfeldAction#add(ActionMapping, ActionForm, HttpServletRequest, HttpServletResponse)} method.\n*/\nclass AuswahlfeldActionTest7 {"
	},
	{
		"original_code": "// NutzenkriteriumAction.java\n/**\r\n * Nutzenportfolio\r\n * Copyright (C) 2006 Kompetenzzentrum E-Business, Simon Bergamin\r\n *\r\n * This program is free software; you can redistribute it and/or\r\n * modify it under the terms of the GNU General Public License\r\n * as published by the Free Software Foundation; either version 2\r\n * of the License, or (at your option) any later version.\r\n *\r\n * This program is distributed in the hope that it will be useful,\r\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n * GNU General Public License for more details.\r\n *\r\n * You should have received a copy of the GNU General Public License\r\n * along with this program; if not, write to the Free Software\r\n * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\r\n */\r\npackage ch.bfh.egov.nutzenportfolio.action;\r\n\r\nimport javax.servlet.http.HttpServletRequest;\r\nimport javax.servlet.http.HttpServletResponse;\r\nimport ch.bfh.egov.nutzenportfolio.Constants;\r\nimport ch.bfh.egov.nutzenportfolio.form.FragenForm;\r\nimport ch.bfh.egov.nutzenportfolio.service.auswahlfeld.AuswahlfeldService;\r\nimport ch.bfh.egov.nutzenportfolio.service.common.CommonService;\r\nimport ch.bfh.egov.nutzenportfolio.service.customizing.CustomizingService;\r\nimport ch.bfh.egov.nutzenportfolio.service.kategorie.KategorieService;\r\nimport ch.bfh.egov.nutzenportfolio.service.nutzenkriterium.NutzenkriteriumService;\r\nimport ch.bfh.egov.nutzenportfolio.tos.Nutzenkriterium;\r\nimport org.apache.commons.logging.Log;\r\nimport org.apache.commons.logging.LogFactory;\r\nimport org.apache.struts.action.ActionForm;\r\nimport org.apache.struts.action.ActionForward;\r\nimport org.apache.struts.action.ActionMapping;\r\nimport org.apache.struts.action.ActionMessage;\r\nimport org.apache.struts.action.ActionMessages;\r\nimport org.apache.struts.action.DynaActionForm;\r\nimport org.apache.struts.actions.DispatchAction;\r\n\r\npublic class NutzenkriteriumAction extends DispatchAction {\r\n\r\n    private NutzenkriteriumService service;\r\n\r\n    private CommonService cService;\r\n\r\n    private Log logger = LogFactory.getLog(this.getClass());\r\n\r\n    public NutzenkriteriumAction(NutzenkriteriumService service, AuswahlfeldService aService, CommonService cService, KategorieService kService, CustomizingService customizingService) {\r\n        super();\r\n        this.service = service;\r\n        this.cService = cService;\r\n        this.service.init(aService, cService, kService, customizingService);\r\n    }\r\n\r\n    public ActionForward list(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {\r\n        service.list(request);\r\n        return mapping.findForward(Constants.LIST);\r\n    }\r\n\r\n    public ActionForward prepare(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {\r\n        if (!service.populate(request)) {\r\n            ActionMessages errors = new ActionMessages();\r\n            errors.add(ActionMessages.GLOBAL_MESSAGE, new ActionMessage(\"errors.kategorien.not.set\"));\r\n            saveMessages(request, errors);\r\n            return mapping.findForward(Constants.KATEGORIEN);\r\n        }\r\n        return mapping.findForward(Constants.FORM);\r\n    }\r\n\r\n    public ActionForward edit(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {\r\n        DynaActionForm nForm = (DynaActionForm) form;\r\n        service.edit(request, nForm);\r\n        return mapping.findForward(Constants.FORM);\r\n    }\r\n\r\n    public ActionForward update(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {\r\n        DynaActionForm nForm = (DynaActionForm) form;\r\n        service.update(request, nForm);\r\n        service.list(request);\r\n        return mapping.findForward(Constants.LIST);\r\n    }\r\n\r\n    public ActionForward deletequestion(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {\r\n        DynaActionForm nForm = (DynaActionForm) form;\r\n        Nutzenkriterium n = service.getNutzenkriterium(request, nForm);\r\n        if (n == null) {\r\n            service.list(request);\r\n            return mapping.findForward(Constants.LIST);\r\n        }\r\n        ActionMessages messages = new ActionMessages();\r\n        service.deleteQuestion(request, n, messages);\r\n        saveMessages(request, messages);\r\n        return mapping.findForward(Constants.QUESTION);\r\n    }\r\n\r\n    public ActionForward delete(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {\r\n        DynaActionForm nForm = (DynaActionForm) form;\r\n        Nutzenkriterium n = service.getNutzenkriterium(request, nForm);\r\n        if (n == null) {\r\n            service.list(request);\r\n            return mapping.findForward(Constants.LIST);\r\n        }\r\n        // Lï¿½schen\r\n        service.delete(request, n);\r\n        service.list(request);\r\n        return mapping.findForward(Constants.LIST);\r\n    }\r\n\r\n    public ActionForward remove(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {\r\n        DynaActionForm nForm = (DynaActionForm) form;\r\n        service.remove(request, nForm);\r\n        service.populate(request);\r\n        return mapping.findForward(Constants.FORM);\r\n    }\r\n\r\n    public ActionForward set(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {\r\n        DynaActionForm nForm = (DynaActionForm) form;\r\n        service.set(request, nForm);\r\n        service.populate(request);\r\n        return mapping.findForward(Constants.FORM);\r\n    }\r\n\r\n    public ActionForward next(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {\r\n        service.populate(request);\r\n        if (service.next(request)) {\r\n            return mapping.findForward(Constants.NEXT);\r\n        }\r\n        return mapping.findForward(Constants.FORM);\r\n    }\r\n\r\n    public ActionForward populate(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {\r\n        FragenForm nForm = (FragenForm) form;\r\n        if (!service.populateFragen(request, nForm)) {\r\n            ActionMessages errors = new ActionMessages();\r\n            errors.add(ActionMessages.GLOBAL_MESSAGE, new ActionMessage(\"errors.nutzenkriterien.not.set\"));\r\n            saveMessages(request, errors);\r\n            return mapping.findForward(Constants.NUTZENKRITERIEN);\r\n        }\r\n        return mapping.findForward(Constants.FORM);\r\n    }\r\n\r\n    public ActionForward save(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {\r\n        FragenForm nForm = (FragenForm) form;\r\n        // validieren und speichern\r\n        ActionMessages errors = new ActionMessages();\r\n        if (service.saveFragen(request, nForm, errors)) {\r\n            return mapping.findForward(Constants.SUCCESS);\r\n        }\r\n        // Fehler bei der Validierung\r\n        saveErrors(request, errors);\r\n        service.populateFragen(request, nForm);\r\n        return mapping.findForward(Constants.FAILURE);\r\n    }\r\n\r\n    public ActionForward select(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {\r\n        // Vorselektieren anhand anzahl auswahlfelder\r\n        if (!service.populate(request)) {\r\n            ActionMessages errors = new ActionMessages();\r\n            errors.add(ActionMessages.GLOBAL_MESSAGE, new ActionMessage(\"errors.kategorien.not.set\"));\r\n            saveMessages(request, errors);\r\n            return mapping.findForward(Constants.KATEGORIEN);\r\n        }\r\n        service.preselect(request, mapping.getPath());\r\n        cService.isOperativerNutzen(request);\r\n        return mapping.findForward(Constants.FORM);\r\n    }\r\n\r\n    public ActionForward saveAbstufungen(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {\r\n        // Anzahl Abstufungen in die Session stellen\r\n        DynaActionForm aForm = (DynaActionForm) form;\r\n        Integer abstufung = (Integer) aForm.get(Constants.ABSTUFUNGEN);\r\n        logger.debug(\"Gewï¿½hlte Abstufung: \" + abstufung);\r\n        request.getSession().setAttribute(Constants.ABSTUFUNGEN, abstufung);\r\n        return mapping.findForward(Constants.NEXT);\r\n    }\r\n\r\n    public ActionForward saveGewichtungstyp(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {\r\n        // Gewichtugnstyp in die Session stellen\r\n        DynaActionForm aForm = (DynaActionForm) form;\r\n        Integer gewichtungstyp = (Integer) aForm.get(Constants.GEWICHTUNGSTYP);\r\n        logger.debug(\"Gewï¿½hlter Gewichtugnstyp: \" + gewichtungstyp);\r\n        request.getSession().setAttribute(Constants.GEWICHTUNGSTYP, gewichtungstyp);\r\n        // Operativer Nutzen -> Projektbetroffene\r\n        if (cService.isOperativerNutzen(request)) {\r\n            request.setAttribute(Constants.PROJEKTBETROFFENE, true);\r\n        }\r\n        if (service.direkteGewichtung(request)) {\r\n            return mapping.findForward(Constants.DIREKT);\r\n        }\r\n        return mapping.findForward(Constants.NEXT);\r\n    }\r\n\r\n    public ActionForward prepareDirekteGewichtung(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {\r\n        FragenForm fForm = (FragenForm) form;\r\n        service.populateDirekteGewichtung(request, fForm);\r\n        return mapping.findForward(Constants.FORM);\r\n    }\r\n\r\n    public ActionForward saveDirekteGewichtung(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {\r\n        FragenForm fForm = (FragenForm) form;\r\n        ActionMessages errors = new ActionMessages();\r\n        if (!service.saveDirekteGewichtung(request, fForm, errors)) {\r\n            saveMessages(request, errors);\r\n            service.populateDirekteGewichtung(request, fForm);\r\n            return mapping.findForward(Constants.FORM);\r\n        }\r\n        // Allfï¿½llige gewichtung ï¿½ber Fragebogen lï¿½schen\r\n        service.deleteFragebogenGewichtung(request);\r\n        if (cService.isOperativerNutzen(request)) {\r\n            if (!service.customizingComplete(request)) {\r\n                service.populateDirekteGewichtung(request, fForm);\r\n                return mapping.findForward(Constants.FORM);\r\n            }\r\n            return mapping.findForward(Constants.END);\r\n        }\r\n        return mapping.findForward(Constants.NEXT);\r\n    }\r\n\r\n    public ActionForward add(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {\r\n        DynaActionForm nForm = (DynaActionForm) form;\r\n        ActionMessages errors = new ActionMessages();\r\n        ActionMessages messages = new ActionMessages();\r\n        if (!service.add(request, nForm, errors, messages)) {\r\n            saveErrors(request, errors);\r\n            saveMessages(request, messages);\r\n        }\r\n        service.populate(request);\r\n        return mapping.findForward(Constants.FORM);\r\n    }\r\n}\r\n",
		"id": "EvoSuiteBenchmark/46_nutzenportfolio/src/main/java/ch/bfh/egov/nutzenportfolio/action/NutzenkriteriumActionTest0.java",
		"test_prompt": "// NutzenkriteriumActionTest0.java\npackage ch.bfh.egov.nutzenportfolio.action;\n\nimport javax.servlet.http.HttpServletRequest;\nimport javax.servlet.http.HttpServletResponse;\nimport ch.bfh.egov.nutzenportfolio.Constants;\nimport ch.bfh.egov.nutzenportfolio.form.FragenForm;\nimport ch.bfh.egov.nutzenportfolio.service.auswahlfeld.AuswahlfeldService;\nimport ch.bfh.egov.nutzenportfolio.service.common.CommonService;\nimport ch.bfh.egov.nutzenportfolio.service.customizing.CustomizingService;\nimport ch.bfh.egov.nutzenportfolio.service.kategorie.KategorieService;\nimport ch.bfh.egov.nutzenportfolio.service.nutzenkriterium.NutzenkriteriumService;\nimport ch.bfh.egov.nutzenportfolio.tos.Nutzenkriterium;\nimport org.apache.commons.logging.Log;\nimport org.apache.commons.logging.LogFactory;\nimport org.apache.struts.action.ActionForm;\nimport org.apache.struts.action.ActionForward;\nimport org.apache.struts.action.ActionMapping;\nimport org.apache.struts.action.ActionMessage;\nimport org.apache.struts.action.ActionMessages;\nimport org.apache.struts.action.DynaActionForm;\nimport org.apache.struts.actions.DispatchAction;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link NutzenkriteriumAction}.\n* It contains ten unit test cases for the {@link NutzenkriteriumAction#list(ActionMapping, ActionForm, HttpServletRequest, HttpServletResponse)} method.\n*/\nclass NutzenkriteriumActionTest0 {"
	},
	{
		"original_code": "// NutzenkriteriumAction.java\n/**\r\n * Nutzenportfolio\r\n * Copyright (C) 2006 Kompetenzzentrum E-Business, Simon Bergamin\r\n *\r\n * This program is free software; you can redistribute it and/or\r\n * modify it under the terms of the GNU General Public License\r\n * as published by the Free Software Foundation; either version 2\r\n * of the License, or (at your option) any later version.\r\n *\r\n * This program is distributed in the hope that it will be useful,\r\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n * GNU General Public License for more details.\r\n *\r\n * You should have received a copy of the GNU General Public License\r\n * along with this program; if not, write to the Free Software\r\n * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\r\n */\r\npackage ch.bfh.egov.nutzenportfolio.action;\r\n\r\nimport javax.servlet.http.HttpServletRequest;\r\nimport javax.servlet.http.HttpServletResponse;\r\nimport ch.bfh.egov.nutzenportfolio.Constants;\r\nimport ch.bfh.egov.nutzenportfolio.form.FragenForm;\r\nimport ch.bfh.egov.nutzenportfolio.service.auswahlfeld.AuswahlfeldService;\r\nimport ch.bfh.egov.nutzenportfolio.service.common.CommonService;\r\nimport ch.bfh.egov.nutzenportfolio.service.customizing.CustomizingService;\r\nimport ch.bfh.egov.nutzenportfolio.service.kategorie.KategorieService;\r\nimport ch.bfh.egov.nutzenportfolio.service.nutzenkriterium.NutzenkriteriumService;\r\nimport ch.bfh.egov.nutzenportfolio.tos.Nutzenkriterium;\r\nimport org.apache.commons.logging.Log;\r\nimport org.apache.commons.logging.LogFactory;\r\nimport org.apache.struts.action.ActionForm;\r\nimport org.apache.struts.action.ActionForward;\r\nimport org.apache.struts.action.ActionMapping;\r\nimport org.apache.struts.action.ActionMessage;\r\nimport org.apache.struts.action.ActionMessages;\r\nimport org.apache.struts.action.DynaActionForm;\r\nimport org.apache.struts.actions.DispatchAction;\r\n\r\npublic class NutzenkriteriumAction extends DispatchAction {\r\n\r\n    private NutzenkriteriumService service;\r\n\r\n    private CommonService cService;\r\n\r\n    private Log logger = LogFactory.getLog(this.getClass());\r\n\r\n    public NutzenkriteriumAction(NutzenkriteriumService service, AuswahlfeldService aService, CommonService cService, KategorieService kService, CustomizingService customizingService) {\r\n        super();\r\n        this.service = service;\r\n        this.cService = cService;\r\n        this.service.init(aService, cService, kService, customizingService);\r\n    }\r\n\r\n    public ActionForward list(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {\r\n        service.list(request);\r\n        return mapping.findForward(Constants.LIST);\r\n    }\r\n\r\n    public ActionForward prepare(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {\r\n        if (!service.populate(request)) {\r\n            ActionMessages errors = new ActionMessages();\r\n            errors.add(ActionMessages.GLOBAL_MESSAGE, new ActionMessage(\"errors.kategorien.not.set\"));\r\n            saveMessages(request, errors);\r\n            return mapping.findForward(Constants.KATEGORIEN);\r\n        }\r\n        return mapping.findForward(Constants.FORM);\r\n    }\r\n\r\n    public ActionForward edit(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {\r\n        DynaActionForm nForm = (DynaActionForm) form;\r\n        service.edit(request, nForm);\r\n        return mapping.findForward(Constants.FORM);\r\n    }\r\n\r\n    public ActionForward update(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {\r\n        DynaActionForm nForm = (DynaActionForm) form;\r\n        service.update(request, nForm);\r\n        service.list(request);\r\n        return mapping.findForward(Constants.LIST);\r\n    }\r\n\r\n    public ActionForward deletequestion(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {\r\n        DynaActionForm nForm = (DynaActionForm) form;\r\n        Nutzenkriterium n = service.getNutzenkriterium(request, nForm);\r\n        if (n == null) {\r\n            service.list(request);\r\n            return mapping.findForward(Constants.LIST);\r\n        }\r\n        ActionMessages messages = new ActionMessages();\r\n        service.deleteQuestion(request, n, messages);\r\n        saveMessages(request, messages);\r\n        return mapping.findForward(Constants.QUESTION);\r\n    }\r\n\r\n    public ActionForward delete(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {\r\n        DynaActionForm nForm = (DynaActionForm) form;\r\n        Nutzenkriterium n = service.getNutzenkriterium(request, nForm);\r\n        if (n == null) {\r\n            service.list(request);\r\n            return mapping.findForward(Constants.LIST);\r\n        }\r\n        // Lï¿½schen\r\n        service.delete(request, n);\r\n        service.list(request);\r\n        return mapping.findForward(Constants.LIST);\r\n    }\r\n\r\n    public ActionForward remove(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {\r\n        DynaActionForm nForm = (DynaActionForm) form;\r\n        service.remove(request, nForm);\r\n        service.populate(request);\r\n        return mapping.findForward(Constants.FORM);\r\n    }\r\n\r\n    public ActionForward set(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {\r\n        DynaActionForm nForm = (DynaActionForm) form;\r\n        service.set(request, nForm);\r\n        service.populate(request);\r\n        return mapping.findForward(Constants.FORM);\r\n    }\r\n\r\n    public ActionForward next(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {\r\n        service.populate(request);\r\n        if (service.next(request)) {\r\n            return mapping.findForward(Constants.NEXT);\r\n        }\r\n        return mapping.findForward(Constants.FORM);\r\n    }\r\n\r\n    public ActionForward populate(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {\r\n        FragenForm nForm = (FragenForm) form;\r\n        if (!service.populateFragen(request, nForm)) {\r\n            ActionMessages errors = new ActionMessages();\r\n            errors.add(ActionMessages.GLOBAL_MESSAGE, new ActionMessage(\"errors.nutzenkriterien.not.set\"));\r\n            saveMessages(request, errors);\r\n            return mapping.findForward(Constants.NUTZENKRITERIEN);\r\n        }\r\n        return mapping.findForward(Constants.FORM);\r\n    }\r\n\r\n    public ActionForward save(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {\r\n        FragenForm nForm = (FragenForm) form;\r\n        // validieren und speichern\r\n        ActionMessages errors = new ActionMessages();\r\n        if (service.saveFragen(request, nForm, errors)) {\r\n            return mapping.findForward(Constants.SUCCESS);\r\n        }\r\n        // Fehler bei der Validierung\r\n        saveErrors(request, errors);\r\n        service.populateFragen(request, nForm);\r\n        return mapping.findForward(Constants.FAILURE);\r\n    }\r\n\r\n    public ActionForward select(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {\r\n        // Vorselektieren anhand anzahl auswahlfelder\r\n        if (!service.populate(request)) {\r\n            ActionMessages errors = new ActionMessages();\r\n            errors.add(ActionMessages.GLOBAL_MESSAGE, new ActionMessage(\"errors.kategorien.not.set\"));\r\n            saveMessages(request, errors);\r\n            return mapping.findForward(Constants.KATEGORIEN);\r\n        }\r\n        service.preselect(request, mapping.getPath());\r\n        cService.isOperativerNutzen(request);\r\n        return mapping.findForward(Constants.FORM);\r\n    }\r\n\r\n    public ActionForward saveAbstufungen(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {\r\n        // Anzahl Abstufungen in die Session stellen\r\n        DynaActionForm aForm = (DynaActionForm) form;\r\n        Integer abstufung = (Integer) aForm.get(Constants.ABSTUFUNGEN);\r\n        logger.debug(\"Gewï¿½hlte Abstufung: \" + abstufung);\r\n        request.getSession().setAttribute(Constants.ABSTUFUNGEN, abstufung);\r\n        return mapping.findForward(Constants.NEXT);\r\n    }\r\n\r\n    public ActionForward saveGewichtungstyp(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {\r\n        // Gewichtugnstyp in die Session stellen\r\n        DynaActionForm aForm = (DynaActionForm) form;\r\n        Integer gewichtungstyp = (Integer) aForm.get(Constants.GEWICHTUNGSTYP);\r\n        logger.debug(\"Gewï¿½hlter Gewichtugnstyp: \" + gewichtungstyp);\r\n        request.getSession().setAttribute(Constants.GEWICHTUNGSTYP, gewichtungstyp);\r\n        // Operativer Nutzen -> Projektbetroffene\r\n        if (cService.isOperativerNutzen(request)) {\r\n            request.setAttribute(Constants.PROJEKTBETROFFENE, true);\r\n        }\r\n        if (service.direkteGewichtung(request)) {\r\n            return mapping.findForward(Constants.DIREKT);\r\n        }\r\n        return mapping.findForward(Constants.NEXT);\r\n    }\r\n\r\n    public ActionForward prepareDirekteGewichtung(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {\r\n        FragenForm fForm = (FragenForm) form;\r\n        service.populateDirekteGewichtung(request, fForm);\r\n        return mapping.findForward(Constants.FORM);\r\n    }\r\n\r\n    public ActionForward saveDirekteGewichtung(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {\r\n        FragenForm fForm = (FragenForm) form;\r\n        ActionMessages errors = new ActionMessages();\r\n        if (!service.saveDirekteGewichtung(request, fForm, errors)) {\r\n            saveMessages(request, errors);\r\n            service.populateDirekteGewichtung(request, fForm);\r\n            return mapping.findForward(Constants.FORM);\r\n        }\r\n        // Allfï¿½llige gewichtung ï¿½ber Fragebogen lï¿½schen\r\n        service.deleteFragebogenGewichtung(request);\r\n        if (cService.isOperativerNutzen(request)) {\r\n            if (!service.customizingComplete(request)) {\r\n                service.populateDirekteGewichtung(request, fForm);\r\n                return mapping.findForward(Constants.FORM);\r\n            }\r\n            return mapping.findForward(Constants.END);\r\n        }\r\n        return mapping.findForward(Constants.NEXT);\r\n    }\r\n\r\n    public ActionForward add(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {\r\n        DynaActionForm nForm = (DynaActionForm) form;\r\n        ActionMessages errors = new ActionMessages();\r\n        ActionMessages messages = new ActionMessages();\r\n        if (!service.add(request, nForm, errors, messages)) {\r\n            saveErrors(request, errors);\r\n            saveMessages(request, messages);\r\n        }\r\n        service.populate(request);\r\n        return mapping.findForward(Constants.FORM);\r\n    }\r\n}\r\n",
		"id": "EvoSuiteBenchmark/46_nutzenportfolio/src/main/java/ch/bfh/egov/nutzenportfolio/action/NutzenkriteriumActionTest1.java",
		"test_prompt": "// NutzenkriteriumActionTest1.java\npackage ch.bfh.egov.nutzenportfolio.action;\n\nimport javax.servlet.http.HttpServletRequest;\nimport javax.servlet.http.HttpServletResponse;\nimport ch.bfh.egov.nutzenportfolio.Constants;\nimport ch.bfh.egov.nutzenportfolio.form.FragenForm;\nimport ch.bfh.egov.nutzenportfolio.service.auswahlfeld.AuswahlfeldService;\nimport ch.bfh.egov.nutzenportfolio.service.common.CommonService;\nimport ch.bfh.egov.nutzenportfolio.service.customizing.CustomizingService;\nimport ch.bfh.egov.nutzenportfolio.service.kategorie.KategorieService;\nimport ch.bfh.egov.nutzenportfolio.service.nutzenkriterium.NutzenkriteriumService;\nimport ch.bfh.egov.nutzenportfolio.tos.Nutzenkriterium;\nimport org.apache.commons.logging.Log;\nimport org.apache.commons.logging.LogFactory;\nimport org.apache.struts.action.ActionForm;\nimport org.apache.struts.action.ActionForward;\nimport org.apache.struts.action.ActionMapping;\nimport org.apache.struts.action.ActionMessage;\nimport org.apache.struts.action.ActionMessages;\nimport org.apache.struts.action.DynaActionForm;\nimport org.apache.struts.actions.DispatchAction;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link NutzenkriteriumAction}.\n* It contains ten unit test cases for the {@link NutzenkriteriumAction#prepare(ActionMapping, ActionForm, HttpServletRequest, HttpServletResponse)} method.\n*/\nclass NutzenkriteriumActionTest1 {"
	},
	{
		"original_code": "// NutzenkriteriumAction.java\n/**\r\n * Nutzenportfolio\r\n * Copyright (C) 2006 Kompetenzzentrum E-Business, Simon Bergamin\r\n *\r\n * This program is free software; you can redistribute it and/or\r\n * modify it under the terms of the GNU General Public License\r\n * as published by the Free Software Foundation; either version 2\r\n * of the License, or (at your option) any later version.\r\n *\r\n * This program is distributed in the hope that it will be useful,\r\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n * GNU General Public License for more details.\r\n *\r\n * You should have received a copy of the GNU General Public License\r\n * along with this program; if not, write to the Free Software\r\n * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\r\n */\r\npackage ch.bfh.egov.nutzenportfolio.action;\r\n\r\nimport javax.servlet.http.HttpServletRequest;\r\nimport javax.servlet.http.HttpServletResponse;\r\nimport ch.bfh.egov.nutzenportfolio.Constants;\r\nimport ch.bfh.egov.nutzenportfolio.form.FragenForm;\r\nimport ch.bfh.egov.nutzenportfolio.service.auswahlfeld.AuswahlfeldService;\r\nimport ch.bfh.egov.nutzenportfolio.service.common.CommonService;\r\nimport ch.bfh.egov.nutzenportfolio.service.customizing.CustomizingService;\r\nimport ch.bfh.egov.nutzenportfolio.service.kategorie.KategorieService;\r\nimport ch.bfh.egov.nutzenportfolio.service.nutzenkriterium.NutzenkriteriumService;\r\nimport ch.bfh.egov.nutzenportfolio.tos.Nutzenkriterium;\r\nimport org.apache.commons.logging.Log;\r\nimport org.apache.commons.logging.LogFactory;\r\nimport org.apache.struts.action.ActionForm;\r\nimport org.apache.struts.action.ActionForward;\r\nimport org.apache.struts.action.ActionMapping;\r\nimport org.apache.struts.action.ActionMessage;\r\nimport org.apache.struts.action.ActionMessages;\r\nimport org.apache.struts.action.DynaActionForm;\r\nimport org.apache.struts.actions.DispatchAction;\r\n\r\npublic class NutzenkriteriumAction extends DispatchAction {\r\n\r\n    private NutzenkriteriumService service;\r\n\r\n    private CommonService cService;\r\n\r\n    private Log logger = LogFactory.getLog(this.getClass());\r\n\r\n    public NutzenkriteriumAction(NutzenkriteriumService service, AuswahlfeldService aService, CommonService cService, KategorieService kService, CustomizingService customizingService) {\r\n        super();\r\n        this.service = service;\r\n        this.cService = cService;\r\n        this.service.init(aService, cService, kService, customizingService);\r\n    }\r\n\r\n    public ActionForward list(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {\r\n        service.list(request);\r\n        return mapping.findForward(Constants.LIST);\r\n    }\r\n\r\n    public ActionForward prepare(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {\r\n        if (!service.populate(request)) {\r\n            ActionMessages errors = new ActionMessages();\r\n            errors.add(ActionMessages.GLOBAL_MESSAGE, new ActionMessage(\"errors.kategorien.not.set\"));\r\n            saveMessages(request, errors);\r\n            return mapping.findForward(Constants.KATEGORIEN);\r\n        }\r\n        return mapping.findForward(Constants.FORM);\r\n    }\r\n\r\n    public ActionForward edit(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {\r\n        DynaActionForm nForm = (DynaActionForm) form;\r\n        service.edit(request, nForm);\r\n        return mapping.findForward(Constants.FORM);\r\n    }\r\n\r\n    public ActionForward update(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {\r\n        DynaActionForm nForm = (DynaActionForm) form;\r\n        service.update(request, nForm);\r\n        service.list(request);\r\n        return mapping.findForward(Constants.LIST);\r\n    }\r\n\r\n    public ActionForward deletequestion(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {\r\n        DynaActionForm nForm = (DynaActionForm) form;\r\n        Nutzenkriterium n = service.getNutzenkriterium(request, nForm);\r\n        if (n == null) {\r\n            service.list(request);\r\n            return mapping.findForward(Constants.LIST);\r\n        }\r\n        ActionMessages messages = new ActionMessages();\r\n        service.deleteQuestion(request, n, messages);\r\n        saveMessages(request, messages);\r\n        return mapping.findForward(Constants.QUESTION);\r\n    }\r\n\r\n    public ActionForward delete(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {\r\n        DynaActionForm nForm = (DynaActionForm) form;\r\n        Nutzenkriterium n = service.getNutzenkriterium(request, nForm);\r\n        if (n == null) {\r\n            service.list(request);\r\n            return mapping.findForward(Constants.LIST);\r\n        }\r\n        // Lï¿½schen\r\n        service.delete(request, n);\r\n        service.list(request);\r\n        return mapping.findForward(Constants.LIST);\r\n    }\r\n\r\n    public ActionForward remove(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {\r\n        DynaActionForm nForm = (DynaActionForm) form;\r\n        service.remove(request, nForm);\r\n        service.populate(request);\r\n        return mapping.findForward(Constants.FORM);\r\n    }\r\n\r\n    public ActionForward set(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {\r\n        DynaActionForm nForm = (DynaActionForm) form;\r\n        service.set(request, nForm);\r\n        service.populate(request);\r\n        return mapping.findForward(Constants.FORM);\r\n    }\r\n\r\n    public ActionForward next(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {\r\n        service.populate(request);\r\n        if (service.next(request)) {\r\n            return mapping.findForward(Constants.NEXT);\r\n        }\r\n        return mapping.findForward(Constants.FORM);\r\n    }\r\n\r\n    public ActionForward populate(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {\r\n        FragenForm nForm = (FragenForm) form;\r\n        if (!service.populateFragen(request, nForm)) {\r\n            ActionMessages errors = new ActionMessages();\r\n            errors.add(ActionMessages.GLOBAL_MESSAGE, new ActionMessage(\"errors.nutzenkriterien.not.set\"));\r\n            saveMessages(request, errors);\r\n            return mapping.findForward(Constants.NUTZENKRITERIEN);\r\n        }\r\n        return mapping.findForward(Constants.FORM);\r\n    }\r\n\r\n    public ActionForward save(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {\r\n        FragenForm nForm = (FragenForm) form;\r\n        // validieren und speichern\r\n        ActionMessages errors = new ActionMessages();\r\n        if (service.saveFragen(request, nForm, errors)) {\r\n            return mapping.findForward(Constants.SUCCESS);\r\n        }\r\n        // Fehler bei der Validierung\r\n        saveErrors(request, errors);\r\n        service.populateFragen(request, nForm);\r\n        return mapping.findForward(Constants.FAILURE);\r\n    }\r\n\r\n    public ActionForward select(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {\r\n        // Vorselektieren anhand anzahl auswahlfelder\r\n        if (!service.populate(request)) {\r\n            ActionMessages errors = new ActionMessages();\r\n            errors.add(ActionMessages.GLOBAL_MESSAGE, new ActionMessage(\"errors.kategorien.not.set\"));\r\n            saveMessages(request, errors);\r\n            return mapping.findForward(Constants.KATEGORIEN);\r\n        }\r\n        service.preselect(request, mapping.getPath());\r\n        cService.isOperativerNutzen(request);\r\n        return mapping.findForward(Constants.FORM);\r\n    }\r\n\r\n    public ActionForward saveAbstufungen(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {\r\n        // Anzahl Abstufungen in die Session stellen\r\n        DynaActionForm aForm = (DynaActionForm) form;\r\n        Integer abstufung = (Integer) aForm.get(Constants.ABSTUFUNGEN);\r\n        logger.debug(\"Gewï¿½hlte Abstufung: \" + abstufung);\r\n        request.getSession().setAttribute(Constants.ABSTUFUNGEN, abstufung);\r\n        return mapping.findForward(Constants.NEXT);\r\n    }\r\n\r\n    public ActionForward saveGewichtungstyp(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {\r\n        // Gewichtugnstyp in die Session stellen\r\n        DynaActionForm aForm = (DynaActionForm) form;\r\n        Integer gewichtungstyp = (Integer) aForm.get(Constants.GEWICHTUNGSTYP);\r\n        logger.debug(\"Gewï¿½hlter Gewichtugnstyp: \" + gewichtungstyp);\r\n        request.getSession().setAttribute(Constants.GEWICHTUNGSTYP, gewichtungstyp);\r\n        // Operativer Nutzen -> Projektbetroffene\r\n        if (cService.isOperativerNutzen(request)) {\r\n            request.setAttribute(Constants.PROJEKTBETROFFENE, true);\r\n        }\r\n        if (service.direkteGewichtung(request)) {\r\n            return mapping.findForward(Constants.DIREKT);\r\n        }\r\n        return mapping.findForward(Constants.NEXT);\r\n    }\r\n\r\n    public ActionForward prepareDirekteGewichtung(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {\r\n        FragenForm fForm = (FragenForm) form;\r\n        service.populateDirekteGewichtung(request, fForm);\r\n        return mapping.findForward(Constants.FORM);\r\n    }\r\n\r\n    public ActionForward saveDirekteGewichtung(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {\r\n        FragenForm fForm = (FragenForm) form;\r\n        ActionMessages errors = new ActionMessages();\r\n        if (!service.saveDirekteGewichtung(request, fForm, errors)) {\r\n            saveMessages(request, errors);\r\n            service.populateDirekteGewichtung(request, fForm);\r\n            return mapping.findForward(Constants.FORM);\r\n        }\r\n        // Allfï¿½llige gewichtung ï¿½ber Fragebogen lï¿½schen\r\n        service.deleteFragebogenGewichtung(request);\r\n        if (cService.isOperativerNutzen(request)) {\r\n            if (!service.customizingComplete(request)) {\r\n                service.populateDirekteGewichtung(request, fForm);\r\n                return mapping.findForward(Constants.FORM);\r\n            }\r\n            return mapping.findForward(Constants.END);\r\n        }\r\n        return mapping.findForward(Constants.NEXT);\r\n    }\r\n\r\n    public ActionForward add(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {\r\n        DynaActionForm nForm = (DynaActionForm) form;\r\n        ActionMessages errors = new ActionMessages();\r\n        ActionMessages messages = new ActionMessages();\r\n        if (!service.add(request, nForm, errors, messages)) {\r\n            saveErrors(request, errors);\r\n            saveMessages(request, messages);\r\n        }\r\n        service.populate(request);\r\n        return mapping.findForward(Constants.FORM);\r\n    }\r\n}\r\n",
		"id": "EvoSuiteBenchmark/46_nutzenportfolio/src/main/java/ch/bfh/egov/nutzenportfolio/action/NutzenkriteriumActionTest2.java",
		"test_prompt": "// NutzenkriteriumActionTest2.java\npackage ch.bfh.egov.nutzenportfolio.action;\n\nimport javax.servlet.http.HttpServletRequest;\nimport javax.servlet.http.HttpServletResponse;\nimport ch.bfh.egov.nutzenportfolio.Constants;\nimport ch.bfh.egov.nutzenportfolio.form.FragenForm;\nimport ch.bfh.egov.nutzenportfolio.service.auswahlfeld.AuswahlfeldService;\nimport ch.bfh.egov.nutzenportfolio.service.common.CommonService;\nimport ch.bfh.egov.nutzenportfolio.service.customizing.CustomizingService;\nimport ch.bfh.egov.nutzenportfolio.service.kategorie.KategorieService;\nimport ch.bfh.egov.nutzenportfolio.service.nutzenkriterium.NutzenkriteriumService;\nimport ch.bfh.egov.nutzenportfolio.tos.Nutzenkriterium;\nimport org.apache.commons.logging.Log;\nimport org.apache.commons.logging.LogFactory;\nimport org.apache.struts.action.ActionForm;\nimport org.apache.struts.action.ActionForward;\nimport org.apache.struts.action.ActionMapping;\nimport org.apache.struts.action.ActionMessage;\nimport org.apache.struts.action.ActionMessages;\nimport org.apache.struts.action.DynaActionForm;\nimport org.apache.struts.actions.DispatchAction;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link NutzenkriteriumAction}.\n* It contains ten unit test cases for the {@link NutzenkriteriumAction#edit(ActionMapping, ActionForm, HttpServletRequest, HttpServletResponse)} method.\n*/\nclass NutzenkriteriumActionTest2 {"
	},
	{
		"original_code": "// NutzenkriteriumAction.java\n/**\r\n * Nutzenportfolio\r\n * Copyright (C) 2006 Kompetenzzentrum E-Business, Simon Bergamin\r\n *\r\n * This program is free software; you can redistribute it and/or\r\n * modify it under the terms of the GNU General Public License\r\n * as published by the Free Software Foundation; either version 2\r\n * of the License, or (at your option) any later version.\r\n *\r\n * This program is distributed in the hope that it will be useful,\r\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n * GNU General Public License for more details.\r\n *\r\n * You should have received a copy of the GNU General Public License\r\n * along with this program; if not, write to the Free Software\r\n * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\r\n */\r\npackage ch.bfh.egov.nutzenportfolio.action;\r\n\r\nimport javax.servlet.http.HttpServletRequest;\r\nimport javax.servlet.http.HttpServletResponse;\r\nimport ch.bfh.egov.nutzenportfolio.Constants;\r\nimport ch.bfh.egov.nutzenportfolio.form.FragenForm;\r\nimport ch.bfh.egov.nutzenportfolio.service.auswahlfeld.AuswahlfeldService;\r\nimport ch.bfh.egov.nutzenportfolio.service.common.CommonService;\r\nimport ch.bfh.egov.nutzenportfolio.service.customizing.CustomizingService;\r\nimport ch.bfh.egov.nutzenportfolio.service.kategorie.KategorieService;\r\nimport ch.bfh.egov.nutzenportfolio.service.nutzenkriterium.NutzenkriteriumService;\r\nimport ch.bfh.egov.nutzenportfolio.tos.Nutzenkriterium;\r\nimport org.apache.commons.logging.Log;\r\nimport org.apache.commons.logging.LogFactory;\r\nimport org.apache.struts.action.ActionForm;\r\nimport org.apache.struts.action.ActionForward;\r\nimport org.apache.struts.action.ActionMapping;\r\nimport org.apache.struts.action.ActionMessage;\r\nimport org.apache.struts.action.ActionMessages;\r\nimport org.apache.struts.action.DynaActionForm;\r\nimport org.apache.struts.actions.DispatchAction;\r\n\r\npublic class NutzenkriteriumAction extends DispatchAction {\r\n\r\n    private NutzenkriteriumService service;\r\n\r\n    private CommonService cService;\r\n\r\n    private Log logger = LogFactory.getLog(this.getClass());\r\n\r\n    public NutzenkriteriumAction(NutzenkriteriumService service, AuswahlfeldService aService, CommonService cService, KategorieService kService, CustomizingService customizingService) {\r\n        super();\r\n        this.service = service;\r\n        this.cService = cService;\r\n        this.service.init(aService, cService, kService, customizingService);\r\n    }\r\n\r\n    public ActionForward list(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {\r\n        service.list(request);\r\n        return mapping.findForward(Constants.LIST);\r\n    }\r\n\r\n    public ActionForward prepare(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {\r\n        if (!service.populate(request)) {\r\n            ActionMessages errors = new ActionMessages();\r\n            errors.add(ActionMessages.GLOBAL_MESSAGE, new ActionMessage(\"errors.kategorien.not.set\"));\r\n            saveMessages(request, errors);\r\n            return mapping.findForward(Constants.KATEGORIEN);\r\n        }\r\n        return mapping.findForward(Constants.FORM);\r\n    }\r\n\r\n    public ActionForward edit(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {\r\n        DynaActionForm nForm = (DynaActionForm) form;\r\n        service.edit(request, nForm);\r\n        return mapping.findForward(Constants.FORM);\r\n    }\r\n\r\n    public ActionForward update(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {\r\n        DynaActionForm nForm = (DynaActionForm) form;\r\n        service.update(request, nForm);\r\n        service.list(request);\r\n        return mapping.findForward(Constants.LIST);\r\n    }\r\n\r\n    public ActionForward deletequestion(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {\r\n        DynaActionForm nForm = (DynaActionForm) form;\r\n        Nutzenkriterium n = service.getNutzenkriterium(request, nForm);\r\n        if (n == null) {\r\n            service.list(request);\r\n            return mapping.findForward(Constants.LIST);\r\n        }\r\n        ActionMessages messages = new ActionMessages();\r\n        service.deleteQuestion(request, n, messages);\r\n        saveMessages(request, messages);\r\n        return mapping.findForward(Constants.QUESTION);\r\n    }\r\n\r\n    public ActionForward delete(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {\r\n        DynaActionForm nForm = (DynaActionForm) form;\r\n        Nutzenkriterium n = service.getNutzenkriterium(request, nForm);\r\n        if (n == null) {\r\n            service.list(request);\r\n            return mapping.findForward(Constants.LIST);\r\n        }\r\n        // Lï¿½schen\r\n        service.delete(request, n);\r\n        service.list(request);\r\n        return mapping.findForward(Constants.LIST);\r\n    }\r\n\r\n    public ActionForward remove(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {\r\n        DynaActionForm nForm = (DynaActionForm) form;\r\n        service.remove(request, nForm);\r\n        service.populate(request);\r\n        return mapping.findForward(Constants.FORM);\r\n    }\r\n\r\n    public ActionForward set(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {\r\n        DynaActionForm nForm = (DynaActionForm) form;\r\n        service.set(request, nForm);\r\n        service.populate(request);\r\n        return mapping.findForward(Constants.FORM);\r\n    }\r\n\r\n    public ActionForward next(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {\r\n        service.populate(request);\r\n        if (service.next(request)) {\r\n            return mapping.findForward(Constants.NEXT);\r\n        }\r\n        return mapping.findForward(Constants.FORM);\r\n    }\r\n\r\n    public ActionForward populate(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {\r\n        FragenForm nForm = (FragenForm) form;\r\n        if (!service.populateFragen(request, nForm)) {\r\n            ActionMessages errors = new ActionMessages();\r\n            errors.add(ActionMessages.GLOBAL_MESSAGE, new ActionMessage(\"errors.nutzenkriterien.not.set\"));\r\n            saveMessages(request, errors);\r\n            return mapping.findForward(Constants.NUTZENKRITERIEN);\r\n        }\r\n        return mapping.findForward(Constants.FORM);\r\n    }\r\n\r\n    public ActionForward save(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {\r\n        FragenForm nForm = (FragenForm) form;\r\n        // validieren und speichern\r\n        ActionMessages errors = new ActionMessages();\r\n        if (service.saveFragen(request, nForm, errors)) {\r\n            return mapping.findForward(Constants.SUCCESS);\r\n        }\r\n        // Fehler bei der Validierung\r\n        saveErrors(request, errors);\r\n        service.populateFragen(request, nForm);\r\n        return mapping.findForward(Constants.FAILURE);\r\n    }\r\n\r\n    public ActionForward select(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {\r\n        // Vorselektieren anhand anzahl auswahlfelder\r\n        if (!service.populate(request)) {\r\n            ActionMessages errors = new ActionMessages();\r\n            errors.add(ActionMessages.GLOBAL_MESSAGE, new ActionMessage(\"errors.kategorien.not.set\"));\r\n            saveMessages(request, errors);\r\n            return mapping.findForward(Constants.KATEGORIEN);\r\n        }\r\n        service.preselect(request, mapping.getPath());\r\n        cService.isOperativerNutzen(request);\r\n        return mapping.findForward(Constants.FORM);\r\n    }\r\n\r\n    public ActionForward saveAbstufungen(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {\r\n        // Anzahl Abstufungen in die Session stellen\r\n        DynaActionForm aForm = (DynaActionForm) form;\r\n        Integer abstufung = (Integer) aForm.get(Constants.ABSTUFUNGEN);\r\n        logger.debug(\"Gewï¿½hlte Abstufung: \" + abstufung);\r\n        request.getSession().setAttribute(Constants.ABSTUFUNGEN, abstufung);\r\n        return mapping.findForward(Constants.NEXT);\r\n    }\r\n\r\n    public ActionForward saveGewichtungstyp(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {\r\n        // Gewichtugnstyp in die Session stellen\r\n        DynaActionForm aForm = (DynaActionForm) form;\r\n        Integer gewichtungstyp = (Integer) aForm.get(Constants.GEWICHTUNGSTYP);\r\n        logger.debug(\"Gewï¿½hlter Gewichtugnstyp: \" + gewichtungstyp);\r\n        request.getSession().setAttribute(Constants.GEWICHTUNGSTYP, gewichtungstyp);\r\n        // Operativer Nutzen -> Projektbetroffene\r\n        if (cService.isOperativerNutzen(request)) {\r\n            request.setAttribute(Constants.PROJEKTBETROFFENE, true);\r\n        }\r\n        if (service.direkteGewichtung(request)) {\r\n            return mapping.findForward(Constants.DIREKT);\r\n        }\r\n        return mapping.findForward(Constants.NEXT);\r\n    }\r\n\r\n    public ActionForward prepareDirekteGewichtung(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {\r\n        FragenForm fForm = (FragenForm) form;\r\n        service.populateDirekteGewichtung(request, fForm);\r\n        return mapping.findForward(Constants.FORM);\r\n    }\r\n\r\n    public ActionForward saveDirekteGewichtung(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {\r\n        FragenForm fForm = (FragenForm) form;\r\n        ActionMessages errors = new ActionMessages();\r\n        if (!service.saveDirekteGewichtung(request, fForm, errors)) {\r\n            saveMessages(request, errors);\r\n            service.populateDirekteGewichtung(request, fForm);\r\n            return mapping.findForward(Constants.FORM);\r\n        }\r\n        // Allfï¿½llige gewichtung ï¿½ber Fragebogen lï¿½schen\r\n        service.deleteFragebogenGewichtung(request);\r\n        if (cService.isOperativerNutzen(request)) {\r\n            if (!service.customizingComplete(request)) {\r\n                service.populateDirekteGewichtung(request, fForm);\r\n                return mapping.findForward(Constants.FORM);\r\n            }\r\n            return mapping.findForward(Constants.END);\r\n        }\r\n        return mapping.findForward(Constants.NEXT);\r\n    }\r\n\r\n    public ActionForward add(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {\r\n        DynaActionForm nForm = (DynaActionForm) form;\r\n        ActionMessages errors = new ActionMessages();\r\n        ActionMessages messages = new ActionMessages();\r\n        if (!service.add(request, nForm, errors, messages)) {\r\n            saveErrors(request, errors);\r\n            saveMessages(request, messages);\r\n        }\r\n        service.populate(request);\r\n        return mapping.findForward(Constants.FORM);\r\n    }\r\n}\r\n",
		"id": "EvoSuiteBenchmark/46_nutzenportfolio/src/main/java/ch/bfh/egov/nutzenportfolio/action/NutzenkriteriumActionTest3.java",
		"test_prompt": "// NutzenkriteriumActionTest3.java\npackage ch.bfh.egov.nutzenportfolio.action;\n\nimport javax.servlet.http.HttpServletRequest;\nimport javax.servlet.http.HttpServletResponse;\nimport ch.bfh.egov.nutzenportfolio.Constants;\nimport ch.bfh.egov.nutzenportfolio.form.FragenForm;\nimport ch.bfh.egov.nutzenportfolio.service.auswahlfeld.AuswahlfeldService;\nimport ch.bfh.egov.nutzenportfolio.service.common.CommonService;\nimport ch.bfh.egov.nutzenportfolio.service.customizing.CustomizingService;\nimport ch.bfh.egov.nutzenportfolio.service.kategorie.KategorieService;\nimport ch.bfh.egov.nutzenportfolio.service.nutzenkriterium.NutzenkriteriumService;\nimport ch.bfh.egov.nutzenportfolio.tos.Nutzenkriterium;\nimport org.apache.commons.logging.Log;\nimport org.apache.commons.logging.LogFactory;\nimport org.apache.struts.action.ActionForm;\nimport org.apache.struts.action.ActionForward;\nimport org.apache.struts.action.ActionMapping;\nimport org.apache.struts.action.ActionMessage;\nimport org.apache.struts.action.ActionMessages;\nimport org.apache.struts.action.DynaActionForm;\nimport org.apache.struts.actions.DispatchAction;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link NutzenkriteriumAction}.\n* It contains ten unit test cases for the {@link NutzenkriteriumAction#update(ActionMapping, ActionForm, HttpServletRequest, HttpServletResponse)} method.\n*/\nclass NutzenkriteriumActionTest3 {"
	},
	{
		"original_code": "// NutzenkriteriumAction.java\n/**\r\n * Nutzenportfolio\r\n * Copyright (C) 2006 Kompetenzzentrum E-Business, Simon Bergamin\r\n *\r\n * This program is free software; you can redistribute it and/or\r\n * modify it under the terms of the GNU General Public License\r\n * as published by the Free Software Foundation; either version 2\r\n * of the License, or (at your option) any later version.\r\n *\r\n * This program is distributed in the hope that it will be useful,\r\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n * GNU General Public License for more details.\r\n *\r\n * You should have received a copy of the GNU General Public License\r\n * along with this program; if not, write to the Free Software\r\n * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\r\n */\r\npackage ch.bfh.egov.nutzenportfolio.action;\r\n\r\nimport javax.servlet.http.HttpServletRequest;\r\nimport javax.servlet.http.HttpServletResponse;\r\nimport ch.bfh.egov.nutzenportfolio.Constants;\r\nimport ch.bfh.egov.nutzenportfolio.form.FragenForm;\r\nimport ch.bfh.egov.nutzenportfolio.service.auswahlfeld.AuswahlfeldService;\r\nimport ch.bfh.egov.nutzenportfolio.service.common.CommonService;\r\nimport ch.bfh.egov.nutzenportfolio.service.customizing.CustomizingService;\r\nimport ch.bfh.egov.nutzenportfolio.service.kategorie.KategorieService;\r\nimport ch.bfh.egov.nutzenportfolio.service.nutzenkriterium.NutzenkriteriumService;\r\nimport ch.bfh.egov.nutzenportfolio.tos.Nutzenkriterium;\r\nimport org.apache.commons.logging.Log;\r\nimport org.apache.commons.logging.LogFactory;\r\nimport org.apache.struts.action.ActionForm;\r\nimport org.apache.struts.action.ActionForward;\r\nimport org.apache.struts.action.ActionMapping;\r\nimport org.apache.struts.action.ActionMessage;\r\nimport org.apache.struts.action.ActionMessages;\r\nimport org.apache.struts.action.DynaActionForm;\r\nimport org.apache.struts.actions.DispatchAction;\r\n\r\npublic class NutzenkriteriumAction extends DispatchAction {\r\n\r\n    private NutzenkriteriumService service;\r\n\r\n    private CommonService cService;\r\n\r\n    private Log logger = LogFactory.getLog(this.getClass());\r\n\r\n    public NutzenkriteriumAction(NutzenkriteriumService service, AuswahlfeldService aService, CommonService cService, KategorieService kService, CustomizingService customizingService) {\r\n        super();\r\n        this.service = service;\r\n        this.cService = cService;\r\n        this.service.init(aService, cService, kService, customizingService);\r\n    }\r\n\r\n    public ActionForward list(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {\r\n        service.list(request);\r\n        return mapping.findForward(Constants.LIST);\r\n    }\r\n\r\n    public ActionForward prepare(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {\r\n        if (!service.populate(request)) {\r\n            ActionMessages errors = new ActionMessages();\r\n            errors.add(ActionMessages.GLOBAL_MESSAGE, new ActionMessage(\"errors.kategorien.not.set\"));\r\n            saveMessages(request, errors);\r\n            return mapping.findForward(Constants.KATEGORIEN);\r\n        }\r\n        return mapping.findForward(Constants.FORM);\r\n    }\r\n\r\n    public ActionForward edit(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {\r\n        DynaActionForm nForm = (DynaActionForm) form;\r\n        service.edit(request, nForm);\r\n        return mapping.findForward(Constants.FORM);\r\n    }\r\n\r\n    public ActionForward update(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {\r\n        DynaActionForm nForm = (DynaActionForm) form;\r\n        service.update(request, nForm);\r\n        service.list(request);\r\n        return mapping.findForward(Constants.LIST);\r\n    }\r\n\r\n    public ActionForward deletequestion(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {\r\n        DynaActionForm nForm = (DynaActionForm) form;\r\n        Nutzenkriterium n = service.getNutzenkriterium(request, nForm);\r\n        if (n == null) {\r\n            service.list(request);\r\n            return mapping.findForward(Constants.LIST);\r\n        }\r\n        ActionMessages messages = new ActionMessages();\r\n        service.deleteQuestion(request, n, messages);\r\n        saveMessages(request, messages);\r\n        return mapping.findForward(Constants.QUESTION);\r\n    }\r\n\r\n    public ActionForward delete(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {\r\n        DynaActionForm nForm = (DynaActionForm) form;\r\n        Nutzenkriterium n = service.getNutzenkriterium(request, nForm);\r\n        if (n == null) {\r\n            service.list(request);\r\n            return mapping.findForward(Constants.LIST);\r\n        }\r\n        // Lï¿½schen\r\n        service.delete(request, n);\r\n        service.list(request);\r\n        return mapping.findForward(Constants.LIST);\r\n    }\r\n\r\n    public ActionForward remove(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {\r\n        DynaActionForm nForm = (DynaActionForm) form;\r\n        service.remove(request, nForm);\r\n        service.populate(request);\r\n        return mapping.findForward(Constants.FORM);\r\n    }\r\n\r\n    public ActionForward set(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {\r\n        DynaActionForm nForm = (DynaActionForm) form;\r\n        service.set(request, nForm);\r\n        service.populate(request);\r\n        return mapping.findForward(Constants.FORM);\r\n    }\r\n\r\n    public ActionForward next(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {\r\n        service.populate(request);\r\n        if (service.next(request)) {\r\n            return mapping.findForward(Constants.NEXT);\r\n        }\r\n        return mapping.findForward(Constants.FORM);\r\n    }\r\n\r\n    public ActionForward populate(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {\r\n        FragenForm nForm = (FragenForm) form;\r\n        if (!service.populateFragen(request, nForm)) {\r\n            ActionMessages errors = new ActionMessages();\r\n            errors.add(ActionMessages.GLOBAL_MESSAGE, new ActionMessage(\"errors.nutzenkriterien.not.set\"));\r\n            saveMessages(request, errors);\r\n            return mapping.findForward(Constants.NUTZENKRITERIEN);\r\n        }\r\n        return mapping.findForward(Constants.FORM);\r\n    }\r\n\r\n    public ActionForward save(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {\r\n        FragenForm nForm = (FragenForm) form;\r\n        // validieren und speichern\r\n        ActionMessages errors = new ActionMessages();\r\n        if (service.saveFragen(request, nForm, errors)) {\r\n            return mapping.findForward(Constants.SUCCESS);\r\n        }\r\n        // Fehler bei der Validierung\r\n        saveErrors(request, errors);\r\n        service.populateFragen(request, nForm);\r\n        return mapping.findForward(Constants.FAILURE);\r\n    }\r\n\r\n    public ActionForward select(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {\r\n        // Vorselektieren anhand anzahl auswahlfelder\r\n        if (!service.populate(request)) {\r\n            ActionMessages errors = new ActionMessages();\r\n            errors.add(ActionMessages.GLOBAL_MESSAGE, new ActionMessage(\"errors.kategorien.not.set\"));\r\n            saveMessages(request, errors);\r\n            return mapping.findForward(Constants.KATEGORIEN);\r\n        }\r\n        service.preselect(request, mapping.getPath());\r\n        cService.isOperativerNutzen(request);\r\n        return mapping.findForward(Constants.FORM);\r\n    }\r\n\r\n    public ActionForward saveAbstufungen(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {\r\n        // Anzahl Abstufungen in die Session stellen\r\n        DynaActionForm aForm = (DynaActionForm) form;\r\n        Integer abstufung = (Integer) aForm.get(Constants.ABSTUFUNGEN);\r\n        logger.debug(\"Gewï¿½hlte Abstufung: \" + abstufung);\r\n        request.getSession().setAttribute(Constants.ABSTUFUNGEN, abstufung);\r\n        return mapping.findForward(Constants.NEXT);\r\n    }\r\n\r\n    public ActionForward saveGewichtungstyp(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {\r\n        // Gewichtugnstyp in die Session stellen\r\n        DynaActionForm aForm = (DynaActionForm) form;\r\n        Integer gewichtungstyp = (Integer) aForm.get(Constants.GEWICHTUNGSTYP);\r\n        logger.debug(\"Gewï¿½hlter Gewichtugnstyp: \" + gewichtungstyp);\r\n        request.getSession().setAttribute(Constants.GEWICHTUNGSTYP, gewichtungstyp);\r\n        // Operativer Nutzen -> Projektbetroffene\r\n        if (cService.isOperativerNutzen(request)) {\r\n            request.setAttribute(Constants.PROJEKTBETROFFENE, true);\r\n        }\r\n        if (service.direkteGewichtung(request)) {\r\n            return mapping.findForward(Constants.DIREKT);\r\n        }\r\n        return mapping.findForward(Constants.NEXT);\r\n    }\r\n\r\n    public ActionForward prepareDirekteGewichtung(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {\r\n        FragenForm fForm = (FragenForm) form;\r\n        service.populateDirekteGewichtung(request, fForm);\r\n        return mapping.findForward(Constants.FORM);\r\n    }\r\n\r\n    public ActionForward saveDirekteGewichtung(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {\r\n        FragenForm fForm = (FragenForm) form;\r\n        ActionMessages errors = new ActionMessages();\r\n        if (!service.saveDirekteGewichtung(request, fForm, errors)) {\r\n            saveMessages(request, errors);\r\n            service.populateDirekteGewichtung(request, fForm);\r\n            return mapping.findForward(Constants.FORM);\r\n        }\r\n        // Allfï¿½llige gewichtung ï¿½ber Fragebogen lï¿½schen\r\n        service.deleteFragebogenGewichtung(request);\r\n        if (cService.isOperativerNutzen(request)) {\r\n            if (!service.customizingComplete(request)) {\r\n                service.populateDirekteGewichtung(request, fForm);\r\n                return mapping.findForward(Constants.FORM);\r\n            }\r\n            return mapping.findForward(Constants.END);\r\n        }\r\n        return mapping.findForward(Constants.NEXT);\r\n    }\r\n\r\n    public ActionForward add(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {\r\n        DynaActionForm nForm = (DynaActionForm) form;\r\n        ActionMessages errors = new ActionMessages();\r\n        ActionMessages messages = new ActionMessages();\r\n        if (!service.add(request, nForm, errors, messages)) {\r\n            saveErrors(request, errors);\r\n            saveMessages(request, messages);\r\n        }\r\n        service.populate(request);\r\n        return mapping.findForward(Constants.FORM);\r\n    }\r\n}\r\n",
		"id": "EvoSuiteBenchmark/46_nutzenportfolio/src/main/java/ch/bfh/egov/nutzenportfolio/action/NutzenkriteriumActionTest4.java",
		"test_prompt": "// NutzenkriteriumActionTest4.java\npackage ch.bfh.egov.nutzenportfolio.action;\n\nimport javax.servlet.http.HttpServletRequest;\nimport javax.servlet.http.HttpServletResponse;\nimport ch.bfh.egov.nutzenportfolio.Constants;\nimport ch.bfh.egov.nutzenportfolio.form.FragenForm;\nimport ch.bfh.egov.nutzenportfolio.service.auswahlfeld.AuswahlfeldService;\nimport ch.bfh.egov.nutzenportfolio.service.common.CommonService;\nimport ch.bfh.egov.nutzenportfolio.service.customizing.CustomizingService;\nimport ch.bfh.egov.nutzenportfolio.service.kategorie.KategorieService;\nimport ch.bfh.egov.nutzenportfolio.service.nutzenkriterium.NutzenkriteriumService;\nimport ch.bfh.egov.nutzenportfolio.tos.Nutzenkriterium;\nimport org.apache.commons.logging.Log;\nimport org.apache.commons.logging.LogFactory;\nimport org.apache.struts.action.ActionForm;\nimport org.apache.struts.action.ActionForward;\nimport org.apache.struts.action.ActionMapping;\nimport org.apache.struts.action.ActionMessage;\nimport org.apache.struts.action.ActionMessages;\nimport org.apache.struts.action.DynaActionForm;\nimport org.apache.struts.actions.DispatchAction;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link NutzenkriteriumAction}.\n* It contains ten unit test cases for the {@link NutzenkriteriumAction#deletequestion(ActionMapping, ActionForm, HttpServletRequest, HttpServletResponse)} method.\n*/\nclass NutzenkriteriumActionTest4 {"
	},
	{
		"original_code": "// NutzenkriteriumAction.java\n/**\r\n * Nutzenportfolio\r\n * Copyright (C) 2006 Kompetenzzentrum E-Business, Simon Bergamin\r\n *\r\n * This program is free software; you can redistribute it and/or\r\n * modify it under the terms of the GNU General Public License\r\n * as published by the Free Software Foundation; either version 2\r\n * of the License, or (at your option) any later version.\r\n *\r\n * This program is distributed in the hope that it will be useful,\r\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n * GNU General Public License for more details.\r\n *\r\n * You should have received a copy of the GNU General Public License\r\n * along with this program; if not, write to the Free Software\r\n * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\r\n */\r\npackage ch.bfh.egov.nutzenportfolio.action;\r\n\r\nimport javax.servlet.http.HttpServletRequest;\r\nimport javax.servlet.http.HttpServletResponse;\r\nimport ch.bfh.egov.nutzenportfolio.Constants;\r\nimport ch.bfh.egov.nutzenportfolio.form.FragenForm;\r\nimport ch.bfh.egov.nutzenportfolio.service.auswahlfeld.AuswahlfeldService;\r\nimport ch.bfh.egov.nutzenportfolio.service.common.CommonService;\r\nimport ch.bfh.egov.nutzenportfolio.service.customizing.CustomizingService;\r\nimport ch.bfh.egov.nutzenportfolio.service.kategorie.KategorieService;\r\nimport ch.bfh.egov.nutzenportfolio.service.nutzenkriterium.NutzenkriteriumService;\r\nimport ch.bfh.egov.nutzenportfolio.tos.Nutzenkriterium;\r\nimport org.apache.commons.logging.Log;\r\nimport org.apache.commons.logging.LogFactory;\r\nimport org.apache.struts.action.ActionForm;\r\nimport org.apache.struts.action.ActionForward;\r\nimport org.apache.struts.action.ActionMapping;\r\nimport org.apache.struts.action.ActionMessage;\r\nimport org.apache.struts.action.ActionMessages;\r\nimport org.apache.struts.action.DynaActionForm;\r\nimport org.apache.struts.actions.DispatchAction;\r\n\r\npublic class NutzenkriteriumAction extends DispatchAction {\r\n\r\n    private NutzenkriteriumService service;\r\n\r\n    private CommonService cService;\r\n\r\n    private Log logger = LogFactory.getLog(this.getClass());\r\n\r\n    public NutzenkriteriumAction(NutzenkriteriumService service, AuswahlfeldService aService, CommonService cService, KategorieService kService, CustomizingService customizingService) {\r\n        super();\r\n        this.service = service;\r\n        this.cService = cService;\r\n        this.service.init(aService, cService, kService, customizingService);\r\n    }\r\n\r\n    public ActionForward list(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {\r\n        service.list(request);\r\n        return mapping.findForward(Constants.LIST);\r\n    }\r\n\r\n    public ActionForward prepare(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {\r\n        if (!service.populate(request)) {\r\n            ActionMessages errors = new ActionMessages();\r\n            errors.add(ActionMessages.GLOBAL_MESSAGE, new ActionMessage(\"errors.kategorien.not.set\"));\r\n            saveMessages(request, errors);\r\n            return mapping.findForward(Constants.KATEGORIEN);\r\n        }\r\n        return mapping.findForward(Constants.FORM);\r\n    }\r\n\r\n    public ActionForward edit(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {\r\n        DynaActionForm nForm = (DynaActionForm) form;\r\n        service.edit(request, nForm);\r\n        return mapping.findForward(Constants.FORM);\r\n    }\r\n\r\n    public ActionForward update(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {\r\n        DynaActionForm nForm = (DynaActionForm) form;\r\n        service.update(request, nForm);\r\n        service.list(request);\r\n        return mapping.findForward(Constants.LIST);\r\n    }\r\n\r\n    public ActionForward deletequestion(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {\r\n        DynaActionForm nForm = (DynaActionForm) form;\r\n        Nutzenkriterium n = service.getNutzenkriterium(request, nForm);\r\n        if (n == null) {\r\n            service.list(request);\r\n            return mapping.findForward(Constants.LIST);\r\n        }\r\n        ActionMessages messages = new ActionMessages();\r\n        service.deleteQuestion(request, n, messages);\r\n        saveMessages(request, messages);\r\n        return mapping.findForward(Constants.QUESTION);\r\n    }\r\n\r\n    public ActionForward delete(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {\r\n        DynaActionForm nForm = (DynaActionForm) form;\r\n        Nutzenkriterium n = service.getNutzenkriterium(request, nForm);\r\n        if (n == null) {\r\n            service.list(request);\r\n            return mapping.findForward(Constants.LIST);\r\n        }\r\n        // Lï¿½schen\r\n        service.delete(request, n);\r\n        service.list(request);\r\n        return mapping.findForward(Constants.LIST);\r\n    }\r\n\r\n    public ActionForward remove(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {\r\n        DynaActionForm nForm = (DynaActionForm) form;\r\n        service.remove(request, nForm);\r\n        service.populate(request);\r\n        return mapping.findForward(Constants.FORM);\r\n    }\r\n\r\n    public ActionForward set(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {\r\n        DynaActionForm nForm = (DynaActionForm) form;\r\n        service.set(request, nForm);\r\n        service.populate(request);\r\n        return mapping.findForward(Constants.FORM);\r\n    }\r\n\r\n    public ActionForward next(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {\r\n        service.populate(request);\r\n        if (service.next(request)) {\r\n            return mapping.findForward(Constants.NEXT);\r\n        }\r\n        return mapping.findForward(Constants.FORM);\r\n    }\r\n\r\n    public ActionForward populate(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {\r\n        FragenForm nForm = (FragenForm) form;\r\n        if (!service.populateFragen(request, nForm)) {\r\n            ActionMessages errors = new ActionMessages();\r\n            errors.add(ActionMessages.GLOBAL_MESSAGE, new ActionMessage(\"errors.nutzenkriterien.not.set\"));\r\n            saveMessages(request, errors);\r\n            return mapping.findForward(Constants.NUTZENKRITERIEN);\r\n        }\r\n        return mapping.findForward(Constants.FORM);\r\n    }\r\n\r\n    public ActionForward save(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {\r\n        FragenForm nForm = (FragenForm) form;\r\n        // validieren und speichern\r\n        ActionMessages errors = new ActionMessages();\r\n        if (service.saveFragen(request, nForm, errors)) {\r\n            return mapping.findForward(Constants.SUCCESS);\r\n        }\r\n        // Fehler bei der Validierung\r\n        saveErrors(request, errors);\r\n        service.populateFragen(request, nForm);\r\n        return mapping.findForward(Constants.FAILURE);\r\n    }\r\n\r\n    public ActionForward select(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {\r\n        // Vorselektieren anhand anzahl auswahlfelder\r\n        if (!service.populate(request)) {\r\n            ActionMessages errors = new ActionMessages();\r\n            errors.add(ActionMessages.GLOBAL_MESSAGE, new ActionMessage(\"errors.kategorien.not.set\"));\r\n            saveMessages(request, errors);\r\n            return mapping.findForward(Constants.KATEGORIEN);\r\n        }\r\n        service.preselect(request, mapping.getPath());\r\n        cService.isOperativerNutzen(request);\r\n        return mapping.findForward(Constants.FORM);\r\n    }\r\n\r\n    public ActionForward saveAbstufungen(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {\r\n        // Anzahl Abstufungen in die Session stellen\r\n        DynaActionForm aForm = (DynaActionForm) form;\r\n        Integer abstufung = (Integer) aForm.get(Constants.ABSTUFUNGEN);\r\n        logger.debug(\"Gewï¿½hlte Abstufung: \" + abstufung);\r\n        request.getSession().setAttribute(Constants.ABSTUFUNGEN, abstufung);\r\n        return mapping.findForward(Constants.NEXT);\r\n    }\r\n\r\n    public ActionForward saveGewichtungstyp(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {\r\n        // Gewichtugnstyp in die Session stellen\r\n        DynaActionForm aForm = (DynaActionForm) form;\r\n        Integer gewichtungstyp = (Integer) aForm.get(Constants.GEWICHTUNGSTYP);\r\n        logger.debug(\"Gewï¿½hlter Gewichtugnstyp: \" + gewichtungstyp);\r\n        request.getSession().setAttribute(Constants.GEWICHTUNGSTYP, gewichtungstyp);\r\n        // Operativer Nutzen -> Projektbetroffene\r\n        if (cService.isOperativerNutzen(request)) {\r\n            request.setAttribute(Constants.PROJEKTBETROFFENE, true);\r\n        }\r\n        if (service.direkteGewichtung(request)) {\r\n            return mapping.findForward(Constants.DIREKT);\r\n        }\r\n        return mapping.findForward(Constants.NEXT);\r\n    }\r\n\r\n    public ActionForward prepareDirekteGewichtung(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {\r\n        FragenForm fForm = (FragenForm) form;\r\n        service.populateDirekteGewichtung(request, fForm);\r\n        return mapping.findForward(Constants.FORM);\r\n    }\r\n\r\n    public ActionForward saveDirekteGewichtung(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {\r\n        FragenForm fForm = (FragenForm) form;\r\n        ActionMessages errors = new ActionMessages();\r\n        if (!service.saveDirekteGewichtung(request, fForm, errors)) {\r\n            saveMessages(request, errors);\r\n            service.populateDirekteGewichtung(request, fForm);\r\n            return mapping.findForward(Constants.FORM);\r\n        }\r\n        // Allfï¿½llige gewichtung ï¿½ber Fragebogen lï¿½schen\r\n        service.deleteFragebogenGewichtung(request);\r\n        if (cService.isOperativerNutzen(request)) {\r\n            if (!service.customizingComplete(request)) {\r\n                service.populateDirekteGewichtung(request, fForm);\r\n                return mapping.findForward(Constants.FORM);\r\n            }\r\n            return mapping.findForward(Constants.END);\r\n        }\r\n        return mapping.findForward(Constants.NEXT);\r\n    }\r\n\r\n    public ActionForward add(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {\r\n        DynaActionForm nForm = (DynaActionForm) form;\r\n        ActionMessages errors = new ActionMessages();\r\n        ActionMessages messages = new ActionMessages();\r\n        if (!service.add(request, nForm, errors, messages)) {\r\n            saveErrors(request, errors);\r\n            saveMessages(request, messages);\r\n        }\r\n        service.populate(request);\r\n        return mapping.findForward(Constants.FORM);\r\n    }\r\n}\r\n",
		"id": "EvoSuiteBenchmark/46_nutzenportfolio/src/main/java/ch/bfh/egov/nutzenportfolio/action/NutzenkriteriumActionTest5.java",
		"test_prompt": "// NutzenkriteriumActionTest5.java\npackage ch.bfh.egov.nutzenportfolio.action;\n\nimport javax.servlet.http.HttpServletRequest;\nimport javax.servlet.http.HttpServletResponse;\nimport ch.bfh.egov.nutzenportfolio.Constants;\nimport ch.bfh.egov.nutzenportfolio.form.FragenForm;\nimport ch.bfh.egov.nutzenportfolio.service.auswahlfeld.AuswahlfeldService;\nimport ch.bfh.egov.nutzenportfolio.service.common.CommonService;\nimport ch.bfh.egov.nutzenportfolio.service.customizing.CustomizingService;\nimport ch.bfh.egov.nutzenportfolio.service.kategorie.KategorieService;\nimport ch.bfh.egov.nutzenportfolio.service.nutzenkriterium.NutzenkriteriumService;\nimport ch.bfh.egov.nutzenportfolio.tos.Nutzenkriterium;\nimport org.apache.commons.logging.Log;\nimport org.apache.commons.logging.LogFactory;\nimport org.apache.struts.action.ActionForm;\nimport org.apache.struts.action.ActionForward;\nimport org.apache.struts.action.ActionMapping;\nimport org.apache.struts.action.ActionMessage;\nimport org.apache.struts.action.ActionMessages;\nimport org.apache.struts.action.DynaActionForm;\nimport org.apache.struts.actions.DispatchAction;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link NutzenkriteriumAction}.\n* It contains ten unit test cases for the {@link NutzenkriteriumAction#delete(ActionMapping, ActionForm, HttpServletRequest, HttpServletResponse)} method.\n*/\nclass NutzenkriteriumActionTest5 {"
	},
	{
		"original_code": "// NutzenkriteriumAction.java\n/**\r\n * Nutzenportfolio\r\n * Copyright (C) 2006 Kompetenzzentrum E-Business, Simon Bergamin\r\n *\r\n * This program is free software; you can redistribute it and/or\r\n * modify it under the terms of the GNU General Public License\r\n * as published by the Free Software Foundation; either version 2\r\n * of the License, or (at your option) any later version.\r\n *\r\n * This program is distributed in the hope that it will be useful,\r\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n * GNU General Public License for more details.\r\n *\r\n * You should have received a copy of the GNU General Public License\r\n * along with this program; if not, write to the Free Software\r\n * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\r\n */\r\npackage ch.bfh.egov.nutzenportfolio.action;\r\n\r\nimport javax.servlet.http.HttpServletRequest;\r\nimport javax.servlet.http.HttpServletResponse;\r\nimport ch.bfh.egov.nutzenportfolio.Constants;\r\nimport ch.bfh.egov.nutzenportfolio.form.FragenForm;\r\nimport ch.bfh.egov.nutzenportfolio.service.auswahlfeld.AuswahlfeldService;\r\nimport ch.bfh.egov.nutzenportfolio.service.common.CommonService;\r\nimport ch.bfh.egov.nutzenportfolio.service.customizing.CustomizingService;\r\nimport ch.bfh.egov.nutzenportfolio.service.kategorie.KategorieService;\r\nimport ch.bfh.egov.nutzenportfolio.service.nutzenkriterium.NutzenkriteriumService;\r\nimport ch.bfh.egov.nutzenportfolio.tos.Nutzenkriterium;\r\nimport org.apache.commons.logging.Log;\r\nimport org.apache.commons.logging.LogFactory;\r\nimport org.apache.struts.action.ActionForm;\r\nimport org.apache.struts.action.ActionForward;\r\nimport org.apache.struts.action.ActionMapping;\r\nimport org.apache.struts.action.ActionMessage;\r\nimport org.apache.struts.action.ActionMessages;\r\nimport org.apache.struts.action.DynaActionForm;\r\nimport org.apache.struts.actions.DispatchAction;\r\n\r\npublic class NutzenkriteriumAction extends DispatchAction {\r\n\r\n    private NutzenkriteriumService service;\r\n\r\n    private CommonService cService;\r\n\r\n    private Log logger = LogFactory.getLog(this.getClass());\r\n\r\n    public NutzenkriteriumAction(NutzenkriteriumService service, AuswahlfeldService aService, CommonService cService, KategorieService kService, CustomizingService customizingService) {\r\n        super();\r\n        this.service = service;\r\n        this.cService = cService;\r\n        this.service.init(aService, cService, kService, customizingService);\r\n    }\r\n\r\n    public ActionForward list(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {\r\n        service.list(request);\r\n        return mapping.findForward(Constants.LIST);\r\n    }\r\n\r\n    public ActionForward prepare(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {\r\n        if (!service.populate(request)) {\r\n            ActionMessages errors = new ActionMessages();\r\n            errors.add(ActionMessages.GLOBAL_MESSAGE, new ActionMessage(\"errors.kategorien.not.set\"));\r\n            saveMessages(request, errors);\r\n            return mapping.findForward(Constants.KATEGORIEN);\r\n        }\r\n        return mapping.findForward(Constants.FORM);\r\n    }\r\n\r\n    public ActionForward edit(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {\r\n        DynaActionForm nForm = (DynaActionForm) form;\r\n        service.edit(request, nForm);\r\n        return mapping.findForward(Constants.FORM);\r\n    }\r\n\r\n    public ActionForward update(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {\r\n        DynaActionForm nForm = (DynaActionForm) form;\r\n        service.update(request, nForm);\r\n        service.list(request);\r\n        return mapping.findForward(Constants.LIST);\r\n    }\r\n\r\n    public ActionForward deletequestion(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {\r\n        DynaActionForm nForm = (DynaActionForm) form;\r\n        Nutzenkriterium n = service.getNutzenkriterium(request, nForm);\r\n        if (n == null) {\r\n            service.list(request);\r\n            return mapping.findForward(Constants.LIST);\r\n        }\r\n        ActionMessages messages = new ActionMessages();\r\n        service.deleteQuestion(request, n, messages);\r\n        saveMessages(request, messages);\r\n        return mapping.findForward(Constants.QUESTION);\r\n    }\r\n\r\n    public ActionForward delete(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {\r\n        DynaActionForm nForm = (DynaActionForm) form;\r\n        Nutzenkriterium n = service.getNutzenkriterium(request, nForm);\r\n        if (n == null) {\r\n            service.list(request);\r\n            return mapping.findForward(Constants.LIST);\r\n        }\r\n        // Lï¿½schen\r\n        service.delete(request, n);\r\n        service.list(request);\r\n        return mapping.findForward(Constants.LIST);\r\n    }\r\n\r\n    public ActionForward remove(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {\r\n        DynaActionForm nForm = (DynaActionForm) form;\r\n        service.remove(request, nForm);\r\n        service.populate(request);\r\n        return mapping.findForward(Constants.FORM);\r\n    }\r\n\r\n    public ActionForward set(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {\r\n        DynaActionForm nForm = (DynaActionForm) form;\r\n        service.set(request, nForm);\r\n        service.populate(request);\r\n        return mapping.findForward(Constants.FORM);\r\n    }\r\n\r\n    public ActionForward next(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {\r\n        service.populate(request);\r\n        if (service.next(request)) {\r\n            return mapping.findForward(Constants.NEXT);\r\n        }\r\n        return mapping.findForward(Constants.FORM);\r\n    }\r\n\r\n    public ActionForward populate(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {\r\n        FragenForm nForm = (FragenForm) form;\r\n        if (!service.populateFragen(request, nForm)) {\r\n            ActionMessages errors = new ActionMessages();\r\n            errors.add(ActionMessages.GLOBAL_MESSAGE, new ActionMessage(\"errors.nutzenkriterien.not.set\"));\r\n            saveMessages(request, errors);\r\n            return mapping.findForward(Constants.NUTZENKRITERIEN);\r\n        }\r\n        return mapping.findForward(Constants.FORM);\r\n    }\r\n\r\n    public ActionForward save(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {\r\n        FragenForm nForm = (FragenForm) form;\r\n        // validieren und speichern\r\n        ActionMessages errors = new ActionMessages();\r\n        if (service.saveFragen(request, nForm, errors)) {\r\n            return mapping.findForward(Constants.SUCCESS);\r\n        }\r\n        // Fehler bei der Validierung\r\n        saveErrors(request, errors);\r\n        service.populateFragen(request, nForm);\r\n        return mapping.findForward(Constants.FAILURE);\r\n    }\r\n\r\n    public ActionForward select(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {\r\n        // Vorselektieren anhand anzahl auswahlfelder\r\n        if (!service.populate(request)) {\r\n            ActionMessages errors = new ActionMessages();\r\n            errors.add(ActionMessages.GLOBAL_MESSAGE, new ActionMessage(\"errors.kategorien.not.set\"));\r\n            saveMessages(request, errors);\r\n            return mapping.findForward(Constants.KATEGORIEN);\r\n        }\r\n        service.preselect(request, mapping.getPath());\r\n        cService.isOperativerNutzen(request);\r\n        return mapping.findForward(Constants.FORM);\r\n    }\r\n\r\n    public ActionForward saveAbstufungen(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {\r\n        // Anzahl Abstufungen in die Session stellen\r\n        DynaActionForm aForm = (DynaActionForm) form;\r\n        Integer abstufung = (Integer) aForm.get(Constants.ABSTUFUNGEN);\r\n        logger.debug(\"Gewï¿½hlte Abstufung: \" + abstufung);\r\n        request.getSession().setAttribute(Constants.ABSTUFUNGEN, abstufung);\r\n        return mapping.findForward(Constants.NEXT);\r\n    }\r\n\r\n    public ActionForward saveGewichtungstyp(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {\r\n        // Gewichtugnstyp in die Session stellen\r\n        DynaActionForm aForm = (DynaActionForm) form;\r\n        Integer gewichtungstyp = (Integer) aForm.get(Constants.GEWICHTUNGSTYP);\r\n        logger.debug(\"Gewï¿½hlter Gewichtugnstyp: \" + gewichtungstyp);\r\n        request.getSession().setAttribute(Constants.GEWICHTUNGSTYP, gewichtungstyp);\r\n        // Operativer Nutzen -> Projektbetroffene\r\n        if (cService.isOperativerNutzen(request)) {\r\n            request.setAttribute(Constants.PROJEKTBETROFFENE, true);\r\n        }\r\n        if (service.direkteGewichtung(request)) {\r\n            return mapping.findForward(Constants.DIREKT);\r\n        }\r\n        return mapping.findForward(Constants.NEXT);\r\n    }\r\n\r\n    public ActionForward prepareDirekteGewichtung(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {\r\n        FragenForm fForm = (FragenForm) form;\r\n        service.populateDirekteGewichtung(request, fForm);\r\n        return mapping.findForward(Constants.FORM);\r\n    }\r\n\r\n    public ActionForward saveDirekteGewichtung(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {\r\n        FragenForm fForm = (FragenForm) form;\r\n        ActionMessages errors = new ActionMessages();\r\n        if (!service.saveDirekteGewichtung(request, fForm, errors)) {\r\n            saveMessages(request, errors);\r\n            service.populateDirekteGewichtung(request, fForm);\r\n            return mapping.findForward(Constants.FORM);\r\n        }\r\n        // Allfï¿½llige gewichtung ï¿½ber Fragebogen lï¿½schen\r\n        service.deleteFragebogenGewichtung(request);\r\n        if (cService.isOperativerNutzen(request)) {\r\n            if (!service.customizingComplete(request)) {\r\n                service.populateDirekteGewichtung(request, fForm);\r\n                return mapping.findForward(Constants.FORM);\r\n            }\r\n            return mapping.findForward(Constants.END);\r\n        }\r\n        return mapping.findForward(Constants.NEXT);\r\n    }\r\n\r\n    public ActionForward add(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {\r\n        DynaActionForm nForm = (DynaActionForm) form;\r\n        ActionMessages errors = new ActionMessages();\r\n        ActionMessages messages = new ActionMessages();\r\n        if (!service.add(request, nForm, errors, messages)) {\r\n            saveErrors(request, errors);\r\n            saveMessages(request, messages);\r\n        }\r\n        service.populate(request);\r\n        return mapping.findForward(Constants.FORM);\r\n    }\r\n}\r\n",
		"id": "EvoSuiteBenchmark/46_nutzenportfolio/src/main/java/ch/bfh/egov/nutzenportfolio/action/NutzenkriteriumActionTest6.java",
		"test_prompt": "// NutzenkriteriumActionTest6.java\npackage ch.bfh.egov.nutzenportfolio.action;\n\nimport javax.servlet.http.HttpServletRequest;\nimport javax.servlet.http.HttpServletResponse;\nimport ch.bfh.egov.nutzenportfolio.Constants;\nimport ch.bfh.egov.nutzenportfolio.form.FragenForm;\nimport ch.bfh.egov.nutzenportfolio.service.auswahlfeld.AuswahlfeldService;\nimport ch.bfh.egov.nutzenportfolio.service.common.CommonService;\nimport ch.bfh.egov.nutzenportfolio.service.customizing.CustomizingService;\nimport ch.bfh.egov.nutzenportfolio.service.kategorie.KategorieService;\nimport ch.bfh.egov.nutzenportfolio.service.nutzenkriterium.NutzenkriteriumService;\nimport ch.bfh.egov.nutzenportfolio.tos.Nutzenkriterium;\nimport org.apache.commons.logging.Log;\nimport org.apache.commons.logging.LogFactory;\nimport org.apache.struts.action.ActionForm;\nimport org.apache.struts.action.ActionForward;\nimport org.apache.struts.action.ActionMapping;\nimport org.apache.struts.action.ActionMessage;\nimport org.apache.struts.action.ActionMessages;\nimport org.apache.struts.action.DynaActionForm;\nimport org.apache.struts.actions.DispatchAction;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link NutzenkriteriumAction}.\n* It contains ten unit test cases for the {@link NutzenkriteriumAction#remove(ActionMapping, ActionForm, HttpServletRequest, HttpServletResponse)} method.\n*/\nclass NutzenkriteriumActionTest6 {"
	},
	{
		"original_code": "// NutzenkriteriumAction.java\n/**\r\n * Nutzenportfolio\r\n * Copyright (C) 2006 Kompetenzzentrum E-Business, Simon Bergamin\r\n *\r\n * This program is free software; you can redistribute it and/or\r\n * modify it under the terms of the GNU General Public License\r\n * as published by the Free Software Foundation; either version 2\r\n * of the License, or (at your option) any later version.\r\n *\r\n * This program is distributed in the hope that it will be useful,\r\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n * GNU General Public License for more details.\r\n *\r\n * You should have received a copy of the GNU General Public License\r\n * along with this program; if not, write to the Free Software\r\n * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\r\n */\r\npackage ch.bfh.egov.nutzenportfolio.action;\r\n\r\nimport javax.servlet.http.HttpServletRequest;\r\nimport javax.servlet.http.HttpServletResponse;\r\nimport ch.bfh.egov.nutzenportfolio.Constants;\r\nimport ch.bfh.egov.nutzenportfolio.form.FragenForm;\r\nimport ch.bfh.egov.nutzenportfolio.service.auswahlfeld.AuswahlfeldService;\r\nimport ch.bfh.egov.nutzenportfolio.service.common.CommonService;\r\nimport ch.bfh.egov.nutzenportfolio.service.customizing.CustomizingService;\r\nimport ch.bfh.egov.nutzenportfolio.service.kategorie.KategorieService;\r\nimport ch.bfh.egov.nutzenportfolio.service.nutzenkriterium.NutzenkriteriumService;\r\nimport ch.bfh.egov.nutzenportfolio.tos.Nutzenkriterium;\r\nimport org.apache.commons.logging.Log;\r\nimport org.apache.commons.logging.LogFactory;\r\nimport org.apache.struts.action.ActionForm;\r\nimport org.apache.struts.action.ActionForward;\r\nimport org.apache.struts.action.ActionMapping;\r\nimport org.apache.struts.action.ActionMessage;\r\nimport org.apache.struts.action.ActionMessages;\r\nimport org.apache.struts.action.DynaActionForm;\r\nimport org.apache.struts.actions.DispatchAction;\r\n\r\npublic class NutzenkriteriumAction extends DispatchAction {\r\n\r\n    private NutzenkriteriumService service;\r\n\r\n    private CommonService cService;\r\n\r\n    private Log logger = LogFactory.getLog(this.getClass());\r\n\r\n    public NutzenkriteriumAction(NutzenkriteriumService service, AuswahlfeldService aService, CommonService cService, KategorieService kService, CustomizingService customizingService) {\r\n        super();\r\n        this.service = service;\r\n        this.cService = cService;\r\n        this.service.init(aService, cService, kService, customizingService);\r\n    }\r\n\r\n    public ActionForward list(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {\r\n        service.list(request);\r\n        return mapping.findForward(Constants.LIST);\r\n    }\r\n\r\n    public ActionForward prepare(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {\r\n        if (!service.populate(request)) {\r\n            ActionMessages errors = new ActionMessages();\r\n            errors.add(ActionMessages.GLOBAL_MESSAGE, new ActionMessage(\"errors.kategorien.not.set\"));\r\n            saveMessages(request, errors);\r\n            return mapping.findForward(Constants.KATEGORIEN);\r\n        }\r\n        return mapping.findForward(Constants.FORM);\r\n    }\r\n\r\n    public ActionForward edit(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {\r\n        DynaActionForm nForm = (DynaActionForm) form;\r\n        service.edit(request, nForm);\r\n        return mapping.findForward(Constants.FORM);\r\n    }\r\n\r\n    public ActionForward update(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {\r\n        DynaActionForm nForm = (DynaActionForm) form;\r\n        service.update(request, nForm);\r\n        service.list(request);\r\n        return mapping.findForward(Constants.LIST);\r\n    }\r\n\r\n    public ActionForward deletequestion(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {\r\n        DynaActionForm nForm = (DynaActionForm) form;\r\n        Nutzenkriterium n = service.getNutzenkriterium(request, nForm);\r\n        if (n == null) {\r\n            service.list(request);\r\n            return mapping.findForward(Constants.LIST);\r\n        }\r\n        ActionMessages messages = new ActionMessages();\r\n        service.deleteQuestion(request, n, messages);\r\n        saveMessages(request, messages);\r\n        return mapping.findForward(Constants.QUESTION);\r\n    }\r\n\r\n    public ActionForward delete(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {\r\n        DynaActionForm nForm = (DynaActionForm) form;\r\n        Nutzenkriterium n = service.getNutzenkriterium(request, nForm);\r\n        if (n == null) {\r\n            service.list(request);\r\n            return mapping.findForward(Constants.LIST);\r\n        }\r\n        // Lï¿½schen\r\n        service.delete(request, n);\r\n        service.list(request);\r\n        return mapping.findForward(Constants.LIST);\r\n    }\r\n\r\n    public ActionForward remove(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {\r\n        DynaActionForm nForm = (DynaActionForm) form;\r\n        service.remove(request, nForm);\r\n        service.populate(request);\r\n        return mapping.findForward(Constants.FORM);\r\n    }\r\n\r\n    public ActionForward set(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {\r\n        DynaActionForm nForm = (DynaActionForm) form;\r\n        service.set(request, nForm);\r\n        service.populate(request);\r\n        return mapping.findForward(Constants.FORM);\r\n    }\r\n\r\n    public ActionForward next(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {\r\n        service.populate(request);\r\n        if (service.next(request)) {\r\n            return mapping.findForward(Constants.NEXT);\r\n        }\r\n        return mapping.findForward(Constants.FORM);\r\n    }\r\n\r\n    public ActionForward populate(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {\r\n        FragenForm nForm = (FragenForm) form;\r\n        if (!service.populateFragen(request, nForm)) {\r\n            ActionMessages errors = new ActionMessages();\r\n            errors.add(ActionMessages.GLOBAL_MESSAGE, new ActionMessage(\"errors.nutzenkriterien.not.set\"));\r\n            saveMessages(request, errors);\r\n            return mapping.findForward(Constants.NUTZENKRITERIEN);\r\n        }\r\n        return mapping.findForward(Constants.FORM);\r\n    }\r\n\r\n    public ActionForward save(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {\r\n        FragenForm nForm = (FragenForm) form;\r\n        // validieren und speichern\r\n        ActionMessages errors = new ActionMessages();\r\n        if (service.saveFragen(request, nForm, errors)) {\r\n            return mapping.findForward(Constants.SUCCESS);\r\n        }\r\n        // Fehler bei der Validierung\r\n        saveErrors(request, errors);\r\n        service.populateFragen(request, nForm);\r\n        return mapping.findForward(Constants.FAILURE);\r\n    }\r\n\r\n    public ActionForward select(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {\r\n        // Vorselektieren anhand anzahl auswahlfelder\r\n        if (!service.populate(request)) {\r\n            ActionMessages errors = new ActionMessages();\r\n            errors.add(ActionMessages.GLOBAL_MESSAGE, new ActionMessage(\"errors.kategorien.not.set\"));\r\n            saveMessages(request, errors);\r\n            return mapping.findForward(Constants.KATEGORIEN);\r\n        }\r\n        service.preselect(request, mapping.getPath());\r\n        cService.isOperativerNutzen(request);\r\n        return mapping.findForward(Constants.FORM);\r\n    }\r\n\r\n    public ActionForward saveAbstufungen(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {\r\n        // Anzahl Abstufungen in die Session stellen\r\n        DynaActionForm aForm = (DynaActionForm) form;\r\n        Integer abstufung = (Integer) aForm.get(Constants.ABSTUFUNGEN);\r\n        logger.debug(\"Gewï¿½hlte Abstufung: \" + abstufung);\r\n        request.getSession().setAttribute(Constants.ABSTUFUNGEN, abstufung);\r\n        return mapping.findForward(Constants.NEXT);\r\n    }\r\n\r\n    public ActionForward saveGewichtungstyp(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {\r\n        // Gewichtugnstyp in die Session stellen\r\n        DynaActionForm aForm = (DynaActionForm) form;\r\n        Integer gewichtungstyp = (Integer) aForm.get(Constants.GEWICHTUNGSTYP);\r\n        logger.debug(\"Gewï¿½hlter Gewichtugnstyp: \" + gewichtungstyp);\r\n        request.getSession().setAttribute(Constants.GEWICHTUNGSTYP, gewichtungstyp);\r\n        // Operativer Nutzen -> Projektbetroffene\r\n        if (cService.isOperativerNutzen(request)) {\r\n            request.setAttribute(Constants.PROJEKTBETROFFENE, true);\r\n        }\r\n        if (service.direkteGewichtung(request)) {\r\n            return mapping.findForward(Constants.DIREKT);\r\n        }\r\n        return mapping.findForward(Constants.NEXT);\r\n    }\r\n\r\n    public ActionForward prepareDirekteGewichtung(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {\r\n        FragenForm fForm = (FragenForm) form;\r\n        service.populateDirekteGewichtung(request, fForm);\r\n        return mapping.findForward(Constants.FORM);\r\n    }\r\n\r\n    public ActionForward saveDirekteGewichtung(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {\r\n        FragenForm fForm = (FragenForm) form;\r\n        ActionMessages errors = new ActionMessages();\r\n        if (!service.saveDirekteGewichtung(request, fForm, errors)) {\r\n            saveMessages(request, errors);\r\n            service.populateDirekteGewichtung(request, fForm);\r\n            return mapping.findForward(Constants.FORM);\r\n        }\r\n        // Allfï¿½llige gewichtung ï¿½ber Fragebogen lï¿½schen\r\n        service.deleteFragebogenGewichtung(request);\r\n        if (cService.isOperativerNutzen(request)) {\r\n            if (!service.customizingComplete(request)) {\r\n                service.populateDirekteGewichtung(request, fForm);\r\n                return mapping.findForward(Constants.FORM);\r\n            }\r\n            return mapping.findForward(Constants.END);\r\n        }\r\n        return mapping.findForward(Constants.NEXT);\r\n    }\r\n\r\n    public ActionForward add(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {\r\n        DynaActionForm nForm = (DynaActionForm) form;\r\n        ActionMessages errors = new ActionMessages();\r\n        ActionMessages messages = new ActionMessages();\r\n        if (!service.add(request, nForm, errors, messages)) {\r\n            saveErrors(request, errors);\r\n            saveMessages(request, messages);\r\n        }\r\n        service.populate(request);\r\n        return mapping.findForward(Constants.FORM);\r\n    }\r\n}\r\n",
		"id": "EvoSuiteBenchmark/46_nutzenportfolio/src/main/java/ch/bfh/egov/nutzenportfolio/action/NutzenkriteriumActionTest7.java",
		"test_prompt": "// NutzenkriteriumActionTest7.java\npackage ch.bfh.egov.nutzenportfolio.action;\n\nimport javax.servlet.http.HttpServletRequest;\nimport javax.servlet.http.HttpServletResponse;\nimport ch.bfh.egov.nutzenportfolio.Constants;\nimport ch.bfh.egov.nutzenportfolio.form.FragenForm;\nimport ch.bfh.egov.nutzenportfolio.service.auswahlfeld.AuswahlfeldService;\nimport ch.bfh.egov.nutzenportfolio.service.common.CommonService;\nimport ch.bfh.egov.nutzenportfolio.service.customizing.CustomizingService;\nimport ch.bfh.egov.nutzenportfolio.service.kategorie.KategorieService;\nimport ch.bfh.egov.nutzenportfolio.service.nutzenkriterium.NutzenkriteriumService;\nimport ch.bfh.egov.nutzenportfolio.tos.Nutzenkriterium;\nimport org.apache.commons.logging.Log;\nimport org.apache.commons.logging.LogFactory;\nimport org.apache.struts.action.ActionForm;\nimport org.apache.struts.action.ActionForward;\nimport org.apache.struts.action.ActionMapping;\nimport org.apache.struts.action.ActionMessage;\nimport org.apache.struts.action.ActionMessages;\nimport org.apache.struts.action.DynaActionForm;\nimport org.apache.struts.actions.DispatchAction;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link NutzenkriteriumAction}.\n* It contains ten unit test cases for the {@link NutzenkriteriumAction#next(ActionMapping, ActionForm, HttpServletRequest, HttpServletResponse)} method.\n*/\nclass NutzenkriteriumActionTest7 {"
	},
	{
		"original_code": "// NutzenkriteriumAction.java\n/**\r\n * Nutzenportfolio\r\n * Copyright (C) 2006 Kompetenzzentrum E-Business, Simon Bergamin\r\n *\r\n * This program is free software; you can redistribute it and/or\r\n * modify it under the terms of the GNU General Public License\r\n * as published by the Free Software Foundation; either version 2\r\n * of the License, or (at your option) any later version.\r\n *\r\n * This program is distributed in the hope that it will be useful,\r\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n * GNU General Public License for more details.\r\n *\r\n * You should have received a copy of the GNU General Public License\r\n * along with this program; if not, write to the Free Software\r\n * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\r\n */\r\npackage ch.bfh.egov.nutzenportfolio.action;\r\n\r\nimport javax.servlet.http.HttpServletRequest;\r\nimport javax.servlet.http.HttpServletResponse;\r\nimport ch.bfh.egov.nutzenportfolio.Constants;\r\nimport ch.bfh.egov.nutzenportfolio.form.FragenForm;\r\nimport ch.bfh.egov.nutzenportfolio.service.auswahlfeld.AuswahlfeldService;\r\nimport ch.bfh.egov.nutzenportfolio.service.common.CommonService;\r\nimport ch.bfh.egov.nutzenportfolio.service.customizing.CustomizingService;\r\nimport ch.bfh.egov.nutzenportfolio.service.kategorie.KategorieService;\r\nimport ch.bfh.egov.nutzenportfolio.service.nutzenkriterium.NutzenkriteriumService;\r\nimport ch.bfh.egov.nutzenportfolio.tos.Nutzenkriterium;\r\nimport org.apache.commons.logging.Log;\r\nimport org.apache.commons.logging.LogFactory;\r\nimport org.apache.struts.action.ActionForm;\r\nimport org.apache.struts.action.ActionForward;\r\nimport org.apache.struts.action.ActionMapping;\r\nimport org.apache.struts.action.ActionMessage;\r\nimport org.apache.struts.action.ActionMessages;\r\nimport org.apache.struts.action.DynaActionForm;\r\nimport org.apache.struts.actions.DispatchAction;\r\n\r\npublic class NutzenkriteriumAction extends DispatchAction {\r\n\r\n    private NutzenkriteriumService service;\r\n\r\n    private CommonService cService;\r\n\r\n    private Log logger = LogFactory.getLog(this.getClass());\r\n\r\n    public NutzenkriteriumAction(NutzenkriteriumService service, AuswahlfeldService aService, CommonService cService, KategorieService kService, CustomizingService customizingService) {\r\n        super();\r\n        this.service = service;\r\n        this.cService = cService;\r\n        this.service.init(aService, cService, kService, customizingService);\r\n    }\r\n\r\n    public ActionForward list(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {\r\n        service.list(request);\r\n        return mapping.findForward(Constants.LIST);\r\n    }\r\n\r\n    public ActionForward prepare(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {\r\n        if (!service.populate(request)) {\r\n            ActionMessages errors = new ActionMessages();\r\n            errors.add(ActionMessages.GLOBAL_MESSAGE, new ActionMessage(\"errors.kategorien.not.set\"));\r\n            saveMessages(request, errors);\r\n            return mapping.findForward(Constants.KATEGORIEN);\r\n        }\r\n        return mapping.findForward(Constants.FORM);\r\n    }\r\n\r\n    public ActionForward edit(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {\r\n        DynaActionForm nForm = (DynaActionForm) form;\r\n        service.edit(request, nForm);\r\n        return mapping.findForward(Constants.FORM);\r\n    }\r\n\r\n    public ActionForward update(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {\r\n        DynaActionForm nForm = (DynaActionForm) form;\r\n        service.update(request, nForm);\r\n        service.list(request);\r\n        return mapping.findForward(Constants.LIST);\r\n    }\r\n\r\n    public ActionForward deletequestion(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {\r\n        DynaActionForm nForm = (DynaActionForm) form;\r\n        Nutzenkriterium n = service.getNutzenkriterium(request, nForm);\r\n        if (n == null) {\r\n            service.list(request);\r\n            return mapping.findForward(Constants.LIST);\r\n        }\r\n        ActionMessages messages = new ActionMessages();\r\n        service.deleteQuestion(request, n, messages);\r\n        saveMessages(request, messages);\r\n        return mapping.findForward(Constants.QUESTION);\r\n    }\r\n\r\n    public ActionForward delete(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {\r\n        DynaActionForm nForm = (DynaActionForm) form;\r\n        Nutzenkriterium n = service.getNutzenkriterium(request, nForm);\r\n        if (n == null) {\r\n            service.list(request);\r\n            return mapping.findForward(Constants.LIST);\r\n        }\r\n        // Lï¿½schen\r\n        service.delete(request, n);\r\n        service.list(request);\r\n        return mapping.findForward(Constants.LIST);\r\n    }\r\n\r\n    public ActionForward remove(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {\r\n        DynaActionForm nForm = (DynaActionForm) form;\r\n        service.remove(request, nForm);\r\n        service.populate(request);\r\n        return mapping.findForward(Constants.FORM);\r\n    }\r\n\r\n    public ActionForward set(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {\r\n        DynaActionForm nForm = (DynaActionForm) form;\r\n        service.set(request, nForm);\r\n        service.populate(request);\r\n        return mapping.findForward(Constants.FORM);\r\n    }\r\n\r\n    public ActionForward next(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {\r\n        service.populate(request);\r\n        if (service.next(request)) {\r\n            return mapping.findForward(Constants.NEXT);\r\n        }\r\n        return mapping.findForward(Constants.FORM);\r\n    }\r\n\r\n    public ActionForward populate(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {\r\n        FragenForm nForm = (FragenForm) form;\r\n        if (!service.populateFragen(request, nForm)) {\r\n            ActionMessages errors = new ActionMessages();\r\n            errors.add(ActionMessages.GLOBAL_MESSAGE, new ActionMessage(\"errors.nutzenkriterien.not.set\"));\r\n            saveMessages(request, errors);\r\n            return mapping.findForward(Constants.NUTZENKRITERIEN);\r\n        }\r\n        return mapping.findForward(Constants.FORM);\r\n    }\r\n\r\n    public ActionForward save(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {\r\n        FragenForm nForm = (FragenForm) form;\r\n        // validieren und speichern\r\n        ActionMessages errors = new ActionMessages();\r\n        if (service.saveFragen(request, nForm, errors)) {\r\n            return mapping.findForward(Constants.SUCCESS);\r\n        }\r\n        // Fehler bei der Validierung\r\n        saveErrors(request, errors);\r\n        service.populateFragen(request, nForm);\r\n        return mapping.findForward(Constants.FAILURE);\r\n    }\r\n\r\n    public ActionForward select(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {\r\n        // Vorselektieren anhand anzahl auswahlfelder\r\n        if (!service.populate(request)) {\r\n            ActionMessages errors = new ActionMessages();\r\n            errors.add(ActionMessages.GLOBAL_MESSAGE, new ActionMessage(\"errors.kategorien.not.set\"));\r\n            saveMessages(request, errors);\r\n            return mapping.findForward(Constants.KATEGORIEN);\r\n        }\r\n        service.preselect(request, mapping.getPath());\r\n        cService.isOperativerNutzen(request);\r\n        return mapping.findForward(Constants.FORM);\r\n    }\r\n\r\n    public ActionForward saveAbstufungen(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {\r\n        // Anzahl Abstufungen in die Session stellen\r\n        DynaActionForm aForm = (DynaActionForm) form;\r\n        Integer abstufung = (Integer) aForm.get(Constants.ABSTUFUNGEN);\r\n        logger.debug(\"Gewï¿½hlte Abstufung: \" + abstufung);\r\n        request.getSession().setAttribute(Constants.ABSTUFUNGEN, abstufung);\r\n        return mapping.findForward(Constants.NEXT);\r\n    }\r\n\r\n    public ActionForward saveGewichtungstyp(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {\r\n        // Gewichtugnstyp in die Session stellen\r\n        DynaActionForm aForm = (DynaActionForm) form;\r\n        Integer gewichtungstyp = (Integer) aForm.get(Constants.GEWICHTUNGSTYP);\r\n        logger.debug(\"Gewï¿½hlter Gewichtugnstyp: \" + gewichtungstyp);\r\n        request.getSession().setAttribute(Constants.GEWICHTUNGSTYP, gewichtungstyp);\r\n        // Operativer Nutzen -> Projektbetroffene\r\n        if (cService.isOperativerNutzen(request)) {\r\n            request.setAttribute(Constants.PROJEKTBETROFFENE, true);\r\n        }\r\n        if (service.direkteGewichtung(request)) {\r\n            return mapping.findForward(Constants.DIREKT);\r\n        }\r\n        return mapping.findForward(Constants.NEXT);\r\n    }\r\n\r\n    public ActionForward prepareDirekteGewichtung(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {\r\n        FragenForm fForm = (FragenForm) form;\r\n        service.populateDirekteGewichtung(request, fForm);\r\n        return mapping.findForward(Constants.FORM);\r\n    }\r\n\r\n    public ActionForward saveDirekteGewichtung(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {\r\n        FragenForm fForm = (FragenForm) form;\r\n        ActionMessages errors = new ActionMessages();\r\n        if (!service.saveDirekteGewichtung(request, fForm, errors)) {\r\n            saveMessages(request, errors);\r\n            service.populateDirekteGewichtung(request, fForm);\r\n            return mapping.findForward(Constants.FORM);\r\n        }\r\n        // Allfï¿½llige gewichtung ï¿½ber Fragebogen lï¿½schen\r\n        service.deleteFragebogenGewichtung(request);\r\n        if (cService.isOperativerNutzen(request)) {\r\n            if (!service.customizingComplete(request)) {\r\n                service.populateDirekteGewichtung(request, fForm);\r\n                return mapping.findForward(Constants.FORM);\r\n            }\r\n            return mapping.findForward(Constants.END);\r\n        }\r\n        return mapping.findForward(Constants.NEXT);\r\n    }\r\n\r\n    public ActionForward add(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {\r\n        DynaActionForm nForm = (DynaActionForm) form;\r\n        ActionMessages errors = new ActionMessages();\r\n        ActionMessages messages = new ActionMessages();\r\n        if (!service.add(request, nForm, errors, messages)) {\r\n            saveErrors(request, errors);\r\n            saveMessages(request, messages);\r\n        }\r\n        service.populate(request);\r\n        return mapping.findForward(Constants.FORM);\r\n    }\r\n}\r\n",
		"id": "EvoSuiteBenchmark/46_nutzenportfolio/src/main/java/ch/bfh/egov/nutzenportfolio/action/NutzenkriteriumActionTest8.java",
		"test_prompt": "// NutzenkriteriumActionTest8.java\npackage ch.bfh.egov.nutzenportfolio.action;\n\nimport javax.servlet.http.HttpServletRequest;\nimport javax.servlet.http.HttpServletResponse;\nimport ch.bfh.egov.nutzenportfolio.Constants;\nimport ch.bfh.egov.nutzenportfolio.form.FragenForm;\nimport ch.bfh.egov.nutzenportfolio.service.auswahlfeld.AuswahlfeldService;\nimport ch.bfh.egov.nutzenportfolio.service.common.CommonService;\nimport ch.bfh.egov.nutzenportfolio.service.customizing.CustomizingService;\nimport ch.bfh.egov.nutzenportfolio.service.kategorie.KategorieService;\nimport ch.bfh.egov.nutzenportfolio.service.nutzenkriterium.NutzenkriteriumService;\nimport ch.bfh.egov.nutzenportfolio.tos.Nutzenkriterium;\nimport org.apache.commons.logging.Log;\nimport org.apache.commons.logging.LogFactory;\nimport org.apache.struts.action.ActionForm;\nimport org.apache.struts.action.ActionForward;\nimport org.apache.struts.action.ActionMapping;\nimport org.apache.struts.action.ActionMessage;\nimport org.apache.struts.action.ActionMessages;\nimport org.apache.struts.action.DynaActionForm;\nimport org.apache.struts.actions.DispatchAction;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link NutzenkriteriumAction}.\n* It contains ten unit test cases for the {@link NutzenkriteriumAction#populate(ActionMapping, ActionForm, HttpServletRequest, HttpServletResponse)} method.\n*/\nclass NutzenkriteriumActionTest8 {"
	},
	{
		"original_code": "// NutzenkriteriumAction.java\n/**\r\n * Nutzenportfolio\r\n * Copyright (C) 2006 Kompetenzzentrum E-Business, Simon Bergamin\r\n *\r\n * This program is free software; you can redistribute it and/or\r\n * modify it under the terms of the GNU General Public License\r\n * as published by the Free Software Foundation; either version 2\r\n * of the License, or (at your option) any later version.\r\n *\r\n * This program is distributed in the hope that it will be useful,\r\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n * GNU General Public License for more details.\r\n *\r\n * You should have received a copy of the GNU General Public License\r\n * along with this program; if not, write to the Free Software\r\n * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\r\n */\r\npackage ch.bfh.egov.nutzenportfolio.action;\r\n\r\nimport javax.servlet.http.HttpServletRequest;\r\nimport javax.servlet.http.HttpServletResponse;\r\nimport ch.bfh.egov.nutzenportfolio.Constants;\r\nimport ch.bfh.egov.nutzenportfolio.form.FragenForm;\r\nimport ch.bfh.egov.nutzenportfolio.service.auswahlfeld.AuswahlfeldService;\r\nimport ch.bfh.egov.nutzenportfolio.service.common.CommonService;\r\nimport ch.bfh.egov.nutzenportfolio.service.customizing.CustomizingService;\r\nimport ch.bfh.egov.nutzenportfolio.service.kategorie.KategorieService;\r\nimport ch.bfh.egov.nutzenportfolio.service.nutzenkriterium.NutzenkriteriumService;\r\nimport ch.bfh.egov.nutzenportfolio.tos.Nutzenkriterium;\r\nimport org.apache.commons.logging.Log;\r\nimport org.apache.commons.logging.LogFactory;\r\nimport org.apache.struts.action.ActionForm;\r\nimport org.apache.struts.action.ActionForward;\r\nimport org.apache.struts.action.ActionMapping;\r\nimport org.apache.struts.action.ActionMessage;\r\nimport org.apache.struts.action.ActionMessages;\r\nimport org.apache.struts.action.DynaActionForm;\r\nimport org.apache.struts.actions.DispatchAction;\r\n\r\npublic class NutzenkriteriumAction extends DispatchAction {\r\n\r\n    private NutzenkriteriumService service;\r\n\r\n    private CommonService cService;\r\n\r\n    private Log logger = LogFactory.getLog(this.getClass());\r\n\r\n    public NutzenkriteriumAction(NutzenkriteriumService service, AuswahlfeldService aService, CommonService cService, KategorieService kService, CustomizingService customizingService) {\r\n        super();\r\n        this.service = service;\r\n        this.cService = cService;\r\n        this.service.init(aService, cService, kService, customizingService);\r\n    }\r\n\r\n    public ActionForward list(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {\r\n        service.list(request);\r\n        return mapping.findForward(Constants.LIST);\r\n    }\r\n\r\n    public ActionForward prepare(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {\r\n        if (!service.populate(request)) {\r\n            ActionMessages errors = new ActionMessages();\r\n            errors.add(ActionMessages.GLOBAL_MESSAGE, new ActionMessage(\"errors.kategorien.not.set\"));\r\n            saveMessages(request, errors);\r\n            return mapping.findForward(Constants.KATEGORIEN);\r\n        }\r\n        return mapping.findForward(Constants.FORM);\r\n    }\r\n\r\n    public ActionForward edit(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {\r\n        DynaActionForm nForm = (DynaActionForm) form;\r\n        service.edit(request, nForm);\r\n        return mapping.findForward(Constants.FORM);\r\n    }\r\n\r\n    public ActionForward update(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {\r\n        DynaActionForm nForm = (DynaActionForm) form;\r\n        service.update(request, nForm);\r\n        service.list(request);\r\n        return mapping.findForward(Constants.LIST);\r\n    }\r\n\r\n    public ActionForward deletequestion(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {\r\n        DynaActionForm nForm = (DynaActionForm) form;\r\n        Nutzenkriterium n = service.getNutzenkriterium(request, nForm);\r\n        if (n == null) {\r\n            service.list(request);\r\n            return mapping.findForward(Constants.LIST);\r\n        }\r\n        ActionMessages messages = new ActionMessages();\r\n        service.deleteQuestion(request, n, messages);\r\n        saveMessages(request, messages);\r\n        return mapping.findForward(Constants.QUESTION);\r\n    }\r\n\r\n    public ActionForward delete(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {\r\n        DynaActionForm nForm = (DynaActionForm) form;\r\n        Nutzenkriterium n = service.getNutzenkriterium(request, nForm);\r\n        if (n == null) {\r\n            service.list(request);\r\n            return mapping.findForward(Constants.LIST);\r\n        }\r\n        // Lï¿½schen\r\n        service.delete(request, n);\r\n        service.list(request);\r\n        return mapping.findForward(Constants.LIST);\r\n    }\r\n\r\n    public ActionForward remove(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {\r\n        DynaActionForm nForm = (DynaActionForm) form;\r\n        service.remove(request, nForm);\r\n        service.populate(request);\r\n        return mapping.findForward(Constants.FORM);\r\n    }\r\n\r\n    public ActionForward set(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {\r\n        DynaActionForm nForm = (DynaActionForm) form;\r\n        service.set(request, nForm);\r\n        service.populate(request);\r\n        return mapping.findForward(Constants.FORM);\r\n    }\r\n\r\n    public ActionForward next(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {\r\n        service.populate(request);\r\n        if (service.next(request)) {\r\n            return mapping.findForward(Constants.NEXT);\r\n        }\r\n        return mapping.findForward(Constants.FORM);\r\n    }\r\n\r\n    public ActionForward populate(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {\r\n        FragenForm nForm = (FragenForm) form;\r\n        if (!service.populateFragen(request, nForm)) {\r\n            ActionMessages errors = new ActionMessages();\r\n            errors.add(ActionMessages.GLOBAL_MESSAGE, new ActionMessage(\"errors.nutzenkriterien.not.set\"));\r\n            saveMessages(request, errors);\r\n            return mapping.findForward(Constants.NUTZENKRITERIEN);\r\n        }\r\n        return mapping.findForward(Constants.FORM);\r\n    }\r\n\r\n    public ActionForward save(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {\r\n        FragenForm nForm = (FragenForm) form;\r\n        // validieren und speichern\r\n        ActionMessages errors = new ActionMessages();\r\n        if (service.saveFragen(request, nForm, errors)) {\r\n            return mapping.findForward(Constants.SUCCESS);\r\n        }\r\n        // Fehler bei der Validierung\r\n        saveErrors(request, errors);\r\n        service.populateFragen(request, nForm);\r\n        return mapping.findForward(Constants.FAILURE);\r\n    }\r\n\r\n    public ActionForward select(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {\r\n        // Vorselektieren anhand anzahl auswahlfelder\r\n        if (!service.populate(request)) {\r\n            ActionMessages errors = new ActionMessages();\r\n            errors.add(ActionMessages.GLOBAL_MESSAGE, new ActionMessage(\"errors.kategorien.not.set\"));\r\n            saveMessages(request, errors);\r\n            return mapping.findForward(Constants.KATEGORIEN);\r\n        }\r\n        service.preselect(request, mapping.getPath());\r\n        cService.isOperativerNutzen(request);\r\n        return mapping.findForward(Constants.FORM);\r\n    }\r\n\r\n    public ActionForward saveAbstufungen(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {\r\n        // Anzahl Abstufungen in die Session stellen\r\n        DynaActionForm aForm = (DynaActionForm) form;\r\n        Integer abstufung = (Integer) aForm.get(Constants.ABSTUFUNGEN);\r\n        logger.debug(\"Gewï¿½hlte Abstufung: \" + abstufung);\r\n        request.getSession().setAttribute(Constants.ABSTUFUNGEN, abstufung);\r\n        return mapping.findForward(Constants.NEXT);\r\n    }\r\n\r\n    public ActionForward saveGewichtungstyp(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {\r\n        // Gewichtugnstyp in die Session stellen\r\n        DynaActionForm aForm = (DynaActionForm) form;\r\n        Integer gewichtungstyp = (Integer) aForm.get(Constants.GEWICHTUNGSTYP);\r\n        logger.debug(\"Gewï¿½hlter Gewichtugnstyp: \" + gewichtungstyp);\r\n        request.getSession().setAttribute(Constants.GEWICHTUNGSTYP, gewichtungstyp);\r\n        // Operativer Nutzen -> Projektbetroffene\r\n        if (cService.isOperativerNutzen(request)) {\r\n            request.setAttribute(Constants.PROJEKTBETROFFENE, true);\r\n        }\r\n        if (service.direkteGewichtung(request)) {\r\n            return mapping.findForward(Constants.DIREKT);\r\n        }\r\n        return mapping.findForward(Constants.NEXT);\r\n    }\r\n\r\n    public ActionForward prepareDirekteGewichtung(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {\r\n        FragenForm fForm = (FragenForm) form;\r\n        service.populateDirekteGewichtung(request, fForm);\r\n        return mapping.findForward(Constants.FORM);\r\n    }\r\n\r\n    public ActionForward saveDirekteGewichtung(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {\r\n        FragenForm fForm = (FragenForm) form;\r\n        ActionMessages errors = new ActionMessages();\r\n        if (!service.saveDirekteGewichtung(request, fForm, errors)) {\r\n            saveMessages(request, errors);\r\n            service.populateDirekteGewichtung(request, fForm);\r\n            return mapping.findForward(Constants.FORM);\r\n        }\r\n        // Allfï¿½llige gewichtung ï¿½ber Fragebogen lï¿½schen\r\n        service.deleteFragebogenGewichtung(request);\r\n        if (cService.isOperativerNutzen(request)) {\r\n            if (!service.customizingComplete(request)) {\r\n                service.populateDirekteGewichtung(request, fForm);\r\n                return mapping.findForward(Constants.FORM);\r\n            }\r\n            return mapping.findForward(Constants.END);\r\n        }\r\n        return mapping.findForward(Constants.NEXT);\r\n    }\r\n\r\n    public ActionForward add(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {\r\n        DynaActionForm nForm = (DynaActionForm) form;\r\n        ActionMessages errors = new ActionMessages();\r\n        ActionMessages messages = new ActionMessages();\r\n        if (!service.add(request, nForm, errors, messages)) {\r\n            saveErrors(request, errors);\r\n            saveMessages(request, messages);\r\n        }\r\n        service.populate(request);\r\n        return mapping.findForward(Constants.FORM);\r\n    }\r\n}\r\n",
		"id": "EvoSuiteBenchmark/46_nutzenportfolio/src/main/java/ch/bfh/egov/nutzenportfolio/action/NutzenkriteriumActionTest9.java",
		"test_prompt": "// NutzenkriteriumActionTest9.java\npackage ch.bfh.egov.nutzenportfolio.action;\n\nimport javax.servlet.http.HttpServletRequest;\nimport javax.servlet.http.HttpServletResponse;\nimport ch.bfh.egov.nutzenportfolio.Constants;\nimport ch.bfh.egov.nutzenportfolio.form.FragenForm;\nimport ch.bfh.egov.nutzenportfolio.service.auswahlfeld.AuswahlfeldService;\nimport ch.bfh.egov.nutzenportfolio.service.common.CommonService;\nimport ch.bfh.egov.nutzenportfolio.service.customizing.CustomizingService;\nimport ch.bfh.egov.nutzenportfolio.service.kategorie.KategorieService;\nimport ch.bfh.egov.nutzenportfolio.service.nutzenkriterium.NutzenkriteriumService;\nimport ch.bfh.egov.nutzenportfolio.tos.Nutzenkriterium;\nimport org.apache.commons.logging.Log;\nimport org.apache.commons.logging.LogFactory;\nimport org.apache.struts.action.ActionForm;\nimport org.apache.struts.action.ActionForward;\nimport org.apache.struts.action.ActionMapping;\nimport org.apache.struts.action.ActionMessage;\nimport org.apache.struts.action.ActionMessages;\nimport org.apache.struts.action.DynaActionForm;\nimport org.apache.struts.actions.DispatchAction;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link NutzenkriteriumAction}.\n* It contains ten unit test cases for the {@link NutzenkriteriumAction#save(ActionMapping, ActionForm, HttpServletRequest, HttpServletResponse)} method.\n*/\nclass NutzenkriteriumActionTest9 {"
	},
	{
		"original_code": "// NutzenkriteriumAction.java\n/**\r\n * Nutzenportfolio\r\n * Copyright (C) 2006 Kompetenzzentrum E-Business, Simon Bergamin\r\n *\r\n * This program is free software; you can redistribute it and/or\r\n * modify it under the terms of the GNU General Public License\r\n * as published by the Free Software Foundation; either version 2\r\n * of the License, or (at your option) any later version.\r\n *\r\n * This program is distributed in the hope that it will be useful,\r\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n * GNU General Public License for more details.\r\n *\r\n * You should have received a copy of the GNU General Public License\r\n * along with this program; if not, write to the Free Software\r\n * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\r\n */\r\npackage ch.bfh.egov.nutzenportfolio.action;\r\n\r\nimport javax.servlet.http.HttpServletRequest;\r\nimport javax.servlet.http.HttpServletResponse;\r\nimport ch.bfh.egov.nutzenportfolio.Constants;\r\nimport ch.bfh.egov.nutzenportfolio.form.FragenForm;\r\nimport ch.bfh.egov.nutzenportfolio.service.auswahlfeld.AuswahlfeldService;\r\nimport ch.bfh.egov.nutzenportfolio.service.common.CommonService;\r\nimport ch.bfh.egov.nutzenportfolio.service.customizing.CustomizingService;\r\nimport ch.bfh.egov.nutzenportfolio.service.kategorie.KategorieService;\r\nimport ch.bfh.egov.nutzenportfolio.service.nutzenkriterium.NutzenkriteriumService;\r\nimport ch.bfh.egov.nutzenportfolio.tos.Nutzenkriterium;\r\nimport org.apache.commons.logging.Log;\r\nimport org.apache.commons.logging.LogFactory;\r\nimport org.apache.struts.action.ActionForm;\r\nimport org.apache.struts.action.ActionForward;\r\nimport org.apache.struts.action.ActionMapping;\r\nimport org.apache.struts.action.ActionMessage;\r\nimport org.apache.struts.action.ActionMessages;\r\nimport org.apache.struts.action.DynaActionForm;\r\nimport org.apache.struts.actions.DispatchAction;\r\n\r\npublic class NutzenkriteriumAction extends DispatchAction {\r\n\r\n    private NutzenkriteriumService service;\r\n\r\n    private CommonService cService;\r\n\r\n    private Log logger = LogFactory.getLog(this.getClass());\r\n\r\n    public NutzenkriteriumAction(NutzenkriteriumService service, AuswahlfeldService aService, CommonService cService, KategorieService kService, CustomizingService customizingService) {\r\n        super();\r\n        this.service = service;\r\n        this.cService = cService;\r\n        this.service.init(aService, cService, kService, customizingService);\r\n    }\r\n\r\n    public ActionForward list(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {\r\n        service.list(request);\r\n        return mapping.findForward(Constants.LIST);\r\n    }\r\n\r\n    public ActionForward prepare(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {\r\n        if (!service.populate(request)) {\r\n            ActionMessages errors = new ActionMessages();\r\n            errors.add(ActionMessages.GLOBAL_MESSAGE, new ActionMessage(\"errors.kategorien.not.set\"));\r\n            saveMessages(request, errors);\r\n            return mapping.findForward(Constants.KATEGORIEN);\r\n        }\r\n        return mapping.findForward(Constants.FORM);\r\n    }\r\n\r\n    public ActionForward edit(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {\r\n        DynaActionForm nForm = (DynaActionForm) form;\r\n        service.edit(request, nForm);\r\n        return mapping.findForward(Constants.FORM);\r\n    }\r\n\r\n    public ActionForward update(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {\r\n        DynaActionForm nForm = (DynaActionForm) form;\r\n        service.update(request, nForm);\r\n        service.list(request);\r\n        return mapping.findForward(Constants.LIST);\r\n    }\r\n\r\n    public ActionForward deletequestion(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {\r\n        DynaActionForm nForm = (DynaActionForm) form;\r\n        Nutzenkriterium n = service.getNutzenkriterium(request, nForm);\r\n        if (n == null) {\r\n            service.list(request);\r\n            return mapping.findForward(Constants.LIST);\r\n        }\r\n        ActionMessages messages = new ActionMessages();\r\n        service.deleteQuestion(request, n, messages);\r\n        saveMessages(request, messages);\r\n        return mapping.findForward(Constants.QUESTION);\r\n    }\r\n\r\n    public ActionForward delete(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {\r\n        DynaActionForm nForm = (DynaActionForm) form;\r\n        Nutzenkriterium n = service.getNutzenkriterium(request, nForm);\r\n        if (n == null) {\r\n            service.list(request);\r\n            return mapping.findForward(Constants.LIST);\r\n        }\r\n        // Lï¿½schen\r\n        service.delete(request, n);\r\n        service.list(request);\r\n        return mapping.findForward(Constants.LIST);\r\n    }\r\n\r\n    public ActionForward remove(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {\r\n        DynaActionForm nForm = (DynaActionForm) form;\r\n        service.remove(request, nForm);\r\n        service.populate(request);\r\n        return mapping.findForward(Constants.FORM);\r\n    }\r\n\r\n    public ActionForward set(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {\r\n        DynaActionForm nForm = (DynaActionForm) form;\r\n        service.set(request, nForm);\r\n        service.populate(request);\r\n        return mapping.findForward(Constants.FORM);\r\n    }\r\n\r\n    public ActionForward next(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {\r\n        service.populate(request);\r\n        if (service.next(request)) {\r\n            return mapping.findForward(Constants.NEXT);\r\n        }\r\n        return mapping.findForward(Constants.FORM);\r\n    }\r\n\r\n    public ActionForward populate(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {\r\n        FragenForm nForm = (FragenForm) form;\r\n        if (!service.populateFragen(request, nForm)) {\r\n            ActionMessages errors = new ActionMessages();\r\n            errors.add(ActionMessages.GLOBAL_MESSAGE, new ActionMessage(\"errors.nutzenkriterien.not.set\"));\r\n            saveMessages(request, errors);\r\n            return mapping.findForward(Constants.NUTZENKRITERIEN);\r\n        }\r\n        return mapping.findForward(Constants.FORM);\r\n    }\r\n\r\n    public ActionForward save(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {\r\n        FragenForm nForm = (FragenForm) form;\r\n        // validieren und speichern\r\n        ActionMessages errors = new ActionMessages();\r\n        if (service.saveFragen(request, nForm, errors)) {\r\n            return mapping.findForward(Constants.SUCCESS);\r\n        }\r\n        // Fehler bei der Validierung\r\n        saveErrors(request, errors);\r\n        service.populateFragen(request, nForm);\r\n        return mapping.findForward(Constants.FAILURE);\r\n    }\r\n\r\n    public ActionForward select(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {\r\n        // Vorselektieren anhand anzahl auswahlfelder\r\n        if (!service.populate(request)) {\r\n            ActionMessages errors = new ActionMessages();\r\n            errors.add(ActionMessages.GLOBAL_MESSAGE, new ActionMessage(\"errors.kategorien.not.set\"));\r\n            saveMessages(request, errors);\r\n            return mapping.findForward(Constants.KATEGORIEN);\r\n        }\r\n        service.preselect(request, mapping.getPath());\r\n        cService.isOperativerNutzen(request);\r\n        return mapping.findForward(Constants.FORM);\r\n    }\r\n\r\n    public ActionForward saveAbstufungen(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {\r\n        // Anzahl Abstufungen in die Session stellen\r\n        DynaActionForm aForm = (DynaActionForm) form;\r\n        Integer abstufung = (Integer) aForm.get(Constants.ABSTUFUNGEN);\r\n        logger.debug(\"Gewï¿½hlte Abstufung: \" + abstufung);\r\n        request.getSession().setAttribute(Constants.ABSTUFUNGEN, abstufung);\r\n        return mapping.findForward(Constants.NEXT);\r\n    }\r\n\r\n    public ActionForward saveGewichtungstyp(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {\r\n        // Gewichtugnstyp in die Session stellen\r\n        DynaActionForm aForm = (DynaActionForm) form;\r\n        Integer gewichtungstyp = (Integer) aForm.get(Constants.GEWICHTUNGSTYP);\r\n        logger.debug(\"Gewï¿½hlter Gewichtugnstyp: \" + gewichtungstyp);\r\n        request.getSession().setAttribute(Constants.GEWICHTUNGSTYP, gewichtungstyp);\r\n        // Operativer Nutzen -> Projektbetroffene\r\n        if (cService.isOperativerNutzen(request)) {\r\n            request.setAttribute(Constants.PROJEKTBETROFFENE, true);\r\n        }\r\n        if (service.direkteGewichtung(request)) {\r\n            return mapping.findForward(Constants.DIREKT);\r\n        }\r\n        return mapping.findForward(Constants.NEXT);\r\n    }\r\n\r\n    public ActionForward prepareDirekteGewichtung(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {\r\n        FragenForm fForm = (FragenForm) form;\r\n        service.populateDirekteGewichtung(request, fForm);\r\n        return mapping.findForward(Constants.FORM);\r\n    }\r\n\r\n    public ActionForward saveDirekteGewichtung(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {\r\n        FragenForm fForm = (FragenForm) form;\r\n        ActionMessages errors = new ActionMessages();\r\n        if (!service.saveDirekteGewichtung(request, fForm, errors)) {\r\n            saveMessages(request, errors);\r\n            service.populateDirekteGewichtung(request, fForm);\r\n            return mapping.findForward(Constants.FORM);\r\n        }\r\n        // Allfï¿½llige gewichtung ï¿½ber Fragebogen lï¿½schen\r\n        service.deleteFragebogenGewichtung(request);\r\n        if (cService.isOperativerNutzen(request)) {\r\n            if (!service.customizingComplete(request)) {\r\n                service.populateDirekteGewichtung(request, fForm);\r\n                return mapping.findForward(Constants.FORM);\r\n            }\r\n            return mapping.findForward(Constants.END);\r\n        }\r\n        return mapping.findForward(Constants.NEXT);\r\n    }\r\n\r\n    public ActionForward add(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {\r\n        DynaActionForm nForm = (DynaActionForm) form;\r\n        ActionMessages errors = new ActionMessages();\r\n        ActionMessages messages = new ActionMessages();\r\n        if (!service.add(request, nForm, errors, messages)) {\r\n            saveErrors(request, errors);\r\n            saveMessages(request, messages);\r\n        }\r\n        service.populate(request);\r\n        return mapping.findForward(Constants.FORM);\r\n    }\r\n}\r\n",
		"id": "EvoSuiteBenchmark/46_nutzenportfolio/src/main/java/ch/bfh/egov/nutzenportfolio/action/NutzenkriteriumActionTest10.java",
		"test_prompt": "// NutzenkriteriumActionTest10.java\npackage ch.bfh.egov.nutzenportfolio.action;\n\nimport javax.servlet.http.HttpServletRequest;\nimport javax.servlet.http.HttpServletResponse;\nimport ch.bfh.egov.nutzenportfolio.Constants;\nimport ch.bfh.egov.nutzenportfolio.form.FragenForm;\nimport ch.bfh.egov.nutzenportfolio.service.auswahlfeld.AuswahlfeldService;\nimport ch.bfh.egov.nutzenportfolio.service.common.CommonService;\nimport ch.bfh.egov.nutzenportfolio.service.customizing.CustomizingService;\nimport ch.bfh.egov.nutzenportfolio.service.kategorie.KategorieService;\nimport ch.bfh.egov.nutzenportfolio.service.nutzenkriterium.NutzenkriteriumService;\nimport ch.bfh.egov.nutzenportfolio.tos.Nutzenkriterium;\nimport org.apache.commons.logging.Log;\nimport org.apache.commons.logging.LogFactory;\nimport org.apache.struts.action.ActionForm;\nimport org.apache.struts.action.ActionForward;\nimport org.apache.struts.action.ActionMapping;\nimport org.apache.struts.action.ActionMessage;\nimport org.apache.struts.action.ActionMessages;\nimport org.apache.struts.action.DynaActionForm;\nimport org.apache.struts.actions.DispatchAction;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link NutzenkriteriumAction}.\n* It contains ten unit test cases for the {@link NutzenkriteriumAction#select(ActionMapping, ActionForm, HttpServletRequest, HttpServletResponse)} method.\n*/\nclass NutzenkriteriumActionTest10 {"
	},
	{
		"original_code": "// NutzenkriteriumAction.java\n/**\r\n * Nutzenportfolio\r\n * Copyright (C) 2006 Kompetenzzentrum E-Business, Simon Bergamin\r\n *\r\n * This program is free software; you can redistribute it and/or\r\n * modify it under the terms of the GNU General Public License\r\n * as published by the Free Software Foundation; either version 2\r\n * of the License, or (at your option) any later version.\r\n *\r\n * This program is distributed in the hope that it will be useful,\r\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n * GNU General Public License for more details.\r\n *\r\n * You should have received a copy of the GNU General Public License\r\n * along with this program; if not, write to the Free Software\r\n * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\r\n */\r\npackage ch.bfh.egov.nutzenportfolio.action;\r\n\r\nimport javax.servlet.http.HttpServletRequest;\r\nimport javax.servlet.http.HttpServletResponse;\r\nimport ch.bfh.egov.nutzenportfolio.Constants;\r\nimport ch.bfh.egov.nutzenportfolio.form.FragenForm;\r\nimport ch.bfh.egov.nutzenportfolio.service.auswahlfeld.AuswahlfeldService;\r\nimport ch.bfh.egov.nutzenportfolio.service.common.CommonService;\r\nimport ch.bfh.egov.nutzenportfolio.service.customizing.CustomizingService;\r\nimport ch.bfh.egov.nutzenportfolio.service.kategorie.KategorieService;\r\nimport ch.bfh.egov.nutzenportfolio.service.nutzenkriterium.NutzenkriteriumService;\r\nimport ch.bfh.egov.nutzenportfolio.tos.Nutzenkriterium;\r\nimport org.apache.commons.logging.Log;\r\nimport org.apache.commons.logging.LogFactory;\r\nimport org.apache.struts.action.ActionForm;\r\nimport org.apache.struts.action.ActionForward;\r\nimport org.apache.struts.action.ActionMapping;\r\nimport org.apache.struts.action.ActionMessage;\r\nimport org.apache.struts.action.ActionMessages;\r\nimport org.apache.struts.action.DynaActionForm;\r\nimport org.apache.struts.actions.DispatchAction;\r\n\r\npublic class NutzenkriteriumAction extends DispatchAction {\r\n\r\n    private NutzenkriteriumService service;\r\n\r\n    private CommonService cService;\r\n\r\n    private Log logger = LogFactory.getLog(this.getClass());\r\n\r\n    public NutzenkriteriumAction(NutzenkriteriumService service, AuswahlfeldService aService, CommonService cService, KategorieService kService, CustomizingService customizingService) {\r\n        super();\r\n        this.service = service;\r\n        this.cService = cService;\r\n        this.service.init(aService, cService, kService, customizingService);\r\n    }\r\n\r\n    public ActionForward list(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {\r\n        service.list(request);\r\n        return mapping.findForward(Constants.LIST);\r\n    }\r\n\r\n    public ActionForward prepare(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {\r\n        if (!service.populate(request)) {\r\n            ActionMessages errors = new ActionMessages();\r\n            errors.add(ActionMessages.GLOBAL_MESSAGE, new ActionMessage(\"errors.kategorien.not.set\"));\r\n            saveMessages(request, errors);\r\n            return mapping.findForward(Constants.KATEGORIEN);\r\n        }\r\n        return mapping.findForward(Constants.FORM);\r\n    }\r\n\r\n    public ActionForward edit(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {\r\n        DynaActionForm nForm = (DynaActionForm) form;\r\n        service.edit(request, nForm);\r\n        return mapping.findForward(Constants.FORM);\r\n    }\r\n\r\n    public ActionForward update(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {\r\n        DynaActionForm nForm = (DynaActionForm) form;\r\n        service.update(request, nForm);\r\n        service.list(request);\r\n        return mapping.findForward(Constants.LIST);\r\n    }\r\n\r\n    public ActionForward deletequestion(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {\r\n        DynaActionForm nForm = (DynaActionForm) form;\r\n        Nutzenkriterium n = service.getNutzenkriterium(request, nForm);\r\n        if (n == null) {\r\n            service.list(request);\r\n            return mapping.findForward(Constants.LIST);\r\n        }\r\n        ActionMessages messages = new ActionMessages();\r\n        service.deleteQuestion(request, n, messages);\r\n        saveMessages(request, messages);\r\n        return mapping.findForward(Constants.QUESTION);\r\n    }\r\n\r\n    public ActionForward delete(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {\r\n        DynaActionForm nForm = (DynaActionForm) form;\r\n        Nutzenkriterium n = service.getNutzenkriterium(request, nForm);\r\n        if (n == null) {\r\n            service.list(request);\r\n            return mapping.findForward(Constants.LIST);\r\n        }\r\n        // Lï¿½schen\r\n        service.delete(request, n);\r\n        service.list(request);\r\n        return mapping.findForward(Constants.LIST);\r\n    }\r\n\r\n    public ActionForward remove(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {\r\n        DynaActionForm nForm = (DynaActionForm) form;\r\n        service.remove(request, nForm);\r\n        service.populate(request);\r\n        return mapping.findForward(Constants.FORM);\r\n    }\r\n\r\n    public ActionForward set(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {\r\n        DynaActionForm nForm = (DynaActionForm) form;\r\n        service.set(request, nForm);\r\n        service.populate(request);\r\n        return mapping.findForward(Constants.FORM);\r\n    }\r\n\r\n    public ActionForward next(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {\r\n        service.populate(request);\r\n        if (service.next(request)) {\r\n            return mapping.findForward(Constants.NEXT);\r\n        }\r\n        return mapping.findForward(Constants.FORM);\r\n    }\r\n\r\n    public ActionForward populate(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {\r\n        FragenForm nForm = (FragenForm) form;\r\n        if (!service.populateFragen(request, nForm)) {\r\n            ActionMessages errors = new ActionMessages();\r\n            errors.add(ActionMessages.GLOBAL_MESSAGE, new ActionMessage(\"errors.nutzenkriterien.not.set\"));\r\n            saveMessages(request, errors);\r\n            return mapping.findForward(Constants.NUTZENKRITERIEN);\r\n        }\r\n        return mapping.findForward(Constants.FORM);\r\n    }\r\n\r\n    public ActionForward save(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {\r\n        FragenForm nForm = (FragenForm) form;\r\n        // validieren und speichern\r\n        ActionMessages errors = new ActionMessages();\r\n        if (service.saveFragen(request, nForm, errors)) {\r\n            return mapping.findForward(Constants.SUCCESS);\r\n        }\r\n        // Fehler bei der Validierung\r\n        saveErrors(request, errors);\r\n        service.populateFragen(request, nForm);\r\n        return mapping.findForward(Constants.FAILURE);\r\n    }\r\n\r\n    public ActionForward select(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {\r\n        // Vorselektieren anhand anzahl auswahlfelder\r\n        if (!service.populate(request)) {\r\n            ActionMessages errors = new ActionMessages();\r\n            errors.add(ActionMessages.GLOBAL_MESSAGE, new ActionMessage(\"errors.kategorien.not.set\"));\r\n            saveMessages(request, errors);\r\n            return mapping.findForward(Constants.KATEGORIEN);\r\n        }\r\n        service.preselect(request, mapping.getPath());\r\n        cService.isOperativerNutzen(request);\r\n        return mapping.findForward(Constants.FORM);\r\n    }\r\n\r\n    public ActionForward saveAbstufungen(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {\r\n        // Anzahl Abstufungen in die Session stellen\r\n        DynaActionForm aForm = (DynaActionForm) form;\r\n        Integer abstufung = (Integer) aForm.get(Constants.ABSTUFUNGEN);\r\n        logger.debug(\"Gewï¿½hlte Abstufung: \" + abstufung);\r\n        request.getSession().setAttribute(Constants.ABSTUFUNGEN, abstufung);\r\n        return mapping.findForward(Constants.NEXT);\r\n    }\r\n\r\n    public ActionForward saveGewichtungstyp(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {\r\n        // Gewichtugnstyp in die Session stellen\r\n        DynaActionForm aForm = (DynaActionForm) form;\r\n        Integer gewichtungstyp = (Integer) aForm.get(Constants.GEWICHTUNGSTYP);\r\n        logger.debug(\"Gewï¿½hlter Gewichtugnstyp: \" + gewichtungstyp);\r\n        request.getSession().setAttribute(Constants.GEWICHTUNGSTYP, gewichtungstyp);\r\n        // Operativer Nutzen -> Projektbetroffene\r\n        if (cService.isOperativerNutzen(request)) {\r\n            request.setAttribute(Constants.PROJEKTBETROFFENE, true);\r\n        }\r\n        if (service.direkteGewichtung(request)) {\r\n            return mapping.findForward(Constants.DIREKT);\r\n        }\r\n        return mapping.findForward(Constants.NEXT);\r\n    }\r\n\r\n    public ActionForward prepareDirekteGewichtung(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {\r\n        FragenForm fForm = (FragenForm) form;\r\n        service.populateDirekteGewichtung(request, fForm);\r\n        return mapping.findForward(Constants.FORM);\r\n    }\r\n\r\n    public ActionForward saveDirekteGewichtung(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {\r\n        FragenForm fForm = (FragenForm) form;\r\n        ActionMessages errors = new ActionMessages();\r\n        if (!service.saveDirekteGewichtung(request, fForm, errors)) {\r\n            saveMessages(request, errors);\r\n            service.populateDirekteGewichtung(request, fForm);\r\n            return mapping.findForward(Constants.FORM);\r\n        }\r\n        // Allfï¿½llige gewichtung ï¿½ber Fragebogen lï¿½schen\r\n        service.deleteFragebogenGewichtung(request);\r\n        if (cService.isOperativerNutzen(request)) {\r\n            if (!service.customizingComplete(request)) {\r\n                service.populateDirekteGewichtung(request, fForm);\r\n                return mapping.findForward(Constants.FORM);\r\n            }\r\n            return mapping.findForward(Constants.END);\r\n        }\r\n        return mapping.findForward(Constants.NEXT);\r\n    }\r\n\r\n    public ActionForward add(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {\r\n        DynaActionForm nForm = (DynaActionForm) form;\r\n        ActionMessages errors = new ActionMessages();\r\n        ActionMessages messages = new ActionMessages();\r\n        if (!service.add(request, nForm, errors, messages)) {\r\n            saveErrors(request, errors);\r\n            saveMessages(request, messages);\r\n        }\r\n        service.populate(request);\r\n        return mapping.findForward(Constants.FORM);\r\n    }\r\n}\r\n",
		"id": "EvoSuiteBenchmark/46_nutzenportfolio/src/main/java/ch/bfh/egov/nutzenportfolio/action/NutzenkriteriumActionTest11.java",
		"test_prompt": "// NutzenkriteriumActionTest11.java\npackage ch.bfh.egov.nutzenportfolio.action;\n\nimport javax.servlet.http.HttpServletRequest;\nimport javax.servlet.http.HttpServletResponse;\nimport ch.bfh.egov.nutzenportfolio.Constants;\nimport ch.bfh.egov.nutzenportfolio.form.FragenForm;\nimport ch.bfh.egov.nutzenportfolio.service.auswahlfeld.AuswahlfeldService;\nimport ch.bfh.egov.nutzenportfolio.service.common.CommonService;\nimport ch.bfh.egov.nutzenportfolio.service.customizing.CustomizingService;\nimport ch.bfh.egov.nutzenportfolio.service.kategorie.KategorieService;\nimport ch.bfh.egov.nutzenportfolio.service.nutzenkriterium.NutzenkriteriumService;\nimport ch.bfh.egov.nutzenportfolio.tos.Nutzenkriterium;\nimport org.apache.commons.logging.Log;\nimport org.apache.commons.logging.LogFactory;\nimport org.apache.struts.action.ActionForm;\nimport org.apache.struts.action.ActionForward;\nimport org.apache.struts.action.ActionMapping;\nimport org.apache.struts.action.ActionMessage;\nimport org.apache.struts.action.ActionMessages;\nimport org.apache.struts.action.DynaActionForm;\nimport org.apache.struts.actions.DispatchAction;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link NutzenkriteriumAction}.\n* It contains ten unit test cases for the {@link NutzenkriteriumAction#saveAbstufungen(ActionMapping, ActionForm, HttpServletRequest, HttpServletResponse)} method.\n*/\nclass NutzenkriteriumActionTest11 {"
	},
	{
		"original_code": "// NutzenkriteriumAction.java\n/**\r\n * Nutzenportfolio\r\n * Copyright (C) 2006 Kompetenzzentrum E-Business, Simon Bergamin\r\n *\r\n * This program is free software; you can redistribute it and/or\r\n * modify it under the terms of the GNU General Public License\r\n * as published by the Free Software Foundation; either version 2\r\n * of the License, or (at your option) any later version.\r\n *\r\n * This program is distributed in the hope that it will be useful,\r\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n * GNU General Public License for more details.\r\n *\r\n * You should have received a copy of the GNU General Public License\r\n * along with this program; if not, write to the Free Software\r\n * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\r\n */\r\npackage ch.bfh.egov.nutzenportfolio.action;\r\n\r\nimport javax.servlet.http.HttpServletRequest;\r\nimport javax.servlet.http.HttpServletResponse;\r\nimport ch.bfh.egov.nutzenportfolio.Constants;\r\nimport ch.bfh.egov.nutzenportfolio.form.FragenForm;\r\nimport ch.bfh.egov.nutzenportfolio.service.auswahlfeld.AuswahlfeldService;\r\nimport ch.bfh.egov.nutzenportfolio.service.common.CommonService;\r\nimport ch.bfh.egov.nutzenportfolio.service.customizing.CustomizingService;\r\nimport ch.bfh.egov.nutzenportfolio.service.kategorie.KategorieService;\r\nimport ch.bfh.egov.nutzenportfolio.service.nutzenkriterium.NutzenkriteriumService;\r\nimport ch.bfh.egov.nutzenportfolio.tos.Nutzenkriterium;\r\nimport org.apache.commons.logging.Log;\r\nimport org.apache.commons.logging.LogFactory;\r\nimport org.apache.struts.action.ActionForm;\r\nimport org.apache.struts.action.ActionForward;\r\nimport org.apache.struts.action.ActionMapping;\r\nimport org.apache.struts.action.ActionMessage;\r\nimport org.apache.struts.action.ActionMessages;\r\nimport org.apache.struts.action.DynaActionForm;\r\nimport org.apache.struts.actions.DispatchAction;\r\n\r\npublic class NutzenkriteriumAction extends DispatchAction {\r\n\r\n    private NutzenkriteriumService service;\r\n\r\n    private CommonService cService;\r\n\r\n    private Log logger = LogFactory.getLog(this.getClass());\r\n\r\n    public NutzenkriteriumAction(NutzenkriteriumService service, AuswahlfeldService aService, CommonService cService, KategorieService kService, CustomizingService customizingService) {\r\n        super();\r\n        this.service = service;\r\n        this.cService = cService;\r\n        this.service.init(aService, cService, kService, customizingService);\r\n    }\r\n\r\n    public ActionForward list(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {\r\n        service.list(request);\r\n        return mapping.findForward(Constants.LIST);\r\n    }\r\n\r\n    public ActionForward prepare(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {\r\n        if (!service.populate(request)) {\r\n            ActionMessages errors = new ActionMessages();\r\n            errors.add(ActionMessages.GLOBAL_MESSAGE, new ActionMessage(\"errors.kategorien.not.set\"));\r\n            saveMessages(request, errors);\r\n            return mapping.findForward(Constants.KATEGORIEN);\r\n        }\r\n        return mapping.findForward(Constants.FORM);\r\n    }\r\n\r\n    public ActionForward edit(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {\r\n        DynaActionForm nForm = (DynaActionForm) form;\r\n        service.edit(request, nForm);\r\n        return mapping.findForward(Constants.FORM);\r\n    }\r\n\r\n    public ActionForward update(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {\r\n        DynaActionForm nForm = (DynaActionForm) form;\r\n        service.update(request, nForm);\r\n        service.list(request);\r\n        return mapping.findForward(Constants.LIST);\r\n    }\r\n\r\n    public ActionForward deletequestion(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {\r\n        DynaActionForm nForm = (DynaActionForm) form;\r\n        Nutzenkriterium n = service.getNutzenkriterium(request, nForm);\r\n        if (n == null) {\r\n            service.list(request);\r\n            return mapping.findForward(Constants.LIST);\r\n        }\r\n        ActionMessages messages = new ActionMessages();\r\n        service.deleteQuestion(request, n, messages);\r\n        saveMessages(request, messages);\r\n        return mapping.findForward(Constants.QUESTION);\r\n    }\r\n\r\n    public ActionForward delete(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {\r\n        DynaActionForm nForm = (DynaActionForm) form;\r\n        Nutzenkriterium n = service.getNutzenkriterium(request, nForm);\r\n        if (n == null) {\r\n            service.list(request);\r\n            return mapping.findForward(Constants.LIST);\r\n        }\r\n        // Lï¿½schen\r\n        service.delete(request, n);\r\n        service.list(request);\r\n        return mapping.findForward(Constants.LIST);\r\n    }\r\n\r\n    public ActionForward remove(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {\r\n        DynaActionForm nForm = (DynaActionForm) form;\r\n        service.remove(request, nForm);\r\n        service.populate(request);\r\n        return mapping.findForward(Constants.FORM);\r\n    }\r\n\r\n    public ActionForward set(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {\r\n        DynaActionForm nForm = (DynaActionForm) form;\r\n        service.set(request, nForm);\r\n        service.populate(request);\r\n        return mapping.findForward(Constants.FORM);\r\n    }\r\n\r\n    public ActionForward next(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {\r\n        service.populate(request);\r\n        if (service.next(request)) {\r\n            return mapping.findForward(Constants.NEXT);\r\n        }\r\n        return mapping.findForward(Constants.FORM);\r\n    }\r\n\r\n    public ActionForward populate(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {\r\n        FragenForm nForm = (FragenForm) form;\r\n        if (!service.populateFragen(request, nForm)) {\r\n            ActionMessages errors = new ActionMessages();\r\n            errors.add(ActionMessages.GLOBAL_MESSAGE, new ActionMessage(\"errors.nutzenkriterien.not.set\"));\r\n            saveMessages(request, errors);\r\n            return mapping.findForward(Constants.NUTZENKRITERIEN);\r\n        }\r\n        return mapping.findForward(Constants.FORM);\r\n    }\r\n\r\n    public ActionForward save(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {\r\n        FragenForm nForm = (FragenForm) form;\r\n        // validieren und speichern\r\n        ActionMessages errors = new ActionMessages();\r\n        if (service.saveFragen(request, nForm, errors)) {\r\n            return mapping.findForward(Constants.SUCCESS);\r\n        }\r\n        // Fehler bei der Validierung\r\n        saveErrors(request, errors);\r\n        service.populateFragen(request, nForm);\r\n        return mapping.findForward(Constants.FAILURE);\r\n    }\r\n\r\n    public ActionForward select(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {\r\n        // Vorselektieren anhand anzahl auswahlfelder\r\n        if (!service.populate(request)) {\r\n            ActionMessages errors = new ActionMessages();\r\n            errors.add(ActionMessages.GLOBAL_MESSAGE, new ActionMessage(\"errors.kategorien.not.set\"));\r\n            saveMessages(request, errors);\r\n            return mapping.findForward(Constants.KATEGORIEN);\r\n        }\r\n        service.preselect(request, mapping.getPath());\r\n        cService.isOperativerNutzen(request);\r\n        return mapping.findForward(Constants.FORM);\r\n    }\r\n\r\n    public ActionForward saveAbstufungen(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {\r\n        // Anzahl Abstufungen in die Session stellen\r\n        DynaActionForm aForm = (DynaActionForm) form;\r\n        Integer abstufung = (Integer) aForm.get(Constants.ABSTUFUNGEN);\r\n        logger.debug(\"Gewï¿½hlte Abstufung: \" + abstufung);\r\n        request.getSession().setAttribute(Constants.ABSTUFUNGEN, abstufung);\r\n        return mapping.findForward(Constants.NEXT);\r\n    }\r\n\r\n    public ActionForward saveGewichtungstyp(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {\r\n        // Gewichtugnstyp in die Session stellen\r\n        DynaActionForm aForm = (DynaActionForm) form;\r\n        Integer gewichtungstyp = (Integer) aForm.get(Constants.GEWICHTUNGSTYP);\r\n        logger.debug(\"Gewï¿½hlter Gewichtugnstyp: \" + gewichtungstyp);\r\n        request.getSession().setAttribute(Constants.GEWICHTUNGSTYP, gewichtungstyp);\r\n        // Operativer Nutzen -> Projektbetroffene\r\n        if (cService.isOperativerNutzen(request)) {\r\n            request.setAttribute(Constants.PROJEKTBETROFFENE, true);\r\n        }\r\n        if (service.direkteGewichtung(request)) {\r\n            return mapping.findForward(Constants.DIREKT);\r\n        }\r\n        return mapping.findForward(Constants.NEXT);\r\n    }\r\n\r\n    public ActionForward prepareDirekteGewichtung(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {\r\n        FragenForm fForm = (FragenForm) form;\r\n        service.populateDirekteGewichtung(request, fForm);\r\n        return mapping.findForward(Constants.FORM);\r\n    }\r\n\r\n    public ActionForward saveDirekteGewichtung(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {\r\n        FragenForm fForm = (FragenForm) form;\r\n        ActionMessages errors = new ActionMessages();\r\n        if (!service.saveDirekteGewichtung(request, fForm, errors)) {\r\n            saveMessages(request, errors);\r\n            service.populateDirekteGewichtung(request, fForm);\r\n            return mapping.findForward(Constants.FORM);\r\n        }\r\n        // Allfï¿½llige gewichtung ï¿½ber Fragebogen lï¿½schen\r\n        service.deleteFragebogenGewichtung(request);\r\n        if (cService.isOperativerNutzen(request)) {\r\n            if (!service.customizingComplete(request)) {\r\n                service.populateDirekteGewichtung(request, fForm);\r\n                return mapping.findForward(Constants.FORM);\r\n            }\r\n            return mapping.findForward(Constants.END);\r\n        }\r\n        return mapping.findForward(Constants.NEXT);\r\n    }\r\n\r\n    public ActionForward add(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {\r\n        DynaActionForm nForm = (DynaActionForm) form;\r\n        ActionMessages errors = new ActionMessages();\r\n        ActionMessages messages = new ActionMessages();\r\n        if (!service.add(request, nForm, errors, messages)) {\r\n            saveErrors(request, errors);\r\n            saveMessages(request, messages);\r\n        }\r\n        service.populate(request);\r\n        return mapping.findForward(Constants.FORM);\r\n    }\r\n}\r\n",
		"id": "EvoSuiteBenchmark/46_nutzenportfolio/src/main/java/ch/bfh/egov/nutzenportfolio/action/NutzenkriteriumActionTest12.java",
		"test_prompt": "// NutzenkriteriumActionTest12.java\npackage ch.bfh.egov.nutzenportfolio.action;\n\nimport javax.servlet.http.HttpServletRequest;\nimport javax.servlet.http.HttpServletResponse;\nimport ch.bfh.egov.nutzenportfolio.Constants;\nimport ch.bfh.egov.nutzenportfolio.form.FragenForm;\nimport ch.bfh.egov.nutzenportfolio.service.auswahlfeld.AuswahlfeldService;\nimport ch.bfh.egov.nutzenportfolio.service.common.CommonService;\nimport ch.bfh.egov.nutzenportfolio.service.customizing.CustomizingService;\nimport ch.bfh.egov.nutzenportfolio.service.kategorie.KategorieService;\nimport ch.bfh.egov.nutzenportfolio.service.nutzenkriterium.NutzenkriteriumService;\nimport ch.bfh.egov.nutzenportfolio.tos.Nutzenkriterium;\nimport org.apache.commons.logging.Log;\nimport org.apache.commons.logging.LogFactory;\nimport org.apache.struts.action.ActionForm;\nimport org.apache.struts.action.ActionForward;\nimport org.apache.struts.action.ActionMapping;\nimport org.apache.struts.action.ActionMessage;\nimport org.apache.struts.action.ActionMessages;\nimport org.apache.struts.action.DynaActionForm;\nimport org.apache.struts.actions.DispatchAction;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link NutzenkriteriumAction}.\n* It contains ten unit test cases for the {@link NutzenkriteriumAction#saveGewichtungstyp(ActionMapping, ActionForm, HttpServletRequest, HttpServletResponse)} method.\n*/\nclass NutzenkriteriumActionTest12 {"
	},
	{
		"original_code": "// NutzenkriteriumAction.java\n/**\r\n * Nutzenportfolio\r\n * Copyright (C) 2006 Kompetenzzentrum E-Business, Simon Bergamin\r\n *\r\n * This program is free software; you can redistribute it and/or\r\n * modify it under the terms of the GNU General Public License\r\n * as published by the Free Software Foundation; either version 2\r\n * of the License, or (at your option) any later version.\r\n *\r\n * This program is distributed in the hope that it will be useful,\r\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n * GNU General Public License for more details.\r\n *\r\n * You should have received a copy of the GNU General Public License\r\n * along with this program; if not, write to the Free Software\r\n * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\r\n */\r\npackage ch.bfh.egov.nutzenportfolio.action;\r\n\r\nimport javax.servlet.http.HttpServletRequest;\r\nimport javax.servlet.http.HttpServletResponse;\r\nimport ch.bfh.egov.nutzenportfolio.Constants;\r\nimport ch.bfh.egov.nutzenportfolio.form.FragenForm;\r\nimport ch.bfh.egov.nutzenportfolio.service.auswahlfeld.AuswahlfeldService;\r\nimport ch.bfh.egov.nutzenportfolio.service.common.CommonService;\r\nimport ch.bfh.egov.nutzenportfolio.service.customizing.CustomizingService;\r\nimport ch.bfh.egov.nutzenportfolio.service.kategorie.KategorieService;\r\nimport ch.bfh.egov.nutzenportfolio.service.nutzenkriterium.NutzenkriteriumService;\r\nimport ch.bfh.egov.nutzenportfolio.tos.Nutzenkriterium;\r\nimport org.apache.commons.logging.Log;\r\nimport org.apache.commons.logging.LogFactory;\r\nimport org.apache.struts.action.ActionForm;\r\nimport org.apache.struts.action.ActionForward;\r\nimport org.apache.struts.action.ActionMapping;\r\nimport org.apache.struts.action.ActionMessage;\r\nimport org.apache.struts.action.ActionMessages;\r\nimport org.apache.struts.action.DynaActionForm;\r\nimport org.apache.struts.actions.DispatchAction;\r\n\r\npublic class NutzenkriteriumAction extends DispatchAction {\r\n\r\n    private NutzenkriteriumService service;\r\n\r\n    private CommonService cService;\r\n\r\n    private Log logger = LogFactory.getLog(this.getClass());\r\n\r\n    public NutzenkriteriumAction(NutzenkriteriumService service, AuswahlfeldService aService, CommonService cService, KategorieService kService, CustomizingService customizingService) {\r\n        super();\r\n        this.service = service;\r\n        this.cService = cService;\r\n        this.service.init(aService, cService, kService, customizingService);\r\n    }\r\n\r\n    public ActionForward list(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {\r\n        service.list(request);\r\n        return mapping.findForward(Constants.LIST);\r\n    }\r\n\r\n    public ActionForward prepare(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {\r\n        if (!service.populate(request)) {\r\n            ActionMessages errors = new ActionMessages();\r\n            errors.add(ActionMessages.GLOBAL_MESSAGE, new ActionMessage(\"errors.kategorien.not.set\"));\r\n            saveMessages(request, errors);\r\n            return mapping.findForward(Constants.KATEGORIEN);\r\n        }\r\n        return mapping.findForward(Constants.FORM);\r\n    }\r\n\r\n    public ActionForward edit(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {\r\n        DynaActionForm nForm = (DynaActionForm) form;\r\n        service.edit(request, nForm);\r\n        return mapping.findForward(Constants.FORM);\r\n    }\r\n\r\n    public ActionForward update(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {\r\n        DynaActionForm nForm = (DynaActionForm) form;\r\n        service.update(request, nForm);\r\n        service.list(request);\r\n        return mapping.findForward(Constants.LIST);\r\n    }\r\n\r\n    public ActionForward deletequestion(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {\r\n        DynaActionForm nForm = (DynaActionForm) form;\r\n        Nutzenkriterium n = service.getNutzenkriterium(request, nForm);\r\n        if (n == null) {\r\n            service.list(request);\r\n            return mapping.findForward(Constants.LIST);\r\n        }\r\n        ActionMessages messages = new ActionMessages();\r\n        service.deleteQuestion(request, n, messages);\r\n        saveMessages(request, messages);\r\n        return mapping.findForward(Constants.QUESTION);\r\n    }\r\n\r\n    public ActionForward delete(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {\r\n        DynaActionForm nForm = (DynaActionForm) form;\r\n        Nutzenkriterium n = service.getNutzenkriterium(request, nForm);\r\n        if (n == null) {\r\n            service.list(request);\r\n            return mapping.findForward(Constants.LIST);\r\n        }\r\n        // Lï¿½schen\r\n        service.delete(request, n);\r\n        service.list(request);\r\n        return mapping.findForward(Constants.LIST);\r\n    }\r\n\r\n    public ActionForward remove(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {\r\n        DynaActionForm nForm = (DynaActionForm) form;\r\n        service.remove(request, nForm);\r\n        service.populate(request);\r\n        return mapping.findForward(Constants.FORM);\r\n    }\r\n\r\n    public ActionForward set(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {\r\n        DynaActionForm nForm = (DynaActionForm) form;\r\n        service.set(request, nForm);\r\n        service.populate(request);\r\n        return mapping.findForward(Constants.FORM);\r\n    }\r\n\r\n    public ActionForward next(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {\r\n        service.populate(request);\r\n        if (service.next(request)) {\r\n            return mapping.findForward(Constants.NEXT);\r\n        }\r\n        return mapping.findForward(Constants.FORM);\r\n    }\r\n\r\n    public ActionForward populate(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {\r\n        FragenForm nForm = (FragenForm) form;\r\n        if (!service.populateFragen(request, nForm)) {\r\n            ActionMessages errors = new ActionMessages();\r\n            errors.add(ActionMessages.GLOBAL_MESSAGE, new ActionMessage(\"errors.nutzenkriterien.not.set\"));\r\n            saveMessages(request, errors);\r\n            return mapping.findForward(Constants.NUTZENKRITERIEN);\r\n        }\r\n        return mapping.findForward(Constants.FORM);\r\n    }\r\n\r\n    public ActionForward save(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {\r\n        FragenForm nForm = (FragenForm) form;\r\n        // validieren und speichern\r\n        ActionMessages errors = new ActionMessages();\r\n        if (service.saveFragen(request, nForm, errors)) {\r\n            return mapping.findForward(Constants.SUCCESS);\r\n        }\r\n        // Fehler bei der Validierung\r\n        saveErrors(request, errors);\r\n        service.populateFragen(request, nForm);\r\n        return mapping.findForward(Constants.FAILURE);\r\n    }\r\n\r\n    public ActionForward select(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {\r\n        // Vorselektieren anhand anzahl auswahlfelder\r\n        if (!service.populate(request)) {\r\n            ActionMessages errors = new ActionMessages();\r\n            errors.add(ActionMessages.GLOBAL_MESSAGE, new ActionMessage(\"errors.kategorien.not.set\"));\r\n            saveMessages(request, errors);\r\n            return mapping.findForward(Constants.KATEGORIEN);\r\n        }\r\n        service.preselect(request, mapping.getPath());\r\n        cService.isOperativerNutzen(request);\r\n        return mapping.findForward(Constants.FORM);\r\n    }\r\n\r\n    public ActionForward saveAbstufungen(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {\r\n        // Anzahl Abstufungen in die Session stellen\r\n        DynaActionForm aForm = (DynaActionForm) form;\r\n        Integer abstufung = (Integer) aForm.get(Constants.ABSTUFUNGEN);\r\n        logger.debug(\"Gewï¿½hlte Abstufung: \" + abstufung);\r\n        request.getSession().setAttribute(Constants.ABSTUFUNGEN, abstufung);\r\n        return mapping.findForward(Constants.NEXT);\r\n    }\r\n\r\n    public ActionForward saveGewichtungstyp(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {\r\n        // Gewichtugnstyp in die Session stellen\r\n        DynaActionForm aForm = (DynaActionForm) form;\r\n        Integer gewichtungstyp = (Integer) aForm.get(Constants.GEWICHTUNGSTYP);\r\n        logger.debug(\"Gewï¿½hlter Gewichtugnstyp: \" + gewichtungstyp);\r\n        request.getSession().setAttribute(Constants.GEWICHTUNGSTYP, gewichtungstyp);\r\n        // Operativer Nutzen -> Projektbetroffene\r\n        if (cService.isOperativerNutzen(request)) {\r\n            request.setAttribute(Constants.PROJEKTBETROFFENE, true);\r\n        }\r\n        if (service.direkteGewichtung(request)) {\r\n            return mapping.findForward(Constants.DIREKT);\r\n        }\r\n        return mapping.findForward(Constants.NEXT);\r\n    }\r\n\r\n    public ActionForward prepareDirekteGewichtung(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {\r\n        FragenForm fForm = (FragenForm) form;\r\n        service.populateDirekteGewichtung(request, fForm);\r\n        return mapping.findForward(Constants.FORM);\r\n    }\r\n\r\n    public ActionForward saveDirekteGewichtung(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {\r\n        FragenForm fForm = (FragenForm) form;\r\n        ActionMessages errors = new ActionMessages();\r\n        if (!service.saveDirekteGewichtung(request, fForm, errors)) {\r\n            saveMessages(request, errors);\r\n            service.populateDirekteGewichtung(request, fForm);\r\n            return mapping.findForward(Constants.FORM);\r\n        }\r\n        // Allfï¿½llige gewichtung ï¿½ber Fragebogen lï¿½schen\r\n        service.deleteFragebogenGewichtung(request);\r\n        if (cService.isOperativerNutzen(request)) {\r\n            if (!service.customizingComplete(request)) {\r\n                service.populateDirekteGewichtung(request, fForm);\r\n                return mapping.findForward(Constants.FORM);\r\n            }\r\n            return mapping.findForward(Constants.END);\r\n        }\r\n        return mapping.findForward(Constants.NEXT);\r\n    }\r\n\r\n    public ActionForward add(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {\r\n        DynaActionForm nForm = (DynaActionForm) form;\r\n        ActionMessages errors = new ActionMessages();\r\n        ActionMessages messages = new ActionMessages();\r\n        if (!service.add(request, nForm, errors, messages)) {\r\n            saveErrors(request, errors);\r\n            saveMessages(request, messages);\r\n        }\r\n        service.populate(request);\r\n        return mapping.findForward(Constants.FORM);\r\n    }\r\n}\r\n",
		"id": "EvoSuiteBenchmark/46_nutzenportfolio/src/main/java/ch/bfh/egov/nutzenportfolio/action/NutzenkriteriumActionTest13.java",
		"test_prompt": "// NutzenkriteriumActionTest13.java\npackage ch.bfh.egov.nutzenportfolio.action;\n\nimport javax.servlet.http.HttpServletRequest;\nimport javax.servlet.http.HttpServletResponse;\nimport ch.bfh.egov.nutzenportfolio.Constants;\nimport ch.bfh.egov.nutzenportfolio.form.FragenForm;\nimport ch.bfh.egov.nutzenportfolio.service.auswahlfeld.AuswahlfeldService;\nimport ch.bfh.egov.nutzenportfolio.service.common.CommonService;\nimport ch.bfh.egov.nutzenportfolio.service.customizing.CustomizingService;\nimport ch.bfh.egov.nutzenportfolio.service.kategorie.KategorieService;\nimport ch.bfh.egov.nutzenportfolio.service.nutzenkriterium.NutzenkriteriumService;\nimport ch.bfh.egov.nutzenportfolio.tos.Nutzenkriterium;\nimport org.apache.commons.logging.Log;\nimport org.apache.commons.logging.LogFactory;\nimport org.apache.struts.action.ActionForm;\nimport org.apache.struts.action.ActionForward;\nimport org.apache.struts.action.ActionMapping;\nimport org.apache.struts.action.ActionMessage;\nimport org.apache.struts.action.ActionMessages;\nimport org.apache.struts.action.DynaActionForm;\nimport org.apache.struts.actions.DispatchAction;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link NutzenkriteriumAction}.\n* It contains ten unit test cases for the {@link NutzenkriteriumAction#prepareDirekteGewichtung(ActionMapping, ActionForm, HttpServletRequest, HttpServletResponse)} method.\n*/\nclass NutzenkriteriumActionTest13 {"
	},
	{
		"original_code": "// NutzenkriteriumAction.java\n/**\r\n * Nutzenportfolio\r\n * Copyright (C) 2006 Kompetenzzentrum E-Business, Simon Bergamin\r\n *\r\n * This program is free software; you can redistribute it and/or\r\n * modify it under the terms of the GNU General Public License\r\n * as published by the Free Software Foundation; either version 2\r\n * of the License, or (at your option) any later version.\r\n *\r\n * This program is distributed in the hope that it will be useful,\r\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n * GNU General Public License for more details.\r\n *\r\n * You should have received a copy of the GNU General Public License\r\n * along with this program; if not, write to the Free Software\r\n * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\r\n */\r\npackage ch.bfh.egov.nutzenportfolio.action;\r\n\r\nimport javax.servlet.http.HttpServletRequest;\r\nimport javax.servlet.http.HttpServletResponse;\r\nimport ch.bfh.egov.nutzenportfolio.Constants;\r\nimport ch.bfh.egov.nutzenportfolio.form.FragenForm;\r\nimport ch.bfh.egov.nutzenportfolio.service.auswahlfeld.AuswahlfeldService;\r\nimport ch.bfh.egov.nutzenportfolio.service.common.CommonService;\r\nimport ch.bfh.egov.nutzenportfolio.service.customizing.CustomizingService;\r\nimport ch.bfh.egov.nutzenportfolio.service.kategorie.KategorieService;\r\nimport ch.bfh.egov.nutzenportfolio.service.nutzenkriterium.NutzenkriteriumService;\r\nimport ch.bfh.egov.nutzenportfolio.tos.Nutzenkriterium;\r\nimport org.apache.commons.logging.Log;\r\nimport org.apache.commons.logging.LogFactory;\r\nimport org.apache.struts.action.ActionForm;\r\nimport org.apache.struts.action.ActionForward;\r\nimport org.apache.struts.action.ActionMapping;\r\nimport org.apache.struts.action.ActionMessage;\r\nimport org.apache.struts.action.ActionMessages;\r\nimport org.apache.struts.action.DynaActionForm;\r\nimport org.apache.struts.actions.DispatchAction;\r\n\r\npublic class NutzenkriteriumAction extends DispatchAction {\r\n\r\n    private NutzenkriteriumService service;\r\n\r\n    private CommonService cService;\r\n\r\n    private Log logger = LogFactory.getLog(this.getClass());\r\n\r\n    public NutzenkriteriumAction(NutzenkriteriumService service, AuswahlfeldService aService, CommonService cService, KategorieService kService, CustomizingService customizingService) {\r\n        super();\r\n        this.service = service;\r\n        this.cService = cService;\r\n        this.service.init(aService, cService, kService, customizingService);\r\n    }\r\n\r\n    public ActionForward list(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {\r\n        service.list(request);\r\n        return mapping.findForward(Constants.LIST);\r\n    }\r\n\r\n    public ActionForward prepare(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {\r\n        if (!service.populate(request)) {\r\n            ActionMessages errors = new ActionMessages();\r\n            errors.add(ActionMessages.GLOBAL_MESSAGE, new ActionMessage(\"errors.kategorien.not.set\"));\r\n            saveMessages(request, errors);\r\n            return mapping.findForward(Constants.KATEGORIEN);\r\n        }\r\n        return mapping.findForward(Constants.FORM);\r\n    }\r\n\r\n    public ActionForward edit(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {\r\n        DynaActionForm nForm = (DynaActionForm) form;\r\n        service.edit(request, nForm);\r\n        return mapping.findForward(Constants.FORM);\r\n    }\r\n\r\n    public ActionForward update(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {\r\n        DynaActionForm nForm = (DynaActionForm) form;\r\n        service.update(request, nForm);\r\n        service.list(request);\r\n        return mapping.findForward(Constants.LIST);\r\n    }\r\n\r\n    public ActionForward deletequestion(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {\r\n        DynaActionForm nForm = (DynaActionForm) form;\r\n        Nutzenkriterium n = service.getNutzenkriterium(request, nForm);\r\n        if (n == null) {\r\n            service.list(request);\r\n            return mapping.findForward(Constants.LIST);\r\n        }\r\n        ActionMessages messages = new ActionMessages();\r\n        service.deleteQuestion(request, n, messages);\r\n        saveMessages(request, messages);\r\n        return mapping.findForward(Constants.QUESTION);\r\n    }\r\n\r\n    public ActionForward delete(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {\r\n        DynaActionForm nForm = (DynaActionForm) form;\r\n        Nutzenkriterium n = service.getNutzenkriterium(request, nForm);\r\n        if (n == null) {\r\n            service.list(request);\r\n            return mapping.findForward(Constants.LIST);\r\n        }\r\n        // Lï¿½schen\r\n        service.delete(request, n);\r\n        service.list(request);\r\n        return mapping.findForward(Constants.LIST);\r\n    }\r\n\r\n    public ActionForward remove(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {\r\n        DynaActionForm nForm = (DynaActionForm) form;\r\n        service.remove(request, nForm);\r\n        service.populate(request);\r\n        return mapping.findForward(Constants.FORM);\r\n    }\r\n\r\n    public ActionForward set(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {\r\n        DynaActionForm nForm = (DynaActionForm) form;\r\n        service.set(request, nForm);\r\n        service.populate(request);\r\n        return mapping.findForward(Constants.FORM);\r\n    }\r\n\r\n    public ActionForward next(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {\r\n        service.populate(request);\r\n        if (service.next(request)) {\r\n            return mapping.findForward(Constants.NEXT);\r\n        }\r\n        return mapping.findForward(Constants.FORM);\r\n    }\r\n\r\n    public ActionForward populate(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {\r\n        FragenForm nForm = (FragenForm) form;\r\n        if (!service.populateFragen(request, nForm)) {\r\n            ActionMessages errors = new ActionMessages();\r\n            errors.add(ActionMessages.GLOBAL_MESSAGE, new ActionMessage(\"errors.nutzenkriterien.not.set\"));\r\n            saveMessages(request, errors);\r\n            return mapping.findForward(Constants.NUTZENKRITERIEN);\r\n        }\r\n        return mapping.findForward(Constants.FORM);\r\n    }\r\n\r\n    public ActionForward save(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {\r\n        FragenForm nForm = (FragenForm) form;\r\n        // validieren und speichern\r\n        ActionMessages errors = new ActionMessages();\r\n        if (service.saveFragen(request, nForm, errors)) {\r\n            return mapping.findForward(Constants.SUCCESS);\r\n        }\r\n        // Fehler bei der Validierung\r\n        saveErrors(request, errors);\r\n        service.populateFragen(request, nForm);\r\n        return mapping.findForward(Constants.FAILURE);\r\n    }\r\n\r\n    public ActionForward select(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {\r\n        // Vorselektieren anhand anzahl auswahlfelder\r\n        if (!service.populate(request)) {\r\n            ActionMessages errors = new ActionMessages();\r\n            errors.add(ActionMessages.GLOBAL_MESSAGE, new ActionMessage(\"errors.kategorien.not.set\"));\r\n            saveMessages(request, errors);\r\n            return mapping.findForward(Constants.KATEGORIEN);\r\n        }\r\n        service.preselect(request, mapping.getPath());\r\n        cService.isOperativerNutzen(request);\r\n        return mapping.findForward(Constants.FORM);\r\n    }\r\n\r\n    public ActionForward saveAbstufungen(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {\r\n        // Anzahl Abstufungen in die Session stellen\r\n        DynaActionForm aForm = (DynaActionForm) form;\r\n        Integer abstufung = (Integer) aForm.get(Constants.ABSTUFUNGEN);\r\n        logger.debug(\"Gewï¿½hlte Abstufung: \" + abstufung);\r\n        request.getSession().setAttribute(Constants.ABSTUFUNGEN, abstufung);\r\n        return mapping.findForward(Constants.NEXT);\r\n    }\r\n\r\n    public ActionForward saveGewichtungstyp(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {\r\n        // Gewichtugnstyp in die Session stellen\r\n        DynaActionForm aForm = (DynaActionForm) form;\r\n        Integer gewichtungstyp = (Integer) aForm.get(Constants.GEWICHTUNGSTYP);\r\n        logger.debug(\"Gewï¿½hlter Gewichtugnstyp: \" + gewichtungstyp);\r\n        request.getSession().setAttribute(Constants.GEWICHTUNGSTYP, gewichtungstyp);\r\n        // Operativer Nutzen -> Projektbetroffene\r\n        if (cService.isOperativerNutzen(request)) {\r\n            request.setAttribute(Constants.PROJEKTBETROFFENE, true);\r\n        }\r\n        if (service.direkteGewichtung(request)) {\r\n            return mapping.findForward(Constants.DIREKT);\r\n        }\r\n        return mapping.findForward(Constants.NEXT);\r\n    }\r\n\r\n    public ActionForward prepareDirekteGewichtung(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {\r\n        FragenForm fForm = (FragenForm) form;\r\n        service.populateDirekteGewichtung(request, fForm);\r\n        return mapping.findForward(Constants.FORM);\r\n    }\r\n\r\n    public ActionForward saveDirekteGewichtung(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {\r\n        FragenForm fForm = (FragenForm) form;\r\n        ActionMessages errors = new ActionMessages();\r\n        if (!service.saveDirekteGewichtung(request, fForm, errors)) {\r\n            saveMessages(request, errors);\r\n            service.populateDirekteGewichtung(request, fForm);\r\n            return mapping.findForward(Constants.FORM);\r\n        }\r\n        // Allfï¿½llige gewichtung ï¿½ber Fragebogen lï¿½schen\r\n        service.deleteFragebogenGewichtung(request);\r\n        if (cService.isOperativerNutzen(request)) {\r\n            if (!service.customizingComplete(request)) {\r\n                service.populateDirekteGewichtung(request, fForm);\r\n                return mapping.findForward(Constants.FORM);\r\n            }\r\n            return mapping.findForward(Constants.END);\r\n        }\r\n        return mapping.findForward(Constants.NEXT);\r\n    }\r\n\r\n    public ActionForward add(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {\r\n        DynaActionForm nForm = (DynaActionForm) form;\r\n        ActionMessages errors = new ActionMessages();\r\n        ActionMessages messages = new ActionMessages();\r\n        if (!service.add(request, nForm, errors, messages)) {\r\n            saveErrors(request, errors);\r\n            saveMessages(request, messages);\r\n        }\r\n        service.populate(request);\r\n        return mapping.findForward(Constants.FORM);\r\n    }\r\n}\r\n",
		"id": "EvoSuiteBenchmark/46_nutzenportfolio/src/main/java/ch/bfh/egov/nutzenportfolio/action/NutzenkriteriumActionTest14.java",
		"test_prompt": "// NutzenkriteriumActionTest14.java\npackage ch.bfh.egov.nutzenportfolio.action;\n\nimport javax.servlet.http.HttpServletRequest;\nimport javax.servlet.http.HttpServletResponse;\nimport ch.bfh.egov.nutzenportfolio.Constants;\nimport ch.bfh.egov.nutzenportfolio.form.FragenForm;\nimport ch.bfh.egov.nutzenportfolio.service.auswahlfeld.AuswahlfeldService;\nimport ch.bfh.egov.nutzenportfolio.service.common.CommonService;\nimport ch.bfh.egov.nutzenportfolio.service.customizing.CustomizingService;\nimport ch.bfh.egov.nutzenportfolio.service.kategorie.KategorieService;\nimport ch.bfh.egov.nutzenportfolio.service.nutzenkriterium.NutzenkriteriumService;\nimport ch.bfh.egov.nutzenportfolio.tos.Nutzenkriterium;\nimport org.apache.commons.logging.Log;\nimport org.apache.commons.logging.LogFactory;\nimport org.apache.struts.action.ActionForm;\nimport org.apache.struts.action.ActionForward;\nimport org.apache.struts.action.ActionMapping;\nimport org.apache.struts.action.ActionMessage;\nimport org.apache.struts.action.ActionMessages;\nimport org.apache.struts.action.DynaActionForm;\nimport org.apache.struts.actions.DispatchAction;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link NutzenkriteriumAction}.\n* It contains ten unit test cases for the {@link NutzenkriteriumAction#saveDirekteGewichtung(ActionMapping, ActionForm, HttpServletRequest, HttpServletResponse)} method.\n*/\nclass NutzenkriteriumActionTest14 {"
	},
	{
		"original_code": "// NutzenkriteriumAction.java\n/**\r\n * Nutzenportfolio\r\n * Copyright (C) 2006 Kompetenzzentrum E-Business, Simon Bergamin\r\n *\r\n * This program is free software; you can redistribute it and/or\r\n * modify it under the terms of the GNU General Public License\r\n * as published by the Free Software Foundation; either version 2\r\n * of the License, or (at your option) any later version.\r\n *\r\n * This program is distributed in the hope that it will be useful,\r\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n * GNU General Public License for more details.\r\n *\r\n * You should have received a copy of the GNU General Public License\r\n * along with this program; if not, write to the Free Software\r\n * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\r\n */\r\npackage ch.bfh.egov.nutzenportfolio.action;\r\n\r\nimport javax.servlet.http.HttpServletRequest;\r\nimport javax.servlet.http.HttpServletResponse;\r\nimport ch.bfh.egov.nutzenportfolio.Constants;\r\nimport ch.bfh.egov.nutzenportfolio.form.FragenForm;\r\nimport ch.bfh.egov.nutzenportfolio.service.auswahlfeld.AuswahlfeldService;\r\nimport ch.bfh.egov.nutzenportfolio.service.common.CommonService;\r\nimport ch.bfh.egov.nutzenportfolio.service.customizing.CustomizingService;\r\nimport ch.bfh.egov.nutzenportfolio.service.kategorie.KategorieService;\r\nimport ch.bfh.egov.nutzenportfolio.service.nutzenkriterium.NutzenkriteriumService;\r\nimport ch.bfh.egov.nutzenportfolio.tos.Nutzenkriterium;\r\nimport org.apache.commons.logging.Log;\r\nimport org.apache.commons.logging.LogFactory;\r\nimport org.apache.struts.action.ActionForm;\r\nimport org.apache.struts.action.ActionForward;\r\nimport org.apache.struts.action.ActionMapping;\r\nimport org.apache.struts.action.ActionMessage;\r\nimport org.apache.struts.action.ActionMessages;\r\nimport org.apache.struts.action.DynaActionForm;\r\nimport org.apache.struts.actions.DispatchAction;\r\n\r\npublic class NutzenkriteriumAction extends DispatchAction {\r\n\r\n    private NutzenkriteriumService service;\r\n\r\n    private CommonService cService;\r\n\r\n    private Log logger = LogFactory.getLog(this.getClass());\r\n\r\n    public NutzenkriteriumAction(NutzenkriteriumService service, AuswahlfeldService aService, CommonService cService, KategorieService kService, CustomizingService customizingService) {\r\n        super();\r\n        this.service = service;\r\n        this.cService = cService;\r\n        this.service.init(aService, cService, kService, customizingService);\r\n    }\r\n\r\n    public ActionForward list(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {\r\n        service.list(request);\r\n        return mapping.findForward(Constants.LIST);\r\n    }\r\n\r\n    public ActionForward prepare(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {\r\n        if (!service.populate(request)) {\r\n            ActionMessages errors = new ActionMessages();\r\n            errors.add(ActionMessages.GLOBAL_MESSAGE, new ActionMessage(\"errors.kategorien.not.set\"));\r\n            saveMessages(request, errors);\r\n            return mapping.findForward(Constants.KATEGORIEN);\r\n        }\r\n        return mapping.findForward(Constants.FORM);\r\n    }\r\n\r\n    public ActionForward edit(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {\r\n        DynaActionForm nForm = (DynaActionForm) form;\r\n        service.edit(request, nForm);\r\n        return mapping.findForward(Constants.FORM);\r\n    }\r\n\r\n    public ActionForward update(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {\r\n        DynaActionForm nForm = (DynaActionForm) form;\r\n        service.update(request, nForm);\r\n        service.list(request);\r\n        return mapping.findForward(Constants.LIST);\r\n    }\r\n\r\n    public ActionForward deletequestion(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {\r\n        DynaActionForm nForm = (DynaActionForm) form;\r\n        Nutzenkriterium n = service.getNutzenkriterium(request, nForm);\r\n        if (n == null) {\r\n            service.list(request);\r\n            return mapping.findForward(Constants.LIST);\r\n        }\r\n        ActionMessages messages = new ActionMessages();\r\n        service.deleteQuestion(request, n, messages);\r\n        saveMessages(request, messages);\r\n        return mapping.findForward(Constants.QUESTION);\r\n    }\r\n\r\n    public ActionForward delete(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {\r\n        DynaActionForm nForm = (DynaActionForm) form;\r\n        Nutzenkriterium n = service.getNutzenkriterium(request, nForm);\r\n        if (n == null) {\r\n            service.list(request);\r\n            return mapping.findForward(Constants.LIST);\r\n        }\r\n        // Lï¿½schen\r\n        service.delete(request, n);\r\n        service.list(request);\r\n        return mapping.findForward(Constants.LIST);\r\n    }\r\n\r\n    public ActionForward remove(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {\r\n        DynaActionForm nForm = (DynaActionForm) form;\r\n        service.remove(request, nForm);\r\n        service.populate(request);\r\n        return mapping.findForward(Constants.FORM);\r\n    }\r\n\r\n    public ActionForward set(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {\r\n        DynaActionForm nForm = (DynaActionForm) form;\r\n        service.set(request, nForm);\r\n        service.populate(request);\r\n        return mapping.findForward(Constants.FORM);\r\n    }\r\n\r\n    public ActionForward next(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {\r\n        service.populate(request);\r\n        if (service.next(request)) {\r\n            return mapping.findForward(Constants.NEXT);\r\n        }\r\n        return mapping.findForward(Constants.FORM);\r\n    }\r\n\r\n    public ActionForward populate(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {\r\n        FragenForm nForm = (FragenForm) form;\r\n        if (!service.populateFragen(request, nForm)) {\r\n            ActionMessages errors = new ActionMessages();\r\n            errors.add(ActionMessages.GLOBAL_MESSAGE, new ActionMessage(\"errors.nutzenkriterien.not.set\"));\r\n            saveMessages(request, errors);\r\n            return mapping.findForward(Constants.NUTZENKRITERIEN);\r\n        }\r\n        return mapping.findForward(Constants.FORM);\r\n    }\r\n\r\n    public ActionForward save(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {\r\n        FragenForm nForm = (FragenForm) form;\r\n        // validieren und speichern\r\n        ActionMessages errors = new ActionMessages();\r\n        if (service.saveFragen(request, nForm, errors)) {\r\n            return mapping.findForward(Constants.SUCCESS);\r\n        }\r\n        // Fehler bei der Validierung\r\n        saveErrors(request, errors);\r\n        service.populateFragen(request, nForm);\r\n        return mapping.findForward(Constants.FAILURE);\r\n    }\r\n\r\n    public ActionForward select(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {\r\n        // Vorselektieren anhand anzahl auswahlfelder\r\n        if (!service.populate(request)) {\r\n            ActionMessages errors = new ActionMessages();\r\n            errors.add(ActionMessages.GLOBAL_MESSAGE, new ActionMessage(\"errors.kategorien.not.set\"));\r\n            saveMessages(request, errors);\r\n            return mapping.findForward(Constants.KATEGORIEN);\r\n        }\r\n        service.preselect(request, mapping.getPath());\r\n        cService.isOperativerNutzen(request);\r\n        return mapping.findForward(Constants.FORM);\r\n    }\r\n\r\n    public ActionForward saveAbstufungen(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {\r\n        // Anzahl Abstufungen in die Session stellen\r\n        DynaActionForm aForm = (DynaActionForm) form;\r\n        Integer abstufung = (Integer) aForm.get(Constants.ABSTUFUNGEN);\r\n        logger.debug(\"Gewï¿½hlte Abstufung: \" + abstufung);\r\n        request.getSession().setAttribute(Constants.ABSTUFUNGEN, abstufung);\r\n        return mapping.findForward(Constants.NEXT);\r\n    }\r\n\r\n    public ActionForward saveGewichtungstyp(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {\r\n        // Gewichtugnstyp in die Session stellen\r\n        DynaActionForm aForm = (DynaActionForm) form;\r\n        Integer gewichtungstyp = (Integer) aForm.get(Constants.GEWICHTUNGSTYP);\r\n        logger.debug(\"Gewï¿½hlter Gewichtugnstyp: \" + gewichtungstyp);\r\n        request.getSession().setAttribute(Constants.GEWICHTUNGSTYP, gewichtungstyp);\r\n        // Operativer Nutzen -> Projektbetroffene\r\n        if (cService.isOperativerNutzen(request)) {\r\n            request.setAttribute(Constants.PROJEKTBETROFFENE, true);\r\n        }\r\n        if (service.direkteGewichtung(request)) {\r\n            return mapping.findForward(Constants.DIREKT);\r\n        }\r\n        return mapping.findForward(Constants.NEXT);\r\n    }\r\n\r\n    public ActionForward prepareDirekteGewichtung(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {\r\n        FragenForm fForm = (FragenForm) form;\r\n        service.populateDirekteGewichtung(request, fForm);\r\n        return mapping.findForward(Constants.FORM);\r\n    }\r\n\r\n    public ActionForward saveDirekteGewichtung(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {\r\n        FragenForm fForm = (FragenForm) form;\r\n        ActionMessages errors = new ActionMessages();\r\n        if (!service.saveDirekteGewichtung(request, fForm, errors)) {\r\n            saveMessages(request, errors);\r\n            service.populateDirekteGewichtung(request, fForm);\r\n            return mapping.findForward(Constants.FORM);\r\n        }\r\n        // Allfï¿½llige gewichtung ï¿½ber Fragebogen lï¿½schen\r\n        service.deleteFragebogenGewichtung(request);\r\n        if (cService.isOperativerNutzen(request)) {\r\n            if (!service.customizingComplete(request)) {\r\n                service.populateDirekteGewichtung(request, fForm);\r\n                return mapping.findForward(Constants.FORM);\r\n            }\r\n            return mapping.findForward(Constants.END);\r\n        }\r\n        return mapping.findForward(Constants.NEXT);\r\n    }\r\n\r\n    public ActionForward add(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {\r\n        DynaActionForm nForm = (DynaActionForm) form;\r\n        ActionMessages errors = new ActionMessages();\r\n        ActionMessages messages = new ActionMessages();\r\n        if (!service.add(request, nForm, errors, messages)) {\r\n            saveErrors(request, errors);\r\n            saveMessages(request, messages);\r\n        }\r\n        service.populate(request);\r\n        return mapping.findForward(Constants.FORM);\r\n    }\r\n}\r\n",
		"id": "EvoSuiteBenchmark/46_nutzenportfolio/src/main/java/ch/bfh/egov/nutzenportfolio/action/NutzenkriteriumActionTest15.java",
		"test_prompt": "// NutzenkriteriumActionTest15.java\npackage ch.bfh.egov.nutzenportfolio.action;\n\nimport javax.servlet.http.HttpServletRequest;\nimport javax.servlet.http.HttpServletResponse;\nimport ch.bfh.egov.nutzenportfolio.Constants;\nimport ch.bfh.egov.nutzenportfolio.form.FragenForm;\nimport ch.bfh.egov.nutzenportfolio.service.auswahlfeld.AuswahlfeldService;\nimport ch.bfh.egov.nutzenportfolio.service.common.CommonService;\nimport ch.bfh.egov.nutzenportfolio.service.customizing.CustomizingService;\nimport ch.bfh.egov.nutzenportfolio.service.kategorie.KategorieService;\nimport ch.bfh.egov.nutzenportfolio.service.nutzenkriterium.NutzenkriteriumService;\nimport ch.bfh.egov.nutzenportfolio.tos.Nutzenkriterium;\nimport org.apache.commons.logging.Log;\nimport org.apache.commons.logging.LogFactory;\nimport org.apache.struts.action.ActionForm;\nimport org.apache.struts.action.ActionForward;\nimport org.apache.struts.action.ActionMapping;\nimport org.apache.struts.action.ActionMessage;\nimport org.apache.struts.action.ActionMessages;\nimport org.apache.struts.action.DynaActionForm;\nimport org.apache.struts.actions.DispatchAction;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link NutzenkriteriumAction}.\n* It contains ten unit test cases for the {@link NutzenkriteriumAction#add(ActionMapping, ActionForm, HttpServletRequest, HttpServletResponse)} method.\n*/\nclass NutzenkriteriumActionTest15 {"
	},
	{
		"original_code": "// ProjektAction.java\n/**\r\n * Nutzenportfolio\r\n * Copyright (C) 2006 Kompetenzzentrum E-Business, Simon Bergamin\r\n *\r\n * This program is free software; you can redistribute it and/or\r\n * modify it under the terms of the GNU General Public License\r\n * as published by the Free Software Foundation; either version 2\r\n * of the License, or (at your option) any later version.\r\n *\r\n * This program is distributed in the hope that it will be useful,\r\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n * GNU General Public License for more details.\r\n *\r\n * You should have received a copy of the GNU General Public License\r\n * along with this program; if not, write to the Free Software\r\n * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\r\n */\r\npackage ch.bfh.egov.nutzenportfolio.action;\r\n\r\nimport javax.servlet.http.HttpServletRequest;\r\nimport javax.servlet.http.HttpServletResponse;\r\nimport ch.bfh.egov.nutzenportfolio.Constants;\r\nimport ch.bfh.egov.nutzenportfolio.service.projekt.ProjektService;\r\nimport ch.bfh.egov.nutzenportfolio.service.projektgruppe.ProjektgruppeService;\r\nimport ch.bfh.egov.nutzenportfolio.tos.Projekt;\r\nimport org.apache.commons.logging.Log;\r\nimport org.apache.commons.logging.LogFactory;\r\nimport org.apache.struts.action.ActionForm;\r\nimport org.apache.struts.action.ActionForward;\r\nimport org.apache.struts.action.ActionMapping;\r\nimport org.apache.struts.action.ActionMessage;\r\nimport org.apache.struts.action.ActionMessages;\r\nimport org.apache.struts.action.DynaActionForm;\r\nimport org.apache.struts.actions.DispatchAction;\r\n\r\npublic class ProjektAction extends DispatchAction {\r\n\r\n    private Log logger = LogFactory.getLog(this.getClass());\r\n\r\n    private ProjektService service;\r\n\r\n    private ProjektgruppeService gService;\r\n\r\n    public ProjektAction(ProjektService service, ProjektgruppeService gService) {\r\n        super();\r\n        this.service = service;\r\n        this.gService = gService;\r\n    }\r\n\r\n    public ActionForward list(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {\r\n        service.populate(request);\r\n        gService.populate(request);\r\n        return mapping.findForward(Constants.LIST);\r\n    }\r\n\r\n    public ActionForward prepare(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {\r\n        logger.debug(\"prepare\");\r\n        DynaActionForm pForm = (DynaActionForm) form;\r\n        service.prepare(request, pForm);\r\n        // Forward fï¿½r save und abbrechen merken, da dieses Formular von zwei Orten aus aufgerufen werden kann\r\n        if (request.getParameter(Constants.PROJEKT_ID) == null) {\r\n            request.getSession().setAttribute(Constants.PROJEKTE_FORWARD, Constants.SUCCESS);\r\n            request.setAttribute(Constants.ABORT_URL, \"/adm/projektadmin.do\");\r\n        } else {\r\n            request.getSession().setAttribute(Constants.PROJEKTE_FORWARD, Constants.SUCCESS_EDIT);\r\n            request.setAttribute(Constants.ABORT_URL, \"/adm/projekte/view.do?dispatch=list\");\r\n        }\r\n        return mapping.findForward(Constants.FORM);\r\n    }\r\n\r\n    public ActionForward save(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {\r\n        // Projekt erzeugen\r\n        DynaActionForm pForm = (DynaActionForm) form;\r\n        Projekt p = service.get(request, pForm);\r\n        // Auf Duplikate ï¿½berprï¿½fen (Name)\r\n        if (service.exists(p)) {\r\n            ActionMessages errors = new ActionMessages();\r\n            errors.add(\"name\", new ActionMessage(\"errors.duplicate\", \"Name\"));\r\n            saveMessages(request, errors);\r\n            return mapping.findForward(Constants.FAILURE);\r\n        }\r\n        // Projekt speichern\r\n        service.save(request, p);\r\n        // Forward fï¿½r save holen, da dieses Formular von zwei Orten aus aufgerufen werden kann\r\n        String forward = (String) request.getSession().getAttribute(Constants.PROJEKTE_FORWARD);\r\n        if (forward != null) {\r\n            request.getSession().removeAttribute(Constants.PROJEKTE_FORWARD);\r\n            return mapping.findForward(forward);\r\n        }\r\n        return mapping.findForward(Constants.SUCCESS);\r\n    }\r\n\r\n    public ActionForward deleteQuestion(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {\r\n        // Projekt anhand der Id holen\r\n        Projekt p = service.get(request);\r\n        // Projekt nicht gefunden, Abbruch\r\n        if (p == null) {\r\n            return mapping.findForward(Constants.LIST);\r\n        }\r\n        // Abfrage zum lï¿½schen erzeugen\r\n        ActionMessages messages = new ActionMessages();\r\n        messages.add(ActionMessages.GLOBAL_MESSAGE, new ActionMessage(\"messages.question.delete\", p.getName()));\r\n        saveMessages(request, messages);\r\n        request.setAttribute(Constants.ACTION, Constants.PROJEKT_ACTION);\r\n        request.setAttribute(Constants.DISPATCH_YES, Constants.DELETE);\r\n        request.setAttribute(Constants.DISPATCH_NO, Constants.LIST);\r\n        request.setAttribute(Constants.ID_NAME, Constants.PROJEKT_ID);\r\n        request.setAttribute(Constants.ID_VALUE, p.getProjektId());\r\n        return mapping.findForward(Constants.QUESTION);\r\n    }\r\n\r\n    public ActionForward delete(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {\r\n        // Projekt anhand der Id holen\r\n        service.delete(request);\r\n        return mapping.findForward(Constants.LIST);\r\n    }\r\n\r\n    public ActionForward auswertung(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {\r\n        DynaActionForm pForm = (DynaActionForm) form;\r\n        ActionMessages errors = new ActionMessages();\r\n        if (!service.auswertung(request, pForm, errors)) {\r\n            saveMessages(request, errors);\r\n            return mapping.findForward(Constants.FAILURE);\r\n        }\r\n        return mapping.findForward(Constants.SUCCESS);\r\n    }\r\n\r\n    public ActionForward changeStatus(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {\r\n        DynaActionForm f = (DynaActionForm) form;\r\n        service.changeStatus(request, f);\r\n        service.populate(request);\r\n        return mapping.findForward(Constants.LIST);\r\n    }\r\n}\r\n",
		"id": "EvoSuiteBenchmark/46_nutzenportfolio/src/main/java/ch/bfh/egov/nutzenportfolio/action/ProjektActionTest0.java",
		"test_prompt": "// ProjektActionTest0.java\npackage ch.bfh.egov.nutzenportfolio.action;\n\nimport javax.servlet.http.HttpServletRequest;\nimport javax.servlet.http.HttpServletResponse;\nimport ch.bfh.egov.nutzenportfolio.Constants;\nimport ch.bfh.egov.nutzenportfolio.service.projekt.ProjektService;\nimport ch.bfh.egov.nutzenportfolio.service.projektgruppe.ProjektgruppeService;\nimport ch.bfh.egov.nutzenportfolio.tos.Projekt;\nimport org.apache.commons.logging.Log;\nimport org.apache.commons.logging.LogFactory;\nimport org.apache.struts.action.ActionForm;\nimport org.apache.struts.action.ActionForward;\nimport org.apache.struts.action.ActionMapping;\nimport org.apache.struts.action.ActionMessage;\nimport org.apache.struts.action.ActionMessages;\nimport org.apache.struts.action.DynaActionForm;\nimport org.apache.struts.actions.DispatchAction;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link ProjektAction}.\n* It contains ten unit test cases for the {@link ProjektAction#list(ActionMapping, ActionForm, HttpServletRequest, HttpServletResponse)} method.\n*/\nclass ProjektActionTest0 {"
	},
	{
		"original_code": "// ProjektAction.java\n/**\r\n * Nutzenportfolio\r\n * Copyright (C) 2006 Kompetenzzentrum E-Business, Simon Bergamin\r\n *\r\n * This program is free software; you can redistribute it and/or\r\n * modify it under the terms of the GNU General Public License\r\n * as published by the Free Software Foundation; either version 2\r\n * of the License, or (at your option) any later version.\r\n *\r\n * This program is distributed in the hope that it will be useful,\r\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n * GNU General Public License for more details.\r\n *\r\n * You should have received a copy of the GNU General Public License\r\n * along with this program; if not, write to the Free Software\r\n * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\r\n */\r\npackage ch.bfh.egov.nutzenportfolio.action;\r\n\r\nimport javax.servlet.http.HttpServletRequest;\r\nimport javax.servlet.http.HttpServletResponse;\r\nimport ch.bfh.egov.nutzenportfolio.Constants;\r\nimport ch.bfh.egov.nutzenportfolio.service.projekt.ProjektService;\r\nimport ch.bfh.egov.nutzenportfolio.service.projektgruppe.ProjektgruppeService;\r\nimport ch.bfh.egov.nutzenportfolio.tos.Projekt;\r\nimport org.apache.commons.logging.Log;\r\nimport org.apache.commons.logging.LogFactory;\r\nimport org.apache.struts.action.ActionForm;\r\nimport org.apache.struts.action.ActionForward;\r\nimport org.apache.struts.action.ActionMapping;\r\nimport org.apache.struts.action.ActionMessage;\r\nimport org.apache.struts.action.ActionMessages;\r\nimport org.apache.struts.action.DynaActionForm;\r\nimport org.apache.struts.actions.DispatchAction;\r\n\r\npublic class ProjektAction extends DispatchAction {\r\n\r\n    private Log logger = LogFactory.getLog(this.getClass());\r\n\r\n    private ProjektService service;\r\n\r\n    private ProjektgruppeService gService;\r\n\r\n    public ProjektAction(ProjektService service, ProjektgruppeService gService) {\r\n        super();\r\n        this.service = service;\r\n        this.gService = gService;\r\n    }\r\n\r\n    public ActionForward list(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {\r\n        service.populate(request);\r\n        gService.populate(request);\r\n        return mapping.findForward(Constants.LIST);\r\n    }\r\n\r\n    public ActionForward prepare(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {\r\n        logger.debug(\"prepare\");\r\n        DynaActionForm pForm = (DynaActionForm) form;\r\n        service.prepare(request, pForm);\r\n        // Forward fï¿½r save und abbrechen merken, da dieses Formular von zwei Orten aus aufgerufen werden kann\r\n        if (request.getParameter(Constants.PROJEKT_ID) == null) {\r\n            request.getSession().setAttribute(Constants.PROJEKTE_FORWARD, Constants.SUCCESS);\r\n            request.setAttribute(Constants.ABORT_URL, \"/adm/projektadmin.do\");\r\n        } else {\r\n            request.getSession().setAttribute(Constants.PROJEKTE_FORWARD, Constants.SUCCESS_EDIT);\r\n            request.setAttribute(Constants.ABORT_URL, \"/adm/projekte/view.do?dispatch=list\");\r\n        }\r\n        return mapping.findForward(Constants.FORM);\r\n    }\r\n\r\n    public ActionForward save(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {\r\n        // Projekt erzeugen\r\n        DynaActionForm pForm = (DynaActionForm) form;\r\n        Projekt p = service.get(request, pForm);\r\n        // Auf Duplikate ï¿½berprï¿½fen (Name)\r\n        if (service.exists(p)) {\r\n            ActionMessages errors = new ActionMessages();\r\n            errors.add(\"name\", new ActionMessage(\"errors.duplicate\", \"Name\"));\r\n            saveMessages(request, errors);\r\n            return mapping.findForward(Constants.FAILURE);\r\n        }\r\n        // Projekt speichern\r\n        service.save(request, p);\r\n        // Forward fï¿½r save holen, da dieses Formular von zwei Orten aus aufgerufen werden kann\r\n        String forward = (String) request.getSession().getAttribute(Constants.PROJEKTE_FORWARD);\r\n        if (forward != null) {\r\n            request.getSession().removeAttribute(Constants.PROJEKTE_FORWARD);\r\n            return mapping.findForward(forward);\r\n        }\r\n        return mapping.findForward(Constants.SUCCESS);\r\n    }\r\n\r\n    public ActionForward deleteQuestion(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {\r\n        // Projekt anhand der Id holen\r\n        Projekt p = service.get(request);\r\n        // Projekt nicht gefunden, Abbruch\r\n        if (p == null) {\r\n            return mapping.findForward(Constants.LIST);\r\n        }\r\n        // Abfrage zum lï¿½schen erzeugen\r\n        ActionMessages messages = new ActionMessages();\r\n        messages.add(ActionMessages.GLOBAL_MESSAGE, new ActionMessage(\"messages.question.delete\", p.getName()));\r\n        saveMessages(request, messages);\r\n        request.setAttribute(Constants.ACTION, Constants.PROJEKT_ACTION);\r\n        request.setAttribute(Constants.DISPATCH_YES, Constants.DELETE);\r\n        request.setAttribute(Constants.DISPATCH_NO, Constants.LIST);\r\n        request.setAttribute(Constants.ID_NAME, Constants.PROJEKT_ID);\r\n        request.setAttribute(Constants.ID_VALUE, p.getProjektId());\r\n        return mapping.findForward(Constants.QUESTION);\r\n    }\r\n\r\n    public ActionForward delete(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {\r\n        // Projekt anhand der Id holen\r\n        service.delete(request);\r\n        return mapping.findForward(Constants.LIST);\r\n    }\r\n\r\n    public ActionForward auswertung(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {\r\n        DynaActionForm pForm = (DynaActionForm) form;\r\n        ActionMessages errors = new ActionMessages();\r\n        if (!service.auswertung(request, pForm, errors)) {\r\n            saveMessages(request, errors);\r\n            return mapping.findForward(Constants.FAILURE);\r\n        }\r\n        return mapping.findForward(Constants.SUCCESS);\r\n    }\r\n\r\n    public ActionForward changeStatus(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {\r\n        DynaActionForm f = (DynaActionForm) form;\r\n        service.changeStatus(request, f);\r\n        service.populate(request);\r\n        return mapping.findForward(Constants.LIST);\r\n    }\r\n}\r\n",
		"id": "EvoSuiteBenchmark/46_nutzenportfolio/src/main/java/ch/bfh/egov/nutzenportfolio/action/ProjektActionTest1.java",
		"test_prompt": "// ProjektActionTest1.java\npackage ch.bfh.egov.nutzenportfolio.action;\n\nimport javax.servlet.http.HttpServletRequest;\nimport javax.servlet.http.HttpServletResponse;\nimport ch.bfh.egov.nutzenportfolio.Constants;\nimport ch.bfh.egov.nutzenportfolio.service.projekt.ProjektService;\nimport ch.bfh.egov.nutzenportfolio.service.projektgruppe.ProjektgruppeService;\nimport ch.bfh.egov.nutzenportfolio.tos.Projekt;\nimport org.apache.commons.logging.Log;\nimport org.apache.commons.logging.LogFactory;\nimport org.apache.struts.action.ActionForm;\nimport org.apache.struts.action.ActionForward;\nimport org.apache.struts.action.ActionMapping;\nimport org.apache.struts.action.ActionMessage;\nimport org.apache.struts.action.ActionMessages;\nimport org.apache.struts.action.DynaActionForm;\nimport org.apache.struts.actions.DispatchAction;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link ProjektAction}.\n* It contains ten unit test cases for the {@link ProjektAction#prepare(ActionMapping, ActionForm, HttpServletRequest, HttpServletResponse)} method.\n*/\nclass ProjektActionTest1 {"
	},
	{
		"original_code": "// ProjektAction.java\n/**\r\n * Nutzenportfolio\r\n * Copyright (C) 2006 Kompetenzzentrum E-Business, Simon Bergamin\r\n *\r\n * This program is free software; you can redistribute it and/or\r\n * modify it under the terms of the GNU General Public License\r\n * as published by the Free Software Foundation; either version 2\r\n * of the License, or (at your option) any later version.\r\n *\r\n * This program is distributed in the hope that it will be useful,\r\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n * GNU General Public License for more details.\r\n *\r\n * You should have received a copy of the GNU General Public License\r\n * along with this program; if not, write to the Free Software\r\n * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\r\n */\r\npackage ch.bfh.egov.nutzenportfolio.action;\r\n\r\nimport javax.servlet.http.HttpServletRequest;\r\nimport javax.servlet.http.HttpServletResponse;\r\nimport ch.bfh.egov.nutzenportfolio.Constants;\r\nimport ch.bfh.egov.nutzenportfolio.service.projekt.ProjektService;\r\nimport ch.bfh.egov.nutzenportfolio.service.projektgruppe.ProjektgruppeService;\r\nimport ch.bfh.egov.nutzenportfolio.tos.Projekt;\r\nimport org.apache.commons.logging.Log;\r\nimport org.apache.commons.logging.LogFactory;\r\nimport org.apache.struts.action.ActionForm;\r\nimport org.apache.struts.action.ActionForward;\r\nimport org.apache.struts.action.ActionMapping;\r\nimport org.apache.struts.action.ActionMessage;\r\nimport org.apache.struts.action.ActionMessages;\r\nimport org.apache.struts.action.DynaActionForm;\r\nimport org.apache.struts.actions.DispatchAction;\r\n\r\npublic class ProjektAction extends DispatchAction {\r\n\r\n    private Log logger = LogFactory.getLog(this.getClass());\r\n\r\n    private ProjektService service;\r\n\r\n    private ProjektgruppeService gService;\r\n\r\n    public ProjektAction(ProjektService service, ProjektgruppeService gService) {\r\n        super();\r\n        this.service = service;\r\n        this.gService = gService;\r\n    }\r\n\r\n    public ActionForward list(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {\r\n        service.populate(request);\r\n        gService.populate(request);\r\n        return mapping.findForward(Constants.LIST);\r\n    }\r\n\r\n    public ActionForward prepare(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {\r\n        logger.debug(\"prepare\");\r\n        DynaActionForm pForm = (DynaActionForm) form;\r\n        service.prepare(request, pForm);\r\n        // Forward fï¿½r save und abbrechen merken, da dieses Formular von zwei Orten aus aufgerufen werden kann\r\n        if (request.getParameter(Constants.PROJEKT_ID) == null) {\r\n            request.getSession().setAttribute(Constants.PROJEKTE_FORWARD, Constants.SUCCESS);\r\n            request.setAttribute(Constants.ABORT_URL, \"/adm/projektadmin.do\");\r\n        } else {\r\n            request.getSession().setAttribute(Constants.PROJEKTE_FORWARD, Constants.SUCCESS_EDIT);\r\n            request.setAttribute(Constants.ABORT_URL, \"/adm/projekte/view.do?dispatch=list\");\r\n        }\r\n        return mapping.findForward(Constants.FORM);\r\n    }\r\n\r\n    public ActionForward save(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {\r\n        // Projekt erzeugen\r\n        DynaActionForm pForm = (DynaActionForm) form;\r\n        Projekt p = service.get(request, pForm);\r\n        // Auf Duplikate ï¿½berprï¿½fen (Name)\r\n        if (service.exists(p)) {\r\n            ActionMessages errors = new ActionMessages();\r\n            errors.add(\"name\", new ActionMessage(\"errors.duplicate\", \"Name\"));\r\n            saveMessages(request, errors);\r\n            return mapping.findForward(Constants.FAILURE);\r\n        }\r\n        // Projekt speichern\r\n        service.save(request, p);\r\n        // Forward fï¿½r save holen, da dieses Formular von zwei Orten aus aufgerufen werden kann\r\n        String forward = (String) request.getSession().getAttribute(Constants.PROJEKTE_FORWARD);\r\n        if (forward != null) {\r\n            request.getSession().removeAttribute(Constants.PROJEKTE_FORWARD);\r\n            return mapping.findForward(forward);\r\n        }\r\n        return mapping.findForward(Constants.SUCCESS);\r\n    }\r\n\r\n    public ActionForward deleteQuestion(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {\r\n        // Projekt anhand der Id holen\r\n        Projekt p = service.get(request);\r\n        // Projekt nicht gefunden, Abbruch\r\n        if (p == null) {\r\n            return mapping.findForward(Constants.LIST);\r\n        }\r\n        // Abfrage zum lï¿½schen erzeugen\r\n        ActionMessages messages = new ActionMessages();\r\n        messages.add(ActionMessages.GLOBAL_MESSAGE, new ActionMessage(\"messages.question.delete\", p.getName()));\r\n        saveMessages(request, messages);\r\n        request.setAttribute(Constants.ACTION, Constants.PROJEKT_ACTION);\r\n        request.setAttribute(Constants.DISPATCH_YES, Constants.DELETE);\r\n        request.setAttribute(Constants.DISPATCH_NO, Constants.LIST);\r\n        request.setAttribute(Constants.ID_NAME, Constants.PROJEKT_ID);\r\n        request.setAttribute(Constants.ID_VALUE, p.getProjektId());\r\n        return mapping.findForward(Constants.QUESTION);\r\n    }\r\n\r\n    public ActionForward delete(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {\r\n        // Projekt anhand der Id holen\r\n        service.delete(request);\r\n        return mapping.findForward(Constants.LIST);\r\n    }\r\n\r\n    public ActionForward auswertung(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {\r\n        DynaActionForm pForm = (DynaActionForm) form;\r\n        ActionMessages errors = new ActionMessages();\r\n        if (!service.auswertung(request, pForm, errors)) {\r\n            saveMessages(request, errors);\r\n            return mapping.findForward(Constants.FAILURE);\r\n        }\r\n        return mapping.findForward(Constants.SUCCESS);\r\n    }\r\n\r\n    public ActionForward changeStatus(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {\r\n        DynaActionForm f = (DynaActionForm) form;\r\n        service.changeStatus(request, f);\r\n        service.populate(request);\r\n        return mapping.findForward(Constants.LIST);\r\n    }\r\n}\r\n",
		"id": "EvoSuiteBenchmark/46_nutzenportfolio/src/main/java/ch/bfh/egov/nutzenportfolio/action/ProjektActionTest2.java",
		"test_prompt": "// ProjektActionTest2.java\npackage ch.bfh.egov.nutzenportfolio.action;\n\nimport javax.servlet.http.HttpServletRequest;\nimport javax.servlet.http.HttpServletResponse;\nimport ch.bfh.egov.nutzenportfolio.Constants;\nimport ch.bfh.egov.nutzenportfolio.service.projekt.ProjektService;\nimport ch.bfh.egov.nutzenportfolio.service.projektgruppe.ProjektgruppeService;\nimport ch.bfh.egov.nutzenportfolio.tos.Projekt;\nimport org.apache.commons.logging.Log;\nimport org.apache.commons.logging.LogFactory;\nimport org.apache.struts.action.ActionForm;\nimport org.apache.struts.action.ActionForward;\nimport org.apache.struts.action.ActionMapping;\nimport org.apache.struts.action.ActionMessage;\nimport org.apache.struts.action.ActionMessages;\nimport org.apache.struts.action.DynaActionForm;\nimport org.apache.struts.actions.DispatchAction;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link ProjektAction}.\n* It contains ten unit test cases for the {@link ProjektAction#save(ActionMapping, ActionForm, HttpServletRequest, HttpServletResponse)} method.\n*/\nclass ProjektActionTest2 {"
	},
	{
		"original_code": "// ProjektAction.java\n/**\r\n * Nutzenportfolio\r\n * Copyright (C) 2006 Kompetenzzentrum E-Business, Simon Bergamin\r\n *\r\n * This program is free software; you can redistribute it and/or\r\n * modify it under the terms of the GNU General Public License\r\n * as published by the Free Software Foundation; either version 2\r\n * of the License, or (at your option) any later version.\r\n *\r\n * This program is distributed in the hope that it will be useful,\r\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n * GNU General Public License for more details.\r\n *\r\n * You should have received a copy of the GNU General Public License\r\n * along with this program; if not, write to the Free Software\r\n * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\r\n */\r\npackage ch.bfh.egov.nutzenportfolio.action;\r\n\r\nimport javax.servlet.http.HttpServletRequest;\r\nimport javax.servlet.http.HttpServletResponse;\r\nimport ch.bfh.egov.nutzenportfolio.Constants;\r\nimport ch.bfh.egov.nutzenportfolio.service.projekt.ProjektService;\r\nimport ch.bfh.egov.nutzenportfolio.service.projektgruppe.ProjektgruppeService;\r\nimport ch.bfh.egov.nutzenportfolio.tos.Projekt;\r\nimport org.apache.commons.logging.Log;\r\nimport org.apache.commons.logging.LogFactory;\r\nimport org.apache.struts.action.ActionForm;\r\nimport org.apache.struts.action.ActionForward;\r\nimport org.apache.struts.action.ActionMapping;\r\nimport org.apache.struts.action.ActionMessage;\r\nimport org.apache.struts.action.ActionMessages;\r\nimport org.apache.struts.action.DynaActionForm;\r\nimport org.apache.struts.actions.DispatchAction;\r\n\r\npublic class ProjektAction extends DispatchAction {\r\n\r\n    private Log logger = LogFactory.getLog(this.getClass());\r\n\r\n    private ProjektService service;\r\n\r\n    private ProjektgruppeService gService;\r\n\r\n    public ProjektAction(ProjektService service, ProjektgruppeService gService) {\r\n        super();\r\n        this.service = service;\r\n        this.gService = gService;\r\n    }\r\n\r\n    public ActionForward list(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {\r\n        service.populate(request);\r\n        gService.populate(request);\r\n        return mapping.findForward(Constants.LIST);\r\n    }\r\n\r\n    public ActionForward prepare(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {\r\n        logger.debug(\"prepare\");\r\n        DynaActionForm pForm = (DynaActionForm) form;\r\n        service.prepare(request, pForm);\r\n        // Forward fï¿½r save und abbrechen merken, da dieses Formular von zwei Orten aus aufgerufen werden kann\r\n        if (request.getParameter(Constants.PROJEKT_ID) == null) {\r\n            request.getSession().setAttribute(Constants.PROJEKTE_FORWARD, Constants.SUCCESS);\r\n            request.setAttribute(Constants.ABORT_URL, \"/adm/projektadmin.do\");\r\n        } else {\r\n            request.getSession().setAttribute(Constants.PROJEKTE_FORWARD, Constants.SUCCESS_EDIT);\r\n            request.setAttribute(Constants.ABORT_URL, \"/adm/projekte/view.do?dispatch=list\");\r\n        }\r\n        return mapping.findForward(Constants.FORM);\r\n    }\r\n\r\n    public ActionForward save(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {\r\n        // Projekt erzeugen\r\n        DynaActionForm pForm = (DynaActionForm) form;\r\n        Projekt p = service.get(request, pForm);\r\n        // Auf Duplikate ï¿½berprï¿½fen (Name)\r\n        if (service.exists(p)) {\r\n            ActionMessages errors = new ActionMessages();\r\n            errors.add(\"name\", new ActionMessage(\"errors.duplicate\", \"Name\"));\r\n            saveMessages(request, errors);\r\n            return mapping.findForward(Constants.FAILURE);\r\n        }\r\n        // Projekt speichern\r\n        service.save(request, p);\r\n        // Forward fï¿½r save holen, da dieses Formular von zwei Orten aus aufgerufen werden kann\r\n        String forward = (String) request.getSession().getAttribute(Constants.PROJEKTE_FORWARD);\r\n        if (forward != null) {\r\n            request.getSession().removeAttribute(Constants.PROJEKTE_FORWARD);\r\n            return mapping.findForward(forward);\r\n        }\r\n        return mapping.findForward(Constants.SUCCESS);\r\n    }\r\n\r\n    public ActionForward deleteQuestion(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {\r\n        // Projekt anhand der Id holen\r\n        Projekt p = service.get(request);\r\n        // Projekt nicht gefunden, Abbruch\r\n        if (p == null) {\r\n            return mapping.findForward(Constants.LIST);\r\n        }\r\n        // Abfrage zum lï¿½schen erzeugen\r\n        ActionMessages messages = new ActionMessages();\r\n        messages.add(ActionMessages.GLOBAL_MESSAGE, new ActionMessage(\"messages.question.delete\", p.getName()));\r\n        saveMessages(request, messages);\r\n        request.setAttribute(Constants.ACTION, Constants.PROJEKT_ACTION);\r\n        request.setAttribute(Constants.DISPATCH_YES, Constants.DELETE);\r\n        request.setAttribute(Constants.DISPATCH_NO, Constants.LIST);\r\n        request.setAttribute(Constants.ID_NAME, Constants.PROJEKT_ID);\r\n        request.setAttribute(Constants.ID_VALUE, p.getProjektId());\r\n        return mapping.findForward(Constants.QUESTION);\r\n    }\r\n\r\n    public ActionForward delete(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {\r\n        // Projekt anhand der Id holen\r\n        service.delete(request);\r\n        return mapping.findForward(Constants.LIST);\r\n    }\r\n\r\n    public ActionForward auswertung(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {\r\n        DynaActionForm pForm = (DynaActionForm) form;\r\n        ActionMessages errors = new ActionMessages();\r\n        if (!service.auswertung(request, pForm, errors)) {\r\n            saveMessages(request, errors);\r\n            return mapping.findForward(Constants.FAILURE);\r\n        }\r\n        return mapping.findForward(Constants.SUCCESS);\r\n    }\r\n\r\n    public ActionForward changeStatus(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {\r\n        DynaActionForm f = (DynaActionForm) form;\r\n        service.changeStatus(request, f);\r\n        service.populate(request);\r\n        return mapping.findForward(Constants.LIST);\r\n    }\r\n}\r\n",
		"id": "EvoSuiteBenchmark/46_nutzenportfolio/src/main/java/ch/bfh/egov/nutzenportfolio/action/ProjektActionTest3.java",
		"test_prompt": "// ProjektActionTest3.java\npackage ch.bfh.egov.nutzenportfolio.action;\n\nimport javax.servlet.http.HttpServletRequest;\nimport javax.servlet.http.HttpServletResponse;\nimport ch.bfh.egov.nutzenportfolio.Constants;\nimport ch.bfh.egov.nutzenportfolio.service.projekt.ProjektService;\nimport ch.bfh.egov.nutzenportfolio.service.projektgruppe.ProjektgruppeService;\nimport ch.bfh.egov.nutzenportfolio.tos.Projekt;\nimport org.apache.commons.logging.Log;\nimport org.apache.commons.logging.LogFactory;\nimport org.apache.struts.action.ActionForm;\nimport org.apache.struts.action.ActionForward;\nimport org.apache.struts.action.ActionMapping;\nimport org.apache.struts.action.ActionMessage;\nimport org.apache.struts.action.ActionMessages;\nimport org.apache.struts.action.DynaActionForm;\nimport org.apache.struts.actions.DispatchAction;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link ProjektAction}.\n* It contains ten unit test cases for the {@link ProjektAction#deleteQuestion(ActionMapping, ActionForm, HttpServletRequest, HttpServletResponse)} method.\n*/\nclass ProjektActionTest3 {"
	},
	{
		"original_code": "// ProjektAction.java\n/**\r\n * Nutzenportfolio\r\n * Copyright (C) 2006 Kompetenzzentrum E-Business, Simon Bergamin\r\n *\r\n * This program is free software; you can redistribute it and/or\r\n * modify it under the terms of the GNU General Public License\r\n * as published by the Free Software Foundation; either version 2\r\n * of the License, or (at your option) any later version.\r\n *\r\n * This program is distributed in the hope that it will be useful,\r\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n * GNU General Public License for more details.\r\n *\r\n * You should have received a copy of the GNU General Public License\r\n * along with this program; if not, write to the Free Software\r\n * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\r\n */\r\npackage ch.bfh.egov.nutzenportfolio.action;\r\n\r\nimport javax.servlet.http.HttpServletRequest;\r\nimport javax.servlet.http.HttpServletResponse;\r\nimport ch.bfh.egov.nutzenportfolio.Constants;\r\nimport ch.bfh.egov.nutzenportfolio.service.projekt.ProjektService;\r\nimport ch.bfh.egov.nutzenportfolio.service.projektgruppe.ProjektgruppeService;\r\nimport ch.bfh.egov.nutzenportfolio.tos.Projekt;\r\nimport org.apache.commons.logging.Log;\r\nimport org.apache.commons.logging.LogFactory;\r\nimport org.apache.struts.action.ActionForm;\r\nimport org.apache.struts.action.ActionForward;\r\nimport org.apache.struts.action.ActionMapping;\r\nimport org.apache.struts.action.ActionMessage;\r\nimport org.apache.struts.action.ActionMessages;\r\nimport org.apache.struts.action.DynaActionForm;\r\nimport org.apache.struts.actions.DispatchAction;\r\n\r\npublic class ProjektAction extends DispatchAction {\r\n\r\n    private Log logger = LogFactory.getLog(this.getClass());\r\n\r\n    private ProjektService service;\r\n\r\n    private ProjektgruppeService gService;\r\n\r\n    public ProjektAction(ProjektService service, ProjektgruppeService gService) {\r\n        super();\r\n        this.service = service;\r\n        this.gService = gService;\r\n    }\r\n\r\n    public ActionForward list(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {\r\n        service.populate(request);\r\n        gService.populate(request);\r\n        return mapping.findForward(Constants.LIST);\r\n    }\r\n\r\n    public ActionForward prepare(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {\r\n        logger.debug(\"prepare\");\r\n        DynaActionForm pForm = (DynaActionForm) form;\r\n        service.prepare(request, pForm);\r\n        // Forward fï¿½r save und abbrechen merken, da dieses Formular von zwei Orten aus aufgerufen werden kann\r\n        if (request.getParameter(Constants.PROJEKT_ID) == null) {\r\n            request.getSession().setAttribute(Constants.PROJEKTE_FORWARD, Constants.SUCCESS);\r\n            request.setAttribute(Constants.ABORT_URL, \"/adm/projektadmin.do\");\r\n        } else {\r\n            request.getSession().setAttribute(Constants.PROJEKTE_FORWARD, Constants.SUCCESS_EDIT);\r\n            request.setAttribute(Constants.ABORT_URL, \"/adm/projekte/view.do?dispatch=list\");\r\n        }\r\n        return mapping.findForward(Constants.FORM);\r\n    }\r\n\r\n    public ActionForward save(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {\r\n        // Projekt erzeugen\r\n        DynaActionForm pForm = (DynaActionForm) form;\r\n        Projekt p = service.get(request, pForm);\r\n        // Auf Duplikate ï¿½berprï¿½fen (Name)\r\n        if (service.exists(p)) {\r\n            ActionMessages errors = new ActionMessages();\r\n            errors.add(\"name\", new ActionMessage(\"errors.duplicate\", \"Name\"));\r\n            saveMessages(request, errors);\r\n            return mapping.findForward(Constants.FAILURE);\r\n        }\r\n        // Projekt speichern\r\n        service.save(request, p);\r\n        // Forward fï¿½r save holen, da dieses Formular von zwei Orten aus aufgerufen werden kann\r\n        String forward = (String) request.getSession().getAttribute(Constants.PROJEKTE_FORWARD);\r\n        if (forward != null) {\r\n            request.getSession().removeAttribute(Constants.PROJEKTE_FORWARD);\r\n            return mapping.findForward(forward);\r\n        }\r\n        return mapping.findForward(Constants.SUCCESS);\r\n    }\r\n\r\n    public ActionForward deleteQuestion(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {\r\n        // Projekt anhand der Id holen\r\n        Projekt p = service.get(request);\r\n        // Projekt nicht gefunden, Abbruch\r\n        if (p == null) {\r\n            return mapping.findForward(Constants.LIST);\r\n        }\r\n        // Abfrage zum lï¿½schen erzeugen\r\n        ActionMessages messages = new ActionMessages();\r\n        messages.add(ActionMessages.GLOBAL_MESSAGE, new ActionMessage(\"messages.question.delete\", p.getName()));\r\n        saveMessages(request, messages);\r\n        request.setAttribute(Constants.ACTION, Constants.PROJEKT_ACTION);\r\n        request.setAttribute(Constants.DISPATCH_YES, Constants.DELETE);\r\n        request.setAttribute(Constants.DISPATCH_NO, Constants.LIST);\r\n        request.setAttribute(Constants.ID_NAME, Constants.PROJEKT_ID);\r\n        request.setAttribute(Constants.ID_VALUE, p.getProjektId());\r\n        return mapping.findForward(Constants.QUESTION);\r\n    }\r\n\r\n    public ActionForward delete(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {\r\n        // Projekt anhand der Id holen\r\n        service.delete(request);\r\n        return mapping.findForward(Constants.LIST);\r\n    }\r\n\r\n    public ActionForward auswertung(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {\r\n        DynaActionForm pForm = (DynaActionForm) form;\r\n        ActionMessages errors = new ActionMessages();\r\n        if (!service.auswertung(request, pForm, errors)) {\r\n            saveMessages(request, errors);\r\n            return mapping.findForward(Constants.FAILURE);\r\n        }\r\n        return mapping.findForward(Constants.SUCCESS);\r\n    }\r\n\r\n    public ActionForward changeStatus(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {\r\n        DynaActionForm f = (DynaActionForm) form;\r\n        service.changeStatus(request, f);\r\n        service.populate(request);\r\n        return mapping.findForward(Constants.LIST);\r\n    }\r\n}\r\n",
		"id": "EvoSuiteBenchmark/46_nutzenportfolio/src/main/java/ch/bfh/egov/nutzenportfolio/action/ProjektActionTest4.java",
		"test_prompt": "// ProjektActionTest4.java\npackage ch.bfh.egov.nutzenportfolio.action;\n\nimport javax.servlet.http.HttpServletRequest;\nimport javax.servlet.http.HttpServletResponse;\nimport ch.bfh.egov.nutzenportfolio.Constants;\nimport ch.bfh.egov.nutzenportfolio.service.projekt.ProjektService;\nimport ch.bfh.egov.nutzenportfolio.service.projektgruppe.ProjektgruppeService;\nimport ch.bfh.egov.nutzenportfolio.tos.Projekt;\nimport org.apache.commons.logging.Log;\nimport org.apache.commons.logging.LogFactory;\nimport org.apache.struts.action.ActionForm;\nimport org.apache.struts.action.ActionForward;\nimport org.apache.struts.action.ActionMapping;\nimport org.apache.struts.action.ActionMessage;\nimport org.apache.struts.action.ActionMessages;\nimport org.apache.struts.action.DynaActionForm;\nimport org.apache.struts.actions.DispatchAction;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link ProjektAction}.\n* It contains ten unit test cases for the {@link ProjektAction#delete(ActionMapping, ActionForm, HttpServletRequest, HttpServletResponse)} method.\n*/\nclass ProjektActionTest4 {"
	},
	{
		"original_code": "// ProjektAction.java\n/**\r\n * Nutzenportfolio\r\n * Copyright (C) 2006 Kompetenzzentrum E-Business, Simon Bergamin\r\n *\r\n * This program is free software; you can redistribute it and/or\r\n * modify it under the terms of the GNU General Public License\r\n * as published by the Free Software Foundation; either version 2\r\n * of the License, or (at your option) any later version.\r\n *\r\n * This program is distributed in the hope that it will be useful,\r\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n * GNU General Public License for more details.\r\n *\r\n * You should have received a copy of the GNU General Public License\r\n * along with this program; if not, write to the Free Software\r\n * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\r\n */\r\npackage ch.bfh.egov.nutzenportfolio.action;\r\n\r\nimport javax.servlet.http.HttpServletRequest;\r\nimport javax.servlet.http.HttpServletResponse;\r\nimport ch.bfh.egov.nutzenportfolio.Constants;\r\nimport ch.bfh.egov.nutzenportfolio.service.projekt.ProjektService;\r\nimport ch.bfh.egov.nutzenportfolio.service.projektgruppe.ProjektgruppeService;\r\nimport ch.bfh.egov.nutzenportfolio.tos.Projekt;\r\nimport org.apache.commons.logging.Log;\r\nimport org.apache.commons.logging.LogFactory;\r\nimport org.apache.struts.action.ActionForm;\r\nimport org.apache.struts.action.ActionForward;\r\nimport org.apache.struts.action.ActionMapping;\r\nimport org.apache.struts.action.ActionMessage;\r\nimport org.apache.struts.action.ActionMessages;\r\nimport org.apache.struts.action.DynaActionForm;\r\nimport org.apache.struts.actions.DispatchAction;\r\n\r\npublic class ProjektAction extends DispatchAction {\r\n\r\n    private Log logger = LogFactory.getLog(this.getClass());\r\n\r\n    private ProjektService service;\r\n\r\n    private ProjektgruppeService gService;\r\n\r\n    public ProjektAction(ProjektService service, ProjektgruppeService gService) {\r\n        super();\r\n        this.service = service;\r\n        this.gService = gService;\r\n    }\r\n\r\n    public ActionForward list(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {\r\n        service.populate(request);\r\n        gService.populate(request);\r\n        return mapping.findForward(Constants.LIST);\r\n    }\r\n\r\n    public ActionForward prepare(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {\r\n        logger.debug(\"prepare\");\r\n        DynaActionForm pForm = (DynaActionForm) form;\r\n        service.prepare(request, pForm);\r\n        // Forward fï¿½r save und abbrechen merken, da dieses Formular von zwei Orten aus aufgerufen werden kann\r\n        if (request.getParameter(Constants.PROJEKT_ID) == null) {\r\n            request.getSession().setAttribute(Constants.PROJEKTE_FORWARD, Constants.SUCCESS);\r\n            request.setAttribute(Constants.ABORT_URL, \"/adm/projektadmin.do\");\r\n        } else {\r\n            request.getSession().setAttribute(Constants.PROJEKTE_FORWARD, Constants.SUCCESS_EDIT);\r\n            request.setAttribute(Constants.ABORT_URL, \"/adm/projekte/view.do?dispatch=list\");\r\n        }\r\n        return mapping.findForward(Constants.FORM);\r\n    }\r\n\r\n    public ActionForward save(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {\r\n        // Projekt erzeugen\r\n        DynaActionForm pForm = (DynaActionForm) form;\r\n        Projekt p = service.get(request, pForm);\r\n        // Auf Duplikate ï¿½berprï¿½fen (Name)\r\n        if (service.exists(p)) {\r\n            ActionMessages errors = new ActionMessages();\r\n            errors.add(\"name\", new ActionMessage(\"errors.duplicate\", \"Name\"));\r\n            saveMessages(request, errors);\r\n            return mapping.findForward(Constants.FAILURE);\r\n        }\r\n        // Projekt speichern\r\n        service.save(request, p);\r\n        // Forward fï¿½r save holen, da dieses Formular von zwei Orten aus aufgerufen werden kann\r\n        String forward = (String) request.getSession().getAttribute(Constants.PROJEKTE_FORWARD);\r\n        if (forward != null) {\r\n            request.getSession().removeAttribute(Constants.PROJEKTE_FORWARD);\r\n            return mapping.findForward(forward);\r\n        }\r\n        return mapping.findForward(Constants.SUCCESS);\r\n    }\r\n\r\n    public ActionForward deleteQuestion(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {\r\n        // Projekt anhand der Id holen\r\n        Projekt p = service.get(request);\r\n        // Projekt nicht gefunden, Abbruch\r\n        if (p == null) {\r\n            return mapping.findForward(Constants.LIST);\r\n        }\r\n        // Abfrage zum lï¿½schen erzeugen\r\n        ActionMessages messages = new ActionMessages();\r\n        messages.add(ActionMessages.GLOBAL_MESSAGE, new ActionMessage(\"messages.question.delete\", p.getName()));\r\n        saveMessages(request, messages);\r\n        request.setAttribute(Constants.ACTION, Constants.PROJEKT_ACTION);\r\n        request.setAttribute(Constants.DISPATCH_YES, Constants.DELETE);\r\n        request.setAttribute(Constants.DISPATCH_NO, Constants.LIST);\r\n        request.setAttribute(Constants.ID_NAME, Constants.PROJEKT_ID);\r\n        request.setAttribute(Constants.ID_VALUE, p.getProjektId());\r\n        return mapping.findForward(Constants.QUESTION);\r\n    }\r\n\r\n    public ActionForward delete(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {\r\n        // Projekt anhand der Id holen\r\n        service.delete(request);\r\n        return mapping.findForward(Constants.LIST);\r\n    }\r\n\r\n    public ActionForward auswertung(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {\r\n        DynaActionForm pForm = (DynaActionForm) form;\r\n        ActionMessages errors = new ActionMessages();\r\n        if (!service.auswertung(request, pForm, errors)) {\r\n            saveMessages(request, errors);\r\n            return mapping.findForward(Constants.FAILURE);\r\n        }\r\n        return mapping.findForward(Constants.SUCCESS);\r\n    }\r\n\r\n    public ActionForward changeStatus(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {\r\n        DynaActionForm f = (DynaActionForm) form;\r\n        service.changeStatus(request, f);\r\n        service.populate(request);\r\n        return mapping.findForward(Constants.LIST);\r\n    }\r\n}\r\n",
		"id": "EvoSuiteBenchmark/46_nutzenportfolio/src/main/java/ch/bfh/egov/nutzenportfolio/action/ProjektActionTest5.java",
		"test_prompt": "// ProjektActionTest5.java\npackage ch.bfh.egov.nutzenportfolio.action;\n\nimport javax.servlet.http.HttpServletRequest;\nimport javax.servlet.http.HttpServletResponse;\nimport ch.bfh.egov.nutzenportfolio.Constants;\nimport ch.bfh.egov.nutzenportfolio.service.projekt.ProjektService;\nimport ch.bfh.egov.nutzenportfolio.service.projektgruppe.ProjektgruppeService;\nimport ch.bfh.egov.nutzenportfolio.tos.Projekt;\nimport org.apache.commons.logging.Log;\nimport org.apache.commons.logging.LogFactory;\nimport org.apache.struts.action.ActionForm;\nimport org.apache.struts.action.ActionForward;\nimport org.apache.struts.action.ActionMapping;\nimport org.apache.struts.action.ActionMessage;\nimport org.apache.struts.action.ActionMessages;\nimport org.apache.struts.action.DynaActionForm;\nimport org.apache.struts.actions.DispatchAction;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link ProjektAction}.\n* It contains ten unit test cases for the {@link ProjektAction#auswertung(ActionMapping, ActionForm, HttpServletRequest, HttpServletResponse)} method.\n*/\nclass ProjektActionTest5 {"
	},
	{
		"original_code": "// ProjektAction.java\n/**\r\n * Nutzenportfolio\r\n * Copyright (C) 2006 Kompetenzzentrum E-Business, Simon Bergamin\r\n *\r\n * This program is free software; you can redistribute it and/or\r\n * modify it under the terms of the GNU General Public License\r\n * as published by the Free Software Foundation; either version 2\r\n * of the License, or (at your option) any later version.\r\n *\r\n * This program is distributed in the hope that it will be useful,\r\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n * GNU General Public License for more details.\r\n *\r\n * You should have received a copy of the GNU General Public License\r\n * along with this program; if not, write to the Free Software\r\n * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\r\n */\r\npackage ch.bfh.egov.nutzenportfolio.action;\r\n\r\nimport javax.servlet.http.HttpServletRequest;\r\nimport javax.servlet.http.HttpServletResponse;\r\nimport ch.bfh.egov.nutzenportfolio.Constants;\r\nimport ch.bfh.egov.nutzenportfolio.service.projekt.ProjektService;\r\nimport ch.bfh.egov.nutzenportfolio.service.projektgruppe.ProjektgruppeService;\r\nimport ch.bfh.egov.nutzenportfolio.tos.Projekt;\r\nimport org.apache.commons.logging.Log;\r\nimport org.apache.commons.logging.LogFactory;\r\nimport org.apache.struts.action.ActionForm;\r\nimport org.apache.struts.action.ActionForward;\r\nimport org.apache.struts.action.ActionMapping;\r\nimport org.apache.struts.action.ActionMessage;\r\nimport org.apache.struts.action.ActionMessages;\r\nimport org.apache.struts.action.DynaActionForm;\r\nimport org.apache.struts.actions.DispatchAction;\r\n\r\npublic class ProjektAction extends DispatchAction {\r\n\r\n    private Log logger = LogFactory.getLog(this.getClass());\r\n\r\n    private ProjektService service;\r\n\r\n    private ProjektgruppeService gService;\r\n\r\n    public ProjektAction(ProjektService service, ProjektgruppeService gService) {\r\n        super();\r\n        this.service = service;\r\n        this.gService = gService;\r\n    }\r\n\r\n    public ActionForward list(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {\r\n        service.populate(request);\r\n        gService.populate(request);\r\n        return mapping.findForward(Constants.LIST);\r\n    }\r\n\r\n    public ActionForward prepare(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {\r\n        logger.debug(\"prepare\");\r\n        DynaActionForm pForm = (DynaActionForm) form;\r\n        service.prepare(request, pForm);\r\n        // Forward fï¿½r save und abbrechen merken, da dieses Formular von zwei Orten aus aufgerufen werden kann\r\n        if (request.getParameter(Constants.PROJEKT_ID) == null) {\r\n            request.getSession().setAttribute(Constants.PROJEKTE_FORWARD, Constants.SUCCESS);\r\n            request.setAttribute(Constants.ABORT_URL, \"/adm/projektadmin.do\");\r\n        } else {\r\n            request.getSession().setAttribute(Constants.PROJEKTE_FORWARD, Constants.SUCCESS_EDIT);\r\n            request.setAttribute(Constants.ABORT_URL, \"/adm/projekte/view.do?dispatch=list\");\r\n        }\r\n        return mapping.findForward(Constants.FORM);\r\n    }\r\n\r\n    public ActionForward save(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {\r\n        // Projekt erzeugen\r\n        DynaActionForm pForm = (DynaActionForm) form;\r\n        Projekt p = service.get(request, pForm);\r\n        // Auf Duplikate ï¿½berprï¿½fen (Name)\r\n        if (service.exists(p)) {\r\n            ActionMessages errors = new ActionMessages();\r\n            errors.add(\"name\", new ActionMessage(\"errors.duplicate\", \"Name\"));\r\n            saveMessages(request, errors);\r\n            return mapping.findForward(Constants.FAILURE);\r\n        }\r\n        // Projekt speichern\r\n        service.save(request, p);\r\n        // Forward fï¿½r save holen, da dieses Formular von zwei Orten aus aufgerufen werden kann\r\n        String forward = (String) request.getSession().getAttribute(Constants.PROJEKTE_FORWARD);\r\n        if (forward != null) {\r\n            request.getSession().removeAttribute(Constants.PROJEKTE_FORWARD);\r\n            return mapping.findForward(forward);\r\n        }\r\n        return mapping.findForward(Constants.SUCCESS);\r\n    }\r\n\r\n    public ActionForward deleteQuestion(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {\r\n        // Projekt anhand der Id holen\r\n        Projekt p = service.get(request);\r\n        // Projekt nicht gefunden, Abbruch\r\n        if (p == null) {\r\n            return mapping.findForward(Constants.LIST);\r\n        }\r\n        // Abfrage zum lï¿½schen erzeugen\r\n        ActionMessages messages = new ActionMessages();\r\n        messages.add(ActionMessages.GLOBAL_MESSAGE, new ActionMessage(\"messages.question.delete\", p.getName()));\r\n        saveMessages(request, messages);\r\n        request.setAttribute(Constants.ACTION, Constants.PROJEKT_ACTION);\r\n        request.setAttribute(Constants.DISPATCH_YES, Constants.DELETE);\r\n        request.setAttribute(Constants.DISPATCH_NO, Constants.LIST);\r\n        request.setAttribute(Constants.ID_NAME, Constants.PROJEKT_ID);\r\n        request.setAttribute(Constants.ID_VALUE, p.getProjektId());\r\n        return mapping.findForward(Constants.QUESTION);\r\n    }\r\n\r\n    public ActionForward delete(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {\r\n        // Projekt anhand der Id holen\r\n        service.delete(request);\r\n        return mapping.findForward(Constants.LIST);\r\n    }\r\n\r\n    public ActionForward auswertung(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {\r\n        DynaActionForm pForm = (DynaActionForm) form;\r\n        ActionMessages errors = new ActionMessages();\r\n        if (!service.auswertung(request, pForm, errors)) {\r\n            saveMessages(request, errors);\r\n            return mapping.findForward(Constants.FAILURE);\r\n        }\r\n        return mapping.findForward(Constants.SUCCESS);\r\n    }\r\n\r\n    public ActionForward changeStatus(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {\r\n        DynaActionForm f = (DynaActionForm) form;\r\n        service.changeStatus(request, f);\r\n        service.populate(request);\r\n        return mapping.findForward(Constants.LIST);\r\n    }\r\n}\r\n",
		"id": "EvoSuiteBenchmark/46_nutzenportfolio/src/main/java/ch/bfh/egov/nutzenportfolio/action/ProjektActionTest6.java",
		"test_prompt": "// ProjektActionTest6.java\npackage ch.bfh.egov.nutzenportfolio.action;\n\nimport javax.servlet.http.HttpServletRequest;\nimport javax.servlet.http.HttpServletResponse;\nimport ch.bfh.egov.nutzenportfolio.Constants;\nimport ch.bfh.egov.nutzenportfolio.service.projekt.ProjektService;\nimport ch.bfh.egov.nutzenportfolio.service.projektgruppe.ProjektgruppeService;\nimport ch.bfh.egov.nutzenportfolio.tos.Projekt;\nimport org.apache.commons.logging.Log;\nimport org.apache.commons.logging.LogFactory;\nimport org.apache.struts.action.ActionForm;\nimport org.apache.struts.action.ActionForward;\nimport org.apache.struts.action.ActionMapping;\nimport org.apache.struts.action.ActionMessage;\nimport org.apache.struts.action.ActionMessages;\nimport org.apache.struts.action.DynaActionForm;\nimport org.apache.struts.actions.DispatchAction;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link ProjektAction}.\n* It contains ten unit test cases for the {@link ProjektAction#changeStatus(ActionMapping, ActionForm, HttpServletRequest, HttpServletResponse)} method.\n*/\nclass ProjektActionTest6 {"
	},
	{
		"original_code": "// KategorieAction.java\n/**\r\n * Nutzenportfolio\r\n * Copyright (C) 2006 Kompetenzzentrum E-Business, Simon Bergamin\r\n *\r\n * This program is free software; you can redistribute it and/or\r\n * modify it under the terms of the GNU General Public License\r\n * as published by the Free Software Foundation; either version 2\r\n * of the License, or (at your option) any later version.\r\n *\r\n * This program is distributed in the hope that it will be useful,\r\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n * GNU General Public License for more details.\r\n *\r\n * You should have received a copy of the GNU General Public License\r\n * along with this program; if not, write to the Free Software\r\n * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\r\n */\r\npackage ch.bfh.egov.nutzenportfolio.action;\r\n\r\nimport javax.servlet.http.HttpServletRequest;\r\nimport javax.servlet.http.HttpServletResponse;\r\nimport ch.bfh.egov.nutzenportfolio.Constants;\r\nimport ch.bfh.egov.nutzenportfolio.service.common.CommonService;\r\nimport ch.bfh.egov.nutzenportfolio.service.customizing.CustomizingService;\r\nimport ch.bfh.egov.nutzenportfolio.service.kategorie.KategorieService;\r\nimport ch.bfh.egov.nutzenportfolio.service.nutzenkriterium.NutzenkriteriumService;\r\nimport ch.bfh.egov.nutzenportfolio.tos.Kategorie;\r\nimport org.apache.commons.logging.Log;\r\nimport org.apache.commons.logging.LogFactory;\r\nimport org.apache.struts.action.ActionForm;\r\nimport org.apache.struts.action.ActionForward;\r\nimport org.apache.struts.action.ActionMapping;\r\nimport org.apache.struts.action.ActionMessage;\r\nimport org.apache.struts.action.ActionMessages;\r\nimport org.apache.struts.action.DynaActionForm;\r\nimport org.apache.struts.actions.DispatchAction;\r\n\r\npublic class KategorieAction extends DispatchAction {\r\n\r\n    private Log logger = LogFactory.getLog(this.getClass());\r\n\r\n    private KategorieService service;\r\n\r\n    public KategorieAction(KategorieService service, CommonService cService, CustomizingService customizingService, NutzenkriteriumService nService) {\r\n        super();\r\n        this.service = service;\r\n        service.init(cService, customizingService, nService);\r\n    }\r\n\r\n    public ActionForward list(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {\r\n        service.list(request);\r\n        return mapping.findForward(Constants.LIST);\r\n    }\r\n\r\n    public ActionForward prepare(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {\r\n        logger.debug(\"prepare\");\r\n        DynaActionForm kForm = (DynaActionForm) form;\r\n        service.populate(request, kForm);\r\n        return mapping.findForward(Constants.FORM);\r\n    }\r\n\r\n    public ActionForward edit(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {\r\n        DynaActionForm kForm = (DynaActionForm) form;\r\n        service.edit(request, kForm);\r\n        return mapping.findForward(Constants.FORM);\r\n    }\r\n\r\n    public ActionForward update(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {\r\n        DynaActionForm kForm = (DynaActionForm) form;\r\n        service.update(request, kForm);\r\n        service.list(request);\r\n        return mapping.findForward(Constants.LIST);\r\n    }\r\n\r\n    public ActionForward deletequestion(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {\r\n        DynaActionForm kForm = (DynaActionForm) form;\r\n        Kategorie k = service.getKategorie(request, kForm);\r\n        if (k == null || k.getSystem()) {\r\n            service.list(request);\r\n            return mapping.findForward(Constants.LIST);\r\n        }\r\n        ActionMessages messages = new ActionMessages();\r\n        service.deleteQuestion(request, k, messages);\r\n        saveMessages(request, messages);\r\n        return mapping.findForward(Constants.QUESTION);\r\n    }\r\n\r\n    public ActionForward delete(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {\r\n        DynaActionForm kForm = (DynaActionForm) form;\r\n        Kategorie k = service.getKategorie(request, kForm);\r\n        if (k == null || k.getSystem()) {\r\n            service.list(request);\r\n            return mapping.findForward(Constants.LIST);\r\n        }\r\n        // Lï¿½schen\r\n        service.delete(request, k);\r\n        service.list(request);\r\n        return mapping.findForward(Constants.LIST);\r\n    }\r\n\r\n    public ActionForward save(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {\r\n        // Formulardaten holen\r\n        DynaActionForm kForm = (DynaActionForm) form;\r\n        if (service.save(request, kForm)) {\r\n            return mapping.findForward(Constants.SUCCESS);\r\n        }\r\n        // Fehler bei keiner Auswahl\r\n        ActionMessages errors = new ActionMessages();\r\n        errors.add(ActionMessages.GLOBAL_MESSAGE, new ActionMessage(\"errors.select.one\", \"Kategorie\"));\r\n        saveMessages(request, errors);\r\n        return mapping.findForward(Constants.FAILURE);\r\n    }\r\n\r\n    public ActionForward add(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {\r\n        DynaActionForm kForm = (DynaActionForm) form;\r\n        ActionMessages errors = new ActionMessages();\r\n        ActionMessages messages = new ActionMessages();\r\n        if (!service.add(request, kForm, errors, messages)) {\r\n            saveErrors(request, errors);\r\n            saveMessages(request, messages);\r\n        }\r\n        service.populate(request, kForm);\r\n        return mapping.findForward(Constants.FORM);\r\n    }\r\n}\r\n",
		"id": "EvoSuiteBenchmark/46_nutzenportfolio/src/main/java/ch/bfh/egov/nutzenportfolio/action/KategorieActionTest0.java",
		"test_prompt": "// KategorieActionTest0.java\npackage ch.bfh.egov.nutzenportfolio.action;\n\nimport javax.servlet.http.HttpServletRequest;\nimport javax.servlet.http.HttpServletResponse;\nimport ch.bfh.egov.nutzenportfolio.Constants;\nimport ch.bfh.egov.nutzenportfolio.service.common.CommonService;\nimport ch.bfh.egov.nutzenportfolio.service.customizing.CustomizingService;\nimport ch.bfh.egov.nutzenportfolio.service.kategorie.KategorieService;\nimport ch.bfh.egov.nutzenportfolio.service.nutzenkriterium.NutzenkriteriumService;\nimport ch.bfh.egov.nutzenportfolio.tos.Kategorie;\nimport org.apache.commons.logging.Log;\nimport org.apache.commons.logging.LogFactory;\nimport org.apache.struts.action.ActionForm;\nimport org.apache.struts.action.ActionForward;\nimport org.apache.struts.action.ActionMapping;\nimport org.apache.struts.action.ActionMessage;\nimport org.apache.struts.action.ActionMessages;\nimport org.apache.struts.action.DynaActionForm;\nimport org.apache.struts.actions.DispatchAction;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link KategorieAction}.\n* It contains ten unit test cases for the {@link KategorieAction#list(ActionMapping, ActionForm, HttpServletRequest, HttpServletResponse)} method.\n*/\nclass KategorieActionTest0 {"
	},
	{
		"original_code": "// KategorieAction.java\n/**\r\n * Nutzenportfolio\r\n * Copyright (C) 2006 Kompetenzzentrum E-Business, Simon Bergamin\r\n *\r\n * This program is free software; you can redistribute it and/or\r\n * modify it under the terms of the GNU General Public License\r\n * as published by the Free Software Foundation; either version 2\r\n * of the License, or (at your option) any later version.\r\n *\r\n * This program is distributed in the hope that it will be useful,\r\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n * GNU General Public License for more details.\r\n *\r\n * You should have received a copy of the GNU General Public License\r\n * along with this program; if not, write to the Free Software\r\n * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\r\n */\r\npackage ch.bfh.egov.nutzenportfolio.action;\r\n\r\nimport javax.servlet.http.HttpServletRequest;\r\nimport javax.servlet.http.HttpServletResponse;\r\nimport ch.bfh.egov.nutzenportfolio.Constants;\r\nimport ch.bfh.egov.nutzenportfolio.service.common.CommonService;\r\nimport ch.bfh.egov.nutzenportfolio.service.customizing.CustomizingService;\r\nimport ch.bfh.egov.nutzenportfolio.service.kategorie.KategorieService;\r\nimport ch.bfh.egov.nutzenportfolio.service.nutzenkriterium.NutzenkriteriumService;\r\nimport ch.bfh.egov.nutzenportfolio.tos.Kategorie;\r\nimport org.apache.commons.logging.Log;\r\nimport org.apache.commons.logging.LogFactory;\r\nimport org.apache.struts.action.ActionForm;\r\nimport org.apache.struts.action.ActionForward;\r\nimport org.apache.struts.action.ActionMapping;\r\nimport org.apache.struts.action.ActionMessage;\r\nimport org.apache.struts.action.ActionMessages;\r\nimport org.apache.struts.action.DynaActionForm;\r\nimport org.apache.struts.actions.DispatchAction;\r\n\r\npublic class KategorieAction extends DispatchAction {\r\n\r\n    private Log logger = LogFactory.getLog(this.getClass());\r\n\r\n    private KategorieService service;\r\n\r\n    public KategorieAction(KategorieService service, CommonService cService, CustomizingService customizingService, NutzenkriteriumService nService) {\r\n        super();\r\n        this.service = service;\r\n        service.init(cService, customizingService, nService);\r\n    }\r\n\r\n    public ActionForward list(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {\r\n        service.list(request);\r\n        return mapping.findForward(Constants.LIST);\r\n    }\r\n\r\n    public ActionForward prepare(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {\r\n        logger.debug(\"prepare\");\r\n        DynaActionForm kForm = (DynaActionForm) form;\r\n        service.populate(request, kForm);\r\n        return mapping.findForward(Constants.FORM);\r\n    }\r\n\r\n    public ActionForward edit(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {\r\n        DynaActionForm kForm = (DynaActionForm) form;\r\n        service.edit(request, kForm);\r\n        return mapping.findForward(Constants.FORM);\r\n    }\r\n\r\n    public ActionForward update(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {\r\n        DynaActionForm kForm = (DynaActionForm) form;\r\n        service.update(request, kForm);\r\n        service.list(request);\r\n        return mapping.findForward(Constants.LIST);\r\n    }\r\n\r\n    public ActionForward deletequestion(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {\r\n        DynaActionForm kForm = (DynaActionForm) form;\r\n        Kategorie k = service.getKategorie(request, kForm);\r\n        if (k == null || k.getSystem()) {\r\n            service.list(request);\r\n            return mapping.findForward(Constants.LIST);\r\n        }\r\n        ActionMessages messages = new ActionMessages();\r\n        service.deleteQuestion(request, k, messages);\r\n        saveMessages(request, messages);\r\n        return mapping.findForward(Constants.QUESTION);\r\n    }\r\n\r\n    public ActionForward delete(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {\r\n        DynaActionForm kForm = (DynaActionForm) form;\r\n        Kategorie k = service.getKategorie(request, kForm);\r\n        if (k == null || k.getSystem()) {\r\n            service.list(request);\r\n            return mapping.findForward(Constants.LIST);\r\n        }\r\n        // Lï¿½schen\r\n        service.delete(request, k);\r\n        service.list(request);\r\n        return mapping.findForward(Constants.LIST);\r\n    }\r\n\r\n    public ActionForward save(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {\r\n        // Formulardaten holen\r\n        DynaActionForm kForm = (DynaActionForm) form;\r\n        if (service.save(request, kForm)) {\r\n            return mapping.findForward(Constants.SUCCESS);\r\n        }\r\n        // Fehler bei keiner Auswahl\r\n        ActionMessages errors = new ActionMessages();\r\n        errors.add(ActionMessages.GLOBAL_MESSAGE, new ActionMessage(\"errors.select.one\", \"Kategorie\"));\r\n        saveMessages(request, errors);\r\n        return mapping.findForward(Constants.FAILURE);\r\n    }\r\n\r\n    public ActionForward add(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {\r\n        DynaActionForm kForm = (DynaActionForm) form;\r\n        ActionMessages errors = new ActionMessages();\r\n        ActionMessages messages = new ActionMessages();\r\n        if (!service.add(request, kForm, errors, messages)) {\r\n            saveErrors(request, errors);\r\n            saveMessages(request, messages);\r\n        }\r\n        service.populate(request, kForm);\r\n        return mapping.findForward(Constants.FORM);\r\n    }\r\n}\r\n",
		"id": "EvoSuiteBenchmark/46_nutzenportfolio/src/main/java/ch/bfh/egov/nutzenportfolio/action/KategorieActionTest1.java",
		"test_prompt": "// KategorieActionTest1.java\npackage ch.bfh.egov.nutzenportfolio.action;\n\nimport javax.servlet.http.HttpServletRequest;\nimport javax.servlet.http.HttpServletResponse;\nimport ch.bfh.egov.nutzenportfolio.Constants;\nimport ch.bfh.egov.nutzenportfolio.service.common.CommonService;\nimport ch.bfh.egov.nutzenportfolio.service.customizing.CustomizingService;\nimport ch.bfh.egov.nutzenportfolio.service.kategorie.KategorieService;\nimport ch.bfh.egov.nutzenportfolio.service.nutzenkriterium.NutzenkriteriumService;\nimport ch.bfh.egov.nutzenportfolio.tos.Kategorie;\nimport org.apache.commons.logging.Log;\nimport org.apache.commons.logging.LogFactory;\nimport org.apache.struts.action.ActionForm;\nimport org.apache.struts.action.ActionForward;\nimport org.apache.struts.action.ActionMapping;\nimport org.apache.struts.action.ActionMessage;\nimport org.apache.struts.action.ActionMessages;\nimport org.apache.struts.action.DynaActionForm;\nimport org.apache.struts.actions.DispatchAction;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link KategorieAction}.\n* It contains ten unit test cases for the {@link KategorieAction#prepare(ActionMapping, ActionForm, HttpServletRequest, HttpServletResponse)} method.\n*/\nclass KategorieActionTest1 {"
	},
	{
		"original_code": "// KategorieAction.java\n/**\r\n * Nutzenportfolio\r\n * Copyright (C) 2006 Kompetenzzentrum E-Business, Simon Bergamin\r\n *\r\n * This program is free software; you can redistribute it and/or\r\n * modify it under the terms of the GNU General Public License\r\n * as published by the Free Software Foundation; either version 2\r\n * of the License, or (at your option) any later version.\r\n *\r\n * This program is distributed in the hope that it will be useful,\r\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n * GNU General Public License for more details.\r\n *\r\n * You should have received a copy of the GNU General Public License\r\n * along with this program; if not, write to the Free Software\r\n * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\r\n */\r\npackage ch.bfh.egov.nutzenportfolio.action;\r\n\r\nimport javax.servlet.http.HttpServletRequest;\r\nimport javax.servlet.http.HttpServletResponse;\r\nimport ch.bfh.egov.nutzenportfolio.Constants;\r\nimport ch.bfh.egov.nutzenportfolio.service.common.CommonService;\r\nimport ch.bfh.egov.nutzenportfolio.service.customizing.CustomizingService;\r\nimport ch.bfh.egov.nutzenportfolio.service.kategorie.KategorieService;\r\nimport ch.bfh.egov.nutzenportfolio.service.nutzenkriterium.NutzenkriteriumService;\r\nimport ch.bfh.egov.nutzenportfolio.tos.Kategorie;\r\nimport org.apache.commons.logging.Log;\r\nimport org.apache.commons.logging.LogFactory;\r\nimport org.apache.struts.action.ActionForm;\r\nimport org.apache.struts.action.ActionForward;\r\nimport org.apache.struts.action.ActionMapping;\r\nimport org.apache.struts.action.ActionMessage;\r\nimport org.apache.struts.action.ActionMessages;\r\nimport org.apache.struts.action.DynaActionForm;\r\nimport org.apache.struts.actions.DispatchAction;\r\n\r\npublic class KategorieAction extends DispatchAction {\r\n\r\n    private Log logger = LogFactory.getLog(this.getClass());\r\n\r\n    private KategorieService service;\r\n\r\n    public KategorieAction(KategorieService service, CommonService cService, CustomizingService customizingService, NutzenkriteriumService nService) {\r\n        super();\r\n        this.service = service;\r\n        service.init(cService, customizingService, nService);\r\n    }\r\n\r\n    public ActionForward list(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {\r\n        service.list(request);\r\n        return mapping.findForward(Constants.LIST);\r\n    }\r\n\r\n    public ActionForward prepare(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {\r\n        logger.debug(\"prepare\");\r\n        DynaActionForm kForm = (DynaActionForm) form;\r\n        service.populate(request, kForm);\r\n        return mapping.findForward(Constants.FORM);\r\n    }\r\n\r\n    public ActionForward edit(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {\r\n        DynaActionForm kForm = (DynaActionForm) form;\r\n        service.edit(request, kForm);\r\n        return mapping.findForward(Constants.FORM);\r\n    }\r\n\r\n    public ActionForward update(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {\r\n        DynaActionForm kForm = (DynaActionForm) form;\r\n        service.update(request, kForm);\r\n        service.list(request);\r\n        return mapping.findForward(Constants.LIST);\r\n    }\r\n\r\n    public ActionForward deletequestion(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {\r\n        DynaActionForm kForm = (DynaActionForm) form;\r\n        Kategorie k = service.getKategorie(request, kForm);\r\n        if (k == null || k.getSystem()) {\r\n            service.list(request);\r\n            return mapping.findForward(Constants.LIST);\r\n        }\r\n        ActionMessages messages = new ActionMessages();\r\n        service.deleteQuestion(request, k, messages);\r\n        saveMessages(request, messages);\r\n        return mapping.findForward(Constants.QUESTION);\r\n    }\r\n\r\n    public ActionForward delete(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {\r\n        DynaActionForm kForm = (DynaActionForm) form;\r\n        Kategorie k = service.getKategorie(request, kForm);\r\n        if (k == null || k.getSystem()) {\r\n            service.list(request);\r\n            return mapping.findForward(Constants.LIST);\r\n        }\r\n        // Lï¿½schen\r\n        service.delete(request, k);\r\n        service.list(request);\r\n        return mapping.findForward(Constants.LIST);\r\n    }\r\n\r\n    public ActionForward save(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {\r\n        // Formulardaten holen\r\n        DynaActionForm kForm = (DynaActionForm) form;\r\n        if (service.save(request, kForm)) {\r\n            return mapping.findForward(Constants.SUCCESS);\r\n        }\r\n        // Fehler bei keiner Auswahl\r\n        ActionMessages errors = new ActionMessages();\r\n        errors.add(ActionMessages.GLOBAL_MESSAGE, new ActionMessage(\"errors.select.one\", \"Kategorie\"));\r\n        saveMessages(request, errors);\r\n        return mapping.findForward(Constants.FAILURE);\r\n    }\r\n\r\n    public ActionForward add(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {\r\n        DynaActionForm kForm = (DynaActionForm) form;\r\n        ActionMessages errors = new ActionMessages();\r\n        ActionMessages messages = new ActionMessages();\r\n        if (!service.add(request, kForm, errors, messages)) {\r\n            saveErrors(request, errors);\r\n            saveMessages(request, messages);\r\n        }\r\n        service.populate(request, kForm);\r\n        return mapping.findForward(Constants.FORM);\r\n    }\r\n}\r\n",
		"id": "EvoSuiteBenchmark/46_nutzenportfolio/src/main/java/ch/bfh/egov/nutzenportfolio/action/KategorieActionTest2.java",
		"test_prompt": "// KategorieActionTest2.java\npackage ch.bfh.egov.nutzenportfolio.action;\n\nimport javax.servlet.http.HttpServletRequest;\nimport javax.servlet.http.HttpServletResponse;\nimport ch.bfh.egov.nutzenportfolio.Constants;\nimport ch.bfh.egov.nutzenportfolio.service.common.CommonService;\nimport ch.bfh.egov.nutzenportfolio.service.customizing.CustomizingService;\nimport ch.bfh.egov.nutzenportfolio.service.kategorie.KategorieService;\nimport ch.bfh.egov.nutzenportfolio.service.nutzenkriterium.NutzenkriteriumService;\nimport ch.bfh.egov.nutzenportfolio.tos.Kategorie;\nimport org.apache.commons.logging.Log;\nimport org.apache.commons.logging.LogFactory;\nimport org.apache.struts.action.ActionForm;\nimport org.apache.struts.action.ActionForward;\nimport org.apache.struts.action.ActionMapping;\nimport org.apache.struts.action.ActionMessage;\nimport org.apache.struts.action.ActionMessages;\nimport org.apache.struts.action.DynaActionForm;\nimport org.apache.struts.actions.DispatchAction;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link KategorieAction}.\n* It contains ten unit test cases for the {@link KategorieAction#edit(ActionMapping, ActionForm, HttpServletRequest, HttpServletResponse)} method.\n*/\nclass KategorieActionTest2 {"
	},
	{
		"original_code": "// KategorieAction.java\n/**\r\n * Nutzenportfolio\r\n * Copyright (C) 2006 Kompetenzzentrum E-Business, Simon Bergamin\r\n *\r\n * This program is free software; you can redistribute it and/or\r\n * modify it under the terms of the GNU General Public License\r\n * as published by the Free Software Foundation; either version 2\r\n * of the License, or (at your option) any later version.\r\n *\r\n * This program is distributed in the hope that it will be useful,\r\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n * GNU General Public License for more details.\r\n *\r\n * You should have received a copy of the GNU General Public License\r\n * along with this program; if not, write to the Free Software\r\n * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\r\n */\r\npackage ch.bfh.egov.nutzenportfolio.action;\r\n\r\nimport javax.servlet.http.HttpServletRequest;\r\nimport javax.servlet.http.HttpServletResponse;\r\nimport ch.bfh.egov.nutzenportfolio.Constants;\r\nimport ch.bfh.egov.nutzenportfolio.service.common.CommonService;\r\nimport ch.bfh.egov.nutzenportfolio.service.customizing.CustomizingService;\r\nimport ch.bfh.egov.nutzenportfolio.service.kategorie.KategorieService;\r\nimport ch.bfh.egov.nutzenportfolio.service.nutzenkriterium.NutzenkriteriumService;\r\nimport ch.bfh.egov.nutzenportfolio.tos.Kategorie;\r\nimport org.apache.commons.logging.Log;\r\nimport org.apache.commons.logging.LogFactory;\r\nimport org.apache.struts.action.ActionForm;\r\nimport org.apache.struts.action.ActionForward;\r\nimport org.apache.struts.action.ActionMapping;\r\nimport org.apache.struts.action.ActionMessage;\r\nimport org.apache.struts.action.ActionMessages;\r\nimport org.apache.struts.action.DynaActionForm;\r\nimport org.apache.struts.actions.DispatchAction;\r\n\r\npublic class KategorieAction extends DispatchAction {\r\n\r\n    private Log logger = LogFactory.getLog(this.getClass());\r\n\r\n    private KategorieService service;\r\n\r\n    public KategorieAction(KategorieService service, CommonService cService, CustomizingService customizingService, NutzenkriteriumService nService) {\r\n        super();\r\n        this.service = service;\r\n        service.init(cService, customizingService, nService);\r\n    }\r\n\r\n    public ActionForward list(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {\r\n        service.list(request);\r\n        return mapping.findForward(Constants.LIST);\r\n    }\r\n\r\n    public ActionForward prepare(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {\r\n        logger.debug(\"prepare\");\r\n        DynaActionForm kForm = (DynaActionForm) form;\r\n        service.populate(request, kForm);\r\n        return mapping.findForward(Constants.FORM);\r\n    }\r\n\r\n    public ActionForward edit(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {\r\n        DynaActionForm kForm = (DynaActionForm) form;\r\n        service.edit(request, kForm);\r\n        return mapping.findForward(Constants.FORM);\r\n    }\r\n\r\n    public ActionForward update(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {\r\n        DynaActionForm kForm = (DynaActionForm) form;\r\n        service.update(request, kForm);\r\n        service.list(request);\r\n        return mapping.findForward(Constants.LIST);\r\n    }\r\n\r\n    public ActionForward deletequestion(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {\r\n        DynaActionForm kForm = (DynaActionForm) form;\r\n        Kategorie k = service.getKategorie(request, kForm);\r\n        if (k == null || k.getSystem()) {\r\n            service.list(request);\r\n            return mapping.findForward(Constants.LIST);\r\n        }\r\n        ActionMessages messages = new ActionMessages();\r\n        service.deleteQuestion(request, k, messages);\r\n        saveMessages(request, messages);\r\n        return mapping.findForward(Constants.QUESTION);\r\n    }\r\n\r\n    public ActionForward delete(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {\r\n        DynaActionForm kForm = (DynaActionForm) form;\r\n        Kategorie k = service.getKategorie(request, kForm);\r\n        if (k == null || k.getSystem()) {\r\n            service.list(request);\r\n            return mapping.findForward(Constants.LIST);\r\n        }\r\n        // Lï¿½schen\r\n        service.delete(request, k);\r\n        service.list(request);\r\n        return mapping.findForward(Constants.LIST);\r\n    }\r\n\r\n    public ActionForward save(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {\r\n        // Formulardaten holen\r\n        DynaActionForm kForm = (DynaActionForm) form;\r\n        if (service.save(request, kForm)) {\r\n            return mapping.findForward(Constants.SUCCESS);\r\n        }\r\n        // Fehler bei keiner Auswahl\r\n        ActionMessages errors = new ActionMessages();\r\n        errors.add(ActionMessages.GLOBAL_MESSAGE, new ActionMessage(\"errors.select.one\", \"Kategorie\"));\r\n        saveMessages(request, errors);\r\n        return mapping.findForward(Constants.FAILURE);\r\n    }\r\n\r\n    public ActionForward add(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {\r\n        DynaActionForm kForm = (DynaActionForm) form;\r\n        ActionMessages errors = new ActionMessages();\r\n        ActionMessages messages = new ActionMessages();\r\n        if (!service.add(request, kForm, errors, messages)) {\r\n            saveErrors(request, errors);\r\n            saveMessages(request, messages);\r\n        }\r\n        service.populate(request, kForm);\r\n        return mapping.findForward(Constants.FORM);\r\n    }\r\n}\r\n",
		"id": "EvoSuiteBenchmark/46_nutzenportfolio/src/main/java/ch/bfh/egov/nutzenportfolio/action/KategorieActionTest3.java",
		"test_prompt": "// KategorieActionTest3.java\npackage ch.bfh.egov.nutzenportfolio.action;\n\nimport javax.servlet.http.HttpServletRequest;\nimport javax.servlet.http.HttpServletResponse;\nimport ch.bfh.egov.nutzenportfolio.Constants;\nimport ch.bfh.egov.nutzenportfolio.service.common.CommonService;\nimport ch.bfh.egov.nutzenportfolio.service.customizing.CustomizingService;\nimport ch.bfh.egov.nutzenportfolio.service.kategorie.KategorieService;\nimport ch.bfh.egov.nutzenportfolio.service.nutzenkriterium.NutzenkriteriumService;\nimport ch.bfh.egov.nutzenportfolio.tos.Kategorie;\nimport org.apache.commons.logging.Log;\nimport org.apache.commons.logging.LogFactory;\nimport org.apache.struts.action.ActionForm;\nimport org.apache.struts.action.ActionForward;\nimport org.apache.struts.action.ActionMapping;\nimport org.apache.struts.action.ActionMessage;\nimport org.apache.struts.action.ActionMessages;\nimport org.apache.struts.action.DynaActionForm;\nimport org.apache.struts.actions.DispatchAction;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link KategorieAction}.\n* It contains ten unit test cases for the {@link KategorieAction#update(ActionMapping, ActionForm, HttpServletRequest, HttpServletResponse)} method.\n*/\nclass KategorieActionTest3 {"
	},
	{
		"original_code": "// KategorieAction.java\n/**\r\n * Nutzenportfolio\r\n * Copyright (C) 2006 Kompetenzzentrum E-Business, Simon Bergamin\r\n *\r\n * This program is free software; you can redistribute it and/or\r\n * modify it under the terms of the GNU General Public License\r\n * as published by the Free Software Foundation; either version 2\r\n * of the License, or (at your option) any later version.\r\n *\r\n * This program is distributed in the hope that it will be useful,\r\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n * GNU General Public License for more details.\r\n *\r\n * You should have received a copy of the GNU General Public License\r\n * along with this program; if not, write to the Free Software\r\n * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\r\n */\r\npackage ch.bfh.egov.nutzenportfolio.action;\r\n\r\nimport javax.servlet.http.HttpServletRequest;\r\nimport javax.servlet.http.HttpServletResponse;\r\nimport ch.bfh.egov.nutzenportfolio.Constants;\r\nimport ch.bfh.egov.nutzenportfolio.service.common.CommonService;\r\nimport ch.bfh.egov.nutzenportfolio.service.customizing.CustomizingService;\r\nimport ch.bfh.egov.nutzenportfolio.service.kategorie.KategorieService;\r\nimport ch.bfh.egov.nutzenportfolio.service.nutzenkriterium.NutzenkriteriumService;\r\nimport ch.bfh.egov.nutzenportfolio.tos.Kategorie;\r\nimport org.apache.commons.logging.Log;\r\nimport org.apache.commons.logging.LogFactory;\r\nimport org.apache.struts.action.ActionForm;\r\nimport org.apache.struts.action.ActionForward;\r\nimport org.apache.struts.action.ActionMapping;\r\nimport org.apache.struts.action.ActionMessage;\r\nimport org.apache.struts.action.ActionMessages;\r\nimport org.apache.struts.action.DynaActionForm;\r\nimport org.apache.struts.actions.DispatchAction;\r\n\r\npublic class KategorieAction extends DispatchAction {\r\n\r\n    private Log logger = LogFactory.getLog(this.getClass());\r\n\r\n    private KategorieService service;\r\n\r\n    public KategorieAction(KategorieService service, CommonService cService, CustomizingService customizingService, NutzenkriteriumService nService) {\r\n        super();\r\n        this.service = service;\r\n        service.init(cService, customizingService, nService);\r\n    }\r\n\r\n    public ActionForward list(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {\r\n        service.list(request);\r\n        return mapping.findForward(Constants.LIST);\r\n    }\r\n\r\n    public ActionForward prepare(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {\r\n        logger.debug(\"prepare\");\r\n        DynaActionForm kForm = (DynaActionForm) form;\r\n        service.populate(request, kForm);\r\n        return mapping.findForward(Constants.FORM);\r\n    }\r\n\r\n    public ActionForward edit(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {\r\n        DynaActionForm kForm = (DynaActionForm) form;\r\n        service.edit(request, kForm);\r\n        return mapping.findForward(Constants.FORM);\r\n    }\r\n\r\n    public ActionForward update(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {\r\n        DynaActionForm kForm = (DynaActionForm) form;\r\n        service.update(request, kForm);\r\n        service.list(request);\r\n        return mapping.findForward(Constants.LIST);\r\n    }\r\n\r\n    public ActionForward deletequestion(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {\r\n        DynaActionForm kForm = (DynaActionForm) form;\r\n        Kategorie k = service.getKategorie(request, kForm);\r\n        if (k == null || k.getSystem()) {\r\n            service.list(request);\r\n            return mapping.findForward(Constants.LIST);\r\n        }\r\n        ActionMessages messages = new ActionMessages();\r\n        service.deleteQuestion(request, k, messages);\r\n        saveMessages(request, messages);\r\n        return mapping.findForward(Constants.QUESTION);\r\n    }\r\n\r\n    public ActionForward delete(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {\r\n        DynaActionForm kForm = (DynaActionForm) form;\r\n        Kategorie k = service.getKategorie(request, kForm);\r\n        if (k == null || k.getSystem()) {\r\n            service.list(request);\r\n            return mapping.findForward(Constants.LIST);\r\n        }\r\n        // Lï¿½schen\r\n        service.delete(request, k);\r\n        service.list(request);\r\n        return mapping.findForward(Constants.LIST);\r\n    }\r\n\r\n    public ActionForward save(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {\r\n        // Formulardaten holen\r\n        DynaActionForm kForm = (DynaActionForm) form;\r\n        if (service.save(request, kForm)) {\r\n            return mapping.findForward(Constants.SUCCESS);\r\n        }\r\n        // Fehler bei keiner Auswahl\r\n        ActionMessages errors = new ActionMessages();\r\n        errors.add(ActionMessages.GLOBAL_MESSAGE, new ActionMessage(\"errors.select.one\", \"Kategorie\"));\r\n        saveMessages(request, errors);\r\n        return mapping.findForward(Constants.FAILURE);\r\n    }\r\n\r\n    public ActionForward add(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {\r\n        DynaActionForm kForm = (DynaActionForm) form;\r\n        ActionMessages errors = new ActionMessages();\r\n        ActionMessages messages = new ActionMessages();\r\n        if (!service.add(request, kForm, errors, messages)) {\r\n            saveErrors(request, errors);\r\n            saveMessages(request, messages);\r\n        }\r\n        service.populate(request, kForm);\r\n        return mapping.findForward(Constants.FORM);\r\n    }\r\n}\r\n",
		"id": "EvoSuiteBenchmark/46_nutzenportfolio/src/main/java/ch/bfh/egov/nutzenportfolio/action/KategorieActionTest4.java",
		"test_prompt": "// KategorieActionTest4.java\npackage ch.bfh.egov.nutzenportfolio.action;\n\nimport javax.servlet.http.HttpServletRequest;\nimport javax.servlet.http.HttpServletResponse;\nimport ch.bfh.egov.nutzenportfolio.Constants;\nimport ch.bfh.egov.nutzenportfolio.service.common.CommonService;\nimport ch.bfh.egov.nutzenportfolio.service.customizing.CustomizingService;\nimport ch.bfh.egov.nutzenportfolio.service.kategorie.KategorieService;\nimport ch.bfh.egov.nutzenportfolio.service.nutzenkriterium.NutzenkriteriumService;\nimport ch.bfh.egov.nutzenportfolio.tos.Kategorie;\nimport org.apache.commons.logging.Log;\nimport org.apache.commons.logging.LogFactory;\nimport org.apache.struts.action.ActionForm;\nimport org.apache.struts.action.ActionForward;\nimport org.apache.struts.action.ActionMapping;\nimport org.apache.struts.action.ActionMessage;\nimport org.apache.struts.action.ActionMessages;\nimport org.apache.struts.action.DynaActionForm;\nimport org.apache.struts.actions.DispatchAction;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link KategorieAction}.\n* It contains ten unit test cases for the {@link KategorieAction#deletequestion(ActionMapping, ActionForm, HttpServletRequest, HttpServletResponse)} method.\n*/\nclass KategorieActionTest4 {"
	},
	{
		"original_code": "// KategorieAction.java\n/**\r\n * Nutzenportfolio\r\n * Copyright (C) 2006 Kompetenzzentrum E-Business, Simon Bergamin\r\n *\r\n * This program is free software; you can redistribute it and/or\r\n * modify it under the terms of the GNU General Public License\r\n * as published by the Free Software Foundation; either version 2\r\n * of the License, or (at your option) any later version.\r\n *\r\n * This program is distributed in the hope that it will be useful,\r\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n * GNU General Public License for more details.\r\n *\r\n * You should have received a copy of the GNU General Public License\r\n * along with this program; if not, write to the Free Software\r\n * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\r\n */\r\npackage ch.bfh.egov.nutzenportfolio.action;\r\n\r\nimport javax.servlet.http.HttpServletRequest;\r\nimport javax.servlet.http.HttpServletResponse;\r\nimport ch.bfh.egov.nutzenportfolio.Constants;\r\nimport ch.bfh.egov.nutzenportfolio.service.common.CommonService;\r\nimport ch.bfh.egov.nutzenportfolio.service.customizing.CustomizingService;\r\nimport ch.bfh.egov.nutzenportfolio.service.kategorie.KategorieService;\r\nimport ch.bfh.egov.nutzenportfolio.service.nutzenkriterium.NutzenkriteriumService;\r\nimport ch.bfh.egov.nutzenportfolio.tos.Kategorie;\r\nimport org.apache.commons.logging.Log;\r\nimport org.apache.commons.logging.LogFactory;\r\nimport org.apache.struts.action.ActionForm;\r\nimport org.apache.struts.action.ActionForward;\r\nimport org.apache.struts.action.ActionMapping;\r\nimport org.apache.struts.action.ActionMessage;\r\nimport org.apache.struts.action.ActionMessages;\r\nimport org.apache.struts.action.DynaActionForm;\r\nimport org.apache.struts.actions.DispatchAction;\r\n\r\npublic class KategorieAction extends DispatchAction {\r\n\r\n    private Log logger = LogFactory.getLog(this.getClass());\r\n\r\n    private KategorieService service;\r\n\r\n    public KategorieAction(KategorieService service, CommonService cService, CustomizingService customizingService, NutzenkriteriumService nService) {\r\n        super();\r\n        this.service = service;\r\n        service.init(cService, customizingService, nService);\r\n    }\r\n\r\n    public ActionForward list(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {\r\n        service.list(request);\r\n        return mapping.findForward(Constants.LIST);\r\n    }\r\n\r\n    public ActionForward prepare(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {\r\n        logger.debug(\"prepare\");\r\n        DynaActionForm kForm = (DynaActionForm) form;\r\n        service.populate(request, kForm);\r\n        return mapping.findForward(Constants.FORM);\r\n    }\r\n\r\n    public ActionForward edit(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {\r\n        DynaActionForm kForm = (DynaActionForm) form;\r\n        service.edit(request, kForm);\r\n        return mapping.findForward(Constants.FORM);\r\n    }\r\n\r\n    public ActionForward update(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {\r\n        DynaActionForm kForm = (DynaActionForm) form;\r\n        service.update(request, kForm);\r\n        service.list(request);\r\n        return mapping.findForward(Constants.LIST);\r\n    }\r\n\r\n    public ActionForward deletequestion(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {\r\n        DynaActionForm kForm = (DynaActionForm) form;\r\n        Kategorie k = service.getKategorie(request, kForm);\r\n        if (k == null || k.getSystem()) {\r\n            service.list(request);\r\n            return mapping.findForward(Constants.LIST);\r\n        }\r\n        ActionMessages messages = new ActionMessages();\r\n        service.deleteQuestion(request, k, messages);\r\n        saveMessages(request, messages);\r\n        return mapping.findForward(Constants.QUESTION);\r\n    }\r\n\r\n    public ActionForward delete(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {\r\n        DynaActionForm kForm = (DynaActionForm) form;\r\n        Kategorie k = service.getKategorie(request, kForm);\r\n        if (k == null || k.getSystem()) {\r\n            service.list(request);\r\n            return mapping.findForward(Constants.LIST);\r\n        }\r\n        // Lï¿½schen\r\n        service.delete(request, k);\r\n        service.list(request);\r\n        return mapping.findForward(Constants.LIST);\r\n    }\r\n\r\n    public ActionForward save(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {\r\n        // Formulardaten holen\r\n        DynaActionForm kForm = (DynaActionForm) form;\r\n        if (service.save(request, kForm)) {\r\n            return mapping.findForward(Constants.SUCCESS);\r\n        }\r\n        // Fehler bei keiner Auswahl\r\n        ActionMessages errors = new ActionMessages();\r\n        errors.add(ActionMessages.GLOBAL_MESSAGE, new ActionMessage(\"errors.select.one\", \"Kategorie\"));\r\n        saveMessages(request, errors);\r\n        return mapping.findForward(Constants.FAILURE);\r\n    }\r\n\r\n    public ActionForward add(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {\r\n        DynaActionForm kForm = (DynaActionForm) form;\r\n        ActionMessages errors = new ActionMessages();\r\n        ActionMessages messages = new ActionMessages();\r\n        if (!service.add(request, kForm, errors, messages)) {\r\n            saveErrors(request, errors);\r\n            saveMessages(request, messages);\r\n        }\r\n        service.populate(request, kForm);\r\n        return mapping.findForward(Constants.FORM);\r\n    }\r\n}\r\n",
		"id": "EvoSuiteBenchmark/46_nutzenportfolio/src/main/java/ch/bfh/egov/nutzenportfolio/action/KategorieActionTest5.java",
		"test_prompt": "// KategorieActionTest5.java\npackage ch.bfh.egov.nutzenportfolio.action;\n\nimport javax.servlet.http.HttpServletRequest;\nimport javax.servlet.http.HttpServletResponse;\nimport ch.bfh.egov.nutzenportfolio.Constants;\nimport ch.bfh.egov.nutzenportfolio.service.common.CommonService;\nimport ch.bfh.egov.nutzenportfolio.service.customizing.CustomizingService;\nimport ch.bfh.egov.nutzenportfolio.service.kategorie.KategorieService;\nimport ch.bfh.egov.nutzenportfolio.service.nutzenkriterium.NutzenkriteriumService;\nimport ch.bfh.egov.nutzenportfolio.tos.Kategorie;\nimport org.apache.commons.logging.Log;\nimport org.apache.commons.logging.LogFactory;\nimport org.apache.struts.action.ActionForm;\nimport org.apache.struts.action.ActionForward;\nimport org.apache.struts.action.ActionMapping;\nimport org.apache.struts.action.ActionMessage;\nimport org.apache.struts.action.ActionMessages;\nimport org.apache.struts.action.DynaActionForm;\nimport org.apache.struts.actions.DispatchAction;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link KategorieAction}.\n* It contains ten unit test cases for the {@link KategorieAction#delete(ActionMapping, ActionForm, HttpServletRequest, HttpServletResponse)} method.\n*/\nclass KategorieActionTest5 {"
	},
	{
		"original_code": "// KategorieAction.java\n/**\r\n * Nutzenportfolio\r\n * Copyright (C) 2006 Kompetenzzentrum E-Business, Simon Bergamin\r\n *\r\n * This program is free software; you can redistribute it and/or\r\n * modify it under the terms of the GNU General Public License\r\n * as published by the Free Software Foundation; either version 2\r\n * of the License, or (at your option) any later version.\r\n *\r\n * This program is distributed in the hope that it will be useful,\r\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n * GNU General Public License for more details.\r\n *\r\n * You should have received a copy of the GNU General Public License\r\n * along with this program; if not, write to the Free Software\r\n * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\r\n */\r\npackage ch.bfh.egov.nutzenportfolio.action;\r\n\r\nimport javax.servlet.http.HttpServletRequest;\r\nimport javax.servlet.http.HttpServletResponse;\r\nimport ch.bfh.egov.nutzenportfolio.Constants;\r\nimport ch.bfh.egov.nutzenportfolio.service.common.CommonService;\r\nimport ch.bfh.egov.nutzenportfolio.service.customizing.CustomizingService;\r\nimport ch.bfh.egov.nutzenportfolio.service.kategorie.KategorieService;\r\nimport ch.bfh.egov.nutzenportfolio.service.nutzenkriterium.NutzenkriteriumService;\r\nimport ch.bfh.egov.nutzenportfolio.tos.Kategorie;\r\nimport org.apache.commons.logging.Log;\r\nimport org.apache.commons.logging.LogFactory;\r\nimport org.apache.struts.action.ActionForm;\r\nimport org.apache.struts.action.ActionForward;\r\nimport org.apache.struts.action.ActionMapping;\r\nimport org.apache.struts.action.ActionMessage;\r\nimport org.apache.struts.action.ActionMessages;\r\nimport org.apache.struts.action.DynaActionForm;\r\nimport org.apache.struts.actions.DispatchAction;\r\n\r\npublic class KategorieAction extends DispatchAction {\r\n\r\n    private Log logger = LogFactory.getLog(this.getClass());\r\n\r\n    private KategorieService service;\r\n\r\n    public KategorieAction(KategorieService service, CommonService cService, CustomizingService customizingService, NutzenkriteriumService nService) {\r\n        super();\r\n        this.service = service;\r\n        service.init(cService, customizingService, nService);\r\n    }\r\n\r\n    public ActionForward list(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {\r\n        service.list(request);\r\n        return mapping.findForward(Constants.LIST);\r\n    }\r\n\r\n    public ActionForward prepare(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {\r\n        logger.debug(\"prepare\");\r\n        DynaActionForm kForm = (DynaActionForm) form;\r\n        service.populate(request, kForm);\r\n        return mapping.findForward(Constants.FORM);\r\n    }\r\n\r\n    public ActionForward edit(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {\r\n        DynaActionForm kForm = (DynaActionForm) form;\r\n        service.edit(request, kForm);\r\n        return mapping.findForward(Constants.FORM);\r\n    }\r\n\r\n    public ActionForward update(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {\r\n        DynaActionForm kForm = (DynaActionForm) form;\r\n        service.update(request, kForm);\r\n        service.list(request);\r\n        return mapping.findForward(Constants.LIST);\r\n    }\r\n\r\n    public ActionForward deletequestion(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {\r\n        DynaActionForm kForm = (DynaActionForm) form;\r\n        Kategorie k = service.getKategorie(request, kForm);\r\n        if (k == null || k.getSystem()) {\r\n            service.list(request);\r\n            return mapping.findForward(Constants.LIST);\r\n        }\r\n        ActionMessages messages = new ActionMessages();\r\n        service.deleteQuestion(request, k, messages);\r\n        saveMessages(request, messages);\r\n        return mapping.findForward(Constants.QUESTION);\r\n    }\r\n\r\n    public ActionForward delete(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {\r\n        DynaActionForm kForm = (DynaActionForm) form;\r\n        Kategorie k = service.getKategorie(request, kForm);\r\n        if (k == null || k.getSystem()) {\r\n            service.list(request);\r\n            return mapping.findForward(Constants.LIST);\r\n        }\r\n        // Lï¿½schen\r\n        service.delete(request, k);\r\n        service.list(request);\r\n        return mapping.findForward(Constants.LIST);\r\n    }\r\n\r\n    public ActionForward save(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {\r\n        // Formulardaten holen\r\n        DynaActionForm kForm = (DynaActionForm) form;\r\n        if (service.save(request, kForm)) {\r\n            return mapping.findForward(Constants.SUCCESS);\r\n        }\r\n        // Fehler bei keiner Auswahl\r\n        ActionMessages errors = new ActionMessages();\r\n        errors.add(ActionMessages.GLOBAL_MESSAGE, new ActionMessage(\"errors.select.one\", \"Kategorie\"));\r\n        saveMessages(request, errors);\r\n        return mapping.findForward(Constants.FAILURE);\r\n    }\r\n\r\n    public ActionForward add(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {\r\n        DynaActionForm kForm = (DynaActionForm) form;\r\n        ActionMessages errors = new ActionMessages();\r\n        ActionMessages messages = new ActionMessages();\r\n        if (!service.add(request, kForm, errors, messages)) {\r\n            saveErrors(request, errors);\r\n            saveMessages(request, messages);\r\n        }\r\n        service.populate(request, kForm);\r\n        return mapping.findForward(Constants.FORM);\r\n    }\r\n}\r\n",
		"id": "EvoSuiteBenchmark/46_nutzenportfolio/src/main/java/ch/bfh/egov/nutzenportfolio/action/KategorieActionTest6.java",
		"test_prompt": "// KategorieActionTest6.java\npackage ch.bfh.egov.nutzenportfolio.action;\n\nimport javax.servlet.http.HttpServletRequest;\nimport javax.servlet.http.HttpServletResponse;\nimport ch.bfh.egov.nutzenportfolio.Constants;\nimport ch.bfh.egov.nutzenportfolio.service.common.CommonService;\nimport ch.bfh.egov.nutzenportfolio.service.customizing.CustomizingService;\nimport ch.bfh.egov.nutzenportfolio.service.kategorie.KategorieService;\nimport ch.bfh.egov.nutzenportfolio.service.nutzenkriterium.NutzenkriteriumService;\nimport ch.bfh.egov.nutzenportfolio.tos.Kategorie;\nimport org.apache.commons.logging.Log;\nimport org.apache.commons.logging.LogFactory;\nimport org.apache.struts.action.ActionForm;\nimport org.apache.struts.action.ActionForward;\nimport org.apache.struts.action.ActionMapping;\nimport org.apache.struts.action.ActionMessage;\nimport org.apache.struts.action.ActionMessages;\nimport org.apache.struts.action.DynaActionForm;\nimport org.apache.struts.actions.DispatchAction;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link KategorieAction}.\n* It contains ten unit test cases for the {@link KategorieAction#save(ActionMapping, ActionForm, HttpServletRequest, HttpServletResponse)} method.\n*/\nclass KategorieActionTest6 {"
	},
	{
		"original_code": "// KategorieAction.java\n/**\r\n * Nutzenportfolio\r\n * Copyright (C) 2006 Kompetenzzentrum E-Business, Simon Bergamin\r\n *\r\n * This program is free software; you can redistribute it and/or\r\n * modify it under the terms of the GNU General Public License\r\n * as published by the Free Software Foundation; either version 2\r\n * of the License, or (at your option) any later version.\r\n *\r\n * This program is distributed in the hope that it will be useful,\r\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n * GNU General Public License for more details.\r\n *\r\n * You should have received a copy of the GNU General Public License\r\n * along with this program; if not, write to the Free Software\r\n * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\r\n */\r\npackage ch.bfh.egov.nutzenportfolio.action;\r\n\r\nimport javax.servlet.http.HttpServletRequest;\r\nimport javax.servlet.http.HttpServletResponse;\r\nimport ch.bfh.egov.nutzenportfolio.Constants;\r\nimport ch.bfh.egov.nutzenportfolio.service.common.CommonService;\r\nimport ch.bfh.egov.nutzenportfolio.service.customizing.CustomizingService;\r\nimport ch.bfh.egov.nutzenportfolio.service.kategorie.KategorieService;\r\nimport ch.bfh.egov.nutzenportfolio.service.nutzenkriterium.NutzenkriteriumService;\r\nimport ch.bfh.egov.nutzenportfolio.tos.Kategorie;\r\nimport org.apache.commons.logging.Log;\r\nimport org.apache.commons.logging.LogFactory;\r\nimport org.apache.struts.action.ActionForm;\r\nimport org.apache.struts.action.ActionForward;\r\nimport org.apache.struts.action.ActionMapping;\r\nimport org.apache.struts.action.ActionMessage;\r\nimport org.apache.struts.action.ActionMessages;\r\nimport org.apache.struts.action.DynaActionForm;\r\nimport org.apache.struts.actions.DispatchAction;\r\n\r\npublic class KategorieAction extends DispatchAction {\r\n\r\n    private Log logger = LogFactory.getLog(this.getClass());\r\n\r\n    private KategorieService service;\r\n\r\n    public KategorieAction(KategorieService service, CommonService cService, CustomizingService customizingService, NutzenkriteriumService nService) {\r\n        super();\r\n        this.service = service;\r\n        service.init(cService, customizingService, nService);\r\n    }\r\n\r\n    public ActionForward list(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {\r\n        service.list(request);\r\n        return mapping.findForward(Constants.LIST);\r\n    }\r\n\r\n    public ActionForward prepare(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {\r\n        logger.debug(\"prepare\");\r\n        DynaActionForm kForm = (DynaActionForm) form;\r\n        service.populate(request, kForm);\r\n        return mapping.findForward(Constants.FORM);\r\n    }\r\n\r\n    public ActionForward edit(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {\r\n        DynaActionForm kForm = (DynaActionForm) form;\r\n        service.edit(request, kForm);\r\n        return mapping.findForward(Constants.FORM);\r\n    }\r\n\r\n    public ActionForward update(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {\r\n        DynaActionForm kForm = (DynaActionForm) form;\r\n        service.update(request, kForm);\r\n        service.list(request);\r\n        return mapping.findForward(Constants.LIST);\r\n    }\r\n\r\n    public ActionForward deletequestion(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {\r\n        DynaActionForm kForm = (DynaActionForm) form;\r\n        Kategorie k = service.getKategorie(request, kForm);\r\n        if (k == null || k.getSystem()) {\r\n            service.list(request);\r\n            return mapping.findForward(Constants.LIST);\r\n        }\r\n        ActionMessages messages = new ActionMessages();\r\n        service.deleteQuestion(request, k, messages);\r\n        saveMessages(request, messages);\r\n        return mapping.findForward(Constants.QUESTION);\r\n    }\r\n\r\n    public ActionForward delete(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {\r\n        DynaActionForm kForm = (DynaActionForm) form;\r\n        Kategorie k = service.getKategorie(request, kForm);\r\n        if (k == null || k.getSystem()) {\r\n            service.list(request);\r\n            return mapping.findForward(Constants.LIST);\r\n        }\r\n        // Lï¿½schen\r\n        service.delete(request, k);\r\n        service.list(request);\r\n        return mapping.findForward(Constants.LIST);\r\n    }\r\n\r\n    public ActionForward save(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {\r\n        // Formulardaten holen\r\n        DynaActionForm kForm = (DynaActionForm) form;\r\n        if (service.save(request, kForm)) {\r\n            return mapping.findForward(Constants.SUCCESS);\r\n        }\r\n        // Fehler bei keiner Auswahl\r\n        ActionMessages errors = new ActionMessages();\r\n        errors.add(ActionMessages.GLOBAL_MESSAGE, new ActionMessage(\"errors.select.one\", \"Kategorie\"));\r\n        saveMessages(request, errors);\r\n        return mapping.findForward(Constants.FAILURE);\r\n    }\r\n\r\n    public ActionForward add(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {\r\n        DynaActionForm kForm = (DynaActionForm) form;\r\n        ActionMessages errors = new ActionMessages();\r\n        ActionMessages messages = new ActionMessages();\r\n        if (!service.add(request, kForm, errors, messages)) {\r\n            saveErrors(request, errors);\r\n            saveMessages(request, messages);\r\n        }\r\n        service.populate(request, kForm);\r\n        return mapping.findForward(Constants.FORM);\r\n    }\r\n}\r\n",
		"id": "EvoSuiteBenchmark/46_nutzenportfolio/src/main/java/ch/bfh/egov/nutzenportfolio/action/KategorieActionTest7.java",
		"test_prompt": "// KategorieActionTest7.java\npackage ch.bfh.egov.nutzenportfolio.action;\n\nimport javax.servlet.http.HttpServletRequest;\nimport javax.servlet.http.HttpServletResponse;\nimport ch.bfh.egov.nutzenportfolio.Constants;\nimport ch.bfh.egov.nutzenportfolio.service.common.CommonService;\nimport ch.bfh.egov.nutzenportfolio.service.customizing.CustomizingService;\nimport ch.bfh.egov.nutzenportfolio.service.kategorie.KategorieService;\nimport ch.bfh.egov.nutzenportfolio.service.nutzenkriterium.NutzenkriteriumService;\nimport ch.bfh.egov.nutzenportfolio.tos.Kategorie;\nimport org.apache.commons.logging.Log;\nimport org.apache.commons.logging.LogFactory;\nimport org.apache.struts.action.ActionForm;\nimport org.apache.struts.action.ActionForward;\nimport org.apache.struts.action.ActionMapping;\nimport org.apache.struts.action.ActionMessage;\nimport org.apache.struts.action.ActionMessages;\nimport org.apache.struts.action.DynaActionForm;\nimport org.apache.struts.actions.DispatchAction;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link KategorieAction}.\n* It contains ten unit test cases for the {@link KategorieAction#add(ActionMapping, ActionForm, HttpServletRequest, HttpServletResponse)} method.\n*/\nclass KategorieActionTest7 {"
	},
	{
		"original_code": "// StrategischeZieleAction.java\n/**\r\n * Nutzenportfolio\r\n * Copyright (C) 2006 Kompetenzzentrum E-Business, Simon Bergamin\r\n *\r\n * This program is free software; you can redistribute it and/or\r\n * modify it under the terms of the GNU General Public License\r\n * as published by the Free Software Foundation; either version 2\r\n * of the License, or (at your option) any later version.\r\n *\r\n * This program is distributed in the hope that it will be useful,\r\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n * GNU General Public License for more details.\r\n *\r\n * You should have received a copy of the GNU General Public License\r\n * along with this program; if not, write to the Free Software\r\n * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\r\n */\r\npackage ch.bfh.egov.nutzenportfolio.action;\r\n\r\nimport java.util.ArrayList;\r\nimport java.util.List;\r\nimport javax.servlet.http.HttpServletRequest;\r\nimport javax.servlet.http.HttpServletResponse;\r\nimport javax.servlet.http.HttpSession;\r\nimport ch.bfh.egov.nutzenportfolio.Constants;\r\nimport ch.bfh.egov.nutzenportfolio.service.common.CommonService;\r\nimport ch.bfh.egov.nutzenportfolio.service.customizing.CustomizingService;\r\nimport ch.bfh.egov.nutzenportfolio.service.detailziele.DetailzieleService;\r\nimport ch.bfh.egov.nutzenportfolio.service.strategischeziele.StrategischeZieleService;\r\nimport ch.bfh.egov.nutzenportfolio.tos.StrategischesZiel;\r\nimport org.apache.commons.logging.Log;\r\nimport org.apache.commons.logging.LogFactory;\r\nimport org.apache.struts.action.ActionForm;\r\nimport org.apache.struts.action.ActionForward;\r\nimport org.apache.struts.action.ActionMapping;\r\nimport org.apache.struts.action.ActionMessage;\r\nimport org.apache.struts.action.ActionMessages;\r\nimport org.apache.struts.action.DynaActionForm;\r\nimport org.apache.struts.actions.DispatchAction;\r\n\r\npublic class StrategischeZieleAction extends DispatchAction {\r\n\r\n    private Log logger = LogFactory.getLog(this.getClass());\r\n\r\n    private StrategischeZieleService service;\r\n\r\n    private CommonService commonService;\r\n\r\n    public StrategischeZieleAction(StrategischeZieleService service, CommonService commonService, CustomizingService cService, DetailzieleService dzService) {\r\n        super();\r\n        this.service = service;\r\n        this.commonService = commonService;\r\n        this.service.init(cService, dzService);\r\n    }\r\n\r\n    public ActionForward list(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {\r\n        service.populate(request);\r\n        return mapping.findForward(Constants.LIST);\r\n    }\r\n\r\n    public ActionForward prepare(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {\r\n        service.populate(request);\r\n        DynaActionForm szForm = (DynaActionForm) form;\r\n        Integer mandantId = (Integer) request.getSession().getAttribute(Constants.MANDANT_ID);\r\n        Integer customizingId = (Integer) request.getSession().getAttribute(Constants.CUSTOMIZING_ID);\r\n        StrategischesZiel sz = new StrategischesZiel();\r\n        sz.setMandantId(mandantId);\r\n        sz.setCustomizingId(customizingId);\r\n        Integer[] idArr = service.getSelectedIdArr(sz);\r\n        szForm.set(\"strategischeZieleIds\", idArr);\r\n        return mapping.findForward(Constants.FORM);\r\n    }\r\n\r\n    public ActionForward edit(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {\r\n        DynaActionForm szForm = (DynaActionForm) form;\r\n        service.edit(request, szForm);\r\n        return mapping.findForward(Constants.FORM);\r\n    }\r\n\r\n    public ActionForward update(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {\r\n        DynaActionForm szForm = (DynaActionForm) form;\r\n        service.update(request, szForm);\r\n        service.populate(request);\r\n        return mapping.findForward(Constants.LIST);\r\n    }\r\n\r\n    public ActionForward deletequestion(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {\r\n        DynaActionForm szForm = (DynaActionForm) form;\r\n        StrategischesZiel sz = service.getStrategischesZiel(request, szForm);\r\n        if (sz == null || sz.getSystem()) {\r\n            service.populate(request);\r\n            return mapping.findForward(Constants.LIST);\r\n        }\r\n        ActionMessages messages = new ActionMessages();\r\n        service.deleteQuestion(request, sz, messages);\r\n        saveMessages(request, messages);\r\n        return mapping.findForward(Constants.QUESTION);\r\n    }\r\n\r\n    public ActionForward delete(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {\r\n        DynaActionForm szForm = (DynaActionForm) form;\r\n        StrategischesZiel sz = service.getStrategischesZiel(request, szForm);\r\n        if (sz == null || sz.getSystem()) {\r\n            service.populate(request);\r\n            return mapping.findForward(Constants.LIST);\r\n        }\r\n        // Lï¿½schen\r\n        service.delete(request, sz);\r\n        service.populate(request);\r\n        return mapping.findForward(Constants.LIST);\r\n    }\r\n\r\n    public ActionForward set(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {\r\n        // Formulardaten holen\r\n        DynaActionForm strategischeZieleForm = (DynaActionForm) form;\r\n        Integer[] strategischeZieleIds = (Integer[]) strategischeZieleForm.get(\"strategischeZieleIds\");\r\n        if (strategischeZieleIds.length == 0) {\r\n            ActionMessages errors = new ActionMessages();\r\n            errors.add(ActionMessages.GLOBAL_MESSAGE, new ActionMessage(\"errors.select.one\", \"Strategisches Ziel\"));\r\n            saveMessages(request, errors);\r\n            service.populate(request);\r\n            return mapping.findForward(Constants.FAILURE);\r\n        }\r\n        // Projektattraktivitï¿½t holen\r\n        HttpSession session = request.getSession();\r\n        Integer customizingId = (Integer) session.getAttribute(Constants.CUSTOMIZING_ID);\r\n        Integer mandantId = (Integer) session.getAttribute(Constants.MANDANT_ID);\r\n        // Strategische Ziele zuweisen\r\n        logger.debug(\"Strategische Ziele angewï¿½hlt: \" + strategischeZieleIds.length);\r\n        List<StrategischesZiel> strategischeZiele = new ArrayList<StrategischesZiel>();\r\n        for (int i = 0; i < strategischeZieleIds.length; i++) {\r\n            Integer strategischesZielId = strategischeZieleIds[i];\r\n            logger.debug(\"Fï¿½ge Strategisches Ziele \" + strategischesZielId + \" hinzu.\");\r\n            StrategischesZiel ziel = new StrategischesZiel();\r\n            ziel.setStrategischesZielId(strategischesZielId);\r\n            ziel.setProjektattraktivitaetId(getProjektattraktivitaetId(request));\r\n            strategischeZiele.add(ziel);\r\n        }\r\n        service.setProjektattraktivitaet(strategischeZiele);\r\n        request.setAttribute(\"customizingId\", customizingId);\r\n        service.setStatus(request, mandantId, customizingId);\r\n        return mapping.findForward(Constants.SUCCESS);\r\n    }\r\n\r\n    public ActionForward add(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {\r\n        DynaActionForm szForm = (DynaActionForm) form;\r\n        ActionMessages errors = new ActionMessages();\r\n        ActionMessages messages = new ActionMessages();\r\n        if (!service.add(request, szForm, errors, messages)) {\r\n            saveErrors(request, errors);\r\n            saveMessages(request, messages);\r\n        }\r\n        service.populate(request);\r\n        return mapping.findForward(Constants.FORM);\r\n    }\r\n\r\n    private Integer getProjektattraktivitaetId(HttpServletRequest request) {\r\n        // Projektattraktivitï¿½t holen\r\n        Integer customizingId = (Integer) request.getSession().getAttribute(Constants.CUSTOMIZING_ID);\r\n        return commonService.getProjektattraktivitaetIdByCustomizingId(customizingId);\r\n    }\r\n}\r\n",
		"id": "EvoSuiteBenchmark/46_nutzenportfolio/src/main/java/ch/bfh/egov/nutzenportfolio/action/StrategischeZieleActionTest0.java",
		"test_prompt": "// StrategischeZieleActionTest0.java\npackage ch.bfh.egov.nutzenportfolio.action;\n\nimport java.util.ArrayList;\nimport java.util.List;\nimport javax.servlet.http.HttpServletRequest;\nimport javax.servlet.http.HttpServletResponse;\nimport javax.servlet.http.HttpSession;\nimport ch.bfh.egov.nutzenportfolio.Constants;\nimport ch.bfh.egov.nutzenportfolio.service.common.CommonService;\nimport ch.bfh.egov.nutzenportfolio.service.customizing.CustomizingService;\nimport ch.bfh.egov.nutzenportfolio.service.detailziele.DetailzieleService;\nimport ch.bfh.egov.nutzenportfolio.service.strategischeziele.StrategischeZieleService;\nimport ch.bfh.egov.nutzenportfolio.tos.StrategischesZiel;\nimport org.apache.commons.logging.Log;\nimport org.apache.commons.logging.LogFactory;\nimport org.apache.struts.action.ActionForm;\nimport org.apache.struts.action.ActionForward;\nimport org.apache.struts.action.ActionMapping;\nimport org.apache.struts.action.ActionMessage;\nimport org.apache.struts.action.ActionMessages;\nimport org.apache.struts.action.DynaActionForm;\nimport org.apache.struts.actions.DispatchAction;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link StrategischeZieleAction}.\n* It contains ten unit test cases for the {@link StrategischeZieleAction#list(ActionMapping, ActionForm, HttpServletRequest, HttpServletResponse)} method.\n*/\nclass StrategischeZieleActionTest0 {"
	},
	{
		"original_code": "// StrategischeZieleAction.java\n/**\r\n * Nutzenportfolio\r\n * Copyright (C) 2006 Kompetenzzentrum E-Business, Simon Bergamin\r\n *\r\n * This program is free software; you can redistribute it and/or\r\n * modify it under the terms of the GNU General Public License\r\n * as published by the Free Software Foundation; either version 2\r\n * of the License, or (at your option) any later version.\r\n *\r\n * This program is distributed in the hope that it will be useful,\r\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n * GNU General Public License for more details.\r\n *\r\n * You should have received a copy of the GNU General Public License\r\n * along with this program; if not, write to the Free Software\r\n * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\r\n */\r\npackage ch.bfh.egov.nutzenportfolio.action;\r\n\r\nimport java.util.ArrayList;\r\nimport java.util.List;\r\nimport javax.servlet.http.HttpServletRequest;\r\nimport javax.servlet.http.HttpServletResponse;\r\nimport javax.servlet.http.HttpSession;\r\nimport ch.bfh.egov.nutzenportfolio.Constants;\r\nimport ch.bfh.egov.nutzenportfolio.service.common.CommonService;\r\nimport ch.bfh.egov.nutzenportfolio.service.customizing.CustomizingService;\r\nimport ch.bfh.egov.nutzenportfolio.service.detailziele.DetailzieleService;\r\nimport ch.bfh.egov.nutzenportfolio.service.strategischeziele.StrategischeZieleService;\r\nimport ch.bfh.egov.nutzenportfolio.tos.StrategischesZiel;\r\nimport org.apache.commons.logging.Log;\r\nimport org.apache.commons.logging.LogFactory;\r\nimport org.apache.struts.action.ActionForm;\r\nimport org.apache.struts.action.ActionForward;\r\nimport org.apache.struts.action.ActionMapping;\r\nimport org.apache.struts.action.ActionMessage;\r\nimport org.apache.struts.action.ActionMessages;\r\nimport org.apache.struts.action.DynaActionForm;\r\nimport org.apache.struts.actions.DispatchAction;\r\n\r\npublic class StrategischeZieleAction extends DispatchAction {\r\n\r\n    private Log logger = LogFactory.getLog(this.getClass());\r\n\r\n    private StrategischeZieleService service;\r\n\r\n    private CommonService commonService;\r\n\r\n    public StrategischeZieleAction(StrategischeZieleService service, CommonService commonService, CustomizingService cService, DetailzieleService dzService) {\r\n        super();\r\n        this.service = service;\r\n        this.commonService = commonService;\r\n        this.service.init(cService, dzService);\r\n    }\r\n\r\n    public ActionForward list(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {\r\n        service.populate(request);\r\n        return mapping.findForward(Constants.LIST);\r\n    }\r\n\r\n    public ActionForward prepare(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {\r\n        service.populate(request);\r\n        DynaActionForm szForm = (DynaActionForm) form;\r\n        Integer mandantId = (Integer) request.getSession().getAttribute(Constants.MANDANT_ID);\r\n        Integer customizingId = (Integer) request.getSession().getAttribute(Constants.CUSTOMIZING_ID);\r\n        StrategischesZiel sz = new StrategischesZiel();\r\n        sz.setMandantId(mandantId);\r\n        sz.setCustomizingId(customizingId);\r\n        Integer[] idArr = service.getSelectedIdArr(sz);\r\n        szForm.set(\"strategischeZieleIds\", idArr);\r\n        return mapping.findForward(Constants.FORM);\r\n    }\r\n\r\n    public ActionForward edit(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {\r\n        DynaActionForm szForm = (DynaActionForm) form;\r\n        service.edit(request, szForm);\r\n        return mapping.findForward(Constants.FORM);\r\n    }\r\n\r\n    public ActionForward update(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {\r\n        DynaActionForm szForm = (DynaActionForm) form;\r\n        service.update(request, szForm);\r\n        service.populate(request);\r\n        return mapping.findForward(Constants.LIST);\r\n    }\r\n\r\n    public ActionForward deletequestion(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {\r\n        DynaActionForm szForm = (DynaActionForm) form;\r\n        StrategischesZiel sz = service.getStrategischesZiel(request, szForm);\r\n        if (sz == null || sz.getSystem()) {\r\n            service.populate(request);\r\n            return mapping.findForward(Constants.LIST);\r\n        }\r\n        ActionMessages messages = new ActionMessages();\r\n        service.deleteQuestion(request, sz, messages);\r\n        saveMessages(request, messages);\r\n        return mapping.findForward(Constants.QUESTION);\r\n    }\r\n\r\n    public ActionForward delete(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {\r\n        DynaActionForm szForm = (DynaActionForm) form;\r\n        StrategischesZiel sz = service.getStrategischesZiel(request, szForm);\r\n        if (sz == null || sz.getSystem()) {\r\n            service.populate(request);\r\n            return mapping.findForward(Constants.LIST);\r\n        }\r\n        // Lï¿½schen\r\n        service.delete(request, sz);\r\n        service.populate(request);\r\n        return mapping.findForward(Constants.LIST);\r\n    }\r\n\r\n    public ActionForward set(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {\r\n        // Formulardaten holen\r\n        DynaActionForm strategischeZieleForm = (DynaActionForm) form;\r\n        Integer[] strategischeZieleIds = (Integer[]) strategischeZieleForm.get(\"strategischeZieleIds\");\r\n        if (strategischeZieleIds.length == 0) {\r\n            ActionMessages errors = new ActionMessages();\r\n            errors.add(ActionMessages.GLOBAL_MESSAGE, new ActionMessage(\"errors.select.one\", \"Strategisches Ziel\"));\r\n            saveMessages(request, errors);\r\n            service.populate(request);\r\n            return mapping.findForward(Constants.FAILURE);\r\n        }\r\n        // Projektattraktivitï¿½t holen\r\n        HttpSession session = request.getSession();\r\n        Integer customizingId = (Integer) session.getAttribute(Constants.CUSTOMIZING_ID);\r\n        Integer mandantId = (Integer) session.getAttribute(Constants.MANDANT_ID);\r\n        // Strategische Ziele zuweisen\r\n        logger.debug(\"Strategische Ziele angewï¿½hlt: \" + strategischeZieleIds.length);\r\n        List<StrategischesZiel> strategischeZiele = new ArrayList<StrategischesZiel>();\r\n        for (int i = 0; i < strategischeZieleIds.length; i++) {\r\n            Integer strategischesZielId = strategischeZieleIds[i];\r\n            logger.debug(\"Fï¿½ge Strategisches Ziele \" + strategischesZielId + \" hinzu.\");\r\n            StrategischesZiel ziel = new StrategischesZiel();\r\n            ziel.setStrategischesZielId(strategischesZielId);\r\n            ziel.setProjektattraktivitaetId(getProjektattraktivitaetId(request));\r\n            strategischeZiele.add(ziel);\r\n        }\r\n        service.setProjektattraktivitaet(strategischeZiele);\r\n        request.setAttribute(\"customizingId\", customizingId);\r\n        service.setStatus(request, mandantId, customizingId);\r\n        return mapping.findForward(Constants.SUCCESS);\r\n    }\r\n\r\n    public ActionForward add(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {\r\n        DynaActionForm szForm = (DynaActionForm) form;\r\n        ActionMessages errors = new ActionMessages();\r\n        ActionMessages messages = new ActionMessages();\r\n        if (!service.add(request, szForm, errors, messages)) {\r\n            saveErrors(request, errors);\r\n            saveMessages(request, messages);\r\n        }\r\n        service.populate(request);\r\n        return mapping.findForward(Constants.FORM);\r\n    }\r\n\r\n    private Integer getProjektattraktivitaetId(HttpServletRequest request) {\r\n        // Projektattraktivitï¿½t holen\r\n        Integer customizingId = (Integer) request.getSession().getAttribute(Constants.CUSTOMIZING_ID);\r\n        return commonService.getProjektattraktivitaetIdByCustomizingId(customizingId);\r\n    }\r\n}\r\n",
		"id": "EvoSuiteBenchmark/46_nutzenportfolio/src/main/java/ch/bfh/egov/nutzenportfolio/action/StrategischeZieleActionTest1.java",
		"test_prompt": "// StrategischeZieleActionTest1.java\npackage ch.bfh.egov.nutzenportfolio.action;\n\nimport java.util.ArrayList;\nimport java.util.List;\nimport javax.servlet.http.HttpServletRequest;\nimport javax.servlet.http.HttpServletResponse;\nimport javax.servlet.http.HttpSession;\nimport ch.bfh.egov.nutzenportfolio.Constants;\nimport ch.bfh.egov.nutzenportfolio.service.common.CommonService;\nimport ch.bfh.egov.nutzenportfolio.service.customizing.CustomizingService;\nimport ch.bfh.egov.nutzenportfolio.service.detailziele.DetailzieleService;\nimport ch.bfh.egov.nutzenportfolio.service.strategischeziele.StrategischeZieleService;\nimport ch.bfh.egov.nutzenportfolio.tos.StrategischesZiel;\nimport org.apache.commons.logging.Log;\nimport org.apache.commons.logging.LogFactory;\nimport org.apache.struts.action.ActionForm;\nimport org.apache.struts.action.ActionForward;\nimport org.apache.struts.action.ActionMapping;\nimport org.apache.struts.action.ActionMessage;\nimport org.apache.struts.action.ActionMessages;\nimport org.apache.struts.action.DynaActionForm;\nimport org.apache.struts.actions.DispatchAction;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link StrategischeZieleAction}.\n* It contains ten unit test cases for the {@link StrategischeZieleAction#prepare(ActionMapping, ActionForm, HttpServletRequest, HttpServletResponse)} method.\n*/\nclass StrategischeZieleActionTest1 {"
	},
	{
		"original_code": "// StrategischeZieleAction.java\n/**\r\n * Nutzenportfolio\r\n * Copyright (C) 2006 Kompetenzzentrum E-Business, Simon Bergamin\r\n *\r\n * This program is free software; you can redistribute it and/or\r\n * modify it under the terms of the GNU General Public License\r\n * as published by the Free Software Foundation; either version 2\r\n * of the License, or (at your option) any later version.\r\n *\r\n * This program is distributed in the hope that it will be useful,\r\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n * GNU General Public License for more details.\r\n *\r\n * You should have received a copy of the GNU General Public License\r\n * along with this program; if not, write to the Free Software\r\n * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\r\n */\r\npackage ch.bfh.egov.nutzenportfolio.action;\r\n\r\nimport java.util.ArrayList;\r\nimport java.util.List;\r\nimport javax.servlet.http.HttpServletRequest;\r\nimport javax.servlet.http.HttpServletResponse;\r\nimport javax.servlet.http.HttpSession;\r\nimport ch.bfh.egov.nutzenportfolio.Constants;\r\nimport ch.bfh.egov.nutzenportfolio.service.common.CommonService;\r\nimport ch.bfh.egov.nutzenportfolio.service.customizing.CustomizingService;\r\nimport ch.bfh.egov.nutzenportfolio.service.detailziele.DetailzieleService;\r\nimport ch.bfh.egov.nutzenportfolio.service.strategischeziele.StrategischeZieleService;\r\nimport ch.bfh.egov.nutzenportfolio.tos.StrategischesZiel;\r\nimport org.apache.commons.logging.Log;\r\nimport org.apache.commons.logging.LogFactory;\r\nimport org.apache.struts.action.ActionForm;\r\nimport org.apache.struts.action.ActionForward;\r\nimport org.apache.struts.action.ActionMapping;\r\nimport org.apache.struts.action.ActionMessage;\r\nimport org.apache.struts.action.ActionMessages;\r\nimport org.apache.struts.action.DynaActionForm;\r\nimport org.apache.struts.actions.DispatchAction;\r\n\r\npublic class StrategischeZieleAction extends DispatchAction {\r\n\r\n    private Log logger = LogFactory.getLog(this.getClass());\r\n\r\n    private StrategischeZieleService service;\r\n\r\n    private CommonService commonService;\r\n\r\n    public StrategischeZieleAction(StrategischeZieleService service, CommonService commonService, CustomizingService cService, DetailzieleService dzService) {\r\n        super();\r\n        this.service = service;\r\n        this.commonService = commonService;\r\n        this.service.init(cService, dzService);\r\n    }\r\n\r\n    public ActionForward list(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {\r\n        service.populate(request);\r\n        return mapping.findForward(Constants.LIST);\r\n    }\r\n\r\n    public ActionForward prepare(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {\r\n        service.populate(request);\r\n        DynaActionForm szForm = (DynaActionForm) form;\r\n        Integer mandantId = (Integer) request.getSession().getAttribute(Constants.MANDANT_ID);\r\n        Integer customizingId = (Integer) request.getSession().getAttribute(Constants.CUSTOMIZING_ID);\r\n        StrategischesZiel sz = new StrategischesZiel();\r\n        sz.setMandantId(mandantId);\r\n        sz.setCustomizingId(customizingId);\r\n        Integer[] idArr = service.getSelectedIdArr(sz);\r\n        szForm.set(\"strategischeZieleIds\", idArr);\r\n        return mapping.findForward(Constants.FORM);\r\n    }\r\n\r\n    public ActionForward edit(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {\r\n        DynaActionForm szForm = (DynaActionForm) form;\r\n        service.edit(request, szForm);\r\n        return mapping.findForward(Constants.FORM);\r\n    }\r\n\r\n    public ActionForward update(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {\r\n        DynaActionForm szForm = (DynaActionForm) form;\r\n        service.update(request, szForm);\r\n        service.populate(request);\r\n        return mapping.findForward(Constants.LIST);\r\n    }\r\n\r\n    public ActionForward deletequestion(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {\r\n        DynaActionForm szForm = (DynaActionForm) form;\r\n        StrategischesZiel sz = service.getStrategischesZiel(request, szForm);\r\n        if (sz == null || sz.getSystem()) {\r\n            service.populate(request);\r\n            return mapping.findForward(Constants.LIST);\r\n        }\r\n        ActionMessages messages = new ActionMessages();\r\n        service.deleteQuestion(request, sz, messages);\r\n        saveMessages(request, messages);\r\n        return mapping.findForward(Constants.QUESTION);\r\n    }\r\n\r\n    public ActionForward delete(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {\r\n        DynaActionForm szForm = (DynaActionForm) form;\r\n        StrategischesZiel sz = service.getStrategischesZiel(request, szForm);\r\n        if (sz == null || sz.getSystem()) {\r\n            service.populate(request);\r\n            return mapping.findForward(Constants.LIST);\r\n        }\r\n        // Lï¿½schen\r\n        service.delete(request, sz);\r\n        service.populate(request);\r\n        return mapping.findForward(Constants.LIST);\r\n    }\r\n\r\n    public ActionForward set(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {\r\n        // Formulardaten holen\r\n        DynaActionForm strategischeZieleForm = (DynaActionForm) form;\r\n        Integer[] strategischeZieleIds = (Integer[]) strategischeZieleForm.get(\"strategischeZieleIds\");\r\n        if (strategischeZieleIds.length == 0) {\r\n            ActionMessages errors = new ActionMessages();\r\n            errors.add(ActionMessages.GLOBAL_MESSAGE, new ActionMessage(\"errors.select.one\", \"Strategisches Ziel\"));\r\n            saveMessages(request, errors);\r\n            service.populate(request);\r\n            return mapping.findForward(Constants.FAILURE);\r\n        }\r\n        // Projektattraktivitï¿½t holen\r\n        HttpSession session = request.getSession();\r\n        Integer customizingId = (Integer) session.getAttribute(Constants.CUSTOMIZING_ID);\r\n        Integer mandantId = (Integer) session.getAttribute(Constants.MANDANT_ID);\r\n        // Strategische Ziele zuweisen\r\n        logger.debug(\"Strategische Ziele angewï¿½hlt: \" + strategischeZieleIds.length);\r\n        List<StrategischesZiel> strategischeZiele = new ArrayList<StrategischesZiel>();\r\n        for (int i = 0; i < strategischeZieleIds.length; i++) {\r\n            Integer strategischesZielId = strategischeZieleIds[i];\r\n            logger.debug(\"Fï¿½ge Strategisches Ziele \" + strategischesZielId + \" hinzu.\");\r\n            StrategischesZiel ziel = new StrategischesZiel();\r\n            ziel.setStrategischesZielId(strategischesZielId);\r\n            ziel.setProjektattraktivitaetId(getProjektattraktivitaetId(request));\r\n            strategischeZiele.add(ziel);\r\n        }\r\n        service.setProjektattraktivitaet(strategischeZiele);\r\n        request.setAttribute(\"customizingId\", customizingId);\r\n        service.setStatus(request, mandantId, customizingId);\r\n        return mapping.findForward(Constants.SUCCESS);\r\n    }\r\n\r\n    public ActionForward add(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {\r\n        DynaActionForm szForm = (DynaActionForm) form;\r\n        ActionMessages errors = new ActionMessages();\r\n        ActionMessages messages = new ActionMessages();\r\n        if (!service.add(request, szForm, errors, messages)) {\r\n            saveErrors(request, errors);\r\n            saveMessages(request, messages);\r\n        }\r\n        service.populate(request);\r\n        return mapping.findForward(Constants.FORM);\r\n    }\r\n\r\n    private Integer getProjektattraktivitaetId(HttpServletRequest request) {\r\n        // Projektattraktivitï¿½t holen\r\n        Integer customizingId = (Integer) request.getSession().getAttribute(Constants.CUSTOMIZING_ID);\r\n        return commonService.getProjektattraktivitaetIdByCustomizingId(customizingId);\r\n    }\r\n}\r\n",
		"id": "EvoSuiteBenchmark/46_nutzenportfolio/src/main/java/ch/bfh/egov/nutzenportfolio/action/StrategischeZieleActionTest2.java",
		"test_prompt": "// StrategischeZieleActionTest2.java\npackage ch.bfh.egov.nutzenportfolio.action;\n\nimport java.util.ArrayList;\nimport java.util.List;\nimport javax.servlet.http.HttpServletRequest;\nimport javax.servlet.http.HttpServletResponse;\nimport javax.servlet.http.HttpSession;\nimport ch.bfh.egov.nutzenportfolio.Constants;\nimport ch.bfh.egov.nutzenportfolio.service.common.CommonService;\nimport ch.bfh.egov.nutzenportfolio.service.customizing.CustomizingService;\nimport ch.bfh.egov.nutzenportfolio.service.detailziele.DetailzieleService;\nimport ch.bfh.egov.nutzenportfolio.service.strategischeziele.StrategischeZieleService;\nimport ch.bfh.egov.nutzenportfolio.tos.StrategischesZiel;\nimport org.apache.commons.logging.Log;\nimport org.apache.commons.logging.LogFactory;\nimport org.apache.struts.action.ActionForm;\nimport org.apache.struts.action.ActionForward;\nimport org.apache.struts.action.ActionMapping;\nimport org.apache.struts.action.ActionMessage;\nimport org.apache.struts.action.ActionMessages;\nimport org.apache.struts.action.DynaActionForm;\nimport org.apache.struts.actions.DispatchAction;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link StrategischeZieleAction}.\n* It contains ten unit test cases for the {@link StrategischeZieleAction#edit(ActionMapping, ActionForm, HttpServletRequest, HttpServletResponse)} method.\n*/\nclass StrategischeZieleActionTest2 {"
	},
	{
		"original_code": "// StrategischeZieleAction.java\n/**\r\n * Nutzenportfolio\r\n * Copyright (C) 2006 Kompetenzzentrum E-Business, Simon Bergamin\r\n *\r\n * This program is free software; you can redistribute it and/or\r\n * modify it under the terms of the GNU General Public License\r\n * as published by the Free Software Foundation; either version 2\r\n * of the License, or (at your option) any later version.\r\n *\r\n * This program is distributed in the hope that it will be useful,\r\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n * GNU General Public License for more details.\r\n *\r\n * You should have received a copy of the GNU General Public License\r\n * along with this program; if not, write to the Free Software\r\n * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\r\n */\r\npackage ch.bfh.egov.nutzenportfolio.action;\r\n\r\nimport java.util.ArrayList;\r\nimport java.util.List;\r\nimport javax.servlet.http.HttpServletRequest;\r\nimport javax.servlet.http.HttpServletResponse;\r\nimport javax.servlet.http.HttpSession;\r\nimport ch.bfh.egov.nutzenportfolio.Constants;\r\nimport ch.bfh.egov.nutzenportfolio.service.common.CommonService;\r\nimport ch.bfh.egov.nutzenportfolio.service.customizing.CustomizingService;\r\nimport ch.bfh.egov.nutzenportfolio.service.detailziele.DetailzieleService;\r\nimport ch.bfh.egov.nutzenportfolio.service.strategischeziele.StrategischeZieleService;\r\nimport ch.bfh.egov.nutzenportfolio.tos.StrategischesZiel;\r\nimport org.apache.commons.logging.Log;\r\nimport org.apache.commons.logging.LogFactory;\r\nimport org.apache.struts.action.ActionForm;\r\nimport org.apache.struts.action.ActionForward;\r\nimport org.apache.struts.action.ActionMapping;\r\nimport org.apache.struts.action.ActionMessage;\r\nimport org.apache.struts.action.ActionMessages;\r\nimport org.apache.struts.action.DynaActionForm;\r\nimport org.apache.struts.actions.DispatchAction;\r\n\r\npublic class StrategischeZieleAction extends DispatchAction {\r\n\r\n    private Log logger = LogFactory.getLog(this.getClass());\r\n\r\n    private StrategischeZieleService service;\r\n\r\n    private CommonService commonService;\r\n\r\n    public StrategischeZieleAction(StrategischeZieleService service, CommonService commonService, CustomizingService cService, DetailzieleService dzService) {\r\n        super();\r\n        this.service = service;\r\n        this.commonService = commonService;\r\n        this.service.init(cService, dzService);\r\n    }\r\n\r\n    public ActionForward list(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {\r\n        service.populate(request);\r\n        return mapping.findForward(Constants.LIST);\r\n    }\r\n\r\n    public ActionForward prepare(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {\r\n        service.populate(request);\r\n        DynaActionForm szForm = (DynaActionForm) form;\r\n        Integer mandantId = (Integer) request.getSession().getAttribute(Constants.MANDANT_ID);\r\n        Integer customizingId = (Integer) request.getSession().getAttribute(Constants.CUSTOMIZING_ID);\r\n        StrategischesZiel sz = new StrategischesZiel();\r\n        sz.setMandantId(mandantId);\r\n        sz.setCustomizingId(customizingId);\r\n        Integer[] idArr = service.getSelectedIdArr(sz);\r\n        szForm.set(\"strategischeZieleIds\", idArr);\r\n        return mapping.findForward(Constants.FORM);\r\n    }\r\n\r\n    public ActionForward edit(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {\r\n        DynaActionForm szForm = (DynaActionForm) form;\r\n        service.edit(request, szForm);\r\n        return mapping.findForward(Constants.FORM);\r\n    }\r\n\r\n    public ActionForward update(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {\r\n        DynaActionForm szForm = (DynaActionForm) form;\r\n        service.update(request, szForm);\r\n        service.populate(request);\r\n        return mapping.findForward(Constants.LIST);\r\n    }\r\n\r\n    public ActionForward deletequestion(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {\r\n        DynaActionForm szForm = (DynaActionForm) form;\r\n        StrategischesZiel sz = service.getStrategischesZiel(request, szForm);\r\n        if (sz == null || sz.getSystem()) {\r\n            service.populate(request);\r\n            return mapping.findForward(Constants.LIST);\r\n        }\r\n        ActionMessages messages = new ActionMessages();\r\n        service.deleteQuestion(request, sz, messages);\r\n        saveMessages(request, messages);\r\n        return mapping.findForward(Constants.QUESTION);\r\n    }\r\n\r\n    public ActionForward delete(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {\r\n        DynaActionForm szForm = (DynaActionForm) form;\r\n        StrategischesZiel sz = service.getStrategischesZiel(request, szForm);\r\n        if (sz == null || sz.getSystem()) {\r\n            service.populate(request);\r\n            return mapping.findForward(Constants.LIST);\r\n        }\r\n        // Lï¿½schen\r\n        service.delete(request, sz);\r\n        service.populate(request);\r\n        return mapping.findForward(Constants.LIST);\r\n    }\r\n\r\n    public ActionForward set(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {\r\n        // Formulardaten holen\r\n        DynaActionForm strategischeZieleForm = (DynaActionForm) form;\r\n        Integer[] strategischeZieleIds = (Integer[]) strategischeZieleForm.get(\"strategischeZieleIds\");\r\n        if (strategischeZieleIds.length == 0) {\r\n            ActionMessages errors = new ActionMessages();\r\n            errors.add(ActionMessages.GLOBAL_MESSAGE, new ActionMessage(\"errors.select.one\", \"Strategisches Ziel\"));\r\n            saveMessages(request, errors);\r\n            service.populate(request);\r\n            return mapping.findForward(Constants.FAILURE);\r\n        }\r\n        // Projektattraktivitï¿½t holen\r\n        HttpSession session = request.getSession();\r\n        Integer customizingId = (Integer) session.getAttribute(Constants.CUSTOMIZING_ID);\r\n        Integer mandantId = (Integer) session.getAttribute(Constants.MANDANT_ID);\r\n        // Strategische Ziele zuweisen\r\n        logger.debug(\"Strategische Ziele angewï¿½hlt: \" + strategischeZieleIds.length);\r\n        List<StrategischesZiel> strategischeZiele = new ArrayList<StrategischesZiel>();\r\n        for (int i = 0; i < strategischeZieleIds.length; i++) {\r\n            Integer strategischesZielId = strategischeZieleIds[i];\r\n            logger.debug(\"Fï¿½ge Strategisches Ziele \" + strategischesZielId + \" hinzu.\");\r\n            StrategischesZiel ziel = new StrategischesZiel();\r\n            ziel.setStrategischesZielId(strategischesZielId);\r\n            ziel.setProjektattraktivitaetId(getProjektattraktivitaetId(request));\r\n            strategischeZiele.add(ziel);\r\n        }\r\n        service.setProjektattraktivitaet(strategischeZiele);\r\n        request.setAttribute(\"customizingId\", customizingId);\r\n        service.setStatus(request, mandantId, customizingId);\r\n        return mapping.findForward(Constants.SUCCESS);\r\n    }\r\n\r\n    public ActionForward add(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {\r\n        DynaActionForm szForm = (DynaActionForm) form;\r\n        ActionMessages errors = new ActionMessages();\r\n        ActionMessages messages = new ActionMessages();\r\n        if (!service.add(request, szForm, errors, messages)) {\r\n            saveErrors(request, errors);\r\n            saveMessages(request, messages);\r\n        }\r\n        service.populate(request);\r\n        return mapping.findForward(Constants.FORM);\r\n    }\r\n\r\n    private Integer getProjektattraktivitaetId(HttpServletRequest request) {\r\n        // Projektattraktivitï¿½t holen\r\n        Integer customizingId = (Integer) request.getSession().getAttribute(Constants.CUSTOMIZING_ID);\r\n        return commonService.getProjektattraktivitaetIdByCustomizingId(customizingId);\r\n    }\r\n}\r\n",
		"id": "EvoSuiteBenchmark/46_nutzenportfolio/src/main/java/ch/bfh/egov/nutzenportfolio/action/StrategischeZieleActionTest3.java",
		"test_prompt": "// StrategischeZieleActionTest3.java\npackage ch.bfh.egov.nutzenportfolio.action;\n\nimport java.util.ArrayList;\nimport java.util.List;\nimport javax.servlet.http.HttpServletRequest;\nimport javax.servlet.http.HttpServletResponse;\nimport javax.servlet.http.HttpSession;\nimport ch.bfh.egov.nutzenportfolio.Constants;\nimport ch.bfh.egov.nutzenportfolio.service.common.CommonService;\nimport ch.bfh.egov.nutzenportfolio.service.customizing.CustomizingService;\nimport ch.bfh.egov.nutzenportfolio.service.detailziele.DetailzieleService;\nimport ch.bfh.egov.nutzenportfolio.service.strategischeziele.StrategischeZieleService;\nimport ch.bfh.egov.nutzenportfolio.tos.StrategischesZiel;\nimport org.apache.commons.logging.Log;\nimport org.apache.commons.logging.LogFactory;\nimport org.apache.struts.action.ActionForm;\nimport org.apache.struts.action.ActionForward;\nimport org.apache.struts.action.ActionMapping;\nimport org.apache.struts.action.ActionMessage;\nimport org.apache.struts.action.ActionMessages;\nimport org.apache.struts.action.DynaActionForm;\nimport org.apache.struts.actions.DispatchAction;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link StrategischeZieleAction}.\n* It contains ten unit test cases for the {@link StrategischeZieleAction#update(ActionMapping, ActionForm, HttpServletRequest, HttpServletResponse)} method.\n*/\nclass StrategischeZieleActionTest3 {"
	},
	{
		"original_code": "// StrategischeZieleAction.java\n/**\r\n * Nutzenportfolio\r\n * Copyright (C) 2006 Kompetenzzentrum E-Business, Simon Bergamin\r\n *\r\n * This program is free software; you can redistribute it and/or\r\n * modify it under the terms of the GNU General Public License\r\n * as published by the Free Software Foundation; either version 2\r\n * of the License, or (at your option) any later version.\r\n *\r\n * This program is distributed in the hope that it will be useful,\r\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n * GNU General Public License for more details.\r\n *\r\n * You should have received a copy of the GNU General Public License\r\n * along with this program; if not, write to the Free Software\r\n * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\r\n */\r\npackage ch.bfh.egov.nutzenportfolio.action;\r\n\r\nimport java.util.ArrayList;\r\nimport java.util.List;\r\nimport javax.servlet.http.HttpServletRequest;\r\nimport javax.servlet.http.HttpServletResponse;\r\nimport javax.servlet.http.HttpSession;\r\nimport ch.bfh.egov.nutzenportfolio.Constants;\r\nimport ch.bfh.egov.nutzenportfolio.service.common.CommonService;\r\nimport ch.bfh.egov.nutzenportfolio.service.customizing.CustomizingService;\r\nimport ch.bfh.egov.nutzenportfolio.service.detailziele.DetailzieleService;\r\nimport ch.bfh.egov.nutzenportfolio.service.strategischeziele.StrategischeZieleService;\r\nimport ch.bfh.egov.nutzenportfolio.tos.StrategischesZiel;\r\nimport org.apache.commons.logging.Log;\r\nimport org.apache.commons.logging.LogFactory;\r\nimport org.apache.struts.action.ActionForm;\r\nimport org.apache.struts.action.ActionForward;\r\nimport org.apache.struts.action.ActionMapping;\r\nimport org.apache.struts.action.ActionMessage;\r\nimport org.apache.struts.action.ActionMessages;\r\nimport org.apache.struts.action.DynaActionForm;\r\nimport org.apache.struts.actions.DispatchAction;\r\n\r\npublic class StrategischeZieleAction extends DispatchAction {\r\n\r\n    private Log logger = LogFactory.getLog(this.getClass());\r\n\r\n    private StrategischeZieleService service;\r\n\r\n    private CommonService commonService;\r\n\r\n    public StrategischeZieleAction(StrategischeZieleService service, CommonService commonService, CustomizingService cService, DetailzieleService dzService) {\r\n        super();\r\n        this.service = service;\r\n        this.commonService = commonService;\r\n        this.service.init(cService, dzService);\r\n    }\r\n\r\n    public ActionForward list(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {\r\n        service.populate(request);\r\n        return mapping.findForward(Constants.LIST);\r\n    }\r\n\r\n    public ActionForward prepare(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {\r\n        service.populate(request);\r\n        DynaActionForm szForm = (DynaActionForm) form;\r\n        Integer mandantId = (Integer) request.getSession().getAttribute(Constants.MANDANT_ID);\r\n        Integer customizingId = (Integer) request.getSession().getAttribute(Constants.CUSTOMIZING_ID);\r\n        StrategischesZiel sz = new StrategischesZiel();\r\n        sz.setMandantId(mandantId);\r\n        sz.setCustomizingId(customizingId);\r\n        Integer[] idArr = service.getSelectedIdArr(sz);\r\n        szForm.set(\"strategischeZieleIds\", idArr);\r\n        return mapping.findForward(Constants.FORM);\r\n    }\r\n\r\n    public ActionForward edit(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {\r\n        DynaActionForm szForm = (DynaActionForm) form;\r\n        service.edit(request, szForm);\r\n        return mapping.findForward(Constants.FORM);\r\n    }\r\n\r\n    public ActionForward update(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {\r\n        DynaActionForm szForm = (DynaActionForm) form;\r\n        service.update(request, szForm);\r\n        service.populate(request);\r\n        return mapping.findForward(Constants.LIST);\r\n    }\r\n\r\n    public ActionForward deletequestion(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {\r\n        DynaActionForm szForm = (DynaActionForm) form;\r\n        StrategischesZiel sz = service.getStrategischesZiel(request, szForm);\r\n        if (sz == null || sz.getSystem()) {\r\n            service.populate(request);\r\n            return mapping.findForward(Constants.LIST);\r\n        }\r\n        ActionMessages messages = new ActionMessages();\r\n        service.deleteQuestion(request, sz, messages);\r\n        saveMessages(request, messages);\r\n        return mapping.findForward(Constants.QUESTION);\r\n    }\r\n\r\n    public ActionForward delete(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {\r\n        DynaActionForm szForm = (DynaActionForm) form;\r\n        StrategischesZiel sz = service.getStrategischesZiel(request, szForm);\r\n        if (sz == null || sz.getSystem()) {\r\n            service.populate(request);\r\n            return mapping.findForward(Constants.LIST);\r\n        }\r\n        // Lï¿½schen\r\n        service.delete(request, sz);\r\n        service.populate(request);\r\n        return mapping.findForward(Constants.LIST);\r\n    }\r\n\r\n    public ActionForward set(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {\r\n        // Formulardaten holen\r\n        DynaActionForm strategischeZieleForm = (DynaActionForm) form;\r\n        Integer[] strategischeZieleIds = (Integer[]) strategischeZieleForm.get(\"strategischeZieleIds\");\r\n        if (strategischeZieleIds.length == 0) {\r\n            ActionMessages errors = new ActionMessages();\r\n            errors.add(ActionMessages.GLOBAL_MESSAGE, new ActionMessage(\"errors.select.one\", \"Strategisches Ziel\"));\r\n            saveMessages(request, errors);\r\n            service.populate(request);\r\n            return mapping.findForward(Constants.FAILURE);\r\n        }\r\n        // Projektattraktivitï¿½t holen\r\n        HttpSession session = request.getSession();\r\n        Integer customizingId = (Integer) session.getAttribute(Constants.CUSTOMIZING_ID);\r\n        Integer mandantId = (Integer) session.getAttribute(Constants.MANDANT_ID);\r\n        // Strategische Ziele zuweisen\r\n        logger.debug(\"Strategische Ziele angewï¿½hlt: \" + strategischeZieleIds.length);\r\n        List<StrategischesZiel> strategischeZiele = new ArrayList<StrategischesZiel>();\r\n        for (int i = 0; i < strategischeZieleIds.length; i++) {\r\n            Integer strategischesZielId = strategischeZieleIds[i];\r\n            logger.debug(\"Fï¿½ge Strategisches Ziele \" + strategischesZielId + \" hinzu.\");\r\n            StrategischesZiel ziel = new StrategischesZiel();\r\n            ziel.setStrategischesZielId(strategischesZielId);\r\n            ziel.setProjektattraktivitaetId(getProjektattraktivitaetId(request));\r\n            strategischeZiele.add(ziel);\r\n        }\r\n        service.setProjektattraktivitaet(strategischeZiele);\r\n        request.setAttribute(\"customizingId\", customizingId);\r\n        service.setStatus(request, mandantId, customizingId);\r\n        return mapping.findForward(Constants.SUCCESS);\r\n    }\r\n\r\n    public ActionForward add(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {\r\n        DynaActionForm szForm = (DynaActionForm) form;\r\n        ActionMessages errors = new ActionMessages();\r\n        ActionMessages messages = new ActionMessages();\r\n        if (!service.add(request, szForm, errors, messages)) {\r\n            saveErrors(request, errors);\r\n            saveMessages(request, messages);\r\n        }\r\n        service.populate(request);\r\n        return mapping.findForward(Constants.FORM);\r\n    }\r\n\r\n    private Integer getProjektattraktivitaetId(HttpServletRequest request) {\r\n        // Projektattraktivitï¿½t holen\r\n        Integer customizingId = (Integer) request.getSession().getAttribute(Constants.CUSTOMIZING_ID);\r\n        return commonService.getProjektattraktivitaetIdByCustomizingId(customizingId);\r\n    }\r\n}\r\n",
		"id": "EvoSuiteBenchmark/46_nutzenportfolio/src/main/java/ch/bfh/egov/nutzenportfolio/action/StrategischeZieleActionTest4.java",
		"test_prompt": "// StrategischeZieleActionTest4.java\npackage ch.bfh.egov.nutzenportfolio.action;\n\nimport java.util.ArrayList;\nimport java.util.List;\nimport javax.servlet.http.HttpServletRequest;\nimport javax.servlet.http.HttpServletResponse;\nimport javax.servlet.http.HttpSession;\nimport ch.bfh.egov.nutzenportfolio.Constants;\nimport ch.bfh.egov.nutzenportfolio.service.common.CommonService;\nimport ch.bfh.egov.nutzenportfolio.service.customizing.CustomizingService;\nimport ch.bfh.egov.nutzenportfolio.service.detailziele.DetailzieleService;\nimport ch.bfh.egov.nutzenportfolio.service.strategischeziele.StrategischeZieleService;\nimport ch.bfh.egov.nutzenportfolio.tos.StrategischesZiel;\nimport org.apache.commons.logging.Log;\nimport org.apache.commons.logging.LogFactory;\nimport org.apache.struts.action.ActionForm;\nimport org.apache.struts.action.ActionForward;\nimport org.apache.struts.action.ActionMapping;\nimport org.apache.struts.action.ActionMessage;\nimport org.apache.struts.action.ActionMessages;\nimport org.apache.struts.action.DynaActionForm;\nimport org.apache.struts.actions.DispatchAction;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link StrategischeZieleAction}.\n* It contains ten unit test cases for the {@link StrategischeZieleAction#deletequestion(ActionMapping, ActionForm, HttpServletRequest, HttpServletResponse)} method.\n*/\nclass StrategischeZieleActionTest4 {"
	},
	{
		"original_code": "// StrategischeZieleAction.java\n/**\r\n * Nutzenportfolio\r\n * Copyright (C) 2006 Kompetenzzentrum E-Business, Simon Bergamin\r\n *\r\n * This program is free software; you can redistribute it and/or\r\n * modify it under the terms of the GNU General Public License\r\n * as published by the Free Software Foundation; either version 2\r\n * of the License, or (at your option) any later version.\r\n *\r\n * This program is distributed in the hope that it will be useful,\r\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n * GNU General Public License for more details.\r\n *\r\n * You should have received a copy of the GNU General Public License\r\n * along with this program; if not, write to the Free Software\r\n * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\r\n */\r\npackage ch.bfh.egov.nutzenportfolio.action;\r\n\r\nimport java.util.ArrayList;\r\nimport java.util.List;\r\nimport javax.servlet.http.HttpServletRequest;\r\nimport javax.servlet.http.HttpServletResponse;\r\nimport javax.servlet.http.HttpSession;\r\nimport ch.bfh.egov.nutzenportfolio.Constants;\r\nimport ch.bfh.egov.nutzenportfolio.service.common.CommonService;\r\nimport ch.bfh.egov.nutzenportfolio.service.customizing.CustomizingService;\r\nimport ch.bfh.egov.nutzenportfolio.service.detailziele.DetailzieleService;\r\nimport ch.bfh.egov.nutzenportfolio.service.strategischeziele.StrategischeZieleService;\r\nimport ch.bfh.egov.nutzenportfolio.tos.StrategischesZiel;\r\nimport org.apache.commons.logging.Log;\r\nimport org.apache.commons.logging.LogFactory;\r\nimport org.apache.struts.action.ActionForm;\r\nimport org.apache.struts.action.ActionForward;\r\nimport org.apache.struts.action.ActionMapping;\r\nimport org.apache.struts.action.ActionMessage;\r\nimport org.apache.struts.action.ActionMessages;\r\nimport org.apache.struts.action.DynaActionForm;\r\nimport org.apache.struts.actions.DispatchAction;\r\n\r\npublic class StrategischeZieleAction extends DispatchAction {\r\n\r\n    private Log logger = LogFactory.getLog(this.getClass());\r\n\r\n    private StrategischeZieleService service;\r\n\r\n    private CommonService commonService;\r\n\r\n    public StrategischeZieleAction(StrategischeZieleService service, CommonService commonService, CustomizingService cService, DetailzieleService dzService) {\r\n        super();\r\n        this.service = service;\r\n        this.commonService = commonService;\r\n        this.service.init(cService, dzService);\r\n    }\r\n\r\n    public ActionForward list(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {\r\n        service.populate(request);\r\n        return mapping.findForward(Constants.LIST);\r\n    }\r\n\r\n    public ActionForward prepare(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {\r\n        service.populate(request);\r\n        DynaActionForm szForm = (DynaActionForm) form;\r\n        Integer mandantId = (Integer) request.getSession().getAttribute(Constants.MANDANT_ID);\r\n        Integer customizingId = (Integer) request.getSession().getAttribute(Constants.CUSTOMIZING_ID);\r\n        StrategischesZiel sz = new StrategischesZiel();\r\n        sz.setMandantId(mandantId);\r\n        sz.setCustomizingId(customizingId);\r\n        Integer[] idArr = service.getSelectedIdArr(sz);\r\n        szForm.set(\"strategischeZieleIds\", idArr);\r\n        return mapping.findForward(Constants.FORM);\r\n    }\r\n\r\n    public ActionForward edit(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {\r\n        DynaActionForm szForm = (DynaActionForm) form;\r\n        service.edit(request, szForm);\r\n        return mapping.findForward(Constants.FORM);\r\n    }\r\n\r\n    public ActionForward update(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {\r\n        DynaActionForm szForm = (DynaActionForm) form;\r\n        service.update(request, szForm);\r\n        service.populate(request);\r\n        return mapping.findForward(Constants.LIST);\r\n    }\r\n\r\n    public ActionForward deletequestion(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {\r\n        DynaActionForm szForm = (DynaActionForm) form;\r\n        StrategischesZiel sz = service.getStrategischesZiel(request, szForm);\r\n        if (sz == null || sz.getSystem()) {\r\n            service.populate(request);\r\n            return mapping.findForward(Constants.LIST);\r\n        }\r\n        ActionMessages messages = new ActionMessages();\r\n        service.deleteQuestion(request, sz, messages);\r\n        saveMessages(request, messages);\r\n        return mapping.findForward(Constants.QUESTION);\r\n    }\r\n\r\n    public ActionForward delete(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {\r\n        DynaActionForm szForm = (DynaActionForm) form;\r\n        StrategischesZiel sz = service.getStrategischesZiel(request, szForm);\r\n        if (sz == null || sz.getSystem()) {\r\n            service.populate(request);\r\n            return mapping.findForward(Constants.LIST);\r\n        }\r\n        // Lï¿½schen\r\n        service.delete(request, sz);\r\n        service.populate(request);\r\n        return mapping.findForward(Constants.LIST);\r\n    }\r\n\r\n    public ActionForward set(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {\r\n        // Formulardaten holen\r\n        DynaActionForm strategischeZieleForm = (DynaActionForm) form;\r\n        Integer[] strategischeZieleIds = (Integer[]) strategischeZieleForm.get(\"strategischeZieleIds\");\r\n        if (strategischeZieleIds.length == 0) {\r\n            ActionMessages errors = new ActionMessages();\r\n            errors.add(ActionMessages.GLOBAL_MESSAGE, new ActionMessage(\"errors.select.one\", \"Strategisches Ziel\"));\r\n            saveMessages(request, errors);\r\n            service.populate(request);\r\n            return mapping.findForward(Constants.FAILURE);\r\n        }\r\n        // Projektattraktivitï¿½t holen\r\n        HttpSession session = request.getSession();\r\n        Integer customizingId = (Integer) session.getAttribute(Constants.CUSTOMIZING_ID);\r\n        Integer mandantId = (Integer) session.getAttribute(Constants.MANDANT_ID);\r\n        // Strategische Ziele zuweisen\r\n        logger.debug(\"Strategische Ziele angewï¿½hlt: \" + strategischeZieleIds.length);\r\n        List<StrategischesZiel> strategischeZiele = new ArrayList<StrategischesZiel>();\r\n        for (int i = 0; i < strategischeZieleIds.length; i++) {\r\n            Integer strategischesZielId = strategischeZieleIds[i];\r\n            logger.debug(\"Fï¿½ge Strategisches Ziele \" + strategischesZielId + \" hinzu.\");\r\n            StrategischesZiel ziel = new StrategischesZiel();\r\n            ziel.setStrategischesZielId(strategischesZielId);\r\n            ziel.setProjektattraktivitaetId(getProjektattraktivitaetId(request));\r\n            strategischeZiele.add(ziel);\r\n        }\r\n        service.setProjektattraktivitaet(strategischeZiele);\r\n        request.setAttribute(\"customizingId\", customizingId);\r\n        service.setStatus(request, mandantId, customizingId);\r\n        return mapping.findForward(Constants.SUCCESS);\r\n    }\r\n\r\n    public ActionForward add(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {\r\n        DynaActionForm szForm = (DynaActionForm) form;\r\n        ActionMessages errors = new ActionMessages();\r\n        ActionMessages messages = new ActionMessages();\r\n        if (!service.add(request, szForm, errors, messages)) {\r\n            saveErrors(request, errors);\r\n            saveMessages(request, messages);\r\n        }\r\n        service.populate(request);\r\n        return mapping.findForward(Constants.FORM);\r\n    }\r\n\r\n    private Integer getProjektattraktivitaetId(HttpServletRequest request) {\r\n        // Projektattraktivitï¿½t holen\r\n        Integer customizingId = (Integer) request.getSession().getAttribute(Constants.CUSTOMIZING_ID);\r\n        return commonService.getProjektattraktivitaetIdByCustomizingId(customizingId);\r\n    }\r\n}\r\n",
		"id": "EvoSuiteBenchmark/46_nutzenportfolio/src/main/java/ch/bfh/egov/nutzenportfolio/action/StrategischeZieleActionTest5.java",
		"test_prompt": "// StrategischeZieleActionTest5.java\npackage ch.bfh.egov.nutzenportfolio.action;\n\nimport java.util.ArrayList;\nimport java.util.List;\nimport javax.servlet.http.HttpServletRequest;\nimport javax.servlet.http.HttpServletResponse;\nimport javax.servlet.http.HttpSession;\nimport ch.bfh.egov.nutzenportfolio.Constants;\nimport ch.bfh.egov.nutzenportfolio.service.common.CommonService;\nimport ch.bfh.egov.nutzenportfolio.service.customizing.CustomizingService;\nimport ch.bfh.egov.nutzenportfolio.service.detailziele.DetailzieleService;\nimport ch.bfh.egov.nutzenportfolio.service.strategischeziele.StrategischeZieleService;\nimport ch.bfh.egov.nutzenportfolio.tos.StrategischesZiel;\nimport org.apache.commons.logging.Log;\nimport org.apache.commons.logging.LogFactory;\nimport org.apache.struts.action.ActionForm;\nimport org.apache.struts.action.ActionForward;\nimport org.apache.struts.action.ActionMapping;\nimport org.apache.struts.action.ActionMessage;\nimport org.apache.struts.action.ActionMessages;\nimport org.apache.struts.action.DynaActionForm;\nimport org.apache.struts.actions.DispatchAction;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link StrategischeZieleAction}.\n* It contains ten unit test cases for the {@link StrategischeZieleAction#delete(ActionMapping, ActionForm, HttpServletRequest, HttpServletResponse)} method.\n*/\nclass StrategischeZieleActionTest5 {"
	},
	{
		"original_code": "// StrategischeZieleAction.java\n/**\r\n * Nutzenportfolio\r\n * Copyright (C) 2006 Kompetenzzentrum E-Business, Simon Bergamin\r\n *\r\n * This program is free software; you can redistribute it and/or\r\n * modify it under the terms of the GNU General Public License\r\n * as published by the Free Software Foundation; either version 2\r\n * of the License, or (at your option) any later version.\r\n *\r\n * This program is distributed in the hope that it will be useful,\r\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n * GNU General Public License for more details.\r\n *\r\n * You should have received a copy of the GNU General Public License\r\n * along with this program; if not, write to the Free Software\r\n * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\r\n */\r\npackage ch.bfh.egov.nutzenportfolio.action;\r\n\r\nimport java.util.ArrayList;\r\nimport java.util.List;\r\nimport javax.servlet.http.HttpServletRequest;\r\nimport javax.servlet.http.HttpServletResponse;\r\nimport javax.servlet.http.HttpSession;\r\nimport ch.bfh.egov.nutzenportfolio.Constants;\r\nimport ch.bfh.egov.nutzenportfolio.service.common.CommonService;\r\nimport ch.bfh.egov.nutzenportfolio.service.customizing.CustomizingService;\r\nimport ch.bfh.egov.nutzenportfolio.service.detailziele.DetailzieleService;\r\nimport ch.bfh.egov.nutzenportfolio.service.strategischeziele.StrategischeZieleService;\r\nimport ch.bfh.egov.nutzenportfolio.tos.StrategischesZiel;\r\nimport org.apache.commons.logging.Log;\r\nimport org.apache.commons.logging.LogFactory;\r\nimport org.apache.struts.action.ActionForm;\r\nimport org.apache.struts.action.ActionForward;\r\nimport org.apache.struts.action.ActionMapping;\r\nimport org.apache.struts.action.ActionMessage;\r\nimport org.apache.struts.action.ActionMessages;\r\nimport org.apache.struts.action.DynaActionForm;\r\nimport org.apache.struts.actions.DispatchAction;\r\n\r\npublic class StrategischeZieleAction extends DispatchAction {\r\n\r\n    private Log logger = LogFactory.getLog(this.getClass());\r\n\r\n    private StrategischeZieleService service;\r\n\r\n    private CommonService commonService;\r\n\r\n    public StrategischeZieleAction(StrategischeZieleService service, CommonService commonService, CustomizingService cService, DetailzieleService dzService) {\r\n        super();\r\n        this.service = service;\r\n        this.commonService = commonService;\r\n        this.service.init(cService, dzService);\r\n    }\r\n\r\n    public ActionForward list(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {\r\n        service.populate(request);\r\n        return mapping.findForward(Constants.LIST);\r\n    }\r\n\r\n    public ActionForward prepare(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {\r\n        service.populate(request);\r\n        DynaActionForm szForm = (DynaActionForm) form;\r\n        Integer mandantId = (Integer) request.getSession().getAttribute(Constants.MANDANT_ID);\r\n        Integer customizingId = (Integer) request.getSession().getAttribute(Constants.CUSTOMIZING_ID);\r\n        StrategischesZiel sz = new StrategischesZiel();\r\n        sz.setMandantId(mandantId);\r\n        sz.setCustomizingId(customizingId);\r\n        Integer[] idArr = service.getSelectedIdArr(sz);\r\n        szForm.set(\"strategischeZieleIds\", idArr);\r\n        return mapping.findForward(Constants.FORM);\r\n    }\r\n\r\n    public ActionForward edit(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {\r\n        DynaActionForm szForm = (DynaActionForm) form;\r\n        service.edit(request, szForm);\r\n        return mapping.findForward(Constants.FORM);\r\n    }\r\n\r\n    public ActionForward update(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {\r\n        DynaActionForm szForm = (DynaActionForm) form;\r\n        service.update(request, szForm);\r\n        service.populate(request);\r\n        return mapping.findForward(Constants.LIST);\r\n    }\r\n\r\n    public ActionForward deletequestion(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {\r\n        DynaActionForm szForm = (DynaActionForm) form;\r\n        StrategischesZiel sz = service.getStrategischesZiel(request, szForm);\r\n        if (sz == null || sz.getSystem()) {\r\n            service.populate(request);\r\n            return mapping.findForward(Constants.LIST);\r\n        }\r\n        ActionMessages messages = new ActionMessages();\r\n        service.deleteQuestion(request, sz, messages);\r\n        saveMessages(request, messages);\r\n        return mapping.findForward(Constants.QUESTION);\r\n    }\r\n\r\n    public ActionForward delete(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {\r\n        DynaActionForm szForm = (DynaActionForm) form;\r\n        StrategischesZiel sz = service.getStrategischesZiel(request, szForm);\r\n        if (sz == null || sz.getSystem()) {\r\n            service.populate(request);\r\n            return mapping.findForward(Constants.LIST);\r\n        }\r\n        // Lï¿½schen\r\n        service.delete(request, sz);\r\n        service.populate(request);\r\n        return mapping.findForward(Constants.LIST);\r\n    }\r\n\r\n    public ActionForward set(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {\r\n        // Formulardaten holen\r\n        DynaActionForm strategischeZieleForm = (DynaActionForm) form;\r\n        Integer[] strategischeZieleIds = (Integer[]) strategischeZieleForm.get(\"strategischeZieleIds\");\r\n        if (strategischeZieleIds.length == 0) {\r\n            ActionMessages errors = new ActionMessages();\r\n            errors.add(ActionMessages.GLOBAL_MESSAGE, new ActionMessage(\"errors.select.one\", \"Strategisches Ziel\"));\r\n            saveMessages(request, errors);\r\n            service.populate(request);\r\n            return mapping.findForward(Constants.FAILURE);\r\n        }\r\n        // Projektattraktivitï¿½t holen\r\n        HttpSession session = request.getSession();\r\n        Integer customizingId = (Integer) session.getAttribute(Constants.CUSTOMIZING_ID);\r\n        Integer mandantId = (Integer) session.getAttribute(Constants.MANDANT_ID);\r\n        // Strategische Ziele zuweisen\r\n        logger.debug(\"Strategische Ziele angewï¿½hlt: \" + strategischeZieleIds.length);\r\n        List<StrategischesZiel> strategischeZiele = new ArrayList<StrategischesZiel>();\r\n        for (int i = 0; i < strategischeZieleIds.length; i++) {\r\n            Integer strategischesZielId = strategischeZieleIds[i];\r\n            logger.debug(\"Fï¿½ge Strategisches Ziele \" + strategischesZielId + \" hinzu.\");\r\n            StrategischesZiel ziel = new StrategischesZiel();\r\n            ziel.setStrategischesZielId(strategischesZielId);\r\n            ziel.setProjektattraktivitaetId(getProjektattraktivitaetId(request));\r\n            strategischeZiele.add(ziel);\r\n        }\r\n        service.setProjektattraktivitaet(strategischeZiele);\r\n        request.setAttribute(\"customizingId\", customizingId);\r\n        service.setStatus(request, mandantId, customizingId);\r\n        return mapping.findForward(Constants.SUCCESS);\r\n    }\r\n\r\n    public ActionForward add(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {\r\n        DynaActionForm szForm = (DynaActionForm) form;\r\n        ActionMessages errors = new ActionMessages();\r\n        ActionMessages messages = new ActionMessages();\r\n        if (!service.add(request, szForm, errors, messages)) {\r\n            saveErrors(request, errors);\r\n            saveMessages(request, messages);\r\n        }\r\n        service.populate(request);\r\n        return mapping.findForward(Constants.FORM);\r\n    }\r\n\r\n    private Integer getProjektattraktivitaetId(HttpServletRequest request) {\r\n        // Projektattraktivitï¿½t holen\r\n        Integer customizingId = (Integer) request.getSession().getAttribute(Constants.CUSTOMIZING_ID);\r\n        return commonService.getProjektattraktivitaetIdByCustomizingId(customizingId);\r\n    }\r\n}\r\n",
		"id": "EvoSuiteBenchmark/46_nutzenportfolio/src/main/java/ch/bfh/egov/nutzenportfolio/action/StrategischeZieleActionTest6.java",
		"test_prompt": "// StrategischeZieleActionTest6.java\npackage ch.bfh.egov.nutzenportfolio.action;\n\nimport java.util.ArrayList;\nimport java.util.List;\nimport javax.servlet.http.HttpServletRequest;\nimport javax.servlet.http.HttpServletResponse;\nimport javax.servlet.http.HttpSession;\nimport ch.bfh.egov.nutzenportfolio.Constants;\nimport ch.bfh.egov.nutzenportfolio.service.common.CommonService;\nimport ch.bfh.egov.nutzenportfolio.service.customizing.CustomizingService;\nimport ch.bfh.egov.nutzenportfolio.service.detailziele.DetailzieleService;\nimport ch.bfh.egov.nutzenportfolio.service.strategischeziele.StrategischeZieleService;\nimport ch.bfh.egov.nutzenportfolio.tos.StrategischesZiel;\nimport org.apache.commons.logging.Log;\nimport org.apache.commons.logging.LogFactory;\nimport org.apache.struts.action.ActionForm;\nimport org.apache.struts.action.ActionForward;\nimport org.apache.struts.action.ActionMapping;\nimport org.apache.struts.action.ActionMessage;\nimport org.apache.struts.action.ActionMessages;\nimport org.apache.struts.action.DynaActionForm;\nimport org.apache.struts.actions.DispatchAction;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link StrategischeZieleAction}.\n* It contains ten unit test cases for the {@link StrategischeZieleAction#add(ActionMapping, ActionForm, HttpServletRequest, HttpServletResponse)} method.\n*/\nclass StrategischeZieleActionTest6 {"
	},
	{
		"original_code": "// FragebogenNaOpNuAction.java\n/**\r\n * Nutzenportfolio\r\n * Copyright (C) 2006 Kompetenzzentrum E-Business, Simon Bergamin\r\n *\r\n * This program is free software; you can redistribute it and/or\r\n * modify it under the terms of the GNU General Public License\r\n * as published by the Free Software Foundation; either version 2\r\n * of the License, or (at your option) any later version.\r\n *\r\n * This program is distributed in the hope that it will be useful,\r\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n * GNU General Public License for more details.\r\n *\r\n * You should have received a copy of the GNU General Public License\r\n * along with this program; if not, write to the Free Software\r\n * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\r\n */\r\npackage ch.bfh.egov.nutzenportfolio.action;\r\n\r\nimport javax.servlet.http.HttpServletRequest;\r\nimport javax.servlet.http.HttpServletResponse;\r\nimport ch.bfh.egov.nutzenportfolio.Constants;\r\nimport ch.bfh.egov.nutzenportfolio.form.NaOpNuForm;\r\nimport ch.bfh.egov.nutzenportfolio.service.fragebogen.NaOpNuService;\r\nimport org.apache.commons.logging.Log;\r\nimport org.apache.commons.logging.LogFactory;\r\nimport org.apache.struts.action.ActionForm;\r\nimport org.apache.struts.action.ActionForward;\r\nimport org.apache.struts.action.ActionMapping;\r\nimport org.apache.struts.action.ActionMessage;\r\nimport org.apache.struts.action.ActionMessages;\r\nimport org.apache.struts.action.DynaActionForm;\r\nimport org.apache.struts.actions.DispatchAction;\r\n\r\npublic class FragebogenNaOpNuAction extends DispatchAction {\r\n\r\n    private Log logger = LogFactory.getLog(this.getClass());\r\n\r\n    private NaOpNuService service;\r\n\r\n    public FragebogenNaOpNuAction(NaOpNuService service) {\r\n        super();\r\n        this.service = service;\r\n    }\r\n\r\n    public ActionForward prepare(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {\r\n        logger.debug(\"prepare\");\r\n        NaOpNuForm nForm = (NaOpNuForm) form;\r\n        if (service.prepare(request, nForm)) {\r\n            return mapping.findForward(Constants.FORM);\r\n        }\r\n        return mapping.findForward(Constants.FAILURE);\r\n    }\r\n\r\n    public ActionForward save(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {\r\n        logger.debug(\"save\");\r\n        // Resultate abspeichern\r\n        NaOpNuForm pForm = (NaOpNuForm) form;\r\n        service.save(request, pForm);\r\n        return mapping.findForward(Constants.SUCCESS);\r\n    }\r\n\r\n    public ActionForward login(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {\r\n        DynaActionForm loginForm = (DynaActionForm) form;\r\n        if (service.login(request, loginForm)) {\r\n            return mapping.findForward(Constants.SUCCESS);\r\n        }\r\n        ActionMessages errors = new ActionMessages();\r\n        errors.add(ActionMessages.GLOBAL_MESSAGE, new ActionMessage(\"errors.fragebogen.exists\"));\r\n        saveMessages(request, errors);\r\n        return mapping.findForward(Constants.FAILURE);\r\n    }\r\n}\r\n",
		"id": "EvoSuiteBenchmark/46_nutzenportfolio/src/main/java/ch/bfh/egov/nutzenportfolio/action/FragebogenNaOpNuActionTest0.java",
		"test_prompt": "// FragebogenNaOpNuActionTest0.java\npackage ch.bfh.egov.nutzenportfolio.action;\n\nimport javax.servlet.http.HttpServletRequest;\nimport javax.servlet.http.HttpServletResponse;\nimport ch.bfh.egov.nutzenportfolio.Constants;\nimport ch.bfh.egov.nutzenportfolio.form.NaOpNuForm;\nimport ch.bfh.egov.nutzenportfolio.service.fragebogen.NaOpNuService;\nimport org.apache.commons.logging.Log;\nimport org.apache.commons.logging.LogFactory;\nimport org.apache.struts.action.ActionForm;\nimport org.apache.struts.action.ActionForward;\nimport org.apache.struts.action.ActionMapping;\nimport org.apache.struts.action.ActionMessage;\nimport org.apache.struts.action.ActionMessages;\nimport org.apache.struts.action.DynaActionForm;\nimport org.apache.struts.actions.DispatchAction;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link FragebogenNaOpNuAction}.\n* It contains ten unit test cases for the {@link FragebogenNaOpNuAction#prepare(ActionMapping, ActionForm, HttpServletRequest, HttpServletResponse)} method.\n*/\nclass FragebogenNaOpNuActionTest0 {"
	},
	{
		"original_code": "// FragebogenNaOpNuAction.java\n/**\r\n * Nutzenportfolio\r\n * Copyright (C) 2006 Kompetenzzentrum E-Business, Simon Bergamin\r\n *\r\n * This program is free software; you can redistribute it and/or\r\n * modify it under the terms of the GNU General Public License\r\n * as published by the Free Software Foundation; either version 2\r\n * of the License, or (at your option) any later version.\r\n *\r\n * This program is distributed in the hope that it will be useful,\r\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n * GNU General Public License for more details.\r\n *\r\n * You should have received a copy of the GNU General Public License\r\n * along with this program; if not, write to the Free Software\r\n * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\r\n */\r\npackage ch.bfh.egov.nutzenportfolio.action;\r\n\r\nimport javax.servlet.http.HttpServletRequest;\r\nimport javax.servlet.http.HttpServletResponse;\r\nimport ch.bfh.egov.nutzenportfolio.Constants;\r\nimport ch.bfh.egov.nutzenportfolio.form.NaOpNuForm;\r\nimport ch.bfh.egov.nutzenportfolio.service.fragebogen.NaOpNuService;\r\nimport org.apache.commons.logging.Log;\r\nimport org.apache.commons.logging.LogFactory;\r\nimport org.apache.struts.action.ActionForm;\r\nimport org.apache.struts.action.ActionForward;\r\nimport org.apache.struts.action.ActionMapping;\r\nimport org.apache.struts.action.ActionMessage;\r\nimport org.apache.struts.action.ActionMessages;\r\nimport org.apache.struts.action.DynaActionForm;\r\nimport org.apache.struts.actions.DispatchAction;\r\n\r\npublic class FragebogenNaOpNuAction extends DispatchAction {\r\n\r\n    private Log logger = LogFactory.getLog(this.getClass());\r\n\r\n    private NaOpNuService service;\r\n\r\n    public FragebogenNaOpNuAction(NaOpNuService service) {\r\n        super();\r\n        this.service = service;\r\n    }\r\n\r\n    public ActionForward prepare(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {\r\n        logger.debug(\"prepare\");\r\n        NaOpNuForm nForm = (NaOpNuForm) form;\r\n        if (service.prepare(request, nForm)) {\r\n            return mapping.findForward(Constants.FORM);\r\n        }\r\n        return mapping.findForward(Constants.FAILURE);\r\n    }\r\n\r\n    public ActionForward save(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {\r\n        logger.debug(\"save\");\r\n        // Resultate abspeichern\r\n        NaOpNuForm pForm = (NaOpNuForm) form;\r\n        service.save(request, pForm);\r\n        return mapping.findForward(Constants.SUCCESS);\r\n    }\r\n\r\n    public ActionForward login(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {\r\n        DynaActionForm loginForm = (DynaActionForm) form;\r\n        if (service.login(request, loginForm)) {\r\n            return mapping.findForward(Constants.SUCCESS);\r\n        }\r\n        ActionMessages errors = new ActionMessages();\r\n        errors.add(ActionMessages.GLOBAL_MESSAGE, new ActionMessage(\"errors.fragebogen.exists\"));\r\n        saveMessages(request, errors);\r\n        return mapping.findForward(Constants.FAILURE);\r\n    }\r\n}\r\n",
		"id": "EvoSuiteBenchmark/46_nutzenportfolio/src/main/java/ch/bfh/egov/nutzenportfolio/action/FragebogenNaOpNuActionTest1.java",
		"test_prompt": "// FragebogenNaOpNuActionTest1.java\npackage ch.bfh.egov.nutzenportfolio.action;\n\nimport javax.servlet.http.HttpServletRequest;\nimport javax.servlet.http.HttpServletResponse;\nimport ch.bfh.egov.nutzenportfolio.Constants;\nimport ch.bfh.egov.nutzenportfolio.form.NaOpNuForm;\nimport ch.bfh.egov.nutzenportfolio.service.fragebogen.NaOpNuService;\nimport org.apache.commons.logging.Log;\nimport org.apache.commons.logging.LogFactory;\nimport org.apache.struts.action.ActionForm;\nimport org.apache.struts.action.ActionForward;\nimport org.apache.struts.action.ActionMapping;\nimport org.apache.struts.action.ActionMessage;\nimport org.apache.struts.action.ActionMessages;\nimport org.apache.struts.action.DynaActionForm;\nimport org.apache.struts.actions.DispatchAction;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link FragebogenNaOpNuAction}.\n* It contains ten unit test cases for the {@link FragebogenNaOpNuAction#save(ActionMapping, ActionForm, HttpServletRequest, HttpServletResponse)} method.\n*/\nclass FragebogenNaOpNuActionTest1 {"
	},
	{
		"original_code": "// FragebogenNaOpNuAction.java\n/**\r\n * Nutzenportfolio\r\n * Copyright (C) 2006 Kompetenzzentrum E-Business, Simon Bergamin\r\n *\r\n * This program is free software; you can redistribute it and/or\r\n * modify it under the terms of the GNU General Public License\r\n * as published by the Free Software Foundation; either version 2\r\n * of the License, or (at your option) any later version.\r\n *\r\n * This program is distributed in the hope that it will be useful,\r\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n * GNU General Public License for more details.\r\n *\r\n * You should have received a copy of the GNU General Public License\r\n * along with this program; if not, write to the Free Software\r\n * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\r\n */\r\npackage ch.bfh.egov.nutzenportfolio.action;\r\n\r\nimport javax.servlet.http.HttpServletRequest;\r\nimport javax.servlet.http.HttpServletResponse;\r\nimport ch.bfh.egov.nutzenportfolio.Constants;\r\nimport ch.bfh.egov.nutzenportfolio.form.NaOpNuForm;\r\nimport ch.bfh.egov.nutzenportfolio.service.fragebogen.NaOpNuService;\r\nimport org.apache.commons.logging.Log;\r\nimport org.apache.commons.logging.LogFactory;\r\nimport org.apache.struts.action.ActionForm;\r\nimport org.apache.struts.action.ActionForward;\r\nimport org.apache.struts.action.ActionMapping;\r\nimport org.apache.struts.action.ActionMessage;\r\nimport org.apache.struts.action.ActionMessages;\r\nimport org.apache.struts.action.DynaActionForm;\r\nimport org.apache.struts.actions.DispatchAction;\r\n\r\npublic class FragebogenNaOpNuAction extends DispatchAction {\r\n\r\n    private Log logger = LogFactory.getLog(this.getClass());\r\n\r\n    private NaOpNuService service;\r\n\r\n    public FragebogenNaOpNuAction(NaOpNuService service) {\r\n        super();\r\n        this.service = service;\r\n    }\r\n\r\n    public ActionForward prepare(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {\r\n        logger.debug(\"prepare\");\r\n        NaOpNuForm nForm = (NaOpNuForm) form;\r\n        if (service.prepare(request, nForm)) {\r\n            return mapping.findForward(Constants.FORM);\r\n        }\r\n        return mapping.findForward(Constants.FAILURE);\r\n    }\r\n\r\n    public ActionForward save(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {\r\n        logger.debug(\"save\");\r\n        // Resultate abspeichern\r\n        NaOpNuForm pForm = (NaOpNuForm) form;\r\n        service.save(request, pForm);\r\n        return mapping.findForward(Constants.SUCCESS);\r\n    }\r\n\r\n    public ActionForward login(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {\r\n        DynaActionForm loginForm = (DynaActionForm) form;\r\n        if (service.login(request, loginForm)) {\r\n            return mapping.findForward(Constants.SUCCESS);\r\n        }\r\n        ActionMessages errors = new ActionMessages();\r\n        errors.add(ActionMessages.GLOBAL_MESSAGE, new ActionMessage(\"errors.fragebogen.exists\"));\r\n        saveMessages(request, errors);\r\n        return mapping.findForward(Constants.FAILURE);\r\n    }\r\n}\r\n",
		"id": "EvoSuiteBenchmark/46_nutzenportfolio/src/main/java/ch/bfh/egov/nutzenportfolio/action/FragebogenNaOpNuActionTest2.java",
		"test_prompt": "// FragebogenNaOpNuActionTest2.java\npackage ch.bfh.egov.nutzenportfolio.action;\n\nimport javax.servlet.http.HttpServletRequest;\nimport javax.servlet.http.HttpServletResponse;\nimport ch.bfh.egov.nutzenportfolio.Constants;\nimport ch.bfh.egov.nutzenportfolio.form.NaOpNuForm;\nimport ch.bfh.egov.nutzenportfolio.service.fragebogen.NaOpNuService;\nimport org.apache.commons.logging.Log;\nimport org.apache.commons.logging.LogFactory;\nimport org.apache.struts.action.ActionForm;\nimport org.apache.struts.action.ActionForward;\nimport org.apache.struts.action.ActionMapping;\nimport org.apache.struts.action.ActionMessage;\nimport org.apache.struts.action.ActionMessages;\nimport org.apache.struts.action.DynaActionForm;\nimport org.apache.struts.actions.DispatchAction;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link FragebogenNaOpNuAction}.\n* It contains ten unit test cases for the {@link FragebogenNaOpNuAction#login(ActionMapping, ActionForm, HttpServletRequest, HttpServletResponse)} method.\n*/\nclass FragebogenNaOpNuActionTest2 {"
	},
	{
		"original_code": "// DetailzieleAction.java\n/**\r\n * Nutzenportfolio\r\n * Copyright (C) 2006 Kompetenzzentrum E-Business, Simon Bergamin\r\n *\r\n * This program is free software; you can redistribute it and/or\r\n * modify it under the terms of the GNU General Public License\r\n * as published by the Free Software Foundation; either version 2\r\n * of the License, or (at your option) any later version.\r\n *\r\n * This program is distributed in the hope that it will be useful,\r\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n * GNU General Public License for more details.\r\n *\r\n * You should have received a copy of the GNU General Public License\r\n * along with this program; if not, write to the Free Software\r\n * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\r\n */\r\npackage ch.bfh.egov.nutzenportfolio.action;\r\n\r\nimport java.util.HashMap;\r\nimport java.util.List;\r\nimport javax.servlet.http.HttpServletRequest;\r\nimport javax.servlet.http.HttpServletResponse;\r\nimport ch.bfh.egov.nutzenportfolio.Constants;\r\nimport ch.bfh.egov.nutzenportfolio.service.common.CommonService;\r\nimport ch.bfh.egov.nutzenportfolio.service.customizing.CustomizingService;\r\nimport ch.bfh.egov.nutzenportfolio.service.detailziele.DetailzieleService;\r\nimport ch.bfh.egov.nutzenportfolio.service.strategischeziele.StrategischeZieleService;\r\nimport ch.bfh.egov.nutzenportfolio.tos.Detailziel;\r\nimport ch.bfh.egov.nutzenportfolio.tos.StrategischesZiel;\r\nimport org.apache.commons.logging.Log;\r\nimport org.apache.commons.logging.LogFactory;\r\nimport org.apache.struts.action.ActionForm;\r\nimport org.apache.struts.action.ActionForward;\r\nimport org.apache.struts.action.ActionMapping;\r\nimport org.apache.struts.action.ActionMessage;\r\nimport org.apache.struts.action.ActionMessages;\r\nimport org.apache.struts.action.DynaActionForm;\r\nimport org.apache.struts.actions.DispatchAction;\r\n\r\npublic class DetailzieleAction extends DispatchAction {\r\n\r\n    private Log logger = LogFactory.getLog(this.getClass());\r\n\r\n    private DetailzieleService service;\r\n\r\n    private StrategischeZieleService szService;\r\n\r\n    private CommonService commonService;\r\n\r\n    public DetailzieleAction(DetailzieleService service, StrategischeZieleService szService, CommonService commonService, CustomizingService customizingService) {\r\n        super();\r\n        this.service = service;\r\n        this.szService = szService;\r\n        this.commonService = commonService;\r\n        service.init(commonService, customizingService, szService);\r\n    }\r\n\r\n    public ActionForward list(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {\r\n        service.populate(request);\r\n        return mapping.findForward(Constants.LIST);\r\n    }\r\n\r\n    public ActionForward prepare(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {\r\n        if (!populate(request)) {\r\n            ActionMessages errors = new ActionMessages();\r\n            errors.add(ActionMessages.GLOBAL_MESSAGE, new ActionMessage(\"errors.strategische.ziele.not.set\"));\r\n            saveMessages(request, errors);\r\n            return mapping.findForward(Constants.FAILURE);\r\n        }\r\n        return mapping.findForward(Constants.FORM);\r\n    }\r\n\r\n    public ActionForward edit(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {\r\n        DynaActionForm dzForm = (DynaActionForm) form;\r\n        service.edit(request, dzForm);\r\n        return mapping.findForward(Constants.FORM);\r\n    }\r\n\r\n    public ActionForward update(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {\r\n        DynaActionForm dzForm = (DynaActionForm) form;\r\n        service.update(request, dzForm);\r\n        service.populate(request);\r\n        return mapping.findForward(Constants.LIST);\r\n    }\r\n\r\n    public ActionForward deletequestion(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {\r\n        DynaActionForm dzForm = (DynaActionForm) form;\r\n        Detailziel dz = service.getDetailziel(request, dzForm);\r\n        if (dz == null) {\r\n            service.populate(request);\r\n            return mapping.findForward(Constants.LIST);\r\n        }\r\n        ActionMessages messages = new ActionMessages();\r\n        service.deleteQuestion(request, dz, messages);\r\n        saveMessages(request, messages);\r\n        return mapping.findForward(Constants.QUESTION);\r\n    }\r\n\r\n    public ActionForward delete(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {\r\n        DynaActionForm dzForm = (DynaActionForm) form;\r\n        Detailziel dz = service.getDetailziel(request, dzForm);\r\n        if (dz == null) {\r\n            service.populate(request);\r\n            return mapping.findForward(Constants.LIST);\r\n        }\r\n        // Lï¿½schen\r\n        service.delete(request, dz);\r\n        service.populate(request);\r\n        return mapping.findForward(Constants.LIST);\r\n    }\r\n\r\n    public ActionForward remove(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {\r\n        //Formulardaten holen\r\n        DynaActionForm dzForm = (DynaActionForm) form;\r\n        Integer detailzielId = (Integer) dzForm.get(Constants.DETAILZIEL_ID);\r\n        Integer paId = (Integer) dzForm.get(Constants.PROJEKTATTRAKTIVITAET_ID);\r\n        Boolean quantifizierbar = (Boolean) dzForm.get(Constants.QUANTIFIZIERBAR);\r\n        logger.debug(\"detailzielId=\" + detailzielId);\r\n        logger.debug(\"paId=\" + paId);\r\n        logger.debug(\"quantifizierbar=\" + quantifizierbar);\r\n        Integer mandantId = (Integer) request.getSession().getAttribute(Constants.MANDANT_ID);\r\n        Detailziel dz = new Detailziel();\r\n        dz.setProjektattraktivitaetId(paId);\r\n        dz.setQuantifizierbar(quantifizierbar);\r\n        dz.setMandantId(mandantId);\r\n        List<Detailziel> dzs = service.getAssignments(dz);\r\n        logger.debug(dzs.size() + \" Detailziele in der Liste\");\r\n        // Zuweisung lï¿½schen\r\n        for (Detailziel d : dzs) {\r\n            if (d.getDetailzielId().equals(detailzielId)) {\r\n                logger.debug(\"Zuweisung detailzielId=\" + detailzielId + \", projektattraktivitaetId=\" + d.getProjektattraktivitaetId() + \" wird gelï¿½scht.\");\r\n                service.deleteAssignment(d);\r\n                break;\r\n            }\r\n        }\r\n        populate(request);\r\n        return mapping.findForward(Constants.FORM);\r\n    }\r\n\r\n    public ActionForward set(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {\r\n        // Formulardaten holen\r\n        DynaActionForm dzForm = (DynaActionForm) form;\r\n        Integer detailzielId = (Integer) dzForm.get(Constants.DETAILZIEL_ID);\r\n        if (detailzielId == null) {\r\n            populate(request);\r\n            return mapping.findForward(Constants.FORM);\r\n        }\r\n        // Detailziel zuweisen\r\n        logger.debug(\"Detailziel zuweisen: \" + detailzielId);\r\n        Detailziel dz = new Detailziel();\r\n        dz.setDetailzielId(detailzielId);\r\n        dz.setProjektattraktivitaetId(getProjektattraktivitaetId(request));\r\n        service.insertAssignment(dz);\r\n        // Formular abfï¿½llen und anzeigen\r\n        populate(request);\r\n        return mapping.findForward(Constants.FORM);\r\n    }\r\n\r\n    public ActionForward next(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {\r\n        // Nï¿½chste Action?\r\n        String last = request.getParameter(Constants.LAST_STEP);\r\n        if (last != null && last.equals(\"true\"))\r\n            return mapping.findForward(Constants.NEXT);\r\n        populate(request);\r\n        return mapping.findForward(Constants.FORM);\r\n    }\r\n\r\n    public ActionForward add(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {\r\n        DynaActionForm dzForm = (DynaActionForm) form;\r\n        ActionMessages errors = new ActionMessages();\r\n        ActionMessages messages = new ActionMessages();\r\n        if (!service.add(request, dzForm, errors, messages)) {\r\n            saveErrors(request, errors);\r\n            saveMessages(request, messages);\r\n        }\r\n        populate(request);\r\n        return mapping.findForward(Constants.FORM);\r\n    }\r\n\r\n    private boolean populate(HttpServletRequest request) {\r\n        Integer customizingId = (Integer) request.getSession().getAttribute(Constants.CUSTOMIZING_ID);\r\n        Integer projektattraktivitaetId = getProjektattraktivitaetId(request);\r\n        Integer mandantId = (Integer) request.getSession().getAttribute(Constants.MANDANT_ID);\r\n        // Strategische Ziele holen\r\n        StrategischesZiel sz = new StrategischesZiel();\r\n        sz.setCustomizingId(customizingId);\r\n        sz.setMandantId(mandantId);\r\n        List<StrategischesZiel> szs = szService.getAssignments(sz);\r\n        Integer szId = null;\r\n        Integer step = null;\r\n        if (szs.size() == 0) {\r\n            return false;\r\n        }\r\n        // 1 Schritt pro Strategisches Ziel. Parameter ï¿½berprï¿½fen.\r\n        String stepStr = request.getParameter(Constants.STEP);\r\n        String next = request.getParameter(Constants.NEXT);\r\n        logger.debug(\"Angegebener step: \" + stepStr);\r\n        try {\r\n            step = new Integer(stepStr);\r\n        } catch (NumberFormatException nfex) {\r\n            step = 1;\r\n        }\r\n        // Denselben Schritt wiederholen, wenn nicht \"weiter\" geklickt wurde\r\n        if (next == null && step > 1)\r\n            --step;\r\n        // Strategische Ziele in Array stellen\r\n        Integer[] szIdArr = new Integer[szs.size()];\r\n        String[] szNameArr = new String[szs.size()];\r\n        int i = 0;\r\n        for (StrategischesZiel sZiel : szs) {\r\n            szIdArr[i] = sZiel.getStrategischesZielId();\r\n            szNameArr[i++] = sZiel.getName();\r\n            logger.debug(\"Strategisches Ziel: id=\" + szIdArr[i - 1] + \", name=\" + szNameArr[i - 1]);\r\n        }\r\n        // Auf inkorrekten step Parameter prï¿½fen\r\n        if ((step - 1) >= szIdArr.length) {\r\n            logger.warn(\"Nicht verfï¿½gbarer Schritt ausgewï¿½hlt!\");\r\n            step = 1;\r\n        }\r\n        // Auf letzten Schritt prï¿½fen\r\n        if (step == szIdArr.length) {\r\n            request.setAttribute(Constants.LAST_STEP, true);\r\n        }\r\n        // Id des Strategischen Ziels anhand des step Parameters holen\r\n        szId = szIdArr[step - 1];\r\n        logger.debug(\"Gewï¿½hltes Strategisches Ziel: \" + szId);\r\n        request.setAttribute(Constants.STRATEGISCHES_ZIEL_ID, szId);\r\n        request.setAttribute(Constants.STRATEGISCHES_ZIEL_NAME, szNameArr[step - 1]);\r\n        request.setAttribute(Constants.STEP, step + 1);\r\n        // Detailziele fï¿½r quantifizierbaren Nutzen holen\r\n        // Alle Detailziele zum gewï¿½hlten Strategischen Ziel holen\r\n        Detailziel dz = new Detailziel();\r\n        dz.setProjektattraktivitaetId(projektattraktivitaetId);\r\n        dz.setStrategischesZielId(szId);\r\n        dz.setQuantifizierbar(true);\r\n        dz.setMandantId(mandantId);\r\n        // Detailziele aussortieren, die einem anderen Customizing zugeordnet sind\r\n        List<Detailziel> dzs = service.getByStrategischesZiel(dz);\r\n        HashMap<Integer, Detailziel> map = new HashMap<Integer, Detailziel>();\r\n        for (Detailziel d : dzs) {\r\n            Integer id = d.getDetailzielId();\r\n            boolean contains = map.containsKey(id);\r\n            Integer dPaId = d.getProjektattraktivitaetId();\r\n            // HashMap abfï¿½llen um allfï¿½llige doppelte Detailziele auszusortieren\r\n            // (ist der Fall bei Zuweisungen zu anderen Customizings)\r\n            if (!contains || dPaId != null && contains && dPaId.equals(projektattraktivitaetId))\r\n                map.put(id, d);\r\n        }\r\n        request.setAttribute(Constants.DETAILZIELE_Q, map.values());\r\n        request.setAttribute(Constants.PROJEKTATTRAKTIVITAET_ID, projektattraktivitaetId);\r\n        List<Detailziel> dzsA = service.getAssignments(dz);\r\n        request.setAttribute(Constants.DETAILZIELE_ASSIGNED_Q, dzsA);\r\n        // Detailziele fï¿½r nicht quantifizierbaren Nutzen holen\r\n        // Alle Detailziele zum gewï¿½hlten Strategischen Ziel holen\r\n        dz.setQuantifizierbar(false);\r\n        // Detailziele aussortieren, die einem anderen Customizing zugeordnet sind\r\n        dzs = service.getByStrategischesZiel(dz);\r\n        map = new HashMap<Integer, Detailziel>();\r\n        for (Detailziel d : dzs) {\r\n            Integer id = d.getDetailzielId();\r\n            boolean contains = map.containsKey(id);\r\n            Integer dPaId = d.getProjektattraktivitaetId();\r\n            // HashMap abfï¿½llen um allfï¿½llige doppelte Detailziele auszusortieren\r\n            // (ist der Fall bei Zuweisungen zu anderen Customizings)\r\n            if (!contains || dPaId != null && contains && dPaId.equals(projektattraktivitaetId))\r\n                map.put(id, d);\r\n        }\r\n        request.setAttribute(Constants.DETAILZIELE_NQ, map.values());\r\n        dzsA = service.getAssignments(dz);\r\n        request.setAttribute(Constants.DETAILZIELE_ASSIGNED_NQ, dzsA);\r\n        service.setStatus(request, szs, mandantId, projektattraktivitaetId);\r\n        return true;\r\n    }\r\n\r\n    private Integer getProjektattraktivitaetId(HttpServletRequest request) {\r\n        // Projektattraktivitï¿½t holen\r\n        Integer customizingId = (Integer) request.getSession().getAttribute(Constants.CUSTOMIZING_ID);\r\n        return commonService.getProjektattraktivitaetIdByCustomizingId(customizingId);\r\n    }\r\n}\r\n",
		"id": "EvoSuiteBenchmark/46_nutzenportfolio/src/main/java/ch/bfh/egov/nutzenportfolio/action/DetailzieleActionTest0.java",
		"test_prompt": "// DetailzieleActionTest0.java\npackage ch.bfh.egov.nutzenportfolio.action;\n\nimport java.util.HashMap;\nimport java.util.List;\nimport javax.servlet.http.HttpServletRequest;\nimport javax.servlet.http.HttpServletResponse;\nimport ch.bfh.egov.nutzenportfolio.Constants;\nimport ch.bfh.egov.nutzenportfolio.service.common.CommonService;\nimport ch.bfh.egov.nutzenportfolio.service.customizing.CustomizingService;\nimport ch.bfh.egov.nutzenportfolio.service.detailziele.DetailzieleService;\nimport ch.bfh.egov.nutzenportfolio.service.strategischeziele.StrategischeZieleService;\nimport ch.bfh.egov.nutzenportfolio.tos.Detailziel;\nimport ch.bfh.egov.nutzenportfolio.tos.StrategischesZiel;\nimport org.apache.commons.logging.Log;\nimport org.apache.commons.logging.LogFactory;\nimport org.apache.struts.action.ActionForm;\nimport org.apache.struts.action.ActionForward;\nimport org.apache.struts.action.ActionMapping;\nimport org.apache.struts.action.ActionMessage;\nimport org.apache.struts.action.ActionMessages;\nimport org.apache.struts.action.DynaActionForm;\nimport org.apache.struts.actions.DispatchAction;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link DetailzieleAction}.\n* It contains ten unit test cases for the {@link DetailzieleAction#list(ActionMapping, ActionForm, HttpServletRequest, HttpServletResponse)} method.\n*/\nclass DetailzieleActionTest0 {"
	},
	{
		"original_code": "// DetailzieleAction.java\n/**\r\n * Nutzenportfolio\r\n * Copyright (C) 2006 Kompetenzzentrum E-Business, Simon Bergamin\r\n *\r\n * This program is free software; you can redistribute it and/or\r\n * modify it under the terms of the GNU General Public License\r\n * as published by the Free Software Foundation; either version 2\r\n * of the License, or (at your option) any later version.\r\n *\r\n * This program is distributed in the hope that it will be useful,\r\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n * GNU General Public License for more details.\r\n *\r\n * You should have received a copy of the GNU General Public License\r\n * along with this program; if not, write to the Free Software\r\n * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\r\n */\r\npackage ch.bfh.egov.nutzenportfolio.action;\r\n\r\nimport java.util.HashMap;\r\nimport java.util.List;\r\nimport javax.servlet.http.HttpServletRequest;\r\nimport javax.servlet.http.HttpServletResponse;\r\nimport ch.bfh.egov.nutzenportfolio.Constants;\r\nimport ch.bfh.egov.nutzenportfolio.service.common.CommonService;\r\nimport ch.bfh.egov.nutzenportfolio.service.customizing.CustomizingService;\r\nimport ch.bfh.egov.nutzenportfolio.service.detailziele.DetailzieleService;\r\nimport ch.bfh.egov.nutzenportfolio.service.strategischeziele.StrategischeZieleService;\r\nimport ch.bfh.egov.nutzenportfolio.tos.Detailziel;\r\nimport ch.bfh.egov.nutzenportfolio.tos.StrategischesZiel;\r\nimport org.apache.commons.logging.Log;\r\nimport org.apache.commons.logging.LogFactory;\r\nimport org.apache.struts.action.ActionForm;\r\nimport org.apache.struts.action.ActionForward;\r\nimport org.apache.struts.action.ActionMapping;\r\nimport org.apache.struts.action.ActionMessage;\r\nimport org.apache.struts.action.ActionMessages;\r\nimport org.apache.struts.action.DynaActionForm;\r\nimport org.apache.struts.actions.DispatchAction;\r\n\r\npublic class DetailzieleAction extends DispatchAction {\r\n\r\n    private Log logger = LogFactory.getLog(this.getClass());\r\n\r\n    private DetailzieleService service;\r\n\r\n    private StrategischeZieleService szService;\r\n\r\n    private CommonService commonService;\r\n\r\n    public DetailzieleAction(DetailzieleService service, StrategischeZieleService szService, CommonService commonService, CustomizingService customizingService) {\r\n        super();\r\n        this.service = service;\r\n        this.szService = szService;\r\n        this.commonService = commonService;\r\n        service.init(commonService, customizingService, szService);\r\n    }\r\n\r\n    public ActionForward list(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {\r\n        service.populate(request);\r\n        return mapping.findForward(Constants.LIST);\r\n    }\r\n\r\n    public ActionForward prepare(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {\r\n        if (!populate(request)) {\r\n            ActionMessages errors = new ActionMessages();\r\n            errors.add(ActionMessages.GLOBAL_MESSAGE, new ActionMessage(\"errors.strategische.ziele.not.set\"));\r\n            saveMessages(request, errors);\r\n            return mapping.findForward(Constants.FAILURE);\r\n        }\r\n        return mapping.findForward(Constants.FORM);\r\n    }\r\n\r\n    public ActionForward edit(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {\r\n        DynaActionForm dzForm = (DynaActionForm) form;\r\n        service.edit(request, dzForm);\r\n        return mapping.findForward(Constants.FORM);\r\n    }\r\n\r\n    public ActionForward update(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {\r\n        DynaActionForm dzForm = (DynaActionForm) form;\r\n        service.update(request, dzForm);\r\n        service.populate(request);\r\n        return mapping.findForward(Constants.LIST);\r\n    }\r\n\r\n    public ActionForward deletequestion(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {\r\n        DynaActionForm dzForm = (DynaActionForm) form;\r\n        Detailziel dz = service.getDetailziel(request, dzForm);\r\n        if (dz == null) {\r\n            service.populate(request);\r\n            return mapping.findForward(Constants.LIST);\r\n        }\r\n        ActionMessages messages = new ActionMessages();\r\n        service.deleteQuestion(request, dz, messages);\r\n        saveMessages(request, messages);\r\n        return mapping.findForward(Constants.QUESTION);\r\n    }\r\n\r\n    public ActionForward delete(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {\r\n        DynaActionForm dzForm = (DynaActionForm) form;\r\n        Detailziel dz = service.getDetailziel(request, dzForm);\r\n        if (dz == null) {\r\n            service.populate(request);\r\n            return mapping.findForward(Constants.LIST);\r\n        }\r\n        // Lï¿½schen\r\n        service.delete(request, dz);\r\n        service.populate(request);\r\n        return mapping.findForward(Constants.LIST);\r\n    }\r\n\r\n    public ActionForward remove(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {\r\n        //Formulardaten holen\r\n        DynaActionForm dzForm = (DynaActionForm) form;\r\n        Integer detailzielId = (Integer) dzForm.get(Constants.DETAILZIEL_ID);\r\n        Integer paId = (Integer) dzForm.get(Constants.PROJEKTATTRAKTIVITAET_ID);\r\n        Boolean quantifizierbar = (Boolean) dzForm.get(Constants.QUANTIFIZIERBAR);\r\n        logger.debug(\"detailzielId=\" + detailzielId);\r\n        logger.debug(\"paId=\" + paId);\r\n        logger.debug(\"quantifizierbar=\" + quantifizierbar);\r\n        Integer mandantId = (Integer) request.getSession().getAttribute(Constants.MANDANT_ID);\r\n        Detailziel dz = new Detailziel();\r\n        dz.setProjektattraktivitaetId(paId);\r\n        dz.setQuantifizierbar(quantifizierbar);\r\n        dz.setMandantId(mandantId);\r\n        List<Detailziel> dzs = service.getAssignments(dz);\r\n        logger.debug(dzs.size() + \" Detailziele in der Liste\");\r\n        // Zuweisung lï¿½schen\r\n        for (Detailziel d : dzs) {\r\n            if (d.getDetailzielId().equals(detailzielId)) {\r\n                logger.debug(\"Zuweisung detailzielId=\" + detailzielId + \", projektattraktivitaetId=\" + d.getProjektattraktivitaetId() + \" wird gelï¿½scht.\");\r\n                service.deleteAssignment(d);\r\n                break;\r\n            }\r\n        }\r\n        populate(request);\r\n        return mapping.findForward(Constants.FORM);\r\n    }\r\n\r\n    public ActionForward set(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {\r\n        // Formulardaten holen\r\n        DynaActionForm dzForm = (DynaActionForm) form;\r\n        Integer detailzielId = (Integer) dzForm.get(Constants.DETAILZIEL_ID);\r\n        if (detailzielId == null) {\r\n            populate(request);\r\n            return mapping.findForward(Constants.FORM);\r\n        }\r\n        // Detailziel zuweisen\r\n        logger.debug(\"Detailziel zuweisen: \" + detailzielId);\r\n        Detailziel dz = new Detailziel();\r\n        dz.setDetailzielId(detailzielId);\r\n        dz.setProjektattraktivitaetId(getProjektattraktivitaetId(request));\r\n        service.insertAssignment(dz);\r\n        // Formular abfï¿½llen und anzeigen\r\n        populate(request);\r\n        return mapping.findForward(Constants.FORM);\r\n    }\r\n\r\n    public ActionForward next(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {\r\n        // Nï¿½chste Action?\r\n        String last = request.getParameter(Constants.LAST_STEP);\r\n        if (last != null && last.equals(\"true\"))\r\n            return mapping.findForward(Constants.NEXT);\r\n        populate(request);\r\n        return mapping.findForward(Constants.FORM);\r\n    }\r\n\r\n    public ActionForward add(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {\r\n        DynaActionForm dzForm = (DynaActionForm) form;\r\n        ActionMessages errors = new ActionMessages();\r\n        ActionMessages messages = new ActionMessages();\r\n        if (!service.add(request, dzForm, errors, messages)) {\r\n            saveErrors(request, errors);\r\n            saveMessages(request, messages);\r\n        }\r\n        populate(request);\r\n        return mapping.findForward(Constants.FORM);\r\n    }\r\n\r\n    private boolean populate(HttpServletRequest request) {\r\n        Integer customizingId = (Integer) request.getSession().getAttribute(Constants.CUSTOMIZING_ID);\r\n        Integer projektattraktivitaetId = getProjektattraktivitaetId(request);\r\n        Integer mandantId = (Integer) request.getSession().getAttribute(Constants.MANDANT_ID);\r\n        // Strategische Ziele holen\r\n        StrategischesZiel sz = new StrategischesZiel();\r\n        sz.setCustomizingId(customizingId);\r\n        sz.setMandantId(mandantId);\r\n        List<StrategischesZiel> szs = szService.getAssignments(sz);\r\n        Integer szId = null;\r\n        Integer step = null;\r\n        if (szs.size() == 0) {\r\n            return false;\r\n        }\r\n        // 1 Schritt pro Strategisches Ziel. Parameter ï¿½berprï¿½fen.\r\n        String stepStr = request.getParameter(Constants.STEP);\r\n        String next = request.getParameter(Constants.NEXT);\r\n        logger.debug(\"Angegebener step: \" + stepStr);\r\n        try {\r\n            step = new Integer(stepStr);\r\n        } catch (NumberFormatException nfex) {\r\n            step = 1;\r\n        }\r\n        // Denselben Schritt wiederholen, wenn nicht \"weiter\" geklickt wurde\r\n        if (next == null && step > 1)\r\n            --step;\r\n        // Strategische Ziele in Array stellen\r\n        Integer[] szIdArr = new Integer[szs.size()];\r\n        String[] szNameArr = new String[szs.size()];\r\n        int i = 0;\r\n        for (StrategischesZiel sZiel : szs) {\r\n            szIdArr[i] = sZiel.getStrategischesZielId();\r\n            szNameArr[i++] = sZiel.getName();\r\n            logger.debug(\"Strategisches Ziel: id=\" + szIdArr[i - 1] + \", name=\" + szNameArr[i - 1]);\r\n        }\r\n        // Auf inkorrekten step Parameter prï¿½fen\r\n        if ((step - 1) >= szIdArr.length) {\r\n            logger.warn(\"Nicht verfï¿½gbarer Schritt ausgewï¿½hlt!\");\r\n            step = 1;\r\n        }\r\n        // Auf letzten Schritt prï¿½fen\r\n        if (step == szIdArr.length) {\r\n            request.setAttribute(Constants.LAST_STEP, true);\r\n        }\r\n        // Id des Strategischen Ziels anhand des step Parameters holen\r\n        szId = szIdArr[step - 1];\r\n        logger.debug(\"Gewï¿½hltes Strategisches Ziel: \" + szId);\r\n        request.setAttribute(Constants.STRATEGISCHES_ZIEL_ID, szId);\r\n        request.setAttribute(Constants.STRATEGISCHES_ZIEL_NAME, szNameArr[step - 1]);\r\n        request.setAttribute(Constants.STEP, step + 1);\r\n        // Detailziele fï¿½r quantifizierbaren Nutzen holen\r\n        // Alle Detailziele zum gewï¿½hlten Strategischen Ziel holen\r\n        Detailziel dz = new Detailziel();\r\n        dz.setProjektattraktivitaetId(projektattraktivitaetId);\r\n        dz.setStrategischesZielId(szId);\r\n        dz.setQuantifizierbar(true);\r\n        dz.setMandantId(mandantId);\r\n        // Detailziele aussortieren, die einem anderen Customizing zugeordnet sind\r\n        List<Detailziel> dzs = service.getByStrategischesZiel(dz);\r\n        HashMap<Integer, Detailziel> map = new HashMap<Integer, Detailziel>();\r\n        for (Detailziel d : dzs) {\r\n            Integer id = d.getDetailzielId();\r\n            boolean contains = map.containsKey(id);\r\n            Integer dPaId = d.getProjektattraktivitaetId();\r\n            // HashMap abfï¿½llen um allfï¿½llige doppelte Detailziele auszusortieren\r\n            // (ist der Fall bei Zuweisungen zu anderen Customizings)\r\n            if (!contains || dPaId != null && contains && dPaId.equals(projektattraktivitaetId))\r\n                map.put(id, d);\r\n        }\r\n        request.setAttribute(Constants.DETAILZIELE_Q, map.values());\r\n        request.setAttribute(Constants.PROJEKTATTRAKTIVITAET_ID, projektattraktivitaetId);\r\n        List<Detailziel> dzsA = service.getAssignments(dz);\r\n        request.setAttribute(Constants.DETAILZIELE_ASSIGNED_Q, dzsA);\r\n        // Detailziele fï¿½r nicht quantifizierbaren Nutzen holen\r\n        // Alle Detailziele zum gewï¿½hlten Strategischen Ziel holen\r\n        dz.setQuantifizierbar(false);\r\n        // Detailziele aussortieren, die einem anderen Customizing zugeordnet sind\r\n        dzs = service.getByStrategischesZiel(dz);\r\n        map = new HashMap<Integer, Detailziel>();\r\n        for (Detailziel d : dzs) {\r\n            Integer id = d.getDetailzielId();\r\n            boolean contains = map.containsKey(id);\r\n            Integer dPaId = d.getProjektattraktivitaetId();\r\n            // HashMap abfï¿½llen um allfï¿½llige doppelte Detailziele auszusortieren\r\n            // (ist der Fall bei Zuweisungen zu anderen Customizings)\r\n            if (!contains || dPaId != null && contains && dPaId.equals(projektattraktivitaetId))\r\n                map.put(id, d);\r\n        }\r\n        request.setAttribute(Constants.DETAILZIELE_NQ, map.values());\r\n        dzsA = service.getAssignments(dz);\r\n        request.setAttribute(Constants.DETAILZIELE_ASSIGNED_NQ, dzsA);\r\n        service.setStatus(request, szs, mandantId, projektattraktivitaetId);\r\n        return true;\r\n    }\r\n\r\n    private Integer getProjektattraktivitaetId(HttpServletRequest request) {\r\n        // Projektattraktivitï¿½t holen\r\n        Integer customizingId = (Integer) request.getSession().getAttribute(Constants.CUSTOMIZING_ID);\r\n        return commonService.getProjektattraktivitaetIdByCustomizingId(customizingId);\r\n    }\r\n}\r\n",
		"id": "EvoSuiteBenchmark/46_nutzenportfolio/src/main/java/ch/bfh/egov/nutzenportfolio/action/DetailzieleActionTest1.java",
		"test_prompt": "// DetailzieleActionTest1.java\npackage ch.bfh.egov.nutzenportfolio.action;\n\nimport java.util.HashMap;\nimport java.util.List;\nimport javax.servlet.http.HttpServletRequest;\nimport javax.servlet.http.HttpServletResponse;\nimport ch.bfh.egov.nutzenportfolio.Constants;\nimport ch.bfh.egov.nutzenportfolio.service.common.CommonService;\nimport ch.bfh.egov.nutzenportfolio.service.customizing.CustomizingService;\nimport ch.bfh.egov.nutzenportfolio.service.detailziele.DetailzieleService;\nimport ch.bfh.egov.nutzenportfolio.service.strategischeziele.StrategischeZieleService;\nimport ch.bfh.egov.nutzenportfolio.tos.Detailziel;\nimport ch.bfh.egov.nutzenportfolio.tos.StrategischesZiel;\nimport org.apache.commons.logging.Log;\nimport org.apache.commons.logging.LogFactory;\nimport org.apache.struts.action.ActionForm;\nimport org.apache.struts.action.ActionForward;\nimport org.apache.struts.action.ActionMapping;\nimport org.apache.struts.action.ActionMessage;\nimport org.apache.struts.action.ActionMessages;\nimport org.apache.struts.action.DynaActionForm;\nimport org.apache.struts.actions.DispatchAction;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link DetailzieleAction}.\n* It contains ten unit test cases for the {@link DetailzieleAction#prepare(ActionMapping, ActionForm, HttpServletRequest, HttpServletResponse)} method.\n*/\nclass DetailzieleActionTest1 {"
	},
	{
		"original_code": "// DetailzieleAction.java\n/**\r\n * Nutzenportfolio\r\n * Copyright (C) 2006 Kompetenzzentrum E-Business, Simon Bergamin\r\n *\r\n * This program is free software; you can redistribute it and/or\r\n * modify it under the terms of the GNU General Public License\r\n * as published by the Free Software Foundation; either version 2\r\n * of the License, or (at your option) any later version.\r\n *\r\n * This program is distributed in the hope that it will be useful,\r\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n * GNU General Public License for more details.\r\n *\r\n * You should have received a copy of the GNU General Public License\r\n * along with this program; if not, write to the Free Software\r\n * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\r\n */\r\npackage ch.bfh.egov.nutzenportfolio.action;\r\n\r\nimport java.util.HashMap;\r\nimport java.util.List;\r\nimport javax.servlet.http.HttpServletRequest;\r\nimport javax.servlet.http.HttpServletResponse;\r\nimport ch.bfh.egov.nutzenportfolio.Constants;\r\nimport ch.bfh.egov.nutzenportfolio.service.common.CommonService;\r\nimport ch.bfh.egov.nutzenportfolio.service.customizing.CustomizingService;\r\nimport ch.bfh.egov.nutzenportfolio.service.detailziele.DetailzieleService;\r\nimport ch.bfh.egov.nutzenportfolio.service.strategischeziele.StrategischeZieleService;\r\nimport ch.bfh.egov.nutzenportfolio.tos.Detailziel;\r\nimport ch.bfh.egov.nutzenportfolio.tos.StrategischesZiel;\r\nimport org.apache.commons.logging.Log;\r\nimport org.apache.commons.logging.LogFactory;\r\nimport org.apache.struts.action.ActionForm;\r\nimport org.apache.struts.action.ActionForward;\r\nimport org.apache.struts.action.ActionMapping;\r\nimport org.apache.struts.action.ActionMessage;\r\nimport org.apache.struts.action.ActionMessages;\r\nimport org.apache.struts.action.DynaActionForm;\r\nimport org.apache.struts.actions.DispatchAction;\r\n\r\npublic class DetailzieleAction extends DispatchAction {\r\n\r\n    private Log logger = LogFactory.getLog(this.getClass());\r\n\r\n    private DetailzieleService service;\r\n\r\n    private StrategischeZieleService szService;\r\n\r\n    private CommonService commonService;\r\n\r\n    public DetailzieleAction(DetailzieleService service, StrategischeZieleService szService, CommonService commonService, CustomizingService customizingService) {\r\n        super();\r\n        this.service = service;\r\n        this.szService = szService;\r\n        this.commonService = commonService;\r\n        service.init(commonService, customizingService, szService);\r\n    }\r\n\r\n    public ActionForward list(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {\r\n        service.populate(request);\r\n        return mapping.findForward(Constants.LIST);\r\n    }\r\n\r\n    public ActionForward prepare(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {\r\n        if (!populate(request)) {\r\n            ActionMessages errors = new ActionMessages();\r\n            errors.add(ActionMessages.GLOBAL_MESSAGE, new ActionMessage(\"errors.strategische.ziele.not.set\"));\r\n            saveMessages(request, errors);\r\n            return mapping.findForward(Constants.FAILURE);\r\n        }\r\n        return mapping.findForward(Constants.FORM);\r\n    }\r\n\r\n    public ActionForward edit(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {\r\n        DynaActionForm dzForm = (DynaActionForm) form;\r\n        service.edit(request, dzForm);\r\n        return mapping.findForward(Constants.FORM);\r\n    }\r\n\r\n    public ActionForward update(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {\r\n        DynaActionForm dzForm = (DynaActionForm) form;\r\n        service.update(request, dzForm);\r\n        service.populate(request);\r\n        return mapping.findForward(Constants.LIST);\r\n    }\r\n\r\n    public ActionForward deletequestion(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {\r\n        DynaActionForm dzForm = (DynaActionForm) form;\r\n        Detailziel dz = service.getDetailziel(request, dzForm);\r\n        if (dz == null) {\r\n            service.populate(request);\r\n            return mapping.findForward(Constants.LIST);\r\n        }\r\n        ActionMessages messages = new ActionMessages();\r\n        service.deleteQuestion(request, dz, messages);\r\n        saveMessages(request, messages);\r\n        return mapping.findForward(Constants.QUESTION);\r\n    }\r\n\r\n    public ActionForward delete(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {\r\n        DynaActionForm dzForm = (DynaActionForm) form;\r\n        Detailziel dz = service.getDetailziel(request, dzForm);\r\n        if (dz == null) {\r\n            service.populate(request);\r\n            return mapping.findForward(Constants.LIST);\r\n        }\r\n        // Lï¿½schen\r\n        service.delete(request, dz);\r\n        service.populate(request);\r\n        return mapping.findForward(Constants.LIST);\r\n    }\r\n\r\n    public ActionForward remove(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {\r\n        //Formulardaten holen\r\n        DynaActionForm dzForm = (DynaActionForm) form;\r\n        Integer detailzielId = (Integer) dzForm.get(Constants.DETAILZIEL_ID);\r\n        Integer paId = (Integer) dzForm.get(Constants.PROJEKTATTRAKTIVITAET_ID);\r\n        Boolean quantifizierbar = (Boolean) dzForm.get(Constants.QUANTIFIZIERBAR);\r\n        logger.debug(\"detailzielId=\" + detailzielId);\r\n        logger.debug(\"paId=\" + paId);\r\n        logger.debug(\"quantifizierbar=\" + quantifizierbar);\r\n        Integer mandantId = (Integer) request.getSession().getAttribute(Constants.MANDANT_ID);\r\n        Detailziel dz = new Detailziel();\r\n        dz.setProjektattraktivitaetId(paId);\r\n        dz.setQuantifizierbar(quantifizierbar);\r\n        dz.setMandantId(mandantId);\r\n        List<Detailziel> dzs = service.getAssignments(dz);\r\n        logger.debug(dzs.size() + \" Detailziele in der Liste\");\r\n        // Zuweisung lï¿½schen\r\n        for (Detailziel d : dzs) {\r\n            if (d.getDetailzielId().equals(detailzielId)) {\r\n                logger.debug(\"Zuweisung detailzielId=\" + detailzielId + \", projektattraktivitaetId=\" + d.getProjektattraktivitaetId() + \" wird gelï¿½scht.\");\r\n                service.deleteAssignment(d);\r\n                break;\r\n            }\r\n        }\r\n        populate(request);\r\n        return mapping.findForward(Constants.FORM);\r\n    }\r\n\r\n    public ActionForward set(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {\r\n        // Formulardaten holen\r\n        DynaActionForm dzForm = (DynaActionForm) form;\r\n        Integer detailzielId = (Integer) dzForm.get(Constants.DETAILZIEL_ID);\r\n        if (detailzielId == null) {\r\n            populate(request);\r\n            return mapping.findForward(Constants.FORM);\r\n        }\r\n        // Detailziel zuweisen\r\n        logger.debug(\"Detailziel zuweisen: \" + detailzielId);\r\n        Detailziel dz = new Detailziel();\r\n        dz.setDetailzielId(detailzielId);\r\n        dz.setProjektattraktivitaetId(getProjektattraktivitaetId(request));\r\n        service.insertAssignment(dz);\r\n        // Formular abfï¿½llen und anzeigen\r\n        populate(request);\r\n        return mapping.findForward(Constants.FORM);\r\n    }\r\n\r\n    public ActionForward next(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {\r\n        // Nï¿½chste Action?\r\n        String last = request.getParameter(Constants.LAST_STEP);\r\n        if (last != null && last.equals(\"true\"))\r\n            return mapping.findForward(Constants.NEXT);\r\n        populate(request);\r\n        return mapping.findForward(Constants.FORM);\r\n    }\r\n\r\n    public ActionForward add(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {\r\n        DynaActionForm dzForm = (DynaActionForm) form;\r\n        ActionMessages errors = new ActionMessages();\r\n        ActionMessages messages = new ActionMessages();\r\n        if (!service.add(request, dzForm, errors, messages)) {\r\n            saveErrors(request, errors);\r\n            saveMessages(request, messages);\r\n        }\r\n        populate(request);\r\n        return mapping.findForward(Constants.FORM);\r\n    }\r\n\r\n    private boolean populate(HttpServletRequest request) {\r\n        Integer customizingId = (Integer) request.getSession().getAttribute(Constants.CUSTOMIZING_ID);\r\n        Integer projektattraktivitaetId = getProjektattraktivitaetId(request);\r\n        Integer mandantId = (Integer) request.getSession().getAttribute(Constants.MANDANT_ID);\r\n        // Strategische Ziele holen\r\n        StrategischesZiel sz = new StrategischesZiel();\r\n        sz.setCustomizingId(customizingId);\r\n        sz.setMandantId(mandantId);\r\n        List<StrategischesZiel> szs = szService.getAssignments(sz);\r\n        Integer szId = null;\r\n        Integer step = null;\r\n        if (szs.size() == 0) {\r\n            return false;\r\n        }\r\n        // 1 Schritt pro Strategisches Ziel. Parameter ï¿½berprï¿½fen.\r\n        String stepStr = request.getParameter(Constants.STEP);\r\n        String next = request.getParameter(Constants.NEXT);\r\n        logger.debug(\"Angegebener step: \" + stepStr);\r\n        try {\r\n            step = new Integer(stepStr);\r\n        } catch (NumberFormatException nfex) {\r\n            step = 1;\r\n        }\r\n        // Denselben Schritt wiederholen, wenn nicht \"weiter\" geklickt wurde\r\n        if (next == null && step > 1)\r\n            --step;\r\n        // Strategische Ziele in Array stellen\r\n        Integer[] szIdArr = new Integer[szs.size()];\r\n        String[] szNameArr = new String[szs.size()];\r\n        int i = 0;\r\n        for (StrategischesZiel sZiel : szs) {\r\n            szIdArr[i] = sZiel.getStrategischesZielId();\r\n            szNameArr[i++] = sZiel.getName();\r\n            logger.debug(\"Strategisches Ziel: id=\" + szIdArr[i - 1] + \", name=\" + szNameArr[i - 1]);\r\n        }\r\n        // Auf inkorrekten step Parameter prï¿½fen\r\n        if ((step - 1) >= szIdArr.length) {\r\n            logger.warn(\"Nicht verfï¿½gbarer Schritt ausgewï¿½hlt!\");\r\n            step = 1;\r\n        }\r\n        // Auf letzten Schritt prï¿½fen\r\n        if (step == szIdArr.length) {\r\n            request.setAttribute(Constants.LAST_STEP, true);\r\n        }\r\n        // Id des Strategischen Ziels anhand des step Parameters holen\r\n        szId = szIdArr[step - 1];\r\n        logger.debug(\"Gewï¿½hltes Strategisches Ziel: \" + szId);\r\n        request.setAttribute(Constants.STRATEGISCHES_ZIEL_ID, szId);\r\n        request.setAttribute(Constants.STRATEGISCHES_ZIEL_NAME, szNameArr[step - 1]);\r\n        request.setAttribute(Constants.STEP, step + 1);\r\n        // Detailziele fï¿½r quantifizierbaren Nutzen holen\r\n        // Alle Detailziele zum gewï¿½hlten Strategischen Ziel holen\r\n        Detailziel dz = new Detailziel();\r\n        dz.setProjektattraktivitaetId(projektattraktivitaetId);\r\n        dz.setStrategischesZielId(szId);\r\n        dz.setQuantifizierbar(true);\r\n        dz.setMandantId(mandantId);\r\n        // Detailziele aussortieren, die einem anderen Customizing zugeordnet sind\r\n        List<Detailziel> dzs = service.getByStrategischesZiel(dz);\r\n        HashMap<Integer, Detailziel> map = new HashMap<Integer, Detailziel>();\r\n        for (Detailziel d : dzs) {\r\n            Integer id = d.getDetailzielId();\r\n            boolean contains = map.containsKey(id);\r\n            Integer dPaId = d.getProjektattraktivitaetId();\r\n            // HashMap abfï¿½llen um allfï¿½llige doppelte Detailziele auszusortieren\r\n            // (ist der Fall bei Zuweisungen zu anderen Customizings)\r\n            if (!contains || dPaId != null && contains && dPaId.equals(projektattraktivitaetId))\r\n                map.put(id, d);\r\n        }\r\n        request.setAttribute(Constants.DETAILZIELE_Q, map.values());\r\n        request.setAttribute(Constants.PROJEKTATTRAKTIVITAET_ID, projektattraktivitaetId);\r\n        List<Detailziel> dzsA = service.getAssignments(dz);\r\n        request.setAttribute(Constants.DETAILZIELE_ASSIGNED_Q, dzsA);\r\n        // Detailziele fï¿½r nicht quantifizierbaren Nutzen holen\r\n        // Alle Detailziele zum gewï¿½hlten Strategischen Ziel holen\r\n        dz.setQuantifizierbar(false);\r\n        // Detailziele aussortieren, die einem anderen Customizing zugeordnet sind\r\n        dzs = service.getByStrategischesZiel(dz);\r\n        map = new HashMap<Integer, Detailziel>();\r\n        for (Detailziel d : dzs) {\r\n            Integer id = d.getDetailzielId();\r\n            boolean contains = map.containsKey(id);\r\n            Integer dPaId = d.getProjektattraktivitaetId();\r\n            // HashMap abfï¿½llen um allfï¿½llige doppelte Detailziele auszusortieren\r\n            // (ist der Fall bei Zuweisungen zu anderen Customizings)\r\n            if (!contains || dPaId != null && contains && dPaId.equals(projektattraktivitaetId))\r\n                map.put(id, d);\r\n        }\r\n        request.setAttribute(Constants.DETAILZIELE_NQ, map.values());\r\n        dzsA = service.getAssignments(dz);\r\n        request.setAttribute(Constants.DETAILZIELE_ASSIGNED_NQ, dzsA);\r\n        service.setStatus(request, szs, mandantId, projektattraktivitaetId);\r\n        return true;\r\n    }\r\n\r\n    private Integer getProjektattraktivitaetId(HttpServletRequest request) {\r\n        // Projektattraktivitï¿½t holen\r\n        Integer customizingId = (Integer) request.getSession().getAttribute(Constants.CUSTOMIZING_ID);\r\n        return commonService.getProjektattraktivitaetIdByCustomizingId(customizingId);\r\n    }\r\n}\r\n",
		"id": "EvoSuiteBenchmark/46_nutzenportfolio/src/main/java/ch/bfh/egov/nutzenportfolio/action/DetailzieleActionTest2.java",
		"test_prompt": "// DetailzieleActionTest2.java\npackage ch.bfh.egov.nutzenportfolio.action;\n\nimport java.util.HashMap;\nimport java.util.List;\nimport javax.servlet.http.HttpServletRequest;\nimport javax.servlet.http.HttpServletResponse;\nimport ch.bfh.egov.nutzenportfolio.Constants;\nimport ch.bfh.egov.nutzenportfolio.service.common.CommonService;\nimport ch.bfh.egov.nutzenportfolio.service.customizing.CustomizingService;\nimport ch.bfh.egov.nutzenportfolio.service.detailziele.DetailzieleService;\nimport ch.bfh.egov.nutzenportfolio.service.strategischeziele.StrategischeZieleService;\nimport ch.bfh.egov.nutzenportfolio.tos.Detailziel;\nimport ch.bfh.egov.nutzenportfolio.tos.StrategischesZiel;\nimport org.apache.commons.logging.Log;\nimport org.apache.commons.logging.LogFactory;\nimport org.apache.struts.action.ActionForm;\nimport org.apache.struts.action.ActionForward;\nimport org.apache.struts.action.ActionMapping;\nimport org.apache.struts.action.ActionMessage;\nimport org.apache.struts.action.ActionMessages;\nimport org.apache.struts.action.DynaActionForm;\nimport org.apache.struts.actions.DispatchAction;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link DetailzieleAction}.\n* It contains ten unit test cases for the {@link DetailzieleAction#edit(ActionMapping, ActionForm, HttpServletRequest, HttpServletResponse)} method.\n*/\nclass DetailzieleActionTest2 {"
	},
	{
		"original_code": "// DetailzieleAction.java\n/**\r\n * Nutzenportfolio\r\n * Copyright (C) 2006 Kompetenzzentrum E-Business, Simon Bergamin\r\n *\r\n * This program is free software; you can redistribute it and/or\r\n * modify it under the terms of the GNU General Public License\r\n * as published by the Free Software Foundation; either version 2\r\n * of the License, or (at your option) any later version.\r\n *\r\n * This program is distributed in the hope that it will be useful,\r\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n * GNU General Public License for more details.\r\n *\r\n * You should have received a copy of the GNU General Public License\r\n * along with this program; if not, write to the Free Software\r\n * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\r\n */\r\npackage ch.bfh.egov.nutzenportfolio.action;\r\n\r\nimport java.util.HashMap;\r\nimport java.util.List;\r\nimport javax.servlet.http.HttpServletRequest;\r\nimport javax.servlet.http.HttpServletResponse;\r\nimport ch.bfh.egov.nutzenportfolio.Constants;\r\nimport ch.bfh.egov.nutzenportfolio.service.common.CommonService;\r\nimport ch.bfh.egov.nutzenportfolio.service.customizing.CustomizingService;\r\nimport ch.bfh.egov.nutzenportfolio.service.detailziele.DetailzieleService;\r\nimport ch.bfh.egov.nutzenportfolio.service.strategischeziele.StrategischeZieleService;\r\nimport ch.bfh.egov.nutzenportfolio.tos.Detailziel;\r\nimport ch.bfh.egov.nutzenportfolio.tos.StrategischesZiel;\r\nimport org.apache.commons.logging.Log;\r\nimport org.apache.commons.logging.LogFactory;\r\nimport org.apache.struts.action.ActionForm;\r\nimport org.apache.struts.action.ActionForward;\r\nimport org.apache.struts.action.ActionMapping;\r\nimport org.apache.struts.action.ActionMessage;\r\nimport org.apache.struts.action.ActionMessages;\r\nimport org.apache.struts.action.DynaActionForm;\r\nimport org.apache.struts.actions.DispatchAction;\r\n\r\npublic class DetailzieleAction extends DispatchAction {\r\n\r\n    private Log logger = LogFactory.getLog(this.getClass());\r\n\r\n    private DetailzieleService service;\r\n\r\n    private StrategischeZieleService szService;\r\n\r\n    private CommonService commonService;\r\n\r\n    public DetailzieleAction(DetailzieleService service, StrategischeZieleService szService, CommonService commonService, CustomizingService customizingService) {\r\n        super();\r\n        this.service = service;\r\n        this.szService = szService;\r\n        this.commonService = commonService;\r\n        service.init(commonService, customizingService, szService);\r\n    }\r\n\r\n    public ActionForward list(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {\r\n        service.populate(request);\r\n        return mapping.findForward(Constants.LIST);\r\n    }\r\n\r\n    public ActionForward prepare(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {\r\n        if (!populate(request)) {\r\n            ActionMessages errors = new ActionMessages();\r\n            errors.add(ActionMessages.GLOBAL_MESSAGE, new ActionMessage(\"errors.strategische.ziele.not.set\"));\r\n            saveMessages(request, errors);\r\n            return mapping.findForward(Constants.FAILURE);\r\n        }\r\n        return mapping.findForward(Constants.FORM);\r\n    }\r\n\r\n    public ActionForward edit(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {\r\n        DynaActionForm dzForm = (DynaActionForm) form;\r\n        service.edit(request, dzForm);\r\n        return mapping.findForward(Constants.FORM);\r\n    }\r\n\r\n    public ActionForward update(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {\r\n        DynaActionForm dzForm = (DynaActionForm) form;\r\n        service.update(request, dzForm);\r\n        service.populate(request);\r\n        return mapping.findForward(Constants.LIST);\r\n    }\r\n\r\n    public ActionForward deletequestion(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {\r\n        DynaActionForm dzForm = (DynaActionForm) form;\r\n        Detailziel dz = service.getDetailziel(request, dzForm);\r\n        if (dz == null) {\r\n            service.populate(request);\r\n            return mapping.findForward(Constants.LIST);\r\n        }\r\n        ActionMessages messages = new ActionMessages();\r\n        service.deleteQuestion(request, dz, messages);\r\n        saveMessages(request, messages);\r\n        return mapping.findForward(Constants.QUESTION);\r\n    }\r\n\r\n    public ActionForward delete(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {\r\n        DynaActionForm dzForm = (DynaActionForm) form;\r\n        Detailziel dz = service.getDetailziel(request, dzForm);\r\n        if (dz == null) {\r\n            service.populate(request);\r\n            return mapping.findForward(Constants.LIST);\r\n        }\r\n        // Lï¿½schen\r\n        service.delete(request, dz);\r\n        service.populate(request);\r\n        return mapping.findForward(Constants.LIST);\r\n    }\r\n\r\n    public ActionForward remove(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {\r\n        //Formulardaten holen\r\n        DynaActionForm dzForm = (DynaActionForm) form;\r\n        Integer detailzielId = (Integer) dzForm.get(Constants.DETAILZIEL_ID);\r\n        Integer paId = (Integer) dzForm.get(Constants.PROJEKTATTRAKTIVITAET_ID);\r\n        Boolean quantifizierbar = (Boolean) dzForm.get(Constants.QUANTIFIZIERBAR);\r\n        logger.debug(\"detailzielId=\" + detailzielId);\r\n        logger.debug(\"paId=\" + paId);\r\n        logger.debug(\"quantifizierbar=\" + quantifizierbar);\r\n        Integer mandantId = (Integer) request.getSession().getAttribute(Constants.MANDANT_ID);\r\n        Detailziel dz = new Detailziel();\r\n        dz.setProjektattraktivitaetId(paId);\r\n        dz.setQuantifizierbar(quantifizierbar);\r\n        dz.setMandantId(mandantId);\r\n        List<Detailziel> dzs = service.getAssignments(dz);\r\n        logger.debug(dzs.size() + \" Detailziele in der Liste\");\r\n        // Zuweisung lï¿½schen\r\n        for (Detailziel d : dzs) {\r\n            if (d.getDetailzielId().equals(detailzielId)) {\r\n                logger.debug(\"Zuweisung detailzielId=\" + detailzielId + \", projektattraktivitaetId=\" + d.getProjektattraktivitaetId() + \" wird gelï¿½scht.\");\r\n                service.deleteAssignment(d);\r\n                break;\r\n            }\r\n        }\r\n        populate(request);\r\n        return mapping.findForward(Constants.FORM);\r\n    }\r\n\r\n    public ActionForward set(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {\r\n        // Formulardaten holen\r\n        DynaActionForm dzForm = (DynaActionForm) form;\r\n        Integer detailzielId = (Integer) dzForm.get(Constants.DETAILZIEL_ID);\r\n        if (detailzielId == null) {\r\n            populate(request);\r\n            return mapping.findForward(Constants.FORM);\r\n        }\r\n        // Detailziel zuweisen\r\n        logger.debug(\"Detailziel zuweisen: \" + detailzielId);\r\n        Detailziel dz = new Detailziel();\r\n        dz.setDetailzielId(detailzielId);\r\n        dz.setProjektattraktivitaetId(getProjektattraktivitaetId(request));\r\n        service.insertAssignment(dz);\r\n        // Formular abfï¿½llen und anzeigen\r\n        populate(request);\r\n        return mapping.findForward(Constants.FORM);\r\n    }\r\n\r\n    public ActionForward next(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {\r\n        // Nï¿½chste Action?\r\n        String last = request.getParameter(Constants.LAST_STEP);\r\n        if (last != null && last.equals(\"true\"))\r\n            return mapping.findForward(Constants.NEXT);\r\n        populate(request);\r\n        return mapping.findForward(Constants.FORM);\r\n    }\r\n\r\n    public ActionForward add(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {\r\n        DynaActionForm dzForm = (DynaActionForm) form;\r\n        ActionMessages errors = new ActionMessages();\r\n        ActionMessages messages = new ActionMessages();\r\n        if (!service.add(request, dzForm, errors, messages)) {\r\n            saveErrors(request, errors);\r\n            saveMessages(request, messages);\r\n        }\r\n        populate(request);\r\n        return mapping.findForward(Constants.FORM);\r\n    }\r\n\r\n    private boolean populate(HttpServletRequest request) {\r\n        Integer customizingId = (Integer) request.getSession().getAttribute(Constants.CUSTOMIZING_ID);\r\n        Integer projektattraktivitaetId = getProjektattraktivitaetId(request);\r\n        Integer mandantId = (Integer) request.getSession().getAttribute(Constants.MANDANT_ID);\r\n        // Strategische Ziele holen\r\n        StrategischesZiel sz = new StrategischesZiel();\r\n        sz.setCustomizingId(customizingId);\r\n        sz.setMandantId(mandantId);\r\n        List<StrategischesZiel> szs = szService.getAssignments(sz);\r\n        Integer szId = null;\r\n        Integer step = null;\r\n        if (szs.size() == 0) {\r\n            return false;\r\n        }\r\n        // 1 Schritt pro Strategisches Ziel. Parameter ï¿½berprï¿½fen.\r\n        String stepStr = request.getParameter(Constants.STEP);\r\n        String next = request.getParameter(Constants.NEXT);\r\n        logger.debug(\"Angegebener step: \" + stepStr);\r\n        try {\r\n            step = new Integer(stepStr);\r\n        } catch (NumberFormatException nfex) {\r\n            step = 1;\r\n        }\r\n        // Denselben Schritt wiederholen, wenn nicht \"weiter\" geklickt wurde\r\n        if (next == null && step > 1)\r\n            --step;\r\n        // Strategische Ziele in Array stellen\r\n        Integer[] szIdArr = new Integer[szs.size()];\r\n        String[] szNameArr = new String[szs.size()];\r\n        int i = 0;\r\n        for (StrategischesZiel sZiel : szs) {\r\n            szIdArr[i] = sZiel.getStrategischesZielId();\r\n            szNameArr[i++] = sZiel.getName();\r\n            logger.debug(\"Strategisches Ziel: id=\" + szIdArr[i - 1] + \", name=\" + szNameArr[i - 1]);\r\n        }\r\n        // Auf inkorrekten step Parameter prï¿½fen\r\n        if ((step - 1) >= szIdArr.length) {\r\n            logger.warn(\"Nicht verfï¿½gbarer Schritt ausgewï¿½hlt!\");\r\n            step = 1;\r\n        }\r\n        // Auf letzten Schritt prï¿½fen\r\n        if (step == szIdArr.length) {\r\n            request.setAttribute(Constants.LAST_STEP, true);\r\n        }\r\n        // Id des Strategischen Ziels anhand des step Parameters holen\r\n        szId = szIdArr[step - 1];\r\n        logger.debug(\"Gewï¿½hltes Strategisches Ziel: \" + szId);\r\n        request.setAttribute(Constants.STRATEGISCHES_ZIEL_ID, szId);\r\n        request.setAttribute(Constants.STRATEGISCHES_ZIEL_NAME, szNameArr[step - 1]);\r\n        request.setAttribute(Constants.STEP, step + 1);\r\n        // Detailziele fï¿½r quantifizierbaren Nutzen holen\r\n        // Alle Detailziele zum gewï¿½hlten Strategischen Ziel holen\r\n        Detailziel dz = new Detailziel();\r\n        dz.setProjektattraktivitaetId(projektattraktivitaetId);\r\n        dz.setStrategischesZielId(szId);\r\n        dz.setQuantifizierbar(true);\r\n        dz.setMandantId(mandantId);\r\n        // Detailziele aussortieren, die einem anderen Customizing zugeordnet sind\r\n        List<Detailziel> dzs = service.getByStrategischesZiel(dz);\r\n        HashMap<Integer, Detailziel> map = new HashMap<Integer, Detailziel>();\r\n        for (Detailziel d : dzs) {\r\n            Integer id = d.getDetailzielId();\r\n            boolean contains = map.containsKey(id);\r\n            Integer dPaId = d.getProjektattraktivitaetId();\r\n            // HashMap abfï¿½llen um allfï¿½llige doppelte Detailziele auszusortieren\r\n            // (ist der Fall bei Zuweisungen zu anderen Customizings)\r\n            if (!contains || dPaId != null && contains && dPaId.equals(projektattraktivitaetId))\r\n                map.put(id, d);\r\n        }\r\n        request.setAttribute(Constants.DETAILZIELE_Q, map.values());\r\n        request.setAttribute(Constants.PROJEKTATTRAKTIVITAET_ID, projektattraktivitaetId);\r\n        List<Detailziel> dzsA = service.getAssignments(dz);\r\n        request.setAttribute(Constants.DETAILZIELE_ASSIGNED_Q, dzsA);\r\n        // Detailziele fï¿½r nicht quantifizierbaren Nutzen holen\r\n        // Alle Detailziele zum gewï¿½hlten Strategischen Ziel holen\r\n        dz.setQuantifizierbar(false);\r\n        // Detailziele aussortieren, die einem anderen Customizing zugeordnet sind\r\n        dzs = service.getByStrategischesZiel(dz);\r\n        map = new HashMap<Integer, Detailziel>();\r\n        for (Detailziel d : dzs) {\r\n            Integer id = d.getDetailzielId();\r\n            boolean contains = map.containsKey(id);\r\n            Integer dPaId = d.getProjektattraktivitaetId();\r\n            // HashMap abfï¿½llen um allfï¿½llige doppelte Detailziele auszusortieren\r\n            // (ist der Fall bei Zuweisungen zu anderen Customizings)\r\n            if (!contains || dPaId != null && contains && dPaId.equals(projektattraktivitaetId))\r\n                map.put(id, d);\r\n        }\r\n        request.setAttribute(Constants.DETAILZIELE_NQ, map.values());\r\n        dzsA = service.getAssignments(dz);\r\n        request.setAttribute(Constants.DETAILZIELE_ASSIGNED_NQ, dzsA);\r\n        service.setStatus(request, szs, mandantId, projektattraktivitaetId);\r\n        return true;\r\n    }\r\n\r\n    private Integer getProjektattraktivitaetId(HttpServletRequest request) {\r\n        // Projektattraktivitï¿½t holen\r\n        Integer customizingId = (Integer) request.getSession().getAttribute(Constants.CUSTOMIZING_ID);\r\n        return commonService.getProjektattraktivitaetIdByCustomizingId(customizingId);\r\n    }\r\n}\r\n",
		"id": "EvoSuiteBenchmark/46_nutzenportfolio/src/main/java/ch/bfh/egov/nutzenportfolio/action/DetailzieleActionTest3.java",
		"test_prompt": "// DetailzieleActionTest3.java\npackage ch.bfh.egov.nutzenportfolio.action;\n\nimport java.util.HashMap;\nimport java.util.List;\nimport javax.servlet.http.HttpServletRequest;\nimport javax.servlet.http.HttpServletResponse;\nimport ch.bfh.egov.nutzenportfolio.Constants;\nimport ch.bfh.egov.nutzenportfolio.service.common.CommonService;\nimport ch.bfh.egov.nutzenportfolio.service.customizing.CustomizingService;\nimport ch.bfh.egov.nutzenportfolio.service.detailziele.DetailzieleService;\nimport ch.bfh.egov.nutzenportfolio.service.strategischeziele.StrategischeZieleService;\nimport ch.bfh.egov.nutzenportfolio.tos.Detailziel;\nimport ch.bfh.egov.nutzenportfolio.tos.StrategischesZiel;\nimport org.apache.commons.logging.Log;\nimport org.apache.commons.logging.LogFactory;\nimport org.apache.struts.action.ActionForm;\nimport org.apache.struts.action.ActionForward;\nimport org.apache.struts.action.ActionMapping;\nimport org.apache.struts.action.ActionMessage;\nimport org.apache.struts.action.ActionMessages;\nimport org.apache.struts.action.DynaActionForm;\nimport org.apache.struts.actions.DispatchAction;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link DetailzieleAction}.\n* It contains ten unit test cases for the {@link DetailzieleAction#update(ActionMapping, ActionForm, HttpServletRequest, HttpServletResponse)} method.\n*/\nclass DetailzieleActionTest3 {"
	},
	{
		"original_code": "// DetailzieleAction.java\n/**\r\n * Nutzenportfolio\r\n * Copyright (C) 2006 Kompetenzzentrum E-Business, Simon Bergamin\r\n *\r\n * This program is free software; you can redistribute it and/or\r\n * modify it under the terms of the GNU General Public License\r\n * as published by the Free Software Foundation; either version 2\r\n * of the License, or (at your option) any later version.\r\n *\r\n * This program is distributed in the hope that it will be useful,\r\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n * GNU General Public License for more details.\r\n *\r\n * You should have received a copy of the GNU General Public License\r\n * along with this program; if not, write to the Free Software\r\n * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\r\n */\r\npackage ch.bfh.egov.nutzenportfolio.action;\r\n\r\nimport java.util.HashMap;\r\nimport java.util.List;\r\nimport javax.servlet.http.HttpServletRequest;\r\nimport javax.servlet.http.HttpServletResponse;\r\nimport ch.bfh.egov.nutzenportfolio.Constants;\r\nimport ch.bfh.egov.nutzenportfolio.service.common.CommonService;\r\nimport ch.bfh.egov.nutzenportfolio.service.customizing.CustomizingService;\r\nimport ch.bfh.egov.nutzenportfolio.service.detailziele.DetailzieleService;\r\nimport ch.bfh.egov.nutzenportfolio.service.strategischeziele.StrategischeZieleService;\r\nimport ch.bfh.egov.nutzenportfolio.tos.Detailziel;\r\nimport ch.bfh.egov.nutzenportfolio.tos.StrategischesZiel;\r\nimport org.apache.commons.logging.Log;\r\nimport org.apache.commons.logging.LogFactory;\r\nimport org.apache.struts.action.ActionForm;\r\nimport org.apache.struts.action.ActionForward;\r\nimport org.apache.struts.action.ActionMapping;\r\nimport org.apache.struts.action.ActionMessage;\r\nimport org.apache.struts.action.ActionMessages;\r\nimport org.apache.struts.action.DynaActionForm;\r\nimport org.apache.struts.actions.DispatchAction;\r\n\r\npublic class DetailzieleAction extends DispatchAction {\r\n\r\n    private Log logger = LogFactory.getLog(this.getClass());\r\n\r\n    private DetailzieleService service;\r\n\r\n    private StrategischeZieleService szService;\r\n\r\n    private CommonService commonService;\r\n\r\n    public DetailzieleAction(DetailzieleService service, StrategischeZieleService szService, CommonService commonService, CustomizingService customizingService) {\r\n        super();\r\n        this.service = service;\r\n        this.szService = szService;\r\n        this.commonService = commonService;\r\n        service.init(commonService, customizingService, szService);\r\n    }\r\n\r\n    public ActionForward list(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {\r\n        service.populate(request);\r\n        return mapping.findForward(Constants.LIST);\r\n    }\r\n\r\n    public ActionForward prepare(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {\r\n        if (!populate(request)) {\r\n            ActionMessages errors = new ActionMessages();\r\n            errors.add(ActionMessages.GLOBAL_MESSAGE, new ActionMessage(\"errors.strategische.ziele.not.set\"));\r\n            saveMessages(request, errors);\r\n            return mapping.findForward(Constants.FAILURE);\r\n        }\r\n        return mapping.findForward(Constants.FORM);\r\n    }\r\n\r\n    public ActionForward edit(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {\r\n        DynaActionForm dzForm = (DynaActionForm) form;\r\n        service.edit(request, dzForm);\r\n        return mapping.findForward(Constants.FORM);\r\n    }\r\n\r\n    public ActionForward update(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {\r\n        DynaActionForm dzForm = (DynaActionForm) form;\r\n        service.update(request, dzForm);\r\n        service.populate(request);\r\n        return mapping.findForward(Constants.LIST);\r\n    }\r\n\r\n    public ActionForward deletequestion(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {\r\n        DynaActionForm dzForm = (DynaActionForm) form;\r\n        Detailziel dz = service.getDetailziel(request, dzForm);\r\n        if (dz == null) {\r\n            service.populate(request);\r\n            return mapping.findForward(Constants.LIST);\r\n        }\r\n        ActionMessages messages = new ActionMessages();\r\n        service.deleteQuestion(request, dz, messages);\r\n        saveMessages(request, messages);\r\n        return mapping.findForward(Constants.QUESTION);\r\n    }\r\n\r\n    public ActionForward delete(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {\r\n        DynaActionForm dzForm = (DynaActionForm) form;\r\n        Detailziel dz = service.getDetailziel(request, dzForm);\r\n        if (dz == null) {\r\n            service.populate(request);\r\n            return mapping.findForward(Constants.LIST);\r\n        }\r\n        // Lï¿½schen\r\n        service.delete(request, dz);\r\n        service.populate(request);\r\n        return mapping.findForward(Constants.LIST);\r\n    }\r\n\r\n    public ActionForward remove(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {\r\n        //Formulardaten holen\r\n        DynaActionForm dzForm = (DynaActionForm) form;\r\n        Integer detailzielId = (Integer) dzForm.get(Constants.DETAILZIEL_ID);\r\n        Integer paId = (Integer) dzForm.get(Constants.PROJEKTATTRAKTIVITAET_ID);\r\n        Boolean quantifizierbar = (Boolean) dzForm.get(Constants.QUANTIFIZIERBAR);\r\n        logger.debug(\"detailzielId=\" + detailzielId);\r\n        logger.debug(\"paId=\" + paId);\r\n        logger.debug(\"quantifizierbar=\" + quantifizierbar);\r\n        Integer mandantId = (Integer) request.getSession().getAttribute(Constants.MANDANT_ID);\r\n        Detailziel dz = new Detailziel();\r\n        dz.setProjektattraktivitaetId(paId);\r\n        dz.setQuantifizierbar(quantifizierbar);\r\n        dz.setMandantId(mandantId);\r\n        List<Detailziel> dzs = service.getAssignments(dz);\r\n        logger.debug(dzs.size() + \" Detailziele in der Liste\");\r\n        // Zuweisung lï¿½schen\r\n        for (Detailziel d : dzs) {\r\n            if (d.getDetailzielId().equals(detailzielId)) {\r\n                logger.debug(\"Zuweisung detailzielId=\" + detailzielId + \", projektattraktivitaetId=\" + d.getProjektattraktivitaetId() + \" wird gelï¿½scht.\");\r\n                service.deleteAssignment(d);\r\n                break;\r\n            }\r\n        }\r\n        populate(request);\r\n        return mapping.findForward(Constants.FORM);\r\n    }\r\n\r\n    public ActionForward set(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {\r\n        // Formulardaten holen\r\n        DynaActionForm dzForm = (DynaActionForm) form;\r\n        Integer detailzielId = (Integer) dzForm.get(Constants.DETAILZIEL_ID);\r\n        if (detailzielId == null) {\r\n            populate(request);\r\n            return mapping.findForward(Constants.FORM);\r\n        }\r\n        // Detailziel zuweisen\r\n        logger.debug(\"Detailziel zuweisen: \" + detailzielId);\r\n        Detailziel dz = new Detailziel();\r\n        dz.setDetailzielId(detailzielId);\r\n        dz.setProjektattraktivitaetId(getProjektattraktivitaetId(request));\r\n        service.insertAssignment(dz);\r\n        // Formular abfï¿½llen und anzeigen\r\n        populate(request);\r\n        return mapping.findForward(Constants.FORM);\r\n    }\r\n\r\n    public ActionForward next(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {\r\n        // Nï¿½chste Action?\r\n        String last = request.getParameter(Constants.LAST_STEP);\r\n        if (last != null && last.equals(\"true\"))\r\n            return mapping.findForward(Constants.NEXT);\r\n        populate(request);\r\n        return mapping.findForward(Constants.FORM);\r\n    }\r\n\r\n    public ActionForward add(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {\r\n        DynaActionForm dzForm = (DynaActionForm) form;\r\n        ActionMessages errors = new ActionMessages();\r\n        ActionMessages messages = new ActionMessages();\r\n        if (!service.add(request, dzForm, errors, messages)) {\r\n            saveErrors(request, errors);\r\n            saveMessages(request, messages);\r\n        }\r\n        populate(request);\r\n        return mapping.findForward(Constants.FORM);\r\n    }\r\n\r\n    private boolean populate(HttpServletRequest request) {\r\n        Integer customizingId = (Integer) request.getSession().getAttribute(Constants.CUSTOMIZING_ID);\r\n        Integer projektattraktivitaetId = getProjektattraktivitaetId(request);\r\n        Integer mandantId = (Integer) request.getSession().getAttribute(Constants.MANDANT_ID);\r\n        // Strategische Ziele holen\r\n        StrategischesZiel sz = new StrategischesZiel();\r\n        sz.setCustomizingId(customizingId);\r\n        sz.setMandantId(mandantId);\r\n        List<StrategischesZiel> szs = szService.getAssignments(sz);\r\n        Integer szId = null;\r\n        Integer step = null;\r\n        if (szs.size() == 0) {\r\n            return false;\r\n        }\r\n        // 1 Schritt pro Strategisches Ziel. Parameter ï¿½berprï¿½fen.\r\n        String stepStr = request.getParameter(Constants.STEP);\r\n        String next = request.getParameter(Constants.NEXT);\r\n        logger.debug(\"Angegebener step: \" + stepStr);\r\n        try {\r\n            step = new Integer(stepStr);\r\n        } catch (NumberFormatException nfex) {\r\n            step = 1;\r\n        }\r\n        // Denselben Schritt wiederholen, wenn nicht \"weiter\" geklickt wurde\r\n        if (next == null && step > 1)\r\n            --step;\r\n        // Strategische Ziele in Array stellen\r\n        Integer[] szIdArr = new Integer[szs.size()];\r\n        String[] szNameArr = new String[szs.size()];\r\n        int i = 0;\r\n        for (StrategischesZiel sZiel : szs) {\r\n            szIdArr[i] = sZiel.getStrategischesZielId();\r\n            szNameArr[i++] = sZiel.getName();\r\n            logger.debug(\"Strategisches Ziel: id=\" + szIdArr[i - 1] + \", name=\" + szNameArr[i - 1]);\r\n        }\r\n        // Auf inkorrekten step Parameter prï¿½fen\r\n        if ((step - 1) >= szIdArr.length) {\r\n            logger.warn(\"Nicht verfï¿½gbarer Schritt ausgewï¿½hlt!\");\r\n            step = 1;\r\n        }\r\n        // Auf letzten Schritt prï¿½fen\r\n        if (step == szIdArr.length) {\r\n            request.setAttribute(Constants.LAST_STEP, true);\r\n        }\r\n        // Id des Strategischen Ziels anhand des step Parameters holen\r\n        szId = szIdArr[step - 1];\r\n        logger.debug(\"Gewï¿½hltes Strategisches Ziel: \" + szId);\r\n        request.setAttribute(Constants.STRATEGISCHES_ZIEL_ID, szId);\r\n        request.setAttribute(Constants.STRATEGISCHES_ZIEL_NAME, szNameArr[step - 1]);\r\n        request.setAttribute(Constants.STEP, step + 1);\r\n        // Detailziele fï¿½r quantifizierbaren Nutzen holen\r\n        // Alle Detailziele zum gewï¿½hlten Strategischen Ziel holen\r\n        Detailziel dz = new Detailziel();\r\n        dz.setProjektattraktivitaetId(projektattraktivitaetId);\r\n        dz.setStrategischesZielId(szId);\r\n        dz.setQuantifizierbar(true);\r\n        dz.setMandantId(mandantId);\r\n        // Detailziele aussortieren, die einem anderen Customizing zugeordnet sind\r\n        List<Detailziel> dzs = service.getByStrategischesZiel(dz);\r\n        HashMap<Integer, Detailziel> map = new HashMap<Integer, Detailziel>();\r\n        for (Detailziel d : dzs) {\r\n            Integer id = d.getDetailzielId();\r\n            boolean contains = map.containsKey(id);\r\n            Integer dPaId = d.getProjektattraktivitaetId();\r\n            // HashMap abfï¿½llen um allfï¿½llige doppelte Detailziele auszusortieren\r\n            // (ist der Fall bei Zuweisungen zu anderen Customizings)\r\n            if (!contains || dPaId != null && contains && dPaId.equals(projektattraktivitaetId))\r\n                map.put(id, d);\r\n        }\r\n        request.setAttribute(Constants.DETAILZIELE_Q, map.values());\r\n        request.setAttribute(Constants.PROJEKTATTRAKTIVITAET_ID, projektattraktivitaetId);\r\n        List<Detailziel> dzsA = service.getAssignments(dz);\r\n        request.setAttribute(Constants.DETAILZIELE_ASSIGNED_Q, dzsA);\r\n        // Detailziele fï¿½r nicht quantifizierbaren Nutzen holen\r\n        // Alle Detailziele zum gewï¿½hlten Strategischen Ziel holen\r\n        dz.setQuantifizierbar(false);\r\n        // Detailziele aussortieren, die einem anderen Customizing zugeordnet sind\r\n        dzs = service.getByStrategischesZiel(dz);\r\n        map = new HashMap<Integer, Detailziel>();\r\n        for (Detailziel d : dzs) {\r\n            Integer id = d.getDetailzielId();\r\n            boolean contains = map.containsKey(id);\r\n            Integer dPaId = d.getProjektattraktivitaetId();\r\n            // HashMap abfï¿½llen um allfï¿½llige doppelte Detailziele auszusortieren\r\n            // (ist der Fall bei Zuweisungen zu anderen Customizings)\r\n            if (!contains || dPaId != null && contains && dPaId.equals(projektattraktivitaetId))\r\n                map.put(id, d);\r\n        }\r\n        request.setAttribute(Constants.DETAILZIELE_NQ, map.values());\r\n        dzsA = service.getAssignments(dz);\r\n        request.setAttribute(Constants.DETAILZIELE_ASSIGNED_NQ, dzsA);\r\n        service.setStatus(request, szs, mandantId, projektattraktivitaetId);\r\n        return true;\r\n    }\r\n\r\n    private Integer getProjektattraktivitaetId(HttpServletRequest request) {\r\n        // Projektattraktivitï¿½t holen\r\n        Integer customizingId = (Integer) request.getSession().getAttribute(Constants.CUSTOMIZING_ID);\r\n        return commonService.getProjektattraktivitaetIdByCustomizingId(customizingId);\r\n    }\r\n}\r\n",
		"id": "EvoSuiteBenchmark/46_nutzenportfolio/src/main/java/ch/bfh/egov/nutzenportfolio/action/DetailzieleActionTest4.java",
		"test_prompt": "// DetailzieleActionTest4.java\npackage ch.bfh.egov.nutzenportfolio.action;\n\nimport java.util.HashMap;\nimport java.util.List;\nimport javax.servlet.http.HttpServletRequest;\nimport javax.servlet.http.HttpServletResponse;\nimport ch.bfh.egov.nutzenportfolio.Constants;\nimport ch.bfh.egov.nutzenportfolio.service.common.CommonService;\nimport ch.bfh.egov.nutzenportfolio.service.customizing.CustomizingService;\nimport ch.bfh.egov.nutzenportfolio.service.detailziele.DetailzieleService;\nimport ch.bfh.egov.nutzenportfolio.service.strategischeziele.StrategischeZieleService;\nimport ch.bfh.egov.nutzenportfolio.tos.Detailziel;\nimport ch.bfh.egov.nutzenportfolio.tos.StrategischesZiel;\nimport org.apache.commons.logging.Log;\nimport org.apache.commons.logging.LogFactory;\nimport org.apache.struts.action.ActionForm;\nimport org.apache.struts.action.ActionForward;\nimport org.apache.struts.action.ActionMapping;\nimport org.apache.struts.action.ActionMessage;\nimport org.apache.struts.action.ActionMessages;\nimport org.apache.struts.action.DynaActionForm;\nimport org.apache.struts.actions.DispatchAction;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link DetailzieleAction}.\n* It contains ten unit test cases for the {@link DetailzieleAction#deletequestion(ActionMapping, ActionForm, HttpServletRequest, HttpServletResponse)} method.\n*/\nclass DetailzieleActionTest4 {"
	},
	{
		"original_code": "// DetailzieleAction.java\n/**\r\n * Nutzenportfolio\r\n * Copyright (C) 2006 Kompetenzzentrum E-Business, Simon Bergamin\r\n *\r\n * This program is free software; you can redistribute it and/or\r\n * modify it under the terms of the GNU General Public License\r\n * as published by the Free Software Foundation; either version 2\r\n * of the License, or (at your option) any later version.\r\n *\r\n * This program is distributed in the hope that it will be useful,\r\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n * GNU General Public License for more details.\r\n *\r\n * You should have received a copy of the GNU General Public License\r\n * along with this program; if not, write to the Free Software\r\n * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\r\n */\r\npackage ch.bfh.egov.nutzenportfolio.action;\r\n\r\nimport java.util.HashMap;\r\nimport java.util.List;\r\nimport javax.servlet.http.HttpServletRequest;\r\nimport javax.servlet.http.HttpServletResponse;\r\nimport ch.bfh.egov.nutzenportfolio.Constants;\r\nimport ch.bfh.egov.nutzenportfolio.service.common.CommonService;\r\nimport ch.bfh.egov.nutzenportfolio.service.customizing.CustomizingService;\r\nimport ch.bfh.egov.nutzenportfolio.service.detailziele.DetailzieleService;\r\nimport ch.bfh.egov.nutzenportfolio.service.strategischeziele.StrategischeZieleService;\r\nimport ch.bfh.egov.nutzenportfolio.tos.Detailziel;\r\nimport ch.bfh.egov.nutzenportfolio.tos.StrategischesZiel;\r\nimport org.apache.commons.logging.Log;\r\nimport org.apache.commons.logging.LogFactory;\r\nimport org.apache.struts.action.ActionForm;\r\nimport org.apache.struts.action.ActionForward;\r\nimport org.apache.struts.action.ActionMapping;\r\nimport org.apache.struts.action.ActionMessage;\r\nimport org.apache.struts.action.ActionMessages;\r\nimport org.apache.struts.action.DynaActionForm;\r\nimport org.apache.struts.actions.DispatchAction;\r\n\r\npublic class DetailzieleAction extends DispatchAction {\r\n\r\n    private Log logger = LogFactory.getLog(this.getClass());\r\n\r\n    private DetailzieleService service;\r\n\r\n    private StrategischeZieleService szService;\r\n\r\n    private CommonService commonService;\r\n\r\n    public DetailzieleAction(DetailzieleService service, StrategischeZieleService szService, CommonService commonService, CustomizingService customizingService) {\r\n        super();\r\n        this.service = service;\r\n        this.szService = szService;\r\n        this.commonService = commonService;\r\n        service.init(commonService, customizingService, szService);\r\n    }\r\n\r\n    public ActionForward list(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {\r\n        service.populate(request);\r\n        return mapping.findForward(Constants.LIST);\r\n    }\r\n\r\n    public ActionForward prepare(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {\r\n        if (!populate(request)) {\r\n            ActionMessages errors = new ActionMessages();\r\n            errors.add(ActionMessages.GLOBAL_MESSAGE, new ActionMessage(\"errors.strategische.ziele.not.set\"));\r\n            saveMessages(request, errors);\r\n            return mapping.findForward(Constants.FAILURE);\r\n        }\r\n        return mapping.findForward(Constants.FORM);\r\n    }\r\n\r\n    public ActionForward edit(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {\r\n        DynaActionForm dzForm = (DynaActionForm) form;\r\n        service.edit(request, dzForm);\r\n        return mapping.findForward(Constants.FORM);\r\n    }\r\n\r\n    public ActionForward update(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {\r\n        DynaActionForm dzForm = (DynaActionForm) form;\r\n        service.update(request, dzForm);\r\n        service.populate(request);\r\n        return mapping.findForward(Constants.LIST);\r\n    }\r\n\r\n    public ActionForward deletequestion(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {\r\n        DynaActionForm dzForm = (DynaActionForm) form;\r\n        Detailziel dz = service.getDetailziel(request, dzForm);\r\n        if (dz == null) {\r\n            service.populate(request);\r\n            return mapping.findForward(Constants.LIST);\r\n        }\r\n        ActionMessages messages = new ActionMessages();\r\n        service.deleteQuestion(request, dz, messages);\r\n        saveMessages(request, messages);\r\n        return mapping.findForward(Constants.QUESTION);\r\n    }\r\n\r\n    public ActionForward delete(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {\r\n        DynaActionForm dzForm = (DynaActionForm) form;\r\n        Detailziel dz = service.getDetailziel(request, dzForm);\r\n        if (dz == null) {\r\n            service.populate(request);\r\n            return mapping.findForward(Constants.LIST);\r\n        }\r\n        // Lï¿½schen\r\n        service.delete(request, dz);\r\n        service.populate(request);\r\n        return mapping.findForward(Constants.LIST);\r\n    }\r\n\r\n    public ActionForward remove(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {\r\n        //Formulardaten holen\r\n        DynaActionForm dzForm = (DynaActionForm) form;\r\n        Integer detailzielId = (Integer) dzForm.get(Constants.DETAILZIEL_ID);\r\n        Integer paId = (Integer) dzForm.get(Constants.PROJEKTATTRAKTIVITAET_ID);\r\n        Boolean quantifizierbar = (Boolean) dzForm.get(Constants.QUANTIFIZIERBAR);\r\n        logger.debug(\"detailzielId=\" + detailzielId);\r\n        logger.debug(\"paId=\" + paId);\r\n        logger.debug(\"quantifizierbar=\" + quantifizierbar);\r\n        Integer mandantId = (Integer) request.getSession().getAttribute(Constants.MANDANT_ID);\r\n        Detailziel dz = new Detailziel();\r\n        dz.setProjektattraktivitaetId(paId);\r\n        dz.setQuantifizierbar(quantifizierbar);\r\n        dz.setMandantId(mandantId);\r\n        List<Detailziel> dzs = service.getAssignments(dz);\r\n        logger.debug(dzs.size() + \" Detailziele in der Liste\");\r\n        // Zuweisung lï¿½schen\r\n        for (Detailziel d : dzs) {\r\n            if (d.getDetailzielId().equals(detailzielId)) {\r\n                logger.debug(\"Zuweisung detailzielId=\" + detailzielId + \", projektattraktivitaetId=\" + d.getProjektattraktivitaetId() + \" wird gelï¿½scht.\");\r\n                service.deleteAssignment(d);\r\n                break;\r\n            }\r\n        }\r\n        populate(request);\r\n        return mapping.findForward(Constants.FORM);\r\n    }\r\n\r\n    public ActionForward set(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {\r\n        // Formulardaten holen\r\n        DynaActionForm dzForm = (DynaActionForm) form;\r\n        Integer detailzielId = (Integer) dzForm.get(Constants.DETAILZIEL_ID);\r\n        if (detailzielId == null) {\r\n            populate(request);\r\n            return mapping.findForward(Constants.FORM);\r\n        }\r\n        // Detailziel zuweisen\r\n        logger.debug(\"Detailziel zuweisen: \" + detailzielId);\r\n        Detailziel dz = new Detailziel();\r\n        dz.setDetailzielId(detailzielId);\r\n        dz.setProjektattraktivitaetId(getProjektattraktivitaetId(request));\r\n        service.insertAssignment(dz);\r\n        // Formular abfï¿½llen und anzeigen\r\n        populate(request);\r\n        return mapping.findForward(Constants.FORM);\r\n    }\r\n\r\n    public ActionForward next(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {\r\n        // Nï¿½chste Action?\r\n        String last = request.getParameter(Constants.LAST_STEP);\r\n        if (last != null && last.equals(\"true\"))\r\n            return mapping.findForward(Constants.NEXT);\r\n        populate(request);\r\n        return mapping.findForward(Constants.FORM);\r\n    }\r\n\r\n    public ActionForward add(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {\r\n        DynaActionForm dzForm = (DynaActionForm) form;\r\n        ActionMessages errors = new ActionMessages();\r\n        ActionMessages messages = new ActionMessages();\r\n        if (!service.add(request, dzForm, errors, messages)) {\r\n            saveErrors(request, errors);\r\n            saveMessages(request, messages);\r\n        }\r\n        populate(request);\r\n        return mapping.findForward(Constants.FORM);\r\n    }\r\n\r\n    private boolean populate(HttpServletRequest request) {\r\n        Integer customizingId = (Integer) request.getSession().getAttribute(Constants.CUSTOMIZING_ID);\r\n        Integer projektattraktivitaetId = getProjektattraktivitaetId(request);\r\n        Integer mandantId = (Integer) request.getSession().getAttribute(Constants.MANDANT_ID);\r\n        // Strategische Ziele holen\r\n        StrategischesZiel sz = new StrategischesZiel();\r\n        sz.setCustomizingId(customizingId);\r\n        sz.setMandantId(mandantId);\r\n        List<StrategischesZiel> szs = szService.getAssignments(sz);\r\n        Integer szId = null;\r\n        Integer step = null;\r\n        if (szs.size() == 0) {\r\n            return false;\r\n        }\r\n        // 1 Schritt pro Strategisches Ziel. Parameter ï¿½berprï¿½fen.\r\n        String stepStr = request.getParameter(Constants.STEP);\r\n        String next = request.getParameter(Constants.NEXT);\r\n        logger.debug(\"Angegebener step: \" + stepStr);\r\n        try {\r\n            step = new Integer(stepStr);\r\n        } catch (NumberFormatException nfex) {\r\n            step = 1;\r\n        }\r\n        // Denselben Schritt wiederholen, wenn nicht \"weiter\" geklickt wurde\r\n        if (next == null && step > 1)\r\n            --step;\r\n        // Strategische Ziele in Array stellen\r\n        Integer[] szIdArr = new Integer[szs.size()];\r\n        String[] szNameArr = new String[szs.size()];\r\n        int i = 0;\r\n        for (StrategischesZiel sZiel : szs) {\r\n            szIdArr[i] = sZiel.getStrategischesZielId();\r\n            szNameArr[i++] = sZiel.getName();\r\n            logger.debug(\"Strategisches Ziel: id=\" + szIdArr[i - 1] + \", name=\" + szNameArr[i - 1]);\r\n        }\r\n        // Auf inkorrekten step Parameter prï¿½fen\r\n        if ((step - 1) >= szIdArr.length) {\r\n            logger.warn(\"Nicht verfï¿½gbarer Schritt ausgewï¿½hlt!\");\r\n            step = 1;\r\n        }\r\n        // Auf letzten Schritt prï¿½fen\r\n        if (step == szIdArr.length) {\r\n            request.setAttribute(Constants.LAST_STEP, true);\r\n        }\r\n        // Id des Strategischen Ziels anhand des step Parameters holen\r\n        szId = szIdArr[step - 1];\r\n        logger.debug(\"Gewï¿½hltes Strategisches Ziel: \" + szId);\r\n        request.setAttribute(Constants.STRATEGISCHES_ZIEL_ID, szId);\r\n        request.setAttribute(Constants.STRATEGISCHES_ZIEL_NAME, szNameArr[step - 1]);\r\n        request.setAttribute(Constants.STEP, step + 1);\r\n        // Detailziele fï¿½r quantifizierbaren Nutzen holen\r\n        // Alle Detailziele zum gewï¿½hlten Strategischen Ziel holen\r\n        Detailziel dz = new Detailziel();\r\n        dz.setProjektattraktivitaetId(projektattraktivitaetId);\r\n        dz.setStrategischesZielId(szId);\r\n        dz.setQuantifizierbar(true);\r\n        dz.setMandantId(mandantId);\r\n        // Detailziele aussortieren, die einem anderen Customizing zugeordnet sind\r\n        List<Detailziel> dzs = service.getByStrategischesZiel(dz);\r\n        HashMap<Integer, Detailziel> map = new HashMap<Integer, Detailziel>();\r\n        for (Detailziel d : dzs) {\r\n            Integer id = d.getDetailzielId();\r\n            boolean contains = map.containsKey(id);\r\n            Integer dPaId = d.getProjektattraktivitaetId();\r\n            // HashMap abfï¿½llen um allfï¿½llige doppelte Detailziele auszusortieren\r\n            // (ist der Fall bei Zuweisungen zu anderen Customizings)\r\n            if (!contains || dPaId != null && contains && dPaId.equals(projektattraktivitaetId))\r\n                map.put(id, d);\r\n        }\r\n        request.setAttribute(Constants.DETAILZIELE_Q, map.values());\r\n        request.setAttribute(Constants.PROJEKTATTRAKTIVITAET_ID, projektattraktivitaetId);\r\n        List<Detailziel> dzsA = service.getAssignments(dz);\r\n        request.setAttribute(Constants.DETAILZIELE_ASSIGNED_Q, dzsA);\r\n        // Detailziele fï¿½r nicht quantifizierbaren Nutzen holen\r\n        // Alle Detailziele zum gewï¿½hlten Strategischen Ziel holen\r\n        dz.setQuantifizierbar(false);\r\n        // Detailziele aussortieren, die einem anderen Customizing zugeordnet sind\r\n        dzs = service.getByStrategischesZiel(dz);\r\n        map = new HashMap<Integer, Detailziel>();\r\n        for (Detailziel d : dzs) {\r\n            Integer id = d.getDetailzielId();\r\n            boolean contains = map.containsKey(id);\r\n            Integer dPaId = d.getProjektattraktivitaetId();\r\n            // HashMap abfï¿½llen um allfï¿½llige doppelte Detailziele auszusortieren\r\n            // (ist der Fall bei Zuweisungen zu anderen Customizings)\r\n            if (!contains || dPaId != null && contains && dPaId.equals(projektattraktivitaetId))\r\n                map.put(id, d);\r\n        }\r\n        request.setAttribute(Constants.DETAILZIELE_NQ, map.values());\r\n        dzsA = service.getAssignments(dz);\r\n        request.setAttribute(Constants.DETAILZIELE_ASSIGNED_NQ, dzsA);\r\n        service.setStatus(request, szs, mandantId, projektattraktivitaetId);\r\n        return true;\r\n    }\r\n\r\n    private Integer getProjektattraktivitaetId(HttpServletRequest request) {\r\n        // Projektattraktivitï¿½t holen\r\n        Integer customizingId = (Integer) request.getSession().getAttribute(Constants.CUSTOMIZING_ID);\r\n        return commonService.getProjektattraktivitaetIdByCustomizingId(customizingId);\r\n    }\r\n}\r\n",
		"id": "EvoSuiteBenchmark/46_nutzenportfolio/src/main/java/ch/bfh/egov/nutzenportfolio/action/DetailzieleActionTest5.java",
		"test_prompt": "// DetailzieleActionTest5.java\npackage ch.bfh.egov.nutzenportfolio.action;\n\nimport java.util.HashMap;\nimport java.util.List;\nimport javax.servlet.http.HttpServletRequest;\nimport javax.servlet.http.HttpServletResponse;\nimport ch.bfh.egov.nutzenportfolio.Constants;\nimport ch.bfh.egov.nutzenportfolio.service.common.CommonService;\nimport ch.bfh.egov.nutzenportfolio.service.customizing.CustomizingService;\nimport ch.bfh.egov.nutzenportfolio.service.detailziele.DetailzieleService;\nimport ch.bfh.egov.nutzenportfolio.service.strategischeziele.StrategischeZieleService;\nimport ch.bfh.egov.nutzenportfolio.tos.Detailziel;\nimport ch.bfh.egov.nutzenportfolio.tos.StrategischesZiel;\nimport org.apache.commons.logging.Log;\nimport org.apache.commons.logging.LogFactory;\nimport org.apache.struts.action.ActionForm;\nimport org.apache.struts.action.ActionForward;\nimport org.apache.struts.action.ActionMapping;\nimport org.apache.struts.action.ActionMessage;\nimport org.apache.struts.action.ActionMessages;\nimport org.apache.struts.action.DynaActionForm;\nimport org.apache.struts.actions.DispatchAction;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link DetailzieleAction}.\n* It contains ten unit test cases for the {@link DetailzieleAction#delete(ActionMapping, ActionForm, HttpServletRequest, HttpServletResponse)} method.\n*/\nclass DetailzieleActionTest5 {"
	},
	{
		"original_code": "// DetailzieleAction.java\n/**\r\n * Nutzenportfolio\r\n * Copyright (C) 2006 Kompetenzzentrum E-Business, Simon Bergamin\r\n *\r\n * This program is free software; you can redistribute it and/or\r\n * modify it under the terms of the GNU General Public License\r\n * as published by the Free Software Foundation; either version 2\r\n * of the License, or (at your option) any later version.\r\n *\r\n * This program is distributed in the hope that it will be useful,\r\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n * GNU General Public License for more details.\r\n *\r\n * You should have received a copy of the GNU General Public License\r\n * along with this program; if not, write to the Free Software\r\n * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\r\n */\r\npackage ch.bfh.egov.nutzenportfolio.action;\r\n\r\nimport java.util.HashMap;\r\nimport java.util.List;\r\nimport javax.servlet.http.HttpServletRequest;\r\nimport javax.servlet.http.HttpServletResponse;\r\nimport ch.bfh.egov.nutzenportfolio.Constants;\r\nimport ch.bfh.egov.nutzenportfolio.service.common.CommonService;\r\nimport ch.bfh.egov.nutzenportfolio.service.customizing.CustomizingService;\r\nimport ch.bfh.egov.nutzenportfolio.service.detailziele.DetailzieleService;\r\nimport ch.bfh.egov.nutzenportfolio.service.strategischeziele.StrategischeZieleService;\r\nimport ch.bfh.egov.nutzenportfolio.tos.Detailziel;\r\nimport ch.bfh.egov.nutzenportfolio.tos.StrategischesZiel;\r\nimport org.apache.commons.logging.Log;\r\nimport org.apache.commons.logging.LogFactory;\r\nimport org.apache.struts.action.ActionForm;\r\nimport org.apache.struts.action.ActionForward;\r\nimport org.apache.struts.action.ActionMapping;\r\nimport org.apache.struts.action.ActionMessage;\r\nimport org.apache.struts.action.ActionMessages;\r\nimport org.apache.struts.action.DynaActionForm;\r\nimport org.apache.struts.actions.DispatchAction;\r\n\r\npublic class DetailzieleAction extends DispatchAction {\r\n\r\n    private Log logger = LogFactory.getLog(this.getClass());\r\n\r\n    private DetailzieleService service;\r\n\r\n    private StrategischeZieleService szService;\r\n\r\n    private CommonService commonService;\r\n\r\n    public DetailzieleAction(DetailzieleService service, StrategischeZieleService szService, CommonService commonService, CustomizingService customizingService) {\r\n        super();\r\n        this.service = service;\r\n        this.szService = szService;\r\n        this.commonService = commonService;\r\n        service.init(commonService, customizingService, szService);\r\n    }\r\n\r\n    public ActionForward list(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {\r\n        service.populate(request);\r\n        return mapping.findForward(Constants.LIST);\r\n    }\r\n\r\n    public ActionForward prepare(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {\r\n        if (!populate(request)) {\r\n            ActionMessages errors = new ActionMessages();\r\n            errors.add(ActionMessages.GLOBAL_MESSAGE, new ActionMessage(\"errors.strategische.ziele.not.set\"));\r\n            saveMessages(request, errors);\r\n            return mapping.findForward(Constants.FAILURE);\r\n        }\r\n        return mapping.findForward(Constants.FORM);\r\n    }\r\n\r\n    public ActionForward edit(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {\r\n        DynaActionForm dzForm = (DynaActionForm) form;\r\n        service.edit(request, dzForm);\r\n        return mapping.findForward(Constants.FORM);\r\n    }\r\n\r\n    public ActionForward update(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {\r\n        DynaActionForm dzForm = (DynaActionForm) form;\r\n        service.update(request, dzForm);\r\n        service.populate(request);\r\n        return mapping.findForward(Constants.LIST);\r\n    }\r\n\r\n    public ActionForward deletequestion(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {\r\n        DynaActionForm dzForm = (DynaActionForm) form;\r\n        Detailziel dz = service.getDetailziel(request, dzForm);\r\n        if (dz == null) {\r\n            service.populate(request);\r\n            return mapping.findForward(Constants.LIST);\r\n        }\r\n        ActionMessages messages = new ActionMessages();\r\n        service.deleteQuestion(request, dz, messages);\r\n        saveMessages(request, messages);\r\n        return mapping.findForward(Constants.QUESTION);\r\n    }\r\n\r\n    public ActionForward delete(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {\r\n        DynaActionForm dzForm = (DynaActionForm) form;\r\n        Detailziel dz = service.getDetailziel(request, dzForm);\r\n        if (dz == null) {\r\n            service.populate(request);\r\n            return mapping.findForward(Constants.LIST);\r\n        }\r\n        // Lï¿½schen\r\n        service.delete(request, dz);\r\n        service.populate(request);\r\n        return mapping.findForward(Constants.LIST);\r\n    }\r\n\r\n    public ActionForward remove(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {\r\n        //Formulardaten holen\r\n        DynaActionForm dzForm = (DynaActionForm) form;\r\n        Integer detailzielId = (Integer) dzForm.get(Constants.DETAILZIEL_ID);\r\n        Integer paId = (Integer) dzForm.get(Constants.PROJEKTATTRAKTIVITAET_ID);\r\n        Boolean quantifizierbar = (Boolean) dzForm.get(Constants.QUANTIFIZIERBAR);\r\n        logger.debug(\"detailzielId=\" + detailzielId);\r\n        logger.debug(\"paId=\" + paId);\r\n        logger.debug(\"quantifizierbar=\" + quantifizierbar);\r\n        Integer mandantId = (Integer) request.getSession().getAttribute(Constants.MANDANT_ID);\r\n        Detailziel dz = new Detailziel();\r\n        dz.setProjektattraktivitaetId(paId);\r\n        dz.setQuantifizierbar(quantifizierbar);\r\n        dz.setMandantId(mandantId);\r\n        List<Detailziel> dzs = service.getAssignments(dz);\r\n        logger.debug(dzs.size() + \" Detailziele in der Liste\");\r\n        // Zuweisung lï¿½schen\r\n        for (Detailziel d : dzs) {\r\n            if (d.getDetailzielId().equals(detailzielId)) {\r\n                logger.debug(\"Zuweisung detailzielId=\" + detailzielId + \", projektattraktivitaetId=\" + d.getProjektattraktivitaetId() + \" wird gelï¿½scht.\");\r\n                service.deleteAssignment(d);\r\n                break;\r\n            }\r\n        }\r\n        populate(request);\r\n        return mapping.findForward(Constants.FORM);\r\n    }\r\n\r\n    public ActionForward set(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {\r\n        // Formulardaten holen\r\n        DynaActionForm dzForm = (DynaActionForm) form;\r\n        Integer detailzielId = (Integer) dzForm.get(Constants.DETAILZIEL_ID);\r\n        if (detailzielId == null) {\r\n            populate(request);\r\n            return mapping.findForward(Constants.FORM);\r\n        }\r\n        // Detailziel zuweisen\r\n        logger.debug(\"Detailziel zuweisen: \" + detailzielId);\r\n        Detailziel dz = new Detailziel();\r\n        dz.setDetailzielId(detailzielId);\r\n        dz.setProjektattraktivitaetId(getProjektattraktivitaetId(request));\r\n        service.insertAssignment(dz);\r\n        // Formular abfï¿½llen und anzeigen\r\n        populate(request);\r\n        return mapping.findForward(Constants.FORM);\r\n    }\r\n\r\n    public ActionForward next(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {\r\n        // Nï¿½chste Action?\r\n        String last = request.getParameter(Constants.LAST_STEP);\r\n        if (last != null && last.equals(\"true\"))\r\n            return mapping.findForward(Constants.NEXT);\r\n        populate(request);\r\n        return mapping.findForward(Constants.FORM);\r\n    }\r\n\r\n    public ActionForward add(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {\r\n        DynaActionForm dzForm = (DynaActionForm) form;\r\n        ActionMessages errors = new ActionMessages();\r\n        ActionMessages messages = new ActionMessages();\r\n        if (!service.add(request, dzForm, errors, messages)) {\r\n            saveErrors(request, errors);\r\n            saveMessages(request, messages);\r\n        }\r\n        populate(request);\r\n        return mapping.findForward(Constants.FORM);\r\n    }\r\n\r\n    private boolean populate(HttpServletRequest request) {\r\n        Integer customizingId = (Integer) request.getSession().getAttribute(Constants.CUSTOMIZING_ID);\r\n        Integer projektattraktivitaetId = getProjektattraktivitaetId(request);\r\n        Integer mandantId = (Integer) request.getSession().getAttribute(Constants.MANDANT_ID);\r\n        // Strategische Ziele holen\r\n        StrategischesZiel sz = new StrategischesZiel();\r\n        sz.setCustomizingId(customizingId);\r\n        sz.setMandantId(mandantId);\r\n        List<StrategischesZiel> szs = szService.getAssignments(sz);\r\n        Integer szId = null;\r\n        Integer step = null;\r\n        if (szs.size() == 0) {\r\n            return false;\r\n        }\r\n        // 1 Schritt pro Strategisches Ziel. Parameter ï¿½berprï¿½fen.\r\n        String stepStr = request.getParameter(Constants.STEP);\r\n        String next = request.getParameter(Constants.NEXT);\r\n        logger.debug(\"Angegebener step: \" + stepStr);\r\n        try {\r\n            step = new Integer(stepStr);\r\n        } catch (NumberFormatException nfex) {\r\n            step = 1;\r\n        }\r\n        // Denselben Schritt wiederholen, wenn nicht \"weiter\" geklickt wurde\r\n        if (next == null && step > 1)\r\n            --step;\r\n        // Strategische Ziele in Array stellen\r\n        Integer[] szIdArr = new Integer[szs.size()];\r\n        String[] szNameArr = new String[szs.size()];\r\n        int i = 0;\r\n        for (StrategischesZiel sZiel : szs) {\r\n            szIdArr[i] = sZiel.getStrategischesZielId();\r\n            szNameArr[i++] = sZiel.getName();\r\n            logger.debug(\"Strategisches Ziel: id=\" + szIdArr[i - 1] + \", name=\" + szNameArr[i - 1]);\r\n        }\r\n        // Auf inkorrekten step Parameter prï¿½fen\r\n        if ((step - 1) >= szIdArr.length) {\r\n            logger.warn(\"Nicht verfï¿½gbarer Schritt ausgewï¿½hlt!\");\r\n            step = 1;\r\n        }\r\n        // Auf letzten Schritt prï¿½fen\r\n        if (step == szIdArr.length) {\r\n            request.setAttribute(Constants.LAST_STEP, true);\r\n        }\r\n        // Id des Strategischen Ziels anhand des step Parameters holen\r\n        szId = szIdArr[step - 1];\r\n        logger.debug(\"Gewï¿½hltes Strategisches Ziel: \" + szId);\r\n        request.setAttribute(Constants.STRATEGISCHES_ZIEL_ID, szId);\r\n        request.setAttribute(Constants.STRATEGISCHES_ZIEL_NAME, szNameArr[step - 1]);\r\n        request.setAttribute(Constants.STEP, step + 1);\r\n        // Detailziele fï¿½r quantifizierbaren Nutzen holen\r\n        // Alle Detailziele zum gewï¿½hlten Strategischen Ziel holen\r\n        Detailziel dz = new Detailziel();\r\n        dz.setProjektattraktivitaetId(projektattraktivitaetId);\r\n        dz.setStrategischesZielId(szId);\r\n        dz.setQuantifizierbar(true);\r\n        dz.setMandantId(mandantId);\r\n        // Detailziele aussortieren, die einem anderen Customizing zugeordnet sind\r\n        List<Detailziel> dzs = service.getByStrategischesZiel(dz);\r\n        HashMap<Integer, Detailziel> map = new HashMap<Integer, Detailziel>();\r\n        for (Detailziel d : dzs) {\r\n            Integer id = d.getDetailzielId();\r\n            boolean contains = map.containsKey(id);\r\n            Integer dPaId = d.getProjektattraktivitaetId();\r\n            // HashMap abfï¿½llen um allfï¿½llige doppelte Detailziele auszusortieren\r\n            // (ist der Fall bei Zuweisungen zu anderen Customizings)\r\n            if (!contains || dPaId != null && contains && dPaId.equals(projektattraktivitaetId))\r\n                map.put(id, d);\r\n        }\r\n        request.setAttribute(Constants.DETAILZIELE_Q, map.values());\r\n        request.setAttribute(Constants.PROJEKTATTRAKTIVITAET_ID, projektattraktivitaetId);\r\n        List<Detailziel> dzsA = service.getAssignments(dz);\r\n        request.setAttribute(Constants.DETAILZIELE_ASSIGNED_Q, dzsA);\r\n        // Detailziele fï¿½r nicht quantifizierbaren Nutzen holen\r\n        // Alle Detailziele zum gewï¿½hlten Strategischen Ziel holen\r\n        dz.setQuantifizierbar(false);\r\n        // Detailziele aussortieren, die einem anderen Customizing zugeordnet sind\r\n        dzs = service.getByStrategischesZiel(dz);\r\n        map = new HashMap<Integer, Detailziel>();\r\n        for (Detailziel d : dzs) {\r\n            Integer id = d.getDetailzielId();\r\n            boolean contains = map.containsKey(id);\r\n            Integer dPaId = d.getProjektattraktivitaetId();\r\n            // HashMap abfï¿½llen um allfï¿½llige doppelte Detailziele auszusortieren\r\n            // (ist der Fall bei Zuweisungen zu anderen Customizings)\r\n            if (!contains || dPaId != null && contains && dPaId.equals(projektattraktivitaetId))\r\n                map.put(id, d);\r\n        }\r\n        request.setAttribute(Constants.DETAILZIELE_NQ, map.values());\r\n        dzsA = service.getAssignments(dz);\r\n        request.setAttribute(Constants.DETAILZIELE_ASSIGNED_NQ, dzsA);\r\n        service.setStatus(request, szs, mandantId, projektattraktivitaetId);\r\n        return true;\r\n    }\r\n\r\n    private Integer getProjektattraktivitaetId(HttpServletRequest request) {\r\n        // Projektattraktivitï¿½t holen\r\n        Integer customizingId = (Integer) request.getSession().getAttribute(Constants.CUSTOMIZING_ID);\r\n        return commonService.getProjektattraktivitaetIdByCustomizingId(customizingId);\r\n    }\r\n}\r\n",
		"id": "EvoSuiteBenchmark/46_nutzenportfolio/src/main/java/ch/bfh/egov/nutzenportfolio/action/DetailzieleActionTest6.java",
		"test_prompt": "// DetailzieleActionTest6.java\npackage ch.bfh.egov.nutzenportfolio.action;\n\nimport java.util.HashMap;\nimport java.util.List;\nimport javax.servlet.http.HttpServletRequest;\nimport javax.servlet.http.HttpServletResponse;\nimport ch.bfh.egov.nutzenportfolio.Constants;\nimport ch.bfh.egov.nutzenportfolio.service.common.CommonService;\nimport ch.bfh.egov.nutzenportfolio.service.customizing.CustomizingService;\nimport ch.bfh.egov.nutzenportfolio.service.detailziele.DetailzieleService;\nimport ch.bfh.egov.nutzenportfolio.service.strategischeziele.StrategischeZieleService;\nimport ch.bfh.egov.nutzenportfolio.tos.Detailziel;\nimport ch.bfh.egov.nutzenportfolio.tos.StrategischesZiel;\nimport org.apache.commons.logging.Log;\nimport org.apache.commons.logging.LogFactory;\nimport org.apache.struts.action.ActionForm;\nimport org.apache.struts.action.ActionForward;\nimport org.apache.struts.action.ActionMapping;\nimport org.apache.struts.action.ActionMessage;\nimport org.apache.struts.action.ActionMessages;\nimport org.apache.struts.action.DynaActionForm;\nimport org.apache.struts.actions.DispatchAction;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link DetailzieleAction}.\n* It contains ten unit test cases for the {@link DetailzieleAction#remove(ActionMapping, ActionForm, HttpServletRequest, HttpServletResponse)} method.\n*/\nclass DetailzieleActionTest6 {"
	},
	{
		"original_code": "// DetailzieleAction.java\n/**\r\n * Nutzenportfolio\r\n * Copyright (C) 2006 Kompetenzzentrum E-Business, Simon Bergamin\r\n *\r\n * This program is free software; you can redistribute it and/or\r\n * modify it under the terms of the GNU General Public License\r\n * as published by the Free Software Foundation; either version 2\r\n * of the License, or (at your option) any later version.\r\n *\r\n * This program is distributed in the hope that it will be useful,\r\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n * GNU General Public License for more details.\r\n *\r\n * You should have received a copy of the GNU General Public License\r\n * along with this program; if not, write to the Free Software\r\n * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\r\n */\r\npackage ch.bfh.egov.nutzenportfolio.action;\r\n\r\nimport java.util.HashMap;\r\nimport java.util.List;\r\nimport javax.servlet.http.HttpServletRequest;\r\nimport javax.servlet.http.HttpServletResponse;\r\nimport ch.bfh.egov.nutzenportfolio.Constants;\r\nimport ch.bfh.egov.nutzenportfolio.service.common.CommonService;\r\nimport ch.bfh.egov.nutzenportfolio.service.customizing.CustomizingService;\r\nimport ch.bfh.egov.nutzenportfolio.service.detailziele.DetailzieleService;\r\nimport ch.bfh.egov.nutzenportfolio.service.strategischeziele.StrategischeZieleService;\r\nimport ch.bfh.egov.nutzenportfolio.tos.Detailziel;\r\nimport ch.bfh.egov.nutzenportfolio.tos.StrategischesZiel;\r\nimport org.apache.commons.logging.Log;\r\nimport org.apache.commons.logging.LogFactory;\r\nimport org.apache.struts.action.ActionForm;\r\nimport org.apache.struts.action.ActionForward;\r\nimport org.apache.struts.action.ActionMapping;\r\nimport org.apache.struts.action.ActionMessage;\r\nimport org.apache.struts.action.ActionMessages;\r\nimport org.apache.struts.action.DynaActionForm;\r\nimport org.apache.struts.actions.DispatchAction;\r\n\r\npublic class DetailzieleAction extends DispatchAction {\r\n\r\n    private Log logger = LogFactory.getLog(this.getClass());\r\n\r\n    private DetailzieleService service;\r\n\r\n    private StrategischeZieleService szService;\r\n\r\n    private CommonService commonService;\r\n\r\n    public DetailzieleAction(DetailzieleService service, StrategischeZieleService szService, CommonService commonService, CustomizingService customizingService) {\r\n        super();\r\n        this.service = service;\r\n        this.szService = szService;\r\n        this.commonService = commonService;\r\n        service.init(commonService, customizingService, szService);\r\n    }\r\n\r\n    public ActionForward list(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {\r\n        service.populate(request);\r\n        return mapping.findForward(Constants.LIST);\r\n    }\r\n\r\n    public ActionForward prepare(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {\r\n        if (!populate(request)) {\r\n            ActionMessages errors = new ActionMessages();\r\n            errors.add(ActionMessages.GLOBAL_MESSAGE, new ActionMessage(\"errors.strategische.ziele.not.set\"));\r\n            saveMessages(request, errors);\r\n            return mapping.findForward(Constants.FAILURE);\r\n        }\r\n        return mapping.findForward(Constants.FORM);\r\n    }\r\n\r\n    public ActionForward edit(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {\r\n        DynaActionForm dzForm = (DynaActionForm) form;\r\n        service.edit(request, dzForm);\r\n        return mapping.findForward(Constants.FORM);\r\n    }\r\n\r\n    public ActionForward update(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {\r\n        DynaActionForm dzForm = (DynaActionForm) form;\r\n        service.update(request, dzForm);\r\n        service.populate(request);\r\n        return mapping.findForward(Constants.LIST);\r\n    }\r\n\r\n    public ActionForward deletequestion(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {\r\n        DynaActionForm dzForm = (DynaActionForm) form;\r\n        Detailziel dz = service.getDetailziel(request, dzForm);\r\n        if (dz == null) {\r\n            service.populate(request);\r\n            return mapping.findForward(Constants.LIST);\r\n        }\r\n        ActionMessages messages = new ActionMessages();\r\n        service.deleteQuestion(request, dz, messages);\r\n        saveMessages(request, messages);\r\n        return mapping.findForward(Constants.QUESTION);\r\n    }\r\n\r\n    public ActionForward delete(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {\r\n        DynaActionForm dzForm = (DynaActionForm) form;\r\n        Detailziel dz = service.getDetailziel(request, dzForm);\r\n        if (dz == null) {\r\n            service.populate(request);\r\n            return mapping.findForward(Constants.LIST);\r\n        }\r\n        // Lï¿½schen\r\n        service.delete(request, dz);\r\n        service.populate(request);\r\n        return mapping.findForward(Constants.LIST);\r\n    }\r\n\r\n    public ActionForward remove(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {\r\n        //Formulardaten holen\r\n        DynaActionForm dzForm = (DynaActionForm) form;\r\n        Integer detailzielId = (Integer) dzForm.get(Constants.DETAILZIEL_ID);\r\n        Integer paId = (Integer) dzForm.get(Constants.PROJEKTATTRAKTIVITAET_ID);\r\n        Boolean quantifizierbar = (Boolean) dzForm.get(Constants.QUANTIFIZIERBAR);\r\n        logger.debug(\"detailzielId=\" + detailzielId);\r\n        logger.debug(\"paId=\" + paId);\r\n        logger.debug(\"quantifizierbar=\" + quantifizierbar);\r\n        Integer mandantId = (Integer) request.getSession().getAttribute(Constants.MANDANT_ID);\r\n        Detailziel dz = new Detailziel();\r\n        dz.setProjektattraktivitaetId(paId);\r\n        dz.setQuantifizierbar(quantifizierbar);\r\n        dz.setMandantId(mandantId);\r\n        List<Detailziel> dzs = service.getAssignments(dz);\r\n        logger.debug(dzs.size() + \" Detailziele in der Liste\");\r\n        // Zuweisung lï¿½schen\r\n        for (Detailziel d : dzs) {\r\n            if (d.getDetailzielId().equals(detailzielId)) {\r\n                logger.debug(\"Zuweisung detailzielId=\" + detailzielId + \", projektattraktivitaetId=\" + d.getProjektattraktivitaetId() + \" wird gelï¿½scht.\");\r\n                service.deleteAssignment(d);\r\n                break;\r\n            }\r\n        }\r\n        populate(request);\r\n        return mapping.findForward(Constants.FORM);\r\n    }\r\n\r\n    public ActionForward set(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {\r\n        // Formulardaten holen\r\n        DynaActionForm dzForm = (DynaActionForm) form;\r\n        Integer detailzielId = (Integer) dzForm.get(Constants.DETAILZIEL_ID);\r\n        if (detailzielId == null) {\r\n            populate(request);\r\n            return mapping.findForward(Constants.FORM);\r\n        }\r\n        // Detailziel zuweisen\r\n        logger.debug(\"Detailziel zuweisen: \" + detailzielId);\r\n        Detailziel dz = new Detailziel();\r\n        dz.setDetailzielId(detailzielId);\r\n        dz.setProjektattraktivitaetId(getProjektattraktivitaetId(request));\r\n        service.insertAssignment(dz);\r\n        // Formular abfï¿½llen und anzeigen\r\n        populate(request);\r\n        return mapping.findForward(Constants.FORM);\r\n    }\r\n\r\n    public ActionForward next(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {\r\n        // Nï¿½chste Action?\r\n        String last = request.getParameter(Constants.LAST_STEP);\r\n        if (last != null && last.equals(\"true\"))\r\n            return mapping.findForward(Constants.NEXT);\r\n        populate(request);\r\n        return mapping.findForward(Constants.FORM);\r\n    }\r\n\r\n    public ActionForward add(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {\r\n        DynaActionForm dzForm = (DynaActionForm) form;\r\n        ActionMessages errors = new ActionMessages();\r\n        ActionMessages messages = new ActionMessages();\r\n        if (!service.add(request, dzForm, errors, messages)) {\r\n            saveErrors(request, errors);\r\n            saveMessages(request, messages);\r\n        }\r\n        populate(request);\r\n        return mapping.findForward(Constants.FORM);\r\n    }\r\n\r\n    private boolean populate(HttpServletRequest request) {\r\n        Integer customizingId = (Integer) request.getSession().getAttribute(Constants.CUSTOMIZING_ID);\r\n        Integer projektattraktivitaetId = getProjektattraktivitaetId(request);\r\n        Integer mandantId = (Integer) request.getSession().getAttribute(Constants.MANDANT_ID);\r\n        // Strategische Ziele holen\r\n        StrategischesZiel sz = new StrategischesZiel();\r\n        sz.setCustomizingId(customizingId);\r\n        sz.setMandantId(mandantId);\r\n        List<StrategischesZiel> szs = szService.getAssignments(sz);\r\n        Integer szId = null;\r\n        Integer step = null;\r\n        if (szs.size() == 0) {\r\n            return false;\r\n        }\r\n        // 1 Schritt pro Strategisches Ziel. Parameter ï¿½berprï¿½fen.\r\n        String stepStr = request.getParameter(Constants.STEP);\r\n        String next = request.getParameter(Constants.NEXT);\r\n        logger.debug(\"Angegebener step: \" + stepStr);\r\n        try {\r\n            step = new Integer(stepStr);\r\n        } catch (NumberFormatException nfex) {\r\n            step = 1;\r\n        }\r\n        // Denselben Schritt wiederholen, wenn nicht \"weiter\" geklickt wurde\r\n        if (next == null && step > 1)\r\n            --step;\r\n        // Strategische Ziele in Array stellen\r\n        Integer[] szIdArr = new Integer[szs.size()];\r\n        String[] szNameArr = new String[szs.size()];\r\n        int i = 0;\r\n        for (StrategischesZiel sZiel : szs) {\r\n            szIdArr[i] = sZiel.getStrategischesZielId();\r\n            szNameArr[i++] = sZiel.getName();\r\n            logger.debug(\"Strategisches Ziel: id=\" + szIdArr[i - 1] + \", name=\" + szNameArr[i - 1]);\r\n        }\r\n        // Auf inkorrekten step Parameter prï¿½fen\r\n        if ((step - 1) >= szIdArr.length) {\r\n            logger.warn(\"Nicht verfï¿½gbarer Schritt ausgewï¿½hlt!\");\r\n            step = 1;\r\n        }\r\n        // Auf letzten Schritt prï¿½fen\r\n        if (step == szIdArr.length) {\r\n            request.setAttribute(Constants.LAST_STEP, true);\r\n        }\r\n        // Id des Strategischen Ziels anhand des step Parameters holen\r\n        szId = szIdArr[step - 1];\r\n        logger.debug(\"Gewï¿½hltes Strategisches Ziel: \" + szId);\r\n        request.setAttribute(Constants.STRATEGISCHES_ZIEL_ID, szId);\r\n        request.setAttribute(Constants.STRATEGISCHES_ZIEL_NAME, szNameArr[step - 1]);\r\n        request.setAttribute(Constants.STEP, step + 1);\r\n        // Detailziele fï¿½r quantifizierbaren Nutzen holen\r\n        // Alle Detailziele zum gewï¿½hlten Strategischen Ziel holen\r\n        Detailziel dz = new Detailziel();\r\n        dz.setProjektattraktivitaetId(projektattraktivitaetId);\r\n        dz.setStrategischesZielId(szId);\r\n        dz.setQuantifizierbar(true);\r\n        dz.setMandantId(mandantId);\r\n        // Detailziele aussortieren, die einem anderen Customizing zugeordnet sind\r\n        List<Detailziel> dzs = service.getByStrategischesZiel(dz);\r\n        HashMap<Integer, Detailziel> map = new HashMap<Integer, Detailziel>();\r\n        for (Detailziel d : dzs) {\r\n            Integer id = d.getDetailzielId();\r\n            boolean contains = map.containsKey(id);\r\n            Integer dPaId = d.getProjektattraktivitaetId();\r\n            // HashMap abfï¿½llen um allfï¿½llige doppelte Detailziele auszusortieren\r\n            // (ist der Fall bei Zuweisungen zu anderen Customizings)\r\n            if (!contains || dPaId != null && contains && dPaId.equals(projektattraktivitaetId))\r\n                map.put(id, d);\r\n        }\r\n        request.setAttribute(Constants.DETAILZIELE_Q, map.values());\r\n        request.setAttribute(Constants.PROJEKTATTRAKTIVITAET_ID, projektattraktivitaetId);\r\n        List<Detailziel> dzsA = service.getAssignments(dz);\r\n        request.setAttribute(Constants.DETAILZIELE_ASSIGNED_Q, dzsA);\r\n        // Detailziele fï¿½r nicht quantifizierbaren Nutzen holen\r\n        // Alle Detailziele zum gewï¿½hlten Strategischen Ziel holen\r\n        dz.setQuantifizierbar(false);\r\n        // Detailziele aussortieren, die einem anderen Customizing zugeordnet sind\r\n        dzs = service.getByStrategischesZiel(dz);\r\n        map = new HashMap<Integer, Detailziel>();\r\n        for (Detailziel d : dzs) {\r\n            Integer id = d.getDetailzielId();\r\n            boolean contains = map.containsKey(id);\r\n            Integer dPaId = d.getProjektattraktivitaetId();\r\n            // HashMap abfï¿½llen um allfï¿½llige doppelte Detailziele auszusortieren\r\n            // (ist der Fall bei Zuweisungen zu anderen Customizings)\r\n            if (!contains || dPaId != null && contains && dPaId.equals(projektattraktivitaetId))\r\n                map.put(id, d);\r\n        }\r\n        request.setAttribute(Constants.DETAILZIELE_NQ, map.values());\r\n        dzsA = service.getAssignments(dz);\r\n        request.setAttribute(Constants.DETAILZIELE_ASSIGNED_NQ, dzsA);\r\n        service.setStatus(request, szs, mandantId, projektattraktivitaetId);\r\n        return true;\r\n    }\r\n\r\n    private Integer getProjektattraktivitaetId(HttpServletRequest request) {\r\n        // Projektattraktivitï¿½t holen\r\n        Integer customizingId = (Integer) request.getSession().getAttribute(Constants.CUSTOMIZING_ID);\r\n        return commonService.getProjektattraktivitaetIdByCustomizingId(customizingId);\r\n    }\r\n}\r\n",
		"id": "EvoSuiteBenchmark/46_nutzenportfolio/src/main/java/ch/bfh/egov/nutzenportfolio/action/DetailzieleActionTest7.java",
		"test_prompt": "// DetailzieleActionTest7.java\npackage ch.bfh.egov.nutzenportfolio.action;\n\nimport java.util.HashMap;\nimport java.util.List;\nimport javax.servlet.http.HttpServletRequest;\nimport javax.servlet.http.HttpServletResponse;\nimport ch.bfh.egov.nutzenportfolio.Constants;\nimport ch.bfh.egov.nutzenportfolio.service.common.CommonService;\nimport ch.bfh.egov.nutzenportfolio.service.customizing.CustomizingService;\nimport ch.bfh.egov.nutzenportfolio.service.detailziele.DetailzieleService;\nimport ch.bfh.egov.nutzenportfolio.service.strategischeziele.StrategischeZieleService;\nimport ch.bfh.egov.nutzenportfolio.tos.Detailziel;\nimport ch.bfh.egov.nutzenportfolio.tos.StrategischesZiel;\nimport org.apache.commons.logging.Log;\nimport org.apache.commons.logging.LogFactory;\nimport org.apache.struts.action.ActionForm;\nimport org.apache.struts.action.ActionForward;\nimport org.apache.struts.action.ActionMapping;\nimport org.apache.struts.action.ActionMessage;\nimport org.apache.struts.action.ActionMessages;\nimport org.apache.struts.action.DynaActionForm;\nimport org.apache.struts.actions.DispatchAction;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link DetailzieleAction}.\n* It contains ten unit test cases for the {@link DetailzieleAction#next(ActionMapping, ActionForm, HttpServletRequest, HttpServletResponse)} method.\n*/\nclass DetailzieleActionTest7 {"
	},
	{
		"original_code": "// DetailzieleAction.java\n/**\r\n * Nutzenportfolio\r\n * Copyright (C) 2006 Kompetenzzentrum E-Business, Simon Bergamin\r\n *\r\n * This program is free software; you can redistribute it and/or\r\n * modify it under the terms of the GNU General Public License\r\n * as published by the Free Software Foundation; either version 2\r\n * of the License, or (at your option) any later version.\r\n *\r\n * This program is distributed in the hope that it will be useful,\r\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n * GNU General Public License for more details.\r\n *\r\n * You should have received a copy of the GNU General Public License\r\n * along with this program; if not, write to the Free Software\r\n * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\r\n */\r\npackage ch.bfh.egov.nutzenportfolio.action;\r\n\r\nimport java.util.HashMap;\r\nimport java.util.List;\r\nimport javax.servlet.http.HttpServletRequest;\r\nimport javax.servlet.http.HttpServletResponse;\r\nimport ch.bfh.egov.nutzenportfolio.Constants;\r\nimport ch.bfh.egov.nutzenportfolio.service.common.CommonService;\r\nimport ch.bfh.egov.nutzenportfolio.service.customizing.CustomizingService;\r\nimport ch.bfh.egov.nutzenportfolio.service.detailziele.DetailzieleService;\r\nimport ch.bfh.egov.nutzenportfolio.service.strategischeziele.StrategischeZieleService;\r\nimport ch.bfh.egov.nutzenportfolio.tos.Detailziel;\r\nimport ch.bfh.egov.nutzenportfolio.tos.StrategischesZiel;\r\nimport org.apache.commons.logging.Log;\r\nimport org.apache.commons.logging.LogFactory;\r\nimport org.apache.struts.action.ActionForm;\r\nimport org.apache.struts.action.ActionForward;\r\nimport org.apache.struts.action.ActionMapping;\r\nimport org.apache.struts.action.ActionMessage;\r\nimport org.apache.struts.action.ActionMessages;\r\nimport org.apache.struts.action.DynaActionForm;\r\nimport org.apache.struts.actions.DispatchAction;\r\n\r\npublic class DetailzieleAction extends DispatchAction {\r\n\r\n    private Log logger = LogFactory.getLog(this.getClass());\r\n\r\n    private DetailzieleService service;\r\n\r\n    private StrategischeZieleService szService;\r\n\r\n    private CommonService commonService;\r\n\r\n    public DetailzieleAction(DetailzieleService service, StrategischeZieleService szService, CommonService commonService, CustomizingService customizingService) {\r\n        super();\r\n        this.service = service;\r\n        this.szService = szService;\r\n        this.commonService = commonService;\r\n        service.init(commonService, customizingService, szService);\r\n    }\r\n\r\n    public ActionForward list(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {\r\n        service.populate(request);\r\n        return mapping.findForward(Constants.LIST);\r\n    }\r\n\r\n    public ActionForward prepare(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {\r\n        if (!populate(request)) {\r\n            ActionMessages errors = new ActionMessages();\r\n            errors.add(ActionMessages.GLOBAL_MESSAGE, new ActionMessage(\"errors.strategische.ziele.not.set\"));\r\n            saveMessages(request, errors);\r\n            return mapping.findForward(Constants.FAILURE);\r\n        }\r\n        return mapping.findForward(Constants.FORM);\r\n    }\r\n\r\n    public ActionForward edit(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {\r\n        DynaActionForm dzForm = (DynaActionForm) form;\r\n        service.edit(request, dzForm);\r\n        return mapping.findForward(Constants.FORM);\r\n    }\r\n\r\n    public ActionForward update(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {\r\n        DynaActionForm dzForm = (DynaActionForm) form;\r\n        service.update(request, dzForm);\r\n        service.populate(request);\r\n        return mapping.findForward(Constants.LIST);\r\n    }\r\n\r\n    public ActionForward deletequestion(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {\r\n        DynaActionForm dzForm = (DynaActionForm) form;\r\n        Detailziel dz = service.getDetailziel(request, dzForm);\r\n        if (dz == null) {\r\n            service.populate(request);\r\n            return mapping.findForward(Constants.LIST);\r\n        }\r\n        ActionMessages messages = new ActionMessages();\r\n        service.deleteQuestion(request, dz, messages);\r\n        saveMessages(request, messages);\r\n        return mapping.findForward(Constants.QUESTION);\r\n    }\r\n\r\n    public ActionForward delete(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {\r\n        DynaActionForm dzForm = (DynaActionForm) form;\r\n        Detailziel dz = service.getDetailziel(request, dzForm);\r\n        if (dz == null) {\r\n            service.populate(request);\r\n            return mapping.findForward(Constants.LIST);\r\n        }\r\n        // Lï¿½schen\r\n        service.delete(request, dz);\r\n        service.populate(request);\r\n        return mapping.findForward(Constants.LIST);\r\n    }\r\n\r\n    public ActionForward remove(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {\r\n        //Formulardaten holen\r\n        DynaActionForm dzForm = (DynaActionForm) form;\r\n        Integer detailzielId = (Integer) dzForm.get(Constants.DETAILZIEL_ID);\r\n        Integer paId = (Integer) dzForm.get(Constants.PROJEKTATTRAKTIVITAET_ID);\r\n        Boolean quantifizierbar = (Boolean) dzForm.get(Constants.QUANTIFIZIERBAR);\r\n        logger.debug(\"detailzielId=\" + detailzielId);\r\n        logger.debug(\"paId=\" + paId);\r\n        logger.debug(\"quantifizierbar=\" + quantifizierbar);\r\n        Integer mandantId = (Integer) request.getSession().getAttribute(Constants.MANDANT_ID);\r\n        Detailziel dz = new Detailziel();\r\n        dz.setProjektattraktivitaetId(paId);\r\n        dz.setQuantifizierbar(quantifizierbar);\r\n        dz.setMandantId(mandantId);\r\n        List<Detailziel> dzs = service.getAssignments(dz);\r\n        logger.debug(dzs.size() + \" Detailziele in der Liste\");\r\n        // Zuweisung lï¿½schen\r\n        for (Detailziel d : dzs) {\r\n            if (d.getDetailzielId().equals(detailzielId)) {\r\n                logger.debug(\"Zuweisung detailzielId=\" + detailzielId + \", projektattraktivitaetId=\" + d.getProjektattraktivitaetId() + \" wird gelï¿½scht.\");\r\n                service.deleteAssignment(d);\r\n                break;\r\n            }\r\n        }\r\n        populate(request);\r\n        return mapping.findForward(Constants.FORM);\r\n    }\r\n\r\n    public ActionForward set(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {\r\n        // Formulardaten holen\r\n        DynaActionForm dzForm = (DynaActionForm) form;\r\n        Integer detailzielId = (Integer) dzForm.get(Constants.DETAILZIEL_ID);\r\n        if (detailzielId == null) {\r\n            populate(request);\r\n            return mapping.findForward(Constants.FORM);\r\n        }\r\n        // Detailziel zuweisen\r\n        logger.debug(\"Detailziel zuweisen: \" + detailzielId);\r\n        Detailziel dz = new Detailziel();\r\n        dz.setDetailzielId(detailzielId);\r\n        dz.setProjektattraktivitaetId(getProjektattraktivitaetId(request));\r\n        service.insertAssignment(dz);\r\n        // Formular abfï¿½llen und anzeigen\r\n        populate(request);\r\n        return mapping.findForward(Constants.FORM);\r\n    }\r\n\r\n    public ActionForward next(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {\r\n        // Nï¿½chste Action?\r\n        String last = request.getParameter(Constants.LAST_STEP);\r\n        if (last != null && last.equals(\"true\"))\r\n            return mapping.findForward(Constants.NEXT);\r\n        populate(request);\r\n        return mapping.findForward(Constants.FORM);\r\n    }\r\n\r\n    public ActionForward add(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {\r\n        DynaActionForm dzForm = (DynaActionForm) form;\r\n        ActionMessages errors = new ActionMessages();\r\n        ActionMessages messages = new ActionMessages();\r\n        if (!service.add(request, dzForm, errors, messages)) {\r\n            saveErrors(request, errors);\r\n            saveMessages(request, messages);\r\n        }\r\n        populate(request);\r\n        return mapping.findForward(Constants.FORM);\r\n    }\r\n\r\n    private boolean populate(HttpServletRequest request) {\r\n        Integer customizingId = (Integer) request.getSession().getAttribute(Constants.CUSTOMIZING_ID);\r\n        Integer projektattraktivitaetId = getProjektattraktivitaetId(request);\r\n        Integer mandantId = (Integer) request.getSession().getAttribute(Constants.MANDANT_ID);\r\n        // Strategische Ziele holen\r\n        StrategischesZiel sz = new StrategischesZiel();\r\n        sz.setCustomizingId(customizingId);\r\n        sz.setMandantId(mandantId);\r\n        List<StrategischesZiel> szs = szService.getAssignments(sz);\r\n        Integer szId = null;\r\n        Integer step = null;\r\n        if (szs.size() == 0) {\r\n            return false;\r\n        }\r\n        // 1 Schritt pro Strategisches Ziel. Parameter ï¿½berprï¿½fen.\r\n        String stepStr = request.getParameter(Constants.STEP);\r\n        String next = request.getParameter(Constants.NEXT);\r\n        logger.debug(\"Angegebener step: \" + stepStr);\r\n        try {\r\n            step = new Integer(stepStr);\r\n        } catch (NumberFormatException nfex) {\r\n            step = 1;\r\n        }\r\n        // Denselben Schritt wiederholen, wenn nicht \"weiter\" geklickt wurde\r\n        if (next == null && step > 1)\r\n            --step;\r\n        // Strategische Ziele in Array stellen\r\n        Integer[] szIdArr = new Integer[szs.size()];\r\n        String[] szNameArr = new String[szs.size()];\r\n        int i = 0;\r\n        for (StrategischesZiel sZiel : szs) {\r\n            szIdArr[i] = sZiel.getStrategischesZielId();\r\n            szNameArr[i++] = sZiel.getName();\r\n            logger.debug(\"Strategisches Ziel: id=\" + szIdArr[i - 1] + \", name=\" + szNameArr[i - 1]);\r\n        }\r\n        // Auf inkorrekten step Parameter prï¿½fen\r\n        if ((step - 1) >= szIdArr.length) {\r\n            logger.warn(\"Nicht verfï¿½gbarer Schritt ausgewï¿½hlt!\");\r\n            step = 1;\r\n        }\r\n        // Auf letzten Schritt prï¿½fen\r\n        if (step == szIdArr.length) {\r\n            request.setAttribute(Constants.LAST_STEP, true);\r\n        }\r\n        // Id des Strategischen Ziels anhand des step Parameters holen\r\n        szId = szIdArr[step - 1];\r\n        logger.debug(\"Gewï¿½hltes Strategisches Ziel: \" + szId);\r\n        request.setAttribute(Constants.STRATEGISCHES_ZIEL_ID, szId);\r\n        request.setAttribute(Constants.STRATEGISCHES_ZIEL_NAME, szNameArr[step - 1]);\r\n        request.setAttribute(Constants.STEP, step + 1);\r\n        // Detailziele fï¿½r quantifizierbaren Nutzen holen\r\n        // Alle Detailziele zum gewï¿½hlten Strategischen Ziel holen\r\n        Detailziel dz = new Detailziel();\r\n        dz.setProjektattraktivitaetId(projektattraktivitaetId);\r\n        dz.setStrategischesZielId(szId);\r\n        dz.setQuantifizierbar(true);\r\n        dz.setMandantId(mandantId);\r\n        // Detailziele aussortieren, die einem anderen Customizing zugeordnet sind\r\n        List<Detailziel> dzs = service.getByStrategischesZiel(dz);\r\n        HashMap<Integer, Detailziel> map = new HashMap<Integer, Detailziel>();\r\n        for (Detailziel d : dzs) {\r\n            Integer id = d.getDetailzielId();\r\n            boolean contains = map.containsKey(id);\r\n            Integer dPaId = d.getProjektattraktivitaetId();\r\n            // HashMap abfï¿½llen um allfï¿½llige doppelte Detailziele auszusortieren\r\n            // (ist der Fall bei Zuweisungen zu anderen Customizings)\r\n            if (!contains || dPaId != null && contains && dPaId.equals(projektattraktivitaetId))\r\n                map.put(id, d);\r\n        }\r\n        request.setAttribute(Constants.DETAILZIELE_Q, map.values());\r\n        request.setAttribute(Constants.PROJEKTATTRAKTIVITAET_ID, projektattraktivitaetId);\r\n        List<Detailziel> dzsA = service.getAssignments(dz);\r\n        request.setAttribute(Constants.DETAILZIELE_ASSIGNED_Q, dzsA);\r\n        // Detailziele fï¿½r nicht quantifizierbaren Nutzen holen\r\n        // Alle Detailziele zum gewï¿½hlten Strategischen Ziel holen\r\n        dz.setQuantifizierbar(false);\r\n        // Detailziele aussortieren, die einem anderen Customizing zugeordnet sind\r\n        dzs = service.getByStrategischesZiel(dz);\r\n        map = new HashMap<Integer, Detailziel>();\r\n        for (Detailziel d : dzs) {\r\n            Integer id = d.getDetailzielId();\r\n            boolean contains = map.containsKey(id);\r\n            Integer dPaId = d.getProjektattraktivitaetId();\r\n            // HashMap abfï¿½llen um allfï¿½llige doppelte Detailziele auszusortieren\r\n            // (ist der Fall bei Zuweisungen zu anderen Customizings)\r\n            if (!contains || dPaId != null && contains && dPaId.equals(projektattraktivitaetId))\r\n                map.put(id, d);\r\n        }\r\n        request.setAttribute(Constants.DETAILZIELE_NQ, map.values());\r\n        dzsA = service.getAssignments(dz);\r\n        request.setAttribute(Constants.DETAILZIELE_ASSIGNED_NQ, dzsA);\r\n        service.setStatus(request, szs, mandantId, projektattraktivitaetId);\r\n        return true;\r\n    }\r\n\r\n    private Integer getProjektattraktivitaetId(HttpServletRequest request) {\r\n        // Projektattraktivitï¿½t holen\r\n        Integer customizingId = (Integer) request.getSession().getAttribute(Constants.CUSTOMIZING_ID);\r\n        return commonService.getProjektattraktivitaetIdByCustomizingId(customizingId);\r\n    }\r\n}\r\n",
		"id": "EvoSuiteBenchmark/46_nutzenportfolio/src/main/java/ch/bfh/egov/nutzenportfolio/action/DetailzieleActionTest8.java",
		"test_prompt": "// DetailzieleActionTest8.java\npackage ch.bfh.egov.nutzenportfolio.action;\n\nimport java.util.HashMap;\nimport java.util.List;\nimport javax.servlet.http.HttpServletRequest;\nimport javax.servlet.http.HttpServletResponse;\nimport ch.bfh.egov.nutzenportfolio.Constants;\nimport ch.bfh.egov.nutzenportfolio.service.common.CommonService;\nimport ch.bfh.egov.nutzenportfolio.service.customizing.CustomizingService;\nimport ch.bfh.egov.nutzenportfolio.service.detailziele.DetailzieleService;\nimport ch.bfh.egov.nutzenportfolio.service.strategischeziele.StrategischeZieleService;\nimport ch.bfh.egov.nutzenportfolio.tos.Detailziel;\nimport ch.bfh.egov.nutzenportfolio.tos.StrategischesZiel;\nimport org.apache.commons.logging.Log;\nimport org.apache.commons.logging.LogFactory;\nimport org.apache.struts.action.ActionForm;\nimport org.apache.struts.action.ActionForward;\nimport org.apache.struts.action.ActionMapping;\nimport org.apache.struts.action.ActionMessage;\nimport org.apache.struts.action.ActionMessages;\nimport org.apache.struts.action.DynaActionForm;\nimport org.apache.struts.actions.DispatchAction;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link DetailzieleAction}.\n* It contains ten unit test cases for the {@link DetailzieleAction#add(ActionMapping, ActionForm, HttpServletRequest, HttpServletResponse)} method.\n*/\nclass DetailzieleActionTest8 {"
	},
	{
		"original_code": "// ProjektattraktivitaetAction.java\n/**\r\n * Nutzenportfolio\r\n * Copyright (C) 2006 Kompetenzzentrum E-Business, Simon Bergamin\r\n *\r\n * This program is free software; you can redistribute it and/or\r\n * modify it under the terms of the GNU General Public License\r\n * as published by the Free Software Foundation; either version 2\r\n * of the License, or (at your option) any later version.\r\n *\r\n * This program is distributed in the hope that it will be useful,\r\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n * GNU General Public License for more details.\r\n *\r\n * You should have received a copy of the GNU General Public License\r\n * along with this program; if not, write to the Free Software\r\n * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\r\n */\r\npackage ch.bfh.egov.nutzenportfolio.action;\r\n\r\nimport javax.servlet.http.HttpServletRequest;\r\nimport javax.servlet.http.HttpServletResponse;\r\nimport org.apache.struts.action.Action;\r\nimport org.apache.struts.action.ActionForm;\r\nimport org.apache.struts.action.ActionForward;\r\nimport org.apache.struts.action.ActionMapping;\r\nimport ch.bfh.egov.nutzenportfolio.Constants;\r\n\r\npublic class ProjektattraktivitaetAction extends Action {\r\n\r\n    public ActionForward execute(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {\r\n        return mapping.findForward(Constants.SUCCESS);\r\n    }\r\n}\r\n",
		"id": "EvoSuiteBenchmark/46_nutzenportfolio/src/main/java/ch/bfh/egov/nutzenportfolio/action/ProjektattraktivitaetActionTest.java",
		"test_prompt": "// ProjektattraktivitaetActionTest.java\npackage ch.bfh.egov.nutzenportfolio.action;\n\nimport javax.servlet.http.HttpServletRequest;\nimport javax.servlet.http.HttpServletResponse;\nimport org.apache.struts.action.Action;\nimport org.apache.struts.action.ActionForm;\nimport org.apache.struts.action.ActionForward;\nimport org.apache.struts.action.ActionMapping;\nimport ch.bfh.egov.nutzenportfolio.Constants;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link ProjektattraktivitaetAction}.\n* It contains ten unit test cases for the {@link ProjektattraktivitaetAction#execute(ActionMapping, ActionForm, HttpServletRequest, HttpServletResponse)} method.\n*/\nclass ProjektattraktivitaetActionTest {"
	},
	{
		"original_code": "// BenutzerAction.java\n/**\r\n * Nutzenportfolio\r\n * Copyright (C) 2006 Kompetenzzentrum E-Business, Simon Bergamin\r\n *\r\n * This program is free software; you can redistribute it and/or\r\n * modify it under the terms of the GNU General Public License\r\n * as published by the Free Software Foundation; either version 2\r\n * of the License, or (at your option) any later version.\r\n *\r\n * This program is distributed in the hope that it will be useful,\r\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n * GNU General Public License for more details.\r\n *\r\n * You should have received a copy of the GNU General Public License\r\n * along with this program; if not, write to the Free Software\r\n * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\r\n */\r\npackage ch.bfh.egov.nutzenportfolio.action;\r\n\r\nimport java.util.List;\r\nimport javax.servlet.http.HttpServletRequest;\r\nimport javax.servlet.http.HttpServletResponse;\r\nimport javax.servlet.http.HttpSession;\r\nimport ch.bfh.egov.nutzenportfolio.Constants;\r\nimport ch.bfh.egov.nutzenportfolio.service.benutzer.BenutzerService;\r\nimport ch.bfh.egov.nutzenportfolio.tos.Benutzer;\r\nimport org.apache.commons.beanutils.BeanUtils;\r\nimport org.apache.commons.logging.Log;\r\nimport org.apache.commons.logging.LogFactory;\r\nimport org.apache.struts.action.ActionForm;\r\nimport org.apache.struts.action.ActionForward;\r\nimport org.apache.struts.action.ActionMapping;\r\nimport org.apache.struts.action.ActionMessage;\r\nimport org.apache.struts.action.ActionMessages;\r\nimport org.apache.struts.action.DynaActionForm;\r\nimport org.apache.struts.actions.DispatchAction;\r\n\r\npublic class BenutzerAction extends DispatchAction {\r\n\r\n    private Log logger = LogFactory.getLog(this.getClass());\r\n\r\n    private BenutzerService service;\r\n\r\n    public BenutzerAction(BenutzerService service) {\r\n        super();\r\n        this.service = service;\r\n    }\r\n\r\n    public ActionForward login(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {\r\n        DynaActionForm loginForm = (DynaActionForm) form;\r\n        if (loginValidationSuccessful(request, loginForm)) {\r\n            Benutzer benutzer = new Benutzer();\r\n            BeanUtils.copyProperties(benutzer, loginForm);\r\n            benutzer = service.loginSuccessful(benutzer);\r\n            if (benutzer != null) {\r\n                // mandantId in session stellen\r\n                HttpSession session = request.getSession();\r\n                logger.debug(\"mandantId: \" + benutzer.getMandantId());\r\n                session.setAttribute(\"mandantId\", benutzer.getMandantId());\r\n                return mapping.findForward(Constants.SUCCESS);\r\n            }\r\n        }\r\n        ActionMessages errors = new ActionMessages();\r\n        errors.add(ActionMessages.GLOBAL_MESSAGE, new ActionMessage(\"errors.login.failure\"));\r\n        saveMessages(request, errors);\r\n        return mapping.findForward(Constants.FAILURE);\r\n    }\r\n\r\n    public ActionForward logout(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {\r\n        // invalidate session\r\n        HttpSession session = request.getSession();\r\n        session.invalidate();\r\n        return mapping.findForward(Constants.LOGOUT);\r\n    }\r\n\r\n    public ActionForward list(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {\r\n        populate(request);\r\n        return mapping.findForward(Constants.LIST);\r\n    }\r\n\r\n    public ActionForward prepare(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {\r\n        DynaActionForm benutzerForm = (DynaActionForm) form;\r\n        if (isUpdate(request, benutzerForm)) {\r\n            Integer benutzerId = (Integer) benutzerForm.get(\"benutzerId\");\r\n            Benutzer benutzer = service.getBenutzer(benutzerId);\r\n            String passwort = benutzer.getPasswort();\r\n            benutzerForm.set(\"benutzername\", benutzer.getBenutzername());\r\n            benutzerForm.set(\"passwort\", passwort);\r\n            benutzerForm.set(\"passwort2\", passwort);\r\n            benutzerForm.set(\"update\", true);\r\n        }\r\n        return mapping.findForward(Constants.FORM);\r\n    }\r\n\r\n    public ActionForward deletequestion(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {\r\n        Benutzer benutzer = getBenutzer(request);\r\n        if (benutzer == null) {\r\n            populate(request);\r\n            return mapping.findForward(Constants.LIST);\r\n        }\r\n        ActionMessages messages = new ActionMessages();\r\n        messages.add(ActionMessages.GLOBAL_MESSAGE, new ActionMessage(\"messages.question.delete\", benutzer.getBenutzername()));\r\n        saveMessages(request, messages);\r\n        request.setAttribute(Constants.ACTION, Constants.BENUTZER_ACTION);\r\n        request.setAttribute(Constants.DISPATCH_YES, Constants.DELETE);\r\n        request.setAttribute(Constants.DISPATCH_NO, Constants.LIST);\r\n        request.setAttribute(Constants.ID_NAME, Constants.BENUTZER_ID);\r\n        request.setAttribute(Constants.ID_VALUE, benutzer.getBenutzerId());\r\n        return mapping.findForward(Constants.QUESTION);\r\n    }\r\n\r\n    public ActionForward delete(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {\r\n        Benutzer benutzer = getBenutzer(request);\r\n        if (benutzer == null) {\r\n            populate(request);\r\n            return mapping.findForward(Constants.LIST);\r\n        }\r\n        service.deleteBenutzer(benutzer.getBenutzerId());\r\n        populate(request);\r\n        return mapping.findForward(Constants.LIST);\r\n    }\r\n\r\n    public ActionForward insertOrUpdate(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {\r\n        // Formulardaten holen\r\n        DynaActionForm benutzerForm = (DynaActionForm) form;\r\n        Integer benutzerId = (Integer) benutzerForm.get(\"benutzerId\");\r\n        Integer mandantId = (Integer) request.getSession().getAttribute(\"mandantId\");\r\n        String benutzername = (String) benutzerForm.get(\"benutzername\");\r\n        String passwort = (String) benutzerForm.get(\"passwort\");\r\n        Benutzer benutzer = new Benutzer();\r\n        benutzer.setBenutzerId(benutzerId);\r\n        benutzer.setMandantId(mandantId);\r\n        benutzer.setBenutzername(benutzername);\r\n        benutzer.setPasswort(passwort);\r\n        // benutzername check auf unique\r\n        if (exists(request, benutzerForm)) {\r\n            ActionMessages errors = new ActionMessages();\r\n            errors.add(\"benutzername\", new ActionMessage(\"errors.duplicate\", \"Benutzername\"));\r\n            saveMessages(request, errors);\r\n            return mapping.findForward(Constants.FAILURE);\r\n        }\r\n        // update?\r\n        if (isUpdate(request, benutzerForm)) {\r\n            service.updateBenutzer(benutzer);\r\n        } else // insert\r\n        {\r\n            service.insertBenutzer(benutzer);\r\n        }\r\n        populate(request);\r\n        return mapping.findForward(Constants.SUCCESS);\r\n    }\r\n\r\n    private Benutzer getBenutzer(HttpServletRequest request) {\r\n        String benutzerIdParam = request.getParameter(\"benutzerId\");\r\n        Integer benutzerId = null;\r\n        try {\r\n            benutzerId = new Integer(benutzerIdParam);\r\n        } catch (Exception ex) {\r\n            logger.warn(\"Fehlende benutzerId!\");\r\n            return null;\r\n        }\r\n        Benutzer benutzer = service.getBenutzer(benutzerId);\r\n        if (benutzer == null) {\r\n            logger.warn(\"Benutzer mit der id \" + benutzerId + \" wurde nicht gefunden.\");\r\n            return null;\r\n        }\r\n        return benutzer;\r\n    }\r\n\r\n    private void populate(HttpServletRequest request) {\r\n        Integer mandantId = (Integer) request.getSession().getAttribute(Constants.MANDANT_ID);\r\n        List benutzer = service.getAllBenutzer(mandantId);\r\n        request.setAttribute(Constants.BENUTZER, benutzer);\r\n    }\r\n\r\n    private boolean isUpdate(HttpServletRequest request, DynaActionForm benutzerForm) {\r\n        Integer id = (Integer) benutzerForm.get(\"benutzerId\");\r\n        if (id == null || id == 0) {\r\n            return false;\r\n        }\r\n        return true;\r\n    }\r\n\r\n    private boolean exists(HttpServletRequest request, DynaActionForm benutzerForm) {\r\n        Integer id = (Integer) benutzerForm.get(\"benutzerId\");\r\n        String benutzername = (String) benutzerForm.get(\"benutzername\");\r\n        // update?\r\n        if (id != null && id != 0) {\r\n            Benutzer benutzer = service.getBenutzer(id);\r\n            // benutzername geï¿½ndert, ï¿½berprï¿½fen\r\n            if (!benutzername.equals(benutzer.getBenutzername())) {\r\n                return service.getBenutzerByBenutzername(benutzername) != null;\r\n            }\r\n        } else // insert\r\n        {\r\n            return service.getBenutzerByBenutzername(benutzername) != null;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    private boolean loginValidationSuccessful(HttpServletRequest request, DynaActionForm form) {\r\n        boolean isOk = true;\r\n        ActionMessages errors = new ActionMessages();\r\n        String benutzername = form.getString(\"benutzername\");\r\n        String passwort = form.getString(\"passwort\");\r\n        if (benutzername == null || benutzername.trim().length() == 0) {\r\n            errors.add(\"benutzername\", new ActionMessage(\"errors.required\", \"Benutzername\"));\r\n        }\r\n        if (passwort == null || passwort.trim().length() == 0) {\r\n            errors.add(\"passwort\", new ActionMessage(\"errors.required\", \"Passwort\"));\r\n        }\r\n        if (!errors.isEmpty()) {\r\n            saveErrors(request, errors);\r\n            isOk = false;\r\n        }\r\n        return isOk;\r\n    }\r\n}\r\n",
		"id": "EvoSuiteBenchmark/46_nutzenportfolio/src/main/java/ch/bfh/egov/nutzenportfolio/action/BenutzerActionTest0.java",
		"test_prompt": "// BenutzerActionTest0.java\npackage ch.bfh.egov.nutzenportfolio.action;\n\nimport java.util.List;\nimport javax.servlet.http.HttpServletRequest;\nimport javax.servlet.http.HttpServletResponse;\nimport javax.servlet.http.HttpSession;\nimport ch.bfh.egov.nutzenportfolio.Constants;\nimport ch.bfh.egov.nutzenportfolio.service.benutzer.BenutzerService;\nimport ch.bfh.egov.nutzenportfolio.tos.Benutzer;\nimport org.apache.commons.beanutils.BeanUtils;\nimport org.apache.commons.logging.Log;\nimport org.apache.commons.logging.LogFactory;\nimport org.apache.struts.action.ActionForm;\nimport org.apache.struts.action.ActionForward;\nimport org.apache.struts.action.ActionMapping;\nimport org.apache.struts.action.ActionMessage;\nimport org.apache.struts.action.ActionMessages;\nimport org.apache.struts.action.DynaActionForm;\nimport org.apache.struts.actions.DispatchAction;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link BenutzerAction}.\n* It contains ten unit test cases for the {@link BenutzerAction#login(ActionMapping, ActionForm, HttpServletRequest, HttpServletResponse)} method.\n*/\nclass BenutzerActionTest0 {"
	},
	{
		"original_code": "// BenutzerAction.java\n/**\r\n * Nutzenportfolio\r\n * Copyright (C) 2006 Kompetenzzentrum E-Business, Simon Bergamin\r\n *\r\n * This program is free software; you can redistribute it and/or\r\n * modify it under the terms of the GNU General Public License\r\n * as published by the Free Software Foundation; either version 2\r\n * of the License, or (at your option) any later version.\r\n *\r\n * This program is distributed in the hope that it will be useful,\r\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n * GNU General Public License for more details.\r\n *\r\n * You should have received a copy of the GNU General Public License\r\n * along with this program; if not, write to the Free Software\r\n * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\r\n */\r\npackage ch.bfh.egov.nutzenportfolio.action;\r\n\r\nimport java.util.List;\r\nimport javax.servlet.http.HttpServletRequest;\r\nimport javax.servlet.http.HttpServletResponse;\r\nimport javax.servlet.http.HttpSession;\r\nimport ch.bfh.egov.nutzenportfolio.Constants;\r\nimport ch.bfh.egov.nutzenportfolio.service.benutzer.BenutzerService;\r\nimport ch.bfh.egov.nutzenportfolio.tos.Benutzer;\r\nimport org.apache.commons.beanutils.BeanUtils;\r\nimport org.apache.commons.logging.Log;\r\nimport org.apache.commons.logging.LogFactory;\r\nimport org.apache.struts.action.ActionForm;\r\nimport org.apache.struts.action.ActionForward;\r\nimport org.apache.struts.action.ActionMapping;\r\nimport org.apache.struts.action.ActionMessage;\r\nimport org.apache.struts.action.ActionMessages;\r\nimport org.apache.struts.action.DynaActionForm;\r\nimport org.apache.struts.actions.DispatchAction;\r\n\r\npublic class BenutzerAction extends DispatchAction {\r\n\r\n    private Log logger = LogFactory.getLog(this.getClass());\r\n\r\n    private BenutzerService service;\r\n\r\n    public BenutzerAction(BenutzerService service) {\r\n        super();\r\n        this.service = service;\r\n    }\r\n\r\n    public ActionForward login(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {\r\n        DynaActionForm loginForm = (DynaActionForm) form;\r\n        if (loginValidationSuccessful(request, loginForm)) {\r\n            Benutzer benutzer = new Benutzer();\r\n            BeanUtils.copyProperties(benutzer, loginForm);\r\n            benutzer = service.loginSuccessful(benutzer);\r\n            if (benutzer != null) {\r\n                // mandantId in session stellen\r\n                HttpSession session = request.getSession();\r\n                logger.debug(\"mandantId: \" + benutzer.getMandantId());\r\n                session.setAttribute(\"mandantId\", benutzer.getMandantId());\r\n                return mapping.findForward(Constants.SUCCESS);\r\n            }\r\n        }\r\n        ActionMessages errors = new ActionMessages();\r\n        errors.add(ActionMessages.GLOBAL_MESSAGE, new ActionMessage(\"errors.login.failure\"));\r\n        saveMessages(request, errors);\r\n        return mapping.findForward(Constants.FAILURE);\r\n    }\r\n\r\n    public ActionForward logout(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {\r\n        // invalidate session\r\n        HttpSession session = request.getSession();\r\n        session.invalidate();\r\n        return mapping.findForward(Constants.LOGOUT);\r\n    }\r\n\r\n    public ActionForward list(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {\r\n        populate(request);\r\n        return mapping.findForward(Constants.LIST);\r\n    }\r\n\r\n    public ActionForward prepare(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {\r\n        DynaActionForm benutzerForm = (DynaActionForm) form;\r\n        if (isUpdate(request, benutzerForm)) {\r\n            Integer benutzerId = (Integer) benutzerForm.get(\"benutzerId\");\r\n            Benutzer benutzer = service.getBenutzer(benutzerId);\r\n            String passwort = benutzer.getPasswort();\r\n            benutzerForm.set(\"benutzername\", benutzer.getBenutzername());\r\n            benutzerForm.set(\"passwort\", passwort);\r\n            benutzerForm.set(\"passwort2\", passwort);\r\n            benutzerForm.set(\"update\", true);\r\n        }\r\n        return mapping.findForward(Constants.FORM);\r\n    }\r\n\r\n    public ActionForward deletequestion(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {\r\n        Benutzer benutzer = getBenutzer(request);\r\n        if (benutzer == null) {\r\n            populate(request);\r\n            return mapping.findForward(Constants.LIST);\r\n        }\r\n        ActionMessages messages = new ActionMessages();\r\n        messages.add(ActionMessages.GLOBAL_MESSAGE, new ActionMessage(\"messages.question.delete\", benutzer.getBenutzername()));\r\n        saveMessages(request, messages);\r\n        request.setAttribute(Constants.ACTION, Constants.BENUTZER_ACTION);\r\n        request.setAttribute(Constants.DISPATCH_YES, Constants.DELETE);\r\n        request.setAttribute(Constants.DISPATCH_NO, Constants.LIST);\r\n        request.setAttribute(Constants.ID_NAME, Constants.BENUTZER_ID);\r\n        request.setAttribute(Constants.ID_VALUE, benutzer.getBenutzerId());\r\n        return mapping.findForward(Constants.QUESTION);\r\n    }\r\n\r\n    public ActionForward delete(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {\r\n        Benutzer benutzer = getBenutzer(request);\r\n        if (benutzer == null) {\r\n            populate(request);\r\n            return mapping.findForward(Constants.LIST);\r\n        }\r\n        service.deleteBenutzer(benutzer.getBenutzerId());\r\n        populate(request);\r\n        return mapping.findForward(Constants.LIST);\r\n    }\r\n\r\n    public ActionForward insertOrUpdate(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {\r\n        // Formulardaten holen\r\n        DynaActionForm benutzerForm = (DynaActionForm) form;\r\n        Integer benutzerId = (Integer) benutzerForm.get(\"benutzerId\");\r\n        Integer mandantId = (Integer) request.getSession().getAttribute(\"mandantId\");\r\n        String benutzername = (String) benutzerForm.get(\"benutzername\");\r\n        String passwort = (String) benutzerForm.get(\"passwort\");\r\n        Benutzer benutzer = new Benutzer();\r\n        benutzer.setBenutzerId(benutzerId);\r\n        benutzer.setMandantId(mandantId);\r\n        benutzer.setBenutzername(benutzername);\r\n        benutzer.setPasswort(passwort);\r\n        // benutzername check auf unique\r\n        if (exists(request, benutzerForm)) {\r\n            ActionMessages errors = new ActionMessages();\r\n            errors.add(\"benutzername\", new ActionMessage(\"errors.duplicate\", \"Benutzername\"));\r\n            saveMessages(request, errors);\r\n            return mapping.findForward(Constants.FAILURE);\r\n        }\r\n        // update?\r\n        if (isUpdate(request, benutzerForm)) {\r\n            service.updateBenutzer(benutzer);\r\n        } else // insert\r\n        {\r\n            service.insertBenutzer(benutzer);\r\n        }\r\n        populate(request);\r\n        return mapping.findForward(Constants.SUCCESS);\r\n    }\r\n\r\n    private Benutzer getBenutzer(HttpServletRequest request) {\r\n        String benutzerIdParam = request.getParameter(\"benutzerId\");\r\n        Integer benutzerId = null;\r\n        try {\r\n            benutzerId = new Integer(benutzerIdParam);\r\n        } catch (Exception ex) {\r\n            logger.warn(\"Fehlende benutzerId!\");\r\n            return null;\r\n        }\r\n        Benutzer benutzer = service.getBenutzer(benutzerId);\r\n        if (benutzer == null) {\r\n            logger.warn(\"Benutzer mit der id \" + benutzerId + \" wurde nicht gefunden.\");\r\n            return null;\r\n        }\r\n        return benutzer;\r\n    }\r\n\r\n    private void populate(HttpServletRequest request) {\r\n        Integer mandantId = (Integer) request.getSession().getAttribute(Constants.MANDANT_ID);\r\n        List benutzer = service.getAllBenutzer(mandantId);\r\n        request.setAttribute(Constants.BENUTZER, benutzer);\r\n    }\r\n\r\n    private boolean isUpdate(HttpServletRequest request, DynaActionForm benutzerForm) {\r\n        Integer id = (Integer) benutzerForm.get(\"benutzerId\");\r\n        if (id == null || id == 0) {\r\n            return false;\r\n        }\r\n        return true;\r\n    }\r\n\r\n    private boolean exists(HttpServletRequest request, DynaActionForm benutzerForm) {\r\n        Integer id = (Integer) benutzerForm.get(\"benutzerId\");\r\n        String benutzername = (String) benutzerForm.get(\"benutzername\");\r\n        // update?\r\n        if (id != null && id != 0) {\r\n            Benutzer benutzer = service.getBenutzer(id);\r\n            // benutzername geï¿½ndert, ï¿½berprï¿½fen\r\n            if (!benutzername.equals(benutzer.getBenutzername())) {\r\n                return service.getBenutzerByBenutzername(benutzername) != null;\r\n            }\r\n        } else // insert\r\n        {\r\n            return service.getBenutzerByBenutzername(benutzername) != null;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    private boolean loginValidationSuccessful(HttpServletRequest request, DynaActionForm form) {\r\n        boolean isOk = true;\r\n        ActionMessages errors = new ActionMessages();\r\n        String benutzername = form.getString(\"benutzername\");\r\n        String passwort = form.getString(\"passwort\");\r\n        if (benutzername == null || benutzername.trim().length() == 0) {\r\n            errors.add(\"benutzername\", new ActionMessage(\"errors.required\", \"Benutzername\"));\r\n        }\r\n        if (passwort == null || passwort.trim().length() == 0) {\r\n            errors.add(\"passwort\", new ActionMessage(\"errors.required\", \"Passwort\"));\r\n        }\r\n        if (!errors.isEmpty()) {\r\n            saveErrors(request, errors);\r\n            isOk = false;\r\n        }\r\n        return isOk;\r\n    }\r\n}\r\n",
		"id": "EvoSuiteBenchmark/46_nutzenportfolio/src/main/java/ch/bfh/egov/nutzenportfolio/action/BenutzerActionTest1.java",
		"test_prompt": "// BenutzerActionTest1.java\npackage ch.bfh.egov.nutzenportfolio.action;\n\nimport java.util.List;\nimport javax.servlet.http.HttpServletRequest;\nimport javax.servlet.http.HttpServletResponse;\nimport javax.servlet.http.HttpSession;\nimport ch.bfh.egov.nutzenportfolio.Constants;\nimport ch.bfh.egov.nutzenportfolio.service.benutzer.BenutzerService;\nimport ch.bfh.egov.nutzenportfolio.tos.Benutzer;\nimport org.apache.commons.beanutils.BeanUtils;\nimport org.apache.commons.logging.Log;\nimport org.apache.commons.logging.LogFactory;\nimport org.apache.struts.action.ActionForm;\nimport org.apache.struts.action.ActionForward;\nimport org.apache.struts.action.ActionMapping;\nimport org.apache.struts.action.ActionMessage;\nimport org.apache.struts.action.ActionMessages;\nimport org.apache.struts.action.DynaActionForm;\nimport org.apache.struts.actions.DispatchAction;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link BenutzerAction}.\n* It contains ten unit test cases for the {@link BenutzerAction#logout(ActionMapping, ActionForm, HttpServletRequest, HttpServletResponse)} method.\n*/\nclass BenutzerActionTest1 {"
	},
	{
		"original_code": "// BenutzerAction.java\n/**\r\n * Nutzenportfolio\r\n * Copyright (C) 2006 Kompetenzzentrum E-Business, Simon Bergamin\r\n *\r\n * This program is free software; you can redistribute it and/or\r\n * modify it under the terms of the GNU General Public License\r\n * as published by the Free Software Foundation; either version 2\r\n * of the License, or (at your option) any later version.\r\n *\r\n * This program is distributed in the hope that it will be useful,\r\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n * GNU General Public License for more details.\r\n *\r\n * You should have received a copy of the GNU General Public License\r\n * along with this program; if not, write to the Free Software\r\n * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\r\n */\r\npackage ch.bfh.egov.nutzenportfolio.action;\r\n\r\nimport java.util.List;\r\nimport javax.servlet.http.HttpServletRequest;\r\nimport javax.servlet.http.HttpServletResponse;\r\nimport javax.servlet.http.HttpSession;\r\nimport ch.bfh.egov.nutzenportfolio.Constants;\r\nimport ch.bfh.egov.nutzenportfolio.service.benutzer.BenutzerService;\r\nimport ch.bfh.egov.nutzenportfolio.tos.Benutzer;\r\nimport org.apache.commons.beanutils.BeanUtils;\r\nimport org.apache.commons.logging.Log;\r\nimport org.apache.commons.logging.LogFactory;\r\nimport org.apache.struts.action.ActionForm;\r\nimport org.apache.struts.action.ActionForward;\r\nimport org.apache.struts.action.ActionMapping;\r\nimport org.apache.struts.action.ActionMessage;\r\nimport org.apache.struts.action.ActionMessages;\r\nimport org.apache.struts.action.DynaActionForm;\r\nimport org.apache.struts.actions.DispatchAction;\r\n\r\npublic class BenutzerAction extends DispatchAction {\r\n\r\n    private Log logger = LogFactory.getLog(this.getClass());\r\n\r\n    private BenutzerService service;\r\n\r\n    public BenutzerAction(BenutzerService service) {\r\n        super();\r\n        this.service = service;\r\n    }\r\n\r\n    public ActionForward login(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {\r\n        DynaActionForm loginForm = (DynaActionForm) form;\r\n        if (loginValidationSuccessful(request, loginForm)) {\r\n            Benutzer benutzer = new Benutzer();\r\n            BeanUtils.copyProperties(benutzer, loginForm);\r\n            benutzer = service.loginSuccessful(benutzer);\r\n            if (benutzer != null) {\r\n                // mandantId in session stellen\r\n                HttpSession session = request.getSession();\r\n                logger.debug(\"mandantId: \" + benutzer.getMandantId());\r\n                session.setAttribute(\"mandantId\", benutzer.getMandantId());\r\n                return mapping.findForward(Constants.SUCCESS);\r\n            }\r\n        }\r\n        ActionMessages errors = new ActionMessages();\r\n        errors.add(ActionMessages.GLOBAL_MESSAGE, new ActionMessage(\"errors.login.failure\"));\r\n        saveMessages(request, errors);\r\n        return mapping.findForward(Constants.FAILURE);\r\n    }\r\n\r\n    public ActionForward logout(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {\r\n        // invalidate session\r\n        HttpSession session = request.getSession();\r\n        session.invalidate();\r\n        return mapping.findForward(Constants.LOGOUT);\r\n    }\r\n\r\n    public ActionForward list(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {\r\n        populate(request);\r\n        return mapping.findForward(Constants.LIST);\r\n    }\r\n\r\n    public ActionForward prepare(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {\r\n        DynaActionForm benutzerForm = (DynaActionForm) form;\r\n        if (isUpdate(request, benutzerForm)) {\r\n            Integer benutzerId = (Integer) benutzerForm.get(\"benutzerId\");\r\n            Benutzer benutzer = service.getBenutzer(benutzerId);\r\n            String passwort = benutzer.getPasswort();\r\n            benutzerForm.set(\"benutzername\", benutzer.getBenutzername());\r\n            benutzerForm.set(\"passwort\", passwort);\r\n            benutzerForm.set(\"passwort2\", passwort);\r\n            benutzerForm.set(\"update\", true);\r\n        }\r\n        return mapping.findForward(Constants.FORM);\r\n    }\r\n\r\n    public ActionForward deletequestion(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {\r\n        Benutzer benutzer = getBenutzer(request);\r\n        if (benutzer == null) {\r\n            populate(request);\r\n            return mapping.findForward(Constants.LIST);\r\n        }\r\n        ActionMessages messages = new ActionMessages();\r\n        messages.add(ActionMessages.GLOBAL_MESSAGE, new ActionMessage(\"messages.question.delete\", benutzer.getBenutzername()));\r\n        saveMessages(request, messages);\r\n        request.setAttribute(Constants.ACTION, Constants.BENUTZER_ACTION);\r\n        request.setAttribute(Constants.DISPATCH_YES, Constants.DELETE);\r\n        request.setAttribute(Constants.DISPATCH_NO, Constants.LIST);\r\n        request.setAttribute(Constants.ID_NAME, Constants.BENUTZER_ID);\r\n        request.setAttribute(Constants.ID_VALUE, benutzer.getBenutzerId());\r\n        return mapping.findForward(Constants.QUESTION);\r\n    }\r\n\r\n    public ActionForward delete(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {\r\n        Benutzer benutzer = getBenutzer(request);\r\n        if (benutzer == null) {\r\n            populate(request);\r\n            return mapping.findForward(Constants.LIST);\r\n        }\r\n        service.deleteBenutzer(benutzer.getBenutzerId());\r\n        populate(request);\r\n        return mapping.findForward(Constants.LIST);\r\n    }\r\n\r\n    public ActionForward insertOrUpdate(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {\r\n        // Formulardaten holen\r\n        DynaActionForm benutzerForm = (DynaActionForm) form;\r\n        Integer benutzerId = (Integer) benutzerForm.get(\"benutzerId\");\r\n        Integer mandantId = (Integer) request.getSession().getAttribute(\"mandantId\");\r\n        String benutzername = (String) benutzerForm.get(\"benutzername\");\r\n        String passwort = (String) benutzerForm.get(\"passwort\");\r\n        Benutzer benutzer = new Benutzer();\r\n        benutzer.setBenutzerId(benutzerId);\r\n        benutzer.setMandantId(mandantId);\r\n        benutzer.setBenutzername(benutzername);\r\n        benutzer.setPasswort(passwort);\r\n        // benutzername check auf unique\r\n        if (exists(request, benutzerForm)) {\r\n            ActionMessages errors = new ActionMessages();\r\n            errors.add(\"benutzername\", new ActionMessage(\"errors.duplicate\", \"Benutzername\"));\r\n            saveMessages(request, errors);\r\n            return mapping.findForward(Constants.FAILURE);\r\n        }\r\n        // update?\r\n        if (isUpdate(request, benutzerForm)) {\r\n            service.updateBenutzer(benutzer);\r\n        } else // insert\r\n        {\r\n            service.insertBenutzer(benutzer);\r\n        }\r\n        populate(request);\r\n        return mapping.findForward(Constants.SUCCESS);\r\n    }\r\n\r\n    private Benutzer getBenutzer(HttpServletRequest request) {\r\n        String benutzerIdParam = request.getParameter(\"benutzerId\");\r\n        Integer benutzerId = null;\r\n        try {\r\n            benutzerId = new Integer(benutzerIdParam);\r\n        } catch (Exception ex) {\r\n            logger.warn(\"Fehlende benutzerId!\");\r\n            return null;\r\n        }\r\n        Benutzer benutzer = service.getBenutzer(benutzerId);\r\n        if (benutzer == null) {\r\n            logger.warn(\"Benutzer mit der id \" + benutzerId + \" wurde nicht gefunden.\");\r\n            return null;\r\n        }\r\n        return benutzer;\r\n    }\r\n\r\n    private void populate(HttpServletRequest request) {\r\n        Integer mandantId = (Integer) request.getSession().getAttribute(Constants.MANDANT_ID);\r\n        List benutzer = service.getAllBenutzer(mandantId);\r\n        request.setAttribute(Constants.BENUTZER, benutzer);\r\n    }\r\n\r\n    private boolean isUpdate(HttpServletRequest request, DynaActionForm benutzerForm) {\r\n        Integer id = (Integer) benutzerForm.get(\"benutzerId\");\r\n        if (id == null || id == 0) {\r\n            return false;\r\n        }\r\n        return true;\r\n    }\r\n\r\n    private boolean exists(HttpServletRequest request, DynaActionForm benutzerForm) {\r\n        Integer id = (Integer) benutzerForm.get(\"benutzerId\");\r\n        String benutzername = (String) benutzerForm.get(\"benutzername\");\r\n        // update?\r\n        if (id != null && id != 0) {\r\n            Benutzer benutzer = service.getBenutzer(id);\r\n            // benutzername geï¿½ndert, ï¿½berprï¿½fen\r\n            if (!benutzername.equals(benutzer.getBenutzername())) {\r\n                return service.getBenutzerByBenutzername(benutzername) != null;\r\n            }\r\n        } else // insert\r\n        {\r\n            return service.getBenutzerByBenutzername(benutzername) != null;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    private boolean loginValidationSuccessful(HttpServletRequest request, DynaActionForm form) {\r\n        boolean isOk = true;\r\n        ActionMessages errors = new ActionMessages();\r\n        String benutzername = form.getString(\"benutzername\");\r\n        String passwort = form.getString(\"passwort\");\r\n        if (benutzername == null || benutzername.trim().length() == 0) {\r\n            errors.add(\"benutzername\", new ActionMessage(\"errors.required\", \"Benutzername\"));\r\n        }\r\n        if (passwort == null || passwort.trim().length() == 0) {\r\n            errors.add(\"passwort\", new ActionMessage(\"errors.required\", \"Passwort\"));\r\n        }\r\n        if (!errors.isEmpty()) {\r\n            saveErrors(request, errors);\r\n            isOk = false;\r\n        }\r\n        return isOk;\r\n    }\r\n}\r\n",
		"id": "EvoSuiteBenchmark/46_nutzenportfolio/src/main/java/ch/bfh/egov/nutzenportfolio/action/BenutzerActionTest2.java",
		"test_prompt": "// BenutzerActionTest2.java\npackage ch.bfh.egov.nutzenportfolio.action;\n\nimport java.util.List;\nimport javax.servlet.http.HttpServletRequest;\nimport javax.servlet.http.HttpServletResponse;\nimport javax.servlet.http.HttpSession;\nimport ch.bfh.egov.nutzenportfolio.Constants;\nimport ch.bfh.egov.nutzenportfolio.service.benutzer.BenutzerService;\nimport ch.bfh.egov.nutzenportfolio.tos.Benutzer;\nimport org.apache.commons.beanutils.BeanUtils;\nimport org.apache.commons.logging.Log;\nimport org.apache.commons.logging.LogFactory;\nimport org.apache.struts.action.ActionForm;\nimport org.apache.struts.action.ActionForward;\nimport org.apache.struts.action.ActionMapping;\nimport org.apache.struts.action.ActionMessage;\nimport org.apache.struts.action.ActionMessages;\nimport org.apache.struts.action.DynaActionForm;\nimport org.apache.struts.actions.DispatchAction;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link BenutzerAction}.\n* It contains ten unit test cases for the {@link BenutzerAction#list(ActionMapping, ActionForm, HttpServletRequest, HttpServletResponse)} method.\n*/\nclass BenutzerActionTest2 {"
	},
	{
		"original_code": "// BenutzerAction.java\n/**\r\n * Nutzenportfolio\r\n * Copyright (C) 2006 Kompetenzzentrum E-Business, Simon Bergamin\r\n *\r\n * This program is free software; you can redistribute it and/or\r\n * modify it under the terms of the GNU General Public License\r\n * as published by the Free Software Foundation; either version 2\r\n * of the License, or (at your option) any later version.\r\n *\r\n * This program is distributed in the hope that it will be useful,\r\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n * GNU General Public License for more details.\r\n *\r\n * You should have received a copy of the GNU General Public License\r\n * along with this program; if not, write to the Free Software\r\n * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\r\n */\r\npackage ch.bfh.egov.nutzenportfolio.action;\r\n\r\nimport java.util.List;\r\nimport javax.servlet.http.HttpServletRequest;\r\nimport javax.servlet.http.HttpServletResponse;\r\nimport javax.servlet.http.HttpSession;\r\nimport ch.bfh.egov.nutzenportfolio.Constants;\r\nimport ch.bfh.egov.nutzenportfolio.service.benutzer.BenutzerService;\r\nimport ch.bfh.egov.nutzenportfolio.tos.Benutzer;\r\nimport org.apache.commons.beanutils.BeanUtils;\r\nimport org.apache.commons.logging.Log;\r\nimport org.apache.commons.logging.LogFactory;\r\nimport org.apache.struts.action.ActionForm;\r\nimport org.apache.struts.action.ActionForward;\r\nimport org.apache.struts.action.ActionMapping;\r\nimport org.apache.struts.action.ActionMessage;\r\nimport org.apache.struts.action.ActionMessages;\r\nimport org.apache.struts.action.DynaActionForm;\r\nimport org.apache.struts.actions.DispatchAction;\r\n\r\npublic class BenutzerAction extends DispatchAction {\r\n\r\n    private Log logger = LogFactory.getLog(this.getClass());\r\n\r\n    private BenutzerService service;\r\n\r\n    public BenutzerAction(BenutzerService service) {\r\n        super();\r\n        this.service = service;\r\n    }\r\n\r\n    public ActionForward login(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {\r\n        DynaActionForm loginForm = (DynaActionForm) form;\r\n        if (loginValidationSuccessful(request, loginForm)) {\r\n            Benutzer benutzer = new Benutzer();\r\n            BeanUtils.copyProperties(benutzer, loginForm);\r\n            benutzer = service.loginSuccessful(benutzer);\r\n            if (benutzer != null) {\r\n                // mandantId in session stellen\r\n                HttpSession session = request.getSession();\r\n                logger.debug(\"mandantId: \" + benutzer.getMandantId());\r\n                session.setAttribute(\"mandantId\", benutzer.getMandantId());\r\n                return mapping.findForward(Constants.SUCCESS);\r\n            }\r\n        }\r\n        ActionMessages errors = new ActionMessages();\r\n        errors.add(ActionMessages.GLOBAL_MESSAGE, new ActionMessage(\"errors.login.failure\"));\r\n        saveMessages(request, errors);\r\n        return mapping.findForward(Constants.FAILURE);\r\n    }\r\n\r\n    public ActionForward logout(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {\r\n        // invalidate session\r\n        HttpSession session = request.getSession();\r\n        session.invalidate();\r\n        return mapping.findForward(Constants.LOGOUT);\r\n    }\r\n\r\n    public ActionForward list(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {\r\n        populate(request);\r\n        return mapping.findForward(Constants.LIST);\r\n    }\r\n\r\n    public ActionForward prepare(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {\r\n        DynaActionForm benutzerForm = (DynaActionForm) form;\r\n        if (isUpdate(request, benutzerForm)) {\r\n            Integer benutzerId = (Integer) benutzerForm.get(\"benutzerId\");\r\n            Benutzer benutzer = service.getBenutzer(benutzerId);\r\n            String passwort = benutzer.getPasswort();\r\n            benutzerForm.set(\"benutzername\", benutzer.getBenutzername());\r\n            benutzerForm.set(\"passwort\", passwort);\r\n            benutzerForm.set(\"passwort2\", passwort);\r\n            benutzerForm.set(\"update\", true);\r\n        }\r\n        return mapping.findForward(Constants.FORM);\r\n    }\r\n\r\n    public ActionForward deletequestion(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {\r\n        Benutzer benutzer = getBenutzer(request);\r\n        if (benutzer == null) {\r\n            populate(request);\r\n            return mapping.findForward(Constants.LIST);\r\n        }\r\n        ActionMessages messages = new ActionMessages();\r\n        messages.add(ActionMessages.GLOBAL_MESSAGE, new ActionMessage(\"messages.question.delete\", benutzer.getBenutzername()));\r\n        saveMessages(request, messages);\r\n        request.setAttribute(Constants.ACTION, Constants.BENUTZER_ACTION);\r\n        request.setAttribute(Constants.DISPATCH_YES, Constants.DELETE);\r\n        request.setAttribute(Constants.DISPATCH_NO, Constants.LIST);\r\n        request.setAttribute(Constants.ID_NAME, Constants.BENUTZER_ID);\r\n        request.setAttribute(Constants.ID_VALUE, benutzer.getBenutzerId());\r\n        return mapping.findForward(Constants.QUESTION);\r\n    }\r\n\r\n    public ActionForward delete(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {\r\n        Benutzer benutzer = getBenutzer(request);\r\n        if (benutzer == null) {\r\n            populate(request);\r\n            return mapping.findForward(Constants.LIST);\r\n        }\r\n        service.deleteBenutzer(benutzer.getBenutzerId());\r\n        populate(request);\r\n        return mapping.findForward(Constants.LIST);\r\n    }\r\n\r\n    public ActionForward insertOrUpdate(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {\r\n        // Formulardaten holen\r\n        DynaActionForm benutzerForm = (DynaActionForm) form;\r\n        Integer benutzerId = (Integer) benutzerForm.get(\"benutzerId\");\r\n        Integer mandantId = (Integer) request.getSession().getAttribute(\"mandantId\");\r\n        String benutzername = (String) benutzerForm.get(\"benutzername\");\r\n        String passwort = (String) benutzerForm.get(\"passwort\");\r\n        Benutzer benutzer = new Benutzer();\r\n        benutzer.setBenutzerId(benutzerId);\r\n        benutzer.setMandantId(mandantId);\r\n        benutzer.setBenutzername(benutzername);\r\n        benutzer.setPasswort(passwort);\r\n        // benutzername check auf unique\r\n        if (exists(request, benutzerForm)) {\r\n            ActionMessages errors = new ActionMessages();\r\n            errors.add(\"benutzername\", new ActionMessage(\"errors.duplicate\", \"Benutzername\"));\r\n            saveMessages(request, errors);\r\n            return mapping.findForward(Constants.FAILURE);\r\n        }\r\n        // update?\r\n        if (isUpdate(request, benutzerForm)) {\r\n            service.updateBenutzer(benutzer);\r\n        } else // insert\r\n        {\r\n            service.insertBenutzer(benutzer);\r\n        }\r\n        populate(request);\r\n        return mapping.findForward(Constants.SUCCESS);\r\n    }\r\n\r\n    private Benutzer getBenutzer(HttpServletRequest request) {\r\n        String benutzerIdParam = request.getParameter(\"benutzerId\");\r\n        Integer benutzerId = null;\r\n        try {\r\n            benutzerId = new Integer(benutzerIdParam);\r\n        } catch (Exception ex) {\r\n            logger.warn(\"Fehlende benutzerId!\");\r\n            return null;\r\n        }\r\n        Benutzer benutzer = service.getBenutzer(benutzerId);\r\n        if (benutzer == null) {\r\n            logger.warn(\"Benutzer mit der id \" + benutzerId + \" wurde nicht gefunden.\");\r\n            return null;\r\n        }\r\n        return benutzer;\r\n    }\r\n\r\n    private void populate(HttpServletRequest request) {\r\n        Integer mandantId = (Integer) request.getSession().getAttribute(Constants.MANDANT_ID);\r\n        List benutzer = service.getAllBenutzer(mandantId);\r\n        request.setAttribute(Constants.BENUTZER, benutzer);\r\n    }\r\n\r\n    private boolean isUpdate(HttpServletRequest request, DynaActionForm benutzerForm) {\r\n        Integer id = (Integer) benutzerForm.get(\"benutzerId\");\r\n        if (id == null || id == 0) {\r\n            return false;\r\n        }\r\n        return true;\r\n    }\r\n\r\n    private boolean exists(HttpServletRequest request, DynaActionForm benutzerForm) {\r\n        Integer id = (Integer) benutzerForm.get(\"benutzerId\");\r\n        String benutzername = (String) benutzerForm.get(\"benutzername\");\r\n        // update?\r\n        if (id != null && id != 0) {\r\n            Benutzer benutzer = service.getBenutzer(id);\r\n            // benutzername geï¿½ndert, ï¿½berprï¿½fen\r\n            if (!benutzername.equals(benutzer.getBenutzername())) {\r\n                return service.getBenutzerByBenutzername(benutzername) != null;\r\n            }\r\n        } else // insert\r\n        {\r\n            return service.getBenutzerByBenutzername(benutzername) != null;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    private boolean loginValidationSuccessful(HttpServletRequest request, DynaActionForm form) {\r\n        boolean isOk = true;\r\n        ActionMessages errors = new ActionMessages();\r\n        String benutzername = form.getString(\"benutzername\");\r\n        String passwort = form.getString(\"passwort\");\r\n        if (benutzername == null || benutzername.trim().length() == 0) {\r\n            errors.add(\"benutzername\", new ActionMessage(\"errors.required\", \"Benutzername\"));\r\n        }\r\n        if (passwort == null || passwort.trim().length() == 0) {\r\n            errors.add(\"passwort\", new ActionMessage(\"errors.required\", \"Passwort\"));\r\n        }\r\n        if (!errors.isEmpty()) {\r\n            saveErrors(request, errors);\r\n            isOk = false;\r\n        }\r\n        return isOk;\r\n    }\r\n}\r\n",
		"id": "EvoSuiteBenchmark/46_nutzenportfolio/src/main/java/ch/bfh/egov/nutzenportfolio/action/BenutzerActionTest3.java",
		"test_prompt": "// BenutzerActionTest3.java\npackage ch.bfh.egov.nutzenportfolio.action;\n\nimport java.util.List;\nimport javax.servlet.http.HttpServletRequest;\nimport javax.servlet.http.HttpServletResponse;\nimport javax.servlet.http.HttpSession;\nimport ch.bfh.egov.nutzenportfolio.Constants;\nimport ch.bfh.egov.nutzenportfolio.service.benutzer.BenutzerService;\nimport ch.bfh.egov.nutzenportfolio.tos.Benutzer;\nimport org.apache.commons.beanutils.BeanUtils;\nimport org.apache.commons.logging.Log;\nimport org.apache.commons.logging.LogFactory;\nimport org.apache.struts.action.ActionForm;\nimport org.apache.struts.action.ActionForward;\nimport org.apache.struts.action.ActionMapping;\nimport org.apache.struts.action.ActionMessage;\nimport org.apache.struts.action.ActionMessages;\nimport org.apache.struts.action.DynaActionForm;\nimport org.apache.struts.actions.DispatchAction;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link BenutzerAction}.\n* It contains ten unit test cases for the {@link BenutzerAction#prepare(ActionMapping, ActionForm, HttpServletRequest, HttpServletResponse)} method.\n*/\nclass BenutzerActionTest3 {"
	},
	{
		"original_code": "// BenutzerAction.java\n/**\r\n * Nutzenportfolio\r\n * Copyright (C) 2006 Kompetenzzentrum E-Business, Simon Bergamin\r\n *\r\n * This program is free software; you can redistribute it and/or\r\n * modify it under the terms of the GNU General Public License\r\n * as published by the Free Software Foundation; either version 2\r\n * of the License, or (at your option) any later version.\r\n *\r\n * This program is distributed in the hope that it will be useful,\r\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n * GNU General Public License for more details.\r\n *\r\n * You should have received a copy of the GNU General Public License\r\n * along with this program; if not, write to the Free Software\r\n * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\r\n */\r\npackage ch.bfh.egov.nutzenportfolio.action;\r\n\r\nimport java.util.List;\r\nimport javax.servlet.http.HttpServletRequest;\r\nimport javax.servlet.http.HttpServletResponse;\r\nimport javax.servlet.http.HttpSession;\r\nimport ch.bfh.egov.nutzenportfolio.Constants;\r\nimport ch.bfh.egov.nutzenportfolio.service.benutzer.BenutzerService;\r\nimport ch.bfh.egov.nutzenportfolio.tos.Benutzer;\r\nimport org.apache.commons.beanutils.BeanUtils;\r\nimport org.apache.commons.logging.Log;\r\nimport org.apache.commons.logging.LogFactory;\r\nimport org.apache.struts.action.ActionForm;\r\nimport org.apache.struts.action.ActionForward;\r\nimport org.apache.struts.action.ActionMapping;\r\nimport org.apache.struts.action.ActionMessage;\r\nimport org.apache.struts.action.ActionMessages;\r\nimport org.apache.struts.action.DynaActionForm;\r\nimport org.apache.struts.actions.DispatchAction;\r\n\r\npublic class BenutzerAction extends DispatchAction {\r\n\r\n    private Log logger = LogFactory.getLog(this.getClass());\r\n\r\n    private BenutzerService service;\r\n\r\n    public BenutzerAction(BenutzerService service) {\r\n        super();\r\n        this.service = service;\r\n    }\r\n\r\n    public ActionForward login(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {\r\n        DynaActionForm loginForm = (DynaActionForm) form;\r\n        if (loginValidationSuccessful(request, loginForm)) {\r\n            Benutzer benutzer = new Benutzer();\r\n            BeanUtils.copyProperties(benutzer, loginForm);\r\n            benutzer = service.loginSuccessful(benutzer);\r\n            if (benutzer != null) {\r\n                // mandantId in session stellen\r\n                HttpSession session = request.getSession();\r\n                logger.debug(\"mandantId: \" + benutzer.getMandantId());\r\n                session.setAttribute(\"mandantId\", benutzer.getMandantId());\r\n                return mapping.findForward(Constants.SUCCESS);\r\n            }\r\n        }\r\n        ActionMessages errors = new ActionMessages();\r\n        errors.add(ActionMessages.GLOBAL_MESSAGE, new ActionMessage(\"errors.login.failure\"));\r\n        saveMessages(request, errors);\r\n        return mapping.findForward(Constants.FAILURE);\r\n    }\r\n\r\n    public ActionForward logout(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {\r\n        // invalidate session\r\n        HttpSession session = request.getSession();\r\n        session.invalidate();\r\n        return mapping.findForward(Constants.LOGOUT);\r\n    }\r\n\r\n    public ActionForward list(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {\r\n        populate(request);\r\n        return mapping.findForward(Constants.LIST);\r\n    }\r\n\r\n    public ActionForward prepare(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {\r\n        DynaActionForm benutzerForm = (DynaActionForm) form;\r\n        if (isUpdate(request, benutzerForm)) {\r\n            Integer benutzerId = (Integer) benutzerForm.get(\"benutzerId\");\r\n            Benutzer benutzer = service.getBenutzer(benutzerId);\r\n            String passwort = benutzer.getPasswort();\r\n            benutzerForm.set(\"benutzername\", benutzer.getBenutzername());\r\n            benutzerForm.set(\"passwort\", passwort);\r\n            benutzerForm.set(\"passwort2\", passwort);\r\n            benutzerForm.set(\"update\", true);\r\n        }\r\n        return mapping.findForward(Constants.FORM);\r\n    }\r\n\r\n    public ActionForward deletequestion(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {\r\n        Benutzer benutzer = getBenutzer(request);\r\n        if (benutzer == null) {\r\n            populate(request);\r\n            return mapping.findForward(Constants.LIST);\r\n        }\r\n        ActionMessages messages = new ActionMessages();\r\n        messages.add(ActionMessages.GLOBAL_MESSAGE, new ActionMessage(\"messages.question.delete\", benutzer.getBenutzername()));\r\n        saveMessages(request, messages);\r\n        request.setAttribute(Constants.ACTION, Constants.BENUTZER_ACTION);\r\n        request.setAttribute(Constants.DISPATCH_YES, Constants.DELETE);\r\n        request.setAttribute(Constants.DISPATCH_NO, Constants.LIST);\r\n        request.setAttribute(Constants.ID_NAME, Constants.BENUTZER_ID);\r\n        request.setAttribute(Constants.ID_VALUE, benutzer.getBenutzerId());\r\n        return mapping.findForward(Constants.QUESTION);\r\n    }\r\n\r\n    public ActionForward delete(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {\r\n        Benutzer benutzer = getBenutzer(request);\r\n        if (benutzer == null) {\r\n            populate(request);\r\n            return mapping.findForward(Constants.LIST);\r\n        }\r\n        service.deleteBenutzer(benutzer.getBenutzerId());\r\n        populate(request);\r\n        return mapping.findForward(Constants.LIST);\r\n    }\r\n\r\n    public ActionForward insertOrUpdate(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {\r\n        // Formulardaten holen\r\n        DynaActionForm benutzerForm = (DynaActionForm) form;\r\n        Integer benutzerId = (Integer) benutzerForm.get(\"benutzerId\");\r\n        Integer mandantId = (Integer) request.getSession().getAttribute(\"mandantId\");\r\n        String benutzername = (String) benutzerForm.get(\"benutzername\");\r\n        String passwort = (String) benutzerForm.get(\"passwort\");\r\n        Benutzer benutzer = new Benutzer();\r\n        benutzer.setBenutzerId(benutzerId);\r\n        benutzer.setMandantId(mandantId);\r\n        benutzer.setBenutzername(benutzername);\r\n        benutzer.setPasswort(passwort);\r\n        // benutzername check auf unique\r\n        if (exists(request, benutzerForm)) {\r\n            ActionMessages errors = new ActionMessages();\r\n            errors.add(\"benutzername\", new ActionMessage(\"errors.duplicate\", \"Benutzername\"));\r\n            saveMessages(request, errors);\r\n            return mapping.findForward(Constants.FAILURE);\r\n        }\r\n        // update?\r\n        if (isUpdate(request, benutzerForm)) {\r\n            service.updateBenutzer(benutzer);\r\n        } else // insert\r\n        {\r\n            service.insertBenutzer(benutzer);\r\n        }\r\n        populate(request);\r\n        return mapping.findForward(Constants.SUCCESS);\r\n    }\r\n\r\n    private Benutzer getBenutzer(HttpServletRequest request) {\r\n        String benutzerIdParam = request.getParameter(\"benutzerId\");\r\n        Integer benutzerId = null;\r\n        try {\r\n            benutzerId = new Integer(benutzerIdParam);\r\n        } catch (Exception ex) {\r\n            logger.warn(\"Fehlende benutzerId!\");\r\n            return null;\r\n        }\r\n        Benutzer benutzer = service.getBenutzer(benutzerId);\r\n        if (benutzer == null) {\r\n            logger.warn(\"Benutzer mit der id \" + benutzerId + \" wurde nicht gefunden.\");\r\n            return null;\r\n        }\r\n        return benutzer;\r\n    }\r\n\r\n    private void populate(HttpServletRequest request) {\r\n        Integer mandantId = (Integer) request.getSession().getAttribute(Constants.MANDANT_ID);\r\n        List benutzer = service.getAllBenutzer(mandantId);\r\n        request.setAttribute(Constants.BENUTZER, benutzer);\r\n    }\r\n\r\n    private boolean isUpdate(HttpServletRequest request, DynaActionForm benutzerForm) {\r\n        Integer id = (Integer) benutzerForm.get(\"benutzerId\");\r\n        if (id == null || id == 0) {\r\n            return false;\r\n        }\r\n        return true;\r\n    }\r\n\r\n    private boolean exists(HttpServletRequest request, DynaActionForm benutzerForm) {\r\n        Integer id = (Integer) benutzerForm.get(\"benutzerId\");\r\n        String benutzername = (String) benutzerForm.get(\"benutzername\");\r\n        // update?\r\n        if (id != null && id != 0) {\r\n            Benutzer benutzer = service.getBenutzer(id);\r\n            // benutzername geï¿½ndert, ï¿½berprï¿½fen\r\n            if (!benutzername.equals(benutzer.getBenutzername())) {\r\n                return service.getBenutzerByBenutzername(benutzername) != null;\r\n            }\r\n        } else // insert\r\n        {\r\n            return service.getBenutzerByBenutzername(benutzername) != null;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    private boolean loginValidationSuccessful(HttpServletRequest request, DynaActionForm form) {\r\n        boolean isOk = true;\r\n        ActionMessages errors = new ActionMessages();\r\n        String benutzername = form.getString(\"benutzername\");\r\n        String passwort = form.getString(\"passwort\");\r\n        if (benutzername == null || benutzername.trim().length() == 0) {\r\n            errors.add(\"benutzername\", new ActionMessage(\"errors.required\", \"Benutzername\"));\r\n        }\r\n        if (passwort == null || passwort.trim().length() == 0) {\r\n            errors.add(\"passwort\", new ActionMessage(\"errors.required\", \"Passwort\"));\r\n        }\r\n        if (!errors.isEmpty()) {\r\n            saveErrors(request, errors);\r\n            isOk = false;\r\n        }\r\n        return isOk;\r\n    }\r\n}\r\n",
		"id": "EvoSuiteBenchmark/46_nutzenportfolio/src/main/java/ch/bfh/egov/nutzenportfolio/action/BenutzerActionTest4.java",
		"test_prompt": "// BenutzerActionTest4.java\npackage ch.bfh.egov.nutzenportfolio.action;\n\nimport java.util.List;\nimport javax.servlet.http.HttpServletRequest;\nimport javax.servlet.http.HttpServletResponse;\nimport javax.servlet.http.HttpSession;\nimport ch.bfh.egov.nutzenportfolio.Constants;\nimport ch.bfh.egov.nutzenportfolio.service.benutzer.BenutzerService;\nimport ch.bfh.egov.nutzenportfolio.tos.Benutzer;\nimport org.apache.commons.beanutils.BeanUtils;\nimport org.apache.commons.logging.Log;\nimport org.apache.commons.logging.LogFactory;\nimport org.apache.struts.action.ActionForm;\nimport org.apache.struts.action.ActionForward;\nimport org.apache.struts.action.ActionMapping;\nimport org.apache.struts.action.ActionMessage;\nimport org.apache.struts.action.ActionMessages;\nimport org.apache.struts.action.DynaActionForm;\nimport org.apache.struts.actions.DispatchAction;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link BenutzerAction}.\n* It contains ten unit test cases for the {@link BenutzerAction#deletequestion(ActionMapping, ActionForm, HttpServletRequest, HttpServletResponse)} method.\n*/\nclass BenutzerActionTest4 {"
	},
	{
		"original_code": "// BenutzerAction.java\n/**\r\n * Nutzenportfolio\r\n * Copyright (C) 2006 Kompetenzzentrum E-Business, Simon Bergamin\r\n *\r\n * This program is free software; you can redistribute it and/or\r\n * modify it under the terms of the GNU General Public License\r\n * as published by the Free Software Foundation; either version 2\r\n * of the License, or (at your option) any later version.\r\n *\r\n * This program is distributed in the hope that it will be useful,\r\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n * GNU General Public License for more details.\r\n *\r\n * You should have received a copy of the GNU General Public License\r\n * along with this program; if not, write to the Free Software\r\n * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\r\n */\r\npackage ch.bfh.egov.nutzenportfolio.action;\r\n\r\nimport java.util.List;\r\nimport javax.servlet.http.HttpServletRequest;\r\nimport javax.servlet.http.HttpServletResponse;\r\nimport javax.servlet.http.HttpSession;\r\nimport ch.bfh.egov.nutzenportfolio.Constants;\r\nimport ch.bfh.egov.nutzenportfolio.service.benutzer.BenutzerService;\r\nimport ch.bfh.egov.nutzenportfolio.tos.Benutzer;\r\nimport org.apache.commons.beanutils.BeanUtils;\r\nimport org.apache.commons.logging.Log;\r\nimport org.apache.commons.logging.LogFactory;\r\nimport org.apache.struts.action.ActionForm;\r\nimport org.apache.struts.action.ActionForward;\r\nimport org.apache.struts.action.ActionMapping;\r\nimport org.apache.struts.action.ActionMessage;\r\nimport org.apache.struts.action.ActionMessages;\r\nimport org.apache.struts.action.DynaActionForm;\r\nimport org.apache.struts.actions.DispatchAction;\r\n\r\npublic class BenutzerAction extends DispatchAction {\r\n\r\n    private Log logger = LogFactory.getLog(this.getClass());\r\n\r\n    private BenutzerService service;\r\n\r\n    public BenutzerAction(BenutzerService service) {\r\n        super();\r\n        this.service = service;\r\n    }\r\n\r\n    public ActionForward login(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {\r\n        DynaActionForm loginForm = (DynaActionForm) form;\r\n        if (loginValidationSuccessful(request, loginForm)) {\r\n            Benutzer benutzer = new Benutzer();\r\n            BeanUtils.copyProperties(benutzer, loginForm);\r\n            benutzer = service.loginSuccessful(benutzer);\r\n            if (benutzer != null) {\r\n                // mandantId in session stellen\r\n                HttpSession session = request.getSession();\r\n                logger.debug(\"mandantId: \" + benutzer.getMandantId());\r\n                session.setAttribute(\"mandantId\", benutzer.getMandantId());\r\n                return mapping.findForward(Constants.SUCCESS);\r\n            }\r\n        }\r\n        ActionMessages errors = new ActionMessages();\r\n        errors.add(ActionMessages.GLOBAL_MESSAGE, new ActionMessage(\"errors.login.failure\"));\r\n        saveMessages(request, errors);\r\n        return mapping.findForward(Constants.FAILURE);\r\n    }\r\n\r\n    public ActionForward logout(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {\r\n        // invalidate session\r\n        HttpSession session = request.getSession();\r\n        session.invalidate();\r\n        return mapping.findForward(Constants.LOGOUT);\r\n    }\r\n\r\n    public ActionForward list(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {\r\n        populate(request);\r\n        return mapping.findForward(Constants.LIST);\r\n    }\r\n\r\n    public ActionForward prepare(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {\r\n        DynaActionForm benutzerForm = (DynaActionForm) form;\r\n        if (isUpdate(request, benutzerForm)) {\r\n            Integer benutzerId = (Integer) benutzerForm.get(\"benutzerId\");\r\n            Benutzer benutzer = service.getBenutzer(benutzerId);\r\n            String passwort = benutzer.getPasswort();\r\n            benutzerForm.set(\"benutzername\", benutzer.getBenutzername());\r\n            benutzerForm.set(\"passwort\", passwort);\r\n            benutzerForm.set(\"passwort2\", passwort);\r\n            benutzerForm.set(\"update\", true);\r\n        }\r\n        return mapping.findForward(Constants.FORM);\r\n    }\r\n\r\n    public ActionForward deletequestion(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {\r\n        Benutzer benutzer = getBenutzer(request);\r\n        if (benutzer == null) {\r\n            populate(request);\r\n            return mapping.findForward(Constants.LIST);\r\n        }\r\n        ActionMessages messages = new ActionMessages();\r\n        messages.add(ActionMessages.GLOBAL_MESSAGE, new ActionMessage(\"messages.question.delete\", benutzer.getBenutzername()));\r\n        saveMessages(request, messages);\r\n        request.setAttribute(Constants.ACTION, Constants.BENUTZER_ACTION);\r\n        request.setAttribute(Constants.DISPATCH_YES, Constants.DELETE);\r\n        request.setAttribute(Constants.DISPATCH_NO, Constants.LIST);\r\n        request.setAttribute(Constants.ID_NAME, Constants.BENUTZER_ID);\r\n        request.setAttribute(Constants.ID_VALUE, benutzer.getBenutzerId());\r\n        return mapping.findForward(Constants.QUESTION);\r\n    }\r\n\r\n    public ActionForward delete(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {\r\n        Benutzer benutzer = getBenutzer(request);\r\n        if (benutzer == null) {\r\n            populate(request);\r\n            return mapping.findForward(Constants.LIST);\r\n        }\r\n        service.deleteBenutzer(benutzer.getBenutzerId());\r\n        populate(request);\r\n        return mapping.findForward(Constants.LIST);\r\n    }\r\n\r\n    public ActionForward insertOrUpdate(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {\r\n        // Formulardaten holen\r\n        DynaActionForm benutzerForm = (DynaActionForm) form;\r\n        Integer benutzerId = (Integer) benutzerForm.get(\"benutzerId\");\r\n        Integer mandantId = (Integer) request.getSession().getAttribute(\"mandantId\");\r\n        String benutzername = (String) benutzerForm.get(\"benutzername\");\r\n        String passwort = (String) benutzerForm.get(\"passwort\");\r\n        Benutzer benutzer = new Benutzer();\r\n        benutzer.setBenutzerId(benutzerId);\r\n        benutzer.setMandantId(mandantId);\r\n        benutzer.setBenutzername(benutzername);\r\n        benutzer.setPasswort(passwort);\r\n        // benutzername check auf unique\r\n        if (exists(request, benutzerForm)) {\r\n            ActionMessages errors = new ActionMessages();\r\n            errors.add(\"benutzername\", new ActionMessage(\"errors.duplicate\", \"Benutzername\"));\r\n            saveMessages(request, errors);\r\n            return mapping.findForward(Constants.FAILURE);\r\n        }\r\n        // update?\r\n        if (isUpdate(request, benutzerForm)) {\r\n            service.updateBenutzer(benutzer);\r\n        } else // insert\r\n        {\r\n            service.insertBenutzer(benutzer);\r\n        }\r\n        populate(request);\r\n        return mapping.findForward(Constants.SUCCESS);\r\n    }\r\n\r\n    private Benutzer getBenutzer(HttpServletRequest request) {\r\n        String benutzerIdParam = request.getParameter(\"benutzerId\");\r\n        Integer benutzerId = null;\r\n        try {\r\n            benutzerId = new Integer(benutzerIdParam);\r\n        } catch (Exception ex) {\r\n            logger.warn(\"Fehlende benutzerId!\");\r\n            return null;\r\n        }\r\n        Benutzer benutzer = service.getBenutzer(benutzerId);\r\n        if (benutzer == null) {\r\n            logger.warn(\"Benutzer mit der id \" + benutzerId + \" wurde nicht gefunden.\");\r\n            return null;\r\n        }\r\n        return benutzer;\r\n    }\r\n\r\n    private void populate(HttpServletRequest request) {\r\n        Integer mandantId = (Integer) request.getSession().getAttribute(Constants.MANDANT_ID);\r\n        List benutzer = service.getAllBenutzer(mandantId);\r\n        request.setAttribute(Constants.BENUTZER, benutzer);\r\n    }\r\n\r\n    private boolean isUpdate(HttpServletRequest request, DynaActionForm benutzerForm) {\r\n        Integer id = (Integer) benutzerForm.get(\"benutzerId\");\r\n        if (id == null || id == 0) {\r\n            return false;\r\n        }\r\n        return true;\r\n    }\r\n\r\n    private boolean exists(HttpServletRequest request, DynaActionForm benutzerForm) {\r\n        Integer id = (Integer) benutzerForm.get(\"benutzerId\");\r\n        String benutzername = (String) benutzerForm.get(\"benutzername\");\r\n        // update?\r\n        if (id != null && id != 0) {\r\n            Benutzer benutzer = service.getBenutzer(id);\r\n            // benutzername geï¿½ndert, ï¿½berprï¿½fen\r\n            if (!benutzername.equals(benutzer.getBenutzername())) {\r\n                return service.getBenutzerByBenutzername(benutzername) != null;\r\n            }\r\n        } else // insert\r\n        {\r\n            return service.getBenutzerByBenutzername(benutzername) != null;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    private boolean loginValidationSuccessful(HttpServletRequest request, DynaActionForm form) {\r\n        boolean isOk = true;\r\n        ActionMessages errors = new ActionMessages();\r\n        String benutzername = form.getString(\"benutzername\");\r\n        String passwort = form.getString(\"passwort\");\r\n        if (benutzername == null || benutzername.trim().length() == 0) {\r\n            errors.add(\"benutzername\", new ActionMessage(\"errors.required\", \"Benutzername\"));\r\n        }\r\n        if (passwort == null || passwort.trim().length() == 0) {\r\n            errors.add(\"passwort\", new ActionMessage(\"errors.required\", \"Passwort\"));\r\n        }\r\n        if (!errors.isEmpty()) {\r\n            saveErrors(request, errors);\r\n            isOk = false;\r\n        }\r\n        return isOk;\r\n    }\r\n}\r\n",
		"id": "EvoSuiteBenchmark/46_nutzenportfolio/src/main/java/ch/bfh/egov/nutzenportfolio/action/BenutzerActionTest5.java",
		"test_prompt": "// BenutzerActionTest5.java\npackage ch.bfh.egov.nutzenportfolio.action;\n\nimport java.util.List;\nimport javax.servlet.http.HttpServletRequest;\nimport javax.servlet.http.HttpServletResponse;\nimport javax.servlet.http.HttpSession;\nimport ch.bfh.egov.nutzenportfolio.Constants;\nimport ch.bfh.egov.nutzenportfolio.service.benutzer.BenutzerService;\nimport ch.bfh.egov.nutzenportfolio.tos.Benutzer;\nimport org.apache.commons.beanutils.BeanUtils;\nimport org.apache.commons.logging.Log;\nimport org.apache.commons.logging.LogFactory;\nimport org.apache.struts.action.ActionForm;\nimport org.apache.struts.action.ActionForward;\nimport org.apache.struts.action.ActionMapping;\nimport org.apache.struts.action.ActionMessage;\nimport org.apache.struts.action.ActionMessages;\nimport org.apache.struts.action.DynaActionForm;\nimport org.apache.struts.actions.DispatchAction;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link BenutzerAction}.\n* It contains ten unit test cases for the {@link BenutzerAction#delete(ActionMapping, ActionForm, HttpServletRequest, HttpServletResponse)} method.\n*/\nclass BenutzerActionTest5 {"
	},
	{
		"original_code": "// BenutzerAction.java\n/**\r\n * Nutzenportfolio\r\n * Copyright (C) 2006 Kompetenzzentrum E-Business, Simon Bergamin\r\n *\r\n * This program is free software; you can redistribute it and/or\r\n * modify it under the terms of the GNU General Public License\r\n * as published by the Free Software Foundation; either version 2\r\n * of the License, or (at your option) any later version.\r\n *\r\n * This program is distributed in the hope that it will be useful,\r\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n * GNU General Public License for more details.\r\n *\r\n * You should have received a copy of the GNU General Public License\r\n * along with this program; if not, write to the Free Software\r\n * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\r\n */\r\npackage ch.bfh.egov.nutzenportfolio.action;\r\n\r\nimport java.util.List;\r\nimport javax.servlet.http.HttpServletRequest;\r\nimport javax.servlet.http.HttpServletResponse;\r\nimport javax.servlet.http.HttpSession;\r\nimport ch.bfh.egov.nutzenportfolio.Constants;\r\nimport ch.bfh.egov.nutzenportfolio.service.benutzer.BenutzerService;\r\nimport ch.bfh.egov.nutzenportfolio.tos.Benutzer;\r\nimport org.apache.commons.beanutils.BeanUtils;\r\nimport org.apache.commons.logging.Log;\r\nimport org.apache.commons.logging.LogFactory;\r\nimport org.apache.struts.action.ActionForm;\r\nimport org.apache.struts.action.ActionForward;\r\nimport org.apache.struts.action.ActionMapping;\r\nimport org.apache.struts.action.ActionMessage;\r\nimport org.apache.struts.action.ActionMessages;\r\nimport org.apache.struts.action.DynaActionForm;\r\nimport org.apache.struts.actions.DispatchAction;\r\n\r\npublic class BenutzerAction extends DispatchAction {\r\n\r\n    private Log logger = LogFactory.getLog(this.getClass());\r\n\r\n    private BenutzerService service;\r\n\r\n    public BenutzerAction(BenutzerService service) {\r\n        super();\r\n        this.service = service;\r\n    }\r\n\r\n    public ActionForward login(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {\r\n        DynaActionForm loginForm = (DynaActionForm) form;\r\n        if (loginValidationSuccessful(request, loginForm)) {\r\n            Benutzer benutzer = new Benutzer();\r\n            BeanUtils.copyProperties(benutzer, loginForm);\r\n            benutzer = service.loginSuccessful(benutzer);\r\n            if (benutzer != null) {\r\n                // mandantId in session stellen\r\n                HttpSession session = request.getSession();\r\n                logger.debug(\"mandantId: \" + benutzer.getMandantId());\r\n                session.setAttribute(\"mandantId\", benutzer.getMandantId());\r\n                return mapping.findForward(Constants.SUCCESS);\r\n            }\r\n        }\r\n        ActionMessages errors = new ActionMessages();\r\n        errors.add(ActionMessages.GLOBAL_MESSAGE, new ActionMessage(\"errors.login.failure\"));\r\n        saveMessages(request, errors);\r\n        return mapping.findForward(Constants.FAILURE);\r\n    }\r\n\r\n    public ActionForward logout(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {\r\n        // invalidate session\r\n        HttpSession session = request.getSession();\r\n        session.invalidate();\r\n        return mapping.findForward(Constants.LOGOUT);\r\n    }\r\n\r\n    public ActionForward list(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {\r\n        populate(request);\r\n        return mapping.findForward(Constants.LIST);\r\n    }\r\n\r\n    public ActionForward prepare(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {\r\n        DynaActionForm benutzerForm = (DynaActionForm) form;\r\n        if (isUpdate(request, benutzerForm)) {\r\n            Integer benutzerId = (Integer) benutzerForm.get(\"benutzerId\");\r\n            Benutzer benutzer = service.getBenutzer(benutzerId);\r\n            String passwort = benutzer.getPasswort();\r\n            benutzerForm.set(\"benutzername\", benutzer.getBenutzername());\r\n            benutzerForm.set(\"passwort\", passwort);\r\n            benutzerForm.set(\"passwort2\", passwort);\r\n            benutzerForm.set(\"update\", true);\r\n        }\r\n        return mapping.findForward(Constants.FORM);\r\n    }\r\n\r\n    public ActionForward deletequestion(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {\r\n        Benutzer benutzer = getBenutzer(request);\r\n        if (benutzer == null) {\r\n            populate(request);\r\n            return mapping.findForward(Constants.LIST);\r\n        }\r\n        ActionMessages messages = new ActionMessages();\r\n        messages.add(ActionMessages.GLOBAL_MESSAGE, new ActionMessage(\"messages.question.delete\", benutzer.getBenutzername()));\r\n        saveMessages(request, messages);\r\n        request.setAttribute(Constants.ACTION, Constants.BENUTZER_ACTION);\r\n        request.setAttribute(Constants.DISPATCH_YES, Constants.DELETE);\r\n        request.setAttribute(Constants.DISPATCH_NO, Constants.LIST);\r\n        request.setAttribute(Constants.ID_NAME, Constants.BENUTZER_ID);\r\n        request.setAttribute(Constants.ID_VALUE, benutzer.getBenutzerId());\r\n        return mapping.findForward(Constants.QUESTION);\r\n    }\r\n\r\n    public ActionForward delete(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {\r\n        Benutzer benutzer = getBenutzer(request);\r\n        if (benutzer == null) {\r\n            populate(request);\r\n            return mapping.findForward(Constants.LIST);\r\n        }\r\n        service.deleteBenutzer(benutzer.getBenutzerId());\r\n        populate(request);\r\n        return mapping.findForward(Constants.LIST);\r\n    }\r\n\r\n    public ActionForward insertOrUpdate(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {\r\n        // Formulardaten holen\r\n        DynaActionForm benutzerForm = (DynaActionForm) form;\r\n        Integer benutzerId = (Integer) benutzerForm.get(\"benutzerId\");\r\n        Integer mandantId = (Integer) request.getSession().getAttribute(\"mandantId\");\r\n        String benutzername = (String) benutzerForm.get(\"benutzername\");\r\n        String passwort = (String) benutzerForm.get(\"passwort\");\r\n        Benutzer benutzer = new Benutzer();\r\n        benutzer.setBenutzerId(benutzerId);\r\n        benutzer.setMandantId(mandantId);\r\n        benutzer.setBenutzername(benutzername);\r\n        benutzer.setPasswort(passwort);\r\n        // benutzername check auf unique\r\n        if (exists(request, benutzerForm)) {\r\n            ActionMessages errors = new ActionMessages();\r\n            errors.add(\"benutzername\", new ActionMessage(\"errors.duplicate\", \"Benutzername\"));\r\n            saveMessages(request, errors);\r\n            return mapping.findForward(Constants.FAILURE);\r\n        }\r\n        // update?\r\n        if (isUpdate(request, benutzerForm)) {\r\n            service.updateBenutzer(benutzer);\r\n        } else // insert\r\n        {\r\n            service.insertBenutzer(benutzer);\r\n        }\r\n        populate(request);\r\n        return mapping.findForward(Constants.SUCCESS);\r\n    }\r\n\r\n    private Benutzer getBenutzer(HttpServletRequest request) {\r\n        String benutzerIdParam = request.getParameter(\"benutzerId\");\r\n        Integer benutzerId = null;\r\n        try {\r\n            benutzerId = new Integer(benutzerIdParam);\r\n        } catch (Exception ex) {\r\n            logger.warn(\"Fehlende benutzerId!\");\r\n            return null;\r\n        }\r\n        Benutzer benutzer = service.getBenutzer(benutzerId);\r\n        if (benutzer == null) {\r\n            logger.warn(\"Benutzer mit der id \" + benutzerId + \" wurde nicht gefunden.\");\r\n            return null;\r\n        }\r\n        return benutzer;\r\n    }\r\n\r\n    private void populate(HttpServletRequest request) {\r\n        Integer mandantId = (Integer) request.getSession().getAttribute(Constants.MANDANT_ID);\r\n        List benutzer = service.getAllBenutzer(mandantId);\r\n        request.setAttribute(Constants.BENUTZER, benutzer);\r\n    }\r\n\r\n    private boolean isUpdate(HttpServletRequest request, DynaActionForm benutzerForm) {\r\n        Integer id = (Integer) benutzerForm.get(\"benutzerId\");\r\n        if (id == null || id == 0) {\r\n            return false;\r\n        }\r\n        return true;\r\n    }\r\n\r\n    private boolean exists(HttpServletRequest request, DynaActionForm benutzerForm) {\r\n        Integer id = (Integer) benutzerForm.get(\"benutzerId\");\r\n        String benutzername = (String) benutzerForm.get(\"benutzername\");\r\n        // update?\r\n        if (id != null && id != 0) {\r\n            Benutzer benutzer = service.getBenutzer(id);\r\n            // benutzername geï¿½ndert, ï¿½berprï¿½fen\r\n            if (!benutzername.equals(benutzer.getBenutzername())) {\r\n                return service.getBenutzerByBenutzername(benutzername) != null;\r\n            }\r\n        } else // insert\r\n        {\r\n            return service.getBenutzerByBenutzername(benutzername) != null;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    private boolean loginValidationSuccessful(HttpServletRequest request, DynaActionForm form) {\r\n        boolean isOk = true;\r\n        ActionMessages errors = new ActionMessages();\r\n        String benutzername = form.getString(\"benutzername\");\r\n        String passwort = form.getString(\"passwort\");\r\n        if (benutzername == null || benutzername.trim().length() == 0) {\r\n            errors.add(\"benutzername\", new ActionMessage(\"errors.required\", \"Benutzername\"));\r\n        }\r\n        if (passwort == null || passwort.trim().length() == 0) {\r\n            errors.add(\"passwort\", new ActionMessage(\"errors.required\", \"Passwort\"));\r\n        }\r\n        if (!errors.isEmpty()) {\r\n            saveErrors(request, errors);\r\n            isOk = false;\r\n        }\r\n        return isOk;\r\n    }\r\n}\r\n",
		"id": "EvoSuiteBenchmark/46_nutzenportfolio/src/main/java/ch/bfh/egov/nutzenportfolio/action/BenutzerActionTest6.java",
		"test_prompt": "// BenutzerActionTest6.java\npackage ch.bfh.egov.nutzenportfolio.action;\n\nimport java.util.List;\nimport javax.servlet.http.HttpServletRequest;\nimport javax.servlet.http.HttpServletResponse;\nimport javax.servlet.http.HttpSession;\nimport ch.bfh.egov.nutzenportfolio.Constants;\nimport ch.bfh.egov.nutzenportfolio.service.benutzer.BenutzerService;\nimport ch.bfh.egov.nutzenportfolio.tos.Benutzer;\nimport org.apache.commons.beanutils.BeanUtils;\nimport org.apache.commons.logging.Log;\nimport org.apache.commons.logging.LogFactory;\nimport org.apache.struts.action.ActionForm;\nimport org.apache.struts.action.ActionForward;\nimport org.apache.struts.action.ActionMapping;\nimport org.apache.struts.action.ActionMessage;\nimport org.apache.struts.action.ActionMessages;\nimport org.apache.struts.action.DynaActionForm;\nimport org.apache.struts.actions.DispatchAction;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link BenutzerAction}.\n* It contains ten unit test cases for the {@link BenutzerAction#insertOrUpdate(ActionMapping, ActionForm, HttpServletRequest, HttpServletResponse)} method.\n*/\nclass BenutzerActionTest6 {"
	},
	{
		"original_code": "// FragebogenPaAction.java\n/**\r\n * Nutzenportfolio\r\n * Copyright (C) 2006 Kompetenzzentrum E-Business, Simon Bergamin\r\n *\r\n * This program is free software; you can redistribute it and/or\r\n * modify it under the terms of the GNU General Public License\r\n * as published by the Free Software Foundation; either version 2\r\n * of the License, or (at your option) any later version.\r\n *\r\n * This program is distributed in the hope that it will be useful,\r\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n * GNU General Public License for more details.\r\n *\r\n * You should have received a copy of the GNU General Public License\r\n * along with this program; if not, write to the Free Software\r\n * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\r\n */\r\npackage ch.bfh.egov.nutzenportfolio.action;\r\n\r\nimport javax.servlet.http.HttpServletRequest;\r\nimport javax.servlet.http.HttpServletResponse;\r\nimport ch.bfh.egov.nutzenportfolio.Constants;\r\nimport ch.bfh.egov.nutzenportfolio.form.ProjektattraktivitaetForm;\r\nimport ch.bfh.egov.nutzenportfolio.service.fragebogen.ProjektattraktivitaetService;\r\nimport org.apache.commons.logging.Log;\r\nimport org.apache.commons.logging.LogFactory;\r\nimport org.apache.struts.action.ActionForm;\r\nimport org.apache.struts.action.ActionForward;\r\nimport org.apache.struts.action.ActionMapping;\r\nimport org.apache.struts.action.ActionMessage;\r\nimport org.apache.struts.action.ActionMessages;\r\nimport org.apache.struts.action.DynaActionForm;\r\nimport org.apache.struts.actions.DispatchAction;\r\n\r\npublic class FragebogenPaAction extends DispatchAction {\r\n\r\n    private Log logger = LogFactory.getLog(this.getClass());\r\n\r\n    private ProjektattraktivitaetService service;\r\n\r\n    public FragebogenPaAction(ProjektattraktivitaetService service) {\r\n        super();\r\n        this.service = service;\r\n    }\r\n\r\n    public ActionForward prepare(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {\r\n        logger.debug(\"prepare\");\r\n        ProjektattraktivitaetForm pForm = (ProjektattraktivitaetForm) form;\r\n        if (service.prepare(request, pForm)) {\r\n            return mapping.findForward(Constants.FORM);\r\n        }\r\n        return mapping.findForward(Constants.FAILURE);\r\n    }\r\n\r\n    public ActionForward save(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {\r\n        // Resultate abspeichern\r\n        ProjektattraktivitaetForm pForm = (ProjektattraktivitaetForm) form;\r\n        service.save(request, pForm);\r\n        return mapping.findForward(Constants.SUCCESS);\r\n    }\r\n\r\n    public ActionForward show(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {\r\n        DynaActionForm paForm = (DynaActionForm) form;\r\n        boolean status = service.isActive(request, paForm);\r\n        logger.debug(\"status=\" + status);\r\n        request.setAttribute(\"status\", status);\r\n        return mapping.findForward(Constants.FORM);\r\n    }\r\n\r\n    public ActionForward login(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {\r\n        DynaActionForm loginForm = (DynaActionForm) form;\r\n        if (service.login(request, loginForm)) {\r\n            return mapping.findForward(Constants.SUCCESS);\r\n        }\r\n        ActionMessages errors = new ActionMessages();\r\n        errors.add(ActionMessages.GLOBAL_MESSAGE, new ActionMessage(\"errors.fragebogen.exists\"));\r\n        saveMessages(request, errors);\r\n        return mapping.findForward(Constants.FAILURE);\r\n    }\r\n}\r\n",
		"id": "EvoSuiteBenchmark/46_nutzenportfolio/src/main/java/ch/bfh/egov/nutzenportfolio/action/FragebogenPaActionTest0.java",
		"test_prompt": "// FragebogenPaActionTest0.java\npackage ch.bfh.egov.nutzenportfolio.action;\n\nimport javax.servlet.http.HttpServletRequest;\nimport javax.servlet.http.HttpServletResponse;\nimport ch.bfh.egov.nutzenportfolio.Constants;\nimport ch.bfh.egov.nutzenportfolio.form.ProjektattraktivitaetForm;\nimport ch.bfh.egov.nutzenportfolio.service.fragebogen.ProjektattraktivitaetService;\nimport org.apache.commons.logging.Log;\nimport org.apache.commons.logging.LogFactory;\nimport org.apache.struts.action.ActionForm;\nimport org.apache.struts.action.ActionForward;\nimport org.apache.struts.action.ActionMapping;\nimport org.apache.struts.action.ActionMessage;\nimport org.apache.struts.action.ActionMessages;\nimport org.apache.struts.action.DynaActionForm;\nimport org.apache.struts.actions.DispatchAction;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link FragebogenPaAction}.\n* It contains ten unit test cases for the {@link FragebogenPaAction#prepare(ActionMapping, ActionForm, HttpServletRequest, HttpServletResponse)} method.\n*/\nclass FragebogenPaActionTest0 {"
	},
	{
		"original_code": "// FragebogenPaAction.java\n/**\r\n * Nutzenportfolio\r\n * Copyright (C) 2006 Kompetenzzentrum E-Business, Simon Bergamin\r\n *\r\n * This program is free software; you can redistribute it and/or\r\n * modify it under the terms of the GNU General Public License\r\n * as published by the Free Software Foundation; either version 2\r\n * of the License, or (at your option) any later version.\r\n *\r\n * This program is distributed in the hope that it will be useful,\r\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n * GNU General Public License for more details.\r\n *\r\n * You should have received a copy of the GNU General Public License\r\n * along with this program; if not, write to the Free Software\r\n * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\r\n */\r\npackage ch.bfh.egov.nutzenportfolio.action;\r\n\r\nimport javax.servlet.http.HttpServletRequest;\r\nimport javax.servlet.http.HttpServletResponse;\r\nimport ch.bfh.egov.nutzenportfolio.Constants;\r\nimport ch.bfh.egov.nutzenportfolio.form.ProjektattraktivitaetForm;\r\nimport ch.bfh.egov.nutzenportfolio.service.fragebogen.ProjektattraktivitaetService;\r\nimport org.apache.commons.logging.Log;\r\nimport org.apache.commons.logging.LogFactory;\r\nimport org.apache.struts.action.ActionForm;\r\nimport org.apache.struts.action.ActionForward;\r\nimport org.apache.struts.action.ActionMapping;\r\nimport org.apache.struts.action.ActionMessage;\r\nimport org.apache.struts.action.ActionMessages;\r\nimport org.apache.struts.action.DynaActionForm;\r\nimport org.apache.struts.actions.DispatchAction;\r\n\r\npublic class FragebogenPaAction extends DispatchAction {\r\n\r\n    private Log logger = LogFactory.getLog(this.getClass());\r\n\r\n    private ProjektattraktivitaetService service;\r\n\r\n    public FragebogenPaAction(ProjektattraktivitaetService service) {\r\n        super();\r\n        this.service = service;\r\n    }\r\n\r\n    public ActionForward prepare(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {\r\n        logger.debug(\"prepare\");\r\n        ProjektattraktivitaetForm pForm = (ProjektattraktivitaetForm) form;\r\n        if (service.prepare(request, pForm)) {\r\n            return mapping.findForward(Constants.FORM);\r\n        }\r\n        return mapping.findForward(Constants.FAILURE);\r\n    }\r\n\r\n    public ActionForward save(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {\r\n        // Resultate abspeichern\r\n        ProjektattraktivitaetForm pForm = (ProjektattraktivitaetForm) form;\r\n        service.save(request, pForm);\r\n        return mapping.findForward(Constants.SUCCESS);\r\n    }\r\n\r\n    public ActionForward show(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {\r\n        DynaActionForm paForm = (DynaActionForm) form;\r\n        boolean status = service.isActive(request, paForm);\r\n        logger.debug(\"status=\" + status);\r\n        request.setAttribute(\"status\", status);\r\n        return mapping.findForward(Constants.FORM);\r\n    }\r\n\r\n    public ActionForward login(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {\r\n        DynaActionForm loginForm = (DynaActionForm) form;\r\n        if (service.login(request, loginForm)) {\r\n            return mapping.findForward(Constants.SUCCESS);\r\n        }\r\n        ActionMessages errors = new ActionMessages();\r\n        errors.add(ActionMessages.GLOBAL_MESSAGE, new ActionMessage(\"errors.fragebogen.exists\"));\r\n        saveMessages(request, errors);\r\n        return mapping.findForward(Constants.FAILURE);\r\n    }\r\n}\r\n",
		"id": "EvoSuiteBenchmark/46_nutzenportfolio/src/main/java/ch/bfh/egov/nutzenportfolio/action/FragebogenPaActionTest1.java",
		"test_prompt": "// FragebogenPaActionTest1.java\npackage ch.bfh.egov.nutzenportfolio.action;\n\nimport javax.servlet.http.HttpServletRequest;\nimport javax.servlet.http.HttpServletResponse;\nimport ch.bfh.egov.nutzenportfolio.Constants;\nimport ch.bfh.egov.nutzenportfolio.form.ProjektattraktivitaetForm;\nimport ch.bfh.egov.nutzenportfolio.service.fragebogen.ProjektattraktivitaetService;\nimport org.apache.commons.logging.Log;\nimport org.apache.commons.logging.LogFactory;\nimport org.apache.struts.action.ActionForm;\nimport org.apache.struts.action.ActionForward;\nimport org.apache.struts.action.ActionMapping;\nimport org.apache.struts.action.ActionMessage;\nimport org.apache.struts.action.ActionMessages;\nimport org.apache.struts.action.DynaActionForm;\nimport org.apache.struts.actions.DispatchAction;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link FragebogenPaAction}.\n* It contains ten unit test cases for the {@link FragebogenPaAction#save(ActionMapping, ActionForm, HttpServletRequest, HttpServletResponse)} method.\n*/\nclass FragebogenPaActionTest1 {"
	},
	{
		"original_code": "// FragebogenPaAction.java\n/**\r\n * Nutzenportfolio\r\n * Copyright (C) 2006 Kompetenzzentrum E-Business, Simon Bergamin\r\n *\r\n * This program is free software; you can redistribute it and/or\r\n * modify it under the terms of the GNU General Public License\r\n * as published by the Free Software Foundation; either version 2\r\n * of the License, or (at your option) any later version.\r\n *\r\n * This program is distributed in the hope that it will be useful,\r\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n * GNU General Public License for more details.\r\n *\r\n * You should have received a copy of the GNU General Public License\r\n * along with this program; if not, write to the Free Software\r\n * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\r\n */\r\npackage ch.bfh.egov.nutzenportfolio.action;\r\n\r\nimport javax.servlet.http.HttpServletRequest;\r\nimport javax.servlet.http.HttpServletResponse;\r\nimport ch.bfh.egov.nutzenportfolio.Constants;\r\nimport ch.bfh.egov.nutzenportfolio.form.ProjektattraktivitaetForm;\r\nimport ch.bfh.egov.nutzenportfolio.service.fragebogen.ProjektattraktivitaetService;\r\nimport org.apache.commons.logging.Log;\r\nimport org.apache.commons.logging.LogFactory;\r\nimport org.apache.struts.action.ActionForm;\r\nimport org.apache.struts.action.ActionForward;\r\nimport org.apache.struts.action.ActionMapping;\r\nimport org.apache.struts.action.ActionMessage;\r\nimport org.apache.struts.action.ActionMessages;\r\nimport org.apache.struts.action.DynaActionForm;\r\nimport org.apache.struts.actions.DispatchAction;\r\n\r\npublic class FragebogenPaAction extends DispatchAction {\r\n\r\n    private Log logger = LogFactory.getLog(this.getClass());\r\n\r\n    private ProjektattraktivitaetService service;\r\n\r\n    public FragebogenPaAction(ProjektattraktivitaetService service) {\r\n        super();\r\n        this.service = service;\r\n    }\r\n\r\n    public ActionForward prepare(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {\r\n        logger.debug(\"prepare\");\r\n        ProjektattraktivitaetForm pForm = (ProjektattraktivitaetForm) form;\r\n        if (service.prepare(request, pForm)) {\r\n            return mapping.findForward(Constants.FORM);\r\n        }\r\n        return mapping.findForward(Constants.FAILURE);\r\n    }\r\n\r\n    public ActionForward save(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {\r\n        // Resultate abspeichern\r\n        ProjektattraktivitaetForm pForm = (ProjektattraktivitaetForm) form;\r\n        service.save(request, pForm);\r\n        return mapping.findForward(Constants.SUCCESS);\r\n    }\r\n\r\n    public ActionForward show(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {\r\n        DynaActionForm paForm = (DynaActionForm) form;\r\n        boolean status = service.isActive(request, paForm);\r\n        logger.debug(\"status=\" + status);\r\n        request.setAttribute(\"status\", status);\r\n        return mapping.findForward(Constants.FORM);\r\n    }\r\n\r\n    public ActionForward login(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {\r\n        DynaActionForm loginForm = (DynaActionForm) form;\r\n        if (service.login(request, loginForm)) {\r\n            return mapping.findForward(Constants.SUCCESS);\r\n        }\r\n        ActionMessages errors = new ActionMessages();\r\n        errors.add(ActionMessages.GLOBAL_MESSAGE, new ActionMessage(\"errors.fragebogen.exists\"));\r\n        saveMessages(request, errors);\r\n        return mapping.findForward(Constants.FAILURE);\r\n    }\r\n}\r\n",
		"id": "EvoSuiteBenchmark/46_nutzenportfolio/src/main/java/ch/bfh/egov/nutzenportfolio/action/FragebogenPaActionTest2.java",
		"test_prompt": "// FragebogenPaActionTest2.java\npackage ch.bfh.egov.nutzenportfolio.action;\n\nimport javax.servlet.http.HttpServletRequest;\nimport javax.servlet.http.HttpServletResponse;\nimport ch.bfh.egov.nutzenportfolio.Constants;\nimport ch.bfh.egov.nutzenportfolio.form.ProjektattraktivitaetForm;\nimport ch.bfh.egov.nutzenportfolio.service.fragebogen.ProjektattraktivitaetService;\nimport org.apache.commons.logging.Log;\nimport org.apache.commons.logging.LogFactory;\nimport org.apache.struts.action.ActionForm;\nimport org.apache.struts.action.ActionForward;\nimport org.apache.struts.action.ActionMapping;\nimport org.apache.struts.action.ActionMessage;\nimport org.apache.struts.action.ActionMessages;\nimport org.apache.struts.action.DynaActionForm;\nimport org.apache.struts.actions.DispatchAction;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link FragebogenPaAction}.\n* It contains ten unit test cases for the {@link FragebogenPaAction#show(ActionMapping, ActionForm, HttpServletRequest, HttpServletResponse)} method.\n*/\nclass FragebogenPaActionTest2 {"
	},
	{
		"original_code": "// FragebogenPaAction.java\n/**\r\n * Nutzenportfolio\r\n * Copyright (C) 2006 Kompetenzzentrum E-Business, Simon Bergamin\r\n *\r\n * This program is free software; you can redistribute it and/or\r\n * modify it under the terms of the GNU General Public License\r\n * as published by the Free Software Foundation; either version 2\r\n * of the License, or (at your option) any later version.\r\n *\r\n * This program is distributed in the hope that it will be useful,\r\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n * GNU General Public License for more details.\r\n *\r\n * You should have received a copy of the GNU General Public License\r\n * along with this program; if not, write to the Free Software\r\n * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\r\n */\r\npackage ch.bfh.egov.nutzenportfolio.action;\r\n\r\nimport javax.servlet.http.HttpServletRequest;\r\nimport javax.servlet.http.HttpServletResponse;\r\nimport ch.bfh.egov.nutzenportfolio.Constants;\r\nimport ch.bfh.egov.nutzenportfolio.form.ProjektattraktivitaetForm;\r\nimport ch.bfh.egov.nutzenportfolio.service.fragebogen.ProjektattraktivitaetService;\r\nimport org.apache.commons.logging.Log;\r\nimport org.apache.commons.logging.LogFactory;\r\nimport org.apache.struts.action.ActionForm;\r\nimport org.apache.struts.action.ActionForward;\r\nimport org.apache.struts.action.ActionMapping;\r\nimport org.apache.struts.action.ActionMessage;\r\nimport org.apache.struts.action.ActionMessages;\r\nimport org.apache.struts.action.DynaActionForm;\r\nimport org.apache.struts.actions.DispatchAction;\r\n\r\npublic class FragebogenPaAction extends DispatchAction {\r\n\r\n    private Log logger = LogFactory.getLog(this.getClass());\r\n\r\n    private ProjektattraktivitaetService service;\r\n\r\n    public FragebogenPaAction(ProjektattraktivitaetService service) {\r\n        super();\r\n        this.service = service;\r\n    }\r\n\r\n    public ActionForward prepare(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {\r\n        logger.debug(\"prepare\");\r\n        ProjektattraktivitaetForm pForm = (ProjektattraktivitaetForm) form;\r\n        if (service.prepare(request, pForm)) {\r\n            return mapping.findForward(Constants.FORM);\r\n        }\r\n        return mapping.findForward(Constants.FAILURE);\r\n    }\r\n\r\n    public ActionForward save(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {\r\n        // Resultate abspeichern\r\n        ProjektattraktivitaetForm pForm = (ProjektattraktivitaetForm) form;\r\n        service.save(request, pForm);\r\n        return mapping.findForward(Constants.SUCCESS);\r\n    }\r\n\r\n    public ActionForward show(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {\r\n        DynaActionForm paForm = (DynaActionForm) form;\r\n        boolean status = service.isActive(request, paForm);\r\n        logger.debug(\"status=\" + status);\r\n        request.setAttribute(\"status\", status);\r\n        return mapping.findForward(Constants.FORM);\r\n    }\r\n\r\n    public ActionForward login(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {\r\n        DynaActionForm loginForm = (DynaActionForm) form;\r\n        if (service.login(request, loginForm)) {\r\n            return mapping.findForward(Constants.SUCCESS);\r\n        }\r\n        ActionMessages errors = new ActionMessages();\r\n        errors.add(ActionMessages.GLOBAL_MESSAGE, new ActionMessage(\"errors.fragebogen.exists\"));\r\n        saveMessages(request, errors);\r\n        return mapping.findForward(Constants.FAILURE);\r\n    }\r\n}\r\n",
		"id": "EvoSuiteBenchmark/46_nutzenportfolio/src/main/java/ch/bfh/egov/nutzenportfolio/action/FragebogenPaActionTest3.java",
		"test_prompt": "// FragebogenPaActionTest3.java\npackage ch.bfh.egov.nutzenportfolio.action;\n\nimport javax.servlet.http.HttpServletRequest;\nimport javax.servlet.http.HttpServletResponse;\nimport ch.bfh.egov.nutzenportfolio.Constants;\nimport ch.bfh.egov.nutzenportfolio.form.ProjektattraktivitaetForm;\nimport ch.bfh.egov.nutzenportfolio.service.fragebogen.ProjektattraktivitaetService;\nimport org.apache.commons.logging.Log;\nimport org.apache.commons.logging.LogFactory;\nimport org.apache.struts.action.ActionForm;\nimport org.apache.struts.action.ActionForward;\nimport org.apache.struts.action.ActionMapping;\nimport org.apache.struts.action.ActionMessage;\nimport org.apache.struts.action.ActionMessages;\nimport org.apache.struts.action.DynaActionForm;\nimport org.apache.struts.actions.DispatchAction;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link FragebogenPaAction}.\n* It contains ten unit test cases for the {@link FragebogenPaAction#login(ActionMapping, ActionForm, HttpServletRequest, HttpServletResponse)} method.\n*/\nclass FragebogenPaActionTest3 {"
	},
	{
		"original_code": "// ProjektgruppeAction.java\n/**\r\n * Nutzenportfolio\r\n * Copyright (C) 2006 Kompetenzzentrum E-Business, Simon Bergamin\r\n *\r\n * This program is free software; you can redistribute it and/or\r\n * modify it under the terms of the GNU General Public License\r\n * as published by the Free Software Foundation; either version 2\r\n * of the License, or (at your option) any later version.\r\n *\r\n * This program is distributed in the hope that it will be useful,\r\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n * GNU General Public License for more details.\r\n *\r\n * You should have received a copy of the GNU General Public License\r\n * along with this program; if not, write to the Free Software\r\n * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\r\n */\r\npackage ch.bfh.egov.nutzenportfolio.action;\r\n\r\nimport javax.servlet.http.HttpServletRequest;\r\nimport javax.servlet.http.HttpServletResponse;\r\nimport ch.bfh.egov.nutzenportfolio.Constants;\r\nimport ch.bfh.egov.nutzenportfolio.service.customizing.CustomizingService;\r\nimport ch.bfh.egov.nutzenportfolio.service.projektgruppe.ProjektgruppeService;\r\nimport ch.bfh.egov.nutzenportfolio.tos.Projektgruppe;\r\nimport org.apache.commons.logging.Log;\r\nimport org.apache.commons.logging.LogFactory;\r\nimport org.apache.struts.action.ActionForm;\r\nimport org.apache.struts.action.ActionForward;\r\nimport org.apache.struts.action.ActionMapping;\r\nimport org.apache.struts.action.ActionMessage;\r\nimport org.apache.struts.action.ActionMessages;\r\nimport org.apache.struts.action.DynaActionForm;\r\nimport org.apache.struts.actions.DispatchAction;\r\n\r\npublic class ProjektgruppeAction extends DispatchAction {\r\n\r\n    private Log logger = LogFactory.getLog(this.getClass());\r\n\r\n    private ProjektgruppeService service;\r\n\r\n    public ProjektgruppeAction(ProjektgruppeService service, CustomizingService cService) {\r\n        super();\r\n        this.service = service;\r\n        this.service.init(cService);\r\n    }\r\n\r\n    public ActionForward list(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {\r\n        service.populate(request);\r\n        return mapping.findForward(Constants.LIST);\r\n    }\r\n\r\n    public ActionForward prepare(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {\r\n        logger.debug(\"prepare\");\r\n        DynaActionForm pForm = (DynaActionForm) form;\r\n        service.prepare(request, pForm);\r\n        return mapping.findForward(Constants.FORM);\r\n    }\r\n\r\n    public ActionForward save(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {\r\n        // Projektgruppe erzeugen\r\n        DynaActionForm pForm = (DynaActionForm) form;\r\n        Projektgruppe p = service.get(request, pForm);\r\n        // Auf Duplikate ï¿½berprï¿½fen (Name)\r\n        if (service.exists(p)) {\r\n            ActionMessages errors = new ActionMessages();\r\n            errors.add(\"name\", new ActionMessage(\"errors.duplicate\", \"Name\"));\r\n            saveMessages(request, errors);\r\n            return mapping.findForward(Constants.FAILURE);\r\n        }\r\n        // Projektgruppe speichern\r\n        service.save(request, p);\r\n        return mapping.findForward(Constants.SUCCESS);\r\n    }\r\n\r\n    public ActionForward deleteQuestion(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {\r\n        // Projektgruppe anhand der Id holen\r\n        Projektgruppe p = service.get(request);\r\n        // Projektgruppe nicht gefunden, Abbruch\r\n        if (p == null) {\r\n            return mapping.findForward(Constants.LIST);\r\n        }\r\n        // Abfrage zum lï¿½schen erzeugen\r\n        ActionMessages messages = new ActionMessages();\r\n        messages.add(ActionMessages.GLOBAL_MESSAGE, new ActionMessage(\"messages.question.delete\", p.getName()));\r\n        saveMessages(request, messages);\r\n        request.setAttribute(Constants.ACTION, Constants.PROJEKTGRUPPE_ACTION);\r\n        request.setAttribute(Constants.DISPATCH_YES, Constants.DELETE);\r\n        request.setAttribute(Constants.DISPATCH_NO, Constants.LIST);\r\n        request.setAttribute(Constants.ID_NAME, Constants.PROJEKTGRUPPE_ID);\r\n        request.setAttribute(Constants.ID_VALUE, p.getProjektgruppeId());\r\n        return mapping.findForward(Constants.QUESTION);\r\n    }\r\n\r\n    public ActionForward delete(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {\r\n        // Projektgruppe anhand der Id holen\r\n        service.delete(request);\r\n        return mapping.findForward(Constants.LIST);\r\n    }\r\n}\r\n",
		"id": "EvoSuiteBenchmark/46_nutzenportfolio/src/main/java/ch/bfh/egov/nutzenportfolio/action/ProjektgruppeActionTest0.java",
		"test_prompt": "// ProjektgruppeActionTest0.java\npackage ch.bfh.egov.nutzenportfolio.action;\n\nimport javax.servlet.http.HttpServletRequest;\nimport javax.servlet.http.HttpServletResponse;\nimport ch.bfh.egov.nutzenportfolio.Constants;\nimport ch.bfh.egov.nutzenportfolio.service.customizing.CustomizingService;\nimport ch.bfh.egov.nutzenportfolio.service.projektgruppe.ProjektgruppeService;\nimport ch.bfh.egov.nutzenportfolio.tos.Projektgruppe;\nimport org.apache.commons.logging.Log;\nimport org.apache.commons.logging.LogFactory;\nimport org.apache.struts.action.ActionForm;\nimport org.apache.struts.action.ActionForward;\nimport org.apache.struts.action.ActionMapping;\nimport org.apache.struts.action.ActionMessage;\nimport org.apache.struts.action.ActionMessages;\nimport org.apache.struts.action.DynaActionForm;\nimport org.apache.struts.actions.DispatchAction;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link ProjektgruppeAction}.\n* It contains ten unit test cases for the {@link ProjektgruppeAction#list(ActionMapping, ActionForm, HttpServletRequest, HttpServletResponse)} method.\n*/\nclass ProjektgruppeActionTest0 {"
	},
	{
		"original_code": "// ProjektgruppeAction.java\n/**\r\n * Nutzenportfolio\r\n * Copyright (C) 2006 Kompetenzzentrum E-Business, Simon Bergamin\r\n *\r\n * This program is free software; you can redistribute it and/or\r\n * modify it under the terms of the GNU General Public License\r\n * as published by the Free Software Foundation; either version 2\r\n * of the License, or (at your option) any later version.\r\n *\r\n * This program is distributed in the hope that it will be useful,\r\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n * GNU General Public License for more details.\r\n *\r\n * You should have received a copy of the GNU General Public License\r\n * along with this program; if not, write to the Free Software\r\n * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\r\n */\r\npackage ch.bfh.egov.nutzenportfolio.action;\r\n\r\nimport javax.servlet.http.HttpServletRequest;\r\nimport javax.servlet.http.HttpServletResponse;\r\nimport ch.bfh.egov.nutzenportfolio.Constants;\r\nimport ch.bfh.egov.nutzenportfolio.service.customizing.CustomizingService;\r\nimport ch.bfh.egov.nutzenportfolio.service.projektgruppe.ProjektgruppeService;\r\nimport ch.bfh.egov.nutzenportfolio.tos.Projektgruppe;\r\nimport org.apache.commons.logging.Log;\r\nimport org.apache.commons.logging.LogFactory;\r\nimport org.apache.struts.action.ActionForm;\r\nimport org.apache.struts.action.ActionForward;\r\nimport org.apache.struts.action.ActionMapping;\r\nimport org.apache.struts.action.ActionMessage;\r\nimport org.apache.struts.action.ActionMessages;\r\nimport org.apache.struts.action.DynaActionForm;\r\nimport org.apache.struts.actions.DispatchAction;\r\n\r\npublic class ProjektgruppeAction extends DispatchAction {\r\n\r\n    private Log logger = LogFactory.getLog(this.getClass());\r\n\r\n    private ProjektgruppeService service;\r\n\r\n    public ProjektgruppeAction(ProjektgruppeService service, CustomizingService cService) {\r\n        super();\r\n        this.service = service;\r\n        this.service.init(cService);\r\n    }\r\n\r\n    public ActionForward list(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {\r\n        service.populate(request);\r\n        return mapping.findForward(Constants.LIST);\r\n    }\r\n\r\n    public ActionForward prepare(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {\r\n        logger.debug(\"prepare\");\r\n        DynaActionForm pForm = (DynaActionForm) form;\r\n        service.prepare(request, pForm);\r\n        return mapping.findForward(Constants.FORM);\r\n    }\r\n\r\n    public ActionForward save(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {\r\n        // Projektgruppe erzeugen\r\n        DynaActionForm pForm = (DynaActionForm) form;\r\n        Projektgruppe p = service.get(request, pForm);\r\n        // Auf Duplikate ï¿½berprï¿½fen (Name)\r\n        if (service.exists(p)) {\r\n            ActionMessages errors = new ActionMessages();\r\n            errors.add(\"name\", new ActionMessage(\"errors.duplicate\", \"Name\"));\r\n            saveMessages(request, errors);\r\n            return mapping.findForward(Constants.FAILURE);\r\n        }\r\n        // Projektgruppe speichern\r\n        service.save(request, p);\r\n        return mapping.findForward(Constants.SUCCESS);\r\n    }\r\n\r\n    public ActionForward deleteQuestion(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {\r\n        // Projektgruppe anhand der Id holen\r\n        Projektgruppe p = service.get(request);\r\n        // Projektgruppe nicht gefunden, Abbruch\r\n        if (p == null) {\r\n            return mapping.findForward(Constants.LIST);\r\n        }\r\n        // Abfrage zum lï¿½schen erzeugen\r\n        ActionMessages messages = new ActionMessages();\r\n        messages.add(ActionMessages.GLOBAL_MESSAGE, new ActionMessage(\"messages.question.delete\", p.getName()));\r\n        saveMessages(request, messages);\r\n        request.setAttribute(Constants.ACTION, Constants.PROJEKTGRUPPE_ACTION);\r\n        request.setAttribute(Constants.DISPATCH_YES, Constants.DELETE);\r\n        request.setAttribute(Constants.DISPATCH_NO, Constants.LIST);\r\n        request.setAttribute(Constants.ID_NAME, Constants.PROJEKTGRUPPE_ID);\r\n        request.setAttribute(Constants.ID_VALUE, p.getProjektgruppeId());\r\n        return mapping.findForward(Constants.QUESTION);\r\n    }\r\n\r\n    public ActionForward delete(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {\r\n        // Projektgruppe anhand der Id holen\r\n        service.delete(request);\r\n        return mapping.findForward(Constants.LIST);\r\n    }\r\n}\r\n",
		"id": "EvoSuiteBenchmark/46_nutzenportfolio/src/main/java/ch/bfh/egov/nutzenportfolio/action/ProjektgruppeActionTest1.java",
		"test_prompt": "// ProjektgruppeActionTest1.java\npackage ch.bfh.egov.nutzenportfolio.action;\n\nimport javax.servlet.http.HttpServletRequest;\nimport javax.servlet.http.HttpServletResponse;\nimport ch.bfh.egov.nutzenportfolio.Constants;\nimport ch.bfh.egov.nutzenportfolio.service.customizing.CustomizingService;\nimport ch.bfh.egov.nutzenportfolio.service.projektgruppe.ProjektgruppeService;\nimport ch.bfh.egov.nutzenportfolio.tos.Projektgruppe;\nimport org.apache.commons.logging.Log;\nimport org.apache.commons.logging.LogFactory;\nimport org.apache.struts.action.ActionForm;\nimport org.apache.struts.action.ActionForward;\nimport org.apache.struts.action.ActionMapping;\nimport org.apache.struts.action.ActionMessage;\nimport org.apache.struts.action.ActionMessages;\nimport org.apache.struts.action.DynaActionForm;\nimport org.apache.struts.actions.DispatchAction;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link ProjektgruppeAction}.\n* It contains ten unit test cases for the {@link ProjektgruppeAction#prepare(ActionMapping, ActionForm, HttpServletRequest, HttpServletResponse)} method.\n*/\nclass ProjektgruppeActionTest1 {"
	},
	{
		"original_code": "// ProjektgruppeAction.java\n/**\r\n * Nutzenportfolio\r\n * Copyright (C) 2006 Kompetenzzentrum E-Business, Simon Bergamin\r\n *\r\n * This program is free software; you can redistribute it and/or\r\n * modify it under the terms of the GNU General Public License\r\n * as published by the Free Software Foundation; either version 2\r\n * of the License, or (at your option) any later version.\r\n *\r\n * This program is distributed in the hope that it will be useful,\r\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n * GNU General Public License for more details.\r\n *\r\n * You should have received a copy of the GNU General Public License\r\n * along with this program; if not, write to the Free Software\r\n * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\r\n */\r\npackage ch.bfh.egov.nutzenportfolio.action;\r\n\r\nimport javax.servlet.http.HttpServletRequest;\r\nimport javax.servlet.http.HttpServletResponse;\r\nimport ch.bfh.egov.nutzenportfolio.Constants;\r\nimport ch.bfh.egov.nutzenportfolio.service.customizing.CustomizingService;\r\nimport ch.bfh.egov.nutzenportfolio.service.projektgruppe.ProjektgruppeService;\r\nimport ch.bfh.egov.nutzenportfolio.tos.Projektgruppe;\r\nimport org.apache.commons.logging.Log;\r\nimport org.apache.commons.logging.LogFactory;\r\nimport org.apache.struts.action.ActionForm;\r\nimport org.apache.struts.action.ActionForward;\r\nimport org.apache.struts.action.ActionMapping;\r\nimport org.apache.struts.action.ActionMessage;\r\nimport org.apache.struts.action.ActionMessages;\r\nimport org.apache.struts.action.DynaActionForm;\r\nimport org.apache.struts.actions.DispatchAction;\r\n\r\npublic class ProjektgruppeAction extends DispatchAction {\r\n\r\n    private Log logger = LogFactory.getLog(this.getClass());\r\n\r\n    private ProjektgruppeService service;\r\n\r\n    public ProjektgruppeAction(ProjektgruppeService service, CustomizingService cService) {\r\n        super();\r\n        this.service = service;\r\n        this.service.init(cService);\r\n    }\r\n\r\n    public ActionForward list(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {\r\n        service.populate(request);\r\n        return mapping.findForward(Constants.LIST);\r\n    }\r\n\r\n    public ActionForward prepare(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {\r\n        logger.debug(\"prepare\");\r\n        DynaActionForm pForm = (DynaActionForm) form;\r\n        service.prepare(request, pForm);\r\n        return mapping.findForward(Constants.FORM);\r\n    }\r\n\r\n    public ActionForward save(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {\r\n        // Projektgruppe erzeugen\r\n        DynaActionForm pForm = (DynaActionForm) form;\r\n        Projektgruppe p = service.get(request, pForm);\r\n        // Auf Duplikate ï¿½berprï¿½fen (Name)\r\n        if (service.exists(p)) {\r\n            ActionMessages errors = new ActionMessages();\r\n            errors.add(\"name\", new ActionMessage(\"errors.duplicate\", \"Name\"));\r\n            saveMessages(request, errors);\r\n            return mapping.findForward(Constants.FAILURE);\r\n        }\r\n        // Projektgruppe speichern\r\n        service.save(request, p);\r\n        return mapping.findForward(Constants.SUCCESS);\r\n    }\r\n\r\n    public ActionForward deleteQuestion(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {\r\n        // Projektgruppe anhand der Id holen\r\n        Projektgruppe p = service.get(request);\r\n        // Projektgruppe nicht gefunden, Abbruch\r\n        if (p == null) {\r\n            return mapping.findForward(Constants.LIST);\r\n        }\r\n        // Abfrage zum lï¿½schen erzeugen\r\n        ActionMessages messages = new ActionMessages();\r\n        messages.add(ActionMessages.GLOBAL_MESSAGE, new ActionMessage(\"messages.question.delete\", p.getName()));\r\n        saveMessages(request, messages);\r\n        request.setAttribute(Constants.ACTION, Constants.PROJEKTGRUPPE_ACTION);\r\n        request.setAttribute(Constants.DISPATCH_YES, Constants.DELETE);\r\n        request.setAttribute(Constants.DISPATCH_NO, Constants.LIST);\r\n        request.setAttribute(Constants.ID_NAME, Constants.PROJEKTGRUPPE_ID);\r\n        request.setAttribute(Constants.ID_VALUE, p.getProjektgruppeId());\r\n        return mapping.findForward(Constants.QUESTION);\r\n    }\r\n\r\n    public ActionForward delete(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {\r\n        // Projektgruppe anhand der Id holen\r\n        service.delete(request);\r\n        return mapping.findForward(Constants.LIST);\r\n    }\r\n}\r\n",
		"id": "EvoSuiteBenchmark/46_nutzenportfolio/src/main/java/ch/bfh/egov/nutzenportfolio/action/ProjektgruppeActionTest2.java",
		"test_prompt": "// ProjektgruppeActionTest2.java\npackage ch.bfh.egov.nutzenportfolio.action;\n\nimport javax.servlet.http.HttpServletRequest;\nimport javax.servlet.http.HttpServletResponse;\nimport ch.bfh.egov.nutzenportfolio.Constants;\nimport ch.bfh.egov.nutzenportfolio.service.customizing.CustomizingService;\nimport ch.bfh.egov.nutzenportfolio.service.projektgruppe.ProjektgruppeService;\nimport ch.bfh.egov.nutzenportfolio.tos.Projektgruppe;\nimport org.apache.commons.logging.Log;\nimport org.apache.commons.logging.LogFactory;\nimport org.apache.struts.action.ActionForm;\nimport org.apache.struts.action.ActionForward;\nimport org.apache.struts.action.ActionMapping;\nimport org.apache.struts.action.ActionMessage;\nimport org.apache.struts.action.ActionMessages;\nimport org.apache.struts.action.DynaActionForm;\nimport org.apache.struts.actions.DispatchAction;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link ProjektgruppeAction}.\n* It contains ten unit test cases for the {@link ProjektgruppeAction#save(ActionMapping, ActionForm, HttpServletRequest, HttpServletResponse)} method.\n*/\nclass ProjektgruppeActionTest2 {"
	},
	{
		"original_code": "// ProjektgruppeAction.java\n/**\r\n * Nutzenportfolio\r\n * Copyright (C) 2006 Kompetenzzentrum E-Business, Simon Bergamin\r\n *\r\n * This program is free software; you can redistribute it and/or\r\n * modify it under the terms of the GNU General Public License\r\n * as published by the Free Software Foundation; either version 2\r\n * of the License, or (at your option) any later version.\r\n *\r\n * This program is distributed in the hope that it will be useful,\r\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n * GNU General Public License for more details.\r\n *\r\n * You should have received a copy of the GNU General Public License\r\n * along with this program; if not, write to the Free Software\r\n * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\r\n */\r\npackage ch.bfh.egov.nutzenportfolio.action;\r\n\r\nimport javax.servlet.http.HttpServletRequest;\r\nimport javax.servlet.http.HttpServletResponse;\r\nimport ch.bfh.egov.nutzenportfolio.Constants;\r\nimport ch.bfh.egov.nutzenportfolio.service.customizing.CustomizingService;\r\nimport ch.bfh.egov.nutzenportfolio.service.projektgruppe.ProjektgruppeService;\r\nimport ch.bfh.egov.nutzenportfolio.tos.Projektgruppe;\r\nimport org.apache.commons.logging.Log;\r\nimport org.apache.commons.logging.LogFactory;\r\nimport org.apache.struts.action.ActionForm;\r\nimport org.apache.struts.action.ActionForward;\r\nimport org.apache.struts.action.ActionMapping;\r\nimport org.apache.struts.action.ActionMessage;\r\nimport org.apache.struts.action.ActionMessages;\r\nimport org.apache.struts.action.DynaActionForm;\r\nimport org.apache.struts.actions.DispatchAction;\r\n\r\npublic class ProjektgruppeAction extends DispatchAction {\r\n\r\n    private Log logger = LogFactory.getLog(this.getClass());\r\n\r\n    private ProjektgruppeService service;\r\n\r\n    public ProjektgruppeAction(ProjektgruppeService service, CustomizingService cService) {\r\n        super();\r\n        this.service = service;\r\n        this.service.init(cService);\r\n    }\r\n\r\n    public ActionForward list(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {\r\n        service.populate(request);\r\n        return mapping.findForward(Constants.LIST);\r\n    }\r\n\r\n    public ActionForward prepare(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {\r\n        logger.debug(\"prepare\");\r\n        DynaActionForm pForm = (DynaActionForm) form;\r\n        service.prepare(request, pForm);\r\n        return mapping.findForward(Constants.FORM);\r\n    }\r\n\r\n    public ActionForward save(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {\r\n        // Projektgruppe erzeugen\r\n        DynaActionForm pForm = (DynaActionForm) form;\r\n        Projektgruppe p = service.get(request, pForm);\r\n        // Auf Duplikate ï¿½berprï¿½fen (Name)\r\n        if (service.exists(p)) {\r\n            ActionMessages errors = new ActionMessages();\r\n            errors.add(\"name\", new ActionMessage(\"errors.duplicate\", \"Name\"));\r\n            saveMessages(request, errors);\r\n            return mapping.findForward(Constants.FAILURE);\r\n        }\r\n        // Projektgruppe speichern\r\n        service.save(request, p);\r\n        return mapping.findForward(Constants.SUCCESS);\r\n    }\r\n\r\n    public ActionForward deleteQuestion(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {\r\n        // Projektgruppe anhand der Id holen\r\n        Projektgruppe p = service.get(request);\r\n        // Projektgruppe nicht gefunden, Abbruch\r\n        if (p == null) {\r\n            return mapping.findForward(Constants.LIST);\r\n        }\r\n        // Abfrage zum lï¿½schen erzeugen\r\n        ActionMessages messages = new ActionMessages();\r\n        messages.add(ActionMessages.GLOBAL_MESSAGE, new ActionMessage(\"messages.question.delete\", p.getName()));\r\n        saveMessages(request, messages);\r\n        request.setAttribute(Constants.ACTION, Constants.PROJEKTGRUPPE_ACTION);\r\n        request.setAttribute(Constants.DISPATCH_YES, Constants.DELETE);\r\n        request.setAttribute(Constants.DISPATCH_NO, Constants.LIST);\r\n        request.setAttribute(Constants.ID_NAME, Constants.PROJEKTGRUPPE_ID);\r\n        request.setAttribute(Constants.ID_VALUE, p.getProjektgruppeId());\r\n        return mapping.findForward(Constants.QUESTION);\r\n    }\r\n\r\n    public ActionForward delete(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {\r\n        // Projektgruppe anhand der Id holen\r\n        service.delete(request);\r\n        return mapping.findForward(Constants.LIST);\r\n    }\r\n}\r\n",
		"id": "EvoSuiteBenchmark/46_nutzenportfolio/src/main/java/ch/bfh/egov/nutzenportfolio/action/ProjektgruppeActionTest3.java",
		"test_prompt": "// ProjektgruppeActionTest3.java\npackage ch.bfh.egov.nutzenportfolio.action;\n\nimport javax.servlet.http.HttpServletRequest;\nimport javax.servlet.http.HttpServletResponse;\nimport ch.bfh.egov.nutzenportfolio.Constants;\nimport ch.bfh.egov.nutzenportfolio.service.customizing.CustomizingService;\nimport ch.bfh.egov.nutzenportfolio.service.projektgruppe.ProjektgruppeService;\nimport ch.bfh.egov.nutzenportfolio.tos.Projektgruppe;\nimport org.apache.commons.logging.Log;\nimport org.apache.commons.logging.LogFactory;\nimport org.apache.struts.action.ActionForm;\nimport org.apache.struts.action.ActionForward;\nimport org.apache.struts.action.ActionMapping;\nimport org.apache.struts.action.ActionMessage;\nimport org.apache.struts.action.ActionMessages;\nimport org.apache.struts.action.DynaActionForm;\nimport org.apache.struts.actions.DispatchAction;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link ProjektgruppeAction}.\n* It contains ten unit test cases for the {@link ProjektgruppeAction#deleteQuestion(ActionMapping, ActionForm, HttpServletRequest, HttpServletResponse)} method.\n*/\nclass ProjektgruppeActionTest3 {"
	},
	{
		"original_code": "// ProjektgruppeAction.java\n/**\r\n * Nutzenportfolio\r\n * Copyright (C) 2006 Kompetenzzentrum E-Business, Simon Bergamin\r\n *\r\n * This program is free software; you can redistribute it and/or\r\n * modify it under the terms of the GNU General Public License\r\n * as published by the Free Software Foundation; either version 2\r\n * of the License, or (at your option) any later version.\r\n *\r\n * This program is distributed in the hope that it will be useful,\r\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n * GNU General Public License for more details.\r\n *\r\n * You should have received a copy of the GNU General Public License\r\n * along with this program; if not, write to the Free Software\r\n * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\r\n */\r\npackage ch.bfh.egov.nutzenportfolio.action;\r\n\r\nimport javax.servlet.http.HttpServletRequest;\r\nimport javax.servlet.http.HttpServletResponse;\r\nimport ch.bfh.egov.nutzenportfolio.Constants;\r\nimport ch.bfh.egov.nutzenportfolio.service.customizing.CustomizingService;\r\nimport ch.bfh.egov.nutzenportfolio.service.projektgruppe.ProjektgruppeService;\r\nimport ch.bfh.egov.nutzenportfolio.tos.Projektgruppe;\r\nimport org.apache.commons.logging.Log;\r\nimport org.apache.commons.logging.LogFactory;\r\nimport org.apache.struts.action.ActionForm;\r\nimport org.apache.struts.action.ActionForward;\r\nimport org.apache.struts.action.ActionMapping;\r\nimport org.apache.struts.action.ActionMessage;\r\nimport org.apache.struts.action.ActionMessages;\r\nimport org.apache.struts.action.DynaActionForm;\r\nimport org.apache.struts.actions.DispatchAction;\r\n\r\npublic class ProjektgruppeAction extends DispatchAction {\r\n\r\n    private Log logger = LogFactory.getLog(this.getClass());\r\n\r\n    private ProjektgruppeService service;\r\n\r\n    public ProjektgruppeAction(ProjektgruppeService service, CustomizingService cService) {\r\n        super();\r\n        this.service = service;\r\n        this.service.init(cService);\r\n    }\r\n\r\n    public ActionForward list(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {\r\n        service.populate(request);\r\n        return mapping.findForward(Constants.LIST);\r\n    }\r\n\r\n    public ActionForward prepare(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {\r\n        logger.debug(\"prepare\");\r\n        DynaActionForm pForm = (DynaActionForm) form;\r\n        service.prepare(request, pForm);\r\n        return mapping.findForward(Constants.FORM);\r\n    }\r\n\r\n    public ActionForward save(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {\r\n        // Projektgruppe erzeugen\r\n        DynaActionForm pForm = (DynaActionForm) form;\r\n        Projektgruppe p = service.get(request, pForm);\r\n        // Auf Duplikate ï¿½berprï¿½fen (Name)\r\n        if (service.exists(p)) {\r\n            ActionMessages errors = new ActionMessages();\r\n            errors.add(\"name\", new ActionMessage(\"errors.duplicate\", \"Name\"));\r\n            saveMessages(request, errors);\r\n            return mapping.findForward(Constants.FAILURE);\r\n        }\r\n        // Projektgruppe speichern\r\n        service.save(request, p);\r\n        return mapping.findForward(Constants.SUCCESS);\r\n    }\r\n\r\n    public ActionForward deleteQuestion(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {\r\n        // Projektgruppe anhand der Id holen\r\n        Projektgruppe p = service.get(request);\r\n        // Projektgruppe nicht gefunden, Abbruch\r\n        if (p == null) {\r\n            return mapping.findForward(Constants.LIST);\r\n        }\r\n        // Abfrage zum lï¿½schen erzeugen\r\n        ActionMessages messages = new ActionMessages();\r\n        messages.add(ActionMessages.GLOBAL_MESSAGE, new ActionMessage(\"messages.question.delete\", p.getName()));\r\n        saveMessages(request, messages);\r\n        request.setAttribute(Constants.ACTION, Constants.PROJEKTGRUPPE_ACTION);\r\n        request.setAttribute(Constants.DISPATCH_YES, Constants.DELETE);\r\n        request.setAttribute(Constants.DISPATCH_NO, Constants.LIST);\r\n        request.setAttribute(Constants.ID_NAME, Constants.PROJEKTGRUPPE_ID);\r\n        request.setAttribute(Constants.ID_VALUE, p.getProjektgruppeId());\r\n        return mapping.findForward(Constants.QUESTION);\r\n    }\r\n\r\n    public ActionForward delete(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {\r\n        // Projektgruppe anhand der Id holen\r\n        service.delete(request);\r\n        return mapping.findForward(Constants.LIST);\r\n    }\r\n}\r\n",
		"id": "EvoSuiteBenchmark/46_nutzenportfolio/src/main/java/ch/bfh/egov/nutzenportfolio/action/ProjektgruppeActionTest4.java",
		"test_prompt": "// ProjektgruppeActionTest4.java\npackage ch.bfh.egov.nutzenportfolio.action;\n\nimport javax.servlet.http.HttpServletRequest;\nimport javax.servlet.http.HttpServletResponse;\nimport ch.bfh.egov.nutzenportfolio.Constants;\nimport ch.bfh.egov.nutzenportfolio.service.customizing.CustomizingService;\nimport ch.bfh.egov.nutzenportfolio.service.projektgruppe.ProjektgruppeService;\nimport ch.bfh.egov.nutzenportfolio.tos.Projektgruppe;\nimport org.apache.commons.logging.Log;\nimport org.apache.commons.logging.LogFactory;\nimport org.apache.struts.action.ActionForm;\nimport org.apache.struts.action.ActionForward;\nimport org.apache.struts.action.ActionMapping;\nimport org.apache.struts.action.ActionMessage;\nimport org.apache.struts.action.ActionMessages;\nimport org.apache.struts.action.DynaActionForm;\nimport org.apache.struts.actions.DispatchAction;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link ProjektgruppeAction}.\n* It contains ten unit test cases for the {@link ProjektgruppeAction#delete(ActionMapping, ActionForm, HttpServletRequest, HttpServletResponse)} method.\n*/\nclass ProjektgruppeActionTest4 {"
	},
	{
		"original_code": "// ProjektattraktivitaetIbatisDao.java\n/**\r\n * Nutzenportfolio\r\n * Copyright (C) 2006 Kompetenzzentrum E-Business, Simon Bergamin\r\n *\r\n * This program is free software; you can redistribute it and/or\r\n * modify it under the terms of the GNU General Public License\r\n * as published by the Free Software Foundation; either version 2\r\n * of the License, or (at your option) any later version.\r\n *\r\n * This program is distributed in the hope that it will be useful,\r\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n * GNU General Public License for more details.\r\n *\r\n * You should have received a copy of the GNU General Public License\r\n * along with this program; if not, write to the Free Software\r\n * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\r\n */\r\npackage ch.bfh.egov.nutzenportfolio.persistence.fragebogen;\r\n\r\nimport org.apache.commons.logging.Log;\r\nimport org.apache.commons.logging.LogFactory;\r\nimport org.springframework.orm.ibatis.SqlMapClientTemplate;\r\nimport ch.bfh.egov.nutzenportfolio.tos.Projektattraktivitaet;\r\n\r\n/**\r\n * Implementierende Data Access Object-Klasse fï¿½r den\r\n * Fragebogen Projektattraktivitï¿½t.\r\n *\r\n * @author Kompetenzzentrum E-Business, Simon Bergamin\r\n */\r\npublic class ProjektattraktivitaetIbatisDao extends SqlMapClientTemplate implements ProjektattraktivitaetDao {\r\n\r\n    Log logger = LogFactory.getLog(this.getClass());\r\n\r\n    /**\r\n     * Holte eine Projektattraktivitï¿½t anhand der E-Mail-Adresse.\r\n     *\r\n     * @param pa        die Projektattraktivitï¿½t mit den benï¿½tigten Daten\r\n     * @return          die Projektattraktivitï¿½t\r\n     */\r\n    public Projektattraktivitaet getByEmail(Projektattraktivitaet pa) {\r\n        return (Projektattraktivitaet) queryForObject(\"Projektattraktivitaet.getByEmail\", pa);\r\n    }\r\n\r\n    /**\r\n     * Holte eine Projektattraktivitï¿½t anhand seiner UID.\r\n     *\r\n     * @param paUID     die UID der Projektattraktivitï¿½t\r\n     * @return          die Projektattraktivitï¿½t\r\n     */\r\n    public Projektattraktivitaet getByUID(Long paUID) {\r\n        return (Projektattraktivitaet) queryForObject(\"Projektattraktivitaet.getByUID\", paUID);\r\n    }\r\n\r\n    /**\r\n     * Speicher eine neues Resultat einer Projektattraktivitï¿½t.\r\n     *\r\n     * @param p         die Projektattraktivitï¿½t mit den benï¿½tigten Daten\r\n     * @return          die Id der Projektattraktivitï¿½t\r\n     */\r\n    public Integer insertProjektattraktivitaetResultat(Projektattraktivitaet p) {\r\n        return (Integer) insert(\"Projektattraktivitaet.insertProjektattraktivitaetResultat\", p);\r\n    }\r\n\r\n    /**\r\n     * Lï¿½scht alle Resultate einer Projektattraktivitï¿½t.\r\n     *\r\n     * @param customizingId     die Id des Customizings\r\n     */\r\n    public void deleteAssignments(Integer customizingId) {\r\n        delete(\"Projektattraktivitaet.deleteAssignments\", customizingId);\r\n    }\r\n}\r\n",
		"id": "EvoSuiteBenchmark/46_nutzenportfolio/src/main/java/ch/bfh/egov/nutzenportfolio/persistence/fragebogen/ProjektattraktivitaetIbatisDaoTest.java",
		"test_prompt": "// ProjektattraktivitaetIbatisDaoTest.java\npackage ch.bfh.egov.nutzenportfolio.persistence.fragebogen;\n\nimport org.apache.commons.logging.Log;\nimport org.apache.commons.logging.LogFactory;\nimport org.springframework.orm.ibatis.SqlMapClientTemplate;\nimport ch.bfh.egov.nutzenportfolio.tos.Projektattraktivitaet;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link ProjektattraktivitaetIbatisDao}.\n* It contains ten unit test cases for the {@link ProjektattraktivitaetIbatisDao#insertProjektattraktivitaetResultat(Projektattraktivitaet)} method.\n*/\nclass ProjektattraktivitaetIbatisDaoTest {"
	},
	{
		"original_code": "// NaOpNuIbatisDao.java\n/**\r\n * Nutzenportfolio\r\n * Copyright (C) 2006 Kompetenzzentrum E-Business, Simon Bergamin\r\n *\r\n * This program is free software; you can redistribute it and/or\r\n * modify it under the terms of the GNU General Public License\r\n * as published by the Free Software Foundation; either version 2\r\n * of the License, or (at your option) any later version.\r\n *\r\n * This program is distributed in the hope that it will be useful,\r\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n * GNU General Public License for more details.\r\n *\r\n * You should have received a copy of the GNU General Public License\r\n * along with this program; if not, write to the Free Software\r\n * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\r\n */\r\npackage ch.bfh.egov.nutzenportfolio.persistence.fragebogen;\r\n\r\nimport org.apache.commons.logging.Log;\r\nimport org.apache.commons.logging.LogFactory;\r\nimport org.springframework.orm.ibatis.SqlMapClientTemplate;\r\nimport ch.bfh.egov.nutzenportfolio.tos.NaOpNu;\r\n\r\n/**\r\n * Implementierende Data Access Object-Klasse fï¿½r die Fragebï¿½gen\r\n * Nutzenattraktivitï¿½t und Operativer Nutzen.\r\n *\r\n * @author Kompetenzzentrum E-Business, Simon Bergamin\r\n */\r\npublic class NaOpNuIbatisDao extends SqlMapClientTemplate implements NaOpNuDao {\r\n\r\n    Log logger = LogFactory.getLog(this.getClass());\r\n\r\n    /**\r\n     * Holt eine Nutzenattraktivitï¿½t bzw. einen Operativer Nutzen\r\n     * anhand der E-Mail-Adresse.\r\n     *\r\n     * @param naOpNu      Nutzenattraktivitï¿½t / Operativer Nutzen-Objekt\r\n     * @return            Nutzenattraktivitï¿½t / Operativer Nutzen-Objekt\r\n     */\r\n    public NaOpNu getByEmail(NaOpNu naOpNu) {\r\n        return (NaOpNu) queryForObject(\"NutzenattraktivitaetOperativerNutzen.getByEmail\", naOpNu);\r\n    }\r\n\r\n    /**\r\n     * Holt eine Nutzenattraktivitï¿½t bzw. einen Operativer Nutzen\r\n     * anhand der UID.\r\n     *\r\n     * @param naOpNuUID   die UID der Nutzenattraktivitï¿½t bzw.\r\n     *                    des Operativen Nutzens\r\n     * @return            Nutzenattraktivitï¿½t / Operativer Nutzen-Objekt\r\n     */\r\n    public NaOpNu getByUID(Long naOpNuUID) {\r\n        return (NaOpNu) queryForObject(\"NutzenattraktivitaetOperativerNutzen.getByUID\", naOpNuUID);\r\n    }\r\n\r\n    /**\r\n     * Holt das Resultat eines Fragebogens der\r\n     * Nutzenattraktivitï¿½t oder des Operativer Nutzens\r\n     *\r\n     * @param naOpNu     Nutzenattraktivitï¿½t / Operativer Nutzen-Objekt\r\n     *                   mit den benï¿½tigten Daten\r\n     * @return            Nutzenattraktivitï¿½t / Operativer Nutzen-Objekt\r\n     */\r\n    public NaOpNu getNaOpNuResultat(NaOpNu naOpNu) {\r\n        return (NaOpNu) queryForObject(\"NutzenattraktivitaetOperativerNutzen.getNaOpNuResultat\", naOpNu);\r\n    }\r\n\r\n    /**\r\n     * Holt das Resultat eines Fragebogens der Projektattraktivitï¿½t.\r\n     *\r\n     * @param naOpNu     Nutzenattraktivitï¿½t / Operativer Nutzen-Objekt\r\n     *                   mit den benï¿½tigten Daten\r\n     * @return            Nutzenattraktivitï¿½t / Operativer Nutzen-Objekt\r\n     */\r\n    public NaOpNu getPaResultat(NaOpNu naOpNu) {\r\n        return (NaOpNu) queryForObject(\"NutzenattraktivitaetOperativerNutzen.getPaResultat\", naOpNu);\r\n    }\r\n\r\n    /**\r\n     * Speichert ein neues Resultat eines Fragebogens der\r\n     * Nutzenattraktivitï¿½t oder des Operativer Nutzens.\r\n     *\r\n     * @param naOpNu      Nutzenattraktivitï¿½t / Operativer Nutzen-Objekt\r\n     *                    mit den benï¿½tigten Daten\r\n     * @return            Id der neuen Nutzenattraktivitï¿½t bzw. des\r\n     *                    neuen Operativen Nutzens\r\n     */\r\n    public Integer insertNaOpNuResultat(NaOpNu naOpNu) {\r\n        return (Integer) insert(\"NutzenattraktivitaetOperativerNutzen.insertNaOpNuResultat\", naOpNu);\r\n    }\r\n\r\n    /**\r\n     * Lï¿½scht alle bestehenden Resultate eines Customizings von den Fragebï¿½gen\r\n     * Nutzenattraktivitï¿½t und Operativer Nutzen.\r\n     *\r\n     * @param customizingId     die Id des Customizings\r\n     */\r\n    public void deleteAssignments(Integer customizingId) {\r\n        delete(\"NutzenattraktivitaetOperativerNutzen.deleteAssignments\", customizingId);\r\n    }\r\n}\r\n",
		"id": "EvoSuiteBenchmark/46_nutzenportfolio/src/main/java/ch/bfh/egov/nutzenportfolio/persistence/fragebogen/NaOpNuIbatisDaoTest.java",
		"test_prompt": "// NaOpNuIbatisDaoTest.java\npackage ch.bfh.egov.nutzenportfolio.persistence.fragebogen;\n\nimport org.apache.commons.logging.Log;\nimport org.apache.commons.logging.LogFactory;\nimport org.springframework.orm.ibatis.SqlMapClientTemplate;\nimport ch.bfh.egov.nutzenportfolio.tos.NaOpNu;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link NaOpNuIbatisDao}.\n* It contains ten unit test cases for the {@link NaOpNuIbatisDao#insertNaOpNuResultat(NaOpNu)} method.\n*/\nclass NaOpNuIbatisDaoTest {"
	},
	{
		"original_code": "// CustomizingIbatisDao.java\n/**\r\n * Nutzenportfolio\r\n * Copyright (C) 2006 Kompetenzzentrum E-Business, Simon Bergamin\r\n *\r\n * This program is free software; you can redistribute it and/or\r\n * modify it under the terms of the GNU General Public License\r\n * as published by the Free Software Foundation; either version 2\r\n * of the License, or (at your option) any later version.\r\n *\r\n * This program is distributed in the hope that it will be useful,\r\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n * GNU General Public License for more details.\r\n *\r\n * You should have received a copy of the GNU General Public License\r\n * along with this program; if not, write to the Free Software\r\n * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\r\n */\r\npackage ch.bfh.egov.nutzenportfolio.persistence.customizing;\r\n\r\nimport org.apache.commons.logging.Log;\r\nimport org.apache.commons.logging.LogFactory;\r\nimport org.springframework.orm.ibatis.SqlMapClientTemplate;\r\nimport ch.bfh.egov.nutzenportfolio.tos.Customizing;\r\nimport java.util.List;\r\n\r\n/**\r\n * Implementierende Data Access Object-Klasse fï¿½r Customizings.\r\n *\r\n * @author Kompetenzzentrum E-Business, Simon Bergamin\r\n */\r\npublic class CustomizingIbatisDao extends SqlMapClientTemplate implements CustomizingDao {\r\n\r\n    Log logger = LogFactory.getLog(this.getClass());\r\n\r\n    /**\r\n     * Holt ein Customizing anhand seiner Id.\r\n     *\r\n     * @param c           Customizing-Objekt mit benï¿½tigten Daten\r\n     * @return            das Customizing\r\n     */\r\n    public Customizing getById(Customizing c) {\r\n        return ((Customizing) queryForObject(\"Customizing.getById\", c));\r\n    }\r\n\r\n    /**\r\n     * Holt ein Customizing anhand seines Namens.\r\n     *\r\n     * @param c           Customizing-Objekt mit benï¿½tigten Daten\r\n     * @return            das Customizing\r\n     */\r\n    public Customizing getByName(Customizing c) {\r\n        return ((Customizing) queryForObject(\"Customizing.getByName\", c));\r\n    }\r\n\r\n    /**\r\n     * Holt ein Customizing anhand der Projektattraktivitï¿½t UID.\r\n     *\r\n     * @param paUID       die UID der Projektattraktivitï¿½t\r\n     * @return            das Customizing\r\n     */\r\n    public Customizing getByPaUID(Long paUID) {\r\n        return ((Customizing) queryForObject(\"Customizing.getByPaUID\", paUID));\r\n    }\r\n\r\n    /**\r\n     * Holt ein Customizing anhand der Nutzenattraktivitï¿½t UID bzw.\r\n     * der Operativer Nutzen UID.\r\n     *\r\n     * @param naOpNuUID   die UID der Nutzenattraktivitï¿½t bzw. des Operativen Nutzens\r\n     * @return            das Customizing\r\n     */\r\n    public Customizing getByNaOpNuUID(Long naOpNuUID) {\r\n        return ((Customizing) queryForObject(\"Customizing.getByNaOpNuUID\", naOpNuUID));\r\n    }\r\n\r\n    /**\r\n     * Holt alle Customizings eines Mandanten.\r\n     *\r\n     * @param mandantId   die Id des Mandanten\r\n     * @return            Liste aller Customizings\r\n     */\r\n    public List<Customizing> getAll(Integer mandantId) {\r\n        return queryForList(\"Customizing.getAll\", mandantId);\r\n    }\r\n\r\n    /**\r\n     * Speichert ein neues Customizing.\r\n     *\r\n     * @param c     Customizing-Objekt mit benï¿½tigten Daten\r\n     * @return      die Id des Customizings\r\n     */\r\n    public Integer insert(Customizing c) {\r\n        return (Integer) insert(\"Customizing.insert\", c);\r\n    }\r\n\r\n    /**\r\n     * ï¿½ndert ein bestehendes Customizing.\r\n     *\r\n     * @param c    Customizing-Objekt mit benï¿½tigten Daten\r\n     */\r\n    public void update(Customizing c) {\r\n        update(\"Customizing.update\", c);\r\n    }\r\n\r\n    /**\r\n     * Lï¿½scht ein bestehendes Customizing.\r\n     *\r\n     * @param c    Customizing-Objekt mit benï¿½tigten Daten\r\n     */\r\n    public void delete(Customizing c) {\r\n        delete(\"Customizing.delete\", c);\r\n    }\r\n}\r\n",
		"id": "EvoSuiteBenchmark/46_nutzenportfolio/src/main/java/ch/bfh/egov/nutzenportfolio/persistence/customizing/CustomizingIbatisDaoTest.java",
		"test_prompt": "// CustomizingIbatisDaoTest.java\npackage ch.bfh.egov.nutzenportfolio.persistence.customizing;\n\nimport org.apache.commons.logging.Log;\nimport org.apache.commons.logging.LogFactory;\nimport org.springframework.orm.ibatis.SqlMapClientTemplate;\nimport ch.bfh.egov.nutzenportfolio.tos.Customizing;\nimport java.util.List;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link CustomizingIbatisDao}.\n* It contains ten unit test cases for the {@link CustomizingIbatisDao#insert(Customizing)} method.\n*/\nclass CustomizingIbatisDaoTest {"
	},
	{
		"original_code": "// ProjektIbatisDao.java\n/**\r\n * Nutzenportfolio\r\n * Copyright (C) 2006 Kompetenzzentrum E-Business, Simon Bergamin\r\n *\r\n * This program is free software; you can redistribute it and/or\r\n * modify it under the terms of the GNU General Public License\r\n * as published by the Free Software Foundation; either version 2\r\n * of the License, or (at your option) any later version.\r\n *\r\n * This program is distributed in the hope that it will be useful,\r\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n * GNU General Public License for more details.\r\n *\r\n * You should have received a copy of the GNU General Public License\r\n * along with this program; if not, write to the Free Software\r\n * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\r\n */\r\npackage ch.bfh.egov.nutzenportfolio.persistence.projekt;\r\n\r\nimport java.util.List;\r\nimport org.apache.commons.logging.Log;\r\nimport org.apache.commons.logging.LogFactory;\r\nimport org.springframework.orm.ibatis.SqlMapClientTemplate;\r\nimport ch.bfh.egov.nutzenportfolio.tos.Projekt;\r\nimport ch.bfh.egov.nutzenportfolio.tos.Projektgruppe;\r\n\r\n/**\r\n * Implementierende Data Access Object-Klasse fï¿½r Projekte.\r\n *\r\n * @author Kompetenzzentrum E-Business, Simon Bergamin\r\n */\r\npublic class ProjektIbatisDao extends SqlMapClientTemplate implements ProjektDao {\r\n\r\n    Log logger = LogFactory.getLog(this.getClass());\r\n\r\n    /**\r\n     * Holt alle Projekte eines Mandanten.\r\n     *\r\n     * @param mandantId   die Id des Mandanten\r\n     * @return            Liste aller Projekte\r\n     */\r\n    public List<Projekt> getAll(Integer mandantId) {\r\n        return queryForList(\"Projekt.getAll\", mandantId);\r\n    }\r\n\r\n    /**\r\n     * Holt alle Projekte der angegebenen Projektgruppe eines Mandanten.\r\n     *\r\n     * @param pg  Projektgruppe der gesuchten Projekte\r\n     * @return    Liste der Projekte\r\n     */\r\n    public List<Projekt> getGroup(Projektgruppe pg) {\r\n        return queryForList(\"Projekt.getGroup\", pg);\r\n    }\r\n\r\n    /**\r\n     * Holt ein Projekt anhand seiner Id.\r\n     *\r\n     * @param p           Projekt-Objekt mit benï¿½tigten Daten\r\n     * @return            das Projekt\r\n     */\r\n    public Projekt getById(Projekt p) {\r\n        return (Projekt) queryForObject(\"Projekt.getById\", p);\r\n    }\r\n\r\n    /**\r\n     * Holt ein Projekt anhand seines Namens.\r\n     *\r\n     * @param p             Projekt-Objekt mit benï¿½tigten Daten\r\n     * @return              das Projekt\r\n     */\r\n    public Projekt getByName(Projekt p) {\r\n        return (Projekt) queryForObject(\"Projekt.getByName\", p);\r\n    }\r\n\r\n    /**\r\n     * Holt ein Projekt anhand seiner UID.\r\n     *\r\n     * @param projektUID    die UID des Projekts\r\n     * @return              das Projekt\r\n     */\r\n    public Projekt getByUID(Long projektUID) {\r\n        return (Projekt) queryForObject(\"Projekt.getByUID\", projektUID);\r\n    }\r\n\r\n    /**\r\n     * Speichert ein neues Projekt.\r\n     *\r\n     * @param p           Projekt-Objekt mit benï¿½tigten Daten\r\n     */\r\n    public Integer insert(Projekt p) {\r\n        return (Integer) insert(\"Projekt.insert\", p);\r\n    }\r\n\r\n    /**\r\n     * ï¿½ndert ein bestehendes Projekt.\r\n     *\r\n     * @param p           Projekt-Objekt mit benï¿½tigten Daten\r\n     */\r\n    public void update(Projekt p) {\r\n        update(\"Projekt.update\", p);\r\n    }\r\n\r\n    /**\r\n     * ï¿½ndert die Status eines bestehenden Projekts.\r\n     *\r\n     * @param p           Projekt-Objekt mit benï¿½tigten Daten\r\n     */\r\n    public void updateStatus(Projekt p) {\r\n        update(\"Projekt.updateStatus\", p);\r\n    }\r\n\r\n    /**\r\n     * Lï¿½scht ein bestehendes Projekt.\r\n     *\r\n     * @param p     das zu lï¿½schende Projekt\r\n     */\r\n    public void delete(Projekt p) {\r\n        update(\"Projekt.delete\", p);\r\n    }\r\n}\r\n",
		"id": "EvoSuiteBenchmark/46_nutzenportfolio/src/main/java/ch/bfh/egov/nutzenportfolio/persistence/projekt/ProjektIbatisDaoTest.java",
		"test_prompt": "// ProjektIbatisDaoTest.java\npackage ch.bfh.egov.nutzenportfolio.persistence.projekt;\n\nimport java.util.List;\nimport org.apache.commons.logging.Log;\nimport org.apache.commons.logging.LogFactory;\nimport org.springframework.orm.ibatis.SqlMapClientTemplate;\nimport ch.bfh.egov.nutzenportfolio.tos.Projekt;\nimport ch.bfh.egov.nutzenportfolio.tos.Projektgruppe;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link ProjektIbatisDao}.\n* It contains ten unit test cases for the {@link ProjektIbatisDao#insert(Projekt)} method.\n*/\nclass ProjektIbatisDaoTest {"
	},
	{
		"original_code": "// ProjektgruppeIbatisDao.java\n/**\r\n * Nutzenportfolio\r\n * Copyright (C) 2006 Kompetenzzentrum E-Business, Simon Bergamin\r\n *\r\n * This program is free software; you can redistribute it and/or\r\n * modify it under the terms of the GNU General Public License\r\n * as published by the Free Software Foundation; either version 2\r\n * of the License, or (at your option) any later version.\r\n *\r\n * This program is distributed in the hope that it will be useful,\r\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n * GNU General Public License for more details.\r\n *\r\n * You should have received a copy of the GNU General Public License\r\n * along with this program; if not, write to the Free Software\r\n * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\r\n */\r\npackage ch.bfh.egov.nutzenportfolio.persistence.projektgruppe;\r\n\r\nimport java.util.List;\r\nimport org.apache.commons.logging.Log;\r\nimport org.apache.commons.logging.LogFactory;\r\nimport org.springframework.orm.ibatis.SqlMapClientTemplate;\r\nimport ch.bfh.egov.nutzenportfolio.tos.Projektgruppe;\r\n\r\n/**\r\n * Implementierende Data Access Object-Klasse fï¿½r Projektgruppen.\r\n *\r\n * @author Kompetenzzentrum E-Business, Simon Bergamin\r\n */\r\npublic class ProjektgruppeIbatisDao extends SqlMapClientTemplate implements ProjektgruppeDao {\r\n\r\n    Log logger = LogFactory.getLog(this.getClass());\r\n\r\n    /**\r\n     * Holt alle Projektgruppen eines Mandanten.\r\n     *\r\n     * @param mandantId   die Id des Mandanten\r\n     * @return            Liste aller Projektgruppen\r\n     */\r\n    public List getAll(Integer mandantId) {\r\n        return queryForList(\"Projektgruppe.getAll\", mandantId);\r\n    }\r\n\r\n    /**\r\n     * Holt eine Projektgruppe anhand seiner Id.\r\n     *\r\n     * @param p           Projektgruppe-Objekt mit benï¿½tigten Daten\r\n     * @return            die Projektgruppe\r\n     */\r\n    public Projektgruppe getById(Projektgruppe p) {\r\n        return (Projektgruppe) queryForObject(\"Projektgruppe.getById\", p);\r\n    }\r\n\r\n    /**\r\n     * Holt eine Projektgruppe anhand seines Namens.\r\n     *\r\n     * @param p             Projektgruppe-Objekt mit benï¿½tigten Daten\r\n     * @return              die Projektgruppe\r\n     */\r\n    public Projektgruppe getByName(Projektgruppe p) {\r\n        return (Projektgruppe) queryForObject(\"Projektgruppe.getByName\", p);\r\n    }\r\n\r\n    /**\r\n     * Speichert eine neue Projektgruppe.\r\n     *\r\n     * @param p           Projektgruppe-Objekt mit benï¿½tigten Daten\r\n     */\r\n    public Integer insert(Projektgruppe p) {\r\n        return (Integer) insert(\"Projektgruppe.insert\", p);\r\n    }\r\n\r\n    /**\r\n     * ï¿½ndert eine bestehende Projektgruppe.\r\n     *\r\n     * @param p           Projektgruppe-Objekt mit benï¿½tigten Daten\r\n     */\r\n    public void update(Projektgruppe p) {\r\n        update(\"Projektgruppe.update\", p);\r\n    }\r\n\r\n    /**\r\n     * Lï¿½scht eine bestehende Projektgruppe.\r\n     *\r\n     * @param p     die zu lï¿½schende Projektgruppe\r\n     */\r\n    public void delete(Projektgruppe p) {\r\n        update(\"Projektgruppe.delete\", p);\r\n    }\r\n\r\n    /**\r\n     * Lï¿½scht alle Verknï¿½pfungen von Projektgruppen zu\r\n     * einem Customizing.\r\n     *\r\n     * @param customizingId     die Id des Customizings\r\n     */\r\n    public void unsetCustomizingId(Integer customizingId) {\r\n        update(\"Projektgruppe.unsetCustomizingId\", customizingId);\r\n    }\r\n}\r\n",
		"id": "EvoSuiteBenchmark/46_nutzenportfolio/src/main/java/ch/bfh/egov/nutzenportfolio/persistence/projektgruppe/ProjektgruppeIbatisDaoTest.java",
		"test_prompt": "// ProjektgruppeIbatisDaoTest.java\npackage ch.bfh.egov.nutzenportfolio.persistence.projektgruppe;\n\nimport java.util.List;\nimport org.apache.commons.logging.Log;\nimport org.apache.commons.logging.LogFactory;\nimport org.springframework.orm.ibatis.SqlMapClientTemplate;\nimport ch.bfh.egov.nutzenportfolio.tos.Projektgruppe;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link ProjektgruppeIbatisDao}.\n* It contains ten unit test cases for the {@link ProjektgruppeIbatisDao#insert(Projektgruppe)} method.\n*/\nclass ProjektgruppeIbatisDaoTest {"
	},
	{
		"original_code": "// KategorieIbatisDao.java\n/**\r\n * Nutzenportfolio\r\n * Copyright (C) 2006 Kompetenzzentrum E-Business, Simon Bergamin\r\n *\r\n * This program is free software; you can redistribute it and/or\r\n * modify it under the terms of the GNU General Public License\r\n * as published by the Free Software Foundation; either version 2\r\n * of the License, or (at your option) any later version.\r\n *\r\n * This program is distributed in the hope that it will be useful,\r\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n * GNU General Public License for more details.\r\n *\r\n * You should have received a copy of the GNU General Public License\r\n * along with this program; if not, write to the Free Software\r\n * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\r\n */\r\npackage ch.bfh.egov.nutzenportfolio.persistence.kategorie;\r\n\r\nimport org.apache.commons.logging.Log;\r\nimport org.apache.commons.logging.LogFactory;\r\nimport org.springframework.orm.ibatis.SqlMapClientTemplate;\r\nimport ch.bfh.egov.nutzenportfolio.tos.Customizing;\r\nimport ch.bfh.egov.nutzenportfolio.tos.NaOpNu;\r\nimport ch.bfh.egov.nutzenportfolio.tos.Kategorie;\r\nimport ch.bfh.egov.nutzenportfolio.tos.Nutzenkriterium;\r\nimport java.util.List;\r\n\r\n/**\r\n * Implementierende Data Access Object-Klasse fï¿½r Kategorien.\r\n *\r\n * @author Kompetenzzentrum E-Business, Simon Bergamin\r\n */\r\npublic class KategorieIbatisDao extends SqlMapClientTemplate implements KategorieDao {\r\n\r\n    Log logger = LogFactory.getLog(this.getClass());\r\n\r\n    /**\r\n     * Holt alle Kategorien eines Mandanten.\r\n     *\r\n     * @param mandantId   die Id des Mandanten\r\n     * @return            Liste aller Kategorien die den Kriterien entsprechen\r\n     */\r\n    public List<Kategorie> getAll(Integer mandantId) {\r\n        return queryForList(\"Kategorie.getAll\", mandantId);\r\n    }\r\n\r\n    /**\r\n     * Holt eine Kategorie anhand ihrer Id.\r\n     *\r\n     * @param kategorie       Kategoriem-Objekt mit benï¿½tigten Daten\r\n     * @return                die Kategorie\r\n     */\r\n    public Kategorie getById(Kategorie kategorie) {\r\n        return (Kategorie) queryForObject(\"Kategorie.getById\", kategorie);\r\n    }\r\n\r\n    /**\r\n     * Holt eine Kategorie anhand ihres Namens.\r\n     *\r\n     * @param kategorie       Kategorie-Objekt mit benï¿½tigten Daten\r\n     * @return                die Kategorie\r\n     */\r\n    public Kategorie getByName(Kategorie kategorie) {\r\n        return (Kategorie) queryForObject(\"Kategorie.getByName\", kategorie);\r\n    }\r\n\r\n    /**\r\n     * Holt alle Kategorien, die dem angegeben Projekt zugewiesen sind.\r\n     *\r\n     * @param naOpNu  Nutzenattraktivitï¿½t / Operativer Nutzen-Objekt\r\n     *                mit benï¿½tigten Daten\r\n     * @return        Liste aller Kategorien die den Kriterien entsprechen\r\n     */\r\n    public List<Kategorie> getByProjektId(NaOpNu naOpNu) {\r\n        return queryForList(\"Kategorie.getByProjektId\", naOpNu);\r\n    }\r\n\r\n    /**\r\n     * Holt alle Kategorien, die einer angegebenen Nutzenattraktivitï¿½t\r\n     * bzw. eines Operativen Nutzens  zugewiesen sind.\r\n     *\r\n     * @param kategorie   Kategorie-Objekt mit benï¿½tigten Daten\r\n     * @return            Liste aller Kategorien die den Kriterien entsprechen\r\n     */\r\n    public List<Kategorie> getAssignments(Kategorie kategorie) {\r\n        return queryForList(\"Kategorie.getAssignments\", kategorie);\r\n    }\r\n\r\n    /**\r\n     * Holt alle Customizings, die mit dieser Kategorie verknï¿½pft sind.\r\n     *\r\n     * @param kategorie   Kategorie-Objekt mit benï¿½tigten Daten\r\n     * @return            Liste aller verknï¿½pften Customizings\r\n     */\r\n    public List<Customizing> getLinkedCustomizings(Kategorie kategorie) {\r\n        return queryForList(\"Kategorie.getLinkedCustomizings\", kategorie);\r\n    }\r\n\r\n    /**\r\n     * Holt alle Nutzenkriterien, die mit dieser Kategorie verknï¿½pft sind.\r\n     *\r\n     * @param kategorie   Kategorie-Objekt mit benï¿½tigten Daten\r\n     * @return            Liste aller verknï¿½pften Nutzenkriterien\r\n     */\r\n    public List<Nutzenkriterium> getLinkedNutzenkriterien(Kategorie kategorie) {\r\n        return queryForList(\"Kategorie.getLinkedNutzenkriterien\", kategorie);\r\n    }\r\n\r\n    /**\r\n     * Speichert eine neue Kategorie.\r\n     *\r\n     * @param kategorie        Kategorie-Objekt mit benï¿½tigten Daten\r\n     */\r\n    public void insert(Kategorie kategorie) {\r\n        insert(\"Kategorie.insert\", kategorie);\r\n    }\r\n\r\n    /**\r\n     * ï¿½ndert eine bestehende Kategorie.\r\n     *\r\n     * @param kategorie        Kategorie-Objekt mit benï¿½tigten Daten\r\n     */\r\n    public void update(Kategorie kategorie) {\r\n        update(\"Kategorie.update\", kategorie);\r\n    }\r\n\r\n    /**\r\n     * Lï¿½scht eine bestehende Kategorie.\r\n     *\r\n     * @param kategorie        Kategorie-Objekt mit benï¿½tigten Daten\r\n     */\r\n    public void delete(Kategorie kategorie) {\r\n        delete(\"Kategorie.delete\", kategorie);\r\n    }\r\n\r\n    /**\r\n     * Speichert eine neue Zuweisung zu dieser Kategorie.\r\n     *\r\n     * @param kategorie        Kategorie-Objekt mit benï¿½tigten Daten\r\n     */\r\n    public void insertAssignment(Kategorie kategorie) {\r\n        insert(\"Kategorie.insertAssignment\", kategorie);\r\n    }\r\n\r\n    /**\r\n     * ï¿½ndert eine bestehende Zuweisung zu dieser Kategorie.\r\n     *\r\n     * @param kategorie        Kategorie-Objekt mit benï¿½tigten Daten\r\n     */\r\n    public void updateAssignment(Kategorie kategorie) {\r\n        update(\"Kategorie.updateAssignment\", kategorie);\r\n    }\r\n\r\n    /**\r\n     * Lï¿½scht alle bestehenden Zuweisungen von Kategorien\r\n     * zu der angegebenen Nutzenattraktivitï¿½t bzw. des Operativen Nutzens.\r\n     *\r\n     * @param naOpNuId        die Id der Nutzenattraktivitï¿½t bzw. des\r\n     *                        Operativen Nutzens\r\n     */\r\n    public int deleteAssignments(Integer naOpNuId) {\r\n        return delete(\"Kategorie.deleteAssignments\", naOpNuId);\r\n    }\r\n}\r\n",
		"id": "EvoSuiteBenchmark/46_nutzenportfolio/src/main/java/ch/bfh/egov/nutzenportfolio/persistence/kategorie/KategorieIbatisDaoTest.java",
		"test_prompt": "// KategorieIbatisDaoTest.java\npackage ch.bfh.egov.nutzenportfolio.persistence.kategorie;\n\nimport org.apache.commons.logging.Log;\nimport org.apache.commons.logging.LogFactory;\nimport org.springframework.orm.ibatis.SqlMapClientTemplate;\nimport ch.bfh.egov.nutzenportfolio.tos.Customizing;\nimport ch.bfh.egov.nutzenportfolio.tos.NaOpNu;\nimport ch.bfh.egov.nutzenportfolio.tos.Kategorie;\nimport ch.bfh.egov.nutzenportfolio.tos.Nutzenkriterium;\nimport java.util.List;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link KategorieIbatisDao}.\n* It contains ten unit test cases for the {@link KategorieIbatisDao#deleteAssignments(Integer)} method.\n*/\nclass KategorieIbatisDaoTest {"
	},
	{
		"original_code": "// CommonIbatisDao.java\n/**\r\n * Nutzenportfolio\r\n * Copyright (C) 2006 Kompetenzzentrum E-Business, Simon Bergamin\r\n *\r\n * This program is free software; you can redistribute it and/or\r\n * modify it under the terms of the GNU General Public License\r\n * as published by the Free Software Foundation; either version 2\r\n * of the License, or (at your option) any later version.\r\n *\r\n * This program is distributed in the hope that it will be useful,\r\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n * GNU General Public License for more details.\r\n *\r\n * You should have received a copy of the GNU General Public License\r\n * along with this program; if not, write to the Free Software\r\n * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\r\n */\r\npackage ch.bfh.egov.nutzenportfolio.persistence.common;\r\n\r\nimport org.apache.commons.logging.Log;\r\nimport org.apache.commons.logging.LogFactory;\r\nimport org.springframework.orm.ibatis.SqlMapClientTemplate;\r\nimport ch.bfh.egov.nutzenportfolio.tos.NaOpNu;\r\nimport ch.bfh.egov.nutzenportfolio.tos.Projektattraktivitaet;\r\n\r\n/**\r\n * Implementierende Data Access Object-Klasse fï¿½r gemeinsam genutzte Methoden.\r\n *\r\n * @author Kompetenzzentrum E-Business, Simon Bergamin\r\n */\r\npublic class CommonIbatisDao extends SqlMapClientTemplate implements CommonDao {\r\n\r\n    Log logger = LogFactory.getLog(this.getClass());\r\n\r\n    /**\r\n     * Holt die Id der Projektattraktivitï¿½t anhand der Id des Customizings.\r\n     *\r\n     * @param customizingId   die Id des Customizings\r\n     * @return                die Id der Projektattraktivitï¿½t\r\n     */\r\n    public Integer getProjektattraktivitaetIdByCustomizingId(Integer customizingId) {\r\n        return (Integer) queryForObject(\"Common.getProjektattraktivitaetIdByCustomizingId\", customizingId);\r\n    }\r\n\r\n    /**\r\n     * Holt die Id der Nutzenattraktivitï¿½t anhand der Id des Customizings.\r\n     *\r\n     * @param customizingId   die Id des Customizings\r\n     * @return                die Id der Nutzenattraktivitï¿½t\r\n     */\r\n    public Integer getNutzenattraktivitaetIdByCustomizingId(Integer customizingId) {\r\n        return (Integer) queryForObject(\"Common.getNutzenattraktivitaetIdByCustomizingId\", customizingId);\r\n    }\r\n\r\n    /**\r\n     * Holt die Id des Operativen Nutzens anhand der Id des Customizings.\r\n     *\r\n     * @param customizingId   die Id des Customizings\r\n     * @return                die Id des Operativen Nutzens\r\n     */\r\n    public Integer getOperativerNutzenIdByCustomizingId(Integer customizingId) {\r\n        return (Integer) queryForObject(\"Common.getOperativerNutzenIdByCustomizingId\", customizingId);\r\n    }\r\n\r\n    /**\r\n     * Speichert eine neue Projektattraktivitï¿½t.\r\n     *\r\n     * @param p               Projektattraktivitï¿½t-Objekt mit benï¿½tigten Daten\r\n     * @return                die Id der Projektattraktivitï¿½t\r\n     */\r\n    public Integer insertProjektattraktivitaet(Projektattraktivitaet p) {\r\n        return (Integer) insert(\"Common.insertProjektattraktivitaet\", p);\r\n    }\r\n\r\n    /**\r\n     * Speichert eine neue Nutzenattraktivitï¿½t bzw. einen neuen Operativen Nutzen.\r\n     *\r\n     * @param n               Nutzenattraktivitï¿½t / Operativen Nutzen-Objekt\r\n     *                        mit benï¿½tigten Daten\r\n     * @return                die Id der Nutzenattraktivitï¿½t bzw. des Operativen Nutzens\r\n     */\r\n    public Integer insertNutzenattraktivitaetOperativerNutzen(NaOpNu n) {\r\n        return (Integer) insert(\"Common.insertNutzenattraktivitaetOperativerNutzen\", n);\r\n    }\r\n\r\n    /**\r\n     * Lï¿½scht eine Projektattraktivitï¿½t.\r\n     *\r\n     * @param projektattraktivitaetId   die Id der Projektattraktivitï¿½t\r\n     */\r\n    public void deleteProjektattraktivitaet(Integer projektattraktivitaetId) {\r\n        delete(\"Common.deleteProjektattraktivitaet\", projektattraktivitaetId);\r\n    }\r\n\r\n    /**\r\n     * Lï¿½scht eine Nutzenattraktivitï¿½t bzw. einen Operativen Nutzen.\r\n     *\r\n     * @param naOpNuId        die Id der Nutzenattraktivitï¿½t bzw. des Operativen Nutzens\r\n     */\r\n    public void deleteNutzenattraktivitaetOperativerNutzen(Integer naOpNuId) {\r\n        delete(\"Common.deleteNutzenattraktivitaetOperativerNutzen\", naOpNuId);\r\n    }\r\n}\r\n",
		"id": "EvoSuiteBenchmark/46_nutzenportfolio/src/main/java/ch/bfh/egov/nutzenportfolio/persistence/common/CommonIbatisDaoTest0.java",
		"test_prompt": "// CommonIbatisDaoTest0.java\npackage ch.bfh.egov.nutzenportfolio.persistence.common;\n\nimport org.apache.commons.logging.Log;\nimport org.apache.commons.logging.LogFactory;\nimport org.springframework.orm.ibatis.SqlMapClientTemplate;\nimport ch.bfh.egov.nutzenportfolio.tos.NaOpNu;\nimport ch.bfh.egov.nutzenportfolio.tos.Projektattraktivitaet;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link CommonIbatisDao}.\n* It contains ten unit test cases for the {@link CommonIbatisDao#insertProjektattraktivitaet(Projektattraktivitaet)} method.\n*/\nclass CommonIbatisDaoTest0 {"
	},
	{
		"original_code": "// CommonIbatisDao.java\n/**\r\n * Nutzenportfolio\r\n * Copyright (C) 2006 Kompetenzzentrum E-Business, Simon Bergamin\r\n *\r\n * This program is free software; you can redistribute it and/or\r\n * modify it under the terms of the GNU General Public License\r\n * as published by the Free Software Foundation; either version 2\r\n * of the License, or (at your option) any later version.\r\n *\r\n * This program is distributed in the hope that it will be useful,\r\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n * GNU General Public License for more details.\r\n *\r\n * You should have received a copy of the GNU General Public License\r\n * along with this program; if not, write to the Free Software\r\n * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\r\n */\r\npackage ch.bfh.egov.nutzenportfolio.persistence.common;\r\n\r\nimport org.apache.commons.logging.Log;\r\nimport org.apache.commons.logging.LogFactory;\r\nimport org.springframework.orm.ibatis.SqlMapClientTemplate;\r\nimport ch.bfh.egov.nutzenportfolio.tos.NaOpNu;\r\nimport ch.bfh.egov.nutzenportfolio.tos.Projektattraktivitaet;\r\n\r\n/**\r\n * Implementierende Data Access Object-Klasse fï¿½r gemeinsam genutzte Methoden.\r\n *\r\n * @author Kompetenzzentrum E-Business, Simon Bergamin\r\n */\r\npublic class CommonIbatisDao extends SqlMapClientTemplate implements CommonDao {\r\n\r\n    Log logger = LogFactory.getLog(this.getClass());\r\n\r\n    /**\r\n     * Holt die Id der Projektattraktivitï¿½t anhand der Id des Customizings.\r\n     *\r\n     * @param customizingId   die Id des Customizings\r\n     * @return                die Id der Projektattraktivitï¿½t\r\n     */\r\n    public Integer getProjektattraktivitaetIdByCustomizingId(Integer customizingId) {\r\n        return (Integer) queryForObject(\"Common.getProjektattraktivitaetIdByCustomizingId\", customizingId);\r\n    }\r\n\r\n    /**\r\n     * Holt die Id der Nutzenattraktivitï¿½t anhand der Id des Customizings.\r\n     *\r\n     * @param customizingId   die Id des Customizings\r\n     * @return                die Id der Nutzenattraktivitï¿½t\r\n     */\r\n    public Integer getNutzenattraktivitaetIdByCustomizingId(Integer customizingId) {\r\n        return (Integer) queryForObject(\"Common.getNutzenattraktivitaetIdByCustomizingId\", customizingId);\r\n    }\r\n\r\n    /**\r\n     * Holt die Id des Operativen Nutzens anhand der Id des Customizings.\r\n     *\r\n     * @param customizingId   die Id des Customizings\r\n     * @return                die Id des Operativen Nutzens\r\n     */\r\n    public Integer getOperativerNutzenIdByCustomizingId(Integer customizingId) {\r\n        return (Integer) queryForObject(\"Common.getOperativerNutzenIdByCustomizingId\", customizingId);\r\n    }\r\n\r\n    /**\r\n     * Speichert eine neue Projektattraktivitï¿½t.\r\n     *\r\n     * @param p               Projektattraktivitï¿½t-Objekt mit benï¿½tigten Daten\r\n     * @return                die Id der Projektattraktivitï¿½t\r\n     */\r\n    public Integer insertProjektattraktivitaet(Projektattraktivitaet p) {\r\n        return (Integer) insert(\"Common.insertProjektattraktivitaet\", p);\r\n    }\r\n\r\n    /**\r\n     * Speichert eine neue Nutzenattraktivitï¿½t bzw. einen neuen Operativen Nutzen.\r\n     *\r\n     * @param n               Nutzenattraktivitï¿½t / Operativen Nutzen-Objekt\r\n     *                        mit benï¿½tigten Daten\r\n     * @return                die Id der Nutzenattraktivitï¿½t bzw. des Operativen Nutzens\r\n     */\r\n    public Integer insertNutzenattraktivitaetOperativerNutzen(NaOpNu n) {\r\n        return (Integer) insert(\"Common.insertNutzenattraktivitaetOperativerNutzen\", n);\r\n    }\r\n\r\n    /**\r\n     * Lï¿½scht eine Projektattraktivitï¿½t.\r\n     *\r\n     * @param projektattraktivitaetId   die Id der Projektattraktivitï¿½t\r\n     */\r\n    public void deleteProjektattraktivitaet(Integer projektattraktivitaetId) {\r\n        delete(\"Common.deleteProjektattraktivitaet\", projektattraktivitaetId);\r\n    }\r\n\r\n    /**\r\n     * Lï¿½scht eine Nutzenattraktivitï¿½t bzw. einen Operativen Nutzen.\r\n     *\r\n     * @param naOpNuId        die Id der Nutzenattraktivitï¿½t bzw. des Operativen Nutzens\r\n     */\r\n    public void deleteNutzenattraktivitaetOperativerNutzen(Integer naOpNuId) {\r\n        delete(\"Common.deleteNutzenattraktivitaetOperativerNutzen\", naOpNuId);\r\n    }\r\n}\r\n",
		"id": "EvoSuiteBenchmark/46_nutzenportfolio/src/main/java/ch/bfh/egov/nutzenportfolio/persistence/common/CommonIbatisDaoTest1.java",
		"test_prompt": "// CommonIbatisDaoTest1.java\npackage ch.bfh.egov.nutzenportfolio.persistence.common;\n\nimport org.apache.commons.logging.Log;\nimport org.apache.commons.logging.LogFactory;\nimport org.springframework.orm.ibatis.SqlMapClientTemplate;\nimport ch.bfh.egov.nutzenportfolio.tos.NaOpNu;\nimport ch.bfh.egov.nutzenportfolio.tos.Projektattraktivitaet;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link CommonIbatisDao}.\n* It contains ten unit test cases for the {@link CommonIbatisDao#insertNutzenattraktivitaetOperativerNutzen(NaOpNu)} method.\n*/\nclass CommonIbatisDaoTest1 {"
	},
	{
		"original_code": "// ProjektattraktivitaetDaoService.java\n/**\r\n * Nutzenportfolio\r\n * Copyright (C) 2006 Kompetenzzentrum E-Business, Simon Bergamin\r\n *\r\n * This program is free software; you can redistribute it and/or\r\n * modify it under the terms of the GNU General Public License\r\n * as published by the Free Software Foundation; either version 2\r\n * of the License, or (at your option) any later version.\r\n *\r\n * This program is distributed in the hope that it will be useful,\r\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n * GNU General Public License for more details.\r\n *\r\n * You should have received a copy of the GNU General Public License\r\n * along with this program; if not, write to the Free Software\r\n * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\r\n */\r\npackage ch.bfh.egov.nutzenportfolio.service.fragebogen;\r\n\r\nimport java.util.ArrayList;\r\nimport java.util.Iterator;\r\nimport java.util.List;\r\nimport javax.servlet.http.HttpServletRequest;\r\nimport javax.servlet.http.HttpSession;\r\nimport org.apache.commons.beanutils.BeanUtils;\r\nimport org.apache.commons.logging.Log;\r\nimport org.apache.commons.logging.LogFactory;\r\nimport org.apache.struts.action.DynaActionForm;\r\nimport ch.bfh.egov.nutzenportfolio.Constants;\r\nimport ch.bfh.egov.nutzenportfolio.common.AutoGrowingList;\r\nimport ch.bfh.egov.nutzenportfolio.common.ProjektattraktivitaetLine;\r\nimport ch.bfh.egov.nutzenportfolio.form.ProjektattraktivitaetForm;\r\nimport ch.bfh.egov.nutzenportfolio.persistence.fragebogen.ProjektattraktivitaetDao;\r\nimport ch.bfh.egov.nutzenportfolio.service.auswahlfeld.AuswahlfeldService;\r\nimport ch.bfh.egov.nutzenportfolio.service.customizing.CustomizingService;\r\nimport ch.bfh.egov.nutzenportfolio.service.detailziele.DetailzieleService;\r\nimport ch.bfh.egov.nutzenportfolio.service.fragebogen.ProjektattraktivitaetService;\r\nimport ch.bfh.egov.nutzenportfolio.service.projekt.ProjektService;\r\nimport ch.bfh.egov.nutzenportfolio.service.strategischeziele.StrategischeZieleService;\r\nimport ch.bfh.egov.nutzenportfolio.tos.Auswahlfeld;\r\nimport ch.bfh.egov.nutzenportfolio.tos.Customizing;\r\nimport ch.bfh.egov.nutzenportfolio.tos.Detailziel;\r\nimport ch.bfh.egov.nutzenportfolio.tos.Projekt;\r\nimport ch.bfh.egov.nutzenportfolio.tos.Projektattraktivitaet;\r\n\r\n/**\r\n * Implementierende Service-Klasse fï¿½r den Fragebogen\r\n * Projektattraktivitï¿½t.\r\n *\r\n * @author Kompetenzzentrum E-Business, Simon Bergamin\r\n */\r\npublic class ProjektattraktivitaetDaoService implements ProjektattraktivitaetService {\r\n\r\n    private ProjektattraktivitaetDao dao;\r\n\r\n    private ProjektService pService;\r\n\r\n    private StrategischeZieleService szService;\r\n\r\n    private DetailzieleService dzService;\r\n\r\n    private AuswahlfeldService afService;\r\n\r\n    private CustomizingService cService;\r\n\r\n    private Log logger = LogFactory.getLog(this.getClass());\r\n\r\n    /**\r\n     * Konstruktor. ï¿½bergabe des DataAcessObject-Interfaces fï¿½r den Fragebogen\r\n     * Projektattraktivitï¿½t sowie anderer, benï¿½tigter Service-Objekte.\r\n     *\r\n     * @param dao                               Projektattraktivitï¿½t DataAcessObject-Interface\r\n     * @param pService                          Projekt Service-Interface\r\n     * @param szService                         Strategisches Ziel Service-Interface\r\n     * @param dzService                         Detailziel Service-Interface\r\n     * @param afService                         Auswahlfeld Service-Interface\r\n     * @param cService                          Customizing Service-Interface\r\n     */\r\n    public ProjektattraktivitaetDaoService(ProjektattraktivitaetDao dao, ProjektService pService, StrategischeZieleService szService, DetailzieleService dzService, AuswahlfeldService afService, CustomizingService cService) {\r\n        this.dao = dao;\r\n        this.pService = pService;\r\n        this.szService = szService;\r\n        this.dzService = dzService;\r\n        this.afService = afService;\r\n        this.cService = cService;\r\n    }\r\n\r\n    /**\r\n     * @see ch.bfh.egov.nutzenportfolio.persistence.fragebogen.ProjektattraktivitaetIbatisDao#deleteAssignments(Integer)\r\n     */\r\n    public void deleteAssignments(Integer customizingId) {\r\n        dao.deleteAssignments(customizingId);\r\n    }\r\n\r\n    /**\r\n     * Fï¿½llt das Formular mit allen benï¿½tigten Daten ab.\r\n     *\r\n     * @param request             der HttpServletRequest\r\n     * @param form                das DynaActionForm\r\n     * @return                    true bei Erfolg, sonst false\r\n     */\r\n    public boolean prepare(HttpServletRequest request, ProjektattraktivitaetForm form) {\r\n        // Session und Projekt ID holen\r\n        HttpSession session = request.getSession();\r\n        Integer projektId = getProjektId(session, null);\r\n        // Session-ï¿½berprï¿½fung ï¿½ber E-Mail Adresse\r\n        if (session.getAttribute(\"email\") == null) {\r\n            return false;\r\n        }\r\n        Projekt p = new Projekt();\r\n        p.setProjektId(projektId);\r\n        form.setProjektId(projektId);\r\n        // Strategische Ziele holen\r\n        List sz = szService.getByProjektId(p);\r\n        logger.debug(sz.size() + \" Strategische Ziele in der Liste\");\r\n        session.setAttribute(Constants.STRATEGISCHE_ZIELE, sz);\r\n        // Detailziele holen\r\n        List<Detailziel> dz = dzService.getByProjektId(p);\r\n        List dzForms = createObjectList(dz, form);\r\n        logger.debug(dz.size() + \" Detailziele in der Liste\");\r\n        session.setAttribute(Constants.DETAILZIELE, dzForms);\r\n        // Eintrittswahrscheinlichkeiten holen\r\n        Auswahlfeld a = new Auswahlfeld();\r\n        a.setProjektId(p.getProjektId());\r\n        a.setEintrittswahrscheinlichkeit(true);\r\n        a.setEintrittszeitpunkt(false);\r\n        a.setGewichtung(false);\r\n        a.setAbstufung(false);\r\n        List ew = afService.getByProjektId(a);\r\n        logger.debug(dz.size() + \" Eintrittswahrscheinlichkeiten in der Liste\");\r\n        session.setAttribute(Constants.EINTRITTSWAHRSCHEINLICHKEITEN, ew);\r\n        // Eintrittszeitpunkte holen\r\n        a.setEintrittswahrscheinlichkeit(false);\r\n        a.setEintrittszeitpunkt(true);\r\n        List ez = afService.getByProjektId(a);\r\n        logger.debug(dz.size() + \" Eintrittszeitpunkte in der Liste\");\r\n        session.setAttribute(Constants.EINTRITTSZEITPUNKTE, ez);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Speichert die Resultate des Fragebogens zur Projetktattraktivitaet ab.\r\n     *\r\n     * @param request             der HttpServletRequest\r\n     * @param form                das zu speichernde Formular\r\n     */\r\n    public void save(HttpServletRequest request, ProjektattraktivitaetForm form) {\r\n        // E-Mail und UID's aus der Session holen\r\n        HttpSession session = request.getSession();\r\n        String email = (String) session.getAttribute(\"email\");\r\n        Long paUID = (Long) session.getAttribute(\"paUID\");\r\n        Integer projektId = getProjektId(session, null);\r\n        logger.debug(\"email: \" + email);\r\n        logger.debug(\"paUID: \" + paUID);\r\n        logger.debug(\"ProjektId: \" + projektId);\r\n        if (email == null) {\r\n            return;\r\n        }\r\n        // Werte aus der Session lï¿½schen\r\n        session.removeAttribute(\"email\");\r\n        session.removeAttribute(\"projektUID\");\r\n        session.removeAttribute(\"paUID\");\r\n        // Projekt und Projektattraktivitï¿½t anhand der UID's holen\r\n        Projektattraktivitaet pa = dao.getByUID(paUID);\r\n        if (projektId == null || pa == null) {\r\n            return;\r\n        }\r\n        pa.setProjektId(projektId);\r\n        pa.setEmail(email);\r\n        AutoGrowingList l = form.getProjektattraktivitaetLines();\r\n        Iterator it = l.iterator();\r\n        Integer values = 0;\r\n        int messbarkeitCounter = 0;\r\n        int messbarkeitenTotal = 0;\r\n        int nachweisbarkeitCounter = 0;\r\n        int nachweisbarkeitenTotal = 0;\r\n        while (it.hasNext()) {\r\n            ProjektattraktivitaetLine p = (ProjektattraktivitaetLine) it.next();\r\n            if (p != null) {\r\n                Boolean messbar = p.getMessbarkeit();\r\n                Boolean nachweisbar = p.getNachweisbarkeit();\r\n                Integer ewId = p.getEintrittswahrscheinlichkeitId();\r\n                Integer ezId = p.getEintrittszeitpunktId();\r\n                // Level der Eintrittswahrscheinlichkeit holen\r\n                Auswahlfeld a = new Auswahlfeld();\r\n                a.setAuswahlfeldId(ewId);\r\n                a = afService.getById(a);\r\n                Integer ewLevel = a.getLevel() - 1;\r\n                logger.debug(\"Level der Eintrittswahrscheinlichkeit: \" + ewLevel);\r\n                // Level des Eintrittszeitpunkts holen\r\n                a.setAuswahlfeldId(ezId);\r\n                a = afService.getById(a);\r\n                Integer ezLevel = a.getLevel() - 1;\r\n                logger.debug(\"Level des Eintrittszeitpunkts: \" + ezLevel);\r\n                // Realisierbarkeit aus Matrix holen\r\n                Integer value = Constants.REALISIERBARKEIT_MATRIX[ewLevel][ezLevel];\r\n                logger.debug(\"Wert aus Matrix: \" + value);\r\n                values += value;\r\n                // Messbarkeiten zï¿½hlen\r\n                if (nachweisbar == null) {\r\n                    logger.debug(\"Quantifizierbarer Nutzen\");\r\n                    messbarkeitenTotal++;\r\n                    if (messbar) {\r\n                        logger.debug(\"messbar\");\r\n                        messbarkeitCounter++;\r\n                    }\r\n                } else // Nachweisbarkeiten zï¿½hlen\r\n                if (messbar == null) {\r\n                    logger.debug(\"Nicht quantifizierbarer Nutzen\");\r\n                    nachweisbarkeitenTotal++;\r\n                    if (nachweisbar) {\r\n                        logger.debug(\"nachweisbar\");\r\n                        nachweisbarkeitCounter++;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        // Arithmetisches Mittel der Realisierbarkeit berechnen\r\n        Double result = values / new Double(l.size());\r\n        logger.debug(\"Arithmetisches Mittel der Realisierbarkeit: \" + result);\r\n        // Nachweisbarkeit berechnen\r\n        Double nachweisbar = nachweisbarkeitCounter / new Double(nachweisbarkeitenTotal);\r\n        logger.debug(\"Nachweisbarkeiten: \" + nachweisbar);\r\n        int round = (int) Math.floor(nachweisbar * 9);\r\n        logger.debug(\"Nachweisbarkeiten index: \" + round);\r\n        result += Constants.FORMULA[round];\r\n        // Messbarkeiten berechnen\r\n        Double messbar = messbarkeitCounter / new Double(messbarkeitenTotal);\r\n        logger.debug(\"Messbarkeiten: \" + messbar);\r\n        round = (int) Math.floor(nachweisbar * 9);\r\n        logger.debug(\"Messbarkeiten index: \" + round);\r\n        result += Constants.FORMULA[round];\r\n        // Arithmetisches Mittel aller Berechnungen\r\n        result = result / 3;\r\n        logger.debug(\"Resultat: \" + result);\r\n        // Resultat speichern\r\n        pa.setResultat(result);\r\n        dao.insertProjektattraktivitaetResultat(pa);\r\n    }\r\n\r\n    /**\r\n     * Gibt den Status eines Customizings zurï¿½ck.\r\n     *\r\n     * @param request             der HttpServletRequest\r\n     * @param form                das Formular mit den benï¿½tigten Daten\r\n     *                            zum holen des Customizings\r\n     * @return                    true bei Status aktiv, sonst false\r\n     */\r\n    public boolean isActive(HttpServletRequest request, DynaActionForm form) {\r\n        // Projekt anhand UID holen\r\n        Long pUID = (Long) form.get(\"p\");\r\n        Projekt p = new Projekt();\r\n        p.setPaUID(pUID);\r\n        p = pService.getByUID(pUID);\r\n        if (p == null) {\r\n            return false;\r\n        }\r\n        boolean status = false;\r\n        // UID der Projektattraktivitï¿½t holen\r\n        Long paUID = (Long) form.get(\"pa\");\r\n        logger.debug(\"paUID=\" + paUID);\r\n        Customizing c = null;\r\n        Long naOpNuUID = null;\r\n        // Auf andere UIDs ausweichen, falls die UID der Projektattraktivitï¿½t\r\n        // nicht angegeben wurde\r\n        if (paUID == null) {\r\n            // UID der Nutzenattraktivitï¿½t bzw. des Operativen Nutzens holen\r\n            naOpNuUID = (Long) form.get(\"o\");\r\n            logger.debug(\"opNuUID=\" + naOpNuUID);\r\n            if (naOpNuUID == null) {\r\n                naOpNuUID = (Long) form.get(\"na\");\r\n                logger.debug(\"naUID=\" + naOpNuUID);\r\n                status = p.getNaStatus();\r\n            } else {\r\n                status = p.getOpNuStatus();\r\n            }\r\n            // Customizing holen\r\n            c = cService.getByNaOpNuUID(naOpNuUID);\r\n        } else {\r\n            // Customizing holen\r\n            c = cService.getByPaUID(paUID);\r\n            status = p.getPaStatus();\r\n        }\r\n        // Status zurï¿½ckgeben\r\n        if (c != null) {\r\n            return c.getStatus() && status;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    /**\r\n     * Fï¿½hrt das Login fï¿½r den Fragebogen Projektattraktvitï¿½t aus.\r\n     *\r\n     * @param request             der HttpServletRequest\r\n     * @param form                das Formular mit den Login-Daten\r\n     * @return                    true bei Erfolg, sonst false\r\n     */\r\n    public boolean login(HttpServletRequest request, DynaActionForm form) {\r\n        // E-Mail Adresse, Projekt UID und  Projektattraktvitï¿½t wird benï¿½tigt\r\n        String email = form.getString(\"email\");\r\n        Long projektUID = (Long) form.get(\"p\");\r\n        Long paUID = (Long) form.get(\"pa\");\r\n        logger.debug(\"email=\" + email);\r\n        HttpSession session = request.getSession();\r\n        Projektattraktivitaet p = new Projektattraktivitaet();\r\n        p.setProjektId(getProjektId(session, projektUID));\r\n        p.setEmail(email);\r\n        // Wenn fï¿½r die angegeben Daten schon ein ausgefï¿½llter Fragebogen\r\n        // existiert, darf der Bentuzer den Fragebogen nicht noch einmal ausfï¿½llen\r\n        p = dao.getByEmail(p);\r\n        if (p == null) {\r\n            logger.debug(\"E-Mail nicht gefunden. Ok.\");\r\n            // Benï¿½tigte Daten in der Session speichern\r\n            session.setAttribute(\"email\", email);\r\n            session.setAttribute(\"projektUID\", projektUID);\r\n            session.setAttribute(\"paUID\", paUID);\r\n            return true;\r\n        }\r\n        // Fragebogen wurde schon ausgefï¿½lt, login verweigern\r\n        logger.debug(\"E-Mail gefunden.\");\r\n        return false;\r\n    }\r\n\r\n    /**\r\n     * Kopieren einer Liste von Detailzielen in eine Liste von\r\n     * Projektattraktivitï¿½t-Formularen.<br/>\r\n     * TODO wird diese Methode wirklich benï¿½tigt?\r\n     *\r\n     * @param l                   zu kopierende Liste mit Detailzielen\r\n     * @param form                das Projektattraktivitï¿½t-Formular\r\n     * @return                    eine Liste von\r\n     *                            Projektattraktivitï¿½t-Formularen\r\n     */\r\n    private List createObjectList(List<Detailziel> l, ProjektattraktivitaetForm form) {\r\n        List<ProjektattraktivitaetForm> paForms = new ArrayList<ProjektattraktivitaetForm>();\r\n        for (Detailziel dz : l) {\r\n            ProjektattraktivitaetForm paForm = new ProjektattraktivitaetForm();\r\n            try {\r\n                // Werte kopieren und das Formular der Liste hinzufï¿½gen\r\n                BeanUtils.copyProperties(paForm, dz);\r\n                paForms.add(paForm);\r\n            } catch (Exception ex) {\r\n                logger.error(ex.getMessage());\r\n            }\r\n        }\r\n        return paForms;\r\n    }\r\n\r\n    /**\r\n     * Holt eine ProjektId anhand der angegebenen Projekt UID oder\r\n     * anhand der Projekt UID aus der Session.\r\n     *\r\n     * @param session             die HttpSession\r\n     * @param uid                 die ProjektUID\r\n     * @return                    die projektId\r\n     */\r\n    private Integer getProjektId(HttpSession session, Long uid) {\r\n        Long projektUID = uid;\r\n        // Projekt UID aus der Session holen\r\n        if (uid == null) {\r\n            projektUID = (Long) session.getAttribute(\"projektUID\");\r\n        }\r\n        // Projekt anhand der UID holen\r\n        Projekt projekt = pService.getByUID(projektUID);\r\n        if (projekt == null) {\r\n            return null;\r\n        }\r\n        return projekt.getProjektId();\r\n    }\r\n}\r\n",
		"id": "EvoSuiteBenchmark/46_nutzenportfolio/src/main/java/ch/bfh/egov/nutzenportfolio/service/fragebogen/ProjektattraktivitaetDaoServiceTest0.java",
		"test_prompt": "// ProjektattraktivitaetDaoServiceTest0.java\npackage ch.bfh.egov.nutzenportfolio.service.fragebogen;\n\nimport java.util.ArrayList;\nimport java.util.Iterator;\nimport java.util.List;\nimport javax.servlet.http.HttpServletRequest;\nimport javax.servlet.http.HttpSession;\nimport org.apache.commons.beanutils.BeanUtils;\nimport org.apache.commons.logging.Log;\nimport org.apache.commons.logging.LogFactory;\nimport org.apache.struts.action.DynaActionForm;\nimport ch.bfh.egov.nutzenportfolio.Constants;\nimport ch.bfh.egov.nutzenportfolio.common.AutoGrowingList;\nimport ch.bfh.egov.nutzenportfolio.common.ProjektattraktivitaetLine;\nimport ch.bfh.egov.nutzenportfolio.form.ProjektattraktivitaetForm;\nimport ch.bfh.egov.nutzenportfolio.persistence.fragebogen.ProjektattraktivitaetDao;\nimport ch.bfh.egov.nutzenportfolio.service.auswahlfeld.AuswahlfeldService;\nimport ch.bfh.egov.nutzenportfolio.service.customizing.CustomizingService;\nimport ch.bfh.egov.nutzenportfolio.service.detailziele.DetailzieleService;\nimport ch.bfh.egov.nutzenportfolio.service.fragebogen.ProjektattraktivitaetService;\nimport ch.bfh.egov.nutzenportfolio.service.projekt.ProjektService;\nimport ch.bfh.egov.nutzenportfolio.service.strategischeziele.StrategischeZieleService;\nimport ch.bfh.egov.nutzenportfolio.tos.Auswahlfeld;\nimport ch.bfh.egov.nutzenportfolio.tos.Customizing;\nimport ch.bfh.egov.nutzenportfolio.tos.Detailziel;\nimport ch.bfh.egov.nutzenportfolio.tos.Projekt;\nimport ch.bfh.egov.nutzenportfolio.tos.Projektattraktivitaet;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link ProjektattraktivitaetDaoService}.\n* It contains ten unit test cases for the {@link ProjektattraktivitaetDaoService#prepare(HttpServletRequest, ProjektattraktivitaetForm)} method.\n*/\nclass ProjektattraktivitaetDaoServiceTest0 {"
	},
	{
		"original_code": "// ProjektattraktivitaetDaoService.java\n/**\r\n * Nutzenportfolio\r\n * Copyright (C) 2006 Kompetenzzentrum E-Business, Simon Bergamin\r\n *\r\n * This program is free software; you can redistribute it and/or\r\n * modify it under the terms of the GNU General Public License\r\n * as published by the Free Software Foundation; either version 2\r\n * of the License, or (at your option) any later version.\r\n *\r\n * This program is distributed in the hope that it will be useful,\r\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n * GNU General Public License for more details.\r\n *\r\n * You should have received a copy of the GNU General Public License\r\n * along with this program; if not, write to the Free Software\r\n * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\r\n */\r\npackage ch.bfh.egov.nutzenportfolio.service.fragebogen;\r\n\r\nimport java.util.ArrayList;\r\nimport java.util.Iterator;\r\nimport java.util.List;\r\nimport javax.servlet.http.HttpServletRequest;\r\nimport javax.servlet.http.HttpSession;\r\nimport org.apache.commons.beanutils.BeanUtils;\r\nimport org.apache.commons.logging.Log;\r\nimport org.apache.commons.logging.LogFactory;\r\nimport org.apache.struts.action.DynaActionForm;\r\nimport ch.bfh.egov.nutzenportfolio.Constants;\r\nimport ch.bfh.egov.nutzenportfolio.common.AutoGrowingList;\r\nimport ch.bfh.egov.nutzenportfolio.common.ProjektattraktivitaetLine;\r\nimport ch.bfh.egov.nutzenportfolio.form.ProjektattraktivitaetForm;\r\nimport ch.bfh.egov.nutzenportfolio.persistence.fragebogen.ProjektattraktivitaetDao;\r\nimport ch.bfh.egov.nutzenportfolio.service.auswahlfeld.AuswahlfeldService;\r\nimport ch.bfh.egov.nutzenportfolio.service.customizing.CustomizingService;\r\nimport ch.bfh.egov.nutzenportfolio.service.detailziele.DetailzieleService;\r\nimport ch.bfh.egov.nutzenportfolio.service.fragebogen.ProjektattraktivitaetService;\r\nimport ch.bfh.egov.nutzenportfolio.service.projekt.ProjektService;\r\nimport ch.bfh.egov.nutzenportfolio.service.strategischeziele.StrategischeZieleService;\r\nimport ch.bfh.egov.nutzenportfolio.tos.Auswahlfeld;\r\nimport ch.bfh.egov.nutzenportfolio.tos.Customizing;\r\nimport ch.bfh.egov.nutzenportfolio.tos.Detailziel;\r\nimport ch.bfh.egov.nutzenportfolio.tos.Projekt;\r\nimport ch.bfh.egov.nutzenportfolio.tos.Projektattraktivitaet;\r\n\r\n/**\r\n * Implementierende Service-Klasse fï¿½r den Fragebogen\r\n * Projektattraktivitï¿½t.\r\n *\r\n * @author Kompetenzzentrum E-Business, Simon Bergamin\r\n */\r\npublic class ProjektattraktivitaetDaoService implements ProjektattraktivitaetService {\r\n\r\n    private ProjektattraktivitaetDao dao;\r\n\r\n    private ProjektService pService;\r\n\r\n    private StrategischeZieleService szService;\r\n\r\n    private DetailzieleService dzService;\r\n\r\n    private AuswahlfeldService afService;\r\n\r\n    private CustomizingService cService;\r\n\r\n    private Log logger = LogFactory.getLog(this.getClass());\r\n\r\n    /**\r\n     * Konstruktor. ï¿½bergabe des DataAcessObject-Interfaces fï¿½r den Fragebogen\r\n     * Projektattraktivitï¿½t sowie anderer, benï¿½tigter Service-Objekte.\r\n     *\r\n     * @param dao                               Projektattraktivitï¿½t DataAcessObject-Interface\r\n     * @param pService                          Projekt Service-Interface\r\n     * @param szService                         Strategisches Ziel Service-Interface\r\n     * @param dzService                         Detailziel Service-Interface\r\n     * @param afService                         Auswahlfeld Service-Interface\r\n     * @param cService                          Customizing Service-Interface\r\n     */\r\n    public ProjektattraktivitaetDaoService(ProjektattraktivitaetDao dao, ProjektService pService, StrategischeZieleService szService, DetailzieleService dzService, AuswahlfeldService afService, CustomizingService cService) {\r\n        this.dao = dao;\r\n        this.pService = pService;\r\n        this.szService = szService;\r\n        this.dzService = dzService;\r\n        this.afService = afService;\r\n        this.cService = cService;\r\n    }\r\n\r\n    /**\r\n     * @see ch.bfh.egov.nutzenportfolio.persistence.fragebogen.ProjektattraktivitaetIbatisDao#deleteAssignments(Integer)\r\n     */\r\n    public void deleteAssignments(Integer customizingId) {\r\n        dao.deleteAssignments(customizingId);\r\n    }\r\n\r\n    /**\r\n     * Fï¿½llt das Formular mit allen benï¿½tigten Daten ab.\r\n     *\r\n     * @param request             der HttpServletRequest\r\n     * @param form                das DynaActionForm\r\n     * @return                    true bei Erfolg, sonst false\r\n     */\r\n    public boolean prepare(HttpServletRequest request, ProjektattraktivitaetForm form) {\r\n        // Session und Projekt ID holen\r\n        HttpSession session = request.getSession();\r\n        Integer projektId = getProjektId(session, null);\r\n        // Session-ï¿½berprï¿½fung ï¿½ber E-Mail Adresse\r\n        if (session.getAttribute(\"email\") == null) {\r\n            return false;\r\n        }\r\n        Projekt p = new Projekt();\r\n        p.setProjektId(projektId);\r\n        form.setProjektId(projektId);\r\n        // Strategische Ziele holen\r\n        List sz = szService.getByProjektId(p);\r\n        logger.debug(sz.size() + \" Strategische Ziele in der Liste\");\r\n        session.setAttribute(Constants.STRATEGISCHE_ZIELE, sz);\r\n        // Detailziele holen\r\n        List<Detailziel> dz = dzService.getByProjektId(p);\r\n        List dzForms = createObjectList(dz, form);\r\n        logger.debug(dz.size() + \" Detailziele in der Liste\");\r\n        session.setAttribute(Constants.DETAILZIELE, dzForms);\r\n        // Eintrittswahrscheinlichkeiten holen\r\n        Auswahlfeld a = new Auswahlfeld();\r\n        a.setProjektId(p.getProjektId());\r\n        a.setEintrittswahrscheinlichkeit(true);\r\n        a.setEintrittszeitpunkt(false);\r\n        a.setGewichtung(false);\r\n        a.setAbstufung(false);\r\n        List ew = afService.getByProjektId(a);\r\n        logger.debug(dz.size() + \" Eintrittswahrscheinlichkeiten in der Liste\");\r\n        session.setAttribute(Constants.EINTRITTSWAHRSCHEINLICHKEITEN, ew);\r\n        // Eintrittszeitpunkte holen\r\n        a.setEintrittswahrscheinlichkeit(false);\r\n        a.setEintrittszeitpunkt(true);\r\n        List ez = afService.getByProjektId(a);\r\n        logger.debug(dz.size() + \" Eintrittszeitpunkte in der Liste\");\r\n        session.setAttribute(Constants.EINTRITTSZEITPUNKTE, ez);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Speichert die Resultate des Fragebogens zur Projetktattraktivitaet ab.\r\n     *\r\n     * @param request             der HttpServletRequest\r\n     * @param form                das zu speichernde Formular\r\n     */\r\n    public void save(HttpServletRequest request, ProjektattraktivitaetForm form) {\r\n        // E-Mail und UID's aus der Session holen\r\n        HttpSession session = request.getSession();\r\n        String email = (String) session.getAttribute(\"email\");\r\n        Long paUID = (Long) session.getAttribute(\"paUID\");\r\n        Integer projektId = getProjektId(session, null);\r\n        logger.debug(\"email: \" + email);\r\n        logger.debug(\"paUID: \" + paUID);\r\n        logger.debug(\"ProjektId: \" + projektId);\r\n        if (email == null) {\r\n            return;\r\n        }\r\n        // Werte aus der Session lï¿½schen\r\n        session.removeAttribute(\"email\");\r\n        session.removeAttribute(\"projektUID\");\r\n        session.removeAttribute(\"paUID\");\r\n        // Projekt und Projektattraktivitï¿½t anhand der UID's holen\r\n        Projektattraktivitaet pa = dao.getByUID(paUID);\r\n        if (projektId == null || pa == null) {\r\n            return;\r\n        }\r\n        pa.setProjektId(projektId);\r\n        pa.setEmail(email);\r\n        AutoGrowingList l = form.getProjektattraktivitaetLines();\r\n        Iterator it = l.iterator();\r\n        Integer values = 0;\r\n        int messbarkeitCounter = 0;\r\n        int messbarkeitenTotal = 0;\r\n        int nachweisbarkeitCounter = 0;\r\n        int nachweisbarkeitenTotal = 0;\r\n        while (it.hasNext()) {\r\n            ProjektattraktivitaetLine p = (ProjektattraktivitaetLine) it.next();\r\n            if (p != null) {\r\n                Boolean messbar = p.getMessbarkeit();\r\n                Boolean nachweisbar = p.getNachweisbarkeit();\r\n                Integer ewId = p.getEintrittswahrscheinlichkeitId();\r\n                Integer ezId = p.getEintrittszeitpunktId();\r\n                // Level der Eintrittswahrscheinlichkeit holen\r\n                Auswahlfeld a = new Auswahlfeld();\r\n                a.setAuswahlfeldId(ewId);\r\n                a = afService.getById(a);\r\n                Integer ewLevel = a.getLevel() - 1;\r\n                logger.debug(\"Level der Eintrittswahrscheinlichkeit: \" + ewLevel);\r\n                // Level des Eintrittszeitpunkts holen\r\n                a.setAuswahlfeldId(ezId);\r\n                a = afService.getById(a);\r\n                Integer ezLevel = a.getLevel() - 1;\r\n                logger.debug(\"Level des Eintrittszeitpunkts: \" + ezLevel);\r\n                // Realisierbarkeit aus Matrix holen\r\n                Integer value = Constants.REALISIERBARKEIT_MATRIX[ewLevel][ezLevel];\r\n                logger.debug(\"Wert aus Matrix: \" + value);\r\n                values += value;\r\n                // Messbarkeiten zï¿½hlen\r\n                if (nachweisbar == null) {\r\n                    logger.debug(\"Quantifizierbarer Nutzen\");\r\n                    messbarkeitenTotal++;\r\n                    if (messbar) {\r\n                        logger.debug(\"messbar\");\r\n                        messbarkeitCounter++;\r\n                    }\r\n                } else // Nachweisbarkeiten zï¿½hlen\r\n                if (messbar == null) {\r\n                    logger.debug(\"Nicht quantifizierbarer Nutzen\");\r\n                    nachweisbarkeitenTotal++;\r\n                    if (nachweisbar) {\r\n                        logger.debug(\"nachweisbar\");\r\n                        nachweisbarkeitCounter++;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        // Arithmetisches Mittel der Realisierbarkeit berechnen\r\n        Double result = values / new Double(l.size());\r\n        logger.debug(\"Arithmetisches Mittel der Realisierbarkeit: \" + result);\r\n        // Nachweisbarkeit berechnen\r\n        Double nachweisbar = nachweisbarkeitCounter / new Double(nachweisbarkeitenTotal);\r\n        logger.debug(\"Nachweisbarkeiten: \" + nachweisbar);\r\n        int round = (int) Math.floor(nachweisbar * 9);\r\n        logger.debug(\"Nachweisbarkeiten index: \" + round);\r\n        result += Constants.FORMULA[round];\r\n        // Messbarkeiten berechnen\r\n        Double messbar = messbarkeitCounter / new Double(messbarkeitenTotal);\r\n        logger.debug(\"Messbarkeiten: \" + messbar);\r\n        round = (int) Math.floor(nachweisbar * 9);\r\n        logger.debug(\"Messbarkeiten index: \" + round);\r\n        result += Constants.FORMULA[round];\r\n        // Arithmetisches Mittel aller Berechnungen\r\n        result = result / 3;\r\n        logger.debug(\"Resultat: \" + result);\r\n        // Resultat speichern\r\n        pa.setResultat(result);\r\n        dao.insertProjektattraktivitaetResultat(pa);\r\n    }\r\n\r\n    /**\r\n     * Gibt den Status eines Customizings zurï¿½ck.\r\n     *\r\n     * @param request             der HttpServletRequest\r\n     * @param form                das Formular mit den benï¿½tigten Daten\r\n     *                            zum holen des Customizings\r\n     * @return                    true bei Status aktiv, sonst false\r\n     */\r\n    public boolean isActive(HttpServletRequest request, DynaActionForm form) {\r\n        // Projekt anhand UID holen\r\n        Long pUID = (Long) form.get(\"p\");\r\n        Projekt p = new Projekt();\r\n        p.setPaUID(pUID);\r\n        p = pService.getByUID(pUID);\r\n        if (p == null) {\r\n            return false;\r\n        }\r\n        boolean status = false;\r\n        // UID der Projektattraktivitï¿½t holen\r\n        Long paUID = (Long) form.get(\"pa\");\r\n        logger.debug(\"paUID=\" + paUID);\r\n        Customizing c = null;\r\n        Long naOpNuUID = null;\r\n        // Auf andere UIDs ausweichen, falls die UID der Projektattraktivitï¿½t\r\n        // nicht angegeben wurde\r\n        if (paUID == null) {\r\n            // UID der Nutzenattraktivitï¿½t bzw. des Operativen Nutzens holen\r\n            naOpNuUID = (Long) form.get(\"o\");\r\n            logger.debug(\"opNuUID=\" + naOpNuUID);\r\n            if (naOpNuUID == null) {\r\n                naOpNuUID = (Long) form.get(\"na\");\r\n                logger.debug(\"naUID=\" + naOpNuUID);\r\n                status = p.getNaStatus();\r\n            } else {\r\n                status = p.getOpNuStatus();\r\n            }\r\n            // Customizing holen\r\n            c = cService.getByNaOpNuUID(naOpNuUID);\r\n        } else {\r\n            // Customizing holen\r\n            c = cService.getByPaUID(paUID);\r\n            status = p.getPaStatus();\r\n        }\r\n        // Status zurï¿½ckgeben\r\n        if (c != null) {\r\n            return c.getStatus() && status;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    /**\r\n     * Fï¿½hrt das Login fï¿½r den Fragebogen Projektattraktvitï¿½t aus.\r\n     *\r\n     * @param request             der HttpServletRequest\r\n     * @param form                das Formular mit den Login-Daten\r\n     * @return                    true bei Erfolg, sonst false\r\n     */\r\n    public boolean login(HttpServletRequest request, DynaActionForm form) {\r\n        // E-Mail Adresse, Projekt UID und  Projektattraktvitï¿½t wird benï¿½tigt\r\n        String email = form.getString(\"email\");\r\n        Long projektUID = (Long) form.get(\"p\");\r\n        Long paUID = (Long) form.get(\"pa\");\r\n        logger.debug(\"email=\" + email);\r\n        HttpSession session = request.getSession();\r\n        Projektattraktivitaet p = new Projektattraktivitaet();\r\n        p.setProjektId(getProjektId(session, projektUID));\r\n        p.setEmail(email);\r\n        // Wenn fï¿½r die angegeben Daten schon ein ausgefï¿½llter Fragebogen\r\n        // existiert, darf der Bentuzer den Fragebogen nicht noch einmal ausfï¿½llen\r\n        p = dao.getByEmail(p);\r\n        if (p == null) {\r\n            logger.debug(\"E-Mail nicht gefunden. Ok.\");\r\n            // Benï¿½tigte Daten in der Session speichern\r\n            session.setAttribute(\"email\", email);\r\n            session.setAttribute(\"projektUID\", projektUID);\r\n            session.setAttribute(\"paUID\", paUID);\r\n            return true;\r\n        }\r\n        // Fragebogen wurde schon ausgefï¿½lt, login verweigern\r\n        logger.debug(\"E-Mail gefunden.\");\r\n        return false;\r\n    }\r\n\r\n    /**\r\n     * Kopieren einer Liste von Detailzielen in eine Liste von\r\n     * Projektattraktivitï¿½t-Formularen.<br/>\r\n     * TODO wird diese Methode wirklich benï¿½tigt?\r\n     *\r\n     * @param l                   zu kopierende Liste mit Detailzielen\r\n     * @param form                das Projektattraktivitï¿½t-Formular\r\n     * @return                    eine Liste von\r\n     *                            Projektattraktivitï¿½t-Formularen\r\n     */\r\n    private List createObjectList(List<Detailziel> l, ProjektattraktivitaetForm form) {\r\n        List<ProjektattraktivitaetForm> paForms = new ArrayList<ProjektattraktivitaetForm>();\r\n        for (Detailziel dz : l) {\r\n            ProjektattraktivitaetForm paForm = new ProjektattraktivitaetForm();\r\n            try {\r\n                // Werte kopieren und das Formular der Liste hinzufï¿½gen\r\n                BeanUtils.copyProperties(paForm, dz);\r\n                paForms.add(paForm);\r\n            } catch (Exception ex) {\r\n                logger.error(ex.getMessage());\r\n            }\r\n        }\r\n        return paForms;\r\n    }\r\n\r\n    /**\r\n     * Holt eine ProjektId anhand der angegebenen Projekt UID oder\r\n     * anhand der Projekt UID aus der Session.\r\n     *\r\n     * @param session             die HttpSession\r\n     * @param uid                 die ProjektUID\r\n     * @return                    die projektId\r\n     */\r\n    private Integer getProjektId(HttpSession session, Long uid) {\r\n        Long projektUID = uid;\r\n        // Projekt UID aus der Session holen\r\n        if (uid == null) {\r\n            projektUID = (Long) session.getAttribute(\"projektUID\");\r\n        }\r\n        // Projekt anhand der UID holen\r\n        Projekt projekt = pService.getByUID(projektUID);\r\n        if (projekt == null) {\r\n            return null;\r\n        }\r\n        return projekt.getProjektId();\r\n    }\r\n}\r\n",
		"id": "EvoSuiteBenchmark/46_nutzenportfolio/src/main/java/ch/bfh/egov/nutzenportfolio/service/fragebogen/ProjektattraktivitaetDaoServiceTest1.java",
		"test_prompt": "// ProjektattraktivitaetDaoServiceTest1.java\npackage ch.bfh.egov.nutzenportfolio.service.fragebogen;\n\nimport java.util.ArrayList;\nimport java.util.Iterator;\nimport java.util.List;\nimport javax.servlet.http.HttpServletRequest;\nimport javax.servlet.http.HttpSession;\nimport org.apache.commons.beanutils.BeanUtils;\nimport org.apache.commons.logging.Log;\nimport org.apache.commons.logging.LogFactory;\nimport org.apache.struts.action.DynaActionForm;\nimport ch.bfh.egov.nutzenportfolio.Constants;\nimport ch.bfh.egov.nutzenportfolio.common.AutoGrowingList;\nimport ch.bfh.egov.nutzenportfolio.common.ProjektattraktivitaetLine;\nimport ch.bfh.egov.nutzenportfolio.form.ProjektattraktivitaetForm;\nimport ch.bfh.egov.nutzenportfolio.persistence.fragebogen.ProjektattraktivitaetDao;\nimport ch.bfh.egov.nutzenportfolio.service.auswahlfeld.AuswahlfeldService;\nimport ch.bfh.egov.nutzenportfolio.service.customizing.CustomizingService;\nimport ch.bfh.egov.nutzenportfolio.service.detailziele.DetailzieleService;\nimport ch.bfh.egov.nutzenportfolio.service.fragebogen.ProjektattraktivitaetService;\nimport ch.bfh.egov.nutzenportfolio.service.projekt.ProjektService;\nimport ch.bfh.egov.nutzenportfolio.service.strategischeziele.StrategischeZieleService;\nimport ch.bfh.egov.nutzenportfolio.tos.Auswahlfeld;\nimport ch.bfh.egov.nutzenportfolio.tos.Customizing;\nimport ch.bfh.egov.nutzenportfolio.tos.Detailziel;\nimport ch.bfh.egov.nutzenportfolio.tos.Projekt;\nimport ch.bfh.egov.nutzenportfolio.tos.Projektattraktivitaet;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link ProjektattraktivitaetDaoService}.\n* It contains ten unit test cases for the {@link ProjektattraktivitaetDaoService#isActive(HttpServletRequest, DynaActionForm)} method.\n*/\nclass ProjektattraktivitaetDaoServiceTest1 {"
	},
	{
		"original_code": "// ProjektattraktivitaetDaoService.java\n/**\r\n * Nutzenportfolio\r\n * Copyright (C) 2006 Kompetenzzentrum E-Business, Simon Bergamin\r\n *\r\n * This program is free software; you can redistribute it and/or\r\n * modify it under the terms of the GNU General Public License\r\n * as published by the Free Software Foundation; either version 2\r\n * of the License, or (at your option) any later version.\r\n *\r\n * This program is distributed in the hope that it will be useful,\r\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n * GNU General Public License for more details.\r\n *\r\n * You should have received a copy of the GNU General Public License\r\n * along with this program; if not, write to the Free Software\r\n * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\r\n */\r\npackage ch.bfh.egov.nutzenportfolio.service.fragebogen;\r\n\r\nimport java.util.ArrayList;\r\nimport java.util.Iterator;\r\nimport java.util.List;\r\nimport javax.servlet.http.HttpServletRequest;\r\nimport javax.servlet.http.HttpSession;\r\nimport org.apache.commons.beanutils.BeanUtils;\r\nimport org.apache.commons.logging.Log;\r\nimport org.apache.commons.logging.LogFactory;\r\nimport org.apache.struts.action.DynaActionForm;\r\nimport ch.bfh.egov.nutzenportfolio.Constants;\r\nimport ch.bfh.egov.nutzenportfolio.common.AutoGrowingList;\r\nimport ch.bfh.egov.nutzenportfolio.common.ProjektattraktivitaetLine;\r\nimport ch.bfh.egov.nutzenportfolio.form.ProjektattraktivitaetForm;\r\nimport ch.bfh.egov.nutzenportfolio.persistence.fragebogen.ProjektattraktivitaetDao;\r\nimport ch.bfh.egov.nutzenportfolio.service.auswahlfeld.AuswahlfeldService;\r\nimport ch.bfh.egov.nutzenportfolio.service.customizing.CustomizingService;\r\nimport ch.bfh.egov.nutzenportfolio.service.detailziele.DetailzieleService;\r\nimport ch.bfh.egov.nutzenportfolio.service.fragebogen.ProjektattraktivitaetService;\r\nimport ch.bfh.egov.nutzenportfolio.service.projekt.ProjektService;\r\nimport ch.bfh.egov.nutzenportfolio.service.strategischeziele.StrategischeZieleService;\r\nimport ch.bfh.egov.nutzenportfolio.tos.Auswahlfeld;\r\nimport ch.bfh.egov.nutzenportfolio.tos.Customizing;\r\nimport ch.bfh.egov.nutzenportfolio.tos.Detailziel;\r\nimport ch.bfh.egov.nutzenportfolio.tos.Projekt;\r\nimport ch.bfh.egov.nutzenportfolio.tos.Projektattraktivitaet;\r\n\r\n/**\r\n * Implementierende Service-Klasse fï¿½r den Fragebogen\r\n * Projektattraktivitï¿½t.\r\n *\r\n * @author Kompetenzzentrum E-Business, Simon Bergamin\r\n */\r\npublic class ProjektattraktivitaetDaoService implements ProjektattraktivitaetService {\r\n\r\n    private ProjektattraktivitaetDao dao;\r\n\r\n    private ProjektService pService;\r\n\r\n    private StrategischeZieleService szService;\r\n\r\n    private DetailzieleService dzService;\r\n\r\n    private AuswahlfeldService afService;\r\n\r\n    private CustomizingService cService;\r\n\r\n    private Log logger = LogFactory.getLog(this.getClass());\r\n\r\n    /**\r\n     * Konstruktor. ï¿½bergabe des DataAcessObject-Interfaces fï¿½r den Fragebogen\r\n     * Projektattraktivitï¿½t sowie anderer, benï¿½tigter Service-Objekte.\r\n     *\r\n     * @param dao                               Projektattraktivitï¿½t DataAcessObject-Interface\r\n     * @param pService                          Projekt Service-Interface\r\n     * @param szService                         Strategisches Ziel Service-Interface\r\n     * @param dzService                         Detailziel Service-Interface\r\n     * @param afService                         Auswahlfeld Service-Interface\r\n     * @param cService                          Customizing Service-Interface\r\n     */\r\n    public ProjektattraktivitaetDaoService(ProjektattraktivitaetDao dao, ProjektService pService, StrategischeZieleService szService, DetailzieleService dzService, AuswahlfeldService afService, CustomizingService cService) {\r\n        this.dao = dao;\r\n        this.pService = pService;\r\n        this.szService = szService;\r\n        this.dzService = dzService;\r\n        this.afService = afService;\r\n        this.cService = cService;\r\n    }\r\n\r\n    /**\r\n     * @see ch.bfh.egov.nutzenportfolio.persistence.fragebogen.ProjektattraktivitaetIbatisDao#deleteAssignments(Integer)\r\n     */\r\n    public void deleteAssignments(Integer customizingId) {\r\n        dao.deleteAssignments(customizingId);\r\n    }\r\n\r\n    /**\r\n     * Fï¿½llt das Formular mit allen benï¿½tigten Daten ab.\r\n     *\r\n     * @param request             der HttpServletRequest\r\n     * @param form                das DynaActionForm\r\n     * @return                    true bei Erfolg, sonst false\r\n     */\r\n    public boolean prepare(HttpServletRequest request, ProjektattraktivitaetForm form) {\r\n        // Session und Projekt ID holen\r\n        HttpSession session = request.getSession();\r\n        Integer projektId = getProjektId(session, null);\r\n        // Session-ï¿½berprï¿½fung ï¿½ber E-Mail Adresse\r\n        if (session.getAttribute(\"email\") == null) {\r\n            return false;\r\n        }\r\n        Projekt p = new Projekt();\r\n        p.setProjektId(projektId);\r\n        form.setProjektId(projektId);\r\n        // Strategische Ziele holen\r\n        List sz = szService.getByProjektId(p);\r\n        logger.debug(sz.size() + \" Strategische Ziele in der Liste\");\r\n        session.setAttribute(Constants.STRATEGISCHE_ZIELE, sz);\r\n        // Detailziele holen\r\n        List<Detailziel> dz = dzService.getByProjektId(p);\r\n        List dzForms = createObjectList(dz, form);\r\n        logger.debug(dz.size() + \" Detailziele in der Liste\");\r\n        session.setAttribute(Constants.DETAILZIELE, dzForms);\r\n        // Eintrittswahrscheinlichkeiten holen\r\n        Auswahlfeld a = new Auswahlfeld();\r\n        a.setProjektId(p.getProjektId());\r\n        a.setEintrittswahrscheinlichkeit(true);\r\n        a.setEintrittszeitpunkt(false);\r\n        a.setGewichtung(false);\r\n        a.setAbstufung(false);\r\n        List ew = afService.getByProjektId(a);\r\n        logger.debug(dz.size() + \" Eintrittswahrscheinlichkeiten in der Liste\");\r\n        session.setAttribute(Constants.EINTRITTSWAHRSCHEINLICHKEITEN, ew);\r\n        // Eintrittszeitpunkte holen\r\n        a.setEintrittswahrscheinlichkeit(false);\r\n        a.setEintrittszeitpunkt(true);\r\n        List ez = afService.getByProjektId(a);\r\n        logger.debug(dz.size() + \" Eintrittszeitpunkte in der Liste\");\r\n        session.setAttribute(Constants.EINTRITTSZEITPUNKTE, ez);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Speichert die Resultate des Fragebogens zur Projetktattraktivitaet ab.\r\n     *\r\n     * @param request             der HttpServletRequest\r\n     * @param form                das zu speichernde Formular\r\n     */\r\n    public void save(HttpServletRequest request, ProjektattraktivitaetForm form) {\r\n        // E-Mail und UID's aus der Session holen\r\n        HttpSession session = request.getSession();\r\n        String email = (String) session.getAttribute(\"email\");\r\n        Long paUID = (Long) session.getAttribute(\"paUID\");\r\n        Integer projektId = getProjektId(session, null);\r\n        logger.debug(\"email: \" + email);\r\n        logger.debug(\"paUID: \" + paUID);\r\n        logger.debug(\"ProjektId: \" + projektId);\r\n        if (email == null) {\r\n            return;\r\n        }\r\n        // Werte aus der Session lï¿½schen\r\n        session.removeAttribute(\"email\");\r\n        session.removeAttribute(\"projektUID\");\r\n        session.removeAttribute(\"paUID\");\r\n        // Projekt und Projektattraktivitï¿½t anhand der UID's holen\r\n        Projektattraktivitaet pa = dao.getByUID(paUID);\r\n        if (projektId == null || pa == null) {\r\n            return;\r\n        }\r\n        pa.setProjektId(projektId);\r\n        pa.setEmail(email);\r\n        AutoGrowingList l = form.getProjektattraktivitaetLines();\r\n        Iterator it = l.iterator();\r\n        Integer values = 0;\r\n        int messbarkeitCounter = 0;\r\n        int messbarkeitenTotal = 0;\r\n        int nachweisbarkeitCounter = 0;\r\n        int nachweisbarkeitenTotal = 0;\r\n        while (it.hasNext()) {\r\n            ProjektattraktivitaetLine p = (ProjektattraktivitaetLine) it.next();\r\n            if (p != null) {\r\n                Boolean messbar = p.getMessbarkeit();\r\n                Boolean nachweisbar = p.getNachweisbarkeit();\r\n                Integer ewId = p.getEintrittswahrscheinlichkeitId();\r\n                Integer ezId = p.getEintrittszeitpunktId();\r\n                // Level der Eintrittswahrscheinlichkeit holen\r\n                Auswahlfeld a = new Auswahlfeld();\r\n                a.setAuswahlfeldId(ewId);\r\n                a = afService.getById(a);\r\n                Integer ewLevel = a.getLevel() - 1;\r\n                logger.debug(\"Level der Eintrittswahrscheinlichkeit: \" + ewLevel);\r\n                // Level des Eintrittszeitpunkts holen\r\n                a.setAuswahlfeldId(ezId);\r\n                a = afService.getById(a);\r\n                Integer ezLevel = a.getLevel() - 1;\r\n                logger.debug(\"Level des Eintrittszeitpunkts: \" + ezLevel);\r\n                // Realisierbarkeit aus Matrix holen\r\n                Integer value = Constants.REALISIERBARKEIT_MATRIX[ewLevel][ezLevel];\r\n                logger.debug(\"Wert aus Matrix: \" + value);\r\n                values += value;\r\n                // Messbarkeiten zï¿½hlen\r\n                if (nachweisbar == null) {\r\n                    logger.debug(\"Quantifizierbarer Nutzen\");\r\n                    messbarkeitenTotal++;\r\n                    if (messbar) {\r\n                        logger.debug(\"messbar\");\r\n                        messbarkeitCounter++;\r\n                    }\r\n                } else // Nachweisbarkeiten zï¿½hlen\r\n                if (messbar == null) {\r\n                    logger.debug(\"Nicht quantifizierbarer Nutzen\");\r\n                    nachweisbarkeitenTotal++;\r\n                    if (nachweisbar) {\r\n                        logger.debug(\"nachweisbar\");\r\n                        nachweisbarkeitCounter++;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        // Arithmetisches Mittel der Realisierbarkeit berechnen\r\n        Double result = values / new Double(l.size());\r\n        logger.debug(\"Arithmetisches Mittel der Realisierbarkeit: \" + result);\r\n        // Nachweisbarkeit berechnen\r\n        Double nachweisbar = nachweisbarkeitCounter / new Double(nachweisbarkeitenTotal);\r\n        logger.debug(\"Nachweisbarkeiten: \" + nachweisbar);\r\n        int round = (int) Math.floor(nachweisbar * 9);\r\n        logger.debug(\"Nachweisbarkeiten index: \" + round);\r\n        result += Constants.FORMULA[round];\r\n        // Messbarkeiten berechnen\r\n        Double messbar = messbarkeitCounter / new Double(messbarkeitenTotal);\r\n        logger.debug(\"Messbarkeiten: \" + messbar);\r\n        round = (int) Math.floor(nachweisbar * 9);\r\n        logger.debug(\"Messbarkeiten index: \" + round);\r\n        result += Constants.FORMULA[round];\r\n        // Arithmetisches Mittel aller Berechnungen\r\n        result = result / 3;\r\n        logger.debug(\"Resultat: \" + result);\r\n        // Resultat speichern\r\n        pa.setResultat(result);\r\n        dao.insertProjektattraktivitaetResultat(pa);\r\n    }\r\n\r\n    /**\r\n     * Gibt den Status eines Customizings zurï¿½ck.\r\n     *\r\n     * @param request             der HttpServletRequest\r\n     * @param form                das Formular mit den benï¿½tigten Daten\r\n     *                            zum holen des Customizings\r\n     * @return                    true bei Status aktiv, sonst false\r\n     */\r\n    public boolean isActive(HttpServletRequest request, DynaActionForm form) {\r\n        // Projekt anhand UID holen\r\n        Long pUID = (Long) form.get(\"p\");\r\n        Projekt p = new Projekt();\r\n        p.setPaUID(pUID);\r\n        p = pService.getByUID(pUID);\r\n        if (p == null) {\r\n            return false;\r\n        }\r\n        boolean status = false;\r\n        // UID der Projektattraktivitï¿½t holen\r\n        Long paUID = (Long) form.get(\"pa\");\r\n        logger.debug(\"paUID=\" + paUID);\r\n        Customizing c = null;\r\n        Long naOpNuUID = null;\r\n        // Auf andere UIDs ausweichen, falls die UID der Projektattraktivitï¿½t\r\n        // nicht angegeben wurde\r\n        if (paUID == null) {\r\n            // UID der Nutzenattraktivitï¿½t bzw. des Operativen Nutzens holen\r\n            naOpNuUID = (Long) form.get(\"o\");\r\n            logger.debug(\"opNuUID=\" + naOpNuUID);\r\n            if (naOpNuUID == null) {\r\n                naOpNuUID = (Long) form.get(\"na\");\r\n                logger.debug(\"naUID=\" + naOpNuUID);\r\n                status = p.getNaStatus();\r\n            } else {\r\n                status = p.getOpNuStatus();\r\n            }\r\n            // Customizing holen\r\n            c = cService.getByNaOpNuUID(naOpNuUID);\r\n        } else {\r\n            // Customizing holen\r\n            c = cService.getByPaUID(paUID);\r\n            status = p.getPaStatus();\r\n        }\r\n        // Status zurï¿½ckgeben\r\n        if (c != null) {\r\n            return c.getStatus() && status;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    /**\r\n     * Fï¿½hrt das Login fï¿½r den Fragebogen Projektattraktvitï¿½t aus.\r\n     *\r\n     * @param request             der HttpServletRequest\r\n     * @param form                das Formular mit den Login-Daten\r\n     * @return                    true bei Erfolg, sonst false\r\n     */\r\n    public boolean login(HttpServletRequest request, DynaActionForm form) {\r\n        // E-Mail Adresse, Projekt UID und  Projektattraktvitï¿½t wird benï¿½tigt\r\n        String email = form.getString(\"email\");\r\n        Long projektUID = (Long) form.get(\"p\");\r\n        Long paUID = (Long) form.get(\"pa\");\r\n        logger.debug(\"email=\" + email);\r\n        HttpSession session = request.getSession();\r\n        Projektattraktivitaet p = new Projektattraktivitaet();\r\n        p.setProjektId(getProjektId(session, projektUID));\r\n        p.setEmail(email);\r\n        // Wenn fï¿½r die angegeben Daten schon ein ausgefï¿½llter Fragebogen\r\n        // existiert, darf der Bentuzer den Fragebogen nicht noch einmal ausfï¿½llen\r\n        p = dao.getByEmail(p);\r\n        if (p == null) {\r\n            logger.debug(\"E-Mail nicht gefunden. Ok.\");\r\n            // Benï¿½tigte Daten in der Session speichern\r\n            session.setAttribute(\"email\", email);\r\n            session.setAttribute(\"projektUID\", projektUID);\r\n            session.setAttribute(\"paUID\", paUID);\r\n            return true;\r\n        }\r\n        // Fragebogen wurde schon ausgefï¿½lt, login verweigern\r\n        logger.debug(\"E-Mail gefunden.\");\r\n        return false;\r\n    }\r\n\r\n    /**\r\n     * Kopieren einer Liste von Detailzielen in eine Liste von\r\n     * Projektattraktivitï¿½t-Formularen.<br/>\r\n     * TODO wird diese Methode wirklich benï¿½tigt?\r\n     *\r\n     * @param l                   zu kopierende Liste mit Detailzielen\r\n     * @param form                das Projektattraktivitï¿½t-Formular\r\n     * @return                    eine Liste von\r\n     *                            Projektattraktivitï¿½t-Formularen\r\n     */\r\n    private List createObjectList(List<Detailziel> l, ProjektattraktivitaetForm form) {\r\n        List<ProjektattraktivitaetForm> paForms = new ArrayList<ProjektattraktivitaetForm>();\r\n        for (Detailziel dz : l) {\r\n            ProjektattraktivitaetForm paForm = new ProjektattraktivitaetForm();\r\n            try {\r\n                // Werte kopieren und das Formular der Liste hinzufï¿½gen\r\n                BeanUtils.copyProperties(paForm, dz);\r\n                paForms.add(paForm);\r\n            } catch (Exception ex) {\r\n                logger.error(ex.getMessage());\r\n            }\r\n        }\r\n        return paForms;\r\n    }\r\n\r\n    /**\r\n     * Holt eine ProjektId anhand der angegebenen Projekt UID oder\r\n     * anhand der Projekt UID aus der Session.\r\n     *\r\n     * @param session             die HttpSession\r\n     * @param uid                 die ProjektUID\r\n     * @return                    die projektId\r\n     */\r\n    private Integer getProjektId(HttpSession session, Long uid) {\r\n        Long projektUID = uid;\r\n        // Projekt UID aus der Session holen\r\n        if (uid == null) {\r\n            projektUID = (Long) session.getAttribute(\"projektUID\");\r\n        }\r\n        // Projekt anhand der UID holen\r\n        Projekt projekt = pService.getByUID(projektUID);\r\n        if (projekt == null) {\r\n            return null;\r\n        }\r\n        return projekt.getProjektId();\r\n    }\r\n}\r\n",
		"id": "EvoSuiteBenchmark/46_nutzenportfolio/src/main/java/ch/bfh/egov/nutzenportfolio/service/fragebogen/ProjektattraktivitaetDaoServiceTest2.java",
		"test_prompt": "// ProjektattraktivitaetDaoServiceTest2.java\npackage ch.bfh.egov.nutzenportfolio.service.fragebogen;\n\nimport java.util.ArrayList;\nimport java.util.Iterator;\nimport java.util.List;\nimport javax.servlet.http.HttpServletRequest;\nimport javax.servlet.http.HttpSession;\nimport org.apache.commons.beanutils.BeanUtils;\nimport org.apache.commons.logging.Log;\nimport org.apache.commons.logging.LogFactory;\nimport org.apache.struts.action.DynaActionForm;\nimport ch.bfh.egov.nutzenportfolio.Constants;\nimport ch.bfh.egov.nutzenportfolio.common.AutoGrowingList;\nimport ch.bfh.egov.nutzenportfolio.common.ProjektattraktivitaetLine;\nimport ch.bfh.egov.nutzenportfolio.form.ProjektattraktivitaetForm;\nimport ch.bfh.egov.nutzenportfolio.persistence.fragebogen.ProjektattraktivitaetDao;\nimport ch.bfh.egov.nutzenportfolio.service.auswahlfeld.AuswahlfeldService;\nimport ch.bfh.egov.nutzenportfolio.service.customizing.CustomizingService;\nimport ch.bfh.egov.nutzenportfolio.service.detailziele.DetailzieleService;\nimport ch.bfh.egov.nutzenportfolio.service.fragebogen.ProjektattraktivitaetService;\nimport ch.bfh.egov.nutzenportfolio.service.projekt.ProjektService;\nimport ch.bfh.egov.nutzenportfolio.service.strategischeziele.StrategischeZieleService;\nimport ch.bfh.egov.nutzenportfolio.tos.Auswahlfeld;\nimport ch.bfh.egov.nutzenportfolio.tos.Customizing;\nimport ch.bfh.egov.nutzenportfolio.tos.Detailziel;\nimport ch.bfh.egov.nutzenportfolio.tos.Projekt;\nimport ch.bfh.egov.nutzenportfolio.tos.Projektattraktivitaet;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link ProjektattraktivitaetDaoService}.\n* It contains ten unit test cases for the {@link ProjektattraktivitaetDaoService#login(HttpServletRequest, DynaActionForm)} method.\n*/\nclass ProjektattraktivitaetDaoServiceTest2 {"
	},
	{
		"original_code": "// NaOpNuDaoService.java\n/**\n * Nutzenportfolio\n * Copyright (C) 2006 Kompetenzzentrum E-Business, Simon Bergamin\n *\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU General Public License\n * as published by the Free Software Foundation; either version 2\n * of the License, or (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program; if not, write to the Free Software\n * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n */\npackage ch.bfh.egov.nutzenportfolio.service.fragebogen;\n\nimport java.util.Iterator;\nimport java.util.List;\nimport java.util.ListIterator;\nimport javax.servlet.http.HttpServletRequest;\nimport javax.servlet.http.HttpSession;\nimport org.apache.commons.logging.Log;\nimport org.apache.commons.logging.LogFactory;\nimport org.apache.struts.action.DynaActionForm;\nimport ch.bfh.egov.nutzenportfolio.Constants;\nimport ch.bfh.egov.nutzenportfolio.common.AutoGrowingList;\nimport ch.bfh.egov.nutzenportfolio.common.NaOpNuLine;\nimport ch.bfh.egov.nutzenportfolio.form.NaOpNuForm;\nimport ch.bfh.egov.nutzenportfolio.persistence.fragebogen.NaOpNuDao;\nimport ch.bfh.egov.nutzenportfolio.service.auswahlfeld.AuswahlfeldService;\nimport ch.bfh.egov.nutzenportfolio.service.kategorie.KategorieService;\nimport ch.bfh.egov.nutzenportfolio.service.nutzenkriterium.NutzenkriteriumService;\nimport ch.bfh.egov.nutzenportfolio.service.projekt.ProjektService;\nimport ch.bfh.egov.nutzenportfolio.tos.Auswahlfeld;\nimport ch.bfh.egov.nutzenportfolio.tos.NaOpNu;\nimport ch.bfh.egov.nutzenportfolio.tos.Nutzenkriterium;\nimport ch.bfh.egov.nutzenportfolio.tos.Projekt;\n\n/**\n * Implementierende Service-Klasse fï¿½r die Fragebï¿½gen\n * Nutzenattraktivitï¿½t und Operativer Nutzen.\n *\n * @author Kompetenzzentrum E-Business, Simon Bergamin\n */\npublic class NaOpNuDaoService implements NaOpNuService {\n\n    private NaOpNuDao dao;\n\n    private ProjektService pService;\n\n    private KategorieService kService;\n\n    private NutzenkriteriumService nService;\n\n    private AuswahlfeldService afService;\n\n    private Log logger = LogFactory.getLog(this.getClass());\n\n    /**\n     * Konstruktor. ï¿½bergabe des DataAcessObject-Interfaces fï¿½r den Fragebogen\n     * Nutzenattraktivitaet bzw. Operativer Nutzen sowie anderer,\n     * benï¿½tigter Service-Objekte.\n     *\n     * @param dao                               Nutzenattraktivitaet / Operativer Nutzen\n     *                                          DataAcessObject-Interface\n     * @param pService                          Projekt Service-Interface\n     * @param kService                          Kategorie Service-Interface\n     * @param nService                          Nutzenkriterium Service-Interface\n     * @param afService                         Auswahlfeld Service-Interface\n     */\n    public NaOpNuDaoService(NaOpNuDao dao, ProjektService pService, KategorieService kService, NutzenkriteriumService nService, AuswahlfeldService afService) {\n        this.dao = dao;\n        this.pService = pService;\n        this.kService = kService;\n        this.nService = nService;\n        this.afService = afService;\n    }\n\n    /**\n     * @see ch.bfh.egov.nutzenportfolio.persistence.fragebogen.NaOpNuIbatisDao#getNaOpNuResultat(NaOpNu)\n     */\n    public NaOpNu getNaOpNuResultat(NaOpNu naOpNu) {\n        return dao.getNaOpNuResultat(naOpNu);\n    }\n\n    /**\n     * @see ch.bfh.egov.nutzenportfolio.persistence.fragebogen.NaOpNuIbatisDao#getPaResultat(NaOpNu)\n     */\n    public NaOpNu getPaResultat(NaOpNu naOpNu) {\n        return dao.getPaResultat(naOpNu);\n    }\n\n    /**\n     * @see ch.bfh.egov.nutzenportfolio.persistence.fragebogen.NaOpNuIbatisDao#deleteAssignments(Integer)\n     */\n    public void deleteAssignments(Integer customizingId) {\n        dao.deleteAssignments(customizingId);\n    }\n\n    /**\n     * Fï¿½llt das Formular mit allen benï¿½tigten Daten ab.\n     *\n     * @param request             der HttpServletRequest\n     * @param form                das Fragebogen Formular\n     */\n    public boolean prepare(HttpServletRequest request, NaOpNuForm form) {\n        // Session und Projekt ID holen\n        HttpSession session = request.getSession();\n        Integer projektId = getProjektId(session, null);\n        Long opNuUID = (Long) session.getAttribute(\"opNuUID\");\n        form.setProjektId(projektId);\n        // Session-ï¿½berprï¿½fung ï¿½ber E-Mail Adresse\n        if (session.getAttribute(\"email\") == null) {\n            return false;\n        }\n        // Customizing typ bestimmen\n        NaOpNu nOpNu = new NaOpNu();\n        // Operativer Nutzen\n        if (opNuUID != null && opNuUID != 0) {\n            nOpNu.setOperativerNutzen(true);\n            nOpNu.setNutzenattraktivitaet(false);\n            request.setAttribute(Constants.PROJEKTBETROFFENE, true);\n            form.setOpNu(true);\n        } else // Nutzenattraktivitaet\n        {\n            nOpNu.setNutzenattraktivitaet(true);\n            nOpNu.setOperativerNutzen(false);\n            form.setOpNu(false);\n        }\n        nOpNu.setProjektId(projektId);\n        // Kategorien holen\n        List k = kService.getByProjektId(nOpNu);\n        logger.debug(k.size() + \" Kategorien in der Liste\");\n        request.setAttribute(Constants.KATEGORIEN, k);\n        // Nutzenkriterien holen\n        List<Nutzenkriterium> n = nService.getByProjektId(nOpNu);\n        //List nForms = createObjectList(n, form);\n        logger.debug(n.size() + \" Nutzenkriterien in der Liste\");\n        // Auswahlfelder holen\n        Auswahlfeld a = new Auswahlfeld();\n        a.setProjektId(nOpNu.getProjektId());\n        a.setOperativerNutzen(nOpNu.getOperativerNutzen());\n        a.setNutzenattraktivitaet(nOpNu.getNutzenattraktivitaet());\n        // Anzahl Stufen\n        Integer stufen = null;\n        Integer gewichtungsstufen = null;\n        // Auswahlfelder pro Nutzenkriterium setzen\n        ListIterator<Nutzenkriterium> it = n.listIterator();\n        while (it.hasNext()) {\n            Nutzenkriterium nk = (Nutzenkriterium) it.next();\n            a.setNutzenkriteriumId(nk.getNutzenkriteriumId());\n            // Abstufung holen\n            a.setAbstufung(true);\n            a.setGewichtung(false);\n            List abstufungen = afService.getByNaOpNu(a);\n            logger.debug(abstufungen.size() + \" Abstufungen fï¿½r das Nutzenkriterium \" + nk.getNutzenkriteriumId());\n            nk.setAbstufungen(abstufungen);\n            if (stufen == null) {\n                stufen = abstufungen.size();\n            }\n            // Gewichtung holen\n            a.setAbstufung(false);\n            a.setGewichtung(true);\n            List gewichtungen = afService.getByNaOpNu(a);\n            logger.debug(gewichtungen.size() + \" Gewichtungen fï¿½r das Nutzenkriterium \" + nk.getNutzenkriteriumId());\n            if (gewichtungen.size() > 0) {\n                nk.setGewichtungen(gewichtungen);\n            }\n            if (gewichtungsstufen == null) {\n                gewichtungsstufen = gewichtungen.size();\n            }\n            // Nutzenkriterium in der Liste ï¿½ndern\n            it.set(nk);\n        }\n        form.setStufen(stufen);\n        form.setGewichtungsstufen(gewichtungsstufen);\n        request.setAttribute(Constants.NUTZENKRITERIEN, n);\n        return true;\n    }\n\n    /**\n     * Speichert die Resultate des Fragebogens ab.\n     *\n     * @param request             der HttpServletRequest\n     * @param form                das zu speichernde Formular\n     */\n    public void save(HttpServletRequest request, NaOpNuForm form) {\n        // E-Mail und UID's aus der Session holen\n        HttpSession session = request.getSession();\n        String email = (String) session.getAttribute(\"email\");\n        Long naUID = (Long) session.getAttribute(\"naUID\");\n        Long opNuUID = (Long) session.getAttribute(\"opNuUID\");\n        Integer projektId = getProjektId(session, null);\n        logger.debug(\"email: \" + email);\n        logger.debug(\"naUID: \" + naUID);\n        logger.debug(\"opNuUID: \" + opNuUID);\n        // Werte aus der Session lï¿½schen\n        session.removeAttribute(\"email\");\n        session.removeAttribute(\"projektUID\");\n        session.removeAttribute(\"naUID\");\n        session.removeAttribute(\"opNuUID\");\n        // Projekt und Projektattraktivitï¿½t anhand der UID's holen\n        Long naOpNuUID = naUID;\n        if (naUID == null || naUID == 0) {\n            naOpNuUID = opNuUID;\n        }\n        NaOpNu naOpNu = dao.getByUID(naOpNuUID);\n        if (projektId == null || naOpNu == null) {\n            return;\n        }\n        Integer naOpNuId = naOpNu.getNutzenattraktivitaetOperativerNutzenId();\n        Integer mandantId = naOpNu.getMandantId();\n        logger.debug(\"projektId=\" + projektId);\n        logger.debug(\"customizingId=\" + naOpNu.getCustomizingId());\n        logger.debug(\"naOpNuId=\" + naOpNuId);\n        logger.debug(\"mandantId=\" + mandantId);\n        naOpNu.setProjektId(projektId);\n        naOpNu.setEmail(email);\n        // Stufen holen\n        Integer stufen = form.getStufen();\n        logger.debug(\"Anzahl stufen: \" + stufen);\n        Integer gewichtungsstufen = form.getGewichtungsstufen();\n        logger.debug(\"Anzahl gewichtungsstufen: \" + gewichtungsstufen);\n        AutoGrowingList l = form.getNaOpNuLines();\n        Iterator it = l.iterator();\n        Double values = 0.0;\n        boolean fragebogenGewichtung = false;\n        while (it.hasNext()) {\n            NaOpNuLine line = (NaOpNuLine) it.next();\n            if (line != null) {\n                Integer nId = line.getNutzenkriteriumId();\n                logger.debug(\"nutzenkriteriumId=\" + nId);\n                // Level der Abstufung holen\n                Integer levelAbstufung = line.getAbstufung();\n                logger.debug(\"Level der Abstufung: \" + levelAbstufung);\n                Double valueAbstufung = Constants.NA_OP_NU_MATRIX[stufen - 2][levelAbstufung - 1];\n                logger.debug(\"Constants.NA_OP_NU_MATRIX[\" + (stufen - 2) + \"][\" + (levelAbstufung - 1) + \"] = \" + valueAbstufung);\n                // Level der Gewichtung holen\n                Integer levelGewichtung = line.getGewichtung();\n                logger.debug(\"Level der Gewichtung: \" + levelGewichtung);\n                // Bei Gewichtung ï¿½ber Fragebogen\n                if (levelGewichtung != null) {\n                    fragebogenGewichtung = true;\n                    Double valueGewichtung = Constants.NA_OP_NU_MATRIX[stufen - 2][levelAbstufung - 1];\n                    logger.debug(\"Constants.NA_OP_NU_MATRIX[\" + (stufen - 2) + \"][\" + (levelAbstufung - 1) + \"] = \" + valueGewichtung);\n                    values += valueAbstufung * valueGewichtung / 3;\n                } else // Bei direkter Gewichtung\n                {\n                    logger.debug(\"Direkte Gewichtung\");\n                    // Nutzenkriterium holen\n                    Nutzenkriterium n = new Nutzenkriterium();\n                    n.setNutzenkriteriumId(nId);\n                    n.setNutzenattraktivitaetOperativerNutzenId(naOpNuId);\n                    n.setMandantId(mandantId);\n                    n = nService.getAssignmentById(n);\n                    Double gewichtung = null;\n                    if (n == null) {\n                        logger.error(\"Nutzenkriterium null!\");\n                        return;\n                    } else if ((gewichtung = n.getGewichtung()) == null) {\n                        logger.error(\"Direkte Gewichtung null!\");\n                        return;\n                    } else {\n                        // direkte Gewichtung berechnen\n                        Double kategorieGewichtung = n.getKategorieGewichtung() / 100;\n                        logger.debug(\"kategorieGewichtung=\" + kategorieGewichtung);\n                        logger.debug(\"gewichtung=\" + gewichtung);\n                        Double value = valueAbstufung * (gewichtung * kategorieGewichtung / 100);\n                        values += value;\n                        logger.debug(\"Berechnung: \" + valueAbstufung + \" * \" + \"(\" + gewichtung + \" * \" + kategorieGewichtung + \" / \" + 100 + \") = \" + value);\n                    }\n                }\n            }\n        }\n        // Arithmetisches Mittel bei Gewichtung ï¿½ber Fragebogen\n        if (fragebogenGewichtung) {\n            values = values / l.size();\n        }\n        // Resultat speichern\n        naOpNu.setResultat(values);\n        dao.insertNaOpNuResultat(naOpNu);\n    }\n\n    /**\n     * Fï¿½hrt das Login fï¿½r den Fragebogen Nutzenattraktivitaet\n     * bzw. Operativer Nutzen aus.\n     *\n     * @param request             der HttpServletRequest\n     * @param form                das Formular mit den Login-Daten\n     * @return                    true bei Erfolg, sonst false\n     */\n    public boolean login(HttpServletRequest request, DynaActionForm form) {\n        // Formulardaten holen\n        String email = form.getString(\"email\");\n        Long projektUID = (Long) form.get(\"p\");\n        Long naUID = (Long) form.get(\"na\");\n        Long opNuUID = (Long) form.get(\"o\");\n        logger.debug(\"email=\" + email);\n        logger.debug(\"projektUID=\" + projektUID);\n        logger.debug(\"naUID=\" + naUID);\n        logger.debug(\"opNuUID=\" + opNuUID);\n        // E-Mail ï¿½berprï¿½fen\n        HttpSession session = request.getSession();\n        NaOpNu naOpNu = new NaOpNu();\n        naOpNu.setProjektId(getProjektId(session, projektUID));\n        naOpNu.setEmail(email);\n        // Typ des Fragebogens bestimmen\n        if (naUID == null || naUID == 0) {\n            naOpNu.setNutzenattraktivitaet(false);\n            naOpNu.setOperativerNutzen(true);\n        } else {\n            naOpNu.setNutzenattraktivitaet(true);\n            naOpNu.setOperativerNutzen(false);\n        }\n        // Wenn fï¿½r die angegeben Daten schon ein ausgefï¿½llter Fragebogen\n        // existiert, darf der Bentuzer den Fragebogen nicht noch einmal ausfï¿½llen\n        naOpNu = dao.getByEmail(naOpNu);\n        if (naOpNu == null) {\n            logger.debug(\"E-Mail nicht gefunden. Ok.\");\n            // Benï¿½tigte Daten in der Session speichern\n            session.setAttribute(\"email\", email);\n            session.setAttribute(\"projektUID\", projektUID);\n            session.setAttribute(\"naUID\", naUID);\n            session.setAttribute(\"opNuUID\", opNuUID);\n            return true;\n        }\n        // Fragebogen wurde schon ausgefï¿½lt, login verweigern\n        logger.debug(\"E-Mail gefunden.\");\n        return false;\n    }\n\n    /**\n     * Holt eine ProjektId anhand der angegebenen Projekt UID oder\n     * anhand der Projekt UID aus der Session.\n     *\n     * @param session             die HttpSession\n     * @param uid                 die ProjektUID\n     * @return                    die projektId\n     */\n    private Integer getProjektId(HttpSession session, Long uid) {\n        Long projektUID = uid;\n        // Projekt UID aus der Session holen\n        if (uid == null) {\n            projektUID = (Long) session.getAttribute(\"projektUID\");\n        }\n        // Projekt anhand der UID holen\n        Projekt projekt = pService.getByUID(projektUID);\n        if (projekt == null) {\n            return null;\n        }\n        return projekt.getProjektId();\n    }\n}\n",
		"id": "EvoSuiteBenchmark/46_nutzenportfolio/src/main/java/ch/bfh/egov/nutzenportfolio/service/fragebogen/NaOpNuDaoServiceTest0.java",
		"test_prompt": "// NaOpNuDaoServiceTest0.java\npackage ch.bfh.egov.nutzenportfolio.service.fragebogen;\n\nimport java.util.Iterator;\nimport java.util.List;\nimport java.util.ListIterator;\nimport javax.servlet.http.HttpServletRequest;\nimport javax.servlet.http.HttpSession;\nimport org.apache.commons.logging.Log;\nimport org.apache.commons.logging.LogFactory;\nimport org.apache.struts.action.DynaActionForm;\nimport ch.bfh.egov.nutzenportfolio.Constants;\nimport ch.bfh.egov.nutzenportfolio.common.AutoGrowingList;\nimport ch.bfh.egov.nutzenportfolio.common.NaOpNuLine;\nimport ch.bfh.egov.nutzenportfolio.form.NaOpNuForm;\nimport ch.bfh.egov.nutzenportfolio.persistence.fragebogen.NaOpNuDao;\nimport ch.bfh.egov.nutzenportfolio.service.auswahlfeld.AuswahlfeldService;\nimport ch.bfh.egov.nutzenportfolio.service.kategorie.KategorieService;\nimport ch.bfh.egov.nutzenportfolio.service.nutzenkriterium.NutzenkriteriumService;\nimport ch.bfh.egov.nutzenportfolio.service.projekt.ProjektService;\nimport ch.bfh.egov.nutzenportfolio.tos.Auswahlfeld;\nimport ch.bfh.egov.nutzenportfolio.tos.NaOpNu;\nimport ch.bfh.egov.nutzenportfolio.tos.Nutzenkriterium;\nimport ch.bfh.egov.nutzenportfolio.tos.Projekt;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link NaOpNuDaoService}.\n* It contains ten unit test cases for the {@link NaOpNuDaoService#prepare(HttpServletRequest, NaOpNuForm)} method.\n*/\nclass NaOpNuDaoServiceTest0 {"
	},
	{
		"original_code": "// NaOpNuDaoService.java\n/**\n * Nutzenportfolio\n * Copyright (C) 2006 Kompetenzzentrum E-Business, Simon Bergamin\n *\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU General Public License\n * as published by the Free Software Foundation; either version 2\n * of the License, or (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program; if not, write to the Free Software\n * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n */\npackage ch.bfh.egov.nutzenportfolio.service.fragebogen;\n\nimport java.util.Iterator;\nimport java.util.List;\nimport java.util.ListIterator;\nimport javax.servlet.http.HttpServletRequest;\nimport javax.servlet.http.HttpSession;\nimport org.apache.commons.logging.Log;\nimport org.apache.commons.logging.LogFactory;\nimport org.apache.struts.action.DynaActionForm;\nimport ch.bfh.egov.nutzenportfolio.Constants;\nimport ch.bfh.egov.nutzenportfolio.common.AutoGrowingList;\nimport ch.bfh.egov.nutzenportfolio.common.NaOpNuLine;\nimport ch.bfh.egov.nutzenportfolio.form.NaOpNuForm;\nimport ch.bfh.egov.nutzenportfolio.persistence.fragebogen.NaOpNuDao;\nimport ch.bfh.egov.nutzenportfolio.service.auswahlfeld.AuswahlfeldService;\nimport ch.bfh.egov.nutzenportfolio.service.kategorie.KategorieService;\nimport ch.bfh.egov.nutzenportfolio.service.nutzenkriterium.NutzenkriteriumService;\nimport ch.bfh.egov.nutzenportfolio.service.projekt.ProjektService;\nimport ch.bfh.egov.nutzenportfolio.tos.Auswahlfeld;\nimport ch.bfh.egov.nutzenportfolio.tos.NaOpNu;\nimport ch.bfh.egov.nutzenportfolio.tos.Nutzenkriterium;\nimport ch.bfh.egov.nutzenportfolio.tos.Projekt;\n\n/**\n * Implementierende Service-Klasse fï¿½r die Fragebï¿½gen\n * Nutzenattraktivitï¿½t und Operativer Nutzen.\n *\n * @author Kompetenzzentrum E-Business, Simon Bergamin\n */\npublic class NaOpNuDaoService implements NaOpNuService {\n\n    private NaOpNuDao dao;\n\n    private ProjektService pService;\n\n    private KategorieService kService;\n\n    private NutzenkriteriumService nService;\n\n    private AuswahlfeldService afService;\n\n    private Log logger = LogFactory.getLog(this.getClass());\n\n    /**\n     * Konstruktor. ï¿½bergabe des DataAcessObject-Interfaces fï¿½r den Fragebogen\n     * Nutzenattraktivitaet bzw. Operativer Nutzen sowie anderer,\n     * benï¿½tigter Service-Objekte.\n     *\n     * @param dao                               Nutzenattraktivitaet / Operativer Nutzen\n     *                                          DataAcessObject-Interface\n     * @param pService                          Projekt Service-Interface\n     * @param kService                          Kategorie Service-Interface\n     * @param nService                          Nutzenkriterium Service-Interface\n     * @param afService                         Auswahlfeld Service-Interface\n     */\n    public NaOpNuDaoService(NaOpNuDao dao, ProjektService pService, KategorieService kService, NutzenkriteriumService nService, AuswahlfeldService afService) {\n        this.dao = dao;\n        this.pService = pService;\n        this.kService = kService;\n        this.nService = nService;\n        this.afService = afService;\n    }\n\n    /**\n     * @see ch.bfh.egov.nutzenportfolio.persistence.fragebogen.NaOpNuIbatisDao#getNaOpNuResultat(NaOpNu)\n     */\n    public NaOpNu getNaOpNuResultat(NaOpNu naOpNu) {\n        return dao.getNaOpNuResultat(naOpNu);\n    }\n\n    /**\n     * @see ch.bfh.egov.nutzenportfolio.persistence.fragebogen.NaOpNuIbatisDao#getPaResultat(NaOpNu)\n     */\n    public NaOpNu getPaResultat(NaOpNu naOpNu) {\n        return dao.getPaResultat(naOpNu);\n    }\n\n    /**\n     * @see ch.bfh.egov.nutzenportfolio.persistence.fragebogen.NaOpNuIbatisDao#deleteAssignments(Integer)\n     */\n    public void deleteAssignments(Integer customizingId) {\n        dao.deleteAssignments(customizingId);\n    }\n\n    /**\n     * Fï¿½llt das Formular mit allen benï¿½tigten Daten ab.\n     *\n     * @param request             der HttpServletRequest\n     * @param form                das Fragebogen Formular\n     */\n    public boolean prepare(HttpServletRequest request, NaOpNuForm form) {\n        // Session und Projekt ID holen\n        HttpSession session = request.getSession();\n        Integer projektId = getProjektId(session, null);\n        Long opNuUID = (Long) session.getAttribute(\"opNuUID\");\n        form.setProjektId(projektId);\n        // Session-ï¿½berprï¿½fung ï¿½ber E-Mail Adresse\n        if (session.getAttribute(\"email\") == null) {\n            return false;\n        }\n        // Customizing typ bestimmen\n        NaOpNu nOpNu = new NaOpNu();\n        // Operativer Nutzen\n        if (opNuUID != null && opNuUID != 0) {\n            nOpNu.setOperativerNutzen(true);\n            nOpNu.setNutzenattraktivitaet(false);\n            request.setAttribute(Constants.PROJEKTBETROFFENE, true);\n            form.setOpNu(true);\n        } else // Nutzenattraktivitaet\n        {\n            nOpNu.setNutzenattraktivitaet(true);\n            nOpNu.setOperativerNutzen(false);\n            form.setOpNu(false);\n        }\n        nOpNu.setProjektId(projektId);\n        // Kategorien holen\n        List k = kService.getByProjektId(nOpNu);\n        logger.debug(k.size() + \" Kategorien in der Liste\");\n        request.setAttribute(Constants.KATEGORIEN, k);\n        // Nutzenkriterien holen\n        List<Nutzenkriterium> n = nService.getByProjektId(nOpNu);\n        //List nForms = createObjectList(n, form);\n        logger.debug(n.size() + \" Nutzenkriterien in der Liste\");\n        // Auswahlfelder holen\n        Auswahlfeld a = new Auswahlfeld();\n        a.setProjektId(nOpNu.getProjektId());\n        a.setOperativerNutzen(nOpNu.getOperativerNutzen());\n        a.setNutzenattraktivitaet(nOpNu.getNutzenattraktivitaet());\n        // Anzahl Stufen\n        Integer stufen = null;\n        Integer gewichtungsstufen = null;\n        // Auswahlfelder pro Nutzenkriterium setzen\n        ListIterator<Nutzenkriterium> it = n.listIterator();\n        while (it.hasNext()) {\n            Nutzenkriterium nk = (Nutzenkriterium) it.next();\n            a.setNutzenkriteriumId(nk.getNutzenkriteriumId());\n            // Abstufung holen\n            a.setAbstufung(true);\n            a.setGewichtung(false);\n            List abstufungen = afService.getByNaOpNu(a);\n            logger.debug(abstufungen.size() + \" Abstufungen fï¿½r das Nutzenkriterium \" + nk.getNutzenkriteriumId());\n            nk.setAbstufungen(abstufungen);\n            if (stufen == null) {\n                stufen = abstufungen.size();\n            }\n            // Gewichtung holen\n            a.setAbstufung(false);\n            a.setGewichtung(true);\n            List gewichtungen = afService.getByNaOpNu(a);\n            logger.debug(gewichtungen.size() + \" Gewichtungen fï¿½r das Nutzenkriterium \" + nk.getNutzenkriteriumId());\n            if (gewichtungen.size() > 0) {\n                nk.setGewichtungen(gewichtungen);\n            }\n            if (gewichtungsstufen == null) {\n                gewichtungsstufen = gewichtungen.size();\n            }\n            // Nutzenkriterium in der Liste ï¿½ndern\n            it.set(nk);\n        }\n        form.setStufen(stufen);\n        form.setGewichtungsstufen(gewichtungsstufen);\n        request.setAttribute(Constants.NUTZENKRITERIEN, n);\n        return true;\n    }\n\n    /**\n     * Speichert die Resultate des Fragebogens ab.\n     *\n     * @param request             der HttpServletRequest\n     * @param form                das zu speichernde Formular\n     */\n    public void save(HttpServletRequest request, NaOpNuForm form) {\n        // E-Mail und UID's aus der Session holen\n        HttpSession session = request.getSession();\n        String email = (String) session.getAttribute(\"email\");\n        Long naUID = (Long) session.getAttribute(\"naUID\");\n        Long opNuUID = (Long) session.getAttribute(\"opNuUID\");\n        Integer projektId = getProjektId(session, null);\n        logger.debug(\"email: \" + email);\n        logger.debug(\"naUID: \" + naUID);\n        logger.debug(\"opNuUID: \" + opNuUID);\n        // Werte aus der Session lï¿½schen\n        session.removeAttribute(\"email\");\n        session.removeAttribute(\"projektUID\");\n        session.removeAttribute(\"naUID\");\n        session.removeAttribute(\"opNuUID\");\n        // Projekt und Projektattraktivitï¿½t anhand der UID's holen\n        Long naOpNuUID = naUID;\n        if (naUID == null || naUID == 0) {\n            naOpNuUID = opNuUID;\n        }\n        NaOpNu naOpNu = dao.getByUID(naOpNuUID);\n        if (projektId == null || naOpNu == null) {\n            return;\n        }\n        Integer naOpNuId = naOpNu.getNutzenattraktivitaetOperativerNutzenId();\n        Integer mandantId = naOpNu.getMandantId();\n        logger.debug(\"projektId=\" + projektId);\n        logger.debug(\"customizingId=\" + naOpNu.getCustomizingId());\n        logger.debug(\"naOpNuId=\" + naOpNuId);\n        logger.debug(\"mandantId=\" + mandantId);\n        naOpNu.setProjektId(projektId);\n        naOpNu.setEmail(email);\n        // Stufen holen\n        Integer stufen = form.getStufen();\n        logger.debug(\"Anzahl stufen: \" + stufen);\n        Integer gewichtungsstufen = form.getGewichtungsstufen();\n        logger.debug(\"Anzahl gewichtungsstufen: \" + gewichtungsstufen);\n        AutoGrowingList l = form.getNaOpNuLines();\n        Iterator it = l.iterator();\n        Double values = 0.0;\n        boolean fragebogenGewichtung = false;\n        while (it.hasNext()) {\n            NaOpNuLine line = (NaOpNuLine) it.next();\n            if (line != null) {\n                Integer nId = line.getNutzenkriteriumId();\n                logger.debug(\"nutzenkriteriumId=\" + nId);\n                // Level der Abstufung holen\n                Integer levelAbstufung = line.getAbstufung();\n                logger.debug(\"Level der Abstufung: \" + levelAbstufung);\n                Double valueAbstufung = Constants.NA_OP_NU_MATRIX[stufen - 2][levelAbstufung - 1];\n                logger.debug(\"Constants.NA_OP_NU_MATRIX[\" + (stufen - 2) + \"][\" + (levelAbstufung - 1) + \"] = \" + valueAbstufung);\n                // Level der Gewichtung holen\n                Integer levelGewichtung = line.getGewichtung();\n                logger.debug(\"Level der Gewichtung: \" + levelGewichtung);\n                // Bei Gewichtung ï¿½ber Fragebogen\n                if (levelGewichtung != null) {\n                    fragebogenGewichtung = true;\n                    Double valueGewichtung = Constants.NA_OP_NU_MATRIX[stufen - 2][levelAbstufung - 1];\n                    logger.debug(\"Constants.NA_OP_NU_MATRIX[\" + (stufen - 2) + \"][\" + (levelAbstufung - 1) + \"] = \" + valueGewichtung);\n                    values += valueAbstufung * valueGewichtung / 3;\n                } else // Bei direkter Gewichtung\n                {\n                    logger.debug(\"Direkte Gewichtung\");\n                    // Nutzenkriterium holen\n                    Nutzenkriterium n = new Nutzenkriterium();\n                    n.setNutzenkriteriumId(nId);\n                    n.setNutzenattraktivitaetOperativerNutzenId(naOpNuId);\n                    n.setMandantId(mandantId);\n                    n = nService.getAssignmentById(n);\n                    Double gewichtung = null;\n                    if (n == null) {\n                        logger.error(\"Nutzenkriterium null!\");\n                        return;\n                    } else if ((gewichtung = n.getGewichtung()) == null) {\n                        logger.error(\"Direkte Gewichtung null!\");\n                        return;\n                    } else {\n                        // direkte Gewichtung berechnen\n                        Double kategorieGewichtung = n.getKategorieGewichtung() / 100;\n                        logger.debug(\"kategorieGewichtung=\" + kategorieGewichtung);\n                        logger.debug(\"gewichtung=\" + gewichtung);\n                        Double value = valueAbstufung * (gewichtung * kategorieGewichtung / 100);\n                        values += value;\n                        logger.debug(\"Berechnung: \" + valueAbstufung + \" * \" + \"(\" + gewichtung + \" * \" + kategorieGewichtung + \" / \" + 100 + \") = \" + value);\n                    }\n                }\n            }\n        }\n        // Arithmetisches Mittel bei Gewichtung ï¿½ber Fragebogen\n        if (fragebogenGewichtung) {\n            values = values / l.size();\n        }\n        // Resultat speichern\n        naOpNu.setResultat(values);\n        dao.insertNaOpNuResultat(naOpNu);\n    }\n\n    /**\n     * Fï¿½hrt das Login fï¿½r den Fragebogen Nutzenattraktivitaet\n     * bzw. Operativer Nutzen aus.\n     *\n     * @param request             der HttpServletRequest\n     * @param form                das Formular mit den Login-Daten\n     * @return                    true bei Erfolg, sonst false\n     */\n    public boolean login(HttpServletRequest request, DynaActionForm form) {\n        // Formulardaten holen\n        String email = form.getString(\"email\");\n        Long projektUID = (Long) form.get(\"p\");\n        Long naUID = (Long) form.get(\"na\");\n        Long opNuUID = (Long) form.get(\"o\");\n        logger.debug(\"email=\" + email);\n        logger.debug(\"projektUID=\" + projektUID);\n        logger.debug(\"naUID=\" + naUID);\n        logger.debug(\"opNuUID=\" + opNuUID);\n        // E-Mail ï¿½berprï¿½fen\n        HttpSession session = request.getSession();\n        NaOpNu naOpNu = new NaOpNu();\n        naOpNu.setProjektId(getProjektId(session, projektUID));\n        naOpNu.setEmail(email);\n        // Typ des Fragebogens bestimmen\n        if (naUID == null || naUID == 0) {\n            naOpNu.setNutzenattraktivitaet(false);\n            naOpNu.setOperativerNutzen(true);\n        } else {\n            naOpNu.setNutzenattraktivitaet(true);\n            naOpNu.setOperativerNutzen(false);\n        }\n        // Wenn fï¿½r die angegeben Daten schon ein ausgefï¿½llter Fragebogen\n        // existiert, darf der Bentuzer den Fragebogen nicht noch einmal ausfï¿½llen\n        naOpNu = dao.getByEmail(naOpNu);\n        if (naOpNu == null) {\n            logger.debug(\"E-Mail nicht gefunden. Ok.\");\n            // Benï¿½tigte Daten in der Session speichern\n            session.setAttribute(\"email\", email);\n            session.setAttribute(\"projektUID\", projektUID);\n            session.setAttribute(\"naUID\", naUID);\n            session.setAttribute(\"opNuUID\", opNuUID);\n            return true;\n        }\n        // Fragebogen wurde schon ausgefï¿½lt, login verweigern\n        logger.debug(\"E-Mail gefunden.\");\n        return false;\n    }\n\n    /**\n     * Holt eine ProjektId anhand der angegebenen Projekt UID oder\n     * anhand der Projekt UID aus der Session.\n     *\n     * @param session             die HttpSession\n     * @param uid                 die ProjektUID\n     * @return                    die projektId\n     */\n    private Integer getProjektId(HttpSession session, Long uid) {\n        Long projektUID = uid;\n        // Projekt UID aus der Session holen\n        if (uid == null) {\n            projektUID = (Long) session.getAttribute(\"projektUID\");\n        }\n        // Projekt anhand der UID holen\n        Projekt projekt = pService.getByUID(projektUID);\n        if (projekt == null) {\n            return null;\n        }\n        return projekt.getProjektId();\n    }\n}\n",
		"id": "EvoSuiteBenchmark/46_nutzenportfolio/src/main/java/ch/bfh/egov/nutzenportfolio/service/fragebogen/NaOpNuDaoServiceTest1.java",
		"test_prompt": "// NaOpNuDaoServiceTest1.java\npackage ch.bfh.egov.nutzenportfolio.service.fragebogen;\n\nimport java.util.Iterator;\nimport java.util.List;\nimport java.util.ListIterator;\nimport javax.servlet.http.HttpServletRequest;\nimport javax.servlet.http.HttpSession;\nimport org.apache.commons.logging.Log;\nimport org.apache.commons.logging.LogFactory;\nimport org.apache.struts.action.DynaActionForm;\nimport ch.bfh.egov.nutzenportfolio.Constants;\nimport ch.bfh.egov.nutzenportfolio.common.AutoGrowingList;\nimport ch.bfh.egov.nutzenportfolio.common.NaOpNuLine;\nimport ch.bfh.egov.nutzenportfolio.form.NaOpNuForm;\nimport ch.bfh.egov.nutzenportfolio.persistence.fragebogen.NaOpNuDao;\nimport ch.bfh.egov.nutzenportfolio.service.auswahlfeld.AuswahlfeldService;\nimport ch.bfh.egov.nutzenportfolio.service.kategorie.KategorieService;\nimport ch.bfh.egov.nutzenportfolio.service.nutzenkriterium.NutzenkriteriumService;\nimport ch.bfh.egov.nutzenportfolio.service.projekt.ProjektService;\nimport ch.bfh.egov.nutzenportfolio.tos.Auswahlfeld;\nimport ch.bfh.egov.nutzenportfolio.tos.NaOpNu;\nimport ch.bfh.egov.nutzenportfolio.tos.Nutzenkriterium;\nimport ch.bfh.egov.nutzenportfolio.tos.Projekt;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link NaOpNuDaoService}.\n* It contains ten unit test cases for the {@link NaOpNuDaoService#login(HttpServletRequest, DynaActionForm)} method.\n*/\nclass NaOpNuDaoServiceTest1 {"
	},
	{
		"original_code": "// CustomizingDaoService.java\n/**\r\n * Nutzenportfolio\r\n * Copyright (C) 2006 Kompetenzzentrum E-Business, Simon Bergamin\r\n *\r\n * This program is free software; you can redistribute it and/or\r\n * modify it under the terms of the GNU General Public License\r\n * as published by the Free Software Foundation; either version 2\r\n * of the License, or (at your option) any later version.\r\n *\r\n * This program is distributed in the hope that it will be useful,\r\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n * GNU General Public License for more details.\r\n *\r\n * You should have received a copy of the GNU General Public License\r\n * along with this program; if not, write to the Free Software\r\n * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\r\n */\r\npackage ch.bfh.egov.nutzenportfolio.service.customizing;\r\n\r\nimport java.util.List;\r\nimport javax.servlet.http.HttpServletRequest;\r\nimport javax.servlet.http.HttpSession;\r\nimport org.apache.commons.logging.Log;\r\nimport org.apache.commons.logging.LogFactory;\r\nimport org.apache.struts.action.DynaActionForm;\r\nimport ch.bfh.egov.nutzenportfolio.Constants;\r\nimport ch.bfh.egov.nutzenportfolio.persistence.customizing.CustomizingDao;\r\nimport ch.bfh.egov.nutzenportfolio.service.auswahlfeld.AuswahlfeldService;\r\nimport ch.bfh.egov.nutzenportfolio.service.common.CommonService;\r\nimport ch.bfh.egov.nutzenportfolio.service.detailziele.DetailzieleService;\r\nimport ch.bfh.egov.nutzenportfolio.service.fragebogen.NaOpNuService;\r\nimport ch.bfh.egov.nutzenportfolio.service.fragebogen.ProjektattraktivitaetService;\r\nimport ch.bfh.egov.nutzenportfolio.service.kategorie.KategorieService;\r\nimport ch.bfh.egov.nutzenportfolio.service.nutzenkriterium.NutzenkriteriumService;\r\nimport ch.bfh.egov.nutzenportfolio.service.projektgruppe.ProjektgruppeService;\r\nimport ch.bfh.egov.nutzenportfolio.service.strategischeziele.StrategischeZieleService;\r\nimport ch.bfh.egov.nutzenportfolio.tag.CustomizingNavigation;\r\nimport ch.bfh.egov.nutzenportfolio.tos.Customizing;\r\nimport ch.bfh.egov.nutzenportfolio.tos.Kategorie;\r\nimport ch.bfh.egov.nutzenportfolio.tos.Nutzenkriterium;\r\nimport ch.bfh.egov.nutzenportfolio.tos.StrategischesZiel;\r\n\r\n/**\r\n * Implementierende Service-Klasse fï¿½r Customizings.\r\n *\r\n * @author Kompetenzzentrum E-Business, Simon Bergamin\r\n */\r\npublic class CustomizingDaoService implements CustomizingService {\r\n\r\n    private CustomizingDao dao;\r\n\r\n    private CommonService cService;\r\n\r\n    private StrategischeZieleService szService;\r\n\r\n    private DetailzieleService dzService;\r\n\r\n    private AuswahlfeldService afService;\r\n\r\n    private KategorieService kService;\r\n\r\n    private NutzenkriteriumService nService;\r\n\r\n    private NaOpNuService naOpNuService;\r\n\r\n    private ProjektattraktivitaetService paService;\r\n\r\n    private ProjektgruppeService pgService;\r\n\r\n    private Log logger = LogFactory.getLog(this.getClass());\r\n\r\n    /**\r\n     * Konstruktor. ï¿½bergabe des DataAcessObject-Interfaces fï¿½r Customizings.\r\n     *\r\n     * @param dao                               Customizing DataAcessObject-Interface\r\n     */\r\n    public CustomizingDaoService(CustomizingDao dao) {\r\n        this.dao = dao;\r\n    }\r\n\r\n    /**\r\n     * @see ch.bfh.egov.nutzenportfolio.persistence.customizing.CustomizingIbatisDao#getById(Customizing)\r\n     */\r\n    public Customizing getById(Customizing c) {\r\n        return dao.getById(c);\r\n    }\r\n\r\n    /**\r\n     * @see ch.bfh.egov.nutzenportfolio.persistence.customizing.CustomizingIbatisDao#getByName(Customizing)\r\n     */\r\n    public Customizing getByName(Customizing c) {\r\n        return dao.getByName(c);\r\n    }\r\n\r\n    /**\r\n     * @see ch.bfh.egov.nutzenportfolio.persistence.customizing.CustomizingIbatisDao#getByPaUID(Long)\r\n     */\r\n    public Customizing getByPaUID(Long paUID) {\r\n        return dao.getByPaUID(paUID);\r\n    }\r\n\r\n    /**\r\n     * @see ch.bfh.egov.nutzenportfolio.persistence.customizing.CustomizingIbatisDao#getByNaOpNuUID(Long)\r\n     */\r\n    public Customizing getByNaOpNuUID(Long naOpNuUID) {\r\n        return dao.getByNaOpNuUID(naOpNuUID);\r\n    }\r\n\r\n    /**\r\n     * @see ch.bfh.egov.nutzenportfolio.persistence.customizing.CustomizingIbatisDao#getAll(Integer)\r\n     */\r\n    public List getAll(Integer mandantId) {\r\n        return dao.getAll(mandantId);\r\n    }\r\n\r\n    /**\r\n     * @see ch.bfh.egov.nutzenportfolio.persistence.customizing.CustomizingIbatisDao#insert(Customizing)\r\n     */\r\n    public Integer insert(Customizing c) {\r\n        Integer id = dao.insert(c);\r\n        logger.debug(\"id: \" + id);\r\n        return id;\r\n    }\r\n\r\n    /**\r\n     * @see ch.bfh.egov.nutzenportfolio.persistence.customizing.CustomizingIbatisDao#update(Customizing)\r\n     */\r\n    public void update(Customizing c) {\r\n        dao.update(c);\r\n    }\r\n\r\n    /**\r\n     * Initialisierung dieses Service-Objekts durch ï¿½bergabe anderer,\r\n     * benï¿½tigter Service-Objekte.\r\n     *\r\n     * @param cService                   Common Service Objekt\r\n     * @param szService                  Strategische Ziele Service Objekt\r\n     * @param dzService                  Customizing Service Objekt\r\n     * @param afService                  Auswahlfeld Service Objekt\r\n     * @param kService                   Kategorie Service Objekt\r\n     * @param nService                   Nutzenkriterium Service Objekt\r\n     * @param naOpNuService              Nutzenattraktivitï¿½t / Operativer Nutzen\r\n     *                                   Service Objekt\r\n     * @param paService                  Projektattraktivitaet Service Objekt\r\n     * @param pgService                  Projektgruppe Service Objekt\r\n     */\r\n    public void init(CommonService cService, StrategischeZieleService szService, DetailzieleService dzService, AuswahlfeldService afService, KategorieService kService, NutzenkriteriumService nService, NaOpNuService naOpNuService, ProjektattraktivitaetService paService, ProjektgruppeService pgService) {\r\n        this.cService = cService;\r\n        this.szService = szService;\r\n        this.dzService = dzService;\r\n        this.afService = afService;\r\n        this.kService = kService;\r\n        this.nService = nService;\r\n        this.naOpNuService = naOpNuService;\r\n        this.paService = paService;\r\n        this.pgService = pgService;\r\n    }\r\n\r\n    /**\r\n     * Lï¿½scht ein Customizing inklusive aller Verknï¿½pfungen.\r\n     *\r\n     * @param request                   der HttpServletRequest\r\n     * @param c                         das zu lï¿½schende Customizing\r\n     */\r\n    public void cascadeDelete(HttpServletRequest request, Customizing c) {\r\n        Integer customizingId = c.getCustomizingId();\r\n        Integer naId = cService.getNutzenattraktivitaetIdByCustomizingId(customizingId);\r\n        Integer opNuId = cService.getOperativerNutzenIdByCustomizingId(customizingId);\r\n        Integer paId = cService.getProjektattraktivitaetIdByCustomizingId(customizingId);\r\n        // Projektattraktivitï¿½t Verknï¿½pfungen lï¿½schen\r\n        dzService.deleteAssignments(paId);\r\n        afService.deletePaAssignmentsById(paId);\r\n        // Resultate Projektattraktivitï¿½t lï¿½schen\r\n        paService.deleteAssignments(customizingId);\r\n        // Nutzenattraktivitï¿½t Verknï¿½pfungen lï¿½schen\r\n        kService.deleteAssignments(naId);\r\n        nService.deleteAssignments(naId);\r\n        afService.deleteNaOpNuAssignmentsById(naId);\r\n        // Operativer Nutzen Verknï¿½pfungen lï¿½schen\r\n        kService.deleteAssignments(opNuId);\r\n        nService.deleteAssignments(opNuId);\r\n        afService.deleteNaOpNuAssignmentsById(opNuId);\r\n        // Resultate Nutzenattraktivitï¿½t & Operativer Nutzen lï¿½schen\r\n        naOpNuService.deleteAssignments(customizingId);\r\n        // Projektgruppe Verknï¿½pfung lï¿½schen\r\n        pgService.unsetCustomizingId(customizingId);\r\n        // Projektattraktivitï¿½t lï¿½schen\r\n        cService.deleteProjektattraktivitaet(paId);\r\n        // Nutzenattraktivitï¿½t & Operativer Nutzen lï¿½schen\r\n        cService.deleteNutzenattraktivitaetOperativerNutzen(naId);\r\n        cService.deleteNutzenattraktivitaetOperativerNutzen(opNuId);\r\n        // Customizing lï¿½schen\r\n        dao.delete(c);\r\n    }\r\n\r\n    /**\r\n     * Kopiert ein Customizing inklusive aller Verknï¿½pfungen.\r\n     *\r\n     * @param request                   der HttpServletRequest\r\n     * @param form                      das Formular mit der zu kopierenden Customizing Id\r\n     */\r\n    public void copy(HttpServletRequest request, DynaActionForm form) {\r\n        Integer mandantId = (Integer) request.getSession().getAttribute(Constants.MANDANT_ID);\r\n        Integer customizingId = (Integer) form.get(Constants.CUSTOMIZING_ID);\r\n        logger.debug(\"customizingId\" + customizingId);\r\n        if (customizingId == null) {\r\n            return;\r\n        }\r\n        // Customizing holen\r\n        Customizing c = new Customizing();\r\n        c.setCustomizingId(customizingId);\r\n        c.setMandantId(mandantId);\r\n        c = dao.getById(c);\r\n        // Customizing kopieren\r\n        String name = c.getName();\r\n        c.setName(name + \" (1)\");\r\n        Integer newCustomizingId = dao.insert(c);\r\n        // Projektattraktivitï¿½t, Nutzenattraktivitï¿½t und Operativer Nutzen kopieren\r\n        cService.insertCustomizingParts(newCustomizingId);\r\n        // Ids holen\r\n        Integer paId = cService.getProjektattraktivitaetIdByCustomizingId(customizingId);\r\n        Integer[] naOpNuId = new Integer[2];\r\n        naOpNuId[0] = cService.getNutzenattraktivitaetIdByCustomizingId(customizingId);\r\n        naOpNuId[1] = cService.getOperativerNutzenIdByCustomizingId(customizingId);\r\n        // Neue Ids holen\r\n        Integer newPaId = cService.getProjektattraktivitaetIdByCustomizingId(newCustomizingId);\r\n        Integer[] newNaOpNuId = new Integer[2];\r\n        newNaOpNuId[0] = cService.getNutzenattraktivitaetIdByCustomizingId(newCustomizingId);\r\n        newNaOpNuId[1] = cService.getOperativerNutzenIdByCustomizingId(newCustomizingId);\r\n        // Strategische Ziele\r\n        szService.copy(mandantId, customizingId, newPaId);\r\n        // Detailziele\r\n        dzService.copy(mandantId, paId, newPaId, true);\r\n        dzService.copy(mandantId, paId, newPaId, false);\r\n        // Auswahlfelder\r\n        afService.copy(paId, newPaId, null, null, Constants.EINTRITTSWAHRSCHEINLICHKEIT);\r\n        afService.copy(paId, newPaId, null, null, Constants.EINTRITTSZEITPUNKT);\r\n        afService.copy(null, null, naOpNuId[0], newNaOpNuId[0], Constants.ABSTUFUNG);\r\n        afService.copy(null, null, naOpNuId[0], newNaOpNuId[0], Constants.GEWICHTUNG);\r\n        afService.copy(null, null, naOpNuId[1], newNaOpNuId[1], Constants.ABSTUFUNG);\r\n        afService.copy(null, null, naOpNuId[1], newNaOpNuId[1], Constants.GEWICHTUNG);\r\n        // Kategorien\r\n        kService.copy(mandantId, naOpNuId[0], newNaOpNuId[0]);\r\n        kService.copy(mandantId, naOpNuId[1], newNaOpNuId[1]);\r\n        // Nutzenkriterien\r\n        nService.copy(mandantId, naOpNuId[0], newNaOpNuId[0]);\r\n        nService.copy(mandantId, naOpNuId[1], newNaOpNuId[1]);\r\n    }\r\n\r\n    /**\r\n     * ï¿½ndert den Status eines Customizing auf inaktiv respektive aktiv.\r\n     *\r\n     * @param request                   der HttpServletRequest\r\n     * @param form                      das Formular mit der zu kopierenden Customizing Id\r\n     */\r\n    public void changeStatus(HttpServletRequest request, DynaActionForm form) {\r\n        Integer mandantId = (Integer) request.getSession().getAttribute(Constants.MANDANT_ID);\r\n        Integer customizingId = (Integer) form.get(Constants.CUSTOMIZING_ID);\r\n        logger.debug(\"customizingId\" + customizingId);\r\n        if (customizingId == null) {\r\n            return;\r\n        }\r\n        // Customizing holen\r\n        Customizing c = new Customizing();\r\n        c.setCustomizingId(customizingId);\r\n        c.setMandantId(mandantId);\r\n        c = dao.getById(c);\r\n        // Status ï¿½ndern und update\r\n        c.setStatus(!c.getStatus());\r\n        dao.update(c);\r\n    }\r\n\r\n    /**\r\n     * ï¿½berprï¿½ft, ob ein Customizing komplett ist.\r\n     *\r\n     * @return                          true bei komplettem Customizing, sonst false\r\n     */\r\n    public boolean complete(HttpServletRequest request) {\r\n        CustomizingNavigation nav = new CustomizingNavigation();\r\n        nav.setName(Constants.CUSTOMIZING);\r\n        nav.setRequest(request);\r\n        if (nav.checkState()) {\r\n            request.setAttribute(Constants.INCOMPLETE, false);\r\n            return true;\r\n        }\r\n        request.setAttribute(Constants.INCOMPLETE, true);\r\n        return false;\r\n    }\r\n\r\n    /**\r\n     * Setzt den Status jedes Customizing Schritts in die Session.\r\n     * Beispiel: Sobald mindestens 1 Strategisches Ziel fï¿½r das momentane\r\n     * Customizing angewï¿½hlt ist, wird in die Session unter dem Schlï¿½ssel\r\n     * \"strategischeZiele\" der Wert \"true\" gesetzt. Dies wird spï¿½ter zur\r\n     * Status-Prï¿½fung bei der Navigation verwendet (Schritt; erledigt=grï¿½n,\r\n     * wird bearbeitet=gelb, nicht erledigt=rot). Die Methode unsetStatus\r\n     * dient zum aufheben der gespeicherten Session Variabeln.\r\n     *\r\n     * @param request         der HttpServletRequest zum erhalten der Session\r\n     */\r\n    public void setStatus(HttpServletRequest request) {\r\n        HttpSession session = request.getSession();\r\n        Integer mandantId = (Integer) session.getAttribute(Constants.MANDANT_ID);\r\n        Integer customizingId = (Integer) session.getAttribute(Constants.CUSTOMIZING_ID);\r\n        // Projektattraktivitï¿½t\r\n        Integer paId = cService.getProjektattraktivitaetIdByCustomizingId(customizingId);\r\n        logger.debug(\"paId=\" + paId);\r\n        // Strategische Ziele\r\n        List<StrategischesZiel> szs = szService.setStatus(request, mandantId, customizingId);\r\n        // Detailziele\r\n        boolean dzOk = dzService.setStatus(request, szs, mandantId, paId);\r\n        // Realisierbarkeit\r\n        boolean realisierbarkeitOk = afService.setRealisierbarkeitStatus(request, paId);\r\n        if (szs != null && dzOk && realisierbarkeitOk) {\r\n            session.setAttribute(Constants.PROJEKTATTRAKTIVITAET, true);\r\n        }\r\n        // Nutzenattraktivitï¿½t\r\n        Integer[] naOpNuIds = new Integer[2];\r\n        naOpNuIds[0] = cService.getNutzenattraktivitaetIdByCustomizingId(customizingId);\r\n        logger.debug(\"naId=\" + naOpNuIds[0]);\r\n        // Operativer Nutzen\r\n        naOpNuIds[1] = cService.getOperativerNutzenIdByCustomizingId(customizingId);\r\n        logger.debug(\"opNuId=\" + naOpNuIds[1]);\r\n        boolean isNa = true;\r\n        for (int i = 0; i < naOpNuIds.length; i++) {\r\n            Integer naOpNuId = naOpNuIds[i];\r\n            if (i == 1) {\r\n                isNa = false;\r\n            }\r\n            // Kategorien\r\n            List<Kategorie> kategorien = kService.setStatus(request, mandantId, naOpNuId, isNa);\r\n            if (kategorien != null) {\r\n                // Nutzenkriterien\r\n                List<Nutzenkriterium> kriterien = nService.setStatus(request, kategorien, mandantId, naOpNuId, isNa);\r\n                logger.debug(\"kriterienOk=\" + (kriterien != null));\r\n                // Stufenbeschriebe\r\n                boolean stufenOk = afService.setStufenStatus(request, naOpNuId, isNa);\r\n                logger.debug(\"stufenOk=\" + stufenOk);\r\n                // Gewichtung\r\n                boolean gewichtungOk = afService.setGewichtungStatus(request, kriterien, naOpNuId, isNa);\r\n                logger.debug(\"gewichtungOk=\" + gewichtungOk);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Dient zum aufheben der gespeicherten Session Variabeln mit den\r\n     * Status-Flags.\r\n     *\r\n     * @param request         der HttpServletRequest zum erhalten der Session\r\n     */\r\n    public void unsetStatus(HttpServletRequest request) {\r\n        HttpSession session = request.getSession();\r\n        session.removeAttribute(Constants.STRATEGISCHE_ZIELE);\r\n        session.removeAttribute(Constants.DETAILZIELE_Q);\r\n        session.removeAttribute(Constants.DETAILZIELE_NQ);\r\n        session.removeAttribute(Constants.REALISIERBARKEIT);\r\n        session.removeAttribute(Constants.KATEGORIEN_NA);\r\n        session.removeAttribute(Constants.KATEGORIEN_OP_NU);\r\n        session.removeAttribute(Constants.NUTZENKRITERIEN_NA);\r\n        session.removeAttribute(Constants.FRAGEN_NA);\r\n        session.removeAttribute(Constants.NUTZENKRITERIEN_OP_NU);\r\n        session.removeAttribute(Constants.FRAGEN_OP_NU);\r\n        session.removeAttribute(Constants.ABSTUFUNGEN_NA);\r\n        session.removeAttribute(Constants.ABSTUFUNGEN_OP_NU);\r\n        session.removeAttribute(Constants.GEWICHTUNGEN_NA);\r\n        session.removeAttribute(Constants.GEWICHTUNGEN_OP_NU);\r\n    }\r\n}\r\n",
		"id": "EvoSuiteBenchmark/46_nutzenportfolio/src/main/java/ch/bfh/egov/nutzenportfolio/service/customizing/CustomizingDaoServiceTest0.java",
		"test_prompt": "// CustomizingDaoServiceTest0.java\npackage ch.bfh.egov.nutzenportfolio.service.customizing;\n\nimport java.util.List;\nimport javax.servlet.http.HttpServletRequest;\nimport javax.servlet.http.HttpSession;\nimport org.apache.commons.logging.Log;\nimport org.apache.commons.logging.LogFactory;\nimport org.apache.struts.action.DynaActionForm;\nimport ch.bfh.egov.nutzenportfolio.Constants;\nimport ch.bfh.egov.nutzenportfolio.persistence.customizing.CustomizingDao;\nimport ch.bfh.egov.nutzenportfolio.service.auswahlfeld.AuswahlfeldService;\nimport ch.bfh.egov.nutzenportfolio.service.common.CommonService;\nimport ch.bfh.egov.nutzenportfolio.service.detailziele.DetailzieleService;\nimport ch.bfh.egov.nutzenportfolio.service.fragebogen.NaOpNuService;\nimport ch.bfh.egov.nutzenportfolio.service.fragebogen.ProjektattraktivitaetService;\nimport ch.bfh.egov.nutzenportfolio.service.kategorie.KategorieService;\nimport ch.bfh.egov.nutzenportfolio.service.nutzenkriterium.NutzenkriteriumService;\nimport ch.bfh.egov.nutzenportfolio.service.projektgruppe.ProjektgruppeService;\nimport ch.bfh.egov.nutzenportfolio.service.strategischeziele.StrategischeZieleService;\nimport ch.bfh.egov.nutzenportfolio.tag.CustomizingNavigation;\nimport ch.bfh.egov.nutzenportfolio.tos.Customizing;\nimport ch.bfh.egov.nutzenportfolio.tos.Kategorie;\nimport ch.bfh.egov.nutzenportfolio.tos.Nutzenkriterium;\nimport ch.bfh.egov.nutzenportfolio.tos.StrategischesZiel;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link CustomizingDaoService}.\n* It contains ten unit test cases for the {@link CustomizingDaoService#insert(Customizing)} method.\n*/\nclass CustomizingDaoServiceTest0 {"
	},
	{
		"original_code": "// CustomizingDaoService.java\n/**\r\n * Nutzenportfolio\r\n * Copyright (C) 2006 Kompetenzzentrum E-Business, Simon Bergamin\r\n *\r\n * This program is free software; you can redistribute it and/or\r\n * modify it under the terms of the GNU General Public License\r\n * as published by the Free Software Foundation; either version 2\r\n * of the License, or (at your option) any later version.\r\n *\r\n * This program is distributed in the hope that it will be useful,\r\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n * GNU General Public License for more details.\r\n *\r\n * You should have received a copy of the GNU General Public License\r\n * along with this program; if not, write to the Free Software\r\n * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\r\n */\r\npackage ch.bfh.egov.nutzenportfolio.service.customizing;\r\n\r\nimport java.util.List;\r\nimport javax.servlet.http.HttpServletRequest;\r\nimport javax.servlet.http.HttpSession;\r\nimport org.apache.commons.logging.Log;\r\nimport org.apache.commons.logging.LogFactory;\r\nimport org.apache.struts.action.DynaActionForm;\r\nimport ch.bfh.egov.nutzenportfolio.Constants;\r\nimport ch.bfh.egov.nutzenportfolio.persistence.customizing.CustomizingDao;\r\nimport ch.bfh.egov.nutzenportfolio.service.auswahlfeld.AuswahlfeldService;\r\nimport ch.bfh.egov.nutzenportfolio.service.common.CommonService;\r\nimport ch.bfh.egov.nutzenportfolio.service.detailziele.DetailzieleService;\r\nimport ch.bfh.egov.nutzenportfolio.service.fragebogen.NaOpNuService;\r\nimport ch.bfh.egov.nutzenportfolio.service.fragebogen.ProjektattraktivitaetService;\r\nimport ch.bfh.egov.nutzenportfolio.service.kategorie.KategorieService;\r\nimport ch.bfh.egov.nutzenportfolio.service.nutzenkriterium.NutzenkriteriumService;\r\nimport ch.bfh.egov.nutzenportfolio.service.projektgruppe.ProjektgruppeService;\r\nimport ch.bfh.egov.nutzenportfolio.service.strategischeziele.StrategischeZieleService;\r\nimport ch.bfh.egov.nutzenportfolio.tag.CustomizingNavigation;\r\nimport ch.bfh.egov.nutzenportfolio.tos.Customizing;\r\nimport ch.bfh.egov.nutzenportfolio.tos.Kategorie;\r\nimport ch.bfh.egov.nutzenportfolio.tos.Nutzenkriterium;\r\nimport ch.bfh.egov.nutzenportfolio.tos.StrategischesZiel;\r\n\r\n/**\r\n * Implementierende Service-Klasse fï¿½r Customizings.\r\n *\r\n * @author Kompetenzzentrum E-Business, Simon Bergamin\r\n */\r\npublic class CustomizingDaoService implements CustomizingService {\r\n\r\n    private CustomizingDao dao;\r\n\r\n    private CommonService cService;\r\n\r\n    private StrategischeZieleService szService;\r\n\r\n    private DetailzieleService dzService;\r\n\r\n    private AuswahlfeldService afService;\r\n\r\n    private KategorieService kService;\r\n\r\n    private NutzenkriteriumService nService;\r\n\r\n    private NaOpNuService naOpNuService;\r\n\r\n    private ProjektattraktivitaetService paService;\r\n\r\n    private ProjektgruppeService pgService;\r\n\r\n    private Log logger = LogFactory.getLog(this.getClass());\r\n\r\n    /**\r\n     * Konstruktor. ï¿½bergabe des DataAcessObject-Interfaces fï¿½r Customizings.\r\n     *\r\n     * @param dao                               Customizing DataAcessObject-Interface\r\n     */\r\n    public CustomizingDaoService(CustomizingDao dao) {\r\n        this.dao = dao;\r\n    }\r\n\r\n    /**\r\n     * @see ch.bfh.egov.nutzenportfolio.persistence.customizing.CustomizingIbatisDao#getById(Customizing)\r\n     */\r\n    public Customizing getById(Customizing c) {\r\n        return dao.getById(c);\r\n    }\r\n\r\n    /**\r\n     * @see ch.bfh.egov.nutzenportfolio.persistence.customizing.CustomizingIbatisDao#getByName(Customizing)\r\n     */\r\n    public Customizing getByName(Customizing c) {\r\n        return dao.getByName(c);\r\n    }\r\n\r\n    /**\r\n     * @see ch.bfh.egov.nutzenportfolio.persistence.customizing.CustomizingIbatisDao#getByPaUID(Long)\r\n     */\r\n    public Customizing getByPaUID(Long paUID) {\r\n        return dao.getByPaUID(paUID);\r\n    }\r\n\r\n    /**\r\n     * @see ch.bfh.egov.nutzenportfolio.persistence.customizing.CustomizingIbatisDao#getByNaOpNuUID(Long)\r\n     */\r\n    public Customizing getByNaOpNuUID(Long naOpNuUID) {\r\n        return dao.getByNaOpNuUID(naOpNuUID);\r\n    }\r\n\r\n    /**\r\n     * @see ch.bfh.egov.nutzenportfolio.persistence.customizing.CustomizingIbatisDao#getAll(Integer)\r\n     */\r\n    public List getAll(Integer mandantId) {\r\n        return dao.getAll(mandantId);\r\n    }\r\n\r\n    /**\r\n     * @see ch.bfh.egov.nutzenportfolio.persistence.customizing.CustomizingIbatisDao#insert(Customizing)\r\n     */\r\n    public Integer insert(Customizing c) {\r\n        Integer id = dao.insert(c);\r\n        logger.debug(\"id: \" + id);\r\n        return id;\r\n    }\r\n\r\n    /**\r\n     * @see ch.bfh.egov.nutzenportfolio.persistence.customizing.CustomizingIbatisDao#update(Customizing)\r\n     */\r\n    public void update(Customizing c) {\r\n        dao.update(c);\r\n    }\r\n\r\n    /**\r\n     * Initialisierung dieses Service-Objekts durch ï¿½bergabe anderer,\r\n     * benï¿½tigter Service-Objekte.\r\n     *\r\n     * @param cService                   Common Service Objekt\r\n     * @param szService                  Strategische Ziele Service Objekt\r\n     * @param dzService                  Customizing Service Objekt\r\n     * @param afService                  Auswahlfeld Service Objekt\r\n     * @param kService                   Kategorie Service Objekt\r\n     * @param nService                   Nutzenkriterium Service Objekt\r\n     * @param naOpNuService              Nutzenattraktivitï¿½t / Operativer Nutzen\r\n     *                                   Service Objekt\r\n     * @param paService                  Projektattraktivitaet Service Objekt\r\n     * @param pgService                  Projektgruppe Service Objekt\r\n     */\r\n    public void init(CommonService cService, StrategischeZieleService szService, DetailzieleService dzService, AuswahlfeldService afService, KategorieService kService, NutzenkriteriumService nService, NaOpNuService naOpNuService, ProjektattraktivitaetService paService, ProjektgruppeService pgService) {\r\n        this.cService = cService;\r\n        this.szService = szService;\r\n        this.dzService = dzService;\r\n        this.afService = afService;\r\n        this.kService = kService;\r\n        this.nService = nService;\r\n        this.naOpNuService = naOpNuService;\r\n        this.paService = paService;\r\n        this.pgService = pgService;\r\n    }\r\n\r\n    /**\r\n     * Lï¿½scht ein Customizing inklusive aller Verknï¿½pfungen.\r\n     *\r\n     * @param request                   der HttpServletRequest\r\n     * @param c                         das zu lï¿½schende Customizing\r\n     */\r\n    public void cascadeDelete(HttpServletRequest request, Customizing c) {\r\n        Integer customizingId = c.getCustomizingId();\r\n        Integer naId = cService.getNutzenattraktivitaetIdByCustomizingId(customizingId);\r\n        Integer opNuId = cService.getOperativerNutzenIdByCustomizingId(customizingId);\r\n        Integer paId = cService.getProjektattraktivitaetIdByCustomizingId(customizingId);\r\n        // Projektattraktivitï¿½t Verknï¿½pfungen lï¿½schen\r\n        dzService.deleteAssignments(paId);\r\n        afService.deletePaAssignmentsById(paId);\r\n        // Resultate Projektattraktivitï¿½t lï¿½schen\r\n        paService.deleteAssignments(customizingId);\r\n        // Nutzenattraktivitï¿½t Verknï¿½pfungen lï¿½schen\r\n        kService.deleteAssignments(naId);\r\n        nService.deleteAssignments(naId);\r\n        afService.deleteNaOpNuAssignmentsById(naId);\r\n        // Operativer Nutzen Verknï¿½pfungen lï¿½schen\r\n        kService.deleteAssignments(opNuId);\r\n        nService.deleteAssignments(opNuId);\r\n        afService.deleteNaOpNuAssignmentsById(opNuId);\r\n        // Resultate Nutzenattraktivitï¿½t & Operativer Nutzen lï¿½schen\r\n        naOpNuService.deleteAssignments(customizingId);\r\n        // Projektgruppe Verknï¿½pfung lï¿½schen\r\n        pgService.unsetCustomizingId(customizingId);\r\n        // Projektattraktivitï¿½t lï¿½schen\r\n        cService.deleteProjektattraktivitaet(paId);\r\n        // Nutzenattraktivitï¿½t & Operativer Nutzen lï¿½schen\r\n        cService.deleteNutzenattraktivitaetOperativerNutzen(naId);\r\n        cService.deleteNutzenattraktivitaetOperativerNutzen(opNuId);\r\n        // Customizing lï¿½schen\r\n        dao.delete(c);\r\n    }\r\n\r\n    /**\r\n     * Kopiert ein Customizing inklusive aller Verknï¿½pfungen.\r\n     *\r\n     * @param request                   der HttpServletRequest\r\n     * @param form                      das Formular mit der zu kopierenden Customizing Id\r\n     */\r\n    public void copy(HttpServletRequest request, DynaActionForm form) {\r\n        Integer mandantId = (Integer) request.getSession().getAttribute(Constants.MANDANT_ID);\r\n        Integer customizingId = (Integer) form.get(Constants.CUSTOMIZING_ID);\r\n        logger.debug(\"customizingId\" + customizingId);\r\n        if (customizingId == null) {\r\n            return;\r\n        }\r\n        // Customizing holen\r\n        Customizing c = new Customizing();\r\n        c.setCustomizingId(customizingId);\r\n        c.setMandantId(mandantId);\r\n        c = dao.getById(c);\r\n        // Customizing kopieren\r\n        String name = c.getName();\r\n        c.setName(name + \" (1)\");\r\n        Integer newCustomizingId = dao.insert(c);\r\n        // Projektattraktivitï¿½t, Nutzenattraktivitï¿½t und Operativer Nutzen kopieren\r\n        cService.insertCustomizingParts(newCustomizingId);\r\n        // Ids holen\r\n        Integer paId = cService.getProjektattraktivitaetIdByCustomizingId(customizingId);\r\n        Integer[] naOpNuId = new Integer[2];\r\n        naOpNuId[0] = cService.getNutzenattraktivitaetIdByCustomizingId(customizingId);\r\n        naOpNuId[1] = cService.getOperativerNutzenIdByCustomizingId(customizingId);\r\n        // Neue Ids holen\r\n        Integer newPaId = cService.getProjektattraktivitaetIdByCustomizingId(newCustomizingId);\r\n        Integer[] newNaOpNuId = new Integer[2];\r\n        newNaOpNuId[0] = cService.getNutzenattraktivitaetIdByCustomizingId(newCustomizingId);\r\n        newNaOpNuId[1] = cService.getOperativerNutzenIdByCustomizingId(newCustomizingId);\r\n        // Strategische Ziele\r\n        szService.copy(mandantId, customizingId, newPaId);\r\n        // Detailziele\r\n        dzService.copy(mandantId, paId, newPaId, true);\r\n        dzService.copy(mandantId, paId, newPaId, false);\r\n        // Auswahlfelder\r\n        afService.copy(paId, newPaId, null, null, Constants.EINTRITTSWAHRSCHEINLICHKEIT);\r\n        afService.copy(paId, newPaId, null, null, Constants.EINTRITTSZEITPUNKT);\r\n        afService.copy(null, null, naOpNuId[0], newNaOpNuId[0], Constants.ABSTUFUNG);\r\n        afService.copy(null, null, naOpNuId[0], newNaOpNuId[0], Constants.GEWICHTUNG);\r\n        afService.copy(null, null, naOpNuId[1], newNaOpNuId[1], Constants.ABSTUFUNG);\r\n        afService.copy(null, null, naOpNuId[1], newNaOpNuId[1], Constants.GEWICHTUNG);\r\n        // Kategorien\r\n        kService.copy(mandantId, naOpNuId[0], newNaOpNuId[0]);\r\n        kService.copy(mandantId, naOpNuId[1], newNaOpNuId[1]);\r\n        // Nutzenkriterien\r\n        nService.copy(mandantId, naOpNuId[0], newNaOpNuId[0]);\r\n        nService.copy(mandantId, naOpNuId[1], newNaOpNuId[1]);\r\n    }\r\n\r\n    /**\r\n     * ï¿½ndert den Status eines Customizing auf inaktiv respektive aktiv.\r\n     *\r\n     * @param request                   der HttpServletRequest\r\n     * @param form                      das Formular mit der zu kopierenden Customizing Id\r\n     */\r\n    public void changeStatus(HttpServletRequest request, DynaActionForm form) {\r\n        Integer mandantId = (Integer) request.getSession().getAttribute(Constants.MANDANT_ID);\r\n        Integer customizingId = (Integer) form.get(Constants.CUSTOMIZING_ID);\r\n        logger.debug(\"customizingId\" + customizingId);\r\n        if (customizingId == null) {\r\n            return;\r\n        }\r\n        // Customizing holen\r\n        Customizing c = new Customizing();\r\n        c.setCustomizingId(customizingId);\r\n        c.setMandantId(mandantId);\r\n        c = dao.getById(c);\r\n        // Status ï¿½ndern und update\r\n        c.setStatus(!c.getStatus());\r\n        dao.update(c);\r\n    }\r\n\r\n    /**\r\n     * ï¿½berprï¿½ft, ob ein Customizing komplett ist.\r\n     *\r\n     * @return                          true bei komplettem Customizing, sonst false\r\n     */\r\n    public boolean complete(HttpServletRequest request) {\r\n        CustomizingNavigation nav = new CustomizingNavigation();\r\n        nav.setName(Constants.CUSTOMIZING);\r\n        nav.setRequest(request);\r\n        if (nav.checkState()) {\r\n            request.setAttribute(Constants.INCOMPLETE, false);\r\n            return true;\r\n        }\r\n        request.setAttribute(Constants.INCOMPLETE, true);\r\n        return false;\r\n    }\r\n\r\n    /**\r\n     * Setzt den Status jedes Customizing Schritts in die Session.\r\n     * Beispiel: Sobald mindestens 1 Strategisches Ziel fï¿½r das momentane\r\n     * Customizing angewï¿½hlt ist, wird in die Session unter dem Schlï¿½ssel\r\n     * \"strategischeZiele\" der Wert \"true\" gesetzt. Dies wird spï¿½ter zur\r\n     * Status-Prï¿½fung bei der Navigation verwendet (Schritt; erledigt=grï¿½n,\r\n     * wird bearbeitet=gelb, nicht erledigt=rot). Die Methode unsetStatus\r\n     * dient zum aufheben der gespeicherten Session Variabeln.\r\n     *\r\n     * @param request         der HttpServletRequest zum erhalten der Session\r\n     */\r\n    public void setStatus(HttpServletRequest request) {\r\n        HttpSession session = request.getSession();\r\n        Integer mandantId = (Integer) session.getAttribute(Constants.MANDANT_ID);\r\n        Integer customizingId = (Integer) session.getAttribute(Constants.CUSTOMIZING_ID);\r\n        // Projektattraktivitï¿½t\r\n        Integer paId = cService.getProjektattraktivitaetIdByCustomizingId(customizingId);\r\n        logger.debug(\"paId=\" + paId);\r\n        // Strategische Ziele\r\n        List<StrategischesZiel> szs = szService.setStatus(request, mandantId, customizingId);\r\n        // Detailziele\r\n        boolean dzOk = dzService.setStatus(request, szs, mandantId, paId);\r\n        // Realisierbarkeit\r\n        boolean realisierbarkeitOk = afService.setRealisierbarkeitStatus(request, paId);\r\n        if (szs != null && dzOk && realisierbarkeitOk) {\r\n            session.setAttribute(Constants.PROJEKTATTRAKTIVITAET, true);\r\n        }\r\n        // Nutzenattraktivitï¿½t\r\n        Integer[] naOpNuIds = new Integer[2];\r\n        naOpNuIds[0] = cService.getNutzenattraktivitaetIdByCustomizingId(customizingId);\r\n        logger.debug(\"naId=\" + naOpNuIds[0]);\r\n        // Operativer Nutzen\r\n        naOpNuIds[1] = cService.getOperativerNutzenIdByCustomizingId(customizingId);\r\n        logger.debug(\"opNuId=\" + naOpNuIds[1]);\r\n        boolean isNa = true;\r\n        for (int i = 0; i < naOpNuIds.length; i++) {\r\n            Integer naOpNuId = naOpNuIds[i];\r\n            if (i == 1) {\r\n                isNa = false;\r\n            }\r\n            // Kategorien\r\n            List<Kategorie> kategorien = kService.setStatus(request, mandantId, naOpNuId, isNa);\r\n            if (kategorien != null) {\r\n                // Nutzenkriterien\r\n                List<Nutzenkriterium> kriterien = nService.setStatus(request, kategorien, mandantId, naOpNuId, isNa);\r\n                logger.debug(\"kriterienOk=\" + (kriterien != null));\r\n                // Stufenbeschriebe\r\n                boolean stufenOk = afService.setStufenStatus(request, naOpNuId, isNa);\r\n                logger.debug(\"stufenOk=\" + stufenOk);\r\n                // Gewichtung\r\n                boolean gewichtungOk = afService.setGewichtungStatus(request, kriterien, naOpNuId, isNa);\r\n                logger.debug(\"gewichtungOk=\" + gewichtungOk);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Dient zum aufheben der gespeicherten Session Variabeln mit den\r\n     * Status-Flags.\r\n     *\r\n     * @param request         der HttpServletRequest zum erhalten der Session\r\n     */\r\n    public void unsetStatus(HttpServletRequest request) {\r\n        HttpSession session = request.getSession();\r\n        session.removeAttribute(Constants.STRATEGISCHE_ZIELE);\r\n        session.removeAttribute(Constants.DETAILZIELE_Q);\r\n        session.removeAttribute(Constants.DETAILZIELE_NQ);\r\n        session.removeAttribute(Constants.REALISIERBARKEIT);\r\n        session.removeAttribute(Constants.KATEGORIEN_NA);\r\n        session.removeAttribute(Constants.KATEGORIEN_OP_NU);\r\n        session.removeAttribute(Constants.NUTZENKRITERIEN_NA);\r\n        session.removeAttribute(Constants.FRAGEN_NA);\r\n        session.removeAttribute(Constants.NUTZENKRITERIEN_OP_NU);\r\n        session.removeAttribute(Constants.FRAGEN_OP_NU);\r\n        session.removeAttribute(Constants.ABSTUFUNGEN_NA);\r\n        session.removeAttribute(Constants.ABSTUFUNGEN_OP_NU);\r\n        session.removeAttribute(Constants.GEWICHTUNGEN_NA);\r\n        session.removeAttribute(Constants.GEWICHTUNGEN_OP_NU);\r\n    }\r\n}\r\n",
		"id": "EvoSuiteBenchmark/46_nutzenportfolio/src/main/java/ch/bfh/egov/nutzenportfolio/service/customizing/CustomizingDaoServiceTest1.java",
		"test_prompt": "// CustomizingDaoServiceTest1.java\npackage ch.bfh.egov.nutzenportfolio.service.customizing;\n\nimport java.util.List;\nimport javax.servlet.http.HttpServletRequest;\nimport javax.servlet.http.HttpSession;\nimport org.apache.commons.logging.Log;\nimport org.apache.commons.logging.LogFactory;\nimport org.apache.struts.action.DynaActionForm;\nimport ch.bfh.egov.nutzenportfolio.Constants;\nimport ch.bfh.egov.nutzenportfolio.persistence.customizing.CustomizingDao;\nimport ch.bfh.egov.nutzenportfolio.service.auswahlfeld.AuswahlfeldService;\nimport ch.bfh.egov.nutzenportfolio.service.common.CommonService;\nimport ch.bfh.egov.nutzenportfolio.service.detailziele.DetailzieleService;\nimport ch.bfh.egov.nutzenportfolio.service.fragebogen.NaOpNuService;\nimport ch.bfh.egov.nutzenportfolio.service.fragebogen.ProjektattraktivitaetService;\nimport ch.bfh.egov.nutzenportfolio.service.kategorie.KategorieService;\nimport ch.bfh.egov.nutzenportfolio.service.nutzenkriterium.NutzenkriteriumService;\nimport ch.bfh.egov.nutzenportfolio.service.projektgruppe.ProjektgruppeService;\nimport ch.bfh.egov.nutzenportfolio.service.strategischeziele.StrategischeZieleService;\nimport ch.bfh.egov.nutzenportfolio.tag.CustomizingNavigation;\nimport ch.bfh.egov.nutzenportfolio.tos.Customizing;\nimport ch.bfh.egov.nutzenportfolio.tos.Kategorie;\nimport ch.bfh.egov.nutzenportfolio.tos.Nutzenkriterium;\nimport ch.bfh.egov.nutzenportfolio.tos.StrategischesZiel;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link CustomizingDaoService}.\n* It contains ten unit test cases for the {@link CustomizingDaoService#complete(HttpServletRequest)} method.\n*/\nclass CustomizingDaoServiceTest1 {"
	},
	{
		"original_code": "// ProjektDaoService.java\n/**\r\n * Nutzenportfolio\r\n * Copyright (C) 2006 Kompetenzzentrum E-Business, Simon Bergamin\r\n *\r\n * This program is free software; you can redistribute it and/or\r\n * modify it under the terms of the GNU General Public License\r\n * as published by the Free Software Foundation; either version 2\r\n * of the License, or (at your option) any later version.\r\n *\r\n * This program is distributed in the hope that it will be useful,\r\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n * GNU General Public License for more details.\r\n *\r\n * You should have received a copy of the GNU General Public License\r\n * along with this program; if not, write to the Free Software\r\n * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\r\n */\r\npackage ch.bfh.egov.nutzenportfolio.service.projekt;\r\n\r\nimport java.util.ArrayList;\r\nimport java.util.Collection;\r\nimport java.util.LinkedHashMap;\r\nimport java.util.List;\r\nimport java.util.ListIterator;\r\nimport java.util.Random;\r\nimport javax.servlet.http.HttpServletRequest;\r\nimport org.apache.commons.logging.Log;\r\nimport org.apache.commons.logging.LogFactory;\r\nimport org.apache.struts.action.ActionMessage;\r\nimport org.apache.struts.action.ActionMessages;\r\nimport org.apache.struts.action.DynaActionForm;\r\nimport ch.bfh.egov.nutzenportfolio.Constants;\r\nimport ch.bfh.egov.nutzenportfolio.persistence.fragebogen.NaOpNuDao;\r\nimport ch.bfh.egov.nutzenportfolio.persistence.projekt.ProjektDao;\r\nimport ch.bfh.egov.nutzenportfolio.service.projektgruppe.ProjektgruppeService;\r\nimport ch.bfh.egov.nutzenportfolio.tos.NaOpNu;\r\nimport ch.bfh.egov.nutzenportfolio.tos.Projekt;\r\nimport ch.bfh.egov.nutzenportfolio.tos.Projektgruppe;\r\nimport ch.bfh.egov.nutzenportfolio.tos.Resultat;\r\n\r\n/**\r\n * Implementierende Service-Klasse fï¿½r Projekte.\r\n *\r\n * @author Kompetenzzentrum E-Business, Simon Bergamin\r\n */\r\npublic class ProjektDaoService implements ProjektService {\r\n\r\n    private ProjektDao dao;\r\n\r\n    private ProjektgruppeService projektgruppeService;\r\n\r\n    private NaOpNuDao naOpNuDao;\r\n\r\n    private Log logger = LogFactory.getLog(this.getClass());\r\n\r\n    /**\r\n     * Konstruktor. ï¿½bergabe des DataAcessObject-Interfaces fï¿½r Projekte sowie\r\n     * anderer, benï¿½tigter Service-Objekte.\r\n     *\r\n     * @param dao                               Projekt DataAcessObject-Interface\r\n     * @param projektgruppeService              Projektgruppe Service-Interface\r\n     * @param naOpNuDao                         Nutzenattraktivitï¿½t und Operativer\r\n     *                                          NutzenProjekt Service-Interface\r\n     */\r\n    public ProjektDaoService(ProjektDao dao, ProjektgruppeService projektgruppeService, NaOpNuDao naOpNuDao) {\r\n        this.dao = dao;\r\n        this.projektgruppeService = projektgruppeService;\r\n        this.naOpNuDao = naOpNuDao;\r\n    }\r\n\r\n    /**\r\n     * @see ch.bfh.egov.nutzenportfolio.persistence.projekt.ProjektDao#getById(Projekt)\r\n     */\r\n    public Projekt getById(Projekt p) {\r\n        return dao.getById(p);\r\n    }\r\n\r\n    /**\r\n     * @see ch.bfh.egov.nutzenportfolio.persistence.projekt.ProjektDao#getByUID(Long)\r\n     */\r\n    public Projekt getByUID(Long projektUID) {\r\n        return dao.getByUID(projektUID);\r\n    }\r\n\r\n    /**\r\n     * Setzt alle vorhandenen Projekte in den request.\r\n     *\r\n     * @param request             der HttpServletRequest\r\n     */\r\n    public void populate(HttpServletRequest request) {\r\n        // Filter\r\n        Integer filter = null;\r\n        try {\r\n            filter = new Integer(request.getParameter(\"filtergruppe\"));\r\n        } catch (NumberFormatException e) {\r\n        }\r\n        // Projekte holen\r\n        Projekt p = createProjekt(request);\r\n        List projekte;\r\n        if (filter != null) {\r\n            Projektgruppe pg = new Projektgruppe();\r\n            pg.setMandantId(p.getMandantId());\r\n            pg.setProjektgruppeId(filter);\r\n            projekte = dao.getGroup(pg);\r\n        } else\r\n            projekte = dao.getAll(p.getMandantId());\r\n        // Die eindeutigen IDs setzen\r\n        ListIterator it = projekte.listIterator();\r\n        LinkedHashMap<Integer, Projekt> map = new LinkedHashMap<Integer, Projekt>();\r\n        NaOpNu naOpNu = new NaOpNu();\r\n        while (it.hasNext()) {\r\n            Projekt projekt = (Projekt) it.next();\r\n            Integer projektId = projekt.getProjektId();\r\n            naOpNu.setProjektId(projektId);\r\n            Long naOpNuUID = projekt.getNaOpNuUID();\r\n            Boolean opNu = projekt.getOperativerNutzen();\r\n            logger.debug(\"projektId=\" + projektId);\r\n            logger.debug(\"naOpNuUID=\" + naOpNuUID);\r\n            // Damit Projekte nicht doppelt angezeigt werden,\r\n            // werden sie durch eine LinkedHashMap gefiltert. Der Grund dafï¿½r\r\n            // liegt darin, dass das SQL Query getAll pro Projekt mehrere\r\n            // Zeilen fï¿½r die UID des Operativen Nutzens und der Nutzenattraktivitï¿½t\r\n            // ausgibt.\r\n            if (map.containsKey(projektId)) {\r\n                logger.debug(\"Projekt in der LinkedHashMap gefunden\");\r\n                projekt = map.get(projektId);\r\n            }\r\n            // UID ï¿½berprï¿½fen\r\n            if (opNu == null) {\r\n                logger.debug(\"Keine UID gesetzt\");\r\n            } else // UID Operativer Nutzen\r\n            if (opNu) {\r\n                logger.debug(\"Gesetzte UID: Operativer Nutzen\");\r\n                projekt.setOpNuUID(naOpNuUID);\r\n                // Anzahl Resultate holen\r\n                naOpNu.setNutzenattraktivitaet(false);\r\n                naOpNu.setOperativerNutzen(true);\r\n                NaOpNu opNuObj = naOpNuDao.getNaOpNuResultat(naOpNu);\r\n                if (opNuObj == null) {\r\n                    projekt.setAnzahlOpNuResultate(0);\r\n                } else {\r\n                    projekt.setAnzahlOpNuResultate(opNuObj.getAnzahl());\r\n                }\r\n            } else // UID Nutzenattraktivitaet\r\n            {\r\n                logger.debug(\"Gesetzte UID: Nutzenattraktivitaet\");\r\n                projekt.setNaUID(naOpNuUID);\r\n                // Anzahl Resultate holen\r\n                naOpNu.setNutzenattraktivitaet(true);\r\n                naOpNu.setOperativerNutzen(false);\r\n                NaOpNu na = naOpNuDao.getNaOpNuResultat(naOpNu);\r\n                if (na == null) {\r\n                    projekt.setAnzahlNaResultate(0);\r\n                } else {\r\n                    projekt.setAnzahlNaResultate(na.getAnzahl());\r\n                }\r\n            }\r\n            // Resultate Projektattraktivitï¿½t holen\r\n            NaOpNu pa = naOpNuDao.getPaResultat(naOpNu);\r\n            if (pa == null) {\r\n                projekt.setAnzahlPaResultate(0);\r\n            } else {\r\n                projekt.setAnzahlPaResultate(pa.getAnzahl());\r\n            }\r\n            map.put(projektId, projekt);\r\n        }\r\n        // Projekte in den Request stellen\r\n        Collection proj = map.values();\r\n        request.setAttribute(Constants.PROJEKTE, proj);\r\n        request.setAttribute(\"filtergruppe\", filter);\r\n    }\r\n\r\n    /**\r\n     * Fï¿½llt das Formular mit allen benï¿½tigten Daten ab.\r\n     *\r\n     * @param request             der HttpServletRequest\r\n     * @param form                das DynaActionForm\r\n     */\r\n    public void prepare(HttpServletRequest request, DynaActionForm form) {\r\n        Projekt p = get(request, form);\r\n        // update?\r\n        if (isUpdate(p)) {\r\n            Integer id = (Integer) form.get(Constants.PROJEKT_ID);\r\n            p.setProjektId(id);\r\n            // Projekt holen und Daten setzen\r\n            p = dao.getById(p);\r\n            form.set(\"name\", p.getName());\r\n            form.set(\"beschreibung\", p.getBeschreibung());\r\n            form.set(\"projektgruppeId\", p.getProjektgruppeId());\r\n        }\r\n        // Projektgruppen in den Reqeust setzen\r\n        List pg = projektgruppeService.getAll(p.getMandantId());\r\n        logger.debug(pg.size() + \" Projektgruppen in der Liste\");\r\n        request.getSession().setAttribute(\"projektgruppeMap\", pg);\r\n    }\r\n\r\n    /**\r\n     * Erstellt ein Projekt-Objekt aus den Formulardaten.\r\n     *\r\n     * @param request             der HttpServletRequest\r\n     * @param form                das DynaActionForm\r\n     * @return                    ein neues Projekt\r\n     */\r\n    public Projekt get(HttpServletRequest request, DynaActionForm form) {\r\n        //Formulardaten holen\r\n        Integer id = (Integer) form.get(Constants.PROJEKT_ID);\r\n        Integer projektgruppeId = (Integer) form.get(Constants.PROJEKTGRUPPE_ID);\r\n        String name = (String) form.get(\"name\");\r\n        String beschreibung = (String) form.get(\"beschreibung\");\r\n        Long projektUID = (Long) form.get(\"projektUID\");\r\n        // Objekt erzeugen\r\n        Projekt p = createProjekt(request);\r\n        p.setProjektId(id);\r\n        p.setProjektgruppeId(projektgruppeId);\r\n        p.setName(name);\r\n        p.setBeschreibung(beschreibung);\r\n        p.setProjektUID(projektUID);\r\n        return p;\r\n    }\r\n\r\n    /**\r\n     * Erstellt ein Projekt-Objekt anhand der Id aus dem request.\r\n     *\r\n     * @param request             der HttpServletRequest\r\n     * @return                    ein neues Projekt\r\n     */\r\n    public Projekt get(HttpServletRequest request) {\r\n        // Id des Projekts aus dem Request holen\r\n        String pId = request.getParameter(Constants.PROJEKT_ID);\r\n        Integer id = null;\r\n        try {\r\n            id = new Integer(pId);\r\n        } catch (Exception ex) {\r\n            logger.warn(\"Fehlende projektId!\");\r\n            return null;\r\n        }\r\n        // Projekt ï¿½berprï¿½fen\r\n        Projekt p = createProjekt(request);\r\n        p.setProjektId(id);\r\n        p = dao.getById(p);\r\n        if (p == null) {\r\n            logger.warn(\"Projekt mit der id \" + id + \" wurde nicht gefunden.\");\r\n            populate(request);\r\n        }\r\n        return p;\r\n    }\r\n\r\n    /**\r\n     * Speichert das angegebene Projekt ab.\r\n     *\r\n     * @param request             der HttpServletRequest\r\n     * @param p                   das zu speichernde Projekt\r\n     */\r\n    public void save(HttpServletRequest request, Projekt p) {\r\n        // update?\r\n        if (isUpdate(p)) {\r\n            dao.update(p);\r\n        } else // insert\r\n        {\r\n            // Einzigartige ID vergeben\r\n            Random rnd = new Random();\r\n            long projektUID = ((System.currentTimeMillis() >>> 16) << 16) + rnd.nextLong();\r\n            logger.debug(\"projektUID=\" + projektUID);\r\n            p.setProjektUID(projektUID);\r\n            dao.insert(p);\r\n        }\r\n        populate(request);\r\n    }\r\n\r\n    /**\r\n     * Lï¿½scht ein Projekt.\r\n     *\r\n     * @param request             der HttpServletRequest\r\n     * @return                    true bei Erfolg, sonst false\r\n     */\r\n    public boolean delete(HttpServletRequest request) {\r\n        // Projekt aus dem request holen\r\n        Projekt p = get(request);\r\n        if (p == null) {\r\n            return false;\r\n        }\r\n        // Projekt lï¿½schen\r\n        dao.delete(p);\r\n        populate(request);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Prï¿½ft, ob der Name des angegebenen Projekts bereits vergeben ist\r\n     *\r\n     * @param p                   das zu ï¿½berprï¿½fende Projekt\r\n     * @return                    true, wenn der Name der Projekt\r\n     *                            bereits vergeben ist, sonst false\r\n     */\r\n    public boolean exists(Projekt p) {\r\n        Integer id = p.getProjektId();\r\n        // update?\r\n        if (id != null && id != 0) {\r\n            Projekt pCurrent = dao.getById(p);\r\n            // Name geï¿½ndert, ï¿½berprï¿½fen\r\n            if (!pCurrent.getName().equals(p.getName())) {\r\n                return dao.getByName(p) != null;\r\n            }\r\n        } else // insert\r\n        {\r\n            return dao.getByName(p) != null;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    /**\r\n     * Generiert ein Projet Objekt mit dem aktuellen Mandanten.\r\n     *\r\n     * @param request               der HttpServletRequest\r\n     * @return                      ein Projekt mit gesetzem Mandant\r\n     */\r\n    public Projekt createProjekt(HttpServletRequest request) {\r\n        Projekt p = new Projekt();\r\n        p.setMandantId((Integer) request.getSession().getAttribute(Constants.MANDANT_ID));\r\n        return p;\r\n    }\r\n\r\n    /**\r\n     * Nimmt die Auswertung von Resultaten aus den Fragebï¿½gen vor.\r\n     *\r\n     * @param request               der HttpServletRequest\r\n     * @param form                  das DynaActionForm\r\n     * @param errors                ActionMessages Objekt fï¿½r Fehlerausgaben\r\n     * @return                      true bei Erfolg, sonst false\r\n     */\r\n    public boolean auswertung(HttpServletRequest request, DynaActionForm form, ActionMessages errors) {\r\n        // Formulardaten holen\r\n        Integer[] ids = (Integer[]) form.get(\"projektIds\");\r\n        Integer pgId = (Integer) form.get(Constants.PROJEKTGRUPPE_ID);\r\n        request.setAttribute(Constants.PROJEKTGRUPPE_ID, pgId);\r\n        if (ids == null || ids.length == 0) {\r\n            logger.info(\"Keine Projekte gewï¿½hlt\");\r\n            // Fehler bei keiner Auswahl\r\n            errors.add(ActionMessages.GLOBAL_MESSAGE, new ActionMessage(\"errors.select.one\", \"Projekt\"));\r\n            populate(request);\r\n            return false;\r\n        }\r\n        logger.debug(ids.length + \" Projekte ausgewï¿½hlt\");\r\n        // Resultate aller Projekte holen\r\n        List<Resultat> resultate = new ArrayList<Resultat>();\r\n        for (int i = 0; i < ids.length; i++) {\r\n            NaOpNu naOpNu = new NaOpNu();\r\n            naOpNu.setProjektId(ids[i]);\r\n            // Nutzenattraktivitï¿½t holen\r\n            naOpNu.setNutzenattraktivitaet(true);\r\n            naOpNu.setOperativerNutzen(false);\r\n            NaOpNu na = naOpNuDao.getNaOpNuResultat(naOpNu);\r\n            // Operativer Nutzen holen\r\n            naOpNu.setNutzenattraktivitaet(false);\r\n            naOpNu.setOperativerNutzen(true);\r\n            NaOpNu opNu = naOpNuDao.getNaOpNuResultat(naOpNu);\r\n            // Projektattraktivitï¿½t holen\r\n            NaOpNu pa = naOpNuDao.getPaResultat(naOpNu);\r\n            if (pa != null && na != null) {\r\n                logger.debug(\"paResultat vor Runden: \" + pa.getResultat());\r\n                Double paResultat = Math.rint(pa.getResultat() * 1000) / 1000;\r\n                logger.debug(\"paResultat nach Runden: \" + paResultat);\r\n                logger.debug(\"naResultat vor Runden: \" + na.getResultat());\r\n                Double naResultat = Math.rint(na.getResultat() * 1000) / 1000;\r\n                logger.debug(\"naResultat nach Runden: \" + naResultat);\r\n                Double opNuResultat = null;\r\n                if (opNu != null) {\r\n                    logger.debug(\"opNuResultat vor Runden: \" + opNu.getResultat());\r\n                    opNuResultat = Math.rint(opNu.getResultat() * 1000) / 1000;\r\n                    logger.debug(\"opNuResultat nach Runden: \" + opNuResultat);\r\n                }\r\n                Resultat r = new Resultat();\r\n                r.setPaResultat(paResultat);\r\n                r.setNaResultat(naResultat);\r\n                r.setOpNuResultat(opNuResultat);\r\n                r.setName(na.getName());\r\n                // Textlabel anhand der Resultate setzen\r\n                setAuswertungLabels(r);\r\n                logger.debug(\"Resultat hinzugefï¿½gt\");\r\n                resultate.add(r);\r\n            } else {\r\n                logger.warn(\"Ein Resultat oder Mehrere fehlen\");\r\n            }\r\n        }\r\n        // Resultat fï¿½r grafische Auswertung in Session speichern\r\n        logger.debug(\"Resultate in der Session: \" + resultate.size());\r\n        request.getSession().setAttribute(Constants.RESULTATE, resultate);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * ï¿½ndert einen Status eines Projekts auf inaktiv respektive aktiv.\r\n     *\r\n     * @param request                   der HttpServletRequest\r\n     * @param form                      das Formular mit der Id des Projeks\r\n     */\r\n    public void changeStatus(HttpServletRequest request, DynaActionForm form) {\r\n        Integer mandantId = (Integer) request.getSession().getAttribute(Constants.MANDANT_ID);\r\n        Integer projektId = (Integer) form.get(Constants.PROJEKT_ID);\r\n        String type = (String) form.get(\"type\");\r\n        logger.debug(\"projektId=\" + projektId);\r\n        logger.debug(\"mandantId=\" + mandantId);\r\n        if (projektId == null) {\r\n            return;\r\n        }\r\n        // Projekt holen\r\n        Projekt p = new Projekt();\r\n        p.setProjektId(projektId);\r\n        p.setMandantId(mandantId);\r\n        p = dao.getById(p);\r\n        if (p == null) {\r\n            return;\r\n        }\r\n        // Status ï¿½ndern und update\r\n        if (type.equals(\"pa\")) {\r\n            p.setPaStatus(!p.getPaStatus());\r\n        } else if (type.equals(\"na\")) {\r\n            p.setNaStatus(!p.getNaStatus());\r\n        } else if (type.equals(\"opNu\")) {\r\n            p.setOpNuStatus(!p.getOpNuStatus());\r\n        }\r\n        dao.updateStatus(p);\r\n    }\r\n\r\n    /**\r\n     * Prï¿½ft, ob das angegebene Projekt neu ist, oder ob es sich um\r\n     * ein update handelt.\r\n     *\r\n     * @param p                   das zu ï¿½berprï¿½fende Projekt\r\n     * @return                    true bei update, sonst false\r\n     */\r\n    private boolean isUpdate(Projekt p) {\r\n        Integer id = p.getProjektId();\r\n        if (id == null || id == 0) {\r\n            return false;\r\n        }\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Setzt die entsprechenden Labels anhand der Resultate der Auswertung.\r\n     *\r\n     * @param r                   das zu setzende Resultat\r\n     */\r\n    private void setAuswertungLabels(Resultat r) {\r\n        Double pa = r.getPaResultat();\r\n        Double na = r.getNaResultat();\r\n        Double opNu = r.getOpNuResultat();\r\n        String label = null;\r\n        Double diff = null;\r\n        if (opNu != null)\r\n            diff = Math.abs(opNu - na);\r\n        if (pa >= 0 && pa < 1.5 && na >= 0 && na < 1.5) {\r\n            if (opNu != null) {\r\n                if (opNu >= 0 && opNu < 1.5)\r\n                    label = \"label.objektiv.und.management.und.projektbetroffene.unattraktiv\";\r\n                else if (opNu >= 1.5 && opNu <= 3.0 && diff >= 0.3)\r\n                    label = \"label.objektiv.und.management.unattraktiv.projektbetroffene.attraktiv.diskrepanz.gross\";\r\n                else if (opNu >= 1.5 && opNu <= 3.0 && diff < 0.3)\r\n                    label = \"label.objektiv.und.management.unattraktiv.projektbetroffene.attraktiv.diskrepanz.klein\";\r\n            } else\r\n                label = \"label.objektiv.und.management.unattraktiv\";\r\n        }\r\n        if (pa >= 0 && pa < 1.5 && na >= 1.5 && na <= 3.0) {\r\n            if (opNu != null) {\r\n                if (opNu >= 0 && opNu < 1.5)\r\n                    label = \"label.objektiv.und.projektbetroffene.unattraktiv.management.attraktiv\";\r\n                else if (opNu >= 1.5 && opNu <= 3.0)\r\n                    label = \"label.objektiv.unattraktiv.management.und.projektbetroffene.attraktiv\";\r\n            } else\r\n                label = \"label.objektiv.unattraktiv.management.attraktiv\";\r\n        }\r\n        if (pa >= 1.5 && pa <= 3.0 && na >= 0 && na < 1.5) {\r\n            if (opNu != null) {\r\n                if (opNu >= 0 && opNu < 1.5 && diff >= 0.3)\r\n                    label = \"label.objektiv.attraktiv.management.und.projektbetroffene.unattraktiv.diskrepanz.gross\";\r\n                else if (opNu >= 0 && opNu < 1.5 && diff < 0.3)\r\n                    label = \"label.objektiv.attraktiv.management.und.projektbetroffene.unattraktiv.diskrepanz.klein\";\r\n                else if (opNu >= 1.5 && opNu <= 3.0)\r\n                    label = \"label.objektiv.und.projektbetroffene.attraktiv.management.unattraktiv\";\r\n            } else\r\n                label = \"label.objektiv.attraktiv.management.unattraktiv\";\r\n        }\r\n        if (pa >= 1.5 && pa <= 3.0 && na >= 1.5 && na <= 3.0) {\r\n            if (opNu != null) {\r\n                if (opNu >= 0 && opNu < 1.5 && diff >= 0.3)\r\n                    label = \"label.objektiv.und.management.attraktiv.projektbetroffene.unattraktiv.diskrepanz.gross\";\r\n                else if (opNu >= 0 && opNu < 1.5 && diff < 0.3)\r\n                    label = \"label.objektiv.und.management.attraktiv.projektbetroffene.unattraktiv.diskrepanz.klein\";\r\n                else if (opNu >= 1.5 && opNu <= 3.0)\r\n                    label = \"label.objektiv.und.management.und.projektbetroffene.attraktiv\";\r\n            } else\r\n                label = \"label.objektiv.und.management.attraktiv\";\r\n        }\r\n        logger.debug(\"label=\" + label);\r\n        r.setLabel(label);\r\n    }\r\n}\r\n",
		"id": "EvoSuiteBenchmark/46_nutzenportfolio/src/main/java/ch/bfh/egov/nutzenportfolio/service/projekt/ProjektDaoServiceTest0.java",
		"test_prompt": "// ProjektDaoServiceTest0.java\npackage ch.bfh.egov.nutzenportfolio.service.projekt;\n\nimport java.util.ArrayList;\nimport java.util.Collection;\nimport java.util.LinkedHashMap;\nimport java.util.List;\nimport java.util.ListIterator;\nimport java.util.Random;\nimport javax.servlet.http.HttpServletRequest;\nimport org.apache.commons.logging.Log;\nimport org.apache.commons.logging.LogFactory;\nimport org.apache.struts.action.ActionMessage;\nimport org.apache.struts.action.ActionMessages;\nimport org.apache.struts.action.DynaActionForm;\nimport ch.bfh.egov.nutzenportfolio.Constants;\nimport ch.bfh.egov.nutzenportfolio.persistence.fragebogen.NaOpNuDao;\nimport ch.bfh.egov.nutzenportfolio.persistence.projekt.ProjektDao;\nimport ch.bfh.egov.nutzenportfolio.service.projektgruppe.ProjektgruppeService;\nimport ch.bfh.egov.nutzenportfolio.tos.NaOpNu;\nimport ch.bfh.egov.nutzenportfolio.tos.Projekt;\nimport ch.bfh.egov.nutzenportfolio.tos.Projektgruppe;\nimport ch.bfh.egov.nutzenportfolio.tos.Resultat;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link ProjektDaoService}.\n* It contains ten unit test cases for the {@link ProjektDaoService#delete(HttpServletRequest)} method.\n*/\nclass ProjektDaoServiceTest0 {"
	},
	{
		"original_code": "// ProjektDaoService.java\n/**\r\n * Nutzenportfolio\r\n * Copyright (C) 2006 Kompetenzzentrum E-Business, Simon Bergamin\r\n *\r\n * This program is free software; you can redistribute it and/or\r\n * modify it under the terms of the GNU General Public License\r\n * as published by the Free Software Foundation; either version 2\r\n * of the License, or (at your option) any later version.\r\n *\r\n * This program is distributed in the hope that it will be useful,\r\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n * GNU General Public License for more details.\r\n *\r\n * You should have received a copy of the GNU General Public License\r\n * along with this program; if not, write to the Free Software\r\n * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\r\n */\r\npackage ch.bfh.egov.nutzenportfolio.service.projekt;\r\n\r\nimport java.util.ArrayList;\r\nimport java.util.Collection;\r\nimport java.util.LinkedHashMap;\r\nimport java.util.List;\r\nimport java.util.ListIterator;\r\nimport java.util.Random;\r\nimport javax.servlet.http.HttpServletRequest;\r\nimport org.apache.commons.logging.Log;\r\nimport org.apache.commons.logging.LogFactory;\r\nimport org.apache.struts.action.ActionMessage;\r\nimport org.apache.struts.action.ActionMessages;\r\nimport org.apache.struts.action.DynaActionForm;\r\nimport ch.bfh.egov.nutzenportfolio.Constants;\r\nimport ch.bfh.egov.nutzenportfolio.persistence.fragebogen.NaOpNuDao;\r\nimport ch.bfh.egov.nutzenportfolio.persistence.projekt.ProjektDao;\r\nimport ch.bfh.egov.nutzenportfolio.service.projektgruppe.ProjektgruppeService;\r\nimport ch.bfh.egov.nutzenportfolio.tos.NaOpNu;\r\nimport ch.bfh.egov.nutzenportfolio.tos.Projekt;\r\nimport ch.bfh.egov.nutzenportfolio.tos.Projektgruppe;\r\nimport ch.bfh.egov.nutzenportfolio.tos.Resultat;\r\n\r\n/**\r\n * Implementierende Service-Klasse fï¿½r Projekte.\r\n *\r\n * @author Kompetenzzentrum E-Business, Simon Bergamin\r\n */\r\npublic class ProjektDaoService implements ProjektService {\r\n\r\n    private ProjektDao dao;\r\n\r\n    private ProjektgruppeService projektgruppeService;\r\n\r\n    private NaOpNuDao naOpNuDao;\r\n\r\n    private Log logger = LogFactory.getLog(this.getClass());\r\n\r\n    /**\r\n     * Konstruktor. ï¿½bergabe des DataAcessObject-Interfaces fï¿½r Projekte sowie\r\n     * anderer, benï¿½tigter Service-Objekte.\r\n     *\r\n     * @param dao                               Projekt DataAcessObject-Interface\r\n     * @param projektgruppeService              Projektgruppe Service-Interface\r\n     * @param naOpNuDao                         Nutzenattraktivitï¿½t und Operativer\r\n     *                                          NutzenProjekt Service-Interface\r\n     */\r\n    public ProjektDaoService(ProjektDao dao, ProjektgruppeService projektgruppeService, NaOpNuDao naOpNuDao) {\r\n        this.dao = dao;\r\n        this.projektgruppeService = projektgruppeService;\r\n        this.naOpNuDao = naOpNuDao;\r\n    }\r\n\r\n    /**\r\n     * @see ch.bfh.egov.nutzenportfolio.persistence.projekt.ProjektDao#getById(Projekt)\r\n     */\r\n    public Projekt getById(Projekt p) {\r\n        return dao.getById(p);\r\n    }\r\n\r\n    /**\r\n     * @see ch.bfh.egov.nutzenportfolio.persistence.projekt.ProjektDao#getByUID(Long)\r\n     */\r\n    public Projekt getByUID(Long projektUID) {\r\n        return dao.getByUID(projektUID);\r\n    }\r\n\r\n    /**\r\n     * Setzt alle vorhandenen Projekte in den request.\r\n     *\r\n     * @param request             der HttpServletRequest\r\n     */\r\n    public void populate(HttpServletRequest request) {\r\n        // Filter\r\n        Integer filter = null;\r\n        try {\r\n            filter = new Integer(request.getParameter(\"filtergruppe\"));\r\n        } catch (NumberFormatException e) {\r\n        }\r\n        // Projekte holen\r\n        Projekt p = createProjekt(request);\r\n        List projekte;\r\n        if (filter != null) {\r\n            Projektgruppe pg = new Projektgruppe();\r\n            pg.setMandantId(p.getMandantId());\r\n            pg.setProjektgruppeId(filter);\r\n            projekte = dao.getGroup(pg);\r\n        } else\r\n            projekte = dao.getAll(p.getMandantId());\r\n        // Die eindeutigen IDs setzen\r\n        ListIterator it = projekte.listIterator();\r\n        LinkedHashMap<Integer, Projekt> map = new LinkedHashMap<Integer, Projekt>();\r\n        NaOpNu naOpNu = new NaOpNu();\r\n        while (it.hasNext()) {\r\n            Projekt projekt = (Projekt) it.next();\r\n            Integer projektId = projekt.getProjektId();\r\n            naOpNu.setProjektId(projektId);\r\n            Long naOpNuUID = projekt.getNaOpNuUID();\r\n            Boolean opNu = projekt.getOperativerNutzen();\r\n            logger.debug(\"projektId=\" + projektId);\r\n            logger.debug(\"naOpNuUID=\" + naOpNuUID);\r\n            // Damit Projekte nicht doppelt angezeigt werden,\r\n            // werden sie durch eine LinkedHashMap gefiltert. Der Grund dafï¿½r\r\n            // liegt darin, dass das SQL Query getAll pro Projekt mehrere\r\n            // Zeilen fï¿½r die UID des Operativen Nutzens und der Nutzenattraktivitï¿½t\r\n            // ausgibt.\r\n            if (map.containsKey(projektId)) {\r\n                logger.debug(\"Projekt in der LinkedHashMap gefunden\");\r\n                projekt = map.get(projektId);\r\n            }\r\n            // UID ï¿½berprï¿½fen\r\n            if (opNu == null) {\r\n                logger.debug(\"Keine UID gesetzt\");\r\n            } else // UID Operativer Nutzen\r\n            if (opNu) {\r\n                logger.debug(\"Gesetzte UID: Operativer Nutzen\");\r\n                projekt.setOpNuUID(naOpNuUID);\r\n                // Anzahl Resultate holen\r\n                naOpNu.setNutzenattraktivitaet(false);\r\n                naOpNu.setOperativerNutzen(true);\r\n                NaOpNu opNuObj = naOpNuDao.getNaOpNuResultat(naOpNu);\r\n                if (opNuObj == null) {\r\n                    projekt.setAnzahlOpNuResultate(0);\r\n                } else {\r\n                    projekt.setAnzahlOpNuResultate(opNuObj.getAnzahl());\r\n                }\r\n            } else // UID Nutzenattraktivitaet\r\n            {\r\n                logger.debug(\"Gesetzte UID: Nutzenattraktivitaet\");\r\n                projekt.setNaUID(naOpNuUID);\r\n                // Anzahl Resultate holen\r\n                naOpNu.setNutzenattraktivitaet(true);\r\n                naOpNu.setOperativerNutzen(false);\r\n                NaOpNu na = naOpNuDao.getNaOpNuResultat(naOpNu);\r\n                if (na == null) {\r\n                    projekt.setAnzahlNaResultate(0);\r\n                } else {\r\n                    projekt.setAnzahlNaResultate(na.getAnzahl());\r\n                }\r\n            }\r\n            // Resultate Projektattraktivitï¿½t holen\r\n            NaOpNu pa = naOpNuDao.getPaResultat(naOpNu);\r\n            if (pa == null) {\r\n                projekt.setAnzahlPaResultate(0);\r\n            } else {\r\n                projekt.setAnzahlPaResultate(pa.getAnzahl());\r\n            }\r\n            map.put(projektId, projekt);\r\n        }\r\n        // Projekte in den Request stellen\r\n        Collection proj = map.values();\r\n        request.setAttribute(Constants.PROJEKTE, proj);\r\n        request.setAttribute(\"filtergruppe\", filter);\r\n    }\r\n\r\n    /**\r\n     * Fï¿½llt das Formular mit allen benï¿½tigten Daten ab.\r\n     *\r\n     * @param request             der HttpServletRequest\r\n     * @param form                das DynaActionForm\r\n     */\r\n    public void prepare(HttpServletRequest request, DynaActionForm form) {\r\n        Projekt p = get(request, form);\r\n        // update?\r\n        if (isUpdate(p)) {\r\n            Integer id = (Integer) form.get(Constants.PROJEKT_ID);\r\n            p.setProjektId(id);\r\n            // Projekt holen und Daten setzen\r\n            p = dao.getById(p);\r\n            form.set(\"name\", p.getName());\r\n            form.set(\"beschreibung\", p.getBeschreibung());\r\n            form.set(\"projektgruppeId\", p.getProjektgruppeId());\r\n        }\r\n        // Projektgruppen in den Reqeust setzen\r\n        List pg = projektgruppeService.getAll(p.getMandantId());\r\n        logger.debug(pg.size() + \" Projektgruppen in der Liste\");\r\n        request.getSession().setAttribute(\"projektgruppeMap\", pg);\r\n    }\r\n\r\n    /**\r\n     * Erstellt ein Projekt-Objekt aus den Formulardaten.\r\n     *\r\n     * @param request             der HttpServletRequest\r\n     * @param form                das DynaActionForm\r\n     * @return                    ein neues Projekt\r\n     */\r\n    public Projekt get(HttpServletRequest request, DynaActionForm form) {\r\n        //Formulardaten holen\r\n        Integer id = (Integer) form.get(Constants.PROJEKT_ID);\r\n        Integer projektgruppeId = (Integer) form.get(Constants.PROJEKTGRUPPE_ID);\r\n        String name = (String) form.get(\"name\");\r\n        String beschreibung = (String) form.get(\"beschreibung\");\r\n        Long projektUID = (Long) form.get(\"projektUID\");\r\n        // Objekt erzeugen\r\n        Projekt p = createProjekt(request);\r\n        p.setProjektId(id);\r\n        p.setProjektgruppeId(projektgruppeId);\r\n        p.setName(name);\r\n        p.setBeschreibung(beschreibung);\r\n        p.setProjektUID(projektUID);\r\n        return p;\r\n    }\r\n\r\n    /**\r\n     * Erstellt ein Projekt-Objekt anhand der Id aus dem request.\r\n     *\r\n     * @param request             der HttpServletRequest\r\n     * @return                    ein neues Projekt\r\n     */\r\n    public Projekt get(HttpServletRequest request) {\r\n        // Id des Projekts aus dem Request holen\r\n        String pId = request.getParameter(Constants.PROJEKT_ID);\r\n        Integer id = null;\r\n        try {\r\n            id = new Integer(pId);\r\n        } catch (Exception ex) {\r\n            logger.warn(\"Fehlende projektId!\");\r\n            return null;\r\n        }\r\n        // Projekt ï¿½berprï¿½fen\r\n        Projekt p = createProjekt(request);\r\n        p.setProjektId(id);\r\n        p = dao.getById(p);\r\n        if (p == null) {\r\n            logger.warn(\"Projekt mit der id \" + id + \" wurde nicht gefunden.\");\r\n            populate(request);\r\n        }\r\n        return p;\r\n    }\r\n\r\n    /**\r\n     * Speichert das angegebene Projekt ab.\r\n     *\r\n     * @param request             der HttpServletRequest\r\n     * @param p                   das zu speichernde Projekt\r\n     */\r\n    public void save(HttpServletRequest request, Projekt p) {\r\n        // update?\r\n        if (isUpdate(p)) {\r\n            dao.update(p);\r\n        } else // insert\r\n        {\r\n            // Einzigartige ID vergeben\r\n            Random rnd = new Random();\r\n            long projektUID = ((System.currentTimeMillis() >>> 16) << 16) + rnd.nextLong();\r\n            logger.debug(\"projektUID=\" + projektUID);\r\n            p.setProjektUID(projektUID);\r\n            dao.insert(p);\r\n        }\r\n        populate(request);\r\n    }\r\n\r\n    /**\r\n     * Lï¿½scht ein Projekt.\r\n     *\r\n     * @param request             der HttpServletRequest\r\n     * @return                    true bei Erfolg, sonst false\r\n     */\r\n    public boolean delete(HttpServletRequest request) {\r\n        // Projekt aus dem request holen\r\n        Projekt p = get(request);\r\n        if (p == null) {\r\n            return false;\r\n        }\r\n        // Projekt lï¿½schen\r\n        dao.delete(p);\r\n        populate(request);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Prï¿½ft, ob der Name des angegebenen Projekts bereits vergeben ist\r\n     *\r\n     * @param p                   das zu ï¿½berprï¿½fende Projekt\r\n     * @return                    true, wenn der Name der Projekt\r\n     *                            bereits vergeben ist, sonst false\r\n     */\r\n    public boolean exists(Projekt p) {\r\n        Integer id = p.getProjektId();\r\n        // update?\r\n        if (id != null && id != 0) {\r\n            Projekt pCurrent = dao.getById(p);\r\n            // Name geï¿½ndert, ï¿½berprï¿½fen\r\n            if (!pCurrent.getName().equals(p.getName())) {\r\n                return dao.getByName(p) != null;\r\n            }\r\n        } else // insert\r\n        {\r\n            return dao.getByName(p) != null;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    /**\r\n     * Generiert ein Projet Objekt mit dem aktuellen Mandanten.\r\n     *\r\n     * @param request               der HttpServletRequest\r\n     * @return                      ein Projekt mit gesetzem Mandant\r\n     */\r\n    public Projekt createProjekt(HttpServletRequest request) {\r\n        Projekt p = new Projekt();\r\n        p.setMandantId((Integer) request.getSession().getAttribute(Constants.MANDANT_ID));\r\n        return p;\r\n    }\r\n\r\n    /**\r\n     * Nimmt die Auswertung von Resultaten aus den Fragebï¿½gen vor.\r\n     *\r\n     * @param request               der HttpServletRequest\r\n     * @param form                  das DynaActionForm\r\n     * @param errors                ActionMessages Objekt fï¿½r Fehlerausgaben\r\n     * @return                      true bei Erfolg, sonst false\r\n     */\r\n    public boolean auswertung(HttpServletRequest request, DynaActionForm form, ActionMessages errors) {\r\n        // Formulardaten holen\r\n        Integer[] ids = (Integer[]) form.get(\"projektIds\");\r\n        Integer pgId = (Integer) form.get(Constants.PROJEKTGRUPPE_ID);\r\n        request.setAttribute(Constants.PROJEKTGRUPPE_ID, pgId);\r\n        if (ids == null || ids.length == 0) {\r\n            logger.info(\"Keine Projekte gewï¿½hlt\");\r\n            // Fehler bei keiner Auswahl\r\n            errors.add(ActionMessages.GLOBAL_MESSAGE, new ActionMessage(\"errors.select.one\", \"Projekt\"));\r\n            populate(request);\r\n            return false;\r\n        }\r\n        logger.debug(ids.length + \" Projekte ausgewï¿½hlt\");\r\n        // Resultate aller Projekte holen\r\n        List<Resultat> resultate = new ArrayList<Resultat>();\r\n        for (int i = 0; i < ids.length; i++) {\r\n            NaOpNu naOpNu = new NaOpNu();\r\n            naOpNu.setProjektId(ids[i]);\r\n            // Nutzenattraktivitï¿½t holen\r\n            naOpNu.setNutzenattraktivitaet(true);\r\n            naOpNu.setOperativerNutzen(false);\r\n            NaOpNu na = naOpNuDao.getNaOpNuResultat(naOpNu);\r\n            // Operativer Nutzen holen\r\n            naOpNu.setNutzenattraktivitaet(false);\r\n            naOpNu.setOperativerNutzen(true);\r\n            NaOpNu opNu = naOpNuDao.getNaOpNuResultat(naOpNu);\r\n            // Projektattraktivitï¿½t holen\r\n            NaOpNu pa = naOpNuDao.getPaResultat(naOpNu);\r\n            if (pa != null && na != null) {\r\n                logger.debug(\"paResultat vor Runden: \" + pa.getResultat());\r\n                Double paResultat = Math.rint(pa.getResultat() * 1000) / 1000;\r\n                logger.debug(\"paResultat nach Runden: \" + paResultat);\r\n                logger.debug(\"naResultat vor Runden: \" + na.getResultat());\r\n                Double naResultat = Math.rint(na.getResultat() * 1000) / 1000;\r\n                logger.debug(\"naResultat nach Runden: \" + naResultat);\r\n                Double opNuResultat = null;\r\n                if (opNu != null) {\r\n                    logger.debug(\"opNuResultat vor Runden: \" + opNu.getResultat());\r\n                    opNuResultat = Math.rint(opNu.getResultat() * 1000) / 1000;\r\n                    logger.debug(\"opNuResultat nach Runden: \" + opNuResultat);\r\n                }\r\n                Resultat r = new Resultat();\r\n                r.setPaResultat(paResultat);\r\n                r.setNaResultat(naResultat);\r\n                r.setOpNuResultat(opNuResultat);\r\n                r.setName(na.getName());\r\n                // Textlabel anhand der Resultate setzen\r\n                setAuswertungLabels(r);\r\n                logger.debug(\"Resultat hinzugefï¿½gt\");\r\n                resultate.add(r);\r\n            } else {\r\n                logger.warn(\"Ein Resultat oder Mehrere fehlen\");\r\n            }\r\n        }\r\n        // Resultat fï¿½r grafische Auswertung in Session speichern\r\n        logger.debug(\"Resultate in der Session: \" + resultate.size());\r\n        request.getSession().setAttribute(Constants.RESULTATE, resultate);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * ï¿½ndert einen Status eines Projekts auf inaktiv respektive aktiv.\r\n     *\r\n     * @param request                   der HttpServletRequest\r\n     * @param form                      das Formular mit der Id des Projeks\r\n     */\r\n    public void changeStatus(HttpServletRequest request, DynaActionForm form) {\r\n        Integer mandantId = (Integer) request.getSession().getAttribute(Constants.MANDANT_ID);\r\n        Integer projektId = (Integer) form.get(Constants.PROJEKT_ID);\r\n        String type = (String) form.get(\"type\");\r\n        logger.debug(\"projektId=\" + projektId);\r\n        logger.debug(\"mandantId=\" + mandantId);\r\n        if (projektId == null) {\r\n            return;\r\n        }\r\n        // Projekt holen\r\n        Projekt p = new Projekt();\r\n        p.setProjektId(projektId);\r\n        p.setMandantId(mandantId);\r\n        p = dao.getById(p);\r\n        if (p == null) {\r\n            return;\r\n        }\r\n        // Status ï¿½ndern und update\r\n        if (type.equals(\"pa\")) {\r\n            p.setPaStatus(!p.getPaStatus());\r\n        } else if (type.equals(\"na\")) {\r\n            p.setNaStatus(!p.getNaStatus());\r\n        } else if (type.equals(\"opNu\")) {\r\n            p.setOpNuStatus(!p.getOpNuStatus());\r\n        }\r\n        dao.updateStatus(p);\r\n    }\r\n\r\n    /**\r\n     * Prï¿½ft, ob das angegebene Projekt neu ist, oder ob es sich um\r\n     * ein update handelt.\r\n     *\r\n     * @param p                   das zu ï¿½berprï¿½fende Projekt\r\n     * @return                    true bei update, sonst false\r\n     */\r\n    private boolean isUpdate(Projekt p) {\r\n        Integer id = p.getProjektId();\r\n        if (id == null || id == 0) {\r\n            return false;\r\n        }\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Setzt die entsprechenden Labels anhand der Resultate der Auswertung.\r\n     *\r\n     * @param r                   das zu setzende Resultat\r\n     */\r\n    private void setAuswertungLabels(Resultat r) {\r\n        Double pa = r.getPaResultat();\r\n        Double na = r.getNaResultat();\r\n        Double opNu = r.getOpNuResultat();\r\n        String label = null;\r\n        Double diff = null;\r\n        if (opNu != null)\r\n            diff = Math.abs(opNu - na);\r\n        if (pa >= 0 && pa < 1.5 && na >= 0 && na < 1.5) {\r\n            if (opNu != null) {\r\n                if (opNu >= 0 && opNu < 1.5)\r\n                    label = \"label.objektiv.und.management.und.projektbetroffene.unattraktiv\";\r\n                else if (opNu >= 1.5 && opNu <= 3.0 && diff >= 0.3)\r\n                    label = \"label.objektiv.und.management.unattraktiv.projektbetroffene.attraktiv.diskrepanz.gross\";\r\n                else if (opNu >= 1.5 && opNu <= 3.0 && diff < 0.3)\r\n                    label = \"label.objektiv.und.management.unattraktiv.projektbetroffene.attraktiv.diskrepanz.klein\";\r\n            } else\r\n                label = \"label.objektiv.und.management.unattraktiv\";\r\n        }\r\n        if (pa >= 0 && pa < 1.5 && na >= 1.5 && na <= 3.0) {\r\n            if (opNu != null) {\r\n                if (opNu >= 0 && opNu < 1.5)\r\n                    label = \"label.objektiv.und.projektbetroffene.unattraktiv.management.attraktiv\";\r\n                else if (opNu >= 1.5 && opNu <= 3.0)\r\n                    label = \"label.objektiv.unattraktiv.management.und.projektbetroffene.attraktiv\";\r\n            } else\r\n                label = \"label.objektiv.unattraktiv.management.attraktiv\";\r\n        }\r\n        if (pa >= 1.5 && pa <= 3.0 && na >= 0 && na < 1.5) {\r\n            if (opNu != null) {\r\n                if (opNu >= 0 && opNu < 1.5 && diff >= 0.3)\r\n                    label = \"label.objektiv.attraktiv.management.und.projektbetroffene.unattraktiv.diskrepanz.gross\";\r\n                else if (opNu >= 0 && opNu < 1.5 && diff < 0.3)\r\n                    label = \"label.objektiv.attraktiv.management.und.projektbetroffene.unattraktiv.diskrepanz.klein\";\r\n                else if (opNu >= 1.5 && opNu <= 3.0)\r\n                    label = \"label.objektiv.und.projektbetroffene.attraktiv.management.unattraktiv\";\r\n            } else\r\n                label = \"label.objektiv.attraktiv.management.unattraktiv\";\r\n        }\r\n        if (pa >= 1.5 && pa <= 3.0 && na >= 1.5 && na <= 3.0) {\r\n            if (opNu != null) {\r\n                if (opNu >= 0 && opNu < 1.5 && diff >= 0.3)\r\n                    label = \"label.objektiv.und.management.attraktiv.projektbetroffene.unattraktiv.diskrepanz.gross\";\r\n                else if (opNu >= 0 && opNu < 1.5 && diff < 0.3)\r\n                    label = \"label.objektiv.und.management.attraktiv.projektbetroffene.unattraktiv.diskrepanz.klein\";\r\n                else if (opNu >= 1.5 && opNu <= 3.0)\r\n                    label = \"label.objektiv.und.management.und.projektbetroffene.attraktiv\";\r\n            } else\r\n                label = \"label.objektiv.und.management.attraktiv\";\r\n        }\r\n        logger.debug(\"label=\" + label);\r\n        r.setLabel(label);\r\n    }\r\n}\r\n",
		"id": "EvoSuiteBenchmark/46_nutzenportfolio/src/main/java/ch/bfh/egov/nutzenportfolio/service/projekt/ProjektDaoServiceTest1.java",
		"test_prompt": "// ProjektDaoServiceTest1.java\npackage ch.bfh.egov.nutzenportfolio.service.projekt;\n\nimport java.util.ArrayList;\nimport java.util.Collection;\nimport java.util.LinkedHashMap;\nimport java.util.List;\nimport java.util.ListIterator;\nimport java.util.Random;\nimport javax.servlet.http.HttpServletRequest;\nimport org.apache.commons.logging.Log;\nimport org.apache.commons.logging.LogFactory;\nimport org.apache.struts.action.ActionMessage;\nimport org.apache.struts.action.ActionMessages;\nimport org.apache.struts.action.DynaActionForm;\nimport ch.bfh.egov.nutzenportfolio.Constants;\nimport ch.bfh.egov.nutzenportfolio.persistence.fragebogen.NaOpNuDao;\nimport ch.bfh.egov.nutzenportfolio.persistence.projekt.ProjektDao;\nimport ch.bfh.egov.nutzenportfolio.service.projektgruppe.ProjektgruppeService;\nimport ch.bfh.egov.nutzenportfolio.tos.NaOpNu;\nimport ch.bfh.egov.nutzenportfolio.tos.Projekt;\nimport ch.bfh.egov.nutzenportfolio.tos.Projektgruppe;\nimport ch.bfh.egov.nutzenportfolio.tos.Resultat;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link ProjektDaoService}.\n* It contains ten unit test cases for the {@link ProjektDaoService#exists(Projekt)} method.\n*/\nclass ProjektDaoServiceTest1 {"
	},
	{
		"original_code": "// ProjektDaoService.java\n/**\r\n * Nutzenportfolio\r\n * Copyright (C) 2006 Kompetenzzentrum E-Business, Simon Bergamin\r\n *\r\n * This program is free software; you can redistribute it and/or\r\n * modify it under the terms of the GNU General Public License\r\n * as published by the Free Software Foundation; either version 2\r\n * of the License, or (at your option) any later version.\r\n *\r\n * This program is distributed in the hope that it will be useful,\r\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n * GNU General Public License for more details.\r\n *\r\n * You should have received a copy of the GNU General Public License\r\n * along with this program; if not, write to the Free Software\r\n * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\r\n */\r\npackage ch.bfh.egov.nutzenportfolio.service.projekt;\r\n\r\nimport java.util.ArrayList;\r\nimport java.util.Collection;\r\nimport java.util.LinkedHashMap;\r\nimport java.util.List;\r\nimport java.util.ListIterator;\r\nimport java.util.Random;\r\nimport javax.servlet.http.HttpServletRequest;\r\nimport org.apache.commons.logging.Log;\r\nimport org.apache.commons.logging.LogFactory;\r\nimport org.apache.struts.action.ActionMessage;\r\nimport org.apache.struts.action.ActionMessages;\r\nimport org.apache.struts.action.DynaActionForm;\r\nimport ch.bfh.egov.nutzenportfolio.Constants;\r\nimport ch.bfh.egov.nutzenportfolio.persistence.fragebogen.NaOpNuDao;\r\nimport ch.bfh.egov.nutzenportfolio.persistence.projekt.ProjektDao;\r\nimport ch.bfh.egov.nutzenportfolio.service.projektgruppe.ProjektgruppeService;\r\nimport ch.bfh.egov.nutzenportfolio.tos.NaOpNu;\r\nimport ch.bfh.egov.nutzenportfolio.tos.Projekt;\r\nimport ch.bfh.egov.nutzenportfolio.tos.Projektgruppe;\r\nimport ch.bfh.egov.nutzenportfolio.tos.Resultat;\r\n\r\n/**\r\n * Implementierende Service-Klasse fï¿½r Projekte.\r\n *\r\n * @author Kompetenzzentrum E-Business, Simon Bergamin\r\n */\r\npublic class ProjektDaoService implements ProjektService {\r\n\r\n    private ProjektDao dao;\r\n\r\n    private ProjektgruppeService projektgruppeService;\r\n\r\n    private NaOpNuDao naOpNuDao;\r\n\r\n    private Log logger = LogFactory.getLog(this.getClass());\r\n\r\n    /**\r\n     * Konstruktor. ï¿½bergabe des DataAcessObject-Interfaces fï¿½r Projekte sowie\r\n     * anderer, benï¿½tigter Service-Objekte.\r\n     *\r\n     * @param dao                               Projekt DataAcessObject-Interface\r\n     * @param projektgruppeService              Projektgruppe Service-Interface\r\n     * @param naOpNuDao                         Nutzenattraktivitï¿½t und Operativer\r\n     *                                          NutzenProjekt Service-Interface\r\n     */\r\n    public ProjektDaoService(ProjektDao dao, ProjektgruppeService projektgruppeService, NaOpNuDao naOpNuDao) {\r\n        this.dao = dao;\r\n        this.projektgruppeService = projektgruppeService;\r\n        this.naOpNuDao = naOpNuDao;\r\n    }\r\n\r\n    /**\r\n     * @see ch.bfh.egov.nutzenportfolio.persistence.projekt.ProjektDao#getById(Projekt)\r\n     */\r\n    public Projekt getById(Projekt p) {\r\n        return dao.getById(p);\r\n    }\r\n\r\n    /**\r\n     * @see ch.bfh.egov.nutzenportfolio.persistence.projekt.ProjektDao#getByUID(Long)\r\n     */\r\n    public Projekt getByUID(Long projektUID) {\r\n        return dao.getByUID(projektUID);\r\n    }\r\n\r\n    /**\r\n     * Setzt alle vorhandenen Projekte in den request.\r\n     *\r\n     * @param request             der HttpServletRequest\r\n     */\r\n    public void populate(HttpServletRequest request) {\r\n        // Filter\r\n        Integer filter = null;\r\n        try {\r\n            filter = new Integer(request.getParameter(\"filtergruppe\"));\r\n        } catch (NumberFormatException e) {\r\n        }\r\n        // Projekte holen\r\n        Projekt p = createProjekt(request);\r\n        List projekte;\r\n        if (filter != null) {\r\n            Projektgruppe pg = new Projektgruppe();\r\n            pg.setMandantId(p.getMandantId());\r\n            pg.setProjektgruppeId(filter);\r\n            projekte = dao.getGroup(pg);\r\n        } else\r\n            projekte = dao.getAll(p.getMandantId());\r\n        // Die eindeutigen IDs setzen\r\n        ListIterator it = projekte.listIterator();\r\n        LinkedHashMap<Integer, Projekt> map = new LinkedHashMap<Integer, Projekt>();\r\n        NaOpNu naOpNu = new NaOpNu();\r\n        while (it.hasNext()) {\r\n            Projekt projekt = (Projekt) it.next();\r\n            Integer projektId = projekt.getProjektId();\r\n            naOpNu.setProjektId(projektId);\r\n            Long naOpNuUID = projekt.getNaOpNuUID();\r\n            Boolean opNu = projekt.getOperativerNutzen();\r\n            logger.debug(\"projektId=\" + projektId);\r\n            logger.debug(\"naOpNuUID=\" + naOpNuUID);\r\n            // Damit Projekte nicht doppelt angezeigt werden,\r\n            // werden sie durch eine LinkedHashMap gefiltert. Der Grund dafï¿½r\r\n            // liegt darin, dass das SQL Query getAll pro Projekt mehrere\r\n            // Zeilen fï¿½r die UID des Operativen Nutzens und der Nutzenattraktivitï¿½t\r\n            // ausgibt.\r\n            if (map.containsKey(projektId)) {\r\n                logger.debug(\"Projekt in der LinkedHashMap gefunden\");\r\n                projekt = map.get(projektId);\r\n            }\r\n            // UID ï¿½berprï¿½fen\r\n            if (opNu == null) {\r\n                logger.debug(\"Keine UID gesetzt\");\r\n            } else // UID Operativer Nutzen\r\n            if (opNu) {\r\n                logger.debug(\"Gesetzte UID: Operativer Nutzen\");\r\n                projekt.setOpNuUID(naOpNuUID);\r\n                // Anzahl Resultate holen\r\n                naOpNu.setNutzenattraktivitaet(false);\r\n                naOpNu.setOperativerNutzen(true);\r\n                NaOpNu opNuObj = naOpNuDao.getNaOpNuResultat(naOpNu);\r\n                if (opNuObj == null) {\r\n                    projekt.setAnzahlOpNuResultate(0);\r\n                } else {\r\n                    projekt.setAnzahlOpNuResultate(opNuObj.getAnzahl());\r\n                }\r\n            } else // UID Nutzenattraktivitaet\r\n            {\r\n                logger.debug(\"Gesetzte UID: Nutzenattraktivitaet\");\r\n                projekt.setNaUID(naOpNuUID);\r\n                // Anzahl Resultate holen\r\n                naOpNu.setNutzenattraktivitaet(true);\r\n                naOpNu.setOperativerNutzen(false);\r\n                NaOpNu na = naOpNuDao.getNaOpNuResultat(naOpNu);\r\n                if (na == null) {\r\n                    projekt.setAnzahlNaResultate(0);\r\n                } else {\r\n                    projekt.setAnzahlNaResultate(na.getAnzahl());\r\n                }\r\n            }\r\n            // Resultate Projektattraktivitï¿½t holen\r\n            NaOpNu pa = naOpNuDao.getPaResultat(naOpNu);\r\n            if (pa == null) {\r\n                projekt.setAnzahlPaResultate(0);\r\n            } else {\r\n                projekt.setAnzahlPaResultate(pa.getAnzahl());\r\n            }\r\n            map.put(projektId, projekt);\r\n        }\r\n        // Projekte in den Request stellen\r\n        Collection proj = map.values();\r\n        request.setAttribute(Constants.PROJEKTE, proj);\r\n        request.setAttribute(\"filtergruppe\", filter);\r\n    }\r\n\r\n    /**\r\n     * Fï¿½llt das Formular mit allen benï¿½tigten Daten ab.\r\n     *\r\n     * @param request             der HttpServletRequest\r\n     * @param form                das DynaActionForm\r\n     */\r\n    public void prepare(HttpServletRequest request, DynaActionForm form) {\r\n        Projekt p = get(request, form);\r\n        // update?\r\n        if (isUpdate(p)) {\r\n            Integer id = (Integer) form.get(Constants.PROJEKT_ID);\r\n            p.setProjektId(id);\r\n            // Projekt holen und Daten setzen\r\n            p = dao.getById(p);\r\n            form.set(\"name\", p.getName());\r\n            form.set(\"beschreibung\", p.getBeschreibung());\r\n            form.set(\"projektgruppeId\", p.getProjektgruppeId());\r\n        }\r\n        // Projektgruppen in den Reqeust setzen\r\n        List pg = projektgruppeService.getAll(p.getMandantId());\r\n        logger.debug(pg.size() + \" Projektgruppen in der Liste\");\r\n        request.getSession().setAttribute(\"projektgruppeMap\", pg);\r\n    }\r\n\r\n    /**\r\n     * Erstellt ein Projekt-Objekt aus den Formulardaten.\r\n     *\r\n     * @param request             der HttpServletRequest\r\n     * @param form                das DynaActionForm\r\n     * @return                    ein neues Projekt\r\n     */\r\n    public Projekt get(HttpServletRequest request, DynaActionForm form) {\r\n        //Formulardaten holen\r\n        Integer id = (Integer) form.get(Constants.PROJEKT_ID);\r\n        Integer projektgruppeId = (Integer) form.get(Constants.PROJEKTGRUPPE_ID);\r\n        String name = (String) form.get(\"name\");\r\n        String beschreibung = (String) form.get(\"beschreibung\");\r\n        Long projektUID = (Long) form.get(\"projektUID\");\r\n        // Objekt erzeugen\r\n        Projekt p = createProjekt(request);\r\n        p.setProjektId(id);\r\n        p.setProjektgruppeId(projektgruppeId);\r\n        p.setName(name);\r\n        p.setBeschreibung(beschreibung);\r\n        p.setProjektUID(projektUID);\r\n        return p;\r\n    }\r\n\r\n    /**\r\n     * Erstellt ein Projekt-Objekt anhand der Id aus dem request.\r\n     *\r\n     * @param request             der HttpServletRequest\r\n     * @return                    ein neues Projekt\r\n     */\r\n    public Projekt get(HttpServletRequest request) {\r\n        // Id des Projekts aus dem Request holen\r\n        String pId = request.getParameter(Constants.PROJEKT_ID);\r\n        Integer id = null;\r\n        try {\r\n            id = new Integer(pId);\r\n        } catch (Exception ex) {\r\n            logger.warn(\"Fehlende projektId!\");\r\n            return null;\r\n        }\r\n        // Projekt ï¿½berprï¿½fen\r\n        Projekt p = createProjekt(request);\r\n        p.setProjektId(id);\r\n        p = dao.getById(p);\r\n        if (p == null) {\r\n            logger.warn(\"Projekt mit der id \" + id + \" wurde nicht gefunden.\");\r\n            populate(request);\r\n        }\r\n        return p;\r\n    }\r\n\r\n    /**\r\n     * Speichert das angegebene Projekt ab.\r\n     *\r\n     * @param request             der HttpServletRequest\r\n     * @param p                   das zu speichernde Projekt\r\n     */\r\n    public void save(HttpServletRequest request, Projekt p) {\r\n        // update?\r\n        if (isUpdate(p)) {\r\n            dao.update(p);\r\n        } else // insert\r\n        {\r\n            // Einzigartige ID vergeben\r\n            Random rnd = new Random();\r\n            long projektUID = ((System.currentTimeMillis() >>> 16) << 16) + rnd.nextLong();\r\n            logger.debug(\"projektUID=\" + projektUID);\r\n            p.setProjektUID(projektUID);\r\n            dao.insert(p);\r\n        }\r\n        populate(request);\r\n    }\r\n\r\n    /**\r\n     * Lï¿½scht ein Projekt.\r\n     *\r\n     * @param request             der HttpServletRequest\r\n     * @return                    true bei Erfolg, sonst false\r\n     */\r\n    public boolean delete(HttpServletRequest request) {\r\n        // Projekt aus dem request holen\r\n        Projekt p = get(request);\r\n        if (p == null) {\r\n            return false;\r\n        }\r\n        // Projekt lï¿½schen\r\n        dao.delete(p);\r\n        populate(request);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Prï¿½ft, ob der Name des angegebenen Projekts bereits vergeben ist\r\n     *\r\n     * @param p                   das zu ï¿½berprï¿½fende Projekt\r\n     * @return                    true, wenn der Name der Projekt\r\n     *                            bereits vergeben ist, sonst false\r\n     */\r\n    public boolean exists(Projekt p) {\r\n        Integer id = p.getProjektId();\r\n        // update?\r\n        if (id != null && id != 0) {\r\n            Projekt pCurrent = dao.getById(p);\r\n            // Name geï¿½ndert, ï¿½berprï¿½fen\r\n            if (!pCurrent.getName().equals(p.getName())) {\r\n                return dao.getByName(p) != null;\r\n            }\r\n        } else // insert\r\n        {\r\n            return dao.getByName(p) != null;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    /**\r\n     * Generiert ein Projet Objekt mit dem aktuellen Mandanten.\r\n     *\r\n     * @param request               der HttpServletRequest\r\n     * @return                      ein Projekt mit gesetzem Mandant\r\n     */\r\n    public Projekt createProjekt(HttpServletRequest request) {\r\n        Projekt p = new Projekt();\r\n        p.setMandantId((Integer) request.getSession().getAttribute(Constants.MANDANT_ID));\r\n        return p;\r\n    }\r\n\r\n    /**\r\n     * Nimmt die Auswertung von Resultaten aus den Fragebï¿½gen vor.\r\n     *\r\n     * @param request               der HttpServletRequest\r\n     * @param form                  das DynaActionForm\r\n     * @param errors                ActionMessages Objekt fï¿½r Fehlerausgaben\r\n     * @return                      true bei Erfolg, sonst false\r\n     */\r\n    public boolean auswertung(HttpServletRequest request, DynaActionForm form, ActionMessages errors) {\r\n        // Formulardaten holen\r\n        Integer[] ids = (Integer[]) form.get(\"projektIds\");\r\n        Integer pgId = (Integer) form.get(Constants.PROJEKTGRUPPE_ID);\r\n        request.setAttribute(Constants.PROJEKTGRUPPE_ID, pgId);\r\n        if (ids == null || ids.length == 0) {\r\n            logger.info(\"Keine Projekte gewï¿½hlt\");\r\n            // Fehler bei keiner Auswahl\r\n            errors.add(ActionMessages.GLOBAL_MESSAGE, new ActionMessage(\"errors.select.one\", \"Projekt\"));\r\n            populate(request);\r\n            return false;\r\n        }\r\n        logger.debug(ids.length + \" Projekte ausgewï¿½hlt\");\r\n        // Resultate aller Projekte holen\r\n        List<Resultat> resultate = new ArrayList<Resultat>();\r\n        for (int i = 0; i < ids.length; i++) {\r\n            NaOpNu naOpNu = new NaOpNu();\r\n            naOpNu.setProjektId(ids[i]);\r\n            // Nutzenattraktivitï¿½t holen\r\n            naOpNu.setNutzenattraktivitaet(true);\r\n            naOpNu.setOperativerNutzen(false);\r\n            NaOpNu na = naOpNuDao.getNaOpNuResultat(naOpNu);\r\n            // Operativer Nutzen holen\r\n            naOpNu.setNutzenattraktivitaet(false);\r\n            naOpNu.setOperativerNutzen(true);\r\n            NaOpNu opNu = naOpNuDao.getNaOpNuResultat(naOpNu);\r\n            // Projektattraktivitï¿½t holen\r\n            NaOpNu pa = naOpNuDao.getPaResultat(naOpNu);\r\n            if (pa != null && na != null) {\r\n                logger.debug(\"paResultat vor Runden: \" + pa.getResultat());\r\n                Double paResultat = Math.rint(pa.getResultat() * 1000) / 1000;\r\n                logger.debug(\"paResultat nach Runden: \" + paResultat);\r\n                logger.debug(\"naResultat vor Runden: \" + na.getResultat());\r\n                Double naResultat = Math.rint(na.getResultat() * 1000) / 1000;\r\n                logger.debug(\"naResultat nach Runden: \" + naResultat);\r\n                Double opNuResultat = null;\r\n                if (opNu != null) {\r\n                    logger.debug(\"opNuResultat vor Runden: \" + opNu.getResultat());\r\n                    opNuResultat = Math.rint(opNu.getResultat() * 1000) / 1000;\r\n                    logger.debug(\"opNuResultat nach Runden: \" + opNuResultat);\r\n                }\r\n                Resultat r = new Resultat();\r\n                r.setPaResultat(paResultat);\r\n                r.setNaResultat(naResultat);\r\n                r.setOpNuResultat(opNuResultat);\r\n                r.setName(na.getName());\r\n                // Textlabel anhand der Resultate setzen\r\n                setAuswertungLabels(r);\r\n                logger.debug(\"Resultat hinzugefï¿½gt\");\r\n                resultate.add(r);\r\n            } else {\r\n                logger.warn(\"Ein Resultat oder Mehrere fehlen\");\r\n            }\r\n        }\r\n        // Resultat fï¿½r grafische Auswertung in Session speichern\r\n        logger.debug(\"Resultate in der Session: \" + resultate.size());\r\n        request.getSession().setAttribute(Constants.RESULTATE, resultate);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * ï¿½ndert einen Status eines Projekts auf inaktiv respektive aktiv.\r\n     *\r\n     * @param request                   der HttpServletRequest\r\n     * @param form                      das Formular mit der Id des Projeks\r\n     */\r\n    public void changeStatus(HttpServletRequest request, DynaActionForm form) {\r\n        Integer mandantId = (Integer) request.getSession().getAttribute(Constants.MANDANT_ID);\r\n        Integer projektId = (Integer) form.get(Constants.PROJEKT_ID);\r\n        String type = (String) form.get(\"type\");\r\n        logger.debug(\"projektId=\" + projektId);\r\n        logger.debug(\"mandantId=\" + mandantId);\r\n        if (projektId == null) {\r\n            return;\r\n        }\r\n        // Projekt holen\r\n        Projekt p = new Projekt();\r\n        p.setProjektId(projektId);\r\n        p.setMandantId(mandantId);\r\n        p = dao.getById(p);\r\n        if (p == null) {\r\n            return;\r\n        }\r\n        // Status ï¿½ndern und update\r\n        if (type.equals(\"pa\")) {\r\n            p.setPaStatus(!p.getPaStatus());\r\n        } else if (type.equals(\"na\")) {\r\n            p.setNaStatus(!p.getNaStatus());\r\n        } else if (type.equals(\"opNu\")) {\r\n            p.setOpNuStatus(!p.getOpNuStatus());\r\n        }\r\n        dao.updateStatus(p);\r\n    }\r\n\r\n    /**\r\n     * Prï¿½ft, ob das angegebene Projekt neu ist, oder ob es sich um\r\n     * ein update handelt.\r\n     *\r\n     * @param p                   das zu ï¿½berprï¿½fende Projekt\r\n     * @return                    true bei update, sonst false\r\n     */\r\n    private boolean isUpdate(Projekt p) {\r\n        Integer id = p.getProjektId();\r\n        if (id == null || id == 0) {\r\n            return false;\r\n        }\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Setzt die entsprechenden Labels anhand der Resultate der Auswertung.\r\n     *\r\n     * @param r                   das zu setzende Resultat\r\n     */\r\n    private void setAuswertungLabels(Resultat r) {\r\n        Double pa = r.getPaResultat();\r\n        Double na = r.getNaResultat();\r\n        Double opNu = r.getOpNuResultat();\r\n        String label = null;\r\n        Double diff = null;\r\n        if (opNu != null)\r\n            diff = Math.abs(opNu - na);\r\n        if (pa >= 0 && pa < 1.5 && na >= 0 && na < 1.5) {\r\n            if (opNu != null) {\r\n                if (opNu >= 0 && opNu < 1.5)\r\n                    label = \"label.objektiv.und.management.und.projektbetroffene.unattraktiv\";\r\n                else if (opNu >= 1.5 && opNu <= 3.0 && diff >= 0.3)\r\n                    label = \"label.objektiv.und.management.unattraktiv.projektbetroffene.attraktiv.diskrepanz.gross\";\r\n                else if (opNu >= 1.5 && opNu <= 3.0 && diff < 0.3)\r\n                    label = \"label.objektiv.und.management.unattraktiv.projektbetroffene.attraktiv.diskrepanz.klein\";\r\n            } else\r\n                label = \"label.objektiv.und.management.unattraktiv\";\r\n        }\r\n        if (pa >= 0 && pa < 1.5 && na >= 1.5 && na <= 3.0) {\r\n            if (opNu != null) {\r\n                if (opNu >= 0 && opNu < 1.5)\r\n                    label = \"label.objektiv.und.projektbetroffene.unattraktiv.management.attraktiv\";\r\n                else if (opNu >= 1.5 && opNu <= 3.0)\r\n                    label = \"label.objektiv.unattraktiv.management.und.projektbetroffene.attraktiv\";\r\n            } else\r\n                label = \"label.objektiv.unattraktiv.management.attraktiv\";\r\n        }\r\n        if (pa >= 1.5 && pa <= 3.0 && na >= 0 && na < 1.5) {\r\n            if (opNu != null) {\r\n                if (opNu >= 0 && opNu < 1.5 && diff >= 0.3)\r\n                    label = \"label.objektiv.attraktiv.management.und.projektbetroffene.unattraktiv.diskrepanz.gross\";\r\n                else if (opNu >= 0 && opNu < 1.5 && diff < 0.3)\r\n                    label = \"label.objektiv.attraktiv.management.und.projektbetroffene.unattraktiv.diskrepanz.klein\";\r\n                else if (opNu >= 1.5 && opNu <= 3.0)\r\n                    label = \"label.objektiv.und.projektbetroffene.attraktiv.management.unattraktiv\";\r\n            } else\r\n                label = \"label.objektiv.attraktiv.management.unattraktiv\";\r\n        }\r\n        if (pa >= 1.5 && pa <= 3.0 && na >= 1.5 && na <= 3.0) {\r\n            if (opNu != null) {\r\n                if (opNu >= 0 && opNu < 1.5 && diff >= 0.3)\r\n                    label = \"label.objektiv.und.management.attraktiv.projektbetroffene.unattraktiv.diskrepanz.gross\";\r\n                else if (opNu >= 0 && opNu < 1.5 && diff < 0.3)\r\n                    label = \"label.objektiv.und.management.attraktiv.projektbetroffene.unattraktiv.diskrepanz.klein\";\r\n                else if (opNu >= 1.5 && opNu <= 3.0)\r\n                    label = \"label.objektiv.und.management.und.projektbetroffene.attraktiv\";\r\n            } else\r\n                label = \"label.objektiv.und.management.attraktiv\";\r\n        }\r\n        logger.debug(\"label=\" + label);\r\n        r.setLabel(label);\r\n    }\r\n}\r\n",
		"id": "EvoSuiteBenchmark/46_nutzenportfolio/src/main/java/ch/bfh/egov/nutzenportfolio/service/projekt/ProjektDaoServiceTest2.java",
		"test_prompt": "// ProjektDaoServiceTest2.java\npackage ch.bfh.egov.nutzenportfolio.service.projekt;\n\nimport java.util.ArrayList;\nimport java.util.Collection;\nimport java.util.LinkedHashMap;\nimport java.util.List;\nimport java.util.ListIterator;\nimport java.util.Random;\nimport javax.servlet.http.HttpServletRequest;\nimport org.apache.commons.logging.Log;\nimport org.apache.commons.logging.LogFactory;\nimport org.apache.struts.action.ActionMessage;\nimport org.apache.struts.action.ActionMessages;\nimport org.apache.struts.action.DynaActionForm;\nimport ch.bfh.egov.nutzenportfolio.Constants;\nimport ch.bfh.egov.nutzenportfolio.persistence.fragebogen.NaOpNuDao;\nimport ch.bfh.egov.nutzenportfolio.persistence.projekt.ProjektDao;\nimport ch.bfh.egov.nutzenportfolio.service.projektgruppe.ProjektgruppeService;\nimport ch.bfh.egov.nutzenportfolio.tos.NaOpNu;\nimport ch.bfh.egov.nutzenportfolio.tos.Projekt;\nimport ch.bfh.egov.nutzenportfolio.tos.Projektgruppe;\nimport ch.bfh.egov.nutzenportfolio.tos.Resultat;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link ProjektDaoService}.\n* It contains ten unit test cases for the {@link ProjektDaoService#createProjekt(HttpServletRequest)} method.\n*/\nclass ProjektDaoServiceTest2 {"
	},
	{
		"original_code": "// ProjektDaoService.java\n/**\r\n * Nutzenportfolio\r\n * Copyright (C) 2006 Kompetenzzentrum E-Business, Simon Bergamin\r\n *\r\n * This program is free software; you can redistribute it and/or\r\n * modify it under the terms of the GNU General Public License\r\n * as published by the Free Software Foundation; either version 2\r\n * of the License, or (at your option) any later version.\r\n *\r\n * This program is distributed in the hope that it will be useful,\r\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n * GNU General Public License for more details.\r\n *\r\n * You should have received a copy of the GNU General Public License\r\n * along with this program; if not, write to the Free Software\r\n * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\r\n */\r\npackage ch.bfh.egov.nutzenportfolio.service.projekt;\r\n\r\nimport java.util.ArrayList;\r\nimport java.util.Collection;\r\nimport java.util.LinkedHashMap;\r\nimport java.util.List;\r\nimport java.util.ListIterator;\r\nimport java.util.Random;\r\nimport javax.servlet.http.HttpServletRequest;\r\nimport org.apache.commons.logging.Log;\r\nimport org.apache.commons.logging.LogFactory;\r\nimport org.apache.struts.action.ActionMessage;\r\nimport org.apache.struts.action.ActionMessages;\r\nimport org.apache.struts.action.DynaActionForm;\r\nimport ch.bfh.egov.nutzenportfolio.Constants;\r\nimport ch.bfh.egov.nutzenportfolio.persistence.fragebogen.NaOpNuDao;\r\nimport ch.bfh.egov.nutzenportfolio.persistence.projekt.ProjektDao;\r\nimport ch.bfh.egov.nutzenportfolio.service.projektgruppe.ProjektgruppeService;\r\nimport ch.bfh.egov.nutzenportfolio.tos.NaOpNu;\r\nimport ch.bfh.egov.nutzenportfolio.tos.Projekt;\r\nimport ch.bfh.egov.nutzenportfolio.tos.Projektgruppe;\r\nimport ch.bfh.egov.nutzenportfolio.tos.Resultat;\r\n\r\n/**\r\n * Implementierende Service-Klasse fï¿½r Projekte.\r\n *\r\n * @author Kompetenzzentrum E-Business, Simon Bergamin\r\n */\r\npublic class ProjektDaoService implements ProjektService {\r\n\r\n    private ProjektDao dao;\r\n\r\n    private ProjektgruppeService projektgruppeService;\r\n\r\n    private NaOpNuDao naOpNuDao;\r\n\r\n    private Log logger = LogFactory.getLog(this.getClass());\r\n\r\n    /**\r\n     * Konstruktor. ï¿½bergabe des DataAcessObject-Interfaces fï¿½r Projekte sowie\r\n     * anderer, benï¿½tigter Service-Objekte.\r\n     *\r\n     * @param dao                               Projekt DataAcessObject-Interface\r\n     * @param projektgruppeService              Projektgruppe Service-Interface\r\n     * @param naOpNuDao                         Nutzenattraktivitï¿½t und Operativer\r\n     *                                          NutzenProjekt Service-Interface\r\n     */\r\n    public ProjektDaoService(ProjektDao dao, ProjektgruppeService projektgruppeService, NaOpNuDao naOpNuDao) {\r\n        this.dao = dao;\r\n        this.projektgruppeService = projektgruppeService;\r\n        this.naOpNuDao = naOpNuDao;\r\n    }\r\n\r\n    /**\r\n     * @see ch.bfh.egov.nutzenportfolio.persistence.projekt.ProjektDao#getById(Projekt)\r\n     */\r\n    public Projekt getById(Projekt p) {\r\n        return dao.getById(p);\r\n    }\r\n\r\n    /**\r\n     * @see ch.bfh.egov.nutzenportfolio.persistence.projekt.ProjektDao#getByUID(Long)\r\n     */\r\n    public Projekt getByUID(Long projektUID) {\r\n        return dao.getByUID(projektUID);\r\n    }\r\n\r\n    /**\r\n     * Setzt alle vorhandenen Projekte in den request.\r\n     *\r\n     * @param request             der HttpServletRequest\r\n     */\r\n    public void populate(HttpServletRequest request) {\r\n        // Filter\r\n        Integer filter = null;\r\n        try {\r\n            filter = new Integer(request.getParameter(\"filtergruppe\"));\r\n        } catch (NumberFormatException e) {\r\n        }\r\n        // Projekte holen\r\n        Projekt p = createProjekt(request);\r\n        List projekte;\r\n        if (filter != null) {\r\n            Projektgruppe pg = new Projektgruppe();\r\n            pg.setMandantId(p.getMandantId());\r\n            pg.setProjektgruppeId(filter);\r\n            projekte = dao.getGroup(pg);\r\n        } else\r\n            projekte = dao.getAll(p.getMandantId());\r\n        // Die eindeutigen IDs setzen\r\n        ListIterator it = projekte.listIterator();\r\n        LinkedHashMap<Integer, Projekt> map = new LinkedHashMap<Integer, Projekt>();\r\n        NaOpNu naOpNu = new NaOpNu();\r\n        while (it.hasNext()) {\r\n            Projekt projekt = (Projekt) it.next();\r\n            Integer projektId = projekt.getProjektId();\r\n            naOpNu.setProjektId(projektId);\r\n            Long naOpNuUID = projekt.getNaOpNuUID();\r\n            Boolean opNu = projekt.getOperativerNutzen();\r\n            logger.debug(\"projektId=\" + projektId);\r\n            logger.debug(\"naOpNuUID=\" + naOpNuUID);\r\n            // Damit Projekte nicht doppelt angezeigt werden,\r\n            // werden sie durch eine LinkedHashMap gefiltert. Der Grund dafï¿½r\r\n            // liegt darin, dass das SQL Query getAll pro Projekt mehrere\r\n            // Zeilen fï¿½r die UID des Operativen Nutzens und der Nutzenattraktivitï¿½t\r\n            // ausgibt.\r\n            if (map.containsKey(projektId)) {\r\n                logger.debug(\"Projekt in der LinkedHashMap gefunden\");\r\n                projekt = map.get(projektId);\r\n            }\r\n            // UID ï¿½berprï¿½fen\r\n            if (opNu == null) {\r\n                logger.debug(\"Keine UID gesetzt\");\r\n            } else // UID Operativer Nutzen\r\n            if (opNu) {\r\n                logger.debug(\"Gesetzte UID: Operativer Nutzen\");\r\n                projekt.setOpNuUID(naOpNuUID);\r\n                // Anzahl Resultate holen\r\n                naOpNu.setNutzenattraktivitaet(false);\r\n                naOpNu.setOperativerNutzen(true);\r\n                NaOpNu opNuObj = naOpNuDao.getNaOpNuResultat(naOpNu);\r\n                if (opNuObj == null) {\r\n                    projekt.setAnzahlOpNuResultate(0);\r\n                } else {\r\n                    projekt.setAnzahlOpNuResultate(opNuObj.getAnzahl());\r\n                }\r\n            } else // UID Nutzenattraktivitaet\r\n            {\r\n                logger.debug(\"Gesetzte UID: Nutzenattraktivitaet\");\r\n                projekt.setNaUID(naOpNuUID);\r\n                // Anzahl Resultate holen\r\n                naOpNu.setNutzenattraktivitaet(true);\r\n                naOpNu.setOperativerNutzen(false);\r\n                NaOpNu na = naOpNuDao.getNaOpNuResultat(naOpNu);\r\n                if (na == null) {\r\n                    projekt.setAnzahlNaResultate(0);\r\n                } else {\r\n                    projekt.setAnzahlNaResultate(na.getAnzahl());\r\n                }\r\n            }\r\n            // Resultate Projektattraktivitï¿½t holen\r\n            NaOpNu pa = naOpNuDao.getPaResultat(naOpNu);\r\n            if (pa == null) {\r\n                projekt.setAnzahlPaResultate(0);\r\n            } else {\r\n                projekt.setAnzahlPaResultate(pa.getAnzahl());\r\n            }\r\n            map.put(projektId, projekt);\r\n        }\r\n        // Projekte in den Request stellen\r\n        Collection proj = map.values();\r\n        request.setAttribute(Constants.PROJEKTE, proj);\r\n        request.setAttribute(\"filtergruppe\", filter);\r\n    }\r\n\r\n    /**\r\n     * Fï¿½llt das Formular mit allen benï¿½tigten Daten ab.\r\n     *\r\n     * @param request             der HttpServletRequest\r\n     * @param form                das DynaActionForm\r\n     */\r\n    public void prepare(HttpServletRequest request, DynaActionForm form) {\r\n        Projekt p = get(request, form);\r\n        // update?\r\n        if (isUpdate(p)) {\r\n            Integer id = (Integer) form.get(Constants.PROJEKT_ID);\r\n            p.setProjektId(id);\r\n            // Projekt holen und Daten setzen\r\n            p = dao.getById(p);\r\n            form.set(\"name\", p.getName());\r\n            form.set(\"beschreibung\", p.getBeschreibung());\r\n            form.set(\"projektgruppeId\", p.getProjektgruppeId());\r\n        }\r\n        // Projektgruppen in den Reqeust setzen\r\n        List pg = projektgruppeService.getAll(p.getMandantId());\r\n        logger.debug(pg.size() + \" Projektgruppen in der Liste\");\r\n        request.getSession().setAttribute(\"projektgruppeMap\", pg);\r\n    }\r\n\r\n    /**\r\n     * Erstellt ein Projekt-Objekt aus den Formulardaten.\r\n     *\r\n     * @param request             der HttpServletRequest\r\n     * @param form                das DynaActionForm\r\n     * @return                    ein neues Projekt\r\n     */\r\n    public Projekt get(HttpServletRequest request, DynaActionForm form) {\r\n        //Formulardaten holen\r\n        Integer id = (Integer) form.get(Constants.PROJEKT_ID);\r\n        Integer projektgruppeId = (Integer) form.get(Constants.PROJEKTGRUPPE_ID);\r\n        String name = (String) form.get(\"name\");\r\n        String beschreibung = (String) form.get(\"beschreibung\");\r\n        Long projektUID = (Long) form.get(\"projektUID\");\r\n        // Objekt erzeugen\r\n        Projekt p = createProjekt(request);\r\n        p.setProjektId(id);\r\n        p.setProjektgruppeId(projektgruppeId);\r\n        p.setName(name);\r\n        p.setBeschreibung(beschreibung);\r\n        p.setProjektUID(projektUID);\r\n        return p;\r\n    }\r\n\r\n    /**\r\n     * Erstellt ein Projekt-Objekt anhand der Id aus dem request.\r\n     *\r\n     * @param request             der HttpServletRequest\r\n     * @return                    ein neues Projekt\r\n     */\r\n    public Projekt get(HttpServletRequest request) {\r\n        // Id des Projekts aus dem Request holen\r\n        String pId = request.getParameter(Constants.PROJEKT_ID);\r\n        Integer id = null;\r\n        try {\r\n            id = new Integer(pId);\r\n        } catch (Exception ex) {\r\n            logger.warn(\"Fehlende projektId!\");\r\n            return null;\r\n        }\r\n        // Projekt ï¿½berprï¿½fen\r\n        Projekt p = createProjekt(request);\r\n        p.setProjektId(id);\r\n        p = dao.getById(p);\r\n        if (p == null) {\r\n            logger.warn(\"Projekt mit der id \" + id + \" wurde nicht gefunden.\");\r\n            populate(request);\r\n        }\r\n        return p;\r\n    }\r\n\r\n    /**\r\n     * Speichert das angegebene Projekt ab.\r\n     *\r\n     * @param request             der HttpServletRequest\r\n     * @param p                   das zu speichernde Projekt\r\n     */\r\n    public void save(HttpServletRequest request, Projekt p) {\r\n        // update?\r\n        if (isUpdate(p)) {\r\n            dao.update(p);\r\n        } else // insert\r\n        {\r\n            // Einzigartige ID vergeben\r\n            Random rnd = new Random();\r\n            long projektUID = ((System.currentTimeMillis() >>> 16) << 16) + rnd.nextLong();\r\n            logger.debug(\"projektUID=\" + projektUID);\r\n            p.setProjektUID(projektUID);\r\n            dao.insert(p);\r\n        }\r\n        populate(request);\r\n    }\r\n\r\n    /**\r\n     * Lï¿½scht ein Projekt.\r\n     *\r\n     * @param request             der HttpServletRequest\r\n     * @return                    true bei Erfolg, sonst false\r\n     */\r\n    public boolean delete(HttpServletRequest request) {\r\n        // Projekt aus dem request holen\r\n        Projekt p = get(request);\r\n        if (p == null) {\r\n            return false;\r\n        }\r\n        // Projekt lï¿½schen\r\n        dao.delete(p);\r\n        populate(request);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Prï¿½ft, ob der Name des angegebenen Projekts bereits vergeben ist\r\n     *\r\n     * @param p                   das zu ï¿½berprï¿½fende Projekt\r\n     * @return                    true, wenn der Name der Projekt\r\n     *                            bereits vergeben ist, sonst false\r\n     */\r\n    public boolean exists(Projekt p) {\r\n        Integer id = p.getProjektId();\r\n        // update?\r\n        if (id != null && id != 0) {\r\n            Projekt pCurrent = dao.getById(p);\r\n            // Name geï¿½ndert, ï¿½berprï¿½fen\r\n            if (!pCurrent.getName().equals(p.getName())) {\r\n                return dao.getByName(p) != null;\r\n            }\r\n        } else // insert\r\n        {\r\n            return dao.getByName(p) != null;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    /**\r\n     * Generiert ein Projet Objekt mit dem aktuellen Mandanten.\r\n     *\r\n     * @param request               der HttpServletRequest\r\n     * @return                      ein Projekt mit gesetzem Mandant\r\n     */\r\n    public Projekt createProjekt(HttpServletRequest request) {\r\n        Projekt p = new Projekt();\r\n        p.setMandantId((Integer) request.getSession().getAttribute(Constants.MANDANT_ID));\r\n        return p;\r\n    }\r\n\r\n    /**\r\n     * Nimmt die Auswertung von Resultaten aus den Fragebï¿½gen vor.\r\n     *\r\n     * @param request               der HttpServletRequest\r\n     * @param form                  das DynaActionForm\r\n     * @param errors                ActionMessages Objekt fï¿½r Fehlerausgaben\r\n     * @return                      true bei Erfolg, sonst false\r\n     */\r\n    public boolean auswertung(HttpServletRequest request, DynaActionForm form, ActionMessages errors) {\r\n        // Formulardaten holen\r\n        Integer[] ids = (Integer[]) form.get(\"projektIds\");\r\n        Integer pgId = (Integer) form.get(Constants.PROJEKTGRUPPE_ID);\r\n        request.setAttribute(Constants.PROJEKTGRUPPE_ID, pgId);\r\n        if (ids == null || ids.length == 0) {\r\n            logger.info(\"Keine Projekte gewï¿½hlt\");\r\n            // Fehler bei keiner Auswahl\r\n            errors.add(ActionMessages.GLOBAL_MESSAGE, new ActionMessage(\"errors.select.one\", \"Projekt\"));\r\n            populate(request);\r\n            return false;\r\n        }\r\n        logger.debug(ids.length + \" Projekte ausgewï¿½hlt\");\r\n        // Resultate aller Projekte holen\r\n        List<Resultat> resultate = new ArrayList<Resultat>();\r\n        for (int i = 0; i < ids.length; i++) {\r\n            NaOpNu naOpNu = new NaOpNu();\r\n            naOpNu.setProjektId(ids[i]);\r\n            // Nutzenattraktivitï¿½t holen\r\n            naOpNu.setNutzenattraktivitaet(true);\r\n            naOpNu.setOperativerNutzen(false);\r\n            NaOpNu na = naOpNuDao.getNaOpNuResultat(naOpNu);\r\n            // Operativer Nutzen holen\r\n            naOpNu.setNutzenattraktivitaet(false);\r\n            naOpNu.setOperativerNutzen(true);\r\n            NaOpNu opNu = naOpNuDao.getNaOpNuResultat(naOpNu);\r\n            // Projektattraktivitï¿½t holen\r\n            NaOpNu pa = naOpNuDao.getPaResultat(naOpNu);\r\n            if (pa != null && na != null) {\r\n                logger.debug(\"paResultat vor Runden: \" + pa.getResultat());\r\n                Double paResultat = Math.rint(pa.getResultat() * 1000) / 1000;\r\n                logger.debug(\"paResultat nach Runden: \" + paResultat);\r\n                logger.debug(\"naResultat vor Runden: \" + na.getResultat());\r\n                Double naResultat = Math.rint(na.getResultat() * 1000) / 1000;\r\n                logger.debug(\"naResultat nach Runden: \" + naResultat);\r\n                Double opNuResultat = null;\r\n                if (opNu != null) {\r\n                    logger.debug(\"opNuResultat vor Runden: \" + opNu.getResultat());\r\n                    opNuResultat = Math.rint(opNu.getResultat() * 1000) / 1000;\r\n                    logger.debug(\"opNuResultat nach Runden: \" + opNuResultat);\r\n                }\r\n                Resultat r = new Resultat();\r\n                r.setPaResultat(paResultat);\r\n                r.setNaResultat(naResultat);\r\n                r.setOpNuResultat(opNuResultat);\r\n                r.setName(na.getName());\r\n                // Textlabel anhand der Resultate setzen\r\n                setAuswertungLabels(r);\r\n                logger.debug(\"Resultat hinzugefï¿½gt\");\r\n                resultate.add(r);\r\n            } else {\r\n                logger.warn(\"Ein Resultat oder Mehrere fehlen\");\r\n            }\r\n        }\r\n        // Resultat fï¿½r grafische Auswertung in Session speichern\r\n        logger.debug(\"Resultate in der Session: \" + resultate.size());\r\n        request.getSession().setAttribute(Constants.RESULTATE, resultate);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * ï¿½ndert einen Status eines Projekts auf inaktiv respektive aktiv.\r\n     *\r\n     * @param request                   der HttpServletRequest\r\n     * @param form                      das Formular mit der Id des Projeks\r\n     */\r\n    public void changeStatus(HttpServletRequest request, DynaActionForm form) {\r\n        Integer mandantId = (Integer) request.getSession().getAttribute(Constants.MANDANT_ID);\r\n        Integer projektId = (Integer) form.get(Constants.PROJEKT_ID);\r\n        String type = (String) form.get(\"type\");\r\n        logger.debug(\"projektId=\" + projektId);\r\n        logger.debug(\"mandantId=\" + mandantId);\r\n        if (projektId == null) {\r\n            return;\r\n        }\r\n        // Projekt holen\r\n        Projekt p = new Projekt();\r\n        p.setProjektId(projektId);\r\n        p.setMandantId(mandantId);\r\n        p = dao.getById(p);\r\n        if (p == null) {\r\n            return;\r\n        }\r\n        // Status ï¿½ndern und update\r\n        if (type.equals(\"pa\")) {\r\n            p.setPaStatus(!p.getPaStatus());\r\n        } else if (type.equals(\"na\")) {\r\n            p.setNaStatus(!p.getNaStatus());\r\n        } else if (type.equals(\"opNu\")) {\r\n            p.setOpNuStatus(!p.getOpNuStatus());\r\n        }\r\n        dao.updateStatus(p);\r\n    }\r\n\r\n    /**\r\n     * Prï¿½ft, ob das angegebene Projekt neu ist, oder ob es sich um\r\n     * ein update handelt.\r\n     *\r\n     * @param p                   das zu ï¿½berprï¿½fende Projekt\r\n     * @return                    true bei update, sonst false\r\n     */\r\n    private boolean isUpdate(Projekt p) {\r\n        Integer id = p.getProjektId();\r\n        if (id == null || id == 0) {\r\n            return false;\r\n        }\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Setzt die entsprechenden Labels anhand der Resultate der Auswertung.\r\n     *\r\n     * @param r                   das zu setzende Resultat\r\n     */\r\n    private void setAuswertungLabels(Resultat r) {\r\n        Double pa = r.getPaResultat();\r\n        Double na = r.getNaResultat();\r\n        Double opNu = r.getOpNuResultat();\r\n        String label = null;\r\n        Double diff = null;\r\n        if (opNu != null)\r\n            diff = Math.abs(opNu - na);\r\n        if (pa >= 0 && pa < 1.5 && na >= 0 && na < 1.5) {\r\n            if (opNu != null) {\r\n                if (opNu >= 0 && opNu < 1.5)\r\n                    label = \"label.objektiv.und.management.und.projektbetroffene.unattraktiv\";\r\n                else if (opNu >= 1.5 && opNu <= 3.0 && diff >= 0.3)\r\n                    label = \"label.objektiv.und.management.unattraktiv.projektbetroffene.attraktiv.diskrepanz.gross\";\r\n                else if (opNu >= 1.5 && opNu <= 3.0 && diff < 0.3)\r\n                    label = \"label.objektiv.und.management.unattraktiv.projektbetroffene.attraktiv.diskrepanz.klein\";\r\n            } else\r\n                label = \"label.objektiv.und.management.unattraktiv\";\r\n        }\r\n        if (pa >= 0 && pa < 1.5 && na >= 1.5 && na <= 3.0) {\r\n            if (opNu != null) {\r\n                if (opNu >= 0 && opNu < 1.5)\r\n                    label = \"label.objektiv.und.projektbetroffene.unattraktiv.management.attraktiv\";\r\n                else if (opNu >= 1.5 && opNu <= 3.0)\r\n                    label = \"label.objektiv.unattraktiv.management.und.projektbetroffene.attraktiv\";\r\n            } else\r\n                label = \"label.objektiv.unattraktiv.management.attraktiv\";\r\n        }\r\n        if (pa >= 1.5 && pa <= 3.0 && na >= 0 && na < 1.5) {\r\n            if (opNu != null) {\r\n                if (opNu >= 0 && opNu < 1.5 && diff >= 0.3)\r\n                    label = \"label.objektiv.attraktiv.management.und.projektbetroffene.unattraktiv.diskrepanz.gross\";\r\n                else if (opNu >= 0 && opNu < 1.5 && diff < 0.3)\r\n                    label = \"label.objektiv.attraktiv.management.und.projektbetroffene.unattraktiv.diskrepanz.klein\";\r\n                else if (opNu >= 1.5 && opNu <= 3.0)\r\n                    label = \"label.objektiv.und.projektbetroffene.attraktiv.management.unattraktiv\";\r\n            } else\r\n                label = \"label.objektiv.attraktiv.management.unattraktiv\";\r\n        }\r\n        if (pa >= 1.5 && pa <= 3.0 && na >= 1.5 && na <= 3.0) {\r\n            if (opNu != null) {\r\n                if (opNu >= 0 && opNu < 1.5 && diff >= 0.3)\r\n                    label = \"label.objektiv.und.management.attraktiv.projektbetroffene.unattraktiv.diskrepanz.gross\";\r\n                else if (opNu >= 0 && opNu < 1.5 && diff < 0.3)\r\n                    label = \"label.objektiv.und.management.attraktiv.projektbetroffene.unattraktiv.diskrepanz.klein\";\r\n                else if (opNu >= 1.5 && opNu <= 3.0)\r\n                    label = \"label.objektiv.und.management.und.projektbetroffene.attraktiv\";\r\n            } else\r\n                label = \"label.objektiv.und.management.attraktiv\";\r\n        }\r\n        logger.debug(\"label=\" + label);\r\n        r.setLabel(label);\r\n    }\r\n}\r\n",
		"id": "EvoSuiteBenchmark/46_nutzenportfolio/src/main/java/ch/bfh/egov/nutzenportfolio/service/projekt/ProjektDaoServiceTest3.java",
		"test_prompt": "// ProjektDaoServiceTest3.java\npackage ch.bfh.egov.nutzenportfolio.service.projekt;\n\nimport java.util.ArrayList;\nimport java.util.Collection;\nimport java.util.LinkedHashMap;\nimport java.util.List;\nimport java.util.ListIterator;\nimport java.util.Random;\nimport javax.servlet.http.HttpServletRequest;\nimport org.apache.commons.logging.Log;\nimport org.apache.commons.logging.LogFactory;\nimport org.apache.struts.action.ActionMessage;\nimport org.apache.struts.action.ActionMessages;\nimport org.apache.struts.action.DynaActionForm;\nimport ch.bfh.egov.nutzenportfolio.Constants;\nimport ch.bfh.egov.nutzenportfolio.persistence.fragebogen.NaOpNuDao;\nimport ch.bfh.egov.nutzenportfolio.persistence.projekt.ProjektDao;\nimport ch.bfh.egov.nutzenportfolio.service.projektgruppe.ProjektgruppeService;\nimport ch.bfh.egov.nutzenportfolio.tos.NaOpNu;\nimport ch.bfh.egov.nutzenportfolio.tos.Projekt;\nimport ch.bfh.egov.nutzenportfolio.tos.Projektgruppe;\nimport ch.bfh.egov.nutzenportfolio.tos.Resultat;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link ProjektDaoService}.\n* It contains ten unit test cases for the {@link ProjektDaoService#auswertung(HttpServletRequest, DynaActionForm, ActionMessages)} method.\n*/\nclass ProjektDaoServiceTest3 {"
	},
	{
		"original_code": "// DetailzieleDaoService.java\n/**\r\n * Nutzenportfolio\r\n * Copyright (C) 2006 Kompetenzzentrum E-Business, Simon Bergamin\r\n *\r\n * This program is free software; you can redistribute it and/or\r\n * modify it under the terms of the GNU General Public License\r\n * as published by the Free Software Foundation; either version 2\r\n * of the License, or (at your option) any later version.\r\n *\r\n * This program is distributed in the hope that it will be useful,\r\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n * GNU General Public License for more details.\r\n *\r\n * You should have received a copy of the GNU General Public License\r\n * along with this program; if not, write to the Free Software\r\n * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\r\n */\r\npackage ch.bfh.egov.nutzenportfolio.service.detailziele;\r\n\r\nimport java.util.Collections;\r\nimport java.util.Comparator;\r\nimport java.util.HashMap;\r\nimport java.util.List;\r\nimport javax.servlet.http.HttpServletRequest;\r\nimport javax.servlet.http.HttpSession;\r\nimport org.apache.commons.logging.Log;\r\nimport org.apache.commons.logging.LogFactory;\r\nimport org.apache.struts.action.ActionMessage;\r\nimport org.apache.struts.action.ActionMessages;\r\nimport org.apache.struts.action.DynaActionForm;\r\nimport ch.bfh.egov.nutzenportfolio.Constants;\r\nimport ch.bfh.egov.nutzenportfolio.persistence.detailziele.DetailzieleDao;\r\nimport ch.bfh.egov.nutzenportfolio.service.common.CommonService;\r\nimport ch.bfh.egov.nutzenportfolio.service.customizing.CustomizingService;\r\nimport ch.bfh.egov.nutzenportfolio.service.strategischeziele.StrategischeZieleService;\r\nimport ch.bfh.egov.nutzenportfolio.tos.Customizing;\r\nimport ch.bfh.egov.nutzenportfolio.tos.Detailziel;\r\nimport ch.bfh.egov.nutzenportfolio.tos.Projekt;\r\nimport ch.bfh.egov.nutzenportfolio.tos.StrategischesZiel;\r\n\r\n/**\r\n * Implementierende Service-Klasse fï¿½r Detailziele.\r\n *\r\n * @author Kompetenzzentrum E-Business, Simon Bergamin\r\n */\r\npublic class DetailzieleDaoService implements DetailzieleService {\r\n\r\n    private DetailzieleDao dao;\r\n\r\n    private CommonService cService;\r\n\r\n    private CustomizingService customizingService;\r\n\r\n    private StrategischeZieleService szService;\r\n\r\n    private Log logger = LogFactory.getLog(this.getClass());\r\n\r\n    /**\r\n     * Konstruktor. ï¿½bergabe des DataAcessObject-Interfaces fï¿½r Detailziele.\r\n     *\r\n     * @param dao                   Detailziel DataAcessObject-Interface\r\n     */\r\n    public DetailzieleDaoService(DetailzieleDao dao) {\r\n        this.dao = dao;\r\n    }\r\n\r\n    /**\r\n     * @see ch.bfh.egov.nutzenportfolio.persistence.detailziele.DetailzieleIbatisDao#getById(Detailziel)\r\n     */\r\n    public Detailziel getById(Detailziel ziel) {\r\n        return dao.getById(ziel);\r\n    }\r\n\r\n    /**\r\n     * @see ch.bfh.egov.nutzenportfolio.persistence.detailziele.DetailzieleIbatisDao#getAll(Integer)\r\n     */\r\n    public List<Detailziel> getAll(Integer mandantId) {\r\n        return dao.getAll(mandantId);\r\n    }\r\n\r\n    /**\r\n     * @see ch.bfh.egov.nutzenportfolio.persistence.detailziele.DetailzieleIbatisDao#getByProjektId(Projekt)\r\n     */\r\n    public List<Detailziel> getByProjektId(Projekt p) {\r\n        return dao.getByProjektId(p);\r\n    }\r\n\r\n    /**\r\n     * @see ch.bfh.egov.nutzenportfolio.persistence.detailziele.DetailzieleIbatisDao#getByStrategischesZiel(Detailziel)\r\n     */\r\n    public List<Detailziel> getByStrategischesZiel(Detailziel ziel) {\r\n        return dao.getByStrategischesZiel(ziel);\r\n    }\r\n\r\n    /**\r\n     * @see ch.bfh.egov.nutzenportfolio.persistence.detailziele.DetailzieleIbatisDao#getByPaAndStrategischesZiel(Detailziel)\r\n     */\r\n    public List<Detailziel> getByPaAndStrategischesZiel(Detailziel ziel) {\r\n        return dao.getByPaAndStrategischesZiel(ziel);\r\n    }\r\n\r\n    /**\r\n     * @see ch.bfh.egov.nutzenportfolio.persistence.detailziele.DetailzieleIbatisDao#getAssignments(Detailziel)\r\n     */\r\n    public List<Detailziel> getAssignments(Detailziel ziel) {\r\n        return dao.getAssignments(ziel);\r\n    }\r\n\r\n    /**\r\n     * @see ch.bfh.egov.nutzenportfolio.persistence.detailziele.DetailzieleIbatisDao#update(Detailziel)\r\n     */\r\n    public void update(Detailziel ziel) {\r\n        dao.update(ziel);\r\n    }\r\n\r\n    /**\r\n     * @see ch.bfh.egov.nutzenportfolio.persistence.detailziele.DetailzieleIbatisDao#insertAssignment(Detailziel)\r\n     */\r\n    public void insertAssignment(Detailziel ziel) {\r\n        dao.insertAssignment(ziel);\r\n    }\r\n\r\n    /**\r\n     * @see ch.bfh.egov.nutzenportfolio.persistence.detailziele.DetailzieleIbatisDao#deleteAssignment(Detailziel)\r\n     */\r\n    public void deleteAssignment(Detailziel ziel) {\r\n        dao.deleteAssignment(ziel);\r\n    }\r\n\r\n    /**\r\n     * @see ch.bfh.egov.nutzenportfolio.persistence.detailziele.DetailzieleIbatisDao#deleteAssignments(Integer)\r\n     */\r\n    public void deleteAssignments(Integer projektattraktivitaetId) {\r\n        dao.deleteAssignments(projektattraktivitaetId);\r\n    }\r\n\r\n    /**\r\n     * Initialisierung dieses Service-Objekts durch ï¿½bergabe anderer,\r\n     * benï¿½tigter Service-Objekte.\r\n     *\r\n     * @param cService                   Common Service Objekt\r\n     * @param customizingService         Customizing Service Objekt\r\n     * @param szService                  Strategische Ziele Service Objekt\r\n     */\r\n    public void init(CommonService cService, CustomizingService customizingService, StrategischeZieleService szService) {\r\n        this.cService = cService;\r\n        this.customizingService = customizingService;\r\n        this.szService = szService;\r\n    }\r\n\r\n    /**\r\n     * Stellt eine Liste aller Detailziele in den request.\r\n     *\r\n     * @param request                   der HttpServletRequest\r\n     */\r\n    public void populate(HttpServletRequest request) {\r\n        Integer mandantId = (Integer) request.getSession().getAttribute(Constants.MANDANT_ID);\r\n        List<Detailziel> detailziele = getAll(mandantId);\r\n        // Sortieren der Detailziele nach Namen\r\n        Collections.<Detailziel>sort(detailziele, new Comparator<Detailziel>() {\r\n\r\n            public int compare(Detailziel a, Detailziel b) {\r\n                String name1 = a.getName().toLowerCase();\r\n                String name2 = b.getName().toLowerCase();\r\n                return name1.compareTo(name2);\r\n            }\r\n        });\r\n        request.setAttribute(Constants.DETAILZIELE, detailziele);\r\n    }\r\n\r\n    /**\r\n     * Fï¿½llt ein Formular mit bestehenden Daten eines Detailziels ab,\r\n     * falls eine entsprechende id angegeben wurde.\r\n     *\r\n     * @param request                   der HttpServletRequest\r\n     * @param form                      das DynaActionForm\r\n     */\r\n    public void edit(HttpServletRequest request, DynaActionForm form) {\r\n        if (isUpdate(request, form)) {\r\n            Detailziel dz = createDetailziel(request, form);\r\n            Integer mandantId = dz.getMandantId();\r\n            dz = dao.getById(dz);\r\n            form.set(\"name\", dz.getName());\r\n            form.set(\"strategischesZielId\", dz.getStrategischesZielId());\r\n            // Strategische Ziele in die Session stellen\r\n            logger.debug(\"Strategische Ziele holen fï¿½r mandantId=\" + mandantId);\r\n            List<StrategischesZiel> szs = szService.getAll(mandantId);\r\n            request.getSession().setAttribute(Constants.STRATEGISCHE_ZIELE, szs);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Fï¿½hrt ein update eines bestenenden Detailziels anhand von\r\n     * Formulardaten durch.\r\n     *\r\n     * @param request                   der HttpServletRequest\r\n     * @param form                      das DynaActionForm\r\n     */\r\n    public void update(HttpServletRequest request, DynaActionForm form) {\r\n        logger.debug(\"Update Detailziel\");\r\n        if (isUpdate(request, form)) {\r\n            logger.debug(\"Update durchfï¿½hren\");\r\n            Detailziel dz = createDetailziel(request, form);\r\n            dao.update(dz);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Prï¿½ft, ob ein Detailziel existiert und gibt es zurï¿½ck.\r\n     *\r\n     * @param request                   der HttpServletRequest\r\n     * @param form                      das DynaActionForm\r\n     * @return                          das Detailziel\r\n     */\r\n    public Detailziel getDetailziel(HttpServletRequest request, DynaActionForm form) {\r\n        Detailziel dz = createDetailziel(request, form);\r\n        return dao.getById(dz);\r\n    }\r\n\r\n    /**\r\n     * Abfrage fï¿½r das Lï¿½schen von einem Detailziel\r\n     *\r\n     * @param request                   der HttpServletRequest\r\n     * @param dz                        das zu lï¿½schende Detailziel\r\n     * @param messages                  das ActionMessages Objekt\r\n     */\r\n    public void deleteQuestion(HttpServletRequest request, Detailziel dz, ActionMessages messages) {\r\n        // Verknï¿½pfungen prï¿½fen\r\n        linkedTo(request, dz);\r\n        // Bestï¿½tigungsnachricht ausgeben\r\n        messages.add(ActionMessages.GLOBAL_MESSAGE, new ActionMessage(\"messages.question.delete\", dz.getName()));\r\n        // Actions zum Lï¿½schen und Abbrechen definieren\r\n        request.setAttribute(Constants.ACTION, Constants.VERWALTUNG_DETAILZIELE_ACTION);\r\n        request.setAttribute(Constants.DISPATCH_YES, Constants.DELETE);\r\n        request.setAttribute(Constants.DISPATCH_NO, Constants.LIST);\r\n        request.setAttribute(Constants.ID_NAME, Constants.DETAILZIEL_ID);\r\n        request.setAttribute(Constants.ID_VALUE, dz.getDetailzielId());\r\n    }\r\n\r\n    /**\r\n     * Setzt die Verknï¿½pfungen zu diesem Detailziel in den Request.\r\n     * Ein Detailziel kann mit Customizings verknï¿½pft sein. Diese\r\n     * Methode wird bei der Lï¿½schabfrage verwendet.\r\n     *\r\n     * @param request                   der HttpServletRequest\r\n     * @param dz                        das zu lï¿½schende Detailziel\r\n     */\r\n    public void linkedTo(HttpServletRequest request, Detailziel dz) {\r\n        HashMap<String, List> map = new HashMap<String, List>();\r\n        // Customizings suchen, die dieses Detailziel benï¿½tigen\r\n        List<Customizing> customizings = dao.getLinkedCustomizings(dz);\r\n        if (customizings.size() > 0) {\r\n            for (Customizing c : customizings) {\r\n                if (c.getStatus()) {\r\n                    request.setAttribute(\"active\", true);\r\n                    break;\r\n                }\r\n            }\r\n            map.put(\"Customizings\", customizings);\r\n        }\r\n        request.setAttribute(\"linked\", map);\r\n    }\r\n\r\n    /**\r\n     * Lï¿½scht ein Detailziel. Falls es mit inaktiven Customizings\r\n     * verknï¿½ft ist, werden diese ebenfalls gelï¿½scht. Wenn aktive Customizings\r\n     * verknï¿½ft sind, wird das Detailziel nicht gelï¿½scht.\r\n     *\r\n     * @param request                   der HttpServletRequest\r\n     * @param dz                        das zu lï¿½schende Detailziel\r\n     */\r\n    public void delete(HttpServletRequest request, Detailziel dz) {\r\n        // Verknï¿½pfungen prï¿½fen\r\n        linkedTo(request, dz);\r\n        Boolean active = (Boolean) request.getAttribute(\"active\");\r\n        // Aktives Customizing verknï¿½ft. Dies sollte nicht passieren ausser bei\r\n        // einem direkten URL-Aufruf ...\r\n        if (active != null && active) {\r\n            logger.debug(\"Aktives Customizing verknï¿½pft, Detailziel wird nicht gelï¿½scht\");\r\n            return;\r\n        }\r\n        // Customizings lï¿½schen\r\n        List<Customizing> customizings = dao.getLinkedCustomizings(dz);\r\n        for (Customizing c : customizings) {\r\n            logger.debug(\"Lï¿½sche Customizing \" + c.getCustomizingId());\r\n            customizingService.cascadeDelete(request, c);\r\n        }\r\n        // Lï¿½schen des Detailziels\r\n        dao.delete(dz.getDetailzielId());\r\n    }\r\n\r\n    /**\r\n     * Speichert ein neues Detailziel und fï¿½gt es dem aktuellen\r\n     * Customizing Projektattraktivitï¿½t zu.\r\n     *\r\n     * @param request                   der HttpServletRequest\r\n     * @param form                      das DynaActionForm mit Daten des Detailziels\r\n     * @param errors                    ActionMessages Objekt zur Ausgabe von\r\n     *                                  Feld-bezogenen Fehlermeldungen\r\n     * @param messages                  ActionMessages Objekt zur Ausgabe von\r\n     *                                  globalen Fehlermeldungen\r\n     * @return                          true bei Erfolg, sonst false\r\n     */\r\n    public boolean add(HttpServletRequest request, DynaActionForm form, ActionMessages errors, ActionMessages messages) {\r\n        Integer mandantId = (Integer) request.getSession().getAttribute(Constants.MANDANT_ID);\r\n        // Formulardaten holen\r\n        String name = (String) form.get(\"name\");\r\n        Boolean quantifizierbar = (Boolean) form.get(\"quantifizierbar\");\r\n        Integer szId = (Integer) form.get(Constants.STRATEGISCHES_ZIEL_ID);\r\n        logger.debug(\"name=\" + name);\r\n        logger.debug(\"quantifizierbar=\" + quantifizierbar);\r\n        logger.debug(\"szId=\" + szId);\r\n        // Formulardaten ï¿½berprï¿½fen\r\n        if (name == null || name.length() == 0) {\r\n            errors.add(\"name\", new ActionMessage(\"errors.required\", \"Name\"));\r\n            return false;\r\n        }\r\n        Detailziel dz = new Detailziel();\r\n        dz.setName(name);\r\n        dz.setQuantifizierbar(quantifizierbar);\r\n        dz.setStrategischesZielId(szId);\r\n        dz.setMandantId(mandantId);\r\n        // Auf duplikate prï¿½fen\r\n        if (dao.getByName(dz) != null) {\r\n            messages.add(ActionMessages.GLOBAL_MESSAGE, new ActionMessage(\"errors.duplicate\", \"Detailziel\"));\r\n            return false;\r\n        }\r\n        // Detailziel einfï¿½gen\r\n        dao.insert(dz);\r\n        // Projektattraktivitï¿½t holen\r\n        Integer customizingId = (Integer) request.getSession().getAttribute(Constants.CUSTOMIZING_ID);\r\n        Integer paId = cService.getProjektattraktivitaetIdByCustomizingId(customizingId);\r\n        dz.setProjektattraktivitaetId(paId);\r\n        // Detailziel setzen\r\n        dao.insertAssignment(dz);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Kopiert alle zugewiesenen Detailziele eines Customizings\r\n     * in ein neues.\r\n     *\r\n     * @param mandantId                     die Id des Mandanten\r\n     * @param paId                          die Id der aktuellen Projektattraktivitï¿½t\r\n     * @param newPaId                       die Id der neuen Projektattraktivitï¿½t\r\n     * @param quantifizierbar               quantifizierbares (true) oder nicht\r\n     *                                      quantifizierbares (false) Detailziel\r\n     */\r\n    public void copy(Integer mandantId, Integer paId, Integer newPaId, boolean quantifizierbar) {\r\n        Detailziel dz = new Detailziel();\r\n        dz.setMandantId(mandantId);\r\n        dz.setQuantifizierbar(quantifizierbar);\r\n        dz.setProjektattraktivitaetId(paId);\r\n        // Zugewiesene Detailziele holen\r\n        List<Detailziel> dzs = dao.getAssignments(dz);\r\n        for (Detailziel d : dzs) {\r\n            d.setProjektattraktivitaetId(newPaId);\r\n            // Detailziele in die neue Projektattraktivitï¿½t kopieren\r\n            dao.insertAssignment(d);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Setzt den Navigations-Status von den Detailzielen\r\n     * eines Customizings.\r\n     *\r\n     * @param request                       HttpServletRequest\r\n     * @param szs                           Liste aller zugewiesenen Strategischen\r\n     *                                      Ziele\r\n     * @param mandantId                     die Id des Mandanten\r\n     * @param paId                          die Id der Projektattraktivitï¿½t\r\n     * @return                              true fï¿½r Status grï¿½n, sonst false\r\n     */\r\n    public boolean setStatus(HttpServletRequest request, List<StrategischesZiel> szs, Integer mandantId, Integer paId) {\r\n        // Quantifizierbare und nicht quantifizierbare Detailziele\r\n        // unterscheiden, Strategische Ziele ï¿½berprï¿½fen\r\n        boolean alleDzQ = true;\r\n        boolean alleDzNQ = true;\r\n        if (szs == null) {\r\n            return false;\r\n        }\r\n        // Mindestens ein Detailziel pro Strategisches Ziel muss angewï¿½hlt sein\r\n        for (StrategischesZiel sz : szs) {\r\n            Detailziel dZiel = new Detailziel();\r\n            dZiel.setStrategischesZielId(sz.getStrategischesZielId());\r\n            dZiel.setProjektattraktivitaetId(paId);\r\n            dZiel.setMandantId(mandantId);\r\n            logger.debug(\"szId=\" + sz.getStrategischesZielId());\r\n            // Quantifizierbar\r\n            dZiel.setQuantifizierbar(true);\r\n            List<Detailziel> dzs = dao.getByPaAndStrategischesZiel(dZiel);\r\n            logger.debug(dzs.size() + \" quantifizierbare Detailziele in der Liste\");\r\n            if (dzs == null || dzs.size() == 0) {\r\n                alleDzQ = false;\r\n            }\r\n            // Nicht quantifizierbar\r\n            dZiel.setQuantifizierbar(false);\r\n            dzs = dao.getByPaAndStrategischesZiel(dZiel);\r\n            logger.debug(dzs.size() + \" nicht quantifizierbare Detailziele in der Liste\");\r\n            if (dzs == null || dzs.size() == 0) {\r\n                alleDzNQ = false;\r\n            }\r\n        }\r\n        HttpSession session = request.getSession();\r\n        if (alleDzQ && alleDzNQ) {\r\n            // Status grï¿½n, Status-Flag in die Session setzen\r\n            logger.debug(\"Alle Strategischen Ziele haben mindestens 1 quantifizierbares Detailziel und 1 nicht quantifizierbares Detailziel\");\r\n            session.setAttribute(Constants.DETAILZIELE, true);\r\n        } else {\r\n            // Status rot, eventuell vorhandenes Flag aus der Session lï¿½schen\r\n            session.removeAttribute(Constants.DETAILZIELE);\r\n        }\r\n        return alleDzQ && alleDzNQ;\r\n    }\r\n\r\n    /**\r\n     * Erstellt ein Objekt vom Typ Detailziel mit der id des Mandanten\r\n     * und, falls angegeben, mit abgefï¿½llten Formulardaten\r\n     *\r\n     * @param request                   der HttpServletRequest\r\n     * @param form                      das DynaActionForm\r\n     * @return                          Detailziel mit mandantId\r\n     */\r\n    private Detailziel createDetailziel(HttpServletRequest request, DynaActionForm form) {\r\n        Integer mandantId = (Integer) request.getSession().getAttribute(Constants.MANDANT_ID);\r\n        Detailziel dz = new Detailziel();\r\n        dz.setMandantId(mandantId);\r\n        if (form != null) {\r\n            Integer dzId = (Integer) form.get(Constants.DETAILZIEL_ID);\r\n            String name = (String) form.get(Constants.NAME);\r\n            Integer szId = (Integer) form.get(Constants.STRATEGISCHES_ZIEL_ID);\r\n            dz.setDetailzielId(dzId);\r\n            dz.setName(name);\r\n            dz.setStrategischesZielId(szId);\r\n        }\r\n        return dz;\r\n    }\r\n\r\n    /**\r\n     * ï¿½berprï¿½ft, ob die Id eines Detailziels im Request ist\r\n     * (update) oder nicht (neu).\r\n     *\r\n     * @param request                   der HttpServletRequest\r\n     * @param form                      das DynaActionForm\r\n     * @return                          true, wenn das angegebene Detailziel\r\n     *                                  besteht, sonst false.\r\n     */\r\n    private boolean isUpdate(HttpServletRequest request, DynaActionForm form) {\r\n        Integer id = (Integer) form.get(Constants.DETAILZIEL_ID);\r\n        if (id == null || id == 0) {\r\n            return false;\r\n        }\r\n        return true;\r\n    }\r\n}\r\n",
		"id": "EvoSuiteBenchmark/46_nutzenportfolio/src/main/java/ch/bfh/egov/nutzenportfolio/service/detailziele/DetailzieleDaoServiceTest.java",
		"test_prompt": "// DetailzieleDaoServiceTest.java\npackage ch.bfh.egov.nutzenportfolio.service.detailziele;\n\nimport java.util.Collections;\nimport java.util.Comparator;\nimport java.util.HashMap;\nimport java.util.List;\nimport javax.servlet.http.HttpServletRequest;\nimport javax.servlet.http.HttpSession;\nimport org.apache.commons.logging.Log;\nimport org.apache.commons.logging.LogFactory;\nimport org.apache.struts.action.ActionMessage;\nimport org.apache.struts.action.ActionMessages;\nimport org.apache.struts.action.DynaActionForm;\nimport ch.bfh.egov.nutzenportfolio.Constants;\nimport ch.bfh.egov.nutzenportfolio.persistence.detailziele.DetailzieleDao;\nimport ch.bfh.egov.nutzenportfolio.service.common.CommonService;\nimport ch.bfh.egov.nutzenportfolio.service.customizing.CustomizingService;\nimport ch.bfh.egov.nutzenportfolio.service.strategischeziele.StrategischeZieleService;\nimport ch.bfh.egov.nutzenportfolio.tos.Customizing;\nimport ch.bfh.egov.nutzenportfolio.tos.Detailziel;\nimport ch.bfh.egov.nutzenportfolio.tos.Projekt;\nimport ch.bfh.egov.nutzenportfolio.tos.StrategischesZiel;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link DetailzieleDaoService}.\n* It contains ten unit test cases for the {@link DetailzieleDaoService#add(HttpServletRequest, DynaActionForm, ActionMessages, ActionMessages)} method.\n*/\nclass DetailzieleDaoServiceTest {"
	},
	{
		"original_code": "// BenutzerDaoService.java\n/**\r\n * Nutzenportfolio\r\n * Copyright (C) 2006 Kompetenzzentrum E-Business, Simon Bergamin\r\n *\r\n * This program is free software; you can redistribute it and/or\r\n * modify it under the terms of the GNU General Public License\r\n * as published by the Free Software Foundation; either version 2\r\n * of the License, or (at your option) any later version.\r\n *\r\n * This program is distributed in the hope that it will be useful,\r\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n * GNU General Public License for more details.\r\n *\r\n * You should have received a copy of the GNU General Public License\r\n * along with this program; if not, write to the Free Software\r\n * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\r\n */\r\npackage ch.bfh.egov.nutzenportfolio.service.benutzer;\r\n\r\nimport java.util.List;\r\nimport org.apache.commons.logging.Log;\r\nimport org.apache.commons.logging.LogFactory;\r\nimport ch.bfh.egov.nutzenportfolio.persistence.benutzer.BenutzerDao;\r\nimport ch.bfh.egov.nutzenportfolio.tos.Benutzer;\r\n\r\n/**\r\n * Implementierende Service-Klasse fï¿½r Benutzer.\r\n *\r\n * @author Kompetenzzentrum E-Business, Simon Bergamin\r\n */\r\npublic class BenutzerDaoService implements BenutzerService {\r\n\r\n    private BenutzerDao dao;\r\n\r\n    private Log logger = LogFactory.getLog(this.getClass());\r\n\r\n    /**\r\n     * Konstruktor. ï¿½bergabe des DataAcessObject-Interfaces fï¿½r Benutzer.\r\n     *\r\n     * @param dao                         Benutzer DataAcessObject-Interface\r\n     */\r\n    public BenutzerDaoService(BenutzerDao dao) {\r\n        this.dao = dao;\r\n    }\r\n\r\n    /**\r\n     * @see ch.bfh.egov.nutzenportfolio.persistence.benutzer.BenutzerIbatisDao#getBenutzer(Integer)\r\n     */\r\n    public Benutzer getBenutzer(Integer id) {\r\n        return dao.getBenutzer(id);\r\n    }\r\n\r\n    /**\r\n     * @see ch.bfh.egov.nutzenportfolio.persistence.benutzer.BenutzerIbatisDao#getBenutzerByBenutzername(String)\r\n     */\r\n    public Benutzer getBenutzerByBenutzername(String benutzername) {\r\n        return dao.getBenutzerByBenutzername(benutzername);\r\n    }\r\n\r\n    /**\r\n     * @see ch.bfh.egov.nutzenportfolio.persistence.benutzer.BenutzerIbatisDao#getAllBenutzer(Integer)\r\n     */\r\n    public List<Benutzer> getAllBenutzer(Integer mandantId) {\r\n        return dao.getAllBenutzer(mandantId);\r\n    }\r\n\r\n    /**\r\n     * @see ch.bfh.egov.nutzenportfolio.persistence.benutzer.BenutzerIbatisDao#insertBenutzer(Benutzer)\r\n     */\r\n    public void insertBenutzer(Benutzer benutzer) {\r\n        dao.insertBenutzer(benutzer);\r\n    }\r\n\r\n    /**\r\n     * @see ch.bfh.egov.nutzenportfolio.persistence.benutzer.BenutzerIbatisDao#updateBenutzer(Benutzer)\r\n     */\r\n    public void updateBenutzer(Benutzer benutzer) {\r\n        dao.updateBenutzer(benutzer);\r\n    }\r\n\r\n    /**\r\n     * @see ch.bfh.egov.nutzenportfolio.persistence.benutzer.BenutzerIbatisDao#deleteBenutzer(Integer)\r\n     */\r\n    public void deleteBenutzer(Integer id) {\r\n        dao.deleteBenutzer(id);\r\n    }\r\n\r\n    /**\r\n     * ï¿½berprï¿½ft das Login eines Benutzers.\r\n     *\r\n     * @param benutzer    die Login-Daten des Benutzers\r\n     * @return            true bei Erfolg, sonst false\r\n     */\r\n    public Benutzer loginSuccessful(Benutzer benutzer) {\r\n        Benutzer user = dao.getBenutzerByBenutzername(benutzer.getBenutzername());\r\n        if (user != null) {\r\n            // TODO add encrypted passwords\r\n            logger.debug(\"Benutzername: \" + user.getBenutzername());\r\n            logger.debug(\"Passwort: \" + user.getPasswort());\r\n            if (user.getPasswort().equals(benutzer.getPasswort())) {\r\n                return user;\r\n            }\r\n        }\r\n        return null;\r\n    }\r\n}\r\n",
		"id": "EvoSuiteBenchmark/46_nutzenportfolio/src/main/java/ch/bfh/egov/nutzenportfolio/service/benutzer/BenutzerDaoServiceTest.java",
		"test_prompt": "// BenutzerDaoServiceTest.java\npackage ch.bfh.egov.nutzenportfolio.service.benutzer;\n\nimport java.util.List;\nimport org.apache.commons.logging.Log;\nimport org.apache.commons.logging.LogFactory;\nimport ch.bfh.egov.nutzenportfolio.persistence.benutzer.BenutzerDao;\nimport ch.bfh.egov.nutzenportfolio.tos.Benutzer;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link BenutzerDaoService}.\n* It contains ten unit test cases for the {@link BenutzerDaoService#loginSuccessful(Benutzer)} method.\n*/\nclass BenutzerDaoServiceTest {"
	},
	{
		"original_code": "// ProjektgruppeDaoService.java\n/**\r\n * Nutzenportfolio\r\n * Copyright (C) 2006 Kompetenzzentrum E-Business, Simon Bergamin\r\n *\r\n * This program is free software; you can redistribute it and/or\r\n * modify it under the terms of the GNU General Public License\r\n * as published by the Free Software Foundation; either version 2\r\n * of the License, or (at your option) any later version.\r\n *\r\n * This program is distributed in the hope that it will be useful,\r\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n * GNU General Public License for more details.\r\n *\r\n * You should have received a copy of the GNU General Public License\r\n * along with this program; if not, write to the Free Software\r\n * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\r\n */\r\npackage ch.bfh.egov.nutzenportfolio.service.projektgruppe;\r\n\r\nimport java.util.List;\r\nimport javax.servlet.http.HttpServletRequest;\r\nimport org.apache.commons.logging.Log;\r\nimport org.apache.commons.logging.LogFactory;\r\nimport org.apache.struts.action.DynaActionForm;\r\nimport ch.bfh.egov.nutzenportfolio.Constants;\r\nimport ch.bfh.egov.nutzenportfolio.persistence.projektgruppe.ProjektgruppeDao;\r\nimport ch.bfh.egov.nutzenportfolio.service.customizing.CustomizingService;\r\nimport ch.bfh.egov.nutzenportfolio.tos.Projektgruppe;\r\n\r\n/**\r\n * Implementierende Service-Klasse fï¿½r Projektgruppen.\r\n *\r\n * @author Kompetenzzentrum E-Business, Simon Bergamin\r\n */\r\npublic class ProjektgruppeDaoService implements ProjektgruppeService {\r\n\r\n    private ProjektgruppeDao dao;\r\n\r\n    private CustomizingService customizingService;\r\n\r\n    private Log logger = LogFactory.getLog(this.getClass());\r\n\r\n    /**\r\n     * Konstruktor. ï¿½bergabe des DataAcessObject-Interfaces fï¿½r Projektgruppen.\r\n     *\r\n     * @param dao                               Projektgruppen DataAcessObject-Interface\r\n     */\r\n    public ProjektgruppeDaoService(ProjektgruppeDao dao) {\r\n        this.dao = dao;\r\n    }\r\n\r\n    /**\r\n     * @see ch.bfh.egov.nutzenportfolio.persistence.projektgruppe.ProjektgruppeDao#getAll(Integer)\r\n     */\r\n    public List getAll(Integer mandantId) {\r\n        return dao.getAll(mandantId);\r\n    }\r\n\r\n    /**\r\n     * @see ch.bfh.egov.nutzenportfolio.persistence.projektgruppe.ProjektgruppeDao#unsetCustomizingId(Integer)\r\n     */\r\n    public void unsetCustomizingId(Integer customizingId) {\r\n        dao.unsetCustomizingId(customizingId);\r\n    }\r\n\r\n    /**\r\n     * Initialisierung dieses Service-Objekts durch ï¿½bergabe anderer,\r\n     * benï¿½tigter Service-Objekte.\r\n     *\r\n     * @param cService                   CustomizingService Objekt\r\n     */\r\n    public void init(CustomizingService cService) {\r\n        this.customizingService = cService;\r\n    }\r\n\r\n    /**\r\n     * Setzt alle vorhandenen Projektgruppen in den request.\r\n     *\r\n     * @param request             der HttpServletRequest\r\n     */\r\n    public void populate(HttpServletRequest request) {\r\n        Projektgruppe p = createProjektgruppe(request);\r\n        List projektgruppen = dao.getAll(p.getMandantId());\r\n        request.setAttribute(Constants.PROJEKTGRUPPEN, projektgruppen);\r\n    }\r\n\r\n    /**\r\n     * Fï¿½llt das Formular mit allen benï¿½tigten Daten ab.\r\n     *\r\n     * @param request             der HttpServletRequest\r\n     * @param form                das DynaActionForm\r\n     */\r\n    public void prepare(HttpServletRequest request, DynaActionForm form) {\r\n        Projektgruppe p = get(request);\r\n        // update?\r\n        if (isUpdate(p)) {\r\n            Integer id = (Integer) form.get(Constants.PROJEKTGRUPPE_ID);\r\n            p.setProjektgruppeId(id);\r\n            // Projektgrupe holen und Daten setzen\r\n            p = dao.getById(p);\r\n            form.set(\"name\", p.getName());\r\n            form.set(\"beschreibung\", p.getBeschreibung());\r\n            form.set(\"customizingId\", p.getCustomizingId());\r\n        }\r\n        List customizings = customizingService.getAll(p.getMandantId());\r\n        logger.debug(customizings.size() + \" Customizings in der Liste\");\r\n        request.getSession().setAttribute(Constants.CUSTOMIZINGS, customizings);\r\n    }\r\n\r\n    /**\r\n     * Erstellt ein Projektgruppe-Objekt aus den Formulardaten.\r\n     *\r\n     * @param request             der HttpServletRequest\r\n     * @param form                das DynaActionForm\r\n     * @return                    eine neue Projektgruppe\r\n     */\r\n    public Projektgruppe get(HttpServletRequest request, DynaActionForm form) {\r\n        // Formulardaten holen\r\n        Integer id = (Integer) form.get(Constants.PROJEKTGRUPPE_ID);\r\n        Integer customizingId = (Integer) form.get(Constants.CUSTOMIZING_ID);\r\n        String name = (String) form.get(\"name\");\r\n        String beschreibung = (String) form.get(\"beschreibung\");\r\n        // Objekt erzeugen\r\n        Projektgruppe p = createProjektgruppe(request);\r\n        p.setProjektgruppeId(id);\r\n        p.setCustomizingId(customizingId);\r\n        p.setName(name);\r\n        p.setBeschreibung(beschreibung);\r\n        return p;\r\n    }\r\n\r\n    /**\r\n     * Erstellt ein Projektgruppe-Objekt anhand der Id aus dem Request.\r\n     *\r\n     * @param request             der HttpServletRequest\r\n     * @return                    eine neue Projektgruppe\r\n     */\r\n    public Projektgruppe get(HttpServletRequest request) {\r\n        // Id der Projektgruppe aus dem Request holen\r\n        String pId = request.getParameter(Constants.PROJEKTGRUPPE_ID);\r\n        Integer id = null;\r\n        try {\r\n            id = new Integer(pId);\r\n        } catch (Exception ex) {\r\n            logger.debug(\"Fehlende projektgruppeId!\");\r\n            return createProjektgruppe(request);\r\n        }\r\n        // Projektgruppe ï¿½berprï¿½fen\r\n        Projektgruppe p = createProjektgruppe(request);\r\n        p.setProjektgruppeId(id);\r\n        p = dao.getById(p);\r\n        if (p == null) {\r\n            logger.warn(\"Projektgruppe mit der id \" + id + \" wurde nicht gefunden.\");\r\n            populate(request);\r\n        }\r\n        return p;\r\n    }\r\n\r\n    /**\r\n     * Speichert die gegebene Projektgruppe ab.\r\n     *\r\n     * @param request             der HttpServletRequest\r\n     * @param p                   die zu speichernde Projektgruppe\r\n     */\r\n    public void save(HttpServletRequest request, Projektgruppe p) {\r\n        // update?\r\n        if (isUpdate(p)) {\r\n            dao.update(p);\r\n        } else // insert\r\n        {\r\n            dao.insert(p);\r\n        }\r\n        populate(request);\r\n    }\r\n\r\n    /**\r\n     * Lï¿½scht eine Projektgruppe.\r\n     *\r\n     * @param request             der HttpServletRequest\r\n     * @return                    true, wenn der Lï¿½schvorgang erfolgreich war,\r\n     *                            sonst false\r\n     */\r\n    public boolean delete(HttpServletRequest request) {\r\n        // Projektgruppe aus dem request holen\r\n        Projektgruppe p = get(request);\r\n        if (p == null) {\r\n            return false;\r\n        }\r\n        // Projektgruppe lï¿½schen\r\n        dao.delete(p);\r\n        populate(request);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Prï¿½ft, ob der Name der angegebenen Projektgruppe bereits vergeben ist\r\n     *\r\n     * @param p                   die zu ï¿½berprï¿½fende Projektgruppe\r\n     * @return                    true, wenn der Name der Projektgruppe\r\n     *                            bereits vergeben ist, sonst false\r\n     */\r\n    public boolean exists(Projektgruppe p) {\r\n        Integer id = p.getProjektgruppeId();\r\n        String name = p.getName();\r\n        // update?\r\n        if (id != null && id != 0) {\r\n            Projektgruppe pg = dao.getById(p);\r\n            // Name geï¿½ndert, ï¿½berprï¿½fen\r\n            if (!name.equals(pg.getName())) {\r\n                return dao.getByName(p) != null;\r\n            }\r\n        } else // insert\r\n        {\r\n            return dao.getByName(p) != null;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    /**\r\n     * Prï¿½ft, ob die angegebene Projektgruppe neu ist, oder ob es sich um\r\n     * ein update handelt.\r\n     *\r\n     * @param p                   die zu ï¿½berprï¿½fende Projektgruppe\r\n     * @return                    true, wenn es sich um ein update handelt,\r\n     *                            sonst false\r\n     */\r\n    private boolean isUpdate(Projektgruppe p) {\r\n        Integer id = p.getProjektgruppeId();\r\n        if (id == null || id == 0) {\r\n            return false;\r\n        }\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Generiert ein Projekgruppe Objekt mit dem aktuellen Mandanten.\r\n     *\r\n     * @param request               der HttpServletRequest\r\n     * @return                      eine Projektgruppe mit gesetzem Mandant\r\n     */\r\n    private Projektgruppe createProjektgruppe(HttpServletRequest request) {\r\n        Projektgruppe p = new Projektgruppe();\r\n        p.setMandantId((Integer) request.getSession().getAttribute(Constants.MANDANT_ID));\r\n        return p;\r\n    }\r\n}\r\n",
		"id": "EvoSuiteBenchmark/46_nutzenportfolio/src/main/java/ch/bfh/egov/nutzenportfolio/service/projektgruppe/ProjektgruppeDaoServiceTest0.java",
		"test_prompt": "// ProjektgruppeDaoServiceTest0.java\npackage ch.bfh.egov.nutzenportfolio.service.projektgruppe;\n\nimport java.util.List;\nimport javax.servlet.http.HttpServletRequest;\nimport org.apache.commons.logging.Log;\nimport org.apache.commons.logging.LogFactory;\nimport org.apache.struts.action.DynaActionForm;\nimport ch.bfh.egov.nutzenportfolio.Constants;\nimport ch.bfh.egov.nutzenportfolio.persistence.projektgruppe.ProjektgruppeDao;\nimport ch.bfh.egov.nutzenportfolio.service.customizing.CustomizingService;\nimport ch.bfh.egov.nutzenportfolio.tos.Projektgruppe;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link ProjektgruppeDaoService}.\n* It contains ten unit test cases for the {@link ProjektgruppeDaoService#delete(HttpServletRequest)} method.\n*/\nclass ProjektgruppeDaoServiceTest0 {"
	},
	{
		"original_code": "// ProjektgruppeDaoService.java\n/**\r\n * Nutzenportfolio\r\n * Copyright (C) 2006 Kompetenzzentrum E-Business, Simon Bergamin\r\n *\r\n * This program is free software; you can redistribute it and/or\r\n * modify it under the terms of the GNU General Public License\r\n * as published by the Free Software Foundation; either version 2\r\n * of the License, or (at your option) any later version.\r\n *\r\n * This program is distributed in the hope that it will be useful,\r\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n * GNU General Public License for more details.\r\n *\r\n * You should have received a copy of the GNU General Public License\r\n * along with this program; if not, write to the Free Software\r\n * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\r\n */\r\npackage ch.bfh.egov.nutzenportfolio.service.projektgruppe;\r\n\r\nimport java.util.List;\r\nimport javax.servlet.http.HttpServletRequest;\r\nimport org.apache.commons.logging.Log;\r\nimport org.apache.commons.logging.LogFactory;\r\nimport org.apache.struts.action.DynaActionForm;\r\nimport ch.bfh.egov.nutzenportfolio.Constants;\r\nimport ch.bfh.egov.nutzenportfolio.persistence.projektgruppe.ProjektgruppeDao;\r\nimport ch.bfh.egov.nutzenportfolio.service.customizing.CustomizingService;\r\nimport ch.bfh.egov.nutzenportfolio.tos.Projektgruppe;\r\n\r\n/**\r\n * Implementierende Service-Klasse fï¿½r Projektgruppen.\r\n *\r\n * @author Kompetenzzentrum E-Business, Simon Bergamin\r\n */\r\npublic class ProjektgruppeDaoService implements ProjektgruppeService {\r\n\r\n    private ProjektgruppeDao dao;\r\n\r\n    private CustomizingService customizingService;\r\n\r\n    private Log logger = LogFactory.getLog(this.getClass());\r\n\r\n    /**\r\n     * Konstruktor. ï¿½bergabe des DataAcessObject-Interfaces fï¿½r Projektgruppen.\r\n     *\r\n     * @param dao                               Projektgruppen DataAcessObject-Interface\r\n     */\r\n    public ProjektgruppeDaoService(ProjektgruppeDao dao) {\r\n        this.dao = dao;\r\n    }\r\n\r\n    /**\r\n     * @see ch.bfh.egov.nutzenportfolio.persistence.projektgruppe.ProjektgruppeDao#getAll(Integer)\r\n     */\r\n    public List getAll(Integer mandantId) {\r\n        return dao.getAll(mandantId);\r\n    }\r\n\r\n    /**\r\n     * @see ch.bfh.egov.nutzenportfolio.persistence.projektgruppe.ProjektgruppeDao#unsetCustomizingId(Integer)\r\n     */\r\n    public void unsetCustomizingId(Integer customizingId) {\r\n        dao.unsetCustomizingId(customizingId);\r\n    }\r\n\r\n    /**\r\n     * Initialisierung dieses Service-Objekts durch ï¿½bergabe anderer,\r\n     * benï¿½tigter Service-Objekte.\r\n     *\r\n     * @param cService                   CustomizingService Objekt\r\n     */\r\n    public void init(CustomizingService cService) {\r\n        this.customizingService = cService;\r\n    }\r\n\r\n    /**\r\n     * Setzt alle vorhandenen Projektgruppen in den request.\r\n     *\r\n     * @param request             der HttpServletRequest\r\n     */\r\n    public void populate(HttpServletRequest request) {\r\n        Projektgruppe p = createProjektgruppe(request);\r\n        List projektgruppen = dao.getAll(p.getMandantId());\r\n        request.setAttribute(Constants.PROJEKTGRUPPEN, projektgruppen);\r\n    }\r\n\r\n    /**\r\n     * Fï¿½llt das Formular mit allen benï¿½tigten Daten ab.\r\n     *\r\n     * @param request             der HttpServletRequest\r\n     * @param form                das DynaActionForm\r\n     */\r\n    public void prepare(HttpServletRequest request, DynaActionForm form) {\r\n        Projektgruppe p = get(request);\r\n        // update?\r\n        if (isUpdate(p)) {\r\n            Integer id = (Integer) form.get(Constants.PROJEKTGRUPPE_ID);\r\n            p.setProjektgruppeId(id);\r\n            // Projektgrupe holen und Daten setzen\r\n            p = dao.getById(p);\r\n            form.set(\"name\", p.getName());\r\n            form.set(\"beschreibung\", p.getBeschreibung());\r\n            form.set(\"customizingId\", p.getCustomizingId());\r\n        }\r\n        List customizings = customizingService.getAll(p.getMandantId());\r\n        logger.debug(customizings.size() + \" Customizings in der Liste\");\r\n        request.getSession().setAttribute(Constants.CUSTOMIZINGS, customizings);\r\n    }\r\n\r\n    /**\r\n     * Erstellt ein Projektgruppe-Objekt aus den Formulardaten.\r\n     *\r\n     * @param request             der HttpServletRequest\r\n     * @param form                das DynaActionForm\r\n     * @return                    eine neue Projektgruppe\r\n     */\r\n    public Projektgruppe get(HttpServletRequest request, DynaActionForm form) {\r\n        // Formulardaten holen\r\n        Integer id = (Integer) form.get(Constants.PROJEKTGRUPPE_ID);\r\n        Integer customizingId = (Integer) form.get(Constants.CUSTOMIZING_ID);\r\n        String name = (String) form.get(\"name\");\r\n        String beschreibung = (String) form.get(\"beschreibung\");\r\n        // Objekt erzeugen\r\n        Projektgruppe p = createProjektgruppe(request);\r\n        p.setProjektgruppeId(id);\r\n        p.setCustomizingId(customizingId);\r\n        p.setName(name);\r\n        p.setBeschreibung(beschreibung);\r\n        return p;\r\n    }\r\n\r\n    /**\r\n     * Erstellt ein Projektgruppe-Objekt anhand der Id aus dem Request.\r\n     *\r\n     * @param request             der HttpServletRequest\r\n     * @return                    eine neue Projektgruppe\r\n     */\r\n    public Projektgruppe get(HttpServletRequest request) {\r\n        // Id der Projektgruppe aus dem Request holen\r\n        String pId = request.getParameter(Constants.PROJEKTGRUPPE_ID);\r\n        Integer id = null;\r\n        try {\r\n            id = new Integer(pId);\r\n        } catch (Exception ex) {\r\n            logger.debug(\"Fehlende projektgruppeId!\");\r\n            return createProjektgruppe(request);\r\n        }\r\n        // Projektgruppe ï¿½berprï¿½fen\r\n        Projektgruppe p = createProjektgruppe(request);\r\n        p.setProjektgruppeId(id);\r\n        p = dao.getById(p);\r\n        if (p == null) {\r\n            logger.warn(\"Projektgruppe mit der id \" + id + \" wurde nicht gefunden.\");\r\n            populate(request);\r\n        }\r\n        return p;\r\n    }\r\n\r\n    /**\r\n     * Speichert die gegebene Projektgruppe ab.\r\n     *\r\n     * @param request             der HttpServletRequest\r\n     * @param p                   die zu speichernde Projektgruppe\r\n     */\r\n    public void save(HttpServletRequest request, Projektgruppe p) {\r\n        // update?\r\n        if (isUpdate(p)) {\r\n            dao.update(p);\r\n        } else // insert\r\n        {\r\n            dao.insert(p);\r\n        }\r\n        populate(request);\r\n    }\r\n\r\n    /**\r\n     * Lï¿½scht eine Projektgruppe.\r\n     *\r\n     * @param request             der HttpServletRequest\r\n     * @return                    true, wenn der Lï¿½schvorgang erfolgreich war,\r\n     *                            sonst false\r\n     */\r\n    public boolean delete(HttpServletRequest request) {\r\n        // Projektgruppe aus dem request holen\r\n        Projektgruppe p = get(request);\r\n        if (p == null) {\r\n            return false;\r\n        }\r\n        // Projektgruppe lï¿½schen\r\n        dao.delete(p);\r\n        populate(request);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Prï¿½ft, ob der Name der angegebenen Projektgruppe bereits vergeben ist\r\n     *\r\n     * @param p                   die zu ï¿½berprï¿½fende Projektgruppe\r\n     * @return                    true, wenn der Name der Projektgruppe\r\n     *                            bereits vergeben ist, sonst false\r\n     */\r\n    public boolean exists(Projektgruppe p) {\r\n        Integer id = p.getProjektgruppeId();\r\n        String name = p.getName();\r\n        // update?\r\n        if (id != null && id != 0) {\r\n            Projektgruppe pg = dao.getById(p);\r\n            // Name geï¿½ndert, ï¿½berprï¿½fen\r\n            if (!name.equals(pg.getName())) {\r\n                return dao.getByName(p) != null;\r\n            }\r\n        } else // insert\r\n        {\r\n            return dao.getByName(p) != null;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    /**\r\n     * Prï¿½ft, ob die angegebene Projektgruppe neu ist, oder ob es sich um\r\n     * ein update handelt.\r\n     *\r\n     * @param p                   die zu ï¿½berprï¿½fende Projektgruppe\r\n     * @return                    true, wenn es sich um ein update handelt,\r\n     *                            sonst false\r\n     */\r\n    private boolean isUpdate(Projektgruppe p) {\r\n        Integer id = p.getProjektgruppeId();\r\n        if (id == null || id == 0) {\r\n            return false;\r\n        }\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Generiert ein Projekgruppe Objekt mit dem aktuellen Mandanten.\r\n     *\r\n     * @param request               der HttpServletRequest\r\n     * @return                      eine Projektgruppe mit gesetzem Mandant\r\n     */\r\n    private Projektgruppe createProjektgruppe(HttpServletRequest request) {\r\n        Projektgruppe p = new Projektgruppe();\r\n        p.setMandantId((Integer) request.getSession().getAttribute(Constants.MANDANT_ID));\r\n        return p;\r\n    }\r\n}\r\n",
		"id": "EvoSuiteBenchmark/46_nutzenportfolio/src/main/java/ch/bfh/egov/nutzenportfolio/service/projektgruppe/ProjektgruppeDaoServiceTest1.java",
		"test_prompt": "// ProjektgruppeDaoServiceTest1.java\npackage ch.bfh.egov.nutzenportfolio.service.projektgruppe;\n\nimport java.util.List;\nimport javax.servlet.http.HttpServletRequest;\nimport org.apache.commons.logging.Log;\nimport org.apache.commons.logging.LogFactory;\nimport org.apache.struts.action.DynaActionForm;\nimport ch.bfh.egov.nutzenportfolio.Constants;\nimport ch.bfh.egov.nutzenportfolio.persistence.projektgruppe.ProjektgruppeDao;\nimport ch.bfh.egov.nutzenportfolio.service.customizing.CustomizingService;\nimport ch.bfh.egov.nutzenportfolio.tos.Projektgruppe;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link ProjektgruppeDaoService}.\n* It contains ten unit test cases for the {@link ProjektgruppeDaoService#exists(Projektgruppe)} method.\n*/\nclass ProjektgruppeDaoServiceTest1 {"
	},
	{
		"original_code": "// KategorieDaoService.java\n/**\n * Nutzenportfolio\n * Copyright (C) 2006 Kompetenzzentrum E-Business, Simon Bergamin\n *\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU General Public License\n * as published by the Free Software Foundation; either version 2\n * of the License, or (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program; if not, write to the Free Software\n * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n */\npackage ch.bfh.egov.nutzenportfolio.service.kategorie;\n\nimport java.util.HashMap;\nimport java.util.List;\nimport javax.servlet.http.HttpServletRequest;\nimport javax.servlet.http.HttpSession;\nimport org.apache.commons.logging.Log;\nimport org.apache.commons.logging.LogFactory;\nimport org.apache.struts.action.ActionMessage;\nimport org.apache.struts.action.ActionMessages;\nimport org.apache.struts.action.DynaActionForm;\nimport ch.bfh.egov.nutzenportfolio.Constants;\nimport ch.bfh.egov.nutzenportfolio.persistence.kategorie.KategorieDao;\nimport ch.bfh.egov.nutzenportfolio.service.common.CommonService;\nimport ch.bfh.egov.nutzenportfolio.service.customizing.CustomizingService;\nimport ch.bfh.egov.nutzenportfolio.service.nutzenkriterium.NutzenkriteriumService;\nimport ch.bfh.egov.nutzenportfolio.tos.Customizing;\nimport ch.bfh.egov.nutzenportfolio.tos.Kategorie;\nimport ch.bfh.egov.nutzenportfolio.tos.NaOpNu;\nimport ch.bfh.egov.nutzenportfolio.tos.Nutzenkriterium;\n\n/**\n * Implementierende Service-Klasse fï¿½r Kategorien.\n *\n * @author Kompetenzzentrum E-Business, Simon Bergamin\n */\npublic class KategorieDaoService implements KategorieService {\n\n    private KategorieDao dao;\n\n    private CommonService cService;\n\n    private CustomizingService customizingService;\n\n    private NutzenkriteriumService nService;\n\n    private Log logger = LogFactory.getLog(this.getClass());\n\n    /**\n     * Konstruktor. ï¿½bergabe des DataAcessObject-Interfaces fï¿½r Kategorien.\n     *\n     * @param dao                   Kategorien DataAcessObject-Interface\n     */\n    public KategorieDaoService(KategorieDao dao) {\n        this.dao = dao;\n    }\n\n    /**\n     * @see ch.bfh.egov.nutzenportfolio.persistence.kategorie.KategorieIbatisDao#getAll(Integer)\n     */\n    public List<Kategorie> getAll(Integer mandantId) {\n        return dao.getAll(mandantId);\n    }\n\n    /**\n     * @see ch.bfh.egov.nutzenportfolio.persistence.kategorie.KategorieIbatisDao#getByProjektId(NaOpNu)\n     */\n    public List<Kategorie> getByProjektId(NaOpNu naOpNu) {\n        return dao.getByProjektId(naOpNu);\n    }\n\n    /**\n     * @see ch.bfh.egov.nutzenportfolio.persistence.kategorie.KategorieIbatisDao#getAssignments(Kategorie)\n     */\n    public List<Kategorie> getAssignments(Kategorie kategorie) {\n        return dao.getAssignments(kategorie);\n    }\n\n    /**\n     * @see ch.bfh.egov.nutzenportfolio.persistence.kategorie.KategorieIbatisDao#updateAssignment(Kategorie)\n     */\n    public void updateAssignment(Kategorie k) {\n        dao.updateAssignment(k);\n    }\n\n    /**\n     * @see ch.bfh.egov.nutzenportfolio.persistence.kategorie.KategorieIbatisDao#deleteAssignments(Integer)\n     */\n    public void deleteAssignments(Integer naOpNuId) {\n        dao.deleteAssignments(naOpNuId);\n    }\n\n    /**\n     * Initialisierung dieses Service-Objekts durch ï¿½bergabe anderer,\n     * benï¿½tigter Service-Objekte.\n     *\n     * @param cService                   CommonService Objekt\n     * @param customizingService         CustomizingService Objekt\n     * @param nService                   NutzenkriteriumService Objekt\n     */\n    public void init(CommonService cService, CustomizingService customizingService, NutzenkriteriumService nService) {\n        this.customizingService = customizingService;\n        this.cService = cService;\n        this.nService = nService;\n    }\n\n    /**\n     * Stellt eine Liste aller Kategorien in den request.\n     *\n     * @param request                   der HttpServletRequest\n     */\n    public void list(HttpServletRequest request) {\n        Integer mandantId = (Integer) request.getSession().getAttribute(Constants.MANDANT_ID);\n        List kategorien = dao.getAll(mandantId);\n        request.setAttribute(Constants.KATEGORIEN, kategorien);\n    }\n\n    /**\n     * Stellt eine Liste aller Kategorien in den request\n     * und selektiert die angewï¿½hlten Kategorien.\n     *\n     * @param request                   der HttpServletRequest\n     * @param form                      das DynaActionForm\n     */\n    public void populate(HttpServletRequest request, DynaActionForm form) {\n        // Benï¿½tigte Ids aus der Session holen\n        HttpSession session = request.getSession();\n        Integer mandantId = (Integer) session.getAttribute(Constants.MANDANT_ID);\n        Integer customizingId = (Integer) session.getAttribute(Constants.CUSTOMIZING_ID);\n        Integer naOpNuId = cService.getNaOpNuId(request, customizingId);\n        // Alle Kategorien holen\n        List kategorien = dao.getAll(mandantId);\n        request.setAttribute(Constants.KATEGORIEN, kategorien);\n        // Selektierte Kategorien holen\n        Kategorie k = new Kategorie();\n        k.setMandantId(mandantId);\n        k.setNutzenattraktivitaetOperativerNutzenId(naOpNuId);\n        Integer[] idArr = getSelectedIdArr(k);\n        form.set(\"kategorienIds\", idArr);\n    }\n\n    /**\n     * Fï¿½llt ein Formular mit bestehenden Daten einer Kategorie ab,\n     * falls eine entsprechende id angegeben wurde.\n     *\n     * @param request                   der HttpServletRequest\n     * @param form                      das DynaActionForm\n     */\n    public void edit(HttpServletRequest request, DynaActionForm form) {\n        if (isUpdate(request, form)) {\n            Kategorie k = createKategorie(request, form);\n            k = dao.getById(k);\n            form.set(\"name\", k.getName());\n            form.set(\"beschreibung\", k.getBeschreibung());\n        }\n    }\n\n    /**\n     * Fï¿½hrt ein update einer bestenenden Kategorie anhand von\n     * Formulardaten durch.\n     *\n     * @param request                   der HttpServletRequest\n     * @param form                      das DynaActionForm\n     */\n    public void update(HttpServletRequest request, DynaActionForm form) {\n        logger.debug(\"Update Kategorie\");\n        if (isUpdate(request, form)) {\n            logger.debug(\"Update durchfï¿½hren\");\n            Kategorie k = createKategorie(request, form);\n            dao.update(k);\n        }\n    }\n\n    /**\n     * Prï¿½ft, ob eine Kategorie existiert und gibt sie zurï¿½ck.\n     *\n     * @param request                   der HttpServletRequest\n     * @param form                      das DynaActionForm\n     * @return                          die Kategorie\n     */\n    public Kategorie getKategorie(HttpServletRequest request, DynaActionForm form) {\n        Kategorie k = createKategorie(request, form);\n        return dao.getById(k);\n    }\n\n    /**\n     * Abfrage fï¿½r das Lï¿½schen von einer Kategorie.\n     *\n     * @param request                   der HttpServletRequest\n     * @param kategorie                 die zu lï¿½schende Kategorie\n     * @param messages                  das ActionMessages Objekt\n     */\n    public void deleteQuestion(HttpServletRequest request, Kategorie kategorie, ActionMessages messages) {\n        // Verknï¿½pfungen prï¿½fen\n        linkedTo(request, kategorie);\n        // Bestï¿½tigungsnachricht ausgeben\n        messages.add(ActionMessages.GLOBAL_MESSAGE, new ActionMessage(\"messages.question.delete\", kategorie.getName()));\n        // Actions zum Lï¿½schen und Abbrechen definieren\n        request.setAttribute(Constants.ACTION, Constants.VERWALTUNG_KATEGORIEN_ACTION);\n        request.setAttribute(Constants.DISPATCH_YES, Constants.DELETE);\n        request.setAttribute(Constants.DISPATCH_NO, Constants.LIST);\n        request.setAttribute(Constants.ID_NAME, Constants.KATEGORIE_ID);\n        request.setAttribute(Constants.ID_VALUE, kategorie.getKategorieId());\n    }\n\n    /**\n     * Setzt die Verknï¿½pfungen zu dieser Kategorie in den Request.\n     * Eine Kategorie kann mit Nutzenkriterien und / oder Customizings\n     * verknï¿½pft sein. Diese Methode wird bei der Lï¿½schabfrage verwendet.\n     *\n     * @param request                   der HttpServletRequest\n     * @param kategorie                 die zu lï¿½schende Kategorie\n     */\n    public void linkedTo(HttpServletRequest request, Kategorie kategorie) {\n        HashMap<String, List> map = new HashMap<String, List>();\n        // Customizings suchen, die dieses Strategische Ziel benï¿½tigen\n        List<Customizing> customizings = dao.getLinkedCustomizings(kategorie);\n        if (customizings.size() > 0) {\n            for (Customizing c : customizings) {\n                if (c.getStatus()) {\n                    request.setAttribute(\"active\", true);\n                    break;\n                }\n            }\n            map.put(\"Customizings\", customizings);\n        }\n        // Nutzenkriterien suchen, die diese Kategorie benï¿½tigen\n        List<Nutzenkriterium> kriterien = dao.getLinkedNutzenkriterien(kategorie);\n        if (kriterien.size() > 0) {\n            map.put(Constants.NUTZENKRITERIEN, kriterien);\n        }\n        request.setAttribute(\"linked\", map);\n    }\n\n    /**\n     * Lï¿½scht eine Kategorie. Falls sie mit inaktiven Customizings\n     * verknï¿½ft ist, werden diese ebenfalls gelï¿½scht. Wenn aktive Customizings\n     * verknï¿½ft sind, wird die Kategorie nicht gelï¿½scht. Verknï¿½pfte\n     * Nutzenkriterien werden nicht gelï¿½scht.\n     *\n     * @param request                   der HttpServletRequest\n     * @param kategorie                 die zu lï¿½schende Kategorie\n     */\n    public void delete(HttpServletRequest request, Kategorie kategorie) {\n        // Verknï¿½pfungen prï¿½fen\n        linkedTo(request, kategorie);\n        Boolean active = (Boolean) request.getAttribute(\"active\");\n        // Aktives Customizing verknï¿½ft. Dies sollte nicht passieren ausser bei\n        // einem direkten URL-Aufruf ...\n        if (active != null && active) {\n            logger.debug(\"Aktives Customizing verknï¿½pft, Kategorie wird nicht gelï¿½scht\");\n            return;\n        }\n        // Customizings lï¿½schen\n        List<Customizing> customizings = dao.getLinkedCustomizings(kategorie);\n        for (Customizing c : customizings) {\n            logger.debug(\"Lï¿½sche Customizing \" + c.getCustomizingId());\n            customizingService.cascadeDelete(request, c);\n        }\n        // Id der Kategorie aus der Nutzenkriterium Tabelle lï¿½schen\n        List<Nutzenkriterium> kriterien = dao.getLinkedNutzenkriterien(kategorie);\n        for (Nutzenkriterium n : kriterien) {\n            logger.debug(\"Lï¿½sche Zuweisung kategorieId des Nutzenkriteriums \" + n.getNutzenkriteriumId());\n            n.setKategorieId(null);\n            nService.update(n);\n        }\n        // Lï¿½schen der Kategorie\n        dao.delete(kategorie);\n    }\n\n    /**\n     * Speichert die gewï¿½hlten Zuweisungen von Kategorien zum aktuellen Customizing.\n     *\n     * @param request                       HttpServletRequest\n     * @param form                          Formular mit Daten der neuen Kategorie\n     * @return                              true bei Erfolg, sonst false\n     */\n    public boolean save(HttpServletRequest request, DynaActionForm form) {\n        // Benï¿½tigte Ids aus der Session holen\n        HttpSession session = request.getSession();\n        Integer customizingId = (Integer) session.getAttribute(Constants.CUSTOMIZING_ID);\n        Integer mandantId = (Integer) session.getAttribute(Constants.MANDANT_ID);\n        // Formulardaten holen\n        Integer[] ids = (Integer[]) form.get(\"kategorienIds\");\n        if (ids == null || ids.length == 0) {\n            logger.info(\"Keine Kategorien gewï¿½hlt\");\n            populate(request, form);\n            return false;\n        }\n        // Zuweisungen lï¿½schen\n        Integer naOpNuId = cService.getNaOpNuId(request, customizingId);\n        dao.deleteAssignments(naOpNuId);\n        // Kategorien zuweisen\n        logger.debug(\"Kategorien angewï¿½hlt: \" + ids.length);\n        for (int i = 0; i < ids.length; i++) {\n            Integer kategorieId = ids[i];\n            logger.debug(\"Fï¿½ge Kategorie \" + kategorieId + \" hinzu.\");\n            Kategorie k = new Kategorie();\n            k.setKategorieId(kategorieId);\n            k.setNutzenattraktivitaetOperativerNutzenId(naOpNuId);\n            dao.insertAssignment(k);\n        }\n        boolean isNa = !cService.isOperativerNutzen(request);\n        setStatus(request, mandantId, naOpNuId, isNa);\n        return true;\n    }\n\n    /**\n     * Fï¿½gt eine neue Kategorie ein.\n     *\n     * @param request                       HttpServletRequest\n     * @param form                          Formular mit Daten der neuen Kategorie\n     * @param errors                        ActionMessages Objekt zur ï¿½bergabe\n     *                                      von spezifischen Fehlermeldungen\n     * @param messages                      ActionMessages Objekt zur ï¿½bergabe\n     *                                      von globalen Fehlermeldungen\n     * @return                              true bei Erfolg, sonst false\n     */\n    public boolean add(HttpServletRequest request, DynaActionForm form, ActionMessages errors, ActionMessages messages) {\n        // Formulardaten holen\n        String name = (String) form.get(\"name\");\n        String beschreibung = (String) form.get(\"beschreibung\");\n        logger.debug(\"name=\" + name);\n        logger.debug(\"beschreibung=\" + beschreibung);\n        // Formulardaten ï¿½berprï¿½fen\n        if (name == null || name.length() == 0) {\n            errors.add(\"name\", new ActionMessage(\"errors.required\", \"Name\"));\n            return false;\n        } else if (beschreibung == null || beschreibung.length() == 0) {\n            errors.add(\"beschreibung\", new ActionMessage(\"errors.required\", \"Beschreibung\"));\n            return false;\n        }\n        Integer mandantId = (Integer) request.getSession().getAttribute(Constants.MANDANT_ID);\n        Kategorie k = new Kategorie();\n        k.setMandantId(mandantId);\n        k.setName(name);\n        k.setBeschreibung(beschreibung);\n        // Auf duplikate prï¿½fen\n        if (dao.getByName(k) != null) {\n            messages.add(ActionMessages.GLOBAL_MESSAGE, new ActionMessage(\"errors.duplicate\", \"Kategorie\"));\n            return false;\n        }\n        // Kategorie einfï¿½gen\n        dao.insert(k);\n        return true;\n    }\n\n    /**\n     * Kopiert alle zugewiesenen Kategorien eines Customizings\n     * in ein neues.\n     *\n     * @param mandantId                     die Id des Mandanten\n     * @param naOpNuId                      die Id der aktuellen Nutzenattraktivitï¿½t\n     *                                      bzw. des aktuellen Operativen Nutzens\n     * @param newNaOpNuId                   die Id der neuen Nutzenattraktivitï¿½t\n     *                                      bzw. des neuen Operativen Nutzens\n     */\n    public void copy(Integer mandantId, Integer naOpNuId, Integer newNaOpNuId) {\n        Kategorie k = new Kategorie();\n        k.setMandantId(mandantId);\n        k.setNutzenattraktivitaetOperativerNutzenId(naOpNuId);\n        // Zugewiesene Kategorien holen\n        List<Kategorie> kategorien = dao.getAssignments(k);\n        for (Kategorie kategorie : kategorien) {\n            kategorie.setNutzenattraktivitaetOperativerNutzenId(newNaOpNuId);\n            // Kategorien in die neue Nutzenattraktivitï¿½t bzw. den\n            // neuen Operativen Nutzen kopieren\n            dao.insertAssignment(kategorie);\n        }\n    }\n\n    /**\n     * Setzt den Navigations-Status von den Kategorien\n     * eines Customizings.\n     *\n     * @param request                       HttpServletRequest\n     * @param mandantId                     die Id des Mandanten\n     * @param naOpNuId                      die Id der Nutzenattraktivitï¿½t\n     *                                      bzw. des Operativen Nutzens\n     * @return                              Liste aller zugewiesenen Kategorien\n     */\n    public List<Kategorie> setStatus(HttpServletRequest request, Integer mandantId, Integer naOpNuId, boolean isNa) {\n        Kategorie k = new Kategorie();\n        k.setMandantId(mandantId);\n        k.setNutzenattraktivitaetOperativerNutzenId(naOpNuId);\n        // Zugewiesene Kategorien holen\n        List<Kategorie> kategorien = dao.getAssignments(k);\n        HttpSession session = request.getSession();\n        // Mindestens eine Kategorie muss angewï¿½hlt sein\n        if (kategorien != null && kategorien.size() > 0) {\n            // Status grï¿½n, Status-Flag in die Session setzen\n            // Status fï¿½r das Customizing Nutzenattraktivitï¿½t\n            if (isNa) {\n                session.setAttribute(Constants.KATEGORIEN_NA, true);\n            } else // Status fï¿½r das Customizing Operativer Nutzen\n            {\n                session.setAttribute(Constants.KATEGORIEN_OP_NU, true);\n            }\n            return kategorien;\n        } else // Status rot, eventuell vorhandenes Flag aus der Session lï¿½schen\n        {\n            // Status fï¿½r das Customizing Nutzenattraktivitï¿½t\n            if (isNa) {\n                session.removeAttribute(Constants.KATEGORIEN_NA);\n            } else // Status fï¿½r das Customizing Operativer Nutzen\n            {\n                session.removeAttribute(Constants.KATEGORIEN_OP_NU);\n            }\n        }\n        return null;\n    }\n\n    /**\n     * Holt die die zugewiesenen Kategorien zu dem angegeben\n     * Customizing und gibt sie als Array von Ids zurï¿½ck.<br/>\n     * TODO Customizing Objekt ï¿½bergeben macht mehr Sinn\n     *\n     * @param k                             Daten des aktuellen Customizings\n     * @return                              Integer Array mit Ids aller\n     *                                      zugewiesenen Kategorien\n     */\n    private Integer[] getSelectedIdArr(Kategorie k) {\n        logger.debug(\"Hole kategorieIds: mandantId=\" + k.getMandantId() + \", customizingId=\" + k.getCustomizingId());\n        // TODO Performance-Gewinn mï¿½glich durch eigene SQL Abfrage\n        List<Kategorie> kategorien = dao.getAssignments(k);\n        logger.debug(kategorien.size() + \" ids gefunden.\");\n        Integer[] ids = new Integer[kategorien.size()];\n        int i = 0;\n        for (Kategorie kategorie : kategorien) {\n            ids[i++] = kategorie.getKategorieId();\n        }\n        return ids;\n    }\n\n    /**\n     * Erstellt ein Objekt vom Typ Kategorie mit der id des Mandanten\n     * und, falls angegeben, mit abgefï¿½llten Formulardaten\n     *\n     * @param request                   der HttpServletRequest\n     * @param form                      das DynaActionForm\n     * @return                          Kategorie mit mandantId\n     */\n    private Kategorie createKategorie(HttpServletRequest request, DynaActionForm form) {\n        Integer mandantId = (Integer) request.getSession().getAttribute(Constants.MANDANT_ID);\n        Kategorie kategorie = new Kategorie();\n        kategorie.setMandantId(mandantId);\n        if (form != null) {\n            Integer id = (Integer) form.get(Constants.KATEGORIE_ID);\n            String name = (String) form.get(\"name\");\n            String beschreibung = (String) form.get(\"beschreibung\");\n            kategorie.setKategorieId(id);\n            kategorie.setName(name);\n            kategorie.setBeschreibung(beschreibung);\n        }\n        return kategorie;\n    }\n\n    /**\n     * ï¿½berprï¿½ft, ob die Id einer Kategorie im Request ist\n     * (update) oder nicht (neu).\n     *\n     * @param request                   der HttpServletRequest\n     * @param form                      das DynaActionForm\n     * @return                          true, wenn die angegebene Kategorie\n     *                                  besteht, sonst false.\n     */\n    private boolean isUpdate(HttpServletRequest request, DynaActionForm form) {\n        Integer id = (Integer) form.get(Constants.KATEGORIE_ID);\n        if (id == null || id == 0) {\n            return false;\n        }\n        return true;\n    }\n}\n",
		"id": "EvoSuiteBenchmark/46_nutzenportfolio/src/main/java/ch/bfh/egov/nutzenportfolio/service/kategorie/KategorieDaoServiceTest0.java",
		"test_prompt": "// KategorieDaoServiceTest0.java\npackage ch.bfh.egov.nutzenportfolio.service.kategorie;\n\nimport java.util.HashMap;\nimport java.util.List;\nimport javax.servlet.http.HttpServletRequest;\nimport javax.servlet.http.HttpSession;\nimport org.apache.commons.logging.Log;\nimport org.apache.commons.logging.LogFactory;\nimport org.apache.struts.action.ActionMessage;\nimport org.apache.struts.action.ActionMessages;\nimport org.apache.struts.action.DynaActionForm;\nimport ch.bfh.egov.nutzenportfolio.Constants;\nimport ch.bfh.egov.nutzenportfolio.persistence.kategorie.KategorieDao;\nimport ch.bfh.egov.nutzenportfolio.service.common.CommonService;\nimport ch.bfh.egov.nutzenportfolio.service.customizing.CustomizingService;\nimport ch.bfh.egov.nutzenportfolio.service.nutzenkriterium.NutzenkriteriumService;\nimport ch.bfh.egov.nutzenportfolio.tos.Customizing;\nimport ch.bfh.egov.nutzenportfolio.tos.Kategorie;\nimport ch.bfh.egov.nutzenportfolio.tos.NaOpNu;\nimport ch.bfh.egov.nutzenportfolio.tos.Nutzenkriterium;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link KategorieDaoService}.\n* It contains ten unit test cases for the {@link KategorieDaoService#save(HttpServletRequest, DynaActionForm)} method.\n*/\nclass KategorieDaoServiceTest0 {"
	},
	{
		"original_code": "// KategorieDaoService.java\n/**\n * Nutzenportfolio\n * Copyright (C) 2006 Kompetenzzentrum E-Business, Simon Bergamin\n *\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU General Public License\n * as published by the Free Software Foundation; either version 2\n * of the License, or (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program; if not, write to the Free Software\n * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n */\npackage ch.bfh.egov.nutzenportfolio.service.kategorie;\n\nimport java.util.HashMap;\nimport java.util.List;\nimport javax.servlet.http.HttpServletRequest;\nimport javax.servlet.http.HttpSession;\nimport org.apache.commons.logging.Log;\nimport org.apache.commons.logging.LogFactory;\nimport org.apache.struts.action.ActionMessage;\nimport org.apache.struts.action.ActionMessages;\nimport org.apache.struts.action.DynaActionForm;\nimport ch.bfh.egov.nutzenportfolio.Constants;\nimport ch.bfh.egov.nutzenportfolio.persistence.kategorie.KategorieDao;\nimport ch.bfh.egov.nutzenportfolio.service.common.CommonService;\nimport ch.bfh.egov.nutzenportfolio.service.customizing.CustomizingService;\nimport ch.bfh.egov.nutzenportfolio.service.nutzenkriterium.NutzenkriteriumService;\nimport ch.bfh.egov.nutzenportfolio.tos.Customizing;\nimport ch.bfh.egov.nutzenportfolio.tos.Kategorie;\nimport ch.bfh.egov.nutzenportfolio.tos.NaOpNu;\nimport ch.bfh.egov.nutzenportfolio.tos.Nutzenkriterium;\n\n/**\n * Implementierende Service-Klasse fï¿½r Kategorien.\n *\n * @author Kompetenzzentrum E-Business, Simon Bergamin\n */\npublic class KategorieDaoService implements KategorieService {\n\n    private KategorieDao dao;\n\n    private CommonService cService;\n\n    private CustomizingService customizingService;\n\n    private NutzenkriteriumService nService;\n\n    private Log logger = LogFactory.getLog(this.getClass());\n\n    /**\n     * Konstruktor. ï¿½bergabe des DataAcessObject-Interfaces fï¿½r Kategorien.\n     *\n     * @param dao                   Kategorien DataAcessObject-Interface\n     */\n    public KategorieDaoService(KategorieDao dao) {\n        this.dao = dao;\n    }\n\n    /**\n     * @see ch.bfh.egov.nutzenportfolio.persistence.kategorie.KategorieIbatisDao#getAll(Integer)\n     */\n    public List<Kategorie> getAll(Integer mandantId) {\n        return dao.getAll(mandantId);\n    }\n\n    /**\n     * @see ch.bfh.egov.nutzenportfolio.persistence.kategorie.KategorieIbatisDao#getByProjektId(NaOpNu)\n     */\n    public List<Kategorie> getByProjektId(NaOpNu naOpNu) {\n        return dao.getByProjektId(naOpNu);\n    }\n\n    /**\n     * @see ch.bfh.egov.nutzenportfolio.persistence.kategorie.KategorieIbatisDao#getAssignments(Kategorie)\n     */\n    public List<Kategorie> getAssignments(Kategorie kategorie) {\n        return dao.getAssignments(kategorie);\n    }\n\n    /**\n     * @see ch.bfh.egov.nutzenportfolio.persistence.kategorie.KategorieIbatisDao#updateAssignment(Kategorie)\n     */\n    public void updateAssignment(Kategorie k) {\n        dao.updateAssignment(k);\n    }\n\n    /**\n     * @see ch.bfh.egov.nutzenportfolio.persistence.kategorie.KategorieIbatisDao#deleteAssignments(Integer)\n     */\n    public void deleteAssignments(Integer naOpNuId) {\n        dao.deleteAssignments(naOpNuId);\n    }\n\n    /**\n     * Initialisierung dieses Service-Objekts durch ï¿½bergabe anderer,\n     * benï¿½tigter Service-Objekte.\n     *\n     * @param cService                   CommonService Objekt\n     * @param customizingService         CustomizingService Objekt\n     * @param nService                   NutzenkriteriumService Objekt\n     */\n    public void init(CommonService cService, CustomizingService customizingService, NutzenkriteriumService nService) {\n        this.customizingService = customizingService;\n        this.cService = cService;\n        this.nService = nService;\n    }\n\n    /**\n     * Stellt eine Liste aller Kategorien in den request.\n     *\n     * @param request                   der HttpServletRequest\n     */\n    public void list(HttpServletRequest request) {\n        Integer mandantId = (Integer) request.getSession().getAttribute(Constants.MANDANT_ID);\n        List kategorien = dao.getAll(mandantId);\n        request.setAttribute(Constants.KATEGORIEN, kategorien);\n    }\n\n    /**\n     * Stellt eine Liste aller Kategorien in den request\n     * und selektiert die angewï¿½hlten Kategorien.\n     *\n     * @param request                   der HttpServletRequest\n     * @param form                      das DynaActionForm\n     */\n    public void populate(HttpServletRequest request, DynaActionForm form) {\n        // Benï¿½tigte Ids aus der Session holen\n        HttpSession session = request.getSession();\n        Integer mandantId = (Integer) session.getAttribute(Constants.MANDANT_ID);\n        Integer customizingId = (Integer) session.getAttribute(Constants.CUSTOMIZING_ID);\n        Integer naOpNuId = cService.getNaOpNuId(request, customizingId);\n        // Alle Kategorien holen\n        List kategorien = dao.getAll(mandantId);\n        request.setAttribute(Constants.KATEGORIEN, kategorien);\n        // Selektierte Kategorien holen\n        Kategorie k = new Kategorie();\n        k.setMandantId(mandantId);\n        k.setNutzenattraktivitaetOperativerNutzenId(naOpNuId);\n        Integer[] idArr = getSelectedIdArr(k);\n        form.set(\"kategorienIds\", idArr);\n    }\n\n    /**\n     * Fï¿½llt ein Formular mit bestehenden Daten einer Kategorie ab,\n     * falls eine entsprechende id angegeben wurde.\n     *\n     * @param request                   der HttpServletRequest\n     * @param form                      das DynaActionForm\n     */\n    public void edit(HttpServletRequest request, DynaActionForm form) {\n        if (isUpdate(request, form)) {\n            Kategorie k = createKategorie(request, form);\n            k = dao.getById(k);\n            form.set(\"name\", k.getName());\n            form.set(\"beschreibung\", k.getBeschreibung());\n        }\n    }\n\n    /**\n     * Fï¿½hrt ein update einer bestenenden Kategorie anhand von\n     * Formulardaten durch.\n     *\n     * @param request                   der HttpServletRequest\n     * @param form                      das DynaActionForm\n     */\n    public void update(HttpServletRequest request, DynaActionForm form) {\n        logger.debug(\"Update Kategorie\");\n        if (isUpdate(request, form)) {\n            logger.debug(\"Update durchfï¿½hren\");\n            Kategorie k = createKategorie(request, form);\n            dao.update(k);\n        }\n    }\n\n    /**\n     * Prï¿½ft, ob eine Kategorie existiert und gibt sie zurï¿½ck.\n     *\n     * @param request                   der HttpServletRequest\n     * @param form                      das DynaActionForm\n     * @return                          die Kategorie\n     */\n    public Kategorie getKategorie(HttpServletRequest request, DynaActionForm form) {\n        Kategorie k = createKategorie(request, form);\n        return dao.getById(k);\n    }\n\n    /**\n     * Abfrage fï¿½r das Lï¿½schen von einer Kategorie.\n     *\n     * @param request                   der HttpServletRequest\n     * @param kategorie                 die zu lï¿½schende Kategorie\n     * @param messages                  das ActionMessages Objekt\n     */\n    public void deleteQuestion(HttpServletRequest request, Kategorie kategorie, ActionMessages messages) {\n        // Verknï¿½pfungen prï¿½fen\n        linkedTo(request, kategorie);\n        // Bestï¿½tigungsnachricht ausgeben\n        messages.add(ActionMessages.GLOBAL_MESSAGE, new ActionMessage(\"messages.question.delete\", kategorie.getName()));\n        // Actions zum Lï¿½schen und Abbrechen definieren\n        request.setAttribute(Constants.ACTION, Constants.VERWALTUNG_KATEGORIEN_ACTION);\n        request.setAttribute(Constants.DISPATCH_YES, Constants.DELETE);\n        request.setAttribute(Constants.DISPATCH_NO, Constants.LIST);\n        request.setAttribute(Constants.ID_NAME, Constants.KATEGORIE_ID);\n        request.setAttribute(Constants.ID_VALUE, kategorie.getKategorieId());\n    }\n\n    /**\n     * Setzt die Verknï¿½pfungen zu dieser Kategorie in den Request.\n     * Eine Kategorie kann mit Nutzenkriterien und / oder Customizings\n     * verknï¿½pft sein. Diese Methode wird bei der Lï¿½schabfrage verwendet.\n     *\n     * @param request                   der HttpServletRequest\n     * @param kategorie                 die zu lï¿½schende Kategorie\n     */\n    public void linkedTo(HttpServletRequest request, Kategorie kategorie) {\n        HashMap<String, List> map = new HashMap<String, List>();\n        // Customizings suchen, die dieses Strategische Ziel benï¿½tigen\n        List<Customizing> customizings = dao.getLinkedCustomizings(kategorie);\n        if (customizings.size() > 0) {\n            for (Customizing c : customizings) {\n                if (c.getStatus()) {\n                    request.setAttribute(\"active\", true);\n                    break;\n                }\n            }\n            map.put(\"Customizings\", customizings);\n        }\n        // Nutzenkriterien suchen, die diese Kategorie benï¿½tigen\n        List<Nutzenkriterium> kriterien = dao.getLinkedNutzenkriterien(kategorie);\n        if (kriterien.size() > 0) {\n            map.put(Constants.NUTZENKRITERIEN, kriterien);\n        }\n        request.setAttribute(\"linked\", map);\n    }\n\n    /**\n     * Lï¿½scht eine Kategorie. Falls sie mit inaktiven Customizings\n     * verknï¿½ft ist, werden diese ebenfalls gelï¿½scht. Wenn aktive Customizings\n     * verknï¿½ft sind, wird die Kategorie nicht gelï¿½scht. Verknï¿½pfte\n     * Nutzenkriterien werden nicht gelï¿½scht.\n     *\n     * @param request                   der HttpServletRequest\n     * @param kategorie                 die zu lï¿½schende Kategorie\n     */\n    public void delete(HttpServletRequest request, Kategorie kategorie) {\n        // Verknï¿½pfungen prï¿½fen\n        linkedTo(request, kategorie);\n        Boolean active = (Boolean) request.getAttribute(\"active\");\n        // Aktives Customizing verknï¿½ft. Dies sollte nicht passieren ausser bei\n        // einem direkten URL-Aufruf ...\n        if (active != null && active) {\n            logger.debug(\"Aktives Customizing verknï¿½pft, Kategorie wird nicht gelï¿½scht\");\n            return;\n        }\n        // Customizings lï¿½schen\n        List<Customizing> customizings = dao.getLinkedCustomizings(kategorie);\n        for (Customizing c : customizings) {\n            logger.debug(\"Lï¿½sche Customizing \" + c.getCustomizingId());\n            customizingService.cascadeDelete(request, c);\n        }\n        // Id der Kategorie aus der Nutzenkriterium Tabelle lï¿½schen\n        List<Nutzenkriterium> kriterien = dao.getLinkedNutzenkriterien(kategorie);\n        for (Nutzenkriterium n : kriterien) {\n            logger.debug(\"Lï¿½sche Zuweisung kategorieId des Nutzenkriteriums \" + n.getNutzenkriteriumId());\n            n.setKategorieId(null);\n            nService.update(n);\n        }\n        // Lï¿½schen der Kategorie\n        dao.delete(kategorie);\n    }\n\n    /**\n     * Speichert die gewï¿½hlten Zuweisungen von Kategorien zum aktuellen Customizing.\n     *\n     * @param request                       HttpServletRequest\n     * @param form                          Formular mit Daten der neuen Kategorie\n     * @return                              true bei Erfolg, sonst false\n     */\n    public boolean save(HttpServletRequest request, DynaActionForm form) {\n        // Benï¿½tigte Ids aus der Session holen\n        HttpSession session = request.getSession();\n        Integer customizingId = (Integer) session.getAttribute(Constants.CUSTOMIZING_ID);\n        Integer mandantId = (Integer) session.getAttribute(Constants.MANDANT_ID);\n        // Formulardaten holen\n        Integer[] ids = (Integer[]) form.get(\"kategorienIds\");\n        if (ids == null || ids.length == 0) {\n            logger.info(\"Keine Kategorien gewï¿½hlt\");\n            populate(request, form);\n            return false;\n        }\n        // Zuweisungen lï¿½schen\n        Integer naOpNuId = cService.getNaOpNuId(request, customizingId);\n        dao.deleteAssignments(naOpNuId);\n        // Kategorien zuweisen\n        logger.debug(\"Kategorien angewï¿½hlt: \" + ids.length);\n        for (int i = 0; i < ids.length; i++) {\n            Integer kategorieId = ids[i];\n            logger.debug(\"Fï¿½ge Kategorie \" + kategorieId + \" hinzu.\");\n            Kategorie k = new Kategorie();\n            k.setKategorieId(kategorieId);\n            k.setNutzenattraktivitaetOperativerNutzenId(naOpNuId);\n            dao.insertAssignment(k);\n        }\n        boolean isNa = !cService.isOperativerNutzen(request);\n        setStatus(request, mandantId, naOpNuId, isNa);\n        return true;\n    }\n\n    /**\n     * Fï¿½gt eine neue Kategorie ein.\n     *\n     * @param request                       HttpServletRequest\n     * @param form                          Formular mit Daten der neuen Kategorie\n     * @param errors                        ActionMessages Objekt zur ï¿½bergabe\n     *                                      von spezifischen Fehlermeldungen\n     * @param messages                      ActionMessages Objekt zur ï¿½bergabe\n     *                                      von globalen Fehlermeldungen\n     * @return                              true bei Erfolg, sonst false\n     */\n    public boolean add(HttpServletRequest request, DynaActionForm form, ActionMessages errors, ActionMessages messages) {\n        // Formulardaten holen\n        String name = (String) form.get(\"name\");\n        String beschreibung = (String) form.get(\"beschreibung\");\n        logger.debug(\"name=\" + name);\n        logger.debug(\"beschreibung=\" + beschreibung);\n        // Formulardaten ï¿½berprï¿½fen\n        if (name == null || name.length() == 0) {\n            errors.add(\"name\", new ActionMessage(\"errors.required\", \"Name\"));\n            return false;\n        } else if (beschreibung == null || beschreibung.length() == 0) {\n            errors.add(\"beschreibung\", new ActionMessage(\"errors.required\", \"Beschreibung\"));\n            return false;\n        }\n        Integer mandantId = (Integer) request.getSession().getAttribute(Constants.MANDANT_ID);\n        Kategorie k = new Kategorie();\n        k.setMandantId(mandantId);\n        k.setName(name);\n        k.setBeschreibung(beschreibung);\n        // Auf duplikate prï¿½fen\n        if (dao.getByName(k) != null) {\n            messages.add(ActionMessages.GLOBAL_MESSAGE, new ActionMessage(\"errors.duplicate\", \"Kategorie\"));\n            return false;\n        }\n        // Kategorie einfï¿½gen\n        dao.insert(k);\n        return true;\n    }\n\n    /**\n     * Kopiert alle zugewiesenen Kategorien eines Customizings\n     * in ein neues.\n     *\n     * @param mandantId                     die Id des Mandanten\n     * @param naOpNuId                      die Id der aktuellen Nutzenattraktivitï¿½t\n     *                                      bzw. des aktuellen Operativen Nutzens\n     * @param newNaOpNuId                   die Id der neuen Nutzenattraktivitï¿½t\n     *                                      bzw. des neuen Operativen Nutzens\n     */\n    public void copy(Integer mandantId, Integer naOpNuId, Integer newNaOpNuId) {\n        Kategorie k = new Kategorie();\n        k.setMandantId(mandantId);\n        k.setNutzenattraktivitaetOperativerNutzenId(naOpNuId);\n        // Zugewiesene Kategorien holen\n        List<Kategorie> kategorien = dao.getAssignments(k);\n        for (Kategorie kategorie : kategorien) {\n            kategorie.setNutzenattraktivitaetOperativerNutzenId(newNaOpNuId);\n            // Kategorien in die neue Nutzenattraktivitï¿½t bzw. den\n            // neuen Operativen Nutzen kopieren\n            dao.insertAssignment(kategorie);\n        }\n    }\n\n    /**\n     * Setzt den Navigations-Status von den Kategorien\n     * eines Customizings.\n     *\n     * @param request                       HttpServletRequest\n     * @param mandantId                     die Id des Mandanten\n     * @param naOpNuId                      die Id der Nutzenattraktivitï¿½t\n     *                                      bzw. des Operativen Nutzens\n     * @return                              Liste aller zugewiesenen Kategorien\n     */\n    public List<Kategorie> setStatus(HttpServletRequest request, Integer mandantId, Integer naOpNuId, boolean isNa) {\n        Kategorie k = new Kategorie();\n        k.setMandantId(mandantId);\n        k.setNutzenattraktivitaetOperativerNutzenId(naOpNuId);\n        // Zugewiesene Kategorien holen\n        List<Kategorie> kategorien = dao.getAssignments(k);\n        HttpSession session = request.getSession();\n        // Mindestens eine Kategorie muss angewï¿½hlt sein\n        if (kategorien != null && kategorien.size() > 0) {\n            // Status grï¿½n, Status-Flag in die Session setzen\n            // Status fï¿½r das Customizing Nutzenattraktivitï¿½t\n            if (isNa) {\n                session.setAttribute(Constants.KATEGORIEN_NA, true);\n            } else // Status fï¿½r das Customizing Operativer Nutzen\n            {\n                session.setAttribute(Constants.KATEGORIEN_OP_NU, true);\n            }\n            return kategorien;\n        } else // Status rot, eventuell vorhandenes Flag aus der Session lï¿½schen\n        {\n            // Status fï¿½r das Customizing Nutzenattraktivitï¿½t\n            if (isNa) {\n                session.removeAttribute(Constants.KATEGORIEN_NA);\n            } else // Status fï¿½r das Customizing Operativer Nutzen\n            {\n                session.removeAttribute(Constants.KATEGORIEN_OP_NU);\n            }\n        }\n        return null;\n    }\n\n    /**\n     * Holt die die zugewiesenen Kategorien zu dem angegeben\n     * Customizing und gibt sie als Array von Ids zurï¿½ck.<br/>\n     * TODO Customizing Objekt ï¿½bergeben macht mehr Sinn\n     *\n     * @param k                             Daten des aktuellen Customizings\n     * @return                              Integer Array mit Ids aller\n     *                                      zugewiesenen Kategorien\n     */\n    private Integer[] getSelectedIdArr(Kategorie k) {\n        logger.debug(\"Hole kategorieIds: mandantId=\" + k.getMandantId() + \", customizingId=\" + k.getCustomizingId());\n        // TODO Performance-Gewinn mï¿½glich durch eigene SQL Abfrage\n        List<Kategorie> kategorien = dao.getAssignments(k);\n        logger.debug(kategorien.size() + \" ids gefunden.\");\n        Integer[] ids = new Integer[kategorien.size()];\n        int i = 0;\n        for (Kategorie kategorie : kategorien) {\n            ids[i++] = kategorie.getKategorieId();\n        }\n        return ids;\n    }\n\n    /**\n     * Erstellt ein Objekt vom Typ Kategorie mit der id des Mandanten\n     * und, falls angegeben, mit abgefï¿½llten Formulardaten\n     *\n     * @param request                   der HttpServletRequest\n     * @param form                      das DynaActionForm\n     * @return                          Kategorie mit mandantId\n     */\n    private Kategorie createKategorie(HttpServletRequest request, DynaActionForm form) {\n        Integer mandantId = (Integer) request.getSession().getAttribute(Constants.MANDANT_ID);\n        Kategorie kategorie = new Kategorie();\n        kategorie.setMandantId(mandantId);\n        if (form != null) {\n            Integer id = (Integer) form.get(Constants.KATEGORIE_ID);\n            String name = (String) form.get(\"name\");\n            String beschreibung = (String) form.get(\"beschreibung\");\n            kategorie.setKategorieId(id);\n            kategorie.setName(name);\n            kategorie.setBeschreibung(beschreibung);\n        }\n        return kategorie;\n    }\n\n    /**\n     * ï¿½berprï¿½ft, ob die Id einer Kategorie im Request ist\n     * (update) oder nicht (neu).\n     *\n     * @param request                   der HttpServletRequest\n     * @param form                      das DynaActionForm\n     * @return                          true, wenn die angegebene Kategorie\n     *                                  besteht, sonst false.\n     */\n    private boolean isUpdate(HttpServletRequest request, DynaActionForm form) {\n        Integer id = (Integer) form.get(Constants.KATEGORIE_ID);\n        if (id == null || id == 0) {\n            return false;\n        }\n        return true;\n    }\n}\n",
		"id": "EvoSuiteBenchmark/46_nutzenportfolio/src/main/java/ch/bfh/egov/nutzenportfolio/service/kategorie/KategorieDaoServiceTest1.java",
		"test_prompt": "// KategorieDaoServiceTest1.java\npackage ch.bfh.egov.nutzenportfolio.service.kategorie;\n\nimport java.util.HashMap;\nimport java.util.List;\nimport javax.servlet.http.HttpServletRequest;\nimport javax.servlet.http.HttpSession;\nimport org.apache.commons.logging.Log;\nimport org.apache.commons.logging.LogFactory;\nimport org.apache.struts.action.ActionMessage;\nimport org.apache.struts.action.ActionMessages;\nimport org.apache.struts.action.DynaActionForm;\nimport ch.bfh.egov.nutzenportfolio.Constants;\nimport ch.bfh.egov.nutzenportfolio.persistence.kategorie.KategorieDao;\nimport ch.bfh.egov.nutzenportfolio.service.common.CommonService;\nimport ch.bfh.egov.nutzenportfolio.service.customizing.CustomizingService;\nimport ch.bfh.egov.nutzenportfolio.service.nutzenkriterium.NutzenkriteriumService;\nimport ch.bfh.egov.nutzenportfolio.tos.Customizing;\nimport ch.bfh.egov.nutzenportfolio.tos.Kategorie;\nimport ch.bfh.egov.nutzenportfolio.tos.NaOpNu;\nimport ch.bfh.egov.nutzenportfolio.tos.Nutzenkriterium;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link KategorieDaoService}.\n* It contains ten unit test cases for the {@link KategorieDaoService#add(HttpServletRequest, DynaActionForm, ActionMessages, ActionMessages)} method.\n*/\nclass KategorieDaoServiceTest1 {"
	},
	{
		"original_code": "// CommonDaoService.java\n/**\r\n * Nutzenportfolio\r\n * Copyright (C) 2006 Kompetenzzentrum E-Business, Simon Bergamin\r\n *\r\n * This program is free software; you can redistribute it and/or\r\n * modify it under the terms of the GNU General Public License\r\n * as published by the Free Software Foundation; either version 2\r\n * of the License, or (at your option) any later version.\r\n *\r\n * This program is distributed in the hope that it will be useful,\r\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n * GNU General Public License for more details.\r\n *\r\n * You should have received a copy of the GNU General Public License\r\n * along with this program; if not, write to the Free Software\r\n * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\r\n */\r\npackage ch.bfh.egov.nutzenportfolio.service.common;\r\n\r\nimport java.util.Random;\r\nimport javax.servlet.http.HttpServletRequest;\r\nimport javax.servlet.http.HttpSession;\r\nimport org.apache.commons.logging.Log;\r\nimport org.apache.commons.logging.LogFactory;\r\nimport ch.bfh.egov.nutzenportfolio.Constants;\r\nimport ch.bfh.egov.nutzenportfolio.form.NaOpNuForm;\r\nimport ch.bfh.egov.nutzenportfolio.persistence.common.CommonDao;\r\nimport ch.bfh.egov.nutzenportfolio.tos.NaOpNu;\r\nimport ch.bfh.egov.nutzenportfolio.tos.Projektattraktivitaet;\r\n\r\n/**\r\n * Implementierende Service-Klasse fï¿½r gemeinsam genutzte Methoden.\r\n *\r\n * @author Kompetenzzentrum E-Business, Simon Bergamin\r\n */\r\npublic class CommonDaoService implements CommonService {\r\n\r\n    private CommonDao dao;\r\n\r\n    private Log logger = LogFactory.getLog(this.getClass());\r\n\r\n    /**\r\n     * Konstruktor. ï¿½bergabe des DataAcessObject-Interfaces fï¿½r\r\n     * gemeinsam genutzte Methoden.\r\n     *\r\n     * @param dao                          Common DataAcessObject-Interface\r\n     */\r\n    public CommonDaoService(CommonDao dao) {\r\n        this.dao = dao;\r\n    }\r\n\r\n    /**\r\n     * @see ch.bfh.egov.nutzenportfolio.persistence.common.CommonIbatisDao#getProjektattraktivitaetIdByCustomizingId(Integer)\r\n     */\r\n    public Integer getProjektattraktivitaetIdByCustomizingId(Integer customizingId) {\r\n        return dao.getProjektattraktivitaetIdByCustomizingId(customizingId);\r\n    }\r\n\r\n    /**\r\n     * @see ch.bfh.egov.nutzenportfolio.persistence.common.CommonIbatisDao#getNutzenattraktivitaetIdByCustomizingId(Integer)\r\n     */\r\n    public Integer getNutzenattraktivitaetIdByCustomizingId(Integer customizingId) {\r\n        return dao.getNutzenattraktivitaetIdByCustomizingId(customizingId);\r\n    }\r\n\r\n    /**\r\n     * @see ch.bfh.egov.nutzenportfolio.persistence.common.CommonIbatisDao#getOperativerNutzenIdByCustomizingId(Integer)\r\n     */\r\n    public Integer getOperativerNutzenIdByCustomizingId(Integer customizingId) {\r\n        return dao.getOperativerNutzenIdByCustomizingId(customizingId);\r\n    }\r\n\r\n    /**\r\n     * @see ch.bfh.egov.nutzenportfolio.persistence.common.CommonIbatisDao#insertProjektattraktivitaet(Projektattraktivitaet)\r\n     */\r\n    private Integer insertProjektattraktivitaet(Projektattraktivitaet p) {\r\n        Integer id = dao.insertProjektattraktivitaet(p);\r\n        logger.debug(\"id: \" + id);\r\n        return id;\r\n    }\r\n\r\n    /**\r\n     * @see ch.bfh.egov.nutzenportfolio.persistence.common.CommonIbatisDao#insertNutzenattraktivitaetOperativerNutzen(NaOpNu)\r\n     */\r\n    private Integer insertNutzenattraktivitaetOperativerNutzen(NaOpNu n) {\r\n        Integer id = dao.insertNutzenattraktivitaetOperativerNutzen(n);\r\n        logger.debug(\"id: \" + id);\r\n        return id;\r\n    }\r\n\r\n    /**\r\n     * @see ch.bfh.egov.nutzenportfolio.persistence.common.CommonIbatisDao#deleteProjektattraktivitaet(Integer)\r\n     */\r\n    public void deleteProjektattraktivitaet(Integer projektattraktivitaetId) {\r\n        dao.deleteProjektattraktivitaet(projektattraktivitaetId);\r\n    }\r\n\r\n    /**\r\n     * @see ch.bfh.egov.nutzenportfolio.persistence.common.CommonIbatisDao#deleteNutzenattraktivitaetOperativerNutzen(Integer)\r\n     */\r\n    public void deleteNutzenattraktivitaetOperativerNutzen(Integer naOpNuId) {\r\n        dao.deleteNutzenattraktivitaetOperativerNutzen(naOpNuId);\r\n    }\r\n\r\n    /**\r\n     * Speichert die Teile eines Customizings (Projektattraktivitï¿½t,\r\n     * Nutzenattraktivitï¿½t und Operativer Nutzen).\r\n     *\r\n     * @param customizingId         die Id des Customizings\r\n     */\r\n    public void insertCustomizingParts(Integer customizingId) {\r\n        Random rnd = new Random();\r\n        Integer paId = dao.getProjektattraktivitaetIdByCustomizingId(customizingId);\r\n        Integer naId = dao.getNutzenattraktivitaetIdByCustomizingId(customizingId);\r\n        Integer opNuId = dao.getOperativerNutzenIdByCustomizingId(customizingId);\r\n        if (paId != null || naId != null || opNuId != null) {\r\n            logger.warn(\"Die Bestandteile des Customizings \" + customizingId + \" wurden bereits gespeichert!\");\r\n            return;\r\n        }\r\n        // Projektattraktivitï¿½t einfï¿½gen\r\n        Projektattraktivitaet p = new Projektattraktivitaet();\r\n        long paUID = ((System.currentTimeMillis() >>> 16) << 16) + rnd.nextLong();\r\n        p.setPaUID(paUID);\r\n        p.setCustomizingId(customizingId);\r\n        insertProjektattraktivitaet(p);\r\n        // Nutzenattraktivitï¿½t einfï¿½gen\r\n        NaOpNu n = new NaOpNu();\r\n        long naOpNuUID = ((System.currentTimeMillis() >>> 16) << 16) + rnd.nextLong();\r\n        n.setNaOpNuUID(naOpNuUID);\r\n        n.setCustomizingId(customizingId);\r\n        n.setNutzenattraktivitaet(true);\r\n        n.setOperativerNutzen(false);\r\n        insertNutzenattraktivitaetOperativerNutzen(n);\r\n        // Operativer Nutzen einfï¿½gen\r\n        naOpNuUID = ((System.currentTimeMillis() >>> 16) << 16) + rnd.nextLong();\r\n        n.setNaOpNuUID(naOpNuUID);\r\n        n.setNutzenattraktivitaet(false);\r\n        n.setOperativerNutzen(true);\r\n        insertNutzenattraktivitaetOperativerNutzen(n);\r\n    }\r\n\r\n    /**\r\n     * Holt die Id der Nutzenattraktivitï¿½t bzw. des Operativer Nutzens\r\n     * mithilfe der Id des Customizings aus dem angegebenen Formular.\r\n     *\r\n     * @param form                    das Formular\r\n     * @param customizingId           die Id des Customizings\r\n     * @return                        die Id utzenattraktivitï¿½t bzw.\r\n     *                                des Operativer Nutzens\r\n     */\r\n    public Integer getNaOpNuId(NaOpNuForm form, Integer customizingId) {\r\n        if (form.getOpNu()) {\r\n            return getOperativerNutzenIdByCustomizingId(customizingId);\r\n        }\r\n        return this.getNutzenattraktivitaetIdByCustomizingId(customizingId);\r\n    }\r\n\r\n    /**\r\n     * Holt die Id der Nutzenattraktivitï¿½t bzw. des Operativer Nutzens\r\n     * mithilfe der Id des Customizings aus dem Request.\r\n     *\r\n     * @param request                 der HttpServletRequest\r\n     * @param customizingId           die Id des Customizings\r\n     * @return                        die Id utzenattraktivitï¿½t bzw.\r\n     *                                des Operativer Nutzens\r\n     */\r\n    public Integer getNaOpNuId(HttpServletRequest request, Integer customizingId) {\r\n        if (isOperativerNutzen(request)) {\r\n            return getOperativerNutzenIdByCustomizingId(customizingId);\r\n        }\r\n        return this.getNutzenattraktivitaetIdByCustomizingId(customizingId);\r\n    }\r\n\r\n    /**\r\n     * Gibt zurï¿½ck ob wir uns im Customizing Operativer Nutzens befinden\r\n     * oder nicht.\r\n     *\r\n     * @param request                 der HttpServletRequest\r\n     * @return                        true bei Operativer Nutzen, sonst false\r\n     */\r\n    public boolean isOperativerNutzen(HttpServletRequest request) {\r\n        // Parameter Operativer Nutzen holen\r\n        String param = request.getParameter(Constants.OPERATIVER_NUTZEN);\r\n        logger.debug(\"Parameter=\" + param);\r\n        boolean paramNull = param == null ? true : false;\r\n        // Attribut Operativer Nutzen holen\r\n        String attr = (String) request.getAttribute(Constants.OPERATIVER_NUTZEN);\r\n        logger.debug(\"Attribut=\" + attr);\r\n        boolean attrNull = attr == null ? true : false;\r\n        HttpSession session = request.getSession();\r\n        // Parameter und Attribut ï¿½berprï¿½fen\r\n        if (!paramNull || !attrNull) {\r\n            // Operativer Nutzen durch Request festgestellt\r\n            if (!paramNull && param.equals(\"true\") || !attrNull && attr.equals(\"true\")) {\r\n                logger.debug(\"Operativer Nutzen (Request)\");\r\n                session.setAttribute(Constants.OPERATIVER_NUTZEN, \"true\");\r\n                return true;\r\n            } else // Operativer Nutzen durch Session festgestellt\r\n            if (!paramNull && param.equals(\"false\") || !attrNull && attr.equals(\"false\")) {\r\n                logger.debug(\"Nutzenattraktivitï¿½t (Session)\");\r\n                session.setAttribute(Constants.OPERATIVER_NUTZEN, \"false\");\r\n                return false;\r\n            }\r\n        } else // Session ï¿½berprï¿½fen\r\n        {\r\n            String opNu = (String) session.getAttribute(Constants.OPERATIVER_NUTZEN);\r\n            if (opNu.equals(\"true\")) {\r\n                logger.debug(\"Operativer Nutzen (Session)\");\r\n                return true;\r\n            } else {\r\n                logger.debug(\"Nutzenattraktivitï¿½t (Session)\");\r\n                return false;\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n}\r\n",
		"id": "EvoSuiteBenchmark/46_nutzenportfolio/src/main/java/ch/bfh/egov/nutzenportfolio/service/common/CommonDaoServiceTest.java",
		"test_prompt": "// CommonDaoServiceTest.java\npackage ch.bfh.egov.nutzenportfolio.service.common;\n\nimport java.util.Random;\nimport javax.servlet.http.HttpServletRequest;\nimport javax.servlet.http.HttpSession;\nimport org.apache.commons.logging.Log;\nimport org.apache.commons.logging.LogFactory;\nimport ch.bfh.egov.nutzenportfolio.Constants;\nimport ch.bfh.egov.nutzenportfolio.form.NaOpNuForm;\nimport ch.bfh.egov.nutzenportfolio.persistence.common.CommonDao;\nimport ch.bfh.egov.nutzenportfolio.tos.NaOpNu;\nimport ch.bfh.egov.nutzenportfolio.tos.Projektattraktivitaet;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link CommonDaoService}.\n* It contains ten unit test cases for the {@link CommonDaoService#isOperativerNutzen(HttpServletRequest)} method.\n*/\nclass CommonDaoServiceTest {"
	},
	{
		"original_code": "// StrategischeZieleDaoService.java\n/**\r\n * Nutzenportfolio\r\n * Copyright (C) 2006 Kompetenzzentrum E-Business, Simon Bergamin\r\n *\r\n * This program is free software; you can redistribute it and/or\r\n * modify it under the terms of the GNU General Public License\r\n * as published by the Free Software Foundation; either version 2\r\n * of the License, or (at your option) any later version.\r\n *\r\n * This program is distributed in the hope that it will be useful,\r\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n * GNU General Public License for more details.\r\n *\r\n * You should have received a copy of the GNU General Public License\r\n * along with this program; if not, write to the Free Software\r\n * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\r\n */\r\npackage ch.bfh.egov.nutzenportfolio.service.strategischeziele;\r\n\r\nimport java.util.HashMap;\r\nimport java.util.List;\r\nimport javax.servlet.http.HttpServletRequest;\r\nimport javax.servlet.http.HttpSession;\r\nimport org.apache.commons.logging.Log;\r\nimport org.apache.commons.logging.LogFactory;\r\nimport org.apache.struts.action.ActionMessage;\r\nimport org.apache.struts.action.ActionMessages;\r\nimport org.apache.struts.action.DynaActionForm;\r\nimport ch.bfh.egov.nutzenportfolio.Constants;\r\nimport ch.bfh.egov.nutzenportfolio.persistence.strategischeziele.StrategischeZieleDao;\r\nimport ch.bfh.egov.nutzenportfolio.service.customizing.CustomizingService;\r\nimport ch.bfh.egov.nutzenportfolio.service.detailziele.DetailzieleService;\r\nimport ch.bfh.egov.nutzenportfolio.tos.Customizing;\r\nimport ch.bfh.egov.nutzenportfolio.tos.Detailziel;\r\nimport ch.bfh.egov.nutzenportfolio.tos.Projekt;\r\nimport ch.bfh.egov.nutzenportfolio.tos.StrategischesZiel;\r\n\r\n/**\r\n * Implementierende Service-Klasse fï¿½r Strategische Ziele.\r\n *\r\n * @author Kompetenzzentrum E-Business, Simon Bergamin\r\n */\r\npublic class StrategischeZieleDaoService implements StrategischeZieleService {\r\n\r\n    private StrategischeZieleDao dao;\r\n\r\n    private CustomizingService cService;\r\n\r\n    private DetailzieleService dzService;\r\n\r\n    private Log logger = LogFactory.getLog(this.getClass());\r\n\r\n    /**\r\n     * Konstruktor. ï¿½bergabe des DataAcessObject-Interfaces fï¿½r Strategische Ziele.\r\n     *\r\n     * @param dao                               Strategische Ziele DataAcessObject-Interface\r\n     */\r\n    public StrategischeZieleDaoService(StrategischeZieleDao dao) {\r\n        this.dao = dao;\r\n    }\r\n\r\n    /**\r\n     * @see ch.bfh.egov.nutzenportfolio.persistence.strategischeziele.StrategischeZieleDao#getAll(Integer)\r\n     */\r\n    public List<StrategischesZiel> getAll(Integer mandantId) {\r\n        return dao.getAll(mandantId);\r\n    }\r\n\r\n    /**\r\n     * @see ch.bfh.egov.nutzenportfolio.persistence.strategischeziele.StrategischeZieleDao#getByProjektId(Projekt)\r\n     */\r\n    public List<StrategischesZiel> getByProjektId(Projekt p) {\r\n        return dao.getByProjektId(p);\r\n    }\r\n\r\n    /**\r\n     * @see ch.bfh.egov.nutzenportfolio.persistence.strategischeziele.StrategischeZieleDao#getAssignments(StrategischesZiel)\r\n     */\r\n    public List<StrategischesZiel> getAssignments(StrategischesZiel ziel) {\r\n        return dao.getAssignments(ziel);\r\n    }\r\n\r\n    /**\r\n     * Initialisierung dieses Service-Objekts durch ï¿½bergabe anderer,\r\n     * benï¿½tigter Service-Objekte.\r\n     *\r\n     * @param cService                   CustomizingService Objekt\r\n     * @param dzService                  DetailzieleService Objekt\r\n     */\r\n    public void init(CustomizingService cService, DetailzieleService dzService) {\r\n        this.cService = cService;\r\n        this.dzService = dzService;\r\n    }\r\n\r\n    /**\r\n     * Stellt eine Liste aller Strategischen Ziele in den request.\r\n     *\r\n     * @param request                   der HttpServletRequest\r\n     */\r\n    public void populate(HttpServletRequest request) {\r\n        Integer mandantId = (Integer) request.getSession().getAttribute(Constants.MANDANT_ID);\r\n        List strategischeZiele = getAll(mandantId);\r\n        request.setAttribute(Constants.STRATEGISCHE_ZIELE, strategischeZiele);\r\n    }\r\n\r\n    /**\r\n     * Fï¿½llt ein Formular mit bestehenden Daten eines Strategischen Ziels ab,\r\n     * falls eine entsprechende id angegeben wurde.\r\n     *\r\n     * @param request                   der HttpServletRequest\r\n     * @param form                      das DynaActionForm\r\n     */\r\n    public void edit(HttpServletRequest request, DynaActionForm form) {\r\n        if (isUpdate(request, form)) {\r\n            StrategischesZiel sz = createStrategischesZiel(request, form);\r\n            sz = dao.getById(sz);\r\n            form.set(\"name\", sz.getName());\r\n            form.set(\"beschreibung\", sz.getBeschreibung());\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Fï¿½hrt ein update eines bestenenden Strategischen Ziels anhand von\r\n     * Formulardaten durch.\r\n     *\r\n     * @param request                   der HttpServletRequest\r\n     * @param form                      das DynaActionForm\r\n     */\r\n    public void update(HttpServletRequest request, DynaActionForm form) {\r\n        logger.debug(\"Update Strategisches Ziel\");\r\n        if (isUpdate(request, form)) {\r\n            logger.debug(\"Update durchfï¿½hren\");\r\n            StrategischesZiel sz = createStrategischesZiel(request, form);\r\n            dao.update(sz);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Prï¿½ft, ob ein Strategisches Ziel existiert und gibt es zurï¿½ck.\r\n     *\r\n     * @param request                   der HttpServletRequest\r\n     * @param form                      das DynaActionForm\r\n     * @return                          das StrategischeZiel\r\n     */\r\n    public StrategischesZiel getStrategischesZiel(HttpServletRequest request, DynaActionForm form) {\r\n        StrategischesZiel sz = createStrategischesZiel(request, form);\r\n        return dao.getById(sz);\r\n    }\r\n\r\n    /**\r\n     * Abfrage fï¿½r das Lï¿½schen von einem Strategischen Ziel\r\n     *\r\n     * @param request                   der HttpServletRequest\r\n     * @param sz                        das zu lï¿½schende Strategische Ziel\r\n     * @param messages                  das ActionMessages Objekt\r\n     */\r\n    public void deleteQuestion(HttpServletRequest request, StrategischesZiel sz, ActionMessages messages) {\r\n        // Verknï¿½pfungen prï¿½fen\r\n        linkedTo(request, sz);\r\n        // Bestï¿½tigungsnachricht ausgeben\r\n        messages.add(ActionMessages.GLOBAL_MESSAGE, new ActionMessage(\"messages.question.delete\", sz.getName()));\r\n        // Actions zum Lï¿½schen und Abbrechen definieren\r\n        request.setAttribute(Constants.ACTION, Constants.VERWALTUNG_STRATEGISCHE_ZIELE_ACTION);\r\n        request.setAttribute(Constants.DISPATCH_YES, Constants.DELETE);\r\n        request.setAttribute(Constants.DISPATCH_NO, Constants.LIST);\r\n        request.setAttribute(Constants.ID_NAME, Constants.STRATEGISCHES_ZIEL_ID);\r\n        request.setAttribute(Constants.ID_VALUE, sz.getStrategischesZielId());\r\n    }\r\n\r\n    /**\r\n     * Setzt die Verknï¿½pfungen zu diesem Strategischen Ziel in den Request.\r\n     * Ein Strategisches Ziel kann mit Detailzielen und / oder Customizings\r\n     * verknï¿½pft sein. Diese Methode wird bei der Lï¿½schabfrage verwendet.\r\n     *\r\n     * @param request                   der HttpServletRequest\r\n     * @param sz                        das zu lï¿½schende Strategische Ziel\r\n     */\r\n    public void linkedTo(HttpServletRequest request, StrategischesZiel sz) {\r\n        HashMap<String, List> map = new HashMap<String, List>();\r\n        // Customizings suchen, die dieses Strategische Ziel benï¿½tigen\r\n        List<Customizing> customizings = dao.getLinkedCustomizings(sz);\r\n        if (customizings.size() > 0) {\r\n            for (Customizing c : customizings) {\r\n                if (c.getStatus()) {\r\n                    request.setAttribute(\"active\", true);\r\n                    break;\r\n                }\r\n            }\r\n            map.put(\"Customizings\", customizings);\r\n        }\r\n        // Detailziele suchen, die dieses Strategische Ziel benï¿½tigen\r\n        List<Detailziel> detailziele = dao.getLinkedDetailziele(sz);\r\n        if (detailziele.size() > 0) {\r\n            map.put(\"Detailziele\", detailziele);\r\n        }\r\n        request.setAttribute(\"linked\", map);\r\n    }\r\n\r\n    /**\r\n     * Lï¿½scht ein Strategisches Ziel. Falls es mit inaktiven Customizings\r\n     * verknï¿½ft ist, werden diese ebenfalls gelï¿½scht. Wenn aktive Customizings\r\n     * verknï¿½ft sind, wird das Strategische Ziel nicht gelï¿½scht. Verknï¿½pfte\r\n     * Detailziele werden nicht gelï¿½scht.\r\n     *\r\n     * @param request                   der HttpServletRequest\r\n     * @param sz                        das zu lï¿½schende Strategische Ziel\r\n     */\r\n    public void delete(HttpServletRequest request, StrategischesZiel sz) {\r\n        // Verknï¿½pfungen prï¿½fen\r\n        linkedTo(request, sz);\r\n        Boolean active = (Boolean) request.getAttribute(\"active\");\r\n        // Aktives Customizing verknï¿½ft. Dies sollte nicht passieren ausser bei\r\n        // einem direkten URL-Aufruf ...\r\n        if (active != null && active) {\r\n            logger.debug(\"Aktives Customizing verknï¿½pft, Strategisches Ziel wird nicht gelï¿½scht\");\r\n            return;\r\n        }\r\n        // Customizings lï¿½schen\r\n        List<Customizing> customizings = dao.getLinkedCustomizings(sz);\r\n        for (Customizing c : customizings) {\r\n            logger.debug(\"Lï¿½sche Customizing \" + c.getCustomizingId());\r\n            cService.cascadeDelete(request, c);\r\n        }\r\n        // Id des Strategischen Ziels aus der Detailziel Tabelle lï¿½schen\r\n        List<Detailziel> detailziele = dao.getLinkedDetailziele(sz);\r\n        for (Detailziel dz : detailziele) {\r\n            logger.debug(\"Lï¿½sche Zuweisung strategischesZielId des Detailziels \" + dz.getDetailzielId());\r\n            dz.setStrategischesZielId(null);\r\n            dzService.update(dz);\r\n        }\r\n        // Lï¿½schen des Strategischen Ziels\r\n        dao.delete(sz);\r\n    }\r\n\r\n    /**\r\n     * Weist die angegebenen Strategischen Ziele einer Projektattraktivitï¿½t zu.\r\n     *\r\n     * @param ziele               Liste aller zuzuweisenden Strategischen Ziele\r\n     */\r\n    public void setProjektattraktivitaet(List<StrategischesZiel> ziele) {\r\n        boolean delete = true;\r\n        for (StrategischesZiel ziel : ziele) {\r\n            // Lï¿½schen aller Beziehungen im ersten Durchgang\r\n            if (delete) {\r\n                logger.debug(\"Lï¿½sche Beziehungen Strategische Ziele - Projektattraktivitï¿½t\");\r\n                dao.deleteAssignments(ziel.getProjektattraktivitaetId());\r\n                delete = false;\r\n            }\r\n            // Einfï¿½gen der neuen Beziehung\r\n            dao.insertAssignment(ziel);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Fï¿½gt ein neues Strategisches Ziel ein.\r\n     *\r\n     * @param request                       HttpServletRequest\r\n     * @param form                          Formular mit Daten des neuen\r\n     *                                      Strategischen Ziels\r\n     * @param errors                        ActionMessages Objekt zur ï¿½bergabe\r\n     *                                      von spezifischen Fehlermeldungen\r\n     * @param messages                      ActionMessages Objekt zur ï¿½bergabe\r\n     *                                      von globalen Fehlermeldungen\r\n     * @return                              true bei Erfolg, sonst false\r\n     */\r\n    public boolean add(HttpServletRequest request, DynaActionForm form, ActionMessages errors, ActionMessages messages) {\r\n        // Formulardaten holen\r\n        String name = (String) form.get(\"name\");\r\n        String beschreibung = (String) form.get(\"beschreibung\");\r\n        logger.debug(\"name=\" + name);\r\n        logger.debug(\"beschreibung=\" + beschreibung);\r\n        // Formulardaten ï¿½berprï¿½fen\r\n        if (name == null || name.length() == 0) {\r\n            errors.add(\"name\", new ActionMessage(\"errors.required\", \"Name\"));\r\n            return false;\r\n        } else if (beschreibung == null || beschreibung.length() == 0) {\r\n            errors.add(\"beschreibung\", new ActionMessage(\"errors.required\", \"Beschreibung\"));\r\n            return false;\r\n        }\r\n        StrategischesZiel sz = createStrategischesZiel(request, form);\r\n        // Auf duplikate prï¿½fen\r\n        if (dao.getByName(sz) != null) {\r\n            messages.add(ActionMessages.GLOBAL_MESSAGE, new ActionMessage(\"errors.duplicate\", \"Strategisches Ziel\"));\r\n            return false;\r\n        }\r\n        // Strategisches Ziel einfï¿½gen\r\n        dao.insert(sz);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Holt die die zugewiesenen Strategischen Ziele zu dem angegeben\r\n     * Customizing und gibt sie als Array von Ids zurï¿½ck.<br/>\r\n     * TODO Customizing Objekt ï¿½bergeben macht mehr Sinn\r\n     *\r\n     * @param ziel                          Daten des aktuellen Customizings\r\n     * @return                              Integer Array mit Ids aller\r\n     *                                      zugewiesenen Strategischen Ziele\r\n     */\r\n    public Integer[] getSelectedIdArr(StrategischesZiel ziel) {\r\n        logger.debug(\"Hole strategischeZieleIds: mandantId=\" + ziel.getMandantId() + \", customizingId=\" + ziel.getCustomizingId());\r\n        // TODO Performance-Gewinn mï¿½glich durch eigene SQL Abfrage\r\n        List<StrategischesZiel> szs = dao.getAssignments(ziel);\r\n        logger.debug(szs.size() + \" ids gefunden.\");\r\n        Integer[] ids = new Integer[szs.size()];\r\n        int i = 0;\r\n        for (StrategischesZiel sz : szs) {\r\n            ids[i++] = sz.getStrategischesZielId();\r\n        }\r\n        return ids;\r\n    }\r\n\r\n    /**\r\n     * Kopiert alle zugewiesenen Strategischen Ziele eines Customizings\r\n     * in ein neues.\r\n     *\r\n     * @param mandantId                     die Id des Mandanten\r\n     * @param customizingId                 die Id des aktuellen Customizings\r\n     * @param newPaId                       die Id der neuen Projektattraktivitï¿½t\r\n     */\r\n    public void copy(Integer mandantId, Integer customizingId, Integer newPaId) {\r\n        StrategischesZiel sz = new StrategischesZiel();\r\n        sz.setMandantId(mandantId);\r\n        sz.setCustomizingId(customizingId);\r\n        // Zugewiesene Strategische Ziele holen\r\n        List<StrategischesZiel> szs = dao.getAssignments(sz);\r\n        for (StrategischesZiel s : szs) {\r\n            // Strategische Ziele in die neue Projektattraktivitï¿½t kopieren\r\n            s.setProjektattraktivitaetId(newPaId);\r\n            dao.insertAssignment(s);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Setzt den Navigations-Status von den Strategischen Zielen\r\n     * eines Customizings.\r\n     *\r\n     * @param request                       HttpServletRequest\r\n     * @param mandantId                     die Id des Mandanten\r\n     * @param customizingId                 die Id des Customizings\r\n     * @return                              Liste aller zugewiesenen Strategischen Ziele\r\n     */\r\n    public List<StrategischesZiel> setStatus(HttpServletRequest request, Integer mandantId, Integer customizingId) {\r\n        StrategischesZiel sz = new StrategischesZiel();\r\n        sz.setMandantId(mandantId);\r\n        sz.setCustomizingId(customizingId);\r\n        // Zugewiesene Strategische Ziele holen\r\n        List<StrategischesZiel> szs = dao.getAssignments(sz);\r\n        HttpSession session = request.getSession();\r\n        // Mindestens ein Strategisches Ziele muss angewï¿½hlt sein\r\n        if (szs != null && szs.size() > 0) {\r\n            // Status grï¿½n, Status-Flag in die Session setzen\r\n            session.setAttribute(Constants.STRATEGISCHE_ZIELE, true);\r\n            return szs;\r\n        } else // Status rot, eventuell vorhandenes Flag aus der Session lï¿½schen\r\n        {\r\n            session.removeAttribute(Constants.STRATEGISCHE_ZIELE);\r\n        }\r\n        return null;\r\n    }\r\n\r\n    /**\r\n     * Erstellt ein Objekt vom Typ StrategischesZiel mit der id des Mandanten\r\n     * und, falls angegeben, mit abgefï¿½llten Formulardaten\r\n     *\r\n     * @param request                   der HttpServletRequest\r\n     * @param form                      das DynaActionForm\r\n     * @return                          StrategischesZiel mit mandantId\r\n     */\r\n    private StrategischesZiel createStrategischesZiel(HttpServletRequest request, DynaActionForm form) {\r\n        Integer mandantId = (Integer) request.getSession().getAttribute(Constants.MANDANT_ID);\r\n        StrategischesZiel sz = new StrategischesZiel();\r\n        sz.setMandantId(mandantId);\r\n        // Falls vorhanden, Formulardaten ï¿½bernehmen\r\n        if (form != null) {\r\n            Integer szId = (Integer) form.get(Constants.STRATEGISCHES_ZIEL_ID);\r\n            String name = (String) form.get(\"name\");\r\n            String beschreibung = (String) form.get(\"beschreibung\");\r\n            sz.setStrategischesZielId(szId);\r\n            sz.setName(name);\r\n            sz.setBeschreibung(beschreibung);\r\n        }\r\n        return sz;\r\n    }\r\n\r\n    /**\r\n     * ï¿½berprï¿½ft, ob die Id eines Strategischen Ziels im Request ist\r\n     * (update) oder nicht (neu).\r\n     *\r\n     * @param request                   der HttpServletRequest\r\n     * @param form                      das DynaActionForm\r\n     * @return                          true, wenn das angegebene Strategische\r\n     *                                  Ziel besteht, sonst false.\r\n     */\r\n    private boolean isUpdate(HttpServletRequest request, DynaActionForm form) {\r\n        Integer id = (Integer) form.get(Constants.STRATEGISCHES_ZIEL_ID);\r\n        if (id == null || id == 0) {\r\n            return false;\r\n        }\r\n        return true;\r\n    }\r\n}\r\n",
		"id": "EvoSuiteBenchmark/46_nutzenportfolio/src/main/java/ch/bfh/egov/nutzenportfolio/service/strategischeziele/StrategischeZieleDaoServiceTest.java",
		"test_prompt": "// StrategischeZieleDaoServiceTest.java\npackage ch.bfh.egov.nutzenportfolio.service.strategischeziele;\n\nimport java.util.HashMap;\nimport java.util.List;\nimport javax.servlet.http.HttpServletRequest;\nimport javax.servlet.http.HttpSession;\nimport org.apache.commons.logging.Log;\nimport org.apache.commons.logging.LogFactory;\nimport org.apache.struts.action.ActionMessage;\nimport org.apache.struts.action.ActionMessages;\nimport org.apache.struts.action.DynaActionForm;\nimport ch.bfh.egov.nutzenportfolio.Constants;\nimport ch.bfh.egov.nutzenportfolio.persistence.strategischeziele.StrategischeZieleDao;\nimport ch.bfh.egov.nutzenportfolio.service.customizing.CustomizingService;\nimport ch.bfh.egov.nutzenportfolio.service.detailziele.DetailzieleService;\nimport ch.bfh.egov.nutzenportfolio.tos.Customizing;\nimport ch.bfh.egov.nutzenportfolio.tos.Detailziel;\nimport ch.bfh.egov.nutzenportfolio.tos.Projekt;\nimport ch.bfh.egov.nutzenportfolio.tos.StrategischesZiel;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link StrategischeZieleDaoService}.\n* It contains ten unit test cases for the {@link StrategischeZieleDaoService#add(HttpServletRequest, DynaActionForm, ActionMessages, ActionMessages)} method.\n*/\nclass StrategischeZieleDaoServiceTest {"
	},
	{
		"original_code": "// NutzenkriteriumDaoService.java\n/**\r\n * Nutzenportfolio\r\n * Copyright (C) 2006 Kompetenzzentrum E-Business, Simon Bergamin\r\n *\r\n * This program is free software; you can redistribute it and/or\r\n * modify it under the terms of the GNU General Public License\r\n * as published by the Free Software Foundation; either version 2\r\n * of the License, or (at your option) any later version.\r\n *\r\n * This program is distributed in the hope that it will be useful,\r\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n * GNU General Public License for more details.\r\n *\r\n * You should have received a copy of the GNU General Public License\r\n * along with this program; if not, write to the Free Software\r\n * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\r\n */\r\npackage ch.bfh.egov.nutzenportfolio.service.nutzenkriterium;\r\n\r\nimport java.util.ArrayList;\r\nimport java.util.Collections;\r\nimport java.util.Comparator;\r\nimport java.util.HashMap;\r\nimport java.util.Iterator;\r\nimport java.util.List;\r\nimport javax.servlet.http.HttpServletRequest;\r\nimport javax.servlet.http.HttpSession;\r\nimport org.apache.commons.logging.Log;\r\nimport org.apache.commons.logging.LogFactory;\r\nimport org.apache.struts.action.ActionMessage;\r\nimport org.apache.struts.action.ActionMessages;\r\nimport org.apache.struts.action.DynaActionForm;\r\nimport ch.bfh.egov.nutzenportfolio.Constants;\r\nimport ch.bfh.egov.nutzenportfolio.common.AutoGrowingList;\r\nimport ch.bfh.egov.nutzenportfolio.common.NutzenkriteriumLine;\r\nimport ch.bfh.egov.nutzenportfolio.form.FragenForm;\r\nimport ch.bfh.egov.nutzenportfolio.persistence.nutzenkriterium.NutzenkriteriumDao;\r\nimport ch.bfh.egov.nutzenportfolio.service.auswahlfeld.AuswahlfeldService;\r\nimport ch.bfh.egov.nutzenportfolio.service.common.CommonService;\r\nimport ch.bfh.egov.nutzenportfolio.service.customizing.CustomizingService;\r\nimport ch.bfh.egov.nutzenportfolio.service.kategorie.KategorieService;\r\nimport ch.bfh.egov.nutzenportfolio.tos.Auswahlfeld;\r\nimport ch.bfh.egov.nutzenportfolio.tos.Customizing;\r\nimport ch.bfh.egov.nutzenportfolio.tos.Kategorie;\r\nimport ch.bfh.egov.nutzenportfolio.tos.NaOpNu;\r\nimport ch.bfh.egov.nutzenportfolio.tos.Nutzenkriterium;\r\n\r\n/**\r\n * Implementierende Service-Klasse fï¿½r Nutzenkriterien.\r\n *\r\n * @author Kompetenzzentrum E-Business, Simon Bergamin\r\n */\r\npublic class NutzenkriteriumDaoService implements NutzenkriteriumService {\r\n\r\n    private NutzenkriteriumDao dao;\r\n\r\n    private CommonService cService;\r\n\r\n    private KategorieService kService;\r\n\r\n    private AuswahlfeldService aService;\r\n\r\n    private CustomizingService customizingService;\r\n\r\n    private Log logger = LogFactory.getLog(this.getClass());\r\n\r\n    /**\r\n     * Konstruktor. ï¿½bergabe des DataAcessObject-Interfaces fï¿½r Nutzenkriterien.\r\n     *\r\n     * @param dao                               Nutzenkriterien DataAcessObject-Interface\r\n     */\r\n    public NutzenkriteriumDaoService(NutzenkriteriumDao dao) {\r\n        this.dao = dao;\r\n    }\r\n\r\n    /**\r\n     * @see ch.bfh.egov.nutzenportfolio.persistence.nutzenkriterium.NutzenkriteriumIbatisDao#getAssignmentById(Nutzenkriterium)\r\n     */\r\n    public Nutzenkriterium getAssignmentById(Nutzenkriterium kriterium) {\r\n        return dao.getAssignmentById(kriterium);\r\n    }\r\n\r\n    /**\r\n     * @see ch.bfh.egov.nutzenportfolio.persistence.nutzenkriterium.NutzenkriteriumIbatisDao#getByProjektId(NaOpNu)\r\n     */\r\n    public List<Nutzenkriterium> getByProjektId(NaOpNu naOpNu) {\r\n        return dao.getByProjektId(naOpNu);\r\n    }\r\n\r\n    /**\r\n     * @see ch.bfh.egov.nutzenportfolio.persistence.nutzenkriterium.NutzenkriteriumIbatisDao#getAssignments(Nutzenkriterium)\r\n     */\r\n    public List<Nutzenkriterium> getAssignments(Nutzenkriterium kriterium) {\r\n        return dao.getAssignments(kriterium);\r\n    }\r\n\r\n    /**\r\n     * @see ch.bfh.egov.nutzenportfolio.persistence.nutzenkriterium.NutzenkriteriumIbatisDao#update(Nutzenkriterium)\r\n     */\r\n    public void update(Nutzenkriterium kriterium) {\r\n        dao.updateAssignment(kriterium);\r\n    }\r\n\r\n    /**\r\n     * @see ch.bfh.egov.nutzenportfolio.persistence.nutzenkriterium.NutzenkriteriumIbatisDao#unsetAssignmentGewichtung(Integer)\r\n     */\r\n    public void unsetAssignmentGewichtung(Integer naOpNuId) {\r\n        dao.unsetAssignmentGewichtung(naOpNuId);\r\n    }\r\n\r\n    /**\r\n     * @see ch.bfh.egov.nutzenportfolio.persistence.nutzenkriterium.NutzenkriteriumIbatisDao#deleteAssignments(Integer)\r\n     */\r\n    public void deleteAssignments(Integer naOpNuId) {\r\n        dao.deleteAssignments(naOpNuId);\r\n    }\r\n\r\n    /**\r\n     * Initialisierung dieses Service-Objekts durch ï¿½bergabe anderer,\r\n     * benï¿½tigter Service-Objekte.\r\n     *\r\n     * @param aService                   AuswahlFeldService Objekt\r\n     * @param cService                   CommonService Objekt\r\n     * @param kService                   KategorieService Objekt\r\n     * @param customizingService         CustomizingService Objekt\r\n     */\r\n    public void init(AuswahlfeldService aService, CommonService cService, KategorieService kService, CustomizingService customizingService) {\r\n        this.aService = aService;\r\n        this.cService = cService;\r\n        this.kService = kService;\r\n        this.customizingService = customizingService;\r\n    }\r\n\r\n    /**\r\n     * Stellt eine Liste aller Nutzenkriterien in den request.\r\n     *\r\n     * @param request                   der HttpServletRequest\r\n     */\r\n    public void list(HttpServletRequest request) {\r\n        Integer mandantId = (Integer) request.getSession().getAttribute(Constants.MANDANT_ID);\r\n        List<Nutzenkriterium> kriterien = dao.getAll(mandantId);\r\n        // Sortieren der Nutzenkriterien nach Namen\r\n        Collections.<Nutzenkriterium>sort(kriterien, new Comparator<Nutzenkriterium>() {\r\n\r\n            public int compare(Nutzenkriterium a, Nutzenkriterium b) {\r\n                String name1 = a.getName().toLowerCase();\r\n                String name2 = b.getName().toLowerCase();\r\n                return name1.compareTo(name2);\r\n            }\r\n        });\r\n        request.setAttribute(Constants.NUTZENKRITERIEN, kriterien);\r\n    }\r\n\r\n    /**\r\n     * Stellt eine Liste von Nutzenkriterien sowie deren zugehï¿½rigen\r\n     * Kategorien in den Request. Pro Request bzw. pro Seitenaufruf\r\n     * wird eine Kategorie mit den jeweiligen Nutzenkriterien angezeigt.\r\n     * Mit einem Klick auf \"weiter\" gelangt der Benutzer zur nï¿½chsten Seite\r\n     * bzw. der nï¿½chsten gewï¿½hlten Kategorie.\r\n     *\r\n     * @param request                   der HttpServletRequest\r\n     * @return                          true bei Erfolg, sonst false\r\n     */\r\n    public boolean populate(HttpServletRequest request) {\r\n        // Benï¿½tigte ids holen\r\n        HttpSession session = request.getSession();\r\n        Integer mandantId = (Integer) session.getAttribute(Constants.MANDANT_ID);\r\n        Integer customizingId = (Integer) session.getAttribute(Constants.CUSTOMIZING_ID);\r\n        Integer naOpNuId = cService.getNaOpNuId(request, customizingId);\r\n        logger.debug(\"naOpNuId=\" + naOpNuId);\r\n        // Zugewiesene Kategorien holen\r\n        Kategorie k = new Kategorie();\r\n        k.setNutzenattraktivitaetOperativerNutzenId(naOpNuId);\r\n        k.setMandantId(mandantId);\r\n        List<Kategorie> kategorien = kService.getAssignments(k);\r\n        Integer kategorieId = null;\r\n        Integer step = null;\r\n        if (kategorien.size() == 0) {\r\n            return false;\r\n        }\r\n        // 1 Schritt pro Kategorie. Parameter ï¿½berprï¿½fen.\r\n        String stepStr = request.getParameter(Constants.STEP);\r\n        String next = request.getParameter(Constants.NEXT);\r\n        logger.debug(\"Angegebener step: \" + stepStr);\r\n        try {\r\n            step = new Integer(stepStr);\r\n        } catch (NumberFormatException nfex) {\r\n            step = 1;\r\n        }\r\n        // Denselben Schritt wiederholen, wenn nicht \"weiter\" geklickt wurde\r\n        if (next == null && step > 1) {\r\n            --step;\r\n        }\r\n        // Kategorien in Array stellen\r\n        Integer[] kategorienIdArr = new Integer[kategorien.size()];\r\n        String[] kategorienNameArr = new String[kategorien.size()];\r\n        int i = 0;\r\n        for (Kategorie kategorie : kategorien) {\r\n            kategorienIdArr[i] = kategorie.getKategorieId();\r\n            kategorienNameArr[i++] = kategorie.getName();\r\n            logger.debug(\"Kategorie: id=\" + kategorienIdArr[i - 1] + \", name=\" + kategorienNameArr[i - 1]);\r\n        }\r\n        // Auf inkorrekten step Parameter prï¿½fen\r\n        if ((step - 1) >= kategorienIdArr.length) {\r\n            logger.warn(\"Nicht verfï¿½gbarer Schritt ausgewï¿½hlt!\");\r\n            step = 1;\r\n        }\r\n        // Auf letzten Schritt prï¿½fen\r\n        if (step == kategorienIdArr.length) {\r\n            request.setAttribute(Constants.LAST_STEP, true);\r\n        }\r\n        // Id der Kategorie anhand des step Parameters holen\r\n        kategorieId = kategorienIdArr[step - 1];\r\n        logger.debug(\"Gewaehlte Kategorie: \" + kategorieId);\r\n        request.setAttribute(Constants.KATEGORIE_ID, kategorieId);\r\n        request.setAttribute(\"kategorie\", kategorienNameArr[step - 1]);\r\n        request.setAttribute(Constants.STEP, step + 1);\r\n        // Alle Nutzenkriterien zur gewï¿½hlten Kategorie holen\r\n        Nutzenkriterium n = new Nutzenkriterium();\r\n        n.setNutzenattraktivitaetOperativerNutzenId(naOpNuId);\r\n        n.setKategorieId(kategorieId);\r\n        n.setMandantId(mandantId);\r\n        // Nutzenkriterien aussortieren, die einem anderen Customizing zugeordnet sind\r\n        List<Nutzenkriterium> nutzenkriterien = dao.getByKategorie(n);\r\n        Iterator it = nutzenkriterien.iterator();\r\n        HashMap<String, Nutzenkriterium> map = new HashMap<String, Nutzenkriterium>();\r\n        while (it.hasNext()) {\r\n            Nutzenkriterium nk = (Nutzenkriterium) it.next();\r\n            String name = nk.getName();\r\n            boolean contains = map.containsKey(name);\r\n            Integer nuNaOpNuId = nk.getNutzenattraktivitaetOperativerNutzenId();\r\n            // HashMap abfï¿½llen um allfï¿½llige doppelte Nutzenkriterien auszusortieren\r\n            // (ist der Fall bei Zuweisungen zu anderen Customizings)\r\n            if (!contains || nuNaOpNuId != null && contains && nuNaOpNuId.equals(naOpNuId)) {\r\n                map.put(name, nk);\r\n            }\r\n        }\r\n        nutzenkriterien = new ArrayList<Nutzenkriterium>(map.values());\r\n        request.setAttribute(Constants.NUTZENKRITERIEN, nutzenkriterien);\r\n        // Operativer Nutzen -> Projektbetroffene\r\n        if (cService.isOperativerNutzen(request)) {\r\n            request.setAttribute(Constants.PROJEKTBETROFFENE, true);\r\n        }\r\n        Integer levels = (Integer) request.getSession().getAttribute(Constants.ABSTUFUNGEN);\r\n        request.setAttribute(\"totalKategorien\", ((levels != null) ? kategorien.size() : 0));\r\n        // Alle zugewiesenen Nutzenkriterien zur gewï¿½hlten Kategorie holen\r\n        List nAssigned = dao.getAssignments(n);\r\n        request.setAttribute(Constants.NA_OP_NU_ID, naOpNuId);\r\n        request.setAttribute(Constants.NUTZENKRITERIEN_ASSIGNED, nAssigned);\r\n        boolean isNa = !cService.isOperativerNutzen(request);\r\n        setStatus(request, kategorien, mandantId, naOpNuId, isNa);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Fï¿½llt ein Formular mit bestehenden Daten eines Nutzenkriteriums ab,\r\n     * falls eine entsprechende id angegeben wurde.\r\n     *\r\n     * @param request                   der HttpServletRequest\r\n     * @param form                      das DynaActionForm\r\n     */\r\n    public void edit(HttpServletRequest request, DynaActionForm form) {\r\n        if (isUpdate(request, form)) {\r\n            Nutzenkriterium n = createNutzenkriterium(request, form);\r\n            Integer mandantId = n.getMandantId();\r\n            n = dao.getById(n);\r\n            form.set(\"name\", n.getName());\r\n            form.set(\"beschreibung\", n.getBeschreibung());\r\n            form.set(\"frageManagementDefault\", n.getFrageManagementDefault());\r\n            form.set(\"frageProjektbetroffeneDefault\", n.getFrageProjektbetroffeneDefault());\r\n            form.set(Constants.KATEGORIE_ID, n.getKategorieId());\r\n            // Kategorien in die Session stellen\r\n            logger.debug(\"Kategorien holen fï¿½r mandantId=\" + mandantId);\r\n            List<Kategorie> kategorien = kService.getAll(mandantId);\r\n            request.getSession().setAttribute(Constants.KATEGORIEN, kategorien);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Fï¿½hrt ein update eines bestenenden Nutzenkriteriums anhand von\r\n     * Formulardaten durch.\r\n     *\r\n     * @param request                   der HttpServletRequest\r\n     * @param form                      das DynaActionForm\r\n     */\r\n    public void update(HttpServletRequest request, DynaActionForm form) {\r\n        logger.debug(\"Update Nutzenkriterium\");\r\n        if (isUpdate(request, form)) {\r\n            logger.debug(\"Update durchfï¿½hren\");\r\n            Nutzenkriterium n = createNutzenkriterium(request, form);\r\n            dao.update(n);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Prï¿½ft, ob ein Nutzenkriterium existiert und gibt es zurï¿½ck.\r\n     *\r\n     * @param request                   der HttpServletRequest\r\n     * @param form                      das DynaActionForm\r\n     * @return                          das Nutzenkriterium\r\n     */\r\n    public Nutzenkriterium getNutzenkriterium(HttpServletRequest request, DynaActionForm form) {\r\n        Nutzenkriterium n = createNutzenkriterium(request, form);\r\n        return dao.getById(n);\r\n    }\r\n\r\n    /**\r\n     * Abfrage fï¿½r das Lï¿½schen von einem Nutzenkriterium.\r\n     *\r\n     * @param request                   der HttpServletRequest\r\n     * @param kriterium                 das zu lï¿½schende Nutzenkriterium\r\n     * @param messages                  das ActionMessages Objekt\r\n     */\r\n    public void deleteQuestion(HttpServletRequest request, Nutzenkriterium kriterium, ActionMessages messages) {\r\n        // Verknï¿½pfungen prï¿½fen\r\n        linkedTo(request, kriterium);\r\n        // Bestï¿½tigungsnachricht ausgeben\r\n        messages.add(ActionMessages.GLOBAL_MESSAGE, new ActionMessage(\"messages.question.delete\", kriterium.getName()));\r\n        // Actions zum Lï¿½schen und Abbrechen definieren\r\n        request.setAttribute(Constants.ACTION, Constants.VERWALTUNG_NUTZENKRITERIEN_ACTION);\r\n        request.setAttribute(Constants.DISPATCH_YES, Constants.DELETE);\r\n        request.setAttribute(Constants.DISPATCH_NO, Constants.LIST);\r\n        request.setAttribute(Constants.ID_NAME, Constants.NUTZENKRITERIUM_ID);\r\n        request.setAttribute(Constants.ID_VALUE, kriterium.getNutzenkriteriumId());\r\n    }\r\n\r\n    /**\r\n     * Setzt die Verknï¿½pfungen zu diesem Nutzenkriterium in den Request.\r\n     * Ein Nutzenkriterium kann mit Customizings verknï¿½pft sein. Diese\r\n     * Methode wird bei der Lï¿½schabfrage verwendet.\r\n     *\r\n     * @param request                   der HttpServletRequest\r\n     * @param kritierium                das zu lï¿½schende Nutzenkriterium\r\n     */\r\n    public void linkedTo(HttpServletRequest request, Nutzenkriterium kritierium) {\r\n        HashMap<String, List> map = new HashMap<String, List>();\r\n        // Customizings suchen, die dieses Nutzenkriterium benï¿½tigen\r\n        List<Customizing> customizings = dao.getLinkedCustomizings(kritierium);\r\n        if (customizings.size() > 0) {\r\n            for (Customizing c : customizings) {\r\n                if (c.getStatus()) {\r\n                    request.setAttribute(\"active\", true);\r\n                    break;\r\n                }\r\n            }\r\n            map.put(\"Customizings\", customizings);\r\n        }\r\n        request.setAttribute(\"linked\", map);\r\n    }\r\n\r\n    /**\r\n     * Lï¿½scht ein Nutzenkriterium. Falls es mit inaktiven Customizings\r\n     * verknï¿½ft ist, werden diese ebenfalls gelï¿½scht. Wenn aktive Customizings\r\n     * verknï¿½ft sind, wird das Nutzenkriterium nicht gelï¿½scht.\r\n     *\r\n     * @param request                   der HttpServletRequest\r\n     * @param kriterium                 das zu lï¿½schende Nutzenkriterium\r\n     */\r\n    public void delete(HttpServletRequest request, Nutzenkriterium kriterium) {\r\n        // Verknï¿½pfungen prï¿½fen\r\n        linkedTo(request, kriterium);\r\n        Boolean active = (Boolean) request.getAttribute(\"active\");\r\n        // Aktives Customizing verknï¿½ft. Dies sollte nicht passieren ausser bei\r\n        // einem direkten URL-Aufruf ...\r\n        if (active != null && active) {\r\n            logger.debug(\"Aktives Customizing verknï¿½pft, Nutzenkriterium wird nicht gelï¿½scht\");\r\n            return;\r\n        }\r\n        // Customizings lï¿½schen\r\n        List<Customizing> customizings = dao.getLinkedCustomizings(kriterium);\r\n        for (Customizing c : customizings) {\r\n            logger.debug(\"Lï¿½sche Customizing \" + c.getCustomizingId());\r\n            customizingService.cascadeDelete(request, c);\r\n        }\r\n        // Lï¿½schen des Nutzenkriteriums\r\n        dao.delete(kriterium);\r\n    }\r\n\r\n    /**\r\n     * Weist dem aktuellen Customizing das gewï¿½hlte Nutzenkriterium zu.\r\n     * Wenn das Nutzenkriterium eine Default-Frage besitzt, wird diese\r\n     * zur spï¿½teren Verwendung in der Verknï¿½pfungstabelle gespeichert.\r\n     *\r\n     * @param request                   der HttpServletRequest\r\n     * @param form                      das Formular mit dem gewï¿½hlten Nutzenkriterium\r\n     */\r\n    public void set(HttpServletRequest request, DynaActionForm form) {\r\n        // Benï¿½tigte ids holen\r\n        HttpSession session = request.getSession();\r\n        Integer customizingId = (Integer) session.getAttribute(Constants.CUSTOMIZING_ID);\r\n        Integer mandantId = (Integer) session.getAttribute(Constants.MANDANT_ID);\r\n        Integer naOpNuId = cService.getNaOpNuId(request, customizingId);\r\n        Integer nutzenkriteriumId = (Integer) form.get(Constants.NUTZENKRITERIUM_ID);\r\n        if (nutzenkriteriumId == null) {\r\n            return;\r\n        }\r\n        // Nutzenkriterium zuweisen\r\n        logger.debug(\"Nutzenkriterium zuweisen: \" + nutzenkriteriumId);\r\n        Nutzenkriterium n = new Nutzenkriterium();\r\n        n.setNutzenkriteriumId(nutzenkriteriumId);\r\n        n.setMandantId(mandantId);\r\n        n.setNutzenattraktivitaetOperativerNutzenId(naOpNuId);\r\n        // Default fragen holen und setzen\r\n        Nutzenkriterium fragen = dao.getDefaultFragen(n);\r\n        if (cService.isOperativerNutzen(request)) {\r\n            n.setFrageProjektbetroffene(fragen.getFrageProjektbetroffeneDefault());\r\n        } else {\r\n            n.setFrageManagement(fragen.getFrageManagementDefault());\r\n        }\r\n        dao.insertAssignment(n);\r\n    }\r\n\r\n    /**\r\n     * ï¿½berprï¿½ft, ob das aktuelle Nutzenkriterium zum letzten\r\n     * Schritt bzw. zur letzten gewï¿½hlten Kategorie gehï¿½rt. Wenn\r\n     * ja, kann zur nï¿½chsten Action gesprungen werden.\r\n     *\r\n     * @param request                   der HttpServletRequest\r\n     * @return                          true beim letzten Schritt, sonst false\r\n     */\r\n    public boolean next(HttpServletRequest request) {\r\n        // Nï¿½chste Action?\r\n        String last = request.getParameter(Constants.LAST_STEP);\r\n        if (last != null && last.equals(\"true\")) {\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    /**\r\n     * Entfernt die Zuweisung des gewï¿½hlten Nutzenkriteriums zum\r\n     * aktuellen Customizing.\r\n     *\r\n     * @param request                   der HttpServletRequest\r\n     * @param form                      das Formular mit dem Nutzenkriterium\r\n     */\r\n    public void remove(HttpServletRequest request, DynaActionForm form) {\r\n        // Nutzenkriterium anhand der id holen\r\n        HttpSession session = request.getSession();\r\n        Integer mandantId = (Integer) session.getAttribute(Constants.MANDANT_ID);\r\n        Integer nutzenkriteriumId = (Integer) form.get(Constants.NUTZENKRITERIUM_ID);\r\n        Integer naOpNuId = (Integer) form.get(Constants.NA_OP_NU_ID);\r\n        Nutzenkriterium n = new Nutzenkriterium();\r\n        n.setNutzenkriteriumId(nutzenkriteriumId);\r\n        n.setNutzenattraktivitaetOperativerNutzenId(naOpNuId);\r\n        n.setMandantId(mandantId);\r\n        n = dao.getAssignmentById(n);\r\n        // Zuweisung lï¿½schen\r\n        if (n != null) {\r\n            logger.debug(\"Zuweisung nutzenkriteriumId=\" + nutzenkriteriumId + \", nutzenattraktivitaetOperativerNutzenId=\" + n.getNutzenattraktivitaetOperativerNutzenId() + \" wird gelï¿½scht.\");\r\n            dao.deleteAssignment(n);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Setzt die zugehï¿½rigen Fragen von Nutzenkriterien zur Anzeige\r\n     * in den Request.\r\n     *\r\n     * @param request                   der HttpServletRequest\r\n     * @param form                      das Formular mit den Nutzenkriterien\r\n     * @return                          true bei Erfolg, sonst false\r\n     */\r\n    public boolean populateFragen(HttpServletRequest request, FragenForm form) {\r\n        // Benï¿½tigte ids holen\r\n        HttpSession session = request.getSession();\r\n        Integer customizingId = (Integer) session.getAttribute(Constants.CUSTOMIZING_ID);\r\n        Integer mandantId = (Integer) session.getAttribute(Constants.MANDANT_ID);\r\n        Integer naOpNuId = cService.getNaOpNuId(request, customizingId);\r\n        boolean isOperativerNutzen = cService.isOperativerNutzen(request);\r\n        // Alle zugewiesenen Nutzenkriterien zur gewï¿½hlten Kategorie holen\r\n        Nutzenkriterium n = new Nutzenkriterium();\r\n        n.setNutzenattraktivitaetOperativerNutzenId(naOpNuId);\r\n        n.setMandantId(mandantId);\r\n        List<Nutzenkriterium> kriterien = dao.getAssignments(n);\r\n        if (kriterien.size() == 0) {\r\n            return false;\r\n        }\r\n        // Formulardaten wieder abfï¿½llen (bei gescheiterter Validierung)\r\n        AutoGrowingList list = form.getNutzenkriteriumLine();\r\n        if (list != null) {\r\n            // Formulardaten zum Abgleich in eine HashMap stellen\r\n            Iterator it = list.iterator();\r\n            HashMap<Integer, String> formData = new HashMap<Integer, String>();\r\n            while (it.hasNext()) {\r\n                NutzenkriteriumLine nl = (NutzenkriteriumLine) it.next();\r\n                formData.put(nl.getNutzenkriteriumId(), nl.getFrage());\r\n            }\r\n            // Nutzennkriterium suchen\r\n            for (int i = 0; i < kriterien.size(); i++) {\r\n                Nutzenkriterium kriterium = (Nutzenkriterium) kriterien.get(i);\r\n                Integer nutzenkriteriumId = (Integer) kriterium.getNutzenkriteriumId();\r\n                if (formData.containsKey(nutzenkriteriumId)) {\r\n                    // Frage mit Formulardaten ersetzen\r\n                    String frage = formData.get(nutzenkriteriumId);\r\n                    // Fragen fï¿½r Projektbetroffene\r\n                    if (isOperativerNutzen) {\r\n                        logger.debug(\"Ersetze Frage in Datenbank: \" + kriterium.getFrageProjektbetroffene() + \" mit Frage aus Formular: \" + frage);\r\n                        kriterium.setFrageProjektbetroffene(frage);\r\n                    } else // Fragen fï¿½r Management\r\n                    {\r\n                        logger.debug(\"Ersetze Frage in Datenbank: \" + kriterium.getFrageManagement() + \" mit Frage aus Formular: \" + frage);\r\n                        kriterium.setFrageManagement(frage);\r\n                    }\r\n                    kriterien.set(i, kriterium);\r\n                }\r\n            }\r\n        }\r\n        // Operativer Nutzen -> Projektbetroffene\r\n        if (isOperativerNutzen) {\r\n            request.setAttribute(Constants.PROJEKTBETROFFENE, true);\r\n        }\r\n        request.setAttribute(Constants.NUTZENKRITERIEN, kriterien);\r\n        // Anzahl Kategorien holen\r\n        Kategorie k = new Kategorie();\r\n        k.setNutzenattraktivitaetOperativerNutzenId(naOpNuId);\r\n        k.setMandantId(mandantId);\r\n        List<Kategorie> kategorien = kService.getAssignments(k);\r\n        request.setAttribute(\"totalKategorien\", kategorien.size());\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Setzt die eingegebenen Daten zur Direkten Gewichtung aller\r\n     * gewï¿½hlten Nutzenkriterien in den Request, um diese anzeigen\r\n     * zu kï¿½nnen. Bei gescheiterter Validierung werden die Daten\r\n     * erneut angezeigt.\r\n     *\r\n     * @param request                   der HttpServletRequest\r\n     * @param form                      das Formular mit den Nutzenkriterien\r\n     */\r\n    public void populateDirekteGewichtung(HttpServletRequest request, FragenForm form) {\r\n        // Benï¿½tigte ids holen\r\n        HttpSession session = request.getSession();\r\n        Integer customizingId = (Integer) session.getAttribute(Constants.CUSTOMIZING_ID);\r\n        Integer mandantId = (Integer) session.getAttribute(Constants.MANDANT_ID);\r\n        Integer naOpNuId = cService.getNaOpNuId(request, customizingId);\r\n        // Alle zugewiesenen Nutzenkriterien zur gewï¿½hlten Kategorie holen\r\n        Nutzenkriterium n = new Nutzenkriterium();\r\n        n.setNutzenattraktivitaetOperativerNutzenId(naOpNuId);\r\n        n.setMandantId(mandantId);\r\n        List<Nutzenkriterium> kriterien = dao.getAssignments(n);\r\n        // Formulardaten wieder abfï¿½llen (bei gescheiterter Validierung)\r\n        AutoGrowingList list = form.getNutzenkriteriumLine();\r\n        if (list != null) {\r\n            // Formulardaten zum Abgleich in eine HashMap stellen\r\n            Iterator it = list.iterator();\r\n            HashMap<Integer, Double[]> formData = new HashMap<Integer, Double[]>();\r\n            while (it.hasNext()) {\r\n                NutzenkriteriumLine nl = (NutzenkriteriumLine) it.next();\r\n                Double kategorieGewichtung = 0.0;\r\n                Double gewichtung = 0.0;\r\n                try {\r\n                    kategorieGewichtung = new Double(nl.getKategorieGewichtung());\r\n                } catch (Exception e) {\r\n                }\r\n                try {\r\n                    gewichtung = new Double(nl.getGewichtung());\r\n                } catch (Exception e) {\r\n                }\r\n                Double[] gewichtungen = { gewichtung, kategorieGewichtung };\r\n                formData.put(nl.getNutzenkriteriumId(), gewichtungen);\r\n            }\r\n            // Nutzennkriterium suchen\r\n            for (int i = 0; i < kriterien.size(); i++) {\r\n                Nutzenkriterium kriterium = (Nutzenkriterium) kriterien.get(i);\r\n                Integer nutzenkriteriumId = (Integer) kriterium.getNutzenkriteriumId();\r\n                if (formData.containsKey(nutzenkriteriumId)) {\r\n                    // Gewichtung mit Formulardaten ersetzen\r\n                    Double[] gewichtungen = formData.get(nutzenkriteriumId);\r\n                    kriterium.setGewichtung(gewichtungen[0]);\r\n                    kriterium.setKategorieGewichtung(gewichtungen[1]);\r\n                    kriterien.set(i, kriterium);\r\n                }\r\n            }\r\n        }\r\n        request.setAttribute(Constants.NUTZENKRITERIEN, kriterien);\r\n    }\r\n\r\n    /**\r\n     * Speichert die Fragen zu den gewï¿½hlten Nutzenkriterien ab.\r\n     *\r\n     * @param request                   der HttpServletRequest\r\n     * @param form                      das Formular mit den Nutzenkriterien\r\n     * @param errors                    das ActionMessages Objekt zum Speichern\r\n     *                                  von Fehlermeldungen\r\n     * @return                          true bei Erfolg, sonst false\r\n     */\r\n    public boolean saveFragen(HttpServletRequest request, FragenForm form, ActionMessages errors) {\r\n        AutoGrowingList list = form.getNutzenkriteriumLine();\r\n        if (list == null) {\r\n            return false;\r\n        }\r\n        // Fragen ï¿½berprï¿½fen\r\n        Iterator it = list.iterator();\r\n        while (it.hasNext()) {\r\n            NutzenkriteriumLine nl = (NutzenkriteriumLine) it.next();\r\n            String frage = nl.getFrage();\r\n            if (frage == null || frage.length() == 0) {\r\n                errors.add(\"nutzenkriterium_\" + nl.getNutzenkriteriumId(), new ActionMessage(\"errors.required\", \"Frage\"));\r\n                return false;\r\n            }\r\n        }\r\n        // Benï¿½tigte ids holen\r\n        HttpSession session = request.getSession();\r\n        Integer customizingId = (Integer) session.getAttribute(Constants.CUSTOMIZING_ID);\r\n        Integer naOpNuId = cService.getNaOpNuId(request, customizingId);\r\n        // Fragen speichern\r\n        it = list.iterator();\r\n        while (it.hasNext()) {\r\n            NutzenkriteriumLine nl = (NutzenkriteriumLine) it.next();\r\n            Nutzenkriterium n = new Nutzenkriterium();\r\n            n.setNutzenkriteriumId(nl.getNutzenkriteriumId());\r\n            n.setNutzenattraktivitaetOperativerNutzenId(naOpNuId);\r\n            if (cService.isOperativerNutzen(request)) {\r\n                n.setFrageProjektbetroffene(nl.getFrage());\r\n            } else {\r\n                n.setFrageManagement(nl.getFrage());\r\n            }\r\n            logger.debug(\"nutzenkriteriumId: \" + n.getNutzenkriteriumId());\r\n            logger.debug(\"nutzenattraktivitaetId: \" + naOpNuId);\r\n            logger.debug(\"frage: \" + nl.getFrage());\r\n            dao.updateAssignment(n);\r\n        }\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Fï¿½gt ein neues Nutzenkriterium ein und wï¿½hlt dieses anschliessend\r\n     * automatisch aus.\r\n     *\r\n     * @param request                   der HttpServletRequest\r\n     * @param form                      das Formular mit dem neuen Nutzenkriterium\r\n     * @param errors                    das ActionMessages Objekt zum Speichern\r\n     *                                  von Fehlermeldungen\r\n     * @return                          true bei Erfolg, sonst false\r\n     */\r\n    public boolean add(HttpServletRequest request, DynaActionForm form, ActionMessages errors, ActionMessages messages) {\r\n        // Ids holen\r\n        HttpSession session = request.getSession();\r\n        Integer mandantId = (Integer) session.getAttribute(Constants.MANDANT_ID);\r\n        Integer customizingId = (Integer) session.getAttribute(Constants.CUSTOMIZING_ID);\r\n        // Formulardaten holen\r\n        String name = (String) form.get(\"name\");\r\n        Integer kategorieId = (Integer) form.get(Constants.KATEGORIE_ID);\r\n        logger.debug(\"name=\" + name);\r\n        logger.debug(\"kategorieId=\" + kategorieId);\r\n        // Formulardaten ï¿½berprï¿½fen\r\n        if (name == null || name.length() == 0) {\r\n            errors.add(\"name\", new ActionMessage(\"errors.required\", \"Name\"));\r\n            return false;\r\n        }\r\n        Nutzenkriterium n = new Nutzenkriterium();\r\n        n.setName(name);\r\n        n.setKategorieId(kategorieId);\r\n        n.setMandantId(mandantId);\r\n        // Auf duplikate prï¿½fen\r\n        if (dao.getByName(n) != null) {\r\n            messages.add(ActionMessages.GLOBAL_MESSAGE, new ActionMessage(\"errors.duplicate\", \"Nutzenkriterium\"));\r\n            return false;\r\n        }\r\n        // Nutzenkriterium einfï¿½gen\r\n        dao.insert(n);\r\n        // Nutzenkriterium setzen\r\n        Integer naOpNuId = cService.getNaOpNuId(request, customizingId);\r\n        n.setNutzenattraktivitaetOperativerNutzenId(naOpNuId);\r\n        dao.insertAssignment(n);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Speichert die Direkte Gewichtung von Nutzenkriterien\r\n     * der Nutzenattraktivitï¿½t bzw. des Operativen Nutzens.\r\n     *\r\n     * @param request                   der HttpServletRequest\r\n     * @param form                      das Formular mit den Nutzenkriterien\r\n     * @param errors                    das ActionMessages Objekt zum Speichern\r\n     *                                  von Fehlermeldungen\r\n     * @return                          true bei Erfolg, sonst false\r\n     */\r\n    public boolean saveDirekteGewichtung(HttpServletRequest request, FragenForm form, ActionMessages errors) {\r\n        // Formulardaten holen\r\n        AutoGrowingList list = form.getNutzenkriteriumLine();\r\n        if (list == null) {\r\n            return false;\r\n        }\r\n        // Gewichtungen ï¿½berprï¿½fen\r\n        Double gewichtung = 0.0;\r\n        Iterator it = list.iterator();\r\n        while (it.hasNext()) {\r\n            NutzenkriteriumLine nl = (NutzenkriteriumLine) it.next();\r\n            Integer nutzenkriteriumId = nl.getNutzenkriteriumId();\r\n            logger.debug(\"nutzenkrtieriumId=\" + nutzenkriteriumId);\r\n            String g = nl.getGewichtung();\r\n            logger.debug(\"Gewichtung: \" + g);\r\n            try {\r\n                gewichtung += new Double(g);\r\n            } catch (Exception e) {\r\n            }\r\n        }\r\n        logger.debug(\"Total gewichtungen: \" + gewichtung);\r\n        if (gewichtung < 99.999 || gewichtung > 100.0001) {\r\n            errors.add(ActionMessages.GLOBAL_MESSAGE, new ActionMessage(\"errors.gewichtung.failure\"));\r\n            return false;\r\n        }\r\n        /*\r\n    // Gewichtungen ï¿½berprï¿½fen\r\n    Iterator it = list.iterator();\r\n    ArrayList<Double> gewichtungsListe = new ArrayList<Double>(); \r\n    HashMap<Integer, ArrayList<Double>> gewichtungen = new HashMap<Integer, ArrayList<Double>>(); \r\n    Double kategorieGewichtung = 0.0;\r\n    boolean isFirst = true;\r\n    Integer tmpKategorieId = null;\r\n    while (it.hasNext()) {\r\n      NutzenkriteriumLine nl = (NutzenkriteriumLine) it.next();\r\n      Integer kategorieId = nl.getKategorieId();\r\n      Integer nutzenkriteriumId = nl.getNutzenkriteriumId();\r\n      logger.debug(\"kategorieId=\" + kategorieId);\r\n      logger.debug(\"nutzenkrtieriumId=\" + nutzenkriteriumId);\r\n      \r\n      // Gewichtung (muss pro Kategorie 100% ergeben)\r\n      String g = nl.getGewichtung();\r\n      logger.debug(\"Gewichtung: \" + g);\r\n      \r\n      \r\n      // Gewichtung fï¿½r die selbe Kategorie in eine Liste stellen\r\n      if (isFirst || kategorieId == null) {\r\n        isFirst = false;\r\n        tmpKategorieId = kategorieId;\r\n        try {\r\n          gewichtungsListe.add(new Double(g));\r\n        } catch (Exception e) {}\r\n      }\r\n      \r\n      // Nï¿½chste Kategorie \r\n      else {\r\n        gewichtungen.put(tmpKategorieId, gewichtungsListe);\r\n        gewichtungsListe = new ArrayList<Double>();\r\n        tmpKategorieId = kategorieId;\r\n        try {\r\n          gewichtungsListe.add(new Double(g));\r\n        } catch (Exception e) {}\r\n      }\r\n      \r\n      // kategorieGewichtung\r\n      String kg = nl.getKategorieGewichtung();\r\n      logger.debug(\"Gewichtung Kategorie: \" + kg);\r\n      try {\r\n        kategorieGewichtung += new Double(kg);\r\n      } catch (Exception e) {}\r\n    }\r\n    \r\n    it = gewichtungen.keySet().iterator();\r\n    while (it.hasNext()) {\r\n      Integer key = (Integer) it.next();\r\n      gewichtungsListe = gewichtungen.get(key);\r\n      Double gewichtung = 0.0;\r\n      for (Double d : gewichtungsListe) {\r\n        gewichtung += d;\r\n      }\r\n      \r\n      logger.debug(\"Total gewichtungen: \" + gewichtung);\r\n      if (gewichtung < 99.999 || gewichtung > 100) {\r\n        errors.add(ActionMessages.GLOBAL_MESSAGE,\r\n            new ActionMessage(\"errors.gewichtung.failure\"));\r\n        return false;\r\n      }\r\n    }\r\n    logger.debug(\"Total gewichtungen Kategorie: \" + kategorieGewichtung);\r\n    if (kategorieGewichtung < 99.999 || kategorieGewichtung > 100) {\r\n      errors.add(ActionMessages.GLOBAL_MESSAGE,\r\n          new ActionMessage(\"errors.gewichtung.failure\"));\r\n      return false;\r\n    }*/\r\n        // Benï¿½tigte ids holen\r\n        HttpSession session = request.getSession();\r\n        Integer customizingId = (Integer) session.getAttribute(Constants.CUSTOMIZING_ID);\r\n        Integer naOpNuId = cService.getNaOpNuId(request, customizingId);\r\n        // Allfï¿½llige indirekte Gewichtungen lï¿½schen\r\n        Auswahlfeld a = new Auswahlfeld();\r\n        a.setNutzenattraktivitaetOperativerNutzenId(naOpNuId);\r\n        aService.deleteGewichtungen(a);\r\n        // Gewichtung speichern\r\n        it = list.iterator();\r\n        while (it.hasNext()) {\r\n            NutzenkriteriumLine nl = (NutzenkriteriumLine) it.next();\r\n            Nutzenkriterium n = new Nutzenkriterium();\r\n            n.setNutzenkriteriumId(nl.getNutzenkriteriumId());\r\n            n.setNutzenattraktivitaetOperativerNutzenId(naOpNuId);\r\n            n.setGewichtung(new Double(nl.getGewichtung()));\r\n            dao.updateAssignmentGewichtung(n);\r\n            // Gewichtung der Kategorien speichern\r\n            Integer kategorieId = nl.getKategorieId();\r\n            if (kategorieId != null) {\r\n                Double g = null;\r\n                try {\r\n                    g = new Double(nl.getKategorieGewichtung());\r\n                } catch (Exception e) {\r\n                }\r\n                Kategorie k = new Kategorie();\r\n                k.setGewichtung(g);\r\n                k.setKategorieId(nl.getKategorieId());\r\n                k.setNutzenattraktivitaetOperativerNutzenId(naOpNuId);\r\n                kService.updateAssignment(k);\r\n            }\r\n        }\r\n        // Status setzen\r\n        boolean isNa = !cService.isOperativerNutzen(request);\r\n        if (isNa) {\r\n            logger.debug(\"GEWICHTUNGEN_NA=true\");\r\n            session.setAttribute(Constants.GEWICHTUNGEN_NA, true);\r\n        } else {\r\n            logger.debug(\"GEWICHTUNGEN_OP_NU=true\");\r\n            session.setAttribute(Constants.GEWICHTUNGEN_OP_NU, true);\r\n        }\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Prï¿½ft, ob eine Direkte Gewichtung vorliegt oder nicht.\r\n     *\r\n     * @param request                   der HttpServletRequest\r\n     * @return                          true bei Direkter Gewichtung, sonst false\r\n     */\r\n    public boolean direkteGewichtung(HttpServletRequest request) {\r\n        Integer typ = (Integer) request.getSession().getAttribute(Constants.GEWICHTUNGSTYP);\r\n        logger.debug(\"Direkte Gewichtung ausgewï¿½hlt\");\r\n        return typ == Constants.GEWICHTUNG_DIREKT;\r\n    }\r\n\r\n    /**\r\n     * Setzt den Status des Schritts \"Nutzenkriterien\", sowohl fï¿½r das\r\n     * Customizing Nutzenattraktiviï¿½t wie fï¿½r das Customizing Operativer Nutzen.\r\n     * Der Status zeigt in der Navigation an, ob dieser Schritt des Customizings\r\n     * bereits erfolgreich abgeschlossen wurde oder nicht.\r\n     *\r\n     * @param request                   der HttpServletRequest\r\n     * @param kategorien                eine Liste aller gewï¿½hlten Kategorien\r\n     * @param mandantId                 die Id des Mandanten\r\n     * @param naOpNuId                  die Id der Nutzenattraktivitï¿½t bzw.\r\n     *                                  des Operativen Nutzens\r\n     * @param isNa                      true fï¿½r Nutzenattraktivitï¿½t, sonst false\r\n     * @return                          Liste aller gewï¿½hlten Nutzenkriterien\r\n     */\r\n    public List<Nutzenkriterium> setStatus(HttpServletRequest request, List<Kategorie> kategorien, Integer mandantId, Integer naOpNuId, boolean isNa) {\r\n        boolean ok = true;\r\n        for (Kategorie k : kategorien) {\r\n            Nutzenkriterium nk = new Nutzenkriterium();\r\n            nk.setKategorieId(k.getKategorieId());\r\n            nk.setNutzenattraktivitaetOperativerNutzenId(naOpNuId);\r\n            List<Nutzenkriterium> nks = dao.getByNaOpNuAndKategorie(nk);\r\n            logger.debug(nks.size() + \" Nutzenkriterien in der Liste\");\r\n            if (nks == null || nks.size() == 0) {\r\n                ok = false;\r\n                break;\r\n            }\r\n        }\r\n        HttpSession session = request.getSession();\r\n        if (ok && isNa) {\r\n            session.setAttribute(Constants.NUTZENKRITERIEN_NA, true);\r\n            session.setAttribute(Constants.FRAGEN_NA, true);\r\n        } else if (ok) {\r\n            session.setAttribute(Constants.NUTZENKRITERIEN_OP_NU, true);\r\n            session.setAttribute(Constants.FRAGEN_OP_NU, true);\r\n        }\r\n        if (ok) {\r\n            Nutzenkriterium nk = new Nutzenkriterium();\r\n            nk.setMandantId(mandantId);\r\n            nk.setNutzenattraktivitaetOperativerNutzenId(naOpNuId);\r\n            return dao.getAssignments(nk);\r\n        } else if (!ok && isNa) {\r\n            session.removeAttribute(Constants.NUTZENKRITERIEN_NA);\r\n            session.removeAttribute(Constants.FRAGEN_NA);\r\n        } else {\r\n            session.removeAttribute(Constants.NUTZENKRITERIEN_OP_NU);\r\n            session.removeAttribute(Constants.FRAGEN_OP_NU);\r\n        }\r\n        return null;\r\n    }\r\n\r\n    /**\r\n     * Lï¿½scht die Fragebogen-Gewichtung des aktuellen Customizings.\r\n     *\r\n     * @param request                   der HttpServletRequest\r\n     */\r\n    public void deleteFragebogenGewichtung(HttpServletRequest request) {\r\n        // Benï¿½tigte ids holen\r\n        HttpSession session = request.getSession();\r\n        Integer customizingId = (Integer) session.getAttribute(Constants.CUSTOMIZING_ID);\r\n        Integer naOpNuId = cService.getNaOpNuId(request, customizingId);\r\n        // allfï¿½llige Gewichtung ï¿½ber Fragebogen lï¿½schen\r\n        Auswahlfeld a = new Auswahlfeld();\r\n        a = aService.setType(a, Constants.GEWICHTUNG);\r\n        a.setNutzenattraktivitaetOperativerNutzenId(naOpNuId);\r\n        logger.debug(\"Fragebogen-Gewichtung lï¿½schen:\");\r\n        logger.debug(\"nutzenattraktivitaetOperativerNutzenId=\" + a.getNutzenattraktivitaetOperativerNutzenId());\r\n        aService.deleteGewichtungen(a);\r\n    }\r\n\r\n    /**\r\n     * Selektiert die zuvor gewï¿½hlte Anzahl von Abstufungen fï¿½r die\r\n     * Stufenbeschriebe und die Gewichtung.\r\n     * Stellt den gewï¿½hlten Gewichtungstyp in den Request. Dies dient\r\n     * zur Vorauswahl der richtigen Checkbox im Formular \"Gewichtung\".\r\n     *\r\n     * @param request                   der HttpServletRequest\r\n     * @param path                      der Pfad der Action\r\n     */\r\n    public void preselect(HttpServletRequest request, String path) {\r\n        // Benï¿½tigte ids holen\r\n        HttpSession session = request.getSession();\r\n        Integer customizingId = (Integer) session.getAttribute(Constants.CUSTOMIZING_ID);\r\n        Integer naOpNuId = cService.getNaOpNuId(request, customizingId);\r\n        logger.debug(\"naOpNuId=\" + naOpNuId);\r\n        logger.debug(\"Pfad: \" + path);\r\n        // Abstufungstatus holen\r\n        List<Auswahlfeld> afs = new ArrayList<Auswahlfeld>();\r\n        if (path.contains(Constants.ABSTUFUNGEN_ACTION)) {\r\n            afs = aService.getAnzahlAbstufungen(naOpNuId);\r\n        } else // Gewichtungsstatus holen\r\n        {\r\n            afs = aService.getAnzahlGewichtungen(naOpNuId);\r\n        }\r\n        logger.debug(afs.size() + \" Abstufungen in der Liste\");\r\n        request.setAttribute(Constants.ABSTUFUNGEN, afs.size());\r\n        // Gewichtung bestimmen\r\n        List<Auswahlfeld> gewichtungen = aService.getGewichtungStatus(naOpNuId);\r\n        if (gewichtungen.size() > 0) {\r\n            request.setAttribute(Constants.GEWICHTUNG_NOT_DIRECT, true);\r\n        } else {\r\n            request.removeAttribute(Constants.GEWICHTUNG_NOT_DIRECT);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Kopiert alle Zuweisungen von Nutzenkriterien von einer Nutzenattraktivitï¿½t\r\n     * bzw. von einem Operativen Nutzen zu einer neuen Id. Wird zum Kopieren\r\n     * von Customizings verwendet.\r\n     *\r\n     * @param mandantId                 die Id des Mandanten\r\n     * @param naOpNuId                  die Id der Nutzenattraktivitï¿½t bzw. des\r\n     *                                  Operativen Nutzens, welche die zu kopierenden\r\n     *                                  Zuweisungen enthï¿½lt\r\n     * @param newNaOpNuId               die neue Id fï¿½r die kopierten Zuweisungen\r\n     */\r\n    public void copy(Integer mandantId, Integer naOpNuId, Integer newNaOpNuId) {\r\n        Nutzenkriterium n = new Nutzenkriterium();\r\n        n.setNutzenattraktivitaetOperativerNutzenId(naOpNuId);\r\n        n.setMandantId(mandantId);\r\n        List<Nutzenkriterium> kriterien = dao.getAssignments(n);\r\n        for (Nutzenkriterium kriterium : kriterien) {\r\n            kriterium.setNutzenattraktivitaetOperativerNutzenId(newNaOpNuId);\r\n            dao.insertAssignment(kriterium);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * ï¿½berprï¿½ft, ob ein Customizing komplett ist.\r\n     *\r\n     * @param request                   der HttpServletRequest\r\n     * @return                          true bei komplettem Customizing, sonst false\r\n     */\r\n    public boolean customizingComplete(HttpServletRequest request) {\r\n        return customizingService.complete(request);\r\n    }\r\n\r\n    /**\r\n     * Erstellt ein Objekt vom Typ Nutzenkriterium mit der id des Mandanten\r\n     * und, falls angegeben, mit abgefï¿½llten Formulardaten\r\n     *\r\n     * @param request                   der HttpServletRequest\r\n     * @param form                      das DynaActionForm\r\n     * @return                          Nutzenkriterium mit mandantId\r\n     */\r\n    private Nutzenkriterium createNutzenkriterium(HttpServletRequest request, DynaActionForm form) {\r\n        Integer mandantId = (Integer) request.getSession().getAttribute(Constants.MANDANT_ID);\r\n        Nutzenkriterium n = new Nutzenkriterium();\r\n        n.setMandantId(mandantId);\r\n        if (form != null) {\r\n            Integer id = (Integer) form.get(Constants.NUTZENKRITERIUM_ID);\r\n            String name = (String) form.get(Constants.NAME);\r\n            String beschreibung = (String) form.get(\"beschreibung\");\r\n            String frageManagementDefault = (String) form.get(\"frageManagementDefault\");\r\n            String frageProjektbetroffeneDefault = (String) form.get(\"frageProjektbetroffeneDefault\");\r\n            Integer kategorieId = (Integer) form.get(Constants.KATEGORIE_ID);\r\n            n.setNutzenkriteriumId(id);\r\n            n.setName(name);\r\n            n.setBeschreibung(beschreibung);\r\n            n.setFrageManagementDefault(frageManagementDefault);\r\n            n.setFrageProjektbetroffeneDefault(frageProjektbetroffeneDefault);\r\n            n.setKategorieId(kategorieId);\r\n        }\r\n        return n;\r\n    }\r\n\r\n    /**\r\n     * ï¿½berprï¿½ft, ob die Id eines Nutzenkriteriums Ziels im Request ist\r\n     * (update) oder nicht (neu).\r\n     *\r\n     * @param request                   der HttpServletRequest\r\n     * @param form                      das DynaActionForm\r\n     * @return                          true, wenn das angegebene Nutzenkriterium\r\n     *                                  besteht, sonst false.\r\n     */\r\n    private boolean isUpdate(HttpServletRequest request, DynaActionForm form) {\r\n        Integer id = (Integer) form.get(Constants.NUTZENKRITERIUM_ID);\r\n        if (id == null || id == 0) {\r\n            return false;\r\n        }\r\n        return true;\r\n    }\r\n}\r\n",
		"id": "EvoSuiteBenchmark/46_nutzenportfolio/src/main/java/ch/bfh/egov/nutzenportfolio/service/nutzenkriterium/NutzenkriteriumDaoServiceTest0.java",
		"test_prompt": "// NutzenkriteriumDaoServiceTest0.java\npackage ch.bfh.egov.nutzenportfolio.service.nutzenkriterium;\n\nimport java.util.ArrayList;\nimport java.util.Collections;\nimport java.util.Comparator;\nimport java.util.HashMap;\nimport java.util.Iterator;\nimport java.util.List;\nimport javax.servlet.http.HttpServletRequest;\nimport javax.servlet.http.HttpSession;\nimport org.apache.commons.logging.Log;\nimport org.apache.commons.logging.LogFactory;\nimport org.apache.struts.action.ActionMessage;\nimport org.apache.struts.action.ActionMessages;\nimport org.apache.struts.action.DynaActionForm;\nimport ch.bfh.egov.nutzenportfolio.Constants;\nimport ch.bfh.egov.nutzenportfolio.common.AutoGrowingList;\nimport ch.bfh.egov.nutzenportfolio.common.NutzenkriteriumLine;\nimport ch.bfh.egov.nutzenportfolio.form.FragenForm;\nimport ch.bfh.egov.nutzenportfolio.persistence.nutzenkriterium.NutzenkriteriumDao;\nimport ch.bfh.egov.nutzenportfolio.service.auswahlfeld.AuswahlfeldService;\nimport ch.bfh.egov.nutzenportfolio.service.common.CommonService;\nimport ch.bfh.egov.nutzenportfolio.service.customizing.CustomizingService;\nimport ch.bfh.egov.nutzenportfolio.service.kategorie.KategorieService;\nimport ch.bfh.egov.nutzenportfolio.tos.Auswahlfeld;\nimport ch.bfh.egov.nutzenportfolio.tos.Customizing;\nimport ch.bfh.egov.nutzenportfolio.tos.Kategorie;\nimport ch.bfh.egov.nutzenportfolio.tos.NaOpNu;\nimport ch.bfh.egov.nutzenportfolio.tos.Nutzenkriterium;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link NutzenkriteriumDaoService}.\n* It contains ten unit test cases for the {@link NutzenkriteriumDaoService#populate(HttpServletRequest)} method.\n*/\nclass NutzenkriteriumDaoServiceTest0 {"
	},
	{
		"original_code": "// NutzenkriteriumDaoService.java\n/**\r\n * Nutzenportfolio\r\n * Copyright (C) 2006 Kompetenzzentrum E-Business, Simon Bergamin\r\n *\r\n * This program is free software; you can redistribute it and/or\r\n * modify it under the terms of the GNU General Public License\r\n * as published by the Free Software Foundation; either version 2\r\n * of the License, or (at your option) any later version.\r\n *\r\n * This program is distributed in the hope that it will be useful,\r\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n * GNU General Public License for more details.\r\n *\r\n * You should have received a copy of the GNU General Public License\r\n * along with this program; if not, write to the Free Software\r\n * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\r\n */\r\npackage ch.bfh.egov.nutzenportfolio.service.nutzenkriterium;\r\n\r\nimport java.util.ArrayList;\r\nimport java.util.Collections;\r\nimport java.util.Comparator;\r\nimport java.util.HashMap;\r\nimport java.util.Iterator;\r\nimport java.util.List;\r\nimport javax.servlet.http.HttpServletRequest;\r\nimport javax.servlet.http.HttpSession;\r\nimport org.apache.commons.logging.Log;\r\nimport org.apache.commons.logging.LogFactory;\r\nimport org.apache.struts.action.ActionMessage;\r\nimport org.apache.struts.action.ActionMessages;\r\nimport org.apache.struts.action.DynaActionForm;\r\nimport ch.bfh.egov.nutzenportfolio.Constants;\r\nimport ch.bfh.egov.nutzenportfolio.common.AutoGrowingList;\r\nimport ch.bfh.egov.nutzenportfolio.common.NutzenkriteriumLine;\r\nimport ch.bfh.egov.nutzenportfolio.form.FragenForm;\r\nimport ch.bfh.egov.nutzenportfolio.persistence.nutzenkriterium.NutzenkriteriumDao;\r\nimport ch.bfh.egov.nutzenportfolio.service.auswahlfeld.AuswahlfeldService;\r\nimport ch.bfh.egov.nutzenportfolio.service.common.CommonService;\r\nimport ch.bfh.egov.nutzenportfolio.service.customizing.CustomizingService;\r\nimport ch.bfh.egov.nutzenportfolio.service.kategorie.KategorieService;\r\nimport ch.bfh.egov.nutzenportfolio.tos.Auswahlfeld;\r\nimport ch.bfh.egov.nutzenportfolio.tos.Customizing;\r\nimport ch.bfh.egov.nutzenportfolio.tos.Kategorie;\r\nimport ch.bfh.egov.nutzenportfolio.tos.NaOpNu;\r\nimport ch.bfh.egov.nutzenportfolio.tos.Nutzenkriterium;\r\n\r\n/**\r\n * Implementierende Service-Klasse fï¿½r Nutzenkriterien.\r\n *\r\n * @author Kompetenzzentrum E-Business, Simon Bergamin\r\n */\r\npublic class NutzenkriteriumDaoService implements NutzenkriteriumService {\r\n\r\n    private NutzenkriteriumDao dao;\r\n\r\n    private CommonService cService;\r\n\r\n    private KategorieService kService;\r\n\r\n    private AuswahlfeldService aService;\r\n\r\n    private CustomizingService customizingService;\r\n\r\n    private Log logger = LogFactory.getLog(this.getClass());\r\n\r\n    /**\r\n     * Konstruktor. ï¿½bergabe des DataAcessObject-Interfaces fï¿½r Nutzenkriterien.\r\n     *\r\n     * @param dao                               Nutzenkriterien DataAcessObject-Interface\r\n     */\r\n    public NutzenkriteriumDaoService(NutzenkriteriumDao dao) {\r\n        this.dao = dao;\r\n    }\r\n\r\n    /**\r\n     * @see ch.bfh.egov.nutzenportfolio.persistence.nutzenkriterium.NutzenkriteriumIbatisDao#getAssignmentById(Nutzenkriterium)\r\n     */\r\n    public Nutzenkriterium getAssignmentById(Nutzenkriterium kriterium) {\r\n        return dao.getAssignmentById(kriterium);\r\n    }\r\n\r\n    /**\r\n     * @see ch.bfh.egov.nutzenportfolio.persistence.nutzenkriterium.NutzenkriteriumIbatisDao#getByProjektId(NaOpNu)\r\n     */\r\n    public List<Nutzenkriterium> getByProjektId(NaOpNu naOpNu) {\r\n        return dao.getByProjektId(naOpNu);\r\n    }\r\n\r\n    /**\r\n     * @see ch.bfh.egov.nutzenportfolio.persistence.nutzenkriterium.NutzenkriteriumIbatisDao#getAssignments(Nutzenkriterium)\r\n     */\r\n    public List<Nutzenkriterium> getAssignments(Nutzenkriterium kriterium) {\r\n        return dao.getAssignments(kriterium);\r\n    }\r\n\r\n    /**\r\n     * @see ch.bfh.egov.nutzenportfolio.persistence.nutzenkriterium.NutzenkriteriumIbatisDao#update(Nutzenkriterium)\r\n     */\r\n    public void update(Nutzenkriterium kriterium) {\r\n        dao.updateAssignment(kriterium);\r\n    }\r\n\r\n    /**\r\n     * @see ch.bfh.egov.nutzenportfolio.persistence.nutzenkriterium.NutzenkriteriumIbatisDao#unsetAssignmentGewichtung(Integer)\r\n     */\r\n    public void unsetAssignmentGewichtung(Integer naOpNuId) {\r\n        dao.unsetAssignmentGewichtung(naOpNuId);\r\n    }\r\n\r\n    /**\r\n     * @see ch.bfh.egov.nutzenportfolio.persistence.nutzenkriterium.NutzenkriteriumIbatisDao#deleteAssignments(Integer)\r\n     */\r\n    public void deleteAssignments(Integer naOpNuId) {\r\n        dao.deleteAssignments(naOpNuId);\r\n    }\r\n\r\n    /**\r\n     * Initialisierung dieses Service-Objekts durch ï¿½bergabe anderer,\r\n     * benï¿½tigter Service-Objekte.\r\n     *\r\n     * @param aService                   AuswahlFeldService Objekt\r\n     * @param cService                   CommonService Objekt\r\n     * @param kService                   KategorieService Objekt\r\n     * @param customizingService         CustomizingService Objekt\r\n     */\r\n    public void init(AuswahlfeldService aService, CommonService cService, KategorieService kService, CustomizingService customizingService) {\r\n        this.aService = aService;\r\n        this.cService = cService;\r\n        this.kService = kService;\r\n        this.customizingService = customizingService;\r\n    }\r\n\r\n    /**\r\n     * Stellt eine Liste aller Nutzenkriterien in den request.\r\n     *\r\n     * @param request                   der HttpServletRequest\r\n     */\r\n    public void list(HttpServletRequest request) {\r\n        Integer mandantId = (Integer) request.getSession().getAttribute(Constants.MANDANT_ID);\r\n        List<Nutzenkriterium> kriterien = dao.getAll(mandantId);\r\n        // Sortieren der Nutzenkriterien nach Namen\r\n        Collections.<Nutzenkriterium>sort(kriterien, new Comparator<Nutzenkriterium>() {\r\n\r\n            public int compare(Nutzenkriterium a, Nutzenkriterium b) {\r\n                String name1 = a.getName().toLowerCase();\r\n                String name2 = b.getName().toLowerCase();\r\n                return name1.compareTo(name2);\r\n            }\r\n        });\r\n        request.setAttribute(Constants.NUTZENKRITERIEN, kriterien);\r\n    }\r\n\r\n    /**\r\n     * Stellt eine Liste von Nutzenkriterien sowie deren zugehï¿½rigen\r\n     * Kategorien in den Request. Pro Request bzw. pro Seitenaufruf\r\n     * wird eine Kategorie mit den jeweiligen Nutzenkriterien angezeigt.\r\n     * Mit einem Klick auf \"weiter\" gelangt der Benutzer zur nï¿½chsten Seite\r\n     * bzw. der nï¿½chsten gewï¿½hlten Kategorie.\r\n     *\r\n     * @param request                   der HttpServletRequest\r\n     * @return                          true bei Erfolg, sonst false\r\n     */\r\n    public boolean populate(HttpServletRequest request) {\r\n        // Benï¿½tigte ids holen\r\n        HttpSession session = request.getSession();\r\n        Integer mandantId = (Integer) session.getAttribute(Constants.MANDANT_ID);\r\n        Integer customizingId = (Integer) session.getAttribute(Constants.CUSTOMIZING_ID);\r\n        Integer naOpNuId = cService.getNaOpNuId(request, customizingId);\r\n        logger.debug(\"naOpNuId=\" + naOpNuId);\r\n        // Zugewiesene Kategorien holen\r\n        Kategorie k = new Kategorie();\r\n        k.setNutzenattraktivitaetOperativerNutzenId(naOpNuId);\r\n        k.setMandantId(mandantId);\r\n        List<Kategorie> kategorien = kService.getAssignments(k);\r\n        Integer kategorieId = null;\r\n        Integer step = null;\r\n        if (kategorien.size() == 0) {\r\n            return false;\r\n        }\r\n        // 1 Schritt pro Kategorie. Parameter ï¿½berprï¿½fen.\r\n        String stepStr = request.getParameter(Constants.STEP);\r\n        String next = request.getParameter(Constants.NEXT);\r\n        logger.debug(\"Angegebener step: \" + stepStr);\r\n        try {\r\n            step = new Integer(stepStr);\r\n        } catch (NumberFormatException nfex) {\r\n            step = 1;\r\n        }\r\n        // Denselben Schritt wiederholen, wenn nicht \"weiter\" geklickt wurde\r\n        if (next == null && step > 1) {\r\n            --step;\r\n        }\r\n        // Kategorien in Array stellen\r\n        Integer[] kategorienIdArr = new Integer[kategorien.size()];\r\n        String[] kategorienNameArr = new String[kategorien.size()];\r\n        int i = 0;\r\n        for (Kategorie kategorie : kategorien) {\r\n            kategorienIdArr[i] = kategorie.getKategorieId();\r\n            kategorienNameArr[i++] = kategorie.getName();\r\n            logger.debug(\"Kategorie: id=\" + kategorienIdArr[i - 1] + \", name=\" + kategorienNameArr[i - 1]);\r\n        }\r\n        // Auf inkorrekten step Parameter prï¿½fen\r\n        if ((step - 1) >= kategorienIdArr.length) {\r\n            logger.warn(\"Nicht verfï¿½gbarer Schritt ausgewï¿½hlt!\");\r\n            step = 1;\r\n        }\r\n        // Auf letzten Schritt prï¿½fen\r\n        if (step == kategorienIdArr.length) {\r\n            request.setAttribute(Constants.LAST_STEP, true);\r\n        }\r\n        // Id der Kategorie anhand des step Parameters holen\r\n        kategorieId = kategorienIdArr[step - 1];\r\n        logger.debug(\"Gewaehlte Kategorie: \" + kategorieId);\r\n        request.setAttribute(Constants.KATEGORIE_ID, kategorieId);\r\n        request.setAttribute(\"kategorie\", kategorienNameArr[step - 1]);\r\n        request.setAttribute(Constants.STEP, step + 1);\r\n        // Alle Nutzenkriterien zur gewï¿½hlten Kategorie holen\r\n        Nutzenkriterium n = new Nutzenkriterium();\r\n        n.setNutzenattraktivitaetOperativerNutzenId(naOpNuId);\r\n        n.setKategorieId(kategorieId);\r\n        n.setMandantId(mandantId);\r\n        // Nutzenkriterien aussortieren, die einem anderen Customizing zugeordnet sind\r\n        List<Nutzenkriterium> nutzenkriterien = dao.getByKategorie(n);\r\n        Iterator it = nutzenkriterien.iterator();\r\n        HashMap<String, Nutzenkriterium> map = new HashMap<String, Nutzenkriterium>();\r\n        while (it.hasNext()) {\r\n            Nutzenkriterium nk = (Nutzenkriterium) it.next();\r\n            String name = nk.getName();\r\n            boolean contains = map.containsKey(name);\r\n            Integer nuNaOpNuId = nk.getNutzenattraktivitaetOperativerNutzenId();\r\n            // HashMap abfï¿½llen um allfï¿½llige doppelte Nutzenkriterien auszusortieren\r\n            // (ist der Fall bei Zuweisungen zu anderen Customizings)\r\n            if (!contains || nuNaOpNuId != null && contains && nuNaOpNuId.equals(naOpNuId)) {\r\n                map.put(name, nk);\r\n            }\r\n        }\r\n        nutzenkriterien = new ArrayList<Nutzenkriterium>(map.values());\r\n        request.setAttribute(Constants.NUTZENKRITERIEN, nutzenkriterien);\r\n        // Operativer Nutzen -> Projektbetroffene\r\n        if (cService.isOperativerNutzen(request)) {\r\n            request.setAttribute(Constants.PROJEKTBETROFFENE, true);\r\n        }\r\n        Integer levels = (Integer) request.getSession().getAttribute(Constants.ABSTUFUNGEN);\r\n        request.setAttribute(\"totalKategorien\", ((levels != null) ? kategorien.size() : 0));\r\n        // Alle zugewiesenen Nutzenkriterien zur gewï¿½hlten Kategorie holen\r\n        List nAssigned = dao.getAssignments(n);\r\n        request.setAttribute(Constants.NA_OP_NU_ID, naOpNuId);\r\n        request.setAttribute(Constants.NUTZENKRITERIEN_ASSIGNED, nAssigned);\r\n        boolean isNa = !cService.isOperativerNutzen(request);\r\n        setStatus(request, kategorien, mandantId, naOpNuId, isNa);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Fï¿½llt ein Formular mit bestehenden Daten eines Nutzenkriteriums ab,\r\n     * falls eine entsprechende id angegeben wurde.\r\n     *\r\n     * @param request                   der HttpServletRequest\r\n     * @param form                      das DynaActionForm\r\n     */\r\n    public void edit(HttpServletRequest request, DynaActionForm form) {\r\n        if (isUpdate(request, form)) {\r\n            Nutzenkriterium n = createNutzenkriterium(request, form);\r\n            Integer mandantId = n.getMandantId();\r\n            n = dao.getById(n);\r\n            form.set(\"name\", n.getName());\r\n            form.set(\"beschreibung\", n.getBeschreibung());\r\n            form.set(\"frageManagementDefault\", n.getFrageManagementDefault());\r\n            form.set(\"frageProjektbetroffeneDefault\", n.getFrageProjektbetroffeneDefault());\r\n            form.set(Constants.KATEGORIE_ID, n.getKategorieId());\r\n            // Kategorien in die Session stellen\r\n            logger.debug(\"Kategorien holen fï¿½r mandantId=\" + mandantId);\r\n            List<Kategorie> kategorien = kService.getAll(mandantId);\r\n            request.getSession().setAttribute(Constants.KATEGORIEN, kategorien);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Fï¿½hrt ein update eines bestenenden Nutzenkriteriums anhand von\r\n     * Formulardaten durch.\r\n     *\r\n     * @param request                   der HttpServletRequest\r\n     * @param form                      das DynaActionForm\r\n     */\r\n    public void update(HttpServletRequest request, DynaActionForm form) {\r\n        logger.debug(\"Update Nutzenkriterium\");\r\n        if (isUpdate(request, form)) {\r\n            logger.debug(\"Update durchfï¿½hren\");\r\n            Nutzenkriterium n = createNutzenkriterium(request, form);\r\n            dao.update(n);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Prï¿½ft, ob ein Nutzenkriterium existiert und gibt es zurï¿½ck.\r\n     *\r\n     * @param request                   der HttpServletRequest\r\n     * @param form                      das DynaActionForm\r\n     * @return                          das Nutzenkriterium\r\n     */\r\n    public Nutzenkriterium getNutzenkriterium(HttpServletRequest request, DynaActionForm form) {\r\n        Nutzenkriterium n = createNutzenkriterium(request, form);\r\n        return dao.getById(n);\r\n    }\r\n\r\n    /**\r\n     * Abfrage fï¿½r das Lï¿½schen von einem Nutzenkriterium.\r\n     *\r\n     * @param request                   der HttpServletRequest\r\n     * @param kriterium                 das zu lï¿½schende Nutzenkriterium\r\n     * @param messages                  das ActionMessages Objekt\r\n     */\r\n    public void deleteQuestion(HttpServletRequest request, Nutzenkriterium kriterium, ActionMessages messages) {\r\n        // Verknï¿½pfungen prï¿½fen\r\n        linkedTo(request, kriterium);\r\n        // Bestï¿½tigungsnachricht ausgeben\r\n        messages.add(ActionMessages.GLOBAL_MESSAGE, new ActionMessage(\"messages.question.delete\", kriterium.getName()));\r\n        // Actions zum Lï¿½schen und Abbrechen definieren\r\n        request.setAttribute(Constants.ACTION, Constants.VERWALTUNG_NUTZENKRITERIEN_ACTION);\r\n        request.setAttribute(Constants.DISPATCH_YES, Constants.DELETE);\r\n        request.setAttribute(Constants.DISPATCH_NO, Constants.LIST);\r\n        request.setAttribute(Constants.ID_NAME, Constants.NUTZENKRITERIUM_ID);\r\n        request.setAttribute(Constants.ID_VALUE, kriterium.getNutzenkriteriumId());\r\n    }\r\n\r\n    /**\r\n     * Setzt die Verknï¿½pfungen zu diesem Nutzenkriterium in den Request.\r\n     * Ein Nutzenkriterium kann mit Customizings verknï¿½pft sein. Diese\r\n     * Methode wird bei der Lï¿½schabfrage verwendet.\r\n     *\r\n     * @param request                   der HttpServletRequest\r\n     * @param kritierium                das zu lï¿½schende Nutzenkriterium\r\n     */\r\n    public void linkedTo(HttpServletRequest request, Nutzenkriterium kritierium) {\r\n        HashMap<String, List> map = new HashMap<String, List>();\r\n        // Customizings suchen, die dieses Nutzenkriterium benï¿½tigen\r\n        List<Customizing> customizings = dao.getLinkedCustomizings(kritierium);\r\n        if (customizings.size() > 0) {\r\n            for (Customizing c : customizings) {\r\n                if (c.getStatus()) {\r\n                    request.setAttribute(\"active\", true);\r\n                    break;\r\n                }\r\n            }\r\n            map.put(\"Customizings\", customizings);\r\n        }\r\n        request.setAttribute(\"linked\", map);\r\n    }\r\n\r\n    /**\r\n     * Lï¿½scht ein Nutzenkriterium. Falls es mit inaktiven Customizings\r\n     * verknï¿½ft ist, werden diese ebenfalls gelï¿½scht. Wenn aktive Customizings\r\n     * verknï¿½ft sind, wird das Nutzenkriterium nicht gelï¿½scht.\r\n     *\r\n     * @param request                   der HttpServletRequest\r\n     * @param kriterium                 das zu lï¿½schende Nutzenkriterium\r\n     */\r\n    public void delete(HttpServletRequest request, Nutzenkriterium kriterium) {\r\n        // Verknï¿½pfungen prï¿½fen\r\n        linkedTo(request, kriterium);\r\n        Boolean active = (Boolean) request.getAttribute(\"active\");\r\n        // Aktives Customizing verknï¿½ft. Dies sollte nicht passieren ausser bei\r\n        // einem direkten URL-Aufruf ...\r\n        if (active != null && active) {\r\n            logger.debug(\"Aktives Customizing verknï¿½pft, Nutzenkriterium wird nicht gelï¿½scht\");\r\n            return;\r\n        }\r\n        // Customizings lï¿½schen\r\n        List<Customizing> customizings = dao.getLinkedCustomizings(kriterium);\r\n        for (Customizing c : customizings) {\r\n            logger.debug(\"Lï¿½sche Customizing \" + c.getCustomizingId());\r\n            customizingService.cascadeDelete(request, c);\r\n        }\r\n        // Lï¿½schen des Nutzenkriteriums\r\n        dao.delete(kriterium);\r\n    }\r\n\r\n    /**\r\n     * Weist dem aktuellen Customizing das gewï¿½hlte Nutzenkriterium zu.\r\n     * Wenn das Nutzenkriterium eine Default-Frage besitzt, wird diese\r\n     * zur spï¿½teren Verwendung in der Verknï¿½pfungstabelle gespeichert.\r\n     *\r\n     * @param request                   der HttpServletRequest\r\n     * @param form                      das Formular mit dem gewï¿½hlten Nutzenkriterium\r\n     */\r\n    public void set(HttpServletRequest request, DynaActionForm form) {\r\n        // Benï¿½tigte ids holen\r\n        HttpSession session = request.getSession();\r\n        Integer customizingId = (Integer) session.getAttribute(Constants.CUSTOMIZING_ID);\r\n        Integer mandantId = (Integer) session.getAttribute(Constants.MANDANT_ID);\r\n        Integer naOpNuId = cService.getNaOpNuId(request, customizingId);\r\n        Integer nutzenkriteriumId = (Integer) form.get(Constants.NUTZENKRITERIUM_ID);\r\n        if (nutzenkriteriumId == null) {\r\n            return;\r\n        }\r\n        // Nutzenkriterium zuweisen\r\n        logger.debug(\"Nutzenkriterium zuweisen: \" + nutzenkriteriumId);\r\n        Nutzenkriterium n = new Nutzenkriterium();\r\n        n.setNutzenkriteriumId(nutzenkriteriumId);\r\n        n.setMandantId(mandantId);\r\n        n.setNutzenattraktivitaetOperativerNutzenId(naOpNuId);\r\n        // Default fragen holen und setzen\r\n        Nutzenkriterium fragen = dao.getDefaultFragen(n);\r\n        if (cService.isOperativerNutzen(request)) {\r\n            n.setFrageProjektbetroffene(fragen.getFrageProjektbetroffeneDefault());\r\n        } else {\r\n            n.setFrageManagement(fragen.getFrageManagementDefault());\r\n        }\r\n        dao.insertAssignment(n);\r\n    }\r\n\r\n    /**\r\n     * ï¿½berprï¿½ft, ob das aktuelle Nutzenkriterium zum letzten\r\n     * Schritt bzw. zur letzten gewï¿½hlten Kategorie gehï¿½rt. Wenn\r\n     * ja, kann zur nï¿½chsten Action gesprungen werden.\r\n     *\r\n     * @param request                   der HttpServletRequest\r\n     * @return                          true beim letzten Schritt, sonst false\r\n     */\r\n    public boolean next(HttpServletRequest request) {\r\n        // Nï¿½chste Action?\r\n        String last = request.getParameter(Constants.LAST_STEP);\r\n        if (last != null && last.equals(\"true\")) {\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    /**\r\n     * Entfernt die Zuweisung des gewï¿½hlten Nutzenkriteriums zum\r\n     * aktuellen Customizing.\r\n     *\r\n     * @param request                   der HttpServletRequest\r\n     * @param form                      das Formular mit dem Nutzenkriterium\r\n     */\r\n    public void remove(HttpServletRequest request, DynaActionForm form) {\r\n        // Nutzenkriterium anhand der id holen\r\n        HttpSession session = request.getSession();\r\n        Integer mandantId = (Integer) session.getAttribute(Constants.MANDANT_ID);\r\n        Integer nutzenkriteriumId = (Integer) form.get(Constants.NUTZENKRITERIUM_ID);\r\n        Integer naOpNuId = (Integer) form.get(Constants.NA_OP_NU_ID);\r\n        Nutzenkriterium n = new Nutzenkriterium();\r\n        n.setNutzenkriteriumId(nutzenkriteriumId);\r\n        n.setNutzenattraktivitaetOperativerNutzenId(naOpNuId);\r\n        n.setMandantId(mandantId);\r\n        n = dao.getAssignmentById(n);\r\n        // Zuweisung lï¿½schen\r\n        if (n != null) {\r\n            logger.debug(\"Zuweisung nutzenkriteriumId=\" + nutzenkriteriumId + \", nutzenattraktivitaetOperativerNutzenId=\" + n.getNutzenattraktivitaetOperativerNutzenId() + \" wird gelï¿½scht.\");\r\n            dao.deleteAssignment(n);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Setzt die zugehï¿½rigen Fragen von Nutzenkriterien zur Anzeige\r\n     * in den Request.\r\n     *\r\n     * @param request                   der HttpServletRequest\r\n     * @param form                      das Formular mit den Nutzenkriterien\r\n     * @return                          true bei Erfolg, sonst false\r\n     */\r\n    public boolean populateFragen(HttpServletRequest request, FragenForm form) {\r\n        // Benï¿½tigte ids holen\r\n        HttpSession session = request.getSession();\r\n        Integer customizingId = (Integer) session.getAttribute(Constants.CUSTOMIZING_ID);\r\n        Integer mandantId = (Integer) session.getAttribute(Constants.MANDANT_ID);\r\n        Integer naOpNuId = cService.getNaOpNuId(request, customizingId);\r\n        boolean isOperativerNutzen = cService.isOperativerNutzen(request);\r\n        // Alle zugewiesenen Nutzenkriterien zur gewï¿½hlten Kategorie holen\r\n        Nutzenkriterium n = new Nutzenkriterium();\r\n        n.setNutzenattraktivitaetOperativerNutzenId(naOpNuId);\r\n        n.setMandantId(mandantId);\r\n        List<Nutzenkriterium> kriterien = dao.getAssignments(n);\r\n        if (kriterien.size() == 0) {\r\n            return false;\r\n        }\r\n        // Formulardaten wieder abfï¿½llen (bei gescheiterter Validierung)\r\n        AutoGrowingList list = form.getNutzenkriteriumLine();\r\n        if (list != null) {\r\n            // Formulardaten zum Abgleich in eine HashMap stellen\r\n            Iterator it = list.iterator();\r\n            HashMap<Integer, String> formData = new HashMap<Integer, String>();\r\n            while (it.hasNext()) {\r\n                NutzenkriteriumLine nl = (NutzenkriteriumLine) it.next();\r\n                formData.put(nl.getNutzenkriteriumId(), nl.getFrage());\r\n            }\r\n            // Nutzennkriterium suchen\r\n            for (int i = 0; i < kriterien.size(); i++) {\r\n                Nutzenkriterium kriterium = (Nutzenkriterium) kriterien.get(i);\r\n                Integer nutzenkriteriumId = (Integer) kriterium.getNutzenkriteriumId();\r\n                if (formData.containsKey(nutzenkriteriumId)) {\r\n                    // Frage mit Formulardaten ersetzen\r\n                    String frage = formData.get(nutzenkriteriumId);\r\n                    // Fragen fï¿½r Projektbetroffene\r\n                    if (isOperativerNutzen) {\r\n                        logger.debug(\"Ersetze Frage in Datenbank: \" + kriterium.getFrageProjektbetroffene() + \" mit Frage aus Formular: \" + frage);\r\n                        kriterium.setFrageProjektbetroffene(frage);\r\n                    } else // Fragen fï¿½r Management\r\n                    {\r\n                        logger.debug(\"Ersetze Frage in Datenbank: \" + kriterium.getFrageManagement() + \" mit Frage aus Formular: \" + frage);\r\n                        kriterium.setFrageManagement(frage);\r\n                    }\r\n                    kriterien.set(i, kriterium);\r\n                }\r\n            }\r\n        }\r\n        // Operativer Nutzen -> Projektbetroffene\r\n        if (isOperativerNutzen) {\r\n            request.setAttribute(Constants.PROJEKTBETROFFENE, true);\r\n        }\r\n        request.setAttribute(Constants.NUTZENKRITERIEN, kriterien);\r\n        // Anzahl Kategorien holen\r\n        Kategorie k = new Kategorie();\r\n        k.setNutzenattraktivitaetOperativerNutzenId(naOpNuId);\r\n        k.setMandantId(mandantId);\r\n        List<Kategorie> kategorien = kService.getAssignments(k);\r\n        request.setAttribute(\"totalKategorien\", kategorien.size());\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Setzt die eingegebenen Daten zur Direkten Gewichtung aller\r\n     * gewï¿½hlten Nutzenkriterien in den Request, um diese anzeigen\r\n     * zu kï¿½nnen. Bei gescheiterter Validierung werden die Daten\r\n     * erneut angezeigt.\r\n     *\r\n     * @param request                   der HttpServletRequest\r\n     * @param form                      das Formular mit den Nutzenkriterien\r\n     */\r\n    public void populateDirekteGewichtung(HttpServletRequest request, FragenForm form) {\r\n        // Benï¿½tigte ids holen\r\n        HttpSession session = request.getSession();\r\n        Integer customizingId = (Integer) session.getAttribute(Constants.CUSTOMIZING_ID);\r\n        Integer mandantId = (Integer) session.getAttribute(Constants.MANDANT_ID);\r\n        Integer naOpNuId = cService.getNaOpNuId(request, customizingId);\r\n        // Alle zugewiesenen Nutzenkriterien zur gewï¿½hlten Kategorie holen\r\n        Nutzenkriterium n = new Nutzenkriterium();\r\n        n.setNutzenattraktivitaetOperativerNutzenId(naOpNuId);\r\n        n.setMandantId(mandantId);\r\n        List<Nutzenkriterium> kriterien = dao.getAssignments(n);\r\n        // Formulardaten wieder abfï¿½llen (bei gescheiterter Validierung)\r\n        AutoGrowingList list = form.getNutzenkriteriumLine();\r\n        if (list != null) {\r\n            // Formulardaten zum Abgleich in eine HashMap stellen\r\n            Iterator it = list.iterator();\r\n            HashMap<Integer, Double[]> formData = new HashMap<Integer, Double[]>();\r\n            while (it.hasNext()) {\r\n                NutzenkriteriumLine nl = (NutzenkriteriumLine) it.next();\r\n                Double kategorieGewichtung = 0.0;\r\n                Double gewichtung = 0.0;\r\n                try {\r\n                    kategorieGewichtung = new Double(nl.getKategorieGewichtung());\r\n                } catch (Exception e) {\r\n                }\r\n                try {\r\n                    gewichtung = new Double(nl.getGewichtung());\r\n                } catch (Exception e) {\r\n                }\r\n                Double[] gewichtungen = { gewichtung, kategorieGewichtung };\r\n                formData.put(nl.getNutzenkriteriumId(), gewichtungen);\r\n            }\r\n            // Nutzennkriterium suchen\r\n            for (int i = 0; i < kriterien.size(); i++) {\r\n                Nutzenkriterium kriterium = (Nutzenkriterium) kriterien.get(i);\r\n                Integer nutzenkriteriumId = (Integer) kriterium.getNutzenkriteriumId();\r\n                if (formData.containsKey(nutzenkriteriumId)) {\r\n                    // Gewichtung mit Formulardaten ersetzen\r\n                    Double[] gewichtungen = formData.get(nutzenkriteriumId);\r\n                    kriterium.setGewichtung(gewichtungen[0]);\r\n                    kriterium.setKategorieGewichtung(gewichtungen[1]);\r\n                    kriterien.set(i, kriterium);\r\n                }\r\n            }\r\n        }\r\n        request.setAttribute(Constants.NUTZENKRITERIEN, kriterien);\r\n    }\r\n\r\n    /**\r\n     * Speichert die Fragen zu den gewï¿½hlten Nutzenkriterien ab.\r\n     *\r\n     * @param request                   der HttpServletRequest\r\n     * @param form                      das Formular mit den Nutzenkriterien\r\n     * @param errors                    das ActionMessages Objekt zum Speichern\r\n     *                                  von Fehlermeldungen\r\n     * @return                          true bei Erfolg, sonst false\r\n     */\r\n    public boolean saveFragen(HttpServletRequest request, FragenForm form, ActionMessages errors) {\r\n        AutoGrowingList list = form.getNutzenkriteriumLine();\r\n        if (list == null) {\r\n            return false;\r\n        }\r\n        // Fragen ï¿½berprï¿½fen\r\n        Iterator it = list.iterator();\r\n        while (it.hasNext()) {\r\n            NutzenkriteriumLine nl = (NutzenkriteriumLine) it.next();\r\n            String frage = nl.getFrage();\r\n            if (frage == null || frage.length() == 0) {\r\n                errors.add(\"nutzenkriterium_\" + nl.getNutzenkriteriumId(), new ActionMessage(\"errors.required\", \"Frage\"));\r\n                return false;\r\n            }\r\n        }\r\n        // Benï¿½tigte ids holen\r\n        HttpSession session = request.getSession();\r\n        Integer customizingId = (Integer) session.getAttribute(Constants.CUSTOMIZING_ID);\r\n        Integer naOpNuId = cService.getNaOpNuId(request, customizingId);\r\n        // Fragen speichern\r\n        it = list.iterator();\r\n        while (it.hasNext()) {\r\n            NutzenkriteriumLine nl = (NutzenkriteriumLine) it.next();\r\n            Nutzenkriterium n = new Nutzenkriterium();\r\n            n.setNutzenkriteriumId(nl.getNutzenkriteriumId());\r\n            n.setNutzenattraktivitaetOperativerNutzenId(naOpNuId);\r\n            if (cService.isOperativerNutzen(request)) {\r\n                n.setFrageProjektbetroffene(nl.getFrage());\r\n            } else {\r\n                n.setFrageManagement(nl.getFrage());\r\n            }\r\n            logger.debug(\"nutzenkriteriumId: \" + n.getNutzenkriteriumId());\r\n            logger.debug(\"nutzenattraktivitaetId: \" + naOpNuId);\r\n            logger.debug(\"frage: \" + nl.getFrage());\r\n            dao.updateAssignment(n);\r\n        }\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Fï¿½gt ein neues Nutzenkriterium ein und wï¿½hlt dieses anschliessend\r\n     * automatisch aus.\r\n     *\r\n     * @param request                   der HttpServletRequest\r\n     * @param form                      das Formular mit dem neuen Nutzenkriterium\r\n     * @param errors                    das ActionMessages Objekt zum Speichern\r\n     *                                  von Fehlermeldungen\r\n     * @return                          true bei Erfolg, sonst false\r\n     */\r\n    public boolean add(HttpServletRequest request, DynaActionForm form, ActionMessages errors, ActionMessages messages) {\r\n        // Ids holen\r\n        HttpSession session = request.getSession();\r\n        Integer mandantId = (Integer) session.getAttribute(Constants.MANDANT_ID);\r\n        Integer customizingId = (Integer) session.getAttribute(Constants.CUSTOMIZING_ID);\r\n        // Formulardaten holen\r\n        String name = (String) form.get(\"name\");\r\n        Integer kategorieId = (Integer) form.get(Constants.KATEGORIE_ID);\r\n        logger.debug(\"name=\" + name);\r\n        logger.debug(\"kategorieId=\" + kategorieId);\r\n        // Formulardaten ï¿½berprï¿½fen\r\n        if (name == null || name.length() == 0) {\r\n            errors.add(\"name\", new ActionMessage(\"errors.required\", \"Name\"));\r\n            return false;\r\n        }\r\n        Nutzenkriterium n = new Nutzenkriterium();\r\n        n.setName(name);\r\n        n.setKategorieId(kategorieId);\r\n        n.setMandantId(mandantId);\r\n        // Auf duplikate prï¿½fen\r\n        if (dao.getByName(n) != null) {\r\n            messages.add(ActionMessages.GLOBAL_MESSAGE, new ActionMessage(\"errors.duplicate\", \"Nutzenkriterium\"));\r\n            return false;\r\n        }\r\n        // Nutzenkriterium einfï¿½gen\r\n        dao.insert(n);\r\n        // Nutzenkriterium setzen\r\n        Integer naOpNuId = cService.getNaOpNuId(request, customizingId);\r\n        n.setNutzenattraktivitaetOperativerNutzenId(naOpNuId);\r\n        dao.insertAssignment(n);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Speichert die Direkte Gewichtung von Nutzenkriterien\r\n     * der Nutzenattraktivitï¿½t bzw. des Operativen Nutzens.\r\n     *\r\n     * @param request                   der HttpServletRequest\r\n     * @param form                      das Formular mit den Nutzenkriterien\r\n     * @param errors                    das ActionMessages Objekt zum Speichern\r\n     *                                  von Fehlermeldungen\r\n     * @return                          true bei Erfolg, sonst false\r\n     */\r\n    public boolean saveDirekteGewichtung(HttpServletRequest request, FragenForm form, ActionMessages errors) {\r\n        // Formulardaten holen\r\n        AutoGrowingList list = form.getNutzenkriteriumLine();\r\n        if (list == null) {\r\n            return false;\r\n        }\r\n        // Gewichtungen ï¿½berprï¿½fen\r\n        Double gewichtung = 0.0;\r\n        Iterator it = list.iterator();\r\n        while (it.hasNext()) {\r\n            NutzenkriteriumLine nl = (NutzenkriteriumLine) it.next();\r\n            Integer nutzenkriteriumId = nl.getNutzenkriteriumId();\r\n            logger.debug(\"nutzenkrtieriumId=\" + nutzenkriteriumId);\r\n            String g = nl.getGewichtung();\r\n            logger.debug(\"Gewichtung: \" + g);\r\n            try {\r\n                gewichtung += new Double(g);\r\n            } catch (Exception e) {\r\n            }\r\n        }\r\n        logger.debug(\"Total gewichtungen: \" + gewichtung);\r\n        if (gewichtung < 99.999 || gewichtung > 100.0001) {\r\n            errors.add(ActionMessages.GLOBAL_MESSAGE, new ActionMessage(\"errors.gewichtung.failure\"));\r\n            return false;\r\n        }\r\n        /*\r\n    // Gewichtungen ï¿½berprï¿½fen\r\n    Iterator it = list.iterator();\r\n    ArrayList<Double> gewichtungsListe = new ArrayList<Double>(); \r\n    HashMap<Integer, ArrayList<Double>> gewichtungen = new HashMap<Integer, ArrayList<Double>>(); \r\n    Double kategorieGewichtung = 0.0;\r\n    boolean isFirst = true;\r\n    Integer tmpKategorieId = null;\r\n    while (it.hasNext()) {\r\n      NutzenkriteriumLine nl = (NutzenkriteriumLine) it.next();\r\n      Integer kategorieId = nl.getKategorieId();\r\n      Integer nutzenkriteriumId = nl.getNutzenkriteriumId();\r\n      logger.debug(\"kategorieId=\" + kategorieId);\r\n      logger.debug(\"nutzenkrtieriumId=\" + nutzenkriteriumId);\r\n      \r\n      // Gewichtung (muss pro Kategorie 100% ergeben)\r\n      String g = nl.getGewichtung();\r\n      logger.debug(\"Gewichtung: \" + g);\r\n      \r\n      \r\n      // Gewichtung fï¿½r die selbe Kategorie in eine Liste stellen\r\n      if (isFirst || kategorieId == null) {\r\n        isFirst = false;\r\n        tmpKategorieId = kategorieId;\r\n        try {\r\n          gewichtungsListe.add(new Double(g));\r\n        } catch (Exception e) {}\r\n      }\r\n      \r\n      // Nï¿½chste Kategorie \r\n      else {\r\n        gewichtungen.put(tmpKategorieId, gewichtungsListe);\r\n        gewichtungsListe = new ArrayList<Double>();\r\n        tmpKategorieId = kategorieId;\r\n        try {\r\n          gewichtungsListe.add(new Double(g));\r\n        } catch (Exception e) {}\r\n      }\r\n      \r\n      // kategorieGewichtung\r\n      String kg = nl.getKategorieGewichtung();\r\n      logger.debug(\"Gewichtung Kategorie: \" + kg);\r\n      try {\r\n        kategorieGewichtung += new Double(kg);\r\n      } catch (Exception e) {}\r\n    }\r\n    \r\n    it = gewichtungen.keySet().iterator();\r\n    while (it.hasNext()) {\r\n      Integer key = (Integer) it.next();\r\n      gewichtungsListe = gewichtungen.get(key);\r\n      Double gewichtung = 0.0;\r\n      for (Double d : gewichtungsListe) {\r\n        gewichtung += d;\r\n      }\r\n      \r\n      logger.debug(\"Total gewichtungen: \" + gewichtung);\r\n      if (gewichtung < 99.999 || gewichtung > 100) {\r\n        errors.add(ActionMessages.GLOBAL_MESSAGE,\r\n            new ActionMessage(\"errors.gewichtung.failure\"));\r\n        return false;\r\n      }\r\n    }\r\n    logger.debug(\"Total gewichtungen Kategorie: \" + kategorieGewichtung);\r\n    if (kategorieGewichtung < 99.999 || kategorieGewichtung > 100) {\r\n      errors.add(ActionMessages.GLOBAL_MESSAGE,\r\n          new ActionMessage(\"errors.gewichtung.failure\"));\r\n      return false;\r\n    }*/\r\n        // Benï¿½tigte ids holen\r\n        HttpSession session = request.getSession();\r\n        Integer customizingId = (Integer) session.getAttribute(Constants.CUSTOMIZING_ID);\r\n        Integer naOpNuId = cService.getNaOpNuId(request, customizingId);\r\n        // Allfï¿½llige indirekte Gewichtungen lï¿½schen\r\n        Auswahlfeld a = new Auswahlfeld();\r\n        a.setNutzenattraktivitaetOperativerNutzenId(naOpNuId);\r\n        aService.deleteGewichtungen(a);\r\n        // Gewichtung speichern\r\n        it = list.iterator();\r\n        while (it.hasNext()) {\r\n            NutzenkriteriumLine nl = (NutzenkriteriumLine) it.next();\r\n            Nutzenkriterium n = new Nutzenkriterium();\r\n            n.setNutzenkriteriumId(nl.getNutzenkriteriumId());\r\n            n.setNutzenattraktivitaetOperativerNutzenId(naOpNuId);\r\n            n.setGewichtung(new Double(nl.getGewichtung()));\r\n            dao.updateAssignmentGewichtung(n);\r\n            // Gewichtung der Kategorien speichern\r\n            Integer kategorieId = nl.getKategorieId();\r\n            if (kategorieId != null) {\r\n                Double g = null;\r\n                try {\r\n                    g = new Double(nl.getKategorieGewichtung());\r\n                } catch (Exception e) {\r\n                }\r\n                Kategorie k = new Kategorie();\r\n                k.setGewichtung(g);\r\n                k.setKategorieId(nl.getKategorieId());\r\n                k.setNutzenattraktivitaetOperativerNutzenId(naOpNuId);\r\n                kService.updateAssignment(k);\r\n            }\r\n        }\r\n        // Status setzen\r\n        boolean isNa = !cService.isOperativerNutzen(request);\r\n        if (isNa) {\r\n            logger.debug(\"GEWICHTUNGEN_NA=true\");\r\n            session.setAttribute(Constants.GEWICHTUNGEN_NA, true);\r\n        } else {\r\n            logger.debug(\"GEWICHTUNGEN_OP_NU=true\");\r\n            session.setAttribute(Constants.GEWICHTUNGEN_OP_NU, true);\r\n        }\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Prï¿½ft, ob eine Direkte Gewichtung vorliegt oder nicht.\r\n     *\r\n     * @param request                   der HttpServletRequest\r\n     * @return                          true bei Direkter Gewichtung, sonst false\r\n     */\r\n    public boolean direkteGewichtung(HttpServletRequest request) {\r\n        Integer typ = (Integer) request.getSession().getAttribute(Constants.GEWICHTUNGSTYP);\r\n        logger.debug(\"Direkte Gewichtung ausgewï¿½hlt\");\r\n        return typ == Constants.GEWICHTUNG_DIREKT;\r\n    }\r\n\r\n    /**\r\n     * Setzt den Status des Schritts \"Nutzenkriterien\", sowohl fï¿½r das\r\n     * Customizing Nutzenattraktiviï¿½t wie fï¿½r das Customizing Operativer Nutzen.\r\n     * Der Status zeigt in der Navigation an, ob dieser Schritt des Customizings\r\n     * bereits erfolgreich abgeschlossen wurde oder nicht.\r\n     *\r\n     * @param request                   der HttpServletRequest\r\n     * @param kategorien                eine Liste aller gewï¿½hlten Kategorien\r\n     * @param mandantId                 die Id des Mandanten\r\n     * @param naOpNuId                  die Id der Nutzenattraktivitï¿½t bzw.\r\n     *                                  des Operativen Nutzens\r\n     * @param isNa                      true fï¿½r Nutzenattraktivitï¿½t, sonst false\r\n     * @return                          Liste aller gewï¿½hlten Nutzenkriterien\r\n     */\r\n    public List<Nutzenkriterium> setStatus(HttpServletRequest request, List<Kategorie> kategorien, Integer mandantId, Integer naOpNuId, boolean isNa) {\r\n        boolean ok = true;\r\n        for (Kategorie k : kategorien) {\r\n            Nutzenkriterium nk = new Nutzenkriterium();\r\n            nk.setKategorieId(k.getKategorieId());\r\n            nk.setNutzenattraktivitaetOperativerNutzenId(naOpNuId);\r\n            List<Nutzenkriterium> nks = dao.getByNaOpNuAndKategorie(nk);\r\n            logger.debug(nks.size() + \" Nutzenkriterien in der Liste\");\r\n            if (nks == null || nks.size() == 0) {\r\n                ok = false;\r\n                break;\r\n            }\r\n        }\r\n        HttpSession session = request.getSession();\r\n        if (ok && isNa) {\r\n            session.setAttribute(Constants.NUTZENKRITERIEN_NA, true);\r\n            session.setAttribute(Constants.FRAGEN_NA, true);\r\n        } else if (ok) {\r\n            session.setAttribute(Constants.NUTZENKRITERIEN_OP_NU, true);\r\n            session.setAttribute(Constants.FRAGEN_OP_NU, true);\r\n        }\r\n        if (ok) {\r\n            Nutzenkriterium nk = new Nutzenkriterium();\r\n            nk.setMandantId(mandantId);\r\n            nk.setNutzenattraktivitaetOperativerNutzenId(naOpNuId);\r\n            return dao.getAssignments(nk);\r\n        } else if (!ok && isNa) {\r\n            session.removeAttribute(Constants.NUTZENKRITERIEN_NA);\r\n            session.removeAttribute(Constants.FRAGEN_NA);\r\n        } else {\r\n            session.removeAttribute(Constants.NUTZENKRITERIEN_OP_NU);\r\n            session.removeAttribute(Constants.FRAGEN_OP_NU);\r\n        }\r\n        return null;\r\n    }\r\n\r\n    /**\r\n     * Lï¿½scht die Fragebogen-Gewichtung des aktuellen Customizings.\r\n     *\r\n     * @param request                   der HttpServletRequest\r\n     */\r\n    public void deleteFragebogenGewichtung(HttpServletRequest request) {\r\n        // Benï¿½tigte ids holen\r\n        HttpSession session = request.getSession();\r\n        Integer customizingId = (Integer) session.getAttribute(Constants.CUSTOMIZING_ID);\r\n        Integer naOpNuId = cService.getNaOpNuId(request, customizingId);\r\n        // allfï¿½llige Gewichtung ï¿½ber Fragebogen lï¿½schen\r\n        Auswahlfeld a = new Auswahlfeld();\r\n        a = aService.setType(a, Constants.GEWICHTUNG);\r\n        a.setNutzenattraktivitaetOperativerNutzenId(naOpNuId);\r\n        logger.debug(\"Fragebogen-Gewichtung lï¿½schen:\");\r\n        logger.debug(\"nutzenattraktivitaetOperativerNutzenId=\" + a.getNutzenattraktivitaetOperativerNutzenId());\r\n        aService.deleteGewichtungen(a);\r\n    }\r\n\r\n    /**\r\n     * Selektiert die zuvor gewï¿½hlte Anzahl von Abstufungen fï¿½r die\r\n     * Stufenbeschriebe und die Gewichtung.\r\n     * Stellt den gewï¿½hlten Gewichtungstyp in den Request. Dies dient\r\n     * zur Vorauswahl der richtigen Checkbox im Formular \"Gewichtung\".\r\n     *\r\n     * @param request                   der HttpServletRequest\r\n     * @param path                      der Pfad der Action\r\n     */\r\n    public void preselect(HttpServletRequest request, String path) {\r\n        // Benï¿½tigte ids holen\r\n        HttpSession session = request.getSession();\r\n        Integer customizingId = (Integer) session.getAttribute(Constants.CUSTOMIZING_ID);\r\n        Integer naOpNuId = cService.getNaOpNuId(request, customizingId);\r\n        logger.debug(\"naOpNuId=\" + naOpNuId);\r\n        logger.debug(\"Pfad: \" + path);\r\n        // Abstufungstatus holen\r\n        List<Auswahlfeld> afs = new ArrayList<Auswahlfeld>();\r\n        if (path.contains(Constants.ABSTUFUNGEN_ACTION)) {\r\n            afs = aService.getAnzahlAbstufungen(naOpNuId);\r\n        } else // Gewichtungsstatus holen\r\n        {\r\n            afs = aService.getAnzahlGewichtungen(naOpNuId);\r\n        }\r\n        logger.debug(afs.size() + \" Abstufungen in der Liste\");\r\n        request.setAttribute(Constants.ABSTUFUNGEN, afs.size());\r\n        // Gewichtung bestimmen\r\n        List<Auswahlfeld> gewichtungen = aService.getGewichtungStatus(naOpNuId);\r\n        if (gewichtungen.size() > 0) {\r\n            request.setAttribute(Constants.GEWICHTUNG_NOT_DIRECT, true);\r\n        } else {\r\n            request.removeAttribute(Constants.GEWICHTUNG_NOT_DIRECT);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Kopiert alle Zuweisungen von Nutzenkriterien von einer Nutzenattraktivitï¿½t\r\n     * bzw. von einem Operativen Nutzen zu einer neuen Id. Wird zum Kopieren\r\n     * von Customizings verwendet.\r\n     *\r\n     * @param mandantId                 die Id des Mandanten\r\n     * @param naOpNuId                  die Id der Nutzenattraktivitï¿½t bzw. des\r\n     *                                  Operativen Nutzens, welche die zu kopierenden\r\n     *                                  Zuweisungen enthï¿½lt\r\n     * @param newNaOpNuId               die neue Id fï¿½r die kopierten Zuweisungen\r\n     */\r\n    public void copy(Integer mandantId, Integer naOpNuId, Integer newNaOpNuId) {\r\n        Nutzenkriterium n = new Nutzenkriterium();\r\n        n.setNutzenattraktivitaetOperativerNutzenId(naOpNuId);\r\n        n.setMandantId(mandantId);\r\n        List<Nutzenkriterium> kriterien = dao.getAssignments(n);\r\n        for (Nutzenkriterium kriterium : kriterien) {\r\n            kriterium.setNutzenattraktivitaetOperativerNutzenId(newNaOpNuId);\r\n            dao.insertAssignment(kriterium);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * ï¿½berprï¿½ft, ob ein Customizing komplett ist.\r\n     *\r\n     * @param request                   der HttpServletRequest\r\n     * @return                          true bei komplettem Customizing, sonst false\r\n     */\r\n    public boolean customizingComplete(HttpServletRequest request) {\r\n        return customizingService.complete(request);\r\n    }\r\n\r\n    /**\r\n     * Erstellt ein Objekt vom Typ Nutzenkriterium mit der id des Mandanten\r\n     * und, falls angegeben, mit abgefï¿½llten Formulardaten\r\n     *\r\n     * @param request                   der HttpServletRequest\r\n     * @param form                      das DynaActionForm\r\n     * @return                          Nutzenkriterium mit mandantId\r\n     */\r\n    private Nutzenkriterium createNutzenkriterium(HttpServletRequest request, DynaActionForm form) {\r\n        Integer mandantId = (Integer) request.getSession().getAttribute(Constants.MANDANT_ID);\r\n        Nutzenkriterium n = new Nutzenkriterium();\r\n        n.setMandantId(mandantId);\r\n        if (form != null) {\r\n            Integer id = (Integer) form.get(Constants.NUTZENKRITERIUM_ID);\r\n            String name = (String) form.get(Constants.NAME);\r\n            String beschreibung = (String) form.get(\"beschreibung\");\r\n            String frageManagementDefault = (String) form.get(\"frageManagementDefault\");\r\n            String frageProjektbetroffeneDefault = (String) form.get(\"frageProjektbetroffeneDefault\");\r\n            Integer kategorieId = (Integer) form.get(Constants.KATEGORIE_ID);\r\n            n.setNutzenkriteriumId(id);\r\n            n.setName(name);\r\n            n.setBeschreibung(beschreibung);\r\n            n.setFrageManagementDefault(frageManagementDefault);\r\n            n.setFrageProjektbetroffeneDefault(frageProjektbetroffeneDefault);\r\n            n.setKategorieId(kategorieId);\r\n        }\r\n        return n;\r\n    }\r\n\r\n    /**\r\n     * ï¿½berprï¿½ft, ob die Id eines Nutzenkriteriums Ziels im Request ist\r\n     * (update) oder nicht (neu).\r\n     *\r\n     * @param request                   der HttpServletRequest\r\n     * @param form                      das DynaActionForm\r\n     * @return                          true, wenn das angegebene Nutzenkriterium\r\n     *                                  besteht, sonst false.\r\n     */\r\n    private boolean isUpdate(HttpServletRequest request, DynaActionForm form) {\r\n        Integer id = (Integer) form.get(Constants.NUTZENKRITERIUM_ID);\r\n        if (id == null || id == 0) {\r\n            return false;\r\n        }\r\n        return true;\r\n    }\r\n}\r\n",
		"id": "EvoSuiteBenchmark/46_nutzenportfolio/src/main/java/ch/bfh/egov/nutzenportfolio/service/nutzenkriterium/NutzenkriteriumDaoServiceTest1.java",
		"test_prompt": "// NutzenkriteriumDaoServiceTest1.java\npackage ch.bfh.egov.nutzenportfolio.service.nutzenkriterium;\n\nimport java.util.ArrayList;\nimport java.util.Collections;\nimport java.util.Comparator;\nimport java.util.HashMap;\nimport java.util.Iterator;\nimport java.util.List;\nimport javax.servlet.http.HttpServletRequest;\nimport javax.servlet.http.HttpSession;\nimport org.apache.commons.logging.Log;\nimport org.apache.commons.logging.LogFactory;\nimport org.apache.struts.action.ActionMessage;\nimport org.apache.struts.action.ActionMessages;\nimport org.apache.struts.action.DynaActionForm;\nimport ch.bfh.egov.nutzenportfolio.Constants;\nimport ch.bfh.egov.nutzenportfolio.common.AutoGrowingList;\nimport ch.bfh.egov.nutzenportfolio.common.NutzenkriteriumLine;\nimport ch.bfh.egov.nutzenportfolio.form.FragenForm;\nimport ch.bfh.egov.nutzenportfolio.persistence.nutzenkriterium.NutzenkriteriumDao;\nimport ch.bfh.egov.nutzenportfolio.service.auswahlfeld.AuswahlfeldService;\nimport ch.bfh.egov.nutzenportfolio.service.common.CommonService;\nimport ch.bfh.egov.nutzenportfolio.service.customizing.CustomizingService;\nimport ch.bfh.egov.nutzenportfolio.service.kategorie.KategorieService;\nimport ch.bfh.egov.nutzenportfolio.tos.Auswahlfeld;\nimport ch.bfh.egov.nutzenportfolio.tos.Customizing;\nimport ch.bfh.egov.nutzenportfolio.tos.Kategorie;\nimport ch.bfh.egov.nutzenportfolio.tos.NaOpNu;\nimport ch.bfh.egov.nutzenportfolio.tos.Nutzenkriterium;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link NutzenkriteriumDaoService}.\n* It contains ten unit test cases for the {@link NutzenkriteriumDaoService#next(HttpServletRequest)} method.\n*/\nclass NutzenkriteriumDaoServiceTest1 {"
	},
	{
		"original_code": "// NutzenkriteriumDaoService.java\n/**\r\n * Nutzenportfolio\r\n * Copyright (C) 2006 Kompetenzzentrum E-Business, Simon Bergamin\r\n *\r\n * This program is free software; you can redistribute it and/or\r\n * modify it under the terms of the GNU General Public License\r\n * as published by the Free Software Foundation; either version 2\r\n * of the License, or (at your option) any later version.\r\n *\r\n * This program is distributed in the hope that it will be useful,\r\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n * GNU General Public License for more details.\r\n *\r\n * You should have received a copy of the GNU General Public License\r\n * along with this program; if not, write to the Free Software\r\n * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\r\n */\r\npackage ch.bfh.egov.nutzenportfolio.service.nutzenkriterium;\r\n\r\nimport java.util.ArrayList;\r\nimport java.util.Collections;\r\nimport java.util.Comparator;\r\nimport java.util.HashMap;\r\nimport java.util.Iterator;\r\nimport java.util.List;\r\nimport javax.servlet.http.HttpServletRequest;\r\nimport javax.servlet.http.HttpSession;\r\nimport org.apache.commons.logging.Log;\r\nimport org.apache.commons.logging.LogFactory;\r\nimport org.apache.struts.action.ActionMessage;\r\nimport org.apache.struts.action.ActionMessages;\r\nimport org.apache.struts.action.DynaActionForm;\r\nimport ch.bfh.egov.nutzenportfolio.Constants;\r\nimport ch.bfh.egov.nutzenportfolio.common.AutoGrowingList;\r\nimport ch.bfh.egov.nutzenportfolio.common.NutzenkriteriumLine;\r\nimport ch.bfh.egov.nutzenportfolio.form.FragenForm;\r\nimport ch.bfh.egov.nutzenportfolio.persistence.nutzenkriterium.NutzenkriteriumDao;\r\nimport ch.bfh.egov.nutzenportfolio.service.auswahlfeld.AuswahlfeldService;\r\nimport ch.bfh.egov.nutzenportfolio.service.common.CommonService;\r\nimport ch.bfh.egov.nutzenportfolio.service.customizing.CustomizingService;\r\nimport ch.bfh.egov.nutzenportfolio.service.kategorie.KategorieService;\r\nimport ch.bfh.egov.nutzenportfolio.tos.Auswahlfeld;\r\nimport ch.bfh.egov.nutzenportfolio.tos.Customizing;\r\nimport ch.bfh.egov.nutzenportfolio.tos.Kategorie;\r\nimport ch.bfh.egov.nutzenportfolio.tos.NaOpNu;\r\nimport ch.bfh.egov.nutzenportfolio.tos.Nutzenkriterium;\r\n\r\n/**\r\n * Implementierende Service-Klasse fï¿½r Nutzenkriterien.\r\n *\r\n * @author Kompetenzzentrum E-Business, Simon Bergamin\r\n */\r\npublic class NutzenkriteriumDaoService implements NutzenkriteriumService {\r\n\r\n    private NutzenkriteriumDao dao;\r\n\r\n    private CommonService cService;\r\n\r\n    private KategorieService kService;\r\n\r\n    private AuswahlfeldService aService;\r\n\r\n    private CustomizingService customizingService;\r\n\r\n    private Log logger = LogFactory.getLog(this.getClass());\r\n\r\n    /**\r\n     * Konstruktor. ï¿½bergabe des DataAcessObject-Interfaces fï¿½r Nutzenkriterien.\r\n     *\r\n     * @param dao                               Nutzenkriterien DataAcessObject-Interface\r\n     */\r\n    public NutzenkriteriumDaoService(NutzenkriteriumDao dao) {\r\n        this.dao = dao;\r\n    }\r\n\r\n    /**\r\n     * @see ch.bfh.egov.nutzenportfolio.persistence.nutzenkriterium.NutzenkriteriumIbatisDao#getAssignmentById(Nutzenkriterium)\r\n     */\r\n    public Nutzenkriterium getAssignmentById(Nutzenkriterium kriterium) {\r\n        return dao.getAssignmentById(kriterium);\r\n    }\r\n\r\n    /**\r\n     * @see ch.bfh.egov.nutzenportfolio.persistence.nutzenkriterium.NutzenkriteriumIbatisDao#getByProjektId(NaOpNu)\r\n     */\r\n    public List<Nutzenkriterium> getByProjektId(NaOpNu naOpNu) {\r\n        return dao.getByProjektId(naOpNu);\r\n    }\r\n\r\n    /**\r\n     * @see ch.bfh.egov.nutzenportfolio.persistence.nutzenkriterium.NutzenkriteriumIbatisDao#getAssignments(Nutzenkriterium)\r\n     */\r\n    public List<Nutzenkriterium> getAssignments(Nutzenkriterium kriterium) {\r\n        return dao.getAssignments(kriterium);\r\n    }\r\n\r\n    /**\r\n     * @see ch.bfh.egov.nutzenportfolio.persistence.nutzenkriterium.NutzenkriteriumIbatisDao#update(Nutzenkriterium)\r\n     */\r\n    public void update(Nutzenkriterium kriterium) {\r\n        dao.updateAssignment(kriterium);\r\n    }\r\n\r\n    /**\r\n     * @see ch.bfh.egov.nutzenportfolio.persistence.nutzenkriterium.NutzenkriteriumIbatisDao#unsetAssignmentGewichtung(Integer)\r\n     */\r\n    public void unsetAssignmentGewichtung(Integer naOpNuId) {\r\n        dao.unsetAssignmentGewichtung(naOpNuId);\r\n    }\r\n\r\n    /**\r\n     * @see ch.bfh.egov.nutzenportfolio.persistence.nutzenkriterium.NutzenkriteriumIbatisDao#deleteAssignments(Integer)\r\n     */\r\n    public void deleteAssignments(Integer naOpNuId) {\r\n        dao.deleteAssignments(naOpNuId);\r\n    }\r\n\r\n    /**\r\n     * Initialisierung dieses Service-Objekts durch ï¿½bergabe anderer,\r\n     * benï¿½tigter Service-Objekte.\r\n     *\r\n     * @param aService                   AuswahlFeldService Objekt\r\n     * @param cService                   CommonService Objekt\r\n     * @param kService                   KategorieService Objekt\r\n     * @param customizingService         CustomizingService Objekt\r\n     */\r\n    public void init(AuswahlfeldService aService, CommonService cService, KategorieService kService, CustomizingService customizingService) {\r\n        this.aService = aService;\r\n        this.cService = cService;\r\n        this.kService = kService;\r\n        this.customizingService = customizingService;\r\n    }\r\n\r\n    /**\r\n     * Stellt eine Liste aller Nutzenkriterien in den request.\r\n     *\r\n     * @param request                   der HttpServletRequest\r\n     */\r\n    public void list(HttpServletRequest request) {\r\n        Integer mandantId = (Integer) request.getSession().getAttribute(Constants.MANDANT_ID);\r\n        List<Nutzenkriterium> kriterien = dao.getAll(mandantId);\r\n        // Sortieren der Nutzenkriterien nach Namen\r\n        Collections.<Nutzenkriterium>sort(kriterien, new Comparator<Nutzenkriterium>() {\r\n\r\n            public int compare(Nutzenkriterium a, Nutzenkriterium b) {\r\n                String name1 = a.getName().toLowerCase();\r\n                String name2 = b.getName().toLowerCase();\r\n                return name1.compareTo(name2);\r\n            }\r\n        });\r\n        request.setAttribute(Constants.NUTZENKRITERIEN, kriterien);\r\n    }\r\n\r\n    /**\r\n     * Stellt eine Liste von Nutzenkriterien sowie deren zugehï¿½rigen\r\n     * Kategorien in den Request. Pro Request bzw. pro Seitenaufruf\r\n     * wird eine Kategorie mit den jeweiligen Nutzenkriterien angezeigt.\r\n     * Mit einem Klick auf \"weiter\" gelangt der Benutzer zur nï¿½chsten Seite\r\n     * bzw. der nï¿½chsten gewï¿½hlten Kategorie.\r\n     *\r\n     * @param request                   der HttpServletRequest\r\n     * @return                          true bei Erfolg, sonst false\r\n     */\r\n    public boolean populate(HttpServletRequest request) {\r\n        // Benï¿½tigte ids holen\r\n        HttpSession session = request.getSession();\r\n        Integer mandantId = (Integer) session.getAttribute(Constants.MANDANT_ID);\r\n        Integer customizingId = (Integer) session.getAttribute(Constants.CUSTOMIZING_ID);\r\n        Integer naOpNuId = cService.getNaOpNuId(request, customizingId);\r\n        logger.debug(\"naOpNuId=\" + naOpNuId);\r\n        // Zugewiesene Kategorien holen\r\n        Kategorie k = new Kategorie();\r\n        k.setNutzenattraktivitaetOperativerNutzenId(naOpNuId);\r\n        k.setMandantId(mandantId);\r\n        List<Kategorie> kategorien = kService.getAssignments(k);\r\n        Integer kategorieId = null;\r\n        Integer step = null;\r\n        if (kategorien.size() == 0) {\r\n            return false;\r\n        }\r\n        // 1 Schritt pro Kategorie. Parameter ï¿½berprï¿½fen.\r\n        String stepStr = request.getParameter(Constants.STEP);\r\n        String next = request.getParameter(Constants.NEXT);\r\n        logger.debug(\"Angegebener step: \" + stepStr);\r\n        try {\r\n            step = new Integer(stepStr);\r\n        } catch (NumberFormatException nfex) {\r\n            step = 1;\r\n        }\r\n        // Denselben Schritt wiederholen, wenn nicht \"weiter\" geklickt wurde\r\n        if (next == null && step > 1) {\r\n            --step;\r\n        }\r\n        // Kategorien in Array stellen\r\n        Integer[] kategorienIdArr = new Integer[kategorien.size()];\r\n        String[] kategorienNameArr = new String[kategorien.size()];\r\n        int i = 0;\r\n        for (Kategorie kategorie : kategorien) {\r\n            kategorienIdArr[i] = kategorie.getKategorieId();\r\n            kategorienNameArr[i++] = kategorie.getName();\r\n            logger.debug(\"Kategorie: id=\" + kategorienIdArr[i - 1] + \", name=\" + kategorienNameArr[i - 1]);\r\n        }\r\n        // Auf inkorrekten step Parameter prï¿½fen\r\n        if ((step - 1) >= kategorienIdArr.length) {\r\n            logger.warn(\"Nicht verfï¿½gbarer Schritt ausgewï¿½hlt!\");\r\n            step = 1;\r\n        }\r\n        // Auf letzten Schritt prï¿½fen\r\n        if (step == kategorienIdArr.length) {\r\n            request.setAttribute(Constants.LAST_STEP, true);\r\n        }\r\n        // Id der Kategorie anhand des step Parameters holen\r\n        kategorieId = kategorienIdArr[step - 1];\r\n        logger.debug(\"Gewaehlte Kategorie: \" + kategorieId);\r\n        request.setAttribute(Constants.KATEGORIE_ID, kategorieId);\r\n        request.setAttribute(\"kategorie\", kategorienNameArr[step - 1]);\r\n        request.setAttribute(Constants.STEP, step + 1);\r\n        // Alle Nutzenkriterien zur gewï¿½hlten Kategorie holen\r\n        Nutzenkriterium n = new Nutzenkriterium();\r\n        n.setNutzenattraktivitaetOperativerNutzenId(naOpNuId);\r\n        n.setKategorieId(kategorieId);\r\n        n.setMandantId(mandantId);\r\n        // Nutzenkriterien aussortieren, die einem anderen Customizing zugeordnet sind\r\n        List<Nutzenkriterium> nutzenkriterien = dao.getByKategorie(n);\r\n        Iterator it = nutzenkriterien.iterator();\r\n        HashMap<String, Nutzenkriterium> map = new HashMap<String, Nutzenkriterium>();\r\n        while (it.hasNext()) {\r\n            Nutzenkriterium nk = (Nutzenkriterium) it.next();\r\n            String name = nk.getName();\r\n            boolean contains = map.containsKey(name);\r\n            Integer nuNaOpNuId = nk.getNutzenattraktivitaetOperativerNutzenId();\r\n            // HashMap abfï¿½llen um allfï¿½llige doppelte Nutzenkriterien auszusortieren\r\n            // (ist der Fall bei Zuweisungen zu anderen Customizings)\r\n            if (!contains || nuNaOpNuId != null && contains && nuNaOpNuId.equals(naOpNuId)) {\r\n                map.put(name, nk);\r\n            }\r\n        }\r\n        nutzenkriterien = new ArrayList<Nutzenkriterium>(map.values());\r\n        request.setAttribute(Constants.NUTZENKRITERIEN, nutzenkriterien);\r\n        // Operativer Nutzen -> Projektbetroffene\r\n        if (cService.isOperativerNutzen(request)) {\r\n            request.setAttribute(Constants.PROJEKTBETROFFENE, true);\r\n        }\r\n        Integer levels = (Integer) request.getSession().getAttribute(Constants.ABSTUFUNGEN);\r\n        request.setAttribute(\"totalKategorien\", ((levels != null) ? kategorien.size() : 0));\r\n        // Alle zugewiesenen Nutzenkriterien zur gewï¿½hlten Kategorie holen\r\n        List nAssigned = dao.getAssignments(n);\r\n        request.setAttribute(Constants.NA_OP_NU_ID, naOpNuId);\r\n        request.setAttribute(Constants.NUTZENKRITERIEN_ASSIGNED, nAssigned);\r\n        boolean isNa = !cService.isOperativerNutzen(request);\r\n        setStatus(request, kategorien, mandantId, naOpNuId, isNa);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Fï¿½llt ein Formular mit bestehenden Daten eines Nutzenkriteriums ab,\r\n     * falls eine entsprechende id angegeben wurde.\r\n     *\r\n     * @param request                   der HttpServletRequest\r\n     * @param form                      das DynaActionForm\r\n     */\r\n    public void edit(HttpServletRequest request, DynaActionForm form) {\r\n        if (isUpdate(request, form)) {\r\n            Nutzenkriterium n = createNutzenkriterium(request, form);\r\n            Integer mandantId = n.getMandantId();\r\n            n = dao.getById(n);\r\n            form.set(\"name\", n.getName());\r\n            form.set(\"beschreibung\", n.getBeschreibung());\r\n            form.set(\"frageManagementDefault\", n.getFrageManagementDefault());\r\n            form.set(\"frageProjektbetroffeneDefault\", n.getFrageProjektbetroffeneDefault());\r\n            form.set(Constants.KATEGORIE_ID, n.getKategorieId());\r\n            // Kategorien in die Session stellen\r\n            logger.debug(\"Kategorien holen fï¿½r mandantId=\" + mandantId);\r\n            List<Kategorie> kategorien = kService.getAll(mandantId);\r\n            request.getSession().setAttribute(Constants.KATEGORIEN, kategorien);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Fï¿½hrt ein update eines bestenenden Nutzenkriteriums anhand von\r\n     * Formulardaten durch.\r\n     *\r\n     * @param request                   der HttpServletRequest\r\n     * @param form                      das DynaActionForm\r\n     */\r\n    public void update(HttpServletRequest request, DynaActionForm form) {\r\n        logger.debug(\"Update Nutzenkriterium\");\r\n        if (isUpdate(request, form)) {\r\n            logger.debug(\"Update durchfï¿½hren\");\r\n            Nutzenkriterium n = createNutzenkriterium(request, form);\r\n            dao.update(n);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Prï¿½ft, ob ein Nutzenkriterium existiert und gibt es zurï¿½ck.\r\n     *\r\n     * @param request                   der HttpServletRequest\r\n     * @param form                      das DynaActionForm\r\n     * @return                          das Nutzenkriterium\r\n     */\r\n    public Nutzenkriterium getNutzenkriterium(HttpServletRequest request, DynaActionForm form) {\r\n        Nutzenkriterium n = createNutzenkriterium(request, form);\r\n        return dao.getById(n);\r\n    }\r\n\r\n    /**\r\n     * Abfrage fï¿½r das Lï¿½schen von einem Nutzenkriterium.\r\n     *\r\n     * @param request                   der HttpServletRequest\r\n     * @param kriterium                 das zu lï¿½schende Nutzenkriterium\r\n     * @param messages                  das ActionMessages Objekt\r\n     */\r\n    public void deleteQuestion(HttpServletRequest request, Nutzenkriterium kriterium, ActionMessages messages) {\r\n        // Verknï¿½pfungen prï¿½fen\r\n        linkedTo(request, kriterium);\r\n        // Bestï¿½tigungsnachricht ausgeben\r\n        messages.add(ActionMessages.GLOBAL_MESSAGE, new ActionMessage(\"messages.question.delete\", kriterium.getName()));\r\n        // Actions zum Lï¿½schen und Abbrechen definieren\r\n        request.setAttribute(Constants.ACTION, Constants.VERWALTUNG_NUTZENKRITERIEN_ACTION);\r\n        request.setAttribute(Constants.DISPATCH_YES, Constants.DELETE);\r\n        request.setAttribute(Constants.DISPATCH_NO, Constants.LIST);\r\n        request.setAttribute(Constants.ID_NAME, Constants.NUTZENKRITERIUM_ID);\r\n        request.setAttribute(Constants.ID_VALUE, kriterium.getNutzenkriteriumId());\r\n    }\r\n\r\n    /**\r\n     * Setzt die Verknï¿½pfungen zu diesem Nutzenkriterium in den Request.\r\n     * Ein Nutzenkriterium kann mit Customizings verknï¿½pft sein. Diese\r\n     * Methode wird bei der Lï¿½schabfrage verwendet.\r\n     *\r\n     * @param request                   der HttpServletRequest\r\n     * @param kritierium                das zu lï¿½schende Nutzenkriterium\r\n     */\r\n    public void linkedTo(HttpServletRequest request, Nutzenkriterium kritierium) {\r\n        HashMap<String, List> map = new HashMap<String, List>();\r\n        // Customizings suchen, die dieses Nutzenkriterium benï¿½tigen\r\n        List<Customizing> customizings = dao.getLinkedCustomizings(kritierium);\r\n        if (customizings.size() > 0) {\r\n            for (Customizing c : customizings) {\r\n                if (c.getStatus()) {\r\n                    request.setAttribute(\"active\", true);\r\n                    break;\r\n                }\r\n            }\r\n            map.put(\"Customizings\", customizings);\r\n        }\r\n        request.setAttribute(\"linked\", map);\r\n    }\r\n\r\n    /**\r\n     * Lï¿½scht ein Nutzenkriterium. Falls es mit inaktiven Customizings\r\n     * verknï¿½ft ist, werden diese ebenfalls gelï¿½scht. Wenn aktive Customizings\r\n     * verknï¿½ft sind, wird das Nutzenkriterium nicht gelï¿½scht.\r\n     *\r\n     * @param request                   der HttpServletRequest\r\n     * @param kriterium                 das zu lï¿½schende Nutzenkriterium\r\n     */\r\n    public void delete(HttpServletRequest request, Nutzenkriterium kriterium) {\r\n        // Verknï¿½pfungen prï¿½fen\r\n        linkedTo(request, kriterium);\r\n        Boolean active = (Boolean) request.getAttribute(\"active\");\r\n        // Aktives Customizing verknï¿½ft. Dies sollte nicht passieren ausser bei\r\n        // einem direkten URL-Aufruf ...\r\n        if (active != null && active) {\r\n            logger.debug(\"Aktives Customizing verknï¿½pft, Nutzenkriterium wird nicht gelï¿½scht\");\r\n            return;\r\n        }\r\n        // Customizings lï¿½schen\r\n        List<Customizing> customizings = dao.getLinkedCustomizings(kriterium);\r\n        for (Customizing c : customizings) {\r\n            logger.debug(\"Lï¿½sche Customizing \" + c.getCustomizingId());\r\n            customizingService.cascadeDelete(request, c);\r\n        }\r\n        // Lï¿½schen des Nutzenkriteriums\r\n        dao.delete(kriterium);\r\n    }\r\n\r\n    /**\r\n     * Weist dem aktuellen Customizing das gewï¿½hlte Nutzenkriterium zu.\r\n     * Wenn das Nutzenkriterium eine Default-Frage besitzt, wird diese\r\n     * zur spï¿½teren Verwendung in der Verknï¿½pfungstabelle gespeichert.\r\n     *\r\n     * @param request                   der HttpServletRequest\r\n     * @param form                      das Formular mit dem gewï¿½hlten Nutzenkriterium\r\n     */\r\n    public void set(HttpServletRequest request, DynaActionForm form) {\r\n        // Benï¿½tigte ids holen\r\n        HttpSession session = request.getSession();\r\n        Integer customizingId = (Integer) session.getAttribute(Constants.CUSTOMIZING_ID);\r\n        Integer mandantId = (Integer) session.getAttribute(Constants.MANDANT_ID);\r\n        Integer naOpNuId = cService.getNaOpNuId(request, customizingId);\r\n        Integer nutzenkriteriumId = (Integer) form.get(Constants.NUTZENKRITERIUM_ID);\r\n        if (nutzenkriteriumId == null) {\r\n            return;\r\n        }\r\n        // Nutzenkriterium zuweisen\r\n        logger.debug(\"Nutzenkriterium zuweisen: \" + nutzenkriteriumId);\r\n        Nutzenkriterium n = new Nutzenkriterium();\r\n        n.setNutzenkriteriumId(nutzenkriteriumId);\r\n        n.setMandantId(mandantId);\r\n        n.setNutzenattraktivitaetOperativerNutzenId(naOpNuId);\r\n        // Default fragen holen und setzen\r\n        Nutzenkriterium fragen = dao.getDefaultFragen(n);\r\n        if (cService.isOperativerNutzen(request)) {\r\n            n.setFrageProjektbetroffene(fragen.getFrageProjektbetroffeneDefault());\r\n        } else {\r\n            n.setFrageManagement(fragen.getFrageManagementDefault());\r\n        }\r\n        dao.insertAssignment(n);\r\n    }\r\n\r\n    /**\r\n     * ï¿½berprï¿½ft, ob das aktuelle Nutzenkriterium zum letzten\r\n     * Schritt bzw. zur letzten gewï¿½hlten Kategorie gehï¿½rt. Wenn\r\n     * ja, kann zur nï¿½chsten Action gesprungen werden.\r\n     *\r\n     * @param request                   der HttpServletRequest\r\n     * @return                          true beim letzten Schritt, sonst false\r\n     */\r\n    public boolean next(HttpServletRequest request) {\r\n        // Nï¿½chste Action?\r\n        String last = request.getParameter(Constants.LAST_STEP);\r\n        if (last != null && last.equals(\"true\")) {\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    /**\r\n     * Entfernt die Zuweisung des gewï¿½hlten Nutzenkriteriums zum\r\n     * aktuellen Customizing.\r\n     *\r\n     * @param request                   der HttpServletRequest\r\n     * @param form                      das Formular mit dem Nutzenkriterium\r\n     */\r\n    public void remove(HttpServletRequest request, DynaActionForm form) {\r\n        // Nutzenkriterium anhand der id holen\r\n        HttpSession session = request.getSession();\r\n        Integer mandantId = (Integer) session.getAttribute(Constants.MANDANT_ID);\r\n        Integer nutzenkriteriumId = (Integer) form.get(Constants.NUTZENKRITERIUM_ID);\r\n        Integer naOpNuId = (Integer) form.get(Constants.NA_OP_NU_ID);\r\n        Nutzenkriterium n = new Nutzenkriterium();\r\n        n.setNutzenkriteriumId(nutzenkriteriumId);\r\n        n.setNutzenattraktivitaetOperativerNutzenId(naOpNuId);\r\n        n.setMandantId(mandantId);\r\n        n = dao.getAssignmentById(n);\r\n        // Zuweisung lï¿½schen\r\n        if (n != null) {\r\n            logger.debug(\"Zuweisung nutzenkriteriumId=\" + nutzenkriteriumId + \", nutzenattraktivitaetOperativerNutzenId=\" + n.getNutzenattraktivitaetOperativerNutzenId() + \" wird gelï¿½scht.\");\r\n            dao.deleteAssignment(n);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Setzt die zugehï¿½rigen Fragen von Nutzenkriterien zur Anzeige\r\n     * in den Request.\r\n     *\r\n     * @param request                   der HttpServletRequest\r\n     * @param form                      das Formular mit den Nutzenkriterien\r\n     * @return                          true bei Erfolg, sonst false\r\n     */\r\n    public boolean populateFragen(HttpServletRequest request, FragenForm form) {\r\n        // Benï¿½tigte ids holen\r\n        HttpSession session = request.getSession();\r\n        Integer customizingId = (Integer) session.getAttribute(Constants.CUSTOMIZING_ID);\r\n        Integer mandantId = (Integer) session.getAttribute(Constants.MANDANT_ID);\r\n        Integer naOpNuId = cService.getNaOpNuId(request, customizingId);\r\n        boolean isOperativerNutzen = cService.isOperativerNutzen(request);\r\n        // Alle zugewiesenen Nutzenkriterien zur gewï¿½hlten Kategorie holen\r\n        Nutzenkriterium n = new Nutzenkriterium();\r\n        n.setNutzenattraktivitaetOperativerNutzenId(naOpNuId);\r\n        n.setMandantId(mandantId);\r\n        List<Nutzenkriterium> kriterien = dao.getAssignments(n);\r\n        if (kriterien.size() == 0) {\r\n            return false;\r\n        }\r\n        // Formulardaten wieder abfï¿½llen (bei gescheiterter Validierung)\r\n        AutoGrowingList list = form.getNutzenkriteriumLine();\r\n        if (list != null) {\r\n            // Formulardaten zum Abgleich in eine HashMap stellen\r\n            Iterator it = list.iterator();\r\n            HashMap<Integer, String> formData = new HashMap<Integer, String>();\r\n            while (it.hasNext()) {\r\n                NutzenkriteriumLine nl = (NutzenkriteriumLine) it.next();\r\n                formData.put(nl.getNutzenkriteriumId(), nl.getFrage());\r\n            }\r\n            // Nutzennkriterium suchen\r\n            for (int i = 0; i < kriterien.size(); i++) {\r\n                Nutzenkriterium kriterium = (Nutzenkriterium) kriterien.get(i);\r\n                Integer nutzenkriteriumId = (Integer) kriterium.getNutzenkriteriumId();\r\n                if (formData.containsKey(nutzenkriteriumId)) {\r\n                    // Frage mit Formulardaten ersetzen\r\n                    String frage = formData.get(nutzenkriteriumId);\r\n                    // Fragen fï¿½r Projektbetroffene\r\n                    if (isOperativerNutzen) {\r\n                        logger.debug(\"Ersetze Frage in Datenbank: \" + kriterium.getFrageProjektbetroffene() + \" mit Frage aus Formular: \" + frage);\r\n                        kriterium.setFrageProjektbetroffene(frage);\r\n                    } else // Fragen fï¿½r Management\r\n                    {\r\n                        logger.debug(\"Ersetze Frage in Datenbank: \" + kriterium.getFrageManagement() + \" mit Frage aus Formular: \" + frage);\r\n                        kriterium.setFrageManagement(frage);\r\n                    }\r\n                    kriterien.set(i, kriterium);\r\n                }\r\n            }\r\n        }\r\n        // Operativer Nutzen -> Projektbetroffene\r\n        if (isOperativerNutzen) {\r\n            request.setAttribute(Constants.PROJEKTBETROFFENE, true);\r\n        }\r\n        request.setAttribute(Constants.NUTZENKRITERIEN, kriterien);\r\n        // Anzahl Kategorien holen\r\n        Kategorie k = new Kategorie();\r\n        k.setNutzenattraktivitaetOperativerNutzenId(naOpNuId);\r\n        k.setMandantId(mandantId);\r\n        List<Kategorie> kategorien = kService.getAssignments(k);\r\n        request.setAttribute(\"totalKategorien\", kategorien.size());\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Setzt die eingegebenen Daten zur Direkten Gewichtung aller\r\n     * gewï¿½hlten Nutzenkriterien in den Request, um diese anzeigen\r\n     * zu kï¿½nnen. Bei gescheiterter Validierung werden die Daten\r\n     * erneut angezeigt.\r\n     *\r\n     * @param request                   der HttpServletRequest\r\n     * @param form                      das Formular mit den Nutzenkriterien\r\n     */\r\n    public void populateDirekteGewichtung(HttpServletRequest request, FragenForm form) {\r\n        // Benï¿½tigte ids holen\r\n        HttpSession session = request.getSession();\r\n        Integer customizingId = (Integer) session.getAttribute(Constants.CUSTOMIZING_ID);\r\n        Integer mandantId = (Integer) session.getAttribute(Constants.MANDANT_ID);\r\n        Integer naOpNuId = cService.getNaOpNuId(request, customizingId);\r\n        // Alle zugewiesenen Nutzenkriterien zur gewï¿½hlten Kategorie holen\r\n        Nutzenkriterium n = new Nutzenkriterium();\r\n        n.setNutzenattraktivitaetOperativerNutzenId(naOpNuId);\r\n        n.setMandantId(mandantId);\r\n        List<Nutzenkriterium> kriterien = dao.getAssignments(n);\r\n        // Formulardaten wieder abfï¿½llen (bei gescheiterter Validierung)\r\n        AutoGrowingList list = form.getNutzenkriteriumLine();\r\n        if (list != null) {\r\n            // Formulardaten zum Abgleich in eine HashMap stellen\r\n            Iterator it = list.iterator();\r\n            HashMap<Integer, Double[]> formData = new HashMap<Integer, Double[]>();\r\n            while (it.hasNext()) {\r\n                NutzenkriteriumLine nl = (NutzenkriteriumLine) it.next();\r\n                Double kategorieGewichtung = 0.0;\r\n                Double gewichtung = 0.0;\r\n                try {\r\n                    kategorieGewichtung = new Double(nl.getKategorieGewichtung());\r\n                } catch (Exception e) {\r\n                }\r\n                try {\r\n                    gewichtung = new Double(nl.getGewichtung());\r\n                } catch (Exception e) {\r\n                }\r\n                Double[] gewichtungen = { gewichtung, kategorieGewichtung };\r\n                formData.put(nl.getNutzenkriteriumId(), gewichtungen);\r\n            }\r\n            // Nutzennkriterium suchen\r\n            for (int i = 0; i < kriterien.size(); i++) {\r\n                Nutzenkriterium kriterium = (Nutzenkriterium) kriterien.get(i);\r\n                Integer nutzenkriteriumId = (Integer) kriterium.getNutzenkriteriumId();\r\n                if (formData.containsKey(nutzenkriteriumId)) {\r\n                    // Gewichtung mit Formulardaten ersetzen\r\n                    Double[] gewichtungen = formData.get(nutzenkriteriumId);\r\n                    kriterium.setGewichtung(gewichtungen[0]);\r\n                    kriterium.setKategorieGewichtung(gewichtungen[1]);\r\n                    kriterien.set(i, kriterium);\r\n                }\r\n            }\r\n        }\r\n        request.setAttribute(Constants.NUTZENKRITERIEN, kriterien);\r\n    }\r\n\r\n    /**\r\n     * Speichert die Fragen zu den gewï¿½hlten Nutzenkriterien ab.\r\n     *\r\n     * @param request                   der HttpServletRequest\r\n     * @param form                      das Formular mit den Nutzenkriterien\r\n     * @param errors                    das ActionMessages Objekt zum Speichern\r\n     *                                  von Fehlermeldungen\r\n     * @return                          true bei Erfolg, sonst false\r\n     */\r\n    public boolean saveFragen(HttpServletRequest request, FragenForm form, ActionMessages errors) {\r\n        AutoGrowingList list = form.getNutzenkriteriumLine();\r\n        if (list == null) {\r\n            return false;\r\n        }\r\n        // Fragen ï¿½berprï¿½fen\r\n        Iterator it = list.iterator();\r\n        while (it.hasNext()) {\r\n            NutzenkriteriumLine nl = (NutzenkriteriumLine) it.next();\r\n            String frage = nl.getFrage();\r\n            if (frage == null || frage.length() == 0) {\r\n                errors.add(\"nutzenkriterium_\" + nl.getNutzenkriteriumId(), new ActionMessage(\"errors.required\", \"Frage\"));\r\n                return false;\r\n            }\r\n        }\r\n        // Benï¿½tigte ids holen\r\n        HttpSession session = request.getSession();\r\n        Integer customizingId = (Integer) session.getAttribute(Constants.CUSTOMIZING_ID);\r\n        Integer naOpNuId = cService.getNaOpNuId(request, customizingId);\r\n        // Fragen speichern\r\n        it = list.iterator();\r\n        while (it.hasNext()) {\r\n            NutzenkriteriumLine nl = (NutzenkriteriumLine) it.next();\r\n            Nutzenkriterium n = new Nutzenkriterium();\r\n            n.setNutzenkriteriumId(nl.getNutzenkriteriumId());\r\n            n.setNutzenattraktivitaetOperativerNutzenId(naOpNuId);\r\n            if (cService.isOperativerNutzen(request)) {\r\n                n.setFrageProjektbetroffene(nl.getFrage());\r\n            } else {\r\n                n.setFrageManagement(nl.getFrage());\r\n            }\r\n            logger.debug(\"nutzenkriteriumId: \" + n.getNutzenkriteriumId());\r\n            logger.debug(\"nutzenattraktivitaetId: \" + naOpNuId);\r\n            logger.debug(\"frage: \" + nl.getFrage());\r\n            dao.updateAssignment(n);\r\n        }\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Fï¿½gt ein neues Nutzenkriterium ein und wï¿½hlt dieses anschliessend\r\n     * automatisch aus.\r\n     *\r\n     * @param request                   der HttpServletRequest\r\n     * @param form                      das Formular mit dem neuen Nutzenkriterium\r\n     * @param errors                    das ActionMessages Objekt zum Speichern\r\n     *                                  von Fehlermeldungen\r\n     * @return                          true bei Erfolg, sonst false\r\n     */\r\n    public boolean add(HttpServletRequest request, DynaActionForm form, ActionMessages errors, ActionMessages messages) {\r\n        // Ids holen\r\n        HttpSession session = request.getSession();\r\n        Integer mandantId = (Integer) session.getAttribute(Constants.MANDANT_ID);\r\n        Integer customizingId = (Integer) session.getAttribute(Constants.CUSTOMIZING_ID);\r\n        // Formulardaten holen\r\n        String name = (String) form.get(\"name\");\r\n        Integer kategorieId = (Integer) form.get(Constants.KATEGORIE_ID);\r\n        logger.debug(\"name=\" + name);\r\n        logger.debug(\"kategorieId=\" + kategorieId);\r\n        // Formulardaten ï¿½berprï¿½fen\r\n        if (name == null || name.length() == 0) {\r\n            errors.add(\"name\", new ActionMessage(\"errors.required\", \"Name\"));\r\n            return false;\r\n        }\r\n        Nutzenkriterium n = new Nutzenkriterium();\r\n        n.setName(name);\r\n        n.setKategorieId(kategorieId);\r\n        n.setMandantId(mandantId);\r\n        // Auf duplikate prï¿½fen\r\n        if (dao.getByName(n) != null) {\r\n            messages.add(ActionMessages.GLOBAL_MESSAGE, new ActionMessage(\"errors.duplicate\", \"Nutzenkriterium\"));\r\n            return false;\r\n        }\r\n        // Nutzenkriterium einfï¿½gen\r\n        dao.insert(n);\r\n        // Nutzenkriterium setzen\r\n        Integer naOpNuId = cService.getNaOpNuId(request, customizingId);\r\n        n.setNutzenattraktivitaetOperativerNutzenId(naOpNuId);\r\n        dao.insertAssignment(n);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Speichert die Direkte Gewichtung von Nutzenkriterien\r\n     * der Nutzenattraktivitï¿½t bzw. des Operativen Nutzens.\r\n     *\r\n     * @param request                   der HttpServletRequest\r\n     * @param form                      das Formular mit den Nutzenkriterien\r\n     * @param errors                    das ActionMessages Objekt zum Speichern\r\n     *                                  von Fehlermeldungen\r\n     * @return                          true bei Erfolg, sonst false\r\n     */\r\n    public boolean saveDirekteGewichtung(HttpServletRequest request, FragenForm form, ActionMessages errors) {\r\n        // Formulardaten holen\r\n        AutoGrowingList list = form.getNutzenkriteriumLine();\r\n        if (list == null) {\r\n            return false;\r\n        }\r\n        // Gewichtungen ï¿½berprï¿½fen\r\n        Double gewichtung = 0.0;\r\n        Iterator it = list.iterator();\r\n        while (it.hasNext()) {\r\n            NutzenkriteriumLine nl = (NutzenkriteriumLine) it.next();\r\n            Integer nutzenkriteriumId = nl.getNutzenkriteriumId();\r\n            logger.debug(\"nutzenkrtieriumId=\" + nutzenkriteriumId);\r\n            String g = nl.getGewichtung();\r\n            logger.debug(\"Gewichtung: \" + g);\r\n            try {\r\n                gewichtung += new Double(g);\r\n            } catch (Exception e) {\r\n            }\r\n        }\r\n        logger.debug(\"Total gewichtungen: \" + gewichtung);\r\n        if (gewichtung < 99.999 || gewichtung > 100.0001) {\r\n            errors.add(ActionMessages.GLOBAL_MESSAGE, new ActionMessage(\"errors.gewichtung.failure\"));\r\n            return false;\r\n        }\r\n        /*\r\n    // Gewichtungen ï¿½berprï¿½fen\r\n    Iterator it = list.iterator();\r\n    ArrayList<Double> gewichtungsListe = new ArrayList<Double>(); \r\n    HashMap<Integer, ArrayList<Double>> gewichtungen = new HashMap<Integer, ArrayList<Double>>(); \r\n    Double kategorieGewichtung = 0.0;\r\n    boolean isFirst = true;\r\n    Integer tmpKategorieId = null;\r\n    while (it.hasNext()) {\r\n      NutzenkriteriumLine nl = (NutzenkriteriumLine) it.next();\r\n      Integer kategorieId = nl.getKategorieId();\r\n      Integer nutzenkriteriumId = nl.getNutzenkriteriumId();\r\n      logger.debug(\"kategorieId=\" + kategorieId);\r\n      logger.debug(\"nutzenkrtieriumId=\" + nutzenkriteriumId);\r\n      \r\n      // Gewichtung (muss pro Kategorie 100% ergeben)\r\n      String g = nl.getGewichtung();\r\n      logger.debug(\"Gewichtung: \" + g);\r\n      \r\n      \r\n      // Gewichtung fï¿½r die selbe Kategorie in eine Liste stellen\r\n      if (isFirst || kategorieId == null) {\r\n        isFirst = false;\r\n        tmpKategorieId = kategorieId;\r\n        try {\r\n          gewichtungsListe.add(new Double(g));\r\n        } catch (Exception e) {}\r\n      }\r\n      \r\n      // Nï¿½chste Kategorie \r\n      else {\r\n        gewichtungen.put(tmpKategorieId, gewichtungsListe);\r\n        gewichtungsListe = new ArrayList<Double>();\r\n        tmpKategorieId = kategorieId;\r\n        try {\r\n          gewichtungsListe.add(new Double(g));\r\n        } catch (Exception e) {}\r\n      }\r\n      \r\n      // kategorieGewichtung\r\n      String kg = nl.getKategorieGewichtung();\r\n      logger.debug(\"Gewichtung Kategorie: \" + kg);\r\n      try {\r\n        kategorieGewichtung += new Double(kg);\r\n      } catch (Exception e) {}\r\n    }\r\n    \r\n    it = gewichtungen.keySet().iterator();\r\n    while (it.hasNext()) {\r\n      Integer key = (Integer) it.next();\r\n      gewichtungsListe = gewichtungen.get(key);\r\n      Double gewichtung = 0.0;\r\n      for (Double d : gewichtungsListe) {\r\n        gewichtung += d;\r\n      }\r\n      \r\n      logger.debug(\"Total gewichtungen: \" + gewichtung);\r\n      if (gewichtung < 99.999 || gewichtung > 100) {\r\n        errors.add(ActionMessages.GLOBAL_MESSAGE,\r\n            new ActionMessage(\"errors.gewichtung.failure\"));\r\n        return false;\r\n      }\r\n    }\r\n    logger.debug(\"Total gewichtungen Kategorie: \" + kategorieGewichtung);\r\n    if (kategorieGewichtung < 99.999 || kategorieGewichtung > 100) {\r\n      errors.add(ActionMessages.GLOBAL_MESSAGE,\r\n          new ActionMessage(\"errors.gewichtung.failure\"));\r\n      return false;\r\n    }*/\r\n        // Benï¿½tigte ids holen\r\n        HttpSession session = request.getSession();\r\n        Integer customizingId = (Integer) session.getAttribute(Constants.CUSTOMIZING_ID);\r\n        Integer naOpNuId = cService.getNaOpNuId(request, customizingId);\r\n        // Allfï¿½llige indirekte Gewichtungen lï¿½schen\r\n        Auswahlfeld a = new Auswahlfeld();\r\n        a.setNutzenattraktivitaetOperativerNutzenId(naOpNuId);\r\n        aService.deleteGewichtungen(a);\r\n        // Gewichtung speichern\r\n        it = list.iterator();\r\n        while (it.hasNext()) {\r\n            NutzenkriteriumLine nl = (NutzenkriteriumLine) it.next();\r\n            Nutzenkriterium n = new Nutzenkriterium();\r\n            n.setNutzenkriteriumId(nl.getNutzenkriteriumId());\r\n            n.setNutzenattraktivitaetOperativerNutzenId(naOpNuId);\r\n            n.setGewichtung(new Double(nl.getGewichtung()));\r\n            dao.updateAssignmentGewichtung(n);\r\n            // Gewichtung der Kategorien speichern\r\n            Integer kategorieId = nl.getKategorieId();\r\n            if (kategorieId != null) {\r\n                Double g = null;\r\n                try {\r\n                    g = new Double(nl.getKategorieGewichtung());\r\n                } catch (Exception e) {\r\n                }\r\n                Kategorie k = new Kategorie();\r\n                k.setGewichtung(g);\r\n                k.setKategorieId(nl.getKategorieId());\r\n                k.setNutzenattraktivitaetOperativerNutzenId(naOpNuId);\r\n                kService.updateAssignment(k);\r\n            }\r\n        }\r\n        // Status setzen\r\n        boolean isNa = !cService.isOperativerNutzen(request);\r\n        if (isNa) {\r\n            logger.debug(\"GEWICHTUNGEN_NA=true\");\r\n            session.setAttribute(Constants.GEWICHTUNGEN_NA, true);\r\n        } else {\r\n            logger.debug(\"GEWICHTUNGEN_OP_NU=true\");\r\n            session.setAttribute(Constants.GEWICHTUNGEN_OP_NU, true);\r\n        }\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Prï¿½ft, ob eine Direkte Gewichtung vorliegt oder nicht.\r\n     *\r\n     * @param request                   der HttpServletRequest\r\n     * @return                          true bei Direkter Gewichtung, sonst false\r\n     */\r\n    public boolean direkteGewichtung(HttpServletRequest request) {\r\n        Integer typ = (Integer) request.getSession().getAttribute(Constants.GEWICHTUNGSTYP);\r\n        logger.debug(\"Direkte Gewichtung ausgewï¿½hlt\");\r\n        return typ == Constants.GEWICHTUNG_DIREKT;\r\n    }\r\n\r\n    /**\r\n     * Setzt den Status des Schritts \"Nutzenkriterien\", sowohl fï¿½r das\r\n     * Customizing Nutzenattraktiviï¿½t wie fï¿½r das Customizing Operativer Nutzen.\r\n     * Der Status zeigt in der Navigation an, ob dieser Schritt des Customizings\r\n     * bereits erfolgreich abgeschlossen wurde oder nicht.\r\n     *\r\n     * @param request                   der HttpServletRequest\r\n     * @param kategorien                eine Liste aller gewï¿½hlten Kategorien\r\n     * @param mandantId                 die Id des Mandanten\r\n     * @param naOpNuId                  die Id der Nutzenattraktivitï¿½t bzw.\r\n     *                                  des Operativen Nutzens\r\n     * @param isNa                      true fï¿½r Nutzenattraktivitï¿½t, sonst false\r\n     * @return                          Liste aller gewï¿½hlten Nutzenkriterien\r\n     */\r\n    public List<Nutzenkriterium> setStatus(HttpServletRequest request, List<Kategorie> kategorien, Integer mandantId, Integer naOpNuId, boolean isNa) {\r\n        boolean ok = true;\r\n        for (Kategorie k : kategorien) {\r\n            Nutzenkriterium nk = new Nutzenkriterium();\r\n            nk.setKategorieId(k.getKategorieId());\r\n            nk.setNutzenattraktivitaetOperativerNutzenId(naOpNuId);\r\n            List<Nutzenkriterium> nks = dao.getByNaOpNuAndKategorie(nk);\r\n            logger.debug(nks.size() + \" Nutzenkriterien in der Liste\");\r\n            if (nks == null || nks.size() == 0) {\r\n                ok = false;\r\n                break;\r\n            }\r\n        }\r\n        HttpSession session = request.getSession();\r\n        if (ok && isNa) {\r\n            session.setAttribute(Constants.NUTZENKRITERIEN_NA, true);\r\n            session.setAttribute(Constants.FRAGEN_NA, true);\r\n        } else if (ok) {\r\n            session.setAttribute(Constants.NUTZENKRITERIEN_OP_NU, true);\r\n            session.setAttribute(Constants.FRAGEN_OP_NU, true);\r\n        }\r\n        if (ok) {\r\n            Nutzenkriterium nk = new Nutzenkriterium();\r\n            nk.setMandantId(mandantId);\r\n            nk.setNutzenattraktivitaetOperativerNutzenId(naOpNuId);\r\n            return dao.getAssignments(nk);\r\n        } else if (!ok && isNa) {\r\n            session.removeAttribute(Constants.NUTZENKRITERIEN_NA);\r\n            session.removeAttribute(Constants.FRAGEN_NA);\r\n        } else {\r\n            session.removeAttribute(Constants.NUTZENKRITERIEN_OP_NU);\r\n            session.removeAttribute(Constants.FRAGEN_OP_NU);\r\n        }\r\n        return null;\r\n    }\r\n\r\n    /**\r\n     * Lï¿½scht die Fragebogen-Gewichtung des aktuellen Customizings.\r\n     *\r\n     * @param request                   der HttpServletRequest\r\n     */\r\n    public void deleteFragebogenGewichtung(HttpServletRequest request) {\r\n        // Benï¿½tigte ids holen\r\n        HttpSession session = request.getSession();\r\n        Integer customizingId = (Integer) session.getAttribute(Constants.CUSTOMIZING_ID);\r\n        Integer naOpNuId = cService.getNaOpNuId(request, customizingId);\r\n        // allfï¿½llige Gewichtung ï¿½ber Fragebogen lï¿½schen\r\n        Auswahlfeld a = new Auswahlfeld();\r\n        a = aService.setType(a, Constants.GEWICHTUNG);\r\n        a.setNutzenattraktivitaetOperativerNutzenId(naOpNuId);\r\n        logger.debug(\"Fragebogen-Gewichtung lï¿½schen:\");\r\n        logger.debug(\"nutzenattraktivitaetOperativerNutzenId=\" + a.getNutzenattraktivitaetOperativerNutzenId());\r\n        aService.deleteGewichtungen(a);\r\n    }\r\n\r\n    /**\r\n     * Selektiert die zuvor gewï¿½hlte Anzahl von Abstufungen fï¿½r die\r\n     * Stufenbeschriebe und die Gewichtung.\r\n     * Stellt den gewï¿½hlten Gewichtungstyp in den Request. Dies dient\r\n     * zur Vorauswahl der richtigen Checkbox im Formular \"Gewichtung\".\r\n     *\r\n     * @param request                   der HttpServletRequest\r\n     * @param path                      der Pfad der Action\r\n     */\r\n    public void preselect(HttpServletRequest request, String path) {\r\n        // Benï¿½tigte ids holen\r\n        HttpSession session = request.getSession();\r\n        Integer customizingId = (Integer) session.getAttribute(Constants.CUSTOMIZING_ID);\r\n        Integer naOpNuId = cService.getNaOpNuId(request, customizingId);\r\n        logger.debug(\"naOpNuId=\" + naOpNuId);\r\n        logger.debug(\"Pfad: \" + path);\r\n        // Abstufungstatus holen\r\n        List<Auswahlfeld> afs = new ArrayList<Auswahlfeld>();\r\n        if (path.contains(Constants.ABSTUFUNGEN_ACTION)) {\r\n            afs = aService.getAnzahlAbstufungen(naOpNuId);\r\n        } else // Gewichtungsstatus holen\r\n        {\r\n            afs = aService.getAnzahlGewichtungen(naOpNuId);\r\n        }\r\n        logger.debug(afs.size() + \" Abstufungen in der Liste\");\r\n        request.setAttribute(Constants.ABSTUFUNGEN, afs.size());\r\n        // Gewichtung bestimmen\r\n        List<Auswahlfeld> gewichtungen = aService.getGewichtungStatus(naOpNuId);\r\n        if (gewichtungen.size() > 0) {\r\n            request.setAttribute(Constants.GEWICHTUNG_NOT_DIRECT, true);\r\n        } else {\r\n            request.removeAttribute(Constants.GEWICHTUNG_NOT_DIRECT);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Kopiert alle Zuweisungen von Nutzenkriterien von einer Nutzenattraktivitï¿½t\r\n     * bzw. von einem Operativen Nutzen zu einer neuen Id. Wird zum Kopieren\r\n     * von Customizings verwendet.\r\n     *\r\n     * @param mandantId                 die Id des Mandanten\r\n     * @param naOpNuId                  die Id der Nutzenattraktivitï¿½t bzw. des\r\n     *                                  Operativen Nutzens, welche die zu kopierenden\r\n     *                                  Zuweisungen enthï¿½lt\r\n     * @param newNaOpNuId               die neue Id fï¿½r die kopierten Zuweisungen\r\n     */\r\n    public void copy(Integer mandantId, Integer naOpNuId, Integer newNaOpNuId) {\r\n        Nutzenkriterium n = new Nutzenkriterium();\r\n        n.setNutzenattraktivitaetOperativerNutzenId(naOpNuId);\r\n        n.setMandantId(mandantId);\r\n        List<Nutzenkriterium> kriterien = dao.getAssignments(n);\r\n        for (Nutzenkriterium kriterium : kriterien) {\r\n            kriterium.setNutzenattraktivitaetOperativerNutzenId(newNaOpNuId);\r\n            dao.insertAssignment(kriterium);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * ï¿½berprï¿½ft, ob ein Customizing komplett ist.\r\n     *\r\n     * @param request                   der HttpServletRequest\r\n     * @return                          true bei komplettem Customizing, sonst false\r\n     */\r\n    public boolean customizingComplete(HttpServletRequest request) {\r\n        return customizingService.complete(request);\r\n    }\r\n\r\n    /**\r\n     * Erstellt ein Objekt vom Typ Nutzenkriterium mit der id des Mandanten\r\n     * und, falls angegeben, mit abgefï¿½llten Formulardaten\r\n     *\r\n     * @param request                   der HttpServletRequest\r\n     * @param form                      das DynaActionForm\r\n     * @return                          Nutzenkriterium mit mandantId\r\n     */\r\n    private Nutzenkriterium createNutzenkriterium(HttpServletRequest request, DynaActionForm form) {\r\n        Integer mandantId = (Integer) request.getSession().getAttribute(Constants.MANDANT_ID);\r\n        Nutzenkriterium n = new Nutzenkriterium();\r\n        n.setMandantId(mandantId);\r\n        if (form != null) {\r\n            Integer id = (Integer) form.get(Constants.NUTZENKRITERIUM_ID);\r\n            String name = (String) form.get(Constants.NAME);\r\n            String beschreibung = (String) form.get(\"beschreibung\");\r\n            String frageManagementDefault = (String) form.get(\"frageManagementDefault\");\r\n            String frageProjektbetroffeneDefault = (String) form.get(\"frageProjektbetroffeneDefault\");\r\n            Integer kategorieId = (Integer) form.get(Constants.KATEGORIE_ID);\r\n            n.setNutzenkriteriumId(id);\r\n            n.setName(name);\r\n            n.setBeschreibung(beschreibung);\r\n            n.setFrageManagementDefault(frageManagementDefault);\r\n            n.setFrageProjektbetroffeneDefault(frageProjektbetroffeneDefault);\r\n            n.setKategorieId(kategorieId);\r\n        }\r\n        return n;\r\n    }\r\n\r\n    /**\r\n     * ï¿½berprï¿½ft, ob die Id eines Nutzenkriteriums Ziels im Request ist\r\n     * (update) oder nicht (neu).\r\n     *\r\n     * @param request                   der HttpServletRequest\r\n     * @param form                      das DynaActionForm\r\n     * @return                          true, wenn das angegebene Nutzenkriterium\r\n     *                                  besteht, sonst false.\r\n     */\r\n    private boolean isUpdate(HttpServletRequest request, DynaActionForm form) {\r\n        Integer id = (Integer) form.get(Constants.NUTZENKRITERIUM_ID);\r\n        if (id == null || id == 0) {\r\n            return false;\r\n        }\r\n        return true;\r\n    }\r\n}\r\n",
		"id": "EvoSuiteBenchmark/46_nutzenportfolio/src/main/java/ch/bfh/egov/nutzenportfolio/service/nutzenkriterium/NutzenkriteriumDaoServiceTest2.java",
		"test_prompt": "// NutzenkriteriumDaoServiceTest2.java\npackage ch.bfh.egov.nutzenportfolio.service.nutzenkriterium;\n\nimport java.util.ArrayList;\nimport java.util.Collections;\nimport java.util.Comparator;\nimport java.util.HashMap;\nimport java.util.Iterator;\nimport java.util.List;\nimport javax.servlet.http.HttpServletRequest;\nimport javax.servlet.http.HttpSession;\nimport org.apache.commons.logging.Log;\nimport org.apache.commons.logging.LogFactory;\nimport org.apache.struts.action.ActionMessage;\nimport org.apache.struts.action.ActionMessages;\nimport org.apache.struts.action.DynaActionForm;\nimport ch.bfh.egov.nutzenportfolio.Constants;\nimport ch.bfh.egov.nutzenportfolio.common.AutoGrowingList;\nimport ch.bfh.egov.nutzenportfolio.common.NutzenkriteriumLine;\nimport ch.bfh.egov.nutzenportfolio.form.FragenForm;\nimport ch.bfh.egov.nutzenportfolio.persistence.nutzenkriterium.NutzenkriteriumDao;\nimport ch.bfh.egov.nutzenportfolio.service.auswahlfeld.AuswahlfeldService;\nimport ch.bfh.egov.nutzenportfolio.service.common.CommonService;\nimport ch.bfh.egov.nutzenportfolio.service.customizing.CustomizingService;\nimport ch.bfh.egov.nutzenportfolio.service.kategorie.KategorieService;\nimport ch.bfh.egov.nutzenportfolio.tos.Auswahlfeld;\nimport ch.bfh.egov.nutzenportfolio.tos.Customizing;\nimport ch.bfh.egov.nutzenportfolio.tos.Kategorie;\nimport ch.bfh.egov.nutzenportfolio.tos.NaOpNu;\nimport ch.bfh.egov.nutzenportfolio.tos.Nutzenkriterium;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link NutzenkriteriumDaoService}.\n* It contains ten unit test cases for the {@link NutzenkriteriumDaoService#populateFragen(HttpServletRequest, FragenForm)} method.\n*/\nclass NutzenkriteriumDaoServiceTest2 {"
	},
	{
		"original_code": "// NutzenkriteriumDaoService.java\n/**\r\n * Nutzenportfolio\r\n * Copyright (C) 2006 Kompetenzzentrum E-Business, Simon Bergamin\r\n *\r\n * This program is free software; you can redistribute it and/or\r\n * modify it under the terms of the GNU General Public License\r\n * as published by the Free Software Foundation; either version 2\r\n * of the License, or (at your option) any later version.\r\n *\r\n * This program is distributed in the hope that it will be useful,\r\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n * GNU General Public License for more details.\r\n *\r\n * You should have received a copy of the GNU General Public License\r\n * along with this program; if not, write to the Free Software\r\n * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\r\n */\r\npackage ch.bfh.egov.nutzenportfolio.service.nutzenkriterium;\r\n\r\nimport java.util.ArrayList;\r\nimport java.util.Collections;\r\nimport java.util.Comparator;\r\nimport java.util.HashMap;\r\nimport java.util.Iterator;\r\nimport java.util.List;\r\nimport javax.servlet.http.HttpServletRequest;\r\nimport javax.servlet.http.HttpSession;\r\nimport org.apache.commons.logging.Log;\r\nimport org.apache.commons.logging.LogFactory;\r\nimport org.apache.struts.action.ActionMessage;\r\nimport org.apache.struts.action.ActionMessages;\r\nimport org.apache.struts.action.DynaActionForm;\r\nimport ch.bfh.egov.nutzenportfolio.Constants;\r\nimport ch.bfh.egov.nutzenportfolio.common.AutoGrowingList;\r\nimport ch.bfh.egov.nutzenportfolio.common.NutzenkriteriumLine;\r\nimport ch.bfh.egov.nutzenportfolio.form.FragenForm;\r\nimport ch.bfh.egov.nutzenportfolio.persistence.nutzenkriterium.NutzenkriteriumDao;\r\nimport ch.bfh.egov.nutzenportfolio.service.auswahlfeld.AuswahlfeldService;\r\nimport ch.bfh.egov.nutzenportfolio.service.common.CommonService;\r\nimport ch.bfh.egov.nutzenportfolio.service.customizing.CustomizingService;\r\nimport ch.bfh.egov.nutzenportfolio.service.kategorie.KategorieService;\r\nimport ch.bfh.egov.nutzenportfolio.tos.Auswahlfeld;\r\nimport ch.bfh.egov.nutzenportfolio.tos.Customizing;\r\nimport ch.bfh.egov.nutzenportfolio.tos.Kategorie;\r\nimport ch.bfh.egov.nutzenportfolio.tos.NaOpNu;\r\nimport ch.bfh.egov.nutzenportfolio.tos.Nutzenkriterium;\r\n\r\n/**\r\n * Implementierende Service-Klasse fï¿½r Nutzenkriterien.\r\n *\r\n * @author Kompetenzzentrum E-Business, Simon Bergamin\r\n */\r\npublic class NutzenkriteriumDaoService implements NutzenkriteriumService {\r\n\r\n    private NutzenkriteriumDao dao;\r\n\r\n    private CommonService cService;\r\n\r\n    private KategorieService kService;\r\n\r\n    private AuswahlfeldService aService;\r\n\r\n    private CustomizingService customizingService;\r\n\r\n    private Log logger = LogFactory.getLog(this.getClass());\r\n\r\n    /**\r\n     * Konstruktor. ï¿½bergabe des DataAcessObject-Interfaces fï¿½r Nutzenkriterien.\r\n     *\r\n     * @param dao                               Nutzenkriterien DataAcessObject-Interface\r\n     */\r\n    public NutzenkriteriumDaoService(NutzenkriteriumDao dao) {\r\n        this.dao = dao;\r\n    }\r\n\r\n    /**\r\n     * @see ch.bfh.egov.nutzenportfolio.persistence.nutzenkriterium.NutzenkriteriumIbatisDao#getAssignmentById(Nutzenkriterium)\r\n     */\r\n    public Nutzenkriterium getAssignmentById(Nutzenkriterium kriterium) {\r\n        return dao.getAssignmentById(kriterium);\r\n    }\r\n\r\n    /**\r\n     * @see ch.bfh.egov.nutzenportfolio.persistence.nutzenkriterium.NutzenkriteriumIbatisDao#getByProjektId(NaOpNu)\r\n     */\r\n    public List<Nutzenkriterium> getByProjektId(NaOpNu naOpNu) {\r\n        return dao.getByProjektId(naOpNu);\r\n    }\r\n\r\n    /**\r\n     * @see ch.bfh.egov.nutzenportfolio.persistence.nutzenkriterium.NutzenkriteriumIbatisDao#getAssignments(Nutzenkriterium)\r\n     */\r\n    public List<Nutzenkriterium> getAssignments(Nutzenkriterium kriterium) {\r\n        return dao.getAssignments(kriterium);\r\n    }\r\n\r\n    /**\r\n     * @see ch.bfh.egov.nutzenportfolio.persistence.nutzenkriterium.NutzenkriteriumIbatisDao#update(Nutzenkriterium)\r\n     */\r\n    public void update(Nutzenkriterium kriterium) {\r\n        dao.updateAssignment(kriterium);\r\n    }\r\n\r\n    /**\r\n     * @see ch.bfh.egov.nutzenportfolio.persistence.nutzenkriterium.NutzenkriteriumIbatisDao#unsetAssignmentGewichtung(Integer)\r\n     */\r\n    public void unsetAssignmentGewichtung(Integer naOpNuId) {\r\n        dao.unsetAssignmentGewichtung(naOpNuId);\r\n    }\r\n\r\n    /**\r\n     * @see ch.bfh.egov.nutzenportfolio.persistence.nutzenkriterium.NutzenkriteriumIbatisDao#deleteAssignments(Integer)\r\n     */\r\n    public void deleteAssignments(Integer naOpNuId) {\r\n        dao.deleteAssignments(naOpNuId);\r\n    }\r\n\r\n    /**\r\n     * Initialisierung dieses Service-Objekts durch ï¿½bergabe anderer,\r\n     * benï¿½tigter Service-Objekte.\r\n     *\r\n     * @param aService                   AuswahlFeldService Objekt\r\n     * @param cService                   CommonService Objekt\r\n     * @param kService                   KategorieService Objekt\r\n     * @param customizingService         CustomizingService Objekt\r\n     */\r\n    public void init(AuswahlfeldService aService, CommonService cService, KategorieService kService, CustomizingService customizingService) {\r\n        this.aService = aService;\r\n        this.cService = cService;\r\n        this.kService = kService;\r\n        this.customizingService = customizingService;\r\n    }\r\n\r\n    /**\r\n     * Stellt eine Liste aller Nutzenkriterien in den request.\r\n     *\r\n     * @param request                   der HttpServletRequest\r\n     */\r\n    public void list(HttpServletRequest request) {\r\n        Integer mandantId = (Integer) request.getSession().getAttribute(Constants.MANDANT_ID);\r\n        List<Nutzenkriterium> kriterien = dao.getAll(mandantId);\r\n        // Sortieren der Nutzenkriterien nach Namen\r\n        Collections.<Nutzenkriterium>sort(kriterien, new Comparator<Nutzenkriterium>() {\r\n\r\n            public int compare(Nutzenkriterium a, Nutzenkriterium b) {\r\n                String name1 = a.getName().toLowerCase();\r\n                String name2 = b.getName().toLowerCase();\r\n                return name1.compareTo(name2);\r\n            }\r\n        });\r\n        request.setAttribute(Constants.NUTZENKRITERIEN, kriterien);\r\n    }\r\n\r\n    /**\r\n     * Stellt eine Liste von Nutzenkriterien sowie deren zugehï¿½rigen\r\n     * Kategorien in den Request. Pro Request bzw. pro Seitenaufruf\r\n     * wird eine Kategorie mit den jeweiligen Nutzenkriterien angezeigt.\r\n     * Mit einem Klick auf \"weiter\" gelangt der Benutzer zur nï¿½chsten Seite\r\n     * bzw. der nï¿½chsten gewï¿½hlten Kategorie.\r\n     *\r\n     * @param request                   der HttpServletRequest\r\n     * @return                          true bei Erfolg, sonst false\r\n     */\r\n    public boolean populate(HttpServletRequest request) {\r\n        // Benï¿½tigte ids holen\r\n        HttpSession session = request.getSession();\r\n        Integer mandantId = (Integer) session.getAttribute(Constants.MANDANT_ID);\r\n        Integer customizingId = (Integer) session.getAttribute(Constants.CUSTOMIZING_ID);\r\n        Integer naOpNuId = cService.getNaOpNuId(request, customizingId);\r\n        logger.debug(\"naOpNuId=\" + naOpNuId);\r\n        // Zugewiesene Kategorien holen\r\n        Kategorie k = new Kategorie();\r\n        k.setNutzenattraktivitaetOperativerNutzenId(naOpNuId);\r\n        k.setMandantId(mandantId);\r\n        List<Kategorie> kategorien = kService.getAssignments(k);\r\n        Integer kategorieId = null;\r\n        Integer step = null;\r\n        if (kategorien.size() == 0) {\r\n            return false;\r\n        }\r\n        // 1 Schritt pro Kategorie. Parameter ï¿½berprï¿½fen.\r\n        String stepStr = request.getParameter(Constants.STEP);\r\n        String next = request.getParameter(Constants.NEXT);\r\n        logger.debug(\"Angegebener step: \" + stepStr);\r\n        try {\r\n            step = new Integer(stepStr);\r\n        } catch (NumberFormatException nfex) {\r\n            step = 1;\r\n        }\r\n        // Denselben Schritt wiederholen, wenn nicht \"weiter\" geklickt wurde\r\n        if (next == null && step > 1) {\r\n            --step;\r\n        }\r\n        // Kategorien in Array stellen\r\n        Integer[] kategorienIdArr = new Integer[kategorien.size()];\r\n        String[] kategorienNameArr = new String[kategorien.size()];\r\n        int i = 0;\r\n        for (Kategorie kategorie : kategorien) {\r\n            kategorienIdArr[i] = kategorie.getKategorieId();\r\n            kategorienNameArr[i++] = kategorie.getName();\r\n            logger.debug(\"Kategorie: id=\" + kategorienIdArr[i - 1] + \", name=\" + kategorienNameArr[i - 1]);\r\n        }\r\n        // Auf inkorrekten step Parameter prï¿½fen\r\n        if ((step - 1) >= kategorienIdArr.length) {\r\n            logger.warn(\"Nicht verfï¿½gbarer Schritt ausgewï¿½hlt!\");\r\n            step = 1;\r\n        }\r\n        // Auf letzten Schritt prï¿½fen\r\n        if (step == kategorienIdArr.length) {\r\n            request.setAttribute(Constants.LAST_STEP, true);\r\n        }\r\n        // Id der Kategorie anhand des step Parameters holen\r\n        kategorieId = kategorienIdArr[step - 1];\r\n        logger.debug(\"Gewaehlte Kategorie: \" + kategorieId);\r\n        request.setAttribute(Constants.KATEGORIE_ID, kategorieId);\r\n        request.setAttribute(\"kategorie\", kategorienNameArr[step - 1]);\r\n        request.setAttribute(Constants.STEP, step + 1);\r\n        // Alle Nutzenkriterien zur gewï¿½hlten Kategorie holen\r\n        Nutzenkriterium n = new Nutzenkriterium();\r\n        n.setNutzenattraktivitaetOperativerNutzenId(naOpNuId);\r\n        n.setKategorieId(kategorieId);\r\n        n.setMandantId(mandantId);\r\n        // Nutzenkriterien aussortieren, die einem anderen Customizing zugeordnet sind\r\n        List<Nutzenkriterium> nutzenkriterien = dao.getByKategorie(n);\r\n        Iterator it = nutzenkriterien.iterator();\r\n        HashMap<String, Nutzenkriterium> map = new HashMap<String, Nutzenkriterium>();\r\n        while (it.hasNext()) {\r\n            Nutzenkriterium nk = (Nutzenkriterium) it.next();\r\n            String name = nk.getName();\r\n            boolean contains = map.containsKey(name);\r\n            Integer nuNaOpNuId = nk.getNutzenattraktivitaetOperativerNutzenId();\r\n            // HashMap abfï¿½llen um allfï¿½llige doppelte Nutzenkriterien auszusortieren\r\n            // (ist der Fall bei Zuweisungen zu anderen Customizings)\r\n            if (!contains || nuNaOpNuId != null && contains && nuNaOpNuId.equals(naOpNuId)) {\r\n                map.put(name, nk);\r\n            }\r\n        }\r\n        nutzenkriterien = new ArrayList<Nutzenkriterium>(map.values());\r\n        request.setAttribute(Constants.NUTZENKRITERIEN, nutzenkriterien);\r\n        // Operativer Nutzen -> Projektbetroffene\r\n        if (cService.isOperativerNutzen(request)) {\r\n            request.setAttribute(Constants.PROJEKTBETROFFENE, true);\r\n        }\r\n        Integer levels = (Integer) request.getSession().getAttribute(Constants.ABSTUFUNGEN);\r\n        request.setAttribute(\"totalKategorien\", ((levels != null) ? kategorien.size() : 0));\r\n        // Alle zugewiesenen Nutzenkriterien zur gewï¿½hlten Kategorie holen\r\n        List nAssigned = dao.getAssignments(n);\r\n        request.setAttribute(Constants.NA_OP_NU_ID, naOpNuId);\r\n        request.setAttribute(Constants.NUTZENKRITERIEN_ASSIGNED, nAssigned);\r\n        boolean isNa = !cService.isOperativerNutzen(request);\r\n        setStatus(request, kategorien, mandantId, naOpNuId, isNa);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Fï¿½llt ein Formular mit bestehenden Daten eines Nutzenkriteriums ab,\r\n     * falls eine entsprechende id angegeben wurde.\r\n     *\r\n     * @param request                   der HttpServletRequest\r\n     * @param form                      das DynaActionForm\r\n     */\r\n    public void edit(HttpServletRequest request, DynaActionForm form) {\r\n        if (isUpdate(request, form)) {\r\n            Nutzenkriterium n = createNutzenkriterium(request, form);\r\n            Integer mandantId = n.getMandantId();\r\n            n = dao.getById(n);\r\n            form.set(\"name\", n.getName());\r\n            form.set(\"beschreibung\", n.getBeschreibung());\r\n            form.set(\"frageManagementDefault\", n.getFrageManagementDefault());\r\n            form.set(\"frageProjektbetroffeneDefault\", n.getFrageProjektbetroffeneDefault());\r\n            form.set(Constants.KATEGORIE_ID, n.getKategorieId());\r\n            // Kategorien in die Session stellen\r\n            logger.debug(\"Kategorien holen fï¿½r mandantId=\" + mandantId);\r\n            List<Kategorie> kategorien = kService.getAll(mandantId);\r\n            request.getSession().setAttribute(Constants.KATEGORIEN, kategorien);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Fï¿½hrt ein update eines bestenenden Nutzenkriteriums anhand von\r\n     * Formulardaten durch.\r\n     *\r\n     * @param request                   der HttpServletRequest\r\n     * @param form                      das DynaActionForm\r\n     */\r\n    public void update(HttpServletRequest request, DynaActionForm form) {\r\n        logger.debug(\"Update Nutzenkriterium\");\r\n        if (isUpdate(request, form)) {\r\n            logger.debug(\"Update durchfï¿½hren\");\r\n            Nutzenkriterium n = createNutzenkriterium(request, form);\r\n            dao.update(n);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Prï¿½ft, ob ein Nutzenkriterium existiert und gibt es zurï¿½ck.\r\n     *\r\n     * @param request                   der HttpServletRequest\r\n     * @param form                      das DynaActionForm\r\n     * @return                          das Nutzenkriterium\r\n     */\r\n    public Nutzenkriterium getNutzenkriterium(HttpServletRequest request, DynaActionForm form) {\r\n        Nutzenkriterium n = createNutzenkriterium(request, form);\r\n        return dao.getById(n);\r\n    }\r\n\r\n    /**\r\n     * Abfrage fï¿½r das Lï¿½schen von einem Nutzenkriterium.\r\n     *\r\n     * @param request                   der HttpServletRequest\r\n     * @param kriterium                 das zu lï¿½schende Nutzenkriterium\r\n     * @param messages                  das ActionMessages Objekt\r\n     */\r\n    public void deleteQuestion(HttpServletRequest request, Nutzenkriterium kriterium, ActionMessages messages) {\r\n        // Verknï¿½pfungen prï¿½fen\r\n        linkedTo(request, kriterium);\r\n        // Bestï¿½tigungsnachricht ausgeben\r\n        messages.add(ActionMessages.GLOBAL_MESSAGE, new ActionMessage(\"messages.question.delete\", kriterium.getName()));\r\n        // Actions zum Lï¿½schen und Abbrechen definieren\r\n        request.setAttribute(Constants.ACTION, Constants.VERWALTUNG_NUTZENKRITERIEN_ACTION);\r\n        request.setAttribute(Constants.DISPATCH_YES, Constants.DELETE);\r\n        request.setAttribute(Constants.DISPATCH_NO, Constants.LIST);\r\n        request.setAttribute(Constants.ID_NAME, Constants.NUTZENKRITERIUM_ID);\r\n        request.setAttribute(Constants.ID_VALUE, kriterium.getNutzenkriteriumId());\r\n    }\r\n\r\n    /**\r\n     * Setzt die Verknï¿½pfungen zu diesem Nutzenkriterium in den Request.\r\n     * Ein Nutzenkriterium kann mit Customizings verknï¿½pft sein. Diese\r\n     * Methode wird bei der Lï¿½schabfrage verwendet.\r\n     *\r\n     * @param request                   der HttpServletRequest\r\n     * @param kritierium                das zu lï¿½schende Nutzenkriterium\r\n     */\r\n    public void linkedTo(HttpServletRequest request, Nutzenkriterium kritierium) {\r\n        HashMap<String, List> map = new HashMap<String, List>();\r\n        // Customizings suchen, die dieses Nutzenkriterium benï¿½tigen\r\n        List<Customizing> customizings = dao.getLinkedCustomizings(kritierium);\r\n        if (customizings.size() > 0) {\r\n            for (Customizing c : customizings) {\r\n                if (c.getStatus()) {\r\n                    request.setAttribute(\"active\", true);\r\n                    break;\r\n                }\r\n            }\r\n            map.put(\"Customizings\", customizings);\r\n        }\r\n        request.setAttribute(\"linked\", map);\r\n    }\r\n\r\n    /**\r\n     * Lï¿½scht ein Nutzenkriterium. Falls es mit inaktiven Customizings\r\n     * verknï¿½ft ist, werden diese ebenfalls gelï¿½scht. Wenn aktive Customizings\r\n     * verknï¿½ft sind, wird das Nutzenkriterium nicht gelï¿½scht.\r\n     *\r\n     * @param request                   der HttpServletRequest\r\n     * @param kriterium                 das zu lï¿½schende Nutzenkriterium\r\n     */\r\n    public void delete(HttpServletRequest request, Nutzenkriterium kriterium) {\r\n        // Verknï¿½pfungen prï¿½fen\r\n        linkedTo(request, kriterium);\r\n        Boolean active = (Boolean) request.getAttribute(\"active\");\r\n        // Aktives Customizing verknï¿½ft. Dies sollte nicht passieren ausser bei\r\n        // einem direkten URL-Aufruf ...\r\n        if (active != null && active) {\r\n            logger.debug(\"Aktives Customizing verknï¿½pft, Nutzenkriterium wird nicht gelï¿½scht\");\r\n            return;\r\n        }\r\n        // Customizings lï¿½schen\r\n        List<Customizing> customizings = dao.getLinkedCustomizings(kriterium);\r\n        for (Customizing c : customizings) {\r\n            logger.debug(\"Lï¿½sche Customizing \" + c.getCustomizingId());\r\n            customizingService.cascadeDelete(request, c);\r\n        }\r\n        // Lï¿½schen des Nutzenkriteriums\r\n        dao.delete(kriterium);\r\n    }\r\n\r\n    /**\r\n     * Weist dem aktuellen Customizing das gewï¿½hlte Nutzenkriterium zu.\r\n     * Wenn das Nutzenkriterium eine Default-Frage besitzt, wird diese\r\n     * zur spï¿½teren Verwendung in der Verknï¿½pfungstabelle gespeichert.\r\n     *\r\n     * @param request                   der HttpServletRequest\r\n     * @param form                      das Formular mit dem gewï¿½hlten Nutzenkriterium\r\n     */\r\n    public void set(HttpServletRequest request, DynaActionForm form) {\r\n        // Benï¿½tigte ids holen\r\n        HttpSession session = request.getSession();\r\n        Integer customizingId = (Integer) session.getAttribute(Constants.CUSTOMIZING_ID);\r\n        Integer mandantId = (Integer) session.getAttribute(Constants.MANDANT_ID);\r\n        Integer naOpNuId = cService.getNaOpNuId(request, customizingId);\r\n        Integer nutzenkriteriumId = (Integer) form.get(Constants.NUTZENKRITERIUM_ID);\r\n        if (nutzenkriteriumId == null) {\r\n            return;\r\n        }\r\n        // Nutzenkriterium zuweisen\r\n        logger.debug(\"Nutzenkriterium zuweisen: \" + nutzenkriteriumId);\r\n        Nutzenkriterium n = new Nutzenkriterium();\r\n        n.setNutzenkriteriumId(nutzenkriteriumId);\r\n        n.setMandantId(mandantId);\r\n        n.setNutzenattraktivitaetOperativerNutzenId(naOpNuId);\r\n        // Default fragen holen und setzen\r\n        Nutzenkriterium fragen = dao.getDefaultFragen(n);\r\n        if (cService.isOperativerNutzen(request)) {\r\n            n.setFrageProjektbetroffene(fragen.getFrageProjektbetroffeneDefault());\r\n        } else {\r\n            n.setFrageManagement(fragen.getFrageManagementDefault());\r\n        }\r\n        dao.insertAssignment(n);\r\n    }\r\n\r\n    /**\r\n     * ï¿½berprï¿½ft, ob das aktuelle Nutzenkriterium zum letzten\r\n     * Schritt bzw. zur letzten gewï¿½hlten Kategorie gehï¿½rt. Wenn\r\n     * ja, kann zur nï¿½chsten Action gesprungen werden.\r\n     *\r\n     * @param request                   der HttpServletRequest\r\n     * @return                          true beim letzten Schritt, sonst false\r\n     */\r\n    public boolean next(HttpServletRequest request) {\r\n        // Nï¿½chste Action?\r\n        String last = request.getParameter(Constants.LAST_STEP);\r\n        if (last != null && last.equals(\"true\")) {\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    /**\r\n     * Entfernt die Zuweisung des gewï¿½hlten Nutzenkriteriums zum\r\n     * aktuellen Customizing.\r\n     *\r\n     * @param request                   der HttpServletRequest\r\n     * @param form                      das Formular mit dem Nutzenkriterium\r\n     */\r\n    public void remove(HttpServletRequest request, DynaActionForm form) {\r\n        // Nutzenkriterium anhand der id holen\r\n        HttpSession session = request.getSession();\r\n        Integer mandantId = (Integer) session.getAttribute(Constants.MANDANT_ID);\r\n        Integer nutzenkriteriumId = (Integer) form.get(Constants.NUTZENKRITERIUM_ID);\r\n        Integer naOpNuId = (Integer) form.get(Constants.NA_OP_NU_ID);\r\n        Nutzenkriterium n = new Nutzenkriterium();\r\n        n.setNutzenkriteriumId(nutzenkriteriumId);\r\n        n.setNutzenattraktivitaetOperativerNutzenId(naOpNuId);\r\n        n.setMandantId(mandantId);\r\n        n = dao.getAssignmentById(n);\r\n        // Zuweisung lï¿½schen\r\n        if (n != null) {\r\n            logger.debug(\"Zuweisung nutzenkriteriumId=\" + nutzenkriteriumId + \", nutzenattraktivitaetOperativerNutzenId=\" + n.getNutzenattraktivitaetOperativerNutzenId() + \" wird gelï¿½scht.\");\r\n            dao.deleteAssignment(n);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Setzt die zugehï¿½rigen Fragen von Nutzenkriterien zur Anzeige\r\n     * in den Request.\r\n     *\r\n     * @param request                   der HttpServletRequest\r\n     * @param form                      das Formular mit den Nutzenkriterien\r\n     * @return                          true bei Erfolg, sonst false\r\n     */\r\n    public boolean populateFragen(HttpServletRequest request, FragenForm form) {\r\n        // Benï¿½tigte ids holen\r\n        HttpSession session = request.getSession();\r\n        Integer customizingId = (Integer) session.getAttribute(Constants.CUSTOMIZING_ID);\r\n        Integer mandantId = (Integer) session.getAttribute(Constants.MANDANT_ID);\r\n        Integer naOpNuId = cService.getNaOpNuId(request, customizingId);\r\n        boolean isOperativerNutzen = cService.isOperativerNutzen(request);\r\n        // Alle zugewiesenen Nutzenkriterien zur gewï¿½hlten Kategorie holen\r\n        Nutzenkriterium n = new Nutzenkriterium();\r\n        n.setNutzenattraktivitaetOperativerNutzenId(naOpNuId);\r\n        n.setMandantId(mandantId);\r\n        List<Nutzenkriterium> kriterien = dao.getAssignments(n);\r\n        if (kriterien.size() == 0) {\r\n            return false;\r\n        }\r\n        // Formulardaten wieder abfï¿½llen (bei gescheiterter Validierung)\r\n        AutoGrowingList list = form.getNutzenkriteriumLine();\r\n        if (list != null) {\r\n            // Formulardaten zum Abgleich in eine HashMap stellen\r\n            Iterator it = list.iterator();\r\n            HashMap<Integer, String> formData = new HashMap<Integer, String>();\r\n            while (it.hasNext()) {\r\n                NutzenkriteriumLine nl = (NutzenkriteriumLine) it.next();\r\n                formData.put(nl.getNutzenkriteriumId(), nl.getFrage());\r\n            }\r\n            // Nutzennkriterium suchen\r\n            for (int i = 0; i < kriterien.size(); i++) {\r\n                Nutzenkriterium kriterium = (Nutzenkriterium) kriterien.get(i);\r\n                Integer nutzenkriteriumId = (Integer) kriterium.getNutzenkriteriumId();\r\n                if (formData.containsKey(nutzenkriteriumId)) {\r\n                    // Frage mit Formulardaten ersetzen\r\n                    String frage = formData.get(nutzenkriteriumId);\r\n                    // Fragen fï¿½r Projektbetroffene\r\n                    if (isOperativerNutzen) {\r\n                        logger.debug(\"Ersetze Frage in Datenbank: \" + kriterium.getFrageProjektbetroffene() + \" mit Frage aus Formular: \" + frage);\r\n                        kriterium.setFrageProjektbetroffene(frage);\r\n                    } else // Fragen fï¿½r Management\r\n                    {\r\n                        logger.debug(\"Ersetze Frage in Datenbank: \" + kriterium.getFrageManagement() + \" mit Frage aus Formular: \" + frage);\r\n                        kriterium.setFrageManagement(frage);\r\n                    }\r\n                    kriterien.set(i, kriterium);\r\n                }\r\n            }\r\n        }\r\n        // Operativer Nutzen -> Projektbetroffene\r\n        if (isOperativerNutzen) {\r\n            request.setAttribute(Constants.PROJEKTBETROFFENE, true);\r\n        }\r\n        request.setAttribute(Constants.NUTZENKRITERIEN, kriterien);\r\n        // Anzahl Kategorien holen\r\n        Kategorie k = new Kategorie();\r\n        k.setNutzenattraktivitaetOperativerNutzenId(naOpNuId);\r\n        k.setMandantId(mandantId);\r\n        List<Kategorie> kategorien = kService.getAssignments(k);\r\n        request.setAttribute(\"totalKategorien\", kategorien.size());\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Setzt die eingegebenen Daten zur Direkten Gewichtung aller\r\n     * gewï¿½hlten Nutzenkriterien in den Request, um diese anzeigen\r\n     * zu kï¿½nnen. Bei gescheiterter Validierung werden die Daten\r\n     * erneut angezeigt.\r\n     *\r\n     * @param request                   der HttpServletRequest\r\n     * @param form                      das Formular mit den Nutzenkriterien\r\n     */\r\n    public void populateDirekteGewichtung(HttpServletRequest request, FragenForm form) {\r\n        // Benï¿½tigte ids holen\r\n        HttpSession session = request.getSession();\r\n        Integer customizingId = (Integer) session.getAttribute(Constants.CUSTOMIZING_ID);\r\n        Integer mandantId = (Integer) session.getAttribute(Constants.MANDANT_ID);\r\n        Integer naOpNuId = cService.getNaOpNuId(request, customizingId);\r\n        // Alle zugewiesenen Nutzenkriterien zur gewï¿½hlten Kategorie holen\r\n        Nutzenkriterium n = new Nutzenkriterium();\r\n        n.setNutzenattraktivitaetOperativerNutzenId(naOpNuId);\r\n        n.setMandantId(mandantId);\r\n        List<Nutzenkriterium> kriterien = dao.getAssignments(n);\r\n        // Formulardaten wieder abfï¿½llen (bei gescheiterter Validierung)\r\n        AutoGrowingList list = form.getNutzenkriteriumLine();\r\n        if (list != null) {\r\n            // Formulardaten zum Abgleich in eine HashMap stellen\r\n            Iterator it = list.iterator();\r\n            HashMap<Integer, Double[]> formData = new HashMap<Integer, Double[]>();\r\n            while (it.hasNext()) {\r\n                NutzenkriteriumLine nl = (NutzenkriteriumLine) it.next();\r\n                Double kategorieGewichtung = 0.0;\r\n                Double gewichtung = 0.0;\r\n                try {\r\n                    kategorieGewichtung = new Double(nl.getKategorieGewichtung());\r\n                } catch (Exception e) {\r\n                }\r\n                try {\r\n                    gewichtung = new Double(nl.getGewichtung());\r\n                } catch (Exception e) {\r\n                }\r\n                Double[] gewichtungen = { gewichtung, kategorieGewichtung };\r\n                formData.put(nl.getNutzenkriteriumId(), gewichtungen);\r\n            }\r\n            // Nutzennkriterium suchen\r\n            for (int i = 0; i < kriterien.size(); i++) {\r\n                Nutzenkriterium kriterium = (Nutzenkriterium) kriterien.get(i);\r\n                Integer nutzenkriteriumId = (Integer) kriterium.getNutzenkriteriumId();\r\n                if (formData.containsKey(nutzenkriteriumId)) {\r\n                    // Gewichtung mit Formulardaten ersetzen\r\n                    Double[] gewichtungen = formData.get(nutzenkriteriumId);\r\n                    kriterium.setGewichtung(gewichtungen[0]);\r\n                    kriterium.setKategorieGewichtung(gewichtungen[1]);\r\n                    kriterien.set(i, kriterium);\r\n                }\r\n            }\r\n        }\r\n        request.setAttribute(Constants.NUTZENKRITERIEN, kriterien);\r\n    }\r\n\r\n    /**\r\n     * Speichert die Fragen zu den gewï¿½hlten Nutzenkriterien ab.\r\n     *\r\n     * @param request                   der HttpServletRequest\r\n     * @param form                      das Formular mit den Nutzenkriterien\r\n     * @param errors                    das ActionMessages Objekt zum Speichern\r\n     *                                  von Fehlermeldungen\r\n     * @return                          true bei Erfolg, sonst false\r\n     */\r\n    public boolean saveFragen(HttpServletRequest request, FragenForm form, ActionMessages errors) {\r\n        AutoGrowingList list = form.getNutzenkriteriumLine();\r\n        if (list == null) {\r\n            return false;\r\n        }\r\n        // Fragen ï¿½berprï¿½fen\r\n        Iterator it = list.iterator();\r\n        while (it.hasNext()) {\r\n            NutzenkriteriumLine nl = (NutzenkriteriumLine) it.next();\r\n            String frage = nl.getFrage();\r\n            if (frage == null || frage.length() == 0) {\r\n                errors.add(\"nutzenkriterium_\" + nl.getNutzenkriteriumId(), new ActionMessage(\"errors.required\", \"Frage\"));\r\n                return false;\r\n            }\r\n        }\r\n        // Benï¿½tigte ids holen\r\n        HttpSession session = request.getSession();\r\n        Integer customizingId = (Integer) session.getAttribute(Constants.CUSTOMIZING_ID);\r\n        Integer naOpNuId = cService.getNaOpNuId(request, customizingId);\r\n        // Fragen speichern\r\n        it = list.iterator();\r\n        while (it.hasNext()) {\r\n            NutzenkriteriumLine nl = (NutzenkriteriumLine) it.next();\r\n            Nutzenkriterium n = new Nutzenkriterium();\r\n            n.setNutzenkriteriumId(nl.getNutzenkriteriumId());\r\n            n.setNutzenattraktivitaetOperativerNutzenId(naOpNuId);\r\n            if (cService.isOperativerNutzen(request)) {\r\n                n.setFrageProjektbetroffene(nl.getFrage());\r\n            } else {\r\n                n.setFrageManagement(nl.getFrage());\r\n            }\r\n            logger.debug(\"nutzenkriteriumId: \" + n.getNutzenkriteriumId());\r\n            logger.debug(\"nutzenattraktivitaetId: \" + naOpNuId);\r\n            logger.debug(\"frage: \" + nl.getFrage());\r\n            dao.updateAssignment(n);\r\n        }\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Fï¿½gt ein neues Nutzenkriterium ein und wï¿½hlt dieses anschliessend\r\n     * automatisch aus.\r\n     *\r\n     * @param request                   der HttpServletRequest\r\n     * @param form                      das Formular mit dem neuen Nutzenkriterium\r\n     * @param errors                    das ActionMessages Objekt zum Speichern\r\n     *                                  von Fehlermeldungen\r\n     * @return                          true bei Erfolg, sonst false\r\n     */\r\n    public boolean add(HttpServletRequest request, DynaActionForm form, ActionMessages errors, ActionMessages messages) {\r\n        // Ids holen\r\n        HttpSession session = request.getSession();\r\n        Integer mandantId = (Integer) session.getAttribute(Constants.MANDANT_ID);\r\n        Integer customizingId = (Integer) session.getAttribute(Constants.CUSTOMIZING_ID);\r\n        // Formulardaten holen\r\n        String name = (String) form.get(\"name\");\r\n        Integer kategorieId = (Integer) form.get(Constants.KATEGORIE_ID);\r\n        logger.debug(\"name=\" + name);\r\n        logger.debug(\"kategorieId=\" + kategorieId);\r\n        // Formulardaten ï¿½berprï¿½fen\r\n        if (name == null || name.length() == 0) {\r\n            errors.add(\"name\", new ActionMessage(\"errors.required\", \"Name\"));\r\n            return false;\r\n        }\r\n        Nutzenkriterium n = new Nutzenkriterium();\r\n        n.setName(name);\r\n        n.setKategorieId(kategorieId);\r\n        n.setMandantId(mandantId);\r\n        // Auf duplikate prï¿½fen\r\n        if (dao.getByName(n) != null) {\r\n            messages.add(ActionMessages.GLOBAL_MESSAGE, new ActionMessage(\"errors.duplicate\", \"Nutzenkriterium\"));\r\n            return false;\r\n        }\r\n        // Nutzenkriterium einfï¿½gen\r\n        dao.insert(n);\r\n        // Nutzenkriterium setzen\r\n        Integer naOpNuId = cService.getNaOpNuId(request, customizingId);\r\n        n.setNutzenattraktivitaetOperativerNutzenId(naOpNuId);\r\n        dao.insertAssignment(n);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Speichert die Direkte Gewichtung von Nutzenkriterien\r\n     * der Nutzenattraktivitï¿½t bzw. des Operativen Nutzens.\r\n     *\r\n     * @param request                   der HttpServletRequest\r\n     * @param form                      das Formular mit den Nutzenkriterien\r\n     * @param errors                    das ActionMessages Objekt zum Speichern\r\n     *                                  von Fehlermeldungen\r\n     * @return                          true bei Erfolg, sonst false\r\n     */\r\n    public boolean saveDirekteGewichtung(HttpServletRequest request, FragenForm form, ActionMessages errors) {\r\n        // Formulardaten holen\r\n        AutoGrowingList list = form.getNutzenkriteriumLine();\r\n        if (list == null) {\r\n            return false;\r\n        }\r\n        // Gewichtungen ï¿½berprï¿½fen\r\n        Double gewichtung = 0.0;\r\n        Iterator it = list.iterator();\r\n        while (it.hasNext()) {\r\n            NutzenkriteriumLine nl = (NutzenkriteriumLine) it.next();\r\n            Integer nutzenkriteriumId = nl.getNutzenkriteriumId();\r\n            logger.debug(\"nutzenkrtieriumId=\" + nutzenkriteriumId);\r\n            String g = nl.getGewichtung();\r\n            logger.debug(\"Gewichtung: \" + g);\r\n            try {\r\n                gewichtung += new Double(g);\r\n            } catch (Exception e) {\r\n            }\r\n        }\r\n        logger.debug(\"Total gewichtungen: \" + gewichtung);\r\n        if (gewichtung < 99.999 || gewichtung > 100.0001) {\r\n            errors.add(ActionMessages.GLOBAL_MESSAGE, new ActionMessage(\"errors.gewichtung.failure\"));\r\n            return false;\r\n        }\r\n        /*\r\n    // Gewichtungen ï¿½berprï¿½fen\r\n    Iterator it = list.iterator();\r\n    ArrayList<Double> gewichtungsListe = new ArrayList<Double>(); \r\n    HashMap<Integer, ArrayList<Double>> gewichtungen = new HashMap<Integer, ArrayList<Double>>(); \r\n    Double kategorieGewichtung = 0.0;\r\n    boolean isFirst = true;\r\n    Integer tmpKategorieId = null;\r\n    while (it.hasNext()) {\r\n      NutzenkriteriumLine nl = (NutzenkriteriumLine) it.next();\r\n      Integer kategorieId = nl.getKategorieId();\r\n      Integer nutzenkriteriumId = nl.getNutzenkriteriumId();\r\n      logger.debug(\"kategorieId=\" + kategorieId);\r\n      logger.debug(\"nutzenkrtieriumId=\" + nutzenkriteriumId);\r\n      \r\n      // Gewichtung (muss pro Kategorie 100% ergeben)\r\n      String g = nl.getGewichtung();\r\n      logger.debug(\"Gewichtung: \" + g);\r\n      \r\n      \r\n      // Gewichtung fï¿½r die selbe Kategorie in eine Liste stellen\r\n      if (isFirst || kategorieId == null) {\r\n        isFirst = false;\r\n        tmpKategorieId = kategorieId;\r\n        try {\r\n          gewichtungsListe.add(new Double(g));\r\n        } catch (Exception e) {}\r\n      }\r\n      \r\n      // Nï¿½chste Kategorie \r\n      else {\r\n        gewichtungen.put(tmpKategorieId, gewichtungsListe);\r\n        gewichtungsListe = new ArrayList<Double>();\r\n        tmpKategorieId = kategorieId;\r\n        try {\r\n          gewichtungsListe.add(new Double(g));\r\n        } catch (Exception e) {}\r\n      }\r\n      \r\n      // kategorieGewichtung\r\n      String kg = nl.getKategorieGewichtung();\r\n      logger.debug(\"Gewichtung Kategorie: \" + kg);\r\n      try {\r\n        kategorieGewichtung += new Double(kg);\r\n      } catch (Exception e) {}\r\n    }\r\n    \r\n    it = gewichtungen.keySet().iterator();\r\n    while (it.hasNext()) {\r\n      Integer key = (Integer) it.next();\r\n      gewichtungsListe = gewichtungen.get(key);\r\n      Double gewichtung = 0.0;\r\n      for (Double d : gewichtungsListe) {\r\n        gewichtung += d;\r\n      }\r\n      \r\n      logger.debug(\"Total gewichtungen: \" + gewichtung);\r\n      if (gewichtung < 99.999 || gewichtung > 100) {\r\n        errors.add(ActionMessages.GLOBAL_MESSAGE,\r\n            new ActionMessage(\"errors.gewichtung.failure\"));\r\n        return false;\r\n      }\r\n    }\r\n    logger.debug(\"Total gewichtungen Kategorie: \" + kategorieGewichtung);\r\n    if (kategorieGewichtung < 99.999 || kategorieGewichtung > 100) {\r\n      errors.add(ActionMessages.GLOBAL_MESSAGE,\r\n          new ActionMessage(\"errors.gewichtung.failure\"));\r\n      return false;\r\n    }*/\r\n        // Benï¿½tigte ids holen\r\n        HttpSession session = request.getSession();\r\n        Integer customizingId = (Integer) session.getAttribute(Constants.CUSTOMIZING_ID);\r\n        Integer naOpNuId = cService.getNaOpNuId(request, customizingId);\r\n        // Allfï¿½llige indirekte Gewichtungen lï¿½schen\r\n        Auswahlfeld a = new Auswahlfeld();\r\n        a.setNutzenattraktivitaetOperativerNutzenId(naOpNuId);\r\n        aService.deleteGewichtungen(a);\r\n        // Gewichtung speichern\r\n        it = list.iterator();\r\n        while (it.hasNext()) {\r\n            NutzenkriteriumLine nl = (NutzenkriteriumLine) it.next();\r\n            Nutzenkriterium n = new Nutzenkriterium();\r\n            n.setNutzenkriteriumId(nl.getNutzenkriteriumId());\r\n            n.setNutzenattraktivitaetOperativerNutzenId(naOpNuId);\r\n            n.setGewichtung(new Double(nl.getGewichtung()));\r\n            dao.updateAssignmentGewichtung(n);\r\n            // Gewichtung der Kategorien speichern\r\n            Integer kategorieId = nl.getKategorieId();\r\n            if (kategorieId != null) {\r\n                Double g = null;\r\n                try {\r\n                    g = new Double(nl.getKategorieGewichtung());\r\n                } catch (Exception e) {\r\n                }\r\n                Kategorie k = new Kategorie();\r\n                k.setGewichtung(g);\r\n                k.setKategorieId(nl.getKategorieId());\r\n                k.setNutzenattraktivitaetOperativerNutzenId(naOpNuId);\r\n                kService.updateAssignment(k);\r\n            }\r\n        }\r\n        // Status setzen\r\n        boolean isNa = !cService.isOperativerNutzen(request);\r\n        if (isNa) {\r\n            logger.debug(\"GEWICHTUNGEN_NA=true\");\r\n            session.setAttribute(Constants.GEWICHTUNGEN_NA, true);\r\n        } else {\r\n            logger.debug(\"GEWICHTUNGEN_OP_NU=true\");\r\n            session.setAttribute(Constants.GEWICHTUNGEN_OP_NU, true);\r\n        }\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Prï¿½ft, ob eine Direkte Gewichtung vorliegt oder nicht.\r\n     *\r\n     * @param request                   der HttpServletRequest\r\n     * @return                          true bei Direkter Gewichtung, sonst false\r\n     */\r\n    public boolean direkteGewichtung(HttpServletRequest request) {\r\n        Integer typ = (Integer) request.getSession().getAttribute(Constants.GEWICHTUNGSTYP);\r\n        logger.debug(\"Direkte Gewichtung ausgewï¿½hlt\");\r\n        return typ == Constants.GEWICHTUNG_DIREKT;\r\n    }\r\n\r\n    /**\r\n     * Setzt den Status des Schritts \"Nutzenkriterien\", sowohl fï¿½r das\r\n     * Customizing Nutzenattraktiviï¿½t wie fï¿½r das Customizing Operativer Nutzen.\r\n     * Der Status zeigt in der Navigation an, ob dieser Schritt des Customizings\r\n     * bereits erfolgreich abgeschlossen wurde oder nicht.\r\n     *\r\n     * @param request                   der HttpServletRequest\r\n     * @param kategorien                eine Liste aller gewï¿½hlten Kategorien\r\n     * @param mandantId                 die Id des Mandanten\r\n     * @param naOpNuId                  die Id der Nutzenattraktivitï¿½t bzw.\r\n     *                                  des Operativen Nutzens\r\n     * @param isNa                      true fï¿½r Nutzenattraktivitï¿½t, sonst false\r\n     * @return                          Liste aller gewï¿½hlten Nutzenkriterien\r\n     */\r\n    public List<Nutzenkriterium> setStatus(HttpServletRequest request, List<Kategorie> kategorien, Integer mandantId, Integer naOpNuId, boolean isNa) {\r\n        boolean ok = true;\r\n        for (Kategorie k : kategorien) {\r\n            Nutzenkriterium nk = new Nutzenkriterium();\r\n            nk.setKategorieId(k.getKategorieId());\r\n            nk.setNutzenattraktivitaetOperativerNutzenId(naOpNuId);\r\n            List<Nutzenkriterium> nks = dao.getByNaOpNuAndKategorie(nk);\r\n            logger.debug(nks.size() + \" Nutzenkriterien in der Liste\");\r\n            if (nks == null || nks.size() == 0) {\r\n                ok = false;\r\n                break;\r\n            }\r\n        }\r\n        HttpSession session = request.getSession();\r\n        if (ok && isNa) {\r\n            session.setAttribute(Constants.NUTZENKRITERIEN_NA, true);\r\n            session.setAttribute(Constants.FRAGEN_NA, true);\r\n        } else if (ok) {\r\n            session.setAttribute(Constants.NUTZENKRITERIEN_OP_NU, true);\r\n            session.setAttribute(Constants.FRAGEN_OP_NU, true);\r\n        }\r\n        if (ok) {\r\n            Nutzenkriterium nk = new Nutzenkriterium();\r\n            nk.setMandantId(mandantId);\r\n            nk.setNutzenattraktivitaetOperativerNutzenId(naOpNuId);\r\n            return dao.getAssignments(nk);\r\n        } else if (!ok && isNa) {\r\n            session.removeAttribute(Constants.NUTZENKRITERIEN_NA);\r\n            session.removeAttribute(Constants.FRAGEN_NA);\r\n        } else {\r\n            session.removeAttribute(Constants.NUTZENKRITERIEN_OP_NU);\r\n            session.removeAttribute(Constants.FRAGEN_OP_NU);\r\n        }\r\n        return null;\r\n    }\r\n\r\n    /**\r\n     * Lï¿½scht die Fragebogen-Gewichtung des aktuellen Customizings.\r\n     *\r\n     * @param request                   der HttpServletRequest\r\n     */\r\n    public void deleteFragebogenGewichtung(HttpServletRequest request) {\r\n        // Benï¿½tigte ids holen\r\n        HttpSession session = request.getSession();\r\n        Integer customizingId = (Integer) session.getAttribute(Constants.CUSTOMIZING_ID);\r\n        Integer naOpNuId = cService.getNaOpNuId(request, customizingId);\r\n        // allfï¿½llige Gewichtung ï¿½ber Fragebogen lï¿½schen\r\n        Auswahlfeld a = new Auswahlfeld();\r\n        a = aService.setType(a, Constants.GEWICHTUNG);\r\n        a.setNutzenattraktivitaetOperativerNutzenId(naOpNuId);\r\n        logger.debug(\"Fragebogen-Gewichtung lï¿½schen:\");\r\n        logger.debug(\"nutzenattraktivitaetOperativerNutzenId=\" + a.getNutzenattraktivitaetOperativerNutzenId());\r\n        aService.deleteGewichtungen(a);\r\n    }\r\n\r\n    /**\r\n     * Selektiert die zuvor gewï¿½hlte Anzahl von Abstufungen fï¿½r die\r\n     * Stufenbeschriebe und die Gewichtung.\r\n     * Stellt den gewï¿½hlten Gewichtungstyp in den Request. Dies dient\r\n     * zur Vorauswahl der richtigen Checkbox im Formular \"Gewichtung\".\r\n     *\r\n     * @param request                   der HttpServletRequest\r\n     * @param path                      der Pfad der Action\r\n     */\r\n    public void preselect(HttpServletRequest request, String path) {\r\n        // Benï¿½tigte ids holen\r\n        HttpSession session = request.getSession();\r\n        Integer customizingId = (Integer) session.getAttribute(Constants.CUSTOMIZING_ID);\r\n        Integer naOpNuId = cService.getNaOpNuId(request, customizingId);\r\n        logger.debug(\"naOpNuId=\" + naOpNuId);\r\n        logger.debug(\"Pfad: \" + path);\r\n        // Abstufungstatus holen\r\n        List<Auswahlfeld> afs = new ArrayList<Auswahlfeld>();\r\n        if (path.contains(Constants.ABSTUFUNGEN_ACTION)) {\r\n            afs = aService.getAnzahlAbstufungen(naOpNuId);\r\n        } else // Gewichtungsstatus holen\r\n        {\r\n            afs = aService.getAnzahlGewichtungen(naOpNuId);\r\n        }\r\n        logger.debug(afs.size() + \" Abstufungen in der Liste\");\r\n        request.setAttribute(Constants.ABSTUFUNGEN, afs.size());\r\n        // Gewichtung bestimmen\r\n        List<Auswahlfeld> gewichtungen = aService.getGewichtungStatus(naOpNuId);\r\n        if (gewichtungen.size() > 0) {\r\n            request.setAttribute(Constants.GEWICHTUNG_NOT_DIRECT, true);\r\n        } else {\r\n            request.removeAttribute(Constants.GEWICHTUNG_NOT_DIRECT);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Kopiert alle Zuweisungen von Nutzenkriterien von einer Nutzenattraktivitï¿½t\r\n     * bzw. von einem Operativen Nutzen zu einer neuen Id. Wird zum Kopieren\r\n     * von Customizings verwendet.\r\n     *\r\n     * @param mandantId                 die Id des Mandanten\r\n     * @param naOpNuId                  die Id der Nutzenattraktivitï¿½t bzw. des\r\n     *                                  Operativen Nutzens, welche die zu kopierenden\r\n     *                                  Zuweisungen enthï¿½lt\r\n     * @param newNaOpNuId               die neue Id fï¿½r die kopierten Zuweisungen\r\n     */\r\n    public void copy(Integer mandantId, Integer naOpNuId, Integer newNaOpNuId) {\r\n        Nutzenkriterium n = new Nutzenkriterium();\r\n        n.setNutzenattraktivitaetOperativerNutzenId(naOpNuId);\r\n        n.setMandantId(mandantId);\r\n        List<Nutzenkriterium> kriterien = dao.getAssignments(n);\r\n        for (Nutzenkriterium kriterium : kriterien) {\r\n            kriterium.setNutzenattraktivitaetOperativerNutzenId(newNaOpNuId);\r\n            dao.insertAssignment(kriterium);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * ï¿½berprï¿½ft, ob ein Customizing komplett ist.\r\n     *\r\n     * @param request                   der HttpServletRequest\r\n     * @return                          true bei komplettem Customizing, sonst false\r\n     */\r\n    public boolean customizingComplete(HttpServletRequest request) {\r\n        return customizingService.complete(request);\r\n    }\r\n\r\n    /**\r\n     * Erstellt ein Objekt vom Typ Nutzenkriterium mit der id des Mandanten\r\n     * und, falls angegeben, mit abgefï¿½llten Formulardaten\r\n     *\r\n     * @param request                   der HttpServletRequest\r\n     * @param form                      das DynaActionForm\r\n     * @return                          Nutzenkriterium mit mandantId\r\n     */\r\n    private Nutzenkriterium createNutzenkriterium(HttpServletRequest request, DynaActionForm form) {\r\n        Integer mandantId = (Integer) request.getSession().getAttribute(Constants.MANDANT_ID);\r\n        Nutzenkriterium n = new Nutzenkriterium();\r\n        n.setMandantId(mandantId);\r\n        if (form != null) {\r\n            Integer id = (Integer) form.get(Constants.NUTZENKRITERIUM_ID);\r\n            String name = (String) form.get(Constants.NAME);\r\n            String beschreibung = (String) form.get(\"beschreibung\");\r\n            String frageManagementDefault = (String) form.get(\"frageManagementDefault\");\r\n            String frageProjektbetroffeneDefault = (String) form.get(\"frageProjektbetroffeneDefault\");\r\n            Integer kategorieId = (Integer) form.get(Constants.KATEGORIE_ID);\r\n            n.setNutzenkriteriumId(id);\r\n            n.setName(name);\r\n            n.setBeschreibung(beschreibung);\r\n            n.setFrageManagementDefault(frageManagementDefault);\r\n            n.setFrageProjektbetroffeneDefault(frageProjektbetroffeneDefault);\r\n            n.setKategorieId(kategorieId);\r\n        }\r\n        return n;\r\n    }\r\n\r\n    /**\r\n     * ï¿½berprï¿½ft, ob die Id eines Nutzenkriteriums Ziels im Request ist\r\n     * (update) oder nicht (neu).\r\n     *\r\n     * @param request                   der HttpServletRequest\r\n     * @param form                      das DynaActionForm\r\n     * @return                          true, wenn das angegebene Nutzenkriterium\r\n     *                                  besteht, sonst false.\r\n     */\r\n    private boolean isUpdate(HttpServletRequest request, DynaActionForm form) {\r\n        Integer id = (Integer) form.get(Constants.NUTZENKRITERIUM_ID);\r\n        if (id == null || id == 0) {\r\n            return false;\r\n        }\r\n        return true;\r\n    }\r\n}\r\n",
		"id": "EvoSuiteBenchmark/46_nutzenportfolio/src/main/java/ch/bfh/egov/nutzenportfolio/service/nutzenkriterium/NutzenkriteriumDaoServiceTest3.java",
		"test_prompt": "// NutzenkriteriumDaoServiceTest3.java\npackage ch.bfh.egov.nutzenportfolio.service.nutzenkriterium;\n\nimport java.util.ArrayList;\nimport java.util.Collections;\nimport java.util.Comparator;\nimport java.util.HashMap;\nimport java.util.Iterator;\nimport java.util.List;\nimport javax.servlet.http.HttpServletRequest;\nimport javax.servlet.http.HttpSession;\nimport org.apache.commons.logging.Log;\nimport org.apache.commons.logging.LogFactory;\nimport org.apache.struts.action.ActionMessage;\nimport org.apache.struts.action.ActionMessages;\nimport org.apache.struts.action.DynaActionForm;\nimport ch.bfh.egov.nutzenportfolio.Constants;\nimport ch.bfh.egov.nutzenportfolio.common.AutoGrowingList;\nimport ch.bfh.egov.nutzenportfolio.common.NutzenkriteriumLine;\nimport ch.bfh.egov.nutzenportfolio.form.FragenForm;\nimport ch.bfh.egov.nutzenportfolio.persistence.nutzenkriterium.NutzenkriteriumDao;\nimport ch.bfh.egov.nutzenportfolio.service.auswahlfeld.AuswahlfeldService;\nimport ch.bfh.egov.nutzenportfolio.service.common.CommonService;\nimport ch.bfh.egov.nutzenportfolio.service.customizing.CustomizingService;\nimport ch.bfh.egov.nutzenportfolio.service.kategorie.KategorieService;\nimport ch.bfh.egov.nutzenportfolio.tos.Auswahlfeld;\nimport ch.bfh.egov.nutzenportfolio.tos.Customizing;\nimport ch.bfh.egov.nutzenportfolio.tos.Kategorie;\nimport ch.bfh.egov.nutzenportfolio.tos.NaOpNu;\nimport ch.bfh.egov.nutzenportfolio.tos.Nutzenkriterium;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link NutzenkriteriumDaoService}.\n* It contains ten unit test cases for the {@link NutzenkriteriumDaoService#saveFragen(HttpServletRequest, FragenForm, ActionMessages)} method.\n*/\nclass NutzenkriteriumDaoServiceTest3 {"
	},
	{
		"original_code": "// NutzenkriteriumDaoService.java\n/**\r\n * Nutzenportfolio\r\n * Copyright (C) 2006 Kompetenzzentrum E-Business, Simon Bergamin\r\n *\r\n * This program is free software; you can redistribute it and/or\r\n * modify it under the terms of the GNU General Public License\r\n * as published by the Free Software Foundation; either version 2\r\n * of the License, or (at your option) any later version.\r\n *\r\n * This program is distributed in the hope that it will be useful,\r\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n * GNU General Public License for more details.\r\n *\r\n * You should have received a copy of the GNU General Public License\r\n * along with this program; if not, write to the Free Software\r\n * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\r\n */\r\npackage ch.bfh.egov.nutzenportfolio.service.nutzenkriterium;\r\n\r\nimport java.util.ArrayList;\r\nimport java.util.Collections;\r\nimport java.util.Comparator;\r\nimport java.util.HashMap;\r\nimport java.util.Iterator;\r\nimport java.util.List;\r\nimport javax.servlet.http.HttpServletRequest;\r\nimport javax.servlet.http.HttpSession;\r\nimport org.apache.commons.logging.Log;\r\nimport org.apache.commons.logging.LogFactory;\r\nimport org.apache.struts.action.ActionMessage;\r\nimport org.apache.struts.action.ActionMessages;\r\nimport org.apache.struts.action.DynaActionForm;\r\nimport ch.bfh.egov.nutzenportfolio.Constants;\r\nimport ch.bfh.egov.nutzenportfolio.common.AutoGrowingList;\r\nimport ch.bfh.egov.nutzenportfolio.common.NutzenkriteriumLine;\r\nimport ch.bfh.egov.nutzenportfolio.form.FragenForm;\r\nimport ch.bfh.egov.nutzenportfolio.persistence.nutzenkriterium.NutzenkriteriumDao;\r\nimport ch.bfh.egov.nutzenportfolio.service.auswahlfeld.AuswahlfeldService;\r\nimport ch.bfh.egov.nutzenportfolio.service.common.CommonService;\r\nimport ch.bfh.egov.nutzenportfolio.service.customizing.CustomizingService;\r\nimport ch.bfh.egov.nutzenportfolio.service.kategorie.KategorieService;\r\nimport ch.bfh.egov.nutzenportfolio.tos.Auswahlfeld;\r\nimport ch.bfh.egov.nutzenportfolio.tos.Customizing;\r\nimport ch.bfh.egov.nutzenportfolio.tos.Kategorie;\r\nimport ch.bfh.egov.nutzenportfolio.tos.NaOpNu;\r\nimport ch.bfh.egov.nutzenportfolio.tos.Nutzenkriterium;\r\n\r\n/**\r\n * Implementierende Service-Klasse fï¿½r Nutzenkriterien.\r\n *\r\n * @author Kompetenzzentrum E-Business, Simon Bergamin\r\n */\r\npublic class NutzenkriteriumDaoService implements NutzenkriteriumService {\r\n\r\n    private NutzenkriteriumDao dao;\r\n\r\n    private CommonService cService;\r\n\r\n    private KategorieService kService;\r\n\r\n    private AuswahlfeldService aService;\r\n\r\n    private CustomizingService customizingService;\r\n\r\n    private Log logger = LogFactory.getLog(this.getClass());\r\n\r\n    /**\r\n     * Konstruktor. ï¿½bergabe des DataAcessObject-Interfaces fï¿½r Nutzenkriterien.\r\n     *\r\n     * @param dao                               Nutzenkriterien DataAcessObject-Interface\r\n     */\r\n    public NutzenkriteriumDaoService(NutzenkriteriumDao dao) {\r\n        this.dao = dao;\r\n    }\r\n\r\n    /**\r\n     * @see ch.bfh.egov.nutzenportfolio.persistence.nutzenkriterium.NutzenkriteriumIbatisDao#getAssignmentById(Nutzenkriterium)\r\n     */\r\n    public Nutzenkriterium getAssignmentById(Nutzenkriterium kriterium) {\r\n        return dao.getAssignmentById(kriterium);\r\n    }\r\n\r\n    /**\r\n     * @see ch.bfh.egov.nutzenportfolio.persistence.nutzenkriterium.NutzenkriteriumIbatisDao#getByProjektId(NaOpNu)\r\n     */\r\n    public List<Nutzenkriterium> getByProjektId(NaOpNu naOpNu) {\r\n        return dao.getByProjektId(naOpNu);\r\n    }\r\n\r\n    /**\r\n     * @see ch.bfh.egov.nutzenportfolio.persistence.nutzenkriterium.NutzenkriteriumIbatisDao#getAssignments(Nutzenkriterium)\r\n     */\r\n    public List<Nutzenkriterium> getAssignments(Nutzenkriterium kriterium) {\r\n        return dao.getAssignments(kriterium);\r\n    }\r\n\r\n    /**\r\n     * @see ch.bfh.egov.nutzenportfolio.persistence.nutzenkriterium.NutzenkriteriumIbatisDao#update(Nutzenkriterium)\r\n     */\r\n    public void update(Nutzenkriterium kriterium) {\r\n        dao.updateAssignment(kriterium);\r\n    }\r\n\r\n    /**\r\n     * @see ch.bfh.egov.nutzenportfolio.persistence.nutzenkriterium.NutzenkriteriumIbatisDao#unsetAssignmentGewichtung(Integer)\r\n     */\r\n    public void unsetAssignmentGewichtung(Integer naOpNuId) {\r\n        dao.unsetAssignmentGewichtung(naOpNuId);\r\n    }\r\n\r\n    /**\r\n     * @see ch.bfh.egov.nutzenportfolio.persistence.nutzenkriterium.NutzenkriteriumIbatisDao#deleteAssignments(Integer)\r\n     */\r\n    public void deleteAssignments(Integer naOpNuId) {\r\n        dao.deleteAssignments(naOpNuId);\r\n    }\r\n\r\n    /**\r\n     * Initialisierung dieses Service-Objekts durch ï¿½bergabe anderer,\r\n     * benï¿½tigter Service-Objekte.\r\n     *\r\n     * @param aService                   AuswahlFeldService Objekt\r\n     * @param cService                   CommonService Objekt\r\n     * @param kService                   KategorieService Objekt\r\n     * @param customizingService         CustomizingService Objekt\r\n     */\r\n    public void init(AuswahlfeldService aService, CommonService cService, KategorieService kService, CustomizingService customizingService) {\r\n        this.aService = aService;\r\n        this.cService = cService;\r\n        this.kService = kService;\r\n        this.customizingService = customizingService;\r\n    }\r\n\r\n    /**\r\n     * Stellt eine Liste aller Nutzenkriterien in den request.\r\n     *\r\n     * @param request                   der HttpServletRequest\r\n     */\r\n    public void list(HttpServletRequest request) {\r\n        Integer mandantId = (Integer) request.getSession().getAttribute(Constants.MANDANT_ID);\r\n        List<Nutzenkriterium> kriterien = dao.getAll(mandantId);\r\n        // Sortieren der Nutzenkriterien nach Namen\r\n        Collections.<Nutzenkriterium>sort(kriterien, new Comparator<Nutzenkriterium>() {\r\n\r\n            public int compare(Nutzenkriterium a, Nutzenkriterium b) {\r\n                String name1 = a.getName().toLowerCase();\r\n                String name2 = b.getName().toLowerCase();\r\n                return name1.compareTo(name2);\r\n            }\r\n        });\r\n        request.setAttribute(Constants.NUTZENKRITERIEN, kriterien);\r\n    }\r\n\r\n    /**\r\n     * Stellt eine Liste von Nutzenkriterien sowie deren zugehï¿½rigen\r\n     * Kategorien in den Request. Pro Request bzw. pro Seitenaufruf\r\n     * wird eine Kategorie mit den jeweiligen Nutzenkriterien angezeigt.\r\n     * Mit einem Klick auf \"weiter\" gelangt der Benutzer zur nï¿½chsten Seite\r\n     * bzw. der nï¿½chsten gewï¿½hlten Kategorie.\r\n     *\r\n     * @param request                   der HttpServletRequest\r\n     * @return                          true bei Erfolg, sonst false\r\n     */\r\n    public boolean populate(HttpServletRequest request) {\r\n        // Benï¿½tigte ids holen\r\n        HttpSession session = request.getSession();\r\n        Integer mandantId = (Integer) session.getAttribute(Constants.MANDANT_ID);\r\n        Integer customizingId = (Integer) session.getAttribute(Constants.CUSTOMIZING_ID);\r\n        Integer naOpNuId = cService.getNaOpNuId(request, customizingId);\r\n        logger.debug(\"naOpNuId=\" + naOpNuId);\r\n        // Zugewiesene Kategorien holen\r\n        Kategorie k = new Kategorie();\r\n        k.setNutzenattraktivitaetOperativerNutzenId(naOpNuId);\r\n        k.setMandantId(mandantId);\r\n        List<Kategorie> kategorien = kService.getAssignments(k);\r\n        Integer kategorieId = null;\r\n        Integer step = null;\r\n        if (kategorien.size() == 0) {\r\n            return false;\r\n        }\r\n        // 1 Schritt pro Kategorie. Parameter ï¿½berprï¿½fen.\r\n        String stepStr = request.getParameter(Constants.STEP);\r\n        String next = request.getParameter(Constants.NEXT);\r\n        logger.debug(\"Angegebener step: \" + stepStr);\r\n        try {\r\n            step = new Integer(stepStr);\r\n        } catch (NumberFormatException nfex) {\r\n            step = 1;\r\n        }\r\n        // Denselben Schritt wiederholen, wenn nicht \"weiter\" geklickt wurde\r\n        if (next == null && step > 1) {\r\n            --step;\r\n        }\r\n        // Kategorien in Array stellen\r\n        Integer[] kategorienIdArr = new Integer[kategorien.size()];\r\n        String[] kategorienNameArr = new String[kategorien.size()];\r\n        int i = 0;\r\n        for (Kategorie kategorie : kategorien) {\r\n            kategorienIdArr[i] = kategorie.getKategorieId();\r\n            kategorienNameArr[i++] = kategorie.getName();\r\n            logger.debug(\"Kategorie: id=\" + kategorienIdArr[i - 1] + \", name=\" + kategorienNameArr[i - 1]);\r\n        }\r\n        // Auf inkorrekten step Parameter prï¿½fen\r\n        if ((step - 1) >= kategorienIdArr.length) {\r\n            logger.warn(\"Nicht verfï¿½gbarer Schritt ausgewï¿½hlt!\");\r\n            step = 1;\r\n        }\r\n        // Auf letzten Schritt prï¿½fen\r\n        if (step == kategorienIdArr.length) {\r\n            request.setAttribute(Constants.LAST_STEP, true);\r\n        }\r\n        // Id der Kategorie anhand des step Parameters holen\r\n        kategorieId = kategorienIdArr[step - 1];\r\n        logger.debug(\"Gewaehlte Kategorie: \" + kategorieId);\r\n        request.setAttribute(Constants.KATEGORIE_ID, kategorieId);\r\n        request.setAttribute(\"kategorie\", kategorienNameArr[step - 1]);\r\n        request.setAttribute(Constants.STEP, step + 1);\r\n        // Alle Nutzenkriterien zur gewï¿½hlten Kategorie holen\r\n        Nutzenkriterium n = new Nutzenkriterium();\r\n        n.setNutzenattraktivitaetOperativerNutzenId(naOpNuId);\r\n        n.setKategorieId(kategorieId);\r\n        n.setMandantId(mandantId);\r\n        // Nutzenkriterien aussortieren, die einem anderen Customizing zugeordnet sind\r\n        List<Nutzenkriterium> nutzenkriterien = dao.getByKategorie(n);\r\n        Iterator it = nutzenkriterien.iterator();\r\n        HashMap<String, Nutzenkriterium> map = new HashMap<String, Nutzenkriterium>();\r\n        while (it.hasNext()) {\r\n            Nutzenkriterium nk = (Nutzenkriterium) it.next();\r\n            String name = nk.getName();\r\n            boolean contains = map.containsKey(name);\r\n            Integer nuNaOpNuId = nk.getNutzenattraktivitaetOperativerNutzenId();\r\n            // HashMap abfï¿½llen um allfï¿½llige doppelte Nutzenkriterien auszusortieren\r\n            // (ist der Fall bei Zuweisungen zu anderen Customizings)\r\n            if (!contains || nuNaOpNuId != null && contains && nuNaOpNuId.equals(naOpNuId)) {\r\n                map.put(name, nk);\r\n            }\r\n        }\r\n        nutzenkriterien = new ArrayList<Nutzenkriterium>(map.values());\r\n        request.setAttribute(Constants.NUTZENKRITERIEN, nutzenkriterien);\r\n        // Operativer Nutzen -> Projektbetroffene\r\n        if (cService.isOperativerNutzen(request)) {\r\n            request.setAttribute(Constants.PROJEKTBETROFFENE, true);\r\n        }\r\n        Integer levels = (Integer) request.getSession().getAttribute(Constants.ABSTUFUNGEN);\r\n        request.setAttribute(\"totalKategorien\", ((levels != null) ? kategorien.size() : 0));\r\n        // Alle zugewiesenen Nutzenkriterien zur gewï¿½hlten Kategorie holen\r\n        List nAssigned = dao.getAssignments(n);\r\n        request.setAttribute(Constants.NA_OP_NU_ID, naOpNuId);\r\n        request.setAttribute(Constants.NUTZENKRITERIEN_ASSIGNED, nAssigned);\r\n        boolean isNa = !cService.isOperativerNutzen(request);\r\n        setStatus(request, kategorien, mandantId, naOpNuId, isNa);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Fï¿½llt ein Formular mit bestehenden Daten eines Nutzenkriteriums ab,\r\n     * falls eine entsprechende id angegeben wurde.\r\n     *\r\n     * @param request                   der HttpServletRequest\r\n     * @param form                      das DynaActionForm\r\n     */\r\n    public void edit(HttpServletRequest request, DynaActionForm form) {\r\n        if (isUpdate(request, form)) {\r\n            Nutzenkriterium n = createNutzenkriterium(request, form);\r\n            Integer mandantId = n.getMandantId();\r\n            n = dao.getById(n);\r\n            form.set(\"name\", n.getName());\r\n            form.set(\"beschreibung\", n.getBeschreibung());\r\n            form.set(\"frageManagementDefault\", n.getFrageManagementDefault());\r\n            form.set(\"frageProjektbetroffeneDefault\", n.getFrageProjektbetroffeneDefault());\r\n            form.set(Constants.KATEGORIE_ID, n.getKategorieId());\r\n            // Kategorien in die Session stellen\r\n            logger.debug(\"Kategorien holen fï¿½r mandantId=\" + mandantId);\r\n            List<Kategorie> kategorien = kService.getAll(mandantId);\r\n            request.getSession().setAttribute(Constants.KATEGORIEN, kategorien);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Fï¿½hrt ein update eines bestenenden Nutzenkriteriums anhand von\r\n     * Formulardaten durch.\r\n     *\r\n     * @param request                   der HttpServletRequest\r\n     * @param form                      das DynaActionForm\r\n     */\r\n    public void update(HttpServletRequest request, DynaActionForm form) {\r\n        logger.debug(\"Update Nutzenkriterium\");\r\n        if (isUpdate(request, form)) {\r\n            logger.debug(\"Update durchfï¿½hren\");\r\n            Nutzenkriterium n = createNutzenkriterium(request, form);\r\n            dao.update(n);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Prï¿½ft, ob ein Nutzenkriterium existiert und gibt es zurï¿½ck.\r\n     *\r\n     * @param request                   der HttpServletRequest\r\n     * @param form                      das DynaActionForm\r\n     * @return                          das Nutzenkriterium\r\n     */\r\n    public Nutzenkriterium getNutzenkriterium(HttpServletRequest request, DynaActionForm form) {\r\n        Nutzenkriterium n = createNutzenkriterium(request, form);\r\n        return dao.getById(n);\r\n    }\r\n\r\n    /**\r\n     * Abfrage fï¿½r das Lï¿½schen von einem Nutzenkriterium.\r\n     *\r\n     * @param request                   der HttpServletRequest\r\n     * @param kriterium                 das zu lï¿½schende Nutzenkriterium\r\n     * @param messages                  das ActionMessages Objekt\r\n     */\r\n    public void deleteQuestion(HttpServletRequest request, Nutzenkriterium kriterium, ActionMessages messages) {\r\n        // Verknï¿½pfungen prï¿½fen\r\n        linkedTo(request, kriterium);\r\n        // Bestï¿½tigungsnachricht ausgeben\r\n        messages.add(ActionMessages.GLOBAL_MESSAGE, new ActionMessage(\"messages.question.delete\", kriterium.getName()));\r\n        // Actions zum Lï¿½schen und Abbrechen definieren\r\n        request.setAttribute(Constants.ACTION, Constants.VERWALTUNG_NUTZENKRITERIEN_ACTION);\r\n        request.setAttribute(Constants.DISPATCH_YES, Constants.DELETE);\r\n        request.setAttribute(Constants.DISPATCH_NO, Constants.LIST);\r\n        request.setAttribute(Constants.ID_NAME, Constants.NUTZENKRITERIUM_ID);\r\n        request.setAttribute(Constants.ID_VALUE, kriterium.getNutzenkriteriumId());\r\n    }\r\n\r\n    /**\r\n     * Setzt die Verknï¿½pfungen zu diesem Nutzenkriterium in den Request.\r\n     * Ein Nutzenkriterium kann mit Customizings verknï¿½pft sein. Diese\r\n     * Methode wird bei der Lï¿½schabfrage verwendet.\r\n     *\r\n     * @param request                   der HttpServletRequest\r\n     * @param kritierium                das zu lï¿½schende Nutzenkriterium\r\n     */\r\n    public void linkedTo(HttpServletRequest request, Nutzenkriterium kritierium) {\r\n        HashMap<String, List> map = new HashMap<String, List>();\r\n        // Customizings suchen, die dieses Nutzenkriterium benï¿½tigen\r\n        List<Customizing> customizings = dao.getLinkedCustomizings(kritierium);\r\n        if (customizings.size() > 0) {\r\n            for (Customizing c : customizings) {\r\n                if (c.getStatus()) {\r\n                    request.setAttribute(\"active\", true);\r\n                    break;\r\n                }\r\n            }\r\n            map.put(\"Customizings\", customizings);\r\n        }\r\n        request.setAttribute(\"linked\", map);\r\n    }\r\n\r\n    /**\r\n     * Lï¿½scht ein Nutzenkriterium. Falls es mit inaktiven Customizings\r\n     * verknï¿½ft ist, werden diese ebenfalls gelï¿½scht. Wenn aktive Customizings\r\n     * verknï¿½ft sind, wird das Nutzenkriterium nicht gelï¿½scht.\r\n     *\r\n     * @param request                   der HttpServletRequest\r\n     * @param kriterium                 das zu lï¿½schende Nutzenkriterium\r\n     */\r\n    public void delete(HttpServletRequest request, Nutzenkriterium kriterium) {\r\n        // Verknï¿½pfungen prï¿½fen\r\n        linkedTo(request, kriterium);\r\n        Boolean active = (Boolean) request.getAttribute(\"active\");\r\n        // Aktives Customizing verknï¿½ft. Dies sollte nicht passieren ausser bei\r\n        // einem direkten URL-Aufruf ...\r\n        if (active != null && active) {\r\n            logger.debug(\"Aktives Customizing verknï¿½pft, Nutzenkriterium wird nicht gelï¿½scht\");\r\n            return;\r\n        }\r\n        // Customizings lï¿½schen\r\n        List<Customizing> customizings = dao.getLinkedCustomizings(kriterium);\r\n        for (Customizing c : customizings) {\r\n            logger.debug(\"Lï¿½sche Customizing \" + c.getCustomizingId());\r\n            customizingService.cascadeDelete(request, c);\r\n        }\r\n        // Lï¿½schen des Nutzenkriteriums\r\n        dao.delete(kriterium);\r\n    }\r\n\r\n    /**\r\n     * Weist dem aktuellen Customizing das gewï¿½hlte Nutzenkriterium zu.\r\n     * Wenn das Nutzenkriterium eine Default-Frage besitzt, wird diese\r\n     * zur spï¿½teren Verwendung in der Verknï¿½pfungstabelle gespeichert.\r\n     *\r\n     * @param request                   der HttpServletRequest\r\n     * @param form                      das Formular mit dem gewï¿½hlten Nutzenkriterium\r\n     */\r\n    public void set(HttpServletRequest request, DynaActionForm form) {\r\n        // Benï¿½tigte ids holen\r\n        HttpSession session = request.getSession();\r\n        Integer customizingId = (Integer) session.getAttribute(Constants.CUSTOMIZING_ID);\r\n        Integer mandantId = (Integer) session.getAttribute(Constants.MANDANT_ID);\r\n        Integer naOpNuId = cService.getNaOpNuId(request, customizingId);\r\n        Integer nutzenkriteriumId = (Integer) form.get(Constants.NUTZENKRITERIUM_ID);\r\n        if (nutzenkriteriumId == null) {\r\n            return;\r\n        }\r\n        // Nutzenkriterium zuweisen\r\n        logger.debug(\"Nutzenkriterium zuweisen: \" + nutzenkriteriumId);\r\n        Nutzenkriterium n = new Nutzenkriterium();\r\n        n.setNutzenkriteriumId(nutzenkriteriumId);\r\n        n.setMandantId(mandantId);\r\n        n.setNutzenattraktivitaetOperativerNutzenId(naOpNuId);\r\n        // Default fragen holen und setzen\r\n        Nutzenkriterium fragen = dao.getDefaultFragen(n);\r\n        if (cService.isOperativerNutzen(request)) {\r\n            n.setFrageProjektbetroffene(fragen.getFrageProjektbetroffeneDefault());\r\n        } else {\r\n            n.setFrageManagement(fragen.getFrageManagementDefault());\r\n        }\r\n        dao.insertAssignment(n);\r\n    }\r\n\r\n    /**\r\n     * ï¿½berprï¿½ft, ob das aktuelle Nutzenkriterium zum letzten\r\n     * Schritt bzw. zur letzten gewï¿½hlten Kategorie gehï¿½rt. Wenn\r\n     * ja, kann zur nï¿½chsten Action gesprungen werden.\r\n     *\r\n     * @param request                   der HttpServletRequest\r\n     * @return                          true beim letzten Schritt, sonst false\r\n     */\r\n    public boolean next(HttpServletRequest request) {\r\n        // Nï¿½chste Action?\r\n        String last = request.getParameter(Constants.LAST_STEP);\r\n        if (last != null && last.equals(\"true\")) {\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    /**\r\n     * Entfernt die Zuweisung des gewï¿½hlten Nutzenkriteriums zum\r\n     * aktuellen Customizing.\r\n     *\r\n     * @param request                   der HttpServletRequest\r\n     * @param form                      das Formular mit dem Nutzenkriterium\r\n     */\r\n    public void remove(HttpServletRequest request, DynaActionForm form) {\r\n        // Nutzenkriterium anhand der id holen\r\n        HttpSession session = request.getSession();\r\n        Integer mandantId = (Integer) session.getAttribute(Constants.MANDANT_ID);\r\n        Integer nutzenkriteriumId = (Integer) form.get(Constants.NUTZENKRITERIUM_ID);\r\n        Integer naOpNuId = (Integer) form.get(Constants.NA_OP_NU_ID);\r\n        Nutzenkriterium n = new Nutzenkriterium();\r\n        n.setNutzenkriteriumId(nutzenkriteriumId);\r\n        n.setNutzenattraktivitaetOperativerNutzenId(naOpNuId);\r\n        n.setMandantId(mandantId);\r\n        n = dao.getAssignmentById(n);\r\n        // Zuweisung lï¿½schen\r\n        if (n != null) {\r\n            logger.debug(\"Zuweisung nutzenkriteriumId=\" + nutzenkriteriumId + \", nutzenattraktivitaetOperativerNutzenId=\" + n.getNutzenattraktivitaetOperativerNutzenId() + \" wird gelï¿½scht.\");\r\n            dao.deleteAssignment(n);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Setzt die zugehï¿½rigen Fragen von Nutzenkriterien zur Anzeige\r\n     * in den Request.\r\n     *\r\n     * @param request                   der HttpServletRequest\r\n     * @param form                      das Formular mit den Nutzenkriterien\r\n     * @return                          true bei Erfolg, sonst false\r\n     */\r\n    public boolean populateFragen(HttpServletRequest request, FragenForm form) {\r\n        // Benï¿½tigte ids holen\r\n        HttpSession session = request.getSession();\r\n        Integer customizingId = (Integer) session.getAttribute(Constants.CUSTOMIZING_ID);\r\n        Integer mandantId = (Integer) session.getAttribute(Constants.MANDANT_ID);\r\n        Integer naOpNuId = cService.getNaOpNuId(request, customizingId);\r\n        boolean isOperativerNutzen = cService.isOperativerNutzen(request);\r\n        // Alle zugewiesenen Nutzenkriterien zur gewï¿½hlten Kategorie holen\r\n        Nutzenkriterium n = new Nutzenkriterium();\r\n        n.setNutzenattraktivitaetOperativerNutzenId(naOpNuId);\r\n        n.setMandantId(mandantId);\r\n        List<Nutzenkriterium> kriterien = dao.getAssignments(n);\r\n        if (kriterien.size() == 0) {\r\n            return false;\r\n        }\r\n        // Formulardaten wieder abfï¿½llen (bei gescheiterter Validierung)\r\n        AutoGrowingList list = form.getNutzenkriteriumLine();\r\n        if (list != null) {\r\n            // Formulardaten zum Abgleich in eine HashMap stellen\r\n            Iterator it = list.iterator();\r\n            HashMap<Integer, String> formData = new HashMap<Integer, String>();\r\n            while (it.hasNext()) {\r\n                NutzenkriteriumLine nl = (NutzenkriteriumLine) it.next();\r\n                formData.put(nl.getNutzenkriteriumId(), nl.getFrage());\r\n            }\r\n            // Nutzennkriterium suchen\r\n            for (int i = 0; i < kriterien.size(); i++) {\r\n                Nutzenkriterium kriterium = (Nutzenkriterium) kriterien.get(i);\r\n                Integer nutzenkriteriumId = (Integer) kriterium.getNutzenkriteriumId();\r\n                if (formData.containsKey(nutzenkriteriumId)) {\r\n                    // Frage mit Formulardaten ersetzen\r\n                    String frage = formData.get(nutzenkriteriumId);\r\n                    // Fragen fï¿½r Projektbetroffene\r\n                    if (isOperativerNutzen) {\r\n                        logger.debug(\"Ersetze Frage in Datenbank: \" + kriterium.getFrageProjektbetroffene() + \" mit Frage aus Formular: \" + frage);\r\n                        kriterium.setFrageProjektbetroffene(frage);\r\n                    } else // Fragen fï¿½r Management\r\n                    {\r\n                        logger.debug(\"Ersetze Frage in Datenbank: \" + kriterium.getFrageManagement() + \" mit Frage aus Formular: \" + frage);\r\n                        kriterium.setFrageManagement(frage);\r\n                    }\r\n                    kriterien.set(i, kriterium);\r\n                }\r\n            }\r\n        }\r\n        // Operativer Nutzen -> Projektbetroffene\r\n        if (isOperativerNutzen) {\r\n            request.setAttribute(Constants.PROJEKTBETROFFENE, true);\r\n        }\r\n        request.setAttribute(Constants.NUTZENKRITERIEN, kriterien);\r\n        // Anzahl Kategorien holen\r\n        Kategorie k = new Kategorie();\r\n        k.setNutzenattraktivitaetOperativerNutzenId(naOpNuId);\r\n        k.setMandantId(mandantId);\r\n        List<Kategorie> kategorien = kService.getAssignments(k);\r\n        request.setAttribute(\"totalKategorien\", kategorien.size());\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Setzt die eingegebenen Daten zur Direkten Gewichtung aller\r\n     * gewï¿½hlten Nutzenkriterien in den Request, um diese anzeigen\r\n     * zu kï¿½nnen. Bei gescheiterter Validierung werden die Daten\r\n     * erneut angezeigt.\r\n     *\r\n     * @param request                   der HttpServletRequest\r\n     * @param form                      das Formular mit den Nutzenkriterien\r\n     */\r\n    public void populateDirekteGewichtung(HttpServletRequest request, FragenForm form) {\r\n        // Benï¿½tigte ids holen\r\n        HttpSession session = request.getSession();\r\n        Integer customizingId = (Integer) session.getAttribute(Constants.CUSTOMIZING_ID);\r\n        Integer mandantId = (Integer) session.getAttribute(Constants.MANDANT_ID);\r\n        Integer naOpNuId = cService.getNaOpNuId(request, customizingId);\r\n        // Alle zugewiesenen Nutzenkriterien zur gewï¿½hlten Kategorie holen\r\n        Nutzenkriterium n = new Nutzenkriterium();\r\n        n.setNutzenattraktivitaetOperativerNutzenId(naOpNuId);\r\n        n.setMandantId(mandantId);\r\n        List<Nutzenkriterium> kriterien = dao.getAssignments(n);\r\n        // Formulardaten wieder abfï¿½llen (bei gescheiterter Validierung)\r\n        AutoGrowingList list = form.getNutzenkriteriumLine();\r\n        if (list != null) {\r\n            // Formulardaten zum Abgleich in eine HashMap stellen\r\n            Iterator it = list.iterator();\r\n            HashMap<Integer, Double[]> formData = new HashMap<Integer, Double[]>();\r\n            while (it.hasNext()) {\r\n                NutzenkriteriumLine nl = (NutzenkriteriumLine) it.next();\r\n                Double kategorieGewichtung = 0.0;\r\n                Double gewichtung = 0.0;\r\n                try {\r\n                    kategorieGewichtung = new Double(nl.getKategorieGewichtung());\r\n                } catch (Exception e) {\r\n                }\r\n                try {\r\n                    gewichtung = new Double(nl.getGewichtung());\r\n                } catch (Exception e) {\r\n                }\r\n                Double[] gewichtungen = { gewichtung, kategorieGewichtung };\r\n                formData.put(nl.getNutzenkriteriumId(), gewichtungen);\r\n            }\r\n            // Nutzennkriterium suchen\r\n            for (int i = 0; i < kriterien.size(); i++) {\r\n                Nutzenkriterium kriterium = (Nutzenkriterium) kriterien.get(i);\r\n                Integer nutzenkriteriumId = (Integer) kriterium.getNutzenkriteriumId();\r\n                if (formData.containsKey(nutzenkriteriumId)) {\r\n                    // Gewichtung mit Formulardaten ersetzen\r\n                    Double[] gewichtungen = formData.get(nutzenkriteriumId);\r\n                    kriterium.setGewichtung(gewichtungen[0]);\r\n                    kriterium.setKategorieGewichtung(gewichtungen[1]);\r\n                    kriterien.set(i, kriterium);\r\n                }\r\n            }\r\n        }\r\n        request.setAttribute(Constants.NUTZENKRITERIEN, kriterien);\r\n    }\r\n\r\n    /**\r\n     * Speichert die Fragen zu den gewï¿½hlten Nutzenkriterien ab.\r\n     *\r\n     * @param request                   der HttpServletRequest\r\n     * @param form                      das Formular mit den Nutzenkriterien\r\n     * @param errors                    das ActionMessages Objekt zum Speichern\r\n     *                                  von Fehlermeldungen\r\n     * @return                          true bei Erfolg, sonst false\r\n     */\r\n    public boolean saveFragen(HttpServletRequest request, FragenForm form, ActionMessages errors) {\r\n        AutoGrowingList list = form.getNutzenkriteriumLine();\r\n        if (list == null) {\r\n            return false;\r\n        }\r\n        // Fragen ï¿½berprï¿½fen\r\n        Iterator it = list.iterator();\r\n        while (it.hasNext()) {\r\n            NutzenkriteriumLine nl = (NutzenkriteriumLine) it.next();\r\n            String frage = nl.getFrage();\r\n            if (frage == null || frage.length() == 0) {\r\n                errors.add(\"nutzenkriterium_\" + nl.getNutzenkriteriumId(), new ActionMessage(\"errors.required\", \"Frage\"));\r\n                return false;\r\n            }\r\n        }\r\n        // Benï¿½tigte ids holen\r\n        HttpSession session = request.getSession();\r\n        Integer customizingId = (Integer) session.getAttribute(Constants.CUSTOMIZING_ID);\r\n        Integer naOpNuId = cService.getNaOpNuId(request, customizingId);\r\n        // Fragen speichern\r\n        it = list.iterator();\r\n        while (it.hasNext()) {\r\n            NutzenkriteriumLine nl = (NutzenkriteriumLine) it.next();\r\n            Nutzenkriterium n = new Nutzenkriterium();\r\n            n.setNutzenkriteriumId(nl.getNutzenkriteriumId());\r\n            n.setNutzenattraktivitaetOperativerNutzenId(naOpNuId);\r\n            if (cService.isOperativerNutzen(request)) {\r\n                n.setFrageProjektbetroffene(nl.getFrage());\r\n            } else {\r\n                n.setFrageManagement(nl.getFrage());\r\n            }\r\n            logger.debug(\"nutzenkriteriumId: \" + n.getNutzenkriteriumId());\r\n            logger.debug(\"nutzenattraktivitaetId: \" + naOpNuId);\r\n            logger.debug(\"frage: \" + nl.getFrage());\r\n            dao.updateAssignment(n);\r\n        }\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Fï¿½gt ein neues Nutzenkriterium ein und wï¿½hlt dieses anschliessend\r\n     * automatisch aus.\r\n     *\r\n     * @param request                   der HttpServletRequest\r\n     * @param form                      das Formular mit dem neuen Nutzenkriterium\r\n     * @param errors                    das ActionMessages Objekt zum Speichern\r\n     *                                  von Fehlermeldungen\r\n     * @return                          true bei Erfolg, sonst false\r\n     */\r\n    public boolean add(HttpServletRequest request, DynaActionForm form, ActionMessages errors, ActionMessages messages) {\r\n        // Ids holen\r\n        HttpSession session = request.getSession();\r\n        Integer mandantId = (Integer) session.getAttribute(Constants.MANDANT_ID);\r\n        Integer customizingId = (Integer) session.getAttribute(Constants.CUSTOMIZING_ID);\r\n        // Formulardaten holen\r\n        String name = (String) form.get(\"name\");\r\n        Integer kategorieId = (Integer) form.get(Constants.KATEGORIE_ID);\r\n        logger.debug(\"name=\" + name);\r\n        logger.debug(\"kategorieId=\" + kategorieId);\r\n        // Formulardaten ï¿½berprï¿½fen\r\n        if (name == null || name.length() == 0) {\r\n            errors.add(\"name\", new ActionMessage(\"errors.required\", \"Name\"));\r\n            return false;\r\n        }\r\n        Nutzenkriterium n = new Nutzenkriterium();\r\n        n.setName(name);\r\n        n.setKategorieId(kategorieId);\r\n        n.setMandantId(mandantId);\r\n        // Auf duplikate prï¿½fen\r\n        if (dao.getByName(n) != null) {\r\n            messages.add(ActionMessages.GLOBAL_MESSAGE, new ActionMessage(\"errors.duplicate\", \"Nutzenkriterium\"));\r\n            return false;\r\n        }\r\n        // Nutzenkriterium einfï¿½gen\r\n        dao.insert(n);\r\n        // Nutzenkriterium setzen\r\n        Integer naOpNuId = cService.getNaOpNuId(request, customizingId);\r\n        n.setNutzenattraktivitaetOperativerNutzenId(naOpNuId);\r\n        dao.insertAssignment(n);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Speichert die Direkte Gewichtung von Nutzenkriterien\r\n     * der Nutzenattraktivitï¿½t bzw. des Operativen Nutzens.\r\n     *\r\n     * @param request                   der HttpServletRequest\r\n     * @param form                      das Formular mit den Nutzenkriterien\r\n     * @param errors                    das ActionMessages Objekt zum Speichern\r\n     *                                  von Fehlermeldungen\r\n     * @return                          true bei Erfolg, sonst false\r\n     */\r\n    public boolean saveDirekteGewichtung(HttpServletRequest request, FragenForm form, ActionMessages errors) {\r\n        // Formulardaten holen\r\n        AutoGrowingList list = form.getNutzenkriteriumLine();\r\n        if (list == null) {\r\n            return false;\r\n        }\r\n        // Gewichtungen ï¿½berprï¿½fen\r\n        Double gewichtung = 0.0;\r\n        Iterator it = list.iterator();\r\n        while (it.hasNext()) {\r\n            NutzenkriteriumLine nl = (NutzenkriteriumLine) it.next();\r\n            Integer nutzenkriteriumId = nl.getNutzenkriteriumId();\r\n            logger.debug(\"nutzenkrtieriumId=\" + nutzenkriteriumId);\r\n            String g = nl.getGewichtung();\r\n            logger.debug(\"Gewichtung: \" + g);\r\n            try {\r\n                gewichtung += new Double(g);\r\n            } catch (Exception e) {\r\n            }\r\n        }\r\n        logger.debug(\"Total gewichtungen: \" + gewichtung);\r\n        if (gewichtung < 99.999 || gewichtung > 100.0001) {\r\n            errors.add(ActionMessages.GLOBAL_MESSAGE, new ActionMessage(\"errors.gewichtung.failure\"));\r\n            return false;\r\n        }\r\n        /*\r\n    // Gewichtungen ï¿½berprï¿½fen\r\n    Iterator it = list.iterator();\r\n    ArrayList<Double> gewichtungsListe = new ArrayList<Double>(); \r\n    HashMap<Integer, ArrayList<Double>> gewichtungen = new HashMap<Integer, ArrayList<Double>>(); \r\n    Double kategorieGewichtung = 0.0;\r\n    boolean isFirst = true;\r\n    Integer tmpKategorieId = null;\r\n    while (it.hasNext()) {\r\n      NutzenkriteriumLine nl = (NutzenkriteriumLine) it.next();\r\n      Integer kategorieId = nl.getKategorieId();\r\n      Integer nutzenkriteriumId = nl.getNutzenkriteriumId();\r\n      logger.debug(\"kategorieId=\" + kategorieId);\r\n      logger.debug(\"nutzenkrtieriumId=\" + nutzenkriteriumId);\r\n      \r\n      // Gewichtung (muss pro Kategorie 100% ergeben)\r\n      String g = nl.getGewichtung();\r\n      logger.debug(\"Gewichtung: \" + g);\r\n      \r\n      \r\n      // Gewichtung fï¿½r die selbe Kategorie in eine Liste stellen\r\n      if (isFirst || kategorieId == null) {\r\n        isFirst = false;\r\n        tmpKategorieId = kategorieId;\r\n        try {\r\n          gewichtungsListe.add(new Double(g));\r\n        } catch (Exception e) {}\r\n      }\r\n      \r\n      // Nï¿½chste Kategorie \r\n      else {\r\n        gewichtungen.put(tmpKategorieId, gewichtungsListe);\r\n        gewichtungsListe = new ArrayList<Double>();\r\n        tmpKategorieId = kategorieId;\r\n        try {\r\n          gewichtungsListe.add(new Double(g));\r\n        } catch (Exception e) {}\r\n      }\r\n      \r\n      // kategorieGewichtung\r\n      String kg = nl.getKategorieGewichtung();\r\n      logger.debug(\"Gewichtung Kategorie: \" + kg);\r\n      try {\r\n        kategorieGewichtung += new Double(kg);\r\n      } catch (Exception e) {}\r\n    }\r\n    \r\n    it = gewichtungen.keySet().iterator();\r\n    while (it.hasNext()) {\r\n      Integer key = (Integer) it.next();\r\n      gewichtungsListe = gewichtungen.get(key);\r\n      Double gewichtung = 0.0;\r\n      for (Double d : gewichtungsListe) {\r\n        gewichtung += d;\r\n      }\r\n      \r\n      logger.debug(\"Total gewichtungen: \" + gewichtung);\r\n      if (gewichtung < 99.999 || gewichtung > 100) {\r\n        errors.add(ActionMessages.GLOBAL_MESSAGE,\r\n            new ActionMessage(\"errors.gewichtung.failure\"));\r\n        return false;\r\n      }\r\n    }\r\n    logger.debug(\"Total gewichtungen Kategorie: \" + kategorieGewichtung);\r\n    if (kategorieGewichtung < 99.999 || kategorieGewichtung > 100) {\r\n      errors.add(ActionMessages.GLOBAL_MESSAGE,\r\n          new ActionMessage(\"errors.gewichtung.failure\"));\r\n      return false;\r\n    }*/\r\n        // Benï¿½tigte ids holen\r\n        HttpSession session = request.getSession();\r\n        Integer customizingId = (Integer) session.getAttribute(Constants.CUSTOMIZING_ID);\r\n        Integer naOpNuId = cService.getNaOpNuId(request, customizingId);\r\n        // Allfï¿½llige indirekte Gewichtungen lï¿½schen\r\n        Auswahlfeld a = new Auswahlfeld();\r\n        a.setNutzenattraktivitaetOperativerNutzenId(naOpNuId);\r\n        aService.deleteGewichtungen(a);\r\n        // Gewichtung speichern\r\n        it = list.iterator();\r\n        while (it.hasNext()) {\r\n            NutzenkriteriumLine nl = (NutzenkriteriumLine) it.next();\r\n            Nutzenkriterium n = new Nutzenkriterium();\r\n            n.setNutzenkriteriumId(nl.getNutzenkriteriumId());\r\n            n.setNutzenattraktivitaetOperativerNutzenId(naOpNuId);\r\n            n.setGewichtung(new Double(nl.getGewichtung()));\r\n            dao.updateAssignmentGewichtung(n);\r\n            // Gewichtung der Kategorien speichern\r\n            Integer kategorieId = nl.getKategorieId();\r\n            if (kategorieId != null) {\r\n                Double g = null;\r\n                try {\r\n                    g = new Double(nl.getKategorieGewichtung());\r\n                } catch (Exception e) {\r\n                }\r\n                Kategorie k = new Kategorie();\r\n                k.setGewichtung(g);\r\n                k.setKategorieId(nl.getKategorieId());\r\n                k.setNutzenattraktivitaetOperativerNutzenId(naOpNuId);\r\n                kService.updateAssignment(k);\r\n            }\r\n        }\r\n        // Status setzen\r\n        boolean isNa = !cService.isOperativerNutzen(request);\r\n        if (isNa) {\r\n            logger.debug(\"GEWICHTUNGEN_NA=true\");\r\n            session.setAttribute(Constants.GEWICHTUNGEN_NA, true);\r\n        } else {\r\n            logger.debug(\"GEWICHTUNGEN_OP_NU=true\");\r\n            session.setAttribute(Constants.GEWICHTUNGEN_OP_NU, true);\r\n        }\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Prï¿½ft, ob eine Direkte Gewichtung vorliegt oder nicht.\r\n     *\r\n     * @param request                   der HttpServletRequest\r\n     * @return                          true bei Direkter Gewichtung, sonst false\r\n     */\r\n    public boolean direkteGewichtung(HttpServletRequest request) {\r\n        Integer typ = (Integer) request.getSession().getAttribute(Constants.GEWICHTUNGSTYP);\r\n        logger.debug(\"Direkte Gewichtung ausgewï¿½hlt\");\r\n        return typ == Constants.GEWICHTUNG_DIREKT;\r\n    }\r\n\r\n    /**\r\n     * Setzt den Status des Schritts \"Nutzenkriterien\", sowohl fï¿½r das\r\n     * Customizing Nutzenattraktiviï¿½t wie fï¿½r das Customizing Operativer Nutzen.\r\n     * Der Status zeigt in der Navigation an, ob dieser Schritt des Customizings\r\n     * bereits erfolgreich abgeschlossen wurde oder nicht.\r\n     *\r\n     * @param request                   der HttpServletRequest\r\n     * @param kategorien                eine Liste aller gewï¿½hlten Kategorien\r\n     * @param mandantId                 die Id des Mandanten\r\n     * @param naOpNuId                  die Id der Nutzenattraktivitï¿½t bzw.\r\n     *                                  des Operativen Nutzens\r\n     * @param isNa                      true fï¿½r Nutzenattraktivitï¿½t, sonst false\r\n     * @return                          Liste aller gewï¿½hlten Nutzenkriterien\r\n     */\r\n    public List<Nutzenkriterium> setStatus(HttpServletRequest request, List<Kategorie> kategorien, Integer mandantId, Integer naOpNuId, boolean isNa) {\r\n        boolean ok = true;\r\n        for (Kategorie k : kategorien) {\r\n            Nutzenkriterium nk = new Nutzenkriterium();\r\n            nk.setKategorieId(k.getKategorieId());\r\n            nk.setNutzenattraktivitaetOperativerNutzenId(naOpNuId);\r\n            List<Nutzenkriterium> nks = dao.getByNaOpNuAndKategorie(nk);\r\n            logger.debug(nks.size() + \" Nutzenkriterien in der Liste\");\r\n            if (nks == null || nks.size() == 0) {\r\n                ok = false;\r\n                break;\r\n            }\r\n        }\r\n        HttpSession session = request.getSession();\r\n        if (ok && isNa) {\r\n            session.setAttribute(Constants.NUTZENKRITERIEN_NA, true);\r\n            session.setAttribute(Constants.FRAGEN_NA, true);\r\n        } else if (ok) {\r\n            session.setAttribute(Constants.NUTZENKRITERIEN_OP_NU, true);\r\n            session.setAttribute(Constants.FRAGEN_OP_NU, true);\r\n        }\r\n        if (ok) {\r\n            Nutzenkriterium nk = new Nutzenkriterium();\r\n            nk.setMandantId(mandantId);\r\n            nk.setNutzenattraktivitaetOperativerNutzenId(naOpNuId);\r\n            return dao.getAssignments(nk);\r\n        } else if (!ok && isNa) {\r\n            session.removeAttribute(Constants.NUTZENKRITERIEN_NA);\r\n            session.removeAttribute(Constants.FRAGEN_NA);\r\n        } else {\r\n            session.removeAttribute(Constants.NUTZENKRITERIEN_OP_NU);\r\n            session.removeAttribute(Constants.FRAGEN_OP_NU);\r\n        }\r\n        return null;\r\n    }\r\n\r\n    /**\r\n     * Lï¿½scht die Fragebogen-Gewichtung des aktuellen Customizings.\r\n     *\r\n     * @param request                   der HttpServletRequest\r\n     */\r\n    public void deleteFragebogenGewichtung(HttpServletRequest request) {\r\n        // Benï¿½tigte ids holen\r\n        HttpSession session = request.getSession();\r\n        Integer customizingId = (Integer) session.getAttribute(Constants.CUSTOMIZING_ID);\r\n        Integer naOpNuId = cService.getNaOpNuId(request, customizingId);\r\n        // allfï¿½llige Gewichtung ï¿½ber Fragebogen lï¿½schen\r\n        Auswahlfeld a = new Auswahlfeld();\r\n        a = aService.setType(a, Constants.GEWICHTUNG);\r\n        a.setNutzenattraktivitaetOperativerNutzenId(naOpNuId);\r\n        logger.debug(\"Fragebogen-Gewichtung lï¿½schen:\");\r\n        logger.debug(\"nutzenattraktivitaetOperativerNutzenId=\" + a.getNutzenattraktivitaetOperativerNutzenId());\r\n        aService.deleteGewichtungen(a);\r\n    }\r\n\r\n    /**\r\n     * Selektiert die zuvor gewï¿½hlte Anzahl von Abstufungen fï¿½r die\r\n     * Stufenbeschriebe und die Gewichtung.\r\n     * Stellt den gewï¿½hlten Gewichtungstyp in den Request. Dies dient\r\n     * zur Vorauswahl der richtigen Checkbox im Formular \"Gewichtung\".\r\n     *\r\n     * @param request                   der HttpServletRequest\r\n     * @param path                      der Pfad der Action\r\n     */\r\n    public void preselect(HttpServletRequest request, String path) {\r\n        // Benï¿½tigte ids holen\r\n        HttpSession session = request.getSession();\r\n        Integer customizingId = (Integer) session.getAttribute(Constants.CUSTOMIZING_ID);\r\n        Integer naOpNuId = cService.getNaOpNuId(request, customizingId);\r\n        logger.debug(\"naOpNuId=\" + naOpNuId);\r\n        logger.debug(\"Pfad: \" + path);\r\n        // Abstufungstatus holen\r\n        List<Auswahlfeld> afs = new ArrayList<Auswahlfeld>();\r\n        if (path.contains(Constants.ABSTUFUNGEN_ACTION)) {\r\n            afs = aService.getAnzahlAbstufungen(naOpNuId);\r\n        } else // Gewichtungsstatus holen\r\n        {\r\n            afs = aService.getAnzahlGewichtungen(naOpNuId);\r\n        }\r\n        logger.debug(afs.size() + \" Abstufungen in der Liste\");\r\n        request.setAttribute(Constants.ABSTUFUNGEN, afs.size());\r\n        // Gewichtung bestimmen\r\n        List<Auswahlfeld> gewichtungen = aService.getGewichtungStatus(naOpNuId);\r\n        if (gewichtungen.size() > 0) {\r\n            request.setAttribute(Constants.GEWICHTUNG_NOT_DIRECT, true);\r\n        } else {\r\n            request.removeAttribute(Constants.GEWICHTUNG_NOT_DIRECT);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Kopiert alle Zuweisungen von Nutzenkriterien von einer Nutzenattraktivitï¿½t\r\n     * bzw. von einem Operativen Nutzen zu einer neuen Id. Wird zum Kopieren\r\n     * von Customizings verwendet.\r\n     *\r\n     * @param mandantId                 die Id des Mandanten\r\n     * @param naOpNuId                  die Id der Nutzenattraktivitï¿½t bzw. des\r\n     *                                  Operativen Nutzens, welche die zu kopierenden\r\n     *                                  Zuweisungen enthï¿½lt\r\n     * @param newNaOpNuId               die neue Id fï¿½r die kopierten Zuweisungen\r\n     */\r\n    public void copy(Integer mandantId, Integer naOpNuId, Integer newNaOpNuId) {\r\n        Nutzenkriterium n = new Nutzenkriterium();\r\n        n.setNutzenattraktivitaetOperativerNutzenId(naOpNuId);\r\n        n.setMandantId(mandantId);\r\n        List<Nutzenkriterium> kriterien = dao.getAssignments(n);\r\n        for (Nutzenkriterium kriterium : kriterien) {\r\n            kriterium.setNutzenattraktivitaetOperativerNutzenId(newNaOpNuId);\r\n            dao.insertAssignment(kriterium);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * ï¿½berprï¿½ft, ob ein Customizing komplett ist.\r\n     *\r\n     * @param request                   der HttpServletRequest\r\n     * @return                          true bei komplettem Customizing, sonst false\r\n     */\r\n    public boolean customizingComplete(HttpServletRequest request) {\r\n        return customizingService.complete(request);\r\n    }\r\n\r\n    /**\r\n     * Erstellt ein Objekt vom Typ Nutzenkriterium mit der id des Mandanten\r\n     * und, falls angegeben, mit abgefï¿½llten Formulardaten\r\n     *\r\n     * @param request                   der HttpServletRequest\r\n     * @param form                      das DynaActionForm\r\n     * @return                          Nutzenkriterium mit mandantId\r\n     */\r\n    private Nutzenkriterium createNutzenkriterium(HttpServletRequest request, DynaActionForm form) {\r\n        Integer mandantId = (Integer) request.getSession().getAttribute(Constants.MANDANT_ID);\r\n        Nutzenkriterium n = new Nutzenkriterium();\r\n        n.setMandantId(mandantId);\r\n        if (form != null) {\r\n            Integer id = (Integer) form.get(Constants.NUTZENKRITERIUM_ID);\r\n            String name = (String) form.get(Constants.NAME);\r\n            String beschreibung = (String) form.get(\"beschreibung\");\r\n            String frageManagementDefault = (String) form.get(\"frageManagementDefault\");\r\n            String frageProjektbetroffeneDefault = (String) form.get(\"frageProjektbetroffeneDefault\");\r\n            Integer kategorieId = (Integer) form.get(Constants.KATEGORIE_ID);\r\n            n.setNutzenkriteriumId(id);\r\n            n.setName(name);\r\n            n.setBeschreibung(beschreibung);\r\n            n.setFrageManagementDefault(frageManagementDefault);\r\n            n.setFrageProjektbetroffeneDefault(frageProjektbetroffeneDefault);\r\n            n.setKategorieId(kategorieId);\r\n        }\r\n        return n;\r\n    }\r\n\r\n    /**\r\n     * ï¿½berprï¿½ft, ob die Id eines Nutzenkriteriums Ziels im Request ist\r\n     * (update) oder nicht (neu).\r\n     *\r\n     * @param request                   der HttpServletRequest\r\n     * @param form                      das DynaActionForm\r\n     * @return                          true, wenn das angegebene Nutzenkriterium\r\n     *                                  besteht, sonst false.\r\n     */\r\n    private boolean isUpdate(HttpServletRequest request, DynaActionForm form) {\r\n        Integer id = (Integer) form.get(Constants.NUTZENKRITERIUM_ID);\r\n        if (id == null || id == 0) {\r\n            return false;\r\n        }\r\n        return true;\r\n    }\r\n}\r\n",
		"id": "EvoSuiteBenchmark/46_nutzenportfolio/src/main/java/ch/bfh/egov/nutzenportfolio/service/nutzenkriterium/NutzenkriteriumDaoServiceTest4.java",
		"test_prompt": "// NutzenkriteriumDaoServiceTest4.java\npackage ch.bfh.egov.nutzenportfolio.service.nutzenkriterium;\n\nimport java.util.ArrayList;\nimport java.util.Collections;\nimport java.util.Comparator;\nimport java.util.HashMap;\nimport java.util.Iterator;\nimport java.util.List;\nimport javax.servlet.http.HttpServletRequest;\nimport javax.servlet.http.HttpSession;\nimport org.apache.commons.logging.Log;\nimport org.apache.commons.logging.LogFactory;\nimport org.apache.struts.action.ActionMessage;\nimport org.apache.struts.action.ActionMessages;\nimport org.apache.struts.action.DynaActionForm;\nimport ch.bfh.egov.nutzenportfolio.Constants;\nimport ch.bfh.egov.nutzenportfolio.common.AutoGrowingList;\nimport ch.bfh.egov.nutzenportfolio.common.NutzenkriteriumLine;\nimport ch.bfh.egov.nutzenportfolio.form.FragenForm;\nimport ch.bfh.egov.nutzenportfolio.persistence.nutzenkriterium.NutzenkriteriumDao;\nimport ch.bfh.egov.nutzenportfolio.service.auswahlfeld.AuswahlfeldService;\nimport ch.bfh.egov.nutzenportfolio.service.common.CommonService;\nimport ch.bfh.egov.nutzenportfolio.service.customizing.CustomizingService;\nimport ch.bfh.egov.nutzenportfolio.service.kategorie.KategorieService;\nimport ch.bfh.egov.nutzenportfolio.tos.Auswahlfeld;\nimport ch.bfh.egov.nutzenportfolio.tos.Customizing;\nimport ch.bfh.egov.nutzenportfolio.tos.Kategorie;\nimport ch.bfh.egov.nutzenportfolio.tos.NaOpNu;\nimport ch.bfh.egov.nutzenportfolio.tos.Nutzenkriterium;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link NutzenkriteriumDaoService}.\n* It contains ten unit test cases for the {@link NutzenkriteriumDaoService#add(HttpServletRequest, DynaActionForm, ActionMessages, ActionMessages)} method.\n*/\nclass NutzenkriteriumDaoServiceTest4 {"
	},
	{
		"original_code": "// NutzenkriteriumDaoService.java\n/**\r\n * Nutzenportfolio\r\n * Copyright (C) 2006 Kompetenzzentrum E-Business, Simon Bergamin\r\n *\r\n * This program is free software; you can redistribute it and/or\r\n * modify it under the terms of the GNU General Public License\r\n * as published by the Free Software Foundation; either version 2\r\n * of the License, or (at your option) any later version.\r\n *\r\n * This program is distributed in the hope that it will be useful,\r\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n * GNU General Public License for more details.\r\n *\r\n * You should have received a copy of the GNU General Public License\r\n * along with this program; if not, write to the Free Software\r\n * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\r\n */\r\npackage ch.bfh.egov.nutzenportfolio.service.nutzenkriterium;\r\n\r\nimport java.util.ArrayList;\r\nimport java.util.Collections;\r\nimport java.util.Comparator;\r\nimport java.util.HashMap;\r\nimport java.util.Iterator;\r\nimport java.util.List;\r\nimport javax.servlet.http.HttpServletRequest;\r\nimport javax.servlet.http.HttpSession;\r\nimport org.apache.commons.logging.Log;\r\nimport org.apache.commons.logging.LogFactory;\r\nimport org.apache.struts.action.ActionMessage;\r\nimport org.apache.struts.action.ActionMessages;\r\nimport org.apache.struts.action.DynaActionForm;\r\nimport ch.bfh.egov.nutzenportfolio.Constants;\r\nimport ch.bfh.egov.nutzenportfolio.common.AutoGrowingList;\r\nimport ch.bfh.egov.nutzenportfolio.common.NutzenkriteriumLine;\r\nimport ch.bfh.egov.nutzenportfolio.form.FragenForm;\r\nimport ch.bfh.egov.nutzenportfolio.persistence.nutzenkriterium.NutzenkriteriumDao;\r\nimport ch.bfh.egov.nutzenportfolio.service.auswahlfeld.AuswahlfeldService;\r\nimport ch.bfh.egov.nutzenportfolio.service.common.CommonService;\r\nimport ch.bfh.egov.nutzenportfolio.service.customizing.CustomizingService;\r\nimport ch.bfh.egov.nutzenportfolio.service.kategorie.KategorieService;\r\nimport ch.bfh.egov.nutzenportfolio.tos.Auswahlfeld;\r\nimport ch.bfh.egov.nutzenportfolio.tos.Customizing;\r\nimport ch.bfh.egov.nutzenportfolio.tos.Kategorie;\r\nimport ch.bfh.egov.nutzenportfolio.tos.NaOpNu;\r\nimport ch.bfh.egov.nutzenportfolio.tos.Nutzenkriterium;\r\n\r\n/**\r\n * Implementierende Service-Klasse fï¿½r Nutzenkriterien.\r\n *\r\n * @author Kompetenzzentrum E-Business, Simon Bergamin\r\n */\r\npublic class NutzenkriteriumDaoService implements NutzenkriteriumService {\r\n\r\n    private NutzenkriteriumDao dao;\r\n\r\n    private CommonService cService;\r\n\r\n    private KategorieService kService;\r\n\r\n    private AuswahlfeldService aService;\r\n\r\n    private CustomizingService customizingService;\r\n\r\n    private Log logger = LogFactory.getLog(this.getClass());\r\n\r\n    /**\r\n     * Konstruktor. ï¿½bergabe des DataAcessObject-Interfaces fï¿½r Nutzenkriterien.\r\n     *\r\n     * @param dao                               Nutzenkriterien DataAcessObject-Interface\r\n     */\r\n    public NutzenkriteriumDaoService(NutzenkriteriumDao dao) {\r\n        this.dao = dao;\r\n    }\r\n\r\n    /**\r\n     * @see ch.bfh.egov.nutzenportfolio.persistence.nutzenkriterium.NutzenkriteriumIbatisDao#getAssignmentById(Nutzenkriterium)\r\n     */\r\n    public Nutzenkriterium getAssignmentById(Nutzenkriterium kriterium) {\r\n        return dao.getAssignmentById(kriterium);\r\n    }\r\n\r\n    /**\r\n     * @see ch.bfh.egov.nutzenportfolio.persistence.nutzenkriterium.NutzenkriteriumIbatisDao#getByProjektId(NaOpNu)\r\n     */\r\n    public List<Nutzenkriterium> getByProjektId(NaOpNu naOpNu) {\r\n        return dao.getByProjektId(naOpNu);\r\n    }\r\n\r\n    /**\r\n     * @see ch.bfh.egov.nutzenportfolio.persistence.nutzenkriterium.NutzenkriteriumIbatisDao#getAssignments(Nutzenkriterium)\r\n     */\r\n    public List<Nutzenkriterium> getAssignments(Nutzenkriterium kriterium) {\r\n        return dao.getAssignments(kriterium);\r\n    }\r\n\r\n    /**\r\n     * @see ch.bfh.egov.nutzenportfolio.persistence.nutzenkriterium.NutzenkriteriumIbatisDao#update(Nutzenkriterium)\r\n     */\r\n    public void update(Nutzenkriterium kriterium) {\r\n        dao.updateAssignment(kriterium);\r\n    }\r\n\r\n    /**\r\n     * @see ch.bfh.egov.nutzenportfolio.persistence.nutzenkriterium.NutzenkriteriumIbatisDao#unsetAssignmentGewichtung(Integer)\r\n     */\r\n    public void unsetAssignmentGewichtung(Integer naOpNuId) {\r\n        dao.unsetAssignmentGewichtung(naOpNuId);\r\n    }\r\n\r\n    /**\r\n     * @see ch.bfh.egov.nutzenportfolio.persistence.nutzenkriterium.NutzenkriteriumIbatisDao#deleteAssignments(Integer)\r\n     */\r\n    public void deleteAssignments(Integer naOpNuId) {\r\n        dao.deleteAssignments(naOpNuId);\r\n    }\r\n\r\n    /**\r\n     * Initialisierung dieses Service-Objekts durch ï¿½bergabe anderer,\r\n     * benï¿½tigter Service-Objekte.\r\n     *\r\n     * @param aService                   AuswahlFeldService Objekt\r\n     * @param cService                   CommonService Objekt\r\n     * @param kService                   KategorieService Objekt\r\n     * @param customizingService         CustomizingService Objekt\r\n     */\r\n    public void init(AuswahlfeldService aService, CommonService cService, KategorieService kService, CustomizingService customizingService) {\r\n        this.aService = aService;\r\n        this.cService = cService;\r\n        this.kService = kService;\r\n        this.customizingService = customizingService;\r\n    }\r\n\r\n    /**\r\n     * Stellt eine Liste aller Nutzenkriterien in den request.\r\n     *\r\n     * @param request                   der HttpServletRequest\r\n     */\r\n    public void list(HttpServletRequest request) {\r\n        Integer mandantId = (Integer) request.getSession().getAttribute(Constants.MANDANT_ID);\r\n        List<Nutzenkriterium> kriterien = dao.getAll(mandantId);\r\n        // Sortieren der Nutzenkriterien nach Namen\r\n        Collections.<Nutzenkriterium>sort(kriterien, new Comparator<Nutzenkriterium>() {\r\n\r\n            public int compare(Nutzenkriterium a, Nutzenkriterium b) {\r\n                String name1 = a.getName().toLowerCase();\r\n                String name2 = b.getName().toLowerCase();\r\n                return name1.compareTo(name2);\r\n            }\r\n        });\r\n        request.setAttribute(Constants.NUTZENKRITERIEN, kriterien);\r\n    }\r\n\r\n    /**\r\n     * Stellt eine Liste von Nutzenkriterien sowie deren zugehï¿½rigen\r\n     * Kategorien in den Request. Pro Request bzw. pro Seitenaufruf\r\n     * wird eine Kategorie mit den jeweiligen Nutzenkriterien angezeigt.\r\n     * Mit einem Klick auf \"weiter\" gelangt der Benutzer zur nï¿½chsten Seite\r\n     * bzw. der nï¿½chsten gewï¿½hlten Kategorie.\r\n     *\r\n     * @param request                   der HttpServletRequest\r\n     * @return                          true bei Erfolg, sonst false\r\n     */\r\n    public boolean populate(HttpServletRequest request) {\r\n        // Benï¿½tigte ids holen\r\n        HttpSession session = request.getSession();\r\n        Integer mandantId = (Integer) session.getAttribute(Constants.MANDANT_ID);\r\n        Integer customizingId = (Integer) session.getAttribute(Constants.CUSTOMIZING_ID);\r\n        Integer naOpNuId = cService.getNaOpNuId(request, customizingId);\r\n        logger.debug(\"naOpNuId=\" + naOpNuId);\r\n        // Zugewiesene Kategorien holen\r\n        Kategorie k = new Kategorie();\r\n        k.setNutzenattraktivitaetOperativerNutzenId(naOpNuId);\r\n        k.setMandantId(mandantId);\r\n        List<Kategorie> kategorien = kService.getAssignments(k);\r\n        Integer kategorieId = null;\r\n        Integer step = null;\r\n        if (kategorien.size() == 0) {\r\n            return false;\r\n        }\r\n        // 1 Schritt pro Kategorie. Parameter ï¿½berprï¿½fen.\r\n        String stepStr = request.getParameter(Constants.STEP);\r\n        String next = request.getParameter(Constants.NEXT);\r\n        logger.debug(\"Angegebener step: \" + stepStr);\r\n        try {\r\n            step = new Integer(stepStr);\r\n        } catch (NumberFormatException nfex) {\r\n            step = 1;\r\n        }\r\n        // Denselben Schritt wiederholen, wenn nicht \"weiter\" geklickt wurde\r\n        if (next == null && step > 1) {\r\n            --step;\r\n        }\r\n        // Kategorien in Array stellen\r\n        Integer[] kategorienIdArr = new Integer[kategorien.size()];\r\n        String[] kategorienNameArr = new String[kategorien.size()];\r\n        int i = 0;\r\n        for (Kategorie kategorie : kategorien) {\r\n            kategorienIdArr[i] = kategorie.getKategorieId();\r\n            kategorienNameArr[i++] = kategorie.getName();\r\n            logger.debug(\"Kategorie: id=\" + kategorienIdArr[i - 1] + \", name=\" + kategorienNameArr[i - 1]);\r\n        }\r\n        // Auf inkorrekten step Parameter prï¿½fen\r\n        if ((step - 1) >= kategorienIdArr.length) {\r\n            logger.warn(\"Nicht verfï¿½gbarer Schritt ausgewï¿½hlt!\");\r\n            step = 1;\r\n        }\r\n        // Auf letzten Schritt prï¿½fen\r\n        if (step == kategorienIdArr.length) {\r\n            request.setAttribute(Constants.LAST_STEP, true);\r\n        }\r\n        // Id der Kategorie anhand des step Parameters holen\r\n        kategorieId = kategorienIdArr[step - 1];\r\n        logger.debug(\"Gewaehlte Kategorie: \" + kategorieId);\r\n        request.setAttribute(Constants.KATEGORIE_ID, kategorieId);\r\n        request.setAttribute(\"kategorie\", kategorienNameArr[step - 1]);\r\n        request.setAttribute(Constants.STEP, step + 1);\r\n        // Alle Nutzenkriterien zur gewï¿½hlten Kategorie holen\r\n        Nutzenkriterium n = new Nutzenkriterium();\r\n        n.setNutzenattraktivitaetOperativerNutzenId(naOpNuId);\r\n        n.setKategorieId(kategorieId);\r\n        n.setMandantId(mandantId);\r\n        // Nutzenkriterien aussortieren, die einem anderen Customizing zugeordnet sind\r\n        List<Nutzenkriterium> nutzenkriterien = dao.getByKategorie(n);\r\n        Iterator it = nutzenkriterien.iterator();\r\n        HashMap<String, Nutzenkriterium> map = new HashMap<String, Nutzenkriterium>();\r\n        while (it.hasNext()) {\r\n            Nutzenkriterium nk = (Nutzenkriterium) it.next();\r\n            String name = nk.getName();\r\n            boolean contains = map.containsKey(name);\r\n            Integer nuNaOpNuId = nk.getNutzenattraktivitaetOperativerNutzenId();\r\n            // HashMap abfï¿½llen um allfï¿½llige doppelte Nutzenkriterien auszusortieren\r\n            // (ist der Fall bei Zuweisungen zu anderen Customizings)\r\n            if (!contains || nuNaOpNuId != null && contains && nuNaOpNuId.equals(naOpNuId)) {\r\n                map.put(name, nk);\r\n            }\r\n        }\r\n        nutzenkriterien = new ArrayList<Nutzenkriterium>(map.values());\r\n        request.setAttribute(Constants.NUTZENKRITERIEN, nutzenkriterien);\r\n        // Operativer Nutzen -> Projektbetroffene\r\n        if (cService.isOperativerNutzen(request)) {\r\n            request.setAttribute(Constants.PROJEKTBETROFFENE, true);\r\n        }\r\n        Integer levels = (Integer) request.getSession().getAttribute(Constants.ABSTUFUNGEN);\r\n        request.setAttribute(\"totalKategorien\", ((levels != null) ? kategorien.size() : 0));\r\n        // Alle zugewiesenen Nutzenkriterien zur gewï¿½hlten Kategorie holen\r\n        List nAssigned = dao.getAssignments(n);\r\n        request.setAttribute(Constants.NA_OP_NU_ID, naOpNuId);\r\n        request.setAttribute(Constants.NUTZENKRITERIEN_ASSIGNED, nAssigned);\r\n        boolean isNa = !cService.isOperativerNutzen(request);\r\n        setStatus(request, kategorien, mandantId, naOpNuId, isNa);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Fï¿½llt ein Formular mit bestehenden Daten eines Nutzenkriteriums ab,\r\n     * falls eine entsprechende id angegeben wurde.\r\n     *\r\n     * @param request                   der HttpServletRequest\r\n     * @param form                      das DynaActionForm\r\n     */\r\n    public void edit(HttpServletRequest request, DynaActionForm form) {\r\n        if (isUpdate(request, form)) {\r\n            Nutzenkriterium n = createNutzenkriterium(request, form);\r\n            Integer mandantId = n.getMandantId();\r\n            n = dao.getById(n);\r\n            form.set(\"name\", n.getName());\r\n            form.set(\"beschreibung\", n.getBeschreibung());\r\n            form.set(\"frageManagementDefault\", n.getFrageManagementDefault());\r\n            form.set(\"frageProjektbetroffeneDefault\", n.getFrageProjektbetroffeneDefault());\r\n            form.set(Constants.KATEGORIE_ID, n.getKategorieId());\r\n            // Kategorien in die Session stellen\r\n            logger.debug(\"Kategorien holen fï¿½r mandantId=\" + mandantId);\r\n            List<Kategorie> kategorien = kService.getAll(mandantId);\r\n            request.getSession().setAttribute(Constants.KATEGORIEN, kategorien);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Fï¿½hrt ein update eines bestenenden Nutzenkriteriums anhand von\r\n     * Formulardaten durch.\r\n     *\r\n     * @param request                   der HttpServletRequest\r\n     * @param form                      das DynaActionForm\r\n     */\r\n    public void update(HttpServletRequest request, DynaActionForm form) {\r\n        logger.debug(\"Update Nutzenkriterium\");\r\n        if (isUpdate(request, form)) {\r\n            logger.debug(\"Update durchfï¿½hren\");\r\n            Nutzenkriterium n = createNutzenkriterium(request, form);\r\n            dao.update(n);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Prï¿½ft, ob ein Nutzenkriterium existiert und gibt es zurï¿½ck.\r\n     *\r\n     * @param request                   der HttpServletRequest\r\n     * @param form                      das DynaActionForm\r\n     * @return                          das Nutzenkriterium\r\n     */\r\n    public Nutzenkriterium getNutzenkriterium(HttpServletRequest request, DynaActionForm form) {\r\n        Nutzenkriterium n = createNutzenkriterium(request, form);\r\n        return dao.getById(n);\r\n    }\r\n\r\n    /**\r\n     * Abfrage fï¿½r das Lï¿½schen von einem Nutzenkriterium.\r\n     *\r\n     * @param request                   der HttpServletRequest\r\n     * @param kriterium                 das zu lï¿½schende Nutzenkriterium\r\n     * @param messages                  das ActionMessages Objekt\r\n     */\r\n    public void deleteQuestion(HttpServletRequest request, Nutzenkriterium kriterium, ActionMessages messages) {\r\n        // Verknï¿½pfungen prï¿½fen\r\n        linkedTo(request, kriterium);\r\n        // Bestï¿½tigungsnachricht ausgeben\r\n        messages.add(ActionMessages.GLOBAL_MESSAGE, new ActionMessage(\"messages.question.delete\", kriterium.getName()));\r\n        // Actions zum Lï¿½schen und Abbrechen definieren\r\n        request.setAttribute(Constants.ACTION, Constants.VERWALTUNG_NUTZENKRITERIEN_ACTION);\r\n        request.setAttribute(Constants.DISPATCH_YES, Constants.DELETE);\r\n        request.setAttribute(Constants.DISPATCH_NO, Constants.LIST);\r\n        request.setAttribute(Constants.ID_NAME, Constants.NUTZENKRITERIUM_ID);\r\n        request.setAttribute(Constants.ID_VALUE, kriterium.getNutzenkriteriumId());\r\n    }\r\n\r\n    /**\r\n     * Setzt die Verknï¿½pfungen zu diesem Nutzenkriterium in den Request.\r\n     * Ein Nutzenkriterium kann mit Customizings verknï¿½pft sein. Diese\r\n     * Methode wird bei der Lï¿½schabfrage verwendet.\r\n     *\r\n     * @param request                   der HttpServletRequest\r\n     * @param kritierium                das zu lï¿½schende Nutzenkriterium\r\n     */\r\n    public void linkedTo(HttpServletRequest request, Nutzenkriterium kritierium) {\r\n        HashMap<String, List> map = new HashMap<String, List>();\r\n        // Customizings suchen, die dieses Nutzenkriterium benï¿½tigen\r\n        List<Customizing> customizings = dao.getLinkedCustomizings(kritierium);\r\n        if (customizings.size() > 0) {\r\n            for (Customizing c : customizings) {\r\n                if (c.getStatus()) {\r\n                    request.setAttribute(\"active\", true);\r\n                    break;\r\n                }\r\n            }\r\n            map.put(\"Customizings\", customizings);\r\n        }\r\n        request.setAttribute(\"linked\", map);\r\n    }\r\n\r\n    /**\r\n     * Lï¿½scht ein Nutzenkriterium. Falls es mit inaktiven Customizings\r\n     * verknï¿½ft ist, werden diese ebenfalls gelï¿½scht. Wenn aktive Customizings\r\n     * verknï¿½ft sind, wird das Nutzenkriterium nicht gelï¿½scht.\r\n     *\r\n     * @param request                   der HttpServletRequest\r\n     * @param kriterium                 das zu lï¿½schende Nutzenkriterium\r\n     */\r\n    public void delete(HttpServletRequest request, Nutzenkriterium kriterium) {\r\n        // Verknï¿½pfungen prï¿½fen\r\n        linkedTo(request, kriterium);\r\n        Boolean active = (Boolean) request.getAttribute(\"active\");\r\n        // Aktives Customizing verknï¿½ft. Dies sollte nicht passieren ausser bei\r\n        // einem direkten URL-Aufruf ...\r\n        if (active != null && active) {\r\n            logger.debug(\"Aktives Customizing verknï¿½pft, Nutzenkriterium wird nicht gelï¿½scht\");\r\n            return;\r\n        }\r\n        // Customizings lï¿½schen\r\n        List<Customizing> customizings = dao.getLinkedCustomizings(kriterium);\r\n        for (Customizing c : customizings) {\r\n            logger.debug(\"Lï¿½sche Customizing \" + c.getCustomizingId());\r\n            customizingService.cascadeDelete(request, c);\r\n        }\r\n        // Lï¿½schen des Nutzenkriteriums\r\n        dao.delete(kriterium);\r\n    }\r\n\r\n    /**\r\n     * Weist dem aktuellen Customizing das gewï¿½hlte Nutzenkriterium zu.\r\n     * Wenn das Nutzenkriterium eine Default-Frage besitzt, wird diese\r\n     * zur spï¿½teren Verwendung in der Verknï¿½pfungstabelle gespeichert.\r\n     *\r\n     * @param request                   der HttpServletRequest\r\n     * @param form                      das Formular mit dem gewï¿½hlten Nutzenkriterium\r\n     */\r\n    public void set(HttpServletRequest request, DynaActionForm form) {\r\n        // Benï¿½tigte ids holen\r\n        HttpSession session = request.getSession();\r\n        Integer customizingId = (Integer) session.getAttribute(Constants.CUSTOMIZING_ID);\r\n        Integer mandantId = (Integer) session.getAttribute(Constants.MANDANT_ID);\r\n        Integer naOpNuId = cService.getNaOpNuId(request, customizingId);\r\n        Integer nutzenkriteriumId = (Integer) form.get(Constants.NUTZENKRITERIUM_ID);\r\n        if (nutzenkriteriumId == null) {\r\n            return;\r\n        }\r\n        // Nutzenkriterium zuweisen\r\n        logger.debug(\"Nutzenkriterium zuweisen: \" + nutzenkriteriumId);\r\n        Nutzenkriterium n = new Nutzenkriterium();\r\n        n.setNutzenkriteriumId(nutzenkriteriumId);\r\n        n.setMandantId(mandantId);\r\n        n.setNutzenattraktivitaetOperativerNutzenId(naOpNuId);\r\n        // Default fragen holen und setzen\r\n        Nutzenkriterium fragen = dao.getDefaultFragen(n);\r\n        if (cService.isOperativerNutzen(request)) {\r\n            n.setFrageProjektbetroffene(fragen.getFrageProjektbetroffeneDefault());\r\n        } else {\r\n            n.setFrageManagement(fragen.getFrageManagementDefault());\r\n        }\r\n        dao.insertAssignment(n);\r\n    }\r\n\r\n    /**\r\n     * ï¿½berprï¿½ft, ob das aktuelle Nutzenkriterium zum letzten\r\n     * Schritt bzw. zur letzten gewï¿½hlten Kategorie gehï¿½rt. Wenn\r\n     * ja, kann zur nï¿½chsten Action gesprungen werden.\r\n     *\r\n     * @param request                   der HttpServletRequest\r\n     * @return                          true beim letzten Schritt, sonst false\r\n     */\r\n    public boolean next(HttpServletRequest request) {\r\n        // Nï¿½chste Action?\r\n        String last = request.getParameter(Constants.LAST_STEP);\r\n        if (last != null && last.equals(\"true\")) {\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    /**\r\n     * Entfernt die Zuweisung des gewï¿½hlten Nutzenkriteriums zum\r\n     * aktuellen Customizing.\r\n     *\r\n     * @param request                   der HttpServletRequest\r\n     * @param form                      das Formular mit dem Nutzenkriterium\r\n     */\r\n    public void remove(HttpServletRequest request, DynaActionForm form) {\r\n        // Nutzenkriterium anhand der id holen\r\n        HttpSession session = request.getSession();\r\n        Integer mandantId = (Integer) session.getAttribute(Constants.MANDANT_ID);\r\n        Integer nutzenkriteriumId = (Integer) form.get(Constants.NUTZENKRITERIUM_ID);\r\n        Integer naOpNuId = (Integer) form.get(Constants.NA_OP_NU_ID);\r\n        Nutzenkriterium n = new Nutzenkriterium();\r\n        n.setNutzenkriteriumId(nutzenkriteriumId);\r\n        n.setNutzenattraktivitaetOperativerNutzenId(naOpNuId);\r\n        n.setMandantId(mandantId);\r\n        n = dao.getAssignmentById(n);\r\n        // Zuweisung lï¿½schen\r\n        if (n != null) {\r\n            logger.debug(\"Zuweisung nutzenkriteriumId=\" + nutzenkriteriumId + \", nutzenattraktivitaetOperativerNutzenId=\" + n.getNutzenattraktivitaetOperativerNutzenId() + \" wird gelï¿½scht.\");\r\n            dao.deleteAssignment(n);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Setzt die zugehï¿½rigen Fragen von Nutzenkriterien zur Anzeige\r\n     * in den Request.\r\n     *\r\n     * @param request                   der HttpServletRequest\r\n     * @param form                      das Formular mit den Nutzenkriterien\r\n     * @return                          true bei Erfolg, sonst false\r\n     */\r\n    public boolean populateFragen(HttpServletRequest request, FragenForm form) {\r\n        // Benï¿½tigte ids holen\r\n        HttpSession session = request.getSession();\r\n        Integer customizingId = (Integer) session.getAttribute(Constants.CUSTOMIZING_ID);\r\n        Integer mandantId = (Integer) session.getAttribute(Constants.MANDANT_ID);\r\n        Integer naOpNuId = cService.getNaOpNuId(request, customizingId);\r\n        boolean isOperativerNutzen = cService.isOperativerNutzen(request);\r\n        // Alle zugewiesenen Nutzenkriterien zur gewï¿½hlten Kategorie holen\r\n        Nutzenkriterium n = new Nutzenkriterium();\r\n        n.setNutzenattraktivitaetOperativerNutzenId(naOpNuId);\r\n        n.setMandantId(mandantId);\r\n        List<Nutzenkriterium> kriterien = dao.getAssignments(n);\r\n        if (kriterien.size() == 0) {\r\n            return false;\r\n        }\r\n        // Formulardaten wieder abfï¿½llen (bei gescheiterter Validierung)\r\n        AutoGrowingList list = form.getNutzenkriteriumLine();\r\n        if (list != null) {\r\n            // Formulardaten zum Abgleich in eine HashMap stellen\r\n            Iterator it = list.iterator();\r\n            HashMap<Integer, String> formData = new HashMap<Integer, String>();\r\n            while (it.hasNext()) {\r\n                NutzenkriteriumLine nl = (NutzenkriteriumLine) it.next();\r\n                formData.put(nl.getNutzenkriteriumId(), nl.getFrage());\r\n            }\r\n            // Nutzennkriterium suchen\r\n            for (int i = 0; i < kriterien.size(); i++) {\r\n                Nutzenkriterium kriterium = (Nutzenkriterium) kriterien.get(i);\r\n                Integer nutzenkriteriumId = (Integer) kriterium.getNutzenkriteriumId();\r\n                if (formData.containsKey(nutzenkriteriumId)) {\r\n                    // Frage mit Formulardaten ersetzen\r\n                    String frage = formData.get(nutzenkriteriumId);\r\n                    // Fragen fï¿½r Projektbetroffene\r\n                    if (isOperativerNutzen) {\r\n                        logger.debug(\"Ersetze Frage in Datenbank: \" + kriterium.getFrageProjektbetroffene() + \" mit Frage aus Formular: \" + frage);\r\n                        kriterium.setFrageProjektbetroffene(frage);\r\n                    } else // Fragen fï¿½r Management\r\n                    {\r\n                        logger.debug(\"Ersetze Frage in Datenbank: \" + kriterium.getFrageManagement() + \" mit Frage aus Formular: \" + frage);\r\n                        kriterium.setFrageManagement(frage);\r\n                    }\r\n                    kriterien.set(i, kriterium);\r\n                }\r\n            }\r\n        }\r\n        // Operativer Nutzen -> Projektbetroffene\r\n        if (isOperativerNutzen) {\r\n            request.setAttribute(Constants.PROJEKTBETROFFENE, true);\r\n        }\r\n        request.setAttribute(Constants.NUTZENKRITERIEN, kriterien);\r\n        // Anzahl Kategorien holen\r\n        Kategorie k = new Kategorie();\r\n        k.setNutzenattraktivitaetOperativerNutzenId(naOpNuId);\r\n        k.setMandantId(mandantId);\r\n        List<Kategorie> kategorien = kService.getAssignments(k);\r\n        request.setAttribute(\"totalKategorien\", kategorien.size());\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Setzt die eingegebenen Daten zur Direkten Gewichtung aller\r\n     * gewï¿½hlten Nutzenkriterien in den Request, um diese anzeigen\r\n     * zu kï¿½nnen. Bei gescheiterter Validierung werden die Daten\r\n     * erneut angezeigt.\r\n     *\r\n     * @param request                   der HttpServletRequest\r\n     * @param form                      das Formular mit den Nutzenkriterien\r\n     */\r\n    public void populateDirekteGewichtung(HttpServletRequest request, FragenForm form) {\r\n        // Benï¿½tigte ids holen\r\n        HttpSession session = request.getSession();\r\n        Integer customizingId = (Integer) session.getAttribute(Constants.CUSTOMIZING_ID);\r\n        Integer mandantId = (Integer) session.getAttribute(Constants.MANDANT_ID);\r\n        Integer naOpNuId = cService.getNaOpNuId(request, customizingId);\r\n        // Alle zugewiesenen Nutzenkriterien zur gewï¿½hlten Kategorie holen\r\n        Nutzenkriterium n = new Nutzenkriterium();\r\n        n.setNutzenattraktivitaetOperativerNutzenId(naOpNuId);\r\n        n.setMandantId(mandantId);\r\n        List<Nutzenkriterium> kriterien = dao.getAssignments(n);\r\n        // Formulardaten wieder abfï¿½llen (bei gescheiterter Validierung)\r\n        AutoGrowingList list = form.getNutzenkriteriumLine();\r\n        if (list != null) {\r\n            // Formulardaten zum Abgleich in eine HashMap stellen\r\n            Iterator it = list.iterator();\r\n            HashMap<Integer, Double[]> formData = new HashMap<Integer, Double[]>();\r\n            while (it.hasNext()) {\r\n                NutzenkriteriumLine nl = (NutzenkriteriumLine) it.next();\r\n                Double kategorieGewichtung = 0.0;\r\n                Double gewichtung = 0.0;\r\n                try {\r\n                    kategorieGewichtung = new Double(nl.getKategorieGewichtung());\r\n                } catch (Exception e) {\r\n                }\r\n                try {\r\n                    gewichtung = new Double(nl.getGewichtung());\r\n                } catch (Exception e) {\r\n                }\r\n                Double[] gewichtungen = { gewichtung, kategorieGewichtung };\r\n                formData.put(nl.getNutzenkriteriumId(), gewichtungen);\r\n            }\r\n            // Nutzennkriterium suchen\r\n            for (int i = 0; i < kriterien.size(); i++) {\r\n                Nutzenkriterium kriterium = (Nutzenkriterium) kriterien.get(i);\r\n                Integer nutzenkriteriumId = (Integer) kriterium.getNutzenkriteriumId();\r\n                if (formData.containsKey(nutzenkriteriumId)) {\r\n                    // Gewichtung mit Formulardaten ersetzen\r\n                    Double[] gewichtungen = formData.get(nutzenkriteriumId);\r\n                    kriterium.setGewichtung(gewichtungen[0]);\r\n                    kriterium.setKategorieGewichtung(gewichtungen[1]);\r\n                    kriterien.set(i, kriterium);\r\n                }\r\n            }\r\n        }\r\n        request.setAttribute(Constants.NUTZENKRITERIEN, kriterien);\r\n    }\r\n\r\n    /**\r\n     * Speichert die Fragen zu den gewï¿½hlten Nutzenkriterien ab.\r\n     *\r\n     * @param request                   der HttpServletRequest\r\n     * @param form                      das Formular mit den Nutzenkriterien\r\n     * @param errors                    das ActionMessages Objekt zum Speichern\r\n     *                                  von Fehlermeldungen\r\n     * @return                          true bei Erfolg, sonst false\r\n     */\r\n    public boolean saveFragen(HttpServletRequest request, FragenForm form, ActionMessages errors) {\r\n        AutoGrowingList list = form.getNutzenkriteriumLine();\r\n        if (list == null) {\r\n            return false;\r\n        }\r\n        // Fragen ï¿½berprï¿½fen\r\n        Iterator it = list.iterator();\r\n        while (it.hasNext()) {\r\n            NutzenkriteriumLine nl = (NutzenkriteriumLine) it.next();\r\n            String frage = nl.getFrage();\r\n            if (frage == null || frage.length() == 0) {\r\n                errors.add(\"nutzenkriterium_\" + nl.getNutzenkriteriumId(), new ActionMessage(\"errors.required\", \"Frage\"));\r\n                return false;\r\n            }\r\n        }\r\n        // Benï¿½tigte ids holen\r\n        HttpSession session = request.getSession();\r\n        Integer customizingId = (Integer) session.getAttribute(Constants.CUSTOMIZING_ID);\r\n        Integer naOpNuId = cService.getNaOpNuId(request, customizingId);\r\n        // Fragen speichern\r\n        it = list.iterator();\r\n        while (it.hasNext()) {\r\n            NutzenkriteriumLine nl = (NutzenkriteriumLine) it.next();\r\n            Nutzenkriterium n = new Nutzenkriterium();\r\n            n.setNutzenkriteriumId(nl.getNutzenkriteriumId());\r\n            n.setNutzenattraktivitaetOperativerNutzenId(naOpNuId);\r\n            if (cService.isOperativerNutzen(request)) {\r\n                n.setFrageProjektbetroffene(nl.getFrage());\r\n            } else {\r\n                n.setFrageManagement(nl.getFrage());\r\n            }\r\n            logger.debug(\"nutzenkriteriumId: \" + n.getNutzenkriteriumId());\r\n            logger.debug(\"nutzenattraktivitaetId: \" + naOpNuId);\r\n            logger.debug(\"frage: \" + nl.getFrage());\r\n            dao.updateAssignment(n);\r\n        }\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Fï¿½gt ein neues Nutzenkriterium ein und wï¿½hlt dieses anschliessend\r\n     * automatisch aus.\r\n     *\r\n     * @param request                   der HttpServletRequest\r\n     * @param form                      das Formular mit dem neuen Nutzenkriterium\r\n     * @param errors                    das ActionMessages Objekt zum Speichern\r\n     *                                  von Fehlermeldungen\r\n     * @return                          true bei Erfolg, sonst false\r\n     */\r\n    public boolean add(HttpServletRequest request, DynaActionForm form, ActionMessages errors, ActionMessages messages) {\r\n        // Ids holen\r\n        HttpSession session = request.getSession();\r\n        Integer mandantId = (Integer) session.getAttribute(Constants.MANDANT_ID);\r\n        Integer customizingId = (Integer) session.getAttribute(Constants.CUSTOMIZING_ID);\r\n        // Formulardaten holen\r\n        String name = (String) form.get(\"name\");\r\n        Integer kategorieId = (Integer) form.get(Constants.KATEGORIE_ID);\r\n        logger.debug(\"name=\" + name);\r\n        logger.debug(\"kategorieId=\" + kategorieId);\r\n        // Formulardaten ï¿½berprï¿½fen\r\n        if (name == null || name.length() == 0) {\r\n            errors.add(\"name\", new ActionMessage(\"errors.required\", \"Name\"));\r\n            return false;\r\n        }\r\n        Nutzenkriterium n = new Nutzenkriterium();\r\n        n.setName(name);\r\n        n.setKategorieId(kategorieId);\r\n        n.setMandantId(mandantId);\r\n        // Auf duplikate prï¿½fen\r\n        if (dao.getByName(n) != null) {\r\n            messages.add(ActionMessages.GLOBAL_MESSAGE, new ActionMessage(\"errors.duplicate\", \"Nutzenkriterium\"));\r\n            return false;\r\n        }\r\n        // Nutzenkriterium einfï¿½gen\r\n        dao.insert(n);\r\n        // Nutzenkriterium setzen\r\n        Integer naOpNuId = cService.getNaOpNuId(request, customizingId);\r\n        n.setNutzenattraktivitaetOperativerNutzenId(naOpNuId);\r\n        dao.insertAssignment(n);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Speichert die Direkte Gewichtung von Nutzenkriterien\r\n     * der Nutzenattraktivitï¿½t bzw. des Operativen Nutzens.\r\n     *\r\n     * @param request                   der HttpServletRequest\r\n     * @param form                      das Formular mit den Nutzenkriterien\r\n     * @param errors                    das ActionMessages Objekt zum Speichern\r\n     *                                  von Fehlermeldungen\r\n     * @return                          true bei Erfolg, sonst false\r\n     */\r\n    public boolean saveDirekteGewichtung(HttpServletRequest request, FragenForm form, ActionMessages errors) {\r\n        // Formulardaten holen\r\n        AutoGrowingList list = form.getNutzenkriteriumLine();\r\n        if (list == null) {\r\n            return false;\r\n        }\r\n        // Gewichtungen ï¿½berprï¿½fen\r\n        Double gewichtung = 0.0;\r\n        Iterator it = list.iterator();\r\n        while (it.hasNext()) {\r\n            NutzenkriteriumLine nl = (NutzenkriteriumLine) it.next();\r\n            Integer nutzenkriteriumId = nl.getNutzenkriteriumId();\r\n            logger.debug(\"nutzenkrtieriumId=\" + nutzenkriteriumId);\r\n            String g = nl.getGewichtung();\r\n            logger.debug(\"Gewichtung: \" + g);\r\n            try {\r\n                gewichtung += new Double(g);\r\n            } catch (Exception e) {\r\n            }\r\n        }\r\n        logger.debug(\"Total gewichtungen: \" + gewichtung);\r\n        if (gewichtung < 99.999 || gewichtung > 100.0001) {\r\n            errors.add(ActionMessages.GLOBAL_MESSAGE, new ActionMessage(\"errors.gewichtung.failure\"));\r\n            return false;\r\n        }\r\n        /*\r\n    // Gewichtungen ï¿½berprï¿½fen\r\n    Iterator it = list.iterator();\r\n    ArrayList<Double> gewichtungsListe = new ArrayList<Double>(); \r\n    HashMap<Integer, ArrayList<Double>> gewichtungen = new HashMap<Integer, ArrayList<Double>>(); \r\n    Double kategorieGewichtung = 0.0;\r\n    boolean isFirst = true;\r\n    Integer tmpKategorieId = null;\r\n    while (it.hasNext()) {\r\n      NutzenkriteriumLine nl = (NutzenkriteriumLine) it.next();\r\n      Integer kategorieId = nl.getKategorieId();\r\n      Integer nutzenkriteriumId = nl.getNutzenkriteriumId();\r\n      logger.debug(\"kategorieId=\" + kategorieId);\r\n      logger.debug(\"nutzenkrtieriumId=\" + nutzenkriteriumId);\r\n      \r\n      // Gewichtung (muss pro Kategorie 100% ergeben)\r\n      String g = nl.getGewichtung();\r\n      logger.debug(\"Gewichtung: \" + g);\r\n      \r\n      \r\n      // Gewichtung fï¿½r die selbe Kategorie in eine Liste stellen\r\n      if (isFirst || kategorieId == null) {\r\n        isFirst = false;\r\n        tmpKategorieId = kategorieId;\r\n        try {\r\n          gewichtungsListe.add(new Double(g));\r\n        } catch (Exception e) {}\r\n      }\r\n      \r\n      // Nï¿½chste Kategorie \r\n      else {\r\n        gewichtungen.put(tmpKategorieId, gewichtungsListe);\r\n        gewichtungsListe = new ArrayList<Double>();\r\n        tmpKategorieId = kategorieId;\r\n        try {\r\n          gewichtungsListe.add(new Double(g));\r\n        } catch (Exception e) {}\r\n      }\r\n      \r\n      // kategorieGewichtung\r\n      String kg = nl.getKategorieGewichtung();\r\n      logger.debug(\"Gewichtung Kategorie: \" + kg);\r\n      try {\r\n        kategorieGewichtung += new Double(kg);\r\n      } catch (Exception e) {}\r\n    }\r\n    \r\n    it = gewichtungen.keySet().iterator();\r\n    while (it.hasNext()) {\r\n      Integer key = (Integer) it.next();\r\n      gewichtungsListe = gewichtungen.get(key);\r\n      Double gewichtung = 0.0;\r\n      for (Double d : gewichtungsListe) {\r\n        gewichtung += d;\r\n      }\r\n      \r\n      logger.debug(\"Total gewichtungen: \" + gewichtung);\r\n      if (gewichtung < 99.999 || gewichtung > 100) {\r\n        errors.add(ActionMessages.GLOBAL_MESSAGE,\r\n            new ActionMessage(\"errors.gewichtung.failure\"));\r\n        return false;\r\n      }\r\n    }\r\n    logger.debug(\"Total gewichtungen Kategorie: \" + kategorieGewichtung);\r\n    if (kategorieGewichtung < 99.999 || kategorieGewichtung > 100) {\r\n      errors.add(ActionMessages.GLOBAL_MESSAGE,\r\n          new ActionMessage(\"errors.gewichtung.failure\"));\r\n      return false;\r\n    }*/\r\n        // Benï¿½tigte ids holen\r\n        HttpSession session = request.getSession();\r\n        Integer customizingId = (Integer) session.getAttribute(Constants.CUSTOMIZING_ID);\r\n        Integer naOpNuId = cService.getNaOpNuId(request, customizingId);\r\n        // Allfï¿½llige indirekte Gewichtungen lï¿½schen\r\n        Auswahlfeld a = new Auswahlfeld();\r\n        a.setNutzenattraktivitaetOperativerNutzenId(naOpNuId);\r\n        aService.deleteGewichtungen(a);\r\n        // Gewichtung speichern\r\n        it = list.iterator();\r\n        while (it.hasNext()) {\r\n            NutzenkriteriumLine nl = (NutzenkriteriumLine) it.next();\r\n            Nutzenkriterium n = new Nutzenkriterium();\r\n            n.setNutzenkriteriumId(nl.getNutzenkriteriumId());\r\n            n.setNutzenattraktivitaetOperativerNutzenId(naOpNuId);\r\n            n.setGewichtung(new Double(nl.getGewichtung()));\r\n            dao.updateAssignmentGewichtung(n);\r\n            // Gewichtung der Kategorien speichern\r\n            Integer kategorieId = nl.getKategorieId();\r\n            if (kategorieId != null) {\r\n                Double g = null;\r\n                try {\r\n                    g = new Double(nl.getKategorieGewichtung());\r\n                } catch (Exception e) {\r\n                }\r\n                Kategorie k = new Kategorie();\r\n                k.setGewichtung(g);\r\n                k.setKategorieId(nl.getKategorieId());\r\n                k.setNutzenattraktivitaetOperativerNutzenId(naOpNuId);\r\n                kService.updateAssignment(k);\r\n            }\r\n        }\r\n        // Status setzen\r\n        boolean isNa = !cService.isOperativerNutzen(request);\r\n        if (isNa) {\r\n            logger.debug(\"GEWICHTUNGEN_NA=true\");\r\n            session.setAttribute(Constants.GEWICHTUNGEN_NA, true);\r\n        } else {\r\n            logger.debug(\"GEWICHTUNGEN_OP_NU=true\");\r\n            session.setAttribute(Constants.GEWICHTUNGEN_OP_NU, true);\r\n        }\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Prï¿½ft, ob eine Direkte Gewichtung vorliegt oder nicht.\r\n     *\r\n     * @param request                   der HttpServletRequest\r\n     * @return                          true bei Direkter Gewichtung, sonst false\r\n     */\r\n    public boolean direkteGewichtung(HttpServletRequest request) {\r\n        Integer typ = (Integer) request.getSession().getAttribute(Constants.GEWICHTUNGSTYP);\r\n        logger.debug(\"Direkte Gewichtung ausgewï¿½hlt\");\r\n        return typ == Constants.GEWICHTUNG_DIREKT;\r\n    }\r\n\r\n    /**\r\n     * Setzt den Status des Schritts \"Nutzenkriterien\", sowohl fï¿½r das\r\n     * Customizing Nutzenattraktiviï¿½t wie fï¿½r das Customizing Operativer Nutzen.\r\n     * Der Status zeigt in der Navigation an, ob dieser Schritt des Customizings\r\n     * bereits erfolgreich abgeschlossen wurde oder nicht.\r\n     *\r\n     * @param request                   der HttpServletRequest\r\n     * @param kategorien                eine Liste aller gewï¿½hlten Kategorien\r\n     * @param mandantId                 die Id des Mandanten\r\n     * @param naOpNuId                  die Id der Nutzenattraktivitï¿½t bzw.\r\n     *                                  des Operativen Nutzens\r\n     * @param isNa                      true fï¿½r Nutzenattraktivitï¿½t, sonst false\r\n     * @return                          Liste aller gewï¿½hlten Nutzenkriterien\r\n     */\r\n    public List<Nutzenkriterium> setStatus(HttpServletRequest request, List<Kategorie> kategorien, Integer mandantId, Integer naOpNuId, boolean isNa) {\r\n        boolean ok = true;\r\n        for (Kategorie k : kategorien) {\r\n            Nutzenkriterium nk = new Nutzenkriterium();\r\n            nk.setKategorieId(k.getKategorieId());\r\n            nk.setNutzenattraktivitaetOperativerNutzenId(naOpNuId);\r\n            List<Nutzenkriterium> nks = dao.getByNaOpNuAndKategorie(nk);\r\n            logger.debug(nks.size() + \" Nutzenkriterien in der Liste\");\r\n            if (nks == null || nks.size() == 0) {\r\n                ok = false;\r\n                break;\r\n            }\r\n        }\r\n        HttpSession session = request.getSession();\r\n        if (ok && isNa) {\r\n            session.setAttribute(Constants.NUTZENKRITERIEN_NA, true);\r\n            session.setAttribute(Constants.FRAGEN_NA, true);\r\n        } else if (ok) {\r\n            session.setAttribute(Constants.NUTZENKRITERIEN_OP_NU, true);\r\n            session.setAttribute(Constants.FRAGEN_OP_NU, true);\r\n        }\r\n        if (ok) {\r\n            Nutzenkriterium nk = new Nutzenkriterium();\r\n            nk.setMandantId(mandantId);\r\n            nk.setNutzenattraktivitaetOperativerNutzenId(naOpNuId);\r\n            return dao.getAssignments(nk);\r\n        } else if (!ok && isNa) {\r\n            session.removeAttribute(Constants.NUTZENKRITERIEN_NA);\r\n            session.removeAttribute(Constants.FRAGEN_NA);\r\n        } else {\r\n            session.removeAttribute(Constants.NUTZENKRITERIEN_OP_NU);\r\n            session.removeAttribute(Constants.FRAGEN_OP_NU);\r\n        }\r\n        return null;\r\n    }\r\n\r\n    /**\r\n     * Lï¿½scht die Fragebogen-Gewichtung des aktuellen Customizings.\r\n     *\r\n     * @param request                   der HttpServletRequest\r\n     */\r\n    public void deleteFragebogenGewichtung(HttpServletRequest request) {\r\n        // Benï¿½tigte ids holen\r\n        HttpSession session = request.getSession();\r\n        Integer customizingId = (Integer) session.getAttribute(Constants.CUSTOMIZING_ID);\r\n        Integer naOpNuId = cService.getNaOpNuId(request, customizingId);\r\n        // allfï¿½llige Gewichtung ï¿½ber Fragebogen lï¿½schen\r\n        Auswahlfeld a = new Auswahlfeld();\r\n        a = aService.setType(a, Constants.GEWICHTUNG);\r\n        a.setNutzenattraktivitaetOperativerNutzenId(naOpNuId);\r\n        logger.debug(\"Fragebogen-Gewichtung lï¿½schen:\");\r\n        logger.debug(\"nutzenattraktivitaetOperativerNutzenId=\" + a.getNutzenattraktivitaetOperativerNutzenId());\r\n        aService.deleteGewichtungen(a);\r\n    }\r\n\r\n    /**\r\n     * Selektiert die zuvor gewï¿½hlte Anzahl von Abstufungen fï¿½r die\r\n     * Stufenbeschriebe und die Gewichtung.\r\n     * Stellt den gewï¿½hlten Gewichtungstyp in den Request. Dies dient\r\n     * zur Vorauswahl der richtigen Checkbox im Formular \"Gewichtung\".\r\n     *\r\n     * @param request                   der HttpServletRequest\r\n     * @param path                      der Pfad der Action\r\n     */\r\n    public void preselect(HttpServletRequest request, String path) {\r\n        // Benï¿½tigte ids holen\r\n        HttpSession session = request.getSession();\r\n        Integer customizingId = (Integer) session.getAttribute(Constants.CUSTOMIZING_ID);\r\n        Integer naOpNuId = cService.getNaOpNuId(request, customizingId);\r\n        logger.debug(\"naOpNuId=\" + naOpNuId);\r\n        logger.debug(\"Pfad: \" + path);\r\n        // Abstufungstatus holen\r\n        List<Auswahlfeld> afs = new ArrayList<Auswahlfeld>();\r\n        if (path.contains(Constants.ABSTUFUNGEN_ACTION)) {\r\n            afs = aService.getAnzahlAbstufungen(naOpNuId);\r\n        } else // Gewichtungsstatus holen\r\n        {\r\n            afs = aService.getAnzahlGewichtungen(naOpNuId);\r\n        }\r\n        logger.debug(afs.size() + \" Abstufungen in der Liste\");\r\n        request.setAttribute(Constants.ABSTUFUNGEN, afs.size());\r\n        // Gewichtung bestimmen\r\n        List<Auswahlfeld> gewichtungen = aService.getGewichtungStatus(naOpNuId);\r\n        if (gewichtungen.size() > 0) {\r\n            request.setAttribute(Constants.GEWICHTUNG_NOT_DIRECT, true);\r\n        } else {\r\n            request.removeAttribute(Constants.GEWICHTUNG_NOT_DIRECT);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Kopiert alle Zuweisungen von Nutzenkriterien von einer Nutzenattraktivitï¿½t\r\n     * bzw. von einem Operativen Nutzen zu einer neuen Id. Wird zum Kopieren\r\n     * von Customizings verwendet.\r\n     *\r\n     * @param mandantId                 die Id des Mandanten\r\n     * @param naOpNuId                  die Id der Nutzenattraktivitï¿½t bzw. des\r\n     *                                  Operativen Nutzens, welche die zu kopierenden\r\n     *                                  Zuweisungen enthï¿½lt\r\n     * @param newNaOpNuId               die neue Id fï¿½r die kopierten Zuweisungen\r\n     */\r\n    public void copy(Integer mandantId, Integer naOpNuId, Integer newNaOpNuId) {\r\n        Nutzenkriterium n = new Nutzenkriterium();\r\n        n.setNutzenattraktivitaetOperativerNutzenId(naOpNuId);\r\n        n.setMandantId(mandantId);\r\n        List<Nutzenkriterium> kriterien = dao.getAssignments(n);\r\n        for (Nutzenkriterium kriterium : kriterien) {\r\n            kriterium.setNutzenattraktivitaetOperativerNutzenId(newNaOpNuId);\r\n            dao.insertAssignment(kriterium);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * ï¿½berprï¿½ft, ob ein Customizing komplett ist.\r\n     *\r\n     * @param request                   der HttpServletRequest\r\n     * @return                          true bei komplettem Customizing, sonst false\r\n     */\r\n    public boolean customizingComplete(HttpServletRequest request) {\r\n        return customizingService.complete(request);\r\n    }\r\n\r\n    /**\r\n     * Erstellt ein Objekt vom Typ Nutzenkriterium mit der id des Mandanten\r\n     * und, falls angegeben, mit abgefï¿½llten Formulardaten\r\n     *\r\n     * @param request                   der HttpServletRequest\r\n     * @param form                      das DynaActionForm\r\n     * @return                          Nutzenkriterium mit mandantId\r\n     */\r\n    private Nutzenkriterium createNutzenkriterium(HttpServletRequest request, DynaActionForm form) {\r\n        Integer mandantId = (Integer) request.getSession().getAttribute(Constants.MANDANT_ID);\r\n        Nutzenkriterium n = new Nutzenkriterium();\r\n        n.setMandantId(mandantId);\r\n        if (form != null) {\r\n            Integer id = (Integer) form.get(Constants.NUTZENKRITERIUM_ID);\r\n            String name = (String) form.get(Constants.NAME);\r\n            String beschreibung = (String) form.get(\"beschreibung\");\r\n            String frageManagementDefault = (String) form.get(\"frageManagementDefault\");\r\n            String frageProjektbetroffeneDefault = (String) form.get(\"frageProjektbetroffeneDefault\");\r\n            Integer kategorieId = (Integer) form.get(Constants.KATEGORIE_ID);\r\n            n.setNutzenkriteriumId(id);\r\n            n.setName(name);\r\n            n.setBeschreibung(beschreibung);\r\n            n.setFrageManagementDefault(frageManagementDefault);\r\n            n.setFrageProjektbetroffeneDefault(frageProjektbetroffeneDefault);\r\n            n.setKategorieId(kategorieId);\r\n        }\r\n        return n;\r\n    }\r\n\r\n    /**\r\n     * ï¿½berprï¿½ft, ob die Id eines Nutzenkriteriums Ziels im Request ist\r\n     * (update) oder nicht (neu).\r\n     *\r\n     * @param request                   der HttpServletRequest\r\n     * @param form                      das DynaActionForm\r\n     * @return                          true, wenn das angegebene Nutzenkriterium\r\n     *                                  besteht, sonst false.\r\n     */\r\n    private boolean isUpdate(HttpServletRequest request, DynaActionForm form) {\r\n        Integer id = (Integer) form.get(Constants.NUTZENKRITERIUM_ID);\r\n        if (id == null || id == 0) {\r\n            return false;\r\n        }\r\n        return true;\r\n    }\r\n}\r\n",
		"id": "EvoSuiteBenchmark/46_nutzenportfolio/src/main/java/ch/bfh/egov/nutzenportfolio/service/nutzenkriterium/NutzenkriteriumDaoServiceTest5.java",
		"test_prompt": "// NutzenkriteriumDaoServiceTest5.java\npackage ch.bfh.egov.nutzenportfolio.service.nutzenkriterium;\n\nimport java.util.ArrayList;\nimport java.util.Collections;\nimport java.util.Comparator;\nimport java.util.HashMap;\nimport java.util.Iterator;\nimport java.util.List;\nimport javax.servlet.http.HttpServletRequest;\nimport javax.servlet.http.HttpSession;\nimport org.apache.commons.logging.Log;\nimport org.apache.commons.logging.LogFactory;\nimport org.apache.struts.action.ActionMessage;\nimport org.apache.struts.action.ActionMessages;\nimport org.apache.struts.action.DynaActionForm;\nimport ch.bfh.egov.nutzenportfolio.Constants;\nimport ch.bfh.egov.nutzenportfolio.common.AutoGrowingList;\nimport ch.bfh.egov.nutzenportfolio.common.NutzenkriteriumLine;\nimport ch.bfh.egov.nutzenportfolio.form.FragenForm;\nimport ch.bfh.egov.nutzenportfolio.persistence.nutzenkriterium.NutzenkriteriumDao;\nimport ch.bfh.egov.nutzenportfolio.service.auswahlfeld.AuswahlfeldService;\nimport ch.bfh.egov.nutzenportfolio.service.common.CommonService;\nimport ch.bfh.egov.nutzenportfolio.service.customizing.CustomizingService;\nimport ch.bfh.egov.nutzenportfolio.service.kategorie.KategorieService;\nimport ch.bfh.egov.nutzenportfolio.tos.Auswahlfeld;\nimport ch.bfh.egov.nutzenportfolio.tos.Customizing;\nimport ch.bfh.egov.nutzenportfolio.tos.Kategorie;\nimport ch.bfh.egov.nutzenportfolio.tos.NaOpNu;\nimport ch.bfh.egov.nutzenportfolio.tos.Nutzenkriterium;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link NutzenkriteriumDaoService}.\n* It contains ten unit test cases for the {@link NutzenkriteriumDaoService#saveDirekteGewichtung(HttpServletRequest, FragenForm, ActionMessages)} method.\n*/\nclass NutzenkriteriumDaoServiceTest5 {"
	},
	{
		"original_code": "// NutzenkriteriumDaoService.java\n/**\r\n * Nutzenportfolio\r\n * Copyright (C) 2006 Kompetenzzentrum E-Business, Simon Bergamin\r\n *\r\n * This program is free software; you can redistribute it and/or\r\n * modify it under the terms of the GNU General Public License\r\n * as published by the Free Software Foundation; either version 2\r\n * of the License, or (at your option) any later version.\r\n *\r\n * This program is distributed in the hope that it will be useful,\r\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n * GNU General Public License for more details.\r\n *\r\n * You should have received a copy of the GNU General Public License\r\n * along with this program; if not, write to the Free Software\r\n * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\r\n */\r\npackage ch.bfh.egov.nutzenportfolio.service.nutzenkriterium;\r\n\r\nimport java.util.ArrayList;\r\nimport java.util.Collections;\r\nimport java.util.Comparator;\r\nimport java.util.HashMap;\r\nimport java.util.Iterator;\r\nimport java.util.List;\r\nimport javax.servlet.http.HttpServletRequest;\r\nimport javax.servlet.http.HttpSession;\r\nimport org.apache.commons.logging.Log;\r\nimport org.apache.commons.logging.LogFactory;\r\nimport org.apache.struts.action.ActionMessage;\r\nimport org.apache.struts.action.ActionMessages;\r\nimport org.apache.struts.action.DynaActionForm;\r\nimport ch.bfh.egov.nutzenportfolio.Constants;\r\nimport ch.bfh.egov.nutzenportfolio.common.AutoGrowingList;\r\nimport ch.bfh.egov.nutzenportfolio.common.NutzenkriteriumLine;\r\nimport ch.bfh.egov.nutzenportfolio.form.FragenForm;\r\nimport ch.bfh.egov.nutzenportfolio.persistence.nutzenkriterium.NutzenkriteriumDao;\r\nimport ch.bfh.egov.nutzenportfolio.service.auswahlfeld.AuswahlfeldService;\r\nimport ch.bfh.egov.nutzenportfolio.service.common.CommonService;\r\nimport ch.bfh.egov.nutzenportfolio.service.customizing.CustomizingService;\r\nimport ch.bfh.egov.nutzenportfolio.service.kategorie.KategorieService;\r\nimport ch.bfh.egov.nutzenportfolio.tos.Auswahlfeld;\r\nimport ch.bfh.egov.nutzenportfolio.tos.Customizing;\r\nimport ch.bfh.egov.nutzenportfolio.tos.Kategorie;\r\nimport ch.bfh.egov.nutzenportfolio.tos.NaOpNu;\r\nimport ch.bfh.egov.nutzenportfolio.tos.Nutzenkriterium;\r\n\r\n/**\r\n * Implementierende Service-Klasse fï¿½r Nutzenkriterien.\r\n *\r\n * @author Kompetenzzentrum E-Business, Simon Bergamin\r\n */\r\npublic class NutzenkriteriumDaoService implements NutzenkriteriumService {\r\n\r\n    private NutzenkriteriumDao dao;\r\n\r\n    private CommonService cService;\r\n\r\n    private KategorieService kService;\r\n\r\n    private AuswahlfeldService aService;\r\n\r\n    private CustomizingService customizingService;\r\n\r\n    private Log logger = LogFactory.getLog(this.getClass());\r\n\r\n    /**\r\n     * Konstruktor. ï¿½bergabe des DataAcessObject-Interfaces fï¿½r Nutzenkriterien.\r\n     *\r\n     * @param dao                               Nutzenkriterien DataAcessObject-Interface\r\n     */\r\n    public NutzenkriteriumDaoService(NutzenkriteriumDao dao) {\r\n        this.dao = dao;\r\n    }\r\n\r\n    /**\r\n     * @see ch.bfh.egov.nutzenportfolio.persistence.nutzenkriterium.NutzenkriteriumIbatisDao#getAssignmentById(Nutzenkriterium)\r\n     */\r\n    public Nutzenkriterium getAssignmentById(Nutzenkriterium kriterium) {\r\n        return dao.getAssignmentById(kriterium);\r\n    }\r\n\r\n    /**\r\n     * @see ch.bfh.egov.nutzenportfolio.persistence.nutzenkriterium.NutzenkriteriumIbatisDao#getByProjektId(NaOpNu)\r\n     */\r\n    public List<Nutzenkriterium> getByProjektId(NaOpNu naOpNu) {\r\n        return dao.getByProjektId(naOpNu);\r\n    }\r\n\r\n    /**\r\n     * @see ch.bfh.egov.nutzenportfolio.persistence.nutzenkriterium.NutzenkriteriumIbatisDao#getAssignments(Nutzenkriterium)\r\n     */\r\n    public List<Nutzenkriterium> getAssignments(Nutzenkriterium kriterium) {\r\n        return dao.getAssignments(kriterium);\r\n    }\r\n\r\n    /**\r\n     * @see ch.bfh.egov.nutzenportfolio.persistence.nutzenkriterium.NutzenkriteriumIbatisDao#update(Nutzenkriterium)\r\n     */\r\n    public void update(Nutzenkriterium kriterium) {\r\n        dao.updateAssignment(kriterium);\r\n    }\r\n\r\n    /**\r\n     * @see ch.bfh.egov.nutzenportfolio.persistence.nutzenkriterium.NutzenkriteriumIbatisDao#unsetAssignmentGewichtung(Integer)\r\n     */\r\n    public void unsetAssignmentGewichtung(Integer naOpNuId) {\r\n        dao.unsetAssignmentGewichtung(naOpNuId);\r\n    }\r\n\r\n    /**\r\n     * @see ch.bfh.egov.nutzenportfolio.persistence.nutzenkriterium.NutzenkriteriumIbatisDao#deleteAssignments(Integer)\r\n     */\r\n    public void deleteAssignments(Integer naOpNuId) {\r\n        dao.deleteAssignments(naOpNuId);\r\n    }\r\n\r\n    /**\r\n     * Initialisierung dieses Service-Objekts durch ï¿½bergabe anderer,\r\n     * benï¿½tigter Service-Objekte.\r\n     *\r\n     * @param aService                   AuswahlFeldService Objekt\r\n     * @param cService                   CommonService Objekt\r\n     * @param kService                   KategorieService Objekt\r\n     * @param customizingService         CustomizingService Objekt\r\n     */\r\n    public void init(AuswahlfeldService aService, CommonService cService, KategorieService kService, CustomizingService customizingService) {\r\n        this.aService = aService;\r\n        this.cService = cService;\r\n        this.kService = kService;\r\n        this.customizingService = customizingService;\r\n    }\r\n\r\n    /**\r\n     * Stellt eine Liste aller Nutzenkriterien in den request.\r\n     *\r\n     * @param request                   der HttpServletRequest\r\n     */\r\n    public void list(HttpServletRequest request) {\r\n        Integer mandantId = (Integer) request.getSession().getAttribute(Constants.MANDANT_ID);\r\n        List<Nutzenkriterium> kriterien = dao.getAll(mandantId);\r\n        // Sortieren der Nutzenkriterien nach Namen\r\n        Collections.<Nutzenkriterium>sort(kriterien, new Comparator<Nutzenkriterium>() {\r\n\r\n            public int compare(Nutzenkriterium a, Nutzenkriterium b) {\r\n                String name1 = a.getName().toLowerCase();\r\n                String name2 = b.getName().toLowerCase();\r\n                return name1.compareTo(name2);\r\n            }\r\n        });\r\n        request.setAttribute(Constants.NUTZENKRITERIEN, kriterien);\r\n    }\r\n\r\n    /**\r\n     * Stellt eine Liste von Nutzenkriterien sowie deren zugehï¿½rigen\r\n     * Kategorien in den Request. Pro Request bzw. pro Seitenaufruf\r\n     * wird eine Kategorie mit den jeweiligen Nutzenkriterien angezeigt.\r\n     * Mit einem Klick auf \"weiter\" gelangt der Benutzer zur nï¿½chsten Seite\r\n     * bzw. der nï¿½chsten gewï¿½hlten Kategorie.\r\n     *\r\n     * @param request                   der HttpServletRequest\r\n     * @return                          true bei Erfolg, sonst false\r\n     */\r\n    public boolean populate(HttpServletRequest request) {\r\n        // Benï¿½tigte ids holen\r\n        HttpSession session = request.getSession();\r\n        Integer mandantId = (Integer) session.getAttribute(Constants.MANDANT_ID);\r\n        Integer customizingId = (Integer) session.getAttribute(Constants.CUSTOMIZING_ID);\r\n        Integer naOpNuId = cService.getNaOpNuId(request, customizingId);\r\n        logger.debug(\"naOpNuId=\" + naOpNuId);\r\n        // Zugewiesene Kategorien holen\r\n        Kategorie k = new Kategorie();\r\n        k.setNutzenattraktivitaetOperativerNutzenId(naOpNuId);\r\n        k.setMandantId(mandantId);\r\n        List<Kategorie> kategorien = kService.getAssignments(k);\r\n        Integer kategorieId = null;\r\n        Integer step = null;\r\n        if (kategorien.size() == 0) {\r\n            return false;\r\n        }\r\n        // 1 Schritt pro Kategorie. Parameter ï¿½berprï¿½fen.\r\n        String stepStr = request.getParameter(Constants.STEP);\r\n        String next = request.getParameter(Constants.NEXT);\r\n        logger.debug(\"Angegebener step: \" + stepStr);\r\n        try {\r\n            step = new Integer(stepStr);\r\n        } catch (NumberFormatException nfex) {\r\n            step = 1;\r\n        }\r\n        // Denselben Schritt wiederholen, wenn nicht \"weiter\" geklickt wurde\r\n        if (next == null && step > 1) {\r\n            --step;\r\n        }\r\n        // Kategorien in Array stellen\r\n        Integer[] kategorienIdArr = new Integer[kategorien.size()];\r\n        String[] kategorienNameArr = new String[kategorien.size()];\r\n        int i = 0;\r\n        for (Kategorie kategorie : kategorien) {\r\n            kategorienIdArr[i] = kategorie.getKategorieId();\r\n            kategorienNameArr[i++] = kategorie.getName();\r\n            logger.debug(\"Kategorie: id=\" + kategorienIdArr[i - 1] + \", name=\" + kategorienNameArr[i - 1]);\r\n        }\r\n        // Auf inkorrekten step Parameter prï¿½fen\r\n        if ((step - 1) >= kategorienIdArr.length) {\r\n            logger.warn(\"Nicht verfï¿½gbarer Schritt ausgewï¿½hlt!\");\r\n            step = 1;\r\n        }\r\n        // Auf letzten Schritt prï¿½fen\r\n        if (step == kategorienIdArr.length) {\r\n            request.setAttribute(Constants.LAST_STEP, true);\r\n        }\r\n        // Id der Kategorie anhand des step Parameters holen\r\n        kategorieId = kategorienIdArr[step - 1];\r\n        logger.debug(\"Gewaehlte Kategorie: \" + kategorieId);\r\n        request.setAttribute(Constants.KATEGORIE_ID, kategorieId);\r\n        request.setAttribute(\"kategorie\", kategorienNameArr[step - 1]);\r\n        request.setAttribute(Constants.STEP, step + 1);\r\n        // Alle Nutzenkriterien zur gewï¿½hlten Kategorie holen\r\n        Nutzenkriterium n = new Nutzenkriterium();\r\n        n.setNutzenattraktivitaetOperativerNutzenId(naOpNuId);\r\n        n.setKategorieId(kategorieId);\r\n        n.setMandantId(mandantId);\r\n        // Nutzenkriterien aussortieren, die einem anderen Customizing zugeordnet sind\r\n        List<Nutzenkriterium> nutzenkriterien = dao.getByKategorie(n);\r\n        Iterator it = nutzenkriterien.iterator();\r\n        HashMap<String, Nutzenkriterium> map = new HashMap<String, Nutzenkriterium>();\r\n        while (it.hasNext()) {\r\n            Nutzenkriterium nk = (Nutzenkriterium) it.next();\r\n            String name = nk.getName();\r\n            boolean contains = map.containsKey(name);\r\n            Integer nuNaOpNuId = nk.getNutzenattraktivitaetOperativerNutzenId();\r\n            // HashMap abfï¿½llen um allfï¿½llige doppelte Nutzenkriterien auszusortieren\r\n            // (ist der Fall bei Zuweisungen zu anderen Customizings)\r\n            if (!contains || nuNaOpNuId != null && contains && nuNaOpNuId.equals(naOpNuId)) {\r\n                map.put(name, nk);\r\n            }\r\n        }\r\n        nutzenkriterien = new ArrayList<Nutzenkriterium>(map.values());\r\n        request.setAttribute(Constants.NUTZENKRITERIEN, nutzenkriterien);\r\n        // Operativer Nutzen -> Projektbetroffene\r\n        if (cService.isOperativerNutzen(request)) {\r\n            request.setAttribute(Constants.PROJEKTBETROFFENE, true);\r\n        }\r\n        Integer levels = (Integer) request.getSession().getAttribute(Constants.ABSTUFUNGEN);\r\n        request.setAttribute(\"totalKategorien\", ((levels != null) ? kategorien.size() : 0));\r\n        // Alle zugewiesenen Nutzenkriterien zur gewï¿½hlten Kategorie holen\r\n        List nAssigned = dao.getAssignments(n);\r\n        request.setAttribute(Constants.NA_OP_NU_ID, naOpNuId);\r\n        request.setAttribute(Constants.NUTZENKRITERIEN_ASSIGNED, nAssigned);\r\n        boolean isNa = !cService.isOperativerNutzen(request);\r\n        setStatus(request, kategorien, mandantId, naOpNuId, isNa);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Fï¿½llt ein Formular mit bestehenden Daten eines Nutzenkriteriums ab,\r\n     * falls eine entsprechende id angegeben wurde.\r\n     *\r\n     * @param request                   der HttpServletRequest\r\n     * @param form                      das DynaActionForm\r\n     */\r\n    public void edit(HttpServletRequest request, DynaActionForm form) {\r\n        if (isUpdate(request, form)) {\r\n            Nutzenkriterium n = createNutzenkriterium(request, form);\r\n            Integer mandantId = n.getMandantId();\r\n            n = dao.getById(n);\r\n            form.set(\"name\", n.getName());\r\n            form.set(\"beschreibung\", n.getBeschreibung());\r\n            form.set(\"frageManagementDefault\", n.getFrageManagementDefault());\r\n            form.set(\"frageProjektbetroffeneDefault\", n.getFrageProjektbetroffeneDefault());\r\n            form.set(Constants.KATEGORIE_ID, n.getKategorieId());\r\n            // Kategorien in die Session stellen\r\n            logger.debug(\"Kategorien holen fï¿½r mandantId=\" + mandantId);\r\n            List<Kategorie> kategorien = kService.getAll(mandantId);\r\n            request.getSession().setAttribute(Constants.KATEGORIEN, kategorien);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Fï¿½hrt ein update eines bestenenden Nutzenkriteriums anhand von\r\n     * Formulardaten durch.\r\n     *\r\n     * @param request                   der HttpServletRequest\r\n     * @param form                      das DynaActionForm\r\n     */\r\n    public void update(HttpServletRequest request, DynaActionForm form) {\r\n        logger.debug(\"Update Nutzenkriterium\");\r\n        if (isUpdate(request, form)) {\r\n            logger.debug(\"Update durchfï¿½hren\");\r\n            Nutzenkriterium n = createNutzenkriterium(request, form);\r\n            dao.update(n);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Prï¿½ft, ob ein Nutzenkriterium existiert und gibt es zurï¿½ck.\r\n     *\r\n     * @param request                   der HttpServletRequest\r\n     * @param form                      das DynaActionForm\r\n     * @return                          das Nutzenkriterium\r\n     */\r\n    public Nutzenkriterium getNutzenkriterium(HttpServletRequest request, DynaActionForm form) {\r\n        Nutzenkriterium n = createNutzenkriterium(request, form);\r\n        return dao.getById(n);\r\n    }\r\n\r\n    /**\r\n     * Abfrage fï¿½r das Lï¿½schen von einem Nutzenkriterium.\r\n     *\r\n     * @param request                   der HttpServletRequest\r\n     * @param kriterium                 das zu lï¿½schende Nutzenkriterium\r\n     * @param messages                  das ActionMessages Objekt\r\n     */\r\n    public void deleteQuestion(HttpServletRequest request, Nutzenkriterium kriterium, ActionMessages messages) {\r\n        // Verknï¿½pfungen prï¿½fen\r\n        linkedTo(request, kriterium);\r\n        // Bestï¿½tigungsnachricht ausgeben\r\n        messages.add(ActionMessages.GLOBAL_MESSAGE, new ActionMessage(\"messages.question.delete\", kriterium.getName()));\r\n        // Actions zum Lï¿½schen und Abbrechen definieren\r\n        request.setAttribute(Constants.ACTION, Constants.VERWALTUNG_NUTZENKRITERIEN_ACTION);\r\n        request.setAttribute(Constants.DISPATCH_YES, Constants.DELETE);\r\n        request.setAttribute(Constants.DISPATCH_NO, Constants.LIST);\r\n        request.setAttribute(Constants.ID_NAME, Constants.NUTZENKRITERIUM_ID);\r\n        request.setAttribute(Constants.ID_VALUE, kriterium.getNutzenkriteriumId());\r\n    }\r\n\r\n    /**\r\n     * Setzt die Verknï¿½pfungen zu diesem Nutzenkriterium in den Request.\r\n     * Ein Nutzenkriterium kann mit Customizings verknï¿½pft sein. Diese\r\n     * Methode wird bei der Lï¿½schabfrage verwendet.\r\n     *\r\n     * @param request                   der HttpServletRequest\r\n     * @param kritierium                das zu lï¿½schende Nutzenkriterium\r\n     */\r\n    public void linkedTo(HttpServletRequest request, Nutzenkriterium kritierium) {\r\n        HashMap<String, List> map = new HashMap<String, List>();\r\n        // Customizings suchen, die dieses Nutzenkriterium benï¿½tigen\r\n        List<Customizing> customizings = dao.getLinkedCustomizings(kritierium);\r\n        if (customizings.size() > 0) {\r\n            for (Customizing c : customizings) {\r\n                if (c.getStatus()) {\r\n                    request.setAttribute(\"active\", true);\r\n                    break;\r\n                }\r\n            }\r\n            map.put(\"Customizings\", customizings);\r\n        }\r\n        request.setAttribute(\"linked\", map);\r\n    }\r\n\r\n    /**\r\n     * Lï¿½scht ein Nutzenkriterium. Falls es mit inaktiven Customizings\r\n     * verknï¿½ft ist, werden diese ebenfalls gelï¿½scht. Wenn aktive Customizings\r\n     * verknï¿½ft sind, wird das Nutzenkriterium nicht gelï¿½scht.\r\n     *\r\n     * @param request                   der HttpServletRequest\r\n     * @param kriterium                 das zu lï¿½schende Nutzenkriterium\r\n     */\r\n    public void delete(HttpServletRequest request, Nutzenkriterium kriterium) {\r\n        // Verknï¿½pfungen prï¿½fen\r\n        linkedTo(request, kriterium);\r\n        Boolean active = (Boolean) request.getAttribute(\"active\");\r\n        // Aktives Customizing verknï¿½ft. Dies sollte nicht passieren ausser bei\r\n        // einem direkten URL-Aufruf ...\r\n        if (active != null && active) {\r\n            logger.debug(\"Aktives Customizing verknï¿½pft, Nutzenkriterium wird nicht gelï¿½scht\");\r\n            return;\r\n        }\r\n        // Customizings lï¿½schen\r\n        List<Customizing> customizings = dao.getLinkedCustomizings(kriterium);\r\n        for (Customizing c : customizings) {\r\n            logger.debug(\"Lï¿½sche Customizing \" + c.getCustomizingId());\r\n            customizingService.cascadeDelete(request, c);\r\n        }\r\n        // Lï¿½schen des Nutzenkriteriums\r\n        dao.delete(kriterium);\r\n    }\r\n\r\n    /**\r\n     * Weist dem aktuellen Customizing das gewï¿½hlte Nutzenkriterium zu.\r\n     * Wenn das Nutzenkriterium eine Default-Frage besitzt, wird diese\r\n     * zur spï¿½teren Verwendung in der Verknï¿½pfungstabelle gespeichert.\r\n     *\r\n     * @param request                   der HttpServletRequest\r\n     * @param form                      das Formular mit dem gewï¿½hlten Nutzenkriterium\r\n     */\r\n    public void set(HttpServletRequest request, DynaActionForm form) {\r\n        // Benï¿½tigte ids holen\r\n        HttpSession session = request.getSession();\r\n        Integer customizingId = (Integer) session.getAttribute(Constants.CUSTOMIZING_ID);\r\n        Integer mandantId = (Integer) session.getAttribute(Constants.MANDANT_ID);\r\n        Integer naOpNuId = cService.getNaOpNuId(request, customizingId);\r\n        Integer nutzenkriteriumId = (Integer) form.get(Constants.NUTZENKRITERIUM_ID);\r\n        if (nutzenkriteriumId == null) {\r\n            return;\r\n        }\r\n        // Nutzenkriterium zuweisen\r\n        logger.debug(\"Nutzenkriterium zuweisen: \" + nutzenkriteriumId);\r\n        Nutzenkriterium n = new Nutzenkriterium();\r\n        n.setNutzenkriteriumId(nutzenkriteriumId);\r\n        n.setMandantId(mandantId);\r\n        n.setNutzenattraktivitaetOperativerNutzenId(naOpNuId);\r\n        // Default fragen holen und setzen\r\n        Nutzenkriterium fragen = dao.getDefaultFragen(n);\r\n        if (cService.isOperativerNutzen(request)) {\r\n            n.setFrageProjektbetroffene(fragen.getFrageProjektbetroffeneDefault());\r\n        } else {\r\n            n.setFrageManagement(fragen.getFrageManagementDefault());\r\n        }\r\n        dao.insertAssignment(n);\r\n    }\r\n\r\n    /**\r\n     * ï¿½berprï¿½ft, ob das aktuelle Nutzenkriterium zum letzten\r\n     * Schritt bzw. zur letzten gewï¿½hlten Kategorie gehï¿½rt. Wenn\r\n     * ja, kann zur nï¿½chsten Action gesprungen werden.\r\n     *\r\n     * @param request                   der HttpServletRequest\r\n     * @return                          true beim letzten Schritt, sonst false\r\n     */\r\n    public boolean next(HttpServletRequest request) {\r\n        // Nï¿½chste Action?\r\n        String last = request.getParameter(Constants.LAST_STEP);\r\n        if (last != null && last.equals(\"true\")) {\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    /**\r\n     * Entfernt die Zuweisung des gewï¿½hlten Nutzenkriteriums zum\r\n     * aktuellen Customizing.\r\n     *\r\n     * @param request                   der HttpServletRequest\r\n     * @param form                      das Formular mit dem Nutzenkriterium\r\n     */\r\n    public void remove(HttpServletRequest request, DynaActionForm form) {\r\n        // Nutzenkriterium anhand der id holen\r\n        HttpSession session = request.getSession();\r\n        Integer mandantId = (Integer) session.getAttribute(Constants.MANDANT_ID);\r\n        Integer nutzenkriteriumId = (Integer) form.get(Constants.NUTZENKRITERIUM_ID);\r\n        Integer naOpNuId = (Integer) form.get(Constants.NA_OP_NU_ID);\r\n        Nutzenkriterium n = new Nutzenkriterium();\r\n        n.setNutzenkriteriumId(nutzenkriteriumId);\r\n        n.setNutzenattraktivitaetOperativerNutzenId(naOpNuId);\r\n        n.setMandantId(mandantId);\r\n        n = dao.getAssignmentById(n);\r\n        // Zuweisung lï¿½schen\r\n        if (n != null) {\r\n            logger.debug(\"Zuweisung nutzenkriteriumId=\" + nutzenkriteriumId + \", nutzenattraktivitaetOperativerNutzenId=\" + n.getNutzenattraktivitaetOperativerNutzenId() + \" wird gelï¿½scht.\");\r\n            dao.deleteAssignment(n);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Setzt die zugehï¿½rigen Fragen von Nutzenkriterien zur Anzeige\r\n     * in den Request.\r\n     *\r\n     * @param request                   der HttpServletRequest\r\n     * @param form                      das Formular mit den Nutzenkriterien\r\n     * @return                          true bei Erfolg, sonst false\r\n     */\r\n    public boolean populateFragen(HttpServletRequest request, FragenForm form) {\r\n        // Benï¿½tigte ids holen\r\n        HttpSession session = request.getSession();\r\n        Integer customizingId = (Integer) session.getAttribute(Constants.CUSTOMIZING_ID);\r\n        Integer mandantId = (Integer) session.getAttribute(Constants.MANDANT_ID);\r\n        Integer naOpNuId = cService.getNaOpNuId(request, customizingId);\r\n        boolean isOperativerNutzen = cService.isOperativerNutzen(request);\r\n        // Alle zugewiesenen Nutzenkriterien zur gewï¿½hlten Kategorie holen\r\n        Nutzenkriterium n = new Nutzenkriterium();\r\n        n.setNutzenattraktivitaetOperativerNutzenId(naOpNuId);\r\n        n.setMandantId(mandantId);\r\n        List<Nutzenkriterium> kriterien = dao.getAssignments(n);\r\n        if (kriterien.size() == 0) {\r\n            return false;\r\n        }\r\n        // Formulardaten wieder abfï¿½llen (bei gescheiterter Validierung)\r\n        AutoGrowingList list = form.getNutzenkriteriumLine();\r\n        if (list != null) {\r\n            // Formulardaten zum Abgleich in eine HashMap stellen\r\n            Iterator it = list.iterator();\r\n            HashMap<Integer, String> formData = new HashMap<Integer, String>();\r\n            while (it.hasNext()) {\r\n                NutzenkriteriumLine nl = (NutzenkriteriumLine) it.next();\r\n                formData.put(nl.getNutzenkriteriumId(), nl.getFrage());\r\n            }\r\n            // Nutzennkriterium suchen\r\n            for (int i = 0; i < kriterien.size(); i++) {\r\n                Nutzenkriterium kriterium = (Nutzenkriterium) kriterien.get(i);\r\n                Integer nutzenkriteriumId = (Integer) kriterium.getNutzenkriteriumId();\r\n                if (formData.containsKey(nutzenkriteriumId)) {\r\n                    // Frage mit Formulardaten ersetzen\r\n                    String frage = formData.get(nutzenkriteriumId);\r\n                    // Fragen fï¿½r Projektbetroffene\r\n                    if (isOperativerNutzen) {\r\n                        logger.debug(\"Ersetze Frage in Datenbank: \" + kriterium.getFrageProjektbetroffene() + \" mit Frage aus Formular: \" + frage);\r\n                        kriterium.setFrageProjektbetroffene(frage);\r\n                    } else // Fragen fï¿½r Management\r\n                    {\r\n                        logger.debug(\"Ersetze Frage in Datenbank: \" + kriterium.getFrageManagement() + \" mit Frage aus Formular: \" + frage);\r\n                        kriterium.setFrageManagement(frage);\r\n                    }\r\n                    kriterien.set(i, kriterium);\r\n                }\r\n            }\r\n        }\r\n        // Operativer Nutzen -> Projektbetroffene\r\n        if (isOperativerNutzen) {\r\n            request.setAttribute(Constants.PROJEKTBETROFFENE, true);\r\n        }\r\n        request.setAttribute(Constants.NUTZENKRITERIEN, kriterien);\r\n        // Anzahl Kategorien holen\r\n        Kategorie k = new Kategorie();\r\n        k.setNutzenattraktivitaetOperativerNutzenId(naOpNuId);\r\n        k.setMandantId(mandantId);\r\n        List<Kategorie> kategorien = kService.getAssignments(k);\r\n        request.setAttribute(\"totalKategorien\", kategorien.size());\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Setzt die eingegebenen Daten zur Direkten Gewichtung aller\r\n     * gewï¿½hlten Nutzenkriterien in den Request, um diese anzeigen\r\n     * zu kï¿½nnen. Bei gescheiterter Validierung werden die Daten\r\n     * erneut angezeigt.\r\n     *\r\n     * @param request                   der HttpServletRequest\r\n     * @param form                      das Formular mit den Nutzenkriterien\r\n     */\r\n    public void populateDirekteGewichtung(HttpServletRequest request, FragenForm form) {\r\n        // Benï¿½tigte ids holen\r\n        HttpSession session = request.getSession();\r\n        Integer customizingId = (Integer) session.getAttribute(Constants.CUSTOMIZING_ID);\r\n        Integer mandantId = (Integer) session.getAttribute(Constants.MANDANT_ID);\r\n        Integer naOpNuId = cService.getNaOpNuId(request, customizingId);\r\n        // Alle zugewiesenen Nutzenkriterien zur gewï¿½hlten Kategorie holen\r\n        Nutzenkriterium n = new Nutzenkriterium();\r\n        n.setNutzenattraktivitaetOperativerNutzenId(naOpNuId);\r\n        n.setMandantId(mandantId);\r\n        List<Nutzenkriterium> kriterien = dao.getAssignments(n);\r\n        // Formulardaten wieder abfï¿½llen (bei gescheiterter Validierung)\r\n        AutoGrowingList list = form.getNutzenkriteriumLine();\r\n        if (list != null) {\r\n            // Formulardaten zum Abgleich in eine HashMap stellen\r\n            Iterator it = list.iterator();\r\n            HashMap<Integer, Double[]> formData = new HashMap<Integer, Double[]>();\r\n            while (it.hasNext()) {\r\n                NutzenkriteriumLine nl = (NutzenkriteriumLine) it.next();\r\n                Double kategorieGewichtung = 0.0;\r\n                Double gewichtung = 0.0;\r\n                try {\r\n                    kategorieGewichtung = new Double(nl.getKategorieGewichtung());\r\n                } catch (Exception e) {\r\n                }\r\n                try {\r\n                    gewichtung = new Double(nl.getGewichtung());\r\n                } catch (Exception e) {\r\n                }\r\n                Double[] gewichtungen = { gewichtung, kategorieGewichtung };\r\n                formData.put(nl.getNutzenkriteriumId(), gewichtungen);\r\n            }\r\n            // Nutzennkriterium suchen\r\n            for (int i = 0; i < kriterien.size(); i++) {\r\n                Nutzenkriterium kriterium = (Nutzenkriterium) kriterien.get(i);\r\n                Integer nutzenkriteriumId = (Integer) kriterium.getNutzenkriteriumId();\r\n                if (formData.containsKey(nutzenkriteriumId)) {\r\n                    // Gewichtung mit Formulardaten ersetzen\r\n                    Double[] gewichtungen = formData.get(nutzenkriteriumId);\r\n                    kriterium.setGewichtung(gewichtungen[0]);\r\n                    kriterium.setKategorieGewichtung(gewichtungen[1]);\r\n                    kriterien.set(i, kriterium);\r\n                }\r\n            }\r\n        }\r\n        request.setAttribute(Constants.NUTZENKRITERIEN, kriterien);\r\n    }\r\n\r\n    /**\r\n     * Speichert die Fragen zu den gewï¿½hlten Nutzenkriterien ab.\r\n     *\r\n     * @param request                   der HttpServletRequest\r\n     * @param form                      das Formular mit den Nutzenkriterien\r\n     * @param errors                    das ActionMessages Objekt zum Speichern\r\n     *                                  von Fehlermeldungen\r\n     * @return                          true bei Erfolg, sonst false\r\n     */\r\n    public boolean saveFragen(HttpServletRequest request, FragenForm form, ActionMessages errors) {\r\n        AutoGrowingList list = form.getNutzenkriteriumLine();\r\n        if (list == null) {\r\n            return false;\r\n        }\r\n        // Fragen ï¿½berprï¿½fen\r\n        Iterator it = list.iterator();\r\n        while (it.hasNext()) {\r\n            NutzenkriteriumLine nl = (NutzenkriteriumLine) it.next();\r\n            String frage = nl.getFrage();\r\n            if (frage == null || frage.length() == 0) {\r\n                errors.add(\"nutzenkriterium_\" + nl.getNutzenkriteriumId(), new ActionMessage(\"errors.required\", \"Frage\"));\r\n                return false;\r\n            }\r\n        }\r\n        // Benï¿½tigte ids holen\r\n        HttpSession session = request.getSession();\r\n        Integer customizingId = (Integer) session.getAttribute(Constants.CUSTOMIZING_ID);\r\n        Integer naOpNuId = cService.getNaOpNuId(request, customizingId);\r\n        // Fragen speichern\r\n        it = list.iterator();\r\n        while (it.hasNext()) {\r\n            NutzenkriteriumLine nl = (NutzenkriteriumLine) it.next();\r\n            Nutzenkriterium n = new Nutzenkriterium();\r\n            n.setNutzenkriteriumId(nl.getNutzenkriteriumId());\r\n            n.setNutzenattraktivitaetOperativerNutzenId(naOpNuId);\r\n            if (cService.isOperativerNutzen(request)) {\r\n                n.setFrageProjektbetroffene(nl.getFrage());\r\n            } else {\r\n                n.setFrageManagement(nl.getFrage());\r\n            }\r\n            logger.debug(\"nutzenkriteriumId: \" + n.getNutzenkriteriumId());\r\n            logger.debug(\"nutzenattraktivitaetId: \" + naOpNuId);\r\n            logger.debug(\"frage: \" + nl.getFrage());\r\n            dao.updateAssignment(n);\r\n        }\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Fï¿½gt ein neues Nutzenkriterium ein und wï¿½hlt dieses anschliessend\r\n     * automatisch aus.\r\n     *\r\n     * @param request                   der HttpServletRequest\r\n     * @param form                      das Formular mit dem neuen Nutzenkriterium\r\n     * @param errors                    das ActionMessages Objekt zum Speichern\r\n     *                                  von Fehlermeldungen\r\n     * @return                          true bei Erfolg, sonst false\r\n     */\r\n    public boolean add(HttpServletRequest request, DynaActionForm form, ActionMessages errors, ActionMessages messages) {\r\n        // Ids holen\r\n        HttpSession session = request.getSession();\r\n        Integer mandantId = (Integer) session.getAttribute(Constants.MANDANT_ID);\r\n        Integer customizingId = (Integer) session.getAttribute(Constants.CUSTOMIZING_ID);\r\n        // Formulardaten holen\r\n        String name = (String) form.get(\"name\");\r\n        Integer kategorieId = (Integer) form.get(Constants.KATEGORIE_ID);\r\n        logger.debug(\"name=\" + name);\r\n        logger.debug(\"kategorieId=\" + kategorieId);\r\n        // Formulardaten ï¿½berprï¿½fen\r\n        if (name == null || name.length() == 0) {\r\n            errors.add(\"name\", new ActionMessage(\"errors.required\", \"Name\"));\r\n            return false;\r\n        }\r\n        Nutzenkriterium n = new Nutzenkriterium();\r\n        n.setName(name);\r\n        n.setKategorieId(kategorieId);\r\n        n.setMandantId(mandantId);\r\n        // Auf duplikate prï¿½fen\r\n        if (dao.getByName(n) != null) {\r\n            messages.add(ActionMessages.GLOBAL_MESSAGE, new ActionMessage(\"errors.duplicate\", \"Nutzenkriterium\"));\r\n            return false;\r\n        }\r\n        // Nutzenkriterium einfï¿½gen\r\n        dao.insert(n);\r\n        // Nutzenkriterium setzen\r\n        Integer naOpNuId = cService.getNaOpNuId(request, customizingId);\r\n        n.setNutzenattraktivitaetOperativerNutzenId(naOpNuId);\r\n        dao.insertAssignment(n);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Speichert die Direkte Gewichtung von Nutzenkriterien\r\n     * der Nutzenattraktivitï¿½t bzw. des Operativen Nutzens.\r\n     *\r\n     * @param request                   der HttpServletRequest\r\n     * @param form                      das Formular mit den Nutzenkriterien\r\n     * @param errors                    das ActionMessages Objekt zum Speichern\r\n     *                                  von Fehlermeldungen\r\n     * @return                          true bei Erfolg, sonst false\r\n     */\r\n    public boolean saveDirekteGewichtung(HttpServletRequest request, FragenForm form, ActionMessages errors) {\r\n        // Formulardaten holen\r\n        AutoGrowingList list = form.getNutzenkriteriumLine();\r\n        if (list == null) {\r\n            return false;\r\n        }\r\n        // Gewichtungen ï¿½berprï¿½fen\r\n        Double gewichtung = 0.0;\r\n        Iterator it = list.iterator();\r\n        while (it.hasNext()) {\r\n            NutzenkriteriumLine nl = (NutzenkriteriumLine) it.next();\r\n            Integer nutzenkriteriumId = nl.getNutzenkriteriumId();\r\n            logger.debug(\"nutzenkrtieriumId=\" + nutzenkriteriumId);\r\n            String g = nl.getGewichtung();\r\n            logger.debug(\"Gewichtung: \" + g);\r\n            try {\r\n                gewichtung += new Double(g);\r\n            } catch (Exception e) {\r\n            }\r\n        }\r\n        logger.debug(\"Total gewichtungen: \" + gewichtung);\r\n        if (gewichtung < 99.999 || gewichtung > 100.0001) {\r\n            errors.add(ActionMessages.GLOBAL_MESSAGE, new ActionMessage(\"errors.gewichtung.failure\"));\r\n            return false;\r\n        }\r\n        /*\r\n    // Gewichtungen ï¿½berprï¿½fen\r\n    Iterator it = list.iterator();\r\n    ArrayList<Double> gewichtungsListe = new ArrayList<Double>(); \r\n    HashMap<Integer, ArrayList<Double>> gewichtungen = new HashMap<Integer, ArrayList<Double>>(); \r\n    Double kategorieGewichtung = 0.0;\r\n    boolean isFirst = true;\r\n    Integer tmpKategorieId = null;\r\n    while (it.hasNext()) {\r\n      NutzenkriteriumLine nl = (NutzenkriteriumLine) it.next();\r\n      Integer kategorieId = nl.getKategorieId();\r\n      Integer nutzenkriteriumId = nl.getNutzenkriteriumId();\r\n      logger.debug(\"kategorieId=\" + kategorieId);\r\n      logger.debug(\"nutzenkrtieriumId=\" + nutzenkriteriumId);\r\n      \r\n      // Gewichtung (muss pro Kategorie 100% ergeben)\r\n      String g = nl.getGewichtung();\r\n      logger.debug(\"Gewichtung: \" + g);\r\n      \r\n      \r\n      // Gewichtung fï¿½r die selbe Kategorie in eine Liste stellen\r\n      if (isFirst || kategorieId == null) {\r\n        isFirst = false;\r\n        tmpKategorieId = kategorieId;\r\n        try {\r\n          gewichtungsListe.add(new Double(g));\r\n        } catch (Exception e) {}\r\n      }\r\n      \r\n      // Nï¿½chste Kategorie \r\n      else {\r\n        gewichtungen.put(tmpKategorieId, gewichtungsListe);\r\n        gewichtungsListe = new ArrayList<Double>();\r\n        tmpKategorieId = kategorieId;\r\n        try {\r\n          gewichtungsListe.add(new Double(g));\r\n        } catch (Exception e) {}\r\n      }\r\n      \r\n      // kategorieGewichtung\r\n      String kg = nl.getKategorieGewichtung();\r\n      logger.debug(\"Gewichtung Kategorie: \" + kg);\r\n      try {\r\n        kategorieGewichtung += new Double(kg);\r\n      } catch (Exception e) {}\r\n    }\r\n    \r\n    it = gewichtungen.keySet().iterator();\r\n    while (it.hasNext()) {\r\n      Integer key = (Integer) it.next();\r\n      gewichtungsListe = gewichtungen.get(key);\r\n      Double gewichtung = 0.0;\r\n      for (Double d : gewichtungsListe) {\r\n        gewichtung += d;\r\n      }\r\n      \r\n      logger.debug(\"Total gewichtungen: \" + gewichtung);\r\n      if (gewichtung < 99.999 || gewichtung > 100) {\r\n        errors.add(ActionMessages.GLOBAL_MESSAGE,\r\n            new ActionMessage(\"errors.gewichtung.failure\"));\r\n        return false;\r\n      }\r\n    }\r\n    logger.debug(\"Total gewichtungen Kategorie: \" + kategorieGewichtung);\r\n    if (kategorieGewichtung < 99.999 || kategorieGewichtung > 100) {\r\n      errors.add(ActionMessages.GLOBAL_MESSAGE,\r\n          new ActionMessage(\"errors.gewichtung.failure\"));\r\n      return false;\r\n    }*/\r\n        // Benï¿½tigte ids holen\r\n        HttpSession session = request.getSession();\r\n        Integer customizingId = (Integer) session.getAttribute(Constants.CUSTOMIZING_ID);\r\n        Integer naOpNuId = cService.getNaOpNuId(request, customizingId);\r\n        // Allfï¿½llige indirekte Gewichtungen lï¿½schen\r\n        Auswahlfeld a = new Auswahlfeld();\r\n        a.setNutzenattraktivitaetOperativerNutzenId(naOpNuId);\r\n        aService.deleteGewichtungen(a);\r\n        // Gewichtung speichern\r\n        it = list.iterator();\r\n        while (it.hasNext()) {\r\n            NutzenkriteriumLine nl = (NutzenkriteriumLine) it.next();\r\n            Nutzenkriterium n = new Nutzenkriterium();\r\n            n.setNutzenkriteriumId(nl.getNutzenkriteriumId());\r\n            n.setNutzenattraktivitaetOperativerNutzenId(naOpNuId);\r\n            n.setGewichtung(new Double(nl.getGewichtung()));\r\n            dao.updateAssignmentGewichtung(n);\r\n            // Gewichtung der Kategorien speichern\r\n            Integer kategorieId = nl.getKategorieId();\r\n            if (kategorieId != null) {\r\n                Double g = null;\r\n                try {\r\n                    g = new Double(nl.getKategorieGewichtung());\r\n                } catch (Exception e) {\r\n                }\r\n                Kategorie k = new Kategorie();\r\n                k.setGewichtung(g);\r\n                k.setKategorieId(nl.getKategorieId());\r\n                k.setNutzenattraktivitaetOperativerNutzenId(naOpNuId);\r\n                kService.updateAssignment(k);\r\n            }\r\n        }\r\n        // Status setzen\r\n        boolean isNa = !cService.isOperativerNutzen(request);\r\n        if (isNa) {\r\n            logger.debug(\"GEWICHTUNGEN_NA=true\");\r\n            session.setAttribute(Constants.GEWICHTUNGEN_NA, true);\r\n        } else {\r\n            logger.debug(\"GEWICHTUNGEN_OP_NU=true\");\r\n            session.setAttribute(Constants.GEWICHTUNGEN_OP_NU, true);\r\n        }\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Prï¿½ft, ob eine Direkte Gewichtung vorliegt oder nicht.\r\n     *\r\n     * @param request                   der HttpServletRequest\r\n     * @return                          true bei Direkter Gewichtung, sonst false\r\n     */\r\n    public boolean direkteGewichtung(HttpServletRequest request) {\r\n        Integer typ = (Integer) request.getSession().getAttribute(Constants.GEWICHTUNGSTYP);\r\n        logger.debug(\"Direkte Gewichtung ausgewï¿½hlt\");\r\n        return typ == Constants.GEWICHTUNG_DIREKT;\r\n    }\r\n\r\n    /**\r\n     * Setzt den Status des Schritts \"Nutzenkriterien\", sowohl fï¿½r das\r\n     * Customizing Nutzenattraktiviï¿½t wie fï¿½r das Customizing Operativer Nutzen.\r\n     * Der Status zeigt in der Navigation an, ob dieser Schritt des Customizings\r\n     * bereits erfolgreich abgeschlossen wurde oder nicht.\r\n     *\r\n     * @param request                   der HttpServletRequest\r\n     * @param kategorien                eine Liste aller gewï¿½hlten Kategorien\r\n     * @param mandantId                 die Id des Mandanten\r\n     * @param naOpNuId                  die Id der Nutzenattraktivitï¿½t bzw.\r\n     *                                  des Operativen Nutzens\r\n     * @param isNa                      true fï¿½r Nutzenattraktivitï¿½t, sonst false\r\n     * @return                          Liste aller gewï¿½hlten Nutzenkriterien\r\n     */\r\n    public List<Nutzenkriterium> setStatus(HttpServletRequest request, List<Kategorie> kategorien, Integer mandantId, Integer naOpNuId, boolean isNa) {\r\n        boolean ok = true;\r\n        for (Kategorie k : kategorien) {\r\n            Nutzenkriterium nk = new Nutzenkriterium();\r\n            nk.setKategorieId(k.getKategorieId());\r\n            nk.setNutzenattraktivitaetOperativerNutzenId(naOpNuId);\r\n            List<Nutzenkriterium> nks = dao.getByNaOpNuAndKategorie(nk);\r\n            logger.debug(nks.size() + \" Nutzenkriterien in der Liste\");\r\n            if (nks == null || nks.size() == 0) {\r\n                ok = false;\r\n                break;\r\n            }\r\n        }\r\n        HttpSession session = request.getSession();\r\n        if (ok && isNa) {\r\n            session.setAttribute(Constants.NUTZENKRITERIEN_NA, true);\r\n            session.setAttribute(Constants.FRAGEN_NA, true);\r\n        } else if (ok) {\r\n            session.setAttribute(Constants.NUTZENKRITERIEN_OP_NU, true);\r\n            session.setAttribute(Constants.FRAGEN_OP_NU, true);\r\n        }\r\n        if (ok) {\r\n            Nutzenkriterium nk = new Nutzenkriterium();\r\n            nk.setMandantId(mandantId);\r\n            nk.setNutzenattraktivitaetOperativerNutzenId(naOpNuId);\r\n            return dao.getAssignments(nk);\r\n        } else if (!ok && isNa) {\r\n            session.removeAttribute(Constants.NUTZENKRITERIEN_NA);\r\n            session.removeAttribute(Constants.FRAGEN_NA);\r\n        } else {\r\n            session.removeAttribute(Constants.NUTZENKRITERIEN_OP_NU);\r\n            session.removeAttribute(Constants.FRAGEN_OP_NU);\r\n        }\r\n        return null;\r\n    }\r\n\r\n    /**\r\n     * Lï¿½scht die Fragebogen-Gewichtung des aktuellen Customizings.\r\n     *\r\n     * @param request                   der HttpServletRequest\r\n     */\r\n    public void deleteFragebogenGewichtung(HttpServletRequest request) {\r\n        // Benï¿½tigte ids holen\r\n        HttpSession session = request.getSession();\r\n        Integer customizingId = (Integer) session.getAttribute(Constants.CUSTOMIZING_ID);\r\n        Integer naOpNuId = cService.getNaOpNuId(request, customizingId);\r\n        // allfï¿½llige Gewichtung ï¿½ber Fragebogen lï¿½schen\r\n        Auswahlfeld a = new Auswahlfeld();\r\n        a = aService.setType(a, Constants.GEWICHTUNG);\r\n        a.setNutzenattraktivitaetOperativerNutzenId(naOpNuId);\r\n        logger.debug(\"Fragebogen-Gewichtung lï¿½schen:\");\r\n        logger.debug(\"nutzenattraktivitaetOperativerNutzenId=\" + a.getNutzenattraktivitaetOperativerNutzenId());\r\n        aService.deleteGewichtungen(a);\r\n    }\r\n\r\n    /**\r\n     * Selektiert die zuvor gewï¿½hlte Anzahl von Abstufungen fï¿½r die\r\n     * Stufenbeschriebe und die Gewichtung.\r\n     * Stellt den gewï¿½hlten Gewichtungstyp in den Request. Dies dient\r\n     * zur Vorauswahl der richtigen Checkbox im Formular \"Gewichtung\".\r\n     *\r\n     * @param request                   der HttpServletRequest\r\n     * @param path                      der Pfad der Action\r\n     */\r\n    public void preselect(HttpServletRequest request, String path) {\r\n        // Benï¿½tigte ids holen\r\n        HttpSession session = request.getSession();\r\n        Integer customizingId = (Integer) session.getAttribute(Constants.CUSTOMIZING_ID);\r\n        Integer naOpNuId = cService.getNaOpNuId(request, customizingId);\r\n        logger.debug(\"naOpNuId=\" + naOpNuId);\r\n        logger.debug(\"Pfad: \" + path);\r\n        // Abstufungstatus holen\r\n        List<Auswahlfeld> afs = new ArrayList<Auswahlfeld>();\r\n        if (path.contains(Constants.ABSTUFUNGEN_ACTION)) {\r\n            afs = aService.getAnzahlAbstufungen(naOpNuId);\r\n        } else // Gewichtungsstatus holen\r\n        {\r\n            afs = aService.getAnzahlGewichtungen(naOpNuId);\r\n        }\r\n        logger.debug(afs.size() + \" Abstufungen in der Liste\");\r\n        request.setAttribute(Constants.ABSTUFUNGEN, afs.size());\r\n        // Gewichtung bestimmen\r\n        List<Auswahlfeld> gewichtungen = aService.getGewichtungStatus(naOpNuId);\r\n        if (gewichtungen.size() > 0) {\r\n            request.setAttribute(Constants.GEWICHTUNG_NOT_DIRECT, true);\r\n        } else {\r\n            request.removeAttribute(Constants.GEWICHTUNG_NOT_DIRECT);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Kopiert alle Zuweisungen von Nutzenkriterien von einer Nutzenattraktivitï¿½t\r\n     * bzw. von einem Operativen Nutzen zu einer neuen Id. Wird zum Kopieren\r\n     * von Customizings verwendet.\r\n     *\r\n     * @param mandantId                 die Id des Mandanten\r\n     * @param naOpNuId                  die Id der Nutzenattraktivitï¿½t bzw. des\r\n     *                                  Operativen Nutzens, welche die zu kopierenden\r\n     *                                  Zuweisungen enthï¿½lt\r\n     * @param newNaOpNuId               die neue Id fï¿½r die kopierten Zuweisungen\r\n     */\r\n    public void copy(Integer mandantId, Integer naOpNuId, Integer newNaOpNuId) {\r\n        Nutzenkriterium n = new Nutzenkriterium();\r\n        n.setNutzenattraktivitaetOperativerNutzenId(naOpNuId);\r\n        n.setMandantId(mandantId);\r\n        List<Nutzenkriterium> kriterien = dao.getAssignments(n);\r\n        for (Nutzenkriterium kriterium : kriterien) {\r\n            kriterium.setNutzenattraktivitaetOperativerNutzenId(newNaOpNuId);\r\n            dao.insertAssignment(kriterium);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * ï¿½berprï¿½ft, ob ein Customizing komplett ist.\r\n     *\r\n     * @param request                   der HttpServletRequest\r\n     * @return                          true bei komplettem Customizing, sonst false\r\n     */\r\n    public boolean customizingComplete(HttpServletRequest request) {\r\n        return customizingService.complete(request);\r\n    }\r\n\r\n    /**\r\n     * Erstellt ein Objekt vom Typ Nutzenkriterium mit der id des Mandanten\r\n     * und, falls angegeben, mit abgefï¿½llten Formulardaten\r\n     *\r\n     * @param request                   der HttpServletRequest\r\n     * @param form                      das DynaActionForm\r\n     * @return                          Nutzenkriterium mit mandantId\r\n     */\r\n    private Nutzenkriterium createNutzenkriterium(HttpServletRequest request, DynaActionForm form) {\r\n        Integer mandantId = (Integer) request.getSession().getAttribute(Constants.MANDANT_ID);\r\n        Nutzenkriterium n = new Nutzenkriterium();\r\n        n.setMandantId(mandantId);\r\n        if (form != null) {\r\n            Integer id = (Integer) form.get(Constants.NUTZENKRITERIUM_ID);\r\n            String name = (String) form.get(Constants.NAME);\r\n            String beschreibung = (String) form.get(\"beschreibung\");\r\n            String frageManagementDefault = (String) form.get(\"frageManagementDefault\");\r\n            String frageProjektbetroffeneDefault = (String) form.get(\"frageProjektbetroffeneDefault\");\r\n            Integer kategorieId = (Integer) form.get(Constants.KATEGORIE_ID);\r\n            n.setNutzenkriteriumId(id);\r\n            n.setName(name);\r\n            n.setBeschreibung(beschreibung);\r\n            n.setFrageManagementDefault(frageManagementDefault);\r\n            n.setFrageProjektbetroffeneDefault(frageProjektbetroffeneDefault);\r\n            n.setKategorieId(kategorieId);\r\n        }\r\n        return n;\r\n    }\r\n\r\n    /**\r\n     * ï¿½berprï¿½ft, ob die Id eines Nutzenkriteriums Ziels im Request ist\r\n     * (update) oder nicht (neu).\r\n     *\r\n     * @param request                   der HttpServletRequest\r\n     * @param form                      das DynaActionForm\r\n     * @return                          true, wenn das angegebene Nutzenkriterium\r\n     *                                  besteht, sonst false.\r\n     */\r\n    private boolean isUpdate(HttpServletRequest request, DynaActionForm form) {\r\n        Integer id = (Integer) form.get(Constants.NUTZENKRITERIUM_ID);\r\n        if (id == null || id == 0) {\r\n            return false;\r\n        }\r\n        return true;\r\n    }\r\n}\r\n",
		"id": "EvoSuiteBenchmark/46_nutzenportfolio/src/main/java/ch/bfh/egov/nutzenportfolio/service/nutzenkriterium/NutzenkriteriumDaoServiceTest6.java",
		"test_prompt": "// NutzenkriteriumDaoServiceTest6.java\npackage ch.bfh.egov.nutzenportfolio.service.nutzenkriterium;\n\nimport java.util.ArrayList;\nimport java.util.Collections;\nimport java.util.Comparator;\nimport java.util.HashMap;\nimport java.util.Iterator;\nimport java.util.List;\nimport javax.servlet.http.HttpServletRequest;\nimport javax.servlet.http.HttpSession;\nimport org.apache.commons.logging.Log;\nimport org.apache.commons.logging.LogFactory;\nimport org.apache.struts.action.ActionMessage;\nimport org.apache.struts.action.ActionMessages;\nimport org.apache.struts.action.DynaActionForm;\nimport ch.bfh.egov.nutzenportfolio.Constants;\nimport ch.bfh.egov.nutzenportfolio.common.AutoGrowingList;\nimport ch.bfh.egov.nutzenportfolio.common.NutzenkriteriumLine;\nimport ch.bfh.egov.nutzenportfolio.form.FragenForm;\nimport ch.bfh.egov.nutzenportfolio.persistence.nutzenkriterium.NutzenkriteriumDao;\nimport ch.bfh.egov.nutzenportfolio.service.auswahlfeld.AuswahlfeldService;\nimport ch.bfh.egov.nutzenportfolio.service.common.CommonService;\nimport ch.bfh.egov.nutzenportfolio.service.customizing.CustomizingService;\nimport ch.bfh.egov.nutzenportfolio.service.kategorie.KategorieService;\nimport ch.bfh.egov.nutzenportfolio.tos.Auswahlfeld;\nimport ch.bfh.egov.nutzenportfolio.tos.Customizing;\nimport ch.bfh.egov.nutzenportfolio.tos.Kategorie;\nimport ch.bfh.egov.nutzenportfolio.tos.NaOpNu;\nimport ch.bfh.egov.nutzenportfolio.tos.Nutzenkriterium;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link NutzenkriteriumDaoService}.\n* It contains ten unit test cases for the {@link NutzenkriteriumDaoService#direkteGewichtung(HttpServletRequest)} method.\n*/\nclass NutzenkriteriumDaoServiceTest6 {"
	},
	{
		"original_code": "// NutzenkriteriumDaoService.java\n/**\r\n * Nutzenportfolio\r\n * Copyright (C) 2006 Kompetenzzentrum E-Business, Simon Bergamin\r\n *\r\n * This program is free software; you can redistribute it and/or\r\n * modify it under the terms of the GNU General Public License\r\n * as published by the Free Software Foundation; either version 2\r\n * of the License, or (at your option) any later version.\r\n *\r\n * This program is distributed in the hope that it will be useful,\r\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n * GNU General Public License for more details.\r\n *\r\n * You should have received a copy of the GNU General Public License\r\n * along with this program; if not, write to the Free Software\r\n * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\r\n */\r\npackage ch.bfh.egov.nutzenportfolio.service.nutzenkriterium;\r\n\r\nimport java.util.ArrayList;\r\nimport java.util.Collections;\r\nimport java.util.Comparator;\r\nimport java.util.HashMap;\r\nimport java.util.Iterator;\r\nimport java.util.List;\r\nimport javax.servlet.http.HttpServletRequest;\r\nimport javax.servlet.http.HttpSession;\r\nimport org.apache.commons.logging.Log;\r\nimport org.apache.commons.logging.LogFactory;\r\nimport org.apache.struts.action.ActionMessage;\r\nimport org.apache.struts.action.ActionMessages;\r\nimport org.apache.struts.action.DynaActionForm;\r\nimport ch.bfh.egov.nutzenportfolio.Constants;\r\nimport ch.bfh.egov.nutzenportfolio.common.AutoGrowingList;\r\nimport ch.bfh.egov.nutzenportfolio.common.NutzenkriteriumLine;\r\nimport ch.bfh.egov.nutzenportfolio.form.FragenForm;\r\nimport ch.bfh.egov.nutzenportfolio.persistence.nutzenkriterium.NutzenkriteriumDao;\r\nimport ch.bfh.egov.nutzenportfolio.service.auswahlfeld.AuswahlfeldService;\r\nimport ch.bfh.egov.nutzenportfolio.service.common.CommonService;\r\nimport ch.bfh.egov.nutzenportfolio.service.customizing.CustomizingService;\r\nimport ch.bfh.egov.nutzenportfolio.service.kategorie.KategorieService;\r\nimport ch.bfh.egov.nutzenportfolio.tos.Auswahlfeld;\r\nimport ch.bfh.egov.nutzenportfolio.tos.Customizing;\r\nimport ch.bfh.egov.nutzenportfolio.tos.Kategorie;\r\nimport ch.bfh.egov.nutzenportfolio.tos.NaOpNu;\r\nimport ch.bfh.egov.nutzenportfolio.tos.Nutzenkriterium;\r\n\r\n/**\r\n * Implementierende Service-Klasse fï¿½r Nutzenkriterien.\r\n *\r\n * @author Kompetenzzentrum E-Business, Simon Bergamin\r\n */\r\npublic class NutzenkriteriumDaoService implements NutzenkriteriumService {\r\n\r\n    private NutzenkriteriumDao dao;\r\n\r\n    private CommonService cService;\r\n\r\n    private KategorieService kService;\r\n\r\n    private AuswahlfeldService aService;\r\n\r\n    private CustomizingService customizingService;\r\n\r\n    private Log logger = LogFactory.getLog(this.getClass());\r\n\r\n    /**\r\n     * Konstruktor. ï¿½bergabe des DataAcessObject-Interfaces fï¿½r Nutzenkriterien.\r\n     *\r\n     * @param dao                               Nutzenkriterien DataAcessObject-Interface\r\n     */\r\n    public NutzenkriteriumDaoService(NutzenkriteriumDao dao) {\r\n        this.dao = dao;\r\n    }\r\n\r\n    /**\r\n     * @see ch.bfh.egov.nutzenportfolio.persistence.nutzenkriterium.NutzenkriteriumIbatisDao#getAssignmentById(Nutzenkriterium)\r\n     */\r\n    public Nutzenkriterium getAssignmentById(Nutzenkriterium kriterium) {\r\n        return dao.getAssignmentById(kriterium);\r\n    }\r\n\r\n    /**\r\n     * @see ch.bfh.egov.nutzenportfolio.persistence.nutzenkriterium.NutzenkriteriumIbatisDao#getByProjektId(NaOpNu)\r\n     */\r\n    public List<Nutzenkriterium> getByProjektId(NaOpNu naOpNu) {\r\n        return dao.getByProjektId(naOpNu);\r\n    }\r\n\r\n    /**\r\n     * @see ch.bfh.egov.nutzenportfolio.persistence.nutzenkriterium.NutzenkriteriumIbatisDao#getAssignments(Nutzenkriterium)\r\n     */\r\n    public List<Nutzenkriterium> getAssignments(Nutzenkriterium kriterium) {\r\n        return dao.getAssignments(kriterium);\r\n    }\r\n\r\n    /**\r\n     * @see ch.bfh.egov.nutzenportfolio.persistence.nutzenkriterium.NutzenkriteriumIbatisDao#update(Nutzenkriterium)\r\n     */\r\n    public void update(Nutzenkriterium kriterium) {\r\n        dao.updateAssignment(kriterium);\r\n    }\r\n\r\n    /**\r\n     * @see ch.bfh.egov.nutzenportfolio.persistence.nutzenkriterium.NutzenkriteriumIbatisDao#unsetAssignmentGewichtung(Integer)\r\n     */\r\n    public void unsetAssignmentGewichtung(Integer naOpNuId) {\r\n        dao.unsetAssignmentGewichtung(naOpNuId);\r\n    }\r\n\r\n    /**\r\n     * @see ch.bfh.egov.nutzenportfolio.persistence.nutzenkriterium.NutzenkriteriumIbatisDao#deleteAssignments(Integer)\r\n     */\r\n    public void deleteAssignments(Integer naOpNuId) {\r\n        dao.deleteAssignments(naOpNuId);\r\n    }\r\n\r\n    /**\r\n     * Initialisierung dieses Service-Objekts durch ï¿½bergabe anderer,\r\n     * benï¿½tigter Service-Objekte.\r\n     *\r\n     * @param aService                   AuswahlFeldService Objekt\r\n     * @param cService                   CommonService Objekt\r\n     * @param kService                   KategorieService Objekt\r\n     * @param customizingService         CustomizingService Objekt\r\n     */\r\n    public void init(AuswahlfeldService aService, CommonService cService, KategorieService kService, CustomizingService customizingService) {\r\n        this.aService = aService;\r\n        this.cService = cService;\r\n        this.kService = kService;\r\n        this.customizingService = customizingService;\r\n    }\r\n\r\n    /**\r\n     * Stellt eine Liste aller Nutzenkriterien in den request.\r\n     *\r\n     * @param request                   der HttpServletRequest\r\n     */\r\n    public void list(HttpServletRequest request) {\r\n        Integer mandantId = (Integer) request.getSession().getAttribute(Constants.MANDANT_ID);\r\n        List<Nutzenkriterium> kriterien = dao.getAll(mandantId);\r\n        // Sortieren der Nutzenkriterien nach Namen\r\n        Collections.<Nutzenkriterium>sort(kriterien, new Comparator<Nutzenkriterium>() {\r\n\r\n            public int compare(Nutzenkriterium a, Nutzenkriterium b) {\r\n                String name1 = a.getName().toLowerCase();\r\n                String name2 = b.getName().toLowerCase();\r\n                return name1.compareTo(name2);\r\n            }\r\n        });\r\n        request.setAttribute(Constants.NUTZENKRITERIEN, kriterien);\r\n    }\r\n\r\n    /**\r\n     * Stellt eine Liste von Nutzenkriterien sowie deren zugehï¿½rigen\r\n     * Kategorien in den Request. Pro Request bzw. pro Seitenaufruf\r\n     * wird eine Kategorie mit den jeweiligen Nutzenkriterien angezeigt.\r\n     * Mit einem Klick auf \"weiter\" gelangt der Benutzer zur nï¿½chsten Seite\r\n     * bzw. der nï¿½chsten gewï¿½hlten Kategorie.\r\n     *\r\n     * @param request                   der HttpServletRequest\r\n     * @return                          true bei Erfolg, sonst false\r\n     */\r\n    public boolean populate(HttpServletRequest request) {\r\n        // Benï¿½tigte ids holen\r\n        HttpSession session = request.getSession();\r\n        Integer mandantId = (Integer) session.getAttribute(Constants.MANDANT_ID);\r\n        Integer customizingId = (Integer) session.getAttribute(Constants.CUSTOMIZING_ID);\r\n        Integer naOpNuId = cService.getNaOpNuId(request, customizingId);\r\n        logger.debug(\"naOpNuId=\" + naOpNuId);\r\n        // Zugewiesene Kategorien holen\r\n        Kategorie k = new Kategorie();\r\n        k.setNutzenattraktivitaetOperativerNutzenId(naOpNuId);\r\n        k.setMandantId(mandantId);\r\n        List<Kategorie> kategorien = kService.getAssignments(k);\r\n        Integer kategorieId = null;\r\n        Integer step = null;\r\n        if (kategorien.size() == 0) {\r\n            return false;\r\n        }\r\n        // 1 Schritt pro Kategorie. Parameter ï¿½berprï¿½fen.\r\n        String stepStr = request.getParameter(Constants.STEP);\r\n        String next = request.getParameter(Constants.NEXT);\r\n        logger.debug(\"Angegebener step: \" + stepStr);\r\n        try {\r\n            step = new Integer(stepStr);\r\n        } catch (NumberFormatException nfex) {\r\n            step = 1;\r\n        }\r\n        // Denselben Schritt wiederholen, wenn nicht \"weiter\" geklickt wurde\r\n        if (next == null && step > 1) {\r\n            --step;\r\n        }\r\n        // Kategorien in Array stellen\r\n        Integer[] kategorienIdArr = new Integer[kategorien.size()];\r\n        String[] kategorienNameArr = new String[kategorien.size()];\r\n        int i = 0;\r\n        for (Kategorie kategorie : kategorien) {\r\n            kategorienIdArr[i] = kategorie.getKategorieId();\r\n            kategorienNameArr[i++] = kategorie.getName();\r\n            logger.debug(\"Kategorie: id=\" + kategorienIdArr[i - 1] + \", name=\" + kategorienNameArr[i - 1]);\r\n        }\r\n        // Auf inkorrekten step Parameter prï¿½fen\r\n        if ((step - 1) >= kategorienIdArr.length) {\r\n            logger.warn(\"Nicht verfï¿½gbarer Schritt ausgewï¿½hlt!\");\r\n            step = 1;\r\n        }\r\n        // Auf letzten Schritt prï¿½fen\r\n        if (step == kategorienIdArr.length) {\r\n            request.setAttribute(Constants.LAST_STEP, true);\r\n        }\r\n        // Id der Kategorie anhand des step Parameters holen\r\n        kategorieId = kategorienIdArr[step - 1];\r\n        logger.debug(\"Gewaehlte Kategorie: \" + kategorieId);\r\n        request.setAttribute(Constants.KATEGORIE_ID, kategorieId);\r\n        request.setAttribute(\"kategorie\", kategorienNameArr[step - 1]);\r\n        request.setAttribute(Constants.STEP, step + 1);\r\n        // Alle Nutzenkriterien zur gewï¿½hlten Kategorie holen\r\n        Nutzenkriterium n = new Nutzenkriterium();\r\n        n.setNutzenattraktivitaetOperativerNutzenId(naOpNuId);\r\n        n.setKategorieId(kategorieId);\r\n        n.setMandantId(mandantId);\r\n        // Nutzenkriterien aussortieren, die einem anderen Customizing zugeordnet sind\r\n        List<Nutzenkriterium> nutzenkriterien = dao.getByKategorie(n);\r\n        Iterator it = nutzenkriterien.iterator();\r\n        HashMap<String, Nutzenkriterium> map = new HashMap<String, Nutzenkriterium>();\r\n        while (it.hasNext()) {\r\n            Nutzenkriterium nk = (Nutzenkriterium) it.next();\r\n            String name = nk.getName();\r\n            boolean contains = map.containsKey(name);\r\n            Integer nuNaOpNuId = nk.getNutzenattraktivitaetOperativerNutzenId();\r\n            // HashMap abfï¿½llen um allfï¿½llige doppelte Nutzenkriterien auszusortieren\r\n            // (ist der Fall bei Zuweisungen zu anderen Customizings)\r\n            if (!contains || nuNaOpNuId != null && contains && nuNaOpNuId.equals(naOpNuId)) {\r\n                map.put(name, nk);\r\n            }\r\n        }\r\n        nutzenkriterien = new ArrayList<Nutzenkriterium>(map.values());\r\n        request.setAttribute(Constants.NUTZENKRITERIEN, nutzenkriterien);\r\n        // Operativer Nutzen -> Projektbetroffene\r\n        if (cService.isOperativerNutzen(request)) {\r\n            request.setAttribute(Constants.PROJEKTBETROFFENE, true);\r\n        }\r\n        Integer levels = (Integer) request.getSession().getAttribute(Constants.ABSTUFUNGEN);\r\n        request.setAttribute(\"totalKategorien\", ((levels != null) ? kategorien.size() : 0));\r\n        // Alle zugewiesenen Nutzenkriterien zur gewï¿½hlten Kategorie holen\r\n        List nAssigned = dao.getAssignments(n);\r\n        request.setAttribute(Constants.NA_OP_NU_ID, naOpNuId);\r\n        request.setAttribute(Constants.NUTZENKRITERIEN_ASSIGNED, nAssigned);\r\n        boolean isNa = !cService.isOperativerNutzen(request);\r\n        setStatus(request, kategorien, mandantId, naOpNuId, isNa);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Fï¿½llt ein Formular mit bestehenden Daten eines Nutzenkriteriums ab,\r\n     * falls eine entsprechende id angegeben wurde.\r\n     *\r\n     * @param request                   der HttpServletRequest\r\n     * @param form                      das DynaActionForm\r\n     */\r\n    public void edit(HttpServletRequest request, DynaActionForm form) {\r\n        if (isUpdate(request, form)) {\r\n            Nutzenkriterium n = createNutzenkriterium(request, form);\r\n            Integer mandantId = n.getMandantId();\r\n            n = dao.getById(n);\r\n            form.set(\"name\", n.getName());\r\n            form.set(\"beschreibung\", n.getBeschreibung());\r\n            form.set(\"frageManagementDefault\", n.getFrageManagementDefault());\r\n            form.set(\"frageProjektbetroffeneDefault\", n.getFrageProjektbetroffeneDefault());\r\n            form.set(Constants.KATEGORIE_ID, n.getKategorieId());\r\n            // Kategorien in die Session stellen\r\n            logger.debug(\"Kategorien holen fï¿½r mandantId=\" + mandantId);\r\n            List<Kategorie> kategorien = kService.getAll(mandantId);\r\n            request.getSession().setAttribute(Constants.KATEGORIEN, kategorien);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Fï¿½hrt ein update eines bestenenden Nutzenkriteriums anhand von\r\n     * Formulardaten durch.\r\n     *\r\n     * @param request                   der HttpServletRequest\r\n     * @param form                      das DynaActionForm\r\n     */\r\n    public void update(HttpServletRequest request, DynaActionForm form) {\r\n        logger.debug(\"Update Nutzenkriterium\");\r\n        if (isUpdate(request, form)) {\r\n            logger.debug(\"Update durchfï¿½hren\");\r\n            Nutzenkriterium n = createNutzenkriterium(request, form);\r\n            dao.update(n);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Prï¿½ft, ob ein Nutzenkriterium existiert und gibt es zurï¿½ck.\r\n     *\r\n     * @param request                   der HttpServletRequest\r\n     * @param form                      das DynaActionForm\r\n     * @return                          das Nutzenkriterium\r\n     */\r\n    public Nutzenkriterium getNutzenkriterium(HttpServletRequest request, DynaActionForm form) {\r\n        Nutzenkriterium n = createNutzenkriterium(request, form);\r\n        return dao.getById(n);\r\n    }\r\n\r\n    /**\r\n     * Abfrage fï¿½r das Lï¿½schen von einem Nutzenkriterium.\r\n     *\r\n     * @param request                   der HttpServletRequest\r\n     * @param kriterium                 das zu lï¿½schende Nutzenkriterium\r\n     * @param messages                  das ActionMessages Objekt\r\n     */\r\n    public void deleteQuestion(HttpServletRequest request, Nutzenkriterium kriterium, ActionMessages messages) {\r\n        // Verknï¿½pfungen prï¿½fen\r\n        linkedTo(request, kriterium);\r\n        // Bestï¿½tigungsnachricht ausgeben\r\n        messages.add(ActionMessages.GLOBAL_MESSAGE, new ActionMessage(\"messages.question.delete\", kriterium.getName()));\r\n        // Actions zum Lï¿½schen und Abbrechen definieren\r\n        request.setAttribute(Constants.ACTION, Constants.VERWALTUNG_NUTZENKRITERIEN_ACTION);\r\n        request.setAttribute(Constants.DISPATCH_YES, Constants.DELETE);\r\n        request.setAttribute(Constants.DISPATCH_NO, Constants.LIST);\r\n        request.setAttribute(Constants.ID_NAME, Constants.NUTZENKRITERIUM_ID);\r\n        request.setAttribute(Constants.ID_VALUE, kriterium.getNutzenkriteriumId());\r\n    }\r\n\r\n    /**\r\n     * Setzt die Verknï¿½pfungen zu diesem Nutzenkriterium in den Request.\r\n     * Ein Nutzenkriterium kann mit Customizings verknï¿½pft sein. Diese\r\n     * Methode wird bei der Lï¿½schabfrage verwendet.\r\n     *\r\n     * @param request                   der HttpServletRequest\r\n     * @param kritierium                das zu lï¿½schende Nutzenkriterium\r\n     */\r\n    public void linkedTo(HttpServletRequest request, Nutzenkriterium kritierium) {\r\n        HashMap<String, List> map = new HashMap<String, List>();\r\n        // Customizings suchen, die dieses Nutzenkriterium benï¿½tigen\r\n        List<Customizing> customizings = dao.getLinkedCustomizings(kritierium);\r\n        if (customizings.size() > 0) {\r\n            for (Customizing c : customizings) {\r\n                if (c.getStatus()) {\r\n                    request.setAttribute(\"active\", true);\r\n                    break;\r\n                }\r\n            }\r\n            map.put(\"Customizings\", customizings);\r\n        }\r\n        request.setAttribute(\"linked\", map);\r\n    }\r\n\r\n    /**\r\n     * Lï¿½scht ein Nutzenkriterium. Falls es mit inaktiven Customizings\r\n     * verknï¿½ft ist, werden diese ebenfalls gelï¿½scht. Wenn aktive Customizings\r\n     * verknï¿½ft sind, wird das Nutzenkriterium nicht gelï¿½scht.\r\n     *\r\n     * @param request                   der HttpServletRequest\r\n     * @param kriterium                 das zu lï¿½schende Nutzenkriterium\r\n     */\r\n    public void delete(HttpServletRequest request, Nutzenkriterium kriterium) {\r\n        // Verknï¿½pfungen prï¿½fen\r\n        linkedTo(request, kriterium);\r\n        Boolean active = (Boolean) request.getAttribute(\"active\");\r\n        // Aktives Customizing verknï¿½ft. Dies sollte nicht passieren ausser bei\r\n        // einem direkten URL-Aufruf ...\r\n        if (active != null && active) {\r\n            logger.debug(\"Aktives Customizing verknï¿½pft, Nutzenkriterium wird nicht gelï¿½scht\");\r\n            return;\r\n        }\r\n        // Customizings lï¿½schen\r\n        List<Customizing> customizings = dao.getLinkedCustomizings(kriterium);\r\n        for (Customizing c : customizings) {\r\n            logger.debug(\"Lï¿½sche Customizing \" + c.getCustomizingId());\r\n            customizingService.cascadeDelete(request, c);\r\n        }\r\n        // Lï¿½schen des Nutzenkriteriums\r\n        dao.delete(kriterium);\r\n    }\r\n\r\n    /**\r\n     * Weist dem aktuellen Customizing das gewï¿½hlte Nutzenkriterium zu.\r\n     * Wenn das Nutzenkriterium eine Default-Frage besitzt, wird diese\r\n     * zur spï¿½teren Verwendung in der Verknï¿½pfungstabelle gespeichert.\r\n     *\r\n     * @param request                   der HttpServletRequest\r\n     * @param form                      das Formular mit dem gewï¿½hlten Nutzenkriterium\r\n     */\r\n    public void set(HttpServletRequest request, DynaActionForm form) {\r\n        // Benï¿½tigte ids holen\r\n        HttpSession session = request.getSession();\r\n        Integer customizingId = (Integer) session.getAttribute(Constants.CUSTOMIZING_ID);\r\n        Integer mandantId = (Integer) session.getAttribute(Constants.MANDANT_ID);\r\n        Integer naOpNuId = cService.getNaOpNuId(request, customizingId);\r\n        Integer nutzenkriteriumId = (Integer) form.get(Constants.NUTZENKRITERIUM_ID);\r\n        if (nutzenkriteriumId == null) {\r\n            return;\r\n        }\r\n        // Nutzenkriterium zuweisen\r\n        logger.debug(\"Nutzenkriterium zuweisen: \" + nutzenkriteriumId);\r\n        Nutzenkriterium n = new Nutzenkriterium();\r\n        n.setNutzenkriteriumId(nutzenkriteriumId);\r\n        n.setMandantId(mandantId);\r\n        n.setNutzenattraktivitaetOperativerNutzenId(naOpNuId);\r\n        // Default fragen holen und setzen\r\n        Nutzenkriterium fragen = dao.getDefaultFragen(n);\r\n        if (cService.isOperativerNutzen(request)) {\r\n            n.setFrageProjektbetroffene(fragen.getFrageProjektbetroffeneDefault());\r\n        } else {\r\n            n.setFrageManagement(fragen.getFrageManagementDefault());\r\n        }\r\n        dao.insertAssignment(n);\r\n    }\r\n\r\n    /**\r\n     * ï¿½berprï¿½ft, ob das aktuelle Nutzenkriterium zum letzten\r\n     * Schritt bzw. zur letzten gewï¿½hlten Kategorie gehï¿½rt. Wenn\r\n     * ja, kann zur nï¿½chsten Action gesprungen werden.\r\n     *\r\n     * @param request                   der HttpServletRequest\r\n     * @return                          true beim letzten Schritt, sonst false\r\n     */\r\n    public boolean next(HttpServletRequest request) {\r\n        // Nï¿½chste Action?\r\n        String last = request.getParameter(Constants.LAST_STEP);\r\n        if (last != null && last.equals(\"true\")) {\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    /**\r\n     * Entfernt die Zuweisung des gewï¿½hlten Nutzenkriteriums zum\r\n     * aktuellen Customizing.\r\n     *\r\n     * @param request                   der HttpServletRequest\r\n     * @param form                      das Formular mit dem Nutzenkriterium\r\n     */\r\n    public void remove(HttpServletRequest request, DynaActionForm form) {\r\n        // Nutzenkriterium anhand der id holen\r\n        HttpSession session = request.getSession();\r\n        Integer mandantId = (Integer) session.getAttribute(Constants.MANDANT_ID);\r\n        Integer nutzenkriteriumId = (Integer) form.get(Constants.NUTZENKRITERIUM_ID);\r\n        Integer naOpNuId = (Integer) form.get(Constants.NA_OP_NU_ID);\r\n        Nutzenkriterium n = new Nutzenkriterium();\r\n        n.setNutzenkriteriumId(nutzenkriteriumId);\r\n        n.setNutzenattraktivitaetOperativerNutzenId(naOpNuId);\r\n        n.setMandantId(mandantId);\r\n        n = dao.getAssignmentById(n);\r\n        // Zuweisung lï¿½schen\r\n        if (n != null) {\r\n            logger.debug(\"Zuweisung nutzenkriteriumId=\" + nutzenkriteriumId + \", nutzenattraktivitaetOperativerNutzenId=\" + n.getNutzenattraktivitaetOperativerNutzenId() + \" wird gelï¿½scht.\");\r\n            dao.deleteAssignment(n);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Setzt die zugehï¿½rigen Fragen von Nutzenkriterien zur Anzeige\r\n     * in den Request.\r\n     *\r\n     * @param request                   der HttpServletRequest\r\n     * @param form                      das Formular mit den Nutzenkriterien\r\n     * @return                          true bei Erfolg, sonst false\r\n     */\r\n    public boolean populateFragen(HttpServletRequest request, FragenForm form) {\r\n        // Benï¿½tigte ids holen\r\n        HttpSession session = request.getSession();\r\n        Integer customizingId = (Integer) session.getAttribute(Constants.CUSTOMIZING_ID);\r\n        Integer mandantId = (Integer) session.getAttribute(Constants.MANDANT_ID);\r\n        Integer naOpNuId = cService.getNaOpNuId(request, customizingId);\r\n        boolean isOperativerNutzen = cService.isOperativerNutzen(request);\r\n        // Alle zugewiesenen Nutzenkriterien zur gewï¿½hlten Kategorie holen\r\n        Nutzenkriterium n = new Nutzenkriterium();\r\n        n.setNutzenattraktivitaetOperativerNutzenId(naOpNuId);\r\n        n.setMandantId(mandantId);\r\n        List<Nutzenkriterium> kriterien = dao.getAssignments(n);\r\n        if (kriterien.size() == 0) {\r\n            return false;\r\n        }\r\n        // Formulardaten wieder abfï¿½llen (bei gescheiterter Validierung)\r\n        AutoGrowingList list = form.getNutzenkriteriumLine();\r\n        if (list != null) {\r\n            // Formulardaten zum Abgleich in eine HashMap stellen\r\n            Iterator it = list.iterator();\r\n            HashMap<Integer, String> formData = new HashMap<Integer, String>();\r\n            while (it.hasNext()) {\r\n                NutzenkriteriumLine nl = (NutzenkriteriumLine) it.next();\r\n                formData.put(nl.getNutzenkriteriumId(), nl.getFrage());\r\n            }\r\n            // Nutzennkriterium suchen\r\n            for (int i = 0; i < kriterien.size(); i++) {\r\n                Nutzenkriterium kriterium = (Nutzenkriterium) kriterien.get(i);\r\n                Integer nutzenkriteriumId = (Integer) kriterium.getNutzenkriteriumId();\r\n                if (formData.containsKey(nutzenkriteriumId)) {\r\n                    // Frage mit Formulardaten ersetzen\r\n                    String frage = formData.get(nutzenkriteriumId);\r\n                    // Fragen fï¿½r Projektbetroffene\r\n                    if (isOperativerNutzen) {\r\n                        logger.debug(\"Ersetze Frage in Datenbank: \" + kriterium.getFrageProjektbetroffene() + \" mit Frage aus Formular: \" + frage);\r\n                        kriterium.setFrageProjektbetroffene(frage);\r\n                    } else // Fragen fï¿½r Management\r\n                    {\r\n                        logger.debug(\"Ersetze Frage in Datenbank: \" + kriterium.getFrageManagement() + \" mit Frage aus Formular: \" + frage);\r\n                        kriterium.setFrageManagement(frage);\r\n                    }\r\n                    kriterien.set(i, kriterium);\r\n                }\r\n            }\r\n        }\r\n        // Operativer Nutzen -> Projektbetroffene\r\n        if (isOperativerNutzen) {\r\n            request.setAttribute(Constants.PROJEKTBETROFFENE, true);\r\n        }\r\n        request.setAttribute(Constants.NUTZENKRITERIEN, kriterien);\r\n        // Anzahl Kategorien holen\r\n        Kategorie k = new Kategorie();\r\n        k.setNutzenattraktivitaetOperativerNutzenId(naOpNuId);\r\n        k.setMandantId(mandantId);\r\n        List<Kategorie> kategorien = kService.getAssignments(k);\r\n        request.setAttribute(\"totalKategorien\", kategorien.size());\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Setzt die eingegebenen Daten zur Direkten Gewichtung aller\r\n     * gewï¿½hlten Nutzenkriterien in den Request, um diese anzeigen\r\n     * zu kï¿½nnen. Bei gescheiterter Validierung werden die Daten\r\n     * erneut angezeigt.\r\n     *\r\n     * @param request                   der HttpServletRequest\r\n     * @param form                      das Formular mit den Nutzenkriterien\r\n     */\r\n    public void populateDirekteGewichtung(HttpServletRequest request, FragenForm form) {\r\n        // Benï¿½tigte ids holen\r\n        HttpSession session = request.getSession();\r\n        Integer customizingId = (Integer) session.getAttribute(Constants.CUSTOMIZING_ID);\r\n        Integer mandantId = (Integer) session.getAttribute(Constants.MANDANT_ID);\r\n        Integer naOpNuId = cService.getNaOpNuId(request, customizingId);\r\n        // Alle zugewiesenen Nutzenkriterien zur gewï¿½hlten Kategorie holen\r\n        Nutzenkriterium n = new Nutzenkriterium();\r\n        n.setNutzenattraktivitaetOperativerNutzenId(naOpNuId);\r\n        n.setMandantId(mandantId);\r\n        List<Nutzenkriterium> kriterien = dao.getAssignments(n);\r\n        // Formulardaten wieder abfï¿½llen (bei gescheiterter Validierung)\r\n        AutoGrowingList list = form.getNutzenkriteriumLine();\r\n        if (list != null) {\r\n            // Formulardaten zum Abgleich in eine HashMap stellen\r\n            Iterator it = list.iterator();\r\n            HashMap<Integer, Double[]> formData = new HashMap<Integer, Double[]>();\r\n            while (it.hasNext()) {\r\n                NutzenkriteriumLine nl = (NutzenkriteriumLine) it.next();\r\n                Double kategorieGewichtung = 0.0;\r\n                Double gewichtung = 0.0;\r\n                try {\r\n                    kategorieGewichtung = new Double(nl.getKategorieGewichtung());\r\n                } catch (Exception e) {\r\n                }\r\n                try {\r\n                    gewichtung = new Double(nl.getGewichtung());\r\n                } catch (Exception e) {\r\n                }\r\n                Double[] gewichtungen = { gewichtung, kategorieGewichtung };\r\n                formData.put(nl.getNutzenkriteriumId(), gewichtungen);\r\n            }\r\n            // Nutzennkriterium suchen\r\n            for (int i = 0; i < kriterien.size(); i++) {\r\n                Nutzenkriterium kriterium = (Nutzenkriterium) kriterien.get(i);\r\n                Integer nutzenkriteriumId = (Integer) kriterium.getNutzenkriteriumId();\r\n                if (formData.containsKey(nutzenkriteriumId)) {\r\n                    // Gewichtung mit Formulardaten ersetzen\r\n                    Double[] gewichtungen = formData.get(nutzenkriteriumId);\r\n                    kriterium.setGewichtung(gewichtungen[0]);\r\n                    kriterium.setKategorieGewichtung(gewichtungen[1]);\r\n                    kriterien.set(i, kriterium);\r\n                }\r\n            }\r\n        }\r\n        request.setAttribute(Constants.NUTZENKRITERIEN, kriterien);\r\n    }\r\n\r\n    /**\r\n     * Speichert die Fragen zu den gewï¿½hlten Nutzenkriterien ab.\r\n     *\r\n     * @param request                   der HttpServletRequest\r\n     * @param form                      das Formular mit den Nutzenkriterien\r\n     * @param errors                    das ActionMessages Objekt zum Speichern\r\n     *                                  von Fehlermeldungen\r\n     * @return                          true bei Erfolg, sonst false\r\n     */\r\n    public boolean saveFragen(HttpServletRequest request, FragenForm form, ActionMessages errors) {\r\n        AutoGrowingList list = form.getNutzenkriteriumLine();\r\n        if (list == null) {\r\n            return false;\r\n        }\r\n        // Fragen ï¿½berprï¿½fen\r\n        Iterator it = list.iterator();\r\n        while (it.hasNext()) {\r\n            NutzenkriteriumLine nl = (NutzenkriteriumLine) it.next();\r\n            String frage = nl.getFrage();\r\n            if (frage == null || frage.length() == 0) {\r\n                errors.add(\"nutzenkriterium_\" + nl.getNutzenkriteriumId(), new ActionMessage(\"errors.required\", \"Frage\"));\r\n                return false;\r\n            }\r\n        }\r\n        // Benï¿½tigte ids holen\r\n        HttpSession session = request.getSession();\r\n        Integer customizingId = (Integer) session.getAttribute(Constants.CUSTOMIZING_ID);\r\n        Integer naOpNuId = cService.getNaOpNuId(request, customizingId);\r\n        // Fragen speichern\r\n        it = list.iterator();\r\n        while (it.hasNext()) {\r\n            NutzenkriteriumLine nl = (NutzenkriteriumLine) it.next();\r\n            Nutzenkriterium n = new Nutzenkriterium();\r\n            n.setNutzenkriteriumId(nl.getNutzenkriteriumId());\r\n            n.setNutzenattraktivitaetOperativerNutzenId(naOpNuId);\r\n            if (cService.isOperativerNutzen(request)) {\r\n                n.setFrageProjektbetroffene(nl.getFrage());\r\n            } else {\r\n                n.setFrageManagement(nl.getFrage());\r\n            }\r\n            logger.debug(\"nutzenkriteriumId: \" + n.getNutzenkriteriumId());\r\n            logger.debug(\"nutzenattraktivitaetId: \" + naOpNuId);\r\n            logger.debug(\"frage: \" + nl.getFrage());\r\n            dao.updateAssignment(n);\r\n        }\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Fï¿½gt ein neues Nutzenkriterium ein und wï¿½hlt dieses anschliessend\r\n     * automatisch aus.\r\n     *\r\n     * @param request                   der HttpServletRequest\r\n     * @param form                      das Formular mit dem neuen Nutzenkriterium\r\n     * @param errors                    das ActionMessages Objekt zum Speichern\r\n     *                                  von Fehlermeldungen\r\n     * @return                          true bei Erfolg, sonst false\r\n     */\r\n    public boolean add(HttpServletRequest request, DynaActionForm form, ActionMessages errors, ActionMessages messages) {\r\n        // Ids holen\r\n        HttpSession session = request.getSession();\r\n        Integer mandantId = (Integer) session.getAttribute(Constants.MANDANT_ID);\r\n        Integer customizingId = (Integer) session.getAttribute(Constants.CUSTOMIZING_ID);\r\n        // Formulardaten holen\r\n        String name = (String) form.get(\"name\");\r\n        Integer kategorieId = (Integer) form.get(Constants.KATEGORIE_ID);\r\n        logger.debug(\"name=\" + name);\r\n        logger.debug(\"kategorieId=\" + kategorieId);\r\n        // Formulardaten ï¿½berprï¿½fen\r\n        if (name == null || name.length() == 0) {\r\n            errors.add(\"name\", new ActionMessage(\"errors.required\", \"Name\"));\r\n            return false;\r\n        }\r\n        Nutzenkriterium n = new Nutzenkriterium();\r\n        n.setName(name);\r\n        n.setKategorieId(kategorieId);\r\n        n.setMandantId(mandantId);\r\n        // Auf duplikate prï¿½fen\r\n        if (dao.getByName(n) != null) {\r\n            messages.add(ActionMessages.GLOBAL_MESSAGE, new ActionMessage(\"errors.duplicate\", \"Nutzenkriterium\"));\r\n            return false;\r\n        }\r\n        // Nutzenkriterium einfï¿½gen\r\n        dao.insert(n);\r\n        // Nutzenkriterium setzen\r\n        Integer naOpNuId = cService.getNaOpNuId(request, customizingId);\r\n        n.setNutzenattraktivitaetOperativerNutzenId(naOpNuId);\r\n        dao.insertAssignment(n);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Speichert die Direkte Gewichtung von Nutzenkriterien\r\n     * der Nutzenattraktivitï¿½t bzw. des Operativen Nutzens.\r\n     *\r\n     * @param request                   der HttpServletRequest\r\n     * @param form                      das Formular mit den Nutzenkriterien\r\n     * @param errors                    das ActionMessages Objekt zum Speichern\r\n     *                                  von Fehlermeldungen\r\n     * @return                          true bei Erfolg, sonst false\r\n     */\r\n    public boolean saveDirekteGewichtung(HttpServletRequest request, FragenForm form, ActionMessages errors) {\r\n        // Formulardaten holen\r\n        AutoGrowingList list = form.getNutzenkriteriumLine();\r\n        if (list == null) {\r\n            return false;\r\n        }\r\n        // Gewichtungen ï¿½berprï¿½fen\r\n        Double gewichtung = 0.0;\r\n        Iterator it = list.iterator();\r\n        while (it.hasNext()) {\r\n            NutzenkriteriumLine nl = (NutzenkriteriumLine) it.next();\r\n            Integer nutzenkriteriumId = nl.getNutzenkriteriumId();\r\n            logger.debug(\"nutzenkrtieriumId=\" + nutzenkriteriumId);\r\n            String g = nl.getGewichtung();\r\n            logger.debug(\"Gewichtung: \" + g);\r\n            try {\r\n                gewichtung += new Double(g);\r\n            } catch (Exception e) {\r\n            }\r\n        }\r\n        logger.debug(\"Total gewichtungen: \" + gewichtung);\r\n        if (gewichtung < 99.999 || gewichtung > 100.0001) {\r\n            errors.add(ActionMessages.GLOBAL_MESSAGE, new ActionMessage(\"errors.gewichtung.failure\"));\r\n            return false;\r\n        }\r\n        /*\r\n    // Gewichtungen ï¿½berprï¿½fen\r\n    Iterator it = list.iterator();\r\n    ArrayList<Double> gewichtungsListe = new ArrayList<Double>(); \r\n    HashMap<Integer, ArrayList<Double>> gewichtungen = new HashMap<Integer, ArrayList<Double>>(); \r\n    Double kategorieGewichtung = 0.0;\r\n    boolean isFirst = true;\r\n    Integer tmpKategorieId = null;\r\n    while (it.hasNext()) {\r\n      NutzenkriteriumLine nl = (NutzenkriteriumLine) it.next();\r\n      Integer kategorieId = nl.getKategorieId();\r\n      Integer nutzenkriteriumId = nl.getNutzenkriteriumId();\r\n      logger.debug(\"kategorieId=\" + kategorieId);\r\n      logger.debug(\"nutzenkrtieriumId=\" + nutzenkriteriumId);\r\n      \r\n      // Gewichtung (muss pro Kategorie 100% ergeben)\r\n      String g = nl.getGewichtung();\r\n      logger.debug(\"Gewichtung: \" + g);\r\n      \r\n      \r\n      // Gewichtung fï¿½r die selbe Kategorie in eine Liste stellen\r\n      if (isFirst || kategorieId == null) {\r\n        isFirst = false;\r\n        tmpKategorieId = kategorieId;\r\n        try {\r\n          gewichtungsListe.add(new Double(g));\r\n        } catch (Exception e) {}\r\n      }\r\n      \r\n      // Nï¿½chste Kategorie \r\n      else {\r\n        gewichtungen.put(tmpKategorieId, gewichtungsListe);\r\n        gewichtungsListe = new ArrayList<Double>();\r\n        tmpKategorieId = kategorieId;\r\n        try {\r\n          gewichtungsListe.add(new Double(g));\r\n        } catch (Exception e) {}\r\n      }\r\n      \r\n      // kategorieGewichtung\r\n      String kg = nl.getKategorieGewichtung();\r\n      logger.debug(\"Gewichtung Kategorie: \" + kg);\r\n      try {\r\n        kategorieGewichtung += new Double(kg);\r\n      } catch (Exception e) {}\r\n    }\r\n    \r\n    it = gewichtungen.keySet().iterator();\r\n    while (it.hasNext()) {\r\n      Integer key = (Integer) it.next();\r\n      gewichtungsListe = gewichtungen.get(key);\r\n      Double gewichtung = 0.0;\r\n      for (Double d : gewichtungsListe) {\r\n        gewichtung += d;\r\n      }\r\n      \r\n      logger.debug(\"Total gewichtungen: \" + gewichtung);\r\n      if (gewichtung < 99.999 || gewichtung > 100) {\r\n        errors.add(ActionMessages.GLOBAL_MESSAGE,\r\n            new ActionMessage(\"errors.gewichtung.failure\"));\r\n        return false;\r\n      }\r\n    }\r\n    logger.debug(\"Total gewichtungen Kategorie: \" + kategorieGewichtung);\r\n    if (kategorieGewichtung < 99.999 || kategorieGewichtung > 100) {\r\n      errors.add(ActionMessages.GLOBAL_MESSAGE,\r\n          new ActionMessage(\"errors.gewichtung.failure\"));\r\n      return false;\r\n    }*/\r\n        // Benï¿½tigte ids holen\r\n        HttpSession session = request.getSession();\r\n        Integer customizingId = (Integer) session.getAttribute(Constants.CUSTOMIZING_ID);\r\n        Integer naOpNuId = cService.getNaOpNuId(request, customizingId);\r\n        // Allfï¿½llige indirekte Gewichtungen lï¿½schen\r\n        Auswahlfeld a = new Auswahlfeld();\r\n        a.setNutzenattraktivitaetOperativerNutzenId(naOpNuId);\r\n        aService.deleteGewichtungen(a);\r\n        // Gewichtung speichern\r\n        it = list.iterator();\r\n        while (it.hasNext()) {\r\n            NutzenkriteriumLine nl = (NutzenkriteriumLine) it.next();\r\n            Nutzenkriterium n = new Nutzenkriterium();\r\n            n.setNutzenkriteriumId(nl.getNutzenkriteriumId());\r\n            n.setNutzenattraktivitaetOperativerNutzenId(naOpNuId);\r\n            n.setGewichtung(new Double(nl.getGewichtung()));\r\n            dao.updateAssignmentGewichtung(n);\r\n            // Gewichtung der Kategorien speichern\r\n            Integer kategorieId = nl.getKategorieId();\r\n            if (kategorieId != null) {\r\n                Double g = null;\r\n                try {\r\n                    g = new Double(nl.getKategorieGewichtung());\r\n                } catch (Exception e) {\r\n                }\r\n                Kategorie k = new Kategorie();\r\n                k.setGewichtung(g);\r\n                k.setKategorieId(nl.getKategorieId());\r\n                k.setNutzenattraktivitaetOperativerNutzenId(naOpNuId);\r\n                kService.updateAssignment(k);\r\n            }\r\n        }\r\n        // Status setzen\r\n        boolean isNa = !cService.isOperativerNutzen(request);\r\n        if (isNa) {\r\n            logger.debug(\"GEWICHTUNGEN_NA=true\");\r\n            session.setAttribute(Constants.GEWICHTUNGEN_NA, true);\r\n        } else {\r\n            logger.debug(\"GEWICHTUNGEN_OP_NU=true\");\r\n            session.setAttribute(Constants.GEWICHTUNGEN_OP_NU, true);\r\n        }\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Prï¿½ft, ob eine Direkte Gewichtung vorliegt oder nicht.\r\n     *\r\n     * @param request                   der HttpServletRequest\r\n     * @return                          true bei Direkter Gewichtung, sonst false\r\n     */\r\n    public boolean direkteGewichtung(HttpServletRequest request) {\r\n        Integer typ = (Integer) request.getSession().getAttribute(Constants.GEWICHTUNGSTYP);\r\n        logger.debug(\"Direkte Gewichtung ausgewï¿½hlt\");\r\n        return typ == Constants.GEWICHTUNG_DIREKT;\r\n    }\r\n\r\n    /**\r\n     * Setzt den Status des Schritts \"Nutzenkriterien\", sowohl fï¿½r das\r\n     * Customizing Nutzenattraktiviï¿½t wie fï¿½r das Customizing Operativer Nutzen.\r\n     * Der Status zeigt in der Navigation an, ob dieser Schritt des Customizings\r\n     * bereits erfolgreich abgeschlossen wurde oder nicht.\r\n     *\r\n     * @param request                   der HttpServletRequest\r\n     * @param kategorien                eine Liste aller gewï¿½hlten Kategorien\r\n     * @param mandantId                 die Id des Mandanten\r\n     * @param naOpNuId                  die Id der Nutzenattraktivitï¿½t bzw.\r\n     *                                  des Operativen Nutzens\r\n     * @param isNa                      true fï¿½r Nutzenattraktivitï¿½t, sonst false\r\n     * @return                          Liste aller gewï¿½hlten Nutzenkriterien\r\n     */\r\n    public List<Nutzenkriterium> setStatus(HttpServletRequest request, List<Kategorie> kategorien, Integer mandantId, Integer naOpNuId, boolean isNa) {\r\n        boolean ok = true;\r\n        for (Kategorie k : kategorien) {\r\n            Nutzenkriterium nk = new Nutzenkriterium();\r\n            nk.setKategorieId(k.getKategorieId());\r\n            nk.setNutzenattraktivitaetOperativerNutzenId(naOpNuId);\r\n            List<Nutzenkriterium> nks = dao.getByNaOpNuAndKategorie(nk);\r\n            logger.debug(nks.size() + \" Nutzenkriterien in der Liste\");\r\n            if (nks == null || nks.size() == 0) {\r\n                ok = false;\r\n                break;\r\n            }\r\n        }\r\n        HttpSession session = request.getSession();\r\n        if (ok && isNa) {\r\n            session.setAttribute(Constants.NUTZENKRITERIEN_NA, true);\r\n            session.setAttribute(Constants.FRAGEN_NA, true);\r\n        } else if (ok) {\r\n            session.setAttribute(Constants.NUTZENKRITERIEN_OP_NU, true);\r\n            session.setAttribute(Constants.FRAGEN_OP_NU, true);\r\n        }\r\n        if (ok) {\r\n            Nutzenkriterium nk = new Nutzenkriterium();\r\n            nk.setMandantId(mandantId);\r\n            nk.setNutzenattraktivitaetOperativerNutzenId(naOpNuId);\r\n            return dao.getAssignments(nk);\r\n        } else if (!ok && isNa) {\r\n            session.removeAttribute(Constants.NUTZENKRITERIEN_NA);\r\n            session.removeAttribute(Constants.FRAGEN_NA);\r\n        } else {\r\n            session.removeAttribute(Constants.NUTZENKRITERIEN_OP_NU);\r\n            session.removeAttribute(Constants.FRAGEN_OP_NU);\r\n        }\r\n        return null;\r\n    }\r\n\r\n    /**\r\n     * Lï¿½scht die Fragebogen-Gewichtung des aktuellen Customizings.\r\n     *\r\n     * @param request                   der HttpServletRequest\r\n     */\r\n    public void deleteFragebogenGewichtung(HttpServletRequest request) {\r\n        // Benï¿½tigte ids holen\r\n        HttpSession session = request.getSession();\r\n        Integer customizingId = (Integer) session.getAttribute(Constants.CUSTOMIZING_ID);\r\n        Integer naOpNuId = cService.getNaOpNuId(request, customizingId);\r\n        // allfï¿½llige Gewichtung ï¿½ber Fragebogen lï¿½schen\r\n        Auswahlfeld a = new Auswahlfeld();\r\n        a = aService.setType(a, Constants.GEWICHTUNG);\r\n        a.setNutzenattraktivitaetOperativerNutzenId(naOpNuId);\r\n        logger.debug(\"Fragebogen-Gewichtung lï¿½schen:\");\r\n        logger.debug(\"nutzenattraktivitaetOperativerNutzenId=\" + a.getNutzenattraktivitaetOperativerNutzenId());\r\n        aService.deleteGewichtungen(a);\r\n    }\r\n\r\n    /**\r\n     * Selektiert die zuvor gewï¿½hlte Anzahl von Abstufungen fï¿½r die\r\n     * Stufenbeschriebe und die Gewichtung.\r\n     * Stellt den gewï¿½hlten Gewichtungstyp in den Request. Dies dient\r\n     * zur Vorauswahl der richtigen Checkbox im Formular \"Gewichtung\".\r\n     *\r\n     * @param request                   der HttpServletRequest\r\n     * @param path                      der Pfad der Action\r\n     */\r\n    public void preselect(HttpServletRequest request, String path) {\r\n        // Benï¿½tigte ids holen\r\n        HttpSession session = request.getSession();\r\n        Integer customizingId = (Integer) session.getAttribute(Constants.CUSTOMIZING_ID);\r\n        Integer naOpNuId = cService.getNaOpNuId(request, customizingId);\r\n        logger.debug(\"naOpNuId=\" + naOpNuId);\r\n        logger.debug(\"Pfad: \" + path);\r\n        // Abstufungstatus holen\r\n        List<Auswahlfeld> afs = new ArrayList<Auswahlfeld>();\r\n        if (path.contains(Constants.ABSTUFUNGEN_ACTION)) {\r\n            afs = aService.getAnzahlAbstufungen(naOpNuId);\r\n        } else // Gewichtungsstatus holen\r\n        {\r\n            afs = aService.getAnzahlGewichtungen(naOpNuId);\r\n        }\r\n        logger.debug(afs.size() + \" Abstufungen in der Liste\");\r\n        request.setAttribute(Constants.ABSTUFUNGEN, afs.size());\r\n        // Gewichtung bestimmen\r\n        List<Auswahlfeld> gewichtungen = aService.getGewichtungStatus(naOpNuId);\r\n        if (gewichtungen.size() > 0) {\r\n            request.setAttribute(Constants.GEWICHTUNG_NOT_DIRECT, true);\r\n        } else {\r\n            request.removeAttribute(Constants.GEWICHTUNG_NOT_DIRECT);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Kopiert alle Zuweisungen von Nutzenkriterien von einer Nutzenattraktivitï¿½t\r\n     * bzw. von einem Operativen Nutzen zu einer neuen Id. Wird zum Kopieren\r\n     * von Customizings verwendet.\r\n     *\r\n     * @param mandantId                 die Id des Mandanten\r\n     * @param naOpNuId                  die Id der Nutzenattraktivitï¿½t bzw. des\r\n     *                                  Operativen Nutzens, welche die zu kopierenden\r\n     *                                  Zuweisungen enthï¿½lt\r\n     * @param newNaOpNuId               die neue Id fï¿½r die kopierten Zuweisungen\r\n     */\r\n    public void copy(Integer mandantId, Integer naOpNuId, Integer newNaOpNuId) {\r\n        Nutzenkriterium n = new Nutzenkriterium();\r\n        n.setNutzenattraktivitaetOperativerNutzenId(naOpNuId);\r\n        n.setMandantId(mandantId);\r\n        List<Nutzenkriterium> kriterien = dao.getAssignments(n);\r\n        for (Nutzenkriterium kriterium : kriterien) {\r\n            kriterium.setNutzenattraktivitaetOperativerNutzenId(newNaOpNuId);\r\n            dao.insertAssignment(kriterium);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * ï¿½berprï¿½ft, ob ein Customizing komplett ist.\r\n     *\r\n     * @param request                   der HttpServletRequest\r\n     * @return                          true bei komplettem Customizing, sonst false\r\n     */\r\n    public boolean customizingComplete(HttpServletRequest request) {\r\n        return customizingService.complete(request);\r\n    }\r\n\r\n    /**\r\n     * Erstellt ein Objekt vom Typ Nutzenkriterium mit der id des Mandanten\r\n     * und, falls angegeben, mit abgefï¿½llten Formulardaten\r\n     *\r\n     * @param request                   der HttpServletRequest\r\n     * @param form                      das DynaActionForm\r\n     * @return                          Nutzenkriterium mit mandantId\r\n     */\r\n    private Nutzenkriterium createNutzenkriterium(HttpServletRequest request, DynaActionForm form) {\r\n        Integer mandantId = (Integer) request.getSession().getAttribute(Constants.MANDANT_ID);\r\n        Nutzenkriterium n = new Nutzenkriterium();\r\n        n.setMandantId(mandantId);\r\n        if (form != null) {\r\n            Integer id = (Integer) form.get(Constants.NUTZENKRITERIUM_ID);\r\n            String name = (String) form.get(Constants.NAME);\r\n            String beschreibung = (String) form.get(\"beschreibung\");\r\n            String frageManagementDefault = (String) form.get(\"frageManagementDefault\");\r\n            String frageProjektbetroffeneDefault = (String) form.get(\"frageProjektbetroffeneDefault\");\r\n            Integer kategorieId = (Integer) form.get(Constants.KATEGORIE_ID);\r\n            n.setNutzenkriteriumId(id);\r\n            n.setName(name);\r\n            n.setBeschreibung(beschreibung);\r\n            n.setFrageManagementDefault(frageManagementDefault);\r\n            n.setFrageProjektbetroffeneDefault(frageProjektbetroffeneDefault);\r\n            n.setKategorieId(kategorieId);\r\n        }\r\n        return n;\r\n    }\r\n\r\n    /**\r\n     * ï¿½berprï¿½ft, ob die Id eines Nutzenkriteriums Ziels im Request ist\r\n     * (update) oder nicht (neu).\r\n     *\r\n     * @param request                   der HttpServletRequest\r\n     * @param form                      das DynaActionForm\r\n     * @return                          true, wenn das angegebene Nutzenkriterium\r\n     *                                  besteht, sonst false.\r\n     */\r\n    private boolean isUpdate(HttpServletRequest request, DynaActionForm form) {\r\n        Integer id = (Integer) form.get(Constants.NUTZENKRITERIUM_ID);\r\n        if (id == null || id == 0) {\r\n            return false;\r\n        }\r\n        return true;\r\n    }\r\n}\r\n",
		"id": "EvoSuiteBenchmark/46_nutzenportfolio/src/main/java/ch/bfh/egov/nutzenportfolio/service/nutzenkriterium/NutzenkriteriumDaoServiceTest7.java",
		"test_prompt": "// NutzenkriteriumDaoServiceTest7.java\npackage ch.bfh.egov.nutzenportfolio.service.nutzenkriterium;\n\nimport java.util.ArrayList;\nimport java.util.Collections;\nimport java.util.Comparator;\nimport java.util.HashMap;\nimport java.util.Iterator;\nimport java.util.List;\nimport javax.servlet.http.HttpServletRequest;\nimport javax.servlet.http.HttpSession;\nimport org.apache.commons.logging.Log;\nimport org.apache.commons.logging.LogFactory;\nimport org.apache.struts.action.ActionMessage;\nimport org.apache.struts.action.ActionMessages;\nimport org.apache.struts.action.DynaActionForm;\nimport ch.bfh.egov.nutzenportfolio.Constants;\nimport ch.bfh.egov.nutzenportfolio.common.AutoGrowingList;\nimport ch.bfh.egov.nutzenportfolio.common.NutzenkriteriumLine;\nimport ch.bfh.egov.nutzenportfolio.form.FragenForm;\nimport ch.bfh.egov.nutzenportfolio.persistence.nutzenkriterium.NutzenkriteriumDao;\nimport ch.bfh.egov.nutzenportfolio.service.auswahlfeld.AuswahlfeldService;\nimport ch.bfh.egov.nutzenportfolio.service.common.CommonService;\nimport ch.bfh.egov.nutzenportfolio.service.customizing.CustomizingService;\nimport ch.bfh.egov.nutzenportfolio.service.kategorie.KategorieService;\nimport ch.bfh.egov.nutzenportfolio.tos.Auswahlfeld;\nimport ch.bfh.egov.nutzenportfolio.tos.Customizing;\nimport ch.bfh.egov.nutzenportfolio.tos.Kategorie;\nimport ch.bfh.egov.nutzenportfolio.tos.NaOpNu;\nimport ch.bfh.egov.nutzenportfolio.tos.Nutzenkriterium;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link NutzenkriteriumDaoService}.\n* It contains ten unit test cases for the {@link NutzenkriteriumDaoService#customizingComplete(HttpServletRequest)} method.\n*/\nclass NutzenkriteriumDaoServiceTest7 {"
	},
	{
		"original_code": "// AuswahlfeldDaoService.java\n/**\r\n * Nutzenportfolio\r\n * Copyright (C) 2006 Kompetenzzentrum E-Business, Simon Bergamin\r\n *\r\n * This program is free software; you can redistribute it and/or\r\n * modify it under the terms of the GNU General Public License\r\n * as published by the Free Software Foundation; either version 2\r\n * of the License, or (at your option) any later version.\r\n *\r\n * This program is distributed in the hope that it will be useful,\r\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n * GNU General Public License for more details.\r\n *\r\n * You should have received a copy of the GNU General Public License\r\n * along with this program; if not, write to the Free Software\r\n * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\r\n */\r\npackage ch.bfh.egov.nutzenportfolio.service.auswahlfeld;\r\n\r\nimport java.util.ArrayList;\r\nimport java.util.HashMap;\r\nimport java.util.List;\r\nimport javax.servlet.http.HttpServletRequest;\r\nimport javax.servlet.http.HttpSession;\r\nimport org.apache.commons.logging.Log;\r\nimport org.apache.commons.logging.LogFactory;\r\nimport org.apache.struts.action.ActionMessage;\r\nimport org.apache.struts.action.ActionMessages;\r\nimport org.apache.struts.action.DynaActionForm;\r\nimport ch.bfh.egov.nutzenportfolio.Constants;\r\nimport ch.bfh.egov.nutzenportfolio.persistence.auswahlfeld.AuswahlfeldDao;\r\nimport ch.bfh.egov.nutzenportfolio.service.common.CommonService;\r\nimport ch.bfh.egov.nutzenportfolio.service.customizing.CustomizingService;\r\nimport ch.bfh.egov.nutzenportfolio.service.nutzenkriterium.NutzenkriteriumService;\r\nimport ch.bfh.egov.nutzenportfolio.service.strategischeziele.StrategischeZieleService;\r\nimport ch.bfh.egov.nutzenportfolio.tos.Auswahlfeld;\r\nimport ch.bfh.egov.nutzenportfolio.tos.Customizing;\r\nimport ch.bfh.egov.nutzenportfolio.tos.Nutzenkriterium;\r\nimport ch.bfh.egov.nutzenportfolio.tos.StrategischesZiel;\r\n\r\n/**\r\n * Implementierende Service-Klasse fï¿½r Auswahlfelder. Auswahlfelder\r\n * sind Eintrittswahrscheinlichkeiten, Eintrittszeitpunkte,\r\n * Abstufungen und Gewichtungen.\r\n *\r\n * @author Kompetenzzentrum E-Business, Simon Bergamin\r\n */\r\npublic class AuswahlfeldDaoService implements AuswahlfeldService {\r\n\r\n    private AuswahlfeldDao dao;\r\n\r\n    private NutzenkriteriumService nService;\r\n\r\n    private CommonService cService;\r\n\r\n    private CustomizingService customizingService;\r\n\r\n    private StrategischeZieleService szService;\r\n\r\n    private Log logger = LogFactory.getLog(this.getClass());\r\n\r\n    /**\r\n     * Konstruktor. ï¿½bergabe des DataAcessObject-Interfaces fï¿½r Auswahlfelder.\r\n     *\r\n     * @param dao                       Auswahlfeld DataAcessObject-Interface\r\n     */\r\n    public AuswahlfeldDaoService(AuswahlfeldDao dao) {\r\n        this.dao = dao;\r\n    }\r\n\r\n    /**\r\n     * @see ch.bfh.egov.nutzenportfolio.persistence.auswahlfeld.AuswahlfeldIbatisDao#getById(Auswahlfeld)\r\n     */\r\n    public Auswahlfeld getById(Auswahlfeld a) {\r\n        return dao.getById(a);\r\n    }\r\n\r\n    /**\r\n     * @see ch.bfh.egov.nutzenportfolio.persistence.auswahlfeld.AuswahlfeldIbatisDao#getByProjektId(Auswahlfeld)\r\n     */\r\n    public List<Auswahlfeld> getByProjektId(Auswahlfeld a) {\r\n        return dao.getByProjektId(a);\r\n    }\r\n\r\n    /**\r\n     * @see ch.bfh.egov.nutzenportfolio.persistence.auswahlfeld.AuswahlfeldIbatisDao#getByNaOpNu(Auswahlfeld)\r\n     */\r\n    public List<Auswahlfeld> getByNaOpNu(Auswahlfeld a) {\r\n        return dao.getByNaOpNu(a);\r\n    }\r\n\r\n    /**\r\n     * @see ch.bfh.egov.nutzenportfolio.persistence.auswahlfeld.AuswahlfeldIbatisDao#getGewichtungStatus(Integer)\r\n     */\r\n    public List<Auswahlfeld> getGewichtungStatus(Integer naOpNuId) {\r\n        return dao.getGewichtungStatus(naOpNuId);\r\n    }\r\n\r\n    /**\r\n     * @see ch.bfh.egov.nutzenportfolio.persistence.auswahlfeld.AuswahlfeldIbatisDao#getAbstufungStatus(Integer)\r\n     */\r\n    public List<Auswahlfeld> getAbstufungStatus(Integer naOpNuId) {\r\n        return dao.getAbstufungStatus(naOpNuId);\r\n    }\r\n\r\n    /**\r\n     * @see ch.bfh.egov.nutzenportfolio.persistence.auswahlfeld.AuswahlfeldIbatisDao#getAnzahlGewichtungen(Integer)\r\n     */\r\n    public List<Auswahlfeld> getAnzahlGewichtungen(Integer naOpNuId) {\r\n        return dao.getAnzahlGewichtungen(naOpNuId);\r\n    }\r\n\r\n    /**\r\n     * @see ch.bfh.egov.nutzenportfolio.persistence.auswahlfeld.AuswahlfeldIbatisDao#getAnzahlAbstufungen(Integer)\r\n     */\r\n    public List<Auswahlfeld> getAnzahlAbstufungen(Integer naOpNuId) {\r\n        return dao.getAnzahlAbstufungen(naOpNuId);\r\n    }\r\n\r\n    /**\r\n     * @see ch.bfh.egov.nutzenportfolio.persistence.auswahlfeld.AuswahlfeldIbatisDao#getSelectedByPaId(Auswahlfeld)\r\n     */\r\n    public List<Auswahlfeld> getSelectedByPaId(Auswahlfeld a) {\r\n        return dao.getSelectedByPaId(a);\r\n    }\r\n\r\n    /**\r\n     * @see ch.bfh.egov.nutzenportfolio.persistence.auswahlfeld.AuswahlfeldIbatisDao#getSelectedByNaOpNuId(Auswahlfeld)\r\n     */\r\n    public List<Auswahlfeld> getSelectedByNaOpNuId(Auswahlfeld a) {\r\n        return dao.getSelectedByNaOpNuId(a);\r\n    }\r\n\r\n    /**\r\n     * @see ch.bfh.egov.nutzenportfolio.persistence.auswahlfeld.AuswahlfeldIbatisDao#deleteGewichtungen(Auswahlfeld)\r\n     */\r\n    public void deleteGewichtungen(Auswahlfeld a) {\r\n        dao.deleteGewichtungen(a);\r\n    }\r\n\r\n    /**\r\n     * Initialisierung dieses Service-Objekts durch ï¿½bergabe anderer,\r\n     * benï¿½tigter Service-Objekte.\r\n     *\r\n     * @param nService                   Nutzenkriterium Service Objekt\r\n     * @param cService                   Common Service Objekt\r\n     * @param customizingService         Customizing Service Objekt\r\n     */\r\n    public void init(NutzenkriteriumService nService, CommonService cService, CustomizingService customizingService, StrategischeZieleService szService) {\r\n        this.nService = nService;\r\n        this.cService = cService;\r\n        this.customizingService = customizingService;\r\n        this.szService = szService;\r\n    }\r\n\r\n    /**\r\n     * Generiert Auswahlfelder und fï¿½llt diese nach Typ und\r\n     * Level ab.\r\n     *\r\n     * @param request           der HttpServletRequest\r\n     * @param path              der Pfad der momentanen Action\r\n     */\r\n    public void list(HttpServletRequest request, String path) {\r\n        logger.debug(\"Pfad: \" + path);\r\n        // Neues Auswahlfeld generieren\r\n        Auswahlfeld a = createAuswahlfeld(request, null);\r\n        // Eintrittswahrscheinlichkeiten\r\n        if (path.contains(Constants.VERWALTUNG_EINTRITTSWAHRSCHEINLICHKEITEN_ACTION)) {\r\n            logger.debug(\"Eintrittswahrscheinlichkeiten holen\");\r\n            a = setType(a, Constants.EINTRITTSWAHRSCHEINLICHKEIT);\r\n        } else // Eintrittszeitpunkte\r\n        if (path.contains(Constants.VERWALTUNG_EINTRITTSZEITPUNKTE_ACTION)) {\r\n            logger.debug(\"Eintrittszeitpunkte holen\");\r\n            a = setType(a, Constants.EINTRITTSZEITPUNKT);\r\n        } else // Abstufungen\r\n        if (path.contains(Constants.VERWALTUNG_ABSTUFUNGEN_ACTION)) {\r\n            logger.debug(\"Abstufungen holen\");\r\n            a = setType(a, Constants.ABSTUFUNG);\r\n        } else // Gewichtungen\r\n        if (path.contains(Constants.VERWALTUNG_GEWICHTUNG_ACTION)) {\r\n            logger.debug(\"Gewichtungen holen\");\r\n            a = setType(a, Constants.GEWICHTUNG);\r\n        }\r\n        // Alle Levels holen\r\n        List<Auswahlfeld> afs = new ArrayList<Auswahlfeld>();\r\n        for (int i = 1; i < 6; i++) {\r\n            a.setLevel(i);\r\n            afs.addAll(dao.getAuswahlFelder(a));\r\n        }\r\n        logger.debug(afs.size() + \" Auswahlfelder in der Liste\");\r\n        request.setAttribute(Constants.AUSWAHLFELDER, afs);\r\n    }\r\n\r\n    /**\r\n     * Fï¿½llt ein Formular mit bestehenden Daten eines Auswahlfelds ab,\r\n     * falls eine entsprechende id angegeben wurde.\r\n     *\r\n     * @param request                   der HttpServletRequest\r\n     * @param form                      das DynaActionForm\r\n     */\r\n    public void edit(HttpServletRequest request, DynaActionForm form) {\r\n        if (isUpdate(request, form)) {\r\n            Auswahlfeld af = createAuswahlfeld(request, form);\r\n            af = dao.getById(af);\r\n            form.set(Constants.NAME, af.getName());\r\n            form.set(\"level\", af.getLevel());\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Fï¿½hrt ein update eines bestenenden Auswahlfelds anhand von\r\n     * Formulardaten durch.\r\n     *\r\n     * @param request                   der HttpServletRequest\r\n     * @param form                      das DynaActionForm\r\n     */\r\n    public void update(HttpServletRequest request, DynaActionForm form) {\r\n        logger.debug(\"Update Auswahlfeld\");\r\n        if (isUpdate(request, form)) {\r\n            logger.debug(\"Update durchfï¿½hren\");\r\n            Auswahlfeld af = createAuswahlfeld(request, form);\r\n            dao.update(af);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Prï¿½ft, ob ein Auswahlfeld existiert und gibt es zurï¿½ck.\r\n     *\r\n     * @param request                   der HttpServletRequest\r\n     * @param form                      das DynaActionForm\r\n     * @return                          das Auswahlfeld\r\n     */\r\n    public Auswahlfeld getAuswahlfeld(HttpServletRequest request, DynaActionForm form) {\r\n        Auswahlfeld af = createAuswahlfeld(request, form);\r\n        return dao.getById(af);\r\n    }\r\n\r\n    /**\r\n     * Abfrage fï¿½r das Lï¿½schen von einem Auswahlfeld.\r\n     *\r\n     * @param request                   der HttpServletRequest\r\n     * @param af                        das zu lï¿½schende Auswahlfeld\r\n     * @param messages                  das ActionMessages Objekt\r\n     */\r\n    public void deleteQuestion(HttpServletRequest request, Auswahlfeld af, ActionMessages messages) {\r\n        // Verknï¿½pfungen prï¿½fen\r\n        linkedTo(request, af);\r\n        // Bestï¿½tigungsnachricht ausgeben\r\n        messages.add(ActionMessages.GLOBAL_MESSAGE, new ActionMessage(\"messages.question.delete\", af.getName()));\r\n        // Actions zum Lï¿½schen und Abbrechen definieren\r\n        String action = \"\";\r\n        if (af.getEintrittswahrscheinlichkeit()) {\r\n            action = Constants.VERWALTUNG_EINTRITTSWAHRSCHEINLICHKEITEN_ACTION + \".do\";\r\n        } else if (af.getEintrittszeitpunkt()) {\r\n            action = Constants.VERWALTUNG_EINTRITTSZEITPUNKTE_ACTION + \".do\";\r\n        } else if (af.getAbstufung()) {\r\n            action = Constants.VERWALTUNG_ABSTUFUNGEN_ACTION + \".do\";\r\n        } else if (af.getGewichtung()) {\r\n            action = Constants.VERWALTUNG_GEWICHTUNG_ACTION + \".do\";\r\n        }\r\n        request.setAttribute(Constants.ACTION, action);\r\n        request.setAttribute(Constants.DISPATCH_YES, Constants.DELETE);\r\n        request.setAttribute(Constants.DISPATCH_NO, Constants.LIST);\r\n        request.setAttribute(Constants.ID_NAME, Constants.AUSWAHLFELD_ID);\r\n        request.setAttribute(Constants.ID_VALUE, af.getAuswahlfeldId());\r\n    }\r\n\r\n    /**\r\n     * Setzt die Verknï¿½pfungen zu diesem Auswahlfeld in den Request.\r\n     * Ein Auswahlfeld kann mit Customizings verknï¿½pft sein. Diese\r\n     * Methode wird bei der Lï¿½schabfrage verwendet.\r\n     *\r\n     * @param request                   der HttpServletRequest\r\n     * @param af                        das zu lï¿½schende Auswahlfeld\r\n     */\r\n    public void linkedTo(HttpServletRequest request, Auswahlfeld af) {\r\n        HashMap<String, List> map = new HashMap<String, List>();\r\n        // Customizings suchen, die dieses Detailziel benï¿½tigen\r\n        List<Customizing> customizings = dao.getLinkedPaCustomizings(af);\r\n        customizings.addAll(dao.getLinkedNaOpNuCustomizings(af));\r\n        if (customizings.size() > 0) {\r\n            for (Customizing c : customizings) {\r\n                if (c.getStatus()) {\r\n                    request.setAttribute(\"active\", true);\r\n                    break;\r\n                }\r\n            }\r\n            map.put(\"Customizings\", customizings);\r\n        }\r\n        request.setAttribute(\"linked\", map);\r\n    }\r\n\r\n    /**\r\n     * Lï¿½scht ein Auswahlfeld. Falls es mit inaktiven Customizings\r\n     * verknï¿½ft ist, werden diese ebenfalls gelï¿½scht. Wenn aktive Customizings\r\n     * verknï¿½ft sind, wird das Auswahlfeld nicht gelï¿½scht.\r\n     *\r\n     * @param request                   der HttpServletRequest\r\n     * @param af                        das zu lï¿½schende Auswahlfeld\r\n     */\r\n    public void delete(HttpServletRequest request, Auswahlfeld af) {\r\n        // Verknï¿½pfungen prï¿½fen\r\n        linkedTo(request, af);\r\n        Boolean active = (Boolean) request.getAttribute(\"active\");\r\n        // Aktives Customizing verknï¿½ft. Dies sollte nicht passieren ausser bei\r\n        // einem direkten URL-Aufruf ...\r\n        if (active != null && active) {\r\n            logger.debug(\"Aktives Customizing verknï¿½pft, Auswahlfeld wird nicht gelï¿½scht\");\r\n            return;\r\n        }\r\n        // Customizings lï¿½schen\r\n        List<Customizing> customizings = dao.getLinkedPaCustomizings(af);\r\n        customizings.addAll(dao.getLinkedNaOpNuCustomizings(af));\r\n        for (Customizing c : customizings) {\r\n            logger.debug(\"Lï¿½sche Customizing \" + c.getCustomizingId());\r\n            customizingService.cascadeDelete(request, c);\r\n        }\r\n        // Lï¿½schen des Auswahlfelds\r\n        dao.delete(af);\r\n    }\r\n\r\n    /**\r\n     * Lï¿½scht alle Verknï¿½pfungen von Auswahlfeldern zu einer Projektattraktivitï¿½t.\r\n     *\r\n     * @param paId                      die Id der Projektattraktivitï¿½t\r\n     */\r\n    public void deletePaAssignmentsById(Integer paId) {\r\n        Auswahlfeld af = new Auswahlfeld();\r\n        af.setProjektattraktivitaetId(paId);\r\n        af = setType(af, Constants.EINTRITTSWAHRSCHEINLICHKEIT);\r\n        dao.deleteAssignments(af);\r\n        af = setType(af, Constants.EINTRITTSZEITPUNKT);\r\n        dao.deleteAssignments(af);\r\n    }\r\n\r\n    /**\r\n     * Lï¿½scht alle Verknï¿½pfungen von Auswahlfeldern zu einer\r\n     * Nutzenattraktivitï¿½t oder einem Operativen Nutzen.\r\n     *\r\n     * @param naOpNuId                  die Id der Nutzenattraktivitï¿½t\r\n     *                                  oder des Operativen Nutzens\r\n     */\r\n    public void deleteNaOpNuAssignmentsById(Integer naOpNuId) {\r\n        Auswahlfeld af = new Auswahlfeld();\r\n        af.setNutzenattraktivitaetOperativerNutzenId(naOpNuId);\r\n        af = setType(af, Constants.ABSTUFUNG);\r\n        dao.deleteNaOpNuAssignments(af);\r\n        af = setType(af, Constants.GEWICHTUNG);\r\n        dao.deleteNaOpNuAssignments(af);\r\n    }\r\n\r\n    /**\r\n     * Generiert Auswahlfelder und fï¿½llt diese nach Typ und\r\n     * Level ab.\r\n     *\r\n     * @param request           der HttpServletRequest\r\n     * @param path              der Pfad der momentanen Action\r\n     * @param form              das DynaActionForm\r\n     */\r\n    public void populate(HttpServletRequest request, String path, DynaActionForm form) {\r\n        // Wir wollen kein [Ljava.lang.String;@xxxxxxx im Definition Feld ...\r\n        try {\r\n            form.set(\"name\", null);\r\n        } catch (IllegalArgumentException ex) {\r\n        }\r\n        // Benï¿½tigte Id's\r\n        HttpSession session = request.getSession();\r\n        Integer customizingId = (Integer) session.getAttribute(Constants.CUSTOMIZING_ID);\r\n        // Neues Auswahlfeld generieren\r\n        Auswahlfeld a = createAuswahlfeld(request, null);\r\n        // Realisierbarkeit\r\n        logger.debug(\"Pfad: \" + path);\r\n        if (path.contains(Constants.REALISIERBARKEIT_ACTION)) {\r\n            Integer paId = cService.getProjektattraktivitaetIdByCustomizingId(customizingId);\r\n            a.setProjektattraktivitaetId(paId);\r\n            // Eintrittswahrscheinlichkeit abfï¿½llen\r\n            a = setType(a, Constants.EINTRITTSWAHRSCHEINLICHKEIT);\r\n            put(request, a, Constants.EINTRITTSWAHRSCHEINLICHKEIT, 3);\r\n            // Selektiere Auswahlfelder\r\n            preselect(request, a, Constants.EINTRITTSWAHRSCHEINLICHKEIT, false);\r\n            // Eintrittszeitpunkt abfï¿½llen\r\n            a = setType(a, Constants.EINTRITTSZEITPUNKT);\r\n            put(request, a, Constants.EINTRITTSZEITPUNKT, 3);\r\n            // Selektiere Auswahlfelder\r\n            preselect(request, a, Constants.EINTRITTSZEITPUNKT, false);\r\n            // Typen in den Request stellen fï¿½r das Hinzufï¿½gen von neuen Begriffen\r\n            request.setAttribute(Constants.EINTRITTSWAHRSCHEINLICHKEITEN, Constants.EINTRITTSWAHRSCHEINLICHKEIT);\r\n            request.setAttribute(Constants.EINTRITTSZEITPUNKTE, Constants.EINTRITTSZEITPUNKT);\r\n            // Anzahl Strategische Ziele holen\r\n            Integer mandantId = (Integer) request.getSession().getAttribute(Constants.MANDANT_ID);\r\n            StrategischesZiel sz = new StrategischesZiel();\r\n            sz.setCustomizingId(customizingId);\r\n            sz.setMandantId(mandantId);\r\n            List<StrategischesZiel> szs = szService.getAssignments(sz);\r\n            request.setAttribute(\"totalStrategischeZiele\", szs.size());\r\n        } else // Stufenbeschriebe abfï¿½llen\r\n        if (path.contains(Constants.STUFENBESCHRIEBE_ACTION) || path.contains(Constants.GEWICHTUNG_ACTION)) {\r\n            // Abstufungen holen\r\n            Integer levels = (Integer) request.getSession().getAttribute(Constants.ABSTUFUNGEN);\r\n            List<Integer> list = new ArrayList<Integer>();\r\n            // Niedrigste ist immer gewï¿½hlt (1)\r\n            list.add(new Integer(1));\r\n            // Wenn 3 Abstufungen: Niedrigste, mittlere  und\r\n            // hï¿½chste auswï¿½hlen (1 + 3 + 5)\r\n            if (levels == 3) {\r\n                list.add(new Integer(3));\r\n            }\r\n            // Wenn 4 Abstufungen: Niedrigste, mittlere, zweithï¿½chste und\r\n            // Hï¿½chste auswï¿½hlen (1 + 3 + 4 + 5)\r\n            if (levels == 4) {\r\n                list.add(new Integer(3));\r\n                list.add(new Integer(4));\r\n            }\r\n            // Alle 5 Abstufungen (1 + 2 +3 + 4 + 5)\r\n            if (levels == 5) {\r\n                list.add(new Integer(2));\r\n                list.add(new Integer(3));\r\n                list.add(new Integer(4));\r\n            }\r\n            // Hï¿½chste ist immer gewï¿½hlt (5)\r\n            list.add(new Integer(5));\r\n            request.setAttribute(Constants.STUFEN, list);\r\n            // Auswahlfelder abfï¿½llen\r\n            if (path.contains(Constants.STUFENBESCHRIEBE_ACTION)) {\r\n                a = setType(a, Constants.ABSTUFUNG);\r\n                put(request, a, Constants.ABSTUFUNG, 5);\r\n                // Typ in den Request stellen fï¿½r das Hinzufï¿½gen von neuen Begriffen\r\n                request.setAttribute(Constants.ABSTUFUNGEN, Constants.ABSTUFUNG);\r\n            } else {\r\n                a = setType(a, Constants.GEWICHTUNG);\r\n                put(request, a, Constants.GEWICHTUNG, 5);\r\n                // Typ in den Request stellen fï¿½r das Hinzufï¿½gen von neuen Begriffen\r\n                request.setAttribute(Constants.GEWICHTUNGEN, Constants.GEWICHTUNG);\r\n            }\r\n            // Selektiere Auswahlfelder\r\n            Integer naOpNuId = cService.getNaOpNuId(request, customizingId);\r\n            a.setNutzenattraktivitaetOperativerNutzenId(naOpNuId);\r\n            preselect(request, a, null, true);\r\n            // Operativer Nutzen -> Projektbetroffene\r\n            if (cService.isOperativerNutzen(request)) {\r\n                request.setAttribute(Constants.PROJEKTBETROFFENE, true);\r\n            }\r\n            // Nutzenkriterien abfï¿½llen\r\n            nService.populate(request);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Weist die angewï¿½hlten Eintrï¿½ge der Auswahlfelder der aktuellen\r\n     * Projektattraktivitaet zu.\r\n     *\r\n     * @param request           der HttpServletRequest\r\n     * @param form              das Formular der Action\r\n     * @param path              der Pfad der momentanen Action\r\n     */\r\n    public void setAuswahlfelder(HttpServletRequest request, DynaActionForm form, String path) {\r\n        // Benï¿½tigte ids holen\r\n        HttpSession session = request.getSession();\r\n        Integer customizingId = (Integer) session.getAttribute(Constants.CUSTOMIZING_ID);\r\n        Integer mandantId = (Integer) session.getAttribute(Constants.MANDANT_ID);\r\n        // Neues Auswahlfeld generieren\r\n        Auswahlfeld a = createAuswahlfeld(request, null);\r\n        // Realisierbarkeit\r\n        logger.debug(\"Pfad: \" + path);\r\n        if (path.contains(Constants.REALISIERBARKEIT_ACTION)) {\r\n            Integer pId = cService.getProjektattraktivitaetIdByCustomizingId(customizingId);\r\n            a.setProjektattraktivitaetId(pId);\r\n            // Eintrittswahrscheinlichkeiten updaten\r\n            a = setType(a, Constants.EINTRITTSWAHRSCHEINLICHKEIT);\r\n            dao.deleteAssignments(a);\r\n            insertAssignments(a, Constants.EINTRITTSWAHRSCHEINLICHKEIT, form, 3);\r\n            // Eintrittszeitpunkt abfï¿½llen\r\n            a = setType(a, Constants.EINTRITTSZEITPUNKT);\r\n            dao.deleteAssignments(a);\r\n            insertAssignments(a, Constants.EINTRITTSZEITPUNKT, form, 3);\r\n            setRealisierbarkeitStatus(request, pId);\r\n        } else // Stufenbeschriebe abfï¿½llen\r\n        if (path.contains(Constants.STUFENBESCHRIEBE_ACTION)) {\r\n            Integer naOpNuId = cService.getNaOpNuId(request, customizingId);\r\n            logger.debug(\"naOpNuId=\" + naOpNuId);\r\n            a.setNutzenattraktivitaetOperativerNutzenId(naOpNuId);\r\n            a = setType(a, Constants.ABSTUFUNG);\r\n            insertNaOpNuAssignment(a, Constants.ABSTUFUNG, request, form, 5);\r\n            logger.debug(\"stufenbeschriebe\");\r\n            boolean isNa = !cService.isOperativerNutzen(request);\r\n            setStufenStatus(request, naOpNuId, isNa);\r\n        } else // Gewichtung abfï¿½llen\r\n        if (path.contains(Constants.GEWICHTUNG_ACTION)) {\r\n            // allfï¿½llige direkte Gewichtung lï¿½schen\r\n            logger.debug(\"lï¿½sche allfï¿½llige direkte Gewichtungen.\");\r\n            Integer naOpNuId = cService.getNaOpNuId(request, customizingId);\r\n            nService.unsetAssignmentGewichtung(naOpNuId);\r\n            a.setNutzenattraktivitaetOperativerNutzenId(naOpNuId);\r\n            a = setType(a, Constants.GEWICHTUNG);\r\n            insertNaOpNuAssignment(a, Constants.GEWICHTUNG, request, form, 5);\r\n            logger.debug(\"gewichtung\");\r\n            boolean isNa = !cService.isOperativerNutzen(request);\r\n            Nutzenkriterium n = new Nutzenkriterium();\r\n            n.setMandantId(mandantId);\r\n            n.setNutzenattraktivitaetOperativerNutzenId(naOpNuId);\r\n            List<Nutzenkriterium> kriterien = nService.getAssignments(n);\r\n            setGewichtungStatus(request, kriterien, naOpNuId, isNa);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @see ch.bfh.egov.nutzenportfolio.service.nutzenkriterium.NutzenkriteriumDaoService#next(HttpServletRequest)\r\n     */\r\n    public boolean next(HttpServletRequest request) {\r\n        return nService.next(request);\r\n    }\r\n\r\n    /**\r\n     * Generiert ein Auswahlfeld Objekt mit dem aktuellen Mandanten.\r\n     *\r\n     * @param request               der HttpServletRequest\r\n     * @param form                  das DynaActionForm\r\n     * @return                      ein Auswahlfeld mit gesetzem Mandant\r\n     */\r\n    public Auswahlfeld createAuswahlfeld(HttpServletRequest request, DynaActionForm form) {\r\n        Auswahlfeld a = new Auswahlfeld();\r\n        a.setMandantId((Integer) request.getSession().getAttribute(Constants.MANDANT_ID));\r\n        if (form != null) {\r\n            Integer id = (Integer) form.get(Constants.AUSWAHLFELD_ID);\r\n            String name = (String) form.get(Constants.NAME);\r\n            Integer level = (Integer) form.get(\"level\");\r\n            a.setAuswahlfeldId(id);\r\n            a.setName(name);\r\n            a.setLevel(level);\r\n        }\r\n        return a;\r\n    }\r\n\r\n    /**\r\n     * Setzt den Typ eines Auswahlfelds anhand von Konstanten.\r\n     *\r\n     * @param a                   das Auswahlfeld\r\n     * @param type                der zu setzende Typ des Auswahlfelds\r\n     * @return                    das Auswahl-Feld mit dem gesetzten Typ\r\n     */\r\n    public Auswahlfeld setType(Auswahlfeld a, int type) {\r\n        switch(type) {\r\n            case Constants.EINTRITTSWAHRSCHEINLICHKEIT:\r\n                a.setEintrittswahrscheinlichkeit(true);\r\n                a.setEintrittszeitpunkt(false);\r\n                a.setAbstufung(false);\r\n                a.setGewichtung(false);\r\n                break;\r\n            case Constants.EINTRITTSZEITPUNKT:\r\n                a.setEintrittswahrscheinlichkeit(false);\r\n                a.setEintrittszeitpunkt(true);\r\n                a.setAbstufung(false);\r\n                a.setGewichtung(false);\r\n                break;\r\n            case Constants.ABSTUFUNG:\r\n                a.setEintrittswahrscheinlichkeit(false);\r\n                a.setEintrittszeitpunkt(false);\r\n                a.setAbstufung(true);\r\n                a.setGewichtung(false);\r\n                break;\r\n            case Constants.GEWICHTUNG:\r\n                a.setEintrittswahrscheinlichkeit(false);\r\n                a.setEintrittszeitpunkt(false);\r\n                a.setAbstufung(false);\r\n                a.setGewichtung(true);\r\n                break;\r\n        }\r\n        return a;\r\n    }\r\n\r\n    /**\r\n     * @see ch.bfh.egov.nutzenportfolio.service.common.CommonDaoService#isOperativerNutzen(HttpServletRequest)\r\n     */\r\n    public boolean isOperativerNutzen(HttpServletRequest request) {\r\n        return cService.isOperativerNutzen(request);\r\n    }\r\n\r\n    /**\r\n     * Speichert ein neues Auswahlfeld und fï¿½gt es dem aktuellen\r\n     * Customizing zu.\r\n     *\r\n     * @param request                   der HttpServletRequest\r\n     * @param form                      das DynaActionForm mit Daten des Auswahlfelds\r\n     * @param errors                    ActionMessages Objekt zur Ausgabe von\r\n     *                                  Feld-bezogenen Fehlermeldungen\r\n     * @param messages                  ActionMessages Objekt zur Ausgabe von\r\n     *                                  globalen Fehlermeldungen\r\n     * @return                          true bei Erfolg, sonst false\r\n     */\r\n    public boolean add(HttpServletRequest request, DynaActionForm form, ActionMessages errors, ActionMessages messages) {\r\n        Integer mandantId = (Integer) request.getSession().getAttribute(Constants.MANDANT_ID);\r\n        // Formulardaten holen\r\n        String[] names = (String[]) form.get(\"name\");\r\n        Integer[] types = (Integer[]) form.get(\"type\");\r\n        Integer[] lvls = (Integer[]) form.get(\"lvl\");\r\n        String name = null;\r\n        Integer pos = null;\r\n        for (int i = 0; i < names.length; i++) {\r\n            logger.debug(\"names[\" + i + \"]=\" + names[i]);\r\n            if (names[i] != null && !names[i].equals(\"\")) {\r\n                name = names[i];\r\n                pos = i;\r\n            }\r\n        }\r\n        for (int i = 0; i < types.length; i++) {\r\n            logger.debug(\"types[\" + i + \"]=\" + types[i]);\r\n        }\r\n        for (int i = 0; i < lvls.length; i++) {\r\n            logger.debug(\"lvls[\" + i + \"]=\" + lvls[i]);\r\n        }\r\n        // Formulardaten ï¿½berprï¿½fen\r\n        if (name == null) {\r\n            logger.debug(\"Name nicht vorhanden.\");\r\n            errors.add(\"name\", new ActionMessage(\"errors.required\", \"Name\"));\r\n            return false;\r\n        }\r\n        Integer type = types[pos];\r\n        Integer lvl = lvls[pos];\r\n        Auswahlfeld af = new Auswahlfeld();\r\n        af.setMandantId(mandantId);\r\n        af.setName(name);\r\n        af.setLevel(lvl);\r\n        setType(af, type);\r\n        // Auf duplikate prï¿½fen\r\n        Auswahlfeld a = dao.getByName(af);\r\n        Boolean match = false;\r\n        if (a != null) {\r\n            if (a.getAbstufung() && type == Constants.ABSTUFUNG) {\r\n                match = true;\r\n            }\r\n            if (a.getGewichtung() && type == Constants.GEWICHTUNG) {\r\n                match = true;\r\n            }\r\n            if (a.getEintrittswahrscheinlichkeit() && type == Constants.EINTRITTSWAHRSCHEINLICHKEIT) {\r\n                match = true;\r\n            }\r\n            if (a.getEintrittszeitpunkt() && type == Constants.EINTRITTSZEITPUNKT) {\r\n                match = true;\r\n            }\r\n        }\r\n        if (a != null && match) {\r\n            logger.debug(name + \" ist ein Duplikat\");\r\n            messages.add(ActionMessages.GLOBAL_MESSAGE, new ActionMessage(\"errors.duplicate\", \"Eintrag\"));\r\n            return false;\r\n        }\r\n        // Auswahlfeld einfï¿½gen\r\n        dao.insert(af);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Kopiert alle zugewiesenen Auswahlfelder eines Customizings\r\n     * in ein neues.\r\n     *\r\n     * @param paId                          die Id der aktuellen Projektattraktivitï¿½t\r\n     * @param newPaId                       die Id der neuen Projektattraktivitï¿½t\r\n     * @param naOpNuId                      die Id der aktuellen Nutzenattraktivitï¿½t\r\n     *                                      bzw. des aktuellen Operativen Nutzens\r\n     * @param newNaOpNuId                   die Id der neuen Nutzenattraktivitï¿½t\r\n     *                                      bzw. des neuen Operativen Nutzens\r\n     * @param type                          der Typ des Auswahlfelds\r\n     */\r\n    public void copy(Integer paId, Integer newPaId, Integer naOpNuId, Integer newNaOpNuId, Integer type) {\r\n        Auswahlfeld a = new Auswahlfeld();\r\n        // Typ setzen\r\n        this.setType(a, type);\r\n        // Projektattraktivitï¿½t\r\n        if (paId != null) {\r\n            a.setProjektattraktivitaetId(paId);\r\n            List<Auswahlfeld> afs = dao.getSelectedByPaId(a);\r\n            for (Auswahlfeld af : afs) {\r\n                af.setProjektattraktivitaetId(newPaId);\r\n                dao.insertAssignment(af);\r\n            }\r\n        } else // Nutzenattraktivitï¿½t oder Operativer Nutzen\r\n        {\r\n            a.setNutzenattraktivitaetOperativerNutzenId(naOpNuId);\r\n            List<Auswahlfeld> afs = dao.getSelectedByNaOpNuId(a);\r\n            for (Auswahlfeld af : afs) {\r\n                af.setNutzenattraktivitaetOperativerNutzenId(newNaOpNuId);\r\n                dao.insertNaOpNuAssignment(af);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Setzt den Navigations-Status von den Auswahlfeldern der\r\n     * Realisierbarkeit eines Customizings.\r\n     *\r\n     * @param request                       HttpServletRequest\r\n     * @param paId                          die Id der Projektattraktivitï¿½t\r\n     * @return                              true fï¿½r Status grï¿½n, sonst false\r\n     */\r\n    public boolean setRealisierbarkeitStatus(HttpServletRequest request, Integer paId) {\r\n        // Zugewiesene Auswahlfelder holen\r\n        List<Auswahlfeld> afs = dao.getRealisierbarkeitStatus(paId);\r\n        HttpSession session = request.getSession();\r\n        // Mindestens ein Auswahlfeld muss angewï¿½hlt sein\r\n        if (afs != null && afs.size() > 0) {\r\n            // Status grï¿½n, Status-Flag in die Session setzen\r\n            session.setAttribute(Constants.REALISIERBARKEIT, true);\r\n            return true;\r\n        } else {\r\n            // Status rot, eventuell vorhandenes Flag aus der Session lï¿½schen\r\n            session.removeAttribute(Constants.REALISIERBARKEIT);\r\n        }\r\n        return false;\r\n    }\r\n\r\n    /**\r\n     * Setzt den Navigations-Status von den Auswahlfeldern\r\n     * der Abstufungen eines Customizings.\r\n     *\r\n     * @param request                       HttpServletRequest\r\n     * @param naOpNuId                      die Id der Nutzenattraktivitï¿½t\r\n     *                                      bzw. des Operativen Nutzens\r\n     * @param isNa                          true fï¿½r Nutzenattraktivitï¿½t, sonst false\r\n     * @return                              true fï¿½r Status grï¿½n, sonst false\r\n     */\r\n    public boolean setStufenStatus(HttpServletRequest request, Integer naOpNuId, boolean isNa) {\r\n        // Zugewiesene Nutzenkriterien holen\r\n        HttpSession session = request.getSession();\r\n        Integer mandantId = (Integer) session.getAttribute(Constants.MANDANT_ID);\r\n        Nutzenkriterium n = new Nutzenkriterium();\r\n        n.setMandantId(mandantId);\r\n        n.setNutzenattraktivitaetOperativerNutzenId(naOpNuId);\r\n        List<Nutzenkriterium> kriterien = nService.getAssignments(n);\r\n        // Zugewiesene Auswahlfelder holen\r\n        List<Auswahlfeld> abstufungen = dao.getAbstufungStatus(naOpNuId);\r\n        if (kriterien != null && abstufungen != null) {\r\n            logger.debug(kriterien.size() + \" Nutzenkriterien in der Liste\");\r\n            logger.debug(abstufungen.size() + \" Abstufungen in der Liste\");\r\n        }\r\n        // Mindestens ein Auswahlfeld pro Nutzenkriterium muss angewï¿½hlt sein\r\n        if (abstufungen != null && kriterien != null && abstufungen.size() > 0 && kriterien.size() > 0 && kriterien.size() <= abstufungen.size()) {\r\n            // Nutzenattraktivitï¿½t\r\n            if (isNa) {\r\n                session.setAttribute(Constants.ABSTUFUNGEN_NA, true);\r\n            } else // Operativer Nutzen\r\n            {\r\n                session.setAttribute(Constants.ABSTUFUNGEN_OP_NU, true);\r\n            }\r\n            return true;\r\n        } else // Status rot, eventuell vorhandenes Flag aus der Session lï¿½schen\r\n        {\r\n            // Nutzenattraktivitï¿½t\r\n            if (isNa) {\r\n                session.removeAttribute(Constants.ABSTUFUNGEN_NA);\r\n            } else // Operativer Nutzen\r\n            {\r\n                session.removeAttribute(Constants.ABSTUFUNGEN_OP_NU);\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n\r\n    /**\r\n     * Setzt den Navigations-Status von den Auswahlfeldern\r\n     * der Gewichtung eines Customizings.\r\n     *\r\n     * @param request                       HttpServletRequest\r\n     * @param kriterien                     Liste aller zugewiesenen Kriterien\r\n     * @param naOpNuId                      die Id der Nutzenattraktivitï¿½t\r\n     *                                      bzw. des Operativen Nutzens\r\n     * @param isNa                           true fï¿½r Nutzenattraktivitï¿½t, sonst false\r\n     * @return                              true fï¿½r Status grï¿½n, sonst false\r\n     */\r\n    public boolean setGewichtungStatus(HttpServletRequest request, List<Nutzenkriterium> kriterien, Integer naOpNuId, boolean isNa) {\r\n        HttpSession session = request.getSession();\r\n        // Gewichtung durch Fragebogen?\r\n        List<Auswahlfeld> gewichtungen = dao.getGewichtungStatus(naOpNuId);\r\n        if (gewichtungen != null && gewichtungen.size() > 0) {\r\n            logger.debug(\"gewichtungen.size()=\" + gewichtungen.size() + \" bei naOpNuId=\" + naOpNuId);\r\n            if (isNa) {\r\n                logger.debug(\"GEWICHTUNGEN_NA=true\");\r\n                session.setAttribute(Constants.GEWICHTUNGEN_NA, true);\r\n            } else {\r\n                logger.debug(\"GEWICHTUNGEN_OP_NU=true\");\r\n                session.setAttribute(Constants.GEWICHTUNGEN_OP_NU, true);\r\n            }\r\n            return true;\r\n        } else // Direkte Gewichtung?\r\n        if (kriterien != null) {\r\n            logger.debug(\"direkte Gewichtung bei naOpNuId=\" + naOpNuId);\r\n            for (Nutzenkriterium k : kriterien) {\r\n                logger.debug(\"nutzenkriteriumId=\" + k.getNutzenkriteriumId());\r\n                logger.debug(\"gewichtung=\" + k.getGewichtung());\r\n                if (k.getGewichtung() == null) {\r\n                    logger.debug(\"direkte Gewichtung null\");\r\n                    return false;\r\n                }\r\n            }\r\n            if (isNa) {\r\n                logger.debug(\"GEWICHTUNGEN_NA=true\");\r\n                session.setAttribute(Constants.GEWICHTUNGEN_NA, true);\r\n            } else {\r\n                logger.debug(\"GEWICHTUNGEN_OP_NU=true\");\r\n                session.setAttribute(Constants.GEWICHTUNGEN_OP_NU, true);\r\n            }\r\n            return true;\r\n        } else {\r\n            logger.debug(\"Gewichtungsstatus=false\");\r\n            return false;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * ï¿½berprï¿½ft, ob ein Customizing komplett ist.\r\n     *\r\n     * @param request                   der HttpServletRequest\r\n     * @return                          true bei komplettem Customizing, sonst false\r\n     */\r\n    public boolean customizingComplete(HttpServletRequest request) {\r\n        return customizingService.complete(request);\r\n    }\r\n\r\n    /**\r\n     * Setzt fï¿½r jeden gegebenen Level ein Auswahlfeld in den Request.\r\n     *\r\n     * @param request           der HttpServletRequest\r\n     * @param a                 das Auswahlfeld\r\n     * @param type              der Typ des Auswahlfelds\r\n     * @param levels            die zu setzenden levels\r\n     */\r\n    private void put(HttpServletRequest request, Auswahlfeld a, int type, int levels) {\r\n        // setze fï¿½r jeden Level ein Auswahlfeld\r\n        for (int i = 1; i <= levels; i++) {\r\n            a.setLevel(i);\r\n            // Inhalte der Auswahlfelder holen\r\n            List<Auswahlfeld> list = dao.getAuswahlFelder(a);\r\n            // Auswahl-Felder in den request setzen.\r\n            String name = Constants.SELECTBOX + \"_\" + type + \"_\" + i;\r\n            logger.debug(\"Setze Auswahlfeld \" + name + \" in den request\");\r\n            logger.debug(\"Inhalt des Auswahlfelds: \" + list.size() + \" Elemente\");\r\n            request.setAttribute(name, list);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Speichert pro Auswahlfeld und Level einen Eintrag fï¿½r die\r\n     * aktuelle Projektattraktivitaet\r\n     *\r\n     * @param a                   das zu speicherende Auswahlfeld\r\n     * @param levels              die zu speichernden levels\r\n     */\r\n    private void insertAssignments(Auswahlfeld a, int type, DynaActionForm form, int levels) {\r\n        // fï¿½r jeden Level einen Eintrag des jeweiligen Auswahlfelds setzen\r\n        for (int i = 1; i <= levels; i++) {\r\n            String name = Constants.SELECTBOX + \"_\" + type + \"_\" + i;\r\n            logger.debug(\"Hole Auswahlfeld \" + name + \" vom Formular\");\r\n            Integer aId = (Integer) form.get(name);\r\n            if (aId != null) {\r\n                logger.debug(\"Gewï¿½hlter Wert: \" + aId);\r\n                a.setAuswahlfeldId(aId);\r\n                dao.insertAssignment(a);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Speichert pro Auswahlfeld und Level einen Eintrag fï¿½r die\r\n     * aktuelle Nutzenattraktivitï¿½t bzw. den Operativen Nutzen\r\n     *\r\n     * @param a                   das zu speicherende Auswahlfeld\r\n     * @param levels              die zu speichernden levels\r\n     */\r\n    private void insertNaOpNuAssignment(Auswahlfeld a, int type, HttpServletRequest request, DynaActionForm form, int levels) {\r\n        // Nutzenkriterien holen\r\n        Nutzenkriterium kriterium = new Nutzenkriterium();\r\n        kriterium.setNutzenattraktivitaetOperativerNutzenId(a.getNutzenattraktivitaetOperativerNutzenId());\r\n        kriterium.setMandantId(a.getMandantId());\r\n        List<Nutzenkriterium> nutzenkriterien = nService.getAssignments(kriterium);\r\n        // alte Zuweisungen lï¿½schen\r\n        Integer kategorieId = (Integer) form.get(Constants.KATEGORIE_ID);\r\n        for (Nutzenkriterium n : nutzenkriterien) {\r\n            logger.debug(\"kategorie: \" + n.getKategorieId() + \", \" + kategorieId);\r\n            if (kategorieId.equals(n.getKategorieId()) || type == Constants.GEWICHTUNG) {\r\n                a.setNutzenkriteriumId(n.getNutzenkriteriumId());\r\n                logger.debug(\"Lï¿½sche Zuweisungen: \" + \" eintrittswahrscheinlichkeit=\" + a.getEintrittswahrscheinlichkeit() + \", eintrittszeitpunkt=\" + a.getEintrittszeitpunkt() + \", abstufung=\" + a.getAbstufung() + \", gewichtung=\" + a.getGewichtung() + \", nutzenkriteriumId=\" + a.getNutzenkriteriumId() + \", nutzenattraktivitaetOperativerNutzenId=\" + a.getNutzenattraktivitaetOperativerNutzenId());\r\n                dao.deleteNaOpNuAssignmentsByNutzenkriterium(a);\r\n            }\r\n        }\r\n        // fï¿½r jeden Level einen Eintrag des jeweiligen Auswahlfelds setzen\r\n        for (int i = 1; i <= levels; i++) {\r\n            a.setLevel(i);\r\n            for (Nutzenkriterium n : nutzenkriterien) {\r\n                a.setNutzenkriteriumId(n.getNutzenkriteriumId());\r\n                String name = Constants.SELECTBOX + \"_\" + type + \"_\" + i;\r\n                // Gewichtungen werden nicht mehr pro Nutzenkriterium bestimmt ...\r\n                // Design change\r\n                if (type != Constants.GEWICHTUNG) {\r\n                    name += \"_\" + n.getNutzenkriteriumId();\r\n                }\r\n                logger.debug(\"Hole Auswahlfeld \" + name + \" vom Formular\");\r\n                String aIdStr = request.getParameter(name);\r\n                logger.debug(\"aIdStr=\" + aIdStr);\r\n                Integer aId;\r\n                // neue Zuweisung erstellen\r\n                if (aIdStr != null && (aId = new Integer(aIdStr)) != null) {\r\n                    a.setAuswahlfeldId(aId);\r\n                    logger.debug(\"Erstelle Zuweisung: auswahlfeldId=\" + aId + \", nutzenkriteriumId=\" + a.getNutzenkriteriumId() + \", nutzenattraktivitaetOperativerNutzenId=\" + a.getNutzenattraktivitaetOperativerNutzenId());\r\n                    dao.insertNaOpNuAssignment(a);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Selektiert die angewï¿½hlten Auswahlfelder.\r\n     *\r\n     * @param request                 der HttpServletRequest\r\n     * @param a                       die Daten der zu selektierenden Auswahlfelder\r\n     * @param type                    der Typ des Auswahlfelds\r\n     * @param twoDimensional          true wenn die Levels auch berï¿½cksichtigt\r\n     *                                werden sollen, sonst false\r\n     */\r\n    private void preselect(HttpServletRequest request, Auswahlfeld a, Integer type, boolean twoDimensional) {\r\n        // Selektierte Auswahlfelder der Projektattraktivitï¿½t holen\r\n        List<Auswahlfeld> afs = null;\r\n        if (type != null && (type.equals(Constants.EINTRITTSWAHRSCHEINLICHKEIT) || type.equals(Constants.EINTRITTSZEITPUNKT))) {\r\n            afs = dao.getSelectedByPaId(a);\r\n        } else // Selektierte Auswahlfelder der Nutzenattraktivitï¿½t bzw.\r\n        // des Operativen Nutzens holen\r\n        {\r\n            afs = dao.getSelectedByNaOpNuId(a);\r\n        }\r\n        // Pro Level (1-5) eine HashMap erstellen\r\n        HashMap<String, HashMap> map = new HashMap<String, HashMap>();\r\n        HashMap<Integer, Integer> lvl1 = new HashMap<Integer, Integer>();\r\n        HashMap<Integer, Integer> lvl2 = new HashMap<Integer, Integer>();\r\n        HashMap<Integer, Integer> lvl3 = new HashMap<Integer, Integer>();\r\n        HashMap<Integer, Integer> lvl4 = new HashMap<Integer, Integer>();\r\n        HashMap<Integer, Integer> lvl5 = new HashMap<Integer, Integer>();\r\n        // Durch alle selektierten Auswahlfelder gehen\r\n        Integer[] single = new Integer[6];\r\n        for (Auswahlfeld af : afs) {\r\n            Integer lvl = af.getLevel();\r\n            logger.debug(\"lvl=\" + lvl);\r\n            // Level berï¿½cksichtigen\r\n            if (twoDimensional) {\r\n                Integer nutzenkriteriumId = af.getNutzenkriteriumId();\r\n                logger.debug(\"nutzenkriteriumId=\" + nutzenkriteriumId);\r\n                Integer auswahlfeldId = af.getAuswahlfeldId();\r\n                if (lvl.equals(1)) {\r\n                    lvl1.put(nutzenkriteriumId, auswahlfeldId);\r\n                } else if (lvl.equals(2)) {\r\n                    lvl2.put(nutzenkriteriumId, auswahlfeldId);\r\n                } else if (lvl.equals(3)) {\r\n                    lvl3.put(nutzenkriteriumId, auswahlfeldId);\r\n                } else if (lvl.equals(4)) {\r\n                    lvl4.put(nutzenkriteriumId, auswahlfeldId);\r\n                } else if (lvl.equals(5)) {\r\n                    lvl5.put(nutzenkriteriumId, auswahlfeldId);\r\n                }\r\n            } else {\r\n                single[lvl] = af.getAuswahlfeldId();\r\n            }\r\n        }\r\n        // Selektierte Auswahlfelder in den Request stellen\r\n        if (twoDimensional) {\r\n            map.put(\"1\", lvl1);\r\n            map.put(\"2\", lvl2);\r\n            map.put(\"3\", lvl3);\r\n            map.put(\"4\", lvl4);\r\n            map.put(\"5\", lvl5);\r\n            logger.debug(\"Selektierte Auswahlfelder in den Request stellen\");\r\n            request.setAttribute(\"selected\", map);\r\n        } else if (type.equals(Constants.EINTRITTSWAHRSCHEINLICHKEIT)) {\r\n            request.setAttribute(\"ew\", single);\r\n        } else if (type.equals(Constants.EINTRITTSZEITPUNKT)) {\r\n            request.setAttribute(\"ez\", single);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * ï¿½berprï¿½ft, ob die Id eines Auswahlfelds im Request ist\r\n     * (update) oder nicht (neu).\r\n     *\r\n     * @param request                   der HttpServletRequest\r\n     * @param form                      das DynaActionForm\r\n     * @return                          true, wenn das angegebene Auswahlfeld\r\n     *                                  besteht, sonst false.\r\n     */\r\n    private boolean isUpdate(HttpServletRequest request, DynaActionForm form) {\r\n        Integer id = (Integer) form.get(Constants.AUSWAHLFELD_ID);\r\n        if (id == null || id == 0) {\r\n            return false;\r\n        }\r\n        return true;\r\n    }\r\n}\r\n",
		"id": "EvoSuiteBenchmark/46_nutzenportfolio/src/main/java/ch/bfh/egov/nutzenportfolio/service/auswahlfeld/AuswahlfeldDaoServiceTest0.java",
		"test_prompt": "// AuswahlfeldDaoServiceTest0.java\npackage ch.bfh.egov.nutzenportfolio.service.auswahlfeld;\n\nimport java.util.ArrayList;\nimport java.util.HashMap;\nimport java.util.List;\nimport javax.servlet.http.HttpServletRequest;\nimport javax.servlet.http.HttpSession;\nimport org.apache.commons.logging.Log;\nimport org.apache.commons.logging.LogFactory;\nimport org.apache.struts.action.ActionMessage;\nimport org.apache.struts.action.ActionMessages;\nimport org.apache.struts.action.DynaActionForm;\nimport ch.bfh.egov.nutzenportfolio.Constants;\nimport ch.bfh.egov.nutzenportfolio.persistence.auswahlfeld.AuswahlfeldDao;\nimport ch.bfh.egov.nutzenportfolio.service.common.CommonService;\nimport ch.bfh.egov.nutzenportfolio.service.customizing.CustomizingService;\nimport ch.bfh.egov.nutzenportfolio.service.nutzenkriterium.NutzenkriteriumService;\nimport ch.bfh.egov.nutzenportfolio.service.strategischeziele.StrategischeZieleService;\nimport ch.bfh.egov.nutzenportfolio.tos.Auswahlfeld;\nimport ch.bfh.egov.nutzenportfolio.tos.Customizing;\nimport ch.bfh.egov.nutzenportfolio.tos.Nutzenkriterium;\nimport ch.bfh.egov.nutzenportfolio.tos.StrategischesZiel;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link AuswahlfeldDaoService}.\n* It contains ten unit test cases for the {@link AuswahlfeldDaoService#next(HttpServletRequest)} method.\n*/\nclass AuswahlfeldDaoServiceTest0 {"
	},
	{
		"original_code": "// AuswahlfeldDaoService.java\n/**\r\n * Nutzenportfolio\r\n * Copyright (C) 2006 Kompetenzzentrum E-Business, Simon Bergamin\r\n *\r\n * This program is free software; you can redistribute it and/or\r\n * modify it under the terms of the GNU General Public License\r\n * as published by the Free Software Foundation; either version 2\r\n * of the License, or (at your option) any later version.\r\n *\r\n * This program is distributed in the hope that it will be useful,\r\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n * GNU General Public License for more details.\r\n *\r\n * You should have received a copy of the GNU General Public License\r\n * along with this program; if not, write to the Free Software\r\n * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\r\n */\r\npackage ch.bfh.egov.nutzenportfolio.service.auswahlfeld;\r\n\r\nimport java.util.ArrayList;\r\nimport java.util.HashMap;\r\nimport java.util.List;\r\nimport javax.servlet.http.HttpServletRequest;\r\nimport javax.servlet.http.HttpSession;\r\nimport org.apache.commons.logging.Log;\r\nimport org.apache.commons.logging.LogFactory;\r\nimport org.apache.struts.action.ActionMessage;\r\nimport org.apache.struts.action.ActionMessages;\r\nimport org.apache.struts.action.DynaActionForm;\r\nimport ch.bfh.egov.nutzenportfolio.Constants;\r\nimport ch.bfh.egov.nutzenportfolio.persistence.auswahlfeld.AuswahlfeldDao;\r\nimport ch.bfh.egov.nutzenportfolio.service.common.CommonService;\r\nimport ch.bfh.egov.nutzenportfolio.service.customizing.CustomizingService;\r\nimport ch.bfh.egov.nutzenportfolio.service.nutzenkriterium.NutzenkriteriumService;\r\nimport ch.bfh.egov.nutzenportfolio.service.strategischeziele.StrategischeZieleService;\r\nimport ch.bfh.egov.nutzenportfolio.tos.Auswahlfeld;\r\nimport ch.bfh.egov.nutzenportfolio.tos.Customizing;\r\nimport ch.bfh.egov.nutzenportfolio.tos.Nutzenkriterium;\r\nimport ch.bfh.egov.nutzenportfolio.tos.StrategischesZiel;\r\n\r\n/**\r\n * Implementierende Service-Klasse fï¿½r Auswahlfelder. Auswahlfelder\r\n * sind Eintrittswahrscheinlichkeiten, Eintrittszeitpunkte,\r\n * Abstufungen und Gewichtungen.\r\n *\r\n * @author Kompetenzzentrum E-Business, Simon Bergamin\r\n */\r\npublic class AuswahlfeldDaoService implements AuswahlfeldService {\r\n\r\n    private AuswahlfeldDao dao;\r\n\r\n    private NutzenkriteriumService nService;\r\n\r\n    private CommonService cService;\r\n\r\n    private CustomizingService customizingService;\r\n\r\n    private StrategischeZieleService szService;\r\n\r\n    private Log logger = LogFactory.getLog(this.getClass());\r\n\r\n    /**\r\n     * Konstruktor. ï¿½bergabe des DataAcessObject-Interfaces fï¿½r Auswahlfelder.\r\n     *\r\n     * @param dao                       Auswahlfeld DataAcessObject-Interface\r\n     */\r\n    public AuswahlfeldDaoService(AuswahlfeldDao dao) {\r\n        this.dao = dao;\r\n    }\r\n\r\n    /**\r\n     * @see ch.bfh.egov.nutzenportfolio.persistence.auswahlfeld.AuswahlfeldIbatisDao#getById(Auswahlfeld)\r\n     */\r\n    public Auswahlfeld getById(Auswahlfeld a) {\r\n        return dao.getById(a);\r\n    }\r\n\r\n    /**\r\n     * @see ch.bfh.egov.nutzenportfolio.persistence.auswahlfeld.AuswahlfeldIbatisDao#getByProjektId(Auswahlfeld)\r\n     */\r\n    public List<Auswahlfeld> getByProjektId(Auswahlfeld a) {\r\n        return dao.getByProjektId(a);\r\n    }\r\n\r\n    /**\r\n     * @see ch.bfh.egov.nutzenportfolio.persistence.auswahlfeld.AuswahlfeldIbatisDao#getByNaOpNu(Auswahlfeld)\r\n     */\r\n    public List<Auswahlfeld> getByNaOpNu(Auswahlfeld a) {\r\n        return dao.getByNaOpNu(a);\r\n    }\r\n\r\n    /**\r\n     * @see ch.bfh.egov.nutzenportfolio.persistence.auswahlfeld.AuswahlfeldIbatisDao#getGewichtungStatus(Integer)\r\n     */\r\n    public List<Auswahlfeld> getGewichtungStatus(Integer naOpNuId) {\r\n        return dao.getGewichtungStatus(naOpNuId);\r\n    }\r\n\r\n    /**\r\n     * @see ch.bfh.egov.nutzenportfolio.persistence.auswahlfeld.AuswahlfeldIbatisDao#getAbstufungStatus(Integer)\r\n     */\r\n    public List<Auswahlfeld> getAbstufungStatus(Integer naOpNuId) {\r\n        return dao.getAbstufungStatus(naOpNuId);\r\n    }\r\n\r\n    /**\r\n     * @see ch.bfh.egov.nutzenportfolio.persistence.auswahlfeld.AuswahlfeldIbatisDao#getAnzahlGewichtungen(Integer)\r\n     */\r\n    public List<Auswahlfeld> getAnzahlGewichtungen(Integer naOpNuId) {\r\n        return dao.getAnzahlGewichtungen(naOpNuId);\r\n    }\r\n\r\n    /**\r\n     * @see ch.bfh.egov.nutzenportfolio.persistence.auswahlfeld.AuswahlfeldIbatisDao#getAnzahlAbstufungen(Integer)\r\n     */\r\n    public List<Auswahlfeld> getAnzahlAbstufungen(Integer naOpNuId) {\r\n        return dao.getAnzahlAbstufungen(naOpNuId);\r\n    }\r\n\r\n    /**\r\n     * @see ch.bfh.egov.nutzenportfolio.persistence.auswahlfeld.AuswahlfeldIbatisDao#getSelectedByPaId(Auswahlfeld)\r\n     */\r\n    public List<Auswahlfeld> getSelectedByPaId(Auswahlfeld a) {\r\n        return dao.getSelectedByPaId(a);\r\n    }\r\n\r\n    /**\r\n     * @see ch.bfh.egov.nutzenportfolio.persistence.auswahlfeld.AuswahlfeldIbatisDao#getSelectedByNaOpNuId(Auswahlfeld)\r\n     */\r\n    public List<Auswahlfeld> getSelectedByNaOpNuId(Auswahlfeld a) {\r\n        return dao.getSelectedByNaOpNuId(a);\r\n    }\r\n\r\n    /**\r\n     * @see ch.bfh.egov.nutzenportfolio.persistence.auswahlfeld.AuswahlfeldIbatisDao#deleteGewichtungen(Auswahlfeld)\r\n     */\r\n    public void deleteGewichtungen(Auswahlfeld a) {\r\n        dao.deleteGewichtungen(a);\r\n    }\r\n\r\n    /**\r\n     * Initialisierung dieses Service-Objekts durch ï¿½bergabe anderer,\r\n     * benï¿½tigter Service-Objekte.\r\n     *\r\n     * @param nService                   Nutzenkriterium Service Objekt\r\n     * @param cService                   Common Service Objekt\r\n     * @param customizingService         Customizing Service Objekt\r\n     */\r\n    public void init(NutzenkriteriumService nService, CommonService cService, CustomizingService customizingService, StrategischeZieleService szService) {\r\n        this.nService = nService;\r\n        this.cService = cService;\r\n        this.customizingService = customizingService;\r\n        this.szService = szService;\r\n    }\r\n\r\n    /**\r\n     * Generiert Auswahlfelder und fï¿½llt diese nach Typ und\r\n     * Level ab.\r\n     *\r\n     * @param request           der HttpServletRequest\r\n     * @param path              der Pfad der momentanen Action\r\n     */\r\n    public void list(HttpServletRequest request, String path) {\r\n        logger.debug(\"Pfad: \" + path);\r\n        // Neues Auswahlfeld generieren\r\n        Auswahlfeld a = createAuswahlfeld(request, null);\r\n        // Eintrittswahrscheinlichkeiten\r\n        if (path.contains(Constants.VERWALTUNG_EINTRITTSWAHRSCHEINLICHKEITEN_ACTION)) {\r\n            logger.debug(\"Eintrittswahrscheinlichkeiten holen\");\r\n            a = setType(a, Constants.EINTRITTSWAHRSCHEINLICHKEIT);\r\n        } else // Eintrittszeitpunkte\r\n        if (path.contains(Constants.VERWALTUNG_EINTRITTSZEITPUNKTE_ACTION)) {\r\n            logger.debug(\"Eintrittszeitpunkte holen\");\r\n            a = setType(a, Constants.EINTRITTSZEITPUNKT);\r\n        } else // Abstufungen\r\n        if (path.contains(Constants.VERWALTUNG_ABSTUFUNGEN_ACTION)) {\r\n            logger.debug(\"Abstufungen holen\");\r\n            a = setType(a, Constants.ABSTUFUNG);\r\n        } else // Gewichtungen\r\n        if (path.contains(Constants.VERWALTUNG_GEWICHTUNG_ACTION)) {\r\n            logger.debug(\"Gewichtungen holen\");\r\n            a = setType(a, Constants.GEWICHTUNG);\r\n        }\r\n        // Alle Levels holen\r\n        List<Auswahlfeld> afs = new ArrayList<Auswahlfeld>();\r\n        for (int i = 1; i < 6; i++) {\r\n            a.setLevel(i);\r\n            afs.addAll(dao.getAuswahlFelder(a));\r\n        }\r\n        logger.debug(afs.size() + \" Auswahlfelder in der Liste\");\r\n        request.setAttribute(Constants.AUSWAHLFELDER, afs);\r\n    }\r\n\r\n    /**\r\n     * Fï¿½llt ein Formular mit bestehenden Daten eines Auswahlfelds ab,\r\n     * falls eine entsprechende id angegeben wurde.\r\n     *\r\n     * @param request                   der HttpServletRequest\r\n     * @param form                      das DynaActionForm\r\n     */\r\n    public void edit(HttpServletRequest request, DynaActionForm form) {\r\n        if (isUpdate(request, form)) {\r\n            Auswahlfeld af = createAuswahlfeld(request, form);\r\n            af = dao.getById(af);\r\n            form.set(Constants.NAME, af.getName());\r\n            form.set(\"level\", af.getLevel());\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Fï¿½hrt ein update eines bestenenden Auswahlfelds anhand von\r\n     * Formulardaten durch.\r\n     *\r\n     * @param request                   der HttpServletRequest\r\n     * @param form                      das DynaActionForm\r\n     */\r\n    public void update(HttpServletRequest request, DynaActionForm form) {\r\n        logger.debug(\"Update Auswahlfeld\");\r\n        if (isUpdate(request, form)) {\r\n            logger.debug(\"Update durchfï¿½hren\");\r\n            Auswahlfeld af = createAuswahlfeld(request, form);\r\n            dao.update(af);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Prï¿½ft, ob ein Auswahlfeld existiert und gibt es zurï¿½ck.\r\n     *\r\n     * @param request                   der HttpServletRequest\r\n     * @param form                      das DynaActionForm\r\n     * @return                          das Auswahlfeld\r\n     */\r\n    public Auswahlfeld getAuswahlfeld(HttpServletRequest request, DynaActionForm form) {\r\n        Auswahlfeld af = createAuswahlfeld(request, form);\r\n        return dao.getById(af);\r\n    }\r\n\r\n    /**\r\n     * Abfrage fï¿½r das Lï¿½schen von einem Auswahlfeld.\r\n     *\r\n     * @param request                   der HttpServletRequest\r\n     * @param af                        das zu lï¿½schende Auswahlfeld\r\n     * @param messages                  das ActionMessages Objekt\r\n     */\r\n    public void deleteQuestion(HttpServletRequest request, Auswahlfeld af, ActionMessages messages) {\r\n        // Verknï¿½pfungen prï¿½fen\r\n        linkedTo(request, af);\r\n        // Bestï¿½tigungsnachricht ausgeben\r\n        messages.add(ActionMessages.GLOBAL_MESSAGE, new ActionMessage(\"messages.question.delete\", af.getName()));\r\n        // Actions zum Lï¿½schen und Abbrechen definieren\r\n        String action = \"\";\r\n        if (af.getEintrittswahrscheinlichkeit()) {\r\n            action = Constants.VERWALTUNG_EINTRITTSWAHRSCHEINLICHKEITEN_ACTION + \".do\";\r\n        } else if (af.getEintrittszeitpunkt()) {\r\n            action = Constants.VERWALTUNG_EINTRITTSZEITPUNKTE_ACTION + \".do\";\r\n        } else if (af.getAbstufung()) {\r\n            action = Constants.VERWALTUNG_ABSTUFUNGEN_ACTION + \".do\";\r\n        } else if (af.getGewichtung()) {\r\n            action = Constants.VERWALTUNG_GEWICHTUNG_ACTION + \".do\";\r\n        }\r\n        request.setAttribute(Constants.ACTION, action);\r\n        request.setAttribute(Constants.DISPATCH_YES, Constants.DELETE);\r\n        request.setAttribute(Constants.DISPATCH_NO, Constants.LIST);\r\n        request.setAttribute(Constants.ID_NAME, Constants.AUSWAHLFELD_ID);\r\n        request.setAttribute(Constants.ID_VALUE, af.getAuswahlfeldId());\r\n    }\r\n\r\n    /**\r\n     * Setzt die Verknï¿½pfungen zu diesem Auswahlfeld in den Request.\r\n     * Ein Auswahlfeld kann mit Customizings verknï¿½pft sein. Diese\r\n     * Methode wird bei der Lï¿½schabfrage verwendet.\r\n     *\r\n     * @param request                   der HttpServletRequest\r\n     * @param af                        das zu lï¿½schende Auswahlfeld\r\n     */\r\n    public void linkedTo(HttpServletRequest request, Auswahlfeld af) {\r\n        HashMap<String, List> map = new HashMap<String, List>();\r\n        // Customizings suchen, die dieses Detailziel benï¿½tigen\r\n        List<Customizing> customizings = dao.getLinkedPaCustomizings(af);\r\n        customizings.addAll(dao.getLinkedNaOpNuCustomizings(af));\r\n        if (customizings.size() > 0) {\r\n            for (Customizing c : customizings) {\r\n                if (c.getStatus()) {\r\n                    request.setAttribute(\"active\", true);\r\n                    break;\r\n                }\r\n            }\r\n            map.put(\"Customizings\", customizings);\r\n        }\r\n        request.setAttribute(\"linked\", map);\r\n    }\r\n\r\n    /**\r\n     * Lï¿½scht ein Auswahlfeld. Falls es mit inaktiven Customizings\r\n     * verknï¿½ft ist, werden diese ebenfalls gelï¿½scht. Wenn aktive Customizings\r\n     * verknï¿½ft sind, wird das Auswahlfeld nicht gelï¿½scht.\r\n     *\r\n     * @param request                   der HttpServletRequest\r\n     * @param af                        das zu lï¿½schende Auswahlfeld\r\n     */\r\n    public void delete(HttpServletRequest request, Auswahlfeld af) {\r\n        // Verknï¿½pfungen prï¿½fen\r\n        linkedTo(request, af);\r\n        Boolean active = (Boolean) request.getAttribute(\"active\");\r\n        // Aktives Customizing verknï¿½ft. Dies sollte nicht passieren ausser bei\r\n        // einem direkten URL-Aufruf ...\r\n        if (active != null && active) {\r\n            logger.debug(\"Aktives Customizing verknï¿½pft, Auswahlfeld wird nicht gelï¿½scht\");\r\n            return;\r\n        }\r\n        // Customizings lï¿½schen\r\n        List<Customizing> customizings = dao.getLinkedPaCustomizings(af);\r\n        customizings.addAll(dao.getLinkedNaOpNuCustomizings(af));\r\n        for (Customizing c : customizings) {\r\n            logger.debug(\"Lï¿½sche Customizing \" + c.getCustomizingId());\r\n            customizingService.cascadeDelete(request, c);\r\n        }\r\n        // Lï¿½schen des Auswahlfelds\r\n        dao.delete(af);\r\n    }\r\n\r\n    /**\r\n     * Lï¿½scht alle Verknï¿½pfungen von Auswahlfeldern zu einer Projektattraktivitï¿½t.\r\n     *\r\n     * @param paId                      die Id der Projektattraktivitï¿½t\r\n     */\r\n    public void deletePaAssignmentsById(Integer paId) {\r\n        Auswahlfeld af = new Auswahlfeld();\r\n        af.setProjektattraktivitaetId(paId);\r\n        af = setType(af, Constants.EINTRITTSWAHRSCHEINLICHKEIT);\r\n        dao.deleteAssignments(af);\r\n        af = setType(af, Constants.EINTRITTSZEITPUNKT);\r\n        dao.deleteAssignments(af);\r\n    }\r\n\r\n    /**\r\n     * Lï¿½scht alle Verknï¿½pfungen von Auswahlfeldern zu einer\r\n     * Nutzenattraktivitï¿½t oder einem Operativen Nutzen.\r\n     *\r\n     * @param naOpNuId                  die Id der Nutzenattraktivitï¿½t\r\n     *                                  oder des Operativen Nutzens\r\n     */\r\n    public void deleteNaOpNuAssignmentsById(Integer naOpNuId) {\r\n        Auswahlfeld af = new Auswahlfeld();\r\n        af.setNutzenattraktivitaetOperativerNutzenId(naOpNuId);\r\n        af = setType(af, Constants.ABSTUFUNG);\r\n        dao.deleteNaOpNuAssignments(af);\r\n        af = setType(af, Constants.GEWICHTUNG);\r\n        dao.deleteNaOpNuAssignments(af);\r\n    }\r\n\r\n    /**\r\n     * Generiert Auswahlfelder und fï¿½llt diese nach Typ und\r\n     * Level ab.\r\n     *\r\n     * @param request           der HttpServletRequest\r\n     * @param path              der Pfad der momentanen Action\r\n     * @param form              das DynaActionForm\r\n     */\r\n    public void populate(HttpServletRequest request, String path, DynaActionForm form) {\r\n        // Wir wollen kein [Ljava.lang.String;@xxxxxxx im Definition Feld ...\r\n        try {\r\n            form.set(\"name\", null);\r\n        } catch (IllegalArgumentException ex) {\r\n        }\r\n        // Benï¿½tigte Id's\r\n        HttpSession session = request.getSession();\r\n        Integer customizingId = (Integer) session.getAttribute(Constants.CUSTOMIZING_ID);\r\n        // Neues Auswahlfeld generieren\r\n        Auswahlfeld a = createAuswahlfeld(request, null);\r\n        // Realisierbarkeit\r\n        logger.debug(\"Pfad: \" + path);\r\n        if (path.contains(Constants.REALISIERBARKEIT_ACTION)) {\r\n            Integer paId = cService.getProjektattraktivitaetIdByCustomizingId(customizingId);\r\n            a.setProjektattraktivitaetId(paId);\r\n            // Eintrittswahrscheinlichkeit abfï¿½llen\r\n            a = setType(a, Constants.EINTRITTSWAHRSCHEINLICHKEIT);\r\n            put(request, a, Constants.EINTRITTSWAHRSCHEINLICHKEIT, 3);\r\n            // Selektiere Auswahlfelder\r\n            preselect(request, a, Constants.EINTRITTSWAHRSCHEINLICHKEIT, false);\r\n            // Eintrittszeitpunkt abfï¿½llen\r\n            a = setType(a, Constants.EINTRITTSZEITPUNKT);\r\n            put(request, a, Constants.EINTRITTSZEITPUNKT, 3);\r\n            // Selektiere Auswahlfelder\r\n            preselect(request, a, Constants.EINTRITTSZEITPUNKT, false);\r\n            // Typen in den Request stellen fï¿½r das Hinzufï¿½gen von neuen Begriffen\r\n            request.setAttribute(Constants.EINTRITTSWAHRSCHEINLICHKEITEN, Constants.EINTRITTSWAHRSCHEINLICHKEIT);\r\n            request.setAttribute(Constants.EINTRITTSZEITPUNKTE, Constants.EINTRITTSZEITPUNKT);\r\n            // Anzahl Strategische Ziele holen\r\n            Integer mandantId = (Integer) request.getSession().getAttribute(Constants.MANDANT_ID);\r\n            StrategischesZiel sz = new StrategischesZiel();\r\n            sz.setCustomizingId(customizingId);\r\n            sz.setMandantId(mandantId);\r\n            List<StrategischesZiel> szs = szService.getAssignments(sz);\r\n            request.setAttribute(\"totalStrategischeZiele\", szs.size());\r\n        } else // Stufenbeschriebe abfï¿½llen\r\n        if (path.contains(Constants.STUFENBESCHRIEBE_ACTION) || path.contains(Constants.GEWICHTUNG_ACTION)) {\r\n            // Abstufungen holen\r\n            Integer levels = (Integer) request.getSession().getAttribute(Constants.ABSTUFUNGEN);\r\n            List<Integer> list = new ArrayList<Integer>();\r\n            // Niedrigste ist immer gewï¿½hlt (1)\r\n            list.add(new Integer(1));\r\n            // Wenn 3 Abstufungen: Niedrigste, mittlere  und\r\n            // hï¿½chste auswï¿½hlen (1 + 3 + 5)\r\n            if (levels == 3) {\r\n                list.add(new Integer(3));\r\n            }\r\n            // Wenn 4 Abstufungen: Niedrigste, mittlere, zweithï¿½chste und\r\n            // Hï¿½chste auswï¿½hlen (1 + 3 + 4 + 5)\r\n            if (levels == 4) {\r\n                list.add(new Integer(3));\r\n                list.add(new Integer(4));\r\n            }\r\n            // Alle 5 Abstufungen (1 + 2 +3 + 4 + 5)\r\n            if (levels == 5) {\r\n                list.add(new Integer(2));\r\n                list.add(new Integer(3));\r\n                list.add(new Integer(4));\r\n            }\r\n            // Hï¿½chste ist immer gewï¿½hlt (5)\r\n            list.add(new Integer(5));\r\n            request.setAttribute(Constants.STUFEN, list);\r\n            // Auswahlfelder abfï¿½llen\r\n            if (path.contains(Constants.STUFENBESCHRIEBE_ACTION)) {\r\n                a = setType(a, Constants.ABSTUFUNG);\r\n                put(request, a, Constants.ABSTUFUNG, 5);\r\n                // Typ in den Request stellen fï¿½r das Hinzufï¿½gen von neuen Begriffen\r\n                request.setAttribute(Constants.ABSTUFUNGEN, Constants.ABSTUFUNG);\r\n            } else {\r\n                a = setType(a, Constants.GEWICHTUNG);\r\n                put(request, a, Constants.GEWICHTUNG, 5);\r\n                // Typ in den Request stellen fï¿½r das Hinzufï¿½gen von neuen Begriffen\r\n                request.setAttribute(Constants.GEWICHTUNGEN, Constants.GEWICHTUNG);\r\n            }\r\n            // Selektiere Auswahlfelder\r\n            Integer naOpNuId = cService.getNaOpNuId(request, customizingId);\r\n            a.setNutzenattraktivitaetOperativerNutzenId(naOpNuId);\r\n            preselect(request, a, null, true);\r\n            // Operativer Nutzen -> Projektbetroffene\r\n            if (cService.isOperativerNutzen(request)) {\r\n                request.setAttribute(Constants.PROJEKTBETROFFENE, true);\r\n            }\r\n            // Nutzenkriterien abfï¿½llen\r\n            nService.populate(request);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Weist die angewï¿½hlten Eintrï¿½ge der Auswahlfelder der aktuellen\r\n     * Projektattraktivitaet zu.\r\n     *\r\n     * @param request           der HttpServletRequest\r\n     * @param form              das Formular der Action\r\n     * @param path              der Pfad der momentanen Action\r\n     */\r\n    public void setAuswahlfelder(HttpServletRequest request, DynaActionForm form, String path) {\r\n        // Benï¿½tigte ids holen\r\n        HttpSession session = request.getSession();\r\n        Integer customizingId = (Integer) session.getAttribute(Constants.CUSTOMIZING_ID);\r\n        Integer mandantId = (Integer) session.getAttribute(Constants.MANDANT_ID);\r\n        // Neues Auswahlfeld generieren\r\n        Auswahlfeld a = createAuswahlfeld(request, null);\r\n        // Realisierbarkeit\r\n        logger.debug(\"Pfad: \" + path);\r\n        if (path.contains(Constants.REALISIERBARKEIT_ACTION)) {\r\n            Integer pId = cService.getProjektattraktivitaetIdByCustomizingId(customizingId);\r\n            a.setProjektattraktivitaetId(pId);\r\n            // Eintrittswahrscheinlichkeiten updaten\r\n            a = setType(a, Constants.EINTRITTSWAHRSCHEINLICHKEIT);\r\n            dao.deleteAssignments(a);\r\n            insertAssignments(a, Constants.EINTRITTSWAHRSCHEINLICHKEIT, form, 3);\r\n            // Eintrittszeitpunkt abfï¿½llen\r\n            a = setType(a, Constants.EINTRITTSZEITPUNKT);\r\n            dao.deleteAssignments(a);\r\n            insertAssignments(a, Constants.EINTRITTSZEITPUNKT, form, 3);\r\n            setRealisierbarkeitStatus(request, pId);\r\n        } else // Stufenbeschriebe abfï¿½llen\r\n        if (path.contains(Constants.STUFENBESCHRIEBE_ACTION)) {\r\n            Integer naOpNuId = cService.getNaOpNuId(request, customizingId);\r\n            logger.debug(\"naOpNuId=\" + naOpNuId);\r\n            a.setNutzenattraktivitaetOperativerNutzenId(naOpNuId);\r\n            a = setType(a, Constants.ABSTUFUNG);\r\n            insertNaOpNuAssignment(a, Constants.ABSTUFUNG, request, form, 5);\r\n            logger.debug(\"stufenbeschriebe\");\r\n            boolean isNa = !cService.isOperativerNutzen(request);\r\n            setStufenStatus(request, naOpNuId, isNa);\r\n        } else // Gewichtung abfï¿½llen\r\n        if (path.contains(Constants.GEWICHTUNG_ACTION)) {\r\n            // allfï¿½llige direkte Gewichtung lï¿½schen\r\n            logger.debug(\"lï¿½sche allfï¿½llige direkte Gewichtungen.\");\r\n            Integer naOpNuId = cService.getNaOpNuId(request, customizingId);\r\n            nService.unsetAssignmentGewichtung(naOpNuId);\r\n            a.setNutzenattraktivitaetOperativerNutzenId(naOpNuId);\r\n            a = setType(a, Constants.GEWICHTUNG);\r\n            insertNaOpNuAssignment(a, Constants.GEWICHTUNG, request, form, 5);\r\n            logger.debug(\"gewichtung\");\r\n            boolean isNa = !cService.isOperativerNutzen(request);\r\n            Nutzenkriterium n = new Nutzenkriterium();\r\n            n.setMandantId(mandantId);\r\n            n.setNutzenattraktivitaetOperativerNutzenId(naOpNuId);\r\n            List<Nutzenkriterium> kriterien = nService.getAssignments(n);\r\n            setGewichtungStatus(request, kriterien, naOpNuId, isNa);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @see ch.bfh.egov.nutzenportfolio.service.nutzenkriterium.NutzenkriteriumDaoService#next(HttpServletRequest)\r\n     */\r\n    public boolean next(HttpServletRequest request) {\r\n        return nService.next(request);\r\n    }\r\n\r\n    /**\r\n     * Generiert ein Auswahlfeld Objekt mit dem aktuellen Mandanten.\r\n     *\r\n     * @param request               der HttpServletRequest\r\n     * @param form                  das DynaActionForm\r\n     * @return                      ein Auswahlfeld mit gesetzem Mandant\r\n     */\r\n    public Auswahlfeld createAuswahlfeld(HttpServletRequest request, DynaActionForm form) {\r\n        Auswahlfeld a = new Auswahlfeld();\r\n        a.setMandantId((Integer) request.getSession().getAttribute(Constants.MANDANT_ID));\r\n        if (form != null) {\r\n            Integer id = (Integer) form.get(Constants.AUSWAHLFELD_ID);\r\n            String name = (String) form.get(Constants.NAME);\r\n            Integer level = (Integer) form.get(\"level\");\r\n            a.setAuswahlfeldId(id);\r\n            a.setName(name);\r\n            a.setLevel(level);\r\n        }\r\n        return a;\r\n    }\r\n\r\n    /**\r\n     * Setzt den Typ eines Auswahlfelds anhand von Konstanten.\r\n     *\r\n     * @param a                   das Auswahlfeld\r\n     * @param type                der zu setzende Typ des Auswahlfelds\r\n     * @return                    das Auswahl-Feld mit dem gesetzten Typ\r\n     */\r\n    public Auswahlfeld setType(Auswahlfeld a, int type) {\r\n        switch(type) {\r\n            case Constants.EINTRITTSWAHRSCHEINLICHKEIT:\r\n                a.setEintrittswahrscheinlichkeit(true);\r\n                a.setEintrittszeitpunkt(false);\r\n                a.setAbstufung(false);\r\n                a.setGewichtung(false);\r\n                break;\r\n            case Constants.EINTRITTSZEITPUNKT:\r\n                a.setEintrittswahrscheinlichkeit(false);\r\n                a.setEintrittszeitpunkt(true);\r\n                a.setAbstufung(false);\r\n                a.setGewichtung(false);\r\n                break;\r\n            case Constants.ABSTUFUNG:\r\n                a.setEintrittswahrscheinlichkeit(false);\r\n                a.setEintrittszeitpunkt(false);\r\n                a.setAbstufung(true);\r\n                a.setGewichtung(false);\r\n                break;\r\n            case Constants.GEWICHTUNG:\r\n                a.setEintrittswahrscheinlichkeit(false);\r\n                a.setEintrittszeitpunkt(false);\r\n                a.setAbstufung(false);\r\n                a.setGewichtung(true);\r\n                break;\r\n        }\r\n        return a;\r\n    }\r\n\r\n    /**\r\n     * @see ch.bfh.egov.nutzenportfolio.service.common.CommonDaoService#isOperativerNutzen(HttpServletRequest)\r\n     */\r\n    public boolean isOperativerNutzen(HttpServletRequest request) {\r\n        return cService.isOperativerNutzen(request);\r\n    }\r\n\r\n    /**\r\n     * Speichert ein neues Auswahlfeld und fï¿½gt es dem aktuellen\r\n     * Customizing zu.\r\n     *\r\n     * @param request                   der HttpServletRequest\r\n     * @param form                      das DynaActionForm mit Daten des Auswahlfelds\r\n     * @param errors                    ActionMessages Objekt zur Ausgabe von\r\n     *                                  Feld-bezogenen Fehlermeldungen\r\n     * @param messages                  ActionMessages Objekt zur Ausgabe von\r\n     *                                  globalen Fehlermeldungen\r\n     * @return                          true bei Erfolg, sonst false\r\n     */\r\n    public boolean add(HttpServletRequest request, DynaActionForm form, ActionMessages errors, ActionMessages messages) {\r\n        Integer mandantId = (Integer) request.getSession().getAttribute(Constants.MANDANT_ID);\r\n        // Formulardaten holen\r\n        String[] names = (String[]) form.get(\"name\");\r\n        Integer[] types = (Integer[]) form.get(\"type\");\r\n        Integer[] lvls = (Integer[]) form.get(\"lvl\");\r\n        String name = null;\r\n        Integer pos = null;\r\n        for (int i = 0; i < names.length; i++) {\r\n            logger.debug(\"names[\" + i + \"]=\" + names[i]);\r\n            if (names[i] != null && !names[i].equals(\"\")) {\r\n                name = names[i];\r\n                pos = i;\r\n            }\r\n        }\r\n        for (int i = 0; i < types.length; i++) {\r\n            logger.debug(\"types[\" + i + \"]=\" + types[i]);\r\n        }\r\n        for (int i = 0; i < lvls.length; i++) {\r\n            logger.debug(\"lvls[\" + i + \"]=\" + lvls[i]);\r\n        }\r\n        // Formulardaten ï¿½berprï¿½fen\r\n        if (name == null) {\r\n            logger.debug(\"Name nicht vorhanden.\");\r\n            errors.add(\"name\", new ActionMessage(\"errors.required\", \"Name\"));\r\n            return false;\r\n        }\r\n        Integer type = types[pos];\r\n        Integer lvl = lvls[pos];\r\n        Auswahlfeld af = new Auswahlfeld();\r\n        af.setMandantId(mandantId);\r\n        af.setName(name);\r\n        af.setLevel(lvl);\r\n        setType(af, type);\r\n        // Auf duplikate prï¿½fen\r\n        Auswahlfeld a = dao.getByName(af);\r\n        Boolean match = false;\r\n        if (a != null) {\r\n            if (a.getAbstufung() && type == Constants.ABSTUFUNG) {\r\n                match = true;\r\n            }\r\n            if (a.getGewichtung() && type == Constants.GEWICHTUNG) {\r\n                match = true;\r\n            }\r\n            if (a.getEintrittswahrscheinlichkeit() && type == Constants.EINTRITTSWAHRSCHEINLICHKEIT) {\r\n                match = true;\r\n            }\r\n            if (a.getEintrittszeitpunkt() && type == Constants.EINTRITTSZEITPUNKT) {\r\n                match = true;\r\n            }\r\n        }\r\n        if (a != null && match) {\r\n            logger.debug(name + \" ist ein Duplikat\");\r\n            messages.add(ActionMessages.GLOBAL_MESSAGE, new ActionMessage(\"errors.duplicate\", \"Eintrag\"));\r\n            return false;\r\n        }\r\n        // Auswahlfeld einfï¿½gen\r\n        dao.insert(af);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Kopiert alle zugewiesenen Auswahlfelder eines Customizings\r\n     * in ein neues.\r\n     *\r\n     * @param paId                          die Id der aktuellen Projektattraktivitï¿½t\r\n     * @param newPaId                       die Id der neuen Projektattraktivitï¿½t\r\n     * @param naOpNuId                      die Id der aktuellen Nutzenattraktivitï¿½t\r\n     *                                      bzw. des aktuellen Operativen Nutzens\r\n     * @param newNaOpNuId                   die Id der neuen Nutzenattraktivitï¿½t\r\n     *                                      bzw. des neuen Operativen Nutzens\r\n     * @param type                          der Typ des Auswahlfelds\r\n     */\r\n    public void copy(Integer paId, Integer newPaId, Integer naOpNuId, Integer newNaOpNuId, Integer type) {\r\n        Auswahlfeld a = new Auswahlfeld();\r\n        // Typ setzen\r\n        this.setType(a, type);\r\n        // Projektattraktivitï¿½t\r\n        if (paId != null) {\r\n            a.setProjektattraktivitaetId(paId);\r\n            List<Auswahlfeld> afs = dao.getSelectedByPaId(a);\r\n            for (Auswahlfeld af : afs) {\r\n                af.setProjektattraktivitaetId(newPaId);\r\n                dao.insertAssignment(af);\r\n            }\r\n        } else // Nutzenattraktivitï¿½t oder Operativer Nutzen\r\n        {\r\n            a.setNutzenattraktivitaetOperativerNutzenId(naOpNuId);\r\n            List<Auswahlfeld> afs = dao.getSelectedByNaOpNuId(a);\r\n            for (Auswahlfeld af : afs) {\r\n                af.setNutzenattraktivitaetOperativerNutzenId(newNaOpNuId);\r\n                dao.insertNaOpNuAssignment(af);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Setzt den Navigations-Status von den Auswahlfeldern der\r\n     * Realisierbarkeit eines Customizings.\r\n     *\r\n     * @param request                       HttpServletRequest\r\n     * @param paId                          die Id der Projektattraktivitï¿½t\r\n     * @return                              true fï¿½r Status grï¿½n, sonst false\r\n     */\r\n    public boolean setRealisierbarkeitStatus(HttpServletRequest request, Integer paId) {\r\n        // Zugewiesene Auswahlfelder holen\r\n        List<Auswahlfeld> afs = dao.getRealisierbarkeitStatus(paId);\r\n        HttpSession session = request.getSession();\r\n        // Mindestens ein Auswahlfeld muss angewï¿½hlt sein\r\n        if (afs != null && afs.size() > 0) {\r\n            // Status grï¿½n, Status-Flag in die Session setzen\r\n            session.setAttribute(Constants.REALISIERBARKEIT, true);\r\n            return true;\r\n        } else {\r\n            // Status rot, eventuell vorhandenes Flag aus der Session lï¿½schen\r\n            session.removeAttribute(Constants.REALISIERBARKEIT);\r\n        }\r\n        return false;\r\n    }\r\n\r\n    /**\r\n     * Setzt den Navigations-Status von den Auswahlfeldern\r\n     * der Abstufungen eines Customizings.\r\n     *\r\n     * @param request                       HttpServletRequest\r\n     * @param naOpNuId                      die Id der Nutzenattraktivitï¿½t\r\n     *                                      bzw. des Operativen Nutzens\r\n     * @param isNa                          true fï¿½r Nutzenattraktivitï¿½t, sonst false\r\n     * @return                              true fï¿½r Status grï¿½n, sonst false\r\n     */\r\n    public boolean setStufenStatus(HttpServletRequest request, Integer naOpNuId, boolean isNa) {\r\n        // Zugewiesene Nutzenkriterien holen\r\n        HttpSession session = request.getSession();\r\n        Integer mandantId = (Integer) session.getAttribute(Constants.MANDANT_ID);\r\n        Nutzenkriterium n = new Nutzenkriterium();\r\n        n.setMandantId(mandantId);\r\n        n.setNutzenattraktivitaetOperativerNutzenId(naOpNuId);\r\n        List<Nutzenkriterium> kriterien = nService.getAssignments(n);\r\n        // Zugewiesene Auswahlfelder holen\r\n        List<Auswahlfeld> abstufungen = dao.getAbstufungStatus(naOpNuId);\r\n        if (kriterien != null && abstufungen != null) {\r\n            logger.debug(kriterien.size() + \" Nutzenkriterien in der Liste\");\r\n            logger.debug(abstufungen.size() + \" Abstufungen in der Liste\");\r\n        }\r\n        // Mindestens ein Auswahlfeld pro Nutzenkriterium muss angewï¿½hlt sein\r\n        if (abstufungen != null && kriterien != null && abstufungen.size() > 0 && kriterien.size() > 0 && kriterien.size() <= abstufungen.size()) {\r\n            // Nutzenattraktivitï¿½t\r\n            if (isNa) {\r\n                session.setAttribute(Constants.ABSTUFUNGEN_NA, true);\r\n            } else // Operativer Nutzen\r\n            {\r\n                session.setAttribute(Constants.ABSTUFUNGEN_OP_NU, true);\r\n            }\r\n            return true;\r\n        } else // Status rot, eventuell vorhandenes Flag aus der Session lï¿½schen\r\n        {\r\n            // Nutzenattraktivitï¿½t\r\n            if (isNa) {\r\n                session.removeAttribute(Constants.ABSTUFUNGEN_NA);\r\n            } else // Operativer Nutzen\r\n            {\r\n                session.removeAttribute(Constants.ABSTUFUNGEN_OP_NU);\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n\r\n    /**\r\n     * Setzt den Navigations-Status von den Auswahlfeldern\r\n     * der Gewichtung eines Customizings.\r\n     *\r\n     * @param request                       HttpServletRequest\r\n     * @param kriterien                     Liste aller zugewiesenen Kriterien\r\n     * @param naOpNuId                      die Id der Nutzenattraktivitï¿½t\r\n     *                                      bzw. des Operativen Nutzens\r\n     * @param isNa                           true fï¿½r Nutzenattraktivitï¿½t, sonst false\r\n     * @return                              true fï¿½r Status grï¿½n, sonst false\r\n     */\r\n    public boolean setGewichtungStatus(HttpServletRequest request, List<Nutzenkriterium> kriterien, Integer naOpNuId, boolean isNa) {\r\n        HttpSession session = request.getSession();\r\n        // Gewichtung durch Fragebogen?\r\n        List<Auswahlfeld> gewichtungen = dao.getGewichtungStatus(naOpNuId);\r\n        if (gewichtungen != null && gewichtungen.size() > 0) {\r\n            logger.debug(\"gewichtungen.size()=\" + gewichtungen.size() + \" bei naOpNuId=\" + naOpNuId);\r\n            if (isNa) {\r\n                logger.debug(\"GEWICHTUNGEN_NA=true\");\r\n                session.setAttribute(Constants.GEWICHTUNGEN_NA, true);\r\n            } else {\r\n                logger.debug(\"GEWICHTUNGEN_OP_NU=true\");\r\n                session.setAttribute(Constants.GEWICHTUNGEN_OP_NU, true);\r\n            }\r\n            return true;\r\n        } else // Direkte Gewichtung?\r\n        if (kriterien != null) {\r\n            logger.debug(\"direkte Gewichtung bei naOpNuId=\" + naOpNuId);\r\n            for (Nutzenkriterium k : kriterien) {\r\n                logger.debug(\"nutzenkriteriumId=\" + k.getNutzenkriteriumId());\r\n                logger.debug(\"gewichtung=\" + k.getGewichtung());\r\n                if (k.getGewichtung() == null) {\r\n                    logger.debug(\"direkte Gewichtung null\");\r\n                    return false;\r\n                }\r\n            }\r\n            if (isNa) {\r\n                logger.debug(\"GEWICHTUNGEN_NA=true\");\r\n                session.setAttribute(Constants.GEWICHTUNGEN_NA, true);\r\n            } else {\r\n                logger.debug(\"GEWICHTUNGEN_OP_NU=true\");\r\n                session.setAttribute(Constants.GEWICHTUNGEN_OP_NU, true);\r\n            }\r\n            return true;\r\n        } else {\r\n            logger.debug(\"Gewichtungsstatus=false\");\r\n            return false;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * ï¿½berprï¿½ft, ob ein Customizing komplett ist.\r\n     *\r\n     * @param request                   der HttpServletRequest\r\n     * @return                          true bei komplettem Customizing, sonst false\r\n     */\r\n    public boolean customizingComplete(HttpServletRequest request) {\r\n        return customizingService.complete(request);\r\n    }\r\n\r\n    /**\r\n     * Setzt fï¿½r jeden gegebenen Level ein Auswahlfeld in den Request.\r\n     *\r\n     * @param request           der HttpServletRequest\r\n     * @param a                 das Auswahlfeld\r\n     * @param type              der Typ des Auswahlfelds\r\n     * @param levels            die zu setzenden levels\r\n     */\r\n    private void put(HttpServletRequest request, Auswahlfeld a, int type, int levels) {\r\n        // setze fï¿½r jeden Level ein Auswahlfeld\r\n        for (int i = 1; i <= levels; i++) {\r\n            a.setLevel(i);\r\n            // Inhalte der Auswahlfelder holen\r\n            List<Auswahlfeld> list = dao.getAuswahlFelder(a);\r\n            // Auswahl-Felder in den request setzen.\r\n            String name = Constants.SELECTBOX + \"_\" + type + \"_\" + i;\r\n            logger.debug(\"Setze Auswahlfeld \" + name + \" in den request\");\r\n            logger.debug(\"Inhalt des Auswahlfelds: \" + list.size() + \" Elemente\");\r\n            request.setAttribute(name, list);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Speichert pro Auswahlfeld und Level einen Eintrag fï¿½r die\r\n     * aktuelle Projektattraktivitaet\r\n     *\r\n     * @param a                   das zu speicherende Auswahlfeld\r\n     * @param levels              die zu speichernden levels\r\n     */\r\n    private void insertAssignments(Auswahlfeld a, int type, DynaActionForm form, int levels) {\r\n        // fï¿½r jeden Level einen Eintrag des jeweiligen Auswahlfelds setzen\r\n        for (int i = 1; i <= levels; i++) {\r\n            String name = Constants.SELECTBOX + \"_\" + type + \"_\" + i;\r\n            logger.debug(\"Hole Auswahlfeld \" + name + \" vom Formular\");\r\n            Integer aId = (Integer) form.get(name);\r\n            if (aId != null) {\r\n                logger.debug(\"Gewï¿½hlter Wert: \" + aId);\r\n                a.setAuswahlfeldId(aId);\r\n                dao.insertAssignment(a);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Speichert pro Auswahlfeld und Level einen Eintrag fï¿½r die\r\n     * aktuelle Nutzenattraktivitï¿½t bzw. den Operativen Nutzen\r\n     *\r\n     * @param a                   das zu speicherende Auswahlfeld\r\n     * @param levels              die zu speichernden levels\r\n     */\r\n    private void insertNaOpNuAssignment(Auswahlfeld a, int type, HttpServletRequest request, DynaActionForm form, int levels) {\r\n        // Nutzenkriterien holen\r\n        Nutzenkriterium kriterium = new Nutzenkriterium();\r\n        kriterium.setNutzenattraktivitaetOperativerNutzenId(a.getNutzenattraktivitaetOperativerNutzenId());\r\n        kriterium.setMandantId(a.getMandantId());\r\n        List<Nutzenkriterium> nutzenkriterien = nService.getAssignments(kriterium);\r\n        // alte Zuweisungen lï¿½schen\r\n        Integer kategorieId = (Integer) form.get(Constants.KATEGORIE_ID);\r\n        for (Nutzenkriterium n : nutzenkriterien) {\r\n            logger.debug(\"kategorie: \" + n.getKategorieId() + \", \" + kategorieId);\r\n            if (kategorieId.equals(n.getKategorieId()) || type == Constants.GEWICHTUNG) {\r\n                a.setNutzenkriteriumId(n.getNutzenkriteriumId());\r\n                logger.debug(\"Lï¿½sche Zuweisungen: \" + \" eintrittswahrscheinlichkeit=\" + a.getEintrittswahrscheinlichkeit() + \", eintrittszeitpunkt=\" + a.getEintrittszeitpunkt() + \", abstufung=\" + a.getAbstufung() + \", gewichtung=\" + a.getGewichtung() + \", nutzenkriteriumId=\" + a.getNutzenkriteriumId() + \", nutzenattraktivitaetOperativerNutzenId=\" + a.getNutzenattraktivitaetOperativerNutzenId());\r\n                dao.deleteNaOpNuAssignmentsByNutzenkriterium(a);\r\n            }\r\n        }\r\n        // fï¿½r jeden Level einen Eintrag des jeweiligen Auswahlfelds setzen\r\n        for (int i = 1; i <= levels; i++) {\r\n            a.setLevel(i);\r\n            for (Nutzenkriterium n : nutzenkriterien) {\r\n                a.setNutzenkriteriumId(n.getNutzenkriteriumId());\r\n                String name = Constants.SELECTBOX + \"_\" + type + \"_\" + i;\r\n                // Gewichtungen werden nicht mehr pro Nutzenkriterium bestimmt ...\r\n                // Design change\r\n                if (type != Constants.GEWICHTUNG) {\r\n                    name += \"_\" + n.getNutzenkriteriumId();\r\n                }\r\n                logger.debug(\"Hole Auswahlfeld \" + name + \" vom Formular\");\r\n                String aIdStr = request.getParameter(name);\r\n                logger.debug(\"aIdStr=\" + aIdStr);\r\n                Integer aId;\r\n                // neue Zuweisung erstellen\r\n                if (aIdStr != null && (aId = new Integer(aIdStr)) != null) {\r\n                    a.setAuswahlfeldId(aId);\r\n                    logger.debug(\"Erstelle Zuweisung: auswahlfeldId=\" + aId + \", nutzenkriteriumId=\" + a.getNutzenkriteriumId() + \", nutzenattraktivitaetOperativerNutzenId=\" + a.getNutzenattraktivitaetOperativerNutzenId());\r\n                    dao.insertNaOpNuAssignment(a);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Selektiert die angewï¿½hlten Auswahlfelder.\r\n     *\r\n     * @param request                 der HttpServletRequest\r\n     * @param a                       die Daten der zu selektierenden Auswahlfelder\r\n     * @param type                    der Typ des Auswahlfelds\r\n     * @param twoDimensional          true wenn die Levels auch berï¿½cksichtigt\r\n     *                                werden sollen, sonst false\r\n     */\r\n    private void preselect(HttpServletRequest request, Auswahlfeld a, Integer type, boolean twoDimensional) {\r\n        // Selektierte Auswahlfelder der Projektattraktivitï¿½t holen\r\n        List<Auswahlfeld> afs = null;\r\n        if (type != null && (type.equals(Constants.EINTRITTSWAHRSCHEINLICHKEIT) || type.equals(Constants.EINTRITTSZEITPUNKT))) {\r\n            afs = dao.getSelectedByPaId(a);\r\n        } else // Selektierte Auswahlfelder der Nutzenattraktivitï¿½t bzw.\r\n        // des Operativen Nutzens holen\r\n        {\r\n            afs = dao.getSelectedByNaOpNuId(a);\r\n        }\r\n        // Pro Level (1-5) eine HashMap erstellen\r\n        HashMap<String, HashMap> map = new HashMap<String, HashMap>();\r\n        HashMap<Integer, Integer> lvl1 = new HashMap<Integer, Integer>();\r\n        HashMap<Integer, Integer> lvl2 = new HashMap<Integer, Integer>();\r\n        HashMap<Integer, Integer> lvl3 = new HashMap<Integer, Integer>();\r\n        HashMap<Integer, Integer> lvl4 = new HashMap<Integer, Integer>();\r\n        HashMap<Integer, Integer> lvl5 = new HashMap<Integer, Integer>();\r\n        // Durch alle selektierten Auswahlfelder gehen\r\n        Integer[] single = new Integer[6];\r\n        for (Auswahlfeld af : afs) {\r\n            Integer lvl = af.getLevel();\r\n            logger.debug(\"lvl=\" + lvl);\r\n            // Level berï¿½cksichtigen\r\n            if (twoDimensional) {\r\n                Integer nutzenkriteriumId = af.getNutzenkriteriumId();\r\n                logger.debug(\"nutzenkriteriumId=\" + nutzenkriteriumId);\r\n                Integer auswahlfeldId = af.getAuswahlfeldId();\r\n                if (lvl.equals(1)) {\r\n                    lvl1.put(nutzenkriteriumId, auswahlfeldId);\r\n                } else if (lvl.equals(2)) {\r\n                    lvl2.put(nutzenkriteriumId, auswahlfeldId);\r\n                } else if (lvl.equals(3)) {\r\n                    lvl3.put(nutzenkriteriumId, auswahlfeldId);\r\n                } else if (lvl.equals(4)) {\r\n                    lvl4.put(nutzenkriteriumId, auswahlfeldId);\r\n                } else if (lvl.equals(5)) {\r\n                    lvl5.put(nutzenkriteriumId, auswahlfeldId);\r\n                }\r\n            } else {\r\n                single[lvl] = af.getAuswahlfeldId();\r\n            }\r\n        }\r\n        // Selektierte Auswahlfelder in den Request stellen\r\n        if (twoDimensional) {\r\n            map.put(\"1\", lvl1);\r\n            map.put(\"2\", lvl2);\r\n            map.put(\"3\", lvl3);\r\n            map.put(\"4\", lvl4);\r\n            map.put(\"5\", lvl5);\r\n            logger.debug(\"Selektierte Auswahlfelder in den Request stellen\");\r\n            request.setAttribute(\"selected\", map);\r\n        } else if (type.equals(Constants.EINTRITTSWAHRSCHEINLICHKEIT)) {\r\n            request.setAttribute(\"ew\", single);\r\n        } else if (type.equals(Constants.EINTRITTSZEITPUNKT)) {\r\n            request.setAttribute(\"ez\", single);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * ï¿½berprï¿½ft, ob die Id eines Auswahlfelds im Request ist\r\n     * (update) oder nicht (neu).\r\n     *\r\n     * @param request                   der HttpServletRequest\r\n     * @param form                      das DynaActionForm\r\n     * @return                          true, wenn das angegebene Auswahlfeld\r\n     *                                  besteht, sonst false.\r\n     */\r\n    private boolean isUpdate(HttpServletRequest request, DynaActionForm form) {\r\n        Integer id = (Integer) form.get(Constants.AUSWAHLFELD_ID);\r\n        if (id == null || id == 0) {\r\n            return false;\r\n        }\r\n        return true;\r\n    }\r\n}\r\n",
		"id": "EvoSuiteBenchmark/46_nutzenportfolio/src/main/java/ch/bfh/egov/nutzenportfolio/service/auswahlfeld/AuswahlfeldDaoServiceTest1.java",
		"test_prompt": "// AuswahlfeldDaoServiceTest1.java\npackage ch.bfh.egov.nutzenportfolio.service.auswahlfeld;\n\nimport java.util.ArrayList;\nimport java.util.HashMap;\nimport java.util.List;\nimport javax.servlet.http.HttpServletRequest;\nimport javax.servlet.http.HttpSession;\nimport org.apache.commons.logging.Log;\nimport org.apache.commons.logging.LogFactory;\nimport org.apache.struts.action.ActionMessage;\nimport org.apache.struts.action.ActionMessages;\nimport org.apache.struts.action.DynaActionForm;\nimport ch.bfh.egov.nutzenportfolio.Constants;\nimport ch.bfh.egov.nutzenportfolio.persistence.auswahlfeld.AuswahlfeldDao;\nimport ch.bfh.egov.nutzenportfolio.service.common.CommonService;\nimport ch.bfh.egov.nutzenportfolio.service.customizing.CustomizingService;\nimport ch.bfh.egov.nutzenportfolio.service.nutzenkriterium.NutzenkriteriumService;\nimport ch.bfh.egov.nutzenportfolio.service.strategischeziele.StrategischeZieleService;\nimport ch.bfh.egov.nutzenportfolio.tos.Auswahlfeld;\nimport ch.bfh.egov.nutzenportfolio.tos.Customizing;\nimport ch.bfh.egov.nutzenportfolio.tos.Nutzenkriterium;\nimport ch.bfh.egov.nutzenportfolio.tos.StrategischesZiel;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link AuswahlfeldDaoService}.\n* It contains ten unit test cases for the {@link AuswahlfeldDaoService#createAuswahlfeld(HttpServletRequest, DynaActionForm)} method.\n*/\nclass AuswahlfeldDaoServiceTest1 {"
	},
	{
		"original_code": "// AuswahlfeldDaoService.java\n/**\r\n * Nutzenportfolio\r\n * Copyright (C) 2006 Kompetenzzentrum E-Business, Simon Bergamin\r\n *\r\n * This program is free software; you can redistribute it and/or\r\n * modify it under the terms of the GNU General Public License\r\n * as published by the Free Software Foundation; either version 2\r\n * of the License, or (at your option) any later version.\r\n *\r\n * This program is distributed in the hope that it will be useful,\r\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n * GNU General Public License for more details.\r\n *\r\n * You should have received a copy of the GNU General Public License\r\n * along with this program; if not, write to the Free Software\r\n * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\r\n */\r\npackage ch.bfh.egov.nutzenportfolio.service.auswahlfeld;\r\n\r\nimport java.util.ArrayList;\r\nimport java.util.HashMap;\r\nimport java.util.List;\r\nimport javax.servlet.http.HttpServletRequest;\r\nimport javax.servlet.http.HttpSession;\r\nimport org.apache.commons.logging.Log;\r\nimport org.apache.commons.logging.LogFactory;\r\nimport org.apache.struts.action.ActionMessage;\r\nimport org.apache.struts.action.ActionMessages;\r\nimport org.apache.struts.action.DynaActionForm;\r\nimport ch.bfh.egov.nutzenportfolio.Constants;\r\nimport ch.bfh.egov.nutzenportfolio.persistence.auswahlfeld.AuswahlfeldDao;\r\nimport ch.bfh.egov.nutzenportfolio.service.common.CommonService;\r\nimport ch.bfh.egov.nutzenportfolio.service.customizing.CustomizingService;\r\nimport ch.bfh.egov.nutzenportfolio.service.nutzenkriterium.NutzenkriteriumService;\r\nimport ch.bfh.egov.nutzenportfolio.service.strategischeziele.StrategischeZieleService;\r\nimport ch.bfh.egov.nutzenportfolio.tos.Auswahlfeld;\r\nimport ch.bfh.egov.nutzenportfolio.tos.Customizing;\r\nimport ch.bfh.egov.nutzenportfolio.tos.Nutzenkriterium;\r\nimport ch.bfh.egov.nutzenportfolio.tos.StrategischesZiel;\r\n\r\n/**\r\n * Implementierende Service-Klasse fï¿½r Auswahlfelder. Auswahlfelder\r\n * sind Eintrittswahrscheinlichkeiten, Eintrittszeitpunkte,\r\n * Abstufungen und Gewichtungen.\r\n *\r\n * @author Kompetenzzentrum E-Business, Simon Bergamin\r\n */\r\npublic class AuswahlfeldDaoService implements AuswahlfeldService {\r\n\r\n    private AuswahlfeldDao dao;\r\n\r\n    private NutzenkriteriumService nService;\r\n\r\n    private CommonService cService;\r\n\r\n    private CustomizingService customizingService;\r\n\r\n    private StrategischeZieleService szService;\r\n\r\n    private Log logger = LogFactory.getLog(this.getClass());\r\n\r\n    /**\r\n     * Konstruktor. ï¿½bergabe des DataAcessObject-Interfaces fï¿½r Auswahlfelder.\r\n     *\r\n     * @param dao                       Auswahlfeld DataAcessObject-Interface\r\n     */\r\n    public AuswahlfeldDaoService(AuswahlfeldDao dao) {\r\n        this.dao = dao;\r\n    }\r\n\r\n    /**\r\n     * @see ch.bfh.egov.nutzenportfolio.persistence.auswahlfeld.AuswahlfeldIbatisDao#getById(Auswahlfeld)\r\n     */\r\n    public Auswahlfeld getById(Auswahlfeld a) {\r\n        return dao.getById(a);\r\n    }\r\n\r\n    /**\r\n     * @see ch.bfh.egov.nutzenportfolio.persistence.auswahlfeld.AuswahlfeldIbatisDao#getByProjektId(Auswahlfeld)\r\n     */\r\n    public List<Auswahlfeld> getByProjektId(Auswahlfeld a) {\r\n        return dao.getByProjektId(a);\r\n    }\r\n\r\n    /**\r\n     * @see ch.bfh.egov.nutzenportfolio.persistence.auswahlfeld.AuswahlfeldIbatisDao#getByNaOpNu(Auswahlfeld)\r\n     */\r\n    public List<Auswahlfeld> getByNaOpNu(Auswahlfeld a) {\r\n        return dao.getByNaOpNu(a);\r\n    }\r\n\r\n    /**\r\n     * @see ch.bfh.egov.nutzenportfolio.persistence.auswahlfeld.AuswahlfeldIbatisDao#getGewichtungStatus(Integer)\r\n     */\r\n    public List<Auswahlfeld> getGewichtungStatus(Integer naOpNuId) {\r\n        return dao.getGewichtungStatus(naOpNuId);\r\n    }\r\n\r\n    /**\r\n     * @see ch.bfh.egov.nutzenportfolio.persistence.auswahlfeld.AuswahlfeldIbatisDao#getAbstufungStatus(Integer)\r\n     */\r\n    public List<Auswahlfeld> getAbstufungStatus(Integer naOpNuId) {\r\n        return dao.getAbstufungStatus(naOpNuId);\r\n    }\r\n\r\n    /**\r\n     * @see ch.bfh.egov.nutzenportfolio.persistence.auswahlfeld.AuswahlfeldIbatisDao#getAnzahlGewichtungen(Integer)\r\n     */\r\n    public List<Auswahlfeld> getAnzahlGewichtungen(Integer naOpNuId) {\r\n        return dao.getAnzahlGewichtungen(naOpNuId);\r\n    }\r\n\r\n    /**\r\n     * @see ch.bfh.egov.nutzenportfolio.persistence.auswahlfeld.AuswahlfeldIbatisDao#getAnzahlAbstufungen(Integer)\r\n     */\r\n    public List<Auswahlfeld> getAnzahlAbstufungen(Integer naOpNuId) {\r\n        return dao.getAnzahlAbstufungen(naOpNuId);\r\n    }\r\n\r\n    /**\r\n     * @see ch.bfh.egov.nutzenportfolio.persistence.auswahlfeld.AuswahlfeldIbatisDao#getSelectedByPaId(Auswahlfeld)\r\n     */\r\n    public List<Auswahlfeld> getSelectedByPaId(Auswahlfeld a) {\r\n        return dao.getSelectedByPaId(a);\r\n    }\r\n\r\n    /**\r\n     * @see ch.bfh.egov.nutzenportfolio.persistence.auswahlfeld.AuswahlfeldIbatisDao#getSelectedByNaOpNuId(Auswahlfeld)\r\n     */\r\n    public List<Auswahlfeld> getSelectedByNaOpNuId(Auswahlfeld a) {\r\n        return dao.getSelectedByNaOpNuId(a);\r\n    }\r\n\r\n    /**\r\n     * @see ch.bfh.egov.nutzenportfolio.persistence.auswahlfeld.AuswahlfeldIbatisDao#deleteGewichtungen(Auswahlfeld)\r\n     */\r\n    public void deleteGewichtungen(Auswahlfeld a) {\r\n        dao.deleteGewichtungen(a);\r\n    }\r\n\r\n    /**\r\n     * Initialisierung dieses Service-Objekts durch ï¿½bergabe anderer,\r\n     * benï¿½tigter Service-Objekte.\r\n     *\r\n     * @param nService                   Nutzenkriterium Service Objekt\r\n     * @param cService                   Common Service Objekt\r\n     * @param customizingService         Customizing Service Objekt\r\n     */\r\n    public void init(NutzenkriteriumService nService, CommonService cService, CustomizingService customizingService, StrategischeZieleService szService) {\r\n        this.nService = nService;\r\n        this.cService = cService;\r\n        this.customizingService = customizingService;\r\n        this.szService = szService;\r\n    }\r\n\r\n    /**\r\n     * Generiert Auswahlfelder und fï¿½llt diese nach Typ und\r\n     * Level ab.\r\n     *\r\n     * @param request           der HttpServletRequest\r\n     * @param path              der Pfad der momentanen Action\r\n     */\r\n    public void list(HttpServletRequest request, String path) {\r\n        logger.debug(\"Pfad: \" + path);\r\n        // Neues Auswahlfeld generieren\r\n        Auswahlfeld a = createAuswahlfeld(request, null);\r\n        // Eintrittswahrscheinlichkeiten\r\n        if (path.contains(Constants.VERWALTUNG_EINTRITTSWAHRSCHEINLICHKEITEN_ACTION)) {\r\n            logger.debug(\"Eintrittswahrscheinlichkeiten holen\");\r\n            a = setType(a, Constants.EINTRITTSWAHRSCHEINLICHKEIT);\r\n        } else // Eintrittszeitpunkte\r\n        if (path.contains(Constants.VERWALTUNG_EINTRITTSZEITPUNKTE_ACTION)) {\r\n            logger.debug(\"Eintrittszeitpunkte holen\");\r\n            a = setType(a, Constants.EINTRITTSZEITPUNKT);\r\n        } else // Abstufungen\r\n        if (path.contains(Constants.VERWALTUNG_ABSTUFUNGEN_ACTION)) {\r\n            logger.debug(\"Abstufungen holen\");\r\n            a = setType(a, Constants.ABSTUFUNG);\r\n        } else // Gewichtungen\r\n        if (path.contains(Constants.VERWALTUNG_GEWICHTUNG_ACTION)) {\r\n            logger.debug(\"Gewichtungen holen\");\r\n            a = setType(a, Constants.GEWICHTUNG);\r\n        }\r\n        // Alle Levels holen\r\n        List<Auswahlfeld> afs = new ArrayList<Auswahlfeld>();\r\n        for (int i = 1; i < 6; i++) {\r\n            a.setLevel(i);\r\n            afs.addAll(dao.getAuswahlFelder(a));\r\n        }\r\n        logger.debug(afs.size() + \" Auswahlfelder in der Liste\");\r\n        request.setAttribute(Constants.AUSWAHLFELDER, afs);\r\n    }\r\n\r\n    /**\r\n     * Fï¿½llt ein Formular mit bestehenden Daten eines Auswahlfelds ab,\r\n     * falls eine entsprechende id angegeben wurde.\r\n     *\r\n     * @param request                   der HttpServletRequest\r\n     * @param form                      das DynaActionForm\r\n     */\r\n    public void edit(HttpServletRequest request, DynaActionForm form) {\r\n        if (isUpdate(request, form)) {\r\n            Auswahlfeld af = createAuswahlfeld(request, form);\r\n            af = dao.getById(af);\r\n            form.set(Constants.NAME, af.getName());\r\n            form.set(\"level\", af.getLevel());\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Fï¿½hrt ein update eines bestenenden Auswahlfelds anhand von\r\n     * Formulardaten durch.\r\n     *\r\n     * @param request                   der HttpServletRequest\r\n     * @param form                      das DynaActionForm\r\n     */\r\n    public void update(HttpServletRequest request, DynaActionForm form) {\r\n        logger.debug(\"Update Auswahlfeld\");\r\n        if (isUpdate(request, form)) {\r\n            logger.debug(\"Update durchfï¿½hren\");\r\n            Auswahlfeld af = createAuswahlfeld(request, form);\r\n            dao.update(af);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Prï¿½ft, ob ein Auswahlfeld existiert und gibt es zurï¿½ck.\r\n     *\r\n     * @param request                   der HttpServletRequest\r\n     * @param form                      das DynaActionForm\r\n     * @return                          das Auswahlfeld\r\n     */\r\n    public Auswahlfeld getAuswahlfeld(HttpServletRequest request, DynaActionForm form) {\r\n        Auswahlfeld af = createAuswahlfeld(request, form);\r\n        return dao.getById(af);\r\n    }\r\n\r\n    /**\r\n     * Abfrage fï¿½r das Lï¿½schen von einem Auswahlfeld.\r\n     *\r\n     * @param request                   der HttpServletRequest\r\n     * @param af                        das zu lï¿½schende Auswahlfeld\r\n     * @param messages                  das ActionMessages Objekt\r\n     */\r\n    public void deleteQuestion(HttpServletRequest request, Auswahlfeld af, ActionMessages messages) {\r\n        // Verknï¿½pfungen prï¿½fen\r\n        linkedTo(request, af);\r\n        // Bestï¿½tigungsnachricht ausgeben\r\n        messages.add(ActionMessages.GLOBAL_MESSAGE, new ActionMessage(\"messages.question.delete\", af.getName()));\r\n        // Actions zum Lï¿½schen und Abbrechen definieren\r\n        String action = \"\";\r\n        if (af.getEintrittswahrscheinlichkeit()) {\r\n            action = Constants.VERWALTUNG_EINTRITTSWAHRSCHEINLICHKEITEN_ACTION + \".do\";\r\n        } else if (af.getEintrittszeitpunkt()) {\r\n            action = Constants.VERWALTUNG_EINTRITTSZEITPUNKTE_ACTION + \".do\";\r\n        } else if (af.getAbstufung()) {\r\n            action = Constants.VERWALTUNG_ABSTUFUNGEN_ACTION + \".do\";\r\n        } else if (af.getGewichtung()) {\r\n            action = Constants.VERWALTUNG_GEWICHTUNG_ACTION + \".do\";\r\n        }\r\n        request.setAttribute(Constants.ACTION, action);\r\n        request.setAttribute(Constants.DISPATCH_YES, Constants.DELETE);\r\n        request.setAttribute(Constants.DISPATCH_NO, Constants.LIST);\r\n        request.setAttribute(Constants.ID_NAME, Constants.AUSWAHLFELD_ID);\r\n        request.setAttribute(Constants.ID_VALUE, af.getAuswahlfeldId());\r\n    }\r\n\r\n    /**\r\n     * Setzt die Verknï¿½pfungen zu diesem Auswahlfeld in den Request.\r\n     * Ein Auswahlfeld kann mit Customizings verknï¿½pft sein. Diese\r\n     * Methode wird bei der Lï¿½schabfrage verwendet.\r\n     *\r\n     * @param request                   der HttpServletRequest\r\n     * @param af                        das zu lï¿½schende Auswahlfeld\r\n     */\r\n    public void linkedTo(HttpServletRequest request, Auswahlfeld af) {\r\n        HashMap<String, List> map = new HashMap<String, List>();\r\n        // Customizings suchen, die dieses Detailziel benï¿½tigen\r\n        List<Customizing> customizings = dao.getLinkedPaCustomizings(af);\r\n        customizings.addAll(dao.getLinkedNaOpNuCustomizings(af));\r\n        if (customizings.size() > 0) {\r\n            for (Customizing c : customizings) {\r\n                if (c.getStatus()) {\r\n                    request.setAttribute(\"active\", true);\r\n                    break;\r\n                }\r\n            }\r\n            map.put(\"Customizings\", customizings);\r\n        }\r\n        request.setAttribute(\"linked\", map);\r\n    }\r\n\r\n    /**\r\n     * Lï¿½scht ein Auswahlfeld. Falls es mit inaktiven Customizings\r\n     * verknï¿½ft ist, werden diese ebenfalls gelï¿½scht. Wenn aktive Customizings\r\n     * verknï¿½ft sind, wird das Auswahlfeld nicht gelï¿½scht.\r\n     *\r\n     * @param request                   der HttpServletRequest\r\n     * @param af                        das zu lï¿½schende Auswahlfeld\r\n     */\r\n    public void delete(HttpServletRequest request, Auswahlfeld af) {\r\n        // Verknï¿½pfungen prï¿½fen\r\n        linkedTo(request, af);\r\n        Boolean active = (Boolean) request.getAttribute(\"active\");\r\n        // Aktives Customizing verknï¿½ft. Dies sollte nicht passieren ausser bei\r\n        // einem direkten URL-Aufruf ...\r\n        if (active != null && active) {\r\n            logger.debug(\"Aktives Customizing verknï¿½pft, Auswahlfeld wird nicht gelï¿½scht\");\r\n            return;\r\n        }\r\n        // Customizings lï¿½schen\r\n        List<Customizing> customizings = dao.getLinkedPaCustomizings(af);\r\n        customizings.addAll(dao.getLinkedNaOpNuCustomizings(af));\r\n        for (Customizing c : customizings) {\r\n            logger.debug(\"Lï¿½sche Customizing \" + c.getCustomizingId());\r\n            customizingService.cascadeDelete(request, c);\r\n        }\r\n        // Lï¿½schen des Auswahlfelds\r\n        dao.delete(af);\r\n    }\r\n\r\n    /**\r\n     * Lï¿½scht alle Verknï¿½pfungen von Auswahlfeldern zu einer Projektattraktivitï¿½t.\r\n     *\r\n     * @param paId                      die Id der Projektattraktivitï¿½t\r\n     */\r\n    public void deletePaAssignmentsById(Integer paId) {\r\n        Auswahlfeld af = new Auswahlfeld();\r\n        af.setProjektattraktivitaetId(paId);\r\n        af = setType(af, Constants.EINTRITTSWAHRSCHEINLICHKEIT);\r\n        dao.deleteAssignments(af);\r\n        af = setType(af, Constants.EINTRITTSZEITPUNKT);\r\n        dao.deleteAssignments(af);\r\n    }\r\n\r\n    /**\r\n     * Lï¿½scht alle Verknï¿½pfungen von Auswahlfeldern zu einer\r\n     * Nutzenattraktivitï¿½t oder einem Operativen Nutzen.\r\n     *\r\n     * @param naOpNuId                  die Id der Nutzenattraktivitï¿½t\r\n     *                                  oder des Operativen Nutzens\r\n     */\r\n    public void deleteNaOpNuAssignmentsById(Integer naOpNuId) {\r\n        Auswahlfeld af = new Auswahlfeld();\r\n        af.setNutzenattraktivitaetOperativerNutzenId(naOpNuId);\r\n        af = setType(af, Constants.ABSTUFUNG);\r\n        dao.deleteNaOpNuAssignments(af);\r\n        af = setType(af, Constants.GEWICHTUNG);\r\n        dao.deleteNaOpNuAssignments(af);\r\n    }\r\n\r\n    /**\r\n     * Generiert Auswahlfelder und fï¿½llt diese nach Typ und\r\n     * Level ab.\r\n     *\r\n     * @param request           der HttpServletRequest\r\n     * @param path              der Pfad der momentanen Action\r\n     * @param form              das DynaActionForm\r\n     */\r\n    public void populate(HttpServletRequest request, String path, DynaActionForm form) {\r\n        // Wir wollen kein [Ljava.lang.String;@xxxxxxx im Definition Feld ...\r\n        try {\r\n            form.set(\"name\", null);\r\n        } catch (IllegalArgumentException ex) {\r\n        }\r\n        // Benï¿½tigte Id's\r\n        HttpSession session = request.getSession();\r\n        Integer customizingId = (Integer) session.getAttribute(Constants.CUSTOMIZING_ID);\r\n        // Neues Auswahlfeld generieren\r\n        Auswahlfeld a = createAuswahlfeld(request, null);\r\n        // Realisierbarkeit\r\n        logger.debug(\"Pfad: \" + path);\r\n        if (path.contains(Constants.REALISIERBARKEIT_ACTION)) {\r\n            Integer paId = cService.getProjektattraktivitaetIdByCustomizingId(customizingId);\r\n            a.setProjektattraktivitaetId(paId);\r\n            // Eintrittswahrscheinlichkeit abfï¿½llen\r\n            a = setType(a, Constants.EINTRITTSWAHRSCHEINLICHKEIT);\r\n            put(request, a, Constants.EINTRITTSWAHRSCHEINLICHKEIT, 3);\r\n            // Selektiere Auswahlfelder\r\n            preselect(request, a, Constants.EINTRITTSWAHRSCHEINLICHKEIT, false);\r\n            // Eintrittszeitpunkt abfï¿½llen\r\n            a = setType(a, Constants.EINTRITTSZEITPUNKT);\r\n            put(request, a, Constants.EINTRITTSZEITPUNKT, 3);\r\n            // Selektiere Auswahlfelder\r\n            preselect(request, a, Constants.EINTRITTSZEITPUNKT, false);\r\n            // Typen in den Request stellen fï¿½r das Hinzufï¿½gen von neuen Begriffen\r\n            request.setAttribute(Constants.EINTRITTSWAHRSCHEINLICHKEITEN, Constants.EINTRITTSWAHRSCHEINLICHKEIT);\r\n            request.setAttribute(Constants.EINTRITTSZEITPUNKTE, Constants.EINTRITTSZEITPUNKT);\r\n            // Anzahl Strategische Ziele holen\r\n            Integer mandantId = (Integer) request.getSession().getAttribute(Constants.MANDANT_ID);\r\n            StrategischesZiel sz = new StrategischesZiel();\r\n            sz.setCustomizingId(customizingId);\r\n            sz.setMandantId(mandantId);\r\n            List<StrategischesZiel> szs = szService.getAssignments(sz);\r\n            request.setAttribute(\"totalStrategischeZiele\", szs.size());\r\n        } else // Stufenbeschriebe abfï¿½llen\r\n        if (path.contains(Constants.STUFENBESCHRIEBE_ACTION) || path.contains(Constants.GEWICHTUNG_ACTION)) {\r\n            // Abstufungen holen\r\n            Integer levels = (Integer) request.getSession().getAttribute(Constants.ABSTUFUNGEN);\r\n            List<Integer> list = new ArrayList<Integer>();\r\n            // Niedrigste ist immer gewï¿½hlt (1)\r\n            list.add(new Integer(1));\r\n            // Wenn 3 Abstufungen: Niedrigste, mittlere  und\r\n            // hï¿½chste auswï¿½hlen (1 + 3 + 5)\r\n            if (levels == 3) {\r\n                list.add(new Integer(3));\r\n            }\r\n            // Wenn 4 Abstufungen: Niedrigste, mittlere, zweithï¿½chste und\r\n            // Hï¿½chste auswï¿½hlen (1 + 3 + 4 + 5)\r\n            if (levels == 4) {\r\n                list.add(new Integer(3));\r\n                list.add(new Integer(4));\r\n            }\r\n            // Alle 5 Abstufungen (1 + 2 +3 + 4 + 5)\r\n            if (levels == 5) {\r\n                list.add(new Integer(2));\r\n                list.add(new Integer(3));\r\n                list.add(new Integer(4));\r\n            }\r\n            // Hï¿½chste ist immer gewï¿½hlt (5)\r\n            list.add(new Integer(5));\r\n            request.setAttribute(Constants.STUFEN, list);\r\n            // Auswahlfelder abfï¿½llen\r\n            if (path.contains(Constants.STUFENBESCHRIEBE_ACTION)) {\r\n                a = setType(a, Constants.ABSTUFUNG);\r\n                put(request, a, Constants.ABSTUFUNG, 5);\r\n                // Typ in den Request stellen fï¿½r das Hinzufï¿½gen von neuen Begriffen\r\n                request.setAttribute(Constants.ABSTUFUNGEN, Constants.ABSTUFUNG);\r\n            } else {\r\n                a = setType(a, Constants.GEWICHTUNG);\r\n                put(request, a, Constants.GEWICHTUNG, 5);\r\n                // Typ in den Request stellen fï¿½r das Hinzufï¿½gen von neuen Begriffen\r\n                request.setAttribute(Constants.GEWICHTUNGEN, Constants.GEWICHTUNG);\r\n            }\r\n            // Selektiere Auswahlfelder\r\n            Integer naOpNuId = cService.getNaOpNuId(request, customizingId);\r\n            a.setNutzenattraktivitaetOperativerNutzenId(naOpNuId);\r\n            preselect(request, a, null, true);\r\n            // Operativer Nutzen -> Projektbetroffene\r\n            if (cService.isOperativerNutzen(request)) {\r\n                request.setAttribute(Constants.PROJEKTBETROFFENE, true);\r\n            }\r\n            // Nutzenkriterien abfï¿½llen\r\n            nService.populate(request);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Weist die angewï¿½hlten Eintrï¿½ge der Auswahlfelder der aktuellen\r\n     * Projektattraktivitaet zu.\r\n     *\r\n     * @param request           der HttpServletRequest\r\n     * @param form              das Formular der Action\r\n     * @param path              der Pfad der momentanen Action\r\n     */\r\n    public void setAuswahlfelder(HttpServletRequest request, DynaActionForm form, String path) {\r\n        // Benï¿½tigte ids holen\r\n        HttpSession session = request.getSession();\r\n        Integer customizingId = (Integer) session.getAttribute(Constants.CUSTOMIZING_ID);\r\n        Integer mandantId = (Integer) session.getAttribute(Constants.MANDANT_ID);\r\n        // Neues Auswahlfeld generieren\r\n        Auswahlfeld a = createAuswahlfeld(request, null);\r\n        // Realisierbarkeit\r\n        logger.debug(\"Pfad: \" + path);\r\n        if (path.contains(Constants.REALISIERBARKEIT_ACTION)) {\r\n            Integer pId = cService.getProjektattraktivitaetIdByCustomizingId(customizingId);\r\n            a.setProjektattraktivitaetId(pId);\r\n            // Eintrittswahrscheinlichkeiten updaten\r\n            a = setType(a, Constants.EINTRITTSWAHRSCHEINLICHKEIT);\r\n            dao.deleteAssignments(a);\r\n            insertAssignments(a, Constants.EINTRITTSWAHRSCHEINLICHKEIT, form, 3);\r\n            // Eintrittszeitpunkt abfï¿½llen\r\n            a = setType(a, Constants.EINTRITTSZEITPUNKT);\r\n            dao.deleteAssignments(a);\r\n            insertAssignments(a, Constants.EINTRITTSZEITPUNKT, form, 3);\r\n            setRealisierbarkeitStatus(request, pId);\r\n        } else // Stufenbeschriebe abfï¿½llen\r\n        if (path.contains(Constants.STUFENBESCHRIEBE_ACTION)) {\r\n            Integer naOpNuId = cService.getNaOpNuId(request, customizingId);\r\n            logger.debug(\"naOpNuId=\" + naOpNuId);\r\n            a.setNutzenattraktivitaetOperativerNutzenId(naOpNuId);\r\n            a = setType(a, Constants.ABSTUFUNG);\r\n            insertNaOpNuAssignment(a, Constants.ABSTUFUNG, request, form, 5);\r\n            logger.debug(\"stufenbeschriebe\");\r\n            boolean isNa = !cService.isOperativerNutzen(request);\r\n            setStufenStatus(request, naOpNuId, isNa);\r\n        } else // Gewichtung abfï¿½llen\r\n        if (path.contains(Constants.GEWICHTUNG_ACTION)) {\r\n            // allfï¿½llige direkte Gewichtung lï¿½schen\r\n            logger.debug(\"lï¿½sche allfï¿½llige direkte Gewichtungen.\");\r\n            Integer naOpNuId = cService.getNaOpNuId(request, customizingId);\r\n            nService.unsetAssignmentGewichtung(naOpNuId);\r\n            a.setNutzenattraktivitaetOperativerNutzenId(naOpNuId);\r\n            a = setType(a, Constants.GEWICHTUNG);\r\n            insertNaOpNuAssignment(a, Constants.GEWICHTUNG, request, form, 5);\r\n            logger.debug(\"gewichtung\");\r\n            boolean isNa = !cService.isOperativerNutzen(request);\r\n            Nutzenkriterium n = new Nutzenkriterium();\r\n            n.setMandantId(mandantId);\r\n            n.setNutzenattraktivitaetOperativerNutzenId(naOpNuId);\r\n            List<Nutzenkriterium> kriterien = nService.getAssignments(n);\r\n            setGewichtungStatus(request, kriterien, naOpNuId, isNa);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @see ch.bfh.egov.nutzenportfolio.service.nutzenkriterium.NutzenkriteriumDaoService#next(HttpServletRequest)\r\n     */\r\n    public boolean next(HttpServletRequest request) {\r\n        return nService.next(request);\r\n    }\r\n\r\n    /**\r\n     * Generiert ein Auswahlfeld Objekt mit dem aktuellen Mandanten.\r\n     *\r\n     * @param request               der HttpServletRequest\r\n     * @param form                  das DynaActionForm\r\n     * @return                      ein Auswahlfeld mit gesetzem Mandant\r\n     */\r\n    public Auswahlfeld createAuswahlfeld(HttpServletRequest request, DynaActionForm form) {\r\n        Auswahlfeld a = new Auswahlfeld();\r\n        a.setMandantId((Integer) request.getSession().getAttribute(Constants.MANDANT_ID));\r\n        if (form != null) {\r\n            Integer id = (Integer) form.get(Constants.AUSWAHLFELD_ID);\r\n            String name = (String) form.get(Constants.NAME);\r\n            Integer level = (Integer) form.get(\"level\");\r\n            a.setAuswahlfeldId(id);\r\n            a.setName(name);\r\n            a.setLevel(level);\r\n        }\r\n        return a;\r\n    }\r\n\r\n    /**\r\n     * Setzt den Typ eines Auswahlfelds anhand von Konstanten.\r\n     *\r\n     * @param a                   das Auswahlfeld\r\n     * @param type                der zu setzende Typ des Auswahlfelds\r\n     * @return                    das Auswahl-Feld mit dem gesetzten Typ\r\n     */\r\n    public Auswahlfeld setType(Auswahlfeld a, int type) {\r\n        switch(type) {\r\n            case Constants.EINTRITTSWAHRSCHEINLICHKEIT:\r\n                a.setEintrittswahrscheinlichkeit(true);\r\n                a.setEintrittszeitpunkt(false);\r\n                a.setAbstufung(false);\r\n                a.setGewichtung(false);\r\n                break;\r\n            case Constants.EINTRITTSZEITPUNKT:\r\n                a.setEintrittswahrscheinlichkeit(false);\r\n                a.setEintrittszeitpunkt(true);\r\n                a.setAbstufung(false);\r\n                a.setGewichtung(false);\r\n                break;\r\n            case Constants.ABSTUFUNG:\r\n                a.setEintrittswahrscheinlichkeit(false);\r\n                a.setEintrittszeitpunkt(false);\r\n                a.setAbstufung(true);\r\n                a.setGewichtung(false);\r\n                break;\r\n            case Constants.GEWICHTUNG:\r\n                a.setEintrittswahrscheinlichkeit(false);\r\n                a.setEintrittszeitpunkt(false);\r\n                a.setAbstufung(false);\r\n                a.setGewichtung(true);\r\n                break;\r\n        }\r\n        return a;\r\n    }\r\n\r\n    /**\r\n     * @see ch.bfh.egov.nutzenportfolio.service.common.CommonDaoService#isOperativerNutzen(HttpServletRequest)\r\n     */\r\n    public boolean isOperativerNutzen(HttpServletRequest request) {\r\n        return cService.isOperativerNutzen(request);\r\n    }\r\n\r\n    /**\r\n     * Speichert ein neues Auswahlfeld und fï¿½gt es dem aktuellen\r\n     * Customizing zu.\r\n     *\r\n     * @param request                   der HttpServletRequest\r\n     * @param form                      das DynaActionForm mit Daten des Auswahlfelds\r\n     * @param errors                    ActionMessages Objekt zur Ausgabe von\r\n     *                                  Feld-bezogenen Fehlermeldungen\r\n     * @param messages                  ActionMessages Objekt zur Ausgabe von\r\n     *                                  globalen Fehlermeldungen\r\n     * @return                          true bei Erfolg, sonst false\r\n     */\r\n    public boolean add(HttpServletRequest request, DynaActionForm form, ActionMessages errors, ActionMessages messages) {\r\n        Integer mandantId = (Integer) request.getSession().getAttribute(Constants.MANDANT_ID);\r\n        // Formulardaten holen\r\n        String[] names = (String[]) form.get(\"name\");\r\n        Integer[] types = (Integer[]) form.get(\"type\");\r\n        Integer[] lvls = (Integer[]) form.get(\"lvl\");\r\n        String name = null;\r\n        Integer pos = null;\r\n        for (int i = 0; i < names.length; i++) {\r\n            logger.debug(\"names[\" + i + \"]=\" + names[i]);\r\n            if (names[i] != null && !names[i].equals(\"\")) {\r\n                name = names[i];\r\n                pos = i;\r\n            }\r\n        }\r\n        for (int i = 0; i < types.length; i++) {\r\n            logger.debug(\"types[\" + i + \"]=\" + types[i]);\r\n        }\r\n        for (int i = 0; i < lvls.length; i++) {\r\n            logger.debug(\"lvls[\" + i + \"]=\" + lvls[i]);\r\n        }\r\n        // Formulardaten ï¿½berprï¿½fen\r\n        if (name == null) {\r\n            logger.debug(\"Name nicht vorhanden.\");\r\n            errors.add(\"name\", new ActionMessage(\"errors.required\", \"Name\"));\r\n            return false;\r\n        }\r\n        Integer type = types[pos];\r\n        Integer lvl = lvls[pos];\r\n        Auswahlfeld af = new Auswahlfeld();\r\n        af.setMandantId(mandantId);\r\n        af.setName(name);\r\n        af.setLevel(lvl);\r\n        setType(af, type);\r\n        // Auf duplikate prï¿½fen\r\n        Auswahlfeld a = dao.getByName(af);\r\n        Boolean match = false;\r\n        if (a != null) {\r\n            if (a.getAbstufung() && type == Constants.ABSTUFUNG) {\r\n                match = true;\r\n            }\r\n            if (a.getGewichtung() && type == Constants.GEWICHTUNG) {\r\n                match = true;\r\n            }\r\n            if (a.getEintrittswahrscheinlichkeit() && type == Constants.EINTRITTSWAHRSCHEINLICHKEIT) {\r\n                match = true;\r\n            }\r\n            if (a.getEintrittszeitpunkt() && type == Constants.EINTRITTSZEITPUNKT) {\r\n                match = true;\r\n            }\r\n        }\r\n        if (a != null && match) {\r\n            logger.debug(name + \" ist ein Duplikat\");\r\n            messages.add(ActionMessages.GLOBAL_MESSAGE, new ActionMessage(\"errors.duplicate\", \"Eintrag\"));\r\n            return false;\r\n        }\r\n        // Auswahlfeld einfï¿½gen\r\n        dao.insert(af);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Kopiert alle zugewiesenen Auswahlfelder eines Customizings\r\n     * in ein neues.\r\n     *\r\n     * @param paId                          die Id der aktuellen Projektattraktivitï¿½t\r\n     * @param newPaId                       die Id der neuen Projektattraktivitï¿½t\r\n     * @param naOpNuId                      die Id der aktuellen Nutzenattraktivitï¿½t\r\n     *                                      bzw. des aktuellen Operativen Nutzens\r\n     * @param newNaOpNuId                   die Id der neuen Nutzenattraktivitï¿½t\r\n     *                                      bzw. des neuen Operativen Nutzens\r\n     * @param type                          der Typ des Auswahlfelds\r\n     */\r\n    public void copy(Integer paId, Integer newPaId, Integer naOpNuId, Integer newNaOpNuId, Integer type) {\r\n        Auswahlfeld a = new Auswahlfeld();\r\n        // Typ setzen\r\n        this.setType(a, type);\r\n        // Projektattraktivitï¿½t\r\n        if (paId != null) {\r\n            a.setProjektattraktivitaetId(paId);\r\n            List<Auswahlfeld> afs = dao.getSelectedByPaId(a);\r\n            for (Auswahlfeld af : afs) {\r\n                af.setProjektattraktivitaetId(newPaId);\r\n                dao.insertAssignment(af);\r\n            }\r\n        } else // Nutzenattraktivitï¿½t oder Operativer Nutzen\r\n        {\r\n            a.setNutzenattraktivitaetOperativerNutzenId(naOpNuId);\r\n            List<Auswahlfeld> afs = dao.getSelectedByNaOpNuId(a);\r\n            for (Auswahlfeld af : afs) {\r\n                af.setNutzenattraktivitaetOperativerNutzenId(newNaOpNuId);\r\n                dao.insertNaOpNuAssignment(af);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Setzt den Navigations-Status von den Auswahlfeldern der\r\n     * Realisierbarkeit eines Customizings.\r\n     *\r\n     * @param request                       HttpServletRequest\r\n     * @param paId                          die Id der Projektattraktivitï¿½t\r\n     * @return                              true fï¿½r Status grï¿½n, sonst false\r\n     */\r\n    public boolean setRealisierbarkeitStatus(HttpServletRequest request, Integer paId) {\r\n        // Zugewiesene Auswahlfelder holen\r\n        List<Auswahlfeld> afs = dao.getRealisierbarkeitStatus(paId);\r\n        HttpSession session = request.getSession();\r\n        // Mindestens ein Auswahlfeld muss angewï¿½hlt sein\r\n        if (afs != null && afs.size() > 0) {\r\n            // Status grï¿½n, Status-Flag in die Session setzen\r\n            session.setAttribute(Constants.REALISIERBARKEIT, true);\r\n            return true;\r\n        } else {\r\n            // Status rot, eventuell vorhandenes Flag aus der Session lï¿½schen\r\n            session.removeAttribute(Constants.REALISIERBARKEIT);\r\n        }\r\n        return false;\r\n    }\r\n\r\n    /**\r\n     * Setzt den Navigations-Status von den Auswahlfeldern\r\n     * der Abstufungen eines Customizings.\r\n     *\r\n     * @param request                       HttpServletRequest\r\n     * @param naOpNuId                      die Id der Nutzenattraktivitï¿½t\r\n     *                                      bzw. des Operativen Nutzens\r\n     * @param isNa                          true fï¿½r Nutzenattraktivitï¿½t, sonst false\r\n     * @return                              true fï¿½r Status grï¿½n, sonst false\r\n     */\r\n    public boolean setStufenStatus(HttpServletRequest request, Integer naOpNuId, boolean isNa) {\r\n        // Zugewiesene Nutzenkriterien holen\r\n        HttpSession session = request.getSession();\r\n        Integer mandantId = (Integer) session.getAttribute(Constants.MANDANT_ID);\r\n        Nutzenkriterium n = new Nutzenkriterium();\r\n        n.setMandantId(mandantId);\r\n        n.setNutzenattraktivitaetOperativerNutzenId(naOpNuId);\r\n        List<Nutzenkriterium> kriterien = nService.getAssignments(n);\r\n        // Zugewiesene Auswahlfelder holen\r\n        List<Auswahlfeld> abstufungen = dao.getAbstufungStatus(naOpNuId);\r\n        if (kriterien != null && abstufungen != null) {\r\n            logger.debug(kriterien.size() + \" Nutzenkriterien in der Liste\");\r\n            logger.debug(abstufungen.size() + \" Abstufungen in der Liste\");\r\n        }\r\n        // Mindestens ein Auswahlfeld pro Nutzenkriterium muss angewï¿½hlt sein\r\n        if (abstufungen != null && kriterien != null && abstufungen.size() > 0 && kriterien.size() > 0 && kriterien.size() <= abstufungen.size()) {\r\n            // Nutzenattraktivitï¿½t\r\n            if (isNa) {\r\n                session.setAttribute(Constants.ABSTUFUNGEN_NA, true);\r\n            } else // Operativer Nutzen\r\n            {\r\n                session.setAttribute(Constants.ABSTUFUNGEN_OP_NU, true);\r\n            }\r\n            return true;\r\n        } else // Status rot, eventuell vorhandenes Flag aus der Session lï¿½schen\r\n        {\r\n            // Nutzenattraktivitï¿½t\r\n            if (isNa) {\r\n                session.removeAttribute(Constants.ABSTUFUNGEN_NA);\r\n            } else // Operativer Nutzen\r\n            {\r\n                session.removeAttribute(Constants.ABSTUFUNGEN_OP_NU);\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n\r\n    /**\r\n     * Setzt den Navigations-Status von den Auswahlfeldern\r\n     * der Gewichtung eines Customizings.\r\n     *\r\n     * @param request                       HttpServletRequest\r\n     * @param kriterien                     Liste aller zugewiesenen Kriterien\r\n     * @param naOpNuId                      die Id der Nutzenattraktivitï¿½t\r\n     *                                      bzw. des Operativen Nutzens\r\n     * @param isNa                           true fï¿½r Nutzenattraktivitï¿½t, sonst false\r\n     * @return                              true fï¿½r Status grï¿½n, sonst false\r\n     */\r\n    public boolean setGewichtungStatus(HttpServletRequest request, List<Nutzenkriterium> kriterien, Integer naOpNuId, boolean isNa) {\r\n        HttpSession session = request.getSession();\r\n        // Gewichtung durch Fragebogen?\r\n        List<Auswahlfeld> gewichtungen = dao.getGewichtungStatus(naOpNuId);\r\n        if (gewichtungen != null && gewichtungen.size() > 0) {\r\n            logger.debug(\"gewichtungen.size()=\" + gewichtungen.size() + \" bei naOpNuId=\" + naOpNuId);\r\n            if (isNa) {\r\n                logger.debug(\"GEWICHTUNGEN_NA=true\");\r\n                session.setAttribute(Constants.GEWICHTUNGEN_NA, true);\r\n            } else {\r\n                logger.debug(\"GEWICHTUNGEN_OP_NU=true\");\r\n                session.setAttribute(Constants.GEWICHTUNGEN_OP_NU, true);\r\n            }\r\n            return true;\r\n        } else // Direkte Gewichtung?\r\n        if (kriterien != null) {\r\n            logger.debug(\"direkte Gewichtung bei naOpNuId=\" + naOpNuId);\r\n            for (Nutzenkriterium k : kriterien) {\r\n                logger.debug(\"nutzenkriteriumId=\" + k.getNutzenkriteriumId());\r\n                logger.debug(\"gewichtung=\" + k.getGewichtung());\r\n                if (k.getGewichtung() == null) {\r\n                    logger.debug(\"direkte Gewichtung null\");\r\n                    return false;\r\n                }\r\n            }\r\n            if (isNa) {\r\n                logger.debug(\"GEWICHTUNGEN_NA=true\");\r\n                session.setAttribute(Constants.GEWICHTUNGEN_NA, true);\r\n            } else {\r\n                logger.debug(\"GEWICHTUNGEN_OP_NU=true\");\r\n                session.setAttribute(Constants.GEWICHTUNGEN_OP_NU, true);\r\n            }\r\n            return true;\r\n        } else {\r\n            logger.debug(\"Gewichtungsstatus=false\");\r\n            return false;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * ï¿½berprï¿½ft, ob ein Customizing komplett ist.\r\n     *\r\n     * @param request                   der HttpServletRequest\r\n     * @return                          true bei komplettem Customizing, sonst false\r\n     */\r\n    public boolean customizingComplete(HttpServletRequest request) {\r\n        return customizingService.complete(request);\r\n    }\r\n\r\n    /**\r\n     * Setzt fï¿½r jeden gegebenen Level ein Auswahlfeld in den Request.\r\n     *\r\n     * @param request           der HttpServletRequest\r\n     * @param a                 das Auswahlfeld\r\n     * @param type              der Typ des Auswahlfelds\r\n     * @param levels            die zu setzenden levels\r\n     */\r\n    private void put(HttpServletRequest request, Auswahlfeld a, int type, int levels) {\r\n        // setze fï¿½r jeden Level ein Auswahlfeld\r\n        for (int i = 1; i <= levels; i++) {\r\n            a.setLevel(i);\r\n            // Inhalte der Auswahlfelder holen\r\n            List<Auswahlfeld> list = dao.getAuswahlFelder(a);\r\n            // Auswahl-Felder in den request setzen.\r\n            String name = Constants.SELECTBOX + \"_\" + type + \"_\" + i;\r\n            logger.debug(\"Setze Auswahlfeld \" + name + \" in den request\");\r\n            logger.debug(\"Inhalt des Auswahlfelds: \" + list.size() + \" Elemente\");\r\n            request.setAttribute(name, list);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Speichert pro Auswahlfeld und Level einen Eintrag fï¿½r die\r\n     * aktuelle Projektattraktivitaet\r\n     *\r\n     * @param a                   das zu speicherende Auswahlfeld\r\n     * @param levels              die zu speichernden levels\r\n     */\r\n    private void insertAssignments(Auswahlfeld a, int type, DynaActionForm form, int levels) {\r\n        // fï¿½r jeden Level einen Eintrag des jeweiligen Auswahlfelds setzen\r\n        for (int i = 1; i <= levels; i++) {\r\n            String name = Constants.SELECTBOX + \"_\" + type + \"_\" + i;\r\n            logger.debug(\"Hole Auswahlfeld \" + name + \" vom Formular\");\r\n            Integer aId = (Integer) form.get(name);\r\n            if (aId != null) {\r\n                logger.debug(\"Gewï¿½hlter Wert: \" + aId);\r\n                a.setAuswahlfeldId(aId);\r\n                dao.insertAssignment(a);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Speichert pro Auswahlfeld und Level einen Eintrag fï¿½r die\r\n     * aktuelle Nutzenattraktivitï¿½t bzw. den Operativen Nutzen\r\n     *\r\n     * @param a                   das zu speicherende Auswahlfeld\r\n     * @param levels              die zu speichernden levels\r\n     */\r\n    private void insertNaOpNuAssignment(Auswahlfeld a, int type, HttpServletRequest request, DynaActionForm form, int levels) {\r\n        // Nutzenkriterien holen\r\n        Nutzenkriterium kriterium = new Nutzenkriterium();\r\n        kriterium.setNutzenattraktivitaetOperativerNutzenId(a.getNutzenattraktivitaetOperativerNutzenId());\r\n        kriterium.setMandantId(a.getMandantId());\r\n        List<Nutzenkriterium> nutzenkriterien = nService.getAssignments(kriterium);\r\n        // alte Zuweisungen lï¿½schen\r\n        Integer kategorieId = (Integer) form.get(Constants.KATEGORIE_ID);\r\n        for (Nutzenkriterium n : nutzenkriterien) {\r\n            logger.debug(\"kategorie: \" + n.getKategorieId() + \", \" + kategorieId);\r\n            if (kategorieId.equals(n.getKategorieId()) || type == Constants.GEWICHTUNG) {\r\n                a.setNutzenkriteriumId(n.getNutzenkriteriumId());\r\n                logger.debug(\"Lï¿½sche Zuweisungen: \" + \" eintrittswahrscheinlichkeit=\" + a.getEintrittswahrscheinlichkeit() + \", eintrittszeitpunkt=\" + a.getEintrittszeitpunkt() + \", abstufung=\" + a.getAbstufung() + \", gewichtung=\" + a.getGewichtung() + \", nutzenkriteriumId=\" + a.getNutzenkriteriumId() + \", nutzenattraktivitaetOperativerNutzenId=\" + a.getNutzenattraktivitaetOperativerNutzenId());\r\n                dao.deleteNaOpNuAssignmentsByNutzenkriterium(a);\r\n            }\r\n        }\r\n        // fï¿½r jeden Level einen Eintrag des jeweiligen Auswahlfelds setzen\r\n        for (int i = 1; i <= levels; i++) {\r\n            a.setLevel(i);\r\n            for (Nutzenkriterium n : nutzenkriterien) {\r\n                a.setNutzenkriteriumId(n.getNutzenkriteriumId());\r\n                String name = Constants.SELECTBOX + \"_\" + type + \"_\" + i;\r\n                // Gewichtungen werden nicht mehr pro Nutzenkriterium bestimmt ...\r\n                // Design change\r\n                if (type != Constants.GEWICHTUNG) {\r\n                    name += \"_\" + n.getNutzenkriteriumId();\r\n                }\r\n                logger.debug(\"Hole Auswahlfeld \" + name + \" vom Formular\");\r\n                String aIdStr = request.getParameter(name);\r\n                logger.debug(\"aIdStr=\" + aIdStr);\r\n                Integer aId;\r\n                // neue Zuweisung erstellen\r\n                if (aIdStr != null && (aId = new Integer(aIdStr)) != null) {\r\n                    a.setAuswahlfeldId(aId);\r\n                    logger.debug(\"Erstelle Zuweisung: auswahlfeldId=\" + aId + \", nutzenkriteriumId=\" + a.getNutzenkriteriumId() + \", nutzenattraktivitaetOperativerNutzenId=\" + a.getNutzenattraktivitaetOperativerNutzenId());\r\n                    dao.insertNaOpNuAssignment(a);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Selektiert die angewï¿½hlten Auswahlfelder.\r\n     *\r\n     * @param request                 der HttpServletRequest\r\n     * @param a                       die Daten der zu selektierenden Auswahlfelder\r\n     * @param type                    der Typ des Auswahlfelds\r\n     * @param twoDimensional          true wenn die Levels auch berï¿½cksichtigt\r\n     *                                werden sollen, sonst false\r\n     */\r\n    private void preselect(HttpServletRequest request, Auswahlfeld a, Integer type, boolean twoDimensional) {\r\n        // Selektierte Auswahlfelder der Projektattraktivitï¿½t holen\r\n        List<Auswahlfeld> afs = null;\r\n        if (type != null && (type.equals(Constants.EINTRITTSWAHRSCHEINLICHKEIT) || type.equals(Constants.EINTRITTSZEITPUNKT))) {\r\n            afs = dao.getSelectedByPaId(a);\r\n        } else // Selektierte Auswahlfelder der Nutzenattraktivitï¿½t bzw.\r\n        // des Operativen Nutzens holen\r\n        {\r\n            afs = dao.getSelectedByNaOpNuId(a);\r\n        }\r\n        // Pro Level (1-5) eine HashMap erstellen\r\n        HashMap<String, HashMap> map = new HashMap<String, HashMap>();\r\n        HashMap<Integer, Integer> lvl1 = new HashMap<Integer, Integer>();\r\n        HashMap<Integer, Integer> lvl2 = new HashMap<Integer, Integer>();\r\n        HashMap<Integer, Integer> lvl3 = new HashMap<Integer, Integer>();\r\n        HashMap<Integer, Integer> lvl4 = new HashMap<Integer, Integer>();\r\n        HashMap<Integer, Integer> lvl5 = new HashMap<Integer, Integer>();\r\n        // Durch alle selektierten Auswahlfelder gehen\r\n        Integer[] single = new Integer[6];\r\n        for (Auswahlfeld af : afs) {\r\n            Integer lvl = af.getLevel();\r\n            logger.debug(\"lvl=\" + lvl);\r\n            // Level berï¿½cksichtigen\r\n            if (twoDimensional) {\r\n                Integer nutzenkriteriumId = af.getNutzenkriteriumId();\r\n                logger.debug(\"nutzenkriteriumId=\" + nutzenkriteriumId);\r\n                Integer auswahlfeldId = af.getAuswahlfeldId();\r\n                if (lvl.equals(1)) {\r\n                    lvl1.put(nutzenkriteriumId, auswahlfeldId);\r\n                } else if (lvl.equals(2)) {\r\n                    lvl2.put(nutzenkriteriumId, auswahlfeldId);\r\n                } else if (lvl.equals(3)) {\r\n                    lvl3.put(nutzenkriteriumId, auswahlfeldId);\r\n                } else if (lvl.equals(4)) {\r\n                    lvl4.put(nutzenkriteriumId, auswahlfeldId);\r\n                } else if (lvl.equals(5)) {\r\n                    lvl5.put(nutzenkriteriumId, auswahlfeldId);\r\n                }\r\n            } else {\r\n                single[lvl] = af.getAuswahlfeldId();\r\n            }\r\n        }\r\n        // Selektierte Auswahlfelder in den Request stellen\r\n        if (twoDimensional) {\r\n            map.put(\"1\", lvl1);\r\n            map.put(\"2\", lvl2);\r\n            map.put(\"3\", lvl3);\r\n            map.put(\"4\", lvl4);\r\n            map.put(\"5\", lvl5);\r\n            logger.debug(\"Selektierte Auswahlfelder in den Request stellen\");\r\n            request.setAttribute(\"selected\", map);\r\n        } else if (type.equals(Constants.EINTRITTSWAHRSCHEINLICHKEIT)) {\r\n            request.setAttribute(\"ew\", single);\r\n        } else if (type.equals(Constants.EINTRITTSZEITPUNKT)) {\r\n            request.setAttribute(\"ez\", single);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * ï¿½berprï¿½ft, ob die Id eines Auswahlfelds im Request ist\r\n     * (update) oder nicht (neu).\r\n     *\r\n     * @param request                   der HttpServletRequest\r\n     * @param form                      das DynaActionForm\r\n     * @return                          true, wenn das angegebene Auswahlfeld\r\n     *                                  besteht, sonst false.\r\n     */\r\n    private boolean isUpdate(HttpServletRequest request, DynaActionForm form) {\r\n        Integer id = (Integer) form.get(Constants.AUSWAHLFELD_ID);\r\n        if (id == null || id == 0) {\r\n            return false;\r\n        }\r\n        return true;\r\n    }\r\n}\r\n",
		"id": "EvoSuiteBenchmark/46_nutzenportfolio/src/main/java/ch/bfh/egov/nutzenportfolio/service/auswahlfeld/AuswahlfeldDaoServiceTest2.java",
		"test_prompt": "// AuswahlfeldDaoServiceTest2.java\npackage ch.bfh.egov.nutzenportfolio.service.auswahlfeld;\n\nimport java.util.ArrayList;\nimport java.util.HashMap;\nimport java.util.List;\nimport javax.servlet.http.HttpServletRequest;\nimport javax.servlet.http.HttpSession;\nimport org.apache.commons.logging.Log;\nimport org.apache.commons.logging.LogFactory;\nimport org.apache.struts.action.ActionMessage;\nimport org.apache.struts.action.ActionMessages;\nimport org.apache.struts.action.DynaActionForm;\nimport ch.bfh.egov.nutzenportfolio.Constants;\nimport ch.bfh.egov.nutzenportfolio.persistence.auswahlfeld.AuswahlfeldDao;\nimport ch.bfh.egov.nutzenportfolio.service.common.CommonService;\nimport ch.bfh.egov.nutzenportfolio.service.customizing.CustomizingService;\nimport ch.bfh.egov.nutzenportfolio.service.nutzenkriterium.NutzenkriteriumService;\nimport ch.bfh.egov.nutzenportfolio.service.strategischeziele.StrategischeZieleService;\nimport ch.bfh.egov.nutzenportfolio.tos.Auswahlfeld;\nimport ch.bfh.egov.nutzenportfolio.tos.Customizing;\nimport ch.bfh.egov.nutzenportfolio.tos.Nutzenkriterium;\nimport ch.bfh.egov.nutzenportfolio.tos.StrategischesZiel;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link AuswahlfeldDaoService}.\n* It contains ten unit test cases for the {@link AuswahlfeldDaoService#isOperativerNutzen(HttpServletRequest)} method.\n*/\nclass AuswahlfeldDaoServiceTest2 {"
	},
	{
		"original_code": "// AuswahlfeldDaoService.java\n/**\r\n * Nutzenportfolio\r\n * Copyright (C) 2006 Kompetenzzentrum E-Business, Simon Bergamin\r\n *\r\n * This program is free software; you can redistribute it and/or\r\n * modify it under the terms of the GNU General Public License\r\n * as published by the Free Software Foundation; either version 2\r\n * of the License, or (at your option) any later version.\r\n *\r\n * This program is distributed in the hope that it will be useful,\r\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n * GNU General Public License for more details.\r\n *\r\n * You should have received a copy of the GNU General Public License\r\n * along with this program; if not, write to the Free Software\r\n * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\r\n */\r\npackage ch.bfh.egov.nutzenportfolio.service.auswahlfeld;\r\n\r\nimport java.util.ArrayList;\r\nimport java.util.HashMap;\r\nimport java.util.List;\r\nimport javax.servlet.http.HttpServletRequest;\r\nimport javax.servlet.http.HttpSession;\r\nimport org.apache.commons.logging.Log;\r\nimport org.apache.commons.logging.LogFactory;\r\nimport org.apache.struts.action.ActionMessage;\r\nimport org.apache.struts.action.ActionMessages;\r\nimport org.apache.struts.action.DynaActionForm;\r\nimport ch.bfh.egov.nutzenportfolio.Constants;\r\nimport ch.bfh.egov.nutzenportfolio.persistence.auswahlfeld.AuswahlfeldDao;\r\nimport ch.bfh.egov.nutzenportfolio.service.common.CommonService;\r\nimport ch.bfh.egov.nutzenportfolio.service.customizing.CustomizingService;\r\nimport ch.bfh.egov.nutzenportfolio.service.nutzenkriterium.NutzenkriteriumService;\r\nimport ch.bfh.egov.nutzenportfolio.service.strategischeziele.StrategischeZieleService;\r\nimport ch.bfh.egov.nutzenportfolio.tos.Auswahlfeld;\r\nimport ch.bfh.egov.nutzenportfolio.tos.Customizing;\r\nimport ch.bfh.egov.nutzenportfolio.tos.Nutzenkriterium;\r\nimport ch.bfh.egov.nutzenportfolio.tos.StrategischesZiel;\r\n\r\n/**\r\n * Implementierende Service-Klasse fï¿½r Auswahlfelder. Auswahlfelder\r\n * sind Eintrittswahrscheinlichkeiten, Eintrittszeitpunkte,\r\n * Abstufungen und Gewichtungen.\r\n *\r\n * @author Kompetenzzentrum E-Business, Simon Bergamin\r\n */\r\npublic class AuswahlfeldDaoService implements AuswahlfeldService {\r\n\r\n    private AuswahlfeldDao dao;\r\n\r\n    private NutzenkriteriumService nService;\r\n\r\n    private CommonService cService;\r\n\r\n    private CustomizingService customizingService;\r\n\r\n    private StrategischeZieleService szService;\r\n\r\n    private Log logger = LogFactory.getLog(this.getClass());\r\n\r\n    /**\r\n     * Konstruktor. ï¿½bergabe des DataAcessObject-Interfaces fï¿½r Auswahlfelder.\r\n     *\r\n     * @param dao                       Auswahlfeld DataAcessObject-Interface\r\n     */\r\n    public AuswahlfeldDaoService(AuswahlfeldDao dao) {\r\n        this.dao = dao;\r\n    }\r\n\r\n    /**\r\n     * @see ch.bfh.egov.nutzenportfolio.persistence.auswahlfeld.AuswahlfeldIbatisDao#getById(Auswahlfeld)\r\n     */\r\n    public Auswahlfeld getById(Auswahlfeld a) {\r\n        return dao.getById(a);\r\n    }\r\n\r\n    /**\r\n     * @see ch.bfh.egov.nutzenportfolio.persistence.auswahlfeld.AuswahlfeldIbatisDao#getByProjektId(Auswahlfeld)\r\n     */\r\n    public List<Auswahlfeld> getByProjektId(Auswahlfeld a) {\r\n        return dao.getByProjektId(a);\r\n    }\r\n\r\n    /**\r\n     * @see ch.bfh.egov.nutzenportfolio.persistence.auswahlfeld.AuswahlfeldIbatisDao#getByNaOpNu(Auswahlfeld)\r\n     */\r\n    public List<Auswahlfeld> getByNaOpNu(Auswahlfeld a) {\r\n        return dao.getByNaOpNu(a);\r\n    }\r\n\r\n    /**\r\n     * @see ch.bfh.egov.nutzenportfolio.persistence.auswahlfeld.AuswahlfeldIbatisDao#getGewichtungStatus(Integer)\r\n     */\r\n    public List<Auswahlfeld> getGewichtungStatus(Integer naOpNuId) {\r\n        return dao.getGewichtungStatus(naOpNuId);\r\n    }\r\n\r\n    /**\r\n     * @see ch.bfh.egov.nutzenportfolio.persistence.auswahlfeld.AuswahlfeldIbatisDao#getAbstufungStatus(Integer)\r\n     */\r\n    public List<Auswahlfeld> getAbstufungStatus(Integer naOpNuId) {\r\n        return dao.getAbstufungStatus(naOpNuId);\r\n    }\r\n\r\n    /**\r\n     * @see ch.bfh.egov.nutzenportfolio.persistence.auswahlfeld.AuswahlfeldIbatisDao#getAnzahlGewichtungen(Integer)\r\n     */\r\n    public List<Auswahlfeld> getAnzahlGewichtungen(Integer naOpNuId) {\r\n        return dao.getAnzahlGewichtungen(naOpNuId);\r\n    }\r\n\r\n    /**\r\n     * @see ch.bfh.egov.nutzenportfolio.persistence.auswahlfeld.AuswahlfeldIbatisDao#getAnzahlAbstufungen(Integer)\r\n     */\r\n    public List<Auswahlfeld> getAnzahlAbstufungen(Integer naOpNuId) {\r\n        return dao.getAnzahlAbstufungen(naOpNuId);\r\n    }\r\n\r\n    /**\r\n     * @see ch.bfh.egov.nutzenportfolio.persistence.auswahlfeld.AuswahlfeldIbatisDao#getSelectedByPaId(Auswahlfeld)\r\n     */\r\n    public List<Auswahlfeld> getSelectedByPaId(Auswahlfeld a) {\r\n        return dao.getSelectedByPaId(a);\r\n    }\r\n\r\n    /**\r\n     * @see ch.bfh.egov.nutzenportfolio.persistence.auswahlfeld.AuswahlfeldIbatisDao#getSelectedByNaOpNuId(Auswahlfeld)\r\n     */\r\n    public List<Auswahlfeld> getSelectedByNaOpNuId(Auswahlfeld a) {\r\n        return dao.getSelectedByNaOpNuId(a);\r\n    }\r\n\r\n    /**\r\n     * @see ch.bfh.egov.nutzenportfolio.persistence.auswahlfeld.AuswahlfeldIbatisDao#deleteGewichtungen(Auswahlfeld)\r\n     */\r\n    public void deleteGewichtungen(Auswahlfeld a) {\r\n        dao.deleteGewichtungen(a);\r\n    }\r\n\r\n    /**\r\n     * Initialisierung dieses Service-Objekts durch ï¿½bergabe anderer,\r\n     * benï¿½tigter Service-Objekte.\r\n     *\r\n     * @param nService                   Nutzenkriterium Service Objekt\r\n     * @param cService                   Common Service Objekt\r\n     * @param customizingService         Customizing Service Objekt\r\n     */\r\n    public void init(NutzenkriteriumService nService, CommonService cService, CustomizingService customizingService, StrategischeZieleService szService) {\r\n        this.nService = nService;\r\n        this.cService = cService;\r\n        this.customizingService = customizingService;\r\n        this.szService = szService;\r\n    }\r\n\r\n    /**\r\n     * Generiert Auswahlfelder und fï¿½llt diese nach Typ und\r\n     * Level ab.\r\n     *\r\n     * @param request           der HttpServletRequest\r\n     * @param path              der Pfad der momentanen Action\r\n     */\r\n    public void list(HttpServletRequest request, String path) {\r\n        logger.debug(\"Pfad: \" + path);\r\n        // Neues Auswahlfeld generieren\r\n        Auswahlfeld a = createAuswahlfeld(request, null);\r\n        // Eintrittswahrscheinlichkeiten\r\n        if (path.contains(Constants.VERWALTUNG_EINTRITTSWAHRSCHEINLICHKEITEN_ACTION)) {\r\n            logger.debug(\"Eintrittswahrscheinlichkeiten holen\");\r\n            a = setType(a, Constants.EINTRITTSWAHRSCHEINLICHKEIT);\r\n        } else // Eintrittszeitpunkte\r\n        if (path.contains(Constants.VERWALTUNG_EINTRITTSZEITPUNKTE_ACTION)) {\r\n            logger.debug(\"Eintrittszeitpunkte holen\");\r\n            a = setType(a, Constants.EINTRITTSZEITPUNKT);\r\n        } else // Abstufungen\r\n        if (path.contains(Constants.VERWALTUNG_ABSTUFUNGEN_ACTION)) {\r\n            logger.debug(\"Abstufungen holen\");\r\n            a = setType(a, Constants.ABSTUFUNG);\r\n        } else // Gewichtungen\r\n        if (path.contains(Constants.VERWALTUNG_GEWICHTUNG_ACTION)) {\r\n            logger.debug(\"Gewichtungen holen\");\r\n            a = setType(a, Constants.GEWICHTUNG);\r\n        }\r\n        // Alle Levels holen\r\n        List<Auswahlfeld> afs = new ArrayList<Auswahlfeld>();\r\n        for (int i = 1; i < 6; i++) {\r\n            a.setLevel(i);\r\n            afs.addAll(dao.getAuswahlFelder(a));\r\n        }\r\n        logger.debug(afs.size() + \" Auswahlfelder in der Liste\");\r\n        request.setAttribute(Constants.AUSWAHLFELDER, afs);\r\n    }\r\n\r\n    /**\r\n     * Fï¿½llt ein Formular mit bestehenden Daten eines Auswahlfelds ab,\r\n     * falls eine entsprechende id angegeben wurde.\r\n     *\r\n     * @param request                   der HttpServletRequest\r\n     * @param form                      das DynaActionForm\r\n     */\r\n    public void edit(HttpServletRequest request, DynaActionForm form) {\r\n        if (isUpdate(request, form)) {\r\n            Auswahlfeld af = createAuswahlfeld(request, form);\r\n            af = dao.getById(af);\r\n            form.set(Constants.NAME, af.getName());\r\n            form.set(\"level\", af.getLevel());\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Fï¿½hrt ein update eines bestenenden Auswahlfelds anhand von\r\n     * Formulardaten durch.\r\n     *\r\n     * @param request                   der HttpServletRequest\r\n     * @param form                      das DynaActionForm\r\n     */\r\n    public void update(HttpServletRequest request, DynaActionForm form) {\r\n        logger.debug(\"Update Auswahlfeld\");\r\n        if (isUpdate(request, form)) {\r\n            logger.debug(\"Update durchfï¿½hren\");\r\n            Auswahlfeld af = createAuswahlfeld(request, form);\r\n            dao.update(af);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Prï¿½ft, ob ein Auswahlfeld existiert und gibt es zurï¿½ck.\r\n     *\r\n     * @param request                   der HttpServletRequest\r\n     * @param form                      das DynaActionForm\r\n     * @return                          das Auswahlfeld\r\n     */\r\n    public Auswahlfeld getAuswahlfeld(HttpServletRequest request, DynaActionForm form) {\r\n        Auswahlfeld af = createAuswahlfeld(request, form);\r\n        return dao.getById(af);\r\n    }\r\n\r\n    /**\r\n     * Abfrage fï¿½r das Lï¿½schen von einem Auswahlfeld.\r\n     *\r\n     * @param request                   der HttpServletRequest\r\n     * @param af                        das zu lï¿½schende Auswahlfeld\r\n     * @param messages                  das ActionMessages Objekt\r\n     */\r\n    public void deleteQuestion(HttpServletRequest request, Auswahlfeld af, ActionMessages messages) {\r\n        // Verknï¿½pfungen prï¿½fen\r\n        linkedTo(request, af);\r\n        // Bestï¿½tigungsnachricht ausgeben\r\n        messages.add(ActionMessages.GLOBAL_MESSAGE, new ActionMessage(\"messages.question.delete\", af.getName()));\r\n        // Actions zum Lï¿½schen und Abbrechen definieren\r\n        String action = \"\";\r\n        if (af.getEintrittswahrscheinlichkeit()) {\r\n            action = Constants.VERWALTUNG_EINTRITTSWAHRSCHEINLICHKEITEN_ACTION + \".do\";\r\n        } else if (af.getEintrittszeitpunkt()) {\r\n            action = Constants.VERWALTUNG_EINTRITTSZEITPUNKTE_ACTION + \".do\";\r\n        } else if (af.getAbstufung()) {\r\n            action = Constants.VERWALTUNG_ABSTUFUNGEN_ACTION + \".do\";\r\n        } else if (af.getGewichtung()) {\r\n            action = Constants.VERWALTUNG_GEWICHTUNG_ACTION + \".do\";\r\n        }\r\n        request.setAttribute(Constants.ACTION, action);\r\n        request.setAttribute(Constants.DISPATCH_YES, Constants.DELETE);\r\n        request.setAttribute(Constants.DISPATCH_NO, Constants.LIST);\r\n        request.setAttribute(Constants.ID_NAME, Constants.AUSWAHLFELD_ID);\r\n        request.setAttribute(Constants.ID_VALUE, af.getAuswahlfeldId());\r\n    }\r\n\r\n    /**\r\n     * Setzt die Verknï¿½pfungen zu diesem Auswahlfeld in den Request.\r\n     * Ein Auswahlfeld kann mit Customizings verknï¿½pft sein. Diese\r\n     * Methode wird bei der Lï¿½schabfrage verwendet.\r\n     *\r\n     * @param request                   der HttpServletRequest\r\n     * @param af                        das zu lï¿½schende Auswahlfeld\r\n     */\r\n    public void linkedTo(HttpServletRequest request, Auswahlfeld af) {\r\n        HashMap<String, List> map = new HashMap<String, List>();\r\n        // Customizings suchen, die dieses Detailziel benï¿½tigen\r\n        List<Customizing> customizings = dao.getLinkedPaCustomizings(af);\r\n        customizings.addAll(dao.getLinkedNaOpNuCustomizings(af));\r\n        if (customizings.size() > 0) {\r\n            for (Customizing c : customizings) {\r\n                if (c.getStatus()) {\r\n                    request.setAttribute(\"active\", true);\r\n                    break;\r\n                }\r\n            }\r\n            map.put(\"Customizings\", customizings);\r\n        }\r\n        request.setAttribute(\"linked\", map);\r\n    }\r\n\r\n    /**\r\n     * Lï¿½scht ein Auswahlfeld. Falls es mit inaktiven Customizings\r\n     * verknï¿½ft ist, werden diese ebenfalls gelï¿½scht. Wenn aktive Customizings\r\n     * verknï¿½ft sind, wird das Auswahlfeld nicht gelï¿½scht.\r\n     *\r\n     * @param request                   der HttpServletRequest\r\n     * @param af                        das zu lï¿½schende Auswahlfeld\r\n     */\r\n    public void delete(HttpServletRequest request, Auswahlfeld af) {\r\n        // Verknï¿½pfungen prï¿½fen\r\n        linkedTo(request, af);\r\n        Boolean active = (Boolean) request.getAttribute(\"active\");\r\n        // Aktives Customizing verknï¿½ft. Dies sollte nicht passieren ausser bei\r\n        // einem direkten URL-Aufruf ...\r\n        if (active != null && active) {\r\n            logger.debug(\"Aktives Customizing verknï¿½pft, Auswahlfeld wird nicht gelï¿½scht\");\r\n            return;\r\n        }\r\n        // Customizings lï¿½schen\r\n        List<Customizing> customizings = dao.getLinkedPaCustomizings(af);\r\n        customizings.addAll(dao.getLinkedNaOpNuCustomizings(af));\r\n        for (Customizing c : customizings) {\r\n            logger.debug(\"Lï¿½sche Customizing \" + c.getCustomizingId());\r\n            customizingService.cascadeDelete(request, c);\r\n        }\r\n        // Lï¿½schen des Auswahlfelds\r\n        dao.delete(af);\r\n    }\r\n\r\n    /**\r\n     * Lï¿½scht alle Verknï¿½pfungen von Auswahlfeldern zu einer Projektattraktivitï¿½t.\r\n     *\r\n     * @param paId                      die Id der Projektattraktivitï¿½t\r\n     */\r\n    public void deletePaAssignmentsById(Integer paId) {\r\n        Auswahlfeld af = new Auswahlfeld();\r\n        af.setProjektattraktivitaetId(paId);\r\n        af = setType(af, Constants.EINTRITTSWAHRSCHEINLICHKEIT);\r\n        dao.deleteAssignments(af);\r\n        af = setType(af, Constants.EINTRITTSZEITPUNKT);\r\n        dao.deleteAssignments(af);\r\n    }\r\n\r\n    /**\r\n     * Lï¿½scht alle Verknï¿½pfungen von Auswahlfeldern zu einer\r\n     * Nutzenattraktivitï¿½t oder einem Operativen Nutzen.\r\n     *\r\n     * @param naOpNuId                  die Id der Nutzenattraktivitï¿½t\r\n     *                                  oder des Operativen Nutzens\r\n     */\r\n    public void deleteNaOpNuAssignmentsById(Integer naOpNuId) {\r\n        Auswahlfeld af = new Auswahlfeld();\r\n        af.setNutzenattraktivitaetOperativerNutzenId(naOpNuId);\r\n        af = setType(af, Constants.ABSTUFUNG);\r\n        dao.deleteNaOpNuAssignments(af);\r\n        af = setType(af, Constants.GEWICHTUNG);\r\n        dao.deleteNaOpNuAssignments(af);\r\n    }\r\n\r\n    /**\r\n     * Generiert Auswahlfelder und fï¿½llt diese nach Typ und\r\n     * Level ab.\r\n     *\r\n     * @param request           der HttpServletRequest\r\n     * @param path              der Pfad der momentanen Action\r\n     * @param form              das DynaActionForm\r\n     */\r\n    public void populate(HttpServletRequest request, String path, DynaActionForm form) {\r\n        // Wir wollen kein [Ljava.lang.String;@xxxxxxx im Definition Feld ...\r\n        try {\r\n            form.set(\"name\", null);\r\n        } catch (IllegalArgumentException ex) {\r\n        }\r\n        // Benï¿½tigte Id's\r\n        HttpSession session = request.getSession();\r\n        Integer customizingId = (Integer) session.getAttribute(Constants.CUSTOMIZING_ID);\r\n        // Neues Auswahlfeld generieren\r\n        Auswahlfeld a = createAuswahlfeld(request, null);\r\n        // Realisierbarkeit\r\n        logger.debug(\"Pfad: \" + path);\r\n        if (path.contains(Constants.REALISIERBARKEIT_ACTION)) {\r\n            Integer paId = cService.getProjektattraktivitaetIdByCustomizingId(customizingId);\r\n            a.setProjektattraktivitaetId(paId);\r\n            // Eintrittswahrscheinlichkeit abfï¿½llen\r\n            a = setType(a, Constants.EINTRITTSWAHRSCHEINLICHKEIT);\r\n            put(request, a, Constants.EINTRITTSWAHRSCHEINLICHKEIT, 3);\r\n            // Selektiere Auswahlfelder\r\n            preselect(request, a, Constants.EINTRITTSWAHRSCHEINLICHKEIT, false);\r\n            // Eintrittszeitpunkt abfï¿½llen\r\n            a = setType(a, Constants.EINTRITTSZEITPUNKT);\r\n            put(request, a, Constants.EINTRITTSZEITPUNKT, 3);\r\n            // Selektiere Auswahlfelder\r\n            preselect(request, a, Constants.EINTRITTSZEITPUNKT, false);\r\n            // Typen in den Request stellen fï¿½r das Hinzufï¿½gen von neuen Begriffen\r\n            request.setAttribute(Constants.EINTRITTSWAHRSCHEINLICHKEITEN, Constants.EINTRITTSWAHRSCHEINLICHKEIT);\r\n            request.setAttribute(Constants.EINTRITTSZEITPUNKTE, Constants.EINTRITTSZEITPUNKT);\r\n            // Anzahl Strategische Ziele holen\r\n            Integer mandantId = (Integer) request.getSession().getAttribute(Constants.MANDANT_ID);\r\n            StrategischesZiel sz = new StrategischesZiel();\r\n            sz.setCustomizingId(customizingId);\r\n            sz.setMandantId(mandantId);\r\n            List<StrategischesZiel> szs = szService.getAssignments(sz);\r\n            request.setAttribute(\"totalStrategischeZiele\", szs.size());\r\n        } else // Stufenbeschriebe abfï¿½llen\r\n        if (path.contains(Constants.STUFENBESCHRIEBE_ACTION) || path.contains(Constants.GEWICHTUNG_ACTION)) {\r\n            // Abstufungen holen\r\n            Integer levels = (Integer) request.getSession().getAttribute(Constants.ABSTUFUNGEN);\r\n            List<Integer> list = new ArrayList<Integer>();\r\n            // Niedrigste ist immer gewï¿½hlt (1)\r\n            list.add(new Integer(1));\r\n            // Wenn 3 Abstufungen: Niedrigste, mittlere  und\r\n            // hï¿½chste auswï¿½hlen (1 + 3 + 5)\r\n            if (levels == 3) {\r\n                list.add(new Integer(3));\r\n            }\r\n            // Wenn 4 Abstufungen: Niedrigste, mittlere, zweithï¿½chste und\r\n            // Hï¿½chste auswï¿½hlen (1 + 3 + 4 + 5)\r\n            if (levels == 4) {\r\n                list.add(new Integer(3));\r\n                list.add(new Integer(4));\r\n            }\r\n            // Alle 5 Abstufungen (1 + 2 +3 + 4 + 5)\r\n            if (levels == 5) {\r\n                list.add(new Integer(2));\r\n                list.add(new Integer(3));\r\n                list.add(new Integer(4));\r\n            }\r\n            // Hï¿½chste ist immer gewï¿½hlt (5)\r\n            list.add(new Integer(5));\r\n            request.setAttribute(Constants.STUFEN, list);\r\n            // Auswahlfelder abfï¿½llen\r\n            if (path.contains(Constants.STUFENBESCHRIEBE_ACTION)) {\r\n                a = setType(a, Constants.ABSTUFUNG);\r\n                put(request, a, Constants.ABSTUFUNG, 5);\r\n                // Typ in den Request stellen fï¿½r das Hinzufï¿½gen von neuen Begriffen\r\n                request.setAttribute(Constants.ABSTUFUNGEN, Constants.ABSTUFUNG);\r\n            } else {\r\n                a = setType(a, Constants.GEWICHTUNG);\r\n                put(request, a, Constants.GEWICHTUNG, 5);\r\n                // Typ in den Request stellen fï¿½r das Hinzufï¿½gen von neuen Begriffen\r\n                request.setAttribute(Constants.GEWICHTUNGEN, Constants.GEWICHTUNG);\r\n            }\r\n            // Selektiere Auswahlfelder\r\n            Integer naOpNuId = cService.getNaOpNuId(request, customizingId);\r\n            a.setNutzenattraktivitaetOperativerNutzenId(naOpNuId);\r\n            preselect(request, a, null, true);\r\n            // Operativer Nutzen -> Projektbetroffene\r\n            if (cService.isOperativerNutzen(request)) {\r\n                request.setAttribute(Constants.PROJEKTBETROFFENE, true);\r\n            }\r\n            // Nutzenkriterien abfï¿½llen\r\n            nService.populate(request);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Weist die angewï¿½hlten Eintrï¿½ge der Auswahlfelder der aktuellen\r\n     * Projektattraktivitaet zu.\r\n     *\r\n     * @param request           der HttpServletRequest\r\n     * @param form              das Formular der Action\r\n     * @param path              der Pfad der momentanen Action\r\n     */\r\n    public void setAuswahlfelder(HttpServletRequest request, DynaActionForm form, String path) {\r\n        // Benï¿½tigte ids holen\r\n        HttpSession session = request.getSession();\r\n        Integer customizingId = (Integer) session.getAttribute(Constants.CUSTOMIZING_ID);\r\n        Integer mandantId = (Integer) session.getAttribute(Constants.MANDANT_ID);\r\n        // Neues Auswahlfeld generieren\r\n        Auswahlfeld a = createAuswahlfeld(request, null);\r\n        // Realisierbarkeit\r\n        logger.debug(\"Pfad: \" + path);\r\n        if (path.contains(Constants.REALISIERBARKEIT_ACTION)) {\r\n            Integer pId = cService.getProjektattraktivitaetIdByCustomizingId(customizingId);\r\n            a.setProjektattraktivitaetId(pId);\r\n            // Eintrittswahrscheinlichkeiten updaten\r\n            a = setType(a, Constants.EINTRITTSWAHRSCHEINLICHKEIT);\r\n            dao.deleteAssignments(a);\r\n            insertAssignments(a, Constants.EINTRITTSWAHRSCHEINLICHKEIT, form, 3);\r\n            // Eintrittszeitpunkt abfï¿½llen\r\n            a = setType(a, Constants.EINTRITTSZEITPUNKT);\r\n            dao.deleteAssignments(a);\r\n            insertAssignments(a, Constants.EINTRITTSZEITPUNKT, form, 3);\r\n            setRealisierbarkeitStatus(request, pId);\r\n        } else // Stufenbeschriebe abfï¿½llen\r\n        if (path.contains(Constants.STUFENBESCHRIEBE_ACTION)) {\r\n            Integer naOpNuId = cService.getNaOpNuId(request, customizingId);\r\n            logger.debug(\"naOpNuId=\" + naOpNuId);\r\n            a.setNutzenattraktivitaetOperativerNutzenId(naOpNuId);\r\n            a = setType(a, Constants.ABSTUFUNG);\r\n            insertNaOpNuAssignment(a, Constants.ABSTUFUNG, request, form, 5);\r\n            logger.debug(\"stufenbeschriebe\");\r\n            boolean isNa = !cService.isOperativerNutzen(request);\r\n            setStufenStatus(request, naOpNuId, isNa);\r\n        } else // Gewichtung abfï¿½llen\r\n        if (path.contains(Constants.GEWICHTUNG_ACTION)) {\r\n            // allfï¿½llige direkte Gewichtung lï¿½schen\r\n            logger.debug(\"lï¿½sche allfï¿½llige direkte Gewichtungen.\");\r\n            Integer naOpNuId = cService.getNaOpNuId(request, customizingId);\r\n            nService.unsetAssignmentGewichtung(naOpNuId);\r\n            a.setNutzenattraktivitaetOperativerNutzenId(naOpNuId);\r\n            a = setType(a, Constants.GEWICHTUNG);\r\n            insertNaOpNuAssignment(a, Constants.GEWICHTUNG, request, form, 5);\r\n            logger.debug(\"gewichtung\");\r\n            boolean isNa = !cService.isOperativerNutzen(request);\r\n            Nutzenkriterium n = new Nutzenkriterium();\r\n            n.setMandantId(mandantId);\r\n            n.setNutzenattraktivitaetOperativerNutzenId(naOpNuId);\r\n            List<Nutzenkriterium> kriterien = nService.getAssignments(n);\r\n            setGewichtungStatus(request, kriterien, naOpNuId, isNa);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @see ch.bfh.egov.nutzenportfolio.service.nutzenkriterium.NutzenkriteriumDaoService#next(HttpServletRequest)\r\n     */\r\n    public boolean next(HttpServletRequest request) {\r\n        return nService.next(request);\r\n    }\r\n\r\n    /**\r\n     * Generiert ein Auswahlfeld Objekt mit dem aktuellen Mandanten.\r\n     *\r\n     * @param request               der HttpServletRequest\r\n     * @param form                  das DynaActionForm\r\n     * @return                      ein Auswahlfeld mit gesetzem Mandant\r\n     */\r\n    public Auswahlfeld createAuswahlfeld(HttpServletRequest request, DynaActionForm form) {\r\n        Auswahlfeld a = new Auswahlfeld();\r\n        a.setMandantId((Integer) request.getSession().getAttribute(Constants.MANDANT_ID));\r\n        if (form != null) {\r\n            Integer id = (Integer) form.get(Constants.AUSWAHLFELD_ID);\r\n            String name = (String) form.get(Constants.NAME);\r\n            Integer level = (Integer) form.get(\"level\");\r\n            a.setAuswahlfeldId(id);\r\n            a.setName(name);\r\n            a.setLevel(level);\r\n        }\r\n        return a;\r\n    }\r\n\r\n    /**\r\n     * Setzt den Typ eines Auswahlfelds anhand von Konstanten.\r\n     *\r\n     * @param a                   das Auswahlfeld\r\n     * @param type                der zu setzende Typ des Auswahlfelds\r\n     * @return                    das Auswahl-Feld mit dem gesetzten Typ\r\n     */\r\n    public Auswahlfeld setType(Auswahlfeld a, int type) {\r\n        switch(type) {\r\n            case Constants.EINTRITTSWAHRSCHEINLICHKEIT:\r\n                a.setEintrittswahrscheinlichkeit(true);\r\n                a.setEintrittszeitpunkt(false);\r\n                a.setAbstufung(false);\r\n                a.setGewichtung(false);\r\n                break;\r\n            case Constants.EINTRITTSZEITPUNKT:\r\n                a.setEintrittswahrscheinlichkeit(false);\r\n                a.setEintrittszeitpunkt(true);\r\n                a.setAbstufung(false);\r\n                a.setGewichtung(false);\r\n                break;\r\n            case Constants.ABSTUFUNG:\r\n                a.setEintrittswahrscheinlichkeit(false);\r\n                a.setEintrittszeitpunkt(false);\r\n                a.setAbstufung(true);\r\n                a.setGewichtung(false);\r\n                break;\r\n            case Constants.GEWICHTUNG:\r\n                a.setEintrittswahrscheinlichkeit(false);\r\n                a.setEintrittszeitpunkt(false);\r\n                a.setAbstufung(false);\r\n                a.setGewichtung(true);\r\n                break;\r\n        }\r\n        return a;\r\n    }\r\n\r\n    /**\r\n     * @see ch.bfh.egov.nutzenportfolio.service.common.CommonDaoService#isOperativerNutzen(HttpServletRequest)\r\n     */\r\n    public boolean isOperativerNutzen(HttpServletRequest request) {\r\n        return cService.isOperativerNutzen(request);\r\n    }\r\n\r\n    /**\r\n     * Speichert ein neues Auswahlfeld und fï¿½gt es dem aktuellen\r\n     * Customizing zu.\r\n     *\r\n     * @param request                   der HttpServletRequest\r\n     * @param form                      das DynaActionForm mit Daten des Auswahlfelds\r\n     * @param errors                    ActionMessages Objekt zur Ausgabe von\r\n     *                                  Feld-bezogenen Fehlermeldungen\r\n     * @param messages                  ActionMessages Objekt zur Ausgabe von\r\n     *                                  globalen Fehlermeldungen\r\n     * @return                          true bei Erfolg, sonst false\r\n     */\r\n    public boolean add(HttpServletRequest request, DynaActionForm form, ActionMessages errors, ActionMessages messages) {\r\n        Integer mandantId = (Integer) request.getSession().getAttribute(Constants.MANDANT_ID);\r\n        // Formulardaten holen\r\n        String[] names = (String[]) form.get(\"name\");\r\n        Integer[] types = (Integer[]) form.get(\"type\");\r\n        Integer[] lvls = (Integer[]) form.get(\"lvl\");\r\n        String name = null;\r\n        Integer pos = null;\r\n        for (int i = 0; i < names.length; i++) {\r\n            logger.debug(\"names[\" + i + \"]=\" + names[i]);\r\n            if (names[i] != null && !names[i].equals(\"\")) {\r\n                name = names[i];\r\n                pos = i;\r\n            }\r\n        }\r\n        for (int i = 0; i < types.length; i++) {\r\n            logger.debug(\"types[\" + i + \"]=\" + types[i]);\r\n        }\r\n        for (int i = 0; i < lvls.length; i++) {\r\n            logger.debug(\"lvls[\" + i + \"]=\" + lvls[i]);\r\n        }\r\n        // Formulardaten ï¿½berprï¿½fen\r\n        if (name == null) {\r\n            logger.debug(\"Name nicht vorhanden.\");\r\n            errors.add(\"name\", new ActionMessage(\"errors.required\", \"Name\"));\r\n            return false;\r\n        }\r\n        Integer type = types[pos];\r\n        Integer lvl = lvls[pos];\r\n        Auswahlfeld af = new Auswahlfeld();\r\n        af.setMandantId(mandantId);\r\n        af.setName(name);\r\n        af.setLevel(lvl);\r\n        setType(af, type);\r\n        // Auf duplikate prï¿½fen\r\n        Auswahlfeld a = dao.getByName(af);\r\n        Boolean match = false;\r\n        if (a != null) {\r\n            if (a.getAbstufung() && type == Constants.ABSTUFUNG) {\r\n                match = true;\r\n            }\r\n            if (a.getGewichtung() && type == Constants.GEWICHTUNG) {\r\n                match = true;\r\n            }\r\n            if (a.getEintrittswahrscheinlichkeit() && type == Constants.EINTRITTSWAHRSCHEINLICHKEIT) {\r\n                match = true;\r\n            }\r\n            if (a.getEintrittszeitpunkt() && type == Constants.EINTRITTSZEITPUNKT) {\r\n                match = true;\r\n            }\r\n        }\r\n        if (a != null && match) {\r\n            logger.debug(name + \" ist ein Duplikat\");\r\n            messages.add(ActionMessages.GLOBAL_MESSAGE, new ActionMessage(\"errors.duplicate\", \"Eintrag\"));\r\n            return false;\r\n        }\r\n        // Auswahlfeld einfï¿½gen\r\n        dao.insert(af);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Kopiert alle zugewiesenen Auswahlfelder eines Customizings\r\n     * in ein neues.\r\n     *\r\n     * @param paId                          die Id der aktuellen Projektattraktivitï¿½t\r\n     * @param newPaId                       die Id der neuen Projektattraktivitï¿½t\r\n     * @param naOpNuId                      die Id der aktuellen Nutzenattraktivitï¿½t\r\n     *                                      bzw. des aktuellen Operativen Nutzens\r\n     * @param newNaOpNuId                   die Id der neuen Nutzenattraktivitï¿½t\r\n     *                                      bzw. des neuen Operativen Nutzens\r\n     * @param type                          der Typ des Auswahlfelds\r\n     */\r\n    public void copy(Integer paId, Integer newPaId, Integer naOpNuId, Integer newNaOpNuId, Integer type) {\r\n        Auswahlfeld a = new Auswahlfeld();\r\n        // Typ setzen\r\n        this.setType(a, type);\r\n        // Projektattraktivitï¿½t\r\n        if (paId != null) {\r\n            a.setProjektattraktivitaetId(paId);\r\n            List<Auswahlfeld> afs = dao.getSelectedByPaId(a);\r\n            for (Auswahlfeld af : afs) {\r\n                af.setProjektattraktivitaetId(newPaId);\r\n                dao.insertAssignment(af);\r\n            }\r\n        } else // Nutzenattraktivitï¿½t oder Operativer Nutzen\r\n        {\r\n            a.setNutzenattraktivitaetOperativerNutzenId(naOpNuId);\r\n            List<Auswahlfeld> afs = dao.getSelectedByNaOpNuId(a);\r\n            for (Auswahlfeld af : afs) {\r\n                af.setNutzenattraktivitaetOperativerNutzenId(newNaOpNuId);\r\n                dao.insertNaOpNuAssignment(af);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Setzt den Navigations-Status von den Auswahlfeldern der\r\n     * Realisierbarkeit eines Customizings.\r\n     *\r\n     * @param request                       HttpServletRequest\r\n     * @param paId                          die Id der Projektattraktivitï¿½t\r\n     * @return                              true fï¿½r Status grï¿½n, sonst false\r\n     */\r\n    public boolean setRealisierbarkeitStatus(HttpServletRequest request, Integer paId) {\r\n        // Zugewiesene Auswahlfelder holen\r\n        List<Auswahlfeld> afs = dao.getRealisierbarkeitStatus(paId);\r\n        HttpSession session = request.getSession();\r\n        // Mindestens ein Auswahlfeld muss angewï¿½hlt sein\r\n        if (afs != null && afs.size() > 0) {\r\n            // Status grï¿½n, Status-Flag in die Session setzen\r\n            session.setAttribute(Constants.REALISIERBARKEIT, true);\r\n            return true;\r\n        } else {\r\n            // Status rot, eventuell vorhandenes Flag aus der Session lï¿½schen\r\n            session.removeAttribute(Constants.REALISIERBARKEIT);\r\n        }\r\n        return false;\r\n    }\r\n\r\n    /**\r\n     * Setzt den Navigations-Status von den Auswahlfeldern\r\n     * der Abstufungen eines Customizings.\r\n     *\r\n     * @param request                       HttpServletRequest\r\n     * @param naOpNuId                      die Id der Nutzenattraktivitï¿½t\r\n     *                                      bzw. des Operativen Nutzens\r\n     * @param isNa                          true fï¿½r Nutzenattraktivitï¿½t, sonst false\r\n     * @return                              true fï¿½r Status grï¿½n, sonst false\r\n     */\r\n    public boolean setStufenStatus(HttpServletRequest request, Integer naOpNuId, boolean isNa) {\r\n        // Zugewiesene Nutzenkriterien holen\r\n        HttpSession session = request.getSession();\r\n        Integer mandantId = (Integer) session.getAttribute(Constants.MANDANT_ID);\r\n        Nutzenkriterium n = new Nutzenkriterium();\r\n        n.setMandantId(mandantId);\r\n        n.setNutzenattraktivitaetOperativerNutzenId(naOpNuId);\r\n        List<Nutzenkriterium> kriterien = nService.getAssignments(n);\r\n        // Zugewiesene Auswahlfelder holen\r\n        List<Auswahlfeld> abstufungen = dao.getAbstufungStatus(naOpNuId);\r\n        if (kriterien != null && abstufungen != null) {\r\n            logger.debug(kriterien.size() + \" Nutzenkriterien in der Liste\");\r\n            logger.debug(abstufungen.size() + \" Abstufungen in der Liste\");\r\n        }\r\n        // Mindestens ein Auswahlfeld pro Nutzenkriterium muss angewï¿½hlt sein\r\n        if (abstufungen != null && kriterien != null && abstufungen.size() > 0 && kriterien.size() > 0 && kriterien.size() <= abstufungen.size()) {\r\n            // Nutzenattraktivitï¿½t\r\n            if (isNa) {\r\n                session.setAttribute(Constants.ABSTUFUNGEN_NA, true);\r\n            } else // Operativer Nutzen\r\n            {\r\n                session.setAttribute(Constants.ABSTUFUNGEN_OP_NU, true);\r\n            }\r\n            return true;\r\n        } else // Status rot, eventuell vorhandenes Flag aus der Session lï¿½schen\r\n        {\r\n            // Nutzenattraktivitï¿½t\r\n            if (isNa) {\r\n                session.removeAttribute(Constants.ABSTUFUNGEN_NA);\r\n            } else // Operativer Nutzen\r\n            {\r\n                session.removeAttribute(Constants.ABSTUFUNGEN_OP_NU);\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n\r\n    /**\r\n     * Setzt den Navigations-Status von den Auswahlfeldern\r\n     * der Gewichtung eines Customizings.\r\n     *\r\n     * @param request                       HttpServletRequest\r\n     * @param kriterien                     Liste aller zugewiesenen Kriterien\r\n     * @param naOpNuId                      die Id der Nutzenattraktivitï¿½t\r\n     *                                      bzw. des Operativen Nutzens\r\n     * @param isNa                           true fï¿½r Nutzenattraktivitï¿½t, sonst false\r\n     * @return                              true fï¿½r Status grï¿½n, sonst false\r\n     */\r\n    public boolean setGewichtungStatus(HttpServletRequest request, List<Nutzenkriterium> kriterien, Integer naOpNuId, boolean isNa) {\r\n        HttpSession session = request.getSession();\r\n        // Gewichtung durch Fragebogen?\r\n        List<Auswahlfeld> gewichtungen = dao.getGewichtungStatus(naOpNuId);\r\n        if (gewichtungen != null && gewichtungen.size() > 0) {\r\n            logger.debug(\"gewichtungen.size()=\" + gewichtungen.size() + \" bei naOpNuId=\" + naOpNuId);\r\n            if (isNa) {\r\n                logger.debug(\"GEWICHTUNGEN_NA=true\");\r\n                session.setAttribute(Constants.GEWICHTUNGEN_NA, true);\r\n            } else {\r\n                logger.debug(\"GEWICHTUNGEN_OP_NU=true\");\r\n                session.setAttribute(Constants.GEWICHTUNGEN_OP_NU, true);\r\n            }\r\n            return true;\r\n        } else // Direkte Gewichtung?\r\n        if (kriterien != null) {\r\n            logger.debug(\"direkte Gewichtung bei naOpNuId=\" + naOpNuId);\r\n            for (Nutzenkriterium k : kriterien) {\r\n                logger.debug(\"nutzenkriteriumId=\" + k.getNutzenkriteriumId());\r\n                logger.debug(\"gewichtung=\" + k.getGewichtung());\r\n                if (k.getGewichtung() == null) {\r\n                    logger.debug(\"direkte Gewichtung null\");\r\n                    return false;\r\n                }\r\n            }\r\n            if (isNa) {\r\n                logger.debug(\"GEWICHTUNGEN_NA=true\");\r\n                session.setAttribute(Constants.GEWICHTUNGEN_NA, true);\r\n            } else {\r\n                logger.debug(\"GEWICHTUNGEN_OP_NU=true\");\r\n                session.setAttribute(Constants.GEWICHTUNGEN_OP_NU, true);\r\n            }\r\n            return true;\r\n        } else {\r\n            logger.debug(\"Gewichtungsstatus=false\");\r\n            return false;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * ï¿½berprï¿½ft, ob ein Customizing komplett ist.\r\n     *\r\n     * @param request                   der HttpServletRequest\r\n     * @return                          true bei komplettem Customizing, sonst false\r\n     */\r\n    public boolean customizingComplete(HttpServletRequest request) {\r\n        return customizingService.complete(request);\r\n    }\r\n\r\n    /**\r\n     * Setzt fï¿½r jeden gegebenen Level ein Auswahlfeld in den Request.\r\n     *\r\n     * @param request           der HttpServletRequest\r\n     * @param a                 das Auswahlfeld\r\n     * @param type              der Typ des Auswahlfelds\r\n     * @param levels            die zu setzenden levels\r\n     */\r\n    private void put(HttpServletRequest request, Auswahlfeld a, int type, int levels) {\r\n        // setze fï¿½r jeden Level ein Auswahlfeld\r\n        for (int i = 1; i <= levels; i++) {\r\n            a.setLevel(i);\r\n            // Inhalte der Auswahlfelder holen\r\n            List<Auswahlfeld> list = dao.getAuswahlFelder(a);\r\n            // Auswahl-Felder in den request setzen.\r\n            String name = Constants.SELECTBOX + \"_\" + type + \"_\" + i;\r\n            logger.debug(\"Setze Auswahlfeld \" + name + \" in den request\");\r\n            logger.debug(\"Inhalt des Auswahlfelds: \" + list.size() + \" Elemente\");\r\n            request.setAttribute(name, list);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Speichert pro Auswahlfeld und Level einen Eintrag fï¿½r die\r\n     * aktuelle Projektattraktivitaet\r\n     *\r\n     * @param a                   das zu speicherende Auswahlfeld\r\n     * @param levels              die zu speichernden levels\r\n     */\r\n    private void insertAssignments(Auswahlfeld a, int type, DynaActionForm form, int levels) {\r\n        // fï¿½r jeden Level einen Eintrag des jeweiligen Auswahlfelds setzen\r\n        for (int i = 1; i <= levels; i++) {\r\n            String name = Constants.SELECTBOX + \"_\" + type + \"_\" + i;\r\n            logger.debug(\"Hole Auswahlfeld \" + name + \" vom Formular\");\r\n            Integer aId = (Integer) form.get(name);\r\n            if (aId != null) {\r\n                logger.debug(\"Gewï¿½hlter Wert: \" + aId);\r\n                a.setAuswahlfeldId(aId);\r\n                dao.insertAssignment(a);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Speichert pro Auswahlfeld und Level einen Eintrag fï¿½r die\r\n     * aktuelle Nutzenattraktivitï¿½t bzw. den Operativen Nutzen\r\n     *\r\n     * @param a                   das zu speicherende Auswahlfeld\r\n     * @param levels              die zu speichernden levels\r\n     */\r\n    private void insertNaOpNuAssignment(Auswahlfeld a, int type, HttpServletRequest request, DynaActionForm form, int levels) {\r\n        // Nutzenkriterien holen\r\n        Nutzenkriterium kriterium = new Nutzenkriterium();\r\n        kriterium.setNutzenattraktivitaetOperativerNutzenId(a.getNutzenattraktivitaetOperativerNutzenId());\r\n        kriterium.setMandantId(a.getMandantId());\r\n        List<Nutzenkriterium> nutzenkriterien = nService.getAssignments(kriterium);\r\n        // alte Zuweisungen lï¿½schen\r\n        Integer kategorieId = (Integer) form.get(Constants.KATEGORIE_ID);\r\n        for (Nutzenkriterium n : nutzenkriterien) {\r\n            logger.debug(\"kategorie: \" + n.getKategorieId() + \", \" + kategorieId);\r\n            if (kategorieId.equals(n.getKategorieId()) || type == Constants.GEWICHTUNG) {\r\n                a.setNutzenkriteriumId(n.getNutzenkriteriumId());\r\n                logger.debug(\"Lï¿½sche Zuweisungen: \" + \" eintrittswahrscheinlichkeit=\" + a.getEintrittswahrscheinlichkeit() + \", eintrittszeitpunkt=\" + a.getEintrittszeitpunkt() + \", abstufung=\" + a.getAbstufung() + \", gewichtung=\" + a.getGewichtung() + \", nutzenkriteriumId=\" + a.getNutzenkriteriumId() + \", nutzenattraktivitaetOperativerNutzenId=\" + a.getNutzenattraktivitaetOperativerNutzenId());\r\n                dao.deleteNaOpNuAssignmentsByNutzenkriterium(a);\r\n            }\r\n        }\r\n        // fï¿½r jeden Level einen Eintrag des jeweiligen Auswahlfelds setzen\r\n        for (int i = 1; i <= levels; i++) {\r\n            a.setLevel(i);\r\n            for (Nutzenkriterium n : nutzenkriterien) {\r\n                a.setNutzenkriteriumId(n.getNutzenkriteriumId());\r\n                String name = Constants.SELECTBOX + \"_\" + type + \"_\" + i;\r\n                // Gewichtungen werden nicht mehr pro Nutzenkriterium bestimmt ...\r\n                // Design change\r\n                if (type != Constants.GEWICHTUNG) {\r\n                    name += \"_\" + n.getNutzenkriteriumId();\r\n                }\r\n                logger.debug(\"Hole Auswahlfeld \" + name + \" vom Formular\");\r\n                String aIdStr = request.getParameter(name);\r\n                logger.debug(\"aIdStr=\" + aIdStr);\r\n                Integer aId;\r\n                // neue Zuweisung erstellen\r\n                if (aIdStr != null && (aId = new Integer(aIdStr)) != null) {\r\n                    a.setAuswahlfeldId(aId);\r\n                    logger.debug(\"Erstelle Zuweisung: auswahlfeldId=\" + aId + \", nutzenkriteriumId=\" + a.getNutzenkriteriumId() + \", nutzenattraktivitaetOperativerNutzenId=\" + a.getNutzenattraktivitaetOperativerNutzenId());\r\n                    dao.insertNaOpNuAssignment(a);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Selektiert die angewï¿½hlten Auswahlfelder.\r\n     *\r\n     * @param request                 der HttpServletRequest\r\n     * @param a                       die Daten der zu selektierenden Auswahlfelder\r\n     * @param type                    der Typ des Auswahlfelds\r\n     * @param twoDimensional          true wenn die Levels auch berï¿½cksichtigt\r\n     *                                werden sollen, sonst false\r\n     */\r\n    private void preselect(HttpServletRequest request, Auswahlfeld a, Integer type, boolean twoDimensional) {\r\n        // Selektierte Auswahlfelder der Projektattraktivitï¿½t holen\r\n        List<Auswahlfeld> afs = null;\r\n        if (type != null && (type.equals(Constants.EINTRITTSWAHRSCHEINLICHKEIT) || type.equals(Constants.EINTRITTSZEITPUNKT))) {\r\n            afs = dao.getSelectedByPaId(a);\r\n        } else // Selektierte Auswahlfelder der Nutzenattraktivitï¿½t bzw.\r\n        // des Operativen Nutzens holen\r\n        {\r\n            afs = dao.getSelectedByNaOpNuId(a);\r\n        }\r\n        // Pro Level (1-5) eine HashMap erstellen\r\n        HashMap<String, HashMap> map = new HashMap<String, HashMap>();\r\n        HashMap<Integer, Integer> lvl1 = new HashMap<Integer, Integer>();\r\n        HashMap<Integer, Integer> lvl2 = new HashMap<Integer, Integer>();\r\n        HashMap<Integer, Integer> lvl3 = new HashMap<Integer, Integer>();\r\n        HashMap<Integer, Integer> lvl4 = new HashMap<Integer, Integer>();\r\n        HashMap<Integer, Integer> lvl5 = new HashMap<Integer, Integer>();\r\n        // Durch alle selektierten Auswahlfelder gehen\r\n        Integer[] single = new Integer[6];\r\n        for (Auswahlfeld af : afs) {\r\n            Integer lvl = af.getLevel();\r\n            logger.debug(\"lvl=\" + lvl);\r\n            // Level berï¿½cksichtigen\r\n            if (twoDimensional) {\r\n                Integer nutzenkriteriumId = af.getNutzenkriteriumId();\r\n                logger.debug(\"nutzenkriteriumId=\" + nutzenkriteriumId);\r\n                Integer auswahlfeldId = af.getAuswahlfeldId();\r\n                if (lvl.equals(1)) {\r\n                    lvl1.put(nutzenkriteriumId, auswahlfeldId);\r\n                } else if (lvl.equals(2)) {\r\n                    lvl2.put(nutzenkriteriumId, auswahlfeldId);\r\n                } else if (lvl.equals(3)) {\r\n                    lvl3.put(nutzenkriteriumId, auswahlfeldId);\r\n                } else if (lvl.equals(4)) {\r\n                    lvl4.put(nutzenkriteriumId, auswahlfeldId);\r\n                } else if (lvl.equals(5)) {\r\n                    lvl5.put(nutzenkriteriumId, auswahlfeldId);\r\n                }\r\n            } else {\r\n                single[lvl] = af.getAuswahlfeldId();\r\n            }\r\n        }\r\n        // Selektierte Auswahlfelder in den Request stellen\r\n        if (twoDimensional) {\r\n            map.put(\"1\", lvl1);\r\n            map.put(\"2\", lvl2);\r\n            map.put(\"3\", lvl3);\r\n            map.put(\"4\", lvl4);\r\n            map.put(\"5\", lvl5);\r\n            logger.debug(\"Selektierte Auswahlfelder in den Request stellen\");\r\n            request.setAttribute(\"selected\", map);\r\n        } else if (type.equals(Constants.EINTRITTSWAHRSCHEINLICHKEIT)) {\r\n            request.setAttribute(\"ew\", single);\r\n        } else if (type.equals(Constants.EINTRITTSZEITPUNKT)) {\r\n            request.setAttribute(\"ez\", single);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * ï¿½berprï¿½ft, ob die Id eines Auswahlfelds im Request ist\r\n     * (update) oder nicht (neu).\r\n     *\r\n     * @param request                   der HttpServletRequest\r\n     * @param form                      das DynaActionForm\r\n     * @return                          true, wenn das angegebene Auswahlfeld\r\n     *                                  besteht, sonst false.\r\n     */\r\n    private boolean isUpdate(HttpServletRequest request, DynaActionForm form) {\r\n        Integer id = (Integer) form.get(Constants.AUSWAHLFELD_ID);\r\n        if (id == null || id == 0) {\r\n            return false;\r\n        }\r\n        return true;\r\n    }\r\n}\r\n",
		"id": "EvoSuiteBenchmark/46_nutzenportfolio/src/main/java/ch/bfh/egov/nutzenportfolio/service/auswahlfeld/AuswahlfeldDaoServiceTest3.java",
		"test_prompt": "// AuswahlfeldDaoServiceTest3.java\npackage ch.bfh.egov.nutzenportfolio.service.auswahlfeld;\n\nimport java.util.ArrayList;\nimport java.util.HashMap;\nimport java.util.List;\nimport javax.servlet.http.HttpServletRequest;\nimport javax.servlet.http.HttpSession;\nimport org.apache.commons.logging.Log;\nimport org.apache.commons.logging.LogFactory;\nimport org.apache.struts.action.ActionMessage;\nimport org.apache.struts.action.ActionMessages;\nimport org.apache.struts.action.DynaActionForm;\nimport ch.bfh.egov.nutzenportfolio.Constants;\nimport ch.bfh.egov.nutzenportfolio.persistence.auswahlfeld.AuswahlfeldDao;\nimport ch.bfh.egov.nutzenportfolio.service.common.CommonService;\nimport ch.bfh.egov.nutzenportfolio.service.customizing.CustomizingService;\nimport ch.bfh.egov.nutzenportfolio.service.nutzenkriterium.NutzenkriteriumService;\nimport ch.bfh.egov.nutzenportfolio.service.strategischeziele.StrategischeZieleService;\nimport ch.bfh.egov.nutzenportfolio.tos.Auswahlfeld;\nimport ch.bfh.egov.nutzenportfolio.tos.Customizing;\nimport ch.bfh.egov.nutzenportfolio.tos.Nutzenkriterium;\nimport ch.bfh.egov.nutzenportfolio.tos.StrategischesZiel;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link AuswahlfeldDaoService}.\n* It contains ten unit test cases for the {@link AuswahlfeldDaoService#add(HttpServletRequest, DynaActionForm, ActionMessages, ActionMessages)} method.\n*/\nclass AuswahlfeldDaoServiceTest3 {"
	},
	{
		"original_code": "// AuswahlfeldDaoService.java\n/**\r\n * Nutzenportfolio\r\n * Copyright (C) 2006 Kompetenzzentrum E-Business, Simon Bergamin\r\n *\r\n * This program is free software; you can redistribute it and/or\r\n * modify it under the terms of the GNU General Public License\r\n * as published by the Free Software Foundation; either version 2\r\n * of the License, or (at your option) any later version.\r\n *\r\n * This program is distributed in the hope that it will be useful,\r\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n * GNU General Public License for more details.\r\n *\r\n * You should have received a copy of the GNU General Public License\r\n * along with this program; if not, write to the Free Software\r\n * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\r\n */\r\npackage ch.bfh.egov.nutzenportfolio.service.auswahlfeld;\r\n\r\nimport java.util.ArrayList;\r\nimport java.util.HashMap;\r\nimport java.util.List;\r\nimport javax.servlet.http.HttpServletRequest;\r\nimport javax.servlet.http.HttpSession;\r\nimport org.apache.commons.logging.Log;\r\nimport org.apache.commons.logging.LogFactory;\r\nimport org.apache.struts.action.ActionMessage;\r\nimport org.apache.struts.action.ActionMessages;\r\nimport org.apache.struts.action.DynaActionForm;\r\nimport ch.bfh.egov.nutzenportfolio.Constants;\r\nimport ch.bfh.egov.nutzenportfolio.persistence.auswahlfeld.AuswahlfeldDao;\r\nimport ch.bfh.egov.nutzenportfolio.service.common.CommonService;\r\nimport ch.bfh.egov.nutzenportfolio.service.customizing.CustomizingService;\r\nimport ch.bfh.egov.nutzenportfolio.service.nutzenkriterium.NutzenkriteriumService;\r\nimport ch.bfh.egov.nutzenportfolio.service.strategischeziele.StrategischeZieleService;\r\nimport ch.bfh.egov.nutzenportfolio.tos.Auswahlfeld;\r\nimport ch.bfh.egov.nutzenportfolio.tos.Customizing;\r\nimport ch.bfh.egov.nutzenportfolio.tos.Nutzenkriterium;\r\nimport ch.bfh.egov.nutzenportfolio.tos.StrategischesZiel;\r\n\r\n/**\r\n * Implementierende Service-Klasse fï¿½r Auswahlfelder. Auswahlfelder\r\n * sind Eintrittswahrscheinlichkeiten, Eintrittszeitpunkte,\r\n * Abstufungen und Gewichtungen.\r\n *\r\n * @author Kompetenzzentrum E-Business, Simon Bergamin\r\n */\r\npublic class AuswahlfeldDaoService implements AuswahlfeldService {\r\n\r\n    private AuswahlfeldDao dao;\r\n\r\n    private NutzenkriteriumService nService;\r\n\r\n    private CommonService cService;\r\n\r\n    private CustomizingService customizingService;\r\n\r\n    private StrategischeZieleService szService;\r\n\r\n    private Log logger = LogFactory.getLog(this.getClass());\r\n\r\n    /**\r\n     * Konstruktor. ï¿½bergabe des DataAcessObject-Interfaces fï¿½r Auswahlfelder.\r\n     *\r\n     * @param dao                       Auswahlfeld DataAcessObject-Interface\r\n     */\r\n    public AuswahlfeldDaoService(AuswahlfeldDao dao) {\r\n        this.dao = dao;\r\n    }\r\n\r\n    /**\r\n     * @see ch.bfh.egov.nutzenportfolio.persistence.auswahlfeld.AuswahlfeldIbatisDao#getById(Auswahlfeld)\r\n     */\r\n    public Auswahlfeld getById(Auswahlfeld a) {\r\n        return dao.getById(a);\r\n    }\r\n\r\n    /**\r\n     * @see ch.bfh.egov.nutzenportfolio.persistence.auswahlfeld.AuswahlfeldIbatisDao#getByProjektId(Auswahlfeld)\r\n     */\r\n    public List<Auswahlfeld> getByProjektId(Auswahlfeld a) {\r\n        return dao.getByProjektId(a);\r\n    }\r\n\r\n    /**\r\n     * @see ch.bfh.egov.nutzenportfolio.persistence.auswahlfeld.AuswahlfeldIbatisDao#getByNaOpNu(Auswahlfeld)\r\n     */\r\n    public List<Auswahlfeld> getByNaOpNu(Auswahlfeld a) {\r\n        return dao.getByNaOpNu(a);\r\n    }\r\n\r\n    /**\r\n     * @see ch.bfh.egov.nutzenportfolio.persistence.auswahlfeld.AuswahlfeldIbatisDao#getGewichtungStatus(Integer)\r\n     */\r\n    public List<Auswahlfeld> getGewichtungStatus(Integer naOpNuId) {\r\n        return dao.getGewichtungStatus(naOpNuId);\r\n    }\r\n\r\n    /**\r\n     * @see ch.bfh.egov.nutzenportfolio.persistence.auswahlfeld.AuswahlfeldIbatisDao#getAbstufungStatus(Integer)\r\n     */\r\n    public List<Auswahlfeld> getAbstufungStatus(Integer naOpNuId) {\r\n        return dao.getAbstufungStatus(naOpNuId);\r\n    }\r\n\r\n    /**\r\n     * @see ch.bfh.egov.nutzenportfolio.persistence.auswahlfeld.AuswahlfeldIbatisDao#getAnzahlGewichtungen(Integer)\r\n     */\r\n    public List<Auswahlfeld> getAnzahlGewichtungen(Integer naOpNuId) {\r\n        return dao.getAnzahlGewichtungen(naOpNuId);\r\n    }\r\n\r\n    /**\r\n     * @see ch.bfh.egov.nutzenportfolio.persistence.auswahlfeld.AuswahlfeldIbatisDao#getAnzahlAbstufungen(Integer)\r\n     */\r\n    public List<Auswahlfeld> getAnzahlAbstufungen(Integer naOpNuId) {\r\n        return dao.getAnzahlAbstufungen(naOpNuId);\r\n    }\r\n\r\n    /**\r\n     * @see ch.bfh.egov.nutzenportfolio.persistence.auswahlfeld.AuswahlfeldIbatisDao#getSelectedByPaId(Auswahlfeld)\r\n     */\r\n    public List<Auswahlfeld> getSelectedByPaId(Auswahlfeld a) {\r\n        return dao.getSelectedByPaId(a);\r\n    }\r\n\r\n    /**\r\n     * @see ch.bfh.egov.nutzenportfolio.persistence.auswahlfeld.AuswahlfeldIbatisDao#getSelectedByNaOpNuId(Auswahlfeld)\r\n     */\r\n    public List<Auswahlfeld> getSelectedByNaOpNuId(Auswahlfeld a) {\r\n        return dao.getSelectedByNaOpNuId(a);\r\n    }\r\n\r\n    /**\r\n     * @see ch.bfh.egov.nutzenportfolio.persistence.auswahlfeld.AuswahlfeldIbatisDao#deleteGewichtungen(Auswahlfeld)\r\n     */\r\n    public void deleteGewichtungen(Auswahlfeld a) {\r\n        dao.deleteGewichtungen(a);\r\n    }\r\n\r\n    /**\r\n     * Initialisierung dieses Service-Objekts durch ï¿½bergabe anderer,\r\n     * benï¿½tigter Service-Objekte.\r\n     *\r\n     * @param nService                   Nutzenkriterium Service Objekt\r\n     * @param cService                   Common Service Objekt\r\n     * @param customizingService         Customizing Service Objekt\r\n     */\r\n    public void init(NutzenkriteriumService nService, CommonService cService, CustomizingService customizingService, StrategischeZieleService szService) {\r\n        this.nService = nService;\r\n        this.cService = cService;\r\n        this.customizingService = customizingService;\r\n        this.szService = szService;\r\n    }\r\n\r\n    /**\r\n     * Generiert Auswahlfelder und fï¿½llt diese nach Typ und\r\n     * Level ab.\r\n     *\r\n     * @param request           der HttpServletRequest\r\n     * @param path              der Pfad der momentanen Action\r\n     */\r\n    public void list(HttpServletRequest request, String path) {\r\n        logger.debug(\"Pfad: \" + path);\r\n        // Neues Auswahlfeld generieren\r\n        Auswahlfeld a = createAuswahlfeld(request, null);\r\n        // Eintrittswahrscheinlichkeiten\r\n        if (path.contains(Constants.VERWALTUNG_EINTRITTSWAHRSCHEINLICHKEITEN_ACTION)) {\r\n            logger.debug(\"Eintrittswahrscheinlichkeiten holen\");\r\n            a = setType(a, Constants.EINTRITTSWAHRSCHEINLICHKEIT);\r\n        } else // Eintrittszeitpunkte\r\n        if (path.contains(Constants.VERWALTUNG_EINTRITTSZEITPUNKTE_ACTION)) {\r\n            logger.debug(\"Eintrittszeitpunkte holen\");\r\n            a = setType(a, Constants.EINTRITTSZEITPUNKT);\r\n        } else // Abstufungen\r\n        if (path.contains(Constants.VERWALTUNG_ABSTUFUNGEN_ACTION)) {\r\n            logger.debug(\"Abstufungen holen\");\r\n            a = setType(a, Constants.ABSTUFUNG);\r\n        } else // Gewichtungen\r\n        if (path.contains(Constants.VERWALTUNG_GEWICHTUNG_ACTION)) {\r\n            logger.debug(\"Gewichtungen holen\");\r\n            a = setType(a, Constants.GEWICHTUNG);\r\n        }\r\n        // Alle Levels holen\r\n        List<Auswahlfeld> afs = new ArrayList<Auswahlfeld>();\r\n        for (int i = 1; i < 6; i++) {\r\n            a.setLevel(i);\r\n            afs.addAll(dao.getAuswahlFelder(a));\r\n        }\r\n        logger.debug(afs.size() + \" Auswahlfelder in der Liste\");\r\n        request.setAttribute(Constants.AUSWAHLFELDER, afs);\r\n    }\r\n\r\n    /**\r\n     * Fï¿½llt ein Formular mit bestehenden Daten eines Auswahlfelds ab,\r\n     * falls eine entsprechende id angegeben wurde.\r\n     *\r\n     * @param request                   der HttpServletRequest\r\n     * @param form                      das DynaActionForm\r\n     */\r\n    public void edit(HttpServletRequest request, DynaActionForm form) {\r\n        if (isUpdate(request, form)) {\r\n            Auswahlfeld af = createAuswahlfeld(request, form);\r\n            af = dao.getById(af);\r\n            form.set(Constants.NAME, af.getName());\r\n            form.set(\"level\", af.getLevel());\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Fï¿½hrt ein update eines bestenenden Auswahlfelds anhand von\r\n     * Formulardaten durch.\r\n     *\r\n     * @param request                   der HttpServletRequest\r\n     * @param form                      das DynaActionForm\r\n     */\r\n    public void update(HttpServletRequest request, DynaActionForm form) {\r\n        logger.debug(\"Update Auswahlfeld\");\r\n        if (isUpdate(request, form)) {\r\n            logger.debug(\"Update durchfï¿½hren\");\r\n            Auswahlfeld af = createAuswahlfeld(request, form);\r\n            dao.update(af);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Prï¿½ft, ob ein Auswahlfeld existiert und gibt es zurï¿½ck.\r\n     *\r\n     * @param request                   der HttpServletRequest\r\n     * @param form                      das DynaActionForm\r\n     * @return                          das Auswahlfeld\r\n     */\r\n    public Auswahlfeld getAuswahlfeld(HttpServletRequest request, DynaActionForm form) {\r\n        Auswahlfeld af = createAuswahlfeld(request, form);\r\n        return dao.getById(af);\r\n    }\r\n\r\n    /**\r\n     * Abfrage fï¿½r das Lï¿½schen von einem Auswahlfeld.\r\n     *\r\n     * @param request                   der HttpServletRequest\r\n     * @param af                        das zu lï¿½schende Auswahlfeld\r\n     * @param messages                  das ActionMessages Objekt\r\n     */\r\n    public void deleteQuestion(HttpServletRequest request, Auswahlfeld af, ActionMessages messages) {\r\n        // Verknï¿½pfungen prï¿½fen\r\n        linkedTo(request, af);\r\n        // Bestï¿½tigungsnachricht ausgeben\r\n        messages.add(ActionMessages.GLOBAL_MESSAGE, new ActionMessage(\"messages.question.delete\", af.getName()));\r\n        // Actions zum Lï¿½schen und Abbrechen definieren\r\n        String action = \"\";\r\n        if (af.getEintrittswahrscheinlichkeit()) {\r\n            action = Constants.VERWALTUNG_EINTRITTSWAHRSCHEINLICHKEITEN_ACTION + \".do\";\r\n        } else if (af.getEintrittszeitpunkt()) {\r\n            action = Constants.VERWALTUNG_EINTRITTSZEITPUNKTE_ACTION + \".do\";\r\n        } else if (af.getAbstufung()) {\r\n            action = Constants.VERWALTUNG_ABSTUFUNGEN_ACTION + \".do\";\r\n        } else if (af.getGewichtung()) {\r\n            action = Constants.VERWALTUNG_GEWICHTUNG_ACTION + \".do\";\r\n        }\r\n        request.setAttribute(Constants.ACTION, action);\r\n        request.setAttribute(Constants.DISPATCH_YES, Constants.DELETE);\r\n        request.setAttribute(Constants.DISPATCH_NO, Constants.LIST);\r\n        request.setAttribute(Constants.ID_NAME, Constants.AUSWAHLFELD_ID);\r\n        request.setAttribute(Constants.ID_VALUE, af.getAuswahlfeldId());\r\n    }\r\n\r\n    /**\r\n     * Setzt die Verknï¿½pfungen zu diesem Auswahlfeld in den Request.\r\n     * Ein Auswahlfeld kann mit Customizings verknï¿½pft sein. Diese\r\n     * Methode wird bei der Lï¿½schabfrage verwendet.\r\n     *\r\n     * @param request                   der HttpServletRequest\r\n     * @param af                        das zu lï¿½schende Auswahlfeld\r\n     */\r\n    public void linkedTo(HttpServletRequest request, Auswahlfeld af) {\r\n        HashMap<String, List> map = new HashMap<String, List>();\r\n        // Customizings suchen, die dieses Detailziel benï¿½tigen\r\n        List<Customizing> customizings = dao.getLinkedPaCustomizings(af);\r\n        customizings.addAll(dao.getLinkedNaOpNuCustomizings(af));\r\n        if (customizings.size() > 0) {\r\n            for (Customizing c : customizings) {\r\n                if (c.getStatus()) {\r\n                    request.setAttribute(\"active\", true);\r\n                    break;\r\n                }\r\n            }\r\n            map.put(\"Customizings\", customizings);\r\n        }\r\n        request.setAttribute(\"linked\", map);\r\n    }\r\n\r\n    /**\r\n     * Lï¿½scht ein Auswahlfeld. Falls es mit inaktiven Customizings\r\n     * verknï¿½ft ist, werden diese ebenfalls gelï¿½scht. Wenn aktive Customizings\r\n     * verknï¿½ft sind, wird das Auswahlfeld nicht gelï¿½scht.\r\n     *\r\n     * @param request                   der HttpServletRequest\r\n     * @param af                        das zu lï¿½schende Auswahlfeld\r\n     */\r\n    public void delete(HttpServletRequest request, Auswahlfeld af) {\r\n        // Verknï¿½pfungen prï¿½fen\r\n        linkedTo(request, af);\r\n        Boolean active = (Boolean) request.getAttribute(\"active\");\r\n        // Aktives Customizing verknï¿½ft. Dies sollte nicht passieren ausser bei\r\n        // einem direkten URL-Aufruf ...\r\n        if (active != null && active) {\r\n            logger.debug(\"Aktives Customizing verknï¿½pft, Auswahlfeld wird nicht gelï¿½scht\");\r\n            return;\r\n        }\r\n        // Customizings lï¿½schen\r\n        List<Customizing> customizings = dao.getLinkedPaCustomizings(af);\r\n        customizings.addAll(dao.getLinkedNaOpNuCustomizings(af));\r\n        for (Customizing c : customizings) {\r\n            logger.debug(\"Lï¿½sche Customizing \" + c.getCustomizingId());\r\n            customizingService.cascadeDelete(request, c);\r\n        }\r\n        // Lï¿½schen des Auswahlfelds\r\n        dao.delete(af);\r\n    }\r\n\r\n    /**\r\n     * Lï¿½scht alle Verknï¿½pfungen von Auswahlfeldern zu einer Projektattraktivitï¿½t.\r\n     *\r\n     * @param paId                      die Id der Projektattraktivitï¿½t\r\n     */\r\n    public void deletePaAssignmentsById(Integer paId) {\r\n        Auswahlfeld af = new Auswahlfeld();\r\n        af.setProjektattraktivitaetId(paId);\r\n        af = setType(af, Constants.EINTRITTSWAHRSCHEINLICHKEIT);\r\n        dao.deleteAssignments(af);\r\n        af = setType(af, Constants.EINTRITTSZEITPUNKT);\r\n        dao.deleteAssignments(af);\r\n    }\r\n\r\n    /**\r\n     * Lï¿½scht alle Verknï¿½pfungen von Auswahlfeldern zu einer\r\n     * Nutzenattraktivitï¿½t oder einem Operativen Nutzen.\r\n     *\r\n     * @param naOpNuId                  die Id der Nutzenattraktivitï¿½t\r\n     *                                  oder des Operativen Nutzens\r\n     */\r\n    public void deleteNaOpNuAssignmentsById(Integer naOpNuId) {\r\n        Auswahlfeld af = new Auswahlfeld();\r\n        af.setNutzenattraktivitaetOperativerNutzenId(naOpNuId);\r\n        af = setType(af, Constants.ABSTUFUNG);\r\n        dao.deleteNaOpNuAssignments(af);\r\n        af = setType(af, Constants.GEWICHTUNG);\r\n        dao.deleteNaOpNuAssignments(af);\r\n    }\r\n\r\n    /**\r\n     * Generiert Auswahlfelder und fï¿½llt diese nach Typ und\r\n     * Level ab.\r\n     *\r\n     * @param request           der HttpServletRequest\r\n     * @param path              der Pfad der momentanen Action\r\n     * @param form              das DynaActionForm\r\n     */\r\n    public void populate(HttpServletRequest request, String path, DynaActionForm form) {\r\n        // Wir wollen kein [Ljava.lang.String;@xxxxxxx im Definition Feld ...\r\n        try {\r\n            form.set(\"name\", null);\r\n        } catch (IllegalArgumentException ex) {\r\n        }\r\n        // Benï¿½tigte Id's\r\n        HttpSession session = request.getSession();\r\n        Integer customizingId = (Integer) session.getAttribute(Constants.CUSTOMIZING_ID);\r\n        // Neues Auswahlfeld generieren\r\n        Auswahlfeld a = createAuswahlfeld(request, null);\r\n        // Realisierbarkeit\r\n        logger.debug(\"Pfad: \" + path);\r\n        if (path.contains(Constants.REALISIERBARKEIT_ACTION)) {\r\n            Integer paId = cService.getProjektattraktivitaetIdByCustomizingId(customizingId);\r\n            a.setProjektattraktivitaetId(paId);\r\n            // Eintrittswahrscheinlichkeit abfï¿½llen\r\n            a = setType(a, Constants.EINTRITTSWAHRSCHEINLICHKEIT);\r\n            put(request, a, Constants.EINTRITTSWAHRSCHEINLICHKEIT, 3);\r\n            // Selektiere Auswahlfelder\r\n            preselect(request, a, Constants.EINTRITTSWAHRSCHEINLICHKEIT, false);\r\n            // Eintrittszeitpunkt abfï¿½llen\r\n            a = setType(a, Constants.EINTRITTSZEITPUNKT);\r\n            put(request, a, Constants.EINTRITTSZEITPUNKT, 3);\r\n            // Selektiere Auswahlfelder\r\n            preselect(request, a, Constants.EINTRITTSZEITPUNKT, false);\r\n            // Typen in den Request stellen fï¿½r das Hinzufï¿½gen von neuen Begriffen\r\n            request.setAttribute(Constants.EINTRITTSWAHRSCHEINLICHKEITEN, Constants.EINTRITTSWAHRSCHEINLICHKEIT);\r\n            request.setAttribute(Constants.EINTRITTSZEITPUNKTE, Constants.EINTRITTSZEITPUNKT);\r\n            // Anzahl Strategische Ziele holen\r\n            Integer mandantId = (Integer) request.getSession().getAttribute(Constants.MANDANT_ID);\r\n            StrategischesZiel sz = new StrategischesZiel();\r\n            sz.setCustomizingId(customizingId);\r\n            sz.setMandantId(mandantId);\r\n            List<StrategischesZiel> szs = szService.getAssignments(sz);\r\n            request.setAttribute(\"totalStrategischeZiele\", szs.size());\r\n        } else // Stufenbeschriebe abfï¿½llen\r\n        if (path.contains(Constants.STUFENBESCHRIEBE_ACTION) || path.contains(Constants.GEWICHTUNG_ACTION)) {\r\n            // Abstufungen holen\r\n            Integer levels = (Integer) request.getSession().getAttribute(Constants.ABSTUFUNGEN);\r\n            List<Integer> list = new ArrayList<Integer>();\r\n            // Niedrigste ist immer gewï¿½hlt (1)\r\n            list.add(new Integer(1));\r\n            // Wenn 3 Abstufungen: Niedrigste, mittlere  und\r\n            // hï¿½chste auswï¿½hlen (1 + 3 + 5)\r\n            if (levels == 3) {\r\n                list.add(new Integer(3));\r\n            }\r\n            // Wenn 4 Abstufungen: Niedrigste, mittlere, zweithï¿½chste und\r\n            // Hï¿½chste auswï¿½hlen (1 + 3 + 4 + 5)\r\n            if (levels == 4) {\r\n                list.add(new Integer(3));\r\n                list.add(new Integer(4));\r\n            }\r\n            // Alle 5 Abstufungen (1 + 2 +3 + 4 + 5)\r\n            if (levels == 5) {\r\n                list.add(new Integer(2));\r\n                list.add(new Integer(3));\r\n                list.add(new Integer(4));\r\n            }\r\n            // Hï¿½chste ist immer gewï¿½hlt (5)\r\n            list.add(new Integer(5));\r\n            request.setAttribute(Constants.STUFEN, list);\r\n            // Auswahlfelder abfï¿½llen\r\n            if (path.contains(Constants.STUFENBESCHRIEBE_ACTION)) {\r\n                a = setType(a, Constants.ABSTUFUNG);\r\n                put(request, a, Constants.ABSTUFUNG, 5);\r\n                // Typ in den Request stellen fï¿½r das Hinzufï¿½gen von neuen Begriffen\r\n                request.setAttribute(Constants.ABSTUFUNGEN, Constants.ABSTUFUNG);\r\n            } else {\r\n                a = setType(a, Constants.GEWICHTUNG);\r\n                put(request, a, Constants.GEWICHTUNG, 5);\r\n                // Typ in den Request stellen fï¿½r das Hinzufï¿½gen von neuen Begriffen\r\n                request.setAttribute(Constants.GEWICHTUNGEN, Constants.GEWICHTUNG);\r\n            }\r\n            // Selektiere Auswahlfelder\r\n            Integer naOpNuId = cService.getNaOpNuId(request, customizingId);\r\n            a.setNutzenattraktivitaetOperativerNutzenId(naOpNuId);\r\n            preselect(request, a, null, true);\r\n            // Operativer Nutzen -> Projektbetroffene\r\n            if (cService.isOperativerNutzen(request)) {\r\n                request.setAttribute(Constants.PROJEKTBETROFFENE, true);\r\n            }\r\n            // Nutzenkriterien abfï¿½llen\r\n            nService.populate(request);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Weist die angewï¿½hlten Eintrï¿½ge der Auswahlfelder der aktuellen\r\n     * Projektattraktivitaet zu.\r\n     *\r\n     * @param request           der HttpServletRequest\r\n     * @param form              das Formular der Action\r\n     * @param path              der Pfad der momentanen Action\r\n     */\r\n    public void setAuswahlfelder(HttpServletRequest request, DynaActionForm form, String path) {\r\n        // Benï¿½tigte ids holen\r\n        HttpSession session = request.getSession();\r\n        Integer customizingId = (Integer) session.getAttribute(Constants.CUSTOMIZING_ID);\r\n        Integer mandantId = (Integer) session.getAttribute(Constants.MANDANT_ID);\r\n        // Neues Auswahlfeld generieren\r\n        Auswahlfeld a = createAuswahlfeld(request, null);\r\n        // Realisierbarkeit\r\n        logger.debug(\"Pfad: \" + path);\r\n        if (path.contains(Constants.REALISIERBARKEIT_ACTION)) {\r\n            Integer pId = cService.getProjektattraktivitaetIdByCustomizingId(customizingId);\r\n            a.setProjektattraktivitaetId(pId);\r\n            // Eintrittswahrscheinlichkeiten updaten\r\n            a = setType(a, Constants.EINTRITTSWAHRSCHEINLICHKEIT);\r\n            dao.deleteAssignments(a);\r\n            insertAssignments(a, Constants.EINTRITTSWAHRSCHEINLICHKEIT, form, 3);\r\n            // Eintrittszeitpunkt abfï¿½llen\r\n            a = setType(a, Constants.EINTRITTSZEITPUNKT);\r\n            dao.deleteAssignments(a);\r\n            insertAssignments(a, Constants.EINTRITTSZEITPUNKT, form, 3);\r\n            setRealisierbarkeitStatus(request, pId);\r\n        } else // Stufenbeschriebe abfï¿½llen\r\n        if (path.contains(Constants.STUFENBESCHRIEBE_ACTION)) {\r\n            Integer naOpNuId = cService.getNaOpNuId(request, customizingId);\r\n            logger.debug(\"naOpNuId=\" + naOpNuId);\r\n            a.setNutzenattraktivitaetOperativerNutzenId(naOpNuId);\r\n            a = setType(a, Constants.ABSTUFUNG);\r\n            insertNaOpNuAssignment(a, Constants.ABSTUFUNG, request, form, 5);\r\n            logger.debug(\"stufenbeschriebe\");\r\n            boolean isNa = !cService.isOperativerNutzen(request);\r\n            setStufenStatus(request, naOpNuId, isNa);\r\n        } else // Gewichtung abfï¿½llen\r\n        if (path.contains(Constants.GEWICHTUNG_ACTION)) {\r\n            // allfï¿½llige direkte Gewichtung lï¿½schen\r\n            logger.debug(\"lï¿½sche allfï¿½llige direkte Gewichtungen.\");\r\n            Integer naOpNuId = cService.getNaOpNuId(request, customizingId);\r\n            nService.unsetAssignmentGewichtung(naOpNuId);\r\n            a.setNutzenattraktivitaetOperativerNutzenId(naOpNuId);\r\n            a = setType(a, Constants.GEWICHTUNG);\r\n            insertNaOpNuAssignment(a, Constants.GEWICHTUNG, request, form, 5);\r\n            logger.debug(\"gewichtung\");\r\n            boolean isNa = !cService.isOperativerNutzen(request);\r\n            Nutzenkriterium n = new Nutzenkriterium();\r\n            n.setMandantId(mandantId);\r\n            n.setNutzenattraktivitaetOperativerNutzenId(naOpNuId);\r\n            List<Nutzenkriterium> kriterien = nService.getAssignments(n);\r\n            setGewichtungStatus(request, kriterien, naOpNuId, isNa);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @see ch.bfh.egov.nutzenportfolio.service.nutzenkriterium.NutzenkriteriumDaoService#next(HttpServletRequest)\r\n     */\r\n    public boolean next(HttpServletRequest request) {\r\n        return nService.next(request);\r\n    }\r\n\r\n    /**\r\n     * Generiert ein Auswahlfeld Objekt mit dem aktuellen Mandanten.\r\n     *\r\n     * @param request               der HttpServletRequest\r\n     * @param form                  das DynaActionForm\r\n     * @return                      ein Auswahlfeld mit gesetzem Mandant\r\n     */\r\n    public Auswahlfeld createAuswahlfeld(HttpServletRequest request, DynaActionForm form) {\r\n        Auswahlfeld a = new Auswahlfeld();\r\n        a.setMandantId((Integer) request.getSession().getAttribute(Constants.MANDANT_ID));\r\n        if (form != null) {\r\n            Integer id = (Integer) form.get(Constants.AUSWAHLFELD_ID);\r\n            String name = (String) form.get(Constants.NAME);\r\n            Integer level = (Integer) form.get(\"level\");\r\n            a.setAuswahlfeldId(id);\r\n            a.setName(name);\r\n            a.setLevel(level);\r\n        }\r\n        return a;\r\n    }\r\n\r\n    /**\r\n     * Setzt den Typ eines Auswahlfelds anhand von Konstanten.\r\n     *\r\n     * @param a                   das Auswahlfeld\r\n     * @param type                der zu setzende Typ des Auswahlfelds\r\n     * @return                    das Auswahl-Feld mit dem gesetzten Typ\r\n     */\r\n    public Auswahlfeld setType(Auswahlfeld a, int type) {\r\n        switch(type) {\r\n            case Constants.EINTRITTSWAHRSCHEINLICHKEIT:\r\n                a.setEintrittswahrscheinlichkeit(true);\r\n                a.setEintrittszeitpunkt(false);\r\n                a.setAbstufung(false);\r\n                a.setGewichtung(false);\r\n                break;\r\n            case Constants.EINTRITTSZEITPUNKT:\r\n                a.setEintrittswahrscheinlichkeit(false);\r\n                a.setEintrittszeitpunkt(true);\r\n                a.setAbstufung(false);\r\n                a.setGewichtung(false);\r\n                break;\r\n            case Constants.ABSTUFUNG:\r\n                a.setEintrittswahrscheinlichkeit(false);\r\n                a.setEintrittszeitpunkt(false);\r\n                a.setAbstufung(true);\r\n                a.setGewichtung(false);\r\n                break;\r\n            case Constants.GEWICHTUNG:\r\n                a.setEintrittswahrscheinlichkeit(false);\r\n                a.setEintrittszeitpunkt(false);\r\n                a.setAbstufung(false);\r\n                a.setGewichtung(true);\r\n                break;\r\n        }\r\n        return a;\r\n    }\r\n\r\n    /**\r\n     * @see ch.bfh.egov.nutzenportfolio.service.common.CommonDaoService#isOperativerNutzen(HttpServletRequest)\r\n     */\r\n    public boolean isOperativerNutzen(HttpServletRequest request) {\r\n        return cService.isOperativerNutzen(request);\r\n    }\r\n\r\n    /**\r\n     * Speichert ein neues Auswahlfeld und fï¿½gt es dem aktuellen\r\n     * Customizing zu.\r\n     *\r\n     * @param request                   der HttpServletRequest\r\n     * @param form                      das DynaActionForm mit Daten des Auswahlfelds\r\n     * @param errors                    ActionMessages Objekt zur Ausgabe von\r\n     *                                  Feld-bezogenen Fehlermeldungen\r\n     * @param messages                  ActionMessages Objekt zur Ausgabe von\r\n     *                                  globalen Fehlermeldungen\r\n     * @return                          true bei Erfolg, sonst false\r\n     */\r\n    public boolean add(HttpServletRequest request, DynaActionForm form, ActionMessages errors, ActionMessages messages) {\r\n        Integer mandantId = (Integer) request.getSession().getAttribute(Constants.MANDANT_ID);\r\n        // Formulardaten holen\r\n        String[] names = (String[]) form.get(\"name\");\r\n        Integer[] types = (Integer[]) form.get(\"type\");\r\n        Integer[] lvls = (Integer[]) form.get(\"lvl\");\r\n        String name = null;\r\n        Integer pos = null;\r\n        for (int i = 0; i < names.length; i++) {\r\n            logger.debug(\"names[\" + i + \"]=\" + names[i]);\r\n            if (names[i] != null && !names[i].equals(\"\")) {\r\n                name = names[i];\r\n                pos = i;\r\n            }\r\n        }\r\n        for (int i = 0; i < types.length; i++) {\r\n            logger.debug(\"types[\" + i + \"]=\" + types[i]);\r\n        }\r\n        for (int i = 0; i < lvls.length; i++) {\r\n            logger.debug(\"lvls[\" + i + \"]=\" + lvls[i]);\r\n        }\r\n        // Formulardaten ï¿½berprï¿½fen\r\n        if (name == null) {\r\n            logger.debug(\"Name nicht vorhanden.\");\r\n            errors.add(\"name\", new ActionMessage(\"errors.required\", \"Name\"));\r\n            return false;\r\n        }\r\n        Integer type = types[pos];\r\n        Integer lvl = lvls[pos];\r\n        Auswahlfeld af = new Auswahlfeld();\r\n        af.setMandantId(mandantId);\r\n        af.setName(name);\r\n        af.setLevel(lvl);\r\n        setType(af, type);\r\n        // Auf duplikate prï¿½fen\r\n        Auswahlfeld a = dao.getByName(af);\r\n        Boolean match = false;\r\n        if (a != null) {\r\n            if (a.getAbstufung() && type == Constants.ABSTUFUNG) {\r\n                match = true;\r\n            }\r\n            if (a.getGewichtung() && type == Constants.GEWICHTUNG) {\r\n                match = true;\r\n            }\r\n            if (a.getEintrittswahrscheinlichkeit() && type == Constants.EINTRITTSWAHRSCHEINLICHKEIT) {\r\n                match = true;\r\n            }\r\n            if (a.getEintrittszeitpunkt() && type == Constants.EINTRITTSZEITPUNKT) {\r\n                match = true;\r\n            }\r\n        }\r\n        if (a != null && match) {\r\n            logger.debug(name + \" ist ein Duplikat\");\r\n            messages.add(ActionMessages.GLOBAL_MESSAGE, new ActionMessage(\"errors.duplicate\", \"Eintrag\"));\r\n            return false;\r\n        }\r\n        // Auswahlfeld einfï¿½gen\r\n        dao.insert(af);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Kopiert alle zugewiesenen Auswahlfelder eines Customizings\r\n     * in ein neues.\r\n     *\r\n     * @param paId                          die Id der aktuellen Projektattraktivitï¿½t\r\n     * @param newPaId                       die Id der neuen Projektattraktivitï¿½t\r\n     * @param naOpNuId                      die Id der aktuellen Nutzenattraktivitï¿½t\r\n     *                                      bzw. des aktuellen Operativen Nutzens\r\n     * @param newNaOpNuId                   die Id der neuen Nutzenattraktivitï¿½t\r\n     *                                      bzw. des neuen Operativen Nutzens\r\n     * @param type                          der Typ des Auswahlfelds\r\n     */\r\n    public void copy(Integer paId, Integer newPaId, Integer naOpNuId, Integer newNaOpNuId, Integer type) {\r\n        Auswahlfeld a = new Auswahlfeld();\r\n        // Typ setzen\r\n        this.setType(a, type);\r\n        // Projektattraktivitï¿½t\r\n        if (paId != null) {\r\n            a.setProjektattraktivitaetId(paId);\r\n            List<Auswahlfeld> afs = dao.getSelectedByPaId(a);\r\n            for (Auswahlfeld af : afs) {\r\n                af.setProjektattraktivitaetId(newPaId);\r\n                dao.insertAssignment(af);\r\n            }\r\n        } else // Nutzenattraktivitï¿½t oder Operativer Nutzen\r\n        {\r\n            a.setNutzenattraktivitaetOperativerNutzenId(naOpNuId);\r\n            List<Auswahlfeld> afs = dao.getSelectedByNaOpNuId(a);\r\n            for (Auswahlfeld af : afs) {\r\n                af.setNutzenattraktivitaetOperativerNutzenId(newNaOpNuId);\r\n                dao.insertNaOpNuAssignment(af);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Setzt den Navigations-Status von den Auswahlfeldern der\r\n     * Realisierbarkeit eines Customizings.\r\n     *\r\n     * @param request                       HttpServletRequest\r\n     * @param paId                          die Id der Projektattraktivitï¿½t\r\n     * @return                              true fï¿½r Status grï¿½n, sonst false\r\n     */\r\n    public boolean setRealisierbarkeitStatus(HttpServletRequest request, Integer paId) {\r\n        // Zugewiesene Auswahlfelder holen\r\n        List<Auswahlfeld> afs = dao.getRealisierbarkeitStatus(paId);\r\n        HttpSession session = request.getSession();\r\n        // Mindestens ein Auswahlfeld muss angewï¿½hlt sein\r\n        if (afs != null && afs.size() > 0) {\r\n            // Status grï¿½n, Status-Flag in die Session setzen\r\n            session.setAttribute(Constants.REALISIERBARKEIT, true);\r\n            return true;\r\n        } else {\r\n            // Status rot, eventuell vorhandenes Flag aus der Session lï¿½schen\r\n            session.removeAttribute(Constants.REALISIERBARKEIT);\r\n        }\r\n        return false;\r\n    }\r\n\r\n    /**\r\n     * Setzt den Navigations-Status von den Auswahlfeldern\r\n     * der Abstufungen eines Customizings.\r\n     *\r\n     * @param request                       HttpServletRequest\r\n     * @param naOpNuId                      die Id der Nutzenattraktivitï¿½t\r\n     *                                      bzw. des Operativen Nutzens\r\n     * @param isNa                          true fï¿½r Nutzenattraktivitï¿½t, sonst false\r\n     * @return                              true fï¿½r Status grï¿½n, sonst false\r\n     */\r\n    public boolean setStufenStatus(HttpServletRequest request, Integer naOpNuId, boolean isNa) {\r\n        // Zugewiesene Nutzenkriterien holen\r\n        HttpSession session = request.getSession();\r\n        Integer mandantId = (Integer) session.getAttribute(Constants.MANDANT_ID);\r\n        Nutzenkriterium n = new Nutzenkriterium();\r\n        n.setMandantId(mandantId);\r\n        n.setNutzenattraktivitaetOperativerNutzenId(naOpNuId);\r\n        List<Nutzenkriterium> kriterien = nService.getAssignments(n);\r\n        // Zugewiesene Auswahlfelder holen\r\n        List<Auswahlfeld> abstufungen = dao.getAbstufungStatus(naOpNuId);\r\n        if (kriterien != null && abstufungen != null) {\r\n            logger.debug(kriterien.size() + \" Nutzenkriterien in der Liste\");\r\n            logger.debug(abstufungen.size() + \" Abstufungen in der Liste\");\r\n        }\r\n        // Mindestens ein Auswahlfeld pro Nutzenkriterium muss angewï¿½hlt sein\r\n        if (abstufungen != null && kriterien != null && abstufungen.size() > 0 && kriterien.size() > 0 && kriterien.size() <= abstufungen.size()) {\r\n            // Nutzenattraktivitï¿½t\r\n            if (isNa) {\r\n                session.setAttribute(Constants.ABSTUFUNGEN_NA, true);\r\n            } else // Operativer Nutzen\r\n            {\r\n                session.setAttribute(Constants.ABSTUFUNGEN_OP_NU, true);\r\n            }\r\n            return true;\r\n        } else // Status rot, eventuell vorhandenes Flag aus der Session lï¿½schen\r\n        {\r\n            // Nutzenattraktivitï¿½t\r\n            if (isNa) {\r\n                session.removeAttribute(Constants.ABSTUFUNGEN_NA);\r\n            } else // Operativer Nutzen\r\n            {\r\n                session.removeAttribute(Constants.ABSTUFUNGEN_OP_NU);\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n\r\n    /**\r\n     * Setzt den Navigations-Status von den Auswahlfeldern\r\n     * der Gewichtung eines Customizings.\r\n     *\r\n     * @param request                       HttpServletRequest\r\n     * @param kriterien                     Liste aller zugewiesenen Kriterien\r\n     * @param naOpNuId                      die Id der Nutzenattraktivitï¿½t\r\n     *                                      bzw. des Operativen Nutzens\r\n     * @param isNa                           true fï¿½r Nutzenattraktivitï¿½t, sonst false\r\n     * @return                              true fï¿½r Status grï¿½n, sonst false\r\n     */\r\n    public boolean setGewichtungStatus(HttpServletRequest request, List<Nutzenkriterium> kriterien, Integer naOpNuId, boolean isNa) {\r\n        HttpSession session = request.getSession();\r\n        // Gewichtung durch Fragebogen?\r\n        List<Auswahlfeld> gewichtungen = dao.getGewichtungStatus(naOpNuId);\r\n        if (gewichtungen != null && gewichtungen.size() > 0) {\r\n            logger.debug(\"gewichtungen.size()=\" + gewichtungen.size() + \" bei naOpNuId=\" + naOpNuId);\r\n            if (isNa) {\r\n                logger.debug(\"GEWICHTUNGEN_NA=true\");\r\n                session.setAttribute(Constants.GEWICHTUNGEN_NA, true);\r\n            } else {\r\n                logger.debug(\"GEWICHTUNGEN_OP_NU=true\");\r\n                session.setAttribute(Constants.GEWICHTUNGEN_OP_NU, true);\r\n            }\r\n            return true;\r\n        } else // Direkte Gewichtung?\r\n        if (kriterien != null) {\r\n            logger.debug(\"direkte Gewichtung bei naOpNuId=\" + naOpNuId);\r\n            for (Nutzenkriterium k : kriterien) {\r\n                logger.debug(\"nutzenkriteriumId=\" + k.getNutzenkriteriumId());\r\n                logger.debug(\"gewichtung=\" + k.getGewichtung());\r\n                if (k.getGewichtung() == null) {\r\n                    logger.debug(\"direkte Gewichtung null\");\r\n                    return false;\r\n                }\r\n            }\r\n            if (isNa) {\r\n                logger.debug(\"GEWICHTUNGEN_NA=true\");\r\n                session.setAttribute(Constants.GEWICHTUNGEN_NA, true);\r\n            } else {\r\n                logger.debug(\"GEWICHTUNGEN_OP_NU=true\");\r\n                session.setAttribute(Constants.GEWICHTUNGEN_OP_NU, true);\r\n            }\r\n            return true;\r\n        } else {\r\n            logger.debug(\"Gewichtungsstatus=false\");\r\n            return false;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * ï¿½berprï¿½ft, ob ein Customizing komplett ist.\r\n     *\r\n     * @param request                   der HttpServletRequest\r\n     * @return                          true bei komplettem Customizing, sonst false\r\n     */\r\n    public boolean customizingComplete(HttpServletRequest request) {\r\n        return customizingService.complete(request);\r\n    }\r\n\r\n    /**\r\n     * Setzt fï¿½r jeden gegebenen Level ein Auswahlfeld in den Request.\r\n     *\r\n     * @param request           der HttpServletRequest\r\n     * @param a                 das Auswahlfeld\r\n     * @param type              der Typ des Auswahlfelds\r\n     * @param levels            die zu setzenden levels\r\n     */\r\n    private void put(HttpServletRequest request, Auswahlfeld a, int type, int levels) {\r\n        // setze fï¿½r jeden Level ein Auswahlfeld\r\n        for (int i = 1; i <= levels; i++) {\r\n            a.setLevel(i);\r\n            // Inhalte der Auswahlfelder holen\r\n            List<Auswahlfeld> list = dao.getAuswahlFelder(a);\r\n            // Auswahl-Felder in den request setzen.\r\n            String name = Constants.SELECTBOX + \"_\" + type + \"_\" + i;\r\n            logger.debug(\"Setze Auswahlfeld \" + name + \" in den request\");\r\n            logger.debug(\"Inhalt des Auswahlfelds: \" + list.size() + \" Elemente\");\r\n            request.setAttribute(name, list);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Speichert pro Auswahlfeld und Level einen Eintrag fï¿½r die\r\n     * aktuelle Projektattraktivitaet\r\n     *\r\n     * @param a                   das zu speicherende Auswahlfeld\r\n     * @param levels              die zu speichernden levels\r\n     */\r\n    private void insertAssignments(Auswahlfeld a, int type, DynaActionForm form, int levels) {\r\n        // fï¿½r jeden Level einen Eintrag des jeweiligen Auswahlfelds setzen\r\n        for (int i = 1; i <= levels; i++) {\r\n            String name = Constants.SELECTBOX + \"_\" + type + \"_\" + i;\r\n            logger.debug(\"Hole Auswahlfeld \" + name + \" vom Formular\");\r\n            Integer aId = (Integer) form.get(name);\r\n            if (aId != null) {\r\n                logger.debug(\"Gewï¿½hlter Wert: \" + aId);\r\n                a.setAuswahlfeldId(aId);\r\n                dao.insertAssignment(a);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Speichert pro Auswahlfeld und Level einen Eintrag fï¿½r die\r\n     * aktuelle Nutzenattraktivitï¿½t bzw. den Operativen Nutzen\r\n     *\r\n     * @param a                   das zu speicherende Auswahlfeld\r\n     * @param levels              die zu speichernden levels\r\n     */\r\n    private void insertNaOpNuAssignment(Auswahlfeld a, int type, HttpServletRequest request, DynaActionForm form, int levels) {\r\n        // Nutzenkriterien holen\r\n        Nutzenkriterium kriterium = new Nutzenkriterium();\r\n        kriterium.setNutzenattraktivitaetOperativerNutzenId(a.getNutzenattraktivitaetOperativerNutzenId());\r\n        kriterium.setMandantId(a.getMandantId());\r\n        List<Nutzenkriterium> nutzenkriterien = nService.getAssignments(kriterium);\r\n        // alte Zuweisungen lï¿½schen\r\n        Integer kategorieId = (Integer) form.get(Constants.KATEGORIE_ID);\r\n        for (Nutzenkriterium n : nutzenkriterien) {\r\n            logger.debug(\"kategorie: \" + n.getKategorieId() + \", \" + kategorieId);\r\n            if (kategorieId.equals(n.getKategorieId()) || type == Constants.GEWICHTUNG) {\r\n                a.setNutzenkriteriumId(n.getNutzenkriteriumId());\r\n                logger.debug(\"Lï¿½sche Zuweisungen: \" + \" eintrittswahrscheinlichkeit=\" + a.getEintrittswahrscheinlichkeit() + \", eintrittszeitpunkt=\" + a.getEintrittszeitpunkt() + \", abstufung=\" + a.getAbstufung() + \", gewichtung=\" + a.getGewichtung() + \", nutzenkriteriumId=\" + a.getNutzenkriteriumId() + \", nutzenattraktivitaetOperativerNutzenId=\" + a.getNutzenattraktivitaetOperativerNutzenId());\r\n                dao.deleteNaOpNuAssignmentsByNutzenkriterium(a);\r\n            }\r\n        }\r\n        // fï¿½r jeden Level einen Eintrag des jeweiligen Auswahlfelds setzen\r\n        for (int i = 1; i <= levels; i++) {\r\n            a.setLevel(i);\r\n            for (Nutzenkriterium n : nutzenkriterien) {\r\n                a.setNutzenkriteriumId(n.getNutzenkriteriumId());\r\n                String name = Constants.SELECTBOX + \"_\" + type + \"_\" + i;\r\n                // Gewichtungen werden nicht mehr pro Nutzenkriterium bestimmt ...\r\n                // Design change\r\n                if (type != Constants.GEWICHTUNG) {\r\n                    name += \"_\" + n.getNutzenkriteriumId();\r\n                }\r\n                logger.debug(\"Hole Auswahlfeld \" + name + \" vom Formular\");\r\n                String aIdStr = request.getParameter(name);\r\n                logger.debug(\"aIdStr=\" + aIdStr);\r\n                Integer aId;\r\n                // neue Zuweisung erstellen\r\n                if (aIdStr != null && (aId = new Integer(aIdStr)) != null) {\r\n                    a.setAuswahlfeldId(aId);\r\n                    logger.debug(\"Erstelle Zuweisung: auswahlfeldId=\" + aId + \", nutzenkriteriumId=\" + a.getNutzenkriteriumId() + \", nutzenattraktivitaetOperativerNutzenId=\" + a.getNutzenattraktivitaetOperativerNutzenId());\r\n                    dao.insertNaOpNuAssignment(a);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Selektiert die angewï¿½hlten Auswahlfelder.\r\n     *\r\n     * @param request                 der HttpServletRequest\r\n     * @param a                       die Daten der zu selektierenden Auswahlfelder\r\n     * @param type                    der Typ des Auswahlfelds\r\n     * @param twoDimensional          true wenn die Levels auch berï¿½cksichtigt\r\n     *                                werden sollen, sonst false\r\n     */\r\n    private void preselect(HttpServletRequest request, Auswahlfeld a, Integer type, boolean twoDimensional) {\r\n        // Selektierte Auswahlfelder der Projektattraktivitï¿½t holen\r\n        List<Auswahlfeld> afs = null;\r\n        if (type != null && (type.equals(Constants.EINTRITTSWAHRSCHEINLICHKEIT) || type.equals(Constants.EINTRITTSZEITPUNKT))) {\r\n            afs = dao.getSelectedByPaId(a);\r\n        } else // Selektierte Auswahlfelder der Nutzenattraktivitï¿½t bzw.\r\n        // des Operativen Nutzens holen\r\n        {\r\n            afs = dao.getSelectedByNaOpNuId(a);\r\n        }\r\n        // Pro Level (1-5) eine HashMap erstellen\r\n        HashMap<String, HashMap> map = new HashMap<String, HashMap>();\r\n        HashMap<Integer, Integer> lvl1 = new HashMap<Integer, Integer>();\r\n        HashMap<Integer, Integer> lvl2 = new HashMap<Integer, Integer>();\r\n        HashMap<Integer, Integer> lvl3 = new HashMap<Integer, Integer>();\r\n        HashMap<Integer, Integer> lvl4 = new HashMap<Integer, Integer>();\r\n        HashMap<Integer, Integer> lvl5 = new HashMap<Integer, Integer>();\r\n        // Durch alle selektierten Auswahlfelder gehen\r\n        Integer[] single = new Integer[6];\r\n        for (Auswahlfeld af : afs) {\r\n            Integer lvl = af.getLevel();\r\n            logger.debug(\"lvl=\" + lvl);\r\n            // Level berï¿½cksichtigen\r\n            if (twoDimensional) {\r\n                Integer nutzenkriteriumId = af.getNutzenkriteriumId();\r\n                logger.debug(\"nutzenkriteriumId=\" + nutzenkriteriumId);\r\n                Integer auswahlfeldId = af.getAuswahlfeldId();\r\n                if (lvl.equals(1)) {\r\n                    lvl1.put(nutzenkriteriumId, auswahlfeldId);\r\n                } else if (lvl.equals(2)) {\r\n                    lvl2.put(nutzenkriteriumId, auswahlfeldId);\r\n                } else if (lvl.equals(3)) {\r\n                    lvl3.put(nutzenkriteriumId, auswahlfeldId);\r\n                } else if (lvl.equals(4)) {\r\n                    lvl4.put(nutzenkriteriumId, auswahlfeldId);\r\n                } else if (lvl.equals(5)) {\r\n                    lvl5.put(nutzenkriteriumId, auswahlfeldId);\r\n                }\r\n            } else {\r\n                single[lvl] = af.getAuswahlfeldId();\r\n            }\r\n        }\r\n        // Selektierte Auswahlfelder in den Request stellen\r\n        if (twoDimensional) {\r\n            map.put(\"1\", lvl1);\r\n            map.put(\"2\", lvl2);\r\n            map.put(\"3\", lvl3);\r\n            map.put(\"4\", lvl4);\r\n            map.put(\"5\", lvl5);\r\n            logger.debug(\"Selektierte Auswahlfelder in den Request stellen\");\r\n            request.setAttribute(\"selected\", map);\r\n        } else if (type.equals(Constants.EINTRITTSWAHRSCHEINLICHKEIT)) {\r\n            request.setAttribute(\"ew\", single);\r\n        } else if (type.equals(Constants.EINTRITTSZEITPUNKT)) {\r\n            request.setAttribute(\"ez\", single);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * ï¿½berprï¿½ft, ob die Id eines Auswahlfelds im Request ist\r\n     * (update) oder nicht (neu).\r\n     *\r\n     * @param request                   der HttpServletRequest\r\n     * @param form                      das DynaActionForm\r\n     * @return                          true, wenn das angegebene Auswahlfeld\r\n     *                                  besteht, sonst false.\r\n     */\r\n    private boolean isUpdate(HttpServletRequest request, DynaActionForm form) {\r\n        Integer id = (Integer) form.get(Constants.AUSWAHLFELD_ID);\r\n        if (id == null || id == 0) {\r\n            return false;\r\n        }\r\n        return true;\r\n    }\r\n}\r\n",
		"id": "EvoSuiteBenchmark/46_nutzenportfolio/src/main/java/ch/bfh/egov/nutzenportfolio/service/auswahlfeld/AuswahlfeldDaoServiceTest4.java",
		"test_prompt": "// AuswahlfeldDaoServiceTest4.java\npackage ch.bfh.egov.nutzenportfolio.service.auswahlfeld;\n\nimport java.util.ArrayList;\nimport java.util.HashMap;\nimport java.util.List;\nimport javax.servlet.http.HttpServletRequest;\nimport javax.servlet.http.HttpSession;\nimport org.apache.commons.logging.Log;\nimport org.apache.commons.logging.LogFactory;\nimport org.apache.struts.action.ActionMessage;\nimport org.apache.struts.action.ActionMessages;\nimport org.apache.struts.action.DynaActionForm;\nimport ch.bfh.egov.nutzenportfolio.Constants;\nimport ch.bfh.egov.nutzenportfolio.persistence.auswahlfeld.AuswahlfeldDao;\nimport ch.bfh.egov.nutzenportfolio.service.common.CommonService;\nimport ch.bfh.egov.nutzenportfolio.service.customizing.CustomizingService;\nimport ch.bfh.egov.nutzenportfolio.service.nutzenkriterium.NutzenkriteriumService;\nimport ch.bfh.egov.nutzenportfolio.service.strategischeziele.StrategischeZieleService;\nimport ch.bfh.egov.nutzenportfolio.tos.Auswahlfeld;\nimport ch.bfh.egov.nutzenportfolio.tos.Customizing;\nimport ch.bfh.egov.nutzenportfolio.tos.Nutzenkriterium;\nimport ch.bfh.egov.nutzenportfolio.tos.StrategischesZiel;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link AuswahlfeldDaoService}.\n* It contains ten unit test cases for the {@link AuswahlfeldDaoService#customizingComplete(HttpServletRequest)} method.\n*/\nclass AuswahlfeldDaoServiceTest4 {"
	},
	{
		"original_code": "// GeneralException.java\n/**\r\n * Nutzenportfolio\r\n * Copyright (C) 2006 Kompetenzzentrum E-Business, Simon Bergamin\r\n *\r\n * This program is free software; you can redistribute it and/or\r\n * modify it under the terms of the GNU General Public License\r\n * as published by the Free Software Foundation; either version 2\r\n * of the License, or (at your option) any later version.\r\n *\r\n * This program is distributed in the hope that it will be useful,\r\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n * GNU General Public License for more details.\r\n *\r\n * You should have received a copy of the GNU General Public License\r\n * along with this program; if not, write to the Free Software\r\n * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\r\n */\r\npackage ch.bfh.egov.nutzenportfolio.exception;\r\n\r\nimport javax.servlet.ServletException;\r\nimport javax.servlet.http.HttpServletRequest;\r\nimport javax.servlet.http.HttpServletResponse;\r\nimport org.apache.struts.action.ActionForm;\r\nimport org.apache.struts.action.ActionForward;\r\nimport org.apache.struts.action.ActionMapping;\r\nimport org.apache.struts.action.ExceptionHandler;\r\nimport org.apache.struts.config.ExceptionConfig;\r\nimport ch.bfh.egov.nutzenportfolio.Constants;\r\n\r\n/**\r\n * Allgemeine Exception Klasse zur Ausgabe von Fehlermeldungen.\r\n *\r\n * @author Kompetenzzentrum E-Business, Simon Bergamin\r\n */\r\npublic class GeneralException extends ExceptionHandler {\r\n\r\n    /**\r\n     * @see org.apache.struts.action.ExceptionHandler#execute(java.lang.Exception, org.apache.struts.config.ExceptionConfig, org.apache.struts.action.ActionMapping, org.apache.struts.action.ActionForm, javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse)\r\n     */\r\n    public ActionForward execute(Exception ex, ExceptionConfig ae, ActionMapping mapping, ActionForm formInstance, HttpServletRequest request, HttpServletResponse response) throws ServletException {\r\n        String errorMsg = ex.getMessage();\r\n        StackTraceElement[] stacktrace = ex.getStackTrace();\r\n        for (int i = 0; i < stacktrace.length; i++) {\r\n            errorMsg += ((StackTraceElement) stacktrace[i]).toString() + \"\\n\";\r\n        }\r\n        request.setAttribute(Constants.ERROR_MSG_KEY, errorMsg);\r\n        return super.execute(ex, ae, mapping, formInstance, request, response);\r\n    }\r\n}\r\n",
		"id": "EvoSuiteBenchmark/46_nutzenportfolio/src/main/java/ch/bfh/egov/nutzenportfolio/exception/GeneralExceptionTest.java",
		"test_prompt": "// GeneralExceptionTest.java\npackage ch.bfh.egov.nutzenportfolio.exception;\n\nimport javax.servlet.ServletException;\nimport javax.servlet.http.HttpServletRequest;\nimport javax.servlet.http.HttpServletResponse;\nimport org.apache.struts.action.ActionForm;\nimport org.apache.struts.action.ActionForward;\nimport org.apache.struts.action.ActionMapping;\nimport org.apache.struts.action.ExceptionHandler;\nimport org.apache.struts.config.ExceptionConfig;\nimport ch.bfh.egov.nutzenportfolio.Constants;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link GeneralException}.\n* It contains ten unit test cases for the {@link GeneralException#execute(Exception, ExceptionConfig, ActionMapping, ActionForm, HttpServletRequest, HttpServletResponse)} method.\n*/\nclass GeneralExceptionTest {"
	},
	{
		"original_code": "// CustomizingNavigation.java\n/**\r\n * Nutzenportfolio\r\n * Copyright (C) 2006 Kompetenzzentrum E-Business, Simon Bergamin\r\n *\r\n * This program is free software; you can redistribute it and/or\r\n * modify it under the terms of the GNU General Public License\r\n * as published by the Free Software Foundation; either version 2\r\n * of the License, or (at your option) any later version.\r\n *\r\n * This program is distributed in the hope that it will be useful,\r\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n * GNU General Public License for more details.\r\n *\r\n * You should have received a copy of the GNU General Public License\r\n * along with this program; if not, write to the Free Software\r\n * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\r\n */\r\npackage ch.bfh.egov.nutzenportfolio.tag;\r\n\r\nimport javax.servlet.http.HttpServletRequest;\r\nimport javax.servlet.http.HttpSession;\r\nimport javax.servlet.jsp.JspWriter;\r\nimport javax.servlet.jsp.tagext.TagSupport;\r\nimport org.apache.commons.logging.Log;\r\nimport org.apache.commons.logging.LogFactory;\r\nimport ch.bfh.egov.nutzenportfolio.Constants;\r\n\r\n/**\r\n * Tag zum erstellen der Customizing-Navigation.\r\n *\r\n * @author Kompetenzzentrum E-Business, Simon Bergamin\r\n */\r\npublic class CustomizingNavigation extends TagSupport {\r\n\r\n    static final long serialVersionUID = -3269345342402491198L;\r\n\r\n    private String name = null;\r\n\r\n    private HttpServletRequest request = null;\r\n\r\n    private static final String[] entries = { Constants.STRATEGISCHE_ZIELE, Constants.DETAILZIELE, Constants.REALISIERBARKEIT, Constants.KATEGORIEN_NA, Constants.KATEGORIEN_OP_NU, Constants.NUTZENKRITERIEN_NA, Constants.FRAGEN_NA, Constants.NUTZENKRITERIEN_OP_NU, Constants.FRAGEN_OP_NU, Constants.ABSTUFUNGEN_NA, Constants.ABSTUFUNGEN_OP_NU, Constants.GEWICHTUNGEN_NA, Constants.GEWICHTUNGEN_OP_NU };\r\n\r\n    private static final String[] paEntries = { Constants.STRATEGISCHE_ZIELE, Constants.DETAILZIELE, Constants.REALISIERBARKEIT };\r\n\r\n    private static final String[] naEntries = { Constants.KATEGORIEN_NA, Constants.NUTZENKRITERIEN_NA, Constants.FRAGEN_NA, Constants.ABSTUFUNGEN_NA, Constants.GEWICHTUNGEN_NA };\r\n\r\n    private static final String[] opNuEntries = { Constants.KATEGORIEN_OP_NU, Constants.NUTZENKRITERIEN_OP_NU, Constants.FRAGEN_OP_NU, Constants.ABSTUFUNGEN_OP_NU, Constants.GEWICHTUNGEN_OP_NU };\r\n\r\n    private Log logger = LogFactory.getLog(this.getClass());\r\n\r\n    /**\r\n     * Setzt den Parameter name, der dem Namen des\r\n     * Navigationspunkts entspricht.\r\n     *\r\n     * @param value                 der Name des Navigationspunkts\r\n     */\r\n    public void setName(String value) {\r\n        name = value;\r\n    }\r\n\r\n    /**\r\n     * Holt den Namen des Navigationspunkts.\r\n     *\r\n     * @return                      der Name des Navigationspunkts\r\n     */\r\n    public String getName() {\r\n        return (name);\r\n    }\r\n\r\n    public HttpServletRequest getRequest() {\r\n        return request;\r\n    }\r\n\r\n    public void setRequest(HttpServletRequest request) {\r\n        this.request = request;\r\n    }\r\n\r\n    /**\r\n     * Setzt den Status eines Navigationspunkts. Rot steht fï¿½r\r\n     * \"Schritt zu erledigen\", grï¿½n fï¿½r \"Schritt erledigt\".\r\n     */\r\n    public int doStartTag() {\r\n        // Customizing feststellen\r\n        Integer id = (Integer) pageContext.getSession().getAttribute(Constants.CUSTOMIZING_ID);\r\n        if (name != Constants.CUSTOMIZING && id == null) {\r\n            logger.debug(\"Customizing nicht gesetzt\");\r\n            return SKIP_BODY;\r\n        }\r\n        try {\r\n            JspWriter out = pageContext.getOut();\r\n            // Status setzen\r\n            String state = \"red\";\r\n            boolean ok = checkState();\r\n            if (ok) {\r\n                state = \"green\";\r\n            }\r\n            String pageName = getCurrentNavigationName();\r\n            String navImage = \"&nbsp;\";\r\n            if (pageName.equals(name)) {\r\n                String contextPath = ((HttpServletRequest) pageContext.getRequest()).getContextPath();\r\n                navImage = \"<img class=\\\"arrow\\\" src=\\\"\" + contextPath + \"/resources/images/nav_arrow.gif\\\" />\";\r\n                logger.debug(\"location is: \" + name);\r\n            }\r\n            // Status mittels CSS Klasse ausgeben.\r\n            out.println(\"<div class=\\\"\" + state + \"\\\">\" + navImage + \"</div>\");\r\n        } catch (Exception ex) {\r\n            throw new Error(ex.getMessage());\r\n        }\r\n        return EVAL_BODY_INCLUDE;\r\n    }\r\n\r\n    /**\r\n     * Ohne Funktion, gibt SKIP_BODY zurï¿½ck.\r\n     *\r\n     * @return                  SKIP_BODY\r\n     */\r\n    public int doEndTag() {\r\n        return SKIP_BODY;\r\n    }\r\n\r\n    /**\r\n     * ï¿½berprï¿½ft den Status eines Navigationspunkts und gibt ihn zurï¿½ck.\r\n     *\r\n     * @return                     true bei Status ok, sonst false\r\n     */\r\n    public boolean checkState() {\r\n        // Name des Navigationspunkts wird benï¿½tigt\r\n        if (name == null) {\r\n            logger.debug(\"Parameter name ist null\");\r\n            return false;\r\n        }\r\n        // ï¿½berprï¿½ft den Status des gesamten Customizings\r\n        if (name.equals(Constants.CUSTOMIZING)) {\r\n            if (checkPartialState(paEntries) && checkPartialState(naEntries) && checkPartialState(opNuEntries)) {\r\n                logger.debug(\"Customizing ok\");\r\n                return true;\r\n            }\r\n            return false;\r\n        } else // ï¿½berprï¿½ft den Status des Customizings Projektattraktivitï¿½t\r\n        if (name.equals(Constants.PROJEKTATTRAKTIVITAET)) {\r\n            if (checkPartialState(paEntries)) {\r\n                logger.debug(\"Projektattraktivitaet ok\");\r\n                return true;\r\n            }\r\n            return false;\r\n        } else // ï¿½berprï¿½ft den Status des Customizings Nutzenattraktivitï¿½t\r\n        if (name.equals(Constants.NUTZENATTRAKTIVITAET)) {\r\n            if (checkPartialState(naEntries)) {\r\n                logger.debug(\"Nutzenattraktivitaet ok\");\r\n                return true;\r\n            }\r\n            return false;\r\n        } else // ï¿½berprï¿½ft den Status des Customizings Operativer Nutzen\r\n        if (name.equals(Constants.OPERATIVER_NUTZEN)) {\r\n            if (checkPartialState(opNuEntries)) {\r\n                logger.debug(\"Operativer Nutzen ok\");\r\n                return true;\r\n            }\r\n            return false;\r\n        }\r\n        // ï¿½berprï¿½ft den Status eines spezifizierten Navigationspunkts\r\n        for (int i = 0; i < entries.length; i++) {\r\n            // Status-Flag ï¿½berprï¿½fen\r\n            String entry = entries[i];\r\n            if (name.equals(entry) && checkFlag(entry)) {\r\n                return true;\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n\r\n    /**\r\n     * ï¿½berprï¿½ft die Stati einer Reihe von Navigationspunkten\r\n     * und gibt das Endresultat zurï¿½ck.\r\n     *\r\n     * @param loop                die zu ï¿½berprï¿½fenden Navigationspunkte\r\n     * @return                    true bei Status ok, sonst false\r\n     */\r\n    private boolean checkPartialState(String[] loop) {\r\n        for (int i = 0; i < loop.length; i++) {\r\n            // Status-Flag ï¿½berprï¿½fen\r\n            String entry = loop[i];\r\n            if (!checkFlag(entry)) {\r\n                return false;\r\n            }\r\n        }\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Holt den Status-Flag eines Navigationspunkts aus der\r\n     * Session und gibt es zurï¿½ck.\r\n     *\r\n     * @param entry                   der zu ï¿½berprï¿½fende Navigationspunkt\r\n     * @return                        true bei Status ok, sonst false\r\n     */\r\n    private boolean checkFlag(String entry) {\r\n        // Status-Flag aus der Session holen\r\n        Object attribute = null;\r\n        if (request != null) {\r\n            attribute = request.getSession().getAttribute(entry);\r\n        } else {\r\n            attribute = pageContext.getSession().getAttribute(entry);\r\n        }\r\n        // Status-Flag ï¿½berprï¿½fen und zurï¿½ckgeben\r\n        if (attribute == null || !(attribute instanceof Boolean) || !((Boolean) attribute)) {\r\n            logger.debug(entry + \"=\" + attribute);\r\n            return false;\r\n        }\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Gibt an hand der URL die aktuelle Seite zurï¿½ck\r\n     *\r\n     * @return                        aktuelle Seite\r\n     */\r\n    private String getCurrentNavigationName() {\r\n        String page = \"\";\r\n        HttpServletRequest req = (HttpServletRequest) pageContext.getRequest();\r\n        String uri = (String) req.getAttribute(\"javax.servlet.forward.request_uri\");\r\n        if (uri != null) {\r\n            java.util.regex.Pattern pattern = java.util.regex.Pattern.compile(\".*/adm/(\\\\w+)[/\\\\.].*\");\r\n            java.util.regex.Matcher matcher = pattern.matcher(uri);\r\n            if (matcher.matches()) {\r\n                page = matcher.group(1);\r\n                if (page.equals(Constants.OPERATIVER))\r\n                    page = Constants.OPERATIVER_NUTZEN;\r\n                else if (page.equals(Constants.STUFENBESCHRIEBE))\r\n                    page = Constants.ABSTUFUNGEN;\r\n                else if (page.equals(Constants.GEWICHTUNGSTYP) || page.equals(Constants.GEWICHTUNGSABSTUFUNG) || page.equals(Constants.GEWICHTUNG_S))\r\n                    page = Constants.GEWICHTUNGEN;\r\n                if (page.equals(Constants.CUSTOMIZING)) {\r\n                    String param = req.getParameter(Constants.DISPATCH);\r\n                    if ((param != null) && (param.equals(\"insertOrUpdate\")))\r\n                        page = Constants.PROJEKTATTRAKTIVITAET;\r\n                } else if (page.equals(Constants.KATEGORIEN) || page.equals(Constants.NUTZENKRITERIEN) || page.equals(Constants.FRAGEN) || page.equals(Constants.ABSTUFUNGEN) || page.equals(Constants.GEWICHTUNGEN)) {\r\n                    if (isOperativerNutzen())\r\n                        page += \"OpNu\";\r\n                    else\r\n                        page += \"Na\";\r\n                }\r\n            }\r\n        }\r\n        return page;\r\n    }\r\n\r\n    /**\r\n     * Gibt zurï¿½ck ob wir uns im Customizing Operativer Nutzens befinden\r\n     * oder nicht.\r\n     *\r\n     * @return                        true bei Operativer Nutzen, sonst false\r\n     */\r\n    public boolean isOperativerNutzen() {\r\n        HttpServletRequest request = (HttpServletRequest) pageContext.getRequest();\r\n        // Parameter Operativer Nutzen holen\r\n        String param = request.getParameter(Constants.OPERATIVER_NUTZEN);\r\n        logger.debug(\"Parameter=\" + param);\r\n        boolean paramNull = param == null ? true : false;\r\n        // Attribut Operativer Nutzen holen\r\n        String attr = (String) request.getAttribute(Constants.OPERATIVER_NUTZEN);\r\n        logger.debug(\"Attribut=\" + attr);\r\n        boolean attrNull = attr == null ? true : false;\r\n        HttpSession session = request.getSession();\r\n        // Parameter und Attribut ï¿½berprï¿½fen\r\n        if (!paramNull || !attrNull) {\r\n            // Operativer Nutzen durch Request festgestellt\r\n            if (!paramNull && param.equals(\"true\") || !attrNull && attr.equals(\"true\")) {\r\n                logger.debug(\"Operativer Nutzen (Request)\");\r\n                session.setAttribute(Constants.OPERATIVER_NUTZEN, \"true\");\r\n                return true;\r\n            } else // Operativer Nutzen durch Session festgestellt\r\n            if (!paramNull && param.equals(\"false\") || !attrNull && attr.equals(\"false\")) {\r\n                logger.debug(\"Nutzenattraktivitï¿½t (Session)\");\r\n                session.setAttribute(Constants.OPERATIVER_NUTZEN, \"false\");\r\n                return false;\r\n            }\r\n        } else // Session ï¿½berprï¿½fen\r\n        {\r\n            String opNu = (String) session.getAttribute(Constants.OPERATIVER_NUTZEN);\r\n            if (opNu.equals(\"true\")) {\r\n                logger.debug(\"Operativer Nutzen (Session)\");\r\n                return true;\r\n            } else {\r\n                logger.debug(\"Nutzenattraktivitï¿½t (Session)\");\r\n                return false;\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n}\r\n",
		"id": "EvoSuiteBenchmark/46_nutzenportfolio/src/main/java/ch/bfh/egov/nutzenportfolio/tag/CustomizingNavigationTest0.java",
		"test_prompt": "// CustomizingNavigationTest0.java\npackage ch.bfh.egov.nutzenportfolio.tag;\n\nimport javax.servlet.http.HttpServletRequest;\nimport javax.servlet.http.HttpSession;\nimport javax.servlet.jsp.JspWriter;\nimport javax.servlet.jsp.tagext.TagSupport;\nimport org.apache.commons.logging.Log;\nimport org.apache.commons.logging.LogFactory;\nimport ch.bfh.egov.nutzenportfolio.Constants;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link CustomizingNavigation}.\n* It contains ten unit test cases for the {@link CustomizingNavigation#doStartTag()} method.\n*/\nclass CustomizingNavigationTest0 {"
	},
	{
		"original_code": "// CustomizingNavigation.java\n/**\r\n * Nutzenportfolio\r\n * Copyright (C) 2006 Kompetenzzentrum E-Business, Simon Bergamin\r\n *\r\n * This program is free software; you can redistribute it and/or\r\n * modify it under the terms of the GNU General Public License\r\n * as published by the Free Software Foundation; either version 2\r\n * of the License, or (at your option) any later version.\r\n *\r\n * This program is distributed in the hope that it will be useful,\r\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n * GNU General Public License for more details.\r\n *\r\n * You should have received a copy of the GNU General Public License\r\n * along with this program; if not, write to the Free Software\r\n * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\r\n */\r\npackage ch.bfh.egov.nutzenportfolio.tag;\r\n\r\nimport javax.servlet.http.HttpServletRequest;\r\nimport javax.servlet.http.HttpSession;\r\nimport javax.servlet.jsp.JspWriter;\r\nimport javax.servlet.jsp.tagext.TagSupport;\r\nimport org.apache.commons.logging.Log;\r\nimport org.apache.commons.logging.LogFactory;\r\nimport ch.bfh.egov.nutzenportfolio.Constants;\r\n\r\n/**\r\n * Tag zum erstellen der Customizing-Navigation.\r\n *\r\n * @author Kompetenzzentrum E-Business, Simon Bergamin\r\n */\r\npublic class CustomizingNavigation extends TagSupport {\r\n\r\n    static final long serialVersionUID = -3269345342402491198L;\r\n\r\n    private String name = null;\r\n\r\n    private HttpServletRequest request = null;\r\n\r\n    private static final String[] entries = { Constants.STRATEGISCHE_ZIELE, Constants.DETAILZIELE, Constants.REALISIERBARKEIT, Constants.KATEGORIEN_NA, Constants.KATEGORIEN_OP_NU, Constants.NUTZENKRITERIEN_NA, Constants.FRAGEN_NA, Constants.NUTZENKRITERIEN_OP_NU, Constants.FRAGEN_OP_NU, Constants.ABSTUFUNGEN_NA, Constants.ABSTUFUNGEN_OP_NU, Constants.GEWICHTUNGEN_NA, Constants.GEWICHTUNGEN_OP_NU };\r\n\r\n    private static final String[] paEntries = { Constants.STRATEGISCHE_ZIELE, Constants.DETAILZIELE, Constants.REALISIERBARKEIT };\r\n\r\n    private static final String[] naEntries = { Constants.KATEGORIEN_NA, Constants.NUTZENKRITERIEN_NA, Constants.FRAGEN_NA, Constants.ABSTUFUNGEN_NA, Constants.GEWICHTUNGEN_NA };\r\n\r\n    private static final String[] opNuEntries = { Constants.KATEGORIEN_OP_NU, Constants.NUTZENKRITERIEN_OP_NU, Constants.FRAGEN_OP_NU, Constants.ABSTUFUNGEN_OP_NU, Constants.GEWICHTUNGEN_OP_NU };\r\n\r\n    private Log logger = LogFactory.getLog(this.getClass());\r\n\r\n    /**\r\n     * Setzt den Parameter name, der dem Namen des\r\n     * Navigationspunkts entspricht.\r\n     *\r\n     * @param value                 der Name des Navigationspunkts\r\n     */\r\n    public void setName(String value) {\r\n        name = value;\r\n    }\r\n\r\n    /**\r\n     * Holt den Namen des Navigationspunkts.\r\n     *\r\n     * @return                      der Name des Navigationspunkts\r\n     */\r\n    public String getName() {\r\n        return (name);\r\n    }\r\n\r\n    public HttpServletRequest getRequest() {\r\n        return request;\r\n    }\r\n\r\n    public void setRequest(HttpServletRequest request) {\r\n        this.request = request;\r\n    }\r\n\r\n    /**\r\n     * Setzt den Status eines Navigationspunkts. Rot steht fï¿½r\r\n     * \"Schritt zu erledigen\", grï¿½n fï¿½r \"Schritt erledigt\".\r\n     */\r\n    public int doStartTag() {\r\n        // Customizing feststellen\r\n        Integer id = (Integer) pageContext.getSession().getAttribute(Constants.CUSTOMIZING_ID);\r\n        if (name != Constants.CUSTOMIZING && id == null) {\r\n            logger.debug(\"Customizing nicht gesetzt\");\r\n            return SKIP_BODY;\r\n        }\r\n        try {\r\n            JspWriter out = pageContext.getOut();\r\n            // Status setzen\r\n            String state = \"red\";\r\n            boolean ok = checkState();\r\n            if (ok) {\r\n                state = \"green\";\r\n            }\r\n            String pageName = getCurrentNavigationName();\r\n            String navImage = \"&nbsp;\";\r\n            if (pageName.equals(name)) {\r\n                String contextPath = ((HttpServletRequest) pageContext.getRequest()).getContextPath();\r\n                navImage = \"<img class=\\\"arrow\\\" src=\\\"\" + contextPath + \"/resources/images/nav_arrow.gif\\\" />\";\r\n                logger.debug(\"location is: \" + name);\r\n            }\r\n            // Status mittels CSS Klasse ausgeben.\r\n            out.println(\"<div class=\\\"\" + state + \"\\\">\" + navImage + \"</div>\");\r\n        } catch (Exception ex) {\r\n            throw new Error(ex.getMessage());\r\n        }\r\n        return EVAL_BODY_INCLUDE;\r\n    }\r\n\r\n    /**\r\n     * Ohne Funktion, gibt SKIP_BODY zurï¿½ck.\r\n     *\r\n     * @return                  SKIP_BODY\r\n     */\r\n    public int doEndTag() {\r\n        return SKIP_BODY;\r\n    }\r\n\r\n    /**\r\n     * ï¿½berprï¿½ft den Status eines Navigationspunkts und gibt ihn zurï¿½ck.\r\n     *\r\n     * @return                     true bei Status ok, sonst false\r\n     */\r\n    public boolean checkState() {\r\n        // Name des Navigationspunkts wird benï¿½tigt\r\n        if (name == null) {\r\n            logger.debug(\"Parameter name ist null\");\r\n            return false;\r\n        }\r\n        // ï¿½berprï¿½ft den Status des gesamten Customizings\r\n        if (name.equals(Constants.CUSTOMIZING)) {\r\n            if (checkPartialState(paEntries) && checkPartialState(naEntries) && checkPartialState(opNuEntries)) {\r\n                logger.debug(\"Customizing ok\");\r\n                return true;\r\n            }\r\n            return false;\r\n        } else // ï¿½berprï¿½ft den Status des Customizings Projektattraktivitï¿½t\r\n        if (name.equals(Constants.PROJEKTATTRAKTIVITAET)) {\r\n            if (checkPartialState(paEntries)) {\r\n                logger.debug(\"Projektattraktivitaet ok\");\r\n                return true;\r\n            }\r\n            return false;\r\n        } else // ï¿½berprï¿½ft den Status des Customizings Nutzenattraktivitï¿½t\r\n        if (name.equals(Constants.NUTZENATTRAKTIVITAET)) {\r\n            if (checkPartialState(naEntries)) {\r\n                logger.debug(\"Nutzenattraktivitaet ok\");\r\n                return true;\r\n            }\r\n            return false;\r\n        } else // ï¿½berprï¿½ft den Status des Customizings Operativer Nutzen\r\n        if (name.equals(Constants.OPERATIVER_NUTZEN)) {\r\n            if (checkPartialState(opNuEntries)) {\r\n                logger.debug(\"Operativer Nutzen ok\");\r\n                return true;\r\n            }\r\n            return false;\r\n        }\r\n        // ï¿½berprï¿½ft den Status eines spezifizierten Navigationspunkts\r\n        for (int i = 0; i < entries.length; i++) {\r\n            // Status-Flag ï¿½berprï¿½fen\r\n            String entry = entries[i];\r\n            if (name.equals(entry) && checkFlag(entry)) {\r\n                return true;\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n\r\n    /**\r\n     * ï¿½berprï¿½ft die Stati einer Reihe von Navigationspunkten\r\n     * und gibt das Endresultat zurï¿½ck.\r\n     *\r\n     * @param loop                die zu ï¿½berprï¿½fenden Navigationspunkte\r\n     * @return                    true bei Status ok, sonst false\r\n     */\r\n    private boolean checkPartialState(String[] loop) {\r\n        for (int i = 0; i < loop.length; i++) {\r\n            // Status-Flag ï¿½berprï¿½fen\r\n            String entry = loop[i];\r\n            if (!checkFlag(entry)) {\r\n                return false;\r\n            }\r\n        }\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Holt den Status-Flag eines Navigationspunkts aus der\r\n     * Session und gibt es zurï¿½ck.\r\n     *\r\n     * @param entry                   der zu ï¿½berprï¿½fende Navigationspunkt\r\n     * @return                        true bei Status ok, sonst false\r\n     */\r\n    private boolean checkFlag(String entry) {\r\n        // Status-Flag aus der Session holen\r\n        Object attribute = null;\r\n        if (request != null) {\r\n            attribute = request.getSession().getAttribute(entry);\r\n        } else {\r\n            attribute = pageContext.getSession().getAttribute(entry);\r\n        }\r\n        // Status-Flag ï¿½berprï¿½fen und zurï¿½ckgeben\r\n        if (attribute == null || !(attribute instanceof Boolean) || !((Boolean) attribute)) {\r\n            logger.debug(entry + \"=\" + attribute);\r\n            return false;\r\n        }\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Gibt an hand der URL die aktuelle Seite zurï¿½ck\r\n     *\r\n     * @return                        aktuelle Seite\r\n     */\r\n    private String getCurrentNavigationName() {\r\n        String page = \"\";\r\n        HttpServletRequest req = (HttpServletRequest) pageContext.getRequest();\r\n        String uri = (String) req.getAttribute(\"javax.servlet.forward.request_uri\");\r\n        if (uri != null) {\r\n            java.util.regex.Pattern pattern = java.util.regex.Pattern.compile(\".*/adm/(\\\\w+)[/\\\\.].*\");\r\n            java.util.regex.Matcher matcher = pattern.matcher(uri);\r\n            if (matcher.matches()) {\r\n                page = matcher.group(1);\r\n                if (page.equals(Constants.OPERATIVER))\r\n                    page = Constants.OPERATIVER_NUTZEN;\r\n                else if (page.equals(Constants.STUFENBESCHRIEBE))\r\n                    page = Constants.ABSTUFUNGEN;\r\n                else if (page.equals(Constants.GEWICHTUNGSTYP) || page.equals(Constants.GEWICHTUNGSABSTUFUNG) || page.equals(Constants.GEWICHTUNG_S))\r\n                    page = Constants.GEWICHTUNGEN;\r\n                if (page.equals(Constants.CUSTOMIZING)) {\r\n                    String param = req.getParameter(Constants.DISPATCH);\r\n                    if ((param != null) && (param.equals(\"insertOrUpdate\")))\r\n                        page = Constants.PROJEKTATTRAKTIVITAET;\r\n                } else if (page.equals(Constants.KATEGORIEN) || page.equals(Constants.NUTZENKRITERIEN) || page.equals(Constants.FRAGEN) || page.equals(Constants.ABSTUFUNGEN) || page.equals(Constants.GEWICHTUNGEN)) {\r\n                    if (isOperativerNutzen())\r\n                        page += \"OpNu\";\r\n                    else\r\n                        page += \"Na\";\r\n                }\r\n            }\r\n        }\r\n        return page;\r\n    }\r\n\r\n    /**\r\n     * Gibt zurï¿½ck ob wir uns im Customizing Operativer Nutzens befinden\r\n     * oder nicht.\r\n     *\r\n     * @return                        true bei Operativer Nutzen, sonst false\r\n     */\r\n    public boolean isOperativerNutzen() {\r\n        HttpServletRequest request = (HttpServletRequest) pageContext.getRequest();\r\n        // Parameter Operativer Nutzen holen\r\n        String param = request.getParameter(Constants.OPERATIVER_NUTZEN);\r\n        logger.debug(\"Parameter=\" + param);\r\n        boolean paramNull = param == null ? true : false;\r\n        // Attribut Operativer Nutzen holen\r\n        String attr = (String) request.getAttribute(Constants.OPERATIVER_NUTZEN);\r\n        logger.debug(\"Attribut=\" + attr);\r\n        boolean attrNull = attr == null ? true : false;\r\n        HttpSession session = request.getSession();\r\n        // Parameter und Attribut ï¿½berprï¿½fen\r\n        if (!paramNull || !attrNull) {\r\n            // Operativer Nutzen durch Request festgestellt\r\n            if (!paramNull && param.equals(\"true\") || !attrNull && attr.equals(\"true\")) {\r\n                logger.debug(\"Operativer Nutzen (Request)\");\r\n                session.setAttribute(Constants.OPERATIVER_NUTZEN, \"true\");\r\n                return true;\r\n            } else // Operativer Nutzen durch Session festgestellt\r\n            if (!paramNull && param.equals(\"false\") || !attrNull && attr.equals(\"false\")) {\r\n                logger.debug(\"Nutzenattraktivitï¿½t (Session)\");\r\n                session.setAttribute(Constants.OPERATIVER_NUTZEN, \"false\");\r\n                return false;\r\n            }\r\n        } else // Session ï¿½berprï¿½fen\r\n        {\r\n            String opNu = (String) session.getAttribute(Constants.OPERATIVER_NUTZEN);\r\n            if (opNu.equals(\"true\")) {\r\n                logger.debug(\"Operativer Nutzen (Session)\");\r\n                return true;\r\n            } else {\r\n                logger.debug(\"Nutzenattraktivitï¿½t (Session)\");\r\n                return false;\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n}\r\n",
		"id": "EvoSuiteBenchmark/46_nutzenportfolio/src/main/java/ch/bfh/egov/nutzenportfolio/tag/CustomizingNavigationTest1.java",
		"test_prompt": "// CustomizingNavigationTest1.java\npackage ch.bfh.egov.nutzenportfolio.tag;\n\nimport javax.servlet.http.HttpServletRequest;\nimport javax.servlet.http.HttpSession;\nimport javax.servlet.jsp.JspWriter;\nimport javax.servlet.jsp.tagext.TagSupport;\nimport org.apache.commons.logging.Log;\nimport org.apache.commons.logging.LogFactory;\nimport ch.bfh.egov.nutzenportfolio.Constants;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link CustomizingNavigation}.\n* It contains ten unit test cases for the {@link CustomizingNavigation#doEndTag()} method.\n*/\nclass CustomizingNavigationTest1 {"
	},
	{
		"original_code": "// CustomizingNavigation.java\n/**\r\n * Nutzenportfolio\r\n * Copyright (C) 2006 Kompetenzzentrum E-Business, Simon Bergamin\r\n *\r\n * This program is free software; you can redistribute it and/or\r\n * modify it under the terms of the GNU General Public License\r\n * as published by the Free Software Foundation; either version 2\r\n * of the License, or (at your option) any later version.\r\n *\r\n * This program is distributed in the hope that it will be useful,\r\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n * GNU General Public License for more details.\r\n *\r\n * You should have received a copy of the GNU General Public License\r\n * along with this program; if not, write to the Free Software\r\n * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\r\n */\r\npackage ch.bfh.egov.nutzenportfolio.tag;\r\n\r\nimport javax.servlet.http.HttpServletRequest;\r\nimport javax.servlet.http.HttpSession;\r\nimport javax.servlet.jsp.JspWriter;\r\nimport javax.servlet.jsp.tagext.TagSupport;\r\nimport org.apache.commons.logging.Log;\r\nimport org.apache.commons.logging.LogFactory;\r\nimport ch.bfh.egov.nutzenportfolio.Constants;\r\n\r\n/**\r\n * Tag zum erstellen der Customizing-Navigation.\r\n *\r\n * @author Kompetenzzentrum E-Business, Simon Bergamin\r\n */\r\npublic class CustomizingNavigation extends TagSupport {\r\n\r\n    static final long serialVersionUID = -3269345342402491198L;\r\n\r\n    private String name = null;\r\n\r\n    private HttpServletRequest request = null;\r\n\r\n    private static final String[] entries = { Constants.STRATEGISCHE_ZIELE, Constants.DETAILZIELE, Constants.REALISIERBARKEIT, Constants.KATEGORIEN_NA, Constants.KATEGORIEN_OP_NU, Constants.NUTZENKRITERIEN_NA, Constants.FRAGEN_NA, Constants.NUTZENKRITERIEN_OP_NU, Constants.FRAGEN_OP_NU, Constants.ABSTUFUNGEN_NA, Constants.ABSTUFUNGEN_OP_NU, Constants.GEWICHTUNGEN_NA, Constants.GEWICHTUNGEN_OP_NU };\r\n\r\n    private static final String[] paEntries = { Constants.STRATEGISCHE_ZIELE, Constants.DETAILZIELE, Constants.REALISIERBARKEIT };\r\n\r\n    private static final String[] naEntries = { Constants.KATEGORIEN_NA, Constants.NUTZENKRITERIEN_NA, Constants.FRAGEN_NA, Constants.ABSTUFUNGEN_NA, Constants.GEWICHTUNGEN_NA };\r\n\r\n    private static final String[] opNuEntries = { Constants.KATEGORIEN_OP_NU, Constants.NUTZENKRITERIEN_OP_NU, Constants.FRAGEN_OP_NU, Constants.ABSTUFUNGEN_OP_NU, Constants.GEWICHTUNGEN_OP_NU };\r\n\r\n    private Log logger = LogFactory.getLog(this.getClass());\r\n\r\n    /**\r\n     * Setzt den Parameter name, der dem Namen des\r\n     * Navigationspunkts entspricht.\r\n     *\r\n     * @param value                 der Name des Navigationspunkts\r\n     */\r\n    public void setName(String value) {\r\n        name = value;\r\n    }\r\n\r\n    /**\r\n     * Holt den Namen des Navigationspunkts.\r\n     *\r\n     * @return                      der Name des Navigationspunkts\r\n     */\r\n    public String getName() {\r\n        return (name);\r\n    }\r\n\r\n    public HttpServletRequest getRequest() {\r\n        return request;\r\n    }\r\n\r\n    public void setRequest(HttpServletRequest request) {\r\n        this.request = request;\r\n    }\r\n\r\n    /**\r\n     * Setzt den Status eines Navigationspunkts. Rot steht fï¿½r\r\n     * \"Schritt zu erledigen\", grï¿½n fï¿½r \"Schritt erledigt\".\r\n     */\r\n    public int doStartTag() {\r\n        // Customizing feststellen\r\n        Integer id = (Integer) pageContext.getSession().getAttribute(Constants.CUSTOMIZING_ID);\r\n        if (name != Constants.CUSTOMIZING && id == null) {\r\n            logger.debug(\"Customizing nicht gesetzt\");\r\n            return SKIP_BODY;\r\n        }\r\n        try {\r\n            JspWriter out = pageContext.getOut();\r\n            // Status setzen\r\n            String state = \"red\";\r\n            boolean ok = checkState();\r\n            if (ok) {\r\n                state = \"green\";\r\n            }\r\n            String pageName = getCurrentNavigationName();\r\n            String navImage = \"&nbsp;\";\r\n            if (pageName.equals(name)) {\r\n                String contextPath = ((HttpServletRequest) pageContext.getRequest()).getContextPath();\r\n                navImage = \"<img class=\\\"arrow\\\" src=\\\"\" + contextPath + \"/resources/images/nav_arrow.gif\\\" />\";\r\n                logger.debug(\"location is: \" + name);\r\n            }\r\n            // Status mittels CSS Klasse ausgeben.\r\n            out.println(\"<div class=\\\"\" + state + \"\\\">\" + navImage + \"</div>\");\r\n        } catch (Exception ex) {\r\n            throw new Error(ex.getMessage());\r\n        }\r\n        return EVAL_BODY_INCLUDE;\r\n    }\r\n\r\n    /**\r\n     * Ohne Funktion, gibt SKIP_BODY zurï¿½ck.\r\n     *\r\n     * @return                  SKIP_BODY\r\n     */\r\n    public int doEndTag() {\r\n        return SKIP_BODY;\r\n    }\r\n\r\n    /**\r\n     * ï¿½berprï¿½ft den Status eines Navigationspunkts und gibt ihn zurï¿½ck.\r\n     *\r\n     * @return                     true bei Status ok, sonst false\r\n     */\r\n    public boolean checkState() {\r\n        // Name des Navigationspunkts wird benï¿½tigt\r\n        if (name == null) {\r\n            logger.debug(\"Parameter name ist null\");\r\n            return false;\r\n        }\r\n        // ï¿½berprï¿½ft den Status des gesamten Customizings\r\n        if (name.equals(Constants.CUSTOMIZING)) {\r\n            if (checkPartialState(paEntries) && checkPartialState(naEntries) && checkPartialState(opNuEntries)) {\r\n                logger.debug(\"Customizing ok\");\r\n                return true;\r\n            }\r\n            return false;\r\n        } else // ï¿½berprï¿½ft den Status des Customizings Projektattraktivitï¿½t\r\n        if (name.equals(Constants.PROJEKTATTRAKTIVITAET)) {\r\n            if (checkPartialState(paEntries)) {\r\n                logger.debug(\"Projektattraktivitaet ok\");\r\n                return true;\r\n            }\r\n            return false;\r\n        } else // ï¿½berprï¿½ft den Status des Customizings Nutzenattraktivitï¿½t\r\n        if (name.equals(Constants.NUTZENATTRAKTIVITAET)) {\r\n            if (checkPartialState(naEntries)) {\r\n                logger.debug(\"Nutzenattraktivitaet ok\");\r\n                return true;\r\n            }\r\n            return false;\r\n        } else // ï¿½berprï¿½ft den Status des Customizings Operativer Nutzen\r\n        if (name.equals(Constants.OPERATIVER_NUTZEN)) {\r\n            if (checkPartialState(opNuEntries)) {\r\n                logger.debug(\"Operativer Nutzen ok\");\r\n                return true;\r\n            }\r\n            return false;\r\n        }\r\n        // ï¿½berprï¿½ft den Status eines spezifizierten Navigationspunkts\r\n        for (int i = 0; i < entries.length; i++) {\r\n            // Status-Flag ï¿½berprï¿½fen\r\n            String entry = entries[i];\r\n            if (name.equals(entry) && checkFlag(entry)) {\r\n                return true;\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n\r\n    /**\r\n     * ï¿½berprï¿½ft die Stati einer Reihe von Navigationspunkten\r\n     * und gibt das Endresultat zurï¿½ck.\r\n     *\r\n     * @param loop                die zu ï¿½berprï¿½fenden Navigationspunkte\r\n     * @return                    true bei Status ok, sonst false\r\n     */\r\n    private boolean checkPartialState(String[] loop) {\r\n        for (int i = 0; i < loop.length; i++) {\r\n            // Status-Flag ï¿½berprï¿½fen\r\n            String entry = loop[i];\r\n            if (!checkFlag(entry)) {\r\n                return false;\r\n            }\r\n        }\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Holt den Status-Flag eines Navigationspunkts aus der\r\n     * Session und gibt es zurï¿½ck.\r\n     *\r\n     * @param entry                   der zu ï¿½berprï¿½fende Navigationspunkt\r\n     * @return                        true bei Status ok, sonst false\r\n     */\r\n    private boolean checkFlag(String entry) {\r\n        // Status-Flag aus der Session holen\r\n        Object attribute = null;\r\n        if (request != null) {\r\n            attribute = request.getSession().getAttribute(entry);\r\n        } else {\r\n            attribute = pageContext.getSession().getAttribute(entry);\r\n        }\r\n        // Status-Flag ï¿½berprï¿½fen und zurï¿½ckgeben\r\n        if (attribute == null || !(attribute instanceof Boolean) || !((Boolean) attribute)) {\r\n            logger.debug(entry + \"=\" + attribute);\r\n            return false;\r\n        }\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Gibt an hand der URL die aktuelle Seite zurï¿½ck\r\n     *\r\n     * @return                        aktuelle Seite\r\n     */\r\n    private String getCurrentNavigationName() {\r\n        String page = \"\";\r\n        HttpServletRequest req = (HttpServletRequest) pageContext.getRequest();\r\n        String uri = (String) req.getAttribute(\"javax.servlet.forward.request_uri\");\r\n        if (uri != null) {\r\n            java.util.regex.Pattern pattern = java.util.regex.Pattern.compile(\".*/adm/(\\\\w+)[/\\\\.].*\");\r\n            java.util.regex.Matcher matcher = pattern.matcher(uri);\r\n            if (matcher.matches()) {\r\n                page = matcher.group(1);\r\n                if (page.equals(Constants.OPERATIVER))\r\n                    page = Constants.OPERATIVER_NUTZEN;\r\n                else if (page.equals(Constants.STUFENBESCHRIEBE))\r\n                    page = Constants.ABSTUFUNGEN;\r\n                else if (page.equals(Constants.GEWICHTUNGSTYP) || page.equals(Constants.GEWICHTUNGSABSTUFUNG) || page.equals(Constants.GEWICHTUNG_S))\r\n                    page = Constants.GEWICHTUNGEN;\r\n                if (page.equals(Constants.CUSTOMIZING)) {\r\n                    String param = req.getParameter(Constants.DISPATCH);\r\n                    if ((param != null) && (param.equals(\"insertOrUpdate\")))\r\n                        page = Constants.PROJEKTATTRAKTIVITAET;\r\n                } else if (page.equals(Constants.KATEGORIEN) || page.equals(Constants.NUTZENKRITERIEN) || page.equals(Constants.FRAGEN) || page.equals(Constants.ABSTUFUNGEN) || page.equals(Constants.GEWICHTUNGEN)) {\r\n                    if (isOperativerNutzen())\r\n                        page += \"OpNu\";\r\n                    else\r\n                        page += \"Na\";\r\n                }\r\n            }\r\n        }\r\n        return page;\r\n    }\r\n\r\n    /**\r\n     * Gibt zurï¿½ck ob wir uns im Customizing Operativer Nutzens befinden\r\n     * oder nicht.\r\n     *\r\n     * @return                        true bei Operativer Nutzen, sonst false\r\n     */\r\n    public boolean isOperativerNutzen() {\r\n        HttpServletRequest request = (HttpServletRequest) pageContext.getRequest();\r\n        // Parameter Operativer Nutzen holen\r\n        String param = request.getParameter(Constants.OPERATIVER_NUTZEN);\r\n        logger.debug(\"Parameter=\" + param);\r\n        boolean paramNull = param == null ? true : false;\r\n        // Attribut Operativer Nutzen holen\r\n        String attr = (String) request.getAttribute(Constants.OPERATIVER_NUTZEN);\r\n        logger.debug(\"Attribut=\" + attr);\r\n        boolean attrNull = attr == null ? true : false;\r\n        HttpSession session = request.getSession();\r\n        // Parameter und Attribut ï¿½berprï¿½fen\r\n        if (!paramNull || !attrNull) {\r\n            // Operativer Nutzen durch Request festgestellt\r\n            if (!paramNull && param.equals(\"true\") || !attrNull && attr.equals(\"true\")) {\r\n                logger.debug(\"Operativer Nutzen (Request)\");\r\n                session.setAttribute(Constants.OPERATIVER_NUTZEN, \"true\");\r\n                return true;\r\n            } else // Operativer Nutzen durch Session festgestellt\r\n            if (!paramNull && param.equals(\"false\") || !attrNull && attr.equals(\"false\")) {\r\n                logger.debug(\"Nutzenattraktivitï¿½t (Session)\");\r\n                session.setAttribute(Constants.OPERATIVER_NUTZEN, \"false\");\r\n                return false;\r\n            }\r\n        } else // Session ï¿½berprï¿½fen\r\n        {\r\n            String opNu = (String) session.getAttribute(Constants.OPERATIVER_NUTZEN);\r\n            if (opNu.equals(\"true\")) {\r\n                logger.debug(\"Operativer Nutzen (Session)\");\r\n                return true;\r\n            } else {\r\n                logger.debug(\"Nutzenattraktivitï¿½t (Session)\");\r\n                return false;\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n}\r\n",
		"id": "EvoSuiteBenchmark/46_nutzenportfolio/src/main/java/ch/bfh/egov/nutzenportfolio/tag/CustomizingNavigationTest2.java",
		"test_prompt": "// CustomizingNavigationTest2.java\npackage ch.bfh.egov.nutzenportfolio.tag;\n\nimport javax.servlet.http.HttpServletRequest;\nimport javax.servlet.http.HttpSession;\nimport javax.servlet.jsp.JspWriter;\nimport javax.servlet.jsp.tagext.TagSupport;\nimport org.apache.commons.logging.Log;\nimport org.apache.commons.logging.LogFactory;\nimport ch.bfh.egov.nutzenportfolio.Constants;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link CustomizingNavigation}.\n* It contains ten unit test cases for the {@link CustomizingNavigation#checkState()} method.\n*/\nclass CustomizingNavigationTest2 {"
	},
	{
		"original_code": "// CustomizingNavigation.java\n/**\r\n * Nutzenportfolio\r\n * Copyright (C) 2006 Kompetenzzentrum E-Business, Simon Bergamin\r\n *\r\n * This program is free software; you can redistribute it and/or\r\n * modify it under the terms of the GNU General Public License\r\n * as published by the Free Software Foundation; either version 2\r\n * of the License, or (at your option) any later version.\r\n *\r\n * This program is distributed in the hope that it will be useful,\r\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n * GNU General Public License for more details.\r\n *\r\n * You should have received a copy of the GNU General Public License\r\n * along with this program; if not, write to the Free Software\r\n * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\r\n */\r\npackage ch.bfh.egov.nutzenportfolio.tag;\r\n\r\nimport javax.servlet.http.HttpServletRequest;\r\nimport javax.servlet.http.HttpSession;\r\nimport javax.servlet.jsp.JspWriter;\r\nimport javax.servlet.jsp.tagext.TagSupport;\r\nimport org.apache.commons.logging.Log;\r\nimport org.apache.commons.logging.LogFactory;\r\nimport ch.bfh.egov.nutzenportfolio.Constants;\r\n\r\n/**\r\n * Tag zum erstellen der Customizing-Navigation.\r\n *\r\n * @author Kompetenzzentrum E-Business, Simon Bergamin\r\n */\r\npublic class CustomizingNavigation extends TagSupport {\r\n\r\n    static final long serialVersionUID = -3269345342402491198L;\r\n\r\n    private String name = null;\r\n\r\n    private HttpServletRequest request = null;\r\n\r\n    private static final String[] entries = { Constants.STRATEGISCHE_ZIELE, Constants.DETAILZIELE, Constants.REALISIERBARKEIT, Constants.KATEGORIEN_NA, Constants.KATEGORIEN_OP_NU, Constants.NUTZENKRITERIEN_NA, Constants.FRAGEN_NA, Constants.NUTZENKRITERIEN_OP_NU, Constants.FRAGEN_OP_NU, Constants.ABSTUFUNGEN_NA, Constants.ABSTUFUNGEN_OP_NU, Constants.GEWICHTUNGEN_NA, Constants.GEWICHTUNGEN_OP_NU };\r\n\r\n    private static final String[] paEntries = { Constants.STRATEGISCHE_ZIELE, Constants.DETAILZIELE, Constants.REALISIERBARKEIT };\r\n\r\n    private static final String[] naEntries = { Constants.KATEGORIEN_NA, Constants.NUTZENKRITERIEN_NA, Constants.FRAGEN_NA, Constants.ABSTUFUNGEN_NA, Constants.GEWICHTUNGEN_NA };\r\n\r\n    private static final String[] opNuEntries = { Constants.KATEGORIEN_OP_NU, Constants.NUTZENKRITERIEN_OP_NU, Constants.FRAGEN_OP_NU, Constants.ABSTUFUNGEN_OP_NU, Constants.GEWICHTUNGEN_OP_NU };\r\n\r\n    private Log logger = LogFactory.getLog(this.getClass());\r\n\r\n    /**\r\n     * Setzt den Parameter name, der dem Namen des\r\n     * Navigationspunkts entspricht.\r\n     *\r\n     * @param value                 der Name des Navigationspunkts\r\n     */\r\n    public void setName(String value) {\r\n        name = value;\r\n    }\r\n\r\n    /**\r\n     * Holt den Namen des Navigationspunkts.\r\n     *\r\n     * @return                      der Name des Navigationspunkts\r\n     */\r\n    public String getName() {\r\n        return (name);\r\n    }\r\n\r\n    public HttpServletRequest getRequest() {\r\n        return request;\r\n    }\r\n\r\n    public void setRequest(HttpServletRequest request) {\r\n        this.request = request;\r\n    }\r\n\r\n    /**\r\n     * Setzt den Status eines Navigationspunkts. Rot steht fï¿½r\r\n     * \"Schritt zu erledigen\", grï¿½n fï¿½r \"Schritt erledigt\".\r\n     */\r\n    public int doStartTag() {\r\n        // Customizing feststellen\r\n        Integer id = (Integer) pageContext.getSession().getAttribute(Constants.CUSTOMIZING_ID);\r\n        if (name != Constants.CUSTOMIZING && id == null) {\r\n            logger.debug(\"Customizing nicht gesetzt\");\r\n            return SKIP_BODY;\r\n        }\r\n        try {\r\n            JspWriter out = pageContext.getOut();\r\n            // Status setzen\r\n            String state = \"red\";\r\n            boolean ok = checkState();\r\n            if (ok) {\r\n                state = \"green\";\r\n            }\r\n            String pageName = getCurrentNavigationName();\r\n            String navImage = \"&nbsp;\";\r\n            if (pageName.equals(name)) {\r\n                String contextPath = ((HttpServletRequest) pageContext.getRequest()).getContextPath();\r\n                navImage = \"<img class=\\\"arrow\\\" src=\\\"\" + contextPath + \"/resources/images/nav_arrow.gif\\\" />\";\r\n                logger.debug(\"location is: \" + name);\r\n            }\r\n            // Status mittels CSS Klasse ausgeben.\r\n            out.println(\"<div class=\\\"\" + state + \"\\\">\" + navImage + \"</div>\");\r\n        } catch (Exception ex) {\r\n            throw new Error(ex.getMessage());\r\n        }\r\n        return EVAL_BODY_INCLUDE;\r\n    }\r\n\r\n    /**\r\n     * Ohne Funktion, gibt SKIP_BODY zurï¿½ck.\r\n     *\r\n     * @return                  SKIP_BODY\r\n     */\r\n    public int doEndTag() {\r\n        return SKIP_BODY;\r\n    }\r\n\r\n    /**\r\n     * ï¿½berprï¿½ft den Status eines Navigationspunkts und gibt ihn zurï¿½ck.\r\n     *\r\n     * @return                     true bei Status ok, sonst false\r\n     */\r\n    public boolean checkState() {\r\n        // Name des Navigationspunkts wird benï¿½tigt\r\n        if (name == null) {\r\n            logger.debug(\"Parameter name ist null\");\r\n            return false;\r\n        }\r\n        // ï¿½berprï¿½ft den Status des gesamten Customizings\r\n        if (name.equals(Constants.CUSTOMIZING)) {\r\n            if (checkPartialState(paEntries) && checkPartialState(naEntries) && checkPartialState(opNuEntries)) {\r\n                logger.debug(\"Customizing ok\");\r\n                return true;\r\n            }\r\n            return false;\r\n        } else // ï¿½berprï¿½ft den Status des Customizings Projektattraktivitï¿½t\r\n        if (name.equals(Constants.PROJEKTATTRAKTIVITAET)) {\r\n            if (checkPartialState(paEntries)) {\r\n                logger.debug(\"Projektattraktivitaet ok\");\r\n                return true;\r\n            }\r\n            return false;\r\n        } else // ï¿½berprï¿½ft den Status des Customizings Nutzenattraktivitï¿½t\r\n        if (name.equals(Constants.NUTZENATTRAKTIVITAET)) {\r\n            if (checkPartialState(naEntries)) {\r\n                logger.debug(\"Nutzenattraktivitaet ok\");\r\n                return true;\r\n            }\r\n            return false;\r\n        } else // ï¿½berprï¿½ft den Status des Customizings Operativer Nutzen\r\n        if (name.equals(Constants.OPERATIVER_NUTZEN)) {\r\n            if (checkPartialState(opNuEntries)) {\r\n                logger.debug(\"Operativer Nutzen ok\");\r\n                return true;\r\n            }\r\n            return false;\r\n        }\r\n        // ï¿½berprï¿½ft den Status eines spezifizierten Navigationspunkts\r\n        for (int i = 0; i < entries.length; i++) {\r\n            // Status-Flag ï¿½berprï¿½fen\r\n            String entry = entries[i];\r\n            if (name.equals(entry) && checkFlag(entry)) {\r\n                return true;\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n\r\n    /**\r\n     * ï¿½berprï¿½ft die Stati einer Reihe von Navigationspunkten\r\n     * und gibt das Endresultat zurï¿½ck.\r\n     *\r\n     * @param loop                die zu ï¿½berprï¿½fenden Navigationspunkte\r\n     * @return                    true bei Status ok, sonst false\r\n     */\r\n    private boolean checkPartialState(String[] loop) {\r\n        for (int i = 0; i < loop.length; i++) {\r\n            // Status-Flag ï¿½berprï¿½fen\r\n            String entry = loop[i];\r\n            if (!checkFlag(entry)) {\r\n                return false;\r\n            }\r\n        }\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Holt den Status-Flag eines Navigationspunkts aus der\r\n     * Session und gibt es zurï¿½ck.\r\n     *\r\n     * @param entry                   der zu ï¿½berprï¿½fende Navigationspunkt\r\n     * @return                        true bei Status ok, sonst false\r\n     */\r\n    private boolean checkFlag(String entry) {\r\n        // Status-Flag aus der Session holen\r\n        Object attribute = null;\r\n        if (request != null) {\r\n            attribute = request.getSession().getAttribute(entry);\r\n        } else {\r\n            attribute = pageContext.getSession().getAttribute(entry);\r\n        }\r\n        // Status-Flag ï¿½berprï¿½fen und zurï¿½ckgeben\r\n        if (attribute == null || !(attribute instanceof Boolean) || !((Boolean) attribute)) {\r\n            logger.debug(entry + \"=\" + attribute);\r\n            return false;\r\n        }\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Gibt an hand der URL die aktuelle Seite zurï¿½ck\r\n     *\r\n     * @return                        aktuelle Seite\r\n     */\r\n    private String getCurrentNavigationName() {\r\n        String page = \"\";\r\n        HttpServletRequest req = (HttpServletRequest) pageContext.getRequest();\r\n        String uri = (String) req.getAttribute(\"javax.servlet.forward.request_uri\");\r\n        if (uri != null) {\r\n            java.util.regex.Pattern pattern = java.util.regex.Pattern.compile(\".*/adm/(\\\\w+)[/\\\\.].*\");\r\n            java.util.regex.Matcher matcher = pattern.matcher(uri);\r\n            if (matcher.matches()) {\r\n                page = matcher.group(1);\r\n                if (page.equals(Constants.OPERATIVER))\r\n                    page = Constants.OPERATIVER_NUTZEN;\r\n                else if (page.equals(Constants.STUFENBESCHRIEBE))\r\n                    page = Constants.ABSTUFUNGEN;\r\n                else if (page.equals(Constants.GEWICHTUNGSTYP) || page.equals(Constants.GEWICHTUNGSABSTUFUNG) || page.equals(Constants.GEWICHTUNG_S))\r\n                    page = Constants.GEWICHTUNGEN;\r\n                if (page.equals(Constants.CUSTOMIZING)) {\r\n                    String param = req.getParameter(Constants.DISPATCH);\r\n                    if ((param != null) && (param.equals(\"insertOrUpdate\")))\r\n                        page = Constants.PROJEKTATTRAKTIVITAET;\r\n                } else if (page.equals(Constants.KATEGORIEN) || page.equals(Constants.NUTZENKRITERIEN) || page.equals(Constants.FRAGEN) || page.equals(Constants.ABSTUFUNGEN) || page.equals(Constants.GEWICHTUNGEN)) {\r\n                    if (isOperativerNutzen())\r\n                        page += \"OpNu\";\r\n                    else\r\n                        page += \"Na\";\r\n                }\r\n            }\r\n        }\r\n        return page;\r\n    }\r\n\r\n    /**\r\n     * Gibt zurï¿½ck ob wir uns im Customizing Operativer Nutzens befinden\r\n     * oder nicht.\r\n     *\r\n     * @return                        true bei Operativer Nutzen, sonst false\r\n     */\r\n    public boolean isOperativerNutzen() {\r\n        HttpServletRequest request = (HttpServletRequest) pageContext.getRequest();\r\n        // Parameter Operativer Nutzen holen\r\n        String param = request.getParameter(Constants.OPERATIVER_NUTZEN);\r\n        logger.debug(\"Parameter=\" + param);\r\n        boolean paramNull = param == null ? true : false;\r\n        // Attribut Operativer Nutzen holen\r\n        String attr = (String) request.getAttribute(Constants.OPERATIVER_NUTZEN);\r\n        logger.debug(\"Attribut=\" + attr);\r\n        boolean attrNull = attr == null ? true : false;\r\n        HttpSession session = request.getSession();\r\n        // Parameter und Attribut ï¿½berprï¿½fen\r\n        if (!paramNull || !attrNull) {\r\n            // Operativer Nutzen durch Request festgestellt\r\n            if (!paramNull && param.equals(\"true\") || !attrNull && attr.equals(\"true\")) {\r\n                logger.debug(\"Operativer Nutzen (Request)\");\r\n                session.setAttribute(Constants.OPERATIVER_NUTZEN, \"true\");\r\n                return true;\r\n            } else // Operativer Nutzen durch Session festgestellt\r\n            if (!paramNull && param.equals(\"false\") || !attrNull && attr.equals(\"false\")) {\r\n                logger.debug(\"Nutzenattraktivitï¿½t (Session)\");\r\n                session.setAttribute(Constants.OPERATIVER_NUTZEN, \"false\");\r\n                return false;\r\n            }\r\n        } else // Session ï¿½berprï¿½fen\r\n        {\r\n            String opNu = (String) session.getAttribute(Constants.OPERATIVER_NUTZEN);\r\n            if (opNu.equals(\"true\")) {\r\n                logger.debug(\"Operativer Nutzen (Session)\");\r\n                return true;\r\n            } else {\r\n                logger.debug(\"Nutzenattraktivitï¿½t (Session)\");\r\n                return false;\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n}\r\n",
		"id": "EvoSuiteBenchmark/46_nutzenportfolio/src/main/java/ch/bfh/egov/nutzenportfolio/tag/CustomizingNavigationTest3.java",
		"test_prompt": "// CustomizingNavigationTest3.java\npackage ch.bfh.egov.nutzenportfolio.tag;\n\nimport javax.servlet.http.HttpServletRequest;\nimport javax.servlet.http.HttpSession;\nimport javax.servlet.jsp.JspWriter;\nimport javax.servlet.jsp.tagext.TagSupport;\nimport org.apache.commons.logging.Log;\nimport org.apache.commons.logging.LogFactory;\nimport ch.bfh.egov.nutzenportfolio.Constants;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link CustomizingNavigation}.\n* It contains ten unit test cases for the {@link CustomizingNavigation#isOperativerNutzen()} method.\n*/\nclass CustomizingNavigationTest3 {"
	}
]