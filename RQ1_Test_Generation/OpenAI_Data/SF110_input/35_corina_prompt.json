[
	{
		"original_code": "// UIDefaultsTableModel.java\npackage corina.prefs.components;\n\nimport java.awt.Color;\nimport java.awt.Component;\nimport java.awt.Font;\nimport java.awt.Frame;\nimport java.util.ArrayList;\nimport java.util.Arrays;\nimport java.util.Comparator;\nimport java.util.Enumeration;\nimport java.util.Hashtable;\nimport java.util.Iterator;\nimport java.util.Set;\nimport javax.swing.SwingUtilities;\nimport javax.swing.UIDefaults;\nimport javax.swing.UIManager;\nimport javax.swing.plaf.ColorUIResource;\nimport javax.swing.plaf.FontUIResource;\nimport javax.swing.table.AbstractTableModel;\nimport corina.core.App;\nimport corina.logging.CorinaLog;\n\npublic class UIDefaultsTableModel extends AbstractTableModel {\n\n    private static final CorinaLog log = new CorinaLog(UIDefaultsTableModel.class);\n\n    private Object[][] data;\n\n    private Component component;\n\n    public void setComponent(Component comp) {\n        component = comp;\n    }\n\n    public UIDefaultsTableModel() {\n        this(UIManager.getDefaults());\n    }\n\n    public UIDefaultsTableModel(Hashtable defaults) {\n        init(defaults);\n    }\n\n    public void init(Hashtable defaults) {\n        ArrayList list = new ArrayList(defaults.size());\n        Enumeration e = defaults.keys();\n        while (e.hasMoreElements()) {\n            Object key = e.nextElement();\n            Object value = defaults.get(key);\n            /*if (key.toString().toLowerCase().startsWith(\"menu\")) {\n        log.debug(\"uidefault \" + key.getClass() + \" '\" + key + \"' \" + value);\n      }*/\n            if (value == null)\n                continue;\n            if (!(value instanceof javax.swing.plaf.ColorUIResource) && !(value instanceof javax.swing.plaf.FontUIResource))\n                continue;\n            StringBuffer name = new StringBuffer(key.toString());\n            boolean lastWasSpace = false;\n            for (int i = 0; i < name.length(); i++) {\n                char c = name.charAt(i);\n                if (c == '.') {\n                    name.setCharAt(i, ' ');\n                    lastWasSpace = false;\n                } else if (Character.isWhitespace(c)) {\n                    lastWasSpace = true;\n                } else if (lastWasSpace) {\n                    name.setCharAt(i, Character.toUpperCase(c));\n                }\n            }\n            list.add(new Object[] { key, name.toString(), value });\n        }\n        data = (Object[][]) list.toArray(new Object[list.size()][2]);\n        Arrays.sort(data, new Comparator() {\n\n            public int compare(Object o1, Object o2) {\n                return ((String) ((Object[]) o1)[1]).compareTo((String) ((Object[]) o2)[1]);\n            }\n        });\n    }\n\n    public boolean isCellEditable(int rowIndex, int columnIndex) {\n        log.trace(\"isCellEditable \" + columnIndex + \" \" + (columnIndex == 1));\n        return columnIndex == 1;\n    }\n\n    public void setValueAt(Object value, int row, int col) {\n        Object original = data[row][col + 1];\n        log.trace(\"value: \" + value);\n        log.trace(\"original: \" + value);\n        if (original instanceof ColorUIResource) {\n            data[row][col + 1] = new ColorUIResource((Color) value);\n            UIManager.getDefaults().put(data[row][0], data[row][2]);\n        } else {\n            data[row][col + 1] = new FontUIResource((Font) value);\n            UIManager.getDefaults().put(data[row][0], data[row][2]);\n        }\n        fireTableCellUpdated(row, col);\n        SwingUtilities.invokeLater(new Runnable() {\n\n            public void run() {\n                Frame[] frames = Frame.getFrames();\n                if (frames == null)\n                    return;\n                for (int i = 0; i < frames.length; i++) {\n                    SwingUtilities.updateComponentTreeUI(frames[i]);\n                }\n            }\n        });\n    }\n\n    public synchronized void reset() {\n        UIDefaults uidefaults = UIManager.getDefaults();\n        CorinaLog.realErr.println(\"Clearing UIDefaults preferences\");\n        uidefaults.clear();\n        log.debug(\"UIDEFAULTS size: \" + App.prefs.getUIDefaults().size());\n        uidefaults.putAll(App.prefs.getUIDefaults());\n        /*Enumeration e = Prefs.UIDEFAULTS.keys();\n    while (e.hasMoreElements()) {\n      Object key = e.nextElement();\n      CorinaLog.realErr.println(\"putting \" + key);\n      uidefaults.put(key, Prefs.UIDEFAULTS.get(key));    \n    }*/\n        Set keyset = App.prefs.getPrefs().keySet();\n        Iterator it = keyset.iterator();\n        // must do this in two stages to avoid concurrent modification errors\n        ArrayList keylist = new ArrayList(keyset.size());\n        while (it.hasNext()) {\n            String key = it.next().toString();\n            if (key.startsWith(\"uidefaults.\")) {\n                CorinaLog.realErr.println(\"Found UIDefaults preference: \" + key);\n                keylist.add(key);\n            }\n        }\n        // now remove the prefs\n        it = keylist.iterator();\n        while (it.hasNext()) {\n            String key = (String) it.next();\n            CorinaLog.realErr.println(\"Removing UIDefaults preference: \" + key);\n            App.prefs.removePref(key);\n        }\n        App.prefs.getPrefs().list(System.out);\n        init(uidefaults);\n        fireTableDataChanged();\n        SwingUtilities.invokeLater(new Runnable() {\n\n            public void run() {\n                Frame[] frames = Frame.getFrames();\n                if (frames == null)\n                    return;\n                for (int i = 0; i < frames.length; i++) {\n                    SwingUtilities.updateComponentTreeUI(frames[i]);\n                }\n            }\n        });\n    }\n\n    public String getColumnName(int columnIndex) {\n        if (columnIndex == 0)\n            return \"Property\";\n        else\n            return \"Value\";\n    }\n\n    public Class getColumnClass(int c) {\n        log.trace(\"getColumnClass: \" + c);\n        if (c == 0)\n            return String.class;\n        else\n            return UIDefaultsTableModel.class;\n    }\n\n    public int getRowCount() {\n        return data.length;\n    }\n\n    public int getColumnCount() {\n        return 2;\n    }\n\n    public Object getValueAt(int row, int column) {\n        return data[row][column + 1];\n    }\n\n    public String getProperty(int row) {\n        return data[row][0].toString();\n    }\n}\n",
		"id": "/EvoSuiteBenchmark/35_corina/src/main/java/corina/prefs/components/UIDefaultsTableModel.java",
		"test_prompt": "// UIDefaultsTableModelTest.java\npackage corina.prefs.components;\n\nimport java.awt.Color;\nimport java.awt.Component;\nimport java.awt.Font;\nimport java.awt.Frame;\nimport java.util.ArrayList;\nimport java.util.Arrays;\nimport java.util.Comparator;\nimport java.util.Enumeration;\nimport java.util.Hashtable;\nimport java.util.Iterator;\nimport java.util.Set;\nimport javax.swing.SwingUtilities;\nimport javax.swing.UIDefaults;\nimport javax.swing.UIManager;\nimport javax.swing.plaf.ColorUIResource;\nimport javax.swing.plaf.FontUIResource;\nimport javax.swing.table.AbstractTableModel;\nimport corina.core.App;\nimport corina.logging.CorinaLog;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link UIDefaultsTableModel}.\n* It contains ten unit test cases for the {@link UIDefaultsTableModel#isCellEditable(int, int)} method.\n*/\nclass UIDefaultsTableModelTest {"
	},
	{
		"original_code": "// UIDefaultsEditor.java\npackage corina.prefs.components;\n\nimport java.awt.Color;\nimport java.awt.Component;\nimport java.awt.Font;\nimport javax.swing.JTable;\nimport javax.swing.AbstractCellEditor;\nimport javax.swing.table.TableCellEditor;\nimport javax.swing.event.CellEditorListener;\nimport javax.swing.event.ChangeEvent;\nimport javax.swing.plaf.ColorUIResource;\nimport javax.swing.plaf.FontUIResource;\nimport corina.logging.CorinaLog;\n\n/**\n * @author Aaron\n *\n * To change the template for this generated type comment go to\n * Window&gt;Preferences&gt;Java&gt;Code Generation&gt;Code and Comments\n */\npublic class UIDefaultsEditor extends AbstractCellEditor implements TableCellEditor, CellEditorListener {\n\n    private static final CorinaLog log = new CorinaLog(UIDefaultsEditor.class);\n\n    private ColorEditor colorEditor = new ColorEditor();\n\n    private FontEditor fontEditor = new FontEditor();\n\n    private TableCellEditor chosenEditor;\n\n    public UIDefaultsEditor() {\n        colorEditor.addCellEditorListener(this);\n        fontEditor.addCellEditorListener(this);\n    }\n\n    public Component getTableCellEditorComponent(JTable table, Object value, boolean isSelected, int row, int column) {\n        log.trace(\"getTableCellEditorComponent \" + value + \" \" + isSelected + \" \" + row + \" \" + column);\n        if (value instanceof ColorUIResource) {\n            log.trace(\"returning colorEditor\");\n            chosenEditor = colorEditor;\n            colorEditor.setColor((Color) value);\n            return colorEditor.getTableCellEditorComponent(table, value, isSelected, row, column);\n        } else if (value instanceof FontUIResource) {\n            log.trace(\"returning fontEditor\");\n            fontEditor.setText(table.getModel().getValueAt(row, 0).toString());\n            fontEditor.setFont((Font) value);\n            chosenEditor = fontEditor;\n            return fontEditor.getTableCellEditorComponent(table, value, isSelected, row, column);\n        } else\n            return null;\n    }\n\n    public Object getCellEditorValue() {\n        return chosenEditor.getCellEditorValue();\n    }\n\n    public void cancelCellEditing() {\n        chosenEditor.cancelCellEditing();\n    }\n\n    public boolean stopCellEditing() {\n        return chosenEditor.stopCellEditing();\n    }\n\n    public void editingCanceled(ChangeEvent e) {\n        super.cancelCellEditing();\n    }\n\n    public void editingStopped(ChangeEvent e) {\n        super.stopCellEditing();\n    }\n}\n",
		"id": "/EvoSuiteBenchmark/35_corina/src/main/java/corina/prefs/components/UIDefaultsEditor.java",
		"test_prompt": "// UIDefaultsEditorTest.java\npackage corina.prefs.components;\n\nimport java.awt.Color;\nimport java.awt.Component;\nimport java.awt.Font;\nimport javax.swing.JTable;\nimport javax.swing.AbstractCellEditor;\nimport javax.swing.table.TableCellEditor;\nimport javax.swing.event.CellEditorListener;\nimport javax.swing.event.ChangeEvent;\nimport javax.swing.plaf.ColorUIResource;\nimport javax.swing.plaf.FontUIResource;\nimport corina.logging.CorinaLog;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link UIDefaultsEditor}.\n* It contains ten unit test cases for the {@link UIDefaultsEditor#stopCellEditing()} method.\n*/\nclass UIDefaultsEditorTest {"
	},
	{
		"original_code": "// FontChooser.java\n//\n// This file is part of Corina.\n//\n// Corina is free software; you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation; either version 2 of the License, or\n// (at your option) any later version.\n//\n// Corina is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Corina; if not, write to the Free Software\n// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n//\n// Copyright 2001 Ken Harris <kbh7@cornell.edu>\n//\npackage corina.prefs.components;\n\nimport java.awt.Component;\nimport java.awt.Font;\nimport java.awt.Frame;\nimport java.awt.GraphicsEnvironment;\nimport java.awt.event.ActionEvent;\nimport java.awt.event.ItemEvent;\nimport java.awt.event.ItemListener;\nimport javax.swing.AbstractAction;\nimport javax.swing.BorderFactory;\nimport javax.swing.Box;\nimport javax.swing.BoxLayout;\nimport javax.swing.DefaultListCellRenderer;\nimport javax.swing.JButton;\nimport javax.swing.JCheckBox;\nimport javax.swing.JComboBox;\nimport javax.swing.JDialog;\nimport javax.swing.JLabel;\nimport javax.swing.JList;\nimport javax.swing.JPanel;\nimport javax.swing.JScrollPane;\nimport javax.swing.JTextField;\nimport javax.swing.SwingConstants;\nimport javax.swing.event.CaretEvent;\nimport javax.swing.event.CaretListener;\nimport javax.swing.event.ListSelectionEvent;\nimport javax.swing.event.ListSelectionListener;\nimport corina.core.App;\nimport corina.gui.Layout;\nimport corina.gui.UserCancelledException;\nimport corina.util.Center;\n\n/*\n  TODO:\n  -- sort fonts by name\n  -- show fonts in that font\n  -- scroll list to old selection\n\n  -- make resizable?\n  -- refactor layouts more\n\n  -- sun refuses to add native font-chooser support to java, so\n     document that here (bug id#) and add hooks to tie into native\n     font choosers.\n\n  -- document this class.  it needs it.\n\n  -- internationalize, and use Builder where possible\n  \n  -- javadoc!\n*/\npublic class FontChooser extends JDialog {\n\n    private String _name;\n\n    private int _style;\n\n    private int _size = 12;\n\n    private JTextField preview;\n\n    private JCheckBox plainCheck, boldCheck, italicCheck;\n\n    private boolean cancel = false;\n\n    private void update() {\n        // update preview text\n        preview.setFont(new Font(_name, _style, _size));\n    }\n\n    private FontChooser(Frame owner, String title, String oldFont) {\n        // dialog-stuff\n        super(owner, title, true);\n        // extract\n        {\n            Font myFont = Font.decode(oldFont);\n            _name = myFont.getName();\n            _style = myFont.getStyle();\n            _size = myFont.getSize();\n        }\n        // name component\n        String[] allFonts = GraphicsEnvironment.getLocalGraphicsEnvironment().getAvailableFontFamilyNames();\n        // make fonts[], like allFonts[], but for each name[0] is-a letter.\n        int numberOfFonts = 0;\n        for (int i = 0; i < allFonts.length; i++) if (Character.isLetter(allFonts[i].charAt(0)))\n            numberOfFonts++;\n        final String[] fonts = new String[numberOfFonts];\n        int currentFont = 0;\n        for (int i = 0; i < allFonts.length; i++) if (Character.isLetter(allFonts[i].charAt(0)))\n            fonts[currentFont++] = allFonts[i];\n        // WAS: final String fonts[] = GraphicsEnvironment.getLocalGraphicsEnvironment().getAvailableFontFamilyNames();\n        JList nameList = new JList(fonts);\n        for (// hack -- pick the font name\n        int i = 0; // hack -- pick the font name\n        i < fonts.length; // hack -- pick the font name\n        i++) if (fonts[i].compareToIgnoreCase(_name) == 0)\n            nameList.setSelectedIndex(i);\n        nameList.setCellRenderer(new DefaultListCellRenderer() {\n\n            public Component getListCellRendererComponent(JList list, Object value, int index, boolean isSelected, boolean cellHasFocus) {\n                String s = value.toString();\n                setText(s);\n                if (isSelected) {\n                    setBackground(list.getSelectionBackground());\n                    setForeground(list.getSelectionForeground());\n                } else {\n                    setBackground(list.getBackground());\n                    setForeground(list.getForeground());\n                }\n                setEnabled(list.isEnabled());\n                setFont(new Font((String) value, Font.PLAIN, 12));\n                // PERF: NEW!\n                return this;\n            }\n        });\n        nameList.addListSelectionListener(new ListSelectionListener() {\n\n            public void valueChanged(ListSelectionEvent e) {\n                _name = fonts[((JList) e.getSource()).getSelectedIndex()];\n                update();\n            }\n        });\n        nameList.setAlignmentX(Component.LEFT_ALIGNMENT);\n        JScrollPane nameScroller = new JScrollPane(nameList);\n        nameScroller.setAlignmentX(Component.LEFT_ALIGNMENT);\n        JLabel nameLabel = new JLabel(\"Name:\");\n        if (!App.platform.isMac())\n            nameLabel.setDisplayedMnemonic('N');\n        nameLabel.setLabelFor(nameList);\n        nameLabel.setAlignmentX(Component.LEFT_ALIGNMENT);\n        // style components: plain\n        plainCheck = new JCheckBox(\"Plain\", _style == Font.PLAIN);\n        if (!App.platform.isMac())\n            plainCheck.setMnemonic('P');\n        plainCheck.addActionListener(new AbstractAction() {\n\n            public void actionPerformed(ActionEvent e) {\n                if (plainCheck.isSelected()) {\n                    // unselect bold, italic\n                    boldCheck.setSelected(false);\n                    italicCheck.setSelected(false);\n                    _style = Font.PLAIN;\n                    update();\n                } else {\n                    // can't unselect plain\n                    plainCheck.setSelected(true);\n                }\n            }\n        });\n        // style components: bold\n        boldCheck = new JCheckBox(\"Bold\", (_style & Font.BOLD) != 0);\n        if (!App.platform.isMac())\n            boldCheck.setMnemonic('B');\n        boldCheck.addActionListener(new AbstractAction() {\n\n            public void actionPerformed(ActionEvent e) {\n                if (boldCheck.isSelected()) {\n                    // unselect plain\n                    plainCheck.setSelected(false);\n                } else {\n                    // plain?\n                    if (!italicCheck.isSelected())\n                        plainCheck.setSelected(true);\n                }\n                _style ^= Font.BOLD;\n                update();\n            }\n        });\n        // style components: italic\n        italicCheck = new JCheckBox(\"Italic\", (_style & Font.ITALIC) != 0);\n        if (!App.platform.isMac())\n            italicCheck.setMnemonic('I');\n        italicCheck.addActionListener(new AbstractAction() {\n\n            public void actionPerformed(ActionEvent e) {\n                if (italicCheck.isSelected()) {\n                    // unselect plain\n                    plainCheck.setSelected(false);\n                } else {\n                    // plain?\n                    if (!boldCheck.isSelected())\n                        plainCheck.setSelected(true);\n                }\n                _style ^= Font.ITALIC;\n                update();\n            }\n        });\n        // size component\n        JComboBox sizeCombo = new JComboBox(new String[] { \"8\", \"9\", \"10\", \"12\", \"14\", \"18\", \"20\", \"24\" });\n        sizeCombo.setEditable(true);\n        sizeCombo.setSelectedItem(String.valueOf(_size));\n        sizeCombo.addItemListener(new ItemListener() {\n\n            public void itemStateChanged(ItemEvent e) {\n                try {\n                    _size = Integer.parseInt((String) ((JComboBox) e.getSource()).getSelectedItem());\n                } catch (NumberFormatException nfe) {\n                    _size = 12;\n                }\n                update();\n            }\n        });\n        ((JTextField) sizeCombo.getEditor().getEditorComponent()).addCaretListener(new CaretListener() {\n\n            public void caretUpdate(CaretEvent e) {\n                try {\n                    _size = Integer.parseInt(((JTextField) e.getSource()).getText());\n                } catch (NumberFormatException nfe) {\n                    _size = 12;\n                }\n                update();\n            }\n        });\n        sizeCombo.setAlignmentX(Component.LEFT_ALIGNMENT);\n        JLabel sizeLabel = new JLabel(\"Size:\");\n        if (!App.platform.isMac())\n            sizeLabel.setDisplayedMnemonic('S');\n        sizeLabel.setLabelFor(sizeCombo);\n        sizeLabel.setAlignmentX(Component.LEFT_ALIGNMENT);\n        JLabel styleLabel = new JLabel(\"Style:\");\n        sizeLabel.setAlignmentX(Component.LEFT_ALIGNMENT);\n        // buttons\n        JButton okButton = new JButton(\"OK\");\n        okButton.addActionListener(new AbstractAction() {\n\n            public void actionPerformed(ActionEvent e) {\n                dispose();\n            }\n        });\n        JButton cancelButton = new JButton(\"Cancel\");\n        cancelButton.addActionListener(new AbstractAction() {\n\n            public void actionPerformed(ActionEvent e) {\n                cancel = true;\n                dispose();\n            }\n        });\n        // preview\n        preview = new JTextField(\"sample text - abc XYZ 123\");\n        preview.setAlignmentX(Component.LEFT_ALIGNMENT);\n        JLabel previewLabel = new JLabel(\"Preview:\");\n        previewLabel.setHorizontalTextPosition(SwingConstants.LEADING);\n        previewLabel.setAlignmentX(Component.LEFT_ALIGNMENT);\n        // layout\n        JPanel names = Layout.boxLayoutY(nameLabel, nameScroller);\n        JPanel styles = new JPanel();\n        styles.setLayout(new BoxLayout(styles, BoxLayout.Y_AXIS));\n        styles.add(styleLabel);\n        styles.add(plainCheck);\n        styles.add(boldCheck);\n        styles.add(italicCheck);\n        styles.add(Box.createVerticalStrut(8));\n        styles.add(sizeLabel);\n        styles.add(sizeCombo);\n        styles.add(Box.createVerticalGlue());\n        JPanel top = new JPanel();\n        top.setLayout(new BoxLayout(top, BoxLayout.X_AXIS));\n        top.add(names);\n        top.add(Box.createHorizontalStrut(8));\n        top.add(styles);\n        top.add(Box.createHorizontalStrut(8));\n        // add size list\n        JPanel buttons = Layout.buttonLayout(cancelButton, okButton);\n        buttons.setBorder(BorderFactory.createEmptyBorder(14, 14, 14, 14));\n        // why's it wrapped in a borderlayout?\n        JPanel pre = Layout.borderLayout(null, null, preview, null, null);\n        JPanel box = new JPanel();\n        box.setLayout(new BoxLayout(box, BoxLayout.Y_AXIS));\n        box.add(Box.createVerticalStrut(16));\n        box.add(top);\n        box.add(Box.createVerticalStrut(16));\n        box.add(pre);\n        box.add(Box.createVerticalStrut(16));\n        JPanel content = Layout.borderLayout(null, Box.createHorizontalStrut(24), box, Box.createHorizontalStrut(24), buttons);\n        setContentPane(content);\n        getRootPane().setDefaultButton(okButton);\n        // REFACTOR: can use okcancel, if not for the non-trivial cancel operation\n        // show\n        update();\n        pack();\n        //\tsetResizable(false);\n        setModal(true);\n        Center.center(this, owner);\n        show();\n    }\n\n    private String getResult() throws UserCancelledException {\n        if (cancel)\n            throw new UserCancelledException();\n        String style = \"plain\";\n        Font myFont = new Font(_name, _style, _size);\n        if (// not pretty\n        myFont.isItalic() && myFont.isBold())\n            style = \"BOLDitalic\";\n        else if (myFont.isItalic())\n            style = \"italic\";\n        else if (myFont.isBold())\n            style = \"BOLD\";\n        return myFont.getName() + \"-\" + style + \"-\" + myFont.getSize();\n    }\n\n    // should use Fonts instead of Strings, but who's counting?\n    public static String showDialog(Frame owner, String title, String oldFont) throws UserCancelledException {\n        FontChooser f = new FontChooser(owner, title, oldFont);\n        return f.getResult();\n    }\n}\n",
		"id": "/EvoSuiteBenchmark/35_corina/src/main/java/corina/prefs/components/FontChooser.java",
		"test_prompt": "// FontChooserTest.java\n// This file is part of Corina.\n//\n// Corina is free software; you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation; either version 2 of the License, or\n// (at your option) any later version.\n//\n// Corina is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Corina; if not, write to the Free Software\n// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n//\n// Copyright 2001 Ken Harris <kbh7@cornell.edu>\n//\npackage corina.prefs.components;\n\nimport java.awt.Component;\nimport java.awt.Font;\nimport java.awt.Frame;\nimport java.awt.GraphicsEnvironment;\nimport java.awt.event.ActionEvent;\nimport java.awt.event.ItemEvent;\nimport java.awt.event.ItemListener;\nimport javax.swing.AbstractAction;\nimport javax.swing.BorderFactory;\nimport javax.swing.Box;\nimport javax.swing.BoxLayout;\nimport javax.swing.DefaultListCellRenderer;\nimport javax.swing.JButton;\nimport javax.swing.JCheckBox;\nimport javax.swing.JComboBox;\nimport javax.swing.JDialog;\nimport javax.swing.JLabel;\nimport javax.swing.JList;\nimport javax.swing.JPanel;\nimport javax.swing.JScrollPane;\nimport javax.swing.JTextField;\nimport javax.swing.SwingConstants;\nimport javax.swing.event.CaretEvent;\nimport javax.swing.event.CaretListener;\nimport javax.swing.event.ListSelectionEvent;\nimport javax.swing.event.ListSelectionListener;\nimport corina.core.App;\nimport corina.gui.Layout;\nimport corina.gui.UserCancelledException;\nimport corina.util.Center;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link FontChooser}.\n* It contains ten unit test cases for the {@link FontChooser#showDialog(Frame, String, String)} method.\n*/\nclass FontChooserTest {"
	},
	{
		"original_code": "// Geometry.java\npackage corina.prefs;\n\nimport java.awt.Window;\nimport java.awt.Rectangle;\nimport java.util.StringTokenizer;\n\n/**\n *   The position and size of a window.  It's stored <a\n *   href=\"http://www.x.org/\">X</a>-style, i.e., \"300x200+50+40\" means a\n *   window 300 pixels wide, 200 pixels tall, with the upper-left corner\n *   50 pixels from the top of the screen and 40 pixels from the left\n *   edge of the screen.\n *\n *   <p>Methods are provided for both encoding the geometry given a window\n *   (for storing in preferences, for example) and decoding a geometry\n *   string directly to a window (for reading from preferences, for example).</p>\n *\n *   @author Ken Harris &lt;kbh7 <i style=\"color: gray\">at</i> cornell <i style=\"color: gray\">dot</i> edu&gt;\n *   @version $Id: Geometry.java,v 1.1 2004/01/18 18:07:47 aaron Exp $\n */\npublic class Geometry {\n\n    /**\n     *  Given a window, generate a geometry string.\n     * \t@param w the window to examine\n     * \t@return a geometry string for this window\n     */\n    public static String encode(Window w) {\n        Rectangle bounds = w.getBounds();\n        return bounds.width + \"x\" + bounds.height + \"+\" + bounds.x + \"+\" + bounds.y;\n    }\n\n    /**\n     *  Given a window and a geometry string, set the window's\n     * \tgeometry to that.  (If it would go off the edge of the\n     * \tscreen, or be too small, it's adjusted, as little as possible.)\n     * \t@param w the window to move/resize\n     * \t@param geometry the geometry to use\n     */\n    public static void decode(Window w, String geometry) {\n        // parse |geometry|\n        Rectangle geom = new Rectangle();\n        StringTokenizer tok = new StringTokenizer(geometry, \"+x \");\n        geom.width = Integer.parseInt(tok.nextToken());\n        geom.height = Integer.parseInt(tok.nextToken());\n        geom.x = Integer.parseInt(tok.nextToken());\n        geom.y = Integer.parseInt(tok.nextToken());\n        // make sure the window is big enough, and not off-screen.\n        // (partially off-screen is ok, but not completely.  title bar\n        // must be visible, and at least 100px wide on-screen, for dragging.)\n        // WRITEME\n        // set window bounds\n        w.setBounds(geom);\n    }\n}\n",
		"id": "/EvoSuiteBenchmark/35_corina/src/main/java/corina/prefs/Geometry.java",
		"test_prompt": "// GeometryTest.java\npackage corina.prefs;\n\nimport java.awt.Window;\nimport java.awt.Rectangle;\nimport java.util.StringTokenizer;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link Geometry}.\n* It contains ten unit test cases for the {@link Geometry#encode(Window)} method.\n*/\nclass GeometryTest {"
	},
	{
		"original_code": "// Builder.java\npackage corina.ui;\n\nimport java.awt.Image;\nimport java.awt.event.ActionEvent;\nimport java.lang.reflect.Method;\nimport java.util.StringTokenizer;\nimport javax.swing.AbstractAction;\nimport javax.swing.AbstractButton;\nimport javax.swing.Icon;\nimport javax.swing.ImageIcon;\nimport javax.swing.JButton;\nimport javax.swing.JLabel;\nimport javax.swing.JMenu;\nimport javax.swing.JMenuItem;\nimport javax.swing.JRadioButton;\nimport javax.swing.JRadioButtonMenuItem;\nimport javax.swing.JCheckBoxMenuItem;\nimport javax.swing.KeyStroke;\nimport corina.core.App;\n\n// TODO: if on 1.4, use setDisplayedMnemonicIndex() so \"Save &As...\"\n// underlines the correct 'A'\npublic class Builder {\n\n    // (don't instantiate me)\n    private Builder() {\n    }\n\n    // UNUSED!\n    // 4 spaces\n    public final static String INDENT = \"    \";\n\n    public static JMenu makeMenu(String key) {\n        JMenu m = new JMenu();\n        // TODO: set font only on java<1.4?\n        // NOTE: now using UIDefaults customization through Appearance Panel\n        // instead of corina.menubar.font property - cross this off PRIORITY list\n        m.setText(I18n.getText(key));\n        if (!App.platform.isMac()) {\n            Character mnemonic = I18n.getMnemonic(key);\n            if (mnemonic != null)\n                m.setMnemonic(mnemonic.charValue());\n        }\n        return m;\n    }\n\n    public static JMenuItem makeMenuItem(String key) {\n        JMenuItem m = new JMenuItem(\"\");\n        // TODO: set font only on java<1.4?\n        // NOTE: now using UIDefaults customization through Appearance Panel\n        // instead of corina.menubar.font property - cross this off PRIORITY list\n        m.setText(I18n.getText(key));\n        if (!App.platform.isMac()) {\n            Character mnemonic = I18n.getMnemonic(key);\n            if (mnemonic != null)\n                m.setMnemonic(mnemonic.charValue());\n        }\n        String keystroke = I18n.getKeyStroke(key);\n        if (keystroke != null)\n            m.setAccelerator(KeyStroke.getKeyStroke(keystroke));\n        return m;\n    }\n\n    public static JMenuItem makeMenuItem(String key, boolean enabled) {\n        JMenuItem m = makeMenuItem(key);\n        m.setEnabled(enabled);\n        return m;\n    }\n\n    public static JMenuItem makeMenuItem(String key, String action) {\n        JMenuItem m = makeMenuItem(key);\n        addAction(m, action);\n        return m;\n    }\n\n    public static JCheckBoxMenuItem makeCheckBoxMenuItem(String key) {\n        JCheckBoxMenuItem m = new JCheckBoxMenuItem(\"\");\n        // TODO: set font only on java<1.4?\n        // NOTE: now using UIDefaults customization through Appearance Panel\n        // instead of corina.menubar.font property - cross this off PRIORITY list\n        m.setText(I18n.getText(key));\n        if (!App.platform.isMac()) {\n            Character mnemonic = I18n.getMnemonic(key);\n            if (mnemonic != null)\n                m.setMnemonic(mnemonic.charValue());\n        }\n        String keystroke = I18n.getKeyStroke(key);\n        if (keystroke != null)\n            m.setAccelerator(KeyStroke.getKeyStroke(keystroke));\n        return m;\n    }\n\n    public static JRadioButtonMenuItem makeRadioButtonMenuItem(String key) {\n        JRadioButtonMenuItem m = new JRadioButtonMenuItem(\"\");\n        // TODO: set font only on java<1.4?\n        // NOTE: now using UIDefaults customization through Appearance Panel\n        // instead of corina.menubar.font property - cross this off PRIORITY list\n        m.setText(I18n.getText(key));\n        if (!App.platform.isMac()) {\n            Character mnemonic = I18n.getMnemonic(key);\n            if (mnemonic != null)\n                m.setMnemonic(mnemonic.charValue());\n        }\n        String keystroke = I18n.getKeyStroke(key);\n        if (keystroke != null)\n            m.setAccelerator(KeyStroke.getKeyStroke(keystroke));\n        return m;\n    }\n\n    public static JButton makeButton(String key) {\n        JButton b = new JButton();\n        b.setText(I18n.getText(key));\n        if (!App.platform.isMac()) {\n            Character mnemonic = I18n.getMnemonic(key);\n            if (mnemonic != null)\n                b.setMnemonic(mnemonic.charValue());\n        }\n        return b;\n    }\n\n    public static JLabel makeLabel(String key) {\n        JLabel l = new JLabel();\n        l.setText(I18n.getText(key));\n        return l;\n    }\n\n    public static JRadioButton makeRadioButton(String key) {\n        JRadioButton r = new JRadioButton();\n        r.setText(I18n.getText(key));\n        if (!App.platform.isMac()) {\n            Character mnemonic = I18n.getMnemonic(key);\n            if (mnemonic != null)\n                r.setMnemonic(mnemonic.charValue());\n        }\n        return r;\n    }\n\n    // i make icons from files in Images/ so often, i'll just make it a builder method.\n    // use: Builder.getIcon(\"x.png\") returns an Icon made from the file \"Images/x.png\".\n    public static Icon getIcon(String name) {\n        java.net.URL url = cl.getResource(\"Images/\" + name);\n        if (url != null)\n            return new ImageIcon(url);\n        else\n            return null;\n    }\n\n    // TODO: Cursor makeCursor(String name)\n    // (yeah, it's pretty much the same as getIcon(), but don't tell anybody!)\n    public static Image getImage(String name) {\n        java.net.URL url = cl.getResource(\"Images/\" + name);\n        if (url != null)\n            return new ImageIcon(url).getImage();\n        else\n            return null;\n    }\n\n    // my classloador, for getting icons as resources.\n    private static ClassLoader cl = corina.ui.Builder.class.getClassLoader();\n\n    // ----------------------------------------\n    /*\n\t REFACTOR!\n\t \n\t pattern:\n\t \n\t A.addActionListener(new AbstractAction() {\n\t public void actionPerformed(ActionEvent e) {\n\t new B();\n\t }\n\t });\n\t \n\t or:\n\t \n\t A.addActionListener(new AbstractAction() {\n\t public void actionPerformed(ActionEvent e) {\n\t B.c();\n\t }\n\t });\n\t \n\t -- of course, what i really want is simpler closures.\n\t can i fake that easily?\n\t \n\t how about another param for Builder?\n\t Builder.makeMenuItem(\"crossdate_kit\", \"new CrossdateKit();\");\n\t not perfect, but it would make my job easier in places, i think.\n\t (same for buttons?)\n\t */\n    /**\n     * An easy way to add actions.  The action string is of the form\n     * <code>\"new package.SomeClass();\"</code> or\n     * <code>\"package.SomeClass.staticMethod();</code>.  Be sure to\n     * fully-qualify the class name.\n     * @param button a JButton or JMenuItem\n     * @param action an action string\n     */\n    public static void addAction(AbstractButton button, String action) {\n        // parse |action|\n        action = action.trim();\n        StringTokenizer tok = new StringTokenizer(action, \" ();\");\n        String arg1 = tok.nextToken();\n        // \"new package.SomeClass();\"\n        if (arg1.equals(\"new\")) {\n            String arg2 = tok.nextToken();\n            try {\n                final Class c = Class.forName(arg2);\n                button.addActionListener(new AbstractAction() {\n\n                    public void actionPerformed(ActionEvent e) {\n                        try {\n                            c.newInstance();\n                        } catch (Exception ex) {\n                            System.out.println(\"Builder.addAction(): can't instantiate \" + c);\n                            // FIXME?  (state what the action was, at least)\n                            ex.printStackTrace(System.out);\n                        }\n                    }\n                });\n            } catch (ClassNotFoundException cnfe) {\n                throw new IllegalArgumentException(\"class '\" + arg2 + \"' not found\");\n            }\n            return;\n        }\n        // \"package.SomeClass.staticMethod();\"\n        int lastDot = action.lastIndexOf(\".\");\n        if (lastDot == -1)\n            throw new IllegalArgumentException(\"no 'new' or '.' in action string\");\n        final String className = action.substring(0, lastDot);\n        // the method name is everything after the last dot, for as long\n        // as java-identifier chars are available.\n        String methodName = action.substring(lastDot + 1);\n        while (!Character.isJavaIdentifierPart(methodName.charAt(methodName.length() - 1))) methodName = methodName.substring(0, methodName.length() - 1);\n        final String methodNameGlue = methodName;\n        try {\n            Class c = Class.forName(className);\n            final Method m = c.getMethod(methodName, new Class[] {});\n            button.addActionListener(new AbstractAction() {\n\n                public void actionPerformed(ActionEvent e) {\n                    try {\n                        m.invoke(null, new Object[] {});\n                        // IllegalAccess, InvocationTarget exceptions\n                    } catch (Exception ex) {\n                        ex.printStackTrace();\n                        throw new IllegalArgumentException(\"Builder.addAction(): can't invoke \" + \"requested method (\" + methodNameGlue + \" in \" + className + \")\");\n                    }\n                }\n            });\n        } catch (ClassNotFoundException cnfe) {\n            throw new IllegalArgumentException(\"Builder.addAction(): can't find requested class\");\n        } catch (NoSuchMethodException nsme) {\n            throw new IllegalArgumentException(\"Builder.addAction(): can't find requested method\");\n        }\n    }\n}\n",
		"id": "/EvoSuiteBenchmark/35_corina/src/main/java/corina/ui/Builder_0Test.java",
		"test_prompt": "// Builder_0Test.java\npackage corina.ui;\n\nimport java.awt.Image;\nimport java.awt.event.ActionEvent;\nimport java.lang.reflect.Method;\nimport java.util.StringTokenizer;\nimport javax.swing.AbstractAction;\nimport javax.swing.AbstractButton;\nimport javax.swing.Icon;\nimport javax.swing.ImageIcon;\nimport javax.swing.JButton;\nimport javax.swing.JLabel;\nimport javax.swing.JMenu;\nimport javax.swing.JMenuItem;\nimport javax.swing.JRadioButton;\nimport javax.swing.JRadioButtonMenuItem;\nimport javax.swing.JCheckBoxMenuItem;\nimport javax.swing.KeyStroke;\nimport corina.core.App;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link Builder}.\n* It contains ten unit test cases for the {@link Builder#makeMenu(String)} method.\n*/\nclass Builder_0Test {"
	},
	{
		"original_code": "// Builder.java\npackage corina.ui;\n\nimport java.awt.Image;\nimport java.awt.event.ActionEvent;\nimport java.lang.reflect.Method;\nimport java.util.StringTokenizer;\nimport javax.swing.AbstractAction;\nimport javax.swing.AbstractButton;\nimport javax.swing.Icon;\nimport javax.swing.ImageIcon;\nimport javax.swing.JButton;\nimport javax.swing.JLabel;\nimport javax.swing.JMenu;\nimport javax.swing.JMenuItem;\nimport javax.swing.JRadioButton;\nimport javax.swing.JRadioButtonMenuItem;\nimport javax.swing.JCheckBoxMenuItem;\nimport javax.swing.KeyStroke;\nimport corina.core.App;\n\n// TODO: if on 1.4, use setDisplayedMnemonicIndex() so \"Save &As...\"\n// underlines the correct 'A'\npublic class Builder {\n\n    // (don't instantiate me)\n    private Builder() {\n    }\n\n    // UNUSED!\n    // 4 spaces\n    public final static String INDENT = \"    \";\n\n    public static JMenu makeMenu(String key) {\n        JMenu m = new JMenu();\n        // TODO: set font only on java<1.4?\n        // NOTE: now using UIDefaults customization through Appearance Panel\n        // instead of corina.menubar.font property - cross this off PRIORITY list\n        m.setText(I18n.getText(key));\n        if (!App.platform.isMac()) {\n            Character mnemonic = I18n.getMnemonic(key);\n            if (mnemonic != null)\n                m.setMnemonic(mnemonic.charValue());\n        }\n        return m;\n    }\n\n    public static JMenuItem makeMenuItem(String key) {\n        JMenuItem m = new JMenuItem(\"\");\n        // TODO: set font only on java<1.4?\n        // NOTE: now using UIDefaults customization through Appearance Panel\n        // instead of corina.menubar.font property - cross this off PRIORITY list\n        m.setText(I18n.getText(key));\n        if (!App.platform.isMac()) {\n            Character mnemonic = I18n.getMnemonic(key);\n            if (mnemonic != null)\n                m.setMnemonic(mnemonic.charValue());\n        }\n        String keystroke = I18n.getKeyStroke(key);\n        if (keystroke != null)\n            m.setAccelerator(KeyStroke.getKeyStroke(keystroke));\n        return m;\n    }\n\n    public static JMenuItem makeMenuItem(String key, boolean enabled) {\n        JMenuItem m = makeMenuItem(key);\n        m.setEnabled(enabled);\n        return m;\n    }\n\n    public static JMenuItem makeMenuItem(String key, String action) {\n        JMenuItem m = makeMenuItem(key);\n        addAction(m, action);\n        return m;\n    }\n\n    public static JCheckBoxMenuItem makeCheckBoxMenuItem(String key) {\n        JCheckBoxMenuItem m = new JCheckBoxMenuItem(\"\");\n        // TODO: set font only on java<1.4?\n        // NOTE: now using UIDefaults customization through Appearance Panel\n        // instead of corina.menubar.font property - cross this off PRIORITY list\n        m.setText(I18n.getText(key));\n        if (!App.platform.isMac()) {\n            Character mnemonic = I18n.getMnemonic(key);\n            if (mnemonic != null)\n                m.setMnemonic(mnemonic.charValue());\n        }\n        String keystroke = I18n.getKeyStroke(key);\n        if (keystroke != null)\n            m.setAccelerator(KeyStroke.getKeyStroke(keystroke));\n        return m;\n    }\n\n    public static JRadioButtonMenuItem makeRadioButtonMenuItem(String key) {\n        JRadioButtonMenuItem m = new JRadioButtonMenuItem(\"\");\n        // TODO: set font only on java<1.4?\n        // NOTE: now using UIDefaults customization through Appearance Panel\n        // instead of corina.menubar.font property - cross this off PRIORITY list\n        m.setText(I18n.getText(key));\n        if (!App.platform.isMac()) {\n            Character mnemonic = I18n.getMnemonic(key);\n            if (mnemonic != null)\n                m.setMnemonic(mnemonic.charValue());\n        }\n        String keystroke = I18n.getKeyStroke(key);\n        if (keystroke != null)\n            m.setAccelerator(KeyStroke.getKeyStroke(keystroke));\n        return m;\n    }\n\n    public static JButton makeButton(String key) {\n        JButton b = new JButton();\n        b.setText(I18n.getText(key));\n        if (!App.platform.isMac()) {\n            Character mnemonic = I18n.getMnemonic(key);\n            if (mnemonic != null)\n                b.setMnemonic(mnemonic.charValue());\n        }\n        return b;\n    }\n\n    public static JLabel makeLabel(String key) {\n        JLabel l = new JLabel();\n        l.setText(I18n.getText(key));\n        return l;\n    }\n\n    public static JRadioButton makeRadioButton(String key) {\n        JRadioButton r = new JRadioButton();\n        r.setText(I18n.getText(key));\n        if (!App.platform.isMac()) {\n            Character mnemonic = I18n.getMnemonic(key);\n            if (mnemonic != null)\n                r.setMnemonic(mnemonic.charValue());\n        }\n        return r;\n    }\n\n    // i make icons from files in Images/ so often, i'll just make it a builder method.\n    // use: Builder.getIcon(\"x.png\") returns an Icon made from the file \"Images/x.png\".\n    public static Icon getIcon(String name) {\n        java.net.URL url = cl.getResource(\"Images/\" + name);\n        if (url != null)\n            return new ImageIcon(url);\n        else\n            return null;\n    }\n\n    // TODO: Cursor makeCursor(String name)\n    // (yeah, it's pretty much the same as getIcon(), but don't tell anybody!)\n    public static Image getImage(String name) {\n        java.net.URL url = cl.getResource(\"Images/\" + name);\n        if (url != null)\n            return new ImageIcon(url).getImage();\n        else\n            return null;\n    }\n\n    // my classloador, for getting icons as resources.\n    private static ClassLoader cl = corina.ui.Builder.class.getClassLoader();\n\n    // ----------------------------------------\n    /*\n\t REFACTOR!\n\t \n\t pattern:\n\t \n\t A.addActionListener(new AbstractAction() {\n\t public void actionPerformed(ActionEvent e) {\n\t new B();\n\t }\n\t });\n\t \n\t or:\n\t \n\t A.addActionListener(new AbstractAction() {\n\t public void actionPerformed(ActionEvent e) {\n\t B.c();\n\t }\n\t });\n\t \n\t -- of course, what i really want is simpler closures.\n\t can i fake that easily?\n\t \n\t how about another param for Builder?\n\t Builder.makeMenuItem(\"crossdate_kit\", \"new CrossdateKit();\");\n\t not perfect, but it would make my job easier in places, i think.\n\t (same for buttons?)\n\t */\n    /**\n     * An easy way to add actions.  The action string is of the form\n     * <code>\"new package.SomeClass();\"</code> or\n     * <code>\"package.SomeClass.staticMethod();</code>.  Be sure to\n     * fully-qualify the class name.\n     * @param button a JButton or JMenuItem\n     * @param action an action string\n     */\n    public static void addAction(AbstractButton button, String action) {\n        // parse |action|\n        action = action.trim();\n        StringTokenizer tok = new StringTokenizer(action, \" ();\");\n        String arg1 = tok.nextToken();\n        // \"new package.SomeClass();\"\n        if (arg1.equals(\"new\")) {\n            String arg2 = tok.nextToken();\n            try {\n                final Class c = Class.forName(arg2);\n                button.addActionListener(new AbstractAction() {\n\n                    public void actionPerformed(ActionEvent e) {\n                        try {\n                            c.newInstance();\n                        } catch (Exception ex) {\n                            System.out.println(\"Builder.addAction(): can't instantiate \" + c);\n                            // FIXME?  (state what the action was, at least)\n                            ex.printStackTrace(System.out);\n                        }\n                    }\n                });\n            } catch (ClassNotFoundException cnfe) {\n                throw new IllegalArgumentException(\"class '\" + arg2 + \"' not found\");\n            }\n            return;\n        }\n        // \"package.SomeClass.staticMethod();\"\n        int lastDot = action.lastIndexOf(\".\");\n        if (lastDot == -1)\n            throw new IllegalArgumentException(\"no 'new' or '.' in action string\");\n        final String className = action.substring(0, lastDot);\n        // the method name is everything after the last dot, for as long\n        // as java-identifier chars are available.\n        String methodName = action.substring(lastDot + 1);\n        while (!Character.isJavaIdentifierPart(methodName.charAt(methodName.length() - 1))) methodName = methodName.substring(0, methodName.length() - 1);\n        final String methodNameGlue = methodName;\n        try {\n            Class c = Class.forName(className);\n            final Method m = c.getMethod(methodName, new Class[] {});\n            button.addActionListener(new AbstractAction() {\n\n                public void actionPerformed(ActionEvent e) {\n                    try {\n                        m.invoke(null, new Object[] {});\n                        // IllegalAccess, InvocationTarget exceptions\n                    } catch (Exception ex) {\n                        ex.printStackTrace();\n                        throw new IllegalArgumentException(\"Builder.addAction(): can't invoke \" + \"requested method (\" + methodNameGlue + \" in \" + className + \")\");\n                    }\n                }\n            });\n        } catch (ClassNotFoundException cnfe) {\n            throw new IllegalArgumentException(\"Builder.addAction(): can't find requested class\");\n        } catch (NoSuchMethodException nsme) {\n            throw new IllegalArgumentException(\"Builder.addAction(): can't find requested method\");\n        }\n    }\n}\n",
		"id": "/EvoSuiteBenchmark/35_corina/src/main/java/corina/ui/Builder_1Test.java",
		"test_prompt": "// Builder_1Test.java\npackage corina.ui;\n\nimport java.awt.Image;\nimport java.awt.event.ActionEvent;\nimport java.lang.reflect.Method;\nimport java.util.StringTokenizer;\nimport javax.swing.AbstractAction;\nimport javax.swing.AbstractButton;\nimport javax.swing.Icon;\nimport javax.swing.ImageIcon;\nimport javax.swing.JButton;\nimport javax.swing.JLabel;\nimport javax.swing.JMenu;\nimport javax.swing.JMenuItem;\nimport javax.swing.JRadioButton;\nimport javax.swing.JRadioButtonMenuItem;\nimport javax.swing.JCheckBoxMenuItem;\nimport javax.swing.KeyStroke;\nimport corina.core.App;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link Builder}.\n* It contains ten unit test cases for the {@link Builder#makeMenuItem(String)} method.\n*/\nclass Builder_1Test {"
	},
	{
		"original_code": "// Builder.java\npackage corina.ui;\n\nimport java.awt.Image;\nimport java.awt.event.ActionEvent;\nimport java.lang.reflect.Method;\nimport java.util.StringTokenizer;\nimport javax.swing.AbstractAction;\nimport javax.swing.AbstractButton;\nimport javax.swing.Icon;\nimport javax.swing.ImageIcon;\nimport javax.swing.JButton;\nimport javax.swing.JLabel;\nimport javax.swing.JMenu;\nimport javax.swing.JMenuItem;\nimport javax.swing.JRadioButton;\nimport javax.swing.JRadioButtonMenuItem;\nimport javax.swing.JCheckBoxMenuItem;\nimport javax.swing.KeyStroke;\nimport corina.core.App;\n\n// TODO: if on 1.4, use setDisplayedMnemonicIndex() so \"Save &As...\"\n// underlines the correct 'A'\npublic class Builder {\n\n    // (don't instantiate me)\n    private Builder() {\n    }\n\n    // UNUSED!\n    // 4 spaces\n    public final static String INDENT = \"    \";\n\n    public static JMenu makeMenu(String key) {\n        JMenu m = new JMenu();\n        // TODO: set font only on java<1.4?\n        // NOTE: now using UIDefaults customization through Appearance Panel\n        // instead of corina.menubar.font property - cross this off PRIORITY list\n        m.setText(I18n.getText(key));\n        if (!App.platform.isMac()) {\n            Character mnemonic = I18n.getMnemonic(key);\n            if (mnemonic != null)\n                m.setMnemonic(mnemonic.charValue());\n        }\n        return m;\n    }\n\n    public static JMenuItem makeMenuItem(String key) {\n        JMenuItem m = new JMenuItem(\"\");\n        // TODO: set font only on java<1.4?\n        // NOTE: now using UIDefaults customization through Appearance Panel\n        // instead of corina.menubar.font property - cross this off PRIORITY list\n        m.setText(I18n.getText(key));\n        if (!App.platform.isMac()) {\n            Character mnemonic = I18n.getMnemonic(key);\n            if (mnemonic != null)\n                m.setMnemonic(mnemonic.charValue());\n        }\n        String keystroke = I18n.getKeyStroke(key);\n        if (keystroke != null)\n            m.setAccelerator(KeyStroke.getKeyStroke(keystroke));\n        return m;\n    }\n\n    public static JMenuItem makeMenuItem(String key, boolean enabled) {\n        JMenuItem m = makeMenuItem(key);\n        m.setEnabled(enabled);\n        return m;\n    }\n\n    public static JMenuItem makeMenuItem(String key, String action) {\n        JMenuItem m = makeMenuItem(key);\n        addAction(m, action);\n        return m;\n    }\n\n    public static JCheckBoxMenuItem makeCheckBoxMenuItem(String key) {\n        JCheckBoxMenuItem m = new JCheckBoxMenuItem(\"\");\n        // TODO: set font only on java<1.4?\n        // NOTE: now using UIDefaults customization through Appearance Panel\n        // instead of corina.menubar.font property - cross this off PRIORITY list\n        m.setText(I18n.getText(key));\n        if (!App.platform.isMac()) {\n            Character mnemonic = I18n.getMnemonic(key);\n            if (mnemonic != null)\n                m.setMnemonic(mnemonic.charValue());\n        }\n        String keystroke = I18n.getKeyStroke(key);\n        if (keystroke != null)\n            m.setAccelerator(KeyStroke.getKeyStroke(keystroke));\n        return m;\n    }\n\n    public static JRadioButtonMenuItem makeRadioButtonMenuItem(String key) {\n        JRadioButtonMenuItem m = new JRadioButtonMenuItem(\"\");\n        // TODO: set font only on java<1.4?\n        // NOTE: now using UIDefaults customization through Appearance Panel\n        // instead of corina.menubar.font property - cross this off PRIORITY list\n        m.setText(I18n.getText(key));\n        if (!App.platform.isMac()) {\n            Character mnemonic = I18n.getMnemonic(key);\n            if (mnemonic != null)\n                m.setMnemonic(mnemonic.charValue());\n        }\n        String keystroke = I18n.getKeyStroke(key);\n        if (keystroke != null)\n            m.setAccelerator(KeyStroke.getKeyStroke(keystroke));\n        return m;\n    }\n\n    public static JButton makeButton(String key) {\n        JButton b = new JButton();\n        b.setText(I18n.getText(key));\n        if (!App.platform.isMac()) {\n            Character mnemonic = I18n.getMnemonic(key);\n            if (mnemonic != null)\n                b.setMnemonic(mnemonic.charValue());\n        }\n        return b;\n    }\n\n    public static JLabel makeLabel(String key) {\n        JLabel l = new JLabel();\n        l.setText(I18n.getText(key));\n        return l;\n    }\n\n    public static JRadioButton makeRadioButton(String key) {\n        JRadioButton r = new JRadioButton();\n        r.setText(I18n.getText(key));\n        if (!App.platform.isMac()) {\n            Character mnemonic = I18n.getMnemonic(key);\n            if (mnemonic != null)\n                r.setMnemonic(mnemonic.charValue());\n        }\n        return r;\n    }\n\n    // i make icons from files in Images/ so often, i'll just make it a builder method.\n    // use: Builder.getIcon(\"x.png\") returns an Icon made from the file \"Images/x.png\".\n    public static Icon getIcon(String name) {\n        java.net.URL url = cl.getResource(\"Images/\" + name);\n        if (url != null)\n            return new ImageIcon(url);\n        else\n            return null;\n    }\n\n    // TODO: Cursor makeCursor(String name)\n    // (yeah, it's pretty much the same as getIcon(), but don't tell anybody!)\n    public static Image getImage(String name) {\n        java.net.URL url = cl.getResource(\"Images/\" + name);\n        if (url != null)\n            return new ImageIcon(url).getImage();\n        else\n            return null;\n    }\n\n    // my classloador, for getting icons as resources.\n    private static ClassLoader cl = corina.ui.Builder.class.getClassLoader();\n\n    // ----------------------------------------\n    /*\n\t REFACTOR!\n\t \n\t pattern:\n\t \n\t A.addActionListener(new AbstractAction() {\n\t public void actionPerformed(ActionEvent e) {\n\t new B();\n\t }\n\t });\n\t \n\t or:\n\t \n\t A.addActionListener(new AbstractAction() {\n\t public void actionPerformed(ActionEvent e) {\n\t B.c();\n\t }\n\t });\n\t \n\t -- of course, what i really want is simpler closures.\n\t can i fake that easily?\n\t \n\t how about another param for Builder?\n\t Builder.makeMenuItem(\"crossdate_kit\", \"new CrossdateKit();\");\n\t not perfect, but it would make my job easier in places, i think.\n\t (same for buttons?)\n\t */\n    /**\n     * An easy way to add actions.  The action string is of the form\n     * <code>\"new package.SomeClass();\"</code> or\n     * <code>\"package.SomeClass.staticMethod();</code>.  Be sure to\n     * fully-qualify the class name.\n     * @param button a JButton or JMenuItem\n     * @param action an action string\n     */\n    public static void addAction(AbstractButton button, String action) {\n        // parse |action|\n        action = action.trim();\n        StringTokenizer tok = new StringTokenizer(action, \" ();\");\n        String arg1 = tok.nextToken();\n        // \"new package.SomeClass();\"\n        if (arg1.equals(\"new\")) {\n            String arg2 = tok.nextToken();\n            try {\n                final Class c = Class.forName(arg2);\n                button.addActionListener(new AbstractAction() {\n\n                    public void actionPerformed(ActionEvent e) {\n                        try {\n                            c.newInstance();\n                        } catch (Exception ex) {\n                            System.out.println(\"Builder.addAction(): can't instantiate \" + c);\n                            // FIXME?  (state what the action was, at least)\n                            ex.printStackTrace(System.out);\n                        }\n                    }\n                });\n            } catch (ClassNotFoundException cnfe) {\n                throw new IllegalArgumentException(\"class '\" + arg2 + \"' not found\");\n            }\n            return;\n        }\n        // \"package.SomeClass.staticMethod();\"\n        int lastDot = action.lastIndexOf(\".\");\n        if (lastDot == -1)\n            throw new IllegalArgumentException(\"no 'new' or '.' in action string\");\n        final String className = action.substring(0, lastDot);\n        // the method name is everything after the last dot, for as long\n        // as java-identifier chars are available.\n        String methodName = action.substring(lastDot + 1);\n        while (!Character.isJavaIdentifierPart(methodName.charAt(methodName.length() - 1))) methodName = methodName.substring(0, methodName.length() - 1);\n        final String methodNameGlue = methodName;\n        try {\n            Class c = Class.forName(className);\n            final Method m = c.getMethod(methodName, new Class[] {});\n            button.addActionListener(new AbstractAction() {\n\n                public void actionPerformed(ActionEvent e) {\n                    try {\n                        m.invoke(null, new Object[] {});\n                        // IllegalAccess, InvocationTarget exceptions\n                    } catch (Exception ex) {\n                        ex.printStackTrace();\n                        throw new IllegalArgumentException(\"Builder.addAction(): can't invoke \" + \"requested method (\" + methodNameGlue + \" in \" + className + \")\");\n                    }\n                }\n            });\n        } catch (ClassNotFoundException cnfe) {\n            throw new IllegalArgumentException(\"Builder.addAction(): can't find requested class\");\n        } catch (NoSuchMethodException nsme) {\n            throw new IllegalArgumentException(\"Builder.addAction(): can't find requested method\");\n        }\n    }\n}\n",
		"id": "/EvoSuiteBenchmark/35_corina/src/main/java/corina/ui/Builder_2Test.java",
		"test_prompt": "// Builder_2Test.java\npackage corina.ui;\n\nimport java.awt.Image;\nimport java.awt.event.ActionEvent;\nimport java.lang.reflect.Method;\nimport java.util.StringTokenizer;\nimport javax.swing.AbstractAction;\nimport javax.swing.AbstractButton;\nimport javax.swing.Icon;\nimport javax.swing.ImageIcon;\nimport javax.swing.JButton;\nimport javax.swing.JLabel;\nimport javax.swing.JMenu;\nimport javax.swing.JMenuItem;\nimport javax.swing.JRadioButton;\nimport javax.swing.JRadioButtonMenuItem;\nimport javax.swing.JCheckBoxMenuItem;\nimport javax.swing.KeyStroke;\nimport corina.core.App;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link Builder}.\n* It contains ten unit test cases for the {@link Builder#makeMenuItem(String, boolean)} method.\n*/\nclass Builder_2Test {"
	},
	{
		"original_code": "// Builder.java\npackage corina.ui;\n\nimport java.awt.Image;\nimport java.awt.event.ActionEvent;\nimport java.lang.reflect.Method;\nimport java.util.StringTokenizer;\nimport javax.swing.AbstractAction;\nimport javax.swing.AbstractButton;\nimport javax.swing.Icon;\nimport javax.swing.ImageIcon;\nimport javax.swing.JButton;\nimport javax.swing.JLabel;\nimport javax.swing.JMenu;\nimport javax.swing.JMenuItem;\nimport javax.swing.JRadioButton;\nimport javax.swing.JRadioButtonMenuItem;\nimport javax.swing.JCheckBoxMenuItem;\nimport javax.swing.KeyStroke;\nimport corina.core.App;\n\n// TODO: if on 1.4, use setDisplayedMnemonicIndex() so \"Save &As...\"\n// underlines the correct 'A'\npublic class Builder {\n\n    // (don't instantiate me)\n    private Builder() {\n    }\n\n    // UNUSED!\n    // 4 spaces\n    public final static String INDENT = \"    \";\n\n    public static JMenu makeMenu(String key) {\n        JMenu m = new JMenu();\n        // TODO: set font only on java<1.4?\n        // NOTE: now using UIDefaults customization through Appearance Panel\n        // instead of corina.menubar.font property - cross this off PRIORITY list\n        m.setText(I18n.getText(key));\n        if (!App.platform.isMac()) {\n            Character mnemonic = I18n.getMnemonic(key);\n            if (mnemonic != null)\n                m.setMnemonic(mnemonic.charValue());\n        }\n        return m;\n    }\n\n    public static JMenuItem makeMenuItem(String key) {\n        JMenuItem m = new JMenuItem(\"\");\n        // TODO: set font only on java<1.4?\n        // NOTE: now using UIDefaults customization through Appearance Panel\n        // instead of corina.menubar.font property - cross this off PRIORITY list\n        m.setText(I18n.getText(key));\n        if (!App.platform.isMac()) {\n            Character mnemonic = I18n.getMnemonic(key);\n            if (mnemonic != null)\n                m.setMnemonic(mnemonic.charValue());\n        }\n        String keystroke = I18n.getKeyStroke(key);\n        if (keystroke != null)\n            m.setAccelerator(KeyStroke.getKeyStroke(keystroke));\n        return m;\n    }\n\n    public static JMenuItem makeMenuItem(String key, boolean enabled) {\n        JMenuItem m = makeMenuItem(key);\n        m.setEnabled(enabled);\n        return m;\n    }\n\n    public static JMenuItem makeMenuItem(String key, String action) {\n        JMenuItem m = makeMenuItem(key);\n        addAction(m, action);\n        return m;\n    }\n\n    public static JCheckBoxMenuItem makeCheckBoxMenuItem(String key) {\n        JCheckBoxMenuItem m = new JCheckBoxMenuItem(\"\");\n        // TODO: set font only on java<1.4?\n        // NOTE: now using UIDefaults customization through Appearance Panel\n        // instead of corina.menubar.font property - cross this off PRIORITY list\n        m.setText(I18n.getText(key));\n        if (!App.platform.isMac()) {\n            Character mnemonic = I18n.getMnemonic(key);\n            if (mnemonic != null)\n                m.setMnemonic(mnemonic.charValue());\n        }\n        String keystroke = I18n.getKeyStroke(key);\n        if (keystroke != null)\n            m.setAccelerator(KeyStroke.getKeyStroke(keystroke));\n        return m;\n    }\n\n    public static JRadioButtonMenuItem makeRadioButtonMenuItem(String key) {\n        JRadioButtonMenuItem m = new JRadioButtonMenuItem(\"\");\n        // TODO: set font only on java<1.4?\n        // NOTE: now using UIDefaults customization through Appearance Panel\n        // instead of corina.menubar.font property - cross this off PRIORITY list\n        m.setText(I18n.getText(key));\n        if (!App.platform.isMac()) {\n            Character mnemonic = I18n.getMnemonic(key);\n            if (mnemonic != null)\n                m.setMnemonic(mnemonic.charValue());\n        }\n        String keystroke = I18n.getKeyStroke(key);\n        if (keystroke != null)\n            m.setAccelerator(KeyStroke.getKeyStroke(keystroke));\n        return m;\n    }\n\n    public static JButton makeButton(String key) {\n        JButton b = new JButton();\n        b.setText(I18n.getText(key));\n        if (!App.platform.isMac()) {\n            Character mnemonic = I18n.getMnemonic(key);\n            if (mnemonic != null)\n                b.setMnemonic(mnemonic.charValue());\n        }\n        return b;\n    }\n\n    public static JLabel makeLabel(String key) {\n        JLabel l = new JLabel();\n        l.setText(I18n.getText(key));\n        return l;\n    }\n\n    public static JRadioButton makeRadioButton(String key) {\n        JRadioButton r = new JRadioButton();\n        r.setText(I18n.getText(key));\n        if (!App.platform.isMac()) {\n            Character mnemonic = I18n.getMnemonic(key);\n            if (mnemonic != null)\n                r.setMnemonic(mnemonic.charValue());\n        }\n        return r;\n    }\n\n    // i make icons from files in Images/ so often, i'll just make it a builder method.\n    // use: Builder.getIcon(\"x.png\") returns an Icon made from the file \"Images/x.png\".\n    public static Icon getIcon(String name) {\n        java.net.URL url = cl.getResource(\"Images/\" + name);\n        if (url != null)\n            return new ImageIcon(url);\n        else\n            return null;\n    }\n\n    // TODO: Cursor makeCursor(String name)\n    // (yeah, it's pretty much the same as getIcon(), but don't tell anybody!)\n    public static Image getImage(String name) {\n        java.net.URL url = cl.getResource(\"Images/\" + name);\n        if (url != null)\n            return new ImageIcon(url).getImage();\n        else\n            return null;\n    }\n\n    // my classloador, for getting icons as resources.\n    private static ClassLoader cl = corina.ui.Builder.class.getClassLoader();\n\n    // ----------------------------------------\n    /*\n\t REFACTOR!\n\t \n\t pattern:\n\t \n\t A.addActionListener(new AbstractAction() {\n\t public void actionPerformed(ActionEvent e) {\n\t new B();\n\t }\n\t });\n\t \n\t or:\n\t \n\t A.addActionListener(new AbstractAction() {\n\t public void actionPerformed(ActionEvent e) {\n\t B.c();\n\t }\n\t });\n\t \n\t -- of course, what i really want is simpler closures.\n\t can i fake that easily?\n\t \n\t how about another param for Builder?\n\t Builder.makeMenuItem(\"crossdate_kit\", \"new CrossdateKit();\");\n\t not perfect, but it would make my job easier in places, i think.\n\t (same for buttons?)\n\t */\n    /**\n     * An easy way to add actions.  The action string is of the form\n     * <code>\"new package.SomeClass();\"</code> or\n     * <code>\"package.SomeClass.staticMethod();</code>.  Be sure to\n     * fully-qualify the class name.\n     * @param button a JButton or JMenuItem\n     * @param action an action string\n     */\n    public static void addAction(AbstractButton button, String action) {\n        // parse |action|\n        action = action.trim();\n        StringTokenizer tok = new StringTokenizer(action, \" ();\");\n        String arg1 = tok.nextToken();\n        // \"new package.SomeClass();\"\n        if (arg1.equals(\"new\")) {\n            String arg2 = tok.nextToken();\n            try {\n                final Class c = Class.forName(arg2);\n                button.addActionListener(new AbstractAction() {\n\n                    public void actionPerformed(ActionEvent e) {\n                        try {\n                            c.newInstance();\n                        } catch (Exception ex) {\n                            System.out.println(\"Builder.addAction(): can't instantiate \" + c);\n                            // FIXME?  (state what the action was, at least)\n                            ex.printStackTrace(System.out);\n                        }\n                    }\n                });\n            } catch (ClassNotFoundException cnfe) {\n                throw new IllegalArgumentException(\"class '\" + arg2 + \"' not found\");\n            }\n            return;\n        }\n        // \"package.SomeClass.staticMethod();\"\n        int lastDot = action.lastIndexOf(\".\");\n        if (lastDot == -1)\n            throw new IllegalArgumentException(\"no 'new' or '.' in action string\");\n        final String className = action.substring(0, lastDot);\n        // the method name is everything after the last dot, for as long\n        // as java-identifier chars are available.\n        String methodName = action.substring(lastDot + 1);\n        while (!Character.isJavaIdentifierPart(methodName.charAt(methodName.length() - 1))) methodName = methodName.substring(0, methodName.length() - 1);\n        final String methodNameGlue = methodName;\n        try {\n            Class c = Class.forName(className);\n            final Method m = c.getMethod(methodName, new Class[] {});\n            button.addActionListener(new AbstractAction() {\n\n                public void actionPerformed(ActionEvent e) {\n                    try {\n                        m.invoke(null, new Object[] {});\n                        // IllegalAccess, InvocationTarget exceptions\n                    } catch (Exception ex) {\n                        ex.printStackTrace();\n                        throw new IllegalArgumentException(\"Builder.addAction(): can't invoke \" + \"requested method (\" + methodNameGlue + \" in \" + className + \")\");\n                    }\n                }\n            });\n        } catch (ClassNotFoundException cnfe) {\n            throw new IllegalArgumentException(\"Builder.addAction(): can't find requested class\");\n        } catch (NoSuchMethodException nsme) {\n            throw new IllegalArgumentException(\"Builder.addAction(): can't find requested method\");\n        }\n    }\n}\n",
		"id": "/EvoSuiteBenchmark/35_corina/src/main/java/corina/ui/Builder_3Test.java",
		"test_prompt": "// Builder_3Test.java\npackage corina.ui;\n\nimport java.awt.Image;\nimport java.awt.event.ActionEvent;\nimport java.lang.reflect.Method;\nimport java.util.StringTokenizer;\nimport javax.swing.AbstractAction;\nimport javax.swing.AbstractButton;\nimport javax.swing.Icon;\nimport javax.swing.ImageIcon;\nimport javax.swing.JButton;\nimport javax.swing.JLabel;\nimport javax.swing.JMenu;\nimport javax.swing.JMenuItem;\nimport javax.swing.JRadioButton;\nimport javax.swing.JRadioButtonMenuItem;\nimport javax.swing.JCheckBoxMenuItem;\nimport javax.swing.KeyStroke;\nimport corina.core.App;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link Builder}.\n* It contains ten unit test cases for the {@link Builder#makeMenuItem(String, String)} method.\n*/\nclass Builder_3Test {"
	},
	{
		"original_code": "// Builder.java\npackage corina.ui;\n\nimport java.awt.Image;\nimport java.awt.event.ActionEvent;\nimport java.lang.reflect.Method;\nimport java.util.StringTokenizer;\nimport javax.swing.AbstractAction;\nimport javax.swing.AbstractButton;\nimport javax.swing.Icon;\nimport javax.swing.ImageIcon;\nimport javax.swing.JButton;\nimport javax.swing.JLabel;\nimport javax.swing.JMenu;\nimport javax.swing.JMenuItem;\nimport javax.swing.JRadioButton;\nimport javax.swing.JRadioButtonMenuItem;\nimport javax.swing.JCheckBoxMenuItem;\nimport javax.swing.KeyStroke;\nimport corina.core.App;\n\n// TODO: if on 1.4, use setDisplayedMnemonicIndex() so \"Save &As...\"\n// underlines the correct 'A'\npublic class Builder {\n\n    // (don't instantiate me)\n    private Builder() {\n    }\n\n    // UNUSED!\n    // 4 spaces\n    public final static String INDENT = \"    \";\n\n    public static JMenu makeMenu(String key) {\n        JMenu m = new JMenu();\n        // TODO: set font only on java<1.4?\n        // NOTE: now using UIDefaults customization through Appearance Panel\n        // instead of corina.menubar.font property - cross this off PRIORITY list\n        m.setText(I18n.getText(key));\n        if (!App.platform.isMac()) {\n            Character mnemonic = I18n.getMnemonic(key);\n            if (mnemonic != null)\n                m.setMnemonic(mnemonic.charValue());\n        }\n        return m;\n    }\n\n    public static JMenuItem makeMenuItem(String key) {\n        JMenuItem m = new JMenuItem(\"\");\n        // TODO: set font only on java<1.4?\n        // NOTE: now using UIDefaults customization through Appearance Panel\n        // instead of corina.menubar.font property - cross this off PRIORITY list\n        m.setText(I18n.getText(key));\n        if (!App.platform.isMac()) {\n            Character mnemonic = I18n.getMnemonic(key);\n            if (mnemonic != null)\n                m.setMnemonic(mnemonic.charValue());\n        }\n        String keystroke = I18n.getKeyStroke(key);\n        if (keystroke != null)\n            m.setAccelerator(KeyStroke.getKeyStroke(keystroke));\n        return m;\n    }\n\n    public static JMenuItem makeMenuItem(String key, boolean enabled) {\n        JMenuItem m = makeMenuItem(key);\n        m.setEnabled(enabled);\n        return m;\n    }\n\n    public static JMenuItem makeMenuItem(String key, String action) {\n        JMenuItem m = makeMenuItem(key);\n        addAction(m, action);\n        return m;\n    }\n\n    public static JCheckBoxMenuItem makeCheckBoxMenuItem(String key) {\n        JCheckBoxMenuItem m = new JCheckBoxMenuItem(\"\");\n        // TODO: set font only on java<1.4?\n        // NOTE: now using UIDefaults customization through Appearance Panel\n        // instead of corina.menubar.font property - cross this off PRIORITY list\n        m.setText(I18n.getText(key));\n        if (!App.platform.isMac()) {\n            Character mnemonic = I18n.getMnemonic(key);\n            if (mnemonic != null)\n                m.setMnemonic(mnemonic.charValue());\n        }\n        String keystroke = I18n.getKeyStroke(key);\n        if (keystroke != null)\n            m.setAccelerator(KeyStroke.getKeyStroke(keystroke));\n        return m;\n    }\n\n    public static JRadioButtonMenuItem makeRadioButtonMenuItem(String key) {\n        JRadioButtonMenuItem m = new JRadioButtonMenuItem(\"\");\n        // TODO: set font only on java<1.4?\n        // NOTE: now using UIDefaults customization through Appearance Panel\n        // instead of corina.menubar.font property - cross this off PRIORITY list\n        m.setText(I18n.getText(key));\n        if (!App.platform.isMac()) {\n            Character mnemonic = I18n.getMnemonic(key);\n            if (mnemonic != null)\n                m.setMnemonic(mnemonic.charValue());\n        }\n        String keystroke = I18n.getKeyStroke(key);\n        if (keystroke != null)\n            m.setAccelerator(KeyStroke.getKeyStroke(keystroke));\n        return m;\n    }\n\n    public static JButton makeButton(String key) {\n        JButton b = new JButton();\n        b.setText(I18n.getText(key));\n        if (!App.platform.isMac()) {\n            Character mnemonic = I18n.getMnemonic(key);\n            if (mnemonic != null)\n                b.setMnemonic(mnemonic.charValue());\n        }\n        return b;\n    }\n\n    public static JLabel makeLabel(String key) {\n        JLabel l = new JLabel();\n        l.setText(I18n.getText(key));\n        return l;\n    }\n\n    public static JRadioButton makeRadioButton(String key) {\n        JRadioButton r = new JRadioButton();\n        r.setText(I18n.getText(key));\n        if (!App.platform.isMac()) {\n            Character mnemonic = I18n.getMnemonic(key);\n            if (mnemonic != null)\n                r.setMnemonic(mnemonic.charValue());\n        }\n        return r;\n    }\n\n    // i make icons from files in Images/ so often, i'll just make it a builder method.\n    // use: Builder.getIcon(\"x.png\") returns an Icon made from the file \"Images/x.png\".\n    public static Icon getIcon(String name) {\n        java.net.URL url = cl.getResource(\"Images/\" + name);\n        if (url != null)\n            return new ImageIcon(url);\n        else\n            return null;\n    }\n\n    // TODO: Cursor makeCursor(String name)\n    // (yeah, it's pretty much the same as getIcon(), but don't tell anybody!)\n    public static Image getImage(String name) {\n        java.net.URL url = cl.getResource(\"Images/\" + name);\n        if (url != null)\n            return new ImageIcon(url).getImage();\n        else\n            return null;\n    }\n\n    // my classloador, for getting icons as resources.\n    private static ClassLoader cl = corina.ui.Builder.class.getClassLoader();\n\n    // ----------------------------------------\n    /*\n\t REFACTOR!\n\t \n\t pattern:\n\t \n\t A.addActionListener(new AbstractAction() {\n\t public void actionPerformed(ActionEvent e) {\n\t new B();\n\t }\n\t });\n\t \n\t or:\n\t \n\t A.addActionListener(new AbstractAction() {\n\t public void actionPerformed(ActionEvent e) {\n\t B.c();\n\t }\n\t });\n\t \n\t -- of course, what i really want is simpler closures.\n\t can i fake that easily?\n\t \n\t how about another param for Builder?\n\t Builder.makeMenuItem(\"crossdate_kit\", \"new CrossdateKit();\");\n\t not perfect, but it would make my job easier in places, i think.\n\t (same for buttons?)\n\t */\n    /**\n     * An easy way to add actions.  The action string is of the form\n     * <code>\"new package.SomeClass();\"</code> or\n     * <code>\"package.SomeClass.staticMethod();</code>.  Be sure to\n     * fully-qualify the class name.\n     * @param button a JButton or JMenuItem\n     * @param action an action string\n     */\n    public static void addAction(AbstractButton button, String action) {\n        // parse |action|\n        action = action.trim();\n        StringTokenizer tok = new StringTokenizer(action, \" ();\");\n        String arg1 = tok.nextToken();\n        // \"new package.SomeClass();\"\n        if (arg1.equals(\"new\")) {\n            String arg2 = tok.nextToken();\n            try {\n                final Class c = Class.forName(arg2);\n                button.addActionListener(new AbstractAction() {\n\n                    public void actionPerformed(ActionEvent e) {\n                        try {\n                            c.newInstance();\n                        } catch (Exception ex) {\n                            System.out.println(\"Builder.addAction(): can't instantiate \" + c);\n                            // FIXME?  (state what the action was, at least)\n                            ex.printStackTrace(System.out);\n                        }\n                    }\n                });\n            } catch (ClassNotFoundException cnfe) {\n                throw new IllegalArgumentException(\"class '\" + arg2 + \"' not found\");\n            }\n            return;\n        }\n        // \"package.SomeClass.staticMethod();\"\n        int lastDot = action.lastIndexOf(\".\");\n        if (lastDot == -1)\n            throw new IllegalArgumentException(\"no 'new' or '.' in action string\");\n        final String className = action.substring(0, lastDot);\n        // the method name is everything after the last dot, for as long\n        // as java-identifier chars are available.\n        String methodName = action.substring(lastDot + 1);\n        while (!Character.isJavaIdentifierPart(methodName.charAt(methodName.length() - 1))) methodName = methodName.substring(0, methodName.length() - 1);\n        final String methodNameGlue = methodName;\n        try {\n            Class c = Class.forName(className);\n            final Method m = c.getMethod(methodName, new Class[] {});\n            button.addActionListener(new AbstractAction() {\n\n                public void actionPerformed(ActionEvent e) {\n                    try {\n                        m.invoke(null, new Object[] {});\n                        // IllegalAccess, InvocationTarget exceptions\n                    } catch (Exception ex) {\n                        ex.printStackTrace();\n                        throw new IllegalArgumentException(\"Builder.addAction(): can't invoke \" + \"requested method (\" + methodNameGlue + \" in \" + className + \")\");\n                    }\n                }\n            });\n        } catch (ClassNotFoundException cnfe) {\n            throw new IllegalArgumentException(\"Builder.addAction(): can't find requested class\");\n        } catch (NoSuchMethodException nsme) {\n            throw new IllegalArgumentException(\"Builder.addAction(): can't find requested method\");\n        }\n    }\n}\n",
		"id": "/EvoSuiteBenchmark/35_corina/src/main/java/corina/ui/Builder_4Test.java",
		"test_prompt": "// Builder_4Test.java\npackage corina.ui;\n\nimport java.awt.Image;\nimport java.awt.event.ActionEvent;\nimport java.lang.reflect.Method;\nimport java.util.StringTokenizer;\nimport javax.swing.AbstractAction;\nimport javax.swing.AbstractButton;\nimport javax.swing.Icon;\nimport javax.swing.ImageIcon;\nimport javax.swing.JButton;\nimport javax.swing.JLabel;\nimport javax.swing.JMenu;\nimport javax.swing.JMenuItem;\nimport javax.swing.JRadioButton;\nimport javax.swing.JRadioButtonMenuItem;\nimport javax.swing.JCheckBoxMenuItem;\nimport javax.swing.KeyStroke;\nimport corina.core.App;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link Builder}.\n* It contains ten unit test cases for the {@link Builder#makeCheckBoxMenuItem(String)} method.\n*/\nclass Builder_4Test {"
	},
	{
		"original_code": "// Builder.java\npackage corina.ui;\n\nimport java.awt.Image;\nimport java.awt.event.ActionEvent;\nimport java.lang.reflect.Method;\nimport java.util.StringTokenizer;\nimport javax.swing.AbstractAction;\nimport javax.swing.AbstractButton;\nimport javax.swing.Icon;\nimport javax.swing.ImageIcon;\nimport javax.swing.JButton;\nimport javax.swing.JLabel;\nimport javax.swing.JMenu;\nimport javax.swing.JMenuItem;\nimport javax.swing.JRadioButton;\nimport javax.swing.JRadioButtonMenuItem;\nimport javax.swing.JCheckBoxMenuItem;\nimport javax.swing.KeyStroke;\nimport corina.core.App;\n\n// TODO: if on 1.4, use setDisplayedMnemonicIndex() so \"Save &As...\"\n// underlines the correct 'A'\npublic class Builder {\n\n    // (don't instantiate me)\n    private Builder() {\n    }\n\n    // UNUSED!\n    // 4 spaces\n    public final static String INDENT = \"    \";\n\n    public static JMenu makeMenu(String key) {\n        JMenu m = new JMenu();\n        // TODO: set font only on java<1.4?\n        // NOTE: now using UIDefaults customization through Appearance Panel\n        // instead of corina.menubar.font property - cross this off PRIORITY list\n        m.setText(I18n.getText(key));\n        if (!App.platform.isMac()) {\n            Character mnemonic = I18n.getMnemonic(key);\n            if (mnemonic != null)\n                m.setMnemonic(mnemonic.charValue());\n        }\n        return m;\n    }\n\n    public static JMenuItem makeMenuItem(String key) {\n        JMenuItem m = new JMenuItem(\"\");\n        // TODO: set font only on java<1.4?\n        // NOTE: now using UIDefaults customization through Appearance Panel\n        // instead of corina.menubar.font property - cross this off PRIORITY list\n        m.setText(I18n.getText(key));\n        if (!App.platform.isMac()) {\n            Character mnemonic = I18n.getMnemonic(key);\n            if (mnemonic != null)\n                m.setMnemonic(mnemonic.charValue());\n        }\n        String keystroke = I18n.getKeyStroke(key);\n        if (keystroke != null)\n            m.setAccelerator(KeyStroke.getKeyStroke(keystroke));\n        return m;\n    }\n\n    public static JMenuItem makeMenuItem(String key, boolean enabled) {\n        JMenuItem m = makeMenuItem(key);\n        m.setEnabled(enabled);\n        return m;\n    }\n\n    public static JMenuItem makeMenuItem(String key, String action) {\n        JMenuItem m = makeMenuItem(key);\n        addAction(m, action);\n        return m;\n    }\n\n    public static JCheckBoxMenuItem makeCheckBoxMenuItem(String key) {\n        JCheckBoxMenuItem m = new JCheckBoxMenuItem(\"\");\n        // TODO: set font only on java<1.4?\n        // NOTE: now using UIDefaults customization through Appearance Panel\n        // instead of corina.menubar.font property - cross this off PRIORITY list\n        m.setText(I18n.getText(key));\n        if (!App.platform.isMac()) {\n            Character mnemonic = I18n.getMnemonic(key);\n            if (mnemonic != null)\n                m.setMnemonic(mnemonic.charValue());\n        }\n        String keystroke = I18n.getKeyStroke(key);\n        if (keystroke != null)\n            m.setAccelerator(KeyStroke.getKeyStroke(keystroke));\n        return m;\n    }\n\n    public static JRadioButtonMenuItem makeRadioButtonMenuItem(String key) {\n        JRadioButtonMenuItem m = new JRadioButtonMenuItem(\"\");\n        // TODO: set font only on java<1.4?\n        // NOTE: now using UIDefaults customization through Appearance Panel\n        // instead of corina.menubar.font property - cross this off PRIORITY list\n        m.setText(I18n.getText(key));\n        if (!App.platform.isMac()) {\n            Character mnemonic = I18n.getMnemonic(key);\n            if (mnemonic != null)\n                m.setMnemonic(mnemonic.charValue());\n        }\n        String keystroke = I18n.getKeyStroke(key);\n        if (keystroke != null)\n            m.setAccelerator(KeyStroke.getKeyStroke(keystroke));\n        return m;\n    }\n\n    public static JButton makeButton(String key) {\n        JButton b = new JButton();\n        b.setText(I18n.getText(key));\n        if (!App.platform.isMac()) {\n            Character mnemonic = I18n.getMnemonic(key);\n            if (mnemonic != null)\n                b.setMnemonic(mnemonic.charValue());\n        }\n        return b;\n    }\n\n    public static JLabel makeLabel(String key) {\n        JLabel l = new JLabel();\n        l.setText(I18n.getText(key));\n        return l;\n    }\n\n    public static JRadioButton makeRadioButton(String key) {\n        JRadioButton r = new JRadioButton();\n        r.setText(I18n.getText(key));\n        if (!App.platform.isMac()) {\n            Character mnemonic = I18n.getMnemonic(key);\n            if (mnemonic != null)\n                r.setMnemonic(mnemonic.charValue());\n        }\n        return r;\n    }\n\n    // i make icons from files in Images/ so often, i'll just make it a builder method.\n    // use: Builder.getIcon(\"x.png\") returns an Icon made from the file \"Images/x.png\".\n    public static Icon getIcon(String name) {\n        java.net.URL url = cl.getResource(\"Images/\" + name);\n        if (url != null)\n            return new ImageIcon(url);\n        else\n            return null;\n    }\n\n    // TODO: Cursor makeCursor(String name)\n    // (yeah, it's pretty much the same as getIcon(), but don't tell anybody!)\n    public static Image getImage(String name) {\n        java.net.URL url = cl.getResource(\"Images/\" + name);\n        if (url != null)\n            return new ImageIcon(url).getImage();\n        else\n            return null;\n    }\n\n    // my classloador, for getting icons as resources.\n    private static ClassLoader cl = corina.ui.Builder.class.getClassLoader();\n\n    // ----------------------------------------\n    /*\n\t REFACTOR!\n\t \n\t pattern:\n\t \n\t A.addActionListener(new AbstractAction() {\n\t public void actionPerformed(ActionEvent e) {\n\t new B();\n\t }\n\t });\n\t \n\t or:\n\t \n\t A.addActionListener(new AbstractAction() {\n\t public void actionPerformed(ActionEvent e) {\n\t B.c();\n\t }\n\t });\n\t \n\t -- of course, what i really want is simpler closures.\n\t can i fake that easily?\n\t \n\t how about another param for Builder?\n\t Builder.makeMenuItem(\"crossdate_kit\", \"new CrossdateKit();\");\n\t not perfect, but it would make my job easier in places, i think.\n\t (same for buttons?)\n\t */\n    /**\n     * An easy way to add actions.  The action string is of the form\n     * <code>\"new package.SomeClass();\"</code> or\n     * <code>\"package.SomeClass.staticMethod();</code>.  Be sure to\n     * fully-qualify the class name.\n     * @param button a JButton or JMenuItem\n     * @param action an action string\n     */\n    public static void addAction(AbstractButton button, String action) {\n        // parse |action|\n        action = action.trim();\n        StringTokenizer tok = new StringTokenizer(action, \" ();\");\n        String arg1 = tok.nextToken();\n        // \"new package.SomeClass();\"\n        if (arg1.equals(\"new\")) {\n            String arg2 = tok.nextToken();\n            try {\n                final Class c = Class.forName(arg2);\n                button.addActionListener(new AbstractAction() {\n\n                    public void actionPerformed(ActionEvent e) {\n                        try {\n                            c.newInstance();\n                        } catch (Exception ex) {\n                            System.out.println(\"Builder.addAction(): can't instantiate \" + c);\n                            // FIXME?  (state what the action was, at least)\n                            ex.printStackTrace(System.out);\n                        }\n                    }\n                });\n            } catch (ClassNotFoundException cnfe) {\n                throw new IllegalArgumentException(\"class '\" + arg2 + \"' not found\");\n            }\n            return;\n        }\n        // \"package.SomeClass.staticMethod();\"\n        int lastDot = action.lastIndexOf(\".\");\n        if (lastDot == -1)\n            throw new IllegalArgumentException(\"no 'new' or '.' in action string\");\n        final String className = action.substring(0, lastDot);\n        // the method name is everything after the last dot, for as long\n        // as java-identifier chars are available.\n        String methodName = action.substring(lastDot + 1);\n        while (!Character.isJavaIdentifierPart(methodName.charAt(methodName.length() - 1))) methodName = methodName.substring(0, methodName.length() - 1);\n        final String methodNameGlue = methodName;\n        try {\n            Class c = Class.forName(className);\n            final Method m = c.getMethod(methodName, new Class[] {});\n            button.addActionListener(new AbstractAction() {\n\n                public void actionPerformed(ActionEvent e) {\n                    try {\n                        m.invoke(null, new Object[] {});\n                        // IllegalAccess, InvocationTarget exceptions\n                    } catch (Exception ex) {\n                        ex.printStackTrace();\n                        throw new IllegalArgumentException(\"Builder.addAction(): can't invoke \" + \"requested method (\" + methodNameGlue + \" in \" + className + \")\");\n                    }\n                }\n            });\n        } catch (ClassNotFoundException cnfe) {\n            throw new IllegalArgumentException(\"Builder.addAction(): can't find requested class\");\n        } catch (NoSuchMethodException nsme) {\n            throw new IllegalArgumentException(\"Builder.addAction(): can't find requested method\");\n        }\n    }\n}\n",
		"id": "/EvoSuiteBenchmark/35_corina/src/main/java/corina/ui/Builder_5Test.java",
		"test_prompt": "// Builder_5Test.java\npackage corina.ui;\n\nimport java.awt.Image;\nimport java.awt.event.ActionEvent;\nimport java.lang.reflect.Method;\nimport java.util.StringTokenizer;\nimport javax.swing.AbstractAction;\nimport javax.swing.AbstractButton;\nimport javax.swing.Icon;\nimport javax.swing.ImageIcon;\nimport javax.swing.JButton;\nimport javax.swing.JLabel;\nimport javax.swing.JMenu;\nimport javax.swing.JMenuItem;\nimport javax.swing.JRadioButton;\nimport javax.swing.JRadioButtonMenuItem;\nimport javax.swing.JCheckBoxMenuItem;\nimport javax.swing.KeyStroke;\nimport corina.core.App;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link Builder}.\n* It contains ten unit test cases for the {@link Builder#makeRadioButtonMenuItem(String)} method.\n*/\nclass Builder_5Test {"
	},
	{
		"original_code": "// Builder.java\npackage corina.ui;\n\nimport java.awt.Image;\nimport java.awt.event.ActionEvent;\nimport java.lang.reflect.Method;\nimport java.util.StringTokenizer;\nimport javax.swing.AbstractAction;\nimport javax.swing.AbstractButton;\nimport javax.swing.Icon;\nimport javax.swing.ImageIcon;\nimport javax.swing.JButton;\nimport javax.swing.JLabel;\nimport javax.swing.JMenu;\nimport javax.swing.JMenuItem;\nimport javax.swing.JRadioButton;\nimport javax.swing.JRadioButtonMenuItem;\nimport javax.swing.JCheckBoxMenuItem;\nimport javax.swing.KeyStroke;\nimport corina.core.App;\n\n// TODO: if on 1.4, use setDisplayedMnemonicIndex() so \"Save &As...\"\n// underlines the correct 'A'\npublic class Builder {\n\n    // (don't instantiate me)\n    private Builder() {\n    }\n\n    // UNUSED!\n    // 4 spaces\n    public final static String INDENT = \"    \";\n\n    public static JMenu makeMenu(String key) {\n        JMenu m = new JMenu();\n        // TODO: set font only on java<1.4?\n        // NOTE: now using UIDefaults customization through Appearance Panel\n        // instead of corina.menubar.font property - cross this off PRIORITY list\n        m.setText(I18n.getText(key));\n        if (!App.platform.isMac()) {\n            Character mnemonic = I18n.getMnemonic(key);\n            if (mnemonic != null)\n                m.setMnemonic(mnemonic.charValue());\n        }\n        return m;\n    }\n\n    public static JMenuItem makeMenuItem(String key) {\n        JMenuItem m = new JMenuItem(\"\");\n        // TODO: set font only on java<1.4?\n        // NOTE: now using UIDefaults customization through Appearance Panel\n        // instead of corina.menubar.font property - cross this off PRIORITY list\n        m.setText(I18n.getText(key));\n        if (!App.platform.isMac()) {\n            Character mnemonic = I18n.getMnemonic(key);\n            if (mnemonic != null)\n                m.setMnemonic(mnemonic.charValue());\n        }\n        String keystroke = I18n.getKeyStroke(key);\n        if (keystroke != null)\n            m.setAccelerator(KeyStroke.getKeyStroke(keystroke));\n        return m;\n    }\n\n    public static JMenuItem makeMenuItem(String key, boolean enabled) {\n        JMenuItem m = makeMenuItem(key);\n        m.setEnabled(enabled);\n        return m;\n    }\n\n    public static JMenuItem makeMenuItem(String key, String action) {\n        JMenuItem m = makeMenuItem(key);\n        addAction(m, action);\n        return m;\n    }\n\n    public static JCheckBoxMenuItem makeCheckBoxMenuItem(String key) {\n        JCheckBoxMenuItem m = new JCheckBoxMenuItem(\"\");\n        // TODO: set font only on java<1.4?\n        // NOTE: now using UIDefaults customization through Appearance Panel\n        // instead of corina.menubar.font property - cross this off PRIORITY list\n        m.setText(I18n.getText(key));\n        if (!App.platform.isMac()) {\n            Character mnemonic = I18n.getMnemonic(key);\n            if (mnemonic != null)\n                m.setMnemonic(mnemonic.charValue());\n        }\n        String keystroke = I18n.getKeyStroke(key);\n        if (keystroke != null)\n            m.setAccelerator(KeyStroke.getKeyStroke(keystroke));\n        return m;\n    }\n\n    public static JRadioButtonMenuItem makeRadioButtonMenuItem(String key) {\n        JRadioButtonMenuItem m = new JRadioButtonMenuItem(\"\");\n        // TODO: set font only on java<1.4?\n        // NOTE: now using UIDefaults customization through Appearance Panel\n        // instead of corina.menubar.font property - cross this off PRIORITY list\n        m.setText(I18n.getText(key));\n        if (!App.platform.isMac()) {\n            Character mnemonic = I18n.getMnemonic(key);\n            if (mnemonic != null)\n                m.setMnemonic(mnemonic.charValue());\n        }\n        String keystroke = I18n.getKeyStroke(key);\n        if (keystroke != null)\n            m.setAccelerator(KeyStroke.getKeyStroke(keystroke));\n        return m;\n    }\n\n    public static JButton makeButton(String key) {\n        JButton b = new JButton();\n        b.setText(I18n.getText(key));\n        if (!App.platform.isMac()) {\n            Character mnemonic = I18n.getMnemonic(key);\n            if (mnemonic != null)\n                b.setMnemonic(mnemonic.charValue());\n        }\n        return b;\n    }\n\n    public static JLabel makeLabel(String key) {\n        JLabel l = new JLabel();\n        l.setText(I18n.getText(key));\n        return l;\n    }\n\n    public static JRadioButton makeRadioButton(String key) {\n        JRadioButton r = new JRadioButton();\n        r.setText(I18n.getText(key));\n        if (!App.platform.isMac()) {\n            Character mnemonic = I18n.getMnemonic(key);\n            if (mnemonic != null)\n                r.setMnemonic(mnemonic.charValue());\n        }\n        return r;\n    }\n\n    // i make icons from files in Images/ so often, i'll just make it a builder method.\n    // use: Builder.getIcon(\"x.png\") returns an Icon made from the file \"Images/x.png\".\n    public static Icon getIcon(String name) {\n        java.net.URL url = cl.getResource(\"Images/\" + name);\n        if (url != null)\n            return new ImageIcon(url);\n        else\n            return null;\n    }\n\n    // TODO: Cursor makeCursor(String name)\n    // (yeah, it's pretty much the same as getIcon(), but don't tell anybody!)\n    public static Image getImage(String name) {\n        java.net.URL url = cl.getResource(\"Images/\" + name);\n        if (url != null)\n            return new ImageIcon(url).getImage();\n        else\n            return null;\n    }\n\n    // my classloador, for getting icons as resources.\n    private static ClassLoader cl = corina.ui.Builder.class.getClassLoader();\n\n    // ----------------------------------------\n    /*\n\t REFACTOR!\n\t \n\t pattern:\n\t \n\t A.addActionListener(new AbstractAction() {\n\t public void actionPerformed(ActionEvent e) {\n\t new B();\n\t }\n\t });\n\t \n\t or:\n\t \n\t A.addActionListener(new AbstractAction() {\n\t public void actionPerformed(ActionEvent e) {\n\t B.c();\n\t }\n\t });\n\t \n\t -- of course, what i really want is simpler closures.\n\t can i fake that easily?\n\t \n\t how about another param for Builder?\n\t Builder.makeMenuItem(\"crossdate_kit\", \"new CrossdateKit();\");\n\t not perfect, but it would make my job easier in places, i think.\n\t (same for buttons?)\n\t */\n    /**\n     * An easy way to add actions.  The action string is of the form\n     * <code>\"new package.SomeClass();\"</code> or\n     * <code>\"package.SomeClass.staticMethod();</code>.  Be sure to\n     * fully-qualify the class name.\n     * @param button a JButton or JMenuItem\n     * @param action an action string\n     */\n    public static void addAction(AbstractButton button, String action) {\n        // parse |action|\n        action = action.trim();\n        StringTokenizer tok = new StringTokenizer(action, \" ();\");\n        String arg1 = tok.nextToken();\n        // \"new package.SomeClass();\"\n        if (arg1.equals(\"new\")) {\n            String arg2 = tok.nextToken();\n            try {\n                final Class c = Class.forName(arg2);\n                button.addActionListener(new AbstractAction() {\n\n                    public void actionPerformed(ActionEvent e) {\n                        try {\n                            c.newInstance();\n                        } catch (Exception ex) {\n                            System.out.println(\"Builder.addAction(): can't instantiate \" + c);\n                            // FIXME?  (state what the action was, at least)\n                            ex.printStackTrace(System.out);\n                        }\n                    }\n                });\n            } catch (ClassNotFoundException cnfe) {\n                throw new IllegalArgumentException(\"class '\" + arg2 + \"' not found\");\n            }\n            return;\n        }\n        // \"package.SomeClass.staticMethod();\"\n        int lastDot = action.lastIndexOf(\".\");\n        if (lastDot == -1)\n            throw new IllegalArgumentException(\"no 'new' or '.' in action string\");\n        final String className = action.substring(0, lastDot);\n        // the method name is everything after the last dot, for as long\n        // as java-identifier chars are available.\n        String methodName = action.substring(lastDot + 1);\n        while (!Character.isJavaIdentifierPart(methodName.charAt(methodName.length() - 1))) methodName = methodName.substring(0, methodName.length() - 1);\n        final String methodNameGlue = methodName;\n        try {\n            Class c = Class.forName(className);\n            final Method m = c.getMethod(methodName, new Class[] {});\n            button.addActionListener(new AbstractAction() {\n\n                public void actionPerformed(ActionEvent e) {\n                    try {\n                        m.invoke(null, new Object[] {});\n                        // IllegalAccess, InvocationTarget exceptions\n                    } catch (Exception ex) {\n                        ex.printStackTrace();\n                        throw new IllegalArgumentException(\"Builder.addAction(): can't invoke \" + \"requested method (\" + methodNameGlue + \" in \" + className + \")\");\n                    }\n                }\n            });\n        } catch (ClassNotFoundException cnfe) {\n            throw new IllegalArgumentException(\"Builder.addAction(): can't find requested class\");\n        } catch (NoSuchMethodException nsme) {\n            throw new IllegalArgumentException(\"Builder.addAction(): can't find requested method\");\n        }\n    }\n}\n",
		"id": "/EvoSuiteBenchmark/35_corina/src/main/java/corina/ui/Builder_6Test.java",
		"test_prompt": "// Builder_6Test.java\npackage corina.ui;\n\nimport java.awt.Image;\nimport java.awt.event.ActionEvent;\nimport java.lang.reflect.Method;\nimport java.util.StringTokenizer;\nimport javax.swing.AbstractAction;\nimport javax.swing.AbstractButton;\nimport javax.swing.Icon;\nimport javax.swing.ImageIcon;\nimport javax.swing.JButton;\nimport javax.swing.JLabel;\nimport javax.swing.JMenu;\nimport javax.swing.JMenuItem;\nimport javax.swing.JRadioButton;\nimport javax.swing.JRadioButtonMenuItem;\nimport javax.swing.JCheckBoxMenuItem;\nimport javax.swing.KeyStroke;\nimport corina.core.App;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link Builder}.\n* It contains ten unit test cases for the {@link Builder#makeButton(String)} method.\n*/\nclass Builder_6Test {"
	},
	{
		"original_code": "// Builder.java\npackage corina.ui;\n\nimport java.awt.Image;\nimport java.awt.event.ActionEvent;\nimport java.lang.reflect.Method;\nimport java.util.StringTokenizer;\nimport javax.swing.AbstractAction;\nimport javax.swing.AbstractButton;\nimport javax.swing.Icon;\nimport javax.swing.ImageIcon;\nimport javax.swing.JButton;\nimport javax.swing.JLabel;\nimport javax.swing.JMenu;\nimport javax.swing.JMenuItem;\nimport javax.swing.JRadioButton;\nimport javax.swing.JRadioButtonMenuItem;\nimport javax.swing.JCheckBoxMenuItem;\nimport javax.swing.KeyStroke;\nimport corina.core.App;\n\n// TODO: if on 1.4, use setDisplayedMnemonicIndex() so \"Save &As...\"\n// underlines the correct 'A'\npublic class Builder {\n\n    // (don't instantiate me)\n    private Builder() {\n    }\n\n    // UNUSED!\n    // 4 spaces\n    public final static String INDENT = \"    \";\n\n    public static JMenu makeMenu(String key) {\n        JMenu m = new JMenu();\n        // TODO: set font only on java<1.4?\n        // NOTE: now using UIDefaults customization through Appearance Panel\n        // instead of corina.menubar.font property - cross this off PRIORITY list\n        m.setText(I18n.getText(key));\n        if (!App.platform.isMac()) {\n            Character mnemonic = I18n.getMnemonic(key);\n            if (mnemonic != null)\n                m.setMnemonic(mnemonic.charValue());\n        }\n        return m;\n    }\n\n    public static JMenuItem makeMenuItem(String key) {\n        JMenuItem m = new JMenuItem(\"\");\n        // TODO: set font only on java<1.4?\n        // NOTE: now using UIDefaults customization through Appearance Panel\n        // instead of corina.menubar.font property - cross this off PRIORITY list\n        m.setText(I18n.getText(key));\n        if (!App.platform.isMac()) {\n            Character mnemonic = I18n.getMnemonic(key);\n            if (mnemonic != null)\n                m.setMnemonic(mnemonic.charValue());\n        }\n        String keystroke = I18n.getKeyStroke(key);\n        if (keystroke != null)\n            m.setAccelerator(KeyStroke.getKeyStroke(keystroke));\n        return m;\n    }\n\n    public static JMenuItem makeMenuItem(String key, boolean enabled) {\n        JMenuItem m = makeMenuItem(key);\n        m.setEnabled(enabled);\n        return m;\n    }\n\n    public static JMenuItem makeMenuItem(String key, String action) {\n        JMenuItem m = makeMenuItem(key);\n        addAction(m, action);\n        return m;\n    }\n\n    public static JCheckBoxMenuItem makeCheckBoxMenuItem(String key) {\n        JCheckBoxMenuItem m = new JCheckBoxMenuItem(\"\");\n        // TODO: set font only on java<1.4?\n        // NOTE: now using UIDefaults customization through Appearance Panel\n        // instead of corina.menubar.font property - cross this off PRIORITY list\n        m.setText(I18n.getText(key));\n        if (!App.platform.isMac()) {\n            Character mnemonic = I18n.getMnemonic(key);\n            if (mnemonic != null)\n                m.setMnemonic(mnemonic.charValue());\n        }\n        String keystroke = I18n.getKeyStroke(key);\n        if (keystroke != null)\n            m.setAccelerator(KeyStroke.getKeyStroke(keystroke));\n        return m;\n    }\n\n    public static JRadioButtonMenuItem makeRadioButtonMenuItem(String key) {\n        JRadioButtonMenuItem m = new JRadioButtonMenuItem(\"\");\n        // TODO: set font only on java<1.4?\n        // NOTE: now using UIDefaults customization through Appearance Panel\n        // instead of corina.menubar.font property - cross this off PRIORITY list\n        m.setText(I18n.getText(key));\n        if (!App.platform.isMac()) {\n            Character mnemonic = I18n.getMnemonic(key);\n            if (mnemonic != null)\n                m.setMnemonic(mnemonic.charValue());\n        }\n        String keystroke = I18n.getKeyStroke(key);\n        if (keystroke != null)\n            m.setAccelerator(KeyStroke.getKeyStroke(keystroke));\n        return m;\n    }\n\n    public static JButton makeButton(String key) {\n        JButton b = new JButton();\n        b.setText(I18n.getText(key));\n        if (!App.platform.isMac()) {\n            Character mnemonic = I18n.getMnemonic(key);\n            if (mnemonic != null)\n                b.setMnemonic(mnemonic.charValue());\n        }\n        return b;\n    }\n\n    public static JLabel makeLabel(String key) {\n        JLabel l = new JLabel();\n        l.setText(I18n.getText(key));\n        return l;\n    }\n\n    public static JRadioButton makeRadioButton(String key) {\n        JRadioButton r = new JRadioButton();\n        r.setText(I18n.getText(key));\n        if (!App.platform.isMac()) {\n            Character mnemonic = I18n.getMnemonic(key);\n            if (mnemonic != null)\n                r.setMnemonic(mnemonic.charValue());\n        }\n        return r;\n    }\n\n    // i make icons from files in Images/ so often, i'll just make it a builder method.\n    // use: Builder.getIcon(\"x.png\") returns an Icon made from the file \"Images/x.png\".\n    public static Icon getIcon(String name) {\n        java.net.URL url = cl.getResource(\"Images/\" + name);\n        if (url != null)\n            return new ImageIcon(url);\n        else\n            return null;\n    }\n\n    // TODO: Cursor makeCursor(String name)\n    // (yeah, it's pretty much the same as getIcon(), but don't tell anybody!)\n    public static Image getImage(String name) {\n        java.net.URL url = cl.getResource(\"Images/\" + name);\n        if (url != null)\n            return new ImageIcon(url).getImage();\n        else\n            return null;\n    }\n\n    // my classloador, for getting icons as resources.\n    private static ClassLoader cl = corina.ui.Builder.class.getClassLoader();\n\n    // ----------------------------------------\n    /*\n\t REFACTOR!\n\t \n\t pattern:\n\t \n\t A.addActionListener(new AbstractAction() {\n\t public void actionPerformed(ActionEvent e) {\n\t new B();\n\t }\n\t });\n\t \n\t or:\n\t \n\t A.addActionListener(new AbstractAction() {\n\t public void actionPerformed(ActionEvent e) {\n\t B.c();\n\t }\n\t });\n\t \n\t -- of course, what i really want is simpler closures.\n\t can i fake that easily?\n\t \n\t how about another param for Builder?\n\t Builder.makeMenuItem(\"crossdate_kit\", \"new CrossdateKit();\");\n\t not perfect, but it would make my job easier in places, i think.\n\t (same for buttons?)\n\t */\n    /**\n     * An easy way to add actions.  The action string is of the form\n     * <code>\"new package.SomeClass();\"</code> or\n     * <code>\"package.SomeClass.staticMethod();</code>.  Be sure to\n     * fully-qualify the class name.\n     * @param button a JButton or JMenuItem\n     * @param action an action string\n     */\n    public static void addAction(AbstractButton button, String action) {\n        // parse |action|\n        action = action.trim();\n        StringTokenizer tok = new StringTokenizer(action, \" ();\");\n        String arg1 = tok.nextToken();\n        // \"new package.SomeClass();\"\n        if (arg1.equals(\"new\")) {\n            String arg2 = tok.nextToken();\n            try {\n                final Class c = Class.forName(arg2);\n                button.addActionListener(new AbstractAction() {\n\n                    public void actionPerformed(ActionEvent e) {\n                        try {\n                            c.newInstance();\n                        } catch (Exception ex) {\n                            System.out.println(\"Builder.addAction(): can't instantiate \" + c);\n                            // FIXME?  (state what the action was, at least)\n                            ex.printStackTrace(System.out);\n                        }\n                    }\n                });\n            } catch (ClassNotFoundException cnfe) {\n                throw new IllegalArgumentException(\"class '\" + arg2 + \"' not found\");\n            }\n            return;\n        }\n        // \"package.SomeClass.staticMethod();\"\n        int lastDot = action.lastIndexOf(\".\");\n        if (lastDot == -1)\n            throw new IllegalArgumentException(\"no 'new' or '.' in action string\");\n        final String className = action.substring(0, lastDot);\n        // the method name is everything after the last dot, for as long\n        // as java-identifier chars are available.\n        String methodName = action.substring(lastDot + 1);\n        while (!Character.isJavaIdentifierPart(methodName.charAt(methodName.length() - 1))) methodName = methodName.substring(0, methodName.length() - 1);\n        final String methodNameGlue = methodName;\n        try {\n            Class c = Class.forName(className);\n            final Method m = c.getMethod(methodName, new Class[] {});\n            button.addActionListener(new AbstractAction() {\n\n                public void actionPerformed(ActionEvent e) {\n                    try {\n                        m.invoke(null, new Object[] {});\n                        // IllegalAccess, InvocationTarget exceptions\n                    } catch (Exception ex) {\n                        ex.printStackTrace();\n                        throw new IllegalArgumentException(\"Builder.addAction(): can't invoke \" + \"requested method (\" + methodNameGlue + \" in \" + className + \")\");\n                    }\n                }\n            });\n        } catch (ClassNotFoundException cnfe) {\n            throw new IllegalArgumentException(\"Builder.addAction(): can't find requested class\");\n        } catch (NoSuchMethodException nsme) {\n            throw new IllegalArgumentException(\"Builder.addAction(): can't find requested method\");\n        }\n    }\n}\n",
		"id": "/EvoSuiteBenchmark/35_corina/src/main/java/corina/ui/Builder_7Test.java",
		"test_prompt": "// Builder_7Test.java\npackage corina.ui;\n\nimport java.awt.Image;\nimport java.awt.event.ActionEvent;\nimport java.lang.reflect.Method;\nimport java.util.StringTokenizer;\nimport javax.swing.AbstractAction;\nimport javax.swing.AbstractButton;\nimport javax.swing.Icon;\nimport javax.swing.ImageIcon;\nimport javax.swing.JButton;\nimport javax.swing.JLabel;\nimport javax.swing.JMenu;\nimport javax.swing.JMenuItem;\nimport javax.swing.JRadioButton;\nimport javax.swing.JRadioButtonMenuItem;\nimport javax.swing.JCheckBoxMenuItem;\nimport javax.swing.KeyStroke;\nimport corina.core.App;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link Builder}.\n* It contains ten unit test cases for the {@link Builder#makeLabel(String)} method.\n*/\nclass Builder_7Test {"
	},
	{
		"original_code": "// Builder.java\npackage corina.ui;\n\nimport java.awt.Image;\nimport java.awt.event.ActionEvent;\nimport java.lang.reflect.Method;\nimport java.util.StringTokenizer;\nimport javax.swing.AbstractAction;\nimport javax.swing.AbstractButton;\nimport javax.swing.Icon;\nimport javax.swing.ImageIcon;\nimport javax.swing.JButton;\nimport javax.swing.JLabel;\nimport javax.swing.JMenu;\nimport javax.swing.JMenuItem;\nimport javax.swing.JRadioButton;\nimport javax.swing.JRadioButtonMenuItem;\nimport javax.swing.JCheckBoxMenuItem;\nimport javax.swing.KeyStroke;\nimport corina.core.App;\n\n// TODO: if on 1.4, use setDisplayedMnemonicIndex() so \"Save &As...\"\n// underlines the correct 'A'\npublic class Builder {\n\n    // (don't instantiate me)\n    private Builder() {\n    }\n\n    // UNUSED!\n    // 4 spaces\n    public final static String INDENT = \"    \";\n\n    public static JMenu makeMenu(String key) {\n        JMenu m = new JMenu();\n        // TODO: set font only on java<1.4?\n        // NOTE: now using UIDefaults customization through Appearance Panel\n        // instead of corina.menubar.font property - cross this off PRIORITY list\n        m.setText(I18n.getText(key));\n        if (!App.platform.isMac()) {\n            Character mnemonic = I18n.getMnemonic(key);\n            if (mnemonic != null)\n                m.setMnemonic(mnemonic.charValue());\n        }\n        return m;\n    }\n\n    public static JMenuItem makeMenuItem(String key) {\n        JMenuItem m = new JMenuItem(\"\");\n        // TODO: set font only on java<1.4?\n        // NOTE: now using UIDefaults customization through Appearance Panel\n        // instead of corina.menubar.font property - cross this off PRIORITY list\n        m.setText(I18n.getText(key));\n        if (!App.platform.isMac()) {\n            Character mnemonic = I18n.getMnemonic(key);\n            if (mnemonic != null)\n                m.setMnemonic(mnemonic.charValue());\n        }\n        String keystroke = I18n.getKeyStroke(key);\n        if (keystroke != null)\n            m.setAccelerator(KeyStroke.getKeyStroke(keystroke));\n        return m;\n    }\n\n    public static JMenuItem makeMenuItem(String key, boolean enabled) {\n        JMenuItem m = makeMenuItem(key);\n        m.setEnabled(enabled);\n        return m;\n    }\n\n    public static JMenuItem makeMenuItem(String key, String action) {\n        JMenuItem m = makeMenuItem(key);\n        addAction(m, action);\n        return m;\n    }\n\n    public static JCheckBoxMenuItem makeCheckBoxMenuItem(String key) {\n        JCheckBoxMenuItem m = new JCheckBoxMenuItem(\"\");\n        // TODO: set font only on java<1.4?\n        // NOTE: now using UIDefaults customization through Appearance Panel\n        // instead of corina.menubar.font property - cross this off PRIORITY list\n        m.setText(I18n.getText(key));\n        if (!App.platform.isMac()) {\n            Character mnemonic = I18n.getMnemonic(key);\n            if (mnemonic != null)\n                m.setMnemonic(mnemonic.charValue());\n        }\n        String keystroke = I18n.getKeyStroke(key);\n        if (keystroke != null)\n            m.setAccelerator(KeyStroke.getKeyStroke(keystroke));\n        return m;\n    }\n\n    public static JRadioButtonMenuItem makeRadioButtonMenuItem(String key) {\n        JRadioButtonMenuItem m = new JRadioButtonMenuItem(\"\");\n        // TODO: set font only on java<1.4?\n        // NOTE: now using UIDefaults customization through Appearance Panel\n        // instead of corina.menubar.font property - cross this off PRIORITY list\n        m.setText(I18n.getText(key));\n        if (!App.platform.isMac()) {\n            Character mnemonic = I18n.getMnemonic(key);\n            if (mnemonic != null)\n                m.setMnemonic(mnemonic.charValue());\n        }\n        String keystroke = I18n.getKeyStroke(key);\n        if (keystroke != null)\n            m.setAccelerator(KeyStroke.getKeyStroke(keystroke));\n        return m;\n    }\n\n    public static JButton makeButton(String key) {\n        JButton b = new JButton();\n        b.setText(I18n.getText(key));\n        if (!App.platform.isMac()) {\n            Character mnemonic = I18n.getMnemonic(key);\n            if (mnemonic != null)\n                b.setMnemonic(mnemonic.charValue());\n        }\n        return b;\n    }\n\n    public static JLabel makeLabel(String key) {\n        JLabel l = new JLabel();\n        l.setText(I18n.getText(key));\n        return l;\n    }\n\n    public static JRadioButton makeRadioButton(String key) {\n        JRadioButton r = new JRadioButton();\n        r.setText(I18n.getText(key));\n        if (!App.platform.isMac()) {\n            Character mnemonic = I18n.getMnemonic(key);\n            if (mnemonic != null)\n                r.setMnemonic(mnemonic.charValue());\n        }\n        return r;\n    }\n\n    // i make icons from files in Images/ so often, i'll just make it a builder method.\n    // use: Builder.getIcon(\"x.png\") returns an Icon made from the file \"Images/x.png\".\n    public static Icon getIcon(String name) {\n        java.net.URL url = cl.getResource(\"Images/\" + name);\n        if (url != null)\n            return new ImageIcon(url);\n        else\n            return null;\n    }\n\n    // TODO: Cursor makeCursor(String name)\n    // (yeah, it's pretty much the same as getIcon(), but don't tell anybody!)\n    public static Image getImage(String name) {\n        java.net.URL url = cl.getResource(\"Images/\" + name);\n        if (url != null)\n            return new ImageIcon(url).getImage();\n        else\n            return null;\n    }\n\n    // my classloador, for getting icons as resources.\n    private static ClassLoader cl = corina.ui.Builder.class.getClassLoader();\n\n    // ----------------------------------------\n    /*\n\t REFACTOR!\n\t \n\t pattern:\n\t \n\t A.addActionListener(new AbstractAction() {\n\t public void actionPerformed(ActionEvent e) {\n\t new B();\n\t }\n\t });\n\t \n\t or:\n\t \n\t A.addActionListener(new AbstractAction() {\n\t public void actionPerformed(ActionEvent e) {\n\t B.c();\n\t }\n\t });\n\t \n\t -- of course, what i really want is simpler closures.\n\t can i fake that easily?\n\t \n\t how about another param for Builder?\n\t Builder.makeMenuItem(\"crossdate_kit\", \"new CrossdateKit();\");\n\t not perfect, but it would make my job easier in places, i think.\n\t (same for buttons?)\n\t */\n    /**\n     * An easy way to add actions.  The action string is of the form\n     * <code>\"new package.SomeClass();\"</code> or\n     * <code>\"package.SomeClass.staticMethod();</code>.  Be sure to\n     * fully-qualify the class name.\n     * @param button a JButton or JMenuItem\n     * @param action an action string\n     */\n    public static void addAction(AbstractButton button, String action) {\n        // parse |action|\n        action = action.trim();\n        StringTokenizer tok = new StringTokenizer(action, \" ();\");\n        String arg1 = tok.nextToken();\n        // \"new package.SomeClass();\"\n        if (arg1.equals(\"new\")) {\n            String arg2 = tok.nextToken();\n            try {\n                final Class c = Class.forName(arg2);\n                button.addActionListener(new AbstractAction() {\n\n                    public void actionPerformed(ActionEvent e) {\n                        try {\n                            c.newInstance();\n                        } catch (Exception ex) {\n                            System.out.println(\"Builder.addAction(): can't instantiate \" + c);\n                            // FIXME?  (state what the action was, at least)\n                            ex.printStackTrace(System.out);\n                        }\n                    }\n                });\n            } catch (ClassNotFoundException cnfe) {\n                throw new IllegalArgumentException(\"class '\" + arg2 + \"' not found\");\n            }\n            return;\n        }\n        // \"package.SomeClass.staticMethod();\"\n        int lastDot = action.lastIndexOf(\".\");\n        if (lastDot == -1)\n            throw new IllegalArgumentException(\"no 'new' or '.' in action string\");\n        final String className = action.substring(0, lastDot);\n        // the method name is everything after the last dot, for as long\n        // as java-identifier chars are available.\n        String methodName = action.substring(lastDot + 1);\n        while (!Character.isJavaIdentifierPart(methodName.charAt(methodName.length() - 1))) methodName = methodName.substring(0, methodName.length() - 1);\n        final String methodNameGlue = methodName;\n        try {\n            Class c = Class.forName(className);\n            final Method m = c.getMethod(methodName, new Class[] {});\n            button.addActionListener(new AbstractAction() {\n\n                public void actionPerformed(ActionEvent e) {\n                    try {\n                        m.invoke(null, new Object[] {});\n                        // IllegalAccess, InvocationTarget exceptions\n                    } catch (Exception ex) {\n                        ex.printStackTrace();\n                        throw new IllegalArgumentException(\"Builder.addAction(): can't invoke \" + \"requested method (\" + methodNameGlue + \" in \" + className + \")\");\n                    }\n                }\n            });\n        } catch (ClassNotFoundException cnfe) {\n            throw new IllegalArgumentException(\"Builder.addAction(): can't find requested class\");\n        } catch (NoSuchMethodException nsme) {\n            throw new IllegalArgumentException(\"Builder.addAction(): can't find requested method\");\n        }\n    }\n}\n",
		"id": "/EvoSuiteBenchmark/35_corina/src/main/java/corina/ui/Builder_8Test.java",
		"test_prompt": "// Builder_8Test.java\npackage corina.ui;\n\nimport java.awt.Image;\nimport java.awt.event.ActionEvent;\nimport java.lang.reflect.Method;\nimport java.util.StringTokenizer;\nimport javax.swing.AbstractAction;\nimport javax.swing.AbstractButton;\nimport javax.swing.Icon;\nimport javax.swing.ImageIcon;\nimport javax.swing.JButton;\nimport javax.swing.JLabel;\nimport javax.swing.JMenu;\nimport javax.swing.JMenuItem;\nimport javax.swing.JRadioButton;\nimport javax.swing.JRadioButtonMenuItem;\nimport javax.swing.JCheckBoxMenuItem;\nimport javax.swing.KeyStroke;\nimport corina.core.App;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link Builder}.\n* It contains ten unit test cases for the {@link Builder#makeRadioButton(String)} method.\n*/\nclass Builder_8Test {"
	},
	{
		"original_code": "// Builder.java\npackage corina.ui;\n\nimport java.awt.Image;\nimport java.awt.event.ActionEvent;\nimport java.lang.reflect.Method;\nimport java.util.StringTokenizer;\nimport javax.swing.AbstractAction;\nimport javax.swing.AbstractButton;\nimport javax.swing.Icon;\nimport javax.swing.ImageIcon;\nimport javax.swing.JButton;\nimport javax.swing.JLabel;\nimport javax.swing.JMenu;\nimport javax.swing.JMenuItem;\nimport javax.swing.JRadioButton;\nimport javax.swing.JRadioButtonMenuItem;\nimport javax.swing.JCheckBoxMenuItem;\nimport javax.swing.KeyStroke;\nimport corina.core.App;\n\n// TODO: if on 1.4, use setDisplayedMnemonicIndex() so \"Save &As...\"\n// underlines the correct 'A'\npublic class Builder {\n\n    // (don't instantiate me)\n    private Builder() {\n    }\n\n    // UNUSED!\n    // 4 spaces\n    public final static String INDENT = \"    \";\n\n    public static JMenu makeMenu(String key) {\n        JMenu m = new JMenu();\n        // TODO: set font only on java<1.4?\n        // NOTE: now using UIDefaults customization through Appearance Panel\n        // instead of corina.menubar.font property - cross this off PRIORITY list\n        m.setText(I18n.getText(key));\n        if (!App.platform.isMac()) {\n            Character mnemonic = I18n.getMnemonic(key);\n            if (mnemonic != null)\n                m.setMnemonic(mnemonic.charValue());\n        }\n        return m;\n    }\n\n    public static JMenuItem makeMenuItem(String key) {\n        JMenuItem m = new JMenuItem(\"\");\n        // TODO: set font only on java<1.4?\n        // NOTE: now using UIDefaults customization through Appearance Panel\n        // instead of corina.menubar.font property - cross this off PRIORITY list\n        m.setText(I18n.getText(key));\n        if (!App.platform.isMac()) {\n            Character mnemonic = I18n.getMnemonic(key);\n            if (mnemonic != null)\n                m.setMnemonic(mnemonic.charValue());\n        }\n        String keystroke = I18n.getKeyStroke(key);\n        if (keystroke != null)\n            m.setAccelerator(KeyStroke.getKeyStroke(keystroke));\n        return m;\n    }\n\n    public static JMenuItem makeMenuItem(String key, boolean enabled) {\n        JMenuItem m = makeMenuItem(key);\n        m.setEnabled(enabled);\n        return m;\n    }\n\n    public static JMenuItem makeMenuItem(String key, String action) {\n        JMenuItem m = makeMenuItem(key);\n        addAction(m, action);\n        return m;\n    }\n\n    public static JCheckBoxMenuItem makeCheckBoxMenuItem(String key) {\n        JCheckBoxMenuItem m = new JCheckBoxMenuItem(\"\");\n        // TODO: set font only on java<1.4?\n        // NOTE: now using UIDefaults customization through Appearance Panel\n        // instead of corina.menubar.font property - cross this off PRIORITY list\n        m.setText(I18n.getText(key));\n        if (!App.platform.isMac()) {\n            Character mnemonic = I18n.getMnemonic(key);\n            if (mnemonic != null)\n                m.setMnemonic(mnemonic.charValue());\n        }\n        String keystroke = I18n.getKeyStroke(key);\n        if (keystroke != null)\n            m.setAccelerator(KeyStroke.getKeyStroke(keystroke));\n        return m;\n    }\n\n    public static JRadioButtonMenuItem makeRadioButtonMenuItem(String key) {\n        JRadioButtonMenuItem m = new JRadioButtonMenuItem(\"\");\n        // TODO: set font only on java<1.4?\n        // NOTE: now using UIDefaults customization through Appearance Panel\n        // instead of corina.menubar.font property - cross this off PRIORITY list\n        m.setText(I18n.getText(key));\n        if (!App.platform.isMac()) {\n            Character mnemonic = I18n.getMnemonic(key);\n            if (mnemonic != null)\n                m.setMnemonic(mnemonic.charValue());\n        }\n        String keystroke = I18n.getKeyStroke(key);\n        if (keystroke != null)\n            m.setAccelerator(KeyStroke.getKeyStroke(keystroke));\n        return m;\n    }\n\n    public static JButton makeButton(String key) {\n        JButton b = new JButton();\n        b.setText(I18n.getText(key));\n        if (!App.platform.isMac()) {\n            Character mnemonic = I18n.getMnemonic(key);\n            if (mnemonic != null)\n                b.setMnemonic(mnemonic.charValue());\n        }\n        return b;\n    }\n\n    public static JLabel makeLabel(String key) {\n        JLabel l = new JLabel();\n        l.setText(I18n.getText(key));\n        return l;\n    }\n\n    public static JRadioButton makeRadioButton(String key) {\n        JRadioButton r = new JRadioButton();\n        r.setText(I18n.getText(key));\n        if (!App.platform.isMac()) {\n            Character mnemonic = I18n.getMnemonic(key);\n            if (mnemonic != null)\n                r.setMnemonic(mnemonic.charValue());\n        }\n        return r;\n    }\n\n    // i make icons from files in Images/ so often, i'll just make it a builder method.\n    // use: Builder.getIcon(\"x.png\") returns an Icon made from the file \"Images/x.png\".\n    public static Icon getIcon(String name) {\n        java.net.URL url = cl.getResource(\"Images/\" + name);\n        if (url != null)\n            return new ImageIcon(url);\n        else\n            return null;\n    }\n\n    // TODO: Cursor makeCursor(String name)\n    // (yeah, it's pretty much the same as getIcon(), but don't tell anybody!)\n    public static Image getImage(String name) {\n        java.net.URL url = cl.getResource(\"Images/\" + name);\n        if (url != null)\n            return new ImageIcon(url).getImage();\n        else\n            return null;\n    }\n\n    // my classloador, for getting icons as resources.\n    private static ClassLoader cl = corina.ui.Builder.class.getClassLoader();\n\n    // ----------------------------------------\n    /*\n\t REFACTOR!\n\t \n\t pattern:\n\t \n\t A.addActionListener(new AbstractAction() {\n\t public void actionPerformed(ActionEvent e) {\n\t new B();\n\t }\n\t });\n\t \n\t or:\n\t \n\t A.addActionListener(new AbstractAction() {\n\t public void actionPerformed(ActionEvent e) {\n\t B.c();\n\t }\n\t });\n\t \n\t -- of course, what i really want is simpler closures.\n\t can i fake that easily?\n\t \n\t how about another param for Builder?\n\t Builder.makeMenuItem(\"crossdate_kit\", \"new CrossdateKit();\");\n\t not perfect, but it would make my job easier in places, i think.\n\t (same for buttons?)\n\t */\n    /**\n     * An easy way to add actions.  The action string is of the form\n     * <code>\"new package.SomeClass();\"</code> or\n     * <code>\"package.SomeClass.staticMethod();</code>.  Be sure to\n     * fully-qualify the class name.\n     * @param button a JButton or JMenuItem\n     * @param action an action string\n     */\n    public static void addAction(AbstractButton button, String action) {\n        // parse |action|\n        action = action.trim();\n        StringTokenizer tok = new StringTokenizer(action, \" ();\");\n        String arg1 = tok.nextToken();\n        // \"new package.SomeClass();\"\n        if (arg1.equals(\"new\")) {\n            String arg2 = tok.nextToken();\n            try {\n                final Class c = Class.forName(arg2);\n                button.addActionListener(new AbstractAction() {\n\n                    public void actionPerformed(ActionEvent e) {\n                        try {\n                            c.newInstance();\n                        } catch (Exception ex) {\n                            System.out.println(\"Builder.addAction(): can't instantiate \" + c);\n                            // FIXME?  (state what the action was, at least)\n                            ex.printStackTrace(System.out);\n                        }\n                    }\n                });\n            } catch (ClassNotFoundException cnfe) {\n                throw new IllegalArgumentException(\"class '\" + arg2 + \"' not found\");\n            }\n            return;\n        }\n        // \"package.SomeClass.staticMethod();\"\n        int lastDot = action.lastIndexOf(\".\");\n        if (lastDot == -1)\n            throw new IllegalArgumentException(\"no 'new' or '.' in action string\");\n        final String className = action.substring(0, lastDot);\n        // the method name is everything after the last dot, for as long\n        // as java-identifier chars are available.\n        String methodName = action.substring(lastDot + 1);\n        while (!Character.isJavaIdentifierPart(methodName.charAt(methodName.length() - 1))) methodName = methodName.substring(0, methodName.length() - 1);\n        final String methodNameGlue = methodName;\n        try {\n            Class c = Class.forName(className);\n            final Method m = c.getMethod(methodName, new Class[] {});\n            button.addActionListener(new AbstractAction() {\n\n                public void actionPerformed(ActionEvent e) {\n                    try {\n                        m.invoke(null, new Object[] {});\n                        // IllegalAccess, InvocationTarget exceptions\n                    } catch (Exception ex) {\n                        ex.printStackTrace();\n                        throw new IllegalArgumentException(\"Builder.addAction(): can't invoke \" + \"requested method (\" + methodNameGlue + \" in \" + className + \")\");\n                    }\n                }\n            });\n        } catch (ClassNotFoundException cnfe) {\n            throw new IllegalArgumentException(\"Builder.addAction(): can't find requested class\");\n        } catch (NoSuchMethodException nsme) {\n            throw new IllegalArgumentException(\"Builder.addAction(): can't find requested method\");\n        }\n    }\n}\n",
		"id": "/EvoSuiteBenchmark/35_corina/src/main/java/corina/ui/Builder_9Test.java",
		"test_prompt": "// Builder_9Test.java\npackage corina.ui;\n\nimport java.awt.Image;\nimport java.awt.event.ActionEvent;\nimport java.lang.reflect.Method;\nimport java.util.StringTokenizer;\nimport javax.swing.AbstractAction;\nimport javax.swing.AbstractButton;\nimport javax.swing.Icon;\nimport javax.swing.ImageIcon;\nimport javax.swing.JButton;\nimport javax.swing.JLabel;\nimport javax.swing.JMenu;\nimport javax.swing.JMenuItem;\nimport javax.swing.JRadioButton;\nimport javax.swing.JRadioButtonMenuItem;\nimport javax.swing.JCheckBoxMenuItem;\nimport javax.swing.KeyStroke;\nimport corina.core.App;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link Builder}.\n* It contains ten unit test cases for the {@link Builder#getIcon(String)} method.\n*/\nclass Builder_9Test {"
	},
	{
		"original_code": "// Builder.java\npackage corina.ui;\n\nimport java.awt.Image;\nimport java.awt.event.ActionEvent;\nimport java.lang.reflect.Method;\nimport java.util.StringTokenizer;\nimport javax.swing.AbstractAction;\nimport javax.swing.AbstractButton;\nimport javax.swing.Icon;\nimport javax.swing.ImageIcon;\nimport javax.swing.JButton;\nimport javax.swing.JLabel;\nimport javax.swing.JMenu;\nimport javax.swing.JMenuItem;\nimport javax.swing.JRadioButton;\nimport javax.swing.JRadioButtonMenuItem;\nimport javax.swing.JCheckBoxMenuItem;\nimport javax.swing.KeyStroke;\nimport corina.core.App;\n\n// TODO: if on 1.4, use setDisplayedMnemonicIndex() so \"Save &As...\"\n// underlines the correct 'A'\npublic class Builder {\n\n    // (don't instantiate me)\n    private Builder() {\n    }\n\n    // UNUSED!\n    // 4 spaces\n    public final static String INDENT = \"    \";\n\n    public static JMenu makeMenu(String key) {\n        JMenu m = new JMenu();\n        // TODO: set font only on java<1.4?\n        // NOTE: now using UIDefaults customization through Appearance Panel\n        // instead of corina.menubar.font property - cross this off PRIORITY list\n        m.setText(I18n.getText(key));\n        if (!App.platform.isMac()) {\n            Character mnemonic = I18n.getMnemonic(key);\n            if (mnemonic != null)\n                m.setMnemonic(mnemonic.charValue());\n        }\n        return m;\n    }\n\n    public static JMenuItem makeMenuItem(String key) {\n        JMenuItem m = new JMenuItem(\"\");\n        // TODO: set font only on java<1.4?\n        // NOTE: now using UIDefaults customization through Appearance Panel\n        // instead of corina.menubar.font property - cross this off PRIORITY list\n        m.setText(I18n.getText(key));\n        if (!App.platform.isMac()) {\n            Character mnemonic = I18n.getMnemonic(key);\n            if (mnemonic != null)\n                m.setMnemonic(mnemonic.charValue());\n        }\n        String keystroke = I18n.getKeyStroke(key);\n        if (keystroke != null)\n            m.setAccelerator(KeyStroke.getKeyStroke(keystroke));\n        return m;\n    }\n\n    public static JMenuItem makeMenuItem(String key, boolean enabled) {\n        JMenuItem m = makeMenuItem(key);\n        m.setEnabled(enabled);\n        return m;\n    }\n\n    public static JMenuItem makeMenuItem(String key, String action) {\n        JMenuItem m = makeMenuItem(key);\n        addAction(m, action);\n        return m;\n    }\n\n    public static JCheckBoxMenuItem makeCheckBoxMenuItem(String key) {\n        JCheckBoxMenuItem m = new JCheckBoxMenuItem(\"\");\n        // TODO: set font only on java<1.4?\n        // NOTE: now using UIDefaults customization through Appearance Panel\n        // instead of corina.menubar.font property - cross this off PRIORITY list\n        m.setText(I18n.getText(key));\n        if (!App.platform.isMac()) {\n            Character mnemonic = I18n.getMnemonic(key);\n            if (mnemonic != null)\n                m.setMnemonic(mnemonic.charValue());\n        }\n        String keystroke = I18n.getKeyStroke(key);\n        if (keystroke != null)\n            m.setAccelerator(KeyStroke.getKeyStroke(keystroke));\n        return m;\n    }\n\n    public static JRadioButtonMenuItem makeRadioButtonMenuItem(String key) {\n        JRadioButtonMenuItem m = new JRadioButtonMenuItem(\"\");\n        // TODO: set font only on java<1.4?\n        // NOTE: now using UIDefaults customization through Appearance Panel\n        // instead of corina.menubar.font property - cross this off PRIORITY list\n        m.setText(I18n.getText(key));\n        if (!App.platform.isMac()) {\n            Character mnemonic = I18n.getMnemonic(key);\n            if (mnemonic != null)\n                m.setMnemonic(mnemonic.charValue());\n        }\n        String keystroke = I18n.getKeyStroke(key);\n        if (keystroke != null)\n            m.setAccelerator(KeyStroke.getKeyStroke(keystroke));\n        return m;\n    }\n\n    public static JButton makeButton(String key) {\n        JButton b = new JButton();\n        b.setText(I18n.getText(key));\n        if (!App.platform.isMac()) {\n            Character mnemonic = I18n.getMnemonic(key);\n            if (mnemonic != null)\n                b.setMnemonic(mnemonic.charValue());\n        }\n        return b;\n    }\n\n    public static JLabel makeLabel(String key) {\n        JLabel l = new JLabel();\n        l.setText(I18n.getText(key));\n        return l;\n    }\n\n    public static JRadioButton makeRadioButton(String key) {\n        JRadioButton r = new JRadioButton();\n        r.setText(I18n.getText(key));\n        if (!App.platform.isMac()) {\n            Character mnemonic = I18n.getMnemonic(key);\n            if (mnemonic != null)\n                r.setMnemonic(mnemonic.charValue());\n        }\n        return r;\n    }\n\n    // i make icons from files in Images/ so often, i'll just make it a builder method.\n    // use: Builder.getIcon(\"x.png\") returns an Icon made from the file \"Images/x.png\".\n    public static Icon getIcon(String name) {\n        java.net.URL url = cl.getResource(\"Images/\" + name);\n        if (url != null)\n            return new ImageIcon(url);\n        else\n            return null;\n    }\n\n    // TODO: Cursor makeCursor(String name)\n    // (yeah, it's pretty much the same as getIcon(), but don't tell anybody!)\n    public static Image getImage(String name) {\n        java.net.URL url = cl.getResource(\"Images/\" + name);\n        if (url != null)\n            return new ImageIcon(url).getImage();\n        else\n            return null;\n    }\n\n    // my classloador, for getting icons as resources.\n    private static ClassLoader cl = corina.ui.Builder.class.getClassLoader();\n\n    // ----------------------------------------\n    /*\n\t REFACTOR!\n\t \n\t pattern:\n\t \n\t A.addActionListener(new AbstractAction() {\n\t public void actionPerformed(ActionEvent e) {\n\t new B();\n\t }\n\t });\n\t \n\t or:\n\t \n\t A.addActionListener(new AbstractAction() {\n\t public void actionPerformed(ActionEvent e) {\n\t B.c();\n\t }\n\t });\n\t \n\t -- of course, what i really want is simpler closures.\n\t can i fake that easily?\n\t \n\t how about another param for Builder?\n\t Builder.makeMenuItem(\"crossdate_kit\", \"new CrossdateKit();\");\n\t not perfect, but it would make my job easier in places, i think.\n\t (same for buttons?)\n\t */\n    /**\n     * An easy way to add actions.  The action string is of the form\n     * <code>\"new package.SomeClass();\"</code> or\n     * <code>\"package.SomeClass.staticMethod();</code>.  Be sure to\n     * fully-qualify the class name.\n     * @param button a JButton or JMenuItem\n     * @param action an action string\n     */\n    public static void addAction(AbstractButton button, String action) {\n        // parse |action|\n        action = action.trim();\n        StringTokenizer tok = new StringTokenizer(action, \" ();\");\n        String arg1 = tok.nextToken();\n        // \"new package.SomeClass();\"\n        if (arg1.equals(\"new\")) {\n            String arg2 = tok.nextToken();\n            try {\n                final Class c = Class.forName(arg2);\n                button.addActionListener(new AbstractAction() {\n\n                    public void actionPerformed(ActionEvent e) {\n                        try {\n                            c.newInstance();\n                        } catch (Exception ex) {\n                            System.out.println(\"Builder.addAction(): can't instantiate \" + c);\n                            // FIXME?  (state what the action was, at least)\n                            ex.printStackTrace(System.out);\n                        }\n                    }\n                });\n            } catch (ClassNotFoundException cnfe) {\n                throw new IllegalArgumentException(\"class '\" + arg2 + \"' not found\");\n            }\n            return;\n        }\n        // \"package.SomeClass.staticMethod();\"\n        int lastDot = action.lastIndexOf(\".\");\n        if (lastDot == -1)\n            throw new IllegalArgumentException(\"no 'new' or '.' in action string\");\n        final String className = action.substring(0, lastDot);\n        // the method name is everything after the last dot, for as long\n        // as java-identifier chars are available.\n        String methodName = action.substring(lastDot + 1);\n        while (!Character.isJavaIdentifierPart(methodName.charAt(methodName.length() - 1))) methodName = methodName.substring(0, methodName.length() - 1);\n        final String methodNameGlue = methodName;\n        try {\n            Class c = Class.forName(className);\n            final Method m = c.getMethod(methodName, new Class[] {});\n            button.addActionListener(new AbstractAction() {\n\n                public void actionPerformed(ActionEvent e) {\n                    try {\n                        m.invoke(null, new Object[] {});\n                        // IllegalAccess, InvocationTarget exceptions\n                    } catch (Exception ex) {\n                        ex.printStackTrace();\n                        throw new IllegalArgumentException(\"Builder.addAction(): can't invoke \" + \"requested method (\" + methodNameGlue + \" in \" + className + \")\");\n                    }\n                }\n            });\n        } catch (ClassNotFoundException cnfe) {\n            throw new IllegalArgumentException(\"Builder.addAction(): can't find requested class\");\n        } catch (NoSuchMethodException nsme) {\n            throw new IllegalArgumentException(\"Builder.addAction(): can't find requested method\");\n        }\n    }\n}\n",
		"id": "/EvoSuiteBenchmark/35_corina/src/main/java/corina/ui/Builder_10Test.java",
		"test_prompt": "// Builder_10Test.java\npackage corina.ui;\n\nimport java.awt.Image;\nimport java.awt.event.ActionEvent;\nimport java.lang.reflect.Method;\nimport java.util.StringTokenizer;\nimport javax.swing.AbstractAction;\nimport javax.swing.AbstractButton;\nimport javax.swing.Icon;\nimport javax.swing.ImageIcon;\nimport javax.swing.JButton;\nimport javax.swing.JLabel;\nimport javax.swing.JMenu;\nimport javax.swing.JMenuItem;\nimport javax.swing.JRadioButton;\nimport javax.swing.JRadioButtonMenuItem;\nimport javax.swing.JCheckBoxMenuItem;\nimport javax.swing.KeyStroke;\nimport corina.core.App;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link Builder}.\n* It contains ten unit test cases for the {@link Builder#getImage(String)} method.\n*/\nclass Builder_10Test {"
	},
	{
		"original_code": "// RuntimeUtils.java\npackage corina.ui;\n\nimport javax.swing.KeyStroke;\nimport corina.core.App;\n\npublic class RuntimeUtils {\n\n    // if str contains source, return a new string with target instead of source (once!);\n    // returns str if it doesn't contain source.  (think str ~= s/source/target/.)\n    // (if source==\"\", returns target+source, concatenated)\n    // this is like java 1.4's java.lang.String.replaceFirst()\n    public static String substitute(String str, String source, String target) {\n        int index = str.indexOf(source);\n        if (// not present\n        index == -1)\n            return str;\n        int start = index, end = index + source.length();\n        return str.substring(0, start) + target + str.substring(end);\n    }\n\n    // generate a keystroke, substituting either \"meta\" (mac) or \"control\" (other) for \"accel\", if needed\n    // -- just be careful, \"accel X\" works fine but \"accel x\" returns null (!! -- not my fault...)\n    public static KeyStroke getKeyStroke(String str) {\n        return KeyStroke.getKeyStroke(substitute(str, \"accel\", App.platform.isMac() ? \"meta\" : \"control\"));\n    }\n    // this is why, even if i could, i shouldn't use serialization for widgets: they need to get\n    // instantiated differently on different platforms, because they're going to end up different.\n}\n",
		"id": "/EvoSuiteBenchmark/35_corina/src/main/java/corina/ui/RuntimeUtils_0Test.java",
		"test_prompt": "// RuntimeUtils_0Test.java\npackage corina.ui;\n\nimport javax.swing.KeyStroke;\nimport corina.core.App;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link RuntimeUtils}.\n* It contains ten unit test cases for the {@link RuntimeUtils#substitute(String, String, String)} method.\n*/\nclass RuntimeUtils_0Test {"
	},
	{
		"original_code": "// RuntimeUtils.java\npackage corina.ui;\n\nimport javax.swing.KeyStroke;\nimport corina.core.App;\n\npublic class RuntimeUtils {\n\n    // if str contains source, return a new string with target instead of source (once!);\n    // returns str if it doesn't contain source.  (think str ~= s/source/target/.)\n    // (if source==\"\", returns target+source, concatenated)\n    // this is like java 1.4's java.lang.String.replaceFirst()\n    public static String substitute(String str, String source, String target) {\n        int index = str.indexOf(source);\n        if (// not present\n        index == -1)\n            return str;\n        int start = index, end = index + source.length();\n        return str.substring(0, start) + target + str.substring(end);\n    }\n\n    // generate a keystroke, substituting either \"meta\" (mac) or \"control\" (other) for \"accel\", if needed\n    // -- just be careful, \"accel X\" works fine but \"accel x\" returns null (!! -- not my fault...)\n    public static KeyStroke getKeyStroke(String str) {\n        return KeyStroke.getKeyStroke(substitute(str, \"accel\", App.platform.isMac() ? \"meta\" : \"control\"));\n    }\n    // this is why, even if i could, i shouldn't use serialization for widgets: they need to get\n    // instantiated differently on different platforms, because they're going to end up different.\n}\n",
		"id": "/EvoSuiteBenchmark/35_corina/src/main/java/corina/ui/RuntimeUtils_1Test.java",
		"test_prompt": "// RuntimeUtils_1Test.java\npackage corina.ui;\n\nimport javax.swing.KeyStroke;\nimport corina.core.App;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link RuntimeUtils}.\n* It contains ten unit test cases for the {@link RuntimeUtils#getKeyStroke(String)} method.\n*/\nclass RuntimeUtils_1Test {"
	},
	{
		"original_code": "// AskNumber.java\npackage corina.ui;\n\nimport java.awt.BorderLayout;\nimport java.awt.Dimension;\nimport java.awt.FlowLayout;\nimport java.awt.Frame;\nimport java.awt.Window;\nimport java.awt.event.ActionEvent;\nimport java.io.FileNotFoundException;\nimport java.io.IOException;\nimport javax.swing.AbstractAction;\nimport javax.swing.BorderFactory;\nimport javax.swing.Icon;\nimport javax.swing.JButton;\nimport javax.swing.JDialog;\nimport javax.swing.JLabel;\nimport javax.swing.JOptionPane;\nimport javax.swing.JPanel;\nimport javax.swing.JSpinner;\nimport javax.swing.SpinnerNumberModel;\nimport corina.core.App;\nimport corina.gui.Layout;\nimport corina.gui.UserCancelledException;\nimport corina.util.Center;\n\npublic class AskNumber extends JDialog {\n\n    private JSpinner spinner;\n\n    boolean isOk = false;\n\n    public AskNumber(Frame parent, String title, String text, int defaultValue) {\n        super(parent, title, true);\n        setDefaultCloseOperation(DISPOSE_ON_CLOSE);\n        JPanel top, bottom;\n        spinner = new JSpinner(new SpinnerNumberModel(defaultValue, 0, 9999, 1));\n        spinner.setValue(new Integer(defaultValue));\n        JLabel label = new JLabel(text);\n        label.setLabelFor(spinner);\n        label.setAlignmentX(JLabel.RIGHT_ALIGNMENT);\n        label.setBorder(BorderFactory.createEmptyBorder(0, 0, 0, 10));\n        top = Layout.borderLayout(null, label, null, spinner, null);\n        JButton cancel = Builder.makeButton(\"cancel\");\n        final JButton ok = Builder.makeButton(\"ok\");\n        //JPanel buttons = Layout.buttonLayout(null, null, cancel, ok);\n        JPanel buttons = Layout.flowLayoutR(ok, cancel);\n        buttons.setBorder(BorderFactory.createEmptyBorder(10, 0, 10, 0));\n        JPanel fixed = Layout.borderLayout(top, null, null, null, buttons);\n        fixed.setBorder(BorderFactory.createEmptyBorder(10, 14, 6, 14));\n        add(fixed);\n        AbstractAction okCancel = new AbstractAction() {\n\n            public void actionPerformed(ActionEvent e) {\n                isOk = (e.getSource() == ok);\n                dispose();\n            }\n        };\n        ok.addActionListener(okCancel);\n        cancel.addActionListener(okCancel);\n        pack();\n        // center it...\n        if (parent == null)\n            Center.center(this);\n        else\n            Center.center(this, parent);\n        show();\n    }\n\n    public static int getNumber(Frame parent, String title, String text, int defaultValue) throws UserCancelledException {\n        AskNumber a = new AskNumber(parent, title, text, defaultValue);\n        if (a.isOk == false)\n            throw new UserCancelledException();\n        return ((Integer) (a.spinner.getValue())).intValue();\n    }\n\n    // icon for dialogs\n    // WAS: Tree-64x64.png\n    private final static Icon treeIcon = Builder.getIcon(\"Tree-icon.png\");\n}\n",
		"id": "/EvoSuiteBenchmark/35_corina/src/main/java/corina/ui/AskNumber.java",
		"test_prompt": "// AskNumberTest.java\npackage corina.ui;\n\nimport java.awt.BorderLayout;\nimport java.awt.Dimension;\nimport java.awt.FlowLayout;\nimport java.awt.Frame;\nimport java.awt.Window;\nimport java.awt.event.ActionEvent;\nimport java.io.FileNotFoundException;\nimport java.io.IOException;\nimport javax.swing.AbstractAction;\nimport javax.swing.BorderFactory;\nimport javax.swing.Icon;\nimport javax.swing.JButton;\nimport javax.swing.JDialog;\nimport javax.swing.JLabel;\nimport javax.swing.JOptionPane;\nimport javax.swing.JPanel;\nimport javax.swing.JSpinner;\nimport javax.swing.SpinnerNumberModel;\nimport corina.core.App;\nimport corina.gui.Layout;\nimport corina.gui.UserCancelledException;\nimport corina.util.Center;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link AskNumber}.\n* It contains ten unit test cases for the {@link AskNumber#getNumber(Frame, String, String, int)} method.\n*/\nclass AskNumberTest {"
	},
	{
		"original_code": "// I18n.java\n//\n// This file is part of Corina.\n//\n// Corina is free software; you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation; either version 2 of the License, or\n// (at your option) any later version.\n//\n// Corina is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Corina; if not, write to the Free Software\n// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n//\n// Copyright 2003 Ken Harris <kbh7@cornell.edu>\n//\npackage corina.ui;\n\nimport java.util.MissingResourceException;\nimport java.util.ResourceBundle;\nimport corina.core.App;\nimport corina.util.StringUtils;\n\n/**\n *    Provide localization strings.\n *\n *    <p>Java's ResourceBundles are intended to do this, but they don't\n *    provide the level of support that most other libraries do.</p>\n *\n *    <p>For example, suppose you have a \"Copy\" menuitem.\n * <pre>\n *    JMenuItem copy = new JMenuItem(\"Copy\");\n * </pre>\n *\n *    Of course, you should internationalize this.  But you want to\n *    change the text, the mnemonic, and the keyboard accelerator.  If\n *    you only had ResourceBundle to work with, you might end up with 3\n *    lines of translation for every word in your program.  Plus, you'd\n *    have to know the name of the I18n file you used, each time you\n *    wanted to use it.  Most other libraries (like Powerplant on Mac and\n *    Win95 resources) let you put them all in one line, which makes the\n *    translator's job much easier.  That's what this class does.</p>\n *\n *    <p>Now, all you have to say is:\n * <pre>\n *    copy = &amp;Copy [accel C]\n * </pre>\n *\n *    <p>There are several things going on here:</p>\n *\n *    <ul>\n *\n *      <li>\"copy\" is the <i>key</i>.  When you want to refer to this\n *      entry, you'll ask for it by this name.  The user never sees this.\n *\n *      <li>\"Copy\" (without the &amp;) is the <i>text</i> of this key.\n *      This is what users will see in menuitems, buttons, and so forth.\n *\n *      <li>\"C\" (the thing right after the &amp;) is the <i>mnemonic</i>.\n *      On most platforms (all except Mac), this letter is underlined,\n *      and users can jump to it by pressing this letter, or Alt and this\n *      letter (depending on platform and context).\n *\n *      <li>\"accel C\" is the <i>keystroke</i>.  The user can press this\n *      at any time to invoke this command.  You can use the modifiers\n *      \"shift\", \"control\", \"alt\", and \"meta\", or the special modifier\n *      \"accel\".  \"accel\" is automatically turned into \"control\" on PCs\n *      (Windows and Linux), and \"meta\" (Java's term for \"command\") on\n *      Macs.  You should normally use the generic \"accel\" modifier.  You\n *      can also combine modifiers, like \"shift accel S\" (the standard\n *      keystroke for \"Save As...\").  The class javax.swing.KeyStroke\n *      takes these strings as input: you can say\n * <pre>\n *    KeyStroke.getKeyStroke(I18n.getKeyStroke(\"copy\"))\n * </pre>\n *      to get a Swing KeyStroke object.\n *\n *    </ul>\n *\n *    <p>This is convenient, but it gets even better: normally, you don't\n *    even have to mess with keystrokes and mnemonics.  You can simply\n *    use the Builder factory to do the dirty work for you:\n *\n * <pre>\n *    JMenuItem copy = Builder.makeMenuItem(\"copy\");\n * </pre>\n *\n *    Of course, if you just want the text (for making a printout, for\n *    example), you should still use I18n.getText().</p>\n *\n *    <p>Not all keys must have a keystroke, or a mnemonic.  Note that\n *    those methods can return nulls.</p>\n *\n *    <p>These methods get their values from the resource bundle called\n *    \"TextBundle\".  That is, the file is called\n *    \"TextBundle.properties\", or some variant, like\n *    \"TextBundle_de_DE.properties\".</p>\n *\n *    <h2>Left to do</h2>\n *    <ul>\n *      <li>The way getMnemonic() is set up, \"Save &as...\" will\n *          still show it as \"S&ave as...\".  Bad, but not fatal.\n *\n *      <li>Add way to escape [/]/&amp; in text; also, add markers so\n *          \"this text is mnemonic/text/keystroke\" and \"this text is\n * \t just a string\" are separate(?)\n *\n *      <li>in getKeyStroke(), why not use\n *          Toolkit.getDefaultToolkit().getMenuShortcutKeyMask() instead of\n * \t (?:) for command/control choice?\n *    </ul>\n *\n *    @see java.util.ResourceBundle\n *\n *    @author Ken Harris &lt;kbh7 <i style=\"color: gray\">at</i> cornell <i style=\"color: gray\">dot</i> edu&gt;\n *    @version $Id: I18n.java,v 1.4 2005/01/24 03:09:34 aaron Exp $\n */\npublic class I18n {\n\n    private I18n() {\n        // don't instantiate me\n    }\n\n    /**\n     *       Get the text for this key.  The text has no special control\n     *       characters in it, and can be presented to the user.\n     *\n     *       <p>For example, if the localization file has the line\n     *       <code>copy = &amp;Copy [accel C]</code>, the string \"Copy\" is\n     *       returned.</p>\n     *\n     *       @param key the key to look up in the localization file\n     *       @return the text\n     */\n    public static String getText(String key) {\n        String value = msg.getString(key);\n        StringBuffer buf = new StringBuffer();\n        int n = value.length();\n        boolean ignore = false;\n        for (int i = 0; i < n; i++) {\n            char c = value.charAt(i);\n            switch(c) {\n                case '&':\n                    continue;\n                case '[':\n                    ignore = true;\n                    break;\n                case ']':\n                    ignore = false;\n                    break;\n                default:\n                    if (!ignore)\n                        buf.append(c);\n            }\n        }\n        return buf.toString().trim();\n    }\n\n    /**\n     *       Get the keystroke string for this key.  This string can be\n     *       passed directly to the Keystroke.getKeyStroke() method.\n     *\n     *       <p>For example, if the localization file has the line\n     *       <code>copy = &amp;Copy [accel C]</code>, the string \"control C\"\n     *       is returned (or on the Mac, \"meta C\").</p>\n     *\n     *       <p>If the string has no [keystroke] listed, null is\n     *       returned.</p>\n     *\n     *       @param key the key to look up in the localization file\n     *       @return the keystroke string\n     */\n    public static String getKeyStroke(String key) {\n        String value = msg.getString(key);\n        int left = value.indexOf('[');\n        int right = value.indexOf(']');\n        if (left == -1 || right == -1)\n            return null;\n        String stroke = value.substring(left + 1, right).trim();\n        // accel = command (in java-ese: \"meta\") on mac, control on pc\n        String accel = (App.platform.isMac() ? \"meta\" : \"control\");\n        stroke = StringUtils.substitute(stroke, \"accel\", accel);\n        return stroke;\n    }\n\n    /**\n     *       Get the mnemonic character this key.\n     *\n     *       <p>For example, if the localization file has the line\n     *       <code>copy = &amp;Copy [accel C]</code>, the character \"C\" is\n     *       returned.</p>\n     *\n     *       <p>If the string has no &amp;mnemonic listed, null is\n     *       returned.</p>\n     *\n     *       @param key the key to look up in the localization file\n     *       @return the mnemonic character\n     */\n    public static Character getMnemonic(String key) {\n        String value = msg.getString(key);\n        int amp = value.indexOf('&');\n        if (amp == -1 || amp == value.length() - 1)\n            return null;\n        return new Character(Character.toUpperCase(value.charAt(amp + 1)));\n    }\n\n    // the resource bundle to use\n    private final static ResourceBundle msg;\n\n    static {\n        ResourceBundle bundle;\n        try {\n            bundle = ResourceBundle.getBundle(\"Translations/TextBundle\");\n        } catch (MissingResourceException mre) {\n            try {\n                bundle = ResourceBundle.getBundle(\"TextBundle\");\n            } catch (MissingResourceException mre2) {\n                mre2.printStackTrace();\n                bundle = new DefaultResourceBundle();\n            }\n        }\n        msg = bundle;\n    }\n}\n",
		"id": "/EvoSuiteBenchmark/35_corina/src/main/java/corina/ui/I18n_0Test.java",
		"test_prompt": "// I18n_0Test.java\n// This file is part of Corina.\n//\n// Corina is free software; you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation; either version 2 of the License, or\n// (at your option) any later version.\n//\n// Corina is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Corina; if not, write to the Free Software\n// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n//\n// Copyright 2003 Ken Harris <kbh7@cornell.edu>\n//\npackage corina.ui;\n\nimport java.util.MissingResourceException;\nimport java.util.ResourceBundle;\nimport corina.core.App;\nimport corina.util.StringUtils;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link I18n}.\n* It contains ten unit test cases for the {@link I18n#getText(String)} method.\n*/\nclass I18n_0Test {"
	},
	{
		"original_code": "// I18n.java\n//\n// This file is part of Corina.\n//\n// Corina is free software; you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation; either version 2 of the License, or\n// (at your option) any later version.\n//\n// Corina is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Corina; if not, write to the Free Software\n// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n//\n// Copyright 2003 Ken Harris <kbh7@cornell.edu>\n//\npackage corina.ui;\n\nimport java.util.MissingResourceException;\nimport java.util.ResourceBundle;\nimport corina.core.App;\nimport corina.util.StringUtils;\n\n/**\n *    Provide localization strings.\n *\n *    <p>Java's ResourceBundles are intended to do this, but they don't\n *    provide the level of support that most other libraries do.</p>\n *\n *    <p>For example, suppose you have a \"Copy\" menuitem.\n * <pre>\n *    JMenuItem copy = new JMenuItem(\"Copy\");\n * </pre>\n *\n *    Of course, you should internationalize this.  But you want to\n *    change the text, the mnemonic, and the keyboard accelerator.  If\n *    you only had ResourceBundle to work with, you might end up with 3\n *    lines of translation for every word in your program.  Plus, you'd\n *    have to know the name of the I18n file you used, each time you\n *    wanted to use it.  Most other libraries (like Powerplant on Mac and\n *    Win95 resources) let you put them all in one line, which makes the\n *    translator's job much easier.  That's what this class does.</p>\n *\n *    <p>Now, all you have to say is:\n * <pre>\n *    copy = &amp;Copy [accel C]\n * </pre>\n *\n *    <p>There are several things going on here:</p>\n *\n *    <ul>\n *\n *      <li>\"copy\" is the <i>key</i>.  When you want to refer to this\n *      entry, you'll ask for it by this name.  The user never sees this.\n *\n *      <li>\"Copy\" (without the &amp;) is the <i>text</i> of this key.\n *      This is what users will see in menuitems, buttons, and so forth.\n *\n *      <li>\"C\" (the thing right after the &amp;) is the <i>mnemonic</i>.\n *      On most platforms (all except Mac), this letter is underlined,\n *      and users can jump to it by pressing this letter, or Alt and this\n *      letter (depending on platform and context).\n *\n *      <li>\"accel C\" is the <i>keystroke</i>.  The user can press this\n *      at any time to invoke this command.  You can use the modifiers\n *      \"shift\", \"control\", \"alt\", and \"meta\", or the special modifier\n *      \"accel\".  \"accel\" is automatically turned into \"control\" on PCs\n *      (Windows and Linux), and \"meta\" (Java's term for \"command\") on\n *      Macs.  You should normally use the generic \"accel\" modifier.  You\n *      can also combine modifiers, like \"shift accel S\" (the standard\n *      keystroke for \"Save As...\").  The class javax.swing.KeyStroke\n *      takes these strings as input: you can say\n * <pre>\n *    KeyStroke.getKeyStroke(I18n.getKeyStroke(\"copy\"))\n * </pre>\n *      to get a Swing KeyStroke object.\n *\n *    </ul>\n *\n *    <p>This is convenient, but it gets even better: normally, you don't\n *    even have to mess with keystrokes and mnemonics.  You can simply\n *    use the Builder factory to do the dirty work for you:\n *\n * <pre>\n *    JMenuItem copy = Builder.makeMenuItem(\"copy\");\n * </pre>\n *\n *    Of course, if you just want the text (for making a printout, for\n *    example), you should still use I18n.getText().</p>\n *\n *    <p>Not all keys must have a keystroke, or a mnemonic.  Note that\n *    those methods can return nulls.</p>\n *\n *    <p>These methods get their values from the resource bundle called\n *    \"TextBundle\".  That is, the file is called\n *    \"TextBundle.properties\", or some variant, like\n *    \"TextBundle_de_DE.properties\".</p>\n *\n *    <h2>Left to do</h2>\n *    <ul>\n *      <li>The way getMnemonic() is set up, \"Save &as...\" will\n *          still show it as \"S&ave as...\".  Bad, but not fatal.\n *\n *      <li>Add way to escape [/]/&amp; in text; also, add markers so\n *          \"this text is mnemonic/text/keystroke\" and \"this text is\n * \t just a string\" are separate(?)\n *\n *      <li>in getKeyStroke(), why not use\n *          Toolkit.getDefaultToolkit().getMenuShortcutKeyMask() instead of\n * \t (?:) for command/control choice?\n *    </ul>\n *\n *    @see java.util.ResourceBundle\n *\n *    @author Ken Harris &lt;kbh7 <i style=\"color: gray\">at</i> cornell <i style=\"color: gray\">dot</i> edu&gt;\n *    @version $Id: I18n.java,v 1.4 2005/01/24 03:09:34 aaron Exp $\n */\npublic class I18n {\n\n    private I18n() {\n        // don't instantiate me\n    }\n\n    /**\n     *       Get the text for this key.  The text has no special control\n     *       characters in it, and can be presented to the user.\n     *\n     *       <p>For example, if the localization file has the line\n     *       <code>copy = &amp;Copy [accel C]</code>, the string \"Copy\" is\n     *       returned.</p>\n     *\n     *       @param key the key to look up in the localization file\n     *       @return the text\n     */\n    public static String getText(String key) {\n        String value = msg.getString(key);\n        StringBuffer buf = new StringBuffer();\n        int n = value.length();\n        boolean ignore = false;\n        for (int i = 0; i < n; i++) {\n            char c = value.charAt(i);\n            switch(c) {\n                case '&':\n                    continue;\n                case '[':\n                    ignore = true;\n                    break;\n                case ']':\n                    ignore = false;\n                    break;\n                default:\n                    if (!ignore)\n                        buf.append(c);\n            }\n        }\n        return buf.toString().trim();\n    }\n\n    /**\n     *       Get the keystroke string for this key.  This string can be\n     *       passed directly to the Keystroke.getKeyStroke() method.\n     *\n     *       <p>For example, if the localization file has the line\n     *       <code>copy = &amp;Copy [accel C]</code>, the string \"control C\"\n     *       is returned (or on the Mac, \"meta C\").</p>\n     *\n     *       <p>If the string has no [keystroke] listed, null is\n     *       returned.</p>\n     *\n     *       @param key the key to look up in the localization file\n     *       @return the keystroke string\n     */\n    public static String getKeyStroke(String key) {\n        String value = msg.getString(key);\n        int left = value.indexOf('[');\n        int right = value.indexOf(']');\n        if (left == -1 || right == -1)\n            return null;\n        String stroke = value.substring(left + 1, right).trim();\n        // accel = command (in java-ese: \"meta\") on mac, control on pc\n        String accel = (App.platform.isMac() ? \"meta\" : \"control\");\n        stroke = StringUtils.substitute(stroke, \"accel\", accel);\n        return stroke;\n    }\n\n    /**\n     *       Get the mnemonic character this key.\n     *\n     *       <p>For example, if the localization file has the line\n     *       <code>copy = &amp;Copy [accel C]</code>, the character \"C\" is\n     *       returned.</p>\n     *\n     *       <p>If the string has no &amp;mnemonic listed, null is\n     *       returned.</p>\n     *\n     *       @param key the key to look up in the localization file\n     *       @return the mnemonic character\n     */\n    public static Character getMnemonic(String key) {\n        String value = msg.getString(key);\n        int amp = value.indexOf('&');\n        if (amp == -1 || amp == value.length() - 1)\n            return null;\n        return new Character(Character.toUpperCase(value.charAt(amp + 1)));\n    }\n\n    // the resource bundle to use\n    private final static ResourceBundle msg;\n\n    static {\n        ResourceBundle bundle;\n        try {\n            bundle = ResourceBundle.getBundle(\"Translations/TextBundle\");\n        } catch (MissingResourceException mre) {\n            try {\n                bundle = ResourceBundle.getBundle(\"TextBundle\");\n            } catch (MissingResourceException mre2) {\n                mre2.printStackTrace();\n                bundle = new DefaultResourceBundle();\n            }\n        }\n        msg = bundle;\n    }\n}\n",
		"id": "/EvoSuiteBenchmark/35_corina/src/main/java/corina/ui/I18n_1Test.java",
		"test_prompt": "// I18n_1Test.java\n// This file is part of Corina.\n//\n// Corina is free software; you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation; either version 2 of the License, or\n// (at your option) any later version.\n//\n// Corina is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Corina; if not, write to the Free Software\n// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n//\n// Copyright 2003 Ken Harris <kbh7@cornell.edu>\n//\npackage corina.ui;\n\nimport java.util.MissingResourceException;\nimport java.util.ResourceBundle;\nimport corina.core.App;\nimport corina.util.StringUtils;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link I18n}.\n* It contains ten unit test cases for the {@link I18n#getKeyStroke(String)} method.\n*/\nclass I18n_1Test {"
	},
	{
		"original_code": "// I18n.java\n//\n// This file is part of Corina.\n//\n// Corina is free software; you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation; either version 2 of the License, or\n// (at your option) any later version.\n//\n// Corina is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Corina; if not, write to the Free Software\n// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n//\n// Copyright 2003 Ken Harris <kbh7@cornell.edu>\n//\npackage corina.ui;\n\nimport java.util.MissingResourceException;\nimport java.util.ResourceBundle;\nimport corina.core.App;\nimport corina.util.StringUtils;\n\n/**\n *    Provide localization strings.\n *\n *    <p>Java's ResourceBundles are intended to do this, but they don't\n *    provide the level of support that most other libraries do.</p>\n *\n *    <p>For example, suppose you have a \"Copy\" menuitem.\n * <pre>\n *    JMenuItem copy = new JMenuItem(\"Copy\");\n * </pre>\n *\n *    Of course, you should internationalize this.  But you want to\n *    change the text, the mnemonic, and the keyboard accelerator.  If\n *    you only had ResourceBundle to work with, you might end up with 3\n *    lines of translation for every word in your program.  Plus, you'd\n *    have to know the name of the I18n file you used, each time you\n *    wanted to use it.  Most other libraries (like Powerplant on Mac and\n *    Win95 resources) let you put them all in one line, which makes the\n *    translator's job much easier.  That's what this class does.</p>\n *\n *    <p>Now, all you have to say is:\n * <pre>\n *    copy = &amp;Copy [accel C]\n * </pre>\n *\n *    <p>There are several things going on here:</p>\n *\n *    <ul>\n *\n *      <li>\"copy\" is the <i>key</i>.  When you want to refer to this\n *      entry, you'll ask for it by this name.  The user never sees this.\n *\n *      <li>\"Copy\" (without the &amp;) is the <i>text</i> of this key.\n *      This is what users will see in menuitems, buttons, and so forth.\n *\n *      <li>\"C\" (the thing right after the &amp;) is the <i>mnemonic</i>.\n *      On most platforms (all except Mac), this letter is underlined,\n *      and users can jump to it by pressing this letter, or Alt and this\n *      letter (depending on platform and context).\n *\n *      <li>\"accel C\" is the <i>keystroke</i>.  The user can press this\n *      at any time to invoke this command.  You can use the modifiers\n *      \"shift\", \"control\", \"alt\", and \"meta\", or the special modifier\n *      \"accel\".  \"accel\" is automatically turned into \"control\" on PCs\n *      (Windows and Linux), and \"meta\" (Java's term for \"command\") on\n *      Macs.  You should normally use the generic \"accel\" modifier.  You\n *      can also combine modifiers, like \"shift accel S\" (the standard\n *      keystroke for \"Save As...\").  The class javax.swing.KeyStroke\n *      takes these strings as input: you can say\n * <pre>\n *    KeyStroke.getKeyStroke(I18n.getKeyStroke(\"copy\"))\n * </pre>\n *      to get a Swing KeyStroke object.\n *\n *    </ul>\n *\n *    <p>This is convenient, but it gets even better: normally, you don't\n *    even have to mess with keystrokes and mnemonics.  You can simply\n *    use the Builder factory to do the dirty work for you:\n *\n * <pre>\n *    JMenuItem copy = Builder.makeMenuItem(\"copy\");\n * </pre>\n *\n *    Of course, if you just want the text (for making a printout, for\n *    example), you should still use I18n.getText().</p>\n *\n *    <p>Not all keys must have a keystroke, or a mnemonic.  Note that\n *    those methods can return nulls.</p>\n *\n *    <p>These methods get their values from the resource bundle called\n *    \"TextBundle\".  That is, the file is called\n *    \"TextBundle.properties\", or some variant, like\n *    \"TextBundle_de_DE.properties\".</p>\n *\n *    <h2>Left to do</h2>\n *    <ul>\n *      <li>The way getMnemonic() is set up, \"Save &as...\" will\n *          still show it as \"S&ave as...\".  Bad, but not fatal.\n *\n *      <li>Add way to escape [/]/&amp; in text; also, add markers so\n *          \"this text is mnemonic/text/keystroke\" and \"this text is\n * \t just a string\" are separate(?)\n *\n *      <li>in getKeyStroke(), why not use\n *          Toolkit.getDefaultToolkit().getMenuShortcutKeyMask() instead of\n * \t (?:) for command/control choice?\n *    </ul>\n *\n *    @see java.util.ResourceBundle\n *\n *    @author Ken Harris &lt;kbh7 <i style=\"color: gray\">at</i> cornell <i style=\"color: gray\">dot</i> edu&gt;\n *    @version $Id: I18n.java,v 1.4 2005/01/24 03:09:34 aaron Exp $\n */\npublic class I18n {\n\n    private I18n() {\n        // don't instantiate me\n    }\n\n    /**\n     *       Get the text for this key.  The text has no special control\n     *       characters in it, and can be presented to the user.\n     *\n     *       <p>For example, if the localization file has the line\n     *       <code>copy = &amp;Copy [accel C]</code>, the string \"Copy\" is\n     *       returned.</p>\n     *\n     *       @param key the key to look up in the localization file\n     *       @return the text\n     */\n    public static String getText(String key) {\n        String value = msg.getString(key);\n        StringBuffer buf = new StringBuffer();\n        int n = value.length();\n        boolean ignore = false;\n        for (int i = 0; i < n; i++) {\n            char c = value.charAt(i);\n            switch(c) {\n                case '&':\n                    continue;\n                case '[':\n                    ignore = true;\n                    break;\n                case ']':\n                    ignore = false;\n                    break;\n                default:\n                    if (!ignore)\n                        buf.append(c);\n            }\n        }\n        return buf.toString().trim();\n    }\n\n    /**\n     *       Get the keystroke string for this key.  This string can be\n     *       passed directly to the Keystroke.getKeyStroke() method.\n     *\n     *       <p>For example, if the localization file has the line\n     *       <code>copy = &amp;Copy [accel C]</code>, the string \"control C\"\n     *       is returned (or on the Mac, \"meta C\").</p>\n     *\n     *       <p>If the string has no [keystroke] listed, null is\n     *       returned.</p>\n     *\n     *       @param key the key to look up in the localization file\n     *       @return the keystroke string\n     */\n    public static String getKeyStroke(String key) {\n        String value = msg.getString(key);\n        int left = value.indexOf('[');\n        int right = value.indexOf(']');\n        if (left == -1 || right == -1)\n            return null;\n        String stroke = value.substring(left + 1, right).trim();\n        // accel = command (in java-ese: \"meta\") on mac, control on pc\n        String accel = (App.platform.isMac() ? \"meta\" : \"control\");\n        stroke = StringUtils.substitute(stroke, \"accel\", accel);\n        return stroke;\n    }\n\n    /**\n     *       Get the mnemonic character this key.\n     *\n     *       <p>For example, if the localization file has the line\n     *       <code>copy = &amp;Copy [accel C]</code>, the character \"C\" is\n     *       returned.</p>\n     *\n     *       <p>If the string has no &amp;mnemonic listed, null is\n     *       returned.</p>\n     *\n     *       @param key the key to look up in the localization file\n     *       @return the mnemonic character\n     */\n    public static Character getMnemonic(String key) {\n        String value = msg.getString(key);\n        int amp = value.indexOf('&');\n        if (amp == -1 || amp == value.length() - 1)\n            return null;\n        return new Character(Character.toUpperCase(value.charAt(amp + 1)));\n    }\n\n    // the resource bundle to use\n    private final static ResourceBundle msg;\n\n    static {\n        ResourceBundle bundle;\n        try {\n            bundle = ResourceBundle.getBundle(\"Translations/TextBundle\");\n        } catch (MissingResourceException mre) {\n            try {\n                bundle = ResourceBundle.getBundle(\"TextBundle\");\n            } catch (MissingResourceException mre2) {\n                mre2.printStackTrace();\n                bundle = new DefaultResourceBundle();\n            }\n        }\n        msg = bundle;\n    }\n}\n",
		"id": "/EvoSuiteBenchmark/35_corina/src/main/java/corina/ui/I18n_2Test.java",
		"test_prompt": "// I18n_2Test.java\n// This file is part of Corina.\n//\n// Corina is free software; you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation; either version 2 of the License, or\n// (at your option) any later version.\n//\n// Corina is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Corina; if not, write to the Free Software\n// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n//\n// Copyright 2003 Ken Harris <kbh7@cornell.edu>\n//\npackage corina.ui;\n\nimport java.util.MissingResourceException;\nimport java.util.ResourceBundle;\nimport corina.core.App;\nimport corina.util.StringUtils;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link I18n}.\n* It contains ten unit test cases for the {@link I18n#getMnemonic(String)} method.\n*/\nclass I18n_2Test {"
	},
	{
		"original_code": "// Element.java\n//\n// This file is part of Corina.\n//\n// Corina is free software; you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation; either version 2 of the License, or\n// (at your option) any later version.\n//\n// Corina is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Corina; if not, write to the Free Software\n// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n//\n// Copyright 2001 Ken Harris <kbh7@cornell.edu>\n//\npackage corina;\n\nimport java.io.File;\nimport java.io.IOException;\nimport java.util.Map;\nimport corina.core.App;\nimport corina.formats.WrongFiletypeException;\n\n/**\n *   An Element, basically a reference to a Sample (stored on disk).\n *\n *   <p>Normally used as a member of a SampleSet (though at this time\n *   SampleSet is only an ArrayList that provides text load/save of its\n *   elements).</p>\n *\n *   <p>An Element holds:</p>\n *\n *   <ul>\n *     <li>An active flag\n *     <li>A filename\n *     <li>A summary of details (the metadata from a Sample)\n *     <li>The range (updated with summary details)\n *   </ul>\n *\n *   <p>The active flag, true by default, indicates whether this Element\n *   is to be used in a particular operation.  For example, Sum will\n *   ignore inactive Elements, so users can quickly and easily try\n *   removing Elements from a Sum to see how the result changes.</p>\n *\n *   <p>The filename is the unique name of this Sample.  It is expected\n *   that at this place in the filesystem, there will be a Sample that\n *   can be loaded by the Sample constructor Sample(String filename).\n *   There will be trouble (i.e., IOExceptions) if this is not the case.\n *   An Element's filename is immutable: once an Element has been\n *   created, it cannot be pointed at any other sample.</p>\n *\n *   <p>(Note: I have considered adding a new field, filetype, so\n *   non-auto-detectable filetypes can be loaded, but so far there has\n *   been no demand for this.)</p>\n *\n *   <p>An Element also holds space for a summary of its details.  By\n *   default, this is empty, until the loadMeta() method has been\n *   called.  After a loadMeta(), there will be a Map of details,\n *   namely, the metadata fields from the Sample's metadata Map.  The\n *   entire metadata map is usually 500 bytes or less, so all fields are\n *   loaded.  (At 500 bytes each, a huge chronology with 200 elements\n *   would take up 100K for all of the preview information -- usually\n *   masters are much smaller, so this is only a couple kilobytes.\n *   There's no reason to try to load only some of the fields.)\n *\n *   <p>OLD RAMBLINGS I DON'T WANT TO DELETE YET: there should be a way\n *   to load the Range - incorporate it into meta?.  If it could do\n *   this, then visual.Bargraph.Bar wouldn't be needed, and visual.*\n *   could be a lot cleaner, and then I could use a real MVC model for\n *   everything, and the whole GUI would be cleaner.  How about\n *   that.</p>\n *\n *   @author Ken Harris &lt;kbh7 <i style=\"color: gray\">at</i> cornell <i style=\"color: gray\">dot</i> edu&gt;\n *   @version $Id: Element.java,v 1.9 2006/07/11 20:17:23 lucasmo Exp $\n */\npublic class Element implements Comparable {\n\n    // these members should probably be PRIVATE!\n    public boolean active;\n\n    public Map details = null;\n\n    public long lastModified = -1;\n\n    private Range range = null;\n\n    // filename is the full path (ie, G:\\DATA\\ACM\\asdf.moo)\n    public final String filename;\n\n    // folder is the path under the data directory,\n    // using : as a path separator.\n    // If we're passed a filename beginning with a ?, treat it as a folder:basename pair\n    // can be null if element is not in our data directory tree!\n    public String folder = null;\n\n    // basename is the name of the file without any path information\n    public final String basename;\n\n    public Range getRange() {\n        // i really should USE this!\n        // lazy-load!\n        if (details == null)\n            try {\n                loadMeta();\n            } catch (WrongFiletypeException wfte) {\n                // System.out.println(\"wfte!\");\n                return null;\n                // ignore?\n            } catch (IOException ioe) {\n                System.out.println(\"on \" + filename + \", \" + ioe);\n                ioe.printStackTrace();\n                // !!!\n                return null;\n            }\n        return range;\n    }\n\n    // needed by Summary.  is this bad?  no, because when Element and Sample are\n    // merged, it'll be required.  get used to it.\n    public void setRange(Range r) {\n        this.range = r;\n    }\n\n    // not used here!  (but probably should be!)\n    public Exception error = null;\n\n    // public Element() { filename=null; } // HACK!  just for Summary.java\n    /**\n     * \t Construct an Element from a filename.  This Element will, by\n     * \t default, be active.\n     *\n     * \t @param filename the filename of the Sample to reference\n     */\n    public Element(String filename) {\n        this(filename, true);\n    }\n\n    /**\n     * \t Construct an Element from a filename, and a preset Active flag.\n     *\n     * \t @param filename the filename of the Sample to reference\n     * \t @param active true if this Element is to be active\n     */\n    public Element(String filename, boolean active) {\n        this.active = active;\n        // if it starts with a ?, this is a relative path, using :'s as separators\n        // ie, ?FOREST:ACM:moo123.pik\n        if (filename.startsWith(\"?\")) {\n            String fn = filename.substring(1);\n            int pos = fn.lastIndexOf(':');\n            if (pos >= 0) {\n                this.folder = fn.substring(0, pos);\n                this.basename = fn.substring(pos + 1, fn.length());\n                this.filename = App.prefs.getPref(\"corina.dir.data\") + File.separator + this.folder.replace(\":\", File.separator) + File.separator + this.basename;\n            } else {\n                this.filename = filename;\n                this.basename = new File(filename).getName();\n            }\n        } else // otherwise, we got passed a whole file name. try and parse it up.\n        {\n            String fn = filename;\n            // if, for some reason, adaptive reading is turned off...\n            // don't bother to parse it!\n            if (Boolean.valueOf(App.prefs.getPref(\"corina.dir.adaptiveread\")).booleanValue() == false) {\n                this.filename = filename;\n                this.basename = new File(filename).getName();\n                return;\n            }\n            // chop off any sort of beginning cruft\n            if (fn.startsWith(\"G:\\\\DATA\\\\\")) {\n                fn = fn.substring(8);\n            } else if (filename.startsWith(App.prefs.getPref(\"corina.dir.data\") + File.separator)) {\n                fn = fn.substring(App.prefs.getPref(\"corina.dir.data\").length() + File.separator.length());\n            } else {\n                // we can't convert this into a special path.\n                // leave folder null and bail.\n                this.filename = filename;\n                this.basename = new File(filename).getName();\n                return;\n            }\n            // replace forward slashes with a :, which will be our path separator.\n            fn = fn.replace(\"\\\\\", \":\");\n            // do the same for some other platform\n            fn = fn.replace(File.separator, \":\");\n            int pos = fn.lastIndexOf(':');\n            if (pos >= 0) {\n                this.folder = fn.substring(0, pos);\n                this.basename = fn.substring(pos + 1, fn.length());\n                this.filename = App.prefs.getPref(\"corina.dir.data\") + File.separator + this.folder.replace(\":\", File.separator) + File.separator + this.basename;\n            } else {\n                this.filename = filename;\n                this.basename = new File(filename).getName();\n            }\n        }\n    }\n\n    /**\n     * \t Return the state of the Element's active flag.\n     *\n     * \t @return true if this Element is active\n     */\n    public boolean isActive() {\n        return active;\n    }\n\n    /**\n     * \t Return the Element's filename.\n     *\n     * \t @return the filename this Element refers to\n     */\n    public String getFilename() {\n        return filename;\n    }\n\n    /**\n     * \t Return the Element's basename.\n     *\n     * \t @return the basename of the file this Element refers to\n     */\n    public String getBasename() {\n        return basename;\n    }\n\n    /**\n     * \t Return the Element's folder path.\n     *\n     * \t @return the folder path of the file this Element refers to\n     */\n    public String getFolder() {\n        return folder;\n    }\n\n    /**\n     * \t Return this Element's filename, with\n     * \t <code>corina.dir.data</code> replaced by an \"?\", if it's in a\n     * \t subfolder of that.  (Otherwise, returns the absolute filename.)\n     *\n     * \t @return the filename, with ?'s\n     */\n    public String getRelativeFilename() {\n        // no basename or folder? return relative path...\n        if (basename == null || folder == null)\n            return filename;\n        return \"?\" + folder + \":\" + basename;\n    }\n\n    /**\n     * \t Load this Element.  Returns this Element in a Sample object.\n     *\n     * \t @return the Sample referenced by this Element\n     * \t @exception IOException if an IOException occurred while trying\n     * \t to load it; this can also be the subclasses\n     * \t FileNotFoundException\n     */\n    public Sample load() throws IOException {\n        // save metadata before i go?\n        return new Sample(filename);\n    }\n\n    // dead samples should be dimmed or something\n    private boolean dead = false;\n\n    public void reloadMeta() throws IOException {\n        details = null;\n        loadMeta();\n    }\n\n    /**\n     * \t Load the metadata fields for this Element.\n     *\n     * \t @exception IOException if the Element could not be loaded\n     */\n    public void loadMeta() throws IOException {\n        if (dead)\n            // new IOException(\"dead\");\n            throw (IOException) error;\n        // this only gets set here, so meta must have been loaded already\n        if (details != null) {\n            return;\n        }\n        // load sample, and grab reference to fields (data gets GC'd)\n        try {\n            Sample s = load();\n            details = s.meta;\n            range = s.range;\n            lastModified = new File(filename).lastModified();\n        } catch (IOException ioe) {\n            dead = true;\n            error = ioe;\n            throw ioe;\n        }\n    }\n\n    /**\n     * \t Return the filename, so Element can be used in making Strings\n     * \t without worrying about getFilename() calls.\n     *\n     * \t @return the filename\n     */\n    public String toString() {\n        return filename;\n    }\n\n    // comparable\n    public int compareTo(Object o) {\n        return filename.compareTo(((Element) o).filename);\n    }\n\n    // these used to be in Bargraph.java, but LoD pushes them up here.\n    // they should probably be in a Metadata class, shared by Element and Sample\n    // (or unified sample-element model).\n    public boolean hasBark() {\n        String term = (String) details.get(\"terminal\");\n        return (term != null && term.equalsIgnoreCase(\"B\"));\n    }\n\n    public boolean hasPith() {\n        String pith = (String) details.get(\"pith\");\n        return (pith != null && pith.equalsIgnoreCase(\"Y\"));\n    }\n\n    public int numSapwood() {\n        Integer sapwood = (Integer) details.get(\"sapwood\");\n        return (sapwood == null ? 0 : sapwood.intValue());\n    }\n\n    //\n    // NEW: lazy-load interface\n    //\n    public Object getMeta(String field) {\n        if (details == null)\n            try {\n                loadMeta();\n            } catch (WrongFiletypeException wfte) {\n                // System.out.println(\"wfte!\");\n                return null;\n                // ignore?\n            } catch (IOException ioe) {\n                System.out.println(\"on \" + filename + \", \" + ioe);\n                ioe.printStackTrace();\n                // !!!\n                return null;\n            }\n        return details.get(field);\n    }\n\n    // does this object represent a real sample?\n    public boolean isSample() {\n        // if we've already loaded it, it's a sample.\n        if (details != null)\n            return true;\n        // otherwise, try to load it.\n        try {\n            loadMeta();\n            return true;\n        } catch (IOException ioe) {\n            return false;\n        }\n    }\n}\n",
		"id": "/EvoSuiteBenchmark/35_corina/src/main/java/corina/Element_0Test.java",
		"test_prompt": "// Element_0Test.java\n// This file is part of Corina.\n//\n// Corina is free software; you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation; either version 2 of the License, or\n// (at your option) any later version.\n//\n// Corina is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Corina; if not, write to the Free Software\n// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n//\n// Copyright 2001 Ken Harris <kbh7@cornell.edu>\n//\npackage corina;\n\nimport java.io.File;\nimport java.io.IOException;\nimport java.util.Map;\nimport corina.core.App;\nimport corina.formats.WrongFiletypeException;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link Element}.\n* It contains ten unit test cases for the {@link Element#isActive()} method.\n*/\nclass Element_0Test {"
	},
	{
		"original_code": "// Element.java\n//\n// This file is part of Corina.\n//\n// Corina is free software; you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation; either version 2 of the License, or\n// (at your option) any later version.\n//\n// Corina is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Corina; if not, write to the Free Software\n// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n//\n// Copyright 2001 Ken Harris <kbh7@cornell.edu>\n//\npackage corina;\n\nimport java.io.File;\nimport java.io.IOException;\nimport java.util.Map;\nimport corina.core.App;\nimport corina.formats.WrongFiletypeException;\n\n/**\n *   An Element, basically a reference to a Sample (stored on disk).\n *\n *   <p>Normally used as a member of a SampleSet (though at this time\n *   SampleSet is only an ArrayList that provides text load/save of its\n *   elements).</p>\n *\n *   <p>An Element holds:</p>\n *\n *   <ul>\n *     <li>An active flag\n *     <li>A filename\n *     <li>A summary of details (the metadata from a Sample)\n *     <li>The range (updated with summary details)\n *   </ul>\n *\n *   <p>The active flag, true by default, indicates whether this Element\n *   is to be used in a particular operation.  For example, Sum will\n *   ignore inactive Elements, so users can quickly and easily try\n *   removing Elements from a Sum to see how the result changes.</p>\n *\n *   <p>The filename is the unique name of this Sample.  It is expected\n *   that at this place in the filesystem, there will be a Sample that\n *   can be loaded by the Sample constructor Sample(String filename).\n *   There will be trouble (i.e., IOExceptions) if this is not the case.\n *   An Element's filename is immutable: once an Element has been\n *   created, it cannot be pointed at any other sample.</p>\n *\n *   <p>(Note: I have considered adding a new field, filetype, so\n *   non-auto-detectable filetypes can be loaded, but so far there has\n *   been no demand for this.)</p>\n *\n *   <p>An Element also holds space for a summary of its details.  By\n *   default, this is empty, until the loadMeta() method has been\n *   called.  After a loadMeta(), there will be a Map of details,\n *   namely, the metadata fields from the Sample's metadata Map.  The\n *   entire metadata map is usually 500 bytes or less, so all fields are\n *   loaded.  (At 500 bytes each, a huge chronology with 200 elements\n *   would take up 100K for all of the preview information -- usually\n *   masters are much smaller, so this is only a couple kilobytes.\n *   There's no reason to try to load only some of the fields.)\n *\n *   <p>OLD RAMBLINGS I DON'T WANT TO DELETE YET: there should be a way\n *   to load the Range - incorporate it into meta?.  If it could do\n *   this, then visual.Bargraph.Bar wouldn't be needed, and visual.*\n *   could be a lot cleaner, and then I could use a real MVC model for\n *   everything, and the whole GUI would be cleaner.  How about\n *   that.</p>\n *\n *   @author Ken Harris &lt;kbh7 <i style=\"color: gray\">at</i> cornell <i style=\"color: gray\">dot</i> edu&gt;\n *   @version $Id: Element.java,v 1.9 2006/07/11 20:17:23 lucasmo Exp $\n */\npublic class Element implements Comparable {\n\n    // these members should probably be PRIVATE!\n    public boolean active;\n\n    public Map details = null;\n\n    public long lastModified = -1;\n\n    private Range range = null;\n\n    // filename is the full path (ie, G:\\DATA\\ACM\\asdf.moo)\n    public final String filename;\n\n    // folder is the path under the data directory,\n    // using : as a path separator.\n    // If we're passed a filename beginning with a ?, treat it as a folder:basename pair\n    // can be null if element is not in our data directory tree!\n    public String folder = null;\n\n    // basename is the name of the file without any path information\n    public final String basename;\n\n    public Range getRange() {\n        // i really should USE this!\n        // lazy-load!\n        if (details == null)\n            try {\n                loadMeta();\n            } catch (WrongFiletypeException wfte) {\n                // System.out.println(\"wfte!\");\n                return null;\n                // ignore?\n            } catch (IOException ioe) {\n                System.out.println(\"on \" + filename + \", \" + ioe);\n                ioe.printStackTrace();\n                // !!!\n                return null;\n            }\n        return range;\n    }\n\n    // needed by Summary.  is this bad?  no, because when Element and Sample are\n    // merged, it'll be required.  get used to it.\n    public void setRange(Range r) {\n        this.range = r;\n    }\n\n    // not used here!  (but probably should be!)\n    public Exception error = null;\n\n    // public Element() { filename=null; } // HACK!  just for Summary.java\n    /**\n     * \t Construct an Element from a filename.  This Element will, by\n     * \t default, be active.\n     *\n     * \t @param filename the filename of the Sample to reference\n     */\n    public Element(String filename) {\n        this(filename, true);\n    }\n\n    /**\n     * \t Construct an Element from a filename, and a preset Active flag.\n     *\n     * \t @param filename the filename of the Sample to reference\n     * \t @param active true if this Element is to be active\n     */\n    public Element(String filename, boolean active) {\n        this.active = active;\n        // if it starts with a ?, this is a relative path, using :'s as separators\n        // ie, ?FOREST:ACM:moo123.pik\n        if (filename.startsWith(\"?\")) {\n            String fn = filename.substring(1);\n            int pos = fn.lastIndexOf(':');\n            if (pos >= 0) {\n                this.folder = fn.substring(0, pos);\n                this.basename = fn.substring(pos + 1, fn.length());\n                this.filename = App.prefs.getPref(\"corina.dir.data\") + File.separator + this.folder.replace(\":\", File.separator) + File.separator + this.basename;\n            } else {\n                this.filename = filename;\n                this.basename = new File(filename).getName();\n            }\n        } else // otherwise, we got passed a whole file name. try and parse it up.\n        {\n            String fn = filename;\n            // if, for some reason, adaptive reading is turned off...\n            // don't bother to parse it!\n            if (Boolean.valueOf(App.prefs.getPref(\"corina.dir.adaptiveread\")).booleanValue() == false) {\n                this.filename = filename;\n                this.basename = new File(filename).getName();\n                return;\n            }\n            // chop off any sort of beginning cruft\n            if (fn.startsWith(\"G:\\\\DATA\\\\\")) {\n                fn = fn.substring(8);\n            } else if (filename.startsWith(App.prefs.getPref(\"corina.dir.data\") + File.separator)) {\n                fn = fn.substring(App.prefs.getPref(\"corina.dir.data\").length() + File.separator.length());\n            } else {\n                // we can't convert this into a special path.\n                // leave folder null and bail.\n                this.filename = filename;\n                this.basename = new File(filename).getName();\n                return;\n            }\n            // replace forward slashes with a :, which will be our path separator.\n            fn = fn.replace(\"\\\\\", \":\");\n            // do the same for some other platform\n            fn = fn.replace(File.separator, \":\");\n            int pos = fn.lastIndexOf(':');\n            if (pos >= 0) {\n                this.folder = fn.substring(0, pos);\n                this.basename = fn.substring(pos + 1, fn.length());\n                this.filename = App.prefs.getPref(\"corina.dir.data\") + File.separator + this.folder.replace(\":\", File.separator) + File.separator + this.basename;\n            } else {\n                this.filename = filename;\n                this.basename = new File(filename).getName();\n            }\n        }\n    }\n\n    /**\n     * \t Return the state of the Element's active flag.\n     *\n     * \t @return true if this Element is active\n     */\n    public boolean isActive() {\n        return active;\n    }\n\n    /**\n     * \t Return the Element's filename.\n     *\n     * \t @return the filename this Element refers to\n     */\n    public String getFilename() {\n        return filename;\n    }\n\n    /**\n     * \t Return the Element's basename.\n     *\n     * \t @return the basename of the file this Element refers to\n     */\n    public String getBasename() {\n        return basename;\n    }\n\n    /**\n     * \t Return the Element's folder path.\n     *\n     * \t @return the folder path of the file this Element refers to\n     */\n    public String getFolder() {\n        return folder;\n    }\n\n    /**\n     * \t Return this Element's filename, with\n     * \t <code>corina.dir.data</code> replaced by an \"?\", if it's in a\n     * \t subfolder of that.  (Otherwise, returns the absolute filename.)\n     *\n     * \t @return the filename, with ?'s\n     */\n    public String getRelativeFilename() {\n        // no basename or folder? return relative path...\n        if (basename == null || folder == null)\n            return filename;\n        return \"?\" + folder + \":\" + basename;\n    }\n\n    /**\n     * \t Load this Element.  Returns this Element in a Sample object.\n     *\n     * \t @return the Sample referenced by this Element\n     * \t @exception IOException if an IOException occurred while trying\n     * \t to load it; this can also be the subclasses\n     * \t FileNotFoundException\n     */\n    public Sample load() throws IOException {\n        // save metadata before i go?\n        return new Sample(filename);\n    }\n\n    // dead samples should be dimmed or something\n    private boolean dead = false;\n\n    public void reloadMeta() throws IOException {\n        details = null;\n        loadMeta();\n    }\n\n    /**\n     * \t Load the metadata fields for this Element.\n     *\n     * \t @exception IOException if the Element could not be loaded\n     */\n    public void loadMeta() throws IOException {\n        if (dead)\n            // new IOException(\"dead\");\n            throw (IOException) error;\n        // this only gets set here, so meta must have been loaded already\n        if (details != null) {\n            return;\n        }\n        // load sample, and grab reference to fields (data gets GC'd)\n        try {\n            Sample s = load();\n            details = s.meta;\n            range = s.range;\n            lastModified = new File(filename).lastModified();\n        } catch (IOException ioe) {\n            dead = true;\n            error = ioe;\n            throw ioe;\n        }\n    }\n\n    /**\n     * \t Return the filename, so Element can be used in making Strings\n     * \t without worrying about getFilename() calls.\n     *\n     * \t @return the filename\n     */\n    public String toString() {\n        return filename;\n    }\n\n    // comparable\n    public int compareTo(Object o) {\n        return filename.compareTo(((Element) o).filename);\n    }\n\n    // these used to be in Bargraph.java, but LoD pushes them up here.\n    // they should probably be in a Metadata class, shared by Element and Sample\n    // (or unified sample-element model).\n    public boolean hasBark() {\n        String term = (String) details.get(\"terminal\");\n        return (term != null && term.equalsIgnoreCase(\"B\"));\n    }\n\n    public boolean hasPith() {\n        String pith = (String) details.get(\"pith\");\n        return (pith != null && pith.equalsIgnoreCase(\"Y\"));\n    }\n\n    public int numSapwood() {\n        Integer sapwood = (Integer) details.get(\"sapwood\");\n        return (sapwood == null ? 0 : sapwood.intValue());\n    }\n\n    //\n    // NEW: lazy-load interface\n    //\n    public Object getMeta(String field) {\n        if (details == null)\n            try {\n                loadMeta();\n            } catch (WrongFiletypeException wfte) {\n                // System.out.println(\"wfte!\");\n                return null;\n                // ignore?\n            } catch (IOException ioe) {\n                System.out.println(\"on \" + filename + \", \" + ioe);\n                ioe.printStackTrace();\n                // !!!\n                return null;\n            }\n        return details.get(field);\n    }\n\n    // does this object represent a real sample?\n    public boolean isSample() {\n        // if we've already loaded it, it's a sample.\n        if (details != null)\n            return true;\n        // otherwise, try to load it.\n        try {\n            loadMeta();\n            return true;\n        } catch (IOException ioe) {\n            return false;\n        }\n    }\n}\n",
		"id": "/EvoSuiteBenchmark/35_corina/src/main/java/corina/Element_1Test.java",
		"test_prompt": "// Element_1Test.java\n// This file is part of Corina.\n//\n// Corina is free software; you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation; either version 2 of the License, or\n// (at your option) any later version.\n//\n// Corina is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Corina; if not, write to the Free Software\n// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n//\n// Copyright 2001 Ken Harris <kbh7@cornell.edu>\n//\npackage corina;\n\nimport java.io.File;\nimport java.io.IOException;\nimport java.util.Map;\nimport corina.core.App;\nimport corina.formats.WrongFiletypeException;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link Element}.\n* It contains ten unit test cases for the {@link Element#load()} method.\n*/\nclass Element_1Test {"
	},
	{
		"original_code": "// Element.java\n//\n// This file is part of Corina.\n//\n// Corina is free software; you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation; either version 2 of the License, or\n// (at your option) any later version.\n//\n// Corina is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Corina; if not, write to the Free Software\n// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n//\n// Copyright 2001 Ken Harris <kbh7@cornell.edu>\n//\npackage corina;\n\nimport java.io.File;\nimport java.io.IOException;\nimport java.util.Map;\nimport corina.core.App;\nimport corina.formats.WrongFiletypeException;\n\n/**\n *   An Element, basically a reference to a Sample (stored on disk).\n *\n *   <p>Normally used as a member of a SampleSet (though at this time\n *   SampleSet is only an ArrayList that provides text load/save of its\n *   elements).</p>\n *\n *   <p>An Element holds:</p>\n *\n *   <ul>\n *     <li>An active flag\n *     <li>A filename\n *     <li>A summary of details (the metadata from a Sample)\n *     <li>The range (updated with summary details)\n *   </ul>\n *\n *   <p>The active flag, true by default, indicates whether this Element\n *   is to be used in a particular operation.  For example, Sum will\n *   ignore inactive Elements, so users can quickly and easily try\n *   removing Elements from a Sum to see how the result changes.</p>\n *\n *   <p>The filename is the unique name of this Sample.  It is expected\n *   that at this place in the filesystem, there will be a Sample that\n *   can be loaded by the Sample constructor Sample(String filename).\n *   There will be trouble (i.e., IOExceptions) if this is not the case.\n *   An Element's filename is immutable: once an Element has been\n *   created, it cannot be pointed at any other sample.</p>\n *\n *   <p>(Note: I have considered adding a new field, filetype, so\n *   non-auto-detectable filetypes can be loaded, but so far there has\n *   been no demand for this.)</p>\n *\n *   <p>An Element also holds space for a summary of its details.  By\n *   default, this is empty, until the loadMeta() method has been\n *   called.  After a loadMeta(), there will be a Map of details,\n *   namely, the metadata fields from the Sample's metadata Map.  The\n *   entire metadata map is usually 500 bytes or less, so all fields are\n *   loaded.  (At 500 bytes each, a huge chronology with 200 elements\n *   would take up 100K for all of the preview information -- usually\n *   masters are much smaller, so this is only a couple kilobytes.\n *   There's no reason to try to load only some of the fields.)\n *\n *   <p>OLD RAMBLINGS I DON'T WANT TO DELETE YET: there should be a way\n *   to load the Range - incorporate it into meta?.  If it could do\n *   this, then visual.Bargraph.Bar wouldn't be needed, and visual.*\n *   could be a lot cleaner, and then I could use a real MVC model for\n *   everything, and the whole GUI would be cleaner.  How about\n *   that.</p>\n *\n *   @author Ken Harris &lt;kbh7 <i style=\"color: gray\">at</i> cornell <i style=\"color: gray\">dot</i> edu&gt;\n *   @version $Id: Element.java,v 1.9 2006/07/11 20:17:23 lucasmo Exp $\n */\npublic class Element implements Comparable {\n\n    // these members should probably be PRIVATE!\n    public boolean active;\n\n    public Map details = null;\n\n    public long lastModified = -1;\n\n    private Range range = null;\n\n    // filename is the full path (ie, G:\\DATA\\ACM\\asdf.moo)\n    public final String filename;\n\n    // folder is the path under the data directory,\n    // using : as a path separator.\n    // If we're passed a filename beginning with a ?, treat it as a folder:basename pair\n    // can be null if element is not in our data directory tree!\n    public String folder = null;\n\n    // basename is the name of the file without any path information\n    public final String basename;\n\n    public Range getRange() {\n        // i really should USE this!\n        // lazy-load!\n        if (details == null)\n            try {\n                loadMeta();\n            } catch (WrongFiletypeException wfte) {\n                // System.out.println(\"wfte!\");\n                return null;\n                // ignore?\n            } catch (IOException ioe) {\n                System.out.println(\"on \" + filename + \", \" + ioe);\n                ioe.printStackTrace();\n                // !!!\n                return null;\n            }\n        return range;\n    }\n\n    // needed by Summary.  is this bad?  no, because when Element and Sample are\n    // merged, it'll be required.  get used to it.\n    public void setRange(Range r) {\n        this.range = r;\n    }\n\n    // not used here!  (but probably should be!)\n    public Exception error = null;\n\n    // public Element() { filename=null; } // HACK!  just for Summary.java\n    /**\n     * \t Construct an Element from a filename.  This Element will, by\n     * \t default, be active.\n     *\n     * \t @param filename the filename of the Sample to reference\n     */\n    public Element(String filename) {\n        this(filename, true);\n    }\n\n    /**\n     * \t Construct an Element from a filename, and a preset Active flag.\n     *\n     * \t @param filename the filename of the Sample to reference\n     * \t @param active true if this Element is to be active\n     */\n    public Element(String filename, boolean active) {\n        this.active = active;\n        // if it starts with a ?, this is a relative path, using :'s as separators\n        // ie, ?FOREST:ACM:moo123.pik\n        if (filename.startsWith(\"?\")) {\n            String fn = filename.substring(1);\n            int pos = fn.lastIndexOf(':');\n            if (pos >= 0) {\n                this.folder = fn.substring(0, pos);\n                this.basename = fn.substring(pos + 1, fn.length());\n                this.filename = App.prefs.getPref(\"corina.dir.data\") + File.separator + this.folder.replace(\":\", File.separator) + File.separator + this.basename;\n            } else {\n                this.filename = filename;\n                this.basename = new File(filename).getName();\n            }\n        } else // otherwise, we got passed a whole file name. try and parse it up.\n        {\n            String fn = filename;\n            // if, for some reason, adaptive reading is turned off...\n            // don't bother to parse it!\n            if (Boolean.valueOf(App.prefs.getPref(\"corina.dir.adaptiveread\")).booleanValue() == false) {\n                this.filename = filename;\n                this.basename = new File(filename).getName();\n                return;\n            }\n            // chop off any sort of beginning cruft\n            if (fn.startsWith(\"G:\\\\DATA\\\\\")) {\n                fn = fn.substring(8);\n            } else if (filename.startsWith(App.prefs.getPref(\"corina.dir.data\") + File.separator)) {\n                fn = fn.substring(App.prefs.getPref(\"corina.dir.data\").length() + File.separator.length());\n            } else {\n                // we can't convert this into a special path.\n                // leave folder null and bail.\n                this.filename = filename;\n                this.basename = new File(filename).getName();\n                return;\n            }\n            // replace forward slashes with a :, which will be our path separator.\n            fn = fn.replace(\"\\\\\", \":\");\n            // do the same for some other platform\n            fn = fn.replace(File.separator, \":\");\n            int pos = fn.lastIndexOf(':');\n            if (pos >= 0) {\n                this.folder = fn.substring(0, pos);\n                this.basename = fn.substring(pos + 1, fn.length());\n                this.filename = App.prefs.getPref(\"corina.dir.data\") + File.separator + this.folder.replace(\":\", File.separator) + File.separator + this.basename;\n            } else {\n                this.filename = filename;\n                this.basename = new File(filename).getName();\n            }\n        }\n    }\n\n    /**\n     * \t Return the state of the Element's active flag.\n     *\n     * \t @return true if this Element is active\n     */\n    public boolean isActive() {\n        return active;\n    }\n\n    /**\n     * \t Return the Element's filename.\n     *\n     * \t @return the filename this Element refers to\n     */\n    public String getFilename() {\n        return filename;\n    }\n\n    /**\n     * \t Return the Element's basename.\n     *\n     * \t @return the basename of the file this Element refers to\n     */\n    public String getBasename() {\n        return basename;\n    }\n\n    /**\n     * \t Return the Element's folder path.\n     *\n     * \t @return the folder path of the file this Element refers to\n     */\n    public String getFolder() {\n        return folder;\n    }\n\n    /**\n     * \t Return this Element's filename, with\n     * \t <code>corina.dir.data</code> replaced by an \"?\", if it's in a\n     * \t subfolder of that.  (Otherwise, returns the absolute filename.)\n     *\n     * \t @return the filename, with ?'s\n     */\n    public String getRelativeFilename() {\n        // no basename or folder? return relative path...\n        if (basename == null || folder == null)\n            return filename;\n        return \"?\" + folder + \":\" + basename;\n    }\n\n    /**\n     * \t Load this Element.  Returns this Element in a Sample object.\n     *\n     * \t @return the Sample referenced by this Element\n     * \t @exception IOException if an IOException occurred while trying\n     * \t to load it; this can also be the subclasses\n     * \t FileNotFoundException\n     */\n    public Sample load() throws IOException {\n        // save metadata before i go?\n        return new Sample(filename);\n    }\n\n    // dead samples should be dimmed or something\n    private boolean dead = false;\n\n    public void reloadMeta() throws IOException {\n        details = null;\n        loadMeta();\n    }\n\n    /**\n     * \t Load the metadata fields for this Element.\n     *\n     * \t @exception IOException if the Element could not be loaded\n     */\n    public void loadMeta() throws IOException {\n        if (dead)\n            // new IOException(\"dead\");\n            throw (IOException) error;\n        // this only gets set here, so meta must have been loaded already\n        if (details != null) {\n            return;\n        }\n        // load sample, and grab reference to fields (data gets GC'd)\n        try {\n            Sample s = load();\n            details = s.meta;\n            range = s.range;\n            lastModified = new File(filename).lastModified();\n        } catch (IOException ioe) {\n            dead = true;\n            error = ioe;\n            throw ioe;\n        }\n    }\n\n    /**\n     * \t Return the filename, so Element can be used in making Strings\n     * \t without worrying about getFilename() calls.\n     *\n     * \t @return the filename\n     */\n    public String toString() {\n        return filename;\n    }\n\n    // comparable\n    public int compareTo(Object o) {\n        return filename.compareTo(((Element) o).filename);\n    }\n\n    // these used to be in Bargraph.java, but LoD pushes them up here.\n    // they should probably be in a Metadata class, shared by Element and Sample\n    // (or unified sample-element model).\n    public boolean hasBark() {\n        String term = (String) details.get(\"terminal\");\n        return (term != null && term.equalsIgnoreCase(\"B\"));\n    }\n\n    public boolean hasPith() {\n        String pith = (String) details.get(\"pith\");\n        return (pith != null && pith.equalsIgnoreCase(\"Y\"));\n    }\n\n    public int numSapwood() {\n        Integer sapwood = (Integer) details.get(\"sapwood\");\n        return (sapwood == null ? 0 : sapwood.intValue());\n    }\n\n    //\n    // NEW: lazy-load interface\n    //\n    public Object getMeta(String field) {\n        if (details == null)\n            try {\n                loadMeta();\n            } catch (WrongFiletypeException wfte) {\n                // System.out.println(\"wfte!\");\n                return null;\n                // ignore?\n            } catch (IOException ioe) {\n                System.out.println(\"on \" + filename + \", \" + ioe);\n                ioe.printStackTrace();\n                // !!!\n                return null;\n            }\n        return details.get(field);\n    }\n\n    // does this object represent a real sample?\n    public boolean isSample() {\n        // if we've already loaded it, it's a sample.\n        if (details != null)\n            return true;\n        // otherwise, try to load it.\n        try {\n            loadMeta();\n            return true;\n        } catch (IOException ioe) {\n            return false;\n        }\n    }\n}\n",
		"id": "/EvoSuiteBenchmark/35_corina/src/main/java/corina/Element_2Test.java",
		"test_prompt": "// Element_2Test.java\n// This file is part of Corina.\n//\n// Corina is free software; you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation; either version 2 of the License, or\n// (at your option) any later version.\n//\n// Corina is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Corina; if not, write to the Free Software\n// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n//\n// Copyright 2001 Ken Harris <kbh7@cornell.edu>\n//\npackage corina;\n\nimport java.io.File;\nimport java.io.IOException;\nimport java.util.Map;\nimport corina.core.App;\nimport corina.formats.WrongFiletypeException;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link Element}.\n* It contains ten unit test cases for the {@link Element#compareTo(Object)} method.\n*/\nclass Element_2Test {"
	},
	{
		"original_code": "// Element.java\n//\n// This file is part of Corina.\n//\n// Corina is free software; you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation; either version 2 of the License, or\n// (at your option) any later version.\n//\n// Corina is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Corina; if not, write to the Free Software\n// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n//\n// Copyright 2001 Ken Harris <kbh7@cornell.edu>\n//\npackage corina;\n\nimport java.io.File;\nimport java.io.IOException;\nimport java.util.Map;\nimport corina.core.App;\nimport corina.formats.WrongFiletypeException;\n\n/**\n *   An Element, basically a reference to a Sample (stored on disk).\n *\n *   <p>Normally used as a member of a SampleSet (though at this time\n *   SampleSet is only an ArrayList that provides text load/save of its\n *   elements).</p>\n *\n *   <p>An Element holds:</p>\n *\n *   <ul>\n *     <li>An active flag\n *     <li>A filename\n *     <li>A summary of details (the metadata from a Sample)\n *     <li>The range (updated with summary details)\n *   </ul>\n *\n *   <p>The active flag, true by default, indicates whether this Element\n *   is to be used in a particular operation.  For example, Sum will\n *   ignore inactive Elements, so users can quickly and easily try\n *   removing Elements from a Sum to see how the result changes.</p>\n *\n *   <p>The filename is the unique name of this Sample.  It is expected\n *   that at this place in the filesystem, there will be a Sample that\n *   can be loaded by the Sample constructor Sample(String filename).\n *   There will be trouble (i.e., IOExceptions) if this is not the case.\n *   An Element's filename is immutable: once an Element has been\n *   created, it cannot be pointed at any other sample.</p>\n *\n *   <p>(Note: I have considered adding a new field, filetype, so\n *   non-auto-detectable filetypes can be loaded, but so far there has\n *   been no demand for this.)</p>\n *\n *   <p>An Element also holds space for a summary of its details.  By\n *   default, this is empty, until the loadMeta() method has been\n *   called.  After a loadMeta(), there will be a Map of details,\n *   namely, the metadata fields from the Sample's metadata Map.  The\n *   entire metadata map is usually 500 bytes or less, so all fields are\n *   loaded.  (At 500 bytes each, a huge chronology with 200 elements\n *   would take up 100K for all of the preview information -- usually\n *   masters are much smaller, so this is only a couple kilobytes.\n *   There's no reason to try to load only some of the fields.)\n *\n *   <p>OLD RAMBLINGS I DON'T WANT TO DELETE YET: there should be a way\n *   to load the Range - incorporate it into meta?.  If it could do\n *   this, then visual.Bargraph.Bar wouldn't be needed, and visual.*\n *   could be a lot cleaner, and then I could use a real MVC model for\n *   everything, and the whole GUI would be cleaner.  How about\n *   that.</p>\n *\n *   @author Ken Harris &lt;kbh7 <i style=\"color: gray\">at</i> cornell <i style=\"color: gray\">dot</i> edu&gt;\n *   @version $Id: Element.java,v 1.9 2006/07/11 20:17:23 lucasmo Exp $\n */\npublic class Element implements Comparable {\n\n    // these members should probably be PRIVATE!\n    public boolean active;\n\n    public Map details = null;\n\n    public long lastModified = -1;\n\n    private Range range = null;\n\n    // filename is the full path (ie, G:\\DATA\\ACM\\asdf.moo)\n    public final String filename;\n\n    // folder is the path under the data directory,\n    // using : as a path separator.\n    // If we're passed a filename beginning with a ?, treat it as a folder:basename pair\n    // can be null if element is not in our data directory tree!\n    public String folder = null;\n\n    // basename is the name of the file without any path information\n    public final String basename;\n\n    public Range getRange() {\n        // i really should USE this!\n        // lazy-load!\n        if (details == null)\n            try {\n                loadMeta();\n            } catch (WrongFiletypeException wfte) {\n                // System.out.println(\"wfte!\");\n                return null;\n                // ignore?\n            } catch (IOException ioe) {\n                System.out.println(\"on \" + filename + \", \" + ioe);\n                ioe.printStackTrace();\n                // !!!\n                return null;\n            }\n        return range;\n    }\n\n    // needed by Summary.  is this bad?  no, because when Element and Sample are\n    // merged, it'll be required.  get used to it.\n    public void setRange(Range r) {\n        this.range = r;\n    }\n\n    // not used here!  (but probably should be!)\n    public Exception error = null;\n\n    // public Element() { filename=null; } // HACK!  just for Summary.java\n    /**\n     * \t Construct an Element from a filename.  This Element will, by\n     * \t default, be active.\n     *\n     * \t @param filename the filename of the Sample to reference\n     */\n    public Element(String filename) {\n        this(filename, true);\n    }\n\n    /**\n     * \t Construct an Element from a filename, and a preset Active flag.\n     *\n     * \t @param filename the filename of the Sample to reference\n     * \t @param active true if this Element is to be active\n     */\n    public Element(String filename, boolean active) {\n        this.active = active;\n        // if it starts with a ?, this is a relative path, using :'s as separators\n        // ie, ?FOREST:ACM:moo123.pik\n        if (filename.startsWith(\"?\")) {\n            String fn = filename.substring(1);\n            int pos = fn.lastIndexOf(':');\n            if (pos >= 0) {\n                this.folder = fn.substring(0, pos);\n                this.basename = fn.substring(pos + 1, fn.length());\n                this.filename = App.prefs.getPref(\"corina.dir.data\") + File.separator + this.folder.replace(\":\", File.separator) + File.separator + this.basename;\n            } else {\n                this.filename = filename;\n                this.basename = new File(filename).getName();\n            }\n        } else // otherwise, we got passed a whole file name. try and parse it up.\n        {\n            String fn = filename;\n            // if, for some reason, adaptive reading is turned off...\n            // don't bother to parse it!\n            if (Boolean.valueOf(App.prefs.getPref(\"corina.dir.adaptiveread\")).booleanValue() == false) {\n                this.filename = filename;\n                this.basename = new File(filename).getName();\n                return;\n            }\n            // chop off any sort of beginning cruft\n            if (fn.startsWith(\"G:\\\\DATA\\\\\")) {\n                fn = fn.substring(8);\n            } else if (filename.startsWith(App.prefs.getPref(\"corina.dir.data\") + File.separator)) {\n                fn = fn.substring(App.prefs.getPref(\"corina.dir.data\").length() + File.separator.length());\n            } else {\n                // we can't convert this into a special path.\n                // leave folder null and bail.\n                this.filename = filename;\n                this.basename = new File(filename).getName();\n                return;\n            }\n            // replace forward slashes with a :, which will be our path separator.\n            fn = fn.replace(\"\\\\\", \":\");\n            // do the same for some other platform\n            fn = fn.replace(File.separator, \":\");\n            int pos = fn.lastIndexOf(':');\n            if (pos >= 0) {\n                this.folder = fn.substring(0, pos);\n                this.basename = fn.substring(pos + 1, fn.length());\n                this.filename = App.prefs.getPref(\"corina.dir.data\") + File.separator + this.folder.replace(\":\", File.separator) + File.separator + this.basename;\n            } else {\n                this.filename = filename;\n                this.basename = new File(filename).getName();\n            }\n        }\n    }\n\n    /**\n     * \t Return the state of the Element's active flag.\n     *\n     * \t @return true if this Element is active\n     */\n    public boolean isActive() {\n        return active;\n    }\n\n    /**\n     * \t Return the Element's filename.\n     *\n     * \t @return the filename this Element refers to\n     */\n    public String getFilename() {\n        return filename;\n    }\n\n    /**\n     * \t Return the Element's basename.\n     *\n     * \t @return the basename of the file this Element refers to\n     */\n    public String getBasename() {\n        return basename;\n    }\n\n    /**\n     * \t Return the Element's folder path.\n     *\n     * \t @return the folder path of the file this Element refers to\n     */\n    public String getFolder() {\n        return folder;\n    }\n\n    /**\n     * \t Return this Element's filename, with\n     * \t <code>corina.dir.data</code> replaced by an \"?\", if it's in a\n     * \t subfolder of that.  (Otherwise, returns the absolute filename.)\n     *\n     * \t @return the filename, with ?'s\n     */\n    public String getRelativeFilename() {\n        // no basename or folder? return relative path...\n        if (basename == null || folder == null)\n            return filename;\n        return \"?\" + folder + \":\" + basename;\n    }\n\n    /**\n     * \t Load this Element.  Returns this Element in a Sample object.\n     *\n     * \t @return the Sample referenced by this Element\n     * \t @exception IOException if an IOException occurred while trying\n     * \t to load it; this can also be the subclasses\n     * \t FileNotFoundException\n     */\n    public Sample load() throws IOException {\n        // save metadata before i go?\n        return new Sample(filename);\n    }\n\n    // dead samples should be dimmed or something\n    private boolean dead = false;\n\n    public void reloadMeta() throws IOException {\n        details = null;\n        loadMeta();\n    }\n\n    /**\n     * \t Load the metadata fields for this Element.\n     *\n     * \t @exception IOException if the Element could not be loaded\n     */\n    public void loadMeta() throws IOException {\n        if (dead)\n            // new IOException(\"dead\");\n            throw (IOException) error;\n        // this only gets set here, so meta must have been loaded already\n        if (details != null) {\n            return;\n        }\n        // load sample, and grab reference to fields (data gets GC'd)\n        try {\n            Sample s = load();\n            details = s.meta;\n            range = s.range;\n            lastModified = new File(filename).lastModified();\n        } catch (IOException ioe) {\n            dead = true;\n            error = ioe;\n            throw ioe;\n        }\n    }\n\n    /**\n     * \t Return the filename, so Element can be used in making Strings\n     * \t without worrying about getFilename() calls.\n     *\n     * \t @return the filename\n     */\n    public String toString() {\n        return filename;\n    }\n\n    // comparable\n    public int compareTo(Object o) {\n        return filename.compareTo(((Element) o).filename);\n    }\n\n    // these used to be in Bargraph.java, but LoD pushes them up here.\n    // they should probably be in a Metadata class, shared by Element and Sample\n    // (or unified sample-element model).\n    public boolean hasBark() {\n        String term = (String) details.get(\"terminal\");\n        return (term != null && term.equalsIgnoreCase(\"B\"));\n    }\n\n    public boolean hasPith() {\n        String pith = (String) details.get(\"pith\");\n        return (pith != null && pith.equalsIgnoreCase(\"Y\"));\n    }\n\n    public int numSapwood() {\n        Integer sapwood = (Integer) details.get(\"sapwood\");\n        return (sapwood == null ? 0 : sapwood.intValue());\n    }\n\n    //\n    // NEW: lazy-load interface\n    //\n    public Object getMeta(String field) {\n        if (details == null)\n            try {\n                loadMeta();\n            } catch (WrongFiletypeException wfte) {\n                // System.out.println(\"wfte!\");\n                return null;\n                // ignore?\n            } catch (IOException ioe) {\n                System.out.println(\"on \" + filename + \", \" + ioe);\n                ioe.printStackTrace();\n                // !!!\n                return null;\n            }\n        return details.get(field);\n    }\n\n    // does this object represent a real sample?\n    public boolean isSample() {\n        // if we've already loaded it, it's a sample.\n        if (details != null)\n            return true;\n        // otherwise, try to load it.\n        try {\n            loadMeta();\n            return true;\n        } catch (IOException ioe) {\n            return false;\n        }\n    }\n}\n",
		"id": "/EvoSuiteBenchmark/35_corina/src/main/java/corina/Element_3Test.java",
		"test_prompt": "// Element_3Test.java\n// This file is part of Corina.\n//\n// Corina is free software; you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation; either version 2 of the License, or\n// (at your option) any later version.\n//\n// Corina is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Corina; if not, write to the Free Software\n// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n//\n// Copyright 2001 Ken Harris <kbh7@cornell.edu>\n//\npackage corina;\n\nimport java.io.File;\nimport java.io.IOException;\nimport java.util.Map;\nimport corina.core.App;\nimport corina.formats.WrongFiletypeException;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link Element}.\n* It contains ten unit test cases for the {@link Element#hasBark()} method.\n*/\nclass Element_3Test {"
	},
	{
		"original_code": "// Element.java\n//\n// This file is part of Corina.\n//\n// Corina is free software; you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation; either version 2 of the License, or\n// (at your option) any later version.\n//\n// Corina is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Corina; if not, write to the Free Software\n// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n//\n// Copyright 2001 Ken Harris <kbh7@cornell.edu>\n//\npackage corina;\n\nimport java.io.File;\nimport java.io.IOException;\nimport java.util.Map;\nimport corina.core.App;\nimport corina.formats.WrongFiletypeException;\n\n/**\n *   An Element, basically a reference to a Sample (stored on disk).\n *\n *   <p>Normally used as a member of a SampleSet (though at this time\n *   SampleSet is only an ArrayList that provides text load/save of its\n *   elements).</p>\n *\n *   <p>An Element holds:</p>\n *\n *   <ul>\n *     <li>An active flag\n *     <li>A filename\n *     <li>A summary of details (the metadata from a Sample)\n *     <li>The range (updated with summary details)\n *   </ul>\n *\n *   <p>The active flag, true by default, indicates whether this Element\n *   is to be used in a particular operation.  For example, Sum will\n *   ignore inactive Elements, so users can quickly and easily try\n *   removing Elements from a Sum to see how the result changes.</p>\n *\n *   <p>The filename is the unique name of this Sample.  It is expected\n *   that at this place in the filesystem, there will be a Sample that\n *   can be loaded by the Sample constructor Sample(String filename).\n *   There will be trouble (i.e., IOExceptions) if this is not the case.\n *   An Element's filename is immutable: once an Element has been\n *   created, it cannot be pointed at any other sample.</p>\n *\n *   <p>(Note: I have considered adding a new field, filetype, so\n *   non-auto-detectable filetypes can be loaded, but so far there has\n *   been no demand for this.)</p>\n *\n *   <p>An Element also holds space for a summary of its details.  By\n *   default, this is empty, until the loadMeta() method has been\n *   called.  After a loadMeta(), there will be a Map of details,\n *   namely, the metadata fields from the Sample's metadata Map.  The\n *   entire metadata map is usually 500 bytes or less, so all fields are\n *   loaded.  (At 500 bytes each, a huge chronology with 200 elements\n *   would take up 100K for all of the preview information -- usually\n *   masters are much smaller, so this is only a couple kilobytes.\n *   There's no reason to try to load only some of the fields.)\n *\n *   <p>OLD RAMBLINGS I DON'T WANT TO DELETE YET: there should be a way\n *   to load the Range - incorporate it into meta?.  If it could do\n *   this, then visual.Bargraph.Bar wouldn't be needed, and visual.*\n *   could be a lot cleaner, and then I could use a real MVC model for\n *   everything, and the whole GUI would be cleaner.  How about\n *   that.</p>\n *\n *   @author Ken Harris &lt;kbh7 <i style=\"color: gray\">at</i> cornell <i style=\"color: gray\">dot</i> edu&gt;\n *   @version $Id: Element.java,v 1.9 2006/07/11 20:17:23 lucasmo Exp $\n */\npublic class Element implements Comparable {\n\n    // these members should probably be PRIVATE!\n    public boolean active;\n\n    public Map details = null;\n\n    public long lastModified = -1;\n\n    private Range range = null;\n\n    // filename is the full path (ie, G:\\DATA\\ACM\\asdf.moo)\n    public final String filename;\n\n    // folder is the path under the data directory,\n    // using : as a path separator.\n    // If we're passed a filename beginning with a ?, treat it as a folder:basename pair\n    // can be null if element is not in our data directory tree!\n    public String folder = null;\n\n    // basename is the name of the file without any path information\n    public final String basename;\n\n    public Range getRange() {\n        // i really should USE this!\n        // lazy-load!\n        if (details == null)\n            try {\n                loadMeta();\n            } catch (WrongFiletypeException wfte) {\n                // System.out.println(\"wfte!\");\n                return null;\n                // ignore?\n            } catch (IOException ioe) {\n                System.out.println(\"on \" + filename + \", \" + ioe);\n                ioe.printStackTrace();\n                // !!!\n                return null;\n            }\n        return range;\n    }\n\n    // needed by Summary.  is this bad?  no, because when Element and Sample are\n    // merged, it'll be required.  get used to it.\n    public void setRange(Range r) {\n        this.range = r;\n    }\n\n    // not used here!  (but probably should be!)\n    public Exception error = null;\n\n    // public Element() { filename=null; } // HACK!  just for Summary.java\n    /**\n     * \t Construct an Element from a filename.  This Element will, by\n     * \t default, be active.\n     *\n     * \t @param filename the filename of the Sample to reference\n     */\n    public Element(String filename) {\n        this(filename, true);\n    }\n\n    /**\n     * \t Construct an Element from a filename, and a preset Active flag.\n     *\n     * \t @param filename the filename of the Sample to reference\n     * \t @param active true if this Element is to be active\n     */\n    public Element(String filename, boolean active) {\n        this.active = active;\n        // if it starts with a ?, this is a relative path, using :'s as separators\n        // ie, ?FOREST:ACM:moo123.pik\n        if (filename.startsWith(\"?\")) {\n            String fn = filename.substring(1);\n            int pos = fn.lastIndexOf(':');\n            if (pos >= 0) {\n                this.folder = fn.substring(0, pos);\n                this.basename = fn.substring(pos + 1, fn.length());\n                this.filename = App.prefs.getPref(\"corina.dir.data\") + File.separator + this.folder.replace(\":\", File.separator) + File.separator + this.basename;\n            } else {\n                this.filename = filename;\n                this.basename = new File(filename).getName();\n            }\n        } else // otherwise, we got passed a whole file name. try and parse it up.\n        {\n            String fn = filename;\n            // if, for some reason, adaptive reading is turned off...\n            // don't bother to parse it!\n            if (Boolean.valueOf(App.prefs.getPref(\"corina.dir.adaptiveread\")).booleanValue() == false) {\n                this.filename = filename;\n                this.basename = new File(filename).getName();\n                return;\n            }\n            // chop off any sort of beginning cruft\n            if (fn.startsWith(\"G:\\\\DATA\\\\\")) {\n                fn = fn.substring(8);\n            } else if (filename.startsWith(App.prefs.getPref(\"corina.dir.data\") + File.separator)) {\n                fn = fn.substring(App.prefs.getPref(\"corina.dir.data\").length() + File.separator.length());\n            } else {\n                // we can't convert this into a special path.\n                // leave folder null and bail.\n                this.filename = filename;\n                this.basename = new File(filename).getName();\n                return;\n            }\n            // replace forward slashes with a :, which will be our path separator.\n            fn = fn.replace(\"\\\\\", \":\");\n            // do the same for some other platform\n            fn = fn.replace(File.separator, \":\");\n            int pos = fn.lastIndexOf(':');\n            if (pos >= 0) {\n                this.folder = fn.substring(0, pos);\n                this.basename = fn.substring(pos + 1, fn.length());\n                this.filename = App.prefs.getPref(\"corina.dir.data\") + File.separator + this.folder.replace(\":\", File.separator) + File.separator + this.basename;\n            } else {\n                this.filename = filename;\n                this.basename = new File(filename).getName();\n            }\n        }\n    }\n\n    /**\n     * \t Return the state of the Element's active flag.\n     *\n     * \t @return true if this Element is active\n     */\n    public boolean isActive() {\n        return active;\n    }\n\n    /**\n     * \t Return the Element's filename.\n     *\n     * \t @return the filename this Element refers to\n     */\n    public String getFilename() {\n        return filename;\n    }\n\n    /**\n     * \t Return the Element's basename.\n     *\n     * \t @return the basename of the file this Element refers to\n     */\n    public String getBasename() {\n        return basename;\n    }\n\n    /**\n     * \t Return the Element's folder path.\n     *\n     * \t @return the folder path of the file this Element refers to\n     */\n    public String getFolder() {\n        return folder;\n    }\n\n    /**\n     * \t Return this Element's filename, with\n     * \t <code>corina.dir.data</code> replaced by an \"?\", if it's in a\n     * \t subfolder of that.  (Otherwise, returns the absolute filename.)\n     *\n     * \t @return the filename, with ?'s\n     */\n    public String getRelativeFilename() {\n        // no basename or folder? return relative path...\n        if (basename == null || folder == null)\n            return filename;\n        return \"?\" + folder + \":\" + basename;\n    }\n\n    /**\n     * \t Load this Element.  Returns this Element in a Sample object.\n     *\n     * \t @return the Sample referenced by this Element\n     * \t @exception IOException if an IOException occurred while trying\n     * \t to load it; this can also be the subclasses\n     * \t FileNotFoundException\n     */\n    public Sample load() throws IOException {\n        // save metadata before i go?\n        return new Sample(filename);\n    }\n\n    // dead samples should be dimmed or something\n    private boolean dead = false;\n\n    public void reloadMeta() throws IOException {\n        details = null;\n        loadMeta();\n    }\n\n    /**\n     * \t Load the metadata fields for this Element.\n     *\n     * \t @exception IOException if the Element could not be loaded\n     */\n    public void loadMeta() throws IOException {\n        if (dead)\n            // new IOException(\"dead\");\n            throw (IOException) error;\n        // this only gets set here, so meta must have been loaded already\n        if (details != null) {\n            return;\n        }\n        // load sample, and grab reference to fields (data gets GC'd)\n        try {\n            Sample s = load();\n            details = s.meta;\n            range = s.range;\n            lastModified = new File(filename).lastModified();\n        } catch (IOException ioe) {\n            dead = true;\n            error = ioe;\n            throw ioe;\n        }\n    }\n\n    /**\n     * \t Return the filename, so Element can be used in making Strings\n     * \t without worrying about getFilename() calls.\n     *\n     * \t @return the filename\n     */\n    public String toString() {\n        return filename;\n    }\n\n    // comparable\n    public int compareTo(Object o) {\n        return filename.compareTo(((Element) o).filename);\n    }\n\n    // these used to be in Bargraph.java, but LoD pushes them up here.\n    // they should probably be in a Metadata class, shared by Element and Sample\n    // (or unified sample-element model).\n    public boolean hasBark() {\n        String term = (String) details.get(\"terminal\");\n        return (term != null && term.equalsIgnoreCase(\"B\"));\n    }\n\n    public boolean hasPith() {\n        String pith = (String) details.get(\"pith\");\n        return (pith != null && pith.equalsIgnoreCase(\"Y\"));\n    }\n\n    public int numSapwood() {\n        Integer sapwood = (Integer) details.get(\"sapwood\");\n        return (sapwood == null ? 0 : sapwood.intValue());\n    }\n\n    //\n    // NEW: lazy-load interface\n    //\n    public Object getMeta(String field) {\n        if (details == null)\n            try {\n                loadMeta();\n            } catch (WrongFiletypeException wfte) {\n                // System.out.println(\"wfte!\");\n                return null;\n                // ignore?\n            } catch (IOException ioe) {\n                System.out.println(\"on \" + filename + \", \" + ioe);\n                ioe.printStackTrace();\n                // !!!\n                return null;\n            }\n        return details.get(field);\n    }\n\n    // does this object represent a real sample?\n    public boolean isSample() {\n        // if we've already loaded it, it's a sample.\n        if (details != null)\n            return true;\n        // otherwise, try to load it.\n        try {\n            loadMeta();\n            return true;\n        } catch (IOException ioe) {\n            return false;\n        }\n    }\n}\n",
		"id": "/EvoSuiteBenchmark/35_corina/src/main/java/corina/Element_4Test.java",
		"test_prompt": "// Element_4Test.java\n// This file is part of Corina.\n//\n// Corina is free software; you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation; either version 2 of the License, or\n// (at your option) any later version.\n//\n// Corina is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Corina; if not, write to the Free Software\n// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n//\n// Copyright 2001 Ken Harris <kbh7@cornell.edu>\n//\npackage corina;\n\nimport java.io.File;\nimport java.io.IOException;\nimport java.util.Map;\nimport corina.core.App;\nimport corina.formats.WrongFiletypeException;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link Element}.\n* It contains ten unit test cases for the {@link Element#hasPith()} method.\n*/\nclass Element_4Test {"
	},
	{
		"original_code": "// Element.java\n//\n// This file is part of Corina.\n//\n// Corina is free software; you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation; either version 2 of the License, or\n// (at your option) any later version.\n//\n// Corina is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Corina; if not, write to the Free Software\n// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n//\n// Copyright 2001 Ken Harris <kbh7@cornell.edu>\n//\npackage corina;\n\nimport java.io.File;\nimport java.io.IOException;\nimport java.util.Map;\nimport corina.core.App;\nimport corina.formats.WrongFiletypeException;\n\n/**\n *   An Element, basically a reference to a Sample (stored on disk).\n *\n *   <p>Normally used as a member of a SampleSet (though at this time\n *   SampleSet is only an ArrayList that provides text load/save of its\n *   elements).</p>\n *\n *   <p>An Element holds:</p>\n *\n *   <ul>\n *     <li>An active flag\n *     <li>A filename\n *     <li>A summary of details (the metadata from a Sample)\n *     <li>The range (updated with summary details)\n *   </ul>\n *\n *   <p>The active flag, true by default, indicates whether this Element\n *   is to be used in a particular operation.  For example, Sum will\n *   ignore inactive Elements, so users can quickly and easily try\n *   removing Elements from a Sum to see how the result changes.</p>\n *\n *   <p>The filename is the unique name of this Sample.  It is expected\n *   that at this place in the filesystem, there will be a Sample that\n *   can be loaded by the Sample constructor Sample(String filename).\n *   There will be trouble (i.e., IOExceptions) if this is not the case.\n *   An Element's filename is immutable: once an Element has been\n *   created, it cannot be pointed at any other sample.</p>\n *\n *   <p>(Note: I have considered adding a new field, filetype, so\n *   non-auto-detectable filetypes can be loaded, but so far there has\n *   been no demand for this.)</p>\n *\n *   <p>An Element also holds space for a summary of its details.  By\n *   default, this is empty, until the loadMeta() method has been\n *   called.  After a loadMeta(), there will be a Map of details,\n *   namely, the metadata fields from the Sample's metadata Map.  The\n *   entire metadata map is usually 500 bytes or less, so all fields are\n *   loaded.  (At 500 bytes each, a huge chronology with 200 elements\n *   would take up 100K for all of the preview information -- usually\n *   masters are much smaller, so this is only a couple kilobytes.\n *   There's no reason to try to load only some of the fields.)\n *\n *   <p>OLD RAMBLINGS I DON'T WANT TO DELETE YET: there should be a way\n *   to load the Range - incorporate it into meta?.  If it could do\n *   this, then visual.Bargraph.Bar wouldn't be needed, and visual.*\n *   could be a lot cleaner, and then I could use a real MVC model for\n *   everything, and the whole GUI would be cleaner.  How about\n *   that.</p>\n *\n *   @author Ken Harris &lt;kbh7 <i style=\"color: gray\">at</i> cornell <i style=\"color: gray\">dot</i> edu&gt;\n *   @version $Id: Element.java,v 1.9 2006/07/11 20:17:23 lucasmo Exp $\n */\npublic class Element implements Comparable {\n\n    // these members should probably be PRIVATE!\n    public boolean active;\n\n    public Map details = null;\n\n    public long lastModified = -1;\n\n    private Range range = null;\n\n    // filename is the full path (ie, G:\\DATA\\ACM\\asdf.moo)\n    public final String filename;\n\n    // folder is the path under the data directory,\n    // using : as a path separator.\n    // If we're passed a filename beginning with a ?, treat it as a folder:basename pair\n    // can be null if element is not in our data directory tree!\n    public String folder = null;\n\n    // basename is the name of the file without any path information\n    public final String basename;\n\n    public Range getRange() {\n        // i really should USE this!\n        // lazy-load!\n        if (details == null)\n            try {\n                loadMeta();\n            } catch (WrongFiletypeException wfte) {\n                // System.out.println(\"wfte!\");\n                return null;\n                // ignore?\n            } catch (IOException ioe) {\n                System.out.println(\"on \" + filename + \", \" + ioe);\n                ioe.printStackTrace();\n                // !!!\n                return null;\n            }\n        return range;\n    }\n\n    // needed by Summary.  is this bad?  no, because when Element and Sample are\n    // merged, it'll be required.  get used to it.\n    public void setRange(Range r) {\n        this.range = r;\n    }\n\n    // not used here!  (but probably should be!)\n    public Exception error = null;\n\n    // public Element() { filename=null; } // HACK!  just for Summary.java\n    /**\n     * \t Construct an Element from a filename.  This Element will, by\n     * \t default, be active.\n     *\n     * \t @param filename the filename of the Sample to reference\n     */\n    public Element(String filename) {\n        this(filename, true);\n    }\n\n    /**\n     * \t Construct an Element from a filename, and a preset Active flag.\n     *\n     * \t @param filename the filename of the Sample to reference\n     * \t @param active true if this Element is to be active\n     */\n    public Element(String filename, boolean active) {\n        this.active = active;\n        // if it starts with a ?, this is a relative path, using :'s as separators\n        // ie, ?FOREST:ACM:moo123.pik\n        if (filename.startsWith(\"?\")) {\n            String fn = filename.substring(1);\n            int pos = fn.lastIndexOf(':');\n            if (pos >= 0) {\n                this.folder = fn.substring(0, pos);\n                this.basename = fn.substring(pos + 1, fn.length());\n                this.filename = App.prefs.getPref(\"corina.dir.data\") + File.separator + this.folder.replace(\":\", File.separator) + File.separator + this.basename;\n            } else {\n                this.filename = filename;\n                this.basename = new File(filename).getName();\n            }\n        } else // otherwise, we got passed a whole file name. try and parse it up.\n        {\n            String fn = filename;\n            // if, for some reason, adaptive reading is turned off...\n            // don't bother to parse it!\n            if (Boolean.valueOf(App.prefs.getPref(\"corina.dir.adaptiveread\")).booleanValue() == false) {\n                this.filename = filename;\n                this.basename = new File(filename).getName();\n                return;\n            }\n            // chop off any sort of beginning cruft\n            if (fn.startsWith(\"G:\\\\DATA\\\\\")) {\n                fn = fn.substring(8);\n            } else if (filename.startsWith(App.prefs.getPref(\"corina.dir.data\") + File.separator)) {\n                fn = fn.substring(App.prefs.getPref(\"corina.dir.data\").length() + File.separator.length());\n            } else {\n                // we can't convert this into a special path.\n                // leave folder null and bail.\n                this.filename = filename;\n                this.basename = new File(filename).getName();\n                return;\n            }\n            // replace forward slashes with a :, which will be our path separator.\n            fn = fn.replace(\"\\\\\", \":\");\n            // do the same for some other platform\n            fn = fn.replace(File.separator, \":\");\n            int pos = fn.lastIndexOf(':');\n            if (pos >= 0) {\n                this.folder = fn.substring(0, pos);\n                this.basename = fn.substring(pos + 1, fn.length());\n                this.filename = App.prefs.getPref(\"corina.dir.data\") + File.separator + this.folder.replace(\":\", File.separator) + File.separator + this.basename;\n            } else {\n                this.filename = filename;\n                this.basename = new File(filename).getName();\n            }\n        }\n    }\n\n    /**\n     * \t Return the state of the Element's active flag.\n     *\n     * \t @return true if this Element is active\n     */\n    public boolean isActive() {\n        return active;\n    }\n\n    /**\n     * \t Return the Element's filename.\n     *\n     * \t @return the filename this Element refers to\n     */\n    public String getFilename() {\n        return filename;\n    }\n\n    /**\n     * \t Return the Element's basename.\n     *\n     * \t @return the basename of the file this Element refers to\n     */\n    public String getBasename() {\n        return basename;\n    }\n\n    /**\n     * \t Return the Element's folder path.\n     *\n     * \t @return the folder path of the file this Element refers to\n     */\n    public String getFolder() {\n        return folder;\n    }\n\n    /**\n     * \t Return this Element's filename, with\n     * \t <code>corina.dir.data</code> replaced by an \"?\", if it's in a\n     * \t subfolder of that.  (Otherwise, returns the absolute filename.)\n     *\n     * \t @return the filename, with ?'s\n     */\n    public String getRelativeFilename() {\n        // no basename or folder? return relative path...\n        if (basename == null || folder == null)\n            return filename;\n        return \"?\" + folder + \":\" + basename;\n    }\n\n    /**\n     * \t Load this Element.  Returns this Element in a Sample object.\n     *\n     * \t @return the Sample referenced by this Element\n     * \t @exception IOException if an IOException occurred while trying\n     * \t to load it; this can also be the subclasses\n     * \t FileNotFoundException\n     */\n    public Sample load() throws IOException {\n        // save metadata before i go?\n        return new Sample(filename);\n    }\n\n    // dead samples should be dimmed or something\n    private boolean dead = false;\n\n    public void reloadMeta() throws IOException {\n        details = null;\n        loadMeta();\n    }\n\n    /**\n     * \t Load the metadata fields for this Element.\n     *\n     * \t @exception IOException if the Element could not be loaded\n     */\n    public void loadMeta() throws IOException {\n        if (dead)\n            // new IOException(\"dead\");\n            throw (IOException) error;\n        // this only gets set here, so meta must have been loaded already\n        if (details != null) {\n            return;\n        }\n        // load sample, and grab reference to fields (data gets GC'd)\n        try {\n            Sample s = load();\n            details = s.meta;\n            range = s.range;\n            lastModified = new File(filename).lastModified();\n        } catch (IOException ioe) {\n            dead = true;\n            error = ioe;\n            throw ioe;\n        }\n    }\n\n    /**\n     * \t Return the filename, so Element can be used in making Strings\n     * \t without worrying about getFilename() calls.\n     *\n     * \t @return the filename\n     */\n    public String toString() {\n        return filename;\n    }\n\n    // comparable\n    public int compareTo(Object o) {\n        return filename.compareTo(((Element) o).filename);\n    }\n\n    // these used to be in Bargraph.java, but LoD pushes them up here.\n    // they should probably be in a Metadata class, shared by Element and Sample\n    // (or unified sample-element model).\n    public boolean hasBark() {\n        String term = (String) details.get(\"terminal\");\n        return (term != null && term.equalsIgnoreCase(\"B\"));\n    }\n\n    public boolean hasPith() {\n        String pith = (String) details.get(\"pith\");\n        return (pith != null && pith.equalsIgnoreCase(\"Y\"));\n    }\n\n    public int numSapwood() {\n        Integer sapwood = (Integer) details.get(\"sapwood\");\n        return (sapwood == null ? 0 : sapwood.intValue());\n    }\n\n    //\n    // NEW: lazy-load interface\n    //\n    public Object getMeta(String field) {\n        if (details == null)\n            try {\n                loadMeta();\n            } catch (WrongFiletypeException wfte) {\n                // System.out.println(\"wfte!\");\n                return null;\n                // ignore?\n            } catch (IOException ioe) {\n                System.out.println(\"on \" + filename + \", \" + ioe);\n                ioe.printStackTrace();\n                // !!!\n                return null;\n            }\n        return details.get(field);\n    }\n\n    // does this object represent a real sample?\n    public boolean isSample() {\n        // if we've already loaded it, it's a sample.\n        if (details != null)\n            return true;\n        // otherwise, try to load it.\n        try {\n            loadMeta();\n            return true;\n        } catch (IOException ioe) {\n            return false;\n        }\n    }\n}\n",
		"id": "/EvoSuiteBenchmark/35_corina/src/main/java/corina/Element_5Test.java",
		"test_prompt": "// Element_5Test.java\n// This file is part of Corina.\n//\n// Corina is free software; you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation; either version 2 of the License, or\n// (at your option) any later version.\n//\n// Corina is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Corina; if not, write to the Free Software\n// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n//\n// Copyright 2001 Ken Harris <kbh7@cornell.edu>\n//\npackage corina;\n\nimport java.io.File;\nimport java.io.IOException;\nimport java.util.Map;\nimport corina.core.App;\nimport corina.formats.WrongFiletypeException;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link Element}.\n* It contains ten unit test cases for the {@link Element#numSapwood()} method.\n*/\nclass Element_5Test {"
	},
	{
		"original_code": "// Element.java\n//\n// This file is part of Corina.\n//\n// Corina is free software; you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation; either version 2 of the License, or\n// (at your option) any later version.\n//\n// Corina is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Corina; if not, write to the Free Software\n// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n//\n// Copyright 2001 Ken Harris <kbh7@cornell.edu>\n//\npackage corina;\n\nimport java.io.File;\nimport java.io.IOException;\nimport java.util.Map;\nimport corina.core.App;\nimport corina.formats.WrongFiletypeException;\n\n/**\n *   An Element, basically a reference to a Sample (stored on disk).\n *\n *   <p>Normally used as a member of a SampleSet (though at this time\n *   SampleSet is only an ArrayList that provides text load/save of its\n *   elements).</p>\n *\n *   <p>An Element holds:</p>\n *\n *   <ul>\n *     <li>An active flag\n *     <li>A filename\n *     <li>A summary of details (the metadata from a Sample)\n *     <li>The range (updated with summary details)\n *   </ul>\n *\n *   <p>The active flag, true by default, indicates whether this Element\n *   is to be used in a particular operation.  For example, Sum will\n *   ignore inactive Elements, so users can quickly and easily try\n *   removing Elements from a Sum to see how the result changes.</p>\n *\n *   <p>The filename is the unique name of this Sample.  It is expected\n *   that at this place in the filesystem, there will be a Sample that\n *   can be loaded by the Sample constructor Sample(String filename).\n *   There will be trouble (i.e., IOExceptions) if this is not the case.\n *   An Element's filename is immutable: once an Element has been\n *   created, it cannot be pointed at any other sample.</p>\n *\n *   <p>(Note: I have considered adding a new field, filetype, so\n *   non-auto-detectable filetypes can be loaded, but so far there has\n *   been no demand for this.)</p>\n *\n *   <p>An Element also holds space for a summary of its details.  By\n *   default, this is empty, until the loadMeta() method has been\n *   called.  After a loadMeta(), there will be a Map of details,\n *   namely, the metadata fields from the Sample's metadata Map.  The\n *   entire metadata map is usually 500 bytes or less, so all fields are\n *   loaded.  (At 500 bytes each, a huge chronology with 200 elements\n *   would take up 100K for all of the preview information -- usually\n *   masters are much smaller, so this is only a couple kilobytes.\n *   There's no reason to try to load only some of the fields.)\n *\n *   <p>OLD RAMBLINGS I DON'T WANT TO DELETE YET: there should be a way\n *   to load the Range - incorporate it into meta?.  If it could do\n *   this, then visual.Bargraph.Bar wouldn't be needed, and visual.*\n *   could be a lot cleaner, and then I could use a real MVC model for\n *   everything, and the whole GUI would be cleaner.  How about\n *   that.</p>\n *\n *   @author Ken Harris &lt;kbh7 <i style=\"color: gray\">at</i> cornell <i style=\"color: gray\">dot</i> edu&gt;\n *   @version $Id: Element.java,v 1.9 2006/07/11 20:17:23 lucasmo Exp $\n */\npublic class Element implements Comparable {\n\n    // these members should probably be PRIVATE!\n    public boolean active;\n\n    public Map details = null;\n\n    public long lastModified = -1;\n\n    private Range range = null;\n\n    // filename is the full path (ie, G:\\DATA\\ACM\\asdf.moo)\n    public final String filename;\n\n    // folder is the path under the data directory,\n    // using : as a path separator.\n    // If we're passed a filename beginning with a ?, treat it as a folder:basename pair\n    // can be null if element is not in our data directory tree!\n    public String folder = null;\n\n    // basename is the name of the file without any path information\n    public final String basename;\n\n    public Range getRange() {\n        // i really should USE this!\n        // lazy-load!\n        if (details == null)\n            try {\n                loadMeta();\n            } catch (WrongFiletypeException wfte) {\n                // System.out.println(\"wfte!\");\n                return null;\n                // ignore?\n            } catch (IOException ioe) {\n                System.out.println(\"on \" + filename + \", \" + ioe);\n                ioe.printStackTrace();\n                // !!!\n                return null;\n            }\n        return range;\n    }\n\n    // needed by Summary.  is this bad?  no, because when Element and Sample are\n    // merged, it'll be required.  get used to it.\n    public void setRange(Range r) {\n        this.range = r;\n    }\n\n    // not used here!  (but probably should be!)\n    public Exception error = null;\n\n    // public Element() { filename=null; } // HACK!  just for Summary.java\n    /**\n     * \t Construct an Element from a filename.  This Element will, by\n     * \t default, be active.\n     *\n     * \t @param filename the filename of the Sample to reference\n     */\n    public Element(String filename) {\n        this(filename, true);\n    }\n\n    /**\n     * \t Construct an Element from a filename, and a preset Active flag.\n     *\n     * \t @param filename the filename of the Sample to reference\n     * \t @param active true if this Element is to be active\n     */\n    public Element(String filename, boolean active) {\n        this.active = active;\n        // if it starts with a ?, this is a relative path, using :'s as separators\n        // ie, ?FOREST:ACM:moo123.pik\n        if (filename.startsWith(\"?\")) {\n            String fn = filename.substring(1);\n            int pos = fn.lastIndexOf(':');\n            if (pos >= 0) {\n                this.folder = fn.substring(0, pos);\n                this.basename = fn.substring(pos + 1, fn.length());\n                this.filename = App.prefs.getPref(\"corina.dir.data\") + File.separator + this.folder.replace(\":\", File.separator) + File.separator + this.basename;\n            } else {\n                this.filename = filename;\n                this.basename = new File(filename).getName();\n            }\n        } else // otherwise, we got passed a whole file name. try and parse it up.\n        {\n            String fn = filename;\n            // if, for some reason, adaptive reading is turned off...\n            // don't bother to parse it!\n            if (Boolean.valueOf(App.prefs.getPref(\"corina.dir.adaptiveread\")).booleanValue() == false) {\n                this.filename = filename;\n                this.basename = new File(filename).getName();\n                return;\n            }\n            // chop off any sort of beginning cruft\n            if (fn.startsWith(\"G:\\\\DATA\\\\\")) {\n                fn = fn.substring(8);\n            } else if (filename.startsWith(App.prefs.getPref(\"corina.dir.data\") + File.separator)) {\n                fn = fn.substring(App.prefs.getPref(\"corina.dir.data\").length() + File.separator.length());\n            } else {\n                // we can't convert this into a special path.\n                // leave folder null and bail.\n                this.filename = filename;\n                this.basename = new File(filename).getName();\n                return;\n            }\n            // replace forward slashes with a :, which will be our path separator.\n            fn = fn.replace(\"\\\\\", \":\");\n            // do the same for some other platform\n            fn = fn.replace(File.separator, \":\");\n            int pos = fn.lastIndexOf(':');\n            if (pos >= 0) {\n                this.folder = fn.substring(0, pos);\n                this.basename = fn.substring(pos + 1, fn.length());\n                this.filename = App.prefs.getPref(\"corina.dir.data\") + File.separator + this.folder.replace(\":\", File.separator) + File.separator + this.basename;\n            } else {\n                this.filename = filename;\n                this.basename = new File(filename).getName();\n            }\n        }\n    }\n\n    /**\n     * \t Return the state of the Element's active flag.\n     *\n     * \t @return true if this Element is active\n     */\n    public boolean isActive() {\n        return active;\n    }\n\n    /**\n     * \t Return the Element's filename.\n     *\n     * \t @return the filename this Element refers to\n     */\n    public String getFilename() {\n        return filename;\n    }\n\n    /**\n     * \t Return the Element's basename.\n     *\n     * \t @return the basename of the file this Element refers to\n     */\n    public String getBasename() {\n        return basename;\n    }\n\n    /**\n     * \t Return the Element's folder path.\n     *\n     * \t @return the folder path of the file this Element refers to\n     */\n    public String getFolder() {\n        return folder;\n    }\n\n    /**\n     * \t Return this Element's filename, with\n     * \t <code>corina.dir.data</code> replaced by an \"?\", if it's in a\n     * \t subfolder of that.  (Otherwise, returns the absolute filename.)\n     *\n     * \t @return the filename, with ?'s\n     */\n    public String getRelativeFilename() {\n        // no basename or folder? return relative path...\n        if (basename == null || folder == null)\n            return filename;\n        return \"?\" + folder + \":\" + basename;\n    }\n\n    /**\n     * \t Load this Element.  Returns this Element in a Sample object.\n     *\n     * \t @return the Sample referenced by this Element\n     * \t @exception IOException if an IOException occurred while trying\n     * \t to load it; this can also be the subclasses\n     * \t FileNotFoundException\n     */\n    public Sample load() throws IOException {\n        // save metadata before i go?\n        return new Sample(filename);\n    }\n\n    // dead samples should be dimmed or something\n    private boolean dead = false;\n\n    public void reloadMeta() throws IOException {\n        details = null;\n        loadMeta();\n    }\n\n    /**\n     * \t Load the metadata fields for this Element.\n     *\n     * \t @exception IOException if the Element could not be loaded\n     */\n    public void loadMeta() throws IOException {\n        if (dead)\n            // new IOException(\"dead\");\n            throw (IOException) error;\n        // this only gets set here, so meta must have been loaded already\n        if (details != null) {\n            return;\n        }\n        // load sample, and grab reference to fields (data gets GC'd)\n        try {\n            Sample s = load();\n            details = s.meta;\n            range = s.range;\n            lastModified = new File(filename).lastModified();\n        } catch (IOException ioe) {\n            dead = true;\n            error = ioe;\n            throw ioe;\n        }\n    }\n\n    /**\n     * \t Return the filename, so Element can be used in making Strings\n     * \t without worrying about getFilename() calls.\n     *\n     * \t @return the filename\n     */\n    public String toString() {\n        return filename;\n    }\n\n    // comparable\n    public int compareTo(Object o) {\n        return filename.compareTo(((Element) o).filename);\n    }\n\n    // these used to be in Bargraph.java, but LoD pushes them up here.\n    // they should probably be in a Metadata class, shared by Element and Sample\n    // (or unified sample-element model).\n    public boolean hasBark() {\n        String term = (String) details.get(\"terminal\");\n        return (term != null && term.equalsIgnoreCase(\"B\"));\n    }\n\n    public boolean hasPith() {\n        String pith = (String) details.get(\"pith\");\n        return (pith != null && pith.equalsIgnoreCase(\"Y\"));\n    }\n\n    public int numSapwood() {\n        Integer sapwood = (Integer) details.get(\"sapwood\");\n        return (sapwood == null ? 0 : sapwood.intValue());\n    }\n\n    //\n    // NEW: lazy-load interface\n    //\n    public Object getMeta(String field) {\n        if (details == null)\n            try {\n                loadMeta();\n            } catch (WrongFiletypeException wfte) {\n                // System.out.println(\"wfte!\");\n                return null;\n                // ignore?\n            } catch (IOException ioe) {\n                System.out.println(\"on \" + filename + \", \" + ioe);\n                ioe.printStackTrace();\n                // !!!\n                return null;\n            }\n        return details.get(field);\n    }\n\n    // does this object represent a real sample?\n    public boolean isSample() {\n        // if we've already loaded it, it's a sample.\n        if (details != null)\n            return true;\n        // otherwise, try to load it.\n        try {\n            loadMeta();\n            return true;\n        } catch (IOException ioe) {\n            return false;\n        }\n    }\n}\n",
		"id": "/EvoSuiteBenchmark/35_corina/src/main/java/corina/Element_6Test.java",
		"test_prompt": "// Element_6Test.java\n// This file is part of Corina.\n//\n// Corina is free software; you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation; either version 2 of the License, or\n// (at your option) any later version.\n//\n// Corina is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Corina; if not, write to the Free Software\n// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n//\n// Copyright 2001 Ken Harris <kbh7@cornell.edu>\n//\npackage corina;\n\nimport java.io.File;\nimport java.io.IOException;\nimport java.util.Map;\nimport corina.core.App;\nimport corina.formats.WrongFiletypeException;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link Element}.\n* It contains ten unit test cases for the {@link Element#isSample()} method.\n*/\nclass Element_6Test {"
	},
	{
		"original_code": "// App.java\n// Copyright (c) 2004-2005 Aaron Hamid.  All rights reserved.\n// See license in COPYING.txt distributed with this file and available online at http://www.gnu.org/licenses/gpl.txt\npackage corina.core;\n\nimport javax.swing.ProgressMonitor;\nimport javax.swing.UIManager;\nimport corina.gui.ProgressMeter;\nimport corina.logging.CorinaLog;\nimport corina.logging.Logging;\nimport corina.platform.Platform;\nimport corina.prefs.Prefs;\n\n/**\n * Contextual state of the app; holds references to all \"subsystems\".\n * Originally was going to be named AppContext, but shortened because it\n * has to be referenced frequently.\n * @author Aaron Hamid\n */\npublic class App {\n\n    public static Prefs prefs;\n\n    public static Platform platform;\n\n    public static Logging logging;\n\n    private static final CorinaLog log = new CorinaLog(App.class);\n\n    private static boolean initialized;\n\n    public static synchronized void init(ProgressMeter meter) {\n        // throwing an error instead of simply ignoring it\n        // will point out bad design and/or bugs\n        if (initialized)\n            throw new IllegalStateException(\"AppContext already initialized.\");\n        log.debug(\"initializing App\");\n        if (meter != null) {\n            meter.setMaximum(3);\n            meter.setNote(\"Initializing Logging...\");\n        }\n        logging = new Logging();\n        logging.init();\n        if (meter != null) {\n            meter.setProgress(1);\n            meter.setNote(\"Initializing Platform...\");\n        }\n        platform = new Platform();\n        platform.init();\n        if (meter != null) {\n            meter.setProgress(2);\n        }\n        // <init prefs>\n        //prefs = new Prefs();\n        //prefs.init();\n        // if the user hasn't specified a parser with\n        // -Dorg.xml.sax.driver=..., use crimson.\n        if (System.getProperty(\"org.xml.sax.driver\") == null)\n            System.setProperty(\"org.xml.sax.driver\", \"org.apache.crimson.parser.XMLReaderImpl\");\n        // xerces: \"org.apache.xerces.parsers.SAXParser\"\n        // gnu/jaxp: \"gnu.xml.aelfred2.SAXDriver\"\n        // migrate old prefs (!!!)\n        // WAS: Migrate.migrate();\n        // load properties -- messagedialog here is UGLY!\n        if (meter != null) {\n            meter.setNote(\"Initializing Preferences...\");\n        }\n        prefs = new Prefs();\n        prefs.init();\n        if (meter != null) {\n            meter.setProgress(3);\n        }\n        /*try {\n      //Prefs.init();\n    } catch (IOException ioe) {\n      JOptionPane.showMessageDialog(null,\n          \"While trying to load preferences:\\n\" + ioe.getMessage(),\n          \"Corina: Error Loading Preferences\", JOptionPane.ERROR_MESSAGE);\n    }*/\n        if (platform.isWindows() && Boolean.valueOf(prefs.getPref(\"corina.windows.smooth\")).booleanValue()) {\n            try {\n                UIManager.setLookAndFeel(\"smooth.windows.SmoothLookAndFeel\");\n            } catch (Exception e) {\n                e.printStackTrace();\n            }\n        }\n        initialized = true;\n    }\n\n    public static boolean isInitialized() {\n        return initialized;\n    }\n\n    public static synchronized void destroy(ProgressMeter meter) {\n        // throwing an error instead of simply ignoring it\n        // will point out bad design and/or bugs\n        if (!initialized)\n            throw new IllegalStateException(\"AppContext already destroyed.\");\n    }\n}\n",
		"id": "/EvoSuiteBenchmark/35_corina/src/main/java/corina/core/App.java",
		"test_prompt": "// AppTest.java\n// See license in COPYING.txt distributed with this file and available online at http://www.gnu.org/licenses/gpl.txt\npackage corina.core;\n\nimport javax.swing.ProgressMonitor;\nimport javax.swing.UIManager;\nimport corina.gui.ProgressMeter;\nimport corina.logging.CorinaLog;\nimport corina.logging.Logging;\nimport corina.platform.Platform;\nimport corina.prefs.Prefs;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link App}.\n* It contains ten unit test cases for the {@link App#isInitialized()} method.\n*/\nclass AppTest {"
	},
	{
		"original_code": "// Tucson.java\n//\n// This file is part of Corina.\n//\n// Corina is free software; you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation; either version 2 of the License, or\n// (at your option) any later version.\n//\n// Corina is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Corina; if not, write to the Free Software\n// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n//\n// Copyright 2001 Ken Harris <kbh7@cornell.edu>\n//\npackage corina.formats;\n\nimport corina.Year;\nimport corina.Range;\nimport corina.Sample;\nimport corina.util.StringUtils;\nimport corina.ui.I18n;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.util.HashMap;\nimport java.io.BufferedReader;\nimport java.io.BufferedWriter;\nimport java.io.IOException;\n\n/**\n * The Tucson tree ring laboratory's file format.  This has been the\n * canonical file format since the punchcard days.  Unfortunately,\n * since it's just the punchcard format in a text file, it has\n * numerous shortcomings:\n *\n * <ul>\n *\n * <li>minimal metadata support (only 80-character ASCII title,\n * 6-digit ID, and relative/absolute flag)\n *\n * <li>relative/absolute flag starts in column 80 of the title,\n * making it inconvenient to edit with most text editors\n *\n * <li>no way to store BC(E) samples; some labs add 8000 to the\n * absolute year as a hack to get around this, but unfortunately\n * they've run into a Y10K problem as of last year (it can't store\n * 5-digit years, either)\n *\n * <li>no way to store auxiliary numerical data (like Weiserjahre,\n * or earlywood/latewood)\n *\n * <li>no way to distinguish with certainty if a summed file is\n * indexed (as far as I can tell, but see the 800 Rule, below)\n *\n * <li>no MIME type (even an application/x- one), standard file\n * extension, or telltale opening signature\n *\n * </ul>\n *\n * <p>What it does do well is store raw data, readable by every dendro\n * program ever written (yet another win for open standards).\n * Unfortunately, they never bothered to make an improved format after\n * they stopped using punchcards, so every other program also has a\n * (better) native format.  Thus we have a dozen completely\n * incompatible file formats today.</p>\n *\n * <h3>File Format</h3>\n *\n * <p>There are two variants of Tucson files: raw and processed.\n * Processed files hold data that is indexed, summed, or both.</p>\n *\n * <p>There appear to be subtle variations on each type, like whether\n * to fill out the last decade with extra 0's after the\n * 999-terminator, that different programs have introduced over the\n * years.  I think this class can read any type of Tucson file\n * correctly.</p>\n *\n * <h3>Raw Samples</h3>\n *\n * <pre>\n * xxxxxx  yyyy\n * </pre>\n *\n * <table border=\"0\">\n * <tr><th>letter</th><th>description</th></tr>\n * <tr><td>x</td><td>id number (6 digits)</td>\n * <tr><td>y</td><td>decade starting year (2 spaces + 4 digits)</td>\n * </table>\n *\n * // WRITE ME\n *\n * <h3>Processed Samples</h3>\n *\n * // WRITE ME\n *\n * DETERMINING IF A FILE IS INDEXED: 800-rule (obsolete?)\n *\n * <h3>Reference</h3>\n *\n * <p>See NOAA's\n * <a href=\"http://www.ngdc.noaa.gov/paleo/treeinfo.html\">Tree Ring Data\n * Description</a>.  It's the only actual description of the Tucson format\n * I've ever seen, but it doesn't document very much.</p>\n *\n * @author Ken Harris &lt;kbh7 <i style=\"color: gray\">at</i> cornell <i style=\"color: gray\">dot</i> edu&gt;\n * @version $Id: Tucson.java,v 1.2 2006/04/25 20:21:09 lucasmo Exp $\n */\npublic class Tucson implements Filetype {\n\n    public String toString() {\n        return I18n.getText(\"format.tucson\");\n    }\n\n    public String getDefaultExtension() {\n        // .TUC? .MST?\n        return \".CRN\";\n    }\n\n    // load 0-3 lines of header, if available, and fill meta appropriately\n    private void loadHeader(BufferedReader r, Map meta) throws IOException {\n        // if first 2 lines start with the same 6 chars, no header\n        // read a header line?  usually...\n        boolean readFirstLine = true;\n        {\n            // 80+ABSOL + 80 + 20=buffer\n            r.mark(85 + 80 + 20);\n            String l1 = r.readLine();\n            String l2 = r.readLine();\n            r.reset();\n            if (l1 == null || l2 == null || l1.length() < 6 || l2.length() < 6)\n                throw new WrongFiletypeException();\n            if (l1.substring(0, 6).equals(l2.substring(0, 6)))\n                readFirstLine = false;\n        }\n        // ITRDB tucson files have usually 3 header lines: \"xxxxxx 1\n        // Site\", \"xxxxxx 2 Country Species Altitude Long Lat Start\n        // End\", \"xxxxxx 3 Author\".  I *assume* no tucson file has\n        // just 2, or more than 3, lines.  other programs apparently\n        // can't agree where to put the \" 1 \" (\"  1\", for some files),\n        // so I grab 3 chars and parseInt() it, to be sure.\n        if (!readFirstLine) {\n            // 3 full lines\n            r.mark(81 * 3);\n            String l1 = r.readLine();\n            String l2 = r.readLine();\n            String l3 = r.readLine();\n            if (l1.substring(0, 6).equals(l2.substring(0, 6)) && l2.substring(0, 6).equals(l3.substring(0, 6)) && (l1.substring(6).trim().charAt(0) == '1') && (l2.substring(6).trim().charAt(0) == '2') && (l3.substring(6).trim().charAt(0) == '3')) {\n                // was: substring(9,61) -- is there anything beyond the title i care about?\n                if (l1.length() >= 9) {\n                    String title = l1.substring(9).trim();\n                    // read 4-letter species code\n                    if (l1.length() >= 65) {\n                        // also make sure it's in \" ABCD \" form?\n                        String species = l1.substring(61, 65);\n                        meta.put(\"species\", species);\n                        title = l1.substring(9, 61).trim();\n                    }\n                    meta.put(\"title\", title);\n                }\n                // ignore country?  (it's l2:9..22)\n                // old way to do species: doesn't work?\n                //\t\tif (l2.length() >= 40)\n                //\t\t    meta.put(\"species\", l2.substring(22, 40).trim());\n                // altitude -- just dump in comments for now\n                // lat/long -- just dump in comments for now\n                if (l2.length() >= 57) {\n                    String alt = l2.substring(40, 45).trim();\n                    // decode me!\n                    String latlong = l2.substring(47, 57).trim();\n                    meta.put(\"comments\", \"Altitude = \" + alt + \", Lat/Long = \" + latlong);\n                }\n                // start/end -- ignore, they're in the data, too\n                // author, and use 6-digit code\n                if (l3.length() >= 10)\n                    meta.put(\"author\", l3.substring(9).trim());\n                // don't load id here: it's per-sample, not per-file\n                // other stuff: if it's in the ITRDB, it's probably\n                // Absolute, and Reconciled\n                meta.put(\"dating\", \"A\");\n                meta.put(\"reconciled\", \"Y\");\n            } else {\n                r.reset();\n            }\n        } else // first line -- used by corina-tucson files only?\n        {\n            String firstLine = r.readLine();\n            if (firstLine.length() > 80) {\n                // title + RELAT/ABSOL\n                meta.put(\"title\", firstLine.substring(0, 80).trim());\n                meta.put(\"dating\", firstLine.substring(80, 81));\n            } else {\n                // just title\n                meta.put(\"title\", firstLine.trim());\n            }\n        }\n    }\n\n    public Sample load(BufferedReader r) throws IOException {\n        // new sample\n        Sample s = new Sample();\n        // gah! don't do this!\n        //s.meta.clear();\n        s.meta.put(\"dating\", \"R\");\n        // !!! load any header lines; below here is data only\n        loadHeader(r, s.meta);\n        // just load the data for one sample\n        // OOPS: this returns NULL to mean no-data-present\n        loadOneSample(r, s);\n        // that was a SUPER-SUBTLE bug!  ouch.\n        // no data => not a tucson file at all\n        // (why doesn't loadOne just throw wfte then?  good question...)\n        if (s == null)\n            throw new WrongFiletypeException();\n        // return\n        return s;\n    }\n\n    private void loadOneSample(BufferedReader r, Sample s) throws IOException {\n        // don't know start year, yet\n        Year start = null;\n        // true for the first iteration only\n        boolean firstLine = true;\n        boolean isProcessed = false;\n        boolean isIndexed = false;\n        boolean isSummed = false;\n        // loop through data lines\n        loop: while (true) {\n            // read a line; halt on EOF\n            String line = r.readLine();\n            if (line == null)\n                break;\n            // is a statistics line?  stop.\n            if (line.indexOf('.') != -1)\n                break;\n            // from the first line of data, we determine the format\n            if (firstLine) {\n                // error checking\n                if (line.length() < 18)\n                    // size matters\n                    throw new WrongFiletypeException();\n                // processed data?\n                if (// was: (line.charAt(6) != ' ')\n                line.trim().length() % 6 != 0)\n                    isProcessed = true;\n                // summed? / indexed?\n                if (isProcessed && line.charAt(16) != ' ')\n                    isSummed = true;\n                else\n                    // right?\n                    isIndexed = true;\n                // get id\n                s.meta.put(\"id\", line.substring(0, 6).trim());\n                // set format -- bug: doesn't this get overridden by guessIndexed() every time?\n                if (isSummed)\n                    s.meta.put(\"format\", \"S\");\n                else if (isIndexed)\n                    s.meta.put(\"format\", \"I\");\n                else\n                    s.meta.put(\"format\", \"R\");\n                // make a count List, if it's summed\n                if (isSummed)\n                    s.count = new ArrayList();\n                // don't come back here\n                firstLine = false;\n            }\n            // the last line may optionally (my favorite word!) have\n            // some stats.  the spec (hah!) is at\n            // ftp://ftp.ngdc.noaa.gov/paleo/treering/treeinfo.txt\n            // this is after a 999/9990 value, so I don't have to\n            // explicitly check for it (but if I did, I'd check for a\n            // '.' on the line).  anyway, if this is ever really\n            // needed, here's what the data is, but I'm just going to\n            // ignore it for now.\n            // -- cols 0-5: site id\n            // -- cols 7-9: number of years (max 999 ... augh!)\n            // -- cols 12-15: first order autocorrelation (what's that?)\n            // -- cols 18-21: standard deviation\n            // -- cols 24-27: mean sensitivity (we compute this ourselves)\n            // -- cols 28-34: mean index value (what's that?)\n            // -- cols 36-43: sum of indices (huh?)\n            // -- cols 45-52: sum of squares of indices (aiee!)\n            // -- cols 61-62: max# of series (*thump*)\n            /*\n\t\t\t why this is dumb:\n\t\t\t -- little gain: for long samples, saves a few ms of computation\n\t\t\t -- (no gain: but if you do it lazily, or in a different thread, not even that)\n\t\t\t -- loss: adds a restriction: max 999 years\n\t\t\t -- only possible gain: if you wanted to list these stats for many samples quickly\n\t\t\t -- (but then: a real database, or even a simple index file, would be better)\n\t\t\t see Summary.java for my take on this.\n\t\t\t */\n            // switch on format\n            if (!isProcessed) {\n                // raw\n                try {\n                    if (start == null)\n                        start = new Year(line.substring(8, 12));\n                } catch (NumberFormatException nfe) {\n                    throw new WrongFiletypeException();\n                    // DESIGN: should this be IOE? [see below, too]\n                }\n                for (int j = 12; j + 6 <= line.length(); j += 6) {\n                    String stringlet = line.substring(j, j + 6).trim();\n                    if (stringlet.length() == 0)\n                        break;\n                    int value;\n                    try {\n                        value = Integer.parseInt(stringlet);\n                    } catch (NumberFormatException nfe) {\n                        throw new WrongFiletypeException();\n                        // DESIGN: should this be IOE?  probably a\n                        // corrupted file, no?\n                    }\n                    if (value != 999)\n                        s.data.add(new Integer(value));\n                    else\n                        // sometimes there's \"999 0 0 0\", so explicitly stop\n                        break loop;\n                }\n            } else {\n                // processed\n                try {\n                    if (start == null)\n                        start = new Year(line.substring(6, 10));\n                } catch (NumberFormatException nfe) {\n                    throw new WrongFiletypeException();\n                    // DESIGN: should this be IOE?\n                }\n                for (int j = 10; j < line.length(); j += 7) {\n                    // or: j+4<=line.length()\n                    // figure out data value\n                    int lastSpace = line.substring(j, j + 4).lastIndexOf(' ');\n                    String stringlet = line.substring(j + lastSpace + 1, j + 4);\n                    int value;\n                    try {\n                        value = Integer.parseInt(stringlet);\n                    } catch (NumberFormatException nfe) {\n                        throw new WrongFiletypeException();\n                    }\n                    if (value != 9990) {\n                        s.data.add(new Integer(value));\n                        // count\n                        if (isSummed) {\n                            lastSpace = line.substring(j + 4, j + 7).lastIndexOf(' ');\n                            stringlet = line.substring(j + 4 + lastSpace + 1, j + 7);\n                            s.count.add(new Integer(stringlet));\n                        }\n                    } else if (!s.data.isEmpty()) {\n                        // last line might be len=80, padded with spaces.  so 9990 + (already have data) => break.\n                        break loop;\n                    }\n                }\n            }\n        }\n        // RIGHT HERE i've finished reading the line that ends this\n        // sample.  if i wanted to try reading another sample here,\n        // i'd have to: (1) have kept meta-without-id in a safe place,\n        // (2) make a new sample, clone meta-without-id, and add the\n        // next id (line.substring[0..5]) to it, but generally just\n        // (3) run the loop (\"loop:\" label) again.  piece o' cake.  be\n        // sure to move 800-test (obsolete) and range computations\n        // into the per-sample loop, and close it when it's all\n        // finished (EOF).\n        // no data read?  return a null, i suppose\n        if (s.data.isEmpty()) {\n            s = null;\n            // this is the other end of the super-subtle bug.  load()\n            // was expecting a wfte!\n            return;\n        }\n        // the 800-rule\n        s.guessIndexed();\n        // set range\n        s.range = new Range(start, s.data.size());\n    }\n\n    // -------------------- end composite loader --------------------\n    // ------------------------ start saver -------------------------\n    private void saveFirstLine(Sample s, BufferedWriter w) throws IOException {\n        StringBuffer line1 = new StringBuffer((String) s.meta.get(\"title\"));\n        line1.ensureCapacity(86);\n        if (line1.length() > 80) {\n            line1 = new StringBuffer(line1.substring(0, 80));\n        } else {\n            int oldEnd = line1.length();\n            line1.setLength(80);\n            for (int i = oldEnd; i < 80; i++) line1.setCharAt(i, ' ');\n        }\n        // relat or absol\n        line1.append(s.isAbsolute() ? \"ABSOL\" : \"RELAT\");\n        // write\n        w.write(line1.toString());\n        w.newLine();\n    }\n\n    // 6-digit code\n    private String make6digitCode(Sample s) {\n        String code;\n        if (s.meta.containsKey(\"id\"))\n            code = s.meta.get(\"id\").toString();\n        else\n            code = \"000000\";\n        // ensure exactly 6 chars\n        if (code.length() > 6)\n            code = code.substring(0, 6);\n        else\n            while (code.length() < 6) code += \" \";\n        return code;\n    }\n\n    // write out 6-digit code, then year.\n    private void saveRowHeader(BufferedWriter w, Sample s, String code, int yearWidth, Year y) throws IOException {\n        // don't print the decade for the first one\n        String prefix;\n        if (y.compareTo(s.range.getStart()) < 0)\n            prefix = s.range.getStart().toString();\n        else\n            prefix = y.toString();\n        while (prefix.length() < yearWidth) prefix = \" \" + prefix;\n        w.write(code + prefix);\n    }\n\n    protected void saveData(Sample s, BufferedWriter w) throws IOException {\n        // punchcard formats like tucson generally can't handle BC (we\n        // might not save it with the range it's date to, since tucson\n        // can't handle BC years -- so this will often (but not\n        // always) be set to s.range.)\n        Range r = computeRange(s);\n        // start and end years\n        Year start = r.getStart();\n        Year end = r.getEnd();\n        // 6-digit code which starts each line\n        String code = make6digitCode(s);\n        // if it's summed, we print spaces instead of [1]'s later\n        boolean isSummed = s.isSummed();\n        boolean isProcessed = s.isIndexed() || s.isSummed();\n        // start year; processed files always start on the decade\n        Year y = start;\n        if (isProcessed)\n            y = y.add(-start.column());\n        for (; ; ) {\n            // row header\n            if (y.column() == 0 || (y.equals(start) && !isProcessed))\n                saveRowHeader(w, s, code, (isProcessed ? 4 : 6), y);\n            // out of range (fixme: is isProcessed really needed here?)\n            if (y.compareTo(end) > 0 || (isProcessed && y.compareTo(start) < 0)) {\n                if (!isProcessed) {\n                    // \"   999\", and STOP\n                    w.write(\"   999\");\n                    break;\n                } else {\n                    // \"9990   \" or \"9990  0\"\n                    w.write(isSummed ? \"9990  0\" : \"9990   \");\n                }\n            } else {\n                // in range\n                // data: \"%4d\" / %6d\n                w.write(StringUtils.leftPad(s.data.get(y.diff(start)).toString(), (isProcessed ? 4 : 6)));\n                // count: \"%3d\" (right-align)\n                if (isSummed)\n                    w.write(StringUtils.leftPad(s.count.get(y.diff(start)).toString(), 3));\n                else if (// which is really isIndexed\n                isProcessed)\n                    w.write(\"   \");\n            }\n            // processed files end only after 9cols+eoln\n            if (isProcessed && y.compareTo(end) > 0 && y.column() == 9)\n                break;\n            // eoln\n            if (y.column() == 9)\n                w.newLine();\n            // inc\n            y = y.add(+1);\n        }\n        w.newLine();\n    }\n\n    // make sure this sample's range doesn't go BC.\n    // simply flagging an error is dumb. why yell at the user for having data\n    // that exceeds the capabilities of this format?\n    // better:\n    // -- if start>=1, use range as-is\n    // -- if start+8000>=1, use range+8000 (some labs do this, right?)\n    // -- if even that doesn't work, just start at 1001\n    private Range computeRange(Sample s) {\n        Year start = s.range.getStart();\n        // if it's AD-only, we're fine\n        if (start.compareTo(new Year(1)) >= 0)\n            return s.range;\n        // if adding 8000 makes it AD, do that\n        if (start.add(8000).compareTo(new Year(1)) >= 0)\n            return s.range.redateBy(8000);\n        // ouch.  just start it at 1001.\n        return s.range.redateStartTo(new Year(1001));\n    }\n\n    public void save(Sample s, BufferedWriter w) throws IOException {\n        // first line, then data\n        saveFirstLine(s, w);\n        saveData(s, w);\n    }\n}\n",
		"id": "/EvoSuiteBenchmark/35_corina/src/main/java/corina/formats/Tucson.java",
		"test_prompt": "// TucsonTest.java\n// This file is part of Corina.\n//\n// Corina is free software; you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation; either version 2 of the License, or\n// (at your option) any later version.\n//\n// Corina is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Corina; if not, write to the Free Software\n// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n//\n// Copyright 2001 Ken Harris <kbh7@cornell.edu>\n//\npackage corina.formats;\n\nimport corina.Year;\nimport corina.Range;\nimport corina.Sample;\nimport corina.util.StringUtils;\nimport corina.ui.I18n;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.util.HashMap;\nimport java.io.BufferedReader;\nimport java.io.BufferedWriter;\nimport java.io.IOException;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link Tucson}.\n* It contains ten unit test cases for the {@link Tucson#load(BufferedReader)} method.\n*/\nclass TucsonTest {"
	},
	{
		"original_code": "// Spreadsheet.java\n//\n// This file is part of Corina.\n//\n// Corina is free software; you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation; either version 2 of the License, or\n// (at your option) any later version.\n//\n// Corina is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Corina; if not, write to the Free Software\n// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n//\n// Copyright 2003 Ken Harris <kbh7@cornell.edu>\n//\npackage corina.formats;\n\nimport corina.Year;\nimport corina.Range;\nimport corina.Sample;\nimport corina.Element;\nimport corina.ui.I18n;\nimport java.io.BufferedReader;\nimport java.io.BufferedWriter;\nimport java.io.IOException;\nimport java.util.ArrayList;\nimport java.util.List;\n\n/**\n *    A file format for exporting several datasets to a spreadsheet.\n *\n *    <p>This format exports any number of datasets (the elements of a\n *    sample) into a text file suitable for loading in a spreadsheet.\n *    Once in the spreadsheet, you can easily graph or manipulate them\n *    using the spreadsheet's facilities.  You can use this if you want\n *    to try out a new way of looking at the data, and know how to use a\n *    spreadsheet, but don't know how to hack Corina.</p>\n *\n * <pre>\n * Year      Sample A  Sample B  Sample C\n * 1001                30        96\n * 1002      49        86        69\n * 1003      22        42\n * </pre>\n *\n *    <p>There are tabs between each column, and newlines after each row.</p>\n *\n *    <p>You don't even need to save this to a file; remember, the\n *    export-dialog has a \"Copy\" button, so you can simply copy the\n *    spreadsheet format and paste it into your spreadsheet.</p>\n *\n *    <h2>Left to do</h2>\n *    <ul>\n *      <li>i18n -- 2 ioe's (also, I18n should be in util, not ui, right?)\n *      <li>if you can't load one of them, don't fail everything, just skip it\n *          (or: put its filename there, along with \"can't load\" in cell 1)\n *      <li>future: allow loading spreadsheet format files?\n *    </ul>\n *\n *    @author Ken Harris &lt;kbh7 <i style=\"color: gray\">at</i> cornell <i style=\"color: gray\">dot</i> edu&gt;\n *    @version $Id: Spreadsheet.java,v 1.2 2006/08/13 04:36:37 lucasmo Exp $\n */\npublic class Spreadsheet implements Filetype, PackedFileType {\n\n    /**\n     *       Make a new spreadsheet-saving Filetype.\n     */\n    public Spreadsheet() {\n        // do nothing -- (only here for the javadoc tag)\n    }\n\n    /**\n     *       Throw a WrongFiletypeException; spreadsheet format is\n     *       write-only.\n     *\n     *       (This should never get called.)\n     *\n     *       @return never returns\n     *       @exception WrongFiletypeException every time\n     */\n    public Sample load(BufferedReader r) throws IOException {\n        throw new WrongFiletypeException();\n    }\n\n    public String toString() {\n        return I18n.getText(\"format.spreadsheet\");\n    }\n\n    /**\n     *       Return the extension \".TXT\".  I don't know what format\n     *       spreadsheets normally expect, but it's just a text file, so\n     *       I'll use this for now.\n     *\n     *       @return the string \".TXT\"\n     */\n    public String getDefaultExtension() {\n        return \".TXT\";\n    }\n\n    // save\n    // deprecated! this is a packed sample format!\n    public void save(Sample s, BufferedWriter w) throws IOException {\n        // verify it's a master\n        if (s.elements == null)\n            throw new IOException(\"Spreadsheet format is only available \" + \"for summed samples with Elements\");\n        // load all the samples into a list\n        List slist = new ArrayList();\n        for (int i = 0; i < s.elements.size(); i++) {\n            try {\n                slist.add(((Element) s.elements.get(i)).load());\n            } catch (IOException ioe) {\n                String filename = ((Element) s.elements.get(i)).getFilename();\n                throw new IOException(\"Can't load element \" + filename);\n            }\n        }\n        // and pass them to savesamples\n        saveSamples(slist, w);\n    }\n\n    // for PackedFileType\n    public void saveSamples(List sl, BufferedWriter w) throws IOException {\n        // load all the elements into a buffer\n        int n = sl.size();\n        Range r = null;\n        // make range a union of all the ranges.\n        for (int i = 0; i < n; i++) {\n            if (r == null)\n                r = ((Sample) sl.get(i)).range;\n            else\n                r = r.union(((Sample) sl.get(i)).range);\n        }\n        // write header\n        w.write(I18n.getText(\"year\"));\n        for (int i = 0; i < n; i++) w.write(\"\\t\" + ((Sample) sl.get(i)).meta.get(\"title\"));\n        w.newLine();\n        // save line(=year)-at-a-time\n        for (Year y = r.getStart(); y.compareTo(r.getEnd()) <= 0; y = y.add(1)) {\n            // write year\n            w.write(y.toString());\n            // write each datum for this year\n            for (int i = 0; i < n; i++) {\n                // tab\n                w.write(\"\\t\");\n                Sample s = (Sample) sl.get(i);\n                // data[y]\n                if (s.range.contains(y)) {\n                    Year start = s.range.getStart();\n                    int index = y.diff(start);\n                    w.write(s.data.get(index).toString());\n                }\n            }\n            // end-of-line\n            w.newLine();\n        }\n    }\n}\n",
		"id": "/EvoSuiteBenchmark/35_corina/src/main/java/corina/formats/Spreadsheet.java",
		"test_prompt": "// SpreadsheetTest.java\n// This file is part of Corina.\n//\n// Corina is free software; you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation; either version 2 of the License, or\n// (at your option) any later version.\n//\n// Corina is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Corina; if not, write to the Free Software\n// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n//\n// Copyright 2003 Ken Harris <kbh7@cornell.edu>\n//\npackage corina.formats;\n\nimport corina.Year;\nimport corina.Range;\nimport corina.Sample;\nimport corina.Element;\nimport corina.ui.I18n;\nimport java.io.BufferedReader;\nimport java.io.BufferedWriter;\nimport java.io.IOException;\nimport java.util.ArrayList;\nimport java.util.List;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link Spreadsheet}.\n* It contains ten unit test cases for the {@link Spreadsheet#load(BufferedReader)} method.\n*/\nclass SpreadsheetTest {"
	},
	{
		"original_code": "// Corina.java\n//\n// This file is part of Corina.\n//\n// Corina is free software; you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation; either version 2 of the License, or\n// (at your option) any later version.\n//\n// Corina is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Corina; if not, write to the Free Software\n// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n//\n// Copyright 2001 Ken Harris <kbh7@cornell.edu>\n//\npackage corina.formats;\n\nimport corina.Year;\nimport corina.Range;\nimport corina.Sample;\nimport corina.Element;\nimport corina.Weiserjahre;\nimport corina.core.App;\nimport corina.gui.Bug;\nimport corina.util.StringUtils;\nimport corina.ui.I18n;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.io.StreamTokenizer;\nimport java.io.BufferedWriter;\nimport java.io.BufferedReader;\nimport java.io.IOException;\n\n/**\n *   Mecki Pohl's original (MS-DOS) Corina format.\n *\n *   <p>A Corina file contains yearly data (ring width and number of\n *   samples for that year), some fixed metadata, and optionally\n *   weiserjahre data and a listing of element samples (for summed\n *   samples).</p>\n *\n *   <p>The title comes first, on a line by itself, followed by a blank\n *   line.  The title is repeated later, so this is only to make it\n *   easier for people or external programs (like `head -1`) to read the\n *   title.</p>\n *\n *   <p>The metadata section comes next.  The syntax is <code>;TAG\n *   value</code>.  Tags are all uppercase.  Their order is fixed.  Some\n *   values are terminated by a newline, others by the next\n *   semicolon.</p>\n *\n *   <p>Valid tags, and their internal names, are ID, NAME, DATING,\n *   UNMEAS_PRE, UNMEAS_POST, COMMENTS, COMMENTS2, TYPE, SPECIES,\n *   SAPWOOD, PITH, TERMINAL, CONTINUOUS, QUALITY, FORMAT, INDEX_TYPE,\n *   RECONCILED</p>\n *\n *   On disk, they're stored all-caps; in memory, they're lower-case.\n *   There also exists one special case: \"NAME\" on disk is \"title\" in\n *   memory.\n *\n *   <p>Actually, I lied; there's a second special case now.  Originally\n *   there was both COMMENTS and COMMENTS2 on-disk and in-memory, but\n *   eventually people wanted to type more than 2 lines of comments.\n *   The new semi-backwards-compatible way is: any number of lines of\n *   comments are stored in memory under simply COMMENTS (with embedded\n *   newlines), and on disk as COMMENTS, COMMENTS2, COMMENTS3, ... as\n *   needed.</p>\n *\n *   The order of the tags and position of newlines is as follows:\n *\n *   <pre>\n *   // -- sample meta section (WRITEME)\n *   </pre>\n *\n *   // -- description of tags: index_type, ...\n *\n *   <h3>Data Section</h3>\n *\n *   <p>Every sample has a data section.  It starts with the line:</p>\n *\n *   <pre>\n *   ;DATA\n *   </pre>\n *\n *   <p>(There are 9 spaces after the A.  Don't ask.)</p>\n *\n *   WRITE ME\n *\n *   <p>The data section has a few quirks:</p>\n *\n *   <ul>\n *\n *     <li>All files have count data, even raw samples.  Unfortunately\n *     the only way to tell if it's a summed sample is to check for the\n *     presense of Weiserjahre, Elements, or a count value greater than\n *     1.  When loading a Corina file, therefore, it has to load all the\n *     count values, and then throw them out if it turns out to not be\n *     summed.\n *\n *     <li>The last line of count data are shifted to the left by 4\n *     characters.  (Again, don't ask.)\n *\n *     <li>The count value for the terminating 9990 value is the same as\n *     the count value for the last measured year, though this has no\n *     real meaning.\n *\n *   </ul>\n *\n *   <h3>Elements Section</h3>\n *\n *   <p>The Elements section is also optional; only summed samples have\n *   it.  It starts with the line \";ELEMENTS \".  Each line consists of a\n *   complete filename, preceded by a \"*\" if the sample is <i>not</i>\n *   enabled.  It ends when the next section, Weiserjahre, begins.</p>\n *\n *   <h3>Weiserjahre Section</h3>\n *\n *   <p>The Weiserjahre section is optional; only summed samples have it.  FINISH ME.</p>\n *\n *   <h3>Author Section</h3>\n *\n *   <p>The final tag in a file is the author's name.  The format is:</p>\n *\n *   <pre>\n *   ~ author's name\n *   </pre>\n *\n *   <p>Everything after this line is ignored, hence, the <code>~</code>\n *   character is not allowed anywhere in the Corina file.</p>\n *\n *   <h3>Modifications</h3>\n *\n *   <p>There are a couple base features that the Corina filetype can't\n *   handle.  I actually implement a superset of the original Corina\n *   filetype.  It should be 100% backwards-compatible with the original\n *   Corina program, though of course Corina can't take advantage of\n *   these features, and the extra data will be lost if it is loaded and\n *   re-saved in Corina.</p>\n *\n *   <p>The additional features are:\n *\n *   <ul>\n *\n *     <li>Any number of comment lines.  The Sample class stores\n *     comments as one long String, possibly with newlines, and this\n *     class saves them as <code>;COMMENTS</code>,\n *     <code>;COMMENTS2</code>, <code>;COMMENTS3</code>, etc.  MS-DOS\n *     Corina will only recognize the first two such lines.\n *\n *   </ul>\n *\n *   <h3>Notes</h3>\n *\n *   <p>This loader is more forgiving than (MS-DOS) Corina's.  When\n *   reading the metadata tags, the case of the ;-tags doesn't matter,\n *   nor does their order or position of newlines.</p>\n *\n *   <p>This is one of the longest files in Corina, by quite a bit (40%\n *   bigger than all of the crossdating algorithms combined right now),\n *   though it's significantly shorter than it once was\n *   (StreamTokenizers can be more trouble than they're worth).  I'm not\n *   concerned about the length alone, except for the fact that it's\n *   this long and complex and it still doesn't do everything we\n *   want, hence the experiments with XML.</p>\n *\n *   @author Ken Harris &lt;kbh7 <i style=\"color: gray\">at</i> cornell <i style=\"color: gray\">dot</i> edu&gt;\n *   @version $Id: Corina.java,v 1.3 2006/07/12 03:27:55 lucasmo Exp $\n */\npublic class Corina implements Filetype {\n\n    public String toString() {\n        return I18n.getText(\"format.corina\");\n    }\n\n    // read chars until a space char, or eof.\n    // if EOF, throw a WFTE; otherwise, return those chars as a string.\n    // (enters when the reader is just beyond the ';', leaves the\n    // reader just beyond the ' ' on return)\n    private String loadTag(BufferedReader r) throws IOException {\n        StringBuffer name = new StringBuffer();\n        int c = r.read();\n        while (c != ' ') {\n            if (c == -1)\n                // end-of-file before ' ' occurs (otherwise no termination)\n                throw new WrongFiletypeException();\n            name.append((char) c);\n            c = r.read();\n        }\n        return name.toString();\n    }\n\n    // enters with the reader just beyond the ' ' (on the first char\n    // of the value), exits with the reader beyond the value (looking\n    // at a ';', or EOLN, or some such);\n    private void loadMeta(Sample s, BufferedReader r, String tag) throws IOException {\n        StringBuffer buf = new StringBuffer();\n        // snarf up tag name\n        r.mark(1);\n        char c = (char) r.read();\n        while (c != '\\n' && c != '\\r' && c != ';') {\n            buf.append(c);\n            r.mark(1);\n            int cc = r.read();\n            if (cc == -1)\n                throw new IOException(\"end-of-file reached in middle of metadata!\");\n            c = (char) cc;\n        }\n        String value = buf.toString();\n        // if read a ';', push back\n        if (c == ';')\n            r.reset();\n        // if read a '\\n' or '\\r', keep reading EOLNs\n        while (c == '\\n' || c == '\\r') {\n            r.mark(1);\n            c = (char) r.read();\n        }\n        r.reset();\n        // if empty, discard\n        if (value.length() == 0)\n            return;\n        // special cases: \"PITH +\" => \"PITH P\", \"TYPE U\" => \"TYPE ?\"\n        if (tag.equals(\"PITH\") && value.equals(\"+\"))\n            value = \"P\";\n        if (tag.equals(\"TYPE\") && value.equals(\"U\"))\n            value = \"?\";\n        // try to squeeze into an Integer\n        Object o;\n        try {\n            o = new Integer(value);\n        } catch (NumberFormatException nfe) {\n            o = value;\n        }\n        // store (tag,value) in hash\n        if (// ...Mecki likes \"TITLE\"...\n        tag.equals(\"NAME\"))\n            tag = \"TITLE\";\n        if (tag.startsWith(\"COMMENTS\")) {\n            // append comments\n            String soFar = (String) s.meta.get(\"comments\");\n            s.meta.put(\"comments\", soFar == null ? value : soFar + '\\n' + value);\n        } else {\n            // store value\n            s.meta.put(tag.toLowerCase(), o);\n        }\n    }\n\n    private void loadData(Sample s, StreamTokenizer t) throws IOException {\n        Year start;\n        // we can ignore whitespace here\n        t.whitespaceChars(' ', ' ');\n        // assume for now that we'll need to save the count, because\n        // we don't know yet.  we'll delete this when the whole load\n        // is done if it turns out to be a raw sample.\n        s.count = new ArrayList();\n        // read start\n        int x = t.nextToken();\n        start = new Year((int) t.nval);\n        t.pushBack();\n        loop: while (true) {\n            boolean stop = false;\n            int decade, years;\n            // read a decade of data\n            x = t.nextToken();\n            if (x == StreamTokenizer.TT_EOF)\n                // this is weird\n                throw new IOException(\"End-of-file reached in data section\");\n            decade = (int) t.nval;\n            years = 0;\n            int indexStart = (decade % 10 < 0 ? decade % 10 + 10 : decade % 10);\n            int indexStop = 10;\n            for (int j = indexStart; j < indexStop; j++) {\n                x = t.nextToken();\n                int width = (int) t.nval;\n                years++;\n                if (width == 9990) {\n                    stop = true;\n                    break;\n                }\n                s.data.add(new Integer(width));\n            }\n            // read a decade of counts\n            for (int j = 0; j < years; j++) {\n                // go to previously counted amount -- ignore 9990's count?\n                // [\n                x = t.nextToken();\n                // count\n                x = t.nextToken();\n                int count = (int) t.nval;\n                if (stop && j == years - 1)\n                    break loop;\n                // ]\n                x = t.nextToken();\n                s.count.add(new Integer(count));\n            }\n        }\n        // done\n        t.wordChars(' ', ' ');\n        s.range = new Range(start, s.data.size());\n    }\n\n    // in the original version of loadElements, i called r.mark(120),\n    // readLine(), check for startsWith(\";\") -> break, then parse.\n    // that assumes no filename is longer than 120 characters, which\n    // is pretty long, but i'd rather not have any static\n    // limitations. so i mark()/reset() every time.  it might be a\n    // little slower, but correctness takes precedence!\n    // -- but ken, what about the FOUS's?\n    // -- Files Of Unusual Size?  i don't think they exist...\n    private void loadElements(Sample s, BufferedReader r) throws IOException {\n        // create elements\n        s.elements = new ArrayList();\n        for (; ; ) {\n            // check first char for ';'-ness\n            r.mark(2);\n            char firstChar = (char) r.read();\n            r.reset();\n            if (firstChar == ';')\n                break;\n            // read line, ignoring if empty\n            String line = r.readLine();\n            if (line.length() == 0)\n                continue;\n            // add to elements\n            if (// disabled element, if first char is '*'\n            line.charAt(0) == '*')\n                s.elements.add(new Element(line.substring(1), false));\n            else\n                s.elements.add(new Element(line));\n        }\n    }\n\n    private void loadWeiserjahre(Sample s, BufferedReader r) throws IOException {\n        // create wj; add 0/0\n        s.incr = new ArrayList();\n        s.decr = new ArrayList();\n        s.incr.add(new Integer(0));\n        s.decr.add(new Integer(0));\n        // \";weiserjahre\" is followed by some spaces -- eat them\n        r.readLine();\n        // read 2 lines to figure out the spacing\n        r.mark(80 * 2 + 20);\n        String line1 = r.readLine();\n        String line2 = r.readLine();\n        r.reset();\n        // easy case: at least 2 years on line1, just diff 'em.\n        int slash1 = line1.indexOf('/');\n        int slash2 = line1.indexOf('/', slash1 + 1);\n        int numDigits = 0;\n        if (slash2 != -1) {\n            numDigits = (slash2 - slash1 - 1) / 2;\n        }\n        // ok, maybe there's only 1 slash on the first line, so try the second line\n        if (slash2 == -1) {\n            slash1 = line2.indexOf('/');\n            slash2 = line2.indexOf('/', slash1 + 1);\n            if (slash2 != -1) {\n                numDigits = (slash2 - slash1 - 1) / 2;\n            }\n            // ok, maybe there's exactly 1 slash in each of the first 2 lines.  *groan*\n            if (slash2 == -1) {\n                // super-special case: read inc/dec from line1, read inc/dec from line2, return.\n                new Bug(new IllegalArgumentException(\"d'oh, i never bothered to implement that.  go hit ken with a stick.\"));\n            }\n        }\n        // number of values left to read\n        int left = s.data.size() - 1;\n        // now just read data until i'm done\n        String line = r.readLine();\n        int col = slash1;\n        while (left > 0) {\n            // end of line, start a new one\n            if (col > line.length()) {\n                line = r.readLine();\n                col = slash1;\n            }\n            // read inc/dec\n            try {\n                String inc = line.substring(col - numDigits, col).trim();\n                String dec = line.substring(col + 1, col + 1 + numDigits).trim();\n                s.incr.add(new Integer(inc));\n                s.decr.add(new Integer(dec));\n            } catch (StringIndexOutOfBoundsException sioobe) {\n                System.out.println(\"line=\" + line);\n                System.out.println(\"numDigits=\" + numDigits);\n                System.out.println(\"col=\" + col);\n                throw new IOException(\"BUG in Corina.java, loadWeiserjahre()\");\n            }\n            left--;\n            // next column\n            col += (slash2 - slash1);\n        }\n    }\n\n    // the reader is just past the '~' character, so just trim what's\n    // left of the line\n    private void loadAuthor(Sample s, BufferedReader r) throws IOException {\n        String author = r.readLine();\n        if (author == null)\n            // is to just end with a ~?\n            return;\n        s.meta.put(\"author\", author.trim());\n    }\n\n    public Sample load(BufferedReader r) throws IOException {\n        // new empty sample\n        Sample s = new Sample();\n        s.meta.clear();\n        // make sure the first line is ok.  i don't strictly need\n        // this, but it's great for checking the filetype (binary\n        // files usually fail this).\n        String firstLine = r.readLine();\n        if (firstLine == null || firstLine.length() > 200)\n            throw new WrongFiletypeException();\n        // top-level tokenizer\n        StreamTokenizer t = new StreamTokenizer(r);\n        t.ordinaryChar(';');\n        t.slashSlashComments(false);\n        t.slashStarComments(false);\n        /*\n\t\t using a streamtokenizer here to read in characters is just\n\t\t plain wrong.  just read the chars!  FIXME.\n\n\t\t (loadData(t) takes the tokenizer -- but can't it be created there?)\n\n\t\t - kbh, 9-jan-2002\n\t\t */\n        // top-level parse of the file\n        boolean dataLoaded = false;\n        for (; ; ) {\n            int x = t.nextToken();\n            if (x == ';') {\n                String tag = loadTag(r);\n                if (tag.equals(\"DATA\")) {\n                    loadData(s, t);\n                    dataLoaded = true;\n                } else if (tag.equals(\"weiserjahre\"))\n                    loadWeiserjahre(s, r);\n                else if (tag.equals(\"ELEMENTS\"))\n                    loadElements(s, r);\n                else\n                    loadMeta(s, r, tag);\n            } else if (x == '~') {\n                loadAuthor(s, r);\n                // author is always last\n                break;\n            } else if (x != StreamTokenizer.TT_EOF) {\n                // no metadata found in 4 lines -> problem\n                if (s.meta.isEmpty() && t.lineno() > 4)\n                    throw new WrongFiletypeException();\n            } else {\n                // (x == StreamTokenizer.TT_EOF)\n                if (// if 3 lines + ;TITLE, it's Corina-format\n                t.lineno() >= 3 && s.meta.containsKey(\"title\"))\n                    throw new IOException(\"Early end-of-file detected (at line \" + t.lineno() + \")\");\n                else\n                    throw new WrongFiletypeException();\n            }\n        }\n        // never got to a ;DATA section?  then it's not a corina file.\n        if (!dataLoaded)\n            throw new WrongFiletypeException();\n        // if this is a raw sample (not summed), delete s.count, which\n        // serves no purpose (it's a List of Integer(1)'s).  first,\n        // make sure there's no WJ or elements.\n        if (!s.hasWeiserjahre() && s.elements == null) {\n            // ok to delete s.count?\n            boolean delete = true;\n            // then make sure the count really is all [1]'s (or [0]'s, i suppose)\n            for (int i = 0; i < s.count.size(); i++) if (((Integer) s.count.get(i)).intValue() > 1) {\n                delete = false;\n                break;\n            }\n            // okay?  now we can delete it.\n            if (delete)\n                s.count = null;\n        }\n        // return\n        return s;\n    }\n\n    // ****************************************\n    // given a tag name \"tag\" (lower-case, as it's stored in meta), if\n    // it exists in the metadata, save it as \";TAG value\", else do\n    // nothing.\n    private void saveTag(Sample s, BufferedWriter w, String tag) throws IOException {\n        // get value, and print it, as long as it's not null\n        Object o = s.meta.get(tag);\n        if (o != null)\n            w.write(\";\" + tag.toUpperCase() + \" \" + o);\n    }\n\n    private void saveMeta(Sample s, BufferedWriter w) throws IOException {\n        if (s.meta.containsKey(\"title\"))\n            w.write(s.meta.get(\"title\").toString());\n        w.newLine();\n        w.newLine();\n        // REFACTOR: except for title/name special case, this would be a lot simpler\n        // as just a list: in lisp, (\"id\" \"title\" \"dating\" \"unmeas_pre\" \"unmeas_post\" 'newline ...)\n        // (so move the special case out to saveTag?)\n        saveTag(s, w, \"id\");\n        if (// special case (!)\n        s.meta.containsKey(\"title\"))\n            w.write(\";NAME \" + s.meta.get(\"title\"));\n        saveTag(s, w, \"dating\");\n        saveTag(s, w, \"unmeas_pre\");\n        saveTag(s, w, \"unmeas_post\");\n        w.newLine();\n        saveTag(s, w, \"filename\");\n        w.newLine();\n        saveComments(s, w);\n        saveTag(s, w, \"type\");\n        saveTag(s, w, \"species\");\n        saveTag(s, w, \"format\");\n        saveTag(s, w, \"sapwood\");\n        saveTag(s, w, \"pith\");\n        w.newLine();\n        saveTag(s, w, \"terminal\");\n        saveTag(s, w, \"continuous\");\n        saveTag(s, w, \"quality\");\n        w.newLine();\n        saveTag(s, w, \"index_type\");\n        saveTag(s, w, \"reconciled\");\n        w.newLine();\n    }\n\n    // save any number of ;COMMENTS fields, for each line of text\n    private void saveComments(Sample s, BufferedWriter w) throws IOException {\n        if (s.meta.containsKey(\"comments\")) {\n            // split comments by lines\n            // BUG: won't this fail if the comments line is a Number?\n            String[] comments = StringUtils.splitByLines((String) s.meta.get(\"comments\"));\n            // the comment number, starting at 1\n            int n = 1;\n            for (int i = 0; i < comments.length; i++) {\n                String line = comments[i];\n                // if empty, skip it: old programs can't handle \";COMMENTS \\n\"\n                if (line.length() > 0) {\n                    // \";COMMENTS(n)\"\n                    String tag = \";COMMENTS\";\n                    if (n > 1)\n                        tag += n;\n                    // write line, replacing ';' with ','\n                    w.write(tag + \" \" + line.replace(';', ','));\n                    w.newLine();\n                    // next line\n                    n++;\n                }\n            }\n            /*\n\t\t\t eventually, old programs will no longer be in use, so\n\t\t\t \";COMMENTS \\n\" will be ok.  and taking out that oddity\n\t\t\t makes the code simpler.  i should do that...\n\t\t\t */\n        }\n    }\n\n    // save the ;DATA section\n    protected void saveData(Sample s, BufferedWriter w) throws IOException {\n        w.write(\";DATA         \");\n        w.newLine();\n        // clone the data, so i can add the infamous \"9990\".  (i can't\n        // modify the data in-place, because that could cause all\n        // sorts of problems, and it would be a huge mess to handle it\n        // in a special case.)\n        List data = new ArrayList();\n        data.addAll(s.data);\n        data.add(new Integer(9990));\n        // clone and update the range, too\n        Range range = new Range(s.range.getStart(), s.range.getEnd().add(1));\n        // count for 9990 is the same as the last count, for reasons i\n        // don't claim to understand.\n        List count = null;\n        if (s.count != null) {\n            count = new ArrayList();\n            count.addAll(s.count);\n            count.add(count.get(count.size() - 1));\n        }\n        // row ends, for count info\n        Year rleft = null, rright;\n        // loop through years\n        for (Year y = range.getStart(); y.compareTo(range.getEnd()) <= 0; y = y.add(+1)) {\n            // year\n            if (range.startOfRow(y)) {\n                w.write(StringUtils.leftPad(y.toString(), 5));\n                rleft = y;\n            }\n            // pad the first row\n            if (y.equals(range.getStart()) || y.isYearOne())\n                for (int i = 0; i < y.column(); i++) w.write(\"      \");\n            // data: pad to 6 (\"%-6d\")\n            w.write(StringUtils.leftPad(data.get(y.diff(range.getStart())).toString(), 6));\n            // (FIXME: dies if data[i] = null -- so don't let nulls get here!)\n            // newline\n            if (range.endOfRow(y)) {\n                w.newLine();\n                rright = y;\n                // last row is 4 cols to the left.  don't ask why.\n                // (3,7)\n                w.write(rright.equals(range.getEnd()) ? \"   \" : \"       \");\n                // count (in brackets), for the line of data i just wrote\n                if (rleft.equals(range.getStart()) || rleft.isYearOne())\n                    for (int i = 0; i < rleft.column(); i++) // (6)\n                    w.write(\"      \");\n                if (count == null) {\n                    String c = StringUtils.leftPad(\"[1]\", 6);\n                    for (Year y1 = rleft; y1.compareTo(rright) <= 0; y1 = y1.add(+1)) {\n                        w.write(c);\n                    }\n                } else {\n                    for (Year y1 = rleft; y1.compareTo(rright) <= 0; y1 = y1.add(+1)) {\n                        String c = count.get(y1.diff(range.getStart())).toString();\n                        c = StringUtils.leftPad(\"[\" + c + \"]\", 6);\n                        w.write(c);\n                    }\n                }\n                w.newLine();\n            }\n        }\n        // blank line after s.data\n        w.newLine();\n    }\n\n    private void saveElements(Sample s, BufferedWriter w) throws IOException {\n        if (s.elements == null)\n            return;\n        // if relative paths are on, save elements with relative paths!\n        boolean relativepath = Boolean.valueOf(App.prefs.getPref(\"corina.dir.relativepaths\")).booleanValue();\n        w.write(\";ELEMENTS \");\n        w.newLine();\n        for (int i = 0; i < s.elements.size(); i++) {\n            // if disabled, write '*' before filename\n            Element el = (Element) s.elements.get(i);\n            w.write((el.isActive() ? \"\" : \"*\") + (relativepath ? el.getRelativeFilename() : el.getFilename()));\n            w.newLine();\n        }\n    }\n\n    private void saveWeiserjahre(Sample s, BufferedWriter w) throws IOException {\n        // if no wj, do nothing\n        if (!s.hasWeiserjahre())\n            return;\n        w.write(\";weiserjahre   \");\n        w.newLine();\n        for (Year y = s.range.getStart(); y.compareTo(s.range.getEnd()) < 0; y = y.add(1)) {\n            // year: \"%5d\"\n            if (s.range.startOfRow(y))\n                w.write(StringUtils.leftPad(y.toString(), 5));\n            // first is 0/0, so add 1 to index\n            int i = y.diff(s.range.getStart()) + 1;\n            // always use '/' in corina files\n            w.write(Weiserjahre.toStringFixed(s, i, 9, \"/\"));\n            // newline\n            if (y.column() == 9 || y.equals(s.range.getEnd().add(-1)))\n                w.newLine();\n        }\n    }\n\n    private void saveAuthor(Sample s, BufferedWriter w) throws IOException {\n        w.write(\"~\");\n        String author = (String) s.meta.get(\"author\");\n        if (author != null)\n            w.write(\" \" + author);\n        w.newLine();\n    }\n\n    public void save(Sample s, BufferedWriter w) throws IOException {\n        saveMeta(s, w);\n        saveData(s, w);\n        saveElements(s, w);\n        saveWeiserjahre(s, w);\n        saveAuthor(s, w);\n    }\n\n    // default extension -- well, there isn't really one...\n    public String getDefaultExtension() {\n        return \".RAW\";\n    }\n}\n",
		"id": "/EvoSuiteBenchmark/35_corina/src/main/java/corina/formats/Corina.java",
		"test_prompt": "// CorinaTest.java\n// This file is part of Corina.\n//\n// Corina is free software; you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation; either version 2 of the License, or\n// (at your option) any later version.\n//\n// Corina is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Corina; if not, write to the Free Software\n// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n//\n// Copyright 2001 Ken Harris <kbh7@cornell.edu>\n//\npackage corina.formats;\n\nimport corina.Year;\nimport corina.Range;\nimport corina.Sample;\nimport corina.Element;\nimport corina.Weiserjahre;\nimport corina.core.App;\nimport corina.gui.Bug;\nimport corina.util.StringUtils;\nimport corina.ui.I18n;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.io.StreamTokenizer;\nimport java.io.BufferedWriter;\nimport java.io.BufferedReader;\nimport java.io.IOException;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link Corina}.\n* It contains ten unit test cases for the {@link Corina#load(BufferedReader)} method.\n*/\nclass CorinaTest {"
	},
	{
		"original_code": "// HTML.java\n//\n// This file is part of Corina.\n//\n// Corina is free software; you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation; either version 2 of the License, or\n// (at your option) any later version.\n//\n// Corina is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Corina; if not, write to the Free Software\n// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n//\n// Copyright 2001 Ken Harris <kbh7@cornell.edu>\n//\npackage corina.formats;\n\nimport corina.Year;\nimport corina.Range;\nimport corina.Sample;\nimport corina.Element;\nimport corina.Weiserjahre;\nimport corina.MetadataTemplate;\nimport corina.MetadataTemplate.Field;\nimport corina.ui.I18n;\nimport java.io.BufferedReader;\nimport java.io.BufferedWriter;\nimport java.io.IOException;\nimport java.util.List;\nimport java.util.Iterator;\nimport java.text.DecimalFormat;\n\n/**\n *   Pretty-print HTML export.\n *\n *   <p>Obviously, there's no way to import an HTML file (or reason\n *   you'd want to), but this is useful as a simple way to print a\n *   sample, an easy way to export into a modern word processor (like\n *   AbiWord or Microsoft Word), and as an easy way to put dendro data\n *   on the web, should that ever be desireable.</p>\n *\n *   <p>If anybody ever gets around to adding options to the various\n *   exporters, there should be options on this class for which sections\n *   to output (data, metadata, Weiserjahre, etc.), because apparently\n *   for publication they only want the data/count section.  Also, give\n *   the option of printing out all metadata fields, or only the\n *   non-null ones.</p>\n *\n *   <p>If, in a few years, everybody is using an XML-capable browser\n *   (like <a href=\"http://www.mozilla.org\">Mozilla</a>), and the\n *   browser people have decided on a stylesheet system (XSLTT, CSS1,\n *   CSS2, etc.), this can be replaced completely with XML, which will\n *   be saveable <i>and</i> loadable, and still browser-viewable with\n *   stylesheets.  The user can even edit the stylesheet, thus giving\n *   him more control over the output.  Basically XML is a big win for\n *   everybody, if the browser writers and users can get their acts\n *   together.</p>\n *\n *   <p>(This class is unfinished, because it's not a high priority at\n *   this point.)</p>\n *\n *   <h2>Left to do</h2>\n *\n *   <ul>\n *\n *     <li>make one-big-table into many-smaller-tables, so old browsers\n *     can render it more quickly (10 rows per table?)</li>\n *\n *     <li>internationalize the rest of it; 7 keys left to\n *     extract/translate: Key/Value(for meta), Radius/Average ring\n *     width:, cm, Total number of rings, Total number of elements. --\n *     can i use capitalization on total_radius reliably?</li>\n *\n *     <li>print a header for the elements table?\n *\n *     <li>use the real element summaries, to save having to load them\n *     from disk again</li>\n *\n *     <li>highlight significant Weiserjahre intervals, like crossdating\n *     grids do</li>\n *\n *     <li>put the count next to the WJ, and print only a histogram next\n *     to the data?</li>\n *\n *     <li>in the metadata, replace newlines (and angle brackets, and\n *     ampersands) with \"&lt;br /&gt;\" (the comments field often uses\n *     this) (is there a standard ->HTML converter?  maybe not, but i\n *     can write a StringUtils.escapeForHTML() method.)</li>\n *\n *     <li>bug: it doesn't export the BC/AD boundary correctly, I\n *     believe\n *\n *     <li>bug: what if the title of a sample is \"<font color=\\\"red\\\">\"?\n *     do i need to sanitize all user-entered text here?\n *\n *     <li>bug: if the writer failed (which will probably never happen,\n *     but technically could) in printElements() (and possibly\n *     elsewhere) bad things could happen</li>\n *   </ul>\n *\n *   @author Ken Harris &lt;kbh7 <i style=\"color: gray\">at</i> cornell <i style=\"color: gray\">dot</i> edu&gt;\n *   @version $Id: HTML.java,v 1.1 2004/01/18 17:58:11 aaron Exp $\n */\npublic class HTML implements Filetype {\n\n    public String toString() {\n        return I18n.getText(\"format.html\");\n    }\n\n    public String getDefaultExtension() {\n        return \".html\";\n    }\n\n    private void printRawData(Sample s, BufferedWriter w) throws IOException {\n        w.write(\"<table border=\\\"0\\\" width=\\\"100%\\\">\");\n        w.newLine();\n        w.write(\"<tr>\");\n        w.newLine();\n        w.write(\"  <th align=\\\"left\\\" width=\\\"*\\\">\" + I18n.getText(\"year\") + \"</th>\");\n        for (int i = 0; i < 10; i++) w.write(\"<th align=\\\"right\\\" width=\\\"*\\\">\" + i + \"</th>\");\n        w.write(\"</tr>\");\n        w.newLine();\n        // BUG: this probably breaks at BC/AD boundary\n        Range r = s.range;\n        for (Year y = r.getStart(); y.compareTo(r.getEnd()) <= 0; y = y.add(+1)) {\n            if (s.range.startOfRow(y)) {\n                w.write(\"  <tr><th align=\\\"left\\\">\" + y + \"</th>\");\n                w.newLine();\n                w.write(\"  \");\n            }\n            if (y.equals(s.range.getStart()))\n                for (int i = 0; i < s.range.getStart().column(); i++) w.write(\"<td align=\\\"right\\\"></td>\");\n            int index = y.diff(s.range.getStart());\n            w.write(\"<td align=\\\"right\\\">\" + s.data.get(index) + \"</td>\");\n            // end-of-line or end-of-sample\n            if (s.range.endOfRow(y)) {\n                w.write(\"</tr>\");\n                w.newLine();\n            }\n        }\n        w.write(\"</table>\");\n        w.newLine();\n    }\n\n    private void printWJ(Sample s, BufferedWriter w) throws IOException {\n        w.write(\"<table border=\\\"0\\\" width=\\\"60%\\\">\");\n        w.newLine();\n        w.write(\"<tr>\");\n        w.newLine();\n        w.write(\"  <th align=\\\"left\\\" width=\\\"*\\\">\" + I18n.getText(\"year\") + \"</th>\");\n        for (int i = 0; i < 10; i++) w.write(\"<th align=\\\"right\\\" width=\\\"*\\\">\" + i + \"</th>\");\n        w.write(\"</tr>\");\n        w.newLine();\n        Range r = s.range;\n        for (Year y = r.getStart(); y.compareTo(r.getEnd()) <= 0; y = y.add(+1)) {\n            if (r.startOfRow(y)) {\n                w.write(\"  <tr><th align=\\\"left\\\">\" + y + \"</th>\");\n                w.newLine();\n                w.write(\"  \");\n            }\n            if (y.equals(r.getStart()))\n                for (int i = 0; i < r.getStart().column(); i++) w.write(\"<td align=\\\"right\\\"></td>\");\n            int index = y.diff(r.getStart());\n            w.write(\"<td align=\\\"right\\\">\" + Weiserjahre.toString(s, index) + \"</td>\");\n            if (r.endOfRow(y)) {\n                w.write(\"</tr>\");\n                w.newLine();\n            }\n        }\n        w.write(\"</table>\");\n        w.newLine();\n    }\n\n    // return the metadata field |key| from |s|, as a string;\n    // if that metadata field is empty or null, return \"\".\n    private String emptyIfNull(Sample s, String key) {\n        Object value = s.meta.get(key);\n        return (value == null ? \"\" : value.toString());\n    }\n\n    private void printElements(Sample s, BufferedWriter w) throws IOException {\n        // table\n        w.write(\"<table width=\\\"100%\\\">\");\n        w.newLine();\n        // a form!  ... trust me ...\n        w.write(\"<form>\");\n        w.newLine();\n        // a row for each element...\n        for (int i = 0; i < s.elements.size(); i++) {\n            // start row\n            w.write(\"  <tr>\");\n            // load element, and print a summary\n            Element e = (Element) s.elements.get(i);\n            // TODO: use real Element summaries here, in case the\n            // summaries are already loaded!\n            try {\n                Sample sample = e.load();\n                w.write(\"<td><input type=\\\"checkbox\\\" checked=\\\"\" + e.isActive() + \"\\\"/></td>\");\n                w.write(\"<td>\" + emptyIfNull(sample, \"id\") + \"</td>\");\n                w.write(\"<td>\" + sample.meta.get(\"filename\") + \"</td>\");\n                w.write(\"<td>\" + emptyIfNull(sample, \"unmeas_pre\") + \"</td>\");\n                w.write(\"<td>\" + sample.range + \"</td>\");\n                w.write(\"<td>\" + emptyIfNull(sample, \"unmeas_post\") + \"</td>\");\n                w.write(\"<td>\" + emptyIfNull(sample, \"terminal\") + \"</td>\");\n            } catch (IOException ioe) {\n                // uh-oh.  i'm going to ASSUME the load() went bad,\n                // and just print the filename.\n                // (BUG: what if one of the write() calls threw the ioe?)\n                w.write(\"<td></td>\");\n                w.write(\"<td></td>\");\n                w.write(\"<td>\" + e.getFilename() + \"</td>\");\n                w.write(\"<td></td>\");\n                w.write(\"<td></td>\");\n                w.write(\"<td></td>\");\n                w.write(\"<td></td>\");\n            }\n            // end row\n            w.write(\"</tr>\");\n            w.newLine();\n        }\n        // close form, table\n        w.write(\"<form>\");\n        w.newLine();\n        w.write(\"</table>\");\n        w.newLine();\n    }\n\n    private void printSummedData(Sample s, BufferedWriter w) throws IOException {\n        // container table and row\n        w.write(\"<table border=\\\"0\\\" width=\\\"100%\\\">\");\n        w.newLine();\n        w.write(\"<tr>\");\n        w.newLine();\n        // left table\n        w.write(\"<td width=\\\"60%\\\">\");\n        w.newLine();\n        printRawData(s, w);\n        w.write(\"</td>\");\n        w.newLine();\n        // add spacer\n        w.write(\"<td width=\\\"5%\\\"></td>\");\n        w.newLine();\n        // right table\n        w.write(\"<td width=\\\"35%\\\">\");\n        w.newLine();\n        w.write(\"<table border=\\\"0\\\" width=\\\"100%\\\">\");\n        w.newLine();\n        // count\n        w.write(\"<tr>\");\n        w.newLine();\n        w.write(\"<th align=\\\"left\\\" width=\\\"*\\\">\" + I18n.getText(\"year\") + \"</th>\");\n        for (int i = 0; i < 10; i++) w.write(\"<th align=\\\"right\\\" width=\\\"*\\\">\" + i + \"</th>\");\n        w.write(\"</tr>\");\n        w.newLine();\n        Range r = s.range;\n        for (Year y = r.getStart(); y.compareTo(r.getEnd()) <= 0; y = y.add(+1)) {\n            if (s.range.startOfRow(y)) {\n                w.write(\"<tr><th align=\\\"left\\\">\" + y + \"</th>\");\n                w.newLine();\n            }\n            if (y.equals(r.getStart()))\n                for (int i = 0; i < r.getStart().column(); i++) w.write(\"<td></td>\");\n            int index = y.diff(r.getStart());\n            w.write(\"<td align=\\\"right\\\">\" + s.count.get(index) + \"</td>\");\n            if (r.endOfRow(y)) {\n                w.write(\"</tr>\");\n                w.newLine();\n            }\n        }\n        w.write(\"</table>\");\n        w.newLine();\n        // end container\n        w.write(\"</td>\");\n        w.newLine();\n        w.write(\"</tr>\");\n        w.newLine();\n        w.write(\"</table>\");\n        w.newLine();\n    }\n\n    private void printMeta(Sample s, BufferedWriter w) throws IOException {\n        w.write(\"<table border=\\\"0\\\" width=\\\"100%\\\">\");\n        w.newLine();\n        w.write(\"  <tr>\");\n        w.newLine();\n        w.write(\"  <th align=\\\"left\\\">Key</th><th align=\\\"left\\\">Value</th>\");\n        w.newLine();\n        w.write(\"  </tr>\");\n        w.newLine();\n        // get the fields from the MetadataTemplate class -- this\n        // ensures they're in order, and i can get the localized\n        // strings, and descriptions\n        Iterator i = MetadataTemplate.getFields();\n        while (i.hasNext()) {\n            Field f = (Field) i.next();\n            w.write(\"  <tr>\");\n            w.newLine();\n            w.write(\"    <td align=\\\"left\\\">\" + f.getDescription() + \"</td>\");\n            w.newLine();\n            Object v = s.meta.get(f.getVariable());\n            w.write(\"    <td align=\\\"left\\\">\" + (v == null ? \"\" : v) + \"</td>\");\n            w.newLine();\n            w.write(\"  </tr>\");\n            w.newLine();\n        }\n        w.write(\"</table>\");\n        w.newLine();\n    }\n\n    public void save(Sample s, BufferedWriter w) throws IOException {\n        w.write(\"<html>\");\n        w.newLine();\n        w.newLine();\n        w.write(\"<head>\");\n        w.newLine();\n        w.write(\"<title>\" + s + \"</title>\");\n        w.newLine();\n        w.write(\"</head>\");\n        w.newLine();\n        w.newLine();\n        w.write(\"<body bgcolor=\\\"#ffffff\\\" link=\\\"#0000ee\\\" \" + \"vlink=\\\"#551a8b\\\" alink=\\\"#0000ee\\\">\");\n        w.newLine();\n        w.write(\"<h1>\" + s + \"</h1>\");\n        w.newLine();\n        // header\n        if (!s.isIndexed()) {\n            float radius = ((float) s.computeRadius()) / 1000f;\n            float average = radius / (float) s.data.size();\n            DecimalFormat df = new DecimalFormat(\"0.000\");\n            w.write(\"Radius: \" + df.format(radius) + \" cm, \" + \"Average ring width: \" + df.format(average) + \" cm\");\n            w.newLine();\n            w.newLine();\n        }\n        // h2: data (summed, with count, or raw)\n        w.write(\"<h2>\" + I18n.getText(\"tab_data\") + \"</h2>\");\n        w.newLine();\n        if (!s.isSummed())\n            printRawData(s, w);\n        else\n            printSummedData(s, w);\n        w.write(\"<p>Total number of rings: \" + s.countRings() + \"</p>\");\n        w.newLine();\n        if (s.elements != null) {\n            int n = s.elements.size();\n            w.write(\"<p>Total number of elements: \" + n + \"</p>\");\n            w.newLine();\n        }\n        // h2: metadata\n        {\n            w.write(\"<h2>\" + I18n.getText(\"tab_metadata\") + \"</h2>\");\n            w.newLine();\n            printMeta(s, w);\n        }\n        // h2: wj (optional)\n        if (s.hasWeiserjahre()) {\n            w.write(\"<h2>\" + I18n.getText(\"tab_weiserjahre\") + \"</h2>\");\n            w.newLine();\n            printWJ(s, w);\n        }\n        // h2: elements (optional)\n        if (s.elements != null) {\n            w.write(\"<h2>\" + I18n.getText(\"tab_elements\") + \"</h2>\");\n            w.newLine();\n            printElements(s, w);\n        }\n        w.write(\"</body>\");\n        w.newLine();\n        w.newLine();\n        w.write(\"</html>\");\n        w.newLine();\n    }\n\n    /**\n     *       Load a Sample from disk.  This class doesn't implement loading\n     *       (and never will), so just throw an IOException.  (This should\n     *       never be called.)\n     */\n    public Sample load(BufferedReader r) throws WrongFiletypeException, IOException {\n        throw new IOException(\"HTML is a write-only format for samples\");\n    }\n}\n",
		"id": "/EvoSuiteBenchmark/35_corina/src/main/java/corina/formats/HTML.java",
		"test_prompt": "// HTMLTest.java\n// This file is part of Corina.\n//\n// Corina is free software; you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation; either version 2 of the License, or\n// (at your option) any later version.\n//\n// Corina is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Corina; if not, write to the Free Software\n// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n//\n// Copyright 2001 Ken Harris <kbh7@cornell.edu>\n//\npackage corina.formats;\n\nimport corina.Year;\nimport corina.Range;\nimport corina.Sample;\nimport corina.Element;\nimport corina.Weiserjahre;\nimport corina.MetadataTemplate;\nimport corina.MetadataTemplate.Field;\nimport corina.ui.I18n;\nimport java.io.BufferedReader;\nimport java.io.BufferedWriter;\nimport java.io.IOException;\nimport java.util.List;\nimport java.util.Iterator;\nimport java.text.DecimalFormat;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link HTML}.\n* It contains ten unit test cases for the {@link HTML#load(BufferedReader)} method.\n*/\nclass HTMLTest {"
	},
	{
		"original_code": "// PackedTucson.java\n//\n// This file is part of Corina.\n//\n// Corina is free software; you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation; either version 2 of the License, or\n// (at your option) any later version.\n//\n// Corina is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Corina; if not, write to the Free Software\n// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n//\n// Copyright 2003 Ken Harris <kbh7@cornell.edu>\n//\npackage corina.formats;\n\nimport corina.Sample;\nimport corina.Element;\nimport corina.ui.I18n;\nimport java.io.BufferedReader;\nimport java.io.BufferedWriter;\nimport java.io.IOException;\nimport java.util.ArrayList;\nimport java.util.List;\n\n/**\n *   A Tucson file containing multiple samples.\n *\n *   WRITEME\n *\n *   @author Ken Harris &lt;kbh7 <i style=\"color: gray\">at</i> cornell <i style=\"color: gray\">dot</i> edu&gt;\n *   @version $Id: PackedTucson.java,v 1.4 2006/08/13 04:36:37 lucasmo Exp $\n */\npublic class PackedTucson extends Tucson implements PackedFileType {\n\n    public String toString() {\n        return I18n.getText(\"format.packed_tucson\");\n    }\n\n    public String getDefaultExtension() {\n        // ???\n        return \".TUC\";\n    }\n\n    // can't load a packed tucson file (yet).  this should never get called,\n    // but in case it does...\n    public Sample load(BufferedReader r) throws IOException {\n        throw new WrongFiletypeException();\n    }\n\n    // return the largest prefix (string) common to s1 and s2\n    private static String commonPrefix(String s1, String s2) {\n        int i;\n        for (i = 0; i < s1.length() && i < s2.length(); i++) if (s1.charAt(i) != s2.charAt(i))\n            break;\n        // now: i is the first differing character, so return everything before that\n        return s1.substring(0, i);\n    }\n\n    public void saveSamples(List sl, BufferedWriter w) throws IOException {\n        List outsamples = new ArrayList(sl.size());\n        String prefix = null;\n        // iterate through the samples, making a list of them and\n        // gathering data.\n        // We follow the logic in save() below:\n        // if it's got elements, ignore the sample and use the elements.\n        // Otherwise, we save the sample.\n        for (int i = 0; i < sl.size(); i++) {\n            Sample s = (Sample) sl.get(i);\n            if (s.elements != null) {\n                for (int j = 0; j < s.elements.size(); j++) {\n                    Sample tmp = ((Element) s.elements.get(j)).load();\n                    try {\n                        if (prefix == null)\n                            prefix = tmp.meta.get(\"id\").toString();\n                        else\n                            prefix = commonPrefix(prefix, tmp.meta.get(\"id\").toString());\n                    } catch (NullPointerException npe) {\n                        throw new IOException(\"Invalid META ID in file \" + tmp.meta.get(\"filename\"));\n                    }\n                    outsamples.add(tmp);\n                }\n            } else {\n                try {\n                    if (prefix == null)\n                        prefix = s.meta.get(\"id\").toString();\n                    else\n                        prefix = commonPrefix(prefix, s.meta.get(\"id\").toString());\n                } catch (NullPointerException npe) {\n                    throw new IOException(\"Invalid META ID in file \" + s.meta.get(\"filename\"));\n                }\n                outsamples.add(s);\n            }\n        }\n        // save the header, using that prefix\n        // was: \"000   \"\n        save3LineHeader(w, prefix);\n        for (int i = 0; i < outsamples.size(); i++) saveData((Sample) outsamples.get(i), w);\n    }\n\n    public void save(Sample s, BufferedWriter w) throws IOException {\n        // make sure it's a master, else ioe\n        if (s.elements == null)\n            throw new IOException(\"Packed Tucson format is only available \" + \"for summed samples with Elements\");\n        // load all samples into a buffer.  (this way, i can make the\n        // 3-line header the maximal common prefix instead of a\n        // generic \"000\")\n        int n = s.elements.size();\n        Sample[] buf = new Sample[n];\n        for (int i = 0; i < n; i++) buf[i] = ((Element) s.elements.get(i)).load();\n        // figure out the common prefix (ugh, it's 'reduce again!)\n        String prefix = buf[0].meta.get(\"id\").toString();\n        for (int i = 1; i < n; i++) prefix = commonPrefix(prefix, buf[i].meta.get(\"id\").toString());\n        // (save3lineheader() automatically makes sure it's 6 chars long)\n        // save the header, using that prefix\n        // was: \"000   \"\n        save3LineHeader(w, prefix);\n        // IDEA: use commonprefix of title for header title?\n        // save each element in turn\n        for (int i = 0; i < n; i++) {\n            s = buf[i];\n            // hackish!\n            saveData(s, w);\n            // BUG: might not be AD-only.  saveData() should call\n            // verifyAD(), then, not save()\n        }\n        // (shouldn't that be saveData(elem)?)\n    }\n\n    // save a 3-line header -- itrdb uses these.\n    // |id| is usually just 3 chars (like, \"PFU\").\n    private void save3LineHeader(BufferedWriter w, String id) throws IOException {\n        // ensure exactly 6 chars\n        if (id.length() > 6)\n            id = id.substring(0, 6);\n        else\n            while (id.length() < 6) id += \" \";\n        // write out lines -- mostly blank, fill in rest later?\n        w.write(id + \" 1 Untitled\");\n        w.newLine();\n        w.write(id + \" 2 \");\n        w.newLine();\n        w.write(id + \" 3 \");\n        w.newLine();\n    }\n}\n",
		"id": "/EvoSuiteBenchmark/35_corina/src/main/java/corina/formats/PackedTucson.java",
		"test_prompt": "// PackedTucsonTest.java\n// This file is part of Corina.\n//\n// Corina is free software; you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation; either version 2 of the License, or\n// (at your option) any later version.\n//\n// Corina is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Corina; if not, write to the Free Software\n// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n//\n// Copyright 2003 Ken Harris <kbh7@cornell.edu>\n//\npackage corina.formats;\n\nimport corina.Sample;\nimport corina.Element;\nimport corina.ui.I18n;\nimport java.io.BufferedReader;\nimport java.io.BufferedWriter;\nimport java.io.IOException;\nimport java.util.ArrayList;\nimport java.util.List;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link PackedTucson}.\n* It contains ten unit test cases for the {@link PackedTucson#load(BufferedReader)} method.\n*/\nclass PackedTucsonTest {"
	},
	{
		"original_code": "// TRML.java\n//\n// This file is part of Corina.\n//\n// Corina is free software; you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation; either version 2 of the License, or\n// (at your option) any later version.\n//\n// Corina is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Corina; if not, write to the Free Software\n// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n//\n// Copyright 2001 Ken Harris <kbh7@cornell.edu>\n//\npackage corina.formats;\n\nimport corina.Year;\nimport corina.Range;\nimport corina.Sample;\nimport corina.Element;\nimport corina.MetadataTemplate;\nimport corina.Weiserjahre;\nimport corina.util.StringUtils;\nimport corina.ui.I18n;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Iterator;\nimport java.io.BufferedReader;\nimport java.io.BufferedWriter;\nimport java.io.IOException;\nimport org.xml.sax.Attributes;\nimport org.xml.sax.XMLReader;\nimport org.xml.sax.InputSource;\nimport org.xml.sax.SAXException;\nimport org.xml.sax.helpers.XMLReaderFactory;\nimport org.xml.sax.helpers.DefaultHandler;\n\n/**\n *   TRML, my experimental Tree-Ring Markup Language.\n *\n *   <p>It's long, it's ugly, it's probably fairly buggy, it has really\n *   lousy error handling, but it seems to work for the one file I've\n *   tested it on.</p>\n *\n *   @author Ken Harris &lt;kbh7 <i style=\"color: gray\">at</i>\n *           cornell <i style=\"color: gray\">dot</i> edu&gt;\n *   @version $Id: TRML.java,v 1.1 2004/01/18 17:58:11 aaron Exp $\n */\npublic class TRML implements Filetype {\n\n    public String toString() {\n        return I18n.getText(\"format.trml\");\n    }\n\n    public String getDefaultExtension() {\n        return \".trml\";\n    }\n\n    public Sample load(BufferedReader r) throws IOException {\n        // make sure it's an xml file: first lines starts with \"+\"\n        // ASSUMES: the first line is <=50 chars\n        r.mark(50);\n        String line = r.readLine();\n        if (line == null || !line.startsWith(\"<?xml\"))\n            // no header found\n            throw new WrongFiletypeException();\n        r.reset();\n        try {\n            // make a new XML parser\n            XMLReader xr = XMLReaderFactory.createXMLReader();\n            // ... configure it to use a my SampleHandler ...\n            TRMLHandler loader = new TRMLHandler();\n            xr.setContentHandler(loader);\n            xr.setErrorHandler(loader);\n            // parse() seems to close() the file, so any subsequent\n            // loaders don't get a chance to run.  solution: if you\n            // try to load a file, and it's closed, re-open it before\n            // you try the next loader.\n            // ... and feed it the file\n            xr.parse(new InputSource(r));\n            return loader.getSample();\n        } catch (SAXException se) {\n            // why would this happen?\n            throw new WrongFiletypeException();\n        }\n    }\n\n    /**\n     * A SAX2 handler for loading saved TRML files.\n     */\n    private static class TRMLHandler extends DefaultHandler {\n\n        private boolean readAnything = false;\n\n        private Sample s = new Sample();\n\n        public Sample getSample() {\n            // (for returning result)\n            return s;\n        }\n\n        public void startElement(String uri, String name, String qName, Attributes atts) throws SAXException {\n            // something has been read!  make sure it's a trml file\n            if (!readAnything) {\n                if (name.equals(\"treerings\")) {\n                    readAnything = true;\n                    return;\n                }\n                // else\n                throw new SAXException(\"Not a TRML file!\");\n                // can't i do better?  wfte?\n            }\n            // if inactive, set flag\n            Object a = atts.getValue(\"active\");\n            if (a != null)\n                active = a.equals(\"true\");\n            // data type\n            if (name.equals(\"data\"))\n                type = atts.getValue(\"type\");\n            // TODO: use units, too?\n        }\n\n        private boolean active = true;\n\n        private String type;\n\n        private StringBuffer data = new StringBuffer();\n\n        public void characters(char[] ch, int start, int length) {\n            data.append(new String(ch, start, length));\n        }\n\n        private Year start = null, end = null;\n\n        private Range range = null;\n\n        public void endElement(String uri, String name, String qName) {\n            // range\n            if (name.equals(\"start\"))\n                start = new Year(data.toString());\n            else if (name.equals(\"end\"))\n                end = new Year(data.toString());\n            if (start != null && end != null && range == null) {\n                range = new Range(start, end);\n                s.range = range;\n            }\n            if (name.equals(\"start\") || name.equals(\"end\")) {\n                data = new StringBuffer();\n                return;\n            }\n            // other metadata field\n            Iterator i = MetadataTemplate.getFields();\n            while (i.hasNext()) {\n                MetadataTemplate.Field f = (MetadataTemplate.Field) i.next();\n                if (f.getVariable().equals(name)) {\n                    s.meta.put(name, data.toString().trim());\n                    data = new StringBuffer();\n                    return;\n                }\n            }\n            // count/incr/decr field\n            if (name.equals(\"v\")) {\n                // if list doesn't exist, create\n                if (type.equals(\"width\") && s.data == null) {\n                    s.data = new ArrayList();\n                }\n                if (type.equals(\"count\") && s.count == null) {\n                    s.count = new ArrayList();\n                }\n                if (type.equals(\"incr\") && s.incr == null) {\n                    s.incr = new ArrayList();\n                }\n                if (type.equals(\"decr\") && s.decr == null) {\n                    s.decr = new ArrayList();\n                }\n                // parse value\n                int x = Integer.parseInt(data.toString().trim());\n                // add this value to list\n                if (type.equals(\"width\"))\n                    s.data.add(new Integer(x));\n                if (type.equals(\"count\"))\n                    s.count.add(new Integer(x));\n                if (type.equals(\"incr\"))\n                    s.incr.add(new Integer(x));\n                if (type.equals(\"decr\"))\n                    s.decr.add(new Integer(x));\n                data = new StringBuffer();\n                return;\n            }\n            // elements field\n            if (name.equals(\"element\")) {\n                if (s.elements == null)\n                    s.elements = new ArrayList();\n                Element e = new Element(data.toString().trim(), active);\n                // REFACTOR toString().trim()?\n                s.elements.add(e);\n                active = true;\n                data = new StringBuffer();\n            }\n        }\n    }\n\n    // big fat disclaimer\n    private final static String[] DISCLAIMER = new String[] { \"<!-- This file was created by Corina (http://corina.sf.net/).   -->\", \"<!-- This is an experimental format, TRML, that is not intended -->\", \"<!-- for actual use.  No other programs can read this format,   -->\", \"<!-- and it is subject to change at any time.                   -->\", \"<!-- You have been warned.                                      -->\", \"<!-- Cheers, Ken (kbh7@cornell.edu)                             -->\" };\n\n    public void save(Sample s, BufferedWriter w) throws IOException {\n        w.write(\"<?xml version=\\\"1.0\\\"?>\");\n        w.newLine();\n        w.newLine();\n        // disclaimer\n        for (int i = 0; i < DISCLAIMER.length; i++) {\n            w.write(DISCLAIMER[i]);\n            w.newLine();\n        }\n        w.newLine();\n        w.write(\"<treerings>\");\n        w.newLine();\n        w.write(\"   <metadata>\");\n        w.newLine();\n        // range\n        w.write(\"      <start>\" + s.range.getStart() + \"</start>\");\n        w.newLine();\n        w.write(\"      <end>\" + s.range.getEnd() + \"</end>\");\n        w.newLine();\n        // other fields\n        Iterator i = MetadataTemplate.getFields();\n        while (i.hasNext()) {\n            MetadataTemplate.Field f = (MetadataTemplate.Field) i.next();\n            Object x = s.meta.get(f.getVariable());\n            if (x != null) {\n                String v = StringUtils.escapeForXML(x.toString());\n                String t = f.getVariable();\n                w.write(\"      <\" + t + \">\" + v + \"</\" + t + \">\");\n                w.newLine();\n            }\n        }\n        // TODO: if you want precision, make a new metadata field for it.\n        // e.g., <precision>0.01</precision>\n        w.write(\"   </metadata>\");\n        w.newLine();\n        // data\n        w.newLine();\n        w.write(\"   <data type=\\\"width\\\" units=\\\"0.01mm\\\">\");\n        w.newLine();\n        saveData(w, s.data);\n        w.write(\"   </data>\");\n        w.newLine();\n        // TODO: add per-year comments?\n        // count\n        if (s.count != null) {\n            w.newLine();\n            w.write(\"   <data type=\\\"count\\\" units=\\\"number\\\">\");\n            w.newLine();\n            saveData(w, s.count);\n            w.write(\"   </data>\");\n            w.newLine();\n        }\n        // weiserjahre\n        if (s.incr != null) {\n            w.newLine();\n            w.write(\"   <data type=\\\"incr\\\" units=\\\"number\\\">\");\n            w.newLine();\n            saveData(w, s.incr);\n            w.write(\"   </data>\");\n            w.newLine();\n            w.newLine();\n            w.write(\"   <data type=\\\"decr\\\" units=\\\"number\\\">\");\n            w.newLine();\n            saveData(w, s.decr);\n            w.write(\"   </data>\");\n            w.newLine();\n        }\n        // elements\n        if (s.elements != null) {\n            w.newLine();\n            w.write(\"   <elements>\");\n            w.newLine();\n            for (int ii = 0; ii < s.elements.size(); ii++) {\n                Element e = (Element) s.elements.get(ii);\n                w.write(\"      <element\" + (e.isActive() ? \"\" : \" active=\\\"false\\\"\") + \">\" + e + \"</element>\");\n                w.newLine();\n            }\n            w.write(\"   </elements>\");\n            w.newLine();\n        }\n        w.write(\"</treerings>\");\n        w.newLine();\n    }\n\n    // number of columns (years of data) per line.  it's XML, so it\n    // doesn't matter how the data goes in the file, but for debugging\n    // keeping it in columns helps.  it's more verbose than tucson, so\n    // 10 columns won't fit.  5 is a good compromise.\n    private static final int COLUMNS = 5;\n\n    private void saveData(BufferedWriter w, List data) throws IOException {\n        for (int i = 0; i < data.size(); i++) {\n            if (i % COLUMNS == 0)\n                w.write(\"      \");\n            w.write(\"<v>\" + data.get(i) + \"</v>\");\n            if (i % COLUMNS == COLUMNS - 1 || i == data.size() - 1)\n                w.newLine();\n            else\n                w.write(\" \");\n        }\n    }\n}\n",
		"id": "/EvoSuiteBenchmark/35_corina/src/main/java/corina/formats/TRML.java",
		"test_prompt": "// TRMLTest.java\n// This file is part of Corina.\n//\n// Corina is free software; you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation; either version 2 of the License, or\n// (at your option) any later version.\n//\n// Corina is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Corina; if not, write to the Free Software\n// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n//\n// Copyright 2001 Ken Harris <kbh7@cornell.edu>\n//\npackage corina.formats;\n\nimport corina.Year;\nimport corina.Range;\nimport corina.Sample;\nimport corina.Element;\nimport corina.MetadataTemplate;\nimport corina.Weiserjahre;\nimport corina.util.StringUtils;\nimport corina.ui.I18n;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Iterator;\nimport java.io.BufferedReader;\nimport java.io.BufferedWriter;\nimport java.io.IOException;\nimport org.xml.sax.Attributes;\nimport org.xml.sax.XMLReader;\nimport org.xml.sax.InputSource;\nimport org.xml.sax.SAXException;\nimport org.xml.sax.helpers.XMLReaderFactory;\nimport org.xml.sax.helpers.DefaultHandler;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link TRML}.\n* It contains ten unit test cases for the {@link TRML#load(BufferedReader)} method.\n*/\nclass TRMLTest {"
	},
	{
		"original_code": "// RangesOnly.java\n//\n// This file is part of Corina.\n//\n// Corina is free software; you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation; either version 2 of the License, or\n// (at your option) any later version.\n//\n// Corina is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Corina; if not, write to the Free Software\n// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n//\n// Copyright 2003 Ken Harris <kbh7@cornell.edu>\n//\npackage corina.formats;\n\nimport corina.Sample;\nimport corina.Element;\nimport corina.ui.I18n;\nimport java.io.BufferedReader;\nimport java.io.BufferedWriter;\nimport java.io.IOException;\n\n/**\n *    The name and range of a sum's elements (no data).\n *\n *    For a sum, output the name and range of each elem<p>ent, one per\n *    line, with columns separated by tabs, and elements separated by\n *    newlines.  For example:</p>\n *\n * <pre>\n * Sample\tStart\tEnd\tSpan\n * ZKB-1   1001    1236    236\n * ZKB-2   1003    1072    70\n * ZKB-3   1011    1099    89\n * </pre>\n *\n *    <p>(Useful for dumping into spreadsheets, or generating bar\n *    graphs.)</p>\n *\n *    <h2>Left to do</h2>\n *    <ul>\n *      <li>i18n (2 ioe's)\n *    </ul>\n *\n *    @author Ken Harris &lt;kbh7 <i style=\"color: gray\">at</i> cornell <i style=\"color: gray\">dot</i> edu&gt;\n *    @version $Id: RangesOnly.java,v 1.1 2004/01/18 17:58:11 aaron Exp $\n */\npublic class RangesOnly implements Filetype {\n\n    public String toString() {\n        return I18n.getText(\"format.ranges_only\");\n    }\n\n    public String getDefaultExtension() {\n        return \".TXT\";\n    }\n\n    /**\n     *       Throws a WrongFiletypeException - RangesOnly files can't be\n     *       loaded.  (This should never be called.)\n     *\n     *       @return never returns\n     *       @exception WrongFiletypeException always thrown\n     */\n    public Sample load(BufferedReader r) throws IOException {\n        throw new WrongFiletypeException();\n    }\n\n    public void save(Sample s, BufferedWriter w) throws IOException {\n        // verify it's a master\n        if (s.elements == null)\n            throw new IOException(\"Ranges-only format is only available \" + \"for summed samples with Elements\");\n        // write a header\n        w.write(I18n.getText(\"sample\"));\n        w.write(\"\\t\");\n        w.write(I18n.getText(\"browser_start\"));\n        w.write(\"\\t\");\n        w.write(I18n.getText(\"browser_end\"));\n        w.write(\"\\t\");\n        w.write(I18n.getText(\"browser_length\"));\n        w.newLine();\n        int n = s.elements.size();\n        for (int i = 0; i < n; i++) {\n            Element e = (Element) s.elements.get(i);\n            // OBSOLETE: getRange(), etc., now load the file automatically.\n            // but BUG: they don't throw anything if it fails.\n            // (and i don't have a getMeta() yet, so it's not unnecessary.)\n            try {\n                // this aborts if element can't be loaded.\n                e.loadMeta();\n            } catch (IOException ioe) {\n                throw new IOException(\"Can't load element \" + e.getFilename());\n            }\n            // output (name, start, end)\n            if (e.details.containsKey(\"title\"))\n                w.write(e.details.get(\"title\").toString());\n            else\n                w.write(e.details.get(\"filename\").toString());\n            w.write(\"\\t\");\n            w.write(e.getRange().getStart().toString());\n            w.write(\"\\t\");\n            w.write(e.getRange().getEnd().toString());\n            w.write(\"\\t\");\n            w.write(String.valueOf(e.getRange().span()));\n            w.newLine();\n        }\n    }\n}\n",
		"id": "/EvoSuiteBenchmark/35_corina/src/main/java/corina/formats/RangesOnly.java",
		"test_prompt": "// RangesOnlyTest.java\n// This file is part of Corina.\n//\n// Corina is free software; you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation; either version 2 of the License, or\n// (at your option) any later version.\n//\n// Corina is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Corina; if not, write to the Free Software\n// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n//\n// Copyright 2003 Ken Harris <kbh7@cornell.edu>\n//\npackage corina.formats;\n\nimport corina.Sample;\nimport corina.Element;\nimport corina.ui.I18n;\nimport java.io.BufferedReader;\nimport java.io.BufferedWriter;\nimport java.io.IOException;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link RangesOnly}.\n* It contains ten unit test cases for the {@link RangesOnly#load(BufferedReader)} method.\n*/\nclass RangesOnlyTest {"
	},
	{
		"original_code": "// Heidelberg.java\n//\n// This file is part of Corina.\n//\n// Corina is free software; you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation; either version 2 of the License, or\n// (at your option) any later version.\n//\n// Corina is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Corina; if not, write to the Free Software\n// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n//\n// Copyright 2001 Ken Harris <kbh7@cornell.edu>\n//\npackage corina.formats;\n\nimport corina.Year;\nimport corina.Range;\nimport corina.Sample;\nimport corina.Weiserjahre;\nimport corina.util.StringUtils;\nimport corina.ui.I18n;\nimport java.util.ArrayList;\nimport java.io.StreamTokenizer;\nimport java.io.BufferedWriter;\nimport java.io.BufferedReader;\nimport java.io.IOException;\n\n/**\n *    Frank Rinn's \"Heidelberg\" format.  I believe this format is the\n *    default format for his TSAP program.\n *\n *    <p>This class is unfinished.  It doesn't load or save metadata yet,\n *    and assumes all files are summed.</p>\n *\n *    <h2>Left to do</h2>\n *    <ul>\n *      <li>doesn't load or save metadata yet\n *      <li>assumes all files are summed\n *      <li>doesn't allow 0's in the data stream; either handle them\n *          properly, or don't allow them to be saved\n * \t (change unit test to add zeros)\n *    </ul>\n *\n *    @author Ken Harris &lt;kbh7 <i style=\"color: gray\">at</i> cornell <i style=\"color: gray\">dot</i> edu&gt;\n *    @version $Id: Heidelberg.java,v 1.3 2006/02/24 21:39:08 lucasmo Exp $\n */\npublic class Heidelberg implements Filetype {\n\n    public String toString() {\n        return I18n.getText(\"format.heidelberg\");\n    }\n\n    public String getDefaultExtension() {\n        return \".mpl\";\n    }\n\n    public Sample load(BufferedReader r) throws IOException {\n        // make sure it's a heidelberg file\n        String line = r.readLine();\n        if (line == null || !line.startsWith(\"HEADER:\"))\n            // no HEADER: found\n            throw new WrongFiletypeException();\n        // new sample, with given filename\n        Sample s = new Sample();\n        // don't know end, yet\n        Year end = null;\n        int length = -1;\n        // metadata\n        for (; ; ) {\n            // read a line\n            line = r.readLine();\n            // got to data, stop\n            if (line.startsWith(\"DATA:\"))\n                break;\n            // parse line as \"variable = value\", and put into s.meta\n            int i = line.indexOf(\"=\");\n            if (i == -1)\n                throw new WrongFiletypeException();\n            String tag = line.substring(0, i);\n            String value = line.substring(i + 1);\n            // got end-date.\n            if (tag.equals(\"DateEnd\"))\n                end = new Year(value);\n            if (tag.equals(\"Length\"))\n                length = Integer.parseInt(value);\n            // WRITE ME: parse other tags and interpret metadata as\n            // intelligently as possible\n        }\n        s.count = new ArrayList();\n        s.incr = new ArrayList();\n        s.decr = new ArrayList();\n        // data -- i'll assume all data is (width,count,up,down)\n        StreamTokenizer t = new StreamTokenizer(r);\n        int idx = 0;\n        for (; ; ) {\n            // parse (datum, count, up, dn)\n            int datum, count, up, dn;\n            try {\n                t.nextToken();\n                datum = (int) t.nval;\n                t.nextToken();\n                count = (int) t.nval;\n                t.nextToken();\n                up = (int) t.nval;\n                t.nextToken();\n                dn = (int) t.nval;\n            } catch (IOException ioe) {\n                throw new WrongFiletypeException();\n            }\n            // (0,0,0,0) seems to mean end-of-sample\n            if (datum == 0)\n                break;\n            // add to lists\n            s.data.add(new Integer(datum));\n            s.count.add(new Integer(count));\n            s.incr.add(new Integer(up));\n            s.decr.add(new Integer(dn));\n            idx++;\n            // break out if we have 'length' samples\n            if (idx == length)\n                break;\n        }\n        // no end?  die.\n        if (end == null)\n            throw new WrongFiletypeException();\n        // set range, and return\n        s.range = new Range(end.add(1 - s.data.size()), end);\n        return s;\n    }\n\n    public void save(Sample s, BufferedWriter w) throws IOException {\n        // header\n        w.write(\"HEADER:\");\n        w.newLine();\n        w.write(\"DateEnd=\" + s.range.getEnd());\n        w.newLine();\n        w.write(\"Length=\" + s.data.size());\n        w.newLine();\n        // WRITE ME: finish out the header stuff\n        // don't want to die if somebody tries to save a raw file\n        boolean countIsNull = (s.count == null);\n        boolean wjIsNull = !s.hasWeiserjahre();\n        // data\n        // what's \"chrono\" mean?\n        w.write(\"DATA:Chrono\");\n        w.newLine();\n        int column = 0;\n        for (int i = 0; i < s.data.size(); i++) {\n            String datum = s.data.get(i).toString();\n            if (datum.equals(\"0\"))\n                // DOCUMENT me!\n                datum = \"1\";\n            // (BUG: what if it's negative?)\n            // (ICK: if it changes the data, it's harder to test)\n            String count = (countIsNull ? \"0\" : s.count.get(i).toString());\n            String up = (wjIsNull ? \"0\" : s.incr.get(i).toString());\n            String dn = (wjIsNull ? \"0\" : s.decr.get(i).toString());\n            // output (\"%-5d%-5d%-5d%-5d\", datum, count, up, dn)\n            writeDatum(w, s.data.get(i));\n            // WAS: w.write(StringUtils.leftPad(s.data.get(i).toString(), 5));\n            writeDatum(w, (countIsNull ? \"0\" : s.count.get(i)));\n            // WAS: w.write(StringUtils.leftPad(countIsNull ? \"0\" : s.count.get(i).toString(), 5));\n            w.write(StringUtils.leftPad(wjIsNull ? \"0\" : s.incr.get(i).toString(), 5));\n            w.write(StringUtils.leftPad(wjIsNull ? \"0\" : s.decr.get(i).toString(), 5));\n            // newline every 4\n            if (column % 4 == 3)\n                w.newLine();\n            column++;\n        }\n        // COMBINE these: newline-every-4, and extra-0's-to-pad both\n        // care about exactly one value: position (column).\n        // EXTRACT method: writeData(data, count, incr, decr)\n        // REFACTOR: use iterators instead of for loop?\n        // extra 0's to pad\n        while (column % 4 != 3) {\n            w.write(\"    0    0    0    0\");\n            column++;\n        }\n        w.newLine();\n    }\n\n    private void writeData(BufferedWriter w, String data, String count, String incr, String decr) throws IOException {\n        writeDatum(w, data);\n        writeDatum(w, count);\n        writeDatum(w, incr);\n        writeDatum(w, decr);\n    }\n\n    private void writeDatum(BufferedWriter w, Object o) throws IOException {\n        w.write(StringUtils.leftPad(o.toString(), 5));\n    }\n}\n",
		"id": "/EvoSuiteBenchmark/35_corina/src/main/java/corina/formats/Heidelberg.java",
		"test_prompt": "// HeidelbergTest.java\n// This file is part of Corina.\n//\n// Corina is free software; you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation; either version 2 of the License, or\n// (at your option) any later version.\n//\n// Corina is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Corina; if not, write to the Free Software\n// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n//\n// Copyright 2001 Ken Harris <kbh7@cornell.edu>\n//\npackage corina.formats;\n\nimport corina.Year;\nimport corina.Range;\nimport corina.Sample;\nimport corina.Weiserjahre;\nimport corina.util.StringUtils;\nimport corina.ui.I18n;\nimport java.util.ArrayList;\nimport java.io.StreamTokenizer;\nimport java.io.BufferedWriter;\nimport java.io.BufferedReader;\nimport java.io.IOException;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link Heidelberg}.\n* It contains ten unit test cases for the {@link Heidelberg#load(BufferedReader)} method.\n*/\nclass HeidelbergTest {"
	},
	{
		"original_code": "// TSAPMatrix.java\n//\n// This file is part of Corina.\n//\n// Corina is free software; you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation; either version 2 of the License, or\n// (at your option) any later version.\n//\n// Corina is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Corina; if not, write to the Free Software\n// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n//\n// Copyright 2001 Ken Harris <kbh7@cornell.edu>\n//\npackage corina.formats;\n\nimport corina.Year;\nimport corina.Range;\nimport corina.Sample;\nimport corina.util.StringUtils;\nimport corina.ui.I18n;\nimport java.util.ArrayList;\nimport java.io.BufferedReader;\nimport java.io.BufferedWriter;\nimport java.io.IOException;\n\n/**\n *   \"TSAP Matrix Format\".  I think these files we have come from\n *   Hohenheim's program.  They all end in .OUT, so I suspect this is\n *   Hohenheim trying to export in Heidelberg, though the TSAP reference\n *   manual doesn't mention this filetype.  Maybe it's a deprecated\n *   format.\n *\n *   <p>The first line is always \"TSAP-MATRIX-FORMAT\".  It's a fairly\n *   straightforward text-based format.</p>\n *\n *   <h2>Left to do</h2>\n *   <ul>\n *     <li>i18n\n *     <li>Bug with zero-year handling\n *     <li>Input is too inflexible (if spaces are wrong, won't load)\n *     <li>Input is too flexible: doesn't check for second header line\n *     <li>Doesn't deal with any other metadata (Project, Location, etc.)\n *   </ul>\n *\n *   @author Ken Harris &lt;kbh7 <i style=\"color: gray\">at</i> cornell <i style=\"color: gray\">dot</i> edu&gt;\n *   @version $Id: TSAPMatrix.java,v 1.1 2004/01/18 17:58:11 aaron Exp $\n */\npublic class TSAPMatrix implements Filetype {\n\n    public String toString() {\n        return I18n.getText(\"format.tsap_matrix\");\n    }\n\n    /**\n     *       Return the default extension for files of this type.  All of\n     *       the files I've seen end with \".out\", so that's what I'll use.\n     *\n     *       @return the string \".out\"\n     */\n    public String getDefaultExtension() {\n        return \".out\";\n    }\n\n    public Sample load(BufferedReader r) throws WrongFiletypeException, IOException {\n        // make sure it's a tsap-matrix file\n        String line = r.readLine();\n        if (line == null || !line.startsWith(\"TSAP-MATRIX-FORMAT\"))\n            // incorrect header found\n            throw new WrongFiletypeException();\n        // new sample, with given filename.  as far as i know, all\n        // TSAP-MATRIX-FORMAT files are summed, so make wj and count\n        // Lists, too.\n        Sample s = new Sample();\n        // are all TSAP-MATRIX files summed?\n        s.incr = new ArrayList();\n        s.decr = new ArrayList();\n        s.count = new ArrayList();\n        // after the TSAP-... header line, there are a series of \"Tag:\n        // value\" lines, then an empty line\n        for (; ; ) {\n            line = r.readLine();\n            // stop on empty line\n            if (line.length() == 0)\n                break;\n            // as a temporary fix, so we don't lose data, let's just\n            // append all the metadata lines to the comments field.\n            if (!s.meta.containsKey(\"comments\"))\n                s.meta.put(\"comments\", line.trim());\n            else\n                s.meta.put(\"comments\", s.meta.get(\"comments\") + \"\\n\" + line.trim());\n            // -- TODO: store metadata lines appropriately here\n        }\n        // now there's a line that says \"Year, 100 Val 100 Nos ...\".\n        // skip it, too.\n        r.readLine();\n        // this is the start year, initially null;\n        Year start = null;\n        // now there's a series of lines: \" year, data, count, up, down\"\n        for (; ; ) {\n            // read the line\n            line = r.readLine();\n            // stop at the end\n            if (line == null || line.length() == 0)\n                break;\n            // from the first line, read the year\n            try {\n                if (start == null)\n                    // true => \"in a zero-year system\"\n                    start = new Year(line.substring(3, 8), true);\n            } catch (NumberFormatException nfe) {\n                throw new IOException(\"can't parse year: \" + line);\n            }\n            // FIXME: above(year), below -- don't use absolute positions,\n            // in case somebody edits the file by hand and they get off --\n            // just read 5 ints.  (don't i have a int[] readInts() method somewhere?)\n            // data, count, up, down\n            int datum = 0, count = 0, up = 0, dn = 0;\n            try {\n                datum = Integer.parseInt(line.substring(20, 24).trim());\n                count = Integer.parseInt(line.substring(37, 40).trim());\n                up = Integer.parseInt(line.substring(53, 56).trim());\n                dn = Integer.parseInt(line.substring(69, 72).trim());\n            } catch (NumberFormatException nfe) {\n                throw new IOException(\"Can't parse '\" + nfe.getMessage() + \"' as a number.\");\n                // (can i do anything more with this?)\n            } catch (StringIndexOutOfBoundsException sioobe) {\n                throw new WrongFiletypeException();\n                // (why would a SIOOBE occur?  if it can't happen, say so!)\n            }\n            // insert this data\n            s.data.add(new Integer(datum));\n            s.count.add(new Integer(count));\n            s.incr.add(new Integer(up));\n            s.decr.add(new Integer(dn));\n        }\n        // might it be indexed?  suuuure...\n        s.guessIndexed();\n        // set range\n        s.range = new Range(start, s.data.size());\n        // return the result\n        return s;\n    }\n\n    /**\n     *       Save a Sample to disk.\n     *\n     *       <p>(I don't know how to save TSAPMatrix samples, really, apart\n     *       from seeing a couple files in this format, so these might not\n     *       be readable by any program other than Corina.)</p>\n     */\n    public void save(Sample s, BufferedWriter w) throws IOException {\n        // header\n        w.write(\"TSAP-MATRIX-FORMAT\");\n        w.newLine();\n        // WRITE ME: other header stuff here (\"Project:\", \"Location:\")\n        w.newLine();\n        w.write(\"    Year,       100 Val        100 Nos        100 Nois       100 Nods\");\n        w.newLine();\n        for (int i = 0; i < s.data.size(); i++) {\n            // format: \"     820,            129,              1,              0,              0\"\n            // (year,width,count,up,down)\n            String year = s.getStart().add(i).toString();\n            year = StringUtils.leftPad(year, 8);\n            String width = s.data.get(i).toString();\n            width = StringUtils.leftPad(width, 15);\n            // WRITEME: count, up, dn\n            // BUG: zero year is incorrect -- -5..+5 gets printed as -5..+4, should be -4..+5\n            // zero year\n            w.write(StringUtils.leftPad(s.getStart().add(i).toString(), 8));\n            w.write(',');\n            w.write(StringUtils.leftPad(s.data.get(i).toString(), 15));\n            w.write(',');\n            // count may be null?\n            w.write(StringUtils.leftPad(s.count == null ? \"1\" : s.count.get(i).toString(), 15));\n            w.write(',');\n            // REFACTOR: this is way too low-level.  move to superclass?\n            // may not have wj\n            w.write(StringUtils.leftPad(s.hasWeiserjahre() ? s.incr.get(i).toString() : \"0\", 15));\n            w.write(',');\n            w.write(StringUtils.leftPad(s.hasWeiserjahre() ? s.decr.get(i).toString() : \"0\", 15));\n            // newline\n            w.newLine();\n        }\n    }\n}\n",
		"id": "/EvoSuiteBenchmark/35_corina/src/main/java/corina/formats/TSAPMatrix.java",
		"test_prompt": "// TSAPMatrixTest.java\n// This file is part of Corina.\n//\n// Corina is free software; you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation; either version 2 of the License, or\n// (at your option) any later version.\n//\n// Corina is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Corina; if not, write to the Free Software\n// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n//\n// Copyright 2001 Ken Harris <kbh7@cornell.edu>\n//\npackage corina.formats;\n\nimport corina.Year;\nimport corina.Range;\nimport corina.Sample;\nimport corina.util.StringUtils;\nimport corina.ui.I18n;\nimport java.util.ArrayList;\nimport java.io.BufferedReader;\nimport java.io.BufferedWriter;\nimport java.io.IOException;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link TSAPMatrix}.\n* It contains ten unit test cases for the {@link TSAPMatrix#load(BufferedReader)} method.\n*/\nclass TSAPMatrixTest {"
	},
	{
		"original_code": "// TwoColumn.java\n//\n// This file is part of Corina.\n//\n// Corina is free software; you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation; either version 2 of the License, or\n// (at your option) any later version.\n//\n// Corina is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Corina; if not, write to the Free Software\n// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n//\n// Copyright 2001 Ken Harris <kbh7@cornell.edu>\n//\npackage corina.formats;\n\nimport corina.Year;\nimport corina.Range;\nimport corina.Sample;\nimport corina.ui.I18n;\nimport java.util.ArrayList;\nimport java.util.StringTokenizer;\nimport java.util.NoSuchElementException;\nimport java.io.StreamTokenizer;\nimport java.io.BufferedReader;\nimport java.io.BufferedWriter;\nimport java.io.IOException;\n\n/**\n *   A simple tab-delimited 2-column data file.\n *\n *   <p>This is useful for transferring data to and from non-dendro\n *   programs, like spreadsheets and graphics utilities.</p>\n *\n *   <p>Actually, the load() method doesn't care about tabs or newlines\n *   - they're both just whitespace.  It loads a sequence of integers in\n *   pairs: year datum.  Only the first year matters; all others are\n *   ignored.  Year -5 means 5 BC, not 6 BC, like some programs\n *   believe.</p>\n *\n *   <p>The save() method saves a text file, one year's data per line,\n *   as \"year &lt;tab&gt; width\".  (Native newlines are used.)</p>\n *\n *   <p>If there's a count (i.e., it's a summed file), it will be saved\n *   in 3 columns, the third column being the count.</p>\n *\n *   <p>(Perhaps adding count and Weiserjahre would be a useful feature?\n *   Make it actually care about newlines, or watch the year values, so\n *   it knows what's one year's data.  It should ignore the stop-value\n *   \"999\", too, which some programs add.)</p>\n *\n *   @author Ken Harris &lt;kbh7 <i style=\"color: gray\">at</i> cornell <i style=\"color: gray\">dot</i> edu&gt;\n *   @version $Id: TwoColumn.java,v 1.1 2004/01/18 17:58:11 aaron Exp $\n */\npublic class TwoColumn implements Filetype {\n\n    public String toString() {\n        return I18n.getText(\"format.two_column\");\n    }\n\n    public String getDefaultExtension() {\n        return \".TXT\";\n    }\n\n    public Sample load(BufferedReader r) throws IOException {\n        // sample to return\n        Sample s = new Sample();\n        // start/current/end years\n        Year start = null, current = null;\n        // maybe read a line of crap, up to 120 chars.\n        maybeEatCrap(s, r);\n        // set up a tokenizer on the file\n        StreamTokenizer t = new StreamTokenizer(r);\n        // this is the last-chance catch-all for random text data, so\n        // don't be too afraid to throw a WrongFiletypeException:\n        // we'll be getting all sorts of crap here.\n        boolean hasYear, hasCount;\n        // figure out what it has, by looking at 3 lines\n        try {\n            // we'll read 3 lines, but put them back by the end of the block\n            r.mark(3 * 80);\n            // read 3 lines of numbers -- yes, this means you can't load a 1- or 2-line file.\n            float[] a = parseLine(r.readLine());\n            float[] b = parseLine(r.readLine());\n            float[] c = parseLine(r.readLine());\n            // if they're sequential, they're probably years\n            int a0 = (int) a[0];\n            int b0 = (int) b[0];\n            int c0 = (int) c[0];\n            hasYear = (a0 + 1 == b0) && (b0 + 1 == c0);\n            // if there's an extra column, it's the count\n            int normal = 1 + (hasYear ? 1 : 0);\n            hasCount = ((a.length == normal + 1) && (b.length == normal + 1) && (c.length == normal + 1));\n            // ok, done with that, put everything back\n            r.reset();\n        } catch (NullPointerException npe) {\n            // (thrown by r.readLine())\n            // not enough lines\n            throw new WrongFiletypeException();\n        }\n        // if no year, let's make one up.\n        if (!hasYear)\n            start = Year.DEFAULT;\n        // hasData\n        s.data = new ArrayList();\n        if (hasCount)\n            s.count = new ArrayList();\n        for (; ; ) {\n            String line = r.readLine();\n            // no more data\n            if (line == null)\n                break;\n            // get ready to parse\n            StringTokenizer tok = new StringTokenizer(line, \",; \\t\");\n            if (hasYear) {\n                try {\n                    int y;\n                    String token = tok.nextToken();\n                    try {\n                        y = Integer.parseInt(token);\n                    } catch (NumberFormatException nfe) {\n                        throw new WrongFiletypeException();\n                    }\n                    // just ignore, unless it's the first one\n                    if (start == null)\n                        start = new Year(y);\n                } catch (NoSuchElementException nsee) {\n                    // end of file?\n                    if (start == null)\n                        throw new WrongFiletypeException();\n                    else\n                        break;\n                }\n            }\n            // allow floating-point values here\n            float f;\n            try {\n                String token = tok.nextToken();\n                f = Float.parseFloat(token);\n            } catch (NoSuchElementException nsee) {\n                // not enough tokens\n                throw new WrongFiletypeException();\n            } catch (NumberFormatException nfe) {\n                // not a number\n                throw new WrongFiletypeException();\n            }\n            s.data.add(new Integer(Math.round(f)));\n            if (hasCount) {\n                int c = Integer.parseInt(tok.nextToken());\n                s.count.add(new Integer(c));\n            }\n        }\n        // the 800 rule.\n        s.guessIndexed();\n        // set range\n        s.range = new Range(start, s.data.size());\n        // return it\n        return s;\n    }\n\n    // if there's a line with text (letters) on it (up to 120 chars long),\n    // put it in the comments field, and skip past it.\n    private void maybeEatCrap(Sample s, BufferedReader r) throws IOException {\n        boolean isCrap = false;\n        r.mark(120);\n        String l = r.readLine();\n        if (l == null) {\n            // empty file!\n            throw new WrongFiletypeException();\n        }\n        for (int i = 0; i < l.length(); i++) {\n            if (Character.isLetter(l.charAt(i))) {\n                isCrap = true;\n                break;\n            }\n        }\n        if (isCrap)\n            s.meta.put(\"comments\", \"Header line was: \\\"\" + l + \"\\\"\");\n        else\n            r.reset();\n    }\n\n    // given a string like \"1 2 3\", return an array like {1f, 2f, 3f}.\n    private float[] parseLine(String s) throws IOException {\n        try {\n            StringTokenizer tok = new StringTokenizer(s, \",; \\t\");\n            int n = tok.countTokens();\n            float[] x = new float[n];\n            for (int i = 0; i < n; i++) x[i] = Float.parseFloat(tok.nextToken());\n            return x;\n        } catch (NumberFormatException nfe) {\n            throw new WrongFiletypeException();\n        }\n    }\n\n    public void save(Sample s, BufferedWriter w) throws IOException {\n        Year y = s.range.getStart();\n        boolean hasCount = (s.count != null);\n        for (int i = 0; i < s.data.size(); i++) {\n            w.write(y + \"\\t\" + s.data.get(i));\n            if (hasCount)\n                w.write(\"\\t\" + s.count.get(i));\n            w.newLine();\n            y = y.add(+1);\n        }\n    }\n}\n",
		"id": "/EvoSuiteBenchmark/35_corina/src/main/java/corina/formats/TwoColumn.java",
		"test_prompt": "// TwoColumnTest.java\n// This file is part of Corina.\n//\n// Corina is free software; you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation; either version 2 of the License, or\n// (at your option) any later version.\n//\n// Corina is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Corina; if not, write to the Free Software\n// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n//\n// Copyright 2001 Ken Harris <kbh7@cornell.edu>\n//\npackage corina.formats;\n\nimport corina.Year;\nimport corina.Range;\nimport corina.Sample;\nimport corina.ui.I18n;\nimport java.util.ArrayList;\nimport java.util.StringTokenizer;\nimport java.util.NoSuchElementException;\nimport java.io.StreamTokenizer;\nimport java.io.BufferedReader;\nimport java.io.BufferedWriter;\nimport java.io.IOException;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link TwoColumn}.\n* It contains ten unit test cases for the {@link TwoColumn#load(BufferedReader)} method.\n*/\nclass TwoColumnTest {"
	},
	{
		"original_code": "// TucsonSimple.java\n//\n// This file is part of Corina.\n//\n// Corina is free software; you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation; either version 2 of the License, or\n// (at your option) any later version.\n//\n// Corina is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Corina; if not, write to the Free Software\n// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n//\n// Copyright 2001 Ken Harris <kbh7@cornell.edu>\n//\npackage corina.formats;\n\nimport corina.Year;\nimport corina.Range;\nimport corina.Sample;\nimport corina.util.StringUtils;\nimport corina.ui.I18n;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.util.HashMap;\nimport java.io.BufferedReader;\nimport java.io.BufferedWriter;\nimport java.io.IOException;\n\n/**\n * The Tucson tree ring laboratory's file format.  This has been the\n * canonical file format since the punchcard days.  Unfortunately,\n * since it's just the punchcard format in a text file, it has\n * numerous shortcomings:\n *\n * <ul>\n *\n * <li>minimal metadata support (only 80-character ASCII title,\n * 6-digit ID, and relative/absolute flag)\n *\n * <li>relative/absolute flag starts in column 80 of the title,\n * making it inconvenient to edit with most text editors\n *\n * <li>no way to store BC(E) samples; some labs add 8000 to the\n * absolute year as a hack to get around this, but unfortunately\n * they've run into a Y10K problem as of last year (it can't store\n * 5-digit years, either)\n *\n * <li>no way to store auxiliary numerical data (like Weiserjahre,\n * or earlywood/latewood)\n *\n * <li>no way to distinguish with certainty if a summed file is\n * indexed (as far as I can tell, but see the 800 Rule, below)\n *\n * <li>no MIME type (even an application/x- one), standard file\n * extension, or telltale opening signature\n *\n * </ul>\n *\n * <p>What it does do well is store raw data, readable by every dendro\n * program ever written (yet another win for open standards).\n * Unfortunately, they never bothered to make an improved format after\n * they stopped using punchcards, so every other program also has a\n * (better) native format.  Thus we have a dozen completely\n * incompatible file formats today.</p>\n *\n * <h3>File Format</h3>\n *\n * <p>There are two variants of Tucson files: raw and processed.\n * Processed files hold data that is indexed, summed, or both.</p>\n *\n * <p>There appear to be subtle variations on each type, like whether\n * to fill out the last decade with extra 0's after the\n * 999-terminator, that different programs have introduced over the\n * years.  I think this class can read any type of Tucson file\n * correctly.</p>\n *\n * <h3>Raw Samples</h3>\n *\n * <pre>\n * xxxxxx  yyyy\n * </pre>\n *\n * <table border=\"0\">\n * <tr><th>letter</th><th>description</th></tr>\n * <tr><td>x</td><td>id number (6 digits)</td>\n * <tr><td>y</td><td>decade starting year (2 spaces + 4 digits)</td>\n * </table>\n *\n * // WRITE ME\n *\n * <h3>Processed Samples</h3>\n *\n * // WRITE ME\n *\n * DETERMINING IF A FILE IS INDEXED: 800-rule (obsolete?)\n *\n * <h3>Reference</h3>\n *\n * <p>See NOAA's\n * <a href=\"http://www.ngdc.noaa.gov/paleo/treeinfo.html\">Tree Ring Data\n * Description</a>.  It's the only actual description of the Tucson format\n * I've ever seen, but it doesn't document very much.</p>\n *\n * @author Ken Harris &lt;kbh7 <i style=\"color: gray\">at</i> cornell <i style=\"color: gray\">dot</i> edu&gt;\n * @version $Id: TucsonSimple.java,v 1.1 2006/04/25 20:21:09 lucasmo Exp $\n */\npublic class TucsonSimple implements Filetype {\n\n    public String toString() {\n        return I18n.getText(\"format.tucsonsimple\");\n    }\n\n    public String getDefaultExtension() {\n        // .TUC? .MST?\n        return \".RWL\";\n    }\n\n    public Sample load(BufferedReader r) throws IOException {\n        // we don't do any loading; Tucson handles that for us.\n        throw new WrongFiletypeException();\n    }\n\n    // ------------------------ start saver -------------------------\n    // 6-digit code\n    private String make6digitCode(Sample s) {\n        String code;\n        if (s.meta.containsKey(\"id\"))\n            code = s.meta.get(\"id\").toString();\n        else\n            code = \"000000\";\n        // ensure exactly 6 chars\n        if (code.length() > 6)\n            code = code.substring(0, 6);\n        else\n            while (code.length() < 6) code += \" \";\n        return code;\n    }\n\n    // write out 6-digit code, then year.\n    private void saveRowHeader(BufferedWriter w, Sample s, String code, int yearWidth, Year y) throws IOException {\n        // don't print the decade for the first one\n        String prefix;\n        if (y.compareTo(s.range.getStart()) < 0)\n            prefix = s.range.getStart().toString();\n        else\n            prefix = y.toString();\n        while (prefix.length() < yearWidth) prefix = \" \" + prefix;\n        w.write(code + prefix);\n    }\n\n    protected void saveData(Sample s, BufferedWriter w) throws IOException {\n        // punchcard formats like tucson generally can't handle BC (we\n        // might not save it with the range it's date to, since tucson\n        // can't handle BC years -- so this will often (but not\n        // always) be set to s.range.)\n        Range r = computeRange(s);\n        // start and end years\n        Year start = r.getStart();\n        Year end = r.getEnd();\n        // 6-digit code which starts each line\n        String code = make6digitCode(s);\n        // dirty kludge hack: It's simple. we don't want any of the\n        // advanced features of tucson.\n        boolean isSummed = false;\n        boolean isProcessed = false;\n        // start year; processed files always start on the decade\n        Year y = start;\n        if (isProcessed)\n            y = y.add(-start.column());\n        for (; ; ) {\n            // row header\n            if (y.column() == 0 || (y.equals(start) && !isProcessed))\n                saveRowHeader(w, s, code, (isProcessed ? 4 : 6), y);\n            // out of range (fixme: is isProcessed really needed here?)\n            if (y.compareTo(end) > 0 || (isProcessed && y.compareTo(start) < 0)) {\n                if (!isProcessed) {\n                    // \"   999\", and STOP\n                    w.write(\"   999\");\n                    break;\n                } else {\n                    // \"9990   \" or \"9990  0\"\n                    w.write(isSummed ? \"9990  0\" : \"9990   \");\n                }\n            } else {\n                // in range\n                // data: \"%4d\" / %6d\n                w.write(StringUtils.leftPad(s.data.get(y.diff(start)).toString(), (isProcessed ? 4 : 6)));\n                // count: \"%3d\" (right-align)\n                if (isSummed)\n                    w.write(StringUtils.leftPad(s.count.get(y.diff(start)).toString(), 3));\n                else if (// which is really isIndexed\n                isProcessed)\n                    w.write(\"   \");\n            }\n            // processed files end only after 9cols+eoln\n            if (isProcessed && y.compareTo(end) > 0 && y.column() == 9)\n                break;\n            // eoln\n            if (y.column() == 9)\n                w.newLine();\n            // inc\n            y = y.add(+1);\n        }\n        w.newLine();\n    }\n\n    // make sure this sample's range doesn't go BC.\n    // simply flagging an error is dumb. why yell at the user for having data\n    // that exceeds the capabilities of this format?\n    // better:\n    // -- if start>=1, use range as-is\n    // -- if start+8000>=1, use range+8000 (some labs do this, right?)\n    // -- if even that doesn't work, just start at 1001\n    private Range computeRange(Sample s) {\n        Year start = s.range.getStart();\n        // if it's AD-only, we're fine\n        if (start.compareTo(new Year(1)) >= 0)\n            return s.range;\n        // if adding 8000 makes it AD, do that\n        if (start.add(8000).compareTo(new Year(1)) >= 0)\n            return s.range.redateBy(8000);\n        // ouch.  just start it at 1001.\n        return s.range.redateStartTo(new Year(1001));\n    }\n\n    public void save(Sample s, BufferedWriter w) throws IOException {\n        // data only!\n        saveData(s, w);\n    }\n}\n",
		"id": "/EvoSuiteBenchmark/35_corina/src/main/java/corina/formats/TucsonSimple.java",
		"test_prompt": "// TucsonSimpleTest.java\n// This file is part of Corina.\n//\n// Corina is free software; you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation; either version 2 of the License, or\n// (at your option) any later version.\n//\n// Corina is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Corina; if not, write to the Free Software\n// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n//\n// Copyright 2001 Ken Harris <kbh7@cornell.edu>\n//\npackage corina.formats;\n\nimport corina.Year;\nimport corina.Range;\nimport corina.Sample;\nimport corina.util.StringUtils;\nimport corina.ui.I18n;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.util.HashMap;\nimport java.io.BufferedReader;\nimport java.io.BufferedWriter;\nimport java.io.IOException;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link TucsonSimple}.\n* It contains ten unit test cases for the {@link TucsonSimple#load(BufferedReader)} method.\n*/\nclass TucsonSimpleTest {"
	},
	{
		"original_code": "// Hohenheim.java\n//\n// This file is part of Corina.\n//\n// Corina is free software; you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation; either version 2 of the License, or\n// (at your option) any later version.\n//\n// Corina is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Corina; if not, write to the Free Software\n// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n//\n// Copyright 2001 Ken Harris <kbh7@cornell.edu>\n//\npackage corina.formats;\n\nimport corina.Year;\nimport corina.Range;\nimport corina.Sample;\nimport corina.Weiserjahre;\nimport corina.util.StringUtils;\nimport corina.ui.I18n;\nimport java.util.ArrayList;\nimport java.io.BufferedReader;\nimport java.io.BufferedWriter;\nimport java.io.IOException;\n\n/**\n *   \"Hohemheim\" format.  I do not know what program uses this format\n *   natively.\n *\n *   <p>I have been given one .K file and one .M file, and been told to\n *   write a Hohemheim interface from that.  I'm making huge assumptions\n *   about Hohemheim's program.  The only guarantee I can make today is\n *   that this will correctly load ABI_HOH.K and ABI_HOH.M.  I don't\n *   even know what all the metadata fields are, so I can't save\n *   Hohemheim files.</p>\n *\n *   <p>Found a partial spec in Frank Rinn's TSAP manual, page 39.  He\n *   calls it \"Hemmenhofen\".</p>\n *\n *   <p>Apparently there are 2 Hohemheim file formats.  .K files are\n *   data-only, and .M files are data-count-weiserjahre.  Unfortunately,\n *   I'm not going to count on the filename extension being correct for\n *   figuring out what type it is, because apparently nobody ever cares\n *   enough to be consistent.  And the headers are identical, for better\n *   or for worse.  On one hand, I can use the same parser for that\n *   line, but on the other hand, I won't know until it's too late which\n *   parser to use for the data.</p>\n *\n *   <p>Possible bug: it stops when it hits a value of 0.  On a sample\n *   that ends in a -9 year, I suppose it would not have any\n *   zero-padding, so I should watch readLine() as well.</p>\n *\n *   @author Ken Harris &lt;kbh7 <i style=\"color: gray\">at</i> cornell <i style=\"color: gray\">dot</i> edu&gt;\n *   @version $Id: Hohenheim.java,v 1.1 2004/01/18 17:58:11 aaron Exp $\n */\npublic class Hohenheim implements Filetype {\n\n    public String toString() {\n        return I18n.getText(\"format.hohenheim\");\n    }\n\n    public String getDefaultExtension() {\n        // ???\n        return \".M\";\n    }\n\n    public Sample load(BufferedReader r) throws IOException {\n        // make sure it's a hohenheim file: first lines starts with \"+\"\n        String line = r.readLine();\n        if (line == null || !line.startsWith(\"+\"))\n            // no header found\n            throw new WrongFiletypeException();\n        // new sample, with given filename\n        Sample s = new Sample();\n        // first line has the title after the \"+\" (padded)\n        s.meta.put(\"title\", line.substring(1).trim());\n        // second line has all the metadata, range, etc.\n        line = r.readLine();\n        // #4: species\n        s.meta.put(\"species\", line.substring(34, 37));\n        // s.meta.put(\"sapwood\", new Integer(line.substring(40, 43)));\n        // #6: sapwood\n        // WHY is this disabled?\n        // -- TODO: add other metadata parsing here!\n        // start/end are in the first line, too\n        Year start;\n        try {\n            start = new Year(line.substring(53, 58));\n        } catch (NumberFormatException nfe) {\n            throw new IOException(\"can't parse year: \" + line);\n        }\n        // if i was just loading metadata, i'd just take end from\n        // (59..64), but since i'm loading all of the data anyway,\n        // i'll use the actual data length, in case it's wrong here.\n        // column to start parsing at\n        int column = 0;\n        line = r.readLine();\n        // summed files have length=76, raw files have length=40.  if\n        // it's summed, make a new List for the counts.\n        boolean isSummed = (line.length() > 70);\n        if (isSummed)\n            s.count = new ArrayList();\n        if (!isSummed) {\n            // data -- raw\n            for (; ; ) {\n                // datum\n                String text = \"\";\n                int datum = 0;\n                try {\n                    text = line.substring(column, column + 4).trim();\n                    datum = Integer.parseInt(text);\n                } catch (NumberFormatException nfe) {\n                    throw new IOException(\"Can't parse '\" + text + \"' as a number.\");\n                } catch (StringIndexOutOfBoundsException sioobe) {\n                    throw new WrongFiletypeException();\n                }\n                // on zero, break;\n                if (datum == 0)\n                    break;\n                // add this data\n                s.data.add(new Integer(datum));\n                // next column: 4 spaces away.  4 10's are 40, so skip\n                // back to 0.\n                column += 4;\n                if (column == 40) {\n                    column = 0;\n                    line = r.readLine();\n                }\n            }\n        } else {\n            // data -- summed\n            s.incr = new ArrayList();\n            s.decr = new ArrayList();\n            for (; ; ) {\n                // datum, count, up, down\n                int datum = 0, count = 0, up = 0, dn = 0;\n                try {\n                    datum = Integer.parseInt(line.substring(column, column + 4).trim());\n                    count = Integer.parseInt(line.substring(column + 5, column + 9).trim());\n                    up = Integer.parseInt(line.substring(column + 10, column + 14).trim());\n                    dn = Integer.parseInt(line.substring(column + 15, column + 19).trim());\n                } catch (NumberFormatException nfe) {\n                    throw new IOException(\"'\" + nfe.getMessage() + \"' isn't a number.\");\n                }\n                // on zero, break;\n                if (datum == 0)\n                    break;\n                // insert this data\n                s.data.add(new Integer(datum));\n                s.count.add(new Integer(count));\n                s.incr.add(new Integer(up));\n                s.decr.add(new Integer(dn));\n                // next column: 19 spaces away.  4 19's are 76, so\n                // skip back to 0.\n                column += 19;\n                if (column > 70) {\n                    column = 0;\n                    line = r.readLine();\n                }\n            }\n        }\n        // compute range\n        s.range = new Range(start, s.data.size());\n        // return it\n        return s;\n    }\n\n    public void save(Sample sample, BufferedWriter w) throws IOException {\n        // header -- 2 lines of metadata: WRITE ME\n        StringBuffer line1, line2;\n        line1 = new StringBuffer(\"+                                        \" + \"                                    \");\n        w.write(line1.toString());\n        w.newLine();\n        line2 = new StringBuffer(\".                                        \" + \"                                      \");\n        // write out the range/start/end, \"%5d\"-style\n        line2.replace(47, 52, StringUtils.leftPad(String.valueOf(sample.range.span()), 5));\n        line2.replace(53, 58, StringUtils.leftPad(sample.range.getStart().toString(), 5));\n        line2.replace(59, 64, StringUtils.leftPad(sample.range.getEnd().toString(), 5));\n        w.write(line2.toString());\n        w.newLine();\n        if (sample.isSummed()) {\n            int i, n = sample.data.size();\n            for (i = 0; i < n; i++) {\n                w.write(StringUtils.leftPad(sample.data.get(i).toString(), 4));\n                w.write(StringUtils.leftPad(sample.count.get(i).toString(), 5));\n                w.write(StringUtils.leftPad(sample.incr.get(i).toString(), 5));\n                w.write(StringUtils.leftPad(sample.decr.get(i).toString(), 5));\n                if (i % 4 == 3)\n                    w.newLine();\n            }\n            // step back one?\n            i--;\n            if (i % 4 != 3) {\n                while (i++ % 4 != 3) w.write(\"   0    0    0    0\");\n                w.newLine();\n            }\n        } else {\n            // not summed\n            int i, n = sample.data.size();\n            for (i = 0; i < n; i++) {\n                String x = StringUtils.leftPad(sample.data.get(i).toString(), 4);\n                w.write(x);\n                if (i % 10 == 9)\n                    w.newLine();\n            }\n            // step back one?\n            i--;\n            if (i % 10 != 9) {\n                while (i++ % 10 != 9) w.write(\"   0\");\n                w.newLine();\n            }\n        }\n    }\n}\n",
		"id": "/EvoSuiteBenchmark/35_corina/src/main/java/corina/formats/Hohenheim.java",
		"test_prompt": "// HohenheimTest.java\n// This file is part of Corina.\n//\n// Corina is free software; you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation; either version 2 of the License, or\n// (at your option) any later version.\n//\n// Corina is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Corina; if not, write to the Free Software\n// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n//\n// Copyright 2001 Ken Harris <kbh7@cornell.edu>\n//\npackage corina.formats;\n\nimport corina.Year;\nimport corina.Range;\nimport corina.Sample;\nimport corina.Weiserjahre;\nimport corina.util.StringUtils;\nimport corina.ui.I18n;\nimport java.util.ArrayList;\nimport java.io.BufferedReader;\nimport java.io.BufferedWriter;\nimport java.io.IOException;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link Hohenheim}.\n* It contains ten unit test cases for the {@link Hohenheim#load(BufferedReader)} method.\n*/\nclass HohenheimTest {"
	},
	{
		"original_code": "// MultiColumn.java\n//\n// This file is part of Corina.\n//\n// Corina is free software; you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation; either version 2 of the License, or\n// (at your option) any later version.\n//\n// Corina is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Corina; if not, write to the Free Software\n// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n//\n// Copyright 2004 Aaron Hamid <arh14@cornell.edu>\n//\npackage corina.formats;\n\nimport corina.Year;\nimport corina.Range;\nimport corina.Sample;\nimport corina.ui.I18n;\nimport java.util.ArrayList;\nimport java.util.StringTokenizer;\nimport java.util.NoSuchElementException;\nimport java.io.StreamTokenizer;\nimport java.io.BufferedReader;\nimport java.io.BufferedWriter;\nimport java.io.IOException;\n\n/**\n * A modified 2-column output that is a bit prettier.\n *\n * <p>This is useful for transferring data to and from non-dendro\n * programs, like spreadsheets and graphics utilities.</p>\n *\n * <p>Actually, the load() method doesn't care about tabs or newlines\n * - they're both just whitespace.  It loads a sequence of integers in\n * pairs: year datum.  Only the first year matters; all others are\n * ignored.  Year -5 means 5 BC, not 6 BC, like some programs\n * believe.</p>\n *\n * <p>The save() method saves a text file, one year's data per line,\n * as \"year &lt;tab&gt; width\".  (Native newlines are used.)</p>\n *\n * <p>If there's a count (i.e., it's a summed file), it will be saved\n * in 3 columns, the third column being the count.</p>\n *\n * <p>(Perhaps adding count and Weiserjahre would be a useful feature?\n * Make it actually care about newlines, or watch the year values, so\n * it knows what's one year's data.  It should ignore the stop-value\n * \"999\", too, which some programs add.)</p>\n *\n * @author Aaron Hamid arh14 at cornell.edu\n * @version $Id: MultiColumn.java,v 1.4 2006/01/04 07:00:18 lucasmo Exp $\n */\npublic class MultiColumn implements Filetype {\n\n    public String toString() {\n        return I18n.getText(\"format.multi_column\");\n    }\n\n    public String getDefaultExtension() {\n        return \".TXT\";\n    }\n\n    public Sample load(BufferedReader r) throws IOException {\n        throw new UnsupportedOperationException(\"Load not implemented for \" + getClass());\n        /* COPIED from 2column, must reimplement -aaron\n   \n    // sample to return\n    Sample s = new Sample();\n\n    // start/current/end years\n    Year start=null, current=null;\n\n    // maybe read a line of crap, up to 120 chars.\n    maybeEatCrap(s, r);\n\n    // set up a tokenizer on the file\n    StreamTokenizer t = new StreamTokenizer(r);\n\n    // this is the last-chance catch-all for random text data, so\n    // don't be too afraid to throw a WrongFiletypeException:\n    // we'll be getting all sorts of crap here.\n\n    boolean hasYear, hasCount;\n\n    // figure out what it has, by looking at 3 lines\n    try {\n      // we'll read 3 lines, but put them back by the end of the block\n      r.mark(3*80);\n\n      // read 3 lines of numbers -- yes, this means you can't load a 1- or 2-line file.\n\t    float a[] = parseLine(r.readLine());\n\t    float b[] = parseLine(r.readLine());\n\t    float c[] = parseLine(r.readLine());\n            \n      // if they're sequential, they're probably years\n      int a0 = (int) a[0];\n      int b0 = (int) b[0];\n      int c0 = (int) c[0];\n      hasYear = (a0+1==b0) && (b0+1==c0);\n\n      // if there's an extra column, it's the count\n      int normal = 1 + (hasYear ? 1 : 0);\n      hasCount = ((a.length==normal+1) && (b.length==normal+1) && (c.length==normal+1));\n\n      // ok, done with that, put everything back\n      r.reset();\n    } catch (NullPointerException npe) {\n\t    // (thrown by r.readLine())\n      throw new WrongFiletypeException(); // not enough lines\n    }\n\n    // if no year, let's make one up.\n    if (!hasYear)\n        start = Year.DEFAULT;\n\n    // hasData\n    s.data = new ArrayList();\n    if (hasCount)\n        s.count = new ArrayList();\n\n    for (;;) {\n      String line = r.readLine();\n\n      // no more data\n      if (line == null)\n          break;\n\n      // get ready to parse\n      StringTokenizer tok = new StringTokenizer(line, \",; \\t\");\n\n      if (hasYear) {\n    \t\ttry {\n  \t\t    int y;\n  \t\t    String token = tok.nextToken();\n  \t\t    try {\n            y = Integer.parseInt(token);\n  \t\t    } catch (NumberFormatException nfe) {\n            throw new WrongFiletypeException();\n  \t\t    }\n\t\t    // just ignore, unless it's the first one\n\t\t    if (start == null)\n\t\t\tstart = new Year(y);\n\t\t} catch (NoSuchElementException nsee) {\n\t\t    // end of file?\n\t\t    if (start == null)\n\t\t\tthrow new WrongFiletypeException();\n\t\t    else\n\t\t\tbreak;\n\t\t}\n\t    }\n\n            // allow floating-point values here\n\t    float f;\n\t    try {\n\t\tString token = tok.nextToken();\n\t\tf = Float.parseFloat(token);\n\t    } catch (NoSuchElementException nsee) { // not enough tokens\n\t\tthrow new WrongFiletypeException();\n\t    } catch (NumberFormatException nfe) { // not a number\n\t\tthrow new WrongFiletypeException();\n\t    }\n            s.data.add(new Integer(Math.round(f)));\n            \n            if (hasCount) {\n                int c = Integer.parseInt(tok.nextToken());\n                s.count.add(new Integer(c));\n            }\n        }\n\n        // the 800 rule.\n        s.guessIndexed();\n\n        // set range\n        s.range = new Range(start, s.data.size());\n\n        // return it\n        return s;\n      */\n    }\n\n    // if there's a line with text (letters) on it (up to 120 chars long),\n    // put it in the comments field, and skip past it.\n    private void maybeEatCrap(Sample s, BufferedReader r) throws IOException {\n        boolean isCrap = false;\n        r.mark(120);\n        String l = r.readLine();\n        if (l == null) {\n            // empty file!\n            throw new WrongFiletypeException();\n        }\n        for (int i = 0; i < l.length(); i++) {\n            if (Character.isLetter(l.charAt(i))) {\n                isCrap = true;\n                break;\n            }\n        }\n        if (isCrap)\n            s.meta.put(\"comments\", \"Header line was: \\\"\" + l + \"\\\"\");\n        else\n            r.reset();\n    }\n\n    // given a string like \"1 2 3\", return an array like {1f, 2f, 3f}.\n    private float[] parseLine(String s) throws IOException {\n        try {\n            StringTokenizer tok = new StringTokenizer(s, \",; \\t\");\n            int n = tok.countTokens();\n            float[] x = new float[n];\n            for (int i = 0; i < n; i++) x[i] = Float.parseFloat(tok.nextToken());\n            return x;\n        } catch (NumberFormatException nfe) {\n            throw new WrongFiletypeException();\n        }\n    }\n\n    private static void writeHeader(boolean isbc, BufferedWriter w) throws IOException {\n        int start;\n        int end;\n        int add;\n        if (isbc) {\n            w.write('0');\n            w.write('\\t');\n            start = 9;\n            end = 0;\n            add = -1;\n        } else {\n            start = 0;\n            end = 10;\n            add = 1;\n        }\n        for (int i = start; i != end; i += add) {\n            w.write(Integer.toString(i));\n            w.write('\\t');\n        }\n    }\n\n    public void save(Sample s, BufferedWriter w) throws IOException {\n        Year y = s.range.getStart();\n        System.out.println(\"Range start: \" + y);\n        boolean hasCount = (s.count != null);\n        System.out.println(\"Has count: \" + hasCount);\n        // write out the header\n        w.write(\"decade\\t\");\n        boolean isbc = y.compareTo(new Year(1)) < 0;\n        System.out.println(\"isbc? \" + isbc);\n        writeHeader(isbc, w);\n        writeHeader(isbc, w);\n        w.newLine();\n        int datapos = 0;\n        int countpos = 0;\n        while (datapos < s.data.size()) {\n            System.out.println(\"Datapos: \" + datapos);\n            System.out.println(\"Countpos: \" + countpos);\n            System.out.println(\"Year: \" + y);\n            System.out.println(\"Row(\" + y + \"):\" + y.row());\n            // write the decade data, being sure to offset by the position within the decade\n            int column = y.column();\n            System.out.println(\"y.column(): \" + y.column());\n            boolean flipped = isbc ^ (y.compareTo(new Year(1)) < 0);\n            if (flipped) {\n                System.out.println(\"Crossed bc boundary, writing new header. isbc? \" + isbc);\n                isbc = !isbc;\n                writeHeader(isbc, w);\n                writeHeader(isbc, w);\n                w.newLine();\n            }\n            // write the decade\n            w.write(Integer.toString(y.row() * 10));\n            w.write('\\t');\n            int added = 0;\n            for (int i = 0; i < column; i++) {\n                System.out.println(\"year \" + y + \" padding \" + i);\n                w.write('\\t');\n                //y = y.add(+1);\n                //added++;\n            }\n            for (int i = column; i < 10; i++, y.add(1)) {\n                System.out.print(\"year: \" + y + \" column: \" + i + \" datapos \" + datapos + \" data size \" + s.data.size());\n                if (datapos < s.data.size()) {\n                    String datastring = s.data.get(datapos).toString();\n                    System.out.print(\"...writing data: \" + datastring);\n                    w.write(s.data.get(datapos).toString());\n                    datapos++;\n                }\n                System.out.println();\n                w.write('\\t');\n                y = y.add(1);\n                added++;\n            }\n            // rewind to the start of the decade\n            y = y.add(-added);\n            // write the decade counts, being sure to offset by the position within the decade\n            for (int i = 0; i < column; i++) {\n                System.out.println(\"year \" + y + \" padding \" + i);\n                w.write('\\t');\n                //y = y.add(1);\n            }\n            for (int i = column; i < 10; i++) {\n                if (hasCount && countpos < s.count.size()) {\n                    System.out.print(\"year: \" + y + \" column: \" + i + \" countpos \" + countpos + \" count size \" + s.count.size());\n                    String countstring = s.count.get(countpos).toString();\n                    System.out.println(\"writing count: \" + countstring);\n                    w.write(countstring);\n                    countpos++;\n                    System.out.println();\n                }\n                w.write('\\t');\n                y = y.add(1);\n            }\n            w.newLine();\n        }\n    }\n}\n",
		"id": "/EvoSuiteBenchmark/35_corina/src/main/java/corina/formats/MultiColumn.java",
		"test_prompt": "// MultiColumnTest.java\n// This file is part of Corina.\n//\n// Corina is free software; you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation; either version 2 of the License, or\n// (at your option) any later version.\n//\n// Corina is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Corina; if not, write to the Free Software\n// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n//\n// Copyright 2004 Aaron Hamid <arh14@cornell.edu>\n//\npackage corina.formats;\n\nimport corina.Year;\nimport corina.Range;\nimport corina.Sample;\nimport corina.ui.I18n;\nimport java.util.ArrayList;\nimport java.util.StringTokenizer;\nimport java.util.NoSuchElementException;\nimport java.io.StreamTokenizer;\nimport java.io.BufferedReader;\nimport java.io.BufferedWriter;\nimport java.io.IOException;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link MultiColumn}.\n* It contains ten unit test cases for the {@link MultiColumn#load(BufferedReader)} method.\n*/\nclass MultiColumnTest {"
	},
	{
		"original_code": "// ColorUtils.java\n//\n// This file is part of Corina.\n//\n// Corina is free software; you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation; either version 2 of the License, or\n// (at your option) any later version.\n//\n// Corina is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Corina; if not, write to the Free Software\n// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n//\n// Copyright 2001 Ken Harris <kbh7@cornell.edu>\n//\npackage corina.util;\n\nimport java.awt.Color;\n\n/**\n *   Various helpful utilities which operate on Colors.\n *\n *   @see java.awt.Color\n *\n *   @author Ken Harris &lt;kbh7 <i style=\"color: gray\">at</i> cornell <i style=\"color: gray\">dot</i> edu&gt;\n *   @version $Id: ColorUtils.java,v 1.3 2004/01/18 18:12:05 aaron Exp $\n */\npublic class ColorUtils {\n\n    // don't instantiate me\n    private ColorUtils() {\n    }\n\n    /**\n     *  Blend 2 colors equally.\n     * \t@param c1 first color\n     * \t@param c2 second color\n     * \t@return a new Color which is c1 and c2 blended in equal amounts\n     */\n    public static Color blend(Color c1, Color c2) {\n        return new Color((c1.getRed() + c2.getRed()) / 2, (c1.getGreen() + c2.getGreen()) / 2, (c1.getBlue() + c2.getBlue()) / 2);\n    }\n\n    /**\n     *  Blend 2 colors in unequal amounts.  The fractions f1, f2 indicate\n     * \thow much of each color to use; it's assumed that f1+f2=1.0 (or\n     * \tto within Java's tolerance).\n     *\n     * \t<p>For example, the call blend(Color.red, 0.1f, Color.white, 0.9f)\n     * \treturns a new Color which is 10% red and 90% white.</p>\n     *\n     * \t@param c1 first color\n     * \t@param f1 fraction of first color to use\n     * \t@param c2 second color\n     * \t@param f2 fraction of second color to use\n     * \t@return a new Color which is c1 and c2 blended in unequal amounts\n     */\n    public static Color blend(Color c1, float f1, Color c2, float f2) {\n        return new Color((int) (f1 * c1.getRed() + f2 * c2.getRed()), (int) (f1 * c1.getGreen() + f2 * c2.getGreen()), (int) (f1 * c1.getBlue() + f2 * c2.getBlue()));\n    }\n\n    /**\n     *  Make a color transparent.\n     * \t@param c the color to make transparent\n     * \t@param alpha the alpha value to use, as an int (0=transparent,\n     * \t255=opaque)\n     * \t@return a transparent version of the input color\n     */\n    public static Color addAlpha(Color c, int alpha) {\n        return new Color(c.getRed(), c.getGreen(), c.getBlue(), alpha);\n    }\n\n    /**\n     *  Make a color transparent.\n     * \t@param c the color to make transparent\n     * \t@param alpha the alpha value to use, as a float\n     * \t(0.0f=transparent, 1.0f=opaque)\n     * \t@return a transparent version of the input color\n     */\n    public static Color addAlpha(Color c, float alpha) {\n        return addAlpha(c, (int) Math.round(255 * alpha));\n    }\n\n    /**\n     *  Return true if the color is really dark.  (Technically, if its\n     * \tbrightness is less than 10%.)\n     *\n     * \t<p>For example, if you're drawing black text on a region of\n     * \tcolor, you can use this method to determine when to switch to\n     * \twhite.</p>\n     * \t@param c the color to look at\n     * \t@return true, if c is really dark, else false\n     */\n    public static boolean reallyDark(Color c) {\n        synchronized (hue_sat_bri) {\n            Color.RGBtoHSB(c.getRed(), c.getGreen(), c.getBlue(), hue_sat_bri);\n            // pick a value... 10%\n            return (hue_sat_bri[2] < 0.10f);\n        }\n    }\n\n    // i'm assuming i prefer to pay a synchronization penalty\n    // rather than a garbage-creation penalty.  maybe i'm just\n    // paranoid from seeing how bad the garbage penalty is.\n    private static float[] hue_sat_bri = new float[3];\n\n    /**\n     *         Convert a color to grayscale.\n     *\n     *         <p>Taken from\n     *         <a href=\"http://www.photo.net/digital/editing/bwconvert/\">http://www.photo.net/digital/editing/bwconvert/</a>:</p>\n     *\n     * <pre>\n     *     luminance (B&W) = (0.299 x RED) + (0.587 x GREEN) + (0.114 x BLUE)\n     * </pre>\n     *\n     *         <p>(<a href=\"http://developer.gimp.org/api/1.3/libgimpcolor/libgimpcolor-GimpRGB.html\">GIMP's\n     *         values</a> are 0.30, 0.59, and 0.11, which are pretty close.)</p>\n     *\n     *         @param c the color\n     *         @return the color as grayscale\n     */\n    public static Color grayscale(Color c) {\n        int value = (int) (0.299 * c.getRed() + 0.587 * c.getGreen() + 0.114 * c.getBlue());\n        return new Color(value, value, value);\n        // PERF: we'll get lots of these -- cache them?\n    }\n}\n",
		"id": "/EvoSuiteBenchmark/35_corina/src/main/java/corina/util/ColorUtils_0Test.java",
		"test_prompt": "// ColorUtils_0Test.java\n// This file is part of Corina.\n//\n// Corina is free software; you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation; either version 2 of the License, or\n// (at your option) any later version.\n//\n// Corina is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Corina; if not, write to the Free Software\n// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n//\n// Copyright 2001 Ken Harris <kbh7@cornell.edu>\n//\npackage corina.util;\n\nimport java.awt.Color;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link ColorUtils}.\n* It contains ten unit test cases for the {@link ColorUtils#blend(Color, Color)} method.\n*/\nclass ColorUtils_0Test {"
	},
	{
		"original_code": "// ColorUtils.java\n//\n// This file is part of Corina.\n//\n// Corina is free software; you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation; either version 2 of the License, or\n// (at your option) any later version.\n//\n// Corina is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Corina; if not, write to the Free Software\n// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n//\n// Copyright 2001 Ken Harris <kbh7@cornell.edu>\n//\npackage corina.util;\n\nimport java.awt.Color;\n\n/**\n *   Various helpful utilities which operate on Colors.\n *\n *   @see java.awt.Color\n *\n *   @author Ken Harris &lt;kbh7 <i style=\"color: gray\">at</i> cornell <i style=\"color: gray\">dot</i> edu&gt;\n *   @version $Id: ColorUtils.java,v 1.3 2004/01/18 18:12:05 aaron Exp $\n */\npublic class ColorUtils {\n\n    // don't instantiate me\n    private ColorUtils() {\n    }\n\n    /**\n     *  Blend 2 colors equally.\n     * \t@param c1 first color\n     * \t@param c2 second color\n     * \t@return a new Color which is c1 and c2 blended in equal amounts\n     */\n    public static Color blend(Color c1, Color c2) {\n        return new Color((c1.getRed() + c2.getRed()) / 2, (c1.getGreen() + c2.getGreen()) / 2, (c1.getBlue() + c2.getBlue()) / 2);\n    }\n\n    /**\n     *  Blend 2 colors in unequal amounts.  The fractions f1, f2 indicate\n     * \thow much of each color to use; it's assumed that f1+f2=1.0 (or\n     * \tto within Java's tolerance).\n     *\n     * \t<p>For example, the call blend(Color.red, 0.1f, Color.white, 0.9f)\n     * \treturns a new Color which is 10% red and 90% white.</p>\n     *\n     * \t@param c1 first color\n     * \t@param f1 fraction of first color to use\n     * \t@param c2 second color\n     * \t@param f2 fraction of second color to use\n     * \t@return a new Color which is c1 and c2 blended in unequal amounts\n     */\n    public static Color blend(Color c1, float f1, Color c2, float f2) {\n        return new Color((int) (f1 * c1.getRed() + f2 * c2.getRed()), (int) (f1 * c1.getGreen() + f2 * c2.getGreen()), (int) (f1 * c1.getBlue() + f2 * c2.getBlue()));\n    }\n\n    /**\n     *  Make a color transparent.\n     * \t@param c the color to make transparent\n     * \t@param alpha the alpha value to use, as an int (0=transparent,\n     * \t255=opaque)\n     * \t@return a transparent version of the input color\n     */\n    public static Color addAlpha(Color c, int alpha) {\n        return new Color(c.getRed(), c.getGreen(), c.getBlue(), alpha);\n    }\n\n    /**\n     *  Make a color transparent.\n     * \t@param c the color to make transparent\n     * \t@param alpha the alpha value to use, as a float\n     * \t(0.0f=transparent, 1.0f=opaque)\n     * \t@return a transparent version of the input color\n     */\n    public static Color addAlpha(Color c, float alpha) {\n        return addAlpha(c, (int) Math.round(255 * alpha));\n    }\n\n    /**\n     *  Return true if the color is really dark.  (Technically, if its\n     * \tbrightness is less than 10%.)\n     *\n     * \t<p>For example, if you're drawing black text on a region of\n     * \tcolor, you can use this method to determine when to switch to\n     * \twhite.</p>\n     * \t@param c the color to look at\n     * \t@return true, if c is really dark, else false\n     */\n    public static boolean reallyDark(Color c) {\n        synchronized (hue_sat_bri) {\n            Color.RGBtoHSB(c.getRed(), c.getGreen(), c.getBlue(), hue_sat_bri);\n            // pick a value... 10%\n            return (hue_sat_bri[2] < 0.10f);\n        }\n    }\n\n    // i'm assuming i prefer to pay a synchronization penalty\n    // rather than a garbage-creation penalty.  maybe i'm just\n    // paranoid from seeing how bad the garbage penalty is.\n    private static float[] hue_sat_bri = new float[3];\n\n    /**\n     *         Convert a color to grayscale.\n     *\n     *         <p>Taken from\n     *         <a href=\"http://www.photo.net/digital/editing/bwconvert/\">http://www.photo.net/digital/editing/bwconvert/</a>:</p>\n     *\n     * <pre>\n     *     luminance (B&W) = (0.299 x RED) + (0.587 x GREEN) + (0.114 x BLUE)\n     * </pre>\n     *\n     *         <p>(<a href=\"http://developer.gimp.org/api/1.3/libgimpcolor/libgimpcolor-GimpRGB.html\">GIMP's\n     *         values</a> are 0.30, 0.59, and 0.11, which are pretty close.)</p>\n     *\n     *         @param c the color\n     *         @return the color as grayscale\n     */\n    public static Color grayscale(Color c) {\n        int value = (int) (0.299 * c.getRed() + 0.587 * c.getGreen() + 0.114 * c.getBlue());\n        return new Color(value, value, value);\n        // PERF: we'll get lots of these -- cache them?\n    }\n}\n",
		"id": "/EvoSuiteBenchmark/35_corina/src/main/java/corina/util/ColorUtils_1Test.java",
		"test_prompt": "// ColorUtils_1Test.java\n// This file is part of Corina.\n//\n// Corina is free software; you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation; either version 2 of the License, or\n// (at your option) any later version.\n//\n// Corina is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Corina; if not, write to the Free Software\n// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n//\n// Copyright 2001 Ken Harris <kbh7@cornell.edu>\n//\npackage corina.util;\n\nimport java.awt.Color;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link ColorUtils}.\n* It contains ten unit test cases for the {@link ColorUtils#blend(Color, float, Color, float)} method.\n*/\nclass ColorUtils_1Test {"
	},
	{
		"original_code": "// ColorUtils.java\n//\n// This file is part of Corina.\n//\n// Corina is free software; you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation; either version 2 of the License, or\n// (at your option) any later version.\n//\n// Corina is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Corina; if not, write to the Free Software\n// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n//\n// Copyright 2001 Ken Harris <kbh7@cornell.edu>\n//\npackage corina.util;\n\nimport java.awt.Color;\n\n/**\n *   Various helpful utilities which operate on Colors.\n *\n *   @see java.awt.Color\n *\n *   @author Ken Harris &lt;kbh7 <i style=\"color: gray\">at</i> cornell <i style=\"color: gray\">dot</i> edu&gt;\n *   @version $Id: ColorUtils.java,v 1.3 2004/01/18 18:12:05 aaron Exp $\n */\npublic class ColorUtils {\n\n    // don't instantiate me\n    private ColorUtils() {\n    }\n\n    /**\n     *  Blend 2 colors equally.\n     * \t@param c1 first color\n     * \t@param c2 second color\n     * \t@return a new Color which is c1 and c2 blended in equal amounts\n     */\n    public static Color blend(Color c1, Color c2) {\n        return new Color((c1.getRed() + c2.getRed()) / 2, (c1.getGreen() + c2.getGreen()) / 2, (c1.getBlue() + c2.getBlue()) / 2);\n    }\n\n    /**\n     *  Blend 2 colors in unequal amounts.  The fractions f1, f2 indicate\n     * \thow much of each color to use; it's assumed that f1+f2=1.0 (or\n     * \tto within Java's tolerance).\n     *\n     * \t<p>For example, the call blend(Color.red, 0.1f, Color.white, 0.9f)\n     * \treturns a new Color which is 10% red and 90% white.</p>\n     *\n     * \t@param c1 first color\n     * \t@param f1 fraction of first color to use\n     * \t@param c2 second color\n     * \t@param f2 fraction of second color to use\n     * \t@return a new Color which is c1 and c2 blended in unequal amounts\n     */\n    public static Color blend(Color c1, float f1, Color c2, float f2) {\n        return new Color((int) (f1 * c1.getRed() + f2 * c2.getRed()), (int) (f1 * c1.getGreen() + f2 * c2.getGreen()), (int) (f1 * c1.getBlue() + f2 * c2.getBlue()));\n    }\n\n    /**\n     *  Make a color transparent.\n     * \t@param c the color to make transparent\n     * \t@param alpha the alpha value to use, as an int (0=transparent,\n     * \t255=opaque)\n     * \t@return a transparent version of the input color\n     */\n    public static Color addAlpha(Color c, int alpha) {\n        return new Color(c.getRed(), c.getGreen(), c.getBlue(), alpha);\n    }\n\n    /**\n     *  Make a color transparent.\n     * \t@param c the color to make transparent\n     * \t@param alpha the alpha value to use, as a float\n     * \t(0.0f=transparent, 1.0f=opaque)\n     * \t@return a transparent version of the input color\n     */\n    public static Color addAlpha(Color c, float alpha) {\n        return addAlpha(c, (int) Math.round(255 * alpha));\n    }\n\n    /**\n     *  Return true if the color is really dark.  (Technically, if its\n     * \tbrightness is less than 10%.)\n     *\n     * \t<p>For example, if you're drawing black text on a region of\n     * \tcolor, you can use this method to determine when to switch to\n     * \twhite.</p>\n     * \t@param c the color to look at\n     * \t@return true, if c is really dark, else false\n     */\n    public static boolean reallyDark(Color c) {\n        synchronized (hue_sat_bri) {\n            Color.RGBtoHSB(c.getRed(), c.getGreen(), c.getBlue(), hue_sat_bri);\n            // pick a value... 10%\n            return (hue_sat_bri[2] < 0.10f);\n        }\n    }\n\n    // i'm assuming i prefer to pay a synchronization penalty\n    // rather than a garbage-creation penalty.  maybe i'm just\n    // paranoid from seeing how bad the garbage penalty is.\n    private static float[] hue_sat_bri = new float[3];\n\n    /**\n     *         Convert a color to grayscale.\n     *\n     *         <p>Taken from\n     *         <a href=\"http://www.photo.net/digital/editing/bwconvert/\">http://www.photo.net/digital/editing/bwconvert/</a>:</p>\n     *\n     * <pre>\n     *     luminance (B&W) = (0.299 x RED) + (0.587 x GREEN) + (0.114 x BLUE)\n     * </pre>\n     *\n     *         <p>(<a href=\"http://developer.gimp.org/api/1.3/libgimpcolor/libgimpcolor-GimpRGB.html\">GIMP's\n     *         values</a> are 0.30, 0.59, and 0.11, which are pretty close.)</p>\n     *\n     *         @param c the color\n     *         @return the color as grayscale\n     */\n    public static Color grayscale(Color c) {\n        int value = (int) (0.299 * c.getRed() + 0.587 * c.getGreen() + 0.114 * c.getBlue());\n        return new Color(value, value, value);\n        // PERF: we'll get lots of these -- cache them?\n    }\n}\n",
		"id": "/EvoSuiteBenchmark/35_corina/src/main/java/corina/util/ColorUtils_2Test.java",
		"test_prompt": "// ColorUtils_2Test.java\n// This file is part of Corina.\n//\n// Corina is free software; you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation; either version 2 of the License, or\n// (at your option) any later version.\n//\n// Corina is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Corina; if not, write to the Free Software\n// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n//\n// Copyright 2001 Ken Harris <kbh7@cornell.edu>\n//\npackage corina.util;\n\nimport java.awt.Color;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link ColorUtils}.\n* It contains ten unit test cases for the {@link ColorUtils#addAlpha(Color, int)} method.\n*/\nclass ColorUtils_2Test {"
	},
	{
		"original_code": "// ColorUtils.java\n//\n// This file is part of Corina.\n//\n// Corina is free software; you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation; either version 2 of the License, or\n// (at your option) any later version.\n//\n// Corina is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Corina; if not, write to the Free Software\n// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n//\n// Copyright 2001 Ken Harris <kbh7@cornell.edu>\n//\npackage corina.util;\n\nimport java.awt.Color;\n\n/**\n *   Various helpful utilities which operate on Colors.\n *\n *   @see java.awt.Color\n *\n *   @author Ken Harris &lt;kbh7 <i style=\"color: gray\">at</i> cornell <i style=\"color: gray\">dot</i> edu&gt;\n *   @version $Id: ColorUtils.java,v 1.3 2004/01/18 18:12:05 aaron Exp $\n */\npublic class ColorUtils {\n\n    // don't instantiate me\n    private ColorUtils() {\n    }\n\n    /**\n     *  Blend 2 colors equally.\n     * \t@param c1 first color\n     * \t@param c2 second color\n     * \t@return a new Color which is c1 and c2 blended in equal amounts\n     */\n    public static Color blend(Color c1, Color c2) {\n        return new Color((c1.getRed() + c2.getRed()) / 2, (c1.getGreen() + c2.getGreen()) / 2, (c1.getBlue() + c2.getBlue()) / 2);\n    }\n\n    /**\n     *  Blend 2 colors in unequal amounts.  The fractions f1, f2 indicate\n     * \thow much of each color to use; it's assumed that f1+f2=1.0 (or\n     * \tto within Java's tolerance).\n     *\n     * \t<p>For example, the call blend(Color.red, 0.1f, Color.white, 0.9f)\n     * \treturns a new Color which is 10% red and 90% white.</p>\n     *\n     * \t@param c1 first color\n     * \t@param f1 fraction of first color to use\n     * \t@param c2 second color\n     * \t@param f2 fraction of second color to use\n     * \t@return a new Color which is c1 and c2 blended in unequal amounts\n     */\n    public static Color blend(Color c1, float f1, Color c2, float f2) {\n        return new Color((int) (f1 * c1.getRed() + f2 * c2.getRed()), (int) (f1 * c1.getGreen() + f2 * c2.getGreen()), (int) (f1 * c1.getBlue() + f2 * c2.getBlue()));\n    }\n\n    /**\n     *  Make a color transparent.\n     * \t@param c the color to make transparent\n     * \t@param alpha the alpha value to use, as an int (0=transparent,\n     * \t255=opaque)\n     * \t@return a transparent version of the input color\n     */\n    public static Color addAlpha(Color c, int alpha) {\n        return new Color(c.getRed(), c.getGreen(), c.getBlue(), alpha);\n    }\n\n    /**\n     *  Make a color transparent.\n     * \t@param c the color to make transparent\n     * \t@param alpha the alpha value to use, as a float\n     * \t(0.0f=transparent, 1.0f=opaque)\n     * \t@return a transparent version of the input color\n     */\n    public static Color addAlpha(Color c, float alpha) {\n        return addAlpha(c, (int) Math.round(255 * alpha));\n    }\n\n    /**\n     *  Return true if the color is really dark.  (Technically, if its\n     * \tbrightness is less than 10%.)\n     *\n     * \t<p>For example, if you're drawing black text on a region of\n     * \tcolor, you can use this method to determine when to switch to\n     * \twhite.</p>\n     * \t@param c the color to look at\n     * \t@return true, if c is really dark, else false\n     */\n    public static boolean reallyDark(Color c) {\n        synchronized (hue_sat_bri) {\n            Color.RGBtoHSB(c.getRed(), c.getGreen(), c.getBlue(), hue_sat_bri);\n            // pick a value... 10%\n            return (hue_sat_bri[2] < 0.10f);\n        }\n    }\n\n    // i'm assuming i prefer to pay a synchronization penalty\n    // rather than a garbage-creation penalty.  maybe i'm just\n    // paranoid from seeing how bad the garbage penalty is.\n    private static float[] hue_sat_bri = new float[3];\n\n    /**\n     *         Convert a color to grayscale.\n     *\n     *         <p>Taken from\n     *         <a href=\"http://www.photo.net/digital/editing/bwconvert/\">http://www.photo.net/digital/editing/bwconvert/</a>:</p>\n     *\n     * <pre>\n     *     luminance (B&W) = (0.299 x RED) + (0.587 x GREEN) + (0.114 x BLUE)\n     * </pre>\n     *\n     *         <p>(<a href=\"http://developer.gimp.org/api/1.3/libgimpcolor/libgimpcolor-GimpRGB.html\">GIMP's\n     *         values</a> are 0.30, 0.59, and 0.11, which are pretty close.)</p>\n     *\n     *         @param c the color\n     *         @return the color as grayscale\n     */\n    public static Color grayscale(Color c) {\n        int value = (int) (0.299 * c.getRed() + 0.587 * c.getGreen() + 0.114 * c.getBlue());\n        return new Color(value, value, value);\n        // PERF: we'll get lots of these -- cache them?\n    }\n}\n",
		"id": "/EvoSuiteBenchmark/35_corina/src/main/java/corina/util/ColorUtils_3Test.java",
		"test_prompt": "// ColorUtils_3Test.java\n// This file is part of Corina.\n//\n// Corina is free software; you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation; either version 2 of the License, or\n// (at your option) any later version.\n//\n// Corina is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Corina; if not, write to the Free Software\n// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n//\n// Copyright 2001 Ken Harris <kbh7@cornell.edu>\n//\npackage corina.util;\n\nimport java.awt.Color;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link ColorUtils}.\n* It contains ten unit test cases for the {@link ColorUtils#addAlpha(Color, float)} method.\n*/\nclass ColorUtils_3Test {"
	},
	{
		"original_code": "// ColorUtils.java\n//\n// This file is part of Corina.\n//\n// Corina is free software; you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation; either version 2 of the License, or\n// (at your option) any later version.\n//\n// Corina is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Corina; if not, write to the Free Software\n// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n//\n// Copyright 2001 Ken Harris <kbh7@cornell.edu>\n//\npackage corina.util;\n\nimport java.awt.Color;\n\n/**\n *   Various helpful utilities which operate on Colors.\n *\n *   @see java.awt.Color\n *\n *   @author Ken Harris &lt;kbh7 <i style=\"color: gray\">at</i> cornell <i style=\"color: gray\">dot</i> edu&gt;\n *   @version $Id: ColorUtils.java,v 1.3 2004/01/18 18:12:05 aaron Exp $\n */\npublic class ColorUtils {\n\n    // don't instantiate me\n    private ColorUtils() {\n    }\n\n    /**\n     *  Blend 2 colors equally.\n     * \t@param c1 first color\n     * \t@param c2 second color\n     * \t@return a new Color which is c1 and c2 blended in equal amounts\n     */\n    public static Color blend(Color c1, Color c2) {\n        return new Color((c1.getRed() + c2.getRed()) / 2, (c1.getGreen() + c2.getGreen()) / 2, (c1.getBlue() + c2.getBlue()) / 2);\n    }\n\n    /**\n     *  Blend 2 colors in unequal amounts.  The fractions f1, f2 indicate\n     * \thow much of each color to use; it's assumed that f1+f2=1.0 (or\n     * \tto within Java's tolerance).\n     *\n     * \t<p>For example, the call blend(Color.red, 0.1f, Color.white, 0.9f)\n     * \treturns a new Color which is 10% red and 90% white.</p>\n     *\n     * \t@param c1 first color\n     * \t@param f1 fraction of first color to use\n     * \t@param c2 second color\n     * \t@param f2 fraction of second color to use\n     * \t@return a new Color which is c1 and c2 blended in unequal amounts\n     */\n    public static Color blend(Color c1, float f1, Color c2, float f2) {\n        return new Color((int) (f1 * c1.getRed() + f2 * c2.getRed()), (int) (f1 * c1.getGreen() + f2 * c2.getGreen()), (int) (f1 * c1.getBlue() + f2 * c2.getBlue()));\n    }\n\n    /**\n     *  Make a color transparent.\n     * \t@param c the color to make transparent\n     * \t@param alpha the alpha value to use, as an int (0=transparent,\n     * \t255=opaque)\n     * \t@return a transparent version of the input color\n     */\n    public static Color addAlpha(Color c, int alpha) {\n        return new Color(c.getRed(), c.getGreen(), c.getBlue(), alpha);\n    }\n\n    /**\n     *  Make a color transparent.\n     * \t@param c the color to make transparent\n     * \t@param alpha the alpha value to use, as a float\n     * \t(0.0f=transparent, 1.0f=opaque)\n     * \t@return a transparent version of the input color\n     */\n    public static Color addAlpha(Color c, float alpha) {\n        return addAlpha(c, (int) Math.round(255 * alpha));\n    }\n\n    /**\n     *  Return true if the color is really dark.  (Technically, if its\n     * \tbrightness is less than 10%.)\n     *\n     * \t<p>For example, if you're drawing black text on a region of\n     * \tcolor, you can use this method to determine when to switch to\n     * \twhite.</p>\n     * \t@param c the color to look at\n     * \t@return true, if c is really dark, else false\n     */\n    public static boolean reallyDark(Color c) {\n        synchronized (hue_sat_bri) {\n            Color.RGBtoHSB(c.getRed(), c.getGreen(), c.getBlue(), hue_sat_bri);\n            // pick a value... 10%\n            return (hue_sat_bri[2] < 0.10f);\n        }\n    }\n\n    // i'm assuming i prefer to pay a synchronization penalty\n    // rather than a garbage-creation penalty.  maybe i'm just\n    // paranoid from seeing how bad the garbage penalty is.\n    private static float[] hue_sat_bri = new float[3];\n\n    /**\n     *         Convert a color to grayscale.\n     *\n     *         <p>Taken from\n     *         <a href=\"http://www.photo.net/digital/editing/bwconvert/\">http://www.photo.net/digital/editing/bwconvert/</a>:</p>\n     *\n     * <pre>\n     *     luminance (B&W) = (0.299 x RED) + (0.587 x GREEN) + (0.114 x BLUE)\n     * </pre>\n     *\n     *         <p>(<a href=\"http://developer.gimp.org/api/1.3/libgimpcolor/libgimpcolor-GimpRGB.html\">GIMP's\n     *         values</a> are 0.30, 0.59, and 0.11, which are pretty close.)</p>\n     *\n     *         @param c the color\n     *         @return the color as grayscale\n     */\n    public static Color grayscale(Color c) {\n        int value = (int) (0.299 * c.getRed() + 0.587 * c.getGreen() + 0.114 * c.getBlue());\n        return new Color(value, value, value);\n        // PERF: we'll get lots of these -- cache them?\n    }\n}\n",
		"id": "/EvoSuiteBenchmark/35_corina/src/main/java/corina/util/ColorUtils_4Test.java",
		"test_prompt": "// ColorUtils_4Test.java\n// This file is part of Corina.\n//\n// Corina is free software; you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation; either version 2 of the License, or\n// (at your option) any later version.\n//\n// Corina is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Corina; if not, write to the Free Software\n// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n//\n// Copyright 2001 Ken Harris <kbh7@cornell.edu>\n//\npackage corina.util;\n\nimport java.awt.Color;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link ColorUtils}.\n* It contains ten unit test cases for the {@link ColorUtils#reallyDark(Color)} method.\n*/\nclass ColorUtils_4Test {"
	},
	{
		"original_code": "// ColorUtils.java\n//\n// This file is part of Corina.\n//\n// Corina is free software; you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation; either version 2 of the License, or\n// (at your option) any later version.\n//\n// Corina is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Corina; if not, write to the Free Software\n// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n//\n// Copyright 2001 Ken Harris <kbh7@cornell.edu>\n//\npackage corina.util;\n\nimport java.awt.Color;\n\n/**\n *   Various helpful utilities which operate on Colors.\n *\n *   @see java.awt.Color\n *\n *   @author Ken Harris &lt;kbh7 <i style=\"color: gray\">at</i> cornell <i style=\"color: gray\">dot</i> edu&gt;\n *   @version $Id: ColorUtils.java,v 1.3 2004/01/18 18:12:05 aaron Exp $\n */\npublic class ColorUtils {\n\n    // don't instantiate me\n    private ColorUtils() {\n    }\n\n    /**\n     *  Blend 2 colors equally.\n     * \t@param c1 first color\n     * \t@param c2 second color\n     * \t@return a new Color which is c1 and c2 blended in equal amounts\n     */\n    public static Color blend(Color c1, Color c2) {\n        return new Color((c1.getRed() + c2.getRed()) / 2, (c1.getGreen() + c2.getGreen()) / 2, (c1.getBlue() + c2.getBlue()) / 2);\n    }\n\n    /**\n     *  Blend 2 colors in unequal amounts.  The fractions f1, f2 indicate\n     * \thow much of each color to use; it's assumed that f1+f2=1.0 (or\n     * \tto within Java's tolerance).\n     *\n     * \t<p>For example, the call blend(Color.red, 0.1f, Color.white, 0.9f)\n     * \treturns a new Color which is 10% red and 90% white.</p>\n     *\n     * \t@param c1 first color\n     * \t@param f1 fraction of first color to use\n     * \t@param c2 second color\n     * \t@param f2 fraction of second color to use\n     * \t@return a new Color which is c1 and c2 blended in unequal amounts\n     */\n    public static Color blend(Color c1, float f1, Color c2, float f2) {\n        return new Color((int) (f1 * c1.getRed() + f2 * c2.getRed()), (int) (f1 * c1.getGreen() + f2 * c2.getGreen()), (int) (f1 * c1.getBlue() + f2 * c2.getBlue()));\n    }\n\n    /**\n     *  Make a color transparent.\n     * \t@param c the color to make transparent\n     * \t@param alpha the alpha value to use, as an int (0=transparent,\n     * \t255=opaque)\n     * \t@return a transparent version of the input color\n     */\n    public static Color addAlpha(Color c, int alpha) {\n        return new Color(c.getRed(), c.getGreen(), c.getBlue(), alpha);\n    }\n\n    /**\n     *  Make a color transparent.\n     * \t@param c the color to make transparent\n     * \t@param alpha the alpha value to use, as a float\n     * \t(0.0f=transparent, 1.0f=opaque)\n     * \t@return a transparent version of the input color\n     */\n    public static Color addAlpha(Color c, float alpha) {\n        return addAlpha(c, (int) Math.round(255 * alpha));\n    }\n\n    /**\n     *  Return true if the color is really dark.  (Technically, if its\n     * \tbrightness is less than 10%.)\n     *\n     * \t<p>For example, if you're drawing black text on a region of\n     * \tcolor, you can use this method to determine when to switch to\n     * \twhite.</p>\n     * \t@param c the color to look at\n     * \t@return true, if c is really dark, else false\n     */\n    public static boolean reallyDark(Color c) {\n        synchronized (hue_sat_bri) {\n            Color.RGBtoHSB(c.getRed(), c.getGreen(), c.getBlue(), hue_sat_bri);\n            // pick a value... 10%\n            return (hue_sat_bri[2] < 0.10f);\n        }\n    }\n\n    // i'm assuming i prefer to pay a synchronization penalty\n    // rather than a garbage-creation penalty.  maybe i'm just\n    // paranoid from seeing how bad the garbage penalty is.\n    private static float[] hue_sat_bri = new float[3];\n\n    /**\n     *         Convert a color to grayscale.\n     *\n     *         <p>Taken from\n     *         <a href=\"http://www.photo.net/digital/editing/bwconvert/\">http://www.photo.net/digital/editing/bwconvert/</a>:</p>\n     *\n     * <pre>\n     *     luminance (B&W) = (0.299 x RED) + (0.587 x GREEN) + (0.114 x BLUE)\n     * </pre>\n     *\n     *         <p>(<a href=\"http://developer.gimp.org/api/1.3/libgimpcolor/libgimpcolor-GimpRGB.html\">GIMP's\n     *         values</a> are 0.30, 0.59, and 0.11, which are pretty close.)</p>\n     *\n     *         @param c the color\n     *         @return the color as grayscale\n     */\n    public static Color grayscale(Color c) {\n        int value = (int) (0.299 * c.getRed() + 0.587 * c.getGreen() + 0.114 * c.getBlue());\n        return new Color(value, value, value);\n        // PERF: we'll get lots of these -- cache them?\n    }\n}\n",
		"id": "/EvoSuiteBenchmark/35_corina/src/main/java/corina/util/ColorUtils_5Test.java",
		"test_prompt": "// ColorUtils_5Test.java\n// This file is part of Corina.\n//\n// Corina is free software; you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation; either version 2 of the License, or\n// (at your option) any later version.\n//\n// Corina is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Corina; if not, write to the Free Software\n// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n//\n// Copyright 2001 Ken Harris <kbh7@cornell.edu>\n//\npackage corina.util;\n\nimport java.awt.Color;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link ColorUtils}.\n* It contains ten unit test cases for the {@link ColorUtils#grayscale(Color)} method.\n*/\nclass ColorUtils_5Test {"
	},
	{
		"original_code": "// StringUtils.java\n//\n// This file is part of Corina.\n//\n// Corina is free software; you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation; either version 2 of the License, or\n// (at your option) any later version.\n//\n// Corina is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Corina; if not, write to the Free Software\n// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n//\n// Copyright 2001 Ken Harris <kbh7@cornell.edu>\n//\npackage corina.util;\n\nimport java.util.StringTokenizer;\nimport java.io.UnsupportedEncodingException;\n\n/**\n *   Some handy string utilities.\n *\n *   <h2>Left to do</h2>\n *   <ul>\n *     <li>splitBy() would be shorter/simpler if it used a tokenizer\n *         (see StringTokenizer, countTokens(), nextToken())\n *\n *     <li>splitBy() might be exactly the same as\n *         browser/SearchField.parseIntoWords() -- check it out\n *   </ul>\n *\n *   @author Ken Harris &lt;kbh7 <i style=\"color: gray\">at</i> cornell <i style=\"color: gray\">dot</i> edu&gt;\n *   @version $Id: StringUtils.java,v 1.2 2005/10/29 03:04:11 lucasmo Exp $\n */\npublic class StringUtils {\n\n    // don't instantiate me\n    private StringUtils() {\n    }\n\n    /**\n     *       Pad some text on the left (i.e., right-align it) until it's a\n     *       specified width.  If the text is already longer than the\n     *       desired length, it is returned.\n     *\n     *       @param text string to pad\n     *       @param size length of resulting string\n     *       @return the original text, padded on the left\n     */\n    public static String leftPad(String text, int size) {\n        int numSpaces = size - text.length();\n        if (numSpaces <= 0)\n            return text;\n        StringBuffer buf = new StringBuffer(size);\n        for (int i = 0; i < numSpaces; i++) buf.append(' ');\n        for (int i = numSpaces; i < size; i++) buf.append(text.charAt(i - numSpaces));\n        return buf.toString();\n    }\n\n    /**\n     *       Split some text into lines.  For example,\n     *       <code>\"a\\nb\\nc\"</code> becomes <code>String[]\n     *       {\"a\",\"b\",\"c\"}</code>.\n     *\n     *       @param text the text, separated by <code>'\\n'</code> chars\n     *       @return the string, as an array of strings\n     */\n    public static String[] splitByLines(String text) {\n        return splitBy(text, '\\n');\n    }\n\n    /**\n     *       Split some text, using an arbitrary separator character.\n     *\n     *       @param text the text\n     *       @param sep the separator character to watch for\n     *       @return the string, as an array of strings\n     */\n    public static String[] splitBy(String text, char sep) {\n        // count separators\n        int newlines = 0;\n        for (int i = 0; i < text.length(); i++) if (text.charAt(i) == sep)\n            newlines++;\n        // allocate space for output\n        String[] result = new String[newlines + 1];\n        // next space to fill\n        int n = 0;\n        // create output\n        int start = 0;\n        for (; ; ) {\n            int newline = text.indexOf(sep, start);\n            if (newline == -1) {\n                // (to end)\n                result[n++] = text.substring(start);\n                break;\n            } else {\n                result[n++] = text.substring(start, newline);\n                start = newline + 1;\n            }\n        }\n        // return it\n        return result;\n    }\n\n    /**\n     *        Convert a sequence of integers in a string into an array\n     *        of ints.\n     *\n     *        <p>For example, extractInts(\"1 2 3\") = int[] { 1, 2, 3 }.</p>\n     *\n     *        <p>Bug: what happens if the string isn't parseable?</p>\n     *\n     *        @param s the string to parse\n     *        @return an array of ints, representing the string\n     */\n    public static int[] extractInts(String s) {\n        StringTokenizer tok = new StringTokenizer(s, \" \");\n        int n = tok.countTokens();\n        int[] r = new int[n];\n        for (int i = 0; i < n; i++) r[i] = Integer.parseInt(tok.nextToken());\n        return r;\n    }\n\n    /**\n     *       Given a string, escape any &lt; &gt; &amp; ' \" characters for\n     *       XML.  Also, if any characters are unprintable, they're escaped\n     *       as raw values (&amp;#xxxx;), so loading the output in any old\n     *       text editor shouldn't mangle anything.\n     *\n     *       @param input a string\n     *       @return the same string, with &lt;/&gt;/&amp; escaped\n     */\n    public static String escapeForXML(String input) {\n        // FIXME: if there are no <>& symbols, just return the string\n        // as-is to save the GC\n        // MAYBE: does SAX or somebody already have a method that does\n        // this better?\n        // MAYBE: use regexps in 1.4?\n        // BETTER: isn't there a String.replace() or something that\n        // would do this in about 2 lines?\n        StringBuffer output = new StringBuffer();\n        for (int i = 0; i < input.length(); i++) {\n            char c = input.charAt(i);\n            switch(c) {\n                case '&':\n                    output.append(\"&amp;\");\n                    break;\n                case '<':\n                    output.append(\"&lt;\");\n                    break;\n                case '>':\n                    output.append(\"&gt;\");\n                    break;\n                case '\\\"':\n                    output.append(\"&quot;\");\n                    break;\n                case '\\'':\n                    output.append(\"&apos;\");\n                    break;\n                default:\n                    if (Character.isISOControl(c)) {\n                        // if it's not printable, &#x-escape it.\n                        // (this came up when trying to save\n                        // \"<dating>^D</dating>\" which shouldn't happen,\n                        // anyway, but better safe than sorry.)\n                        // BUG: aren't there non-iso-control characters\n                        // which won't show up correctly?  do they need\n                        // the right encoding=\"\"?  do they have it?\n                        if (c < 32)\n                            output.append(\"ILLEGAL-XML-CHAR:\");\n                        else\n                            output.append(\"&#x\");\n                        String hex = Integer.toHexString((int) c);\n                        for (int ii = 0; ii < 4 - hex.length(); ii++) output.append(\"0\");\n                        output.append(hex);\n                        output.append(\";\");\n                    } else {\n                        output.append(c);\n                    }\n            }\n        }\n        return output.toString();\n    }\n\n    /**\n     *       In a string, replace one substring with another.\n     *\n     *       <p>If str contains source, return a new string with (the first\n     *       occurrence of) source replaced by target.</p>\n     *\n     *       <p>If str doesn't contain source (or str is the empty string),\n     *       returns str.</p>\n     *\n     *       <p>Think: str ~= s/source/target/</p>\n     *\n     *       <p>This is like Java 1.4's String.replaceFirst() method; when I\n     *       decide to drop support for Java 1.3, I can use that method\n     *       instead.</p>\n     *\n     *       @param str the base string\n     *       @param source the substring to look for\n     *       @param target the replacement string to use\n     *       @return the original string, str, with its first instance of\n     *       source replaced by target\n     */\n    public static String substitute(String str, String source, String target) {\n        int index = str.indexOf(source);\n        if (// not present\n        index == -1)\n            return str;\n        int start = index, end = index + source.length();\n        return str.substring(0, start) + target + str.substring(end);\n    }\n}\n",
		"id": "/EvoSuiteBenchmark/35_corina/src/main/java/corina/util/StringUtils_0Test.java",
		"test_prompt": "// StringUtils_0Test.java\n// This file is part of Corina.\n//\n// Corina is free software; you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation; either version 2 of the License, or\n// (at your option) any later version.\n//\n// Corina is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Corina; if not, write to the Free Software\n// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n//\n// Copyright 2001 Ken Harris <kbh7@cornell.edu>\n//\npackage corina.util;\n\nimport java.util.StringTokenizer;\nimport java.io.UnsupportedEncodingException;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link StringUtils}.\n* It contains ten unit test cases for the {@link StringUtils#leftPad(String, int)} method.\n*/\nclass StringUtils_0Test {"
	},
	{
		"original_code": "// StringUtils.java\n//\n// This file is part of Corina.\n//\n// Corina is free software; you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation; either version 2 of the License, or\n// (at your option) any later version.\n//\n// Corina is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Corina; if not, write to the Free Software\n// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n//\n// Copyright 2001 Ken Harris <kbh7@cornell.edu>\n//\npackage corina.util;\n\nimport java.util.StringTokenizer;\nimport java.io.UnsupportedEncodingException;\n\n/**\n *   Some handy string utilities.\n *\n *   <h2>Left to do</h2>\n *   <ul>\n *     <li>splitBy() would be shorter/simpler if it used a tokenizer\n *         (see StringTokenizer, countTokens(), nextToken())\n *\n *     <li>splitBy() might be exactly the same as\n *         browser/SearchField.parseIntoWords() -- check it out\n *   </ul>\n *\n *   @author Ken Harris &lt;kbh7 <i style=\"color: gray\">at</i> cornell <i style=\"color: gray\">dot</i> edu&gt;\n *   @version $Id: StringUtils.java,v 1.2 2005/10/29 03:04:11 lucasmo Exp $\n */\npublic class StringUtils {\n\n    // don't instantiate me\n    private StringUtils() {\n    }\n\n    /**\n     *       Pad some text on the left (i.e., right-align it) until it's a\n     *       specified width.  If the text is already longer than the\n     *       desired length, it is returned.\n     *\n     *       @param text string to pad\n     *       @param size length of resulting string\n     *       @return the original text, padded on the left\n     */\n    public static String leftPad(String text, int size) {\n        int numSpaces = size - text.length();\n        if (numSpaces <= 0)\n            return text;\n        StringBuffer buf = new StringBuffer(size);\n        for (int i = 0; i < numSpaces; i++) buf.append(' ');\n        for (int i = numSpaces; i < size; i++) buf.append(text.charAt(i - numSpaces));\n        return buf.toString();\n    }\n\n    /**\n     *       Split some text into lines.  For example,\n     *       <code>\"a\\nb\\nc\"</code> becomes <code>String[]\n     *       {\"a\",\"b\",\"c\"}</code>.\n     *\n     *       @param text the text, separated by <code>'\\n'</code> chars\n     *       @return the string, as an array of strings\n     */\n    public static String[] splitByLines(String text) {\n        return splitBy(text, '\\n');\n    }\n\n    /**\n     *       Split some text, using an arbitrary separator character.\n     *\n     *       @param text the text\n     *       @param sep the separator character to watch for\n     *       @return the string, as an array of strings\n     */\n    public static String[] splitBy(String text, char sep) {\n        // count separators\n        int newlines = 0;\n        for (int i = 0; i < text.length(); i++) if (text.charAt(i) == sep)\n            newlines++;\n        // allocate space for output\n        String[] result = new String[newlines + 1];\n        // next space to fill\n        int n = 0;\n        // create output\n        int start = 0;\n        for (; ; ) {\n            int newline = text.indexOf(sep, start);\n            if (newline == -1) {\n                // (to end)\n                result[n++] = text.substring(start);\n                break;\n            } else {\n                result[n++] = text.substring(start, newline);\n                start = newline + 1;\n            }\n        }\n        // return it\n        return result;\n    }\n\n    /**\n     *        Convert a sequence of integers in a string into an array\n     *        of ints.\n     *\n     *        <p>For example, extractInts(\"1 2 3\") = int[] { 1, 2, 3 }.</p>\n     *\n     *        <p>Bug: what happens if the string isn't parseable?</p>\n     *\n     *        @param s the string to parse\n     *        @return an array of ints, representing the string\n     */\n    public static int[] extractInts(String s) {\n        StringTokenizer tok = new StringTokenizer(s, \" \");\n        int n = tok.countTokens();\n        int[] r = new int[n];\n        for (int i = 0; i < n; i++) r[i] = Integer.parseInt(tok.nextToken());\n        return r;\n    }\n\n    /**\n     *       Given a string, escape any &lt; &gt; &amp; ' \" characters for\n     *       XML.  Also, if any characters are unprintable, they're escaped\n     *       as raw values (&amp;#xxxx;), so loading the output in any old\n     *       text editor shouldn't mangle anything.\n     *\n     *       @param input a string\n     *       @return the same string, with &lt;/&gt;/&amp; escaped\n     */\n    public static String escapeForXML(String input) {\n        // FIXME: if there are no <>& symbols, just return the string\n        // as-is to save the GC\n        // MAYBE: does SAX or somebody already have a method that does\n        // this better?\n        // MAYBE: use regexps in 1.4?\n        // BETTER: isn't there a String.replace() or something that\n        // would do this in about 2 lines?\n        StringBuffer output = new StringBuffer();\n        for (int i = 0; i < input.length(); i++) {\n            char c = input.charAt(i);\n            switch(c) {\n                case '&':\n                    output.append(\"&amp;\");\n                    break;\n                case '<':\n                    output.append(\"&lt;\");\n                    break;\n                case '>':\n                    output.append(\"&gt;\");\n                    break;\n                case '\\\"':\n                    output.append(\"&quot;\");\n                    break;\n                case '\\'':\n                    output.append(\"&apos;\");\n                    break;\n                default:\n                    if (Character.isISOControl(c)) {\n                        // if it's not printable, &#x-escape it.\n                        // (this came up when trying to save\n                        // \"<dating>^D</dating>\" which shouldn't happen,\n                        // anyway, but better safe than sorry.)\n                        // BUG: aren't there non-iso-control characters\n                        // which won't show up correctly?  do they need\n                        // the right encoding=\"\"?  do they have it?\n                        if (c < 32)\n                            output.append(\"ILLEGAL-XML-CHAR:\");\n                        else\n                            output.append(\"&#x\");\n                        String hex = Integer.toHexString((int) c);\n                        for (int ii = 0; ii < 4 - hex.length(); ii++) output.append(\"0\");\n                        output.append(hex);\n                        output.append(\";\");\n                    } else {\n                        output.append(c);\n                    }\n            }\n        }\n        return output.toString();\n    }\n\n    /**\n     *       In a string, replace one substring with another.\n     *\n     *       <p>If str contains source, return a new string with (the first\n     *       occurrence of) source replaced by target.</p>\n     *\n     *       <p>If str doesn't contain source (or str is the empty string),\n     *       returns str.</p>\n     *\n     *       <p>Think: str ~= s/source/target/</p>\n     *\n     *       <p>This is like Java 1.4's String.replaceFirst() method; when I\n     *       decide to drop support for Java 1.3, I can use that method\n     *       instead.</p>\n     *\n     *       @param str the base string\n     *       @param source the substring to look for\n     *       @param target the replacement string to use\n     *       @return the original string, str, with its first instance of\n     *       source replaced by target\n     */\n    public static String substitute(String str, String source, String target) {\n        int index = str.indexOf(source);\n        if (// not present\n        index == -1)\n            return str;\n        int start = index, end = index + source.length();\n        return str.substring(0, start) + target + str.substring(end);\n    }\n}\n",
		"id": "/EvoSuiteBenchmark/35_corina/src/main/java/corina/util/StringUtils_1Test.java",
		"test_prompt": "// StringUtils_1Test.java\n// This file is part of Corina.\n//\n// Corina is free software; you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation; either version 2 of the License, or\n// (at your option) any later version.\n//\n// Corina is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Corina; if not, write to the Free Software\n// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n//\n// Copyright 2001 Ken Harris <kbh7@cornell.edu>\n//\npackage corina.util;\n\nimport java.util.StringTokenizer;\nimport java.io.UnsupportedEncodingException;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link StringUtils}.\n* It contains ten unit test cases for the {@link StringUtils#splitByLines(String)} method.\n*/\nclass StringUtils_1Test {"
	},
	{
		"original_code": "// StringUtils.java\n//\n// This file is part of Corina.\n//\n// Corina is free software; you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation; either version 2 of the License, or\n// (at your option) any later version.\n//\n// Corina is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Corina; if not, write to the Free Software\n// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n//\n// Copyright 2001 Ken Harris <kbh7@cornell.edu>\n//\npackage corina.util;\n\nimport java.util.StringTokenizer;\nimport java.io.UnsupportedEncodingException;\n\n/**\n *   Some handy string utilities.\n *\n *   <h2>Left to do</h2>\n *   <ul>\n *     <li>splitBy() would be shorter/simpler if it used a tokenizer\n *         (see StringTokenizer, countTokens(), nextToken())\n *\n *     <li>splitBy() might be exactly the same as\n *         browser/SearchField.parseIntoWords() -- check it out\n *   </ul>\n *\n *   @author Ken Harris &lt;kbh7 <i style=\"color: gray\">at</i> cornell <i style=\"color: gray\">dot</i> edu&gt;\n *   @version $Id: StringUtils.java,v 1.2 2005/10/29 03:04:11 lucasmo Exp $\n */\npublic class StringUtils {\n\n    // don't instantiate me\n    private StringUtils() {\n    }\n\n    /**\n     *       Pad some text on the left (i.e., right-align it) until it's a\n     *       specified width.  If the text is already longer than the\n     *       desired length, it is returned.\n     *\n     *       @param text string to pad\n     *       @param size length of resulting string\n     *       @return the original text, padded on the left\n     */\n    public static String leftPad(String text, int size) {\n        int numSpaces = size - text.length();\n        if (numSpaces <= 0)\n            return text;\n        StringBuffer buf = new StringBuffer(size);\n        for (int i = 0; i < numSpaces; i++) buf.append(' ');\n        for (int i = numSpaces; i < size; i++) buf.append(text.charAt(i - numSpaces));\n        return buf.toString();\n    }\n\n    /**\n     *       Split some text into lines.  For example,\n     *       <code>\"a\\nb\\nc\"</code> becomes <code>String[]\n     *       {\"a\",\"b\",\"c\"}</code>.\n     *\n     *       @param text the text, separated by <code>'\\n'</code> chars\n     *       @return the string, as an array of strings\n     */\n    public static String[] splitByLines(String text) {\n        return splitBy(text, '\\n');\n    }\n\n    /**\n     *       Split some text, using an arbitrary separator character.\n     *\n     *       @param text the text\n     *       @param sep the separator character to watch for\n     *       @return the string, as an array of strings\n     */\n    public static String[] splitBy(String text, char sep) {\n        // count separators\n        int newlines = 0;\n        for (int i = 0; i < text.length(); i++) if (text.charAt(i) == sep)\n            newlines++;\n        // allocate space for output\n        String[] result = new String[newlines + 1];\n        // next space to fill\n        int n = 0;\n        // create output\n        int start = 0;\n        for (; ; ) {\n            int newline = text.indexOf(sep, start);\n            if (newline == -1) {\n                // (to end)\n                result[n++] = text.substring(start);\n                break;\n            } else {\n                result[n++] = text.substring(start, newline);\n                start = newline + 1;\n            }\n        }\n        // return it\n        return result;\n    }\n\n    /**\n     *        Convert a sequence of integers in a string into an array\n     *        of ints.\n     *\n     *        <p>For example, extractInts(\"1 2 3\") = int[] { 1, 2, 3 }.</p>\n     *\n     *        <p>Bug: what happens if the string isn't parseable?</p>\n     *\n     *        @param s the string to parse\n     *        @return an array of ints, representing the string\n     */\n    public static int[] extractInts(String s) {\n        StringTokenizer tok = new StringTokenizer(s, \" \");\n        int n = tok.countTokens();\n        int[] r = new int[n];\n        for (int i = 0; i < n; i++) r[i] = Integer.parseInt(tok.nextToken());\n        return r;\n    }\n\n    /**\n     *       Given a string, escape any &lt; &gt; &amp; ' \" characters for\n     *       XML.  Also, if any characters are unprintable, they're escaped\n     *       as raw values (&amp;#xxxx;), so loading the output in any old\n     *       text editor shouldn't mangle anything.\n     *\n     *       @param input a string\n     *       @return the same string, with &lt;/&gt;/&amp; escaped\n     */\n    public static String escapeForXML(String input) {\n        // FIXME: if there are no <>& symbols, just return the string\n        // as-is to save the GC\n        // MAYBE: does SAX or somebody already have a method that does\n        // this better?\n        // MAYBE: use regexps in 1.4?\n        // BETTER: isn't there a String.replace() or something that\n        // would do this in about 2 lines?\n        StringBuffer output = new StringBuffer();\n        for (int i = 0; i < input.length(); i++) {\n            char c = input.charAt(i);\n            switch(c) {\n                case '&':\n                    output.append(\"&amp;\");\n                    break;\n                case '<':\n                    output.append(\"&lt;\");\n                    break;\n                case '>':\n                    output.append(\"&gt;\");\n                    break;\n                case '\\\"':\n                    output.append(\"&quot;\");\n                    break;\n                case '\\'':\n                    output.append(\"&apos;\");\n                    break;\n                default:\n                    if (Character.isISOControl(c)) {\n                        // if it's not printable, &#x-escape it.\n                        // (this came up when trying to save\n                        // \"<dating>^D</dating>\" which shouldn't happen,\n                        // anyway, but better safe than sorry.)\n                        // BUG: aren't there non-iso-control characters\n                        // which won't show up correctly?  do they need\n                        // the right encoding=\"\"?  do they have it?\n                        if (c < 32)\n                            output.append(\"ILLEGAL-XML-CHAR:\");\n                        else\n                            output.append(\"&#x\");\n                        String hex = Integer.toHexString((int) c);\n                        for (int ii = 0; ii < 4 - hex.length(); ii++) output.append(\"0\");\n                        output.append(hex);\n                        output.append(\";\");\n                    } else {\n                        output.append(c);\n                    }\n            }\n        }\n        return output.toString();\n    }\n\n    /**\n     *       In a string, replace one substring with another.\n     *\n     *       <p>If str contains source, return a new string with (the first\n     *       occurrence of) source replaced by target.</p>\n     *\n     *       <p>If str doesn't contain source (or str is the empty string),\n     *       returns str.</p>\n     *\n     *       <p>Think: str ~= s/source/target/</p>\n     *\n     *       <p>This is like Java 1.4's String.replaceFirst() method; when I\n     *       decide to drop support for Java 1.3, I can use that method\n     *       instead.</p>\n     *\n     *       @param str the base string\n     *       @param source the substring to look for\n     *       @param target the replacement string to use\n     *       @return the original string, str, with its first instance of\n     *       source replaced by target\n     */\n    public static String substitute(String str, String source, String target) {\n        int index = str.indexOf(source);\n        if (// not present\n        index == -1)\n            return str;\n        int start = index, end = index + source.length();\n        return str.substring(0, start) + target + str.substring(end);\n    }\n}\n",
		"id": "/EvoSuiteBenchmark/35_corina/src/main/java/corina/util/StringUtils_2Test.java",
		"test_prompt": "// StringUtils_2Test.java\n// This file is part of Corina.\n//\n// Corina is free software; you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation; either version 2 of the License, or\n// (at your option) any later version.\n//\n// Corina is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Corina; if not, write to the Free Software\n// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n//\n// Copyright 2001 Ken Harris <kbh7@cornell.edu>\n//\npackage corina.util;\n\nimport java.util.StringTokenizer;\nimport java.io.UnsupportedEncodingException;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link StringUtils}.\n* It contains ten unit test cases for the {@link StringUtils#splitBy(String, char)} method.\n*/\nclass StringUtils_2Test {"
	},
	{
		"original_code": "// StringUtils.java\n//\n// This file is part of Corina.\n//\n// Corina is free software; you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation; either version 2 of the License, or\n// (at your option) any later version.\n//\n// Corina is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Corina; if not, write to the Free Software\n// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n//\n// Copyright 2001 Ken Harris <kbh7@cornell.edu>\n//\npackage corina.util;\n\nimport java.util.StringTokenizer;\nimport java.io.UnsupportedEncodingException;\n\n/**\n *   Some handy string utilities.\n *\n *   <h2>Left to do</h2>\n *   <ul>\n *     <li>splitBy() would be shorter/simpler if it used a tokenizer\n *         (see StringTokenizer, countTokens(), nextToken())\n *\n *     <li>splitBy() might be exactly the same as\n *         browser/SearchField.parseIntoWords() -- check it out\n *   </ul>\n *\n *   @author Ken Harris &lt;kbh7 <i style=\"color: gray\">at</i> cornell <i style=\"color: gray\">dot</i> edu&gt;\n *   @version $Id: StringUtils.java,v 1.2 2005/10/29 03:04:11 lucasmo Exp $\n */\npublic class StringUtils {\n\n    // don't instantiate me\n    private StringUtils() {\n    }\n\n    /**\n     *       Pad some text on the left (i.e., right-align it) until it's a\n     *       specified width.  If the text is already longer than the\n     *       desired length, it is returned.\n     *\n     *       @param text string to pad\n     *       @param size length of resulting string\n     *       @return the original text, padded on the left\n     */\n    public static String leftPad(String text, int size) {\n        int numSpaces = size - text.length();\n        if (numSpaces <= 0)\n            return text;\n        StringBuffer buf = new StringBuffer(size);\n        for (int i = 0; i < numSpaces; i++) buf.append(' ');\n        for (int i = numSpaces; i < size; i++) buf.append(text.charAt(i - numSpaces));\n        return buf.toString();\n    }\n\n    /**\n     *       Split some text into lines.  For example,\n     *       <code>\"a\\nb\\nc\"</code> becomes <code>String[]\n     *       {\"a\",\"b\",\"c\"}</code>.\n     *\n     *       @param text the text, separated by <code>'\\n'</code> chars\n     *       @return the string, as an array of strings\n     */\n    public static String[] splitByLines(String text) {\n        return splitBy(text, '\\n');\n    }\n\n    /**\n     *       Split some text, using an arbitrary separator character.\n     *\n     *       @param text the text\n     *       @param sep the separator character to watch for\n     *       @return the string, as an array of strings\n     */\n    public static String[] splitBy(String text, char sep) {\n        // count separators\n        int newlines = 0;\n        for (int i = 0; i < text.length(); i++) if (text.charAt(i) == sep)\n            newlines++;\n        // allocate space for output\n        String[] result = new String[newlines + 1];\n        // next space to fill\n        int n = 0;\n        // create output\n        int start = 0;\n        for (; ; ) {\n            int newline = text.indexOf(sep, start);\n            if (newline == -1) {\n                // (to end)\n                result[n++] = text.substring(start);\n                break;\n            } else {\n                result[n++] = text.substring(start, newline);\n                start = newline + 1;\n            }\n        }\n        // return it\n        return result;\n    }\n\n    /**\n     *        Convert a sequence of integers in a string into an array\n     *        of ints.\n     *\n     *        <p>For example, extractInts(\"1 2 3\") = int[] { 1, 2, 3 }.</p>\n     *\n     *        <p>Bug: what happens if the string isn't parseable?</p>\n     *\n     *        @param s the string to parse\n     *        @return an array of ints, representing the string\n     */\n    public static int[] extractInts(String s) {\n        StringTokenizer tok = new StringTokenizer(s, \" \");\n        int n = tok.countTokens();\n        int[] r = new int[n];\n        for (int i = 0; i < n; i++) r[i] = Integer.parseInt(tok.nextToken());\n        return r;\n    }\n\n    /**\n     *       Given a string, escape any &lt; &gt; &amp; ' \" characters for\n     *       XML.  Also, if any characters are unprintable, they're escaped\n     *       as raw values (&amp;#xxxx;), so loading the output in any old\n     *       text editor shouldn't mangle anything.\n     *\n     *       @param input a string\n     *       @return the same string, with &lt;/&gt;/&amp; escaped\n     */\n    public static String escapeForXML(String input) {\n        // FIXME: if there are no <>& symbols, just return the string\n        // as-is to save the GC\n        // MAYBE: does SAX or somebody already have a method that does\n        // this better?\n        // MAYBE: use regexps in 1.4?\n        // BETTER: isn't there a String.replace() or something that\n        // would do this in about 2 lines?\n        StringBuffer output = new StringBuffer();\n        for (int i = 0; i < input.length(); i++) {\n            char c = input.charAt(i);\n            switch(c) {\n                case '&':\n                    output.append(\"&amp;\");\n                    break;\n                case '<':\n                    output.append(\"&lt;\");\n                    break;\n                case '>':\n                    output.append(\"&gt;\");\n                    break;\n                case '\\\"':\n                    output.append(\"&quot;\");\n                    break;\n                case '\\'':\n                    output.append(\"&apos;\");\n                    break;\n                default:\n                    if (Character.isISOControl(c)) {\n                        // if it's not printable, &#x-escape it.\n                        // (this came up when trying to save\n                        // \"<dating>^D</dating>\" which shouldn't happen,\n                        // anyway, but better safe than sorry.)\n                        // BUG: aren't there non-iso-control characters\n                        // which won't show up correctly?  do they need\n                        // the right encoding=\"\"?  do they have it?\n                        if (c < 32)\n                            output.append(\"ILLEGAL-XML-CHAR:\");\n                        else\n                            output.append(\"&#x\");\n                        String hex = Integer.toHexString((int) c);\n                        for (int ii = 0; ii < 4 - hex.length(); ii++) output.append(\"0\");\n                        output.append(hex);\n                        output.append(\";\");\n                    } else {\n                        output.append(c);\n                    }\n            }\n        }\n        return output.toString();\n    }\n\n    /**\n     *       In a string, replace one substring with another.\n     *\n     *       <p>If str contains source, return a new string with (the first\n     *       occurrence of) source replaced by target.</p>\n     *\n     *       <p>If str doesn't contain source (or str is the empty string),\n     *       returns str.</p>\n     *\n     *       <p>Think: str ~= s/source/target/</p>\n     *\n     *       <p>This is like Java 1.4's String.replaceFirst() method; when I\n     *       decide to drop support for Java 1.3, I can use that method\n     *       instead.</p>\n     *\n     *       @param str the base string\n     *       @param source the substring to look for\n     *       @param target the replacement string to use\n     *       @return the original string, str, with its first instance of\n     *       source replaced by target\n     */\n    public static String substitute(String str, String source, String target) {\n        int index = str.indexOf(source);\n        if (// not present\n        index == -1)\n            return str;\n        int start = index, end = index + source.length();\n        return str.substring(0, start) + target + str.substring(end);\n    }\n}\n",
		"id": "/EvoSuiteBenchmark/35_corina/src/main/java/corina/util/StringUtils_3Test.java",
		"test_prompt": "// StringUtils_3Test.java\n// This file is part of Corina.\n//\n// Corina is free software; you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation; either version 2 of the License, or\n// (at your option) any later version.\n//\n// Corina is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Corina; if not, write to the Free Software\n// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n//\n// Copyright 2001 Ken Harris <kbh7@cornell.edu>\n//\npackage corina.util;\n\nimport java.util.StringTokenizer;\nimport java.io.UnsupportedEncodingException;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link StringUtils}.\n* It contains ten unit test cases for the {@link StringUtils#extractInts(String)} method.\n*/\nclass StringUtils_3Test {"
	},
	{
		"original_code": "// StringUtils.java\n//\n// This file is part of Corina.\n//\n// Corina is free software; you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation; either version 2 of the License, or\n// (at your option) any later version.\n//\n// Corina is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Corina; if not, write to the Free Software\n// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n//\n// Copyright 2001 Ken Harris <kbh7@cornell.edu>\n//\npackage corina.util;\n\nimport java.util.StringTokenizer;\nimport java.io.UnsupportedEncodingException;\n\n/**\n *   Some handy string utilities.\n *\n *   <h2>Left to do</h2>\n *   <ul>\n *     <li>splitBy() would be shorter/simpler if it used a tokenizer\n *         (see StringTokenizer, countTokens(), nextToken())\n *\n *     <li>splitBy() might be exactly the same as\n *         browser/SearchField.parseIntoWords() -- check it out\n *   </ul>\n *\n *   @author Ken Harris &lt;kbh7 <i style=\"color: gray\">at</i> cornell <i style=\"color: gray\">dot</i> edu&gt;\n *   @version $Id: StringUtils.java,v 1.2 2005/10/29 03:04:11 lucasmo Exp $\n */\npublic class StringUtils {\n\n    // don't instantiate me\n    private StringUtils() {\n    }\n\n    /**\n     *       Pad some text on the left (i.e., right-align it) until it's a\n     *       specified width.  If the text is already longer than the\n     *       desired length, it is returned.\n     *\n     *       @param text string to pad\n     *       @param size length of resulting string\n     *       @return the original text, padded on the left\n     */\n    public static String leftPad(String text, int size) {\n        int numSpaces = size - text.length();\n        if (numSpaces <= 0)\n            return text;\n        StringBuffer buf = new StringBuffer(size);\n        for (int i = 0; i < numSpaces; i++) buf.append(' ');\n        for (int i = numSpaces; i < size; i++) buf.append(text.charAt(i - numSpaces));\n        return buf.toString();\n    }\n\n    /**\n     *       Split some text into lines.  For example,\n     *       <code>\"a\\nb\\nc\"</code> becomes <code>String[]\n     *       {\"a\",\"b\",\"c\"}</code>.\n     *\n     *       @param text the text, separated by <code>'\\n'</code> chars\n     *       @return the string, as an array of strings\n     */\n    public static String[] splitByLines(String text) {\n        return splitBy(text, '\\n');\n    }\n\n    /**\n     *       Split some text, using an arbitrary separator character.\n     *\n     *       @param text the text\n     *       @param sep the separator character to watch for\n     *       @return the string, as an array of strings\n     */\n    public static String[] splitBy(String text, char sep) {\n        // count separators\n        int newlines = 0;\n        for (int i = 0; i < text.length(); i++) if (text.charAt(i) == sep)\n            newlines++;\n        // allocate space for output\n        String[] result = new String[newlines + 1];\n        // next space to fill\n        int n = 0;\n        // create output\n        int start = 0;\n        for (; ; ) {\n            int newline = text.indexOf(sep, start);\n            if (newline == -1) {\n                // (to end)\n                result[n++] = text.substring(start);\n                break;\n            } else {\n                result[n++] = text.substring(start, newline);\n                start = newline + 1;\n            }\n        }\n        // return it\n        return result;\n    }\n\n    /**\n     *        Convert a sequence of integers in a string into an array\n     *        of ints.\n     *\n     *        <p>For example, extractInts(\"1 2 3\") = int[] { 1, 2, 3 }.</p>\n     *\n     *        <p>Bug: what happens if the string isn't parseable?</p>\n     *\n     *        @param s the string to parse\n     *        @return an array of ints, representing the string\n     */\n    public static int[] extractInts(String s) {\n        StringTokenizer tok = new StringTokenizer(s, \" \");\n        int n = tok.countTokens();\n        int[] r = new int[n];\n        for (int i = 0; i < n; i++) r[i] = Integer.parseInt(tok.nextToken());\n        return r;\n    }\n\n    /**\n     *       Given a string, escape any &lt; &gt; &amp; ' \" characters for\n     *       XML.  Also, if any characters are unprintable, they're escaped\n     *       as raw values (&amp;#xxxx;), so loading the output in any old\n     *       text editor shouldn't mangle anything.\n     *\n     *       @param input a string\n     *       @return the same string, with &lt;/&gt;/&amp; escaped\n     */\n    public static String escapeForXML(String input) {\n        // FIXME: if there are no <>& symbols, just return the string\n        // as-is to save the GC\n        // MAYBE: does SAX or somebody already have a method that does\n        // this better?\n        // MAYBE: use regexps in 1.4?\n        // BETTER: isn't there a String.replace() or something that\n        // would do this in about 2 lines?\n        StringBuffer output = new StringBuffer();\n        for (int i = 0; i < input.length(); i++) {\n            char c = input.charAt(i);\n            switch(c) {\n                case '&':\n                    output.append(\"&amp;\");\n                    break;\n                case '<':\n                    output.append(\"&lt;\");\n                    break;\n                case '>':\n                    output.append(\"&gt;\");\n                    break;\n                case '\\\"':\n                    output.append(\"&quot;\");\n                    break;\n                case '\\'':\n                    output.append(\"&apos;\");\n                    break;\n                default:\n                    if (Character.isISOControl(c)) {\n                        // if it's not printable, &#x-escape it.\n                        // (this came up when trying to save\n                        // \"<dating>^D</dating>\" which shouldn't happen,\n                        // anyway, but better safe than sorry.)\n                        // BUG: aren't there non-iso-control characters\n                        // which won't show up correctly?  do they need\n                        // the right encoding=\"\"?  do they have it?\n                        if (c < 32)\n                            output.append(\"ILLEGAL-XML-CHAR:\");\n                        else\n                            output.append(\"&#x\");\n                        String hex = Integer.toHexString((int) c);\n                        for (int ii = 0; ii < 4 - hex.length(); ii++) output.append(\"0\");\n                        output.append(hex);\n                        output.append(\";\");\n                    } else {\n                        output.append(c);\n                    }\n            }\n        }\n        return output.toString();\n    }\n\n    /**\n     *       In a string, replace one substring with another.\n     *\n     *       <p>If str contains source, return a new string with (the first\n     *       occurrence of) source replaced by target.</p>\n     *\n     *       <p>If str doesn't contain source (or str is the empty string),\n     *       returns str.</p>\n     *\n     *       <p>Think: str ~= s/source/target/</p>\n     *\n     *       <p>This is like Java 1.4's String.replaceFirst() method; when I\n     *       decide to drop support for Java 1.3, I can use that method\n     *       instead.</p>\n     *\n     *       @param str the base string\n     *       @param source the substring to look for\n     *       @param target the replacement string to use\n     *       @return the original string, str, with its first instance of\n     *       source replaced by target\n     */\n    public static String substitute(String str, String source, String target) {\n        int index = str.indexOf(source);\n        if (// not present\n        index == -1)\n            return str;\n        int start = index, end = index + source.length();\n        return str.substring(0, start) + target + str.substring(end);\n    }\n}\n",
		"id": "/EvoSuiteBenchmark/35_corina/src/main/java/corina/util/StringUtils_4Test.java",
		"test_prompt": "// StringUtils_4Test.java\n// This file is part of Corina.\n//\n// Corina is free software; you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation; either version 2 of the License, or\n// (at your option) any later version.\n//\n// Corina is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Corina; if not, write to the Free Software\n// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n//\n// Copyright 2001 Ken Harris <kbh7@cornell.edu>\n//\npackage corina.util;\n\nimport java.util.StringTokenizer;\nimport java.io.UnsupportedEncodingException;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link StringUtils}.\n* It contains ten unit test cases for the {@link StringUtils#escapeForXML(String)} method.\n*/\nclass StringUtils_4Test {"
	},
	{
		"original_code": "// StringUtils.java\n//\n// This file is part of Corina.\n//\n// Corina is free software; you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation; either version 2 of the License, or\n// (at your option) any later version.\n//\n// Corina is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Corina; if not, write to the Free Software\n// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n//\n// Copyright 2001 Ken Harris <kbh7@cornell.edu>\n//\npackage corina.util;\n\nimport java.util.StringTokenizer;\nimport java.io.UnsupportedEncodingException;\n\n/**\n *   Some handy string utilities.\n *\n *   <h2>Left to do</h2>\n *   <ul>\n *     <li>splitBy() would be shorter/simpler if it used a tokenizer\n *         (see StringTokenizer, countTokens(), nextToken())\n *\n *     <li>splitBy() might be exactly the same as\n *         browser/SearchField.parseIntoWords() -- check it out\n *   </ul>\n *\n *   @author Ken Harris &lt;kbh7 <i style=\"color: gray\">at</i> cornell <i style=\"color: gray\">dot</i> edu&gt;\n *   @version $Id: StringUtils.java,v 1.2 2005/10/29 03:04:11 lucasmo Exp $\n */\npublic class StringUtils {\n\n    // don't instantiate me\n    private StringUtils() {\n    }\n\n    /**\n     *       Pad some text on the left (i.e., right-align it) until it's a\n     *       specified width.  If the text is already longer than the\n     *       desired length, it is returned.\n     *\n     *       @param text string to pad\n     *       @param size length of resulting string\n     *       @return the original text, padded on the left\n     */\n    public static String leftPad(String text, int size) {\n        int numSpaces = size - text.length();\n        if (numSpaces <= 0)\n            return text;\n        StringBuffer buf = new StringBuffer(size);\n        for (int i = 0; i < numSpaces; i++) buf.append(' ');\n        for (int i = numSpaces; i < size; i++) buf.append(text.charAt(i - numSpaces));\n        return buf.toString();\n    }\n\n    /**\n     *       Split some text into lines.  For example,\n     *       <code>\"a\\nb\\nc\"</code> becomes <code>String[]\n     *       {\"a\",\"b\",\"c\"}</code>.\n     *\n     *       @param text the text, separated by <code>'\\n'</code> chars\n     *       @return the string, as an array of strings\n     */\n    public static String[] splitByLines(String text) {\n        return splitBy(text, '\\n');\n    }\n\n    /**\n     *       Split some text, using an arbitrary separator character.\n     *\n     *       @param text the text\n     *       @param sep the separator character to watch for\n     *       @return the string, as an array of strings\n     */\n    public static String[] splitBy(String text, char sep) {\n        // count separators\n        int newlines = 0;\n        for (int i = 0; i < text.length(); i++) if (text.charAt(i) == sep)\n            newlines++;\n        // allocate space for output\n        String[] result = new String[newlines + 1];\n        // next space to fill\n        int n = 0;\n        // create output\n        int start = 0;\n        for (; ; ) {\n            int newline = text.indexOf(sep, start);\n            if (newline == -1) {\n                // (to end)\n                result[n++] = text.substring(start);\n                break;\n            } else {\n                result[n++] = text.substring(start, newline);\n                start = newline + 1;\n            }\n        }\n        // return it\n        return result;\n    }\n\n    /**\n     *        Convert a sequence of integers in a string into an array\n     *        of ints.\n     *\n     *        <p>For example, extractInts(\"1 2 3\") = int[] { 1, 2, 3 }.</p>\n     *\n     *        <p>Bug: what happens if the string isn't parseable?</p>\n     *\n     *        @param s the string to parse\n     *        @return an array of ints, representing the string\n     */\n    public static int[] extractInts(String s) {\n        StringTokenizer tok = new StringTokenizer(s, \" \");\n        int n = tok.countTokens();\n        int[] r = new int[n];\n        for (int i = 0; i < n; i++) r[i] = Integer.parseInt(tok.nextToken());\n        return r;\n    }\n\n    /**\n     *       Given a string, escape any &lt; &gt; &amp; ' \" characters for\n     *       XML.  Also, if any characters are unprintable, they're escaped\n     *       as raw values (&amp;#xxxx;), so loading the output in any old\n     *       text editor shouldn't mangle anything.\n     *\n     *       @param input a string\n     *       @return the same string, with &lt;/&gt;/&amp; escaped\n     */\n    public static String escapeForXML(String input) {\n        // FIXME: if there are no <>& symbols, just return the string\n        // as-is to save the GC\n        // MAYBE: does SAX or somebody already have a method that does\n        // this better?\n        // MAYBE: use regexps in 1.4?\n        // BETTER: isn't there a String.replace() or something that\n        // would do this in about 2 lines?\n        StringBuffer output = new StringBuffer();\n        for (int i = 0; i < input.length(); i++) {\n            char c = input.charAt(i);\n            switch(c) {\n                case '&':\n                    output.append(\"&amp;\");\n                    break;\n                case '<':\n                    output.append(\"&lt;\");\n                    break;\n                case '>':\n                    output.append(\"&gt;\");\n                    break;\n                case '\\\"':\n                    output.append(\"&quot;\");\n                    break;\n                case '\\'':\n                    output.append(\"&apos;\");\n                    break;\n                default:\n                    if (Character.isISOControl(c)) {\n                        // if it's not printable, &#x-escape it.\n                        // (this came up when trying to save\n                        // \"<dating>^D</dating>\" which shouldn't happen,\n                        // anyway, but better safe than sorry.)\n                        // BUG: aren't there non-iso-control characters\n                        // which won't show up correctly?  do they need\n                        // the right encoding=\"\"?  do they have it?\n                        if (c < 32)\n                            output.append(\"ILLEGAL-XML-CHAR:\");\n                        else\n                            output.append(\"&#x\");\n                        String hex = Integer.toHexString((int) c);\n                        for (int ii = 0; ii < 4 - hex.length(); ii++) output.append(\"0\");\n                        output.append(hex);\n                        output.append(\";\");\n                    } else {\n                        output.append(c);\n                    }\n            }\n        }\n        return output.toString();\n    }\n\n    /**\n     *       In a string, replace one substring with another.\n     *\n     *       <p>If str contains source, return a new string with (the first\n     *       occurrence of) source replaced by target.</p>\n     *\n     *       <p>If str doesn't contain source (or str is the empty string),\n     *       returns str.</p>\n     *\n     *       <p>Think: str ~= s/source/target/</p>\n     *\n     *       <p>This is like Java 1.4's String.replaceFirst() method; when I\n     *       decide to drop support for Java 1.3, I can use that method\n     *       instead.</p>\n     *\n     *       @param str the base string\n     *       @param source the substring to look for\n     *       @param target the replacement string to use\n     *       @return the original string, str, with its first instance of\n     *       source replaced by target\n     */\n    public static String substitute(String str, String source, String target) {\n        int index = str.indexOf(source);\n        if (// not present\n        index == -1)\n            return str;\n        int start = index, end = index + source.length();\n        return str.substring(0, start) + target + str.substring(end);\n    }\n}\n",
		"id": "/EvoSuiteBenchmark/35_corina/src/main/java/corina/util/StringUtils_5Test.java",
		"test_prompt": "// StringUtils_5Test.java\n// This file is part of Corina.\n//\n// Corina is free software; you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation; either version 2 of the License, or\n// (at your option) any later version.\n//\n// Corina is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Corina; if not, write to the Free Software\n// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n//\n// Copyright 2001 Ken Harris <kbh7@cornell.edu>\n//\npackage corina.util;\n\nimport java.util.StringTokenizer;\nimport java.io.UnsupportedEncodingException;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link StringUtils}.\n* It contains ten unit test cases for the {@link StringUtils#substitute(String, String, String)} method.\n*/\nclass StringUtils_5Test {"
	},
	{
		"original_code": "// Angle.java\n//\n// This file is part of Corina.\n//\n// Corina is free software; you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation; either version 2 of the License, or\n// (at your option) any later version.\n//\n// Corina is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Corina; if not, write to the Free Software\n// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n//\n// Copyright 2001 Ken Harris <kbh7@cornell.edu>\n//\npackage corina.util;\n\nimport java.awt.Point;\n\n// -- float is ~7 sigfigs, and sin(.0001) is 1/1000 of a pixel at 1000 pixels out -- that's plenty\n/**\n *   Compute the angle of a line drawn between two given points.\n *\n *   <p>(A Java float is about 7 significant figures, and sin(0.0001) is\n *   1/1000 of 1 pixel at 1000 pixels out, so I don't think I'll need\n *   more precision than that.)</p>\n *\n *   @author Ken Harris &lt;kbh7 <i style=\"color: gray\">at</i> cornell <i style=\"color: gray\">dot</i> edu&gt;\n *   @version $Id: Angle.java,v 1.3 2004/01/18 18:12:05 aaron Exp $\n */\npublic class Angle {\n\n    // don't instantiate me\n    private Angle() {\n    }\n\n    /**\n     *  Compute the angle of a line drawn between two points.\n     * \tThe result is always between 0 and 2*Math.PI.\n     * \t@param a the first point\n     * \t@param b the second point\n     * \t@return the angle between a line drawn from a to b\n     */\n    public static float angle(Point a, Point b) {\n        float theta;\n        float dx = b.x - a.x;\n        float dy = b.y - a.y;\n        if (dx == 0)\n            // force floats!\n            theta = (float) Math.PI * (b.y < a.y ? 3 / 2f : 1 / 2f);\n        else\n            theta = (float) Math.atan(dy / dx);\n        if (b.x < a.x)\n            theta += Math.PI;\n        return theta;\n    }\n}\n",
		"id": "/EvoSuiteBenchmark/35_corina/src/main/java/corina/util/Angle.java",
		"test_prompt": "// AngleTest.java\n// This file is part of Corina.\n//\n// Corina is free software; you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation; either version 2 of the License, or\n// (at your option) any later version.\n//\n// Corina is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Corina; if not, write to the Free Software\n// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n//\n// Copyright 2001 Ken Harris <kbh7@cornell.edu>\n//\npackage corina.util;\n\nimport java.awt.Point;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link Angle}.\n* It contains ten unit test cases for the {@link Angle#angle(Point, Point)} method.\n*/\nclass AngleTest {"
	},
	{
		"original_code": "// GZIP.java\n//\n// This file is part of Corina.\n//\n// Corina is free software; you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation; either version 2 of the License, or\n// (at your option) any later version.\n//\n// Corina is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Corina; if not, write to the Free Software\n// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n//\n// Copyright 2003 Ken Harris <kbh7@cornell.edu>\n//\npackage corina.util;\n\nimport java.io.FileInputStream;\nimport java.io.IOException;\n\n/**\n *    Utility functions for working with GZip compression.\n *\n *    @author Ken Harris &lt;kbh7 <i style=\"color: gray\">at</i> cornell <i style=\"color: gray\">dot</i> edu&gt;\n *    @version $Id: GZIP.java,v 1.1 2004/01/09 02:56:59 bitpoet Exp $\n */\npublic class GZIP {\n\n    private GZIP() {\n        // don't instantiate me\n    }\n\n    /**\n     *         Check if the specified file is gzip-compressed.  (Gzip\n     * \tcompression has a distinctive 2-byte header which I can easily\n     * \tcheck.)\n     *\n     * \t@param filename the filename of the file to check\n     * \t@return true, if the file is gzip-compressed, else false\n     * \t@exception IOException if there was a problem loading 2 bytes\n     * \tfrom the file\n     */\n    public static boolean isCompressed(String filename) throws IOException {\n        // (make compiler happy)\n        FileInputStream fis = null;\n        try {\n            fis = new FileInputStream(filename);\n            int b1 = fis.read();\n            int b2 = fis.read();\n            // ioe here is fine\n            boolean compressed = (b1 == 0x1f && b2 == 0x8b);\n            // FIXME: use GZIPInputStream.GZIP_MAGIC here!\n            return compressed;\n        } finally {\n            if (// it can be null if the file didn't exist\n            fis != null)\n                fis.close();\n        }\n    }\n}\n",
		"id": "/EvoSuiteBenchmark/35_corina/src/main/java/corina/util/GZIP.java",
		"test_prompt": "// GZIPTest.java\n// This file is part of Corina.\n//\n// Corina is free software; you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation; either version 2 of the License, or\n// (at your option) any later version.\n//\n// Corina is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Corina; if not, write to the Free Software\n// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n//\n// Copyright 2003 Ken Harris <kbh7@cornell.edu>\n//\npackage corina.util;\n\nimport java.io.FileInputStream;\nimport java.io.IOException;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link GZIP}.\n* It contains ten unit test cases for the {@link GZIP#isCompressed(String)} method.\n*/\nclass GZIPTest {"
	},
	{
		"original_code": "// NaturalSort.java\npackage corina.util;\n\nimport java.util.Comparator;\n\n/**\n *   Natural-order sorting, so numbers like \"17\" and \"7\" are put in the\n *   proper order.\n *\n *   <p>This is a Java port of \"strnatcmp.c\".  This file was based on the\n *   work of Martin Pool, who generously made his program open-source,\n *   but any bugs in this version are entirely my fault.  See <a\n *   href=\"http://sourcefrog.net/projects/natsort/index.html\">his natsort\n *   page</a> for more info.</p>\n *\n *   <p>Usage:</p>\n *\n * <pre>\n *   NaturalSort.compare(\"Photo 7.jpeg\", \"Photo 17.jpeg\")\n *   => -1\n * </pre>\n * <pre>\n *   NaturalSort.compareIgnoreCase(\"Photo 7.jpeg\", \"photo 17.jpeg\"); // ignore case\n *   => -1\n * </pre>\n * <pre>\n *   Collections.sort(myList, new NaturalSort.NaturalComparator()); // a list\n * </pre>\n * <pre>\n *   Collections.sort(myList, new NaturalSort.CINaturalComparator()); // a list, ignore case\n * </pre>\n *\n *   <p>His original version, in C, is http://sourcefrog.net/projects/natsort/natsort.c</p>\n *\n *   <p>The license for that is the <a\n *   href=\"http://www.gzip.org/zlib/zlib_license.html\">Zlib license</a>:</p>\n *\n * <blockquote>\n *   <p>This software is provided 'as-is', without any express or implied\n *   warranty.  In no event will the authors be held liable for any damages\n *   arising from the use of this software.</p>\n *\n *   <p>Permission is granted to anyone to use this software for any purpose,\n *   including commercial applications, and to alter it and redistribute it\n *   freely, subject to the following restrictions:</p>\n *\n *   <ol>\n *   <li>The origin of this software must not be misrepresented; you must not\n *      claim that you wrote the original software. If you use this software\n *      in a product, an acknowledgment in the product documentation would be\n *      appreciated but is not required.\n *   <li>Altered source versions must be plainly marked as such, and must not be\n *      misrepresented as being the original software.\n *   <li>This notice may not be removed or altered from any source distribution.\n *   </ol>\n * </blockquote>\n *\n *   <p>I believe these terms mean it's ok to port it to Java and include\n *   it in my GNU GPL-licensed program.</p>\n *\n *   22 January 2003\n *\n *   @author Ken Harris <kbh7@cornell.edu>\n */\npublic class NaturalSort {\n\n    // don't instantiate me\n    private NaturalSort() {\n    }\n\n    /* The longest run of digits wins.  That aside, the greatest\n       value wins, but we can't know that it will until we've scanned\n       both numbers to know that they have the same magnitude, so we\n       remember it in BIAS. */\n    private static int compareRight(String a, int ai, String b, int bi) {\n        int bias = 0;\n        for (; ; ai++, bi++) {\n            char ca = (a.length() == ai ? '\\0' : a.charAt(ai));\n            char cb = (b.length() == bi ? '\\0' : b.charAt(bi));\n            if (!Character.isDigit(ca) && !Character.isDigit(cb))\n                return bias;\n            else if (!Character.isDigit(ca))\n                return -1;\n            else if (!Character.isDigit(cb))\n                return +1;\n            else if (ca < cb) {\n                if (bias != 0)\n                    bias = -1;\n            } else if (ca > cb) {\n                if (bias != 0)\n                    bias = +1;\n            } else if (ai == a.length() && bi == b.length())\n                return bias;\n        }\n    }\n\n    /* Compare two left-aligned numbers: the first to have a\n       different value wins. */\n    private static int compareLeft(String a, int ai, String b, int bi) {\n        for (; ; ai++, bi++) {\n            char ca = (a.length() == ai ? '\\0' : a.charAt(ai));\n            char cb = (b.length() == bi ? '\\0' : b.charAt(bi));\n            if (!Character.isDigit(ca) && !Character.isDigit(cb))\n                return 0;\n            else if (!Character.isDigit(ca))\n                return -1;\n            else if (!Character.isDigit(cb))\n                return +1;\n            else if (ca < cb)\n                return -1;\n            else if (ca > cb)\n                return +1;\n        }\n    }\n\n    private static int strnatcmp0(String a, String b, boolean foldCase) {\n        int ai, bi;\n        char ca, cb;\n        boolean fractional;\n        int result;\n        ai = bi = 0;\n        while (true) {\n            ca = (ai == a.length() ? '\\0' : a.charAt(ai));\n            cb = (bi == b.length() ? '\\0' : b.charAt(bi));\n            /* skip over leading spaces or zeros */\n            while (Character.isWhitespace(ca)) {\n                ai++;\n                ca = (ai == a.length() ? '\\0' : a.charAt(ai));\n            }\n            while (Character.isWhitespace(cb)) {\n                bi++;\n                cb = (bi == b.length() ? '\\0' : b.charAt(bi));\n            }\n            /* process run of digits */\n            if (Character.isDigit(ca) && Character.isDigit(cb)) {\n                fractional = (ca == '0' || cb == '0');\n                if (fractional) {\n                    if ((result = compareLeft(a, ai, b, bi)) != 0)\n                        return result;\n                } else {\n                    if ((result = compareRight(a, ai, b, bi)) != 0)\n                        return result;\n                }\n            }\n            if (ca == '\\0' && cb == '\\0') {\n                /* The strings compare the same.  Perhaps the caller\n\t\t   will want to call strcmp to break the tie. */\n                return 0;\n            }\n            if (foldCase) {\n                ca = Character.toUpperCase(ca);\n                cb = Character.toUpperCase(cb);\n            }\n            if (ca < cb)\n                return -1;\n            else if (ca > cb)\n                return +1;\n            ++ai;\n            ++bi;\n        }\n    }\n\n    /**\n     *  Compare two strings using natural ordering; case-sensitive.\n     * \t@param a the first string\n     * \t@param b the second string\n     * \t@return -1, 0, or +1, depending on whether a is less than,\n     * \tequal to, or greater than b\n     */\n    public static int compare(String a, String b) {\n        return strnatcmp0(a, b, false);\n    }\n\n    /**\n     *  Compare two strings using natural ordering; case-insensitive.\n     * \t@param a the first string\n     * \t@param b the second string\n     * \t@return -1, 0, or +1, depending on whether a is less than,\n     * \tequal to, or greater than b\n     */\n    public static int compareIgnoreCase(String a, String b) {\n        return strnatcmp0(a, b, true);\n    }\n\n    /**\n     * A comparator class, using natural ordering.\n     */\n    public static class NaturalComparator implements Comparator {\n\n        public int compare(Object o1, Object o2) {\n            return NaturalSort.compare((String) o1, (String) o2);\n        }\n    }\n\n    /**\n     * A comparator class, using case-insensitive natural ordering.\n     */\n    public static class CINaturalComparator implements Comparator {\n\n        public int compare(Object o1, Object o2) {\n            return NaturalSort.compareIgnoreCase((String) o1, (String) o2);\n        }\n    }\n}\n",
		"id": "/EvoSuiteBenchmark/35_corina/src/main/java/corina/util/NaturalSort_0Test.java",
		"test_prompt": "// NaturalSort_0Test.java\npackage corina.util;\n\nimport java.util.Comparator;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link NaturalSort}.\n* It contains ten unit test cases for the {@link NaturalSort#compare(String, String)} method.\n*/\nclass NaturalSort_0Test {"
	},
	{
		"original_code": "// NaturalSort.java\npackage corina.util;\n\nimport java.util.Comparator;\n\n/**\n *   Natural-order sorting, so numbers like \"17\" and \"7\" are put in the\n *   proper order.\n *\n *   <p>This is a Java port of \"strnatcmp.c\".  This file was based on the\n *   work of Martin Pool, who generously made his program open-source,\n *   but any bugs in this version are entirely my fault.  See <a\n *   href=\"http://sourcefrog.net/projects/natsort/index.html\">his natsort\n *   page</a> for more info.</p>\n *\n *   <p>Usage:</p>\n *\n * <pre>\n *   NaturalSort.compare(\"Photo 7.jpeg\", \"Photo 17.jpeg\")\n *   => -1\n * </pre>\n * <pre>\n *   NaturalSort.compareIgnoreCase(\"Photo 7.jpeg\", \"photo 17.jpeg\"); // ignore case\n *   => -1\n * </pre>\n * <pre>\n *   Collections.sort(myList, new NaturalSort.NaturalComparator()); // a list\n * </pre>\n * <pre>\n *   Collections.sort(myList, new NaturalSort.CINaturalComparator()); // a list, ignore case\n * </pre>\n *\n *   <p>His original version, in C, is http://sourcefrog.net/projects/natsort/natsort.c</p>\n *\n *   <p>The license for that is the <a\n *   href=\"http://www.gzip.org/zlib/zlib_license.html\">Zlib license</a>:</p>\n *\n * <blockquote>\n *   <p>This software is provided 'as-is', without any express or implied\n *   warranty.  In no event will the authors be held liable for any damages\n *   arising from the use of this software.</p>\n *\n *   <p>Permission is granted to anyone to use this software for any purpose,\n *   including commercial applications, and to alter it and redistribute it\n *   freely, subject to the following restrictions:</p>\n *\n *   <ol>\n *   <li>The origin of this software must not be misrepresented; you must not\n *      claim that you wrote the original software. If you use this software\n *      in a product, an acknowledgment in the product documentation would be\n *      appreciated but is not required.\n *   <li>Altered source versions must be plainly marked as such, and must not be\n *      misrepresented as being the original software.\n *   <li>This notice may not be removed or altered from any source distribution.\n *   </ol>\n * </blockquote>\n *\n *   <p>I believe these terms mean it's ok to port it to Java and include\n *   it in my GNU GPL-licensed program.</p>\n *\n *   22 January 2003\n *\n *   @author Ken Harris <kbh7@cornell.edu>\n */\npublic class NaturalSort {\n\n    // don't instantiate me\n    private NaturalSort() {\n    }\n\n    /* The longest run of digits wins.  That aside, the greatest\n       value wins, but we can't know that it will until we've scanned\n       both numbers to know that they have the same magnitude, so we\n       remember it in BIAS. */\n    private static int compareRight(String a, int ai, String b, int bi) {\n        int bias = 0;\n        for (; ; ai++, bi++) {\n            char ca = (a.length() == ai ? '\\0' : a.charAt(ai));\n            char cb = (b.length() == bi ? '\\0' : b.charAt(bi));\n            if (!Character.isDigit(ca) && !Character.isDigit(cb))\n                return bias;\n            else if (!Character.isDigit(ca))\n                return -1;\n            else if (!Character.isDigit(cb))\n                return +1;\n            else if (ca < cb) {\n                if (bias != 0)\n                    bias = -1;\n            } else if (ca > cb) {\n                if (bias != 0)\n                    bias = +1;\n            } else if (ai == a.length() && bi == b.length())\n                return bias;\n        }\n    }\n\n    /* Compare two left-aligned numbers: the first to have a\n       different value wins. */\n    private static int compareLeft(String a, int ai, String b, int bi) {\n        for (; ; ai++, bi++) {\n            char ca = (a.length() == ai ? '\\0' : a.charAt(ai));\n            char cb = (b.length() == bi ? '\\0' : b.charAt(bi));\n            if (!Character.isDigit(ca) && !Character.isDigit(cb))\n                return 0;\n            else if (!Character.isDigit(ca))\n                return -1;\n            else if (!Character.isDigit(cb))\n                return +1;\n            else if (ca < cb)\n                return -1;\n            else if (ca > cb)\n                return +1;\n        }\n    }\n\n    private static int strnatcmp0(String a, String b, boolean foldCase) {\n        int ai, bi;\n        char ca, cb;\n        boolean fractional;\n        int result;\n        ai = bi = 0;\n        while (true) {\n            ca = (ai == a.length() ? '\\0' : a.charAt(ai));\n            cb = (bi == b.length() ? '\\0' : b.charAt(bi));\n            /* skip over leading spaces or zeros */\n            while (Character.isWhitespace(ca)) {\n                ai++;\n                ca = (ai == a.length() ? '\\0' : a.charAt(ai));\n            }\n            while (Character.isWhitespace(cb)) {\n                bi++;\n                cb = (bi == b.length() ? '\\0' : b.charAt(bi));\n            }\n            /* process run of digits */\n            if (Character.isDigit(ca) && Character.isDigit(cb)) {\n                fractional = (ca == '0' || cb == '0');\n                if (fractional) {\n                    if ((result = compareLeft(a, ai, b, bi)) != 0)\n                        return result;\n                } else {\n                    if ((result = compareRight(a, ai, b, bi)) != 0)\n                        return result;\n                }\n            }\n            if (ca == '\\0' && cb == '\\0') {\n                /* The strings compare the same.  Perhaps the caller\n\t\t   will want to call strcmp to break the tie. */\n                return 0;\n            }\n            if (foldCase) {\n                ca = Character.toUpperCase(ca);\n                cb = Character.toUpperCase(cb);\n            }\n            if (ca < cb)\n                return -1;\n            else if (ca > cb)\n                return +1;\n            ++ai;\n            ++bi;\n        }\n    }\n\n    /**\n     *  Compare two strings using natural ordering; case-sensitive.\n     * \t@param a the first string\n     * \t@param b the second string\n     * \t@return -1, 0, or +1, depending on whether a is less than,\n     * \tequal to, or greater than b\n     */\n    public static int compare(String a, String b) {\n        return strnatcmp0(a, b, false);\n    }\n\n    /**\n     *  Compare two strings using natural ordering; case-insensitive.\n     * \t@param a the first string\n     * \t@param b the second string\n     * \t@return -1, 0, or +1, depending on whether a is less than,\n     * \tequal to, or greater than b\n     */\n    public static int compareIgnoreCase(String a, String b) {\n        return strnatcmp0(a, b, true);\n    }\n\n    /**\n     * A comparator class, using natural ordering.\n     */\n    public static class NaturalComparator implements Comparator {\n\n        public int compare(Object o1, Object o2) {\n            return NaturalSort.compare((String) o1, (String) o2);\n        }\n    }\n\n    /**\n     * A comparator class, using case-insensitive natural ordering.\n     */\n    public static class CINaturalComparator implements Comparator {\n\n        public int compare(Object o1, Object o2) {\n            return NaturalSort.compareIgnoreCase((String) o1, (String) o2);\n        }\n    }\n}\n",
		"id": "/EvoSuiteBenchmark/35_corina/src/main/java/corina/util/NaturalSort_1Test.java",
		"test_prompt": "// NaturalSort_1Test.java\npackage corina.util;\n\nimport java.util.Comparator;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link NaturalSort}.\n* It contains ten unit test cases for the {@link NaturalSort#compareIgnoreCase(String, String)} method.\n*/\nclass NaturalSort_1Test {"
	},
	{
		"original_code": "// SimpleLog.java\n/*\n * $Header: /cvsroot/corina/corina/Source/corina/util/SimpleLog.java,v 1.2 2004/09/29 14:14:07 aaron Exp $\n * $Revision: 1.2 $\n * $Date: 2004/09/29 14:14:07 $\n *\n * ====================================================================\n * \n * The Apache Software License, Version 1.1\n *\n * Copyright (c) 2001-2003 The Apache Software Foundation.  All rights\n * reserved.\n *\n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions\n * are met:\n *\n * 1. Redistributions of source code must retain the above copyright\n *    notice, this list of conditions and the following disclaimer. \n *\n * 2. Redistributions in binary form must reproduce the above copyright\n *    notice, this list of conditions and the following disclaimer in\n *    the documentation and/or other materials provided with the\n *    distribution.\n *\n * 3. The end-user documentation included with the redistribution,\n *    if any, must include the following acknowledgement:  \n *       \"This product includes software developed by the \n *        Apache Software Foundation (http://www.apache.org/).\"\n *    Alternately, this acknowledgement may appear in the software itself,\n *    if and wherever such third-party acknowledgements normally appear.\n *\n * 4. The names \"Apache\", \"The Jakarta Project\", \"Commons\", and \"Apache Software\n *    Foundation\" must not be used to endorse or promote products derived\n *    from this software without prior written permission. For written \n *    permission, please contact apache@apache.org.\n *\n * 5. Products derived from this software may not be called \"Apache\",\n *    \"Apache\" nor may \"Apache\" appear in their names without prior \n *    written permission of the Apache Software Foundation.\n *\n * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n * SUCH DAMAGE.\n * ====================================================================\n *\n * This software consists of voluntary contributions made by many\n * individuals on behalf of the Apache Software Foundation.  For more\n * information on the Apache Software Foundation, please see\n * <http://www.apache.org/>.\n *\n */\npackage corina.util;\n\nimport java.io.InputStream;\nimport java.io.Serializable;\nimport java.lang.reflect.InvocationTargetException;\nimport java.lang.reflect.Method;\nimport java.security.AccessController;\nimport java.security.PrivilegedAction;\nimport java.text.DateFormat;\nimport java.text.SimpleDateFormat;\nimport java.util.Date;\nimport java.util.Properties;\nimport org.apache.commons.logging.Log;\nimport org.apache.commons.logging.LogConfigurationException;\n\n/**\n * <p>Simple implementation of Log that sends all enabled log messages,\n * for all defined loggers, to System.err.  The following system properties\n * are supported to configure the behavior of this logger:</p>\n * <ul>\n * <li><code>org.apache.commons.logging.simplelog.defaultlog</code> -\n *     Default logging detail level for all instances of SimpleLog.\n *     Must be one of (\"trace\", \"debug\", \"info\", \"warn\", \"error\", or \"fatal\").\n *     If not specified, defaults to \"info\". </li>\n * <li><code>org.apache.commons.logging.simplelog.log.xxxxx</code> -\n *     Logging detail level for a SimpleLog instance named \"xxxxx\".\n *     Must be one of (\"trace\", \"debug\", \"info\", \"warn\", \"error\", or \"fatal\").\n *     If not specified, the default logging detail level is used.</li>\n * <li><code>org.apache.commons.logging.simplelog.showlogname</code> -\n *     Set to <code>true</code> if you want the Log instance name to be\n *     included in output messages. Defaults to <code>false</code>.</li>\n * <li><code>org.apache.commons.logging.simplelog.showShortLogname</code> -\n *     Set to <code>true</code> if you want the last componet of the name to be\n *     included in output messages. Defaults to <code>true</code>.</li>\n * <li><code>org.apache.commons.logging.simplelog.showdatetime</code> -\n *     Set to <code>true</code> if you want the current date and time\n *     to be included in output messages. Default is false.</li>\n * </ul>\n *\n * <p>In addition to looking for system properties with the names specified\n * above, this implementation also checks for a class loader resource named\n * <code>\"simplelog.properties\"</code>, and includes any matching definitions\n * from this resource (if it exists).</p>\n *\n * @author <a href=\"mailto:sanders@apache.org\">Scott Sanders</a>\n * @author Rod Waldhoff\n * @author Robert Burrell Donkin\n *\n * @version $Id: SimpleLog.java,v 1.2 2004/09/29 14:14:07 aaron Exp $\n *\n * @deprecated Jakarta Commons Logging v1.0.4 introduced the write() delegate method I needed\n * so I don't have to rely on this slightly modified class anymore! - aaron\n */\npublic class SimpleLog implements Log, Serializable {\n\n    // ------------------------------------------------------- Class Attributes\n    /**\n     * All system properties used by <code>Simple</code> start with this\n     */\n    static protected final String systemPrefix = \"org.apache.commons.logging.simplelog.\";\n\n    /**\n     * Properties loaded from simplelog.properties\n     */\n    static protected final Properties simpleLogProps = new Properties();\n\n    /**\n     * Include the instance name in the log message?\n     */\n    static protected boolean showLogName = false;\n\n    /**\n     * Include the short name ( last component ) of the logger in the log\n     *        message. Default to true - otherwise we'll be lost in a flood of\n     *        messages without knowing who sends them.\n     */\n    static protected boolean showShortName = true;\n\n    /**\n     * Include the current time in the log message\n     */\n    static protected boolean showDateTime = false;\n\n    /**\n     * Used to format times\n     */\n    static protected DateFormat dateFormatter = null;\n\n    // ---------------------------------------------------- Log Level Constants\n    /**\n     * \"Trace\" level logging.\n     */\n    public static final int LOG_LEVEL_TRACE = 1;\n\n    /**\n     * \"Debug\" level logging.\n     */\n    public static final int LOG_LEVEL_DEBUG = 2;\n\n    /**\n     * \"Info\" level logging.\n     */\n    public static final int LOG_LEVEL_INFO = 3;\n\n    /**\n     * \"Warn\" level logging.\n     */\n    public static final int LOG_LEVEL_WARN = 4;\n\n    /**\n     * \"Error\" level logging.\n     */\n    public static final int LOG_LEVEL_ERROR = 5;\n\n    /**\n     * \"Fatal\" level logging.\n     */\n    public static final int LOG_LEVEL_FATAL = 6;\n\n    /**\n     * Enable all logging levels\n     */\n    public static final int LOG_LEVEL_ALL = (LOG_LEVEL_TRACE - 1);\n\n    /**\n     * Enable no logging levels\n     */\n    public static final int LOG_LEVEL_OFF = (LOG_LEVEL_FATAL + 1);\n\n    // ------------------------------------------------------------ Initializer\n    private static String getStringProperty(String name) {\n        String prop = null;\n        try {\n            prop = System.getProperty(name);\n        } catch (SecurityException e) {\n            // Ignore\n            ;\n        }\n        return (prop == null) ? simpleLogProps.getProperty(name) : prop;\n    }\n\n    private static String getStringProperty(String name, String dephault) {\n        String prop = getStringProperty(name);\n        return (prop == null) ? dephault : prop;\n    }\n\n    private static boolean getBooleanProperty(String name, boolean dephault) {\n        String prop = getStringProperty(name);\n        return (prop == null) ? dephault : \"true\".equalsIgnoreCase(prop);\n    }\n\n    // initialize class attributes\n    // load properties file, if found.\n    // override with system properties.\n    static {\n        // add props from the resource simplelog.properties\n        InputStream in = getResourceAsStream(\"simplelog.properties\");\n        if (null != in) {\n            try {\n                simpleLogProps.load(in);\n                in.close();\n            } catch (java.io.IOException e) {\n                // ignored\n            }\n        }\n        showLogName = getBooleanProperty(systemPrefix + \"showlogname\", showLogName);\n        showShortName = getBooleanProperty(systemPrefix + \"showShortLogname\", showShortName);\n        showDateTime = getBooleanProperty(systemPrefix + \"showdatetime\", showDateTime);\n        showLogName = getBooleanProperty(systemPrefix + \"showlogname\", showLogName);\n        if (showDateTime) {\n            dateFormatter = new SimpleDateFormat(getStringProperty(systemPrefix + \"dateformat\", \"yyyy/MM/dd HH:mm:ss:SSS zzz\"));\n        }\n    }\n\n    // ------------------------------------------------------------- Attributes\n    /**\n     * The name of this simple log instance\n     */\n    protected String logName = null;\n\n    /**\n     * The current log level\n     */\n    protected int currentLogLevel;\n\n    private String prefix = null;\n\n    // ------------------------------------------------------------ Constructor\n    /**\n     * Construct a simple log with given name.\n     *\n     * @param name log name\n     */\n    public SimpleLog(String name) {\n        logName = name;\n        // set initial log level\n        // Used to be: set default log level to ERROR\n        // IMHO it should be lower, but at least info ( costin ).\n        setLevel(SimpleLog.LOG_LEVEL_INFO);\n        // set log level from properties\n        String lvl = getStringProperty(systemPrefix + \"log.\" + logName);\n        int i = String.valueOf(name).lastIndexOf(\".\");\n        while (null == lvl && i > -1) {\n            name = name.substring(0, i);\n            lvl = getStringProperty(systemPrefix + \"log.\" + name);\n            i = String.valueOf(name).lastIndexOf(\".\");\n        }\n        if (null == lvl) {\n            lvl = getStringProperty(systemPrefix + \"defaultlog\");\n        }\n        if (\"all\".equalsIgnoreCase(lvl)) {\n            setLevel(SimpleLog.LOG_LEVEL_ALL);\n        } else if (\"trace\".equalsIgnoreCase(lvl)) {\n            setLevel(SimpleLog.LOG_LEVEL_TRACE);\n        } else if (\"debug\".equalsIgnoreCase(lvl)) {\n            setLevel(SimpleLog.LOG_LEVEL_DEBUG);\n        } else if (\"info\".equalsIgnoreCase(lvl)) {\n            setLevel(SimpleLog.LOG_LEVEL_INFO);\n        } else if (\"warn\".equalsIgnoreCase(lvl)) {\n            setLevel(SimpleLog.LOG_LEVEL_WARN);\n        } else if (\"error\".equalsIgnoreCase(lvl)) {\n            setLevel(SimpleLog.LOG_LEVEL_ERROR);\n        } else if (\"fatal\".equalsIgnoreCase(lvl)) {\n            setLevel(SimpleLog.LOG_LEVEL_FATAL);\n        } else if (\"off\".equalsIgnoreCase(lvl)) {\n            setLevel(SimpleLog.LOG_LEVEL_OFF);\n        }\n    }\n\n    // -------------------------------------------------------- Properties\n    /**\n     * <p> Set logging level. </p>\n     *\n     * @param currentLogLevel new logging level\n     */\n    public void setLevel(int currentLogLevel) {\n        this.currentLogLevel = currentLogLevel;\n    }\n\n    /**\n     * <p> Get logging level. </p>\n     */\n    public int getLevel() {\n        return currentLogLevel;\n    }\n\n    // -------------------------------------------------------- Logging Methods\n    /**\n     * <p> Do the actual logging.\n     * This method assembles the message\n     * and then prints to <code>System.err</code>.</p>\n     */\n    protected void log(int type, Object message, Throwable t) {\n        // use a string buffer for better performance\n        StringBuffer buf = new StringBuffer();\n        // append date-time if so configured\n        if (showDateTime) {\n            buf.append(dateFormatter.format(new Date()));\n            buf.append(\" \");\n        }\n        // append a readable representation of the log leve\n        switch(type) {\n            case SimpleLog.LOG_LEVEL_TRACE:\n                buf.append(\"[TRACE] \");\n                break;\n            case SimpleLog.LOG_LEVEL_DEBUG:\n                buf.append(\"[DEBUG] \");\n                break;\n            case SimpleLog.LOG_LEVEL_INFO:\n                buf.append(\"[INFO] \");\n                break;\n            case SimpleLog.LOG_LEVEL_WARN:\n                buf.append(\"[WARN] \");\n                break;\n            case SimpleLog.LOG_LEVEL_ERROR:\n                buf.append(\"[ERROR] \");\n                break;\n            case SimpleLog.LOG_LEVEL_FATAL:\n                buf.append(\"[FATAL] \");\n                break;\n        }\n        // append the name of the log instance if so configured\n        if (showShortName) {\n            if (prefix == null) {\n                // cut all but the last component of the name for both styles\n                prefix = logName.substring(logName.lastIndexOf(\".\") + 1) + \" - \";\n                prefix = prefix.substring(prefix.lastIndexOf(\"/\") + 1) + \"-\";\n            }\n            buf.append(prefix);\n        } else if (showLogName) {\n            buf.append(String.valueOf(logName)).append(\" - \");\n        }\n        // append the message\n        buf.append(String.valueOf(message));\n        // append stack trace if not null\n        if (t != null) {\n            buf.append(\" <\");\n            buf.append(t.toString());\n            buf.append(\">\");\n            java.io.StringWriter sw = new java.io.StringWriter(1024);\n            java.io.PrintWriter pw = new java.io.PrintWriter(sw);\n            t.printStackTrace(pw);\n            pw.close();\n            buf.append(sw.toString());\n        }\n        // print to System.err\n        doWrite(buf);\n    }\n\n    protected void doWrite(StringBuffer buf) {\n        System.err.println(buf.toString());\n    }\n\n    /**\n     * Is the given log level currently enabled?\n     *\n     * @param logLevel is this level enabled?\n     */\n    protected boolean isLevelEnabled(int logLevel) {\n        // log level are numerically ordered so can use simple numeric\n        // comparison\n        return (logLevel >= currentLogLevel);\n    }\n\n    // -------------------------------------------------------- Log Implementation\n    /**\n     * <p> Log a message with debug log level.</p>\n     */\n    public void debug(Object message) {\n        if (isLevelEnabled(SimpleLog.LOG_LEVEL_DEBUG)) {\n            log(SimpleLog.LOG_LEVEL_DEBUG, message, null);\n        }\n    }\n\n    /**\n     * <p> Log an error with debug log level.</p>\n     */\n    public void debug(Object message, Throwable t) {\n        if (isLevelEnabled(SimpleLog.LOG_LEVEL_DEBUG)) {\n            log(SimpleLog.LOG_LEVEL_DEBUG, message, t);\n        }\n    }\n\n    /**\n     * <p> Log a message with debug log level.</p>\n     */\n    public void trace(Object message) {\n        if (isLevelEnabled(SimpleLog.LOG_LEVEL_TRACE)) {\n            log(SimpleLog.LOG_LEVEL_TRACE, message, null);\n        }\n    }\n\n    /**\n     * <p> Log an error with debug log level.</p>\n     */\n    public void trace(Object message, Throwable t) {\n        if (isLevelEnabled(SimpleLog.LOG_LEVEL_TRACE)) {\n            log(SimpleLog.LOG_LEVEL_TRACE, message, t);\n        }\n    }\n\n    /**\n     * <p> Log a message with info log level.</p>\n     */\n    public void info(Object message) {\n        if (isLevelEnabled(SimpleLog.LOG_LEVEL_INFO)) {\n            log(SimpleLog.LOG_LEVEL_INFO, message, null);\n        }\n    }\n\n    /**\n     * <p> Log an error with info log level.</p>\n     */\n    public void info(Object message, Throwable t) {\n        if (isLevelEnabled(SimpleLog.LOG_LEVEL_INFO)) {\n            log(SimpleLog.LOG_LEVEL_INFO, message, t);\n        }\n    }\n\n    /**\n     * <p> Log a message with warn log level.</p>\n     */\n    public void warn(Object message) {\n        if (isLevelEnabled(SimpleLog.LOG_LEVEL_WARN)) {\n            log(SimpleLog.LOG_LEVEL_WARN, message, null);\n        }\n    }\n\n    /**\n     * <p> Log an error with warn log level.</p>\n     */\n    public void warn(Object message, Throwable t) {\n        if (isLevelEnabled(SimpleLog.LOG_LEVEL_WARN)) {\n            log(SimpleLog.LOG_LEVEL_WARN, message, t);\n        }\n    }\n\n    /**\n     * <p> Log a message with error log level.</p>\n     */\n    public void error(Object message) {\n        if (isLevelEnabled(SimpleLog.LOG_LEVEL_ERROR)) {\n            log(SimpleLog.LOG_LEVEL_ERROR, message, null);\n        }\n    }\n\n    /**\n     * <p> Log an error with error log level.</p>\n     */\n    public void error(Object message, Throwable t) {\n        if (isLevelEnabled(SimpleLog.LOG_LEVEL_ERROR)) {\n            log(SimpleLog.LOG_LEVEL_ERROR, message, t);\n        }\n    }\n\n    /**\n     * <p> Log a message with fatal log level.</p>\n     */\n    public void fatal(Object message) {\n        if (isLevelEnabled(SimpleLog.LOG_LEVEL_FATAL)) {\n            log(SimpleLog.LOG_LEVEL_FATAL, message, null);\n        }\n    }\n\n    /**\n     * <p> Log an error with fatal log level.</p>\n     */\n    public void fatal(Object message, Throwable t) {\n        if (isLevelEnabled(SimpleLog.LOG_LEVEL_FATAL)) {\n            log(SimpleLog.LOG_LEVEL_FATAL, message, t);\n        }\n    }\n\n    /**\n     * <p> Are debug messages currently enabled? </p>\n     *\n     * <p> This allows expensive operations such as <code>String</code>\n     * concatenation to be avoided when the message will be ignored by the\n     * logger. </p>\n     */\n    public final boolean isDebugEnabled() {\n        return isLevelEnabled(SimpleLog.LOG_LEVEL_DEBUG);\n    }\n\n    /**\n     * <p> Are error messages currently enabled? </p>\n     *\n     * <p> This allows expensive operations such as <code>String</code>\n     * concatenation to be avoided when the message will be ignored by the\n     * logger. </p>\n     */\n    public final boolean isErrorEnabled() {\n        return isLevelEnabled(SimpleLog.LOG_LEVEL_ERROR);\n    }\n\n    /**\n     * <p> Are fatal messages currently enabled? </p>\n     *\n     * <p> This allows expensive operations such as <code>String</code>\n     * concatenation to be avoided when the message will be ignored by the\n     * logger. </p>\n     */\n    public final boolean isFatalEnabled() {\n        return isLevelEnabled(SimpleLog.LOG_LEVEL_FATAL);\n    }\n\n    /**\n     * <p> Are info messages currently enabled? </p>\n     *\n     * <p> This allows expensive operations such as <code>String</code>\n     * concatenation to be avoided when the message will be ignored by the\n     * logger. </p>\n     */\n    public final boolean isInfoEnabled() {\n        return isLevelEnabled(SimpleLog.LOG_LEVEL_INFO);\n    }\n\n    /**\n     * <p> Are trace messages currently enabled? </p>\n     *\n     * <p> This allows expensive operations such as <code>String</code>\n     * concatenation to be avoided when the message will be ignored by the\n     * logger. </p>\n     */\n    public final boolean isTraceEnabled() {\n        return isLevelEnabled(SimpleLog.LOG_LEVEL_TRACE);\n    }\n\n    /**\n     * <p> Are warn messages currently enabled? </p>\n     *\n     * <p> This allows expensive operations such as <code>String</code>\n     * concatenation to be avoided when the message will be ignored by the\n     * logger. </p>\n     */\n    public final boolean isWarnEnabled() {\n        return isLevelEnabled(SimpleLog.LOG_LEVEL_WARN);\n    }\n\n    /**\n     * Return the thread context class loader if available.\n     * Otherwise return null.\n     *\n     * The thread context class loader is available for JDK 1.2\n     * or later, if certain security conditions are met.\n     *\n     * @exception LogConfigurationException if a suitable class loader\n     * cannot be identified.\n     */\n    private static ClassLoader getContextClassLoader() {\n        ClassLoader classLoader = null;\n        if (classLoader == null) {\n            try {\n                // Are we running on a JDK 1.2 or later system?\n                Method method = Thread.class.getMethod(\"getContextClassLoader\", null);\n                // Get the thread context class loader (if there is one)\n                try {\n                    classLoader = (ClassLoader) method.invoke(Thread.currentThread(), null);\n                } catch (IllegalAccessException e) {\n                    // ignore\n                    ;\n                } catch (InvocationTargetException e) {\n                    /**\n                     * InvocationTargetException is thrown by 'invoke' when\n                     * the method being invoked (getContextClassLoader) throws\n                     * an exception.\n                     *\n                     * getContextClassLoader() throws SecurityException when\n                     * the context class loader isn't an ancestor of the\n                     * calling class's class loader, or if security\n                     * permissions are restricted.\n                     *\n                     * In the first case (not related), we want to ignore and\n                     * keep going.  We cannot help but also ignore the second\n                     * with the logic below, but other calls elsewhere (to\n                     * obtain a class loader) will trigger this exception where\n                     * we can make a distinction.\n                     */\n                    if (e.getTargetException() instanceof SecurityException) {\n                        // ignore\n                        ;\n                    } else {\n                        // Capture 'e.getTargetException()' exception for details\n                        // alternate: log 'e.getTargetException()', and pass back 'e'.\n                        throw new LogConfigurationException(\"Unexpected InvocationTargetException\", e.getTargetException());\n                    }\n                }\n            } catch (NoSuchMethodException e) {\n                // Assume we are running on JDK 1.1\n                // ignore\n                ;\n            }\n        }\n        if (classLoader == null) {\n            classLoader = SimpleLog.class.getClassLoader();\n        }\n        // Return the selected class loader\n        return classLoader;\n    }\n\n    private static InputStream getResourceAsStream(final String name) {\n        return (InputStream) AccessController.doPrivileged(new PrivilegedAction() {\n\n            public Object run() {\n                ClassLoader threadCL = getContextClassLoader();\n                if (threadCL != null) {\n                    return threadCL.getResourceAsStream(name);\n                } else {\n                    return ClassLoader.getSystemResourceAsStream(name);\n                }\n            }\n        });\n    }\n}\n",
		"id": "/EvoSuiteBenchmark/35_corina/src/main/java/corina/util/SimpleLog_0Test.java",
		"test_prompt": "// SimpleLog_0Test.java\npackage corina.util;\n\nimport java.io.InputStream;\nimport java.io.Serializable;\nimport java.lang.reflect.InvocationTargetException;\nimport java.lang.reflect.Method;\nimport java.security.AccessController;\nimport java.security.PrivilegedAction;\nimport java.text.DateFormat;\nimport java.text.SimpleDateFormat;\nimport java.util.Date;\nimport java.util.Properties;\nimport org.apache.commons.logging.Log;\nimport org.apache.commons.logging.LogConfigurationException;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link SimpleLog}.\n* It contains ten unit test cases for the {@link SimpleLog#isDebugEnabled()} method.\n*/\nclass SimpleLog_0Test {"
	},
	{
		"original_code": "// SimpleLog.java\n/*\n * $Header: /cvsroot/corina/corina/Source/corina/util/SimpleLog.java,v 1.2 2004/09/29 14:14:07 aaron Exp $\n * $Revision: 1.2 $\n * $Date: 2004/09/29 14:14:07 $\n *\n * ====================================================================\n * \n * The Apache Software License, Version 1.1\n *\n * Copyright (c) 2001-2003 The Apache Software Foundation.  All rights\n * reserved.\n *\n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions\n * are met:\n *\n * 1. Redistributions of source code must retain the above copyright\n *    notice, this list of conditions and the following disclaimer. \n *\n * 2. Redistributions in binary form must reproduce the above copyright\n *    notice, this list of conditions and the following disclaimer in\n *    the documentation and/or other materials provided with the\n *    distribution.\n *\n * 3. The end-user documentation included with the redistribution,\n *    if any, must include the following acknowledgement:  \n *       \"This product includes software developed by the \n *        Apache Software Foundation (http://www.apache.org/).\"\n *    Alternately, this acknowledgement may appear in the software itself,\n *    if and wherever such third-party acknowledgements normally appear.\n *\n * 4. The names \"Apache\", \"The Jakarta Project\", \"Commons\", and \"Apache Software\n *    Foundation\" must not be used to endorse or promote products derived\n *    from this software without prior written permission. For written \n *    permission, please contact apache@apache.org.\n *\n * 5. Products derived from this software may not be called \"Apache\",\n *    \"Apache\" nor may \"Apache\" appear in their names without prior \n *    written permission of the Apache Software Foundation.\n *\n * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n * SUCH DAMAGE.\n * ====================================================================\n *\n * This software consists of voluntary contributions made by many\n * individuals on behalf of the Apache Software Foundation.  For more\n * information on the Apache Software Foundation, please see\n * <http://www.apache.org/>.\n *\n */\npackage corina.util;\n\nimport java.io.InputStream;\nimport java.io.Serializable;\nimport java.lang.reflect.InvocationTargetException;\nimport java.lang.reflect.Method;\nimport java.security.AccessController;\nimport java.security.PrivilegedAction;\nimport java.text.DateFormat;\nimport java.text.SimpleDateFormat;\nimport java.util.Date;\nimport java.util.Properties;\nimport org.apache.commons.logging.Log;\nimport org.apache.commons.logging.LogConfigurationException;\n\n/**\n * <p>Simple implementation of Log that sends all enabled log messages,\n * for all defined loggers, to System.err.  The following system properties\n * are supported to configure the behavior of this logger:</p>\n * <ul>\n * <li><code>org.apache.commons.logging.simplelog.defaultlog</code> -\n *     Default logging detail level for all instances of SimpleLog.\n *     Must be one of (\"trace\", \"debug\", \"info\", \"warn\", \"error\", or \"fatal\").\n *     If not specified, defaults to \"info\". </li>\n * <li><code>org.apache.commons.logging.simplelog.log.xxxxx</code> -\n *     Logging detail level for a SimpleLog instance named \"xxxxx\".\n *     Must be one of (\"trace\", \"debug\", \"info\", \"warn\", \"error\", or \"fatal\").\n *     If not specified, the default logging detail level is used.</li>\n * <li><code>org.apache.commons.logging.simplelog.showlogname</code> -\n *     Set to <code>true</code> if you want the Log instance name to be\n *     included in output messages. Defaults to <code>false</code>.</li>\n * <li><code>org.apache.commons.logging.simplelog.showShortLogname</code> -\n *     Set to <code>true</code> if you want the last componet of the name to be\n *     included in output messages. Defaults to <code>true</code>.</li>\n * <li><code>org.apache.commons.logging.simplelog.showdatetime</code> -\n *     Set to <code>true</code> if you want the current date and time\n *     to be included in output messages. Default is false.</li>\n * </ul>\n *\n * <p>In addition to looking for system properties with the names specified\n * above, this implementation also checks for a class loader resource named\n * <code>\"simplelog.properties\"</code>, and includes any matching definitions\n * from this resource (if it exists).</p>\n *\n * @author <a href=\"mailto:sanders@apache.org\">Scott Sanders</a>\n * @author Rod Waldhoff\n * @author Robert Burrell Donkin\n *\n * @version $Id: SimpleLog.java,v 1.2 2004/09/29 14:14:07 aaron Exp $\n *\n * @deprecated Jakarta Commons Logging v1.0.4 introduced the write() delegate method I needed\n * so I don't have to rely on this slightly modified class anymore! - aaron\n */\npublic class SimpleLog implements Log, Serializable {\n\n    // ------------------------------------------------------- Class Attributes\n    /**\n     * All system properties used by <code>Simple</code> start with this\n     */\n    static protected final String systemPrefix = \"org.apache.commons.logging.simplelog.\";\n\n    /**\n     * Properties loaded from simplelog.properties\n     */\n    static protected final Properties simpleLogProps = new Properties();\n\n    /**\n     * Include the instance name in the log message?\n     */\n    static protected boolean showLogName = false;\n\n    /**\n     * Include the short name ( last component ) of the logger in the log\n     *        message. Default to true - otherwise we'll be lost in a flood of\n     *        messages without knowing who sends them.\n     */\n    static protected boolean showShortName = true;\n\n    /**\n     * Include the current time in the log message\n     */\n    static protected boolean showDateTime = false;\n\n    /**\n     * Used to format times\n     */\n    static protected DateFormat dateFormatter = null;\n\n    // ---------------------------------------------------- Log Level Constants\n    /**\n     * \"Trace\" level logging.\n     */\n    public static final int LOG_LEVEL_TRACE = 1;\n\n    /**\n     * \"Debug\" level logging.\n     */\n    public static final int LOG_LEVEL_DEBUG = 2;\n\n    /**\n     * \"Info\" level logging.\n     */\n    public static final int LOG_LEVEL_INFO = 3;\n\n    /**\n     * \"Warn\" level logging.\n     */\n    public static final int LOG_LEVEL_WARN = 4;\n\n    /**\n     * \"Error\" level logging.\n     */\n    public static final int LOG_LEVEL_ERROR = 5;\n\n    /**\n     * \"Fatal\" level logging.\n     */\n    public static final int LOG_LEVEL_FATAL = 6;\n\n    /**\n     * Enable all logging levels\n     */\n    public static final int LOG_LEVEL_ALL = (LOG_LEVEL_TRACE - 1);\n\n    /**\n     * Enable no logging levels\n     */\n    public static final int LOG_LEVEL_OFF = (LOG_LEVEL_FATAL + 1);\n\n    // ------------------------------------------------------------ Initializer\n    private static String getStringProperty(String name) {\n        String prop = null;\n        try {\n            prop = System.getProperty(name);\n        } catch (SecurityException e) {\n            // Ignore\n            ;\n        }\n        return (prop == null) ? simpleLogProps.getProperty(name) : prop;\n    }\n\n    private static String getStringProperty(String name, String dephault) {\n        String prop = getStringProperty(name);\n        return (prop == null) ? dephault : prop;\n    }\n\n    private static boolean getBooleanProperty(String name, boolean dephault) {\n        String prop = getStringProperty(name);\n        return (prop == null) ? dephault : \"true\".equalsIgnoreCase(prop);\n    }\n\n    // initialize class attributes\n    // load properties file, if found.\n    // override with system properties.\n    static {\n        // add props from the resource simplelog.properties\n        InputStream in = getResourceAsStream(\"simplelog.properties\");\n        if (null != in) {\n            try {\n                simpleLogProps.load(in);\n                in.close();\n            } catch (java.io.IOException e) {\n                // ignored\n            }\n        }\n        showLogName = getBooleanProperty(systemPrefix + \"showlogname\", showLogName);\n        showShortName = getBooleanProperty(systemPrefix + \"showShortLogname\", showShortName);\n        showDateTime = getBooleanProperty(systemPrefix + \"showdatetime\", showDateTime);\n        showLogName = getBooleanProperty(systemPrefix + \"showlogname\", showLogName);\n        if (showDateTime) {\n            dateFormatter = new SimpleDateFormat(getStringProperty(systemPrefix + \"dateformat\", \"yyyy/MM/dd HH:mm:ss:SSS zzz\"));\n        }\n    }\n\n    // ------------------------------------------------------------- Attributes\n    /**\n     * The name of this simple log instance\n     */\n    protected String logName = null;\n\n    /**\n     * The current log level\n     */\n    protected int currentLogLevel;\n\n    private String prefix = null;\n\n    // ------------------------------------------------------------ Constructor\n    /**\n     * Construct a simple log with given name.\n     *\n     * @param name log name\n     */\n    public SimpleLog(String name) {\n        logName = name;\n        // set initial log level\n        // Used to be: set default log level to ERROR\n        // IMHO it should be lower, but at least info ( costin ).\n        setLevel(SimpleLog.LOG_LEVEL_INFO);\n        // set log level from properties\n        String lvl = getStringProperty(systemPrefix + \"log.\" + logName);\n        int i = String.valueOf(name).lastIndexOf(\".\");\n        while (null == lvl && i > -1) {\n            name = name.substring(0, i);\n            lvl = getStringProperty(systemPrefix + \"log.\" + name);\n            i = String.valueOf(name).lastIndexOf(\".\");\n        }\n        if (null == lvl) {\n            lvl = getStringProperty(systemPrefix + \"defaultlog\");\n        }\n        if (\"all\".equalsIgnoreCase(lvl)) {\n            setLevel(SimpleLog.LOG_LEVEL_ALL);\n        } else if (\"trace\".equalsIgnoreCase(lvl)) {\n            setLevel(SimpleLog.LOG_LEVEL_TRACE);\n        } else if (\"debug\".equalsIgnoreCase(lvl)) {\n            setLevel(SimpleLog.LOG_LEVEL_DEBUG);\n        } else if (\"info\".equalsIgnoreCase(lvl)) {\n            setLevel(SimpleLog.LOG_LEVEL_INFO);\n        } else if (\"warn\".equalsIgnoreCase(lvl)) {\n            setLevel(SimpleLog.LOG_LEVEL_WARN);\n        } else if (\"error\".equalsIgnoreCase(lvl)) {\n            setLevel(SimpleLog.LOG_LEVEL_ERROR);\n        } else if (\"fatal\".equalsIgnoreCase(lvl)) {\n            setLevel(SimpleLog.LOG_LEVEL_FATAL);\n        } else if (\"off\".equalsIgnoreCase(lvl)) {\n            setLevel(SimpleLog.LOG_LEVEL_OFF);\n        }\n    }\n\n    // -------------------------------------------------------- Properties\n    /**\n     * <p> Set logging level. </p>\n     *\n     * @param currentLogLevel new logging level\n     */\n    public void setLevel(int currentLogLevel) {\n        this.currentLogLevel = currentLogLevel;\n    }\n\n    /**\n     * <p> Get logging level. </p>\n     */\n    public int getLevel() {\n        return currentLogLevel;\n    }\n\n    // -------------------------------------------------------- Logging Methods\n    /**\n     * <p> Do the actual logging.\n     * This method assembles the message\n     * and then prints to <code>System.err</code>.</p>\n     */\n    protected void log(int type, Object message, Throwable t) {\n        // use a string buffer for better performance\n        StringBuffer buf = new StringBuffer();\n        // append date-time if so configured\n        if (showDateTime) {\n            buf.append(dateFormatter.format(new Date()));\n            buf.append(\" \");\n        }\n        // append a readable representation of the log leve\n        switch(type) {\n            case SimpleLog.LOG_LEVEL_TRACE:\n                buf.append(\"[TRACE] \");\n                break;\n            case SimpleLog.LOG_LEVEL_DEBUG:\n                buf.append(\"[DEBUG] \");\n                break;\n            case SimpleLog.LOG_LEVEL_INFO:\n                buf.append(\"[INFO] \");\n                break;\n            case SimpleLog.LOG_LEVEL_WARN:\n                buf.append(\"[WARN] \");\n                break;\n            case SimpleLog.LOG_LEVEL_ERROR:\n                buf.append(\"[ERROR] \");\n                break;\n            case SimpleLog.LOG_LEVEL_FATAL:\n                buf.append(\"[FATAL] \");\n                break;\n        }\n        // append the name of the log instance if so configured\n        if (showShortName) {\n            if (prefix == null) {\n                // cut all but the last component of the name for both styles\n                prefix = logName.substring(logName.lastIndexOf(\".\") + 1) + \" - \";\n                prefix = prefix.substring(prefix.lastIndexOf(\"/\") + 1) + \"-\";\n            }\n            buf.append(prefix);\n        } else if (showLogName) {\n            buf.append(String.valueOf(logName)).append(\" - \");\n        }\n        // append the message\n        buf.append(String.valueOf(message));\n        // append stack trace if not null\n        if (t != null) {\n            buf.append(\" <\");\n            buf.append(t.toString());\n            buf.append(\">\");\n            java.io.StringWriter sw = new java.io.StringWriter(1024);\n            java.io.PrintWriter pw = new java.io.PrintWriter(sw);\n            t.printStackTrace(pw);\n            pw.close();\n            buf.append(sw.toString());\n        }\n        // print to System.err\n        doWrite(buf);\n    }\n\n    protected void doWrite(StringBuffer buf) {\n        System.err.println(buf.toString());\n    }\n\n    /**\n     * Is the given log level currently enabled?\n     *\n     * @param logLevel is this level enabled?\n     */\n    protected boolean isLevelEnabled(int logLevel) {\n        // log level are numerically ordered so can use simple numeric\n        // comparison\n        return (logLevel >= currentLogLevel);\n    }\n\n    // -------------------------------------------------------- Log Implementation\n    /**\n     * <p> Log a message with debug log level.</p>\n     */\n    public void debug(Object message) {\n        if (isLevelEnabled(SimpleLog.LOG_LEVEL_DEBUG)) {\n            log(SimpleLog.LOG_LEVEL_DEBUG, message, null);\n        }\n    }\n\n    /**\n     * <p> Log an error with debug log level.</p>\n     */\n    public void debug(Object message, Throwable t) {\n        if (isLevelEnabled(SimpleLog.LOG_LEVEL_DEBUG)) {\n            log(SimpleLog.LOG_LEVEL_DEBUG, message, t);\n        }\n    }\n\n    /**\n     * <p> Log a message with debug log level.</p>\n     */\n    public void trace(Object message) {\n        if (isLevelEnabled(SimpleLog.LOG_LEVEL_TRACE)) {\n            log(SimpleLog.LOG_LEVEL_TRACE, message, null);\n        }\n    }\n\n    /**\n     * <p> Log an error with debug log level.</p>\n     */\n    public void trace(Object message, Throwable t) {\n        if (isLevelEnabled(SimpleLog.LOG_LEVEL_TRACE)) {\n            log(SimpleLog.LOG_LEVEL_TRACE, message, t);\n        }\n    }\n\n    /**\n     * <p> Log a message with info log level.</p>\n     */\n    public void info(Object message) {\n        if (isLevelEnabled(SimpleLog.LOG_LEVEL_INFO)) {\n            log(SimpleLog.LOG_LEVEL_INFO, message, null);\n        }\n    }\n\n    /**\n     * <p> Log an error with info log level.</p>\n     */\n    public void info(Object message, Throwable t) {\n        if (isLevelEnabled(SimpleLog.LOG_LEVEL_INFO)) {\n            log(SimpleLog.LOG_LEVEL_INFO, message, t);\n        }\n    }\n\n    /**\n     * <p> Log a message with warn log level.</p>\n     */\n    public void warn(Object message) {\n        if (isLevelEnabled(SimpleLog.LOG_LEVEL_WARN)) {\n            log(SimpleLog.LOG_LEVEL_WARN, message, null);\n        }\n    }\n\n    /**\n     * <p> Log an error with warn log level.</p>\n     */\n    public void warn(Object message, Throwable t) {\n        if (isLevelEnabled(SimpleLog.LOG_LEVEL_WARN)) {\n            log(SimpleLog.LOG_LEVEL_WARN, message, t);\n        }\n    }\n\n    /**\n     * <p> Log a message with error log level.</p>\n     */\n    public void error(Object message) {\n        if (isLevelEnabled(SimpleLog.LOG_LEVEL_ERROR)) {\n            log(SimpleLog.LOG_LEVEL_ERROR, message, null);\n        }\n    }\n\n    /**\n     * <p> Log an error with error log level.</p>\n     */\n    public void error(Object message, Throwable t) {\n        if (isLevelEnabled(SimpleLog.LOG_LEVEL_ERROR)) {\n            log(SimpleLog.LOG_LEVEL_ERROR, message, t);\n        }\n    }\n\n    /**\n     * <p> Log a message with fatal log level.</p>\n     */\n    public void fatal(Object message) {\n        if (isLevelEnabled(SimpleLog.LOG_LEVEL_FATAL)) {\n            log(SimpleLog.LOG_LEVEL_FATAL, message, null);\n        }\n    }\n\n    /**\n     * <p> Log an error with fatal log level.</p>\n     */\n    public void fatal(Object message, Throwable t) {\n        if (isLevelEnabled(SimpleLog.LOG_LEVEL_FATAL)) {\n            log(SimpleLog.LOG_LEVEL_FATAL, message, t);\n        }\n    }\n\n    /**\n     * <p> Are debug messages currently enabled? </p>\n     *\n     * <p> This allows expensive operations such as <code>String</code>\n     * concatenation to be avoided when the message will be ignored by the\n     * logger. </p>\n     */\n    public final boolean isDebugEnabled() {\n        return isLevelEnabled(SimpleLog.LOG_LEVEL_DEBUG);\n    }\n\n    /**\n     * <p> Are error messages currently enabled? </p>\n     *\n     * <p> This allows expensive operations such as <code>String</code>\n     * concatenation to be avoided when the message will be ignored by the\n     * logger. </p>\n     */\n    public final boolean isErrorEnabled() {\n        return isLevelEnabled(SimpleLog.LOG_LEVEL_ERROR);\n    }\n\n    /**\n     * <p> Are fatal messages currently enabled? </p>\n     *\n     * <p> This allows expensive operations such as <code>String</code>\n     * concatenation to be avoided when the message will be ignored by the\n     * logger. </p>\n     */\n    public final boolean isFatalEnabled() {\n        return isLevelEnabled(SimpleLog.LOG_LEVEL_FATAL);\n    }\n\n    /**\n     * <p> Are info messages currently enabled? </p>\n     *\n     * <p> This allows expensive operations such as <code>String</code>\n     * concatenation to be avoided when the message will be ignored by the\n     * logger. </p>\n     */\n    public final boolean isInfoEnabled() {\n        return isLevelEnabled(SimpleLog.LOG_LEVEL_INFO);\n    }\n\n    /**\n     * <p> Are trace messages currently enabled? </p>\n     *\n     * <p> This allows expensive operations such as <code>String</code>\n     * concatenation to be avoided when the message will be ignored by the\n     * logger. </p>\n     */\n    public final boolean isTraceEnabled() {\n        return isLevelEnabled(SimpleLog.LOG_LEVEL_TRACE);\n    }\n\n    /**\n     * <p> Are warn messages currently enabled? </p>\n     *\n     * <p> This allows expensive operations such as <code>String</code>\n     * concatenation to be avoided when the message will be ignored by the\n     * logger. </p>\n     */\n    public final boolean isWarnEnabled() {\n        return isLevelEnabled(SimpleLog.LOG_LEVEL_WARN);\n    }\n\n    /**\n     * Return the thread context class loader if available.\n     * Otherwise return null.\n     *\n     * The thread context class loader is available for JDK 1.2\n     * or later, if certain security conditions are met.\n     *\n     * @exception LogConfigurationException if a suitable class loader\n     * cannot be identified.\n     */\n    private static ClassLoader getContextClassLoader() {\n        ClassLoader classLoader = null;\n        if (classLoader == null) {\n            try {\n                // Are we running on a JDK 1.2 or later system?\n                Method method = Thread.class.getMethod(\"getContextClassLoader\", null);\n                // Get the thread context class loader (if there is one)\n                try {\n                    classLoader = (ClassLoader) method.invoke(Thread.currentThread(), null);\n                } catch (IllegalAccessException e) {\n                    // ignore\n                    ;\n                } catch (InvocationTargetException e) {\n                    /**\n                     * InvocationTargetException is thrown by 'invoke' when\n                     * the method being invoked (getContextClassLoader) throws\n                     * an exception.\n                     *\n                     * getContextClassLoader() throws SecurityException when\n                     * the context class loader isn't an ancestor of the\n                     * calling class's class loader, or if security\n                     * permissions are restricted.\n                     *\n                     * In the first case (not related), we want to ignore and\n                     * keep going.  We cannot help but also ignore the second\n                     * with the logic below, but other calls elsewhere (to\n                     * obtain a class loader) will trigger this exception where\n                     * we can make a distinction.\n                     */\n                    if (e.getTargetException() instanceof SecurityException) {\n                        // ignore\n                        ;\n                    } else {\n                        // Capture 'e.getTargetException()' exception for details\n                        // alternate: log 'e.getTargetException()', and pass back 'e'.\n                        throw new LogConfigurationException(\"Unexpected InvocationTargetException\", e.getTargetException());\n                    }\n                }\n            } catch (NoSuchMethodException e) {\n                // Assume we are running on JDK 1.1\n                // ignore\n                ;\n            }\n        }\n        if (classLoader == null) {\n            classLoader = SimpleLog.class.getClassLoader();\n        }\n        // Return the selected class loader\n        return classLoader;\n    }\n\n    private static InputStream getResourceAsStream(final String name) {\n        return (InputStream) AccessController.doPrivileged(new PrivilegedAction() {\n\n            public Object run() {\n                ClassLoader threadCL = getContextClassLoader();\n                if (threadCL != null) {\n                    return threadCL.getResourceAsStream(name);\n                } else {\n                    return ClassLoader.getSystemResourceAsStream(name);\n                }\n            }\n        });\n    }\n}\n",
		"id": "/EvoSuiteBenchmark/35_corina/src/main/java/corina/util/SimpleLog_1Test.java",
		"test_prompt": "// SimpleLog_1Test.java\npackage corina.util;\n\nimport java.io.InputStream;\nimport java.io.Serializable;\nimport java.lang.reflect.InvocationTargetException;\nimport java.lang.reflect.Method;\nimport java.security.AccessController;\nimport java.security.PrivilegedAction;\nimport java.text.DateFormat;\nimport java.text.SimpleDateFormat;\nimport java.util.Date;\nimport java.util.Properties;\nimport org.apache.commons.logging.Log;\nimport org.apache.commons.logging.LogConfigurationException;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link SimpleLog}.\n* It contains ten unit test cases for the {@link SimpleLog#isErrorEnabled()} method.\n*/\nclass SimpleLog_1Test {"
	},
	{
		"original_code": "// SimpleLog.java\n/*\n * $Header: /cvsroot/corina/corina/Source/corina/util/SimpleLog.java,v 1.2 2004/09/29 14:14:07 aaron Exp $\n * $Revision: 1.2 $\n * $Date: 2004/09/29 14:14:07 $\n *\n * ====================================================================\n * \n * The Apache Software License, Version 1.1\n *\n * Copyright (c) 2001-2003 The Apache Software Foundation.  All rights\n * reserved.\n *\n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions\n * are met:\n *\n * 1. Redistributions of source code must retain the above copyright\n *    notice, this list of conditions and the following disclaimer. \n *\n * 2. Redistributions in binary form must reproduce the above copyright\n *    notice, this list of conditions and the following disclaimer in\n *    the documentation and/or other materials provided with the\n *    distribution.\n *\n * 3. The end-user documentation included with the redistribution,\n *    if any, must include the following acknowledgement:  \n *       \"This product includes software developed by the \n *        Apache Software Foundation (http://www.apache.org/).\"\n *    Alternately, this acknowledgement may appear in the software itself,\n *    if and wherever such third-party acknowledgements normally appear.\n *\n * 4. The names \"Apache\", \"The Jakarta Project\", \"Commons\", and \"Apache Software\n *    Foundation\" must not be used to endorse or promote products derived\n *    from this software without prior written permission. For written \n *    permission, please contact apache@apache.org.\n *\n * 5. Products derived from this software may not be called \"Apache\",\n *    \"Apache\" nor may \"Apache\" appear in their names without prior \n *    written permission of the Apache Software Foundation.\n *\n * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n * SUCH DAMAGE.\n * ====================================================================\n *\n * This software consists of voluntary contributions made by many\n * individuals on behalf of the Apache Software Foundation.  For more\n * information on the Apache Software Foundation, please see\n * <http://www.apache.org/>.\n *\n */\npackage corina.util;\n\nimport java.io.InputStream;\nimport java.io.Serializable;\nimport java.lang.reflect.InvocationTargetException;\nimport java.lang.reflect.Method;\nimport java.security.AccessController;\nimport java.security.PrivilegedAction;\nimport java.text.DateFormat;\nimport java.text.SimpleDateFormat;\nimport java.util.Date;\nimport java.util.Properties;\nimport org.apache.commons.logging.Log;\nimport org.apache.commons.logging.LogConfigurationException;\n\n/**\n * <p>Simple implementation of Log that sends all enabled log messages,\n * for all defined loggers, to System.err.  The following system properties\n * are supported to configure the behavior of this logger:</p>\n * <ul>\n * <li><code>org.apache.commons.logging.simplelog.defaultlog</code> -\n *     Default logging detail level for all instances of SimpleLog.\n *     Must be one of (\"trace\", \"debug\", \"info\", \"warn\", \"error\", or \"fatal\").\n *     If not specified, defaults to \"info\". </li>\n * <li><code>org.apache.commons.logging.simplelog.log.xxxxx</code> -\n *     Logging detail level for a SimpleLog instance named \"xxxxx\".\n *     Must be one of (\"trace\", \"debug\", \"info\", \"warn\", \"error\", or \"fatal\").\n *     If not specified, the default logging detail level is used.</li>\n * <li><code>org.apache.commons.logging.simplelog.showlogname</code> -\n *     Set to <code>true</code> if you want the Log instance name to be\n *     included in output messages. Defaults to <code>false</code>.</li>\n * <li><code>org.apache.commons.logging.simplelog.showShortLogname</code> -\n *     Set to <code>true</code> if you want the last componet of the name to be\n *     included in output messages. Defaults to <code>true</code>.</li>\n * <li><code>org.apache.commons.logging.simplelog.showdatetime</code> -\n *     Set to <code>true</code> if you want the current date and time\n *     to be included in output messages. Default is false.</li>\n * </ul>\n *\n * <p>In addition to looking for system properties with the names specified\n * above, this implementation also checks for a class loader resource named\n * <code>\"simplelog.properties\"</code>, and includes any matching definitions\n * from this resource (if it exists).</p>\n *\n * @author <a href=\"mailto:sanders@apache.org\">Scott Sanders</a>\n * @author Rod Waldhoff\n * @author Robert Burrell Donkin\n *\n * @version $Id: SimpleLog.java,v 1.2 2004/09/29 14:14:07 aaron Exp $\n *\n * @deprecated Jakarta Commons Logging v1.0.4 introduced the write() delegate method I needed\n * so I don't have to rely on this slightly modified class anymore! - aaron\n */\npublic class SimpleLog implements Log, Serializable {\n\n    // ------------------------------------------------------- Class Attributes\n    /**\n     * All system properties used by <code>Simple</code> start with this\n     */\n    static protected final String systemPrefix = \"org.apache.commons.logging.simplelog.\";\n\n    /**\n     * Properties loaded from simplelog.properties\n     */\n    static protected final Properties simpleLogProps = new Properties();\n\n    /**\n     * Include the instance name in the log message?\n     */\n    static protected boolean showLogName = false;\n\n    /**\n     * Include the short name ( last component ) of the logger in the log\n     *        message. Default to true - otherwise we'll be lost in a flood of\n     *        messages without knowing who sends them.\n     */\n    static protected boolean showShortName = true;\n\n    /**\n     * Include the current time in the log message\n     */\n    static protected boolean showDateTime = false;\n\n    /**\n     * Used to format times\n     */\n    static protected DateFormat dateFormatter = null;\n\n    // ---------------------------------------------------- Log Level Constants\n    /**\n     * \"Trace\" level logging.\n     */\n    public static final int LOG_LEVEL_TRACE = 1;\n\n    /**\n     * \"Debug\" level logging.\n     */\n    public static final int LOG_LEVEL_DEBUG = 2;\n\n    /**\n     * \"Info\" level logging.\n     */\n    public static final int LOG_LEVEL_INFO = 3;\n\n    /**\n     * \"Warn\" level logging.\n     */\n    public static final int LOG_LEVEL_WARN = 4;\n\n    /**\n     * \"Error\" level logging.\n     */\n    public static final int LOG_LEVEL_ERROR = 5;\n\n    /**\n     * \"Fatal\" level logging.\n     */\n    public static final int LOG_LEVEL_FATAL = 6;\n\n    /**\n     * Enable all logging levels\n     */\n    public static final int LOG_LEVEL_ALL = (LOG_LEVEL_TRACE - 1);\n\n    /**\n     * Enable no logging levels\n     */\n    public static final int LOG_LEVEL_OFF = (LOG_LEVEL_FATAL + 1);\n\n    // ------------------------------------------------------------ Initializer\n    private static String getStringProperty(String name) {\n        String prop = null;\n        try {\n            prop = System.getProperty(name);\n        } catch (SecurityException e) {\n            // Ignore\n            ;\n        }\n        return (prop == null) ? simpleLogProps.getProperty(name) : prop;\n    }\n\n    private static String getStringProperty(String name, String dephault) {\n        String prop = getStringProperty(name);\n        return (prop == null) ? dephault : prop;\n    }\n\n    private static boolean getBooleanProperty(String name, boolean dephault) {\n        String prop = getStringProperty(name);\n        return (prop == null) ? dephault : \"true\".equalsIgnoreCase(prop);\n    }\n\n    // initialize class attributes\n    // load properties file, if found.\n    // override with system properties.\n    static {\n        // add props from the resource simplelog.properties\n        InputStream in = getResourceAsStream(\"simplelog.properties\");\n        if (null != in) {\n            try {\n                simpleLogProps.load(in);\n                in.close();\n            } catch (java.io.IOException e) {\n                // ignored\n            }\n        }\n        showLogName = getBooleanProperty(systemPrefix + \"showlogname\", showLogName);\n        showShortName = getBooleanProperty(systemPrefix + \"showShortLogname\", showShortName);\n        showDateTime = getBooleanProperty(systemPrefix + \"showdatetime\", showDateTime);\n        showLogName = getBooleanProperty(systemPrefix + \"showlogname\", showLogName);\n        if (showDateTime) {\n            dateFormatter = new SimpleDateFormat(getStringProperty(systemPrefix + \"dateformat\", \"yyyy/MM/dd HH:mm:ss:SSS zzz\"));\n        }\n    }\n\n    // ------------------------------------------------------------- Attributes\n    /**\n     * The name of this simple log instance\n     */\n    protected String logName = null;\n\n    /**\n     * The current log level\n     */\n    protected int currentLogLevel;\n\n    private String prefix = null;\n\n    // ------------------------------------------------------------ Constructor\n    /**\n     * Construct a simple log with given name.\n     *\n     * @param name log name\n     */\n    public SimpleLog(String name) {\n        logName = name;\n        // set initial log level\n        // Used to be: set default log level to ERROR\n        // IMHO it should be lower, but at least info ( costin ).\n        setLevel(SimpleLog.LOG_LEVEL_INFO);\n        // set log level from properties\n        String lvl = getStringProperty(systemPrefix + \"log.\" + logName);\n        int i = String.valueOf(name).lastIndexOf(\".\");\n        while (null == lvl && i > -1) {\n            name = name.substring(0, i);\n            lvl = getStringProperty(systemPrefix + \"log.\" + name);\n            i = String.valueOf(name).lastIndexOf(\".\");\n        }\n        if (null == lvl) {\n            lvl = getStringProperty(systemPrefix + \"defaultlog\");\n        }\n        if (\"all\".equalsIgnoreCase(lvl)) {\n            setLevel(SimpleLog.LOG_LEVEL_ALL);\n        } else if (\"trace\".equalsIgnoreCase(lvl)) {\n            setLevel(SimpleLog.LOG_LEVEL_TRACE);\n        } else if (\"debug\".equalsIgnoreCase(lvl)) {\n            setLevel(SimpleLog.LOG_LEVEL_DEBUG);\n        } else if (\"info\".equalsIgnoreCase(lvl)) {\n            setLevel(SimpleLog.LOG_LEVEL_INFO);\n        } else if (\"warn\".equalsIgnoreCase(lvl)) {\n            setLevel(SimpleLog.LOG_LEVEL_WARN);\n        } else if (\"error\".equalsIgnoreCase(lvl)) {\n            setLevel(SimpleLog.LOG_LEVEL_ERROR);\n        } else if (\"fatal\".equalsIgnoreCase(lvl)) {\n            setLevel(SimpleLog.LOG_LEVEL_FATAL);\n        } else if (\"off\".equalsIgnoreCase(lvl)) {\n            setLevel(SimpleLog.LOG_LEVEL_OFF);\n        }\n    }\n\n    // -------------------------------------------------------- Properties\n    /**\n     * <p> Set logging level. </p>\n     *\n     * @param currentLogLevel new logging level\n     */\n    public void setLevel(int currentLogLevel) {\n        this.currentLogLevel = currentLogLevel;\n    }\n\n    /**\n     * <p> Get logging level. </p>\n     */\n    public int getLevel() {\n        return currentLogLevel;\n    }\n\n    // -------------------------------------------------------- Logging Methods\n    /**\n     * <p> Do the actual logging.\n     * This method assembles the message\n     * and then prints to <code>System.err</code>.</p>\n     */\n    protected void log(int type, Object message, Throwable t) {\n        // use a string buffer for better performance\n        StringBuffer buf = new StringBuffer();\n        // append date-time if so configured\n        if (showDateTime) {\n            buf.append(dateFormatter.format(new Date()));\n            buf.append(\" \");\n        }\n        // append a readable representation of the log leve\n        switch(type) {\n            case SimpleLog.LOG_LEVEL_TRACE:\n                buf.append(\"[TRACE] \");\n                break;\n            case SimpleLog.LOG_LEVEL_DEBUG:\n                buf.append(\"[DEBUG] \");\n                break;\n            case SimpleLog.LOG_LEVEL_INFO:\n                buf.append(\"[INFO] \");\n                break;\n            case SimpleLog.LOG_LEVEL_WARN:\n                buf.append(\"[WARN] \");\n                break;\n            case SimpleLog.LOG_LEVEL_ERROR:\n                buf.append(\"[ERROR] \");\n                break;\n            case SimpleLog.LOG_LEVEL_FATAL:\n                buf.append(\"[FATAL] \");\n                break;\n        }\n        // append the name of the log instance if so configured\n        if (showShortName) {\n            if (prefix == null) {\n                // cut all but the last component of the name for both styles\n                prefix = logName.substring(logName.lastIndexOf(\".\") + 1) + \" - \";\n                prefix = prefix.substring(prefix.lastIndexOf(\"/\") + 1) + \"-\";\n            }\n            buf.append(prefix);\n        } else if (showLogName) {\n            buf.append(String.valueOf(logName)).append(\" - \");\n        }\n        // append the message\n        buf.append(String.valueOf(message));\n        // append stack trace if not null\n        if (t != null) {\n            buf.append(\" <\");\n            buf.append(t.toString());\n            buf.append(\">\");\n            java.io.StringWriter sw = new java.io.StringWriter(1024);\n            java.io.PrintWriter pw = new java.io.PrintWriter(sw);\n            t.printStackTrace(pw);\n            pw.close();\n            buf.append(sw.toString());\n        }\n        // print to System.err\n        doWrite(buf);\n    }\n\n    protected void doWrite(StringBuffer buf) {\n        System.err.println(buf.toString());\n    }\n\n    /**\n     * Is the given log level currently enabled?\n     *\n     * @param logLevel is this level enabled?\n     */\n    protected boolean isLevelEnabled(int logLevel) {\n        // log level are numerically ordered so can use simple numeric\n        // comparison\n        return (logLevel >= currentLogLevel);\n    }\n\n    // -------------------------------------------------------- Log Implementation\n    /**\n     * <p> Log a message with debug log level.</p>\n     */\n    public void debug(Object message) {\n        if (isLevelEnabled(SimpleLog.LOG_LEVEL_DEBUG)) {\n            log(SimpleLog.LOG_LEVEL_DEBUG, message, null);\n        }\n    }\n\n    /**\n     * <p> Log an error with debug log level.</p>\n     */\n    public void debug(Object message, Throwable t) {\n        if (isLevelEnabled(SimpleLog.LOG_LEVEL_DEBUG)) {\n            log(SimpleLog.LOG_LEVEL_DEBUG, message, t);\n        }\n    }\n\n    /**\n     * <p> Log a message with debug log level.</p>\n     */\n    public void trace(Object message) {\n        if (isLevelEnabled(SimpleLog.LOG_LEVEL_TRACE)) {\n            log(SimpleLog.LOG_LEVEL_TRACE, message, null);\n        }\n    }\n\n    /**\n     * <p> Log an error with debug log level.</p>\n     */\n    public void trace(Object message, Throwable t) {\n        if (isLevelEnabled(SimpleLog.LOG_LEVEL_TRACE)) {\n            log(SimpleLog.LOG_LEVEL_TRACE, message, t);\n        }\n    }\n\n    /**\n     * <p> Log a message with info log level.</p>\n     */\n    public void info(Object message) {\n        if (isLevelEnabled(SimpleLog.LOG_LEVEL_INFO)) {\n            log(SimpleLog.LOG_LEVEL_INFO, message, null);\n        }\n    }\n\n    /**\n     * <p> Log an error with info log level.</p>\n     */\n    public void info(Object message, Throwable t) {\n        if (isLevelEnabled(SimpleLog.LOG_LEVEL_INFO)) {\n            log(SimpleLog.LOG_LEVEL_INFO, message, t);\n        }\n    }\n\n    /**\n     * <p> Log a message with warn log level.</p>\n     */\n    public void warn(Object message) {\n        if (isLevelEnabled(SimpleLog.LOG_LEVEL_WARN)) {\n            log(SimpleLog.LOG_LEVEL_WARN, message, null);\n        }\n    }\n\n    /**\n     * <p> Log an error with warn log level.</p>\n     */\n    public void warn(Object message, Throwable t) {\n        if (isLevelEnabled(SimpleLog.LOG_LEVEL_WARN)) {\n            log(SimpleLog.LOG_LEVEL_WARN, message, t);\n        }\n    }\n\n    /**\n     * <p> Log a message with error log level.</p>\n     */\n    public void error(Object message) {\n        if (isLevelEnabled(SimpleLog.LOG_LEVEL_ERROR)) {\n            log(SimpleLog.LOG_LEVEL_ERROR, message, null);\n        }\n    }\n\n    /**\n     * <p> Log an error with error log level.</p>\n     */\n    public void error(Object message, Throwable t) {\n        if (isLevelEnabled(SimpleLog.LOG_LEVEL_ERROR)) {\n            log(SimpleLog.LOG_LEVEL_ERROR, message, t);\n        }\n    }\n\n    /**\n     * <p> Log a message with fatal log level.</p>\n     */\n    public void fatal(Object message) {\n        if (isLevelEnabled(SimpleLog.LOG_LEVEL_FATAL)) {\n            log(SimpleLog.LOG_LEVEL_FATAL, message, null);\n        }\n    }\n\n    /**\n     * <p> Log an error with fatal log level.</p>\n     */\n    public void fatal(Object message, Throwable t) {\n        if (isLevelEnabled(SimpleLog.LOG_LEVEL_FATAL)) {\n            log(SimpleLog.LOG_LEVEL_FATAL, message, t);\n        }\n    }\n\n    /**\n     * <p> Are debug messages currently enabled? </p>\n     *\n     * <p> This allows expensive operations such as <code>String</code>\n     * concatenation to be avoided when the message will be ignored by the\n     * logger. </p>\n     */\n    public final boolean isDebugEnabled() {\n        return isLevelEnabled(SimpleLog.LOG_LEVEL_DEBUG);\n    }\n\n    /**\n     * <p> Are error messages currently enabled? </p>\n     *\n     * <p> This allows expensive operations such as <code>String</code>\n     * concatenation to be avoided when the message will be ignored by the\n     * logger. </p>\n     */\n    public final boolean isErrorEnabled() {\n        return isLevelEnabled(SimpleLog.LOG_LEVEL_ERROR);\n    }\n\n    /**\n     * <p> Are fatal messages currently enabled? </p>\n     *\n     * <p> This allows expensive operations such as <code>String</code>\n     * concatenation to be avoided when the message will be ignored by the\n     * logger. </p>\n     */\n    public final boolean isFatalEnabled() {\n        return isLevelEnabled(SimpleLog.LOG_LEVEL_FATAL);\n    }\n\n    /**\n     * <p> Are info messages currently enabled? </p>\n     *\n     * <p> This allows expensive operations such as <code>String</code>\n     * concatenation to be avoided when the message will be ignored by the\n     * logger. </p>\n     */\n    public final boolean isInfoEnabled() {\n        return isLevelEnabled(SimpleLog.LOG_LEVEL_INFO);\n    }\n\n    /**\n     * <p> Are trace messages currently enabled? </p>\n     *\n     * <p> This allows expensive operations such as <code>String</code>\n     * concatenation to be avoided when the message will be ignored by the\n     * logger. </p>\n     */\n    public final boolean isTraceEnabled() {\n        return isLevelEnabled(SimpleLog.LOG_LEVEL_TRACE);\n    }\n\n    /**\n     * <p> Are warn messages currently enabled? </p>\n     *\n     * <p> This allows expensive operations such as <code>String</code>\n     * concatenation to be avoided when the message will be ignored by the\n     * logger. </p>\n     */\n    public final boolean isWarnEnabled() {\n        return isLevelEnabled(SimpleLog.LOG_LEVEL_WARN);\n    }\n\n    /**\n     * Return the thread context class loader if available.\n     * Otherwise return null.\n     *\n     * The thread context class loader is available for JDK 1.2\n     * or later, if certain security conditions are met.\n     *\n     * @exception LogConfigurationException if a suitable class loader\n     * cannot be identified.\n     */\n    private static ClassLoader getContextClassLoader() {\n        ClassLoader classLoader = null;\n        if (classLoader == null) {\n            try {\n                // Are we running on a JDK 1.2 or later system?\n                Method method = Thread.class.getMethod(\"getContextClassLoader\", null);\n                // Get the thread context class loader (if there is one)\n                try {\n                    classLoader = (ClassLoader) method.invoke(Thread.currentThread(), null);\n                } catch (IllegalAccessException e) {\n                    // ignore\n                    ;\n                } catch (InvocationTargetException e) {\n                    /**\n                     * InvocationTargetException is thrown by 'invoke' when\n                     * the method being invoked (getContextClassLoader) throws\n                     * an exception.\n                     *\n                     * getContextClassLoader() throws SecurityException when\n                     * the context class loader isn't an ancestor of the\n                     * calling class's class loader, or if security\n                     * permissions are restricted.\n                     *\n                     * In the first case (not related), we want to ignore and\n                     * keep going.  We cannot help but also ignore the second\n                     * with the logic below, but other calls elsewhere (to\n                     * obtain a class loader) will trigger this exception where\n                     * we can make a distinction.\n                     */\n                    if (e.getTargetException() instanceof SecurityException) {\n                        // ignore\n                        ;\n                    } else {\n                        // Capture 'e.getTargetException()' exception for details\n                        // alternate: log 'e.getTargetException()', and pass back 'e'.\n                        throw new LogConfigurationException(\"Unexpected InvocationTargetException\", e.getTargetException());\n                    }\n                }\n            } catch (NoSuchMethodException e) {\n                // Assume we are running on JDK 1.1\n                // ignore\n                ;\n            }\n        }\n        if (classLoader == null) {\n            classLoader = SimpleLog.class.getClassLoader();\n        }\n        // Return the selected class loader\n        return classLoader;\n    }\n\n    private static InputStream getResourceAsStream(final String name) {\n        return (InputStream) AccessController.doPrivileged(new PrivilegedAction() {\n\n            public Object run() {\n                ClassLoader threadCL = getContextClassLoader();\n                if (threadCL != null) {\n                    return threadCL.getResourceAsStream(name);\n                } else {\n                    return ClassLoader.getSystemResourceAsStream(name);\n                }\n            }\n        });\n    }\n}\n",
		"id": "/EvoSuiteBenchmark/35_corina/src/main/java/corina/util/SimpleLog_2Test.java",
		"test_prompt": "// SimpleLog_2Test.java\npackage corina.util;\n\nimport java.io.InputStream;\nimport java.io.Serializable;\nimport java.lang.reflect.InvocationTargetException;\nimport java.lang.reflect.Method;\nimport java.security.AccessController;\nimport java.security.PrivilegedAction;\nimport java.text.DateFormat;\nimport java.text.SimpleDateFormat;\nimport java.util.Date;\nimport java.util.Properties;\nimport org.apache.commons.logging.Log;\nimport org.apache.commons.logging.LogConfigurationException;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link SimpleLog}.\n* It contains ten unit test cases for the {@link SimpleLog#isFatalEnabled()} method.\n*/\nclass SimpleLog_2Test {"
	},
	{
		"original_code": "// SimpleLog.java\n/*\n * $Header: /cvsroot/corina/corina/Source/corina/util/SimpleLog.java,v 1.2 2004/09/29 14:14:07 aaron Exp $\n * $Revision: 1.2 $\n * $Date: 2004/09/29 14:14:07 $\n *\n * ====================================================================\n * \n * The Apache Software License, Version 1.1\n *\n * Copyright (c) 2001-2003 The Apache Software Foundation.  All rights\n * reserved.\n *\n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions\n * are met:\n *\n * 1. Redistributions of source code must retain the above copyright\n *    notice, this list of conditions and the following disclaimer. \n *\n * 2. Redistributions in binary form must reproduce the above copyright\n *    notice, this list of conditions and the following disclaimer in\n *    the documentation and/or other materials provided with the\n *    distribution.\n *\n * 3. The end-user documentation included with the redistribution,\n *    if any, must include the following acknowledgement:  \n *       \"This product includes software developed by the \n *        Apache Software Foundation (http://www.apache.org/).\"\n *    Alternately, this acknowledgement may appear in the software itself,\n *    if and wherever such third-party acknowledgements normally appear.\n *\n * 4. The names \"Apache\", \"The Jakarta Project\", \"Commons\", and \"Apache Software\n *    Foundation\" must not be used to endorse or promote products derived\n *    from this software without prior written permission. For written \n *    permission, please contact apache@apache.org.\n *\n * 5. Products derived from this software may not be called \"Apache\",\n *    \"Apache\" nor may \"Apache\" appear in their names without prior \n *    written permission of the Apache Software Foundation.\n *\n * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n * SUCH DAMAGE.\n * ====================================================================\n *\n * This software consists of voluntary contributions made by many\n * individuals on behalf of the Apache Software Foundation.  For more\n * information on the Apache Software Foundation, please see\n * <http://www.apache.org/>.\n *\n */\npackage corina.util;\n\nimport java.io.InputStream;\nimport java.io.Serializable;\nimport java.lang.reflect.InvocationTargetException;\nimport java.lang.reflect.Method;\nimport java.security.AccessController;\nimport java.security.PrivilegedAction;\nimport java.text.DateFormat;\nimport java.text.SimpleDateFormat;\nimport java.util.Date;\nimport java.util.Properties;\nimport org.apache.commons.logging.Log;\nimport org.apache.commons.logging.LogConfigurationException;\n\n/**\n * <p>Simple implementation of Log that sends all enabled log messages,\n * for all defined loggers, to System.err.  The following system properties\n * are supported to configure the behavior of this logger:</p>\n * <ul>\n * <li><code>org.apache.commons.logging.simplelog.defaultlog</code> -\n *     Default logging detail level for all instances of SimpleLog.\n *     Must be one of (\"trace\", \"debug\", \"info\", \"warn\", \"error\", or \"fatal\").\n *     If not specified, defaults to \"info\". </li>\n * <li><code>org.apache.commons.logging.simplelog.log.xxxxx</code> -\n *     Logging detail level for a SimpleLog instance named \"xxxxx\".\n *     Must be one of (\"trace\", \"debug\", \"info\", \"warn\", \"error\", or \"fatal\").\n *     If not specified, the default logging detail level is used.</li>\n * <li><code>org.apache.commons.logging.simplelog.showlogname</code> -\n *     Set to <code>true</code> if you want the Log instance name to be\n *     included in output messages. Defaults to <code>false</code>.</li>\n * <li><code>org.apache.commons.logging.simplelog.showShortLogname</code> -\n *     Set to <code>true</code> if you want the last componet of the name to be\n *     included in output messages. Defaults to <code>true</code>.</li>\n * <li><code>org.apache.commons.logging.simplelog.showdatetime</code> -\n *     Set to <code>true</code> if you want the current date and time\n *     to be included in output messages. Default is false.</li>\n * </ul>\n *\n * <p>In addition to looking for system properties with the names specified\n * above, this implementation also checks for a class loader resource named\n * <code>\"simplelog.properties\"</code>, and includes any matching definitions\n * from this resource (if it exists).</p>\n *\n * @author <a href=\"mailto:sanders@apache.org\">Scott Sanders</a>\n * @author Rod Waldhoff\n * @author Robert Burrell Donkin\n *\n * @version $Id: SimpleLog.java,v 1.2 2004/09/29 14:14:07 aaron Exp $\n *\n * @deprecated Jakarta Commons Logging v1.0.4 introduced the write() delegate method I needed\n * so I don't have to rely on this slightly modified class anymore! - aaron\n */\npublic class SimpleLog implements Log, Serializable {\n\n    // ------------------------------------------------------- Class Attributes\n    /**\n     * All system properties used by <code>Simple</code> start with this\n     */\n    static protected final String systemPrefix = \"org.apache.commons.logging.simplelog.\";\n\n    /**\n     * Properties loaded from simplelog.properties\n     */\n    static protected final Properties simpleLogProps = new Properties();\n\n    /**\n     * Include the instance name in the log message?\n     */\n    static protected boolean showLogName = false;\n\n    /**\n     * Include the short name ( last component ) of the logger in the log\n     *        message. Default to true - otherwise we'll be lost in a flood of\n     *        messages without knowing who sends them.\n     */\n    static protected boolean showShortName = true;\n\n    /**\n     * Include the current time in the log message\n     */\n    static protected boolean showDateTime = false;\n\n    /**\n     * Used to format times\n     */\n    static protected DateFormat dateFormatter = null;\n\n    // ---------------------------------------------------- Log Level Constants\n    /**\n     * \"Trace\" level logging.\n     */\n    public static final int LOG_LEVEL_TRACE = 1;\n\n    /**\n     * \"Debug\" level logging.\n     */\n    public static final int LOG_LEVEL_DEBUG = 2;\n\n    /**\n     * \"Info\" level logging.\n     */\n    public static final int LOG_LEVEL_INFO = 3;\n\n    /**\n     * \"Warn\" level logging.\n     */\n    public static final int LOG_LEVEL_WARN = 4;\n\n    /**\n     * \"Error\" level logging.\n     */\n    public static final int LOG_LEVEL_ERROR = 5;\n\n    /**\n     * \"Fatal\" level logging.\n     */\n    public static final int LOG_LEVEL_FATAL = 6;\n\n    /**\n     * Enable all logging levels\n     */\n    public static final int LOG_LEVEL_ALL = (LOG_LEVEL_TRACE - 1);\n\n    /**\n     * Enable no logging levels\n     */\n    public static final int LOG_LEVEL_OFF = (LOG_LEVEL_FATAL + 1);\n\n    // ------------------------------------------------------------ Initializer\n    private static String getStringProperty(String name) {\n        String prop = null;\n        try {\n            prop = System.getProperty(name);\n        } catch (SecurityException e) {\n            // Ignore\n            ;\n        }\n        return (prop == null) ? simpleLogProps.getProperty(name) : prop;\n    }\n\n    private static String getStringProperty(String name, String dephault) {\n        String prop = getStringProperty(name);\n        return (prop == null) ? dephault : prop;\n    }\n\n    private static boolean getBooleanProperty(String name, boolean dephault) {\n        String prop = getStringProperty(name);\n        return (prop == null) ? dephault : \"true\".equalsIgnoreCase(prop);\n    }\n\n    // initialize class attributes\n    // load properties file, if found.\n    // override with system properties.\n    static {\n        // add props from the resource simplelog.properties\n        InputStream in = getResourceAsStream(\"simplelog.properties\");\n        if (null != in) {\n            try {\n                simpleLogProps.load(in);\n                in.close();\n            } catch (java.io.IOException e) {\n                // ignored\n            }\n        }\n        showLogName = getBooleanProperty(systemPrefix + \"showlogname\", showLogName);\n        showShortName = getBooleanProperty(systemPrefix + \"showShortLogname\", showShortName);\n        showDateTime = getBooleanProperty(systemPrefix + \"showdatetime\", showDateTime);\n        showLogName = getBooleanProperty(systemPrefix + \"showlogname\", showLogName);\n        if (showDateTime) {\n            dateFormatter = new SimpleDateFormat(getStringProperty(systemPrefix + \"dateformat\", \"yyyy/MM/dd HH:mm:ss:SSS zzz\"));\n        }\n    }\n\n    // ------------------------------------------------------------- Attributes\n    /**\n     * The name of this simple log instance\n     */\n    protected String logName = null;\n\n    /**\n     * The current log level\n     */\n    protected int currentLogLevel;\n\n    private String prefix = null;\n\n    // ------------------------------------------------------------ Constructor\n    /**\n     * Construct a simple log with given name.\n     *\n     * @param name log name\n     */\n    public SimpleLog(String name) {\n        logName = name;\n        // set initial log level\n        // Used to be: set default log level to ERROR\n        // IMHO it should be lower, but at least info ( costin ).\n        setLevel(SimpleLog.LOG_LEVEL_INFO);\n        // set log level from properties\n        String lvl = getStringProperty(systemPrefix + \"log.\" + logName);\n        int i = String.valueOf(name).lastIndexOf(\".\");\n        while (null == lvl && i > -1) {\n            name = name.substring(0, i);\n            lvl = getStringProperty(systemPrefix + \"log.\" + name);\n            i = String.valueOf(name).lastIndexOf(\".\");\n        }\n        if (null == lvl) {\n            lvl = getStringProperty(systemPrefix + \"defaultlog\");\n        }\n        if (\"all\".equalsIgnoreCase(lvl)) {\n            setLevel(SimpleLog.LOG_LEVEL_ALL);\n        } else if (\"trace\".equalsIgnoreCase(lvl)) {\n            setLevel(SimpleLog.LOG_LEVEL_TRACE);\n        } else if (\"debug\".equalsIgnoreCase(lvl)) {\n            setLevel(SimpleLog.LOG_LEVEL_DEBUG);\n        } else if (\"info\".equalsIgnoreCase(lvl)) {\n            setLevel(SimpleLog.LOG_LEVEL_INFO);\n        } else if (\"warn\".equalsIgnoreCase(lvl)) {\n            setLevel(SimpleLog.LOG_LEVEL_WARN);\n        } else if (\"error\".equalsIgnoreCase(lvl)) {\n            setLevel(SimpleLog.LOG_LEVEL_ERROR);\n        } else if (\"fatal\".equalsIgnoreCase(lvl)) {\n            setLevel(SimpleLog.LOG_LEVEL_FATAL);\n        } else if (\"off\".equalsIgnoreCase(lvl)) {\n            setLevel(SimpleLog.LOG_LEVEL_OFF);\n        }\n    }\n\n    // -------------------------------------------------------- Properties\n    /**\n     * <p> Set logging level. </p>\n     *\n     * @param currentLogLevel new logging level\n     */\n    public void setLevel(int currentLogLevel) {\n        this.currentLogLevel = currentLogLevel;\n    }\n\n    /**\n     * <p> Get logging level. </p>\n     */\n    public int getLevel() {\n        return currentLogLevel;\n    }\n\n    // -------------------------------------------------------- Logging Methods\n    /**\n     * <p> Do the actual logging.\n     * This method assembles the message\n     * and then prints to <code>System.err</code>.</p>\n     */\n    protected void log(int type, Object message, Throwable t) {\n        // use a string buffer for better performance\n        StringBuffer buf = new StringBuffer();\n        // append date-time if so configured\n        if (showDateTime) {\n            buf.append(dateFormatter.format(new Date()));\n            buf.append(\" \");\n        }\n        // append a readable representation of the log leve\n        switch(type) {\n            case SimpleLog.LOG_LEVEL_TRACE:\n                buf.append(\"[TRACE] \");\n                break;\n            case SimpleLog.LOG_LEVEL_DEBUG:\n                buf.append(\"[DEBUG] \");\n                break;\n            case SimpleLog.LOG_LEVEL_INFO:\n                buf.append(\"[INFO] \");\n                break;\n            case SimpleLog.LOG_LEVEL_WARN:\n                buf.append(\"[WARN] \");\n                break;\n            case SimpleLog.LOG_LEVEL_ERROR:\n                buf.append(\"[ERROR] \");\n                break;\n            case SimpleLog.LOG_LEVEL_FATAL:\n                buf.append(\"[FATAL] \");\n                break;\n        }\n        // append the name of the log instance if so configured\n        if (showShortName) {\n            if (prefix == null) {\n                // cut all but the last component of the name for both styles\n                prefix = logName.substring(logName.lastIndexOf(\".\") + 1) + \" - \";\n                prefix = prefix.substring(prefix.lastIndexOf(\"/\") + 1) + \"-\";\n            }\n            buf.append(prefix);\n        } else if (showLogName) {\n            buf.append(String.valueOf(logName)).append(\" - \");\n        }\n        // append the message\n        buf.append(String.valueOf(message));\n        // append stack trace if not null\n        if (t != null) {\n            buf.append(\" <\");\n            buf.append(t.toString());\n            buf.append(\">\");\n            java.io.StringWriter sw = new java.io.StringWriter(1024);\n            java.io.PrintWriter pw = new java.io.PrintWriter(sw);\n            t.printStackTrace(pw);\n            pw.close();\n            buf.append(sw.toString());\n        }\n        // print to System.err\n        doWrite(buf);\n    }\n\n    protected void doWrite(StringBuffer buf) {\n        System.err.println(buf.toString());\n    }\n\n    /**\n     * Is the given log level currently enabled?\n     *\n     * @param logLevel is this level enabled?\n     */\n    protected boolean isLevelEnabled(int logLevel) {\n        // log level are numerically ordered so can use simple numeric\n        // comparison\n        return (logLevel >= currentLogLevel);\n    }\n\n    // -------------------------------------------------------- Log Implementation\n    /**\n     * <p> Log a message with debug log level.</p>\n     */\n    public void debug(Object message) {\n        if (isLevelEnabled(SimpleLog.LOG_LEVEL_DEBUG)) {\n            log(SimpleLog.LOG_LEVEL_DEBUG, message, null);\n        }\n    }\n\n    /**\n     * <p> Log an error with debug log level.</p>\n     */\n    public void debug(Object message, Throwable t) {\n        if (isLevelEnabled(SimpleLog.LOG_LEVEL_DEBUG)) {\n            log(SimpleLog.LOG_LEVEL_DEBUG, message, t);\n        }\n    }\n\n    /**\n     * <p> Log a message with debug log level.</p>\n     */\n    public void trace(Object message) {\n        if (isLevelEnabled(SimpleLog.LOG_LEVEL_TRACE)) {\n            log(SimpleLog.LOG_LEVEL_TRACE, message, null);\n        }\n    }\n\n    /**\n     * <p> Log an error with debug log level.</p>\n     */\n    public void trace(Object message, Throwable t) {\n        if (isLevelEnabled(SimpleLog.LOG_LEVEL_TRACE)) {\n            log(SimpleLog.LOG_LEVEL_TRACE, message, t);\n        }\n    }\n\n    /**\n     * <p> Log a message with info log level.</p>\n     */\n    public void info(Object message) {\n        if (isLevelEnabled(SimpleLog.LOG_LEVEL_INFO)) {\n            log(SimpleLog.LOG_LEVEL_INFO, message, null);\n        }\n    }\n\n    /**\n     * <p> Log an error with info log level.</p>\n     */\n    public void info(Object message, Throwable t) {\n        if (isLevelEnabled(SimpleLog.LOG_LEVEL_INFO)) {\n            log(SimpleLog.LOG_LEVEL_INFO, message, t);\n        }\n    }\n\n    /**\n     * <p> Log a message with warn log level.</p>\n     */\n    public void warn(Object message) {\n        if (isLevelEnabled(SimpleLog.LOG_LEVEL_WARN)) {\n            log(SimpleLog.LOG_LEVEL_WARN, message, null);\n        }\n    }\n\n    /**\n     * <p> Log an error with warn log level.</p>\n     */\n    public void warn(Object message, Throwable t) {\n        if (isLevelEnabled(SimpleLog.LOG_LEVEL_WARN)) {\n            log(SimpleLog.LOG_LEVEL_WARN, message, t);\n        }\n    }\n\n    /**\n     * <p> Log a message with error log level.</p>\n     */\n    public void error(Object message) {\n        if (isLevelEnabled(SimpleLog.LOG_LEVEL_ERROR)) {\n            log(SimpleLog.LOG_LEVEL_ERROR, message, null);\n        }\n    }\n\n    /**\n     * <p> Log an error with error log level.</p>\n     */\n    public void error(Object message, Throwable t) {\n        if (isLevelEnabled(SimpleLog.LOG_LEVEL_ERROR)) {\n            log(SimpleLog.LOG_LEVEL_ERROR, message, t);\n        }\n    }\n\n    /**\n     * <p> Log a message with fatal log level.</p>\n     */\n    public void fatal(Object message) {\n        if (isLevelEnabled(SimpleLog.LOG_LEVEL_FATAL)) {\n            log(SimpleLog.LOG_LEVEL_FATAL, message, null);\n        }\n    }\n\n    /**\n     * <p> Log an error with fatal log level.</p>\n     */\n    public void fatal(Object message, Throwable t) {\n        if (isLevelEnabled(SimpleLog.LOG_LEVEL_FATAL)) {\n            log(SimpleLog.LOG_LEVEL_FATAL, message, t);\n        }\n    }\n\n    /**\n     * <p> Are debug messages currently enabled? </p>\n     *\n     * <p> This allows expensive operations such as <code>String</code>\n     * concatenation to be avoided when the message will be ignored by the\n     * logger. </p>\n     */\n    public final boolean isDebugEnabled() {\n        return isLevelEnabled(SimpleLog.LOG_LEVEL_DEBUG);\n    }\n\n    /**\n     * <p> Are error messages currently enabled? </p>\n     *\n     * <p> This allows expensive operations such as <code>String</code>\n     * concatenation to be avoided when the message will be ignored by the\n     * logger. </p>\n     */\n    public final boolean isErrorEnabled() {\n        return isLevelEnabled(SimpleLog.LOG_LEVEL_ERROR);\n    }\n\n    /**\n     * <p> Are fatal messages currently enabled? </p>\n     *\n     * <p> This allows expensive operations such as <code>String</code>\n     * concatenation to be avoided when the message will be ignored by the\n     * logger. </p>\n     */\n    public final boolean isFatalEnabled() {\n        return isLevelEnabled(SimpleLog.LOG_LEVEL_FATAL);\n    }\n\n    /**\n     * <p> Are info messages currently enabled? </p>\n     *\n     * <p> This allows expensive operations such as <code>String</code>\n     * concatenation to be avoided when the message will be ignored by the\n     * logger. </p>\n     */\n    public final boolean isInfoEnabled() {\n        return isLevelEnabled(SimpleLog.LOG_LEVEL_INFO);\n    }\n\n    /**\n     * <p> Are trace messages currently enabled? </p>\n     *\n     * <p> This allows expensive operations such as <code>String</code>\n     * concatenation to be avoided when the message will be ignored by the\n     * logger. </p>\n     */\n    public final boolean isTraceEnabled() {\n        return isLevelEnabled(SimpleLog.LOG_LEVEL_TRACE);\n    }\n\n    /**\n     * <p> Are warn messages currently enabled? </p>\n     *\n     * <p> This allows expensive operations such as <code>String</code>\n     * concatenation to be avoided when the message will be ignored by the\n     * logger. </p>\n     */\n    public final boolean isWarnEnabled() {\n        return isLevelEnabled(SimpleLog.LOG_LEVEL_WARN);\n    }\n\n    /**\n     * Return the thread context class loader if available.\n     * Otherwise return null.\n     *\n     * The thread context class loader is available for JDK 1.2\n     * or later, if certain security conditions are met.\n     *\n     * @exception LogConfigurationException if a suitable class loader\n     * cannot be identified.\n     */\n    private static ClassLoader getContextClassLoader() {\n        ClassLoader classLoader = null;\n        if (classLoader == null) {\n            try {\n                // Are we running on a JDK 1.2 or later system?\n                Method method = Thread.class.getMethod(\"getContextClassLoader\", null);\n                // Get the thread context class loader (if there is one)\n                try {\n                    classLoader = (ClassLoader) method.invoke(Thread.currentThread(), null);\n                } catch (IllegalAccessException e) {\n                    // ignore\n                    ;\n                } catch (InvocationTargetException e) {\n                    /**\n                     * InvocationTargetException is thrown by 'invoke' when\n                     * the method being invoked (getContextClassLoader) throws\n                     * an exception.\n                     *\n                     * getContextClassLoader() throws SecurityException when\n                     * the context class loader isn't an ancestor of the\n                     * calling class's class loader, or if security\n                     * permissions are restricted.\n                     *\n                     * In the first case (not related), we want to ignore and\n                     * keep going.  We cannot help but also ignore the second\n                     * with the logic below, but other calls elsewhere (to\n                     * obtain a class loader) will trigger this exception where\n                     * we can make a distinction.\n                     */\n                    if (e.getTargetException() instanceof SecurityException) {\n                        // ignore\n                        ;\n                    } else {\n                        // Capture 'e.getTargetException()' exception for details\n                        // alternate: log 'e.getTargetException()', and pass back 'e'.\n                        throw new LogConfigurationException(\"Unexpected InvocationTargetException\", e.getTargetException());\n                    }\n                }\n            } catch (NoSuchMethodException e) {\n                // Assume we are running on JDK 1.1\n                // ignore\n                ;\n            }\n        }\n        if (classLoader == null) {\n            classLoader = SimpleLog.class.getClassLoader();\n        }\n        // Return the selected class loader\n        return classLoader;\n    }\n\n    private static InputStream getResourceAsStream(final String name) {\n        return (InputStream) AccessController.doPrivileged(new PrivilegedAction() {\n\n            public Object run() {\n                ClassLoader threadCL = getContextClassLoader();\n                if (threadCL != null) {\n                    return threadCL.getResourceAsStream(name);\n                } else {\n                    return ClassLoader.getSystemResourceAsStream(name);\n                }\n            }\n        });\n    }\n}\n",
		"id": "/EvoSuiteBenchmark/35_corina/src/main/java/corina/util/SimpleLog_3Test.java",
		"test_prompt": "// SimpleLog_3Test.java\npackage corina.util;\n\nimport java.io.InputStream;\nimport java.io.Serializable;\nimport java.lang.reflect.InvocationTargetException;\nimport java.lang.reflect.Method;\nimport java.security.AccessController;\nimport java.security.PrivilegedAction;\nimport java.text.DateFormat;\nimport java.text.SimpleDateFormat;\nimport java.util.Date;\nimport java.util.Properties;\nimport org.apache.commons.logging.Log;\nimport org.apache.commons.logging.LogConfigurationException;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link SimpleLog}.\n* It contains ten unit test cases for the {@link SimpleLog#isInfoEnabled()} method.\n*/\nclass SimpleLog_3Test {"
	},
	{
		"original_code": "// SimpleLog.java\n/*\n * $Header: /cvsroot/corina/corina/Source/corina/util/SimpleLog.java,v 1.2 2004/09/29 14:14:07 aaron Exp $\n * $Revision: 1.2 $\n * $Date: 2004/09/29 14:14:07 $\n *\n * ====================================================================\n * \n * The Apache Software License, Version 1.1\n *\n * Copyright (c) 2001-2003 The Apache Software Foundation.  All rights\n * reserved.\n *\n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions\n * are met:\n *\n * 1. Redistributions of source code must retain the above copyright\n *    notice, this list of conditions and the following disclaimer. \n *\n * 2. Redistributions in binary form must reproduce the above copyright\n *    notice, this list of conditions and the following disclaimer in\n *    the documentation and/or other materials provided with the\n *    distribution.\n *\n * 3. The end-user documentation included with the redistribution,\n *    if any, must include the following acknowledgement:  \n *       \"This product includes software developed by the \n *        Apache Software Foundation (http://www.apache.org/).\"\n *    Alternately, this acknowledgement may appear in the software itself,\n *    if and wherever such third-party acknowledgements normally appear.\n *\n * 4. The names \"Apache\", \"The Jakarta Project\", \"Commons\", and \"Apache Software\n *    Foundation\" must not be used to endorse or promote products derived\n *    from this software without prior written permission. For written \n *    permission, please contact apache@apache.org.\n *\n * 5. Products derived from this software may not be called \"Apache\",\n *    \"Apache\" nor may \"Apache\" appear in their names without prior \n *    written permission of the Apache Software Foundation.\n *\n * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n * SUCH DAMAGE.\n * ====================================================================\n *\n * This software consists of voluntary contributions made by many\n * individuals on behalf of the Apache Software Foundation.  For more\n * information on the Apache Software Foundation, please see\n * <http://www.apache.org/>.\n *\n */\npackage corina.util;\n\nimport java.io.InputStream;\nimport java.io.Serializable;\nimport java.lang.reflect.InvocationTargetException;\nimport java.lang.reflect.Method;\nimport java.security.AccessController;\nimport java.security.PrivilegedAction;\nimport java.text.DateFormat;\nimport java.text.SimpleDateFormat;\nimport java.util.Date;\nimport java.util.Properties;\nimport org.apache.commons.logging.Log;\nimport org.apache.commons.logging.LogConfigurationException;\n\n/**\n * <p>Simple implementation of Log that sends all enabled log messages,\n * for all defined loggers, to System.err.  The following system properties\n * are supported to configure the behavior of this logger:</p>\n * <ul>\n * <li><code>org.apache.commons.logging.simplelog.defaultlog</code> -\n *     Default logging detail level for all instances of SimpleLog.\n *     Must be one of (\"trace\", \"debug\", \"info\", \"warn\", \"error\", or \"fatal\").\n *     If not specified, defaults to \"info\". </li>\n * <li><code>org.apache.commons.logging.simplelog.log.xxxxx</code> -\n *     Logging detail level for a SimpleLog instance named \"xxxxx\".\n *     Must be one of (\"trace\", \"debug\", \"info\", \"warn\", \"error\", or \"fatal\").\n *     If not specified, the default logging detail level is used.</li>\n * <li><code>org.apache.commons.logging.simplelog.showlogname</code> -\n *     Set to <code>true</code> if you want the Log instance name to be\n *     included in output messages. Defaults to <code>false</code>.</li>\n * <li><code>org.apache.commons.logging.simplelog.showShortLogname</code> -\n *     Set to <code>true</code> if you want the last componet of the name to be\n *     included in output messages. Defaults to <code>true</code>.</li>\n * <li><code>org.apache.commons.logging.simplelog.showdatetime</code> -\n *     Set to <code>true</code> if you want the current date and time\n *     to be included in output messages. Default is false.</li>\n * </ul>\n *\n * <p>In addition to looking for system properties with the names specified\n * above, this implementation also checks for a class loader resource named\n * <code>\"simplelog.properties\"</code>, and includes any matching definitions\n * from this resource (if it exists).</p>\n *\n * @author <a href=\"mailto:sanders@apache.org\">Scott Sanders</a>\n * @author Rod Waldhoff\n * @author Robert Burrell Donkin\n *\n * @version $Id: SimpleLog.java,v 1.2 2004/09/29 14:14:07 aaron Exp $\n *\n * @deprecated Jakarta Commons Logging v1.0.4 introduced the write() delegate method I needed\n * so I don't have to rely on this slightly modified class anymore! - aaron\n */\npublic class SimpleLog implements Log, Serializable {\n\n    // ------------------------------------------------------- Class Attributes\n    /**\n     * All system properties used by <code>Simple</code> start with this\n     */\n    static protected final String systemPrefix = \"org.apache.commons.logging.simplelog.\";\n\n    /**\n     * Properties loaded from simplelog.properties\n     */\n    static protected final Properties simpleLogProps = new Properties();\n\n    /**\n     * Include the instance name in the log message?\n     */\n    static protected boolean showLogName = false;\n\n    /**\n     * Include the short name ( last component ) of the logger in the log\n     *        message. Default to true - otherwise we'll be lost in a flood of\n     *        messages without knowing who sends them.\n     */\n    static protected boolean showShortName = true;\n\n    /**\n     * Include the current time in the log message\n     */\n    static protected boolean showDateTime = false;\n\n    /**\n     * Used to format times\n     */\n    static protected DateFormat dateFormatter = null;\n\n    // ---------------------------------------------------- Log Level Constants\n    /**\n     * \"Trace\" level logging.\n     */\n    public static final int LOG_LEVEL_TRACE = 1;\n\n    /**\n     * \"Debug\" level logging.\n     */\n    public static final int LOG_LEVEL_DEBUG = 2;\n\n    /**\n     * \"Info\" level logging.\n     */\n    public static final int LOG_LEVEL_INFO = 3;\n\n    /**\n     * \"Warn\" level logging.\n     */\n    public static final int LOG_LEVEL_WARN = 4;\n\n    /**\n     * \"Error\" level logging.\n     */\n    public static final int LOG_LEVEL_ERROR = 5;\n\n    /**\n     * \"Fatal\" level logging.\n     */\n    public static final int LOG_LEVEL_FATAL = 6;\n\n    /**\n     * Enable all logging levels\n     */\n    public static final int LOG_LEVEL_ALL = (LOG_LEVEL_TRACE - 1);\n\n    /**\n     * Enable no logging levels\n     */\n    public static final int LOG_LEVEL_OFF = (LOG_LEVEL_FATAL + 1);\n\n    // ------------------------------------------------------------ Initializer\n    private static String getStringProperty(String name) {\n        String prop = null;\n        try {\n            prop = System.getProperty(name);\n        } catch (SecurityException e) {\n            // Ignore\n            ;\n        }\n        return (prop == null) ? simpleLogProps.getProperty(name) : prop;\n    }\n\n    private static String getStringProperty(String name, String dephault) {\n        String prop = getStringProperty(name);\n        return (prop == null) ? dephault : prop;\n    }\n\n    private static boolean getBooleanProperty(String name, boolean dephault) {\n        String prop = getStringProperty(name);\n        return (prop == null) ? dephault : \"true\".equalsIgnoreCase(prop);\n    }\n\n    // initialize class attributes\n    // load properties file, if found.\n    // override with system properties.\n    static {\n        // add props from the resource simplelog.properties\n        InputStream in = getResourceAsStream(\"simplelog.properties\");\n        if (null != in) {\n            try {\n                simpleLogProps.load(in);\n                in.close();\n            } catch (java.io.IOException e) {\n                // ignored\n            }\n        }\n        showLogName = getBooleanProperty(systemPrefix + \"showlogname\", showLogName);\n        showShortName = getBooleanProperty(systemPrefix + \"showShortLogname\", showShortName);\n        showDateTime = getBooleanProperty(systemPrefix + \"showdatetime\", showDateTime);\n        showLogName = getBooleanProperty(systemPrefix + \"showlogname\", showLogName);\n        if (showDateTime) {\n            dateFormatter = new SimpleDateFormat(getStringProperty(systemPrefix + \"dateformat\", \"yyyy/MM/dd HH:mm:ss:SSS zzz\"));\n        }\n    }\n\n    // ------------------------------------------------------------- Attributes\n    /**\n     * The name of this simple log instance\n     */\n    protected String logName = null;\n\n    /**\n     * The current log level\n     */\n    protected int currentLogLevel;\n\n    private String prefix = null;\n\n    // ------------------------------------------------------------ Constructor\n    /**\n     * Construct a simple log with given name.\n     *\n     * @param name log name\n     */\n    public SimpleLog(String name) {\n        logName = name;\n        // set initial log level\n        // Used to be: set default log level to ERROR\n        // IMHO it should be lower, but at least info ( costin ).\n        setLevel(SimpleLog.LOG_LEVEL_INFO);\n        // set log level from properties\n        String lvl = getStringProperty(systemPrefix + \"log.\" + logName);\n        int i = String.valueOf(name).lastIndexOf(\".\");\n        while (null == lvl && i > -1) {\n            name = name.substring(0, i);\n            lvl = getStringProperty(systemPrefix + \"log.\" + name);\n            i = String.valueOf(name).lastIndexOf(\".\");\n        }\n        if (null == lvl) {\n            lvl = getStringProperty(systemPrefix + \"defaultlog\");\n        }\n        if (\"all\".equalsIgnoreCase(lvl)) {\n            setLevel(SimpleLog.LOG_LEVEL_ALL);\n        } else if (\"trace\".equalsIgnoreCase(lvl)) {\n            setLevel(SimpleLog.LOG_LEVEL_TRACE);\n        } else if (\"debug\".equalsIgnoreCase(lvl)) {\n            setLevel(SimpleLog.LOG_LEVEL_DEBUG);\n        } else if (\"info\".equalsIgnoreCase(lvl)) {\n            setLevel(SimpleLog.LOG_LEVEL_INFO);\n        } else if (\"warn\".equalsIgnoreCase(lvl)) {\n            setLevel(SimpleLog.LOG_LEVEL_WARN);\n        } else if (\"error\".equalsIgnoreCase(lvl)) {\n            setLevel(SimpleLog.LOG_LEVEL_ERROR);\n        } else if (\"fatal\".equalsIgnoreCase(lvl)) {\n            setLevel(SimpleLog.LOG_LEVEL_FATAL);\n        } else if (\"off\".equalsIgnoreCase(lvl)) {\n            setLevel(SimpleLog.LOG_LEVEL_OFF);\n        }\n    }\n\n    // -------------------------------------------------------- Properties\n    /**\n     * <p> Set logging level. </p>\n     *\n     * @param currentLogLevel new logging level\n     */\n    public void setLevel(int currentLogLevel) {\n        this.currentLogLevel = currentLogLevel;\n    }\n\n    /**\n     * <p> Get logging level. </p>\n     */\n    public int getLevel() {\n        return currentLogLevel;\n    }\n\n    // -------------------------------------------------------- Logging Methods\n    /**\n     * <p> Do the actual logging.\n     * This method assembles the message\n     * and then prints to <code>System.err</code>.</p>\n     */\n    protected void log(int type, Object message, Throwable t) {\n        // use a string buffer for better performance\n        StringBuffer buf = new StringBuffer();\n        // append date-time if so configured\n        if (showDateTime) {\n            buf.append(dateFormatter.format(new Date()));\n            buf.append(\" \");\n        }\n        // append a readable representation of the log leve\n        switch(type) {\n            case SimpleLog.LOG_LEVEL_TRACE:\n                buf.append(\"[TRACE] \");\n                break;\n            case SimpleLog.LOG_LEVEL_DEBUG:\n                buf.append(\"[DEBUG] \");\n                break;\n            case SimpleLog.LOG_LEVEL_INFO:\n                buf.append(\"[INFO] \");\n                break;\n            case SimpleLog.LOG_LEVEL_WARN:\n                buf.append(\"[WARN] \");\n                break;\n            case SimpleLog.LOG_LEVEL_ERROR:\n                buf.append(\"[ERROR] \");\n                break;\n            case SimpleLog.LOG_LEVEL_FATAL:\n                buf.append(\"[FATAL] \");\n                break;\n        }\n        // append the name of the log instance if so configured\n        if (showShortName) {\n            if (prefix == null) {\n                // cut all but the last component of the name for both styles\n                prefix = logName.substring(logName.lastIndexOf(\".\") + 1) + \" - \";\n                prefix = prefix.substring(prefix.lastIndexOf(\"/\") + 1) + \"-\";\n            }\n            buf.append(prefix);\n        } else if (showLogName) {\n            buf.append(String.valueOf(logName)).append(\" - \");\n        }\n        // append the message\n        buf.append(String.valueOf(message));\n        // append stack trace if not null\n        if (t != null) {\n            buf.append(\" <\");\n            buf.append(t.toString());\n            buf.append(\">\");\n            java.io.StringWriter sw = new java.io.StringWriter(1024);\n            java.io.PrintWriter pw = new java.io.PrintWriter(sw);\n            t.printStackTrace(pw);\n            pw.close();\n            buf.append(sw.toString());\n        }\n        // print to System.err\n        doWrite(buf);\n    }\n\n    protected void doWrite(StringBuffer buf) {\n        System.err.println(buf.toString());\n    }\n\n    /**\n     * Is the given log level currently enabled?\n     *\n     * @param logLevel is this level enabled?\n     */\n    protected boolean isLevelEnabled(int logLevel) {\n        // log level are numerically ordered so can use simple numeric\n        // comparison\n        return (logLevel >= currentLogLevel);\n    }\n\n    // -------------------------------------------------------- Log Implementation\n    /**\n     * <p> Log a message with debug log level.</p>\n     */\n    public void debug(Object message) {\n        if (isLevelEnabled(SimpleLog.LOG_LEVEL_DEBUG)) {\n            log(SimpleLog.LOG_LEVEL_DEBUG, message, null);\n        }\n    }\n\n    /**\n     * <p> Log an error with debug log level.</p>\n     */\n    public void debug(Object message, Throwable t) {\n        if (isLevelEnabled(SimpleLog.LOG_LEVEL_DEBUG)) {\n            log(SimpleLog.LOG_LEVEL_DEBUG, message, t);\n        }\n    }\n\n    /**\n     * <p> Log a message with debug log level.</p>\n     */\n    public void trace(Object message) {\n        if (isLevelEnabled(SimpleLog.LOG_LEVEL_TRACE)) {\n            log(SimpleLog.LOG_LEVEL_TRACE, message, null);\n        }\n    }\n\n    /**\n     * <p> Log an error with debug log level.</p>\n     */\n    public void trace(Object message, Throwable t) {\n        if (isLevelEnabled(SimpleLog.LOG_LEVEL_TRACE)) {\n            log(SimpleLog.LOG_LEVEL_TRACE, message, t);\n        }\n    }\n\n    /**\n     * <p> Log a message with info log level.</p>\n     */\n    public void info(Object message) {\n        if (isLevelEnabled(SimpleLog.LOG_LEVEL_INFO)) {\n            log(SimpleLog.LOG_LEVEL_INFO, message, null);\n        }\n    }\n\n    /**\n     * <p> Log an error with info log level.</p>\n     */\n    public void info(Object message, Throwable t) {\n        if (isLevelEnabled(SimpleLog.LOG_LEVEL_INFO)) {\n            log(SimpleLog.LOG_LEVEL_INFO, message, t);\n        }\n    }\n\n    /**\n     * <p> Log a message with warn log level.</p>\n     */\n    public void warn(Object message) {\n        if (isLevelEnabled(SimpleLog.LOG_LEVEL_WARN)) {\n            log(SimpleLog.LOG_LEVEL_WARN, message, null);\n        }\n    }\n\n    /**\n     * <p> Log an error with warn log level.</p>\n     */\n    public void warn(Object message, Throwable t) {\n        if (isLevelEnabled(SimpleLog.LOG_LEVEL_WARN)) {\n            log(SimpleLog.LOG_LEVEL_WARN, message, t);\n        }\n    }\n\n    /**\n     * <p> Log a message with error log level.</p>\n     */\n    public void error(Object message) {\n        if (isLevelEnabled(SimpleLog.LOG_LEVEL_ERROR)) {\n            log(SimpleLog.LOG_LEVEL_ERROR, message, null);\n        }\n    }\n\n    /**\n     * <p> Log an error with error log level.</p>\n     */\n    public void error(Object message, Throwable t) {\n        if (isLevelEnabled(SimpleLog.LOG_LEVEL_ERROR)) {\n            log(SimpleLog.LOG_LEVEL_ERROR, message, t);\n        }\n    }\n\n    /**\n     * <p> Log a message with fatal log level.</p>\n     */\n    public void fatal(Object message) {\n        if (isLevelEnabled(SimpleLog.LOG_LEVEL_FATAL)) {\n            log(SimpleLog.LOG_LEVEL_FATAL, message, null);\n        }\n    }\n\n    /**\n     * <p> Log an error with fatal log level.</p>\n     */\n    public void fatal(Object message, Throwable t) {\n        if (isLevelEnabled(SimpleLog.LOG_LEVEL_FATAL)) {\n            log(SimpleLog.LOG_LEVEL_FATAL, message, t);\n        }\n    }\n\n    /**\n     * <p> Are debug messages currently enabled? </p>\n     *\n     * <p> This allows expensive operations such as <code>String</code>\n     * concatenation to be avoided when the message will be ignored by the\n     * logger. </p>\n     */\n    public final boolean isDebugEnabled() {\n        return isLevelEnabled(SimpleLog.LOG_LEVEL_DEBUG);\n    }\n\n    /**\n     * <p> Are error messages currently enabled? </p>\n     *\n     * <p> This allows expensive operations such as <code>String</code>\n     * concatenation to be avoided when the message will be ignored by the\n     * logger. </p>\n     */\n    public final boolean isErrorEnabled() {\n        return isLevelEnabled(SimpleLog.LOG_LEVEL_ERROR);\n    }\n\n    /**\n     * <p> Are fatal messages currently enabled? </p>\n     *\n     * <p> This allows expensive operations such as <code>String</code>\n     * concatenation to be avoided when the message will be ignored by the\n     * logger. </p>\n     */\n    public final boolean isFatalEnabled() {\n        return isLevelEnabled(SimpleLog.LOG_LEVEL_FATAL);\n    }\n\n    /**\n     * <p> Are info messages currently enabled? </p>\n     *\n     * <p> This allows expensive operations such as <code>String</code>\n     * concatenation to be avoided when the message will be ignored by the\n     * logger. </p>\n     */\n    public final boolean isInfoEnabled() {\n        return isLevelEnabled(SimpleLog.LOG_LEVEL_INFO);\n    }\n\n    /**\n     * <p> Are trace messages currently enabled? </p>\n     *\n     * <p> This allows expensive operations such as <code>String</code>\n     * concatenation to be avoided when the message will be ignored by the\n     * logger. </p>\n     */\n    public final boolean isTraceEnabled() {\n        return isLevelEnabled(SimpleLog.LOG_LEVEL_TRACE);\n    }\n\n    /**\n     * <p> Are warn messages currently enabled? </p>\n     *\n     * <p> This allows expensive operations such as <code>String</code>\n     * concatenation to be avoided when the message will be ignored by the\n     * logger. </p>\n     */\n    public final boolean isWarnEnabled() {\n        return isLevelEnabled(SimpleLog.LOG_LEVEL_WARN);\n    }\n\n    /**\n     * Return the thread context class loader if available.\n     * Otherwise return null.\n     *\n     * The thread context class loader is available for JDK 1.2\n     * or later, if certain security conditions are met.\n     *\n     * @exception LogConfigurationException if a suitable class loader\n     * cannot be identified.\n     */\n    private static ClassLoader getContextClassLoader() {\n        ClassLoader classLoader = null;\n        if (classLoader == null) {\n            try {\n                // Are we running on a JDK 1.2 or later system?\n                Method method = Thread.class.getMethod(\"getContextClassLoader\", null);\n                // Get the thread context class loader (if there is one)\n                try {\n                    classLoader = (ClassLoader) method.invoke(Thread.currentThread(), null);\n                } catch (IllegalAccessException e) {\n                    // ignore\n                    ;\n                } catch (InvocationTargetException e) {\n                    /**\n                     * InvocationTargetException is thrown by 'invoke' when\n                     * the method being invoked (getContextClassLoader) throws\n                     * an exception.\n                     *\n                     * getContextClassLoader() throws SecurityException when\n                     * the context class loader isn't an ancestor of the\n                     * calling class's class loader, or if security\n                     * permissions are restricted.\n                     *\n                     * In the first case (not related), we want to ignore and\n                     * keep going.  We cannot help but also ignore the second\n                     * with the logic below, but other calls elsewhere (to\n                     * obtain a class loader) will trigger this exception where\n                     * we can make a distinction.\n                     */\n                    if (e.getTargetException() instanceof SecurityException) {\n                        // ignore\n                        ;\n                    } else {\n                        // Capture 'e.getTargetException()' exception for details\n                        // alternate: log 'e.getTargetException()', and pass back 'e'.\n                        throw new LogConfigurationException(\"Unexpected InvocationTargetException\", e.getTargetException());\n                    }\n                }\n            } catch (NoSuchMethodException e) {\n                // Assume we are running on JDK 1.1\n                // ignore\n                ;\n            }\n        }\n        if (classLoader == null) {\n            classLoader = SimpleLog.class.getClassLoader();\n        }\n        // Return the selected class loader\n        return classLoader;\n    }\n\n    private static InputStream getResourceAsStream(final String name) {\n        return (InputStream) AccessController.doPrivileged(new PrivilegedAction() {\n\n            public Object run() {\n                ClassLoader threadCL = getContextClassLoader();\n                if (threadCL != null) {\n                    return threadCL.getResourceAsStream(name);\n                } else {\n                    return ClassLoader.getSystemResourceAsStream(name);\n                }\n            }\n        });\n    }\n}\n",
		"id": "/EvoSuiteBenchmark/35_corina/src/main/java/corina/util/SimpleLog_4Test.java",
		"test_prompt": "// SimpleLog_4Test.java\npackage corina.util;\n\nimport java.io.InputStream;\nimport java.io.Serializable;\nimport java.lang.reflect.InvocationTargetException;\nimport java.lang.reflect.Method;\nimport java.security.AccessController;\nimport java.security.PrivilegedAction;\nimport java.text.DateFormat;\nimport java.text.SimpleDateFormat;\nimport java.util.Date;\nimport java.util.Properties;\nimport org.apache.commons.logging.Log;\nimport org.apache.commons.logging.LogConfigurationException;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link SimpleLog}.\n* It contains ten unit test cases for the {@link SimpleLog#isTraceEnabled()} method.\n*/\nclass SimpleLog_4Test {"
	},
	{
		"original_code": "// SimpleLog.java\n/*\n * $Header: /cvsroot/corina/corina/Source/corina/util/SimpleLog.java,v 1.2 2004/09/29 14:14:07 aaron Exp $\n * $Revision: 1.2 $\n * $Date: 2004/09/29 14:14:07 $\n *\n * ====================================================================\n * \n * The Apache Software License, Version 1.1\n *\n * Copyright (c) 2001-2003 The Apache Software Foundation.  All rights\n * reserved.\n *\n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions\n * are met:\n *\n * 1. Redistributions of source code must retain the above copyright\n *    notice, this list of conditions and the following disclaimer. \n *\n * 2. Redistributions in binary form must reproduce the above copyright\n *    notice, this list of conditions and the following disclaimer in\n *    the documentation and/or other materials provided with the\n *    distribution.\n *\n * 3. The end-user documentation included with the redistribution,\n *    if any, must include the following acknowledgement:  \n *       \"This product includes software developed by the \n *        Apache Software Foundation (http://www.apache.org/).\"\n *    Alternately, this acknowledgement may appear in the software itself,\n *    if and wherever such third-party acknowledgements normally appear.\n *\n * 4. The names \"Apache\", \"The Jakarta Project\", \"Commons\", and \"Apache Software\n *    Foundation\" must not be used to endorse or promote products derived\n *    from this software without prior written permission. For written \n *    permission, please contact apache@apache.org.\n *\n * 5. Products derived from this software may not be called \"Apache\",\n *    \"Apache\" nor may \"Apache\" appear in their names without prior \n *    written permission of the Apache Software Foundation.\n *\n * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n * SUCH DAMAGE.\n * ====================================================================\n *\n * This software consists of voluntary contributions made by many\n * individuals on behalf of the Apache Software Foundation.  For more\n * information on the Apache Software Foundation, please see\n * <http://www.apache.org/>.\n *\n */\npackage corina.util;\n\nimport java.io.InputStream;\nimport java.io.Serializable;\nimport java.lang.reflect.InvocationTargetException;\nimport java.lang.reflect.Method;\nimport java.security.AccessController;\nimport java.security.PrivilegedAction;\nimport java.text.DateFormat;\nimport java.text.SimpleDateFormat;\nimport java.util.Date;\nimport java.util.Properties;\nimport org.apache.commons.logging.Log;\nimport org.apache.commons.logging.LogConfigurationException;\n\n/**\n * <p>Simple implementation of Log that sends all enabled log messages,\n * for all defined loggers, to System.err.  The following system properties\n * are supported to configure the behavior of this logger:</p>\n * <ul>\n * <li><code>org.apache.commons.logging.simplelog.defaultlog</code> -\n *     Default logging detail level for all instances of SimpleLog.\n *     Must be one of (\"trace\", \"debug\", \"info\", \"warn\", \"error\", or \"fatal\").\n *     If not specified, defaults to \"info\". </li>\n * <li><code>org.apache.commons.logging.simplelog.log.xxxxx</code> -\n *     Logging detail level for a SimpleLog instance named \"xxxxx\".\n *     Must be one of (\"trace\", \"debug\", \"info\", \"warn\", \"error\", or \"fatal\").\n *     If not specified, the default logging detail level is used.</li>\n * <li><code>org.apache.commons.logging.simplelog.showlogname</code> -\n *     Set to <code>true</code> if you want the Log instance name to be\n *     included in output messages. Defaults to <code>false</code>.</li>\n * <li><code>org.apache.commons.logging.simplelog.showShortLogname</code> -\n *     Set to <code>true</code> if you want the last componet of the name to be\n *     included in output messages. Defaults to <code>true</code>.</li>\n * <li><code>org.apache.commons.logging.simplelog.showdatetime</code> -\n *     Set to <code>true</code> if you want the current date and time\n *     to be included in output messages. Default is false.</li>\n * </ul>\n *\n * <p>In addition to looking for system properties with the names specified\n * above, this implementation also checks for a class loader resource named\n * <code>\"simplelog.properties\"</code>, and includes any matching definitions\n * from this resource (if it exists).</p>\n *\n * @author <a href=\"mailto:sanders@apache.org\">Scott Sanders</a>\n * @author Rod Waldhoff\n * @author Robert Burrell Donkin\n *\n * @version $Id: SimpleLog.java,v 1.2 2004/09/29 14:14:07 aaron Exp $\n *\n * @deprecated Jakarta Commons Logging v1.0.4 introduced the write() delegate method I needed\n * so I don't have to rely on this slightly modified class anymore! - aaron\n */\npublic class SimpleLog implements Log, Serializable {\n\n    // ------------------------------------------------------- Class Attributes\n    /**\n     * All system properties used by <code>Simple</code> start with this\n     */\n    static protected final String systemPrefix = \"org.apache.commons.logging.simplelog.\";\n\n    /**\n     * Properties loaded from simplelog.properties\n     */\n    static protected final Properties simpleLogProps = new Properties();\n\n    /**\n     * Include the instance name in the log message?\n     */\n    static protected boolean showLogName = false;\n\n    /**\n     * Include the short name ( last component ) of the logger in the log\n     *        message. Default to true - otherwise we'll be lost in a flood of\n     *        messages without knowing who sends them.\n     */\n    static protected boolean showShortName = true;\n\n    /**\n     * Include the current time in the log message\n     */\n    static protected boolean showDateTime = false;\n\n    /**\n     * Used to format times\n     */\n    static protected DateFormat dateFormatter = null;\n\n    // ---------------------------------------------------- Log Level Constants\n    /**\n     * \"Trace\" level logging.\n     */\n    public static final int LOG_LEVEL_TRACE = 1;\n\n    /**\n     * \"Debug\" level logging.\n     */\n    public static final int LOG_LEVEL_DEBUG = 2;\n\n    /**\n     * \"Info\" level logging.\n     */\n    public static final int LOG_LEVEL_INFO = 3;\n\n    /**\n     * \"Warn\" level logging.\n     */\n    public static final int LOG_LEVEL_WARN = 4;\n\n    /**\n     * \"Error\" level logging.\n     */\n    public static final int LOG_LEVEL_ERROR = 5;\n\n    /**\n     * \"Fatal\" level logging.\n     */\n    public static final int LOG_LEVEL_FATAL = 6;\n\n    /**\n     * Enable all logging levels\n     */\n    public static final int LOG_LEVEL_ALL = (LOG_LEVEL_TRACE - 1);\n\n    /**\n     * Enable no logging levels\n     */\n    public static final int LOG_LEVEL_OFF = (LOG_LEVEL_FATAL + 1);\n\n    // ------------------------------------------------------------ Initializer\n    private static String getStringProperty(String name) {\n        String prop = null;\n        try {\n            prop = System.getProperty(name);\n        } catch (SecurityException e) {\n            // Ignore\n            ;\n        }\n        return (prop == null) ? simpleLogProps.getProperty(name) : prop;\n    }\n\n    private static String getStringProperty(String name, String dephault) {\n        String prop = getStringProperty(name);\n        return (prop == null) ? dephault : prop;\n    }\n\n    private static boolean getBooleanProperty(String name, boolean dephault) {\n        String prop = getStringProperty(name);\n        return (prop == null) ? dephault : \"true\".equalsIgnoreCase(prop);\n    }\n\n    // initialize class attributes\n    // load properties file, if found.\n    // override with system properties.\n    static {\n        // add props from the resource simplelog.properties\n        InputStream in = getResourceAsStream(\"simplelog.properties\");\n        if (null != in) {\n            try {\n                simpleLogProps.load(in);\n                in.close();\n            } catch (java.io.IOException e) {\n                // ignored\n            }\n        }\n        showLogName = getBooleanProperty(systemPrefix + \"showlogname\", showLogName);\n        showShortName = getBooleanProperty(systemPrefix + \"showShortLogname\", showShortName);\n        showDateTime = getBooleanProperty(systemPrefix + \"showdatetime\", showDateTime);\n        showLogName = getBooleanProperty(systemPrefix + \"showlogname\", showLogName);\n        if (showDateTime) {\n            dateFormatter = new SimpleDateFormat(getStringProperty(systemPrefix + \"dateformat\", \"yyyy/MM/dd HH:mm:ss:SSS zzz\"));\n        }\n    }\n\n    // ------------------------------------------------------------- Attributes\n    /**\n     * The name of this simple log instance\n     */\n    protected String logName = null;\n\n    /**\n     * The current log level\n     */\n    protected int currentLogLevel;\n\n    private String prefix = null;\n\n    // ------------------------------------------------------------ Constructor\n    /**\n     * Construct a simple log with given name.\n     *\n     * @param name log name\n     */\n    public SimpleLog(String name) {\n        logName = name;\n        // set initial log level\n        // Used to be: set default log level to ERROR\n        // IMHO it should be lower, but at least info ( costin ).\n        setLevel(SimpleLog.LOG_LEVEL_INFO);\n        // set log level from properties\n        String lvl = getStringProperty(systemPrefix + \"log.\" + logName);\n        int i = String.valueOf(name).lastIndexOf(\".\");\n        while (null == lvl && i > -1) {\n            name = name.substring(0, i);\n            lvl = getStringProperty(systemPrefix + \"log.\" + name);\n            i = String.valueOf(name).lastIndexOf(\".\");\n        }\n        if (null == lvl) {\n            lvl = getStringProperty(systemPrefix + \"defaultlog\");\n        }\n        if (\"all\".equalsIgnoreCase(lvl)) {\n            setLevel(SimpleLog.LOG_LEVEL_ALL);\n        } else if (\"trace\".equalsIgnoreCase(lvl)) {\n            setLevel(SimpleLog.LOG_LEVEL_TRACE);\n        } else if (\"debug\".equalsIgnoreCase(lvl)) {\n            setLevel(SimpleLog.LOG_LEVEL_DEBUG);\n        } else if (\"info\".equalsIgnoreCase(lvl)) {\n            setLevel(SimpleLog.LOG_LEVEL_INFO);\n        } else if (\"warn\".equalsIgnoreCase(lvl)) {\n            setLevel(SimpleLog.LOG_LEVEL_WARN);\n        } else if (\"error\".equalsIgnoreCase(lvl)) {\n            setLevel(SimpleLog.LOG_LEVEL_ERROR);\n        } else if (\"fatal\".equalsIgnoreCase(lvl)) {\n            setLevel(SimpleLog.LOG_LEVEL_FATAL);\n        } else if (\"off\".equalsIgnoreCase(lvl)) {\n            setLevel(SimpleLog.LOG_LEVEL_OFF);\n        }\n    }\n\n    // -------------------------------------------------------- Properties\n    /**\n     * <p> Set logging level. </p>\n     *\n     * @param currentLogLevel new logging level\n     */\n    public void setLevel(int currentLogLevel) {\n        this.currentLogLevel = currentLogLevel;\n    }\n\n    /**\n     * <p> Get logging level. </p>\n     */\n    public int getLevel() {\n        return currentLogLevel;\n    }\n\n    // -------------------------------------------------------- Logging Methods\n    /**\n     * <p> Do the actual logging.\n     * This method assembles the message\n     * and then prints to <code>System.err</code>.</p>\n     */\n    protected void log(int type, Object message, Throwable t) {\n        // use a string buffer for better performance\n        StringBuffer buf = new StringBuffer();\n        // append date-time if so configured\n        if (showDateTime) {\n            buf.append(dateFormatter.format(new Date()));\n            buf.append(\" \");\n        }\n        // append a readable representation of the log leve\n        switch(type) {\n            case SimpleLog.LOG_LEVEL_TRACE:\n                buf.append(\"[TRACE] \");\n                break;\n            case SimpleLog.LOG_LEVEL_DEBUG:\n                buf.append(\"[DEBUG] \");\n                break;\n            case SimpleLog.LOG_LEVEL_INFO:\n                buf.append(\"[INFO] \");\n                break;\n            case SimpleLog.LOG_LEVEL_WARN:\n                buf.append(\"[WARN] \");\n                break;\n            case SimpleLog.LOG_LEVEL_ERROR:\n                buf.append(\"[ERROR] \");\n                break;\n            case SimpleLog.LOG_LEVEL_FATAL:\n                buf.append(\"[FATAL] \");\n                break;\n        }\n        // append the name of the log instance if so configured\n        if (showShortName) {\n            if (prefix == null) {\n                // cut all but the last component of the name for both styles\n                prefix = logName.substring(logName.lastIndexOf(\".\") + 1) + \" - \";\n                prefix = prefix.substring(prefix.lastIndexOf(\"/\") + 1) + \"-\";\n            }\n            buf.append(prefix);\n        } else if (showLogName) {\n            buf.append(String.valueOf(logName)).append(\" - \");\n        }\n        // append the message\n        buf.append(String.valueOf(message));\n        // append stack trace if not null\n        if (t != null) {\n            buf.append(\" <\");\n            buf.append(t.toString());\n            buf.append(\">\");\n            java.io.StringWriter sw = new java.io.StringWriter(1024);\n            java.io.PrintWriter pw = new java.io.PrintWriter(sw);\n            t.printStackTrace(pw);\n            pw.close();\n            buf.append(sw.toString());\n        }\n        // print to System.err\n        doWrite(buf);\n    }\n\n    protected void doWrite(StringBuffer buf) {\n        System.err.println(buf.toString());\n    }\n\n    /**\n     * Is the given log level currently enabled?\n     *\n     * @param logLevel is this level enabled?\n     */\n    protected boolean isLevelEnabled(int logLevel) {\n        // log level are numerically ordered so can use simple numeric\n        // comparison\n        return (logLevel >= currentLogLevel);\n    }\n\n    // -------------------------------------------------------- Log Implementation\n    /**\n     * <p> Log a message with debug log level.</p>\n     */\n    public void debug(Object message) {\n        if (isLevelEnabled(SimpleLog.LOG_LEVEL_DEBUG)) {\n            log(SimpleLog.LOG_LEVEL_DEBUG, message, null);\n        }\n    }\n\n    /**\n     * <p> Log an error with debug log level.</p>\n     */\n    public void debug(Object message, Throwable t) {\n        if (isLevelEnabled(SimpleLog.LOG_LEVEL_DEBUG)) {\n            log(SimpleLog.LOG_LEVEL_DEBUG, message, t);\n        }\n    }\n\n    /**\n     * <p> Log a message with debug log level.</p>\n     */\n    public void trace(Object message) {\n        if (isLevelEnabled(SimpleLog.LOG_LEVEL_TRACE)) {\n            log(SimpleLog.LOG_LEVEL_TRACE, message, null);\n        }\n    }\n\n    /**\n     * <p> Log an error with debug log level.</p>\n     */\n    public void trace(Object message, Throwable t) {\n        if (isLevelEnabled(SimpleLog.LOG_LEVEL_TRACE)) {\n            log(SimpleLog.LOG_LEVEL_TRACE, message, t);\n        }\n    }\n\n    /**\n     * <p> Log a message with info log level.</p>\n     */\n    public void info(Object message) {\n        if (isLevelEnabled(SimpleLog.LOG_LEVEL_INFO)) {\n            log(SimpleLog.LOG_LEVEL_INFO, message, null);\n        }\n    }\n\n    /**\n     * <p> Log an error with info log level.</p>\n     */\n    public void info(Object message, Throwable t) {\n        if (isLevelEnabled(SimpleLog.LOG_LEVEL_INFO)) {\n            log(SimpleLog.LOG_LEVEL_INFO, message, t);\n        }\n    }\n\n    /**\n     * <p> Log a message with warn log level.</p>\n     */\n    public void warn(Object message) {\n        if (isLevelEnabled(SimpleLog.LOG_LEVEL_WARN)) {\n            log(SimpleLog.LOG_LEVEL_WARN, message, null);\n        }\n    }\n\n    /**\n     * <p> Log an error with warn log level.</p>\n     */\n    public void warn(Object message, Throwable t) {\n        if (isLevelEnabled(SimpleLog.LOG_LEVEL_WARN)) {\n            log(SimpleLog.LOG_LEVEL_WARN, message, t);\n        }\n    }\n\n    /**\n     * <p> Log a message with error log level.</p>\n     */\n    public void error(Object message) {\n        if (isLevelEnabled(SimpleLog.LOG_LEVEL_ERROR)) {\n            log(SimpleLog.LOG_LEVEL_ERROR, message, null);\n        }\n    }\n\n    /**\n     * <p> Log an error with error log level.</p>\n     */\n    public void error(Object message, Throwable t) {\n        if (isLevelEnabled(SimpleLog.LOG_LEVEL_ERROR)) {\n            log(SimpleLog.LOG_LEVEL_ERROR, message, t);\n        }\n    }\n\n    /**\n     * <p> Log a message with fatal log level.</p>\n     */\n    public void fatal(Object message) {\n        if (isLevelEnabled(SimpleLog.LOG_LEVEL_FATAL)) {\n            log(SimpleLog.LOG_LEVEL_FATAL, message, null);\n        }\n    }\n\n    /**\n     * <p> Log an error with fatal log level.</p>\n     */\n    public void fatal(Object message, Throwable t) {\n        if (isLevelEnabled(SimpleLog.LOG_LEVEL_FATAL)) {\n            log(SimpleLog.LOG_LEVEL_FATAL, message, t);\n        }\n    }\n\n    /**\n     * <p> Are debug messages currently enabled? </p>\n     *\n     * <p> This allows expensive operations such as <code>String</code>\n     * concatenation to be avoided when the message will be ignored by the\n     * logger. </p>\n     */\n    public final boolean isDebugEnabled() {\n        return isLevelEnabled(SimpleLog.LOG_LEVEL_DEBUG);\n    }\n\n    /**\n     * <p> Are error messages currently enabled? </p>\n     *\n     * <p> This allows expensive operations such as <code>String</code>\n     * concatenation to be avoided when the message will be ignored by the\n     * logger. </p>\n     */\n    public final boolean isErrorEnabled() {\n        return isLevelEnabled(SimpleLog.LOG_LEVEL_ERROR);\n    }\n\n    /**\n     * <p> Are fatal messages currently enabled? </p>\n     *\n     * <p> This allows expensive operations such as <code>String</code>\n     * concatenation to be avoided when the message will be ignored by the\n     * logger. </p>\n     */\n    public final boolean isFatalEnabled() {\n        return isLevelEnabled(SimpleLog.LOG_LEVEL_FATAL);\n    }\n\n    /**\n     * <p> Are info messages currently enabled? </p>\n     *\n     * <p> This allows expensive operations such as <code>String</code>\n     * concatenation to be avoided when the message will be ignored by the\n     * logger. </p>\n     */\n    public final boolean isInfoEnabled() {\n        return isLevelEnabled(SimpleLog.LOG_LEVEL_INFO);\n    }\n\n    /**\n     * <p> Are trace messages currently enabled? </p>\n     *\n     * <p> This allows expensive operations such as <code>String</code>\n     * concatenation to be avoided when the message will be ignored by the\n     * logger. </p>\n     */\n    public final boolean isTraceEnabled() {\n        return isLevelEnabled(SimpleLog.LOG_LEVEL_TRACE);\n    }\n\n    /**\n     * <p> Are warn messages currently enabled? </p>\n     *\n     * <p> This allows expensive operations such as <code>String</code>\n     * concatenation to be avoided when the message will be ignored by the\n     * logger. </p>\n     */\n    public final boolean isWarnEnabled() {\n        return isLevelEnabled(SimpleLog.LOG_LEVEL_WARN);\n    }\n\n    /**\n     * Return the thread context class loader if available.\n     * Otherwise return null.\n     *\n     * The thread context class loader is available for JDK 1.2\n     * or later, if certain security conditions are met.\n     *\n     * @exception LogConfigurationException if a suitable class loader\n     * cannot be identified.\n     */\n    private static ClassLoader getContextClassLoader() {\n        ClassLoader classLoader = null;\n        if (classLoader == null) {\n            try {\n                // Are we running on a JDK 1.2 or later system?\n                Method method = Thread.class.getMethod(\"getContextClassLoader\", null);\n                // Get the thread context class loader (if there is one)\n                try {\n                    classLoader = (ClassLoader) method.invoke(Thread.currentThread(), null);\n                } catch (IllegalAccessException e) {\n                    // ignore\n                    ;\n                } catch (InvocationTargetException e) {\n                    /**\n                     * InvocationTargetException is thrown by 'invoke' when\n                     * the method being invoked (getContextClassLoader) throws\n                     * an exception.\n                     *\n                     * getContextClassLoader() throws SecurityException when\n                     * the context class loader isn't an ancestor of the\n                     * calling class's class loader, or if security\n                     * permissions are restricted.\n                     *\n                     * In the first case (not related), we want to ignore and\n                     * keep going.  We cannot help but also ignore the second\n                     * with the logic below, but other calls elsewhere (to\n                     * obtain a class loader) will trigger this exception where\n                     * we can make a distinction.\n                     */\n                    if (e.getTargetException() instanceof SecurityException) {\n                        // ignore\n                        ;\n                    } else {\n                        // Capture 'e.getTargetException()' exception for details\n                        // alternate: log 'e.getTargetException()', and pass back 'e'.\n                        throw new LogConfigurationException(\"Unexpected InvocationTargetException\", e.getTargetException());\n                    }\n                }\n            } catch (NoSuchMethodException e) {\n                // Assume we are running on JDK 1.1\n                // ignore\n                ;\n            }\n        }\n        if (classLoader == null) {\n            classLoader = SimpleLog.class.getClassLoader();\n        }\n        // Return the selected class loader\n        return classLoader;\n    }\n\n    private static InputStream getResourceAsStream(final String name) {\n        return (InputStream) AccessController.doPrivileged(new PrivilegedAction() {\n\n            public Object run() {\n                ClassLoader threadCL = getContextClassLoader();\n                if (threadCL != null) {\n                    return threadCL.getResourceAsStream(name);\n                } else {\n                    return ClassLoader.getSystemResourceAsStream(name);\n                }\n            }\n        });\n    }\n}\n",
		"id": "/EvoSuiteBenchmark/35_corina/src/main/java/corina/util/SimpleLog_5Test.java",
		"test_prompt": "// SimpleLog_5Test.java\npackage corina.util;\n\nimport java.io.InputStream;\nimport java.io.Serializable;\nimport java.lang.reflect.InvocationTargetException;\nimport java.lang.reflect.Method;\nimport java.security.AccessController;\nimport java.security.PrivilegedAction;\nimport java.text.DateFormat;\nimport java.text.SimpleDateFormat;\nimport java.util.Date;\nimport java.util.Properties;\nimport org.apache.commons.logging.Log;\nimport org.apache.commons.logging.LogConfigurationException;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link SimpleLog}.\n* It contains ten unit test cases for the {@link SimpleLog#isWarnEnabled()} method.\n*/\nclass SimpleLog_5Test {"
	},
	{
		"original_code": "// StringComparator.java\n//\n// This file is part of Corina.\n//\n// Corina is free software; you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation; either version 2 of the License, or\n// (at your option) any later version.\n//\n// Corina is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Corina; if not, write to the Free Software\n// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n//\n// Copyright 2001 Ken Harris <kbh7@cornell.edu>\n//\npackage corina.util;\n\nimport java.util.Comparator;\nimport java.text.Collator;\n\n/**\n *   A smart string compare function.  Uses some voodoo to get around\n *   problems with sorting non-English letters without being\n *   locale-specific.\n *\n *   <p>This method solves problems with how Java does both String\n *   comparison, and Collator-based (locale-specific) string\n *   comparisons:</p>\n *\n *   <ul>\n *     <li>String comparison compares Unicode values, so letters like\n *     \"&Ccedil;\" get put after \"Z\", instead of between \"C\" and \"D\"\n *     where you would expect it.\n *\n *     <li>The Collator class is used to work around this, but it's\n *     locale-specific.  For example, if the locale is set to \"Turkish\",\n *     \"&Ccedil;\" will be sorted between \"C\" and \"D\".  Unfortunately,\n *     this is useless if you're trying to sort Turkish names while\n *     running your program in America, or, worse, trying to sort names\n *     of different languages, like English and Turkish.\n *   </ul>\n *\n *   <p>This sorting scheme ignores case, and sorts first by the letter\n *   <i>with all accents removed</i>, and then by Unicode value.  This\n *   puts \"&Ccedil;\" between \"C\" and \"D\", and also is\n *   locale-agnostic.</p>\n *\n *   @author Ken Harris &lt;kbh7 <i style=\"color: gray\">at</i> cornell <i style=\"color: gray\">dot</i> edu&gt;\n *   @version $Id: StringComparator.java,v 1.1 2004/01/18 18:12:05 aaron Exp $\n */\npublic class StringComparator implements Comparator {\n\n    /**\n     *        The compare method used by Comparator.  Simply calls\n     * <pre>\n     *    return compare((String) o1, (String) o2);\n     * </pre>\n     *\n     *        @param o1 the first string to compare\n     *        @param o2 the second string to compare\n     *        @return the result of their comparison\n     */\n    public int compare(Object o1, Object o2) {\n        return compare((String) o1, (String) o2);\n    }\n\n    /**\n     *       Compare two strings using voodoo.\n     *\n     *       @param s1 the first string\n     *       @param s2 the second string\n     *       @return -1, 0, or +1, if the first string is less than, equal\n     *       to, or greater than the second string\n     */\n    public static int compare(String s1, String s2) {\n        // PERF: extract this?\n        // this collator is a comparator that will ignore case, accents\n        Collator collator = Collator.getInstance();\n        collator.setStrength(Collator.PRIMARY);\n        // BETTER: wrap natural sort around this?\n        // ALSO: maybe CollatorKeys would yield better perf.  investigate.\n        // task: compare name1, s2\n        for (int i = 0; i < s1.length(); i++) {\n            // s2 shorter: return +1\n            if (s2.length() <= i)\n                return +1;\n            // compare chars s1[i], s2[i]:\n            // first, make them into strings: unfortunately,\n            // collator only compares strings, not chars,\n            // so make some 1-character strings.\n            String str1 = s1.substring(i, i + 1);\n            String str2 = s2.substring(i, i + 1);\n            // try comparing, ignoring case and accents.\n            // this will put \"J\" before \"K\", for instance,\n            // but \"C\" and \"c\" and \"C,\" will all sort the same.\n            int test = collator.compare(str1, str2);\n            if (test != 0)\n                return test;\n            // now compare again, ignoring case, but not accents.\n            // this will put \"C\" and \"c\" together, but separate\n            // out \"C,\", which will go after all C's.\n            test = str1.compareToIgnoreCase(str2);\n            if (test != 0)\n                return test;\n        }\n        // s2 longer\n        if (s2.length() > s1.length())\n            return -1;\n        // same\n        return 0;\n    }\n}\n",
		"id": "/EvoSuiteBenchmark/35_corina/src/main/java/corina/util/StringComparator_0Test.java",
		"test_prompt": "// StringComparator_0Test.java\n// This file is part of Corina.\n//\n// Corina is free software; you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation; either version 2 of the License, or\n// (at your option) any later version.\n//\n// Corina is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Corina; if not, write to the Free Software\n// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n//\n// Copyright 2001 Ken Harris <kbh7@cornell.edu>\n//\npackage corina.util;\n\nimport java.util.Comparator;\nimport java.text.Collator;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link StringComparator}.\n* It contains ten unit test cases for the {@link StringComparator#compare(Object, Object)} method.\n*/\nclass StringComparator_0Test {"
	},
	{
		"original_code": "// StringComparator.java\n//\n// This file is part of Corina.\n//\n// Corina is free software; you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation; either version 2 of the License, or\n// (at your option) any later version.\n//\n// Corina is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Corina; if not, write to the Free Software\n// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n//\n// Copyright 2001 Ken Harris <kbh7@cornell.edu>\n//\npackage corina.util;\n\nimport java.util.Comparator;\nimport java.text.Collator;\n\n/**\n *   A smart string compare function.  Uses some voodoo to get around\n *   problems with sorting non-English letters without being\n *   locale-specific.\n *\n *   <p>This method solves problems with how Java does both String\n *   comparison, and Collator-based (locale-specific) string\n *   comparisons:</p>\n *\n *   <ul>\n *     <li>String comparison compares Unicode values, so letters like\n *     \"&Ccedil;\" get put after \"Z\", instead of between \"C\" and \"D\"\n *     where you would expect it.\n *\n *     <li>The Collator class is used to work around this, but it's\n *     locale-specific.  For example, if the locale is set to \"Turkish\",\n *     \"&Ccedil;\" will be sorted between \"C\" and \"D\".  Unfortunately,\n *     this is useless if you're trying to sort Turkish names while\n *     running your program in America, or, worse, trying to sort names\n *     of different languages, like English and Turkish.\n *   </ul>\n *\n *   <p>This sorting scheme ignores case, and sorts first by the letter\n *   <i>with all accents removed</i>, and then by Unicode value.  This\n *   puts \"&Ccedil;\" between \"C\" and \"D\", and also is\n *   locale-agnostic.</p>\n *\n *   @author Ken Harris &lt;kbh7 <i style=\"color: gray\">at</i> cornell <i style=\"color: gray\">dot</i> edu&gt;\n *   @version $Id: StringComparator.java,v 1.1 2004/01/18 18:12:05 aaron Exp $\n */\npublic class StringComparator implements Comparator {\n\n    /**\n     *        The compare method used by Comparator.  Simply calls\n     * <pre>\n     *    return compare((String) o1, (String) o2);\n     * </pre>\n     *\n     *        @param o1 the first string to compare\n     *        @param o2 the second string to compare\n     *        @return the result of their comparison\n     */\n    public int compare(Object o1, Object o2) {\n        return compare((String) o1, (String) o2);\n    }\n\n    /**\n     *       Compare two strings using voodoo.\n     *\n     *       @param s1 the first string\n     *       @param s2 the second string\n     *       @return -1, 0, or +1, if the first string is less than, equal\n     *       to, or greater than the second string\n     */\n    public static int compare(String s1, String s2) {\n        // PERF: extract this?\n        // this collator is a comparator that will ignore case, accents\n        Collator collator = Collator.getInstance();\n        collator.setStrength(Collator.PRIMARY);\n        // BETTER: wrap natural sort around this?\n        // ALSO: maybe CollatorKeys would yield better perf.  investigate.\n        // task: compare name1, s2\n        for (int i = 0; i < s1.length(); i++) {\n            // s2 shorter: return +1\n            if (s2.length() <= i)\n                return +1;\n            // compare chars s1[i], s2[i]:\n            // first, make them into strings: unfortunately,\n            // collator only compares strings, not chars,\n            // so make some 1-character strings.\n            String str1 = s1.substring(i, i + 1);\n            String str2 = s2.substring(i, i + 1);\n            // try comparing, ignoring case and accents.\n            // this will put \"J\" before \"K\", for instance,\n            // but \"C\" and \"c\" and \"C,\" will all sort the same.\n            int test = collator.compare(str1, str2);\n            if (test != 0)\n                return test;\n            // now compare again, ignoring case, but not accents.\n            // this will put \"C\" and \"c\" together, but separate\n            // out \"C,\", which will go after all C's.\n            test = str1.compareToIgnoreCase(str2);\n            if (test != 0)\n                return test;\n        }\n        // s2 longer\n        if (s2.length() > s1.length())\n            return -1;\n        // same\n        return 0;\n    }\n}\n",
		"id": "/EvoSuiteBenchmark/35_corina/src/main/java/corina/util/StringComparator_1Test.java",
		"test_prompt": "// StringComparator_1Test.java\n// This file is part of Corina.\n//\n// Corina is free software; you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation; either version 2 of the License, or\n// (at your option) any later version.\n//\n// Corina is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Corina; if not, write to the Free Software\n// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n//\n// Copyright 2001 Ken Harris <kbh7@cornell.edu>\n//\npackage corina.util;\n\nimport java.util.Comparator;\nimport java.text.Collator;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link StringComparator}.\n* It contains ten unit test cases for the {@link StringComparator#compare(String, String)} method.\n*/\nclass StringComparator_1Test {"
	},
	{
		"original_code": "// UpdateFolder.java\npackage corina.util;\n\nimport java.util.List;\nimport java.io.File;\nimport java.io.InputStreamReader;\nimport java.io.FileInputStream;\nimport java.io.OutputStreamWriter;\nimport java.io.FileOutputStream;\nimport java.io.IOException;\n\npublic class UpdateFolder implements Runnable {\n\n    // update folder TO with folder FROM\n    private String from, to;\n\n    public UpdateFolder(File from, File to) {\n        this.from = from.getPath();\n        this.to = to.getPath();\n    }\n\n    // start time\n    private long startTime;\n\n    // its runnable\n    public void run() {\n        startTime = System.currentTimeMillis();\n        update(from, to);\n    }\n\n    // number of files updated\n    private int done = 0;\n\n    // current file\n    private String current;\n\n    public int getNumberDone() {\n        return done;\n    }\n\n    public String getCurrent() {\n        return current;\n    }\n\n    // stop (nicely)\n    public void stop() {\n        stop = true;\n    }\n\n    private boolean stop = false;\n\n    // oops, i shouldn't need to pass in count -- Count.java should be integrated, then.\n    // note: returns -1 to mean \"unknown\"\n    // aah: i should return a string then: \"unknown\", \"5 sec\", etc.\n    public int estimateTimeRemaining(int total) {\n        // nothing done yet, we have no idea\n        if (done == 0 || lastDone == -1)\n            return -1;\n        // what fraction of the way through am i?\n        float fracDone = done / (float) total;\n        // what fraction is left?\n        float fracLeft = 1 - fracDone;\n        // ok, how much time have i spent so far?\n        // was: currentTime - startTime\n        long timeSpent = lastDone - startTime;\n        // BETTER: weigh the more recent files more heavily than the first few\n        // multiply by fracLeft/fracDone, and convert to sec\n        int timeLeft = Math.round((fracLeft / fracDone) * timeSpent / 1000);\n        return timeLeft;\n    }\n\n    // the time when the last update finished, or -1=unknown\n    private long lastDone = -1;\n\n    // updates directory FROM with directory TO.\n    private void update(String from, String to) {\n        File fromDir = new File(from);\n        File toDir = new File(to);\n        File[] fromFileList = fromDir.listFiles();\n        if (fromFileList == null)\n            return;\n        // create \"to\" if it doesn't exist.  i think there's overlap here...\n        if (!toDir.exists())\n            toDir.mkdir();\n        for (int i = 0; i < fromFileList.length; i++) {\n            if (stop)\n                return;\n            File toFile = new File(to + File.separator + fromFileList[i].getName());\n            // stats\n            current = toFile.getPath();\n            // doesn't exist, or have old version, or is a different size\n            if (!toFile.exists() || (toFile.lastModified() < fromFileList[i].lastModified()) || (toFile.length() != fromFileList[i].length())) {\n                if (fromFileList[i].isDirectory()) {\n                    toFile.mkdir();\n                } else {\n                    try {\n                        copy(fromFileList[i], toFile);\n                    } catch (IOException ioe) {\n                        // FIXME: this is bad ... stuff in a vector or something ...\n                        System.out.println(\"exception\");\n                        System.out.println(\"   message=\" + ioe.getMessage());\n                        System.out.println(\"   string=\" + ioe.toString());\n                        System.out.println(\"   class=\" + ioe.getClass());\n                    }\n                }\n            }\n            // stats\n            done++;\n            lastDone = System.currentTimeMillis();\n            // if this is a directory, recurse into it\n            if (fromFileList[i].isDirectory()) {\n                update(fromFileList[i].getPath(), to + File.separator + fromFileList[i].getName());\n            }\n        }\n        // if any files exist in |to| that aren't in |from|, delete them.\n        // TODO: what if it's a folder?\n        File[] toFileList = toDir.listFiles();\n        for (int i = 0; i < toFileList.length; i++) {\n            File toFile = toFileList[i];\n            File fromFile = new File(from + File.separator + toFileList[i].getName());\n            if (!fromFile.exists()) {\n                boolean success = delete(toFile);\n                if (!success)\n                    System.out.println(\"ERROR!  can't delete \" + toFile);\n            }\n        }\n    }\n\n    // ----\n    // DELETE FILE\n    //\n    // try to delete a file, and (if it's a folder) all of its subfolders, too.\n    private static boolean delete(File f) {\n        if (f.isDirectory()) {\n            File[] children = f.listFiles();\n            for (int i = 0; i < children.length; i++) delete(children[i]);\n        }\n        return f.delete();\n    }\n\n    // ----\n    // COPY FILE\n    //\n    // what's a good buffer size?  i first used 1024, flanagan uses 4096\n    // IDEA: compute at runtime?\n    // 16K will cover most data files\n    public static final int BUFSIZE = 16386;\n\n    // static buffer -- good for performance, not good for multiple copy()s running at once.\n    private char[] cbuf = new char[BUFSIZE + 1];\n\n    // copies file FROM to file TO.  note: uses member field for buffer, so\n    // in any given instance of UpdateFolder, only one call at a time should call this.\n    // DESIGN: should i enforce this by setting a flag on enter/exit from function?\n    public void copy(File from, File to) throws IOException {\n        System.out.println(\"(note: copying file \" + from + \")\");\n        InputStreamReader r = null;\n        OutputStreamWriter w = null;\n        try {\n            r = new InputStreamReader(new FileInputStream(from));\n            w = new OutputStreamWriter(new FileOutputStream(to));\n            int n;\n            do {\n                n = r.read(cbuf, 0, BUFSIZE);\n                if (stop)\n                    return;\n                if (n > 0)\n                    w.write(cbuf, 0, n);\n            } while (n == BUFSIZE);\n        } finally {\n            if (r != null)\n                try {\n                    r.close();\n                } catch (IOException ioe) {\n                    ioe.printStackTrace();\n                }\n            if (w != null)\n                try {\n                    w.close();\n                } catch (IOException ioe) {\n                    ioe.printStackTrace();\n                }\n        }\n        // set the last-modified time\n        long mod = from.lastModified();\n        to.setLastModified(mod);\n    }\n}\n",
		"id": "/EvoSuiteBenchmark/35_corina/src/main/java/corina/util/UpdateFolder.java",
		"test_prompt": "// UpdateFolderTest.java\npackage corina.util;\n\nimport java.util.List;\nimport java.io.File;\nimport java.io.InputStreamReader;\nimport java.io.FileInputStream;\nimport java.io.OutputStreamWriter;\nimport java.io.FileOutputStream;\nimport java.io.IOException;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link UpdateFolder}.\n* It contains ten unit test cases for the {@link UpdateFolder#estimateTimeRemaining(int)} method.\n*/\nclass UpdateFolderTest {"
	},
	{
		"original_code": "// Finder.java\npackage corina.util;\n\nimport corina.ui.Builder;\nimport corina.gui.Layout;\nimport java.io.File;\nimport java.io.FileNotFoundException;\nimport java.util.List;\nimport java.util.ArrayList;\nimport javax.swing.*;\n\n/*\n  TODO:\n  -- dialog, asking user which to use -- almost done\n  LATER:\n  -- better searching algorithm -- string difference\n*/\n// search for a file:\n// -- same name, different case (if case matters on this system -- assume it doesn't)\n// -- same root, different extension\n// -- any of the above, in the parent folder\n// -- any of the above, in any subfolder of the parent folder\n// if all that fails, then i've done my best, and i don't know where the file is.\n// (perhaps i can search for small a small stringDifference - ?)\n// (or where the first ~90% is identical?  acm256aa might want to turn up any acm256*)\n// (-- but acm256ac will match acm256aa with the stringDifference method)\n// as ??? said, \"the computer should never report that it can't find a file,\n// until it has tried to look for that file.\"  this class looks for a file\n// that the user moved or renamed.  in corina, the most common way to lose a\n// file is to change its extension (raw->rec, pik->f99, rec->ind, etc.), or\n// to move it to a parent or sibling folder.  this class handles these cases\n// (but not every case, e.g., moving to a grandparent folder).\npublic class Finder implements Runnable {\n\n    private List result = new ArrayList();\n\n    public Finder(String filename) {\n        this.filename = filename;\n    }\n\n    private String filename;\n\n    public void run() {\n        // what i'm looking for\n        File file = new File(filename);\n        String target = normalize(file.getName());\n        // search this folder\n        File thisFolder = file.getParentFile();\n        // search(target, thisFolder, result);\n        // -- redundant, since i'll later search ../*\n        // search ..\n        File parentFolder = thisFolder.getParentFile();\n        search(target, parentFolder, result);\n        // search ../* -- SLOW!\n        File[] otherFolders = parentFolder.listFiles();\n        for (int i = 0; i < otherFolders.length && !stop; i++) if (otherFolders[i].isDirectory())\n            search(target, otherFolders[i], result);\n    }\n\n    public List getResult() {\n        return result;\n    }\n\n    private boolean stop = false;\n\n    public void pleaseStop() {\n        stop = true;\n    }\n\n    // given a filename, return a list of other possible filenames\n    // which this file may have been used for -- see class def for ideas.\n    // preferably, in order of most-to-least likely, so they can be\n    // presented to the user directly.\n    // this method may return an empty list, but it may not return null.\n    // given a filename, return all filenames that match it\n    // (and actually exist) mod case.\n    // (DESIGN: this method checks only alternate cases for the filename,\n    // not for all the folders it's in -- i should probably do that, too.)\n    /*\n\t  DESIGN ISSUE:\n\t  -- searching . and .. takes <200ms\n\t  -- searching ../* takes >3000ms = 3sec\n\t  -- that's a non-trivial amount of time\n\t  -- best solution: be like the mac finder\n\t  -- display search results as i get them\n\t  -- (threading!)\n\t  -- also display a thermometer, spinner, and/or some \"Searching...\" text\n\t  -- if user clicks \"ok\" (or whatever) early, stop searching!\n\t*/\n    // -- target is a lower-case normalized filename\n    // -- folder is the folder to search (but not recursively)\n    // -- result is the list (non-null) to add the results to\n    private void search(String target, File folder, List result) {\n        File[] siblings = folder.listFiles();\n        for (int i = 0; i < siblings.length && !stop; i++) if (normalize(siblings[i].getName()).equals(target)) {\n            result.add(siblings[i].getPath());\n            hooks.run();\n        }\n    }\n\n    /*\n      strategy:\n      -- take the filename\n      -- [ lower-case it\n      --   strip the extension ]\n      -- that's my \"target\"\n      -- that function is my normalizer\n      -- for each file in ./*, ../*, and ../* /*, normalize, and add to results if same\n    */\n    // given a filename, return its root filename, lower-case.\n    // for example, \"/etc/PASSWORD.TXT\" => \"password\"\n    private String normalize(String filename) {\n        // get filename\n        String n = new File(filename).getName();\n        // lower-case it\n        n = n.toLowerCase();\n        // strip the extension\n        int dot = n.lastIndexOf('.');\n        if (dot != -1)\n            n = n.substring(0, dot);\n        // return it\n        return n;\n    }\n\n    private Hooks hooks = new Hooks();\n\n    public void addHook(Runnable r) {\n        hooks.addHook(r);\n    }\n\n    public static void main(String[] args) throws Throwable {\n        ask(\"/Users/kharris/Documents/Corina/DATA/acm/acmearly.oink\");\n    }\n\n    // --------------------------------------------------\n    // given a filename the user asked for,\n    // ask the user which one, if any, he really meant.\n    // this method must return a filename, or throw a FNFE.\n    // it may not return null.\n    // suggestion:\n    // -- show a list (jlist) of \"filename\" or \"filename in folder/f2\".\n    // -- if there's only one, just ask -- \"replace with this?\" yes/no/other...\n    // -- if there's >1, show list ok/cancel/other...\n    // what about \"remove\"?  \"deactivate\"?  this could be tricky.\n    public static String ask(String filename) throws FileNotFoundException {\n        JList l = new JList();\n        final DefaultListModel m = new DefaultListModel();\n        l.setModel(m);\n        JLabel line1 = new JLabel(\"The file \\\"\" + filename + \"\\\" was\");\n        JLabel line2 = new JLabel(\"moved, renamed, or deleted.  Perhaps \" + \"it was changed to one of these?\");\n        JPanel question = Layout.boxLayoutY(line1, line2);\n        // ?\n        question.setBorder(BorderFactory.createEmptyBorder(0, 0, 10, 0));\n        final JLabel looking = new JLabel(\"Looking...\");\n        // !!!\n        JButton cancel = Builder.makeButton(\"cancel\");\n        JButton ok = Builder.makeButton(\"ok\");\n        JPanel buttons = Layout.buttonLayout(looking, null, cancel, ok);\n        // ?\n        buttons.setBorder(BorderFactory.createEmptyBorder(10, 0, 0, 0));\n        JComponent list = new JScrollPane(l);\n        JPanel content = Layout.borderLayout(question, null, list, null, buttons);\n        // ?\n        content.setBorder(BorderFactory.createEmptyBorder(10, 10, 10, 10));\n        JDialog d = new JDialog();\n        // (use maybeTitle() for win32?)\n        d.setTitle(\"\");\n        d.setContentPane(content);\n        // NOTE: in order to use okcancel here, i'll have to\n        // override this dialog's dispose(), since esc will only call\n        // that, and i'll need to stop the worker thread.  (on the\n        // upside, doing it in dispose() means i only have to do it\n        // once.)\n        OKCancel.addKeyboardDefaults(ok);\n        d.pack();\n        d.show();\n        final Finder x = new Finder(filename);\n        x.addHook(new Runnable() {\n\n            public void run() {\n                List r = x.getResult();\n                for (int i = m.getSize(); i < r.size(); i++) m.addElement(r.get(i));\n            }\n        });\n        Thread t = new Thread(new Runnable() {\n\n            public void run() {\n                x.run();\n                looking.setText(\"\");\n            }\n        });\n        t.start();\n        // WRITEME\n        throw new FileNotFoundException();\n        // TODO: make ok/cancel return the result (how?)\n        // TODO: on ok/cancel, stop the thread!\n        // TODO: integrate with editor, and wherever else it might be useful\n        // TODO: make \"other...\" ask for any filename, then return that\n        // TODO: don't allow deselecting the only selected row\n        // TODO: don't allow selecting more than one row\n        // TODO: double-clicking should be the same as click, ok\n        // TODO: in q, show filename only?\n        // TODO: in list, show filename only, if in the same folder?\n        // TODO: show icon, as for other alerts?\n        // FIXME: other... is awkward ... ?\n        // TODO: if nothing found, put (dimmed) \"no similar files found\" text in list\n        // TODO: preview?  how's the user supposed to decide?\n        // TODO: \"looking\" text isn't lined up with \"ok\",\"cancel\" text (?)\n        // TODO: select first entry by default\n        // TODO: for a list of filenames, if they appear to have all\n        // been moved to the same place, ask, then just change the\n        // folder for all (hard!) -- this makes the \"change\n        // directory...\" popup obsolete, if i can pull it off.\n        /*\n\t  The file \"blah.oink\" is missing.\n\t  Perhaps it was moved or renamed.\n\t  Replace it with one of these?\n\n\t  [blah.moo ===================== ] -- hey, preview component for these?\n\t   blah.oink2\n\t   ...\n\t  Looking... -- this text then disappears\n\n\t  (Other...)       (Cancel) (( OK )) -- what does \"cancel\" mean here?\n\t*/\n    }\n}\n",
		"id": "/EvoSuiteBenchmark/35_corina/src/main/java/corina/util/Finder.java",
		"test_prompt": "// FinderTest.java\npackage corina.util;\n\nimport corina.ui.Builder;\nimport corina.gui.Layout;\nimport java.io.File;\nimport java.io.FileNotFoundException;\nimport java.util.List;\nimport java.util.ArrayList;\nimport javax.swing.*;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link Finder}.\n* It contains ten unit test cases for the {@link Finder#ask(String)} method.\n*/\nclass FinderTest {"
	},
	{
		"original_code": "// Weiserjahre.java\n//\n// This file is part of Corina.\n//\n// Corina is free software; you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation; either version 2 of the License, or\n// (at your option) any later version.\n//\n// Corina is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Corina; if not, write to the Free Software\n// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n//\n// Copyright 2001 Ken Harris <kbh7@cornell.edu>\n//\npackage corina;\n\n/**\n *   Some useful utility functions for dealing with Sample's incr/decr\n *   fields.\n *\n *   @author Ken Harris &lt;kbh7 <i style=\"color: gray\">at</i> cornell <i style=\"color: gray\">dot</i> edu&gt;\n *   @version $Id: Weiserjahre.java,v 1.3 2004/01/18 17:53:47 aaron Exp $\n */\npublic class Weiserjahre {\n\n    /**\n     *       Test if an interval is significant, by Weiserjahre standards.\n     *       That is, does it have at least 4 samples, with at least 75% of\n     *       the trends agreeing?\n     *\n     *       @param s the sample to check\n     *       @param i which interval to check\n     *       @return true, iff this interval is significant\n     */\n    public static boolean isSignificant(Sample s, int i) {\n        int total = ((Number) s.count.get(i)).intValue();\n        if (total < 4)\n            return false;\n        int incr = ((Number) s.incr.get(i)).intValue();\n        int decr = ((Number) s.decr.get(i)).intValue();\n        return (incr >= decr * 3 || decr >= incr * 3);\n    }\n\n    public static boolean isSignificant(Sample s, Year y) {\n        return isSignificant(s, y.diff(s.range.getStart()));\n    }\n\n    public static String toString(Sample s, int i) {\n        int incr = ((Number) s.incr.get(i)).intValue();\n        int decr = ((Number) s.decr.get(i)).intValue();\n        return incr + (isSignificant(s, i) ? SIGNIFICANT : INSIGNIFICANT) + decr;\n    }\n\n    public static String toString(Sample s, Year y) {\n        return toString(s, y.diff(s.range.getStart()));\n    }\n\n    // 10/36, 9 => \"  10/36  \"; if width is even, undefined result.\n    // TODO: why don't i just write 'format for java?\n    public static String toStringFixed(Sample s, int i, int width, String c) {\n        String incr = s.incr.get(i).toString();\n        String decr = s.decr.get(i).toString();\n        while (incr.length() < width / 2) incr = ' ' + incr;\n        while (decr.length() < width / 2) decr = decr + ' ';\n        return incr + c + decr;\n    }\n\n    // default is '*','/'\n    public static String toStringFixed(Sample s, int i, int width) {\n        return toStringFixed(s, i, width, isSignificant(s, i) ? SIGNIFICANT : INSIGNIFICANT);\n    }\n\n    /**\n     * The string to separate the parts of a significant interval: <code>*</code>.\n     */\n    public final static String SIGNIFICANT = \"*\";\n\n    /**\n     * The string to separate the parts of an insignificant interval: <code>/</code>.\n     */\n    public final static String INSIGNIFICANT = \"/\";\n    // (should those be a trivial function, instead?)\n}\n",
		"id": "/EvoSuiteBenchmark/35_corina/src/main/java/corina/Weiserjahre_0Test.java",
		"test_prompt": "// Weiserjahre_0Test.java\n// This file is part of Corina.\n//\n// Corina is free software; you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation; either version 2 of the License, or\n// (at your option) any later version.\n//\n// Corina is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Corina; if not, write to the Free Software\n// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n//\n// Copyright 2001 Ken Harris <kbh7@cornell.edu>\n//\npackage corina;\n\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link Weiserjahre}.\n* It contains ten unit test cases for the {@link Weiserjahre#isSignificant(Sample, int)} method.\n*/\nclass Weiserjahre_0Test {"
	},
	{
		"original_code": "// Weiserjahre.java\n//\n// This file is part of Corina.\n//\n// Corina is free software; you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation; either version 2 of the License, or\n// (at your option) any later version.\n//\n// Corina is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Corina; if not, write to the Free Software\n// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n//\n// Copyright 2001 Ken Harris <kbh7@cornell.edu>\n//\npackage corina;\n\n/**\n *   Some useful utility functions for dealing with Sample's incr/decr\n *   fields.\n *\n *   @author Ken Harris &lt;kbh7 <i style=\"color: gray\">at</i> cornell <i style=\"color: gray\">dot</i> edu&gt;\n *   @version $Id: Weiserjahre.java,v 1.3 2004/01/18 17:53:47 aaron Exp $\n */\npublic class Weiserjahre {\n\n    /**\n     *       Test if an interval is significant, by Weiserjahre standards.\n     *       That is, does it have at least 4 samples, with at least 75% of\n     *       the trends agreeing?\n     *\n     *       @param s the sample to check\n     *       @param i which interval to check\n     *       @return true, iff this interval is significant\n     */\n    public static boolean isSignificant(Sample s, int i) {\n        int total = ((Number) s.count.get(i)).intValue();\n        if (total < 4)\n            return false;\n        int incr = ((Number) s.incr.get(i)).intValue();\n        int decr = ((Number) s.decr.get(i)).intValue();\n        return (incr >= decr * 3 || decr >= incr * 3);\n    }\n\n    public static boolean isSignificant(Sample s, Year y) {\n        return isSignificant(s, y.diff(s.range.getStart()));\n    }\n\n    public static String toString(Sample s, int i) {\n        int incr = ((Number) s.incr.get(i)).intValue();\n        int decr = ((Number) s.decr.get(i)).intValue();\n        return incr + (isSignificant(s, i) ? SIGNIFICANT : INSIGNIFICANT) + decr;\n    }\n\n    public static String toString(Sample s, Year y) {\n        return toString(s, y.diff(s.range.getStart()));\n    }\n\n    // 10/36, 9 => \"  10/36  \"; if width is even, undefined result.\n    // TODO: why don't i just write 'format for java?\n    public static String toStringFixed(Sample s, int i, int width, String c) {\n        String incr = s.incr.get(i).toString();\n        String decr = s.decr.get(i).toString();\n        while (incr.length() < width / 2) incr = ' ' + incr;\n        while (decr.length() < width / 2) decr = decr + ' ';\n        return incr + c + decr;\n    }\n\n    // default is '*','/'\n    public static String toStringFixed(Sample s, int i, int width) {\n        return toStringFixed(s, i, width, isSignificant(s, i) ? SIGNIFICANT : INSIGNIFICANT);\n    }\n\n    /**\n     * The string to separate the parts of a significant interval: <code>*</code>.\n     */\n    public final static String SIGNIFICANT = \"*\";\n\n    /**\n     * The string to separate the parts of an insignificant interval: <code>/</code>.\n     */\n    public final static String INSIGNIFICANT = \"/\";\n    // (should those be a trivial function, instead?)\n}\n",
		"id": "/EvoSuiteBenchmark/35_corina/src/main/java/corina/Weiserjahre_1Test.java",
		"test_prompt": "// Weiserjahre_1Test.java\n// This file is part of Corina.\n//\n// Corina is free software; you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation; either version 2 of the License, or\n// (at your option) any later version.\n//\n// Corina is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Corina; if not, write to the Free Software\n// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n//\n// Copyright 2001 Ken Harris <kbh7@cornell.edu>\n//\npackage corina;\n\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link Weiserjahre}.\n* It contains ten unit test cases for the {@link Weiserjahre#isSignificant(Sample, Year)} method.\n*/\nclass Weiserjahre_1Test {"
	},
	{
		"original_code": "// Weiserjahre.java\n//\n// This file is part of Corina.\n//\n// Corina is free software; you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation; either version 2 of the License, or\n// (at your option) any later version.\n//\n// Corina is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Corina; if not, write to the Free Software\n// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n//\n// Copyright 2001 Ken Harris <kbh7@cornell.edu>\n//\npackage corina;\n\n/**\n *   Some useful utility functions for dealing with Sample's incr/decr\n *   fields.\n *\n *   @author Ken Harris &lt;kbh7 <i style=\"color: gray\">at</i> cornell <i style=\"color: gray\">dot</i> edu&gt;\n *   @version $Id: Weiserjahre.java,v 1.3 2004/01/18 17:53:47 aaron Exp $\n */\npublic class Weiserjahre {\n\n    /**\n     *       Test if an interval is significant, by Weiserjahre standards.\n     *       That is, does it have at least 4 samples, with at least 75% of\n     *       the trends agreeing?\n     *\n     *       @param s the sample to check\n     *       @param i which interval to check\n     *       @return true, iff this interval is significant\n     */\n    public static boolean isSignificant(Sample s, int i) {\n        int total = ((Number) s.count.get(i)).intValue();\n        if (total < 4)\n            return false;\n        int incr = ((Number) s.incr.get(i)).intValue();\n        int decr = ((Number) s.decr.get(i)).intValue();\n        return (incr >= decr * 3 || decr >= incr * 3);\n    }\n\n    public static boolean isSignificant(Sample s, Year y) {\n        return isSignificant(s, y.diff(s.range.getStart()));\n    }\n\n    public static String toString(Sample s, int i) {\n        int incr = ((Number) s.incr.get(i)).intValue();\n        int decr = ((Number) s.decr.get(i)).intValue();\n        return incr + (isSignificant(s, i) ? SIGNIFICANT : INSIGNIFICANT) + decr;\n    }\n\n    public static String toString(Sample s, Year y) {\n        return toString(s, y.diff(s.range.getStart()));\n    }\n\n    // 10/36, 9 => \"  10/36  \"; if width is even, undefined result.\n    // TODO: why don't i just write 'format for java?\n    public static String toStringFixed(Sample s, int i, int width, String c) {\n        String incr = s.incr.get(i).toString();\n        String decr = s.decr.get(i).toString();\n        while (incr.length() < width / 2) incr = ' ' + incr;\n        while (decr.length() < width / 2) decr = decr + ' ';\n        return incr + c + decr;\n    }\n\n    // default is '*','/'\n    public static String toStringFixed(Sample s, int i, int width) {\n        return toStringFixed(s, i, width, isSignificant(s, i) ? SIGNIFICANT : INSIGNIFICANT);\n    }\n\n    /**\n     * The string to separate the parts of a significant interval: <code>*</code>.\n     */\n    public final static String SIGNIFICANT = \"*\";\n\n    /**\n     * The string to separate the parts of an insignificant interval: <code>/</code>.\n     */\n    public final static String INSIGNIFICANT = \"/\";\n    // (should those be a trivial function, instead?)\n}\n",
		"id": "/EvoSuiteBenchmark/35_corina/src/main/java/corina/Weiserjahre_2Test.java",
		"test_prompt": "// Weiserjahre_2Test.java\n// This file is part of Corina.\n//\n// Corina is free software; you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation; either version 2 of the License, or\n// (at your option) any later version.\n//\n// Corina is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Corina; if not, write to the Free Software\n// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n//\n// Copyright 2001 Ken Harris <kbh7@cornell.edu>\n//\npackage corina;\n\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link Weiserjahre}.\n* It contains ten unit test cases for the {@link Weiserjahre#toStringFixed(Sample, int, int, String)} method.\n*/\nclass Weiserjahre_2Test {"
	},
	{
		"original_code": "// Weiserjahre.java\n//\n// This file is part of Corina.\n//\n// Corina is free software; you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation; either version 2 of the License, or\n// (at your option) any later version.\n//\n// Corina is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Corina; if not, write to the Free Software\n// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n//\n// Copyright 2001 Ken Harris <kbh7@cornell.edu>\n//\npackage corina;\n\n/**\n *   Some useful utility functions for dealing with Sample's incr/decr\n *   fields.\n *\n *   @author Ken Harris &lt;kbh7 <i style=\"color: gray\">at</i> cornell <i style=\"color: gray\">dot</i> edu&gt;\n *   @version $Id: Weiserjahre.java,v 1.3 2004/01/18 17:53:47 aaron Exp $\n */\npublic class Weiserjahre {\n\n    /**\n     *       Test if an interval is significant, by Weiserjahre standards.\n     *       That is, does it have at least 4 samples, with at least 75% of\n     *       the trends agreeing?\n     *\n     *       @param s the sample to check\n     *       @param i which interval to check\n     *       @return true, iff this interval is significant\n     */\n    public static boolean isSignificant(Sample s, int i) {\n        int total = ((Number) s.count.get(i)).intValue();\n        if (total < 4)\n            return false;\n        int incr = ((Number) s.incr.get(i)).intValue();\n        int decr = ((Number) s.decr.get(i)).intValue();\n        return (incr >= decr * 3 || decr >= incr * 3);\n    }\n\n    public static boolean isSignificant(Sample s, Year y) {\n        return isSignificant(s, y.diff(s.range.getStart()));\n    }\n\n    public static String toString(Sample s, int i) {\n        int incr = ((Number) s.incr.get(i)).intValue();\n        int decr = ((Number) s.decr.get(i)).intValue();\n        return incr + (isSignificant(s, i) ? SIGNIFICANT : INSIGNIFICANT) + decr;\n    }\n\n    public static String toString(Sample s, Year y) {\n        return toString(s, y.diff(s.range.getStart()));\n    }\n\n    // 10/36, 9 => \"  10/36  \"; if width is even, undefined result.\n    // TODO: why don't i just write 'format for java?\n    public static String toStringFixed(Sample s, int i, int width, String c) {\n        String incr = s.incr.get(i).toString();\n        String decr = s.decr.get(i).toString();\n        while (incr.length() < width / 2) incr = ' ' + incr;\n        while (decr.length() < width / 2) decr = decr + ' ';\n        return incr + c + decr;\n    }\n\n    // default is '*','/'\n    public static String toStringFixed(Sample s, int i, int width) {\n        return toStringFixed(s, i, width, isSignificant(s, i) ? SIGNIFICANT : INSIGNIFICANT);\n    }\n\n    /**\n     * The string to separate the parts of a significant interval: <code>*</code>.\n     */\n    public final static String SIGNIFICANT = \"*\";\n\n    /**\n     * The string to separate the parts of an insignificant interval: <code>/</code>.\n     */\n    public final static String INSIGNIFICANT = \"/\";\n    // (should those be a trivial function, instead?)\n}\n",
		"id": "/EvoSuiteBenchmark/35_corina/src/main/java/corina/Weiserjahre_3Test.java",
		"test_prompt": "// Weiserjahre_3Test.java\n// This file is part of Corina.\n//\n// Corina is free software; you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation; either version 2 of the License, or\n// (at your option) any later version.\n//\n// Corina is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Corina; if not, write to the Free Software\n// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n//\n// Copyright 2001 Ken Harris <kbh7@cornell.edu>\n//\npackage corina;\n\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link Weiserjahre}.\n* It contains ten unit test cases for the {@link Weiserjahre#toStringFixed(Sample, int, int)} method.\n*/\nclass Weiserjahre_3Test {"
	},
	{
		"original_code": "// Platform.java\npackage corina.platform;\n\nimport java.io.File;\nimport java.io.IOException;\nimport javax.swing.JFrame;\nimport javax.swing.UIManager;\nimport corina.core.AbstractSubsystem;\nimport corina.gui.Bug;\nimport corina.logging.CorinaLog;\n\n/**\n * Platform subsystem that takes care of platform-specific things.\n * @author Aaron Hamid\n */\npublic class Platform extends AbstractSubsystem {\n\n    private static final CorinaLog log = new CorinaLog(Platform.class);\n\n    private boolean isMac;\n\n    private boolean isWindows;\n\n    private boolean isUnix;\n\n    public String getName() {\n        return \"Platform\";\n    }\n\n    public void init() {\n        super.init();\n        //method from TN2042, http://developer.apple.com/technotes/tn/tn2042.html\n        isMac = System.getProperty(\"mrj.version\") != null;\n        String osname = System.getProperty(\"os.name\");\n        isWindows = osname != null && osname.indexOf(\"Windows\") != -1;\n        // assume it's one of mac, win32, unix\n        isUnix = !isMac && !isWindows;\n        // this stuff moved from Startup\n        // on a mac, always use the mac menubar -- see TN2031\n        // (http://developer.apple.com/technotes/tn/tn2031.html)\n        // REFACTOR: move this to Platform?\n        if (isMac) {\n            // REFACTOR: make a Platform.JVMVersion field?\n            String version = System.getProperty(\"java.version\");\n            if (version != null && version.startsWith(\"1.4\"))\n                System.setProperty(\"apple.laf.useScreenMenuBar\", \"true\");\n            else\n                System.setProperty(\"com.apple.macos.useScreenMenuBar\", \"true\");\n            // this sets the \"about...\" name only -- not \"hide\", \"quit\", or in the dock.\n            // have to use -X args for those, anyway, so this is useless.\n            System.setProperty(\"com.apple.mrj.application.apple.menu.about.name\", \"Corina\");\n            // System.setProperty(\"com.apple.mrj.application.live-resize\", \"true\");\n            // also, treat apps as files, not folders (duh -- why's this not default, steve?)\n            // for AWT\n            System.setProperty(\"com.apple.macos.use-file-dialog-packages\", \"false\");\n            // for swing\n            UIManager.put(\"JFileChooser.packageIsTraversable\", \"never\");\n        }\n        // try to get the native L&F\n        String slafclassname = UIManager.getSystemLookAndFeelClassName();\n        /**\n         *    // smooth look and feel, anyone?\n         *    if(isWindows) {\n         *    \tslafclassname = \"smooth.windows.SmoothLookAndFeel\";\n         *    }\n         */\n        if (slafclassname != null)\n            try {\n                UIManager.setLookAndFeel(slafclassname);\n            } catch (Exception e) {\n                log.error(\"Error setting system look and feel class\", e);\n            }\n        // using windows with netware, netware doesn't tell windows the real\n        // username\n        // and home directory. here's an ugly workaround to set user.* properties,\n        // if they're there. (old way: always call with \"java -Duser.home=...\",\n        // and have the user type in her name -- ugh.) by doing this after the\n        // prefs\n        // loading, i override anything the user set in the prefs (unless they\n        // set it again -- hence it should be removed).\n        // try {\n        Netware.workaround();\n        // } catch (IOException ioe) {\n        // Bug.bug(ioe);\n        // }\n        // set up mac menubar\n        Macintosh.configureMenus();\n        setInitialized(true);\n    }\n\n    public void destroy() {\n        super.destroy();\n        setInitialized(false);\n        // don't need to do anything on destroy\n    }\n\n    public boolean isMac() {\n        return isMac;\n    }\n\n    public boolean isWindows() {\n        return isWindows;\n    }\n\n    public boolean isUnix() {\n        return isUnix;\n    }\n\n    /**\n     * Open a folder in the system file browser\n     */\n    public void open(String folder) {\n        String[] command;\n        if (isWindows) {\n            // if file, \"explorer /select,FILENAME\"\n            // else, \"explorer FILENAME\"\n            boolean isDir = new File(folder).isDirectory();\n            command = new String[] { \"explorer\", (isDir ? folder : \"/select,\" + folder) };\n            // TODO: this is completely untested!\n            // note: in my old SiteInfo.java, i used\n            // (\"c:\\\\winnt\\\\system32\\\\cmd.exe\" \"/c\" \"start\" folder)\n        } else if (isMac) {\n            command = new String[] { \"open\", \"-a\", \"/System/Library/CoreServices/Finder.app/\", folder };\n            // REFACTOR: make into methods openFolder(folder, file), openFolder(folder)?\n            // TODO: should i snarf up stdout/stderr?\n            // i think mac is smart enough i don't have to.\n            // (don't bother watching return value; it can't fail)\n            // note: in my old SiteInfo.java, i used\n            // (\"/usr/bin/open\" folder)\n        } else {\n            // what to do on unix?  gmc, konqueror, xterm?\n            new Bug(new IllegalArgumentException(\"Platform.open() not implemented on unix yet!\"));\n            return;\n        }\n        try {\n            Runtime.getRuntime().exec(command);\n        } catch (IOException ioe) {\n            new Bug(ioe);\n        }\n    }\n\n    // get the name of the trash folder\n    public String getTrash() {\n        if (isWindows)\n            // do they still not have a per-user trash?  just use the trash on C:\\.\n            return \"C:\\\\recycled\\\\\";\n        if (isMac)\n            return System.getProperty(\"user.home\") + \"/.Trash/\";\n        // what to do on unix?\n        return null;\n    }\n\n    // mac-only -- windows prepends \"* \"\n    public void setModified(JFrame window, boolean mod) {\n        if (isMac)\n            window.getRootPane().putClientProperty(\"windowModified\", mod ? Boolean.TRUE : Boolean.TRUE);\n        // no news is good news\n        // REFACTOR: add this to xframe, or whatever my document window is\n        // (is that really what i want?)\n    }\n\n    // for DnD, the key you press to copy, instead of move.\n    public String getCopyModifier() {\n        if (isMac)\n            // option, really\n            return \"alt\";\n        else\n            return \"control\";\n        // i have no idea what it is on generic unix.  does motif specify?\n    }\n}\n",
		"id": "/EvoSuiteBenchmark/35_corina/src/main/java/corina/platform/Platform_0Test.java",
		"test_prompt": "// Platform_0Test.java\npackage corina.platform;\n\nimport java.io.File;\nimport java.io.IOException;\nimport javax.swing.JFrame;\nimport javax.swing.UIManager;\nimport corina.core.AbstractSubsystem;\nimport corina.gui.Bug;\nimport corina.logging.CorinaLog;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link Platform}.\n* It contains ten unit test cases for the {@link Platform#isMac()} method.\n*/\nclass Platform_0Test {"
	},
	{
		"original_code": "// Platform.java\npackage corina.platform;\n\nimport java.io.File;\nimport java.io.IOException;\nimport javax.swing.JFrame;\nimport javax.swing.UIManager;\nimport corina.core.AbstractSubsystem;\nimport corina.gui.Bug;\nimport corina.logging.CorinaLog;\n\n/**\n * Platform subsystem that takes care of platform-specific things.\n * @author Aaron Hamid\n */\npublic class Platform extends AbstractSubsystem {\n\n    private static final CorinaLog log = new CorinaLog(Platform.class);\n\n    private boolean isMac;\n\n    private boolean isWindows;\n\n    private boolean isUnix;\n\n    public String getName() {\n        return \"Platform\";\n    }\n\n    public void init() {\n        super.init();\n        //method from TN2042, http://developer.apple.com/technotes/tn/tn2042.html\n        isMac = System.getProperty(\"mrj.version\") != null;\n        String osname = System.getProperty(\"os.name\");\n        isWindows = osname != null && osname.indexOf(\"Windows\") != -1;\n        // assume it's one of mac, win32, unix\n        isUnix = !isMac && !isWindows;\n        // this stuff moved from Startup\n        // on a mac, always use the mac menubar -- see TN2031\n        // (http://developer.apple.com/technotes/tn/tn2031.html)\n        // REFACTOR: move this to Platform?\n        if (isMac) {\n            // REFACTOR: make a Platform.JVMVersion field?\n            String version = System.getProperty(\"java.version\");\n            if (version != null && version.startsWith(\"1.4\"))\n                System.setProperty(\"apple.laf.useScreenMenuBar\", \"true\");\n            else\n                System.setProperty(\"com.apple.macos.useScreenMenuBar\", \"true\");\n            // this sets the \"about...\" name only -- not \"hide\", \"quit\", or in the dock.\n            // have to use -X args for those, anyway, so this is useless.\n            System.setProperty(\"com.apple.mrj.application.apple.menu.about.name\", \"Corina\");\n            // System.setProperty(\"com.apple.mrj.application.live-resize\", \"true\");\n            // also, treat apps as files, not folders (duh -- why's this not default, steve?)\n            // for AWT\n            System.setProperty(\"com.apple.macos.use-file-dialog-packages\", \"false\");\n            // for swing\n            UIManager.put(\"JFileChooser.packageIsTraversable\", \"never\");\n        }\n        // try to get the native L&F\n        String slafclassname = UIManager.getSystemLookAndFeelClassName();\n        /**\n         *    // smooth look and feel, anyone?\n         *    if(isWindows) {\n         *    \tslafclassname = \"smooth.windows.SmoothLookAndFeel\";\n         *    }\n         */\n        if (slafclassname != null)\n            try {\n                UIManager.setLookAndFeel(slafclassname);\n            } catch (Exception e) {\n                log.error(\"Error setting system look and feel class\", e);\n            }\n        // using windows with netware, netware doesn't tell windows the real\n        // username\n        // and home directory. here's an ugly workaround to set user.* properties,\n        // if they're there. (old way: always call with \"java -Duser.home=...\",\n        // and have the user type in her name -- ugh.) by doing this after the\n        // prefs\n        // loading, i override anything the user set in the prefs (unless they\n        // set it again -- hence it should be removed).\n        // try {\n        Netware.workaround();\n        // } catch (IOException ioe) {\n        // Bug.bug(ioe);\n        // }\n        // set up mac menubar\n        Macintosh.configureMenus();\n        setInitialized(true);\n    }\n\n    public void destroy() {\n        super.destroy();\n        setInitialized(false);\n        // don't need to do anything on destroy\n    }\n\n    public boolean isMac() {\n        return isMac;\n    }\n\n    public boolean isWindows() {\n        return isWindows;\n    }\n\n    public boolean isUnix() {\n        return isUnix;\n    }\n\n    /**\n     * Open a folder in the system file browser\n     */\n    public void open(String folder) {\n        String[] command;\n        if (isWindows) {\n            // if file, \"explorer /select,FILENAME\"\n            // else, \"explorer FILENAME\"\n            boolean isDir = new File(folder).isDirectory();\n            command = new String[] { \"explorer\", (isDir ? folder : \"/select,\" + folder) };\n            // TODO: this is completely untested!\n            // note: in my old SiteInfo.java, i used\n            // (\"c:\\\\winnt\\\\system32\\\\cmd.exe\" \"/c\" \"start\" folder)\n        } else if (isMac) {\n            command = new String[] { \"open\", \"-a\", \"/System/Library/CoreServices/Finder.app/\", folder };\n            // REFACTOR: make into methods openFolder(folder, file), openFolder(folder)?\n            // TODO: should i snarf up stdout/stderr?\n            // i think mac is smart enough i don't have to.\n            // (don't bother watching return value; it can't fail)\n            // note: in my old SiteInfo.java, i used\n            // (\"/usr/bin/open\" folder)\n        } else {\n            // what to do on unix?  gmc, konqueror, xterm?\n            new Bug(new IllegalArgumentException(\"Platform.open() not implemented on unix yet!\"));\n            return;\n        }\n        try {\n            Runtime.getRuntime().exec(command);\n        } catch (IOException ioe) {\n            new Bug(ioe);\n        }\n    }\n\n    // get the name of the trash folder\n    public String getTrash() {\n        if (isWindows)\n            // do they still not have a per-user trash?  just use the trash on C:\\.\n            return \"C:\\\\recycled\\\\\";\n        if (isMac)\n            return System.getProperty(\"user.home\") + \"/.Trash/\";\n        // what to do on unix?\n        return null;\n    }\n\n    // mac-only -- windows prepends \"* \"\n    public void setModified(JFrame window, boolean mod) {\n        if (isMac)\n            window.getRootPane().putClientProperty(\"windowModified\", mod ? Boolean.TRUE : Boolean.TRUE);\n        // no news is good news\n        // REFACTOR: add this to xframe, or whatever my document window is\n        // (is that really what i want?)\n    }\n\n    // for DnD, the key you press to copy, instead of move.\n    public String getCopyModifier() {\n        if (isMac)\n            // option, really\n            return \"alt\";\n        else\n            return \"control\";\n        // i have no idea what it is on generic unix.  does motif specify?\n    }\n}\n",
		"id": "/EvoSuiteBenchmark/35_corina/src/main/java/corina/platform/Platform_1Test.java",
		"test_prompt": "// Platform_1Test.java\npackage corina.platform;\n\nimport java.io.File;\nimport java.io.IOException;\nimport javax.swing.JFrame;\nimport javax.swing.UIManager;\nimport corina.core.AbstractSubsystem;\nimport corina.gui.Bug;\nimport corina.logging.CorinaLog;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link Platform}.\n* It contains ten unit test cases for the {@link Platform#isWindows()} method.\n*/\nclass Platform_1Test {"
	},
	{
		"original_code": "// Platform.java\npackage corina.platform;\n\nimport java.io.File;\nimport java.io.IOException;\nimport javax.swing.JFrame;\nimport javax.swing.UIManager;\nimport corina.core.AbstractSubsystem;\nimport corina.gui.Bug;\nimport corina.logging.CorinaLog;\n\n/**\n * Platform subsystem that takes care of platform-specific things.\n * @author Aaron Hamid\n */\npublic class Platform extends AbstractSubsystem {\n\n    private static final CorinaLog log = new CorinaLog(Platform.class);\n\n    private boolean isMac;\n\n    private boolean isWindows;\n\n    private boolean isUnix;\n\n    public String getName() {\n        return \"Platform\";\n    }\n\n    public void init() {\n        super.init();\n        //method from TN2042, http://developer.apple.com/technotes/tn/tn2042.html\n        isMac = System.getProperty(\"mrj.version\") != null;\n        String osname = System.getProperty(\"os.name\");\n        isWindows = osname != null && osname.indexOf(\"Windows\") != -1;\n        // assume it's one of mac, win32, unix\n        isUnix = !isMac && !isWindows;\n        // this stuff moved from Startup\n        // on a mac, always use the mac menubar -- see TN2031\n        // (http://developer.apple.com/technotes/tn/tn2031.html)\n        // REFACTOR: move this to Platform?\n        if (isMac) {\n            // REFACTOR: make a Platform.JVMVersion field?\n            String version = System.getProperty(\"java.version\");\n            if (version != null && version.startsWith(\"1.4\"))\n                System.setProperty(\"apple.laf.useScreenMenuBar\", \"true\");\n            else\n                System.setProperty(\"com.apple.macos.useScreenMenuBar\", \"true\");\n            // this sets the \"about...\" name only -- not \"hide\", \"quit\", or in the dock.\n            // have to use -X args for those, anyway, so this is useless.\n            System.setProperty(\"com.apple.mrj.application.apple.menu.about.name\", \"Corina\");\n            // System.setProperty(\"com.apple.mrj.application.live-resize\", \"true\");\n            // also, treat apps as files, not folders (duh -- why's this not default, steve?)\n            // for AWT\n            System.setProperty(\"com.apple.macos.use-file-dialog-packages\", \"false\");\n            // for swing\n            UIManager.put(\"JFileChooser.packageIsTraversable\", \"never\");\n        }\n        // try to get the native L&F\n        String slafclassname = UIManager.getSystemLookAndFeelClassName();\n        /**\n         *    // smooth look and feel, anyone?\n         *    if(isWindows) {\n         *    \tslafclassname = \"smooth.windows.SmoothLookAndFeel\";\n         *    }\n         */\n        if (slafclassname != null)\n            try {\n                UIManager.setLookAndFeel(slafclassname);\n            } catch (Exception e) {\n                log.error(\"Error setting system look and feel class\", e);\n            }\n        // using windows with netware, netware doesn't tell windows the real\n        // username\n        // and home directory. here's an ugly workaround to set user.* properties,\n        // if they're there. (old way: always call with \"java -Duser.home=...\",\n        // and have the user type in her name -- ugh.) by doing this after the\n        // prefs\n        // loading, i override anything the user set in the prefs (unless they\n        // set it again -- hence it should be removed).\n        // try {\n        Netware.workaround();\n        // } catch (IOException ioe) {\n        // Bug.bug(ioe);\n        // }\n        // set up mac menubar\n        Macintosh.configureMenus();\n        setInitialized(true);\n    }\n\n    public void destroy() {\n        super.destroy();\n        setInitialized(false);\n        // don't need to do anything on destroy\n    }\n\n    public boolean isMac() {\n        return isMac;\n    }\n\n    public boolean isWindows() {\n        return isWindows;\n    }\n\n    public boolean isUnix() {\n        return isUnix;\n    }\n\n    /**\n     * Open a folder in the system file browser\n     */\n    public void open(String folder) {\n        String[] command;\n        if (isWindows) {\n            // if file, \"explorer /select,FILENAME\"\n            // else, \"explorer FILENAME\"\n            boolean isDir = new File(folder).isDirectory();\n            command = new String[] { \"explorer\", (isDir ? folder : \"/select,\" + folder) };\n            // TODO: this is completely untested!\n            // note: in my old SiteInfo.java, i used\n            // (\"c:\\\\winnt\\\\system32\\\\cmd.exe\" \"/c\" \"start\" folder)\n        } else if (isMac) {\n            command = new String[] { \"open\", \"-a\", \"/System/Library/CoreServices/Finder.app/\", folder };\n            // REFACTOR: make into methods openFolder(folder, file), openFolder(folder)?\n            // TODO: should i snarf up stdout/stderr?\n            // i think mac is smart enough i don't have to.\n            // (don't bother watching return value; it can't fail)\n            // note: in my old SiteInfo.java, i used\n            // (\"/usr/bin/open\" folder)\n        } else {\n            // what to do on unix?  gmc, konqueror, xterm?\n            new Bug(new IllegalArgumentException(\"Platform.open() not implemented on unix yet!\"));\n            return;\n        }\n        try {\n            Runtime.getRuntime().exec(command);\n        } catch (IOException ioe) {\n            new Bug(ioe);\n        }\n    }\n\n    // get the name of the trash folder\n    public String getTrash() {\n        if (isWindows)\n            // do they still not have a per-user trash?  just use the trash on C:\\.\n            return \"C:\\\\recycled\\\\\";\n        if (isMac)\n            return System.getProperty(\"user.home\") + \"/.Trash/\";\n        // what to do on unix?\n        return null;\n    }\n\n    // mac-only -- windows prepends \"* \"\n    public void setModified(JFrame window, boolean mod) {\n        if (isMac)\n            window.getRootPane().putClientProperty(\"windowModified\", mod ? Boolean.TRUE : Boolean.TRUE);\n        // no news is good news\n        // REFACTOR: add this to xframe, or whatever my document window is\n        // (is that really what i want?)\n    }\n\n    // for DnD, the key you press to copy, instead of move.\n    public String getCopyModifier() {\n        if (isMac)\n            // option, really\n            return \"alt\";\n        else\n            return \"control\";\n        // i have no idea what it is on generic unix.  does motif specify?\n    }\n}\n",
		"id": "/EvoSuiteBenchmark/35_corina/src/main/java/corina/platform/Platform_2Test.java",
		"test_prompt": "// Platform_2Test.java\npackage corina.platform;\n\nimport java.io.File;\nimport java.io.IOException;\nimport javax.swing.JFrame;\nimport javax.swing.UIManager;\nimport corina.core.AbstractSubsystem;\nimport corina.gui.Bug;\nimport corina.logging.CorinaLog;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link Platform}.\n* It contains ten unit test cases for the {@link Platform#isUnix()} method.\n*/\nclass Platform_2Test {"
	},
	{
		"original_code": "// Sample.java\n//\n// This file is part of Corina.\n//\n// Corina is free software; you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation; either version 2 of the License, or\n// (at your option) any later version.\n//\n// Corina is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Corina; if not, write to the Free Software\n// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n//\n// Copyright 2001 Ken Harris <kbh7@cornell.edu>\n//\npackage corina;\n\nimport corina.io.Files;\nimport corina.formats.WrongFiletypeException;\nimport corina.graph.Graphable;\nimport corina.ui.I18n;\nimport java.io.File;\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.Reader;\nimport java.io.InputStreamReader;\nimport java.io.IOException;\nimport java.io.FileNotFoundException;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Vector;\nimport java.util.Map;\nimport java.util.HashMap;\nimport java.net.URL;\nimport java.lang.reflect.Method;\nimport java.lang.ref.Reference;\nimport java.lang.ref.WeakReference;\nimport javax.swing.undo.*;\n\n/**\n *   Class representing a reading of a dendro sample.\n *\n *   <p>Currently, this stores:</p>\n *\n *   <ul>\n *     <li>series: data, count, wj (up/down, in one list)</li>\n *     <li>range</li>\n *     <li>a hashtable for metadata</li>\n *     <li>a list of elements</li>\n *   </ul>\n *\n *   @author Ken Harris &lt;kbh7 <i style=\"color: gray\">at</i> cornell <i style=\"color: gray\">dot</i> edu&gt;\n *   @version $Id: Sample.java,v 1.6 2006/01/04 06:51:55 lucasmo Exp $\n */\n// IDEA: make a samplefactory, so 2 calls to sample(filename) return\n// the same object.  better yet, an editor factory so a second\n// editor(sample) bringstofront the existing editor.\npublic class Sample implements Previewable, Graphable {\n\n    /**\n     *  The value of a missing ring, 2.  Anything less than or equal\n     * \tto this value is considered a MR.\n     */\n    public static final int MR = 2;\n\n    /**\n     * Data, as a List of Integers.\n     */\n    public List data;\n\n    /**\n     * Data range.\n     */\n    public Range range;\n\n    /**\n     *  Sample metadata, as a (String, Object) Map.  The following\n     *         table lists the standard keys, their data types, and valid values:\n     *\n     * <table border=\"1\">\n     *     <tr> <th>Key</th>         <th>Type</th>    <th>Valid values</th> </tr>\n     *     <tr> <td>id</td>          <td>Integer</td> <td></td>             </tr>\n     *     <tr> <td>title</td>       <td>String</td>  <td></td>             </tr>\n     *     <tr> <td>dating</td>      <td>String</td>  <td>A, R</td>         </tr>\n     *     <tr> <td>unmeas_pre</td>  <td>Integer</td> <td></td>             </tr>\n     *     <tr> <td>unmeas_post</td> <td>Integer</td> <td></td>             </tr>\n     *     <tr> <td>filename</td>    <td>String</td>  <td></td>             </tr>\n     *     <tr> <td>comments</td>    <td>String</td>  <td></td>             </tr>\n     *     <tr> <td>type</td>        <td>String</td>  <td>S, H, C</td>      </tr>\n     *     <tr> <td>species</td>     <td>String</td>  <td></td>             </tr>\n     *     <tr> <td>sapwood</td>     <td>Integer</td> <td></td>             </tr>\n     *     <tr> <td>pith</td>        <td>String</td>  <td>+, *, N</td>      </tr>\n     *     <tr> <td>terminal</td>    <td>String</td>  <td>v, vv, B, W</td>  </tr>\n     *     <tr> <td>continuous</td>  <td>String</td>  <td>C, R, N</td>      </tr>\n     *     <tr> <td>quality</td>     <td>String</td>  <td>+, ++</td>        </tr>\n     *     <tr> <td>format</td>      <td>String</td>  <td>R, I</td>         </tr>\n     *     <tr> <td>index_type</td>  <td>Integer</td> <td></td>             </tr>\n     *     <tr> <td>reconciled</td>  <td>String</td>  <td>Y,N</td>          </tr>\n     *     <tr> <td>author</td>      <td>String</td>  <td></td>             </tr>\n     * </table>\n     *\n     * \t<code>data</code>, <code>count</code>, <code>range</code>,\n     * \t<code>wj</code>, and <code>elements</code> aren't stored in\n     * \t<code>meta</code> - they're their own members.\n     *\n     * \t@see corina.formats.Corina\n     */\n    public Map meta;\n\n    // WRITEME: need corresponding setString(), setInteger().\n    // WRITEME: make meta private, eventually.\n    // WRITEME: add lazy-loaders here.\n    // WRITEME: and don't load on construction!\n    // get a string field from this sample.\n    public String getString(String field) {\n        // TODO: load, if needed.\n        Object val = meta.get(field);\n        if (val != null && val instanceof String)\n            return (String) val;\n        return null;\n    }\n\n    // get an int field from this sample.\n    // (would be int, but can't return null then -- use exception?)\n    public Integer getInteger(String field) {\n        // TODO: load, if needed.\n        Object val = meta.get(field);\n        if (val != null && val instanceof Integer)\n            return (Integer) val;\n        return null;\n    }\n\n    // get a list-of-numbers field from this sample.\n    // (what about elements?)\n    public List getList(String field) {\n        // TODO: load, if needed.\n        if (field.equals(\"data\"))\n            return data;\n        else if (field.equals(\"count\"))\n            return count;\n        else if (field.equals(\"incr\"))\n            return incr;\n        else if (field.equals(\"decr\"))\n            return decr;\n        return null;\n    }\n\n    /**\n     * Number of samples in the sum at any given point.\n     */\n    public List count = null;\n\n    // weiserjahre\n    public List incr = null, decr = null;\n\n    // does it have weiserjahre?\n    public boolean hasWeiserjahre() {\n        return (incr != null);\n    }\n\n    /**\n     * Elements (in a List) that were put into this sum.\n     */\n    public List elements = null;\n\n    /**\n     *  Default constructor.  Defaults:\n     * \t<ul>\n     * \t  <li><code>data</code> and <code>count</code> are initialized but empty\n     * \t  <li><code>range</code> is initialized\n     * \t  <li><code>meta</code> is initialized, and:\n     * \t      <ul>\n     * \t        <li>Tag \"title\" is set to \"Untitled\"\n     * \t\t<li>Tag \"author\" is set to the value of system property\n     * \t\t    <code>user.name</code>\n     * \t      </ul>\n     * \t  <li><code>wj</code> is <code>null</code>\n     * \t  <li><code>elements</code> is <code>null</code>\n     * \t</ul>\n     * \t@see #meta\n     */\n    public Sample() {\n        // make defaults: empty\n        data = new ArrayList();\n        range = new Range();\n        meta = new HashMap();\n        // store username, if known\n        if (System.getProperty(\"user.name\") != null)\n            meta.put(\"author\", System.getProperty(\"user.name\"));\n        // initialize empty metadata with defaults?\n        meta.put(\"title\", I18n.getText(\"Untitled\"));\n        // metadata NOT changed\n        metadataChanged = false;\n    }\n\n    /*\n    // TESTING: single-instance samples (and Sample(String) to become private)\n    public static Sample getSample(String filename) throws IOException {\n\t// check map\n\tSample s = null;\n\tif (samples.containsKey(filename)) {\n\t    s = (Sample) ((Reference) samples.get(filename)).get();\n\t    // BUG: what if what's on disk is newer than what's in memory?\n\t    // (if it's ONLY weakly referenced, just update it)\n\t    // (if somebody else is viewing it, better ask the user)\n\t}\n\tif (s == null)\n\t    s = new Sample(filename);\n\tsamples.put(filename, new WeakReference(s));\n\treturn s;\n\t// won't this map keep accumulating nulls?  well, probably not many.\n\t// but shouldn't i try to take them out somehow?\n    }\n    private static Map samples = new HashMap();\n*/\n    /**\n     *  Create a new Sample from a given file on disk.\n     * \t@param filename the name of the file to load\n     * \t@exception FileNotFoundException if the file doesn't exist\n     * \t@exception WrongFiletypeException if the file is not a Sample\n     * \t@exception IOException if there is an I/O error while loading\n     * \tthe file\n     */\n    /*\n    public Sample(String filename) throws FileNotFoundException, WrongFiletypeException, IOException {\n\t// make it like any other Sample\n\tthis();\n\n\t// load the file; this call throws the exceptions\n\tload(filename);\n\n\t// 99%+ of the time you're loading a sample from disk, you\n\t// won't be adding to it, so trim it.\n\ttrimAllToSize();\n    }\n    */\n    /*\n    public Sample(URL url) throws IOException {\n        this();\n\ttry {\n            Class.forName(\"corina.browser.ItrdbURLConnection\");\n\t} catch (ClassNotFoundException cnfe) {\n\t    corina.gui.Bug.bug(cnfe);\n\t}\n        load(new InputStreamReader(url.openStream()));\n        meta.put(\"filename\", url.toString());\n        trimAllToSize();\n    }\n    */\n    private void trimAllToSize() {\n        ((ArrayList) data).trimToSize();\n        if (count != null)\n            ((ArrayList) count).trimToSize();\n        if (hasWeiserjahre()) {\n            ((ArrayList) incr).trimToSize();\n            ((ArrayList) decr).trimToSize();\n        }\n    }\n\n    // copy each part of source to target.  shallow copy, no events, etc.\n    // used only by editor (paste) -- bad interface!\n    public static void copy(Sample source, Sample target) {\n        target.data = source.data;\n        target.range = source.range;\n        target.count = source.count;\n        target.meta = source.meta;\n        target.incr = source.incr;\n        target.decr = source.decr;\n        target.elements = source.elements;\n    }\n\n    /**\n     *  Return true if the sample is indexed, else false.\n     * \t@return true if the sample is indexed\n     */\n    public boolean isIndexed() {\n        String type = (String) meta.get(\"format\");\n        return (type != null && Character.toUpperCase(type.charAt(0)) == 'I');\n    }\n\n    /**\n     *  <p>Return true if the sample is summed, else false.  Here\n     * \t\"summed\" is defined as:</p>\n     * \t<ul>\n     * \t  <li>has a list of elements, or\n     * \t  <li>has count data\n     * \t</ul>\n     * \t@return true if the sample is summed\n     */\n    public boolean isSummed() {\n        return (elements != null || count != null);\n    }\n\n    /**\n     *  Return true if the sample is absolutely dated, else false.\n     * \t@return true if the sample is absolutely dated\n     */\n    public boolean isAbsolute() {\n        String dating = (String) meta.get(\"dating\");\n        return (dating != null && Character.toUpperCase(dating.charAt(0)) == 'A');\n    }\n\n    private boolean modified = false;\n\n    /**\n     *  Return true if the file was modified since last save.\n     * \t@return if the sample has been modified\n     */\n    public boolean isModified() {\n        return modified;\n    }\n\n    /**\n     * Set the modified flag.\n     */\n    public void setModified() {\n        modified = true;\n    }\n\n    /**\n     * Clear the modified flag.\n     */\n    public void clearModified() {\n        modified = false;\n    }\n\n    /**\n     *  Return the data for a graph.\n     * \t@return data to graph, as a List of Integers\n     */\n    public List getData() {\n        return data;\n    }\n\n    /**\n     *  Return the start date for a graph.\n     * \t@return start date of data to graph\n     */\n    public Year getStart() {\n        return range.getStart();\n    }\n\n    /**\n     *  Return the default scale factor for graphing.\n     * \t@return scale factor of 1.0, or 0.1 for indexed files\n     */\n    public float getScale() {\n        return (isIndexed() ? 0.1f : 1.0f);\n    }\n\n    /**\n     *  Return the sample's title.\n     * \t@return the \"title\" tag from meta\n     */\n    public String toString() {\n        String name = meta.get(\"title\") + \" \" + range.toStringWithSpan();\n        if (// not aqua-ish, but how to do it the real way?\n        isModified())\n            name = \"* \" + name;\n        return name;\n    }\n\n    /**\n     *  Count the total number of rings.  If this is a raw sample,\n     * \treturns the length.  If this is a summed sample, returns the\n     * \tsum of the count List.\n     * \t@return the total number of rings in this sample\n     */\n    public int countRings() {\n        // it's not a sum, so the number of rings is just the length\n        // (if (null count) (length data) ...\n        if (count == null)\n            return data.size();\n        // it's a sum, so the number of rings is the sum of the number\n        // of measurements for each year\n        // ... (apply '+ count))\n        int n = 0, size = count.size();\n        for (int i = 0; i < size; i++) n += ((Integer) count.get(i)).intValue();\n        return n;\n    }\n\n    // radius of the sample; only relevant for raw samples (better to\n    // return 0.0 for indexed sample?  throw ex?)\n    public int computeRadius() {\n        // (apply '+ data)\n        int n = data.size();\n        int sum = 0;\n        for (int i = 0; i < n; i++) sum += ((Number) data.get(i)).intValue();\n        return sum;\n    }\n\n    // number of intervals with >3 samples\n    public int count3SampleIntervals() {\n        // (count-if #'(lambda (x) (> x 3)) (sample-count s))\n        if (count == null)\n            return 0;\n        int n = count.size();\n        int three = 0;\n        for (int i = 0; i < n; i++) if (((Integer) count.get(i)).intValue() > 3)\n            three++;\n        return three;\n    }\n\n    // count number of significant (weiserjahre) intervals\n    public int countSignificantIntervals() {\n        if (!hasWeiserjahre())\n            return 0;\n        int sig = 0, n = incr.size();\n        for (int i = 0; i < n; i++) if (Weiserjahre.isSignificant(this, i))\n            sig++;\n        return sig;\n    }\n\n    //\n    // load/save\n    //\n    // create a new sample, from a file on disk\n    public Sample(String filename) throws IOException {\n        // new @-notation\n        if (filename.startsWith(\"@\"))\n            filename = System.getProperty(\"corina.dir.data\", \".\") + filename.substring(1);\n        // (assumes c.d.r ends with file.sep!)\n        Sample s = Files.load(filename);\n        copy(s, this);\n        trimAllToSize();\n    }\n\n    /* Determining if a file is indexed: The 800 Rule\n\n    (This was originally for Tucson files, but now I don't think it\n    applies to them, so it got dumped here.  It might actually be\n    useful here.)\n\n    If a Tucson file is summed, is it indexed?  There doesn't appear\n    to be any way to know for sure.  If it's not summed, and it's\n    processed, then it must be indexing that caused it to be processed.\n    But if it's summed, you know it's processed, but there's no way to\n    tell if it's indexed.\n    \n    So I invented\n\n       /The 800-Rule/: If dataset is known to be processed, but not\n       summed, then it is indexed if the average data value is greater\n       than 800.\n\n    Because indexes are based around 1000 (parts-per-thousand), the\n    average would be near 1000.  Raw data are much lower, like 50-100.\n    This fails if you have a raw dataset with rings larger than 8mm on\n    average (a very big tree), or an indexed dataset where the curve\n    overshoots by more than 25% on average (a very poor index).  It\n    doesn't really matter that this fails <i>sometimes</i>, because\n    without this rule, it would fail <i>always</i>.  So it's a hack,\n    but it's still the right thing to do.\n\n    I've recently learned that there's really no need for the\n    800-rule on Tucson files.  Apparently nobody at Tucson ever thought\n    of summing non-indexed files, so summed implies indexed.  I think.\n    (How do they store indexed files for summing, then?)  Oh well, we\n    had fun, anyway.\n\n    This used to be in Tucson.java, then in TwoColumn.java, but it\n    only looks at the Sample, so it really belongs here.  At least I\n    can put it with the load/save stuff here.\n\n(later) pik says there can be raw summed [tucson] files, and pulls out some\n        old datasets to show me ... that there are raw, indexed, and\n        summed indexed formats for tucson.  but he wants it back in,\n        so we give it to him. */\n    public void guessIndexed() {\n        meta.put(\"format\", computeRadius() / data.size() > 800 ? \"I\" : \"R\");\n    }\n\n    // make sure data/count/wj are the same size as range.span, and\n    // contain all legit Numbers.  turns nulls/non-numbers into 0's.\n    public void verify() {\n        int n = range.span();\n        // what to do if they're the wrong size -- adjust range if the data\n        // are all the same size, but pad with zeros if only one is off?\n        // data: turn nulls/non-numbers into 0\n        for (int i = 0; i < n; i++) {\n            Object o = data.get(i);\n            if (o == null || !(o instanceof Number))\n                data.set(i, new Integer(0));\n        }\n        // TODO: do count, WJ as well\n    }\n\n    /**\n     *       Save this Sample to disk.\n     *\n     *       @param filename the name of the file to save to\n     *       @exception IOException if an I/O error occurs\n     */\n    public void save(String filename) throws IOException {\n        Files.save(this, filename);\n    }\n\n    /**\n     *       Save this Sample to disk to the same filename it had\n     *       previously.\n     *\n     *       @exception IOException if an I/O error occurs\n     */\n    public void save() throws IOException {\n        // BUG!  assumes filename exists in meta map -- what if it doesn't?\n        save((String) meta.get(\"filename\"));\n    }\n\n    public Preview getPreview() {\n        return new SamplePreview(this);\n    }\n\n    private static class SamplePreview extends Preview {\n\n        SamplePreview(Sample s) {\n            title = s.meta.get(\"title\").toString();\n            // range -- toStringWithSpan() does \"(a - b, n=c)\", i want \"a - b (n=c)\"\n            items.add(s.range + \" (n=\" + s.range.span() + \")\");\n            // species\n            if (s.meta.containsKey(\"species\"))\n                items.add(I18n.getText(\"species\") + \": \" + s.meta.get(\"species\"));\n            // format\n            items.add(I18n.getText(\"format\") + \": \" + s.meta.get(\"filetype\"));\n            // indexed, summed\n            if (s.isIndexed())\n                items.add(I18n.getText(\"indexed\"));\n            if (s.isSummed()) {\n                String summedLine = I18n.getText(\"summed\");\n                if (s.elements != null)\n                    summedLine += \" (\" + s.elements.size() + \" \" + I18n.getText(\"elements\") + \")\";\n                items.add(summedLine);\n            }\n        }\n    }\n\n    //\n    // miscellaneous procedures that are better off here than elsewhere\n    //\n    // is this sample oak?  (assumes meta/species is a string, if present)\n    // (FIXME: if it's not a string, it's not oak.)\n    // checks for \"oak\" or \"quercus\".\n    public boolean isOak() {\n        String species = (String) meta.get(\"species\");\n        if (species == null)\n            return false;\n        species = species.toLowerCase();\n        return (species.indexOf(\"oak\") != -1 || species.indexOf(\"quercus\") != -1);\n    }\n\n    // is this sample editable?  no, if it's been indexed or summed.\n    public boolean isEditable() {\n        return (!isIndexed()) && (!isSummed());\n    }\n\n    //\n    // event model\n    //\n    private Vector listeners = new Vector();\n\n    public synchronized void addSampleListener(SampleListener l) {\n        if (!listeners.contains(l))\n            listeners.add(l);\n    }\n\n    public synchronized void removeSampleListener(SampleListener l) {\n        listeners.remove(l);\n    }\n\n    // fire an arbitrary sample event called |method|.  each\n    // fireSampleXYZhappened() method is virtually identical, so their\n    // guts were refactored into here.  this makes adding new events\n    // painless.  (this was taken from a web page -- url?)\n    private void fireSampleEvent(String method) {\n        // alert all listeners\n        Vector l;\n        synchronized (this) {\n            l = (Vector) listeners.clone();\n        }\n        int size = l.size();\n        if (size == 0)\n            return;\n        SampleEvent e = new SampleEvent(this);\n        try {\n            // **\n            Class[] types = new Class[] { SampleEvent.class };\n            Method m = SampleListener.class.getMethod(method, types);\n            Object[] args = new Object[] { e };\n            for (int i = 0; i < size; i++) {\n                SampleListener listener = (SampleListener) l.elementAt(i);\n                // this is like \"listener.method(e)\" (along with the 2 lines\n                // marked ** above)\n                m.invoke(listener, args);\n            }\n        } catch (Exception ex) {\n            // BUG: these exceptions are caught too coursely!\n            // just ignore them all... (?)\n        }\n    }\n\n    // there's an elegant refactoring waiting to be done here, but i'm too wired on caffiene right now to see it.\n    // => see also mapframe's toolbox decorators.\n    public void fireSampleRedated() {\n        fireSampleEvent(\"sampleRedated\");\n    }\n\n    public void fireSampleDataChanged() {\n        fireSampleEvent(\"sampleDataChanged\");\n    }\n\n    public void fireSampleMetadataChanged() {\n        metadataChanged = true;\n        fireSampleEvent(\"sampleMetadataChanged\");\n    }\n\n    public void fireSampleElementsChanged() {\n        fireSampleEvent(\"sampleElementsChanged\");\n    }\n\n    // see if the metadata was changed -- true (loaded samples) unless zero-arg constructor called\n    private boolean metadataChanged = true;\n\n    public boolean wasMetadataChanged() {\n        return metadataChanged;\n    }\n\n    /* FUTURE: */\n    private UndoableEditSupport undoSupport = new UndoableEditSupport();\n\n    public void postEdit(UndoableEdit e) {\n        undoSupport.postEdit(e);\n    }\n}\n",
		"id": "/EvoSuiteBenchmark/35_corina/src/main/java/corina/Sample_0Test.java",
		"test_prompt": "// Sample_0Test.java\n// This file is part of Corina.\n//\n// Corina is free software; you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation; either version 2 of the License, or\n// (at your option) any later version.\n//\n// Corina is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Corina; if not, write to the Free Software\n// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n//\n// Copyright 2001 Ken Harris <kbh7@cornell.edu>\n//\npackage corina;\n\nimport corina.io.Files;\nimport corina.formats.WrongFiletypeException;\nimport corina.graph.Graphable;\nimport corina.ui.I18n;\nimport java.io.File;\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.Reader;\nimport java.io.InputStreamReader;\nimport java.io.IOException;\nimport java.io.FileNotFoundException;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Vector;\nimport java.util.Map;\nimport java.util.HashMap;\nimport java.net.URL;\nimport java.lang.reflect.Method;\nimport java.lang.ref.Reference;\nimport java.lang.ref.WeakReference;\nimport javax.swing.undo.*;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link Sample}.\n* It contains ten unit test cases for the {@link Sample#hasWeiserjahre()} method.\n*/\nclass Sample_0Test {"
	},
	{
		"original_code": "// Sample.java\n//\n// This file is part of Corina.\n//\n// Corina is free software; you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation; either version 2 of the License, or\n// (at your option) any later version.\n//\n// Corina is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Corina; if not, write to the Free Software\n// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n//\n// Copyright 2001 Ken Harris <kbh7@cornell.edu>\n//\npackage corina;\n\nimport corina.io.Files;\nimport corina.formats.WrongFiletypeException;\nimport corina.graph.Graphable;\nimport corina.ui.I18n;\nimport java.io.File;\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.Reader;\nimport java.io.InputStreamReader;\nimport java.io.IOException;\nimport java.io.FileNotFoundException;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Vector;\nimport java.util.Map;\nimport java.util.HashMap;\nimport java.net.URL;\nimport java.lang.reflect.Method;\nimport java.lang.ref.Reference;\nimport java.lang.ref.WeakReference;\nimport javax.swing.undo.*;\n\n/**\n *   Class representing a reading of a dendro sample.\n *\n *   <p>Currently, this stores:</p>\n *\n *   <ul>\n *     <li>series: data, count, wj (up/down, in one list)</li>\n *     <li>range</li>\n *     <li>a hashtable for metadata</li>\n *     <li>a list of elements</li>\n *   </ul>\n *\n *   @author Ken Harris &lt;kbh7 <i style=\"color: gray\">at</i> cornell <i style=\"color: gray\">dot</i> edu&gt;\n *   @version $Id: Sample.java,v 1.6 2006/01/04 06:51:55 lucasmo Exp $\n */\n// IDEA: make a samplefactory, so 2 calls to sample(filename) return\n// the same object.  better yet, an editor factory so a second\n// editor(sample) bringstofront the existing editor.\npublic class Sample implements Previewable, Graphable {\n\n    /**\n     *  The value of a missing ring, 2.  Anything less than or equal\n     * \tto this value is considered a MR.\n     */\n    public static final int MR = 2;\n\n    /**\n     * Data, as a List of Integers.\n     */\n    public List data;\n\n    /**\n     * Data range.\n     */\n    public Range range;\n\n    /**\n     *  Sample metadata, as a (String, Object) Map.  The following\n     *         table lists the standard keys, their data types, and valid values:\n     *\n     * <table border=\"1\">\n     *     <tr> <th>Key</th>         <th>Type</th>    <th>Valid values</th> </tr>\n     *     <tr> <td>id</td>          <td>Integer</td> <td></td>             </tr>\n     *     <tr> <td>title</td>       <td>String</td>  <td></td>             </tr>\n     *     <tr> <td>dating</td>      <td>String</td>  <td>A, R</td>         </tr>\n     *     <tr> <td>unmeas_pre</td>  <td>Integer</td> <td></td>             </tr>\n     *     <tr> <td>unmeas_post</td> <td>Integer</td> <td></td>             </tr>\n     *     <tr> <td>filename</td>    <td>String</td>  <td></td>             </tr>\n     *     <tr> <td>comments</td>    <td>String</td>  <td></td>             </tr>\n     *     <tr> <td>type</td>        <td>String</td>  <td>S, H, C</td>      </tr>\n     *     <tr> <td>species</td>     <td>String</td>  <td></td>             </tr>\n     *     <tr> <td>sapwood</td>     <td>Integer</td> <td></td>             </tr>\n     *     <tr> <td>pith</td>        <td>String</td>  <td>+, *, N</td>      </tr>\n     *     <tr> <td>terminal</td>    <td>String</td>  <td>v, vv, B, W</td>  </tr>\n     *     <tr> <td>continuous</td>  <td>String</td>  <td>C, R, N</td>      </tr>\n     *     <tr> <td>quality</td>     <td>String</td>  <td>+, ++</td>        </tr>\n     *     <tr> <td>format</td>      <td>String</td>  <td>R, I</td>         </tr>\n     *     <tr> <td>index_type</td>  <td>Integer</td> <td></td>             </tr>\n     *     <tr> <td>reconciled</td>  <td>String</td>  <td>Y,N</td>          </tr>\n     *     <tr> <td>author</td>      <td>String</td>  <td></td>             </tr>\n     * </table>\n     *\n     * \t<code>data</code>, <code>count</code>, <code>range</code>,\n     * \t<code>wj</code>, and <code>elements</code> aren't stored in\n     * \t<code>meta</code> - they're their own members.\n     *\n     * \t@see corina.formats.Corina\n     */\n    public Map meta;\n\n    // WRITEME: need corresponding setString(), setInteger().\n    // WRITEME: make meta private, eventually.\n    // WRITEME: add lazy-loaders here.\n    // WRITEME: and don't load on construction!\n    // get a string field from this sample.\n    public String getString(String field) {\n        // TODO: load, if needed.\n        Object val = meta.get(field);\n        if (val != null && val instanceof String)\n            return (String) val;\n        return null;\n    }\n\n    // get an int field from this sample.\n    // (would be int, but can't return null then -- use exception?)\n    public Integer getInteger(String field) {\n        // TODO: load, if needed.\n        Object val = meta.get(field);\n        if (val != null && val instanceof Integer)\n            return (Integer) val;\n        return null;\n    }\n\n    // get a list-of-numbers field from this sample.\n    // (what about elements?)\n    public List getList(String field) {\n        // TODO: load, if needed.\n        if (field.equals(\"data\"))\n            return data;\n        else if (field.equals(\"count\"))\n            return count;\n        else if (field.equals(\"incr\"))\n            return incr;\n        else if (field.equals(\"decr\"))\n            return decr;\n        return null;\n    }\n\n    /**\n     * Number of samples in the sum at any given point.\n     */\n    public List count = null;\n\n    // weiserjahre\n    public List incr = null, decr = null;\n\n    // does it have weiserjahre?\n    public boolean hasWeiserjahre() {\n        return (incr != null);\n    }\n\n    /**\n     * Elements (in a List) that were put into this sum.\n     */\n    public List elements = null;\n\n    /**\n     *  Default constructor.  Defaults:\n     * \t<ul>\n     * \t  <li><code>data</code> and <code>count</code> are initialized but empty\n     * \t  <li><code>range</code> is initialized\n     * \t  <li><code>meta</code> is initialized, and:\n     * \t      <ul>\n     * \t        <li>Tag \"title\" is set to \"Untitled\"\n     * \t\t<li>Tag \"author\" is set to the value of system property\n     * \t\t    <code>user.name</code>\n     * \t      </ul>\n     * \t  <li><code>wj</code> is <code>null</code>\n     * \t  <li><code>elements</code> is <code>null</code>\n     * \t</ul>\n     * \t@see #meta\n     */\n    public Sample() {\n        // make defaults: empty\n        data = new ArrayList();\n        range = new Range();\n        meta = new HashMap();\n        // store username, if known\n        if (System.getProperty(\"user.name\") != null)\n            meta.put(\"author\", System.getProperty(\"user.name\"));\n        // initialize empty metadata with defaults?\n        meta.put(\"title\", I18n.getText(\"Untitled\"));\n        // metadata NOT changed\n        metadataChanged = false;\n    }\n\n    /*\n    // TESTING: single-instance samples (and Sample(String) to become private)\n    public static Sample getSample(String filename) throws IOException {\n\t// check map\n\tSample s = null;\n\tif (samples.containsKey(filename)) {\n\t    s = (Sample) ((Reference) samples.get(filename)).get();\n\t    // BUG: what if what's on disk is newer than what's in memory?\n\t    // (if it's ONLY weakly referenced, just update it)\n\t    // (if somebody else is viewing it, better ask the user)\n\t}\n\tif (s == null)\n\t    s = new Sample(filename);\n\tsamples.put(filename, new WeakReference(s));\n\treturn s;\n\t// won't this map keep accumulating nulls?  well, probably not many.\n\t// but shouldn't i try to take them out somehow?\n    }\n    private static Map samples = new HashMap();\n*/\n    /**\n     *  Create a new Sample from a given file on disk.\n     * \t@param filename the name of the file to load\n     * \t@exception FileNotFoundException if the file doesn't exist\n     * \t@exception WrongFiletypeException if the file is not a Sample\n     * \t@exception IOException if there is an I/O error while loading\n     * \tthe file\n     */\n    /*\n    public Sample(String filename) throws FileNotFoundException, WrongFiletypeException, IOException {\n\t// make it like any other Sample\n\tthis();\n\n\t// load the file; this call throws the exceptions\n\tload(filename);\n\n\t// 99%+ of the time you're loading a sample from disk, you\n\t// won't be adding to it, so trim it.\n\ttrimAllToSize();\n    }\n    */\n    /*\n    public Sample(URL url) throws IOException {\n        this();\n\ttry {\n            Class.forName(\"corina.browser.ItrdbURLConnection\");\n\t} catch (ClassNotFoundException cnfe) {\n\t    corina.gui.Bug.bug(cnfe);\n\t}\n        load(new InputStreamReader(url.openStream()));\n        meta.put(\"filename\", url.toString());\n        trimAllToSize();\n    }\n    */\n    private void trimAllToSize() {\n        ((ArrayList) data).trimToSize();\n        if (count != null)\n            ((ArrayList) count).trimToSize();\n        if (hasWeiserjahre()) {\n            ((ArrayList) incr).trimToSize();\n            ((ArrayList) decr).trimToSize();\n        }\n    }\n\n    // copy each part of source to target.  shallow copy, no events, etc.\n    // used only by editor (paste) -- bad interface!\n    public static void copy(Sample source, Sample target) {\n        target.data = source.data;\n        target.range = source.range;\n        target.count = source.count;\n        target.meta = source.meta;\n        target.incr = source.incr;\n        target.decr = source.decr;\n        target.elements = source.elements;\n    }\n\n    /**\n     *  Return true if the sample is indexed, else false.\n     * \t@return true if the sample is indexed\n     */\n    public boolean isIndexed() {\n        String type = (String) meta.get(\"format\");\n        return (type != null && Character.toUpperCase(type.charAt(0)) == 'I');\n    }\n\n    /**\n     *  <p>Return true if the sample is summed, else false.  Here\n     * \t\"summed\" is defined as:</p>\n     * \t<ul>\n     * \t  <li>has a list of elements, or\n     * \t  <li>has count data\n     * \t</ul>\n     * \t@return true if the sample is summed\n     */\n    public boolean isSummed() {\n        return (elements != null || count != null);\n    }\n\n    /**\n     *  Return true if the sample is absolutely dated, else false.\n     * \t@return true if the sample is absolutely dated\n     */\n    public boolean isAbsolute() {\n        String dating = (String) meta.get(\"dating\");\n        return (dating != null && Character.toUpperCase(dating.charAt(0)) == 'A');\n    }\n\n    private boolean modified = false;\n\n    /**\n     *  Return true if the file was modified since last save.\n     * \t@return if the sample has been modified\n     */\n    public boolean isModified() {\n        return modified;\n    }\n\n    /**\n     * Set the modified flag.\n     */\n    public void setModified() {\n        modified = true;\n    }\n\n    /**\n     * Clear the modified flag.\n     */\n    public void clearModified() {\n        modified = false;\n    }\n\n    /**\n     *  Return the data for a graph.\n     * \t@return data to graph, as a List of Integers\n     */\n    public List getData() {\n        return data;\n    }\n\n    /**\n     *  Return the start date for a graph.\n     * \t@return start date of data to graph\n     */\n    public Year getStart() {\n        return range.getStart();\n    }\n\n    /**\n     *  Return the default scale factor for graphing.\n     * \t@return scale factor of 1.0, or 0.1 for indexed files\n     */\n    public float getScale() {\n        return (isIndexed() ? 0.1f : 1.0f);\n    }\n\n    /**\n     *  Return the sample's title.\n     * \t@return the \"title\" tag from meta\n     */\n    public String toString() {\n        String name = meta.get(\"title\") + \" \" + range.toStringWithSpan();\n        if (// not aqua-ish, but how to do it the real way?\n        isModified())\n            name = \"* \" + name;\n        return name;\n    }\n\n    /**\n     *  Count the total number of rings.  If this is a raw sample,\n     * \treturns the length.  If this is a summed sample, returns the\n     * \tsum of the count List.\n     * \t@return the total number of rings in this sample\n     */\n    public int countRings() {\n        // it's not a sum, so the number of rings is just the length\n        // (if (null count) (length data) ...\n        if (count == null)\n            return data.size();\n        // it's a sum, so the number of rings is the sum of the number\n        // of measurements for each year\n        // ... (apply '+ count))\n        int n = 0, size = count.size();\n        for (int i = 0; i < size; i++) n += ((Integer) count.get(i)).intValue();\n        return n;\n    }\n\n    // radius of the sample; only relevant for raw samples (better to\n    // return 0.0 for indexed sample?  throw ex?)\n    public int computeRadius() {\n        // (apply '+ data)\n        int n = data.size();\n        int sum = 0;\n        for (int i = 0; i < n; i++) sum += ((Number) data.get(i)).intValue();\n        return sum;\n    }\n\n    // number of intervals with >3 samples\n    public int count3SampleIntervals() {\n        // (count-if #'(lambda (x) (> x 3)) (sample-count s))\n        if (count == null)\n            return 0;\n        int n = count.size();\n        int three = 0;\n        for (int i = 0; i < n; i++) if (((Integer) count.get(i)).intValue() > 3)\n            three++;\n        return three;\n    }\n\n    // count number of significant (weiserjahre) intervals\n    public int countSignificantIntervals() {\n        if (!hasWeiserjahre())\n            return 0;\n        int sig = 0, n = incr.size();\n        for (int i = 0; i < n; i++) if (Weiserjahre.isSignificant(this, i))\n            sig++;\n        return sig;\n    }\n\n    //\n    // load/save\n    //\n    // create a new sample, from a file on disk\n    public Sample(String filename) throws IOException {\n        // new @-notation\n        if (filename.startsWith(\"@\"))\n            filename = System.getProperty(\"corina.dir.data\", \".\") + filename.substring(1);\n        // (assumes c.d.r ends with file.sep!)\n        Sample s = Files.load(filename);\n        copy(s, this);\n        trimAllToSize();\n    }\n\n    /* Determining if a file is indexed: The 800 Rule\n\n    (This was originally for Tucson files, but now I don't think it\n    applies to them, so it got dumped here.  It might actually be\n    useful here.)\n\n    If a Tucson file is summed, is it indexed?  There doesn't appear\n    to be any way to know for sure.  If it's not summed, and it's\n    processed, then it must be indexing that caused it to be processed.\n    But if it's summed, you know it's processed, but there's no way to\n    tell if it's indexed.\n    \n    So I invented\n\n       /The 800-Rule/: If dataset is known to be processed, but not\n       summed, then it is indexed if the average data value is greater\n       than 800.\n\n    Because indexes are based around 1000 (parts-per-thousand), the\n    average would be near 1000.  Raw data are much lower, like 50-100.\n    This fails if you have a raw dataset with rings larger than 8mm on\n    average (a very big tree), or an indexed dataset where the curve\n    overshoots by more than 25% on average (a very poor index).  It\n    doesn't really matter that this fails <i>sometimes</i>, because\n    without this rule, it would fail <i>always</i>.  So it's a hack,\n    but it's still the right thing to do.\n\n    I've recently learned that there's really no need for the\n    800-rule on Tucson files.  Apparently nobody at Tucson ever thought\n    of summing non-indexed files, so summed implies indexed.  I think.\n    (How do they store indexed files for summing, then?)  Oh well, we\n    had fun, anyway.\n\n    This used to be in Tucson.java, then in TwoColumn.java, but it\n    only looks at the Sample, so it really belongs here.  At least I\n    can put it with the load/save stuff here.\n\n(later) pik says there can be raw summed [tucson] files, and pulls out some\n        old datasets to show me ... that there are raw, indexed, and\n        summed indexed formats for tucson.  but he wants it back in,\n        so we give it to him. */\n    public void guessIndexed() {\n        meta.put(\"format\", computeRadius() / data.size() > 800 ? \"I\" : \"R\");\n    }\n\n    // make sure data/count/wj are the same size as range.span, and\n    // contain all legit Numbers.  turns nulls/non-numbers into 0's.\n    public void verify() {\n        int n = range.span();\n        // what to do if they're the wrong size -- adjust range if the data\n        // are all the same size, but pad with zeros if only one is off?\n        // data: turn nulls/non-numbers into 0\n        for (int i = 0; i < n; i++) {\n            Object o = data.get(i);\n            if (o == null || !(o instanceof Number))\n                data.set(i, new Integer(0));\n        }\n        // TODO: do count, WJ as well\n    }\n\n    /**\n     *       Save this Sample to disk.\n     *\n     *       @param filename the name of the file to save to\n     *       @exception IOException if an I/O error occurs\n     */\n    public void save(String filename) throws IOException {\n        Files.save(this, filename);\n    }\n\n    /**\n     *       Save this Sample to disk to the same filename it had\n     *       previously.\n     *\n     *       @exception IOException if an I/O error occurs\n     */\n    public void save() throws IOException {\n        // BUG!  assumes filename exists in meta map -- what if it doesn't?\n        save((String) meta.get(\"filename\"));\n    }\n\n    public Preview getPreview() {\n        return new SamplePreview(this);\n    }\n\n    private static class SamplePreview extends Preview {\n\n        SamplePreview(Sample s) {\n            title = s.meta.get(\"title\").toString();\n            // range -- toStringWithSpan() does \"(a - b, n=c)\", i want \"a - b (n=c)\"\n            items.add(s.range + \" (n=\" + s.range.span() + \")\");\n            // species\n            if (s.meta.containsKey(\"species\"))\n                items.add(I18n.getText(\"species\") + \": \" + s.meta.get(\"species\"));\n            // format\n            items.add(I18n.getText(\"format\") + \": \" + s.meta.get(\"filetype\"));\n            // indexed, summed\n            if (s.isIndexed())\n                items.add(I18n.getText(\"indexed\"));\n            if (s.isSummed()) {\n                String summedLine = I18n.getText(\"summed\");\n                if (s.elements != null)\n                    summedLine += \" (\" + s.elements.size() + \" \" + I18n.getText(\"elements\") + \")\";\n                items.add(summedLine);\n            }\n        }\n    }\n\n    //\n    // miscellaneous procedures that are better off here than elsewhere\n    //\n    // is this sample oak?  (assumes meta/species is a string, if present)\n    // (FIXME: if it's not a string, it's not oak.)\n    // checks for \"oak\" or \"quercus\".\n    public boolean isOak() {\n        String species = (String) meta.get(\"species\");\n        if (species == null)\n            return false;\n        species = species.toLowerCase();\n        return (species.indexOf(\"oak\") != -1 || species.indexOf(\"quercus\") != -1);\n    }\n\n    // is this sample editable?  no, if it's been indexed or summed.\n    public boolean isEditable() {\n        return (!isIndexed()) && (!isSummed());\n    }\n\n    //\n    // event model\n    //\n    private Vector listeners = new Vector();\n\n    public synchronized void addSampleListener(SampleListener l) {\n        if (!listeners.contains(l))\n            listeners.add(l);\n    }\n\n    public synchronized void removeSampleListener(SampleListener l) {\n        listeners.remove(l);\n    }\n\n    // fire an arbitrary sample event called |method|.  each\n    // fireSampleXYZhappened() method is virtually identical, so their\n    // guts were refactored into here.  this makes adding new events\n    // painless.  (this was taken from a web page -- url?)\n    private void fireSampleEvent(String method) {\n        // alert all listeners\n        Vector l;\n        synchronized (this) {\n            l = (Vector) listeners.clone();\n        }\n        int size = l.size();\n        if (size == 0)\n            return;\n        SampleEvent e = new SampleEvent(this);\n        try {\n            // **\n            Class[] types = new Class[] { SampleEvent.class };\n            Method m = SampleListener.class.getMethod(method, types);\n            Object[] args = new Object[] { e };\n            for (int i = 0; i < size; i++) {\n                SampleListener listener = (SampleListener) l.elementAt(i);\n                // this is like \"listener.method(e)\" (along with the 2 lines\n                // marked ** above)\n                m.invoke(listener, args);\n            }\n        } catch (Exception ex) {\n            // BUG: these exceptions are caught too coursely!\n            // just ignore them all... (?)\n        }\n    }\n\n    // there's an elegant refactoring waiting to be done here, but i'm too wired on caffiene right now to see it.\n    // => see also mapframe's toolbox decorators.\n    public void fireSampleRedated() {\n        fireSampleEvent(\"sampleRedated\");\n    }\n\n    public void fireSampleDataChanged() {\n        fireSampleEvent(\"sampleDataChanged\");\n    }\n\n    public void fireSampleMetadataChanged() {\n        metadataChanged = true;\n        fireSampleEvent(\"sampleMetadataChanged\");\n    }\n\n    public void fireSampleElementsChanged() {\n        fireSampleEvent(\"sampleElementsChanged\");\n    }\n\n    // see if the metadata was changed -- true (loaded samples) unless zero-arg constructor called\n    private boolean metadataChanged = true;\n\n    public boolean wasMetadataChanged() {\n        return metadataChanged;\n    }\n\n    /* FUTURE: */\n    private UndoableEditSupport undoSupport = new UndoableEditSupport();\n\n    public void postEdit(UndoableEdit e) {\n        undoSupport.postEdit(e);\n    }\n}\n",
		"id": "/EvoSuiteBenchmark/35_corina/src/main/java/corina/Sample_1Test.java",
		"test_prompt": "// Sample_1Test.java\n// This file is part of Corina.\n//\n// Corina is free software; you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation; either version 2 of the License, or\n// (at your option) any later version.\n//\n// Corina is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Corina; if not, write to the Free Software\n// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n//\n// Copyright 2001 Ken Harris <kbh7@cornell.edu>\n//\npackage corina;\n\nimport corina.io.Files;\nimport corina.formats.WrongFiletypeException;\nimport corina.graph.Graphable;\nimport corina.ui.I18n;\nimport java.io.File;\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.Reader;\nimport java.io.InputStreamReader;\nimport java.io.IOException;\nimport java.io.FileNotFoundException;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Vector;\nimport java.util.Map;\nimport java.util.HashMap;\nimport java.net.URL;\nimport java.lang.reflect.Method;\nimport java.lang.ref.Reference;\nimport java.lang.ref.WeakReference;\nimport javax.swing.undo.*;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link Sample}.\n* It contains ten unit test cases for the {@link Sample#isIndexed()} method.\n*/\nclass Sample_1Test {"
	},
	{
		"original_code": "// Sample.java\n//\n// This file is part of Corina.\n//\n// Corina is free software; you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation; either version 2 of the License, or\n// (at your option) any later version.\n//\n// Corina is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Corina; if not, write to the Free Software\n// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n//\n// Copyright 2001 Ken Harris <kbh7@cornell.edu>\n//\npackage corina;\n\nimport corina.io.Files;\nimport corina.formats.WrongFiletypeException;\nimport corina.graph.Graphable;\nimport corina.ui.I18n;\nimport java.io.File;\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.Reader;\nimport java.io.InputStreamReader;\nimport java.io.IOException;\nimport java.io.FileNotFoundException;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Vector;\nimport java.util.Map;\nimport java.util.HashMap;\nimport java.net.URL;\nimport java.lang.reflect.Method;\nimport java.lang.ref.Reference;\nimport java.lang.ref.WeakReference;\nimport javax.swing.undo.*;\n\n/**\n *   Class representing a reading of a dendro sample.\n *\n *   <p>Currently, this stores:</p>\n *\n *   <ul>\n *     <li>series: data, count, wj (up/down, in one list)</li>\n *     <li>range</li>\n *     <li>a hashtable for metadata</li>\n *     <li>a list of elements</li>\n *   </ul>\n *\n *   @author Ken Harris &lt;kbh7 <i style=\"color: gray\">at</i> cornell <i style=\"color: gray\">dot</i> edu&gt;\n *   @version $Id: Sample.java,v 1.6 2006/01/04 06:51:55 lucasmo Exp $\n */\n// IDEA: make a samplefactory, so 2 calls to sample(filename) return\n// the same object.  better yet, an editor factory so a second\n// editor(sample) bringstofront the existing editor.\npublic class Sample implements Previewable, Graphable {\n\n    /**\n     *  The value of a missing ring, 2.  Anything less than or equal\n     * \tto this value is considered a MR.\n     */\n    public static final int MR = 2;\n\n    /**\n     * Data, as a List of Integers.\n     */\n    public List data;\n\n    /**\n     * Data range.\n     */\n    public Range range;\n\n    /**\n     *  Sample metadata, as a (String, Object) Map.  The following\n     *         table lists the standard keys, their data types, and valid values:\n     *\n     * <table border=\"1\">\n     *     <tr> <th>Key</th>         <th>Type</th>    <th>Valid values</th> </tr>\n     *     <tr> <td>id</td>          <td>Integer</td> <td></td>             </tr>\n     *     <tr> <td>title</td>       <td>String</td>  <td></td>             </tr>\n     *     <tr> <td>dating</td>      <td>String</td>  <td>A, R</td>         </tr>\n     *     <tr> <td>unmeas_pre</td>  <td>Integer</td> <td></td>             </tr>\n     *     <tr> <td>unmeas_post</td> <td>Integer</td> <td></td>             </tr>\n     *     <tr> <td>filename</td>    <td>String</td>  <td></td>             </tr>\n     *     <tr> <td>comments</td>    <td>String</td>  <td></td>             </tr>\n     *     <tr> <td>type</td>        <td>String</td>  <td>S, H, C</td>      </tr>\n     *     <tr> <td>species</td>     <td>String</td>  <td></td>             </tr>\n     *     <tr> <td>sapwood</td>     <td>Integer</td> <td></td>             </tr>\n     *     <tr> <td>pith</td>        <td>String</td>  <td>+, *, N</td>      </tr>\n     *     <tr> <td>terminal</td>    <td>String</td>  <td>v, vv, B, W</td>  </tr>\n     *     <tr> <td>continuous</td>  <td>String</td>  <td>C, R, N</td>      </tr>\n     *     <tr> <td>quality</td>     <td>String</td>  <td>+, ++</td>        </tr>\n     *     <tr> <td>format</td>      <td>String</td>  <td>R, I</td>         </tr>\n     *     <tr> <td>index_type</td>  <td>Integer</td> <td></td>             </tr>\n     *     <tr> <td>reconciled</td>  <td>String</td>  <td>Y,N</td>          </tr>\n     *     <tr> <td>author</td>      <td>String</td>  <td></td>             </tr>\n     * </table>\n     *\n     * \t<code>data</code>, <code>count</code>, <code>range</code>,\n     * \t<code>wj</code>, and <code>elements</code> aren't stored in\n     * \t<code>meta</code> - they're their own members.\n     *\n     * \t@see corina.formats.Corina\n     */\n    public Map meta;\n\n    // WRITEME: need corresponding setString(), setInteger().\n    // WRITEME: make meta private, eventually.\n    // WRITEME: add lazy-loaders here.\n    // WRITEME: and don't load on construction!\n    // get a string field from this sample.\n    public String getString(String field) {\n        // TODO: load, if needed.\n        Object val = meta.get(field);\n        if (val != null && val instanceof String)\n            return (String) val;\n        return null;\n    }\n\n    // get an int field from this sample.\n    // (would be int, but can't return null then -- use exception?)\n    public Integer getInteger(String field) {\n        // TODO: load, if needed.\n        Object val = meta.get(field);\n        if (val != null && val instanceof Integer)\n            return (Integer) val;\n        return null;\n    }\n\n    // get a list-of-numbers field from this sample.\n    // (what about elements?)\n    public List getList(String field) {\n        // TODO: load, if needed.\n        if (field.equals(\"data\"))\n            return data;\n        else if (field.equals(\"count\"))\n            return count;\n        else if (field.equals(\"incr\"))\n            return incr;\n        else if (field.equals(\"decr\"))\n            return decr;\n        return null;\n    }\n\n    /**\n     * Number of samples in the sum at any given point.\n     */\n    public List count = null;\n\n    // weiserjahre\n    public List incr = null, decr = null;\n\n    // does it have weiserjahre?\n    public boolean hasWeiserjahre() {\n        return (incr != null);\n    }\n\n    /**\n     * Elements (in a List) that were put into this sum.\n     */\n    public List elements = null;\n\n    /**\n     *  Default constructor.  Defaults:\n     * \t<ul>\n     * \t  <li><code>data</code> and <code>count</code> are initialized but empty\n     * \t  <li><code>range</code> is initialized\n     * \t  <li><code>meta</code> is initialized, and:\n     * \t      <ul>\n     * \t        <li>Tag \"title\" is set to \"Untitled\"\n     * \t\t<li>Tag \"author\" is set to the value of system property\n     * \t\t    <code>user.name</code>\n     * \t      </ul>\n     * \t  <li><code>wj</code> is <code>null</code>\n     * \t  <li><code>elements</code> is <code>null</code>\n     * \t</ul>\n     * \t@see #meta\n     */\n    public Sample() {\n        // make defaults: empty\n        data = new ArrayList();\n        range = new Range();\n        meta = new HashMap();\n        // store username, if known\n        if (System.getProperty(\"user.name\") != null)\n            meta.put(\"author\", System.getProperty(\"user.name\"));\n        // initialize empty metadata with defaults?\n        meta.put(\"title\", I18n.getText(\"Untitled\"));\n        // metadata NOT changed\n        metadataChanged = false;\n    }\n\n    /*\n    // TESTING: single-instance samples (and Sample(String) to become private)\n    public static Sample getSample(String filename) throws IOException {\n\t// check map\n\tSample s = null;\n\tif (samples.containsKey(filename)) {\n\t    s = (Sample) ((Reference) samples.get(filename)).get();\n\t    // BUG: what if what's on disk is newer than what's in memory?\n\t    // (if it's ONLY weakly referenced, just update it)\n\t    // (if somebody else is viewing it, better ask the user)\n\t}\n\tif (s == null)\n\t    s = new Sample(filename);\n\tsamples.put(filename, new WeakReference(s));\n\treturn s;\n\t// won't this map keep accumulating nulls?  well, probably not many.\n\t// but shouldn't i try to take them out somehow?\n    }\n    private static Map samples = new HashMap();\n*/\n    /**\n     *  Create a new Sample from a given file on disk.\n     * \t@param filename the name of the file to load\n     * \t@exception FileNotFoundException if the file doesn't exist\n     * \t@exception WrongFiletypeException if the file is not a Sample\n     * \t@exception IOException if there is an I/O error while loading\n     * \tthe file\n     */\n    /*\n    public Sample(String filename) throws FileNotFoundException, WrongFiletypeException, IOException {\n\t// make it like any other Sample\n\tthis();\n\n\t// load the file; this call throws the exceptions\n\tload(filename);\n\n\t// 99%+ of the time you're loading a sample from disk, you\n\t// won't be adding to it, so trim it.\n\ttrimAllToSize();\n    }\n    */\n    /*\n    public Sample(URL url) throws IOException {\n        this();\n\ttry {\n            Class.forName(\"corina.browser.ItrdbURLConnection\");\n\t} catch (ClassNotFoundException cnfe) {\n\t    corina.gui.Bug.bug(cnfe);\n\t}\n        load(new InputStreamReader(url.openStream()));\n        meta.put(\"filename\", url.toString());\n        trimAllToSize();\n    }\n    */\n    private void trimAllToSize() {\n        ((ArrayList) data).trimToSize();\n        if (count != null)\n            ((ArrayList) count).trimToSize();\n        if (hasWeiserjahre()) {\n            ((ArrayList) incr).trimToSize();\n            ((ArrayList) decr).trimToSize();\n        }\n    }\n\n    // copy each part of source to target.  shallow copy, no events, etc.\n    // used only by editor (paste) -- bad interface!\n    public static void copy(Sample source, Sample target) {\n        target.data = source.data;\n        target.range = source.range;\n        target.count = source.count;\n        target.meta = source.meta;\n        target.incr = source.incr;\n        target.decr = source.decr;\n        target.elements = source.elements;\n    }\n\n    /**\n     *  Return true if the sample is indexed, else false.\n     * \t@return true if the sample is indexed\n     */\n    public boolean isIndexed() {\n        String type = (String) meta.get(\"format\");\n        return (type != null && Character.toUpperCase(type.charAt(0)) == 'I');\n    }\n\n    /**\n     *  <p>Return true if the sample is summed, else false.  Here\n     * \t\"summed\" is defined as:</p>\n     * \t<ul>\n     * \t  <li>has a list of elements, or\n     * \t  <li>has count data\n     * \t</ul>\n     * \t@return true if the sample is summed\n     */\n    public boolean isSummed() {\n        return (elements != null || count != null);\n    }\n\n    /**\n     *  Return true if the sample is absolutely dated, else false.\n     * \t@return true if the sample is absolutely dated\n     */\n    public boolean isAbsolute() {\n        String dating = (String) meta.get(\"dating\");\n        return (dating != null && Character.toUpperCase(dating.charAt(0)) == 'A');\n    }\n\n    private boolean modified = false;\n\n    /**\n     *  Return true if the file was modified since last save.\n     * \t@return if the sample has been modified\n     */\n    public boolean isModified() {\n        return modified;\n    }\n\n    /**\n     * Set the modified flag.\n     */\n    public void setModified() {\n        modified = true;\n    }\n\n    /**\n     * Clear the modified flag.\n     */\n    public void clearModified() {\n        modified = false;\n    }\n\n    /**\n     *  Return the data for a graph.\n     * \t@return data to graph, as a List of Integers\n     */\n    public List getData() {\n        return data;\n    }\n\n    /**\n     *  Return the start date for a graph.\n     * \t@return start date of data to graph\n     */\n    public Year getStart() {\n        return range.getStart();\n    }\n\n    /**\n     *  Return the default scale factor for graphing.\n     * \t@return scale factor of 1.0, or 0.1 for indexed files\n     */\n    public float getScale() {\n        return (isIndexed() ? 0.1f : 1.0f);\n    }\n\n    /**\n     *  Return the sample's title.\n     * \t@return the \"title\" tag from meta\n     */\n    public String toString() {\n        String name = meta.get(\"title\") + \" \" + range.toStringWithSpan();\n        if (// not aqua-ish, but how to do it the real way?\n        isModified())\n            name = \"* \" + name;\n        return name;\n    }\n\n    /**\n     *  Count the total number of rings.  If this is a raw sample,\n     * \treturns the length.  If this is a summed sample, returns the\n     * \tsum of the count List.\n     * \t@return the total number of rings in this sample\n     */\n    public int countRings() {\n        // it's not a sum, so the number of rings is just the length\n        // (if (null count) (length data) ...\n        if (count == null)\n            return data.size();\n        // it's a sum, so the number of rings is the sum of the number\n        // of measurements for each year\n        // ... (apply '+ count))\n        int n = 0, size = count.size();\n        for (int i = 0; i < size; i++) n += ((Integer) count.get(i)).intValue();\n        return n;\n    }\n\n    // radius of the sample; only relevant for raw samples (better to\n    // return 0.0 for indexed sample?  throw ex?)\n    public int computeRadius() {\n        // (apply '+ data)\n        int n = data.size();\n        int sum = 0;\n        for (int i = 0; i < n; i++) sum += ((Number) data.get(i)).intValue();\n        return sum;\n    }\n\n    // number of intervals with >3 samples\n    public int count3SampleIntervals() {\n        // (count-if #'(lambda (x) (> x 3)) (sample-count s))\n        if (count == null)\n            return 0;\n        int n = count.size();\n        int three = 0;\n        for (int i = 0; i < n; i++) if (((Integer) count.get(i)).intValue() > 3)\n            three++;\n        return three;\n    }\n\n    // count number of significant (weiserjahre) intervals\n    public int countSignificantIntervals() {\n        if (!hasWeiserjahre())\n            return 0;\n        int sig = 0, n = incr.size();\n        for (int i = 0; i < n; i++) if (Weiserjahre.isSignificant(this, i))\n            sig++;\n        return sig;\n    }\n\n    //\n    // load/save\n    //\n    // create a new sample, from a file on disk\n    public Sample(String filename) throws IOException {\n        // new @-notation\n        if (filename.startsWith(\"@\"))\n            filename = System.getProperty(\"corina.dir.data\", \".\") + filename.substring(1);\n        // (assumes c.d.r ends with file.sep!)\n        Sample s = Files.load(filename);\n        copy(s, this);\n        trimAllToSize();\n    }\n\n    /* Determining if a file is indexed: The 800 Rule\n\n    (This was originally for Tucson files, but now I don't think it\n    applies to them, so it got dumped here.  It might actually be\n    useful here.)\n\n    If a Tucson file is summed, is it indexed?  There doesn't appear\n    to be any way to know for sure.  If it's not summed, and it's\n    processed, then it must be indexing that caused it to be processed.\n    But if it's summed, you know it's processed, but there's no way to\n    tell if it's indexed.\n    \n    So I invented\n\n       /The 800-Rule/: If dataset is known to be processed, but not\n       summed, then it is indexed if the average data value is greater\n       than 800.\n\n    Because indexes are based around 1000 (parts-per-thousand), the\n    average would be near 1000.  Raw data are much lower, like 50-100.\n    This fails if you have a raw dataset with rings larger than 8mm on\n    average (a very big tree), or an indexed dataset where the curve\n    overshoots by more than 25% on average (a very poor index).  It\n    doesn't really matter that this fails <i>sometimes</i>, because\n    without this rule, it would fail <i>always</i>.  So it's a hack,\n    but it's still the right thing to do.\n\n    I've recently learned that there's really no need for the\n    800-rule on Tucson files.  Apparently nobody at Tucson ever thought\n    of summing non-indexed files, so summed implies indexed.  I think.\n    (How do they store indexed files for summing, then?)  Oh well, we\n    had fun, anyway.\n\n    This used to be in Tucson.java, then in TwoColumn.java, but it\n    only looks at the Sample, so it really belongs here.  At least I\n    can put it with the load/save stuff here.\n\n(later) pik says there can be raw summed [tucson] files, and pulls out some\n        old datasets to show me ... that there are raw, indexed, and\n        summed indexed formats for tucson.  but he wants it back in,\n        so we give it to him. */\n    public void guessIndexed() {\n        meta.put(\"format\", computeRadius() / data.size() > 800 ? \"I\" : \"R\");\n    }\n\n    // make sure data/count/wj are the same size as range.span, and\n    // contain all legit Numbers.  turns nulls/non-numbers into 0's.\n    public void verify() {\n        int n = range.span();\n        // what to do if they're the wrong size -- adjust range if the data\n        // are all the same size, but pad with zeros if only one is off?\n        // data: turn nulls/non-numbers into 0\n        for (int i = 0; i < n; i++) {\n            Object o = data.get(i);\n            if (o == null || !(o instanceof Number))\n                data.set(i, new Integer(0));\n        }\n        // TODO: do count, WJ as well\n    }\n\n    /**\n     *       Save this Sample to disk.\n     *\n     *       @param filename the name of the file to save to\n     *       @exception IOException if an I/O error occurs\n     */\n    public void save(String filename) throws IOException {\n        Files.save(this, filename);\n    }\n\n    /**\n     *       Save this Sample to disk to the same filename it had\n     *       previously.\n     *\n     *       @exception IOException if an I/O error occurs\n     */\n    public void save() throws IOException {\n        // BUG!  assumes filename exists in meta map -- what if it doesn't?\n        save((String) meta.get(\"filename\"));\n    }\n\n    public Preview getPreview() {\n        return new SamplePreview(this);\n    }\n\n    private static class SamplePreview extends Preview {\n\n        SamplePreview(Sample s) {\n            title = s.meta.get(\"title\").toString();\n            // range -- toStringWithSpan() does \"(a - b, n=c)\", i want \"a - b (n=c)\"\n            items.add(s.range + \" (n=\" + s.range.span() + \")\");\n            // species\n            if (s.meta.containsKey(\"species\"))\n                items.add(I18n.getText(\"species\") + \": \" + s.meta.get(\"species\"));\n            // format\n            items.add(I18n.getText(\"format\") + \": \" + s.meta.get(\"filetype\"));\n            // indexed, summed\n            if (s.isIndexed())\n                items.add(I18n.getText(\"indexed\"));\n            if (s.isSummed()) {\n                String summedLine = I18n.getText(\"summed\");\n                if (s.elements != null)\n                    summedLine += \" (\" + s.elements.size() + \" \" + I18n.getText(\"elements\") + \")\";\n                items.add(summedLine);\n            }\n        }\n    }\n\n    //\n    // miscellaneous procedures that are better off here than elsewhere\n    //\n    // is this sample oak?  (assumes meta/species is a string, if present)\n    // (FIXME: if it's not a string, it's not oak.)\n    // checks for \"oak\" or \"quercus\".\n    public boolean isOak() {\n        String species = (String) meta.get(\"species\");\n        if (species == null)\n            return false;\n        species = species.toLowerCase();\n        return (species.indexOf(\"oak\") != -1 || species.indexOf(\"quercus\") != -1);\n    }\n\n    // is this sample editable?  no, if it's been indexed or summed.\n    public boolean isEditable() {\n        return (!isIndexed()) && (!isSummed());\n    }\n\n    //\n    // event model\n    //\n    private Vector listeners = new Vector();\n\n    public synchronized void addSampleListener(SampleListener l) {\n        if (!listeners.contains(l))\n            listeners.add(l);\n    }\n\n    public synchronized void removeSampleListener(SampleListener l) {\n        listeners.remove(l);\n    }\n\n    // fire an arbitrary sample event called |method|.  each\n    // fireSampleXYZhappened() method is virtually identical, so their\n    // guts were refactored into here.  this makes adding new events\n    // painless.  (this was taken from a web page -- url?)\n    private void fireSampleEvent(String method) {\n        // alert all listeners\n        Vector l;\n        synchronized (this) {\n            l = (Vector) listeners.clone();\n        }\n        int size = l.size();\n        if (size == 0)\n            return;\n        SampleEvent e = new SampleEvent(this);\n        try {\n            // **\n            Class[] types = new Class[] { SampleEvent.class };\n            Method m = SampleListener.class.getMethod(method, types);\n            Object[] args = new Object[] { e };\n            for (int i = 0; i < size; i++) {\n                SampleListener listener = (SampleListener) l.elementAt(i);\n                // this is like \"listener.method(e)\" (along with the 2 lines\n                // marked ** above)\n                m.invoke(listener, args);\n            }\n        } catch (Exception ex) {\n            // BUG: these exceptions are caught too coursely!\n            // just ignore them all... (?)\n        }\n    }\n\n    // there's an elegant refactoring waiting to be done here, but i'm too wired on caffiene right now to see it.\n    // => see also mapframe's toolbox decorators.\n    public void fireSampleRedated() {\n        fireSampleEvent(\"sampleRedated\");\n    }\n\n    public void fireSampleDataChanged() {\n        fireSampleEvent(\"sampleDataChanged\");\n    }\n\n    public void fireSampleMetadataChanged() {\n        metadataChanged = true;\n        fireSampleEvent(\"sampleMetadataChanged\");\n    }\n\n    public void fireSampleElementsChanged() {\n        fireSampleEvent(\"sampleElementsChanged\");\n    }\n\n    // see if the metadata was changed -- true (loaded samples) unless zero-arg constructor called\n    private boolean metadataChanged = true;\n\n    public boolean wasMetadataChanged() {\n        return metadataChanged;\n    }\n\n    /* FUTURE: */\n    private UndoableEditSupport undoSupport = new UndoableEditSupport();\n\n    public void postEdit(UndoableEdit e) {\n        undoSupport.postEdit(e);\n    }\n}\n",
		"id": "/EvoSuiteBenchmark/35_corina/src/main/java/corina/Sample_2Test.java",
		"test_prompt": "// Sample_2Test.java\n// This file is part of Corina.\n//\n// Corina is free software; you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation; either version 2 of the License, or\n// (at your option) any later version.\n//\n// Corina is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Corina; if not, write to the Free Software\n// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n//\n// Copyright 2001 Ken Harris <kbh7@cornell.edu>\n//\npackage corina;\n\nimport corina.io.Files;\nimport corina.formats.WrongFiletypeException;\nimport corina.graph.Graphable;\nimport corina.ui.I18n;\nimport java.io.File;\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.Reader;\nimport java.io.InputStreamReader;\nimport java.io.IOException;\nimport java.io.FileNotFoundException;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Vector;\nimport java.util.Map;\nimport java.util.HashMap;\nimport java.net.URL;\nimport java.lang.reflect.Method;\nimport java.lang.ref.Reference;\nimport java.lang.ref.WeakReference;\nimport javax.swing.undo.*;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link Sample}.\n* It contains ten unit test cases for the {@link Sample#isSummed()} method.\n*/\nclass Sample_2Test {"
	},
	{
		"original_code": "// Sample.java\n//\n// This file is part of Corina.\n//\n// Corina is free software; you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation; either version 2 of the License, or\n// (at your option) any later version.\n//\n// Corina is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Corina; if not, write to the Free Software\n// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n//\n// Copyright 2001 Ken Harris <kbh7@cornell.edu>\n//\npackage corina;\n\nimport corina.io.Files;\nimport corina.formats.WrongFiletypeException;\nimport corina.graph.Graphable;\nimport corina.ui.I18n;\nimport java.io.File;\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.Reader;\nimport java.io.InputStreamReader;\nimport java.io.IOException;\nimport java.io.FileNotFoundException;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Vector;\nimport java.util.Map;\nimport java.util.HashMap;\nimport java.net.URL;\nimport java.lang.reflect.Method;\nimport java.lang.ref.Reference;\nimport java.lang.ref.WeakReference;\nimport javax.swing.undo.*;\n\n/**\n *   Class representing a reading of a dendro sample.\n *\n *   <p>Currently, this stores:</p>\n *\n *   <ul>\n *     <li>series: data, count, wj (up/down, in one list)</li>\n *     <li>range</li>\n *     <li>a hashtable for metadata</li>\n *     <li>a list of elements</li>\n *   </ul>\n *\n *   @author Ken Harris &lt;kbh7 <i style=\"color: gray\">at</i> cornell <i style=\"color: gray\">dot</i> edu&gt;\n *   @version $Id: Sample.java,v 1.6 2006/01/04 06:51:55 lucasmo Exp $\n */\n// IDEA: make a samplefactory, so 2 calls to sample(filename) return\n// the same object.  better yet, an editor factory so a second\n// editor(sample) bringstofront the existing editor.\npublic class Sample implements Previewable, Graphable {\n\n    /**\n     *  The value of a missing ring, 2.  Anything less than or equal\n     * \tto this value is considered a MR.\n     */\n    public static final int MR = 2;\n\n    /**\n     * Data, as a List of Integers.\n     */\n    public List data;\n\n    /**\n     * Data range.\n     */\n    public Range range;\n\n    /**\n     *  Sample metadata, as a (String, Object) Map.  The following\n     *         table lists the standard keys, their data types, and valid values:\n     *\n     * <table border=\"1\">\n     *     <tr> <th>Key</th>         <th>Type</th>    <th>Valid values</th> </tr>\n     *     <tr> <td>id</td>          <td>Integer</td> <td></td>             </tr>\n     *     <tr> <td>title</td>       <td>String</td>  <td></td>             </tr>\n     *     <tr> <td>dating</td>      <td>String</td>  <td>A, R</td>         </tr>\n     *     <tr> <td>unmeas_pre</td>  <td>Integer</td> <td></td>             </tr>\n     *     <tr> <td>unmeas_post</td> <td>Integer</td> <td></td>             </tr>\n     *     <tr> <td>filename</td>    <td>String</td>  <td></td>             </tr>\n     *     <tr> <td>comments</td>    <td>String</td>  <td></td>             </tr>\n     *     <tr> <td>type</td>        <td>String</td>  <td>S, H, C</td>      </tr>\n     *     <tr> <td>species</td>     <td>String</td>  <td></td>             </tr>\n     *     <tr> <td>sapwood</td>     <td>Integer</td> <td></td>             </tr>\n     *     <tr> <td>pith</td>        <td>String</td>  <td>+, *, N</td>      </tr>\n     *     <tr> <td>terminal</td>    <td>String</td>  <td>v, vv, B, W</td>  </tr>\n     *     <tr> <td>continuous</td>  <td>String</td>  <td>C, R, N</td>      </tr>\n     *     <tr> <td>quality</td>     <td>String</td>  <td>+, ++</td>        </tr>\n     *     <tr> <td>format</td>      <td>String</td>  <td>R, I</td>         </tr>\n     *     <tr> <td>index_type</td>  <td>Integer</td> <td></td>             </tr>\n     *     <tr> <td>reconciled</td>  <td>String</td>  <td>Y,N</td>          </tr>\n     *     <tr> <td>author</td>      <td>String</td>  <td></td>             </tr>\n     * </table>\n     *\n     * \t<code>data</code>, <code>count</code>, <code>range</code>,\n     * \t<code>wj</code>, and <code>elements</code> aren't stored in\n     * \t<code>meta</code> - they're their own members.\n     *\n     * \t@see corina.formats.Corina\n     */\n    public Map meta;\n\n    // WRITEME: need corresponding setString(), setInteger().\n    // WRITEME: make meta private, eventually.\n    // WRITEME: add lazy-loaders here.\n    // WRITEME: and don't load on construction!\n    // get a string field from this sample.\n    public String getString(String field) {\n        // TODO: load, if needed.\n        Object val = meta.get(field);\n        if (val != null && val instanceof String)\n            return (String) val;\n        return null;\n    }\n\n    // get an int field from this sample.\n    // (would be int, but can't return null then -- use exception?)\n    public Integer getInteger(String field) {\n        // TODO: load, if needed.\n        Object val = meta.get(field);\n        if (val != null && val instanceof Integer)\n            return (Integer) val;\n        return null;\n    }\n\n    // get a list-of-numbers field from this sample.\n    // (what about elements?)\n    public List getList(String field) {\n        // TODO: load, if needed.\n        if (field.equals(\"data\"))\n            return data;\n        else if (field.equals(\"count\"))\n            return count;\n        else if (field.equals(\"incr\"))\n            return incr;\n        else if (field.equals(\"decr\"))\n            return decr;\n        return null;\n    }\n\n    /**\n     * Number of samples in the sum at any given point.\n     */\n    public List count = null;\n\n    // weiserjahre\n    public List incr = null, decr = null;\n\n    // does it have weiserjahre?\n    public boolean hasWeiserjahre() {\n        return (incr != null);\n    }\n\n    /**\n     * Elements (in a List) that were put into this sum.\n     */\n    public List elements = null;\n\n    /**\n     *  Default constructor.  Defaults:\n     * \t<ul>\n     * \t  <li><code>data</code> and <code>count</code> are initialized but empty\n     * \t  <li><code>range</code> is initialized\n     * \t  <li><code>meta</code> is initialized, and:\n     * \t      <ul>\n     * \t        <li>Tag \"title\" is set to \"Untitled\"\n     * \t\t<li>Tag \"author\" is set to the value of system property\n     * \t\t    <code>user.name</code>\n     * \t      </ul>\n     * \t  <li><code>wj</code> is <code>null</code>\n     * \t  <li><code>elements</code> is <code>null</code>\n     * \t</ul>\n     * \t@see #meta\n     */\n    public Sample() {\n        // make defaults: empty\n        data = new ArrayList();\n        range = new Range();\n        meta = new HashMap();\n        // store username, if known\n        if (System.getProperty(\"user.name\") != null)\n            meta.put(\"author\", System.getProperty(\"user.name\"));\n        // initialize empty metadata with defaults?\n        meta.put(\"title\", I18n.getText(\"Untitled\"));\n        // metadata NOT changed\n        metadataChanged = false;\n    }\n\n    /*\n    // TESTING: single-instance samples (and Sample(String) to become private)\n    public static Sample getSample(String filename) throws IOException {\n\t// check map\n\tSample s = null;\n\tif (samples.containsKey(filename)) {\n\t    s = (Sample) ((Reference) samples.get(filename)).get();\n\t    // BUG: what if what's on disk is newer than what's in memory?\n\t    // (if it's ONLY weakly referenced, just update it)\n\t    // (if somebody else is viewing it, better ask the user)\n\t}\n\tif (s == null)\n\t    s = new Sample(filename);\n\tsamples.put(filename, new WeakReference(s));\n\treturn s;\n\t// won't this map keep accumulating nulls?  well, probably not many.\n\t// but shouldn't i try to take them out somehow?\n    }\n    private static Map samples = new HashMap();\n*/\n    /**\n     *  Create a new Sample from a given file on disk.\n     * \t@param filename the name of the file to load\n     * \t@exception FileNotFoundException if the file doesn't exist\n     * \t@exception WrongFiletypeException if the file is not a Sample\n     * \t@exception IOException if there is an I/O error while loading\n     * \tthe file\n     */\n    /*\n    public Sample(String filename) throws FileNotFoundException, WrongFiletypeException, IOException {\n\t// make it like any other Sample\n\tthis();\n\n\t// load the file; this call throws the exceptions\n\tload(filename);\n\n\t// 99%+ of the time you're loading a sample from disk, you\n\t// won't be adding to it, so trim it.\n\ttrimAllToSize();\n    }\n    */\n    /*\n    public Sample(URL url) throws IOException {\n        this();\n\ttry {\n            Class.forName(\"corina.browser.ItrdbURLConnection\");\n\t} catch (ClassNotFoundException cnfe) {\n\t    corina.gui.Bug.bug(cnfe);\n\t}\n        load(new InputStreamReader(url.openStream()));\n        meta.put(\"filename\", url.toString());\n        trimAllToSize();\n    }\n    */\n    private void trimAllToSize() {\n        ((ArrayList) data).trimToSize();\n        if (count != null)\n            ((ArrayList) count).trimToSize();\n        if (hasWeiserjahre()) {\n            ((ArrayList) incr).trimToSize();\n            ((ArrayList) decr).trimToSize();\n        }\n    }\n\n    // copy each part of source to target.  shallow copy, no events, etc.\n    // used only by editor (paste) -- bad interface!\n    public static void copy(Sample source, Sample target) {\n        target.data = source.data;\n        target.range = source.range;\n        target.count = source.count;\n        target.meta = source.meta;\n        target.incr = source.incr;\n        target.decr = source.decr;\n        target.elements = source.elements;\n    }\n\n    /**\n     *  Return true if the sample is indexed, else false.\n     * \t@return true if the sample is indexed\n     */\n    public boolean isIndexed() {\n        String type = (String) meta.get(\"format\");\n        return (type != null && Character.toUpperCase(type.charAt(0)) == 'I');\n    }\n\n    /**\n     *  <p>Return true if the sample is summed, else false.  Here\n     * \t\"summed\" is defined as:</p>\n     * \t<ul>\n     * \t  <li>has a list of elements, or\n     * \t  <li>has count data\n     * \t</ul>\n     * \t@return true if the sample is summed\n     */\n    public boolean isSummed() {\n        return (elements != null || count != null);\n    }\n\n    /**\n     *  Return true if the sample is absolutely dated, else false.\n     * \t@return true if the sample is absolutely dated\n     */\n    public boolean isAbsolute() {\n        String dating = (String) meta.get(\"dating\");\n        return (dating != null && Character.toUpperCase(dating.charAt(0)) == 'A');\n    }\n\n    private boolean modified = false;\n\n    /**\n     *  Return true if the file was modified since last save.\n     * \t@return if the sample has been modified\n     */\n    public boolean isModified() {\n        return modified;\n    }\n\n    /**\n     * Set the modified flag.\n     */\n    public void setModified() {\n        modified = true;\n    }\n\n    /**\n     * Clear the modified flag.\n     */\n    public void clearModified() {\n        modified = false;\n    }\n\n    /**\n     *  Return the data for a graph.\n     * \t@return data to graph, as a List of Integers\n     */\n    public List getData() {\n        return data;\n    }\n\n    /**\n     *  Return the start date for a graph.\n     * \t@return start date of data to graph\n     */\n    public Year getStart() {\n        return range.getStart();\n    }\n\n    /**\n     *  Return the default scale factor for graphing.\n     * \t@return scale factor of 1.0, or 0.1 for indexed files\n     */\n    public float getScale() {\n        return (isIndexed() ? 0.1f : 1.0f);\n    }\n\n    /**\n     *  Return the sample's title.\n     * \t@return the \"title\" tag from meta\n     */\n    public String toString() {\n        String name = meta.get(\"title\") + \" \" + range.toStringWithSpan();\n        if (// not aqua-ish, but how to do it the real way?\n        isModified())\n            name = \"* \" + name;\n        return name;\n    }\n\n    /**\n     *  Count the total number of rings.  If this is a raw sample,\n     * \treturns the length.  If this is a summed sample, returns the\n     * \tsum of the count List.\n     * \t@return the total number of rings in this sample\n     */\n    public int countRings() {\n        // it's not a sum, so the number of rings is just the length\n        // (if (null count) (length data) ...\n        if (count == null)\n            return data.size();\n        // it's a sum, so the number of rings is the sum of the number\n        // of measurements for each year\n        // ... (apply '+ count))\n        int n = 0, size = count.size();\n        for (int i = 0; i < size; i++) n += ((Integer) count.get(i)).intValue();\n        return n;\n    }\n\n    // radius of the sample; only relevant for raw samples (better to\n    // return 0.0 for indexed sample?  throw ex?)\n    public int computeRadius() {\n        // (apply '+ data)\n        int n = data.size();\n        int sum = 0;\n        for (int i = 0; i < n; i++) sum += ((Number) data.get(i)).intValue();\n        return sum;\n    }\n\n    // number of intervals with >3 samples\n    public int count3SampleIntervals() {\n        // (count-if #'(lambda (x) (> x 3)) (sample-count s))\n        if (count == null)\n            return 0;\n        int n = count.size();\n        int three = 0;\n        for (int i = 0; i < n; i++) if (((Integer) count.get(i)).intValue() > 3)\n            three++;\n        return three;\n    }\n\n    // count number of significant (weiserjahre) intervals\n    public int countSignificantIntervals() {\n        if (!hasWeiserjahre())\n            return 0;\n        int sig = 0, n = incr.size();\n        for (int i = 0; i < n; i++) if (Weiserjahre.isSignificant(this, i))\n            sig++;\n        return sig;\n    }\n\n    //\n    // load/save\n    //\n    // create a new sample, from a file on disk\n    public Sample(String filename) throws IOException {\n        // new @-notation\n        if (filename.startsWith(\"@\"))\n            filename = System.getProperty(\"corina.dir.data\", \".\") + filename.substring(1);\n        // (assumes c.d.r ends with file.sep!)\n        Sample s = Files.load(filename);\n        copy(s, this);\n        trimAllToSize();\n    }\n\n    /* Determining if a file is indexed: The 800 Rule\n\n    (This was originally for Tucson files, but now I don't think it\n    applies to them, so it got dumped here.  It might actually be\n    useful here.)\n\n    If a Tucson file is summed, is it indexed?  There doesn't appear\n    to be any way to know for sure.  If it's not summed, and it's\n    processed, then it must be indexing that caused it to be processed.\n    But if it's summed, you know it's processed, but there's no way to\n    tell if it's indexed.\n    \n    So I invented\n\n       /The 800-Rule/: If dataset is known to be processed, but not\n       summed, then it is indexed if the average data value is greater\n       than 800.\n\n    Because indexes are based around 1000 (parts-per-thousand), the\n    average would be near 1000.  Raw data are much lower, like 50-100.\n    This fails if you have a raw dataset with rings larger than 8mm on\n    average (a very big tree), or an indexed dataset where the curve\n    overshoots by more than 25% on average (a very poor index).  It\n    doesn't really matter that this fails <i>sometimes</i>, because\n    without this rule, it would fail <i>always</i>.  So it's a hack,\n    but it's still the right thing to do.\n\n    I've recently learned that there's really no need for the\n    800-rule on Tucson files.  Apparently nobody at Tucson ever thought\n    of summing non-indexed files, so summed implies indexed.  I think.\n    (How do they store indexed files for summing, then?)  Oh well, we\n    had fun, anyway.\n\n    This used to be in Tucson.java, then in TwoColumn.java, but it\n    only looks at the Sample, so it really belongs here.  At least I\n    can put it with the load/save stuff here.\n\n(later) pik says there can be raw summed [tucson] files, and pulls out some\n        old datasets to show me ... that there are raw, indexed, and\n        summed indexed formats for tucson.  but he wants it back in,\n        so we give it to him. */\n    public void guessIndexed() {\n        meta.put(\"format\", computeRadius() / data.size() > 800 ? \"I\" : \"R\");\n    }\n\n    // make sure data/count/wj are the same size as range.span, and\n    // contain all legit Numbers.  turns nulls/non-numbers into 0's.\n    public void verify() {\n        int n = range.span();\n        // what to do if they're the wrong size -- adjust range if the data\n        // are all the same size, but pad with zeros if only one is off?\n        // data: turn nulls/non-numbers into 0\n        for (int i = 0; i < n; i++) {\n            Object o = data.get(i);\n            if (o == null || !(o instanceof Number))\n                data.set(i, new Integer(0));\n        }\n        // TODO: do count, WJ as well\n    }\n\n    /**\n     *       Save this Sample to disk.\n     *\n     *       @param filename the name of the file to save to\n     *       @exception IOException if an I/O error occurs\n     */\n    public void save(String filename) throws IOException {\n        Files.save(this, filename);\n    }\n\n    /**\n     *       Save this Sample to disk to the same filename it had\n     *       previously.\n     *\n     *       @exception IOException if an I/O error occurs\n     */\n    public void save() throws IOException {\n        // BUG!  assumes filename exists in meta map -- what if it doesn't?\n        save((String) meta.get(\"filename\"));\n    }\n\n    public Preview getPreview() {\n        return new SamplePreview(this);\n    }\n\n    private static class SamplePreview extends Preview {\n\n        SamplePreview(Sample s) {\n            title = s.meta.get(\"title\").toString();\n            // range -- toStringWithSpan() does \"(a - b, n=c)\", i want \"a - b (n=c)\"\n            items.add(s.range + \" (n=\" + s.range.span() + \")\");\n            // species\n            if (s.meta.containsKey(\"species\"))\n                items.add(I18n.getText(\"species\") + \": \" + s.meta.get(\"species\"));\n            // format\n            items.add(I18n.getText(\"format\") + \": \" + s.meta.get(\"filetype\"));\n            // indexed, summed\n            if (s.isIndexed())\n                items.add(I18n.getText(\"indexed\"));\n            if (s.isSummed()) {\n                String summedLine = I18n.getText(\"summed\");\n                if (s.elements != null)\n                    summedLine += \" (\" + s.elements.size() + \" \" + I18n.getText(\"elements\") + \")\";\n                items.add(summedLine);\n            }\n        }\n    }\n\n    //\n    // miscellaneous procedures that are better off here than elsewhere\n    //\n    // is this sample oak?  (assumes meta/species is a string, if present)\n    // (FIXME: if it's not a string, it's not oak.)\n    // checks for \"oak\" or \"quercus\".\n    public boolean isOak() {\n        String species = (String) meta.get(\"species\");\n        if (species == null)\n            return false;\n        species = species.toLowerCase();\n        return (species.indexOf(\"oak\") != -1 || species.indexOf(\"quercus\") != -1);\n    }\n\n    // is this sample editable?  no, if it's been indexed or summed.\n    public boolean isEditable() {\n        return (!isIndexed()) && (!isSummed());\n    }\n\n    //\n    // event model\n    //\n    private Vector listeners = new Vector();\n\n    public synchronized void addSampleListener(SampleListener l) {\n        if (!listeners.contains(l))\n            listeners.add(l);\n    }\n\n    public synchronized void removeSampleListener(SampleListener l) {\n        listeners.remove(l);\n    }\n\n    // fire an arbitrary sample event called |method|.  each\n    // fireSampleXYZhappened() method is virtually identical, so their\n    // guts were refactored into here.  this makes adding new events\n    // painless.  (this was taken from a web page -- url?)\n    private void fireSampleEvent(String method) {\n        // alert all listeners\n        Vector l;\n        synchronized (this) {\n            l = (Vector) listeners.clone();\n        }\n        int size = l.size();\n        if (size == 0)\n            return;\n        SampleEvent e = new SampleEvent(this);\n        try {\n            // **\n            Class[] types = new Class[] { SampleEvent.class };\n            Method m = SampleListener.class.getMethod(method, types);\n            Object[] args = new Object[] { e };\n            for (int i = 0; i < size; i++) {\n                SampleListener listener = (SampleListener) l.elementAt(i);\n                // this is like \"listener.method(e)\" (along with the 2 lines\n                // marked ** above)\n                m.invoke(listener, args);\n            }\n        } catch (Exception ex) {\n            // BUG: these exceptions are caught too coursely!\n            // just ignore them all... (?)\n        }\n    }\n\n    // there's an elegant refactoring waiting to be done here, but i'm too wired on caffiene right now to see it.\n    // => see also mapframe's toolbox decorators.\n    public void fireSampleRedated() {\n        fireSampleEvent(\"sampleRedated\");\n    }\n\n    public void fireSampleDataChanged() {\n        fireSampleEvent(\"sampleDataChanged\");\n    }\n\n    public void fireSampleMetadataChanged() {\n        metadataChanged = true;\n        fireSampleEvent(\"sampleMetadataChanged\");\n    }\n\n    public void fireSampleElementsChanged() {\n        fireSampleEvent(\"sampleElementsChanged\");\n    }\n\n    // see if the metadata was changed -- true (loaded samples) unless zero-arg constructor called\n    private boolean metadataChanged = true;\n\n    public boolean wasMetadataChanged() {\n        return metadataChanged;\n    }\n\n    /* FUTURE: */\n    private UndoableEditSupport undoSupport = new UndoableEditSupport();\n\n    public void postEdit(UndoableEdit e) {\n        undoSupport.postEdit(e);\n    }\n}\n",
		"id": "/EvoSuiteBenchmark/35_corina/src/main/java/corina/Sample_3Test.java",
		"test_prompt": "// Sample_3Test.java\n// This file is part of Corina.\n//\n// Corina is free software; you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation; either version 2 of the License, or\n// (at your option) any later version.\n//\n// Corina is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Corina; if not, write to the Free Software\n// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n//\n// Copyright 2001 Ken Harris <kbh7@cornell.edu>\n//\npackage corina;\n\nimport corina.io.Files;\nimport corina.formats.WrongFiletypeException;\nimport corina.graph.Graphable;\nimport corina.ui.I18n;\nimport java.io.File;\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.Reader;\nimport java.io.InputStreamReader;\nimport java.io.IOException;\nimport java.io.FileNotFoundException;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Vector;\nimport java.util.Map;\nimport java.util.HashMap;\nimport java.net.URL;\nimport java.lang.reflect.Method;\nimport java.lang.ref.Reference;\nimport java.lang.ref.WeakReference;\nimport javax.swing.undo.*;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link Sample}.\n* It contains ten unit test cases for the {@link Sample#isAbsolute()} method.\n*/\nclass Sample_3Test {"
	},
	{
		"original_code": "// Sample.java\n//\n// This file is part of Corina.\n//\n// Corina is free software; you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation; either version 2 of the License, or\n// (at your option) any later version.\n//\n// Corina is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Corina; if not, write to the Free Software\n// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n//\n// Copyright 2001 Ken Harris <kbh7@cornell.edu>\n//\npackage corina;\n\nimport corina.io.Files;\nimport corina.formats.WrongFiletypeException;\nimport corina.graph.Graphable;\nimport corina.ui.I18n;\nimport java.io.File;\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.Reader;\nimport java.io.InputStreamReader;\nimport java.io.IOException;\nimport java.io.FileNotFoundException;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Vector;\nimport java.util.Map;\nimport java.util.HashMap;\nimport java.net.URL;\nimport java.lang.reflect.Method;\nimport java.lang.ref.Reference;\nimport java.lang.ref.WeakReference;\nimport javax.swing.undo.*;\n\n/**\n *   Class representing a reading of a dendro sample.\n *\n *   <p>Currently, this stores:</p>\n *\n *   <ul>\n *     <li>series: data, count, wj (up/down, in one list)</li>\n *     <li>range</li>\n *     <li>a hashtable for metadata</li>\n *     <li>a list of elements</li>\n *   </ul>\n *\n *   @author Ken Harris &lt;kbh7 <i style=\"color: gray\">at</i> cornell <i style=\"color: gray\">dot</i> edu&gt;\n *   @version $Id: Sample.java,v 1.6 2006/01/04 06:51:55 lucasmo Exp $\n */\n// IDEA: make a samplefactory, so 2 calls to sample(filename) return\n// the same object.  better yet, an editor factory so a second\n// editor(sample) bringstofront the existing editor.\npublic class Sample implements Previewable, Graphable {\n\n    /**\n     *  The value of a missing ring, 2.  Anything less than or equal\n     * \tto this value is considered a MR.\n     */\n    public static final int MR = 2;\n\n    /**\n     * Data, as a List of Integers.\n     */\n    public List data;\n\n    /**\n     * Data range.\n     */\n    public Range range;\n\n    /**\n     *  Sample metadata, as a (String, Object) Map.  The following\n     *         table lists the standard keys, their data types, and valid values:\n     *\n     * <table border=\"1\">\n     *     <tr> <th>Key</th>         <th>Type</th>    <th>Valid values</th> </tr>\n     *     <tr> <td>id</td>          <td>Integer</td> <td></td>             </tr>\n     *     <tr> <td>title</td>       <td>String</td>  <td></td>             </tr>\n     *     <tr> <td>dating</td>      <td>String</td>  <td>A, R</td>         </tr>\n     *     <tr> <td>unmeas_pre</td>  <td>Integer</td> <td></td>             </tr>\n     *     <tr> <td>unmeas_post</td> <td>Integer</td> <td></td>             </tr>\n     *     <tr> <td>filename</td>    <td>String</td>  <td></td>             </tr>\n     *     <tr> <td>comments</td>    <td>String</td>  <td></td>             </tr>\n     *     <tr> <td>type</td>        <td>String</td>  <td>S, H, C</td>      </tr>\n     *     <tr> <td>species</td>     <td>String</td>  <td></td>             </tr>\n     *     <tr> <td>sapwood</td>     <td>Integer</td> <td></td>             </tr>\n     *     <tr> <td>pith</td>        <td>String</td>  <td>+, *, N</td>      </tr>\n     *     <tr> <td>terminal</td>    <td>String</td>  <td>v, vv, B, W</td>  </tr>\n     *     <tr> <td>continuous</td>  <td>String</td>  <td>C, R, N</td>      </tr>\n     *     <tr> <td>quality</td>     <td>String</td>  <td>+, ++</td>        </tr>\n     *     <tr> <td>format</td>      <td>String</td>  <td>R, I</td>         </tr>\n     *     <tr> <td>index_type</td>  <td>Integer</td> <td></td>             </tr>\n     *     <tr> <td>reconciled</td>  <td>String</td>  <td>Y,N</td>          </tr>\n     *     <tr> <td>author</td>      <td>String</td>  <td></td>             </tr>\n     * </table>\n     *\n     * \t<code>data</code>, <code>count</code>, <code>range</code>,\n     * \t<code>wj</code>, and <code>elements</code> aren't stored in\n     * \t<code>meta</code> - they're their own members.\n     *\n     * \t@see corina.formats.Corina\n     */\n    public Map meta;\n\n    // WRITEME: need corresponding setString(), setInteger().\n    // WRITEME: make meta private, eventually.\n    // WRITEME: add lazy-loaders here.\n    // WRITEME: and don't load on construction!\n    // get a string field from this sample.\n    public String getString(String field) {\n        // TODO: load, if needed.\n        Object val = meta.get(field);\n        if (val != null && val instanceof String)\n            return (String) val;\n        return null;\n    }\n\n    // get an int field from this sample.\n    // (would be int, but can't return null then -- use exception?)\n    public Integer getInteger(String field) {\n        // TODO: load, if needed.\n        Object val = meta.get(field);\n        if (val != null && val instanceof Integer)\n            return (Integer) val;\n        return null;\n    }\n\n    // get a list-of-numbers field from this sample.\n    // (what about elements?)\n    public List getList(String field) {\n        // TODO: load, if needed.\n        if (field.equals(\"data\"))\n            return data;\n        else if (field.equals(\"count\"))\n            return count;\n        else if (field.equals(\"incr\"))\n            return incr;\n        else if (field.equals(\"decr\"))\n            return decr;\n        return null;\n    }\n\n    /**\n     * Number of samples in the sum at any given point.\n     */\n    public List count = null;\n\n    // weiserjahre\n    public List incr = null, decr = null;\n\n    // does it have weiserjahre?\n    public boolean hasWeiserjahre() {\n        return (incr != null);\n    }\n\n    /**\n     * Elements (in a List) that were put into this sum.\n     */\n    public List elements = null;\n\n    /**\n     *  Default constructor.  Defaults:\n     * \t<ul>\n     * \t  <li><code>data</code> and <code>count</code> are initialized but empty\n     * \t  <li><code>range</code> is initialized\n     * \t  <li><code>meta</code> is initialized, and:\n     * \t      <ul>\n     * \t        <li>Tag \"title\" is set to \"Untitled\"\n     * \t\t<li>Tag \"author\" is set to the value of system property\n     * \t\t    <code>user.name</code>\n     * \t      </ul>\n     * \t  <li><code>wj</code> is <code>null</code>\n     * \t  <li><code>elements</code> is <code>null</code>\n     * \t</ul>\n     * \t@see #meta\n     */\n    public Sample() {\n        // make defaults: empty\n        data = new ArrayList();\n        range = new Range();\n        meta = new HashMap();\n        // store username, if known\n        if (System.getProperty(\"user.name\") != null)\n            meta.put(\"author\", System.getProperty(\"user.name\"));\n        // initialize empty metadata with defaults?\n        meta.put(\"title\", I18n.getText(\"Untitled\"));\n        // metadata NOT changed\n        metadataChanged = false;\n    }\n\n    /*\n    // TESTING: single-instance samples (and Sample(String) to become private)\n    public static Sample getSample(String filename) throws IOException {\n\t// check map\n\tSample s = null;\n\tif (samples.containsKey(filename)) {\n\t    s = (Sample) ((Reference) samples.get(filename)).get();\n\t    // BUG: what if what's on disk is newer than what's in memory?\n\t    // (if it's ONLY weakly referenced, just update it)\n\t    // (if somebody else is viewing it, better ask the user)\n\t}\n\tif (s == null)\n\t    s = new Sample(filename);\n\tsamples.put(filename, new WeakReference(s));\n\treturn s;\n\t// won't this map keep accumulating nulls?  well, probably not many.\n\t// but shouldn't i try to take them out somehow?\n    }\n    private static Map samples = new HashMap();\n*/\n    /**\n     *  Create a new Sample from a given file on disk.\n     * \t@param filename the name of the file to load\n     * \t@exception FileNotFoundException if the file doesn't exist\n     * \t@exception WrongFiletypeException if the file is not a Sample\n     * \t@exception IOException if there is an I/O error while loading\n     * \tthe file\n     */\n    /*\n    public Sample(String filename) throws FileNotFoundException, WrongFiletypeException, IOException {\n\t// make it like any other Sample\n\tthis();\n\n\t// load the file; this call throws the exceptions\n\tload(filename);\n\n\t// 99%+ of the time you're loading a sample from disk, you\n\t// won't be adding to it, so trim it.\n\ttrimAllToSize();\n    }\n    */\n    /*\n    public Sample(URL url) throws IOException {\n        this();\n\ttry {\n            Class.forName(\"corina.browser.ItrdbURLConnection\");\n\t} catch (ClassNotFoundException cnfe) {\n\t    corina.gui.Bug.bug(cnfe);\n\t}\n        load(new InputStreamReader(url.openStream()));\n        meta.put(\"filename\", url.toString());\n        trimAllToSize();\n    }\n    */\n    private void trimAllToSize() {\n        ((ArrayList) data).trimToSize();\n        if (count != null)\n            ((ArrayList) count).trimToSize();\n        if (hasWeiserjahre()) {\n            ((ArrayList) incr).trimToSize();\n            ((ArrayList) decr).trimToSize();\n        }\n    }\n\n    // copy each part of source to target.  shallow copy, no events, etc.\n    // used only by editor (paste) -- bad interface!\n    public static void copy(Sample source, Sample target) {\n        target.data = source.data;\n        target.range = source.range;\n        target.count = source.count;\n        target.meta = source.meta;\n        target.incr = source.incr;\n        target.decr = source.decr;\n        target.elements = source.elements;\n    }\n\n    /**\n     *  Return true if the sample is indexed, else false.\n     * \t@return true if the sample is indexed\n     */\n    public boolean isIndexed() {\n        String type = (String) meta.get(\"format\");\n        return (type != null && Character.toUpperCase(type.charAt(0)) == 'I');\n    }\n\n    /**\n     *  <p>Return true if the sample is summed, else false.  Here\n     * \t\"summed\" is defined as:</p>\n     * \t<ul>\n     * \t  <li>has a list of elements, or\n     * \t  <li>has count data\n     * \t</ul>\n     * \t@return true if the sample is summed\n     */\n    public boolean isSummed() {\n        return (elements != null || count != null);\n    }\n\n    /**\n     *  Return true if the sample is absolutely dated, else false.\n     * \t@return true if the sample is absolutely dated\n     */\n    public boolean isAbsolute() {\n        String dating = (String) meta.get(\"dating\");\n        return (dating != null && Character.toUpperCase(dating.charAt(0)) == 'A');\n    }\n\n    private boolean modified = false;\n\n    /**\n     *  Return true if the file was modified since last save.\n     * \t@return if the sample has been modified\n     */\n    public boolean isModified() {\n        return modified;\n    }\n\n    /**\n     * Set the modified flag.\n     */\n    public void setModified() {\n        modified = true;\n    }\n\n    /**\n     * Clear the modified flag.\n     */\n    public void clearModified() {\n        modified = false;\n    }\n\n    /**\n     *  Return the data for a graph.\n     * \t@return data to graph, as a List of Integers\n     */\n    public List getData() {\n        return data;\n    }\n\n    /**\n     *  Return the start date for a graph.\n     * \t@return start date of data to graph\n     */\n    public Year getStart() {\n        return range.getStart();\n    }\n\n    /**\n     *  Return the default scale factor for graphing.\n     * \t@return scale factor of 1.0, or 0.1 for indexed files\n     */\n    public float getScale() {\n        return (isIndexed() ? 0.1f : 1.0f);\n    }\n\n    /**\n     *  Return the sample's title.\n     * \t@return the \"title\" tag from meta\n     */\n    public String toString() {\n        String name = meta.get(\"title\") + \" \" + range.toStringWithSpan();\n        if (// not aqua-ish, but how to do it the real way?\n        isModified())\n            name = \"* \" + name;\n        return name;\n    }\n\n    /**\n     *  Count the total number of rings.  If this is a raw sample,\n     * \treturns the length.  If this is a summed sample, returns the\n     * \tsum of the count List.\n     * \t@return the total number of rings in this sample\n     */\n    public int countRings() {\n        // it's not a sum, so the number of rings is just the length\n        // (if (null count) (length data) ...\n        if (count == null)\n            return data.size();\n        // it's a sum, so the number of rings is the sum of the number\n        // of measurements for each year\n        // ... (apply '+ count))\n        int n = 0, size = count.size();\n        for (int i = 0; i < size; i++) n += ((Integer) count.get(i)).intValue();\n        return n;\n    }\n\n    // radius of the sample; only relevant for raw samples (better to\n    // return 0.0 for indexed sample?  throw ex?)\n    public int computeRadius() {\n        // (apply '+ data)\n        int n = data.size();\n        int sum = 0;\n        for (int i = 0; i < n; i++) sum += ((Number) data.get(i)).intValue();\n        return sum;\n    }\n\n    // number of intervals with >3 samples\n    public int count3SampleIntervals() {\n        // (count-if #'(lambda (x) (> x 3)) (sample-count s))\n        if (count == null)\n            return 0;\n        int n = count.size();\n        int three = 0;\n        for (int i = 0; i < n; i++) if (((Integer) count.get(i)).intValue() > 3)\n            three++;\n        return three;\n    }\n\n    // count number of significant (weiserjahre) intervals\n    public int countSignificantIntervals() {\n        if (!hasWeiserjahre())\n            return 0;\n        int sig = 0, n = incr.size();\n        for (int i = 0; i < n; i++) if (Weiserjahre.isSignificant(this, i))\n            sig++;\n        return sig;\n    }\n\n    //\n    // load/save\n    //\n    // create a new sample, from a file on disk\n    public Sample(String filename) throws IOException {\n        // new @-notation\n        if (filename.startsWith(\"@\"))\n            filename = System.getProperty(\"corina.dir.data\", \".\") + filename.substring(1);\n        // (assumes c.d.r ends with file.sep!)\n        Sample s = Files.load(filename);\n        copy(s, this);\n        trimAllToSize();\n    }\n\n    /* Determining if a file is indexed: The 800 Rule\n\n    (This was originally for Tucson files, but now I don't think it\n    applies to them, so it got dumped here.  It might actually be\n    useful here.)\n\n    If a Tucson file is summed, is it indexed?  There doesn't appear\n    to be any way to know for sure.  If it's not summed, and it's\n    processed, then it must be indexing that caused it to be processed.\n    But if it's summed, you know it's processed, but there's no way to\n    tell if it's indexed.\n    \n    So I invented\n\n       /The 800-Rule/: If dataset is known to be processed, but not\n       summed, then it is indexed if the average data value is greater\n       than 800.\n\n    Because indexes are based around 1000 (parts-per-thousand), the\n    average would be near 1000.  Raw data are much lower, like 50-100.\n    This fails if you have a raw dataset with rings larger than 8mm on\n    average (a very big tree), or an indexed dataset where the curve\n    overshoots by more than 25% on average (a very poor index).  It\n    doesn't really matter that this fails <i>sometimes</i>, because\n    without this rule, it would fail <i>always</i>.  So it's a hack,\n    but it's still the right thing to do.\n\n    I've recently learned that there's really no need for the\n    800-rule on Tucson files.  Apparently nobody at Tucson ever thought\n    of summing non-indexed files, so summed implies indexed.  I think.\n    (How do they store indexed files for summing, then?)  Oh well, we\n    had fun, anyway.\n\n    This used to be in Tucson.java, then in TwoColumn.java, but it\n    only looks at the Sample, so it really belongs here.  At least I\n    can put it with the load/save stuff here.\n\n(later) pik says there can be raw summed [tucson] files, and pulls out some\n        old datasets to show me ... that there are raw, indexed, and\n        summed indexed formats for tucson.  but he wants it back in,\n        so we give it to him. */\n    public void guessIndexed() {\n        meta.put(\"format\", computeRadius() / data.size() > 800 ? \"I\" : \"R\");\n    }\n\n    // make sure data/count/wj are the same size as range.span, and\n    // contain all legit Numbers.  turns nulls/non-numbers into 0's.\n    public void verify() {\n        int n = range.span();\n        // what to do if they're the wrong size -- adjust range if the data\n        // are all the same size, but pad with zeros if only one is off?\n        // data: turn nulls/non-numbers into 0\n        for (int i = 0; i < n; i++) {\n            Object o = data.get(i);\n            if (o == null || !(o instanceof Number))\n                data.set(i, new Integer(0));\n        }\n        // TODO: do count, WJ as well\n    }\n\n    /**\n     *       Save this Sample to disk.\n     *\n     *       @param filename the name of the file to save to\n     *       @exception IOException if an I/O error occurs\n     */\n    public void save(String filename) throws IOException {\n        Files.save(this, filename);\n    }\n\n    /**\n     *       Save this Sample to disk to the same filename it had\n     *       previously.\n     *\n     *       @exception IOException if an I/O error occurs\n     */\n    public void save() throws IOException {\n        // BUG!  assumes filename exists in meta map -- what if it doesn't?\n        save((String) meta.get(\"filename\"));\n    }\n\n    public Preview getPreview() {\n        return new SamplePreview(this);\n    }\n\n    private static class SamplePreview extends Preview {\n\n        SamplePreview(Sample s) {\n            title = s.meta.get(\"title\").toString();\n            // range -- toStringWithSpan() does \"(a - b, n=c)\", i want \"a - b (n=c)\"\n            items.add(s.range + \" (n=\" + s.range.span() + \")\");\n            // species\n            if (s.meta.containsKey(\"species\"))\n                items.add(I18n.getText(\"species\") + \": \" + s.meta.get(\"species\"));\n            // format\n            items.add(I18n.getText(\"format\") + \": \" + s.meta.get(\"filetype\"));\n            // indexed, summed\n            if (s.isIndexed())\n                items.add(I18n.getText(\"indexed\"));\n            if (s.isSummed()) {\n                String summedLine = I18n.getText(\"summed\");\n                if (s.elements != null)\n                    summedLine += \" (\" + s.elements.size() + \" \" + I18n.getText(\"elements\") + \")\";\n                items.add(summedLine);\n            }\n        }\n    }\n\n    //\n    // miscellaneous procedures that are better off here than elsewhere\n    //\n    // is this sample oak?  (assumes meta/species is a string, if present)\n    // (FIXME: if it's not a string, it's not oak.)\n    // checks for \"oak\" or \"quercus\".\n    public boolean isOak() {\n        String species = (String) meta.get(\"species\");\n        if (species == null)\n            return false;\n        species = species.toLowerCase();\n        return (species.indexOf(\"oak\") != -1 || species.indexOf(\"quercus\") != -1);\n    }\n\n    // is this sample editable?  no, if it's been indexed or summed.\n    public boolean isEditable() {\n        return (!isIndexed()) && (!isSummed());\n    }\n\n    //\n    // event model\n    //\n    private Vector listeners = new Vector();\n\n    public synchronized void addSampleListener(SampleListener l) {\n        if (!listeners.contains(l))\n            listeners.add(l);\n    }\n\n    public synchronized void removeSampleListener(SampleListener l) {\n        listeners.remove(l);\n    }\n\n    // fire an arbitrary sample event called |method|.  each\n    // fireSampleXYZhappened() method is virtually identical, so their\n    // guts were refactored into here.  this makes adding new events\n    // painless.  (this was taken from a web page -- url?)\n    private void fireSampleEvent(String method) {\n        // alert all listeners\n        Vector l;\n        synchronized (this) {\n            l = (Vector) listeners.clone();\n        }\n        int size = l.size();\n        if (size == 0)\n            return;\n        SampleEvent e = new SampleEvent(this);\n        try {\n            // **\n            Class[] types = new Class[] { SampleEvent.class };\n            Method m = SampleListener.class.getMethod(method, types);\n            Object[] args = new Object[] { e };\n            for (int i = 0; i < size; i++) {\n                SampleListener listener = (SampleListener) l.elementAt(i);\n                // this is like \"listener.method(e)\" (along with the 2 lines\n                // marked ** above)\n                m.invoke(listener, args);\n            }\n        } catch (Exception ex) {\n            // BUG: these exceptions are caught too coursely!\n            // just ignore them all... (?)\n        }\n    }\n\n    // there's an elegant refactoring waiting to be done here, but i'm too wired on caffiene right now to see it.\n    // => see also mapframe's toolbox decorators.\n    public void fireSampleRedated() {\n        fireSampleEvent(\"sampleRedated\");\n    }\n\n    public void fireSampleDataChanged() {\n        fireSampleEvent(\"sampleDataChanged\");\n    }\n\n    public void fireSampleMetadataChanged() {\n        metadataChanged = true;\n        fireSampleEvent(\"sampleMetadataChanged\");\n    }\n\n    public void fireSampleElementsChanged() {\n        fireSampleEvent(\"sampleElementsChanged\");\n    }\n\n    // see if the metadata was changed -- true (loaded samples) unless zero-arg constructor called\n    private boolean metadataChanged = true;\n\n    public boolean wasMetadataChanged() {\n        return metadataChanged;\n    }\n\n    /* FUTURE: */\n    private UndoableEditSupport undoSupport = new UndoableEditSupport();\n\n    public void postEdit(UndoableEdit e) {\n        undoSupport.postEdit(e);\n    }\n}\n",
		"id": "/EvoSuiteBenchmark/35_corina/src/main/java/corina/Sample_4Test.java",
		"test_prompt": "// Sample_4Test.java\n// This file is part of Corina.\n//\n// Corina is free software; you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation; either version 2 of the License, or\n// (at your option) any later version.\n//\n// Corina is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Corina; if not, write to the Free Software\n// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n//\n// Copyright 2001 Ken Harris <kbh7@cornell.edu>\n//\npackage corina;\n\nimport corina.io.Files;\nimport corina.formats.WrongFiletypeException;\nimport corina.graph.Graphable;\nimport corina.ui.I18n;\nimport java.io.File;\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.Reader;\nimport java.io.InputStreamReader;\nimport java.io.IOException;\nimport java.io.FileNotFoundException;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Vector;\nimport java.util.Map;\nimport java.util.HashMap;\nimport java.net.URL;\nimport java.lang.reflect.Method;\nimport java.lang.ref.Reference;\nimport java.lang.ref.WeakReference;\nimport javax.swing.undo.*;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link Sample}.\n* It contains ten unit test cases for the {@link Sample#isModified()} method.\n*/\nclass Sample_4Test {"
	},
	{
		"original_code": "// Sample.java\n//\n// This file is part of Corina.\n//\n// Corina is free software; you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation; either version 2 of the License, or\n// (at your option) any later version.\n//\n// Corina is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Corina; if not, write to the Free Software\n// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n//\n// Copyright 2001 Ken Harris <kbh7@cornell.edu>\n//\npackage corina;\n\nimport corina.io.Files;\nimport corina.formats.WrongFiletypeException;\nimport corina.graph.Graphable;\nimport corina.ui.I18n;\nimport java.io.File;\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.Reader;\nimport java.io.InputStreamReader;\nimport java.io.IOException;\nimport java.io.FileNotFoundException;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Vector;\nimport java.util.Map;\nimport java.util.HashMap;\nimport java.net.URL;\nimport java.lang.reflect.Method;\nimport java.lang.ref.Reference;\nimport java.lang.ref.WeakReference;\nimport javax.swing.undo.*;\n\n/**\n *   Class representing a reading of a dendro sample.\n *\n *   <p>Currently, this stores:</p>\n *\n *   <ul>\n *     <li>series: data, count, wj (up/down, in one list)</li>\n *     <li>range</li>\n *     <li>a hashtable for metadata</li>\n *     <li>a list of elements</li>\n *   </ul>\n *\n *   @author Ken Harris &lt;kbh7 <i style=\"color: gray\">at</i> cornell <i style=\"color: gray\">dot</i> edu&gt;\n *   @version $Id: Sample.java,v 1.6 2006/01/04 06:51:55 lucasmo Exp $\n */\n// IDEA: make a samplefactory, so 2 calls to sample(filename) return\n// the same object.  better yet, an editor factory so a second\n// editor(sample) bringstofront the existing editor.\npublic class Sample implements Previewable, Graphable {\n\n    /**\n     *  The value of a missing ring, 2.  Anything less than or equal\n     * \tto this value is considered a MR.\n     */\n    public static final int MR = 2;\n\n    /**\n     * Data, as a List of Integers.\n     */\n    public List data;\n\n    /**\n     * Data range.\n     */\n    public Range range;\n\n    /**\n     *  Sample metadata, as a (String, Object) Map.  The following\n     *         table lists the standard keys, their data types, and valid values:\n     *\n     * <table border=\"1\">\n     *     <tr> <th>Key</th>         <th>Type</th>    <th>Valid values</th> </tr>\n     *     <tr> <td>id</td>          <td>Integer</td> <td></td>             </tr>\n     *     <tr> <td>title</td>       <td>String</td>  <td></td>             </tr>\n     *     <tr> <td>dating</td>      <td>String</td>  <td>A, R</td>         </tr>\n     *     <tr> <td>unmeas_pre</td>  <td>Integer</td> <td></td>             </tr>\n     *     <tr> <td>unmeas_post</td> <td>Integer</td> <td></td>             </tr>\n     *     <tr> <td>filename</td>    <td>String</td>  <td></td>             </tr>\n     *     <tr> <td>comments</td>    <td>String</td>  <td></td>             </tr>\n     *     <tr> <td>type</td>        <td>String</td>  <td>S, H, C</td>      </tr>\n     *     <tr> <td>species</td>     <td>String</td>  <td></td>             </tr>\n     *     <tr> <td>sapwood</td>     <td>Integer</td> <td></td>             </tr>\n     *     <tr> <td>pith</td>        <td>String</td>  <td>+, *, N</td>      </tr>\n     *     <tr> <td>terminal</td>    <td>String</td>  <td>v, vv, B, W</td>  </tr>\n     *     <tr> <td>continuous</td>  <td>String</td>  <td>C, R, N</td>      </tr>\n     *     <tr> <td>quality</td>     <td>String</td>  <td>+, ++</td>        </tr>\n     *     <tr> <td>format</td>      <td>String</td>  <td>R, I</td>         </tr>\n     *     <tr> <td>index_type</td>  <td>Integer</td> <td></td>             </tr>\n     *     <tr> <td>reconciled</td>  <td>String</td>  <td>Y,N</td>          </tr>\n     *     <tr> <td>author</td>      <td>String</td>  <td></td>             </tr>\n     * </table>\n     *\n     * \t<code>data</code>, <code>count</code>, <code>range</code>,\n     * \t<code>wj</code>, and <code>elements</code> aren't stored in\n     * \t<code>meta</code> - they're their own members.\n     *\n     * \t@see corina.formats.Corina\n     */\n    public Map meta;\n\n    // WRITEME: need corresponding setString(), setInteger().\n    // WRITEME: make meta private, eventually.\n    // WRITEME: add lazy-loaders here.\n    // WRITEME: and don't load on construction!\n    // get a string field from this sample.\n    public String getString(String field) {\n        // TODO: load, if needed.\n        Object val = meta.get(field);\n        if (val != null && val instanceof String)\n            return (String) val;\n        return null;\n    }\n\n    // get an int field from this sample.\n    // (would be int, but can't return null then -- use exception?)\n    public Integer getInteger(String field) {\n        // TODO: load, if needed.\n        Object val = meta.get(field);\n        if (val != null && val instanceof Integer)\n            return (Integer) val;\n        return null;\n    }\n\n    // get a list-of-numbers field from this sample.\n    // (what about elements?)\n    public List getList(String field) {\n        // TODO: load, if needed.\n        if (field.equals(\"data\"))\n            return data;\n        else if (field.equals(\"count\"))\n            return count;\n        else if (field.equals(\"incr\"))\n            return incr;\n        else if (field.equals(\"decr\"))\n            return decr;\n        return null;\n    }\n\n    /**\n     * Number of samples in the sum at any given point.\n     */\n    public List count = null;\n\n    // weiserjahre\n    public List incr = null, decr = null;\n\n    // does it have weiserjahre?\n    public boolean hasWeiserjahre() {\n        return (incr != null);\n    }\n\n    /**\n     * Elements (in a List) that were put into this sum.\n     */\n    public List elements = null;\n\n    /**\n     *  Default constructor.  Defaults:\n     * \t<ul>\n     * \t  <li><code>data</code> and <code>count</code> are initialized but empty\n     * \t  <li><code>range</code> is initialized\n     * \t  <li><code>meta</code> is initialized, and:\n     * \t      <ul>\n     * \t        <li>Tag \"title\" is set to \"Untitled\"\n     * \t\t<li>Tag \"author\" is set to the value of system property\n     * \t\t    <code>user.name</code>\n     * \t      </ul>\n     * \t  <li><code>wj</code> is <code>null</code>\n     * \t  <li><code>elements</code> is <code>null</code>\n     * \t</ul>\n     * \t@see #meta\n     */\n    public Sample() {\n        // make defaults: empty\n        data = new ArrayList();\n        range = new Range();\n        meta = new HashMap();\n        // store username, if known\n        if (System.getProperty(\"user.name\") != null)\n            meta.put(\"author\", System.getProperty(\"user.name\"));\n        // initialize empty metadata with defaults?\n        meta.put(\"title\", I18n.getText(\"Untitled\"));\n        // metadata NOT changed\n        metadataChanged = false;\n    }\n\n    /*\n    // TESTING: single-instance samples (and Sample(String) to become private)\n    public static Sample getSample(String filename) throws IOException {\n\t// check map\n\tSample s = null;\n\tif (samples.containsKey(filename)) {\n\t    s = (Sample) ((Reference) samples.get(filename)).get();\n\t    // BUG: what if what's on disk is newer than what's in memory?\n\t    // (if it's ONLY weakly referenced, just update it)\n\t    // (if somebody else is viewing it, better ask the user)\n\t}\n\tif (s == null)\n\t    s = new Sample(filename);\n\tsamples.put(filename, new WeakReference(s));\n\treturn s;\n\t// won't this map keep accumulating nulls?  well, probably not many.\n\t// but shouldn't i try to take them out somehow?\n    }\n    private static Map samples = new HashMap();\n*/\n    /**\n     *  Create a new Sample from a given file on disk.\n     * \t@param filename the name of the file to load\n     * \t@exception FileNotFoundException if the file doesn't exist\n     * \t@exception WrongFiletypeException if the file is not a Sample\n     * \t@exception IOException if there is an I/O error while loading\n     * \tthe file\n     */\n    /*\n    public Sample(String filename) throws FileNotFoundException, WrongFiletypeException, IOException {\n\t// make it like any other Sample\n\tthis();\n\n\t// load the file; this call throws the exceptions\n\tload(filename);\n\n\t// 99%+ of the time you're loading a sample from disk, you\n\t// won't be adding to it, so trim it.\n\ttrimAllToSize();\n    }\n    */\n    /*\n    public Sample(URL url) throws IOException {\n        this();\n\ttry {\n            Class.forName(\"corina.browser.ItrdbURLConnection\");\n\t} catch (ClassNotFoundException cnfe) {\n\t    corina.gui.Bug.bug(cnfe);\n\t}\n        load(new InputStreamReader(url.openStream()));\n        meta.put(\"filename\", url.toString());\n        trimAllToSize();\n    }\n    */\n    private void trimAllToSize() {\n        ((ArrayList) data).trimToSize();\n        if (count != null)\n            ((ArrayList) count).trimToSize();\n        if (hasWeiserjahre()) {\n            ((ArrayList) incr).trimToSize();\n            ((ArrayList) decr).trimToSize();\n        }\n    }\n\n    // copy each part of source to target.  shallow copy, no events, etc.\n    // used only by editor (paste) -- bad interface!\n    public static void copy(Sample source, Sample target) {\n        target.data = source.data;\n        target.range = source.range;\n        target.count = source.count;\n        target.meta = source.meta;\n        target.incr = source.incr;\n        target.decr = source.decr;\n        target.elements = source.elements;\n    }\n\n    /**\n     *  Return true if the sample is indexed, else false.\n     * \t@return true if the sample is indexed\n     */\n    public boolean isIndexed() {\n        String type = (String) meta.get(\"format\");\n        return (type != null && Character.toUpperCase(type.charAt(0)) == 'I');\n    }\n\n    /**\n     *  <p>Return true if the sample is summed, else false.  Here\n     * \t\"summed\" is defined as:</p>\n     * \t<ul>\n     * \t  <li>has a list of elements, or\n     * \t  <li>has count data\n     * \t</ul>\n     * \t@return true if the sample is summed\n     */\n    public boolean isSummed() {\n        return (elements != null || count != null);\n    }\n\n    /**\n     *  Return true if the sample is absolutely dated, else false.\n     * \t@return true if the sample is absolutely dated\n     */\n    public boolean isAbsolute() {\n        String dating = (String) meta.get(\"dating\");\n        return (dating != null && Character.toUpperCase(dating.charAt(0)) == 'A');\n    }\n\n    private boolean modified = false;\n\n    /**\n     *  Return true if the file was modified since last save.\n     * \t@return if the sample has been modified\n     */\n    public boolean isModified() {\n        return modified;\n    }\n\n    /**\n     * Set the modified flag.\n     */\n    public void setModified() {\n        modified = true;\n    }\n\n    /**\n     * Clear the modified flag.\n     */\n    public void clearModified() {\n        modified = false;\n    }\n\n    /**\n     *  Return the data for a graph.\n     * \t@return data to graph, as a List of Integers\n     */\n    public List getData() {\n        return data;\n    }\n\n    /**\n     *  Return the start date for a graph.\n     * \t@return start date of data to graph\n     */\n    public Year getStart() {\n        return range.getStart();\n    }\n\n    /**\n     *  Return the default scale factor for graphing.\n     * \t@return scale factor of 1.0, or 0.1 for indexed files\n     */\n    public float getScale() {\n        return (isIndexed() ? 0.1f : 1.0f);\n    }\n\n    /**\n     *  Return the sample's title.\n     * \t@return the \"title\" tag from meta\n     */\n    public String toString() {\n        String name = meta.get(\"title\") + \" \" + range.toStringWithSpan();\n        if (// not aqua-ish, but how to do it the real way?\n        isModified())\n            name = \"* \" + name;\n        return name;\n    }\n\n    /**\n     *  Count the total number of rings.  If this is a raw sample,\n     * \treturns the length.  If this is a summed sample, returns the\n     * \tsum of the count List.\n     * \t@return the total number of rings in this sample\n     */\n    public int countRings() {\n        // it's not a sum, so the number of rings is just the length\n        // (if (null count) (length data) ...\n        if (count == null)\n            return data.size();\n        // it's a sum, so the number of rings is the sum of the number\n        // of measurements for each year\n        // ... (apply '+ count))\n        int n = 0, size = count.size();\n        for (int i = 0; i < size; i++) n += ((Integer) count.get(i)).intValue();\n        return n;\n    }\n\n    // radius of the sample; only relevant for raw samples (better to\n    // return 0.0 for indexed sample?  throw ex?)\n    public int computeRadius() {\n        // (apply '+ data)\n        int n = data.size();\n        int sum = 0;\n        for (int i = 0; i < n; i++) sum += ((Number) data.get(i)).intValue();\n        return sum;\n    }\n\n    // number of intervals with >3 samples\n    public int count3SampleIntervals() {\n        // (count-if #'(lambda (x) (> x 3)) (sample-count s))\n        if (count == null)\n            return 0;\n        int n = count.size();\n        int three = 0;\n        for (int i = 0; i < n; i++) if (((Integer) count.get(i)).intValue() > 3)\n            three++;\n        return three;\n    }\n\n    // count number of significant (weiserjahre) intervals\n    public int countSignificantIntervals() {\n        if (!hasWeiserjahre())\n            return 0;\n        int sig = 0, n = incr.size();\n        for (int i = 0; i < n; i++) if (Weiserjahre.isSignificant(this, i))\n            sig++;\n        return sig;\n    }\n\n    //\n    // load/save\n    //\n    // create a new sample, from a file on disk\n    public Sample(String filename) throws IOException {\n        // new @-notation\n        if (filename.startsWith(\"@\"))\n            filename = System.getProperty(\"corina.dir.data\", \".\") + filename.substring(1);\n        // (assumes c.d.r ends with file.sep!)\n        Sample s = Files.load(filename);\n        copy(s, this);\n        trimAllToSize();\n    }\n\n    /* Determining if a file is indexed: The 800 Rule\n\n    (This was originally for Tucson files, but now I don't think it\n    applies to them, so it got dumped here.  It might actually be\n    useful here.)\n\n    If a Tucson file is summed, is it indexed?  There doesn't appear\n    to be any way to know for sure.  If it's not summed, and it's\n    processed, then it must be indexing that caused it to be processed.\n    But if it's summed, you know it's processed, but there's no way to\n    tell if it's indexed.\n    \n    So I invented\n\n       /The 800-Rule/: If dataset is known to be processed, but not\n       summed, then it is indexed if the average data value is greater\n       than 800.\n\n    Because indexes are based around 1000 (parts-per-thousand), the\n    average would be near 1000.  Raw data are much lower, like 50-100.\n    This fails if you have a raw dataset with rings larger than 8mm on\n    average (a very big tree), or an indexed dataset where the curve\n    overshoots by more than 25% on average (a very poor index).  It\n    doesn't really matter that this fails <i>sometimes</i>, because\n    without this rule, it would fail <i>always</i>.  So it's a hack,\n    but it's still the right thing to do.\n\n    I've recently learned that there's really no need for the\n    800-rule on Tucson files.  Apparently nobody at Tucson ever thought\n    of summing non-indexed files, so summed implies indexed.  I think.\n    (How do they store indexed files for summing, then?)  Oh well, we\n    had fun, anyway.\n\n    This used to be in Tucson.java, then in TwoColumn.java, but it\n    only looks at the Sample, so it really belongs here.  At least I\n    can put it with the load/save stuff here.\n\n(later) pik says there can be raw summed [tucson] files, and pulls out some\n        old datasets to show me ... that there are raw, indexed, and\n        summed indexed formats for tucson.  but he wants it back in,\n        so we give it to him. */\n    public void guessIndexed() {\n        meta.put(\"format\", computeRadius() / data.size() > 800 ? \"I\" : \"R\");\n    }\n\n    // make sure data/count/wj are the same size as range.span, and\n    // contain all legit Numbers.  turns nulls/non-numbers into 0's.\n    public void verify() {\n        int n = range.span();\n        // what to do if they're the wrong size -- adjust range if the data\n        // are all the same size, but pad with zeros if only one is off?\n        // data: turn nulls/non-numbers into 0\n        for (int i = 0; i < n; i++) {\n            Object o = data.get(i);\n            if (o == null || !(o instanceof Number))\n                data.set(i, new Integer(0));\n        }\n        // TODO: do count, WJ as well\n    }\n\n    /**\n     *       Save this Sample to disk.\n     *\n     *       @param filename the name of the file to save to\n     *       @exception IOException if an I/O error occurs\n     */\n    public void save(String filename) throws IOException {\n        Files.save(this, filename);\n    }\n\n    /**\n     *       Save this Sample to disk to the same filename it had\n     *       previously.\n     *\n     *       @exception IOException if an I/O error occurs\n     */\n    public void save() throws IOException {\n        // BUG!  assumes filename exists in meta map -- what if it doesn't?\n        save((String) meta.get(\"filename\"));\n    }\n\n    public Preview getPreview() {\n        return new SamplePreview(this);\n    }\n\n    private static class SamplePreview extends Preview {\n\n        SamplePreview(Sample s) {\n            title = s.meta.get(\"title\").toString();\n            // range -- toStringWithSpan() does \"(a - b, n=c)\", i want \"a - b (n=c)\"\n            items.add(s.range + \" (n=\" + s.range.span() + \")\");\n            // species\n            if (s.meta.containsKey(\"species\"))\n                items.add(I18n.getText(\"species\") + \": \" + s.meta.get(\"species\"));\n            // format\n            items.add(I18n.getText(\"format\") + \": \" + s.meta.get(\"filetype\"));\n            // indexed, summed\n            if (s.isIndexed())\n                items.add(I18n.getText(\"indexed\"));\n            if (s.isSummed()) {\n                String summedLine = I18n.getText(\"summed\");\n                if (s.elements != null)\n                    summedLine += \" (\" + s.elements.size() + \" \" + I18n.getText(\"elements\") + \")\";\n                items.add(summedLine);\n            }\n        }\n    }\n\n    //\n    // miscellaneous procedures that are better off here than elsewhere\n    //\n    // is this sample oak?  (assumes meta/species is a string, if present)\n    // (FIXME: if it's not a string, it's not oak.)\n    // checks for \"oak\" or \"quercus\".\n    public boolean isOak() {\n        String species = (String) meta.get(\"species\");\n        if (species == null)\n            return false;\n        species = species.toLowerCase();\n        return (species.indexOf(\"oak\") != -1 || species.indexOf(\"quercus\") != -1);\n    }\n\n    // is this sample editable?  no, if it's been indexed or summed.\n    public boolean isEditable() {\n        return (!isIndexed()) && (!isSummed());\n    }\n\n    //\n    // event model\n    //\n    private Vector listeners = new Vector();\n\n    public synchronized void addSampleListener(SampleListener l) {\n        if (!listeners.contains(l))\n            listeners.add(l);\n    }\n\n    public synchronized void removeSampleListener(SampleListener l) {\n        listeners.remove(l);\n    }\n\n    // fire an arbitrary sample event called |method|.  each\n    // fireSampleXYZhappened() method is virtually identical, so their\n    // guts were refactored into here.  this makes adding new events\n    // painless.  (this was taken from a web page -- url?)\n    private void fireSampleEvent(String method) {\n        // alert all listeners\n        Vector l;\n        synchronized (this) {\n            l = (Vector) listeners.clone();\n        }\n        int size = l.size();\n        if (size == 0)\n            return;\n        SampleEvent e = new SampleEvent(this);\n        try {\n            // **\n            Class[] types = new Class[] { SampleEvent.class };\n            Method m = SampleListener.class.getMethod(method, types);\n            Object[] args = new Object[] { e };\n            for (int i = 0; i < size; i++) {\n                SampleListener listener = (SampleListener) l.elementAt(i);\n                // this is like \"listener.method(e)\" (along with the 2 lines\n                // marked ** above)\n                m.invoke(listener, args);\n            }\n        } catch (Exception ex) {\n            // BUG: these exceptions are caught too coursely!\n            // just ignore them all... (?)\n        }\n    }\n\n    // there's an elegant refactoring waiting to be done here, but i'm too wired on caffiene right now to see it.\n    // => see also mapframe's toolbox decorators.\n    public void fireSampleRedated() {\n        fireSampleEvent(\"sampleRedated\");\n    }\n\n    public void fireSampleDataChanged() {\n        fireSampleEvent(\"sampleDataChanged\");\n    }\n\n    public void fireSampleMetadataChanged() {\n        metadataChanged = true;\n        fireSampleEvent(\"sampleMetadataChanged\");\n    }\n\n    public void fireSampleElementsChanged() {\n        fireSampleEvent(\"sampleElementsChanged\");\n    }\n\n    // see if the metadata was changed -- true (loaded samples) unless zero-arg constructor called\n    private boolean metadataChanged = true;\n\n    public boolean wasMetadataChanged() {\n        return metadataChanged;\n    }\n\n    /* FUTURE: */\n    private UndoableEditSupport undoSupport = new UndoableEditSupport();\n\n    public void postEdit(UndoableEdit e) {\n        undoSupport.postEdit(e);\n    }\n}\n",
		"id": "/EvoSuiteBenchmark/35_corina/src/main/java/corina/Sample_5Test.java",
		"test_prompt": "// Sample_5Test.java\n// This file is part of Corina.\n//\n// Corina is free software; you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation; either version 2 of the License, or\n// (at your option) any later version.\n//\n// Corina is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Corina; if not, write to the Free Software\n// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n//\n// Copyright 2001 Ken Harris <kbh7@cornell.edu>\n//\npackage corina;\n\nimport corina.io.Files;\nimport corina.formats.WrongFiletypeException;\nimport corina.graph.Graphable;\nimport corina.ui.I18n;\nimport java.io.File;\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.Reader;\nimport java.io.InputStreamReader;\nimport java.io.IOException;\nimport java.io.FileNotFoundException;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Vector;\nimport java.util.Map;\nimport java.util.HashMap;\nimport java.net.URL;\nimport java.lang.reflect.Method;\nimport java.lang.ref.Reference;\nimport java.lang.ref.WeakReference;\nimport javax.swing.undo.*;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link Sample}.\n* It contains ten unit test cases for the {@link Sample#countRings()} method.\n*/\nclass Sample_5Test {"
	},
	{
		"original_code": "// Sample.java\n//\n// This file is part of Corina.\n//\n// Corina is free software; you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation; either version 2 of the License, or\n// (at your option) any later version.\n//\n// Corina is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Corina; if not, write to the Free Software\n// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n//\n// Copyright 2001 Ken Harris <kbh7@cornell.edu>\n//\npackage corina;\n\nimport corina.io.Files;\nimport corina.formats.WrongFiletypeException;\nimport corina.graph.Graphable;\nimport corina.ui.I18n;\nimport java.io.File;\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.Reader;\nimport java.io.InputStreamReader;\nimport java.io.IOException;\nimport java.io.FileNotFoundException;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Vector;\nimport java.util.Map;\nimport java.util.HashMap;\nimport java.net.URL;\nimport java.lang.reflect.Method;\nimport java.lang.ref.Reference;\nimport java.lang.ref.WeakReference;\nimport javax.swing.undo.*;\n\n/**\n *   Class representing a reading of a dendro sample.\n *\n *   <p>Currently, this stores:</p>\n *\n *   <ul>\n *     <li>series: data, count, wj (up/down, in one list)</li>\n *     <li>range</li>\n *     <li>a hashtable for metadata</li>\n *     <li>a list of elements</li>\n *   </ul>\n *\n *   @author Ken Harris &lt;kbh7 <i style=\"color: gray\">at</i> cornell <i style=\"color: gray\">dot</i> edu&gt;\n *   @version $Id: Sample.java,v 1.6 2006/01/04 06:51:55 lucasmo Exp $\n */\n// IDEA: make a samplefactory, so 2 calls to sample(filename) return\n// the same object.  better yet, an editor factory so a second\n// editor(sample) bringstofront the existing editor.\npublic class Sample implements Previewable, Graphable {\n\n    /**\n     *  The value of a missing ring, 2.  Anything less than or equal\n     * \tto this value is considered a MR.\n     */\n    public static final int MR = 2;\n\n    /**\n     * Data, as a List of Integers.\n     */\n    public List data;\n\n    /**\n     * Data range.\n     */\n    public Range range;\n\n    /**\n     *  Sample metadata, as a (String, Object) Map.  The following\n     *         table lists the standard keys, their data types, and valid values:\n     *\n     * <table border=\"1\">\n     *     <tr> <th>Key</th>         <th>Type</th>    <th>Valid values</th> </tr>\n     *     <tr> <td>id</td>          <td>Integer</td> <td></td>             </tr>\n     *     <tr> <td>title</td>       <td>String</td>  <td></td>             </tr>\n     *     <tr> <td>dating</td>      <td>String</td>  <td>A, R</td>         </tr>\n     *     <tr> <td>unmeas_pre</td>  <td>Integer</td> <td></td>             </tr>\n     *     <tr> <td>unmeas_post</td> <td>Integer</td> <td></td>             </tr>\n     *     <tr> <td>filename</td>    <td>String</td>  <td></td>             </tr>\n     *     <tr> <td>comments</td>    <td>String</td>  <td></td>             </tr>\n     *     <tr> <td>type</td>        <td>String</td>  <td>S, H, C</td>      </tr>\n     *     <tr> <td>species</td>     <td>String</td>  <td></td>             </tr>\n     *     <tr> <td>sapwood</td>     <td>Integer</td> <td></td>             </tr>\n     *     <tr> <td>pith</td>        <td>String</td>  <td>+, *, N</td>      </tr>\n     *     <tr> <td>terminal</td>    <td>String</td>  <td>v, vv, B, W</td>  </tr>\n     *     <tr> <td>continuous</td>  <td>String</td>  <td>C, R, N</td>      </tr>\n     *     <tr> <td>quality</td>     <td>String</td>  <td>+, ++</td>        </tr>\n     *     <tr> <td>format</td>      <td>String</td>  <td>R, I</td>         </tr>\n     *     <tr> <td>index_type</td>  <td>Integer</td> <td></td>             </tr>\n     *     <tr> <td>reconciled</td>  <td>String</td>  <td>Y,N</td>          </tr>\n     *     <tr> <td>author</td>      <td>String</td>  <td></td>             </tr>\n     * </table>\n     *\n     * \t<code>data</code>, <code>count</code>, <code>range</code>,\n     * \t<code>wj</code>, and <code>elements</code> aren't stored in\n     * \t<code>meta</code> - they're their own members.\n     *\n     * \t@see corina.formats.Corina\n     */\n    public Map meta;\n\n    // WRITEME: need corresponding setString(), setInteger().\n    // WRITEME: make meta private, eventually.\n    // WRITEME: add lazy-loaders here.\n    // WRITEME: and don't load on construction!\n    // get a string field from this sample.\n    public String getString(String field) {\n        // TODO: load, if needed.\n        Object val = meta.get(field);\n        if (val != null && val instanceof String)\n            return (String) val;\n        return null;\n    }\n\n    // get an int field from this sample.\n    // (would be int, but can't return null then -- use exception?)\n    public Integer getInteger(String field) {\n        // TODO: load, if needed.\n        Object val = meta.get(field);\n        if (val != null && val instanceof Integer)\n            return (Integer) val;\n        return null;\n    }\n\n    // get a list-of-numbers field from this sample.\n    // (what about elements?)\n    public List getList(String field) {\n        // TODO: load, if needed.\n        if (field.equals(\"data\"))\n            return data;\n        else if (field.equals(\"count\"))\n            return count;\n        else if (field.equals(\"incr\"))\n            return incr;\n        else if (field.equals(\"decr\"))\n            return decr;\n        return null;\n    }\n\n    /**\n     * Number of samples in the sum at any given point.\n     */\n    public List count = null;\n\n    // weiserjahre\n    public List incr = null, decr = null;\n\n    // does it have weiserjahre?\n    public boolean hasWeiserjahre() {\n        return (incr != null);\n    }\n\n    /**\n     * Elements (in a List) that were put into this sum.\n     */\n    public List elements = null;\n\n    /**\n     *  Default constructor.  Defaults:\n     * \t<ul>\n     * \t  <li><code>data</code> and <code>count</code> are initialized but empty\n     * \t  <li><code>range</code> is initialized\n     * \t  <li><code>meta</code> is initialized, and:\n     * \t      <ul>\n     * \t        <li>Tag \"title\" is set to \"Untitled\"\n     * \t\t<li>Tag \"author\" is set to the value of system property\n     * \t\t    <code>user.name</code>\n     * \t      </ul>\n     * \t  <li><code>wj</code> is <code>null</code>\n     * \t  <li><code>elements</code> is <code>null</code>\n     * \t</ul>\n     * \t@see #meta\n     */\n    public Sample() {\n        // make defaults: empty\n        data = new ArrayList();\n        range = new Range();\n        meta = new HashMap();\n        // store username, if known\n        if (System.getProperty(\"user.name\") != null)\n            meta.put(\"author\", System.getProperty(\"user.name\"));\n        // initialize empty metadata with defaults?\n        meta.put(\"title\", I18n.getText(\"Untitled\"));\n        // metadata NOT changed\n        metadataChanged = false;\n    }\n\n    /*\n    // TESTING: single-instance samples (and Sample(String) to become private)\n    public static Sample getSample(String filename) throws IOException {\n\t// check map\n\tSample s = null;\n\tif (samples.containsKey(filename)) {\n\t    s = (Sample) ((Reference) samples.get(filename)).get();\n\t    // BUG: what if what's on disk is newer than what's in memory?\n\t    // (if it's ONLY weakly referenced, just update it)\n\t    // (if somebody else is viewing it, better ask the user)\n\t}\n\tif (s == null)\n\t    s = new Sample(filename);\n\tsamples.put(filename, new WeakReference(s));\n\treturn s;\n\t// won't this map keep accumulating nulls?  well, probably not many.\n\t// but shouldn't i try to take them out somehow?\n    }\n    private static Map samples = new HashMap();\n*/\n    /**\n     *  Create a new Sample from a given file on disk.\n     * \t@param filename the name of the file to load\n     * \t@exception FileNotFoundException if the file doesn't exist\n     * \t@exception WrongFiletypeException if the file is not a Sample\n     * \t@exception IOException if there is an I/O error while loading\n     * \tthe file\n     */\n    /*\n    public Sample(String filename) throws FileNotFoundException, WrongFiletypeException, IOException {\n\t// make it like any other Sample\n\tthis();\n\n\t// load the file; this call throws the exceptions\n\tload(filename);\n\n\t// 99%+ of the time you're loading a sample from disk, you\n\t// won't be adding to it, so trim it.\n\ttrimAllToSize();\n    }\n    */\n    /*\n    public Sample(URL url) throws IOException {\n        this();\n\ttry {\n            Class.forName(\"corina.browser.ItrdbURLConnection\");\n\t} catch (ClassNotFoundException cnfe) {\n\t    corina.gui.Bug.bug(cnfe);\n\t}\n        load(new InputStreamReader(url.openStream()));\n        meta.put(\"filename\", url.toString());\n        trimAllToSize();\n    }\n    */\n    private void trimAllToSize() {\n        ((ArrayList) data).trimToSize();\n        if (count != null)\n            ((ArrayList) count).trimToSize();\n        if (hasWeiserjahre()) {\n            ((ArrayList) incr).trimToSize();\n            ((ArrayList) decr).trimToSize();\n        }\n    }\n\n    // copy each part of source to target.  shallow copy, no events, etc.\n    // used only by editor (paste) -- bad interface!\n    public static void copy(Sample source, Sample target) {\n        target.data = source.data;\n        target.range = source.range;\n        target.count = source.count;\n        target.meta = source.meta;\n        target.incr = source.incr;\n        target.decr = source.decr;\n        target.elements = source.elements;\n    }\n\n    /**\n     *  Return true if the sample is indexed, else false.\n     * \t@return true if the sample is indexed\n     */\n    public boolean isIndexed() {\n        String type = (String) meta.get(\"format\");\n        return (type != null && Character.toUpperCase(type.charAt(0)) == 'I');\n    }\n\n    /**\n     *  <p>Return true if the sample is summed, else false.  Here\n     * \t\"summed\" is defined as:</p>\n     * \t<ul>\n     * \t  <li>has a list of elements, or\n     * \t  <li>has count data\n     * \t</ul>\n     * \t@return true if the sample is summed\n     */\n    public boolean isSummed() {\n        return (elements != null || count != null);\n    }\n\n    /**\n     *  Return true if the sample is absolutely dated, else false.\n     * \t@return true if the sample is absolutely dated\n     */\n    public boolean isAbsolute() {\n        String dating = (String) meta.get(\"dating\");\n        return (dating != null && Character.toUpperCase(dating.charAt(0)) == 'A');\n    }\n\n    private boolean modified = false;\n\n    /**\n     *  Return true if the file was modified since last save.\n     * \t@return if the sample has been modified\n     */\n    public boolean isModified() {\n        return modified;\n    }\n\n    /**\n     * Set the modified flag.\n     */\n    public void setModified() {\n        modified = true;\n    }\n\n    /**\n     * Clear the modified flag.\n     */\n    public void clearModified() {\n        modified = false;\n    }\n\n    /**\n     *  Return the data for a graph.\n     * \t@return data to graph, as a List of Integers\n     */\n    public List getData() {\n        return data;\n    }\n\n    /**\n     *  Return the start date for a graph.\n     * \t@return start date of data to graph\n     */\n    public Year getStart() {\n        return range.getStart();\n    }\n\n    /**\n     *  Return the default scale factor for graphing.\n     * \t@return scale factor of 1.0, or 0.1 for indexed files\n     */\n    public float getScale() {\n        return (isIndexed() ? 0.1f : 1.0f);\n    }\n\n    /**\n     *  Return the sample's title.\n     * \t@return the \"title\" tag from meta\n     */\n    public String toString() {\n        String name = meta.get(\"title\") + \" \" + range.toStringWithSpan();\n        if (// not aqua-ish, but how to do it the real way?\n        isModified())\n            name = \"* \" + name;\n        return name;\n    }\n\n    /**\n     *  Count the total number of rings.  If this is a raw sample,\n     * \treturns the length.  If this is a summed sample, returns the\n     * \tsum of the count List.\n     * \t@return the total number of rings in this sample\n     */\n    public int countRings() {\n        // it's not a sum, so the number of rings is just the length\n        // (if (null count) (length data) ...\n        if (count == null)\n            return data.size();\n        // it's a sum, so the number of rings is the sum of the number\n        // of measurements for each year\n        // ... (apply '+ count))\n        int n = 0, size = count.size();\n        for (int i = 0; i < size; i++) n += ((Integer) count.get(i)).intValue();\n        return n;\n    }\n\n    // radius of the sample; only relevant for raw samples (better to\n    // return 0.0 for indexed sample?  throw ex?)\n    public int computeRadius() {\n        // (apply '+ data)\n        int n = data.size();\n        int sum = 0;\n        for (int i = 0; i < n; i++) sum += ((Number) data.get(i)).intValue();\n        return sum;\n    }\n\n    // number of intervals with >3 samples\n    public int count3SampleIntervals() {\n        // (count-if #'(lambda (x) (> x 3)) (sample-count s))\n        if (count == null)\n            return 0;\n        int n = count.size();\n        int three = 0;\n        for (int i = 0; i < n; i++) if (((Integer) count.get(i)).intValue() > 3)\n            three++;\n        return three;\n    }\n\n    // count number of significant (weiserjahre) intervals\n    public int countSignificantIntervals() {\n        if (!hasWeiserjahre())\n            return 0;\n        int sig = 0, n = incr.size();\n        for (int i = 0; i < n; i++) if (Weiserjahre.isSignificant(this, i))\n            sig++;\n        return sig;\n    }\n\n    //\n    // load/save\n    //\n    // create a new sample, from a file on disk\n    public Sample(String filename) throws IOException {\n        // new @-notation\n        if (filename.startsWith(\"@\"))\n            filename = System.getProperty(\"corina.dir.data\", \".\") + filename.substring(1);\n        // (assumes c.d.r ends with file.sep!)\n        Sample s = Files.load(filename);\n        copy(s, this);\n        trimAllToSize();\n    }\n\n    /* Determining if a file is indexed: The 800 Rule\n\n    (This was originally for Tucson files, but now I don't think it\n    applies to them, so it got dumped here.  It might actually be\n    useful here.)\n\n    If a Tucson file is summed, is it indexed?  There doesn't appear\n    to be any way to know for sure.  If it's not summed, and it's\n    processed, then it must be indexing that caused it to be processed.\n    But if it's summed, you know it's processed, but there's no way to\n    tell if it's indexed.\n    \n    So I invented\n\n       /The 800-Rule/: If dataset is known to be processed, but not\n       summed, then it is indexed if the average data value is greater\n       than 800.\n\n    Because indexes are based around 1000 (parts-per-thousand), the\n    average would be near 1000.  Raw data are much lower, like 50-100.\n    This fails if you have a raw dataset with rings larger than 8mm on\n    average (a very big tree), or an indexed dataset where the curve\n    overshoots by more than 25% on average (a very poor index).  It\n    doesn't really matter that this fails <i>sometimes</i>, because\n    without this rule, it would fail <i>always</i>.  So it's a hack,\n    but it's still the right thing to do.\n\n    I've recently learned that there's really no need for the\n    800-rule on Tucson files.  Apparently nobody at Tucson ever thought\n    of summing non-indexed files, so summed implies indexed.  I think.\n    (How do they store indexed files for summing, then?)  Oh well, we\n    had fun, anyway.\n\n    This used to be in Tucson.java, then in TwoColumn.java, but it\n    only looks at the Sample, so it really belongs here.  At least I\n    can put it with the load/save stuff here.\n\n(later) pik says there can be raw summed [tucson] files, and pulls out some\n        old datasets to show me ... that there are raw, indexed, and\n        summed indexed formats for tucson.  but he wants it back in,\n        so we give it to him. */\n    public void guessIndexed() {\n        meta.put(\"format\", computeRadius() / data.size() > 800 ? \"I\" : \"R\");\n    }\n\n    // make sure data/count/wj are the same size as range.span, and\n    // contain all legit Numbers.  turns nulls/non-numbers into 0's.\n    public void verify() {\n        int n = range.span();\n        // what to do if they're the wrong size -- adjust range if the data\n        // are all the same size, but pad with zeros if only one is off?\n        // data: turn nulls/non-numbers into 0\n        for (int i = 0; i < n; i++) {\n            Object o = data.get(i);\n            if (o == null || !(o instanceof Number))\n                data.set(i, new Integer(0));\n        }\n        // TODO: do count, WJ as well\n    }\n\n    /**\n     *       Save this Sample to disk.\n     *\n     *       @param filename the name of the file to save to\n     *       @exception IOException if an I/O error occurs\n     */\n    public void save(String filename) throws IOException {\n        Files.save(this, filename);\n    }\n\n    /**\n     *       Save this Sample to disk to the same filename it had\n     *       previously.\n     *\n     *       @exception IOException if an I/O error occurs\n     */\n    public void save() throws IOException {\n        // BUG!  assumes filename exists in meta map -- what if it doesn't?\n        save((String) meta.get(\"filename\"));\n    }\n\n    public Preview getPreview() {\n        return new SamplePreview(this);\n    }\n\n    private static class SamplePreview extends Preview {\n\n        SamplePreview(Sample s) {\n            title = s.meta.get(\"title\").toString();\n            // range -- toStringWithSpan() does \"(a - b, n=c)\", i want \"a - b (n=c)\"\n            items.add(s.range + \" (n=\" + s.range.span() + \")\");\n            // species\n            if (s.meta.containsKey(\"species\"))\n                items.add(I18n.getText(\"species\") + \": \" + s.meta.get(\"species\"));\n            // format\n            items.add(I18n.getText(\"format\") + \": \" + s.meta.get(\"filetype\"));\n            // indexed, summed\n            if (s.isIndexed())\n                items.add(I18n.getText(\"indexed\"));\n            if (s.isSummed()) {\n                String summedLine = I18n.getText(\"summed\");\n                if (s.elements != null)\n                    summedLine += \" (\" + s.elements.size() + \" \" + I18n.getText(\"elements\") + \")\";\n                items.add(summedLine);\n            }\n        }\n    }\n\n    //\n    // miscellaneous procedures that are better off here than elsewhere\n    //\n    // is this sample oak?  (assumes meta/species is a string, if present)\n    // (FIXME: if it's not a string, it's not oak.)\n    // checks for \"oak\" or \"quercus\".\n    public boolean isOak() {\n        String species = (String) meta.get(\"species\");\n        if (species == null)\n            return false;\n        species = species.toLowerCase();\n        return (species.indexOf(\"oak\") != -1 || species.indexOf(\"quercus\") != -1);\n    }\n\n    // is this sample editable?  no, if it's been indexed or summed.\n    public boolean isEditable() {\n        return (!isIndexed()) && (!isSummed());\n    }\n\n    //\n    // event model\n    //\n    private Vector listeners = new Vector();\n\n    public synchronized void addSampleListener(SampleListener l) {\n        if (!listeners.contains(l))\n            listeners.add(l);\n    }\n\n    public synchronized void removeSampleListener(SampleListener l) {\n        listeners.remove(l);\n    }\n\n    // fire an arbitrary sample event called |method|.  each\n    // fireSampleXYZhappened() method is virtually identical, so their\n    // guts were refactored into here.  this makes adding new events\n    // painless.  (this was taken from a web page -- url?)\n    private void fireSampleEvent(String method) {\n        // alert all listeners\n        Vector l;\n        synchronized (this) {\n            l = (Vector) listeners.clone();\n        }\n        int size = l.size();\n        if (size == 0)\n            return;\n        SampleEvent e = new SampleEvent(this);\n        try {\n            // **\n            Class[] types = new Class[] { SampleEvent.class };\n            Method m = SampleListener.class.getMethod(method, types);\n            Object[] args = new Object[] { e };\n            for (int i = 0; i < size; i++) {\n                SampleListener listener = (SampleListener) l.elementAt(i);\n                // this is like \"listener.method(e)\" (along with the 2 lines\n                // marked ** above)\n                m.invoke(listener, args);\n            }\n        } catch (Exception ex) {\n            // BUG: these exceptions are caught too coursely!\n            // just ignore them all... (?)\n        }\n    }\n\n    // there's an elegant refactoring waiting to be done here, but i'm too wired on caffiene right now to see it.\n    // => see also mapframe's toolbox decorators.\n    public void fireSampleRedated() {\n        fireSampleEvent(\"sampleRedated\");\n    }\n\n    public void fireSampleDataChanged() {\n        fireSampleEvent(\"sampleDataChanged\");\n    }\n\n    public void fireSampleMetadataChanged() {\n        metadataChanged = true;\n        fireSampleEvent(\"sampleMetadataChanged\");\n    }\n\n    public void fireSampleElementsChanged() {\n        fireSampleEvent(\"sampleElementsChanged\");\n    }\n\n    // see if the metadata was changed -- true (loaded samples) unless zero-arg constructor called\n    private boolean metadataChanged = true;\n\n    public boolean wasMetadataChanged() {\n        return metadataChanged;\n    }\n\n    /* FUTURE: */\n    private UndoableEditSupport undoSupport = new UndoableEditSupport();\n\n    public void postEdit(UndoableEdit e) {\n        undoSupport.postEdit(e);\n    }\n}\n",
		"id": "/EvoSuiteBenchmark/35_corina/src/main/java/corina/Sample_6Test.java",
		"test_prompt": "// Sample_6Test.java\n// This file is part of Corina.\n//\n// Corina is free software; you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation; either version 2 of the License, or\n// (at your option) any later version.\n//\n// Corina is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Corina; if not, write to the Free Software\n// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n//\n// Copyright 2001 Ken Harris <kbh7@cornell.edu>\n//\npackage corina;\n\nimport corina.io.Files;\nimport corina.formats.WrongFiletypeException;\nimport corina.graph.Graphable;\nimport corina.ui.I18n;\nimport java.io.File;\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.Reader;\nimport java.io.InputStreamReader;\nimport java.io.IOException;\nimport java.io.FileNotFoundException;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Vector;\nimport java.util.Map;\nimport java.util.HashMap;\nimport java.net.URL;\nimport java.lang.reflect.Method;\nimport java.lang.ref.Reference;\nimport java.lang.ref.WeakReference;\nimport javax.swing.undo.*;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link Sample}.\n* It contains ten unit test cases for the {@link Sample#computeRadius()} method.\n*/\nclass Sample_6Test {"
	},
	{
		"original_code": "// Sample.java\n//\n// This file is part of Corina.\n//\n// Corina is free software; you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation; either version 2 of the License, or\n// (at your option) any later version.\n//\n// Corina is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Corina; if not, write to the Free Software\n// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n//\n// Copyright 2001 Ken Harris <kbh7@cornell.edu>\n//\npackage corina;\n\nimport corina.io.Files;\nimport corina.formats.WrongFiletypeException;\nimport corina.graph.Graphable;\nimport corina.ui.I18n;\nimport java.io.File;\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.Reader;\nimport java.io.InputStreamReader;\nimport java.io.IOException;\nimport java.io.FileNotFoundException;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Vector;\nimport java.util.Map;\nimport java.util.HashMap;\nimport java.net.URL;\nimport java.lang.reflect.Method;\nimport java.lang.ref.Reference;\nimport java.lang.ref.WeakReference;\nimport javax.swing.undo.*;\n\n/**\n *   Class representing a reading of a dendro sample.\n *\n *   <p>Currently, this stores:</p>\n *\n *   <ul>\n *     <li>series: data, count, wj (up/down, in one list)</li>\n *     <li>range</li>\n *     <li>a hashtable for metadata</li>\n *     <li>a list of elements</li>\n *   </ul>\n *\n *   @author Ken Harris &lt;kbh7 <i style=\"color: gray\">at</i> cornell <i style=\"color: gray\">dot</i> edu&gt;\n *   @version $Id: Sample.java,v 1.6 2006/01/04 06:51:55 lucasmo Exp $\n */\n// IDEA: make a samplefactory, so 2 calls to sample(filename) return\n// the same object.  better yet, an editor factory so a second\n// editor(sample) bringstofront the existing editor.\npublic class Sample implements Previewable, Graphable {\n\n    /**\n     *  The value of a missing ring, 2.  Anything less than or equal\n     * \tto this value is considered a MR.\n     */\n    public static final int MR = 2;\n\n    /**\n     * Data, as a List of Integers.\n     */\n    public List data;\n\n    /**\n     * Data range.\n     */\n    public Range range;\n\n    /**\n     *  Sample metadata, as a (String, Object) Map.  The following\n     *         table lists the standard keys, their data types, and valid values:\n     *\n     * <table border=\"1\">\n     *     <tr> <th>Key</th>         <th>Type</th>    <th>Valid values</th> </tr>\n     *     <tr> <td>id</td>          <td>Integer</td> <td></td>             </tr>\n     *     <tr> <td>title</td>       <td>String</td>  <td></td>             </tr>\n     *     <tr> <td>dating</td>      <td>String</td>  <td>A, R</td>         </tr>\n     *     <tr> <td>unmeas_pre</td>  <td>Integer</td> <td></td>             </tr>\n     *     <tr> <td>unmeas_post</td> <td>Integer</td> <td></td>             </tr>\n     *     <tr> <td>filename</td>    <td>String</td>  <td></td>             </tr>\n     *     <tr> <td>comments</td>    <td>String</td>  <td></td>             </tr>\n     *     <tr> <td>type</td>        <td>String</td>  <td>S, H, C</td>      </tr>\n     *     <tr> <td>species</td>     <td>String</td>  <td></td>             </tr>\n     *     <tr> <td>sapwood</td>     <td>Integer</td> <td></td>             </tr>\n     *     <tr> <td>pith</td>        <td>String</td>  <td>+, *, N</td>      </tr>\n     *     <tr> <td>terminal</td>    <td>String</td>  <td>v, vv, B, W</td>  </tr>\n     *     <tr> <td>continuous</td>  <td>String</td>  <td>C, R, N</td>      </tr>\n     *     <tr> <td>quality</td>     <td>String</td>  <td>+, ++</td>        </tr>\n     *     <tr> <td>format</td>      <td>String</td>  <td>R, I</td>         </tr>\n     *     <tr> <td>index_type</td>  <td>Integer</td> <td></td>             </tr>\n     *     <tr> <td>reconciled</td>  <td>String</td>  <td>Y,N</td>          </tr>\n     *     <tr> <td>author</td>      <td>String</td>  <td></td>             </tr>\n     * </table>\n     *\n     * \t<code>data</code>, <code>count</code>, <code>range</code>,\n     * \t<code>wj</code>, and <code>elements</code> aren't stored in\n     * \t<code>meta</code> - they're their own members.\n     *\n     * \t@see corina.formats.Corina\n     */\n    public Map meta;\n\n    // WRITEME: need corresponding setString(), setInteger().\n    // WRITEME: make meta private, eventually.\n    // WRITEME: add lazy-loaders here.\n    // WRITEME: and don't load on construction!\n    // get a string field from this sample.\n    public String getString(String field) {\n        // TODO: load, if needed.\n        Object val = meta.get(field);\n        if (val != null && val instanceof String)\n            return (String) val;\n        return null;\n    }\n\n    // get an int field from this sample.\n    // (would be int, but can't return null then -- use exception?)\n    public Integer getInteger(String field) {\n        // TODO: load, if needed.\n        Object val = meta.get(field);\n        if (val != null && val instanceof Integer)\n            return (Integer) val;\n        return null;\n    }\n\n    // get a list-of-numbers field from this sample.\n    // (what about elements?)\n    public List getList(String field) {\n        // TODO: load, if needed.\n        if (field.equals(\"data\"))\n            return data;\n        else if (field.equals(\"count\"))\n            return count;\n        else if (field.equals(\"incr\"))\n            return incr;\n        else if (field.equals(\"decr\"))\n            return decr;\n        return null;\n    }\n\n    /**\n     * Number of samples in the sum at any given point.\n     */\n    public List count = null;\n\n    // weiserjahre\n    public List incr = null, decr = null;\n\n    // does it have weiserjahre?\n    public boolean hasWeiserjahre() {\n        return (incr != null);\n    }\n\n    /**\n     * Elements (in a List) that were put into this sum.\n     */\n    public List elements = null;\n\n    /**\n     *  Default constructor.  Defaults:\n     * \t<ul>\n     * \t  <li><code>data</code> and <code>count</code> are initialized but empty\n     * \t  <li><code>range</code> is initialized\n     * \t  <li><code>meta</code> is initialized, and:\n     * \t      <ul>\n     * \t        <li>Tag \"title\" is set to \"Untitled\"\n     * \t\t<li>Tag \"author\" is set to the value of system property\n     * \t\t    <code>user.name</code>\n     * \t      </ul>\n     * \t  <li><code>wj</code> is <code>null</code>\n     * \t  <li><code>elements</code> is <code>null</code>\n     * \t</ul>\n     * \t@see #meta\n     */\n    public Sample() {\n        // make defaults: empty\n        data = new ArrayList();\n        range = new Range();\n        meta = new HashMap();\n        // store username, if known\n        if (System.getProperty(\"user.name\") != null)\n            meta.put(\"author\", System.getProperty(\"user.name\"));\n        // initialize empty metadata with defaults?\n        meta.put(\"title\", I18n.getText(\"Untitled\"));\n        // metadata NOT changed\n        metadataChanged = false;\n    }\n\n    /*\n    // TESTING: single-instance samples (and Sample(String) to become private)\n    public static Sample getSample(String filename) throws IOException {\n\t// check map\n\tSample s = null;\n\tif (samples.containsKey(filename)) {\n\t    s = (Sample) ((Reference) samples.get(filename)).get();\n\t    // BUG: what if what's on disk is newer than what's in memory?\n\t    // (if it's ONLY weakly referenced, just update it)\n\t    // (if somebody else is viewing it, better ask the user)\n\t}\n\tif (s == null)\n\t    s = new Sample(filename);\n\tsamples.put(filename, new WeakReference(s));\n\treturn s;\n\t// won't this map keep accumulating nulls?  well, probably not many.\n\t// but shouldn't i try to take them out somehow?\n    }\n    private static Map samples = new HashMap();\n*/\n    /**\n     *  Create a new Sample from a given file on disk.\n     * \t@param filename the name of the file to load\n     * \t@exception FileNotFoundException if the file doesn't exist\n     * \t@exception WrongFiletypeException if the file is not a Sample\n     * \t@exception IOException if there is an I/O error while loading\n     * \tthe file\n     */\n    /*\n    public Sample(String filename) throws FileNotFoundException, WrongFiletypeException, IOException {\n\t// make it like any other Sample\n\tthis();\n\n\t// load the file; this call throws the exceptions\n\tload(filename);\n\n\t// 99%+ of the time you're loading a sample from disk, you\n\t// won't be adding to it, so trim it.\n\ttrimAllToSize();\n    }\n    */\n    /*\n    public Sample(URL url) throws IOException {\n        this();\n\ttry {\n            Class.forName(\"corina.browser.ItrdbURLConnection\");\n\t} catch (ClassNotFoundException cnfe) {\n\t    corina.gui.Bug.bug(cnfe);\n\t}\n        load(new InputStreamReader(url.openStream()));\n        meta.put(\"filename\", url.toString());\n        trimAllToSize();\n    }\n    */\n    private void trimAllToSize() {\n        ((ArrayList) data).trimToSize();\n        if (count != null)\n            ((ArrayList) count).trimToSize();\n        if (hasWeiserjahre()) {\n            ((ArrayList) incr).trimToSize();\n            ((ArrayList) decr).trimToSize();\n        }\n    }\n\n    // copy each part of source to target.  shallow copy, no events, etc.\n    // used only by editor (paste) -- bad interface!\n    public static void copy(Sample source, Sample target) {\n        target.data = source.data;\n        target.range = source.range;\n        target.count = source.count;\n        target.meta = source.meta;\n        target.incr = source.incr;\n        target.decr = source.decr;\n        target.elements = source.elements;\n    }\n\n    /**\n     *  Return true if the sample is indexed, else false.\n     * \t@return true if the sample is indexed\n     */\n    public boolean isIndexed() {\n        String type = (String) meta.get(\"format\");\n        return (type != null && Character.toUpperCase(type.charAt(0)) == 'I');\n    }\n\n    /**\n     *  <p>Return true if the sample is summed, else false.  Here\n     * \t\"summed\" is defined as:</p>\n     * \t<ul>\n     * \t  <li>has a list of elements, or\n     * \t  <li>has count data\n     * \t</ul>\n     * \t@return true if the sample is summed\n     */\n    public boolean isSummed() {\n        return (elements != null || count != null);\n    }\n\n    /**\n     *  Return true if the sample is absolutely dated, else false.\n     * \t@return true if the sample is absolutely dated\n     */\n    public boolean isAbsolute() {\n        String dating = (String) meta.get(\"dating\");\n        return (dating != null && Character.toUpperCase(dating.charAt(0)) == 'A');\n    }\n\n    private boolean modified = false;\n\n    /**\n     *  Return true if the file was modified since last save.\n     * \t@return if the sample has been modified\n     */\n    public boolean isModified() {\n        return modified;\n    }\n\n    /**\n     * Set the modified flag.\n     */\n    public void setModified() {\n        modified = true;\n    }\n\n    /**\n     * Clear the modified flag.\n     */\n    public void clearModified() {\n        modified = false;\n    }\n\n    /**\n     *  Return the data for a graph.\n     * \t@return data to graph, as a List of Integers\n     */\n    public List getData() {\n        return data;\n    }\n\n    /**\n     *  Return the start date for a graph.\n     * \t@return start date of data to graph\n     */\n    public Year getStart() {\n        return range.getStart();\n    }\n\n    /**\n     *  Return the default scale factor for graphing.\n     * \t@return scale factor of 1.0, or 0.1 for indexed files\n     */\n    public float getScale() {\n        return (isIndexed() ? 0.1f : 1.0f);\n    }\n\n    /**\n     *  Return the sample's title.\n     * \t@return the \"title\" tag from meta\n     */\n    public String toString() {\n        String name = meta.get(\"title\") + \" \" + range.toStringWithSpan();\n        if (// not aqua-ish, but how to do it the real way?\n        isModified())\n            name = \"* \" + name;\n        return name;\n    }\n\n    /**\n     *  Count the total number of rings.  If this is a raw sample,\n     * \treturns the length.  If this is a summed sample, returns the\n     * \tsum of the count List.\n     * \t@return the total number of rings in this sample\n     */\n    public int countRings() {\n        // it's not a sum, so the number of rings is just the length\n        // (if (null count) (length data) ...\n        if (count == null)\n            return data.size();\n        // it's a sum, so the number of rings is the sum of the number\n        // of measurements for each year\n        // ... (apply '+ count))\n        int n = 0, size = count.size();\n        for (int i = 0; i < size; i++) n += ((Integer) count.get(i)).intValue();\n        return n;\n    }\n\n    // radius of the sample; only relevant for raw samples (better to\n    // return 0.0 for indexed sample?  throw ex?)\n    public int computeRadius() {\n        // (apply '+ data)\n        int n = data.size();\n        int sum = 0;\n        for (int i = 0; i < n; i++) sum += ((Number) data.get(i)).intValue();\n        return sum;\n    }\n\n    // number of intervals with >3 samples\n    public int count3SampleIntervals() {\n        // (count-if #'(lambda (x) (> x 3)) (sample-count s))\n        if (count == null)\n            return 0;\n        int n = count.size();\n        int three = 0;\n        for (int i = 0; i < n; i++) if (((Integer) count.get(i)).intValue() > 3)\n            three++;\n        return three;\n    }\n\n    // count number of significant (weiserjahre) intervals\n    public int countSignificantIntervals() {\n        if (!hasWeiserjahre())\n            return 0;\n        int sig = 0, n = incr.size();\n        for (int i = 0; i < n; i++) if (Weiserjahre.isSignificant(this, i))\n            sig++;\n        return sig;\n    }\n\n    //\n    // load/save\n    //\n    // create a new sample, from a file on disk\n    public Sample(String filename) throws IOException {\n        // new @-notation\n        if (filename.startsWith(\"@\"))\n            filename = System.getProperty(\"corina.dir.data\", \".\") + filename.substring(1);\n        // (assumes c.d.r ends with file.sep!)\n        Sample s = Files.load(filename);\n        copy(s, this);\n        trimAllToSize();\n    }\n\n    /* Determining if a file is indexed: The 800 Rule\n\n    (This was originally for Tucson files, but now I don't think it\n    applies to them, so it got dumped here.  It might actually be\n    useful here.)\n\n    If a Tucson file is summed, is it indexed?  There doesn't appear\n    to be any way to know for sure.  If it's not summed, and it's\n    processed, then it must be indexing that caused it to be processed.\n    But if it's summed, you know it's processed, but there's no way to\n    tell if it's indexed.\n    \n    So I invented\n\n       /The 800-Rule/: If dataset is known to be processed, but not\n       summed, then it is indexed if the average data value is greater\n       than 800.\n\n    Because indexes are based around 1000 (parts-per-thousand), the\n    average would be near 1000.  Raw data are much lower, like 50-100.\n    This fails if you have a raw dataset with rings larger than 8mm on\n    average (a very big tree), or an indexed dataset where the curve\n    overshoots by more than 25% on average (a very poor index).  It\n    doesn't really matter that this fails <i>sometimes</i>, because\n    without this rule, it would fail <i>always</i>.  So it's a hack,\n    but it's still the right thing to do.\n\n    I've recently learned that there's really no need for the\n    800-rule on Tucson files.  Apparently nobody at Tucson ever thought\n    of summing non-indexed files, so summed implies indexed.  I think.\n    (How do they store indexed files for summing, then?)  Oh well, we\n    had fun, anyway.\n\n    This used to be in Tucson.java, then in TwoColumn.java, but it\n    only looks at the Sample, so it really belongs here.  At least I\n    can put it with the load/save stuff here.\n\n(later) pik says there can be raw summed [tucson] files, and pulls out some\n        old datasets to show me ... that there are raw, indexed, and\n        summed indexed formats for tucson.  but he wants it back in,\n        so we give it to him. */\n    public void guessIndexed() {\n        meta.put(\"format\", computeRadius() / data.size() > 800 ? \"I\" : \"R\");\n    }\n\n    // make sure data/count/wj are the same size as range.span, and\n    // contain all legit Numbers.  turns nulls/non-numbers into 0's.\n    public void verify() {\n        int n = range.span();\n        // what to do if they're the wrong size -- adjust range if the data\n        // are all the same size, but pad with zeros if only one is off?\n        // data: turn nulls/non-numbers into 0\n        for (int i = 0; i < n; i++) {\n            Object o = data.get(i);\n            if (o == null || !(o instanceof Number))\n                data.set(i, new Integer(0));\n        }\n        // TODO: do count, WJ as well\n    }\n\n    /**\n     *       Save this Sample to disk.\n     *\n     *       @param filename the name of the file to save to\n     *       @exception IOException if an I/O error occurs\n     */\n    public void save(String filename) throws IOException {\n        Files.save(this, filename);\n    }\n\n    /**\n     *       Save this Sample to disk to the same filename it had\n     *       previously.\n     *\n     *       @exception IOException if an I/O error occurs\n     */\n    public void save() throws IOException {\n        // BUG!  assumes filename exists in meta map -- what if it doesn't?\n        save((String) meta.get(\"filename\"));\n    }\n\n    public Preview getPreview() {\n        return new SamplePreview(this);\n    }\n\n    private static class SamplePreview extends Preview {\n\n        SamplePreview(Sample s) {\n            title = s.meta.get(\"title\").toString();\n            // range -- toStringWithSpan() does \"(a - b, n=c)\", i want \"a - b (n=c)\"\n            items.add(s.range + \" (n=\" + s.range.span() + \")\");\n            // species\n            if (s.meta.containsKey(\"species\"))\n                items.add(I18n.getText(\"species\") + \": \" + s.meta.get(\"species\"));\n            // format\n            items.add(I18n.getText(\"format\") + \": \" + s.meta.get(\"filetype\"));\n            // indexed, summed\n            if (s.isIndexed())\n                items.add(I18n.getText(\"indexed\"));\n            if (s.isSummed()) {\n                String summedLine = I18n.getText(\"summed\");\n                if (s.elements != null)\n                    summedLine += \" (\" + s.elements.size() + \" \" + I18n.getText(\"elements\") + \")\";\n                items.add(summedLine);\n            }\n        }\n    }\n\n    //\n    // miscellaneous procedures that are better off here than elsewhere\n    //\n    // is this sample oak?  (assumes meta/species is a string, if present)\n    // (FIXME: if it's not a string, it's not oak.)\n    // checks for \"oak\" or \"quercus\".\n    public boolean isOak() {\n        String species = (String) meta.get(\"species\");\n        if (species == null)\n            return false;\n        species = species.toLowerCase();\n        return (species.indexOf(\"oak\") != -1 || species.indexOf(\"quercus\") != -1);\n    }\n\n    // is this sample editable?  no, if it's been indexed or summed.\n    public boolean isEditable() {\n        return (!isIndexed()) && (!isSummed());\n    }\n\n    //\n    // event model\n    //\n    private Vector listeners = new Vector();\n\n    public synchronized void addSampleListener(SampleListener l) {\n        if (!listeners.contains(l))\n            listeners.add(l);\n    }\n\n    public synchronized void removeSampleListener(SampleListener l) {\n        listeners.remove(l);\n    }\n\n    // fire an arbitrary sample event called |method|.  each\n    // fireSampleXYZhappened() method is virtually identical, so their\n    // guts were refactored into here.  this makes adding new events\n    // painless.  (this was taken from a web page -- url?)\n    private void fireSampleEvent(String method) {\n        // alert all listeners\n        Vector l;\n        synchronized (this) {\n            l = (Vector) listeners.clone();\n        }\n        int size = l.size();\n        if (size == 0)\n            return;\n        SampleEvent e = new SampleEvent(this);\n        try {\n            // **\n            Class[] types = new Class[] { SampleEvent.class };\n            Method m = SampleListener.class.getMethod(method, types);\n            Object[] args = new Object[] { e };\n            for (int i = 0; i < size; i++) {\n                SampleListener listener = (SampleListener) l.elementAt(i);\n                // this is like \"listener.method(e)\" (along with the 2 lines\n                // marked ** above)\n                m.invoke(listener, args);\n            }\n        } catch (Exception ex) {\n            // BUG: these exceptions are caught too coursely!\n            // just ignore them all... (?)\n        }\n    }\n\n    // there's an elegant refactoring waiting to be done here, but i'm too wired on caffiene right now to see it.\n    // => see also mapframe's toolbox decorators.\n    public void fireSampleRedated() {\n        fireSampleEvent(\"sampleRedated\");\n    }\n\n    public void fireSampleDataChanged() {\n        fireSampleEvent(\"sampleDataChanged\");\n    }\n\n    public void fireSampleMetadataChanged() {\n        metadataChanged = true;\n        fireSampleEvent(\"sampleMetadataChanged\");\n    }\n\n    public void fireSampleElementsChanged() {\n        fireSampleEvent(\"sampleElementsChanged\");\n    }\n\n    // see if the metadata was changed -- true (loaded samples) unless zero-arg constructor called\n    private boolean metadataChanged = true;\n\n    public boolean wasMetadataChanged() {\n        return metadataChanged;\n    }\n\n    /* FUTURE: */\n    private UndoableEditSupport undoSupport = new UndoableEditSupport();\n\n    public void postEdit(UndoableEdit e) {\n        undoSupport.postEdit(e);\n    }\n}\n",
		"id": "/EvoSuiteBenchmark/35_corina/src/main/java/corina/Sample_7Test.java",
		"test_prompt": "// Sample_7Test.java\n// This file is part of Corina.\n//\n// Corina is free software; you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation; either version 2 of the License, or\n// (at your option) any later version.\n//\n// Corina is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Corina; if not, write to the Free Software\n// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n//\n// Copyright 2001 Ken Harris <kbh7@cornell.edu>\n//\npackage corina;\n\nimport corina.io.Files;\nimport corina.formats.WrongFiletypeException;\nimport corina.graph.Graphable;\nimport corina.ui.I18n;\nimport java.io.File;\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.Reader;\nimport java.io.InputStreamReader;\nimport java.io.IOException;\nimport java.io.FileNotFoundException;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Vector;\nimport java.util.Map;\nimport java.util.HashMap;\nimport java.net.URL;\nimport java.lang.reflect.Method;\nimport java.lang.ref.Reference;\nimport java.lang.ref.WeakReference;\nimport javax.swing.undo.*;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link Sample}.\n* It contains ten unit test cases for the {@link Sample#count3SampleIntervals()} method.\n*/\nclass Sample_7Test {"
	},
	{
		"original_code": "// Sample.java\n//\n// This file is part of Corina.\n//\n// Corina is free software; you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation; either version 2 of the License, or\n// (at your option) any later version.\n//\n// Corina is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Corina; if not, write to the Free Software\n// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n//\n// Copyright 2001 Ken Harris <kbh7@cornell.edu>\n//\npackage corina;\n\nimport corina.io.Files;\nimport corina.formats.WrongFiletypeException;\nimport corina.graph.Graphable;\nimport corina.ui.I18n;\nimport java.io.File;\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.Reader;\nimport java.io.InputStreamReader;\nimport java.io.IOException;\nimport java.io.FileNotFoundException;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Vector;\nimport java.util.Map;\nimport java.util.HashMap;\nimport java.net.URL;\nimport java.lang.reflect.Method;\nimport java.lang.ref.Reference;\nimport java.lang.ref.WeakReference;\nimport javax.swing.undo.*;\n\n/**\n *   Class representing a reading of a dendro sample.\n *\n *   <p>Currently, this stores:</p>\n *\n *   <ul>\n *     <li>series: data, count, wj (up/down, in one list)</li>\n *     <li>range</li>\n *     <li>a hashtable for metadata</li>\n *     <li>a list of elements</li>\n *   </ul>\n *\n *   @author Ken Harris &lt;kbh7 <i style=\"color: gray\">at</i> cornell <i style=\"color: gray\">dot</i> edu&gt;\n *   @version $Id: Sample.java,v 1.6 2006/01/04 06:51:55 lucasmo Exp $\n */\n// IDEA: make a samplefactory, so 2 calls to sample(filename) return\n// the same object.  better yet, an editor factory so a second\n// editor(sample) bringstofront the existing editor.\npublic class Sample implements Previewable, Graphable {\n\n    /**\n     *  The value of a missing ring, 2.  Anything less than or equal\n     * \tto this value is considered a MR.\n     */\n    public static final int MR = 2;\n\n    /**\n     * Data, as a List of Integers.\n     */\n    public List data;\n\n    /**\n     * Data range.\n     */\n    public Range range;\n\n    /**\n     *  Sample metadata, as a (String, Object) Map.  The following\n     *         table lists the standard keys, their data types, and valid values:\n     *\n     * <table border=\"1\">\n     *     <tr> <th>Key</th>         <th>Type</th>    <th>Valid values</th> </tr>\n     *     <tr> <td>id</td>          <td>Integer</td> <td></td>             </tr>\n     *     <tr> <td>title</td>       <td>String</td>  <td></td>             </tr>\n     *     <tr> <td>dating</td>      <td>String</td>  <td>A, R</td>         </tr>\n     *     <tr> <td>unmeas_pre</td>  <td>Integer</td> <td></td>             </tr>\n     *     <tr> <td>unmeas_post</td> <td>Integer</td> <td></td>             </tr>\n     *     <tr> <td>filename</td>    <td>String</td>  <td></td>             </tr>\n     *     <tr> <td>comments</td>    <td>String</td>  <td></td>             </tr>\n     *     <tr> <td>type</td>        <td>String</td>  <td>S, H, C</td>      </tr>\n     *     <tr> <td>species</td>     <td>String</td>  <td></td>             </tr>\n     *     <tr> <td>sapwood</td>     <td>Integer</td> <td></td>             </tr>\n     *     <tr> <td>pith</td>        <td>String</td>  <td>+, *, N</td>      </tr>\n     *     <tr> <td>terminal</td>    <td>String</td>  <td>v, vv, B, W</td>  </tr>\n     *     <tr> <td>continuous</td>  <td>String</td>  <td>C, R, N</td>      </tr>\n     *     <tr> <td>quality</td>     <td>String</td>  <td>+, ++</td>        </tr>\n     *     <tr> <td>format</td>      <td>String</td>  <td>R, I</td>         </tr>\n     *     <tr> <td>index_type</td>  <td>Integer</td> <td></td>             </tr>\n     *     <tr> <td>reconciled</td>  <td>String</td>  <td>Y,N</td>          </tr>\n     *     <tr> <td>author</td>      <td>String</td>  <td></td>             </tr>\n     * </table>\n     *\n     * \t<code>data</code>, <code>count</code>, <code>range</code>,\n     * \t<code>wj</code>, and <code>elements</code> aren't stored in\n     * \t<code>meta</code> - they're their own members.\n     *\n     * \t@see corina.formats.Corina\n     */\n    public Map meta;\n\n    // WRITEME: need corresponding setString(), setInteger().\n    // WRITEME: make meta private, eventually.\n    // WRITEME: add lazy-loaders here.\n    // WRITEME: and don't load on construction!\n    // get a string field from this sample.\n    public String getString(String field) {\n        // TODO: load, if needed.\n        Object val = meta.get(field);\n        if (val != null && val instanceof String)\n            return (String) val;\n        return null;\n    }\n\n    // get an int field from this sample.\n    // (would be int, but can't return null then -- use exception?)\n    public Integer getInteger(String field) {\n        // TODO: load, if needed.\n        Object val = meta.get(field);\n        if (val != null && val instanceof Integer)\n            return (Integer) val;\n        return null;\n    }\n\n    // get a list-of-numbers field from this sample.\n    // (what about elements?)\n    public List getList(String field) {\n        // TODO: load, if needed.\n        if (field.equals(\"data\"))\n            return data;\n        else if (field.equals(\"count\"))\n            return count;\n        else if (field.equals(\"incr\"))\n            return incr;\n        else if (field.equals(\"decr\"))\n            return decr;\n        return null;\n    }\n\n    /**\n     * Number of samples in the sum at any given point.\n     */\n    public List count = null;\n\n    // weiserjahre\n    public List incr = null, decr = null;\n\n    // does it have weiserjahre?\n    public boolean hasWeiserjahre() {\n        return (incr != null);\n    }\n\n    /**\n     * Elements (in a List) that were put into this sum.\n     */\n    public List elements = null;\n\n    /**\n     *  Default constructor.  Defaults:\n     * \t<ul>\n     * \t  <li><code>data</code> and <code>count</code> are initialized but empty\n     * \t  <li><code>range</code> is initialized\n     * \t  <li><code>meta</code> is initialized, and:\n     * \t      <ul>\n     * \t        <li>Tag \"title\" is set to \"Untitled\"\n     * \t\t<li>Tag \"author\" is set to the value of system property\n     * \t\t    <code>user.name</code>\n     * \t      </ul>\n     * \t  <li><code>wj</code> is <code>null</code>\n     * \t  <li><code>elements</code> is <code>null</code>\n     * \t</ul>\n     * \t@see #meta\n     */\n    public Sample() {\n        // make defaults: empty\n        data = new ArrayList();\n        range = new Range();\n        meta = new HashMap();\n        // store username, if known\n        if (System.getProperty(\"user.name\") != null)\n            meta.put(\"author\", System.getProperty(\"user.name\"));\n        // initialize empty metadata with defaults?\n        meta.put(\"title\", I18n.getText(\"Untitled\"));\n        // metadata NOT changed\n        metadataChanged = false;\n    }\n\n    /*\n    // TESTING: single-instance samples (and Sample(String) to become private)\n    public static Sample getSample(String filename) throws IOException {\n\t// check map\n\tSample s = null;\n\tif (samples.containsKey(filename)) {\n\t    s = (Sample) ((Reference) samples.get(filename)).get();\n\t    // BUG: what if what's on disk is newer than what's in memory?\n\t    // (if it's ONLY weakly referenced, just update it)\n\t    // (if somebody else is viewing it, better ask the user)\n\t}\n\tif (s == null)\n\t    s = new Sample(filename);\n\tsamples.put(filename, new WeakReference(s));\n\treturn s;\n\t// won't this map keep accumulating nulls?  well, probably not many.\n\t// but shouldn't i try to take them out somehow?\n    }\n    private static Map samples = new HashMap();\n*/\n    /**\n     *  Create a new Sample from a given file on disk.\n     * \t@param filename the name of the file to load\n     * \t@exception FileNotFoundException if the file doesn't exist\n     * \t@exception WrongFiletypeException if the file is not a Sample\n     * \t@exception IOException if there is an I/O error while loading\n     * \tthe file\n     */\n    /*\n    public Sample(String filename) throws FileNotFoundException, WrongFiletypeException, IOException {\n\t// make it like any other Sample\n\tthis();\n\n\t// load the file; this call throws the exceptions\n\tload(filename);\n\n\t// 99%+ of the time you're loading a sample from disk, you\n\t// won't be adding to it, so trim it.\n\ttrimAllToSize();\n    }\n    */\n    /*\n    public Sample(URL url) throws IOException {\n        this();\n\ttry {\n            Class.forName(\"corina.browser.ItrdbURLConnection\");\n\t} catch (ClassNotFoundException cnfe) {\n\t    corina.gui.Bug.bug(cnfe);\n\t}\n        load(new InputStreamReader(url.openStream()));\n        meta.put(\"filename\", url.toString());\n        trimAllToSize();\n    }\n    */\n    private void trimAllToSize() {\n        ((ArrayList) data).trimToSize();\n        if (count != null)\n            ((ArrayList) count).trimToSize();\n        if (hasWeiserjahre()) {\n            ((ArrayList) incr).trimToSize();\n            ((ArrayList) decr).trimToSize();\n        }\n    }\n\n    // copy each part of source to target.  shallow copy, no events, etc.\n    // used only by editor (paste) -- bad interface!\n    public static void copy(Sample source, Sample target) {\n        target.data = source.data;\n        target.range = source.range;\n        target.count = source.count;\n        target.meta = source.meta;\n        target.incr = source.incr;\n        target.decr = source.decr;\n        target.elements = source.elements;\n    }\n\n    /**\n     *  Return true if the sample is indexed, else false.\n     * \t@return true if the sample is indexed\n     */\n    public boolean isIndexed() {\n        String type = (String) meta.get(\"format\");\n        return (type != null && Character.toUpperCase(type.charAt(0)) == 'I');\n    }\n\n    /**\n     *  <p>Return true if the sample is summed, else false.  Here\n     * \t\"summed\" is defined as:</p>\n     * \t<ul>\n     * \t  <li>has a list of elements, or\n     * \t  <li>has count data\n     * \t</ul>\n     * \t@return true if the sample is summed\n     */\n    public boolean isSummed() {\n        return (elements != null || count != null);\n    }\n\n    /**\n     *  Return true if the sample is absolutely dated, else false.\n     * \t@return true if the sample is absolutely dated\n     */\n    public boolean isAbsolute() {\n        String dating = (String) meta.get(\"dating\");\n        return (dating != null && Character.toUpperCase(dating.charAt(0)) == 'A');\n    }\n\n    private boolean modified = false;\n\n    /**\n     *  Return true if the file was modified since last save.\n     * \t@return if the sample has been modified\n     */\n    public boolean isModified() {\n        return modified;\n    }\n\n    /**\n     * Set the modified flag.\n     */\n    public void setModified() {\n        modified = true;\n    }\n\n    /**\n     * Clear the modified flag.\n     */\n    public void clearModified() {\n        modified = false;\n    }\n\n    /**\n     *  Return the data for a graph.\n     * \t@return data to graph, as a List of Integers\n     */\n    public List getData() {\n        return data;\n    }\n\n    /**\n     *  Return the start date for a graph.\n     * \t@return start date of data to graph\n     */\n    public Year getStart() {\n        return range.getStart();\n    }\n\n    /**\n     *  Return the default scale factor for graphing.\n     * \t@return scale factor of 1.0, or 0.1 for indexed files\n     */\n    public float getScale() {\n        return (isIndexed() ? 0.1f : 1.0f);\n    }\n\n    /**\n     *  Return the sample's title.\n     * \t@return the \"title\" tag from meta\n     */\n    public String toString() {\n        String name = meta.get(\"title\") + \" \" + range.toStringWithSpan();\n        if (// not aqua-ish, but how to do it the real way?\n        isModified())\n            name = \"* \" + name;\n        return name;\n    }\n\n    /**\n     *  Count the total number of rings.  If this is a raw sample,\n     * \treturns the length.  If this is a summed sample, returns the\n     * \tsum of the count List.\n     * \t@return the total number of rings in this sample\n     */\n    public int countRings() {\n        // it's not a sum, so the number of rings is just the length\n        // (if (null count) (length data) ...\n        if (count == null)\n            return data.size();\n        // it's a sum, so the number of rings is the sum of the number\n        // of measurements for each year\n        // ... (apply '+ count))\n        int n = 0, size = count.size();\n        for (int i = 0; i < size; i++) n += ((Integer) count.get(i)).intValue();\n        return n;\n    }\n\n    // radius of the sample; only relevant for raw samples (better to\n    // return 0.0 for indexed sample?  throw ex?)\n    public int computeRadius() {\n        // (apply '+ data)\n        int n = data.size();\n        int sum = 0;\n        for (int i = 0; i < n; i++) sum += ((Number) data.get(i)).intValue();\n        return sum;\n    }\n\n    // number of intervals with >3 samples\n    public int count3SampleIntervals() {\n        // (count-if #'(lambda (x) (> x 3)) (sample-count s))\n        if (count == null)\n            return 0;\n        int n = count.size();\n        int three = 0;\n        for (int i = 0; i < n; i++) if (((Integer) count.get(i)).intValue() > 3)\n            three++;\n        return three;\n    }\n\n    // count number of significant (weiserjahre) intervals\n    public int countSignificantIntervals() {\n        if (!hasWeiserjahre())\n            return 0;\n        int sig = 0, n = incr.size();\n        for (int i = 0; i < n; i++) if (Weiserjahre.isSignificant(this, i))\n            sig++;\n        return sig;\n    }\n\n    //\n    // load/save\n    //\n    // create a new sample, from a file on disk\n    public Sample(String filename) throws IOException {\n        // new @-notation\n        if (filename.startsWith(\"@\"))\n            filename = System.getProperty(\"corina.dir.data\", \".\") + filename.substring(1);\n        // (assumes c.d.r ends with file.sep!)\n        Sample s = Files.load(filename);\n        copy(s, this);\n        trimAllToSize();\n    }\n\n    /* Determining if a file is indexed: The 800 Rule\n\n    (This was originally for Tucson files, but now I don't think it\n    applies to them, so it got dumped here.  It might actually be\n    useful here.)\n\n    If a Tucson file is summed, is it indexed?  There doesn't appear\n    to be any way to know for sure.  If it's not summed, and it's\n    processed, then it must be indexing that caused it to be processed.\n    But if it's summed, you know it's processed, but there's no way to\n    tell if it's indexed.\n    \n    So I invented\n\n       /The 800-Rule/: If dataset is known to be processed, but not\n       summed, then it is indexed if the average data value is greater\n       than 800.\n\n    Because indexes are based around 1000 (parts-per-thousand), the\n    average would be near 1000.  Raw data are much lower, like 50-100.\n    This fails if you have a raw dataset with rings larger than 8mm on\n    average (a very big tree), or an indexed dataset where the curve\n    overshoots by more than 25% on average (a very poor index).  It\n    doesn't really matter that this fails <i>sometimes</i>, because\n    without this rule, it would fail <i>always</i>.  So it's a hack,\n    but it's still the right thing to do.\n\n    I've recently learned that there's really no need for the\n    800-rule on Tucson files.  Apparently nobody at Tucson ever thought\n    of summing non-indexed files, so summed implies indexed.  I think.\n    (How do they store indexed files for summing, then?)  Oh well, we\n    had fun, anyway.\n\n    This used to be in Tucson.java, then in TwoColumn.java, but it\n    only looks at the Sample, so it really belongs here.  At least I\n    can put it with the load/save stuff here.\n\n(later) pik says there can be raw summed [tucson] files, and pulls out some\n        old datasets to show me ... that there are raw, indexed, and\n        summed indexed formats for tucson.  but he wants it back in,\n        so we give it to him. */\n    public void guessIndexed() {\n        meta.put(\"format\", computeRadius() / data.size() > 800 ? \"I\" : \"R\");\n    }\n\n    // make sure data/count/wj are the same size as range.span, and\n    // contain all legit Numbers.  turns nulls/non-numbers into 0's.\n    public void verify() {\n        int n = range.span();\n        // what to do if they're the wrong size -- adjust range if the data\n        // are all the same size, but pad with zeros if only one is off?\n        // data: turn nulls/non-numbers into 0\n        for (int i = 0; i < n; i++) {\n            Object o = data.get(i);\n            if (o == null || !(o instanceof Number))\n                data.set(i, new Integer(0));\n        }\n        // TODO: do count, WJ as well\n    }\n\n    /**\n     *       Save this Sample to disk.\n     *\n     *       @param filename the name of the file to save to\n     *       @exception IOException if an I/O error occurs\n     */\n    public void save(String filename) throws IOException {\n        Files.save(this, filename);\n    }\n\n    /**\n     *       Save this Sample to disk to the same filename it had\n     *       previously.\n     *\n     *       @exception IOException if an I/O error occurs\n     */\n    public void save() throws IOException {\n        // BUG!  assumes filename exists in meta map -- what if it doesn't?\n        save((String) meta.get(\"filename\"));\n    }\n\n    public Preview getPreview() {\n        return new SamplePreview(this);\n    }\n\n    private static class SamplePreview extends Preview {\n\n        SamplePreview(Sample s) {\n            title = s.meta.get(\"title\").toString();\n            // range -- toStringWithSpan() does \"(a - b, n=c)\", i want \"a - b (n=c)\"\n            items.add(s.range + \" (n=\" + s.range.span() + \")\");\n            // species\n            if (s.meta.containsKey(\"species\"))\n                items.add(I18n.getText(\"species\") + \": \" + s.meta.get(\"species\"));\n            // format\n            items.add(I18n.getText(\"format\") + \": \" + s.meta.get(\"filetype\"));\n            // indexed, summed\n            if (s.isIndexed())\n                items.add(I18n.getText(\"indexed\"));\n            if (s.isSummed()) {\n                String summedLine = I18n.getText(\"summed\");\n                if (s.elements != null)\n                    summedLine += \" (\" + s.elements.size() + \" \" + I18n.getText(\"elements\") + \")\";\n                items.add(summedLine);\n            }\n        }\n    }\n\n    //\n    // miscellaneous procedures that are better off here than elsewhere\n    //\n    // is this sample oak?  (assumes meta/species is a string, if present)\n    // (FIXME: if it's not a string, it's not oak.)\n    // checks for \"oak\" or \"quercus\".\n    public boolean isOak() {\n        String species = (String) meta.get(\"species\");\n        if (species == null)\n            return false;\n        species = species.toLowerCase();\n        return (species.indexOf(\"oak\") != -1 || species.indexOf(\"quercus\") != -1);\n    }\n\n    // is this sample editable?  no, if it's been indexed or summed.\n    public boolean isEditable() {\n        return (!isIndexed()) && (!isSummed());\n    }\n\n    //\n    // event model\n    //\n    private Vector listeners = new Vector();\n\n    public synchronized void addSampleListener(SampleListener l) {\n        if (!listeners.contains(l))\n            listeners.add(l);\n    }\n\n    public synchronized void removeSampleListener(SampleListener l) {\n        listeners.remove(l);\n    }\n\n    // fire an arbitrary sample event called |method|.  each\n    // fireSampleXYZhappened() method is virtually identical, so their\n    // guts were refactored into here.  this makes adding new events\n    // painless.  (this was taken from a web page -- url?)\n    private void fireSampleEvent(String method) {\n        // alert all listeners\n        Vector l;\n        synchronized (this) {\n            l = (Vector) listeners.clone();\n        }\n        int size = l.size();\n        if (size == 0)\n            return;\n        SampleEvent e = new SampleEvent(this);\n        try {\n            // **\n            Class[] types = new Class[] { SampleEvent.class };\n            Method m = SampleListener.class.getMethod(method, types);\n            Object[] args = new Object[] { e };\n            for (int i = 0; i < size; i++) {\n                SampleListener listener = (SampleListener) l.elementAt(i);\n                // this is like \"listener.method(e)\" (along with the 2 lines\n                // marked ** above)\n                m.invoke(listener, args);\n            }\n        } catch (Exception ex) {\n            // BUG: these exceptions are caught too coursely!\n            // just ignore them all... (?)\n        }\n    }\n\n    // there's an elegant refactoring waiting to be done here, but i'm too wired on caffiene right now to see it.\n    // => see also mapframe's toolbox decorators.\n    public void fireSampleRedated() {\n        fireSampleEvent(\"sampleRedated\");\n    }\n\n    public void fireSampleDataChanged() {\n        fireSampleEvent(\"sampleDataChanged\");\n    }\n\n    public void fireSampleMetadataChanged() {\n        metadataChanged = true;\n        fireSampleEvent(\"sampleMetadataChanged\");\n    }\n\n    public void fireSampleElementsChanged() {\n        fireSampleEvent(\"sampleElementsChanged\");\n    }\n\n    // see if the metadata was changed -- true (loaded samples) unless zero-arg constructor called\n    private boolean metadataChanged = true;\n\n    public boolean wasMetadataChanged() {\n        return metadataChanged;\n    }\n\n    /* FUTURE: */\n    private UndoableEditSupport undoSupport = new UndoableEditSupport();\n\n    public void postEdit(UndoableEdit e) {\n        undoSupport.postEdit(e);\n    }\n}\n",
		"id": "/EvoSuiteBenchmark/35_corina/src/main/java/corina/Sample_8Test.java",
		"test_prompt": "// Sample_8Test.java\n// This file is part of Corina.\n//\n// Corina is free software; you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation; either version 2 of the License, or\n// (at your option) any later version.\n//\n// Corina is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Corina; if not, write to the Free Software\n// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n//\n// Copyright 2001 Ken Harris <kbh7@cornell.edu>\n//\npackage corina;\n\nimport corina.io.Files;\nimport corina.formats.WrongFiletypeException;\nimport corina.graph.Graphable;\nimport corina.ui.I18n;\nimport java.io.File;\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.Reader;\nimport java.io.InputStreamReader;\nimport java.io.IOException;\nimport java.io.FileNotFoundException;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Vector;\nimport java.util.Map;\nimport java.util.HashMap;\nimport java.net.URL;\nimport java.lang.reflect.Method;\nimport java.lang.ref.Reference;\nimport java.lang.ref.WeakReference;\nimport javax.swing.undo.*;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link Sample}.\n* It contains ten unit test cases for the {@link Sample#countSignificantIntervals()} method.\n*/\nclass Sample_8Test {"
	},
	{
		"original_code": "// Sample.java\n//\n// This file is part of Corina.\n//\n// Corina is free software; you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation; either version 2 of the License, or\n// (at your option) any later version.\n//\n// Corina is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Corina; if not, write to the Free Software\n// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n//\n// Copyright 2001 Ken Harris <kbh7@cornell.edu>\n//\npackage corina;\n\nimport corina.io.Files;\nimport corina.formats.WrongFiletypeException;\nimport corina.graph.Graphable;\nimport corina.ui.I18n;\nimport java.io.File;\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.Reader;\nimport java.io.InputStreamReader;\nimport java.io.IOException;\nimport java.io.FileNotFoundException;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Vector;\nimport java.util.Map;\nimport java.util.HashMap;\nimport java.net.URL;\nimport java.lang.reflect.Method;\nimport java.lang.ref.Reference;\nimport java.lang.ref.WeakReference;\nimport javax.swing.undo.*;\n\n/**\n *   Class representing a reading of a dendro sample.\n *\n *   <p>Currently, this stores:</p>\n *\n *   <ul>\n *     <li>series: data, count, wj (up/down, in one list)</li>\n *     <li>range</li>\n *     <li>a hashtable for metadata</li>\n *     <li>a list of elements</li>\n *   </ul>\n *\n *   @author Ken Harris &lt;kbh7 <i style=\"color: gray\">at</i> cornell <i style=\"color: gray\">dot</i> edu&gt;\n *   @version $Id: Sample.java,v 1.6 2006/01/04 06:51:55 lucasmo Exp $\n */\n// IDEA: make a samplefactory, so 2 calls to sample(filename) return\n// the same object.  better yet, an editor factory so a second\n// editor(sample) bringstofront the existing editor.\npublic class Sample implements Previewable, Graphable {\n\n    /**\n     *  The value of a missing ring, 2.  Anything less than or equal\n     * \tto this value is considered a MR.\n     */\n    public static final int MR = 2;\n\n    /**\n     * Data, as a List of Integers.\n     */\n    public List data;\n\n    /**\n     * Data range.\n     */\n    public Range range;\n\n    /**\n     *  Sample metadata, as a (String, Object) Map.  The following\n     *         table lists the standard keys, their data types, and valid values:\n     *\n     * <table border=\"1\">\n     *     <tr> <th>Key</th>         <th>Type</th>    <th>Valid values</th> </tr>\n     *     <tr> <td>id</td>          <td>Integer</td> <td></td>             </tr>\n     *     <tr> <td>title</td>       <td>String</td>  <td></td>             </tr>\n     *     <tr> <td>dating</td>      <td>String</td>  <td>A, R</td>         </tr>\n     *     <tr> <td>unmeas_pre</td>  <td>Integer</td> <td></td>             </tr>\n     *     <tr> <td>unmeas_post</td> <td>Integer</td> <td></td>             </tr>\n     *     <tr> <td>filename</td>    <td>String</td>  <td></td>             </tr>\n     *     <tr> <td>comments</td>    <td>String</td>  <td></td>             </tr>\n     *     <tr> <td>type</td>        <td>String</td>  <td>S, H, C</td>      </tr>\n     *     <tr> <td>species</td>     <td>String</td>  <td></td>             </tr>\n     *     <tr> <td>sapwood</td>     <td>Integer</td> <td></td>             </tr>\n     *     <tr> <td>pith</td>        <td>String</td>  <td>+, *, N</td>      </tr>\n     *     <tr> <td>terminal</td>    <td>String</td>  <td>v, vv, B, W</td>  </tr>\n     *     <tr> <td>continuous</td>  <td>String</td>  <td>C, R, N</td>      </tr>\n     *     <tr> <td>quality</td>     <td>String</td>  <td>+, ++</td>        </tr>\n     *     <tr> <td>format</td>      <td>String</td>  <td>R, I</td>         </tr>\n     *     <tr> <td>index_type</td>  <td>Integer</td> <td></td>             </tr>\n     *     <tr> <td>reconciled</td>  <td>String</td>  <td>Y,N</td>          </tr>\n     *     <tr> <td>author</td>      <td>String</td>  <td></td>             </tr>\n     * </table>\n     *\n     * \t<code>data</code>, <code>count</code>, <code>range</code>,\n     * \t<code>wj</code>, and <code>elements</code> aren't stored in\n     * \t<code>meta</code> - they're their own members.\n     *\n     * \t@see corina.formats.Corina\n     */\n    public Map meta;\n\n    // WRITEME: need corresponding setString(), setInteger().\n    // WRITEME: make meta private, eventually.\n    // WRITEME: add lazy-loaders here.\n    // WRITEME: and don't load on construction!\n    // get a string field from this sample.\n    public String getString(String field) {\n        // TODO: load, if needed.\n        Object val = meta.get(field);\n        if (val != null && val instanceof String)\n            return (String) val;\n        return null;\n    }\n\n    // get an int field from this sample.\n    // (would be int, but can't return null then -- use exception?)\n    public Integer getInteger(String field) {\n        // TODO: load, if needed.\n        Object val = meta.get(field);\n        if (val != null && val instanceof Integer)\n            return (Integer) val;\n        return null;\n    }\n\n    // get a list-of-numbers field from this sample.\n    // (what about elements?)\n    public List getList(String field) {\n        // TODO: load, if needed.\n        if (field.equals(\"data\"))\n            return data;\n        else if (field.equals(\"count\"))\n            return count;\n        else if (field.equals(\"incr\"))\n            return incr;\n        else if (field.equals(\"decr\"))\n            return decr;\n        return null;\n    }\n\n    /**\n     * Number of samples in the sum at any given point.\n     */\n    public List count = null;\n\n    // weiserjahre\n    public List incr = null, decr = null;\n\n    // does it have weiserjahre?\n    public boolean hasWeiserjahre() {\n        return (incr != null);\n    }\n\n    /**\n     * Elements (in a List) that were put into this sum.\n     */\n    public List elements = null;\n\n    /**\n     *  Default constructor.  Defaults:\n     * \t<ul>\n     * \t  <li><code>data</code> and <code>count</code> are initialized but empty\n     * \t  <li><code>range</code> is initialized\n     * \t  <li><code>meta</code> is initialized, and:\n     * \t      <ul>\n     * \t        <li>Tag \"title\" is set to \"Untitled\"\n     * \t\t<li>Tag \"author\" is set to the value of system property\n     * \t\t    <code>user.name</code>\n     * \t      </ul>\n     * \t  <li><code>wj</code> is <code>null</code>\n     * \t  <li><code>elements</code> is <code>null</code>\n     * \t</ul>\n     * \t@see #meta\n     */\n    public Sample() {\n        // make defaults: empty\n        data = new ArrayList();\n        range = new Range();\n        meta = new HashMap();\n        // store username, if known\n        if (System.getProperty(\"user.name\") != null)\n            meta.put(\"author\", System.getProperty(\"user.name\"));\n        // initialize empty metadata with defaults?\n        meta.put(\"title\", I18n.getText(\"Untitled\"));\n        // metadata NOT changed\n        metadataChanged = false;\n    }\n\n    /*\n    // TESTING: single-instance samples (and Sample(String) to become private)\n    public static Sample getSample(String filename) throws IOException {\n\t// check map\n\tSample s = null;\n\tif (samples.containsKey(filename)) {\n\t    s = (Sample) ((Reference) samples.get(filename)).get();\n\t    // BUG: what if what's on disk is newer than what's in memory?\n\t    // (if it's ONLY weakly referenced, just update it)\n\t    // (if somebody else is viewing it, better ask the user)\n\t}\n\tif (s == null)\n\t    s = new Sample(filename);\n\tsamples.put(filename, new WeakReference(s));\n\treturn s;\n\t// won't this map keep accumulating nulls?  well, probably not many.\n\t// but shouldn't i try to take them out somehow?\n    }\n    private static Map samples = new HashMap();\n*/\n    /**\n     *  Create a new Sample from a given file on disk.\n     * \t@param filename the name of the file to load\n     * \t@exception FileNotFoundException if the file doesn't exist\n     * \t@exception WrongFiletypeException if the file is not a Sample\n     * \t@exception IOException if there is an I/O error while loading\n     * \tthe file\n     */\n    /*\n    public Sample(String filename) throws FileNotFoundException, WrongFiletypeException, IOException {\n\t// make it like any other Sample\n\tthis();\n\n\t// load the file; this call throws the exceptions\n\tload(filename);\n\n\t// 99%+ of the time you're loading a sample from disk, you\n\t// won't be adding to it, so trim it.\n\ttrimAllToSize();\n    }\n    */\n    /*\n    public Sample(URL url) throws IOException {\n        this();\n\ttry {\n            Class.forName(\"corina.browser.ItrdbURLConnection\");\n\t} catch (ClassNotFoundException cnfe) {\n\t    corina.gui.Bug.bug(cnfe);\n\t}\n        load(new InputStreamReader(url.openStream()));\n        meta.put(\"filename\", url.toString());\n        trimAllToSize();\n    }\n    */\n    private void trimAllToSize() {\n        ((ArrayList) data).trimToSize();\n        if (count != null)\n            ((ArrayList) count).trimToSize();\n        if (hasWeiserjahre()) {\n            ((ArrayList) incr).trimToSize();\n            ((ArrayList) decr).trimToSize();\n        }\n    }\n\n    // copy each part of source to target.  shallow copy, no events, etc.\n    // used only by editor (paste) -- bad interface!\n    public static void copy(Sample source, Sample target) {\n        target.data = source.data;\n        target.range = source.range;\n        target.count = source.count;\n        target.meta = source.meta;\n        target.incr = source.incr;\n        target.decr = source.decr;\n        target.elements = source.elements;\n    }\n\n    /**\n     *  Return true if the sample is indexed, else false.\n     * \t@return true if the sample is indexed\n     */\n    public boolean isIndexed() {\n        String type = (String) meta.get(\"format\");\n        return (type != null && Character.toUpperCase(type.charAt(0)) == 'I');\n    }\n\n    /**\n     *  <p>Return true if the sample is summed, else false.  Here\n     * \t\"summed\" is defined as:</p>\n     * \t<ul>\n     * \t  <li>has a list of elements, or\n     * \t  <li>has count data\n     * \t</ul>\n     * \t@return true if the sample is summed\n     */\n    public boolean isSummed() {\n        return (elements != null || count != null);\n    }\n\n    /**\n     *  Return true if the sample is absolutely dated, else false.\n     * \t@return true if the sample is absolutely dated\n     */\n    public boolean isAbsolute() {\n        String dating = (String) meta.get(\"dating\");\n        return (dating != null && Character.toUpperCase(dating.charAt(0)) == 'A');\n    }\n\n    private boolean modified = false;\n\n    /**\n     *  Return true if the file was modified since last save.\n     * \t@return if the sample has been modified\n     */\n    public boolean isModified() {\n        return modified;\n    }\n\n    /**\n     * Set the modified flag.\n     */\n    public void setModified() {\n        modified = true;\n    }\n\n    /**\n     * Clear the modified flag.\n     */\n    public void clearModified() {\n        modified = false;\n    }\n\n    /**\n     *  Return the data for a graph.\n     * \t@return data to graph, as a List of Integers\n     */\n    public List getData() {\n        return data;\n    }\n\n    /**\n     *  Return the start date for a graph.\n     * \t@return start date of data to graph\n     */\n    public Year getStart() {\n        return range.getStart();\n    }\n\n    /**\n     *  Return the default scale factor for graphing.\n     * \t@return scale factor of 1.0, or 0.1 for indexed files\n     */\n    public float getScale() {\n        return (isIndexed() ? 0.1f : 1.0f);\n    }\n\n    /**\n     *  Return the sample's title.\n     * \t@return the \"title\" tag from meta\n     */\n    public String toString() {\n        String name = meta.get(\"title\") + \" \" + range.toStringWithSpan();\n        if (// not aqua-ish, but how to do it the real way?\n        isModified())\n            name = \"* \" + name;\n        return name;\n    }\n\n    /**\n     *  Count the total number of rings.  If this is a raw sample,\n     * \treturns the length.  If this is a summed sample, returns the\n     * \tsum of the count List.\n     * \t@return the total number of rings in this sample\n     */\n    public int countRings() {\n        // it's not a sum, so the number of rings is just the length\n        // (if (null count) (length data) ...\n        if (count == null)\n            return data.size();\n        // it's a sum, so the number of rings is the sum of the number\n        // of measurements for each year\n        // ... (apply '+ count))\n        int n = 0, size = count.size();\n        for (int i = 0; i < size; i++) n += ((Integer) count.get(i)).intValue();\n        return n;\n    }\n\n    // radius of the sample; only relevant for raw samples (better to\n    // return 0.0 for indexed sample?  throw ex?)\n    public int computeRadius() {\n        // (apply '+ data)\n        int n = data.size();\n        int sum = 0;\n        for (int i = 0; i < n; i++) sum += ((Number) data.get(i)).intValue();\n        return sum;\n    }\n\n    // number of intervals with >3 samples\n    public int count3SampleIntervals() {\n        // (count-if #'(lambda (x) (> x 3)) (sample-count s))\n        if (count == null)\n            return 0;\n        int n = count.size();\n        int three = 0;\n        for (int i = 0; i < n; i++) if (((Integer) count.get(i)).intValue() > 3)\n            three++;\n        return three;\n    }\n\n    // count number of significant (weiserjahre) intervals\n    public int countSignificantIntervals() {\n        if (!hasWeiserjahre())\n            return 0;\n        int sig = 0, n = incr.size();\n        for (int i = 0; i < n; i++) if (Weiserjahre.isSignificant(this, i))\n            sig++;\n        return sig;\n    }\n\n    //\n    // load/save\n    //\n    // create a new sample, from a file on disk\n    public Sample(String filename) throws IOException {\n        // new @-notation\n        if (filename.startsWith(\"@\"))\n            filename = System.getProperty(\"corina.dir.data\", \".\") + filename.substring(1);\n        // (assumes c.d.r ends with file.sep!)\n        Sample s = Files.load(filename);\n        copy(s, this);\n        trimAllToSize();\n    }\n\n    /* Determining if a file is indexed: The 800 Rule\n\n    (This was originally for Tucson files, but now I don't think it\n    applies to them, so it got dumped here.  It might actually be\n    useful here.)\n\n    If a Tucson file is summed, is it indexed?  There doesn't appear\n    to be any way to know for sure.  If it's not summed, and it's\n    processed, then it must be indexing that caused it to be processed.\n    But if it's summed, you know it's processed, but there's no way to\n    tell if it's indexed.\n    \n    So I invented\n\n       /The 800-Rule/: If dataset is known to be processed, but not\n       summed, then it is indexed if the average data value is greater\n       than 800.\n\n    Because indexes are based around 1000 (parts-per-thousand), the\n    average would be near 1000.  Raw data are much lower, like 50-100.\n    This fails if you have a raw dataset with rings larger than 8mm on\n    average (a very big tree), or an indexed dataset where the curve\n    overshoots by more than 25% on average (a very poor index).  It\n    doesn't really matter that this fails <i>sometimes</i>, because\n    without this rule, it would fail <i>always</i>.  So it's a hack,\n    but it's still the right thing to do.\n\n    I've recently learned that there's really no need for the\n    800-rule on Tucson files.  Apparently nobody at Tucson ever thought\n    of summing non-indexed files, so summed implies indexed.  I think.\n    (How do they store indexed files for summing, then?)  Oh well, we\n    had fun, anyway.\n\n    This used to be in Tucson.java, then in TwoColumn.java, but it\n    only looks at the Sample, so it really belongs here.  At least I\n    can put it with the load/save stuff here.\n\n(later) pik says there can be raw summed [tucson] files, and pulls out some\n        old datasets to show me ... that there are raw, indexed, and\n        summed indexed formats for tucson.  but he wants it back in,\n        so we give it to him. */\n    public void guessIndexed() {\n        meta.put(\"format\", computeRadius() / data.size() > 800 ? \"I\" : \"R\");\n    }\n\n    // make sure data/count/wj are the same size as range.span, and\n    // contain all legit Numbers.  turns nulls/non-numbers into 0's.\n    public void verify() {\n        int n = range.span();\n        // what to do if they're the wrong size -- adjust range if the data\n        // are all the same size, but pad with zeros if only one is off?\n        // data: turn nulls/non-numbers into 0\n        for (int i = 0; i < n; i++) {\n            Object o = data.get(i);\n            if (o == null || !(o instanceof Number))\n                data.set(i, new Integer(0));\n        }\n        // TODO: do count, WJ as well\n    }\n\n    /**\n     *       Save this Sample to disk.\n     *\n     *       @param filename the name of the file to save to\n     *       @exception IOException if an I/O error occurs\n     */\n    public void save(String filename) throws IOException {\n        Files.save(this, filename);\n    }\n\n    /**\n     *       Save this Sample to disk to the same filename it had\n     *       previously.\n     *\n     *       @exception IOException if an I/O error occurs\n     */\n    public void save() throws IOException {\n        // BUG!  assumes filename exists in meta map -- what if it doesn't?\n        save((String) meta.get(\"filename\"));\n    }\n\n    public Preview getPreview() {\n        return new SamplePreview(this);\n    }\n\n    private static class SamplePreview extends Preview {\n\n        SamplePreview(Sample s) {\n            title = s.meta.get(\"title\").toString();\n            // range -- toStringWithSpan() does \"(a - b, n=c)\", i want \"a - b (n=c)\"\n            items.add(s.range + \" (n=\" + s.range.span() + \")\");\n            // species\n            if (s.meta.containsKey(\"species\"))\n                items.add(I18n.getText(\"species\") + \": \" + s.meta.get(\"species\"));\n            // format\n            items.add(I18n.getText(\"format\") + \": \" + s.meta.get(\"filetype\"));\n            // indexed, summed\n            if (s.isIndexed())\n                items.add(I18n.getText(\"indexed\"));\n            if (s.isSummed()) {\n                String summedLine = I18n.getText(\"summed\");\n                if (s.elements != null)\n                    summedLine += \" (\" + s.elements.size() + \" \" + I18n.getText(\"elements\") + \")\";\n                items.add(summedLine);\n            }\n        }\n    }\n\n    //\n    // miscellaneous procedures that are better off here than elsewhere\n    //\n    // is this sample oak?  (assumes meta/species is a string, if present)\n    // (FIXME: if it's not a string, it's not oak.)\n    // checks for \"oak\" or \"quercus\".\n    public boolean isOak() {\n        String species = (String) meta.get(\"species\");\n        if (species == null)\n            return false;\n        species = species.toLowerCase();\n        return (species.indexOf(\"oak\") != -1 || species.indexOf(\"quercus\") != -1);\n    }\n\n    // is this sample editable?  no, if it's been indexed or summed.\n    public boolean isEditable() {\n        return (!isIndexed()) && (!isSummed());\n    }\n\n    //\n    // event model\n    //\n    private Vector listeners = new Vector();\n\n    public synchronized void addSampleListener(SampleListener l) {\n        if (!listeners.contains(l))\n            listeners.add(l);\n    }\n\n    public synchronized void removeSampleListener(SampleListener l) {\n        listeners.remove(l);\n    }\n\n    // fire an arbitrary sample event called |method|.  each\n    // fireSampleXYZhappened() method is virtually identical, so their\n    // guts were refactored into here.  this makes adding new events\n    // painless.  (this was taken from a web page -- url?)\n    private void fireSampleEvent(String method) {\n        // alert all listeners\n        Vector l;\n        synchronized (this) {\n            l = (Vector) listeners.clone();\n        }\n        int size = l.size();\n        if (size == 0)\n            return;\n        SampleEvent e = new SampleEvent(this);\n        try {\n            // **\n            Class[] types = new Class[] { SampleEvent.class };\n            Method m = SampleListener.class.getMethod(method, types);\n            Object[] args = new Object[] { e };\n            for (int i = 0; i < size; i++) {\n                SampleListener listener = (SampleListener) l.elementAt(i);\n                // this is like \"listener.method(e)\" (along with the 2 lines\n                // marked ** above)\n                m.invoke(listener, args);\n            }\n        } catch (Exception ex) {\n            // BUG: these exceptions are caught too coursely!\n            // just ignore them all... (?)\n        }\n    }\n\n    // there's an elegant refactoring waiting to be done here, but i'm too wired on caffiene right now to see it.\n    // => see also mapframe's toolbox decorators.\n    public void fireSampleRedated() {\n        fireSampleEvent(\"sampleRedated\");\n    }\n\n    public void fireSampleDataChanged() {\n        fireSampleEvent(\"sampleDataChanged\");\n    }\n\n    public void fireSampleMetadataChanged() {\n        metadataChanged = true;\n        fireSampleEvent(\"sampleMetadataChanged\");\n    }\n\n    public void fireSampleElementsChanged() {\n        fireSampleEvent(\"sampleElementsChanged\");\n    }\n\n    // see if the metadata was changed -- true (loaded samples) unless zero-arg constructor called\n    private boolean metadataChanged = true;\n\n    public boolean wasMetadataChanged() {\n        return metadataChanged;\n    }\n\n    /* FUTURE: */\n    private UndoableEditSupport undoSupport = new UndoableEditSupport();\n\n    public void postEdit(UndoableEdit e) {\n        undoSupport.postEdit(e);\n    }\n}\n",
		"id": "/EvoSuiteBenchmark/35_corina/src/main/java/corina/Sample_9Test.java",
		"test_prompt": "// Sample_9Test.java\n// This file is part of Corina.\n//\n// Corina is free software; you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation; either version 2 of the License, or\n// (at your option) any later version.\n//\n// Corina is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Corina; if not, write to the Free Software\n// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n//\n// Copyright 2001 Ken Harris <kbh7@cornell.edu>\n//\npackage corina;\n\nimport corina.io.Files;\nimport corina.formats.WrongFiletypeException;\nimport corina.graph.Graphable;\nimport corina.ui.I18n;\nimport java.io.File;\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.Reader;\nimport java.io.InputStreamReader;\nimport java.io.IOException;\nimport java.io.FileNotFoundException;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Vector;\nimport java.util.Map;\nimport java.util.HashMap;\nimport java.net.URL;\nimport java.lang.reflect.Method;\nimport java.lang.ref.Reference;\nimport java.lang.ref.WeakReference;\nimport javax.swing.undo.*;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link Sample}.\n* It contains ten unit test cases for the {@link Sample#isOak()} method.\n*/\nclass Sample_9Test {"
	},
	{
		"original_code": "// Sample.java\n//\n// This file is part of Corina.\n//\n// Corina is free software; you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation; either version 2 of the License, or\n// (at your option) any later version.\n//\n// Corina is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Corina; if not, write to the Free Software\n// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n//\n// Copyright 2001 Ken Harris <kbh7@cornell.edu>\n//\npackage corina;\n\nimport corina.io.Files;\nimport corina.formats.WrongFiletypeException;\nimport corina.graph.Graphable;\nimport corina.ui.I18n;\nimport java.io.File;\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.Reader;\nimport java.io.InputStreamReader;\nimport java.io.IOException;\nimport java.io.FileNotFoundException;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Vector;\nimport java.util.Map;\nimport java.util.HashMap;\nimport java.net.URL;\nimport java.lang.reflect.Method;\nimport java.lang.ref.Reference;\nimport java.lang.ref.WeakReference;\nimport javax.swing.undo.*;\n\n/**\n *   Class representing a reading of a dendro sample.\n *\n *   <p>Currently, this stores:</p>\n *\n *   <ul>\n *     <li>series: data, count, wj (up/down, in one list)</li>\n *     <li>range</li>\n *     <li>a hashtable for metadata</li>\n *     <li>a list of elements</li>\n *   </ul>\n *\n *   @author Ken Harris &lt;kbh7 <i style=\"color: gray\">at</i> cornell <i style=\"color: gray\">dot</i> edu&gt;\n *   @version $Id: Sample.java,v 1.6 2006/01/04 06:51:55 lucasmo Exp $\n */\n// IDEA: make a samplefactory, so 2 calls to sample(filename) return\n// the same object.  better yet, an editor factory so a second\n// editor(sample) bringstofront the existing editor.\npublic class Sample implements Previewable, Graphable {\n\n    /**\n     *  The value of a missing ring, 2.  Anything less than or equal\n     * \tto this value is considered a MR.\n     */\n    public static final int MR = 2;\n\n    /**\n     * Data, as a List of Integers.\n     */\n    public List data;\n\n    /**\n     * Data range.\n     */\n    public Range range;\n\n    /**\n     *  Sample metadata, as a (String, Object) Map.  The following\n     *         table lists the standard keys, their data types, and valid values:\n     *\n     * <table border=\"1\">\n     *     <tr> <th>Key</th>         <th>Type</th>    <th>Valid values</th> </tr>\n     *     <tr> <td>id</td>          <td>Integer</td> <td></td>             </tr>\n     *     <tr> <td>title</td>       <td>String</td>  <td></td>             </tr>\n     *     <tr> <td>dating</td>      <td>String</td>  <td>A, R</td>         </tr>\n     *     <tr> <td>unmeas_pre</td>  <td>Integer</td> <td></td>             </tr>\n     *     <tr> <td>unmeas_post</td> <td>Integer</td> <td></td>             </tr>\n     *     <tr> <td>filename</td>    <td>String</td>  <td></td>             </tr>\n     *     <tr> <td>comments</td>    <td>String</td>  <td></td>             </tr>\n     *     <tr> <td>type</td>        <td>String</td>  <td>S, H, C</td>      </tr>\n     *     <tr> <td>species</td>     <td>String</td>  <td></td>             </tr>\n     *     <tr> <td>sapwood</td>     <td>Integer</td> <td></td>             </tr>\n     *     <tr> <td>pith</td>        <td>String</td>  <td>+, *, N</td>      </tr>\n     *     <tr> <td>terminal</td>    <td>String</td>  <td>v, vv, B, W</td>  </tr>\n     *     <tr> <td>continuous</td>  <td>String</td>  <td>C, R, N</td>      </tr>\n     *     <tr> <td>quality</td>     <td>String</td>  <td>+, ++</td>        </tr>\n     *     <tr> <td>format</td>      <td>String</td>  <td>R, I</td>         </tr>\n     *     <tr> <td>index_type</td>  <td>Integer</td> <td></td>             </tr>\n     *     <tr> <td>reconciled</td>  <td>String</td>  <td>Y,N</td>          </tr>\n     *     <tr> <td>author</td>      <td>String</td>  <td></td>             </tr>\n     * </table>\n     *\n     * \t<code>data</code>, <code>count</code>, <code>range</code>,\n     * \t<code>wj</code>, and <code>elements</code> aren't stored in\n     * \t<code>meta</code> - they're their own members.\n     *\n     * \t@see corina.formats.Corina\n     */\n    public Map meta;\n\n    // WRITEME: need corresponding setString(), setInteger().\n    // WRITEME: make meta private, eventually.\n    // WRITEME: add lazy-loaders here.\n    // WRITEME: and don't load on construction!\n    // get a string field from this sample.\n    public String getString(String field) {\n        // TODO: load, if needed.\n        Object val = meta.get(field);\n        if (val != null && val instanceof String)\n            return (String) val;\n        return null;\n    }\n\n    // get an int field from this sample.\n    // (would be int, but can't return null then -- use exception?)\n    public Integer getInteger(String field) {\n        // TODO: load, if needed.\n        Object val = meta.get(field);\n        if (val != null && val instanceof Integer)\n            return (Integer) val;\n        return null;\n    }\n\n    // get a list-of-numbers field from this sample.\n    // (what about elements?)\n    public List getList(String field) {\n        // TODO: load, if needed.\n        if (field.equals(\"data\"))\n            return data;\n        else if (field.equals(\"count\"))\n            return count;\n        else if (field.equals(\"incr\"))\n            return incr;\n        else if (field.equals(\"decr\"))\n            return decr;\n        return null;\n    }\n\n    /**\n     * Number of samples in the sum at any given point.\n     */\n    public List count = null;\n\n    // weiserjahre\n    public List incr = null, decr = null;\n\n    // does it have weiserjahre?\n    public boolean hasWeiserjahre() {\n        return (incr != null);\n    }\n\n    /**\n     * Elements (in a List) that were put into this sum.\n     */\n    public List elements = null;\n\n    /**\n     *  Default constructor.  Defaults:\n     * \t<ul>\n     * \t  <li><code>data</code> and <code>count</code> are initialized but empty\n     * \t  <li><code>range</code> is initialized\n     * \t  <li><code>meta</code> is initialized, and:\n     * \t      <ul>\n     * \t        <li>Tag \"title\" is set to \"Untitled\"\n     * \t\t<li>Tag \"author\" is set to the value of system property\n     * \t\t    <code>user.name</code>\n     * \t      </ul>\n     * \t  <li><code>wj</code> is <code>null</code>\n     * \t  <li><code>elements</code> is <code>null</code>\n     * \t</ul>\n     * \t@see #meta\n     */\n    public Sample() {\n        // make defaults: empty\n        data = new ArrayList();\n        range = new Range();\n        meta = new HashMap();\n        // store username, if known\n        if (System.getProperty(\"user.name\") != null)\n            meta.put(\"author\", System.getProperty(\"user.name\"));\n        // initialize empty metadata with defaults?\n        meta.put(\"title\", I18n.getText(\"Untitled\"));\n        // metadata NOT changed\n        metadataChanged = false;\n    }\n\n    /*\n    // TESTING: single-instance samples (and Sample(String) to become private)\n    public static Sample getSample(String filename) throws IOException {\n\t// check map\n\tSample s = null;\n\tif (samples.containsKey(filename)) {\n\t    s = (Sample) ((Reference) samples.get(filename)).get();\n\t    // BUG: what if what's on disk is newer than what's in memory?\n\t    // (if it's ONLY weakly referenced, just update it)\n\t    // (if somebody else is viewing it, better ask the user)\n\t}\n\tif (s == null)\n\t    s = new Sample(filename);\n\tsamples.put(filename, new WeakReference(s));\n\treturn s;\n\t// won't this map keep accumulating nulls?  well, probably not many.\n\t// but shouldn't i try to take them out somehow?\n    }\n    private static Map samples = new HashMap();\n*/\n    /**\n     *  Create a new Sample from a given file on disk.\n     * \t@param filename the name of the file to load\n     * \t@exception FileNotFoundException if the file doesn't exist\n     * \t@exception WrongFiletypeException if the file is not a Sample\n     * \t@exception IOException if there is an I/O error while loading\n     * \tthe file\n     */\n    /*\n    public Sample(String filename) throws FileNotFoundException, WrongFiletypeException, IOException {\n\t// make it like any other Sample\n\tthis();\n\n\t// load the file; this call throws the exceptions\n\tload(filename);\n\n\t// 99%+ of the time you're loading a sample from disk, you\n\t// won't be adding to it, so trim it.\n\ttrimAllToSize();\n    }\n    */\n    /*\n    public Sample(URL url) throws IOException {\n        this();\n\ttry {\n            Class.forName(\"corina.browser.ItrdbURLConnection\");\n\t} catch (ClassNotFoundException cnfe) {\n\t    corina.gui.Bug.bug(cnfe);\n\t}\n        load(new InputStreamReader(url.openStream()));\n        meta.put(\"filename\", url.toString());\n        trimAllToSize();\n    }\n    */\n    private void trimAllToSize() {\n        ((ArrayList) data).trimToSize();\n        if (count != null)\n            ((ArrayList) count).trimToSize();\n        if (hasWeiserjahre()) {\n            ((ArrayList) incr).trimToSize();\n            ((ArrayList) decr).trimToSize();\n        }\n    }\n\n    // copy each part of source to target.  shallow copy, no events, etc.\n    // used only by editor (paste) -- bad interface!\n    public static void copy(Sample source, Sample target) {\n        target.data = source.data;\n        target.range = source.range;\n        target.count = source.count;\n        target.meta = source.meta;\n        target.incr = source.incr;\n        target.decr = source.decr;\n        target.elements = source.elements;\n    }\n\n    /**\n     *  Return true if the sample is indexed, else false.\n     * \t@return true if the sample is indexed\n     */\n    public boolean isIndexed() {\n        String type = (String) meta.get(\"format\");\n        return (type != null && Character.toUpperCase(type.charAt(0)) == 'I');\n    }\n\n    /**\n     *  <p>Return true if the sample is summed, else false.  Here\n     * \t\"summed\" is defined as:</p>\n     * \t<ul>\n     * \t  <li>has a list of elements, or\n     * \t  <li>has count data\n     * \t</ul>\n     * \t@return true if the sample is summed\n     */\n    public boolean isSummed() {\n        return (elements != null || count != null);\n    }\n\n    /**\n     *  Return true if the sample is absolutely dated, else false.\n     * \t@return true if the sample is absolutely dated\n     */\n    public boolean isAbsolute() {\n        String dating = (String) meta.get(\"dating\");\n        return (dating != null && Character.toUpperCase(dating.charAt(0)) == 'A');\n    }\n\n    private boolean modified = false;\n\n    /**\n     *  Return true if the file was modified since last save.\n     * \t@return if the sample has been modified\n     */\n    public boolean isModified() {\n        return modified;\n    }\n\n    /**\n     * Set the modified flag.\n     */\n    public void setModified() {\n        modified = true;\n    }\n\n    /**\n     * Clear the modified flag.\n     */\n    public void clearModified() {\n        modified = false;\n    }\n\n    /**\n     *  Return the data for a graph.\n     * \t@return data to graph, as a List of Integers\n     */\n    public List getData() {\n        return data;\n    }\n\n    /**\n     *  Return the start date for a graph.\n     * \t@return start date of data to graph\n     */\n    public Year getStart() {\n        return range.getStart();\n    }\n\n    /**\n     *  Return the default scale factor for graphing.\n     * \t@return scale factor of 1.0, or 0.1 for indexed files\n     */\n    public float getScale() {\n        return (isIndexed() ? 0.1f : 1.0f);\n    }\n\n    /**\n     *  Return the sample's title.\n     * \t@return the \"title\" tag from meta\n     */\n    public String toString() {\n        String name = meta.get(\"title\") + \" \" + range.toStringWithSpan();\n        if (// not aqua-ish, but how to do it the real way?\n        isModified())\n            name = \"* \" + name;\n        return name;\n    }\n\n    /**\n     *  Count the total number of rings.  If this is a raw sample,\n     * \treturns the length.  If this is a summed sample, returns the\n     * \tsum of the count List.\n     * \t@return the total number of rings in this sample\n     */\n    public int countRings() {\n        // it's not a sum, so the number of rings is just the length\n        // (if (null count) (length data) ...\n        if (count == null)\n            return data.size();\n        // it's a sum, so the number of rings is the sum of the number\n        // of measurements for each year\n        // ... (apply '+ count))\n        int n = 0, size = count.size();\n        for (int i = 0; i < size; i++) n += ((Integer) count.get(i)).intValue();\n        return n;\n    }\n\n    // radius of the sample; only relevant for raw samples (better to\n    // return 0.0 for indexed sample?  throw ex?)\n    public int computeRadius() {\n        // (apply '+ data)\n        int n = data.size();\n        int sum = 0;\n        for (int i = 0; i < n; i++) sum += ((Number) data.get(i)).intValue();\n        return sum;\n    }\n\n    // number of intervals with >3 samples\n    public int count3SampleIntervals() {\n        // (count-if #'(lambda (x) (> x 3)) (sample-count s))\n        if (count == null)\n            return 0;\n        int n = count.size();\n        int three = 0;\n        for (int i = 0; i < n; i++) if (((Integer) count.get(i)).intValue() > 3)\n            three++;\n        return three;\n    }\n\n    // count number of significant (weiserjahre) intervals\n    public int countSignificantIntervals() {\n        if (!hasWeiserjahre())\n            return 0;\n        int sig = 0, n = incr.size();\n        for (int i = 0; i < n; i++) if (Weiserjahre.isSignificant(this, i))\n            sig++;\n        return sig;\n    }\n\n    //\n    // load/save\n    //\n    // create a new sample, from a file on disk\n    public Sample(String filename) throws IOException {\n        // new @-notation\n        if (filename.startsWith(\"@\"))\n            filename = System.getProperty(\"corina.dir.data\", \".\") + filename.substring(1);\n        // (assumes c.d.r ends with file.sep!)\n        Sample s = Files.load(filename);\n        copy(s, this);\n        trimAllToSize();\n    }\n\n    /* Determining if a file is indexed: The 800 Rule\n\n    (This was originally for Tucson files, but now I don't think it\n    applies to them, so it got dumped here.  It might actually be\n    useful here.)\n\n    If a Tucson file is summed, is it indexed?  There doesn't appear\n    to be any way to know for sure.  If it's not summed, and it's\n    processed, then it must be indexing that caused it to be processed.\n    But if it's summed, you know it's processed, but there's no way to\n    tell if it's indexed.\n    \n    So I invented\n\n       /The 800-Rule/: If dataset is known to be processed, but not\n       summed, then it is indexed if the average data value is greater\n       than 800.\n\n    Because indexes are based around 1000 (parts-per-thousand), the\n    average would be near 1000.  Raw data are much lower, like 50-100.\n    This fails if you have a raw dataset with rings larger than 8mm on\n    average (a very big tree), or an indexed dataset where the curve\n    overshoots by more than 25% on average (a very poor index).  It\n    doesn't really matter that this fails <i>sometimes</i>, because\n    without this rule, it would fail <i>always</i>.  So it's a hack,\n    but it's still the right thing to do.\n\n    I've recently learned that there's really no need for the\n    800-rule on Tucson files.  Apparently nobody at Tucson ever thought\n    of summing non-indexed files, so summed implies indexed.  I think.\n    (How do they store indexed files for summing, then?)  Oh well, we\n    had fun, anyway.\n\n    This used to be in Tucson.java, then in TwoColumn.java, but it\n    only looks at the Sample, so it really belongs here.  At least I\n    can put it with the load/save stuff here.\n\n(later) pik says there can be raw summed [tucson] files, and pulls out some\n        old datasets to show me ... that there are raw, indexed, and\n        summed indexed formats for tucson.  but he wants it back in,\n        so we give it to him. */\n    public void guessIndexed() {\n        meta.put(\"format\", computeRadius() / data.size() > 800 ? \"I\" : \"R\");\n    }\n\n    // make sure data/count/wj are the same size as range.span, and\n    // contain all legit Numbers.  turns nulls/non-numbers into 0's.\n    public void verify() {\n        int n = range.span();\n        // what to do if they're the wrong size -- adjust range if the data\n        // are all the same size, but pad with zeros if only one is off?\n        // data: turn nulls/non-numbers into 0\n        for (int i = 0; i < n; i++) {\n            Object o = data.get(i);\n            if (o == null || !(o instanceof Number))\n                data.set(i, new Integer(0));\n        }\n        // TODO: do count, WJ as well\n    }\n\n    /**\n     *       Save this Sample to disk.\n     *\n     *       @param filename the name of the file to save to\n     *       @exception IOException if an I/O error occurs\n     */\n    public void save(String filename) throws IOException {\n        Files.save(this, filename);\n    }\n\n    /**\n     *       Save this Sample to disk to the same filename it had\n     *       previously.\n     *\n     *       @exception IOException if an I/O error occurs\n     */\n    public void save() throws IOException {\n        // BUG!  assumes filename exists in meta map -- what if it doesn't?\n        save((String) meta.get(\"filename\"));\n    }\n\n    public Preview getPreview() {\n        return new SamplePreview(this);\n    }\n\n    private static class SamplePreview extends Preview {\n\n        SamplePreview(Sample s) {\n            title = s.meta.get(\"title\").toString();\n            // range -- toStringWithSpan() does \"(a - b, n=c)\", i want \"a - b (n=c)\"\n            items.add(s.range + \" (n=\" + s.range.span() + \")\");\n            // species\n            if (s.meta.containsKey(\"species\"))\n                items.add(I18n.getText(\"species\") + \": \" + s.meta.get(\"species\"));\n            // format\n            items.add(I18n.getText(\"format\") + \": \" + s.meta.get(\"filetype\"));\n            // indexed, summed\n            if (s.isIndexed())\n                items.add(I18n.getText(\"indexed\"));\n            if (s.isSummed()) {\n                String summedLine = I18n.getText(\"summed\");\n                if (s.elements != null)\n                    summedLine += \" (\" + s.elements.size() + \" \" + I18n.getText(\"elements\") + \")\";\n                items.add(summedLine);\n            }\n        }\n    }\n\n    //\n    // miscellaneous procedures that are better off here than elsewhere\n    //\n    // is this sample oak?  (assumes meta/species is a string, if present)\n    // (FIXME: if it's not a string, it's not oak.)\n    // checks for \"oak\" or \"quercus\".\n    public boolean isOak() {\n        String species = (String) meta.get(\"species\");\n        if (species == null)\n            return false;\n        species = species.toLowerCase();\n        return (species.indexOf(\"oak\") != -1 || species.indexOf(\"quercus\") != -1);\n    }\n\n    // is this sample editable?  no, if it's been indexed or summed.\n    public boolean isEditable() {\n        return (!isIndexed()) && (!isSummed());\n    }\n\n    //\n    // event model\n    //\n    private Vector listeners = new Vector();\n\n    public synchronized void addSampleListener(SampleListener l) {\n        if (!listeners.contains(l))\n            listeners.add(l);\n    }\n\n    public synchronized void removeSampleListener(SampleListener l) {\n        listeners.remove(l);\n    }\n\n    // fire an arbitrary sample event called |method|.  each\n    // fireSampleXYZhappened() method is virtually identical, so their\n    // guts were refactored into here.  this makes adding new events\n    // painless.  (this was taken from a web page -- url?)\n    private void fireSampleEvent(String method) {\n        // alert all listeners\n        Vector l;\n        synchronized (this) {\n            l = (Vector) listeners.clone();\n        }\n        int size = l.size();\n        if (size == 0)\n            return;\n        SampleEvent e = new SampleEvent(this);\n        try {\n            // **\n            Class[] types = new Class[] { SampleEvent.class };\n            Method m = SampleListener.class.getMethod(method, types);\n            Object[] args = new Object[] { e };\n            for (int i = 0; i < size; i++) {\n                SampleListener listener = (SampleListener) l.elementAt(i);\n                // this is like \"listener.method(e)\" (along with the 2 lines\n                // marked ** above)\n                m.invoke(listener, args);\n            }\n        } catch (Exception ex) {\n            // BUG: these exceptions are caught too coursely!\n            // just ignore them all... (?)\n        }\n    }\n\n    // there's an elegant refactoring waiting to be done here, but i'm too wired on caffiene right now to see it.\n    // => see also mapframe's toolbox decorators.\n    public void fireSampleRedated() {\n        fireSampleEvent(\"sampleRedated\");\n    }\n\n    public void fireSampleDataChanged() {\n        fireSampleEvent(\"sampleDataChanged\");\n    }\n\n    public void fireSampleMetadataChanged() {\n        metadataChanged = true;\n        fireSampleEvent(\"sampleMetadataChanged\");\n    }\n\n    public void fireSampleElementsChanged() {\n        fireSampleEvent(\"sampleElementsChanged\");\n    }\n\n    // see if the metadata was changed -- true (loaded samples) unless zero-arg constructor called\n    private boolean metadataChanged = true;\n\n    public boolean wasMetadataChanged() {\n        return metadataChanged;\n    }\n\n    /* FUTURE: */\n    private UndoableEditSupport undoSupport = new UndoableEditSupport();\n\n    public void postEdit(UndoableEdit e) {\n        undoSupport.postEdit(e);\n    }\n}\n",
		"id": "/EvoSuiteBenchmark/35_corina/src/main/java/corina/Sample_10Test.java",
		"test_prompt": "// Sample_10Test.java\n// This file is part of Corina.\n//\n// Corina is free software; you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation; either version 2 of the License, or\n// (at your option) any later version.\n//\n// Corina is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Corina; if not, write to the Free Software\n// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n//\n// Copyright 2001 Ken Harris <kbh7@cornell.edu>\n//\npackage corina;\n\nimport corina.io.Files;\nimport corina.formats.WrongFiletypeException;\nimport corina.graph.Graphable;\nimport corina.ui.I18n;\nimport java.io.File;\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.Reader;\nimport java.io.InputStreamReader;\nimport java.io.IOException;\nimport java.io.FileNotFoundException;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Vector;\nimport java.util.Map;\nimport java.util.HashMap;\nimport java.net.URL;\nimport java.lang.reflect.Method;\nimport java.lang.ref.Reference;\nimport java.lang.ref.WeakReference;\nimport javax.swing.undo.*;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link Sample}.\n* It contains ten unit test cases for the {@link Sample#isEditable()} method.\n*/\nclass Sample_10Test {"
	},
	{
		"original_code": "// Sample.java\n//\n// This file is part of Corina.\n//\n// Corina is free software; you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation; either version 2 of the License, or\n// (at your option) any later version.\n//\n// Corina is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Corina; if not, write to the Free Software\n// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n//\n// Copyright 2001 Ken Harris <kbh7@cornell.edu>\n//\npackage corina;\n\nimport corina.io.Files;\nimport corina.formats.WrongFiletypeException;\nimport corina.graph.Graphable;\nimport corina.ui.I18n;\nimport java.io.File;\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.Reader;\nimport java.io.InputStreamReader;\nimport java.io.IOException;\nimport java.io.FileNotFoundException;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Vector;\nimport java.util.Map;\nimport java.util.HashMap;\nimport java.net.URL;\nimport java.lang.reflect.Method;\nimport java.lang.ref.Reference;\nimport java.lang.ref.WeakReference;\nimport javax.swing.undo.*;\n\n/**\n *   Class representing a reading of a dendro sample.\n *\n *   <p>Currently, this stores:</p>\n *\n *   <ul>\n *     <li>series: data, count, wj (up/down, in one list)</li>\n *     <li>range</li>\n *     <li>a hashtable for metadata</li>\n *     <li>a list of elements</li>\n *   </ul>\n *\n *   @author Ken Harris &lt;kbh7 <i style=\"color: gray\">at</i> cornell <i style=\"color: gray\">dot</i> edu&gt;\n *   @version $Id: Sample.java,v 1.6 2006/01/04 06:51:55 lucasmo Exp $\n */\n// IDEA: make a samplefactory, so 2 calls to sample(filename) return\n// the same object.  better yet, an editor factory so a second\n// editor(sample) bringstofront the existing editor.\npublic class Sample implements Previewable, Graphable {\n\n    /**\n     *  The value of a missing ring, 2.  Anything less than or equal\n     * \tto this value is considered a MR.\n     */\n    public static final int MR = 2;\n\n    /**\n     * Data, as a List of Integers.\n     */\n    public List data;\n\n    /**\n     * Data range.\n     */\n    public Range range;\n\n    /**\n     *  Sample metadata, as a (String, Object) Map.  The following\n     *         table lists the standard keys, their data types, and valid values:\n     *\n     * <table border=\"1\">\n     *     <tr> <th>Key</th>         <th>Type</th>    <th>Valid values</th> </tr>\n     *     <tr> <td>id</td>          <td>Integer</td> <td></td>             </tr>\n     *     <tr> <td>title</td>       <td>String</td>  <td></td>             </tr>\n     *     <tr> <td>dating</td>      <td>String</td>  <td>A, R</td>         </tr>\n     *     <tr> <td>unmeas_pre</td>  <td>Integer</td> <td></td>             </tr>\n     *     <tr> <td>unmeas_post</td> <td>Integer</td> <td></td>             </tr>\n     *     <tr> <td>filename</td>    <td>String</td>  <td></td>             </tr>\n     *     <tr> <td>comments</td>    <td>String</td>  <td></td>             </tr>\n     *     <tr> <td>type</td>        <td>String</td>  <td>S, H, C</td>      </tr>\n     *     <tr> <td>species</td>     <td>String</td>  <td></td>             </tr>\n     *     <tr> <td>sapwood</td>     <td>Integer</td> <td></td>             </tr>\n     *     <tr> <td>pith</td>        <td>String</td>  <td>+, *, N</td>      </tr>\n     *     <tr> <td>terminal</td>    <td>String</td>  <td>v, vv, B, W</td>  </tr>\n     *     <tr> <td>continuous</td>  <td>String</td>  <td>C, R, N</td>      </tr>\n     *     <tr> <td>quality</td>     <td>String</td>  <td>+, ++</td>        </tr>\n     *     <tr> <td>format</td>      <td>String</td>  <td>R, I</td>         </tr>\n     *     <tr> <td>index_type</td>  <td>Integer</td> <td></td>             </tr>\n     *     <tr> <td>reconciled</td>  <td>String</td>  <td>Y,N</td>          </tr>\n     *     <tr> <td>author</td>      <td>String</td>  <td></td>             </tr>\n     * </table>\n     *\n     * \t<code>data</code>, <code>count</code>, <code>range</code>,\n     * \t<code>wj</code>, and <code>elements</code> aren't stored in\n     * \t<code>meta</code> - they're their own members.\n     *\n     * \t@see corina.formats.Corina\n     */\n    public Map meta;\n\n    // WRITEME: need corresponding setString(), setInteger().\n    // WRITEME: make meta private, eventually.\n    // WRITEME: add lazy-loaders here.\n    // WRITEME: and don't load on construction!\n    // get a string field from this sample.\n    public String getString(String field) {\n        // TODO: load, if needed.\n        Object val = meta.get(field);\n        if (val != null && val instanceof String)\n            return (String) val;\n        return null;\n    }\n\n    // get an int field from this sample.\n    // (would be int, but can't return null then -- use exception?)\n    public Integer getInteger(String field) {\n        // TODO: load, if needed.\n        Object val = meta.get(field);\n        if (val != null && val instanceof Integer)\n            return (Integer) val;\n        return null;\n    }\n\n    // get a list-of-numbers field from this sample.\n    // (what about elements?)\n    public List getList(String field) {\n        // TODO: load, if needed.\n        if (field.equals(\"data\"))\n            return data;\n        else if (field.equals(\"count\"))\n            return count;\n        else if (field.equals(\"incr\"))\n            return incr;\n        else if (field.equals(\"decr\"))\n            return decr;\n        return null;\n    }\n\n    /**\n     * Number of samples in the sum at any given point.\n     */\n    public List count = null;\n\n    // weiserjahre\n    public List incr = null, decr = null;\n\n    // does it have weiserjahre?\n    public boolean hasWeiserjahre() {\n        return (incr != null);\n    }\n\n    /**\n     * Elements (in a List) that were put into this sum.\n     */\n    public List elements = null;\n\n    /**\n     *  Default constructor.  Defaults:\n     * \t<ul>\n     * \t  <li><code>data</code> and <code>count</code> are initialized but empty\n     * \t  <li><code>range</code> is initialized\n     * \t  <li><code>meta</code> is initialized, and:\n     * \t      <ul>\n     * \t        <li>Tag \"title\" is set to \"Untitled\"\n     * \t\t<li>Tag \"author\" is set to the value of system property\n     * \t\t    <code>user.name</code>\n     * \t      </ul>\n     * \t  <li><code>wj</code> is <code>null</code>\n     * \t  <li><code>elements</code> is <code>null</code>\n     * \t</ul>\n     * \t@see #meta\n     */\n    public Sample() {\n        // make defaults: empty\n        data = new ArrayList();\n        range = new Range();\n        meta = new HashMap();\n        // store username, if known\n        if (System.getProperty(\"user.name\") != null)\n            meta.put(\"author\", System.getProperty(\"user.name\"));\n        // initialize empty metadata with defaults?\n        meta.put(\"title\", I18n.getText(\"Untitled\"));\n        // metadata NOT changed\n        metadataChanged = false;\n    }\n\n    /*\n    // TESTING: single-instance samples (and Sample(String) to become private)\n    public static Sample getSample(String filename) throws IOException {\n\t// check map\n\tSample s = null;\n\tif (samples.containsKey(filename)) {\n\t    s = (Sample) ((Reference) samples.get(filename)).get();\n\t    // BUG: what if what's on disk is newer than what's in memory?\n\t    // (if it's ONLY weakly referenced, just update it)\n\t    // (if somebody else is viewing it, better ask the user)\n\t}\n\tif (s == null)\n\t    s = new Sample(filename);\n\tsamples.put(filename, new WeakReference(s));\n\treturn s;\n\t// won't this map keep accumulating nulls?  well, probably not many.\n\t// but shouldn't i try to take them out somehow?\n    }\n    private static Map samples = new HashMap();\n*/\n    /**\n     *  Create a new Sample from a given file on disk.\n     * \t@param filename the name of the file to load\n     * \t@exception FileNotFoundException if the file doesn't exist\n     * \t@exception WrongFiletypeException if the file is not a Sample\n     * \t@exception IOException if there is an I/O error while loading\n     * \tthe file\n     */\n    /*\n    public Sample(String filename) throws FileNotFoundException, WrongFiletypeException, IOException {\n\t// make it like any other Sample\n\tthis();\n\n\t// load the file; this call throws the exceptions\n\tload(filename);\n\n\t// 99%+ of the time you're loading a sample from disk, you\n\t// won't be adding to it, so trim it.\n\ttrimAllToSize();\n    }\n    */\n    /*\n    public Sample(URL url) throws IOException {\n        this();\n\ttry {\n            Class.forName(\"corina.browser.ItrdbURLConnection\");\n\t} catch (ClassNotFoundException cnfe) {\n\t    corina.gui.Bug.bug(cnfe);\n\t}\n        load(new InputStreamReader(url.openStream()));\n        meta.put(\"filename\", url.toString());\n        trimAllToSize();\n    }\n    */\n    private void trimAllToSize() {\n        ((ArrayList) data).trimToSize();\n        if (count != null)\n            ((ArrayList) count).trimToSize();\n        if (hasWeiserjahre()) {\n            ((ArrayList) incr).trimToSize();\n            ((ArrayList) decr).trimToSize();\n        }\n    }\n\n    // copy each part of source to target.  shallow copy, no events, etc.\n    // used only by editor (paste) -- bad interface!\n    public static void copy(Sample source, Sample target) {\n        target.data = source.data;\n        target.range = source.range;\n        target.count = source.count;\n        target.meta = source.meta;\n        target.incr = source.incr;\n        target.decr = source.decr;\n        target.elements = source.elements;\n    }\n\n    /**\n     *  Return true if the sample is indexed, else false.\n     * \t@return true if the sample is indexed\n     */\n    public boolean isIndexed() {\n        String type = (String) meta.get(\"format\");\n        return (type != null && Character.toUpperCase(type.charAt(0)) == 'I');\n    }\n\n    /**\n     *  <p>Return true if the sample is summed, else false.  Here\n     * \t\"summed\" is defined as:</p>\n     * \t<ul>\n     * \t  <li>has a list of elements, or\n     * \t  <li>has count data\n     * \t</ul>\n     * \t@return true if the sample is summed\n     */\n    public boolean isSummed() {\n        return (elements != null || count != null);\n    }\n\n    /**\n     *  Return true if the sample is absolutely dated, else false.\n     * \t@return true if the sample is absolutely dated\n     */\n    public boolean isAbsolute() {\n        String dating = (String) meta.get(\"dating\");\n        return (dating != null && Character.toUpperCase(dating.charAt(0)) == 'A');\n    }\n\n    private boolean modified = false;\n\n    /**\n     *  Return true if the file was modified since last save.\n     * \t@return if the sample has been modified\n     */\n    public boolean isModified() {\n        return modified;\n    }\n\n    /**\n     * Set the modified flag.\n     */\n    public void setModified() {\n        modified = true;\n    }\n\n    /**\n     * Clear the modified flag.\n     */\n    public void clearModified() {\n        modified = false;\n    }\n\n    /**\n     *  Return the data for a graph.\n     * \t@return data to graph, as a List of Integers\n     */\n    public List getData() {\n        return data;\n    }\n\n    /**\n     *  Return the start date for a graph.\n     * \t@return start date of data to graph\n     */\n    public Year getStart() {\n        return range.getStart();\n    }\n\n    /**\n     *  Return the default scale factor for graphing.\n     * \t@return scale factor of 1.0, or 0.1 for indexed files\n     */\n    public float getScale() {\n        return (isIndexed() ? 0.1f : 1.0f);\n    }\n\n    /**\n     *  Return the sample's title.\n     * \t@return the \"title\" tag from meta\n     */\n    public String toString() {\n        String name = meta.get(\"title\") + \" \" + range.toStringWithSpan();\n        if (// not aqua-ish, but how to do it the real way?\n        isModified())\n            name = \"* \" + name;\n        return name;\n    }\n\n    /**\n     *  Count the total number of rings.  If this is a raw sample,\n     * \treturns the length.  If this is a summed sample, returns the\n     * \tsum of the count List.\n     * \t@return the total number of rings in this sample\n     */\n    public int countRings() {\n        // it's not a sum, so the number of rings is just the length\n        // (if (null count) (length data) ...\n        if (count == null)\n            return data.size();\n        // it's a sum, so the number of rings is the sum of the number\n        // of measurements for each year\n        // ... (apply '+ count))\n        int n = 0, size = count.size();\n        for (int i = 0; i < size; i++) n += ((Integer) count.get(i)).intValue();\n        return n;\n    }\n\n    // radius of the sample; only relevant for raw samples (better to\n    // return 0.0 for indexed sample?  throw ex?)\n    public int computeRadius() {\n        // (apply '+ data)\n        int n = data.size();\n        int sum = 0;\n        for (int i = 0; i < n; i++) sum += ((Number) data.get(i)).intValue();\n        return sum;\n    }\n\n    // number of intervals with >3 samples\n    public int count3SampleIntervals() {\n        // (count-if #'(lambda (x) (> x 3)) (sample-count s))\n        if (count == null)\n            return 0;\n        int n = count.size();\n        int three = 0;\n        for (int i = 0; i < n; i++) if (((Integer) count.get(i)).intValue() > 3)\n            three++;\n        return three;\n    }\n\n    // count number of significant (weiserjahre) intervals\n    public int countSignificantIntervals() {\n        if (!hasWeiserjahre())\n            return 0;\n        int sig = 0, n = incr.size();\n        for (int i = 0; i < n; i++) if (Weiserjahre.isSignificant(this, i))\n            sig++;\n        return sig;\n    }\n\n    //\n    // load/save\n    //\n    // create a new sample, from a file on disk\n    public Sample(String filename) throws IOException {\n        // new @-notation\n        if (filename.startsWith(\"@\"))\n            filename = System.getProperty(\"corina.dir.data\", \".\") + filename.substring(1);\n        // (assumes c.d.r ends with file.sep!)\n        Sample s = Files.load(filename);\n        copy(s, this);\n        trimAllToSize();\n    }\n\n    /* Determining if a file is indexed: The 800 Rule\n\n    (This was originally for Tucson files, but now I don't think it\n    applies to them, so it got dumped here.  It might actually be\n    useful here.)\n\n    If a Tucson file is summed, is it indexed?  There doesn't appear\n    to be any way to know for sure.  If it's not summed, and it's\n    processed, then it must be indexing that caused it to be processed.\n    But if it's summed, you know it's processed, but there's no way to\n    tell if it's indexed.\n    \n    So I invented\n\n       /The 800-Rule/: If dataset is known to be processed, but not\n       summed, then it is indexed if the average data value is greater\n       than 800.\n\n    Because indexes are based around 1000 (parts-per-thousand), the\n    average would be near 1000.  Raw data are much lower, like 50-100.\n    This fails if you have a raw dataset with rings larger than 8mm on\n    average (a very big tree), or an indexed dataset where the curve\n    overshoots by more than 25% on average (a very poor index).  It\n    doesn't really matter that this fails <i>sometimes</i>, because\n    without this rule, it would fail <i>always</i>.  So it's a hack,\n    but it's still the right thing to do.\n\n    I've recently learned that there's really no need for the\n    800-rule on Tucson files.  Apparently nobody at Tucson ever thought\n    of summing non-indexed files, so summed implies indexed.  I think.\n    (How do they store indexed files for summing, then?)  Oh well, we\n    had fun, anyway.\n\n    This used to be in Tucson.java, then in TwoColumn.java, but it\n    only looks at the Sample, so it really belongs here.  At least I\n    can put it with the load/save stuff here.\n\n(later) pik says there can be raw summed [tucson] files, and pulls out some\n        old datasets to show me ... that there are raw, indexed, and\n        summed indexed formats for tucson.  but he wants it back in,\n        so we give it to him. */\n    public void guessIndexed() {\n        meta.put(\"format\", computeRadius() / data.size() > 800 ? \"I\" : \"R\");\n    }\n\n    // make sure data/count/wj are the same size as range.span, and\n    // contain all legit Numbers.  turns nulls/non-numbers into 0's.\n    public void verify() {\n        int n = range.span();\n        // what to do if they're the wrong size -- adjust range if the data\n        // are all the same size, but pad with zeros if only one is off?\n        // data: turn nulls/non-numbers into 0\n        for (int i = 0; i < n; i++) {\n            Object o = data.get(i);\n            if (o == null || !(o instanceof Number))\n                data.set(i, new Integer(0));\n        }\n        // TODO: do count, WJ as well\n    }\n\n    /**\n     *       Save this Sample to disk.\n     *\n     *       @param filename the name of the file to save to\n     *       @exception IOException if an I/O error occurs\n     */\n    public void save(String filename) throws IOException {\n        Files.save(this, filename);\n    }\n\n    /**\n     *       Save this Sample to disk to the same filename it had\n     *       previously.\n     *\n     *       @exception IOException if an I/O error occurs\n     */\n    public void save() throws IOException {\n        // BUG!  assumes filename exists in meta map -- what if it doesn't?\n        save((String) meta.get(\"filename\"));\n    }\n\n    public Preview getPreview() {\n        return new SamplePreview(this);\n    }\n\n    private static class SamplePreview extends Preview {\n\n        SamplePreview(Sample s) {\n            title = s.meta.get(\"title\").toString();\n            // range -- toStringWithSpan() does \"(a - b, n=c)\", i want \"a - b (n=c)\"\n            items.add(s.range + \" (n=\" + s.range.span() + \")\");\n            // species\n            if (s.meta.containsKey(\"species\"))\n                items.add(I18n.getText(\"species\") + \": \" + s.meta.get(\"species\"));\n            // format\n            items.add(I18n.getText(\"format\") + \": \" + s.meta.get(\"filetype\"));\n            // indexed, summed\n            if (s.isIndexed())\n                items.add(I18n.getText(\"indexed\"));\n            if (s.isSummed()) {\n                String summedLine = I18n.getText(\"summed\");\n                if (s.elements != null)\n                    summedLine += \" (\" + s.elements.size() + \" \" + I18n.getText(\"elements\") + \")\";\n                items.add(summedLine);\n            }\n        }\n    }\n\n    //\n    // miscellaneous procedures that are better off here than elsewhere\n    //\n    // is this sample oak?  (assumes meta/species is a string, if present)\n    // (FIXME: if it's not a string, it's not oak.)\n    // checks for \"oak\" or \"quercus\".\n    public boolean isOak() {\n        String species = (String) meta.get(\"species\");\n        if (species == null)\n            return false;\n        species = species.toLowerCase();\n        return (species.indexOf(\"oak\") != -1 || species.indexOf(\"quercus\") != -1);\n    }\n\n    // is this sample editable?  no, if it's been indexed or summed.\n    public boolean isEditable() {\n        return (!isIndexed()) && (!isSummed());\n    }\n\n    //\n    // event model\n    //\n    private Vector listeners = new Vector();\n\n    public synchronized void addSampleListener(SampleListener l) {\n        if (!listeners.contains(l))\n            listeners.add(l);\n    }\n\n    public synchronized void removeSampleListener(SampleListener l) {\n        listeners.remove(l);\n    }\n\n    // fire an arbitrary sample event called |method|.  each\n    // fireSampleXYZhappened() method is virtually identical, so their\n    // guts were refactored into here.  this makes adding new events\n    // painless.  (this was taken from a web page -- url?)\n    private void fireSampleEvent(String method) {\n        // alert all listeners\n        Vector l;\n        synchronized (this) {\n            l = (Vector) listeners.clone();\n        }\n        int size = l.size();\n        if (size == 0)\n            return;\n        SampleEvent e = new SampleEvent(this);\n        try {\n            // **\n            Class[] types = new Class[] { SampleEvent.class };\n            Method m = SampleListener.class.getMethod(method, types);\n            Object[] args = new Object[] { e };\n            for (int i = 0; i < size; i++) {\n                SampleListener listener = (SampleListener) l.elementAt(i);\n                // this is like \"listener.method(e)\" (along with the 2 lines\n                // marked ** above)\n                m.invoke(listener, args);\n            }\n        } catch (Exception ex) {\n            // BUG: these exceptions are caught too coursely!\n            // just ignore them all... (?)\n        }\n    }\n\n    // there's an elegant refactoring waiting to be done here, but i'm too wired on caffiene right now to see it.\n    // => see also mapframe's toolbox decorators.\n    public void fireSampleRedated() {\n        fireSampleEvent(\"sampleRedated\");\n    }\n\n    public void fireSampleDataChanged() {\n        fireSampleEvent(\"sampleDataChanged\");\n    }\n\n    public void fireSampleMetadataChanged() {\n        metadataChanged = true;\n        fireSampleEvent(\"sampleMetadataChanged\");\n    }\n\n    public void fireSampleElementsChanged() {\n        fireSampleEvent(\"sampleElementsChanged\");\n    }\n\n    // see if the metadata was changed -- true (loaded samples) unless zero-arg constructor called\n    private boolean metadataChanged = true;\n\n    public boolean wasMetadataChanged() {\n        return metadataChanged;\n    }\n\n    /* FUTURE: */\n    private UndoableEditSupport undoSupport = new UndoableEditSupport();\n\n    public void postEdit(UndoableEdit e) {\n        undoSupport.postEdit(e);\n    }\n}\n",
		"id": "/EvoSuiteBenchmark/35_corina/src/main/java/corina/Sample_11Test.java",
		"test_prompt": "// Sample_11Test.java\n// This file is part of Corina.\n//\n// Corina is free software; you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation; either version 2 of the License, or\n// (at your option) any later version.\n//\n// Corina is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Corina; if not, write to the Free Software\n// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n//\n// Copyright 2001 Ken Harris <kbh7@cornell.edu>\n//\npackage corina;\n\nimport corina.io.Files;\nimport corina.formats.WrongFiletypeException;\nimport corina.graph.Graphable;\nimport corina.ui.I18n;\nimport java.io.File;\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.Reader;\nimport java.io.InputStreamReader;\nimport java.io.IOException;\nimport java.io.FileNotFoundException;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Vector;\nimport java.util.Map;\nimport java.util.HashMap;\nimport java.net.URL;\nimport java.lang.reflect.Method;\nimport java.lang.ref.Reference;\nimport java.lang.ref.WeakReference;\nimport javax.swing.undo.*;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link Sample}.\n* It contains ten unit test cases for the {@link Sample#wasMetadataChanged()} method.\n*/\nclass Sample_11Test {"
	},
	{
		"original_code": "// Files.java\npackage corina.io;\n\nimport corina.Sample;\nimport corina.formats.Filetype;\nimport corina.formats.WrongFiletypeException;\nimport java.io.File;\nimport java.io.FileReader;\nimport java.io.FileWriter;\nimport java.io.BufferedReader;\nimport java.io.BufferedWriter;\nimport java.io.IOException;\nimport java.io.FileNotFoundException;\nimport java.text.*;\nimport java.lang.reflect.Constructor;\n\n// wrapper for corina.formats: load() and save() a file, given only its filename\npublic class Files {\n\n    // don't instantiate me\n    private Files() {\n    }\n\n    // load a file\n    public static Sample load(String filename) throws IOException {\n        // don't try a bunch of formats that we know a priori will all\n        // fail: try some quick tests first\n        File f = new File(filename);\n        if (!f.exists())\n            throw new FileNotFoundException(\"File doesn't exist.\");\n        if (f.isDirectory())\n            throw new IOException(\"Can't load a folder.\");\n        if (!f.isFile())\n            throw new IOException(\"Not a file.\");\n        if (!f.canRead())\n            throw new IOException(\"No read access allowed.\");\n        // i can ignore a lot of common filetypes without even\n        // looking -- see SKIP_EXTENSIONS\n        for (int i = 0; i < SKIP_EXTENSIONS.length; i++) if (filename.toUpperCase().endsWith(SKIP_EXTENSIONS[i]))\n            throw new WrongFiletypeException();\n        // make a buffered reader for it\n        BufferedReader br = new BufferedReader(new FileReader(filename));\n        try {\n            // try each loader in turn\n            for (int i = 0; i < LOADERS.length; i++) {\n                try {\n                    // use factory to make a Filetype from the class name\n                    Filetype format = makeFileFormat(LOADERS[i]);\n                    // if somebody closed the stream, any call to read(), ready(), mark(), or reset()\n                    // will throw an IOE.  so i'll try a ready() call to see if it's been closed.\n                    // (any SAX-based reader will close the stream after trying to load it,\n                    // whether it succeeded or not -- but note that a file format can check the first\n                    // line for \"<?xml\", and fail immediately if it doesn't look like an XML file,\n                    // so this doesn't even happen whenever an XML-based format fails.)\n                    // this way i'll only have to re-open the stream if needed;\n                    // not the most efficient way, sure, but not bad, in the most common case.\n                    try {\n                        br.ready();\n                    } catch (IOException ioe) {\n                        // somebody closed my stream, re-open it\n                        try {\n                            br.close();\n                        } catch (IOException ioe2) {\n                            ioe2.printStackTrace();\n                        }\n                        br = new BufferedReader(new FileReader(filename));\n                    }\n                    // TODO: if the mark can't be reset, for some reason, the stream will\n                    // need to be re-opened, also.  (but it would be better to simply\n                    // snarf it up into memory, and parse it there.)\n                    // try loading\n                    // is 5 lines enough?\n                    br.mark(80 * 5);\n                    Sample s = format.load(br);\n                    br.close();\n                    String filetype = format.toString();\n                    // (used only for preview)\n                    s.meta.put(\"filetype\", filetype);\n                    s.meta.put(\"filename\", filename);\n                    // if we made it this far without throwing a\n                    // WrongFiletypeException or IOException (or any other\n                    // Exception), it must have loaded correctly.\n                    return s;\n                } catch (IllegalArgumentException iae) {\n                    // can't create loader -- ??? (bug, probably)\n                    System.out.println(\"bug: \" + iae);\n                } catch (WrongFiletypeException wfe) {\n                    continue;\n                } catch (IOException ioe) {\n                    String l = LOADERS[i];\n                    l = l.substring(l.lastIndexOf('.') + 1);\n                    throw new IOException(l + \": \" + ioe.getMessage());\n                } catch (Exception e) {\n                    // load() failed -- unknown reason -- log me?  (once,\n                    // some loaders threw crazy things like\n                    // NullPointerExceptions, so this is a catch-all for\n                    // those.  it should be unnecessary now, but it can't\n                    // hurt to have too much error-checking.)\n                    // use Bug to report it if this ever happens!\n                    continue;\n                } finally {\n                    try {\n                        br.reset();\n                    } catch (IOException ioe) {\n                        // it's ok, stream is closed, but we have the sample.\n                    }\n                }\n            }\n        } finally {\n            try {\n                br.close();\n            } catch (IOException ioe) {\n                ioe.printStackTrace();\n            }\n        }\n        // WRITEME\n        throw new WrongFiletypeException();\n    }\n\n    // make a file format loader, given its name (e.g., \"TwoColumn\")\n    private static Filetype makeFileFormat(String name) throws IllegalArgumentException {\n        try {\n            Constructor cons = Class.forName(name).getConstructor(new Class[] {});\n            return (Filetype) cons.newInstance(new Object[] {});\n        } catch (Exception e) {\n            // class not found, no such method, instantiation exceptions\n            throw new IllegalArgumentException();\n        }\n    }\n\n    /**\n     *       Default Filetype class to use for saving files.  Value is \"corina.formats.Corina\".\n     *\n     *       @see corina.formats.Corina\n     */\n    private final static String DEFAULT_SAVER = \"corina.formats.Corina\";\n\n    // FIXME: make pref: \"default save format: corina, tucson, ..., whatever it was before.\n    // save a file\n    public static void save(Sample s, String filename) throws IOException {\n        Filetype format = makeFileFormat(DEFAULT_SAVER);\n        BufferedWriter w = new BufferedWriter(new FileWriter(filename));\n        try {\n            format.save(s, w);\n        } finally {\n            try {\n                w.close();\n            } catch (IOException ioe) {\n                ioe.printStackTrace();\n            }\n        }\n    }\n\n    /**\n     * Filename extensions of files to ignore out of principle: .XLS,\n     *        .DOC, .JPG, .GIF, and .TIF are a good start.  They\n     *        should be all upper case.\n     */\n    private final static String[] SKIP_EXTENSIONS = { \".XLS\", \".SLK\", \".DOC\", \".PPT\", \".RTF\", \".EXE\", // auto-(de)-compression?  no, not enough benefit.\n    \".ZIP\", \".JPG\", \".JPEG\", \".GIF\", \".TIF\", \".TIFF\", // Oxcal, my arch-nemesis!\n    \".14I\", // Oxcal, my arch-nemesis!\n    \".14S\", // Oxcal, my arch-nemesis!\n    \".14D\", // Oxcal, my arch-nemesis!\n    \".14P\", // Oxcal, my arch-nemesis!\n    \".14L\", // dunno what these are, but they're not mine\n    \".MPJ\", // dunno what these are, but they're not mine\n    \".MTW\", // \"GS Draw File: Copyright Golden Software Inc. 1991-1994\" (a GRaF)\n    \".GRF\", \".JAR\", \".CLASS\", \".JAVA\", // (old corina data files -- remove these later)\n    \"SITE.LOC\", // (old corina data files -- remove these later)\n    \"SITE.XML\", \".Corina_Cache\" // TODO: should i skip backup~ files here, too?  (they're not actually invalid, just \"hidden\")\n    };\n\n    private final static String[] LOADERS = { \"corina.formats.Corina\", \"corina.formats.TRML\", \"corina.formats.TSAPMatrix\", \"corina.formats.Hohenheim\", \"corina.formats.Heidelberg\", \"corina.formats.Tucson\", // <-- should always be last\n    \"corina.formats.TwoColumn\" };\n}\n",
		"id": "/EvoSuiteBenchmark/35_corina/src/main/java/corina/io/Files.java",
		"test_prompt": "// FilesTest.java\npackage corina.io;\n\nimport corina.Sample;\nimport corina.formats.Filetype;\nimport corina.formats.WrongFiletypeException;\nimport java.io.File;\nimport java.io.FileReader;\nimport java.io.FileWriter;\nimport java.io.BufferedReader;\nimport java.io.BufferedWriter;\nimport java.io.IOException;\nimport java.io.FileNotFoundException;\nimport java.text.*;\nimport java.lang.reflect.Constructor;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link Files}.\n* It contains ten unit test cases for the {@link Files#load(String)} method.\n*/\nclass FilesTest {"
	},
	{
		"original_code": "// SerialSampleIO.java\npackage corina.io;\n\nimport java.util.*;\nimport java.lang.reflect.*;\nimport java.io.*;\nimport corina.prefs.Prefs;\nimport corina.prefs.PrefsEvent;\nimport corina.prefs.PrefsListener;\nimport gnu.io.*;\n\n/*\n * Provides an abstract interface to the \"EveIO\" Corina external ring counter thingy.\n * \n */\npublic class SerialSampleIO implements /*{\n\t// for disabling this whole thing outright...\n\tpublic SerialSampleIO(String s) throws IOException {}\n\tpublic static boolean hasSerialCapability() { return false; }\n\tpublic void close() {}\n\tpublic void initialize() {}\n\tpublic static Vector enumeratePorts() { return new Vector(); }\n\tpublic void addSerialSampleIOListener(Object o) {}\n\t*/\nSerialPortEventListener {\n\n    // not used yet, since this is borked\n    private static final int EVE_ENQ = 5;\n\n    private static final int EVE_ACK = 6;\n\n    private static final int EVE_NAK = 7;\n\n    // the actual serial port\n    private SerialPort dataPort;\n\n    // the state...\n    private static final int SERIALSTATE_WAITINGFORACK = 2;\n\n    private static final int SERIALSTATE_NORMAL = 1;\n\n    private static final int SERIALSTATE_POSTINIT = 4;\n\n    private static final int SERIALSTATE_DIE = 3;\n\n    private int serialState;\n\n    // serial NUMBER of the last data point...\n    private int lastSerial = -1;\n\n    // the listeners that need to be notified when a SerialSampleIOEvent is triggered...\n    private Set listeners = new HashSet();\n\n    // tie us to the port...\n    public SerialSampleIO(String portName) throws IOException {\n        System.out.println(\"Opening port: \" + portName);\n        dataPort = openPort(portName);\n        serialState = SERIALSTATE_NORMAL;\n    }\n\n    // on shutdown, make sure we closed the port.\n    protected void finalize() throws Throwable {\n        super.finalize();\n        serialState = SERIALSTATE_DIE;\n        if (dataPort != null) {\n            System.out.println(\"Closing port (finalize): \" + dataPort.getName());\n            dataPort.close();\n            dataPort = null;\n        }\n    }\n\n    // clean up!\n    public void close() {\n        System.out.println(\"Closing port (manual): \" + dataPort.getName());\n        serialState = SERIALSTATE_DIE;\n        if (initThread != null) {\n            try {\n                initThread.join();\n            } catch (InterruptedException e) {\n            }\n            initThread = null;\n        }\n        dataPort.close();\n        dataPort = null;\n    }\n\n    Thread initThread;\n\n    Object sync = new Object();\n\n    public void initialize() throws IOException {\n        serialState = SERIALSTATE_WAITINGFORACK;\n        initThread = new Thread(new Runnable() {\n\n            public void run() {\n                boolean waiting_for_init = true;\n                int tryCount = 0;\n                while (waiting_for_init) {\n                    synchronized (sync) {\n                        if (serialState == SERIALSTATE_WAITINGFORACK) {\n                            if (tryCount++ == 25) {\n                                fireSerialSampleEvent(SerialSampleIOEvent.ERROR, \"Failed to initialize reader device.\");\n                                System.out.println(\"init tries exhausted; giving up.\");\n                                break;\n                            }\n                            try {\n                                System.out.println(\"Initializing reader, try \" + tryCount + \"...\");\n                                fireSerialSampleEvent(SerialSampleIOEvent.INITIALIZING_EVENT, new Integer(tryCount));\n                                dataPort.getOutputStream().write(SerialSampleIO.EVE_ENQ);\n                            } catch (IOException e) {\n                            }\n                        } else {\n                            waiting_for_init = false;\n                            continue;\n                        }\n                        // no response yet.. wait.\n                        try {\n                            sync.wait(300);\n                        } catch (InterruptedException e) {\n                        }\n                    }\n                }\n            }\n        });\n        initThread.start();\n        //dataPort.getOutputStream().write(SerialSampleIO.EVE_ENQ);\n        // keep sending this until we get a response, or 15 times.\n    }\n\n    public void serialEvent(SerialPortEvent e) {\n        if (e.getEventType() == SerialPortEvent.DATA_AVAILABLE) {\n            InputStream input;\n            try {\n                input = dataPort.getInputStream();\n            } catch (IOException ioe) {\n                // uh.. ?\n                System.out.println(\"Error getting serial port input stream: \" + ioe);\n                return;\n            }\n            try {\n                if (serialState == SERIALSTATE_WAITINGFORACK) {\n                    int val = input.read();\n                    if (val == EVE_ACK) {\n                        System.out.println(\"Received ACK from device, leaving initialize mode\");\n                        // update our status...\n                        synchronized (sync) {\n                            serialState = SERIALSTATE_POSTINIT;\n                            // tell our synchronization object..\n                            sync.notify();\n                        }\n                        // wait for it to die..\n                        try {\n                            initThread.join();\n                        } catch (InterruptedException ieeee) {\n                        }\n                        initThread = null;\n                        // dump any input we have...\n                        while (input.read() != -1) ;\n                        fireSerialSampleEvent(SerialSampleIOEvent.INITIALIZED_EVENT, null);\n                        // yay!\n                        serialState = SERIALSTATE_NORMAL;\n                        return;\n                    }\n                    System.out.println(\"Received \" + val + \"while waiting for ACK\");\n                } else if (serialState == SERIALSTATE_NORMAL) {\n                    int counter, valuehi, valuelo, value;\n                    // if any of these are -1, we timed out.\n                    // something was most likely invalid in the send/serial link...\n                    // don't worry, we still have to ACK everything.\n                    if (((counter = input.read()) == -1) || ((valuehi = input.read()) == -1) || ((valuelo = input.read()) == -1)) {\n                        fireSerialSampleEvent(SerialSampleIOEvent.BAD_SAMPLE_EVENT, null);\n                        return;\n                    }\n                    // this is a duplicate packet. ignore it!\n                    if (counter == lastSerial)\n                        return;\n                    lastSerial = counter;\n                    value = (256 * valuehi) + valuelo;\n                    fireSerialSampleEvent(SerialSampleIOEvent.NEW_SAMPLE_EVENT, new Integer(value));\n                }\n            } catch (IOException ioe) {\n                System.out.println(\"Error reading from serial port: \" + ioe);\n            }\n        }\n    }\n\n    // obnoxiously stupid, but on a 'link error' Java seems to\n    // mess around for a few seconds, perhaps searching other libraries?\n    // Let's only do this once.\n    private static boolean hscChecked = false;\n\n    private static boolean hscResult = false;\n\n    // returns TRUE if serial package is capable on this platform...\n    public static boolean hasSerialCapability() {\n        // stupid.\n        if (hscChecked)\n            return hscResult;\n        // set the checked flag... check it, if it succeeds, change the result.\n        hscChecked = true;\n        try {\n            // this loads the DLL...\n            Class.forName(\"gnu.io.RXTXCommDriver\");\n            hscResult = true;\n        } catch (Exception e) {\n            // driver not installed...\n            System.err.println(e.toString());\n        } catch (Error e) {\n            // native interface not installed...\n            System.err.println(e.toString());\n        }\n        return hscResult;\n    }\n\n    // return an array of Strings that contains all serial port identifiers...\n    public static Vector enumeratePorts() {\n        Enumeration ports = CommPortIdentifier.getPortIdentifiers();\n        Vector portStrings = new Vector();\n        while (ports.hasMoreElements()) {\n            CommPortIdentifier currentPort = (CommPortIdentifier) ports.nextElement();\n            if (currentPort.getPortType() != CommPortIdentifier.PORT_SERIAL)\n                continue;\n            portStrings.add(new String(currentPort.getName()));\n        }\n        return portStrings;\n    }\n\n    private SerialPort openPort(String portName) throws IOException {\n        CommPort port;\n        CommPortIdentifier portId;\n        try {\n            // get the port by name.\n            portId = CommPortIdentifier.getPortIdentifier(portName);\n            // take ownership...\n            port = portId.open(\"Corina\", 1000);\n            // it's a serial port. If it's not, something's fubar.\n            if (!(port instanceof SerialPort)) {\n                throw new IOException(\"Unable to open port: Port type is unsupported.\");\n            }\n            // 9600 8N1, no flow control...\n            ((SerialPort) port).setSerialPortParams(9600, SerialPort.DATABITS_8, SerialPort.STOPBITS_1, SerialPort.PARITY_NONE);\n            ((SerialPort) port).setFlowControlMode(SerialPort.FLOWCONTROL_NONE);\n            // set up our event listener\n            ((SerialPort) port).addEventListener(this);\n            ((SerialPort) port).notifyOnDataAvailable(true);\n            // time out after 500ms when reading...\n            ((SerialPort) port).enableReceiveTimeout(500);\n            //dataOutStream = new BufferedOutputStream((((SerialPort)port).getOutputStream()));\n        } catch (NoSuchPortException e) {\n            throw new IOException(\"Unable to open port: it does not exist!\");\n        } catch (PortInUseException e) {\n            throw new IOException(\"Unable to open port: it is in use by another application.\");\n        } catch (UnsupportedCommOperationException e) {\n            // something is broken??\n            throw new IOException(\"Unable to open port: unknown error 1. help me.\");\n        } catch (TooManyListenersException e) {\n            // uh... we just made it. and set the listener.  something is broken.\n            throw new IOException(\"Unable to open port: unknown error 2. help me.\");\n        }\n        return (SerialPort) port;\n    }\n\n    public void addSerialSampleIOListener(SerialSampleIOListener l) {\n        if (!listeners.contains(l))\n            listeners.add(l);\n    }\n\n    public void removeSerialSampleIOListener(SerialSampleIOListener l) {\n        listeners.remove(l);\n    }\n\n    private synchronized void fireSerialSampleEvent(int type, Object value) {\n        // alert all listeners\n        SerialSampleIOListener[] l;\n        synchronized (listeners) {\n            l = (SerialSampleIOListener[]) listeners.toArray(new SerialSampleIOListener[listeners.size()]);\n        }\n        int size = l.length;\n        if (size == 0)\n            return;\n        SerialSampleIOEvent e = new SerialSampleIOEvent(SerialSampleIO.class, type, value);\n        for (int i = 0; i < size; i++) {\n            l[i].SerialSampleIONotify(e);\n        }\n    }\n    /*\n\tpublic static void main(String[] args) {\n\t\tSerialSampleIO eio;\n\t\t\n\t\t//SerialSampleIO.enumPorts();\n\t\t\n\t\ttry {\n\t\t\teio = new SerialSampleIO(\"COM4\");\n\t\t\teio.initialize();\n\t\t}\n\t\tcatch (IOException e) {\n\t\t\tSystem.out.println(e.toString());\n\t\t}\n\t\t\n\t}\n\t*/\n}\n",
		"id": "/EvoSuiteBenchmark/35_corina/src/main/java/corina/io/SerialSampleIO_0Test.java",
		"test_prompt": "// SerialSampleIO_0Test.java\npackage corina.io;\n\nimport java.util.*;\nimport java.lang.reflect.*;\nimport java.io.*;\nimport corina.prefs.Prefs;\nimport corina.prefs.PrefsEvent;\nimport corina.prefs.PrefsListener;\nimport gnu.io.*;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link SerialSampleIO}.\n* It contains ten unit test cases for the {@link SerialSampleIO#hasSerialCapability()} method.\n*/\nclass SerialSampleIO_0Test {"
	},
	{
		"original_code": "// SerialSampleIO.java\npackage corina.io;\n\nimport java.util.*;\nimport java.lang.reflect.*;\nimport java.io.*;\nimport corina.prefs.Prefs;\nimport corina.prefs.PrefsEvent;\nimport corina.prefs.PrefsListener;\nimport gnu.io.*;\n\n/*\n * Provides an abstract interface to the \"EveIO\" Corina external ring counter thingy.\n * \n */\npublic class SerialSampleIO implements /*{\n\t// for disabling this whole thing outright...\n\tpublic SerialSampleIO(String s) throws IOException {}\n\tpublic static boolean hasSerialCapability() { return false; }\n\tpublic void close() {}\n\tpublic void initialize() {}\n\tpublic static Vector enumeratePorts() { return new Vector(); }\n\tpublic void addSerialSampleIOListener(Object o) {}\n\t*/\nSerialPortEventListener {\n\n    // not used yet, since this is borked\n    private static final int EVE_ENQ = 5;\n\n    private static final int EVE_ACK = 6;\n\n    private static final int EVE_NAK = 7;\n\n    // the actual serial port\n    private SerialPort dataPort;\n\n    // the state...\n    private static final int SERIALSTATE_WAITINGFORACK = 2;\n\n    private static final int SERIALSTATE_NORMAL = 1;\n\n    private static final int SERIALSTATE_POSTINIT = 4;\n\n    private static final int SERIALSTATE_DIE = 3;\n\n    private int serialState;\n\n    // serial NUMBER of the last data point...\n    private int lastSerial = -1;\n\n    // the listeners that need to be notified when a SerialSampleIOEvent is triggered...\n    private Set listeners = new HashSet();\n\n    // tie us to the port...\n    public SerialSampleIO(String portName) throws IOException {\n        System.out.println(\"Opening port: \" + portName);\n        dataPort = openPort(portName);\n        serialState = SERIALSTATE_NORMAL;\n    }\n\n    // on shutdown, make sure we closed the port.\n    protected void finalize() throws Throwable {\n        super.finalize();\n        serialState = SERIALSTATE_DIE;\n        if (dataPort != null) {\n            System.out.println(\"Closing port (finalize): \" + dataPort.getName());\n            dataPort.close();\n            dataPort = null;\n        }\n    }\n\n    // clean up!\n    public void close() {\n        System.out.println(\"Closing port (manual): \" + dataPort.getName());\n        serialState = SERIALSTATE_DIE;\n        if (initThread != null) {\n            try {\n                initThread.join();\n            } catch (InterruptedException e) {\n            }\n            initThread = null;\n        }\n        dataPort.close();\n        dataPort = null;\n    }\n\n    Thread initThread;\n\n    Object sync = new Object();\n\n    public void initialize() throws IOException {\n        serialState = SERIALSTATE_WAITINGFORACK;\n        initThread = new Thread(new Runnable() {\n\n            public void run() {\n                boolean waiting_for_init = true;\n                int tryCount = 0;\n                while (waiting_for_init) {\n                    synchronized (sync) {\n                        if (serialState == SERIALSTATE_WAITINGFORACK) {\n                            if (tryCount++ == 25) {\n                                fireSerialSampleEvent(SerialSampleIOEvent.ERROR, \"Failed to initialize reader device.\");\n                                System.out.println(\"init tries exhausted; giving up.\");\n                                break;\n                            }\n                            try {\n                                System.out.println(\"Initializing reader, try \" + tryCount + \"...\");\n                                fireSerialSampleEvent(SerialSampleIOEvent.INITIALIZING_EVENT, new Integer(tryCount));\n                                dataPort.getOutputStream().write(SerialSampleIO.EVE_ENQ);\n                            } catch (IOException e) {\n                            }\n                        } else {\n                            waiting_for_init = false;\n                            continue;\n                        }\n                        // no response yet.. wait.\n                        try {\n                            sync.wait(300);\n                        } catch (InterruptedException e) {\n                        }\n                    }\n                }\n            }\n        });\n        initThread.start();\n        //dataPort.getOutputStream().write(SerialSampleIO.EVE_ENQ);\n        // keep sending this until we get a response, or 15 times.\n    }\n\n    public void serialEvent(SerialPortEvent e) {\n        if (e.getEventType() == SerialPortEvent.DATA_AVAILABLE) {\n            InputStream input;\n            try {\n                input = dataPort.getInputStream();\n            } catch (IOException ioe) {\n                // uh.. ?\n                System.out.println(\"Error getting serial port input stream: \" + ioe);\n                return;\n            }\n            try {\n                if (serialState == SERIALSTATE_WAITINGFORACK) {\n                    int val = input.read();\n                    if (val == EVE_ACK) {\n                        System.out.println(\"Received ACK from device, leaving initialize mode\");\n                        // update our status...\n                        synchronized (sync) {\n                            serialState = SERIALSTATE_POSTINIT;\n                            // tell our synchronization object..\n                            sync.notify();\n                        }\n                        // wait for it to die..\n                        try {\n                            initThread.join();\n                        } catch (InterruptedException ieeee) {\n                        }\n                        initThread = null;\n                        // dump any input we have...\n                        while (input.read() != -1) ;\n                        fireSerialSampleEvent(SerialSampleIOEvent.INITIALIZED_EVENT, null);\n                        // yay!\n                        serialState = SERIALSTATE_NORMAL;\n                        return;\n                    }\n                    System.out.println(\"Received \" + val + \"while waiting for ACK\");\n                } else if (serialState == SERIALSTATE_NORMAL) {\n                    int counter, valuehi, valuelo, value;\n                    // if any of these are -1, we timed out.\n                    // something was most likely invalid in the send/serial link...\n                    // don't worry, we still have to ACK everything.\n                    if (((counter = input.read()) == -1) || ((valuehi = input.read()) == -1) || ((valuelo = input.read()) == -1)) {\n                        fireSerialSampleEvent(SerialSampleIOEvent.BAD_SAMPLE_EVENT, null);\n                        return;\n                    }\n                    // this is a duplicate packet. ignore it!\n                    if (counter == lastSerial)\n                        return;\n                    lastSerial = counter;\n                    value = (256 * valuehi) + valuelo;\n                    fireSerialSampleEvent(SerialSampleIOEvent.NEW_SAMPLE_EVENT, new Integer(value));\n                }\n            } catch (IOException ioe) {\n                System.out.println(\"Error reading from serial port: \" + ioe);\n            }\n        }\n    }\n\n    // obnoxiously stupid, but on a 'link error' Java seems to\n    // mess around for a few seconds, perhaps searching other libraries?\n    // Let's only do this once.\n    private static boolean hscChecked = false;\n\n    private static boolean hscResult = false;\n\n    // returns TRUE if serial package is capable on this platform...\n    public static boolean hasSerialCapability() {\n        // stupid.\n        if (hscChecked)\n            return hscResult;\n        // set the checked flag... check it, if it succeeds, change the result.\n        hscChecked = true;\n        try {\n            // this loads the DLL...\n            Class.forName(\"gnu.io.RXTXCommDriver\");\n            hscResult = true;\n        } catch (Exception e) {\n            // driver not installed...\n            System.err.println(e.toString());\n        } catch (Error e) {\n            // native interface not installed...\n            System.err.println(e.toString());\n        }\n        return hscResult;\n    }\n\n    // return an array of Strings that contains all serial port identifiers...\n    public static Vector enumeratePorts() {\n        Enumeration ports = CommPortIdentifier.getPortIdentifiers();\n        Vector portStrings = new Vector();\n        while (ports.hasMoreElements()) {\n            CommPortIdentifier currentPort = (CommPortIdentifier) ports.nextElement();\n            if (currentPort.getPortType() != CommPortIdentifier.PORT_SERIAL)\n                continue;\n            portStrings.add(new String(currentPort.getName()));\n        }\n        return portStrings;\n    }\n\n    private SerialPort openPort(String portName) throws IOException {\n        CommPort port;\n        CommPortIdentifier portId;\n        try {\n            // get the port by name.\n            portId = CommPortIdentifier.getPortIdentifier(portName);\n            // take ownership...\n            port = portId.open(\"Corina\", 1000);\n            // it's a serial port. If it's not, something's fubar.\n            if (!(port instanceof SerialPort)) {\n                throw new IOException(\"Unable to open port: Port type is unsupported.\");\n            }\n            // 9600 8N1, no flow control...\n            ((SerialPort) port).setSerialPortParams(9600, SerialPort.DATABITS_8, SerialPort.STOPBITS_1, SerialPort.PARITY_NONE);\n            ((SerialPort) port).setFlowControlMode(SerialPort.FLOWCONTROL_NONE);\n            // set up our event listener\n            ((SerialPort) port).addEventListener(this);\n            ((SerialPort) port).notifyOnDataAvailable(true);\n            // time out after 500ms when reading...\n            ((SerialPort) port).enableReceiveTimeout(500);\n            //dataOutStream = new BufferedOutputStream((((SerialPort)port).getOutputStream()));\n        } catch (NoSuchPortException e) {\n            throw new IOException(\"Unable to open port: it does not exist!\");\n        } catch (PortInUseException e) {\n            throw new IOException(\"Unable to open port: it is in use by another application.\");\n        } catch (UnsupportedCommOperationException e) {\n            // something is broken??\n            throw new IOException(\"Unable to open port: unknown error 1. help me.\");\n        } catch (TooManyListenersException e) {\n            // uh... we just made it. and set the listener.  something is broken.\n            throw new IOException(\"Unable to open port: unknown error 2. help me.\");\n        }\n        return (SerialPort) port;\n    }\n\n    public void addSerialSampleIOListener(SerialSampleIOListener l) {\n        if (!listeners.contains(l))\n            listeners.add(l);\n    }\n\n    public void removeSerialSampleIOListener(SerialSampleIOListener l) {\n        listeners.remove(l);\n    }\n\n    private synchronized void fireSerialSampleEvent(int type, Object value) {\n        // alert all listeners\n        SerialSampleIOListener[] l;\n        synchronized (listeners) {\n            l = (SerialSampleIOListener[]) listeners.toArray(new SerialSampleIOListener[listeners.size()]);\n        }\n        int size = l.length;\n        if (size == 0)\n            return;\n        SerialSampleIOEvent e = new SerialSampleIOEvent(SerialSampleIO.class, type, value);\n        for (int i = 0; i < size; i++) {\n            l[i].SerialSampleIONotify(e);\n        }\n    }\n    /*\n\tpublic static void main(String[] args) {\n\t\tSerialSampleIO eio;\n\t\t\n\t\t//SerialSampleIO.enumPorts();\n\t\t\n\t\ttry {\n\t\t\teio = new SerialSampleIO(\"COM4\");\n\t\t\teio.initialize();\n\t\t}\n\t\tcatch (IOException e) {\n\t\t\tSystem.out.println(e.toString());\n\t\t}\n\t\t\n\t}\n\t*/\n}\n",
		"id": "/EvoSuiteBenchmark/35_corina/src/main/java/corina/io/SerialSampleIO_1Test.java",
		"test_prompt": "// SerialSampleIO_1Test.java\npackage corina.io;\n\nimport java.util.*;\nimport java.lang.reflect.*;\nimport java.io.*;\nimport corina.prefs.Prefs;\nimport corina.prefs.PrefsEvent;\nimport corina.prefs.PrefsListener;\nimport gnu.io.*;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link SerialSampleIO}.\n* It contains ten unit test cases for the {@link SerialSampleIO#enumeratePorts()} method.\n*/\nclass SerialSampleIO_1Test {"
	},
	{
		"original_code": "// Exporter.java\n/**\n */\npackage corina.io;\n\nimport java.io.BufferedWriter;\nimport java.io.File;\nimport java.io.FileWriter;\nimport java.io.IOException;\nimport java.util.ArrayList;\nimport java.util.List;\nimport java.util.ListIterator;\nimport javax.swing.JFileChooser;\nimport corina.Sample;\nimport corina.core.App;\nimport corina.formats.Filetype;\nimport corina.formats.PackedFileType;\nimport corina.gui.Bug;\nimport corina.gui.FileDialog;\nimport corina.gui.UserCancelledException;\nimport corina.ui.Alert;\nimport corina.ui.I18n;\nimport corina.util.Overwrite;\n\n/**\n * @author Lucas Madar\n */\npublic class Exporter {\n\n    private String exportDirectory;\n\n    private boolean rememberExportDirectory;\n\n    public Exporter() {\n        rememberExportDirectory = true;\n        // load the last export directory. If it doesn't exist, make a nice default.\n        exportDirectory = App.prefs.getPref(\"corina.dir.export\");\n        if (exportDirectory == null)\n            exportDirectory = App.prefs.getPref(\"corina.dir.data\");\n        if (exportDirectory == null)\n            exportDirectory = \"\";\n        // now, keep going back until it exists and is a directory.\n        File exdf = new File(exportDirectory).getAbsoluteFile();\n        while (!exdf.isDirectory() && exdf.toString().length() > 0) exdf = exdf.getParentFile();\n        exportDirectory = exdf.getAbsolutePath();\n    }\n\n    // set from an outside source? Don't save it.\n    public void setExportDirectory(String directory) {\n        rememberExportDirectory = false;\n        exportDirectory = directory;\n    }\n\n    /**\n     * Save a single sample.\n     * Pops up a dialog box asking for the file name to save to, exports to the type\n     * passed in 'format' (ie, corina.Formats.Tucson)\n     *\n     * @param exportee the sample to export\n     * @return The full path of the exported file name, or null if not saved\n     */\n    public String saveSingleSample(Sample exportee, String format) {\n        // use the default title...\n        String etext = \"\";\n        if (exportee.meta.get(\"filename\") != null) {\n            File oldfile = new File((String) exportee.meta.get(\"filename\"));\n            etext = \" (\" + oldfile.getName() + \")\";\n        }\n        String title = I18n.getText(\"export\") + etext;\n        return saveSingleSample(exportee, format, title);\n    }\n\n    public String saveSingleSample(Sample exportee, String format, String title) {\n        String fn = null;\n        try {\n            fn = FileDialog.showSingle(title, exportDirectory);\n            // save the export directory. Remember, fn is the actual filename, so we need to chop off the file name bit.\n            if (rememberExportDirectory)\n                App.prefs.setPref(\"corina.dir.export\", new File(fn).getParent());\n            // check for already-exists\n            Overwrite.overwrite(fn);\n            // save it\n            Filetype f = (Filetype) Class.forName(format).newInstance();\n            BufferedWriter w = new BufferedWriter(new FileWriter(fn));\n            try {\n                f.save(exportee, w);\n            } finally {\n                try {\n                    w.close();\n                } catch (IOException ioe) {\n                    ioe.printStackTrace();\n                }\n            }\n        } catch (UserCancelledException uce) {\n            // do nothing\n        } catch (IOException ioe) {\n            // problem saving, tell user\n            // WAS: passed |me| as owner of dialog; do i lose something here?\n            // WAS: WARNING_MESSAGE -- Alert uses ERROR_MESSAGE, which i think is at least as good\n            Alert.error(I18n.getText(\"export_error_title\"), I18n.getText(\"xport_error\") + ioe);\n        } catch (Exception ex) {\n            // problem creating filetype, or npe, or whatever -- bug.\n            Bug.bug(ex);\n        }\n        return fn;\n    }\n\n    /**\n     * Save a list of samples in packed format.\n     * Pops up a dialog box asking for the file name to save to, exports to the type chosen in the\n     * visible popup menu.\n     *\n     * @param exportee the sample to export\n     * @return the full path of the saved packed sample, or null if not saved\n     */\n    public String savePackedSample(List slist, String format) {\n        return savePackedSample(slist, format, I18n.getText(\"export\"));\n    }\n\n    public String savePackedSample(List slist, String format, String title) {\n        String fn = null;\n        try {\n            // ask for filename\n            fn = FileDialog.showSingle(title, exportDirectory);\n            // save the export directory. Remember, fn is the actual filename, so we need to chop off the file name bit.\n            if (rememberExportDirectory)\n                App.prefs.setPref(\"corina.dir.export\", new File(fn).getParent());\n            // check for already-exists\n            Overwrite.overwrite(fn);\n            // save it\n            Filetype f = (Filetype) Class.forName(format).newInstance();\n            BufferedWriter w = new BufferedWriter(new FileWriter(fn));\n            try {\n                ((PackedFileType) f).saveSamples(slist, w);\n            } finally {\n                try {\n                    w.close();\n                } catch (IOException ioe) {\n                    ioe.printStackTrace();\n                }\n            }\n        } catch (UserCancelledException uce) {\n            // do nothing\n        } catch (IOException ioe) {\n            // problem saving, tell user\n            // WAS: passed |me| as owner of dialog; do i lose something here?\n            // WAS: WARNING_MESSAGE -- Alert uses ERROR_MESSAGE, which i think is at least as good\n            Alert.error(I18n.getText(\"export_error_title\"), I18n.getText(\"xport_error\") + ioe);\n        } catch (Exception ex) {\n            // problem creating filetype, or npe, or whatever -- bug.\n            Bug.bug(ex);\n        }\n        return fn;\n    }\n\n    /**\n     * Saves multiple samples.\n     * Pops up a dialog box asking for a folder to save to;\n     * files are dumped in to this folder with a default extension added, ie:\n     * ACM123.PIK becomes ACM123.PIK.TUC\n     *\n     * @param slist a List of samples\n     * @return a List of saved file names, or null if not saved.\n     */\n    public List saveMultiSample(List slist, String format) {\n        return saveMultiSample(slist, format, \"Choose an Export Folder\");\n    }\n\n    public List saveMultiSample(List slist, String format, String title) {\n        List savedNames = new ArrayList();\n        try {\n            // get the export format...\n            Filetype f = (Filetype) Class.forName(format).newInstance();\n            JFileChooser chooser = new JFileChooser();\n            chooser.setDialogTitle(title);\n            chooser.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);\n            int rv = chooser.showDialog(null, \"OK\");\n            if (rv != JFileChooser.APPROVE_OPTION)\n                return null;\n            // save the export directory. Remember, fn is the actual filename, so we need to chop off the file name bit.\n            if (rememberExportDirectory)\n                App.prefs.setPref(\"corina.dir.export\", chooser.getSelectedFile().getAbsolutePath());\n            File dir = new File(chooser.getSelectedFile().getAbsolutePath() + File.separator + \"Export\" + format.substring(format.lastIndexOf('.'), format.length()));\n            if (!((dir.exists() && dir.isDirectory()) || dir.mkdirs())) {\n                Alert.error(\"Couldn't export\", \"Couldn't create/write to directory \" + dir.getName());\n                return null;\n            }\n            // for each sample, make a new filename and export it!\n            for (int i = 0; i < slist.size(); i++) {\n                Sample s = (Sample) slist.get(i);\n                String progress = \"Processing \" + ((String) s.meta.get(\"filename\")) + \" (\" + i + \"/\" + slist.size() + \")\";\n                //preview.setText(progress);\n                // so, we have things like \"blah.pkw.TUC!\"\n                // gross, but this is what people wanted.\n                String fn = dir.getAbsolutePath() + File.separator + new File((String) s.meta.get(\"filename\")).getName() + f.getDefaultExtension();\n                savedNames.add(fn);\n                BufferedWriter w = new BufferedWriter(new FileWriter(fn));\n                try {\n                    f.save(s, w);\n                } finally {\n                    try {\n                        w.close();\n                    } catch (IOException ioe) {\n                        ioe.printStackTrace();\n                    }\n                }\n                System.out.println(\"Exported \" + fn);\n            }\n        } catch (Exception ex) {\n            // problem creating filetype, or npe, or whatever -- bug.\n            Bug.bug(ex);\n        }\n        return savedNames;\n    }\n}\n",
		"id": "/EvoSuiteBenchmark/35_corina/src/main/java/corina/io/Exporter_0Test.java",
		"test_prompt": "// Exporter_0Test.java\npackage corina.io;\n\nimport java.io.BufferedWriter;\nimport java.io.File;\nimport java.io.FileWriter;\nimport java.io.IOException;\nimport java.util.ArrayList;\nimport java.util.List;\nimport java.util.ListIterator;\nimport javax.swing.JFileChooser;\nimport corina.Sample;\nimport corina.core.App;\nimport corina.formats.Filetype;\nimport corina.formats.PackedFileType;\nimport corina.gui.Bug;\nimport corina.gui.FileDialog;\nimport corina.gui.UserCancelledException;\nimport corina.ui.Alert;\nimport corina.ui.I18n;\nimport corina.util.Overwrite;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link Exporter}.\n* It contains ten unit test cases for the {@link Exporter#saveSingleSample(Sample, String)} method.\n*/\nclass Exporter_0Test {"
	},
	{
		"original_code": "// Exporter.java\n/**\n */\npackage corina.io;\n\nimport java.io.BufferedWriter;\nimport java.io.File;\nimport java.io.FileWriter;\nimport java.io.IOException;\nimport java.util.ArrayList;\nimport java.util.List;\nimport java.util.ListIterator;\nimport javax.swing.JFileChooser;\nimport corina.Sample;\nimport corina.core.App;\nimport corina.formats.Filetype;\nimport corina.formats.PackedFileType;\nimport corina.gui.Bug;\nimport corina.gui.FileDialog;\nimport corina.gui.UserCancelledException;\nimport corina.ui.Alert;\nimport corina.ui.I18n;\nimport corina.util.Overwrite;\n\n/**\n * @author Lucas Madar\n */\npublic class Exporter {\n\n    private String exportDirectory;\n\n    private boolean rememberExportDirectory;\n\n    public Exporter() {\n        rememberExportDirectory = true;\n        // load the last export directory. If it doesn't exist, make a nice default.\n        exportDirectory = App.prefs.getPref(\"corina.dir.export\");\n        if (exportDirectory == null)\n            exportDirectory = App.prefs.getPref(\"corina.dir.data\");\n        if (exportDirectory == null)\n            exportDirectory = \"\";\n        // now, keep going back until it exists and is a directory.\n        File exdf = new File(exportDirectory).getAbsoluteFile();\n        while (!exdf.isDirectory() && exdf.toString().length() > 0) exdf = exdf.getParentFile();\n        exportDirectory = exdf.getAbsolutePath();\n    }\n\n    // set from an outside source? Don't save it.\n    public void setExportDirectory(String directory) {\n        rememberExportDirectory = false;\n        exportDirectory = directory;\n    }\n\n    /**\n     * Save a single sample.\n     * Pops up a dialog box asking for the file name to save to, exports to the type\n     * passed in 'format' (ie, corina.Formats.Tucson)\n     *\n     * @param exportee the sample to export\n     * @return The full path of the exported file name, or null if not saved\n     */\n    public String saveSingleSample(Sample exportee, String format) {\n        // use the default title...\n        String etext = \"\";\n        if (exportee.meta.get(\"filename\") != null) {\n            File oldfile = new File((String) exportee.meta.get(\"filename\"));\n            etext = \" (\" + oldfile.getName() + \")\";\n        }\n        String title = I18n.getText(\"export\") + etext;\n        return saveSingleSample(exportee, format, title);\n    }\n\n    public String saveSingleSample(Sample exportee, String format, String title) {\n        String fn = null;\n        try {\n            fn = FileDialog.showSingle(title, exportDirectory);\n            // save the export directory. Remember, fn is the actual filename, so we need to chop off the file name bit.\n            if (rememberExportDirectory)\n                App.prefs.setPref(\"corina.dir.export\", new File(fn).getParent());\n            // check for already-exists\n            Overwrite.overwrite(fn);\n            // save it\n            Filetype f = (Filetype) Class.forName(format).newInstance();\n            BufferedWriter w = new BufferedWriter(new FileWriter(fn));\n            try {\n                f.save(exportee, w);\n            } finally {\n                try {\n                    w.close();\n                } catch (IOException ioe) {\n                    ioe.printStackTrace();\n                }\n            }\n        } catch (UserCancelledException uce) {\n            // do nothing\n        } catch (IOException ioe) {\n            // problem saving, tell user\n            // WAS: passed |me| as owner of dialog; do i lose something here?\n            // WAS: WARNING_MESSAGE -- Alert uses ERROR_MESSAGE, which i think is at least as good\n            Alert.error(I18n.getText(\"export_error_title\"), I18n.getText(\"xport_error\") + ioe);\n        } catch (Exception ex) {\n            // problem creating filetype, or npe, or whatever -- bug.\n            Bug.bug(ex);\n        }\n        return fn;\n    }\n\n    /**\n     * Save a list of samples in packed format.\n     * Pops up a dialog box asking for the file name to save to, exports to the type chosen in the\n     * visible popup menu.\n     *\n     * @param exportee the sample to export\n     * @return the full path of the saved packed sample, or null if not saved\n     */\n    public String savePackedSample(List slist, String format) {\n        return savePackedSample(slist, format, I18n.getText(\"export\"));\n    }\n\n    public String savePackedSample(List slist, String format, String title) {\n        String fn = null;\n        try {\n            // ask for filename\n            fn = FileDialog.showSingle(title, exportDirectory);\n            // save the export directory. Remember, fn is the actual filename, so we need to chop off the file name bit.\n            if (rememberExportDirectory)\n                App.prefs.setPref(\"corina.dir.export\", new File(fn).getParent());\n            // check for already-exists\n            Overwrite.overwrite(fn);\n            // save it\n            Filetype f = (Filetype) Class.forName(format).newInstance();\n            BufferedWriter w = new BufferedWriter(new FileWriter(fn));\n            try {\n                ((PackedFileType) f).saveSamples(slist, w);\n            } finally {\n                try {\n                    w.close();\n                } catch (IOException ioe) {\n                    ioe.printStackTrace();\n                }\n            }\n        } catch (UserCancelledException uce) {\n            // do nothing\n        } catch (IOException ioe) {\n            // problem saving, tell user\n            // WAS: passed |me| as owner of dialog; do i lose something here?\n            // WAS: WARNING_MESSAGE -- Alert uses ERROR_MESSAGE, which i think is at least as good\n            Alert.error(I18n.getText(\"export_error_title\"), I18n.getText(\"xport_error\") + ioe);\n        } catch (Exception ex) {\n            // problem creating filetype, or npe, or whatever -- bug.\n            Bug.bug(ex);\n        }\n        return fn;\n    }\n\n    /**\n     * Saves multiple samples.\n     * Pops up a dialog box asking for a folder to save to;\n     * files are dumped in to this folder with a default extension added, ie:\n     * ACM123.PIK becomes ACM123.PIK.TUC\n     *\n     * @param slist a List of samples\n     * @return a List of saved file names, or null if not saved.\n     */\n    public List saveMultiSample(List slist, String format) {\n        return saveMultiSample(slist, format, \"Choose an Export Folder\");\n    }\n\n    public List saveMultiSample(List slist, String format, String title) {\n        List savedNames = new ArrayList();\n        try {\n            // get the export format...\n            Filetype f = (Filetype) Class.forName(format).newInstance();\n            JFileChooser chooser = new JFileChooser();\n            chooser.setDialogTitle(title);\n            chooser.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);\n            int rv = chooser.showDialog(null, \"OK\");\n            if (rv != JFileChooser.APPROVE_OPTION)\n                return null;\n            // save the export directory. Remember, fn is the actual filename, so we need to chop off the file name bit.\n            if (rememberExportDirectory)\n                App.prefs.setPref(\"corina.dir.export\", chooser.getSelectedFile().getAbsolutePath());\n            File dir = new File(chooser.getSelectedFile().getAbsolutePath() + File.separator + \"Export\" + format.substring(format.lastIndexOf('.'), format.length()));\n            if (!((dir.exists() && dir.isDirectory()) || dir.mkdirs())) {\n                Alert.error(\"Couldn't export\", \"Couldn't create/write to directory \" + dir.getName());\n                return null;\n            }\n            // for each sample, make a new filename and export it!\n            for (int i = 0; i < slist.size(); i++) {\n                Sample s = (Sample) slist.get(i);\n                String progress = \"Processing \" + ((String) s.meta.get(\"filename\")) + \" (\" + i + \"/\" + slist.size() + \")\";\n                //preview.setText(progress);\n                // so, we have things like \"blah.pkw.TUC!\"\n                // gross, but this is what people wanted.\n                String fn = dir.getAbsolutePath() + File.separator + new File((String) s.meta.get(\"filename\")).getName() + f.getDefaultExtension();\n                savedNames.add(fn);\n                BufferedWriter w = new BufferedWriter(new FileWriter(fn));\n                try {\n                    f.save(s, w);\n                } finally {\n                    try {\n                        w.close();\n                    } catch (IOException ioe) {\n                        ioe.printStackTrace();\n                    }\n                }\n                System.out.println(\"Exported \" + fn);\n            }\n        } catch (Exception ex) {\n            // problem creating filetype, or npe, or whatever -- bug.\n            Bug.bug(ex);\n        }\n        return savedNames;\n    }\n}\n",
		"id": "/EvoSuiteBenchmark/35_corina/src/main/java/corina/io/Exporter_1Test.java",
		"test_prompt": "// Exporter_1Test.java\npackage corina.io;\n\nimport java.io.BufferedWriter;\nimport java.io.File;\nimport java.io.FileWriter;\nimport java.io.IOException;\nimport java.util.ArrayList;\nimport java.util.List;\nimport java.util.ListIterator;\nimport javax.swing.JFileChooser;\nimport corina.Sample;\nimport corina.core.App;\nimport corina.formats.Filetype;\nimport corina.formats.PackedFileType;\nimport corina.gui.Bug;\nimport corina.gui.FileDialog;\nimport corina.gui.UserCancelledException;\nimport corina.ui.Alert;\nimport corina.ui.I18n;\nimport corina.util.Overwrite;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link Exporter}.\n* It contains ten unit test cases for the {@link Exporter#saveSingleSample(Sample, String, String)} method.\n*/\nclass Exporter_1Test {"
	},
	{
		"original_code": "// Exporter.java\n/**\n */\npackage corina.io;\n\nimport java.io.BufferedWriter;\nimport java.io.File;\nimport java.io.FileWriter;\nimport java.io.IOException;\nimport java.util.ArrayList;\nimport java.util.List;\nimport java.util.ListIterator;\nimport javax.swing.JFileChooser;\nimport corina.Sample;\nimport corina.core.App;\nimport corina.formats.Filetype;\nimport corina.formats.PackedFileType;\nimport corina.gui.Bug;\nimport corina.gui.FileDialog;\nimport corina.gui.UserCancelledException;\nimport corina.ui.Alert;\nimport corina.ui.I18n;\nimport corina.util.Overwrite;\n\n/**\n * @author Lucas Madar\n */\npublic class Exporter {\n\n    private String exportDirectory;\n\n    private boolean rememberExportDirectory;\n\n    public Exporter() {\n        rememberExportDirectory = true;\n        // load the last export directory. If it doesn't exist, make a nice default.\n        exportDirectory = App.prefs.getPref(\"corina.dir.export\");\n        if (exportDirectory == null)\n            exportDirectory = App.prefs.getPref(\"corina.dir.data\");\n        if (exportDirectory == null)\n            exportDirectory = \"\";\n        // now, keep going back until it exists and is a directory.\n        File exdf = new File(exportDirectory).getAbsoluteFile();\n        while (!exdf.isDirectory() && exdf.toString().length() > 0) exdf = exdf.getParentFile();\n        exportDirectory = exdf.getAbsolutePath();\n    }\n\n    // set from an outside source? Don't save it.\n    public void setExportDirectory(String directory) {\n        rememberExportDirectory = false;\n        exportDirectory = directory;\n    }\n\n    /**\n     * Save a single sample.\n     * Pops up a dialog box asking for the file name to save to, exports to the type\n     * passed in 'format' (ie, corina.Formats.Tucson)\n     *\n     * @param exportee the sample to export\n     * @return The full path of the exported file name, or null if not saved\n     */\n    public String saveSingleSample(Sample exportee, String format) {\n        // use the default title...\n        String etext = \"\";\n        if (exportee.meta.get(\"filename\") != null) {\n            File oldfile = new File((String) exportee.meta.get(\"filename\"));\n            etext = \" (\" + oldfile.getName() + \")\";\n        }\n        String title = I18n.getText(\"export\") + etext;\n        return saveSingleSample(exportee, format, title);\n    }\n\n    public String saveSingleSample(Sample exportee, String format, String title) {\n        String fn = null;\n        try {\n            fn = FileDialog.showSingle(title, exportDirectory);\n            // save the export directory. Remember, fn is the actual filename, so we need to chop off the file name bit.\n            if (rememberExportDirectory)\n                App.prefs.setPref(\"corina.dir.export\", new File(fn).getParent());\n            // check for already-exists\n            Overwrite.overwrite(fn);\n            // save it\n            Filetype f = (Filetype) Class.forName(format).newInstance();\n            BufferedWriter w = new BufferedWriter(new FileWriter(fn));\n            try {\n                f.save(exportee, w);\n            } finally {\n                try {\n                    w.close();\n                } catch (IOException ioe) {\n                    ioe.printStackTrace();\n                }\n            }\n        } catch (UserCancelledException uce) {\n            // do nothing\n        } catch (IOException ioe) {\n            // problem saving, tell user\n            // WAS: passed |me| as owner of dialog; do i lose something here?\n            // WAS: WARNING_MESSAGE -- Alert uses ERROR_MESSAGE, which i think is at least as good\n            Alert.error(I18n.getText(\"export_error_title\"), I18n.getText(\"xport_error\") + ioe);\n        } catch (Exception ex) {\n            // problem creating filetype, or npe, or whatever -- bug.\n            Bug.bug(ex);\n        }\n        return fn;\n    }\n\n    /**\n     * Save a list of samples in packed format.\n     * Pops up a dialog box asking for the file name to save to, exports to the type chosen in the\n     * visible popup menu.\n     *\n     * @param exportee the sample to export\n     * @return the full path of the saved packed sample, or null if not saved\n     */\n    public String savePackedSample(List slist, String format) {\n        return savePackedSample(slist, format, I18n.getText(\"export\"));\n    }\n\n    public String savePackedSample(List slist, String format, String title) {\n        String fn = null;\n        try {\n            // ask for filename\n            fn = FileDialog.showSingle(title, exportDirectory);\n            // save the export directory. Remember, fn is the actual filename, so we need to chop off the file name bit.\n            if (rememberExportDirectory)\n                App.prefs.setPref(\"corina.dir.export\", new File(fn).getParent());\n            // check for already-exists\n            Overwrite.overwrite(fn);\n            // save it\n            Filetype f = (Filetype) Class.forName(format).newInstance();\n            BufferedWriter w = new BufferedWriter(new FileWriter(fn));\n            try {\n                ((PackedFileType) f).saveSamples(slist, w);\n            } finally {\n                try {\n                    w.close();\n                } catch (IOException ioe) {\n                    ioe.printStackTrace();\n                }\n            }\n        } catch (UserCancelledException uce) {\n            // do nothing\n        } catch (IOException ioe) {\n            // problem saving, tell user\n            // WAS: passed |me| as owner of dialog; do i lose something here?\n            // WAS: WARNING_MESSAGE -- Alert uses ERROR_MESSAGE, which i think is at least as good\n            Alert.error(I18n.getText(\"export_error_title\"), I18n.getText(\"xport_error\") + ioe);\n        } catch (Exception ex) {\n            // problem creating filetype, or npe, or whatever -- bug.\n            Bug.bug(ex);\n        }\n        return fn;\n    }\n\n    /**\n     * Saves multiple samples.\n     * Pops up a dialog box asking for a folder to save to;\n     * files are dumped in to this folder with a default extension added, ie:\n     * ACM123.PIK becomes ACM123.PIK.TUC\n     *\n     * @param slist a List of samples\n     * @return a List of saved file names, or null if not saved.\n     */\n    public List saveMultiSample(List slist, String format) {\n        return saveMultiSample(slist, format, \"Choose an Export Folder\");\n    }\n\n    public List saveMultiSample(List slist, String format, String title) {\n        List savedNames = new ArrayList();\n        try {\n            // get the export format...\n            Filetype f = (Filetype) Class.forName(format).newInstance();\n            JFileChooser chooser = new JFileChooser();\n            chooser.setDialogTitle(title);\n            chooser.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);\n            int rv = chooser.showDialog(null, \"OK\");\n            if (rv != JFileChooser.APPROVE_OPTION)\n                return null;\n            // save the export directory. Remember, fn is the actual filename, so we need to chop off the file name bit.\n            if (rememberExportDirectory)\n                App.prefs.setPref(\"corina.dir.export\", chooser.getSelectedFile().getAbsolutePath());\n            File dir = new File(chooser.getSelectedFile().getAbsolutePath() + File.separator + \"Export\" + format.substring(format.lastIndexOf('.'), format.length()));\n            if (!((dir.exists() && dir.isDirectory()) || dir.mkdirs())) {\n                Alert.error(\"Couldn't export\", \"Couldn't create/write to directory \" + dir.getName());\n                return null;\n            }\n            // for each sample, make a new filename and export it!\n            for (int i = 0; i < slist.size(); i++) {\n                Sample s = (Sample) slist.get(i);\n                String progress = \"Processing \" + ((String) s.meta.get(\"filename\")) + \" (\" + i + \"/\" + slist.size() + \")\";\n                //preview.setText(progress);\n                // so, we have things like \"blah.pkw.TUC!\"\n                // gross, but this is what people wanted.\n                String fn = dir.getAbsolutePath() + File.separator + new File((String) s.meta.get(\"filename\")).getName() + f.getDefaultExtension();\n                savedNames.add(fn);\n                BufferedWriter w = new BufferedWriter(new FileWriter(fn));\n                try {\n                    f.save(s, w);\n                } finally {\n                    try {\n                        w.close();\n                    } catch (IOException ioe) {\n                        ioe.printStackTrace();\n                    }\n                }\n                System.out.println(\"Exported \" + fn);\n            }\n        } catch (Exception ex) {\n            // problem creating filetype, or npe, or whatever -- bug.\n            Bug.bug(ex);\n        }\n        return savedNames;\n    }\n}\n",
		"id": "/EvoSuiteBenchmark/35_corina/src/main/java/corina/io/Exporter_2Test.java",
		"test_prompt": "// Exporter_2Test.java\npackage corina.io;\n\nimport java.io.BufferedWriter;\nimport java.io.File;\nimport java.io.FileWriter;\nimport java.io.IOException;\nimport java.util.ArrayList;\nimport java.util.List;\nimport java.util.ListIterator;\nimport javax.swing.JFileChooser;\nimport corina.Sample;\nimport corina.core.App;\nimport corina.formats.Filetype;\nimport corina.formats.PackedFileType;\nimport corina.gui.Bug;\nimport corina.gui.FileDialog;\nimport corina.gui.UserCancelledException;\nimport corina.ui.Alert;\nimport corina.ui.I18n;\nimport corina.util.Overwrite;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link Exporter}.\n* It contains ten unit test cases for the {@link Exporter#savePackedSample(List, String)} method.\n*/\nclass Exporter_2Test {"
	},
	{
		"original_code": "// Exporter.java\n/**\n */\npackage corina.io;\n\nimport java.io.BufferedWriter;\nimport java.io.File;\nimport java.io.FileWriter;\nimport java.io.IOException;\nimport java.util.ArrayList;\nimport java.util.List;\nimport java.util.ListIterator;\nimport javax.swing.JFileChooser;\nimport corina.Sample;\nimport corina.core.App;\nimport corina.formats.Filetype;\nimport corina.formats.PackedFileType;\nimport corina.gui.Bug;\nimport corina.gui.FileDialog;\nimport corina.gui.UserCancelledException;\nimport corina.ui.Alert;\nimport corina.ui.I18n;\nimport corina.util.Overwrite;\n\n/**\n * @author Lucas Madar\n */\npublic class Exporter {\n\n    private String exportDirectory;\n\n    private boolean rememberExportDirectory;\n\n    public Exporter() {\n        rememberExportDirectory = true;\n        // load the last export directory. If it doesn't exist, make a nice default.\n        exportDirectory = App.prefs.getPref(\"corina.dir.export\");\n        if (exportDirectory == null)\n            exportDirectory = App.prefs.getPref(\"corina.dir.data\");\n        if (exportDirectory == null)\n            exportDirectory = \"\";\n        // now, keep going back until it exists and is a directory.\n        File exdf = new File(exportDirectory).getAbsoluteFile();\n        while (!exdf.isDirectory() && exdf.toString().length() > 0) exdf = exdf.getParentFile();\n        exportDirectory = exdf.getAbsolutePath();\n    }\n\n    // set from an outside source? Don't save it.\n    public void setExportDirectory(String directory) {\n        rememberExportDirectory = false;\n        exportDirectory = directory;\n    }\n\n    /**\n     * Save a single sample.\n     * Pops up a dialog box asking for the file name to save to, exports to the type\n     * passed in 'format' (ie, corina.Formats.Tucson)\n     *\n     * @param exportee the sample to export\n     * @return The full path of the exported file name, or null if not saved\n     */\n    public String saveSingleSample(Sample exportee, String format) {\n        // use the default title...\n        String etext = \"\";\n        if (exportee.meta.get(\"filename\") != null) {\n            File oldfile = new File((String) exportee.meta.get(\"filename\"));\n            etext = \" (\" + oldfile.getName() + \")\";\n        }\n        String title = I18n.getText(\"export\") + etext;\n        return saveSingleSample(exportee, format, title);\n    }\n\n    public String saveSingleSample(Sample exportee, String format, String title) {\n        String fn = null;\n        try {\n            fn = FileDialog.showSingle(title, exportDirectory);\n            // save the export directory. Remember, fn is the actual filename, so we need to chop off the file name bit.\n            if (rememberExportDirectory)\n                App.prefs.setPref(\"corina.dir.export\", new File(fn).getParent());\n            // check for already-exists\n            Overwrite.overwrite(fn);\n            // save it\n            Filetype f = (Filetype) Class.forName(format).newInstance();\n            BufferedWriter w = new BufferedWriter(new FileWriter(fn));\n            try {\n                f.save(exportee, w);\n            } finally {\n                try {\n                    w.close();\n                } catch (IOException ioe) {\n                    ioe.printStackTrace();\n                }\n            }\n        } catch (UserCancelledException uce) {\n            // do nothing\n        } catch (IOException ioe) {\n            // problem saving, tell user\n            // WAS: passed |me| as owner of dialog; do i lose something here?\n            // WAS: WARNING_MESSAGE -- Alert uses ERROR_MESSAGE, which i think is at least as good\n            Alert.error(I18n.getText(\"export_error_title\"), I18n.getText(\"xport_error\") + ioe);\n        } catch (Exception ex) {\n            // problem creating filetype, or npe, or whatever -- bug.\n            Bug.bug(ex);\n        }\n        return fn;\n    }\n\n    /**\n     * Save a list of samples in packed format.\n     * Pops up a dialog box asking for the file name to save to, exports to the type chosen in the\n     * visible popup menu.\n     *\n     * @param exportee the sample to export\n     * @return the full path of the saved packed sample, or null if not saved\n     */\n    public String savePackedSample(List slist, String format) {\n        return savePackedSample(slist, format, I18n.getText(\"export\"));\n    }\n\n    public String savePackedSample(List slist, String format, String title) {\n        String fn = null;\n        try {\n            // ask for filename\n            fn = FileDialog.showSingle(title, exportDirectory);\n            // save the export directory. Remember, fn is the actual filename, so we need to chop off the file name bit.\n            if (rememberExportDirectory)\n                App.prefs.setPref(\"corina.dir.export\", new File(fn).getParent());\n            // check for already-exists\n            Overwrite.overwrite(fn);\n            // save it\n            Filetype f = (Filetype) Class.forName(format).newInstance();\n            BufferedWriter w = new BufferedWriter(new FileWriter(fn));\n            try {\n                ((PackedFileType) f).saveSamples(slist, w);\n            } finally {\n                try {\n                    w.close();\n                } catch (IOException ioe) {\n                    ioe.printStackTrace();\n                }\n            }\n        } catch (UserCancelledException uce) {\n            // do nothing\n        } catch (IOException ioe) {\n            // problem saving, tell user\n            // WAS: passed |me| as owner of dialog; do i lose something here?\n            // WAS: WARNING_MESSAGE -- Alert uses ERROR_MESSAGE, which i think is at least as good\n            Alert.error(I18n.getText(\"export_error_title\"), I18n.getText(\"xport_error\") + ioe);\n        } catch (Exception ex) {\n            // problem creating filetype, or npe, or whatever -- bug.\n            Bug.bug(ex);\n        }\n        return fn;\n    }\n\n    /**\n     * Saves multiple samples.\n     * Pops up a dialog box asking for a folder to save to;\n     * files are dumped in to this folder with a default extension added, ie:\n     * ACM123.PIK becomes ACM123.PIK.TUC\n     *\n     * @param slist a List of samples\n     * @return a List of saved file names, or null if not saved.\n     */\n    public List saveMultiSample(List slist, String format) {\n        return saveMultiSample(slist, format, \"Choose an Export Folder\");\n    }\n\n    public List saveMultiSample(List slist, String format, String title) {\n        List savedNames = new ArrayList();\n        try {\n            // get the export format...\n            Filetype f = (Filetype) Class.forName(format).newInstance();\n            JFileChooser chooser = new JFileChooser();\n            chooser.setDialogTitle(title);\n            chooser.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);\n            int rv = chooser.showDialog(null, \"OK\");\n            if (rv != JFileChooser.APPROVE_OPTION)\n                return null;\n            // save the export directory. Remember, fn is the actual filename, so we need to chop off the file name bit.\n            if (rememberExportDirectory)\n                App.prefs.setPref(\"corina.dir.export\", chooser.getSelectedFile().getAbsolutePath());\n            File dir = new File(chooser.getSelectedFile().getAbsolutePath() + File.separator + \"Export\" + format.substring(format.lastIndexOf('.'), format.length()));\n            if (!((dir.exists() && dir.isDirectory()) || dir.mkdirs())) {\n                Alert.error(\"Couldn't export\", \"Couldn't create/write to directory \" + dir.getName());\n                return null;\n            }\n            // for each sample, make a new filename and export it!\n            for (int i = 0; i < slist.size(); i++) {\n                Sample s = (Sample) slist.get(i);\n                String progress = \"Processing \" + ((String) s.meta.get(\"filename\")) + \" (\" + i + \"/\" + slist.size() + \")\";\n                //preview.setText(progress);\n                // so, we have things like \"blah.pkw.TUC!\"\n                // gross, but this is what people wanted.\n                String fn = dir.getAbsolutePath() + File.separator + new File((String) s.meta.get(\"filename\")).getName() + f.getDefaultExtension();\n                savedNames.add(fn);\n                BufferedWriter w = new BufferedWriter(new FileWriter(fn));\n                try {\n                    f.save(s, w);\n                } finally {\n                    try {\n                        w.close();\n                    } catch (IOException ioe) {\n                        ioe.printStackTrace();\n                    }\n                }\n                System.out.println(\"Exported \" + fn);\n            }\n        } catch (Exception ex) {\n            // problem creating filetype, or npe, or whatever -- bug.\n            Bug.bug(ex);\n        }\n        return savedNames;\n    }\n}\n",
		"id": "/EvoSuiteBenchmark/35_corina/src/main/java/corina/io/Exporter_3Test.java",
		"test_prompt": "// Exporter_3Test.java\npackage corina.io;\n\nimport java.io.BufferedWriter;\nimport java.io.File;\nimport java.io.FileWriter;\nimport java.io.IOException;\nimport java.util.ArrayList;\nimport java.util.List;\nimport java.util.ListIterator;\nimport javax.swing.JFileChooser;\nimport corina.Sample;\nimport corina.core.App;\nimport corina.formats.Filetype;\nimport corina.formats.PackedFileType;\nimport corina.gui.Bug;\nimport corina.gui.FileDialog;\nimport corina.gui.UserCancelledException;\nimport corina.ui.Alert;\nimport corina.ui.I18n;\nimport corina.util.Overwrite;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link Exporter}.\n* It contains ten unit test cases for the {@link Exporter#savePackedSample(List, String, String)} method.\n*/\nclass Exporter_3Test {"
	},
	{
		"original_code": "// Exporter.java\n/**\n */\npackage corina.io;\n\nimport java.io.BufferedWriter;\nimport java.io.File;\nimport java.io.FileWriter;\nimport java.io.IOException;\nimport java.util.ArrayList;\nimport java.util.List;\nimport java.util.ListIterator;\nimport javax.swing.JFileChooser;\nimport corina.Sample;\nimport corina.core.App;\nimport corina.formats.Filetype;\nimport corina.formats.PackedFileType;\nimport corina.gui.Bug;\nimport corina.gui.FileDialog;\nimport corina.gui.UserCancelledException;\nimport corina.ui.Alert;\nimport corina.ui.I18n;\nimport corina.util.Overwrite;\n\n/**\n * @author Lucas Madar\n */\npublic class Exporter {\n\n    private String exportDirectory;\n\n    private boolean rememberExportDirectory;\n\n    public Exporter() {\n        rememberExportDirectory = true;\n        // load the last export directory. If it doesn't exist, make a nice default.\n        exportDirectory = App.prefs.getPref(\"corina.dir.export\");\n        if (exportDirectory == null)\n            exportDirectory = App.prefs.getPref(\"corina.dir.data\");\n        if (exportDirectory == null)\n            exportDirectory = \"\";\n        // now, keep going back until it exists and is a directory.\n        File exdf = new File(exportDirectory).getAbsoluteFile();\n        while (!exdf.isDirectory() && exdf.toString().length() > 0) exdf = exdf.getParentFile();\n        exportDirectory = exdf.getAbsolutePath();\n    }\n\n    // set from an outside source? Don't save it.\n    public void setExportDirectory(String directory) {\n        rememberExportDirectory = false;\n        exportDirectory = directory;\n    }\n\n    /**\n     * Save a single sample.\n     * Pops up a dialog box asking for the file name to save to, exports to the type\n     * passed in 'format' (ie, corina.Formats.Tucson)\n     *\n     * @param exportee the sample to export\n     * @return The full path of the exported file name, or null if not saved\n     */\n    public String saveSingleSample(Sample exportee, String format) {\n        // use the default title...\n        String etext = \"\";\n        if (exportee.meta.get(\"filename\") != null) {\n            File oldfile = new File((String) exportee.meta.get(\"filename\"));\n            etext = \" (\" + oldfile.getName() + \")\";\n        }\n        String title = I18n.getText(\"export\") + etext;\n        return saveSingleSample(exportee, format, title);\n    }\n\n    public String saveSingleSample(Sample exportee, String format, String title) {\n        String fn = null;\n        try {\n            fn = FileDialog.showSingle(title, exportDirectory);\n            // save the export directory. Remember, fn is the actual filename, so we need to chop off the file name bit.\n            if (rememberExportDirectory)\n                App.prefs.setPref(\"corina.dir.export\", new File(fn).getParent());\n            // check for already-exists\n            Overwrite.overwrite(fn);\n            // save it\n            Filetype f = (Filetype) Class.forName(format).newInstance();\n            BufferedWriter w = new BufferedWriter(new FileWriter(fn));\n            try {\n                f.save(exportee, w);\n            } finally {\n                try {\n                    w.close();\n                } catch (IOException ioe) {\n                    ioe.printStackTrace();\n                }\n            }\n        } catch (UserCancelledException uce) {\n            // do nothing\n        } catch (IOException ioe) {\n            // problem saving, tell user\n            // WAS: passed |me| as owner of dialog; do i lose something here?\n            // WAS: WARNING_MESSAGE -- Alert uses ERROR_MESSAGE, which i think is at least as good\n            Alert.error(I18n.getText(\"export_error_title\"), I18n.getText(\"xport_error\") + ioe);\n        } catch (Exception ex) {\n            // problem creating filetype, or npe, or whatever -- bug.\n            Bug.bug(ex);\n        }\n        return fn;\n    }\n\n    /**\n     * Save a list of samples in packed format.\n     * Pops up a dialog box asking for the file name to save to, exports to the type chosen in the\n     * visible popup menu.\n     *\n     * @param exportee the sample to export\n     * @return the full path of the saved packed sample, or null if not saved\n     */\n    public String savePackedSample(List slist, String format) {\n        return savePackedSample(slist, format, I18n.getText(\"export\"));\n    }\n\n    public String savePackedSample(List slist, String format, String title) {\n        String fn = null;\n        try {\n            // ask for filename\n            fn = FileDialog.showSingle(title, exportDirectory);\n            // save the export directory. Remember, fn is the actual filename, so we need to chop off the file name bit.\n            if (rememberExportDirectory)\n                App.prefs.setPref(\"corina.dir.export\", new File(fn).getParent());\n            // check for already-exists\n            Overwrite.overwrite(fn);\n            // save it\n            Filetype f = (Filetype) Class.forName(format).newInstance();\n            BufferedWriter w = new BufferedWriter(new FileWriter(fn));\n            try {\n                ((PackedFileType) f).saveSamples(slist, w);\n            } finally {\n                try {\n                    w.close();\n                } catch (IOException ioe) {\n                    ioe.printStackTrace();\n                }\n            }\n        } catch (UserCancelledException uce) {\n            // do nothing\n        } catch (IOException ioe) {\n            // problem saving, tell user\n            // WAS: passed |me| as owner of dialog; do i lose something here?\n            // WAS: WARNING_MESSAGE -- Alert uses ERROR_MESSAGE, which i think is at least as good\n            Alert.error(I18n.getText(\"export_error_title\"), I18n.getText(\"xport_error\") + ioe);\n        } catch (Exception ex) {\n            // problem creating filetype, or npe, or whatever -- bug.\n            Bug.bug(ex);\n        }\n        return fn;\n    }\n\n    /**\n     * Saves multiple samples.\n     * Pops up a dialog box asking for a folder to save to;\n     * files are dumped in to this folder with a default extension added, ie:\n     * ACM123.PIK becomes ACM123.PIK.TUC\n     *\n     * @param slist a List of samples\n     * @return a List of saved file names, or null if not saved.\n     */\n    public List saveMultiSample(List slist, String format) {\n        return saveMultiSample(slist, format, \"Choose an Export Folder\");\n    }\n\n    public List saveMultiSample(List slist, String format, String title) {\n        List savedNames = new ArrayList();\n        try {\n            // get the export format...\n            Filetype f = (Filetype) Class.forName(format).newInstance();\n            JFileChooser chooser = new JFileChooser();\n            chooser.setDialogTitle(title);\n            chooser.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);\n            int rv = chooser.showDialog(null, \"OK\");\n            if (rv != JFileChooser.APPROVE_OPTION)\n                return null;\n            // save the export directory. Remember, fn is the actual filename, so we need to chop off the file name bit.\n            if (rememberExportDirectory)\n                App.prefs.setPref(\"corina.dir.export\", chooser.getSelectedFile().getAbsolutePath());\n            File dir = new File(chooser.getSelectedFile().getAbsolutePath() + File.separator + \"Export\" + format.substring(format.lastIndexOf('.'), format.length()));\n            if (!((dir.exists() && dir.isDirectory()) || dir.mkdirs())) {\n                Alert.error(\"Couldn't export\", \"Couldn't create/write to directory \" + dir.getName());\n                return null;\n            }\n            // for each sample, make a new filename and export it!\n            for (int i = 0; i < slist.size(); i++) {\n                Sample s = (Sample) slist.get(i);\n                String progress = \"Processing \" + ((String) s.meta.get(\"filename\")) + \" (\" + i + \"/\" + slist.size() + \")\";\n                //preview.setText(progress);\n                // so, we have things like \"blah.pkw.TUC!\"\n                // gross, but this is what people wanted.\n                String fn = dir.getAbsolutePath() + File.separator + new File((String) s.meta.get(\"filename\")).getName() + f.getDefaultExtension();\n                savedNames.add(fn);\n                BufferedWriter w = new BufferedWriter(new FileWriter(fn));\n                try {\n                    f.save(s, w);\n                } finally {\n                    try {\n                        w.close();\n                    } catch (IOException ioe) {\n                        ioe.printStackTrace();\n                    }\n                }\n                System.out.println(\"Exported \" + fn);\n            }\n        } catch (Exception ex) {\n            // problem creating filetype, or npe, or whatever -- bug.\n            Bug.bug(ex);\n        }\n        return savedNames;\n    }\n}\n",
		"id": "/EvoSuiteBenchmark/35_corina/src/main/java/corina/io/Exporter_4Test.java",
		"test_prompt": "// Exporter_4Test.java\npackage corina.io;\n\nimport java.io.BufferedWriter;\nimport java.io.File;\nimport java.io.FileWriter;\nimport java.io.IOException;\nimport java.util.ArrayList;\nimport java.util.List;\nimport java.util.ListIterator;\nimport javax.swing.JFileChooser;\nimport corina.Sample;\nimport corina.core.App;\nimport corina.formats.Filetype;\nimport corina.formats.PackedFileType;\nimport corina.gui.Bug;\nimport corina.gui.FileDialog;\nimport corina.gui.UserCancelledException;\nimport corina.ui.Alert;\nimport corina.ui.I18n;\nimport corina.util.Overwrite;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link Exporter}.\n* It contains ten unit test cases for the {@link Exporter#saveMultiSample(List, String)} method.\n*/\nclass Exporter_4Test {"
	},
	{
		"original_code": "// Exporter.java\n/**\n */\npackage corina.io;\n\nimport java.io.BufferedWriter;\nimport java.io.File;\nimport java.io.FileWriter;\nimport java.io.IOException;\nimport java.util.ArrayList;\nimport java.util.List;\nimport java.util.ListIterator;\nimport javax.swing.JFileChooser;\nimport corina.Sample;\nimport corina.core.App;\nimport corina.formats.Filetype;\nimport corina.formats.PackedFileType;\nimport corina.gui.Bug;\nimport corina.gui.FileDialog;\nimport corina.gui.UserCancelledException;\nimport corina.ui.Alert;\nimport corina.ui.I18n;\nimport corina.util.Overwrite;\n\n/**\n * @author Lucas Madar\n */\npublic class Exporter {\n\n    private String exportDirectory;\n\n    private boolean rememberExportDirectory;\n\n    public Exporter() {\n        rememberExportDirectory = true;\n        // load the last export directory. If it doesn't exist, make a nice default.\n        exportDirectory = App.prefs.getPref(\"corina.dir.export\");\n        if (exportDirectory == null)\n            exportDirectory = App.prefs.getPref(\"corina.dir.data\");\n        if (exportDirectory == null)\n            exportDirectory = \"\";\n        // now, keep going back until it exists and is a directory.\n        File exdf = new File(exportDirectory).getAbsoluteFile();\n        while (!exdf.isDirectory() && exdf.toString().length() > 0) exdf = exdf.getParentFile();\n        exportDirectory = exdf.getAbsolutePath();\n    }\n\n    // set from an outside source? Don't save it.\n    public void setExportDirectory(String directory) {\n        rememberExportDirectory = false;\n        exportDirectory = directory;\n    }\n\n    /**\n     * Save a single sample.\n     * Pops up a dialog box asking for the file name to save to, exports to the type\n     * passed in 'format' (ie, corina.Formats.Tucson)\n     *\n     * @param exportee the sample to export\n     * @return The full path of the exported file name, or null if not saved\n     */\n    public String saveSingleSample(Sample exportee, String format) {\n        // use the default title...\n        String etext = \"\";\n        if (exportee.meta.get(\"filename\") != null) {\n            File oldfile = new File((String) exportee.meta.get(\"filename\"));\n            etext = \" (\" + oldfile.getName() + \")\";\n        }\n        String title = I18n.getText(\"export\") + etext;\n        return saveSingleSample(exportee, format, title);\n    }\n\n    public String saveSingleSample(Sample exportee, String format, String title) {\n        String fn = null;\n        try {\n            fn = FileDialog.showSingle(title, exportDirectory);\n            // save the export directory. Remember, fn is the actual filename, so we need to chop off the file name bit.\n            if (rememberExportDirectory)\n                App.prefs.setPref(\"corina.dir.export\", new File(fn).getParent());\n            // check for already-exists\n            Overwrite.overwrite(fn);\n            // save it\n            Filetype f = (Filetype) Class.forName(format).newInstance();\n            BufferedWriter w = new BufferedWriter(new FileWriter(fn));\n            try {\n                f.save(exportee, w);\n            } finally {\n                try {\n                    w.close();\n                } catch (IOException ioe) {\n                    ioe.printStackTrace();\n                }\n            }\n        } catch (UserCancelledException uce) {\n            // do nothing\n        } catch (IOException ioe) {\n            // problem saving, tell user\n            // WAS: passed |me| as owner of dialog; do i lose something here?\n            // WAS: WARNING_MESSAGE -- Alert uses ERROR_MESSAGE, which i think is at least as good\n            Alert.error(I18n.getText(\"export_error_title\"), I18n.getText(\"xport_error\") + ioe);\n        } catch (Exception ex) {\n            // problem creating filetype, or npe, or whatever -- bug.\n            Bug.bug(ex);\n        }\n        return fn;\n    }\n\n    /**\n     * Save a list of samples in packed format.\n     * Pops up a dialog box asking for the file name to save to, exports to the type chosen in the\n     * visible popup menu.\n     *\n     * @param exportee the sample to export\n     * @return the full path of the saved packed sample, or null if not saved\n     */\n    public String savePackedSample(List slist, String format) {\n        return savePackedSample(slist, format, I18n.getText(\"export\"));\n    }\n\n    public String savePackedSample(List slist, String format, String title) {\n        String fn = null;\n        try {\n            // ask for filename\n            fn = FileDialog.showSingle(title, exportDirectory);\n            // save the export directory. Remember, fn is the actual filename, so we need to chop off the file name bit.\n            if (rememberExportDirectory)\n                App.prefs.setPref(\"corina.dir.export\", new File(fn).getParent());\n            // check for already-exists\n            Overwrite.overwrite(fn);\n            // save it\n            Filetype f = (Filetype) Class.forName(format).newInstance();\n            BufferedWriter w = new BufferedWriter(new FileWriter(fn));\n            try {\n                ((PackedFileType) f).saveSamples(slist, w);\n            } finally {\n                try {\n                    w.close();\n                } catch (IOException ioe) {\n                    ioe.printStackTrace();\n                }\n            }\n        } catch (UserCancelledException uce) {\n            // do nothing\n        } catch (IOException ioe) {\n            // problem saving, tell user\n            // WAS: passed |me| as owner of dialog; do i lose something here?\n            // WAS: WARNING_MESSAGE -- Alert uses ERROR_MESSAGE, which i think is at least as good\n            Alert.error(I18n.getText(\"export_error_title\"), I18n.getText(\"xport_error\") + ioe);\n        } catch (Exception ex) {\n            // problem creating filetype, or npe, or whatever -- bug.\n            Bug.bug(ex);\n        }\n        return fn;\n    }\n\n    /**\n     * Saves multiple samples.\n     * Pops up a dialog box asking for a folder to save to;\n     * files are dumped in to this folder with a default extension added, ie:\n     * ACM123.PIK becomes ACM123.PIK.TUC\n     *\n     * @param slist a List of samples\n     * @return a List of saved file names, or null if not saved.\n     */\n    public List saveMultiSample(List slist, String format) {\n        return saveMultiSample(slist, format, \"Choose an Export Folder\");\n    }\n\n    public List saveMultiSample(List slist, String format, String title) {\n        List savedNames = new ArrayList();\n        try {\n            // get the export format...\n            Filetype f = (Filetype) Class.forName(format).newInstance();\n            JFileChooser chooser = new JFileChooser();\n            chooser.setDialogTitle(title);\n            chooser.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);\n            int rv = chooser.showDialog(null, \"OK\");\n            if (rv != JFileChooser.APPROVE_OPTION)\n                return null;\n            // save the export directory. Remember, fn is the actual filename, so we need to chop off the file name bit.\n            if (rememberExportDirectory)\n                App.prefs.setPref(\"corina.dir.export\", chooser.getSelectedFile().getAbsolutePath());\n            File dir = new File(chooser.getSelectedFile().getAbsolutePath() + File.separator + \"Export\" + format.substring(format.lastIndexOf('.'), format.length()));\n            if (!((dir.exists() && dir.isDirectory()) || dir.mkdirs())) {\n                Alert.error(\"Couldn't export\", \"Couldn't create/write to directory \" + dir.getName());\n                return null;\n            }\n            // for each sample, make a new filename and export it!\n            for (int i = 0; i < slist.size(); i++) {\n                Sample s = (Sample) slist.get(i);\n                String progress = \"Processing \" + ((String) s.meta.get(\"filename\")) + \" (\" + i + \"/\" + slist.size() + \")\";\n                //preview.setText(progress);\n                // so, we have things like \"blah.pkw.TUC!\"\n                // gross, but this is what people wanted.\n                String fn = dir.getAbsolutePath() + File.separator + new File((String) s.meta.get(\"filename\")).getName() + f.getDefaultExtension();\n                savedNames.add(fn);\n                BufferedWriter w = new BufferedWriter(new FileWriter(fn));\n                try {\n                    f.save(s, w);\n                } finally {\n                    try {\n                        w.close();\n                    } catch (IOException ioe) {\n                        ioe.printStackTrace();\n                    }\n                }\n                System.out.println(\"Exported \" + fn);\n            }\n        } catch (Exception ex) {\n            // problem creating filetype, or npe, or whatever -- bug.\n            Bug.bug(ex);\n        }\n        return savedNames;\n    }\n}\n",
		"id": "/EvoSuiteBenchmark/35_corina/src/main/java/corina/io/Exporter_5Test.java",
		"test_prompt": "// Exporter_5Test.java\npackage corina.io;\n\nimport java.io.BufferedWriter;\nimport java.io.File;\nimport java.io.FileWriter;\nimport java.io.IOException;\nimport java.util.ArrayList;\nimport java.util.List;\nimport java.util.ListIterator;\nimport javax.swing.JFileChooser;\nimport corina.Sample;\nimport corina.core.App;\nimport corina.formats.Filetype;\nimport corina.formats.PackedFileType;\nimport corina.gui.Bug;\nimport corina.gui.FileDialog;\nimport corina.gui.UserCancelledException;\nimport corina.ui.Alert;\nimport corina.ui.I18n;\nimport corina.util.Overwrite;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link Exporter}.\n* It contains ten unit test cases for the {@link Exporter#saveMultiSample(List, String, String)} method.\n*/\nclass Exporter_5Test {"
	},
	{
		"original_code": "// GrapherPanel.java\n//\n// This file is part of Corina.\n//\n// Corina is free software; you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation; either version 2 of the License, or\n// (at your option) any later version.\n//\n// Corina is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Corina; if not, write to the Free Software\n// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n//\n// Copyright 2001 Ken Harris <kbh7@cornell.edu>\n//\npackage corina.graph;\n\nimport java.awt.BasicStroke;\nimport java.awt.Color;\nimport java.awt.Container;\nimport java.awt.Cursor;\nimport java.awt.Dimension;\nimport java.awt.EventQueue;\nimport java.awt.Graphics;\nimport java.awt.Graphics2D;\nimport java.awt.Insets;\nimport java.awt.Stroke;\nimport java.awt.Image;\nimport java.awt.Point;\nimport java.awt.Rectangle;\nimport java.awt.RenderingHints;\nimport java.awt.Toolkit;\nimport java.awt.Font;\nimport java.awt.FontMetrics;\nimport java.awt.font.*;\nimport java.awt.event.ActionEvent;\nimport java.awt.event.ActionListener;\nimport java.awt.event.AdjustmentEvent;\nimport java.awt.event.AdjustmentListener;\nimport java.awt.event.KeyEvent;\nimport java.awt.event.KeyListener;\nimport java.awt.event.MouseEvent;\nimport java.awt.event.MouseListener;\nimport java.awt.event.MouseMotionListener;\nimport java.awt.image.BufferedImage;\nimport java.io.File;\nimport java.io.FileOutputStream;\nimport java.io.IOException;\nimport java.util.List;\nimport javax.imageio.ImageIO;\nimport javax.swing.JFileChooser;\nimport javax.swing.JFrame;\nimport javax.swing.JMenuItem;\nimport javax.swing.JPanel;\nimport javax.swing.JPopupMenu;\nimport javax.swing.JScrollBar;\nimport javax.swing.JScrollPane;\nimport javax.swing.ProgressMonitor;\nimport javax.swing.RepaintManager;\nimport javax.swing.Scrollable;\nimport javax.swing.filechooser.FileFilter;\nimport corina.Build;\nimport corina.Range;\nimport corina.Sample;\nimport corina.Year;\nimport corina.core.App;\nimport corina.gui.Bug;\nimport corina.gui.XFrame;\nimport corina.ui.Alert;\nimport corina.util.ColorUtils;\n\npublic class GrapherPanel extends JPanel implements KeyListener, MouseListener, MouseMotionListener, AdjustmentListener, Scrollable {\n\n    // public data\n    // of Graph\n    public List graphs;\n\n    // currenly selected sample\n    public int current = 0;\n\n    // gui\n    private JScrollPane scroller = null;\n\n    // for setTitle(), dispose()\n    private JFrame myFrame;\n\n    private GraphInfo gInfo;\n\n    private JPopupMenu popup = new JPopupMenu(\"Save\");\n\n    private Font graphNamesFont = new Font(\"Dialog\", Font.PLAIN, 15);\n\n    private Font tickFont = new Font(\"Dialog\", Font.PLAIN, 11);\n\n    private PlotAgents agents;\n\n    // compute the initial range of the year-axis\n    // (union of all graph ranges)\n    // fixme: put |bounds| dfn here, change method name to be similar (computeBounds()?)\n    // setPreferredSize() doesn't belong here, either.\n    // -- not threadsafe -- bounds changes\n    private void computeRange() {\n        // convenience method for local JPanel...\n        computeRange(gInfo, null);\n    }\n\n    private final int yearsBeforeLabel = 0;\n\n    private final int yearsAfterLabel = 5;\n\n    public void computeRange(GraphInfo info, Graphics graphics) {\n        Range boundsr = null, emptyr = null;\n        if (graphs.isEmpty()) {\n            // can't happen\n            Bug.bug(new IllegalArgumentException(\"no graphs!\"));\n            // bounds = new Range();\n        } else {\n            Graph g0 = (Graph) graphs.get(0);\n            boundsr = g0.getRange();\n            for (int i = 1; i < graphs.size(); i++) {\n                // this looks familiar ... yes, i do believe it's (reduce), again, just like in sum.  ick.\n                Graph g = (Graph) graphs.get(i);\n                boundsr = boundsr.union(g.getRange());\n            }\n        }\n        if (info.drawGraphNames()) {\n            int mgw = calculateMaxGraphNameWidth(info, graphics) + yearsBeforeLabel + yearsAfterLabel;\n            Range strange = new Range(boundsr.getStart().add(-mgw), 1);\n            emptyr = new Range(strange.getStart(), boundsr.getStart());\n            boundsr = boundsr.union(strange);\n        }\n        info.setDrawRange(boundsr);\n        info.setEmptyRange(emptyr);\n    }\n\n    // somewhat obvious, calculates the maximum graph name width.\n    private int calculateMaxGraphNameWidth(GraphInfo info, Graphics g) {\n        int mw = 0;\n        Font font;\n        FontMetrics fontmetrics;\n        // if a graphics context is passed, use that... otherwise, use my panel\n        if (g != null) {\n            font = graphNamesFont;\n            fontmetrics = g.getFontMetrics(font);\n        } else {\n            font = graphNamesFont;\n            fontmetrics = getFontMetrics(font);\n        }\n        for (int i = 0; i < graphs.size(); i++) {\n            Graph gr = (Graph) graphs.get(i);\n            int w = fontmetrics.stringWidth(gr.getGraphName());\n            if (w > mw)\n                mw = w;\n        }\n        return 1 + (int) ((float) mw / (float) info.getYearWidth());\n    }\n\n    // here, we union ranges in Graphs; in Sum.java, we union ranges\n    // in Elements.  is there a way to combine this, like lisp's\n    // (collect elements 'union :slot range)?\n    /**\n     *  Returns true, to indicate that this panel can accept focus.\n     * \t (Needed to respond to KeyEvents.)\n     * \t @return true, meaning can-accept-focus\n     */\n    public boolean isFocusTraversable() {\n        return true;\n    }\n\n    // ok, this is the magic bullet i was looking for.\n    public boolean isManagingFocus() {\n        return true;\n    }\n\n    // update the window title with the current graph's title\n    public void updateTitle() {\n        // current graph, and its title\n        Graph g = (Graph) graphs.get(current);\n        String title = g.graph.toString();\n        // if offset, use \"title (at ...)\"\n        if (g.xoffset != 0)\n            title += \" (at \" + g.getRange() + \")\";\n        // set title\n        myFrame.setTitle(title + \" - \" + Build.VERSION + \" \" + Build.TIMESTAMP);\n        if (myFrame instanceof GraphWindow) {\n            ((GraphWindow) myFrame).panelSelectionChanged();\n        }\n    }\n\n    // for horiz scrollbar\n    public void adjustmentValueChanged(AdjustmentEvent ae) {\n        repaint();\n    }\n\n    // hack to get the horizontal scrollbar to this\n    public void setScroller(JScrollPane h) {\n        scroller = h;\n        // add update listener, required for keeping baselines drawn\n        if (gInfo.drawBaselines())\n            scroller.getHorizontalScrollBar().addAdjustmentListener(this);\n    }\n\n    private void ensureScrollerExists() {\n        if (scroller != null)\n            return;\n        // look for jscrollpane\n        Container pop = getParent().getParent();\n        if (pop instanceof JScrollPane) {\n            setScroller((JScrollPane) pop);\n        }\n    }\n\n    public void setGraphPaperVisible(boolean visible) {\n        // set the preference...\n        App.prefs.setPref(\"corina.graph.graphpaper\", Boolean.toString(visible));\n        // reload the prefs into the graphInfo\n        gInfo.reloadPrefs();\n        // redraw\n        repaint();\n    }\n\n    public void setBaselinesVisible(boolean visible) {\n        // set the preference...\n        App.prefs.setPref(\"corina.graph.baselines\", Boolean.toString(visible));\n        // reload the prefs into the graphInfo\n        gInfo.reloadPrefs();\n        ensureScrollerExists();\n        // add/remove listener so they get updated properly\n        if (!gInfo.drawBaselines())\n            scroller.getHorizontalScrollBar().removeAdjustmentListener(this);\n        else\n            scroller.getHorizontalScrollBar().addAdjustmentListener(this);\n        // redraw\n        repaint();\n    }\n\n    public void setHundredpercentlinesVisible(boolean visible) {\n        // set the preference...\n        App.prefs.setPref(\"corina.graph.hundredpercentlines\", Boolean.toString(visible));\n        // reload the prefs into the graphInfo\n        gInfo.reloadPrefs();\n        // redraw\n        repaint();\n    }\n\n    public void setComponentNamesVisible(boolean visible) {\n        // set the preference...\n        App.prefs.setPref(\"corina.graph.componentnames\", Boolean.toString(visible));\n        // reload the prefs into the graphInfo\n        gInfo.reloadPrefs();\n        // recompute the range...\n        computeRange();\n        // messy redrawing...\n        setPreferredSize(new Dimension(gInfo.getDrawRange().span() * gInfo.getYearWidth(), 200));\n        recreateAgent();\n        revalidate();\n        repaint();\n    }\n\n    // stuff for dealing with the vertical axis\n    private Axis vertaxis = null;\n\n    public void setAxisVisible(boolean visible) {\n        // set the preference...\n        App.prefs.setPref(\"corina.graph.vertical-axis\", Boolean.toString(visible));\n        // reload the prefs into the graphInfo\n        gInfo.reloadPrefs();\n        ensureScrollerExists();\n        if (gInfo.drawVertAxis()) {\n            vertaxis = new Axis(gInfo, agents.acquireDefaultAxisType());\n            scroller.setRowHeaderView(vertaxis);\n            repaint();\n        } else {\n            scroller.setRowHeaderView(null);\n            repaint();\n        }\n    }\n\n    // used for clickers and draggers: get graph nr at point\n    public int getGraphAt(Point p) {\n        // try each sample...\n        int bottom = gInfo.getHeight(this) - GrapherPanel.AXIS_HEIGHT;\n        for (int i = 0; i < graphs.size(); i++) {\n            // get graph\n            Graph gg = (Graph) graphs.get(i);\n            // hit?\n            if (gg.getAgent().contact(gInfo, gg, p, bottom))\n                return i;\n        }\n        // fail: -1\n        return -1;\n    }\n\n    // MouseMotionListener, for vertical line under cursor ----------\n    private Point dragStart = null;\n\n    // initial xoff\n    private int startX;\n\n    public void mouseDragged(MouseEvent e) {\n        // FIXME: move all the dragStart code into mousePressed\n        // TODO: if user drags the axis, scroll?\n        // didn't drag from a graph?  sorry.\n        if (clicked == -1)\n            return;\n        // just starting a drag?\n        if (dragStart == null) {\n            // dragging something?\n            int n = getGraphAt(e.getPoint());\n            // nope, ignore\n            if (n == -1)\n                return;\n            // yes, store\n            dragStart = (Point) e.getPoint().clone();\n            dragStart.y += ((Graph) graphs.get(n)).yoffset;\n            startX = ((Graph) graphs.get(n)).xoffset;\n            // select it, too, while we're at it\n            current = n;\n        }\n        // change yoffset[n]\n        ((Graph) graphs.get(current)).yoffset = (int) dragStart.getY() - e.getY();\n        // change xoffset[n], but only if no shift\n        int dx = 0;\n        if (!e.isShiftDown()) {\n            dx = (int) (e.getX() - dragStart.getX());\n            dx -= dx % gInfo.getYearWidth();\n        }\n        ((Graph) graphs.get(current)).xoffset = startX + (int) dx / gInfo.getYearWidth();\n        //        recomputeDrops(); -- writeme?\n        // repaint\n        updateTitle();\n        repaint();\n    }\n\n    private int cursorX = 0;\n\n    // this is BUG #199, because mouseMoved events stop being\n    // generated as soon as a mouseExited event is fired.  idea:\n    // compute dx, and on mouseExited set cursorX to (dx<0 ?\n    // minCursorX : maxCursorX), but that doesn't take into account\n    // moving off the bottom.  there's got to be a way to track\n    // mouseMoved events for the focused window regardless of the\n    // position of the mouse.\n    public void mouseMoved(MouseEvent e) {\n        // old cursorX\n        int old = cursorX;\n        int yearWidth = gInfo.getYearWidth();\n        // update cursorX\n        cursorX = e.getX();\n        // put it on the nearest gridline\n        int distanceLeftToGridline = cursorX % yearWidth;\n        boolean roundRight = (distanceLeftToGridline >= yearWidth / 2);\n        cursorX -= distanceLeftToGridline;\n        if (roundRight)\n            cursorX += yearWidth;\n        // refresh, but only if necessary\n        if (cursorX != old) {\n            // OLD: repaint();\n            // only update part of display that's needed!\n            // vertical line\n            repaint(old - 1, 0, 3, getHeight() - AXIS_HEIGHT);\n            repaint(cursorX - 1, 0, 3, getHeight() - AXIS_HEIGHT);\n            // text\n            // repaint(old, 0, 50, 15); // HACK!\n            // repaint(cursorX, 0, 50, 15); // HACK!\n            // HACK: this assumes something about the text size.\n            // also, FIXME: in the future i'll draw text on either side of the line.\n            // almost-as-bad new version:\n            repaint(old - 50, 0, 100, 15);\n            repaint(cursorX - 50, 0, 100, 15);\n        }\n        // crosshair cursor\n        // PERF: is setCursor() expensive?\n        setCursor(crosshair);\n    }\n\n    private Cursor crosshair = new Cursor(Cursor.CROSSHAIR_CURSOR);\n\n    // ------------------------------------------------------------\n    // KeyListener ------------------------------------------------------------\n    /**\n     *  Deal with key-pressed events, as described above.\n     * \t @param e the event to process\n     */\n    public void keyPressed(KeyEvent e) {\n        ensureScrollerExists();\n        JScrollBar horiz = scroller.getHorizontalScrollBar();\n        Range bounds = gInfo.getDrawRange();\n        // extract some info once so i don't have to do it later\n        int m = e.getModifiers();\n        int k = e.getKeyCode();\n        // cache yearsize, we use it a lot here\n        int yearWidth = gInfo.getYearWidth();\n        // repaint graph?\n        boolean repaint = false;\n        // unknown key?\n        boolean unknown = false;\n        // graph\n        Graph g = (Graph) graphs.get(current);\n        // IDEA: if i had some way of saying \"shift tab\" => { block }\n        // then i wouldn't need these nested if/case statements.\n        // parse it...ugh\n        if (m == KeyEvent.SHIFT_MASK) {\n            // shift keys\n            switch(k) {\n                case KeyEvent.VK_TAB:\n                    current = (current == 0 ? graphs.size() - 1 : current - 1);\n                    repaint = true;\n                    break;\n                case KeyEvent.VK_PERIOD:\n                    g.bigger();\n                    repaint = true;\n                    break;\n                case KeyEvent.VK_COMMA:\n                    g.smaller();\n                    repaint = true;\n                    break;\n                case KeyEvent.VK_EQUALS:\n                    g.slide(1);\n                    repaint = true;\n                    break;\n                default:\n                    unknown = true;\n            }\n        } else if (m == KeyEvent.CTRL_MASK) {\n            // control keys\n            switch(k) {\n                // change the graph scale!\n                case KeyEvent.VK_W:\n                    {\n                        int curheight = gInfo.get10UnitHeight();\n                        if (--curheight < 2)\n                            curheight = 2;\n                        gInfo.set10UnitHeight(curheight);\n                        recreateAgent();\n                        revalidate();\n                        if (vertaxis != null)\n                            vertaxis.repaint();\n                        repaint = true;\n                        break;\n                    }\n                case KeyEvent.VK_S:\n                    {\n                        int curheight = gInfo.get10UnitHeight();\n                        curheight++;\n                        gInfo.set10UnitHeight(curheight);\n                        recreateAgent();\n                        revalidate();\n                        if (vertaxis != null)\n                            vertaxis.repaint();\n                        repaint = true;\n                        break;\n                    }\n                case KeyEvent.VK_A:\n                    {\n                        int curwidth = gInfo.getYearWidth();\n                        Year y = yearForPosition(gInfo, horiz.getValue());\n                        if (--curwidth < 2)\n                            curwidth = 2;\n                        gInfo.setYearWidth(curwidth);\n                        computeRange();\n                        setPreferredSize(new Dimension(bounds.span() * curwidth, 200));\n                        recreateAgent();\n                        revalidate();\n                        horiz.setValue(Math.abs(y.diff(getRange().getStart())) * gInfo.getYearWidth());\n                        repaint = true;\n                        break;\n                    }\n                case KeyEvent.VK_D:\n                    {\n                        int curwidth = gInfo.getYearWidth();\n                        Year y = yearForPosition(gInfo, horiz.getValue());\n                        curwidth++;\n                        gInfo.setYearWidth(curwidth);\n                        computeRange();\n                        setPreferredSize(new Dimension(bounds.span() * curwidth, 200));\n                        recreateAgent();\n                        revalidate();\n                        horiz.setValue(Math.abs(y.diff(getRange().getStart())) * gInfo.getYearWidth());\n                        repaint = true;\n                        break;\n                    }\n                case KeyEvent.VK_LEFT:\n                    {\n                        g.left();\n                        // see if our graph bounds changed at all.\n                        Year y1 = bounds.getStart();\n                        Year y2 = bounds.getEnd();\n                        boolean endBoundChanged = false;\n                        computeRange();\n                        bounds = gInfo.getDrawRange();\n                        if (!bounds.getEnd().equals(y2))\n                            endBoundChanged = true;\n                        if (!bounds.getStart().equals(y1) || endBoundChanged) {\n                            setPreferredSize(new Dimension(bounds.span() * yearWidth, 200));\n                            recreateAgent();\n                            revalidate();\n                        }\n                        // if we're changing the start boundary, AND we're already at the *end*,\n                        // don't move the scroll bar, it'll move for us.\n                        if (!(endBoundChanged && horiz.getValue() == horiz.getMinimum()))\n                            horiz.setValue(horiz.getValue() - yearWidth);\n                        repaint = true;\n                        break;\n                    }\n                case KeyEvent.VK_RIGHT:\n                    {\n                        g.right();\n                        // see if our graph bounds changed at all.\n                        Year y1 = bounds.getStart();\n                        Year y2 = bounds.getEnd();\n                        boolean startBoundChanged = false;\n                        computeRange();\n                        bounds = gInfo.getDrawRange();\n                        if (!bounds.getStart().equals(y1))\n                            startBoundChanged = true;\n                        if (!bounds.getEnd().equals(y2) || startBoundChanged) {\n                            setPreferredSize(new Dimension(bounds.span() * yearWidth, 200));\n                            recreateAgent();\n                            revalidate();\n                        }\n                        // if we're changing the start boundary, AND we're already at the beginning,\n                        // don't move the scroll bar, it'll move for us.\n                        if (!(startBoundChanged && horiz.getValue() == horiz.getMinimum()))\n                            horiz.setValue(horiz.getValue() + yearWidth);\n                        repaint = true;\n                        break;\n                    }\n                default:\n                    unknown = true;\n            }\n        } else {\n            // unmodified keys\n            switch(k) {\n                case KeyEvent.VK_UP:\n                    g.slide(10);\n                    repaint = true;\n                    break;\n                case KeyEvent.VK_DOWN:\n                    g.slide(-10);\n                    repaint = true;\n                    break;\n                case KeyEvent.VK_MINUS:\n                    g.slide(-1);\n                    repaint = true;\n                    break;\n                case // unshifted equals == plus\n                KeyEvent.VK_EQUALS:\n                    g.slide(1);\n                    repaint = true;\n                    break;\n                case KeyEvent.VK_LEFT:\n                    // BUG: horiz.getUnitIncrement() returns 1 here.  why?  i have no idea.\n                    // i guess because i don't set it explicitly.  though i would expect\n                    // values returned by the Scrollable interface would work.  oh well,\n                    // i'll just work around it for now.\n                    // -- OLD: horiz.setValue(horiz.getValue() - horiz.getUnitIncrement());\n                    horiz.setValue(horiz.getValue() - yearWidth * 10);\n                    break;\n                case KeyEvent.VK_RIGHT:\n                    // -- OLD: horiz.setValue(horiz.getValue() + horiz.getUnitIncrement());\n                    horiz.setValue(horiz.getValue() + yearWidth * 10);\n                    break;\n                case KeyEvent.VK_PAGE_UP:\n                    // BUG: if parent isn't viewport, ignore?: horiz.setValue(horiz.getValue() - yearSize*100);\n                    horiz.setValue(horiz.getValue() - getParent().getWidth());\n                    // -- OLD: horiz.setValue(horiz.getValue() - horiz.getBlockIncrement());\n                    break;\n                case KeyEvent.VK_PAGE_DOWN:\n                    // BUG: if parent isn't viewport, ignore?: horiz.setValue(horiz.getValue() + yearSize*100);\n                    horiz.setValue(horiz.getValue() + getParent().getWidth());\n                    // -- OLD: horiz.setValue(horiz.getValue() + horiz.getBlockIncrement());\n                    break;\n                case KeyEvent.VK_HOME:\n                    horiz.setValue(horiz.getMinimum());\n                    break;\n                case KeyEvent.VK_END:\n                    horiz.setValue(horiz.getMaximum());\n                    break;\n                case KeyEvent.VK_ESCAPE:\n                    ((XFrame) myFrame).close();\n                    break;\n                case KeyEvent.VK_TAB:\n                    current = (current + 1) % graphs.size();\n                    repaint = true;\n                    break;\n                default:\n                    unknown = true;\n            }\n        }\n        // repaint, if necessary\n        if (repaint) {\n            // computeRange(); -- this introduces lots of bugs,\n            // but probably needs to be done, eventually.\n            // also, see sun's jscrollpane tutorial: it has\n            // demos on how to resize the scrollable area.\n            repaint();\n        }\n        // yummy\n        if (!unknown)\n            e.consume();\n        // updating the title is quick, so don't worry about doing it\n        // a lot (oh wait, on windows2000 it isn't.  ouch.)\n        updateTitle();\n    }\n\n    public void keyReleased(KeyEvent e) {\n    }\n\n    public void keyTyped(KeyEvent e) {\n    }\n\n    // ----------------------------------------------------------------------\n    // MouseListener, for click-to-select --------------------\n    private int clicked = -1;\n\n    public void mouseClicked(MouseEvent e) {\n        clicked = getGraphAt(e.getPoint());\n        if (clicked != -1) {\n            current = clicked;\n            repaint();\n            /* if (n != -1) */\n            updateTitle();\n            // this should be: current = n; repaint(); if (n != -1) updateTitle();\n            // but that has problems with keyboard accels on current==-1\n            // actually the title should be \"Plot: xyz\", or \"Plot\", so if-stmt isn't even needed\n        }\n        this.requestFocus();\n    }\n\n    public void mouseEntered(MouseEvent e) {\n        inside = true;\n        // sort of...\n        mouseMoved(e);\n        // blunt!\n        repaint();\n    }\n\n    // is the cursor in the area?\n    private boolean inside = true;\n\n    public void mouseExited(MouseEvent e) {\n        inside = false;\n        // another hack!\n        repaint();\n    }\n\n    public void mousePressed(MouseEvent e) {\n        // select it right away\n        mouseClicked(e);\n    }\n\n    public void mouseReleased(MouseEvent e) {\n        // reset drag?  that seems awkward\n        dragStart = null;\n        clicked = -1;\n        System.out.println(e);\n        if (e.isPopupTrigger()) {\n            popup.show(GrapherPanel.this, e.getX(), e.getY());\n            return;\n        }\n    }\n\n    // TODO: put the mouse-listener and mouse-motion-listener\n    // stuff together.\n    // ------------------------------------------------------------\n    private void setDefaultGraphColors() {\n        int i;\n        for (i = 0; i < graphs.size(); i++) {\n            Graph g = (Graph) graphs.get(i);\n            g.setColor(gInfo.screenColors[i % gInfo.screenColors.length].getColor(), gInfo.printerColors[i % gInfo.printerColors.length].getColor());\n        }\n    }\n\n    public void tryPrint(int printStyle) {\n        new GraphPrintDialog(myFrame, graphs, this, printStyle);\n    }\n\n    // graphs = List of Graph.\n    // frame = window; (used for: title set to current graph, closed when ESC pressed.)\n    public GrapherPanel(List graphs, PlotAgents agents, final JFrame myFrame) {\n        // my frame\n        this.myFrame = myFrame;\n        this.agents = agents;\n        // cursor: a crosshair.\n        // note: (mac crosshair doesn't invert on 10.[01], so it's invisible on black)\n        setCursor(crosshair);\n        // set up the graph info, which loads a lot of default preferences.\n        gInfo = new GraphInfo();\n        // key listener -- apparently the focus gets screwed up and\n        // keys stop responding if I don't add a key listener to both\n        // the JFrame and JPanel, I don't know why.\n        addKeyListener(this);\n        // motion listener\n        addMouseMotionListener(this);\n        // click/drag listener\n        addMouseListener(this);\n        // copy data ref\n        this.graphs = graphs;\n        // set default colors\n        setDefaultGraphColors();\n        // update bounds\n        computeRange();\n        // set default scrolly window size\n        setPreferredSize(new Dimension(gInfo.getDrawRange().span() * gInfo.getYearWidth(), 200));\n        for (int i = 0; i < graphs.size(); i++) {\n            Graph cg = (Graph) graphs.get(i);\n            // make sure sapwood and unmeas_pre are integers\n            if (cg.graph instanceof Sample) {\n                Sample s = (Sample) ((Graph) graphs.get(i)).graph;\n                Object sap = s.meta.get(\"sapwood\");\n                Object pre = s.meta.get(\"unmeas_pre\");\n                boolean sapBad = (sap != null && !(sap instanceof Integer));\n                boolean preBad = (pre != null && !(pre instanceof Integer));\n                if (sapBad || preBad) {\n                    Alert.error(\"Text found instead of numbers\", \"One or more metadata fields contained text where a number\\n\" + \"was expected.  The graph might not display all information\\n\" + \"(like sapwood count).  Double-check the sample's metadata fields.\");\n                    // PROBLEM: be more specific -- *which* sample, and *what* value?\n                    // plus, let me edit it here (button: \"edit sample now\", opens metadata view)\n                    // better: just don't display it, or ... (?)\n                    return;\n                }\n            }\n            // set each graph to have a the default agent; or the density agent.\n            if (cg.graph instanceof DensityGraph)\n                cg.setAgent(agents.acquireDensity());\n            else\n                cg.setAgent(agents.acquireDefault());\n        }\n        // background -- default is black\n        setBackground(gInfo.getBackgroundColor());\n        // create drawing agent\n        recreateAgent();\n        // ensure that we're double buffered\n        setDoubleBuffered(true);\n        /*addMouseListener(new MouseAdapter() {\n\t\t public void mouseClicked(MouseEvent e) {\n\t\t System.out.println(e);\n\t\t if (!e.isPopupTrigger()) return;\n\t\t \n\t\t System.out.println(\"Popup triggered!\");\n\t\t \n\t\t popup.show(GrapherPanel.this, e.getX(), e.getY());\n\t\t }  \n\t\t });*/\n    }\n\n    public void postScrollpanedInit() {\n        setBaselinesVisible(Boolean.valueOf(App.prefs.getPref(\"corina.graph.baselines\")).booleanValue());\n        setHundredpercentlinesVisible(Boolean.valueOf(App.prefs.getPref(\"corina.graph.hundredpercentlines\")).booleanValue());\n        setAxisVisible(Boolean.valueOf(App.prefs.getPref(\"corina.graph.vertical-axis\")).booleanValue());\n    }\n\n    public void recreateAgent() {\n        // did we deprecate this horrible beast?\n        // myAgent = new StandardPlot(gInfo.getDrawRange(), gInfo);\n    }\n\n    /**\n     * Colors to use for graphs: blue, green, red, cyan, yellow, magenta.\n     */\n    /*\n\tpublic final Color COLORS[] = { new Color(0.00f, 0.53f, 1.00f), // blue\n\t\t\tnew Color(0.27f, 1.00f, 0.49f), // green\n\t\t\tnew Color(1.00f, 0.28f, 0.27f), // red\n\t\t\tnew Color(0.22f, 0.80f, 0.82f), // cyan\n\t\t\tnew Color(0.82f, 0.81f, 0.23f), // yellow\n\t\t\tnew Color(0.85f, 0.26f, 0.81f), // magenta\n\t};\n\t*/\n    // number of pixels between the bottom of the panel and the baseline\n    /*package?*/\n    static final int AXIS_HEIGHT = 30;\n\n    // timing: this seems to take a significant portion of the time used to\n    // draw the graph; usually 20-30 ms, but often jumping to 80-90\n    // ms.  still far too much garbage being created here.\n    private void paintGraphPaper(Graphics2D g2, GraphInfo info) {\n        // visible range: [l..r]\n        int l = g2.getClipBounds().x;\n        int r = l + g2.getClipBounds().width;\n        int origl = l;\n        Range bounds = info.getDrawRange();\n        if (info.drawGraphNames()) {\n            int yeardiff = yearForPosition(info, l).compareTo(info.getEmptyRange().getEnd());\n            if (yeardiff < 0)\n                l += -yeardiff * info.getYearWidth();\n        }\n        // bottom\n        int bottom = info.getHeight(this) - AXIS_HEIGHT;\n        // draw horizontal lines\n        // (would it help if everything was a big generalpath?  it appears not.)\n        Color major = info.getMajorLineColor();\n        Color mid = info.getMidLineColor();\n        Color minor = info.getMinorLineColor();\n        int yearWidth = info.getYearWidth();\n        int unitHeight = info.get10UnitHeight();\n        // be sure to draw all the way to our first vert. line....\n        Year leftYear = yearForPosition(info, l);\n        int x0 = leftYear.diff(bounds.getStart()) * yearWidth;\n        g2.setColor(minor);\n        int i = 1;\n        for (int y = bottom - unitHeight; y > 0; y -= unitHeight) {\n            // BUG: 10?  is that right?  EXTRACT CONST, at least\n            if (i % 5 == 0) {\n                if (x0 != origl)\n                    g2.drawLine(origl, y, x0, y);\n                g2.setColor((i % 10 == 0) ? major : mid);\n                g2.drawLine(x0, y, r, y);\n                g2.setColor(minor);\n            } else\n                g2.drawLine(x0, y, r, y);\n            i++;\n        }\n        // -----\n        // draw vertical lines.\n        // PERF: isn't every 5th line here just going to get overwritten?\n        // -- for vert lines, it's a bit harder (right now, anyway)\n        for (int x = x0; x < r; x += yearWidth) {\n            // thin lines\n            g2.drawLine(x, 0, x, bottom);\n        }\n        // crosses AD/BC boundary?\n        // (LOD: EXTRACT \"crosses-boundary\"?  well, it's pretty trivial now)\n        if (bounds.intersection(AD_BC).span() == 2) {\n            // thick vertical decade lines: can't just go every\n            // 5*yearSize, because that would not take the zero-gap into\n            // account.  so start at -5 and go backward, and also start at\n            // +5 and go forward.\n            for (Year y = new Year(-5); y.compareTo(bounds.getStart()) > 0; y = y.add(-5)) {\n                int x = y.diff(bounds.getStart()) * yearWidth;\n                if (// (note: this test is backwards from elsewhere; we're going right-to-left)\n                x > r)\n                    continue;\n                if (x < l)\n                    break;\n                g2.setColor((y.mod(10) == 0) ? major : mid);\n                g2.drawLine(x, 0, x, bottom);\n            }\n            for (Year y = new Year(5); y.compareTo(bounds.getEnd()) < 0; y = y.add(5)) {\n                int x = y.diff(bounds.getStart()) * yearWidth;\n                if (x < l)\n                    continue;\n                if (x > r)\n                    break;\n                g2.setColor((y.mod(10) == 0) ? major : mid);\n                g2.drawLine(x, 0, x, bottom);\n            }\n        } else {\n            // doesn't cross AD/BC boundary; just draw lines.\n            Year y1 = yearForPosition(info, l);\n            // y -= (y%5) + 5; // EXTRACT: Year.sub()?\n            y1 = y1.add(-(y1.mod(5) + 5));\n            for (Year y = y1; y.compareTo(bounds.getEnd()) < 0; y = y.add(5)) {\n                // EXTRACT: yearToPosition(y)\n                int x = y.diff(bounds.getStart()) * yearWidth;\n                if (x < l)\n                    continue;\n                if (x > r)\n                    break;\n                g2.setColor((y.mod(10) == 0) ? major : mid);\n                g2.drawLine(x, 0, x, bottom);\n            }\n        }\n    }\n\n    // if r.intersection(AD_BC)==2, then r crosses the ad/bc boundary\n    private static final Range AD_BC = new Range(new Year(-1), new Year(1));\n\n    /*\n\t to get year -> position, it's just position = yearSize * (year -\n\t bounds.getStart()) so to get position -> year, it's just year =\n\t bounds.getStart() + position / yearSize, right?\n\t -- it's +/-1, anyway, which is a heck of a lot better than\n\t drawing every x-position\n\t -- well, is it correct, or off-by-one?  i think it's correct...\n\t */\n    private Year yearForPosition(GraphInfo info, int x) {\n        return info.getDrawRange().getStart().add(x / info.getYearWidth());\n    }\n\n    public int getYearWidth() {\n        return gInfo.getYearWidth();\n    }\n\n    // timing: down to around 10 ms\n    private void paintHorizAxis(Graphics g, GraphInfo info) {\n        Graphics2D g2 = (Graphics2D) g;\n        Font oldfont = g2.getFont();\n        g2.setFont(tickFont);\n        g2.setColor(info.getForeColor());\n        int l = g2.getClipBounds().x;\n        int r = l + g2.getClipBounds().width;\n        int bottom = info.getHeight(this) - AXIS_HEIGHT;\n        int yearWidth = info.getYearWidth();\n        Range bounds = info.getDrawRange();\n        // go one further, just to be sure\n        Year startYear = yearForPosition(info, l).add(-5);\n        // actually, go 5 further; i need to make sure to draw the text, even if it's\n        // not completely on the screen, and i'm ASSUMING the text isn't wider than 5\n        // years' worth -- if it is, it's probably going to start getting hard to read.\n        // x-position of tick\n        int x = startYear.diff(bounds.getStart()) * yearWidth;\n        for (Year y = startYear; y.compareTo(bounds.getEnd()) <= 0; y = y.add(1)) {\n            // out of visible viewport?\n            if (x > r)\n                break;\n            // don't draw years or ticks in the empty part of the graph\n            if (info.drawGraphNames() && y.compareTo(info.getEmptyRange().getEnd()) < -5) {\n                x += yearWidth;\n                continue;\n            }\n            // draw a label for the decade\n            if (y.column() == 0 || y.isYearOne())\n                g2.drawString(y.toString(), x, bottom + 25);\n            // draw a tick mark for the year\n            int drop = bottom + 5;\n            if (y.mod(10) == 0)\n                drop += 10;\n            else if (y.mod(5) == 0)\n                drop += 5;\n            g2.drawLine(x, bottom, x, drop);\n            // next tick\n            x += yearWidth;\n        }\n        // draw a horizontal bar\n        g2.drawLine(l, bottom, r, bottom);\n        g2.setFont(oldfont);\n    }\n\n    /*\n\t PERFORMANCE:\n\t -- in http://www.asktog.com/basics/firstPrinciples.html, tog says\n\t \"Acknowledge all button clicks by visual or aural feedback\n\t within 50 milliseconds.\"\n\n\t so i'll set it as a goal that paintComponent() should, for all\n\t normal uses, return within 50 ms.  i can't guess what systems\n\t every person running corina will have, but my reference platform\n\t is a 500 MHz PPC G4.  if it returns within 50 ms on a 500 MHz\n\t computer (rather slow by today's standards), i'll be satisfied.\n\n\t TIMING:\n\t -- empty screen: 30-50 ms [GOOD!]\n\t -- 1 sample visible: 40-50 ms [GOOD!]\n\t -- lots of samples visible: 200-400 ms\n\t [a bit sluggish -- but only needed for scrolling]\n\t */\n    public void drawGraphNames(Graphics g, GraphInfo info) {\n        Graphics2D g2 = (Graphics2D) g;\n        int bottom = info.getHeight(this) - GrapherPanel.AXIS_HEIGHT;\n        int yearWidth = info.getYearWidth();\n        Rectangle temprect = new Rectangle(0, 0, info.getEmptyRange().span() * yearWidth, bottom);\n        // we're not on the screen, don't draw this...\n        if (!temprect.intersects(g2.getClipBounds()))\n            return;\n        int[] overlaps = new int[graphs.size()];\n        float unitScale = (float) info.get10UnitHeight() / 10.0f;\n        Stroke oldstroke;\n        Font oldfont;\n        BasicStroke connectorLine = new BasicStroke(1, BasicStroke.CAP_BUTT, BasicStroke.JOIN_BEVEL, 10f, new float[] { 8f }, 0f);\n        // bump up the text size...\n        oldfont = g2.getFont();\n        g2.setFont(graphNamesFont);\n        oldstroke = g2.getStroke();\n        g2.setStroke(connectorLine);\n        int lineHeight = g2.getFontMetrics().getHeight();\n        int halflineHeight = lineHeight / 2;\n        for (int i = 0; i < graphs.size(); i++) {\n            Graph gr = (Graph) graphs.get(i);\n            String gn = gr.getGraphName();\n            int stringWidth = g2.getFontMetrics().stringWidth(gn);\n            // gnw = x coordinate for start of string\n            int gnw = ((info.getEmptyRange().span() * yearWidth) - stringWidth) - (yearWidth * yearsAfterLabel);\n            // if this is an indexed sample, set this to be at the 100% line\n            int grfirstvalue = 1000;\n            // otherwise, get the first point!\n            if (!((gr.graph instanceof Sample) && ((Sample) gr.graph).isIndexed())) {\n                try {\n                    grfirstvalue = ((Number) gr.graph.getData().get(0)).intValue();\n                } catch (ClassCastException cce) {\n                    grfirstvalue = bottom - (int) (gr.yoffset * unitScale) - (lineHeight / 2);\n                }\n            }\n            int y = bottom - (int) (grfirstvalue * gr.scale * unitScale) - (int) (gr.yoffset * unitScale);\n            // at this point, we want to find something as close to the original 'y' as possible...\n            for (int j = 0; j < i; j++) {\n                int obottom = overlaps[j] + halflineHeight;\n                int otop = overlaps[j] - (lineHeight + halflineHeight);\n                // if we overlap, restart the loop...\n                if (y <= obottom && y >= otop) {\n                    y = otop - 1;\n                    j = -1;\n                }\n            }\n            overlaps[i] = y + halflineHeight;\n            g2.setColor(gr.getColor(info.isPrinting()));\n            g2.setRenderingHint(RenderingHints.KEY_ANTIALIASING, RenderingHints.VALUE_ANTIALIAS_OFF);\n            g2.drawString(gn, gnw, y + halflineHeight);\n            g2.setRenderingHint(RenderingHints.KEY_ANTIALIASING, RenderingHints.VALUE_ANTIALIAS_ON);\n            g2.drawLine(gnw + stringWidth + 1, y, gnw + stringWidth + yearWidth * 4, bottom - (int) (grfirstvalue * gr.scale * unitScale) - (int) (gr.yoffset * unitScale));\n        }\n        g2.setStroke(oldstroke);\n        g2.setFont(oldfont);\n    }\n\n    public void paintComponent(Graphics g) {\n        ensureScrollerExists();\n        // graphics setup\n        super.paintComponent(g);\n        paintGraph(g, gInfo);\n        paintVertbar(g, gInfo);\n    }\n\n    /**\n     *  Paint this panel.  Draws a horizontal axis in white (on a\n     * \t black background), then draws each graph in a different color.\n     * \t @param g the Graphics to draw this panel onto\n     */\n    private static final BasicStroke BLCENTER_STROKE = new BasicStroke(1);\n\n    public void paintGraph(Graphics g, GraphInfo info) {\n        Graphics2D g2 = (Graphics2D) g;\n        int bottom = info.getHeight(this) - GrapherPanel.AXIS_HEIGHT;\n        // from here down, everything is drawn in order.  this\n        // means that the first thing drawn (the graphpaper) is\n        // the bottommost layer, on up to the vertical-bar on top.\n        // draw graphpaper\n        if (info.drawGraphPaper())\n            paintGraphPaper(g2, info);\n        /* TODO: Draw a harsh line every 4??\n\t\tif (info.drawBaselines()) {\n\t\t\tint l = g2.getClipBounds().x;\n\t\t\tint r = l + g2.getClipBounds().width;\n\t\t\tfloat unitScale = (float) info.getYearSize() / 10.0f;\t\t\t\n\t\t\tint yeardiff = yearForPosition(info, l).\n\t\t\t\t\t\t\tcompareTo(info.getEmptyRange().getEnd());\n\n\t\t\tif(yeardiff < 0) {\n\t\t\t\tYear leftYear = yearForPosition(info, l);\n\t\t\t\tl = leftYear.diff(info.getDrawRange().getStart()) * \n\t\t\t\t\t\t\t\t  info.getYearSize();\t\t\t\t\n\t\t\t}\n\t\t\t\n\t\t\tg2.setColor(info.getBLCenterColor());\n\t\t\tg2.setStroke(BLCENTER_STROKE);\t\t\t\n\n\t\t\tfor (int i = 0; i < graphs.size(); i++) {\n\t\t\t\t// get graph\n\t\t\t\tGraph graph = (Graph) graphs.get(i);\n\n\t\t\t\t// draw a line at the center of the graph... (define center as\n\t\t\t\t// '1000')\n\t\t\t\tint y = bottom - (int) (1000 * graph.scale * unitScale)\n\t\t\t\t\t\t- (int) (graph.yoffset * unitScale);\n\n\t\t\t\tg2.drawLine(l, y, r, y);\n\t\t\t}\n\t\t}\n\t\t*/\n        // ?? -- figure out which years to draw the scale\n        // -- 1, 5, 10, 50, 100, 500, ...\n        // WRITE ME\n        // draw scale\n        paintHorizAxis(g2, info);\n        // force antialiasing for graphs -- it looks so much better,\n        // and everybody's computer is fast enough for it these days\n        g2.setRenderingHint(RenderingHints.KEY_ANTIALIASING, RenderingHints.VALUE_ANTIALIAS_ON);\n        // draw graphs\n        for (int i = 0; i < graphs.size(); i++) {\n            // get graph\n            Graph graph = (Graph) graphs.get(i);\n            // draw it\n            if (info.isPrinting()) {\n                // get printing color, printing thickness...\n                g2.setColor(graph.getColor(true));\n                graph.draw(info, g2, bottom, graph.getThickness(true), 0);\n            } else {\n                // use the thickness we have on our local graph...\n                int thickness = graph.getThickness(false) * ((current == i) ? 2 : 1);\n                g2.setColor(graph.getColor(false));\n                graph.draw(info, g2, bottom, thickness, scroller.getHorizontalScrollBar().getValue());\n            }\n        }\n        // draw component names, if applicable...\n        if (info.drawGraphNames()) {\n            drawGraphNames(g2, info);\n        }\n        // for each year that's all-down, draw a RED vertical line.\n        // TODO: this should be enabled by a menuitem:\n        // - View->Mark All-Drop Years (reword). [/ Unmark ...]\n        // - but disabled by default for single-samples and indexes.\n        // BUG: this is expensive, and should be done only:\n        // (1) on startup, and\n        // (2) whenever an .xoffset changes.\n        // PERF: it shouldn't be expensive.  a better algorithm:\n        // -- keep 2 arrays of bits: \"present\", and \"down\"\n        // -- (the first bit in each array is the first year drawn, etc.)\n        // -- before drawing, set \"present\" to false, and \"down\" to true\n        // -- when drawing, for each year:\n        // ---- set present[y] to true\n        // ---- if it's not-down, set down[y] to false\n        // -- then, draw red lines for each year where (present[y] and down[y])\n        /*\n\t\t {\n\t\t int n = bounds.span();\n\t\t boolean down[] = new boolean[n]; // ugh!\n\t\t for (int i=0; i<n; i++)\n\t\t down[i] = true;\n\t\t for (int j=0; j<graphs.size(); j++) {\n\t\t Graphable gr = (Graphable) ((Graph) graphs.get(j)).graph;\n\t\t int di = gr.getStart().diff(bounds.getStart()) + ((Graph) graphs.get(j)).xoffset; // already starting this many years in\n\t\t List d = gr.getData();\n\t\t /* -- all downs only\n\t\t for (int i=1; i<d.size(); i++) {\n\t\t double a = ((Number) d.get(i-1)).doubleValue();\n\t\t double b = ((Number) d.get(i  )).doubleValue();\n\t\t if (b >= a)\n\t\t down[i+di] = false;\n\t\t }\n\t\t */\n        /*\n\t\t // minima only -- is this better?\n\t\t for (int i=1; i<d.size()-1; i++) {\n\t\t double a = ((Number) d.get(i-1)).doubleValue();\n\t\t double b = ((Number) d.get(i  )).doubleValue();\n\t\t double c = ((Number) d.get(i+1)).doubleValue();\n\t\t if (a <= b || b >= c)\n\t\t down[i+di] = false; // BUG: fails if i+di<0, etc.\n\t\t }\n\t\t down[n-1] = false;\n\t\t }\n\t\t down[0] = false;\n\t\t g2.setColor(Color.red);\n\t\t g2.setStroke(new BasicStroke(1));\n\t\t for (int i=0; i<n; i++) {\n\t\t if (down[i]) {\n\t\t int xx = i * yearSize;\n\t\t g2.drawLine(xx, 0, xx, bottom); // refactor me?\n\t\t }\n\t\t }\n\t\t // FIXME: only draw lines where there are at least (2, 3, ?) samples?\n\t\t }\n\t\t */\n        // FIXME: what they really want is general-purpose decorators: lines\n        // (possibly with arrowheads), boxes, text, etc.  \"mark all decreasing\n        // years\" should just add decorators, not be a special mode.\n        // paint a vertical line at the cursor; and the year\n    }\n\n    private static final BasicStroke CURSOR_STROKE = new BasicStroke(1);\n\n    private void paintVertbar(Graphics g, GraphInfo info) {\n        Graphics2D g2 = (Graphics2D) g;\n        if (inside) {\n            // set color/stroke\n            g2.setStroke(CURSOR_STROKE);\n            g2.setColor(info.getForeColor());\n            // draw the vertical bar\n            g2.setRenderingHint(RenderingHints.KEY_ANTIALIASING, RenderingHints.VALUE_ANTIALIAS_OFF);\n            g2.drawLine(cursorX, 0, cursorX, getHeight() - AXIS_HEIGHT);\n            // if near the right side, it's invisible.\n            // so: if on the right half of the (vis)screen, draw on the left side.\n            // draw the label on the right side of the line?  else, left.\n            // is this correct?\n            int viewportX = cursorX - scroller.getHorizontalScrollBar().getValue();\n            int viewportWidth = getParent().getWidth();\n            boolean right = (viewportX < viewportWidth / 2);\n            final int eps = 5;\n            // PERF: memoize me!\n            final int ascent = g2.getFontMetrics().getAscent();\n            String str = yearForPosition(gInfo, cursorX).toString();\n            int x = cursorX;\n            int y = ascent + eps;\n            if (right) {\n                x += eps;\n            } else {\n                int width = g2.getFontMetrics().stringWidth(str);\n                x -= (width + eps);\n            }\n            g2.setRenderingHint(RenderingHints.KEY_ANTIALIASING, RenderingHints.VALUE_ANTIALIAS_ON);\n            g2.drawString(str, x, y);\n        }\n    }\n\n    // location-dependent tooltip\n    //    public String getToolTipText(MouseEvent event) {\n    // -- for sample S, year Y, and S[Y] = V, this should be: \"S\\nY: V\"\n    //       return \"event=\" + event;\n    //    }\n    public void update() {\n        // notification that a preference or the sample list has changed.\n        for (int i = 0; i < graphs.size(); i++) {\n            Graph cg = (Graph) graphs.get(i);\n            boolean newgraph = false;\n            if (cg.getAgent() == null)\n                newgraph = true;\n            // set each graph to have a the default agent; or the density agent.\n            if (cg.graph instanceof DensityGraph)\n                cg.setAgent(agents.acquireDensity());\n            else\n                cg.setAgent(agents.acquireDefault());\n            // assign the new graph a color\n            if (newgraph)\n                cg.setColor(gInfo.screenColors[i % gInfo.screenColors.length].getColor(), gInfo.printerColors[i % gInfo.printerColors.length].getColor());\n        }\n        if (vertaxis != null)\n            vertaxis.setAxisType(agents.acquireDefaultAxisType());\n        revalidate();\n        repaint();\n    }\n\n    //\n    // Scrollable\n    //\n    public int getScrollableBlockIncrement(Rectangle visibleRect, int orientation, int direction) {\n        // orient=vert never happens\n        return visibleRect.width;\n    }\n\n    public int getScrollableUnitIncrement(Rectangle visibleRect, int orientation, int direction) {\n        // orient=vert never happens\n        // one decade (?)\n        return gInfo.getYearWidth() * 10;\n    }\n\n    public Dimension getPreferredScrollableViewportSize() {\n        int screenWidth = Toolkit.getDefaultToolkit().getScreenSize().width;\n        int frames = myFrame.getInsets().left + myFrame.getInsets().right;\n        // actually, this should be the amount of border, but\n        // i don't know to get that reliably\n        // we do now!\n        int width = screenWidth - frames;\n        if (vertaxis != null)\n            width -= Axis.AXIS_WIDTH;\n        return new Dimension(width, 480);\n    }\n\n    public boolean getScrollableTracksViewportHeight() {\n        // never scroll vertically\n        return true;\n    }\n\n    public boolean getScrollableTracksViewportWidth() {\n        return false;\n    }\n\n    public GraphInfo getPrinterGraphInfo() {\n        return gInfo.getPrinter();\n    }\n\n    public Range getRange() {\n        return gInfo.getDrawRange();\n    }\n\n    public Range getGraphingRange() {\n        if (!gInfo.drawGraphNames())\n            return gInfo.getDrawRange();\n        return new Range(gInfo.getEmptyRange().getEnd(), gInfo.getDrawRange().getEnd());\n    }\n\n    public void forceYearWidth(int width) {\n        if (width < 1)\n            width = 1;\n        gInfo.setYearWidth(width);\n        computeRange();\n        setPreferredSize(new Dimension(gInfo.getDrawRange().span() * width, 200));\n        recreateAgent();\n        revalidate();\n    }\n\n    public void forceUnitHeight(int height) {\n        if (height < 1)\n            height = 1;\n        gInfo.set10UnitHeight(height);\n    }\n\n    public int getMaxPixelHeight() {\n        int bottom = getHeight() - GrapherPanel.AXIS_HEIGHT;\n        int maxh = 0;\n        // notification that a preference or the sample list has changed.\n        for (int i = 0; i < graphs.size(); i++) {\n            Graph cg = (Graph) graphs.get(i);\n            int val = cg.getAgent().getYRange(gInfo, cg, bottom);\n            if (val > maxh)\n                maxh = val;\n        }\n        return maxh;\n    }\n}\n",
		"id": "/EvoSuiteBenchmark/35_corina/src/main/java/corina/graph/GrapherPanel_0Test.java",
		"test_prompt": "// GrapherPanel_0Test.java\n// This file is part of Corina.\n//\n// Corina is free software; you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation; either version 2 of the License, or\n// (at your option) any later version.\n//\n// Corina is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Corina; if not, write to the Free Software\n// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n//\n// Copyright 2001 Ken Harris <kbh7@cornell.edu>\n//\npackage corina.graph;\n\nimport java.awt.BasicStroke;\nimport java.awt.Color;\nimport java.awt.Container;\nimport java.awt.Cursor;\nimport java.awt.Dimension;\nimport java.awt.EventQueue;\nimport java.awt.Graphics;\nimport java.awt.Graphics2D;\nimport java.awt.Insets;\nimport java.awt.Stroke;\nimport java.awt.Image;\nimport java.awt.Point;\nimport java.awt.Rectangle;\nimport java.awt.RenderingHints;\nimport java.awt.Toolkit;\nimport java.awt.Font;\nimport java.awt.FontMetrics;\nimport java.awt.font.*;\nimport java.awt.event.ActionEvent;\nimport java.awt.event.ActionListener;\nimport java.awt.event.AdjustmentEvent;\nimport java.awt.event.AdjustmentListener;\nimport java.awt.event.KeyEvent;\nimport java.awt.event.KeyListener;\nimport java.awt.event.MouseEvent;\nimport java.awt.event.MouseListener;\nimport java.awt.event.MouseMotionListener;\nimport java.awt.image.BufferedImage;\nimport java.io.File;\nimport java.io.FileOutputStream;\nimport java.io.IOException;\nimport java.util.List;\nimport javax.imageio.ImageIO;\nimport javax.swing.JFileChooser;\nimport javax.swing.JFrame;\nimport javax.swing.JMenuItem;\nimport javax.swing.JPanel;\nimport javax.swing.JPopupMenu;\nimport javax.swing.JScrollBar;\nimport javax.swing.JScrollPane;\nimport javax.swing.ProgressMonitor;\nimport javax.swing.RepaintManager;\nimport javax.swing.Scrollable;\nimport javax.swing.filechooser.FileFilter;\nimport corina.Build;\nimport corina.Range;\nimport corina.Sample;\nimport corina.Year;\nimport corina.core.App;\nimport corina.gui.Bug;\nimport corina.gui.XFrame;\nimport corina.ui.Alert;\nimport corina.util.ColorUtils;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link GrapherPanel}.\n* It contains ten unit test cases for the {@link GrapherPanel#isFocusTraversable()} method.\n*/\nclass GrapherPanel_0Test {"
	},
	{
		"original_code": "// GrapherPanel.java\n//\n// This file is part of Corina.\n//\n// Corina is free software; you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation; either version 2 of the License, or\n// (at your option) any later version.\n//\n// Corina is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Corina; if not, write to the Free Software\n// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n//\n// Copyright 2001 Ken Harris <kbh7@cornell.edu>\n//\npackage corina.graph;\n\nimport java.awt.BasicStroke;\nimport java.awt.Color;\nimport java.awt.Container;\nimport java.awt.Cursor;\nimport java.awt.Dimension;\nimport java.awt.EventQueue;\nimport java.awt.Graphics;\nimport java.awt.Graphics2D;\nimport java.awt.Insets;\nimport java.awt.Stroke;\nimport java.awt.Image;\nimport java.awt.Point;\nimport java.awt.Rectangle;\nimport java.awt.RenderingHints;\nimport java.awt.Toolkit;\nimport java.awt.Font;\nimport java.awt.FontMetrics;\nimport java.awt.font.*;\nimport java.awt.event.ActionEvent;\nimport java.awt.event.ActionListener;\nimport java.awt.event.AdjustmentEvent;\nimport java.awt.event.AdjustmentListener;\nimport java.awt.event.KeyEvent;\nimport java.awt.event.KeyListener;\nimport java.awt.event.MouseEvent;\nimport java.awt.event.MouseListener;\nimport java.awt.event.MouseMotionListener;\nimport java.awt.image.BufferedImage;\nimport java.io.File;\nimport java.io.FileOutputStream;\nimport java.io.IOException;\nimport java.util.List;\nimport javax.imageio.ImageIO;\nimport javax.swing.JFileChooser;\nimport javax.swing.JFrame;\nimport javax.swing.JMenuItem;\nimport javax.swing.JPanel;\nimport javax.swing.JPopupMenu;\nimport javax.swing.JScrollBar;\nimport javax.swing.JScrollPane;\nimport javax.swing.ProgressMonitor;\nimport javax.swing.RepaintManager;\nimport javax.swing.Scrollable;\nimport javax.swing.filechooser.FileFilter;\nimport corina.Build;\nimport corina.Range;\nimport corina.Sample;\nimport corina.Year;\nimport corina.core.App;\nimport corina.gui.Bug;\nimport corina.gui.XFrame;\nimport corina.ui.Alert;\nimport corina.util.ColorUtils;\n\npublic class GrapherPanel extends JPanel implements KeyListener, MouseListener, MouseMotionListener, AdjustmentListener, Scrollable {\n\n    // public data\n    // of Graph\n    public List graphs;\n\n    // currenly selected sample\n    public int current = 0;\n\n    // gui\n    private JScrollPane scroller = null;\n\n    // for setTitle(), dispose()\n    private JFrame myFrame;\n\n    private GraphInfo gInfo;\n\n    private JPopupMenu popup = new JPopupMenu(\"Save\");\n\n    private Font graphNamesFont = new Font(\"Dialog\", Font.PLAIN, 15);\n\n    private Font tickFont = new Font(\"Dialog\", Font.PLAIN, 11);\n\n    private PlotAgents agents;\n\n    // compute the initial range of the year-axis\n    // (union of all graph ranges)\n    // fixme: put |bounds| dfn here, change method name to be similar (computeBounds()?)\n    // setPreferredSize() doesn't belong here, either.\n    // -- not threadsafe -- bounds changes\n    private void computeRange() {\n        // convenience method for local JPanel...\n        computeRange(gInfo, null);\n    }\n\n    private final int yearsBeforeLabel = 0;\n\n    private final int yearsAfterLabel = 5;\n\n    public void computeRange(GraphInfo info, Graphics graphics) {\n        Range boundsr = null, emptyr = null;\n        if (graphs.isEmpty()) {\n            // can't happen\n            Bug.bug(new IllegalArgumentException(\"no graphs!\"));\n            // bounds = new Range();\n        } else {\n            Graph g0 = (Graph) graphs.get(0);\n            boundsr = g0.getRange();\n            for (int i = 1; i < graphs.size(); i++) {\n                // this looks familiar ... yes, i do believe it's (reduce), again, just like in sum.  ick.\n                Graph g = (Graph) graphs.get(i);\n                boundsr = boundsr.union(g.getRange());\n            }\n        }\n        if (info.drawGraphNames()) {\n            int mgw = calculateMaxGraphNameWidth(info, graphics) + yearsBeforeLabel + yearsAfterLabel;\n            Range strange = new Range(boundsr.getStart().add(-mgw), 1);\n            emptyr = new Range(strange.getStart(), boundsr.getStart());\n            boundsr = boundsr.union(strange);\n        }\n        info.setDrawRange(boundsr);\n        info.setEmptyRange(emptyr);\n    }\n\n    // somewhat obvious, calculates the maximum graph name width.\n    private int calculateMaxGraphNameWidth(GraphInfo info, Graphics g) {\n        int mw = 0;\n        Font font;\n        FontMetrics fontmetrics;\n        // if a graphics context is passed, use that... otherwise, use my panel\n        if (g != null) {\n            font = graphNamesFont;\n            fontmetrics = g.getFontMetrics(font);\n        } else {\n            font = graphNamesFont;\n            fontmetrics = getFontMetrics(font);\n        }\n        for (int i = 0; i < graphs.size(); i++) {\n            Graph gr = (Graph) graphs.get(i);\n            int w = fontmetrics.stringWidth(gr.getGraphName());\n            if (w > mw)\n                mw = w;\n        }\n        return 1 + (int) ((float) mw / (float) info.getYearWidth());\n    }\n\n    // here, we union ranges in Graphs; in Sum.java, we union ranges\n    // in Elements.  is there a way to combine this, like lisp's\n    // (collect elements 'union :slot range)?\n    /**\n     *  Returns true, to indicate that this panel can accept focus.\n     * \t (Needed to respond to KeyEvents.)\n     * \t @return true, meaning can-accept-focus\n     */\n    public boolean isFocusTraversable() {\n        return true;\n    }\n\n    // ok, this is the magic bullet i was looking for.\n    public boolean isManagingFocus() {\n        return true;\n    }\n\n    // update the window title with the current graph's title\n    public void updateTitle() {\n        // current graph, and its title\n        Graph g = (Graph) graphs.get(current);\n        String title = g.graph.toString();\n        // if offset, use \"title (at ...)\"\n        if (g.xoffset != 0)\n            title += \" (at \" + g.getRange() + \")\";\n        // set title\n        myFrame.setTitle(title + \" - \" + Build.VERSION + \" \" + Build.TIMESTAMP);\n        if (myFrame instanceof GraphWindow) {\n            ((GraphWindow) myFrame).panelSelectionChanged();\n        }\n    }\n\n    // for horiz scrollbar\n    public void adjustmentValueChanged(AdjustmentEvent ae) {\n        repaint();\n    }\n\n    // hack to get the horizontal scrollbar to this\n    public void setScroller(JScrollPane h) {\n        scroller = h;\n        // add update listener, required for keeping baselines drawn\n        if (gInfo.drawBaselines())\n            scroller.getHorizontalScrollBar().addAdjustmentListener(this);\n    }\n\n    private void ensureScrollerExists() {\n        if (scroller != null)\n            return;\n        // look for jscrollpane\n        Container pop = getParent().getParent();\n        if (pop instanceof JScrollPane) {\n            setScroller((JScrollPane) pop);\n        }\n    }\n\n    public void setGraphPaperVisible(boolean visible) {\n        // set the preference...\n        App.prefs.setPref(\"corina.graph.graphpaper\", Boolean.toString(visible));\n        // reload the prefs into the graphInfo\n        gInfo.reloadPrefs();\n        // redraw\n        repaint();\n    }\n\n    public void setBaselinesVisible(boolean visible) {\n        // set the preference...\n        App.prefs.setPref(\"corina.graph.baselines\", Boolean.toString(visible));\n        // reload the prefs into the graphInfo\n        gInfo.reloadPrefs();\n        ensureScrollerExists();\n        // add/remove listener so they get updated properly\n        if (!gInfo.drawBaselines())\n            scroller.getHorizontalScrollBar().removeAdjustmentListener(this);\n        else\n            scroller.getHorizontalScrollBar().addAdjustmentListener(this);\n        // redraw\n        repaint();\n    }\n\n    public void setHundredpercentlinesVisible(boolean visible) {\n        // set the preference...\n        App.prefs.setPref(\"corina.graph.hundredpercentlines\", Boolean.toString(visible));\n        // reload the prefs into the graphInfo\n        gInfo.reloadPrefs();\n        // redraw\n        repaint();\n    }\n\n    public void setComponentNamesVisible(boolean visible) {\n        // set the preference...\n        App.prefs.setPref(\"corina.graph.componentnames\", Boolean.toString(visible));\n        // reload the prefs into the graphInfo\n        gInfo.reloadPrefs();\n        // recompute the range...\n        computeRange();\n        // messy redrawing...\n        setPreferredSize(new Dimension(gInfo.getDrawRange().span() * gInfo.getYearWidth(), 200));\n        recreateAgent();\n        revalidate();\n        repaint();\n    }\n\n    // stuff for dealing with the vertical axis\n    private Axis vertaxis = null;\n\n    public void setAxisVisible(boolean visible) {\n        // set the preference...\n        App.prefs.setPref(\"corina.graph.vertical-axis\", Boolean.toString(visible));\n        // reload the prefs into the graphInfo\n        gInfo.reloadPrefs();\n        ensureScrollerExists();\n        if (gInfo.drawVertAxis()) {\n            vertaxis = new Axis(gInfo, agents.acquireDefaultAxisType());\n            scroller.setRowHeaderView(vertaxis);\n            repaint();\n        } else {\n            scroller.setRowHeaderView(null);\n            repaint();\n        }\n    }\n\n    // used for clickers and draggers: get graph nr at point\n    public int getGraphAt(Point p) {\n        // try each sample...\n        int bottom = gInfo.getHeight(this) - GrapherPanel.AXIS_HEIGHT;\n        for (int i = 0; i < graphs.size(); i++) {\n            // get graph\n            Graph gg = (Graph) graphs.get(i);\n            // hit?\n            if (gg.getAgent().contact(gInfo, gg, p, bottom))\n                return i;\n        }\n        // fail: -1\n        return -1;\n    }\n\n    // MouseMotionListener, for vertical line under cursor ----------\n    private Point dragStart = null;\n\n    // initial xoff\n    private int startX;\n\n    public void mouseDragged(MouseEvent e) {\n        // FIXME: move all the dragStart code into mousePressed\n        // TODO: if user drags the axis, scroll?\n        // didn't drag from a graph?  sorry.\n        if (clicked == -1)\n            return;\n        // just starting a drag?\n        if (dragStart == null) {\n            // dragging something?\n            int n = getGraphAt(e.getPoint());\n            // nope, ignore\n            if (n == -1)\n                return;\n            // yes, store\n            dragStart = (Point) e.getPoint().clone();\n            dragStart.y += ((Graph) graphs.get(n)).yoffset;\n            startX = ((Graph) graphs.get(n)).xoffset;\n            // select it, too, while we're at it\n            current = n;\n        }\n        // change yoffset[n]\n        ((Graph) graphs.get(current)).yoffset = (int) dragStart.getY() - e.getY();\n        // change xoffset[n], but only if no shift\n        int dx = 0;\n        if (!e.isShiftDown()) {\n            dx = (int) (e.getX() - dragStart.getX());\n            dx -= dx % gInfo.getYearWidth();\n        }\n        ((Graph) graphs.get(current)).xoffset = startX + (int) dx / gInfo.getYearWidth();\n        //        recomputeDrops(); -- writeme?\n        // repaint\n        updateTitle();\n        repaint();\n    }\n\n    private int cursorX = 0;\n\n    // this is BUG #199, because mouseMoved events stop being\n    // generated as soon as a mouseExited event is fired.  idea:\n    // compute dx, and on mouseExited set cursorX to (dx<0 ?\n    // minCursorX : maxCursorX), but that doesn't take into account\n    // moving off the bottom.  there's got to be a way to track\n    // mouseMoved events for the focused window regardless of the\n    // position of the mouse.\n    public void mouseMoved(MouseEvent e) {\n        // old cursorX\n        int old = cursorX;\n        int yearWidth = gInfo.getYearWidth();\n        // update cursorX\n        cursorX = e.getX();\n        // put it on the nearest gridline\n        int distanceLeftToGridline = cursorX % yearWidth;\n        boolean roundRight = (distanceLeftToGridline >= yearWidth / 2);\n        cursorX -= distanceLeftToGridline;\n        if (roundRight)\n            cursorX += yearWidth;\n        // refresh, but only if necessary\n        if (cursorX != old) {\n            // OLD: repaint();\n            // only update part of display that's needed!\n            // vertical line\n            repaint(old - 1, 0, 3, getHeight() - AXIS_HEIGHT);\n            repaint(cursorX - 1, 0, 3, getHeight() - AXIS_HEIGHT);\n            // text\n            // repaint(old, 0, 50, 15); // HACK!\n            // repaint(cursorX, 0, 50, 15); // HACK!\n            // HACK: this assumes something about the text size.\n            // also, FIXME: in the future i'll draw text on either side of the line.\n            // almost-as-bad new version:\n            repaint(old - 50, 0, 100, 15);\n            repaint(cursorX - 50, 0, 100, 15);\n        }\n        // crosshair cursor\n        // PERF: is setCursor() expensive?\n        setCursor(crosshair);\n    }\n\n    private Cursor crosshair = new Cursor(Cursor.CROSSHAIR_CURSOR);\n\n    // ------------------------------------------------------------\n    // KeyListener ------------------------------------------------------------\n    /**\n     *  Deal with key-pressed events, as described above.\n     * \t @param e the event to process\n     */\n    public void keyPressed(KeyEvent e) {\n        ensureScrollerExists();\n        JScrollBar horiz = scroller.getHorizontalScrollBar();\n        Range bounds = gInfo.getDrawRange();\n        // extract some info once so i don't have to do it later\n        int m = e.getModifiers();\n        int k = e.getKeyCode();\n        // cache yearsize, we use it a lot here\n        int yearWidth = gInfo.getYearWidth();\n        // repaint graph?\n        boolean repaint = false;\n        // unknown key?\n        boolean unknown = false;\n        // graph\n        Graph g = (Graph) graphs.get(current);\n        // IDEA: if i had some way of saying \"shift tab\" => { block }\n        // then i wouldn't need these nested if/case statements.\n        // parse it...ugh\n        if (m == KeyEvent.SHIFT_MASK) {\n            // shift keys\n            switch(k) {\n                case KeyEvent.VK_TAB:\n                    current = (current == 0 ? graphs.size() - 1 : current - 1);\n                    repaint = true;\n                    break;\n                case KeyEvent.VK_PERIOD:\n                    g.bigger();\n                    repaint = true;\n                    break;\n                case KeyEvent.VK_COMMA:\n                    g.smaller();\n                    repaint = true;\n                    break;\n                case KeyEvent.VK_EQUALS:\n                    g.slide(1);\n                    repaint = true;\n                    break;\n                default:\n                    unknown = true;\n            }\n        } else if (m == KeyEvent.CTRL_MASK) {\n            // control keys\n            switch(k) {\n                // change the graph scale!\n                case KeyEvent.VK_W:\n                    {\n                        int curheight = gInfo.get10UnitHeight();\n                        if (--curheight < 2)\n                            curheight = 2;\n                        gInfo.set10UnitHeight(curheight);\n                        recreateAgent();\n                        revalidate();\n                        if (vertaxis != null)\n                            vertaxis.repaint();\n                        repaint = true;\n                        break;\n                    }\n                case KeyEvent.VK_S:\n                    {\n                        int curheight = gInfo.get10UnitHeight();\n                        curheight++;\n                        gInfo.set10UnitHeight(curheight);\n                        recreateAgent();\n                        revalidate();\n                        if (vertaxis != null)\n                            vertaxis.repaint();\n                        repaint = true;\n                        break;\n                    }\n                case KeyEvent.VK_A:\n                    {\n                        int curwidth = gInfo.getYearWidth();\n                        Year y = yearForPosition(gInfo, horiz.getValue());\n                        if (--curwidth < 2)\n                            curwidth = 2;\n                        gInfo.setYearWidth(curwidth);\n                        computeRange();\n                        setPreferredSize(new Dimension(bounds.span() * curwidth, 200));\n                        recreateAgent();\n                        revalidate();\n                        horiz.setValue(Math.abs(y.diff(getRange().getStart())) * gInfo.getYearWidth());\n                        repaint = true;\n                        break;\n                    }\n                case KeyEvent.VK_D:\n                    {\n                        int curwidth = gInfo.getYearWidth();\n                        Year y = yearForPosition(gInfo, horiz.getValue());\n                        curwidth++;\n                        gInfo.setYearWidth(curwidth);\n                        computeRange();\n                        setPreferredSize(new Dimension(bounds.span() * curwidth, 200));\n                        recreateAgent();\n                        revalidate();\n                        horiz.setValue(Math.abs(y.diff(getRange().getStart())) * gInfo.getYearWidth());\n                        repaint = true;\n                        break;\n                    }\n                case KeyEvent.VK_LEFT:\n                    {\n                        g.left();\n                        // see if our graph bounds changed at all.\n                        Year y1 = bounds.getStart();\n                        Year y2 = bounds.getEnd();\n                        boolean endBoundChanged = false;\n                        computeRange();\n                        bounds = gInfo.getDrawRange();\n                        if (!bounds.getEnd().equals(y2))\n                            endBoundChanged = true;\n                        if (!bounds.getStart().equals(y1) || endBoundChanged) {\n                            setPreferredSize(new Dimension(bounds.span() * yearWidth, 200));\n                            recreateAgent();\n                            revalidate();\n                        }\n                        // if we're changing the start boundary, AND we're already at the *end*,\n                        // don't move the scroll bar, it'll move for us.\n                        if (!(endBoundChanged && horiz.getValue() == horiz.getMinimum()))\n                            horiz.setValue(horiz.getValue() - yearWidth);\n                        repaint = true;\n                        break;\n                    }\n                case KeyEvent.VK_RIGHT:\n                    {\n                        g.right();\n                        // see if our graph bounds changed at all.\n                        Year y1 = bounds.getStart();\n                        Year y2 = bounds.getEnd();\n                        boolean startBoundChanged = false;\n                        computeRange();\n                        bounds = gInfo.getDrawRange();\n                        if (!bounds.getStart().equals(y1))\n                            startBoundChanged = true;\n                        if (!bounds.getEnd().equals(y2) || startBoundChanged) {\n                            setPreferredSize(new Dimension(bounds.span() * yearWidth, 200));\n                            recreateAgent();\n                            revalidate();\n                        }\n                        // if we're changing the start boundary, AND we're already at the beginning,\n                        // don't move the scroll bar, it'll move for us.\n                        if (!(startBoundChanged && horiz.getValue() == horiz.getMinimum()))\n                            horiz.setValue(horiz.getValue() + yearWidth);\n                        repaint = true;\n                        break;\n                    }\n                default:\n                    unknown = true;\n            }\n        } else {\n            // unmodified keys\n            switch(k) {\n                case KeyEvent.VK_UP:\n                    g.slide(10);\n                    repaint = true;\n                    break;\n                case KeyEvent.VK_DOWN:\n                    g.slide(-10);\n                    repaint = true;\n                    break;\n                case KeyEvent.VK_MINUS:\n                    g.slide(-1);\n                    repaint = true;\n                    break;\n                case // unshifted equals == plus\n                KeyEvent.VK_EQUALS:\n                    g.slide(1);\n                    repaint = true;\n                    break;\n                case KeyEvent.VK_LEFT:\n                    // BUG: horiz.getUnitIncrement() returns 1 here.  why?  i have no idea.\n                    // i guess because i don't set it explicitly.  though i would expect\n                    // values returned by the Scrollable interface would work.  oh well,\n                    // i'll just work around it for now.\n                    // -- OLD: horiz.setValue(horiz.getValue() - horiz.getUnitIncrement());\n                    horiz.setValue(horiz.getValue() - yearWidth * 10);\n                    break;\n                case KeyEvent.VK_RIGHT:\n                    // -- OLD: horiz.setValue(horiz.getValue() + horiz.getUnitIncrement());\n                    horiz.setValue(horiz.getValue() + yearWidth * 10);\n                    break;\n                case KeyEvent.VK_PAGE_UP:\n                    // BUG: if parent isn't viewport, ignore?: horiz.setValue(horiz.getValue() - yearSize*100);\n                    horiz.setValue(horiz.getValue() - getParent().getWidth());\n                    // -- OLD: horiz.setValue(horiz.getValue() - horiz.getBlockIncrement());\n                    break;\n                case KeyEvent.VK_PAGE_DOWN:\n                    // BUG: if parent isn't viewport, ignore?: horiz.setValue(horiz.getValue() + yearSize*100);\n                    horiz.setValue(horiz.getValue() + getParent().getWidth());\n                    // -- OLD: horiz.setValue(horiz.getValue() + horiz.getBlockIncrement());\n                    break;\n                case KeyEvent.VK_HOME:\n                    horiz.setValue(horiz.getMinimum());\n                    break;\n                case KeyEvent.VK_END:\n                    horiz.setValue(horiz.getMaximum());\n                    break;\n                case KeyEvent.VK_ESCAPE:\n                    ((XFrame) myFrame).close();\n                    break;\n                case KeyEvent.VK_TAB:\n                    current = (current + 1) % graphs.size();\n                    repaint = true;\n                    break;\n                default:\n                    unknown = true;\n            }\n        }\n        // repaint, if necessary\n        if (repaint) {\n            // computeRange(); -- this introduces lots of bugs,\n            // but probably needs to be done, eventually.\n            // also, see sun's jscrollpane tutorial: it has\n            // demos on how to resize the scrollable area.\n            repaint();\n        }\n        // yummy\n        if (!unknown)\n            e.consume();\n        // updating the title is quick, so don't worry about doing it\n        // a lot (oh wait, on windows2000 it isn't.  ouch.)\n        updateTitle();\n    }\n\n    public void keyReleased(KeyEvent e) {\n    }\n\n    public void keyTyped(KeyEvent e) {\n    }\n\n    // ----------------------------------------------------------------------\n    // MouseListener, for click-to-select --------------------\n    private int clicked = -1;\n\n    public void mouseClicked(MouseEvent e) {\n        clicked = getGraphAt(e.getPoint());\n        if (clicked != -1) {\n            current = clicked;\n            repaint();\n            /* if (n != -1) */\n            updateTitle();\n            // this should be: current = n; repaint(); if (n != -1) updateTitle();\n            // but that has problems with keyboard accels on current==-1\n            // actually the title should be \"Plot: xyz\", or \"Plot\", so if-stmt isn't even needed\n        }\n        this.requestFocus();\n    }\n\n    public void mouseEntered(MouseEvent e) {\n        inside = true;\n        // sort of...\n        mouseMoved(e);\n        // blunt!\n        repaint();\n    }\n\n    // is the cursor in the area?\n    private boolean inside = true;\n\n    public void mouseExited(MouseEvent e) {\n        inside = false;\n        // another hack!\n        repaint();\n    }\n\n    public void mousePressed(MouseEvent e) {\n        // select it right away\n        mouseClicked(e);\n    }\n\n    public void mouseReleased(MouseEvent e) {\n        // reset drag?  that seems awkward\n        dragStart = null;\n        clicked = -1;\n        System.out.println(e);\n        if (e.isPopupTrigger()) {\n            popup.show(GrapherPanel.this, e.getX(), e.getY());\n            return;\n        }\n    }\n\n    // TODO: put the mouse-listener and mouse-motion-listener\n    // stuff together.\n    // ------------------------------------------------------------\n    private void setDefaultGraphColors() {\n        int i;\n        for (i = 0; i < graphs.size(); i++) {\n            Graph g = (Graph) graphs.get(i);\n            g.setColor(gInfo.screenColors[i % gInfo.screenColors.length].getColor(), gInfo.printerColors[i % gInfo.printerColors.length].getColor());\n        }\n    }\n\n    public void tryPrint(int printStyle) {\n        new GraphPrintDialog(myFrame, graphs, this, printStyle);\n    }\n\n    // graphs = List of Graph.\n    // frame = window; (used for: title set to current graph, closed when ESC pressed.)\n    public GrapherPanel(List graphs, PlotAgents agents, final JFrame myFrame) {\n        // my frame\n        this.myFrame = myFrame;\n        this.agents = agents;\n        // cursor: a crosshair.\n        // note: (mac crosshair doesn't invert on 10.[01], so it's invisible on black)\n        setCursor(crosshair);\n        // set up the graph info, which loads a lot of default preferences.\n        gInfo = new GraphInfo();\n        // key listener -- apparently the focus gets screwed up and\n        // keys stop responding if I don't add a key listener to both\n        // the JFrame and JPanel, I don't know why.\n        addKeyListener(this);\n        // motion listener\n        addMouseMotionListener(this);\n        // click/drag listener\n        addMouseListener(this);\n        // copy data ref\n        this.graphs = graphs;\n        // set default colors\n        setDefaultGraphColors();\n        // update bounds\n        computeRange();\n        // set default scrolly window size\n        setPreferredSize(new Dimension(gInfo.getDrawRange().span() * gInfo.getYearWidth(), 200));\n        for (int i = 0; i < graphs.size(); i++) {\n            Graph cg = (Graph) graphs.get(i);\n            // make sure sapwood and unmeas_pre are integers\n            if (cg.graph instanceof Sample) {\n                Sample s = (Sample) ((Graph) graphs.get(i)).graph;\n                Object sap = s.meta.get(\"sapwood\");\n                Object pre = s.meta.get(\"unmeas_pre\");\n                boolean sapBad = (sap != null && !(sap instanceof Integer));\n                boolean preBad = (pre != null && !(pre instanceof Integer));\n                if (sapBad || preBad) {\n                    Alert.error(\"Text found instead of numbers\", \"One or more metadata fields contained text where a number\\n\" + \"was expected.  The graph might not display all information\\n\" + \"(like sapwood count).  Double-check the sample's metadata fields.\");\n                    // PROBLEM: be more specific -- *which* sample, and *what* value?\n                    // plus, let me edit it here (button: \"edit sample now\", opens metadata view)\n                    // better: just don't display it, or ... (?)\n                    return;\n                }\n            }\n            // set each graph to have a the default agent; or the density agent.\n            if (cg.graph instanceof DensityGraph)\n                cg.setAgent(agents.acquireDensity());\n            else\n                cg.setAgent(agents.acquireDefault());\n        }\n        // background -- default is black\n        setBackground(gInfo.getBackgroundColor());\n        // create drawing agent\n        recreateAgent();\n        // ensure that we're double buffered\n        setDoubleBuffered(true);\n        /*addMouseListener(new MouseAdapter() {\n\t\t public void mouseClicked(MouseEvent e) {\n\t\t System.out.println(e);\n\t\t if (!e.isPopupTrigger()) return;\n\t\t \n\t\t System.out.println(\"Popup triggered!\");\n\t\t \n\t\t popup.show(GrapherPanel.this, e.getX(), e.getY());\n\t\t }  \n\t\t });*/\n    }\n\n    public void postScrollpanedInit() {\n        setBaselinesVisible(Boolean.valueOf(App.prefs.getPref(\"corina.graph.baselines\")).booleanValue());\n        setHundredpercentlinesVisible(Boolean.valueOf(App.prefs.getPref(\"corina.graph.hundredpercentlines\")).booleanValue());\n        setAxisVisible(Boolean.valueOf(App.prefs.getPref(\"corina.graph.vertical-axis\")).booleanValue());\n    }\n\n    public void recreateAgent() {\n        // did we deprecate this horrible beast?\n        // myAgent = new StandardPlot(gInfo.getDrawRange(), gInfo);\n    }\n\n    /**\n     * Colors to use for graphs: blue, green, red, cyan, yellow, magenta.\n     */\n    /*\n\tpublic final Color COLORS[] = { new Color(0.00f, 0.53f, 1.00f), // blue\n\t\t\tnew Color(0.27f, 1.00f, 0.49f), // green\n\t\t\tnew Color(1.00f, 0.28f, 0.27f), // red\n\t\t\tnew Color(0.22f, 0.80f, 0.82f), // cyan\n\t\t\tnew Color(0.82f, 0.81f, 0.23f), // yellow\n\t\t\tnew Color(0.85f, 0.26f, 0.81f), // magenta\n\t};\n\t*/\n    // number of pixels between the bottom of the panel and the baseline\n    /*package?*/\n    static final int AXIS_HEIGHT = 30;\n\n    // timing: this seems to take a significant portion of the time used to\n    // draw the graph; usually 20-30 ms, but often jumping to 80-90\n    // ms.  still far too much garbage being created here.\n    private void paintGraphPaper(Graphics2D g2, GraphInfo info) {\n        // visible range: [l..r]\n        int l = g2.getClipBounds().x;\n        int r = l + g2.getClipBounds().width;\n        int origl = l;\n        Range bounds = info.getDrawRange();\n        if (info.drawGraphNames()) {\n            int yeardiff = yearForPosition(info, l).compareTo(info.getEmptyRange().getEnd());\n            if (yeardiff < 0)\n                l += -yeardiff * info.getYearWidth();\n        }\n        // bottom\n        int bottom = info.getHeight(this) - AXIS_HEIGHT;\n        // draw horizontal lines\n        // (would it help if everything was a big generalpath?  it appears not.)\n        Color major = info.getMajorLineColor();\n        Color mid = info.getMidLineColor();\n        Color minor = info.getMinorLineColor();\n        int yearWidth = info.getYearWidth();\n        int unitHeight = info.get10UnitHeight();\n        // be sure to draw all the way to our first vert. line....\n        Year leftYear = yearForPosition(info, l);\n        int x0 = leftYear.diff(bounds.getStart()) * yearWidth;\n        g2.setColor(minor);\n        int i = 1;\n        for (int y = bottom - unitHeight; y > 0; y -= unitHeight) {\n            // BUG: 10?  is that right?  EXTRACT CONST, at least\n            if (i % 5 == 0) {\n                if (x0 != origl)\n                    g2.drawLine(origl, y, x0, y);\n                g2.setColor((i % 10 == 0) ? major : mid);\n                g2.drawLine(x0, y, r, y);\n                g2.setColor(minor);\n            } else\n                g2.drawLine(x0, y, r, y);\n            i++;\n        }\n        // -----\n        // draw vertical lines.\n        // PERF: isn't every 5th line here just going to get overwritten?\n        // -- for vert lines, it's a bit harder (right now, anyway)\n        for (int x = x0; x < r; x += yearWidth) {\n            // thin lines\n            g2.drawLine(x, 0, x, bottom);\n        }\n        // crosses AD/BC boundary?\n        // (LOD: EXTRACT \"crosses-boundary\"?  well, it's pretty trivial now)\n        if (bounds.intersection(AD_BC).span() == 2) {\n            // thick vertical decade lines: can't just go every\n            // 5*yearSize, because that would not take the zero-gap into\n            // account.  so start at -5 and go backward, and also start at\n            // +5 and go forward.\n            for (Year y = new Year(-5); y.compareTo(bounds.getStart()) > 0; y = y.add(-5)) {\n                int x = y.diff(bounds.getStart()) * yearWidth;\n                if (// (note: this test is backwards from elsewhere; we're going right-to-left)\n                x > r)\n                    continue;\n                if (x < l)\n                    break;\n                g2.setColor((y.mod(10) == 0) ? major : mid);\n                g2.drawLine(x, 0, x, bottom);\n            }\n            for (Year y = new Year(5); y.compareTo(bounds.getEnd()) < 0; y = y.add(5)) {\n                int x = y.diff(bounds.getStart()) * yearWidth;\n                if (x < l)\n                    continue;\n                if (x > r)\n                    break;\n                g2.setColor((y.mod(10) == 0) ? major : mid);\n                g2.drawLine(x, 0, x, bottom);\n            }\n        } else {\n            // doesn't cross AD/BC boundary; just draw lines.\n            Year y1 = yearForPosition(info, l);\n            // y -= (y%5) + 5; // EXTRACT: Year.sub()?\n            y1 = y1.add(-(y1.mod(5) + 5));\n            for (Year y = y1; y.compareTo(bounds.getEnd()) < 0; y = y.add(5)) {\n                // EXTRACT: yearToPosition(y)\n                int x = y.diff(bounds.getStart()) * yearWidth;\n                if (x < l)\n                    continue;\n                if (x > r)\n                    break;\n                g2.setColor((y.mod(10) == 0) ? major : mid);\n                g2.drawLine(x, 0, x, bottom);\n            }\n        }\n    }\n\n    // if r.intersection(AD_BC)==2, then r crosses the ad/bc boundary\n    private static final Range AD_BC = new Range(new Year(-1), new Year(1));\n\n    /*\n\t to get year -> position, it's just position = yearSize * (year -\n\t bounds.getStart()) so to get position -> year, it's just year =\n\t bounds.getStart() + position / yearSize, right?\n\t -- it's +/-1, anyway, which is a heck of a lot better than\n\t drawing every x-position\n\t -- well, is it correct, or off-by-one?  i think it's correct...\n\t */\n    private Year yearForPosition(GraphInfo info, int x) {\n        return info.getDrawRange().getStart().add(x / info.getYearWidth());\n    }\n\n    public int getYearWidth() {\n        return gInfo.getYearWidth();\n    }\n\n    // timing: down to around 10 ms\n    private void paintHorizAxis(Graphics g, GraphInfo info) {\n        Graphics2D g2 = (Graphics2D) g;\n        Font oldfont = g2.getFont();\n        g2.setFont(tickFont);\n        g2.setColor(info.getForeColor());\n        int l = g2.getClipBounds().x;\n        int r = l + g2.getClipBounds().width;\n        int bottom = info.getHeight(this) - AXIS_HEIGHT;\n        int yearWidth = info.getYearWidth();\n        Range bounds = info.getDrawRange();\n        // go one further, just to be sure\n        Year startYear = yearForPosition(info, l).add(-5);\n        // actually, go 5 further; i need to make sure to draw the text, even if it's\n        // not completely on the screen, and i'm ASSUMING the text isn't wider than 5\n        // years' worth -- if it is, it's probably going to start getting hard to read.\n        // x-position of tick\n        int x = startYear.diff(bounds.getStart()) * yearWidth;\n        for (Year y = startYear; y.compareTo(bounds.getEnd()) <= 0; y = y.add(1)) {\n            // out of visible viewport?\n            if (x > r)\n                break;\n            // don't draw years or ticks in the empty part of the graph\n            if (info.drawGraphNames() && y.compareTo(info.getEmptyRange().getEnd()) < -5) {\n                x += yearWidth;\n                continue;\n            }\n            // draw a label for the decade\n            if (y.column() == 0 || y.isYearOne())\n                g2.drawString(y.toString(), x, bottom + 25);\n            // draw a tick mark for the year\n            int drop = bottom + 5;\n            if (y.mod(10) == 0)\n                drop += 10;\n            else if (y.mod(5) == 0)\n                drop += 5;\n            g2.drawLine(x, bottom, x, drop);\n            // next tick\n            x += yearWidth;\n        }\n        // draw a horizontal bar\n        g2.drawLine(l, bottom, r, bottom);\n        g2.setFont(oldfont);\n    }\n\n    /*\n\t PERFORMANCE:\n\t -- in http://www.asktog.com/basics/firstPrinciples.html, tog says\n\t \"Acknowledge all button clicks by visual or aural feedback\n\t within 50 milliseconds.\"\n\n\t so i'll set it as a goal that paintComponent() should, for all\n\t normal uses, return within 50 ms.  i can't guess what systems\n\t every person running corina will have, but my reference platform\n\t is a 500 MHz PPC G4.  if it returns within 50 ms on a 500 MHz\n\t computer (rather slow by today's standards), i'll be satisfied.\n\n\t TIMING:\n\t -- empty screen: 30-50 ms [GOOD!]\n\t -- 1 sample visible: 40-50 ms [GOOD!]\n\t -- lots of samples visible: 200-400 ms\n\t [a bit sluggish -- but only needed for scrolling]\n\t */\n    public void drawGraphNames(Graphics g, GraphInfo info) {\n        Graphics2D g2 = (Graphics2D) g;\n        int bottom = info.getHeight(this) - GrapherPanel.AXIS_HEIGHT;\n        int yearWidth = info.getYearWidth();\n        Rectangle temprect = new Rectangle(0, 0, info.getEmptyRange().span() * yearWidth, bottom);\n        // we're not on the screen, don't draw this...\n        if (!temprect.intersects(g2.getClipBounds()))\n            return;\n        int[] overlaps = new int[graphs.size()];\n        float unitScale = (float) info.get10UnitHeight() / 10.0f;\n        Stroke oldstroke;\n        Font oldfont;\n        BasicStroke connectorLine = new BasicStroke(1, BasicStroke.CAP_BUTT, BasicStroke.JOIN_BEVEL, 10f, new float[] { 8f }, 0f);\n        // bump up the text size...\n        oldfont = g2.getFont();\n        g2.setFont(graphNamesFont);\n        oldstroke = g2.getStroke();\n        g2.setStroke(connectorLine);\n        int lineHeight = g2.getFontMetrics().getHeight();\n        int halflineHeight = lineHeight / 2;\n        for (int i = 0; i < graphs.size(); i++) {\n            Graph gr = (Graph) graphs.get(i);\n            String gn = gr.getGraphName();\n            int stringWidth = g2.getFontMetrics().stringWidth(gn);\n            // gnw = x coordinate for start of string\n            int gnw = ((info.getEmptyRange().span() * yearWidth) - stringWidth) - (yearWidth * yearsAfterLabel);\n            // if this is an indexed sample, set this to be at the 100% line\n            int grfirstvalue = 1000;\n            // otherwise, get the first point!\n            if (!((gr.graph instanceof Sample) && ((Sample) gr.graph).isIndexed())) {\n                try {\n                    grfirstvalue = ((Number) gr.graph.getData().get(0)).intValue();\n                } catch (ClassCastException cce) {\n                    grfirstvalue = bottom - (int) (gr.yoffset * unitScale) - (lineHeight / 2);\n                }\n            }\n            int y = bottom - (int) (grfirstvalue * gr.scale * unitScale) - (int) (gr.yoffset * unitScale);\n            // at this point, we want to find something as close to the original 'y' as possible...\n            for (int j = 0; j < i; j++) {\n                int obottom = overlaps[j] + halflineHeight;\n                int otop = overlaps[j] - (lineHeight + halflineHeight);\n                // if we overlap, restart the loop...\n                if (y <= obottom && y >= otop) {\n                    y = otop - 1;\n                    j = -1;\n                }\n            }\n            overlaps[i] = y + halflineHeight;\n            g2.setColor(gr.getColor(info.isPrinting()));\n            g2.setRenderingHint(RenderingHints.KEY_ANTIALIASING, RenderingHints.VALUE_ANTIALIAS_OFF);\n            g2.drawString(gn, gnw, y + halflineHeight);\n            g2.setRenderingHint(RenderingHints.KEY_ANTIALIASING, RenderingHints.VALUE_ANTIALIAS_ON);\n            g2.drawLine(gnw + stringWidth + 1, y, gnw + stringWidth + yearWidth * 4, bottom - (int) (grfirstvalue * gr.scale * unitScale) - (int) (gr.yoffset * unitScale));\n        }\n        g2.setStroke(oldstroke);\n        g2.setFont(oldfont);\n    }\n\n    public void paintComponent(Graphics g) {\n        ensureScrollerExists();\n        // graphics setup\n        super.paintComponent(g);\n        paintGraph(g, gInfo);\n        paintVertbar(g, gInfo);\n    }\n\n    /**\n     *  Paint this panel.  Draws a horizontal axis in white (on a\n     * \t black background), then draws each graph in a different color.\n     * \t @param g the Graphics to draw this panel onto\n     */\n    private static final BasicStroke BLCENTER_STROKE = new BasicStroke(1);\n\n    public void paintGraph(Graphics g, GraphInfo info) {\n        Graphics2D g2 = (Graphics2D) g;\n        int bottom = info.getHeight(this) - GrapherPanel.AXIS_HEIGHT;\n        // from here down, everything is drawn in order.  this\n        // means that the first thing drawn (the graphpaper) is\n        // the bottommost layer, on up to the vertical-bar on top.\n        // draw graphpaper\n        if (info.drawGraphPaper())\n            paintGraphPaper(g2, info);\n        /* TODO: Draw a harsh line every 4??\n\t\tif (info.drawBaselines()) {\n\t\t\tint l = g2.getClipBounds().x;\n\t\t\tint r = l + g2.getClipBounds().width;\n\t\t\tfloat unitScale = (float) info.getYearSize() / 10.0f;\t\t\t\n\t\t\tint yeardiff = yearForPosition(info, l).\n\t\t\t\t\t\t\tcompareTo(info.getEmptyRange().getEnd());\n\n\t\t\tif(yeardiff < 0) {\n\t\t\t\tYear leftYear = yearForPosition(info, l);\n\t\t\t\tl = leftYear.diff(info.getDrawRange().getStart()) * \n\t\t\t\t\t\t\t\t  info.getYearSize();\t\t\t\t\n\t\t\t}\n\t\t\t\n\t\t\tg2.setColor(info.getBLCenterColor());\n\t\t\tg2.setStroke(BLCENTER_STROKE);\t\t\t\n\n\t\t\tfor (int i = 0; i < graphs.size(); i++) {\n\t\t\t\t// get graph\n\t\t\t\tGraph graph = (Graph) graphs.get(i);\n\n\t\t\t\t// draw a line at the center of the graph... (define center as\n\t\t\t\t// '1000')\n\t\t\t\tint y = bottom - (int) (1000 * graph.scale * unitScale)\n\t\t\t\t\t\t- (int) (graph.yoffset * unitScale);\n\n\t\t\t\tg2.drawLine(l, y, r, y);\n\t\t\t}\n\t\t}\n\t\t*/\n        // ?? -- figure out which years to draw the scale\n        // -- 1, 5, 10, 50, 100, 500, ...\n        // WRITE ME\n        // draw scale\n        paintHorizAxis(g2, info);\n        // force antialiasing for graphs -- it looks so much better,\n        // and everybody's computer is fast enough for it these days\n        g2.setRenderingHint(RenderingHints.KEY_ANTIALIASING, RenderingHints.VALUE_ANTIALIAS_ON);\n        // draw graphs\n        for (int i = 0; i < graphs.size(); i++) {\n            // get graph\n            Graph graph = (Graph) graphs.get(i);\n            // draw it\n            if (info.isPrinting()) {\n                // get printing color, printing thickness...\n                g2.setColor(graph.getColor(true));\n                graph.draw(info, g2, bottom, graph.getThickness(true), 0);\n            } else {\n                // use the thickness we have on our local graph...\n                int thickness = graph.getThickness(false) * ((current == i) ? 2 : 1);\n                g2.setColor(graph.getColor(false));\n                graph.draw(info, g2, bottom, thickness, scroller.getHorizontalScrollBar().getValue());\n            }\n        }\n        // draw component names, if applicable...\n        if (info.drawGraphNames()) {\n            drawGraphNames(g2, info);\n        }\n        // for each year that's all-down, draw a RED vertical line.\n        // TODO: this should be enabled by a menuitem:\n        // - View->Mark All-Drop Years (reword). [/ Unmark ...]\n        // - but disabled by default for single-samples and indexes.\n        // BUG: this is expensive, and should be done only:\n        // (1) on startup, and\n        // (2) whenever an .xoffset changes.\n        // PERF: it shouldn't be expensive.  a better algorithm:\n        // -- keep 2 arrays of bits: \"present\", and \"down\"\n        // -- (the first bit in each array is the first year drawn, etc.)\n        // -- before drawing, set \"present\" to false, and \"down\" to true\n        // -- when drawing, for each year:\n        // ---- set present[y] to true\n        // ---- if it's not-down, set down[y] to false\n        // -- then, draw red lines for each year where (present[y] and down[y])\n        /*\n\t\t {\n\t\t int n = bounds.span();\n\t\t boolean down[] = new boolean[n]; // ugh!\n\t\t for (int i=0; i<n; i++)\n\t\t down[i] = true;\n\t\t for (int j=0; j<graphs.size(); j++) {\n\t\t Graphable gr = (Graphable) ((Graph) graphs.get(j)).graph;\n\t\t int di = gr.getStart().diff(bounds.getStart()) + ((Graph) graphs.get(j)).xoffset; // already starting this many years in\n\t\t List d = gr.getData();\n\t\t /* -- all downs only\n\t\t for (int i=1; i<d.size(); i++) {\n\t\t double a = ((Number) d.get(i-1)).doubleValue();\n\t\t double b = ((Number) d.get(i  )).doubleValue();\n\t\t if (b >= a)\n\t\t down[i+di] = false;\n\t\t }\n\t\t */\n        /*\n\t\t // minima only -- is this better?\n\t\t for (int i=1; i<d.size()-1; i++) {\n\t\t double a = ((Number) d.get(i-1)).doubleValue();\n\t\t double b = ((Number) d.get(i  )).doubleValue();\n\t\t double c = ((Number) d.get(i+1)).doubleValue();\n\t\t if (a <= b || b >= c)\n\t\t down[i+di] = false; // BUG: fails if i+di<0, etc.\n\t\t }\n\t\t down[n-1] = false;\n\t\t }\n\t\t down[0] = false;\n\t\t g2.setColor(Color.red);\n\t\t g2.setStroke(new BasicStroke(1));\n\t\t for (int i=0; i<n; i++) {\n\t\t if (down[i]) {\n\t\t int xx = i * yearSize;\n\t\t g2.drawLine(xx, 0, xx, bottom); // refactor me?\n\t\t }\n\t\t }\n\t\t // FIXME: only draw lines where there are at least (2, 3, ?) samples?\n\t\t }\n\t\t */\n        // FIXME: what they really want is general-purpose decorators: lines\n        // (possibly with arrowheads), boxes, text, etc.  \"mark all decreasing\n        // years\" should just add decorators, not be a special mode.\n        // paint a vertical line at the cursor; and the year\n    }\n\n    private static final BasicStroke CURSOR_STROKE = new BasicStroke(1);\n\n    private void paintVertbar(Graphics g, GraphInfo info) {\n        Graphics2D g2 = (Graphics2D) g;\n        if (inside) {\n            // set color/stroke\n            g2.setStroke(CURSOR_STROKE);\n            g2.setColor(info.getForeColor());\n            // draw the vertical bar\n            g2.setRenderingHint(RenderingHints.KEY_ANTIALIASING, RenderingHints.VALUE_ANTIALIAS_OFF);\n            g2.drawLine(cursorX, 0, cursorX, getHeight() - AXIS_HEIGHT);\n            // if near the right side, it's invisible.\n            // so: if on the right half of the (vis)screen, draw on the left side.\n            // draw the label on the right side of the line?  else, left.\n            // is this correct?\n            int viewportX = cursorX - scroller.getHorizontalScrollBar().getValue();\n            int viewportWidth = getParent().getWidth();\n            boolean right = (viewportX < viewportWidth / 2);\n            final int eps = 5;\n            // PERF: memoize me!\n            final int ascent = g2.getFontMetrics().getAscent();\n            String str = yearForPosition(gInfo, cursorX).toString();\n            int x = cursorX;\n            int y = ascent + eps;\n            if (right) {\n                x += eps;\n            } else {\n                int width = g2.getFontMetrics().stringWidth(str);\n                x -= (width + eps);\n            }\n            g2.setRenderingHint(RenderingHints.KEY_ANTIALIASING, RenderingHints.VALUE_ANTIALIAS_ON);\n            g2.drawString(str, x, y);\n        }\n    }\n\n    // location-dependent tooltip\n    //    public String getToolTipText(MouseEvent event) {\n    // -- for sample S, year Y, and S[Y] = V, this should be: \"S\\nY: V\"\n    //       return \"event=\" + event;\n    //    }\n    public void update() {\n        // notification that a preference or the sample list has changed.\n        for (int i = 0; i < graphs.size(); i++) {\n            Graph cg = (Graph) graphs.get(i);\n            boolean newgraph = false;\n            if (cg.getAgent() == null)\n                newgraph = true;\n            // set each graph to have a the default agent; or the density agent.\n            if (cg.graph instanceof DensityGraph)\n                cg.setAgent(agents.acquireDensity());\n            else\n                cg.setAgent(agents.acquireDefault());\n            // assign the new graph a color\n            if (newgraph)\n                cg.setColor(gInfo.screenColors[i % gInfo.screenColors.length].getColor(), gInfo.printerColors[i % gInfo.printerColors.length].getColor());\n        }\n        if (vertaxis != null)\n            vertaxis.setAxisType(agents.acquireDefaultAxisType());\n        revalidate();\n        repaint();\n    }\n\n    //\n    // Scrollable\n    //\n    public int getScrollableBlockIncrement(Rectangle visibleRect, int orientation, int direction) {\n        // orient=vert never happens\n        return visibleRect.width;\n    }\n\n    public int getScrollableUnitIncrement(Rectangle visibleRect, int orientation, int direction) {\n        // orient=vert never happens\n        // one decade (?)\n        return gInfo.getYearWidth() * 10;\n    }\n\n    public Dimension getPreferredScrollableViewportSize() {\n        int screenWidth = Toolkit.getDefaultToolkit().getScreenSize().width;\n        int frames = myFrame.getInsets().left + myFrame.getInsets().right;\n        // actually, this should be the amount of border, but\n        // i don't know to get that reliably\n        // we do now!\n        int width = screenWidth - frames;\n        if (vertaxis != null)\n            width -= Axis.AXIS_WIDTH;\n        return new Dimension(width, 480);\n    }\n\n    public boolean getScrollableTracksViewportHeight() {\n        // never scroll vertically\n        return true;\n    }\n\n    public boolean getScrollableTracksViewportWidth() {\n        return false;\n    }\n\n    public GraphInfo getPrinterGraphInfo() {\n        return gInfo.getPrinter();\n    }\n\n    public Range getRange() {\n        return gInfo.getDrawRange();\n    }\n\n    public Range getGraphingRange() {\n        if (!gInfo.drawGraphNames())\n            return gInfo.getDrawRange();\n        return new Range(gInfo.getEmptyRange().getEnd(), gInfo.getDrawRange().getEnd());\n    }\n\n    public void forceYearWidth(int width) {\n        if (width < 1)\n            width = 1;\n        gInfo.setYearWidth(width);\n        computeRange();\n        setPreferredSize(new Dimension(gInfo.getDrawRange().span() * width, 200));\n        recreateAgent();\n        revalidate();\n    }\n\n    public void forceUnitHeight(int height) {\n        if (height < 1)\n            height = 1;\n        gInfo.set10UnitHeight(height);\n    }\n\n    public int getMaxPixelHeight() {\n        int bottom = getHeight() - GrapherPanel.AXIS_HEIGHT;\n        int maxh = 0;\n        // notification that a preference or the sample list has changed.\n        for (int i = 0; i < graphs.size(); i++) {\n            Graph cg = (Graph) graphs.get(i);\n            int val = cg.getAgent().getYRange(gInfo, cg, bottom);\n            if (val > maxh)\n                maxh = val;\n        }\n        return maxh;\n    }\n}\n",
		"id": "/EvoSuiteBenchmark/35_corina/src/main/java/corina/graph/GrapherPanel_1Test.java",
		"test_prompt": "// GrapherPanel_1Test.java\n// This file is part of Corina.\n//\n// Corina is free software; you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation; either version 2 of the License, or\n// (at your option) any later version.\n//\n// Corina is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Corina; if not, write to the Free Software\n// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n//\n// Copyright 2001 Ken Harris <kbh7@cornell.edu>\n//\npackage corina.graph;\n\nimport java.awt.BasicStroke;\nimport java.awt.Color;\nimport java.awt.Container;\nimport java.awt.Cursor;\nimport java.awt.Dimension;\nimport java.awt.EventQueue;\nimport java.awt.Graphics;\nimport java.awt.Graphics2D;\nimport java.awt.Insets;\nimport java.awt.Stroke;\nimport java.awt.Image;\nimport java.awt.Point;\nimport java.awt.Rectangle;\nimport java.awt.RenderingHints;\nimport java.awt.Toolkit;\nimport java.awt.Font;\nimport java.awt.FontMetrics;\nimport java.awt.font.*;\nimport java.awt.event.ActionEvent;\nimport java.awt.event.ActionListener;\nimport java.awt.event.AdjustmentEvent;\nimport java.awt.event.AdjustmentListener;\nimport java.awt.event.KeyEvent;\nimport java.awt.event.KeyListener;\nimport java.awt.event.MouseEvent;\nimport java.awt.event.MouseListener;\nimport java.awt.event.MouseMotionListener;\nimport java.awt.image.BufferedImage;\nimport java.io.File;\nimport java.io.FileOutputStream;\nimport java.io.IOException;\nimport java.util.List;\nimport javax.imageio.ImageIO;\nimport javax.swing.JFileChooser;\nimport javax.swing.JFrame;\nimport javax.swing.JMenuItem;\nimport javax.swing.JPanel;\nimport javax.swing.JPopupMenu;\nimport javax.swing.JScrollBar;\nimport javax.swing.JScrollPane;\nimport javax.swing.ProgressMonitor;\nimport javax.swing.RepaintManager;\nimport javax.swing.Scrollable;\nimport javax.swing.filechooser.FileFilter;\nimport corina.Build;\nimport corina.Range;\nimport corina.Sample;\nimport corina.Year;\nimport corina.core.App;\nimport corina.gui.Bug;\nimport corina.gui.XFrame;\nimport corina.ui.Alert;\nimport corina.util.ColorUtils;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link GrapherPanel}.\n* It contains ten unit test cases for the {@link GrapherPanel#isManagingFocus()} method.\n*/\nclass GrapherPanel_1Test {"
	},
	{
		"original_code": "// Graph.java\n//\n// This file is part of Corina.\n//\n// Corina is free software; you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation; either version 2 of the License, or\n// (at your option) any later version.\n//\n// Corina is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Corina; if not, write to the Free Software\n// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n//\n// Copyright 2001 Ken Harris <kbh7@cornell.edu>\n//\npackage corina.graph;\n\nimport corina.Year;\nimport corina.Range;\nimport corina.Sample;\nimport java.util.List;\nimport java.awt.Color;\nimport java.awt.Graphics2D;\n\n/*\n  the purpose of this class is:\n  - group together a Graphable with its properties (offsets, scale, etc.)\n  - (this makes drag-n-drop *much* easier to implement)\n  - allows adding other properties without much work, like flip-vertical for skeleton plots\n  - moving towards abstract DrawingAgent -> (StandardPlot, SkeletonPlot, BargraphPlot)\n  - DrawingAgents will make printing nearly trivial\n\n  for DP addicts, i believe it's a decorator.\n*/\npublic class Graph {\n\n    // should these members be public?  or private, with getters and\n    // setters?  that way it could extend Observable, which would be\n    // very cool.  [what did i mean by that?]\n    // the thing-to-graph\n    public Graphable graph;\n\n    // offsets\n    public int xoffset = 0, yoffset = 0;\n\n    // scaling\n    public float scale = 1.0f;\n\n    /**\n     * Create a graph from a Graphable object.\n     *        @param g the Graphable object\n     */\n    public Graph(Graphable g) {\n        // copy graph\n        graph = g;\n        // default scale\n        scale = g.getScale();\n        // save name...\n        graphName = g.toString();\n    }\n\n    // an arbitrary List of Numbers, starting at a Year.  (used for graphing density of masters.)\n    public Graph(List l, Year y, String n) {\n        // create graph\n        graph = new DensityGraph(l, y, n);\n        // default scale\n        scale = graph.getScale();\n        // save name...\n        graphName = graph.toString();\n    }\n\n    // meaning, 25%, but (fixme) i should just say that\n    private final static float SCALE = 1.25f;\n\n    public void bigger() {\n        scale *= SCALE;\n    }\n\n    public void smaller() {\n        scale /= SCALE;\n    }\n\n    public void left() {\n        xoffset--;\n    }\n\n    public void right() {\n        xoffset++;\n    }\n\n    // why is slide(int), but left()/right()?  something's funny here, methinks.\n    public void slide(int pixels) {\n        yoffset += pixels;\n    }\n\n    // as \"<graph scale=... xoffset=... yoffset=...>filename</graph>\n    public String toXML() {\n        // can't save indexes or other non-samples, yet\n        if (!(graph instanceof Sample))\n            // what to do?\n            return \"<!-- not a sample (\" + graph + \") -->\";\n        // filename\n        String filename = (String) ((Sample) graph).meta.get(\"filename\");\n        // crunch together an XML tag\n        return \"<graph scale=\\\"\" + scale + \"\\\" \" + \"xoffset=\\\"\" + xoffset + \"\\\" \" + \"yoffset=\\\"\" + yoffset + \"\\\">\" + filename + \"</graph>\";\n    }\n\n    // (graph is an interface, not an abstract class, so it can't be\n    // moved any higher.) -- not true any longer, but this still seems correct.\n    public Range getRange() {\n        return new Range(graph.getStart().add(xoffset), graph.getData().size());\n    }\n\n    // this method smells funny to me now.  how's it used?\n    // the following data is internal to the grapher\n    // it is used entirely to maintain visual information\n    private Color mainColor;\n\n    private Color printerColor;\n\n    public void setColor(Color gcolor, Color pcolor) {\n        mainColor = gcolor;\n        printerColor = pcolor;\n    }\n\n    public void setColor(Color c, boolean isPrinting) {\n        if (isPrinting)\n            printerColor = c;\n        else\n            mainColor = c;\n    }\n\n    public Color getColor(boolean isPrinting) {\n        if (isPrinting)\n            return printerColor;\n        return mainColor;\n    }\n\n    // default line thickness\n    int lineThickness = 1;\n\n    int printerlineThickness = 1;\n\n    public void setThickness(int thickness, boolean isPrinting) {\n        if (isPrinting)\n            printerlineThickness = thickness;\n        else\n            lineThickness = thickness;\n    }\n\n    public int getThickness(boolean isPrinting) {\n        if (isPrinting) {\n            return printerlineThickness;\n        }\n        return lineThickness;\n    }\n\n    // displayed name...\n    private String graphName;\n\n    public String getGraphName() {\n        return graphName;\n    }\n\n    public void setGraphName(String name) {\n        graphName = name;\n    }\n\n    private CorinaGraphPlotter graphingAgent;\n\n    public void setAgent(CorinaGraphPlotter agent) {\n        graphingAgent = agent;\n    }\n\n    public CorinaGraphPlotter getAgent() {\n        return graphingAgent;\n    }\n\n    public void draw(GraphInfo gInfo, Graphics2D g2, int bottom, int thickness, int xscroll) {\n        graphingAgent.draw(gInfo, g2, bottom, this, thickness, xscroll);\n    }\n}\n",
		"id": "/EvoSuiteBenchmark/35_corina/src/main/java/corina/graph/Graph.java",
		"test_prompt": "// GraphTest.java\n// This file is part of Corina.\n//\n// Corina is free software; you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation; either version 2 of the License, or\n// (at your option) any later version.\n//\n// Corina is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Corina; if not, write to the Free Software\n// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n//\n// Copyright 2001 Ken Harris <kbh7@cornell.edu>\n//\npackage corina.graph;\n\nimport corina.Year;\nimport corina.Range;\nimport corina.Sample;\nimport java.util.List;\nimport java.awt.Color;\nimport java.awt.Graphics2D;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link Graph}.\n* It contains ten unit test cases for the {@link Graph#toXML()} method.\n*/\nclass GraphTest {"
	},
	{
		"original_code": "// PlotAgents.java\n/**\n */\npackage corina.graph;\n\nimport corina.core.App;\n\n/**\n * @author Lucas Madar\n */\npublic class PlotAgents {\n\n    /*\n\t * \n\t */\n    public PlotAgents() {\n        // get the saved default agent name, or default to \"StandardPlot\"\n        String defAgentName = App.prefs.getPref(\"corina.graph.defaultagent\", \"corina.graph.StandardPlot\");\n        for (int i = 0; i < plotAgentInstance.length; i++) {\n            // iterate through the plot agents, and if it equals the name of the\n            // default agent name, set it.\n            if (plotAgentInstance[i].getClass().getName().equals(defAgentName)) {\n                defPlotAgent = i;\n                break;\n            }\n        }\n    }\n\n    private final String[] plotAgentName = { \"Standard Plot\", \"Semi-Log Plot\", \"Toothed Plot\" };\n\n    private final int[] plotAgentAxisType = { Axis.AXIS_STANDARD, Axis.AXIS_LOG, Axis.AXIS_STANDARD };\n\n    private CorinaGraphPlotter[] plotAgentInstance = { new StandardPlot(), new SemilogPlot(), new DensityPlot() };\n\n    // if we don't have a match (prefs are munged?), defeault to standard plot.\n    private int defPlotAgent = 0;\n\n    // this is the index in to the array above of plot agents for density plot.\n    // perhaps we could 'auto-find' this, but it makes more sense at this point\n    // to kludge it in.\n    private final int densityPlotAgent = 2;\n\n    // methods to modify agents. used by the graph window.\n    public String[] getAgents() {\n        return plotAgentName;\n    }\n\n    public boolean isDefault(int idx) {\n        if (idx == defPlotAgent)\n            return true;\n        return false;\n    }\n\n    // sets the agent to the specified number\n    public void setAgent(int idx) {\n        defPlotAgent = idx;\n        App.prefs.setPref(\"corina.graph.defaultagent\", plotAgentInstance[idx].getClass().getName());\n    }\n\n    // methods for getting agents themselves.\n    // used by the grapher panel\n    public CorinaGraphPlotter acquireAgent(int idx) {\n        return plotAgentInstance[idx];\n    }\n\n    public CorinaGraphPlotter acquireDefault() {\n        return plotAgentInstance[defPlotAgent];\n    }\n\n    public int acquireDefaultAxisType() {\n        return plotAgentAxisType[defPlotAgent];\n    }\n\n    public CorinaGraphPlotter acquireDensity() {\n        return plotAgentInstance[densityPlotAgent];\n    }\n}\n",
		"id": "/EvoSuiteBenchmark/35_corina/src/main/java/corina/graph/PlotAgents_0Test.java",
		"test_prompt": "// PlotAgents_0Test.java\npackage corina.graph;\n\nimport corina.core.App;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link PlotAgents}.\n* It contains ten unit test cases for the {@link PlotAgents#isDefault(int)} method.\n*/\nclass PlotAgents_0Test {"
	},
	{
		"original_code": "// PlotAgents.java\n/**\n */\npackage corina.graph;\n\nimport corina.core.App;\n\n/**\n * @author Lucas Madar\n */\npublic class PlotAgents {\n\n    /*\n\t * \n\t */\n    public PlotAgents() {\n        // get the saved default agent name, or default to \"StandardPlot\"\n        String defAgentName = App.prefs.getPref(\"corina.graph.defaultagent\", \"corina.graph.StandardPlot\");\n        for (int i = 0; i < plotAgentInstance.length; i++) {\n            // iterate through the plot agents, and if it equals the name of the\n            // default agent name, set it.\n            if (plotAgentInstance[i].getClass().getName().equals(defAgentName)) {\n                defPlotAgent = i;\n                break;\n            }\n        }\n    }\n\n    private final String[] plotAgentName = { \"Standard Plot\", \"Semi-Log Plot\", \"Toothed Plot\" };\n\n    private final int[] plotAgentAxisType = { Axis.AXIS_STANDARD, Axis.AXIS_LOG, Axis.AXIS_STANDARD };\n\n    private CorinaGraphPlotter[] plotAgentInstance = { new StandardPlot(), new SemilogPlot(), new DensityPlot() };\n\n    // if we don't have a match (prefs are munged?), defeault to standard plot.\n    private int defPlotAgent = 0;\n\n    // this is the index in to the array above of plot agents for density plot.\n    // perhaps we could 'auto-find' this, but it makes more sense at this point\n    // to kludge it in.\n    private final int densityPlotAgent = 2;\n\n    // methods to modify agents. used by the graph window.\n    public String[] getAgents() {\n        return plotAgentName;\n    }\n\n    public boolean isDefault(int idx) {\n        if (idx == defPlotAgent)\n            return true;\n        return false;\n    }\n\n    // sets the agent to the specified number\n    public void setAgent(int idx) {\n        defPlotAgent = idx;\n        App.prefs.setPref(\"corina.graph.defaultagent\", plotAgentInstance[idx].getClass().getName());\n    }\n\n    // methods for getting agents themselves.\n    // used by the grapher panel\n    public CorinaGraphPlotter acquireAgent(int idx) {\n        return plotAgentInstance[idx];\n    }\n\n    public CorinaGraphPlotter acquireDefault() {\n        return plotAgentInstance[defPlotAgent];\n    }\n\n    public int acquireDefaultAxisType() {\n        return plotAgentAxisType[defPlotAgent];\n    }\n\n    public CorinaGraphPlotter acquireDensity() {\n        return plotAgentInstance[densityPlotAgent];\n    }\n}\n",
		"id": "/EvoSuiteBenchmark/35_corina/src/main/java/corina/graph/PlotAgents_1Test.java",
		"test_prompt": "// PlotAgents_1Test.java\npackage corina.graph;\n\nimport corina.core.App;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link PlotAgents}.\n* It contains ten unit test cases for the {@link PlotAgents#acquireAgent(int)} method.\n*/\nclass PlotAgents_1Test {"
	},
	{
		"original_code": "// PlotAgents.java\n/**\n */\npackage corina.graph;\n\nimport corina.core.App;\n\n/**\n * @author Lucas Madar\n */\npublic class PlotAgents {\n\n    /*\n\t * \n\t */\n    public PlotAgents() {\n        // get the saved default agent name, or default to \"StandardPlot\"\n        String defAgentName = App.prefs.getPref(\"corina.graph.defaultagent\", \"corina.graph.StandardPlot\");\n        for (int i = 0; i < plotAgentInstance.length; i++) {\n            // iterate through the plot agents, and if it equals the name of the\n            // default agent name, set it.\n            if (plotAgentInstance[i].getClass().getName().equals(defAgentName)) {\n                defPlotAgent = i;\n                break;\n            }\n        }\n    }\n\n    private final String[] plotAgentName = { \"Standard Plot\", \"Semi-Log Plot\", \"Toothed Plot\" };\n\n    private final int[] plotAgentAxisType = { Axis.AXIS_STANDARD, Axis.AXIS_LOG, Axis.AXIS_STANDARD };\n\n    private CorinaGraphPlotter[] plotAgentInstance = { new StandardPlot(), new SemilogPlot(), new DensityPlot() };\n\n    // if we don't have a match (prefs are munged?), defeault to standard plot.\n    private int defPlotAgent = 0;\n\n    // this is the index in to the array above of plot agents for density plot.\n    // perhaps we could 'auto-find' this, but it makes more sense at this point\n    // to kludge it in.\n    private final int densityPlotAgent = 2;\n\n    // methods to modify agents. used by the graph window.\n    public String[] getAgents() {\n        return plotAgentName;\n    }\n\n    public boolean isDefault(int idx) {\n        if (idx == defPlotAgent)\n            return true;\n        return false;\n    }\n\n    // sets the agent to the specified number\n    public void setAgent(int idx) {\n        defPlotAgent = idx;\n        App.prefs.setPref(\"corina.graph.defaultagent\", plotAgentInstance[idx].getClass().getName());\n    }\n\n    // methods for getting agents themselves.\n    // used by the grapher panel\n    public CorinaGraphPlotter acquireAgent(int idx) {\n        return plotAgentInstance[idx];\n    }\n\n    public CorinaGraphPlotter acquireDefault() {\n        return plotAgentInstance[defPlotAgent];\n    }\n\n    public int acquireDefaultAxisType() {\n        return plotAgentAxisType[defPlotAgent];\n    }\n\n    public CorinaGraphPlotter acquireDensity() {\n        return plotAgentInstance[densityPlotAgent];\n    }\n}\n",
		"id": "/EvoSuiteBenchmark/35_corina/src/main/java/corina/graph/PlotAgents_2Test.java",
		"test_prompt": "// PlotAgents_2Test.java\npackage corina.graph;\n\nimport corina.core.App;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link PlotAgents}.\n* It contains ten unit test cases for the {@link PlotAgents#acquireDefault()} method.\n*/\nclass PlotAgents_2Test {"
	},
	{
		"original_code": "// PlotAgents.java\n/**\n */\npackage corina.graph;\n\nimport corina.core.App;\n\n/**\n * @author Lucas Madar\n */\npublic class PlotAgents {\n\n    /*\n\t * \n\t */\n    public PlotAgents() {\n        // get the saved default agent name, or default to \"StandardPlot\"\n        String defAgentName = App.prefs.getPref(\"corina.graph.defaultagent\", \"corina.graph.StandardPlot\");\n        for (int i = 0; i < plotAgentInstance.length; i++) {\n            // iterate through the plot agents, and if it equals the name of the\n            // default agent name, set it.\n            if (plotAgentInstance[i].getClass().getName().equals(defAgentName)) {\n                defPlotAgent = i;\n                break;\n            }\n        }\n    }\n\n    private final String[] plotAgentName = { \"Standard Plot\", \"Semi-Log Plot\", \"Toothed Plot\" };\n\n    private final int[] plotAgentAxisType = { Axis.AXIS_STANDARD, Axis.AXIS_LOG, Axis.AXIS_STANDARD };\n\n    private CorinaGraphPlotter[] plotAgentInstance = { new StandardPlot(), new SemilogPlot(), new DensityPlot() };\n\n    // if we don't have a match (prefs are munged?), defeault to standard plot.\n    private int defPlotAgent = 0;\n\n    // this is the index in to the array above of plot agents for density plot.\n    // perhaps we could 'auto-find' this, but it makes more sense at this point\n    // to kludge it in.\n    private final int densityPlotAgent = 2;\n\n    // methods to modify agents. used by the graph window.\n    public String[] getAgents() {\n        return plotAgentName;\n    }\n\n    public boolean isDefault(int idx) {\n        if (idx == defPlotAgent)\n            return true;\n        return false;\n    }\n\n    // sets the agent to the specified number\n    public void setAgent(int idx) {\n        defPlotAgent = idx;\n        App.prefs.setPref(\"corina.graph.defaultagent\", plotAgentInstance[idx].getClass().getName());\n    }\n\n    // methods for getting agents themselves.\n    // used by the grapher panel\n    public CorinaGraphPlotter acquireAgent(int idx) {\n        return plotAgentInstance[idx];\n    }\n\n    public CorinaGraphPlotter acquireDefault() {\n        return plotAgentInstance[defPlotAgent];\n    }\n\n    public int acquireDefaultAxisType() {\n        return plotAgentAxisType[defPlotAgent];\n    }\n\n    public CorinaGraphPlotter acquireDensity() {\n        return plotAgentInstance[densityPlotAgent];\n    }\n}\n",
		"id": "/EvoSuiteBenchmark/35_corina/src/main/java/corina/graph/PlotAgents_3Test.java",
		"test_prompt": "// PlotAgents_3Test.java\npackage corina.graph;\n\nimport corina.core.App;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link PlotAgents}.\n* It contains ten unit test cases for the {@link PlotAgents#acquireDefaultAxisType()} method.\n*/\nclass PlotAgents_3Test {"
	},
	{
		"original_code": "// PlotAgents.java\n/**\n */\npackage corina.graph;\n\nimport corina.core.App;\n\n/**\n * @author Lucas Madar\n */\npublic class PlotAgents {\n\n    /*\n\t * \n\t */\n    public PlotAgents() {\n        // get the saved default agent name, or default to \"StandardPlot\"\n        String defAgentName = App.prefs.getPref(\"corina.graph.defaultagent\", \"corina.graph.StandardPlot\");\n        for (int i = 0; i < plotAgentInstance.length; i++) {\n            // iterate through the plot agents, and if it equals the name of the\n            // default agent name, set it.\n            if (plotAgentInstance[i].getClass().getName().equals(defAgentName)) {\n                defPlotAgent = i;\n                break;\n            }\n        }\n    }\n\n    private final String[] plotAgentName = { \"Standard Plot\", \"Semi-Log Plot\", \"Toothed Plot\" };\n\n    private final int[] plotAgentAxisType = { Axis.AXIS_STANDARD, Axis.AXIS_LOG, Axis.AXIS_STANDARD };\n\n    private CorinaGraphPlotter[] plotAgentInstance = { new StandardPlot(), new SemilogPlot(), new DensityPlot() };\n\n    // if we don't have a match (prefs are munged?), defeault to standard plot.\n    private int defPlotAgent = 0;\n\n    // this is the index in to the array above of plot agents for density plot.\n    // perhaps we could 'auto-find' this, but it makes more sense at this point\n    // to kludge it in.\n    private final int densityPlotAgent = 2;\n\n    // methods to modify agents. used by the graph window.\n    public String[] getAgents() {\n        return plotAgentName;\n    }\n\n    public boolean isDefault(int idx) {\n        if (idx == defPlotAgent)\n            return true;\n        return false;\n    }\n\n    // sets the agent to the specified number\n    public void setAgent(int idx) {\n        defPlotAgent = idx;\n        App.prefs.setPref(\"corina.graph.defaultagent\", plotAgentInstance[idx].getClass().getName());\n    }\n\n    // methods for getting agents themselves.\n    // used by the grapher panel\n    public CorinaGraphPlotter acquireAgent(int idx) {\n        return plotAgentInstance[idx];\n    }\n\n    public CorinaGraphPlotter acquireDefault() {\n        return plotAgentInstance[defPlotAgent];\n    }\n\n    public int acquireDefaultAxisType() {\n        return plotAgentAxisType[defPlotAgent];\n    }\n\n    public CorinaGraphPlotter acquireDensity() {\n        return plotAgentInstance[densityPlotAgent];\n    }\n}\n",
		"id": "/EvoSuiteBenchmark/35_corina/src/main/java/corina/graph/PlotAgents_4Test.java",
		"test_prompt": "// PlotAgents_4Test.java\npackage corina.graph;\n\nimport corina.core.App;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link PlotAgents}.\n* It contains ten unit test cases for the {@link PlotAgents#acquireDensity()} method.\n*/\nclass PlotAgents_4Test {"
	},
	{
		"original_code": "// LoadSave.java\n//\n// This file is part of Corina.\n//\n// Corina is free software; you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation; either version 2 of the License, or\n// (at your option) any later version.\n//\n// Corina is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Corina; if not, write to the Free Software\n// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n//\n// Copyright 2001 Ken Harris <kbh7@cornell.edu>\n//\npackage corina.graph;\n\nimport corina.Sample;\nimport corina.formats.WrongFiletypeException;\nimport java.io.BufferedWriter;\nimport java.io.FileWriter;\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\nimport java.util.List;\nimport java.util.ArrayList;\nimport org.xml.sax.Attributes;\nimport org.xml.sax.XMLReader;\nimport org.xml.sax.InputSource;\nimport org.xml.sax.SAXException;\nimport org.xml.sax.helpers.XMLReaderFactory;\nimport org.xml.sax.helpers.DefaultHandler;\n\n// methods for loading and saving a bunch of Graphs\npublic class LoadSave {\n\n    // save the list of graphs under a given name\n    public static void save(String filename, List graphs) throws IOException {\n        // open for writing\n        BufferedWriter w = new BufferedWriter(new FileWriter(filename));\n        try {\n            // XML header\n            w.write(\"<?xml version=\\\"1.0\\\"?>\");\n            w.newLine();\n            w.newLine();\n            // begin graph\n            w.write(\"<graphs>\");\n            w.newLine();\n            w.newLine();\n            // each graph\n            for (int i = 0; i < graphs.size(); i++) {\n                w.write(\"  \" + ((Graph) graphs.get(i)).toXML());\n                w.newLine();\n            }\n            w.newLine();\n            // end graph\n            w.write(\"</graphs>\");\n            w.newLine();\n        } finally {\n            try {\n                // close\n                w.close();\n            } catch (IOException ioe) {\n                ioe.printStackTrace();\n            }\n        }\n    }\n\n    // try to load a plot from disk\n    // (synch because temp samples would get overwritten)\n    public static synchronized List load(String filename) throws IOException {\n        // this is load(String) from Grid.java\n        // REFACTOR: i should be able to load an xml file in one line.  dunno why\n        // sax doesn't let me do that, but i should write a wrapper for this crap.\n        // something like: try { my_blob = XML.load(\"filename\", SomeHandler.class); } catch (SE) { ... }\n        try {\n            // make a new XML parser\n            XMLReader xr = XMLReaderFactory.createXMLReader();\n            // ... configure it to use a my SampleHandler ...\n            GraphHandler loader = new GraphHandler();\n            xr.setContentHandler(loader);\n            xr.setErrorHandler(loader);\n            // ... and feed it the file\n            BufferedReader r = new BufferedReader(new FileReader(filename));\n            xr.parse(new InputSource(r));\n        } catch (Exception e) {\n            // (SAXException se) {\n            // if (se.getMessage().equals(\"Not a graph!\"))\n            throw new WrongFiletypeException();\n            // else\n            // throw new IOException(\"SAX exception: \" + se.getMessage());\n        }\n        return samples;\n    }\n\n    // temp storage\n    private static List samples;\n\n    // sax2 handler for load()\n    private static class GraphHandler extends DefaultHandler {\n\n        // state\n        float scale;\n\n        int xoffset, yoffset;\n\n        String filename;\n\n        public void startDocument() {\n            // start a fresh list\n            samples = new ArrayList();\n        }\n\n        public void startElement(String uri, String name, String qName, Attributes atts) throws SAXException {\n            // \"graphs\" is toplevel; ignore it\n            if (name.equals(\"graphs\"))\n                return;\n            // \"graph\" is a graph -- get scale/x/y\n            if (name.equals(\"graph\")) {\n                scale = Float.parseFloat(atts.getValue(\"scale\"));\n                xoffset = Integer.parseInt(atts.getValue(\"xoffset\"));\n                yoffset = Integer.parseInt(atts.getValue(\"yoffset\"));\n            }\n        }\n\n        public void characters(char[] ch, int start, int length) {\n            // stringify\n            filename = new String(ch, start, length).trim();\n        }\n\n        public void endElement(String uri, String name, String qName) {\n            // it's a <graph/>, right?\n            if (!name.equals(\"graph\"))\n                return;\n            try {\n                // construct a Graph\n                Graph g = new Graph(new Sample(filename));\n                g.scale = scale;\n                g.xoffset = xoffset;\n                g.yoffset = yoffset;\n                // add to the list\n                samples.add(g);\n            } catch (IOException ioe) {\n                // can't load?  ignore for now.  FIXME: report error\n            }\n        }\n    }\n}\n",
		"id": "/EvoSuiteBenchmark/35_corina/src/main/java/corina/graph/LoadSave.java",
		"test_prompt": "// LoadSaveTest.java\n// This file is part of Corina.\n//\n// Corina is free software; you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation; either version 2 of the License, or\n// (at your option) any later version.\n//\n// Corina is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Corina; if not, write to the Free Software\n// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n//\n// Copyright 2001 Ken Harris <kbh7@cornell.edu>\n//\npackage corina.graph;\n\nimport corina.Sample;\nimport corina.formats.WrongFiletypeException;\nimport java.io.BufferedWriter;\nimport java.io.FileWriter;\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\nimport java.util.List;\nimport java.util.ArrayList;\nimport org.xml.sax.Attributes;\nimport org.xml.sax.XMLReader;\nimport org.xml.sax.InputSource;\nimport org.xml.sax.SAXException;\nimport org.xml.sax.helpers.XMLReaderFactory;\nimport org.xml.sax.helpers.DefaultHandler;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link LoadSave}.\n* It contains ten unit test cases for the {@link LoadSave#load(String)} method.\n*/\nclass LoadSaveTest {"
	},
	{
		"original_code": "// GraphWindow.java\n//\n// This file is part of Corina.\n//\n// Corina is free software; you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation; either version 2 of the License, or\n// (at your option) any later version.\n//\n// Corina is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Corina; if not, write to the Free Software\n// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n//\n// Copyright 2001 Ken Harris <kbh7@cornell.edu>\n//\npackage corina.graph;\n\nimport java.awt.Color;\nimport java.awt.Graphics;\nimport java.awt.Graphics2D;\nimport java.awt.Toolkit;\nimport java.awt.datatransfer.Clipboard;\nimport java.awt.datatransfer.ClipboardOwner;\nimport java.awt.datatransfer.DataFlavor;\nimport java.awt.datatransfer.Transferable;\nimport java.awt.datatransfer.UnsupportedFlavorException;\nimport java.awt.dnd.DropTarget;\nimport java.awt.dnd.DropTargetListener;\nimport java.awt.event.MouseEvent;\nimport java.awt.print.PageFormat;\nimport java.awt.print.Printable;\nimport java.io.IOException;\nimport java.io.StringWriter;\nimport java.io.Writer;\nimport java.util.ArrayList;\nimport java.util.List;\nimport javax.swing.JLabel;\nimport javax.swing.JMenuBar;\nimport javax.swing.JScrollPane;\nimport javax.swing.ScrollPaneConstants;\nimport javax.swing.JPanel;\nimport java.awt.BorderLayout;\nimport org.apache.batik.dom.GenericDOMImplementation;\nimport org.apache.batik.svggen.SVGGraphics2D;\nimport org.w3c.dom.DOMImplementation;\nimport org.w3c.dom.Document;\nimport corina.Element;\nimport corina.Range;\nimport corina.Sample;\nimport corina.SampleEvent;\nimport corina.SampleListener;\nimport corina.Year;\nimport corina.core.App;\nimport corina.cross.Cross;\nimport corina.formats.WrongFiletypeException;\nimport corina.gui.Bug;\nimport corina.gui.FileDialog;\nimport corina.gui.SaveableDocument;\nimport corina.gui.UserCancelledException;\nimport corina.gui.XFrame;\nimport corina.gui.menus.FileMenu;\nimport corina.gui.menus.HelpMenu;\nimport corina.gui.menus.WindowMenu;\nimport corina.index.Index;\nimport corina.prefs.PrefsEvent;\nimport corina.prefs.PrefsListener;\nimport corina.ui.Alert;\nimport corina.ui.I18n;\nimport corina.util.Overwrite;\nimport corina.util.PopupListener;\n\n/**\n * A graph. It graphs any number of samples (or any Graphable) and allows the\n * user to scroll, slide the samples up/down/left/right, and scale them\n * vertically.\n *\n * @see Graphable\n *\n * @author Ken Harris &lt;kbh7 <i style=\"color: gray\">at</i> cornell <i\n *         style=\"color: gray\">dot</i> edu&gt;\n * @version $Id: GraphWindow.java,v 1.17 2006/07/25 17:45:07 lucasmo Exp $\n */\n// TODO:\n// -- clean up .* imports: swing, awt.event\n// -- extract some parts: svg exporting, printing?, png exporting?\n// -- extract squish? (all 3?)\n// -- make this use either GrapherPanel or BargraphPanel\n// ---- rename GrapherPanel to GraphPanel\n// ---- extract BargraphPanel from BargraphFrame\n// -- add view->as Graph, as Bargraph, as Skeleton Plot options\n// -- saving should save the same format for any of these, with a \"type=\"\n// -- printing should print the current view (ask the view to print it)\n// -- if you drag onto the graph panel (while scrolling), don't draw cursor\n// -- \"mark all drops\" feature\n// -- put \"-1\" on x-axis, too?\n// -- mark -1 and +1 with longer ticks\npublic class GraphWindow extends XFrame implements SampleListener, SaveableDocument, // DISABLED until printing works better:\n// PrintableDocument,\nPrintable, PrefsListener {\n\n    // SampleListener\n    private void update(Sample s) {\n        // data/format changed, need to recheck getScale();\n        // BUG?: if data changed, but not format, won't this be unnecesary at\n        // best, wrong at worst?\n        // REFACTOR: why isn't this a 1-liner?\n        // (reset-scale (find :key #'graph s plot.graphs))\n        for (int i = 0; i < plot.graphs.size(); i++) {\n            Graph g = (Graph) plot.graphs.get(i);\n            if (g.graph == s) {\n                g.scale = g.graph.getScale();\n                break;\n            }\n        }\n        // repaint\n        repaint();\n    }\n\n    public void sampleRedated(SampleEvent e) {\n        /* FIXME: handle this */\n        update((Sample) e.getSource());\n        // TODO: update title, too?\n    }\n\n    public void sampleDataChanged(SampleEvent e) {\n        update((Sample) e.getSource());\n    }\n\n    public void sampleMetadataChanged(SampleEvent e) {\n        // title might have changed\n        plot.updateTitle();\n        // TODO: only if field=title?\n        // TODO: make this: only if field==format!\n        update((Sample) e.getSource());\n    }\n\n    public void sampleElementsChanged(SampleEvent e) {\n    }\n\n    // gui\n    // the plot area itself\n    public GrapherPanel plot;\n\n    public PlotAgents agents;\n\n    public GraphElementsPanel elemPanel;\n\n    // scroller enclosing the plot\n    private JScrollPane scroller;\n\n    // data\n    // of Graph\n    private List samples;\n\n    // adjust vertical spacing\n    public void squeezeTogether() {\n        for (int i = 0; i < samples.size(); i++) ((Graph) samples.get(i)).yoffset = 0;\n        repaint();\n    }\n\n    public void spreadOut(int units) {\n        for (int i = 0; i < samples.size(); i++) ((Graph) samples.get(i)).yoffset = i * units;\n        repaint();\n    }\n\n    public void halveScale() {\n        for (int i = 0; i < samples.size(); i++) {\n            Graph g = (Graph) samples.get(i);\n            g.scale /= 2;\n        }\n        repaint();\n    }\n\n    public void doubleScale() {\n        for (int i = 0; i < samples.size(); i++) {\n            Graph g = (Graph) samples.get(i);\n            g.scale *= 2;\n        }\n        repaint();\n    }\n\n    public void resetScaling() {\n        for (int i = 0; i < samples.size(); i++) {\n            Graph g = (Graph) samples.get(i);\n            g.scale = g.graph.getScale();\n        }\n        repaint();\n    }\n\n    public void scaleToFitWidth() {\n        int viewportSize = scroller.getWidth();\n        int nYears = plot.getGraphingRange().span() + 2;\n        // viewportSize is the number of pixels.\n        // nyears =\n        int ppy = viewportSize / nYears;\n        plot.forceYearWidth(ppy);\n        repaint();\n        scrollTo(plot.getGraphingRange().getStart());\n    }\n\n    public void scaleToFitHeight() {\n        int bottom = plot.getHeight() - GrapherPanel.AXIS_HEIGHT;\n        int maxheight = plot.getMaxPixelHeight();\n        int uph = (int) (10.0 * bottom / maxheight);\n        plot.forceUnitHeight(uph);\n        repaint();\n    }\n\n    public void squishTogether() {\n        // squish together samples in visible window\n        // BUG: assumes sample[current] is visible.\n        // first, set samples[current] = 0\n        ((Graph) samples.get(plot.current)).yoffset = 0;\n        // compute viewport range\n        // REFACTOR: write a getYearForPoint() method, and call that on both\n        // ends of the visible JViewPane\n        Year viewportLeft = plot.getRange().getStart().add(scroller.getHorizontalScrollBar().getValue() / plot.getYearWidth());\n        int viewportSize = scroller.getWidth() / plot.getYearWidth();\n        Range viewport = new Range(viewportLeft, viewportSize);\n        // idea: emphasize middle 50% of viewport\n        // for each other graph, minimize chi^2 (chi) in viewport\n        for (int i = 0; i < samples.size(); i++) {\n            // (skip current)\n            if (i == plot.current)\n                continue;\n            // make sure it's there at all, otherwise, don't bother.\n            // intersect(viewport, graph[i], graph[current])\n            Range range = ((Graph) samples.get(i)).getRange();\n            Range overlap = range.intersection(viewport);\n            overlap = overlap.intersection(((Graph) samples.get(plot.current)).getRange());\n            if (overlap.span() == 0)\n                continue;\n            // now, compute mean of sample[current][y] - sample[i][y]\n            List data = ((Graph) samples.get(i)).graph.getData();\n            // index into\n            int j = overlap.getStart().diff(range.getStart());\n            // data[i]\n            double dataScale = ((Graph) samples.get(i)).scale;\n            List base = ((Graph) samples.get(plot.current)).graph.getData();\n            int k = overlap.getStart().diff(// graph.getStart());\n            ((Graph) samples.get(plot.current)).getRange().getStart());\n            // //\n            // index\n            // into\n            // base=data[plot.current]\n            double baseScale = ((Graph) samples.get(plot.current)).scale;\n            double mean = 0.0;\n            for (Year y = overlap.getStart(); y.compareTo(overlap.getEnd()) <= 0; y = y.add(1)) {\n                mean += ((Number) data.get(j++)).doubleValue() * dataScale - ((Number) base.get(k++)).doubleValue() * baseScale;\n            }\n            mean /= overlap.span();\n            // make -mean its new offset\n            ((Graph) samples.get(i)).yoffset = (int) -mean;\n        }\n        // make the lowest one have yoffset=0 now\n        int min = ((Graph) samples.get(0)).yoffset;\n        for (int i = 1; i < samples.size(); i++) min = Math.min(min, ((Graph) samples.get(i)).yoffset);\n        for (int i = 0; i < samples.size(); i++) ((Graph) samples.get(i)).yoffset -= min;\n        // repaint\n        repaint();\n    }\n\n    // add a new sample\n    public void add(Sample s) {\n        // doesn't get next yoffset, is that ok?\n        samples.add(new Graph(s));\n        // (yeah, sure)\n        plot.update();\n        // be careful with the elements panel, too...\n        elemPanel.loadSamples(samples);\n        elemPanel.setSelectedIndex(plot.current);\n    }\n\n    // add a List of ELEMENTS\n    public void add(List ns) {\n        // samples\n        boolean problem = false;\n        for (int i = 0; i < ns.size(); i++) {\n            Element e = (Element) ns.get(i);\n            if (// skip inactive\n            !e.isActive())\n                continue;\n            try {\n                Sample s = e.load();\n                samples.add(new Graph(s));\n                s.addSampleListener(this);\n            } catch (IOException ioe) {\n                // ick.\n                problem = true;\n            }\n        }\n        // problem?\n        if (problem) {\n            Alert.error(\"Error loading sample(s)\", \"Some samples were not able to be loaded.\");\n        }\n        plot.update();\n        // be careful with the elements panel, too...\n        elemPanel.loadSamples(samples);\n        elemPanel.setSelectedIndex(plot.current);\n    }\n\n    public void remove(int idx) {\n        samples.remove(idx);\n        if (plot.current > samples.size())\n            plot.current--;\n        plot.update();\n        // be careful with the elements panel, too...\n        elemPanel.loadSamples(samples);\n        elemPanel.setSelectedIndex(plot.current);\n    }\n\n    //\n    // SaveableDocument\n    //\n    private String filename = null;\n\n    public boolean isSaved() {\n        // fixme: false if saved once, but modified (?)\n        return true;\n    }\n\n    // saveabledocument -- yes, we can use save as...\n    public boolean isNameChangeable() {\n        return true;\n    }\n\n    public void save() {\n        // copied from gridder.java -- refactor?\n        if (filename == null) {\n            try {\n                filename = FileDialog.showSingle(\"Save\");\n                // check for already-exists\n                Overwrite.overwrite(filename);\n            } catch (UserCancelledException uce) {\n                return;\n            }\n        }\n        // REFACTOR: combine these try-catch clauses!\n        // save!\n        try {\n            LoadSave.save(filename, samples);\n        } catch (IOException ioe) {\n            // error!\n            Alert.error(\"Error saving\", \"Error: \" + ioe.getMessage());\n        }\n    }\n\n    public void setFilename(String fn) {\n        filename = fn;\n    }\n\n    public String getFilename() {\n        return filename;\n    }\n\n    public String getDocumentTitle() {\n        return getTitle();\n    }\n\n    //\n    // PrintableDocument\n    //\n    public Object getPrinter(PageFormat pf) {\n        // !!! -- what about pf?\n        return this;\n    }\n\n    public String getPrintTitle() {\n        String s = \"Graph: \" + samples.get(0);\n        if (samples.size() > 1)\n            s += \", and others\";\n        return s;\n    }\n\n    // Printable\n    public int print(Graphics graphics, PageFormat pageFormat, int pageIndex) {\n        // only 1 page, at least yet\n        if (pageIndex != 0)\n            return NO_SUCH_PAGE;\n        // draw it\n        Graphics2D g2 = (Graphics2D) graphics;\n        double sx = pageFormat.getImageableWidth() / plot.getWidth();\n        double sy = 1;\n        g2.scale(sx, sy);\n        // ack!\n        plot.paintComponent(g2);\n        // done\n        return PAGE_EXISTS;\n    }\n\n    public String toSVG() {\n        try {\n            // (the next 3 steps taken from\n            // http://xml.apache.org/batik/svggen.html)\n            // Get a DOMImplementation\n            DOMImplementation domImpl = GenericDOMImplementation.getDOMImplementation();\n            // Create an instance of org.w3c.dom.Document\n            Document document = domImpl.createDocument(null, \"svg\", null);\n            // Create an instance of the SVG Generator\n            SVGGraphics2D svgGenerator = new SVGGraphics2D(document);\n            // draw the graph to it\n            plot.paintComponent(svgGenerator);\n            // stream it to a string\n            Writer out = new StringWriter();\n            // (false = don't use css)\n            svgGenerator.stream(out, false);\n            return out.toString();\n        } catch (IOException ioe) {\n            // technically, string writers say they can throw ioe's\n            // (because writer can), but i don't think it can ever\n            // actually happen.\n            new Bug(ioe);\n            // can't happen\n            return null;\n        }\n    }\n\n    // copy this graph to the clipboard as SVG -- is this really valuable? does\n    // it work?\n    private void copyToClipboard() {\n        final String glue = toSVG();\n        // copy = svg to clipboard\n        // BROKEN: this doesn't work, for some reason. i'm not exactly\n        // sure what i'd need to do to get copy-svg-to-clipboard to work.\n        // help?\n        // REFACTOR: this would be TextClipboard.copy(glue),\n        // except it should be copied as data flavor\n        // \"image/svg+xml; class=java.lang.String\".\n        Clipboard c = Toolkit.getDefaultToolkit().getSystemClipboard();\n        try {\n            final DataFlavor f = new DataFlavor(\"image/svg+xml; class=java.lang.String\");\n            Transferable t = new Transferable() {\n\n                public Object getTransferData(DataFlavor flavor) throws UnsupportedFlavorException {\n                    if (f.equals(flavor))\n                        return glue;\n                    else\n                        throw new UnsupportedFlavorException(flavor);\n                }\n\n                public DataFlavor[] getTransferDataFlavors() {\n                    return new DataFlavor[] { f };\n                }\n\n                public boolean isDataFlavorSupported(DataFlavor flavor) {\n                    return f.equals(flavor);\n                }\n            };\n            ClipboardOwner o = new ClipboardOwner() {\n\n                public void lostOwnership(Clipboard clipboard, Transferable contents) {\n                    // who cares?\n                }\n            };\n            c.setContents(t, o);\n            // TextClipboard.copy(out.toString());\n        } catch (ClassNotFoundException cnfe) {\n            // !!!\n            System.out.println(\"cnfe!\");\n        }\n    }\n\n    // drop target\n    private DropTargetListener dtl;\n\n    // construct a GrapherPanel, add a GrapherListener, etc.\n    private void createPanelAndDisplay() {\n        // initialize our plotting agents\n        agents = new PlotAgents();\n        // create a graph panel; put it in a scroll pane\n        plot = new GrapherPanel(samples, agents, this);\n        scroller = new JScrollPane(plot, ScrollPaneConstants.VERTICAL_SCROLLBAR_NEVER, ScrollPaneConstants.HORIZONTAL_SCROLLBAR_ALWAYS);\n        JPanel content = new JPanel(new BorderLayout());\n        setContentPane(content);\n        elemPanel = new GraphElementsPanel(samples, this);\n        content.add(elemPanel, BorderLayout.EAST);\n        content.add(scroller, BorderLayout.CENTER);\n        // re-enable me when graph toolbar is done\n        //content.add(new GraphToolbar(this), BorderLayout.NORTH);\n        elemPanel.setVisible(false);\n        // set initial y-offsets: spread 'em out\n        spreadOut(50);\n        // corner!\n        JLabel black = new JLabel();\n        black.setBackground(Color.getColor(\"corina.graph.background\", Color.black));\n        black.setOpaque(true);\n        scroller.setCorner(JScrollPane.LOWER_LEFT_CORNER, black);\n        // to set the initial title\n        plot.updateTitle();\n        // to turn on baselines and vert axis, if enabled...\n        plot.postScrollpanedInit();\n        // special case: if there's an Index, align baselines (ugly test!)\n        // REFACTOR: this doesn't do anything, does it?\n        if (samples.size() == 2 && ((((Graph) samples.get(0)).graph instanceof Index) || (((Graph) samples.get(1)).graph instanceof Index)))\n            squeezeTogether();\n        // ooh, menubar\n        {\n            JMenuBar menubar = new JMenuBar();\n            menubar.add(new GraphFileMenu(this));\n            menubar.add(new GraphEditMenu(this));\n            menubar.add(new GraphViewMenu(this));\n            if (App.platform.isMac())\n                menubar.add(new WindowMenu(this));\n            menubar.add(new HelpMenu());\n            setJMenuBar(menubar);\n        }\n        // drag-n-drop\n        dtl = new DropPlotter(this);\n        // on the menubar!\n        DropTarget t1 = new DropTarget(getJMenuBar(), dtl);\n        // on the plot!\n        DropTarget t3 = new DropTarget(plot, dtl);\n        // context menu\n        final SamplePopupMenu popup = new SamplePopupMenu();\n        plot.addMouseListener(new PopupListener() {\n\n            public void showPopup(MouseEvent e) {\n                // select this graph\n                int n = plot.getGraphAt(e.getPoint());\n                // not on a graph? bail.\n                if (n == -1)\n                    return;\n                // select it\n                plot.current = n;\n                plot.repaint();\n                elemPanel.setSelectedIndex(plot.current);\n                // show the popup\n                popup.setSample((Sample) ((Graph) plot.graphs.get(plot.current)).graph);\n                popup.show(e.getComponent(), e.getX(), e.getY());\n            }\n        });\n        // IDEA: if you set a member variable currentSample(?) whenever a new\n        // sample is selected, you can simply say\n        // new PopupListener(popup, plot)\n        // here.\n        App.prefs.addPrefsListener(this);\n        // display the window\n        pack();\n        show();\n        // give it focus, so you don't have to tab to it\n        // must be after show(), i think\n        plot.requestFocus();\n        // scroll to start of second graph\n        scrollToSecondGraph();\n    }\n\n    // if there's more than one sample, scroll to start of\n    // overlap, i.e., the start of the SECOND graph. (there's\n    // certainly a better way to do this.)\n    private void scrollToSecondGraph() {\n        if (samples.size() == 1)\n            return;\n        // FIXME: this only makes sense if the graphs overlap.\n        // if they don't ... ?\n        // make y1, y2 the start of the first 2 graphs\n        Year y1 = getStartOfGraph(0);\n        Year y2 = getStartOfGraph(1);\n        if (y1.compareTo(y2) > 0) {\n            Year tmp = y1;\n            y1 = y2;\n            y2 = tmp;\n        }\n        // loop through the rest, keeping y1,y2 the first two, yearwise\n        for (int i = 2; i < samples.size(); i++) {\n            Year yi = getStartOfGraph(i);\n            if (yi.compareTo(y1) < 0) {\n                y2 = y1;\n                y1 = yi;\n            } else if (yi.compareTo(y2) < 0) {\n                y2 = yi;\n            }\n        }\n        // scroll to 1 year before the second one\n        scrollTo(y2.add(-1));\n    }\n\n    // ?\n    private Year getStartOfGraph(int i) {\n        Graph g = (Graph) samples.get(i);\n        return g.graph.getStart().add(g.xoffset);\n    }\n\n    // ----------------------------------------------------------------------\n    // below here is just various constructors\n    //\n    /**\n     * Graph a single Sample.\n     *\n     * @param s\n     *            the Sample to graph\n     */\n    public GraphWindow(Sample s) {\n        // samples\n        // 2 things, max\n        samples = new ArrayList(2);\n        samples.add(new Graph(s));\n        // summed -- add count, too\n        if (s.isSummed())\n            samples.add(new Graph(s.count, s.range.getStart(), I18n.getText(\"number_of_samples\")));\n        // observe\n        s.addSampleListener(this);\n        // go\n        createPanelAndDisplay();\n    }\n\n    /**\n     * Graph all the files in a List of Elements.\n     *\n     * @param ss\n     *            the List to get the Elements from\n     */\n    public GraphWindow(List ss) {\n        // samples\n        boolean problem = false;\n        samples = new ArrayList(ss.size());\n        for (int i = 0; i < ss.size(); i++) {\n            Element e = (Element) ss.get(i);\n            if (// skip inactive\n            !e.isActive())\n                continue;\n            try {\n                Sample s = e.load();\n                samples.add(new Graph(s));\n                s.addSampleListener(this);\n            } catch (IOException ioe) {\n                // ick.\n                problem = true;\n            }\n        }\n        // problem?\n        if (problem) {\n            Alert.error(\"Error loading sample(s)\", \"Some samples were not able to be loaded.\");\n        }\n        // no samples => don't bother doing anything\n        if (samples.isEmpty()) {\n            dispose();\n            return;\n        }\n        // go\n        createPanelAndDisplay();\n    }\n\n    /**\n     * Graph all the files in a List of Elements AND\n     * a single sample to go with it.\n     *\n     * @param s\n     *            the Sample to graph\n     *\n     * @param ss\n     *            the List to get the Elements from\n     */\n    public GraphWindow(Sample s, List ss) {\n        // samples\n        boolean problem = false;\n        samples = new ArrayList(ss.size() + 2);\n        samples.add(new Graph(s));\n        // summed -- add count, too\n        if (s.isSummed())\n            samples.add(new Graph(s.count, s.range.getStart(), I18n.getText(\"number_of_samples\")));\n        // observe\n        s.addSampleListener(this);\n        for (int i = 0; i < ss.size(); i++) {\n            Element e = (Element) ss.get(i);\n            if (// skip inactive\n            !e.isActive())\n                continue;\n            try {\n                Sample ns = e.load();\n                samples.add(new Graph(ns));\n                ns.addSampleListener(this);\n            } catch (IOException ioe) {\n                // ick.\n                problem = true;\n            }\n        }\n        // problem?\n        if (problem) {\n            Alert.error(\"Error loading sample(s)\", \"Some samples were not able to be loaded.\");\n        }\n        // no samples => don't bother doing anything\n        if (samples.isEmpty()) {\n            dispose();\n            return;\n        }\n        // go\n        createPanelAndDisplay();\n    }\n\n    /**\n     * Graph any files the user chooses.\n     */\n    public GraphWindow() {\n        // get samples\n        List ss = null;\n        try {\n            ss = FileDialog.showMulti(I18n.getText(\"plot\"));\n        } catch (UserCancelledException uce) {\n            dispose();\n            return;\n        }\n        // REFACTOR: everything below this point is the same as\n        // GraphWindow(List)\n        // samples\n        boolean problem = false;\n        samples = new ArrayList(ss.size());\n        for (int i = 0; i < ss.size(); i++) {\n            Element e = (Element) ss.get(i);\n            if (// skip inactive\n            !e.isActive())\n                continue;\n            try {\n                Sample s = e.load();\n                samples.add(new Graph(s));\n                s.addSampleListener(this);\n            } catch (IOException ioe) {\n                // ick.\n                problem = true;\n            }\n        }\n        // problem?\n        if (problem) {\n            Alert.error(\"Error loading sample(s)\", \"Some samples were not able to be loaded.\");\n        }\n        // no samples => don't bother doing anything\n        if (samples.isEmpty()) {\n            dispose();\n            return;\n        }\n        // go\n        createPanelAndDisplay();\n    }\n\n    /**\n     * Graph an Index, and its target Sample.\n     *\n     * @param i\n     *            the Index to graph\n     */\n    public GraphWindow(Index i) {\n        // samples\n        samples = new ArrayList(2);\n        samples.add(new Graph(i.getTarget()));\n        samples.add(new Graph(i));\n        // go\n        createPanelAndDisplay();\n    }\n\n    /**\n     * Graph the two samples of a Cross, at one of the statistically significant\n     * overlaps. The graph is automatically scrolled to the start of the overlap\n     * interval.\n     *\n     * @param c\n     *            the Cross to graph\n     * @param movingPosition\n     *            the end-year of the moving sample of the cross to graph\n     */\n    public GraphWindow(Cross c, Year movingPosition) {\n        // careful!\n        Graph tmp;\n        // samples\n        samples = new ArrayList(2);\n        samples.add(new Graph(c.getFixed()));\n        samples.add(tmp = new Graph(c.getMoving()));\n        // compute offset of moving sample\n        tmp.xoffset = movingPosition.diff(c.getMoving().range.getEnd());\n        // go\n        createPanelAndDisplay();\n    }\n\n    /**\n     * (Re)create a plot that was saved to disk.\n     *\n     * @param filename\n     *            the filename of the plot to load\n     */\n    public GraphWindow(String filename) throws WrongFiletypeException {\n        // load\n        try {\n            samples = LoadSave.load(filename);\n        } catch (IOException ioe) {\n            throw new WrongFiletypeException();\n        }\n        // no files loaded? ouch.\n        if (samples.isEmpty())\n            throw new WrongFiletypeException();\n        // record filename\n        this.filename = filename;\n        // it worked, display it\n        createPanelAndDisplay();\n    }\n\n    // scroll the left side to a particular year\n    public void scrollTo(Year y) {\n        // compute how much to scroll\n        int dy = Math.abs(y.diff(plot.getRange().getStart()));\n        // scroll\n        scroller.getHorizontalScrollBar().setValue(dy * plot.getYearWidth());\n    }\n\n    public void panelSelectionChanged() {\n        if (elemPanel.getSelectedIndex() != plot.current) {\n            elemPanel.setSelectedIndex(plot.current);\n            Graph g = (Graph) samples.get(plot.current);\n            Color gcolor = g.getColor(false);\n            elemPanel.setColor(gcolor);\n        }\n    }\n\n    public void listSelectionChanged() {\n        if (plot.current == elemPanel.getSelectedIndex() || elemPanel.getSelectedIndex() < 0)\n            return;\n        // select it\n        plot.current = elemPanel.getSelectedIndex();\n        Graph g = (Graph) samples.get(plot.current);\n        Color gcolor = g.getColor(false);\n        elemPanel.setColor(gcolor);\n        plot.repaint();\n        plot.updateTitle();\n    }\n\n    public void setActiveColor(Color c) {\n        Graph g = (Graph) plot.graphs.get(plot.current);\n        g.setColor(c, c);\n        plot.repaint();\n    }\n\n    // live-updating preferences\n    public void prefChanged(PrefsEvent e) {\n        plot.update();\n        repaint();\n    }\n\n    protected void finalize() throws Throwable {\n        super.finalize();\n        App.prefs.removePrefsListener(this);\n    }\n}\n",
		"id": "/EvoSuiteBenchmark/35_corina/src/main/java/corina/graph/GraphWindow_0Test.java",
		"test_prompt": "// GraphWindow_0Test.java\n// This file is part of Corina.\n//\n// Corina is free software; you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation; either version 2 of the License, or\n// (at your option) any later version.\n//\n// Corina is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Corina; if not, write to the Free Software\n// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n//\n// Copyright 2001 Ken Harris <kbh7@cornell.edu>\n//\npackage corina.graph;\n\nimport java.awt.Color;\nimport java.awt.Graphics;\nimport java.awt.Graphics2D;\nimport java.awt.Toolkit;\nimport java.awt.datatransfer.Clipboard;\nimport java.awt.datatransfer.ClipboardOwner;\nimport java.awt.datatransfer.DataFlavor;\nimport java.awt.datatransfer.Transferable;\nimport java.awt.datatransfer.UnsupportedFlavorException;\nimport java.awt.dnd.DropTarget;\nimport java.awt.dnd.DropTargetListener;\nimport java.awt.event.MouseEvent;\nimport java.awt.print.PageFormat;\nimport java.awt.print.Printable;\nimport java.io.IOException;\nimport java.io.StringWriter;\nimport java.io.Writer;\nimport java.util.ArrayList;\nimport java.util.List;\nimport javax.swing.JLabel;\nimport javax.swing.JMenuBar;\nimport javax.swing.JScrollPane;\nimport javax.swing.ScrollPaneConstants;\nimport javax.swing.JPanel;\nimport java.awt.BorderLayout;\nimport org.apache.batik.dom.GenericDOMImplementation;\nimport org.apache.batik.svggen.SVGGraphics2D;\nimport org.w3c.dom.DOMImplementation;\nimport org.w3c.dom.Document;\nimport corina.Element;\nimport corina.Range;\nimport corina.Sample;\nimport corina.SampleEvent;\nimport corina.SampleListener;\nimport corina.Year;\nimport corina.core.App;\nimport corina.cross.Cross;\nimport corina.formats.WrongFiletypeException;\nimport corina.gui.Bug;\nimport corina.gui.FileDialog;\nimport corina.gui.SaveableDocument;\nimport corina.gui.UserCancelledException;\nimport corina.gui.XFrame;\nimport corina.gui.menus.FileMenu;\nimport corina.gui.menus.HelpMenu;\nimport corina.gui.menus.WindowMenu;\nimport corina.index.Index;\nimport corina.prefs.PrefsEvent;\nimport corina.prefs.PrefsListener;\nimport corina.ui.Alert;\nimport corina.ui.I18n;\nimport corina.util.Overwrite;\nimport corina.util.PopupListener;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link GraphWindow}.\n* It contains ten unit test cases for the {@link GraphWindow#isSaved()} method.\n*/\nclass GraphWindow_0Test {"
	},
	{
		"original_code": "// GraphWindow.java\n//\n// This file is part of Corina.\n//\n// Corina is free software; you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation; either version 2 of the License, or\n// (at your option) any later version.\n//\n// Corina is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Corina; if not, write to the Free Software\n// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n//\n// Copyright 2001 Ken Harris <kbh7@cornell.edu>\n//\npackage corina.graph;\n\nimport java.awt.Color;\nimport java.awt.Graphics;\nimport java.awt.Graphics2D;\nimport java.awt.Toolkit;\nimport java.awt.datatransfer.Clipboard;\nimport java.awt.datatransfer.ClipboardOwner;\nimport java.awt.datatransfer.DataFlavor;\nimport java.awt.datatransfer.Transferable;\nimport java.awt.datatransfer.UnsupportedFlavorException;\nimport java.awt.dnd.DropTarget;\nimport java.awt.dnd.DropTargetListener;\nimport java.awt.event.MouseEvent;\nimport java.awt.print.PageFormat;\nimport java.awt.print.Printable;\nimport java.io.IOException;\nimport java.io.StringWriter;\nimport java.io.Writer;\nimport java.util.ArrayList;\nimport java.util.List;\nimport javax.swing.JLabel;\nimport javax.swing.JMenuBar;\nimport javax.swing.JScrollPane;\nimport javax.swing.ScrollPaneConstants;\nimport javax.swing.JPanel;\nimport java.awt.BorderLayout;\nimport org.apache.batik.dom.GenericDOMImplementation;\nimport org.apache.batik.svggen.SVGGraphics2D;\nimport org.w3c.dom.DOMImplementation;\nimport org.w3c.dom.Document;\nimport corina.Element;\nimport corina.Range;\nimport corina.Sample;\nimport corina.SampleEvent;\nimport corina.SampleListener;\nimport corina.Year;\nimport corina.core.App;\nimport corina.cross.Cross;\nimport corina.formats.WrongFiletypeException;\nimport corina.gui.Bug;\nimport corina.gui.FileDialog;\nimport corina.gui.SaveableDocument;\nimport corina.gui.UserCancelledException;\nimport corina.gui.XFrame;\nimport corina.gui.menus.FileMenu;\nimport corina.gui.menus.HelpMenu;\nimport corina.gui.menus.WindowMenu;\nimport corina.index.Index;\nimport corina.prefs.PrefsEvent;\nimport corina.prefs.PrefsListener;\nimport corina.ui.Alert;\nimport corina.ui.I18n;\nimport corina.util.Overwrite;\nimport corina.util.PopupListener;\n\n/**\n * A graph. It graphs any number of samples (or any Graphable) and allows the\n * user to scroll, slide the samples up/down/left/right, and scale them\n * vertically.\n *\n * @see Graphable\n *\n * @author Ken Harris &lt;kbh7 <i style=\"color: gray\">at</i> cornell <i\n *         style=\"color: gray\">dot</i> edu&gt;\n * @version $Id: GraphWindow.java,v 1.17 2006/07/25 17:45:07 lucasmo Exp $\n */\n// TODO:\n// -- clean up .* imports: swing, awt.event\n// -- extract some parts: svg exporting, printing?, png exporting?\n// -- extract squish? (all 3?)\n// -- make this use either GrapherPanel or BargraphPanel\n// ---- rename GrapherPanel to GraphPanel\n// ---- extract BargraphPanel from BargraphFrame\n// -- add view->as Graph, as Bargraph, as Skeleton Plot options\n// -- saving should save the same format for any of these, with a \"type=\"\n// -- printing should print the current view (ask the view to print it)\n// -- if you drag onto the graph panel (while scrolling), don't draw cursor\n// -- \"mark all drops\" feature\n// -- put \"-1\" on x-axis, too?\n// -- mark -1 and +1 with longer ticks\npublic class GraphWindow extends XFrame implements SampleListener, SaveableDocument, // DISABLED until printing works better:\n// PrintableDocument,\nPrintable, PrefsListener {\n\n    // SampleListener\n    private void update(Sample s) {\n        // data/format changed, need to recheck getScale();\n        // BUG?: if data changed, but not format, won't this be unnecesary at\n        // best, wrong at worst?\n        // REFACTOR: why isn't this a 1-liner?\n        // (reset-scale (find :key #'graph s plot.graphs))\n        for (int i = 0; i < plot.graphs.size(); i++) {\n            Graph g = (Graph) plot.graphs.get(i);\n            if (g.graph == s) {\n                g.scale = g.graph.getScale();\n                break;\n            }\n        }\n        // repaint\n        repaint();\n    }\n\n    public void sampleRedated(SampleEvent e) {\n        /* FIXME: handle this */\n        update((Sample) e.getSource());\n        // TODO: update title, too?\n    }\n\n    public void sampleDataChanged(SampleEvent e) {\n        update((Sample) e.getSource());\n    }\n\n    public void sampleMetadataChanged(SampleEvent e) {\n        // title might have changed\n        plot.updateTitle();\n        // TODO: only if field=title?\n        // TODO: make this: only if field==format!\n        update((Sample) e.getSource());\n    }\n\n    public void sampleElementsChanged(SampleEvent e) {\n    }\n\n    // gui\n    // the plot area itself\n    public GrapherPanel plot;\n\n    public PlotAgents agents;\n\n    public GraphElementsPanel elemPanel;\n\n    // scroller enclosing the plot\n    private JScrollPane scroller;\n\n    // data\n    // of Graph\n    private List samples;\n\n    // adjust vertical spacing\n    public void squeezeTogether() {\n        for (int i = 0; i < samples.size(); i++) ((Graph) samples.get(i)).yoffset = 0;\n        repaint();\n    }\n\n    public void spreadOut(int units) {\n        for (int i = 0; i < samples.size(); i++) ((Graph) samples.get(i)).yoffset = i * units;\n        repaint();\n    }\n\n    public void halveScale() {\n        for (int i = 0; i < samples.size(); i++) {\n            Graph g = (Graph) samples.get(i);\n            g.scale /= 2;\n        }\n        repaint();\n    }\n\n    public void doubleScale() {\n        for (int i = 0; i < samples.size(); i++) {\n            Graph g = (Graph) samples.get(i);\n            g.scale *= 2;\n        }\n        repaint();\n    }\n\n    public void resetScaling() {\n        for (int i = 0; i < samples.size(); i++) {\n            Graph g = (Graph) samples.get(i);\n            g.scale = g.graph.getScale();\n        }\n        repaint();\n    }\n\n    public void scaleToFitWidth() {\n        int viewportSize = scroller.getWidth();\n        int nYears = plot.getGraphingRange().span() + 2;\n        // viewportSize is the number of pixels.\n        // nyears =\n        int ppy = viewportSize / nYears;\n        plot.forceYearWidth(ppy);\n        repaint();\n        scrollTo(plot.getGraphingRange().getStart());\n    }\n\n    public void scaleToFitHeight() {\n        int bottom = plot.getHeight() - GrapherPanel.AXIS_HEIGHT;\n        int maxheight = plot.getMaxPixelHeight();\n        int uph = (int) (10.0 * bottom / maxheight);\n        plot.forceUnitHeight(uph);\n        repaint();\n    }\n\n    public void squishTogether() {\n        // squish together samples in visible window\n        // BUG: assumes sample[current] is visible.\n        // first, set samples[current] = 0\n        ((Graph) samples.get(plot.current)).yoffset = 0;\n        // compute viewport range\n        // REFACTOR: write a getYearForPoint() method, and call that on both\n        // ends of the visible JViewPane\n        Year viewportLeft = plot.getRange().getStart().add(scroller.getHorizontalScrollBar().getValue() / plot.getYearWidth());\n        int viewportSize = scroller.getWidth() / plot.getYearWidth();\n        Range viewport = new Range(viewportLeft, viewportSize);\n        // idea: emphasize middle 50% of viewport\n        // for each other graph, minimize chi^2 (chi) in viewport\n        for (int i = 0; i < samples.size(); i++) {\n            // (skip current)\n            if (i == plot.current)\n                continue;\n            // make sure it's there at all, otherwise, don't bother.\n            // intersect(viewport, graph[i], graph[current])\n            Range range = ((Graph) samples.get(i)).getRange();\n            Range overlap = range.intersection(viewport);\n            overlap = overlap.intersection(((Graph) samples.get(plot.current)).getRange());\n            if (overlap.span() == 0)\n                continue;\n            // now, compute mean of sample[current][y] - sample[i][y]\n            List data = ((Graph) samples.get(i)).graph.getData();\n            // index into\n            int j = overlap.getStart().diff(range.getStart());\n            // data[i]\n            double dataScale = ((Graph) samples.get(i)).scale;\n            List base = ((Graph) samples.get(plot.current)).graph.getData();\n            int k = overlap.getStart().diff(// graph.getStart());\n            ((Graph) samples.get(plot.current)).getRange().getStart());\n            // //\n            // index\n            // into\n            // base=data[plot.current]\n            double baseScale = ((Graph) samples.get(plot.current)).scale;\n            double mean = 0.0;\n            for (Year y = overlap.getStart(); y.compareTo(overlap.getEnd()) <= 0; y = y.add(1)) {\n                mean += ((Number) data.get(j++)).doubleValue() * dataScale - ((Number) base.get(k++)).doubleValue() * baseScale;\n            }\n            mean /= overlap.span();\n            // make -mean its new offset\n            ((Graph) samples.get(i)).yoffset = (int) -mean;\n        }\n        // make the lowest one have yoffset=0 now\n        int min = ((Graph) samples.get(0)).yoffset;\n        for (int i = 1; i < samples.size(); i++) min = Math.min(min, ((Graph) samples.get(i)).yoffset);\n        for (int i = 0; i < samples.size(); i++) ((Graph) samples.get(i)).yoffset -= min;\n        // repaint\n        repaint();\n    }\n\n    // add a new sample\n    public void add(Sample s) {\n        // doesn't get next yoffset, is that ok?\n        samples.add(new Graph(s));\n        // (yeah, sure)\n        plot.update();\n        // be careful with the elements panel, too...\n        elemPanel.loadSamples(samples);\n        elemPanel.setSelectedIndex(plot.current);\n    }\n\n    // add a List of ELEMENTS\n    public void add(List ns) {\n        // samples\n        boolean problem = false;\n        for (int i = 0; i < ns.size(); i++) {\n            Element e = (Element) ns.get(i);\n            if (// skip inactive\n            !e.isActive())\n                continue;\n            try {\n                Sample s = e.load();\n                samples.add(new Graph(s));\n                s.addSampleListener(this);\n            } catch (IOException ioe) {\n                // ick.\n                problem = true;\n            }\n        }\n        // problem?\n        if (problem) {\n            Alert.error(\"Error loading sample(s)\", \"Some samples were not able to be loaded.\");\n        }\n        plot.update();\n        // be careful with the elements panel, too...\n        elemPanel.loadSamples(samples);\n        elemPanel.setSelectedIndex(plot.current);\n    }\n\n    public void remove(int idx) {\n        samples.remove(idx);\n        if (plot.current > samples.size())\n            plot.current--;\n        plot.update();\n        // be careful with the elements panel, too...\n        elemPanel.loadSamples(samples);\n        elemPanel.setSelectedIndex(plot.current);\n    }\n\n    //\n    // SaveableDocument\n    //\n    private String filename = null;\n\n    public boolean isSaved() {\n        // fixme: false if saved once, but modified (?)\n        return true;\n    }\n\n    // saveabledocument -- yes, we can use save as...\n    public boolean isNameChangeable() {\n        return true;\n    }\n\n    public void save() {\n        // copied from gridder.java -- refactor?\n        if (filename == null) {\n            try {\n                filename = FileDialog.showSingle(\"Save\");\n                // check for already-exists\n                Overwrite.overwrite(filename);\n            } catch (UserCancelledException uce) {\n                return;\n            }\n        }\n        // REFACTOR: combine these try-catch clauses!\n        // save!\n        try {\n            LoadSave.save(filename, samples);\n        } catch (IOException ioe) {\n            // error!\n            Alert.error(\"Error saving\", \"Error: \" + ioe.getMessage());\n        }\n    }\n\n    public void setFilename(String fn) {\n        filename = fn;\n    }\n\n    public String getFilename() {\n        return filename;\n    }\n\n    public String getDocumentTitle() {\n        return getTitle();\n    }\n\n    //\n    // PrintableDocument\n    //\n    public Object getPrinter(PageFormat pf) {\n        // !!! -- what about pf?\n        return this;\n    }\n\n    public String getPrintTitle() {\n        String s = \"Graph: \" + samples.get(0);\n        if (samples.size() > 1)\n            s += \", and others\";\n        return s;\n    }\n\n    // Printable\n    public int print(Graphics graphics, PageFormat pageFormat, int pageIndex) {\n        // only 1 page, at least yet\n        if (pageIndex != 0)\n            return NO_SUCH_PAGE;\n        // draw it\n        Graphics2D g2 = (Graphics2D) graphics;\n        double sx = pageFormat.getImageableWidth() / plot.getWidth();\n        double sy = 1;\n        g2.scale(sx, sy);\n        // ack!\n        plot.paintComponent(g2);\n        // done\n        return PAGE_EXISTS;\n    }\n\n    public String toSVG() {\n        try {\n            // (the next 3 steps taken from\n            // http://xml.apache.org/batik/svggen.html)\n            // Get a DOMImplementation\n            DOMImplementation domImpl = GenericDOMImplementation.getDOMImplementation();\n            // Create an instance of org.w3c.dom.Document\n            Document document = domImpl.createDocument(null, \"svg\", null);\n            // Create an instance of the SVG Generator\n            SVGGraphics2D svgGenerator = new SVGGraphics2D(document);\n            // draw the graph to it\n            plot.paintComponent(svgGenerator);\n            // stream it to a string\n            Writer out = new StringWriter();\n            // (false = don't use css)\n            svgGenerator.stream(out, false);\n            return out.toString();\n        } catch (IOException ioe) {\n            // technically, string writers say they can throw ioe's\n            // (because writer can), but i don't think it can ever\n            // actually happen.\n            new Bug(ioe);\n            // can't happen\n            return null;\n        }\n    }\n\n    // copy this graph to the clipboard as SVG -- is this really valuable? does\n    // it work?\n    private void copyToClipboard() {\n        final String glue = toSVG();\n        // copy = svg to clipboard\n        // BROKEN: this doesn't work, for some reason. i'm not exactly\n        // sure what i'd need to do to get copy-svg-to-clipboard to work.\n        // help?\n        // REFACTOR: this would be TextClipboard.copy(glue),\n        // except it should be copied as data flavor\n        // \"image/svg+xml; class=java.lang.String\".\n        Clipboard c = Toolkit.getDefaultToolkit().getSystemClipboard();\n        try {\n            final DataFlavor f = new DataFlavor(\"image/svg+xml; class=java.lang.String\");\n            Transferable t = new Transferable() {\n\n                public Object getTransferData(DataFlavor flavor) throws UnsupportedFlavorException {\n                    if (f.equals(flavor))\n                        return glue;\n                    else\n                        throw new UnsupportedFlavorException(flavor);\n                }\n\n                public DataFlavor[] getTransferDataFlavors() {\n                    return new DataFlavor[] { f };\n                }\n\n                public boolean isDataFlavorSupported(DataFlavor flavor) {\n                    return f.equals(flavor);\n                }\n            };\n            ClipboardOwner o = new ClipboardOwner() {\n\n                public void lostOwnership(Clipboard clipboard, Transferable contents) {\n                    // who cares?\n                }\n            };\n            c.setContents(t, o);\n            // TextClipboard.copy(out.toString());\n        } catch (ClassNotFoundException cnfe) {\n            // !!!\n            System.out.println(\"cnfe!\");\n        }\n    }\n\n    // drop target\n    private DropTargetListener dtl;\n\n    // construct a GrapherPanel, add a GrapherListener, etc.\n    private void createPanelAndDisplay() {\n        // initialize our plotting agents\n        agents = new PlotAgents();\n        // create a graph panel; put it in a scroll pane\n        plot = new GrapherPanel(samples, agents, this);\n        scroller = new JScrollPane(plot, ScrollPaneConstants.VERTICAL_SCROLLBAR_NEVER, ScrollPaneConstants.HORIZONTAL_SCROLLBAR_ALWAYS);\n        JPanel content = new JPanel(new BorderLayout());\n        setContentPane(content);\n        elemPanel = new GraphElementsPanel(samples, this);\n        content.add(elemPanel, BorderLayout.EAST);\n        content.add(scroller, BorderLayout.CENTER);\n        // re-enable me when graph toolbar is done\n        //content.add(new GraphToolbar(this), BorderLayout.NORTH);\n        elemPanel.setVisible(false);\n        // set initial y-offsets: spread 'em out\n        spreadOut(50);\n        // corner!\n        JLabel black = new JLabel();\n        black.setBackground(Color.getColor(\"corina.graph.background\", Color.black));\n        black.setOpaque(true);\n        scroller.setCorner(JScrollPane.LOWER_LEFT_CORNER, black);\n        // to set the initial title\n        plot.updateTitle();\n        // to turn on baselines and vert axis, if enabled...\n        plot.postScrollpanedInit();\n        // special case: if there's an Index, align baselines (ugly test!)\n        // REFACTOR: this doesn't do anything, does it?\n        if (samples.size() == 2 && ((((Graph) samples.get(0)).graph instanceof Index) || (((Graph) samples.get(1)).graph instanceof Index)))\n            squeezeTogether();\n        // ooh, menubar\n        {\n            JMenuBar menubar = new JMenuBar();\n            menubar.add(new GraphFileMenu(this));\n            menubar.add(new GraphEditMenu(this));\n            menubar.add(new GraphViewMenu(this));\n            if (App.platform.isMac())\n                menubar.add(new WindowMenu(this));\n            menubar.add(new HelpMenu());\n            setJMenuBar(menubar);\n        }\n        // drag-n-drop\n        dtl = new DropPlotter(this);\n        // on the menubar!\n        DropTarget t1 = new DropTarget(getJMenuBar(), dtl);\n        // on the plot!\n        DropTarget t3 = new DropTarget(plot, dtl);\n        // context menu\n        final SamplePopupMenu popup = new SamplePopupMenu();\n        plot.addMouseListener(new PopupListener() {\n\n            public void showPopup(MouseEvent e) {\n                // select this graph\n                int n = plot.getGraphAt(e.getPoint());\n                // not on a graph? bail.\n                if (n == -1)\n                    return;\n                // select it\n                plot.current = n;\n                plot.repaint();\n                elemPanel.setSelectedIndex(plot.current);\n                // show the popup\n                popup.setSample((Sample) ((Graph) plot.graphs.get(plot.current)).graph);\n                popup.show(e.getComponent(), e.getX(), e.getY());\n            }\n        });\n        // IDEA: if you set a member variable currentSample(?) whenever a new\n        // sample is selected, you can simply say\n        // new PopupListener(popup, plot)\n        // here.\n        App.prefs.addPrefsListener(this);\n        // display the window\n        pack();\n        show();\n        // give it focus, so you don't have to tab to it\n        // must be after show(), i think\n        plot.requestFocus();\n        // scroll to start of second graph\n        scrollToSecondGraph();\n    }\n\n    // if there's more than one sample, scroll to start of\n    // overlap, i.e., the start of the SECOND graph. (there's\n    // certainly a better way to do this.)\n    private void scrollToSecondGraph() {\n        if (samples.size() == 1)\n            return;\n        // FIXME: this only makes sense if the graphs overlap.\n        // if they don't ... ?\n        // make y1, y2 the start of the first 2 graphs\n        Year y1 = getStartOfGraph(0);\n        Year y2 = getStartOfGraph(1);\n        if (y1.compareTo(y2) > 0) {\n            Year tmp = y1;\n            y1 = y2;\n            y2 = tmp;\n        }\n        // loop through the rest, keeping y1,y2 the first two, yearwise\n        for (int i = 2; i < samples.size(); i++) {\n            Year yi = getStartOfGraph(i);\n            if (yi.compareTo(y1) < 0) {\n                y2 = y1;\n                y1 = yi;\n            } else if (yi.compareTo(y2) < 0) {\n                y2 = yi;\n            }\n        }\n        // scroll to 1 year before the second one\n        scrollTo(y2.add(-1));\n    }\n\n    // ?\n    private Year getStartOfGraph(int i) {\n        Graph g = (Graph) samples.get(i);\n        return g.graph.getStart().add(g.xoffset);\n    }\n\n    // ----------------------------------------------------------------------\n    // below here is just various constructors\n    //\n    /**\n     * Graph a single Sample.\n     *\n     * @param s\n     *            the Sample to graph\n     */\n    public GraphWindow(Sample s) {\n        // samples\n        // 2 things, max\n        samples = new ArrayList(2);\n        samples.add(new Graph(s));\n        // summed -- add count, too\n        if (s.isSummed())\n            samples.add(new Graph(s.count, s.range.getStart(), I18n.getText(\"number_of_samples\")));\n        // observe\n        s.addSampleListener(this);\n        // go\n        createPanelAndDisplay();\n    }\n\n    /**\n     * Graph all the files in a List of Elements.\n     *\n     * @param ss\n     *            the List to get the Elements from\n     */\n    public GraphWindow(List ss) {\n        // samples\n        boolean problem = false;\n        samples = new ArrayList(ss.size());\n        for (int i = 0; i < ss.size(); i++) {\n            Element e = (Element) ss.get(i);\n            if (// skip inactive\n            !e.isActive())\n                continue;\n            try {\n                Sample s = e.load();\n                samples.add(new Graph(s));\n                s.addSampleListener(this);\n            } catch (IOException ioe) {\n                // ick.\n                problem = true;\n            }\n        }\n        // problem?\n        if (problem) {\n            Alert.error(\"Error loading sample(s)\", \"Some samples were not able to be loaded.\");\n        }\n        // no samples => don't bother doing anything\n        if (samples.isEmpty()) {\n            dispose();\n            return;\n        }\n        // go\n        createPanelAndDisplay();\n    }\n\n    /**\n     * Graph all the files in a List of Elements AND\n     * a single sample to go with it.\n     *\n     * @param s\n     *            the Sample to graph\n     *\n     * @param ss\n     *            the List to get the Elements from\n     */\n    public GraphWindow(Sample s, List ss) {\n        // samples\n        boolean problem = false;\n        samples = new ArrayList(ss.size() + 2);\n        samples.add(new Graph(s));\n        // summed -- add count, too\n        if (s.isSummed())\n            samples.add(new Graph(s.count, s.range.getStart(), I18n.getText(\"number_of_samples\")));\n        // observe\n        s.addSampleListener(this);\n        for (int i = 0; i < ss.size(); i++) {\n            Element e = (Element) ss.get(i);\n            if (// skip inactive\n            !e.isActive())\n                continue;\n            try {\n                Sample ns = e.load();\n                samples.add(new Graph(ns));\n                ns.addSampleListener(this);\n            } catch (IOException ioe) {\n                // ick.\n                problem = true;\n            }\n        }\n        // problem?\n        if (problem) {\n            Alert.error(\"Error loading sample(s)\", \"Some samples were not able to be loaded.\");\n        }\n        // no samples => don't bother doing anything\n        if (samples.isEmpty()) {\n            dispose();\n            return;\n        }\n        // go\n        createPanelAndDisplay();\n    }\n\n    /**\n     * Graph any files the user chooses.\n     */\n    public GraphWindow() {\n        // get samples\n        List ss = null;\n        try {\n            ss = FileDialog.showMulti(I18n.getText(\"plot\"));\n        } catch (UserCancelledException uce) {\n            dispose();\n            return;\n        }\n        // REFACTOR: everything below this point is the same as\n        // GraphWindow(List)\n        // samples\n        boolean problem = false;\n        samples = new ArrayList(ss.size());\n        for (int i = 0; i < ss.size(); i++) {\n            Element e = (Element) ss.get(i);\n            if (// skip inactive\n            !e.isActive())\n                continue;\n            try {\n                Sample s = e.load();\n                samples.add(new Graph(s));\n                s.addSampleListener(this);\n            } catch (IOException ioe) {\n                // ick.\n                problem = true;\n            }\n        }\n        // problem?\n        if (problem) {\n            Alert.error(\"Error loading sample(s)\", \"Some samples were not able to be loaded.\");\n        }\n        // no samples => don't bother doing anything\n        if (samples.isEmpty()) {\n            dispose();\n            return;\n        }\n        // go\n        createPanelAndDisplay();\n    }\n\n    /**\n     * Graph an Index, and its target Sample.\n     *\n     * @param i\n     *            the Index to graph\n     */\n    public GraphWindow(Index i) {\n        // samples\n        samples = new ArrayList(2);\n        samples.add(new Graph(i.getTarget()));\n        samples.add(new Graph(i));\n        // go\n        createPanelAndDisplay();\n    }\n\n    /**\n     * Graph the two samples of a Cross, at one of the statistically significant\n     * overlaps. The graph is automatically scrolled to the start of the overlap\n     * interval.\n     *\n     * @param c\n     *            the Cross to graph\n     * @param movingPosition\n     *            the end-year of the moving sample of the cross to graph\n     */\n    public GraphWindow(Cross c, Year movingPosition) {\n        // careful!\n        Graph tmp;\n        // samples\n        samples = new ArrayList(2);\n        samples.add(new Graph(c.getFixed()));\n        samples.add(tmp = new Graph(c.getMoving()));\n        // compute offset of moving sample\n        tmp.xoffset = movingPosition.diff(c.getMoving().range.getEnd());\n        // go\n        createPanelAndDisplay();\n    }\n\n    /**\n     * (Re)create a plot that was saved to disk.\n     *\n     * @param filename\n     *            the filename of the plot to load\n     */\n    public GraphWindow(String filename) throws WrongFiletypeException {\n        // load\n        try {\n            samples = LoadSave.load(filename);\n        } catch (IOException ioe) {\n            throw new WrongFiletypeException();\n        }\n        // no files loaded? ouch.\n        if (samples.isEmpty())\n            throw new WrongFiletypeException();\n        // record filename\n        this.filename = filename;\n        // it worked, display it\n        createPanelAndDisplay();\n    }\n\n    // scroll the left side to a particular year\n    public void scrollTo(Year y) {\n        // compute how much to scroll\n        int dy = Math.abs(y.diff(plot.getRange().getStart()));\n        // scroll\n        scroller.getHorizontalScrollBar().setValue(dy * plot.getYearWidth());\n    }\n\n    public void panelSelectionChanged() {\n        if (elemPanel.getSelectedIndex() != plot.current) {\n            elemPanel.setSelectedIndex(plot.current);\n            Graph g = (Graph) samples.get(plot.current);\n            Color gcolor = g.getColor(false);\n            elemPanel.setColor(gcolor);\n        }\n    }\n\n    public void listSelectionChanged() {\n        if (plot.current == elemPanel.getSelectedIndex() || elemPanel.getSelectedIndex() < 0)\n            return;\n        // select it\n        plot.current = elemPanel.getSelectedIndex();\n        Graph g = (Graph) samples.get(plot.current);\n        Color gcolor = g.getColor(false);\n        elemPanel.setColor(gcolor);\n        plot.repaint();\n        plot.updateTitle();\n    }\n\n    public void setActiveColor(Color c) {\n        Graph g = (Graph) plot.graphs.get(plot.current);\n        g.setColor(c, c);\n        plot.repaint();\n    }\n\n    // live-updating preferences\n    public void prefChanged(PrefsEvent e) {\n        plot.update();\n        repaint();\n    }\n\n    protected void finalize() throws Throwable {\n        super.finalize();\n        App.prefs.removePrefsListener(this);\n    }\n}\n",
		"id": "/EvoSuiteBenchmark/35_corina/src/main/java/corina/graph/GraphWindow_1Test.java",
		"test_prompt": "// GraphWindow_1Test.java\n// This file is part of Corina.\n//\n// Corina is free software; you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation; either version 2 of the License, or\n// (at your option) any later version.\n//\n// Corina is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Corina; if not, write to the Free Software\n// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n//\n// Copyright 2001 Ken Harris <kbh7@cornell.edu>\n//\npackage corina.graph;\n\nimport java.awt.Color;\nimport java.awt.Graphics;\nimport java.awt.Graphics2D;\nimport java.awt.Toolkit;\nimport java.awt.datatransfer.Clipboard;\nimport java.awt.datatransfer.ClipboardOwner;\nimport java.awt.datatransfer.DataFlavor;\nimport java.awt.datatransfer.Transferable;\nimport java.awt.datatransfer.UnsupportedFlavorException;\nimport java.awt.dnd.DropTarget;\nimport java.awt.dnd.DropTargetListener;\nimport java.awt.event.MouseEvent;\nimport java.awt.print.PageFormat;\nimport java.awt.print.Printable;\nimport java.io.IOException;\nimport java.io.StringWriter;\nimport java.io.Writer;\nimport java.util.ArrayList;\nimport java.util.List;\nimport javax.swing.JLabel;\nimport javax.swing.JMenuBar;\nimport javax.swing.JScrollPane;\nimport javax.swing.ScrollPaneConstants;\nimport javax.swing.JPanel;\nimport java.awt.BorderLayout;\nimport org.apache.batik.dom.GenericDOMImplementation;\nimport org.apache.batik.svggen.SVGGraphics2D;\nimport org.w3c.dom.DOMImplementation;\nimport org.w3c.dom.Document;\nimport corina.Element;\nimport corina.Range;\nimport corina.Sample;\nimport corina.SampleEvent;\nimport corina.SampleListener;\nimport corina.Year;\nimport corina.core.App;\nimport corina.cross.Cross;\nimport corina.formats.WrongFiletypeException;\nimport corina.gui.Bug;\nimport corina.gui.FileDialog;\nimport corina.gui.SaveableDocument;\nimport corina.gui.UserCancelledException;\nimport corina.gui.XFrame;\nimport corina.gui.menus.FileMenu;\nimport corina.gui.menus.HelpMenu;\nimport corina.gui.menus.WindowMenu;\nimport corina.index.Index;\nimport corina.prefs.PrefsEvent;\nimport corina.prefs.PrefsListener;\nimport corina.ui.Alert;\nimport corina.ui.I18n;\nimport corina.util.Overwrite;\nimport corina.util.PopupListener;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link GraphWindow}.\n* It contains ten unit test cases for the {@link GraphWindow#isNameChangeable()} method.\n*/\nclass GraphWindow_1Test {"
	},
	{
		"original_code": "// GraphWindow.java\n//\n// This file is part of Corina.\n//\n// Corina is free software; you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation; either version 2 of the License, or\n// (at your option) any later version.\n//\n// Corina is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Corina; if not, write to the Free Software\n// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n//\n// Copyright 2001 Ken Harris <kbh7@cornell.edu>\n//\npackage corina.graph;\n\nimport java.awt.Color;\nimport java.awt.Graphics;\nimport java.awt.Graphics2D;\nimport java.awt.Toolkit;\nimport java.awt.datatransfer.Clipboard;\nimport java.awt.datatransfer.ClipboardOwner;\nimport java.awt.datatransfer.DataFlavor;\nimport java.awt.datatransfer.Transferable;\nimport java.awt.datatransfer.UnsupportedFlavorException;\nimport java.awt.dnd.DropTarget;\nimport java.awt.dnd.DropTargetListener;\nimport java.awt.event.MouseEvent;\nimport java.awt.print.PageFormat;\nimport java.awt.print.Printable;\nimport java.io.IOException;\nimport java.io.StringWriter;\nimport java.io.Writer;\nimport java.util.ArrayList;\nimport java.util.List;\nimport javax.swing.JLabel;\nimport javax.swing.JMenuBar;\nimport javax.swing.JScrollPane;\nimport javax.swing.ScrollPaneConstants;\nimport javax.swing.JPanel;\nimport java.awt.BorderLayout;\nimport org.apache.batik.dom.GenericDOMImplementation;\nimport org.apache.batik.svggen.SVGGraphics2D;\nimport org.w3c.dom.DOMImplementation;\nimport org.w3c.dom.Document;\nimport corina.Element;\nimport corina.Range;\nimport corina.Sample;\nimport corina.SampleEvent;\nimport corina.SampleListener;\nimport corina.Year;\nimport corina.core.App;\nimport corina.cross.Cross;\nimport corina.formats.WrongFiletypeException;\nimport corina.gui.Bug;\nimport corina.gui.FileDialog;\nimport corina.gui.SaveableDocument;\nimport corina.gui.UserCancelledException;\nimport corina.gui.XFrame;\nimport corina.gui.menus.FileMenu;\nimport corina.gui.menus.HelpMenu;\nimport corina.gui.menus.WindowMenu;\nimport corina.index.Index;\nimport corina.prefs.PrefsEvent;\nimport corina.prefs.PrefsListener;\nimport corina.ui.Alert;\nimport corina.ui.I18n;\nimport corina.util.Overwrite;\nimport corina.util.PopupListener;\n\n/**\n * A graph. It graphs any number of samples (or any Graphable) and allows the\n * user to scroll, slide the samples up/down/left/right, and scale them\n * vertically.\n *\n * @see Graphable\n *\n * @author Ken Harris &lt;kbh7 <i style=\"color: gray\">at</i> cornell <i\n *         style=\"color: gray\">dot</i> edu&gt;\n * @version $Id: GraphWindow.java,v 1.17 2006/07/25 17:45:07 lucasmo Exp $\n */\n// TODO:\n// -- clean up .* imports: swing, awt.event\n// -- extract some parts: svg exporting, printing?, png exporting?\n// -- extract squish? (all 3?)\n// -- make this use either GrapherPanel or BargraphPanel\n// ---- rename GrapherPanel to GraphPanel\n// ---- extract BargraphPanel from BargraphFrame\n// -- add view->as Graph, as Bargraph, as Skeleton Plot options\n// -- saving should save the same format for any of these, with a \"type=\"\n// -- printing should print the current view (ask the view to print it)\n// -- if you drag onto the graph panel (while scrolling), don't draw cursor\n// -- \"mark all drops\" feature\n// -- put \"-1\" on x-axis, too?\n// -- mark -1 and +1 with longer ticks\npublic class GraphWindow extends XFrame implements SampleListener, SaveableDocument, // DISABLED until printing works better:\n// PrintableDocument,\nPrintable, PrefsListener {\n\n    // SampleListener\n    private void update(Sample s) {\n        // data/format changed, need to recheck getScale();\n        // BUG?: if data changed, but not format, won't this be unnecesary at\n        // best, wrong at worst?\n        // REFACTOR: why isn't this a 1-liner?\n        // (reset-scale (find :key #'graph s plot.graphs))\n        for (int i = 0; i < plot.graphs.size(); i++) {\n            Graph g = (Graph) plot.graphs.get(i);\n            if (g.graph == s) {\n                g.scale = g.graph.getScale();\n                break;\n            }\n        }\n        // repaint\n        repaint();\n    }\n\n    public void sampleRedated(SampleEvent e) {\n        /* FIXME: handle this */\n        update((Sample) e.getSource());\n        // TODO: update title, too?\n    }\n\n    public void sampleDataChanged(SampleEvent e) {\n        update((Sample) e.getSource());\n    }\n\n    public void sampleMetadataChanged(SampleEvent e) {\n        // title might have changed\n        plot.updateTitle();\n        // TODO: only if field=title?\n        // TODO: make this: only if field==format!\n        update((Sample) e.getSource());\n    }\n\n    public void sampleElementsChanged(SampleEvent e) {\n    }\n\n    // gui\n    // the plot area itself\n    public GrapherPanel plot;\n\n    public PlotAgents agents;\n\n    public GraphElementsPanel elemPanel;\n\n    // scroller enclosing the plot\n    private JScrollPane scroller;\n\n    // data\n    // of Graph\n    private List samples;\n\n    // adjust vertical spacing\n    public void squeezeTogether() {\n        for (int i = 0; i < samples.size(); i++) ((Graph) samples.get(i)).yoffset = 0;\n        repaint();\n    }\n\n    public void spreadOut(int units) {\n        for (int i = 0; i < samples.size(); i++) ((Graph) samples.get(i)).yoffset = i * units;\n        repaint();\n    }\n\n    public void halveScale() {\n        for (int i = 0; i < samples.size(); i++) {\n            Graph g = (Graph) samples.get(i);\n            g.scale /= 2;\n        }\n        repaint();\n    }\n\n    public void doubleScale() {\n        for (int i = 0; i < samples.size(); i++) {\n            Graph g = (Graph) samples.get(i);\n            g.scale *= 2;\n        }\n        repaint();\n    }\n\n    public void resetScaling() {\n        for (int i = 0; i < samples.size(); i++) {\n            Graph g = (Graph) samples.get(i);\n            g.scale = g.graph.getScale();\n        }\n        repaint();\n    }\n\n    public void scaleToFitWidth() {\n        int viewportSize = scroller.getWidth();\n        int nYears = plot.getGraphingRange().span() + 2;\n        // viewportSize is the number of pixels.\n        // nyears =\n        int ppy = viewportSize / nYears;\n        plot.forceYearWidth(ppy);\n        repaint();\n        scrollTo(plot.getGraphingRange().getStart());\n    }\n\n    public void scaleToFitHeight() {\n        int bottom = plot.getHeight() - GrapherPanel.AXIS_HEIGHT;\n        int maxheight = plot.getMaxPixelHeight();\n        int uph = (int) (10.0 * bottom / maxheight);\n        plot.forceUnitHeight(uph);\n        repaint();\n    }\n\n    public void squishTogether() {\n        // squish together samples in visible window\n        // BUG: assumes sample[current] is visible.\n        // first, set samples[current] = 0\n        ((Graph) samples.get(plot.current)).yoffset = 0;\n        // compute viewport range\n        // REFACTOR: write a getYearForPoint() method, and call that on both\n        // ends of the visible JViewPane\n        Year viewportLeft = plot.getRange().getStart().add(scroller.getHorizontalScrollBar().getValue() / plot.getYearWidth());\n        int viewportSize = scroller.getWidth() / plot.getYearWidth();\n        Range viewport = new Range(viewportLeft, viewportSize);\n        // idea: emphasize middle 50% of viewport\n        // for each other graph, minimize chi^2 (chi) in viewport\n        for (int i = 0; i < samples.size(); i++) {\n            // (skip current)\n            if (i == plot.current)\n                continue;\n            // make sure it's there at all, otherwise, don't bother.\n            // intersect(viewport, graph[i], graph[current])\n            Range range = ((Graph) samples.get(i)).getRange();\n            Range overlap = range.intersection(viewport);\n            overlap = overlap.intersection(((Graph) samples.get(plot.current)).getRange());\n            if (overlap.span() == 0)\n                continue;\n            // now, compute mean of sample[current][y] - sample[i][y]\n            List data = ((Graph) samples.get(i)).graph.getData();\n            // index into\n            int j = overlap.getStart().diff(range.getStart());\n            // data[i]\n            double dataScale = ((Graph) samples.get(i)).scale;\n            List base = ((Graph) samples.get(plot.current)).graph.getData();\n            int k = overlap.getStart().diff(// graph.getStart());\n            ((Graph) samples.get(plot.current)).getRange().getStart());\n            // //\n            // index\n            // into\n            // base=data[plot.current]\n            double baseScale = ((Graph) samples.get(plot.current)).scale;\n            double mean = 0.0;\n            for (Year y = overlap.getStart(); y.compareTo(overlap.getEnd()) <= 0; y = y.add(1)) {\n                mean += ((Number) data.get(j++)).doubleValue() * dataScale - ((Number) base.get(k++)).doubleValue() * baseScale;\n            }\n            mean /= overlap.span();\n            // make -mean its new offset\n            ((Graph) samples.get(i)).yoffset = (int) -mean;\n        }\n        // make the lowest one have yoffset=0 now\n        int min = ((Graph) samples.get(0)).yoffset;\n        for (int i = 1; i < samples.size(); i++) min = Math.min(min, ((Graph) samples.get(i)).yoffset);\n        for (int i = 0; i < samples.size(); i++) ((Graph) samples.get(i)).yoffset -= min;\n        // repaint\n        repaint();\n    }\n\n    // add a new sample\n    public void add(Sample s) {\n        // doesn't get next yoffset, is that ok?\n        samples.add(new Graph(s));\n        // (yeah, sure)\n        plot.update();\n        // be careful with the elements panel, too...\n        elemPanel.loadSamples(samples);\n        elemPanel.setSelectedIndex(plot.current);\n    }\n\n    // add a List of ELEMENTS\n    public void add(List ns) {\n        // samples\n        boolean problem = false;\n        for (int i = 0; i < ns.size(); i++) {\n            Element e = (Element) ns.get(i);\n            if (// skip inactive\n            !e.isActive())\n                continue;\n            try {\n                Sample s = e.load();\n                samples.add(new Graph(s));\n                s.addSampleListener(this);\n            } catch (IOException ioe) {\n                // ick.\n                problem = true;\n            }\n        }\n        // problem?\n        if (problem) {\n            Alert.error(\"Error loading sample(s)\", \"Some samples were not able to be loaded.\");\n        }\n        plot.update();\n        // be careful with the elements panel, too...\n        elemPanel.loadSamples(samples);\n        elemPanel.setSelectedIndex(plot.current);\n    }\n\n    public void remove(int idx) {\n        samples.remove(idx);\n        if (plot.current > samples.size())\n            plot.current--;\n        plot.update();\n        // be careful with the elements panel, too...\n        elemPanel.loadSamples(samples);\n        elemPanel.setSelectedIndex(plot.current);\n    }\n\n    //\n    // SaveableDocument\n    //\n    private String filename = null;\n\n    public boolean isSaved() {\n        // fixme: false if saved once, but modified (?)\n        return true;\n    }\n\n    // saveabledocument -- yes, we can use save as...\n    public boolean isNameChangeable() {\n        return true;\n    }\n\n    public void save() {\n        // copied from gridder.java -- refactor?\n        if (filename == null) {\n            try {\n                filename = FileDialog.showSingle(\"Save\");\n                // check for already-exists\n                Overwrite.overwrite(filename);\n            } catch (UserCancelledException uce) {\n                return;\n            }\n        }\n        // REFACTOR: combine these try-catch clauses!\n        // save!\n        try {\n            LoadSave.save(filename, samples);\n        } catch (IOException ioe) {\n            // error!\n            Alert.error(\"Error saving\", \"Error: \" + ioe.getMessage());\n        }\n    }\n\n    public void setFilename(String fn) {\n        filename = fn;\n    }\n\n    public String getFilename() {\n        return filename;\n    }\n\n    public String getDocumentTitle() {\n        return getTitle();\n    }\n\n    //\n    // PrintableDocument\n    //\n    public Object getPrinter(PageFormat pf) {\n        // !!! -- what about pf?\n        return this;\n    }\n\n    public String getPrintTitle() {\n        String s = \"Graph: \" + samples.get(0);\n        if (samples.size() > 1)\n            s += \", and others\";\n        return s;\n    }\n\n    // Printable\n    public int print(Graphics graphics, PageFormat pageFormat, int pageIndex) {\n        // only 1 page, at least yet\n        if (pageIndex != 0)\n            return NO_SUCH_PAGE;\n        // draw it\n        Graphics2D g2 = (Graphics2D) graphics;\n        double sx = pageFormat.getImageableWidth() / plot.getWidth();\n        double sy = 1;\n        g2.scale(sx, sy);\n        // ack!\n        plot.paintComponent(g2);\n        // done\n        return PAGE_EXISTS;\n    }\n\n    public String toSVG() {\n        try {\n            // (the next 3 steps taken from\n            // http://xml.apache.org/batik/svggen.html)\n            // Get a DOMImplementation\n            DOMImplementation domImpl = GenericDOMImplementation.getDOMImplementation();\n            // Create an instance of org.w3c.dom.Document\n            Document document = domImpl.createDocument(null, \"svg\", null);\n            // Create an instance of the SVG Generator\n            SVGGraphics2D svgGenerator = new SVGGraphics2D(document);\n            // draw the graph to it\n            plot.paintComponent(svgGenerator);\n            // stream it to a string\n            Writer out = new StringWriter();\n            // (false = don't use css)\n            svgGenerator.stream(out, false);\n            return out.toString();\n        } catch (IOException ioe) {\n            // technically, string writers say they can throw ioe's\n            // (because writer can), but i don't think it can ever\n            // actually happen.\n            new Bug(ioe);\n            // can't happen\n            return null;\n        }\n    }\n\n    // copy this graph to the clipboard as SVG -- is this really valuable? does\n    // it work?\n    private void copyToClipboard() {\n        final String glue = toSVG();\n        // copy = svg to clipboard\n        // BROKEN: this doesn't work, for some reason. i'm not exactly\n        // sure what i'd need to do to get copy-svg-to-clipboard to work.\n        // help?\n        // REFACTOR: this would be TextClipboard.copy(glue),\n        // except it should be copied as data flavor\n        // \"image/svg+xml; class=java.lang.String\".\n        Clipboard c = Toolkit.getDefaultToolkit().getSystemClipboard();\n        try {\n            final DataFlavor f = new DataFlavor(\"image/svg+xml; class=java.lang.String\");\n            Transferable t = new Transferable() {\n\n                public Object getTransferData(DataFlavor flavor) throws UnsupportedFlavorException {\n                    if (f.equals(flavor))\n                        return glue;\n                    else\n                        throw new UnsupportedFlavorException(flavor);\n                }\n\n                public DataFlavor[] getTransferDataFlavors() {\n                    return new DataFlavor[] { f };\n                }\n\n                public boolean isDataFlavorSupported(DataFlavor flavor) {\n                    return f.equals(flavor);\n                }\n            };\n            ClipboardOwner o = new ClipboardOwner() {\n\n                public void lostOwnership(Clipboard clipboard, Transferable contents) {\n                    // who cares?\n                }\n            };\n            c.setContents(t, o);\n            // TextClipboard.copy(out.toString());\n        } catch (ClassNotFoundException cnfe) {\n            // !!!\n            System.out.println(\"cnfe!\");\n        }\n    }\n\n    // drop target\n    private DropTargetListener dtl;\n\n    // construct a GrapherPanel, add a GrapherListener, etc.\n    private void createPanelAndDisplay() {\n        // initialize our plotting agents\n        agents = new PlotAgents();\n        // create a graph panel; put it in a scroll pane\n        plot = new GrapherPanel(samples, agents, this);\n        scroller = new JScrollPane(plot, ScrollPaneConstants.VERTICAL_SCROLLBAR_NEVER, ScrollPaneConstants.HORIZONTAL_SCROLLBAR_ALWAYS);\n        JPanel content = new JPanel(new BorderLayout());\n        setContentPane(content);\n        elemPanel = new GraphElementsPanel(samples, this);\n        content.add(elemPanel, BorderLayout.EAST);\n        content.add(scroller, BorderLayout.CENTER);\n        // re-enable me when graph toolbar is done\n        //content.add(new GraphToolbar(this), BorderLayout.NORTH);\n        elemPanel.setVisible(false);\n        // set initial y-offsets: spread 'em out\n        spreadOut(50);\n        // corner!\n        JLabel black = new JLabel();\n        black.setBackground(Color.getColor(\"corina.graph.background\", Color.black));\n        black.setOpaque(true);\n        scroller.setCorner(JScrollPane.LOWER_LEFT_CORNER, black);\n        // to set the initial title\n        plot.updateTitle();\n        // to turn on baselines and vert axis, if enabled...\n        plot.postScrollpanedInit();\n        // special case: if there's an Index, align baselines (ugly test!)\n        // REFACTOR: this doesn't do anything, does it?\n        if (samples.size() == 2 && ((((Graph) samples.get(0)).graph instanceof Index) || (((Graph) samples.get(1)).graph instanceof Index)))\n            squeezeTogether();\n        // ooh, menubar\n        {\n            JMenuBar menubar = new JMenuBar();\n            menubar.add(new GraphFileMenu(this));\n            menubar.add(new GraphEditMenu(this));\n            menubar.add(new GraphViewMenu(this));\n            if (App.platform.isMac())\n                menubar.add(new WindowMenu(this));\n            menubar.add(new HelpMenu());\n            setJMenuBar(menubar);\n        }\n        // drag-n-drop\n        dtl = new DropPlotter(this);\n        // on the menubar!\n        DropTarget t1 = new DropTarget(getJMenuBar(), dtl);\n        // on the plot!\n        DropTarget t3 = new DropTarget(plot, dtl);\n        // context menu\n        final SamplePopupMenu popup = new SamplePopupMenu();\n        plot.addMouseListener(new PopupListener() {\n\n            public void showPopup(MouseEvent e) {\n                // select this graph\n                int n = plot.getGraphAt(e.getPoint());\n                // not on a graph? bail.\n                if (n == -1)\n                    return;\n                // select it\n                plot.current = n;\n                plot.repaint();\n                elemPanel.setSelectedIndex(plot.current);\n                // show the popup\n                popup.setSample((Sample) ((Graph) plot.graphs.get(plot.current)).graph);\n                popup.show(e.getComponent(), e.getX(), e.getY());\n            }\n        });\n        // IDEA: if you set a member variable currentSample(?) whenever a new\n        // sample is selected, you can simply say\n        // new PopupListener(popup, plot)\n        // here.\n        App.prefs.addPrefsListener(this);\n        // display the window\n        pack();\n        show();\n        // give it focus, so you don't have to tab to it\n        // must be after show(), i think\n        plot.requestFocus();\n        // scroll to start of second graph\n        scrollToSecondGraph();\n    }\n\n    // if there's more than one sample, scroll to start of\n    // overlap, i.e., the start of the SECOND graph. (there's\n    // certainly a better way to do this.)\n    private void scrollToSecondGraph() {\n        if (samples.size() == 1)\n            return;\n        // FIXME: this only makes sense if the graphs overlap.\n        // if they don't ... ?\n        // make y1, y2 the start of the first 2 graphs\n        Year y1 = getStartOfGraph(0);\n        Year y2 = getStartOfGraph(1);\n        if (y1.compareTo(y2) > 0) {\n            Year tmp = y1;\n            y1 = y2;\n            y2 = tmp;\n        }\n        // loop through the rest, keeping y1,y2 the first two, yearwise\n        for (int i = 2; i < samples.size(); i++) {\n            Year yi = getStartOfGraph(i);\n            if (yi.compareTo(y1) < 0) {\n                y2 = y1;\n                y1 = yi;\n            } else if (yi.compareTo(y2) < 0) {\n                y2 = yi;\n            }\n        }\n        // scroll to 1 year before the second one\n        scrollTo(y2.add(-1));\n    }\n\n    // ?\n    private Year getStartOfGraph(int i) {\n        Graph g = (Graph) samples.get(i);\n        return g.graph.getStart().add(g.xoffset);\n    }\n\n    // ----------------------------------------------------------------------\n    // below here is just various constructors\n    //\n    /**\n     * Graph a single Sample.\n     *\n     * @param s\n     *            the Sample to graph\n     */\n    public GraphWindow(Sample s) {\n        // samples\n        // 2 things, max\n        samples = new ArrayList(2);\n        samples.add(new Graph(s));\n        // summed -- add count, too\n        if (s.isSummed())\n            samples.add(new Graph(s.count, s.range.getStart(), I18n.getText(\"number_of_samples\")));\n        // observe\n        s.addSampleListener(this);\n        // go\n        createPanelAndDisplay();\n    }\n\n    /**\n     * Graph all the files in a List of Elements.\n     *\n     * @param ss\n     *            the List to get the Elements from\n     */\n    public GraphWindow(List ss) {\n        // samples\n        boolean problem = false;\n        samples = new ArrayList(ss.size());\n        for (int i = 0; i < ss.size(); i++) {\n            Element e = (Element) ss.get(i);\n            if (// skip inactive\n            !e.isActive())\n                continue;\n            try {\n                Sample s = e.load();\n                samples.add(new Graph(s));\n                s.addSampleListener(this);\n            } catch (IOException ioe) {\n                // ick.\n                problem = true;\n            }\n        }\n        // problem?\n        if (problem) {\n            Alert.error(\"Error loading sample(s)\", \"Some samples were not able to be loaded.\");\n        }\n        // no samples => don't bother doing anything\n        if (samples.isEmpty()) {\n            dispose();\n            return;\n        }\n        // go\n        createPanelAndDisplay();\n    }\n\n    /**\n     * Graph all the files in a List of Elements AND\n     * a single sample to go with it.\n     *\n     * @param s\n     *            the Sample to graph\n     *\n     * @param ss\n     *            the List to get the Elements from\n     */\n    public GraphWindow(Sample s, List ss) {\n        // samples\n        boolean problem = false;\n        samples = new ArrayList(ss.size() + 2);\n        samples.add(new Graph(s));\n        // summed -- add count, too\n        if (s.isSummed())\n            samples.add(new Graph(s.count, s.range.getStart(), I18n.getText(\"number_of_samples\")));\n        // observe\n        s.addSampleListener(this);\n        for (int i = 0; i < ss.size(); i++) {\n            Element e = (Element) ss.get(i);\n            if (// skip inactive\n            !e.isActive())\n                continue;\n            try {\n                Sample ns = e.load();\n                samples.add(new Graph(ns));\n                ns.addSampleListener(this);\n            } catch (IOException ioe) {\n                // ick.\n                problem = true;\n            }\n        }\n        // problem?\n        if (problem) {\n            Alert.error(\"Error loading sample(s)\", \"Some samples were not able to be loaded.\");\n        }\n        // no samples => don't bother doing anything\n        if (samples.isEmpty()) {\n            dispose();\n            return;\n        }\n        // go\n        createPanelAndDisplay();\n    }\n\n    /**\n     * Graph any files the user chooses.\n     */\n    public GraphWindow() {\n        // get samples\n        List ss = null;\n        try {\n            ss = FileDialog.showMulti(I18n.getText(\"plot\"));\n        } catch (UserCancelledException uce) {\n            dispose();\n            return;\n        }\n        // REFACTOR: everything below this point is the same as\n        // GraphWindow(List)\n        // samples\n        boolean problem = false;\n        samples = new ArrayList(ss.size());\n        for (int i = 0; i < ss.size(); i++) {\n            Element e = (Element) ss.get(i);\n            if (// skip inactive\n            !e.isActive())\n                continue;\n            try {\n                Sample s = e.load();\n                samples.add(new Graph(s));\n                s.addSampleListener(this);\n            } catch (IOException ioe) {\n                // ick.\n                problem = true;\n            }\n        }\n        // problem?\n        if (problem) {\n            Alert.error(\"Error loading sample(s)\", \"Some samples were not able to be loaded.\");\n        }\n        // no samples => don't bother doing anything\n        if (samples.isEmpty()) {\n            dispose();\n            return;\n        }\n        // go\n        createPanelAndDisplay();\n    }\n\n    /**\n     * Graph an Index, and its target Sample.\n     *\n     * @param i\n     *            the Index to graph\n     */\n    public GraphWindow(Index i) {\n        // samples\n        samples = new ArrayList(2);\n        samples.add(new Graph(i.getTarget()));\n        samples.add(new Graph(i));\n        // go\n        createPanelAndDisplay();\n    }\n\n    /**\n     * Graph the two samples of a Cross, at one of the statistically significant\n     * overlaps. The graph is automatically scrolled to the start of the overlap\n     * interval.\n     *\n     * @param c\n     *            the Cross to graph\n     * @param movingPosition\n     *            the end-year of the moving sample of the cross to graph\n     */\n    public GraphWindow(Cross c, Year movingPosition) {\n        // careful!\n        Graph tmp;\n        // samples\n        samples = new ArrayList(2);\n        samples.add(new Graph(c.getFixed()));\n        samples.add(tmp = new Graph(c.getMoving()));\n        // compute offset of moving sample\n        tmp.xoffset = movingPosition.diff(c.getMoving().range.getEnd());\n        // go\n        createPanelAndDisplay();\n    }\n\n    /**\n     * (Re)create a plot that was saved to disk.\n     *\n     * @param filename\n     *            the filename of the plot to load\n     */\n    public GraphWindow(String filename) throws WrongFiletypeException {\n        // load\n        try {\n            samples = LoadSave.load(filename);\n        } catch (IOException ioe) {\n            throw new WrongFiletypeException();\n        }\n        // no files loaded? ouch.\n        if (samples.isEmpty())\n            throw new WrongFiletypeException();\n        // record filename\n        this.filename = filename;\n        // it worked, display it\n        createPanelAndDisplay();\n    }\n\n    // scroll the left side to a particular year\n    public void scrollTo(Year y) {\n        // compute how much to scroll\n        int dy = Math.abs(y.diff(plot.getRange().getStart()));\n        // scroll\n        scroller.getHorizontalScrollBar().setValue(dy * plot.getYearWidth());\n    }\n\n    public void panelSelectionChanged() {\n        if (elemPanel.getSelectedIndex() != plot.current) {\n            elemPanel.setSelectedIndex(plot.current);\n            Graph g = (Graph) samples.get(plot.current);\n            Color gcolor = g.getColor(false);\n            elemPanel.setColor(gcolor);\n        }\n    }\n\n    public void listSelectionChanged() {\n        if (plot.current == elemPanel.getSelectedIndex() || elemPanel.getSelectedIndex() < 0)\n            return;\n        // select it\n        plot.current = elemPanel.getSelectedIndex();\n        Graph g = (Graph) samples.get(plot.current);\n        Color gcolor = g.getColor(false);\n        elemPanel.setColor(gcolor);\n        plot.repaint();\n        plot.updateTitle();\n    }\n\n    public void setActiveColor(Color c) {\n        Graph g = (Graph) plot.graphs.get(plot.current);\n        g.setColor(c, c);\n        plot.repaint();\n    }\n\n    // live-updating preferences\n    public void prefChanged(PrefsEvent e) {\n        plot.update();\n        repaint();\n    }\n\n    protected void finalize() throws Throwable {\n        super.finalize();\n        App.prefs.removePrefsListener(this);\n    }\n}\n",
		"id": "/EvoSuiteBenchmark/35_corina/src/main/java/corina/graph/GraphWindow_2Test.java",
		"test_prompt": "// GraphWindow_2Test.java\n// This file is part of Corina.\n//\n// Corina is free software; you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation; either version 2 of the License, or\n// (at your option) any later version.\n//\n// Corina is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Corina; if not, write to the Free Software\n// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n//\n// Copyright 2001 Ken Harris <kbh7@cornell.edu>\n//\npackage corina.graph;\n\nimport java.awt.Color;\nimport java.awt.Graphics;\nimport java.awt.Graphics2D;\nimport java.awt.Toolkit;\nimport java.awt.datatransfer.Clipboard;\nimport java.awt.datatransfer.ClipboardOwner;\nimport java.awt.datatransfer.DataFlavor;\nimport java.awt.datatransfer.Transferable;\nimport java.awt.datatransfer.UnsupportedFlavorException;\nimport java.awt.dnd.DropTarget;\nimport java.awt.dnd.DropTargetListener;\nimport java.awt.event.MouseEvent;\nimport java.awt.print.PageFormat;\nimport java.awt.print.Printable;\nimport java.io.IOException;\nimport java.io.StringWriter;\nimport java.io.Writer;\nimport java.util.ArrayList;\nimport java.util.List;\nimport javax.swing.JLabel;\nimport javax.swing.JMenuBar;\nimport javax.swing.JScrollPane;\nimport javax.swing.ScrollPaneConstants;\nimport javax.swing.JPanel;\nimport java.awt.BorderLayout;\nimport org.apache.batik.dom.GenericDOMImplementation;\nimport org.apache.batik.svggen.SVGGraphics2D;\nimport org.w3c.dom.DOMImplementation;\nimport org.w3c.dom.Document;\nimport corina.Element;\nimport corina.Range;\nimport corina.Sample;\nimport corina.SampleEvent;\nimport corina.SampleListener;\nimport corina.Year;\nimport corina.core.App;\nimport corina.cross.Cross;\nimport corina.formats.WrongFiletypeException;\nimport corina.gui.Bug;\nimport corina.gui.FileDialog;\nimport corina.gui.SaveableDocument;\nimport corina.gui.UserCancelledException;\nimport corina.gui.XFrame;\nimport corina.gui.menus.FileMenu;\nimport corina.gui.menus.HelpMenu;\nimport corina.gui.menus.WindowMenu;\nimport corina.index.Index;\nimport corina.prefs.PrefsEvent;\nimport corina.prefs.PrefsListener;\nimport corina.ui.Alert;\nimport corina.ui.I18n;\nimport corina.util.Overwrite;\nimport corina.util.PopupListener;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link GraphWindow}.\n* It contains ten unit test cases for the {@link GraphWindow#print(Graphics, PageFormat, int)} method.\n*/\nclass GraphWindow_2Test {"
	},
	{
		"original_code": "// GraphWindow.java\n//\n// This file is part of Corina.\n//\n// Corina is free software; you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation; either version 2 of the License, or\n// (at your option) any later version.\n//\n// Corina is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Corina; if not, write to the Free Software\n// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n//\n// Copyright 2001 Ken Harris <kbh7@cornell.edu>\n//\npackage corina.graph;\n\nimport java.awt.Color;\nimport java.awt.Graphics;\nimport java.awt.Graphics2D;\nimport java.awt.Toolkit;\nimport java.awt.datatransfer.Clipboard;\nimport java.awt.datatransfer.ClipboardOwner;\nimport java.awt.datatransfer.DataFlavor;\nimport java.awt.datatransfer.Transferable;\nimport java.awt.datatransfer.UnsupportedFlavorException;\nimport java.awt.dnd.DropTarget;\nimport java.awt.dnd.DropTargetListener;\nimport java.awt.event.MouseEvent;\nimport java.awt.print.PageFormat;\nimport java.awt.print.Printable;\nimport java.io.IOException;\nimport java.io.StringWriter;\nimport java.io.Writer;\nimport java.util.ArrayList;\nimport java.util.List;\nimport javax.swing.JLabel;\nimport javax.swing.JMenuBar;\nimport javax.swing.JScrollPane;\nimport javax.swing.ScrollPaneConstants;\nimport javax.swing.JPanel;\nimport java.awt.BorderLayout;\nimport org.apache.batik.dom.GenericDOMImplementation;\nimport org.apache.batik.svggen.SVGGraphics2D;\nimport org.w3c.dom.DOMImplementation;\nimport org.w3c.dom.Document;\nimport corina.Element;\nimport corina.Range;\nimport corina.Sample;\nimport corina.SampleEvent;\nimport corina.SampleListener;\nimport corina.Year;\nimport corina.core.App;\nimport corina.cross.Cross;\nimport corina.formats.WrongFiletypeException;\nimport corina.gui.Bug;\nimport corina.gui.FileDialog;\nimport corina.gui.SaveableDocument;\nimport corina.gui.UserCancelledException;\nimport corina.gui.XFrame;\nimport corina.gui.menus.FileMenu;\nimport corina.gui.menus.HelpMenu;\nimport corina.gui.menus.WindowMenu;\nimport corina.index.Index;\nimport corina.prefs.PrefsEvent;\nimport corina.prefs.PrefsListener;\nimport corina.ui.Alert;\nimport corina.ui.I18n;\nimport corina.util.Overwrite;\nimport corina.util.PopupListener;\n\n/**\n * A graph. It graphs any number of samples (or any Graphable) and allows the\n * user to scroll, slide the samples up/down/left/right, and scale them\n * vertically.\n *\n * @see Graphable\n *\n * @author Ken Harris &lt;kbh7 <i style=\"color: gray\">at</i> cornell <i\n *         style=\"color: gray\">dot</i> edu&gt;\n * @version $Id: GraphWindow.java,v 1.17 2006/07/25 17:45:07 lucasmo Exp $\n */\n// TODO:\n// -- clean up .* imports: swing, awt.event\n// -- extract some parts: svg exporting, printing?, png exporting?\n// -- extract squish? (all 3?)\n// -- make this use either GrapherPanel or BargraphPanel\n// ---- rename GrapherPanel to GraphPanel\n// ---- extract BargraphPanel from BargraphFrame\n// -- add view->as Graph, as Bargraph, as Skeleton Plot options\n// -- saving should save the same format for any of these, with a \"type=\"\n// -- printing should print the current view (ask the view to print it)\n// -- if you drag onto the graph panel (while scrolling), don't draw cursor\n// -- \"mark all drops\" feature\n// -- put \"-1\" on x-axis, too?\n// -- mark -1 and +1 with longer ticks\npublic class GraphWindow extends XFrame implements SampleListener, SaveableDocument, // DISABLED until printing works better:\n// PrintableDocument,\nPrintable, PrefsListener {\n\n    // SampleListener\n    private void update(Sample s) {\n        // data/format changed, need to recheck getScale();\n        // BUG?: if data changed, but not format, won't this be unnecesary at\n        // best, wrong at worst?\n        // REFACTOR: why isn't this a 1-liner?\n        // (reset-scale (find :key #'graph s plot.graphs))\n        for (int i = 0; i < plot.graphs.size(); i++) {\n            Graph g = (Graph) plot.graphs.get(i);\n            if (g.graph == s) {\n                g.scale = g.graph.getScale();\n                break;\n            }\n        }\n        // repaint\n        repaint();\n    }\n\n    public void sampleRedated(SampleEvent e) {\n        /* FIXME: handle this */\n        update((Sample) e.getSource());\n        // TODO: update title, too?\n    }\n\n    public void sampleDataChanged(SampleEvent e) {\n        update((Sample) e.getSource());\n    }\n\n    public void sampleMetadataChanged(SampleEvent e) {\n        // title might have changed\n        plot.updateTitle();\n        // TODO: only if field=title?\n        // TODO: make this: only if field==format!\n        update((Sample) e.getSource());\n    }\n\n    public void sampleElementsChanged(SampleEvent e) {\n    }\n\n    // gui\n    // the plot area itself\n    public GrapherPanel plot;\n\n    public PlotAgents agents;\n\n    public GraphElementsPanel elemPanel;\n\n    // scroller enclosing the plot\n    private JScrollPane scroller;\n\n    // data\n    // of Graph\n    private List samples;\n\n    // adjust vertical spacing\n    public void squeezeTogether() {\n        for (int i = 0; i < samples.size(); i++) ((Graph) samples.get(i)).yoffset = 0;\n        repaint();\n    }\n\n    public void spreadOut(int units) {\n        for (int i = 0; i < samples.size(); i++) ((Graph) samples.get(i)).yoffset = i * units;\n        repaint();\n    }\n\n    public void halveScale() {\n        for (int i = 0; i < samples.size(); i++) {\n            Graph g = (Graph) samples.get(i);\n            g.scale /= 2;\n        }\n        repaint();\n    }\n\n    public void doubleScale() {\n        for (int i = 0; i < samples.size(); i++) {\n            Graph g = (Graph) samples.get(i);\n            g.scale *= 2;\n        }\n        repaint();\n    }\n\n    public void resetScaling() {\n        for (int i = 0; i < samples.size(); i++) {\n            Graph g = (Graph) samples.get(i);\n            g.scale = g.graph.getScale();\n        }\n        repaint();\n    }\n\n    public void scaleToFitWidth() {\n        int viewportSize = scroller.getWidth();\n        int nYears = plot.getGraphingRange().span() + 2;\n        // viewportSize is the number of pixels.\n        // nyears =\n        int ppy = viewportSize / nYears;\n        plot.forceYearWidth(ppy);\n        repaint();\n        scrollTo(plot.getGraphingRange().getStart());\n    }\n\n    public void scaleToFitHeight() {\n        int bottom = plot.getHeight() - GrapherPanel.AXIS_HEIGHT;\n        int maxheight = plot.getMaxPixelHeight();\n        int uph = (int) (10.0 * bottom / maxheight);\n        plot.forceUnitHeight(uph);\n        repaint();\n    }\n\n    public void squishTogether() {\n        // squish together samples in visible window\n        // BUG: assumes sample[current] is visible.\n        // first, set samples[current] = 0\n        ((Graph) samples.get(plot.current)).yoffset = 0;\n        // compute viewport range\n        // REFACTOR: write a getYearForPoint() method, and call that on both\n        // ends of the visible JViewPane\n        Year viewportLeft = plot.getRange().getStart().add(scroller.getHorizontalScrollBar().getValue() / plot.getYearWidth());\n        int viewportSize = scroller.getWidth() / plot.getYearWidth();\n        Range viewport = new Range(viewportLeft, viewportSize);\n        // idea: emphasize middle 50% of viewport\n        // for each other graph, minimize chi^2 (chi) in viewport\n        for (int i = 0; i < samples.size(); i++) {\n            // (skip current)\n            if (i == plot.current)\n                continue;\n            // make sure it's there at all, otherwise, don't bother.\n            // intersect(viewport, graph[i], graph[current])\n            Range range = ((Graph) samples.get(i)).getRange();\n            Range overlap = range.intersection(viewport);\n            overlap = overlap.intersection(((Graph) samples.get(plot.current)).getRange());\n            if (overlap.span() == 0)\n                continue;\n            // now, compute mean of sample[current][y] - sample[i][y]\n            List data = ((Graph) samples.get(i)).graph.getData();\n            // index into\n            int j = overlap.getStart().diff(range.getStart());\n            // data[i]\n            double dataScale = ((Graph) samples.get(i)).scale;\n            List base = ((Graph) samples.get(plot.current)).graph.getData();\n            int k = overlap.getStart().diff(// graph.getStart());\n            ((Graph) samples.get(plot.current)).getRange().getStart());\n            // //\n            // index\n            // into\n            // base=data[plot.current]\n            double baseScale = ((Graph) samples.get(plot.current)).scale;\n            double mean = 0.0;\n            for (Year y = overlap.getStart(); y.compareTo(overlap.getEnd()) <= 0; y = y.add(1)) {\n                mean += ((Number) data.get(j++)).doubleValue() * dataScale - ((Number) base.get(k++)).doubleValue() * baseScale;\n            }\n            mean /= overlap.span();\n            // make -mean its new offset\n            ((Graph) samples.get(i)).yoffset = (int) -mean;\n        }\n        // make the lowest one have yoffset=0 now\n        int min = ((Graph) samples.get(0)).yoffset;\n        for (int i = 1; i < samples.size(); i++) min = Math.min(min, ((Graph) samples.get(i)).yoffset);\n        for (int i = 0; i < samples.size(); i++) ((Graph) samples.get(i)).yoffset -= min;\n        // repaint\n        repaint();\n    }\n\n    // add a new sample\n    public void add(Sample s) {\n        // doesn't get next yoffset, is that ok?\n        samples.add(new Graph(s));\n        // (yeah, sure)\n        plot.update();\n        // be careful with the elements panel, too...\n        elemPanel.loadSamples(samples);\n        elemPanel.setSelectedIndex(plot.current);\n    }\n\n    // add a List of ELEMENTS\n    public void add(List ns) {\n        // samples\n        boolean problem = false;\n        for (int i = 0; i < ns.size(); i++) {\n            Element e = (Element) ns.get(i);\n            if (// skip inactive\n            !e.isActive())\n                continue;\n            try {\n                Sample s = e.load();\n                samples.add(new Graph(s));\n                s.addSampleListener(this);\n            } catch (IOException ioe) {\n                // ick.\n                problem = true;\n            }\n        }\n        // problem?\n        if (problem) {\n            Alert.error(\"Error loading sample(s)\", \"Some samples were not able to be loaded.\");\n        }\n        plot.update();\n        // be careful with the elements panel, too...\n        elemPanel.loadSamples(samples);\n        elemPanel.setSelectedIndex(plot.current);\n    }\n\n    public void remove(int idx) {\n        samples.remove(idx);\n        if (plot.current > samples.size())\n            plot.current--;\n        plot.update();\n        // be careful with the elements panel, too...\n        elemPanel.loadSamples(samples);\n        elemPanel.setSelectedIndex(plot.current);\n    }\n\n    //\n    // SaveableDocument\n    //\n    private String filename = null;\n\n    public boolean isSaved() {\n        // fixme: false if saved once, but modified (?)\n        return true;\n    }\n\n    // saveabledocument -- yes, we can use save as...\n    public boolean isNameChangeable() {\n        return true;\n    }\n\n    public void save() {\n        // copied from gridder.java -- refactor?\n        if (filename == null) {\n            try {\n                filename = FileDialog.showSingle(\"Save\");\n                // check for already-exists\n                Overwrite.overwrite(filename);\n            } catch (UserCancelledException uce) {\n                return;\n            }\n        }\n        // REFACTOR: combine these try-catch clauses!\n        // save!\n        try {\n            LoadSave.save(filename, samples);\n        } catch (IOException ioe) {\n            // error!\n            Alert.error(\"Error saving\", \"Error: \" + ioe.getMessage());\n        }\n    }\n\n    public void setFilename(String fn) {\n        filename = fn;\n    }\n\n    public String getFilename() {\n        return filename;\n    }\n\n    public String getDocumentTitle() {\n        return getTitle();\n    }\n\n    //\n    // PrintableDocument\n    //\n    public Object getPrinter(PageFormat pf) {\n        // !!! -- what about pf?\n        return this;\n    }\n\n    public String getPrintTitle() {\n        String s = \"Graph: \" + samples.get(0);\n        if (samples.size() > 1)\n            s += \", and others\";\n        return s;\n    }\n\n    // Printable\n    public int print(Graphics graphics, PageFormat pageFormat, int pageIndex) {\n        // only 1 page, at least yet\n        if (pageIndex != 0)\n            return NO_SUCH_PAGE;\n        // draw it\n        Graphics2D g2 = (Graphics2D) graphics;\n        double sx = pageFormat.getImageableWidth() / plot.getWidth();\n        double sy = 1;\n        g2.scale(sx, sy);\n        // ack!\n        plot.paintComponent(g2);\n        // done\n        return PAGE_EXISTS;\n    }\n\n    public String toSVG() {\n        try {\n            // (the next 3 steps taken from\n            // http://xml.apache.org/batik/svggen.html)\n            // Get a DOMImplementation\n            DOMImplementation domImpl = GenericDOMImplementation.getDOMImplementation();\n            // Create an instance of org.w3c.dom.Document\n            Document document = domImpl.createDocument(null, \"svg\", null);\n            // Create an instance of the SVG Generator\n            SVGGraphics2D svgGenerator = new SVGGraphics2D(document);\n            // draw the graph to it\n            plot.paintComponent(svgGenerator);\n            // stream it to a string\n            Writer out = new StringWriter();\n            // (false = don't use css)\n            svgGenerator.stream(out, false);\n            return out.toString();\n        } catch (IOException ioe) {\n            // technically, string writers say they can throw ioe's\n            // (because writer can), but i don't think it can ever\n            // actually happen.\n            new Bug(ioe);\n            // can't happen\n            return null;\n        }\n    }\n\n    // copy this graph to the clipboard as SVG -- is this really valuable? does\n    // it work?\n    private void copyToClipboard() {\n        final String glue = toSVG();\n        // copy = svg to clipboard\n        // BROKEN: this doesn't work, for some reason. i'm not exactly\n        // sure what i'd need to do to get copy-svg-to-clipboard to work.\n        // help?\n        // REFACTOR: this would be TextClipboard.copy(glue),\n        // except it should be copied as data flavor\n        // \"image/svg+xml; class=java.lang.String\".\n        Clipboard c = Toolkit.getDefaultToolkit().getSystemClipboard();\n        try {\n            final DataFlavor f = new DataFlavor(\"image/svg+xml; class=java.lang.String\");\n            Transferable t = new Transferable() {\n\n                public Object getTransferData(DataFlavor flavor) throws UnsupportedFlavorException {\n                    if (f.equals(flavor))\n                        return glue;\n                    else\n                        throw new UnsupportedFlavorException(flavor);\n                }\n\n                public DataFlavor[] getTransferDataFlavors() {\n                    return new DataFlavor[] { f };\n                }\n\n                public boolean isDataFlavorSupported(DataFlavor flavor) {\n                    return f.equals(flavor);\n                }\n            };\n            ClipboardOwner o = new ClipboardOwner() {\n\n                public void lostOwnership(Clipboard clipboard, Transferable contents) {\n                    // who cares?\n                }\n            };\n            c.setContents(t, o);\n            // TextClipboard.copy(out.toString());\n        } catch (ClassNotFoundException cnfe) {\n            // !!!\n            System.out.println(\"cnfe!\");\n        }\n    }\n\n    // drop target\n    private DropTargetListener dtl;\n\n    // construct a GrapherPanel, add a GrapherListener, etc.\n    private void createPanelAndDisplay() {\n        // initialize our plotting agents\n        agents = new PlotAgents();\n        // create a graph panel; put it in a scroll pane\n        plot = new GrapherPanel(samples, agents, this);\n        scroller = new JScrollPane(plot, ScrollPaneConstants.VERTICAL_SCROLLBAR_NEVER, ScrollPaneConstants.HORIZONTAL_SCROLLBAR_ALWAYS);\n        JPanel content = new JPanel(new BorderLayout());\n        setContentPane(content);\n        elemPanel = new GraphElementsPanel(samples, this);\n        content.add(elemPanel, BorderLayout.EAST);\n        content.add(scroller, BorderLayout.CENTER);\n        // re-enable me when graph toolbar is done\n        //content.add(new GraphToolbar(this), BorderLayout.NORTH);\n        elemPanel.setVisible(false);\n        // set initial y-offsets: spread 'em out\n        spreadOut(50);\n        // corner!\n        JLabel black = new JLabel();\n        black.setBackground(Color.getColor(\"corina.graph.background\", Color.black));\n        black.setOpaque(true);\n        scroller.setCorner(JScrollPane.LOWER_LEFT_CORNER, black);\n        // to set the initial title\n        plot.updateTitle();\n        // to turn on baselines and vert axis, if enabled...\n        plot.postScrollpanedInit();\n        // special case: if there's an Index, align baselines (ugly test!)\n        // REFACTOR: this doesn't do anything, does it?\n        if (samples.size() == 2 && ((((Graph) samples.get(0)).graph instanceof Index) || (((Graph) samples.get(1)).graph instanceof Index)))\n            squeezeTogether();\n        // ooh, menubar\n        {\n            JMenuBar menubar = new JMenuBar();\n            menubar.add(new GraphFileMenu(this));\n            menubar.add(new GraphEditMenu(this));\n            menubar.add(new GraphViewMenu(this));\n            if (App.platform.isMac())\n                menubar.add(new WindowMenu(this));\n            menubar.add(new HelpMenu());\n            setJMenuBar(menubar);\n        }\n        // drag-n-drop\n        dtl = new DropPlotter(this);\n        // on the menubar!\n        DropTarget t1 = new DropTarget(getJMenuBar(), dtl);\n        // on the plot!\n        DropTarget t3 = new DropTarget(plot, dtl);\n        // context menu\n        final SamplePopupMenu popup = new SamplePopupMenu();\n        plot.addMouseListener(new PopupListener() {\n\n            public void showPopup(MouseEvent e) {\n                // select this graph\n                int n = plot.getGraphAt(e.getPoint());\n                // not on a graph? bail.\n                if (n == -1)\n                    return;\n                // select it\n                plot.current = n;\n                plot.repaint();\n                elemPanel.setSelectedIndex(plot.current);\n                // show the popup\n                popup.setSample((Sample) ((Graph) plot.graphs.get(plot.current)).graph);\n                popup.show(e.getComponent(), e.getX(), e.getY());\n            }\n        });\n        // IDEA: if you set a member variable currentSample(?) whenever a new\n        // sample is selected, you can simply say\n        // new PopupListener(popup, plot)\n        // here.\n        App.prefs.addPrefsListener(this);\n        // display the window\n        pack();\n        show();\n        // give it focus, so you don't have to tab to it\n        // must be after show(), i think\n        plot.requestFocus();\n        // scroll to start of second graph\n        scrollToSecondGraph();\n    }\n\n    // if there's more than one sample, scroll to start of\n    // overlap, i.e., the start of the SECOND graph. (there's\n    // certainly a better way to do this.)\n    private void scrollToSecondGraph() {\n        if (samples.size() == 1)\n            return;\n        // FIXME: this only makes sense if the graphs overlap.\n        // if they don't ... ?\n        // make y1, y2 the start of the first 2 graphs\n        Year y1 = getStartOfGraph(0);\n        Year y2 = getStartOfGraph(1);\n        if (y1.compareTo(y2) > 0) {\n            Year tmp = y1;\n            y1 = y2;\n            y2 = tmp;\n        }\n        // loop through the rest, keeping y1,y2 the first two, yearwise\n        for (int i = 2; i < samples.size(); i++) {\n            Year yi = getStartOfGraph(i);\n            if (yi.compareTo(y1) < 0) {\n                y2 = y1;\n                y1 = yi;\n            } else if (yi.compareTo(y2) < 0) {\n                y2 = yi;\n            }\n        }\n        // scroll to 1 year before the second one\n        scrollTo(y2.add(-1));\n    }\n\n    // ?\n    private Year getStartOfGraph(int i) {\n        Graph g = (Graph) samples.get(i);\n        return g.graph.getStart().add(g.xoffset);\n    }\n\n    // ----------------------------------------------------------------------\n    // below here is just various constructors\n    //\n    /**\n     * Graph a single Sample.\n     *\n     * @param s\n     *            the Sample to graph\n     */\n    public GraphWindow(Sample s) {\n        // samples\n        // 2 things, max\n        samples = new ArrayList(2);\n        samples.add(new Graph(s));\n        // summed -- add count, too\n        if (s.isSummed())\n            samples.add(new Graph(s.count, s.range.getStart(), I18n.getText(\"number_of_samples\")));\n        // observe\n        s.addSampleListener(this);\n        // go\n        createPanelAndDisplay();\n    }\n\n    /**\n     * Graph all the files in a List of Elements.\n     *\n     * @param ss\n     *            the List to get the Elements from\n     */\n    public GraphWindow(List ss) {\n        // samples\n        boolean problem = false;\n        samples = new ArrayList(ss.size());\n        for (int i = 0; i < ss.size(); i++) {\n            Element e = (Element) ss.get(i);\n            if (// skip inactive\n            !e.isActive())\n                continue;\n            try {\n                Sample s = e.load();\n                samples.add(new Graph(s));\n                s.addSampleListener(this);\n            } catch (IOException ioe) {\n                // ick.\n                problem = true;\n            }\n        }\n        // problem?\n        if (problem) {\n            Alert.error(\"Error loading sample(s)\", \"Some samples were not able to be loaded.\");\n        }\n        // no samples => don't bother doing anything\n        if (samples.isEmpty()) {\n            dispose();\n            return;\n        }\n        // go\n        createPanelAndDisplay();\n    }\n\n    /**\n     * Graph all the files in a List of Elements AND\n     * a single sample to go with it.\n     *\n     * @param s\n     *            the Sample to graph\n     *\n     * @param ss\n     *            the List to get the Elements from\n     */\n    public GraphWindow(Sample s, List ss) {\n        // samples\n        boolean problem = false;\n        samples = new ArrayList(ss.size() + 2);\n        samples.add(new Graph(s));\n        // summed -- add count, too\n        if (s.isSummed())\n            samples.add(new Graph(s.count, s.range.getStart(), I18n.getText(\"number_of_samples\")));\n        // observe\n        s.addSampleListener(this);\n        for (int i = 0; i < ss.size(); i++) {\n            Element e = (Element) ss.get(i);\n            if (// skip inactive\n            !e.isActive())\n                continue;\n            try {\n                Sample ns = e.load();\n                samples.add(new Graph(ns));\n                ns.addSampleListener(this);\n            } catch (IOException ioe) {\n                // ick.\n                problem = true;\n            }\n        }\n        // problem?\n        if (problem) {\n            Alert.error(\"Error loading sample(s)\", \"Some samples were not able to be loaded.\");\n        }\n        // no samples => don't bother doing anything\n        if (samples.isEmpty()) {\n            dispose();\n            return;\n        }\n        // go\n        createPanelAndDisplay();\n    }\n\n    /**\n     * Graph any files the user chooses.\n     */\n    public GraphWindow() {\n        // get samples\n        List ss = null;\n        try {\n            ss = FileDialog.showMulti(I18n.getText(\"plot\"));\n        } catch (UserCancelledException uce) {\n            dispose();\n            return;\n        }\n        // REFACTOR: everything below this point is the same as\n        // GraphWindow(List)\n        // samples\n        boolean problem = false;\n        samples = new ArrayList(ss.size());\n        for (int i = 0; i < ss.size(); i++) {\n            Element e = (Element) ss.get(i);\n            if (// skip inactive\n            !e.isActive())\n                continue;\n            try {\n                Sample s = e.load();\n                samples.add(new Graph(s));\n                s.addSampleListener(this);\n            } catch (IOException ioe) {\n                // ick.\n                problem = true;\n            }\n        }\n        // problem?\n        if (problem) {\n            Alert.error(\"Error loading sample(s)\", \"Some samples were not able to be loaded.\");\n        }\n        // no samples => don't bother doing anything\n        if (samples.isEmpty()) {\n            dispose();\n            return;\n        }\n        // go\n        createPanelAndDisplay();\n    }\n\n    /**\n     * Graph an Index, and its target Sample.\n     *\n     * @param i\n     *            the Index to graph\n     */\n    public GraphWindow(Index i) {\n        // samples\n        samples = new ArrayList(2);\n        samples.add(new Graph(i.getTarget()));\n        samples.add(new Graph(i));\n        // go\n        createPanelAndDisplay();\n    }\n\n    /**\n     * Graph the two samples of a Cross, at one of the statistically significant\n     * overlaps. The graph is automatically scrolled to the start of the overlap\n     * interval.\n     *\n     * @param c\n     *            the Cross to graph\n     * @param movingPosition\n     *            the end-year of the moving sample of the cross to graph\n     */\n    public GraphWindow(Cross c, Year movingPosition) {\n        // careful!\n        Graph tmp;\n        // samples\n        samples = new ArrayList(2);\n        samples.add(new Graph(c.getFixed()));\n        samples.add(tmp = new Graph(c.getMoving()));\n        // compute offset of moving sample\n        tmp.xoffset = movingPosition.diff(c.getMoving().range.getEnd());\n        // go\n        createPanelAndDisplay();\n    }\n\n    /**\n     * (Re)create a plot that was saved to disk.\n     *\n     * @param filename\n     *            the filename of the plot to load\n     */\n    public GraphWindow(String filename) throws WrongFiletypeException {\n        // load\n        try {\n            samples = LoadSave.load(filename);\n        } catch (IOException ioe) {\n            throw new WrongFiletypeException();\n        }\n        // no files loaded? ouch.\n        if (samples.isEmpty())\n            throw new WrongFiletypeException();\n        // record filename\n        this.filename = filename;\n        // it worked, display it\n        createPanelAndDisplay();\n    }\n\n    // scroll the left side to a particular year\n    public void scrollTo(Year y) {\n        // compute how much to scroll\n        int dy = Math.abs(y.diff(plot.getRange().getStart()));\n        // scroll\n        scroller.getHorizontalScrollBar().setValue(dy * plot.getYearWidth());\n    }\n\n    public void panelSelectionChanged() {\n        if (elemPanel.getSelectedIndex() != plot.current) {\n            elemPanel.setSelectedIndex(plot.current);\n            Graph g = (Graph) samples.get(plot.current);\n            Color gcolor = g.getColor(false);\n            elemPanel.setColor(gcolor);\n        }\n    }\n\n    public void listSelectionChanged() {\n        if (plot.current == elemPanel.getSelectedIndex() || elemPanel.getSelectedIndex() < 0)\n            return;\n        // select it\n        plot.current = elemPanel.getSelectedIndex();\n        Graph g = (Graph) samples.get(plot.current);\n        Color gcolor = g.getColor(false);\n        elemPanel.setColor(gcolor);\n        plot.repaint();\n        plot.updateTitle();\n    }\n\n    public void setActiveColor(Color c) {\n        Graph g = (Graph) plot.graphs.get(plot.current);\n        g.setColor(c, c);\n        plot.repaint();\n    }\n\n    // live-updating preferences\n    public void prefChanged(PrefsEvent e) {\n        plot.update();\n        repaint();\n    }\n\n    protected void finalize() throws Throwable {\n        super.finalize();\n        App.prefs.removePrefsListener(this);\n    }\n}\n",
		"id": "/EvoSuiteBenchmark/35_corina/src/main/java/corina/graph/GraphWindow_3Test.java",
		"test_prompt": "// GraphWindow_3Test.java\n// This file is part of Corina.\n//\n// Corina is free software; you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation; either version 2 of the License, or\n// (at your option) any later version.\n//\n// Corina is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Corina; if not, write to the Free Software\n// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n//\n// Copyright 2001 Ken Harris <kbh7@cornell.edu>\n//\npackage corina.graph;\n\nimport java.awt.Color;\nimport java.awt.Graphics;\nimport java.awt.Graphics2D;\nimport java.awt.Toolkit;\nimport java.awt.datatransfer.Clipboard;\nimport java.awt.datatransfer.ClipboardOwner;\nimport java.awt.datatransfer.DataFlavor;\nimport java.awt.datatransfer.Transferable;\nimport java.awt.datatransfer.UnsupportedFlavorException;\nimport java.awt.dnd.DropTarget;\nimport java.awt.dnd.DropTargetListener;\nimport java.awt.event.MouseEvent;\nimport java.awt.print.PageFormat;\nimport java.awt.print.Printable;\nimport java.io.IOException;\nimport java.io.StringWriter;\nimport java.io.Writer;\nimport java.util.ArrayList;\nimport java.util.List;\nimport javax.swing.JLabel;\nimport javax.swing.JMenuBar;\nimport javax.swing.JScrollPane;\nimport javax.swing.ScrollPaneConstants;\nimport javax.swing.JPanel;\nimport java.awt.BorderLayout;\nimport org.apache.batik.dom.GenericDOMImplementation;\nimport org.apache.batik.svggen.SVGGraphics2D;\nimport org.w3c.dom.DOMImplementation;\nimport org.w3c.dom.Document;\nimport corina.Element;\nimport corina.Range;\nimport corina.Sample;\nimport corina.SampleEvent;\nimport corina.SampleListener;\nimport corina.Year;\nimport corina.core.App;\nimport corina.cross.Cross;\nimport corina.formats.WrongFiletypeException;\nimport corina.gui.Bug;\nimport corina.gui.FileDialog;\nimport corina.gui.SaveableDocument;\nimport corina.gui.UserCancelledException;\nimport corina.gui.XFrame;\nimport corina.gui.menus.FileMenu;\nimport corina.gui.menus.HelpMenu;\nimport corina.gui.menus.WindowMenu;\nimport corina.index.Index;\nimport corina.prefs.PrefsEvent;\nimport corina.prefs.PrefsListener;\nimport corina.ui.Alert;\nimport corina.ui.I18n;\nimport corina.util.Overwrite;\nimport corina.util.PopupListener;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link GraphWindow}.\n* It contains ten unit test cases for the {@link GraphWindow#toSVG()} method.\n*/\nclass GraphWindow_3Test {"
	},
	{
		"original_code": "// StandardPlot.java\n//\n// This file is part of Corina.\n//\n// Corina is free software; you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation; either version 2 of the License, or\n// (at your option) any later version.\n//\n// Corina is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Corina; if not, write to the Free Software\n// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n//\n// Copyright 2001 Ken Harris <kbh7@cornell.edu>\n//\npackage corina.graph;\n\nimport java.awt.BasicStroke;\nimport java.awt.Color;\nimport java.awt.Graphics2D;\nimport java.awt.Point;\nimport java.awt.Rectangle;\nimport java.awt.geom.GeneralPath;\nimport javax.swing.JPanel;\nimport corina.Range;\nimport corina.Sample;\nimport corina.Year;\nimport corina.core.App;\nimport corina.index.Index;\nimport corina.util.ColorUtils;\n\npublic class StandardPlot implements CorinaGraphPlotter {\n\n    public StandardPlot() {\n        // no initializing to do, I am STATELESS!\n    }\n\n    // PERF: too many new's!  can i memoize this?  or just use constants for the 6(?) strokes i use?\n    protected BasicStroke makeStroke(float width, boolean dotted) {\n        if (dotted)\n            return new BasicStroke(width, BasicStroke.CAP_BUTT, BasicStroke.JOIN_BEVEL, 10f, new float[] { 8f }, 0f);\n        else\n            return new BasicStroke(width, BasicStroke.CAP_BUTT, BasicStroke.JOIN_BEVEL);\n    }\n\n    // We don't do any y transform for the standard plot; this is here for overriding.\n    protected int yTransform(float y) {\n        return (int) y;\n    }\n\n    protected boolean validValue(int value) {\n        // if MR, draw a vertical line -- use Sample.MR, for now\n        if (value <= Sample.MR)\n            return false;\n        return true;\n    }\n\n    // TESTING: perf\n    protected Rectangle tempRect = new Rectangle();\n\n    // returns the maximum size, in pixels, that the graph will take up.\n    public int getYRange(GraphInfo gInfo, Graph g, int bottom) {\n        // the size of 1 \"unit\" in pixels.\n        float unitScale = (float) gInfo.get10UnitHeight() / 10.0f;\n        // minimum always starts at zero...\n        int miny = 0;\n        int maxy = -100000;\n        int value;\n        int n = g.graph.getData().size();\n        for (int i = 0; i < n; i++) {\n            try {\n                value = yTransform(((Number) g.graph.getData().get(i)).intValue() * g.scale);\n            } catch (ClassCastException cce) {\n                // e.g., if it's being edited, it's still a string\n                value = yTransform(0);\n                // BAD!  instead: (1) draw what i've got so far, and (2) NEXT point is a move-to.\n                // -- try to parse String as an integer?\n            }\n            //bottom - (int) (value * g.scale * unitScale) - (int) (g.yoffset * unitScale);\n            int y = (int) value - g.yoffset;\n            if (y < miny)\n                miny = y;\n            if (y > maxy)\n                maxy = y;\n        }\n        return maxy - miny;\n    }\n\n    public void draw(GraphInfo gInfo, Graphics2D g2, int bottom, Graph g, int thickness, int xscroll) {\n        // cache yearsize, we use this a lot\n        // the size of a year, in pixels\n        int yearWidth = gInfo.getYearWidth();\n        // the size of 1 \"unit\" in pixels.\n        float unitScale = (float) gInfo.get10UnitHeight() / 10.0f;\n        // set pen\n        boolean dotted = (gInfo.indexesDotted() && (g.graph instanceof Index));\n        g2.setStroke(makeStroke(thickness, dotted));\n        // left/right\n        int l = g2.getClipBounds().x;\n        int r = l + g2.getClipBounds().width;\n        // baseline\n        if (gInfo.drawBaselines()) {\n            int y = bottom - (int) (g.yoffset * unitScale);\n            // 1 decade wide -- ok?\n            g2.drawLine(xscroll, y, xscroll + 10 * yearWidth, y);\n        }\n        // hundred percent line\n        if (gInfo.drawHundredpercentlines() && (g.graph instanceof Sample) && ((Sample) g.graph).isIndexed()) {\n            Color oldcolor = g2.getColor();\n            g2.setColor(ColorUtils.blend(oldcolor, gInfo.getBackgroundColor()));\n            // x is 0 if we aren't drawing graph names...\n            // x is the pixel at the end of the empty range if we are.\n            int x = (gInfo.drawGraphNames()) ? yearWidth * (gInfo.getEmptyRange().span() - 1) : 0;\n            int y = bottom - (int) (yTransform(1000 * g.scale) * unitScale) - (int) (g.yoffset * unitScale);\n            g2.drawLine((x > xscroll) ? x : xscroll, y, r, y);\n            g2.setColor(oldcolor);\n        }\n        // no data?  stop.\n        if (g.graph.getData().isEmpty())\n            return;\n        // compare g.getClipBounds() to [x,0]..[x+yearSize*data.size(),bottom]\n        tempRect.x = yearWidth * // REDUNDANT! see x later\n        (g.graph.getStart().diff(gInfo.getDrawRange().getStart()) + g.xoffset);\n        // - g.yoffset, IF you're sure there are no negative values (but there are)\n        tempRect.y = 0;\n        tempRect.width = yearWidth * (g.graph.getData().size() - 1);\n        tempRect.height = bottom;\n        // TODO: compute top/bottom as min/max?\n        // REFACTOR: will this be obsolete with the start/end stuff below?\n        if (!tempRect.intersects(g2.getClipBounds())) {\n            // skip this graph, it's off the screen\n            return;\n        }\n        // compute sapwood\n        int sapwoodIndex, sapwoodCount = 0, unmeasPost = 0;\n        if (g.graph instanceof Sample) {\n            Sample sample = (Sample) g.graph;\n            // PERF: isOak(), counting sapwood, and counting unmeas_post are expensive!\n            // -- do them once, and store that info in the Graph object, perhaps.\n            if (sample.isOak()) {\n                try {\n                    if (sample.meta.containsKey(\"sapwood\"))\n                        sapwoodCount = ((Integer) sample.meta.get(\"sapwood\")).intValue();\n                    if (sample.meta.containsKey(\"unmeas_post\"))\n                        unmeasPost = ((Integer) sample.meta.get(\"unmeas_post\")).intValue();\n                } catch (ClassCastException cce) {\n                    // we've already warned the user before, ignore it now.\n                }\n            }\n        }\n        sapwoodIndex = g.graph.getData().size() - sapwoodCount + unmeasPost + 1;\n        // my path\n        GeneralPath p = new GeneralPath();\n        // x-position\n        int x = yearWidth * (g.graph.getStart().diff(gInfo.getDrawRange().getStart()) + g.xoffset);\n        // move to the first point -- THIS IS NOT REALLY A SPECIAL CASE!\n        int value;\n        try {\n            value = yTransform(((Number) g.graph.getData().get(0)).intValue() * g.scale);\n        } catch (ClassCastException cce) {\n            // BAD!  instead: (1) just continue now, and (2) NEXT point is a move-to.\n            value = yTransform(0);\n        }\n        p.moveTo(x, bottom - (int) (value * unitScale) - (int) (g.yoffset * unitScale));\n        /*\n\t\t -- i really want to start at year max(graph.start, bounds.start)\n\t\t -- there are 3 things going on:\n\t\t ---- x is the pixel position\n\t\t ---- i is the index into data[]\n\t\t ---- y is the year\n\t\t -- y isn't updated each time through the loop, so that's not too bad\n\t\t -- but: starting y is easy to compute; from that, i and x are easy\n\t\t */\n        // connect the lines through the rest of the graph\n        // THIS is the third time it's called; why not use it above?\n        int n = g.graph.getData().size();\n        for (int i = 1; i < n; i++) {\n            // new x-position for this point\n            x += yearWidth;\n            // if we're past the end, draw what we've got, and say goodbye\n            // (go +_yearsize so the line going off the screen is visible)\n            if (x > r + yearWidth) {\n                break;\n            }\n            // sapwood?  draw what we've got, and start a new (thicker) path\n            // but only do it if sapwoodThicker() is enabled!\n            if (gInfo.sapwoodThicker() && i == sapwoodIndex) {\n                g2.draw(p);\n                g2.setStroke(makeStroke(2 * thickness, false));\n                p = new GeneralPath();\n                p.moveTo(yearWidth * (i - 1 + g.graph.getStart().diff(gInfo.getDrawRange().getStart()) + g.xoffset), bottom - (int) (value * unitScale) - (int) (g.yoffset * unitScale));\n            }\n            // y-position for this point\n            try {\n                value = yTransform(((Number) g.graph.getData().get(i)).intValue() * g.scale);\n            } catch (ClassCastException cce) {\n                // e.g., if it's being edited, it's still a string\n                value = yTransform(0);\n                // BAD!  instead: (1) draw what i've got so far, and (2) NEXT point is a move-to.\n                // -- try to parse String as an integer?\n            }\n            int y = bottom - (int) (value * unitScale) - (int) (g.yoffset * unitScale);\n            // if we're not where this sample starts, don't bother drawing yet\n            if (x < l - yearWidth) {\n                p.moveTo(x, y);\n                continue;\n            }\n            // if MR, draw a vertical line -- use Sample.MR, for now\n            if (g.graph instanceof Sample && !validValue(value))\n                g2.drawLine(x, y - 20, x, y + 20);\n            // draw a line to this point\n            p.lineTo(x, y);\n        }\n        // draw it!\n        g2.draw(p);\n    }\n\n    // if it's within this many pixels, it's considered a hit (see \"correct?\" comment)\n    private final static int NEAR = 5;\n\n    // BUG: if you click exactly on the rightmost pixel of a graph, it doesn't hit\n    public boolean contact(GraphInfo gInfo, Graph g, Point p, int bottom) {\n        // snap to year\n        int yearWidth = gInfo.getYearWidth();\n        int x1 = p.x - p.x % yearWidth;\n        int x2 = x1 + yearWidth;\n        // fraction of the way between x1 and x2\n        float f = (p.x - x1) / (float) (x2 - x1);\n        // get year of click\n        // REFACTOR: does this look like yearForPosition()?\n        Year y1 = gInfo.getDrawRange().getStart().add(x1 / yearWidth);\n        Year y2 = y1.add(1);\n        // --- everything above this is independent of graph ---\n        // not in range?  no hit.\n        if (!g.getRange().contains(y1))\n            return false;\n        if (// correct?\n        !g.getRange().contains(y2))\n            return false;\n        // get expected y-locs\n        int yloc1 = getPosition(gInfo, g, y1, bottom);\n        int yloc2 = getPosition(gInfo, g, y2, bottom);\n        // get adjusted expected y-loc\n        int yloc = (int) (yloc1 + (yloc2 - yloc1) * f);\n        // hit?\n        return (Math.abs(yloc - p.y) < NEAR);\n    }\n\n    private int getDataValue(Graph g, Year y) {\n        int i = y.diff(g.graph.getStart().add(g.xoffset));\n        return ((Number) g.graph.getData().get(i)).intValue();\n    }\n\n    private int getYValue(GraphInfo gInfo, Graph g, int value, int bottom) {\n        float unitScale = (float) gInfo.get10UnitHeight() / 10.0f;\n        return bottom - (int) (yTransform(value * g.scale) * unitScale) - // DUPLICATE: this line appears above 3 times\n        (int) (g.yoffset * unitScale);\n    }\n\n    private int getPosition(GraphInfo gInfo, Graph g, Year y, int bottom) {\n        return getYValue(gInfo, g, getDataValue(g, y), bottom);\n    }\n    // REFACTOR: use this same method above when actually drawing it\n}\n",
		"id": "/EvoSuiteBenchmark/35_corina/src/main/java/corina/graph/StandardPlot.java",
		"test_prompt": "// StandardPlotTest.java\n// This file is part of Corina.\n//\n// Corina is free software; you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation; either version 2 of the License, or\n// (at your option) any later version.\n//\n// Corina is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Corina; if not, write to the Free Software\n// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n//\n// Copyright 2001 Ken Harris <kbh7@cornell.edu>\n//\npackage corina.graph;\n\nimport java.awt.BasicStroke;\nimport java.awt.Color;\nimport java.awt.Graphics2D;\nimport java.awt.Point;\nimport java.awt.Rectangle;\nimport java.awt.geom.GeneralPath;\nimport javax.swing.JPanel;\nimport corina.Range;\nimport corina.Sample;\nimport corina.Year;\nimport corina.core.App;\nimport corina.index.Index;\nimport corina.util.ColorUtils;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link StandardPlot}.\n* It contains ten unit test cases for the {@link StandardPlot#contact(GraphInfo, Graph, Point, int)} method.\n*/\nclass StandardPlotTest {"
	},
	{
		"original_code": "// GraphInfo.java\n/**\n */\npackage corina.graph;\n\nimport corina.core.App;\nimport corina.Range;\nimport java.awt.Color;\nimport java.awt.Toolkit;\nimport corina.util.ColorUtils;\nimport javax.swing.JPanel;\n\n/**\n * @author Lucas Madar\n */\npublic class GraphInfo {\n\n    boolean printing;\n\n    public GraphInfo(boolean forprinting) {\n        giInit(forprinting);\n    }\n\n    public GraphInfo() {\n        giInit(false);\n    }\n\n    private void giInit(boolean forprinting) {\n        printing = forprinting;\n        reloadPrefs();\n    }\n\n    // gets a printing version of this...\n    // a method here in case it gets more complicated than just constructing it with printing on\n    public GraphInfo getPrinter() {\n        return new GraphInfo(true);\n    }\n\n    void setPrinting(boolean isprinting) {\n        printing = isprinting;\n    }\n\n    boolean isPrinting() {\n        return printing;\n    }\n\n    // color settings\n    private Color foreColor;\n\n    private Color majorLineColor;\n\n    private Color midLineColor;\n\n    private Color minorLineColor;\n\n    private Color backgroundColor;\n\n    public void reloadPrefs() {\n        // set some defaults...\n        // EXTRACT: should have default value for pref in prefs, not here\n        if (!printing) {\n            backgroundColor = App.prefs.getColorPref(\"corina.graph.background\", Color.black);\n            foreColor = App.prefs.getColorPref(\"corina.graph.foreground\", Color.white);\n            majorLineColor = App.prefs.getColorPref(\"corina.graph.graphpaper.color\", new Color(0, 51, 51));\n            minorLineColor = ColorUtils.blend(majorLineColor, App.prefs.getColorPref(\"corina.graph.background\", backgroundColor));\n            midLineColor = ColorUtils.blend(majorLineColor, minorLineColor);\n        } else {\n            backgroundColor = App.prefs.getColorPref(\"corina.graph.print.background\", Color.white);\n            foreColor = App.prefs.getColorPref(\"corina.graph.print.foreground\", Color.black);\n            majorLineColor = App.prefs.getColorPref(\"corina.graph.print.graphpaper.color\", new Color(255, 204, 204));\n            minorLineColor = ColorUtils.blend(majorLineColor, App.prefs.getColorPref(\"corina.graph.print.background\", backgroundColor));\n            midLineColor = ColorUtils.blend(majorLineColor, minorLineColor);\n        }\n        showVertAxis = Boolean.valueOf(App.prefs.getPref(\"corina.graph.vertical-axis\")).booleanValue();\n        showGraphPaper = Boolean.valueOf(App.prefs.getPref(\"corina.graph.graphpaper\")).booleanValue();\n        showBaselines = Boolean.valueOf(App.prefs.getPref(\"corina.graph.baselines\")).booleanValue();\n        showHundredpercentlines = Boolean.valueOf(App.prefs.getPref(\"corina.graph.hundredpercentlines\")).booleanValue();\n        showGraphNames = Boolean.valueOf(App.prefs.getPref(\"corina.graph.componentnames\")).booleanValue();\n        thickerSapwood = Boolean.valueOf(App.prefs.getPref(\"corina.graph.sapwood\")).booleanValue();\n        dottedIndexes = Boolean.valueOf(App.prefs.getPref(\"corina.graph.dotindexes\")).booleanValue();\n        // decide how many pixels per year\n        // the default is DPI / 8 (screen DPI is typically 72, so the default is typically 9)\n        int ppy = Toolkit.getDefaultToolkit().getScreenResolution() / 8;\n        try {\n            ppy = Integer.parseInt(App.prefs.getPref(\"corina.graph.pixelsperyear\", Integer.toString(ppy)));\n        } catch (NumberFormatException nfe) {\n            // do nothing, use the default.\n        }\n        yearWidth = ppy;\n        // get the unit height, too\n        try {\n            ppy = Integer.parseInt(App.prefs.getPref(\"corina.graph.pixelspertenunit\", Integer.toString(ppy)));\n        } catch (NumberFormatException nfe) {\n            ppy = Toolkit.getDefaultToolkit().getScreenResolution() / 8;\n        }\n        unitHeight = ppy;\n    }\n\n    // important graph stuff...\n    private Range drawBounds;\n\n    private Range emptyBounds;\n\n    public void setEmptyRange(Range r) {\n        emptyBounds = r;\n    }\n\n    public void setDrawRange(Range r) {\n        drawBounds = r;\n    }\n\n    public Range getEmptyRange() {\n        return emptyBounds;\n    }\n\n    public Range getDrawRange() {\n        return drawBounds;\n    }\n\n    private int printHeight = 0;\n\n    public int getPrintHeight() {\n        return printHeight;\n    }\n\n    public void setPrintHeight(int h) {\n        printHeight = h;\n    }\n\n    public int getHeight(JPanel panel) {\n        if (printing)\n            return printHeight;\n        return panel.getHeight();\n    }\n\n    // graph visual settings\n    private boolean dottedIndexes;\n\n    public boolean indexesDotted() {\n        return dottedIndexes;\n    }\n\n    private boolean thickerSapwood;\n\n    public boolean sapwoodThicker() {\n        return thickerSapwood;\n    }\n\n    private boolean showGraphPaper;\n\n    public boolean drawGraphPaper() {\n        return showGraphPaper;\n    }\n\n    private boolean showBaselines;\n\n    public boolean drawBaselines() {\n        return showBaselines;\n    }\n\n    private boolean showHundredpercentlines;\n\n    public boolean drawHundredpercentlines() {\n        return showHundredpercentlines;\n    }\n\n    private boolean showGraphNames;\n\n    public boolean drawGraphNames() {\n        return showGraphNames;\n    }\n\n    private boolean showVertAxis;\n\n    public boolean drawVertAxis() {\n        return showVertAxis;\n    }\n\n    private int yearWidth;\n\n    private int unitHeight;\n\n    /**\n     * Old interface! -- fix all occurances of this, then remove.\n     *\n     * @deprecated use setYearWidth(t)\n     */\n    public void setYearSize(int size) {\n        yearWidth = size;\n        unitHeight = size;\n    }\n\n    /**\n     * Old interface! -- fix all occurances of this, then remove.\n     *\n     * @deprecated use getYearWidth(t)\n     */\n    public int getYearSize() {\n        return yearWidth;\n    }\n\n    public void setYearWidth(int size) {\n        yearWidth = size;\n    }\n\n    public int getYearWidth() {\n        return yearWidth;\n    }\n\n    public void set10UnitHeight(int size) {\n        unitHeight = size;\n    }\n\n    public int get10UnitHeight() {\n        return unitHeight;\n    }\n\n    public Color getBackgroundColor() {\n        return backgroundColor;\n    }\n\n    public Color getMajorLineColor() {\n        return majorLineColor;\n    }\n\n    public Color getMinorLineColor() {\n        return minorLineColor;\n    }\n\n    public Color getMidLineColor() {\n        return midLineColor;\n    }\n\n    public Color getForeColor() {\n        return foreColor;\n    }\n\n    public Color getBLCenterColor() {\n        return ColorUtils.blend(minorLineColor, foreColor);\n    }\n\n    public void setMajorLineColor(Color c) {\n        majorLineColor = c;\n    }\n\n    public void setMinorLineColor(Color c) {\n        minorLineColor = c;\n    }\n\n    public void setForeColor(Color c) {\n        foreColor = c;\n    }\n\n    // Let's contain the color list in here\n    // graph color list logic below!\n    public final static class colorPair {\n\n        private String colorName;\n\n        private Color colorVal;\n\n        String getColorName() {\n            return colorName;\n        }\n\n        Color getColor() {\n            return colorVal;\n        }\n\n        void setColor(Color color) {\n            colorVal = color;\n        }\n\n        public colorPair(String colorName, Color colorVal) {\n            this.colorName = colorName;\n            this.colorVal = colorVal;\n        }\n    }\n\n    public final static colorPair[] printerColors = { new colorPair(\"Blue\", new Color(0.00f, 0.53f, 1.00f)), new colorPair(\"Green\", new Color(0.27f, 1.00f, 0.49f)), new colorPair(\"Red\", new Color(1.00f, 0.28f, 0.27f)), new colorPair(\"Cyan\", new Color(0.22f, 0.80f, 0.82f)), new colorPair(\"Yellow\", new Color(0.82f, 0.81f, 0.23f)), new colorPair(\"Magenta\", new Color(0.85f, 0.26f, 0.81f)), new colorPair(\"Gray\", Color.gray), new colorPair(\"Orange\", Color.ORANGE), new colorPair(\"Black\", Color.BLACK), new colorPair(\"Pink\", Color.PINK) };\n\n    public final static colorPair[] screenColors = { new colorPair(\"Blue\", new Color(0.00f, 0.53f, 1.00f)), new colorPair(\"Green\", new Color(0.27f, 1.00f, 0.49f)), new colorPair(\"Red\", new Color(1.00f, 0.28f, 0.27f)), new colorPair(\"Cyan\", new Color(0.22f, 0.80f, 0.82f)), new colorPair(\"Yellow\", new Color(0.82f, 0.81f, 0.23f)), new colorPair(\"Magenta\", new Color(0.85f, 0.26f, 0.81f)), new colorPair(\"Gray\", Color.gray), new colorPair(\"Orange\", Color.ORANGE), new colorPair(\"White\", Color.WHITE), new colorPair(\"Pink\", Color.PINK) };\n}\n",
		"id": "/EvoSuiteBenchmark/35_corina/src/main/java/corina/graph/GraphInfo_0Test.java",
		"test_prompt": "// GraphInfo_0Test.java\npackage corina.graph;\n\nimport corina.core.App;\nimport corina.Range;\nimport java.awt.Color;\nimport java.awt.Toolkit;\nimport corina.util.ColorUtils;\nimport javax.swing.JPanel;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link GraphInfo}.\n* It contains ten unit test cases for the {@link GraphInfo#indexesDotted()} method.\n*/\nclass GraphInfo_0Test {"
	},
	{
		"original_code": "// GraphInfo.java\n/**\n */\npackage corina.graph;\n\nimport corina.core.App;\nimport corina.Range;\nimport java.awt.Color;\nimport java.awt.Toolkit;\nimport corina.util.ColorUtils;\nimport javax.swing.JPanel;\n\n/**\n * @author Lucas Madar\n */\npublic class GraphInfo {\n\n    boolean printing;\n\n    public GraphInfo(boolean forprinting) {\n        giInit(forprinting);\n    }\n\n    public GraphInfo() {\n        giInit(false);\n    }\n\n    private void giInit(boolean forprinting) {\n        printing = forprinting;\n        reloadPrefs();\n    }\n\n    // gets a printing version of this...\n    // a method here in case it gets more complicated than just constructing it with printing on\n    public GraphInfo getPrinter() {\n        return new GraphInfo(true);\n    }\n\n    void setPrinting(boolean isprinting) {\n        printing = isprinting;\n    }\n\n    boolean isPrinting() {\n        return printing;\n    }\n\n    // color settings\n    private Color foreColor;\n\n    private Color majorLineColor;\n\n    private Color midLineColor;\n\n    private Color minorLineColor;\n\n    private Color backgroundColor;\n\n    public void reloadPrefs() {\n        // set some defaults...\n        // EXTRACT: should have default value for pref in prefs, not here\n        if (!printing) {\n            backgroundColor = App.prefs.getColorPref(\"corina.graph.background\", Color.black);\n            foreColor = App.prefs.getColorPref(\"corina.graph.foreground\", Color.white);\n            majorLineColor = App.prefs.getColorPref(\"corina.graph.graphpaper.color\", new Color(0, 51, 51));\n            minorLineColor = ColorUtils.blend(majorLineColor, App.prefs.getColorPref(\"corina.graph.background\", backgroundColor));\n            midLineColor = ColorUtils.blend(majorLineColor, minorLineColor);\n        } else {\n            backgroundColor = App.prefs.getColorPref(\"corina.graph.print.background\", Color.white);\n            foreColor = App.prefs.getColorPref(\"corina.graph.print.foreground\", Color.black);\n            majorLineColor = App.prefs.getColorPref(\"corina.graph.print.graphpaper.color\", new Color(255, 204, 204));\n            minorLineColor = ColorUtils.blend(majorLineColor, App.prefs.getColorPref(\"corina.graph.print.background\", backgroundColor));\n            midLineColor = ColorUtils.blend(majorLineColor, minorLineColor);\n        }\n        showVertAxis = Boolean.valueOf(App.prefs.getPref(\"corina.graph.vertical-axis\")).booleanValue();\n        showGraphPaper = Boolean.valueOf(App.prefs.getPref(\"corina.graph.graphpaper\")).booleanValue();\n        showBaselines = Boolean.valueOf(App.prefs.getPref(\"corina.graph.baselines\")).booleanValue();\n        showHundredpercentlines = Boolean.valueOf(App.prefs.getPref(\"corina.graph.hundredpercentlines\")).booleanValue();\n        showGraphNames = Boolean.valueOf(App.prefs.getPref(\"corina.graph.componentnames\")).booleanValue();\n        thickerSapwood = Boolean.valueOf(App.prefs.getPref(\"corina.graph.sapwood\")).booleanValue();\n        dottedIndexes = Boolean.valueOf(App.prefs.getPref(\"corina.graph.dotindexes\")).booleanValue();\n        // decide how many pixels per year\n        // the default is DPI / 8 (screen DPI is typically 72, so the default is typically 9)\n        int ppy = Toolkit.getDefaultToolkit().getScreenResolution() / 8;\n        try {\n            ppy = Integer.parseInt(App.prefs.getPref(\"corina.graph.pixelsperyear\", Integer.toString(ppy)));\n        } catch (NumberFormatException nfe) {\n            // do nothing, use the default.\n        }\n        yearWidth = ppy;\n        // get the unit height, too\n        try {\n            ppy = Integer.parseInt(App.prefs.getPref(\"corina.graph.pixelspertenunit\", Integer.toString(ppy)));\n        } catch (NumberFormatException nfe) {\n            ppy = Toolkit.getDefaultToolkit().getScreenResolution() / 8;\n        }\n        unitHeight = ppy;\n    }\n\n    // important graph stuff...\n    private Range drawBounds;\n\n    private Range emptyBounds;\n\n    public void setEmptyRange(Range r) {\n        emptyBounds = r;\n    }\n\n    public void setDrawRange(Range r) {\n        drawBounds = r;\n    }\n\n    public Range getEmptyRange() {\n        return emptyBounds;\n    }\n\n    public Range getDrawRange() {\n        return drawBounds;\n    }\n\n    private int printHeight = 0;\n\n    public int getPrintHeight() {\n        return printHeight;\n    }\n\n    public void setPrintHeight(int h) {\n        printHeight = h;\n    }\n\n    public int getHeight(JPanel panel) {\n        if (printing)\n            return printHeight;\n        return panel.getHeight();\n    }\n\n    // graph visual settings\n    private boolean dottedIndexes;\n\n    public boolean indexesDotted() {\n        return dottedIndexes;\n    }\n\n    private boolean thickerSapwood;\n\n    public boolean sapwoodThicker() {\n        return thickerSapwood;\n    }\n\n    private boolean showGraphPaper;\n\n    public boolean drawGraphPaper() {\n        return showGraphPaper;\n    }\n\n    private boolean showBaselines;\n\n    public boolean drawBaselines() {\n        return showBaselines;\n    }\n\n    private boolean showHundredpercentlines;\n\n    public boolean drawHundredpercentlines() {\n        return showHundredpercentlines;\n    }\n\n    private boolean showGraphNames;\n\n    public boolean drawGraphNames() {\n        return showGraphNames;\n    }\n\n    private boolean showVertAxis;\n\n    public boolean drawVertAxis() {\n        return showVertAxis;\n    }\n\n    private int yearWidth;\n\n    private int unitHeight;\n\n    /**\n     * Old interface! -- fix all occurances of this, then remove.\n     *\n     * @deprecated use setYearWidth(t)\n     */\n    public void setYearSize(int size) {\n        yearWidth = size;\n        unitHeight = size;\n    }\n\n    /**\n     * Old interface! -- fix all occurances of this, then remove.\n     *\n     * @deprecated use getYearWidth(t)\n     */\n    public int getYearSize() {\n        return yearWidth;\n    }\n\n    public void setYearWidth(int size) {\n        yearWidth = size;\n    }\n\n    public int getYearWidth() {\n        return yearWidth;\n    }\n\n    public void set10UnitHeight(int size) {\n        unitHeight = size;\n    }\n\n    public int get10UnitHeight() {\n        return unitHeight;\n    }\n\n    public Color getBackgroundColor() {\n        return backgroundColor;\n    }\n\n    public Color getMajorLineColor() {\n        return majorLineColor;\n    }\n\n    public Color getMinorLineColor() {\n        return minorLineColor;\n    }\n\n    public Color getMidLineColor() {\n        return midLineColor;\n    }\n\n    public Color getForeColor() {\n        return foreColor;\n    }\n\n    public Color getBLCenterColor() {\n        return ColorUtils.blend(minorLineColor, foreColor);\n    }\n\n    public void setMajorLineColor(Color c) {\n        majorLineColor = c;\n    }\n\n    public void setMinorLineColor(Color c) {\n        minorLineColor = c;\n    }\n\n    public void setForeColor(Color c) {\n        foreColor = c;\n    }\n\n    // Let's contain the color list in here\n    // graph color list logic below!\n    public final static class colorPair {\n\n        private String colorName;\n\n        private Color colorVal;\n\n        String getColorName() {\n            return colorName;\n        }\n\n        Color getColor() {\n            return colorVal;\n        }\n\n        void setColor(Color color) {\n            colorVal = color;\n        }\n\n        public colorPair(String colorName, Color colorVal) {\n            this.colorName = colorName;\n            this.colorVal = colorVal;\n        }\n    }\n\n    public final static colorPair[] printerColors = { new colorPair(\"Blue\", new Color(0.00f, 0.53f, 1.00f)), new colorPair(\"Green\", new Color(0.27f, 1.00f, 0.49f)), new colorPair(\"Red\", new Color(1.00f, 0.28f, 0.27f)), new colorPair(\"Cyan\", new Color(0.22f, 0.80f, 0.82f)), new colorPair(\"Yellow\", new Color(0.82f, 0.81f, 0.23f)), new colorPair(\"Magenta\", new Color(0.85f, 0.26f, 0.81f)), new colorPair(\"Gray\", Color.gray), new colorPair(\"Orange\", Color.ORANGE), new colorPair(\"Black\", Color.BLACK), new colorPair(\"Pink\", Color.PINK) };\n\n    public final static colorPair[] screenColors = { new colorPair(\"Blue\", new Color(0.00f, 0.53f, 1.00f)), new colorPair(\"Green\", new Color(0.27f, 1.00f, 0.49f)), new colorPair(\"Red\", new Color(1.00f, 0.28f, 0.27f)), new colorPair(\"Cyan\", new Color(0.22f, 0.80f, 0.82f)), new colorPair(\"Yellow\", new Color(0.82f, 0.81f, 0.23f)), new colorPair(\"Magenta\", new Color(0.85f, 0.26f, 0.81f)), new colorPair(\"Gray\", Color.gray), new colorPair(\"Orange\", Color.ORANGE), new colorPair(\"White\", Color.WHITE), new colorPair(\"Pink\", Color.PINK) };\n}\n",
		"id": "/EvoSuiteBenchmark/35_corina/src/main/java/corina/graph/GraphInfo_1Test.java",
		"test_prompt": "// GraphInfo_1Test.java\npackage corina.graph;\n\nimport corina.core.App;\nimport corina.Range;\nimport java.awt.Color;\nimport java.awt.Toolkit;\nimport corina.util.ColorUtils;\nimport javax.swing.JPanel;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link GraphInfo}.\n* It contains ten unit test cases for the {@link GraphInfo#sapwoodThicker()} method.\n*/\nclass GraphInfo_1Test {"
	},
	{
		"original_code": "// GraphInfo.java\n/**\n */\npackage corina.graph;\n\nimport corina.core.App;\nimport corina.Range;\nimport java.awt.Color;\nimport java.awt.Toolkit;\nimport corina.util.ColorUtils;\nimport javax.swing.JPanel;\n\n/**\n * @author Lucas Madar\n */\npublic class GraphInfo {\n\n    boolean printing;\n\n    public GraphInfo(boolean forprinting) {\n        giInit(forprinting);\n    }\n\n    public GraphInfo() {\n        giInit(false);\n    }\n\n    private void giInit(boolean forprinting) {\n        printing = forprinting;\n        reloadPrefs();\n    }\n\n    // gets a printing version of this...\n    // a method here in case it gets more complicated than just constructing it with printing on\n    public GraphInfo getPrinter() {\n        return new GraphInfo(true);\n    }\n\n    void setPrinting(boolean isprinting) {\n        printing = isprinting;\n    }\n\n    boolean isPrinting() {\n        return printing;\n    }\n\n    // color settings\n    private Color foreColor;\n\n    private Color majorLineColor;\n\n    private Color midLineColor;\n\n    private Color minorLineColor;\n\n    private Color backgroundColor;\n\n    public void reloadPrefs() {\n        // set some defaults...\n        // EXTRACT: should have default value for pref in prefs, not here\n        if (!printing) {\n            backgroundColor = App.prefs.getColorPref(\"corina.graph.background\", Color.black);\n            foreColor = App.prefs.getColorPref(\"corina.graph.foreground\", Color.white);\n            majorLineColor = App.prefs.getColorPref(\"corina.graph.graphpaper.color\", new Color(0, 51, 51));\n            minorLineColor = ColorUtils.blend(majorLineColor, App.prefs.getColorPref(\"corina.graph.background\", backgroundColor));\n            midLineColor = ColorUtils.blend(majorLineColor, minorLineColor);\n        } else {\n            backgroundColor = App.prefs.getColorPref(\"corina.graph.print.background\", Color.white);\n            foreColor = App.prefs.getColorPref(\"corina.graph.print.foreground\", Color.black);\n            majorLineColor = App.prefs.getColorPref(\"corina.graph.print.graphpaper.color\", new Color(255, 204, 204));\n            minorLineColor = ColorUtils.blend(majorLineColor, App.prefs.getColorPref(\"corina.graph.print.background\", backgroundColor));\n            midLineColor = ColorUtils.blend(majorLineColor, minorLineColor);\n        }\n        showVertAxis = Boolean.valueOf(App.prefs.getPref(\"corina.graph.vertical-axis\")).booleanValue();\n        showGraphPaper = Boolean.valueOf(App.prefs.getPref(\"corina.graph.graphpaper\")).booleanValue();\n        showBaselines = Boolean.valueOf(App.prefs.getPref(\"corina.graph.baselines\")).booleanValue();\n        showHundredpercentlines = Boolean.valueOf(App.prefs.getPref(\"corina.graph.hundredpercentlines\")).booleanValue();\n        showGraphNames = Boolean.valueOf(App.prefs.getPref(\"corina.graph.componentnames\")).booleanValue();\n        thickerSapwood = Boolean.valueOf(App.prefs.getPref(\"corina.graph.sapwood\")).booleanValue();\n        dottedIndexes = Boolean.valueOf(App.prefs.getPref(\"corina.graph.dotindexes\")).booleanValue();\n        // decide how many pixels per year\n        // the default is DPI / 8 (screen DPI is typically 72, so the default is typically 9)\n        int ppy = Toolkit.getDefaultToolkit().getScreenResolution() / 8;\n        try {\n            ppy = Integer.parseInt(App.prefs.getPref(\"corina.graph.pixelsperyear\", Integer.toString(ppy)));\n        } catch (NumberFormatException nfe) {\n            // do nothing, use the default.\n        }\n        yearWidth = ppy;\n        // get the unit height, too\n        try {\n            ppy = Integer.parseInt(App.prefs.getPref(\"corina.graph.pixelspertenunit\", Integer.toString(ppy)));\n        } catch (NumberFormatException nfe) {\n            ppy = Toolkit.getDefaultToolkit().getScreenResolution() / 8;\n        }\n        unitHeight = ppy;\n    }\n\n    // important graph stuff...\n    private Range drawBounds;\n\n    private Range emptyBounds;\n\n    public void setEmptyRange(Range r) {\n        emptyBounds = r;\n    }\n\n    public void setDrawRange(Range r) {\n        drawBounds = r;\n    }\n\n    public Range getEmptyRange() {\n        return emptyBounds;\n    }\n\n    public Range getDrawRange() {\n        return drawBounds;\n    }\n\n    private int printHeight = 0;\n\n    public int getPrintHeight() {\n        return printHeight;\n    }\n\n    public void setPrintHeight(int h) {\n        printHeight = h;\n    }\n\n    public int getHeight(JPanel panel) {\n        if (printing)\n            return printHeight;\n        return panel.getHeight();\n    }\n\n    // graph visual settings\n    private boolean dottedIndexes;\n\n    public boolean indexesDotted() {\n        return dottedIndexes;\n    }\n\n    private boolean thickerSapwood;\n\n    public boolean sapwoodThicker() {\n        return thickerSapwood;\n    }\n\n    private boolean showGraphPaper;\n\n    public boolean drawGraphPaper() {\n        return showGraphPaper;\n    }\n\n    private boolean showBaselines;\n\n    public boolean drawBaselines() {\n        return showBaselines;\n    }\n\n    private boolean showHundredpercentlines;\n\n    public boolean drawHundredpercentlines() {\n        return showHundredpercentlines;\n    }\n\n    private boolean showGraphNames;\n\n    public boolean drawGraphNames() {\n        return showGraphNames;\n    }\n\n    private boolean showVertAxis;\n\n    public boolean drawVertAxis() {\n        return showVertAxis;\n    }\n\n    private int yearWidth;\n\n    private int unitHeight;\n\n    /**\n     * Old interface! -- fix all occurances of this, then remove.\n     *\n     * @deprecated use setYearWidth(t)\n     */\n    public void setYearSize(int size) {\n        yearWidth = size;\n        unitHeight = size;\n    }\n\n    /**\n     * Old interface! -- fix all occurances of this, then remove.\n     *\n     * @deprecated use getYearWidth(t)\n     */\n    public int getYearSize() {\n        return yearWidth;\n    }\n\n    public void setYearWidth(int size) {\n        yearWidth = size;\n    }\n\n    public int getYearWidth() {\n        return yearWidth;\n    }\n\n    public void set10UnitHeight(int size) {\n        unitHeight = size;\n    }\n\n    public int get10UnitHeight() {\n        return unitHeight;\n    }\n\n    public Color getBackgroundColor() {\n        return backgroundColor;\n    }\n\n    public Color getMajorLineColor() {\n        return majorLineColor;\n    }\n\n    public Color getMinorLineColor() {\n        return minorLineColor;\n    }\n\n    public Color getMidLineColor() {\n        return midLineColor;\n    }\n\n    public Color getForeColor() {\n        return foreColor;\n    }\n\n    public Color getBLCenterColor() {\n        return ColorUtils.blend(minorLineColor, foreColor);\n    }\n\n    public void setMajorLineColor(Color c) {\n        majorLineColor = c;\n    }\n\n    public void setMinorLineColor(Color c) {\n        minorLineColor = c;\n    }\n\n    public void setForeColor(Color c) {\n        foreColor = c;\n    }\n\n    // Let's contain the color list in here\n    // graph color list logic below!\n    public final static class colorPair {\n\n        private String colorName;\n\n        private Color colorVal;\n\n        String getColorName() {\n            return colorName;\n        }\n\n        Color getColor() {\n            return colorVal;\n        }\n\n        void setColor(Color color) {\n            colorVal = color;\n        }\n\n        public colorPair(String colorName, Color colorVal) {\n            this.colorName = colorName;\n            this.colorVal = colorVal;\n        }\n    }\n\n    public final static colorPair[] printerColors = { new colorPair(\"Blue\", new Color(0.00f, 0.53f, 1.00f)), new colorPair(\"Green\", new Color(0.27f, 1.00f, 0.49f)), new colorPair(\"Red\", new Color(1.00f, 0.28f, 0.27f)), new colorPair(\"Cyan\", new Color(0.22f, 0.80f, 0.82f)), new colorPair(\"Yellow\", new Color(0.82f, 0.81f, 0.23f)), new colorPair(\"Magenta\", new Color(0.85f, 0.26f, 0.81f)), new colorPair(\"Gray\", Color.gray), new colorPair(\"Orange\", Color.ORANGE), new colorPair(\"Black\", Color.BLACK), new colorPair(\"Pink\", Color.PINK) };\n\n    public final static colorPair[] screenColors = { new colorPair(\"Blue\", new Color(0.00f, 0.53f, 1.00f)), new colorPair(\"Green\", new Color(0.27f, 1.00f, 0.49f)), new colorPair(\"Red\", new Color(1.00f, 0.28f, 0.27f)), new colorPair(\"Cyan\", new Color(0.22f, 0.80f, 0.82f)), new colorPair(\"Yellow\", new Color(0.82f, 0.81f, 0.23f)), new colorPair(\"Magenta\", new Color(0.85f, 0.26f, 0.81f)), new colorPair(\"Gray\", Color.gray), new colorPair(\"Orange\", Color.ORANGE), new colorPair(\"White\", Color.WHITE), new colorPair(\"Pink\", Color.PINK) };\n}\n",
		"id": "/EvoSuiteBenchmark/35_corina/src/main/java/corina/graph/GraphInfo_2Test.java",
		"test_prompt": "// GraphInfo_2Test.java\npackage corina.graph;\n\nimport corina.core.App;\nimport corina.Range;\nimport java.awt.Color;\nimport java.awt.Toolkit;\nimport corina.util.ColorUtils;\nimport javax.swing.JPanel;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link GraphInfo}.\n* It contains ten unit test cases for the {@link GraphInfo#drawGraphPaper()} method.\n*/\nclass GraphInfo_2Test {"
	},
	{
		"original_code": "// GraphInfo.java\n/**\n */\npackage corina.graph;\n\nimport corina.core.App;\nimport corina.Range;\nimport java.awt.Color;\nimport java.awt.Toolkit;\nimport corina.util.ColorUtils;\nimport javax.swing.JPanel;\n\n/**\n * @author Lucas Madar\n */\npublic class GraphInfo {\n\n    boolean printing;\n\n    public GraphInfo(boolean forprinting) {\n        giInit(forprinting);\n    }\n\n    public GraphInfo() {\n        giInit(false);\n    }\n\n    private void giInit(boolean forprinting) {\n        printing = forprinting;\n        reloadPrefs();\n    }\n\n    // gets a printing version of this...\n    // a method here in case it gets more complicated than just constructing it with printing on\n    public GraphInfo getPrinter() {\n        return new GraphInfo(true);\n    }\n\n    void setPrinting(boolean isprinting) {\n        printing = isprinting;\n    }\n\n    boolean isPrinting() {\n        return printing;\n    }\n\n    // color settings\n    private Color foreColor;\n\n    private Color majorLineColor;\n\n    private Color midLineColor;\n\n    private Color minorLineColor;\n\n    private Color backgroundColor;\n\n    public void reloadPrefs() {\n        // set some defaults...\n        // EXTRACT: should have default value for pref in prefs, not here\n        if (!printing) {\n            backgroundColor = App.prefs.getColorPref(\"corina.graph.background\", Color.black);\n            foreColor = App.prefs.getColorPref(\"corina.graph.foreground\", Color.white);\n            majorLineColor = App.prefs.getColorPref(\"corina.graph.graphpaper.color\", new Color(0, 51, 51));\n            minorLineColor = ColorUtils.blend(majorLineColor, App.prefs.getColorPref(\"corina.graph.background\", backgroundColor));\n            midLineColor = ColorUtils.blend(majorLineColor, minorLineColor);\n        } else {\n            backgroundColor = App.prefs.getColorPref(\"corina.graph.print.background\", Color.white);\n            foreColor = App.prefs.getColorPref(\"corina.graph.print.foreground\", Color.black);\n            majorLineColor = App.prefs.getColorPref(\"corina.graph.print.graphpaper.color\", new Color(255, 204, 204));\n            minorLineColor = ColorUtils.blend(majorLineColor, App.prefs.getColorPref(\"corina.graph.print.background\", backgroundColor));\n            midLineColor = ColorUtils.blend(majorLineColor, minorLineColor);\n        }\n        showVertAxis = Boolean.valueOf(App.prefs.getPref(\"corina.graph.vertical-axis\")).booleanValue();\n        showGraphPaper = Boolean.valueOf(App.prefs.getPref(\"corina.graph.graphpaper\")).booleanValue();\n        showBaselines = Boolean.valueOf(App.prefs.getPref(\"corina.graph.baselines\")).booleanValue();\n        showHundredpercentlines = Boolean.valueOf(App.prefs.getPref(\"corina.graph.hundredpercentlines\")).booleanValue();\n        showGraphNames = Boolean.valueOf(App.prefs.getPref(\"corina.graph.componentnames\")).booleanValue();\n        thickerSapwood = Boolean.valueOf(App.prefs.getPref(\"corina.graph.sapwood\")).booleanValue();\n        dottedIndexes = Boolean.valueOf(App.prefs.getPref(\"corina.graph.dotindexes\")).booleanValue();\n        // decide how many pixels per year\n        // the default is DPI / 8 (screen DPI is typically 72, so the default is typically 9)\n        int ppy = Toolkit.getDefaultToolkit().getScreenResolution() / 8;\n        try {\n            ppy = Integer.parseInt(App.prefs.getPref(\"corina.graph.pixelsperyear\", Integer.toString(ppy)));\n        } catch (NumberFormatException nfe) {\n            // do nothing, use the default.\n        }\n        yearWidth = ppy;\n        // get the unit height, too\n        try {\n            ppy = Integer.parseInt(App.prefs.getPref(\"corina.graph.pixelspertenunit\", Integer.toString(ppy)));\n        } catch (NumberFormatException nfe) {\n            ppy = Toolkit.getDefaultToolkit().getScreenResolution() / 8;\n        }\n        unitHeight = ppy;\n    }\n\n    // important graph stuff...\n    private Range drawBounds;\n\n    private Range emptyBounds;\n\n    public void setEmptyRange(Range r) {\n        emptyBounds = r;\n    }\n\n    public void setDrawRange(Range r) {\n        drawBounds = r;\n    }\n\n    public Range getEmptyRange() {\n        return emptyBounds;\n    }\n\n    public Range getDrawRange() {\n        return drawBounds;\n    }\n\n    private int printHeight = 0;\n\n    public int getPrintHeight() {\n        return printHeight;\n    }\n\n    public void setPrintHeight(int h) {\n        printHeight = h;\n    }\n\n    public int getHeight(JPanel panel) {\n        if (printing)\n            return printHeight;\n        return panel.getHeight();\n    }\n\n    // graph visual settings\n    private boolean dottedIndexes;\n\n    public boolean indexesDotted() {\n        return dottedIndexes;\n    }\n\n    private boolean thickerSapwood;\n\n    public boolean sapwoodThicker() {\n        return thickerSapwood;\n    }\n\n    private boolean showGraphPaper;\n\n    public boolean drawGraphPaper() {\n        return showGraphPaper;\n    }\n\n    private boolean showBaselines;\n\n    public boolean drawBaselines() {\n        return showBaselines;\n    }\n\n    private boolean showHundredpercentlines;\n\n    public boolean drawHundredpercentlines() {\n        return showHundredpercentlines;\n    }\n\n    private boolean showGraphNames;\n\n    public boolean drawGraphNames() {\n        return showGraphNames;\n    }\n\n    private boolean showVertAxis;\n\n    public boolean drawVertAxis() {\n        return showVertAxis;\n    }\n\n    private int yearWidth;\n\n    private int unitHeight;\n\n    /**\n     * Old interface! -- fix all occurances of this, then remove.\n     *\n     * @deprecated use setYearWidth(t)\n     */\n    public void setYearSize(int size) {\n        yearWidth = size;\n        unitHeight = size;\n    }\n\n    /**\n     * Old interface! -- fix all occurances of this, then remove.\n     *\n     * @deprecated use getYearWidth(t)\n     */\n    public int getYearSize() {\n        return yearWidth;\n    }\n\n    public void setYearWidth(int size) {\n        yearWidth = size;\n    }\n\n    public int getYearWidth() {\n        return yearWidth;\n    }\n\n    public void set10UnitHeight(int size) {\n        unitHeight = size;\n    }\n\n    public int get10UnitHeight() {\n        return unitHeight;\n    }\n\n    public Color getBackgroundColor() {\n        return backgroundColor;\n    }\n\n    public Color getMajorLineColor() {\n        return majorLineColor;\n    }\n\n    public Color getMinorLineColor() {\n        return minorLineColor;\n    }\n\n    public Color getMidLineColor() {\n        return midLineColor;\n    }\n\n    public Color getForeColor() {\n        return foreColor;\n    }\n\n    public Color getBLCenterColor() {\n        return ColorUtils.blend(minorLineColor, foreColor);\n    }\n\n    public void setMajorLineColor(Color c) {\n        majorLineColor = c;\n    }\n\n    public void setMinorLineColor(Color c) {\n        minorLineColor = c;\n    }\n\n    public void setForeColor(Color c) {\n        foreColor = c;\n    }\n\n    // Let's contain the color list in here\n    // graph color list logic below!\n    public final static class colorPair {\n\n        private String colorName;\n\n        private Color colorVal;\n\n        String getColorName() {\n            return colorName;\n        }\n\n        Color getColor() {\n            return colorVal;\n        }\n\n        void setColor(Color color) {\n            colorVal = color;\n        }\n\n        public colorPair(String colorName, Color colorVal) {\n            this.colorName = colorName;\n            this.colorVal = colorVal;\n        }\n    }\n\n    public final static colorPair[] printerColors = { new colorPair(\"Blue\", new Color(0.00f, 0.53f, 1.00f)), new colorPair(\"Green\", new Color(0.27f, 1.00f, 0.49f)), new colorPair(\"Red\", new Color(1.00f, 0.28f, 0.27f)), new colorPair(\"Cyan\", new Color(0.22f, 0.80f, 0.82f)), new colorPair(\"Yellow\", new Color(0.82f, 0.81f, 0.23f)), new colorPair(\"Magenta\", new Color(0.85f, 0.26f, 0.81f)), new colorPair(\"Gray\", Color.gray), new colorPair(\"Orange\", Color.ORANGE), new colorPair(\"Black\", Color.BLACK), new colorPair(\"Pink\", Color.PINK) };\n\n    public final static colorPair[] screenColors = { new colorPair(\"Blue\", new Color(0.00f, 0.53f, 1.00f)), new colorPair(\"Green\", new Color(0.27f, 1.00f, 0.49f)), new colorPair(\"Red\", new Color(1.00f, 0.28f, 0.27f)), new colorPair(\"Cyan\", new Color(0.22f, 0.80f, 0.82f)), new colorPair(\"Yellow\", new Color(0.82f, 0.81f, 0.23f)), new colorPair(\"Magenta\", new Color(0.85f, 0.26f, 0.81f)), new colorPair(\"Gray\", Color.gray), new colorPair(\"Orange\", Color.ORANGE), new colorPair(\"White\", Color.WHITE), new colorPair(\"Pink\", Color.PINK) };\n}\n",
		"id": "/EvoSuiteBenchmark/35_corina/src/main/java/corina/graph/GraphInfo_3Test.java",
		"test_prompt": "// GraphInfo_3Test.java\npackage corina.graph;\n\nimport corina.core.App;\nimport corina.Range;\nimport java.awt.Color;\nimport java.awt.Toolkit;\nimport corina.util.ColorUtils;\nimport javax.swing.JPanel;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link GraphInfo}.\n* It contains ten unit test cases for the {@link GraphInfo#drawBaselines()} method.\n*/\nclass GraphInfo_3Test {"
	},
	{
		"original_code": "// GraphInfo.java\n/**\n */\npackage corina.graph;\n\nimport corina.core.App;\nimport corina.Range;\nimport java.awt.Color;\nimport java.awt.Toolkit;\nimport corina.util.ColorUtils;\nimport javax.swing.JPanel;\n\n/**\n * @author Lucas Madar\n */\npublic class GraphInfo {\n\n    boolean printing;\n\n    public GraphInfo(boolean forprinting) {\n        giInit(forprinting);\n    }\n\n    public GraphInfo() {\n        giInit(false);\n    }\n\n    private void giInit(boolean forprinting) {\n        printing = forprinting;\n        reloadPrefs();\n    }\n\n    // gets a printing version of this...\n    // a method here in case it gets more complicated than just constructing it with printing on\n    public GraphInfo getPrinter() {\n        return new GraphInfo(true);\n    }\n\n    void setPrinting(boolean isprinting) {\n        printing = isprinting;\n    }\n\n    boolean isPrinting() {\n        return printing;\n    }\n\n    // color settings\n    private Color foreColor;\n\n    private Color majorLineColor;\n\n    private Color midLineColor;\n\n    private Color minorLineColor;\n\n    private Color backgroundColor;\n\n    public void reloadPrefs() {\n        // set some defaults...\n        // EXTRACT: should have default value for pref in prefs, not here\n        if (!printing) {\n            backgroundColor = App.prefs.getColorPref(\"corina.graph.background\", Color.black);\n            foreColor = App.prefs.getColorPref(\"corina.graph.foreground\", Color.white);\n            majorLineColor = App.prefs.getColorPref(\"corina.graph.graphpaper.color\", new Color(0, 51, 51));\n            minorLineColor = ColorUtils.blend(majorLineColor, App.prefs.getColorPref(\"corina.graph.background\", backgroundColor));\n            midLineColor = ColorUtils.blend(majorLineColor, minorLineColor);\n        } else {\n            backgroundColor = App.prefs.getColorPref(\"corina.graph.print.background\", Color.white);\n            foreColor = App.prefs.getColorPref(\"corina.graph.print.foreground\", Color.black);\n            majorLineColor = App.prefs.getColorPref(\"corina.graph.print.graphpaper.color\", new Color(255, 204, 204));\n            minorLineColor = ColorUtils.blend(majorLineColor, App.prefs.getColorPref(\"corina.graph.print.background\", backgroundColor));\n            midLineColor = ColorUtils.blend(majorLineColor, minorLineColor);\n        }\n        showVertAxis = Boolean.valueOf(App.prefs.getPref(\"corina.graph.vertical-axis\")).booleanValue();\n        showGraphPaper = Boolean.valueOf(App.prefs.getPref(\"corina.graph.graphpaper\")).booleanValue();\n        showBaselines = Boolean.valueOf(App.prefs.getPref(\"corina.graph.baselines\")).booleanValue();\n        showHundredpercentlines = Boolean.valueOf(App.prefs.getPref(\"corina.graph.hundredpercentlines\")).booleanValue();\n        showGraphNames = Boolean.valueOf(App.prefs.getPref(\"corina.graph.componentnames\")).booleanValue();\n        thickerSapwood = Boolean.valueOf(App.prefs.getPref(\"corina.graph.sapwood\")).booleanValue();\n        dottedIndexes = Boolean.valueOf(App.prefs.getPref(\"corina.graph.dotindexes\")).booleanValue();\n        // decide how many pixels per year\n        // the default is DPI / 8 (screen DPI is typically 72, so the default is typically 9)\n        int ppy = Toolkit.getDefaultToolkit().getScreenResolution() / 8;\n        try {\n            ppy = Integer.parseInt(App.prefs.getPref(\"corina.graph.pixelsperyear\", Integer.toString(ppy)));\n        } catch (NumberFormatException nfe) {\n            // do nothing, use the default.\n        }\n        yearWidth = ppy;\n        // get the unit height, too\n        try {\n            ppy = Integer.parseInt(App.prefs.getPref(\"corina.graph.pixelspertenunit\", Integer.toString(ppy)));\n        } catch (NumberFormatException nfe) {\n            ppy = Toolkit.getDefaultToolkit().getScreenResolution() / 8;\n        }\n        unitHeight = ppy;\n    }\n\n    // important graph stuff...\n    private Range drawBounds;\n\n    private Range emptyBounds;\n\n    public void setEmptyRange(Range r) {\n        emptyBounds = r;\n    }\n\n    public void setDrawRange(Range r) {\n        drawBounds = r;\n    }\n\n    public Range getEmptyRange() {\n        return emptyBounds;\n    }\n\n    public Range getDrawRange() {\n        return drawBounds;\n    }\n\n    private int printHeight = 0;\n\n    public int getPrintHeight() {\n        return printHeight;\n    }\n\n    public void setPrintHeight(int h) {\n        printHeight = h;\n    }\n\n    public int getHeight(JPanel panel) {\n        if (printing)\n            return printHeight;\n        return panel.getHeight();\n    }\n\n    // graph visual settings\n    private boolean dottedIndexes;\n\n    public boolean indexesDotted() {\n        return dottedIndexes;\n    }\n\n    private boolean thickerSapwood;\n\n    public boolean sapwoodThicker() {\n        return thickerSapwood;\n    }\n\n    private boolean showGraphPaper;\n\n    public boolean drawGraphPaper() {\n        return showGraphPaper;\n    }\n\n    private boolean showBaselines;\n\n    public boolean drawBaselines() {\n        return showBaselines;\n    }\n\n    private boolean showHundredpercentlines;\n\n    public boolean drawHundredpercentlines() {\n        return showHundredpercentlines;\n    }\n\n    private boolean showGraphNames;\n\n    public boolean drawGraphNames() {\n        return showGraphNames;\n    }\n\n    private boolean showVertAxis;\n\n    public boolean drawVertAxis() {\n        return showVertAxis;\n    }\n\n    private int yearWidth;\n\n    private int unitHeight;\n\n    /**\n     * Old interface! -- fix all occurances of this, then remove.\n     *\n     * @deprecated use setYearWidth(t)\n     */\n    public void setYearSize(int size) {\n        yearWidth = size;\n        unitHeight = size;\n    }\n\n    /**\n     * Old interface! -- fix all occurances of this, then remove.\n     *\n     * @deprecated use getYearWidth(t)\n     */\n    public int getYearSize() {\n        return yearWidth;\n    }\n\n    public void setYearWidth(int size) {\n        yearWidth = size;\n    }\n\n    public int getYearWidth() {\n        return yearWidth;\n    }\n\n    public void set10UnitHeight(int size) {\n        unitHeight = size;\n    }\n\n    public int get10UnitHeight() {\n        return unitHeight;\n    }\n\n    public Color getBackgroundColor() {\n        return backgroundColor;\n    }\n\n    public Color getMajorLineColor() {\n        return majorLineColor;\n    }\n\n    public Color getMinorLineColor() {\n        return minorLineColor;\n    }\n\n    public Color getMidLineColor() {\n        return midLineColor;\n    }\n\n    public Color getForeColor() {\n        return foreColor;\n    }\n\n    public Color getBLCenterColor() {\n        return ColorUtils.blend(minorLineColor, foreColor);\n    }\n\n    public void setMajorLineColor(Color c) {\n        majorLineColor = c;\n    }\n\n    public void setMinorLineColor(Color c) {\n        minorLineColor = c;\n    }\n\n    public void setForeColor(Color c) {\n        foreColor = c;\n    }\n\n    // Let's contain the color list in here\n    // graph color list logic below!\n    public final static class colorPair {\n\n        private String colorName;\n\n        private Color colorVal;\n\n        String getColorName() {\n            return colorName;\n        }\n\n        Color getColor() {\n            return colorVal;\n        }\n\n        void setColor(Color color) {\n            colorVal = color;\n        }\n\n        public colorPair(String colorName, Color colorVal) {\n            this.colorName = colorName;\n            this.colorVal = colorVal;\n        }\n    }\n\n    public final static colorPair[] printerColors = { new colorPair(\"Blue\", new Color(0.00f, 0.53f, 1.00f)), new colorPair(\"Green\", new Color(0.27f, 1.00f, 0.49f)), new colorPair(\"Red\", new Color(1.00f, 0.28f, 0.27f)), new colorPair(\"Cyan\", new Color(0.22f, 0.80f, 0.82f)), new colorPair(\"Yellow\", new Color(0.82f, 0.81f, 0.23f)), new colorPair(\"Magenta\", new Color(0.85f, 0.26f, 0.81f)), new colorPair(\"Gray\", Color.gray), new colorPair(\"Orange\", Color.ORANGE), new colorPair(\"Black\", Color.BLACK), new colorPair(\"Pink\", Color.PINK) };\n\n    public final static colorPair[] screenColors = { new colorPair(\"Blue\", new Color(0.00f, 0.53f, 1.00f)), new colorPair(\"Green\", new Color(0.27f, 1.00f, 0.49f)), new colorPair(\"Red\", new Color(1.00f, 0.28f, 0.27f)), new colorPair(\"Cyan\", new Color(0.22f, 0.80f, 0.82f)), new colorPair(\"Yellow\", new Color(0.82f, 0.81f, 0.23f)), new colorPair(\"Magenta\", new Color(0.85f, 0.26f, 0.81f)), new colorPair(\"Gray\", Color.gray), new colorPair(\"Orange\", Color.ORANGE), new colorPair(\"White\", Color.WHITE), new colorPair(\"Pink\", Color.PINK) };\n}\n",
		"id": "/EvoSuiteBenchmark/35_corina/src/main/java/corina/graph/GraphInfo_4Test.java",
		"test_prompt": "// GraphInfo_4Test.java\npackage corina.graph;\n\nimport corina.core.App;\nimport corina.Range;\nimport java.awt.Color;\nimport java.awt.Toolkit;\nimport corina.util.ColorUtils;\nimport javax.swing.JPanel;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link GraphInfo}.\n* It contains ten unit test cases for the {@link GraphInfo#drawHundredpercentlines()} method.\n*/\nclass GraphInfo_4Test {"
	},
	{
		"original_code": "// GraphInfo.java\n/**\n */\npackage corina.graph;\n\nimport corina.core.App;\nimport corina.Range;\nimport java.awt.Color;\nimport java.awt.Toolkit;\nimport corina.util.ColorUtils;\nimport javax.swing.JPanel;\n\n/**\n * @author Lucas Madar\n */\npublic class GraphInfo {\n\n    boolean printing;\n\n    public GraphInfo(boolean forprinting) {\n        giInit(forprinting);\n    }\n\n    public GraphInfo() {\n        giInit(false);\n    }\n\n    private void giInit(boolean forprinting) {\n        printing = forprinting;\n        reloadPrefs();\n    }\n\n    // gets a printing version of this...\n    // a method here in case it gets more complicated than just constructing it with printing on\n    public GraphInfo getPrinter() {\n        return new GraphInfo(true);\n    }\n\n    void setPrinting(boolean isprinting) {\n        printing = isprinting;\n    }\n\n    boolean isPrinting() {\n        return printing;\n    }\n\n    // color settings\n    private Color foreColor;\n\n    private Color majorLineColor;\n\n    private Color midLineColor;\n\n    private Color minorLineColor;\n\n    private Color backgroundColor;\n\n    public void reloadPrefs() {\n        // set some defaults...\n        // EXTRACT: should have default value for pref in prefs, not here\n        if (!printing) {\n            backgroundColor = App.prefs.getColorPref(\"corina.graph.background\", Color.black);\n            foreColor = App.prefs.getColorPref(\"corina.graph.foreground\", Color.white);\n            majorLineColor = App.prefs.getColorPref(\"corina.graph.graphpaper.color\", new Color(0, 51, 51));\n            minorLineColor = ColorUtils.blend(majorLineColor, App.prefs.getColorPref(\"corina.graph.background\", backgroundColor));\n            midLineColor = ColorUtils.blend(majorLineColor, minorLineColor);\n        } else {\n            backgroundColor = App.prefs.getColorPref(\"corina.graph.print.background\", Color.white);\n            foreColor = App.prefs.getColorPref(\"corina.graph.print.foreground\", Color.black);\n            majorLineColor = App.prefs.getColorPref(\"corina.graph.print.graphpaper.color\", new Color(255, 204, 204));\n            minorLineColor = ColorUtils.blend(majorLineColor, App.prefs.getColorPref(\"corina.graph.print.background\", backgroundColor));\n            midLineColor = ColorUtils.blend(majorLineColor, minorLineColor);\n        }\n        showVertAxis = Boolean.valueOf(App.prefs.getPref(\"corina.graph.vertical-axis\")).booleanValue();\n        showGraphPaper = Boolean.valueOf(App.prefs.getPref(\"corina.graph.graphpaper\")).booleanValue();\n        showBaselines = Boolean.valueOf(App.prefs.getPref(\"corina.graph.baselines\")).booleanValue();\n        showHundredpercentlines = Boolean.valueOf(App.prefs.getPref(\"corina.graph.hundredpercentlines\")).booleanValue();\n        showGraphNames = Boolean.valueOf(App.prefs.getPref(\"corina.graph.componentnames\")).booleanValue();\n        thickerSapwood = Boolean.valueOf(App.prefs.getPref(\"corina.graph.sapwood\")).booleanValue();\n        dottedIndexes = Boolean.valueOf(App.prefs.getPref(\"corina.graph.dotindexes\")).booleanValue();\n        // decide how many pixels per year\n        // the default is DPI / 8 (screen DPI is typically 72, so the default is typically 9)\n        int ppy = Toolkit.getDefaultToolkit().getScreenResolution() / 8;\n        try {\n            ppy = Integer.parseInt(App.prefs.getPref(\"corina.graph.pixelsperyear\", Integer.toString(ppy)));\n        } catch (NumberFormatException nfe) {\n            // do nothing, use the default.\n        }\n        yearWidth = ppy;\n        // get the unit height, too\n        try {\n            ppy = Integer.parseInt(App.prefs.getPref(\"corina.graph.pixelspertenunit\", Integer.toString(ppy)));\n        } catch (NumberFormatException nfe) {\n            ppy = Toolkit.getDefaultToolkit().getScreenResolution() / 8;\n        }\n        unitHeight = ppy;\n    }\n\n    // important graph stuff...\n    private Range drawBounds;\n\n    private Range emptyBounds;\n\n    public void setEmptyRange(Range r) {\n        emptyBounds = r;\n    }\n\n    public void setDrawRange(Range r) {\n        drawBounds = r;\n    }\n\n    public Range getEmptyRange() {\n        return emptyBounds;\n    }\n\n    public Range getDrawRange() {\n        return drawBounds;\n    }\n\n    private int printHeight = 0;\n\n    public int getPrintHeight() {\n        return printHeight;\n    }\n\n    public void setPrintHeight(int h) {\n        printHeight = h;\n    }\n\n    public int getHeight(JPanel panel) {\n        if (printing)\n            return printHeight;\n        return panel.getHeight();\n    }\n\n    // graph visual settings\n    private boolean dottedIndexes;\n\n    public boolean indexesDotted() {\n        return dottedIndexes;\n    }\n\n    private boolean thickerSapwood;\n\n    public boolean sapwoodThicker() {\n        return thickerSapwood;\n    }\n\n    private boolean showGraphPaper;\n\n    public boolean drawGraphPaper() {\n        return showGraphPaper;\n    }\n\n    private boolean showBaselines;\n\n    public boolean drawBaselines() {\n        return showBaselines;\n    }\n\n    private boolean showHundredpercentlines;\n\n    public boolean drawHundredpercentlines() {\n        return showHundredpercentlines;\n    }\n\n    private boolean showGraphNames;\n\n    public boolean drawGraphNames() {\n        return showGraphNames;\n    }\n\n    private boolean showVertAxis;\n\n    public boolean drawVertAxis() {\n        return showVertAxis;\n    }\n\n    private int yearWidth;\n\n    private int unitHeight;\n\n    /**\n     * Old interface! -- fix all occurances of this, then remove.\n     *\n     * @deprecated use setYearWidth(t)\n     */\n    public void setYearSize(int size) {\n        yearWidth = size;\n        unitHeight = size;\n    }\n\n    /**\n     * Old interface! -- fix all occurances of this, then remove.\n     *\n     * @deprecated use getYearWidth(t)\n     */\n    public int getYearSize() {\n        return yearWidth;\n    }\n\n    public void setYearWidth(int size) {\n        yearWidth = size;\n    }\n\n    public int getYearWidth() {\n        return yearWidth;\n    }\n\n    public void set10UnitHeight(int size) {\n        unitHeight = size;\n    }\n\n    public int get10UnitHeight() {\n        return unitHeight;\n    }\n\n    public Color getBackgroundColor() {\n        return backgroundColor;\n    }\n\n    public Color getMajorLineColor() {\n        return majorLineColor;\n    }\n\n    public Color getMinorLineColor() {\n        return minorLineColor;\n    }\n\n    public Color getMidLineColor() {\n        return midLineColor;\n    }\n\n    public Color getForeColor() {\n        return foreColor;\n    }\n\n    public Color getBLCenterColor() {\n        return ColorUtils.blend(minorLineColor, foreColor);\n    }\n\n    public void setMajorLineColor(Color c) {\n        majorLineColor = c;\n    }\n\n    public void setMinorLineColor(Color c) {\n        minorLineColor = c;\n    }\n\n    public void setForeColor(Color c) {\n        foreColor = c;\n    }\n\n    // Let's contain the color list in here\n    // graph color list logic below!\n    public final static class colorPair {\n\n        private String colorName;\n\n        private Color colorVal;\n\n        String getColorName() {\n            return colorName;\n        }\n\n        Color getColor() {\n            return colorVal;\n        }\n\n        void setColor(Color color) {\n            colorVal = color;\n        }\n\n        public colorPair(String colorName, Color colorVal) {\n            this.colorName = colorName;\n            this.colorVal = colorVal;\n        }\n    }\n\n    public final static colorPair[] printerColors = { new colorPair(\"Blue\", new Color(0.00f, 0.53f, 1.00f)), new colorPair(\"Green\", new Color(0.27f, 1.00f, 0.49f)), new colorPair(\"Red\", new Color(1.00f, 0.28f, 0.27f)), new colorPair(\"Cyan\", new Color(0.22f, 0.80f, 0.82f)), new colorPair(\"Yellow\", new Color(0.82f, 0.81f, 0.23f)), new colorPair(\"Magenta\", new Color(0.85f, 0.26f, 0.81f)), new colorPair(\"Gray\", Color.gray), new colorPair(\"Orange\", Color.ORANGE), new colorPair(\"Black\", Color.BLACK), new colorPair(\"Pink\", Color.PINK) };\n\n    public final static colorPair[] screenColors = { new colorPair(\"Blue\", new Color(0.00f, 0.53f, 1.00f)), new colorPair(\"Green\", new Color(0.27f, 1.00f, 0.49f)), new colorPair(\"Red\", new Color(1.00f, 0.28f, 0.27f)), new colorPair(\"Cyan\", new Color(0.22f, 0.80f, 0.82f)), new colorPair(\"Yellow\", new Color(0.82f, 0.81f, 0.23f)), new colorPair(\"Magenta\", new Color(0.85f, 0.26f, 0.81f)), new colorPair(\"Gray\", Color.gray), new colorPair(\"Orange\", Color.ORANGE), new colorPair(\"White\", Color.WHITE), new colorPair(\"Pink\", Color.PINK) };\n}\n",
		"id": "/EvoSuiteBenchmark/35_corina/src/main/java/corina/graph/GraphInfo_5Test.java",
		"test_prompt": "// GraphInfo_5Test.java\npackage corina.graph;\n\nimport corina.core.App;\nimport corina.Range;\nimport java.awt.Color;\nimport java.awt.Toolkit;\nimport corina.util.ColorUtils;\nimport javax.swing.JPanel;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link GraphInfo}.\n* It contains ten unit test cases for the {@link GraphInfo#drawGraphNames()} method.\n*/\nclass GraphInfo_5Test {"
	},
	{
		"original_code": "// GraphInfo.java\n/**\n */\npackage corina.graph;\n\nimport corina.core.App;\nimport corina.Range;\nimport java.awt.Color;\nimport java.awt.Toolkit;\nimport corina.util.ColorUtils;\nimport javax.swing.JPanel;\n\n/**\n * @author Lucas Madar\n */\npublic class GraphInfo {\n\n    boolean printing;\n\n    public GraphInfo(boolean forprinting) {\n        giInit(forprinting);\n    }\n\n    public GraphInfo() {\n        giInit(false);\n    }\n\n    private void giInit(boolean forprinting) {\n        printing = forprinting;\n        reloadPrefs();\n    }\n\n    // gets a printing version of this...\n    // a method here in case it gets more complicated than just constructing it with printing on\n    public GraphInfo getPrinter() {\n        return new GraphInfo(true);\n    }\n\n    void setPrinting(boolean isprinting) {\n        printing = isprinting;\n    }\n\n    boolean isPrinting() {\n        return printing;\n    }\n\n    // color settings\n    private Color foreColor;\n\n    private Color majorLineColor;\n\n    private Color midLineColor;\n\n    private Color minorLineColor;\n\n    private Color backgroundColor;\n\n    public void reloadPrefs() {\n        // set some defaults...\n        // EXTRACT: should have default value for pref in prefs, not here\n        if (!printing) {\n            backgroundColor = App.prefs.getColorPref(\"corina.graph.background\", Color.black);\n            foreColor = App.prefs.getColorPref(\"corina.graph.foreground\", Color.white);\n            majorLineColor = App.prefs.getColorPref(\"corina.graph.graphpaper.color\", new Color(0, 51, 51));\n            minorLineColor = ColorUtils.blend(majorLineColor, App.prefs.getColorPref(\"corina.graph.background\", backgroundColor));\n            midLineColor = ColorUtils.blend(majorLineColor, minorLineColor);\n        } else {\n            backgroundColor = App.prefs.getColorPref(\"corina.graph.print.background\", Color.white);\n            foreColor = App.prefs.getColorPref(\"corina.graph.print.foreground\", Color.black);\n            majorLineColor = App.prefs.getColorPref(\"corina.graph.print.graphpaper.color\", new Color(255, 204, 204));\n            minorLineColor = ColorUtils.blend(majorLineColor, App.prefs.getColorPref(\"corina.graph.print.background\", backgroundColor));\n            midLineColor = ColorUtils.blend(majorLineColor, minorLineColor);\n        }\n        showVertAxis = Boolean.valueOf(App.prefs.getPref(\"corina.graph.vertical-axis\")).booleanValue();\n        showGraphPaper = Boolean.valueOf(App.prefs.getPref(\"corina.graph.graphpaper\")).booleanValue();\n        showBaselines = Boolean.valueOf(App.prefs.getPref(\"corina.graph.baselines\")).booleanValue();\n        showHundredpercentlines = Boolean.valueOf(App.prefs.getPref(\"corina.graph.hundredpercentlines\")).booleanValue();\n        showGraphNames = Boolean.valueOf(App.prefs.getPref(\"corina.graph.componentnames\")).booleanValue();\n        thickerSapwood = Boolean.valueOf(App.prefs.getPref(\"corina.graph.sapwood\")).booleanValue();\n        dottedIndexes = Boolean.valueOf(App.prefs.getPref(\"corina.graph.dotindexes\")).booleanValue();\n        // decide how many pixels per year\n        // the default is DPI / 8 (screen DPI is typically 72, so the default is typically 9)\n        int ppy = Toolkit.getDefaultToolkit().getScreenResolution() / 8;\n        try {\n            ppy = Integer.parseInt(App.prefs.getPref(\"corina.graph.pixelsperyear\", Integer.toString(ppy)));\n        } catch (NumberFormatException nfe) {\n            // do nothing, use the default.\n        }\n        yearWidth = ppy;\n        // get the unit height, too\n        try {\n            ppy = Integer.parseInt(App.prefs.getPref(\"corina.graph.pixelspertenunit\", Integer.toString(ppy)));\n        } catch (NumberFormatException nfe) {\n            ppy = Toolkit.getDefaultToolkit().getScreenResolution() / 8;\n        }\n        unitHeight = ppy;\n    }\n\n    // important graph stuff...\n    private Range drawBounds;\n\n    private Range emptyBounds;\n\n    public void setEmptyRange(Range r) {\n        emptyBounds = r;\n    }\n\n    public void setDrawRange(Range r) {\n        drawBounds = r;\n    }\n\n    public Range getEmptyRange() {\n        return emptyBounds;\n    }\n\n    public Range getDrawRange() {\n        return drawBounds;\n    }\n\n    private int printHeight = 0;\n\n    public int getPrintHeight() {\n        return printHeight;\n    }\n\n    public void setPrintHeight(int h) {\n        printHeight = h;\n    }\n\n    public int getHeight(JPanel panel) {\n        if (printing)\n            return printHeight;\n        return panel.getHeight();\n    }\n\n    // graph visual settings\n    private boolean dottedIndexes;\n\n    public boolean indexesDotted() {\n        return dottedIndexes;\n    }\n\n    private boolean thickerSapwood;\n\n    public boolean sapwoodThicker() {\n        return thickerSapwood;\n    }\n\n    private boolean showGraphPaper;\n\n    public boolean drawGraphPaper() {\n        return showGraphPaper;\n    }\n\n    private boolean showBaselines;\n\n    public boolean drawBaselines() {\n        return showBaselines;\n    }\n\n    private boolean showHundredpercentlines;\n\n    public boolean drawHundredpercentlines() {\n        return showHundredpercentlines;\n    }\n\n    private boolean showGraphNames;\n\n    public boolean drawGraphNames() {\n        return showGraphNames;\n    }\n\n    private boolean showVertAxis;\n\n    public boolean drawVertAxis() {\n        return showVertAxis;\n    }\n\n    private int yearWidth;\n\n    private int unitHeight;\n\n    /**\n     * Old interface! -- fix all occurances of this, then remove.\n     *\n     * @deprecated use setYearWidth(t)\n     */\n    public void setYearSize(int size) {\n        yearWidth = size;\n        unitHeight = size;\n    }\n\n    /**\n     * Old interface! -- fix all occurances of this, then remove.\n     *\n     * @deprecated use getYearWidth(t)\n     */\n    public int getYearSize() {\n        return yearWidth;\n    }\n\n    public void setYearWidth(int size) {\n        yearWidth = size;\n    }\n\n    public int getYearWidth() {\n        return yearWidth;\n    }\n\n    public void set10UnitHeight(int size) {\n        unitHeight = size;\n    }\n\n    public int get10UnitHeight() {\n        return unitHeight;\n    }\n\n    public Color getBackgroundColor() {\n        return backgroundColor;\n    }\n\n    public Color getMajorLineColor() {\n        return majorLineColor;\n    }\n\n    public Color getMinorLineColor() {\n        return minorLineColor;\n    }\n\n    public Color getMidLineColor() {\n        return midLineColor;\n    }\n\n    public Color getForeColor() {\n        return foreColor;\n    }\n\n    public Color getBLCenterColor() {\n        return ColorUtils.blend(minorLineColor, foreColor);\n    }\n\n    public void setMajorLineColor(Color c) {\n        majorLineColor = c;\n    }\n\n    public void setMinorLineColor(Color c) {\n        minorLineColor = c;\n    }\n\n    public void setForeColor(Color c) {\n        foreColor = c;\n    }\n\n    // Let's contain the color list in here\n    // graph color list logic below!\n    public final static class colorPair {\n\n        private String colorName;\n\n        private Color colorVal;\n\n        String getColorName() {\n            return colorName;\n        }\n\n        Color getColor() {\n            return colorVal;\n        }\n\n        void setColor(Color color) {\n            colorVal = color;\n        }\n\n        public colorPair(String colorName, Color colorVal) {\n            this.colorName = colorName;\n            this.colorVal = colorVal;\n        }\n    }\n\n    public final static colorPair[] printerColors = { new colorPair(\"Blue\", new Color(0.00f, 0.53f, 1.00f)), new colorPair(\"Green\", new Color(0.27f, 1.00f, 0.49f)), new colorPair(\"Red\", new Color(1.00f, 0.28f, 0.27f)), new colorPair(\"Cyan\", new Color(0.22f, 0.80f, 0.82f)), new colorPair(\"Yellow\", new Color(0.82f, 0.81f, 0.23f)), new colorPair(\"Magenta\", new Color(0.85f, 0.26f, 0.81f)), new colorPair(\"Gray\", Color.gray), new colorPair(\"Orange\", Color.ORANGE), new colorPair(\"Black\", Color.BLACK), new colorPair(\"Pink\", Color.PINK) };\n\n    public final static colorPair[] screenColors = { new colorPair(\"Blue\", new Color(0.00f, 0.53f, 1.00f)), new colorPair(\"Green\", new Color(0.27f, 1.00f, 0.49f)), new colorPair(\"Red\", new Color(1.00f, 0.28f, 0.27f)), new colorPair(\"Cyan\", new Color(0.22f, 0.80f, 0.82f)), new colorPair(\"Yellow\", new Color(0.82f, 0.81f, 0.23f)), new colorPair(\"Magenta\", new Color(0.85f, 0.26f, 0.81f)), new colorPair(\"Gray\", Color.gray), new colorPair(\"Orange\", Color.ORANGE), new colorPair(\"White\", Color.WHITE), new colorPair(\"Pink\", Color.PINK) };\n}\n",
		"id": "/EvoSuiteBenchmark/35_corina/src/main/java/corina/graph/GraphInfo_6Test.java",
		"test_prompt": "// GraphInfo_6Test.java\npackage corina.graph;\n\nimport corina.core.App;\nimport corina.Range;\nimport java.awt.Color;\nimport java.awt.Toolkit;\nimport corina.util.ColorUtils;\nimport javax.swing.JPanel;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link GraphInfo}.\n* It contains ten unit test cases for the {@link GraphInfo#drawVertAxis()} method.\n*/\nclass GraphInfo_6Test {"
	},
	{
		"original_code": "// Single.java\npackage corina.cross;\n\nimport corina.Sample;\nimport corina.ui.I18n;\nimport corina.site.Site;\nimport corina.site.SiteDB;\nimport corina.site.SiteNotFoundException;\nimport java.text.DecimalFormat;\n\n// a single crossdate between two samples, where they are.\n// used by Grid, Table, and anybody else who wants to see if samples crossdate.\npublic class Single {\n\n    // the scores themselves\n    protected float t, tr, d, r;\n\n    // FUTURE: float[]\n    // get rid of these formatters eventually.  scores should be able\n    // to format themselves.\n    static DecimalFormat f1, f2, f3, f4;\n\n    static {\n        // REFACTOR: the crosses to use should be user-pickable, so this is B-A-D.\n        f1 = new DecimalFormat(new TScore().getFormat());\n        f2 = new DecimalFormat(new Trend().getFormat());\n        f3 = new DecimalFormat(new DScore().getFormat());\n        f4 = new DecimalFormat(new RValue().getFormat());\n    }\n\n    // -- return all scores, formatted properly, in an array?\n    // public String[] formatAll() ?\n    public String formatT() {\n        return f1.format(t);\n    }\n\n    public String formatTrend() {\n        return f2.format(tr);\n    }\n\n    public String formatD() {\n        return f3.format(d);\n    }\n\n    public String formatR() {\n        return f4.format(r);\n    }\n\n    /*\n\t BETTER INTERFACE:\n\t -- float scores[]\n\t -- scores[i] is for ALL_CROSSDATES[i]\n\t -- String format(String alg)? -- single.format(\"TScore\") => \"1.23\"\n\t REFACTORING:\n\t -- write formatT() = format(\"TScore\"), etc.\n\t -- switch uses of format() to format(\"TScore\")\n\t -- switch format(),format(),format() to loop through DEFAULT_CROSSDATES\n\t */\n    public String toXML() {\n        return \"<cross t=\\\"\" + t + \"\\\" tr=\\\"\" + tr + \"\\\" d=\\\"\" + d + \"\\\" r=\\\"\" + r + \"\\\" n=\\\"\" + n + \"\\\"/>\";\n        // REFACTOR: would messageformat be clearer?\n    }\n\n    // TODO: make Cross.getShortName() (\"t\", \"tr\", \"D\", etc.) -- who uses this?\n    // FUTURE: use Cross.DEFAULT_CROSSDATES, OR: allow any number of algorithms here.\n    // the overlap\n    /*private*/\n    int n;\n\n    // distance between sites, in km, or null if unknown\n    /*private*/\n    Integer dist;\n\n    // is it significant?\n    /*private*/\n    boolean isSig;\n\n    // so we can embrace and extend...\n    public Single() {\n        n = 0;\n        dist = null;\n        isSig = false;\n    }\n\n    // run a single crossdate between 2 samples\n    public Single(Sample fixed, Sample moving) {\n        // fill in crosses, if they overlap\n        n = fixed.range.overlap(moving.range);\n        if (n > 0) {\n            // this use of single() is kind of hackish.  since it's only used here, it should be REFACTORED.\n            t = new TScore(fixed, moving).single();\n            tr = new Trend(fixed, moving).single();\n            d = new DScore(fixed, moving).single();\n            r = new RValue(fixed, moving).single();\n            // FIXME: RValue computation is redundant, since it's already computed in the TScore\n        } else {\n            // right?\n            t = tr = d = r = 0;\n        }\n        // distance\n        try {\n            Site s1 = SiteDB.getSiteDB().getSite(fixed);\n            Site s2 = SiteDB.getSiteDB().getSite(moving);\n            dist = new Integer(s1.distanceTo(s2));\n        } catch (SiteNotFoundException snfe) {\n            dist = null;\n        }\n        // is it significant?  use the t-score to check.  (why t-score?  why just one?)\n        isSig = new TScore().isSignificant(t, n);\n    }\n\n    // FOR BACKWARDS COMPATIBILITY ONLY -- REFACTOR AND REMOVE ME -- ??\n    // -- used only for Grid loading\n    public Single(float t, float tr, float d, float r, int n) {\n        this.t = t;\n        this.tr = tr;\n        this.d = d;\n        this.n = n;\n        this.r = r;\n        isSig = new TScore().isSignificant(t, n);\n    }\n\n    public boolean isSignificant() {\n        return isSig;\n    }\n\n    // as \"x km\", localized, or the empty string if unknown(null)\n    public String distanceAsString() {\n        if (dist == null)\n            return \"\";\n        return dist + \" \" + I18n.getText(\"km\");\n    }\n}\n",
		"id": "/EvoSuiteBenchmark/35_corina/src/main/java/corina/cross/Single_0Test.java",
		"test_prompt": "// Single_0Test.java\npackage corina.cross;\n\nimport corina.Sample;\nimport corina.ui.I18n;\nimport corina.site.Site;\nimport corina.site.SiteDB;\nimport corina.site.SiteNotFoundException;\nimport java.text.DecimalFormat;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link Single}.\n* It contains ten unit test cases for the {@link Single#formatT()} method.\n*/\nclass Single_0Test {"
	},
	{
		"original_code": "// Single.java\npackage corina.cross;\n\nimport corina.Sample;\nimport corina.ui.I18n;\nimport corina.site.Site;\nimport corina.site.SiteDB;\nimport corina.site.SiteNotFoundException;\nimport java.text.DecimalFormat;\n\n// a single crossdate between two samples, where they are.\n// used by Grid, Table, and anybody else who wants to see if samples crossdate.\npublic class Single {\n\n    // the scores themselves\n    protected float t, tr, d, r;\n\n    // FUTURE: float[]\n    // get rid of these formatters eventually.  scores should be able\n    // to format themselves.\n    static DecimalFormat f1, f2, f3, f4;\n\n    static {\n        // REFACTOR: the crosses to use should be user-pickable, so this is B-A-D.\n        f1 = new DecimalFormat(new TScore().getFormat());\n        f2 = new DecimalFormat(new Trend().getFormat());\n        f3 = new DecimalFormat(new DScore().getFormat());\n        f4 = new DecimalFormat(new RValue().getFormat());\n    }\n\n    // -- return all scores, formatted properly, in an array?\n    // public String[] formatAll() ?\n    public String formatT() {\n        return f1.format(t);\n    }\n\n    public String formatTrend() {\n        return f2.format(tr);\n    }\n\n    public String formatD() {\n        return f3.format(d);\n    }\n\n    public String formatR() {\n        return f4.format(r);\n    }\n\n    /*\n\t BETTER INTERFACE:\n\t -- float scores[]\n\t -- scores[i] is for ALL_CROSSDATES[i]\n\t -- String format(String alg)? -- single.format(\"TScore\") => \"1.23\"\n\t REFACTORING:\n\t -- write formatT() = format(\"TScore\"), etc.\n\t -- switch uses of format() to format(\"TScore\")\n\t -- switch format(),format(),format() to loop through DEFAULT_CROSSDATES\n\t */\n    public String toXML() {\n        return \"<cross t=\\\"\" + t + \"\\\" tr=\\\"\" + tr + \"\\\" d=\\\"\" + d + \"\\\" r=\\\"\" + r + \"\\\" n=\\\"\" + n + \"\\\"/>\";\n        // REFACTOR: would messageformat be clearer?\n    }\n\n    // TODO: make Cross.getShortName() (\"t\", \"tr\", \"D\", etc.) -- who uses this?\n    // FUTURE: use Cross.DEFAULT_CROSSDATES, OR: allow any number of algorithms here.\n    // the overlap\n    /*private*/\n    int n;\n\n    // distance between sites, in km, or null if unknown\n    /*private*/\n    Integer dist;\n\n    // is it significant?\n    /*private*/\n    boolean isSig;\n\n    // so we can embrace and extend...\n    public Single() {\n        n = 0;\n        dist = null;\n        isSig = false;\n    }\n\n    // run a single crossdate between 2 samples\n    public Single(Sample fixed, Sample moving) {\n        // fill in crosses, if they overlap\n        n = fixed.range.overlap(moving.range);\n        if (n > 0) {\n            // this use of single() is kind of hackish.  since it's only used here, it should be REFACTORED.\n            t = new TScore(fixed, moving).single();\n            tr = new Trend(fixed, moving).single();\n            d = new DScore(fixed, moving).single();\n            r = new RValue(fixed, moving).single();\n            // FIXME: RValue computation is redundant, since it's already computed in the TScore\n        } else {\n            // right?\n            t = tr = d = r = 0;\n        }\n        // distance\n        try {\n            Site s1 = SiteDB.getSiteDB().getSite(fixed);\n            Site s2 = SiteDB.getSiteDB().getSite(moving);\n            dist = new Integer(s1.distanceTo(s2));\n        } catch (SiteNotFoundException snfe) {\n            dist = null;\n        }\n        // is it significant?  use the t-score to check.  (why t-score?  why just one?)\n        isSig = new TScore().isSignificant(t, n);\n    }\n\n    // FOR BACKWARDS COMPATIBILITY ONLY -- REFACTOR AND REMOVE ME -- ??\n    // -- used only for Grid loading\n    public Single(float t, float tr, float d, float r, int n) {\n        this.t = t;\n        this.tr = tr;\n        this.d = d;\n        this.n = n;\n        this.r = r;\n        isSig = new TScore().isSignificant(t, n);\n    }\n\n    public boolean isSignificant() {\n        return isSig;\n    }\n\n    // as \"x km\", localized, or the empty string if unknown(null)\n    public String distanceAsString() {\n        if (dist == null)\n            return \"\";\n        return dist + \" \" + I18n.getText(\"km\");\n    }\n}\n",
		"id": "/EvoSuiteBenchmark/35_corina/src/main/java/corina/cross/Single_1Test.java",
		"test_prompt": "// Single_1Test.java\npackage corina.cross;\n\nimport corina.Sample;\nimport corina.ui.I18n;\nimport corina.site.Site;\nimport corina.site.SiteDB;\nimport corina.site.SiteNotFoundException;\nimport java.text.DecimalFormat;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link Single}.\n* It contains ten unit test cases for the {@link Single#formatTrend()} method.\n*/\nclass Single_1Test {"
	},
	{
		"original_code": "// Single.java\npackage corina.cross;\n\nimport corina.Sample;\nimport corina.ui.I18n;\nimport corina.site.Site;\nimport corina.site.SiteDB;\nimport corina.site.SiteNotFoundException;\nimport java.text.DecimalFormat;\n\n// a single crossdate between two samples, where they are.\n// used by Grid, Table, and anybody else who wants to see if samples crossdate.\npublic class Single {\n\n    // the scores themselves\n    protected float t, tr, d, r;\n\n    // FUTURE: float[]\n    // get rid of these formatters eventually.  scores should be able\n    // to format themselves.\n    static DecimalFormat f1, f2, f3, f4;\n\n    static {\n        // REFACTOR: the crosses to use should be user-pickable, so this is B-A-D.\n        f1 = new DecimalFormat(new TScore().getFormat());\n        f2 = new DecimalFormat(new Trend().getFormat());\n        f3 = new DecimalFormat(new DScore().getFormat());\n        f4 = new DecimalFormat(new RValue().getFormat());\n    }\n\n    // -- return all scores, formatted properly, in an array?\n    // public String[] formatAll() ?\n    public String formatT() {\n        return f1.format(t);\n    }\n\n    public String formatTrend() {\n        return f2.format(tr);\n    }\n\n    public String formatD() {\n        return f3.format(d);\n    }\n\n    public String formatR() {\n        return f4.format(r);\n    }\n\n    /*\n\t BETTER INTERFACE:\n\t -- float scores[]\n\t -- scores[i] is for ALL_CROSSDATES[i]\n\t -- String format(String alg)? -- single.format(\"TScore\") => \"1.23\"\n\t REFACTORING:\n\t -- write formatT() = format(\"TScore\"), etc.\n\t -- switch uses of format() to format(\"TScore\")\n\t -- switch format(),format(),format() to loop through DEFAULT_CROSSDATES\n\t */\n    public String toXML() {\n        return \"<cross t=\\\"\" + t + \"\\\" tr=\\\"\" + tr + \"\\\" d=\\\"\" + d + \"\\\" r=\\\"\" + r + \"\\\" n=\\\"\" + n + \"\\\"/>\";\n        // REFACTOR: would messageformat be clearer?\n    }\n\n    // TODO: make Cross.getShortName() (\"t\", \"tr\", \"D\", etc.) -- who uses this?\n    // FUTURE: use Cross.DEFAULT_CROSSDATES, OR: allow any number of algorithms here.\n    // the overlap\n    /*private*/\n    int n;\n\n    // distance between sites, in km, or null if unknown\n    /*private*/\n    Integer dist;\n\n    // is it significant?\n    /*private*/\n    boolean isSig;\n\n    // so we can embrace and extend...\n    public Single() {\n        n = 0;\n        dist = null;\n        isSig = false;\n    }\n\n    // run a single crossdate between 2 samples\n    public Single(Sample fixed, Sample moving) {\n        // fill in crosses, if they overlap\n        n = fixed.range.overlap(moving.range);\n        if (n > 0) {\n            // this use of single() is kind of hackish.  since it's only used here, it should be REFACTORED.\n            t = new TScore(fixed, moving).single();\n            tr = new Trend(fixed, moving).single();\n            d = new DScore(fixed, moving).single();\n            r = new RValue(fixed, moving).single();\n            // FIXME: RValue computation is redundant, since it's already computed in the TScore\n        } else {\n            // right?\n            t = tr = d = r = 0;\n        }\n        // distance\n        try {\n            Site s1 = SiteDB.getSiteDB().getSite(fixed);\n            Site s2 = SiteDB.getSiteDB().getSite(moving);\n            dist = new Integer(s1.distanceTo(s2));\n        } catch (SiteNotFoundException snfe) {\n            dist = null;\n        }\n        // is it significant?  use the t-score to check.  (why t-score?  why just one?)\n        isSig = new TScore().isSignificant(t, n);\n    }\n\n    // FOR BACKWARDS COMPATIBILITY ONLY -- REFACTOR AND REMOVE ME -- ??\n    // -- used only for Grid loading\n    public Single(float t, float tr, float d, float r, int n) {\n        this.t = t;\n        this.tr = tr;\n        this.d = d;\n        this.n = n;\n        this.r = r;\n        isSig = new TScore().isSignificant(t, n);\n    }\n\n    public boolean isSignificant() {\n        return isSig;\n    }\n\n    // as \"x km\", localized, or the empty string if unknown(null)\n    public String distanceAsString() {\n        if (dist == null)\n            return \"\";\n        return dist + \" \" + I18n.getText(\"km\");\n    }\n}\n",
		"id": "/EvoSuiteBenchmark/35_corina/src/main/java/corina/cross/Single_2Test.java",
		"test_prompt": "// Single_2Test.java\npackage corina.cross;\n\nimport corina.Sample;\nimport corina.ui.I18n;\nimport corina.site.Site;\nimport corina.site.SiteDB;\nimport corina.site.SiteNotFoundException;\nimport java.text.DecimalFormat;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link Single}.\n* It contains ten unit test cases for the {@link Single#formatD()} method.\n*/\nclass Single_2Test {"
	},
	{
		"original_code": "// Single.java\npackage corina.cross;\n\nimport corina.Sample;\nimport corina.ui.I18n;\nimport corina.site.Site;\nimport corina.site.SiteDB;\nimport corina.site.SiteNotFoundException;\nimport java.text.DecimalFormat;\n\n// a single crossdate between two samples, where they are.\n// used by Grid, Table, and anybody else who wants to see if samples crossdate.\npublic class Single {\n\n    // the scores themselves\n    protected float t, tr, d, r;\n\n    // FUTURE: float[]\n    // get rid of these formatters eventually.  scores should be able\n    // to format themselves.\n    static DecimalFormat f1, f2, f3, f4;\n\n    static {\n        // REFACTOR: the crosses to use should be user-pickable, so this is B-A-D.\n        f1 = new DecimalFormat(new TScore().getFormat());\n        f2 = new DecimalFormat(new Trend().getFormat());\n        f3 = new DecimalFormat(new DScore().getFormat());\n        f4 = new DecimalFormat(new RValue().getFormat());\n    }\n\n    // -- return all scores, formatted properly, in an array?\n    // public String[] formatAll() ?\n    public String formatT() {\n        return f1.format(t);\n    }\n\n    public String formatTrend() {\n        return f2.format(tr);\n    }\n\n    public String formatD() {\n        return f3.format(d);\n    }\n\n    public String formatR() {\n        return f4.format(r);\n    }\n\n    /*\n\t BETTER INTERFACE:\n\t -- float scores[]\n\t -- scores[i] is for ALL_CROSSDATES[i]\n\t -- String format(String alg)? -- single.format(\"TScore\") => \"1.23\"\n\t REFACTORING:\n\t -- write formatT() = format(\"TScore\"), etc.\n\t -- switch uses of format() to format(\"TScore\")\n\t -- switch format(),format(),format() to loop through DEFAULT_CROSSDATES\n\t */\n    public String toXML() {\n        return \"<cross t=\\\"\" + t + \"\\\" tr=\\\"\" + tr + \"\\\" d=\\\"\" + d + \"\\\" r=\\\"\" + r + \"\\\" n=\\\"\" + n + \"\\\"/>\";\n        // REFACTOR: would messageformat be clearer?\n    }\n\n    // TODO: make Cross.getShortName() (\"t\", \"tr\", \"D\", etc.) -- who uses this?\n    // FUTURE: use Cross.DEFAULT_CROSSDATES, OR: allow any number of algorithms here.\n    // the overlap\n    /*private*/\n    int n;\n\n    // distance between sites, in km, or null if unknown\n    /*private*/\n    Integer dist;\n\n    // is it significant?\n    /*private*/\n    boolean isSig;\n\n    // so we can embrace and extend...\n    public Single() {\n        n = 0;\n        dist = null;\n        isSig = false;\n    }\n\n    // run a single crossdate between 2 samples\n    public Single(Sample fixed, Sample moving) {\n        // fill in crosses, if they overlap\n        n = fixed.range.overlap(moving.range);\n        if (n > 0) {\n            // this use of single() is kind of hackish.  since it's only used here, it should be REFACTORED.\n            t = new TScore(fixed, moving).single();\n            tr = new Trend(fixed, moving).single();\n            d = new DScore(fixed, moving).single();\n            r = new RValue(fixed, moving).single();\n            // FIXME: RValue computation is redundant, since it's already computed in the TScore\n        } else {\n            // right?\n            t = tr = d = r = 0;\n        }\n        // distance\n        try {\n            Site s1 = SiteDB.getSiteDB().getSite(fixed);\n            Site s2 = SiteDB.getSiteDB().getSite(moving);\n            dist = new Integer(s1.distanceTo(s2));\n        } catch (SiteNotFoundException snfe) {\n            dist = null;\n        }\n        // is it significant?  use the t-score to check.  (why t-score?  why just one?)\n        isSig = new TScore().isSignificant(t, n);\n    }\n\n    // FOR BACKWARDS COMPATIBILITY ONLY -- REFACTOR AND REMOVE ME -- ??\n    // -- used only for Grid loading\n    public Single(float t, float tr, float d, float r, int n) {\n        this.t = t;\n        this.tr = tr;\n        this.d = d;\n        this.n = n;\n        this.r = r;\n        isSig = new TScore().isSignificant(t, n);\n    }\n\n    public boolean isSignificant() {\n        return isSig;\n    }\n\n    // as \"x km\", localized, or the empty string if unknown(null)\n    public String distanceAsString() {\n        if (dist == null)\n            return \"\";\n        return dist + \" \" + I18n.getText(\"km\");\n    }\n}\n",
		"id": "/EvoSuiteBenchmark/35_corina/src/main/java/corina/cross/Single_3Test.java",
		"test_prompt": "// Single_3Test.java\npackage corina.cross;\n\nimport corina.Sample;\nimport corina.ui.I18n;\nimport corina.site.Site;\nimport corina.site.SiteDB;\nimport corina.site.SiteNotFoundException;\nimport java.text.DecimalFormat;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link Single}.\n* It contains ten unit test cases for the {@link Single#formatR()} method.\n*/\nclass Single_3Test {"
	},
	{
		"original_code": "// Single.java\npackage corina.cross;\n\nimport corina.Sample;\nimport corina.ui.I18n;\nimport corina.site.Site;\nimport corina.site.SiteDB;\nimport corina.site.SiteNotFoundException;\nimport java.text.DecimalFormat;\n\n// a single crossdate between two samples, where they are.\n// used by Grid, Table, and anybody else who wants to see if samples crossdate.\npublic class Single {\n\n    // the scores themselves\n    protected float t, tr, d, r;\n\n    // FUTURE: float[]\n    // get rid of these formatters eventually.  scores should be able\n    // to format themselves.\n    static DecimalFormat f1, f2, f3, f4;\n\n    static {\n        // REFACTOR: the crosses to use should be user-pickable, so this is B-A-D.\n        f1 = new DecimalFormat(new TScore().getFormat());\n        f2 = new DecimalFormat(new Trend().getFormat());\n        f3 = new DecimalFormat(new DScore().getFormat());\n        f4 = new DecimalFormat(new RValue().getFormat());\n    }\n\n    // -- return all scores, formatted properly, in an array?\n    // public String[] formatAll() ?\n    public String formatT() {\n        return f1.format(t);\n    }\n\n    public String formatTrend() {\n        return f2.format(tr);\n    }\n\n    public String formatD() {\n        return f3.format(d);\n    }\n\n    public String formatR() {\n        return f4.format(r);\n    }\n\n    /*\n\t BETTER INTERFACE:\n\t -- float scores[]\n\t -- scores[i] is for ALL_CROSSDATES[i]\n\t -- String format(String alg)? -- single.format(\"TScore\") => \"1.23\"\n\t REFACTORING:\n\t -- write formatT() = format(\"TScore\"), etc.\n\t -- switch uses of format() to format(\"TScore\")\n\t -- switch format(),format(),format() to loop through DEFAULT_CROSSDATES\n\t */\n    public String toXML() {\n        return \"<cross t=\\\"\" + t + \"\\\" tr=\\\"\" + tr + \"\\\" d=\\\"\" + d + \"\\\" r=\\\"\" + r + \"\\\" n=\\\"\" + n + \"\\\"/>\";\n        // REFACTOR: would messageformat be clearer?\n    }\n\n    // TODO: make Cross.getShortName() (\"t\", \"tr\", \"D\", etc.) -- who uses this?\n    // FUTURE: use Cross.DEFAULT_CROSSDATES, OR: allow any number of algorithms here.\n    // the overlap\n    /*private*/\n    int n;\n\n    // distance between sites, in km, or null if unknown\n    /*private*/\n    Integer dist;\n\n    // is it significant?\n    /*private*/\n    boolean isSig;\n\n    // so we can embrace and extend...\n    public Single() {\n        n = 0;\n        dist = null;\n        isSig = false;\n    }\n\n    // run a single crossdate between 2 samples\n    public Single(Sample fixed, Sample moving) {\n        // fill in crosses, if they overlap\n        n = fixed.range.overlap(moving.range);\n        if (n > 0) {\n            // this use of single() is kind of hackish.  since it's only used here, it should be REFACTORED.\n            t = new TScore(fixed, moving).single();\n            tr = new Trend(fixed, moving).single();\n            d = new DScore(fixed, moving).single();\n            r = new RValue(fixed, moving).single();\n            // FIXME: RValue computation is redundant, since it's already computed in the TScore\n        } else {\n            // right?\n            t = tr = d = r = 0;\n        }\n        // distance\n        try {\n            Site s1 = SiteDB.getSiteDB().getSite(fixed);\n            Site s2 = SiteDB.getSiteDB().getSite(moving);\n            dist = new Integer(s1.distanceTo(s2));\n        } catch (SiteNotFoundException snfe) {\n            dist = null;\n        }\n        // is it significant?  use the t-score to check.  (why t-score?  why just one?)\n        isSig = new TScore().isSignificant(t, n);\n    }\n\n    // FOR BACKWARDS COMPATIBILITY ONLY -- REFACTOR AND REMOVE ME -- ??\n    // -- used only for Grid loading\n    public Single(float t, float tr, float d, float r, int n) {\n        this.t = t;\n        this.tr = tr;\n        this.d = d;\n        this.n = n;\n        this.r = r;\n        isSig = new TScore().isSignificant(t, n);\n    }\n\n    public boolean isSignificant() {\n        return isSig;\n    }\n\n    // as \"x km\", localized, or the empty string if unknown(null)\n    public String distanceAsString() {\n        if (dist == null)\n            return \"\";\n        return dist + \" \" + I18n.getText(\"km\");\n    }\n}\n",
		"id": "/EvoSuiteBenchmark/35_corina/src/main/java/corina/cross/Single_4Test.java",
		"test_prompt": "// Single_4Test.java\npackage corina.cross;\n\nimport corina.Sample;\nimport corina.ui.I18n;\nimport corina.site.Site;\nimport corina.site.SiteDB;\nimport corina.site.SiteNotFoundException;\nimport java.text.DecimalFormat;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link Single}.\n* It contains ten unit test cases for the {@link Single#toXML()} method.\n*/\nclass Single_4Test {"
	},
	{
		"original_code": "// Single.java\npackage corina.cross;\n\nimport corina.Sample;\nimport corina.ui.I18n;\nimport corina.site.Site;\nimport corina.site.SiteDB;\nimport corina.site.SiteNotFoundException;\nimport java.text.DecimalFormat;\n\n// a single crossdate between two samples, where they are.\n// used by Grid, Table, and anybody else who wants to see if samples crossdate.\npublic class Single {\n\n    // the scores themselves\n    protected float t, tr, d, r;\n\n    // FUTURE: float[]\n    // get rid of these formatters eventually.  scores should be able\n    // to format themselves.\n    static DecimalFormat f1, f2, f3, f4;\n\n    static {\n        // REFACTOR: the crosses to use should be user-pickable, so this is B-A-D.\n        f1 = new DecimalFormat(new TScore().getFormat());\n        f2 = new DecimalFormat(new Trend().getFormat());\n        f3 = new DecimalFormat(new DScore().getFormat());\n        f4 = new DecimalFormat(new RValue().getFormat());\n    }\n\n    // -- return all scores, formatted properly, in an array?\n    // public String[] formatAll() ?\n    public String formatT() {\n        return f1.format(t);\n    }\n\n    public String formatTrend() {\n        return f2.format(tr);\n    }\n\n    public String formatD() {\n        return f3.format(d);\n    }\n\n    public String formatR() {\n        return f4.format(r);\n    }\n\n    /*\n\t BETTER INTERFACE:\n\t -- float scores[]\n\t -- scores[i] is for ALL_CROSSDATES[i]\n\t -- String format(String alg)? -- single.format(\"TScore\") => \"1.23\"\n\t REFACTORING:\n\t -- write formatT() = format(\"TScore\"), etc.\n\t -- switch uses of format() to format(\"TScore\")\n\t -- switch format(),format(),format() to loop through DEFAULT_CROSSDATES\n\t */\n    public String toXML() {\n        return \"<cross t=\\\"\" + t + \"\\\" tr=\\\"\" + tr + \"\\\" d=\\\"\" + d + \"\\\" r=\\\"\" + r + \"\\\" n=\\\"\" + n + \"\\\"/>\";\n        // REFACTOR: would messageformat be clearer?\n    }\n\n    // TODO: make Cross.getShortName() (\"t\", \"tr\", \"D\", etc.) -- who uses this?\n    // FUTURE: use Cross.DEFAULT_CROSSDATES, OR: allow any number of algorithms here.\n    // the overlap\n    /*private*/\n    int n;\n\n    // distance between sites, in km, or null if unknown\n    /*private*/\n    Integer dist;\n\n    // is it significant?\n    /*private*/\n    boolean isSig;\n\n    // so we can embrace and extend...\n    public Single() {\n        n = 0;\n        dist = null;\n        isSig = false;\n    }\n\n    // run a single crossdate between 2 samples\n    public Single(Sample fixed, Sample moving) {\n        // fill in crosses, if they overlap\n        n = fixed.range.overlap(moving.range);\n        if (n > 0) {\n            // this use of single() is kind of hackish.  since it's only used here, it should be REFACTORED.\n            t = new TScore(fixed, moving).single();\n            tr = new Trend(fixed, moving).single();\n            d = new DScore(fixed, moving).single();\n            r = new RValue(fixed, moving).single();\n            // FIXME: RValue computation is redundant, since it's already computed in the TScore\n        } else {\n            // right?\n            t = tr = d = r = 0;\n        }\n        // distance\n        try {\n            Site s1 = SiteDB.getSiteDB().getSite(fixed);\n            Site s2 = SiteDB.getSiteDB().getSite(moving);\n            dist = new Integer(s1.distanceTo(s2));\n        } catch (SiteNotFoundException snfe) {\n            dist = null;\n        }\n        // is it significant?  use the t-score to check.  (why t-score?  why just one?)\n        isSig = new TScore().isSignificant(t, n);\n    }\n\n    // FOR BACKWARDS COMPATIBILITY ONLY -- REFACTOR AND REMOVE ME -- ??\n    // -- used only for Grid loading\n    public Single(float t, float tr, float d, float r, int n) {\n        this.t = t;\n        this.tr = tr;\n        this.d = d;\n        this.n = n;\n        this.r = r;\n        isSig = new TScore().isSignificant(t, n);\n    }\n\n    public boolean isSignificant() {\n        return isSig;\n    }\n\n    // as \"x km\", localized, or the empty string if unknown(null)\n    public String distanceAsString() {\n        if (dist == null)\n            return \"\";\n        return dist + \" \" + I18n.getText(\"km\");\n    }\n}\n",
		"id": "/EvoSuiteBenchmark/35_corina/src/main/java/corina/cross/Single_5Test.java",
		"test_prompt": "// Single_5Test.java\npackage corina.cross;\n\nimport corina.Sample;\nimport corina.ui.I18n;\nimport corina.site.Site;\nimport corina.site.SiteDB;\nimport corina.site.SiteNotFoundException;\nimport java.text.DecimalFormat;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link Single}.\n* It contains ten unit test cases for the {@link Single#isSignificant()} method.\n*/\nclass Single_5Test {"
	},
	{
		"original_code": "// Single.java\npackage corina.cross;\n\nimport corina.Sample;\nimport corina.ui.I18n;\nimport corina.site.Site;\nimport corina.site.SiteDB;\nimport corina.site.SiteNotFoundException;\nimport java.text.DecimalFormat;\n\n// a single crossdate between two samples, where they are.\n// used by Grid, Table, and anybody else who wants to see if samples crossdate.\npublic class Single {\n\n    // the scores themselves\n    protected float t, tr, d, r;\n\n    // FUTURE: float[]\n    // get rid of these formatters eventually.  scores should be able\n    // to format themselves.\n    static DecimalFormat f1, f2, f3, f4;\n\n    static {\n        // REFACTOR: the crosses to use should be user-pickable, so this is B-A-D.\n        f1 = new DecimalFormat(new TScore().getFormat());\n        f2 = new DecimalFormat(new Trend().getFormat());\n        f3 = new DecimalFormat(new DScore().getFormat());\n        f4 = new DecimalFormat(new RValue().getFormat());\n    }\n\n    // -- return all scores, formatted properly, in an array?\n    // public String[] formatAll() ?\n    public String formatT() {\n        return f1.format(t);\n    }\n\n    public String formatTrend() {\n        return f2.format(tr);\n    }\n\n    public String formatD() {\n        return f3.format(d);\n    }\n\n    public String formatR() {\n        return f4.format(r);\n    }\n\n    /*\n\t BETTER INTERFACE:\n\t -- float scores[]\n\t -- scores[i] is for ALL_CROSSDATES[i]\n\t -- String format(String alg)? -- single.format(\"TScore\") => \"1.23\"\n\t REFACTORING:\n\t -- write formatT() = format(\"TScore\"), etc.\n\t -- switch uses of format() to format(\"TScore\")\n\t -- switch format(),format(),format() to loop through DEFAULT_CROSSDATES\n\t */\n    public String toXML() {\n        return \"<cross t=\\\"\" + t + \"\\\" tr=\\\"\" + tr + \"\\\" d=\\\"\" + d + \"\\\" r=\\\"\" + r + \"\\\" n=\\\"\" + n + \"\\\"/>\";\n        // REFACTOR: would messageformat be clearer?\n    }\n\n    // TODO: make Cross.getShortName() (\"t\", \"tr\", \"D\", etc.) -- who uses this?\n    // FUTURE: use Cross.DEFAULT_CROSSDATES, OR: allow any number of algorithms here.\n    // the overlap\n    /*private*/\n    int n;\n\n    // distance between sites, in km, or null if unknown\n    /*private*/\n    Integer dist;\n\n    // is it significant?\n    /*private*/\n    boolean isSig;\n\n    // so we can embrace and extend...\n    public Single() {\n        n = 0;\n        dist = null;\n        isSig = false;\n    }\n\n    // run a single crossdate between 2 samples\n    public Single(Sample fixed, Sample moving) {\n        // fill in crosses, if they overlap\n        n = fixed.range.overlap(moving.range);\n        if (n > 0) {\n            // this use of single() is kind of hackish.  since it's only used here, it should be REFACTORED.\n            t = new TScore(fixed, moving).single();\n            tr = new Trend(fixed, moving).single();\n            d = new DScore(fixed, moving).single();\n            r = new RValue(fixed, moving).single();\n            // FIXME: RValue computation is redundant, since it's already computed in the TScore\n        } else {\n            // right?\n            t = tr = d = r = 0;\n        }\n        // distance\n        try {\n            Site s1 = SiteDB.getSiteDB().getSite(fixed);\n            Site s2 = SiteDB.getSiteDB().getSite(moving);\n            dist = new Integer(s1.distanceTo(s2));\n        } catch (SiteNotFoundException snfe) {\n            dist = null;\n        }\n        // is it significant?  use the t-score to check.  (why t-score?  why just one?)\n        isSig = new TScore().isSignificant(t, n);\n    }\n\n    // FOR BACKWARDS COMPATIBILITY ONLY -- REFACTOR AND REMOVE ME -- ??\n    // -- used only for Grid loading\n    public Single(float t, float tr, float d, float r, int n) {\n        this.t = t;\n        this.tr = tr;\n        this.d = d;\n        this.n = n;\n        this.r = r;\n        isSig = new TScore().isSignificant(t, n);\n    }\n\n    public boolean isSignificant() {\n        return isSig;\n    }\n\n    // as \"x km\", localized, or the empty string if unknown(null)\n    public String distanceAsString() {\n        if (dist == null)\n            return \"\";\n        return dist + \" \" + I18n.getText(\"km\");\n    }\n}\n",
		"id": "/EvoSuiteBenchmark/35_corina/src/main/java/corina/cross/Single_6Test.java",
		"test_prompt": "// Single_6Test.java\npackage corina.cross;\n\nimport corina.Sample;\nimport corina.ui.I18n;\nimport corina.site.Site;\nimport corina.site.SiteDB;\nimport corina.site.SiteNotFoundException;\nimport java.text.DecimalFormat;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link Single}.\n* It contains ten unit test cases for the {@link Single#distanceAsString()} method.\n*/\nclass Single_6Test {"
	},
	{
		"original_code": "// Trend.java\n//\n// This file is part of Corina.\n//\n// Corina is free software; you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation; either version 2 of the License, or\n// (at your option) any later version.\n//\n// Corina is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Corina; if not, write to the Free Software\n// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n//\n// Copyright 2001 Ken Harris <kbh7@cornell.edu>\n//\npackage corina.cross;\n\nimport java.util.List;\nimport corina.Sample;\nimport corina.core.App;\nimport corina.ui.I18n;\n\n/**\n *   A \"trend\", or <i>Gleichl&auml;ufigkeitskoeffizient</i>, crossdate.\n *\n *   <p>Scores are the fraction of matching trends.</p>\n *\n *   @author Ken Harris &lt;kbh7 <i style=\"color: gray\">at</i> cornell <i style=\"color: gray\">dot</i> edu&gt;\n *   @version $Id: Trend.java,v 1.6 2005/01/24 03:09:31 aaron Exp $\n */\npublic class Trend extends Cross {\n\n    // don't use me -- for getName() only, i think\n    public Trend() {\n    }\n\n    /**\n     *  Create a new Trend from given samples.\n     * \t@param fixed fixed sample to use\n     * \t@param moving moving sample to use\n     */\n    public Trend(Sample fixed, Sample moving) {\n        super(fixed, moving);\n    }\n\n    // number of significant intervals(?) to use, when computing\n    // whether a trend is significant; 1 gave too many hits, 2 seems\n    // good (should this be user-settable in the prefs?  1sig, 2sig,\n    // 3sig)\n    private static final int SIGMA = 2;\n\n    // REFACTOR: this is ok here, because it's how these formulas are written,\n    // but it's lousy higher-up.  i should have an isSig(int index) or even isSig(Year).\n    public boolean isSignificant(float score, int overlap) {\n        return score >= (50. + SIGMA * 50. / Math.sqrt(overlap)) / 100.;\n    }\n\n    // OBSOLETE soon -- i hope?\n    // still used by: AllScoresView, CrossdatePrinter\n    public float getMinimumSignificant() {\n        return 0.65f;\n    }\n\n    public String getName() {\n        return I18n.getText(\"trend\");\n    }\n\n    public String getFormat() {\n        return App.prefs.getPref(\"corina.cross.trend.format\", \"0.0%\");\n    }\n\n    // same data, but in arrays\n    private float[] fixedData, movingData;\n\n    protected void preamble() {\n        fixedData = makeArray(getFixed().data);\n        movingData = makeArray(getMoving().data);\n        // Float is (probably at least) 26 bytes, compared with 4\n        // bytes for a float, so for 1000 floats, that's 26K vs 4K in\n        // memory.  double this for Doubles: 52K for a list of\n        // Doubles.  that's a savings of over 10x when moving from\n        // Doubles to floats.  access time probably doesn't save this\n        // much, but if i can keep more crossdates/samples in memory,\n        // that's less i/o.\n    }\n\n    // make an array of floats from a List of Numbers\n    private float[] makeArray(List list) {\n        int n = list.size();\n        float[] array = new float[n];\n        for (int i = 0; i < n; i++) array[i] = ((Number) list.get(i)).floatValue();\n        return array;\n    }\n\n    // why was trend so slow?  because it was running .get(i) O(n^2) times\n    // t-score ran it only O(n) times, and ran 3x as fast.\n    // solution:\n    // -- never pass a List of Objects to a crossdate, it never pays off.\n    // -- shove this list->array code up into cross.java, refactor.\n    // why does trend need floating point numbers?  i can't think of a\n    // case when ints wouldn't be good enough.  (floating point\n    // comparisons are slower than int comparisons, i presume.)\n    /**\n     *       Compute a single trend, i.e., the trend between the two\n     *       samples for a given possible position.\n     *\n     *       @param offset_fixed index into the fixed sample to start\n     *       @param offset_moving index into the moving sample to start\n     *       @return trend score for these offsets\n     */\n    public float compute(int offset_fixed, int offset_moving) {\n        int i = offset_fixed, j = offset_moving;\n        float agree = 0;\n        int total = 0;\n        float fi0, fi1, mi0, mi1;\n        fi1 = fixedData[i];\n        mi1 = movingData[j];\n        while (i < fixedData.length - 1 && j < movingData.length - 1) {\n            fi0 = fi1;\n            fi1 = fixedData[i + 1];\n            mi0 = mi1;\n            mi1 = movingData[j + 1];\n            // this isn't exactly the same as schweingruber.\n            // (would that be easier to vectorize?)\n            if ((fi0 < fi1 && mi0 < mi1) || (fi0 > fi1 && mi0 > mi1) || (fi0 == fi1 && mi0 == mi1))\n                agree += 1;\n            else if (// note: \"||\", not \"&&\"\n            fi0 == fi1 || mi0 == mi1)\n                agree += 0.5;\n            total++;\n            i++;\n            j++;\n        }\n        // oh, for cryin' out loud, don't do that...\n        // (some loser is crossdating a zero-length sample)\n        if (total == 0)\n            return 0;\n        return agree / total;\n    }\n}\n",
		"id": "/EvoSuiteBenchmark/35_corina/src/main/java/corina/cross/Trend_0Test.java",
		"test_prompt": "// Trend_0Test.java\n// This file is part of Corina.\n//\n// Corina is free software; you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation; either version 2 of the License, or\n// (at your option) any later version.\n//\n// Corina is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Corina; if not, write to the Free Software\n// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n//\n// Copyright 2001 Ken Harris <kbh7@cornell.edu>\n//\npackage corina.cross;\n\nimport java.util.List;\nimport corina.Sample;\nimport corina.core.App;\nimport corina.ui.I18n;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link Trend}.\n* It contains ten unit test cases for the {@link Trend#isSignificant(float, int)} method.\n*/\nclass Trend_0Test {"
	},
	{
		"original_code": "// Trend.java\n//\n// This file is part of Corina.\n//\n// Corina is free software; you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation; either version 2 of the License, or\n// (at your option) any later version.\n//\n// Corina is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Corina; if not, write to the Free Software\n// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n//\n// Copyright 2001 Ken Harris <kbh7@cornell.edu>\n//\npackage corina.cross;\n\nimport java.util.List;\nimport corina.Sample;\nimport corina.core.App;\nimport corina.ui.I18n;\n\n/**\n *   A \"trend\", or <i>Gleichl&auml;ufigkeitskoeffizient</i>, crossdate.\n *\n *   <p>Scores are the fraction of matching trends.</p>\n *\n *   @author Ken Harris &lt;kbh7 <i style=\"color: gray\">at</i> cornell <i style=\"color: gray\">dot</i> edu&gt;\n *   @version $Id: Trend.java,v 1.6 2005/01/24 03:09:31 aaron Exp $\n */\npublic class Trend extends Cross {\n\n    // don't use me -- for getName() only, i think\n    public Trend() {\n    }\n\n    /**\n     *  Create a new Trend from given samples.\n     * \t@param fixed fixed sample to use\n     * \t@param moving moving sample to use\n     */\n    public Trend(Sample fixed, Sample moving) {\n        super(fixed, moving);\n    }\n\n    // number of significant intervals(?) to use, when computing\n    // whether a trend is significant; 1 gave too many hits, 2 seems\n    // good (should this be user-settable in the prefs?  1sig, 2sig,\n    // 3sig)\n    private static final int SIGMA = 2;\n\n    // REFACTOR: this is ok here, because it's how these formulas are written,\n    // but it's lousy higher-up.  i should have an isSig(int index) or even isSig(Year).\n    public boolean isSignificant(float score, int overlap) {\n        return score >= (50. + SIGMA * 50. / Math.sqrt(overlap)) / 100.;\n    }\n\n    // OBSOLETE soon -- i hope?\n    // still used by: AllScoresView, CrossdatePrinter\n    public float getMinimumSignificant() {\n        return 0.65f;\n    }\n\n    public String getName() {\n        return I18n.getText(\"trend\");\n    }\n\n    public String getFormat() {\n        return App.prefs.getPref(\"corina.cross.trend.format\", \"0.0%\");\n    }\n\n    // same data, but in arrays\n    private float[] fixedData, movingData;\n\n    protected void preamble() {\n        fixedData = makeArray(getFixed().data);\n        movingData = makeArray(getMoving().data);\n        // Float is (probably at least) 26 bytes, compared with 4\n        // bytes for a float, so for 1000 floats, that's 26K vs 4K in\n        // memory.  double this for Doubles: 52K for a list of\n        // Doubles.  that's a savings of over 10x when moving from\n        // Doubles to floats.  access time probably doesn't save this\n        // much, but if i can keep more crossdates/samples in memory,\n        // that's less i/o.\n    }\n\n    // make an array of floats from a List of Numbers\n    private float[] makeArray(List list) {\n        int n = list.size();\n        float[] array = new float[n];\n        for (int i = 0; i < n; i++) array[i] = ((Number) list.get(i)).floatValue();\n        return array;\n    }\n\n    // why was trend so slow?  because it was running .get(i) O(n^2) times\n    // t-score ran it only O(n) times, and ran 3x as fast.\n    // solution:\n    // -- never pass a List of Objects to a crossdate, it never pays off.\n    // -- shove this list->array code up into cross.java, refactor.\n    // why does trend need floating point numbers?  i can't think of a\n    // case when ints wouldn't be good enough.  (floating point\n    // comparisons are slower than int comparisons, i presume.)\n    /**\n     *       Compute a single trend, i.e., the trend between the two\n     *       samples for a given possible position.\n     *\n     *       @param offset_fixed index into the fixed sample to start\n     *       @param offset_moving index into the moving sample to start\n     *       @return trend score for these offsets\n     */\n    public float compute(int offset_fixed, int offset_moving) {\n        int i = offset_fixed, j = offset_moving;\n        float agree = 0;\n        int total = 0;\n        float fi0, fi1, mi0, mi1;\n        fi1 = fixedData[i];\n        mi1 = movingData[j];\n        while (i < fixedData.length - 1 && j < movingData.length - 1) {\n            fi0 = fi1;\n            fi1 = fixedData[i + 1];\n            mi0 = mi1;\n            mi1 = movingData[j + 1];\n            // this isn't exactly the same as schweingruber.\n            // (would that be easier to vectorize?)\n            if ((fi0 < fi1 && mi0 < mi1) || (fi0 > fi1 && mi0 > mi1) || (fi0 == fi1 && mi0 == mi1))\n                agree += 1;\n            else if (// note: \"||\", not \"&&\"\n            fi0 == fi1 || mi0 == mi1)\n                agree += 0.5;\n            total++;\n            i++;\n            j++;\n        }\n        // oh, for cryin' out loud, don't do that...\n        // (some loser is crossdating a zero-length sample)\n        if (total == 0)\n            return 0;\n        return agree / total;\n    }\n}\n",
		"id": "/EvoSuiteBenchmark/35_corina/src/main/java/corina/cross/Trend_1Test.java",
		"test_prompt": "// Trend_1Test.java\n// This file is part of Corina.\n//\n// Corina is free software; you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation; either version 2 of the License, or\n// (at your option) any later version.\n//\n// Corina is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Corina; if not, write to the Free Software\n// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n//\n// Copyright 2001 Ken Harris <kbh7@cornell.edu>\n//\npackage corina.cross;\n\nimport java.util.List;\nimport corina.Sample;\nimport corina.core.App;\nimport corina.ui.I18n;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link Trend}.\n* It contains ten unit test cases for the {@link Trend#compute(int, int)} method.\n*/\nclass Trend_1Test {"
	},
	{
		"original_code": "// Sequence.java\n//\n// This file is part of Corina.\n//\n// Corina is free software; you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation; either version 2 of the License, or\n// (at your option) any later version.\n//\n// Corina is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Corina; if not, write to the Free Software\n// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n//\n// Copyright 2001 Ken Harris <kbh7@cornell.edu>\n//\npackage corina.cross;\n\nimport corina.Sample;\nimport corina.Element;\nimport java.io.File;\nimport java.io.IOException;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Set;\nimport java.util.HashSet;\n\n/**\n *   A sequence of crossdates.\n *\n *   <p>Usually, users won't want to run just one crossdate between two\n *   samples, but will want to try a whole bunch of crossdates in\n *   succession.  That's a Sequence.</p>\n *\n *   <p>Conceptually, a Sequence consists of:</p>\n *   <ul>\n *     <li>a list of fixed samples\n *     <li>a list of moving samples\n *     <li>a list of crossdates (algorithms) to run between them\n *   </ul>\n *\n *   <p>The Sequence lets you step through <i>pairings</i>.  A pairing\n *   is just a crossdate out of the sequence.  A Sequence object makes a\n *   crossdate out of the current pairing by taking a sample from each\n *   list, and running an algorithm on it.</p>\n *\n *   <p>For example, if you make a sequence with fixed samples New York\n *   1, New York 2, and New York 3, moving samples Cairo 1 and Cairo 2,\n *   and the default algorithms of T-score, Trend, and D-score, the\n *   pairings (crossdates) you'll get will be:</p>\n *   <ul>\n *   <li>New York 1 x Cairo 1, T-score\n *   <li>New York 1 x Cairo 1, Trend\n *   <li>New York 1 x Cairo 1, D-score\n *   <li>New York 1 x Cairo 2, T-score\n *   <li>New York 1 x Cairo 2, Trend\n *   <li>New York 1 x Cairo 2, D-score\n *   <li>New York 2 x Cairo 1, T-score\n *   <li>New York 2 x Cairo 1, Trend\n *   <li>New York 2 x Cairo 1, D-score\n *   <li>New York 2 x Cairo 2, T-score\n *   <li>... (18 total)\n *   </ul>\n *\n *   <p>(Originally, this wasn't an Enumeration or Iterator because they\n *   only go forward, and users need to go both ways through a Sequence.\n *   The ListIterator interface, however, provides bidirectional support.\n *   Perhaps I should consider using that...)</p>\n *\n *   <h2>Left to do</h2>\n *   <ul>\n *     <li>don't use \"i\" as a private field (too common!)\n *     <li>getAllFixed(), getAllMoving() methods can cause trouble\n *         because they return internal lists\n *     <li>bug: filename=null causes trouble (sol'n: accept samples,\n *         use hashcode?)\n *     <li>bug: if filename appears twice of different case,\n *         on case-insensitive fs (??)\n *     <li>bug: need to set algs, then use seq; can't change anything\n *         once created!  BETTER: get rid of setAlgs(), add Seq(f,m,algs)\n *     <li>getFixed()/getMoving() methods are inefficient -- see comments\n *   </ul>\n *\n *   @see java.util.ListIterator\n *\n *   @author Ken Harris &lt;kbh7 <i style=\"color: gray\">at</i> cornell <i style=\"color: gray\">dot</i> edu&gt;\n *   @version $Id: Sequence.java,v 1.5 2004/01/18 17:55:39 aaron Exp $\n */\npublic class Sequence {\n\n    // lists of strings (filenames)\n    private List fixed = new ArrayList();\n\n    private List moving = new ArrayList();\n\n    /**\n     *       Returns a list of all fixed samples.\n     *\n     *       @return all fixed samples of this sequence\n     */\n    public List getAllFixed() {\n        // FIXME: exposes internal representation!\n        return fixed;\n    }\n\n    /**\n     *       Returns a list of all moving samples.\n     *\n     *       @return all moving samples of this sequence\n     */\n    public List getAllMoving() {\n        // FIXME: exposes internal representation!\n        return moving;\n    }\n\n    // list of pairings\n    private static class Pairing {\n\n        int f, m;\n\n        Pairing(int f, int m) {\n            this.f = f;\n            this.m = m;\n        }\n    }\n\n    private List pairings = new ArrayList();\n\n    // the current pairing (pointer into |pairings| list)\n    private int pairingNr = 0;\n\n    // the current cross (pointer into |algorithms| array)\n    private int crossNr = 0;\n\n    /**\n     *       Make a new sequence.\n     *\n     *       <p>Provide lists of fixed and moving samples, as Lists of\n     *       either filenames (java.lang.String) or elements\n     *       (corina.Element).</p>\n     *\n     *       <p>The default algorithms will be used, as specified by\n     *       Cross.DEFAULT_CROSSDATES.</p>\n     *\n     *       @param fixed the fixed samples\n     *       @param moving the moving samples\n     */\n    public Sequence(List fixed, List moving) {\n        /*\n         SOLUTION:\n         -- also accept Samples in the list\n         -- copy filenames as now\n         -- if a sample's filename is null, use \"\" (which isn't a valid filename)\n         -- waitaminute, who uses this, anyway?\n\n         WORKING HERE.\n\t*/\n        // set algorithms\n        setAlgorithms(Cross.DEFAULT_CROSSDATES);\n        // copy active elements to filenames\n        for (int i = 0; i < fixed.size(); i++) addElement(this.fixed, fixed.get(i));\n        for (int i = 0; i < moving.size(); i++) addElement(this.moving, moving.get(i));\n        // special case: some idiot is trying to crossdate exactly one file\n        // against itself.  ok, whatever...\n        if (this.fixed.size() == 1 && this.moving.size() == 1 && this.fixed.get(0).equals(this.moving.get(0))) {\n            pairings.add(new Pairing(0, 0));\n            return;\n        }\n        computePairings();\n    }\n\n    // add an element to a list, as a filename (string).\n    // the element may be an element, or a filename.\n    // (if the element is \"inactive\", we'll skip it, of course.)\n    private void addElement(List list, Object obj) {\n        if (obj instanceof String)\n            list.add(obj);\n        else if (((Element) obj).isActive())\n            list.add(((Element) obj).getFilename());\n    }\n\n    // |fixed| and |moving| contain lists of filenames;\n    // now i'll build the |pairings| list, by taking\n    // unique tuples consisting of one element from each list.\n    private void computePairings() {\n        // a hash of \"sample1:sample2\", only used to keep track of\n        // what crosses have been recorded so far.\n        Set used = new HashSet();\n        for (int i = 0; i < fixed.size(); i++) {\n            for (int j = 0; j < moving.size(); j++) {\n                // use filenames for hashing\n                String s1 = (String) fixed.get(i);\n                String s2 = (String) moving.get(j);\n                // crossing against myself?\n                if (s1.equals(s2))\n                    continue;\n                // already used?  fuggedaboutit!\n                if (used.contains(s1 + File.pathSeparator + s2) || used.contains(s2 + File.pathSeparator + s1))\n                    continue;\n                // ok, it's a good cross, add it\n                used.add(s1 + File.pathSeparator + s2);\n                pairings.add(new Pairing(i, j));\n            }\n        }\n        // the hash was just for weeding out duplicates, and isn't\n        // needed any more.\n    }\n\n    // these used to be the public interface to Sequence.  they're too\n    // low-level for that now, but they're still used by getCross(),\n    // and there's no reason to get rid of them.\n    // EXCEPT THEY'RE UNNECESSARY AND HORRIBLY INEFFICIENT.  SUCK!\n    // (5-50ms per load(), for small local files)\n    private Sample getFixed() throws IOException {\n        Pairing p = (Pairing) pairings.get(pairingNr);\n        String fn = (String) fixed.get(p.f);\n        // PERF: calls load()!\n        Sample s = new Sample(fn);\n        return s;\n    }\n\n    private Sample getMoving() throws IOException {\n        Pairing p = (Pairing) pairings.get(pairingNr);\n        String fn = (String) moving.get(p.m);\n        // PERF: calls load()!\n        Sample s = new Sample(fn);\n        return s;\n    }\n\n    /**\n     *       Return a new crossdate of the current pairing.\n     *\n     *       @exception IOException if one of the samples needed to make\n     *       this crossdate could not be loaded\n     *       @exception IllegalArgumentException if one of the algorithms\n     *       used by this Sequence isn't a valid crossdate (i.e.,\n     *       Cross.makeCross() throws an exception)\n     */\n    public Cross makeCross() throws IOException, IllegalArgumentException {\n        return Cross.makeCross(algorithms[crossNr], getFixed(), getMoving());\n        // (PERF: this is inefficient for the d-score, but not\n        // horrible.  the i/o problem is much worse than the extra\n        // computation time.)\n    }\n\n    private String[] algorithms;\n\n    /**\n     *       Sets the algorithms to use for this sequence.  The format is an\n     *       array of Strings containing (fully-qualified) names of classes\n     *       which subclass corina.cross.Cross.  The order used is the order\n     *       they'll be presented to the user.\n     *\n     *       @param algorithms the new algorithms to use\n     */\n    public void setAlgorithms(String[] algorithms) {\n        // make copy\n        int n = algorithms.length;\n        this.algorithms = new String[n];\n        for (int i = 0; i < n; i++) this.algorithms[i] = algorithms[i];\n    }\n\n    /**\n     *       Returns the names of the algorithms.  The format is an array of\n     *       Strings containing (fully-qualified) names of classes which\n     *       subclass corina.cross.Cross.  (The returned value is a copy of\n     *       the internal representation; modifying the returned array has\n     *       no effect on this Sequence object.)\n     *\n     *       @return an array containing the names of the algorithms\n     */\n    public String[] getAlgorithms() {\n        String[] copy = new String[algorithms.length];\n        for (int i = 0; i < algorithms.length; i++) copy[i] = algorithms[i];\n        return copy;\n    }\n\n    /**\n     *       Go to the next pairing.  If already at the end, does nothing.\n     */\n    public void nextPairing() {\n        if (crossNr < algorithms.length - 1) {\n            crossNr++;\n        } else if (pairingNr < pairings.size() - 1) {\n            pairingNr++;\n            crossNr = 0;\n        }\n    }\n\n    /**\n     *       Go to the previous pairing.  If already at the beginning, does\n     *       nothing.\n     */\n    public void prevPairing() {\n        if (crossNr > 0) {\n            crossNr--;\n        } else if (pairingNr > 0) {\n            pairingNr--;\n            crossNr = algorithms.length - 1;\n        }\n    }\n\n    /**\n     *       Is the current pairing the first pairing?\n     *\n     *       @return true, if this is the first pairing\n     */\n    public boolean isFirst() {\n        return (pairingNr == 0 && crossNr == 0);\n    }\n\n    /**\n     *       Is the current pairing the last pairing?\n     *\n     *       @return true, if this is the last pairing\n     */\n    public boolean isLast() {\n        return (pairingNr == pairings.size() - 1 && crossNr == algorithms.length - 1);\n    }\n}\n",
		"id": "/EvoSuiteBenchmark/35_corina/src/main/java/corina/cross/Sequence_0Test.java",
		"test_prompt": "// Sequence_0Test.java\n// This file is part of Corina.\n//\n// Corina is free software; you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation; either version 2 of the License, or\n// (at your option) any later version.\n//\n// Corina is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Corina; if not, write to the Free Software\n// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n//\n// Copyright 2001 Ken Harris <kbh7@cornell.edu>\n//\npackage corina.cross;\n\nimport corina.Sample;\nimport corina.Element;\nimport java.io.File;\nimport java.io.IOException;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Set;\nimport java.util.HashSet;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link Sequence}.\n* It contains ten unit test cases for the {@link Sequence#makeCross()} method.\n*/\nclass Sequence_0Test {"
	},
	{
		"original_code": "// Sequence.java\n//\n// This file is part of Corina.\n//\n// Corina is free software; you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation; either version 2 of the License, or\n// (at your option) any later version.\n//\n// Corina is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Corina; if not, write to the Free Software\n// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n//\n// Copyright 2001 Ken Harris <kbh7@cornell.edu>\n//\npackage corina.cross;\n\nimport corina.Sample;\nimport corina.Element;\nimport java.io.File;\nimport java.io.IOException;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Set;\nimport java.util.HashSet;\n\n/**\n *   A sequence of crossdates.\n *\n *   <p>Usually, users won't want to run just one crossdate between two\n *   samples, but will want to try a whole bunch of crossdates in\n *   succession.  That's a Sequence.</p>\n *\n *   <p>Conceptually, a Sequence consists of:</p>\n *   <ul>\n *     <li>a list of fixed samples\n *     <li>a list of moving samples\n *     <li>a list of crossdates (algorithms) to run between them\n *   </ul>\n *\n *   <p>The Sequence lets you step through <i>pairings</i>.  A pairing\n *   is just a crossdate out of the sequence.  A Sequence object makes a\n *   crossdate out of the current pairing by taking a sample from each\n *   list, and running an algorithm on it.</p>\n *\n *   <p>For example, if you make a sequence with fixed samples New York\n *   1, New York 2, and New York 3, moving samples Cairo 1 and Cairo 2,\n *   and the default algorithms of T-score, Trend, and D-score, the\n *   pairings (crossdates) you'll get will be:</p>\n *   <ul>\n *   <li>New York 1 x Cairo 1, T-score\n *   <li>New York 1 x Cairo 1, Trend\n *   <li>New York 1 x Cairo 1, D-score\n *   <li>New York 1 x Cairo 2, T-score\n *   <li>New York 1 x Cairo 2, Trend\n *   <li>New York 1 x Cairo 2, D-score\n *   <li>New York 2 x Cairo 1, T-score\n *   <li>New York 2 x Cairo 1, Trend\n *   <li>New York 2 x Cairo 1, D-score\n *   <li>New York 2 x Cairo 2, T-score\n *   <li>... (18 total)\n *   </ul>\n *\n *   <p>(Originally, this wasn't an Enumeration or Iterator because they\n *   only go forward, and users need to go both ways through a Sequence.\n *   The ListIterator interface, however, provides bidirectional support.\n *   Perhaps I should consider using that...)</p>\n *\n *   <h2>Left to do</h2>\n *   <ul>\n *     <li>don't use \"i\" as a private field (too common!)\n *     <li>getAllFixed(), getAllMoving() methods can cause trouble\n *         because they return internal lists\n *     <li>bug: filename=null causes trouble (sol'n: accept samples,\n *         use hashcode?)\n *     <li>bug: if filename appears twice of different case,\n *         on case-insensitive fs (??)\n *     <li>bug: need to set algs, then use seq; can't change anything\n *         once created!  BETTER: get rid of setAlgs(), add Seq(f,m,algs)\n *     <li>getFixed()/getMoving() methods are inefficient -- see comments\n *   </ul>\n *\n *   @see java.util.ListIterator\n *\n *   @author Ken Harris &lt;kbh7 <i style=\"color: gray\">at</i> cornell <i style=\"color: gray\">dot</i> edu&gt;\n *   @version $Id: Sequence.java,v 1.5 2004/01/18 17:55:39 aaron Exp $\n */\npublic class Sequence {\n\n    // lists of strings (filenames)\n    private List fixed = new ArrayList();\n\n    private List moving = new ArrayList();\n\n    /**\n     *       Returns a list of all fixed samples.\n     *\n     *       @return all fixed samples of this sequence\n     */\n    public List getAllFixed() {\n        // FIXME: exposes internal representation!\n        return fixed;\n    }\n\n    /**\n     *       Returns a list of all moving samples.\n     *\n     *       @return all moving samples of this sequence\n     */\n    public List getAllMoving() {\n        // FIXME: exposes internal representation!\n        return moving;\n    }\n\n    // list of pairings\n    private static class Pairing {\n\n        int f, m;\n\n        Pairing(int f, int m) {\n            this.f = f;\n            this.m = m;\n        }\n    }\n\n    private List pairings = new ArrayList();\n\n    // the current pairing (pointer into |pairings| list)\n    private int pairingNr = 0;\n\n    // the current cross (pointer into |algorithms| array)\n    private int crossNr = 0;\n\n    /**\n     *       Make a new sequence.\n     *\n     *       <p>Provide lists of fixed and moving samples, as Lists of\n     *       either filenames (java.lang.String) or elements\n     *       (corina.Element).</p>\n     *\n     *       <p>The default algorithms will be used, as specified by\n     *       Cross.DEFAULT_CROSSDATES.</p>\n     *\n     *       @param fixed the fixed samples\n     *       @param moving the moving samples\n     */\n    public Sequence(List fixed, List moving) {\n        /*\n         SOLUTION:\n         -- also accept Samples in the list\n         -- copy filenames as now\n         -- if a sample's filename is null, use \"\" (which isn't a valid filename)\n         -- waitaminute, who uses this, anyway?\n\n         WORKING HERE.\n\t*/\n        // set algorithms\n        setAlgorithms(Cross.DEFAULT_CROSSDATES);\n        // copy active elements to filenames\n        for (int i = 0; i < fixed.size(); i++) addElement(this.fixed, fixed.get(i));\n        for (int i = 0; i < moving.size(); i++) addElement(this.moving, moving.get(i));\n        // special case: some idiot is trying to crossdate exactly one file\n        // against itself.  ok, whatever...\n        if (this.fixed.size() == 1 && this.moving.size() == 1 && this.fixed.get(0).equals(this.moving.get(0))) {\n            pairings.add(new Pairing(0, 0));\n            return;\n        }\n        computePairings();\n    }\n\n    // add an element to a list, as a filename (string).\n    // the element may be an element, or a filename.\n    // (if the element is \"inactive\", we'll skip it, of course.)\n    private void addElement(List list, Object obj) {\n        if (obj instanceof String)\n            list.add(obj);\n        else if (((Element) obj).isActive())\n            list.add(((Element) obj).getFilename());\n    }\n\n    // |fixed| and |moving| contain lists of filenames;\n    // now i'll build the |pairings| list, by taking\n    // unique tuples consisting of one element from each list.\n    private void computePairings() {\n        // a hash of \"sample1:sample2\", only used to keep track of\n        // what crosses have been recorded so far.\n        Set used = new HashSet();\n        for (int i = 0; i < fixed.size(); i++) {\n            for (int j = 0; j < moving.size(); j++) {\n                // use filenames for hashing\n                String s1 = (String) fixed.get(i);\n                String s2 = (String) moving.get(j);\n                // crossing against myself?\n                if (s1.equals(s2))\n                    continue;\n                // already used?  fuggedaboutit!\n                if (used.contains(s1 + File.pathSeparator + s2) || used.contains(s2 + File.pathSeparator + s1))\n                    continue;\n                // ok, it's a good cross, add it\n                used.add(s1 + File.pathSeparator + s2);\n                pairings.add(new Pairing(i, j));\n            }\n        }\n        // the hash was just for weeding out duplicates, and isn't\n        // needed any more.\n    }\n\n    // these used to be the public interface to Sequence.  they're too\n    // low-level for that now, but they're still used by getCross(),\n    // and there's no reason to get rid of them.\n    // EXCEPT THEY'RE UNNECESSARY AND HORRIBLY INEFFICIENT.  SUCK!\n    // (5-50ms per load(), for small local files)\n    private Sample getFixed() throws IOException {\n        Pairing p = (Pairing) pairings.get(pairingNr);\n        String fn = (String) fixed.get(p.f);\n        // PERF: calls load()!\n        Sample s = new Sample(fn);\n        return s;\n    }\n\n    private Sample getMoving() throws IOException {\n        Pairing p = (Pairing) pairings.get(pairingNr);\n        String fn = (String) moving.get(p.m);\n        // PERF: calls load()!\n        Sample s = new Sample(fn);\n        return s;\n    }\n\n    /**\n     *       Return a new crossdate of the current pairing.\n     *\n     *       @exception IOException if one of the samples needed to make\n     *       this crossdate could not be loaded\n     *       @exception IllegalArgumentException if one of the algorithms\n     *       used by this Sequence isn't a valid crossdate (i.e.,\n     *       Cross.makeCross() throws an exception)\n     */\n    public Cross makeCross() throws IOException, IllegalArgumentException {\n        return Cross.makeCross(algorithms[crossNr], getFixed(), getMoving());\n        // (PERF: this is inefficient for the d-score, but not\n        // horrible.  the i/o problem is much worse than the extra\n        // computation time.)\n    }\n\n    private String[] algorithms;\n\n    /**\n     *       Sets the algorithms to use for this sequence.  The format is an\n     *       array of Strings containing (fully-qualified) names of classes\n     *       which subclass corina.cross.Cross.  The order used is the order\n     *       they'll be presented to the user.\n     *\n     *       @param algorithms the new algorithms to use\n     */\n    public void setAlgorithms(String[] algorithms) {\n        // make copy\n        int n = algorithms.length;\n        this.algorithms = new String[n];\n        for (int i = 0; i < n; i++) this.algorithms[i] = algorithms[i];\n    }\n\n    /**\n     *       Returns the names of the algorithms.  The format is an array of\n     *       Strings containing (fully-qualified) names of classes which\n     *       subclass corina.cross.Cross.  (The returned value is a copy of\n     *       the internal representation; modifying the returned array has\n     *       no effect on this Sequence object.)\n     *\n     *       @return an array containing the names of the algorithms\n     */\n    public String[] getAlgorithms() {\n        String[] copy = new String[algorithms.length];\n        for (int i = 0; i < algorithms.length; i++) copy[i] = algorithms[i];\n        return copy;\n    }\n\n    /**\n     *       Go to the next pairing.  If already at the end, does nothing.\n     */\n    public void nextPairing() {\n        if (crossNr < algorithms.length - 1) {\n            crossNr++;\n        } else if (pairingNr < pairings.size() - 1) {\n            pairingNr++;\n            crossNr = 0;\n        }\n    }\n\n    /**\n     *       Go to the previous pairing.  If already at the beginning, does\n     *       nothing.\n     */\n    public void prevPairing() {\n        if (crossNr > 0) {\n            crossNr--;\n        } else if (pairingNr > 0) {\n            pairingNr--;\n            crossNr = algorithms.length - 1;\n        }\n    }\n\n    /**\n     *       Is the current pairing the first pairing?\n     *\n     *       @return true, if this is the first pairing\n     */\n    public boolean isFirst() {\n        return (pairingNr == 0 && crossNr == 0);\n    }\n\n    /**\n     *       Is the current pairing the last pairing?\n     *\n     *       @return true, if this is the last pairing\n     */\n    public boolean isLast() {\n        return (pairingNr == pairings.size() - 1 && crossNr == algorithms.length - 1);\n    }\n}\n",
		"id": "/EvoSuiteBenchmark/35_corina/src/main/java/corina/cross/Sequence_1Test.java",
		"test_prompt": "// Sequence_1Test.java\n// This file is part of Corina.\n//\n// Corina is free software; you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation; either version 2 of the License, or\n// (at your option) any later version.\n//\n// Corina is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Corina; if not, write to the Free Software\n// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n//\n// Copyright 2001 Ken Harris <kbh7@cornell.edu>\n//\npackage corina.cross;\n\nimport corina.Sample;\nimport corina.Element;\nimport java.io.File;\nimport java.io.IOException;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Set;\nimport java.util.HashSet;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link Sequence}.\n* It contains ten unit test cases for the {@link Sequence#isFirst()} method.\n*/\nclass Sequence_1Test {"
	},
	{
		"original_code": "// Sequence.java\n//\n// This file is part of Corina.\n//\n// Corina is free software; you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation; either version 2 of the License, or\n// (at your option) any later version.\n//\n// Corina is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Corina; if not, write to the Free Software\n// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n//\n// Copyright 2001 Ken Harris <kbh7@cornell.edu>\n//\npackage corina.cross;\n\nimport corina.Sample;\nimport corina.Element;\nimport java.io.File;\nimport java.io.IOException;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Set;\nimport java.util.HashSet;\n\n/**\n *   A sequence of crossdates.\n *\n *   <p>Usually, users won't want to run just one crossdate between two\n *   samples, but will want to try a whole bunch of crossdates in\n *   succession.  That's a Sequence.</p>\n *\n *   <p>Conceptually, a Sequence consists of:</p>\n *   <ul>\n *     <li>a list of fixed samples\n *     <li>a list of moving samples\n *     <li>a list of crossdates (algorithms) to run between them\n *   </ul>\n *\n *   <p>The Sequence lets you step through <i>pairings</i>.  A pairing\n *   is just a crossdate out of the sequence.  A Sequence object makes a\n *   crossdate out of the current pairing by taking a sample from each\n *   list, and running an algorithm on it.</p>\n *\n *   <p>For example, if you make a sequence with fixed samples New York\n *   1, New York 2, and New York 3, moving samples Cairo 1 and Cairo 2,\n *   and the default algorithms of T-score, Trend, and D-score, the\n *   pairings (crossdates) you'll get will be:</p>\n *   <ul>\n *   <li>New York 1 x Cairo 1, T-score\n *   <li>New York 1 x Cairo 1, Trend\n *   <li>New York 1 x Cairo 1, D-score\n *   <li>New York 1 x Cairo 2, T-score\n *   <li>New York 1 x Cairo 2, Trend\n *   <li>New York 1 x Cairo 2, D-score\n *   <li>New York 2 x Cairo 1, T-score\n *   <li>New York 2 x Cairo 1, Trend\n *   <li>New York 2 x Cairo 1, D-score\n *   <li>New York 2 x Cairo 2, T-score\n *   <li>... (18 total)\n *   </ul>\n *\n *   <p>(Originally, this wasn't an Enumeration or Iterator because they\n *   only go forward, and users need to go both ways through a Sequence.\n *   The ListIterator interface, however, provides bidirectional support.\n *   Perhaps I should consider using that...)</p>\n *\n *   <h2>Left to do</h2>\n *   <ul>\n *     <li>don't use \"i\" as a private field (too common!)\n *     <li>getAllFixed(), getAllMoving() methods can cause trouble\n *         because they return internal lists\n *     <li>bug: filename=null causes trouble (sol'n: accept samples,\n *         use hashcode?)\n *     <li>bug: if filename appears twice of different case,\n *         on case-insensitive fs (??)\n *     <li>bug: need to set algs, then use seq; can't change anything\n *         once created!  BETTER: get rid of setAlgs(), add Seq(f,m,algs)\n *     <li>getFixed()/getMoving() methods are inefficient -- see comments\n *   </ul>\n *\n *   @see java.util.ListIterator\n *\n *   @author Ken Harris &lt;kbh7 <i style=\"color: gray\">at</i> cornell <i style=\"color: gray\">dot</i> edu&gt;\n *   @version $Id: Sequence.java,v 1.5 2004/01/18 17:55:39 aaron Exp $\n */\npublic class Sequence {\n\n    // lists of strings (filenames)\n    private List fixed = new ArrayList();\n\n    private List moving = new ArrayList();\n\n    /**\n     *       Returns a list of all fixed samples.\n     *\n     *       @return all fixed samples of this sequence\n     */\n    public List getAllFixed() {\n        // FIXME: exposes internal representation!\n        return fixed;\n    }\n\n    /**\n     *       Returns a list of all moving samples.\n     *\n     *       @return all moving samples of this sequence\n     */\n    public List getAllMoving() {\n        // FIXME: exposes internal representation!\n        return moving;\n    }\n\n    // list of pairings\n    private static class Pairing {\n\n        int f, m;\n\n        Pairing(int f, int m) {\n            this.f = f;\n            this.m = m;\n        }\n    }\n\n    private List pairings = new ArrayList();\n\n    // the current pairing (pointer into |pairings| list)\n    private int pairingNr = 0;\n\n    // the current cross (pointer into |algorithms| array)\n    private int crossNr = 0;\n\n    /**\n     *       Make a new sequence.\n     *\n     *       <p>Provide lists of fixed and moving samples, as Lists of\n     *       either filenames (java.lang.String) or elements\n     *       (corina.Element).</p>\n     *\n     *       <p>The default algorithms will be used, as specified by\n     *       Cross.DEFAULT_CROSSDATES.</p>\n     *\n     *       @param fixed the fixed samples\n     *       @param moving the moving samples\n     */\n    public Sequence(List fixed, List moving) {\n        /*\n         SOLUTION:\n         -- also accept Samples in the list\n         -- copy filenames as now\n         -- if a sample's filename is null, use \"\" (which isn't a valid filename)\n         -- waitaminute, who uses this, anyway?\n\n         WORKING HERE.\n\t*/\n        // set algorithms\n        setAlgorithms(Cross.DEFAULT_CROSSDATES);\n        // copy active elements to filenames\n        for (int i = 0; i < fixed.size(); i++) addElement(this.fixed, fixed.get(i));\n        for (int i = 0; i < moving.size(); i++) addElement(this.moving, moving.get(i));\n        // special case: some idiot is trying to crossdate exactly one file\n        // against itself.  ok, whatever...\n        if (this.fixed.size() == 1 && this.moving.size() == 1 && this.fixed.get(0).equals(this.moving.get(0))) {\n            pairings.add(new Pairing(0, 0));\n            return;\n        }\n        computePairings();\n    }\n\n    // add an element to a list, as a filename (string).\n    // the element may be an element, or a filename.\n    // (if the element is \"inactive\", we'll skip it, of course.)\n    private void addElement(List list, Object obj) {\n        if (obj instanceof String)\n            list.add(obj);\n        else if (((Element) obj).isActive())\n            list.add(((Element) obj).getFilename());\n    }\n\n    // |fixed| and |moving| contain lists of filenames;\n    // now i'll build the |pairings| list, by taking\n    // unique tuples consisting of one element from each list.\n    private void computePairings() {\n        // a hash of \"sample1:sample2\", only used to keep track of\n        // what crosses have been recorded so far.\n        Set used = new HashSet();\n        for (int i = 0; i < fixed.size(); i++) {\n            for (int j = 0; j < moving.size(); j++) {\n                // use filenames for hashing\n                String s1 = (String) fixed.get(i);\n                String s2 = (String) moving.get(j);\n                // crossing against myself?\n                if (s1.equals(s2))\n                    continue;\n                // already used?  fuggedaboutit!\n                if (used.contains(s1 + File.pathSeparator + s2) || used.contains(s2 + File.pathSeparator + s1))\n                    continue;\n                // ok, it's a good cross, add it\n                used.add(s1 + File.pathSeparator + s2);\n                pairings.add(new Pairing(i, j));\n            }\n        }\n        // the hash was just for weeding out duplicates, and isn't\n        // needed any more.\n    }\n\n    // these used to be the public interface to Sequence.  they're too\n    // low-level for that now, but they're still used by getCross(),\n    // and there's no reason to get rid of them.\n    // EXCEPT THEY'RE UNNECESSARY AND HORRIBLY INEFFICIENT.  SUCK!\n    // (5-50ms per load(), for small local files)\n    private Sample getFixed() throws IOException {\n        Pairing p = (Pairing) pairings.get(pairingNr);\n        String fn = (String) fixed.get(p.f);\n        // PERF: calls load()!\n        Sample s = new Sample(fn);\n        return s;\n    }\n\n    private Sample getMoving() throws IOException {\n        Pairing p = (Pairing) pairings.get(pairingNr);\n        String fn = (String) moving.get(p.m);\n        // PERF: calls load()!\n        Sample s = new Sample(fn);\n        return s;\n    }\n\n    /**\n     *       Return a new crossdate of the current pairing.\n     *\n     *       @exception IOException if one of the samples needed to make\n     *       this crossdate could not be loaded\n     *       @exception IllegalArgumentException if one of the algorithms\n     *       used by this Sequence isn't a valid crossdate (i.e.,\n     *       Cross.makeCross() throws an exception)\n     */\n    public Cross makeCross() throws IOException, IllegalArgumentException {\n        return Cross.makeCross(algorithms[crossNr], getFixed(), getMoving());\n        // (PERF: this is inefficient for the d-score, but not\n        // horrible.  the i/o problem is much worse than the extra\n        // computation time.)\n    }\n\n    private String[] algorithms;\n\n    /**\n     *       Sets the algorithms to use for this sequence.  The format is an\n     *       array of Strings containing (fully-qualified) names of classes\n     *       which subclass corina.cross.Cross.  The order used is the order\n     *       they'll be presented to the user.\n     *\n     *       @param algorithms the new algorithms to use\n     */\n    public void setAlgorithms(String[] algorithms) {\n        // make copy\n        int n = algorithms.length;\n        this.algorithms = new String[n];\n        for (int i = 0; i < n; i++) this.algorithms[i] = algorithms[i];\n    }\n\n    /**\n     *       Returns the names of the algorithms.  The format is an array of\n     *       Strings containing (fully-qualified) names of classes which\n     *       subclass corina.cross.Cross.  (The returned value is a copy of\n     *       the internal representation; modifying the returned array has\n     *       no effect on this Sequence object.)\n     *\n     *       @return an array containing the names of the algorithms\n     */\n    public String[] getAlgorithms() {\n        String[] copy = new String[algorithms.length];\n        for (int i = 0; i < algorithms.length; i++) copy[i] = algorithms[i];\n        return copy;\n    }\n\n    /**\n     *       Go to the next pairing.  If already at the end, does nothing.\n     */\n    public void nextPairing() {\n        if (crossNr < algorithms.length - 1) {\n            crossNr++;\n        } else if (pairingNr < pairings.size() - 1) {\n            pairingNr++;\n            crossNr = 0;\n        }\n    }\n\n    /**\n     *       Go to the previous pairing.  If already at the beginning, does\n     *       nothing.\n     */\n    public void prevPairing() {\n        if (crossNr > 0) {\n            crossNr--;\n        } else if (pairingNr > 0) {\n            pairingNr--;\n            crossNr = algorithms.length - 1;\n        }\n    }\n\n    /**\n     *       Is the current pairing the first pairing?\n     *\n     *       @return true, if this is the first pairing\n     */\n    public boolean isFirst() {\n        return (pairingNr == 0 && crossNr == 0);\n    }\n\n    /**\n     *       Is the current pairing the last pairing?\n     *\n     *       @return true, if this is the last pairing\n     */\n    public boolean isLast() {\n        return (pairingNr == pairings.size() - 1 && crossNr == algorithms.length - 1);\n    }\n}\n",
		"id": "/EvoSuiteBenchmark/35_corina/src/main/java/corina/cross/Sequence_2Test.java",
		"test_prompt": "// Sequence_2Test.java\n// This file is part of Corina.\n//\n// Corina is free software; you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation; either version 2 of the License, or\n// (at your option) any later version.\n//\n// Corina is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Corina; if not, write to the Free Software\n// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n//\n// Copyright 2001 Ken Harris <kbh7@cornell.edu>\n//\npackage corina.cross;\n\nimport corina.Sample;\nimport corina.Element;\nimport java.io.File;\nimport java.io.IOException;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Set;\nimport java.util.HashSet;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link Sequence}.\n* It contains ten unit test cases for the {@link Sequence#isLast()} method.\n*/\nclass Sequence_2Test {"
	},
	{
		"original_code": "// RValue.java\n//\n// This file is part of Corina.\n//\n// Corina is free software; you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation; either version 2 of the License, or\n// (at your option) any later version.\n//\n// Corina is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Corina; if not, write to the Free Software\n// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n//\n// Copyright 2001 Ken Harris <kbh7@cornell.edu>\n//\npackage corina.cross;\n\nimport java.util.Arrays;\nimport java.util.List;\nimport corina.Sample;\nimport corina.core.App;\nimport corina.index.HighPass;\nimport corina.ui.I18n;\n\n/**\n * An R-value.\n *\n * <p>Originally, the r-value was never explicitly reported: it was\n * merely an intermediate value used in computing the T-score.\n * Eventually, though, the statisticians insisted on seeing the\n * r-values for themselves, so it was extracted.  (The T-score is now\n * phrased in terms of this r-value.)</p>\n *\n * @author Ken Harris &lt;kbh7 <i style=\"color: gray\">at</i> cornell <i style=\"color: gray\">dot</i> edu&gt;\n * @version $Id: RValue.java,v 1.4 2006/02/24 20:51:34 lucasmo Exp $\n */\npublic class RValue extends Cross {\n\n    /**\n     *  Size of window to use for the smoothing curve done by the\n     * \t normalization.\n     * \t @see #normalize\n     */\n    private final static int WINDOW = 5;\n\n    /**\n     * A mutable copy of the fixed data, in array form.\n     */\n    private float[] fixedData;\n\n    /**\n     * A mutable copy of the moving data, in array form.\n     */\n    private float[] movingData;\n\n    /**\n     * The mean of the fixed data.\n     */\n    private float fixedMean = 0;\n\n    /**\n     * The mean of the moving data.\n     */\n    private float movingMean = 0;\n\n    // don't use me\n    protected RValue() {\n    }\n\n    /**\n     *  Construct a new R-value from two samples.\n     * \t @param s1 the fixed sample\n     * \t @param s2 the moving sample\n     */\n    public RValue(Sample s1, Sample s2) {\n        super(s1, s2);\n    }\n\n    /**\n     *  Return a prettier name for this cross: \"R-Value\".\n     * \t @return the name of this cross, \"R-Value\"\n     */\n    public String getName() {\n        return I18n.getText(\"rvalue\");\n    }\n\n    /**\n     *  A format string for R-values.\n     * \t @return a format string for R-values\n     */\n    public String getFormat() {\n        return App.prefs.getPref(\"corina.cross.rvalue.format\", \"0.00\");\n    }\n\n    public boolean isSignificant(float score, int overlap) {\n        if (// it happens...\n        overlap == 0)\n            return false;\n        // WRITEME: what's a sig r-value?\n        return (score > 0.25f);\n    }\n\n    // FIXME: shouldn't need both of these!\n    public float getMinimumSignificant() {\n        // FIXME: what's a sig r-value?\n        return 0.25f;\n    }\n\n    /**\n     *  Normalize the data.  This creates a new array of floats from\n     * \t the List of Numbers.  The data is smoothed using a 5-point\n     * \t window, and then the natural logarithm is taken.\n     * \t @param data a List of Numbers holding the data to normalize\n     * \t @return an array of floats containing the normalized data\n     */\n    private float[] normalize(List data) {\n        // size of the data: used many times below\n        int N = data.size();\n        float[] smoothed = new float[N];\n        // make sure everything is positive (for GAZ37ABC.TRU)\n        // (singleton)\n        Integer one = new Integer(1);\n        for (int i = 0; i < N; i++) if (((Number) data.get(i)).intValue() < 0)\n            data.set(i, one);\n        // make array weights={1,1,1,...}\n        int[] weights = new int[WINDOW];\n        Arrays.fill(weights, 1);\n        // FIXME: if WINDOW is fixed, this should be static\n        // temporary test of alternate weighting system\n        /*\n\t\tweights[0] = 1;\n\t\tweights[1] = 2;\n\t\tweights[2] = 4;\n\t\tweights[3] = 2;\n\t\tweights[4] = 1;\n\t\t*/\n        // borrow a high-pass filter\n        List tmp = HighPass.filter(data, weights);\n        // high-pass should return an array!  (and maybe take an array, too!)\n        // natural logarithm -- log(0) is bad news, so log(max(s[i],eps))\n        for (int i = 0; i < N; i++) {\n            float value = ((Number) data.get(i)).floatValue();\n            float filter = ((Number) tmp.get(i)).floatValue();\n            float ratio = value / filter;\n            smoothed[i] = (float) Math.log(Math.max(100 * ratio, EPS));\n        }\n        return smoothed;\n    }\n\n    // a really small value\n    private final static float EPS = Float.MIN_VALUE;\n\n    /**\n     *  Compute the mean of an array of floats.\n     * \t @param array the array of floats to average\n     * \t @return the average (arithmetic mean) of the given array\n     */\n    private float mean(float[] array) {\n        // (/ (reduce '+ array) (length array))\n        float s = 0.0f;\n        for (int i = 0; i < array.length; i++) s += array[i];\n        return s / array.length;\n        // what if array.length==0? -- only happens if one sample has no data (possible?)\n    }\n\n    /**\n     *  Given offsets into the fixed and moving data, compute a single\n     * \t R-value for that position.\n     * \t @return the R-value for this possible cross\n     */\n    public float compute(int offsetFixed, int offsetMoving) {\n        int i = offsetFixed, j = offsetMoving;\n        int overlap = 0;\n        float z1 = 0.0f;\n        float z2 = 0.0f;\n        float z3 = 0.0f;\n        float xx, yy;\n        while (i < fixedData.length && j < movingData.length) {\n            xx = fixedData[i] - fixedMean;\n            yy = movingData[j] - movingMean;\n            // NOTE: looking at this today (22.8.2002), i'm not sure\n            // this shouldn't be the mean of the overlapping sections\n            // only (instead of the mean of the entire samples), but\n            // this appears to be what baillie did, i'm pretty sure\n            // it's what mecki did, and it gives reasonable results\n            // (changing which mean it uses probably wouldn't have\n            // much effect), so i'm going to leave it for now.\n            z1 += xx * xx;\n            z2 += yy * yy;\n            z3 += xx * yy;\n            overlap++;\n            i++;\n            j++;\n        }\n        // in B&P's t-score algorithm, they aborted here with t=0 if z3<0.\n        // i'm just an r-value now, so returning negative numbers is fine.\n        // if z3<0, then r<0, so the t-score can abort with t=0 if r<0.\n        // it's ever-so-slightly less efficient, but equally correct.\n        // DOCUMENTME: why i'm computing r so strangely (it's the accuracy)\n        float sigx = (float) Math.sqrt(z1 / overlap);\n        float sigy = (float) Math.sqrt(z2 / overlap);\n        float r = z3 / (overlap * sigx * sigy);\n        // if overlap=1 or some other silliness, make it zero -- BUT WHY?\n        if (Float.isNaN(r))\n            r = 0;\n        return r;\n    }\n\n    /**\n     *  Preamble: copy all data to (mutable) float arrays, normalize\n     * \t the data, and compute means of the series.\n     */\n    // FIXME: preamble() in Cross is dumb; make it just a lazy-evaluation in RValue's compute()\n    protected void preamble() {\n        // normalize (while copying to mutable arrays)\n        fixedData = normalize(getFixed().data);\n        movingData = normalize(getMoving().data);\n        // compute means (used later by compute())\n        fixedMean = mean(fixedData);\n        movingMean = mean(movingData);\n    }\n}\n",
		"id": "/EvoSuiteBenchmark/35_corina/src/main/java/corina/cross/RValue_0Test.java",
		"test_prompt": "// RValue_0Test.java\n// This file is part of Corina.\n//\n// Corina is free software; you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation; either version 2 of the License, or\n// (at your option) any later version.\n//\n// Corina is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Corina; if not, write to the Free Software\n// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n//\n// Copyright 2001 Ken Harris <kbh7@cornell.edu>\n//\npackage corina.cross;\n\nimport java.util.Arrays;\nimport java.util.List;\nimport corina.Sample;\nimport corina.core.App;\nimport corina.index.HighPass;\nimport corina.ui.I18n;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link RValue}.\n* It contains ten unit test cases for the {@link RValue#isSignificant(float, int)} method.\n*/\nclass RValue_0Test {"
	},
	{
		"original_code": "// RValue.java\n//\n// This file is part of Corina.\n//\n// Corina is free software; you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation; either version 2 of the License, or\n// (at your option) any later version.\n//\n// Corina is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Corina; if not, write to the Free Software\n// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n//\n// Copyright 2001 Ken Harris <kbh7@cornell.edu>\n//\npackage corina.cross;\n\nimport java.util.Arrays;\nimport java.util.List;\nimport corina.Sample;\nimport corina.core.App;\nimport corina.index.HighPass;\nimport corina.ui.I18n;\n\n/**\n * An R-value.\n *\n * <p>Originally, the r-value was never explicitly reported: it was\n * merely an intermediate value used in computing the T-score.\n * Eventually, though, the statisticians insisted on seeing the\n * r-values for themselves, so it was extracted.  (The T-score is now\n * phrased in terms of this r-value.)</p>\n *\n * @author Ken Harris &lt;kbh7 <i style=\"color: gray\">at</i> cornell <i style=\"color: gray\">dot</i> edu&gt;\n * @version $Id: RValue.java,v 1.4 2006/02/24 20:51:34 lucasmo Exp $\n */\npublic class RValue extends Cross {\n\n    /**\n     *  Size of window to use for the smoothing curve done by the\n     * \t normalization.\n     * \t @see #normalize\n     */\n    private final static int WINDOW = 5;\n\n    /**\n     * A mutable copy of the fixed data, in array form.\n     */\n    private float[] fixedData;\n\n    /**\n     * A mutable copy of the moving data, in array form.\n     */\n    private float[] movingData;\n\n    /**\n     * The mean of the fixed data.\n     */\n    private float fixedMean = 0;\n\n    /**\n     * The mean of the moving data.\n     */\n    private float movingMean = 0;\n\n    // don't use me\n    protected RValue() {\n    }\n\n    /**\n     *  Construct a new R-value from two samples.\n     * \t @param s1 the fixed sample\n     * \t @param s2 the moving sample\n     */\n    public RValue(Sample s1, Sample s2) {\n        super(s1, s2);\n    }\n\n    /**\n     *  Return a prettier name for this cross: \"R-Value\".\n     * \t @return the name of this cross, \"R-Value\"\n     */\n    public String getName() {\n        return I18n.getText(\"rvalue\");\n    }\n\n    /**\n     *  A format string for R-values.\n     * \t @return a format string for R-values\n     */\n    public String getFormat() {\n        return App.prefs.getPref(\"corina.cross.rvalue.format\", \"0.00\");\n    }\n\n    public boolean isSignificant(float score, int overlap) {\n        if (// it happens...\n        overlap == 0)\n            return false;\n        // WRITEME: what's a sig r-value?\n        return (score > 0.25f);\n    }\n\n    // FIXME: shouldn't need both of these!\n    public float getMinimumSignificant() {\n        // FIXME: what's a sig r-value?\n        return 0.25f;\n    }\n\n    /**\n     *  Normalize the data.  This creates a new array of floats from\n     * \t the List of Numbers.  The data is smoothed using a 5-point\n     * \t window, and then the natural logarithm is taken.\n     * \t @param data a List of Numbers holding the data to normalize\n     * \t @return an array of floats containing the normalized data\n     */\n    private float[] normalize(List data) {\n        // size of the data: used many times below\n        int N = data.size();\n        float[] smoothed = new float[N];\n        // make sure everything is positive (for GAZ37ABC.TRU)\n        // (singleton)\n        Integer one = new Integer(1);\n        for (int i = 0; i < N; i++) if (((Number) data.get(i)).intValue() < 0)\n            data.set(i, one);\n        // make array weights={1,1,1,...}\n        int[] weights = new int[WINDOW];\n        Arrays.fill(weights, 1);\n        // FIXME: if WINDOW is fixed, this should be static\n        // temporary test of alternate weighting system\n        /*\n\t\tweights[0] = 1;\n\t\tweights[1] = 2;\n\t\tweights[2] = 4;\n\t\tweights[3] = 2;\n\t\tweights[4] = 1;\n\t\t*/\n        // borrow a high-pass filter\n        List tmp = HighPass.filter(data, weights);\n        // high-pass should return an array!  (and maybe take an array, too!)\n        // natural logarithm -- log(0) is bad news, so log(max(s[i],eps))\n        for (int i = 0; i < N; i++) {\n            float value = ((Number) data.get(i)).floatValue();\n            float filter = ((Number) tmp.get(i)).floatValue();\n            float ratio = value / filter;\n            smoothed[i] = (float) Math.log(Math.max(100 * ratio, EPS));\n        }\n        return smoothed;\n    }\n\n    // a really small value\n    private final static float EPS = Float.MIN_VALUE;\n\n    /**\n     *  Compute the mean of an array of floats.\n     * \t @param array the array of floats to average\n     * \t @return the average (arithmetic mean) of the given array\n     */\n    private float mean(float[] array) {\n        // (/ (reduce '+ array) (length array))\n        float s = 0.0f;\n        for (int i = 0; i < array.length; i++) s += array[i];\n        return s / array.length;\n        // what if array.length==0? -- only happens if one sample has no data (possible?)\n    }\n\n    /**\n     *  Given offsets into the fixed and moving data, compute a single\n     * \t R-value for that position.\n     * \t @return the R-value for this possible cross\n     */\n    public float compute(int offsetFixed, int offsetMoving) {\n        int i = offsetFixed, j = offsetMoving;\n        int overlap = 0;\n        float z1 = 0.0f;\n        float z2 = 0.0f;\n        float z3 = 0.0f;\n        float xx, yy;\n        while (i < fixedData.length && j < movingData.length) {\n            xx = fixedData[i] - fixedMean;\n            yy = movingData[j] - movingMean;\n            // NOTE: looking at this today (22.8.2002), i'm not sure\n            // this shouldn't be the mean of the overlapping sections\n            // only (instead of the mean of the entire samples), but\n            // this appears to be what baillie did, i'm pretty sure\n            // it's what mecki did, and it gives reasonable results\n            // (changing which mean it uses probably wouldn't have\n            // much effect), so i'm going to leave it for now.\n            z1 += xx * xx;\n            z2 += yy * yy;\n            z3 += xx * yy;\n            overlap++;\n            i++;\n            j++;\n        }\n        // in B&P's t-score algorithm, they aborted here with t=0 if z3<0.\n        // i'm just an r-value now, so returning negative numbers is fine.\n        // if z3<0, then r<0, so the t-score can abort with t=0 if r<0.\n        // it's ever-so-slightly less efficient, but equally correct.\n        // DOCUMENTME: why i'm computing r so strangely (it's the accuracy)\n        float sigx = (float) Math.sqrt(z1 / overlap);\n        float sigy = (float) Math.sqrt(z2 / overlap);\n        float r = z3 / (overlap * sigx * sigy);\n        // if overlap=1 or some other silliness, make it zero -- BUT WHY?\n        if (Float.isNaN(r))\n            r = 0;\n        return r;\n    }\n\n    /**\n     *  Preamble: copy all data to (mutable) float arrays, normalize\n     * \t the data, and compute means of the series.\n     */\n    // FIXME: preamble() in Cross is dumb; make it just a lazy-evaluation in RValue's compute()\n    protected void preamble() {\n        // normalize (while copying to mutable arrays)\n        fixedData = normalize(getFixed().data);\n        movingData = normalize(getMoving().data);\n        // compute means (used later by compute())\n        fixedMean = mean(fixedData);\n        movingMean = mean(movingData);\n    }\n}\n",
		"id": "/EvoSuiteBenchmark/35_corina/src/main/java/corina/cross/RValue_1Test.java",
		"test_prompt": "// RValue_1Test.java\n// This file is part of Corina.\n//\n// Corina is free software; you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation; either version 2 of the License, or\n// (at your option) any later version.\n//\n// Corina is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Corina; if not, write to the Free Software\n// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n//\n// Copyright 2001 Ken Harris <kbh7@cornell.edu>\n//\npackage corina.cross;\n\nimport java.util.Arrays;\nimport java.util.List;\nimport corina.Sample;\nimport corina.core.App;\nimport corina.index.HighPass;\nimport corina.ui.I18n;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link RValue}.\n* It contains ten unit test cases for the {@link RValue#compute(int, int)} method.\n*/\nclass RValue_1Test {"
	},
	{
		"original_code": "// TableView.java\npackage corina.cross;\n\nimport corina.Sample;\nimport corina.Element;\n// IDEA: what if i got rid of Element?  it's either a sample, or a\n// filename.  no, that's bad, i wouldn't be able to load massive\n// amounts of metadata, as browser requires...\nimport corina.graph.GraphWindow;\nimport corina.editor.Editor;\nimport corina.ui.Builder;\nimport corina.ui.I18n;\nimport corina.gui.Layout;\nimport corina.index.DecimalRenderer;\nimport corina.util.PopupListener;\nimport java.io.IOException;\nimport java.util.List;\nimport java.util.ArrayList;\nimport javax.swing.*;\nimport javax.swing.table.TableColumnModel;\nimport java.awt.BorderLayout;\nimport java.awt.event.ActionEvent;\nimport java.awt.print.Printable;\n\n/*\n  a view of a crossdating table.\n\n  made from a sequence.  the fixed samples go in a popup menu at the\n  top.  the moving samples go down the rows of the table.\n\n  TODO: everything...\n  -- put \"moving\" label above the table?\n  -- extract saveColumnWidths()/restoreColumnWidths()\n  -- javadoc\n  -- allow only single-row-selection?  i think multiple-row serves no\n     purpose here, except to be misleading.  (it *could* be, though,\n     if \"graph\" supported multiples -- nah.)\n  -- fixed-popup shouldn't show a scrollbar, unless it really needs it.\n     the default of \"more than 8 rows\" is not \"really needs it\": it's an\n     annoyance to the user.\n  -- right-click, \"jump to this crossdate\": implement\n  -- size columns appropriately: first column should be ~50%\n  -- don't allow reordering columns\n  -- hook up double-click to something ... graph?\n     hmm, i think i like \"show this crossdate\" better.\n  -- get \"which scores to display\" from crossdate\n  -- graph button\n  -- map button\n  -- mark significant scores with hiliting, like grid does, but for\n     individual scores.\n  -- c'tor shouldn't throw anything\n  -- need to expose exporting through public methods\n  -- need to expose copy-to-clipboard through public methods\n  -- dim map button if no maps available\n  -- (better/any) error handling!\n  -- allow drops onto the \"fixed\" popup to add samples\n  -- allow drops onto the \"moving\" table to add samples\n  -- manual: crossdating tables, what they are / how to make\n  -- manual: crossdating tables, exporting (text, html?), esp.\n     how to put a table in a word doc (copy [as text], paste, table ->\n     convert -> convert text to table...; confirm \"number of columns\"\n     and \"number of rows\" are correct, and \"separate text at (*) tabs\"\n     is selected.)\n  -- manual: crossdating tables, printing\n  -- manual: crossdating tables, saving?\n  -- corina.print: \"no-page-break\" blocks\n\n  -- export as text; html?; via clipboard?  be sure to copy header line, too.\n*/\n/**\n *   A panel which displays a crossdating table.\n *\n *   <p>Since it is a view of a Sequence, it starts out by showing the\n *   table made by crossdating the first fixed sample against each of\n *   the moving samples.  The fixed sample is displayed in a popup menu,\n *   so the user can pick any of the fixed samples to use.</p>\n *\n *   @author Ken Harris &lt;kbh7 <i style=\"color: gray\">at</i> cornell <i style=\"color: gray\">dot</i> edu&gt;\n *   @version $Id: TableView.java,v 1.2 2006/01/04 07:29:22 lucasmo Exp $\n */\npublic class TableView extends JPanel {\n\n    private List moving;\n\n    // this could get confusing making tables out of tables, so\n    // in this file, let's call JTables \"jtable\", and Tables \"table\".\n    private JTable jtable;\n\n    // EXTRACT ME!\n    private int[] saveColumnWidths() {\n        TableColumnModel columns = jtable.getColumnModel();\n        int n = columns.getColumnCount();\n        int[] columnWidths = new int[n];\n        for (int i = 0; i < n; i++) columnWidths[i] = columns.getColumn(i).getWidth();\n        return columnWidths;\n    }\n\n    private void restoreColumnWidths(int[] columnWidths) {\n        TableColumnModel columns = jtable.getColumnModel();\n        int n = columnWidths.length;\n        for (int i = 0; i < n; i++) columns.getColumn(i).setPreferredWidth(columnWidths[i]);\n    }\n\n    /**\n     * \t Make a printable object for this crossdating table.\n     *\n     * \t @return a Printable for this Table\n     */\n    public Printable print() {\n        return table.print();\n    }\n\n    private Table table;\n\n    private JComboBox fixedPopup;\n\n    private List fixedAsList;\n\n    /**\n     * \t Make a new table view for a sequence.\n     *\n     * \t @param sequence a sequence containing the fixed and moving\n     * \t samples to display in a table\n     * \t @exception IOException I have no excuse: fix me\n     */\n    public TableView(Sequence sequence) throws IOException {\n        // put all \"fixed\" samples in a popup -- EXTRACT METHOD!\n        fixedAsList = new ArrayList(sequence.getAllFixed());\n        String[] names = new String[fixedAsList.size()];\n        for (int i = 0; i < names.length; i++) names[i] = new Sample((String) fixedAsList.get(i)).toString();\n        fixedPopup = new JComboBox(names);\n        fixedPopup.addActionListener(new AbstractAction() {\n\n            public void actionPerformed(ActionEvent e) {\n                // -- figure out what sample to use\n                int selection = fixedPopup.getSelectedIndex();\n                String fixed = (String) fixedAsList.get(selection);\n                try {\n                    // -- make new Table object\n                    table = new Table(fixed, moving);\n                    // -- call table.setModel(t)\n                    int[] widths = saveColumnWidths();\n                    jtable.setModel(table);\n                    initRenderers();\n                    restoreColumnWidths(widths);\n                } catch (IOException ioe) {\n                    System.out.println(\"ioe!\");\n                }\n            }\n        });\n        JPanel top = Layout.flowLayoutL(new JLabel(\"Fixed:\"), fixedPopup);\n        top.setBorder(BorderFactory.createEmptyBorder(0, 0, 10, 0));\n        setLayout(new BorderLayout());\n        add(top, BorderLayout.NORTH);\n        // first fixed one\n        String fixed = (String) sequence.getAllFixed().get(0);\n        moving = sequence.getAllMoving();\n        // make a table.\n        table = new Table(fixed, moving);\n        jtable = new JTable(table) {\n\n            public void addNotify() {\n                super.addNotify();\n                // 0!\n                System.out.println(\"width=\" + getWidth());\n                getColumnModel().getColumn(0).setPreferredWidth(getWidth() / 2);\n            }\n        };\n        // doesn't work: wait for addNotify()? jtable.getColumnModel().getColumn(0).setPreferredWidth(jtable.getWidth() / 2);\n        // align by decimal points\n        initRenderers();\n        JScrollPane scroll = new JScrollPane(jtable);\n        add(scroll, BorderLayout.CENTER);\n        // popup menu\n        jtable.addMouseListener(new PopupListener(new TableViewPopup()));\n        // TODO: buttons (graph, map)\n        JButton graph = Builder.makeButton(\"plot\");\n        graph.setEnabled(false);\n        JButton map = Builder.makeButton(\"map\");\n        map.setEnabled(false);\n        JPanel buttons = Layout.buttonLayout(graph, map, null);\n        buttons.setBorder(BorderFactory.createEmptyBorder(10, 0, 0, 0));\n        // FIXME: use Layout for this\n        add(buttons, BorderLayout.SOUTH);\n        setBorder(BorderFactory.createEmptyBorder(10, 10, 10, 10));\n    }\n\n    private void initRenderers() {\n        TableColumnModel columns = jtable.getColumnModel();\n        // HACK: replace me with: Cross.getFormat(alg)\n        String t = new TScore().getFormat();\n        String tr = new Trend().getFormat();\n        String d = new DScore().getFormat();\n        // t, tr, d\n        columns.getColumn(1).setCellRenderer(new DecimalRenderer(t));\n        columns.getColumn(2).setCellRenderer(new DecimalRenderer(tr));\n        columns.getColumn(3).setCellRenderer(new DecimalRenderer(d));\n        // overlap\n        columns.getColumn(4).setCellRenderer(new DecimalRenderer(\"000\"));\n    }\n\n    /**\n     * \t Returns a title suitable for this view.  It'll probably be a\n     * \t localized version of something like \"Crossdating Table\".\n     *\n     * \t @return a title for this view\n     */\n    public String toString() {\n        return I18n.getText(\"crossdating_table\");\n    }\n\n    // popup menu\n    private class TableViewPopup extends JPopupMenu {\n\n        TableViewPopup() {\n            JMenuItem graph = new JMenuItem(\"Graph this Crossdate\");\n            JMenuItem jump = new JMenuItem(\"Jump to this Crossdate\");\n            JMenuItem open = new JMenuItem(\"Open this Sample\");\n            graph.addActionListener(new AbstractAction() {\n\n                public void actionPerformed(ActionEvent e) {\n                    // get fixed\n                    int i = fixedPopup.getSelectedIndex();\n                    Element f = new Element((String) fixedAsList.get(i));\n                    // get moving\n                    int j = jtable.getSelectedRow();\n                    Element m = new Element((String) table.getFilenameOfRow(j));\n                    // make graph\n                    List list = new ArrayList();\n                    list.add(f);\n                    list.add(m);\n                    new GraphWindow(list);\n                }\n            });\n            jump.addActionListener(new AbstractAction() {\n\n                public void actionPerformed(ActionEvent e) {\n                    // TODO: get fixed\n                    // TODO: get moving (selection)\n                    // TODO: crossdateWindow.jumpToCrossdate(f,m)?\n                    // NEED: a ref to the CDW here\n                    // NEED: that method in CDW\n                }\n            });\n            open.addActionListener(new AbstractAction() {\n\n                public void actionPerformed(ActionEvent e) {\n                    try {\n                        // get moving, make sample, put in editor\n                        int j = jtable.getSelectedRow();\n                        Sample s = new Sample((String) table.getFilenameOfRow(j));\n                        new Editor(s);\n                    } catch (IOException ioe) {\n                        // FIXME\n                        System.out.println(\"ioe!\");\n                    }\n                }\n            });\n            add(graph);\n            add(jump);\n            addSeparator();\n            add(open);\n        }\n    }\n}\n",
		"id": "/EvoSuiteBenchmark/35_corina/src/main/java/corina/cross/TableView.java",
		"test_prompt": "// TableViewTest.java\npackage corina.cross;\n\nimport corina.Sample;\nimport corina.Element;\n// IDEA: what if i got rid of Element?  it's either a sample, or a\n// filename.  no, that's bad, i wouldn't be able to load massive\n// amounts of metadata, as browser requires...\nimport corina.graph.GraphWindow;\nimport corina.editor.Editor;\nimport corina.ui.Builder;\nimport corina.ui.I18n;\nimport corina.gui.Layout;\nimport corina.index.DecimalRenderer;\nimport corina.util.PopupListener;\nimport java.io.IOException;\nimport java.util.List;\nimport java.util.ArrayList;\nimport javax.swing.*;\nimport javax.swing.table.TableColumnModel;\nimport java.awt.BorderLayout;\nimport java.awt.event.ActionEvent;\nimport java.awt.print.Printable;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link TableView}.\n* It contains ten unit test cases for the {@link TableView#print()} method.\n*/\nclass TableViewTest {"
	},
	{
		"original_code": "// Weiserjahre.java\n//\n// This file is part of Corina.\n//\n// Corina is free software; you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation; either version 2 of the License, or\n// (at your option) any later version.\n//\n// Corina is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Corina; if not, write to the Free Software\n// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n//\n// Copyright 2001 Ken Harris <kbh7@cornell.edu>\n//\npackage corina.cross;\n\nimport corina.Sample;\nimport corina.core.App;\nimport corina.ui.I18n;\n\npublic class Weiserjahre extends Cross {\n\n    // don't use me -- for getName() only -- HACK!\n    Weiserjahre() {\n    }\n\n    // stupid, stupid -- DESIGN: make a factory?\n    public Weiserjahre(Sample fixed, Sample moving) {\n        super(fixed, moving);\n    }\n\n    public String getFormat() {\n        // FIXME: this should be a pref, as well\n        return App.prefs.getPref(\"corina.cross.weiserjahre.format\", \"0.0%\") + \"of 0000\";\n    }\n\n    // same as trend?  (this is old-style trend, even -- very obsolete!)\n    public boolean isSignificant(float score, int overlap) {\n        return score > 0.65f;\n        // WRITEME: it's more sophisticated than this, i think\n    }\n\n    public float getMinimumSignificant() {\n        return 0.65f;\n    }\n\n    public String getName() {\n        return I18n.getText(\"weiserjahre\");\n    }\n\n    private int signifigantcount = 0;\n\n    // returns the number of signifigant intervals of the last compute()\n    public int getSignifigant() {\n        return signifigantcount;\n    }\n\n    public float compute(int offset_fixed, int offset_moving) {\n        // value = (# trends synchronous with signature years) /\n        //         (# signature years in overlap)\n        // need these fields, or can't compute weiserjahre cross\n        if (getFixed().count == null || getFixed().incr == null) {\n            String problem = \"The fixed sample must be a sum,\\n\" + \"with count and Weiserjahre data,\\n\" + \"to run a WJ cross.\";\n            throw new IllegalArgumentException(problem);\n        }\n        int i = offset_fixed;\n        int j = offset_moving;\n        int synchroTrends = 0;\n        int totalSigs = 0;\n        // do magic in here\n        while (i < getFixed().data.size() - 1 && j < getMoving().data.size() - 1) {\n            // number of samples: need n>3\n            int n = ((Integer) getFixed().count.get(i)).intValue();\n            // fraction with increasing trend: need pct<25% OR pct>75%\n            double pct = ((Number) getFixed().incr.get(i)).doubleValue() / (double) n;\n            // signature year?  (j==0 is bad, too)\n            if (n > 3 && (pct <= 0.25 || pct >= 0.75) && j > 0) {\n                // REFACTOR: use Weiserjahre.isSignificant() here somehow?\n                // count it\n                totalSigs++;\n                // i'm ASSUMING that the trend of the fixed sample is\n                // the trend of the majority of the elements, NOT the\n                // trend of the sum.  if i'm backwards, it's easy\n                // enough to fix: copy \"compute moving trend\", and\n                // replace s/moving/fixed/ and s/j/i/\n                // compute fixed trend\n                int fixedTrend = 0;\n                if (pct <= 0.25)\n                    fixedTrend = -1;\n                else if (pct >= 0.75)\n                    fixedTrend = +1;\n                // compute moving trend\n                int movingTrend = 0;\n                if (((Number) getMoving().data.get(j - 1)).intValue() < ((Number) getMoving().data.get(j)).intValue())\n                    movingTrend = +1;\n                else if (((Number) getMoving().data.get(j - 1)).intValue() > ((Number) getMoving().data.get(j)).intValue())\n                    movingTrend = -1;\n                // do they match?\n                if (fixedTrend == movingTrend)\n                    synchroTrends++;\n            }\n            // next one\n            i++;\n            j++;\n        }\n        signifigantcount = totalSigs;\n        // if there were no significant intervals, call it 0.0.\n        if (totalSigs == 0)\n            return 0;\n        return (float) synchroTrends / (float) totalSigs;\n    }\n}\n",
		"id": "/EvoSuiteBenchmark/35_corina/src/main/java/corina/cross/Weiserjahre_0Test.java",
		"test_prompt": "// Weiserjahre_0Test.java\n// This file is part of Corina.\n//\n// Corina is free software; you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation; either version 2 of the License, or\n// (at your option) any later version.\n//\n// Corina is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Corina; if not, write to the Free Software\n// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n//\n// Copyright 2001 Ken Harris <kbh7@cornell.edu>\n//\npackage corina.cross;\n\nimport corina.Sample;\nimport corina.core.App;\nimport corina.ui.I18n;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link Weiserjahre}.\n* It contains ten unit test cases for the {@link Weiserjahre#isSignificant(float, int)} method.\n*/\nclass Weiserjahre_0Test {"
	},
	{
		"original_code": "// Weiserjahre.java\n//\n// This file is part of Corina.\n//\n// Corina is free software; you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation; either version 2 of the License, or\n// (at your option) any later version.\n//\n// Corina is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Corina; if not, write to the Free Software\n// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n//\n// Copyright 2001 Ken Harris <kbh7@cornell.edu>\n//\npackage corina.cross;\n\nimport corina.Sample;\nimport corina.core.App;\nimport corina.ui.I18n;\n\npublic class Weiserjahre extends Cross {\n\n    // don't use me -- for getName() only -- HACK!\n    Weiserjahre() {\n    }\n\n    // stupid, stupid -- DESIGN: make a factory?\n    public Weiserjahre(Sample fixed, Sample moving) {\n        super(fixed, moving);\n    }\n\n    public String getFormat() {\n        // FIXME: this should be a pref, as well\n        return App.prefs.getPref(\"corina.cross.weiserjahre.format\", \"0.0%\") + \"of 0000\";\n    }\n\n    // same as trend?  (this is old-style trend, even -- very obsolete!)\n    public boolean isSignificant(float score, int overlap) {\n        return score > 0.65f;\n        // WRITEME: it's more sophisticated than this, i think\n    }\n\n    public float getMinimumSignificant() {\n        return 0.65f;\n    }\n\n    public String getName() {\n        return I18n.getText(\"weiserjahre\");\n    }\n\n    private int signifigantcount = 0;\n\n    // returns the number of signifigant intervals of the last compute()\n    public int getSignifigant() {\n        return signifigantcount;\n    }\n\n    public float compute(int offset_fixed, int offset_moving) {\n        // value = (# trends synchronous with signature years) /\n        //         (# signature years in overlap)\n        // need these fields, or can't compute weiserjahre cross\n        if (getFixed().count == null || getFixed().incr == null) {\n            String problem = \"The fixed sample must be a sum,\\n\" + \"with count and Weiserjahre data,\\n\" + \"to run a WJ cross.\";\n            throw new IllegalArgumentException(problem);\n        }\n        int i = offset_fixed;\n        int j = offset_moving;\n        int synchroTrends = 0;\n        int totalSigs = 0;\n        // do magic in here\n        while (i < getFixed().data.size() - 1 && j < getMoving().data.size() - 1) {\n            // number of samples: need n>3\n            int n = ((Integer) getFixed().count.get(i)).intValue();\n            // fraction with increasing trend: need pct<25% OR pct>75%\n            double pct = ((Number) getFixed().incr.get(i)).doubleValue() / (double) n;\n            // signature year?  (j==0 is bad, too)\n            if (n > 3 && (pct <= 0.25 || pct >= 0.75) && j > 0) {\n                // REFACTOR: use Weiserjahre.isSignificant() here somehow?\n                // count it\n                totalSigs++;\n                // i'm ASSUMING that the trend of the fixed sample is\n                // the trend of the majority of the elements, NOT the\n                // trend of the sum.  if i'm backwards, it's easy\n                // enough to fix: copy \"compute moving trend\", and\n                // replace s/moving/fixed/ and s/j/i/\n                // compute fixed trend\n                int fixedTrend = 0;\n                if (pct <= 0.25)\n                    fixedTrend = -1;\n                else if (pct >= 0.75)\n                    fixedTrend = +1;\n                // compute moving trend\n                int movingTrend = 0;\n                if (((Number) getMoving().data.get(j - 1)).intValue() < ((Number) getMoving().data.get(j)).intValue())\n                    movingTrend = +1;\n                else if (((Number) getMoving().data.get(j - 1)).intValue() > ((Number) getMoving().data.get(j)).intValue())\n                    movingTrend = -1;\n                // do they match?\n                if (fixedTrend == movingTrend)\n                    synchroTrends++;\n            }\n            // next one\n            i++;\n            j++;\n        }\n        signifigantcount = totalSigs;\n        // if there were no significant intervals, call it 0.0.\n        if (totalSigs == 0)\n            return 0;\n        return (float) synchroTrends / (float) totalSigs;\n    }\n}\n",
		"id": "/EvoSuiteBenchmark/35_corina/src/main/java/corina/cross/Weiserjahre_1Test.java",
		"test_prompt": "// Weiserjahre_1Test.java\n// This file is part of Corina.\n//\n// Corina is free software; you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation; either version 2 of the License, or\n// (at your option) any later version.\n//\n// Corina is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Corina; if not, write to the Free Software\n// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n//\n// Copyright 2001 Ken Harris <kbh7@cornell.edu>\n//\npackage corina.cross;\n\nimport corina.Sample;\nimport corina.core.App;\nimport corina.ui.I18n;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link Weiserjahre}.\n* It contains ten unit test cases for the {@link Weiserjahre#compute(int, int)} method.\n*/\nclass Weiserjahre_1Test {"
	},
	{
		"original_code": "// Table.java\n//\n// This file is part of Corina.\n//\n// Corina is free software; you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation; either version 2 of the License, or\n// (at your option) any later version.\n//\n// Corina is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Corina; if not, write to the Free Software\n// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n//\n// Copyright 2001 Ken Harris <kbh7@cornell.edu>\n//\npackage corina.cross;\n\nimport corina.Sample;\nimport corina.Element;\nimport corina.ui.I18n;\n// !!!\nimport corina.print.*;\nimport java.io.BufferedWriter;\nimport java.io.FileWriter;\nimport java.io.IOException;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.awt.print.Printable;\nimport javax.swing.table.AbstractTableModel;\n\n/**\n *    A crossdating table: a table of samples, crossdates, and other\n *    information, from an 1-by-N cross.\n *\n *    <p>A sample table might look like this when printed:</p>\n *\n * <blockquote class=\"paper\">\n *\n *    <h3>Crossdating table for Zonguldak, Karabuk Spring 99 Master</h3>\n *    <table border=\"1\" cellspacing=\"0\" width=\"100%\">\n *      <tr>\n *        <th>Sample</th>\n *        <th>T-Score</th>\n *        <th>Trend</th>\n *        <th>D-Score</th>\n *        <th>Overlap</th>\n *        <th>Distance</th>\n *      </tr>\n *      <tr>\n *        <td>Istanbul, Belgrade Forest</td>\n *        <td>2.36</td>\n *        <td>76.5%</td>\n *        <td>0.62</td>\n *        <td>n=136</td>\n *        <td>49 km</td>\n *      </tr>\n *    </table>\n *\n * </blockquote>\n *\n *    @author Ken Harris &lt;kbh7 <i style=\"color: gray\">at</i> cornell <i style=\"color: gray\">dot</i> edu&gt;\n *    @version $Id: Table.java,v 1.5 2004/09/29 21:21:55 aaron Exp $\n */\npublic class Table extends AbstractTableModel {\n\n    // HMM: i'm not sure i like one of my core data classes extending\n    // a swing class...\n    // OBSOLETE: old random comment that i don't want to delete yet:\n    // (loop for r in table do (write (row-format r text)))\n    // -- or something like that\n    /*\n      TODO:\n      -- make it use the crossdates that CDK picked, not Cross.DEFAULTs\n\n      ORGANIZATION:\n      -- 3 views of Sequences: CrossdateView, TableView, GridView\n      ---- fourth view, SamplesView?  this was once an idea.  [cmd 0]\n      -- 3 views of Crossdates: SignificantScoresView, AllScoresView, HistogramView\n      -- each view is printable\n      -- each view has menus/menuitems?\n      -- Sequence has load/save, which saves:\n      ---- list of fixed filenames\n      ---- list of moving filenames\n      ---- which view you're looking at\n      ---- any parameters for that view\n      ---- (goal: new cross, save, close, open, right back where you were)\n\n      e.g.,\n      <?xml version=\"1.0\"?>\n      <crossdate view=\"grid\">\n        <fixed>\n\t  <sample filename=\"abc.123\"/>\n\t  <sample filename=\"abc.123\"/>\n        </fixed>\n        <moving>\n\t  <sample filename=\"abc.123\"/>\n\t  <sample filename=\"abc.123\"/>\n        </moving>\n      </crossdate>\n    */\n    // input\n    private Sample singleton;\n\n    // List of Elements to use\n    private List ss;\n\n    // output\n    // of Table.Row\n    private List rows;\n\n    /*\n      A row of the 1-by-N table, which holds the sample's title, and\n      crossdating scores.\n\n      (It's just a Single object with a title, and the ability to\n      format itself into a line of text.)\n\n      (Single holds all crossdate scores, the overlap, and the\n      distance, if available.)\n    */\n    private static class Row extends Single {\n\n        /**\n         * The row's (sample's) title.\n         */\n        String title;\n\n        // (make private, with getTitle() method?  make this toString()?)\n        Row(Sample fixed, Sample moving) {\n            // here's where all the computations get done\n            super(fixed, moving);\n            title = moving.toString();\n            this.movingFilename = (String) moving.meta.get(\"filename\");\n        }\n\n        private String movingFilename;\n\n        // return the moving sample\n        String getSample() {\n            return movingFilename;\n        }\n    }\n\n    // get the sample in a certain row\n    public String getFilenameOfRow(int row) {\n        Row r = (Row) rows.get(row);\n        return r.getSample();\n    }\n\n    //\n    // table model\n    //\n    // -- these methods should be the only way to get at the stuff above here\n    // FIXME: use a local array, ALGORITHMS?, instead of hardcoding Cross.DEFAULT_CROSSDATES.\n    // -- FUTURE: get ALGORITHMS from the cmd-E dialog, just like the normal crossdate view does.\n    // -- REFACTOR: CrossFrame should be split into CrossFrame and CrossPane!\n    public int getColumnCount() {\n        // title, scores*, overlap, distance\n        return 1 + Cross.DEFAULT_CROSSDATES.length + 2;\n    }\n\n    public int getRowCount() {\n        return rows.size();\n    }\n\n    public String getColumnName(int col) {\n        switch(col) {\n            case 0:\n                return I18n.getText(\"sample\");\n            // ***\n            case 1:\n                return I18n.getText(\"tscore\");\n            case 2:\n                return I18n.getText(\"trend\");\n            case 3:\n                return I18n.getText(\"dscore\");\n            case 4:\n                return I18n.getText(\"overlap\");\n            case 5:\n                return I18n.getText(\"distance\");\n            // never happens\n            default:\n                throw new IllegalArgumentException();\n        }\n    }\n\n    public Object getValueAt(int row, int col) {\n        Row r = (Row) rows.get(row);\n        switch(col) {\n            case 0:\n                return r.title;\n            // ***\n            case 1:\n                return (r.n == 0 ? \"\" : r.formatT());\n            case 2:\n                return (r.n == 0 ? \"\" : r.formatTrend());\n            case 3:\n                return (r.n == 0 ? \"\" : r.formatD());\n            case 4:\n                return String.valueOf(r.n);\n            case 5:\n                return r.distanceAsString();\n            // never happens\n            default:\n                throw new IllegalArgumentException();\n        }\n    }\n\n    //\n    // constructor\n    //\n    // new c'tor: takes any (fixed, moving[]) combo from a seq.\n    public Table(String fixed, List moving) throws IOException {\n        // set singleton -- fixed sample\n        singleton = new Sample(fixed);\n        // set ss -- all moving samples (excluding the fixed one)\n        ss = new ArrayList();\n        for (int i = 0; i < moving.size(); i++) {\n            String m = (String) moving.get(i);\n            if (!fixed.equals(m))\n                ss.add(new Element(m));\n        }\n        // -- create table list\n        rows = new ArrayList();\n        // -- compute table?  no, not yet -- compute() computes table\n        // no, do this later!\n        compute();\n        // hmm...\n        // -- update table on-screen as it's computed?\n        // -- need a clever way to handle ioexceptions in run()\n        // ---- dummy 'breakage' element singleton?\n    }\n\n    //\n    // compute\n    //\n    // run all computations for the table.  computes t, trend, d,\n    // overlap, and distance (if available) between sites.\n    private void compute() {\n        for (int i = 0; i < ss.size(); i++) {\n            Element e = (Element) ss.get(i);\n            // skip inactive elements -- DUMB: elements aren't\n            // \"inactive\", only elements-in-sums are.\n            if (!e.isActive())\n                continue;\n            try {\n                Sample movingSample = new Sample(e.getFilename());\n                // add new row to table\n                rows.add(new Row(singleton, movingSample));\n            } catch (IOException ioe) {\n                // can't load it?  ignore it!  -- DO SOMETHING BETTER!\n            }\n        }\n    }\n\n    //\n    // formatting\n    //\n    /**\n     *  The title of this table.  The format is <code>\"Crossdating\n     *         Table for sampleTitle\"</code> (for the title\n     *         <code>sampleTitle</code> of the singleton).\n     * \t@return the title of this table\n     */\n    public String toString() {\n        return I18n.getText(\"crossdating_table\") + \" for \" + singleton;\n        // WHAT is this used for?  -- saveHTML, printing, ...?\n    }\n\n    // write the header row, given start-of-row, between-cells,\n    // and end-of-line strings\n    private String formatHeaderRow(String startOfRow, String betweenCells, String endOfLine) {\n        StringBuffer buf = new StringBuffer();\n        buf.append(startOfRow);\n        int n = getColumnCount();\n        for (int i = 0; i < n; i++) {\n            buf.append(getColumnName(i));\n            if (i < n - 1)\n                buf.append(betweenCells);\n        }\n        buf.append(endOfLine);\n        return buf.toString();\n    }\n\n    // write the row, given start-of-row, between-cells,\n    // and end-of-line strings\n    private String formatRow(int row, String startOfRow, String betweenCells, String endOfLine) {\n        StringBuffer buf = new StringBuffer();\n        buf.append(startOfRow);\n        int n = getColumnCount();\n        for (int i = 0; i < n; i++) {\n            buf.append(getValueAt(row, i));\n            if (i < n - 1)\n                buf.append(betweenCells);\n        }\n        buf.append(endOfLine);\n        return buf.toString();\n    }\n\n    //\n    // exporting\n    //\n    // save as HTML -- XHTML 1.1, in fact\n    public void saveHTML(String filename) throws IOException {\n        BufferedWriter w = null;\n        try {\n            // open file, etc.\n            w = new BufferedWriter(new FileWriter(filename));\n            // write header.  newlines don't really do anything in HTML,\n            // and browsers are used to dealing with all sorts of crazy\n            // newlines, so i'll just use \\n instead of w.newLine(), which\n            // makes this method far more readable.\n            // XHTML1.1 -- i got this doctype\n            // from http://www.alistapart.com/stories/doctype/\n            // BUT: isn't xhtml1.1 virtually unreadable if served correctly?\n            // how much different is xhtml1.0?\n            w.write(\"<!DOCTYPE html PUBLIC \\\"-//W3C//DTD XHTML 1.1//EN\\\" \" + \"\\\"http://www.w3.org/TR/xhtml11/DTD/xhtml11.dtd\\\">\");\n            w.write(\"<html>\\n\");\n            w.write(\"\\n\");\n            w.write(\"<head>\\n\");\n            w.write(\"   <title>\" + toString() + \"</title>\\n\");\n            w.write(\"   <style>\\n\");\n            w.write(\"      <!--\\n\");\n            w.write(\"         td, th { text-align: left }\\n\");\n            w.write(\"         tr.odd { background-color: #eef }\\n\");\n            w.write(\"         tr.even { background-color: #fff }\\n\");\n            w.write(\"      -->\\n\");\n            w.write(\"   </style>\\n\");\n            w.write(\"</head>\\n\");\n            w.write(\"\\n\");\n            w.write(\"<body>\\n\");\n            w.write(\"\\n\");\n            w.write(\"<table border=\\\"0\\\" cellspacing=\\\"4\\\" cellpadding=\\\"4\\\" rules=\\\"groups\\\">\\n\");\n            w.write(\"   <caption>\" + toString() + \"</caption>\\n\");\n            w.write(\"\\n\");\n            w.write(\"   <colgroup align=\\\"left\\\" span=\\\"2\\\"/>\\n\");\n            // FIXME!  is range a column, or not?\n            /* for (int i=0; i<Cross.DEFAULT_CROSSDATES.length; i++) // ***\n\t       w.write(\"   <colgroup align=\\\"left\\\"/>\\n\");\n\t       w.write(\"   <colgroup align=\\\"left\\\"/>\\n\");\n\t       w.write(\"   <colgroup align=\\\"left\\\"/>\\n\");\n\t    */\n            for (int i = 1; i < getColumnCount(); i++) w.write(\"   <colgroup align=\\\"left\\\"/>\\n\");\n            w.write(\"\\n\");\n            w.write(\"   <thead>\\n\");\n            w.write(\"   <tr>\\n\");\n            w.write(\"      <th width=\\\"50%\\\">\" + getColumnName(0) + \"</th>\\n\");\n            for (int i = 1; i < getColumnCount(); i++) w.write(\"      <th width=\\\"10%\\\">\" + getColumnName(i) + \"</th>\\n\");\n            // FIXME: make width of columns (100 - 50) / (getColumnCount()-1)?\n            w.write(\"   </tr>\\n\");\n            w.write(\"\\n\");\n            w.write(\"   <tbody>\\n\");\n            // write lines\n            for (int i = 0; i < getRowCount(); i++) {\n                w.write(\"   <tr class=\\\"\" + (i % 2 == 1 ? \"odd\" : \"even\") + \"\\\">\\n\");\n                w.write(formatRow(i, \"<td>\", \"</td><td>\", \"</td>\"));\n                w.write(\"   </tr>\\n\");\n            }\n            w.write(\"   </tbody>\\n\");\n            w.write(\"</table>\\n\");\n            w.write(\"\\n\");\n            w.write(\"</body>\\n\");\n            w.write(\"\\n\");\n            w.write(\"</html>\\n\");\n        } finally {\n            // close file\n            if (w != null)\n                try {\n                    w.close();\n                } catch (IOException ioe) {\n                    // ignore, now\n                }\n        }\n    }\n\n    // save as plaintext -- for spreadsheets, stats programs (like matlab),\n    // really old printers, or for inserting into a table (in a word\n    // processor) for your own formatting.\n    public void saveText(String filename) throws IOException {\n        BufferedWriter w = null;\n        try {\n            // open (buffered) file\n            w = new BufferedWriter(new FileWriter(filename));\n            String newLine = System.getProperty(\"line.separator\");\n            // write header\n            w.write(formatHeaderRow(\"\", \"\\t\", newLine));\n            // write lines\n            for (int i = 0; i < getRowCount(); i++) w.write(formatRow(i, \"\", \"\\t\", newLine));\n            // REFACTOR: this looks very similar to above...\n        } finally {\n            // close file\n            if (w != null)\n                try {\n                    w.close();\n                } catch (IOException ioe) {\n                    // ignore, now\n                }\n        }\n    }\n\n    //\n    // printing\n    //\n    // hack!\n    public Printable print() {\n        return new TablePrinter(this);\n    }\n\n    // TODO: this is not a static inner class, but it probably shouldn't\n    // be.  instead, it shouldn't need |t| passed to it: it should simply\n    // call the enclosing class's methods (it does anyway).  the only\n    // catch is toString() -- how do you specify \"enclosing class's\n    // implementation of this method\"?\n    private class TablePrinter extends Printer {\n\n        TablePrinter(Table t) {\n            // title\n            lines.add(new TextLine(t.toString(), Line.TITLE_SIZE));\n            // FIXME: i really want a TitleLine right now!\n            lines.add(new EmptyLine());\n            // table header\n            StringBuffer headerSpec = new StringBuffer(\"> 50% \");\n            // EXTRACT 50%, (all widths?)\n            // BETTER: get column widths from jtable\n            // -- no, but make them 50/(n-1)%\n            for (int i = 1; i < getColumnCount(); i++) headerSpec.append(\"> 10%\");\n            TabbedLineFactory f = new TabbedLineFactory(headerSpec.toString());\n            lines.add(f.makeLine(formatHeaderRow(\"\", \"\\t\", \"\")));\n            lines.add(new ThinLine(0.0f, 1.0f));\n            // lines of table\n            for (int i = 0; i < getRowCount(); i++) lines.add(f.makeLine(formatRow(i, \"\", \"\\t\", \"\")));\n            // REFACTOR: this looks just like Table.saveHTML/saveText()\n            // print by-line. -- REFACTOR: addByLine()?  or just make\n            // ByLine = empty+thin+text?\n            // DONE IN: Browser, CrossPrinter, Table, SitePrinter,\n            // SamplePrinter (sort of)\n            lines.add(new EmptyLine());\n            lines.add(new ThinLine(0.0f, 0.3f));\n            lines.add(new ByLine());\n        }\n    }\n    // old to-do list for tableprinter:\n    // TODO: make widths = (100 - 50) / (cols - 1)\n    // TODO: extract 50% const!\n    // TODO: make Table use any number of crossdates -- get rid of formatT(), etc.\n    // TODO: make join(strings, start, tab, end)?\n}\n",
		"id": "/EvoSuiteBenchmark/35_corina/src/main/java/corina/cross/Table.java",
		"test_prompt": "// TableTest.java\n// This file is part of Corina.\n//\n// Corina is free software; you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation; either version 2 of the License, or\n// (at your option) any later version.\n//\n// Corina is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Corina; if not, write to the Free Software\n// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n//\n// Copyright 2001 Ken Harris <kbh7@cornell.edu>\n//\npackage corina.cross;\n\nimport corina.Sample;\nimport corina.Element;\nimport corina.ui.I18n;\n// !!!\nimport corina.print.*;\nimport java.io.BufferedWriter;\nimport java.io.FileWriter;\nimport java.io.IOException;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.awt.print.Printable;\nimport javax.swing.table.AbstractTableModel;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link Table}.\n* It contains ten unit test cases for the {@link Table#print()} method.\n*/\nclass TableTest {"
	},
	{
		"original_code": "// TScore.java\n//\n// This file is part of Corina.\n//\n// Corina is free software; you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation; either version 2 of the License, or\n// (at your option) any later version.\n//\n// Corina is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Corina; if not, write to the Free Software\n// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n//\n// Copyright 2001 Ken Harris <kbh7@cornell.edu>\n//\npackage corina.cross;\n\nimport corina.Sample;\nimport corina.core.App;\nimport corina.ui.I18n;\n\n/**\n * <p>A (Student's) T-Score crossdate.</p>\n *\n * <p>This algorithm is based on Mecki Pohl's algorithm, and gives\n * very similar results (reason for deviations unknown, possibly\n * rounding error).  I'm not completely certain this implementation is\n * correct, but it gives good results.</p>\n *\n * <p>There are apparently many (dozens of?) T-score algorithms in\n * existance.  This one is taken from Baillie and Pilcher's \"A Simple\n * Crossdating Program\", pp. 7-14, Tree-Ring Bulletin, Vol. 33, 1973.\n * (That version was \"written in FORTRAN IV and uses a card reader and\n * line printer\".)</p>\n *\n * <p>The procedure used is as follows:</p>\n *\n * <ol>\n *\n * <li>Normalize the data (make it \"bivariate-normal\"):</li>\n *\n * <ul>\n *\n * <li>convert each value to the percentage of the mean of the 5\n * values it is the center of; then</li>\n *\n * <li>take the natural logarithm of each value</li>\n *\n * </ul>\n *\n * <li>For each possible overlap, compute the r (correlation coefficient):</li>\n *\n * <blockquote>\n * <i>s</i><sub>1</sub> = <big>&Sigma;</big>\n * ( <i>x</i><sub>i</sub><i>y</i><sub>i</sub> -\n * <i>N</i> ( <i>x</i><sub>i</sub> - <i>x</i><sub>avg</sub> )\n * ( <i>y</i><sub>i</sub> - <i>y</i><sub>avg</sub> ) )\n * </blockquote>\n *\n * <blockquote>\n * <i>s</i><sub>2</sub> = <big>&Sigma;</big>\n * ( <i>x</i><sub>i</sub><sup>2</sup> -\n * <i>N</i> ( <i>x</i><sub>i</sub> - <i>x</i><sub>avg</sub> )<sup>2</sup> )\n * </blockquote>\n *\n * <blockquote>\n * <i>s</i><sub>3</sub> = <big>&Sigma;</big>\n * ( <i>y</i><sub>i</sub><sup>2</sup> -\n * <i>N</i> ( <i>y</i><sub>i</sub> - <i>y</i><sub>avg</sub> )<sup>2</sup> )\n * </blockquote>\n *\n * <blockquote>\n * <i>r</i> = <i>s</i><sub>1</sub> / &radic;( <i>s</i><sub>2</sub> <i>s</i><sub>3</sub> )\n * </blockquote>\n *\n * <li>Compute the t-score:</li>\n *\n * <blockquote>\n * <i>t</i> = <i>r</i> &radic;( (<i>N</i> - 2) / (1 - <i>r</i><sup>2</sup>) )\n * </blockquote>\n *\n * </ol>\n *\n * <p>The work of computing the r-value is independent, and it turns\n * out users want that statistic, too, so that has been extracted into\n * the class RValue, which TScore now extends.</p>\n *\n * <p>This class is dedicated to poor Mr. Potter out in Van Nuys.</p>\n *\n * @author Ken Harris &lt;kbh7 <i style=\"color: gray\">at</i> cornell <i style=\"color: gray\">dot</i> edu&gt;\n * @version $Id: TScore.java,v 1.8 2006/02/24 20:51:34 lucasmo Exp $\n */\npublic class TScore extends RValue {\n\n    // don't use me\n    protected TScore() {\n    }\n\n    /**\n     *  Construct a new T-score from two samples.\n     * \t @param s1 the fixed sample\n     * \t @param s2 the moving sample\n     */\n    public TScore(Sample s1, Sample s2) {\n        super(s1, s2);\n    }\n\n    /**\n     *  Return a prettier name for this cross: \"T-Score\".\n     * \t @return the name of this cross, \"T-Score\"\n     */\n    public String getName() {\n        return I18n.getText(\"tscore\");\n    }\n\n    /**\n     *  A format string for T-scores.\n     * \t @return a format string for T-scores\n     */\n    public String getFormat() {\n        return App.prefs.getPref(\"corina.cross.tscore.format\", \"0.00\");\n    }\n\n    // for 99.5% confidence, from PIK's table (source?)\n    // \"statistics for archaeologists\" (DRENNAN) is off-by-a-column; is he wrong?\n    // though i can't find his source, \"contemporary statistical methods\" (KOOPMANS) to check.\n    // update: carol says it's probably one-sided versus two-sided (it's a symmetric\n    // distribution).  that seems fair.\n    private static float[] table = { 63.657f, 9.925f, 5.841f, 4.604f, 4.032f, 3.707f, 3.499f, 3.355f, 3.250f, 3.169f, 3.106f, 3.055f, 3.012f, 2.977f, 2.947f, 2.921f, 2.898f, 2.878f, 2.861f, 2.845f, 2.831f, 2.819f, 2.807f, 2.797f, 2.787f, 2.779f, 2.771f, 2.763f, 2.756f, 2.750f };\n\n    public boolean isSignificant(float score, int overlap) {\n        if (// it happens...\n        overlap == 0)\n            return false;\n        // 2.704 is for overlap=40; 60 is 2.660, inf=2.576\n        // WRITEME: so take care of those cases!\n        float threshold = ((overlap <= 30) ? table[overlap - 1] : 2.576f);\n        return (score >= threshold);\n    }\n\n    // OBSOLETE! -- but still used by CrossPrinter, CrossFrame\n    public float getMinimumSignificant() {\n        return 2.55f;\n    }\n\n    /**\n     * \t Given offsets into the fixed and moving data, compute a single\n     * \t T-score for that position.\n     *\n     * \t @return the T-score for this possible cross\n     */\n    public float compute(int offsetFixed, int offsetMoving) {\n        int overlap = Math.min(getFixed().data.size() - offsetFixed, getMoving().data.size() - offsetMoving);\n        // already know how to compute r\n        float r = super.compute(offsetFixed, offsetMoving);\n        // FIXME: get rid of cast!\n        // if r is negative, t is zero.\n        // (baillie & pilcher caught this earlier, at r's z3, but this\n        // way is more convenient for me, and gives the same result.)\n        if (r < 0)\n            return 0;\n        // t = r * sqrt(n-2)/sqrt(1-r^2)\n        float num = (float) Math.sqrt(overlap - 2);\n        float den = (float) Math.sqrt(1 - r * r);\n        float t = r * num / den;\n        // if overlap=1 or some other silliness, make it zero.\n        if (Float.isNaN(t))\n            t = 0;\n        return t;\n    }\n}\n",
		"id": "/EvoSuiteBenchmark/35_corina/src/main/java/corina/cross/TScore_0Test.java",
		"test_prompt": "// TScore_0Test.java\n// This file is part of Corina.\n//\n// Corina is free software; you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation; either version 2 of the License, or\n// (at your option) any later version.\n//\n// Corina is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Corina; if not, write to the Free Software\n// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n//\n// Copyright 2001 Ken Harris <kbh7@cornell.edu>\n//\npackage corina.cross;\n\nimport corina.Sample;\nimport corina.core.App;\nimport corina.ui.I18n;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link TScore}.\n* It contains ten unit test cases for the {@link TScore#isSignificant(float, int)} method.\n*/\nclass TScore_0Test {"
	},
	{
		"original_code": "// TScore.java\n//\n// This file is part of Corina.\n//\n// Corina is free software; you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation; either version 2 of the License, or\n// (at your option) any later version.\n//\n// Corina is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Corina; if not, write to the Free Software\n// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n//\n// Copyright 2001 Ken Harris <kbh7@cornell.edu>\n//\npackage corina.cross;\n\nimport corina.Sample;\nimport corina.core.App;\nimport corina.ui.I18n;\n\n/**\n * <p>A (Student's) T-Score crossdate.</p>\n *\n * <p>This algorithm is based on Mecki Pohl's algorithm, and gives\n * very similar results (reason for deviations unknown, possibly\n * rounding error).  I'm not completely certain this implementation is\n * correct, but it gives good results.</p>\n *\n * <p>There are apparently many (dozens of?) T-score algorithms in\n * existance.  This one is taken from Baillie and Pilcher's \"A Simple\n * Crossdating Program\", pp. 7-14, Tree-Ring Bulletin, Vol. 33, 1973.\n * (That version was \"written in FORTRAN IV and uses a card reader and\n * line printer\".)</p>\n *\n * <p>The procedure used is as follows:</p>\n *\n * <ol>\n *\n * <li>Normalize the data (make it \"bivariate-normal\"):</li>\n *\n * <ul>\n *\n * <li>convert each value to the percentage of the mean of the 5\n * values it is the center of; then</li>\n *\n * <li>take the natural logarithm of each value</li>\n *\n * </ul>\n *\n * <li>For each possible overlap, compute the r (correlation coefficient):</li>\n *\n * <blockquote>\n * <i>s</i><sub>1</sub> = <big>&Sigma;</big>\n * ( <i>x</i><sub>i</sub><i>y</i><sub>i</sub> -\n * <i>N</i> ( <i>x</i><sub>i</sub> - <i>x</i><sub>avg</sub> )\n * ( <i>y</i><sub>i</sub> - <i>y</i><sub>avg</sub> ) )\n * </blockquote>\n *\n * <blockquote>\n * <i>s</i><sub>2</sub> = <big>&Sigma;</big>\n * ( <i>x</i><sub>i</sub><sup>2</sup> -\n * <i>N</i> ( <i>x</i><sub>i</sub> - <i>x</i><sub>avg</sub> )<sup>2</sup> )\n * </blockquote>\n *\n * <blockquote>\n * <i>s</i><sub>3</sub> = <big>&Sigma;</big>\n * ( <i>y</i><sub>i</sub><sup>2</sup> -\n * <i>N</i> ( <i>y</i><sub>i</sub> - <i>y</i><sub>avg</sub> )<sup>2</sup> )\n * </blockquote>\n *\n * <blockquote>\n * <i>r</i> = <i>s</i><sub>1</sub> / &radic;( <i>s</i><sub>2</sub> <i>s</i><sub>3</sub> )\n * </blockquote>\n *\n * <li>Compute the t-score:</li>\n *\n * <blockquote>\n * <i>t</i> = <i>r</i> &radic;( (<i>N</i> - 2) / (1 - <i>r</i><sup>2</sup>) )\n * </blockquote>\n *\n * </ol>\n *\n * <p>The work of computing the r-value is independent, and it turns\n * out users want that statistic, too, so that has been extracted into\n * the class RValue, which TScore now extends.</p>\n *\n * <p>This class is dedicated to poor Mr. Potter out in Van Nuys.</p>\n *\n * @author Ken Harris &lt;kbh7 <i style=\"color: gray\">at</i> cornell <i style=\"color: gray\">dot</i> edu&gt;\n * @version $Id: TScore.java,v 1.8 2006/02/24 20:51:34 lucasmo Exp $\n */\npublic class TScore extends RValue {\n\n    // don't use me\n    protected TScore() {\n    }\n\n    /**\n     *  Construct a new T-score from two samples.\n     * \t @param s1 the fixed sample\n     * \t @param s2 the moving sample\n     */\n    public TScore(Sample s1, Sample s2) {\n        super(s1, s2);\n    }\n\n    /**\n     *  Return a prettier name for this cross: \"T-Score\".\n     * \t @return the name of this cross, \"T-Score\"\n     */\n    public String getName() {\n        return I18n.getText(\"tscore\");\n    }\n\n    /**\n     *  A format string for T-scores.\n     * \t @return a format string for T-scores\n     */\n    public String getFormat() {\n        return App.prefs.getPref(\"corina.cross.tscore.format\", \"0.00\");\n    }\n\n    // for 99.5% confidence, from PIK's table (source?)\n    // \"statistics for archaeologists\" (DRENNAN) is off-by-a-column; is he wrong?\n    // though i can't find his source, \"contemporary statistical methods\" (KOOPMANS) to check.\n    // update: carol says it's probably one-sided versus two-sided (it's a symmetric\n    // distribution).  that seems fair.\n    private static float[] table = { 63.657f, 9.925f, 5.841f, 4.604f, 4.032f, 3.707f, 3.499f, 3.355f, 3.250f, 3.169f, 3.106f, 3.055f, 3.012f, 2.977f, 2.947f, 2.921f, 2.898f, 2.878f, 2.861f, 2.845f, 2.831f, 2.819f, 2.807f, 2.797f, 2.787f, 2.779f, 2.771f, 2.763f, 2.756f, 2.750f };\n\n    public boolean isSignificant(float score, int overlap) {\n        if (// it happens...\n        overlap == 0)\n            return false;\n        // 2.704 is for overlap=40; 60 is 2.660, inf=2.576\n        // WRITEME: so take care of those cases!\n        float threshold = ((overlap <= 30) ? table[overlap - 1] : 2.576f);\n        return (score >= threshold);\n    }\n\n    // OBSOLETE! -- but still used by CrossPrinter, CrossFrame\n    public float getMinimumSignificant() {\n        return 2.55f;\n    }\n\n    /**\n     * \t Given offsets into the fixed and moving data, compute a single\n     * \t T-score for that position.\n     *\n     * \t @return the T-score for this possible cross\n     */\n    public float compute(int offsetFixed, int offsetMoving) {\n        int overlap = Math.min(getFixed().data.size() - offsetFixed, getMoving().data.size() - offsetMoving);\n        // already know how to compute r\n        float r = super.compute(offsetFixed, offsetMoving);\n        // FIXME: get rid of cast!\n        // if r is negative, t is zero.\n        // (baillie & pilcher caught this earlier, at r's z3, but this\n        // way is more convenient for me, and gives the same result.)\n        if (r < 0)\n            return 0;\n        // t = r * sqrt(n-2)/sqrt(1-r^2)\n        float num = (float) Math.sqrt(overlap - 2);\n        float den = (float) Math.sqrt(1 - r * r);\n        float t = r * num / den;\n        // if overlap=1 or some other silliness, make it zero.\n        if (Float.isNaN(t))\n            t = 0;\n        return t;\n    }\n}\n",
		"id": "/EvoSuiteBenchmark/35_corina/src/main/java/corina/cross/TScore_1Test.java",
		"test_prompt": "// TScore_1Test.java\n// This file is part of Corina.\n//\n// Corina is free software; you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation; either version 2 of the License, or\n// (at your option) any later version.\n//\n// Corina is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Corina; if not, write to the Free Software\n// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n//\n// Copyright 2001 Ken Harris <kbh7@cornell.edu>\n//\npackage corina.cross;\n\nimport corina.Sample;\nimport corina.core.App;\nimport corina.ui.I18n;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link TScore}.\n* It contains ten unit test cases for the {@link TScore#compute(int, int)} method.\n*/\nclass TScore_1Test {"
	},
	{
		"original_code": "// Grid.java\n//\n// This file is part of Corina.\n//\n// Corina is free software; you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation; either version 2 of the License, or\n// (at your option) any later version.\n//\n// Corina is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Corina; if not, write to the Free Software\n// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n//\n// Copyright 2001 Ken Harris <kbh7@cornell.edu>\n//\npackage corina.cross;\n\nimport java.awt.BasicStroke;\nimport java.awt.Color;\nimport java.awt.Font;\nimport java.awt.Graphics;\nimport java.awt.Shape;\nimport java.awt.Graphics2D;\nimport java.awt.print.PageFormat;\nimport java.awt.print.Pageable;\nimport java.awt.print.Printable;\nimport java.awt.print.PrinterException;\nimport java.io.BufferedWriter;\nimport java.io.File;\nimport java.io.FileNotFoundException;\nimport java.io.FileReader;\nimport java.io.FileWriter;\nimport java.io.IOException;\nimport java.util.ArrayList;\nimport java.util.List;\nimport org.xml.sax.Attributes;\nimport org.xml.sax.InputSource;\nimport org.xml.sax.SAXException;\nimport org.xml.sax.XMLReader;\nimport org.xml.sax.helpers.DefaultHandler;\nimport org.xml.sax.helpers.XMLReaderFactory;\nimport corina.Element;\nimport corina.Preview;\nimport corina.Previewable;\nimport corina.Range;\nimport corina.Sample;\nimport corina.core.App;\nimport corina.formats.WrongFiletypeException;\nimport corina.logging.CorinaLog;\nimport corina.prefs.Prefs;\nimport corina.ui.I18n;\nimport javax.swing.JLabel;\n\n/**\n *    A crossdating grid.\n *\n *    <p>All of the samples are listed down the left side, and also\n *    across the top.  If you go right from a sample on the left, and\n *    down from a different sample no the top, the cell where they meet\n *    contains their crossdate (t, trend, d, overlap).  If you trace\n *    right from a sample, and down from the same sample, that cell (on\n *    the diagonal) has the length of the sample, by convention.</p>\n *\n *    <p>A Grid might look similar to this when printed:</p>\n *\n * <blockquote class=\"paper\">\n *\n *    <table border=\"1\" cellspacing=\"0\">\n *\n * \t<tr>\n * \t  <td> &nbsp; <br> &nbsp; <br> &nbsp; <br> &nbsp; </td>\n * \t  <td>SPI2A.IND     </td>\n * \t  <td> &nbsp; <br> &nbsp; <br> &nbsp; <br> &nbsp; </td>\n * \t  <td> &nbsp; <br> &nbsp; <br> &nbsp; <br> &nbsp; </td>\n * \t</tr>\n *\n * \t<tr>\n * \t  <td>SPI2A.IND </td>\n * \t  <td>n=54            </td>\n * \t  <td>SPI3A.IND </td>\n * \t  <td> &nbsp; <br> &nbsp; <br> &nbsp; <br> &nbsp; </td>\n * \t</tr>\n *\n * \t<tr>\n * \t  <td>SPI3A.IND       </td>\n * \t  <td>t=0.00 <br> tr=47.2% <br> d=0.00 <br> n=54 </td>\n * \t  <td>       n=170 </td>\n * \t  <td>SPI4A.IND </td>\n * \t</tr>\n *\n * \t<tr>\n * \t  <td>SPI4A.IND </td>\n * \t  <td>t=0.22 <br> tr=67.2% <br> d=0.03 <br> n=52 </td>\n * \t  <td>t=1.63 <br> tr=55.6% <br> d=0.09 <br> n=55 </td>\n * \t  <td>n=55     </td>\n * \t</tr>\n *\n *    </table>\n *\n * </blockquote>\n *\n *    <h2>Left to do</h2>\n *    <ul>\n *      <li>clean up this class: many many lines are longer than 80 characters\n *      <li>font handling code is sometimes inefficient (lots of \"new Font(...)\")\n *      <li>font handling code is sometimes incorrect (nudge factors\n *          instead of measuring ascents)\n *    </ul>\n *\n *    @author Ken Harris &lt;kbh7 <i style=\"color: gray\">at</i> cornell <i style=\"color: gray\">dot</i> edu&gt;\n *    @version $Id: Grid.java,v 1.15 2006/04/25 21:39:54 lucasmo Exp $\n */\npublic class Grid implements Runnable, Previewable {\n\n    private static final CorinaLog log = new CorinaLog(Grid.class);\n\n    // inputs\n    private List files;\n\n    // number of active files\n    private int num;\n\n    // outputs\n    private Cell[][] cell;\n\n    private Exception error = null;\n\n    // (used when creating graph of these samples)\n    public List getFiles() {\n        return files;\n    }\n\n    // ----------------------------------------\n    public interface Cell {\n\n        public abstract void print(Graphics2D g2, int x, int y, int width, int height, float scale);\n\n        public abstract String toXML();\n    }\n\n    public static class EmptyCell implements Cell {\n\n        public void print(Graphics2D g2, int x, int y, int width, int height, float scale) {\n            // do nothing\n        }\n\n        public String toXML() {\n            return \"<empty/>\";\n        }\n    }\n\n    public class HeaderCell implements Cell {\n\n        protected String name;\n\n        public HeaderCell(String name) {\n            // crop directory\n            int index = name.lastIndexOf(File.separatorChar);\n            this.name = name.substring(index + 1);\n        }\n\n        // awful hack to allow us to use popup menus referencing this cell...\n        Sample fixed;\n\n        public Sample getFixed() {\n            return fixed;\n        }\n\n        public HeaderCell(Sample fixed) {\n            String name = (String) fixed.meta.get(\"filename\");\n            // crop directory\n            int index = name.lastIndexOf(File.separatorChar);\n            this.name = name.substring(index + 1);\n            this.fixed = fixed;\n        }\n\n        public void print(Graphics2D g2, int x, int y, int width, int height, float scale) {\n            // clip this cell\n            g2.setClip(x, y, width, height);\n            // filename\n            g2.drawString(name, x + EPS, y + (int) ((getCellHeight() / 2 - getLineHeight() / 2) * scale));\n        }\n\n        public String toXML() {\n            return \"<header name=\\\"\" + name + \"\\\"/>\";\n        }\n    }\n\n    public class HeaderRangeCell extends HeaderCell {\n\n        private Range range;\n\n        public HeaderRangeCell(String name, Range range) {\n            super(name);\n            this.range = range;\n        }\n\n        public HeaderRangeCell(Sample fixed) {\n            super(fixed);\n            this.range = fixed.range;\n        }\n\n        public void print(Graphics2D g2, int x, int y, int width, int height, float scale) {\n            // clip this cell\n            g2.setClip(x, y, width, height);\n            // filename\n            g2.drawString(name, x + EPS, y + (int) ((getCellHeight() / 2) * scale));\n            // range\n            g2.drawString(range.toString(), x + EPS, y + (int) ((getCellHeight() / 2 + getLineHeight()) * scale));\n        }\n\n        public String toXML() {\n            return \"<header name=\\\"\" + name + \"\\\" range=\\\"\" + range + \"\\\"/>\";\n        }\n    }\n\n    // (when that's done, t/tr/d can be unified between sequence and onecross)\n    // hey, cross.single() only makes sense in the context of a onecross, right?  score!\n    public static class CrossCell extends Single implements Cell {\n\n        Sample fixed, moving;\n\n        public CrossCell(Sample fixed, Sample moving) {\n            super(fixed, moving);\n            this.fixed = fixed;\n            this.moving = moving;\n        }\n\n        // awful hack to allow us to use popup menus referencing this cell...\n        public Sample getFixed() {\n            return fixed;\n        }\n\n        public Sample getMoving() {\n            return moving;\n        }\n\n        public CrossCell(float t, float tr, float d, float r, int n) {\n            // (this is only used for xml loading now -- ok?)\n            super(t, tr, d, r, n);\n        }\n\n        public void print(Graphics2D g2, int x, int y, int width, int height, float scale) {\n            // fill with highlight -- would the user ever NOT want this?  well, yes, possibly.\n            if (Boolean.valueOf(App.prefs.getPref(Prefs.GRID_HIGHLIGHT)).booleanValue() && isSignificant()) {\n                Color oldColor = g2.getColor();\n                g2.setColor(App.prefs.getColorPref(Prefs.GRID_HIGHLIGHTCOLOR, Color.green));\n                g2.fillRect(x, y, (int) (getCellWidth() * scale), (int) (getCellHeight() * scale));\n                g2.setColor(oldColor);\n            }\n            // box\n            g2.drawRect(x, y, (int) (getCellWidth() * scale), (int) (getCellHeight() * scale));\n            // little/no overlap: just show the overlap\n            if (n < 10) {\n                // Cross.getMinimumOverlap()) {\n                g2.drawString(\"n=\" + n, x + EPS, y + (int) ((getCellHeight() / 2 - getLineHeight() / 2) * scale));\n                return;\n            }\n            // cross\n            // REFACTOR: {\"t=\" + blah.format(t)} should be simply Score.toString()?\n            // TODO: need Cross.getShortName() (tscore -> \"t\") method\n            g2.drawString(\"t=\" + formatT() + \", r=\" + formatR(), x + EPS, y + (int) (getLineHeight() * scale) - EPS);\n            g2.drawString(\"tr=\" + formatTrend(), x + EPS, y + (int) (2 * getLineHeight() * scale) - EPS);\n            g2.drawString(\"D=\" + formatD(), x + EPS, y + (int) (3 * getLineHeight() * scale) - EPS);\n            g2.drawString(\"n=\" + String.valueOf(n), x + EPS, y + (int) (4 * getLineHeight() * scale) - EPS);\n        }\n        // in toXML, store full precision, with no %'s -- this means\n        // later we won't have too few digits, if the user decides she\n        // wants more, and we won't have to worry about parsing it\n        // incorrectly with NumberFormat.parse().  the users never\n        // need to look at a *.grid file, either, so they won't care.\n        // (...later: *.cross? *.xdate? *.xd?  i like *.xdate)\n        // err... cross already has this?\n    }\n\n    public static class LengthCell implements Cell {\n\n        private int length;\n\n        LengthCell(int length) {\n            this.length = length;\n        }\n\n        public void print(Graphics2D g2, int x, int y, int width, int height, float scale) {\n            // box? -- no box for you!  (the box nazi, of course.)\n            // length\n            g2.drawString(\"n=\" + length, x + EPS, y + (int) ((getCellHeight() / 2 - getLineHeight() / 2) * scale));\n        }\n\n        public String toXML() {\n            return \"<length n=\\\"\" + length + \"\\\"/>\";\n        }\n    }\n\n    // ----------------------------------------\n    // cell factory -- given XML tag name and attributes\n    private Cell makeCell(String name, Attributes atts) {\n        // can't be static: cells aren't static\n        if (name.equals(\"header\")) {\n            // check for range=\"a-b\"\n            String r = atts.getValue(\"range\");\n            if (r != null)\n                return new HeaderRangeCell(atts.getValue(\"name\"), new Range(r));\n            else\n                return new HeaderCell(atts.getValue(\"name\"));\n        } else if (name.equals(\"length\")) {\n            return new LengthCell(Integer.parseInt(atts.getValue(\"n\")));\n        } else if (name.equals(\"cross\")) {\n            return new CrossCell(Float.parseFloat(atts.getValue(\"t\")), Float.parseFloat(atts.getValue(\"tr\")), Float.parseFloat(atts.getValue(\"d\")), Float.parseFloat(atts.getValue(\"r\")), // exception?\n            Integer.parseInt(atts.getValue(\"n\")));\n        } else {\n            throw new IllegalArgumentException();\n        }\n    }\n\n    // ----------------------------------------\n    // print one page of a grid\n    private static class GridPage implements Printable {\n\n        private Grid grid;\n\n        private int startRow, endRow, startCol, endCol;\n\n        public GridPage(Grid grid, int startRow, int endRow, int startCol, int endCol) {\n            this.grid = grid;\n            this.startRow = startRow;\n            this.endRow = endRow;\n            this.startCol = startCol;\n            this.endCol = endCol;\n        }\n\n        public int print(Graphics g, PageFormat pf, int pageNr) throws PrinterException {\n            // WAS: if (pageNr != 0) return NO_SUCH_PAGE;\n            // no, pageNr is 1 for the second page!  (did the docs say it would?)\n            // now: ignore pageNr here\n            Graphics2D g2 = (Graphics2D) g;\n            g2.setColor(Color.black);\n            // what's a good thickness?\n            g2.setStroke(new BasicStroke(0.1f));\n            // set font (for all cells)\n            // FIXME: use Prefs\n            if (App.prefs.getPref(\"corina.grid.font\") != null)\n                g2.setFont(Font.decode(App.prefs.getPref(\"corina.grid.font\")));\n            // figure out stop row, col: end of page, or end of grid,\n            // whichever comes first\n            int stopRow = Math.min(endRow, grid.cell.length - 1);\n            int stopCol = Math.min(endCol, grid.cell[0].length - 1);\n            // print each one\n            for (int x = startCol; x <= stopCol; x++) {\n                for (int y = startRow; y <= stopRow; y++) {\n                    Cell c = grid.cell[y][x];\n                    Shape oldclip = g2.getClip();\n                    c.print(g2, ((int) pf.getImageableX()) + (x - startCol) * getCellWidth(), ((int) pf.getImageableY()) + (y - startRow) * getCellHeight(), getCellWidth(), getCellHeight(), // always print to paper with scale=1.0\n                    1.0f);\n                    // remove any clipping set by the cell...\n                    g2.setClip(oldclip);\n                }\n            }\n            return PAGE_EXISTS;\n        }\n    }\n\n    // ----------------------------------------\n    // print all pages of a grid (using GridPage)\n    private static class GridPrinter implements Pageable {\n\n        private Grid grid;\n\n        private int size;\n\n        private int rowsPerPage, colsPerPage, pagesWide, pagesTall, numPages;\n\n        private PageFormat pf;\n\n        public GridPrinter(Grid grid, PageFormat pf) {\n            this.grid = grid;\n            // size() is #samples; +1 for headers\n            this.size = grid.size() + 1;\n            this.pf = pf;\n            // examine the size of the page\n            rowsPerPage = ((int) pf.getImageableHeight()) / getCellHeight();\n            colsPerPage = ((int) pf.getImageableWidth()) / getCellWidth();\n            // pagesWide = cols / colsPerPage\n            pagesWide = (int) Math.ceil((float) size / colsPerPage);\n            // pagesTall = rows / rowsPerPage\n            pagesTall = (int) Math.ceil((float) size / rowsPerPage);\n            numPages = pagesWide * pagesTall;\n        }\n\n        public int getNumberOfPages() {\n            return numPages;\n        }\n\n        public PageFormat getPageFormat(int pageIndex) throws IndexOutOfBoundsException {\n            return pf;\n        }\n\n        public Printable getPrintable(int pageIndex) throws IndexOutOfBoundsException {\n            // is this right?  strange...\n            if (pageIndex >= numPages)\n                throw new IndexOutOfBoundsException();\n            int x = pageIndex % pagesWide;\n            int y = pageIndex / pagesWide;\n            return new GridPage(grid, y * rowsPerPage, y * rowsPerPage + rowsPerPage - 1, x * colsPerPage, x * colsPerPage + colsPerPage - 1);\n        }\n    }\n\n    // ----------------------------------------\n    // external print interface\n    public Pageable makeHardcopy(PageFormat pf) {\n        return new GridPrinter(this, pf);\n    }\n\n    /**\n     * \t Construct a Grid from a List of Elements.  Elements with\n     * \t <code>active=false</code> are ignored.\n     *\n     * \t @param elements the List of Elements to use\n     */\n    public Grid(List elements) {\n        // copy set\n        files = elements;\n        // number of active samples in the grid\n        // (count-if files #'active)\n        num = 0;\n        for (int i = 0; i < files.size(); i++) if (((Element) files.get(i)).active)\n            num++;\n        // create outputs\n        cell = new Cell[num + 1][num + 1];\n    }\n\n    /**\n     * \t Construct a Grid from an existing file.  Cells are loaded from\n     * \t the previously-calculated values; the user must \"refresh\" the\n     * \t display (<code>run()</code>) to update these values.\n     *\n     * \t @param filename the file to load\n     * \t @exception WrongFiletypeException if this file isn't a Grid\n     * \t @exception FileNotFoundException if the file can't be found\n     * \t @exception IOException if a low-level I/O exception occurs\n     */\n    public Grid(String filename) throws WrongFiletypeException, FileNotFoundException, IOException {\n        // load the file\n        load(filename);\n    }\n\n    public Grid(Sequence seq) {\n        // what to do?\n        // copy elements (use seq.getAllFixed(), seq.getAllMoving() -- which are the same here?)\n        // -- assume seq.getallfixed==seq.getallmoving\n        // NO, DON'T!\n        // the right way: add all-fixed, then add all-moving, but with no duplicates (quickly!)\n        files = new ArrayList();\n        // add all fixed\n        List fixed = seq.getAllFixed();\n        for (int i = 0; i < fixed.size(); i++) files.add(new Element((String) fixed.get(i)));\n        // add all (non-duplicate) moving\n        List moving = seq.getAllMoving();\n        for (int i = 0; i < moving.size(); i++) if (!fixed.contains(moving.get(i)))\n            files.add(new Element((String) moving.get(i)));\n        // create cell array\n        num = files.size();\n        cell = new Cell[num + 1][num + 1];\n        // (later?) run crosses\n        run();\n    }\n\n    /**\n     * \t The number of samples in this Grid.  Add one to this value to\n     * \t get the number of cells high or wide the grid is.\n     *\n     * \t @return the number of samples in this Grid\n     */\n    public int size() {\n        return num;\n    }\n\n    /**\n     * \t Get a Cell from the grid.\n     *\n     * \t @param row the row\n     * \t @param column the column\n     * \t @return the cell at (row, column)\n     */\n    public Cell getCell(int row, int column) {\n        // (cells are immutable, so this is safe.)\n        return cell[row][column];\n    }\n\n    /**\n     * Compute the cells of this grid.\n     */\n    public void run() {\n        // step 1: load all samples into a buffer.  for reference, on\n        // a P3/1000, 256MB, over a 10b2 network (limiting factor?),\n        // Win2000, Sun JDK1.3, computing a full grid from PIK's '96\n        // Gordion chronology (188 elements) used to take 2min 10sec,\n        // but with this buffer takes only 5 seconds.  moral: I/O is\n        // really slow, and memory is cheap, so use it!\n        AvgSingle averages = new AvgSingle();\n        Sample[] buffer = new Sample[num];\n        int read = 0;\n        for (int i = 0; i < files.size(); i++) {\n            // get an element\n            Element e = (Element) files.get(i);\n            // ABSTRACTION: i'd sure like to grab an enumeration of\n            // active elements (well, sort of).  what i really want is\n            // a filter.  i'll get rid of the active flag someday, but\n            // in the meantime, it'd be useful to have\n            //    public static List Element.activeOnly(List)\n            // skip inactive elements\n            if (!e.isActive())\n                continue;\n            // it's active: try to load\n            try {\n                buffer[read] = e.load();\n                read++;\n            } catch (IOException ioe) {\n                // ArrayIndexOutOfBoundsException on the next line, on\n                // right-click-\"grid from all\" with no loadable\n                // samples.\n                // can be null!  doesn't handle below!\n                buffer[read] = null;\n                read++;\n                error = ioe;\n                continue;\n            }\n        }\n        // step 2: compute crosses.  buffer now holds only active\n        // elements, so we can just run 0..num-1.  (the array |cell|\n        // was created in the constructor)\n        for (int row = 0; row < num; row++) {\n            // \"load\" fixed\n            Sample fixed = buffer[row];\n            // ignore nulls here -- kind of a hack\n            if (fixed == null || fixed.meta.get(\"filename\") == null)\n                continue;\n            // set headers -- if you want straight-across headers (as\n            // opposed to down-the-diagonal headers),\n            // s/[row][row+1]/[0][row+1]/\n            String filename = (String) fixed.meta.get(\"filename\");\n            cell[row + 1][0] = new HeaderCell(fixed);\n            cell[row][row + 1] = new HeaderRangeCell(fixed);\n            // set length\n            cell[row + 1][row + 1] = new LengthCell(fixed.data.size());\n            for (int col = 0; col < row; col++) {\n                // \"load\" moving\n                Sample moving = buffer[col];\n                // ignore nulls here -- kind of a hack\n                if (moving == null || moving.meta.get(\"filename\") == null)\n                    continue;\n                // run the single cross, and put it in the grid\n                Cell crosscell = new CrossCell(fixed, moving);\n                cell[row + 1][col + 1] = crosscell;\n                averages.addSingle((Single) crosscell);\n            }\n        }\n        averages.calculateAverages();\n        // place the \"averages\" at the first free column on row #2...\n        for (int col = 0; col < num + 1; col++) {\n            if (cell[1][col] == null) {\n                cell[1][col] = averages;\n                break;\n            }\n        }\n        // step 3: set all unused grid cells to EmptyCell.  i'm lazy\n        // -- let's just look for null cells.  (i really should know a\n        // priori what cells will be null here, but after loading /n/\n        // samples from disk, looking for nulls is really fast.)\n        // lots of these: FLYWEIGHT!\n        EmptyCell e = new EmptyCell();\n        for (int row = 0; row < num + 1; row++) for (int col = 0; col < num + 1; col++) if (cell[row][col] == null)\n            cell[row][col] = e;\n        // contents of buffer can now be GC'd.  whew.\n    }\n\n    /**\n     * \t Get the error that occurred while computing the grid.  The\n     * \t run() method in Runnable can't throw any exceptions, so we just\n     * \t store them here for later use.\n     *\n     * \t @return an Exception, if one occurred, else null\n     */\n    public Exception getError() {\n        return error;\n    }\n\n    // NOTE: the following methods should NOT be made into constants, and\n    // the property lookups should NOT be cached.  the user MUST be\n    // able to change these without creating a new Grid.\n    public static int getCellWidth() {\n        // cell width = 140% of cell height\n        return (int) (getCellHeight() * 1.4);\n    }\n\n    public static int getCellHeight() {\n        // make it big enough for 4 lines of text\n        // height of a line of text\n        int h;\n        // font to use\n        Font myFont = App.prefs.getFontPref(\"corina.grid.font\", new Font(\"sansserif\", Font.PLAIN, 12));\n        // erp ... this calls new font() for the second arg even when it's not needed (!)\n        // i don't think this is quite kosher...  (uh, nope.  fixme.\n        // look at its ascent.)\n        h = myFont.getSize();\n        return 4 * (h + 2 * EPS);\n    }\n\n    private static int getLineHeight() {\n        return getCellHeight() / 4;\n    }\n\n    // a wee bit: 2 points (pixels)\n    private static final int EPS = 2;\n\n    /**\n     * \t A short preview for file dialogs.  Displays \"Crossdating Grid\",\n     * \t and lists the first few elements.\n     *\n     * \t @return a preview component for this grid\n     */\n    public Preview getPreview() {\n        return new GridPreview(this);\n    }\n\n    // a preview for grids\n    private static class GridPreview extends Preview {\n\n        GridPreview(Grid g) {\n            title = I18n.getText(\"crossdating_grid\");\n            items = new ArrayList();\n            items.add(\"(\" + g.files.size() + \" \" + I18n.getText(\"total\") + \")\");\n            // up to 5\n            for (int i = 0; i < g.files.size(); i++) {\n                if (i == 4 && g.files.size() > 5) {\n                    items.add(\"...\");\n                    break;\n                }\n                String filename = ((Element) g.files.get(i)).getFilename();\n                items.add(new File(filename).getName());\n            }\n        }\n    }\n\n    /**\n     * A SAX2 handler for loading saved grid files.\n     */\n    private class GridHandler extends DefaultHandler {\n\n        private boolean readAnything = false;\n\n        // current row and column\n        private int row = 0, col = 0;\n\n        // flyweight for empty cells\n        private EmptyCell e = new EmptyCell();\n\n        public void startElement(String uri, String name, String qName, Attributes atts) throws SAXException {\n            System.out.println(\"startElement\");\n            // something has been read!  make sure it's a grid\n            if (!readAnything) {\n                if (name.equals(\"grid\")) {\n                    readAnything = true;\n                    return;\n                }\n                // else\n                throw new SAXException(\"Not a grid!\");\n                // can't i do better?  wfte?\n            }\n            // if starting inputs, create list for files\n            if (name.equals(\"input\")) {\n                files = new ArrayList();\n                return;\n            }\n            // if a sample (input section), add to list\n            if (name.equals(\"sample\")) {\n                // --> doesn't care about inactive files?\n                files.add(new Element(atts.getValue(\"filename\")));\n                return;\n            }\n            // if starting outputs, create array for cells\n            if (name.equals(\"output\")) {\n                cell = new Cell[num + 1][num + 1];\n                return;\n            }\n            // if an empty cell, use flyweight\n            if (name.equals(\"empty\")) {\n                cell[row][col] = e;\n                return;\n            }\n            try {\n                Cell c = makeCell(name, atts);\n                cell[row][col] = c;\n            } catch (IllegalArgumentException iae) {\n                // ignore -- FIXME: this is just plain awkward\n            }\n        }\n\n        public void endElement(String uri, String name, String qName) {\n            System.out.println(\"endElement\");\n            // if ending input section, compute num\n            if (name.equals(\"input\")) {\n                num = files.size();\n                return;\n            }\n            // if ending a cell, increment row\n            // ABSTRACTION: isCellName() -- can be used to avoid IAE's above, and here.\n            if (name.equals(\"empty\") || name.equals(\"header\") || name.equals(\"length\") || name.equals(\"cross\")) {\n                col++;\n                return;\n            }\n            // if ending a row, reset col=0, and increment row\n            if (name.equals(\"row\")) {\n                col = 0;\n                row++;\n                return;\n            }\n        }\n    }\n\n    /**\n     * \t Load a grid, saved in XML format.\n     *\n     * \t @param filename the target to load\n     * \t @exception WrongFiletypeException if this file isn't a Grid\n     * \t @exception FileNotFoundException if there is no file by this name\n     * \t @exception IOException if an I/O exception occurs while trying\n     * \t to load\n     */\n    public void load(String filename) throws WrongFiletypeException, FileNotFoundException, IOException {\n        try {\n            // make a new XML parser\n            XMLReader xr = XMLReaderFactory.createXMLReader();\n            // ... configure it to use a my SampleHandler ...\n            GridHandler loader = new GridHandler();\n            xr.setContentHandler(loader);\n            xr.setErrorHandler(loader);\n            // ... and feed it the file\n            System.out.println(\"reading \" + filename + \" as xml\");\n            FileReader r = new FileReader(filename);\n            xr.parse(new InputSource(r));\n            System.out.println(\"done parsing\");\n        } catch (SAXException se) {\n            // no! we don't need to see this garbage!\n            //se.printStackTrace();\n            throw new WrongFiletypeException();\n        }\n    }\n\n    /**\n     * \t Save this grid in XML format.\n     *\n     * \t @param filename the target to save to\n     * \t @exception IOException if an I/O exception occurs while trying to save\n     */\n    public void save(String filename) throws IOException {\n        // open, and write header\n        BufferedWriter w = new BufferedWriter(new FileWriter(filename));\n        try {\n            // can/should i make the encoding explicit here?\n            w.write(\"<?xml version=\\\"1.0\\\"?>\\n\");\n            w.write(\"\\n\");\n            w.write(\"<grid>\\n\");\n            w.write(\"\\n\");\n            // input: filenames\n            w.write(\"  <input>\\n\");\n            for (int i = 0; i < files.size(); i++) {\n                w.write(\"    <sample filename=\\\"\" + files.get(i) + \"\\\"/>\\n\");\n            }\n            w.write(\"  </input>\\n\");\n            w.write(\"\\n\");\n            // output: cells\n            w.write(\"  <output>\\n\");\n            for (int r = 0; r < cell.length; r++) {\n                w.write(\"    <row>\\n\");\n                for (int c = 0; c < cell[r].length; c++) w.write(\"      \" + cell[r][c].toXML() + \"\\n\");\n                w.write(\"    </row>\\n\");\n            }\n            w.write(\"  </output>\\n\");\n            w.write(\"\\n\");\n            // end, and close\n            w.write(\"</grid>\\n\");\n        } finally {\n            try {\n                w.close();\n            } catch (IOException ioe) {\n                log.error(\"Error closing writer\", ioe);\n            }\n        }\n    }\n\n    // this class is used for making our average cell...\n    private class AvgSingle extends Single implements Cell {\n\n        private int numCrosses;\n\n        private float cumt, cumtr, cumd, cumr;\n\n        public AvgSingle() {\n            super();\n            numCrosses = 0;\n            cumt = cumtr = cumd = cumr = 0.0f;\n        }\n\n        public void addSingle(Single cross) {\n            // not signifigant, ignore it...\n            if (cross.n < 10)\n                return;\n            cumt += cross.t;\n            cumtr += cross.tr;\n            cumd += cross.d;\n            cumr += cross.r;\n            numCrosses++;\n        }\n\n        public void calculateAverages() {\n            t = cumt / numCrosses;\n            tr = cumtr / numCrosses;\n            d = cumd / numCrosses;\n            r = cumr / numCrosses;\n        }\n\n        public void print(Graphics2D g2, int x, int y, int width, int height, float scale) {\n            // fill with highlight -- would the user ever NOT want this?  well, yes, possibly.\n            // box\n            g2.drawRect(x, y, (int) (getCellWidth() * scale), (int) (getCellHeight() * scale));\n            g2.drawString(\"t=\" + formatT() + \", r=\" + formatR(), x + EPS, y + (int) (2 * getLineHeight() * scale) - EPS);\n            g2.drawString(\"tr=\" + formatTrend(), x + EPS, y + (int) (3 * getLineHeight() * scale) - EPS);\n            g2.drawString(\"D=\" + formatD(), x + EPS, y + (int) (4 * getLineHeight() * scale) - EPS);\n            g2.drawString(\"Averages n>=10\", x + EPS, y + (int) (1 * getLineHeight() * scale) - EPS);\n        }\n    }\n}\n",
		"id": "/EvoSuiteBenchmark/35_corina/src/main/java/corina/cross/Grid_0Test.java",
		"test_prompt": "// Grid_0Test.java\n// This file is part of Corina.\n//\n// Corina is free software; you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation; either version 2 of the License, or\n// (at your option) any later version.\n//\n// Corina is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Corina; if not, write to the Free Software\n// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n//\n// Copyright 2001 Ken Harris <kbh7@cornell.edu>\n//\npackage corina.cross;\n\nimport java.awt.BasicStroke;\nimport java.awt.Color;\nimport java.awt.Font;\nimport java.awt.Graphics;\nimport java.awt.Shape;\nimport java.awt.Graphics2D;\nimport java.awt.print.PageFormat;\nimport java.awt.print.Pageable;\nimport java.awt.print.Printable;\nimport java.awt.print.PrinterException;\nimport java.io.BufferedWriter;\nimport java.io.File;\nimport java.io.FileNotFoundException;\nimport java.io.FileReader;\nimport java.io.FileWriter;\nimport java.io.IOException;\nimport java.util.ArrayList;\nimport java.util.List;\nimport org.xml.sax.Attributes;\nimport org.xml.sax.InputSource;\nimport org.xml.sax.SAXException;\nimport org.xml.sax.XMLReader;\nimport org.xml.sax.helpers.DefaultHandler;\nimport org.xml.sax.helpers.XMLReaderFactory;\nimport corina.Element;\nimport corina.Preview;\nimport corina.Previewable;\nimport corina.Range;\nimport corina.Sample;\nimport corina.core.App;\nimport corina.formats.WrongFiletypeException;\nimport corina.logging.CorinaLog;\nimport corina.prefs.Prefs;\nimport corina.ui.I18n;\nimport javax.swing.JLabel;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link Grid}.\n* It contains ten unit test cases for the {@link Grid#makeHardcopy(PageFormat)} method.\n*/\nclass Grid_0Test {"
	},
	{
		"original_code": "// Grid.java\n//\n// This file is part of Corina.\n//\n// Corina is free software; you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation; either version 2 of the License, or\n// (at your option) any later version.\n//\n// Corina is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Corina; if not, write to the Free Software\n// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n//\n// Copyright 2001 Ken Harris <kbh7@cornell.edu>\n//\npackage corina.cross;\n\nimport java.awt.BasicStroke;\nimport java.awt.Color;\nimport java.awt.Font;\nimport java.awt.Graphics;\nimport java.awt.Shape;\nimport java.awt.Graphics2D;\nimport java.awt.print.PageFormat;\nimport java.awt.print.Pageable;\nimport java.awt.print.Printable;\nimport java.awt.print.PrinterException;\nimport java.io.BufferedWriter;\nimport java.io.File;\nimport java.io.FileNotFoundException;\nimport java.io.FileReader;\nimport java.io.FileWriter;\nimport java.io.IOException;\nimport java.util.ArrayList;\nimport java.util.List;\nimport org.xml.sax.Attributes;\nimport org.xml.sax.InputSource;\nimport org.xml.sax.SAXException;\nimport org.xml.sax.XMLReader;\nimport org.xml.sax.helpers.DefaultHandler;\nimport org.xml.sax.helpers.XMLReaderFactory;\nimport corina.Element;\nimport corina.Preview;\nimport corina.Previewable;\nimport corina.Range;\nimport corina.Sample;\nimport corina.core.App;\nimport corina.formats.WrongFiletypeException;\nimport corina.logging.CorinaLog;\nimport corina.prefs.Prefs;\nimport corina.ui.I18n;\nimport javax.swing.JLabel;\n\n/**\n *    A crossdating grid.\n *\n *    <p>All of the samples are listed down the left side, and also\n *    across the top.  If you go right from a sample on the left, and\n *    down from a different sample no the top, the cell where they meet\n *    contains their crossdate (t, trend, d, overlap).  If you trace\n *    right from a sample, and down from the same sample, that cell (on\n *    the diagonal) has the length of the sample, by convention.</p>\n *\n *    <p>A Grid might look similar to this when printed:</p>\n *\n * <blockquote class=\"paper\">\n *\n *    <table border=\"1\" cellspacing=\"0\">\n *\n * \t<tr>\n * \t  <td> &nbsp; <br> &nbsp; <br> &nbsp; <br> &nbsp; </td>\n * \t  <td>SPI2A.IND     </td>\n * \t  <td> &nbsp; <br> &nbsp; <br> &nbsp; <br> &nbsp; </td>\n * \t  <td> &nbsp; <br> &nbsp; <br> &nbsp; <br> &nbsp; </td>\n * \t</tr>\n *\n * \t<tr>\n * \t  <td>SPI2A.IND </td>\n * \t  <td>n=54            </td>\n * \t  <td>SPI3A.IND </td>\n * \t  <td> &nbsp; <br> &nbsp; <br> &nbsp; <br> &nbsp; </td>\n * \t</tr>\n *\n * \t<tr>\n * \t  <td>SPI3A.IND       </td>\n * \t  <td>t=0.00 <br> tr=47.2% <br> d=0.00 <br> n=54 </td>\n * \t  <td>       n=170 </td>\n * \t  <td>SPI4A.IND </td>\n * \t</tr>\n *\n * \t<tr>\n * \t  <td>SPI4A.IND </td>\n * \t  <td>t=0.22 <br> tr=67.2% <br> d=0.03 <br> n=52 </td>\n * \t  <td>t=1.63 <br> tr=55.6% <br> d=0.09 <br> n=55 </td>\n * \t  <td>n=55     </td>\n * \t</tr>\n *\n *    </table>\n *\n * </blockquote>\n *\n *    <h2>Left to do</h2>\n *    <ul>\n *      <li>clean up this class: many many lines are longer than 80 characters\n *      <li>font handling code is sometimes inefficient (lots of \"new Font(...)\")\n *      <li>font handling code is sometimes incorrect (nudge factors\n *          instead of measuring ascents)\n *    </ul>\n *\n *    @author Ken Harris &lt;kbh7 <i style=\"color: gray\">at</i> cornell <i style=\"color: gray\">dot</i> edu&gt;\n *    @version $Id: Grid.java,v 1.15 2006/04/25 21:39:54 lucasmo Exp $\n */\npublic class Grid implements Runnable, Previewable {\n\n    private static final CorinaLog log = new CorinaLog(Grid.class);\n\n    // inputs\n    private List files;\n\n    // number of active files\n    private int num;\n\n    // outputs\n    private Cell[][] cell;\n\n    private Exception error = null;\n\n    // (used when creating graph of these samples)\n    public List getFiles() {\n        return files;\n    }\n\n    // ----------------------------------------\n    public interface Cell {\n\n        public abstract void print(Graphics2D g2, int x, int y, int width, int height, float scale);\n\n        public abstract String toXML();\n    }\n\n    public static class EmptyCell implements Cell {\n\n        public void print(Graphics2D g2, int x, int y, int width, int height, float scale) {\n            // do nothing\n        }\n\n        public String toXML() {\n            return \"<empty/>\";\n        }\n    }\n\n    public class HeaderCell implements Cell {\n\n        protected String name;\n\n        public HeaderCell(String name) {\n            // crop directory\n            int index = name.lastIndexOf(File.separatorChar);\n            this.name = name.substring(index + 1);\n        }\n\n        // awful hack to allow us to use popup menus referencing this cell...\n        Sample fixed;\n\n        public Sample getFixed() {\n            return fixed;\n        }\n\n        public HeaderCell(Sample fixed) {\n            String name = (String) fixed.meta.get(\"filename\");\n            // crop directory\n            int index = name.lastIndexOf(File.separatorChar);\n            this.name = name.substring(index + 1);\n            this.fixed = fixed;\n        }\n\n        public void print(Graphics2D g2, int x, int y, int width, int height, float scale) {\n            // clip this cell\n            g2.setClip(x, y, width, height);\n            // filename\n            g2.drawString(name, x + EPS, y + (int) ((getCellHeight() / 2 - getLineHeight() / 2) * scale));\n        }\n\n        public String toXML() {\n            return \"<header name=\\\"\" + name + \"\\\"/>\";\n        }\n    }\n\n    public class HeaderRangeCell extends HeaderCell {\n\n        private Range range;\n\n        public HeaderRangeCell(String name, Range range) {\n            super(name);\n            this.range = range;\n        }\n\n        public HeaderRangeCell(Sample fixed) {\n            super(fixed);\n            this.range = fixed.range;\n        }\n\n        public void print(Graphics2D g2, int x, int y, int width, int height, float scale) {\n            // clip this cell\n            g2.setClip(x, y, width, height);\n            // filename\n            g2.drawString(name, x + EPS, y + (int) ((getCellHeight() / 2) * scale));\n            // range\n            g2.drawString(range.toString(), x + EPS, y + (int) ((getCellHeight() / 2 + getLineHeight()) * scale));\n        }\n\n        public String toXML() {\n            return \"<header name=\\\"\" + name + \"\\\" range=\\\"\" + range + \"\\\"/>\";\n        }\n    }\n\n    // (when that's done, t/tr/d can be unified between sequence and onecross)\n    // hey, cross.single() only makes sense in the context of a onecross, right?  score!\n    public static class CrossCell extends Single implements Cell {\n\n        Sample fixed, moving;\n\n        public CrossCell(Sample fixed, Sample moving) {\n            super(fixed, moving);\n            this.fixed = fixed;\n            this.moving = moving;\n        }\n\n        // awful hack to allow us to use popup menus referencing this cell...\n        public Sample getFixed() {\n            return fixed;\n        }\n\n        public Sample getMoving() {\n            return moving;\n        }\n\n        public CrossCell(float t, float tr, float d, float r, int n) {\n            // (this is only used for xml loading now -- ok?)\n            super(t, tr, d, r, n);\n        }\n\n        public void print(Graphics2D g2, int x, int y, int width, int height, float scale) {\n            // fill with highlight -- would the user ever NOT want this?  well, yes, possibly.\n            if (Boolean.valueOf(App.prefs.getPref(Prefs.GRID_HIGHLIGHT)).booleanValue() && isSignificant()) {\n                Color oldColor = g2.getColor();\n                g2.setColor(App.prefs.getColorPref(Prefs.GRID_HIGHLIGHTCOLOR, Color.green));\n                g2.fillRect(x, y, (int) (getCellWidth() * scale), (int) (getCellHeight() * scale));\n                g2.setColor(oldColor);\n            }\n            // box\n            g2.drawRect(x, y, (int) (getCellWidth() * scale), (int) (getCellHeight() * scale));\n            // little/no overlap: just show the overlap\n            if (n < 10) {\n                // Cross.getMinimumOverlap()) {\n                g2.drawString(\"n=\" + n, x + EPS, y + (int) ((getCellHeight() / 2 - getLineHeight() / 2) * scale));\n                return;\n            }\n            // cross\n            // REFACTOR: {\"t=\" + blah.format(t)} should be simply Score.toString()?\n            // TODO: need Cross.getShortName() (tscore -> \"t\") method\n            g2.drawString(\"t=\" + formatT() + \", r=\" + formatR(), x + EPS, y + (int) (getLineHeight() * scale) - EPS);\n            g2.drawString(\"tr=\" + formatTrend(), x + EPS, y + (int) (2 * getLineHeight() * scale) - EPS);\n            g2.drawString(\"D=\" + formatD(), x + EPS, y + (int) (3 * getLineHeight() * scale) - EPS);\n            g2.drawString(\"n=\" + String.valueOf(n), x + EPS, y + (int) (4 * getLineHeight() * scale) - EPS);\n        }\n        // in toXML, store full precision, with no %'s -- this means\n        // later we won't have too few digits, if the user decides she\n        // wants more, and we won't have to worry about parsing it\n        // incorrectly with NumberFormat.parse().  the users never\n        // need to look at a *.grid file, either, so they won't care.\n        // (...later: *.cross? *.xdate? *.xd?  i like *.xdate)\n        // err... cross already has this?\n    }\n\n    public static class LengthCell implements Cell {\n\n        private int length;\n\n        LengthCell(int length) {\n            this.length = length;\n        }\n\n        public void print(Graphics2D g2, int x, int y, int width, int height, float scale) {\n            // box? -- no box for you!  (the box nazi, of course.)\n            // length\n            g2.drawString(\"n=\" + length, x + EPS, y + (int) ((getCellHeight() / 2 - getLineHeight() / 2) * scale));\n        }\n\n        public String toXML() {\n            return \"<length n=\\\"\" + length + \"\\\"/>\";\n        }\n    }\n\n    // ----------------------------------------\n    // cell factory -- given XML tag name and attributes\n    private Cell makeCell(String name, Attributes atts) {\n        // can't be static: cells aren't static\n        if (name.equals(\"header\")) {\n            // check for range=\"a-b\"\n            String r = atts.getValue(\"range\");\n            if (r != null)\n                return new HeaderRangeCell(atts.getValue(\"name\"), new Range(r));\n            else\n                return new HeaderCell(atts.getValue(\"name\"));\n        } else if (name.equals(\"length\")) {\n            return new LengthCell(Integer.parseInt(atts.getValue(\"n\")));\n        } else if (name.equals(\"cross\")) {\n            return new CrossCell(Float.parseFloat(atts.getValue(\"t\")), Float.parseFloat(atts.getValue(\"tr\")), Float.parseFloat(atts.getValue(\"d\")), Float.parseFloat(atts.getValue(\"r\")), // exception?\n            Integer.parseInt(atts.getValue(\"n\")));\n        } else {\n            throw new IllegalArgumentException();\n        }\n    }\n\n    // ----------------------------------------\n    // print one page of a grid\n    private static class GridPage implements Printable {\n\n        private Grid grid;\n\n        private int startRow, endRow, startCol, endCol;\n\n        public GridPage(Grid grid, int startRow, int endRow, int startCol, int endCol) {\n            this.grid = grid;\n            this.startRow = startRow;\n            this.endRow = endRow;\n            this.startCol = startCol;\n            this.endCol = endCol;\n        }\n\n        public int print(Graphics g, PageFormat pf, int pageNr) throws PrinterException {\n            // WAS: if (pageNr != 0) return NO_SUCH_PAGE;\n            // no, pageNr is 1 for the second page!  (did the docs say it would?)\n            // now: ignore pageNr here\n            Graphics2D g2 = (Graphics2D) g;\n            g2.setColor(Color.black);\n            // what's a good thickness?\n            g2.setStroke(new BasicStroke(0.1f));\n            // set font (for all cells)\n            // FIXME: use Prefs\n            if (App.prefs.getPref(\"corina.grid.font\") != null)\n                g2.setFont(Font.decode(App.prefs.getPref(\"corina.grid.font\")));\n            // figure out stop row, col: end of page, or end of grid,\n            // whichever comes first\n            int stopRow = Math.min(endRow, grid.cell.length - 1);\n            int stopCol = Math.min(endCol, grid.cell[0].length - 1);\n            // print each one\n            for (int x = startCol; x <= stopCol; x++) {\n                for (int y = startRow; y <= stopRow; y++) {\n                    Cell c = grid.cell[y][x];\n                    Shape oldclip = g2.getClip();\n                    c.print(g2, ((int) pf.getImageableX()) + (x - startCol) * getCellWidth(), ((int) pf.getImageableY()) + (y - startRow) * getCellHeight(), getCellWidth(), getCellHeight(), // always print to paper with scale=1.0\n                    1.0f);\n                    // remove any clipping set by the cell...\n                    g2.setClip(oldclip);\n                }\n            }\n            return PAGE_EXISTS;\n        }\n    }\n\n    // ----------------------------------------\n    // print all pages of a grid (using GridPage)\n    private static class GridPrinter implements Pageable {\n\n        private Grid grid;\n\n        private int size;\n\n        private int rowsPerPage, colsPerPage, pagesWide, pagesTall, numPages;\n\n        private PageFormat pf;\n\n        public GridPrinter(Grid grid, PageFormat pf) {\n            this.grid = grid;\n            // size() is #samples; +1 for headers\n            this.size = grid.size() + 1;\n            this.pf = pf;\n            // examine the size of the page\n            rowsPerPage = ((int) pf.getImageableHeight()) / getCellHeight();\n            colsPerPage = ((int) pf.getImageableWidth()) / getCellWidth();\n            // pagesWide = cols / colsPerPage\n            pagesWide = (int) Math.ceil((float) size / colsPerPage);\n            // pagesTall = rows / rowsPerPage\n            pagesTall = (int) Math.ceil((float) size / rowsPerPage);\n            numPages = pagesWide * pagesTall;\n        }\n\n        public int getNumberOfPages() {\n            return numPages;\n        }\n\n        public PageFormat getPageFormat(int pageIndex) throws IndexOutOfBoundsException {\n            return pf;\n        }\n\n        public Printable getPrintable(int pageIndex) throws IndexOutOfBoundsException {\n            // is this right?  strange...\n            if (pageIndex >= numPages)\n                throw new IndexOutOfBoundsException();\n            int x = pageIndex % pagesWide;\n            int y = pageIndex / pagesWide;\n            return new GridPage(grid, y * rowsPerPage, y * rowsPerPage + rowsPerPage - 1, x * colsPerPage, x * colsPerPage + colsPerPage - 1);\n        }\n    }\n\n    // ----------------------------------------\n    // external print interface\n    public Pageable makeHardcopy(PageFormat pf) {\n        return new GridPrinter(this, pf);\n    }\n\n    /**\n     * \t Construct a Grid from a List of Elements.  Elements with\n     * \t <code>active=false</code> are ignored.\n     *\n     * \t @param elements the List of Elements to use\n     */\n    public Grid(List elements) {\n        // copy set\n        files = elements;\n        // number of active samples in the grid\n        // (count-if files #'active)\n        num = 0;\n        for (int i = 0; i < files.size(); i++) if (((Element) files.get(i)).active)\n            num++;\n        // create outputs\n        cell = new Cell[num + 1][num + 1];\n    }\n\n    /**\n     * \t Construct a Grid from an existing file.  Cells are loaded from\n     * \t the previously-calculated values; the user must \"refresh\" the\n     * \t display (<code>run()</code>) to update these values.\n     *\n     * \t @param filename the file to load\n     * \t @exception WrongFiletypeException if this file isn't a Grid\n     * \t @exception FileNotFoundException if the file can't be found\n     * \t @exception IOException if a low-level I/O exception occurs\n     */\n    public Grid(String filename) throws WrongFiletypeException, FileNotFoundException, IOException {\n        // load the file\n        load(filename);\n    }\n\n    public Grid(Sequence seq) {\n        // what to do?\n        // copy elements (use seq.getAllFixed(), seq.getAllMoving() -- which are the same here?)\n        // -- assume seq.getallfixed==seq.getallmoving\n        // NO, DON'T!\n        // the right way: add all-fixed, then add all-moving, but with no duplicates (quickly!)\n        files = new ArrayList();\n        // add all fixed\n        List fixed = seq.getAllFixed();\n        for (int i = 0; i < fixed.size(); i++) files.add(new Element((String) fixed.get(i)));\n        // add all (non-duplicate) moving\n        List moving = seq.getAllMoving();\n        for (int i = 0; i < moving.size(); i++) if (!fixed.contains(moving.get(i)))\n            files.add(new Element((String) moving.get(i)));\n        // create cell array\n        num = files.size();\n        cell = new Cell[num + 1][num + 1];\n        // (later?) run crosses\n        run();\n    }\n\n    /**\n     * \t The number of samples in this Grid.  Add one to this value to\n     * \t get the number of cells high or wide the grid is.\n     *\n     * \t @return the number of samples in this Grid\n     */\n    public int size() {\n        return num;\n    }\n\n    /**\n     * \t Get a Cell from the grid.\n     *\n     * \t @param row the row\n     * \t @param column the column\n     * \t @return the cell at (row, column)\n     */\n    public Cell getCell(int row, int column) {\n        // (cells are immutable, so this is safe.)\n        return cell[row][column];\n    }\n\n    /**\n     * Compute the cells of this grid.\n     */\n    public void run() {\n        // step 1: load all samples into a buffer.  for reference, on\n        // a P3/1000, 256MB, over a 10b2 network (limiting factor?),\n        // Win2000, Sun JDK1.3, computing a full grid from PIK's '96\n        // Gordion chronology (188 elements) used to take 2min 10sec,\n        // but with this buffer takes only 5 seconds.  moral: I/O is\n        // really slow, and memory is cheap, so use it!\n        AvgSingle averages = new AvgSingle();\n        Sample[] buffer = new Sample[num];\n        int read = 0;\n        for (int i = 0; i < files.size(); i++) {\n            // get an element\n            Element e = (Element) files.get(i);\n            // ABSTRACTION: i'd sure like to grab an enumeration of\n            // active elements (well, sort of).  what i really want is\n            // a filter.  i'll get rid of the active flag someday, but\n            // in the meantime, it'd be useful to have\n            //    public static List Element.activeOnly(List)\n            // skip inactive elements\n            if (!e.isActive())\n                continue;\n            // it's active: try to load\n            try {\n                buffer[read] = e.load();\n                read++;\n            } catch (IOException ioe) {\n                // ArrayIndexOutOfBoundsException on the next line, on\n                // right-click-\"grid from all\" with no loadable\n                // samples.\n                // can be null!  doesn't handle below!\n                buffer[read] = null;\n                read++;\n                error = ioe;\n                continue;\n            }\n        }\n        // step 2: compute crosses.  buffer now holds only active\n        // elements, so we can just run 0..num-1.  (the array |cell|\n        // was created in the constructor)\n        for (int row = 0; row < num; row++) {\n            // \"load\" fixed\n            Sample fixed = buffer[row];\n            // ignore nulls here -- kind of a hack\n            if (fixed == null || fixed.meta.get(\"filename\") == null)\n                continue;\n            // set headers -- if you want straight-across headers (as\n            // opposed to down-the-diagonal headers),\n            // s/[row][row+1]/[0][row+1]/\n            String filename = (String) fixed.meta.get(\"filename\");\n            cell[row + 1][0] = new HeaderCell(fixed);\n            cell[row][row + 1] = new HeaderRangeCell(fixed);\n            // set length\n            cell[row + 1][row + 1] = new LengthCell(fixed.data.size());\n            for (int col = 0; col < row; col++) {\n                // \"load\" moving\n                Sample moving = buffer[col];\n                // ignore nulls here -- kind of a hack\n                if (moving == null || moving.meta.get(\"filename\") == null)\n                    continue;\n                // run the single cross, and put it in the grid\n                Cell crosscell = new CrossCell(fixed, moving);\n                cell[row + 1][col + 1] = crosscell;\n                averages.addSingle((Single) crosscell);\n            }\n        }\n        averages.calculateAverages();\n        // place the \"averages\" at the first free column on row #2...\n        for (int col = 0; col < num + 1; col++) {\n            if (cell[1][col] == null) {\n                cell[1][col] = averages;\n                break;\n            }\n        }\n        // step 3: set all unused grid cells to EmptyCell.  i'm lazy\n        // -- let's just look for null cells.  (i really should know a\n        // priori what cells will be null here, but after loading /n/\n        // samples from disk, looking for nulls is really fast.)\n        // lots of these: FLYWEIGHT!\n        EmptyCell e = new EmptyCell();\n        for (int row = 0; row < num + 1; row++) for (int col = 0; col < num + 1; col++) if (cell[row][col] == null)\n            cell[row][col] = e;\n        // contents of buffer can now be GC'd.  whew.\n    }\n\n    /**\n     * \t Get the error that occurred while computing the grid.  The\n     * \t run() method in Runnable can't throw any exceptions, so we just\n     * \t store them here for later use.\n     *\n     * \t @return an Exception, if one occurred, else null\n     */\n    public Exception getError() {\n        return error;\n    }\n\n    // NOTE: the following methods should NOT be made into constants, and\n    // the property lookups should NOT be cached.  the user MUST be\n    // able to change these without creating a new Grid.\n    public static int getCellWidth() {\n        // cell width = 140% of cell height\n        return (int) (getCellHeight() * 1.4);\n    }\n\n    public static int getCellHeight() {\n        // make it big enough for 4 lines of text\n        // height of a line of text\n        int h;\n        // font to use\n        Font myFont = App.prefs.getFontPref(\"corina.grid.font\", new Font(\"sansserif\", Font.PLAIN, 12));\n        // erp ... this calls new font() for the second arg even when it's not needed (!)\n        // i don't think this is quite kosher...  (uh, nope.  fixme.\n        // look at its ascent.)\n        h = myFont.getSize();\n        return 4 * (h + 2 * EPS);\n    }\n\n    private static int getLineHeight() {\n        return getCellHeight() / 4;\n    }\n\n    // a wee bit: 2 points (pixels)\n    private static final int EPS = 2;\n\n    /**\n     * \t A short preview for file dialogs.  Displays \"Crossdating Grid\",\n     * \t and lists the first few elements.\n     *\n     * \t @return a preview component for this grid\n     */\n    public Preview getPreview() {\n        return new GridPreview(this);\n    }\n\n    // a preview for grids\n    private static class GridPreview extends Preview {\n\n        GridPreview(Grid g) {\n            title = I18n.getText(\"crossdating_grid\");\n            items = new ArrayList();\n            items.add(\"(\" + g.files.size() + \" \" + I18n.getText(\"total\") + \")\");\n            // up to 5\n            for (int i = 0; i < g.files.size(); i++) {\n                if (i == 4 && g.files.size() > 5) {\n                    items.add(\"...\");\n                    break;\n                }\n                String filename = ((Element) g.files.get(i)).getFilename();\n                items.add(new File(filename).getName());\n            }\n        }\n    }\n\n    /**\n     * A SAX2 handler for loading saved grid files.\n     */\n    private class GridHandler extends DefaultHandler {\n\n        private boolean readAnything = false;\n\n        // current row and column\n        private int row = 0, col = 0;\n\n        // flyweight for empty cells\n        private EmptyCell e = new EmptyCell();\n\n        public void startElement(String uri, String name, String qName, Attributes atts) throws SAXException {\n            System.out.println(\"startElement\");\n            // something has been read!  make sure it's a grid\n            if (!readAnything) {\n                if (name.equals(\"grid\")) {\n                    readAnything = true;\n                    return;\n                }\n                // else\n                throw new SAXException(\"Not a grid!\");\n                // can't i do better?  wfte?\n            }\n            // if starting inputs, create list for files\n            if (name.equals(\"input\")) {\n                files = new ArrayList();\n                return;\n            }\n            // if a sample (input section), add to list\n            if (name.equals(\"sample\")) {\n                // --> doesn't care about inactive files?\n                files.add(new Element(atts.getValue(\"filename\")));\n                return;\n            }\n            // if starting outputs, create array for cells\n            if (name.equals(\"output\")) {\n                cell = new Cell[num + 1][num + 1];\n                return;\n            }\n            // if an empty cell, use flyweight\n            if (name.equals(\"empty\")) {\n                cell[row][col] = e;\n                return;\n            }\n            try {\n                Cell c = makeCell(name, atts);\n                cell[row][col] = c;\n            } catch (IllegalArgumentException iae) {\n                // ignore -- FIXME: this is just plain awkward\n            }\n        }\n\n        public void endElement(String uri, String name, String qName) {\n            System.out.println(\"endElement\");\n            // if ending input section, compute num\n            if (name.equals(\"input\")) {\n                num = files.size();\n                return;\n            }\n            // if ending a cell, increment row\n            // ABSTRACTION: isCellName() -- can be used to avoid IAE's above, and here.\n            if (name.equals(\"empty\") || name.equals(\"header\") || name.equals(\"length\") || name.equals(\"cross\")) {\n                col++;\n                return;\n            }\n            // if ending a row, reset col=0, and increment row\n            if (name.equals(\"row\")) {\n                col = 0;\n                row++;\n                return;\n            }\n        }\n    }\n\n    /**\n     * \t Load a grid, saved in XML format.\n     *\n     * \t @param filename the target to load\n     * \t @exception WrongFiletypeException if this file isn't a Grid\n     * \t @exception FileNotFoundException if there is no file by this name\n     * \t @exception IOException if an I/O exception occurs while trying\n     * \t to load\n     */\n    public void load(String filename) throws WrongFiletypeException, FileNotFoundException, IOException {\n        try {\n            // make a new XML parser\n            XMLReader xr = XMLReaderFactory.createXMLReader();\n            // ... configure it to use a my SampleHandler ...\n            GridHandler loader = new GridHandler();\n            xr.setContentHandler(loader);\n            xr.setErrorHandler(loader);\n            // ... and feed it the file\n            System.out.println(\"reading \" + filename + \" as xml\");\n            FileReader r = new FileReader(filename);\n            xr.parse(new InputSource(r));\n            System.out.println(\"done parsing\");\n        } catch (SAXException se) {\n            // no! we don't need to see this garbage!\n            //se.printStackTrace();\n            throw new WrongFiletypeException();\n        }\n    }\n\n    /**\n     * \t Save this grid in XML format.\n     *\n     * \t @param filename the target to save to\n     * \t @exception IOException if an I/O exception occurs while trying to save\n     */\n    public void save(String filename) throws IOException {\n        // open, and write header\n        BufferedWriter w = new BufferedWriter(new FileWriter(filename));\n        try {\n            // can/should i make the encoding explicit here?\n            w.write(\"<?xml version=\\\"1.0\\\"?>\\n\");\n            w.write(\"\\n\");\n            w.write(\"<grid>\\n\");\n            w.write(\"\\n\");\n            // input: filenames\n            w.write(\"  <input>\\n\");\n            for (int i = 0; i < files.size(); i++) {\n                w.write(\"    <sample filename=\\\"\" + files.get(i) + \"\\\"/>\\n\");\n            }\n            w.write(\"  </input>\\n\");\n            w.write(\"\\n\");\n            // output: cells\n            w.write(\"  <output>\\n\");\n            for (int r = 0; r < cell.length; r++) {\n                w.write(\"    <row>\\n\");\n                for (int c = 0; c < cell[r].length; c++) w.write(\"      \" + cell[r][c].toXML() + \"\\n\");\n                w.write(\"    </row>\\n\");\n            }\n            w.write(\"  </output>\\n\");\n            w.write(\"\\n\");\n            // end, and close\n            w.write(\"</grid>\\n\");\n        } finally {\n            try {\n                w.close();\n            } catch (IOException ioe) {\n                log.error(\"Error closing writer\", ioe);\n            }\n        }\n    }\n\n    // this class is used for making our average cell...\n    private class AvgSingle extends Single implements Cell {\n\n        private int numCrosses;\n\n        private float cumt, cumtr, cumd, cumr;\n\n        public AvgSingle() {\n            super();\n            numCrosses = 0;\n            cumt = cumtr = cumd = cumr = 0.0f;\n        }\n\n        public void addSingle(Single cross) {\n            // not signifigant, ignore it...\n            if (cross.n < 10)\n                return;\n            cumt += cross.t;\n            cumtr += cross.tr;\n            cumd += cross.d;\n            cumr += cross.r;\n            numCrosses++;\n        }\n\n        public void calculateAverages() {\n            t = cumt / numCrosses;\n            tr = cumtr / numCrosses;\n            d = cumd / numCrosses;\n            r = cumr / numCrosses;\n        }\n\n        public void print(Graphics2D g2, int x, int y, int width, int height, float scale) {\n            // fill with highlight -- would the user ever NOT want this?  well, yes, possibly.\n            // box\n            g2.drawRect(x, y, (int) (getCellWidth() * scale), (int) (getCellHeight() * scale));\n            g2.drawString(\"t=\" + formatT() + \", r=\" + formatR(), x + EPS, y + (int) (2 * getLineHeight() * scale) - EPS);\n            g2.drawString(\"tr=\" + formatTrend(), x + EPS, y + (int) (3 * getLineHeight() * scale) - EPS);\n            g2.drawString(\"D=\" + formatD(), x + EPS, y + (int) (4 * getLineHeight() * scale) - EPS);\n            g2.drawString(\"Averages n>=10\", x + EPS, y + (int) (1 * getLineHeight() * scale) - EPS);\n        }\n    }\n}\n",
		"id": "/EvoSuiteBenchmark/35_corina/src/main/java/corina/cross/Grid_1Test.java",
		"test_prompt": "// Grid_1Test.java\n// This file is part of Corina.\n//\n// Corina is free software; you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation; either version 2 of the License, or\n// (at your option) any later version.\n//\n// Corina is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Corina; if not, write to the Free Software\n// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n//\n// Copyright 2001 Ken Harris <kbh7@cornell.edu>\n//\npackage corina.cross;\n\nimport java.awt.BasicStroke;\nimport java.awt.Color;\nimport java.awt.Font;\nimport java.awt.Graphics;\nimport java.awt.Shape;\nimport java.awt.Graphics2D;\nimport java.awt.print.PageFormat;\nimport java.awt.print.Pageable;\nimport java.awt.print.Printable;\nimport java.awt.print.PrinterException;\nimport java.io.BufferedWriter;\nimport java.io.File;\nimport java.io.FileNotFoundException;\nimport java.io.FileReader;\nimport java.io.FileWriter;\nimport java.io.IOException;\nimport java.util.ArrayList;\nimport java.util.List;\nimport org.xml.sax.Attributes;\nimport org.xml.sax.InputSource;\nimport org.xml.sax.SAXException;\nimport org.xml.sax.XMLReader;\nimport org.xml.sax.helpers.DefaultHandler;\nimport org.xml.sax.helpers.XMLReaderFactory;\nimport corina.Element;\nimport corina.Preview;\nimport corina.Previewable;\nimport corina.Range;\nimport corina.Sample;\nimport corina.core.App;\nimport corina.formats.WrongFiletypeException;\nimport corina.logging.CorinaLog;\nimport corina.prefs.Prefs;\nimport corina.ui.I18n;\nimport javax.swing.JLabel;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link Grid}.\n* It contains ten unit test cases for the {@link Grid#size()} method.\n*/\nclass Grid_1Test {"
	},
	{
		"original_code": "// Grid.java\n//\n// This file is part of Corina.\n//\n// Corina is free software; you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation; either version 2 of the License, or\n// (at your option) any later version.\n//\n// Corina is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Corina; if not, write to the Free Software\n// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n//\n// Copyright 2001 Ken Harris <kbh7@cornell.edu>\n//\npackage corina.cross;\n\nimport java.awt.BasicStroke;\nimport java.awt.Color;\nimport java.awt.Font;\nimport java.awt.Graphics;\nimport java.awt.Shape;\nimport java.awt.Graphics2D;\nimport java.awt.print.PageFormat;\nimport java.awt.print.Pageable;\nimport java.awt.print.Printable;\nimport java.awt.print.PrinterException;\nimport java.io.BufferedWriter;\nimport java.io.File;\nimport java.io.FileNotFoundException;\nimport java.io.FileReader;\nimport java.io.FileWriter;\nimport java.io.IOException;\nimport java.util.ArrayList;\nimport java.util.List;\nimport org.xml.sax.Attributes;\nimport org.xml.sax.InputSource;\nimport org.xml.sax.SAXException;\nimport org.xml.sax.XMLReader;\nimport org.xml.sax.helpers.DefaultHandler;\nimport org.xml.sax.helpers.XMLReaderFactory;\nimport corina.Element;\nimport corina.Preview;\nimport corina.Previewable;\nimport corina.Range;\nimport corina.Sample;\nimport corina.core.App;\nimport corina.formats.WrongFiletypeException;\nimport corina.logging.CorinaLog;\nimport corina.prefs.Prefs;\nimport corina.ui.I18n;\nimport javax.swing.JLabel;\n\n/**\n *    A crossdating grid.\n *\n *    <p>All of the samples are listed down the left side, and also\n *    across the top.  If you go right from a sample on the left, and\n *    down from a different sample no the top, the cell where they meet\n *    contains their crossdate (t, trend, d, overlap).  If you trace\n *    right from a sample, and down from the same sample, that cell (on\n *    the diagonal) has the length of the sample, by convention.</p>\n *\n *    <p>A Grid might look similar to this when printed:</p>\n *\n * <blockquote class=\"paper\">\n *\n *    <table border=\"1\" cellspacing=\"0\">\n *\n * \t<tr>\n * \t  <td> &nbsp; <br> &nbsp; <br> &nbsp; <br> &nbsp; </td>\n * \t  <td>SPI2A.IND     </td>\n * \t  <td> &nbsp; <br> &nbsp; <br> &nbsp; <br> &nbsp; </td>\n * \t  <td> &nbsp; <br> &nbsp; <br> &nbsp; <br> &nbsp; </td>\n * \t</tr>\n *\n * \t<tr>\n * \t  <td>SPI2A.IND </td>\n * \t  <td>n=54            </td>\n * \t  <td>SPI3A.IND </td>\n * \t  <td> &nbsp; <br> &nbsp; <br> &nbsp; <br> &nbsp; </td>\n * \t</tr>\n *\n * \t<tr>\n * \t  <td>SPI3A.IND       </td>\n * \t  <td>t=0.00 <br> tr=47.2% <br> d=0.00 <br> n=54 </td>\n * \t  <td>       n=170 </td>\n * \t  <td>SPI4A.IND </td>\n * \t</tr>\n *\n * \t<tr>\n * \t  <td>SPI4A.IND </td>\n * \t  <td>t=0.22 <br> tr=67.2% <br> d=0.03 <br> n=52 </td>\n * \t  <td>t=1.63 <br> tr=55.6% <br> d=0.09 <br> n=55 </td>\n * \t  <td>n=55     </td>\n * \t</tr>\n *\n *    </table>\n *\n * </blockquote>\n *\n *    <h2>Left to do</h2>\n *    <ul>\n *      <li>clean up this class: many many lines are longer than 80 characters\n *      <li>font handling code is sometimes inefficient (lots of \"new Font(...)\")\n *      <li>font handling code is sometimes incorrect (nudge factors\n *          instead of measuring ascents)\n *    </ul>\n *\n *    @author Ken Harris &lt;kbh7 <i style=\"color: gray\">at</i> cornell <i style=\"color: gray\">dot</i> edu&gt;\n *    @version $Id: Grid.java,v 1.15 2006/04/25 21:39:54 lucasmo Exp $\n */\npublic class Grid implements Runnable, Previewable {\n\n    private static final CorinaLog log = new CorinaLog(Grid.class);\n\n    // inputs\n    private List files;\n\n    // number of active files\n    private int num;\n\n    // outputs\n    private Cell[][] cell;\n\n    private Exception error = null;\n\n    // (used when creating graph of these samples)\n    public List getFiles() {\n        return files;\n    }\n\n    // ----------------------------------------\n    public interface Cell {\n\n        public abstract void print(Graphics2D g2, int x, int y, int width, int height, float scale);\n\n        public abstract String toXML();\n    }\n\n    public static class EmptyCell implements Cell {\n\n        public void print(Graphics2D g2, int x, int y, int width, int height, float scale) {\n            // do nothing\n        }\n\n        public String toXML() {\n            return \"<empty/>\";\n        }\n    }\n\n    public class HeaderCell implements Cell {\n\n        protected String name;\n\n        public HeaderCell(String name) {\n            // crop directory\n            int index = name.lastIndexOf(File.separatorChar);\n            this.name = name.substring(index + 1);\n        }\n\n        // awful hack to allow us to use popup menus referencing this cell...\n        Sample fixed;\n\n        public Sample getFixed() {\n            return fixed;\n        }\n\n        public HeaderCell(Sample fixed) {\n            String name = (String) fixed.meta.get(\"filename\");\n            // crop directory\n            int index = name.lastIndexOf(File.separatorChar);\n            this.name = name.substring(index + 1);\n            this.fixed = fixed;\n        }\n\n        public void print(Graphics2D g2, int x, int y, int width, int height, float scale) {\n            // clip this cell\n            g2.setClip(x, y, width, height);\n            // filename\n            g2.drawString(name, x + EPS, y + (int) ((getCellHeight() / 2 - getLineHeight() / 2) * scale));\n        }\n\n        public String toXML() {\n            return \"<header name=\\\"\" + name + \"\\\"/>\";\n        }\n    }\n\n    public class HeaderRangeCell extends HeaderCell {\n\n        private Range range;\n\n        public HeaderRangeCell(String name, Range range) {\n            super(name);\n            this.range = range;\n        }\n\n        public HeaderRangeCell(Sample fixed) {\n            super(fixed);\n            this.range = fixed.range;\n        }\n\n        public void print(Graphics2D g2, int x, int y, int width, int height, float scale) {\n            // clip this cell\n            g2.setClip(x, y, width, height);\n            // filename\n            g2.drawString(name, x + EPS, y + (int) ((getCellHeight() / 2) * scale));\n            // range\n            g2.drawString(range.toString(), x + EPS, y + (int) ((getCellHeight() / 2 + getLineHeight()) * scale));\n        }\n\n        public String toXML() {\n            return \"<header name=\\\"\" + name + \"\\\" range=\\\"\" + range + \"\\\"/>\";\n        }\n    }\n\n    // (when that's done, t/tr/d can be unified between sequence and onecross)\n    // hey, cross.single() only makes sense in the context of a onecross, right?  score!\n    public static class CrossCell extends Single implements Cell {\n\n        Sample fixed, moving;\n\n        public CrossCell(Sample fixed, Sample moving) {\n            super(fixed, moving);\n            this.fixed = fixed;\n            this.moving = moving;\n        }\n\n        // awful hack to allow us to use popup menus referencing this cell...\n        public Sample getFixed() {\n            return fixed;\n        }\n\n        public Sample getMoving() {\n            return moving;\n        }\n\n        public CrossCell(float t, float tr, float d, float r, int n) {\n            // (this is only used for xml loading now -- ok?)\n            super(t, tr, d, r, n);\n        }\n\n        public void print(Graphics2D g2, int x, int y, int width, int height, float scale) {\n            // fill with highlight -- would the user ever NOT want this?  well, yes, possibly.\n            if (Boolean.valueOf(App.prefs.getPref(Prefs.GRID_HIGHLIGHT)).booleanValue() && isSignificant()) {\n                Color oldColor = g2.getColor();\n                g2.setColor(App.prefs.getColorPref(Prefs.GRID_HIGHLIGHTCOLOR, Color.green));\n                g2.fillRect(x, y, (int) (getCellWidth() * scale), (int) (getCellHeight() * scale));\n                g2.setColor(oldColor);\n            }\n            // box\n            g2.drawRect(x, y, (int) (getCellWidth() * scale), (int) (getCellHeight() * scale));\n            // little/no overlap: just show the overlap\n            if (n < 10) {\n                // Cross.getMinimumOverlap()) {\n                g2.drawString(\"n=\" + n, x + EPS, y + (int) ((getCellHeight() / 2 - getLineHeight() / 2) * scale));\n                return;\n            }\n            // cross\n            // REFACTOR: {\"t=\" + blah.format(t)} should be simply Score.toString()?\n            // TODO: need Cross.getShortName() (tscore -> \"t\") method\n            g2.drawString(\"t=\" + formatT() + \", r=\" + formatR(), x + EPS, y + (int) (getLineHeight() * scale) - EPS);\n            g2.drawString(\"tr=\" + formatTrend(), x + EPS, y + (int) (2 * getLineHeight() * scale) - EPS);\n            g2.drawString(\"D=\" + formatD(), x + EPS, y + (int) (3 * getLineHeight() * scale) - EPS);\n            g2.drawString(\"n=\" + String.valueOf(n), x + EPS, y + (int) (4 * getLineHeight() * scale) - EPS);\n        }\n        // in toXML, store full precision, with no %'s -- this means\n        // later we won't have too few digits, if the user decides she\n        // wants more, and we won't have to worry about parsing it\n        // incorrectly with NumberFormat.parse().  the users never\n        // need to look at a *.grid file, either, so they won't care.\n        // (...later: *.cross? *.xdate? *.xd?  i like *.xdate)\n        // err... cross already has this?\n    }\n\n    public static class LengthCell implements Cell {\n\n        private int length;\n\n        LengthCell(int length) {\n            this.length = length;\n        }\n\n        public void print(Graphics2D g2, int x, int y, int width, int height, float scale) {\n            // box? -- no box for you!  (the box nazi, of course.)\n            // length\n            g2.drawString(\"n=\" + length, x + EPS, y + (int) ((getCellHeight() / 2 - getLineHeight() / 2) * scale));\n        }\n\n        public String toXML() {\n            return \"<length n=\\\"\" + length + \"\\\"/>\";\n        }\n    }\n\n    // ----------------------------------------\n    // cell factory -- given XML tag name and attributes\n    private Cell makeCell(String name, Attributes atts) {\n        // can't be static: cells aren't static\n        if (name.equals(\"header\")) {\n            // check for range=\"a-b\"\n            String r = atts.getValue(\"range\");\n            if (r != null)\n                return new HeaderRangeCell(atts.getValue(\"name\"), new Range(r));\n            else\n                return new HeaderCell(atts.getValue(\"name\"));\n        } else if (name.equals(\"length\")) {\n            return new LengthCell(Integer.parseInt(atts.getValue(\"n\")));\n        } else if (name.equals(\"cross\")) {\n            return new CrossCell(Float.parseFloat(atts.getValue(\"t\")), Float.parseFloat(atts.getValue(\"tr\")), Float.parseFloat(atts.getValue(\"d\")), Float.parseFloat(atts.getValue(\"r\")), // exception?\n            Integer.parseInt(atts.getValue(\"n\")));\n        } else {\n            throw new IllegalArgumentException();\n        }\n    }\n\n    // ----------------------------------------\n    // print one page of a grid\n    private static class GridPage implements Printable {\n\n        private Grid grid;\n\n        private int startRow, endRow, startCol, endCol;\n\n        public GridPage(Grid grid, int startRow, int endRow, int startCol, int endCol) {\n            this.grid = grid;\n            this.startRow = startRow;\n            this.endRow = endRow;\n            this.startCol = startCol;\n            this.endCol = endCol;\n        }\n\n        public int print(Graphics g, PageFormat pf, int pageNr) throws PrinterException {\n            // WAS: if (pageNr != 0) return NO_SUCH_PAGE;\n            // no, pageNr is 1 for the second page!  (did the docs say it would?)\n            // now: ignore pageNr here\n            Graphics2D g2 = (Graphics2D) g;\n            g2.setColor(Color.black);\n            // what's a good thickness?\n            g2.setStroke(new BasicStroke(0.1f));\n            // set font (for all cells)\n            // FIXME: use Prefs\n            if (App.prefs.getPref(\"corina.grid.font\") != null)\n                g2.setFont(Font.decode(App.prefs.getPref(\"corina.grid.font\")));\n            // figure out stop row, col: end of page, or end of grid,\n            // whichever comes first\n            int stopRow = Math.min(endRow, grid.cell.length - 1);\n            int stopCol = Math.min(endCol, grid.cell[0].length - 1);\n            // print each one\n            for (int x = startCol; x <= stopCol; x++) {\n                for (int y = startRow; y <= stopRow; y++) {\n                    Cell c = grid.cell[y][x];\n                    Shape oldclip = g2.getClip();\n                    c.print(g2, ((int) pf.getImageableX()) + (x - startCol) * getCellWidth(), ((int) pf.getImageableY()) + (y - startRow) * getCellHeight(), getCellWidth(), getCellHeight(), // always print to paper with scale=1.0\n                    1.0f);\n                    // remove any clipping set by the cell...\n                    g2.setClip(oldclip);\n                }\n            }\n            return PAGE_EXISTS;\n        }\n    }\n\n    // ----------------------------------------\n    // print all pages of a grid (using GridPage)\n    private static class GridPrinter implements Pageable {\n\n        private Grid grid;\n\n        private int size;\n\n        private int rowsPerPage, colsPerPage, pagesWide, pagesTall, numPages;\n\n        private PageFormat pf;\n\n        public GridPrinter(Grid grid, PageFormat pf) {\n            this.grid = grid;\n            // size() is #samples; +1 for headers\n            this.size = grid.size() + 1;\n            this.pf = pf;\n            // examine the size of the page\n            rowsPerPage = ((int) pf.getImageableHeight()) / getCellHeight();\n            colsPerPage = ((int) pf.getImageableWidth()) / getCellWidth();\n            // pagesWide = cols / colsPerPage\n            pagesWide = (int) Math.ceil((float) size / colsPerPage);\n            // pagesTall = rows / rowsPerPage\n            pagesTall = (int) Math.ceil((float) size / rowsPerPage);\n            numPages = pagesWide * pagesTall;\n        }\n\n        public int getNumberOfPages() {\n            return numPages;\n        }\n\n        public PageFormat getPageFormat(int pageIndex) throws IndexOutOfBoundsException {\n            return pf;\n        }\n\n        public Printable getPrintable(int pageIndex) throws IndexOutOfBoundsException {\n            // is this right?  strange...\n            if (pageIndex >= numPages)\n                throw new IndexOutOfBoundsException();\n            int x = pageIndex % pagesWide;\n            int y = pageIndex / pagesWide;\n            return new GridPage(grid, y * rowsPerPage, y * rowsPerPage + rowsPerPage - 1, x * colsPerPage, x * colsPerPage + colsPerPage - 1);\n        }\n    }\n\n    // ----------------------------------------\n    // external print interface\n    public Pageable makeHardcopy(PageFormat pf) {\n        return new GridPrinter(this, pf);\n    }\n\n    /**\n     * \t Construct a Grid from a List of Elements.  Elements with\n     * \t <code>active=false</code> are ignored.\n     *\n     * \t @param elements the List of Elements to use\n     */\n    public Grid(List elements) {\n        // copy set\n        files = elements;\n        // number of active samples in the grid\n        // (count-if files #'active)\n        num = 0;\n        for (int i = 0; i < files.size(); i++) if (((Element) files.get(i)).active)\n            num++;\n        // create outputs\n        cell = new Cell[num + 1][num + 1];\n    }\n\n    /**\n     * \t Construct a Grid from an existing file.  Cells are loaded from\n     * \t the previously-calculated values; the user must \"refresh\" the\n     * \t display (<code>run()</code>) to update these values.\n     *\n     * \t @param filename the file to load\n     * \t @exception WrongFiletypeException if this file isn't a Grid\n     * \t @exception FileNotFoundException if the file can't be found\n     * \t @exception IOException if a low-level I/O exception occurs\n     */\n    public Grid(String filename) throws WrongFiletypeException, FileNotFoundException, IOException {\n        // load the file\n        load(filename);\n    }\n\n    public Grid(Sequence seq) {\n        // what to do?\n        // copy elements (use seq.getAllFixed(), seq.getAllMoving() -- which are the same here?)\n        // -- assume seq.getallfixed==seq.getallmoving\n        // NO, DON'T!\n        // the right way: add all-fixed, then add all-moving, but with no duplicates (quickly!)\n        files = new ArrayList();\n        // add all fixed\n        List fixed = seq.getAllFixed();\n        for (int i = 0; i < fixed.size(); i++) files.add(new Element((String) fixed.get(i)));\n        // add all (non-duplicate) moving\n        List moving = seq.getAllMoving();\n        for (int i = 0; i < moving.size(); i++) if (!fixed.contains(moving.get(i)))\n            files.add(new Element((String) moving.get(i)));\n        // create cell array\n        num = files.size();\n        cell = new Cell[num + 1][num + 1];\n        // (later?) run crosses\n        run();\n    }\n\n    /**\n     * \t The number of samples in this Grid.  Add one to this value to\n     * \t get the number of cells high or wide the grid is.\n     *\n     * \t @return the number of samples in this Grid\n     */\n    public int size() {\n        return num;\n    }\n\n    /**\n     * \t Get a Cell from the grid.\n     *\n     * \t @param row the row\n     * \t @param column the column\n     * \t @return the cell at (row, column)\n     */\n    public Cell getCell(int row, int column) {\n        // (cells are immutable, so this is safe.)\n        return cell[row][column];\n    }\n\n    /**\n     * Compute the cells of this grid.\n     */\n    public void run() {\n        // step 1: load all samples into a buffer.  for reference, on\n        // a P3/1000, 256MB, over a 10b2 network (limiting factor?),\n        // Win2000, Sun JDK1.3, computing a full grid from PIK's '96\n        // Gordion chronology (188 elements) used to take 2min 10sec,\n        // but with this buffer takes only 5 seconds.  moral: I/O is\n        // really slow, and memory is cheap, so use it!\n        AvgSingle averages = new AvgSingle();\n        Sample[] buffer = new Sample[num];\n        int read = 0;\n        for (int i = 0; i < files.size(); i++) {\n            // get an element\n            Element e = (Element) files.get(i);\n            // ABSTRACTION: i'd sure like to grab an enumeration of\n            // active elements (well, sort of).  what i really want is\n            // a filter.  i'll get rid of the active flag someday, but\n            // in the meantime, it'd be useful to have\n            //    public static List Element.activeOnly(List)\n            // skip inactive elements\n            if (!e.isActive())\n                continue;\n            // it's active: try to load\n            try {\n                buffer[read] = e.load();\n                read++;\n            } catch (IOException ioe) {\n                // ArrayIndexOutOfBoundsException on the next line, on\n                // right-click-\"grid from all\" with no loadable\n                // samples.\n                // can be null!  doesn't handle below!\n                buffer[read] = null;\n                read++;\n                error = ioe;\n                continue;\n            }\n        }\n        // step 2: compute crosses.  buffer now holds only active\n        // elements, so we can just run 0..num-1.  (the array |cell|\n        // was created in the constructor)\n        for (int row = 0; row < num; row++) {\n            // \"load\" fixed\n            Sample fixed = buffer[row];\n            // ignore nulls here -- kind of a hack\n            if (fixed == null || fixed.meta.get(\"filename\") == null)\n                continue;\n            // set headers -- if you want straight-across headers (as\n            // opposed to down-the-diagonal headers),\n            // s/[row][row+1]/[0][row+1]/\n            String filename = (String) fixed.meta.get(\"filename\");\n            cell[row + 1][0] = new HeaderCell(fixed);\n            cell[row][row + 1] = new HeaderRangeCell(fixed);\n            // set length\n            cell[row + 1][row + 1] = new LengthCell(fixed.data.size());\n            for (int col = 0; col < row; col++) {\n                // \"load\" moving\n                Sample moving = buffer[col];\n                // ignore nulls here -- kind of a hack\n                if (moving == null || moving.meta.get(\"filename\") == null)\n                    continue;\n                // run the single cross, and put it in the grid\n                Cell crosscell = new CrossCell(fixed, moving);\n                cell[row + 1][col + 1] = crosscell;\n                averages.addSingle((Single) crosscell);\n            }\n        }\n        averages.calculateAverages();\n        // place the \"averages\" at the first free column on row #2...\n        for (int col = 0; col < num + 1; col++) {\n            if (cell[1][col] == null) {\n                cell[1][col] = averages;\n                break;\n            }\n        }\n        // step 3: set all unused grid cells to EmptyCell.  i'm lazy\n        // -- let's just look for null cells.  (i really should know a\n        // priori what cells will be null here, but after loading /n/\n        // samples from disk, looking for nulls is really fast.)\n        // lots of these: FLYWEIGHT!\n        EmptyCell e = new EmptyCell();\n        for (int row = 0; row < num + 1; row++) for (int col = 0; col < num + 1; col++) if (cell[row][col] == null)\n            cell[row][col] = e;\n        // contents of buffer can now be GC'd.  whew.\n    }\n\n    /**\n     * \t Get the error that occurred while computing the grid.  The\n     * \t run() method in Runnable can't throw any exceptions, so we just\n     * \t store them here for later use.\n     *\n     * \t @return an Exception, if one occurred, else null\n     */\n    public Exception getError() {\n        return error;\n    }\n\n    // NOTE: the following methods should NOT be made into constants, and\n    // the property lookups should NOT be cached.  the user MUST be\n    // able to change these without creating a new Grid.\n    public static int getCellWidth() {\n        // cell width = 140% of cell height\n        return (int) (getCellHeight() * 1.4);\n    }\n\n    public static int getCellHeight() {\n        // make it big enough for 4 lines of text\n        // height of a line of text\n        int h;\n        // font to use\n        Font myFont = App.prefs.getFontPref(\"corina.grid.font\", new Font(\"sansserif\", Font.PLAIN, 12));\n        // erp ... this calls new font() for the second arg even when it's not needed (!)\n        // i don't think this is quite kosher...  (uh, nope.  fixme.\n        // look at its ascent.)\n        h = myFont.getSize();\n        return 4 * (h + 2 * EPS);\n    }\n\n    private static int getLineHeight() {\n        return getCellHeight() / 4;\n    }\n\n    // a wee bit: 2 points (pixels)\n    private static final int EPS = 2;\n\n    /**\n     * \t A short preview for file dialogs.  Displays \"Crossdating Grid\",\n     * \t and lists the first few elements.\n     *\n     * \t @return a preview component for this grid\n     */\n    public Preview getPreview() {\n        return new GridPreview(this);\n    }\n\n    // a preview for grids\n    private static class GridPreview extends Preview {\n\n        GridPreview(Grid g) {\n            title = I18n.getText(\"crossdating_grid\");\n            items = new ArrayList();\n            items.add(\"(\" + g.files.size() + \" \" + I18n.getText(\"total\") + \")\");\n            // up to 5\n            for (int i = 0; i < g.files.size(); i++) {\n                if (i == 4 && g.files.size() > 5) {\n                    items.add(\"...\");\n                    break;\n                }\n                String filename = ((Element) g.files.get(i)).getFilename();\n                items.add(new File(filename).getName());\n            }\n        }\n    }\n\n    /**\n     * A SAX2 handler for loading saved grid files.\n     */\n    private class GridHandler extends DefaultHandler {\n\n        private boolean readAnything = false;\n\n        // current row and column\n        private int row = 0, col = 0;\n\n        // flyweight for empty cells\n        private EmptyCell e = new EmptyCell();\n\n        public void startElement(String uri, String name, String qName, Attributes atts) throws SAXException {\n            System.out.println(\"startElement\");\n            // something has been read!  make sure it's a grid\n            if (!readAnything) {\n                if (name.equals(\"grid\")) {\n                    readAnything = true;\n                    return;\n                }\n                // else\n                throw new SAXException(\"Not a grid!\");\n                // can't i do better?  wfte?\n            }\n            // if starting inputs, create list for files\n            if (name.equals(\"input\")) {\n                files = new ArrayList();\n                return;\n            }\n            // if a sample (input section), add to list\n            if (name.equals(\"sample\")) {\n                // --> doesn't care about inactive files?\n                files.add(new Element(atts.getValue(\"filename\")));\n                return;\n            }\n            // if starting outputs, create array for cells\n            if (name.equals(\"output\")) {\n                cell = new Cell[num + 1][num + 1];\n                return;\n            }\n            // if an empty cell, use flyweight\n            if (name.equals(\"empty\")) {\n                cell[row][col] = e;\n                return;\n            }\n            try {\n                Cell c = makeCell(name, atts);\n                cell[row][col] = c;\n            } catch (IllegalArgumentException iae) {\n                // ignore -- FIXME: this is just plain awkward\n            }\n        }\n\n        public void endElement(String uri, String name, String qName) {\n            System.out.println(\"endElement\");\n            // if ending input section, compute num\n            if (name.equals(\"input\")) {\n                num = files.size();\n                return;\n            }\n            // if ending a cell, increment row\n            // ABSTRACTION: isCellName() -- can be used to avoid IAE's above, and here.\n            if (name.equals(\"empty\") || name.equals(\"header\") || name.equals(\"length\") || name.equals(\"cross\")) {\n                col++;\n                return;\n            }\n            // if ending a row, reset col=0, and increment row\n            if (name.equals(\"row\")) {\n                col = 0;\n                row++;\n                return;\n            }\n        }\n    }\n\n    /**\n     * \t Load a grid, saved in XML format.\n     *\n     * \t @param filename the target to load\n     * \t @exception WrongFiletypeException if this file isn't a Grid\n     * \t @exception FileNotFoundException if there is no file by this name\n     * \t @exception IOException if an I/O exception occurs while trying\n     * \t to load\n     */\n    public void load(String filename) throws WrongFiletypeException, FileNotFoundException, IOException {\n        try {\n            // make a new XML parser\n            XMLReader xr = XMLReaderFactory.createXMLReader();\n            // ... configure it to use a my SampleHandler ...\n            GridHandler loader = new GridHandler();\n            xr.setContentHandler(loader);\n            xr.setErrorHandler(loader);\n            // ... and feed it the file\n            System.out.println(\"reading \" + filename + \" as xml\");\n            FileReader r = new FileReader(filename);\n            xr.parse(new InputSource(r));\n            System.out.println(\"done parsing\");\n        } catch (SAXException se) {\n            // no! we don't need to see this garbage!\n            //se.printStackTrace();\n            throw new WrongFiletypeException();\n        }\n    }\n\n    /**\n     * \t Save this grid in XML format.\n     *\n     * \t @param filename the target to save to\n     * \t @exception IOException if an I/O exception occurs while trying to save\n     */\n    public void save(String filename) throws IOException {\n        // open, and write header\n        BufferedWriter w = new BufferedWriter(new FileWriter(filename));\n        try {\n            // can/should i make the encoding explicit here?\n            w.write(\"<?xml version=\\\"1.0\\\"?>\\n\");\n            w.write(\"\\n\");\n            w.write(\"<grid>\\n\");\n            w.write(\"\\n\");\n            // input: filenames\n            w.write(\"  <input>\\n\");\n            for (int i = 0; i < files.size(); i++) {\n                w.write(\"    <sample filename=\\\"\" + files.get(i) + \"\\\"/>\\n\");\n            }\n            w.write(\"  </input>\\n\");\n            w.write(\"\\n\");\n            // output: cells\n            w.write(\"  <output>\\n\");\n            for (int r = 0; r < cell.length; r++) {\n                w.write(\"    <row>\\n\");\n                for (int c = 0; c < cell[r].length; c++) w.write(\"      \" + cell[r][c].toXML() + \"\\n\");\n                w.write(\"    </row>\\n\");\n            }\n            w.write(\"  </output>\\n\");\n            w.write(\"\\n\");\n            // end, and close\n            w.write(\"</grid>\\n\");\n        } finally {\n            try {\n                w.close();\n            } catch (IOException ioe) {\n                log.error(\"Error closing writer\", ioe);\n            }\n        }\n    }\n\n    // this class is used for making our average cell...\n    private class AvgSingle extends Single implements Cell {\n\n        private int numCrosses;\n\n        private float cumt, cumtr, cumd, cumr;\n\n        public AvgSingle() {\n            super();\n            numCrosses = 0;\n            cumt = cumtr = cumd = cumr = 0.0f;\n        }\n\n        public void addSingle(Single cross) {\n            // not signifigant, ignore it...\n            if (cross.n < 10)\n                return;\n            cumt += cross.t;\n            cumtr += cross.tr;\n            cumd += cross.d;\n            cumr += cross.r;\n            numCrosses++;\n        }\n\n        public void calculateAverages() {\n            t = cumt / numCrosses;\n            tr = cumtr / numCrosses;\n            d = cumd / numCrosses;\n            r = cumr / numCrosses;\n        }\n\n        public void print(Graphics2D g2, int x, int y, int width, int height, float scale) {\n            // fill with highlight -- would the user ever NOT want this?  well, yes, possibly.\n            // box\n            g2.drawRect(x, y, (int) (getCellWidth() * scale), (int) (getCellHeight() * scale));\n            g2.drawString(\"t=\" + formatT() + \", r=\" + formatR(), x + EPS, y + (int) (2 * getLineHeight() * scale) - EPS);\n            g2.drawString(\"tr=\" + formatTrend(), x + EPS, y + (int) (3 * getLineHeight() * scale) - EPS);\n            g2.drawString(\"D=\" + formatD(), x + EPS, y + (int) (4 * getLineHeight() * scale) - EPS);\n            g2.drawString(\"Averages n>=10\", x + EPS, y + (int) (1 * getLineHeight() * scale) - EPS);\n        }\n    }\n}\n",
		"id": "/EvoSuiteBenchmark/35_corina/src/main/java/corina/cross/Grid_2Test.java",
		"test_prompt": "// Grid_2Test.java\n// This file is part of Corina.\n//\n// Corina is free software; you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation; either version 2 of the License, or\n// (at your option) any later version.\n//\n// Corina is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Corina; if not, write to the Free Software\n// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n//\n// Copyright 2001 Ken Harris <kbh7@cornell.edu>\n//\npackage corina.cross;\n\nimport java.awt.BasicStroke;\nimport java.awt.Color;\nimport java.awt.Font;\nimport java.awt.Graphics;\nimport java.awt.Shape;\nimport java.awt.Graphics2D;\nimport java.awt.print.PageFormat;\nimport java.awt.print.Pageable;\nimport java.awt.print.Printable;\nimport java.awt.print.PrinterException;\nimport java.io.BufferedWriter;\nimport java.io.File;\nimport java.io.FileNotFoundException;\nimport java.io.FileReader;\nimport java.io.FileWriter;\nimport java.io.IOException;\nimport java.util.ArrayList;\nimport java.util.List;\nimport org.xml.sax.Attributes;\nimport org.xml.sax.InputSource;\nimport org.xml.sax.SAXException;\nimport org.xml.sax.XMLReader;\nimport org.xml.sax.helpers.DefaultHandler;\nimport org.xml.sax.helpers.XMLReaderFactory;\nimport corina.Element;\nimport corina.Preview;\nimport corina.Previewable;\nimport corina.Range;\nimport corina.Sample;\nimport corina.core.App;\nimport corina.formats.WrongFiletypeException;\nimport corina.logging.CorinaLog;\nimport corina.prefs.Prefs;\nimport corina.ui.I18n;\nimport javax.swing.JLabel;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link Grid}.\n* It contains ten unit test cases for the {@link Grid#getCellWidth()} method.\n*/\nclass Grid_2Test {"
	},
	{
		"original_code": "// Grid.java\n//\n// This file is part of Corina.\n//\n// Corina is free software; you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation; either version 2 of the License, or\n// (at your option) any later version.\n//\n// Corina is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Corina; if not, write to the Free Software\n// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n//\n// Copyright 2001 Ken Harris <kbh7@cornell.edu>\n//\npackage corina.cross;\n\nimport java.awt.BasicStroke;\nimport java.awt.Color;\nimport java.awt.Font;\nimport java.awt.Graphics;\nimport java.awt.Shape;\nimport java.awt.Graphics2D;\nimport java.awt.print.PageFormat;\nimport java.awt.print.Pageable;\nimport java.awt.print.Printable;\nimport java.awt.print.PrinterException;\nimport java.io.BufferedWriter;\nimport java.io.File;\nimport java.io.FileNotFoundException;\nimport java.io.FileReader;\nimport java.io.FileWriter;\nimport java.io.IOException;\nimport java.util.ArrayList;\nimport java.util.List;\nimport org.xml.sax.Attributes;\nimport org.xml.sax.InputSource;\nimport org.xml.sax.SAXException;\nimport org.xml.sax.XMLReader;\nimport org.xml.sax.helpers.DefaultHandler;\nimport org.xml.sax.helpers.XMLReaderFactory;\nimport corina.Element;\nimport corina.Preview;\nimport corina.Previewable;\nimport corina.Range;\nimport corina.Sample;\nimport corina.core.App;\nimport corina.formats.WrongFiletypeException;\nimport corina.logging.CorinaLog;\nimport corina.prefs.Prefs;\nimport corina.ui.I18n;\nimport javax.swing.JLabel;\n\n/**\n *    A crossdating grid.\n *\n *    <p>All of the samples are listed down the left side, and also\n *    across the top.  If you go right from a sample on the left, and\n *    down from a different sample no the top, the cell where they meet\n *    contains their crossdate (t, trend, d, overlap).  If you trace\n *    right from a sample, and down from the same sample, that cell (on\n *    the diagonal) has the length of the sample, by convention.</p>\n *\n *    <p>A Grid might look similar to this when printed:</p>\n *\n * <blockquote class=\"paper\">\n *\n *    <table border=\"1\" cellspacing=\"0\">\n *\n * \t<tr>\n * \t  <td> &nbsp; <br> &nbsp; <br> &nbsp; <br> &nbsp; </td>\n * \t  <td>SPI2A.IND     </td>\n * \t  <td> &nbsp; <br> &nbsp; <br> &nbsp; <br> &nbsp; </td>\n * \t  <td> &nbsp; <br> &nbsp; <br> &nbsp; <br> &nbsp; </td>\n * \t</tr>\n *\n * \t<tr>\n * \t  <td>SPI2A.IND </td>\n * \t  <td>n=54            </td>\n * \t  <td>SPI3A.IND </td>\n * \t  <td> &nbsp; <br> &nbsp; <br> &nbsp; <br> &nbsp; </td>\n * \t</tr>\n *\n * \t<tr>\n * \t  <td>SPI3A.IND       </td>\n * \t  <td>t=0.00 <br> tr=47.2% <br> d=0.00 <br> n=54 </td>\n * \t  <td>       n=170 </td>\n * \t  <td>SPI4A.IND </td>\n * \t</tr>\n *\n * \t<tr>\n * \t  <td>SPI4A.IND </td>\n * \t  <td>t=0.22 <br> tr=67.2% <br> d=0.03 <br> n=52 </td>\n * \t  <td>t=1.63 <br> tr=55.6% <br> d=0.09 <br> n=55 </td>\n * \t  <td>n=55     </td>\n * \t</tr>\n *\n *    </table>\n *\n * </blockquote>\n *\n *    <h2>Left to do</h2>\n *    <ul>\n *      <li>clean up this class: many many lines are longer than 80 characters\n *      <li>font handling code is sometimes inefficient (lots of \"new Font(...)\")\n *      <li>font handling code is sometimes incorrect (nudge factors\n *          instead of measuring ascents)\n *    </ul>\n *\n *    @author Ken Harris &lt;kbh7 <i style=\"color: gray\">at</i> cornell <i style=\"color: gray\">dot</i> edu&gt;\n *    @version $Id: Grid.java,v 1.15 2006/04/25 21:39:54 lucasmo Exp $\n */\npublic class Grid implements Runnable, Previewable {\n\n    private static final CorinaLog log = new CorinaLog(Grid.class);\n\n    // inputs\n    private List files;\n\n    // number of active files\n    private int num;\n\n    // outputs\n    private Cell[][] cell;\n\n    private Exception error = null;\n\n    // (used when creating graph of these samples)\n    public List getFiles() {\n        return files;\n    }\n\n    // ----------------------------------------\n    public interface Cell {\n\n        public abstract void print(Graphics2D g2, int x, int y, int width, int height, float scale);\n\n        public abstract String toXML();\n    }\n\n    public static class EmptyCell implements Cell {\n\n        public void print(Graphics2D g2, int x, int y, int width, int height, float scale) {\n            // do nothing\n        }\n\n        public String toXML() {\n            return \"<empty/>\";\n        }\n    }\n\n    public class HeaderCell implements Cell {\n\n        protected String name;\n\n        public HeaderCell(String name) {\n            // crop directory\n            int index = name.lastIndexOf(File.separatorChar);\n            this.name = name.substring(index + 1);\n        }\n\n        // awful hack to allow us to use popup menus referencing this cell...\n        Sample fixed;\n\n        public Sample getFixed() {\n            return fixed;\n        }\n\n        public HeaderCell(Sample fixed) {\n            String name = (String) fixed.meta.get(\"filename\");\n            // crop directory\n            int index = name.lastIndexOf(File.separatorChar);\n            this.name = name.substring(index + 1);\n            this.fixed = fixed;\n        }\n\n        public void print(Graphics2D g2, int x, int y, int width, int height, float scale) {\n            // clip this cell\n            g2.setClip(x, y, width, height);\n            // filename\n            g2.drawString(name, x + EPS, y + (int) ((getCellHeight() / 2 - getLineHeight() / 2) * scale));\n        }\n\n        public String toXML() {\n            return \"<header name=\\\"\" + name + \"\\\"/>\";\n        }\n    }\n\n    public class HeaderRangeCell extends HeaderCell {\n\n        private Range range;\n\n        public HeaderRangeCell(String name, Range range) {\n            super(name);\n            this.range = range;\n        }\n\n        public HeaderRangeCell(Sample fixed) {\n            super(fixed);\n            this.range = fixed.range;\n        }\n\n        public void print(Graphics2D g2, int x, int y, int width, int height, float scale) {\n            // clip this cell\n            g2.setClip(x, y, width, height);\n            // filename\n            g2.drawString(name, x + EPS, y + (int) ((getCellHeight() / 2) * scale));\n            // range\n            g2.drawString(range.toString(), x + EPS, y + (int) ((getCellHeight() / 2 + getLineHeight()) * scale));\n        }\n\n        public String toXML() {\n            return \"<header name=\\\"\" + name + \"\\\" range=\\\"\" + range + \"\\\"/>\";\n        }\n    }\n\n    // (when that's done, t/tr/d can be unified between sequence and onecross)\n    // hey, cross.single() only makes sense in the context of a onecross, right?  score!\n    public static class CrossCell extends Single implements Cell {\n\n        Sample fixed, moving;\n\n        public CrossCell(Sample fixed, Sample moving) {\n            super(fixed, moving);\n            this.fixed = fixed;\n            this.moving = moving;\n        }\n\n        // awful hack to allow us to use popup menus referencing this cell...\n        public Sample getFixed() {\n            return fixed;\n        }\n\n        public Sample getMoving() {\n            return moving;\n        }\n\n        public CrossCell(float t, float tr, float d, float r, int n) {\n            // (this is only used for xml loading now -- ok?)\n            super(t, tr, d, r, n);\n        }\n\n        public void print(Graphics2D g2, int x, int y, int width, int height, float scale) {\n            // fill with highlight -- would the user ever NOT want this?  well, yes, possibly.\n            if (Boolean.valueOf(App.prefs.getPref(Prefs.GRID_HIGHLIGHT)).booleanValue() && isSignificant()) {\n                Color oldColor = g2.getColor();\n                g2.setColor(App.prefs.getColorPref(Prefs.GRID_HIGHLIGHTCOLOR, Color.green));\n                g2.fillRect(x, y, (int) (getCellWidth() * scale), (int) (getCellHeight() * scale));\n                g2.setColor(oldColor);\n            }\n            // box\n            g2.drawRect(x, y, (int) (getCellWidth() * scale), (int) (getCellHeight() * scale));\n            // little/no overlap: just show the overlap\n            if (n < 10) {\n                // Cross.getMinimumOverlap()) {\n                g2.drawString(\"n=\" + n, x + EPS, y + (int) ((getCellHeight() / 2 - getLineHeight() / 2) * scale));\n                return;\n            }\n            // cross\n            // REFACTOR: {\"t=\" + blah.format(t)} should be simply Score.toString()?\n            // TODO: need Cross.getShortName() (tscore -> \"t\") method\n            g2.drawString(\"t=\" + formatT() + \", r=\" + formatR(), x + EPS, y + (int) (getLineHeight() * scale) - EPS);\n            g2.drawString(\"tr=\" + formatTrend(), x + EPS, y + (int) (2 * getLineHeight() * scale) - EPS);\n            g2.drawString(\"D=\" + formatD(), x + EPS, y + (int) (3 * getLineHeight() * scale) - EPS);\n            g2.drawString(\"n=\" + String.valueOf(n), x + EPS, y + (int) (4 * getLineHeight() * scale) - EPS);\n        }\n        // in toXML, store full precision, with no %'s -- this means\n        // later we won't have too few digits, if the user decides she\n        // wants more, and we won't have to worry about parsing it\n        // incorrectly with NumberFormat.parse().  the users never\n        // need to look at a *.grid file, either, so they won't care.\n        // (...later: *.cross? *.xdate? *.xd?  i like *.xdate)\n        // err... cross already has this?\n    }\n\n    public static class LengthCell implements Cell {\n\n        private int length;\n\n        LengthCell(int length) {\n            this.length = length;\n        }\n\n        public void print(Graphics2D g2, int x, int y, int width, int height, float scale) {\n            // box? -- no box for you!  (the box nazi, of course.)\n            // length\n            g2.drawString(\"n=\" + length, x + EPS, y + (int) ((getCellHeight() / 2 - getLineHeight() / 2) * scale));\n        }\n\n        public String toXML() {\n            return \"<length n=\\\"\" + length + \"\\\"/>\";\n        }\n    }\n\n    // ----------------------------------------\n    // cell factory -- given XML tag name and attributes\n    private Cell makeCell(String name, Attributes atts) {\n        // can't be static: cells aren't static\n        if (name.equals(\"header\")) {\n            // check for range=\"a-b\"\n            String r = atts.getValue(\"range\");\n            if (r != null)\n                return new HeaderRangeCell(atts.getValue(\"name\"), new Range(r));\n            else\n                return new HeaderCell(atts.getValue(\"name\"));\n        } else if (name.equals(\"length\")) {\n            return new LengthCell(Integer.parseInt(atts.getValue(\"n\")));\n        } else if (name.equals(\"cross\")) {\n            return new CrossCell(Float.parseFloat(atts.getValue(\"t\")), Float.parseFloat(atts.getValue(\"tr\")), Float.parseFloat(atts.getValue(\"d\")), Float.parseFloat(atts.getValue(\"r\")), // exception?\n            Integer.parseInt(atts.getValue(\"n\")));\n        } else {\n            throw new IllegalArgumentException();\n        }\n    }\n\n    // ----------------------------------------\n    // print one page of a grid\n    private static class GridPage implements Printable {\n\n        private Grid grid;\n\n        private int startRow, endRow, startCol, endCol;\n\n        public GridPage(Grid grid, int startRow, int endRow, int startCol, int endCol) {\n            this.grid = grid;\n            this.startRow = startRow;\n            this.endRow = endRow;\n            this.startCol = startCol;\n            this.endCol = endCol;\n        }\n\n        public int print(Graphics g, PageFormat pf, int pageNr) throws PrinterException {\n            // WAS: if (pageNr != 0) return NO_SUCH_PAGE;\n            // no, pageNr is 1 for the second page!  (did the docs say it would?)\n            // now: ignore pageNr here\n            Graphics2D g2 = (Graphics2D) g;\n            g2.setColor(Color.black);\n            // what's a good thickness?\n            g2.setStroke(new BasicStroke(0.1f));\n            // set font (for all cells)\n            // FIXME: use Prefs\n            if (App.prefs.getPref(\"corina.grid.font\") != null)\n                g2.setFont(Font.decode(App.prefs.getPref(\"corina.grid.font\")));\n            // figure out stop row, col: end of page, or end of grid,\n            // whichever comes first\n            int stopRow = Math.min(endRow, grid.cell.length - 1);\n            int stopCol = Math.min(endCol, grid.cell[0].length - 1);\n            // print each one\n            for (int x = startCol; x <= stopCol; x++) {\n                for (int y = startRow; y <= stopRow; y++) {\n                    Cell c = grid.cell[y][x];\n                    Shape oldclip = g2.getClip();\n                    c.print(g2, ((int) pf.getImageableX()) + (x - startCol) * getCellWidth(), ((int) pf.getImageableY()) + (y - startRow) * getCellHeight(), getCellWidth(), getCellHeight(), // always print to paper with scale=1.0\n                    1.0f);\n                    // remove any clipping set by the cell...\n                    g2.setClip(oldclip);\n                }\n            }\n            return PAGE_EXISTS;\n        }\n    }\n\n    // ----------------------------------------\n    // print all pages of a grid (using GridPage)\n    private static class GridPrinter implements Pageable {\n\n        private Grid grid;\n\n        private int size;\n\n        private int rowsPerPage, colsPerPage, pagesWide, pagesTall, numPages;\n\n        private PageFormat pf;\n\n        public GridPrinter(Grid grid, PageFormat pf) {\n            this.grid = grid;\n            // size() is #samples; +1 for headers\n            this.size = grid.size() + 1;\n            this.pf = pf;\n            // examine the size of the page\n            rowsPerPage = ((int) pf.getImageableHeight()) / getCellHeight();\n            colsPerPage = ((int) pf.getImageableWidth()) / getCellWidth();\n            // pagesWide = cols / colsPerPage\n            pagesWide = (int) Math.ceil((float) size / colsPerPage);\n            // pagesTall = rows / rowsPerPage\n            pagesTall = (int) Math.ceil((float) size / rowsPerPage);\n            numPages = pagesWide * pagesTall;\n        }\n\n        public int getNumberOfPages() {\n            return numPages;\n        }\n\n        public PageFormat getPageFormat(int pageIndex) throws IndexOutOfBoundsException {\n            return pf;\n        }\n\n        public Printable getPrintable(int pageIndex) throws IndexOutOfBoundsException {\n            // is this right?  strange...\n            if (pageIndex >= numPages)\n                throw new IndexOutOfBoundsException();\n            int x = pageIndex % pagesWide;\n            int y = pageIndex / pagesWide;\n            return new GridPage(grid, y * rowsPerPage, y * rowsPerPage + rowsPerPage - 1, x * colsPerPage, x * colsPerPage + colsPerPage - 1);\n        }\n    }\n\n    // ----------------------------------------\n    // external print interface\n    public Pageable makeHardcopy(PageFormat pf) {\n        return new GridPrinter(this, pf);\n    }\n\n    /**\n     * \t Construct a Grid from a List of Elements.  Elements with\n     * \t <code>active=false</code> are ignored.\n     *\n     * \t @param elements the List of Elements to use\n     */\n    public Grid(List elements) {\n        // copy set\n        files = elements;\n        // number of active samples in the grid\n        // (count-if files #'active)\n        num = 0;\n        for (int i = 0; i < files.size(); i++) if (((Element) files.get(i)).active)\n            num++;\n        // create outputs\n        cell = new Cell[num + 1][num + 1];\n    }\n\n    /**\n     * \t Construct a Grid from an existing file.  Cells are loaded from\n     * \t the previously-calculated values; the user must \"refresh\" the\n     * \t display (<code>run()</code>) to update these values.\n     *\n     * \t @param filename the file to load\n     * \t @exception WrongFiletypeException if this file isn't a Grid\n     * \t @exception FileNotFoundException if the file can't be found\n     * \t @exception IOException if a low-level I/O exception occurs\n     */\n    public Grid(String filename) throws WrongFiletypeException, FileNotFoundException, IOException {\n        // load the file\n        load(filename);\n    }\n\n    public Grid(Sequence seq) {\n        // what to do?\n        // copy elements (use seq.getAllFixed(), seq.getAllMoving() -- which are the same here?)\n        // -- assume seq.getallfixed==seq.getallmoving\n        // NO, DON'T!\n        // the right way: add all-fixed, then add all-moving, but with no duplicates (quickly!)\n        files = new ArrayList();\n        // add all fixed\n        List fixed = seq.getAllFixed();\n        for (int i = 0; i < fixed.size(); i++) files.add(new Element((String) fixed.get(i)));\n        // add all (non-duplicate) moving\n        List moving = seq.getAllMoving();\n        for (int i = 0; i < moving.size(); i++) if (!fixed.contains(moving.get(i)))\n            files.add(new Element((String) moving.get(i)));\n        // create cell array\n        num = files.size();\n        cell = new Cell[num + 1][num + 1];\n        // (later?) run crosses\n        run();\n    }\n\n    /**\n     * \t The number of samples in this Grid.  Add one to this value to\n     * \t get the number of cells high or wide the grid is.\n     *\n     * \t @return the number of samples in this Grid\n     */\n    public int size() {\n        return num;\n    }\n\n    /**\n     * \t Get a Cell from the grid.\n     *\n     * \t @param row the row\n     * \t @param column the column\n     * \t @return the cell at (row, column)\n     */\n    public Cell getCell(int row, int column) {\n        // (cells are immutable, so this is safe.)\n        return cell[row][column];\n    }\n\n    /**\n     * Compute the cells of this grid.\n     */\n    public void run() {\n        // step 1: load all samples into a buffer.  for reference, on\n        // a P3/1000, 256MB, over a 10b2 network (limiting factor?),\n        // Win2000, Sun JDK1.3, computing a full grid from PIK's '96\n        // Gordion chronology (188 elements) used to take 2min 10sec,\n        // but with this buffer takes only 5 seconds.  moral: I/O is\n        // really slow, and memory is cheap, so use it!\n        AvgSingle averages = new AvgSingle();\n        Sample[] buffer = new Sample[num];\n        int read = 0;\n        for (int i = 0; i < files.size(); i++) {\n            // get an element\n            Element e = (Element) files.get(i);\n            // ABSTRACTION: i'd sure like to grab an enumeration of\n            // active elements (well, sort of).  what i really want is\n            // a filter.  i'll get rid of the active flag someday, but\n            // in the meantime, it'd be useful to have\n            //    public static List Element.activeOnly(List)\n            // skip inactive elements\n            if (!e.isActive())\n                continue;\n            // it's active: try to load\n            try {\n                buffer[read] = e.load();\n                read++;\n            } catch (IOException ioe) {\n                // ArrayIndexOutOfBoundsException on the next line, on\n                // right-click-\"grid from all\" with no loadable\n                // samples.\n                // can be null!  doesn't handle below!\n                buffer[read] = null;\n                read++;\n                error = ioe;\n                continue;\n            }\n        }\n        // step 2: compute crosses.  buffer now holds only active\n        // elements, so we can just run 0..num-1.  (the array |cell|\n        // was created in the constructor)\n        for (int row = 0; row < num; row++) {\n            // \"load\" fixed\n            Sample fixed = buffer[row];\n            // ignore nulls here -- kind of a hack\n            if (fixed == null || fixed.meta.get(\"filename\") == null)\n                continue;\n            // set headers -- if you want straight-across headers (as\n            // opposed to down-the-diagonal headers),\n            // s/[row][row+1]/[0][row+1]/\n            String filename = (String) fixed.meta.get(\"filename\");\n            cell[row + 1][0] = new HeaderCell(fixed);\n            cell[row][row + 1] = new HeaderRangeCell(fixed);\n            // set length\n            cell[row + 1][row + 1] = new LengthCell(fixed.data.size());\n            for (int col = 0; col < row; col++) {\n                // \"load\" moving\n                Sample moving = buffer[col];\n                // ignore nulls here -- kind of a hack\n                if (moving == null || moving.meta.get(\"filename\") == null)\n                    continue;\n                // run the single cross, and put it in the grid\n                Cell crosscell = new CrossCell(fixed, moving);\n                cell[row + 1][col + 1] = crosscell;\n                averages.addSingle((Single) crosscell);\n            }\n        }\n        averages.calculateAverages();\n        // place the \"averages\" at the first free column on row #2...\n        for (int col = 0; col < num + 1; col++) {\n            if (cell[1][col] == null) {\n                cell[1][col] = averages;\n                break;\n            }\n        }\n        // step 3: set all unused grid cells to EmptyCell.  i'm lazy\n        // -- let's just look for null cells.  (i really should know a\n        // priori what cells will be null here, but after loading /n/\n        // samples from disk, looking for nulls is really fast.)\n        // lots of these: FLYWEIGHT!\n        EmptyCell e = new EmptyCell();\n        for (int row = 0; row < num + 1; row++) for (int col = 0; col < num + 1; col++) if (cell[row][col] == null)\n            cell[row][col] = e;\n        // contents of buffer can now be GC'd.  whew.\n    }\n\n    /**\n     * \t Get the error that occurred while computing the grid.  The\n     * \t run() method in Runnable can't throw any exceptions, so we just\n     * \t store them here for later use.\n     *\n     * \t @return an Exception, if one occurred, else null\n     */\n    public Exception getError() {\n        return error;\n    }\n\n    // NOTE: the following methods should NOT be made into constants, and\n    // the property lookups should NOT be cached.  the user MUST be\n    // able to change these without creating a new Grid.\n    public static int getCellWidth() {\n        // cell width = 140% of cell height\n        return (int) (getCellHeight() * 1.4);\n    }\n\n    public static int getCellHeight() {\n        // make it big enough for 4 lines of text\n        // height of a line of text\n        int h;\n        // font to use\n        Font myFont = App.prefs.getFontPref(\"corina.grid.font\", new Font(\"sansserif\", Font.PLAIN, 12));\n        // erp ... this calls new font() for the second arg even when it's not needed (!)\n        // i don't think this is quite kosher...  (uh, nope.  fixme.\n        // look at its ascent.)\n        h = myFont.getSize();\n        return 4 * (h + 2 * EPS);\n    }\n\n    private static int getLineHeight() {\n        return getCellHeight() / 4;\n    }\n\n    // a wee bit: 2 points (pixels)\n    private static final int EPS = 2;\n\n    /**\n     * \t A short preview for file dialogs.  Displays \"Crossdating Grid\",\n     * \t and lists the first few elements.\n     *\n     * \t @return a preview component for this grid\n     */\n    public Preview getPreview() {\n        return new GridPreview(this);\n    }\n\n    // a preview for grids\n    private static class GridPreview extends Preview {\n\n        GridPreview(Grid g) {\n            title = I18n.getText(\"crossdating_grid\");\n            items = new ArrayList();\n            items.add(\"(\" + g.files.size() + \" \" + I18n.getText(\"total\") + \")\");\n            // up to 5\n            for (int i = 0; i < g.files.size(); i++) {\n                if (i == 4 && g.files.size() > 5) {\n                    items.add(\"...\");\n                    break;\n                }\n                String filename = ((Element) g.files.get(i)).getFilename();\n                items.add(new File(filename).getName());\n            }\n        }\n    }\n\n    /**\n     * A SAX2 handler for loading saved grid files.\n     */\n    private class GridHandler extends DefaultHandler {\n\n        private boolean readAnything = false;\n\n        // current row and column\n        private int row = 0, col = 0;\n\n        // flyweight for empty cells\n        private EmptyCell e = new EmptyCell();\n\n        public void startElement(String uri, String name, String qName, Attributes atts) throws SAXException {\n            System.out.println(\"startElement\");\n            // something has been read!  make sure it's a grid\n            if (!readAnything) {\n                if (name.equals(\"grid\")) {\n                    readAnything = true;\n                    return;\n                }\n                // else\n                throw new SAXException(\"Not a grid!\");\n                // can't i do better?  wfte?\n            }\n            // if starting inputs, create list for files\n            if (name.equals(\"input\")) {\n                files = new ArrayList();\n                return;\n            }\n            // if a sample (input section), add to list\n            if (name.equals(\"sample\")) {\n                // --> doesn't care about inactive files?\n                files.add(new Element(atts.getValue(\"filename\")));\n                return;\n            }\n            // if starting outputs, create array for cells\n            if (name.equals(\"output\")) {\n                cell = new Cell[num + 1][num + 1];\n                return;\n            }\n            // if an empty cell, use flyweight\n            if (name.equals(\"empty\")) {\n                cell[row][col] = e;\n                return;\n            }\n            try {\n                Cell c = makeCell(name, atts);\n                cell[row][col] = c;\n            } catch (IllegalArgumentException iae) {\n                // ignore -- FIXME: this is just plain awkward\n            }\n        }\n\n        public void endElement(String uri, String name, String qName) {\n            System.out.println(\"endElement\");\n            // if ending input section, compute num\n            if (name.equals(\"input\")) {\n                num = files.size();\n                return;\n            }\n            // if ending a cell, increment row\n            // ABSTRACTION: isCellName() -- can be used to avoid IAE's above, and here.\n            if (name.equals(\"empty\") || name.equals(\"header\") || name.equals(\"length\") || name.equals(\"cross\")) {\n                col++;\n                return;\n            }\n            // if ending a row, reset col=0, and increment row\n            if (name.equals(\"row\")) {\n                col = 0;\n                row++;\n                return;\n            }\n        }\n    }\n\n    /**\n     * \t Load a grid, saved in XML format.\n     *\n     * \t @param filename the target to load\n     * \t @exception WrongFiletypeException if this file isn't a Grid\n     * \t @exception FileNotFoundException if there is no file by this name\n     * \t @exception IOException if an I/O exception occurs while trying\n     * \t to load\n     */\n    public void load(String filename) throws WrongFiletypeException, FileNotFoundException, IOException {\n        try {\n            // make a new XML parser\n            XMLReader xr = XMLReaderFactory.createXMLReader();\n            // ... configure it to use a my SampleHandler ...\n            GridHandler loader = new GridHandler();\n            xr.setContentHandler(loader);\n            xr.setErrorHandler(loader);\n            // ... and feed it the file\n            System.out.println(\"reading \" + filename + \" as xml\");\n            FileReader r = new FileReader(filename);\n            xr.parse(new InputSource(r));\n            System.out.println(\"done parsing\");\n        } catch (SAXException se) {\n            // no! we don't need to see this garbage!\n            //se.printStackTrace();\n            throw new WrongFiletypeException();\n        }\n    }\n\n    /**\n     * \t Save this grid in XML format.\n     *\n     * \t @param filename the target to save to\n     * \t @exception IOException if an I/O exception occurs while trying to save\n     */\n    public void save(String filename) throws IOException {\n        // open, and write header\n        BufferedWriter w = new BufferedWriter(new FileWriter(filename));\n        try {\n            // can/should i make the encoding explicit here?\n            w.write(\"<?xml version=\\\"1.0\\\"?>\\n\");\n            w.write(\"\\n\");\n            w.write(\"<grid>\\n\");\n            w.write(\"\\n\");\n            // input: filenames\n            w.write(\"  <input>\\n\");\n            for (int i = 0; i < files.size(); i++) {\n                w.write(\"    <sample filename=\\\"\" + files.get(i) + \"\\\"/>\\n\");\n            }\n            w.write(\"  </input>\\n\");\n            w.write(\"\\n\");\n            // output: cells\n            w.write(\"  <output>\\n\");\n            for (int r = 0; r < cell.length; r++) {\n                w.write(\"    <row>\\n\");\n                for (int c = 0; c < cell[r].length; c++) w.write(\"      \" + cell[r][c].toXML() + \"\\n\");\n                w.write(\"    </row>\\n\");\n            }\n            w.write(\"  </output>\\n\");\n            w.write(\"\\n\");\n            // end, and close\n            w.write(\"</grid>\\n\");\n        } finally {\n            try {\n                w.close();\n            } catch (IOException ioe) {\n                log.error(\"Error closing writer\", ioe);\n            }\n        }\n    }\n\n    // this class is used for making our average cell...\n    private class AvgSingle extends Single implements Cell {\n\n        private int numCrosses;\n\n        private float cumt, cumtr, cumd, cumr;\n\n        public AvgSingle() {\n            super();\n            numCrosses = 0;\n            cumt = cumtr = cumd = cumr = 0.0f;\n        }\n\n        public void addSingle(Single cross) {\n            // not signifigant, ignore it...\n            if (cross.n < 10)\n                return;\n            cumt += cross.t;\n            cumtr += cross.tr;\n            cumd += cross.d;\n            cumr += cross.r;\n            numCrosses++;\n        }\n\n        public void calculateAverages() {\n            t = cumt / numCrosses;\n            tr = cumtr / numCrosses;\n            d = cumd / numCrosses;\n            r = cumr / numCrosses;\n        }\n\n        public void print(Graphics2D g2, int x, int y, int width, int height, float scale) {\n            // fill with highlight -- would the user ever NOT want this?  well, yes, possibly.\n            // box\n            g2.drawRect(x, y, (int) (getCellWidth() * scale), (int) (getCellHeight() * scale));\n            g2.drawString(\"t=\" + formatT() + \", r=\" + formatR(), x + EPS, y + (int) (2 * getLineHeight() * scale) - EPS);\n            g2.drawString(\"tr=\" + formatTrend(), x + EPS, y + (int) (3 * getLineHeight() * scale) - EPS);\n            g2.drawString(\"D=\" + formatD(), x + EPS, y + (int) (4 * getLineHeight() * scale) - EPS);\n            g2.drawString(\"Averages n>=10\", x + EPS, y + (int) (1 * getLineHeight() * scale) - EPS);\n        }\n    }\n}\n",
		"id": "/EvoSuiteBenchmark/35_corina/src/main/java/corina/cross/Grid_3Test.java",
		"test_prompt": "// Grid_3Test.java\n// This file is part of Corina.\n//\n// Corina is free software; you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation; either version 2 of the License, or\n// (at your option) any later version.\n//\n// Corina is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Corina; if not, write to the Free Software\n// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n//\n// Copyright 2001 Ken Harris <kbh7@cornell.edu>\n//\npackage corina.cross;\n\nimport java.awt.BasicStroke;\nimport java.awt.Color;\nimport java.awt.Font;\nimport java.awt.Graphics;\nimport java.awt.Shape;\nimport java.awt.Graphics2D;\nimport java.awt.print.PageFormat;\nimport java.awt.print.Pageable;\nimport java.awt.print.Printable;\nimport java.awt.print.PrinterException;\nimport java.io.BufferedWriter;\nimport java.io.File;\nimport java.io.FileNotFoundException;\nimport java.io.FileReader;\nimport java.io.FileWriter;\nimport java.io.IOException;\nimport java.util.ArrayList;\nimport java.util.List;\nimport org.xml.sax.Attributes;\nimport org.xml.sax.InputSource;\nimport org.xml.sax.SAXException;\nimport org.xml.sax.XMLReader;\nimport org.xml.sax.helpers.DefaultHandler;\nimport org.xml.sax.helpers.XMLReaderFactory;\nimport corina.Element;\nimport corina.Preview;\nimport corina.Previewable;\nimport corina.Range;\nimport corina.Sample;\nimport corina.core.App;\nimport corina.formats.WrongFiletypeException;\nimport corina.logging.CorinaLog;\nimport corina.prefs.Prefs;\nimport corina.ui.I18n;\nimport javax.swing.JLabel;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link Grid}.\n* It contains ten unit test cases for the {@link Grid#getCellHeight()} method.\n*/\nclass Grid_3Test {"
	},
	{
		"original_code": "// GridView.java\n// FIXME: rename to corina.crossdate\npackage corina.cross;\n\nimport java.awt.BorderLayout;\nimport java.awt.Color;\nimport java.awt.Component;\nimport java.awt.Dimension;\nimport java.awt.Font;\nimport java.awt.Graphics;\nimport java.awt.Graphics2D;\nimport java.awt.event.ActionEvent;\nimport java.awt.event.MouseEvent;\nimport java.awt.print.PageFormat;\nimport java.awt.print.Pageable;\nimport java.io.IOException;\nimport java.util.ArrayList;\nimport java.util.List;\nimport javax.swing.AbstractAction;\nimport javax.swing.BorderFactory;\nimport javax.swing.JButton;\nimport javax.swing.JComponent;\nimport javax.swing.JMenuItem;\nimport javax.swing.JPanel;\nimport javax.swing.JPopupMenu;\nimport javax.swing.JScrollPane;\nimport javax.swing.JSlider;\nimport javax.swing.JTable;\nimport javax.swing.event.ChangeEvent;\nimport javax.swing.event.ChangeListener;\nimport javax.swing.table.AbstractTableModel;\nimport javax.swing.table.TableCellRenderer;\nimport java.awt.event.MouseAdapter;\nimport corina.Element;\nimport corina.Sample;\nimport corina.core.App;\nimport corina.editor.Editor;\nimport corina.graph.GraphWindow;\nimport corina.gui.Layout;\nimport corina.ui.I18n;\nimport corina.util.PopupListener;\n\npublic class GridView extends JPanel {\n\n    // TODO:\n    // -- javadoc (class, c'tor)\n    // -- popup:\n    // ---- graph this cross\n    // ---- jump to this cross (need CrossdateWindow ref, method there)\n    // ------ jumpToCrossdate(String fixed, String moving)?\n    // ---- graph this sample\n    // ---- open this sample\n    // -- PERF: it's really slow ... (why?)\n    // -- move zoomer to bottom (why's it broken?)\n    // ---- add icons?  label?\n    // ---- scale shouldn't be static anywhere!\n    // -- graph-all button\n    // -- map-all button\n    // -- double-click on cell = jump to this crossdate\n    // -- default should be \"yes, hilite sig scores with color ...\"\n    // -- delete GridFrame.java (but make sure it's empty)\n    // FUTURE:\n    // -- (grid.java): a cell is-sig if ANY of its (visible) crosses are sig.\n    // -- (grid.java): respect sequence's algorithms\n    // -- (grid.java): old way is (seq.fixed+seq.moving);\n    //    should it really be fixed on left side, moving on top?\n    //    (i.e., assymetric grids)\n    // -- exporting?  do i have that?\n    public GridView(Sequence sequence) {\n        // make a grid from sequence, pass it to constructor...\n        this(new Grid(sequence));\n    }\n\n    public GridView(Grid thegrid) {\n        grid = thegrid;\n        setLayout(new BorderLayout());\n        initTable();\n        add(scroll, BorderLayout.CENTER);\n        // where to put?\n        recomputeFont();\n        // TODO: add icons?  label?\n        // use zoom=value/100\n        final JSlider zoomer = new JSlider(50, 150, 100);\n        zoomer.addChangeListener(new ChangeListener() {\n\n            public void stateChanged(ChangeEvent e) {\n                scale = zoomer.getValue() / 100f;\n                recomputeFont();\n                scroll.revalidate();\n                scroll.repaint();\n                // update row height / col width, too.\n                setCellSizes();\n            }\n        });\n        JButton graphAll = new JButton(\"Graph All\");\n        // WRITEME\n        graphAll.setEnabled(false);\n        JButton mapAll = new JButton(\"Map All\");\n        // WRITEME\n        mapAll.setEnabled(false);\n        // , zoomer);\n        JPanel buttons = Layout.buttonLayout(graphAll, mapAll, null);\n        buttons.setBorder(BorderFactory.createEmptyBorder(10, 10, 10, 10));\n        add(buttons, BorderLayout.SOUTH);\n        // ???\n        add(zoomer, BorderLayout.NORTH);\n        // popup\n        /*\n\t\tJPopupMenu popup = new JPopupMenu();\n\t\tpopup.add(new JMenuItem(\"Graph this Crossdate\")); // WRITEME: implement\n\t\tpopup.add(new JMenuItem(\"Jump to this Crossdate\")); // WRITEME: implement\n\t\tpopup.addSeparator();\n\t\tpopup.add(new JMenuItem(\"Graph this Sample\")); // WRITEME: implement\n\t\tpopup.add(new JMenuItem(\"Open this Sample\")); // WRITEME: implement\n\t\t*/\n        // TODO: no, i like 2 popup menus better.  they are \"context\"\n        // menus, after all.\n        final GridViewPopup gridViewPopup = new GridViewPopup();\n        table.addMouseListener(new PopupListener(gridViewPopup) {\n\n            public void showPopup(MouseEvent e) {\n                // if table, and this row not selected, select this row\n                if (e.getSource() instanceof JTable) {\n                    JTable table = (JTable) e.getSource();\n                    int row = table.rowAtPoint(e.getPoint());\n                    int col = table.columnAtPoint(e.getPoint());\n                    if (row != -1 && !table.isRowSelected(row))\n                        table.setRowSelectionInterval(row, row);\n                    if (col != -1 && !table.isColumnSelected(col))\n                        table.setColumnSelectionInterval(col, col);\n                }\n                // ok, we know what's selected.\n                Grid.Cell cell = grid.getCell(table.getSelectedRow(), table.getSelectedColumn());\n                gridViewPopup.disableAll();\n                if (cell instanceof Grid.HeaderCell || cell instanceof Grid.HeaderRangeCell) {\n                    if (((Grid.HeaderCell) cell).getFixed() != null)\n                        gridViewPopup.setPopupForSample();\n                } else if (cell instanceof Grid.CrossCell) {\n                    // we can't do this on saved grids, alas :(\n                    if (((Grid.CrossCell) cell).getFixed() != null)\n                        gridViewPopup.setPopupForCross();\n                } else\n                    // no popups on these weird cells\n                    return;\n                // show popup\n                if (gridViewPopup != null)\n                    gridViewPopup.show(e.getComponent(), e.getX(), e.getY());\n            }\n        });\n        /*table.addMouseListener(new PopupListener(popup) {\n\t\t\tpublic void showPopup(MouseEvent e) {\n\t\t\t\t// WRITEME: select this cell\n\t\t\t\t// (and make sure super's selection doesn't take over?)\n\n\t\t\t\t// WRITEME: dim/undim stuff\n\n\t\t\t\tsuper.showPopup(e);\n\t\t\t}\n\t\t});\n\t\t*/\n    }\n\n    // popup menu\n    private class GridViewPopup extends JPopupMenu {\n\n        private JMenuItem graph = new JMenuItem(\"Graph this Crossdate\");\n\n        private JMenuItem jump = new JMenuItem(\"Jump to this Crossdate\");\n\n        private JMenuItem graph_sample = new JMenuItem(\"Graph this Sample\");\n\n        private JMenuItem open_sample = new JMenuItem(\"Open this Sample\");\n\n        public void setPopupForCross() {\n            graph.setEnabled(true);\n            jump.setEnabled(true);\n        }\n\n        public void setPopupForSample() {\n            graph.setEnabled(false);\n            jump.setEnabled(false);\n            graph_sample.setEnabled(true);\n            open_sample.setEnabled(true);\n        }\n\n        public void disableAll() {\n            graph.setEnabled(false);\n            jump.setEnabled(false);\n            graph_sample.setEnabled(false);\n            open_sample.setEnabled(false);\n        }\n\n        public GridViewPopup() {\n            graph.addActionListener(new AbstractAction() {\n\n                public void actionPerformed(ActionEvent e) {\n                    // get the cross cell...\n                    Grid.CrossCell cross = (Grid.CrossCell) grid.getCell(table.getSelectedRow(), table.getSelectedColumn());\n                    // make graph\n                    List list = new ArrayList();\n                    list.add(new Element((String) cross.getFixed().meta.get(\"filename\")));\n                    list.add(new Element((String) cross.getMoving().meta.get(\"filename\")));\n                    new GraphWindow(list);\n                }\n            });\n            jump.addActionListener(new AbstractAction() {\n\n                public void actionPerformed(ActionEvent e) {\n                    // TODO: get fixed\n                    // TODO: get moving (selection)\n                    // TODO: crossdateWindow.jumpToCrossdate(f,m)?\n                    // NEED: a ref to the CDW here\n                    // NEED: that method in CDW\n                }\n            });\n            graph_sample.addActionListener(new AbstractAction() {\n\n                public void actionPerformed(ActionEvent e) {\n                    // get the header cell...\n                    Grid.HeaderCell header = (Grid.HeaderCell) grid.getCell(table.getSelectedRow(), table.getSelectedColumn());\n                    // make graph\n                    new GraphWindow(header.getFixed());\n                }\n            });\n            open_sample.addActionListener(new AbstractAction() {\n\n                public void actionPerformed(ActionEvent e) {\n                    // get the header cell...\n                    Grid.HeaderCell header = (Grid.HeaderCell) grid.getCell(table.getSelectedRow(), table.getSelectedColumn());\n                    // get sample, put in editor\n                    new Editor(header.getFixed());\n                }\n            });\n            add(graph);\n            add(jump);\n            addSeparator();\n            add(graph_sample);\n            add(open_sample);\n        }\n    }\n\n    private Grid grid;\n\n    private JTable table;\n\n    // HACK!  fixme.\n    private float scale = 1.0f;\n\n    // taken directly from GridFrame.java\n    private void initTable() {\n        // make a table out of this grid\n        table = new JTable(new GridTableModel());\n        // 0 pixels between cells\n        table.setIntercellSpacing(new Dimension(0, 0));\n        // cell-selection only\n        table.setRowSelectionAllowed(false);\n        table.setCellSelectionEnabled(true);\n        // set cell height/width from Grid\n        setCellSizes();\n        // no top-header\n        table.setTableHeader(null);\n        // (i don't remember why i need this; do i need this to keep\n        // it from being fit-to-width?  or do i need it at all?)\n        table.setAutoResizeMode(JTable.AUTO_RESIZE_OFF);\n        // renderer -- (same as for printer, coincidentally)\n        table.setDefaultRenderer(Object.class, new GridRenderer());\n        // don't show gridlines\n        table.setShowGrid(false);\n        // respond to double-clicks\n        // LATER: put in the popup menu first, then\n        // figure out which of those ops you want to make double-click.\n        // MOVE ME: lift this out of initTable -- it's table, yeah,\n        // but it belongs with event stuff.\n        /*\n\t\t table.addMouseListener(new MouseAdapter() {\n\t\t public void mouseClicked(MouseEvent e) {\n\t\t if (e.getClickCount() == 2) {\n\t\t // get the (row,col) of the click\n\t\t int row = table.rowAtPoint(e.getPoint());\n\t\t int col = table.columnAtPoint(e.getPoint());\n\n\t\t // figure out what samples are there\n\t\t // (REFACTOR: LoD says this should be in grid:\n\t\t // grid.getElement(i)?)\n\t\t Element e1 = (Element) grid.getFiles().get(row-1);\n\t\t Element e2 = (Element) grid.getFiles().get(col-1);\n\n\t\t // make a graph\n\t\t List list = new ArrayList(2);\n\t\t list.add(e1);\n\t\t list.add(e2);\n\t\t new GraphWindow(list);\n\t\t }\n\t\t }\n\t\t });\n\t\t */\n        // put the table in a scroller\n        scroll = new JScrollPane(table);\n        scroll.setHorizontalScrollBarPolicy(JScrollPane.HORIZONTAL_SCROLLBAR_ALWAYS);\n        scroll.setVerticalScrollBarPolicy(JScrollPane.VERTICAL_SCROLLBAR_ALWAYS);\n    }\n\n    private void setCellSizes() {\n        int height = (int) (Grid.getCellHeight() * scale) + 2;\n        int width = (int) (Grid.getCellWidth() * scale) + 2;\n        table.setRowHeight(height);\n        for (int i = 0; i < table.getColumnCount(); i++) table.getColumnModel().getColumn(i).setPreferredWidth(width);\n    }\n\n    private JScrollPane scroll;\n\n    private Font cellFont;\n\n    private void recomputeFont() {\n        String requestedFont = App.prefs.getPref(\"corina.grid.font\");\n        Font origFont;\n        if (requestedFont == null)\n            //  Font(); // g.getFont();\n            origFont = new JTable().getFont();\n        else\n            origFont = Font.decode(requestedFont);\n        cellFont = origFont.deriveFont(origFont.getSize() * scale);\n    }\n\n    // cell renderer\n    private class GridRenderer extends JComponent implements TableCellRenderer {\n\n        public Component getTableCellRendererComponent(JTable table, Object value, boolean isSelected, boolean hasFocus, int row, int column) {\n            // set myself, return myself\n            cell = (Grid.Cell) value;\n            hilite = isSelected;\n            back = table.getSelectionBackground();\n            return this;\n        }\n\n        private Color back;\n\n        private boolean hilite;\n\n        private Grid.Cell cell;\n\n        public void paintComponent(Graphics g) {\n            // set font: get original font, and scale it\n            // PERF: new font each time is bad!\n            // this cell is selected -> hilite\n            if (hilite) {\n                g.setColor(back);\n                g.fillRect(0, 0, getWidth() - 1, getHeight() - 1);\n                // FIXME: fore\n                g.setColor(Color.black);\n            }\n            /*\n\t\t\t CELL:\n\t\t\t -- print() should be paint(), or even draw()\n\t\t\t -- i won't need XML any more.  get rid of that.  (loading still?)\n\t\t\t -- print() should take graphics, not graphics2d\n\t\t\t -- take \"override background/foreground\" args?\n\t\t\t */\n            g.setFont(cellFont);\n            cell.print((Graphics2D) g, 0, 0, getWidth(), getHeight(), scale);\n        }\n    }\n\n    // table model for the grid.\n    // EXCELLENT: this is great evidence for why Table shouldn't\n    // extend AbstractTableModel! -- REFACTOR (over there)\n    private class GridTableModel extends AbstractTableModel {\n\n        public int getColumnCount() {\n            return (grid == null ? 0 : grid.size() + 1);\n        }\n\n        public int getRowCount() {\n            return (grid == null ? 0 : grid.size() + 1);\n        }\n\n        public Object getValueAt(int row, int col) {\n            return grid.getCell(row, col);\n        }\n    }\n\n    /**\n     * \t Make a printable object for this crossdating grid.\n     *\n     * \t @return a Printable for this Grid\n     */\n    public Pageable print(PageFormat pageFormat) {\n        return grid.makeHardcopy(pageFormat);\n    }\n\n    /**\n     * \t Returns a title suitable for this view.  It'll probably be a\n     * \t localized version of something like \"Crossdating Grid\".\n     *\n     * \t @return a title for this view\n     */\n    public String toString() {\n        return I18n.getText(\"crossdating_grid\");\n    }\n}\n",
		"id": "/EvoSuiteBenchmark/35_corina/src/main/java/corina/cross/GridView.java",
		"test_prompt": "// GridViewTest.java\n// FIXME: rename to corina.crossdate\npackage corina.cross;\n\nimport java.awt.BorderLayout;\nimport java.awt.Color;\nimport java.awt.Component;\nimport java.awt.Dimension;\nimport java.awt.Font;\nimport java.awt.Graphics;\nimport java.awt.Graphics2D;\nimport java.awt.event.ActionEvent;\nimport java.awt.event.MouseEvent;\nimport java.awt.print.PageFormat;\nimport java.awt.print.Pageable;\nimport java.io.IOException;\nimport java.util.ArrayList;\nimport java.util.List;\nimport javax.swing.AbstractAction;\nimport javax.swing.BorderFactory;\nimport javax.swing.JButton;\nimport javax.swing.JComponent;\nimport javax.swing.JMenuItem;\nimport javax.swing.JPanel;\nimport javax.swing.JPopupMenu;\nimport javax.swing.JScrollPane;\nimport javax.swing.JSlider;\nimport javax.swing.JTable;\nimport javax.swing.event.ChangeEvent;\nimport javax.swing.event.ChangeListener;\nimport javax.swing.table.AbstractTableModel;\nimport javax.swing.table.TableCellRenderer;\nimport java.awt.event.MouseAdapter;\nimport corina.Element;\nimport corina.Sample;\nimport corina.core.App;\nimport corina.editor.Editor;\nimport corina.graph.GraphWindow;\nimport corina.gui.Layout;\nimport corina.ui.I18n;\nimport corina.util.PopupListener;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link GridView}.\n* It contains ten unit test cases for the {@link GridView#print(PageFormat)} method.\n*/\nclass GridViewTest {"
	},
	{
		"original_code": "// Bayesian.java\npackage corina.cross;\n\nimport corina.Sample;\nimport java.io.File;\nimport java.io.BufferedWriter;\nimport java.io.FileWriter;\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\nimport java.io.InputStream;\nimport java.io.InputStreamReader;\nimport java.util.Collections;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.util.HashMap;\nimport java.util.Random;\nimport java.text.DecimalFormat;\n\n/*\n  TODO:\n  -- refactor\n  -- javadoc\n  -- consider splitting into BayesianGenerator(Sampler?) and BayesianConfidence\n  ---- how much is shared\n  -- should be able to compute this for any score, not just highScores\n*/\n// -- \"dijkstra would not like this\" is the understatement of the year.\n/*\n  if i'm going to be doing this much, the interface of Cross isn't ideal --\n  -- it computes the preamble per-crossdate, when it should be only per-file (wasteful)\n  -- it computes the high scores list, which i never use (wasteful, but not nearly as much)\n  -- probably other things, if i looked\n*/\npublic class Bayesian {\n\n    /*\n\n      if i take random pairs of samples (A,B) -- hold that thought -- ok, i'm\n      back.  anyway, to generate a distribution, i can just take 1000 or 10,000\n      or some number of random pairs of samples from a folder and do a full\n      crossdate run on them, and save that distribution.  more info on how to\n      do this is under \"filters\", below.  basically, i can use the user-mode\n      tool i plan to write to generate my first system-mode distributions that\n      will ship with corina.\n\n      ----\n      filters:\n\n      i should add a filter feature to my bayesian computation, so i can come up\n      with different distributions for different preconditions.  the distribution\n      of scores for oak might be different than that for pine, for example.\n      it would be handy to be able to try these sorts of things.\n\n      better yet, it would be VERY handy if users could play around with these\n      sorts of things.  what sort of interface should it have?  Tools -> Crossdating\n      Confidence brings up a window that lists available distribution profiles.\n      by default, there are 3: t-score, trend, and d-score, each created with (say)\n      10,000 random pairs from cornell data, but users can create their own\n      (where will they live?  ~/.corina/distributions/ or ~\\Corina Preferences\\Distributions\\,\n      i would say.)  at any time, a user can create a new distribution (or delete an\n      existing one, except for the builtins), by specifying (1) which algorithm it\n      is for, (2) what filter on samples to use (e.g., species matches \"quer*\"), (3) what\n      folder to get random files from (e.g., G:\\data\\), and (4) how many random pairs to\n      get (e.g., 1000).  it then starts building a distribution.  after it's created,\n      you can always create a new distribution by clicking a \"rebuild\" button.  when\n      it's selected, it shows a graph of the distribution, with markers showing 90%,\n      99%, 99.9%, 99.99%.  each distribution also has a checkbox next to its name,\n      with table header \"on?\".  when you run a crossdate, if the samples you're crossdating\n      meet the filter for an enabled distribution, it uses that distribution to compute\n      the confidence interval.\n\n      excellent description!  now implement it...\n\n      oh, one last note.  if you have a \"t-score, species=quercus\" distribution, when you're running\n      the t-score on 2 oak samples, it should use that; if your next crossdate is oak\n      versus pine, it should fall back to the system t-score distribution.  what if it\n      matches 2 distributions you've made, like \"t-score, species=quercus\" and also\n      \"t-score, range.end>1950\"?  it'll take them in order, then.  in the list you show\n      the user, let the rows be dragged around, and indicate that the first distribution\n      in the list that matches is the one that'll be used.  the system distributions\n      will have a different icon, or be in a different color, and always be at the end\n      of the list, and not be draggable.  problem solved!\n\n      ----\n      usage:\n\n      make an ant rule \"bayes\" that computes bayesian stats for a bunch of samples,\n      and puts the expected distribution in a file (or files -- one per algorithm)\n      that gets included in the jar.  it should never be run by default, because it'll\n      take a while to run.\n\n      ----\n      file:\n\n      the distribution file might look something like this:\n\n      0.0000 - 0.0001: 23\n      0.0001 - 0.0002: 52\n      0.0002 - 0.0003: 72\n      ...\n      or a list of ranges, and numbers of scores seen in that range, one per line.\n\n      using real ranges might be clearer:\n\n      [0.0000, 0.0001): 23\n      [0.0001, 0.0002): 52\n      [0.0002, 0.0003): 72\n\n      ok, given a distribution (Bayesian.Distribution?), how do i display this?\n      as number-of-nines, of course.  if it's <90%, don't display anything;\n      if it's <99%, display \"90%\"; if it's <99.9%, display \"99%\"; etc.\n\n      ----\n      graph:\n\n      if i'm going to display a full-resolution graph for all scores, i ought to use\n      the same graph for scores-of-this-crossdate.  in other words, when a user clicks\n      on the \"histogram\" tab of a crossdate, it ought to show a full-resolution graph\n      of the score distribution of this crossdate, and also a standard distribution\n      (on the same axes), along with the standard 90%,99%,99.9%,... markers on the graph.\n\n      i'll need to rewrite that crossframe tab, perhaps the histogram class, and that\n      crossprinter row (and its usage).\n\n      ----\n      99%, etc.\n\n      actually, the \"traditional\" way is to add fives first, then nines.  so the order\n      would be 50%, 90%, 95%, 99%, 99.5%, 99.9%, 99.95%, 99.99%.\n\n      ----\n      memory\n\n      say you do 1000 pairs -- that's enough for .999 or 99.9% confidence. (note:\n      can't do higher, so be sure to [1] not report higher, and [2] tell user\n      ahead of time what 99.999...% their chosen number-of-pairs will allow.)\n      so for the system distributions, 10,000 pairs is better.  a random (raw) file is\n      maybe 1K, so 10,000 pairs is at most 20,000KB = 20MB, and conceivably a lot less\n      (because there will be duplicates).  of course, we'll have to traverse the entire\n      available directory tree first to count files to ensure randomness, which will\n      be the big bottleneck, but once that's done, i can just snarf <20,000 samples into\n      memory and run the crosses fairly quickly.\n\n      actually, no, i lied.  for 2 files A and B, the cross of A x B results in\n      len(A)+len(B)-2*min_overlap scores.  if they're each 100 years long, i only\n      need to do about 1/100 as many pairs as i'd thought i'd needed, or 100 pairs\n      for 99.99%.  100 pairs @ 1K ea = 200KB, which is far more reasonable.\n      (i'll still run at least 1000 for robustness for the default/system distributions.)\n\n      ----\n      generating distribution\n\n      the first step would be to traverse the entire source tree, counting (enumerating?)\n      files.  once you know how many exist, pick a fixed number of them randomly.\n      if the user wants \"100\" pairs, pick 200 samples, overlaps allowed (but not for\n      samples 2i and 2i+1).  then load all of these into memory (but not duplicates),\n      run the crosses, add the results of the crosses into a Distribution object, and\n      save it.\n\n      so there are 3 phases: enumerating possible files, picking some random ones and\n      loading them, and running the crossdates.  the first two are probably the slowest,\n      but benchmark first to see.  in the end, on a typical computer, it should look\n      like the progressbar goes smoothly and evenly.  it might be 40% in phase 1, 40%\n      in phase 2, and 20% in phase 3.  the text above the progressbar should indicate\n      what it's working on, as well: \"Looking at possible samples...\", \"Loading random\n      samples...\", \"Running crossdates...\".  (if phase 3 is really so fast, \"show graph\n      generated so far\" might be useless.)\n\n      what sort of performance are we looking at here?  let's see...\n    */\n    // make inner classes for guis here: confidence manager, new distribution, generating distribution.\n    // (much easier after i get lisp->java stuff done.)\n    public final static DecimalFormat format = new DecimalFormat(\"#.##%\");\n\n    // ouch!  there's a (slight) catch-22 here: in order to compute the bayesian distribution,\n    // you need to compute the crossdate, and in order to compute the crossdate, you need\n    // to compute the bayesian distribution.  (fortunately, it's not a fatal error, and it\n    // only happens the first time.  but i really should add a flag or something so i can\n    // run crossdates without computeHighScores() being called.)\n    /*\n      \n    */\n    public static float getSignificance(Cross cross, float score) {\n        try {\n            // if distribution for |cross| isn't loaded, load it\n            if (!distros.containsKey(cross.getClass().getName()))\n                distros.put(cross.getClass().getName(), new Bayesian(cross.getClass()));\n            // look it up (it's guaranteed to be there now)\n            Bayesian b = (Bayesian) distros.get(cross.getClass().getName());\n            // look up the significance of |score| for |cross|: it's the\n            // confidence of the LARGEST value which is SMALLER than my value\n            int N = b.intervals.length;\n            for (int i = 1; i < N; i++) if (b.scores[i] > score)\n                return b.intervals[i - 1];\n            // it's bigger than anything we've got: take the last one\n            return b.intervals[N - 1];\n        } catch (IOException ioe) {\n            // bad bad bad! -- actually, since this is part of my jar,\n            // it's a bug, pure and simple.\n            // (fault, missed, blame, responsibility(6)\n            System.out.println(\"ioe in getSignificance() -- \" + ioe);\n            return 0f;\n        } catch (NullPointerException npe) {\n            // HACK!  load() fails with this if there's no blah.intervals file,\n            // so we end up here.\n            // no bayesian data -- what to do?  return 0.0;\n            // that will get rendered in the table as a blank cell,\n            // which is exactly what i want.\n            return 0f;\n        }\n    }\n\n    // keep distributions in memory -- they're so small, i won't worry\n    // about keeping them weakly-referenced or something looney like that.\n    // this is a (classname => bayesian) map.\n    private static Map distros = new HashMap();\n\n    // ------------------------------------------------------------\n    // everything above here is class, below is instance ('cept main)\n    // ------------------------------------------------------------\n    // a (%confidence => score) hash\n    // a list of floats, like [0.5 0.9 0.95 ...]\n    private float[] intervals;\n\n    // a corresponding list of scores, like [0.5 0.5366 0.5499 0.5909 ...]\n    private float[] scores;\n\n    // the name(class) of the algorithm\n    private String algorithm;\n\n    // constructor: from generateDistribution(), originally\n    // constructor: from a jar resource, by Cross, later\n    // (need load-from-file, then)\n    // (need save-to-file, then)\n    // REFACTOR: why doesn't this just load it through Properties?\n    public void load() throws IOException {\n        String input = algorithm + \".intervals\";\n        InputStream stream = getClass().getClassLoader().getResourceAsStream(input);\n        if (stream == null)\n            return;\n        BufferedReader r = null;\n        try {\n            // NULL!\n            r = new BufferedReader(new InputStreamReader(stream));\n            try {\n                String line;\n                List intBuf = new ArrayList();\n                List scoreBuf = new ArrayList();\n                while ((line = r.readLine()) != null) {\n                    // THIS IS THE ONLY THING THAT CAN THROW AN IOE (?)\n                    line = line.trim();\n                    if (line.startsWith(\"#\") || line.length() == 0)\n                        continue;\n                    int equals = line.indexOf('=');\n                    intBuf.add(new Float(line.substring(0, equals)));\n                    scoreBuf.add(new Float(line.substring(equals + 1)));\n                }\n                // copy\n                int n = intBuf.size();\n                intervals = new float[n];\n                scores = new float[n];\n                for (int i = 0; i < n; i++) {\n                    intervals[i] = ((Float) intBuf.get(i)).floatValue();\n                    scores[i] = ((Float) scoreBuf.get(i)).floatValue();\n                }\n            } finally {\n                try {\n                    r.close();\n                } catch (IOException ioe) {\n                    ioe.printStackTrace();\n                }\n            }\n        } finally {\n            try {\n                stream.close();\n            } catch (IOException ioe) {\n                ioe.printStackTrace();\n            }\n        }\n    }\n\n    // load an existing bayesian distribution\n    public Bayesian(Class algorithm) throws IOException {\n        this.algorithm = algorithm.getName();\n        load();\n    }\n\n    // (no filtering capabilities yet -- that would require, uh, closures to do nicely.  crap.)\n    // this pretty much demands threading ability, which means it pretty much needs to be its\n    // own class (getProgress, getState, extends Thread), but that can come with the next iteration.\n    // FIXME: |algorithm| param can simply be the name (as a string) -- why a class?\n    public Bayesian(Class algorithm, String folder, int numberOfPairs) throws IOException {\n        // this is done in 3 phases:\n        // PHASE 1: enumerate files -- assume there might be 50,000 or so\n        File root = new File(folder);\n        long t1 = System.currentTimeMillis();\n        List filenames = new ArrayList();\n        addAllFiles(filenames, root);\n        long t2 = System.currentTimeMillis();\n        System.out.println(\"PHASE 1 (enumeration) took \" + (t2 - t1) + \" milliseconds\");\n        // PHASE 2: pick random files, and load into buffer\n        t1 = System.currentTimeMillis();\n        Random random = new Random();\n        Map samples = new HashMap();\n        List pairs = new ArrayList();\n        for (int i = 0; i < numberOfPairs; i++) {\n            // pick A, and load\n            // compiler is stupid\n            int A = -1;\n            // do\n            //   pick a number [B only: ... that isn't the same as A]\n            //   try to load it\n            // until it's been loaded successfully\n            // then add it to my hash\n            boolean done = false;\n            // compiler is stupid\n            Sample s = null;\n            do {\n                try {\n                    A = random.nextInt(filenames.size());\n                    if (samples.containsKey(filenames.get(A))) {\n                        done = true;\n                        break;\n                    }\n                    s = new Sample((String) filenames.get(A));\n                    // next line is skipped if it couldn't be loaded\n                    done = true;\n                } catch (IOException ioe) {\n                    // don't do anything, |done| stays false in this branch\n                }\n            } while (!done);\n            if (!samples.containsKey(filenames.get(A)))\n                samples.put(filenames.get(A), s);\n            // pick B, distinct from A\n            // compiler is stupid\n            int B = -1;\n            /* boolean */\n            done = false;\n            //\t    Sample s;\n            do {\n                try {\n                    do {\n                        B = random.nextInt(filenames.size());\n                    } while (// until B != A\n                    B == A);\n                    if (samples.containsKey(filenames.get(B))) {\n                        done = true;\n                        break;\n                    }\n                    s = new Sample((String) filenames.get(B));\n                    // next line is skipped if it couldn't be loaded\n                    done = true;\n                } catch (IOException ioe) {\n                    // don't do anything, |done| stays false in this branch\n                }\n            } while (!done);\n            if (!samples.containsKey(filenames.get(B)))\n                samples.put(filenames.get(B), s);\n            // refactor -- that's (virtually) the same crap for A and B\n            // add filenames[A]-filenames[B] to list of pairs\n            Pair pair = new Pair((String) filenames.get(A), (String) filenames.get(B));\n            pairs.add(pair);\n        }\n        // (the compiler+GC probably isn't otherwise smart enough to realize this)\n        filenames = null;\n        t2 = System.currentTimeMillis();\n        System.out.println(\"PHASE 2 (load random files) took \" + (t2 - t1) + \" milliseconds\");\n        // PHASE 3: run crossdates\n        t1 = System.currentTimeMillis();\n        // total number of scores checked\n        long total = 0;\n        List allScores = new ArrayList();\n        for (int i = 0; i < pairs.size(); i++) {\n            // get samples to crossdate\n            Pair pair = (Pair) pairs.get(i);\n            Sample fixed = (Sample) samples.get(pair.fixed);\n            Sample moving = (Sample) samples.get(pair.moving);\n            // run crossdate\n            // FIXME: use reflection to use |algorithm| as specified\n            Cross c = Cross.makeCross(algorithm.getName(), fixed, moving);\n            c.run();\n            // add all scores\n            int n = c.getRange().span();\n            for (int j = 0; j < n; j++) {\n                float score = c.getScoreOLD(j);\n                // bad value; FIXME: shouldn't inf's count?\n                if (Float.isNaN(score) || Float.isInfinite(score))\n                    continue;\n                allScores.add(new Float(score));\n            }\n            // update total\n            total += n;\n        }\n        // yes, it seems bad, but it's only ~10% as expensive as all the run()s\n        Collections.sort(allScores);\n        t2 = System.currentTimeMillis();\n        System.out.println(\"PHASE 3 (run crosses) took \" + (t2 - t1) + \" milliseconds\");\n        // BAD ABSTRACTION -- REFACTOR!  Cross.getFormat() shouldn't be abstract, it should\n        // be a static method: Cross.getFormat(Class algorithm).  it's ugly, and it makes\n        // a smalltalkers cringe, but it's Better Than The Alternatives.\n        // store the confidence intervals (in |this|)\n        intervals = new float[INTERVALS.length];\n        scores = new float[INTERVALS.length];\n        for (int i = 0; i < INTERVALS.length; i++) {\n            // (loop for i in +intervals+ do ...)\n            // must be increasing: double-check that now\n            if (i > 0 && INTERVALS[i] <= INTERVALS[i - 1])\n                throw new IllegalArgumentException(\"oops, bug: INTERVALS array must be increasing\");\n            // figure out which score to take, and get that value\n            // +/-1, maybe?\n            int which = (int) (INTERVALS[i] * allScores.size());\n            float score = ((Float) allScores.get(which)).floatValue();\n            // store it\n            intervals[i] = INTERVALS[i];\n            scores[i] = score;\n        }\n        // fixme: just the class name, not fqdn\n        this.algorithm = algorithm.getName();\n    }\n\n    public void save() throws IOException {\n        // open, and write header\n        String output = algorithm + \".intervals\";\n        BufferedWriter w = new BufferedWriter(new FileWriter(output));\n        try {\n            w.write(\"#\");\n            w.newLine();\n            w.write(\"# Significance intervals for \" + algorithm);\n            w.newLine();\n            w.write(\"#\");\n            w.newLine();\n            // write out the intervals\n            for (int i = 0; i < scores.length; i++) {\n                w.write(intervals[i] + \" = \" + scores[i]);\n                w.newLine();\n            }\n        } finally {\n            try {\n                w.close();\n            } catch (IOException ioe) {\n                ioe.printStackTrace();\n            }\n        }\n    }\n\n    // in theory, you can change these at any time, and it won't break an existing\n    // corina that has old stats files.  but they do have to be monotonically increasing\n    // (a bug is flagged at runtime if they're not).\n    private static final float[] INTERVALS = new float[] { 0.5f, 0.9f, 0.95f, 0.99f, 0.995f, 0.999f, 0.9995f, 0.9999f };\n\n    // (why can't this be automatically generated?  well,\n    // it could be, but it's probably more trouble than it's worth in java.)\n    private void addAllFiles(List filenames, File root) {\n        File[] children = root.listFiles();\n        for (int i = 0; i < children.length; i++) {\n            File child = children[i];\n            if (child.isDirectory())\n                addAllFiles(filenames, child);\n            else\n                filenames.add(child.getPath());\n        }\n    }\n\n    // lisp programmers, cover your eyes.  yes, this takes 7 lines.\n    private static class Pair {\n\n        String fixed, moving;\n\n        Pair(String fixed, String moving) {\n            this.fixed = fixed;\n            this.moving = moving;\n        }\n    }\n\n    // inputs:\n    // -- args[0] = folder\n    // -- args[1] = algorithm (optional, default=t-score)\n    // -- args[2] = number-of-pairs (optional, default=100)\n    public static void main(String[] args) throws Exception /* don't! */\n    {\n        if (args.length < 1 || args.length > 3) {\n            System.err.println(\"whoops: i'm expecting 1-3 arguments:\");\n            System.err.println(\"    -- folder to analyze\");\n            System.err.println(\"    -- algorithm to use (optional, default t-score)\");\n            System.err.println(\"    -- number-of-pairs (optional, default 100)\");\n            System.err.println(\"N.B., 1000 (~1mil scores, 99.999%) takes around 2 minutes,\");\n            System.err.println(\"      100 (~100K scores, 99.99%) takes around 20 seconds, and\");\n            System.err.println(\"      10 (~10K scores, 99.9%) takes around 2 seconds\");\n            System.exit(1);\n        }\n        String folder = args[0];\n        Class algorithm;\n        if (args.length >= 2) {\n            algorithm = Class.forName(args[1]);\n        } else {\n            algorithm = Class.forName(\"corina.cross.TScore\");\n        }\n        int numberOfPairs;\n        if (args.length >= 3) {\n            numberOfPairs = Integer.parseInt(args[2]);\n        } else {\n            numberOfPairs = 100;\n        }\n        Bayesian b = new Bayesian(algorithm, folder, numberOfPairs);\n        b.save();\n    }\n}\n",
		"id": "/EvoSuiteBenchmark/35_corina/src/main/java/corina/cross/Bayesian.java",
		"test_prompt": "// BayesianTest.java\npackage corina.cross;\n\nimport corina.Sample;\nimport java.io.File;\nimport java.io.BufferedWriter;\nimport java.io.FileWriter;\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\nimport java.io.InputStream;\nimport java.io.InputStreamReader;\nimport java.util.Collections;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.util.HashMap;\nimport java.util.Random;\nimport java.text.DecimalFormat;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link Bayesian}.\n* It contains ten unit test cases for the {@link Bayesian#getSignificance(Cross, float)} method.\n*/\nclass BayesianTest {"
	},
	{
		"original_code": "// GridFrame.java\n//\n// This file is part of Corina.\n//\n// Corina is free software; you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation; either version 2 of the License, or\n// (at your option) any later version.\n//\n// Corina is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Corina; if not, write to the Free Software\n// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n//\n// Copyright 2001 Ken Harris <kbh7@cornell.edu>\n//\npackage corina.cross;\n\nimport java.awt.BorderLayout;\nimport java.awt.Component;\nimport java.awt.Dimension;\nimport java.awt.Font;\nimport java.awt.Graphics;\nimport java.awt.Graphics2D;\nimport java.awt.Color;\nimport java.awt.event.ActionEvent;\nimport java.awt.event.MouseAdapter;\nimport java.awt.event.MouseEvent;\nimport java.awt.print.PageFormat;\nimport java.io.IOException;\nimport java.util.ArrayList;\nimport java.util.List;\nimport javax.swing.AbstractAction;\nimport javax.swing.JComponent;\nimport javax.swing.JMenu;\nimport javax.swing.JMenuBar;\nimport javax.swing.JMenuItem;\nimport javax.swing.JScrollPane;\nimport javax.swing.JTable;\nimport javax.swing.table.AbstractTableModel;\nimport javax.swing.table.TableCellRenderer;\nimport corina.Build;\nimport corina.Element;\nimport corina.core.App;\nimport corina.graph.GraphWindow;\nimport corina.gui.FileDialog;\nimport corina.gui.PrintableDocument;\nimport corina.gui.SaveableDocument;\nimport corina.gui.UserCancelledException;\nimport corina.gui.XFrame;\nimport corina.gui.menus.FileMenu;\nimport corina.gui.menus.HelpMenu;\nimport corina.gui.menus.WindowMenu;\nimport corina.prefs.PrefsEvent;\nimport corina.prefs.PrefsListener;\nimport corina.ui.Alert;\nimport corina.ui.Builder;\nimport corina.ui.I18n;\nimport corina.util.Overwrite;\n\n/*\n  TODO:\n -- this class is still used by CanOpener; fix that class to use CrossdateWindow(Grid)\n (WRITEME!), then delete this class.\n \n  -- this class will go away, since grid will be merely a crossdate seq view\n  -- refactor this into GridView, a JPanel\n*/\npublic class GridFrame extends XFrame implements SaveableDocument, PrintableDocument, PrefsListener {\n\n    // gui\n    private JTable output;\n\n    // data\n    private Grid grid = null;\n\n    // saving -- (this seems like it should be higher...)\n    private String filename = null;\n\n    // saveabledocument\n    public boolean isSaved() {\n        // don't worry about deleting grids, for now\n        // fixme\n        return true;\n    }\n\n    // saveabledocument -- yes, we can use save as...\n    public boolean isNameChangeable() {\n        return true;\n    }\n\n    /*\n      REFACTOR: make Grid Saveable(?), and move all of this up to XFrame, which\n      i should rename as DocumentFrame(?).  it's the same for samples, grids, graphs, ...\n    */\n    public void save() {\n        // check filename\n        if (filename == null) {\n            try {\n                filename = FileDialog.showSingle(\"Save\");\n                // try up here, try down there.  can these be merged?  (but there's an if-stmt...)\n                // check for already-exists\n                // should return FAILURE -- how?\n                Overwrite.overwrite(filename);\n            } catch (UserCancelledException uce) {\n                // this should return FAILURE, too -- solution: save() throws UCE\n                return;\n            }\n        }\n        // save!\n        try {\n            grid.save(filename);\n        } catch (IOException ioe) {\n            Alert.error(\"Error saving\", \"Error: \" + ioe.getMessage());\n        }\n    }\n\n    public String getDocumentTitle() {\n        return I18n.getText(\"grid\") + \": \" + filename;\n    }\n\n    public void setFilename(String fn) {\n        filename = fn;\n    }\n\n    public String getFilename() {\n        return filename;\n    }\n\n    // table model for the grid\n    static class GridTableModel extends AbstractTableModel {\n\n        private Grid grid;\n\n        public GridTableModel(Grid grid) {\n            this.grid = grid;\n        }\n\n        public int getColumnCount() {\n            return (grid == null ? 0 : grid.size() + 1);\n        }\n\n        public int getRowCount() {\n            return (grid == null ? 0 : grid.size() + 1);\n        }\n\n        public Object getValueAt(int row, int col) {\n            return grid.getCell(row, col);\n        }\n    }\n\n    // BUG: static!\n    private static float scale = Float.parseFloat(App.prefs.getPref(\"corina.grid.scale\", \"1.0\"));\n\n    // cell renderer\n    static class GridRenderer extends JComponent implements TableCellRenderer {\n\n        public Component getTableCellRendererComponent(JTable table, Object value, boolean isSelected, boolean hasFocus, int row, int column) {\n            // set myself, return myself\n            cell = (Grid.Cell) value;\n            return this;\n        }\n\n        private Grid.Cell cell;\n\n        public void paintComponent(Graphics g) {\n            // set font: get original font, and scale it\n            Font origFont = (App.prefs.getPref(\"corina.grid.font\") == null ? g.getFont() : Font.decode(App.prefs.getPref(\"corina.grid.font\")));\n            Font scaledFont = origFont.deriveFont(origFont.getSize() * scale);\n            // System.out.println(\"new font t=\" + System.currentTimeMillis()); -- for debugging\n            g.setFont(scaledFont);\n            // FIXME: new font each time seems even MORE inefficient!\n            // better: in refresh() just do component.setFont(...), and i'll pick it up automatically, right?\n            // ((Graphics2D) g).scale(scale, scale);\n            // FIXME: agh!  just call g2.scale(scale, scale) -- grid cells shouldn't have to\n            // scale themselves.  but scale() doesn't scale the text as nicely as i do, so\n            // until i figure that out, i'll keep passing in my own scale.\n            // call the printing method (REFACTOR: rename method?  it's not just for printing, anymore... -- draw())\n            cell.print((Graphics2D) g, 0, 0, getWidth(), getHeight(), scale);\n        }\n    }\n\n    // PrintableDocument\n    public Object getPrinter(PageFormat pf) {\n        return grid.makeHardcopy(pf);\n    }\n\n    public String getPrintTitle() {\n        return I18n.getText(\"crossdating_grid\");\n    }\n\n    // c'tor helper\n    private void initTable() {\n        // make a table out of this grid\n        output = new JTable(new GridTableModel(grid));\n        // 0 pixels between cells\n        output.setIntercellSpacing(new Dimension(0, 0));\n        // cell-selection only\n        output.setRowSelectionAllowed(false);\n        // set cell height/width from Grid\n        output.setRowHeight((int) (Grid.getCellHeight() * scale) + 2);\n        for (int i = 0; i < output.getColumnCount(); i++) {\n            int width = (int) (Grid.getCellWidth() * scale) + 2;\n            output.getColumnModel().getColumn(i).setPreferredWidth(width);\n        }\n        // no top-header\n        output.setTableHeader(null);\n        // (i don't remember why i need this; do i need this to keep\n        // it from being fit-to-width?  or do i need it at all?)\n        output.setAutoResizeMode(JTable.AUTO_RESIZE_OFF);\n        // renderer -- use same as for printer\n        output.setDefaultRenderer(Object.class, new GridRenderer());\n        // don't show gridlines\n        output.setShowGrid(false);\n        // respond to double-clicks\n        output.addMouseListener(new MouseAdapter() {\n\n            public void mouseClicked(MouseEvent e) {\n                if (e.getClickCount() == 2) {\n                    // get the (row,col) of the click\n                    int row = output.rowAtPoint(e.getPoint());\n                    int col = output.columnAtPoint(e.getPoint());\n                    // figure out what samples are there\n                    // (REFACTOR: LoD says this should be in grid:\n                    // grid.getElement(i)?)\n                    Element e1 = (Element) grid.getFiles().get(row - 1);\n                    Element e2 = (Element) grid.getFiles().get(col - 1);\n                    // make a graph\n                    List list = new ArrayList(2);\n                    list.add(e1);\n                    list.add(e2);\n                    new GraphWindow(list);\n                }\n            }\n        });\n        // put the table in a scroller\n        JScrollPane scroller = new JScrollPane(output);\n        getContentPane().add(scroller, BorderLayout.CENTER);\n        // REFACTOR: extract GridPanel, GridFrame; then stuffing the panel into a CrossFrame is trivial.\n        // OR: it's just a JTable, right?  would GridComponent (extends JTable) be better?\n    }\n\n    // used by elementspanel -- shortcut for new gridframe(new grid(list))\n    public GridFrame(List s) {\n        grid = new Grid(s);\n        // change cursor to WAIT?\n        grid.run();\n        init();\n    }\n\n    // used by canopener\n    public GridFrame(Grid g) {\n        grid = g;\n        // move grid.run() to init(), and make run() a no-op if already run?\n        init();\n    }\n\n    // never used -- could be, but isn't\n    // TODO: catch runtime exceptions here, and use Bug\n    public GridFrame() {\n        try {\n            // get args\n            List samples = FileDialog.showMulti(I18n.getText(\"grid\"));\n            grid = new Grid(samples);\n            // change cursor to WAIT?\n            grid.run();\n            init();\n        } catch (UserCancelledException uce) {\n            dispose();\n            return;\n        }\n    }\n\n    private void init() {\n        setTitle(I18n.getText(\"crossdating_grid\") + \" - \" + Build.VERSION + \" \" + Build.TIMESTAMP);\n        setDefaultCloseOperation(DISPOSE_ON_CLOSE);\n        initTable();\n        {\n            JMenuBar menubar = new JMenuBar();\n            menubar.add(new FileMenu(this));\n            // menubar.add(edit); // WRITEME -- prefs only?  dummy undo/etc.?\n            menubar.add(new GridViewMenu());\n            if (App.platform.isMac())\n                menubar.add(new WindowMenu(this));\n            menubar.add(new HelpMenu());\n            setJMenuBar(menubar);\n        }\n        App.prefs.addPrefsListener(this);\n        pack();\n        setSize(new Dimension(640, 480));\n        show();\n    }\n\n    private class GridViewMenu extends JMenu {\n\n        GridViewMenu() {\n            super(I18n.getText(\"view\"));\n            JMenuItem graph = Builder.makeMenuItem(\"graph_all\");\n            graph.addActionListener(new AbstractAction() {\n\n                public void actionPerformed(ActionEvent e) {\n                    new GraphWindow(grid.getFiles());\n                }\n            });\n            add(graph);\n            // ---\n            addSeparator();\n            // NEED NEW ABSTRACTION: ZOOM\n            // -- placard component -- override jscrollpane?  jscrollbar?\n            // -- menuitems: zoom in, zoom out, normal/100%, specific values (50, 75, 100, 125, 150, 200, 400?)\n            // -- (consistent everywhere!)\n            // -- \"other...\" value (dialog) for other types of user-zooms (like drag-area)\n            // --\n            // also, the grid should have the option of showing page-breaks (horiz+vert).\n            // view -> {show,hide} page breaks.\n            // would it be easier to make gridcomponent not-a-jtable, then?\n            // zoom in\n            JMenuItem zoomIn = Builder.makeMenuItem(\"zoom_in\");\n            zoomIn.addActionListener(new AbstractAction() {\n\n                public void actionPerformed(ActionEvent e) {\n                    // increase by 0.1\n                    scale += 0.1;\n                    // set pref\n                    App.prefs.setPref(\"corina.grid.scale\", Float.toString(scale));\n                }\n            });\n            add(zoomIn);\n            // zoom out\n            JMenuItem zoomOut = Builder.makeMenuItem(\"zoom_out\");\n            zoomOut.addActionListener(new AbstractAction() {\n\n                public void actionPerformed(ActionEvent e) {\n                    // decrease by 0.1\n                    scale -= 0.1;\n                    // set pref\n                    App.prefs.setPref(\"corina.grid.scale\", Float.toString(scale));\n                }\n            });\n            add(zoomOut);\n        }\n    }\n\n    // PrefsListener\n    public void prefChanged(PrefsEvent e) {\n        if (!e.getPref().equals(\"corina.grid.scale\"))\n            return;\n        // re-read scale\n        scale = Float.parseFloat(App.prefs.getPref(\"corina.grid.scale\", \"1.0\"));\n        // reset sizes\n        output.setRowHeight((int) (Grid.getCellHeight() * scale) + 2);\n        int w = (int) (Grid.getCellWidth() * scale) + 2;\n        for (int i = 0; i < output.getColumnCount(); i++) {\n            output.getColumnModel().getColumn(i).setPreferredWidth(w);\n        }\n        // redraw?  sure.\n        repaint();\n    }\n\n    protected void finalize() throws Throwable {\n        super.finalize();\n        App.prefs.removePrefsListener(this);\n    }\n}\n",
		"id": "/EvoSuiteBenchmark/35_corina/src/main/java/corina/cross/GridFrame_0Test.java",
		"test_prompt": "// GridFrame_0Test.java\n// This file is part of Corina.\n//\n// Corina is free software; you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation; either version 2 of the License, or\n// (at your option) any later version.\n//\n// Corina is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Corina; if not, write to the Free Software\n// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n//\n// Copyright 2001 Ken Harris <kbh7@cornell.edu>\n//\npackage corina.cross;\n\nimport java.awt.BorderLayout;\nimport java.awt.Component;\nimport java.awt.Dimension;\nimport java.awt.Font;\nimport java.awt.Graphics;\nimport java.awt.Graphics2D;\nimport java.awt.Color;\nimport java.awt.event.ActionEvent;\nimport java.awt.event.MouseAdapter;\nimport java.awt.event.MouseEvent;\nimport java.awt.print.PageFormat;\nimport java.io.IOException;\nimport java.util.ArrayList;\nimport java.util.List;\nimport javax.swing.AbstractAction;\nimport javax.swing.JComponent;\nimport javax.swing.JMenu;\nimport javax.swing.JMenuBar;\nimport javax.swing.JMenuItem;\nimport javax.swing.JScrollPane;\nimport javax.swing.JTable;\nimport javax.swing.table.AbstractTableModel;\nimport javax.swing.table.TableCellRenderer;\nimport corina.Build;\nimport corina.Element;\nimport corina.core.App;\nimport corina.graph.GraphWindow;\nimport corina.gui.FileDialog;\nimport corina.gui.PrintableDocument;\nimport corina.gui.SaveableDocument;\nimport corina.gui.UserCancelledException;\nimport corina.gui.XFrame;\nimport corina.gui.menus.FileMenu;\nimport corina.gui.menus.HelpMenu;\nimport corina.gui.menus.WindowMenu;\nimport corina.prefs.PrefsEvent;\nimport corina.prefs.PrefsListener;\nimport corina.ui.Alert;\nimport corina.ui.Builder;\nimport corina.ui.I18n;\nimport corina.util.Overwrite;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link GridFrame}.\n* It contains ten unit test cases for the {@link GridFrame#isSaved()} method.\n*/\nclass GridFrame_0Test {"
	},
	{
		"original_code": "// GridFrame.java\n//\n// This file is part of Corina.\n//\n// Corina is free software; you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation; either version 2 of the License, or\n// (at your option) any later version.\n//\n// Corina is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Corina; if not, write to the Free Software\n// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n//\n// Copyright 2001 Ken Harris <kbh7@cornell.edu>\n//\npackage corina.cross;\n\nimport java.awt.BorderLayout;\nimport java.awt.Component;\nimport java.awt.Dimension;\nimport java.awt.Font;\nimport java.awt.Graphics;\nimport java.awt.Graphics2D;\nimport java.awt.Color;\nimport java.awt.event.ActionEvent;\nimport java.awt.event.MouseAdapter;\nimport java.awt.event.MouseEvent;\nimport java.awt.print.PageFormat;\nimport java.io.IOException;\nimport java.util.ArrayList;\nimport java.util.List;\nimport javax.swing.AbstractAction;\nimport javax.swing.JComponent;\nimport javax.swing.JMenu;\nimport javax.swing.JMenuBar;\nimport javax.swing.JMenuItem;\nimport javax.swing.JScrollPane;\nimport javax.swing.JTable;\nimport javax.swing.table.AbstractTableModel;\nimport javax.swing.table.TableCellRenderer;\nimport corina.Build;\nimport corina.Element;\nimport corina.core.App;\nimport corina.graph.GraphWindow;\nimport corina.gui.FileDialog;\nimport corina.gui.PrintableDocument;\nimport corina.gui.SaveableDocument;\nimport corina.gui.UserCancelledException;\nimport corina.gui.XFrame;\nimport corina.gui.menus.FileMenu;\nimport corina.gui.menus.HelpMenu;\nimport corina.gui.menus.WindowMenu;\nimport corina.prefs.PrefsEvent;\nimport corina.prefs.PrefsListener;\nimport corina.ui.Alert;\nimport corina.ui.Builder;\nimport corina.ui.I18n;\nimport corina.util.Overwrite;\n\n/*\n  TODO:\n -- this class is still used by CanOpener; fix that class to use CrossdateWindow(Grid)\n (WRITEME!), then delete this class.\n \n  -- this class will go away, since grid will be merely a crossdate seq view\n  -- refactor this into GridView, a JPanel\n*/\npublic class GridFrame extends XFrame implements SaveableDocument, PrintableDocument, PrefsListener {\n\n    // gui\n    private JTable output;\n\n    // data\n    private Grid grid = null;\n\n    // saving -- (this seems like it should be higher...)\n    private String filename = null;\n\n    // saveabledocument\n    public boolean isSaved() {\n        // don't worry about deleting grids, for now\n        // fixme\n        return true;\n    }\n\n    // saveabledocument -- yes, we can use save as...\n    public boolean isNameChangeable() {\n        return true;\n    }\n\n    /*\n      REFACTOR: make Grid Saveable(?), and move all of this up to XFrame, which\n      i should rename as DocumentFrame(?).  it's the same for samples, grids, graphs, ...\n    */\n    public void save() {\n        // check filename\n        if (filename == null) {\n            try {\n                filename = FileDialog.showSingle(\"Save\");\n                // try up here, try down there.  can these be merged?  (but there's an if-stmt...)\n                // check for already-exists\n                // should return FAILURE -- how?\n                Overwrite.overwrite(filename);\n            } catch (UserCancelledException uce) {\n                // this should return FAILURE, too -- solution: save() throws UCE\n                return;\n            }\n        }\n        // save!\n        try {\n            grid.save(filename);\n        } catch (IOException ioe) {\n            Alert.error(\"Error saving\", \"Error: \" + ioe.getMessage());\n        }\n    }\n\n    public String getDocumentTitle() {\n        return I18n.getText(\"grid\") + \": \" + filename;\n    }\n\n    public void setFilename(String fn) {\n        filename = fn;\n    }\n\n    public String getFilename() {\n        return filename;\n    }\n\n    // table model for the grid\n    static class GridTableModel extends AbstractTableModel {\n\n        private Grid grid;\n\n        public GridTableModel(Grid grid) {\n            this.grid = grid;\n        }\n\n        public int getColumnCount() {\n            return (grid == null ? 0 : grid.size() + 1);\n        }\n\n        public int getRowCount() {\n            return (grid == null ? 0 : grid.size() + 1);\n        }\n\n        public Object getValueAt(int row, int col) {\n            return grid.getCell(row, col);\n        }\n    }\n\n    // BUG: static!\n    private static float scale = Float.parseFloat(App.prefs.getPref(\"corina.grid.scale\", \"1.0\"));\n\n    // cell renderer\n    static class GridRenderer extends JComponent implements TableCellRenderer {\n\n        public Component getTableCellRendererComponent(JTable table, Object value, boolean isSelected, boolean hasFocus, int row, int column) {\n            // set myself, return myself\n            cell = (Grid.Cell) value;\n            return this;\n        }\n\n        private Grid.Cell cell;\n\n        public void paintComponent(Graphics g) {\n            // set font: get original font, and scale it\n            Font origFont = (App.prefs.getPref(\"corina.grid.font\") == null ? g.getFont() : Font.decode(App.prefs.getPref(\"corina.grid.font\")));\n            Font scaledFont = origFont.deriveFont(origFont.getSize() * scale);\n            // System.out.println(\"new font t=\" + System.currentTimeMillis()); -- for debugging\n            g.setFont(scaledFont);\n            // FIXME: new font each time seems even MORE inefficient!\n            // better: in refresh() just do component.setFont(...), and i'll pick it up automatically, right?\n            // ((Graphics2D) g).scale(scale, scale);\n            // FIXME: agh!  just call g2.scale(scale, scale) -- grid cells shouldn't have to\n            // scale themselves.  but scale() doesn't scale the text as nicely as i do, so\n            // until i figure that out, i'll keep passing in my own scale.\n            // call the printing method (REFACTOR: rename method?  it's not just for printing, anymore... -- draw())\n            cell.print((Graphics2D) g, 0, 0, getWidth(), getHeight(), scale);\n        }\n    }\n\n    // PrintableDocument\n    public Object getPrinter(PageFormat pf) {\n        return grid.makeHardcopy(pf);\n    }\n\n    public String getPrintTitle() {\n        return I18n.getText(\"crossdating_grid\");\n    }\n\n    // c'tor helper\n    private void initTable() {\n        // make a table out of this grid\n        output = new JTable(new GridTableModel(grid));\n        // 0 pixels between cells\n        output.setIntercellSpacing(new Dimension(0, 0));\n        // cell-selection only\n        output.setRowSelectionAllowed(false);\n        // set cell height/width from Grid\n        output.setRowHeight((int) (Grid.getCellHeight() * scale) + 2);\n        for (int i = 0; i < output.getColumnCount(); i++) {\n            int width = (int) (Grid.getCellWidth() * scale) + 2;\n            output.getColumnModel().getColumn(i).setPreferredWidth(width);\n        }\n        // no top-header\n        output.setTableHeader(null);\n        // (i don't remember why i need this; do i need this to keep\n        // it from being fit-to-width?  or do i need it at all?)\n        output.setAutoResizeMode(JTable.AUTO_RESIZE_OFF);\n        // renderer -- use same as for printer\n        output.setDefaultRenderer(Object.class, new GridRenderer());\n        // don't show gridlines\n        output.setShowGrid(false);\n        // respond to double-clicks\n        output.addMouseListener(new MouseAdapter() {\n\n            public void mouseClicked(MouseEvent e) {\n                if (e.getClickCount() == 2) {\n                    // get the (row,col) of the click\n                    int row = output.rowAtPoint(e.getPoint());\n                    int col = output.columnAtPoint(e.getPoint());\n                    // figure out what samples are there\n                    // (REFACTOR: LoD says this should be in grid:\n                    // grid.getElement(i)?)\n                    Element e1 = (Element) grid.getFiles().get(row - 1);\n                    Element e2 = (Element) grid.getFiles().get(col - 1);\n                    // make a graph\n                    List list = new ArrayList(2);\n                    list.add(e1);\n                    list.add(e2);\n                    new GraphWindow(list);\n                }\n            }\n        });\n        // put the table in a scroller\n        JScrollPane scroller = new JScrollPane(output);\n        getContentPane().add(scroller, BorderLayout.CENTER);\n        // REFACTOR: extract GridPanel, GridFrame; then stuffing the panel into a CrossFrame is trivial.\n        // OR: it's just a JTable, right?  would GridComponent (extends JTable) be better?\n    }\n\n    // used by elementspanel -- shortcut for new gridframe(new grid(list))\n    public GridFrame(List s) {\n        grid = new Grid(s);\n        // change cursor to WAIT?\n        grid.run();\n        init();\n    }\n\n    // used by canopener\n    public GridFrame(Grid g) {\n        grid = g;\n        // move grid.run() to init(), and make run() a no-op if already run?\n        init();\n    }\n\n    // never used -- could be, but isn't\n    // TODO: catch runtime exceptions here, and use Bug\n    public GridFrame() {\n        try {\n            // get args\n            List samples = FileDialog.showMulti(I18n.getText(\"grid\"));\n            grid = new Grid(samples);\n            // change cursor to WAIT?\n            grid.run();\n            init();\n        } catch (UserCancelledException uce) {\n            dispose();\n            return;\n        }\n    }\n\n    private void init() {\n        setTitle(I18n.getText(\"crossdating_grid\") + \" - \" + Build.VERSION + \" \" + Build.TIMESTAMP);\n        setDefaultCloseOperation(DISPOSE_ON_CLOSE);\n        initTable();\n        {\n            JMenuBar menubar = new JMenuBar();\n            menubar.add(new FileMenu(this));\n            // menubar.add(edit); // WRITEME -- prefs only?  dummy undo/etc.?\n            menubar.add(new GridViewMenu());\n            if (App.platform.isMac())\n                menubar.add(new WindowMenu(this));\n            menubar.add(new HelpMenu());\n            setJMenuBar(menubar);\n        }\n        App.prefs.addPrefsListener(this);\n        pack();\n        setSize(new Dimension(640, 480));\n        show();\n    }\n\n    private class GridViewMenu extends JMenu {\n\n        GridViewMenu() {\n            super(I18n.getText(\"view\"));\n            JMenuItem graph = Builder.makeMenuItem(\"graph_all\");\n            graph.addActionListener(new AbstractAction() {\n\n                public void actionPerformed(ActionEvent e) {\n                    new GraphWindow(grid.getFiles());\n                }\n            });\n            add(graph);\n            // ---\n            addSeparator();\n            // NEED NEW ABSTRACTION: ZOOM\n            // -- placard component -- override jscrollpane?  jscrollbar?\n            // -- menuitems: zoom in, zoom out, normal/100%, specific values (50, 75, 100, 125, 150, 200, 400?)\n            // -- (consistent everywhere!)\n            // -- \"other...\" value (dialog) for other types of user-zooms (like drag-area)\n            // --\n            // also, the grid should have the option of showing page-breaks (horiz+vert).\n            // view -> {show,hide} page breaks.\n            // would it be easier to make gridcomponent not-a-jtable, then?\n            // zoom in\n            JMenuItem zoomIn = Builder.makeMenuItem(\"zoom_in\");\n            zoomIn.addActionListener(new AbstractAction() {\n\n                public void actionPerformed(ActionEvent e) {\n                    // increase by 0.1\n                    scale += 0.1;\n                    // set pref\n                    App.prefs.setPref(\"corina.grid.scale\", Float.toString(scale));\n                }\n            });\n            add(zoomIn);\n            // zoom out\n            JMenuItem zoomOut = Builder.makeMenuItem(\"zoom_out\");\n            zoomOut.addActionListener(new AbstractAction() {\n\n                public void actionPerformed(ActionEvent e) {\n                    // decrease by 0.1\n                    scale -= 0.1;\n                    // set pref\n                    App.prefs.setPref(\"corina.grid.scale\", Float.toString(scale));\n                }\n            });\n            add(zoomOut);\n        }\n    }\n\n    // PrefsListener\n    public void prefChanged(PrefsEvent e) {\n        if (!e.getPref().equals(\"corina.grid.scale\"))\n            return;\n        // re-read scale\n        scale = Float.parseFloat(App.prefs.getPref(\"corina.grid.scale\", \"1.0\"));\n        // reset sizes\n        output.setRowHeight((int) (Grid.getCellHeight() * scale) + 2);\n        int w = (int) (Grid.getCellWidth() * scale) + 2;\n        for (int i = 0; i < output.getColumnCount(); i++) {\n            output.getColumnModel().getColumn(i).setPreferredWidth(w);\n        }\n        // redraw?  sure.\n        repaint();\n    }\n\n    protected void finalize() throws Throwable {\n        super.finalize();\n        App.prefs.removePrefsListener(this);\n    }\n}\n",
		"id": "/EvoSuiteBenchmark/35_corina/src/main/java/corina/cross/GridFrame_1Test.java",
		"test_prompt": "// GridFrame_1Test.java\n// This file is part of Corina.\n//\n// Corina is free software; you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation; either version 2 of the License, or\n// (at your option) any later version.\n//\n// Corina is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Corina; if not, write to the Free Software\n// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n//\n// Copyright 2001 Ken Harris <kbh7@cornell.edu>\n//\npackage corina.cross;\n\nimport java.awt.BorderLayout;\nimport java.awt.Component;\nimport java.awt.Dimension;\nimport java.awt.Font;\nimport java.awt.Graphics;\nimport java.awt.Graphics2D;\nimport java.awt.Color;\nimport java.awt.event.ActionEvent;\nimport java.awt.event.MouseAdapter;\nimport java.awt.event.MouseEvent;\nimport java.awt.print.PageFormat;\nimport java.io.IOException;\nimport java.util.ArrayList;\nimport java.util.List;\nimport javax.swing.AbstractAction;\nimport javax.swing.JComponent;\nimport javax.swing.JMenu;\nimport javax.swing.JMenuBar;\nimport javax.swing.JMenuItem;\nimport javax.swing.JScrollPane;\nimport javax.swing.JTable;\nimport javax.swing.table.AbstractTableModel;\nimport javax.swing.table.TableCellRenderer;\nimport corina.Build;\nimport corina.Element;\nimport corina.core.App;\nimport corina.graph.GraphWindow;\nimport corina.gui.FileDialog;\nimport corina.gui.PrintableDocument;\nimport corina.gui.SaveableDocument;\nimport corina.gui.UserCancelledException;\nimport corina.gui.XFrame;\nimport corina.gui.menus.FileMenu;\nimport corina.gui.menus.HelpMenu;\nimport corina.gui.menus.WindowMenu;\nimport corina.prefs.PrefsEvent;\nimport corina.prefs.PrefsListener;\nimport corina.ui.Alert;\nimport corina.ui.Builder;\nimport corina.ui.I18n;\nimport corina.util.Overwrite;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link GridFrame}.\n* It contains ten unit test cases for the {@link GridFrame#isNameChangeable()} method.\n*/\nclass GridFrame_1Test {"
	},
	{
		"original_code": "// DScore.java\n//\n// This file is part of Corina.\n//\n// Corina is free software; you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation; either version 2 of the License, or\n// (at your option) any later version.\n//\n// Corina is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Corina; if not, write to the Free Software\n// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n//\n// Copyright 2001 Ken Harris <kbh7@cornell.edu>\n//\npackage corina.cross;\n\nimport corina.Sample;\nimport corina.core.App;\nimport corina.ui.I18n;\n\n/**\n *   Class for computing the hybrid \"D-Score\" (\"Dating Score\").  The\n *   D-score is defined for each year <i>i</i> as:\n *\n *   <blockquote>\n *   <table border=\"0\">\n *   <tr>\n *       <td rowspan=\"2\"><i>D</i> = {</td>\n *       <td>(tr - 50%) &sdot; <i>t</i></td>\n *       <td>tr > 50%</td>\n *   </tr>\n *   <tr>\n *       <td>0.0</td>\n *       <td>tr &le; 50%</td>\n *   </tr>\n *   </table>\n *   </blockquote>\n *\n *   @see corina.cross.TScore\n *   @see corina.cross.Trend\n *\n *   @author Ken Harris &lt;kbh7 <i style=\"color: gray\">at</i> cornell <i style=\"color: gray\">dot</i> edu&gt;\n *   @version $Id: DScore.java,v 1.7 2005/09/07 11:10:32 lucasmo Exp $\n */\npublic class DScore extends Cross {\n\n    /**\n     * The T-Score to use (or compute).\n     */\n    private TScore tscore;\n\n    /**\n     * The Trend scores to use (or compute).\n     */\n    private Trend trend;\n\n    // don't use me\n    protected DScore() {\n    }\n\n    /**\n     *       Construct a D-Score from two uncrossed samples.  This requires\n     *       calculating the T-Score and Trends first, so used this way,\n     *       this is the slowest cross.\n     *\n     *       @param s1 fixed sample to use\n     *       @param s2 moving sample to use\n     */\n    public DScore(Sample s1, Sample s2) {\n        // set fixed, moving\n        super(s1, s2);\n        // create (but don't run) new tscore and trend\n        tscore = new TScore(s1, s2);\n        trend = new Trend(s1, s2);\n    }\n\n    /**\n     *       Construct a D-Score from two (possibly already-run) crosses,\n     *       the T-Score and Trend for a given pair of samples.  If this\n     *       constructor is used and the crosses have previously been run,\n     *       they are not run again (making this the fastest cross).\n     *\n     *       @param t TScore to use\n     *       @param tr Trend to use\n     *       @exception IllegalArgumentException if t and tr don't have the\n     *       same fixed/moving samples\n     */\n    public DScore(TScore t, Trend tr) {\n        // copy sample references\n        super(t.getFixed(), t.getMoving());\n        // make sure they're the same\n        if (t.getFixed() != tr.getFixed() || t.getMoving() != tr.getMoving())\n            throw new IllegalArgumentException(\"samples aren't the same!\");\n        // copy existing tscore and trend\n        this.tscore = t;\n        this.trend = tr;\n    }\n\n    public String getName() {\n        return I18n.getText(\"dscore\");\n    }\n\n    public String getFormat() {\n        return App.prefs.getPref(\"corina.cross.dscore.format\", \"0.00\");\n    }\n\n    public boolean isSignificant(float score, int overlap) {\n        // return 100.0; // said by PIK on 8-may-2002 at 10:18am\n        // said by PIK on 9-may-2002 at 11:37am\n        return score > 40;\n    }\n\n    public float getMinimumSignificant() {\n        return 40;\n    }\n\n    /**\n     *       Run any un-run crosses.\n     *\n     *       @see corina.cross.TScore\n     *       @see corina.cross.Trend\n     */\n    protected void preamble() {\n        // run any un-run crosses --\n        // BUG: uh-oh, what if they're running now?  need runningNow flag?\n        if (!tscore.isFinished())\n            tscore.run();\n        if (!trend.isFinished())\n            trend.run();\n    }\n\n    public int getOverlap() {\n        return App.prefs.getIntPref(\"corina.cross.d-overlap\", 100);\n    }\n\n    /*\n      !!! BUG !!!\n\n      d-score.preamble() calls t-score.run() and trend.run().  it needs this because even\n      d-score.single() needs to know t-score.data and trend.data, and it isn't smart\n      enough to just call t-score.single() and trend.single() for that.\n\n      now, this wouldn't be a problem, except that run() checks to make sure the overlap\n      is enough.  it won't bother to run crossdates if the overlap isn't at least 15\n      (or whatever it is these days), so in those cases it just sets data to a zero-length\n      array (i thought it did -- apparently it isn't -- ???)\n\n      so then along comes d-score.single() to look at t-score.data, and it looks for an\n      index into t-score.data that doesn't exist, because it never had to run that t-score.\n\n      so what should i do?  well, besides the \"it's all messed up\" hideousness, a good short-term\n      solution would be to:\n\n      (1) have d-score.single() simply call t-score.single() and trend.single().  saves quite\n      a bit of computation, i think.\n\n      (2) (was there something else i was thinking of?)\n\n      (3) profit!\n     */\n    public float single() {\n        // what happens if one of those single()s fails?  can it?\n        // return the score\n        return dscore(tscore.single(), trend.single());\n    }\n\n    // don't want to call this every compute()\n    // getMinimumOverlap();\n    private int overlap = 1;\n\n    /**\n     *       Compute a single D-score, i.e., the D-score between the two\n     *       samples for a given possible position.  Because it's a\n     *       composite of two other algorithms that have already been run,\n     *       the first step is to compute the index into the T-score and\n     *       trend vectors.\n     *\n     *       @param offset_fixed index into the fixed sample to start\n     *       @param offset_moving index into the moving sample to start\n     *       @return D-score for these offsets\n     */\n    public float compute(int offset_fixed, int offset_moving) {\n        // figure out what index (into the cross data) we're talking about\n        int index;\n        if (offset_fixed == 0) {\n            // phase 1\n            index = (getMoving().data.size() - overlap) - (offset_moving);\n        } else {\n            // phase 2\n            index = offset_fixed + (getMoving().data.size() - overlap);\n        }\n        // get the t, tr, and compute d\n        float t, tr, d;\n        /**\n         */\n        t = tscore.getScoreOLD(index);\n        tr = trend.getScoreOLD(index);\n        d = dscore(t, tr);\n        /*\n\t  at ***, arrayindexoutofboundsexception, because overlap <\n\t  min_overlap (!)\n\t*/\n        // return it\n        return d;\n    }\n\n    // the guts of the d-score\n    private static float dscore(float tscore, float trend) {\n        return (trend > 0.50f ? 100 * (trend - 0.50f) * tscore : 0.0f);\n    }\n}\n",
		"id": "/EvoSuiteBenchmark/35_corina/src/main/java/corina/cross/DScore_0Test.java",
		"test_prompt": "// DScore_0Test.java\n// This file is part of Corina.\n//\n// Corina is free software; you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation; either version 2 of the License, or\n// (at your option) any later version.\n//\n// Corina is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Corina; if not, write to the Free Software\n// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n//\n// Copyright 2001 Ken Harris <kbh7@cornell.edu>\n//\npackage corina.cross;\n\nimport corina.Sample;\nimport corina.core.App;\nimport corina.ui.I18n;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link DScore}.\n* It contains ten unit test cases for the {@link DScore#isSignificant(float, int)} method.\n*/\nclass DScore_0Test {"
	},
	{
		"original_code": "// DScore.java\n//\n// This file is part of Corina.\n//\n// Corina is free software; you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation; either version 2 of the License, or\n// (at your option) any later version.\n//\n// Corina is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Corina; if not, write to the Free Software\n// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n//\n// Copyright 2001 Ken Harris <kbh7@cornell.edu>\n//\npackage corina.cross;\n\nimport corina.Sample;\nimport corina.core.App;\nimport corina.ui.I18n;\n\n/**\n *   Class for computing the hybrid \"D-Score\" (\"Dating Score\").  The\n *   D-score is defined for each year <i>i</i> as:\n *\n *   <blockquote>\n *   <table border=\"0\">\n *   <tr>\n *       <td rowspan=\"2\"><i>D</i> = {</td>\n *       <td>(tr - 50%) &sdot; <i>t</i></td>\n *       <td>tr > 50%</td>\n *   </tr>\n *   <tr>\n *       <td>0.0</td>\n *       <td>tr &le; 50%</td>\n *   </tr>\n *   </table>\n *   </blockquote>\n *\n *   @see corina.cross.TScore\n *   @see corina.cross.Trend\n *\n *   @author Ken Harris &lt;kbh7 <i style=\"color: gray\">at</i> cornell <i style=\"color: gray\">dot</i> edu&gt;\n *   @version $Id: DScore.java,v 1.7 2005/09/07 11:10:32 lucasmo Exp $\n */\npublic class DScore extends Cross {\n\n    /**\n     * The T-Score to use (or compute).\n     */\n    private TScore tscore;\n\n    /**\n     * The Trend scores to use (or compute).\n     */\n    private Trend trend;\n\n    // don't use me\n    protected DScore() {\n    }\n\n    /**\n     *       Construct a D-Score from two uncrossed samples.  This requires\n     *       calculating the T-Score and Trends first, so used this way,\n     *       this is the slowest cross.\n     *\n     *       @param s1 fixed sample to use\n     *       @param s2 moving sample to use\n     */\n    public DScore(Sample s1, Sample s2) {\n        // set fixed, moving\n        super(s1, s2);\n        // create (but don't run) new tscore and trend\n        tscore = new TScore(s1, s2);\n        trend = new Trend(s1, s2);\n    }\n\n    /**\n     *       Construct a D-Score from two (possibly already-run) crosses,\n     *       the T-Score and Trend for a given pair of samples.  If this\n     *       constructor is used and the crosses have previously been run,\n     *       they are not run again (making this the fastest cross).\n     *\n     *       @param t TScore to use\n     *       @param tr Trend to use\n     *       @exception IllegalArgumentException if t and tr don't have the\n     *       same fixed/moving samples\n     */\n    public DScore(TScore t, Trend tr) {\n        // copy sample references\n        super(t.getFixed(), t.getMoving());\n        // make sure they're the same\n        if (t.getFixed() != tr.getFixed() || t.getMoving() != tr.getMoving())\n            throw new IllegalArgumentException(\"samples aren't the same!\");\n        // copy existing tscore and trend\n        this.tscore = t;\n        this.trend = tr;\n    }\n\n    public String getName() {\n        return I18n.getText(\"dscore\");\n    }\n\n    public String getFormat() {\n        return App.prefs.getPref(\"corina.cross.dscore.format\", \"0.00\");\n    }\n\n    public boolean isSignificant(float score, int overlap) {\n        // return 100.0; // said by PIK on 8-may-2002 at 10:18am\n        // said by PIK on 9-may-2002 at 11:37am\n        return score > 40;\n    }\n\n    public float getMinimumSignificant() {\n        return 40;\n    }\n\n    /**\n     *       Run any un-run crosses.\n     *\n     *       @see corina.cross.TScore\n     *       @see corina.cross.Trend\n     */\n    protected void preamble() {\n        // run any un-run crosses --\n        // BUG: uh-oh, what if they're running now?  need runningNow flag?\n        if (!tscore.isFinished())\n            tscore.run();\n        if (!trend.isFinished())\n            trend.run();\n    }\n\n    public int getOverlap() {\n        return App.prefs.getIntPref(\"corina.cross.d-overlap\", 100);\n    }\n\n    /*\n      !!! BUG !!!\n\n      d-score.preamble() calls t-score.run() and trend.run().  it needs this because even\n      d-score.single() needs to know t-score.data and trend.data, and it isn't smart\n      enough to just call t-score.single() and trend.single() for that.\n\n      now, this wouldn't be a problem, except that run() checks to make sure the overlap\n      is enough.  it won't bother to run crossdates if the overlap isn't at least 15\n      (or whatever it is these days), so in those cases it just sets data to a zero-length\n      array (i thought it did -- apparently it isn't -- ???)\n\n      so then along comes d-score.single() to look at t-score.data, and it looks for an\n      index into t-score.data that doesn't exist, because it never had to run that t-score.\n\n      so what should i do?  well, besides the \"it's all messed up\" hideousness, a good short-term\n      solution would be to:\n\n      (1) have d-score.single() simply call t-score.single() and trend.single().  saves quite\n      a bit of computation, i think.\n\n      (2) (was there something else i was thinking of?)\n\n      (3) profit!\n     */\n    public float single() {\n        // what happens if one of those single()s fails?  can it?\n        // return the score\n        return dscore(tscore.single(), trend.single());\n    }\n\n    // don't want to call this every compute()\n    // getMinimumOverlap();\n    private int overlap = 1;\n\n    /**\n     *       Compute a single D-score, i.e., the D-score between the two\n     *       samples for a given possible position.  Because it's a\n     *       composite of two other algorithms that have already been run,\n     *       the first step is to compute the index into the T-score and\n     *       trend vectors.\n     *\n     *       @param offset_fixed index into the fixed sample to start\n     *       @param offset_moving index into the moving sample to start\n     *       @return D-score for these offsets\n     */\n    public float compute(int offset_fixed, int offset_moving) {\n        // figure out what index (into the cross data) we're talking about\n        int index;\n        if (offset_fixed == 0) {\n            // phase 1\n            index = (getMoving().data.size() - overlap) - (offset_moving);\n        } else {\n            // phase 2\n            index = offset_fixed + (getMoving().data.size() - overlap);\n        }\n        // get the t, tr, and compute d\n        float t, tr, d;\n        /**\n         */\n        t = tscore.getScoreOLD(index);\n        tr = trend.getScoreOLD(index);\n        d = dscore(t, tr);\n        /*\n\t  at ***, arrayindexoutofboundsexception, because overlap <\n\t  min_overlap (!)\n\t*/\n        // return it\n        return d;\n    }\n\n    // the guts of the d-score\n    private static float dscore(float tscore, float trend) {\n        return (trend > 0.50f ? 100 * (trend - 0.50f) * tscore : 0.0f);\n    }\n}\n",
		"id": "/EvoSuiteBenchmark/35_corina/src/main/java/corina/cross/DScore_1Test.java",
		"test_prompt": "// DScore_1Test.java\n// This file is part of Corina.\n//\n// Corina is free software; you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation; either version 2 of the License, or\n// (at your option) any later version.\n//\n// Corina is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Corina; if not, write to the Free Software\n// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n//\n// Copyright 2001 Ken Harris <kbh7@cornell.edu>\n//\npackage corina.cross;\n\nimport corina.Sample;\nimport corina.core.App;\nimport corina.ui.I18n;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link DScore}.\n* It contains ten unit test cases for the {@link DScore#single()} method.\n*/\nclass DScore_1Test {"
	},
	{
		"original_code": "// DScore.java\n//\n// This file is part of Corina.\n//\n// Corina is free software; you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation; either version 2 of the License, or\n// (at your option) any later version.\n//\n// Corina is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Corina; if not, write to the Free Software\n// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n//\n// Copyright 2001 Ken Harris <kbh7@cornell.edu>\n//\npackage corina.cross;\n\nimport corina.Sample;\nimport corina.core.App;\nimport corina.ui.I18n;\n\n/**\n *   Class for computing the hybrid \"D-Score\" (\"Dating Score\").  The\n *   D-score is defined for each year <i>i</i> as:\n *\n *   <blockquote>\n *   <table border=\"0\">\n *   <tr>\n *       <td rowspan=\"2\"><i>D</i> = {</td>\n *       <td>(tr - 50%) &sdot; <i>t</i></td>\n *       <td>tr > 50%</td>\n *   </tr>\n *   <tr>\n *       <td>0.0</td>\n *       <td>tr &le; 50%</td>\n *   </tr>\n *   </table>\n *   </blockquote>\n *\n *   @see corina.cross.TScore\n *   @see corina.cross.Trend\n *\n *   @author Ken Harris &lt;kbh7 <i style=\"color: gray\">at</i> cornell <i style=\"color: gray\">dot</i> edu&gt;\n *   @version $Id: DScore.java,v 1.7 2005/09/07 11:10:32 lucasmo Exp $\n */\npublic class DScore extends Cross {\n\n    /**\n     * The T-Score to use (or compute).\n     */\n    private TScore tscore;\n\n    /**\n     * The Trend scores to use (or compute).\n     */\n    private Trend trend;\n\n    // don't use me\n    protected DScore() {\n    }\n\n    /**\n     *       Construct a D-Score from two uncrossed samples.  This requires\n     *       calculating the T-Score and Trends first, so used this way,\n     *       this is the slowest cross.\n     *\n     *       @param s1 fixed sample to use\n     *       @param s2 moving sample to use\n     */\n    public DScore(Sample s1, Sample s2) {\n        // set fixed, moving\n        super(s1, s2);\n        // create (but don't run) new tscore and trend\n        tscore = new TScore(s1, s2);\n        trend = new Trend(s1, s2);\n    }\n\n    /**\n     *       Construct a D-Score from two (possibly already-run) crosses,\n     *       the T-Score and Trend for a given pair of samples.  If this\n     *       constructor is used and the crosses have previously been run,\n     *       they are not run again (making this the fastest cross).\n     *\n     *       @param t TScore to use\n     *       @param tr Trend to use\n     *       @exception IllegalArgumentException if t and tr don't have the\n     *       same fixed/moving samples\n     */\n    public DScore(TScore t, Trend tr) {\n        // copy sample references\n        super(t.getFixed(), t.getMoving());\n        // make sure they're the same\n        if (t.getFixed() != tr.getFixed() || t.getMoving() != tr.getMoving())\n            throw new IllegalArgumentException(\"samples aren't the same!\");\n        // copy existing tscore and trend\n        this.tscore = t;\n        this.trend = tr;\n    }\n\n    public String getName() {\n        return I18n.getText(\"dscore\");\n    }\n\n    public String getFormat() {\n        return App.prefs.getPref(\"corina.cross.dscore.format\", \"0.00\");\n    }\n\n    public boolean isSignificant(float score, int overlap) {\n        // return 100.0; // said by PIK on 8-may-2002 at 10:18am\n        // said by PIK on 9-may-2002 at 11:37am\n        return score > 40;\n    }\n\n    public float getMinimumSignificant() {\n        return 40;\n    }\n\n    /**\n     *       Run any un-run crosses.\n     *\n     *       @see corina.cross.TScore\n     *       @see corina.cross.Trend\n     */\n    protected void preamble() {\n        // run any un-run crosses --\n        // BUG: uh-oh, what if they're running now?  need runningNow flag?\n        if (!tscore.isFinished())\n            tscore.run();\n        if (!trend.isFinished())\n            trend.run();\n    }\n\n    public int getOverlap() {\n        return App.prefs.getIntPref(\"corina.cross.d-overlap\", 100);\n    }\n\n    /*\n      !!! BUG !!!\n\n      d-score.preamble() calls t-score.run() and trend.run().  it needs this because even\n      d-score.single() needs to know t-score.data and trend.data, and it isn't smart\n      enough to just call t-score.single() and trend.single() for that.\n\n      now, this wouldn't be a problem, except that run() checks to make sure the overlap\n      is enough.  it won't bother to run crossdates if the overlap isn't at least 15\n      (or whatever it is these days), so in those cases it just sets data to a zero-length\n      array (i thought it did -- apparently it isn't -- ???)\n\n      so then along comes d-score.single() to look at t-score.data, and it looks for an\n      index into t-score.data that doesn't exist, because it never had to run that t-score.\n\n      so what should i do?  well, besides the \"it's all messed up\" hideousness, a good short-term\n      solution would be to:\n\n      (1) have d-score.single() simply call t-score.single() and trend.single().  saves quite\n      a bit of computation, i think.\n\n      (2) (was there something else i was thinking of?)\n\n      (3) profit!\n     */\n    public float single() {\n        // what happens if one of those single()s fails?  can it?\n        // return the score\n        return dscore(tscore.single(), trend.single());\n    }\n\n    // don't want to call this every compute()\n    // getMinimumOverlap();\n    private int overlap = 1;\n\n    /**\n     *       Compute a single D-score, i.e., the D-score between the two\n     *       samples for a given possible position.  Because it's a\n     *       composite of two other algorithms that have already been run,\n     *       the first step is to compute the index into the T-score and\n     *       trend vectors.\n     *\n     *       @param offset_fixed index into the fixed sample to start\n     *       @param offset_moving index into the moving sample to start\n     *       @return D-score for these offsets\n     */\n    public float compute(int offset_fixed, int offset_moving) {\n        // figure out what index (into the cross data) we're talking about\n        int index;\n        if (offset_fixed == 0) {\n            // phase 1\n            index = (getMoving().data.size() - overlap) - (offset_moving);\n        } else {\n            // phase 2\n            index = offset_fixed + (getMoving().data.size() - overlap);\n        }\n        // get the t, tr, and compute d\n        float t, tr, d;\n        /**\n         */\n        t = tscore.getScoreOLD(index);\n        tr = trend.getScoreOLD(index);\n        d = dscore(t, tr);\n        /*\n\t  at ***, arrayindexoutofboundsexception, because overlap <\n\t  min_overlap (!)\n\t*/\n        // return it\n        return d;\n    }\n\n    // the guts of the d-score\n    private static float dscore(float tscore, float trend) {\n        return (trend > 0.50f ? 100 * (trend - 0.50f) * tscore : 0.0f);\n    }\n}\n",
		"id": "/EvoSuiteBenchmark/35_corina/src/main/java/corina/cross/DScore_2Test.java",
		"test_prompt": "// DScore_2Test.java\n// This file is part of Corina.\n//\n// Corina is free software; you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation; either version 2 of the License, or\n// (at your option) any later version.\n//\n// Corina is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Corina; if not, write to the Free Software\n// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n//\n// Copyright 2001 Ken Harris <kbh7@cornell.edu>\n//\npackage corina.cross;\n\nimport corina.Sample;\nimport corina.core.App;\nimport corina.ui.I18n;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link DScore}.\n* It contains ten unit test cases for the {@link DScore#compute(int, int)} method.\n*/\nclass DScore_2Test {"
	},
	{
		"original_code": "// MetadataTemplate.java\n//\n// This file is part of Corina.\n//\n// Corina is free software; you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation; either version 2 of the License, or\n// (at your option) any later version.\n//\n// Corina is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Corina; if not, write to the Free Software\n// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n//\n// Copyright 2001 Ken Harris <kbh7@cornell.edu>\n//\npackage corina;\n\nimport corina.util.StringUtils;\nimport corina.ui.I18n;\nimport java.util.Iterator;\nimport java.util.NoSuchElementException;\n\n/**\n *    A list of metadata fields for a Sample.\n *\n *    <p>This class is never instantiated; only\n *    <code>MetadataTemplate.getFields()</code> is ever called, to get a\n *    List of MetadataTemplate.Fields.  A metadata Field is a:</p>\n *\n *    <ul>\n *      <li>key (variable name), like \"dating\"\n *      <li>description, localized, like \"Dating\" or \"Datierung\"\n *      <li>suggested values, like { \"R\" or \"A\" }\n *      <li>read-only flag\n *    </ul>\n *\n *    <p>This class should be user wherever the entire list of metadata\n *    fields for a Sample are listed for editing or display.</p>\n *\n *    <p>Fields get their localized strings from the I18n class.\n *    The keys take the form\n * <pre>\n *    meta.&lt;variable&gt; = &lt;name&gt;\n * </pre>\n *    and\n * <pre>\n *    meta.&lt;variable&gt;.&lt;value&gt; = &lt;name&gt;\n * </pre>\n *    for example, the \"dating\" field in English would be:\n * <pre>\n *    meta.dating = Dating\n *    meta.dating.R = Relative\n *    meta.dating.A = Absolute\n * </pre>\n *    (Free-form fields which don't have a fixed number of possible\n *    values, of course, only need the name string.)</p>\n *\n *    <p>The metadata variables are: id, title, dating, unmeas_pre,\n *    unmeas_post, type, species, format, index_type, sapwood, pith,\n *    terminal, continuous, quality, reconciled, author, comments.</p>\n *\n *    <h2>Left to do</h2>\n *    <ul>\n *      <li>add feature: localize(field, value) => string.\n *          for example, localize(dating, \"R\") => \"Relative\" (in english)\n *\n *      <li>no: make all i18n the job of the user.  remove description\n *          altogether.  the user can say I18n.getText(\"meta.\" + var)\n * \t or I18n.getText(\"meta.\" + var + \".\" + value) -- actually,\n * \t these should have shortcuts here.\n * \t - MetadataTemplate.getDescription(var)\n * \t - MetadataTemplate.getValueDescription(var, value)\n *\n *      <li>why's it not instantiable?  sometimes i think\n *          mt = new MetadataTemplate();\n * \t // iterate over mt.fields...\n * \t would be really nice.\n *\n *      <li>refactor metadata-field-popup component?  (used twice:\n *          MetadataPanel, SearchDialog)\n *\n *      <li>make Field immutable: need read-only interface for |values|\n *\n *      <li>document Field fully\n *      <li>move documentation of Field's fields to Metadata?\n *          (if i make it instantiable, this becomes a non-issue)\n *\n *      <li>change public interface from \"readonly\" to \"editable\"?\n *\n *      <li>\"Filetype\" is a hack -- make it a real field\n *\n *      <li>document: list the keys+values here (currently in Sample?)\n *    </ul>\n *\n *    @author Ken Harris &lt;kbh7 <i style=\"color: gray\">at</i> cornell <i style=\"color: gray\">dot</i> edu&gt;\n *    @version $Id: MetadataTemplate.java,v 1.1 2004/01/18 17:53:47 aaron Exp $\n */\npublic class MetadataTemplate {\n\n    // don't instantiate me\n    private MetadataTemplate() {\n    }\n\n    // metadata fields -- order matters!\n    private static final Field[] FIELDS = { // variable, editable?, [values | lines]\n    // -- (description, help-text, and value-names are in\n    // bundle)\n    new Field(\"title\", true), new Field(\"id\", true), new Field(\"dating\", true, \"R,A\"), new Field(\"unmeas_pre\", true), new Field(\"unmeas_post\", true), new Field(\"type\", true, \"C,H,S\"), new Field(\"species\", true), new Field(\"format\", true, \"R,I\"), // why not \"-1,1,2,3,...\"?  BUG with that + readonly=true\n    new Field(\"index_type\", false), new Field(\"sapwood\", true), new Field(\"pith\", true, \"P,*,N\"), new Field(\"terminal\", true, \"B,W,v,vv\"), new Field(\"continuous\", true, \"C,R,N\"), new Field(\"quality\", true, \"+,++\"), new Field(\"reconciled\", true, \"Y,N\"), new Field(\"author\", false), new Field(\"comments\", true, 4) };\n\n    /**\n     *       Return all of the fields, in order.\n     *\n     *       @return an Iterator which lists all of the metadata fields\n     */\n    public static Iterator getFields() {\n        return new Iterator() {\n\n            private int i = 0;\n\n            public boolean hasNext() {\n                return (i < FIELDS.length);\n            }\n\n            public Object next() {\n                if (hasNext())\n                    return FIELDS[i++];\n                else\n                    throw new NoSuchElementException();\n            }\n\n            public void remove() {\n                throw new UnsupportedOperationException();\n            }\n        };\n    }\n\n    /**\n     *        A variable record, which holds a (variable => description,\n     *        values, readonly) mapping.\n     *\n     *        <p>A metadata field is defined by:</p>\n     *\n     *        <dl>\n     *            <dt>variable (like \"dating\")\n     *            <dd>the key to store this type of data in the metadata hash table\n     *\n     *            <dt>description (like \"Dating\")\n     *            <dd>a short human-readable description for displaying\n     *                in forms and table headers\n     *\n     *            <dt>values (like [\"R\",\"A\"])\n     *            <dd>WRITEME (\"suggested values, if choice, else null\")\n     *\n     *            <dt>readonly (like <i>false</i>)\n     *            <dd>WRITEME (\"is this field read-only?\")\n     *\n     *            <dt>lines (like <i>1</i>)\n     *            <dd>WRITEME (\"number of lines to display\")\n     *        </dl>\n     */\n    public static class Field {\n\n        public Field(String variable, boolean editable) {\n            this.variable = variable;\n            // TODO: this'll get refactored into Field(...)! -- why?\n            this.readonly = !editable;\n            // set description, from |m|\n            this.description = I18n.getText(\"meta.\" + variable);\n        }\n\n        public Field(String variable, boolean editable, int lines) {\n            this(variable, editable);\n            this.lines = lines;\n            this.values = null;\n        }\n\n        public Field(String variable, boolean editable, String values) {\n            this(variable, editable);\n            this.lines = 1;\n            this.values = StringUtils.splitBy(values, ',');\n        }\n\n        private String variable = \"\";\n\n        public String getVariable() {\n            return variable;\n        }\n\n        private String description = \"\";\n\n        public String getDescription() {\n            return description;\n        }\n\n        // document: null means it's free-form!  (do i need a 'type', too?)\n        // TYPES: string, one-of, string (multiple lines), label (ro!).\n        // subclass?\n        // -- StringField\n        // -- ChoiceField (getChoices(), etc.)\n        // -- TextField (just StringField with lines != 1?)\n        // -- LabelField (just like StringField, but users can't edit)\n        public String[] values = null;\n\n        // TODO: give this a nice public interface\n        // used by: DataComponent, MetadataPanel, ElementsPanel\n        public boolean isValidValue(String value) {\n            for (int i = 0; i < values.length; i++) if (values[i].equals(value))\n                return true;\n            return false;\n        }\n\n        private boolean readonly = false;\n\n        public boolean isReadOnly() {\n            return readonly;\n        }\n\n        private int lines = 1;\n\n        public int getLines() {\n            return lines;\n        }\n\n        // TO ADD: \"columns\".  (\"sapwood count\" doesn't need to be as\n        // wide as \"title\" or \"species\")\n        // TO ADD: numbers-only? (types)\n        // store type information?\n        // awt/swing sometimes lets you use objects directly,\n        // and use the toString() value as their label.\n        // so let's provide that.\n        public String toString() {\n            return description;\n        }\n    }\n\n    /**\n     *         Return true if the given string is the name of a field, like\n     *         \"species\".\n     *\n     * \t@param f a string to check\n     * \t@return true, iff it's the name of a metadata field\n     */\n    public static boolean isField(String field) {\n        if (field == null)\n            return false;\n        Iterator i = getFields();\n        while (i.hasNext()) {\n            Field f = (Field) i.next();\n            if (f.variable.equals(field))\n                return true;\n        }\n        return false;\n    }\n\n    /**\n     *       Get a Field, given its key.\n     *\n     *       @param key the key name to look up\n     *       @return the Field which has that key\n     *       @exception ???\n     */\n    public static Field getField(String field) {\n        Iterator i = getFields();\n        while (i.hasNext()) {\n            Field f = (Field) i.next();\n            if (f.variable.equals(field))\n                return f;\n        }\n        // ???\n        throw new NullPointerException();\n    }\n}\n",
		"id": "/EvoSuiteBenchmark/35_corina/src/main/java/corina/MetadataTemplate_0Test.java",
		"test_prompt": "// MetadataTemplate_0Test.java\n// This file is part of Corina.\n//\n// Corina is free software; you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation; either version 2 of the License, or\n// (at your option) any later version.\n//\n// Corina is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Corina; if not, write to the Free Software\n// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n//\n// Copyright 2001 Ken Harris <kbh7@cornell.edu>\n//\npackage corina;\n\nimport corina.util.StringUtils;\nimport corina.ui.I18n;\nimport java.util.Iterator;\nimport java.util.NoSuchElementException;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link MetadataTemplate}.\n* It contains ten unit test cases for the {@link MetadataTemplate#getFields()} method.\n*/\nclass MetadataTemplate_0Test {"
	},
	{
		"original_code": "// MetadataTemplate.java\n//\n// This file is part of Corina.\n//\n// Corina is free software; you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation; either version 2 of the License, or\n// (at your option) any later version.\n//\n// Corina is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Corina; if not, write to the Free Software\n// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n//\n// Copyright 2001 Ken Harris <kbh7@cornell.edu>\n//\npackage corina;\n\nimport corina.util.StringUtils;\nimport corina.ui.I18n;\nimport java.util.Iterator;\nimport java.util.NoSuchElementException;\n\n/**\n *    A list of metadata fields for a Sample.\n *\n *    <p>This class is never instantiated; only\n *    <code>MetadataTemplate.getFields()</code> is ever called, to get a\n *    List of MetadataTemplate.Fields.  A metadata Field is a:</p>\n *\n *    <ul>\n *      <li>key (variable name), like \"dating\"\n *      <li>description, localized, like \"Dating\" or \"Datierung\"\n *      <li>suggested values, like { \"R\" or \"A\" }\n *      <li>read-only flag\n *    </ul>\n *\n *    <p>This class should be user wherever the entire list of metadata\n *    fields for a Sample are listed for editing or display.</p>\n *\n *    <p>Fields get their localized strings from the I18n class.\n *    The keys take the form\n * <pre>\n *    meta.&lt;variable&gt; = &lt;name&gt;\n * </pre>\n *    and\n * <pre>\n *    meta.&lt;variable&gt;.&lt;value&gt; = &lt;name&gt;\n * </pre>\n *    for example, the \"dating\" field in English would be:\n * <pre>\n *    meta.dating = Dating\n *    meta.dating.R = Relative\n *    meta.dating.A = Absolute\n * </pre>\n *    (Free-form fields which don't have a fixed number of possible\n *    values, of course, only need the name string.)</p>\n *\n *    <p>The metadata variables are: id, title, dating, unmeas_pre,\n *    unmeas_post, type, species, format, index_type, sapwood, pith,\n *    terminal, continuous, quality, reconciled, author, comments.</p>\n *\n *    <h2>Left to do</h2>\n *    <ul>\n *      <li>add feature: localize(field, value) => string.\n *          for example, localize(dating, \"R\") => \"Relative\" (in english)\n *\n *      <li>no: make all i18n the job of the user.  remove description\n *          altogether.  the user can say I18n.getText(\"meta.\" + var)\n * \t or I18n.getText(\"meta.\" + var + \".\" + value) -- actually,\n * \t these should have shortcuts here.\n * \t - MetadataTemplate.getDescription(var)\n * \t - MetadataTemplate.getValueDescription(var, value)\n *\n *      <li>why's it not instantiable?  sometimes i think\n *          mt = new MetadataTemplate();\n * \t // iterate over mt.fields...\n * \t would be really nice.\n *\n *      <li>refactor metadata-field-popup component?  (used twice:\n *          MetadataPanel, SearchDialog)\n *\n *      <li>make Field immutable: need read-only interface for |values|\n *\n *      <li>document Field fully\n *      <li>move documentation of Field's fields to Metadata?\n *          (if i make it instantiable, this becomes a non-issue)\n *\n *      <li>change public interface from \"readonly\" to \"editable\"?\n *\n *      <li>\"Filetype\" is a hack -- make it a real field\n *\n *      <li>document: list the keys+values here (currently in Sample?)\n *    </ul>\n *\n *    @author Ken Harris &lt;kbh7 <i style=\"color: gray\">at</i> cornell <i style=\"color: gray\">dot</i> edu&gt;\n *    @version $Id: MetadataTemplate.java,v 1.1 2004/01/18 17:53:47 aaron Exp $\n */\npublic class MetadataTemplate {\n\n    // don't instantiate me\n    private MetadataTemplate() {\n    }\n\n    // metadata fields -- order matters!\n    private static final Field[] FIELDS = { // variable, editable?, [values | lines]\n    // -- (description, help-text, and value-names are in\n    // bundle)\n    new Field(\"title\", true), new Field(\"id\", true), new Field(\"dating\", true, \"R,A\"), new Field(\"unmeas_pre\", true), new Field(\"unmeas_post\", true), new Field(\"type\", true, \"C,H,S\"), new Field(\"species\", true), new Field(\"format\", true, \"R,I\"), // why not \"-1,1,2,3,...\"?  BUG with that + readonly=true\n    new Field(\"index_type\", false), new Field(\"sapwood\", true), new Field(\"pith\", true, \"P,*,N\"), new Field(\"terminal\", true, \"B,W,v,vv\"), new Field(\"continuous\", true, \"C,R,N\"), new Field(\"quality\", true, \"+,++\"), new Field(\"reconciled\", true, \"Y,N\"), new Field(\"author\", false), new Field(\"comments\", true, 4) };\n\n    /**\n     *       Return all of the fields, in order.\n     *\n     *       @return an Iterator which lists all of the metadata fields\n     */\n    public static Iterator getFields() {\n        return new Iterator() {\n\n            private int i = 0;\n\n            public boolean hasNext() {\n                return (i < FIELDS.length);\n            }\n\n            public Object next() {\n                if (hasNext())\n                    return FIELDS[i++];\n                else\n                    throw new NoSuchElementException();\n            }\n\n            public void remove() {\n                throw new UnsupportedOperationException();\n            }\n        };\n    }\n\n    /**\n     *        A variable record, which holds a (variable => description,\n     *        values, readonly) mapping.\n     *\n     *        <p>A metadata field is defined by:</p>\n     *\n     *        <dl>\n     *            <dt>variable (like \"dating\")\n     *            <dd>the key to store this type of data in the metadata hash table\n     *\n     *            <dt>description (like \"Dating\")\n     *            <dd>a short human-readable description for displaying\n     *                in forms and table headers\n     *\n     *            <dt>values (like [\"R\",\"A\"])\n     *            <dd>WRITEME (\"suggested values, if choice, else null\")\n     *\n     *            <dt>readonly (like <i>false</i>)\n     *            <dd>WRITEME (\"is this field read-only?\")\n     *\n     *            <dt>lines (like <i>1</i>)\n     *            <dd>WRITEME (\"number of lines to display\")\n     *        </dl>\n     */\n    public static class Field {\n\n        public Field(String variable, boolean editable) {\n            this.variable = variable;\n            // TODO: this'll get refactored into Field(...)! -- why?\n            this.readonly = !editable;\n            // set description, from |m|\n            this.description = I18n.getText(\"meta.\" + variable);\n        }\n\n        public Field(String variable, boolean editable, int lines) {\n            this(variable, editable);\n            this.lines = lines;\n            this.values = null;\n        }\n\n        public Field(String variable, boolean editable, String values) {\n            this(variable, editable);\n            this.lines = 1;\n            this.values = StringUtils.splitBy(values, ',');\n        }\n\n        private String variable = \"\";\n\n        public String getVariable() {\n            return variable;\n        }\n\n        private String description = \"\";\n\n        public String getDescription() {\n            return description;\n        }\n\n        // document: null means it's free-form!  (do i need a 'type', too?)\n        // TYPES: string, one-of, string (multiple lines), label (ro!).\n        // subclass?\n        // -- StringField\n        // -- ChoiceField (getChoices(), etc.)\n        // -- TextField (just StringField with lines != 1?)\n        // -- LabelField (just like StringField, but users can't edit)\n        public String[] values = null;\n\n        // TODO: give this a nice public interface\n        // used by: DataComponent, MetadataPanel, ElementsPanel\n        public boolean isValidValue(String value) {\n            for (int i = 0; i < values.length; i++) if (values[i].equals(value))\n                return true;\n            return false;\n        }\n\n        private boolean readonly = false;\n\n        public boolean isReadOnly() {\n            return readonly;\n        }\n\n        private int lines = 1;\n\n        public int getLines() {\n            return lines;\n        }\n\n        // TO ADD: \"columns\".  (\"sapwood count\" doesn't need to be as\n        // wide as \"title\" or \"species\")\n        // TO ADD: numbers-only? (types)\n        // store type information?\n        // awt/swing sometimes lets you use objects directly,\n        // and use the toString() value as their label.\n        // so let's provide that.\n        public String toString() {\n            return description;\n        }\n    }\n\n    /**\n     *         Return true if the given string is the name of a field, like\n     *         \"species\".\n     *\n     * \t@param f a string to check\n     * \t@return true, iff it's the name of a metadata field\n     */\n    public static boolean isField(String field) {\n        if (field == null)\n            return false;\n        Iterator i = getFields();\n        while (i.hasNext()) {\n            Field f = (Field) i.next();\n            if (f.variable.equals(field))\n                return true;\n        }\n        return false;\n    }\n\n    /**\n     *       Get a Field, given its key.\n     *\n     *       @param key the key name to look up\n     *       @return the Field which has that key\n     *       @exception ???\n     */\n    public static Field getField(String field) {\n        Iterator i = getFields();\n        while (i.hasNext()) {\n            Field f = (Field) i.next();\n            if (f.variable.equals(field))\n                return f;\n        }\n        // ???\n        throw new NullPointerException();\n    }\n}\n",
		"id": "/EvoSuiteBenchmark/35_corina/src/main/java/corina/MetadataTemplate_1Test.java",
		"test_prompt": "// MetadataTemplate_1Test.java\n// This file is part of Corina.\n//\n// Corina is free software; you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation; either version 2 of the License, or\n// (at your option) any later version.\n//\n// Corina is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Corina; if not, write to the Free Software\n// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n//\n// Copyright 2001 Ken Harris <kbh7@cornell.edu>\n//\npackage corina;\n\nimport corina.util.StringUtils;\nimport corina.ui.I18n;\nimport java.util.Iterator;\nimport java.util.NoSuchElementException;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link MetadataTemplate}.\n* It contains ten unit test cases for the {@link MetadataTemplate#isField(String)} method.\n*/\nclass MetadataTemplate_1Test {"
	},
	{
		"original_code": "// MetadataTemplate.java\n//\n// This file is part of Corina.\n//\n// Corina is free software; you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation; either version 2 of the License, or\n// (at your option) any later version.\n//\n// Corina is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Corina; if not, write to the Free Software\n// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n//\n// Copyright 2001 Ken Harris <kbh7@cornell.edu>\n//\npackage corina;\n\nimport corina.util.StringUtils;\nimport corina.ui.I18n;\nimport java.util.Iterator;\nimport java.util.NoSuchElementException;\n\n/**\n *    A list of metadata fields for a Sample.\n *\n *    <p>This class is never instantiated; only\n *    <code>MetadataTemplate.getFields()</code> is ever called, to get a\n *    List of MetadataTemplate.Fields.  A metadata Field is a:</p>\n *\n *    <ul>\n *      <li>key (variable name), like \"dating\"\n *      <li>description, localized, like \"Dating\" or \"Datierung\"\n *      <li>suggested values, like { \"R\" or \"A\" }\n *      <li>read-only flag\n *    </ul>\n *\n *    <p>This class should be user wherever the entire list of metadata\n *    fields for a Sample are listed for editing or display.</p>\n *\n *    <p>Fields get their localized strings from the I18n class.\n *    The keys take the form\n * <pre>\n *    meta.&lt;variable&gt; = &lt;name&gt;\n * </pre>\n *    and\n * <pre>\n *    meta.&lt;variable&gt;.&lt;value&gt; = &lt;name&gt;\n * </pre>\n *    for example, the \"dating\" field in English would be:\n * <pre>\n *    meta.dating = Dating\n *    meta.dating.R = Relative\n *    meta.dating.A = Absolute\n * </pre>\n *    (Free-form fields which don't have a fixed number of possible\n *    values, of course, only need the name string.)</p>\n *\n *    <p>The metadata variables are: id, title, dating, unmeas_pre,\n *    unmeas_post, type, species, format, index_type, sapwood, pith,\n *    terminal, continuous, quality, reconciled, author, comments.</p>\n *\n *    <h2>Left to do</h2>\n *    <ul>\n *      <li>add feature: localize(field, value) => string.\n *          for example, localize(dating, \"R\") => \"Relative\" (in english)\n *\n *      <li>no: make all i18n the job of the user.  remove description\n *          altogether.  the user can say I18n.getText(\"meta.\" + var)\n * \t or I18n.getText(\"meta.\" + var + \".\" + value) -- actually,\n * \t these should have shortcuts here.\n * \t - MetadataTemplate.getDescription(var)\n * \t - MetadataTemplate.getValueDescription(var, value)\n *\n *      <li>why's it not instantiable?  sometimes i think\n *          mt = new MetadataTemplate();\n * \t // iterate over mt.fields...\n * \t would be really nice.\n *\n *      <li>refactor metadata-field-popup component?  (used twice:\n *          MetadataPanel, SearchDialog)\n *\n *      <li>make Field immutable: need read-only interface for |values|\n *\n *      <li>document Field fully\n *      <li>move documentation of Field's fields to Metadata?\n *          (if i make it instantiable, this becomes a non-issue)\n *\n *      <li>change public interface from \"readonly\" to \"editable\"?\n *\n *      <li>\"Filetype\" is a hack -- make it a real field\n *\n *      <li>document: list the keys+values here (currently in Sample?)\n *    </ul>\n *\n *    @author Ken Harris &lt;kbh7 <i style=\"color: gray\">at</i> cornell <i style=\"color: gray\">dot</i> edu&gt;\n *    @version $Id: MetadataTemplate.java,v 1.1 2004/01/18 17:53:47 aaron Exp $\n */\npublic class MetadataTemplate {\n\n    // don't instantiate me\n    private MetadataTemplate() {\n    }\n\n    // metadata fields -- order matters!\n    private static final Field[] FIELDS = { // variable, editable?, [values | lines]\n    // -- (description, help-text, and value-names are in\n    // bundle)\n    new Field(\"title\", true), new Field(\"id\", true), new Field(\"dating\", true, \"R,A\"), new Field(\"unmeas_pre\", true), new Field(\"unmeas_post\", true), new Field(\"type\", true, \"C,H,S\"), new Field(\"species\", true), new Field(\"format\", true, \"R,I\"), // why not \"-1,1,2,3,...\"?  BUG with that + readonly=true\n    new Field(\"index_type\", false), new Field(\"sapwood\", true), new Field(\"pith\", true, \"P,*,N\"), new Field(\"terminal\", true, \"B,W,v,vv\"), new Field(\"continuous\", true, \"C,R,N\"), new Field(\"quality\", true, \"+,++\"), new Field(\"reconciled\", true, \"Y,N\"), new Field(\"author\", false), new Field(\"comments\", true, 4) };\n\n    /**\n     *       Return all of the fields, in order.\n     *\n     *       @return an Iterator which lists all of the metadata fields\n     */\n    public static Iterator getFields() {\n        return new Iterator() {\n\n            private int i = 0;\n\n            public boolean hasNext() {\n                return (i < FIELDS.length);\n            }\n\n            public Object next() {\n                if (hasNext())\n                    return FIELDS[i++];\n                else\n                    throw new NoSuchElementException();\n            }\n\n            public void remove() {\n                throw new UnsupportedOperationException();\n            }\n        };\n    }\n\n    /**\n     *        A variable record, which holds a (variable => description,\n     *        values, readonly) mapping.\n     *\n     *        <p>A metadata field is defined by:</p>\n     *\n     *        <dl>\n     *            <dt>variable (like \"dating\")\n     *            <dd>the key to store this type of data in the metadata hash table\n     *\n     *            <dt>description (like \"Dating\")\n     *            <dd>a short human-readable description for displaying\n     *                in forms and table headers\n     *\n     *            <dt>values (like [\"R\",\"A\"])\n     *            <dd>WRITEME (\"suggested values, if choice, else null\")\n     *\n     *            <dt>readonly (like <i>false</i>)\n     *            <dd>WRITEME (\"is this field read-only?\")\n     *\n     *            <dt>lines (like <i>1</i>)\n     *            <dd>WRITEME (\"number of lines to display\")\n     *        </dl>\n     */\n    public static class Field {\n\n        public Field(String variable, boolean editable) {\n            this.variable = variable;\n            // TODO: this'll get refactored into Field(...)! -- why?\n            this.readonly = !editable;\n            // set description, from |m|\n            this.description = I18n.getText(\"meta.\" + variable);\n        }\n\n        public Field(String variable, boolean editable, int lines) {\n            this(variable, editable);\n            this.lines = lines;\n            this.values = null;\n        }\n\n        public Field(String variable, boolean editable, String values) {\n            this(variable, editable);\n            this.lines = 1;\n            this.values = StringUtils.splitBy(values, ',');\n        }\n\n        private String variable = \"\";\n\n        public String getVariable() {\n            return variable;\n        }\n\n        private String description = \"\";\n\n        public String getDescription() {\n            return description;\n        }\n\n        // document: null means it's free-form!  (do i need a 'type', too?)\n        // TYPES: string, one-of, string (multiple lines), label (ro!).\n        // subclass?\n        // -- StringField\n        // -- ChoiceField (getChoices(), etc.)\n        // -- TextField (just StringField with lines != 1?)\n        // -- LabelField (just like StringField, but users can't edit)\n        public String[] values = null;\n\n        // TODO: give this a nice public interface\n        // used by: DataComponent, MetadataPanel, ElementsPanel\n        public boolean isValidValue(String value) {\n            for (int i = 0; i < values.length; i++) if (values[i].equals(value))\n                return true;\n            return false;\n        }\n\n        private boolean readonly = false;\n\n        public boolean isReadOnly() {\n            return readonly;\n        }\n\n        private int lines = 1;\n\n        public int getLines() {\n            return lines;\n        }\n\n        // TO ADD: \"columns\".  (\"sapwood count\" doesn't need to be as\n        // wide as \"title\" or \"species\")\n        // TO ADD: numbers-only? (types)\n        // store type information?\n        // awt/swing sometimes lets you use objects directly,\n        // and use the toString() value as their label.\n        // so let's provide that.\n        public String toString() {\n            return description;\n        }\n    }\n\n    /**\n     *         Return true if the given string is the name of a field, like\n     *         \"species\".\n     *\n     * \t@param f a string to check\n     * \t@return true, iff it's the name of a metadata field\n     */\n    public static boolean isField(String field) {\n        if (field == null)\n            return false;\n        Iterator i = getFields();\n        while (i.hasNext()) {\n            Field f = (Field) i.next();\n            if (f.variable.equals(field))\n                return true;\n        }\n        return false;\n    }\n\n    /**\n     *       Get a Field, given its key.\n     *\n     *       @param key the key name to look up\n     *       @return the Field which has that key\n     *       @exception ???\n     */\n    public static Field getField(String field) {\n        Iterator i = getFields();\n        while (i.hasNext()) {\n            Field f = (Field) i.next();\n            if (f.variable.equals(field))\n                return f;\n        }\n        // ???\n        throw new NullPointerException();\n    }\n}\n",
		"id": "/EvoSuiteBenchmark/35_corina/src/main/java/corina/MetadataTemplate_2Test.java",
		"test_prompt": "// MetadataTemplate_2Test.java\n// This file is part of Corina.\n//\n// Corina is free software; you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation; either version 2 of the License, or\n// (at your option) any later version.\n//\n// Corina is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Corina; if not, write to the Free Software\n// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n//\n// Copyright 2001 Ken Harris <kbh7@cornell.edu>\n//\npackage corina;\n\nimport corina.util.StringUtils;\nimport corina.ui.I18n;\nimport java.util.Iterator;\nimport java.util.NoSuchElementException;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link MetadataTemplate}.\n* It contains ten unit test cases for the {@link MetadataTemplate#getField(String)} method.\n*/\nclass MetadataTemplate_2Test {"
	},
	{
		"original_code": "// Clean.java\n//\n// This file is part of Corina.\n//\n// Corina is free software; you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation; either version 2 of the License, or\n// (at your option) any later version.\n//\n// Corina is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Corina; if not, write to the Free Software\n// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n//\n// Copyright 2001 Ken Harris <kbh7@cornell.edu>\n//\npackage corina.manip;\n\nimport corina.Sample;\nimport corina.ui.I18n;\nimport java.util.List;\nimport javax.swing.undo.AbstractUndoableEdit;\nimport javax.swing.undo.CannotUndoException;\nimport javax.swing.undo.CannotRedoException;\n\n/**\n *   Cleans a summed file.  That is, keeps the numerical data, but\n *   removes evidence that it was summed.  Specifically,\n *\n *   <ul>\n *      <li>Clears weiserjahre (<code>wj</code>)\n *      <li>Clears elements (<code>elements</code>)\n *      <li>Clears count (<code>count</code>)\n *      <li>Clears filename\n *   </ul>\n *\n *   <p>The <code>run()</code> method does the dirty work.  It was used\n *   for consistency, only; it probably takes negligible time, so\n *   there's no reason to thread it.</p>\n *\n *   @see Sample\n *\n *   @author Ken Harris &lt;kbh7 <i style=\"color: gray\">at</i> cornell <i style=\"color: gray\">dot</i> edu&gt;\n *   @version $Id: Clean.java,v 1.3 2004/01/18 18:04:25 aaron Exp $\n */\n// i don't like that it extends AbstractUndoableEdit (and therefore\n// has a bunch of public methods), but the alternative is to use an\n// inner or anonymous class to do that, and that's even worse.\n// => no, implementing undoableedit isn't bad at all...\n// clumsy: \"=null\" parts are duplicated.  re-use that code, like (??) does.\n/*\n  TODO: this class should be the simplest class there is; it should\n  only define a manipulate() { clean(); }, where clean() { incr = decr\n  = count = elements = null; filename = null; } -- everything (like\n  undo/redo) else should be handled by a superclass Manipulation.\n*/\npublic class Clean extends AbstractUndoableEdit {\n\n    // sample to clean\n    private Sample s;\n\n    // undo data\n    private List incr, decr;\n\n    private List elements, count;\n\n    private String filename;\n\n    private boolean wasMod;\n\n    public static AbstractUndoableEdit clean(Sample s) {\n        Clean c = new Clean(s);\n        c.cleanSample();\n        // return undo\n        return c;\n    }\n\n    private void cleanSample() {\n        // make backups for undo\n        incr = s.incr;\n        decr = s.decr;\n        elements = s.elements;\n        count = s.count;\n        filename = (String) s.meta.get(\"filename\");\n        wasMod = s.isModified();\n        // erase wj, elements, count, filename\n        s.incr = s.decr = null;\n        s.elements = null;\n        s.count = null;\n        s.meta.remove(\"filename\");\n        s.setModified();\n        // tell watchers\n        s.fireSampleDataChanged();\n        s.fireSampleMetadataChanged();\n        s.fireSampleElementsChanged();\n    }\n\n    public void undo() throws CannotUndoException {\n        super.undo();\n        s.incr = incr;\n        s.decr = decr;\n        s.elements = elements;\n        s.count = count;\n        s.meta.put(\"filename\", filename);\n        if (!wasMod)\n            s.clearModified();\n        // tell watchers\n        s.fireSampleDataChanged();\n        s.fireSampleMetadataChanged();\n        s.fireSampleElementsChanged();\n    }\n\n    public void redo() throws CannotRedoException {\n        super.redo();\n        s.incr = s.decr = null;\n        s.elements = null;\n        s.count = null;\n        s.meta.remove(\"filename\");\n        s.setModified();\n        // tell watchers\n        s.fireSampleDataChanged();\n        s.fireSampleMetadataChanged();\n        s.fireSampleElementsChanged();\n    }\n\n    public String getPresentationName() {\n        return I18n.getText(\"clean\");\n    }\n\n    private Clean(Sample s) {\n        this.s = s;\n    }\n}\n",
		"id": "/EvoSuiteBenchmark/35_corina/src/main/java/corina/manip/Clean.java",
		"test_prompt": "// CleanTest.java\n// This file is part of Corina.\n//\n// Corina is free software; you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation; either version 2 of the License, or\n// (at your option) any later version.\n//\n// Corina is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Corina; if not, write to the Free Software\n// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n//\n// Copyright 2001 Ken Harris <kbh7@cornell.edu>\n//\npackage corina.manip;\n\nimport corina.Sample;\nimport corina.ui.I18n;\nimport java.util.List;\nimport javax.swing.undo.AbstractUndoableEdit;\nimport javax.swing.undo.CannotUndoException;\nimport javax.swing.undo.CannotRedoException;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link Clean}.\n* It contains ten unit test cases for the {@link Clean#clean(Sample)} method.\n*/\nclass CleanTest {"
	},
	{
		"original_code": "// Reverse.java\n//\n// This file is part of Corina.\n//\n// Corina is free software; you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation; either version 2 of the License, or\n// (at your option) any later version.\n//\n// Corina is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Corina; if not, write to the Free Software\n// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n//\n// Copyright 2001 Ken Harris <kbh7@cornell.edu>\n//\npackage corina.manip;\n\nimport corina.Sample;\nimport corina.ui.I18n;\nimport java.util.Collections;\nimport javax.swing.undo.AbstractUndoableEdit;\nimport javax.swing.undo.CannotUndoException;\nimport javax.swing.undo.CannotRedoException;\n\n// reverses a sample's data (and count and wj, if present);\n// undoable.\n// i don't like that it extends AbstractUndoableEdit (and therefore\n// has a bunch of public methods), but the alternative is to use an\n// inner or anonymous class to do that, and that's even worse.\n// -- no, simply implement UndoableEdit.  that's not as hard as it sounds.\n// (see also Clean.java)\n// todo: this should add a \"reversed\" line to the comments.\n// fixme: this is ugly...\npublic class Reverse extends AbstractUndoableEdit {\n\n    private static void reverseSample(Sample s) {\n        // reverse stuff\n        Collections.reverse(s.data);\n        if (s.count != null)\n            Collections.reverse(s.count);\n        if (s.hasWeiserjahre()) {\n            Collections.reverse(s.incr);\n            Collections.reverse(s.decr);\n        }\n        // fire events\n        s.fireSampleDataChanged();\n    }\n\n    public static AbstractUndoableEdit reverse(Sample s) {\n        Reverse r = new Reverse(s);\n        // can't just call redo(), because that calls super.redo() -- hmm...\n        reverseSample(s);\n        s.setModified();\n        s.fireSampleMetadataChanged();\n        // return the undo\n        return r;\n    }\n\n    private Sample sample;\n\n    private boolean wasMod;\n\n    private Reverse(Sample s) {\n        sample = s;\n        wasMod = sample.isModified();\n    }\n\n    public void undo() throws CannotUndoException {\n        super.undo();\n        reverseSample(sample);\n        if (!wasMod)\n            sample.clearModified();\n        // watchers\n        sample.fireSampleMetadataChanged();\n    }\n\n    public void redo() throws CannotRedoException {\n        super.redo();\n        reverseSample(sample);\n        sample.setModified();\n        // watchers\n        sample.fireSampleMetadataChanged();\n    }\n\n    public String getPresentationName() {\n        return I18n.getText(\"reverse\");\n    }\n}\n",
		"id": "/EvoSuiteBenchmark/35_corina/src/main/java/corina/manip/Reverse.java",
		"test_prompt": "// ReverseTest.java\n// This file is part of Corina.\n//\n// Corina is free software; you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation; either version 2 of the License, or\n// (at your option) any later version.\n//\n// Corina is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Corina; if not, write to the Free Software\n// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n//\n// Copyright 2001 Ken Harris <kbh7@cornell.edu>\n//\npackage corina.manip;\n\nimport corina.Sample;\nimport corina.ui.I18n;\nimport java.util.Collections;\nimport javax.swing.undo.AbstractUndoableEdit;\nimport javax.swing.undo.CannotUndoException;\nimport javax.swing.undo.CannotRedoException;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link Reverse}.\n* It contains ten unit test cases for the {@link Reverse#reverse(Sample)} method.\n*/\nclass ReverseTest {"
	},
	{
		"original_code": "// Redate.java\n//\n// This file is part of Corina.\n//\n// Corina is free software; you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation; either version 2 of the License, or\n// (at your option) any later version.\n//\n// Corina is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Corina; if not, write to the Free Software\n// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n//\n// Copyright 2001 Ken Harris <kbh7@cornell.edu>\n//\npackage corina.manip;\n\nimport corina.Range;\nimport corina.Sample;\nimport corina.ui.I18n;\nimport javax.swing.undo.AbstractUndoableEdit;\nimport javax.swing.undo.CannotUndoException;\nimport javax.swing.undo.CannotRedoException;\n\npublic class Redate extends AbstractUndoableEdit {\n\n    // redate-force-relative (do i ever even use this?)\n    public static Redate redate(Sample s, Range r) {\n        return new Redate(s, r, \"R\");\n        // (shouldn't this be a constant somewhere?)\n    }\n\n    public static Redate redate(Sample s, Range r, String dating) {\n        return new Redate(s, r, dating);\n    }\n\n    // ----------------------------------------\n    private Redate(Sample s, Range range, String dating) {\n        this.s = s;\n        this.oldRange = s.range;\n        this.oldDating = (String) s.meta.get(\"dating\");\n        if (oldDating == null)\n            // BUG: why do this?\n            oldDating = \"R\";\n        this.oldMod = s.isModified();\n        this.newRange = range;\n        this.newDating = dating;\n        // do it a first time -- can't just call redo() because\n        // that calls super.redo() (REFACTOR)\n        s.range = newRange;\n        s.meta.put(\"dating\", newDating);\n        s.fireSampleRedated();\n        s.setModified();\n        // for mod flag\n        s.fireSampleMetadataChanged();\n    }\n\n    // undo\n    private Sample s;\n\n    private Range oldRange, newRange;\n\n    private String oldDating, newDating;\n\n    private boolean oldMod;\n\n    public void undo() throws CannotUndoException {\n        super.undo();\n        s.range = oldRange;\n        s.meta.put(\"dating\", oldDating);\n        s.fireSampleRedated();\n        if (!oldMod) {\n            s.clearModified();\n            // for mod flag\n            s.fireSampleMetadataChanged();\n        }\n    }\n\n    public void redo() throws CannotRedoException {\n        super.redo();\n        s.range = newRange;\n        s.meta.put(\"dating\", newDating);\n        s.fireSampleRedated();\n        s.setModified();\n        // for mod flag\n        s.fireSampleMetadataChanged();\n    }\n\n    public String getPresentationName() {\n        return I18n.getText(\"redate\");\n    }\n}\n",
		"id": "/EvoSuiteBenchmark/35_corina/src/main/java/corina/manip/Redate_0Test.java",
		"test_prompt": "// Redate_0Test.java\n// This file is part of Corina.\n//\n// Corina is free software; you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation; either version 2 of the License, or\n// (at your option) any later version.\n//\n// Corina is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Corina; if not, write to the Free Software\n// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n//\n// Copyright 2001 Ken Harris <kbh7@cornell.edu>\n//\npackage corina.manip;\n\nimport corina.Range;\nimport corina.Sample;\nimport corina.ui.I18n;\nimport javax.swing.undo.AbstractUndoableEdit;\nimport javax.swing.undo.CannotUndoException;\nimport javax.swing.undo.CannotRedoException;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link Redate}.\n* It contains ten unit test cases for the {@link Redate#redate(Sample, Range)} method.\n*/\nclass Redate_0Test {"
	},
	{
		"original_code": "// Redate.java\n//\n// This file is part of Corina.\n//\n// Corina is free software; you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation; either version 2 of the License, or\n// (at your option) any later version.\n//\n// Corina is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Corina; if not, write to the Free Software\n// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n//\n// Copyright 2001 Ken Harris <kbh7@cornell.edu>\n//\npackage corina.manip;\n\nimport corina.Range;\nimport corina.Sample;\nimport corina.ui.I18n;\nimport javax.swing.undo.AbstractUndoableEdit;\nimport javax.swing.undo.CannotUndoException;\nimport javax.swing.undo.CannotRedoException;\n\npublic class Redate extends AbstractUndoableEdit {\n\n    // redate-force-relative (do i ever even use this?)\n    public static Redate redate(Sample s, Range r) {\n        return new Redate(s, r, \"R\");\n        // (shouldn't this be a constant somewhere?)\n    }\n\n    public static Redate redate(Sample s, Range r, String dating) {\n        return new Redate(s, r, dating);\n    }\n\n    // ----------------------------------------\n    private Redate(Sample s, Range range, String dating) {\n        this.s = s;\n        this.oldRange = s.range;\n        this.oldDating = (String) s.meta.get(\"dating\");\n        if (oldDating == null)\n            // BUG: why do this?\n            oldDating = \"R\";\n        this.oldMod = s.isModified();\n        this.newRange = range;\n        this.newDating = dating;\n        // do it a first time -- can't just call redo() because\n        // that calls super.redo() (REFACTOR)\n        s.range = newRange;\n        s.meta.put(\"dating\", newDating);\n        s.fireSampleRedated();\n        s.setModified();\n        // for mod flag\n        s.fireSampleMetadataChanged();\n    }\n\n    // undo\n    private Sample s;\n\n    private Range oldRange, newRange;\n\n    private String oldDating, newDating;\n\n    private boolean oldMod;\n\n    public void undo() throws CannotUndoException {\n        super.undo();\n        s.range = oldRange;\n        s.meta.put(\"dating\", oldDating);\n        s.fireSampleRedated();\n        if (!oldMod) {\n            s.clearModified();\n            // for mod flag\n            s.fireSampleMetadataChanged();\n        }\n    }\n\n    public void redo() throws CannotRedoException {\n        super.redo();\n        s.range = newRange;\n        s.meta.put(\"dating\", newDating);\n        s.fireSampleRedated();\n        s.setModified();\n        // for mod flag\n        s.fireSampleMetadataChanged();\n    }\n\n    public String getPresentationName() {\n        return I18n.getText(\"redate\");\n    }\n}\n",
		"id": "/EvoSuiteBenchmark/35_corina/src/main/java/corina/manip/Redate_1Test.java",
		"test_prompt": "// Redate_1Test.java\n// This file is part of Corina.\n//\n// Corina is free software; you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation; either version 2 of the License, or\n// (at your option) any later version.\n//\n// Corina is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Corina; if not, write to the Free Software\n// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n//\n// Copyright 2001 Ken Harris <kbh7@cornell.edu>\n//\npackage corina.manip;\n\nimport corina.Range;\nimport corina.Sample;\nimport corina.ui.I18n;\nimport javax.swing.undo.AbstractUndoableEdit;\nimport javax.swing.undo.CannotUndoException;\nimport javax.swing.undo.CannotRedoException;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link Redate}.\n* It contains ten unit test cases for the {@link Redate#redate(Sample, Range, String)} method.\n*/\nclass Redate_1Test {"
	},
	{
		"original_code": "// Reconcile.java\n//\n// This file is part of Corina.\n//\n// Corina is free software; you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation; either version 2 of the License, or\n// (at your option) any later version.\n//\n// Corina is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Corina; if not, write to the Free Software\n// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n//\n// Copyright 2001 Ken Harris <kbh7@cornell.edu>\n//\npackage corina.manip;\n\nimport corina.Year;\nimport corina.Sample;\nimport corina.ui.Builder;\nimport java.io.File;\nimport java.io.IOException;\nimport java.io.FileNotFoundException;\nimport java.util.List;\nimport java.util.ArrayList;\nimport javax.swing.Icon;\nimport javax.swing.ImageIcon;\n\n/**\n *   <p>Class for assisting users in reconciling two Samples (actually\n *   two different measurements of the same sample).</p>\n *\n *   <p>Two measurements are considered \"reconciled\" when:</p>\n *\n *   <ol>\n *\n *     <li>they are the same length</li>\n *\n *     <li>all corresponding measurements are within 3% (3% of the\n *     smaller of the measurments)</li>\n *\n *     <li>all corresponding trends are the same</li>\n *\n *   </ol>\n *\n *   <p>This class will point out whether two samples are reconciled,\n *   and if not, where they differ.</p>\n *\n *   @author Ken Harris &lt;kbh7 <i style=\"color: gray\">at</i> cornell <i style=\"color: gray\">dot</i> edu&gt;\n *   @version $Id: Reconcile.java,v 1.5 2004/01/18 18:04:25 aaron Exp $\n */\npublic class Reconcile {\n\n    private Sample s1, s2;\n\n    // to do:\n    // - provide buttons for \"open a-reading\", etc.?\n    // - interface to graph?\n    // given the filename of an A reading, return the filename of the\n    // C reading, or vice versa.  the return value is guaranteed to be\n    // a file on disk (though not necessarily loadable as a sample).\n    // if it's not obvious what the other reading is, throws filenotfoundexception.\n    public static String guessOtherReading(String filename) throws FileNotFoundException {\n        // assume it's of the form \".../blah/aaa{A,C}.ext\".  (this routine\n        // fails for filename=\".abc\")\n        // step 1: look for the last dot\n        int dot = filename.lastIndexOf('.');\n        // step 2: pick out the reading, usu. 'A' or 'C'\n        int reading = (dot == -1 ? filename.length() - 1 : dot - 1);\n        char ac = Character.toUpperCase(filename.charAt(reading));\n        // step 3: what's the other reading?  [A,B,C,D] => [C,D,A,B]\n        switch(ac) {\n            case 'A':\n                ac = 'C';\n                break;\n            case 'B':\n                ac = 'D';\n                break;\n            case 'C':\n                ac = 'A';\n                break;\n            case 'D':\n                ac = 'B';\n                break;\n            default:\n                // dunno, give up\n                throw new FileNotFoundException();\n        }\n        // step 4: construct the hypothetical filename\n        StringBuffer target = new StringBuffer(filename);\n        target.setCharAt(reading, ac);\n        // good?\n        if (new File(target.toString()).exists())\n            return target.toString();\n        // try lower-case, just in case\n        target.setCharAt(reading, Character.toLowerCase(ac));\n        if (new File(target.toString()).exists())\n            return target.toString();\n        // no?  give up.\n        throw new FileNotFoundException();\n    }\n\n    /**\n     *       Construct a new reconciliation from two given samples.\n     *\n     *       @param a the A-reading\n     *       @param c the C-reading\n     */\n    public Reconcile(Sample a, Sample c) {\n        this.s1 = a;\n        this.s2 = c;\n        // compute total length of first sample\n        n = s1.data.size();\n        checkLength();\n        // fast-fail here -- DESIGN: is this what i want?\n        //        if (s1.data.size() != s2.data.size())\n        //            return;\n        check3Percent();\n        checkTrends();\n    }\n\n    /**\n     *       Return a title for this reconciliation.\n     *\n     *       @return this reconciliation's title\n     */\n    public String toString() {\n        // DOES THIS EVER GET USED?\n        return \"Reconciliation of \\\"\" + s1 + \"\\\" and \\\"\" + s2 + \"\\\"\";\n    }\n\n    // length\n    private int n;\n\n    interface Rule {\n\n        // String toString();\n        Icon getIcon();\n    }\n\n    List length = new ArrayList();\n\n    class LengthRule implements Rule {\n\n        int n, m;\n\n        public LengthRule(int n, int m) {\n            this.n = n;\n            this.m = m;\n        }\n\n        public String toString() {\n            return \"Lengths don't match: \" + n + \" versus \" + m;\n        }\n\n        public Icon getIcon() {\n            return lengthIcon;\n        }\n    }\n\n    Icon lengthIcon, trendIcon, percentIcon;\n\n    {\n        lengthIcon = Builder.getIcon(\"bad-length.png\");\n        trendIcon = Builder.getIcon(\"bad-trend.png\");\n        percentIcon = Builder.getIcon(\"bad-percent.png\");\n    }\n\n    // check length -- needed?\n    // BUG: this isn't the sort of length rule i want to have\n    // i want to report _missing_years_\n    private void checkLength() {\n        int m = s2.data.size();\n        if (m != n)\n            length.add(new LengthRule(n, m));\n    }\n\n    // given 2 values, compute the trend between them:\n    // decreasing==-1, increasing==+1, stayssame==0\n    // -- WHA?  why don't i use trend.java?\n    private int trend(int d1, int d2) {\n        if (d1 < d2)\n            return +1;\n        if (d1 > d2)\n            return -1;\n        return 0;\n    }\n\n    List trends = new ArrayList();\n\n    class TrendRule implements Rule {\n\n        private Year y;\n\n        public TrendRule(Year y) {\n            this.y = y;\n        }\n\n        public String toString() {\n            return \"Differing trend between years \" + y + \" and \" + (y.add(1));\n        }\n\n        public Icon getIcon() {\n            return trendIcon;\n        }\n    }\n\n    // check trends\n    private void checkTrends() {\n        int w1 = ((Number) s1.data.get(0)).intValue();\n        int w2 = ((Number) s2.data.get(0)).intValue();\n        for (int i = 1; i < n; i++) {\n            // store widths/\"previous\"\n            int w1p = w1;\n            int w2p = w2;\n            // get next year's widths\n            w1 = ((Number) s1.data.get(i)).intValue();\n            w2 = ((Number) s2.data.get(i)).intValue();\n            // compute trends -- possible (desireable) to use cross.Trend here?\n            int trend1 = trend(w1p, w1);\n            int trend2 = trend(w2p, w2);\n            // compare trends -- \"with trends like these, who needs ...\"\n            if (trend1 != trend2) {\n                // report bad trend\n                trends.add(new TrendRule(s1.range.getStart().add(i - 1)));\n            }\n        }\n    }\n\n    List percents = new ArrayList();\n\n    class PercentRule implements Rule {\n\n        Year y;\n\n        int a, c;\n\n        public PercentRule(Year y, int a, int c) {\n            this.y = y;\n            this.a = a;\n            this.c = c;\n        }\n\n        public String toString() {\n            return \"Differing measurements in year \" + y + \": \" + a + \" versus \" + c;\n        }\n\n        public Icon getIcon() {\n            return percentIcon;\n        }\n    }\n\n    // check 3%\n    private void check3Percent() {\n        for (int i = 0; i < n; i++) {\n            // get widths, as floats\n            float w1 = ((Number) s1.data.get(i)).floatValue();\n            float w2 = ((Number) s2.data.get(i)).floatValue();\n            // w_min = minimum(w1, w2); w_max = max.\n            float w_min = Math.min(w1, w2);\n            float w_max = Math.max(w1, w2);\n            // threePct = 3% of w_min, rounded up\n            // EXTRACT CONSTANT!\n            float threePct = (float) Math.ceil(0.03 * w_min);\n            // is w_max <= w_min + threePct?\n            if (w_max > w_min + threePct) {\n                // report bad 3%\n                percents.add(new PercentRule(s1.range.getStart().add(i), (int) w1, (int) w2));\n            }\n        }\n    }\n\n    // (it's fairly easy ot generate an HTML report from the rules, if you really want one.)\n    // --------\n    // mark both samples as reconciled\n    // -- set ;RECONCILED field to Y\n    // -- rename to \".REC\", if possible\n    public void markAsReconciled() throws IOException {\n        s1.meta.put(\"reconciled\", \"Y\");\n        s2.meta.put(\"reconciled\", \"Y\");\n        // change each filename to \".rec\"\n        changeExtension(s1, \"REC\");\n        changeExtension(s2, \"REC\");\n        // BUG: doesn't deal with possible errors:\n        // -- file already exists\n        // ---- ask user: \"blah.rec already exists\"?\n        // ---- this button shouldn't be enabled in that case\n        // -- file can't be saved\n        // ---- that's a normal error case (?)\n        // ---- no, that doesn't come up here (but it should -- BUG!)\n        // -- file doesn't have meta/filename\n        // ---- can this ever happen?  sure, create a new sample, then rec it.\n    }\n\n    // BUG: OpenRecent should get the new filename, then!  (or any time a file\n    // is renamed)\n    private void changeExtension(Sample s, String ext) throws IOException {\n        // -- make .rec filename\n        File f = new File((String) s.meta.get(\"filename\"));\n        int dot = f.getName().indexOf('.');\n        String rec;\n        if (dot == -1)\n            rec = f.getName() + \".\" + ext;\n        else\n            rec = f.getName().substring(0, dot) + \".\" + ext;\n        // -- set my filename to that\n        s.meta.put(\"filename\", f.getParent() + File.separator + rec);\n        // -- rename old file to that file\n        f.renameTo(new File(f.getParent() + File.separator + rec));\n        // save!\n        s.save();\n    }\n}\n",
		"id": "/EvoSuiteBenchmark/35_corina/src/main/java/corina/manip/Reconcile.java",
		"test_prompt": "// ReconcileTest.java\n// This file is part of Corina.\n//\n// Corina is free software; you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation; either version 2 of the License, or\n// (at your option) any later version.\n//\n// Corina is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Corina; if not, write to the Free Software\n// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n//\n// Copyright 2001 Ken Harris <kbh7@cornell.edu>\n//\npackage corina.manip;\n\nimport corina.Year;\nimport corina.Sample;\nimport corina.ui.Builder;\nimport java.io.File;\nimport java.io.IOException;\nimport java.io.FileNotFoundException;\nimport java.util.List;\nimport java.util.ArrayList;\nimport javax.swing.Icon;\nimport javax.swing.ImageIcon;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link Reconcile}.\n* It contains ten unit test cases for the {@link Reconcile#guessOtherReading(String)} method.\n*/\nclass ReconcileTest {"
	},
	{
		"original_code": "// Sum.java\n//\n// This file is part of Corina.\n//\n// Corina is free software; you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation; either version 2 of the License, or\n// (at your option) any later version.\n//\n// Corina is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Corina; if not, write to the Free Software\n// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n//\n// Copyright 2001 Ken Harris <kbh7@cornell.edu>\n//\npackage corina.manip;\n\nimport corina.Year;\nimport corina.Range;\nimport corina.Sample;\nimport corina.Element;\nimport java.io.IOException;\nimport java.util.List;\nimport java.util.ArrayList;\n\n/**\n *   A \"sum\" of two or more datasets is the average of those datasets.\n *\n *   There are two sum() methods, corresponding to two ways in which\n *   sums are made:\n *\n *   <ul>\n *\n *     <li> sum(List) makes a master from a list of elements.  This\n *     corresponds to the New &gt; Sum menuitem.  The user chooses any\n *     number of samples to sum, and a new master is created.</li>\n *\n *     <li> sum(Sample) reconstructs a master in-place from its\n *     elements.  This corresponds to the Sum &gt; Re-Sum menuitem.  The\n *     user already has a master, and either added/removed some\n *     elements, or changed some data in one of the elements.\n *     Re-summing returns the same master that was given.</li>\n *\n *   </ul>\n *\n *   @see Element\n *\n *   @author Ken Harris &lt;kbh7 <i style=\"color: gray\">at</i> cornell <i style=\"color: gray\">dot</i> edu&gt;\n *   @version $Id: Sum.java,v 1.3 2004/01/18 18:04:25 aaron Exp $\n */\npublic class Sum {\n\n    // TODO:\n    // - make Undoable?  this probably isn't *that* useful.\n    // - if exactly one file is indexed, say which it is (and vice versa) -- or 2? 3?...\n    // load all elements, and stuff 'em into a buffer.\n    // (OBSOLETE once element-sample is no longer an important distinction!)\n    private static Sample[] loadIntoBuffer(List elements) throws IOException {\n        // count number of active elements\n        int numActive = 0, numTotal = elements.size();\n        for (int i = 0; i < numTotal; i++) if (((Element) elements.get(i)).isActive())\n            numActive++;\n        // allocate buffer\n        Sample[] buf = new Sample[numActive];\n        // load active elements into buffer\n        int numLoaded = 0;\n        for (int i = 0; i < numTotal; i++) if (((Element) elements.get(i)).active)\n            buf[numLoaded++] = ((Element) elements.get(i)).load();\n        // return array\n        return buf;\n    }\n\n    /**\n     *        Compute the union of all the ranges of elements.  (Assumes\n     *        |elements| holds at least one element.)  For sums using the\n     *        intersection of the ranges instead, simply replace \"union\" with\n     *        \"intersection\" in the loop.\n     *\n     *      From the user's point of view, it would be better to\n     *      provide the option (for example):\n     *\n     * <pre>\n     *      (*) union (1001-1050)\n     *      ( ) intersection (1010-1036)\n     * </pre>\n     *\n     *      (with \"intersection\" dimmed if the range is empty).\n     */\n    private static Range computeRange(Sample[] elements) {\n        // yup, it's just (reduce #'range-union elements #'sample-range).\n        Range range = elements[0].range;\n        for (int i = 1; i < elements.length; i++) range = range.union(elements[i].range);\n        return range;\n    }\n\n    /**\n     *       Are the elements all raw, or all indexed?\n     *\n     *       @param elements an array to test\n     *       @return true, iff all of the elements in the array use the\n     *       same units\n     */\n    private static boolean consistentUnits(Sample[] elements) {\n        // yup, it's just (apply #'= (map 'list 'sample-format elements)).\n        if (elements.length == 0)\n            return true;\n        boolean isIndexed = elements[0].isIndexed();\n        for (int i = 1; i < elements.length; i++) if (isIndexed != elements[i].isIndexed())\n            return false;\n        return true;\n    }\n\n    // files which should watch for these exceptions:\n    // - Browser, Editor, FileMenu, XMenubar, UnitTests\n    // TODO: when they can all handle it, change it to extend merely Exception.\n    // (shouldn't i change this first, so the JSL is in full effect?)\n    // an exception that means \"there's a gap in the sum\"\n    public static class GapInSumException extends IllegalArgumentException {\n        // sum_error_gap\n    }\n\n    // an exception that means \"you're trying to mix raw and indexed files, dork\"\n    public static class InconsistentUnitsException extends IllegalArgumentException {\n        // sum_error_mixed\n    }\n\n    // load elements, sum them, and store into result (returns result, too)\n    private static Sample sum(Sample result, List elements) throws IOException {\n        // step 0: load all elements, and stuff 'em into a buffer\n        Sample[] buf = loadIntoBuffer(elements);\n        // special case: zero elements!\n        if (buf.length == 0) {\n            // \"skip to step 6\" would be nice...\n            // default empty range (1001-1000)\n            result.range = new Range();\n            result.data = new ArrayList();\n            result.count = new ArrayList();\n            result.incr = new ArrayList();\n            result.decr = new ArrayList();\n            result.elements = elements;\n            // let's say no data = raw\n            result.meta.put(\"format\", \"R\");\n            result.setModified();\n            result.fireSampleDataChanged();\n            result.fireSampleMetadataChanged();\n            return result;\n        }\n        // step 0.5: verify units (raw/indexed)\n        if (!consistentUnits(buf))\n            throw new InconsistentUnitsException();\n        // save units for later\n        boolean isIndexed = buf[0].isIndexed();\n        // HERE'S where i'd identify single (or a few) wrong-unit\n        // samples.  how to record/report?\n        // step 1: compute max range\n        Range range = computeRange(buf);\n        // step 2: make arrays (all 0's) for computation\n        int n = range.span();\n        int[] data = new int[n];\n        int[] count = new int[n];\n        int[] incr = new int[n];\n        int[] decr = new int[n];\n        // step 3: for each sample, add size, inc count; do weiserjahre numbers, too\n        for (int i = 0; i < buf.length; i++) {\n            // \"load\" from buffer\n            Sample s = buf[i];\n            // index into the sum (data[]) that this element (s.data[]) starts\n            int startIndex = s.range.getStart().diff(range.getStart());\n            // each iteration:\n            // -- prevData is s.data[elemIndex-1]\n            // -- thisData is s.data[elemIndex]\n            int prevData, thisData = -1;\n            // elemIndex is the counter into s.data (the element)\n            // sumIndex is nthe counter into data (the sum)\n            int elemIndex = Math.max(0, range.getStart().diff(s.range.getStart()));\n            int sumIndex = elemIndex + startIndex;\n            while (elemIndex < s.range.span() && sumIndex < range.span()) {\n                // this year's data; also copy thisData->prevData\n                prevData = thisData;\n                thisData = ((Number) s.data.get(elemIndex)).intValue();\n                // add element's data; increment count\n                data[sumIndex] += thisData;\n                count[sumIndex]++;\n                // wj (first year is always just 0/0)\n                if (elemIndex > 0) {\n                    if (thisData > prevData)\n                        incr[sumIndex]++;\n                    else if (thisData < prevData)\n                        decr[sumIndex]++;\n                }\n                elemIndex++;\n                sumIndex++;\n            }\n        }\n        // (buf can get gc'd now)\n        // step 4: if any count is 0, there's a gap => throw exception\n        for (int i = 0; i < n; i++) if (count[i] == 0)\n            throw new GapInSumException();\n        // HERE i should say where the gap is, and what the whole\n        // range is, and maybe even what samples are near the gap (?).\n        // step 5: divide each data by each count: data[i] /= count[i]\n        for (int i = 0; i < n; i++) data[i] = (int) Math.round((double) data[i] / count[i]);\n        // step 6: set range, and copy array back into (list) result.data\n        result.range = range;\n        result.data = new ArrayList(n);\n        result.count = new ArrayList(n);\n        result.incr = new ArrayList(n);\n        result.decr = new ArrayList(n);\n        for (int i = 0; i < n; i++) {\n            result.data.add(new Integer(data[i]));\n            result.count.add(new Integer(count[i]));\n            result.incr.add(new Integer(incr[i]));\n            result.decr.add(new Integer(decr[i]));\n        }\n        // (data,count,incr,decr can get gc'd now)\n        // step 7: set elements, and misc meta\n        result.elements = elements;\n        result.meta.put(\"format\", isIndexed ? \"I\" : \"R\");\n        // FIXME: combine species\n        // FIXME: compute ++, sapwood, etc. information\n        result.setModified();\n        result.fireSampleDataChanged();\n        // format, title (modified)\n        result.fireSampleMetadataChanged();\n        // return it\n        return result;\n    }\n\n    /**\n     *       Create a new sum from some elements.\n     *\n     *       @param e a list of\n     *       @return a new master\n     *       @exception IOException if one of the samples wasn't able to be\n     *       loaded\n     *       @exception IllegalArgumentException if there would be a gap in\n     *       the sum, or if the units are inconsistent\n     */\n    public static Sample sum(List e) throws IOException {\n        return sum(new Sample(), e);\n    }\n\n    /**\n     *       Re-Sum an existing master.\n     *\n     *       @param m the master to re-sum\n     *       @return the same master, re-summed\n     *       @exception IOException if one of the samples wasn't able to be\n     *       loaded\n     *       @exception IllegalArgumentException if there would be a gap in\n     *       the sum, or if the units are inconsistent\n     */\n    public static Sample sum(Sample m) throws IOException {\n        return sum(m, m.elements);\n    }\n}\n",
		"id": "/EvoSuiteBenchmark/35_corina/src/main/java/corina/manip/Sum_0Test.java",
		"test_prompt": "// Sum_0Test.java\n// This file is part of Corina.\n//\n// Corina is free software; you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation; either version 2 of the License, or\n// (at your option) any later version.\n//\n// Corina is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Corina; if not, write to the Free Software\n// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n//\n// Copyright 2001 Ken Harris <kbh7@cornell.edu>\n//\npackage corina.manip;\n\nimport corina.Year;\nimport corina.Range;\nimport corina.Sample;\nimport corina.Element;\nimport java.io.IOException;\nimport java.util.List;\nimport java.util.ArrayList;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link Sum}.\n* It contains ten unit test cases for the {@link Sum#sum(List)} method.\n*/\nclass Sum_0Test {"
	},
	{
		"original_code": "// Sum.java\n//\n// This file is part of Corina.\n//\n// Corina is free software; you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation; either version 2 of the License, or\n// (at your option) any later version.\n//\n// Corina is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Corina; if not, write to the Free Software\n// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n//\n// Copyright 2001 Ken Harris <kbh7@cornell.edu>\n//\npackage corina.manip;\n\nimport corina.Year;\nimport corina.Range;\nimport corina.Sample;\nimport corina.Element;\nimport java.io.IOException;\nimport java.util.List;\nimport java.util.ArrayList;\n\n/**\n *   A \"sum\" of two or more datasets is the average of those datasets.\n *\n *   There are two sum() methods, corresponding to two ways in which\n *   sums are made:\n *\n *   <ul>\n *\n *     <li> sum(List) makes a master from a list of elements.  This\n *     corresponds to the New &gt; Sum menuitem.  The user chooses any\n *     number of samples to sum, and a new master is created.</li>\n *\n *     <li> sum(Sample) reconstructs a master in-place from its\n *     elements.  This corresponds to the Sum &gt; Re-Sum menuitem.  The\n *     user already has a master, and either added/removed some\n *     elements, or changed some data in one of the elements.\n *     Re-summing returns the same master that was given.</li>\n *\n *   </ul>\n *\n *   @see Element\n *\n *   @author Ken Harris &lt;kbh7 <i style=\"color: gray\">at</i> cornell <i style=\"color: gray\">dot</i> edu&gt;\n *   @version $Id: Sum.java,v 1.3 2004/01/18 18:04:25 aaron Exp $\n */\npublic class Sum {\n\n    // TODO:\n    // - make Undoable?  this probably isn't *that* useful.\n    // - if exactly one file is indexed, say which it is (and vice versa) -- or 2? 3?...\n    // load all elements, and stuff 'em into a buffer.\n    // (OBSOLETE once element-sample is no longer an important distinction!)\n    private static Sample[] loadIntoBuffer(List elements) throws IOException {\n        // count number of active elements\n        int numActive = 0, numTotal = elements.size();\n        for (int i = 0; i < numTotal; i++) if (((Element) elements.get(i)).isActive())\n            numActive++;\n        // allocate buffer\n        Sample[] buf = new Sample[numActive];\n        // load active elements into buffer\n        int numLoaded = 0;\n        for (int i = 0; i < numTotal; i++) if (((Element) elements.get(i)).active)\n            buf[numLoaded++] = ((Element) elements.get(i)).load();\n        // return array\n        return buf;\n    }\n\n    /**\n     *        Compute the union of all the ranges of elements.  (Assumes\n     *        |elements| holds at least one element.)  For sums using the\n     *        intersection of the ranges instead, simply replace \"union\" with\n     *        \"intersection\" in the loop.\n     *\n     *      From the user's point of view, it would be better to\n     *      provide the option (for example):\n     *\n     * <pre>\n     *      (*) union (1001-1050)\n     *      ( ) intersection (1010-1036)\n     * </pre>\n     *\n     *      (with \"intersection\" dimmed if the range is empty).\n     */\n    private static Range computeRange(Sample[] elements) {\n        // yup, it's just (reduce #'range-union elements #'sample-range).\n        Range range = elements[0].range;\n        for (int i = 1; i < elements.length; i++) range = range.union(elements[i].range);\n        return range;\n    }\n\n    /**\n     *       Are the elements all raw, or all indexed?\n     *\n     *       @param elements an array to test\n     *       @return true, iff all of the elements in the array use the\n     *       same units\n     */\n    private static boolean consistentUnits(Sample[] elements) {\n        // yup, it's just (apply #'= (map 'list 'sample-format elements)).\n        if (elements.length == 0)\n            return true;\n        boolean isIndexed = elements[0].isIndexed();\n        for (int i = 1; i < elements.length; i++) if (isIndexed != elements[i].isIndexed())\n            return false;\n        return true;\n    }\n\n    // files which should watch for these exceptions:\n    // - Browser, Editor, FileMenu, XMenubar, UnitTests\n    // TODO: when they can all handle it, change it to extend merely Exception.\n    // (shouldn't i change this first, so the JSL is in full effect?)\n    // an exception that means \"there's a gap in the sum\"\n    public static class GapInSumException extends IllegalArgumentException {\n        // sum_error_gap\n    }\n\n    // an exception that means \"you're trying to mix raw and indexed files, dork\"\n    public static class InconsistentUnitsException extends IllegalArgumentException {\n        // sum_error_mixed\n    }\n\n    // load elements, sum them, and store into result (returns result, too)\n    private static Sample sum(Sample result, List elements) throws IOException {\n        // step 0: load all elements, and stuff 'em into a buffer\n        Sample[] buf = loadIntoBuffer(elements);\n        // special case: zero elements!\n        if (buf.length == 0) {\n            // \"skip to step 6\" would be nice...\n            // default empty range (1001-1000)\n            result.range = new Range();\n            result.data = new ArrayList();\n            result.count = new ArrayList();\n            result.incr = new ArrayList();\n            result.decr = new ArrayList();\n            result.elements = elements;\n            // let's say no data = raw\n            result.meta.put(\"format\", \"R\");\n            result.setModified();\n            result.fireSampleDataChanged();\n            result.fireSampleMetadataChanged();\n            return result;\n        }\n        // step 0.5: verify units (raw/indexed)\n        if (!consistentUnits(buf))\n            throw new InconsistentUnitsException();\n        // save units for later\n        boolean isIndexed = buf[0].isIndexed();\n        // HERE'S where i'd identify single (or a few) wrong-unit\n        // samples.  how to record/report?\n        // step 1: compute max range\n        Range range = computeRange(buf);\n        // step 2: make arrays (all 0's) for computation\n        int n = range.span();\n        int[] data = new int[n];\n        int[] count = new int[n];\n        int[] incr = new int[n];\n        int[] decr = new int[n];\n        // step 3: for each sample, add size, inc count; do weiserjahre numbers, too\n        for (int i = 0; i < buf.length; i++) {\n            // \"load\" from buffer\n            Sample s = buf[i];\n            // index into the sum (data[]) that this element (s.data[]) starts\n            int startIndex = s.range.getStart().diff(range.getStart());\n            // each iteration:\n            // -- prevData is s.data[elemIndex-1]\n            // -- thisData is s.data[elemIndex]\n            int prevData, thisData = -1;\n            // elemIndex is the counter into s.data (the element)\n            // sumIndex is nthe counter into data (the sum)\n            int elemIndex = Math.max(0, range.getStart().diff(s.range.getStart()));\n            int sumIndex = elemIndex + startIndex;\n            while (elemIndex < s.range.span() && sumIndex < range.span()) {\n                // this year's data; also copy thisData->prevData\n                prevData = thisData;\n                thisData = ((Number) s.data.get(elemIndex)).intValue();\n                // add element's data; increment count\n                data[sumIndex] += thisData;\n                count[sumIndex]++;\n                // wj (first year is always just 0/0)\n                if (elemIndex > 0) {\n                    if (thisData > prevData)\n                        incr[sumIndex]++;\n                    else if (thisData < prevData)\n                        decr[sumIndex]++;\n                }\n                elemIndex++;\n                sumIndex++;\n            }\n        }\n        // (buf can get gc'd now)\n        // step 4: if any count is 0, there's a gap => throw exception\n        for (int i = 0; i < n; i++) if (count[i] == 0)\n            throw new GapInSumException();\n        // HERE i should say where the gap is, and what the whole\n        // range is, and maybe even what samples are near the gap (?).\n        // step 5: divide each data by each count: data[i] /= count[i]\n        for (int i = 0; i < n; i++) data[i] = (int) Math.round((double) data[i] / count[i]);\n        // step 6: set range, and copy array back into (list) result.data\n        result.range = range;\n        result.data = new ArrayList(n);\n        result.count = new ArrayList(n);\n        result.incr = new ArrayList(n);\n        result.decr = new ArrayList(n);\n        for (int i = 0; i < n; i++) {\n            result.data.add(new Integer(data[i]));\n            result.count.add(new Integer(count[i]));\n            result.incr.add(new Integer(incr[i]));\n            result.decr.add(new Integer(decr[i]));\n        }\n        // (data,count,incr,decr can get gc'd now)\n        // step 7: set elements, and misc meta\n        result.elements = elements;\n        result.meta.put(\"format\", isIndexed ? \"I\" : \"R\");\n        // FIXME: combine species\n        // FIXME: compute ++, sapwood, etc. information\n        result.setModified();\n        result.fireSampleDataChanged();\n        // format, title (modified)\n        result.fireSampleMetadataChanged();\n        // return it\n        return result;\n    }\n\n    /**\n     *       Create a new sum from some elements.\n     *\n     *       @param e a list of\n     *       @return a new master\n     *       @exception IOException if one of the samples wasn't able to be\n     *       loaded\n     *       @exception IllegalArgumentException if there would be a gap in\n     *       the sum, or if the units are inconsistent\n     */\n    public static Sample sum(List e) throws IOException {\n        return sum(new Sample(), e);\n    }\n\n    /**\n     *       Re-Sum an existing master.\n     *\n     *       @param m the master to re-sum\n     *       @return the same master, re-summed\n     *       @exception IOException if one of the samples wasn't able to be\n     *       loaded\n     *       @exception IllegalArgumentException if there would be a gap in\n     *       the sum, or if the units are inconsistent\n     */\n    public static Sample sum(Sample m) throws IOException {\n        return sum(m, m.elements);\n    }\n}\n",
		"id": "/EvoSuiteBenchmark/35_corina/src/main/java/corina/manip/Sum_1Test.java",
		"test_prompt": "// Sum_1Test.java\n// This file is part of Corina.\n//\n// Corina is free software; you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation; either version 2 of the License, or\n// (at your option) any later version.\n//\n// Corina is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Corina; if not, write to the Free Software\n// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n//\n// Copyright 2001 Ken Harris <kbh7@cornell.edu>\n//\npackage corina.manip;\n\nimport corina.Year;\nimport corina.Range;\nimport corina.Sample;\nimport corina.Element;\nimport java.io.IOException;\nimport java.util.List;\nimport java.util.ArrayList;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link Sum}.\n* It contains ten unit test cases for the {@link Sum#sum(Sample)} method.\n*/\nclass Sum_1Test {"
	},
	{
		"original_code": "// NameCombiner.java\npackage corina.manip;\n\nimport java.util.Collections;\nimport java.util.List;\nimport java.util.ArrayList;\n\n/**\n *   Combines a group of strings intelligently.\n *\n *   <h2>Left to do</h2>\n *   <ul>\n *     <li>Write!\n *     <li>GPL header\n *     <li>Javadoc\n *     <li>Unit tests -- put in main() now, then move to UnitTests.java (e.g., (\"ZKB 1\" \"ZKB 2\") =&gt; \"ZKB 1,2\")\n *     <li>Integrate with browser, etc.\n *   </ul>\n */\npublic class NameCombiner {\n\n    private static class Name {\n\n        // e.g., \"ZKB\"\n        String name;\n\n        // Integer(1), Integer(2), etc.\n        List numbers;\n\n        // e.g., \"ZKB 1,2\"\n        public String toString() {\n            // sort numbers\n            Collections.sort(numbers);\n            // for each run of 3 or more, write it as \"3-5\".\n            // for single numbers, or just 2 in a row, separate by commas (\"9,10,15\").\n            int i = 0;\n            // WRITEME\n            return null;\n        }\n    }\n\n    // once Name.toString() is done, what needs doing?\n    // -- sort by names\n    // -- for each name, extract all numbers\n    // -- basically, assemble a list of Names -- need Name(String) c'tor?\n    // -- then toString() each one, with \", \" in between them.\n    // in other words, not much.\n    public static String combine(List names) {\n        return \"--\";\n    }\n\n    // RFE: pick an intelligent name\n    // -- if the files are \"xyz1.ext\", \"xyz2.ext\", and \"xyz3.ext\", call it \"xyz 1-3\".  (duh.)\n    // -- first, ignore extension.  result extension will be \".sum\" (for now)\n    // -- next, sort them (natural ordering, ignore case)\n    // -- look for common prefix; if complete (i.e., \"zkb111\"+\"zkb222\", but not \"zkb111\"+\"zyb111\")\n    // -- for each block of common prefixes, then look at the numbers\n    // -- for each block of consecutive numbers, replace with \"x-y\"\n    // -- smash all remaining number blocks together with \",\"\n    // -- smash all remaining prefix blocks together with \",\"\n    // -- result: something like \"ZKB 1-3,4, ZYB 5,7,9-13\" [.SUM]\n    public static void main(String[] args) {\n        List names = new ArrayList();\n        for (int i = 0; i < args.length; i++) names.add(args[i]);\n        System.out.println(combine(names));\n    }\n}\n",
		"id": "/EvoSuiteBenchmark/35_corina/src/main/java/corina/manip/NameCombiner.java",
		"test_prompt": "// NameCombinerTest.java\npackage corina.manip;\n\nimport java.util.Collections;\nimport java.util.List;\nimport java.util.ArrayList;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link NameCombiner}.\n* It contains ten unit test cases for the {@link NameCombiner#combine(List)} method.\n*/\nclass NameCombinerTest {"
	},
	{
		"original_code": "// MeanSensitivity.java\n//\n// This file is part of Corina.\n//\n// Corina is free software; you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation; either version 2 of the License, or\n// (at your option) any later version.\n//\n// Corina is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Corina; if not, write to the Free Software\n// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n//\n// Copyright 2001 Ken Harris <kbh7@cornell.edu>\n//\npackage corina.manip;\n\nimport java.util.List;\n\n/**\n *   Compute mean sensitivity.\n *\n *   <p>According to some\n *   <a href=\"http://www.ltrr.arizona.edu/pub/dpl/A-NEWS.TXT\">release notes</a>\n *   for a version of Arizona's\n *   <a href=\"http://www.ltrr.arizona.edu/archive/dpl/DPL.html\">Dendrochronology\n *   Program Library</a>, mean sensitivity is defined as:</p>\n *\n *   <blockquote>\n *   1 / (<i>N</i>-1) &Sigma; ( 2 | <i>y</i><sub>i</sub> - <i>y</i><sub>i-1</sub> | ) /\n *       ( | <i>y</i><sub>i</sub> | + | <i>y</i><sub>i-1</sub> | )\n *   </blockquote>\n *\n *   <p>If a divide-by-zero (or any other invalid operation) ever\n *   occurs, NaN is returned.  (This can occur, for example, if two\n *   successive years contain zeros.)  If the sample has no data in it,\n *   NaN is returned.</p>\n *\n *   <p><a href=\"http://www.wsl.ch/land/dynamics/dendro/FHS_d.html\">Schweingruber</a>\n *   says the mean sensitivity is\n *\n *   <blockquote>\n *   1 / (N-1) &Sigma; ( 2 | (y<sub>i-1</sub>-y<sub>i</sub>) /\n *                           (y<sub>i-1</sub>+y<sub>i</sub>) |)\n *   </blockquote>\n *\n *   (see Tree Rings, p.82 [English translation]).  If all values are\n *   positive, that's the same value.  If\n *   y<sub>i</sub>=-y<sub>i-1</sub>, his version blows up (mine only\n *   blows up when y<sub>i</sub>=y<sub>i-1</sub>=0).  I'll call these\n *   the \"Arizona\" (DPL, Corina) and \"German\" (Schweingruber)\n *   variations.</p>\n *\n *   @author Ken Harris &lt;kbh7 <i style=\"color: gray\">at</i> cornell <i style=\"color: gray\">dot</i> edu&gt;\n *   @version $Id: MeanSensitivity.java,v 1.4 2004/01/18 18:04:25 aaron Exp $\n */\npublic class MeanSensitivity {\n\n    private MeanSensitivity() {\n        // don't instantiate me\n    }\n\n    /**\n     *       Compute the mean sensitivity of a list of numbers.\n     *\n     *       @param data list of numbers\n     *       @return the mean sensitivity of the list, or NaN if it can't be\n     *       computed\n     */\n    public static float meanSensitivity(List data) {\n        List y = data;\n        int N = y.size();\n        // a special case\n        if (N == 0)\n            return Float.NaN;\n        try {\n            float meanSens = 0.0f;\n            // y[i], y[i-1]\n            float yi, yi1;\n            for (int i = 1; i < N; i++) {\n                // (it's slightly more efficient but less readable to\n                // dump yi into yi1 each iteration.)\n                yi = ((Number) y.get(i)).floatValue();\n                yi1 = ((Number) y.get(i - 1)).floatValue();\n                meanSens += Math.abs(yi - yi1) / (Math.abs(yi) + Math.abs(yi1));\n                // note: i know that abs(y[i]) should always be\n                // nonnegative -- but may not be if the user applied a\n                // bad index.\n            }\n            return meanSens * 2 / (N - 1);\n        } catch (ArithmeticException ae) {\n            // divide-by-zero, probably\n            return Float.NaN;\n        } catch (ClassCastException cce) {\n            // user is editing, it's a String, so let it go\n            return Float.NaN;\n        }\n    }\n}\n",
		"id": "/EvoSuiteBenchmark/35_corina/src/main/java/corina/manip/MeanSensitivity.java",
		"test_prompt": "// MeanSensitivityTest.java\n// This file is part of Corina.\n//\n// Corina is free software; you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation; either version 2 of the License, or\n// (at your option) any later version.\n//\n// Corina is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Corina; if not, write to the Free Software\n// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n//\n// Copyright 2001 Ken Harris <kbh7@cornell.edu>\n//\npackage corina.manip;\n\nimport java.util.List;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link MeanSensitivity}.\n* It contains ten unit test cases for the {@link MeanSensitivity#meanSensitivity(List)} method.\n*/\nclass MeanSensitivityTest {"
	},
	{
		"original_code": "// TabbedLineFactory.java\n//\n// This file is part of Corina.\n//\n// Corina is free software; you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation; either version 2 of the License, or\n// (at your option) any later version.\n//\n// Corina is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Corina; if not, write to the Free Software\n// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n//\n// Copyright 2001 Ken Harris <kbh7@cornell.edu>\n//\npackage corina.print;\n\nimport corina.util.StringUtils;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.StringTokenizer;\nimport java.awt.Graphics;\nimport java.awt.Graphics2D;\nimport java.awt.Font;\nimport java.awt.print.PageFormat;\n\n// TODO: decimal alignment.  for example, \"{.}\" should align to a\n// decimal point, and \"{/*}\" should align to either '*' or '/'.\n/**\n * A factory for printing tables, using fixed tab-stops.\n *\n * <p>The way it works is: you give it a specification for the lines you'll\n * be adding, and then use the factory for creating those lines.</p>\n *\n * <p>When you create a factory, you feed it a specification string.\n * The specification string consists of percentages, and the four\n * characters: &lt; ^ &gt; |.  They mean:</p>\n *\n * <dl>\n * <dt>30% (or any percentage)</dt>\n * <dd>Move right by 30% of the width of the page.  If you skip\n * right by more than 100%, there won't be any error, but you\n * won't see anything printed off the right edge.  Non-integer\n * percentages (e.g., <code>\"33.3%\"</code>) are perfectly legal.</dd>\n *\n * <dt>&gt;</dt>\n * <dd>Some left-aligned text goes here.</dd>\n *\n * <dt>^</dt>\n * <dd>Some center-aligned text goes here.</dd>\n *\n * <dt>&lt;</dt>\n * <dd>Some right-aligned text goes here.</dd>\n *\n * <dt>|</dt>\n * <dd>Draw a vertical bar here.  It's the full height of the line,\n * so if you add multiple lines from this factory in a row, they'll\n * connect all the way down your table.</dd>\n * </dl>\n *\n * <p>(Extra whitespace in the spec string is ignored.)</p>\n *\n * <p>For example, the spec string <code>\"> 50% | 50 <\"</code> creates\n * a table consisting of 2 columns: one left-aligned on the left half\n * of the page, and one right-aligned on the right half of the page,\n * with a vertical bar between them.</p>\n *\n * <p>A fancer example: <code>\"10% | 2% > 38% | 2% > 38% | 10%\"</code>\n * makes a 2-column table, with both columns left-aligned, and vertical\n * bars down the middle and on both sides.  (The extra 2% is there to\n * prevent the text from running into the lines.)</p>\n *\n * <p>Once you've created a factory, how do you use it?  Simple!  Just\n * call the <code>makeLine()</code> method, passing it a string with\n * all of your table entries, separated by tab characters\n * (<code>'\\t'</code>).  To use the last example above:</p>\n *\n * <pre>\n * // print a table of the numbers 1-5, along with their squares\n * TabbedLineFactory f = new TabbedLineFactory(\"10% | 2% > 38% | 2% > 38% | 10%\");\n * lines.add(f.makeLine(\"n \\t n squared\"));\n * for (int i=1; i<=5; i++)\n * &nbsp;&nbsp;&nbsp;lines.add(f.makeLine(i + \"\\t\" + i*i));\n * </pre>\n *\n * @author Ken Harris &lt;kbh7 <i style=\"color: gray\">at</i> cornell <i style=\"color: gray\">dot</i> edu&gt;\n * @version $Id: TabbedLineFactory.java,v 1.3 2006/02/14 19:37:12 lucasmo Exp $\n */\npublic class TabbedLineFactory {\n\n    private static final String BAR = \"|\";\n\n    private static final String LEFT = \">\";\n\n    private static final String CENTER = \"^\";\n\n    private static final String RIGHT = \"<\";\n\n    // list of BAR/LEFT/CENTER/RIGHT, or Number (meaning \"skip this much\")\n    private List tabs;\n\n    private Font font = Line.NORMAL;\n\n    /**\n     *  Set the font to use for the lines generated by this factory.\n     * \t @param f the font to use\n     */\n    public void setFont(Font f) {\n        this.font = f;\n    }\n\n    // Q: do we want to allow setting this at any time?  we can be slightly more efficient if \"no\".\n    /**\n     *  Create a tabbed-line factory, given a line specification (see\n     * \t above).\n     * \t @param spec the line specification\n     */\n    public TabbedLineFactory(String spec) {\n        // parse spec\n        StringTokenizer tok = new StringTokenizer(spec, \" <>^|\", true);\n        int n = tok.countTokens();\n        tabs = new ArrayList();\n        for (int i = 0; i < n; i++) {\n            String t = tok.nextToken();\n            // skip whitespace (but i need to watch for it,\n            // because it's a delimiter)\n            if (t.trim().length() == 0)\n                continue;\n            // store |<>^ and %ages\n            if (t.equals(BAR))\n                tabs.add(BAR);\n            else if (t.equals(LEFT))\n                tabs.add(LEFT);\n            else if (t.equals(CENTER))\n                tabs.add(CENTER);\n            else if (t.equals(RIGHT))\n                tabs.add(RIGHT);\n            else if (t.endsWith(\"%\")) {\n                tabs.add(new Float(t.substring(0, t.length() - 1)));\n                // TODO: allow numbers sans '%' = point spacer, too\n            } else\n                throw new IllegalArgumentException();\n        }\n        // count the number of args i'm expecting.  this is very handy later.\n        for (int i = 0; i < tabs.size(); i++) {\n            if (tabs.get(i) instanceof String)\n                expecting++;\n        }\n    }\n\n    // the number of arguments i expect for each line.\n    private int expecting = 0;\n\n    // TODO: font style option, in addition to size?  (per factory, or per line?)\n    // (per CELL would be ideal.  how hard would that be?)\n    /**\n     * \t Make a line, given the values of each element.\n     *\n     * \t <p>The values should be separated by tab characters\n     * \t (<code>'\\t'</code>).  (Yes, that means you can't have tab\n     * \t characters in your text.  Why would you want to?  What would it\n     * \t mean?)</p>\n     *\n     * \t <p>If you have fewer elements in this line than your spec\n     * \t string expects, as many as you provide are used; beyond that,\n     * \t blanks are used.  If you provide too many elements, as many are\n     * \t expected are used (from the start of the string), and the rest\n     * \t are ignored.</p>\n     *\n     * \t @param values a string containing all of the values for this\n     * \t line\n     */\n    public Line makeLine(String values) {\n        final List val = new ArrayList();\n        // (why not use a string tokenizer?  it has issues with tabs, especially\n        // multiple tabs-in-a-row, or starts-with- or ends-with-a-tab.)\n        String[] vals = StringUtils.splitBy(values, '\\t');\n        for (int i = 0; i < vals.length; i++) {\n            vals[i] = vals[i].trim();\n            // java bug: g.drawString(\"\",x,y) throws illegal argument.\n            if (vals[i].equals(\"\"))\n                vals[i] = \" \";\n        }\n        // array->list\n        for (int i = 0; i < vals.length; i++) val.add(vals[i]);\n        // if there are fewer args than i'm expecting, add some blanks.\n        int need = expecting - val.size();\n        for (int i = 0; i < need; i++) val.add(\" \");\n        return new TabbedLine(val);\n    }\n\n    private class TabbedLine implements Line {\n\n        private List val;\n\n        TabbedLine(List val) {\n            this.val = val;\n        }\n\n        public void print(Graphics g, PageFormat pf, float y) {\n            // next value to use\n            int next = 0;\n            // next position to draw at (in % of total width)\n            float position = 0f;\n            // set font\n            g.setFont(font);\n            // boilerplate Line stuff\n            float baseline = (float) (y + g.getFontMetrics().getHeight());\n            float left = (float) pf.getImageableX();\n            float width = (float) pf.getImageableWidth();\n            Graphics2D g2 = (Graphics2D) g;\n            for (int i = 0; i < tabs.size(); i++) {\n                if (tabs.get(i) instanceof Number) {\n                    // tab over\n                    position += ((Number) tabs.get(i)).floatValue();\n                } else {\n                    // draw something here\n                    // type of thing to draw\n                    String tab = (String) tabs.get(i);\n                    float x = left + width * (position / 100f);\n                    if (tab.equals(LEFT)) {\n                        // draw val[next] left-aligned here\n                        g2.drawString(val.get(next++).toString(), x, baseline);\n                    } else if (tab.equals(CENTER)) {\n                        // draw val[next] center-aligned here\n                        float col = g.getFontMetrics().stringWidth(// width of this column's text\n                        val.get(next).toString());\n                        g2.drawString(val.get(next++).toString(), x - col / 2, baseline);\n                    } else if (tab.equals(RIGHT)) {\n                        // draw val[next] right-aligned here\n                        float col = g.getFontMetrics().stringWidth(// width of this column's text\n                        val.get(next).toString());\n                        g2.drawString(val.get(next++).toString(), x - col, baseline);\n                    } else if (tab.equals(BAR)) {\n                        // draw a vertical bar here\n                        g2.drawLine((int) x, (int) y, (int) x, (int) baseline);\n                    }\n                }\n            }\n        }\n\n        public int height(Graphics g) {\n            return g.getFontMetrics(font).getHeight();\n        }\n    }\n}\n",
		"id": "/EvoSuiteBenchmark/35_corina/src/main/java/corina/print/TabbedLineFactory.java",
		"test_prompt": "// TabbedLineFactoryTest.java\n// This file is part of Corina.\n//\n// Corina is free software; you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation; either version 2 of the License, or\n// (at your option) any later version.\n//\n// Corina is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Corina; if not, write to the Free Software\n// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n//\n// Copyright 2001 Ken Harris <kbh7@cornell.edu>\n//\npackage corina.print;\n\nimport corina.util.StringUtils;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.StringTokenizer;\nimport java.awt.Graphics;\nimport java.awt.Graphics2D;\nimport java.awt.Font;\nimport java.awt.print.PageFormat;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link TabbedLineFactory}.\n* It contains ten unit test cases for the {@link TabbedLineFactory#makeLine(String)} method.\n*/\nclass TabbedLineFactoryTest {"
	},
	{
		"original_code": "// TextLine.java\n//\n// This file is part of Corina.\n//\n// Corina is free software; you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation; either version 2 of the License, or\n// (at your option) any later version.\n//\n// Corina is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Corina; if not, write to the Free Software\n// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n//\n// Copyright 2001 Ken Harris <kbh7@cornell.edu>\n//\npackage corina.print;\n\nimport java.awt.Font;\nimport java.awt.Graphics;\nimport java.awt.Graphics2D;\nimport java.awt.print.PageFormat;\n\n// there should be a lot of really simple subclasses of this --\n// basically everything except perhaps bargraphs, empty lines, and\n// horizontal rules.  re-using height(), especially, is what the game\n// is all about.\n/**\n *   A line of text.\n *\n *   @author Ken Harris &lt;kbh7 <i style=\"color: gray\">at</i> cornell <i style=\"color: gray\">dot</i> edu&gt;\n *   @version $Id: TextLine.java,v 1.5 2004/01/10 04:38:59 bitpoet Exp $\n */\npublic class TextLine implements Line {\n\n    private String text;\n\n    private int size = NORMAL_SIZE;\n\n    // (the constructor sets this!)\n    private Font font;\n\n    /**\n     *       Create a text line, of the normal size.\n     *\n     *       @param text the text to write\n     */\n    public TextLine(String text) {\n        this.text = text;\n        this.font = new Font(\"serif\", Font.PLAIN, size);\n    }\n\n    /**\n     *       Create a text line.\n     *\n     *       @param text the text to write\n     *       @param size the size to use\n     */\n    public TextLine(String text, int size) {\n        this.text = text;\n        this.size = size;\n        this.font = new Font(\"serif\", Font.PLAIN, size);\n    }\n\n    public void print(Graphics g, PageFormat pf, float y) {\n        // baseline\n        float baseline = (float) (y + height(g));\n        // needed for drawString()\n        Graphics2D g2 = (Graphics2D) g;\n        g2.setFont(font);\n        g2.drawString(text, (float) pf.getImageableX(), baseline);\n    }\n\n    public int height(Graphics g) {\n        return g.getFontMetrics(font).getHeight();\n    }\n}\n",
		"id": "/EvoSuiteBenchmark/35_corina/src/main/java/corina/print/TextLine.java",
		"test_prompt": "// TextLineTest.java\n// This file is part of Corina.\n//\n// Corina is free software; you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation; either version 2 of the License, or\n// (at your option) any later version.\n//\n// Corina is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Corina; if not, write to the Free Software\n// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n//\n// Copyright 2001 Ken Harris <kbh7@cornell.edu>\n//\npackage corina.print;\n\nimport java.awt.Font;\nimport java.awt.Graphics;\nimport java.awt.Graphics2D;\nimport java.awt.print.PageFormat;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link TextLine}.\n* It contains ten unit test cases for the {@link TextLine#height(Graphics)} method.\n*/\nclass TextLineTest {"
	},
	{
		"original_code": "// ThinLine.java\n//\n// This file is part of Corina.\n//\n// Corina is free software; you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation; either version 2 of the License, or\n// (at your option) any later version.\n//\n// Corina is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Corina; if not, write to the Free Software\n// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n//\n// Copyright 2001 Ken Harris <kbh7@cornell.edu>\n//\npackage corina.print;\n\nimport java.awt.Graphics;\nimport java.awt.Graphics2D;\nimport java.awt.BasicStroke;\nimport java.awt.print.PageFormat;\n\n/**\n *   A thin horizontal line, similar to HTML's &lt;HR&gt;.\n *   It defaults to the middle 1/2 of the page, but anything's possible.\n *\n *   @author Ken Harris &lt;kbh7 <i style=\"color: gray\">at</i> cornell <i style=\"color: gray\">dot</i> edu&gt;\n *   @version $Id: ThinLine.java,v 1.1 2004/01/18 18:09:10 aaron Exp $\n */\npublic class ThinLine implements Line {\n\n    // left and right edges of the line, in \"fraction of the way\n    // across the visible page\"\n    private float start = 0.25f, finish = 0.75f;\n\n    /**\n     *  Create a new default line, which covers the middle 1/2 of the\n     * \tpage.\n     */\n    public ThinLine() {\n        // use defaults\n    }\n\n    /**\n     *       Create a new line which covers only part of the width of the\n     *       page.  The parameters are given in \"fraction of the way across\n     *       the visible page\".\n     *\n     *       @param start the left end of the line\n     *       @param finish the right end of the line\n     */\n    public ThinLine(float start, float finish) {\n        this.start = start;\n        this.finish = finish;\n    }\n\n    public void print(Graphics g, PageFormat pf, float y) {\n        Graphics2D g2 = (Graphics2D) g;\n        g2.setStroke(new BasicStroke(THICKNESS));\n        // margins of printable page\n        float left = (float) pf.getImageableX();\n        float right = (float) (pf.getImageableX() + pf.getImageableWidth());\n        // fraction i'm going to draw\n        float realLeft = left + (right - left) * start;\n        float realRight = left + (right - left) * finish;\n        // draw it\n        g2.drawLine((int) realLeft, (int) (y + 1), (int) realRight, (int) (y + 1));\n    }\n\n    public int height(Graphics g) {\n        return 2;\n    }\n\n    private static final float THICKNESS = 0.1f;\n}\n",
		"id": "/EvoSuiteBenchmark/35_corina/src/main/java/corina/print/ThinLine.java",
		"test_prompt": "// ThinLineTest.java\n// This file is part of Corina.\n//\n// Corina is free software; you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation; either version 2 of the License, or\n// (at your option) any later version.\n//\n// Corina is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Corina; if not, write to the Free Software\n// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n//\n// Copyright 2001 Ken Harris <kbh7@cornell.edu>\n//\npackage corina.print;\n\nimport java.awt.Graphics;\nimport java.awt.Graphics2D;\nimport java.awt.BasicStroke;\nimport java.awt.print.PageFormat;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link ThinLine}.\n* It contains ten unit test cases for the {@link ThinLine#height(Graphics)} method.\n*/\nclass ThinLineTest {"
	},
	{
		"original_code": "// EmptyLine.java\n//\n// This file is part of Corina.\n//\n// Corina is free software; you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation; either version 2 of the License, or\n// (at your option) any later version.\n//\n// Corina is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Corina; if not, write to the Free Software\n// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n//\n// Copyright 2001 Ken Harris <kbh7@cornell.edu>\n//\npackage corina.print;\n\nimport java.awt.Graphics;\nimport java.awt.print.PageFormat;\n\n/**\n *   An empty line, 18 points (1/4\") high.\n *\n *   @author Ken Harris &lt;kbh7 <i style=\"color: gray\">at</i> cornell <i style=\"color: gray\">dot</i> edu&gt;\n *   @version $Id: EmptyLine.java,v 1.2 2004/01/18 18:09:10 aaron Exp $\n */\npublic class EmptyLine implements Line {\n\n    // height: 1/4\"\n    private static final int height = 18;\n\n    /**\n     * Create a new empty line.\n     */\n    public EmptyLine() {\n        // do nothing\n    }\n\n    /**\n     *       Print ... nothing.\n     *\n     *       @param g the Graphics object to do nothing to\n     *       @param pf the PageFormat to know what page to do nothing on\n     *       @param y where on the page to do nothing\n     */\n    public void print(Graphics g, PageFormat pf, float y) {\n        // do nothing.\n    }\n\n    /**\n     *       Return the height of this line: 18 points.\n     *\n     *       @param g the Graphics object\n     *       @return the height: 18 points\n     */\n    public int height(Graphics g) {\n        return height;\n    }\n}\n",
		"id": "/EvoSuiteBenchmark/35_corina/src/main/java/corina/print/EmptyLine.java",
		"test_prompt": "// EmptyLineTest.java\n// This file is part of Corina.\n//\n// Corina is free software; you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation; either version 2 of the License, or\n// (at your option) any later version.\n//\n// Corina is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Corina; if not, write to the Free Software\n// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n//\n// Copyright 2001 Ken Harris <kbh7@cornell.edu>\n//\npackage corina.print;\n\nimport java.awt.Graphics;\nimport java.awt.print.PageFormat;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link EmptyLine}.\n* It contains ten unit test cases for the {@link EmptyLine#height(Graphics)} method.\n*/\nclass EmptyLineTest {"
	},
	{
		"original_code": "// PrincipalNameComparator.java\npackage corina;\n\nimport java.security.Principal;\nimport java.util.Iterator;\nimport javax.security.auth.Subject;\nimport com.sun.security.auth.PrincipalComparator;\n\n/**\n * XXX: BUGS BUGS BUGS\n * http://archives.java.sun.com/cgi-bin/wa?A2=ind0307&L=jini-users&P=R3341&I=-3\n * http://archives.java.sun.com/cgi-bin/wa?A2=ind0308&L=jini-users&F=&S=&P=14578\n * http://archives.java.sun.com/cgi-bin/wa?A2=ind0307&L=jini-users&P=R3341&I=-3\n * @author Aaron Hamid\n */\npublic class PrincipalNameComparator implements PrincipalComparator {\n\n    private String principal;\n\n    public PrincipalNameComparator(String principal) {\n        System.out.println(\"PrincipalNameComparator: \" + principal);\n        this.principal = principal;\n    }\n\n    public boolean implies(Subject subject) {\n        Iterator it = subject.getPrincipals().iterator();\n        while (it.hasNext()) {\n            Principal p = (Principal) it.next();\n            System.out.println(\"Principal found: \" + p);\n            if (principal.equals(p.getName())) {\n                return true;\n            }\n        }\n        return false;\n    }\n}\n",
		"id": "/EvoSuiteBenchmark/35_corina/src/main/java/corina/PrincipalNameComparator.java",
		"test_prompt": "// PrincipalNameComparatorTest.java\npackage corina;\n\nimport java.security.Principal;\nimport java.util.Iterator;\nimport javax.security.auth.Subject;\nimport com.sun.security.auth.PrincipalComparator;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link PrincipalNameComparator}.\n* It contains ten unit test cases for the {@link PrincipalNameComparator#implies(Subject)} method.\n*/\nclass PrincipalNameComparatorTest {"
	},
	{
		"original_code": "// DataComponent.java\npackage corina.search;\n\nimport corina.Year;\nimport corina.MetadataTemplate;\nimport corina.logging.CorinaLog;\nimport corina.util.ColorUtils;\nimport corina.ui.I18n;\nimport java.util.Date;\nimport java.util.Vector;\nimport java.util.Iterator;\nimport java.text.DateFormat;\nimport java.text.ParseException;\nimport java.awt.Component;\nimport java.awt.Dimension;\nimport java.awt.FlowLayout;\nimport java.awt.Color;\nimport javax.swing.event.DocumentListener;\nimport javax.swing.event.DocumentEvent;\nimport javax.swing.Box;\nimport javax.swing.JTextField;\nimport javax.swing.JPanel;\nimport javax.swing.JLabel;\nimport javax.swing.JComboBox;\n\n// note: this is approaching the abstraction level that it appears\n// CLIM has, where you specify first WHAT you want to do/input, and\n// only secondarily (optionally?) how you want it to look.\npublic class DataComponent {\n\n    private static final CorinaLog log = new CorinaLog(DataComponent.class);\n\n    // TODO: doesn't handle POPUP yet.\n    public static Component makeComponent(int type) {\n        switch(type) {\n            case SearchDialog.NONE:\n                return new NoneComponent();\n            case SearchDialog.YEAR:\n                return new YearComponent();\n            case SearchDialog.NUMBER:\n                return new NumberComponent();\n            case SearchDialog.LENGTH:\n                return new LengthComponent();\n            case SearchDialog.DATE:\n                return new DateComponent();\n            //\tcase SearchDialog.POPUP:\n            //\t    return new PopupComponent()\n            default:\n                return new StringComponent();\n        }\n    }\n\n    // slightly less of a hack\n    public static Component makePopupComponent(Object[] rhsValues) {\n        // put into vector\n        Vector v = new Vector();\n        for (int i = 0; i < rhsValues.length; i++) v.add(rhsValues[i]);\n        return new PopupComponent(v);\n    }\n\n    private static class PopupComponent extends JComboBox implements AbstractDataComponent {\n\n        public PopupComponent(Vector v) {\n            super(v);\n            // just take them all\n            setMaximumRowCount(v.size());\n        }\n\n        public Object getData() {\n            return getSelectedItem();\n        }\n    }\n\n    // another hack\n    public static Component makeMetaComponent(String fieldName) {\n        JComboBox popup = new MetaComponent(fieldName);\n        // REFACTOR: this looks incredibly similar to\n        // MetadataPanel.makePopup()...\n        // figure out field\n        MetadataTemplate.Field f = null;\n        Iterator ii = MetadataTemplate.getFields();\n        while (ii.hasNext()) {\n            MetadataTemplate.Field field = (MetadataTemplate.Field) ii.next();\n            if (field.getDescription().equals(fieldName)) {\n                f = field;\n                break;\n            }\n        }\n        // (ASSUMEs: fieldName is legit)\n        if (f != null) {\n            // add to popup\n            for (int i = 0; i < f.values.length; i++) popup.addItem(I18n.getText(\"meta.\" + f.getVariable() + \".\" + f.values[i]));\n        } else {\n            log.error(\"MetadataTemplate.Field not found: \" + fieldName);\n        }\n        return popup;\n    }\n\n    private static class MetaComponent extends JComboBox implements AbstractDataComponent {\n\n        public MetaComponent(String field) {\n            this.field = field;\n        }\n\n        // metadata field\n        private String field;\n\n        public Object getData() {\n            // look up code in metadata/field that corresponds to this value\n            String text = (String) getSelectedItem();\n            // look up the field i've got -- REFACTOR: duplicate code!\n            MetadataTemplate.Field f = null;\n            Iterator ii = MetadataTemplate.getFields();\n            while (ii.hasNext()) {\n                MetadataTemplate.Field ff = (MetadataTemplate.Field) ii.next();\n                if (ff.getDescription().equals(field)) {\n                    f = ff;\n                    break;\n                }\n            }\n            // look up key.myval\n            // HAVE: text=msg[f.variable+\".\"+code]\n            // WANT: code\n            String code = \"xxx\";\n            if (f != null) {\n                for (int i = 0; i < f.values.length; i++) {\n                    if (I18n.getText(\"meta.\" + f.getVariable() + \".\" + f.values[i]).equals(text)) {\n                        code = f.values[i];\n                        break;\n                    }\n                }\n            } else {\n                log.error(\"MetadataTemplate.Field not found: \" + field);\n            }\n            return code;\n        }\n    }\n\n    public static interface AbstractDataComponent {\n\n        Object getData();\n        // DESIGN: also need isDataValid() method?\n    }\n\n    private static class StringComponent extends JTextField implements AbstractDataComponent {\n\n        public StringComponent() {\n            super(20);\n        }\n\n        public Object getData() {\n            String t = getText();\n            return t;\n        }\n    }\n\n    private static class YearComponent extends JTextField implements AbstractDataComponent {\n\n        public YearComponent() {\n            super(\"1001\", 10);\n            selectAll();\n            // TODO: enforce [0-9] only\n            // TODO: add AD/BC popup to right side\n        }\n\n        public Object getData() {\n            String t = getText();\n            // throws ??? if it's not valid?\n            return new Year(t);\n        }\n    }\n\n    private static class DateComponent extends JTextField implements AbstractDataComponent {\n\n        // FUTURE: make up/down incr/decr the date by days?\n        // FUTURE: add \"...\" button to show a pop-up calendar?\n        public DateComponent() {\n            super(10);\n            String today = DateFormat.getDateInstance(DateFormat.SHORT).format(new Date());\n            setText(today);\n            selectAll();\n            /*\n\t    getDocument().addDocumentListener(new DocumentListener2() {\n\t\t    public void update() {\n\t\t\ttry {\n\t\t\t    String t = getText();\n\t\t\t    System.out.println(\"testing \" + t);\n\t\t\t    Date d = DateFormat.getDateInstance(DateFormat.SHORT).parse(t); // takes 1-3ms\n\t\t\t    // what's the time on this guy?\n\t\t\t    dateValid = true;\n\t\t\t    System.out.println(\"=> valid!\");\n\t\t\t    setBackground(Color.white); // original color!\n\t\t\t} catch (ParseException pe) {\n\t\t\t    dateValid = false;\n\t\t\t    System.out.println(\"=> not valid!\");\n\t\t\t    setBackground(ColorUtils.blend(Color.red, 0.3f, Color.white, 0.7f)); // orig color!\n\t\t\t}\n \t\t    }\n\t\t});\n\t    */\n        }\n\n        private boolean dateValid = true;\n\n        public boolean isDataValid() {\n            return dateValid;\n        }\n\n        public Object getData() {\n            String t = getText();\n            try {\n                // WARNING: throws parseexception!\n                Date date = DateFormat.getDateInstance(DateFormat.SHORT).parse(t);\n                return date;\n            } catch (java.text.ParseException pe) {\n                // bad!\n                return null;\n            }\n        }\n    }\n\n    private static class LengthComponent extends JPanel implements AbstractDataComponent {\n\n        // BUG: requestFocus() on me doesn't requestFocus() on the text field\n        // FUTURE: make up/down incr/decr it?\n        public LengthComponent() {\n            setLayout(new FlowLayout(FlowLayout.LEFT));\n            setOpaque(false);\n            // TODO: enforce [0-9] only\n            field = new JTextField(\"100\", 10);\n            field.selectAll();\n            add(field);\n            add(new JLabel(\" years\"));\n        }\n\n        private JTextField field;\n\n        public Object getData() {\n            String t = field.getText();\n            // FUTURE: no need for trim() if i only accept [0-9]\n            Integer i = new Integer(t.trim());\n            return i;\n        }\n    }\n\n    private static class NumberComponent extends JTextField implements AbstractDataComponent {\n\n        // FUTURE: make up/down incr/decr?\n        public NumberComponent() {\n            super(\"0\", 10);\n            selectAll();\n            // TODO: enforce [0-9,'-'] only\n        }\n\n        public Object getData() {\n            String t = getText();\n            // FUTURE: no need for trim() if i only accept [0-9,'-']\n            Integer i = new Integer(t.trim());\n            return i;\n        }\n    }\n\n    private static class NoneComponent extends Box.Filler implements AbstractDataComponent {\n\n        private static final int WIDTH = 100;\n\n        public NoneComponent() {\n            super(// this is basically what Box.createHorizontalStrut(width) does\n            new Dimension(WIDTH, 0), new Dimension(WIDTH, 0), new Dimension(WIDTH, Short.MAX_VALUE));\n        }\n\n        public Object getData() {\n            // what else?\n            return null;\n        }\n    }\n}\n",
		"id": "/EvoSuiteBenchmark/35_corina/src/main/java/corina/search/DataComponent_0Test.java",
		"test_prompt": "// DataComponent_0Test.java\npackage corina.search;\n\nimport corina.Year;\nimport corina.MetadataTemplate;\nimport corina.logging.CorinaLog;\nimport corina.util.ColorUtils;\nimport corina.ui.I18n;\nimport java.util.Date;\nimport java.util.Vector;\nimport java.util.Iterator;\nimport java.text.DateFormat;\nimport java.text.ParseException;\nimport java.awt.Component;\nimport java.awt.Dimension;\nimport java.awt.FlowLayout;\nimport java.awt.Color;\nimport javax.swing.event.DocumentListener;\nimport javax.swing.event.DocumentEvent;\nimport javax.swing.Box;\nimport javax.swing.JTextField;\nimport javax.swing.JPanel;\nimport javax.swing.JLabel;\nimport javax.swing.JComboBox;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link DataComponent}.\n* It contains ten unit test cases for the {@link DataComponent#makeComponent(int)} method.\n*/\nclass DataComponent_0Test {"
	},
	{
		"original_code": "// DataComponent.java\npackage corina.search;\n\nimport corina.Year;\nimport corina.MetadataTemplate;\nimport corina.logging.CorinaLog;\nimport corina.util.ColorUtils;\nimport corina.ui.I18n;\nimport java.util.Date;\nimport java.util.Vector;\nimport java.util.Iterator;\nimport java.text.DateFormat;\nimport java.text.ParseException;\nimport java.awt.Component;\nimport java.awt.Dimension;\nimport java.awt.FlowLayout;\nimport java.awt.Color;\nimport javax.swing.event.DocumentListener;\nimport javax.swing.event.DocumentEvent;\nimport javax.swing.Box;\nimport javax.swing.JTextField;\nimport javax.swing.JPanel;\nimport javax.swing.JLabel;\nimport javax.swing.JComboBox;\n\n// note: this is approaching the abstraction level that it appears\n// CLIM has, where you specify first WHAT you want to do/input, and\n// only secondarily (optionally?) how you want it to look.\npublic class DataComponent {\n\n    private static final CorinaLog log = new CorinaLog(DataComponent.class);\n\n    // TODO: doesn't handle POPUP yet.\n    public static Component makeComponent(int type) {\n        switch(type) {\n            case SearchDialog.NONE:\n                return new NoneComponent();\n            case SearchDialog.YEAR:\n                return new YearComponent();\n            case SearchDialog.NUMBER:\n                return new NumberComponent();\n            case SearchDialog.LENGTH:\n                return new LengthComponent();\n            case SearchDialog.DATE:\n                return new DateComponent();\n            //\tcase SearchDialog.POPUP:\n            //\t    return new PopupComponent()\n            default:\n                return new StringComponent();\n        }\n    }\n\n    // slightly less of a hack\n    public static Component makePopupComponent(Object[] rhsValues) {\n        // put into vector\n        Vector v = new Vector();\n        for (int i = 0; i < rhsValues.length; i++) v.add(rhsValues[i]);\n        return new PopupComponent(v);\n    }\n\n    private static class PopupComponent extends JComboBox implements AbstractDataComponent {\n\n        public PopupComponent(Vector v) {\n            super(v);\n            // just take them all\n            setMaximumRowCount(v.size());\n        }\n\n        public Object getData() {\n            return getSelectedItem();\n        }\n    }\n\n    // another hack\n    public static Component makeMetaComponent(String fieldName) {\n        JComboBox popup = new MetaComponent(fieldName);\n        // REFACTOR: this looks incredibly similar to\n        // MetadataPanel.makePopup()...\n        // figure out field\n        MetadataTemplate.Field f = null;\n        Iterator ii = MetadataTemplate.getFields();\n        while (ii.hasNext()) {\n            MetadataTemplate.Field field = (MetadataTemplate.Field) ii.next();\n            if (field.getDescription().equals(fieldName)) {\n                f = field;\n                break;\n            }\n        }\n        // (ASSUMEs: fieldName is legit)\n        if (f != null) {\n            // add to popup\n            for (int i = 0; i < f.values.length; i++) popup.addItem(I18n.getText(\"meta.\" + f.getVariable() + \".\" + f.values[i]));\n        } else {\n            log.error(\"MetadataTemplate.Field not found: \" + fieldName);\n        }\n        return popup;\n    }\n\n    private static class MetaComponent extends JComboBox implements AbstractDataComponent {\n\n        public MetaComponent(String field) {\n            this.field = field;\n        }\n\n        // metadata field\n        private String field;\n\n        public Object getData() {\n            // look up code in metadata/field that corresponds to this value\n            String text = (String) getSelectedItem();\n            // look up the field i've got -- REFACTOR: duplicate code!\n            MetadataTemplate.Field f = null;\n            Iterator ii = MetadataTemplate.getFields();\n            while (ii.hasNext()) {\n                MetadataTemplate.Field ff = (MetadataTemplate.Field) ii.next();\n                if (ff.getDescription().equals(field)) {\n                    f = ff;\n                    break;\n                }\n            }\n            // look up key.myval\n            // HAVE: text=msg[f.variable+\".\"+code]\n            // WANT: code\n            String code = \"xxx\";\n            if (f != null) {\n                for (int i = 0; i < f.values.length; i++) {\n                    if (I18n.getText(\"meta.\" + f.getVariable() + \".\" + f.values[i]).equals(text)) {\n                        code = f.values[i];\n                        break;\n                    }\n                }\n            } else {\n                log.error(\"MetadataTemplate.Field not found: \" + field);\n            }\n            return code;\n        }\n    }\n\n    public static interface AbstractDataComponent {\n\n        Object getData();\n        // DESIGN: also need isDataValid() method?\n    }\n\n    private static class StringComponent extends JTextField implements AbstractDataComponent {\n\n        public StringComponent() {\n            super(20);\n        }\n\n        public Object getData() {\n            String t = getText();\n            return t;\n        }\n    }\n\n    private static class YearComponent extends JTextField implements AbstractDataComponent {\n\n        public YearComponent() {\n            super(\"1001\", 10);\n            selectAll();\n            // TODO: enforce [0-9] only\n            // TODO: add AD/BC popup to right side\n        }\n\n        public Object getData() {\n            String t = getText();\n            // throws ??? if it's not valid?\n            return new Year(t);\n        }\n    }\n\n    private static class DateComponent extends JTextField implements AbstractDataComponent {\n\n        // FUTURE: make up/down incr/decr the date by days?\n        // FUTURE: add \"...\" button to show a pop-up calendar?\n        public DateComponent() {\n            super(10);\n            String today = DateFormat.getDateInstance(DateFormat.SHORT).format(new Date());\n            setText(today);\n            selectAll();\n            /*\n\t    getDocument().addDocumentListener(new DocumentListener2() {\n\t\t    public void update() {\n\t\t\ttry {\n\t\t\t    String t = getText();\n\t\t\t    System.out.println(\"testing \" + t);\n\t\t\t    Date d = DateFormat.getDateInstance(DateFormat.SHORT).parse(t); // takes 1-3ms\n\t\t\t    // what's the time on this guy?\n\t\t\t    dateValid = true;\n\t\t\t    System.out.println(\"=> valid!\");\n\t\t\t    setBackground(Color.white); // original color!\n\t\t\t} catch (ParseException pe) {\n\t\t\t    dateValid = false;\n\t\t\t    System.out.println(\"=> not valid!\");\n\t\t\t    setBackground(ColorUtils.blend(Color.red, 0.3f, Color.white, 0.7f)); // orig color!\n\t\t\t}\n \t\t    }\n\t\t});\n\t    */\n        }\n\n        private boolean dateValid = true;\n\n        public boolean isDataValid() {\n            return dateValid;\n        }\n\n        public Object getData() {\n            String t = getText();\n            try {\n                // WARNING: throws parseexception!\n                Date date = DateFormat.getDateInstance(DateFormat.SHORT).parse(t);\n                return date;\n            } catch (java.text.ParseException pe) {\n                // bad!\n                return null;\n            }\n        }\n    }\n\n    private static class LengthComponent extends JPanel implements AbstractDataComponent {\n\n        // BUG: requestFocus() on me doesn't requestFocus() on the text field\n        // FUTURE: make up/down incr/decr it?\n        public LengthComponent() {\n            setLayout(new FlowLayout(FlowLayout.LEFT));\n            setOpaque(false);\n            // TODO: enforce [0-9] only\n            field = new JTextField(\"100\", 10);\n            field.selectAll();\n            add(field);\n            add(new JLabel(\" years\"));\n        }\n\n        private JTextField field;\n\n        public Object getData() {\n            String t = field.getText();\n            // FUTURE: no need for trim() if i only accept [0-9]\n            Integer i = new Integer(t.trim());\n            return i;\n        }\n    }\n\n    private static class NumberComponent extends JTextField implements AbstractDataComponent {\n\n        // FUTURE: make up/down incr/decr?\n        public NumberComponent() {\n            super(\"0\", 10);\n            selectAll();\n            // TODO: enforce [0-9,'-'] only\n        }\n\n        public Object getData() {\n            String t = getText();\n            // FUTURE: no need for trim() if i only accept [0-9,'-']\n            Integer i = new Integer(t.trim());\n            return i;\n        }\n    }\n\n    private static class NoneComponent extends Box.Filler implements AbstractDataComponent {\n\n        private static final int WIDTH = 100;\n\n        public NoneComponent() {\n            super(// this is basically what Box.createHorizontalStrut(width) does\n            new Dimension(WIDTH, 0), new Dimension(WIDTH, 0), new Dimension(WIDTH, Short.MAX_VALUE));\n        }\n\n        public Object getData() {\n            // what else?\n            return null;\n        }\n    }\n}\n",
		"id": "/EvoSuiteBenchmark/35_corina/src/main/java/corina/search/DataComponent_1Test.java",
		"test_prompt": "// DataComponent_1Test.java\npackage corina.search;\n\nimport corina.Year;\nimport corina.MetadataTemplate;\nimport corina.logging.CorinaLog;\nimport corina.util.ColorUtils;\nimport corina.ui.I18n;\nimport java.util.Date;\nimport java.util.Vector;\nimport java.util.Iterator;\nimport java.text.DateFormat;\nimport java.text.ParseException;\nimport java.awt.Component;\nimport java.awt.Dimension;\nimport java.awt.FlowLayout;\nimport java.awt.Color;\nimport javax.swing.event.DocumentListener;\nimport javax.swing.event.DocumentEvent;\nimport javax.swing.Box;\nimport javax.swing.JTextField;\nimport javax.swing.JPanel;\nimport javax.swing.JLabel;\nimport javax.swing.JComboBox;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link DataComponent}.\n* It contains ten unit test cases for the {@link DataComponent#makePopupComponent(Object[])} method.\n*/\nclass DataComponent_1Test {"
	},
	{
		"original_code": "// DataComponent.java\npackage corina.search;\n\nimport corina.Year;\nimport corina.MetadataTemplate;\nimport corina.logging.CorinaLog;\nimport corina.util.ColorUtils;\nimport corina.ui.I18n;\nimport java.util.Date;\nimport java.util.Vector;\nimport java.util.Iterator;\nimport java.text.DateFormat;\nimport java.text.ParseException;\nimport java.awt.Component;\nimport java.awt.Dimension;\nimport java.awt.FlowLayout;\nimport java.awt.Color;\nimport javax.swing.event.DocumentListener;\nimport javax.swing.event.DocumentEvent;\nimport javax.swing.Box;\nimport javax.swing.JTextField;\nimport javax.swing.JPanel;\nimport javax.swing.JLabel;\nimport javax.swing.JComboBox;\n\n// note: this is approaching the abstraction level that it appears\n// CLIM has, where you specify first WHAT you want to do/input, and\n// only secondarily (optionally?) how you want it to look.\npublic class DataComponent {\n\n    private static final CorinaLog log = new CorinaLog(DataComponent.class);\n\n    // TODO: doesn't handle POPUP yet.\n    public static Component makeComponent(int type) {\n        switch(type) {\n            case SearchDialog.NONE:\n                return new NoneComponent();\n            case SearchDialog.YEAR:\n                return new YearComponent();\n            case SearchDialog.NUMBER:\n                return new NumberComponent();\n            case SearchDialog.LENGTH:\n                return new LengthComponent();\n            case SearchDialog.DATE:\n                return new DateComponent();\n            //\tcase SearchDialog.POPUP:\n            //\t    return new PopupComponent()\n            default:\n                return new StringComponent();\n        }\n    }\n\n    // slightly less of a hack\n    public static Component makePopupComponent(Object[] rhsValues) {\n        // put into vector\n        Vector v = new Vector();\n        for (int i = 0; i < rhsValues.length; i++) v.add(rhsValues[i]);\n        return new PopupComponent(v);\n    }\n\n    private static class PopupComponent extends JComboBox implements AbstractDataComponent {\n\n        public PopupComponent(Vector v) {\n            super(v);\n            // just take them all\n            setMaximumRowCount(v.size());\n        }\n\n        public Object getData() {\n            return getSelectedItem();\n        }\n    }\n\n    // another hack\n    public static Component makeMetaComponent(String fieldName) {\n        JComboBox popup = new MetaComponent(fieldName);\n        // REFACTOR: this looks incredibly similar to\n        // MetadataPanel.makePopup()...\n        // figure out field\n        MetadataTemplate.Field f = null;\n        Iterator ii = MetadataTemplate.getFields();\n        while (ii.hasNext()) {\n            MetadataTemplate.Field field = (MetadataTemplate.Field) ii.next();\n            if (field.getDescription().equals(fieldName)) {\n                f = field;\n                break;\n            }\n        }\n        // (ASSUMEs: fieldName is legit)\n        if (f != null) {\n            // add to popup\n            for (int i = 0; i < f.values.length; i++) popup.addItem(I18n.getText(\"meta.\" + f.getVariable() + \".\" + f.values[i]));\n        } else {\n            log.error(\"MetadataTemplate.Field not found: \" + fieldName);\n        }\n        return popup;\n    }\n\n    private static class MetaComponent extends JComboBox implements AbstractDataComponent {\n\n        public MetaComponent(String field) {\n            this.field = field;\n        }\n\n        // metadata field\n        private String field;\n\n        public Object getData() {\n            // look up code in metadata/field that corresponds to this value\n            String text = (String) getSelectedItem();\n            // look up the field i've got -- REFACTOR: duplicate code!\n            MetadataTemplate.Field f = null;\n            Iterator ii = MetadataTemplate.getFields();\n            while (ii.hasNext()) {\n                MetadataTemplate.Field ff = (MetadataTemplate.Field) ii.next();\n                if (ff.getDescription().equals(field)) {\n                    f = ff;\n                    break;\n                }\n            }\n            // look up key.myval\n            // HAVE: text=msg[f.variable+\".\"+code]\n            // WANT: code\n            String code = \"xxx\";\n            if (f != null) {\n                for (int i = 0; i < f.values.length; i++) {\n                    if (I18n.getText(\"meta.\" + f.getVariable() + \".\" + f.values[i]).equals(text)) {\n                        code = f.values[i];\n                        break;\n                    }\n                }\n            } else {\n                log.error(\"MetadataTemplate.Field not found: \" + field);\n            }\n            return code;\n        }\n    }\n\n    public static interface AbstractDataComponent {\n\n        Object getData();\n        // DESIGN: also need isDataValid() method?\n    }\n\n    private static class StringComponent extends JTextField implements AbstractDataComponent {\n\n        public StringComponent() {\n            super(20);\n        }\n\n        public Object getData() {\n            String t = getText();\n            return t;\n        }\n    }\n\n    private static class YearComponent extends JTextField implements AbstractDataComponent {\n\n        public YearComponent() {\n            super(\"1001\", 10);\n            selectAll();\n            // TODO: enforce [0-9] only\n            // TODO: add AD/BC popup to right side\n        }\n\n        public Object getData() {\n            String t = getText();\n            // throws ??? if it's not valid?\n            return new Year(t);\n        }\n    }\n\n    private static class DateComponent extends JTextField implements AbstractDataComponent {\n\n        // FUTURE: make up/down incr/decr the date by days?\n        // FUTURE: add \"...\" button to show a pop-up calendar?\n        public DateComponent() {\n            super(10);\n            String today = DateFormat.getDateInstance(DateFormat.SHORT).format(new Date());\n            setText(today);\n            selectAll();\n            /*\n\t    getDocument().addDocumentListener(new DocumentListener2() {\n\t\t    public void update() {\n\t\t\ttry {\n\t\t\t    String t = getText();\n\t\t\t    System.out.println(\"testing \" + t);\n\t\t\t    Date d = DateFormat.getDateInstance(DateFormat.SHORT).parse(t); // takes 1-3ms\n\t\t\t    // what's the time on this guy?\n\t\t\t    dateValid = true;\n\t\t\t    System.out.println(\"=> valid!\");\n\t\t\t    setBackground(Color.white); // original color!\n\t\t\t} catch (ParseException pe) {\n\t\t\t    dateValid = false;\n\t\t\t    System.out.println(\"=> not valid!\");\n\t\t\t    setBackground(ColorUtils.blend(Color.red, 0.3f, Color.white, 0.7f)); // orig color!\n\t\t\t}\n \t\t    }\n\t\t});\n\t    */\n        }\n\n        private boolean dateValid = true;\n\n        public boolean isDataValid() {\n            return dateValid;\n        }\n\n        public Object getData() {\n            String t = getText();\n            try {\n                // WARNING: throws parseexception!\n                Date date = DateFormat.getDateInstance(DateFormat.SHORT).parse(t);\n                return date;\n            } catch (java.text.ParseException pe) {\n                // bad!\n                return null;\n            }\n        }\n    }\n\n    private static class LengthComponent extends JPanel implements AbstractDataComponent {\n\n        // BUG: requestFocus() on me doesn't requestFocus() on the text field\n        // FUTURE: make up/down incr/decr it?\n        public LengthComponent() {\n            setLayout(new FlowLayout(FlowLayout.LEFT));\n            setOpaque(false);\n            // TODO: enforce [0-9] only\n            field = new JTextField(\"100\", 10);\n            field.selectAll();\n            add(field);\n            add(new JLabel(\" years\"));\n        }\n\n        private JTextField field;\n\n        public Object getData() {\n            String t = field.getText();\n            // FUTURE: no need for trim() if i only accept [0-9]\n            Integer i = new Integer(t.trim());\n            return i;\n        }\n    }\n\n    private static class NumberComponent extends JTextField implements AbstractDataComponent {\n\n        // FUTURE: make up/down incr/decr?\n        public NumberComponent() {\n            super(\"0\", 10);\n            selectAll();\n            // TODO: enforce [0-9,'-'] only\n        }\n\n        public Object getData() {\n            String t = getText();\n            // FUTURE: no need for trim() if i only accept [0-9,'-']\n            Integer i = new Integer(t.trim());\n            return i;\n        }\n    }\n\n    private static class NoneComponent extends Box.Filler implements AbstractDataComponent {\n\n        private static final int WIDTH = 100;\n\n        public NoneComponent() {\n            super(// this is basically what Box.createHorizontalStrut(width) does\n            new Dimension(WIDTH, 0), new Dimension(WIDTH, 0), new Dimension(WIDTH, Short.MAX_VALUE));\n        }\n\n        public Object getData() {\n            // what else?\n            return null;\n        }\n    }\n}\n",
		"id": "/EvoSuiteBenchmark/35_corina/src/main/java/corina/search/DataComponent_2Test.java",
		"test_prompt": "// DataComponent_2Test.java\npackage corina.search;\n\nimport corina.Year;\nimport corina.MetadataTemplate;\nimport corina.logging.CorinaLog;\nimport corina.util.ColorUtils;\nimport corina.ui.I18n;\nimport java.util.Date;\nimport java.util.Vector;\nimport java.util.Iterator;\nimport java.text.DateFormat;\nimport java.text.ParseException;\nimport java.awt.Component;\nimport java.awt.Dimension;\nimport java.awt.FlowLayout;\nimport java.awt.Color;\nimport javax.swing.event.DocumentListener;\nimport javax.swing.event.DocumentEvent;\nimport javax.swing.Box;\nimport javax.swing.JTextField;\nimport javax.swing.JPanel;\nimport javax.swing.JLabel;\nimport javax.swing.JComboBox;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link DataComponent}.\n* It contains ten unit test cases for the {@link DataComponent#makeMetaComponent(String)} method.\n*/\nclass DataComponent_2Test {"
	},
	{
		"original_code": "// Search.java\npackage corina.search;\n\nimport corina.Element;\nimport java.io.File;\nimport java.util.List;\nimport java.util.ArrayList;\n\npublic class Search implements Runnable {\n\n    public static final int ANY = 0;\n\n    public static final int ALL = 1;\n\n    private int type = ANY;\n\n    public void setType(int type) {\n        if (type == ANY || type == ALL)\n            this.type = type;\n        else\n            throw new IllegalArgumentException(\"type must be ANY or ALL (got: \" + type + \")\");\n    }\n\n    private List criteria;\n\n    private File folder = new File(System.getProperty(\"user.dir\"));\n\n    public void setFolder(String filename) {\n        this.folder = new File(filename);\n    }\n\n    public Search() {\n        criteria = new ArrayList();\n    }\n\n    // add a criterion, sorted for performance\n    public void addCriterion(Criterion c, boolean fast) {\n        // sort them as they come in: if they depend on metadata, add\n        // to end; if they're just filename/moddate, add to start\n        // DESIGN: this changes the order they are in the list.  if the user wants to\n        // look at or edit it again, they should be in the same order.   so instead,\n        // i should just record \"is it fast?\" as a flag -- it should only matter when\n        // running the search, not when printing, for example.\n        if (fast)\n            criteria.add(0, c);\n        else\n            criteria.add(c);\n    }\n\n    public void run() {\n        matches = new ArrayList();\n        System.out.println(\"searching folder \" + folder);\n        System.out.println(\"if i was querying a database, i might say:\");\n        System.out.println(\"   \" + toSQL());\n        // (WRITEME: actually do it...)\n        System.out.println(\"if i was timing it, i might brag about how many files i'd searched, by:\");\n        System.out.println(\"   SELECT COUNT(*) FROM meta;\");\n        // relative performance:\n        // DB: 0.1sec for 990 records ~= 10,000 records/sec (or all 50,000 samples in ~5sec)\n        // FS: 1.6sec for 84 files ~= 50 files/sec (or 200 times slower, or all 50,000 samples in ~15min)\n        System.out.println(\"if i was the tooltip for a data source, i might say:\");\n        System.out.println(\"   \" + toString());\n        long t1 = System.currentTimeMillis();\n        search(folder);\n        long t2 = System.currentTimeMillis();\n        float time = (float) ((t2 - t1) / 1000f);\n        System.out.println(\"(search took \" + time + \" sec, for \" + count + \" files and folders)\");\n        System.out.println(\"done ... \" + matches.size() + \" matches:\");\n        for (int i = 0; i < matches.size(); i++) {\n            System.out.println(\"-- \" + matches.get(i));\n        }\n    }\n\n    // number of files searched\n    private int count = 0;\n\n    private void search(File folder) {\n        // System.out.println(\"-- searching folder \" + folder);\n        // list files\n        File[] children = folder.listFiles();\n        // update count\n        // add now, or after?  best: as-i-go.\n        count += children.length;\n        // test each file in this folder\n        for (int i = 0; i < children.length; i++) {\n            if (children[i].isDirectory()) {\n                search(children[i]);\n            } else {\n                testFile(children[i]);\n            }\n        }\n    }\n\n    // TODO: add keyboard shortcuts for +/- (accel +, accel -?)\n    // try all criteria.\n    // remember: ANY = stop(pass) on true, ALL = stop(fail) on false.\n    private void testFile(File f) {\n        // test element |e|\n        Element e = new Element(f.getPath());\n        testElement(e);\n    }\n\n    // test an element, and add it to |matches| if it meets all necessary criteria.\n    // note: e.isSample() calls slow it down noticably, but not horribly, if the\n    // result set is small.\n    private void testElement(Element e) {\n        for (int i = 0; i < criteria.size(); i++) {\n            Criterion c = (Criterion) criteria.get(i);\n            boolean test = c.test(e);\n            // ANY: if one is true, done\n            if ((type == ANY) && (test == true)) {\n                if (e.isSample())\n                    matches.add(e.filename);\n                return;\n            }\n            // ALL: if one is false, done\n            if ((type == ALL) && (test == false)) {\n                return;\n            }\n        }\n        // when done: if ALL, add it\n        if (type == ALL)\n            if (e.isSample())\n                matches.add(e.filename);\n    }\n\n    // list of filenames (should it be elements?)\n    private List matches;\n\n    /*\n      all results go into |matches|\n      -- need to be able to tell somebody when a hit is found\n      -- need event listeners?\n      -- (will, later, anyway, for smart lists, right?)\n\n      future:\n      -- in search(), use Summary, so reading an entire folder is O(1), not O(n)\n      -- (pretty much everything else is the same, it's just much faster)\n    */\n    // construct an SQL query that corresponds to this search\n    public String toSQL() {\n        String combiner = (type == ANY ? \"OR\" : \"AND\");\n        StringBuffer sql = new StringBuffer(\"SELECT * FROM meta m \");\n        if (criteria.size() > 0)\n            sql.append(\"WHERE \");\n        for (int i = 0; i < criteria.size(); i++) {\n            Criterion c = (Criterion) criteria.get(i);\n            sql.append(c.toSQL());\n            if (i < criteria.size() - 1)\n                sql.append(\" \" + combiner + \" \");\n        }\n        // GROUP BY sid?\n        sql.append(\";\");\n        return sql.toString();\n    }\n\n    public String toString() {\n        StringBuffer r = new StringBuffer();\n        // BUG?: what if criteria.size()==0?\n        for (int i = 0; i < criteria.size(); i++) {\n            Criterion c = (Criterion) criteria.get(i);\n            r.append(c.toString());\n            if (i < criteria.size() - 1)\n                r.append(\", \");\n            if (i == criteria.size() - 2)\n                r.append((type == ANY ? \"or\" : \"and\") + \" \");\n        }\n        // BUG: use \"Author\", not \"author\" (look up in table)\n        // BUG: use \"Raw\", not \"R\" (look up in table)\n        return r.toString();\n    }\n}\n",
		"id": "/EvoSuiteBenchmark/35_corina/src/main/java/corina/search/Search.java",
		"test_prompt": "// SearchTest.java\npackage corina.search;\n\nimport corina.Element;\nimport java.io.File;\nimport java.util.List;\nimport java.util.ArrayList;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link Search}.\n* It contains ten unit test cases for the {@link Search#toSQL()} method.\n*/\nclass SearchTest {"
	},
	{
		"original_code": "// Year.java\n//\n// This file is part of Corina.\n//\n// Corina is free software; you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation; either version 2 of the License, or\n// (at your option) any later version.\n//\n// Corina is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Corina; if not, write to the Free Software\n// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n//\n// Copyright 2001 Ken Harris <kbh7@cornell.edu>\n//\npackage corina;\n\n/**\n *   <p>A calendar year.  It normally acts similar to an integer, but\n *   skips the mythical \"year 0\".</p>\n *\n *   <p>In <code>Year</code> math:</p>\n *\n *   <ul>\n *     <li>-1 + 1 = 1</li>\n *     <li>2 - 4 = -3</li>\n *   </ul>\n *\n *   <p>Years, like Numbers and Strings, are immutable, so they are not\n *   Cloneable (there's no reason for them to be).</p>\n *\n *   @author Ken Harris &lt;kbh7 <i style=\"color: gray\">at</i> cornell <i style=\"color: gray\">dot</i> edu&gt;\n *   @version $Id: Year.java,v 1.4 2004/01/18 17:53:47 aaron Exp $\n */\npublic final class Year implements Comparable {\n\n    /**\n     * The default year: 1001.\n     */\n    public static final Year DEFAULT = new Year(1001);\n\n    /**\n     * Holds the year value as an <code>int</code>.\n     */\n    private final int y;\n\n    /**\n     *       Default constructor.  Uses <code>DEFAULT</code> as the year.\n     *\n     *       @see #DEFAULT\n     */\n    public Year() {\n        y = DEFAULT.y;\n    }\n\n    /**\n     *       Constructor for <code>int</code>s.  Uses <code>DEFAULT</code>\n     *       as the year if an invalid value is passed.\n     *\n     *       @param x the year value, as an int\n     *       @see #DEFAULT\n     */\n    public Year(int x) {\n        y = (x == 0 ? DEFAULT.y : x);\n    }\n\n    /**\n     *       Constructor from (row,col) pair.  Assumes 10-year rows.  The\n     *       column should always be between 0 and 9, inclusive.\n     *\n     *       @param row the row; row 0 is the decade ending in year 9\n     *       @param col the column; in row 0, year is the column\n     */\n    public Year(int row, int col) {\n        int yy = 10 * row + col;\n        if (yy == 0)\n            // should this be 1?\n            yy = DEFAULT.y;\n        y = yy;\n    }\n\n    /**\n     *       Constructor from String.  No AD/BC; reads it like C's\n     *       <code>scanf(\" %d \", &y)</code> would.\n     *\n     *       @exception NumberFormatException if the String cannot be\n     *       parsed, or is equal to zero\n     *       @see java.lang.String\n     */\n    public Year(String s) throws NumberFormatException {\n        y = Integer.parseInt(s.trim());\n        if (y == 0)\n            throw new NumberFormatException();\n    }\n\n    /**\n     *       Constructor from String.  No AD/BC; reads it like C's\n     *       <code>scanf(\" %d \", &y)</code> would.  This constructor is for\n     *       zero-year-systems, if <code>zys</code> is true, i.e., -5 means\n     *       6 BC.\n     *\n     *       @exception NumberFormatException if the String cannot be parsed\n     *       @see java.lang.String\n     */\n    public Year(String s, boolean zys) throws NumberFormatException {\n        int yy = Integer.parseInt(s.trim());\n        // back up a year, if this system assumed a zero-year\n        if (zys && yy <= 0)\n            yy--;\n        y = yy;\n    }\n\n    /**\n     *       Convert to a String.  No \"AD\"/\"BC\"; simply the integer value.\n     *\n     *       @return this year as a String\n     *       @see java.lang.String\n     */\n    public String toString() {\n        return String.valueOf(y);\n    }\n\n    /**\n     *       This method always throws UnsupportedOperationException.  It's\n     *       not implemented, and don't even think about implementing it\n     *       yourself!  It encourages being lazy and bypassing Year's\n     *       methods to just deal with ints.  And that defeats the whole\n     *       purpose of having Years.  So I'll just disallow it.  You don't\n     *       need it anyway.  If you really need the int for some reason I\n     *       can't imagine, you can always do\n     *       <code>Integer.parseInt(y.toString())</code>.  That way you know\n     *       you're doing it to get the int, and not for imagined\n     *       performance or convenience reasons.\n     *\n     *       @return never returns\n     *       @exception UnsupportedOperationException always!\n     */\n    public int intValue() {\n        // i pity th' fool who tries to use intvalue!\n        throw new UnsupportedOperationException();\n    }\n\n    /**\n     *       Return true, iff this is year 1.  (This actually comes up\n     *       fairly often.)\n     *\n     *       @return true iff this is year 1\n     */\n    public boolean isYearOne() {\n        return (y == 1);\n    }\n\n    /**\n     *       The maximum (later) of two years.\n     *\n     *       @return the later of two years\n     */\n    public static Year max(Year y1, Year y2) {\n        return (y1.y > y2.y ? y1 : y2);\n    }\n\n    /**\n     *       The minimum (earlier) of two years.\n     *\n     *       @return the earlier of two years\n     */\n    public static Year min(Year y1, Year y2) {\n        return (y1.y < y2.y ? y1 : y2);\n    }\n\n    /**\n     *       Adds (or subtracts, for negative values) some number of years,\n     *       and generates a new Year object.\n     *\n     *       @param dy the number of years to add (subtract)\n     *       @see #diff\n     */\n    public Year add(int dy) {\n        // copy, and convert to zys\n        int r = y;\n        if (r < 0)\n            r++;\n        // add dy\n        r += dy;\n        // convert back, and return\n        if (r <= 0)\n            r--;\n        return new Year(r);\n    }\n\n    /**\n     *       Calculate the number of years difference between two years.\n     *       That is, there are this many years difference between\n     *       <code>this</code> and <code>y2</code>; if they are equal, this\n     *       number is zero.\n     *\n     *       @param y2 the year to subtract\n     *       @return the number of years difference between\n     *       <code>this</code> and <code>y2</code>\n     *       @see #add\n     */\n    public int diff(Year y2) {\n        // copy, and convert to zys\n        int i1 = y;\n        if (i1 < 0)\n            i1++;\n        int i2 = y2.y;\n        if (i2 < 0)\n            i2++;\n        // subtract, and return\n        return i1 - i2;\n    }\n\n    /**\n     *       Computes <code>this</code> modulo <code>m</code>.  Always\n     *       gives a positive result, even for negative numbers, so it is\n     *       suitable for computing a grid position for a span of years.\n     *\n     *       @param m base for modulo\n     *       @return the year modulo <code>m</code>\n     */\n    public int mod(int m) {\n        int r = y % m;\n        if (r < 0)\n            r += m;\n        return r;\n    }\n\n    /**\n     *       Determines what row this year would be, if years were in a\n     *       grid 10 wide, with the left column years ending in zero.  Row\n     *       0 is years 1 through 9.\n     *\n     *       @return this year's row\n     *       @see #column\n     */\n    public int row() {\n        int z = y / 10;\n        if (y < 0 && y % 10 != 0)\n            z--;\n        return z;\n    }\n\n    /**\n     *        Determines what column this year would be, if years were in a\n     *        grid 10 wide, with the left column years ending in zero.\n     *\n     *        Works for BC years, also:\n     *        <table border=\"1\" cellspacing=\"0\">\n     * \t   <tr><th>column()</th><td>0</td><td>1</td><td>2</td><td>3</td><td>4</td>\n     * \t        <td>5</td><td>6</td><td>7</td><td>8</td><td>9</td></tr>\n     * \t   <tr><th rowspan=\"3\">Year</th><td>-10</td><td>-9</td><td>-8</td><td>-7</td><td>-6</td>\n     * \t        <td>-5</td><td>-4</td><td>-3</td><td>-2</td><td>-1</td></tr>\n     * \t   <tr><td> </td><td>1</td><td>2</td><td>3</td><td>4</td>\n     * \t        <td>5</td><td>6</td><td>7</td><td>8</td><td>9</td></tr>\n     * \t   <tr><td>10</td><td>11</td><td>12</td><td>13</td><td>14</td>\n     * \t        <td>15</td><td>16</td><td>17</td><td>18</td><td>19</td></tr>\n     *        </table>\n     *\n     *        @return this year's column\n     *        @see #row\n     */\n    public int column() {\n        return mod(10);\n    }\n\n    /**\n     *       Compares this and <code>o</code>.\n     *\n     *       @see java.lang.Comparable\n     *       @param o Object to compare\n     *       @return >0, =0, or <0 if this is greater-than, equal-to, or less-than o\n     *       @throws ClassCastException if o is not a Year\n     */\n    public int compareTo(Object o) {\n        return this.y - ((Year) o).y;\n    }\n\n    /**\n     *       Returns <code>true</code> if and only if <code>this</code> is\n     *       equal to <code>y2</code>.\n     *\n     *       @param y2 the year to compare <code>this</code> to\n     *       @return <code>true</code> if <code>this</code> is equal to\n     *       <code>y2</code>, else <code>false</code>\n     */\n    public boolean equals(Object y2) {\n        return (y == ((Year) y2).y);\n    }\n\n    // since i define equals(), i need to define hashCode()\n    public int hashCode() {\n        // returning something based on y is logical, but returning y\n        // itself might make people mistakenly think this is like\n        // intValue(), so let's do something weird to it first.\n        return y * y * y;\n    }\n\n    // THESE TWO METHODS ARE BUGGY AND NEED WORK!\n    public Year cropToCentury() {\n        // is this correct?\n        return add(-mod(100));\n    }\n\n    public Year nextCentury() {\n        // COMPLETELY INCORRECT!\n        Year tmp = add(100);\n        if (tmp.y == 101)\n            return new Year(100);\n        return tmp;\n    }\n}\n",
		"id": "/EvoSuiteBenchmark/35_corina/src/main/java/corina/Year_0Test.java",
		"test_prompt": "// Year_0Test.java\n// This file is part of Corina.\n//\n// Corina is free software; you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation; either version 2 of the License, or\n// (at your option) any later version.\n//\n// Corina is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Corina; if not, write to the Free Software\n// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n//\n// Copyright 2001 Ken Harris <kbh7@cornell.edu>\n//\npackage corina;\n\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link Year}.\n* It contains ten unit test cases for the {@link Year#intValue()} method.\n*/\nclass Year_0Test {"
	},
	{
		"original_code": "// Year.java\n//\n// This file is part of Corina.\n//\n// Corina is free software; you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation; either version 2 of the License, or\n// (at your option) any later version.\n//\n// Corina is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Corina; if not, write to the Free Software\n// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n//\n// Copyright 2001 Ken Harris <kbh7@cornell.edu>\n//\npackage corina;\n\n/**\n *   <p>A calendar year.  It normally acts similar to an integer, but\n *   skips the mythical \"year 0\".</p>\n *\n *   <p>In <code>Year</code> math:</p>\n *\n *   <ul>\n *     <li>-1 + 1 = 1</li>\n *     <li>2 - 4 = -3</li>\n *   </ul>\n *\n *   <p>Years, like Numbers and Strings, are immutable, so they are not\n *   Cloneable (there's no reason for them to be).</p>\n *\n *   @author Ken Harris &lt;kbh7 <i style=\"color: gray\">at</i> cornell <i style=\"color: gray\">dot</i> edu&gt;\n *   @version $Id: Year.java,v 1.4 2004/01/18 17:53:47 aaron Exp $\n */\npublic final class Year implements Comparable {\n\n    /**\n     * The default year: 1001.\n     */\n    public static final Year DEFAULT = new Year(1001);\n\n    /**\n     * Holds the year value as an <code>int</code>.\n     */\n    private final int y;\n\n    /**\n     *       Default constructor.  Uses <code>DEFAULT</code> as the year.\n     *\n     *       @see #DEFAULT\n     */\n    public Year() {\n        y = DEFAULT.y;\n    }\n\n    /**\n     *       Constructor for <code>int</code>s.  Uses <code>DEFAULT</code>\n     *       as the year if an invalid value is passed.\n     *\n     *       @param x the year value, as an int\n     *       @see #DEFAULT\n     */\n    public Year(int x) {\n        y = (x == 0 ? DEFAULT.y : x);\n    }\n\n    /**\n     *       Constructor from (row,col) pair.  Assumes 10-year rows.  The\n     *       column should always be between 0 and 9, inclusive.\n     *\n     *       @param row the row; row 0 is the decade ending in year 9\n     *       @param col the column; in row 0, year is the column\n     */\n    public Year(int row, int col) {\n        int yy = 10 * row + col;\n        if (yy == 0)\n            // should this be 1?\n            yy = DEFAULT.y;\n        y = yy;\n    }\n\n    /**\n     *       Constructor from String.  No AD/BC; reads it like C's\n     *       <code>scanf(\" %d \", &y)</code> would.\n     *\n     *       @exception NumberFormatException if the String cannot be\n     *       parsed, or is equal to zero\n     *       @see java.lang.String\n     */\n    public Year(String s) throws NumberFormatException {\n        y = Integer.parseInt(s.trim());\n        if (y == 0)\n            throw new NumberFormatException();\n    }\n\n    /**\n     *       Constructor from String.  No AD/BC; reads it like C's\n     *       <code>scanf(\" %d \", &y)</code> would.  This constructor is for\n     *       zero-year-systems, if <code>zys</code> is true, i.e., -5 means\n     *       6 BC.\n     *\n     *       @exception NumberFormatException if the String cannot be parsed\n     *       @see java.lang.String\n     */\n    public Year(String s, boolean zys) throws NumberFormatException {\n        int yy = Integer.parseInt(s.trim());\n        // back up a year, if this system assumed a zero-year\n        if (zys && yy <= 0)\n            yy--;\n        y = yy;\n    }\n\n    /**\n     *       Convert to a String.  No \"AD\"/\"BC\"; simply the integer value.\n     *\n     *       @return this year as a String\n     *       @see java.lang.String\n     */\n    public String toString() {\n        return String.valueOf(y);\n    }\n\n    /**\n     *       This method always throws UnsupportedOperationException.  It's\n     *       not implemented, and don't even think about implementing it\n     *       yourself!  It encourages being lazy and bypassing Year's\n     *       methods to just deal with ints.  And that defeats the whole\n     *       purpose of having Years.  So I'll just disallow it.  You don't\n     *       need it anyway.  If you really need the int for some reason I\n     *       can't imagine, you can always do\n     *       <code>Integer.parseInt(y.toString())</code>.  That way you know\n     *       you're doing it to get the int, and not for imagined\n     *       performance or convenience reasons.\n     *\n     *       @return never returns\n     *       @exception UnsupportedOperationException always!\n     */\n    public int intValue() {\n        // i pity th' fool who tries to use intvalue!\n        throw new UnsupportedOperationException();\n    }\n\n    /**\n     *       Return true, iff this is year 1.  (This actually comes up\n     *       fairly often.)\n     *\n     *       @return true iff this is year 1\n     */\n    public boolean isYearOne() {\n        return (y == 1);\n    }\n\n    /**\n     *       The maximum (later) of two years.\n     *\n     *       @return the later of two years\n     */\n    public static Year max(Year y1, Year y2) {\n        return (y1.y > y2.y ? y1 : y2);\n    }\n\n    /**\n     *       The minimum (earlier) of two years.\n     *\n     *       @return the earlier of two years\n     */\n    public static Year min(Year y1, Year y2) {\n        return (y1.y < y2.y ? y1 : y2);\n    }\n\n    /**\n     *       Adds (or subtracts, for negative values) some number of years,\n     *       and generates a new Year object.\n     *\n     *       @param dy the number of years to add (subtract)\n     *       @see #diff\n     */\n    public Year add(int dy) {\n        // copy, and convert to zys\n        int r = y;\n        if (r < 0)\n            r++;\n        // add dy\n        r += dy;\n        // convert back, and return\n        if (r <= 0)\n            r--;\n        return new Year(r);\n    }\n\n    /**\n     *       Calculate the number of years difference between two years.\n     *       That is, there are this many years difference between\n     *       <code>this</code> and <code>y2</code>; if they are equal, this\n     *       number is zero.\n     *\n     *       @param y2 the year to subtract\n     *       @return the number of years difference between\n     *       <code>this</code> and <code>y2</code>\n     *       @see #add\n     */\n    public int diff(Year y2) {\n        // copy, and convert to zys\n        int i1 = y;\n        if (i1 < 0)\n            i1++;\n        int i2 = y2.y;\n        if (i2 < 0)\n            i2++;\n        // subtract, and return\n        return i1 - i2;\n    }\n\n    /**\n     *       Computes <code>this</code> modulo <code>m</code>.  Always\n     *       gives a positive result, even for negative numbers, so it is\n     *       suitable for computing a grid position for a span of years.\n     *\n     *       @param m base for modulo\n     *       @return the year modulo <code>m</code>\n     */\n    public int mod(int m) {\n        int r = y % m;\n        if (r < 0)\n            r += m;\n        return r;\n    }\n\n    /**\n     *       Determines what row this year would be, if years were in a\n     *       grid 10 wide, with the left column years ending in zero.  Row\n     *       0 is years 1 through 9.\n     *\n     *       @return this year's row\n     *       @see #column\n     */\n    public int row() {\n        int z = y / 10;\n        if (y < 0 && y % 10 != 0)\n            z--;\n        return z;\n    }\n\n    /**\n     *        Determines what column this year would be, if years were in a\n     *        grid 10 wide, with the left column years ending in zero.\n     *\n     *        Works for BC years, also:\n     *        <table border=\"1\" cellspacing=\"0\">\n     * \t   <tr><th>column()</th><td>0</td><td>1</td><td>2</td><td>3</td><td>4</td>\n     * \t        <td>5</td><td>6</td><td>7</td><td>8</td><td>9</td></tr>\n     * \t   <tr><th rowspan=\"3\">Year</th><td>-10</td><td>-9</td><td>-8</td><td>-7</td><td>-6</td>\n     * \t        <td>-5</td><td>-4</td><td>-3</td><td>-2</td><td>-1</td></tr>\n     * \t   <tr><td> </td><td>1</td><td>2</td><td>3</td><td>4</td>\n     * \t        <td>5</td><td>6</td><td>7</td><td>8</td><td>9</td></tr>\n     * \t   <tr><td>10</td><td>11</td><td>12</td><td>13</td><td>14</td>\n     * \t        <td>15</td><td>16</td><td>17</td><td>18</td><td>19</td></tr>\n     *        </table>\n     *\n     *        @return this year's column\n     *        @see #row\n     */\n    public int column() {\n        return mod(10);\n    }\n\n    /**\n     *       Compares this and <code>o</code>.\n     *\n     *       @see java.lang.Comparable\n     *       @param o Object to compare\n     *       @return >0, =0, or <0 if this is greater-than, equal-to, or less-than o\n     *       @throws ClassCastException if o is not a Year\n     */\n    public int compareTo(Object o) {\n        return this.y - ((Year) o).y;\n    }\n\n    /**\n     *       Returns <code>true</code> if and only if <code>this</code> is\n     *       equal to <code>y2</code>.\n     *\n     *       @param y2 the year to compare <code>this</code> to\n     *       @return <code>true</code> if <code>this</code> is equal to\n     *       <code>y2</code>, else <code>false</code>\n     */\n    public boolean equals(Object y2) {\n        return (y == ((Year) y2).y);\n    }\n\n    // since i define equals(), i need to define hashCode()\n    public int hashCode() {\n        // returning something based on y is logical, but returning y\n        // itself might make people mistakenly think this is like\n        // intValue(), so let's do something weird to it first.\n        return y * y * y;\n    }\n\n    // THESE TWO METHODS ARE BUGGY AND NEED WORK!\n    public Year cropToCentury() {\n        // is this correct?\n        return add(-mod(100));\n    }\n\n    public Year nextCentury() {\n        // COMPLETELY INCORRECT!\n        Year tmp = add(100);\n        if (tmp.y == 101)\n            return new Year(100);\n        return tmp;\n    }\n}\n",
		"id": "/EvoSuiteBenchmark/35_corina/src/main/java/corina/Year_1Test.java",
		"test_prompt": "// Year_1Test.java\n// This file is part of Corina.\n//\n// Corina is free software; you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation; either version 2 of the License, or\n// (at your option) any later version.\n//\n// Corina is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Corina; if not, write to the Free Software\n// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n//\n// Copyright 2001 Ken Harris <kbh7@cornell.edu>\n//\npackage corina;\n\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link Year}.\n* It contains ten unit test cases for the {@link Year#isYearOne()} method.\n*/\nclass Year_1Test {"
	},
	{
		"original_code": "// Year.java\n//\n// This file is part of Corina.\n//\n// Corina is free software; you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation; either version 2 of the License, or\n// (at your option) any later version.\n//\n// Corina is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Corina; if not, write to the Free Software\n// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n//\n// Copyright 2001 Ken Harris <kbh7@cornell.edu>\n//\npackage corina;\n\n/**\n *   <p>A calendar year.  It normally acts similar to an integer, but\n *   skips the mythical \"year 0\".</p>\n *\n *   <p>In <code>Year</code> math:</p>\n *\n *   <ul>\n *     <li>-1 + 1 = 1</li>\n *     <li>2 - 4 = -3</li>\n *   </ul>\n *\n *   <p>Years, like Numbers and Strings, are immutable, so they are not\n *   Cloneable (there's no reason for them to be).</p>\n *\n *   @author Ken Harris &lt;kbh7 <i style=\"color: gray\">at</i> cornell <i style=\"color: gray\">dot</i> edu&gt;\n *   @version $Id: Year.java,v 1.4 2004/01/18 17:53:47 aaron Exp $\n */\npublic final class Year implements Comparable {\n\n    /**\n     * The default year: 1001.\n     */\n    public static final Year DEFAULT = new Year(1001);\n\n    /**\n     * Holds the year value as an <code>int</code>.\n     */\n    private final int y;\n\n    /**\n     *       Default constructor.  Uses <code>DEFAULT</code> as the year.\n     *\n     *       @see #DEFAULT\n     */\n    public Year() {\n        y = DEFAULT.y;\n    }\n\n    /**\n     *       Constructor for <code>int</code>s.  Uses <code>DEFAULT</code>\n     *       as the year if an invalid value is passed.\n     *\n     *       @param x the year value, as an int\n     *       @see #DEFAULT\n     */\n    public Year(int x) {\n        y = (x == 0 ? DEFAULT.y : x);\n    }\n\n    /**\n     *       Constructor from (row,col) pair.  Assumes 10-year rows.  The\n     *       column should always be between 0 and 9, inclusive.\n     *\n     *       @param row the row; row 0 is the decade ending in year 9\n     *       @param col the column; in row 0, year is the column\n     */\n    public Year(int row, int col) {\n        int yy = 10 * row + col;\n        if (yy == 0)\n            // should this be 1?\n            yy = DEFAULT.y;\n        y = yy;\n    }\n\n    /**\n     *       Constructor from String.  No AD/BC; reads it like C's\n     *       <code>scanf(\" %d \", &y)</code> would.\n     *\n     *       @exception NumberFormatException if the String cannot be\n     *       parsed, or is equal to zero\n     *       @see java.lang.String\n     */\n    public Year(String s) throws NumberFormatException {\n        y = Integer.parseInt(s.trim());\n        if (y == 0)\n            throw new NumberFormatException();\n    }\n\n    /**\n     *       Constructor from String.  No AD/BC; reads it like C's\n     *       <code>scanf(\" %d \", &y)</code> would.  This constructor is for\n     *       zero-year-systems, if <code>zys</code> is true, i.e., -5 means\n     *       6 BC.\n     *\n     *       @exception NumberFormatException if the String cannot be parsed\n     *       @see java.lang.String\n     */\n    public Year(String s, boolean zys) throws NumberFormatException {\n        int yy = Integer.parseInt(s.trim());\n        // back up a year, if this system assumed a zero-year\n        if (zys && yy <= 0)\n            yy--;\n        y = yy;\n    }\n\n    /**\n     *       Convert to a String.  No \"AD\"/\"BC\"; simply the integer value.\n     *\n     *       @return this year as a String\n     *       @see java.lang.String\n     */\n    public String toString() {\n        return String.valueOf(y);\n    }\n\n    /**\n     *       This method always throws UnsupportedOperationException.  It's\n     *       not implemented, and don't even think about implementing it\n     *       yourself!  It encourages being lazy and bypassing Year's\n     *       methods to just deal with ints.  And that defeats the whole\n     *       purpose of having Years.  So I'll just disallow it.  You don't\n     *       need it anyway.  If you really need the int for some reason I\n     *       can't imagine, you can always do\n     *       <code>Integer.parseInt(y.toString())</code>.  That way you know\n     *       you're doing it to get the int, and not for imagined\n     *       performance or convenience reasons.\n     *\n     *       @return never returns\n     *       @exception UnsupportedOperationException always!\n     */\n    public int intValue() {\n        // i pity th' fool who tries to use intvalue!\n        throw new UnsupportedOperationException();\n    }\n\n    /**\n     *       Return true, iff this is year 1.  (This actually comes up\n     *       fairly often.)\n     *\n     *       @return true iff this is year 1\n     */\n    public boolean isYearOne() {\n        return (y == 1);\n    }\n\n    /**\n     *       The maximum (later) of two years.\n     *\n     *       @return the later of two years\n     */\n    public static Year max(Year y1, Year y2) {\n        return (y1.y > y2.y ? y1 : y2);\n    }\n\n    /**\n     *       The minimum (earlier) of two years.\n     *\n     *       @return the earlier of two years\n     */\n    public static Year min(Year y1, Year y2) {\n        return (y1.y < y2.y ? y1 : y2);\n    }\n\n    /**\n     *       Adds (or subtracts, for negative values) some number of years,\n     *       and generates a new Year object.\n     *\n     *       @param dy the number of years to add (subtract)\n     *       @see #diff\n     */\n    public Year add(int dy) {\n        // copy, and convert to zys\n        int r = y;\n        if (r < 0)\n            r++;\n        // add dy\n        r += dy;\n        // convert back, and return\n        if (r <= 0)\n            r--;\n        return new Year(r);\n    }\n\n    /**\n     *       Calculate the number of years difference between two years.\n     *       That is, there are this many years difference between\n     *       <code>this</code> and <code>y2</code>; if they are equal, this\n     *       number is zero.\n     *\n     *       @param y2 the year to subtract\n     *       @return the number of years difference between\n     *       <code>this</code> and <code>y2</code>\n     *       @see #add\n     */\n    public int diff(Year y2) {\n        // copy, and convert to zys\n        int i1 = y;\n        if (i1 < 0)\n            i1++;\n        int i2 = y2.y;\n        if (i2 < 0)\n            i2++;\n        // subtract, and return\n        return i1 - i2;\n    }\n\n    /**\n     *       Computes <code>this</code> modulo <code>m</code>.  Always\n     *       gives a positive result, even for negative numbers, so it is\n     *       suitable for computing a grid position for a span of years.\n     *\n     *       @param m base for modulo\n     *       @return the year modulo <code>m</code>\n     */\n    public int mod(int m) {\n        int r = y % m;\n        if (r < 0)\n            r += m;\n        return r;\n    }\n\n    /**\n     *       Determines what row this year would be, if years were in a\n     *       grid 10 wide, with the left column years ending in zero.  Row\n     *       0 is years 1 through 9.\n     *\n     *       @return this year's row\n     *       @see #column\n     */\n    public int row() {\n        int z = y / 10;\n        if (y < 0 && y % 10 != 0)\n            z--;\n        return z;\n    }\n\n    /**\n     *        Determines what column this year would be, if years were in a\n     *        grid 10 wide, with the left column years ending in zero.\n     *\n     *        Works for BC years, also:\n     *        <table border=\"1\" cellspacing=\"0\">\n     * \t   <tr><th>column()</th><td>0</td><td>1</td><td>2</td><td>3</td><td>4</td>\n     * \t        <td>5</td><td>6</td><td>7</td><td>8</td><td>9</td></tr>\n     * \t   <tr><th rowspan=\"3\">Year</th><td>-10</td><td>-9</td><td>-8</td><td>-7</td><td>-6</td>\n     * \t        <td>-5</td><td>-4</td><td>-3</td><td>-2</td><td>-1</td></tr>\n     * \t   <tr><td> </td><td>1</td><td>2</td><td>3</td><td>4</td>\n     * \t        <td>5</td><td>6</td><td>7</td><td>8</td><td>9</td></tr>\n     * \t   <tr><td>10</td><td>11</td><td>12</td><td>13</td><td>14</td>\n     * \t        <td>15</td><td>16</td><td>17</td><td>18</td><td>19</td></tr>\n     *        </table>\n     *\n     *        @return this year's column\n     *        @see #row\n     */\n    public int column() {\n        return mod(10);\n    }\n\n    /**\n     *       Compares this and <code>o</code>.\n     *\n     *       @see java.lang.Comparable\n     *       @param o Object to compare\n     *       @return >0, =0, or <0 if this is greater-than, equal-to, or less-than o\n     *       @throws ClassCastException if o is not a Year\n     */\n    public int compareTo(Object o) {\n        return this.y - ((Year) o).y;\n    }\n\n    /**\n     *       Returns <code>true</code> if and only if <code>this</code> is\n     *       equal to <code>y2</code>.\n     *\n     *       @param y2 the year to compare <code>this</code> to\n     *       @return <code>true</code> if <code>this</code> is equal to\n     *       <code>y2</code>, else <code>false</code>\n     */\n    public boolean equals(Object y2) {\n        return (y == ((Year) y2).y);\n    }\n\n    // since i define equals(), i need to define hashCode()\n    public int hashCode() {\n        // returning something based on y is logical, but returning y\n        // itself might make people mistakenly think this is like\n        // intValue(), so let's do something weird to it first.\n        return y * y * y;\n    }\n\n    // THESE TWO METHODS ARE BUGGY AND NEED WORK!\n    public Year cropToCentury() {\n        // is this correct?\n        return add(-mod(100));\n    }\n\n    public Year nextCentury() {\n        // COMPLETELY INCORRECT!\n        Year tmp = add(100);\n        if (tmp.y == 101)\n            return new Year(100);\n        return tmp;\n    }\n}\n",
		"id": "/EvoSuiteBenchmark/35_corina/src/main/java/corina/Year_2Test.java",
		"test_prompt": "// Year_2Test.java\n// This file is part of Corina.\n//\n// Corina is free software; you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation; either version 2 of the License, or\n// (at your option) any later version.\n//\n// Corina is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Corina; if not, write to the Free Software\n// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n//\n// Copyright 2001 Ken Harris <kbh7@cornell.edu>\n//\npackage corina;\n\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link Year}.\n* It contains ten unit test cases for the {@link Year#max(Year, Year)} method.\n*/\nclass Year_2Test {"
	},
	{
		"original_code": "// Year.java\n//\n// This file is part of Corina.\n//\n// Corina is free software; you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation; either version 2 of the License, or\n// (at your option) any later version.\n//\n// Corina is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Corina; if not, write to the Free Software\n// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n//\n// Copyright 2001 Ken Harris <kbh7@cornell.edu>\n//\npackage corina;\n\n/**\n *   <p>A calendar year.  It normally acts similar to an integer, but\n *   skips the mythical \"year 0\".</p>\n *\n *   <p>In <code>Year</code> math:</p>\n *\n *   <ul>\n *     <li>-1 + 1 = 1</li>\n *     <li>2 - 4 = -3</li>\n *   </ul>\n *\n *   <p>Years, like Numbers and Strings, are immutable, so they are not\n *   Cloneable (there's no reason for them to be).</p>\n *\n *   @author Ken Harris &lt;kbh7 <i style=\"color: gray\">at</i> cornell <i style=\"color: gray\">dot</i> edu&gt;\n *   @version $Id: Year.java,v 1.4 2004/01/18 17:53:47 aaron Exp $\n */\npublic final class Year implements Comparable {\n\n    /**\n     * The default year: 1001.\n     */\n    public static final Year DEFAULT = new Year(1001);\n\n    /**\n     * Holds the year value as an <code>int</code>.\n     */\n    private final int y;\n\n    /**\n     *       Default constructor.  Uses <code>DEFAULT</code> as the year.\n     *\n     *       @see #DEFAULT\n     */\n    public Year() {\n        y = DEFAULT.y;\n    }\n\n    /**\n     *       Constructor for <code>int</code>s.  Uses <code>DEFAULT</code>\n     *       as the year if an invalid value is passed.\n     *\n     *       @param x the year value, as an int\n     *       @see #DEFAULT\n     */\n    public Year(int x) {\n        y = (x == 0 ? DEFAULT.y : x);\n    }\n\n    /**\n     *       Constructor from (row,col) pair.  Assumes 10-year rows.  The\n     *       column should always be between 0 and 9, inclusive.\n     *\n     *       @param row the row; row 0 is the decade ending in year 9\n     *       @param col the column; in row 0, year is the column\n     */\n    public Year(int row, int col) {\n        int yy = 10 * row + col;\n        if (yy == 0)\n            // should this be 1?\n            yy = DEFAULT.y;\n        y = yy;\n    }\n\n    /**\n     *       Constructor from String.  No AD/BC; reads it like C's\n     *       <code>scanf(\" %d \", &y)</code> would.\n     *\n     *       @exception NumberFormatException if the String cannot be\n     *       parsed, or is equal to zero\n     *       @see java.lang.String\n     */\n    public Year(String s) throws NumberFormatException {\n        y = Integer.parseInt(s.trim());\n        if (y == 0)\n            throw new NumberFormatException();\n    }\n\n    /**\n     *       Constructor from String.  No AD/BC; reads it like C's\n     *       <code>scanf(\" %d \", &y)</code> would.  This constructor is for\n     *       zero-year-systems, if <code>zys</code> is true, i.e., -5 means\n     *       6 BC.\n     *\n     *       @exception NumberFormatException if the String cannot be parsed\n     *       @see java.lang.String\n     */\n    public Year(String s, boolean zys) throws NumberFormatException {\n        int yy = Integer.parseInt(s.trim());\n        // back up a year, if this system assumed a zero-year\n        if (zys && yy <= 0)\n            yy--;\n        y = yy;\n    }\n\n    /**\n     *       Convert to a String.  No \"AD\"/\"BC\"; simply the integer value.\n     *\n     *       @return this year as a String\n     *       @see java.lang.String\n     */\n    public String toString() {\n        return String.valueOf(y);\n    }\n\n    /**\n     *       This method always throws UnsupportedOperationException.  It's\n     *       not implemented, and don't even think about implementing it\n     *       yourself!  It encourages being lazy and bypassing Year's\n     *       methods to just deal with ints.  And that defeats the whole\n     *       purpose of having Years.  So I'll just disallow it.  You don't\n     *       need it anyway.  If you really need the int for some reason I\n     *       can't imagine, you can always do\n     *       <code>Integer.parseInt(y.toString())</code>.  That way you know\n     *       you're doing it to get the int, and not for imagined\n     *       performance or convenience reasons.\n     *\n     *       @return never returns\n     *       @exception UnsupportedOperationException always!\n     */\n    public int intValue() {\n        // i pity th' fool who tries to use intvalue!\n        throw new UnsupportedOperationException();\n    }\n\n    /**\n     *       Return true, iff this is year 1.  (This actually comes up\n     *       fairly often.)\n     *\n     *       @return true iff this is year 1\n     */\n    public boolean isYearOne() {\n        return (y == 1);\n    }\n\n    /**\n     *       The maximum (later) of two years.\n     *\n     *       @return the later of two years\n     */\n    public static Year max(Year y1, Year y2) {\n        return (y1.y > y2.y ? y1 : y2);\n    }\n\n    /**\n     *       The minimum (earlier) of two years.\n     *\n     *       @return the earlier of two years\n     */\n    public static Year min(Year y1, Year y2) {\n        return (y1.y < y2.y ? y1 : y2);\n    }\n\n    /**\n     *       Adds (or subtracts, for negative values) some number of years,\n     *       and generates a new Year object.\n     *\n     *       @param dy the number of years to add (subtract)\n     *       @see #diff\n     */\n    public Year add(int dy) {\n        // copy, and convert to zys\n        int r = y;\n        if (r < 0)\n            r++;\n        // add dy\n        r += dy;\n        // convert back, and return\n        if (r <= 0)\n            r--;\n        return new Year(r);\n    }\n\n    /**\n     *       Calculate the number of years difference between two years.\n     *       That is, there are this many years difference between\n     *       <code>this</code> and <code>y2</code>; if they are equal, this\n     *       number is zero.\n     *\n     *       @param y2 the year to subtract\n     *       @return the number of years difference between\n     *       <code>this</code> and <code>y2</code>\n     *       @see #add\n     */\n    public int diff(Year y2) {\n        // copy, and convert to zys\n        int i1 = y;\n        if (i1 < 0)\n            i1++;\n        int i2 = y2.y;\n        if (i2 < 0)\n            i2++;\n        // subtract, and return\n        return i1 - i2;\n    }\n\n    /**\n     *       Computes <code>this</code> modulo <code>m</code>.  Always\n     *       gives a positive result, even for negative numbers, so it is\n     *       suitable for computing a grid position for a span of years.\n     *\n     *       @param m base for modulo\n     *       @return the year modulo <code>m</code>\n     */\n    public int mod(int m) {\n        int r = y % m;\n        if (r < 0)\n            r += m;\n        return r;\n    }\n\n    /**\n     *       Determines what row this year would be, if years were in a\n     *       grid 10 wide, with the left column years ending in zero.  Row\n     *       0 is years 1 through 9.\n     *\n     *       @return this year's row\n     *       @see #column\n     */\n    public int row() {\n        int z = y / 10;\n        if (y < 0 && y % 10 != 0)\n            z--;\n        return z;\n    }\n\n    /**\n     *        Determines what column this year would be, if years were in a\n     *        grid 10 wide, with the left column years ending in zero.\n     *\n     *        Works for BC years, also:\n     *        <table border=\"1\" cellspacing=\"0\">\n     * \t   <tr><th>column()</th><td>0</td><td>1</td><td>2</td><td>3</td><td>4</td>\n     * \t        <td>5</td><td>6</td><td>7</td><td>8</td><td>9</td></tr>\n     * \t   <tr><th rowspan=\"3\">Year</th><td>-10</td><td>-9</td><td>-8</td><td>-7</td><td>-6</td>\n     * \t        <td>-5</td><td>-4</td><td>-3</td><td>-2</td><td>-1</td></tr>\n     * \t   <tr><td> </td><td>1</td><td>2</td><td>3</td><td>4</td>\n     * \t        <td>5</td><td>6</td><td>7</td><td>8</td><td>9</td></tr>\n     * \t   <tr><td>10</td><td>11</td><td>12</td><td>13</td><td>14</td>\n     * \t        <td>15</td><td>16</td><td>17</td><td>18</td><td>19</td></tr>\n     *        </table>\n     *\n     *        @return this year's column\n     *        @see #row\n     */\n    public int column() {\n        return mod(10);\n    }\n\n    /**\n     *       Compares this and <code>o</code>.\n     *\n     *       @see java.lang.Comparable\n     *       @param o Object to compare\n     *       @return >0, =0, or <0 if this is greater-than, equal-to, or less-than o\n     *       @throws ClassCastException if o is not a Year\n     */\n    public int compareTo(Object o) {\n        return this.y - ((Year) o).y;\n    }\n\n    /**\n     *       Returns <code>true</code> if and only if <code>this</code> is\n     *       equal to <code>y2</code>.\n     *\n     *       @param y2 the year to compare <code>this</code> to\n     *       @return <code>true</code> if <code>this</code> is equal to\n     *       <code>y2</code>, else <code>false</code>\n     */\n    public boolean equals(Object y2) {\n        return (y == ((Year) y2).y);\n    }\n\n    // since i define equals(), i need to define hashCode()\n    public int hashCode() {\n        // returning something based on y is logical, but returning y\n        // itself might make people mistakenly think this is like\n        // intValue(), so let's do something weird to it first.\n        return y * y * y;\n    }\n\n    // THESE TWO METHODS ARE BUGGY AND NEED WORK!\n    public Year cropToCentury() {\n        // is this correct?\n        return add(-mod(100));\n    }\n\n    public Year nextCentury() {\n        // COMPLETELY INCORRECT!\n        Year tmp = add(100);\n        if (tmp.y == 101)\n            return new Year(100);\n        return tmp;\n    }\n}\n",
		"id": "/EvoSuiteBenchmark/35_corina/src/main/java/corina/Year_3Test.java",
		"test_prompt": "// Year_3Test.java\n// This file is part of Corina.\n//\n// Corina is free software; you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation; either version 2 of the License, or\n// (at your option) any later version.\n//\n// Corina is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Corina; if not, write to the Free Software\n// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n//\n// Copyright 2001 Ken Harris <kbh7@cornell.edu>\n//\npackage corina;\n\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link Year}.\n* It contains ten unit test cases for the {@link Year#min(Year, Year)} method.\n*/\nclass Year_3Test {"
	},
	{
		"original_code": "// Year.java\n//\n// This file is part of Corina.\n//\n// Corina is free software; you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation; either version 2 of the License, or\n// (at your option) any later version.\n//\n// Corina is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Corina; if not, write to the Free Software\n// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n//\n// Copyright 2001 Ken Harris <kbh7@cornell.edu>\n//\npackage corina;\n\n/**\n *   <p>A calendar year.  It normally acts similar to an integer, but\n *   skips the mythical \"year 0\".</p>\n *\n *   <p>In <code>Year</code> math:</p>\n *\n *   <ul>\n *     <li>-1 + 1 = 1</li>\n *     <li>2 - 4 = -3</li>\n *   </ul>\n *\n *   <p>Years, like Numbers and Strings, are immutable, so they are not\n *   Cloneable (there's no reason for them to be).</p>\n *\n *   @author Ken Harris &lt;kbh7 <i style=\"color: gray\">at</i> cornell <i style=\"color: gray\">dot</i> edu&gt;\n *   @version $Id: Year.java,v 1.4 2004/01/18 17:53:47 aaron Exp $\n */\npublic final class Year implements Comparable {\n\n    /**\n     * The default year: 1001.\n     */\n    public static final Year DEFAULT = new Year(1001);\n\n    /**\n     * Holds the year value as an <code>int</code>.\n     */\n    private final int y;\n\n    /**\n     *       Default constructor.  Uses <code>DEFAULT</code> as the year.\n     *\n     *       @see #DEFAULT\n     */\n    public Year() {\n        y = DEFAULT.y;\n    }\n\n    /**\n     *       Constructor for <code>int</code>s.  Uses <code>DEFAULT</code>\n     *       as the year if an invalid value is passed.\n     *\n     *       @param x the year value, as an int\n     *       @see #DEFAULT\n     */\n    public Year(int x) {\n        y = (x == 0 ? DEFAULT.y : x);\n    }\n\n    /**\n     *       Constructor from (row,col) pair.  Assumes 10-year rows.  The\n     *       column should always be between 0 and 9, inclusive.\n     *\n     *       @param row the row; row 0 is the decade ending in year 9\n     *       @param col the column; in row 0, year is the column\n     */\n    public Year(int row, int col) {\n        int yy = 10 * row + col;\n        if (yy == 0)\n            // should this be 1?\n            yy = DEFAULT.y;\n        y = yy;\n    }\n\n    /**\n     *       Constructor from String.  No AD/BC; reads it like C's\n     *       <code>scanf(\" %d \", &y)</code> would.\n     *\n     *       @exception NumberFormatException if the String cannot be\n     *       parsed, or is equal to zero\n     *       @see java.lang.String\n     */\n    public Year(String s) throws NumberFormatException {\n        y = Integer.parseInt(s.trim());\n        if (y == 0)\n            throw new NumberFormatException();\n    }\n\n    /**\n     *       Constructor from String.  No AD/BC; reads it like C's\n     *       <code>scanf(\" %d \", &y)</code> would.  This constructor is for\n     *       zero-year-systems, if <code>zys</code> is true, i.e., -5 means\n     *       6 BC.\n     *\n     *       @exception NumberFormatException if the String cannot be parsed\n     *       @see java.lang.String\n     */\n    public Year(String s, boolean zys) throws NumberFormatException {\n        int yy = Integer.parseInt(s.trim());\n        // back up a year, if this system assumed a zero-year\n        if (zys && yy <= 0)\n            yy--;\n        y = yy;\n    }\n\n    /**\n     *       Convert to a String.  No \"AD\"/\"BC\"; simply the integer value.\n     *\n     *       @return this year as a String\n     *       @see java.lang.String\n     */\n    public String toString() {\n        return String.valueOf(y);\n    }\n\n    /**\n     *       This method always throws UnsupportedOperationException.  It's\n     *       not implemented, and don't even think about implementing it\n     *       yourself!  It encourages being lazy and bypassing Year's\n     *       methods to just deal with ints.  And that defeats the whole\n     *       purpose of having Years.  So I'll just disallow it.  You don't\n     *       need it anyway.  If you really need the int for some reason I\n     *       can't imagine, you can always do\n     *       <code>Integer.parseInt(y.toString())</code>.  That way you know\n     *       you're doing it to get the int, and not for imagined\n     *       performance or convenience reasons.\n     *\n     *       @return never returns\n     *       @exception UnsupportedOperationException always!\n     */\n    public int intValue() {\n        // i pity th' fool who tries to use intvalue!\n        throw new UnsupportedOperationException();\n    }\n\n    /**\n     *       Return true, iff this is year 1.  (This actually comes up\n     *       fairly often.)\n     *\n     *       @return true iff this is year 1\n     */\n    public boolean isYearOne() {\n        return (y == 1);\n    }\n\n    /**\n     *       The maximum (later) of two years.\n     *\n     *       @return the later of two years\n     */\n    public static Year max(Year y1, Year y2) {\n        return (y1.y > y2.y ? y1 : y2);\n    }\n\n    /**\n     *       The minimum (earlier) of two years.\n     *\n     *       @return the earlier of two years\n     */\n    public static Year min(Year y1, Year y2) {\n        return (y1.y < y2.y ? y1 : y2);\n    }\n\n    /**\n     *       Adds (or subtracts, for negative values) some number of years,\n     *       and generates a new Year object.\n     *\n     *       @param dy the number of years to add (subtract)\n     *       @see #diff\n     */\n    public Year add(int dy) {\n        // copy, and convert to zys\n        int r = y;\n        if (r < 0)\n            r++;\n        // add dy\n        r += dy;\n        // convert back, and return\n        if (r <= 0)\n            r--;\n        return new Year(r);\n    }\n\n    /**\n     *       Calculate the number of years difference between two years.\n     *       That is, there are this many years difference between\n     *       <code>this</code> and <code>y2</code>; if they are equal, this\n     *       number is zero.\n     *\n     *       @param y2 the year to subtract\n     *       @return the number of years difference between\n     *       <code>this</code> and <code>y2</code>\n     *       @see #add\n     */\n    public int diff(Year y2) {\n        // copy, and convert to zys\n        int i1 = y;\n        if (i1 < 0)\n            i1++;\n        int i2 = y2.y;\n        if (i2 < 0)\n            i2++;\n        // subtract, and return\n        return i1 - i2;\n    }\n\n    /**\n     *       Computes <code>this</code> modulo <code>m</code>.  Always\n     *       gives a positive result, even for negative numbers, so it is\n     *       suitable for computing a grid position for a span of years.\n     *\n     *       @param m base for modulo\n     *       @return the year modulo <code>m</code>\n     */\n    public int mod(int m) {\n        int r = y % m;\n        if (r < 0)\n            r += m;\n        return r;\n    }\n\n    /**\n     *       Determines what row this year would be, if years were in a\n     *       grid 10 wide, with the left column years ending in zero.  Row\n     *       0 is years 1 through 9.\n     *\n     *       @return this year's row\n     *       @see #column\n     */\n    public int row() {\n        int z = y / 10;\n        if (y < 0 && y % 10 != 0)\n            z--;\n        return z;\n    }\n\n    /**\n     *        Determines what column this year would be, if years were in a\n     *        grid 10 wide, with the left column years ending in zero.\n     *\n     *        Works for BC years, also:\n     *        <table border=\"1\" cellspacing=\"0\">\n     * \t   <tr><th>column()</th><td>0</td><td>1</td><td>2</td><td>3</td><td>4</td>\n     * \t        <td>5</td><td>6</td><td>7</td><td>8</td><td>9</td></tr>\n     * \t   <tr><th rowspan=\"3\">Year</th><td>-10</td><td>-9</td><td>-8</td><td>-7</td><td>-6</td>\n     * \t        <td>-5</td><td>-4</td><td>-3</td><td>-2</td><td>-1</td></tr>\n     * \t   <tr><td> </td><td>1</td><td>2</td><td>3</td><td>4</td>\n     * \t        <td>5</td><td>6</td><td>7</td><td>8</td><td>9</td></tr>\n     * \t   <tr><td>10</td><td>11</td><td>12</td><td>13</td><td>14</td>\n     * \t        <td>15</td><td>16</td><td>17</td><td>18</td><td>19</td></tr>\n     *        </table>\n     *\n     *        @return this year's column\n     *        @see #row\n     */\n    public int column() {\n        return mod(10);\n    }\n\n    /**\n     *       Compares this and <code>o</code>.\n     *\n     *       @see java.lang.Comparable\n     *       @param o Object to compare\n     *       @return >0, =0, or <0 if this is greater-than, equal-to, or less-than o\n     *       @throws ClassCastException if o is not a Year\n     */\n    public int compareTo(Object o) {\n        return this.y - ((Year) o).y;\n    }\n\n    /**\n     *       Returns <code>true</code> if and only if <code>this</code> is\n     *       equal to <code>y2</code>.\n     *\n     *       @param y2 the year to compare <code>this</code> to\n     *       @return <code>true</code> if <code>this</code> is equal to\n     *       <code>y2</code>, else <code>false</code>\n     */\n    public boolean equals(Object y2) {\n        return (y == ((Year) y2).y);\n    }\n\n    // since i define equals(), i need to define hashCode()\n    public int hashCode() {\n        // returning something based on y is logical, but returning y\n        // itself might make people mistakenly think this is like\n        // intValue(), so let's do something weird to it first.\n        return y * y * y;\n    }\n\n    // THESE TWO METHODS ARE BUGGY AND NEED WORK!\n    public Year cropToCentury() {\n        // is this correct?\n        return add(-mod(100));\n    }\n\n    public Year nextCentury() {\n        // COMPLETELY INCORRECT!\n        Year tmp = add(100);\n        if (tmp.y == 101)\n            return new Year(100);\n        return tmp;\n    }\n}\n",
		"id": "/EvoSuiteBenchmark/35_corina/src/main/java/corina/Year_4Test.java",
		"test_prompt": "// Year_4Test.java\n// This file is part of Corina.\n//\n// Corina is free software; you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation; either version 2 of the License, or\n// (at your option) any later version.\n//\n// Corina is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Corina; if not, write to the Free Software\n// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n//\n// Copyright 2001 Ken Harris <kbh7@cornell.edu>\n//\npackage corina;\n\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link Year}.\n* It contains ten unit test cases for the {@link Year#add(int)} method.\n*/\nclass Year_4Test {"
	},
	{
		"original_code": "// Year.java\n//\n// This file is part of Corina.\n//\n// Corina is free software; you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation; either version 2 of the License, or\n// (at your option) any later version.\n//\n// Corina is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Corina; if not, write to the Free Software\n// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n//\n// Copyright 2001 Ken Harris <kbh7@cornell.edu>\n//\npackage corina;\n\n/**\n *   <p>A calendar year.  It normally acts similar to an integer, but\n *   skips the mythical \"year 0\".</p>\n *\n *   <p>In <code>Year</code> math:</p>\n *\n *   <ul>\n *     <li>-1 + 1 = 1</li>\n *     <li>2 - 4 = -3</li>\n *   </ul>\n *\n *   <p>Years, like Numbers and Strings, are immutable, so they are not\n *   Cloneable (there's no reason for them to be).</p>\n *\n *   @author Ken Harris &lt;kbh7 <i style=\"color: gray\">at</i> cornell <i style=\"color: gray\">dot</i> edu&gt;\n *   @version $Id: Year.java,v 1.4 2004/01/18 17:53:47 aaron Exp $\n */\npublic final class Year implements Comparable {\n\n    /**\n     * The default year: 1001.\n     */\n    public static final Year DEFAULT = new Year(1001);\n\n    /**\n     * Holds the year value as an <code>int</code>.\n     */\n    private final int y;\n\n    /**\n     *       Default constructor.  Uses <code>DEFAULT</code> as the year.\n     *\n     *       @see #DEFAULT\n     */\n    public Year() {\n        y = DEFAULT.y;\n    }\n\n    /**\n     *       Constructor for <code>int</code>s.  Uses <code>DEFAULT</code>\n     *       as the year if an invalid value is passed.\n     *\n     *       @param x the year value, as an int\n     *       @see #DEFAULT\n     */\n    public Year(int x) {\n        y = (x == 0 ? DEFAULT.y : x);\n    }\n\n    /**\n     *       Constructor from (row,col) pair.  Assumes 10-year rows.  The\n     *       column should always be between 0 and 9, inclusive.\n     *\n     *       @param row the row; row 0 is the decade ending in year 9\n     *       @param col the column; in row 0, year is the column\n     */\n    public Year(int row, int col) {\n        int yy = 10 * row + col;\n        if (yy == 0)\n            // should this be 1?\n            yy = DEFAULT.y;\n        y = yy;\n    }\n\n    /**\n     *       Constructor from String.  No AD/BC; reads it like C's\n     *       <code>scanf(\" %d \", &y)</code> would.\n     *\n     *       @exception NumberFormatException if the String cannot be\n     *       parsed, or is equal to zero\n     *       @see java.lang.String\n     */\n    public Year(String s) throws NumberFormatException {\n        y = Integer.parseInt(s.trim());\n        if (y == 0)\n            throw new NumberFormatException();\n    }\n\n    /**\n     *       Constructor from String.  No AD/BC; reads it like C's\n     *       <code>scanf(\" %d \", &y)</code> would.  This constructor is for\n     *       zero-year-systems, if <code>zys</code> is true, i.e., -5 means\n     *       6 BC.\n     *\n     *       @exception NumberFormatException if the String cannot be parsed\n     *       @see java.lang.String\n     */\n    public Year(String s, boolean zys) throws NumberFormatException {\n        int yy = Integer.parseInt(s.trim());\n        // back up a year, if this system assumed a zero-year\n        if (zys && yy <= 0)\n            yy--;\n        y = yy;\n    }\n\n    /**\n     *       Convert to a String.  No \"AD\"/\"BC\"; simply the integer value.\n     *\n     *       @return this year as a String\n     *       @see java.lang.String\n     */\n    public String toString() {\n        return String.valueOf(y);\n    }\n\n    /**\n     *       This method always throws UnsupportedOperationException.  It's\n     *       not implemented, and don't even think about implementing it\n     *       yourself!  It encourages being lazy and bypassing Year's\n     *       methods to just deal with ints.  And that defeats the whole\n     *       purpose of having Years.  So I'll just disallow it.  You don't\n     *       need it anyway.  If you really need the int for some reason I\n     *       can't imagine, you can always do\n     *       <code>Integer.parseInt(y.toString())</code>.  That way you know\n     *       you're doing it to get the int, and not for imagined\n     *       performance or convenience reasons.\n     *\n     *       @return never returns\n     *       @exception UnsupportedOperationException always!\n     */\n    public int intValue() {\n        // i pity th' fool who tries to use intvalue!\n        throw new UnsupportedOperationException();\n    }\n\n    /**\n     *       Return true, iff this is year 1.  (This actually comes up\n     *       fairly often.)\n     *\n     *       @return true iff this is year 1\n     */\n    public boolean isYearOne() {\n        return (y == 1);\n    }\n\n    /**\n     *       The maximum (later) of two years.\n     *\n     *       @return the later of two years\n     */\n    public static Year max(Year y1, Year y2) {\n        return (y1.y > y2.y ? y1 : y2);\n    }\n\n    /**\n     *       The minimum (earlier) of two years.\n     *\n     *       @return the earlier of two years\n     */\n    public static Year min(Year y1, Year y2) {\n        return (y1.y < y2.y ? y1 : y2);\n    }\n\n    /**\n     *       Adds (or subtracts, for negative values) some number of years,\n     *       and generates a new Year object.\n     *\n     *       @param dy the number of years to add (subtract)\n     *       @see #diff\n     */\n    public Year add(int dy) {\n        // copy, and convert to zys\n        int r = y;\n        if (r < 0)\n            r++;\n        // add dy\n        r += dy;\n        // convert back, and return\n        if (r <= 0)\n            r--;\n        return new Year(r);\n    }\n\n    /**\n     *       Calculate the number of years difference between two years.\n     *       That is, there are this many years difference between\n     *       <code>this</code> and <code>y2</code>; if they are equal, this\n     *       number is zero.\n     *\n     *       @param y2 the year to subtract\n     *       @return the number of years difference between\n     *       <code>this</code> and <code>y2</code>\n     *       @see #add\n     */\n    public int diff(Year y2) {\n        // copy, and convert to zys\n        int i1 = y;\n        if (i1 < 0)\n            i1++;\n        int i2 = y2.y;\n        if (i2 < 0)\n            i2++;\n        // subtract, and return\n        return i1 - i2;\n    }\n\n    /**\n     *       Computes <code>this</code> modulo <code>m</code>.  Always\n     *       gives a positive result, even for negative numbers, so it is\n     *       suitable for computing a grid position for a span of years.\n     *\n     *       @param m base for modulo\n     *       @return the year modulo <code>m</code>\n     */\n    public int mod(int m) {\n        int r = y % m;\n        if (r < 0)\n            r += m;\n        return r;\n    }\n\n    /**\n     *       Determines what row this year would be, if years were in a\n     *       grid 10 wide, with the left column years ending in zero.  Row\n     *       0 is years 1 through 9.\n     *\n     *       @return this year's row\n     *       @see #column\n     */\n    public int row() {\n        int z = y / 10;\n        if (y < 0 && y % 10 != 0)\n            z--;\n        return z;\n    }\n\n    /**\n     *        Determines what column this year would be, if years were in a\n     *        grid 10 wide, with the left column years ending in zero.\n     *\n     *        Works for BC years, also:\n     *        <table border=\"1\" cellspacing=\"0\">\n     * \t   <tr><th>column()</th><td>0</td><td>1</td><td>2</td><td>3</td><td>4</td>\n     * \t        <td>5</td><td>6</td><td>7</td><td>8</td><td>9</td></tr>\n     * \t   <tr><th rowspan=\"3\">Year</th><td>-10</td><td>-9</td><td>-8</td><td>-7</td><td>-6</td>\n     * \t        <td>-5</td><td>-4</td><td>-3</td><td>-2</td><td>-1</td></tr>\n     * \t   <tr><td> </td><td>1</td><td>2</td><td>3</td><td>4</td>\n     * \t        <td>5</td><td>6</td><td>7</td><td>8</td><td>9</td></tr>\n     * \t   <tr><td>10</td><td>11</td><td>12</td><td>13</td><td>14</td>\n     * \t        <td>15</td><td>16</td><td>17</td><td>18</td><td>19</td></tr>\n     *        </table>\n     *\n     *        @return this year's column\n     *        @see #row\n     */\n    public int column() {\n        return mod(10);\n    }\n\n    /**\n     *       Compares this and <code>o</code>.\n     *\n     *       @see java.lang.Comparable\n     *       @param o Object to compare\n     *       @return >0, =0, or <0 if this is greater-than, equal-to, or less-than o\n     *       @throws ClassCastException if o is not a Year\n     */\n    public int compareTo(Object o) {\n        return this.y - ((Year) o).y;\n    }\n\n    /**\n     *       Returns <code>true</code> if and only if <code>this</code> is\n     *       equal to <code>y2</code>.\n     *\n     *       @param y2 the year to compare <code>this</code> to\n     *       @return <code>true</code> if <code>this</code> is equal to\n     *       <code>y2</code>, else <code>false</code>\n     */\n    public boolean equals(Object y2) {\n        return (y == ((Year) y2).y);\n    }\n\n    // since i define equals(), i need to define hashCode()\n    public int hashCode() {\n        // returning something based on y is logical, but returning y\n        // itself might make people mistakenly think this is like\n        // intValue(), so let's do something weird to it first.\n        return y * y * y;\n    }\n\n    // THESE TWO METHODS ARE BUGGY AND NEED WORK!\n    public Year cropToCentury() {\n        // is this correct?\n        return add(-mod(100));\n    }\n\n    public Year nextCentury() {\n        // COMPLETELY INCORRECT!\n        Year tmp = add(100);\n        if (tmp.y == 101)\n            return new Year(100);\n        return tmp;\n    }\n}\n",
		"id": "/EvoSuiteBenchmark/35_corina/src/main/java/corina/Year_5Test.java",
		"test_prompt": "// Year_5Test.java\n// This file is part of Corina.\n//\n// Corina is free software; you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation; either version 2 of the License, or\n// (at your option) any later version.\n//\n// Corina is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Corina; if not, write to the Free Software\n// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n//\n// Copyright 2001 Ken Harris <kbh7@cornell.edu>\n//\npackage corina;\n\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link Year}.\n* It contains ten unit test cases for the {@link Year#diff(Year)} method.\n*/\nclass Year_5Test {"
	},
	{
		"original_code": "// Year.java\n//\n// This file is part of Corina.\n//\n// Corina is free software; you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation; either version 2 of the License, or\n// (at your option) any later version.\n//\n// Corina is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Corina; if not, write to the Free Software\n// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n//\n// Copyright 2001 Ken Harris <kbh7@cornell.edu>\n//\npackage corina;\n\n/**\n *   <p>A calendar year.  It normally acts similar to an integer, but\n *   skips the mythical \"year 0\".</p>\n *\n *   <p>In <code>Year</code> math:</p>\n *\n *   <ul>\n *     <li>-1 + 1 = 1</li>\n *     <li>2 - 4 = -3</li>\n *   </ul>\n *\n *   <p>Years, like Numbers and Strings, are immutable, so they are not\n *   Cloneable (there's no reason for them to be).</p>\n *\n *   @author Ken Harris &lt;kbh7 <i style=\"color: gray\">at</i> cornell <i style=\"color: gray\">dot</i> edu&gt;\n *   @version $Id: Year.java,v 1.4 2004/01/18 17:53:47 aaron Exp $\n */\npublic final class Year implements Comparable {\n\n    /**\n     * The default year: 1001.\n     */\n    public static final Year DEFAULT = new Year(1001);\n\n    /**\n     * Holds the year value as an <code>int</code>.\n     */\n    private final int y;\n\n    /**\n     *       Default constructor.  Uses <code>DEFAULT</code> as the year.\n     *\n     *       @see #DEFAULT\n     */\n    public Year() {\n        y = DEFAULT.y;\n    }\n\n    /**\n     *       Constructor for <code>int</code>s.  Uses <code>DEFAULT</code>\n     *       as the year if an invalid value is passed.\n     *\n     *       @param x the year value, as an int\n     *       @see #DEFAULT\n     */\n    public Year(int x) {\n        y = (x == 0 ? DEFAULT.y : x);\n    }\n\n    /**\n     *       Constructor from (row,col) pair.  Assumes 10-year rows.  The\n     *       column should always be between 0 and 9, inclusive.\n     *\n     *       @param row the row; row 0 is the decade ending in year 9\n     *       @param col the column; in row 0, year is the column\n     */\n    public Year(int row, int col) {\n        int yy = 10 * row + col;\n        if (yy == 0)\n            // should this be 1?\n            yy = DEFAULT.y;\n        y = yy;\n    }\n\n    /**\n     *       Constructor from String.  No AD/BC; reads it like C's\n     *       <code>scanf(\" %d \", &y)</code> would.\n     *\n     *       @exception NumberFormatException if the String cannot be\n     *       parsed, or is equal to zero\n     *       @see java.lang.String\n     */\n    public Year(String s) throws NumberFormatException {\n        y = Integer.parseInt(s.trim());\n        if (y == 0)\n            throw new NumberFormatException();\n    }\n\n    /**\n     *       Constructor from String.  No AD/BC; reads it like C's\n     *       <code>scanf(\" %d \", &y)</code> would.  This constructor is for\n     *       zero-year-systems, if <code>zys</code> is true, i.e., -5 means\n     *       6 BC.\n     *\n     *       @exception NumberFormatException if the String cannot be parsed\n     *       @see java.lang.String\n     */\n    public Year(String s, boolean zys) throws NumberFormatException {\n        int yy = Integer.parseInt(s.trim());\n        // back up a year, if this system assumed a zero-year\n        if (zys && yy <= 0)\n            yy--;\n        y = yy;\n    }\n\n    /**\n     *       Convert to a String.  No \"AD\"/\"BC\"; simply the integer value.\n     *\n     *       @return this year as a String\n     *       @see java.lang.String\n     */\n    public String toString() {\n        return String.valueOf(y);\n    }\n\n    /**\n     *       This method always throws UnsupportedOperationException.  It's\n     *       not implemented, and don't even think about implementing it\n     *       yourself!  It encourages being lazy and bypassing Year's\n     *       methods to just deal with ints.  And that defeats the whole\n     *       purpose of having Years.  So I'll just disallow it.  You don't\n     *       need it anyway.  If you really need the int for some reason I\n     *       can't imagine, you can always do\n     *       <code>Integer.parseInt(y.toString())</code>.  That way you know\n     *       you're doing it to get the int, and not for imagined\n     *       performance or convenience reasons.\n     *\n     *       @return never returns\n     *       @exception UnsupportedOperationException always!\n     */\n    public int intValue() {\n        // i pity th' fool who tries to use intvalue!\n        throw new UnsupportedOperationException();\n    }\n\n    /**\n     *       Return true, iff this is year 1.  (This actually comes up\n     *       fairly often.)\n     *\n     *       @return true iff this is year 1\n     */\n    public boolean isYearOne() {\n        return (y == 1);\n    }\n\n    /**\n     *       The maximum (later) of two years.\n     *\n     *       @return the later of two years\n     */\n    public static Year max(Year y1, Year y2) {\n        return (y1.y > y2.y ? y1 : y2);\n    }\n\n    /**\n     *       The minimum (earlier) of two years.\n     *\n     *       @return the earlier of two years\n     */\n    public static Year min(Year y1, Year y2) {\n        return (y1.y < y2.y ? y1 : y2);\n    }\n\n    /**\n     *       Adds (or subtracts, for negative values) some number of years,\n     *       and generates a new Year object.\n     *\n     *       @param dy the number of years to add (subtract)\n     *       @see #diff\n     */\n    public Year add(int dy) {\n        // copy, and convert to zys\n        int r = y;\n        if (r < 0)\n            r++;\n        // add dy\n        r += dy;\n        // convert back, and return\n        if (r <= 0)\n            r--;\n        return new Year(r);\n    }\n\n    /**\n     *       Calculate the number of years difference between two years.\n     *       That is, there are this many years difference between\n     *       <code>this</code> and <code>y2</code>; if they are equal, this\n     *       number is zero.\n     *\n     *       @param y2 the year to subtract\n     *       @return the number of years difference between\n     *       <code>this</code> and <code>y2</code>\n     *       @see #add\n     */\n    public int diff(Year y2) {\n        // copy, and convert to zys\n        int i1 = y;\n        if (i1 < 0)\n            i1++;\n        int i2 = y2.y;\n        if (i2 < 0)\n            i2++;\n        // subtract, and return\n        return i1 - i2;\n    }\n\n    /**\n     *       Computes <code>this</code> modulo <code>m</code>.  Always\n     *       gives a positive result, even for negative numbers, so it is\n     *       suitable for computing a grid position for a span of years.\n     *\n     *       @param m base for modulo\n     *       @return the year modulo <code>m</code>\n     */\n    public int mod(int m) {\n        int r = y % m;\n        if (r < 0)\n            r += m;\n        return r;\n    }\n\n    /**\n     *       Determines what row this year would be, if years were in a\n     *       grid 10 wide, with the left column years ending in zero.  Row\n     *       0 is years 1 through 9.\n     *\n     *       @return this year's row\n     *       @see #column\n     */\n    public int row() {\n        int z = y / 10;\n        if (y < 0 && y % 10 != 0)\n            z--;\n        return z;\n    }\n\n    /**\n     *        Determines what column this year would be, if years were in a\n     *        grid 10 wide, with the left column years ending in zero.\n     *\n     *        Works for BC years, also:\n     *        <table border=\"1\" cellspacing=\"0\">\n     * \t   <tr><th>column()</th><td>0</td><td>1</td><td>2</td><td>3</td><td>4</td>\n     * \t        <td>5</td><td>6</td><td>7</td><td>8</td><td>9</td></tr>\n     * \t   <tr><th rowspan=\"3\">Year</th><td>-10</td><td>-9</td><td>-8</td><td>-7</td><td>-6</td>\n     * \t        <td>-5</td><td>-4</td><td>-3</td><td>-2</td><td>-1</td></tr>\n     * \t   <tr><td> </td><td>1</td><td>2</td><td>3</td><td>4</td>\n     * \t        <td>5</td><td>6</td><td>7</td><td>8</td><td>9</td></tr>\n     * \t   <tr><td>10</td><td>11</td><td>12</td><td>13</td><td>14</td>\n     * \t        <td>15</td><td>16</td><td>17</td><td>18</td><td>19</td></tr>\n     *        </table>\n     *\n     *        @return this year's column\n     *        @see #row\n     */\n    public int column() {\n        return mod(10);\n    }\n\n    /**\n     *       Compares this and <code>o</code>.\n     *\n     *       @see java.lang.Comparable\n     *       @param o Object to compare\n     *       @return >0, =0, or <0 if this is greater-than, equal-to, or less-than o\n     *       @throws ClassCastException if o is not a Year\n     */\n    public int compareTo(Object o) {\n        return this.y - ((Year) o).y;\n    }\n\n    /**\n     *       Returns <code>true</code> if and only if <code>this</code> is\n     *       equal to <code>y2</code>.\n     *\n     *       @param y2 the year to compare <code>this</code> to\n     *       @return <code>true</code> if <code>this</code> is equal to\n     *       <code>y2</code>, else <code>false</code>\n     */\n    public boolean equals(Object y2) {\n        return (y == ((Year) y2).y);\n    }\n\n    // since i define equals(), i need to define hashCode()\n    public int hashCode() {\n        // returning something based on y is logical, but returning y\n        // itself might make people mistakenly think this is like\n        // intValue(), so let's do something weird to it first.\n        return y * y * y;\n    }\n\n    // THESE TWO METHODS ARE BUGGY AND NEED WORK!\n    public Year cropToCentury() {\n        // is this correct?\n        return add(-mod(100));\n    }\n\n    public Year nextCentury() {\n        // COMPLETELY INCORRECT!\n        Year tmp = add(100);\n        if (tmp.y == 101)\n            return new Year(100);\n        return tmp;\n    }\n}\n",
		"id": "/EvoSuiteBenchmark/35_corina/src/main/java/corina/Year_6Test.java",
		"test_prompt": "// Year_6Test.java\n// This file is part of Corina.\n//\n// Corina is free software; you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation; either version 2 of the License, or\n// (at your option) any later version.\n//\n// Corina is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Corina; if not, write to the Free Software\n// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n//\n// Copyright 2001 Ken Harris <kbh7@cornell.edu>\n//\npackage corina;\n\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link Year}.\n* It contains ten unit test cases for the {@link Year#mod(int)} method.\n*/\nclass Year_6Test {"
	},
	{
		"original_code": "// Year.java\n//\n// This file is part of Corina.\n//\n// Corina is free software; you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation; either version 2 of the License, or\n// (at your option) any later version.\n//\n// Corina is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Corina; if not, write to the Free Software\n// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n//\n// Copyright 2001 Ken Harris <kbh7@cornell.edu>\n//\npackage corina;\n\n/**\n *   <p>A calendar year.  It normally acts similar to an integer, but\n *   skips the mythical \"year 0\".</p>\n *\n *   <p>In <code>Year</code> math:</p>\n *\n *   <ul>\n *     <li>-1 + 1 = 1</li>\n *     <li>2 - 4 = -3</li>\n *   </ul>\n *\n *   <p>Years, like Numbers and Strings, are immutable, so they are not\n *   Cloneable (there's no reason for them to be).</p>\n *\n *   @author Ken Harris &lt;kbh7 <i style=\"color: gray\">at</i> cornell <i style=\"color: gray\">dot</i> edu&gt;\n *   @version $Id: Year.java,v 1.4 2004/01/18 17:53:47 aaron Exp $\n */\npublic final class Year implements Comparable {\n\n    /**\n     * The default year: 1001.\n     */\n    public static final Year DEFAULT = new Year(1001);\n\n    /**\n     * Holds the year value as an <code>int</code>.\n     */\n    private final int y;\n\n    /**\n     *       Default constructor.  Uses <code>DEFAULT</code> as the year.\n     *\n     *       @see #DEFAULT\n     */\n    public Year() {\n        y = DEFAULT.y;\n    }\n\n    /**\n     *       Constructor for <code>int</code>s.  Uses <code>DEFAULT</code>\n     *       as the year if an invalid value is passed.\n     *\n     *       @param x the year value, as an int\n     *       @see #DEFAULT\n     */\n    public Year(int x) {\n        y = (x == 0 ? DEFAULT.y : x);\n    }\n\n    /**\n     *       Constructor from (row,col) pair.  Assumes 10-year rows.  The\n     *       column should always be between 0 and 9, inclusive.\n     *\n     *       @param row the row; row 0 is the decade ending in year 9\n     *       @param col the column; in row 0, year is the column\n     */\n    public Year(int row, int col) {\n        int yy = 10 * row + col;\n        if (yy == 0)\n            // should this be 1?\n            yy = DEFAULT.y;\n        y = yy;\n    }\n\n    /**\n     *       Constructor from String.  No AD/BC; reads it like C's\n     *       <code>scanf(\" %d \", &y)</code> would.\n     *\n     *       @exception NumberFormatException if the String cannot be\n     *       parsed, or is equal to zero\n     *       @see java.lang.String\n     */\n    public Year(String s) throws NumberFormatException {\n        y = Integer.parseInt(s.trim());\n        if (y == 0)\n            throw new NumberFormatException();\n    }\n\n    /**\n     *       Constructor from String.  No AD/BC; reads it like C's\n     *       <code>scanf(\" %d \", &y)</code> would.  This constructor is for\n     *       zero-year-systems, if <code>zys</code> is true, i.e., -5 means\n     *       6 BC.\n     *\n     *       @exception NumberFormatException if the String cannot be parsed\n     *       @see java.lang.String\n     */\n    public Year(String s, boolean zys) throws NumberFormatException {\n        int yy = Integer.parseInt(s.trim());\n        // back up a year, if this system assumed a zero-year\n        if (zys && yy <= 0)\n            yy--;\n        y = yy;\n    }\n\n    /**\n     *       Convert to a String.  No \"AD\"/\"BC\"; simply the integer value.\n     *\n     *       @return this year as a String\n     *       @see java.lang.String\n     */\n    public String toString() {\n        return String.valueOf(y);\n    }\n\n    /**\n     *       This method always throws UnsupportedOperationException.  It's\n     *       not implemented, and don't even think about implementing it\n     *       yourself!  It encourages being lazy and bypassing Year's\n     *       methods to just deal with ints.  And that defeats the whole\n     *       purpose of having Years.  So I'll just disallow it.  You don't\n     *       need it anyway.  If you really need the int for some reason I\n     *       can't imagine, you can always do\n     *       <code>Integer.parseInt(y.toString())</code>.  That way you know\n     *       you're doing it to get the int, and not for imagined\n     *       performance or convenience reasons.\n     *\n     *       @return never returns\n     *       @exception UnsupportedOperationException always!\n     */\n    public int intValue() {\n        // i pity th' fool who tries to use intvalue!\n        throw new UnsupportedOperationException();\n    }\n\n    /**\n     *       Return true, iff this is year 1.  (This actually comes up\n     *       fairly often.)\n     *\n     *       @return true iff this is year 1\n     */\n    public boolean isYearOne() {\n        return (y == 1);\n    }\n\n    /**\n     *       The maximum (later) of two years.\n     *\n     *       @return the later of two years\n     */\n    public static Year max(Year y1, Year y2) {\n        return (y1.y > y2.y ? y1 : y2);\n    }\n\n    /**\n     *       The minimum (earlier) of two years.\n     *\n     *       @return the earlier of two years\n     */\n    public static Year min(Year y1, Year y2) {\n        return (y1.y < y2.y ? y1 : y2);\n    }\n\n    /**\n     *       Adds (or subtracts, for negative values) some number of years,\n     *       and generates a new Year object.\n     *\n     *       @param dy the number of years to add (subtract)\n     *       @see #diff\n     */\n    public Year add(int dy) {\n        // copy, and convert to zys\n        int r = y;\n        if (r < 0)\n            r++;\n        // add dy\n        r += dy;\n        // convert back, and return\n        if (r <= 0)\n            r--;\n        return new Year(r);\n    }\n\n    /**\n     *       Calculate the number of years difference between two years.\n     *       That is, there are this many years difference between\n     *       <code>this</code> and <code>y2</code>; if they are equal, this\n     *       number is zero.\n     *\n     *       @param y2 the year to subtract\n     *       @return the number of years difference between\n     *       <code>this</code> and <code>y2</code>\n     *       @see #add\n     */\n    public int diff(Year y2) {\n        // copy, and convert to zys\n        int i1 = y;\n        if (i1 < 0)\n            i1++;\n        int i2 = y2.y;\n        if (i2 < 0)\n            i2++;\n        // subtract, and return\n        return i1 - i2;\n    }\n\n    /**\n     *       Computes <code>this</code> modulo <code>m</code>.  Always\n     *       gives a positive result, even for negative numbers, so it is\n     *       suitable for computing a grid position for a span of years.\n     *\n     *       @param m base for modulo\n     *       @return the year modulo <code>m</code>\n     */\n    public int mod(int m) {\n        int r = y % m;\n        if (r < 0)\n            r += m;\n        return r;\n    }\n\n    /**\n     *       Determines what row this year would be, if years were in a\n     *       grid 10 wide, with the left column years ending in zero.  Row\n     *       0 is years 1 through 9.\n     *\n     *       @return this year's row\n     *       @see #column\n     */\n    public int row() {\n        int z = y / 10;\n        if (y < 0 && y % 10 != 0)\n            z--;\n        return z;\n    }\n\n    /**\n     *        Determines what column this year would be, if years were in a\n     *        grid 10 wide, with the left column years ending in zero.\n     *\n     *        Works for BC years, also:\n     *        <table border=\"1\" cellspacing=\"0\">\n     * \t   <tr><th>column()</th><td>0</td><td>1</td><td>2</td><td>3</td><td>4</td>\n     * \t        <td>5</td><td>6</td><td>7</td><td>8</td><td>9</td></tr>\n     * \t   <tr><th rowspan=\"3\">Year</th><td>-10</td><td>-9</td><td>-8</td><td>-7</td><td>-6</td>\n     * \t        <td>-5</td><td>-4</td><td>-3</td><td>-2</td><td>-1</td></tr>\n     * \t   <tr><td> </td><td>1</td><td>2</td><td>3</td><td>4</td>\n     * \t        <td>5</td><td>6</td><td>7</td><td>8</td><td>9</td></tr>\n     * \t   <tr><td>10</td><td>11</td><td>12</td><td>13</td><td>14</td>\n     * \t        <td>15</td><td>16</td><td>17</td><td>18</td><td>19</td></tr>\n     *        </table>\n     *\n     *        @return this year's column\n     *        @see #row\n     */\n    public int column() {\n        return mod(10);\n    }\n\n    /**\n     *       Compares this and <code>o</code>.\n     *\n     *       @see java.lang.Comparable\n     *       @param o Object to compare\n     *       @return >0, =0, or <0 if this is greater-than, equal-to, or less-than o\n     *       @throws ClassCastException if o is not a Year\n     */\n    public int compareTo(Object o) {\n        return this.y - ((Year) o).y;\n    }\n\n    /**\n     *       Returns <code>true</code> if and only if <code>this</code> is\n     *       equal to <code>y2</code>.\n     *\n     *       @param y2 the year to compare <code>this</code> to\n     *       @return <code>true</code> if <code>this</code> is equal to\n     *       <code>y2</code>, else <code>false</code>\n     */\n    public boolean equals(Object y2) {\n        return (y == ((Year) y2).y);\n    }\n\n    // since i define equals(), i need to define hashCode()\n    public int hashCode() {\n        // returning something based on y is logical, but returning y\n        // itself might make people mistakenly think this is like\n        // intValue(), so let's do something weird to it first.\n        return y * y * y;\n    }\n\n    // THESE TWO METHODS ARE BUGGY AND NEED WORK!\n    public Year cropToCentury() {\n        // is this correct?\n        return add(-mod(100));\n    }\n\n    public Year nextCentury() {\n        // COMPLETELY INCORRECT!\n        Year tmp = add(100);\n        if (tmp.y == 101)\n            return new Year(100);\n        return tmp;\n    }\n}\n",
		"id": "/EvoSuiteBenchmark/35_corina/src/main/java/corina/Year_7Test.java",
		"test_prompt": "// Year_7Test.java\n// This file is part of Corina.\n//\n// Corina is free software; you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation; either version 2 of the License, or\n// (at your option) any later version.\n//\n// Corina is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Corina; if not, write to the Free Software\n// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n//\n// Copyright 2001 Ken Harris <kbh7@cornell.edu>\n//\npackage corina;\n\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link Year}.\n* It contains ten unit test cases for the {@link Year#row()} method.\n*/\nclass Year_7Test {"
	},
	{
		"original_code": "// Year.java\n//\n// This file is part of Corina.\n//\n// Corina is free software; you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation; either version 2 of the License, or\n// (at your option) any later version.\n//\n// Corina is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Corina; if not, write to the Free Software\n// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n//\n// Copyright 2001 Ken Harris <kbh7@cornell.edu>\n//\npackage corina;\n\n/**\n *   <p>A calendar year.  It normally acts similar to an integer, but\n *   skips the mythical \"year 0\".</p>\n *\n *   <p>In <code>Year</code> math:</p>\n *\n *   <ul>\n *     <li>-1 + 1 = 1</li>\n *     <li>2 - 4 = -3</li>\n *   </ul>\n *\n *   <p>Years, like Numbers and Strings, are immutable, so they are not\n *   Cloneable (there's no reason for them to be).</p>\n *\n *   @author Ken Harris &lt;kbh7 <i style=\"color: gray\">at</i> cornell <i style=\"color: gray\">dot</i> edu&gt;\n *   @version $Id: Year.java,v 1.4 2004/01/18 17:53:47 aaron Exp $\n */\npublic final class Year implements Comparable {\n\n    /**\n     * The default year: 1001.\n     */\n    public static final Year DEFAULT = new Year(1001);\n\n    /**\n     * Holds the year value as an <code>int</code>.\n     */\n    private final int y;\n\n    /**\n     *       Default constructor.  Uses <code>DEFAULT</code> as the year.\n     *\n     *       @see #DEFAULT\n     */\n    public Year() {\n        y = DEFAULT.y;\n    }\n\n    /**\n     *       Constructor for <code>int</code>s.  Uses <code>DEFAULT</code>\n     *       as the year if an invalid value is passed.\n     *\n     *       @param x the year value, as an int\n     *       @see #DEFAULT\n     */\n    public Year(int x) {\n        y = (x == 0 ? DEFAULT.y : x);\n    }\n\n    /**\n     *       Constructor from (row,col) pair.  Assumes 10-year rows.  The\n     *       column should always be between 0 and 9, inclusive.\n     *\n     *       @param row the row; row 0 is the decade ending in year 9\n     *       @param col the column; in row 0, year is the column\n     */\n    public Year(int row, int col) {\n        int yy = 10 * row + col;\n        if (yy == 0)\n            // should this be 1?\n            yy = DEFAULT.y;\n        y = yy;\n    }\n\n    /**\n     *       Constructor from String.  No AD/BC; reads it like C's\n     *       <code>scanf(\" %d \", &y)</code> would.\n     *\n     *       @exception NumberFormatException if the String cannot be\n     *       parsed, or is equal to zero\n     *       @see java.lang.String\n     */\n    public Year(String s) throws NumberFormatException {\n        y = Integer.parseInt(s.trim());\n        if (y == 0)\n            throw new NumberFormatException();\n    }\n\n    /**\n     *       Constructor from String.  No AD/BC; reads it like C's\n     *       <code>scanf(\" %d \", &y)</code> would.  This constructor is for\n     *       zero-year-systems, if <code>zys</code> is true, i.e., -5 means\n     *       6 BC.\n     *\n     *       @exception NumberFormatException if the String cannot be parsed\n     *       @see java.lang.String\n     */\n    public Year(String s, boolean zys) throws NumberFormatException {\n        int yy = Integer.parseInt(s.trim());\n        // back up a year, if this system assumed a zero-year\n        if (zys && yy <= 0)\n            yy--;\n        y = yy;\n    }\n\n    /**\n     *       Convert to a String.  No \"AD\"/\"BC\"; simply the integer value.\n     *\n     *       @return this year as a String\n     *       @see java.lang.String\n     */\n    public String toString() {\n        return String.valueOf(y);\n    }\n\n    /**\n     *       This method always throws UnsupportedOperationException.  It's\n     *       not implemented, and don't even think about implementing it\n     *       yourself!  It encourages being lazy and bypassing Year's\n     *       methods to just deal with ints.  And that defeats the whole\n     *       purpose of having Years.  So I'll just disallow it.  You don't\n     *       need it anyway.  If you really need the int for some reason I\n     *       can't imagine, you can always do\n     *       <code>Integer.parseInt(y.toString())</code>.  That way you know\n     *       you're doing it to get the int, and not for imagined\n     *       performance or convenience reasons.\n     *\n     *       @return never returns\n     *       @exception UnsupportedOperationException always!\n     */\n    public int intValue() {\n        // i pity th' fool who tries to use intvalue!\n        throw new UnsupportedOperationException();\n    }\n\n    /**\n     *       Return true, iff this is year 1.  (This actually comes up\n     *       fairly often.)\n     *\n     *       @return true iff this is year 1\n     */\n    public boolean isYearOne() {\n        return (y == 1);\n    }\n\n    /**\n     *       The maximum (later) of two years.\n     *\n     *       @return the later of two years\n     */\n    public static Year max(Year y1, Year y2) {\n        return (y1.y > y2.y ? y1 : y2);\n    }\n\n    /**\n     *       The minimum (earlier) of two years.\n     *\n     *       @return the earlier of two years\n     */\n    public static Year min(Year y1, Year y2) {\n        return (y1.y < y2.y ? y1 : y2);\n    }\n\n    /**\n     *       Adds (or subtracts, for negative values) some number of years,\n     *       and generates a new Year object.\n     *\n     *       @param dy the number of years to add (subtract)\n     *       @see #diff\n     */\n    public Year add(int dy) {\n        // copy, and convert to zys\n        int r = y;\n        if (r < 0)\n            r++;\n        // add dy\n        r += dy;\n        // convert back, and return\n        if (r <= 0)\n            r--;\n        return new Year(r);\n    }\n\n    /**\n     *       Calculate the number of years difference between two years.\n     *       That is, there are this many years difference between\n     *       <code>this</code> and <code>y2</code>; if they are equal, this\n     *       number is zero.\n     *\n     *       @param y2 the year to subtract\n     *       @return the number of years difference between\n     *       <code>this</code> and <code>y2</code>\n     *       @see #add\n     */\n    public int diff(Year y2) {\n        // copy, and convert to zys\n        int i1 = y;\n        if (i1 < 0)\n            i1++;\n        int i2 = y2.y;\n        if (i2 < 0)\n            i2++;\n        // subtract, and return\n        return i1 - i2;\n    }\n\n    /**\n     *       Computes <code>this</code> modulo <code>m</code>.  Always\n     *       gives a positive result, even for negative numbers, so it is\n     *       suitable for computing a grid position for a span of years.\n     *\n     *       @param m base for modulo\n     *       @return the year modulo <code>m</code>\n     */\n    public int mod(int m) {\n        int r = y % m;\n        if (r < 0)\n            r += m;\n        return r;\n    }\n\n    /**\n     *       Determines what row this year would be, if years were in a\n     *       grid 10 wide, with the left column years ending in zero.  Row\n     *       0 is years 1 through 9.\n     *\n     *       @return this year's row\n     *       @see #column\n     */\n    public int row() {\n        int z = y / 10;\n        if (y < 0 && y % 10 != 0)\n            z--;\n        return z;\n    }\n\n    /**\n     *        Determines what column this year would be, if years were in a\n     *        grid 10 wide, with the left column years ending in zero.\n     *\n     *        Works for BC years, also:\n     *        <table border=\"1\" cellspacing=\"0\">\n     * \t   <tr><th>column()</th><td>0</td><td>1</td><td>2</td><td>3</td><td>4</td>\n     * \t        <td>5</td><td>6</td><td>7</td><td>8</td><td>9</td></tr>\n     * \t   <tr><th rowspan=\"3\">Year</th><td>-10</td><td>-9</td><td>-8</td><td>-7</td><td>-6</td>\n     * \t        <td>-5</td><td>-4</td><td>-3</td><td>-2</td><td>-1</td></tr>\n     * \t   <tr><td> </td><td>1</td><td>2</td><td>3</td><td>4</td>\n     * \t        <td>5</td><td>6</td><td>7</td><td>8</td><td>9</td></tr>\n     * \t   <tr><td>10</td><td>11</td><td>12</td><td>13</td><td>14</td>\n     * \t        <td>15</td><td>16</td><td>17</td><td>18</td><td>19</td></tr>\n     *        </table>\n     *\n     *        @return this year's column\n     *        @see #row\n     */\n    public int column() {\n        return mod(10);\n    }\n\n    /**\n     *       Compares this and <code>o</code>.\n     *\n     *       @see java.lang.Comparable\n     *       @param o Object to compare\n     *       @return >0, =0, or <0 if this is greater-than, equal-to, or less-than o\n     *       @throws ClassCastException if o is not a Year\n     */\n    public int compareTo(Object o) {\n        return this.y - ((Year) o).y;\n    }\n\n    /**\n     *       Returns <code>true</code> if and only if <code>this</code> is\n     *       equal to <code>y2</code>.\n     *\n     *       @param y2 the year to compare <code>this</code> to\n     *       @return <code>true</code> if <code>this</code> is equal to\n     *       <code>y2</code>, else <code>false</code>\n     */\n    public boolean equals(Object y2) {\n        return (y == ((Year) y2).y);\n    }\n\n    // since i define equals(), i need to define hashCode()\n    public int hashCode() {\n        // returning something based on y is logical, but returning y\n        // itself might make people mistakenly think this is like\n        // intValue(), so let's do something weird to it first.\n        return y * y * y;\n    }\n\n    // THESE TWO METHODS ARE BUGGY AND NEED WORK!\n    public Year cropToCentury() {\n        // is this correct?\n        return add(-mod(100));\n    }\n\n    public Year nextCentury() {\n        // COMPLETELY INCORRECT!\n        Year tmp = add(100);\n        if (tmp.y == 101)\n            return new Year(100);\n        return tmp;\n    }\n}\n",
		"id": "/EvoSuiteBenchmark/35_corina/src/main/java/corina/Year_8Test.java",
		"test_prompt": "// Year_8Test.java\n// This file is part of Corina.\n//\n// Corina is free software; you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation; either version 2 of the License, or\n// (at your option) any later version.\n//\n// Corina is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Corina; if not, write to the Free Software\n// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n//\n// Copyright 2001 Ken Harris <kbh7@cornell.edu>\n//\npackage corina;\n\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link Year}.\n* It contains ten unit test cases for the {@link Year#column()} method.\n*/\nclass Year_8Test {"
	},
	{
		"original_code": "// Year.java\n//\n// This file is part of Corina.\n//\n// Corina is free software; you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation; either version 2 of the License, or\n// (at your option) any later version.\n//\n// Corina is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Corina; if not, write to the Free Software\n// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n//\n// Copyright 2001 Ken Harris <kbh7@cornell.edu>\n//\npackage corina;\n\n/**\n *   <p>A calendar year.  It normally acts similar to an integer, but\n *   skips the mythical \"year 0\".</p>\n *\n *   <p>In <code>Year</code> math:</p>\n *\n *   <ul>\n *     <li>-1 + 1 = 1</li>\n *     <li>2 - 4 = -3</li>\n *   </ul>\n *\n *   <p>Years, like Numbers and Strings, are immutable, so they are not\n *   Cloneable (there's no reason for them to be).</p>\n *\n *   @author Ken Harris &lt;kbh7 <i style=\"color: gray\">at</i> cornell <i style=\"color: gray\">dot</i> edu&gt;\n *   @version $Id: Year.java,v 1.4 2004/01/18 17:53:47 aaron Exp $\n */\npublic final class Year implements Comparable {\n\n    /**\n     * The default year: 1001.\n     */\n    public static final Year DEFAULT = new Year(1001);\n\n    /**\n     * Holds the year value as an <code>int</code>.\n     */\n    private final int y;\n\n    /**\n     *       Default constructor.  Uses <code>DEFAULT</code> as the year.\n     *\n     *       @see #DEFAULT\n     */\n    public Year() {\n        y = DEFAULT.y;\n    }\n\n    /**\n     *       Constructor for <code>int</code>s.  Uses <code>DEFAULT</code>\n     *       as the year if an invalid value is passed.\n     *\n     *       @param x the year value, as an int\n     *       @see #DEFAULT\n     */\n    public Year(int x) {\n        y = (x == 0 ? DEFAULT.y : x);\n    }\n\n    /**\n     *       Constructor from (row,col) pair.  Assumes 10-year rows.  The\n     *       column should always be between 0 and 9, inclusive.\n     *\n     *       @param row the row; row 0 is the decade ending in year 9\n     *       @param col the column; in row 0, year is the column\n     */\n    public Year(int row, int col) {\n        int yy = 10 * row + col;\n        if (yy == 0)\n            // should this be 1?\n            yy = DEFAULT.y;\n        y = yy;\n    }\n\n    /**\n     *       Constructor from String.  No AD/BC; reads it like C's\n     *       <code>scanf(\" %d \", &y)</code> would.\n     *\n     *       @exception NumberFormatException if the String cannot be\n     *       parsed, or is equal to zero\n     *       @see java.lang.String\n     */\n    public Year(String s) throws NumberFormatException {\n        y = Integer.parseInt(s.trim());\n        if (y == 0)\n            throw new NumberFormatException();\n    }\n\n    /**\n     *       Constructor from String.  No AD/BC; reads it like C's\n     *       <code>scanf(\" %d \", &y)</code> would.  This constructor is for\n     *       zero-year-systems, if <code>zys</code> is true, i.e., -5 means\n     *       6 BC.\n     *\n     *       @exception NumberFormatException if the String cannot be parsed\n     *       @see java.lang.String\n     */\n    public Year(String s, boolean zys) throws NumberFormatException {\n        int yy = Integer.parseInt(s.trim());\n        // back up a year, if this system assumed a zero-year\n        if (zys && yy <= 0)\n            yy--;\n        y = yy;\n    }\n\n    /**\n     *       Convert to a String.  No \"AD\"/\"BC\"; simply the integer value.\n     *\n     *       @return this year as a String\n     *       @see java.lang.String\n     */\n    public String toString() {\n        return String.valueOf(y);\n    }\n\n    /**\n     *       This method always throws UnsupportedOperationException.  It's\n     *       not implemented, and don't even think about implementing it\n     *       yourself!  It encourages being lazy and bypassing Year's\n     *       methods to just deal with ints.  And that defeats the whole\n     *       purpose of having Years.  So I'll just disallow it.  You don't\n     *       need it anyway.  If you really need the int for some reason I\n     *       can't imagine, you can always do\n     *       <code>Integer.parseInt(y.toString())</code>.  That way you know\n     *       you're doing it to get the int, and not for imagined\n     *       performance or convenience reasons.\n     *\n     *       @return never returns\n     *       @exception UnsupportedOperationException always!\n     */\n    public int intValue() {\n        // i pity th' fool who tries to use intvalue!\n        throw new UnsupportedOperationException();\n    }\n\n    /**\n     *       Return true, iff this is year 1.  (This actually comes up\n     *       fairly often.)\n     *\n     *       @return true iff this is year 1\n     */\n    public boolean isYearOne() {\n        return (y == 1);\n    }\n\n    /**\n     *       The maximum (later) of two years.\n     *\n     *       @return the later of two years\n     */\n    public static Year max(Year y1, Year y2) {\n        return (y1.y > y2.y ? y1 : y2);\n    }\n\n    /**\n     *       The minimum (earlier) of two years.\n     *\n     *       @return the earlier of two years\n     */\n    public static Year min(Year y1, Year y2) {\n        return (y1.y < y2.y ? y1 : y2);\n    }\n\n    /**\n     *       Adds (or subtracts, for negative values) some number of years,\n     *       and generates a new Year object.\n     *\n     *       @param dy the number of years to add (subtract)\n     *       @see #diff\n     */\n    public Year add(int dy) {\n        // copy, and convert to zys\n        int r = y;\n        if (r < 0)\n            r++;\n        // add dy\n        r += dy;\n        // convert back, and return\n        if (r <= 0)\n            r--;\n        return new Year(r);\n    }\n\n    /**\n     *       Calculate the number of years difference between two years.\n     *       That is, there are this many years difference between\n     *       <code>this</code> and <code>y2</code>; if they are equal, this\n     *       number is zero.\n     *\n     *       @param y2 the year to subtract\n     *       @return the number of years difference between\n     *       <code>this</code> and <code>y2</code>\n     *       @see #add\n     */\n    public int diff(Year y2) {\n        // copy, and convert to zys\n        int i1 = y;\n        if (i1 < 0)\n            i1++;\n        int i2 = y2.y;\n        if (i2 < 0)\n            i2++;\n        // subtract, and return\n        return i1 - i2;\n    }\n\n    /**\n     *       Computes <code>this</code> modulo <code>m</code>.  Always\n     *       gives a positive result, even for negative numbers, so it is\n     *       suitable for computing a grid position for a span of years.\n     *\n     *       @param m base for modulo\n     *       @return the year modulo <code>m</code>\n     */\n    public int mod(int m) {\n        int r = y % m;\n        if (r < 0)\n            r += m;\n        return r;\n    }\n\n    /**\n     *       Determines what row this year would be, if years were in a\n     *       grid 10 wide, with the left column years ending in zero.  Row\n     *       0 is years 1 through 9.\n     *\n     *       @return this year's row\n     *       @see #column\n     */\n    public int row() {\n        int z = y / 10;\n        if (y < 0 && y % 10 != 0)\n            z--;\n        return z;\n    }\n\n    /**\n     *        Determines what column this year would be, if years were in a\n     *        grid 10 wide, with the left column years ending in zero.\n     *\n     *        Works for BC years, also:\n     *        <table border=\"1\" cellspacing=\"0\">\n     * \t   <tr><th>column()</th><td>0</td><td>1</td><td>2</td><td>3</td><td>4</td>\n     * \t        <td>5</td><td>6</td><td>7</td><td>8</td><td>9</td></tr>\n     * \t   <tr><th rowspan=\"3\">Year</th><td>-10</td><td>-9</td><td>-8</td><td>-7</td><td>-6</td>\n     * \t        <td>-5</td><td>-4</td><td>-3</td><td>-2</td><td>-1</td></tr>\n     * \t   <tr><td> </td><td>1</td><td>2</td><td>3</td><td>4</td>\n     * \t        <td>5</td><td>6</td><td>7</td><td>8</td><td>9</td></tr>\n     * \t   <tr><td>10</td><td>11</td><td>12</td><td>13</td><td>14</td>\n     * \t        <td>15</td><td>16</td><td>17</td><td>18</td><td>19</td></tr>\n     *        </table>\n     *\n     *        @return this year's column\n     *        @see #row\n     */\n    public int column() {\n        return mod(10);\n    }\n\n    /**\n     *       Compares this and <code>o</code>.\n     *\n     *       @see java.lang.Comparable\n     *       @param o Object to compare\n     *       @return >0, =0, or <0 if this is greater-than, equal-to, or less-than o\n     *       @throws ClassCastException if o is not a Year\n     */\n    public int compareTo(Object o) {\n        return this.y - ((Year) o).y;\n    }\n\n    /**\n     *       Returns <code>true</code> if and only if <code>this</code> is\n     *       equal to <code>y2</code>.\n     *\n     *       @param y2 the year to compare <code>this</code> to\n     *       @return <code>true</code> if <code>this</code> is equal to\n     *       <code>y2</code>, else <code>false</code>\n     */\n    public boolean equals(Object y2) {\n        return (y == ((Year) y2).y);\n    }\n\n    // since i define equals(), i need to define hashCode()\n    public int hashCode() {\n        // returning something based on y is logical, but returning y\n        // itself might make people mistakenly think this is like\n        // intValue(), so let's do something weird to it first.\n        return y * y * y;\n    }\n\n    // THESE TWO METHODS ARE BUGGY AND NEED WORK!\n    public Year cropToCentury() {\n        // is this correct?\n        return add(-mod(100));\n    }\n\n    public Year nextCentury() {\n        // COMPLETELY INCORRECT!\n        Year tmp = add(100);\n        if (tmp.y == 101)\n            return new Year(100);\n        return tmp;\n    }\n}\n",
		"id": "/EvoSuiteBenchmark/35_corina/src/main/java/corina/Year_9Test.java",
		"test_prompt": "// Year_9Test.java\n// This file is part of Corina.\n//\n// Corina is free software; you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation; either version 2 of the License, or\n// (at your option) any later version.\n//\n// Corina is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Corina; if not, write to the Free Software\n// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n//\n// Copyright 2001 Ken Harris <kbh7@cornell.edu>\n//\npackage corina;\n\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link Year}.\n* It contains ten unit test cases for the {@link Year#compareTo(Object)} method.\n*/\nclass Year_9Test {"
	},
	{
		"original_code": "// Year.java\n//\n// This file is part of Corina.\n//\n// Corina is free software; you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation; either version 2 of the License, or\n// (at your option) any later version.\n//\n// Corina is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Corina; if not, write to the Free Software\n// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n//\n// Copyright 2001 Ken Harris <kbh7@cornell.edu>\n//\npackage corina;\n\n/**\n *   <p>A calendar year.  It normally acts similar to an integer, but\n *   skips the mythical \"year 0\".</p>\n *\n *   <p>In <code>Year</code> math:</p>\n *\n *   <ul>\n *     <li>-1 + 1 = 1</li>\n *     <li>2 - 4 = -3</li>\n *   </ul>\n *\n *   <p>Years, like Numbers and Strings, are immutable, so they are not\n *   Cloneable (there's no reason for them to be).</p>\n *\n *   @author Ken Harris &lt;kbh7 <i style=\"color: gray\">at</i> cornell <i style=\"color: gray\">dot</i> edu&gt;\n *   @version $Id: Year.java,v 1.4 2004/01/18 17:53:47 aaron Exp $\n */\npublic final class Year implements Comparable {\n\n    /**\n     * The default year: 1001.\n     */\n    public static final Year DEFAULT = new Year(1001);\n\n    /**\n     * Holds the year value as an <code>int</code>.\n     */\n    private final int y;\n\n    /**\n     *       Default constructor.  Uses <code>DEFAULT</code> as the year.\n     *\n     *       @see #DEFAULT\n     */\n    public Year() {\n        y = DEFAULT.y;\n    }\n\n    /**\n     *       Constructor for <code>int</code>s.  Uses <code>DEFAULT</code>\n     *       as the year if an invalid value is passed.\n     *\n     *       @param x the year value, as an int\n     *       @see #DEFAULT\n     */\n    public Year(int x) {\n        y = (x == 0 ? DEFAULT.y : x);\n    }\n\n    /**\n     *       Constructor from (row,col) pair.  Assumes 10-year rows.  The\n     *       column should always be between 0 and 9, inclusive.\n     *\n     *       @param row the row; row 0 is the decade ending in year 9\n     *       @param col the column; in row 0, year is the column\n     */\n    public Year(int row, int col) {\n        int yy = 10 * row + col;\n        if (yy == 0)\n            // should this be 1?\n            yy = DEFAULT.y;\n        y = yy;\n    }\n\n    /**\n     *       Constructor from String.  No AD/BC; reads it like C's\n     *       <code>scanf(\" %d \", &y)</code> would.\n     *\n     *       @exception NumberFormatException if the String cannot be\n     *       parsed, or is equal to zero\n     *       @see java.lang.String\n     */\n    public Year(String s) throws NumberFormatException {\n        y = Integer.parseInt(s.trim());\n        if (y == 0)\n            throw new NumberFormatException();\n    }\n\n    /**\n     *       Constructor from String.  No AD/BC; reads it like C's\n     *       <code>scanf(\" %d \", &y)</code> would.  This constructor is for\n     *       zero-year-systems, if <code>zys</code> is true, i.e., -5 means\n     *       6 BC.\n     *\n     *       @exception NumberFormatException if the String cannot be parsed\n     *       @see java.lang.String\n     */\n    public Year(String s, boolean zys) throws NumberFormatException {\n        int yy = Integer.parseInt(s.trim());\n        // back up a year, if this system assumed a zero-year\n        if (zys && yy <= 0)\n            yy--;\n        y = yy;\n    }\n\n    /**\n     *       Convert to a String.  No \"AD\"/\"BC\"; simply the integer value.\n     *\n     *       @return this year as a String\n     *       @see java.lang.String\n     */\n    public String toString() {\n        return String.valueOf(y);\n    }\n\n    /**\n     *       This method always throws UnsupportedOperationException.  It's\n     *       not implemented, and don't even think about implementing it\n     *       yourself!  It encourages being lazy and bypassing Year's\n     *       methods to just deal with ints.  And that defeats the whole\n     *       purpose of having Years.  So I'll just disallow it.  You don't\n     *       need it anyway.  If you really need the int for some reason I\n     *       can't imagine, you can always do\n     *       <code>Integer.parseInt(y.toString())</code>.  That way you know\n     *       you're doing it to get the int, and not for imagined\n     *       performance or convenience reasons.\n     *\n     *       @return never returns\n     *       @exception UnsupportedOperationException always!\n     */\n    public int intValue() {\n        // i pity th' fool who tries to use intvalue!\n        throw new UnsupportedOperationException();\n    }\n\n    /**\n     *       Return true, iff this is year 1.  (This actually comes up\n     *       fairly often.)\n     *\n     *       @return true iff this is year 1\n     */\n    public boolean isYearOne() {\n        return (y == 1);\n    }\n\n    /**\n     *       The maximum (later) of two years.\n     *\n     *       @return the later of two years\n     */\n    public static Year max(Year y1, Year y2) {\n        return (y1.y > y2.y ? y1 : y2);\n    }\n\n    /**\n     *       The minimum (earlier) of two years.\n     *\n     *       @return the earlier of two years\n     */\n    public static Year min(Year y1, Year y2) {\n        return (y1.y < y2.y ? y1 : y2);\n    }\n\n    /**\n     *       Adds (or subtracts, for negative values) some number of years,\n     *       and generates a new Year object.\n     *\n     *       @param dy the number of years to add (subtract)\n     *       @see #diff\n     */\n    public Year add(int dy) {\n        // copy, and convert to zys\n        int r = y;\n        if (r < 0)\n            r++;\n        // add dy\n        r += dy;\n        // convert back, and return\n        if (r <= 0)\n            r--;\n        return new Year(r);\n    }\n\n    /**\n     *       Calculate the number of years difference between two years.\n     *       That is, there are this many years difference between\n     *       <code>this</code> and <code>y2</code>; if they are equal, this\n     *       number is zero.\n     *\n     *       @param y2 the year to subtract\n     *       @return the number of years difference between\n     *       <code>this</code> and <code>y2</code>\n     *       @see #add\n     */\n    public int diff(Year y2) {\n        // copy, and convert to zys\n        int i1 = y;\n        if (i1 < 0)\n            i1++;\n        int i2 = y2.y;\n        if (i2 < 0)\n            i2++;\n        // subtract, and return\n        return i1 - i2;\n    }\n\n    /**\n     *       Computes <code>this</code> modulo <code>m</code>.  Always\n     *       gives a positive result, even for negative numbers, so it is\n     *       suitable for computing a grid position for a span of years.\n     *\n     *       @param m base for modulo\n     *       @return the year modulo <code>m</code>\n     */\n    public int mod(int m) {\n        int r = y % m;\n        if (r < 0)\n            r += m;\n        return r;\n    }\n\n    /**\n     *       Determines what row this year would be, if years were in a\n     *       grid 10 wide, with the left column years ending in zero.  Row\n     *       0 is years 1 through 9.\n     *\n     *       @return this year's row\n     *       @see #column\n     */\n    public int row() {\n        int z = y / 10;\n        if (y < 0 && y % 10 != 0)\n            z--;\n        return z;\n    }\n\n    /**\n     *        Determines what column this year would be, if years were in a\n     *        grid 10 wide, with the left column years ending in zero.\n     *\n     *        Works for BC years, also:\n     *        <table border=\"1\" cellspacing=\"0\">\n     * \t   <tr><th>column()</th><td>0</td><td>1</td><td>2</td><td>3</td><td>4</td>\n     * \t        <td>5</td><td>6</td><td>7</td><td>8</td><td>9</td></tr>\n     * \t   <tr><th rowspan=\"3\">Year</th><td>-10</td><td>-9</td><td>-8</td><td>-7</td><td>-6</td>\n     * \t        <td>-5</td><td>-4</td><td>-3</td><td>-2</td><td>-1</td></tr>\n     * \t   <tr><td> </td><td>1</td><td>2</td><td>3</td><td>4</td>\n     * \t        <td>5</td><td>6</td><td>7</td><td>8</td><td>9</td></tr>\n     * \t   <tr><td>10</td><td>11</td><td>12</td><td>13</td><td>14</td>\n     * \t        <td>15</td><td>16</td><td>17</td><td>18</td><td>19</td></tr>\n     *        </table>\n     *\n     *        @return this year's column\n     *        @see #row\n     */\n    public int column() {\n        return mod(10);\n    }\n\n    /**\n     *       Compares this and <code>o</code>.\n     *\n     *       @see java.lang.Comparable\n     *       @param o Object to compare\n     *       @return >0, =0, or <0 if this is greater-than, equal-to, or less-than o\n     *       @throws ClassCastException if o is not a Year\n     */\n    public int compareTo(Object o) {\n        return this.y - ((Year) o).y;\n    }\n\n    /**\n     *       Returns <code>true</code> if and only if <code>this</code> is\n     *       equal to <code>y2</code>.\n     *\n     *       @param y2 the year to compare <code>this</code> to\n     *       @return <code>true</code> if <code>this</code> is equal to\n     *       <code>y2</code>, else <code>false</code>\n     */\n    public boolean equals(Object y2) {\n        return (y == ((Year) y2).y);\n    }\n\n    // since i define equals(), i need to define hashCode()\n    public int hashCode() {\n        // returning something based on y is logical, but returning y\n        // itself might make people mistakenly think this is like\n        // intValue(), so let's do something weird to it first.\n        return y * y * y;\n    }\n\n    // THESE TWO METHODS ARE BUGGY AND NEED WORK!\n    public Year cropToCentury() {\n        // is this correct?\n        return add(-mod(100));\n    }\n\n    public Year nextCentury() {\n        // COMPLETELY INCORRECT!\n        Year tmp = add(100);\n        if (tmp.y == 101)\n            return new Year(100);\n        return tmp;\n    }\n}\n",
		"id": "/EvoSuiteBenchmark/35_corina/src/main/java/corina/Year_10Test.java",
		"test_prompt": "// Year_10Test.java\n// This file is part of Corina.\n//\n// Corina is free software; you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation; either version 2 of the License, or\n// (at your option) any later version.\n//\n// Corina is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Corina; if not, write to the Free Software\n// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n//\n// Copyright 2001 Ken Harris <kbh7@cornell.edu>\n//\npackage corina;\n\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link Year}.\n* It contains ten unit test cases for the {@link Year#equals(Object)} method.\n*/\nclass Year_10Test {"
	},
	{
		"original_code": "// Year.java\n//\n// This file is part of Corina.\n//\n// Corina is free software; you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation; either version 2 of the License, or\n// (at your option) any later version.\n//\n// Corina is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Corina; if not, write to the Free Software\n// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n//\n// Copyright 2001 Ken Harris <kbh7@cornell.edu>\n//\npackage corina;\n\n/**\n *   <p>A calendar year.  It normally acts similar to an integer, but\n *   skips the mythical \"year 0\".</p>\n *\n *   <p>In <code>Year</code> math:</p>\n *\n *   <ul>\n *     <li>-1 + 1 = 1</li>\n *     <li>2 - 4 = -3</li>\n *   </ul>\n *\n *   <p>Years, like Numbers and Strings, are immutable, so they are not\n *   Cloneable (there's no reason for them to be).</p>\n *\n *   @author Ken Harris &lt;kbh7 <i style=\"color: gray\">at</i> cornell <i style=\"color: gray\">dot</i> edu&gt;\n *   @version $Id: Year.java,v 1.4 2004/01/18 17:53:47 aaron Exp $\n */\npublic final class Year implements Comparable {\n\n    /**\n     * The default year: 1001.\n     */\n    public static final Year DEFAULT = new Year(1001);\n\n    /**\n     * Holds the year value as an <code>int</code>.\n     */\n    private final int y;\n\n    /**\n     *       Default constructor.  Uses <code>DEFAULT</code> as the year.\n     *\n     *       @see #DEFAULT\n     */\n    public Year() {\n        y = DEFAULT.y;\n    }\n\n    /**\n     *       Constructor for <code>int</code>s.  Uses <code>DEFAULT</code>\n     *       as the year if an invalid value is passed.\n     *\n     *       @param x the year value, as an int\n     *       @see #DEFAULT\n     */\n    public Year(int x) {\n        y = (x == 0 ? DEFAULT.y : x);\n    }\n\n    /**\n     *       Constructor from (row,col) pair.  Assumes 10-year rows.  The\n     *       column should always be between 0 and 9, inclusive.\n     *\n     *       @param row the row; row 0 is the decade ending in year 9\n     *       @param col the column; in row 0, year is the column\n     */\n    public Year(int row, int col) {\n        int yy = 10 * row + col;\n        if (yy == 0)\n            // should this be 1?\n            yy = DEFAULT.y;\n        y = yy;\n    }\n\n    /**\n     *       Constructor from String.  No AD/BC; reads it like C's\n     *       <code>scanf(\" %d \", &y)</code> would.\n     *\n     *       @exception NumberFormatException if the String cannot be\n     *       parsed, or is equal to zero\n     *       @see java.lang.String\n     */\n    public Year(String s) throws NumberFormatException {\n        y = Integer.parseInt(s.trim());\n        if (y == 0)\n            throw new NumberFormatException();\n    }\n\n    /**\n     *       Constructor from String.  No AD/BC; reads it like C's\n     *       <code>scanf(\" %d \", &y)</code> would.  This constructor is for\n     *       zero-year-systems, if <code>zys</code> is true, i.e., -5 means\n     *       6 BC.\n     *\n     *       @exception NumberFormatException if the String cannot be parsed\n     *       @see java.lang.String\n     */\n    public Year(String s, boolean zys) throws NumberFormatException {\n        int yy = Integer.parseInt(s.trim());\n        // back up a year, if this system assumed a zero-year\n        if (zys && yy <= 0)\n            yy--;\n        y = yy;\n    }\n\n    /**\n     *       Convert to a String.  No \"AD\"/\"BC\"; simply the integer value.\n     *\n     *       @return this year as a String\n     *       @see java.lang.String\n     */\n    public String toString() {\n        return String.valueOf(y);\n    }\n\n    /**\n     *       This method always throws UnsupportedOperationException.  It's\n     *       not implemented, and don't even think about implementing it\n     *       yourself!  It encourages being lazy and bypassing Year's\n     *       methods to just deal with ints.  And that defeats the whole\n     *       purpose of having Years.  So I'll just disallow it.  You don't\n     *       need it anyway.  If you really need the int for some reason I\n     *       can't imagine, you can always do\n     *       <code>Integer.parseInt(y.toString())</code>.  That way you know\n     *       you're doing it to get the int, and not for imagined\n     *       performance or convenience reasons.\n     *\n     *       @return never returns\n     *       @exception UnsupportedOperationException always!\n     */\n    public int intValue() {\n        // i pity th' fool who tries to use intvalue!\n        throw new UnsupportedOperationException();\n    }\n\n    /**\n     *       Return true, iff this is year 1.  (This actually comes up\n     *       fairly often.)\n     *\n     *       @return true iff this is year 1\n     */\n    public boolean isYearOne() {\n        return (y == 1);\n    }\n\n    /**\n     *       The maximum (later) of two years.\n     *\n     *       @return the later of two years\n     */\n    public static Year max(Year y1, Year y2) {\n        return (y1.y > y2.y ? y1 : y2);\n    }\n\n    /**\n     *       The minimum (earlier) of two years.\n     *\n     *       @return the earlier of two years\n     */\n    public static Year min(Year y1, Year y2) {\n        return (y1.y < y2.y ? y1 : y2);\n    }\n\n    /**\n     *       Adds (or subtracts, for negative values) some number of years,\n     *       and generates a new Year object.\n     *\n     *       @param dy the number of years to add (subtract)\n     *       @see #diff\n     */\n    public Year add(int dy) {\n        // copy, and convert to zys\n        int r = y;\n        if (r < 0)\n            r++;\n        // add dy\n        r += dy;\n        // convert back, and return\n        if (r <= 0)\n            r--;\n        return new Year(r);\n    }\n\n    /**\n     *       Calculate the number of years difference between two years.\n     *       That is, there are this many years difference between\n     *       <code>this</code> and <code>y2</code>; if they are equal, this\n     *       number is zero.\n     *\n     *       @param y2 the year to subtract\n     *       @return the number of years difference between\n     *       <code>this</code> and <code>y2</code>\n     *       @see #add\n     */\n    public int diff(Year y2) {\n        // copy, and convert to zys\n        int i1 = y;\n        if (i1 < 0)\n            i1++;\n        int i2 = y2.y;\n        if (i2 < 0)\n            i2++;\n        // subtract, and return\n        return i1 - i2;\n    }\n\n    /**\n     *       Computes <code>this</code> modulo <code>m</code>.  Always\n     *       gives a positive result, even for negative numbers, so it is\n     *       suitable for computing a grid position for a span of years.\n     *\n     *       @param m base for modulo\n     *       @return the year modulo <code>m</code>\n     */\n    public int mod(int m) {\n        int r = y % m;\n        if (r < 0)\n            r += m;\n        return r;\n    }\n\n    /**\n     *       Determines what row this year would be, if years were in a\n     *       grid 10 wide, with the left column years ending in zero.  Row\n     *       0 is years 1 through 9.\n     *\n     *       @return this year's row\n     *       @see #column\n     */\n    public int row() {\n        int z = y / 10;\n        if (y < 0 && y % 10 != 0)\n            z--;\n        return z;\n    }\n\n    /**\n     *        Determines what column this year would be, if years were in a\n     *        grid 10 wide, with the left column years ending in zero.\n     *\n     *        Works for BC years, also:\n     *        <table border=\"1\" cellspacing=\"0\">\n     * \t   <tr><th>column()</th><td>0</td><td>1</td><td>2</td><td>3</td><td>4</td>\n     * \t        <td>5</td><td>6</td><td>7</td><td>8</td><td>9</td></tr>\n     * \t   <tr><th rowspan=\"3\">Year</th><td>-10</td><td>-9</td><td>-8</td><td>-7</td><td>-6</td>\n     * \t        <td>-5</td><td>-4</td><td>-3</td><td>-2</td><td>-1</td></tr>\n     * \t   <tr><td> </td><td>1</td><td>2</td><td>3</td><td>4</td>\n     * \t        <td>5</td><td>6</td><td>7</td><td>8</td><td>9</td></tr>\n     * \t   <tr><td>10</td><td>11</td><td>12</td><td>13</td><td>14</td>\n     * \t        <td>15</td><td>16</td><td>17</td><td>18</td><td>19</td></tr>\n     *        </table>\n     *\n     *        @return this year's column\n     *        @see #row\n     */\n    public int column() {\n        return mod(10);\n    }\n\n    /**\n     *       Compares this and <code>o</code>.\n     *\n     *       @see java.lang.Comparable\n     *       @param o Object to compare\n     *       @return >0, =0, or <0 if this is greater-than, equal-to, or less-than o\n     *       @throws ClassCastException if o is not a Year\n     */\n    public int compareTo(Object o) {\n        return this.y - ((Year) o).y;\n    }\n\n    /**\n     *       Returns <code>true</code> if and only if <code>this</code> is\n     *       equal to <code>y2</code>.\n     *\n     *       @param y2 the year to compare <code>this</code> to\n     *       @return <code>true</code> if <code>this</code> is equal to\n     *       <code>y2</code>, else <code>false</code>\n     */\n    public boolean equals(Object y2) {\n        return (y == ((Year) y2).y);\n    }\n\n    // since i define equals(), i need to define hashCode()\n    public int hashCode() {\n        // returning something based on y is logical, but returning y\n        // itself might make people mistakenly think this is like\n        // intValue(), so let's do something weird to it first.\n        return y * y * y;\n    }\n\n    // THESE TWO METHODS ARE BUGGY AND NEED WORK!\n    public Year cropToCentury() {\n        // is this correct?\n        return add(-mod(100));\n    }\n\n    public Year nextCentury() {\n        // COMPLETELY INCORRECT!\n        Year tmp = add(100);\n        if (tmp.y == 101)\n            return new Year(100);\n        return tmp;\n    }\n}\n",
		"id": "/EvoSuiteBenchmark/35_corina/src/main/java/corina/Year_11Test.java",
		"test_prompt": "// Year_11Test.java\n// This file is part of Corina.\n//\n// Corina is free software; you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation; either version 2 of the License, or\n// (at your option) any later version.\n//\n// Corina is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Corina; if not, write to the Free Software\n// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n//\n// Copyright 2001 Ken Harris <kbh7@cornell.edu>\n//\npackage corina;\n\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link Year}.\n* It contains ten unit test cases for the {@link Year#hashCode()} method.\n*/\nclass Year_11Test {"
	},
	{
		"original_code": "// Year.java\n//\n// This file is part of Corina.\n//\n// Corina is free software; you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation; either version 2 of the License, or\n// (at your option) any later version.\n//\n// Corina is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Corina; if not, write to the Free Software\n// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n//\n// Copyright 2001 Ken Harris <kbh7@cornell.edu>\n//\npackage corina;\n\n/**\n *   <p>A calendar year.  It normally acts similar to an integer, but\n *   skips the mythical \"year 0\".</p>\n *\n *   <p>In <code>Year</code> math:</p>\n *\n *   <ul>\n *     <li>-1 + 1 = 1</li>\n *     <li>2 - 4 = -3</li>\n *   </ul>\n *\n *   <p>Years, like Numbers and Strings, are immutable, so they are not\n *   Cloneable (there's no reason for them to be).</p>\n *\n *   @author Ken Harris &lt;kbh7 <i style=\"color: gray\">at</i> cornell <i style=\"color: gray\">dot</i> edu&gt;\n *   @version $Id: Year.java,v 1.4 2004/01/18 17:53:47 aaron Exp $\n */\npublic final class Year implements Comparable {\n\n    /**\n     * The default year: 1001.\n     */\n    public static final Year DEFAULT = new Year(1001);\n\n    /**\n     * Holds the year value as an <code>int</code>.\n     */\n    private final int y;\n\n    /**\n     *       Default constructor.  Uses <code>DEFAULT</code> as the year.\n     *\n     *       @see #DEFAULT\n     */\n    public Year() {\n        y = DEFAULT.y;\n    }\n\n    /**\n     *       Constructor for <code>int</code>s.  Uses <code>DEFAULT</code>\n     *       as the year if an invalid value is passed.\n     *\n     *       @param x the year value, as an int\n     *       @see #DEFAULT\n     */\n    public Year(int x) {\n        y = (x == 0 ? DEFAULT.y : x);\n    }\n\n    /**\n     *       Constructor from (row,col) pair.  Assumes 10-year rows.  The\n     *       column should always be between 0 and 9, inclusive.\n     *\n     *       @param row the row; row 0 is the decade ending in year 9\n     *       @param col the column; in row 0, year is the column\n     */\n    public Year(int row, int col) {\n        int yy = 10 * row + col;\n        if (yy == 0)\n            // should this be 1?\n            yy = DEFAULT.y;\n        y = yy;\n    }\n\n    /**\n     *       Constructor from String.  No AD/BC; reads it like C's\n     *       <code>scanf(\" %d \", &y)</code> would.\n     *\n     *       @exception NumberFormatException if the String cannot be\n     *       parsed, or is equal to zero\n     *       @see java.lang.String\n     */\n    public Year(String s) throws NumberFormatException {\n        y = Integer.parseInt(s.trim());\n        if (y == 0)\n            throw new NumberFormatException();\n    }\n\n    /**\n     *       Constructor from String.  No AD/BC; reads it like C's\n     *       <code>scanf(\" %d \", &y)</code> would.  This constructor is for\n     *       zero-year-systems, if <code>zys</code> is true, i.e., -5 means\n     *       6 BC.\n     *\n     *       @exception NumberFormatException if the String cannot be parsed\n     *       @see java.lang.String\n     */\n    public Year(String s, boolean zys) throws NumberFormatException {\n        int yy = Integer.parseInt(s.trim());\n        // back up a year, if this system assumed a zero-year\n        if (zys && yy <= 0)\n            yy--;\n        y = yy;\n    }\n\n    /**\n     *       Convert to a String.  No \"AD\"/\"BC\"; simply the integer value.\n     *\n     *       @return this year as a String\n     *       @see java.lang.String\n     */\n    public String toString() {\n        return String.valueOf(y);\n    }\n\n    /**\n     *       This method always throws UnsupportedOperationException.  It's\n     *       not implemented, and don't even think about implementing it\n     *       yourself!  It encourages being lazy and bypassing Year's\n     *       methods to just deal with ints.  And that defeats the whole\n     *       purpose of having Years.  So I'll just disallow it.  You don't\n     *       need it anyway.  If you really need the int for some reason I\n     *       can't imagine, you can always do\n     *       <code>Integer.parseInt(y.toString())</code>.  That way you know\n     *       you're doing it to get the int, and not for imagined\n     *       performance or convenience reasons.\n     *\n     *       @return never returns\n     *       @exception UnsupportedOperationException always!\n     */\n    public int intValue() {\n        // i pity th' fool who tries to use intvalue!\n        throw new UnsupportedOperationException();\n    }\n\n    /**\n     *       Return true, iff this is year 1.  (This actually comes up\n     *       fairly often.)\n     *\n     *       @return true iff this is year 1\n     */\n    public boolean isYearOne() {\n        return (y == 1);\n    }\n\n    /**\n     *       The maximum (later) of two years.\n     *\n     *       @return the later of two years\n     */\n    public static Year max(Year y1, Year y2) {\n        return (y1.y > y2.y ? y1 : y2);\n    }\n\n    /**\n     *       The minimum (earlier) of two years.\n     *\n     *       @return the earlier of two years\n     */\n    public static Year min(Year y1, Year y2) {\n        return (y1.y < y2.y ? y1 : y2);\n    }\n\n    /**\n     *       Adds (or subtracts, for negative values) some number of years,\n     *       and generates a new Year object.\n     *\n     *       @param dy the number of years to add (subtract)\n     *       @see #diff\n     */\n    public Year add(int dy) {\n        // copy, and convert to zys\n        int r = y;\n        if (r < 0)\n            r++;\n        // add dy\n        r += dy;\n        // convert back, and return\n        if (r <= 0)\n            r--;\n        return new Year(r);\n    }\n\n    /**\n     *       Calculate the number of years difference between two years.\n     *       That is, there are this many years difference between\n     *       <code>this</code> and <code>y2</code>; if they are equal, this\n     *       number is zero.\n     *\n     *       @param y2 the year to subtract\n     *       @return the number of years difference between\n     *       <code>this</code> and <code>y2</code>\n     *       @see #add\n     */\n    public int diff(Year y2) {\n        // copy, and convert to zys\n        int i1 = y;\n        if (i1 < 0)\n            i1++;\n        int i2 = y2.y;\n        if (i2 < 0)\n            i2++;\n        // subtract, and return\n        return i1 - i2;\n    }\n\n    /**\n     *       Computes <code>this</code> modulo <code>m</code>.  Always\n     *       gives a positive result, even for negative numbers, so it is\n     *       suitable for computing a grid position for a span of years.\n     *\n     *       @param m base for modulo\n     *       @return the year modulo <code>m</code>\n     */\n    public int mod(int m) {\n        int r = y % m;\n        if (r < 0)\n            r += m;\n        return r;\n    }\n\n    /**\n     *       Determines what row this year would be, if years were in a\n     *       grid 10 wide, with the left column years ending in zero.  Row\n     *       0 is years 1 through 9.\n     *\n     *       @return this year's row\n     *       @see #column\n     */\n    public int row() {\n        int z = y / 10;\n        if (y < 0 && y % 10 != 0)\n            z--;\n        return z;\n    }\n\n    /**\n     *        Determines what column this year would be, if years were in a\n     *        grid 10 wide, with the left column years ending in zero.\n     *\n     *        Works for BC years, also:\n     *        <table border=\"1\" cellspacing=\"0\">\n     * \t   <tr><th>column()</th><td>0</td><td>1</td><td>2</td><td>3</td><td>4</td>\n     * \t        <td>5</td><td>6</td><td>7</td><td>8</td><td>9</td></tr>\n     * \t   <tr><th rowspan=\"3\">Year</th><td>-10</td><td>-9</td><td>-8</td><td>-7</td><td>-6</td>\n     * \t        <td>-5</td><td>-4</td><td>-3</td><td>-2</td><td>-1</td></tr>\n     * \t   <tr><td> </td><td>1</td><td>2</td><td>3</td><td>4</td>\n     * \t        <td>5</td><td>6</td><td>7</td><td>8</td><td>9</td></tr>\n     * \t   <tr><td>10</td><td>11</td><td>12</td><td>13</td><td>14</td>\n     * \t        <td>15</td><td>16</td><td>17</td><td>18</td><td>19</td></tr>\n     *        </table>\n     *\n     *        @return this year's column\n     *        @see #row\n     */\n    public int column() {\n        return mod(10);\n    }\n\n    /**\n     *       Compares this and <code>o</code>.\n     *\n     *       @see java.lang.Comparable\n     *       @param o Object to compare\n     *       @return >0, =0, or <0 if this is greater-than, equal-to, or less-than o\n     *       @throws ClassCastException if o is not a Year\n     */\n    public int compareTo(Object o) {\n        return this.y - ((Year) o).y;\n    }\n\n    /**\n     *       Returns <code>true</code> if and only if <code>this</code> is\n     *       equal to <code>y2</code>.\n     *\n     *       @param y2 the year to compare <code>this</code> to\n     *       @return <code>true</code> if <code>this</code> is equal to\n     *       <code>y2</code>, else <code>false</code>\n     */\n    public boolean equals(Object y2) {\n        return (y == ((Year) y2).y);\n    }\n\n    // since i define equals(), i need to define hashCode()\n    public int hashCode() {\n        // returning something based on y is logical, but returning y\n        // itself might make people mistakenly think this is like\n        // intValue(), so let's do something weird to it first.\n        return y * y * y;\n    }\n\n    // THESE TWO METHODS ARE BUGGY AND NEED WORK!\n    public Year cropToCentury() {\n        // is this correct?\n        return add(-mod(100));\n    }\n\n    public Year nextCentury() {\n        // COMPLETELY INCORRECT!\n        Year tmp = add(100);\n        if (tmp.y == 101)\n            return new Year(100);\n        return tmp;\n    }\n}\n",
		"id": "/EvoSuiteBenchmark/35_corina/src/main/java/corina/Year_12Test.java",
		"test_prompt": "// Year_12Test.java\n// This file is part of Corina.\n//\n// Corina is free software; you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation; either version 2 of the License, or\n// (at your option) any later version.\n//\n// Corina is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Corina; if not, write to the Free Software\n// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n//\n// Copyright 2001 Ken Harris <kbh7@cornell.edu>\n//\npackage corina;\n\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link Year}.\n* It contains ten unit test cases for the {@link Year#cropToCentury()} method.\n*/\nclass Year_12Test {"
	},
	{
		"original_code": "// Year.java\n//\n// This file is part of Corina.\n//\n// Corina is free software; you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation; either version 2 of the License, or\n// (at your option) any later version.\n//\n// Corina is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Corina; if not, write to the Free Software\n// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n//\n// Copyright 2001 Ken Harris <kbh7@cornell.edu>\n//\npackage corina;\n\n/**\n *   <p>A calendar year.  It normally acts similar to an integer, but\n *   skips the mythical \"year 0\".</p>\n *\n *   <p>In <code>Year</code> math:</p>\n *\n *   <ul>\n *     <li>-1 + 1 = 1</li>\n *     <li>2 - 4 = -3</li>\n *   </ul>\n *\n *   <p>Years, like Numbers and Strings, are immutable, so they are not\n *   Cloneable (there's no reason for them to be).</p>\n *\n *   @author Ken Harris &lt;kbh7 <i style=\"color: gray\">at</i> cornell <i style=\"color: gray\">dot</i> edu&gt;\n *   @version $Id: Year.java,v 1.4 2004/01/18 17:53:47 aaron Exp $\n */\npublic final class Year implements Comparable {\n\n    /**\n     * The default year: 1001.\n     */\n    public static final Year DEFAULT = new Year(1001);\n\n    /**\n     * Holds the year value as an <code>int</code>.\n     */\n    private final int y;\n\n    /**\n     *       Default constructor.  Uses <code>DEFAULT</code> as the year.\n     *\n     *       @see #DEFAULT\n     */\n    public Year() {\n        y = DEFAULT.y;\n    }\n\n    /**\n     *       Constructor for <code>int</code>s.  Uses <code>DEFAULT</code>\n     *       as the year if an invalid value is passed.\n     *\n     *       @param x the year value, as an int\n     *       @see #DEFAULT\n     */\n    public Year(int x) {\n        y = (x == 0 ? DEFAULT.y : x);\n    }\n\n    /**\n     *       Constructor from (row,col) pair.  Assumes 10-year rows.  The\n     *       column should always be between 0 and 9, inclusive.\n     *\n     *       @param row the row; row 0 is the decade ending in year 9\n     *       @param col the column; in row 0, year is the column\n     */\n    public Year(int row, int col) {\n        int yy = 10 * row + col;\n        if (yy == 0)\n            // should this be 1?\n            yy = DEFAULT.y;\n        y = yy;\n    }\n\n    /**\n     *       Constructor from String.  No AD/BC; reads it like C's\n     *       <code>scanf(\" %d \", &y)</code> would.\n     *\n     *       @exception NumberFormatException if the String cannot be\n     *       parsed, or is equal to zero\n     *       @see java.lang.String\n     */\n    public Year(String s) throws NumberFormatException {\n        y = Integer.parseInt(s.trim());\n        if (y == 0)\n            throw new NumberFormatException();\n    }\n\n    /**\n     *       Constructor from String.  No AD/BC; reads it like C's\n     *       <code>scanf(\" %d \", &y)</code> would.  This constructor is for\n     *       zero-year-systems, if <code>zys</code> is true, i.e., -5 means\n     *       6 BC.\n     *\n     *       @exception NumberFormatException if the String cannot be parsed\n     *       @see java.lang.String\n     */\n    public Year(String s, boolean zys) throws NumberFormatException {\n        int yy = Integer.parseInt(s.trim());\n        // back up a year, if this system assumed a zero-year\n        if (zys && yy <= 0)\n            yy--;\n        y = yy;\n    }\n\n    /**\n     *       Convert to a String.  No \"AD\"/\"BC\"; simply the integer value.\n     *\n     *       @return this year as a String\n     *       @see java.lang.String\n     */\n    public String toString() {\n        return String.valueOf(y);\n    }\n\n    /**\n     *       This method always throws UnsupportedOperationException.  It's\n     *       not implemented, and don't even think about implementing it\n     *       yourself!  It encourages being lazy and bypassing Year's\n     *       methods to just deal with ints.  And that defeats the whole\n     *       purpose of having Years.  So I'll just disallow it.  You don't\n     *       need it anyway.  If you really need the int for some reason I\n     *       can't imagine, you can always do\n     *       <code>Integer.parseInt(y.toString())</code>.  That way you know\n     *       you're doing it to get the int, and not for imagined\n     *       performance or convenience reasons.\n     *\n     *       @return never returns\n     *       @exception UnsupportedOperationException always!\n     */\n    public int intValue() {\n        // i pity th' fool who tries to use intvalue!\n        throw new UnsupportedOperationException();\n    }\n\n    /**\n     *       Return true, iff this is year 1.  (This actually comes up\n     *       fairly often.)\n     *\n     *       @return true iff this is year 1\n     */\n    public boolean isYearOne() {\n        return (y == 1);\n    }\n\n    /**\n     *       The maximum (later) of two years.\n     *\n     *       @return the later of two years\n     */\n    public static Year max(Year y1, Year y2) {\n        return (y1.y > y2.y ? y1 : y2);\n    }\n\n    /**\n     *       The minimum (earlier) of two years.\n     *\n     *       @return the earlier of two years\n     */\n    public static Year min(Year y1, Year y2) {\n        return (y1.y < y2.y ? y1 : y2);\n    }\n\n    /**\n     *       Adds (or subtracts, for negative values) some number of years,\n     *       and generates a new Year object.\n     *\n     *       @param dy the number of years to add (subtract)\n     *       @see #diff\n     */\n    public Year add(int dy) {\n        // copy, and convert to zys\n        int r = y;\n        if (r < 0)\n            r++;\n        // add dy\n        r += dy;\n        // convert back, and return\n        if (r <= 0)\n            r--;\n        return new Year(r);\n    }\n\n    /**\n     *       Calculate the number of years difference between two years.\n     *       That is, there are this many years difference between\n     *       <code>this</code> and <code>y2</code>; if they are equal, this\n     *       number is zero.\n     *\n     *       @param y2 the year to subtract\n     *       @return the number of years difference between\n     *       <code>this</code> and <code>y2</code>\n     *       @see #add\n     */\n    public int diff(Year y2) {\n        // copy, and convert to zys\n        int i1 = y;\n        if (i1 < 0)\n            i1++;\n        int i2 = y2.y;\n        if (i2 < 0)\n            i2++;\n        // subtract, and return\n        return i1 - i2;\n    }\n\n    /**\n     *       Computes <code>this</code> modulo <code>m</code>.  Always\n     *       gives a positive result, even for negative numbers, so it is\n     *       suitable for computing a grid position for a span of years.\n     *\n     *       @param m base for modulo\n     *       @return the year modulo <code>m</code>\n     */\n    public int mod(int m) {\n        int r = y % m;\n        if (r < 0)\n            r += m;\n        return r;\n    }\n\n    /**\n     *       Determines what row this year would be, if years were in a\n     *       grid 10 wide, with the left column years ending in zero.  Row\n     *       0 is years 1 through 9.\n     *\n     *       @return this year's row\n     *       @see #column\n     */\n    public int row() {\n        int z = y / 10;\n        if (y < 0 && y % 10 != 0)\n            z--;\n        return z;\n    }\n\n    /**\n     *        Determines what column this year would be, if years were in a\n     *        grid 10 wide, with the left column years ending in zero.\n     *\n     *        Works for BC years, also:\n     *        <table border=\"1\" cellspacing=\"0\">\n     * \t   <tr><th>column()</th><td>0</td><td>1</td><td>2</td><td>3</td><td>4</td>\n     * \t        <td>5</td><td>6</td><td>7</td><td>8</td><td>9</td></tr>\n     * \t   <tr><th rowspan=\"3\">Year</th><td>-10</td><td>-9</td><td>-8</td><td>-7</td><td>-6</td>\n     * \t        <td>-5</td><td>-4</td><td>-3</td><td>-2</td><td>-1</td></tr>\n     * \t   <tr><td> </td><td>1</td><td>2</td><td>3</td><td>4</td>\n     * \t        <td>5</td><td>6</td><td>7</td><td>8</td><td>9</td></tr>\n     * \t   <tr><td>10</td><td>11</td><td>12</td><td>13</td><td>14</td>\n     * \t        <td>15</td><td>16</td><td>17</td><td>18</td><td>19</td></tr>\n     *        </table>\n     *\n     *        @return this year's column\n     *        @see #row\n     */\n    public int column() {\n        return mod(10);\n    }\n\n    /**\n     *       Compares this and <code>o</code>.\n     *\n     *       @see java.lang.Comparable\n     *       @param o Object to compare\n     *       @return >0, =0, or <0 if this is greater-than, equal-to, or less-than o\n     *       @throws ClassCastException if o is not a Year\n     */\n    public int compareTo(Object o) {\n        return this.y - ((Year) o).y;\n    }\n\n    /**\n     *       Returns <code>true</code> if and only if <code>this</code> is\n     *       equal to <code>y2</code>.\n     *\n     *       @param y2 the year to compare <code>this</code> to\n     *       @return <code>true</code> if <code>this</code> is equal to\n     *       <code>y2</code>, else <code>false</code>\n     */\n    public boolean equals(Object y2) {\n        return (y == ((Year) y2).y);\n    }\n\n    // since i define equals(), i need to define hashCode()\n    public int hashCode() {\n        // returning something based on y is logical, but returning y\n        // itself might make people mistakenly think this is like\n        // intValue(), so let's do something weird to it first.\n        return y * y * y;\n    }\n\n    // THESE TWO METHODS ARE BUGGY AND NEED WORK!\n    public Year cropToCentury() {\n        // is this correct?\n        return add(-mod(100));\n    }\n\n    public Year nextCentury() {\n        // COMPLETELY INCORRECT!\n        Year tmp = add(100);\n        if (tmp.y == 101)\n            return new Year(100);\n        return tmp;\n    }\n}\n",
		"id": "/EvoSuiteBenchmark/35_corina/src/main/java/corina/Year_13Test.java",
		"test_prompt": "// Year_13Test.java\n// This file is part of Corina.\n//\n// Corina is free software; you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation; either version 2 of the License, or\n// (at your option) any later version.\n//\n// Corina is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Corina; if not, write to the Free Software\n// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n//\n// Copyright 2001 Ken Harris <kbh7@cornell.edu>\n//\npackage corina;\n\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link Year}.\n* It contains ten unit test cases for the {@link Year#nextCentury()} method.\n*/\nclass Year_13Test {"
	},
	{
		"original_code": "// RelativeDate.java\n//\n// This file is part of Corina.\n//\n// Corina is free software; you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation; either version 2 of the License, or\n// (at your option) any later version.\n//\n// Corina is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Corina; if not, write to the Free Software\n// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n//\n// Copyright 2001 Ken Harris <kbh7@cornell.edu>\n//\npackage corina.browser;\n\nimport corina.ui.I18n;\nimport java.util.Calendar;\nimport java.util.Date;\nimport java.text.DateFormat;\n\n// (why doesn't this just extend Date?)\npublic class RelativeDate implements Comparable {\n\n    private Date date;\n\n    // there are only 2 things i need translated, so let's just grab them now\n    private static String TODAY = I18n.getText(\"todayAt\") + \" \";\n\n    private static String YESTERDAY = I18n.getText(\"yesterdayAt\") + \" \";\n\n    public RelativeDate(Date date) {\n        this.date = date;\n    }\n\n    public int compareTo(Object o2) {\n        return date.compareTo(((RelativeDate) o2).date);\n    }\n\n    // PERF: if this date is immutable, then the only reason toString()\n    // won't be a constant is if the current date changes; but that will\n    // happen only rarely, so memoization is still a big win, right?\n    // ALSO: would representing this date as ms since epoch help wolog?\n    // THIS METHOD IS CALLED FAR TOO MANY TIMES!\n    private static int called = 0;\n\n    private String memo = null;\n\n    public String toString() {\n        called++;\n        // naive memoization\n        // BUG: if this.date changes (not done but possible), this will be wrong\n        // BUG: if current day changes (rare), this will be wrong\n        if (memo != null) {\n            return memo;\n        }\n        Calendar today = Calendar.getInstance();\n        Calendar _date = Calendar.getInstance();\n        _date.setTime(date);\n        String formattedTime = timeFmt.format(date);\n        // today?\n        if (sameDay(today, _date)) {\n            memo = TODAY + formattedTime;\n            return memo;\n        }\n        // yesterday?\n        Calendar yesterday = Calendar.getInstance();\n        yesterday.add(Calendar.DATE, -1);\n        if (sameDay(yesterday, _date)) {\n            memo = YESTERDAY + formattedTime;\n            return memo;\n        }\n        // some random day\n        memo = dateFmt.format(date) + \", \" + formattedTime;\n        return memo;\n    }\n\n    // time&date formatters, short forms\n    private static DateFormat dateFmt = DateFormat.getDateInstance(DateFormat.SHORT);\n\n    private static DateFormat timeFmt = DateFormat.getTimeInstance(DateFormat.SHORT);\n\n    // true iff date1 and date2 happen to be during the same day\n    private boolean sameDay(Calendar date1, Calendar date2) {\n        return (date1.get(Calendar.DAY_OF_YEAR) == date2.get(Calendar.DAY_OF_YEAR) && date1.get(Calendar.YEAR) == date2.get(Calendar.YEAR));\n    }\n}\n",
		"id": "/EvoSuiteBenchmark/35_corina/src/main/java/corina/browser/RelativeDate.java",
		"test_prompt": "// RelativeDateTest.java\n// This file is part of Corina.\n//\n// Corina is free software; you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation; either version 2 of the License, or\n// (at your option) any later version.\n//\n// Corina is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Corina; if not, write to the Free Software\n// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n//\n// Copyright 2001 Ken Harris <kbh7@cornell.edu>\n//\npackage corina.browser;\n\nimport corina.ui.I18n;\nimport java.util.Calendar;\nimport java.util.Date;\nimport java.text.DateFormat;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link RelativeDate}.\n* It contains ten unit test cases for the {@link RelativeDate#compareTo(Object)} method.\n*/\nclass RelativeDateTest {"
	},
	{
		"original_code": "// Row.java\npackage corina.browser;\n\nimport corina.Element;\nimport corina.Range;\nimport corina.MetadataTemplate;\nimport corina.Species;\nimport corina.UnknownSpeciesException;\nimport corina.ui.I18n;\nimport java.io.File;\nimport java.io.IOException;\nimport java.util.List;\nimport java.util.Date;\nimport java.util.Iterator;\nimport java.util.MissingResourceException;\nimport java.awt.Image;\nimport javax.swing.Icon;\nimport javax.swing.ImageIcon;\nimport javax.swing.JTable;\nimport javax.swing.tree.DefaultTreeCellRenderer;\n\n// 3 basic types of rows: samples, folders, and other files\n// -- \"other file\" is what an element is before it's loaded.\n// -- don't keep reading a non-dendro file, but also don't completely ignore a file that might get fixed elsewhere.  solution: re-read a file if the moddate changes (so i'll need to keep a moddate field here.)\npublic class Row {\n\n    private File file;\n\n    private Element element = null;\n\n    private Browser browser;\n\n    // use browser for (1) visible fields, and (2) matchesAny() method.\n    public Row(File file, Browser browser) {\n        this.file = file;\n        this.browser = browser;\n    }\n\n    // new interface: Summary is responsible for loading\n    public Row(Element e, Browser browser) {\n        this.file = new File(e.getFilename());\n        // don't load again!\n        this.element = e;\n        this.browser = browser;\n    }\n\n    public String getName() {\n        // in File\n        return file.getName();\n    }\n\n    public String getPath() {\n        //     \"\n        return file.getPath();\n    }\n\n    public boolean isDirectory() {\n        //     \"\n        return file.isDirectory();\n    }\n\n    // this makes bargraphs from the browser, for example, *much* more efficient\n    public Element getElement() {\n        return element;\n    }\n\n    private static Icon leafIcon, closedIcon, treeIcon;\n\n    static {\n        DefaultTreeCellRenderer tcr = new DefaultTreeCellRenderer();\n        leafIcon = tcr.getLeafIcon();\n        closedIcon = tcr.getClosedIcon();\n        // tree.java does exactly the same thing ... REFACTOR\n        ImageIcon tmp = new ImageIcon(Row.class.getClassLoader().getResource(\"Images/Tree.png\"));\n        // EXTRACT CONST!\n        int height = new JTable().getFont().getSize() + 4;\n        treeIcon = new ImageIcon(tmp.getImage().getScaledInstance(height, height, Image.SCALE_SMOOTH));\n    }\n\n    public Icon getIcon() {\n        if (file.isDirectory())\n            return closedIcon;\n        if (element == null)\n            return leafIcon;\n        else\n            return treeIcon;\n    }\n\n    private FileLength size = null;\n\n    private FileLength getSize() {\n        // in File -- but override\n        if (size == null)\n            size = new FileLength(file);\n        return size;\n    }\n\n    public String getKind() {\n        if (file.isDirectory())\n            return \"Folder\";\n        // WRITEME?\n        return \"Document\";\n    }\n\n    private RelativeDate modified = null;\n\n    private RelativeDate getModified() {\n        if (modified == null)\n            modified = new RelativeDate(new Date(file.lastModified()));\n        return modified;\n    }\n\n    // FIXME: it'd be better to do nothing here if it's a folder, than to\n    // say if (!r.isDirectory()) r.load();.\n    /*\n    public void load() {\n        try {\n            // create the element, and load its metadata\n            element = new Element(file.getPath());\n\t    //            element.loadMeta();\n\n\t    // WORKING HERE:\n\t    // -- i already have a pointer to my Browser, which is good.\n\t    // -- the Browser, before calling any Row.load(), should have loaded a Summary\n\t    // -- so, my first step here is to check that summary\n\t    // -- if the moddate is ok, just read the meta from that\n\t    if (browser.summary != null) {\n\t\tfor (int i=0; i<browser.summary.elements.size(); i++) {\n\t\t    Element e = (Element) browser.summary.elements.get(i);\n\t\t    if (e.filename.equals(file.getName())) {\n\t\t\tif (file.lastModified() <= e.lastModified) {\n\t\t\t    element = e;\n\t\t\t    return;\n\t\t\t} else {\n\t\t\t    break; // need to load newer version -- break to loadMeta() below\n\t\t\t}\n\t\t    }\n\t\t}\n\t    }\n\n\t    // if it's a non-dendro file, skip out here\n\t    if (browser.summary != null) {\n\t\tfor (int i=0; i<browser.summary.others.size(); i++) {\n\t\t    String f = (String) browser.summary.others.get(i);\n\t\t    System.out.println(\"f=\" + f + \", file=\" + file.getName());\n\t\t    if (file.getName().equals(f)) {\n\t\t\tSystem.out.println(\"not loading, not a dendro file\");\n\t\t\treturn;\n\t\t    }\n\t\t}\n\t    }\n\n\t    // FIXME: summary should include which files aren't dendro files.\n\t    // right now, it has to fall back to trying .xls files again, for example.\n\n\t    // System.out.println(\"falling back to loadMeta() for \" + file.getName());\n\t    element.loadMeta();\n\n\t    // -- (also add/rem'd files)\n\t    // -- if not, load sample normally, and tell Browser to update Summary\n\t    // -- when done, Browser should tell the Summary to re-save itself\n\n            // add other stuff to the meta-map\n            // -- or make my own meta map?\n            // -- or use an array?\n            // WRITE ME\n        } catch (IOException ioe) {\n            // what to do?  better dim it or something.  oh, and kind=\"Unknown file\" or \"Not a sample\" now.\n\t    System.out.println(\"in row.load (\" + file.getName() + \"), got ioe, so it must not be a dendro file\");\n            element = null;\n        }\n    }\n*/\n    // valid fields are:\n    // -- any metadata field\n    // -- \"name\", \"size\", \"kind\", \"modified\"\n    // -- \"range\", \"start\", \"end\", \"length\"\n    // how about just making an array(list) of all of these?  the metadata fields exist in a fixed order,\n    // and then this method is just a table lookup.  plus sorting is a snap.\n    // -- IT COULD BE A LOT FASTER, TOO.\n    public Object getField(String field) {\n        // file metadata\n        if (field.equals(\"name\"))\n            return getName();\n        if (field.equals(\"size\"))\n            return getSize();\n        if (field.equals(\"kind\"))\n            return getKind();\n        if (field.equals(\"modified\"))\n            // AsString(); // should return the Date -- a RelativeDate, actually.\n            return getModified();\n        if (element != null) {\n            // range, in some form?\n            // can't be null if element is loaded\n            Range range = element.getRange();\n            if (field.equals(\"range\"))\n                // i'd like this to use toStringWithSpan(), but how?  oh well.\n                // (anonymous/inner class with tostring=tostringwithspan?\n                return range;\n            if (field.equals(\"start\"))\n                // PERF: year.tostring isn't memoed, so this involves new(), too!\n                return range.getStart();\n            if (field.equals(\"end\"))\n                // PERF: year.tostring isn't memoed, so this involves new(), too!\n                return range.getEnd();\n            if (field.equals(\"length\"))\n                // PERF: new() called on each view!\n                return new Integer(range.span());\n            // if it's null, they get null\n            Object value = element.details.get(field);\n            if (value == null)\n                return null;\n            // maybe it has no translation\n            boolean match = false;\n            Iterator i = MetadataTemplate.getFields();\n            while (i.hasNext()) {\n                MetadataTemplate.Field f = (MetadataTemplate.Field) i.next();\n                if (f.getVariable().equals(field)) {\n                    // REFACTOR: looks familiar -- isField() or something?\n                    match = true;\n                    break;\n                }\n            }\n            if (match)\n                return value;\n            // if it's a species, try looking it up with the Species object,\n            // so 4-letter codes show as names.  if that doesn't work, just show the value.\n            if (field.equals(\"species\")) {\n                // try {\n                // return Species.getName(value.toString());\n                // } catch (UnknownSpeciesException use) {\n                return value.toString();\n                // }\n            }\n            // the comments field will often have newlines in it,\n            // which render as empty boxes; replace them with spaces\n            // or something.\n            // TODO: why only the comments field?\n            if (field.equals(\"comments\"))\n                return value.toString().replace('\\n', ' ');\n            // ms-dos corina allowed \"?\" to mean \"unspecified\"\n            if (value.toString().equals(\"?\"))\n                return null;\n            // it's a valid field -- find it, and look up the string\n            MetadataTemplate.Field f = MetadataTemplate.getField(field);\n            if (f.isValidValue(value.toString()))\n                return I18n.getText(\"meta.\" + field + \".\" + value);\n            // it's an unknown value -- let's just spit it out\n            return value.toString();\n        }\n        // element = null ... something's wrong, i think.\n        return null;\n    }\n\n    // true if this file matches all of the words, with any of its visible fields.\n    // (how am i to know what's visible here?)  (pass in the list of visible fields, too?)\n    // no, better: if i pass a reference to the list-of-visible-fields with the constructor,\n    // with the price of exactly one reference, i ... oh, wait, wrong concept.\n    // i'm thinking i can change one field, implement compareTo() here, and it'll always work.\n    // i'd need a reference back to the Browser, and Browser.getSortField().\n    public boolean matches(String[] words) {\n        // foreach field f in visiblefields[] -- element.meta.values()?\n        // task: need to match across fields.\n        // strategy: append all fields together, with spaces between them.\n        StringBuffer buf = new StringBuffer();\n        // use name, modified, kind.  (don't use size, or any range view.)\n        buf.append(getName() + \" \");\n        buf.append(getModified() + \" \");\n        buf.append(getField(\"kind\") + \" \");\n        // only look at visible fields\n        // BUG: this lists all fields, not just metadata fields -- range, etc.\n        // -- this is bad because: i already put in name,mod,kind, so they get searched twice, but\n        // more importantly: this searches RANGE, etc., which i specifically don't want to search.\n        List visible = browser.getVisibleFields();\n        for (int i = 0; i < visible.size(); i++) {\n            Object value = getField((String) visible.get(i));\n            if (value == null)\n                continue;\n            if (// skip all numbers and ranges\n            value instanceof Number || value instanceof Range)\n                continue;\n            buf.append(value + \" \");\n        }\n        return Browser.matchesAny(buf.toString(), words);\n    }\n    // why didn't i just overload File?\n}\n",
		"id": "/EvoSuiteBenchmark/35_corina/src/main/java/corina/browser/Row_0Test.java",
		"test_prompt": "// Row_0Test.java\npackage corina.browser;\n\nimport corina.Element;\nimport corina.Range;\nimport corina.MetadataTemplate;\nimport corina.Species;\nimport corina.UnknownSpeciesException;\nimport corina.ui.I18n;\nimport java.io.File;\nimport java.io.IOException;\nimport java.util.List;\nimport java.util.Date;\nimport java.util.Iterator;\nimport java.util.MissingResourceException;\nimport java.awt.Image;\nimport javax.swing.Icon;\nimport javax.swing.ImageIcon;\nimport javax.swing.JTable;\nimport javax.swing.tree.DefaultTreeCellRenderer;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link Row}.\n* It contains ten unit test cases for the {@link Row#isDirectory()} method.\n*/\nclass Row_0Test {"
	},
	{
		"original_code": "// Row.java\npackage corina.browser;\n\nimport corina.Element;\nimport corina.Range;\nimport corina.MetadataTemplate;\nimport corina.Species;\nimport corina.UnknownSpeciesException;\nimport corina.ui.I18n;\nimport java.io.File;\nimport java.io.IOException;\nimport java.util.List;\nimport java.util.Date;\nimport java.util.Iterator;\nimport java.util.MissingResourceException;\nimport java.awt.Image;\nimport javax.swing.Icon;\nimport javax.swing.ImageIcon;\nimport javax.swing.JTable;\nimport javax.swing.tree.DefaultTreeCellRenderer;\n\n// 3 basic types of rows: samples, folders, and other files\n// -- \"other file\" is what an element is before it's loaded.\n// -- don't keep reading a non-dendro file, but also don't completely ignore a file that might get fixed elsewhere.  solution: re-read a file if the moddate changes (so i'll need to keep a moddate field here.)\npublic class Row {\n\n    private File file;\n\n    private Element element = null;\n\n    private Browser browser;\n\n    // use browser for (1) visible fields, and (2) matchesAny() method.\n    public Row(File file, Browser browser) {\n        this.file = file;\n        this.browser = browser;\n    }\n\n    // new interface: Summary is responsible for loading\n    public Row(Element e, Browser browser) {\n        this.file = new File(e.getFilename());\n        // don't load again!\n        this.element = e;\n        this.browser = browser;\n    }\n\n    public String getName() {\n        // in File\n        return file.getName();\n    }\n\n    public String getPath() {\n        //     \"\n        return file.getPath();\n    }\n\n    public boolean isDirectory() {\n        //     \"\n        return file.isDirectory();\n    }\n\n    // this makes bargraphs from the browser, for example, *much* more efficient\n    public Element getElement() {\n        return element;\n    }\n\n    private static Icon leafIcon, closedIcon, treeIcon;\n\n    static {\n        DefaultTreeCellRenderer tcr = new DefaultTreeCellRenderer();\n        leafIcon = tcr.getLeafIcon();\n        closedIcon = tcr.getClosedIcon();\n        // tree.java does exactly the same thing ... REFACTOR\n        ImageIcon tmp = new ImageIcon(Row.class.getClassLoader().getResource(\"Images/Tree.png\"));\n        // EXTRACT CONST!\n        int height = new JTable().getFont().getSize() + 4;\n        treeIcon = new ImageIcon(tmp.getImage().getScaledInstance(height, height, Image.SCALE_SMOOTH));\n    }\n\n    public Icon getIcon() {\n        if (file.isDirectory())\n            return closedIcon;\n        if (element == null)\n            return leafIcon;\n        else\n            return treeIcon;\n    }\n\n    private FileLength size = null;\n\n    private FileLength getSize() {\n        // in File -- but override\n        if (size == null)\n            size = new FileLength(file);\n        return size;\n    }\n\n    public String getKind() {\n        if (file.isDirectory())\n            return \"Folder\";\n        // WRITEME?\n        return \"Document\";\n    }\n\n    private RelativeDate modified = null;\n\n    private RelativeDate getModified() {\n        if (modified == null)\n            modified = new RelativeDate(new Date(file.lastModified()));\n        return modified;\n    }\n\n    // FIXME: it'd be better to do nothing here if it's a folder, than to\n    // say if (!r.isDirectory()) r.load();.\n    /*\n    public void load() {\n        try {\n            // create the element, and load its metadata\n            element = new Element(file.getPath());\n\t    //            element.loadMeta();\n\n\t    // WORKING HERE:\n\t    // -- i already have a pointer to my Browser, which is good.\n\t    // -- the Browser, before calling any Row.load(), should have loaded a Summary\n\t    // -- so, my first step here is to check that summary\n\t    // -- if the moddate is ok, just read the meta from that\n\t    if (browser.summary != null) {\n\t\tfor (int i=0; i<browser.summary.elements.size(); i++) {\n\t\t    Element e = (Element) browser.summary.elements.get(i);\n\t\t    if (e.filename.equals(file.getName())) {\n\t\t\tif (file.lastModified() <= e.lastModified) {\n\t\t\t    element = e;\n\t\t\t    return;\n\t\t\t} else {\n\t\t\t    break; // need to load newer version -- break to loadMeta() below\n\t\t\t}\n\t\t    }\n\t\t}\n\t    }\n\n\t    // if it's a non-dendro file, skip out here\n\t    if (browser.summary != null) {\n\t\tfor (int i=0; i<browser.summary.others.size(); i++) {\n\t\t    String f = (String) browser.summary.others.get(i);\n\t\t    System.out.println(\"f=\" + f + \", file=\" + file.getName());\n\t\t    if (file.getName().equals(f)) {\n\t\t\tSystem.out.println(\"not loading, not a dendro file\");\n\t\t\treturn;\n\t\t    }\n\t\t}\n\t    }\n\n\t    // FIXME: summary should include which files aren't dendro files.\n\t    // right now, it has to fall back to trying .xls files again, for example.\n\n\t    // System.out.println(\"falling back to loadMeta() for \" + file.getName());\n\t    element.loadMeta();\n\n\t    // -- (also add/rem'd files)\n\t    // -- if not, load sample normally, and tell Browser to update Summary\n\t    // -- when done, Browser should tell the Summary to re-save itself\n\n            // add other stuff to the meta-map\n            // -- or make my own meta map?\n            // -- or use an array?\n            // WRITE ME\n        } catch (IOException ioe) {\n            // what to do?  better dim it or something.  oh, and kind=\"Unknown file\" or \"Not a sample\" now.\n\t    System.out.println(\"in row.load (\" + file.getName() + \"), got ioe, so it must not be a dendro file\");\n            element = null;\n        }\n    }\n*/\n    // valid fields are:\n    // -- any metadata field\n    // -- \"name\", \"size\", \"kind\", \"modified\"\n    // -- \"range\", \"start\", \"end\", \"length\"\n    // how about just making an array(list) of all of these?  the metadata fields exist in a fixed order,\n    // and then this method is just a table lookup.  plus sorting is a snap.\n    // -- IT COULD BE A LOT FASTER, TOO.\n    public Object getField(String field) {\n        // file metadata\n        if (field.equals(\"name\"))\n            return getName();\n        if (field.equals(\"size\"))\n            return getSize();\n        if (field.equals(\"kind\"))\n            return getKind();\n        if (field.equals(\"modified\"))\n            // AsString(); // should return the Date -- a RelativeDate, actually.\n            return getModified();\n        if (element != null) {\n            // range, in some form?\n            // can't be null if element is loaded\n            Range range = element.getRange();\n            if (field.equals(\"range\"))\n                // i'd like this to use toStringWithSpan(), but how?  oh well.\n                // (anonymous/inner class with tostring=tostringwithspan?\n                return range;\n            if (field.equals(\"start\"))\n                // PERF: year.tostring isn't memoed, so this involves new(), too!\n                return range.getStart();\n            if (field.equals(\"end\"))\n                // PERF: year.tostring isn't memoed, so this involves new(), too!\n                return range.getEnd();\n            if (field.equals(\"length\"))\n                // PERF: new() called on each view!\n                return new Integer(range.span());\n            // if it's null, they get null\n            Object value = element.details.get(field);\n            if (value == null)\n                return null;\n            // maybe it has no translation\n            boolean match = false;\n            Iterator i = MetadataTemplate.getFields();\n            while (i.hasNext()) {\n                MetadataTemplate.Field f = (MetadataTemplate.Field) i.next();\n                if (f.getVariable().equals(field)) {\n                    // REFACTOR: looks familiar -- isField() or something?\n                    match = true;\n                    break;\n                }\n            }\n            if (match)\n                return value;\n            // if it's a species, try looking it up with the Species object,\n            // so 4-letter codes show as names.  if that doesn't work, just show the value.\n            if (field.equals(\"species\")) {\n                // try {\n                // return Species.getName(value.toString());\n                // } catch (UnknownSpeciesException use) {\n                return value.toString();\n                // }\n            }\n            // the comments field will often have newlines in it,\n            // which render as empty boxes; replace them with spaces\n            // or something.\n            // TODO: why only the comments field?\n            if (field.equals(\"comments\"))\n                return value.toString().replace('\\n', ' ');\n            // ms-dos corina allowed \"?\" to mean \"unspecified\"\n            if (value.toString().equals(\"?\"))\n                return null;\n            // it's a valid field -- find it, and look up the string\n            MetadataTemplate.Field f = MetadataTemplate.getField(field);\n            if (f.isValidValue(value.toString()))\n                return I18n.getText(\"meta.\" + field + \".\" + value);\n            // it's an unknown value -- let's just spit it out\n            return value.toString();\n        }\n        // element = null ... something's wrong, i think.\n        return null;\n    }\n\n    // true if this file matches all of the words, with any of its visible fields.\n    // (how am i to know what's visible here?)  (pass in the list of visible fields, too?)\n    // no, better: if i pass a reference to the list-of-visible-fields with the constructor,\n    // with the price of exactly one reference, i ... oh, wait, wrong concept.\n    // i'm thinking i can change one field, implement compareTo() here, and it'll always work.\n    // i'd need a reference back to the Browser, and Browser.getSortField().\n    public boolean matches(String[] words) {\n        // foreach field f in visiblefields[] -- element.meta.values()?\n        // task: need to match across fields.\n        // strategy: append all fields together, with spaces between them.\n        StringBuffer buf = new StringBuffer();\n        // use name, modified, kind.  (don't use size, or any range view.)\n        buf.append(getName() + \" \");\n        buf.append(getModified() + \" \");\n        buf.append(getField(\"kind\") + \" \");\n        // only look at visible fields\n        // BUG: this lists all fields, not just metadata fields -- range, etc.\n        // -- this is bad because: i already put in name,mod,kind, so they get searched twice, but\n        // more importantly: this searches RANGE, etc., which i specifically don't want to search.\n        List visible = browser.getVisibleFields();\n        for (int i = 0; i < visible.size(); i++) {\n            Object value = getField((String) visible.get(i));\n            if (value == null)\n                continue;\n            if (// skip all numbers and ranges\n            value instanceof Number || value instanceof Range)\n                continue;\n            buf.append(value + \" \");\n        }\n        return Browser.matchesAny(buf.toString(), words);\n    }\n    // why didn't i just overload File?\n}\n",
		"id": "/EvoSuiteBenchmark/35_corina/src/main/java/corina/browser/Row_1Test.java",
		"test_prompt": "// Row_1Test.java\npackage corina.browser;\n\nimport corina.Element;\nimport corina.Range;\nimport corina.MetadataTemplate;\nimport corina.Species;\nimport corina.UnknownSpeciesException;\nimport corina.ui.I18n;\nimport java.io.File;\nimport java.io.IOException;\nimport java.util.List;\nimport java.util.Date;\nimport java.util.Iterator;\nimport java.util.MissingResourceException;\nimport java.awt.Image;\nimport javax.swing.Icon;\nimport javax.swing.ImageIcon;\nimport javax.swing.JTable;\nimport javax.swing.tree.DefaultTreeCellRenderer;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link Row}.\n* It contains ten unit test cases for the {@link Row#matches(String[])} method.\n*/\nclass Row_1Test {"
	},
	{
		"original_code": "// FileLength.java\npackage corina.browser;\n\nimport java.io.File;\nimport java.text.DecimalFormat;\n\n// used for sorting and displaying file lengths.\n// -- interface: stores a long, toString()s it as a file length (like \"34.5K\")\n// the length of a folder is displayed as \"--\", and sorts as the smallest-sized file.\n// javadoc me!\npublic class FileLength implements Comparable {\n\n    // the length of a file\n    public FileLength(File file) {\n        this.length = (file.isDirectory() ? -1 : file.length());\n    }\n\n    // why would you ever want this?  in exportdialog, i use it to measure\n    // the size of a buffer that will be saved later.\n    public FileLength(long length) {\n        this.length = length;\n    }\n\n    // length of this file, or -1 if it's a folder\n    private long length;\n\n    // compare, using the natural ordering for numbers\n    public int compareTo(Object o2) {\n        long x = this.length;\n        long y = ((FileLength) o2).length;\n        // (can't just say \"x-y\" because they're longs, and i need an int)\n        return (x < y ? -1 : (x == y ? 0 : +1));\n    }\n\n    // format a file's size for users, like \"34.5K\"\n    private static final char[] PREFIXES = new char[] { 'K', 'M', 'G', 'T', 'P', 'E' };\n\n    // 1 sig fig is plenty\n    private static final DecimalFormat fmt = new DecimalFormat(\"#.0\");\n\n    // if a folder, \"--\", otherwise pretty-print it, like \"10 KB\"\n    private static String format(long length) {\n        if (length < 0) {\n            // directories, now, have negative length\n            return \"--\";\n        }\n        if (length < 1024) {\n            return length + \" bytes\";\n        }\n        double b = (float) length;\n        for (int i = 0; i < PREFIXES.length; i++) {\n            b /= K;\n            if (b < K)\n                return fmt.format(b) + \" \" + PREFIXES[i] + \"B\";\n        }\n        // can't happen.\n        return \"really, really big!\";\n    }\n\n    // bytes-per-K.  OAOO.  plus, maybe somebody likes 1K=1000B, which isn't completely unreasonable.\n    private static int K = 1024;\n\n    // format it prettily.\n    public String toString() {\n        // never called before => compute and store\n        if (string == null)\n            string = format(length);\n        return string;\n    }\n\n    private String string = null;\n}\n",
		"id": "/EvoSuiteBenchmark/35_corina/src/main/java/corina/browser/FileLength.java",
		"test_prompt": "// FileLengthTest.java\npackage corina.browser;\n\nimport java.io.File;\nimport java.text.DecimalFormat;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link FileLength}.\n* It contains ten unit test cases for the {@link FileLength#compareTo(Object)} method.\n*/\nclass FileLengthTest {"
	},
	{
		"original_code": "// SearchField.java\npackage corina.browser;\n\nimport java.util.StringTokenizer;\nimport java.awt.Component;\nimport java.awt.event.KeyAdapter;\nimport java.awt.event.KeyEvent;\nimport javax.swing.JTextField;\nimport javax.swing.event.DocumentEvent;\nimport javax.swing.event.DocumentListener;\n\npublic class SearchField extends JTextField {\n\n    // reset text to \"\"\n    public void reset() {\n        setText(\"\");\n    }\n\n    // is empty?\n    public boolean isEmpty() {\n        return getText().length() == 0;\n    }\n\n    // construct new searchfield\n    public SearchField(Browser browser, Component eventTarget) {\n        super(\"\", 7);\n        // prevent it from stretching\n        setMaximumSize(getPreferredSize());\n        // call browser.dosearch() when something is typed\n        final Browser glue = browser;\n        getDocument().addDocumentListener(new DocumentListener() {\n\n            public void changedUpdate(DocumentEvent e) {\n                typed();\n            }\n\n            public void insertUpdate(DocumentEvent e) {\n                try {\n                    // if it's something typed at the end,\n                    if (e.getOffset() == e.getDocument().getLength() - 1) {\n                        char c = e.getDocument().getText(e.getOffset(), 1).charAt(0);\n                        // -- if it's a space, do nothing but BUG: it should update the status bar (\"focused\")\n                        if (c == ' ')\n                            return;\n                        // -- if it's a letter, restrict search to only things which are now visible\n                        glue.doSearchRestrict();\n                    } else {\n                        // otherwise, just run the whole search\n                        typed();\n                    }\n                } catch (javax.swing.text.BadLocationException ble) {\n                    // ignore -- can't happen\n                }\n            }\n\n            public void removeUpdate(DocumentEvent e) {\n                typed();\n            }\n\n            private void typed() {\n                glue.doSearch();\n            }\n        });\n        // pass arrow-key, etc., events on to eventTarget\n        final Component table = eventTarget;\n        addKeyListener(new KeyAdapter() {\n\n            public void keyPressed(KeyEvent e) {\n                int code = e.getKeyCode();\n                if (code == KeyEvent.VK_DOWN || code == KeyEvent.VK_UP || code == KeyEvent.VK_PAGE_UP || code == KeyEvent.VK_PAGE_DOWN || code == KeyEvent.VK_ENTER) {\n                    // focus on the table, and ...\n                    table.requestFocus();\n                    // ... pass arrow-key event to it.\n                    table.dispatchEvent(e);\n                } else if (code == KeyEvent.VK_ESCAPE) {\n                    // esc clears field.  very handy.\n                    reset();\n                    //                } else if (e.getModifiers() != 0) {\n                    //                    table.dispatchEvent(e); // for control-<number> on win32, especially\n                    //                    e.consume(); // but don't add to text field!\n                }\n            }\n        });\n    }\n\n    // get text as words, all lower-case\n    public String[] getTextAsWords() {\n        return parseIntoWords(getText().toLowerCase());\n    }\n\n    // parse |text| into an array of  words\n    // REFACTOR: StringUtils.splitBy() is very similar to this (except this trims the result)\n    private static String[] parseIntoWords(String text) {\n        StringTokenizer tok = new StringTokenizer(text, \" \");\n        int n = tok.countTokens();\n        String[] words = new String[n];\n        for (int i = 0; i < n; i++) words[i] = tok.nextToken();\n        return words;\n    }\n}\n",
		"id": "/EvoSuiteBenchmark/35_corina/src/main/java/corina/browser/SearchField.java",
		"test_prompt": "// SearchFieldTest.java\npackage corina.browser;\n\nimport java.util.StringTokenizer;\nimport java.awt.Component;\nimport java.awt.event.KeyAdapter;\nimport java.awt.event.KeyEvent;\nimport javax.swing.JTextField;\nimport javax.swing.event.DocumentEvent;\nimport javax.swing.event.DocumentListener;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link SearchField}.\n* It contains ten unit test cases for the {@link SearchField#isEmpty()} method.\n*/\nclass SearchFieldTest {"
	},
	{
		"original_code": "// LabelSet.java\npackage corina.map;\n\nimport corina.site.Site;\nimport corina.site.SiteDB;\nimport java.util.Iterator;\nimport java.util.Set;\nimport java.util.List;\nimport java.util.HashSet;\n\n/**\n *   A way to organize Sites to draw on the map.\n *\n *   <p>A LabelSet object will keep track of:</p>\n *   <ul>\n *     <li>which sites are visible\n *     <li>which sites are selected\n *     <li>which groups of sites are in the same location on the map\n *     <li>for each location (site or group of sites), where the label should be drawn\n *   </ul>\n *\n *   <h2>Left to do:</h2>\n *   <ul>\n *     <li>Write the selection stuff\n *     <li>Write the offset stuff\n *     <li>Move getLocations() to Site?  (Law of Demeter.)  Or better: make it getVisibleLocations().\n *   </ul>\n *\n *   @see corina.site.Site\n *\n *   @author Ken Harris &lt;kbh7 <i style=\"color: gray\">at</i> cornell <i style=\"color: gray\">dot</i> edu&gt;\n *   @version $Id: LabelSet.java,v 1.5 2006/06/20 18:31:55 lucasmo Exp $\n */\npublic class LabelSet {\n\n    /* DOCUMENT ME! -- does this need to be its own class? */\n    public static class Offset {\n\n        // angle, in ???\n        public float angle = 0;\n\n        // distance, in ???\n        public float distance = 0;\n    }\n\n    /**\n     * Make a new LabelSet.\n     */\n    public LabelSet() {\n        // WRITEME: what's a default label set?\n        // everything visible\n        showAllSites();\n    }\n\n    public LabelSet(List sitelist) {\n        Iterator all = sitelist.iterator();\n        while (all.hasNext()) {\n            Site site = (Site) all.next();\n            if (site.getLocation() != null) {\n                visibleSites.add(site);\n                visibleLocations.add(site.getLocation());\n            }\n        }\n    }\n\n    /**\n     *       Get all of the Locations used by Sites.\n     *\n     *       <p>If you're an SQL junkie, this is pretty much like\n     *       <code>SELECT location FROM sites GROUP BY location</code>\n     *       (I think).</p>\n     *\n     *       @return an Iterator for all of the Locations\n     */\n    public Iterator getLocations() {\n        /*\n        // TODO: WRITEME\n        return new Iterator() {\n            public boolean hasNext() {\n                // TODO: WRITEME\n                return false;\n            }\n            public Object next() {\n                // TODO: WRITEME\n                return null;\n            }\n            public void remove() {\n                // TODO: WRITEME\n            }\n        };\n        */\n        return visibleLocations.iterator();\n    }\n\n    //\n    // VISIBILITY\n    //\n    // TODO: default should be all, not none, right?\n    private Set visibleSites = new HashSet();\n\n    private Set visibleLocations = new HashSet();\n\n    /**\n     *       Is this site visible?\n     *\n     *       @param site the Site to check\n     *       @return true, if the site is visible, else false\n     */\n    public boolean isVisible(Site site) {\n        return visibleSites.contains(site);\n    }\n\n    /**\n     *       Change a site's visibility.\n     *\n     *       @param site the Site to change\n     *       @param visible if true, set it to visible; if false, invisible\n     */\n    public void setVisible(Site site, boolean visible) {\n        if (visible) {\n            visibleSites.add(site);\n            visibleLocations.add(site.getLocation());\n        } else {\n            visibleSites.remove(site);\n            visibleLocations.remove(site.getLocation());\n        }\n    }\n\n    /**\n     *       Count the number of visible sites.\n     *\n     *       @return the number of visible sites\n     */\n    public int countVisibleSites() {\n        return visibleSites.size();\n    }\n\n    public void showAllSites() {\n        // add all sites from the site db which have a location.\n        // (if i didn't check if it had a location, the user would\n        // see sites becoming checked that the user couldn't check\n        // himself, which would be weird -- but SitesLayer double-checks\n        // anyway, so it wouldn't really hurt anything.)\n        // since it's a set, so it doesn't matter that some of these\n        // are probably already there.\n        Iterator all = SiteDB.getSiteDB().sites.iterator();\n        while (all.hasNext()) {\n            Site site = (Site) all.next();\n            if (site.getLocation() != null && site.getLocation().valid()) {\n                visibleSites.add(site);\n                visibleLocations.add(site.getLocation());\n            }\n        }\n    }\n\n    public void hideAllSites() {\n        visibleSites.clear();\n        visibleLocations.clear();\n    }\n\n    public void rehashLocations() {\n        visibleLocations.clear();\n        Iterator iter = visibleSites.iterator();\n        while (iter.hasNext()) {\n            visibleLocations.add(((Site) iter.next()).getLocation());\n        }\n    }\n\n    //\n    // SELECTION\n    //\n    // TODO: default should be all, not none, right?\n    private Set selectedSites = new HashSet();\n\n    /**\n     *        Is this site selected?\n     *\n     *     @param site the Site to check\n     *     @return true, if the site is visible, else false\n     */\n    public boolean isSelected(Site site) {\n        return selectedSites.contains(site);\n    }\n\n    /**\n     *       Select or deselect a site.\n     *\n     *       @param site the Site to change\n     *       @param selected if true, select it; if false, deselect it\n     */\n    public void setSelected(Site site, boolean selected) {\n        if (selected)\n            selectedSites.add(site);\n        else\n            selectedSites.remove(site);\n    }\n\n    /**\n     *        Count the number of selected sites.\n     *\n     *       @return the number of selected sites\n     */\n    public int countSelectedSites() {\n        return selectedSites.size();\n    }\n\n    public void selectAllSites() {\n        Iterator all = SiteDB.getSiteDB().sites.iterator();\n        while (all.hasNext()) {\n            Site site = (Site) all.next();\n            if (site.getLocation() != null)\n                selectedSites.add(site);\n        }\n    }\n\n    public void deselectAllSites() {\n        selectedSites.clear();\n    }\n\n    public Iterator getSelectedSites() {\n        // BUG?: does this iterator have a remove() method?\n        return selectedSites.iterator();\n    }\n}\n",
		"id": "/EvoSuiteBenchmark/35_corina/src/main/java/corina/map/LabelSet_0Test.java",
		"test_prompt": "// LabelSet_0Test.java\npackage corina.map;\n\nimport corina.site.Site;\nimport corina.site.SiteDB;\nimport java.util.Iterator;\nimport java.util.Set;\nimport java.util.List;\nimport java.util.HashSet;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link LabelSet}.\n* It contains ten unit test cases for the {@link LabelSet#isVisible(Site)} method.\n*/\nclass LabelSet_0Test {"
	},
	{
		"original_code": "// LabelSet.java\npackage corina.map;\n\nimport corina.site.Site;\nimport corina.site.SiteDB;\nimport java.util.Iterator;\nimport java.util.Set;\nimport java.util.List;\nimport java.util.HashSet;\n\n/**\n *   A way to organize Sites to draw on the map.\n *\n *   <p>A LabelSet object will keep track of:</p>\n *   <ul>\n *     <li>which sites are visible\n *     <li>which sites are selected\n *     <li>which groups of sites are in the same location on the map\n *     <li>for each location (site or group of sites), where the label should be drawn\n *   </ul>\n *\n *   <h2>Left to do:</h2>\n *   <ul>\n *     <li>Write the selection stuff\n *     <li>Write the offset stuff\n *     <li>Move getLocations() to Site?  (Law of Demeter.)  Or better: make it getVisibleLocations().\n *   </ul>\n *\n *   @see corina.site.Site\n *\n *   @author Ken Harris &lt;kbh7 <i style=\"color: gray\">at</i> cornell <i style=\"color: gray\">dot</i> edu&gt;\n *   @version $Id: LabelSet.java,v 1.5 2006/06/20 18:31:55 lucasmo Exp $\n */\npublic class LabelSet {\n\n    /* DOCUMENT ME! -- does this need to be its own class? */\n    public static class Offset {\n\n        // angle, in ???\n        public float angle = 0;\n\n        // distance, in ???\n        public float distance = 0;\n    }\n\n    /**\n     * Make a new LabelSet.\n     */\n    public LabelSet() {\n        // WRITEME: what's a default label set?\n        // everything visible\n        showAllSites();\n    }\n\n    public LabelSet(List sitelist) {\n        Iterator all = sitelist.iterator();\n        while (all.hasNext()) {\n            Site site = (Site) all.next();\n            if (site.getLocation() != null) {\n                visibleSites.add(site);\n                visibleLocations.add(site.getLocation());\n            }\n        }\n    }\n\n    /**\n     *       Get all of the Locations used by Sites.\n     *\n     *       <p>If you're an SQL junkie, this is pretty much like\n     *       <code>SELECT location FROM sites GROUP BY location</code>\n     *       (I think).</p>\n     *\n     *       @return an Iterator for all of the Locations\n     */\n    public Iterator getLocations() {\n        /*\n        // TODO: WRITEME\n        return new Iterator() {\n            public boolean hasNext() {\n                // TODO: WRITEME\n                return false;\n            }\n            public Object next() {\n                // TODO: WRITEME\n                return null;\n            }\n            public void remove() {\n                // TODO: WRITEME\n            }\n        };\n        */\n        return visibleLocations.iterator();\n    }\n\n    //\n    // VISIBILITY\n    //\n    // TODO: default should be all, not none, right?\n    private Set visibleSites = new HashSet();\n\n    private Set visibleLocations = new HashSet();\n\n    /**\n     *       Is this site visible?\n     *\n     *       @param site the Site to check\n     *       @return true, if the site is visible, else false\n     */\n    public boolean isVisible(Site site) {\n        return visibleSites.contains(site);\n    }\n\n    /**\n     *       Change a site's visibility.\n     *\n     *       @param site the Site to change\n     *       @param visible if true, set it to visible; if false, invisible\n     */\n    public void setVisible(Site site, boolean visible) {\n        if (visible) {\n            visibleSites.add(site);\n            visibleLocations.add(site.getLocation());\n        } else {\n            visibleSites.remove(site);\n            visibleLocations.remove(site.getLocation());\n        }\n    }\n\n    /**\n     *       Count the number of visible sites.\n     *\n     *       @return the number of visible sites\n     */\n    public int countVisibleSites() {\n        return visibleSites.size();\n    }\n\n    public void showAllSites() {\n        // add all sites from the site db which have a location.\n        // (if i didn't check if it had a location, the user would\n        // see sites becoming checked that the user couldn't check\n        // himself, which would be weird -- but SitesLayer double-checks\n        // anyway, so it wouldn't really hurt anything.)\n        // since it's a set, so it doesn't matter that some of these\n        // are probably already there.\n        Iterator all = SiteDB.getSiteDB().sites.iterator();\n        while (all.hasNext()) {\n            Site site = (Site) all.next();\n            if (site.getLocation() != null && site.getLocation().valid()) {\n                visibleSites.add(site);\n                visibleLocations.add(site.getLocation());\n            }\n        }\n    }\n\n    public void hideAllSites() {\n        visibleSites.clear();\n        visibleLocations.clear();\n    }\n\n    public void rehashLocations() {\n        visibleLocations.clear();\n        Iterator iter = visibleSites.iterator();\n        while (iter.hasNext()) {\n            visibleLocations.add(((Site) iter.next()).getLocation());\n        }\n    }\n\n    //\n    // SELECTION\n    //\n    // TODO: default should be all, not none, right?\n    private Set selectedSites = new HashSet();\n\n    /**\n     *        Is this site selected?\n     *\n     *     @param site the Site to check\n     *     @return true, if the site is visible, else false\n     */\n    public boolean isSelected(Site site) {\n        return selectedSites.contains(site);\n    }\n\n    /**\n     *       Select or deselect a site.\n     *\n     *       @param site the Site to change\n     *       @param selected if true, select it; if false, deselect it\n     */\n    public void setSelected(Site site, boolean selected) {\n        if (selected)\n            selectedSites.add(site);\n        else\n            selectedSites.remove(site);\n    }\n\n    /**\n     *        Count the number of selected sites.\n     *\n     *       @return the number of selected sites\n     */\n    public int countSelectedSites() {\n        return selectedSites.size();\n    }\n\n    public void selectAllSites() {\n        Iterator all = SiteDB.getSiteDB().sites.iterator();\n        while (all.hasNext()) {\n            Site site = (Site) all.next();\n            if (site.getLocation() != null)\n                selectedSites.add(site);\n        }\n    }\n\n    public void deselectAllSites() {\n        selectedSites.clear();\n    }\n\n    public Iterator getSelectedSites() {\n        // BUG?: does this iterator have a remove() method?\n        return selectedSites.iterator();\n    }\n}\n",
		"id": "/EvoSuiteBenchmark/35_corina/src/main/java/corina/map/LabelSet_1Test.java",
		"test_prompt": "// LabelSet_1Test.java\npackage corina.map;\n\nimport corina.site.Site;\nimport corina.site.SiteDB;\nimport java.util.Iterator;\nimport java.util.Set;\nimport java.util.List;\nimport java.util.HashSet;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link LabelSet}.\n* It contains ten unit test cases for the {@link LabelSet#countVisibleSites()} method.\n*/\nclass LabelSet_1Test {"
	},
	{
		"original_code": "// LabelSet.java\npackage corina.map;\n\nimport corina.site.Site;\nimport corina.site.SiteDB;\nimport java.util.Iterator;\nimport java.util.Set;\nimport java.util.List;\nimport java.util.HashSet;\n\n/**\n *   A way to organize Sites to draw on the map.\n *\n *   <p>A LabelSet object will keep track of:</p>\n *   <ul>\n *     <li>which sites are visible\n *     <li>which sites are selected\n *     <li>which groups of sites are in the same location on the map\n *     <li>for each location (site or group of sites), where the label should be drawn\n *   </ul>\n *\n *   <h2>Left to do:</h2>\n *   <ul>\n *     <li>Write the selection stuff\n *     <li>Write the offset stuff\n *     <li>Move getLocations() to Site?  (Law of Demeter.)  Or better: make it getVisibleLocations().\n *   </ul>\n *\n *   @see corina.site.Site\n *\n *   @author Ken Harris &lt;kbh7 <i style=\"color: gray\">at</i> cornell <i style=\"color: gray\">dot</i> edu&gt;\n *   @version $Id: LabelSet.java,v 1.5 2006/06/20 18:31:55 lucasmo Exp $\n */\npublic class LabelSet {\n\n    /* DOCUMENT ME! -- does this need to be its own class? */\n    public static class Offset {\n\n        // angle, in ???\n        public float angle = 0;\n\n        // distance, in ???\n        public float distance = 0;\n    }\n\n    /**\n     * Make a new LabelSet.\n     */\n    public LabelSet() {\n        // WRITEME: what's a default label set?\n        // everything visible\n        showAllSites();\n    }\n\n    public LabelSet(List sitelist) {\n        Iterator all = sitelist.iterator();\n        while (all.hasNext()) {\n            Site site = (Site) all.next();\n            if (site.getLocation() != null) {\n                visibleSites.add(site);\n                visibleLocations.add(site.getLocation());\n            }\n        }\n    }\n\n    /**\n     *       Get all of the Locations used by Sites.\n     *\n     *       <p>If you're an SQL junkie, this is pretty much like\n     *       <code>SELECT location FROM sites GROUP BY location</code>\n     *       (I think).</p>\n     *\n     *       @return an Iterator for all of the Locations\n     */\n    public Iterator getLocations() {\n        /*\n        // TODO: WRITEME\n        return new Iterator() {\n            public boolean hasNext() {\n                // TODO: WRITEME\n                return false;\n            }\n            public Object next() {\n                // TODO: WRITEME\n                return null;\n            }\n            public void remove() {\n                // TODO: WRITEME\n            }\n        };\n        */\n        return visibleLocations.iterator();\n    }\n\n    //\n    // VISIBILITY\n    //\n    // TODO: default should be all, not none, right?\n    private Set visibleSites = new HashSet();\n\n    private Set visibleLocations = new HashSet();\n\n    /**\n     *       Is this site visible?\n     *\n     *       @param site the Site to check\n     *       @return true, if the site is visible, else false\n     */\n    public boolean isVisible(Site site) {\n        return visibleSites.contains(site);\n    }\n\n    /**\n     *       Change a site's visibility.\n     *\n     *       @param site the Site to change\n     *       @param visible if true, set it to visible; if false, invisible\n     */\n    public void setVisible(Site site, boolean visible) {\n        if (visible) {\n            visibleSites.add(site);\n            visibleLocations.add(site.getLocation());\n        } else {\n            visibleSites.remove(site);\n            visibleLocations.remove(site.getLocation());\n        }\n    }\n\n    /**\n     *       Count the number of visible sites.\n     *\n     *       @return the number of visible sites\n     */\n    public int countVisibleSites() {\n        return visibleSites.size();\n    }\n\n    public void showAllSites() {\n        // add all sites from the site db which have a location.\n        // (if i didn't check if it had a location, the user would\n        // see sites becoming checked that the user couldn't check\n        // himself, which would be weird -- but SitesLayer double-checks\n        // anyway, so it wouldn't really hurt anything.)\n        // since it's a set, so it doesn't matter that some of these\n        // are probably already there.\n        Iterator all = SiteDB.getSiteDB().sites.iterator();\n        while (all.hasNext()) {\n            Site site = (Site) all.next();\n            if (site.getLocation() != null && site.getLocation().valid()) {\n                visibleSites.add(site);\n                visibleLocations.add(site.getLocation());\n            }\n        }\n    }\n\n    public void hideAllSites() {\n        visibleSites.clear();\n        visibleLocations.clear();\n    }\n\n    public void rehashLocations() {\n        visibleLocations.clear();\n        Iterator iter = visibleSites.iterator();\n        while (iter.hasNext()) {\n            visibleLocations.add(((Site) iter.next()).getLocation());\n        }\n    }\n\n    //\n    // SELECTION\n    //\n    // TODO: default should be all, not none, right?\n    private Set selectedSites = new HashSet();\n\n    /**\n     *        Is this site selected?\n     *\n     *     @param site the Site to check\n     *     @return true, if the site is visible, else false\n     */\n    public boolean isSelected(Site site) {\n        return selectedSites.contains(site);\n    }\n\n    /**\n     *       Select or deselect a site.\n     *\n     *       @param site the Site to change\n     *       @param selected if true, select it; if false, deselect it\n     */\n    public void setSelected(Site site, boolean selected) {\n        if (selected)\n            selectedSites.add(site);\n        else\n            selectedSites.remove(site);\n    }\n\n    /**\n     *        Count the number of selected sites.\n     *\n     *       @return the number of selected sites\n     */\n    public int countSelectedSites() {\n        return selectedSites.size();\n    }\n\n    public void selectAllSites() {\n        Iterator all = SiteDB.getSiteDB().sites.iterator();\n        while (all.hasNext()) {\n            Site site = (Site) all.next();\n            if (site.getLocation() != null)\n                selectedSites.add(site);\n        }\n    }\n\n    public void deselectAllSites() {\n        selectedSites.clear();\n    }\n\n    public Iterator getSelectedSites() {\n        // BUG?: does this iterator have a remove() method?\n        return selectedSites.iterator();\n    }\n}\n",
		"id": "/EvoSuiteBenchmark/35_corina/src/main/java/corina/map/LabelSet_2Test.java",
		"test_prompt": "// LabelSet_2Test.java\npackage corina.map;\n\nimport corina.site.Site;\nimport corina.site.SiteDB;\nimport java.util.Iterator;\nimport java.util.Set;\nimport java.util.List;\nimport java.util.HashSet;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link LabelSet}.\n* It contains ten unit test cases for the {@link LabelSet#isSelected(Site)} method.\n*/\nclass LabelSet_2Test {"
	},
	{
		"original_code": "// LabelSet.java\npackage corina.map;\n\nimport corina.site.Site;\nimport corina.site.SiteDB;\nimport java.util.Iterator;\nimport java.util.Set;\nimport java.util.List;\nimport java.util.HashSet;\n\n/**\n *   A way to organize Sites to draw on the map.\n *\n *   <p>A LabelSet object will keep track of:</p>\n *   <ul>\n *     <li>which sites are visible\n *     <li>which sites are selected\n *     <li>which groups of sites are in the same location on the map\n *     <li>for each location (site or group of sites), where the label should be drawn\n *   </ul>\n *\n *   <h2>Left to do:</h2>\n *   <ul>\n *     <li>Write the selection stuff\n *     <li>Write the offset stuff\n *     <li>Move getLocations() to Site?  (Law of Demeter.)  Or better: make it getVisibleLocations().\n *   </ul>\n *\n *   @see corina.site.Site\n *\n *   @author Ken Harris &lt;kbh7 <i style=\"color: gray\">at</i> cornell <i style=\"color: gray\">dot</i> edu&gt;\n *   @version $Id: LabelSet.java,v 1.5 2006/06/20 18:31:55 lucasmo Exp $\n */\npublic class LabelSet {\n\n    /* DOCUMENT ME! -- does this need to be its own class? */\n    public static class Offset {\n\n        // angle, in ???\n        public float angle = 0;\n\n        // distance, in ???\n        public float distance = 0;\n    }\n\n    /**\n     * Make a new LabelSet.\n     */\n    public LabelSet() {\n        // WRITEME: what's a default label set?\n        // everything visible\n        showAllSites();\n    }\n\n    public LabelSet(List sitelist) {\n        Iterator all = sitelist.iterator();\n        while (all.hasNext()) {\n            Site site = (Site) all.next();\n            if (site.getLocation() != null) {\n                visibleSites.add(site);\n                visibleLocations.add(site.getLocation());\n            }\n        }\n    }\n\n    /**\n     *       Get all of the Locations used by Sites.\n     *\n     *       <p>If you're an SQL junkie, this is pretty much like\n     *       <code>SELECT location FROM sites GROUP BY location</code>\n     *       (I think).</p>\n     *\n     *       @return an Iterator for all of the Locations\n     */\n    public Iterator getLocations() {\n        /*\n        // TODO: WRITEME\n        return new Iterator() {\n            public boolean hasNext() {\n                // TODO: WRITEME\n                return false;\n            }\n            public Object next() {\n                // TODO: WRITEME\n                return null;\n            }\n            public void remove() {\n                // TODO: WRITEME\n            }\n        };\n        */\n        return visibleLocations.iterator();\n    }\n\n    //\n    // VISIBILITY\n    //\n    // TODO: default should be all, not none, right?\n    private Set visibleSites = new HashSet();\n\n    private Set visibleLocations = new HashSet();\n\n    /**\n     *       Is this site visible?\n     *\n     *       @param site the Site to check\n     *       @return true, if the site is visible, else false\n     */\n    public boolean isVisible(Site site) {\n        return visibleSites.contains(site);\n    }\n\n    /**\n     *       Change a site's visibility.\n     *\n     *       @param site the Site to change\n     *       @param visible if true, set it to visible; if false, invisible\n     */\n    public void setVisible(Site site, boolean visible) {\n        if (visible) {\n            visibleSites.add(site);\n            visibleLocations.add(site.getLocation());\n        } else {\n            visibleSites.remove(site);\n            visibleLocations.remove(site.getLocation());\n        }\n    }\n\n    /**\n     *       Count the number of visible sites.\n     *\n     *       @return the number of visible sites\n     */\n    public int countVisibleSites() {\n        return visibleSites.size();\n    }\n\n    public void showAllSites() {\n        // add all sites from the site db which have a location.\n        // (if i didn't check if it had a location, the user would\n        // see sites becoming checked that the user couldn't check\n        // himself, which would be weird -- but SitesLayer double-checks\n        // anyway, so it wouldn't really hurt anything.)\n        // since it's a set, so it doesn't matter that some of these\n        // are probably already there.\n        Iterator all = SiteDB.getSiteDB().sites.iterator();\n        while (all.hasNext()) {\n            Site site = (Site) all.next();\n            if (site.getLocation() != null && site.getLocation().valid()) {\n                visibleSites.add(site);\n                visibleLocations.add(site.getLocation());\n            }\n        }\n    }\n\n    public void hideAllSites() {\n        visibleSites.clear();\n        visibleLocations.clear();\n    }\n\n    public void rehashLocations() {\n        visibleLocations.clear();\n        Iterator iter = visibleSites.iterator();\n        while (iter.hasNext()) {\n            visibleLocations.add(((Site) iter.next()).getLocation());\n        }\n    }\n\n    //\n    // SELECTION\n    //\n    // TODO: default should be all, not none, right?\n    private Set selectedSites = new HashSet();\n\n    /**\n     *        Is this site selected?\n     *\n     *     @param site the Site to check\n     *     @return true, if the site is visible, else false\n     */\n    public boolean isSelected(Site site) {\n        return selectedSites.contains(site);\n    }\n\n    /**\n     *       Select or deselect a site.\n     *\n     *       @param site the Site to change\n     *       @param selected if true, select it; if false, deselect it\n     */\n    public void setSelected(Site site, boolean selected) {\n        if (selected)\n            selectedSites.add(site);\n        else\n            selectedSites.remove(site);\n    }\n\n    /**\n     *        Count the number of selected sites.\n     *\n     *       @return the number of selected sites\n     */\n    public int countSelectedSites() {\n        return selectedSites.size();\n    }\n\n    public void selectAllSites() {\n        Iterator all = SiteDB.getSiteDB().sites.iterator();\n        while (all.hasNext()) {\n            Site site = (Site) all.next();\n            if (site.getLocation() != null)\n                selectedSites.add(site);\n        }\n    }\n\n    public void deselectAllSites() {\n        selectedSites.clear();\n    }\n\n    public Iterator getSelectedSites() {\n        // BUG?: does this iterator have a remove() method?\n        return selectedSites.iterator();\n    }\n}\n",
		"id": "/EvoSuiteBenchmark/35_corina/src/main/java/corina/map/LabelSet_3Test.java",
		"test_prompt": "// LabelSet_3Test.java\npackage corina.map;\n\nimport corina.site.Site;\nimport corina.site.SiteDB;\nimport java.util.Iterator;\nimport java.util.Set;\nimport java.util.List;\nimport java.util.HashSet;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link LabelSet}.\n* It contains ten unit test cases for the {@link LabelSet#countSelectedSites()} method.\n*/\nclass LabelSet_3Test {"
	},
	{
		"original_code": "// Matrix.java\n//\n// This file is part of Corina.\n//\n// Corina is free software; you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation; either version 2 of the License, or\n// (at your option) any later version.\n//\n// Corina is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Corina; if not, write to the Free Software\n// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n//\n// Copyright 2001 Ken Harris <kbh7@cornell.edu>\n//\npackage corina.map;\n\n/*\n TODO:\n - javadoc: multiply(), class\n - figure out if they should be floats, or doubles.  don't mix them.\n - write some unit tests for this class.\n*/\n// BETTER: instead of making these methods public, why not just make rotate(vector,axis,angle) public?\n// that way, i can re-use the matrices safely, and lusers won't need to know how i do rotations.\n/**\n *   Matrix math routines.\n *\n * <p>\n * WRITEME: are they for floats, or doubles?  or either?  do i care?  be consistent!\n * WRITEME: author, version, etc.\n */\npublic class Matrix {\n\n    // don't instantiate me\n    private Matrix() {\n    }\n\n    /**\n     *       Make an x-axis rotation matrix.  If M is the x-axis rotation matrix,\n     *       and v is a 3-vector, then v'=Mv is the vector v rotated around the x-axis\n     *       by the specified angle.\n     *\n     *       @param angle the angle to rotate by, in degrees\n     *       @return a 3x3 rotation matrix\n     */\n    public static double[][] makeRotateX(float angle) {\n        double radians = Math.toRadians(angle);\n        double c = Math.cos(radians);\n        double s = Math.sin(radians);\n        return new double[][] { { 1, 0, 0 }, { 0, c, s }, { 0, -s, c } };\n        // was: {1,0,0},{0,c,-s},{0,s,c}, but that looked buggy to me -- tell the rmap guy?\n        // (he never responded to my first bug report)\n    }\n\n    /**\n     *       Make an y-axis rotation matrix.  If M is the y-axis rotation matrix,\n     *       and v is a 3-vector, then v'=Mv is the vector v rotated around the y-axis\n     *       by the specified angle.\n     *\n     *       @param angle the angle to rotate by, in degrees\n     *       @return a 3x3 rotation matrix\n     */\n    public static double[][] makeRotateY(float deg) {\n        double rad = Math.toRadians(deg);\n        double c = Math.cos(rad);\n        double s = Math.sin(rad);\n        return new double[][] { { c, 0, s }, { 0, 1, 0 }, { -s, 0, c } };\n    }\n\n    /**\n     *       Make an z-axis rotation matrix.  If M is the z-axis rotation matrix,\n     *       and v is a 3-vector, then v'=Mv is the vector v rotated around the z-axis\n     *       by the specified angle.\n     *\n     *       @param angle the angle to rotate by, in degrees\n     *       @return a 3x3 rotation matrix\n     */\n    public static double[][] makeRotateZ(float deg) {\n        double rad = Math.toRadians(deg);\n        double c = Math.cos(rad);\n        double s = Math.sin(rad);\n        return new double[][] { { c, s, 0 }, { -s, c, 0 }, { 0, 0, 1 } };\n    }\n\n    /**\n     *       Multiply two matrices.  Inputs are 2-dimensional arrays of\n     *       doubles, as is the output.  The output matrix is created by\n     *       this method.\n     *\n     *       <p><b>Assumes</b> the matrices are rectangular.</p>\n     *\n     *       @param A the first matrix to multiply\n     *       @param B the second matrix to multiply\n     *       @return the product of A and B\n     */\n    public static double[][] multiply(double[][] a, double[][] b) {\n        // verify sizes: common dimension\n        if (a[0].length != b.length)\n            throw new IllegalArgumentException();\n        int r = b.length;\n        // ASSUMES: matrices are rectangular\n        // compute result size\n        int m = a.length;\n        int n = b[0].length;\n        // all zeros\n        double[][] c = new double[m][n];\n        for (int i = 0; i < m; i++) for (int j = 0; j < n; j++) for (int k = 0; k < r; k++) c[i][j] += a[i][k] * b[k][j];\n        return c;\n    }\n\n    /**\n     *       Scale all entries of a matrix by a factor.  Operates destructively on the matrix in-place.\n     *\n     *       @param matrix the matrix to scale\n     *       @param factor the scaling factor\n     */\n    public static void scale(double[][] matrix, float factor) {\n        for (int i = 0; i < matrix.length; i++) for (int j = 0; j < matrix[i].length; j++) matrix[i][j] *= factor;\n    }\n}\n",
		"id": "/EvoSuiteBenchmark/35_corina/src/main/java/corina/map/Matrix_0Test.java",
		"test_prompt": "// Matrix_0Test.java\n// This file is part of Corina.\n//\n// Corina is free software; you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation; either version 2 of the License, or\n// (at your option) any later version.\n//\n// Corina is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Corina; if not, write to the Free Software\n// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n//\n// Copyright 2001 Ken Harris <kbh7@cornell.edu>\n//\npackage corina.map;\n\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link Matrix}.\n* It contains ten unit test cases for the {@link Matrix#makeRotateX(float)} method.\n*/\nclass Matrix_0Test {"
	},
	{
		"original_code": "// Matrix.java\n//\n// This file is part of Corina.\n//\n// Corina is free software; you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation; either version 2 of the License, or\n// (at your option) any later version.\n//\n// Corina is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Corina; if not, write to the Free Software\n// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n//\n// Copyright 2001 Ken Harris <kbh7@cornell.edu>\n//\npackage corina.map;\n\n/*\n TODO:\n - javadoc: multiply(), class\n - figure out if they should be floats, or doubles.  don't mix them.\n - write some unit tests for this class.\n*/\n// BETTER: instead of making these methods public, why not just make rotate(vector,axis,angle) public?\n// that way, i can re-use the matrices safely, and lusers won't need to know how i do rotations.\n/**\n *   Matrix math routines.\n *\n * <p>\n * WRITEME: are they for floats, or doubles?  or either?  do i care?  be consistent!\n * WRITEME: author, version, etc.\n */\npublic class Matrix {\n\n    // don't instantiate me\n    private Matrix() {\n    }\n\n    /**\n     *       Make an x-axis rotation matrix.  If M is the x-axis rotation matrix,\n     *       and v is a 3-vector, then v'=Mv is the vector v rotated around the x-axis\n     *       by the specified angle.\n     *\n     *       @param angle the angle to rotate by, in degrees\n     *       @return a 3x3 rotation matrix\n     */\n    public static double[][] makeRotateX(float angle) {\n        double radians = Math.toRadians(angle);\n        double c = Math.cos(radians);\n        double s = Math.sin(radians);\n        return new double[][] { { 1, 0, 0 }, { 0, c, s }, { 0, -s, c } };\n        // was: {1,0,0},{0,c,-s},{0,s,c}, but that looked buggy to me -- tell the rmap guy?\n        // (he never responded to my first bug report)\n    }\n\n    /**\n     *       Make an y-axis rotation matrix.  If M is the y-axis rotation matrix,\n     *       and v is a 3-vector, then v'=Mv is the vector v rotated around the y-axis\n     *       by the specified angle.\n     *\n     *       @param angle the angle to rotate by, in degrees\n     *       @return a 3x3 rotation matrix\n     */\n    public static double[][] makeRotateY(float deg) {\n        double rad = Math.toRadians(deg);\n        double c = Math.cos(rad);\n        double s = Math.sin(rad);\n        return new double[][] { { c, 0, s }, { 0, 1, 0 }, { -s, 0, c } };\n    }\n\n    /**\n     *       Make an z-axis rotation matrix.  If M is the z-axis rotation matrix,\n     *       and v is a 3-vector, then v'=Mv is the vector v rotated around the z-axis\n     *       by the specified angle.\n     *\n     *       @param angle the angle to rotate by, in degrees\n     *       @return a 3x3 rotation matrix\n     */\n    public static double[][] makeRotateZ(float deg) {\n        double rad = Math.toRadians(deg);\n        double c = Math.cos(rad);\n        double s = Math.sin(rad);\n        return new double[][] { { c, s, 0 }, { -s, c, 0 }, { 0, 0, 1 } };\n    }\n\n    /**\n     *       Multiply two matrices.  Inputs are 2-dimensional arrays of\n     *       doubles, as is the output.  The output matrix is created by\n     *       this method.\n     *\n     *       <p><b>Assumes</b> the matrices are rectangular.</p>\n     *\n     *       @param A the first matrix to multiply\n     *       @param B the second matrix to multiply\n     *       @return the product of A and B\n     */\n    public static double[][] multiply(double[][] a, double[][] b) {\n        // verify sizes: common dimension\n        if (a[0].length != b.length)\n            throw new IllegalArgumentException();\n        int r = b.length;\n        // ASSUMES: matrices are rectangular\n        // compute result size\n        int m = a.length;\n        int n = b[0].length;\n        // all zeros\n        double[][] c = new double[m][n];\n        for (int i = 0; i < m; i++) for (int j = 0; j < n; j++) for (int k = 0; k < r; k++) c[i][j] += a[i][k] * b[k][j];\n        return c;\n    }\n\n    /**\n     *       Scale all entries of a matrix by a factor.  Operates destructively on the matrix in-place.\n     *\n     *       @param matrix the matrix to scale\n     *       @param factor the scaling factor\n     */\n    public static void scale(double[][] matrix, float factor) {\n        for (int i = 0; i < matrix.length; i++) for (int j = 0; j < matrix[i].length; j++) matrix[i][j] *= factor;\n    }\n}\n",
		"id": "/EvoSuiteBenchmark/35_corina/src/main/java/corina/map/Matrix_1Test.java",
		"test_prompt": "// Matrix_1Test.java\n// This file is part of Corina.\n//\n// Corina is free software; you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation; either version 2 of the License, or\n// (at your option) any later version.\n//\n// Corina is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Corina; if not, write to the Free Software\n// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n//\n// Copyright 2001 Ken Harris <kbh7@cornell.edu>\n//\npackage corina.map;\n\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link Matrix}.\n* It contains ten unit test cases for the {@link Matrix#makeRotateY(float)} method.\n*/\nclass Matrix_1Test {"
	},
	{
		"original_code": "// Matrix.java\n//\n// This file is part of Corina.\n//\n// Corina is free software; you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation; either version 2 of the License, or\n// (at your option) any later version.\n//\n// Corina is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Corina; if not, write to the Free Software\n// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n//\n// Copyright 2001 Ken Harris <kbh7@cornell.edu>\n//\npackage corina.map;\n\n/*\n TODO:\n - javadoc: multiply(), class\n - figure out if they should be floats, or doubles.  don't mix them.\n - write some unit tests for this class.\n*/\n// BETTER: instead of making these methods public, why not just make rotate(vector,axis,angle) public?\n// that way, i can re-use the matrices safely, and lusers won't need to know how i do rotations.\n/**\n *   Matrix math routines.\n *\n * <p>\n * WRITEME: are they for floats, or doubles?  or either?  do i care?  be consistent!\n * WRITEME: author, version, etc.\n */\npublic class Matrix {\n\n    // don't instantiate me\n    private Matrix() {\n    }\n\n    /**\n     *       Make an x-axis rotation matrix.  If M is the x-axis rotation matrix,\n     *       and v is a 3-vector, then v'=Mv is the vector v rotated around the x-axis\n     *       by the specified angle.\n     *\n     *       @param angle the angle to rotate by, in degrees\n     *       @return a 3x3 rotation matrix\n     */\n    public static double[][] makeRotateX(float angle) {\n        double radians = Math.toRadians(angle);\n        double c = Math.cos(radians);\n        double s = Math.sin(radians);\n        return new double[][] { { 1, 0, 0 }, { 0, c, s }, { 0, -s, c } };\n        // was: {1,0,0},{0,c,-s},{0,s,c}, but that looked buggy to me -- tell the rmap guy?\n        // (he never responded to my first bug report)\n    }\n\n    /**\n     *       Make an y-axis rotation matrix.  If M is the y-axis rotation matrix,\n     *       and v is a 3-vector, then v'=Mv is the vector v rotated around the y-axis\n     *       by the specified angle.\n     *\n     *       @param angle the angle to rotate by, in degrees\n     *       @return a 3x3 rotation matrix\n     */\n    public static double[][] makeRotateY(float deg) {\n        double rad = Math.toRadians(deg);\n        double c = Math.cos(rad);\n        double s = Math.sin(rad);\n        return new double[][] { { c, 0, s }, { 0, 1, 0 }, { -s, 0, c } };\n    }\n\n    /**\n     *       Make an z-axis rotation matrix.  If M is the z-axis rotation matrix,\n     *       and v is a 3-vector, then v'=Mv is the vector v rotated around the z-axis\n     *       by the specified angle.\n     *\n     *       @param angle the angle to rotate by, in degrees\n     *       @return a 3x3 rotation matrix\n     */\n    public static double[][] makeRotateZ(float deg) {\n        double rad = Math.toRadians(deg);\n        double c = Math.cos(rad);\n        double s = Math.sin(rad);\n        return new double[][] { { c, s, 0 }, { -s, c, 0 }, { 0, 0, 1 } };\n    }\n\n    /**\n     *       Multiply two matrices.  Inputs are 2-dimensional arrays of\n     *       doubles, as is the output.  The output matrix is created by\n     *       this method.\n     *\n     *       <p><b>Assumes</b> the matrices are rectangular.</p>\n     *\n     *       @param A the first matrix to multiply\n     *       @param B the second matrix to multiply\n     *       @return the product of A and B\n     */\n    public static double[][] multiply(double[][] a, double[][] b) {\n        // verify sizes: common dimension\n        if (a[0].length != b.length)\n            throw new IllegalArgumentException();\n        int r = b.length;\n        // ASSUMES: matrices are rectangular\n        // compute result size\n        int m = a.length;\n        int n = b[0].length;\n        // all zeros\n        double[][] c = new double[m][n];\n        for (int i = 0; i < m; i++) for (int j = 0; j < n; j++) for (int k = 0; k < r; k++) c[i][j] += a[i][k] * b[k][j];\n        return c;\n    }\n\n    /**\n     *       Scale all entries of a matrix by a factor.  Operates destructively on the matrix in-place.\n     *\n     *       @param matrix the matrix to scale\n     *       @param factor the scaling factor\n     */\n    public static void scale(double[][] matrix, float factor) {\n        for (int i = 0; i < matrix.length; i++) for (int j = 0; j < matrix[i].length; j++) matrix[i][j] *= factor;\n    }\n}\n",
		"id": "/EvoSuiteBenchmark/35_corina/src/main/java/corina/map/Matrix_2Test.java",
		"test_prompt": "// Matrix_2Test.java\n// This file is part of Corina.\n//\n// Corina is free software; you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation; either version 2 of the License, or\n// (at your option) any later version.\n//\n// Corina is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Corina; if not, write to the Free Software\n// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n//\n// Copyright 2001 Ken Harris <kbh7@cornell.edu>\n//\npackage corina.map;\n\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link Matrix}.\n* It contains ten unit test cases for the {@link Matrix#makeRotateZ(float)} method.\n*/\nclass Matrix_2Test {"
	},
	{
		"original_code": "// Matrix.java\n//\n// This file is part of Corina.\n//\n// Corina is free software; you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation; either version 2 of the License, or\n// (at your option) any later version.\n//\n// Corina is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Corina; if not, write to the Free Software\n// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n//\n// Copyright 2001 Ken Harris <kbh7@cornell.edu>\n//\npackage corina.map;\n\n/*\n TODO:\n - javadoc: multiply(), class\n - figure out if they should be floats, or doubles.  don't mix them.\n - write some unit tests for this class.\n*/\n// BETTER: instead of making these methods public, why not just make rotate(vector,axis,angle) public?\n// that way, i can re-use the matrices safely, and lusers won't need to know how i do rotations.\n/**\n *   Matrix math routines.\n *\n * <p>\n * WRITEME: are they for floats, or doubles?  or either?  do i care?  be consistent!\n * WRITEME: author, version, etc.\n */\npublic class Matrix {\n\n    // don't instantiate me\n    private Matrix() {\n    }\n\n    /**\n     *       Make an x-axis rotation matrix.  If M is the x-axis rotation matrix,\n     *       and v is a 3-vector, then v'=Mv is the vector v rotated around the x-axis\n     *       by the specified angle.\n     *\n     *       @param angle the angle to rotate by, in degrees\n     *       @return a 3x3 rotation matrix\n     */\n    public static double[][] makeRotateX(float angle) {\n        double radians = Math.toRadians(angle);\n        double c = Math.cos(radians);\n        double s = Math.sin(radians);\n        return new double[][] { { 1, 0, 0 }, { 0, c, s }, { 0, -s, c } };\n        // was: {1,0,0},{0,c,-s},{0,s,c}, but that looked buggy to me -- tell the rmap guy?\n        // (he never responded to my first bug report)\n    }\n\n    /**\n     *       Make an y-axis rotation matrix.  If M is the y-axis rotation matrix,\n     *       and v is a 3-vector, then v'=Mv is the vector v rotated around the y-axis\n     *       by the specified angle.\n     *\n     *       @param angle the angle to rotate by, in degrees\n     *       @return a 3x3 rotation matrix\n     */\n    public static double[][] makeRotateY(float deg) {\n        double rad = Math.toRadians(deg);\n        double c = Math.cos(rad);\n        double s = Math.sin(rad);\n        return new double[][] { { c, 0, s }, { 0, 1, 0 }, { -s, 0, c } };\n    }\n\n    /**\n     *       Make an z-axis rotation matrix.  If M is the z-axis rotation matrix,\n     *       and v is a 3-vector, then v'=Mv is the vector v rotated around the z-axis\n     *       by the specified angle.\n     *\n     *       @param angle the angle to rotate by, in degrees\n     *       @return a 3x3 rotation matrix\n     */\n    public static double[][] makeRotateZ(float deg) {\n        double rad = Math.toRadians(deg);\n        double c = Math.cos(rad);\n        double s = Math.sin(rad);\n        return new double[][] { { c, s, 0 }, { -s, c, 0 }, { 0, 0, 1 } };\n    }\n\n    /**\n     *       Multiply two matrices.  Inputs are 2-dimensional arrays of\n     *       doubles, as is the output.  The output matrix is created by\n     *       this method.\n     *\n     *       <p><b>Assumes</b> the matrices are rectangular.</p>\n     *\n     *       @param A the first matrix to multiply\n     *       @param B the second matrix to multiply\n     *       @return the product of A and B\n     */\n    public static double[][] multiply(double[][] a, double[][] b) {\n        // verify sizes: common dimension\n        if (a[0].length != b.length)\n            throw new IllegalArgumentException();\n        int r = b.length;\n        // ASSUMES: matrices are rectangular\n        // compute result size\n        int m = a.length;\n        int n = b[0].length;\n        // all zeros\n        double[][] c = new double[m][n];\n        for (int i = 0; i < m; i++) for (int j = 0; j < n; j++) for (int k = 0; k < r; k++) c[i][j] += a[i][k] * b[k][j];\n        return c;\n    }\n\n    /**\n     *       Scale all entries of a matrix by a factor.  Operates destructively on the matrix in-place.\n     *\n     *       @param matrix the matrix to scale\n     *       @param factor the scaling factor\n     */\n    public static void scale(double[][] matrix, float factor) {\n        for (int i = 0; i < matrix.length; i++) for (int j = 0; j < matrix[i].length; j++) matrix[i][j] *= factor;\n    }\n}\n",
		"id": "/EvoSuiteBenchmark/35_corina/src/main/java/corina/map/Matrix_3Test.java",
		"test_prompt": "// Matrix_3Test.java\n// This file is part of Corina.\n//\n// Corina is free software; you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation; either version 2 of the License, or\n// (at your option) any later version.\n//\n// Corina is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Corina; if not, write to the Free Software\n// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n//\n// Copyright 2001 Ken Harris <kbh7@cornell.edu>\n//\npackage corina.map;\n\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link Matrix}.\n* It contains ten unit test cases for the {@link Matrix#multiply(double[][], double[][])} method.\n*/\nclass Matrix_3Test {"
	},
	{
		"original_code": "// Point3D.java\n//\n// This file is part of Corina.\n//\n// Corina is free software; you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation; either version 2 of the License, or\n// (at your option) any later version.\n//\n// Corina is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Corina; if not, write to the Free Software\n// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n//\n// Copyright 2001 Ken Harris <kbh7@cornell.edu>\n//\npackage corina.map;\n\nimport corina.site.Location;\n\n/**\n *   A point in 3-space: (x, y, z).  Each component (x, y, z) is a float.\n *\n *   <h2>Left to do:</h2>\n *   <ul>\n *     <li>Verify that a float is sufficient precision in the range I'm using (and document this)\n *     <li>Why is it so important that x/y/z be private?  java.awt.Point doesn't do this.\n *   </ul>\n *\n *   @author Ken Harris &lt;kbh7 <i style=\"color: gray\">at</i> cornell <i style=\"color: gray\">dot</i> edu&gt;\n *   @version $Id: Point3D.java,v 1.3 2006/06/06 20:30:52 lucasmo Exp $\n */\npublic class Point3D {\n\n    //\n    // FIELDS\n    //\n    private float x;\n\n    private float y;\n\n    private float z;\n\n    //\n    // ACCESSORS\n    //\n    /**\n     *       Get the x coordinate.\n     *       @return the x coordinate\n     */\n    public float getX() {\n        return x;\n    }\n\n    /**\n     *       Get the y coordinate.\n     *       @return the y coordinate\n     */\n    public float getY() {\n        return y;\n    }\n\n    /**\n     *       Get the z coordinate.\n     *       @return the z coordinate\n     */\n    public float getZ() {\n        return z;\n    }\n\n    /**\n     *       Set the x coordinate to a new value.\n     *       @param x the new x value\n     */\n    public void setX(float x) {\n        this.x = x;\n    }\n\n    /**\n     *       Set the y coordinate to a new value.\n     *       @param y the new y value\n     */\n    public void setY(float y) {\n        this.y = y;\n    }\n\n    /**\n     *       Set the z coordinate to a new value.\n     *       @param z the new z value\n     */\n    public void setZ(float z) {\n        this.z = z;\n    }\n\n    //\n    // CONSTRUCTORS\n    //\n    /**\n     *       Make a new point at (0,0,0).\n     */\n    public Point3D() {\n        // do nothing -- simply to allow null-arg construction\n    }\n\n    //\n    // METHODS\n    //\n    /**\n     *       Make a point from a Location (latitude, longitude).  The center of the earth is (0,0,0),\n     *       and the earth is assumed to be spherical, i.e., this converts from spherical coordinates\n     *       (Location) to rectangular coordinates (Point3D).\n     *\n     *       WRITEME: which way to the axes point?\n     *\n     *       @param location the location to use\n     */\n    public void setFromLocation(Location location) {\n        // convert angles\n        float lat = (float) Math.toRadians(location.getLatitudeAsDegrees());\n        float lon = (float) Math.toRadians(location.getLongitudeAsDegrees());\n        // spherical->cartesian coordinates\n        x = (float) (Location.EARTH_RADIUS * Math.cos(lat) * Math.sin(-lon));\n        y = (float) (Location.EARTH_RADIUS * Math.sin(lat));\n        z = (float) (Location.EARTH_RADIUS * Math.cos(lat) * Math.cos(-lon));\n    }\n\n    /**\n     *       Multiply each component by a scale factor.\n     *\n     *       @param factor the factor to scale by\n     */\n    public void scale(float factor) {\n        x *= factor;\n        y *= factor;\n        z *= factor;\n    }\n\n    /**\n     *       Compute the (Pythagorean) distance between two points.\n     *\n     *       @param point the point to measure to\n     *       @return the distance between the two points\n     */\n    public float distanceTo(Point3D point) {\n        // pythagorean distance -- yet again!\n        float dx = this.x - point.x;\n        float dy = this.y - point.y;\n        float dz = this.z - point.z;\n        return (float) Math.sqrt(dx * dx + dy * dy + dz * dz);\n    }\n}\n",
		"id": "/EvoSuiteBenchmark/35_corina/src/main/java/corina/map/Point3D.java",
		"test_prompt": "// Point3DTest.java\n// This file is part of Corina.\n//\n// Corina is free software; you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation; either version 2 of the License, or\n// (at your option) any later version.\n//\n// Corina is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Corina; if not, write to the Free Software\n// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n//\n// Copyright 2001 Ken Harris <kbh7@cornell.edu>\n//\npackage corina.map;\n\nimport corina.site.Location;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link Point3D}.\n* It contains ten unit test cases for the {@link Point3D#distanceTo(Point3D)} method.\n*/\nclass Point3DTest {"
	},
	{
		"original_code": "// Palette.java\npackage corina.map;\n\nimport corina.util.ColorUtils;\nimport java.awt.Color;\nimport java.awt.Stroke;\nimport java.awt.BasicStroke;\n\npublic class Palette {\n\n    // earthmap10k.jpg uses a blue sort of like this one\n    private static Color waterBlue = new Color(25, 72, 98);\n\n    // 50/50, waterBlue/white\n    private static Color lightBlue = ColorUtils.blend(waterBlue, 0.50f, Color.white, 0.50f);\n\n    // 25/75, waterBlue/white\n    private static Color lightLightBlue = ColorUtils.blend(waterBlue, 0.25f, Color.white, 0.75f);\n\n    /*\n      how about just text lines?\n      category=1 type=1 color=gray stroke=1\n      category=1 type=2 color=blue stroke=1.2\n      ...\n      i think i can live with that.\n\n      -- i'll want dotted lines, too.\n      category=1 type=2 color=blue thickness=1.2 dashes=5,1,1,1\n      (also allowing things like \"_.\" for \"dashes\" would be nifty)\n\n      -- defaults:\n      color=clear?\n      thickness=1.0\n      dashes=none\n\n      -- can i steal the Properties class for i/o?\n      \"1,2 = blue 1.2 5,1,1\"\n    */\n    // --------------------------------------------------\n    // NEW STUFF\n    private static final Color TRANSPARENT = new Color(0, 0, 0, 0);\n\n    private static final Stroke NORMAL_STROKE = new BasicStroke(1);\n\n    private static class Brush {\n\n        Color color = TRANSPARENT;\n\n        Stroke stroke = NORMAL_STROKE;\n\n        Brush(Color color) {\n            this.color = color;\n        }\n\n        Brush(Color color, float thickness) {\n            this.color = color;\n            this.stroke = new BasicStroke(thickness);\n        }\n\n        Brush(Color color, float thickness, float[] dashes) {\n            this.color = color;\n            this.stroke = new BasicStroke(thickness, BasicStroke.CAP_BUTT, BasicStroke.JOIN_ROUND, // DOCUMENT ME!\n            1, dashes, // DOCUMENT ME!\n            0);\n        }\n        // WRITEME: Brush(String) -- takes \"blue 1.2 5,1,1\", or \"--\" = default\n    }\n\n    // move to Brush.\n    private static final Brush NULL_BRUSH = new Brush(TRANSPARENT);\n\n    // (use this dash pattern for \"intermittent\" things)\n    // to Brush.?\n    private static final float[] INTERM = new float[] { 4, 2 };\n\n    private static final Brush[][] BRUSHES = new Brush[][] { { // category=1 \"US and Canada\"\n    // us/can state/province borders\n    new Brush(Color.gray), NULL_BRUSH, // us/can state/province borders, over water\n    new Brush(Color.gray, 1, new float[] { 3 }), NULL_BRUSH, NULL_BRUSH, NULL_BRUSH, NULL_BRUSH, NULL_BRUSH, NULL_BRUSH, NULL_BRUSH, NULL_BRUSH, NULL_BRUSH, // DOCUMENT ME: what are all these nulls?  \"don't exist\"?  \"don't draw\"?\n    NULL_BRUSH, NULL_BRUSH }, { // category=2 \"Rivers\"\n    // permanent major rivers\n    new Brush(waterBlue, 2), // additional major rivers\n    new Brush(waterBlue, 2), // additional rivers\n    new Brush(lightBlue, 1.5f), // minor rivers\n    new Brush(lightBlue, 1), // double-lined rivers\n    new Brush(lightBlue, 1.5f), // intermittent rivers -- major\n    new Brush(lightBlue, 2, INTERM), // intermittent rivers -- additional\n    new Brush(lightLightBlue, 1.5f, INTERM), // intermittent rivers -- minor\n    new Brush(lightLightBlue, 1, INTERM), // major canals\n    NULL_BRUSH, // canals of lesser importance\n    NULL_BRUSH, NULL_BRUSH, // canals -- irrigation type\n    NULL_BRUSH, NULL_BRUSH, NULL_BRUSH }, { // category=3 \"International Boundaries\"\n    // \"demarcated or delimited boundary\"\n    new Brush(Color.darkGray, 2), // \"indefinite or in dispute\"\n    new Brush(Color.darkGray, 2, new float[] { 5, 1, 1, 1 }), // \"other line of separation of sovreignty on land\"\n    new Brush(Color.darkGray, 1), NULL_BRUSH, NULL_BRUSH, NULL_BRUSH, NULL_BRUSH, NULL_BRUSH, NULL_BRUSH, NULL_BRUSH, NULL_BRUSH, NULL_BRUSH, NULL_BRUSH, NULL_BRUSH, // ???\n    new Brush(Color.red) }, { // category=4 \"Coast, Islands and Lakes\"\n    // coast, islands and lakes that appear on all maps\n    new Brush(Color.black, 2), // additional major islands and lakes\n    new Brush(Color.black, 2), // intermediate islands and lakes\n    new Brush(lightBlue, 1.5f), // minor islands and lakes\n    new Brush(lightBlue), NULL_BRUSH, // intermittent major lakes\n    new Brush(lightBlue, 1, INTERM), // intermittent minor lakes\n    new Brush(lightBlue, 1, INTERM), // reefs\n    NULL_BRUSH, // salt pans -- major\n    NULL_BRUSH, // salt pans -- minor\n    NULL_BRUSH, NULL_BRUSH, NULL_BRUSH, // ice shelves -- major\n    NULL_BRUSH, // ice shelves -- minor\n    NULL_BRUSH, // glaciers\n    NULL_BRUSH } };\n\n    public static Color getColor(MapFile.Header h) {\n        return BRUSHES[h.getCategory() - 1][h.getType() - 1].color;\n    }\n\n    public static Stroke getStroke(MapFile.Header h) {\n        return BRUSHES[h.getCategory() - 1][h.getType() - 1].stroke;\n    }\n    // TODO: be able to show a complete legend!  (it'll never be printed)\n    // it'll look like:\n    //\n    //   ----  Coasts, islands, and lakes\n    //   - -   Minor islands and lakes\n    //\n    // perhaps on tabs, one per category?  or maybe just scroll a list.\n    //\n    // (later, i can let users change this, even: click on one, or click an \"Edit\"\n    // button, and modify it.  save it in ~/.corina/palette.properties, and use\n    // that from then on.)\n    //\n    // (also, a checkbox next to each one -- unchecking them makes them undisplayed,\n    // and dims the sample pattern in the legend.)\n}\n",
		"id": "/EvoSuiteBenchmark/35_corina/src/main/java/corina/map/Palette_0Test.java",
		"test_prompt": "// Palette_0Test.java\npackage corina.map;\n\nimport corina.util.ColorUtils;\nimport java.awt.Color;\nimport java.awt.Stroke;\nimport java.awt.BasicStroke;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link Palette}.\n* It contains ten unit test cases for the {@link Palette#getColor(MapFile.Header)} method.\n*/\nclass Palette_0Test {"
	},
	{
		"original_code": "// Palette.java\npackage corina.map;\n\nimport corina.util.ColorUtils;\nimport java.awt.Color;\nimport java.awt.Stroke;\nimport java.awt.BasicStroke;\n\npublic class Palette {\n\n    // earthmap10k.jpg uses a blue sort of like this one\n    private static Color waterBlue = new Color(25, 72, 98);\n\n    // 50/50, waterBlue/white\n    private static Color lightBlue = ColorUtils.blend(waterBlue, 0.50f, Color.white, 0.50f);\n\n    // 25/75, waterBlue/white\n    private static Color lightLightBlue = ColorUtils.blend(waterBlue, 0.25f, Color.white, 0.75f);\n\n    /*\n      how about just text lines?\n      category=1 type=1 color=gray stroke=1\n      category=1 type=2 color=blue stroke=1.2\n      ...\n      i think i can live with that.\n\n      -- i'll want dotted lines, too.\n      category=1 type=2 color=blue thickness=1.2 dashes=5,1,1,1\n      (also allowing things like \"_.\" for \"dashes\" would be nifty)\n\n      -- defaults:\n      color=clear?\n      thickness=1.0\n      dashes=none\n\n      -- can i steal the Properties class for i/o?\n      \"1,2 = blue 1.2 5,1,1\"\n    */\n    // --------------------------------------------------\n    // NEW STUFF\n    private static final Color TRANSPARENT = new Color(0, 0, 0, 0);\n\n    private static final Stroke NORMAL_STROKE = new BasicStroke(1);\n\n    private static class Brush {\n\n        Color color = TRANSPARENT;\n\n        Stroke stroke = NORMAL_STROKE;\n\n        Brush(Color color) {\n            this.color = color;\n        }\n\n        Brush(Color color, float thickness) {\n            this.color = color;\n            this.stroke = new BasicStroke(thickness);\n        }\n\n        Brush(Color color, float thickness, float[] dashes) {\n            this.color = color;\n            this.stroke = new BasicStroke(thickness, BasicStroke.CAP_BUTT, BasicStroke.JOIN_ROUND, // DOCUMENT ME!\n            1, dashes, // DOCUMENT ME!\n            0);\n        }\n        // WRITEME: Brush(String) -- takes \"blue 1.2 5,1,1\", or \"--\" = default\n    }\n\n    // move to Brush.\n    private static final Brush NULL_BRUSH = new Brush(TRANSPARENT);\n\n    // (use this dash pattern for \"intermittent\" things)\n    // to Brush.?\n    private static final float[] INTERM = new float[] { 4, 2 };\n\n    private static final Brush[][] BRUSHES = new Brush[][] { { // category=1 \"US and Canada\"\n    // us/can state/province borders\n    new Brush(Color.gray), NULL_BRUSH, // us/can state/province borders, over water\n    new Brush(Color.gray, 1, new float[] { 3 }), NULL_BRUSH, NULL_BRUSH, NULL_BRUSH, NULL_BRUSH, NULL_BRUSH, NULL_BRUSH, NULL_BRUSH, NULL_BRUSH, NULL_BRUSH, // DOCUMENT ME: what are all these nulls?  \"don't exist\"?  \"don't draw\"?\n    NULL_BRUSH, NULL_BRUSH }, { // category=2 \"Rivers\"\n    // permanent major rivers\n    new Brush(waterBlue, 2), // additional major rivers\n    new Brush(waterBlue, 2), // additional rivers\n    new Brush(lightBlue, 1.5f), // minor rivers\n    new Brush(lightBlue, 1), // double-lined rivers\n    new Brush(lightBlue, 1.5f), // intermittent rivers -- major\n    new Brush(lightBlue, 2, INTERM), // intermittent rivers -- additional\n    new Brush(lightLightBlue, 1.5f, INTERM), // intermittent rivers -- minor\n    new Brush(lightLightBlue, 1, INTERM), // major canals\n    NULL_BRUSH, // canals of lesser importance\n    NULL_BRUSH, NULL_BRUSH, // canals -- irrigation type\n    NULL_BRUSH, NULL_BRUSH, NULL_BRUSH }, { // category=3 \"International Boundaries\"\n    // \"demarcated or delimited boundary\"\n    new Brush(Color.darkGray, 2), // \"indefinite or in dispute\"\n    new Brush(Color.darkGray, 2, new float[] { 5, 1, 1, 1 }), // \"other line of separation of sovreignty on land\"\n    new Brush(Color.darkGray, 1), NULL_BRUSH, NULL_BRUSH, NULL_BRUSH, NULL_BRUSH, NULL_BRUSH, NULL_BRUSH, NULL_BRUSH, NULL_BRUSH, NULL_BRUSH, NULL_BRUSH, NULL_BRUSH, // ???\n    new Brush(Color.red) }, { // category=4 \"Coast, Islands and Lakes\"\n    // coast, islands and lakes that appear on all maps\n    new Brush(Color.black, 2), // additional major islands and lakes\n    new Brush(Color.black, 2), // intermediate islands and lakes\n    new Brush(lightBlue, 1.5f), // minor islands and lakes\n    new Brush(lightBlue), NULL_BRUSH, // intermittent major lakes\n    new Brush(lightBlue, 1, INTERM), // intermittent minor lakes\n    new Brush(lightBlue, 1, INTERM), // reefs\n    NULL_BRUSH, // salt pans -- major\n    NULL_BRUSH, // salt pans -- minor\n    NULL_BRUSH, NULL_BRUSH, NULL_BRUSH, // ice shelves -- major\n    NULL_BRUSH, // ice shelves -- minor\n    NULL_BRUSH, // glaciers\n    NULL_BRUSH } };\n\n    public static Color getColor(MapFile.Header h) {\n        return BRUSHES[h.getCategory() - 1][h.getType() - 1].color;\n    }\n\n    public static Stroke getStroke(MapFile.Header h) {\n        return BRUSHES[h.getCategory() - 1][h.getType() - 1].stroke;\n    }\n    // TODO: be able to show a complete legend!  (it'll never be printed)\n    // it'll look like:\n    //\n    //   ----  Coasts, islands, and lakes\n    //   - -   Minor islands and lakes\n    //\n    // perhaps on tabs, one per category?  or maybe just scroll a list.\n    //\n    // (later, i can let users change this, even: click on one, or click an \"Edit\"\n    // button, and modify it.  save it in ~/.corina/palette.properties, and use\n    // that from then on.)\n    //\n    // (also, a checkbox next to each one -- unchecking them makes them undisplayed,\n    // and dims the sample pattern in the legend.)\n}\n",
		"id": "/EvoSuiteBenchmark/35_corina/src/main/java/corina/map/Palette_1Test.java",
		"test_prompt": "// Palette_1Test.java\npackage corina.map;\n\nimport corina.util.ColorUtils;\nimport java.awt.Color;\nimport java.awt.Stroke;\nimport java.awt.BasicStroke;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link Palette}.\n* It contains ten unit test cases for the {@link Palette#getStroke(MapFile.Header)} method.\n*/\nclass Palette_1Test {"
	},
	{
		"original_code": "// MapPrinter.java\n//\n// This file is part of Corina.\n//\n// Corina is free software; you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation; either version 2 of the License, or\n// (at your option) any later version.\n//\n// Corina is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Corina; if not, write to the Free Software\n// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n//\n// Copyright 2003 Ken Harris <kbh7@cornell.edu>\n//\npackage corina.map;\n\nimport corina.map.layers.GridlinesLayer;\nimport corina.map.layers.MapLayer;\nimport corina.map.layers.LegendLayer;\nimport corina.map.layers.SitesLayer;\nimport java.awt.Dimension;\nimport java.awt.BasicStroke;\nimport java.awt.Graphics;\nimport java.awt.Graphics2D;\nimport java.awt.print.Printable;\nimport java.awt.print.PageFormat;\nimport java.awt.print.PrinterException;\n\n// TODO: remember printer abort exception!  yes, but not here.\n// TODO: allow printing list of (visible) sites, too?  hmm, no: if you want sites, go to that view and print those.\n/**\n *   Print maps to a high-resolution printer.\n *\n *   <p>This class implements Printable, so to use it, all you need to do is\n *   make a new one with\n *\n * <pre>\n * Printable p = new MapPrinter(view, format);\n * </pre>\n *\n *   and pass that to Java's printing system.</p>\n *\n *   <p>The Java graphics/printing system has a weird limitation: all of the\n *   drawing primitives only get you to point (1/72\") resolution.  For most\n *   printing jobs (like a page of text), this is fine.  But our line maps\n *   have quite a bit more detail, and if each point is snapped to the nearest\n *   1/72\" on the page, it looks really bad.</p>\n *\n *   <p>The solution here is to make a new View, based on the View that we're\n *   passed, only with a larger area and zoomed in more, and then use\n *   Graphics2D's scale() call.  Then it all turns out ok.  (The only downside\n *   is that fixed-size things like the scale box become smaller, but that's\n *   much better than the alternative.  It could also be fixed, with some work.)\n *\n *   <h2>Left to do:</h2>\n *   <ul>\n *     <li>Why does the c'tor need a PageFormat, if print() takes one, too?\n *     <li>Make it accept a Projection, too?  Aah, no, Projection is made from a View.  Need to pass a type-of-Projection.\n *     <li>The user's SitesLayer might have something different showing, so we'll need to pass that in, too.\n *         (Can I use the same layers they're already using?)\n *     <li>Zooming in more isn't perfect (legend gets smaller, etc.).  What I need is higher-resolution\n *         maps.  Is that hard to do?\n *     <li>Bug?: I set the stroke before drawing the layers, but don't the layers set their own strokes?\n *   </ul>\n *\n *   @author Ken Harris &lt;kbh7 <i style=\"color: gray\">at</i> cornell <i style=\"color: gray\">dot</i> edu&gt;\n *   @version $Id: MapPrinter.java,v 1.4 2004/01/18 18:05:19 aaron Exp $\n */\npublic class MapPrinter implements Printable {\n\n    /**\n     *       Make a new MapPrinter.\n     *\n     *       @param view the View to print\n     *       @param labels the LabelSet to use\n     *       @param format the PageFormat to use\n     */\n    public MapPrinter(View view, LabelSet labels, PageFormat format) {\n        this.format = format;\n        this.labels = labels;\n        // wasteful later: need to decide if view is mutable!\n        this.view = (View) view.clone();\n    }\n\n    private View view;\n\n    private LabelSet labels;\n\n    private PageFormat format;\n\n    // change me, if you like\n    private final static float TARGET_DPI = 300;\n\n    // normal print is 60dpi -- don't change me\n    private final static float NORMAL_DPI = 60;\n\n    private final static float detail = TARGET_DPI / NORMAL_DPI;\n\n    /**\n     *       Print the map.  (A map is always exactly one page.)\n     *\n     *       @param g the Graphics object to draw on\n     *       @param format the PageFormat to use\n     *       @param pageNr the page to print (only page 0 is actually printed)\n     *       @return PAGE_EXISTS, for page 0, else NO_SUCH_PAGE\n     */\n    public int print(Graphics g, PageFormat format, int pageNr) throws PrinterException {\n        // a map is always exactly one page\n        if (pageNr > 0)\n            return Printable.NO_SUCH_PAGE;\n        // create my own view: zoom\n        View detailedView = (View) view.clone();\n        detailedView.setZoom(detailedView.getZoom() * detail);\n        // then set the size -- scale up by |detail| to get |DPI|.\n        // (if you want a square map, say: h = w = Math.min(h, w);)\n        int w = (int) format.getImageableWidth();\n        int h = (int) format.getImageableHeight();\n        detailedView.size = new Dimension((int) (w * detail), (int) (h * detail));\n        // create my own projection\n        Projection r = Projection.makeProjection(detailedView);\n        // use a small brush\n        Graphics2D g2 = (Graphics2D) g;\n        g2.setStroke(new BasicStroke(0.5f));\n        // offset so it's entirely on the page, and scale down to\n        // make it look detailed but normal-sized\n        final float dx = (float) format.getImageableX();\n        final float dy = (float) format.getImageableY();\n        g2.translate(dx, dy);\n        g2.scale(1 / detail, 1 / detail);\n        // print the layers to it\n        printAllLayers(g2, r);\n        return Printable.PAGE_EXISTS;\n    }\n\n    private void printAllLayers(Graphics2D g2, Projection r) {\n        // make some layers\n        Layer grid = new GridlinesLayer();\n        Layer legend = new LegendLayer();\n        Layer sitesLayer = new SitesLayer(labels);\n        Layer mapLayer = new MapLayer();\n        // draw them to |g2|\n        grid.draw(g2, r);\n        mapLayer.draw(g2, r);\n        sitesLayer.draw(g2, r);\n        legend.draw(g2, r);\n    }\n}\n",
		"id": "/EvoSuiteBenchmark/35_corina/src/main/java/corina/map/MapPrinter.java",
		"test_prompt": "// MapPrinterTest.java\n// This file is part of Corina.\n//\n// Corina is free software; you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation; either version 2 of the License, or\n// (at your option) any later version.\n//\n// Corina is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Corina; if not, write to the Free Software\n// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n//\n// Copyright 2003 Ken Harris <kbh7@cornell.edu>\n//\npackage corina.map;\n\nimport corina.map.layers.GridlinesLayer;\nimport corina.map.layers.MapLayer;\nimport corina.map.layers.LegendLayer;\nimport corina.map.layers.SitesLayer;\nimport java.awt.Dimension;\nimport java.awt.BasicStroke;\nimport java.awt.Graphics;\nimport java.awt.Graphics2D;\nimport java.awt.print.Printable;\nimport java.awt.print.PageFormat;\nimport java.awt.print.PrinterException;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link MapPrinter}.\n* It contains ten unit test cases for the {@link MapPrinter#print(Graphics, PageFormat, int)} method.\n*/\nclass MapPrinterTest {"
	},
	{
		"original_code": "// View.java\n//\n// This file is part of Corina.\n//\n// Corina is free software; you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation; either version 2 of the License, or\n// (at your option) any later version.\n//\n// Corina is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Corina; if not, write to the Free Software\n// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n//\n// Copyright 2003 Ken Harris <kbh7@cornell.edu>\n//\npackage corina.map;\n\nimport java.awt.Dimension;\nimport corina.site.Location;\n\n// TODO: what's a zoom factor of 1.0 defined to be, exactly?\n// TODO: loc should be getCenter/setCenter?\n// TODO: admit we're mutable?  who mutes us?\n// TODO: \"zoom in\" / \"zoom out\" should be methods here (should they? min/max aren't)\n// TODO: size should be getSize/setSize/getHeight/getWidth/setHeight/setWidth\n// TODO: clone is weird ...\n/**\n *   A particular View of the map.  A View consists of:\n *\n *   <ul>\n *     <li>The center (latitude and longitude)\n *     <li>The zoom factor (1.0 is \"normal\")\n *     <li>The size (in pixels for the screen, or points for the printer)\n *   </ul>\n *\n *   <p>A View object is mutable.  A window showing a map that the user can manipulate has\n *   a View associated with it, which gets changed as the user plays with the map.\n *   To draw the map, Corina first makes a Projection using the current View, and\n *   then uses that Projection to map Locations to Points.</p>\n *\n *   @see Projection\n *   @see Location\n *\n *   @author Ken Harris &lt;kbh7 <i style=\"color: gray\">at</i> cornell <i style=\"color: gray\">dot</i> edu&gt;\n *   @version $Id: View.java,v 1.6 2006/06/06 20:30:52 lucasmo Exp $\n */\npublic class View implements Cloneable {\n\n    /**\n     *       Make a new View.  The default view is centered at 38&deg;N 30&deg;E\n     *       (the Aegean), has a zoom factor of 1.0, and is 640 x 640 pixels in size.\n     */\n    public View() {\n        // (this constructor is here just for the javadoc tag)\n    }\n\n    public Location center = new Location(\"38*N 30*E\");\n\n    private float zoom = 1;\n\n    /**\n     *       Get the zoom factor.\n     *       @return the zoom factor\n     */\n    public float getZoom() {\n        return zoom;\n    }\n\n    /**\n     *        Set the zoom factor.\n     *        @param zoom the new zoom factor\n     */\n    public void setZoom(float zoom) {\n        this.zoom = zoom;\n    }\n\n    public Dimension size = new Dimension(640, 640);\n\n    // REFACTOR: why do i need clone?  wouldn't a copy-constructor be simpler?\n    // USED BY: MapPanel (for printing - making detailedView), MapFrame (png export)\n    // so what i really want is \"make a copy, but with X factor more detail\"\n    public Object clone() {\n        View v2;\n        try {\n            v2 = (View) super.clone();\n        } catch (CloneNotSupportedException cnse) {\n            v2 = new View();\n        }\n        v2.center = (Location) center.clone();\n        v2.zoom = zoom;\n        v2.size = (Dimension) size.clone();\n        return v2;\n    }\n}\n",
		"id": "/EvoSuiteBenchmark/35_corina/src/main/java/corina/map/View.java",
		"test_prompt": "// ViewTest.java\n// This file is part of Corina.\n//\n// Corina is free software; you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation; either version 2 of the License, or\n// (at your option) any later version.\n//\n// Corina is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Corina; if not, write to the Free Software\n// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n//\n// Copyright 2003 Ken Harris <kbh7@cornell.edu>\n//\npackage corina.map;\n\nimport java.awt.Dimension;\nimport corina.site.Location;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link View}.\n* It contains ten unit test cases for the {@link View#clone()} method.\n*/\nclass ViewTest {"
	},
	{
		"original_code": "// PngEncoder.java\npackage corina.map;\n\n// package com.keypoint;\n/**\n * PngEncoder takes a Java Image object and creates a byte string which can be saved as a PNG file.\n * The Image is presumed to use the DirectColorModel.\n *\n * Thanks to Jay Denny at KeyPoint Software\n *    http://www.keypoint.com/\n * who let me develop this code on company time.\n *\n * You may contact me with (probably very-much-needed) improvements,\n * comments, and bug fixes at:\n *\n *   david@catcode.com\n *\n * This library is free software; you can redistribute it and/or\n * modify it under the terms of the GNU Lesser General Public\n * License as published by the Free Software Foundation; either\n * version 2.1 of the License, or (at your option) any later version.\n *\n * This library is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n * Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public\n * License along with this library; if not, write to the Free Software\n * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n * A copy of the GNU LGPL may be found at\n * http://www.gnu.org/copyleft/lesser.html,\n *\n * @author J. David Eisenberg\n * @version 1.4, 31 March 2000\n */\nimport java.awt.*;\nimport java.awt.image.*;\nimport java.awt.image.DirectColorModel;\nimport java.util.*;\nimport java.util.zip.*;\nimport java.io.*;\n\npublic class PngEncoder extends Object {\n\n    /**\n     * Constant specifying that alpha channel should be encoded.\n     */\n    public static final boolean ENCODE_ALPHA = true;\n\n    /**\n     * Constant specifying that alpha channel should not be encoded.\n     */\n    public static final boolean NO_ALPHA = false;\n\n    /**\n     * Constants for filters\n     */\n    public static final int FILTER_NONE = 0;\n\n    public static final int FILTER_SUB = 1;\n\n    public static final int FILTER_UP = 2;\n\n    public static final int FILTER_LAST = 2;\n\n    protected byte[] pngBytes;\n\n    protected byte[] priorRow;\n\n    protected byte[] leftBytes;\n\n    protected Image image;\n\n    protected int width, height;\n\n    protected int bytePos, maxPos;\n\n    protected int hdrPos, dataPos, endPos;\n\n    protected CRC32 crc = new CRC32();\n\n    protected long crcValue;\n\n    protected boolean encodeAlpha;\n\n    protected int filter;\n\n    protected int bytesPerPixel;\n\n    protected int compressionLevel;\n\n    /**\n     * Class constructor\n     */\n    public PngEncoder() {\n        this(null, false, FILTER_NONE, 0);\n    }\n\n    /**\n     * Class constructor specifying Image to encode, with no alpha channel encoding.\n     *\n     * @param image A Java Image object which uses the DirectColorModel\n     * @see java.awt.Image\n     */\n    public PngEncoder(Image image) {\n        this(image, false, FILTER_NONE, 0);\n    }\n\n    /**\n     * Class constructor specifying Image to encode, and whether to encode alpha.\n     *\n     * @param image A Java Image object which uses the DirectColorModel\n     * @param encodeAlpha Encode the alpha channel? false=no; true=yes\n     * @see java.awt.Image\n     */\n    public PngEncoder(Image image, boolean encodeAlpha) {\n        this(image, encodeAlpha, FILTER_NONE, 0);\n    }\n\n    /**\n     * Class constructor specifying Image to encode, whether to encode alpha, and filter to use.\n     *\n     * @param image A Java Image object which uses the DirectColorModel\n     * @param encodeAlpha Encode the alpha channel? false=no; true=yes\n     * @param whichFilter 0=none, 1=sub, 2=up\n     * @see java.awt.Image\n     */\n    public PngEncoder(Image image, boolean encodeAlpha, int whichFilter) {\n        this(image, encodeAlpha, whichFilter, 0);\n    }\n\n    /**\n     * Class constructor specifying Image source to encode, whether to encode alpha, filter to use, and compression level.\n     *\n     * @param image A Java Image object\n     * @param encodeAlpha Encode the alpha channel? false=no; true=yes\n     * @param whichFilter 0=none, 1=sub, 2=up\n     * @param compLevel 0..9\n     * @see java.awt.Image\n     */\n    public PngEncoder(Image image, boolean encodeAlpha, int whichFilter, int compLevel) {\n        this.image = image;\n        this.encodeAlpha = encodeAlpha;\n        setFilter(whichFilter);\n        if (compLevel >= 0 && compLevel <= 9) {\n            this.compressionLevel = compLevel;\n        }\n    }\n\n    /**\n     * Set the image to be encoded\n     *\n     * @param image A Java Image object which uses the DirectColorModel\n     * @see java.awt.Image\n     * @see java.awt.image.DirectColorModel\n     */\n    public void setImage(Image image) {\n        this.image = image;\n        pngBytes = null;\n    }\n\n    /**\n     * Creates an array of bytes that is the PNG equivalent of the current image, specifying whether to encode alpha or not.\n     *\n     * @param encodeAlpha boolean false=no alpha, true=encode alpha\n     * @return an array of bytes, or null if there was a problem\n     */\n    public byte[] pngEncode(boolean encodeAlpha) {\n        byte[] pngIdBytes = { -119, 80, 78, 71, 13, 10, 26, 10 };\n        int i;\n        if (image == null) {\n            return null;\n        }\n        width = image.getWidth(null);\n        height = image.getHeight(null);\n        this.image = image;\n        /*\n         * start with an array that is big enough to hold all the pixels\n         * (plus filter bytes), and an extra 200 bytes for header info\n         */\n        pngBytes = new byte[((width + 1) * height * 3) + 200];\n        /*\n         * keep track of largest byte written to the array\n         */\n        maxPos = 0;\n        bytePos = writeBytes(pngIdBytes, 0);\n        hdrPos = bytePos;\n        writeHeader();\n        dataPos = bytePos;\n        if (writeImageData()) {\n            writeEnd();\n            pngBytes = resizeByteArray(pngBytes, maxPos);\n        } else {\n            pngBytes = null;\n        }\n        return pngBytes;\n    }\n\n    /**\n     * Creates an array of bytes that is the PNG equivalent of the current image.\n     * Alpha encoding is determined by its setting in the constructor.\n     *\n     * @return an array of bytes, or null if there was a problem\n     */\n    public byte[] pngEncode() {\n        return pngEncode(encodeAlpha);\n    }\n\n    /**\n     * Set the alpha encoding on or off.\n     *\n     * @param encodeAlpha  false=no, true=yes\n     */\n    public void setEncodeAlpha(boolean encodeAlpha) {\n        this.encodeAlpha = encodeAlpha;\n    }\n\n    /**\n     * Retrieve alpha encoding status.\n     *\n     * @return boolean false=no, true=yes\n     */\n    public boolean getEncodeAlpha() {\n        return encodeAlpha;\n    }\n\n    /**\n     * Set the filter to use\n     *\n     * @param whichFilter from constant list\n     */\n    public void setFilter(int whichFilter) {\n        this.filter = FILTER_NONE;\n        if (whichFilter <= FILTER_LAST) {\n            this.filter = whichFilter;\n        }\n    }\n\n    /**\n     * Retrieve filtering scheme\n     *\n     * @return int (see constant list)\n     */\n    public int getFilter() {\n        return filter;\n    }\n\n    /**\n     * Set the compression level to use\n     *\n     * @param level 0 through 9\n     */\n    public void setCompressionLevel(int level) {\n        if (level >= 0 && level <= 9) {\n            this.compressionLevel = level;\n        }\n    }\n\n    /**\n     * Retrieve compression level\n     *\n     * @return int in range 0-9\n     */\n    public int getCompressionLevel() {\n        return compressionLevel;\n    }\n\n    /**\n     * Increase or decrease the length of a byte array.\n     *\n     * @param array The original array.\n     * @param newLength The length you wish the new array to have.\n     * @return Array of newly desired length. If shorter than the\n     *         original, the trailing elements are truncated.\n     */\n    protected byte[] resizeByteArray(byte[] array, int newLength) {\n        byte[] newArray = new byte[newLength];\n        int oldLength = array.length;\n        System.arraycopy(array, 0, newArray, 0, Math.min(oldLength, newLength));\n        return newArray;\n    }\n\n    /**\n     * Write an array of bytes into the pngBytes array.\n     * Note: This routine has the side effect of updating\n     * maxPos, the largest element written in the array.\n     * The array is resized by 1000 bytes or the length\n     * of the data to be written, whichever is larger.\n     *\n     * @param data The data to be written into pngBytes.\n     * @param offset The starting point to write to.\n     * @return The next place to be written to in the pngBytes array.\n     */\n    protected int writeBytes(byte[] data, int offset) {\n        maxPos = Math.max(maxPos, offset + data.length);\n        if (data.length + offset > pngBytes.length) {\n            pngBytes = resizeByteArray(pngBytes, pngBytes.length + Math.max(1000, data.length));\n        }\n        System.arraycopy(data, 0, pngBytes, offset, data.length);\n        return offset + data.length;\n    }\n\n    /**\n     * Write an array of bytes into the pngBytes array, specifying number of bytes to write.\n     * Note: This routine has the side effect of updating\n     * maxPos, the largest element written in the array.\n     * The array is resized by 1000 bytes or the length\n     * of the data to be written, whichever is larger.\n     *\n     * @param data The data to be written into pngBytes.\n     * @param nBytes The number of bytes to be written.\n     * @param offset The starting point to write to.\n     * @return The next place to be written to in the pngBytes array.\n     */\n    protected int writeBytes(byte[] data, int nBytes, int offset) {\n        maxPos = Math.max(maxPos, offset + nBytes);\n        if (nBytes + offset > pngBytes.length) {\n            pngBytes = resizeByteArray(pngBytes, pngBytes.length + Math.max(1000, nBytes));\n        }\n        System.arraycopy(data, 0, pngBytes, offset, nBytes);\n        return offset + nBytes;\n    }\n\n    /**\n     * Write a two-byte integer into the pngBytes array at a given position.\n     *\n     * @param n The integer to be written into pngBytes.\n     * @param offset The starting point to write to.\n     * @return The next place to be written to in the pngBytes array.\n     */\n    protected int writeInt2(int n, int offset) {\n        byte[] temp = { (byte) ((n >> 8) & 0xff), (byte) (n & 0xff) };\n        return writeBytes(temp, offset);\n    }\n\n    /**\n     * Write a four-byte integer into the pngBytes array at a given position.\n     *\n     * @param n The integer to be written into pngBytes.\n     * @param offset The starting point to write to.\n     * @return The next place to be written to in the pngBytes array.\n     */\n    protected int writeInt4(int n, int offset) {\n        byte[] temp = { (byte) ((n >> 24) & 0xff), (byte) ((n >> 16) & 0xff), (byte) ((n >> 8) & 0xff), (byte) (n & 0xff) };\n        return writeBytes(temp, offset);\n    }\n\n    /**\n     * Write a single byte into the pngBytes array at a given position.\n     *\n     * @param n The integer to be written into pngBytes.\n     * @param offset The starting point to write to.\n     * @return The next place to be written to in the pngBytes array.\n     */\n    protected int writeByte(int b, int offset) {\n        byte[] temp = { (byte) b };\n        return writeBytes(temp, offset);\n    }\n\n    /**\n     * Write a string into the pngBytes array at a given position.\n     * This uses the getBytes method, so the encoding used will\n     * be its default.\n     *\n     * @param n The integer to be written into pngBytes.\n     * @param offset The starting point to write to.\n     * @return The next place to be written to in the pngBytes array.\n     * @see java.lang.String#getBytes()\n     */\n    protected int writeString(String s, int offset) {\n        return writeBytes(s.getBytes(), offset);\n    }\n\n    /**\n     * Write a PNG \"IHDR\" chunk into the pngBytes array.\n     */\n    protected void writeHeader() {\n        int startPos;\n        startPos = bytePos = writeInt4(13, bytePos);\n        bytePos = writeString(\"IHDR\", bytePos);\n        width = image.getWidth(null);\n        height = image.getHeight(null);\n        bytePos = writeInt4(width, bytePos);\n        bytePos = writeInt4(height, bytePos);\n        // bit depth\n        bytePos = writeByte(8, bytePos);\n        // direct model\n        bytePos = writeByte((encodeAlpha) ? 6 : 2, bytePos);\n        // compression method\n        bytePos = writeByte(0, bytePos);\n        // filter method\n        bytePos = writeByte(0, bytePos);\n        // no interlace\n        bytePos = writeByte(0, bytePos);\n        crc.reset();\n        crc.update(pngBytes, startPos, bytePos - startPos);\n        crcValue = crc.getValue();\n        bytePos = writeInt4((int) crcValue, bytePos);\n    }\n\n    /**\n     * Perform \"sub\" filtering on the given row.\n     * Uses temporary array leftBytes to store the original values\n     * of the previous pixels.  The array is 16 bytes long, which\n     * will easily hold two-byte samples plus two-byte alpha.\n     *\n     * @param pixels The array holding the scan lines being built\n     * @param startPos Starting position within pixels of bytes to be filtered.\n     * @param width Width of a scanline in pixels.\n     */\n    protected void filterSub(byte[] pixels, int startPos, int width) {\n        int i;\n        int offset = bytesPerPixel;\n        int actualStart = startPos + offset;\n        int nBytes = width * bytesPerPixel;\n        int leftInsert = offset;\n        int leftExtract = 0;\n        byte current_byte;\n        for (i = actualStart; i < startPos + nBytes; i++) {\n            leftBytes[leftInsert] = pixels[i];\n            pixels[i] = (byte) ((pixels[i] - leftBytes[leftExtract]) % 256);\n            leftInsert = (leftInsert + 1) % 0x0f;\n            leftExtract = (leftExtract + 1) % 0x0f;\n        }\n    }\n\n    /**\n     * Perform \"up\" filtering on the given row.\n     * Side effect: refills the prior row with current row\n     *\n     * @param pixels The array holding the scan lines being built\n     * @param startPos Starting position within pixels of bytes to be filtered.\n     * @param width Width of a scanline in pixels.\n     */\n    protected void filterUp(byte[] pixels, int startPos, int width) {\n        int i, nBytes;\n        byte current_byte;\n        nBytes = width * bytesPerPixel;\n        for (i = 0; i < nBytes; i++) {\n            current_byte = pixels[startPos + i];\n            pixels[startPos + i] = (byte) ((pixels[startPos + i] - priorRow[i]) % 256);\n            priorRow[i] = current_byte;\n        }\n    }\n\n    /**\n     * Write the image data into the pngBytes array.\n     * This will write one or more PNG \"IDAT\" chunks. In order\n     * to conserve memory, this method grabs as many rows as will\n     * fit into 32K bytes, or the whole image; whichever is less.\n     *\n     * @return true if no errors; false if error grabbing pixels\n     */\n    protected boolean writeImageData() {\n        // number of rows remaining to write\n        int rowsLeft = height;\n        // starting row to process this time through\n        int startRow = 0;\n        // how many rows to grab at a time\n        int nRows;\n        // the scan lines to be compressed\n        byte[] scanLines;\n        // where we are in the scan lines\n        int scanPos;\n        // where this line's actual pixels start (used for filtering)\n        int startPos;\n        // the resultant compressed lines\n        byte[] compressedLines;\n        // how big is the compressed area?\n        int nCompressed;\n        // color depth ( handle only 8 or 32 )\n        int depth;\n        PixelGrabber pg;\n        bytesPerPixel = (encodeAlpha) ? 4 : 3;\n        Deflater scrunch = new Deflater(compressionLevel);\n        ByteArrayOutputStream outBytes = new ByteArrayOutputStream(1024);\n        DeflaterOutputStream compBytes = new DeflaterOutputStream(outBytes, scrunch);\n        try {\n            while (rowsLeft > 0) {\n                nRows = Math.min(32767 / (width * (bytesPerPixel + 1)), rowsLeft);\n                // nRows = rowsLeft;\n                int[] pixels = new int[width * nRows];\n                pg = new PixelGrabber(image, 0, startRow, width, nRows, pixels, 0, width);\n                try {\n                    pg.grabPixels();\n                } catch (Exception e) {\n                    System.err.println(\"interrupted waiting for pixels!\");\n                    return false;\n                }\n                if ((pg.getStatus() & ImageObserver.ABORT) != 0) {\n                    System.err.println(\"image fetch aborted or errored\");\n                    return false;\n                }\n                /*\n                 * Create a data chunk. scanLines adds \"nRows\" for\n                 * the filter bytes. \n                 */\n                scanLines = new byte[width * nRows * bytesPerPixel + nRows];\n                if (filter == FILTER_SUB) {\n                    leftBytes = new byte[16];\n                }\n                if (filter == FILTER_UP) {\n                    priorRow = new byte[width * bytesPerPixel];\n                }\n                scanPos = 0;\n                startPos = 1;\n                for (int i = 0; i < width * nRows; i++) {\n                    if (i % width == 0) {\n                        scanLines[scanPos++] = (byte) filter;\n                        startPos = scanPos;\n                    }\n                    scanLines[scanPos++] = (byte) ((pixels[i] >> 16) & 0xff);\n                    scanLines[scanPos++] = (byte) ((pixels[i] >> 8) & 0xff);\n                    scanLines[scanPos++] = (byte) ((pixels[i]) & 0xff);\n                    if (encodeAlpha) {\n                        scanLines[scanPos++] = (byte) ((pixels[i] >> 24) & 0xff);\n                    }\n                    if ((i % width == width - 1) && (filter != FILTER_NONE)) {\n                        if (filter == FILTER_SUB) {\n                            filterSub(scanLines, startPos, width);\n                        }\n                        if (filter == FILTER_UP) {\n                            filterUp(scanLines, startPos, width);\n                        }\n                    }\n                }\n                /*\n                 * Write these lines to the output area\n                 */\n                compBytes.write(scanLines, 0, scanPos);\n                startRow += nRows;\n                rowsLeft -= nRows;\n            }\n            compBytes.close();\n            /*\n             * Write the compressed bytes\n             */\n            compressedLines = outBytes.toByteArray();\n            nCompressed = compressedLines.length;\n            crc.reset();\n            bytePos = writeInt4(nCompressed, bytePos);\n            bytePos = writeString(\"IDAT\", bytePos);\n            crc.update(\"IDAT\".getBytes());\n            bytePos = writeBytes(compressedLines, nCompressed, bytePos);\n            crc.update(compressedLines, 0, nCompressed);\n            crcValue = crc.getValue();\n            bytePos = writeInt4((int) crcValue, bytePos);\n            scrunch.finish();\n            return true;\n        } catch (IOException e) {\n            System.err.println(e.toString());\n            return false;\n        }\n    }\n\n    /**\n     * Write a PNG \"IEND\" chunk into the pngBytes array.\n     */\n    protected void writeEnd() {\n        bytePos = writeInt4(0, bytePos);\n        bytePos = writeString(\"IEND\", bytePos);\n        crc.reset();\n        crc.update(\"IEND\".getBytes());\n        crcValue = crc.getValue();\n        bytePos = writeInt4((int) crcValue, bytePos);\n    }\n}\n",
		"id": "/EvoSuiteBenchmark/35_corina/src/main/java/corina/map/PngEncoder_0Test.java",
		"test_prompt": "// PngEncoder_0Test.java\npackage corina.map;\n\n// package com.keypoint;\n/**\n * PngEncoder takes a Java Image object and creates a byte string which can be saved as a PNG file.\n * The Image is presumed to use the DirectColorModel.\n *\n * Thanks to Jay Denny at KeyPoint Software\n *    http://www.keypoint.com/\n * who let me develop this code on company time.\n *\n * You may contact me with (probably very-much-needed) improvements,\n * comments, and bug fixes at:\n *\n *   david@catcode.com\n *\n * This library is free software; you can redistribute it and/or\n * modify it under the terms of the GNU Lesser General Public\n * License as published by the Free Software Foundation; either\n * version 2.1 of the License, or (at your option) any later version.\n *\n * This library is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n * Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public\n * License along with this library; if not, write to the Free Software\n * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n * A copy of the GNU LGPL may be found at\n * http://www.gnu.org/copyleft/lesser.html,\n *\n * @author J. David Eisenberg\n * @version 1.4, 31 March 2000\n */\nimport java.awt.*;\nimport java.awt.image.*;\nimport java.awt.image.DirectColorModel;\nimport java.util.*;\nimport java.util.zip.*;\nimport java.io.*;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link PngEncoder}.\n* It contains ten unit test cases for the {@link PngEncoder#pngEncode(boolean)} method.\n*/\nclass PngEncoder_0Test {"
	},
	{
		"original_code": "// PngEncoder.java\npackage corina.map;\n\n// package com.keypoint;\n/**\n * PngEncoder takes a Java Image object and creates a byte string which can be saved as a PNG file.\n * The Image is presumed to use the DirectColorModel.\n *\n * Thanks to Jay Denny at KeyPoint Software\n *    http://www.keypoint.com/\n * who let me develop this code on company time.\n *\n * You may contact me with (probably very-much-needed) improvements,\n * comments, and bug fixes at:\n *\n *   david@catcode.com\n *\n * This library is free software; you can redistribute it and/or\n * modify it under the terms of the GNU Lesser General Public\n * License as published by the Free Software Foundation; either\n * version 2.1 of the License, or (at your option) any later version.\n *\n * This library is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n * Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public\n * License along with this library; if not, write to the Free Software\n * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n * A copy of the GNU LGPL may be found at\n * http://www.gnu.org/copyleft/lesser.html,\n *\n * @author J. David Eisenberg\n * @version 1.4, 31 March 2000\n */\nimport java.awt.*;\nimport java.awt.image.*;\nimport java.awt.image.DirectColorModel;\nimport java.util.*;\nimport java.util.zip.*;\nimport java.io.*;\n\npublic class PngEncoder extends Object {\n\n    /**\n     * Constant specifying that alpha channel should be encoded.\n     */\n    public static final boolean ENCODE_ALPHA = true;\n\n    /**\n     * Constant specifying that alpha channel should not be encoded.\n     */\n    public static final boolean NO_ALPHA = false;\n\n    /**\n     * Constants for filters\n     */\n    public static final int FILTER_NONE = 0;\n\n    public static final int FILTER_SUB = 1;\n\n    public static final int FILTER_UP = 2;\n\n    public static final int FILTER_LAST = 2;\n\n    protected byte[] pngBytes;\n\n    protected byte[] priorRow;\n\n    protected byte[] leftBytes;\n\n    protected Image image;\n\n    protected int width, height;\n\n    protected int bytePos, maxPos;\n\n    protected int hdrPos, dataPos, endPos;\n\n    protected CRC32 crc = new CRC32();\n\n    protected long crcValue;\n\n    protected boolean encodeAlpha;\n\n    protected int filter;\n\n    protected int bytesPerPixel;\n\n    protected int compressionLevel;\n\n    /**\n     * Class constructor\n     */\n    public PngEncoder() {\n        this(null, false, FILTER_NONE, 0);\n    }\n\n    /**\n     * Class constructor specifying Image to encode, with no alpha channel encoding.\n     *\n     * @param image A Java Image object which uses the DirectColorModel\n     * @see java.awt.Image\n     */\n    public PngEncoder(Image image) {\n        this(image, false, FILTER_NONE, 0);\n    }\n\n    /**\n     * Class constructor specifying Image to encode, and whether to encode alpha.\n     *\n     * @param image A Java Image object which uses the DirectColorModel\n     * @param encodeAlpha Encode the alpha channel? false=no; true=yes\n     * @see java.awt.Image\n     */\n    public PngEncoder(Image image, boolean encodeAlpha) {\n        this(image, encodeAlpha, FILTER_NONE, 0);\n    }\n\n    /**\n     * Class constructor specifying Image to encode, whether to encode alpha, and filter to use.\n     *\n     * @param image A Java Image object which uses the DirectColorModel\n     * @param encodeAlpha Encode the alpha channel? false=no; true=yes\n     * @param whichFilter 0=none, 1=sub, 2=up\n     * @see java.awt.Image\n     */\n    public PngEncoder(Image image, boolean encodeAlpha, int whichFilter) {\n        this(image, encodeAlpha, whichFilter, 0);\n    }\n\n    /**\n     * Class constructor specifying Image source to encode, whether to encode alpha, filter to use, and compression level.\n     *\n     * @param image A Java Image object\n     * @param encodeAlpha Encode the alpha channel? false=no; true=yes\n     * @param whichFilter 0=none, 1=sub, 2=up\n     * @param compLevel 0..9\n     * @see java.awt.Image\n     */\n    public PngEncoder(Image image, boolean encodeAlpha, int whichFilter, int compLevel) {\n        this.image = image;\n        this.encodeAlpha = encodeAlpha;\n        setFilter(whichFilter);\n        if (compLevel >= 0 && compLevel <= 9) {\n            this.compressionLevel = compLevel;\n        }\n    }\n\n    /**\n     * Set the image to be encoded\n     *\n     * @param image A Java Image object which uses the DirectColorModel\n     * @see java.awt.Image\n     * @see java.awt.image.DirectColorModel\n     */\n    public void setImage(Image image) {\n        this.image = image;\n        pngBytes = null;\n    }\n\n    /**\n     * Creates an array of bytes that is the PNG equivalent of the current image, specifying whether to encode alpha or not.\n     *\n     * @param encodeAlpha boolean false=no alpha, true=encode alpha\n     * @return an array of bytes, or null if there was a problem\n     */\n    public byte[] pngEncode(boolean encodeAlpha) {\n        byte[] pngIdBytes = { -119, 80, 78, 71, 13, 10, 26, 10 };\n        int i;\n        if (image == null) {\n            return null;\n        }\n        width = image.getWidth(null);\n        height = image.getHeight(null);\n        this.image = image;\n        /*\n         * start with an array that is big enough to hold all the pixels\n         * (plus filter bytes), and an extra 200 bytes for header info\n         */\n        pngBytes = new byte[((width + 1) * height * 3) + 200];\n        /*\n         * keep track of largest byte written to the array\n         */\n        maxPos = 0;\n        bytePos = writeBytes(pngIdBytes, 0);\n        hdrPos = bytePos;\n        writeHeader();\n        dataPos = bytePos;\n        if (writeImageData()) {\n            writeEnd();\n            pngBytes = resizeByteArray(pngBytes, maxPos);\n        } else {\n            pngBytes = null;\n        }\n        return pngBytes;\n    }\n\n    /**\n     * Creates an array of bytes that is the PNG equivalent of the current image.\n     * Alpha encoding is determined by its setting in the constructor.\n     *\n     * @return an array of bytes, or null if there was a problem\n     */\n    public byte[] pngEncode() {\n        return pngEncode(encodeAlpha);\n    }\n\n    /**\n     * Set the alpha encoding on or off.\n     *\n     * @param encodeAlpha  false=no, true=yes\n     */\n    public void setEncodeAlpha(boolean encodeAlpha) {\n        this.encodeAlpha = encodeAlpha;\n    }\n\n    /**\n     * Retrieve alpha encoding status.\n     *\n     * @return boolean false=no, true=yes\n     */\n    public boolean getEncodeAlpha() {\n        return encodeAlpha;\n    }\n\n    /**\n     * Set the filter to use\n     *\n     * @param whichFilter from constant list\n     */\n    public void setFilter(int whichFilter) {\n        this.filter = FILTER_NONE;\n        if (whichFilter <= FILTER_LAST) {\n            this.filter = whichFilter;\n        }\n    }\n\n    /**\n     * Retrieve filtering scheme\n     *\n     * @return int (see constant list)\n     */\n    public int getFilter() {\n        return filter;\n    }\n\n    /**\n     * Set the compression level to use\n     *\n     * @param level 0 through 9\n     */\n    public void setCompressionLevel(int level) {\n        if (level >= 0 && level <= 9) {\n            this.compressionLevel = level;\n        }\n    }\n\n    /**\n     * Retrieve compression level\n     *\n     * @return int in range 0-9\n     */\n    public int getCompressionLevel() {\n        return compressionLevel;\n    }\n\n    /**\n     * Increase or decrease the length of a byte array.\n     *\n     * @param array The original array.\n     * @param newLength The length you wish the new array to have.\n     * @return Array of newly desired length. If shorter than the\n     *         original, the trailing elements are truncated.\n     */\n    protected byte[] resizeByteArray(byte[] array, int newLength) {\n        byte[] newArray = new byte[newLength];\n        int oldLength = array.length;\n        System.arraycopy(array, 0, newArray, 0, Math.min(oldLength, newLength));\n        return newArray;\n    }\n\n    /**\n     * Write an array of bytes into the pngBytes array.\n     * Note: This routine has the side effect of updating\n     * maxPos, the largest element written in the array.\n     * The array is resized by 1000 bytes or the length\n     * of the data to be written, whichever is larger.\n     *\n     * @param data The data to be written into pngBytes.\n     * @param offset The starting point to write to.\n     * @return The next place to be written to in the pngBytes array.\n     */\n    protected int writeBytes(byte[] data, int offset) {\n        maxPos = Math.max(maxPos, offset + data.length);\n        if (data.length + offset > pngBytes.length) {\n            pngBytes = resizeByteArray(pngBytes, pngBytes.length + Math.max(1000, data.length));\n        }\n        System.arraycopy(data, 0, pngBytes, offset, data.length);\n        return offset + data.length;\n    }\n\n    /**\n     * Write an array of bytes into the pngBytes array, specifying number of bytes to write.\n     * Note: This routine has the side effect of updating\n     * maxPos, the largest element written in the array.\n     * The array is resized by 1000 bytes or the length\n     * of the data to be written, whichever is larger.\n     *\n     * @param data The data to be written into pngBytes.\n     * @param nBytes The number of bytes to be written.\n     * @param offset The starting point to write to.\n     * @return The next place to be written to in the pngBytes array.\n     */\n    protected int writeBytes(byte[] data, int nBytes, int offset) {\n        maxPos = Math.max(maxPos, offset + nBytes);\n        if (nBytes + offset > pngBytes.length) {\n            pngBytes = resizeByteArray(pngBytes, pngBytes.length + Math.max(1000, nBytes));\n        }\n        System.arraycopy(data, 0, pngBytes, offset, nBytes);\n        return offset + nBytes;\n    }\n\n    /**\n     * Write a two-byte integer into the pngBytes array at a given position.\n     *\n     * @param n The integer to be written into pngBytes.\n     * @param offset The starting point to write to.\n     * @return The next place to be written to in the pngBytes array.\n     */\n    protected int writeInt2(int n, int offset) {\n        byte[] temp = { (byte) ((n >> 8) & 0xff), (byte) (n & 0xff) };\n        return writeBytes(temp, offset);\n    }\n\n    /**\n     * Write a four-byte integer into the pngBytes array at a given position.\n     *\n     * @param n The integer to be written into pngBytes.\n     * @param offset The starting point to write to.\n     * @return The next place to be written to in the pngBytes array.\n     */\n    protected int writeInt4(int n, int offset) {\n        byte[] temp = { (byte) ((n >> 24) & 0xff), (byte) ((n >> 16) & 0xff), (byte) ((n >> 8) & 0xff), (byte) (n & 0xff) };\n        return writeBytes(temp, offset);\n    }\n\n    /**\n     * Write a single byte into the pngBytes array at a given position.\n     *\n     * @param n The integer to be written into pngBytes.\n     * @param offset The starting point to write to.\n     * @return The next place to be written to in the pngBytes array.\n     */\n    protected int writeByte(int b, int offset) {\n        byte[] temp = { (byte) b };\n        return writeBytes(temp, offset);\n    }\n\n    /**\n     * Write a string into the pngBytes array at a given position.\n     * This uses the getBytes method, so the encoding used will\n     * be its default.\n     *\n     * @param n The integer to be written into pngBytes.\n     * @param offset The starting point to write to.\n     * @return The next place to be written to in the pngBytes array.\n     * @see java.lang.String#getBytes()\n     */\n    protected int writeString(String s, int offset) {\n        return writeBytes(s.getBytes(), offset);\n    }\n\n    /**\n     * Write a PNG \"IHDR\" chunk into the pngBytes array.\n     */\n    protected void writeHeader() {\n        int startPos;\n        startPos = bytePos = writeInt4(13, bytePos);\n        bytePos = writeString(\"IHDR\", bytePos);\n        width = image.getWidth(null);\n        height = image.getHeight(null);\n        bytePos = writeInt4(width, bytePos);\n        bytePos = writeInt4(height, bytePos);\n        // bit depth\n        bytePos = writeByte(8, bytePos);\n        // direct model\n        bytePos = writeByte((encodeAlpha) ? 6 : 2, bytePos);\n        // compression method\n        bytePos = writeByte(0, bytePos);\n        // filter method\n        bytePos = writeByte(0, bytePos);\n        // no interlace\n        bytePos = writeByte(0, bytePos);\n        crc.reset();\n        crc.update(pngBytes, startPos, bytePos - startPos);\n        crcValue = crc.getValue();\n        bytePos = writeInt4((int) crcValue, bytePos);\n    }\n\n    /**\n     * Perform \"sub\" filtering on the given row.\n     * Uses temporary array leftBytes to store the original values\n     * of the previous pixels.  The array is 16 bytes long, which\n     * will easily hold two-byte samples plus two-byte alpha.\n     *\n     * @param pixels The array holding the scan lines being built\n     * @param startPos Starting position within pixels of bytes to be filtered.\n     * @param width Width of a scanline in pixels.\n     */\n    protected void filterSub(byte[] pixels, int startPos, int width) {\n        int i;\n        int offset = bytesPerPixel;\n        int actualStart = startPos + offset;\n        int nBytes = width * bytesPerPixel;\n        int leftInsert = offset;\n        int leftExtract = 0;\n        byte current_byte;\n        for (i = actualStart; i < startPos + nBytes; i++) {\n            leftBytes[leftInsert] = pixels[i];\n            pixels[i] = (byte) ((pixels[i] - leftBytes[leftExtract]) % 256);\n            leftInsert = (leftInsert + 1) % 0x0f;\n            leftExtract = (leftExtract + 1) % 0x0f;\n        }\n    }\n\n    /**\n     * Perform \"up\" filtering on the given row.\n     * Side effect: refills the prior row with current row\n     *\n     * @param pixels The array holding the scan lines being built\n     * @param startPos Starting position within pixels of bytes to be filtered.\n     * @param width Width of a scanline in pixels.\n     */\n    protected void filterUp(byte[] pixels, int startPos, int width) {\n        int i, nBytes;\n        byte current_byte;\n        nBytes = width * bytesPerPixel;\n        for (i = 0; i < nBytes; i++) {\n            current_byte = pixels[startPos + i];\n            pixels[startPos + i] = (byte) ((pixels[startPos + i] - priorRow[i]) % 256);\n            priorRow[i] = current_byte;\n        }\n    }\n\n    /**\n     * Write the image data into the pngBytes array.\n     * This will write one or more PNG \"IDAT\" chunks. In order\n     * to conserve memory, this method grabs as many rows as will\n     * fit into 32K bytes, or the whole image; whichever is less.\n     *\n     * @return true if no errors; false if error grabbing pixels\n     */\n    protected boolean writeImageData() {\n        // number of rows remaining to write\n        int rowsLeft = height;\n        // starting row to process this time through\n        int startRow = 0;\n        // how many rows to grab at a time\n        int nRows;\n        // the scan lines to be compressed\n        byte[] scanLines;\n        // where we are in the scan lines\n        int scanPos;\n        // where this line's actual pixels start (used for filtering)\n        int startPos;\n        // the resultant compressed lines\n        byte[] compressedLines;\n        // how big is the compressed area?\n        int nCompressed;\n        // color depth ( handle only 8 or 32 )\n        int depth;\n        PixelGrabber pg;\n        bytesPerPixel = (encodeAlpha) ? 4 : 3;\n        Deflater scrunch = new Deflater(compressionLevel);\n        ByteArrayOutputStream outBytes = new ByteArrayOutputStream(1024);\n        DeflaterOutputStream compBytes = new DeflaterOutputStream(outBytes, scrunch);\n        try {\n            while (rowsLeft > 0) {\n                nRows = Math.min(32767 / (width * (bytesPerPixel + 1)), rowsLeft);\n                // nRows = rowsLeft;\n                int[] pixels = new int[width * nRows];\n                pg = new PixelGrabber(image, 0, startRow, width, nRows, pixels, 0, width);\n                try {\n                    pg.grabPixels();\n                } catch (Exception e) {\n                    System.err.println(\"interrupted waiting for pixels!\");\n                    return false;\n                }\n                if ((pg.getStatus() & ImageObserver.ABORT) != 0) {\n                    System.err.println(\"image fetch aborted or errored\");\n                    return false;\n                }\n                /*\n                 * Create a data chunk. scanLines adds \"nRows\" for\n                 * the filter bytes. \n                 */\n                scanLines = new byte[width * nRows * bytesPerPixel + nRows];\n                if (filter == FILTER_SUB) {\n                    leftBytes = new byte[16];\n                }\n                if (filter == FILTER_UP) {\n                    priorRow = new byte[width * bytesPerPixel];\n                }\n                scanPos = 0;\n                startPos = 1;\n                for (int i = 0; i < width * nRows; i++) {\n                    if (i % width == 0) {\n                        scanLines[scanPos++] = (byte) filter;\n                        startPos = scanPos;\n                    }\n                    scanLines[scanPos++] = (byte) ((pixels[i] >> 16) & 0xff);\n                    scanLines[scanPos++] = (byte) ((pixels[i] >> 8) & 0xff);\n                    scanLines[scanPos++] = (byte) ((pixels[i]) & 0xff);\n                    if (encodeAlpha) {\n                        scanLines[scanPos++] = (byte) ((pixels[i] >> 24) & 0xff);\n                    }\n                    if ((i % width == width - 1) && (filter != FILTER_NONE)) {\n                        if (filter == FILTER_SUB) {\n                            filterSub(scanLines, startPos, width);\n                        }\n                        if (filter == FILTER_UP) {\n                            filterUp(scanLines, startPos, width);\n                        }\n                    }\n                }\n                /*\n                 * Write these lines to the output area\n                 */\n                compBytes.write(scanLines, 0, scanPos);\n                startRow += nRows;\n                rowsLeft -= nRows;\n            }\n            compBytes.close();\n            /*\n             * Write the compressed bytes\n             */\n            compressedLines = outBytes.toByteArray();\n            nCompressed = compressedLines.length;\n            crc.reset();\n            bytePos = writeInt4(nCompressed, bytePos);\n            bytePos = writeString(\"IDAT\", bytePos);\n            crc.update(\"IDAT\".getBytes());\n            bytePos = writeBytes(compressedLines, nCompressed, bytePos);\n            crc.update(compressedLines, 0, nCompressed);\n            crcValue = crc.getValue();\n            bytePos = writeInt4((int) crcValue, bytePos);\n            scrunch.finish();\n            return true;\n        } catch (IOException e) {\n            System.err.println(e.toString());\n            return false;\n        }\n    }\n\n    /**\n     * Write a PNG \"IEND\" chunk into the pngBytes array.\n     */\n    protected void writeEnd() {\n        bytePos = writeInt4(0, bytePos);\n        bytePos = writeString(\"IEND\", bytePos);\n        crc.reset();\n        crc.update(\"IEND\".getBytes());\n        crcValue = crc.getValue();\n        bytePos = writeInt4((int) crcValue, bytePos);\n    }\n}\n",
		"id": "/EvoSuiteBenchmark/35_corina/src/main/java/corina/map/PngEncoder_1Test.java",
		"test_prompt": "// PngEncoder_1Test.java\npackage corina.map;\n\n// package com.keypoint;\n/**\n * PngEncoder takes a Java Image object and creates a byte string which can be saved as a PNG file.\n * The Image is presumed to use the DirectColorModel.\n *\n * Thanks to Jay Denny at KeyPoint Software\n *    http://www.keypoint.com/\n * who let me develop this code on company time.\n *\n * You may contact me with (probably very-much-needed) improvements,\n * comments, and bug fixes at:\n *\n *   david@catcode.com\n *\n * This library is free software; you can redistribute it and/or\n * modify it under the terms of the GNU Lesser General Public\n * License as published by the Free Software Foundation; either\n * version 2.1 of the License, or (at your option) any later version.\n *\n * This library is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n * Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public\n * License along with this library; if not, write to the Free Software\n * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n * A copy of the GNU LGPL may be found at\n * http://www.gnu.org/copyleft/lesser.html,\n *\n * @author J. David Eisenberg\n * @version 1.4, 31 March 2000\n */\nimport java.awt.*;\nimport java.awt.image.*;\nimport java.awt.image.DirectColorModel;\nimport java.util.*;\nimport java.util.zip.*;\nimport java.io.*;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link PngEncoder}.\n* It contains ten unit test cases for the {@link PngEncoder#pngEncode()} method.\n*/\nclass PngEncoder_1Test {"
	},
	{
		"original_code": "// PngEncoderB.java\npackage corina.map;\n\n// package com.keypoint;\n/**\n * PngEncoderB takes a Java BufferedImage object and creates a byte string which can be saved as a PNG file.\n * The encoder will accept BufferedImages with eight-bit samples\n * or 4-byte ARGB samples.\n *\n * There is also code to handle 4-byte samples returned as\n * one int per pixel, but that has not been tested.\n *\n * Thanks to Jay Denny at KeyPoint Software\n *    http://www.keypoint.com/\n * who let me develop this code on company time.\n *\n * You may contact me with (probably very-much-needed) improvements,\n * comments, and bug fixes at:\n *\n *   david@catcode.com\n *\n * This library is free software; you can redistribute it and/or\n * modify it under the terms of the GNU Lesser General Public\n * License as published by the Free Software Foundation; either\n * version 2.1 of the License, or (at your option) any later version.\n *\n * This library is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n * Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public\n * License along with this library; if not, write to the Free Software\n * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n * A copy of the GNU LGPL may be found at\n * http://www.gnu.org/copyleft/lesser.html,\n *\n * @author J. David Eisenberg\n * @version 1.4, 31 March 2000\n */\nimport java.awt.*;\nimport java.awt.image.*;\nimport java.util.*;\nimport java.util.zip.*;\nimport java.io.*;\n\npublic class PngEncoderB extends PngEncoder {\n\n    protected BufferedImage image;\n\n    protected WritableRaster wRaster;\n\n    protected int tType;\n\n    /**\n     * Class constructor\n     */\n    public PngEncoderB() {\n        this(null, false, FILTER_NONE, 0);\n    }\n\n    /**\n     * Class constructor specifying BufferedImage to encode, with no alpha channel encoding.\n     *\n     * @param image A Java BufferedImage object\n     */\n    public PngEncoderB(BufferedImage image) {\n        this(image, false, FILTER_NONE, 0);\n    }\n\n    /**\n     * Class constructor specifying BufferedImage to encode, and whether to encode alpha.\n     *\n     * @param image A Java BufferedImage object\n     * @param encodeAlpha Encode the alpha channel? false=no; true=yes\n     */\n    public PngEncoderB(BufferedImage image, boolean encodeAlpha) {\n        this(image, encodeAlpha, FILTER_NONE, 0);\n    }\n\n    /**\n     * Class constructor specifying BufferedImage to encode, whether to encode alpha, and filter to use.\n     *\n     * @param image A Java BufferedImage object\n     * @param encodeAlpha Encode the alpha channel? false=no; true=yes\n     * @param whichFilter 0=none, 1=sub, 2=up\n     */\n    public PngEncoderB(BufferedImage image, boolean encodeAlpha, int whichFilter) {\n        this(image, encodeAlpha, whichFilter, 0);\n    }\n\n    /**\n     * Class constructor specifying BufferedImage source to encode, whether to encode alpha, filter to use, and compression level\n     *\n     * @param image A Java BufferedImage object\n     * @param encodeAlpha Encode the alpha channel? false=no; true=yes\n     * @param whichFilter 0=none, 1=sub, 2=up\n     * @param compLevel 0..9\n     */\n    public PngEncoderB(BufferedImage image, boolean encodeAlpha, int whichFilter, int compLevel) {\n        this.image = image;\n        this.encodeAlpha = encodeAlpha;\n        setFilter(whichFilter);\n        if (compLevel >= 0 && compLevel <= 9) {\n            this.compressionLevel = compLevel;\n        }\n    }\n\n    /**\n     * Set the BufferedImage to be encoded\n     *\n     * @param BufferedImage A Java BufferedImage object\n     */\n    public void setImage(BufferedImage image) {\n        this.image = image;\n        pngBytes = null;\n    }\n\n    /**\n     * Creates an array of bytes that is the PNG equivalent of the current image, specifying whether to encode alpha or not.\n     *\n     * @param encodeAlpha boolean false=no alpha, true=encode alpha\n     * @return an array of bytes, or null if there was a problem\n     */\n    public byte[] pngEncode(boolean encodeAlpha) {\n        byte[] pngIdBytes = { -119, 80, 78, 71, 13, 10, 26, 10 };\n        int i;\n        if (image == null) {\n            return null;\n        }\n        width = image.getWidth(null);\n        height = image.getHeight(null);\n        this.image = image;\n        if (!establishStorageInfo()) {\n            return null;\n        }\n        /*\n         * start with an array that is big enough to hold all the pixels\n         * (plus filter bytes), and an extra 200 bytes for header info\n         */\n        pngBytes = new byte[((width + 1) * height * 3) + 200];\n        /*\n         * keep track of largest byte written to the array\n         */\n        maxPos = 0;\n        bytePos = writeBytes(pngIdBytes, 0);\n        hdrPos = bytePos;\n        writeHeader();\n        dataPos = bytePos;\n        if (writeImageData()) {\n            writeEnd();\n            pngBytes = resizeByteArray(pngBytes, maxPos);\n        } else {\n            pngBytes = null;\n        }\n        return pngBytes;\n    }\n\n    /**\n     * Creates an array of bytes that is the PNG equivalent of the current image.\n     * Alpha encoding is determined by its setting in the constructor.\n     *\n     * @return an array of bytes, or null if there was a problem\n     */\n    public byte[] pngEncode() {\n        return pngEncode(encodeAlpha);\n    }\n\n    /**\n     * Get and set variables that determine how picture is stored.\n     *\n     * Retrieves the writable raster of the buffered image,\n     * as well its transfer type.\n     *\n     * Sets number of output bytes per pixel, and, if only\n     * eight-bit bytes, turns off alpha encoding.\n     * @return true if 1-byte or 4-byte data, false otherwise\n     */\n    protected boolean establishStorageInfo() {\n        int dataBytes;\n        wRaster = image.getRaster();\n        dataBytes = wRaster.getNumDataElements();\n        tType = wRaster.getTransferType();\n        if (((tType == DataBuffer.TYPE_BYTE) && (dataBytes == 4)) || ((tType == DataBuffer.TYPE_INT) && (dataBytes == 1))) {\n            bytesPerPixel = (encodeAlpha) ? 4 : 3;\n        } else if ((tType == DataBuffer.TYPE_BYTE) && (dataBytes == 1)) {\n            bytesPerPixel = 1;\n            // one-byte samples\n            encodeAlpha = false;\n        } else {\n            return false;\n        }\n        return true;\n    }\n\n    /**\n     * Write a PNG \"IHDR\" chunk into the pngBytes array.\n     */\n    protected void writeHeader() {\n        int startPos;\n        startPos = bytePos = writeInt4(13, bytePos);\n        bytePos = writeString(\"IHDR\", bytePos);\n        width = image.getWidth(null);\n        height = image.getHeight(null);\n        bytePos = writeInt4(width, bytePos);\n        bytePos = writeInt4(height, bytePos);\n        // bit depth\n        bytePos = writeByte(8, bytePos);\n        if (bytesPerPixel != 1) {\n            // direct model\n            bytePos = writeByte((encodeAlpha) ? 6 : 2, bytePos);\n        } else {\n            // indexed\n            bytePos = writeByte(3, bytePos);\n        }\n        // compression method\n        bytePos = writeByte(0, bytePos);\n        // filter method\n        bytePos = writeByte(0, bytePos);\n        // no interlace\n        bytePos = writeByte(0, bytePos);\n        crc.reset();\n        crc.update(pngBytes, startPos, bytePos - startPos);\n        crcValue = crc.getValue();\n        bytePos = writeInt4((int) crcValue, bytePos);\n    }\n\n    protected void writePalette(IndexColorModel icm) {\n        byte[] redPal = new byte[256];\n        byte[] greenPal = new byte[256];\n        byte[] bluePal = new byte[256];\n        byte[] allPal = new byte[768];\n        int i;\n        icm.getReds(redPal);\n        icm.getGreens(greenPal);\n        icm.getBlues(bluePal);\n        for (i = 0; i < 256; i++) {\n            allPal[i * 3] = redPal[i];\n            allPal[i * 3 + 1] = greenPal[i];\n            allPal[i * 3 + 2] = bluePal[i];\n        }\n        bytePos = writeInt4(768, bytePos);\n        bytePos = writeString(\"PLTE\", bytePos);\n        crc.reset();\n        crc.update(\"PLTE\".getBytes());\n        bytePos = writeBytes(allPal, bytePos);\n        crc.update(allPal);\n        crcValue = crc.getValue();\n        bytePos = writeInt4((int) crcValue, bytePos);\n    }\n\n    /**\n     * Write the image data into the pngBytes array.\n     * This will write one or more PNG \"IDAT\" chunks. In order\n     * to conserve memory, this method grabs as many rows as will\n     * fit into 32K bytes, or the whole image; whichever is less.\n     *\n     * @return true if no errors; false if error grabbing pixels\n     */\n    protected boolean writeImageData() {\n        // number of rows remaining to write\n        int rowsLeft = height;\n        // starting row to process this time through\n        int startRow = 0;\n        // how many rows to grab at a time\n        int nRows;\n        // the scan lines to be compressed\n        byte[] scanLines;\n        // where we are in the scan lines\n        int scanPos;\n        // where this line's actual pixels start (used for filtering)\n        int startPos;\n        // position from which source pixels are read\n        int readPos;\n        // the resultant compressed lines\n        byte[] compressedLines;\n        // how big is the compressed area?\n        int nCompressed;\n        // storage area for byte-sized pixels\n        byte[] pixels;\n        // storage area for int-sized pixels\n        int[] iPixels;\n        Deflater scrunch = new Deflater(compressionLevel);\n        ByteArrayOutputStream outBytes = new ByteArrayOutputStream(1024);\n        DeflaterOutputStream compBytes = new DeflaterOutputStream(outBytes, scrunch);\n        if (bytesPerPixel == 1) {\n            writePalette((IndexColorModel) image.getColorModel());\n        }\n        try {\n            while (rowsLeft > 0) {\n                nRows = Math.min(32767 / (width * (bytesPerPixel + 1)), rowsLeft);\n                // nRows = rowsLeft;\n                /*\n                 * Create a data chunk. scanLines adds \"nRows\" for\n                 * the filter bytes.\n                 */\n                scanLines = new byte[width * nRows * bytesPerPixel + nRows];\n                if (filter == FILTER_SUB) {\n                    leftBytes = new byte[16];\n                }\n                if (filter == FILTER_UP) {\n                    priorRow = new byte[width * bytesPerPixel];\n                }\n                if (tType == DataBuffer.TYPE_BYTE) {\n                    pixels = (byte[]) wRaster.getDataElements(0, startRow, width, nRows, null);\n                    iPixels = null;\n                } else {\n                    iPixels = (int[]) wRaster.getDataElements(0, startRow, width, nRows, null);\n                    pixels = null;\n                }\n                scanPos = 0;\n                readPos = 0;\n                startPos = 1;\n                for (int i = 0; i < width * nRows; i++) {\n                    if (i % width == 0) {\n                        scanLines[scanPos++] = (byte) filter;\n                        startPos = scanPos;\n                    }\n                    if (bytesPerPixel == 1) {\n                        scanLines[scanPos++] = pixels[readPos++];\n                    } else if (tType == DataBuffer.TYPE_BYTE) {\n                        scanLines[scanPos++] = pixels[readPos++];\n                        scanLines[scanPos++] = pixels[readPos++];\n                        scanLines[scanPos++] = pixels[readPos++];\n                        if (encodeAlpha) {\n                            scanLines[scanPos++] = pixels[readPos++];\n                        } else {\n                            readPos++;\n                        }\n                    } else {\n                        scanLines[scanPos++] = (byte) ((iPixels[readPos] >> 16) & 0xff);\n                        scanLines[scanPos++] = (byte) ((iPixels[readPos] >> 8) & 0xff);\n                        scanLines[scanPos++] = (byte) ((iPixels[readPos]) & 0xff);\n                        if (encodeAlpha) {\n                            scanLines[scanPos++] = (byte) ((iPixels[readPos] >> 24) & 0xff);\n                        }\n                        readPos++;\n                    }\n                    if ((i % width == width - 1) && (filter != FILTER_NONE)) {\n                        if (filter == FILTER_SUB) {\n                            filterSub(scanLines, startPos, width);\n                        }\n                        if (filter == FILTER_UP) {\n                            filterUp(scanLines, startPos, width);\n                        }\n                    }\n                }\n                /*\n                 * Write these lines to the output area\n                 */\n                compBytes.write(scanLines, 0, scanPos);\n                startRow += nRows;\n                rowsLeft -= nRows;\n            }\n            compBytes.close();\n            /*\n             * Write the compressed bytes\n             */\n            compressedLines = outBytes.toByteArray();\n            nCompressed = compressedLines.length;\n            crc.reset();\n            bytePos = writeInt4(nCompressed, bytePos);\n            bytePos = writeString(\"IDAT\", bytePos);\n            crc.update(\"IDAT\".getBytes());\n            bytePos = writeBytes(compressedLines, nCompressed, bytePos);\n            crc.update(compressedLines, 0, nCompressed);\n            crcValue = crc.getValue();\n            bytePos = writeInt4((int) crcValue, bytePos);\n            scrunch.finish();\n            return true;\n        } catch (IOException e) {\n            System.err.println(e.toString());\n            return false;\n        }\n    }\n}\n",
		"id": "/EvoSuiteBenchmark/35_corina/src/main/java/corina/map/PngEncoderB_0Test.java",
		"test_prompt": "// PngEncoderB_0Test.java\npackage corina.map;\n\n// package com.keypoint;\n/**\n * PngEncoderB takes a Java BufferedImage object and creates a byte string which can be saved as a PNG file.\n * The encoder will accept BufferedImages with eight-bit samples\n * or 4-byte ARGB samples.\n *\n * There is also code to handle 4-byte samples returned as\n * one int per pixel, but that has not been tested.\n *\n * Thanks to Jay Denny at KeyPoint Software\n *    http://www.keypoint.com/\n * who let me develop this code on company time.\n *\n * You may contact me with (probably very-much-needed) improvements,\n * comments, and bug fixes at:\n *\n *   david@catcode.com\n *\n * This library is free software; you can redistribute it and/or\n * modify it under the terms of the GNU Lesser General Public\n * License as published by the Free Software Foundation; either\n * version 2.1 of the License, or (at your option) any later version.\n *\n * This library is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n * Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public\n * License along with this library; if not, write to the Free Software\n * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n * A copy of the GNU LGPL may be found at\n * http://www.gnu.org/copyleft/lesser.html,\n *\n * @author J. David Eisenberg\n * @version 1.4, 31 March 2000\n */\nimport java.awt.*;\nimport java.awt.image.*;\nimport java.util.*;\nimport java.util.zip.*;\nimport java.io.*;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link PngEncoderB}.\n* It contains ten unit test cases for the {@link PngEncoderB#pngEncode(boolean)} method.\n*/\nclass PngEncoderB_0Test {"
	},
	{
		"original_code": "// PngEncoderB.java\npackage corina.map;\n\n// package com.keypoint;\n/**\n * PngEncoderB takes a Java BufferedImage object and creates a byte string which can be saved as a PNG file.\n * The encoder will accept BufferedImages with eight-bit samples\n * or 4-byte ARGB samples.\n *\n * There is also code to handle 4-byte samples returned as\n * one int per pixel, but that has not been tested.\n *\n * Thanks to Jay Denny at KeyPoint Software\n *    http://www.keypoint.com/\n * who let me develop this code on company time.\n *\n * You may contact me with (probably very-much-needed) improvements,\n * comments, and bug fixes at:\n *\n *   david@catcode.com\n *\n * This library is free software; you can redistribute it and/or\n * modify it under the terms of the GNU Lesser General Public\n * License as published by the Free Software Foundation; either\n * version 2.1 of the License, or (at your option) any later version.\n *\n * This library is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n * Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public\n * License along with this library; if not, write to the Free Software\n * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n * A copy of the GNU LGPL may be found at\n * http://www.gnu.org/copyleft/lesser.html,\n *\n * @author J. David Eisenberg\n * @version 1.4, 31 March 2000\n */\nimport java.awt.*;\nimport java.awt.image.*;\nimport java.util.*;\nimport java.util.zip.*;\nimport java.io.*;\n\npublic class PngEncoderB extends PngEncoder {\n\n    protected BufferedImage image;\n\n    protected WritableRaster wRaster;\n\n    protected int tType;\n\n    /**\n     * Class constructor\n     */\n    public PngEncoderB() {\n        this(null, false, FILTER_NONE, 0);\n    }\n\n    /**\n     * Class constructor specifying BufferedImage to encode, with no alpha channel encoding.\n     *\n     * @param image A Java BufferedImage object\n     */\n    public PngEncoderB(BufferedImage image) {\n        this(image, false, FILTER_NONE, 0);\n    }\n\n    /**\n     * Class constructor specifying BufferedImage to encode, and whether to encode alpha.\n     *\n     * @param image A Java BufferedImage object\n     * @param encodeAlpha Encode the alpha channel? false=no; true=yes\n     */\n    public PngEncoderB(BufferedImage image, boolean encodeAlpha) {\n        this(image, encodeAlpha, FILTER_NONE, 0);\n    }\n\n    /**\n     * Class constructor specifying BufferedImage to encode, whether to encode alpha, and filter to use.\n     *\n     * @param image A Java BufferedImage object\n     * @param encodeAlpha Encode the alpha channel? false=no; true=yes\n     * @param whichFilter 0=none, 1=sub, 2=up\n     */\n    public PngEncoderB(BufferedImage image, boolean encodeAlpha, int whichFilter) {\n        this(image, encodeAlpha, whichFilter, 0);\n    }\n\n    /**\n     * Class constructor specifying BufferedImage source to encode, whether to encode alpha, filter to use, and compression level\n     *\n     * @param image A Java BufferedImage object\n     * @param encodeAlpha Encode the alpha channel? false=no; true=yes\n     * @param whichFilter 0=none, 1=sub, 2=up\n     * @param compLevel 0..9\n     */\n    public PngEncoderB(BufferedImage image, boolean encodeAlpha, int whichFilter, int compLevel) {\n        this.image = image;\n        this.encodeAlpha = encodeAlpha;\n        setFilter(whichFilter);\n        if (compLevel >= 0 && compLevel <= 9) {\n            this.compressionLevel = compLevel;\n        }\n    }\n\n    /**\n     * Set the BufferedImage to be encoded\n     *\n     * @param BufferedImage A Java BufferedImage object\n     */\n    public void setImage(BufferedImage image) {\n        this.image = image;\n        pngBytes = null;\n    }\n\n    /**\n     * Creates an array of bytes that is the PNG equivalent of the current image, specifying whether to encode alpha or not.\n     *\n     * @param encodeAlpha boolean false=no alpha, true=encode alpha\n     * @return an array of bytes, or null if there was a problem\n     */\n    public byte[] pngEncode(boolean encodeAlpha) {\n        byte[] pngIdBytes = { -119, 80, 78, 71, 13, 10, 26, 10 };\n        int i;\n        if (image == null) {\n            return null;\n        }\n        width = image.getWidth(null);\n        height = image.getHeight(null);\n        this.image = image;\n        if (!establishStorageInfo()) {\n            return null;\n        }\n        /*\n         * start with an array that is big enough to hold all the pixels\n         * (plus filter bytes), and an extra 200 bytes for header info\n         */\n        pngBytes = new byte[((width + 1) * height * 3) + 200];\n        /*\n         * keep track of largest byte written to the array\n         */\n        maxPos = 0;\n        bytePos = writeBytes(pngIdBytes, 0);\n        hdrPos = bytePos;\n        writeHeader();\n        dataPos = bytePos;\n        if (writeImageData()) {\n            writeEnd();\n            pngBytes = resizeByteArray(pngBytes, maxPos);\n        } else {\n            pngBytes = null;\n        }\n        return pngBytes;\n    }\n\n    /**\n     * Creates an array of bytes that is the PNG equivalent of the current image.\n     * Alpha encoding is determined by its setting in the constructor.\n     *\n     * @return an array of bytes, or null if there was a problem\n     */\n    public byte[] pngEncode() {\n        return pngEncode(encodeAlpha);\n    }\n\n    /**\n     * Get and set variables that determine how picture is stored.\n     *\n     * Retrieves the writable raster of the buffered image,\n     * as well its transfer type.\n     *\n     * Sets number of output bytes per pixel, and, if only\n     * eight-bit bytes, turns off alpha encoding.\n     * @return true if 1-byte or 4-byte data, false otherwise\n     */\n    protected boolean establishStorageInfo() {\n        int dataBytes;\n        wRaster = image.getRaster();\n        dataBytes = wRaster.getNumDataElements();\n        tType = wRaster.getTransferType();\n        if (((tType == DataBuffer.TYPE_BYTE) && (dataBytes == 4)) || ((tType == DataBuffer.TYPE_INT) && (dataBytes == 1))) {\n            bytesPerPixel = (encodeAlpha) ? 4 : 3;\n        } else if ((tType == DataBuffer.TYPE_BYTE) && (dataBytes == 1)) {\n            bytesPerPixel = 1;\n            // one-byte samples\n            encodeAlpha = false;\n        } else {\n            return false;\n        }\n        return true;\n    }\n\n    /**\n     * Write a PNG \"IHDR\" chunk into the pngBytes array.\n     */\n    protected void writeHeader() {\n        int startPos;\n        startPos = bytePos = writeInt4(13, bytePos);\n        bytePos = writeString(\"IHDR\", bytePos);\n        width = image.getWidth(null);\n        height = image.getHeight(null);\n        bytePos = writeInt4(width, bytePos);\n        bytePos = writeInt4(height, bytePos);\n        // bit depth\n        bytePos = writeByte(8, bytePos);\n        if (bytesPerPixel != 1) {\n            // direct model\n            bytePos = writeByte((encodeAlpha) ? 6 : 2, bytePos);\n        } else {\n            // indexed\n            bytePos = writeByte(3, bytePos);\n        }\n        // compression method\n        bytePos = writeByte(0, bytePos);\n        // filter method\n        bytePos = writeByte(0, bytePos);\n        // no interlace\n        bytePos = writeByte(0, bytePos);\n        crc.reset();\n        crc.update(pngBytes, startPos, bytePos - startPos);\n        crcValue = crc.getValue();\n        bytePos = writeInt4((int) crcValue, bytePos);\n    }\n\n    protected void writePalette(IndexColorModel icm) {\n        byte[] redPal = new byte[256];\n        byte[] greenPal = new byte[256];\n        byte[] bluePal = new byte[256];\n        byte[] allPal = new byte[768];\n        int i;\n        icm.getReds(redPal);\n        icm.getGreens(greenPal);\n        icm.getBlues(bluePal);\n        for (i = 0; i < 256; i++) {\n            allPal[i * 3] = redPal[i];\n            allPal[i * 3 + 1] = greenPal[i];\n            allPal[i * 3 + 2] = bluePal[i];\n        }\n        bytePos = writeInt4(768, bytePos);\n        bytePos = writeString(\"PLTE\", bytePos);\n        crc.reset();\n        crc.update(\"PLTE\".getBytes());\n        bytePos = writeBytes(allPal, bytePos);\n        crc.update(allPal);\n        crcValue = crc.getValue();\n        bytePos = writeInt4((int) crcValue, bytePos);\n    }\n\n    /**\n     * Write the image data into the pngBytes array.\n     * This will write one or more PNG \"IDAT\" chunks. In order\n     * to conserve memory, this method grabs as many rows as will\n     * fit into 32K bytes, or the whole image; whichever is less.\n     *\n     * @return true if no errors; false if error grabbing pixels\n     */\n    protected boolean writeImageData() {\n        // number of rows remaining to write\n        int rowsLeft = height;\n        // starting row to process this time through\n        int startRow = 0;\n        // how many rows to grab at a time\n        int nRows;\n        // the scan lines to be compressed\n        byte[] scanLines;\n        // where we are in the scan lines\n        int scanPos;\n        // where this line's actual pixels start (used for filtering)\n        int startPos;\n        // position from which source pixels are read\n        int readPos;\n        // the resultant compressed lines\n        byte[] compressedLines;\n        // how big is the compressed area?\n        int nCompressed;\n        // storage area for byte-sized pixels\n        byte[] pixels;\n        // storage area for int-sized pixels\n        int[] iPixels;\n        Deflater scrunch = new Deflater(compressionLevel);\n        ByteArrayOutputStream outBytes = new ByteArrayOutputStream(1024);\n        DeflaterOutputStream compBytes = new DeflaterOutputStream(outBytes, scrunch);\n        if (bytesPerPixel == 1) {\n            writePalette((IndexColorModel) image.getColorModel());\n        }\n        try {\n            while (rowsLeft > 0) {\n                nRows = Math.min(32767 / (width * (bytesPerPixel + 1)), rowsLeft);\n                // nRows = rowsLeft;\n                /*\n                 * Create a data chunk. scanLines adds \"nRows\" for\n                 * the filter bytes.\n                 */\n                scanLines = new byte[width * nRows * bytesPerPixel + nRows];\n                if (filter == FILTER_SUB) {\n                    leftBytes = new byte[16];\n                }\n                if (filter == FILTER_UP) {\n                    priorRow = new byte[width * bytesPerPixel];\n                }\n                if (tType == DataBuffer.TYPE_BYTE) {\n                    pixels = (byte[]) wRaster.getDataElements(0, startRow, width, nRows, null);\n                    iPixels = null;\n                } else {\n                    iPixels = (int[]) wRaster.getDataElements(0, startRow, width, nRows, null);\n                    pixels = null;\n                }\n                scanPos = 0;\n                readPos = 0;\n                startPos = 1;\n                for (int i = 0; i < width * nRows; i++) {\n                    if (i % width == 0) {\n                        scanLines[scanPos++] = (byte) filter;\n                        startPos = scanPos;\n                    }\n                    if (bytesPerPixel == 1) {\n                        scanLines[scanPos++] = pixels[readPos++];\n                    } else if (tType == DataBuffer.TYPE_BYTE) {\n                        scanLines[scanPos++] = pixels[readPos++];\n                        scanLines[scanPos++] = pixels[readPos++];\n                        scanLines[scanPos++] = pixels[readPos++];\n                        if (encodeAlpha) {\n                            scanLines[scanPos++] = pixels[readPos++];\n                        } else {\n                            readPos++;\n                        }\n                    } else {\n                        scanLines[scanPos++] = (byte) ((iPixels[readPos] >> 16) & 0xff);\n                        scanLines[scanPos++] = (byte) ((iPixels[readPos] >> 8) & 0xff);\n                        scanLines[scanPos++] = (byte) ((iPixels[readPos]) & 0xff);\n                        if (encodeAlpha) {\n                            scanLines[scanPos++] = (byte) ((iPixels[readPos] >> 24) & 0xff);\n                        }\n                        readPos++;\n                    }\n                    if ((i % width == width - 1) && (filter != FILTER_NONE)) {\n                        if (filter == FILTER_SUB) {\n                            filterSub(scanLines, startPos, width);\n                        }\n                        if (filter == FILTER_UP) {\n                            filterUp(scanLines, startPos, width);\n                        }\n                    }\n                }\n                /*\n                 * Write these lines to the output area\n                 */\n                compBytes.write(scanLines, 0, scanPos);\n                startRow += nRows;\n                rowsLeft -= nRows;\n            }\n            compBytes.close();\n            /*\n             * Write the compressed bytes\n             */\n            compressedLines = outBytes.toByteArray();\n            nCompressed = compressedLines.length;\n            crc.reset();\n            bytePos = writeInt4(nCompressed, bytePos);\n            bytePos = writeString(\"IDAT\", bytePos);\n            crc.update(\"IDAT\".getBytes());\n            bytePos = writeBytes(compressedLines, nCompressed, bytePos);\n            crc.update(compressedLines, 0, nCompressed);\n            crcValue = crc.getValue();\n            bytePos = writeInt4((int) crcValue, bytePos);\n            scrunch.finish();\n            return true;\n        } catch (IOException e) {\n            System.err.println(e.toString());\n            return false;\n        }\n    }\n}\n",
		"id": "/EvoSuiteBenchmark/35_corina/src/main/java/corina/map/PngEncoderB_1Test.java",
		"test_prompt": "// PngEncoderB_1Test.java\npackage corina.map;\n\n// package com.keypoint;\n/**\n * PngEncoderB takes a Java BufferedImage object and creates a byte string which can be saved as a PNG file.\n * The encoder will accept BufferedImages with eight-bit samples\n * or 4-byte ARGB samples.\n *\n * There is also code to handle 4-byte samples returned as\n * one int per pixel, but that has not been tested.\n *\n * Thanks to Jay Denny at KeyPoint Software\n *    http://www.keypoint.com/\n * who let me develop this code on company time.\n *\n * You may contact me with (probably very-much-needed) improvements,\n * comments, and bug fixes at:\n *\n *   david@catcode.com\n *\n * This library is free software; you can redistribute it and/or\n * modify it under the terms of the GNU Lesser General Public\n * License as published by the Free Software Foundation; either\n * version 2.1 of the License, or (at your option) any later version.\n *\n * This library is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n * Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public\n * License along with this library; if not, write to the Free Software\n * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n * A copy of the GNU LGPL may be found at\n * http://www.gnu.org/copyleft/lesser.html,\n *\n * @author J. David Eisenberg\n * @version 1.4, 31 March 2000\n */\nimport java.awt.*;\nimport java.awt.image.*;\nimport java.util.*;\nimport java.util.zip.*;\nimport java.io.*;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link PngEncoderB}.\n* It contains ten unit test cases for the {@link PngEncoderB#pngEncode()} method.\n*/\nclass PngEncoderB_1Test {"
	},
	{
		"original_code": "// MapPanel.java\n//\n// This file is part of Corina.\n//\n// Corina is free software; you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation; either version 2 of the License, or\n// (at your option) any later version.\n//\n// Corina is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Corina; if not, write to the Free Software\n// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n//\n// Copyright 2003 Ken Harris <kbh7@cornell.edu>\n//\npackage corina.map;\n\nimport corina.gui.ProgressMeter;\nimport corina.gui.Splash;\nimport corina.map.tools.Tool;\nimport corina.map.layers.GridlinesLayer;\nimport corina.map.layers.MapLayer;\nimport corina.map.layers.LegendLayer;\nimport corina.map.layers.SitesLayer;\nimport corina.site.Location;\nimport corina.site.Site;\nimport corina.site.SiteDB;\nimport corina.site.SiteNotFoundException;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.HashMap;\nimport java.util.Iterator;\nimport java.awt.EventQueue;\nimport java.awt.Image;\nimport java.awt.Point;\nimport java.awt.Color;\nimport java.awt.Font;\nimport java.awt.Graphics;\nimport java.awt.Graphics2D;\nimport java.awt.Rectangle;\nimport java.awt.RenderingHints;\nimport java.awt.event.*;\nimport java.awt.image.BufferedImage;\nimport java.io.File;\nimport java.io.FileOutputStream;\nimport java.io.IOException;\nimport javax.swing.JFileChooser;\nimport javax.swing.JMenuItem;\nimport javax.swing.JPanel;\nimport javax.swing.JFrame;\nimport javax.swing.JPopupMenu;\nimport javax.swing.ProgressMonitor;\nimport javax.swing.RepaintManager;\nimport javax.swing.filechooser.FileFilter;\nimport javax.imageio.*;\n\n/**\n *   A map component.\n *\n *   <p>It extends JPanel, because that's what's recommended.\n *   <a href=\"http://java.sun.com/docs/books/tutorial/uiswing/painting/overview.html\">The\n *   Java Tutorial</a>: \"We recommend that you extend either JPanel or a more specialized\n *   Swing component class.\"  (Why?  Because \"if you extend JComponent, your component's\n *   background won't be painted unless you paint it yourself.\"  Oh darn!)</p>\n *\n *   <h2>Left to do:</h2>\n *   <ul>\n *     <li>Instances of this class need to keep track of \"selected sites\"; I need\n *         to be able to get it, set it, and find out when it changes\n *     <li>Instances of this class <i>may</i> need to keep track of offsets for\n *         sites (I haven't decided yet -- think printing)\n *     <li>Refactor\n *     <li>Refactor: look for \".getZ() < 0\" -- that's repeated gobs of times\n *         (and shouldn't even exist)\n *     <li>Rename this to MapComponent, and make a MapPanel which consists of\n *         a MapComponent, the Toolbar(?), the scrollbars, and the zoomer\n *     <li>Javadoc\n *   </ul>\n *\n *   @author Ken Harris &lt;kbh7 <i style=\"color: gray\">at</i> cornell <i style=\"color: gray\">dot</i> edu&gt;\n *   @version $Id: MapPanel.java,v 1.18 2006/06/20 18:31:55 lucasmo Exp $\n */\npublic class MapPanel extends JPanel {\n\n    private View view;\n\n    // private LabelSet labels;\n    // !!! -- (for tools)\n    public LabelSet labels;\n\n    // only used for setZoom() (which updates the slider based on the panel's zoom)\n    private MapFrame fr;\n\n    private JPopupMenu popup = new JPopupMenu(\"Save\");\n\n    // the backbuffer for double buffering the map. null= not created yet\n    private BufferedImage backbuffer = null;\n\n    public void setZoom() {\n        fr.setZoom();\n    }\n\n    public MapFrame getFrame() {\n        return fr;\n    }\n\n    // note: mapframe is only used for its setZoom() method.\n    public MapPanel(final MapFrame fr, LabelSet labels) {\n        // where?\n        view = new View();\n        setBackground(Color.white);\n        this.fr = fr;\n        this.labels = labels;\n        // make the layers; it's important that this run with a good copy of |labels|:\n        // if i'd said \"private Layer sitesLayer = new SitesLayer(labels);\", labels\n        // would be null there, and SitesLayer drawing would fail.\n        grid = new GridlinesLayer();\n        legend = new LegendLayer();\n        sitesLayer = new SitesLayer(labels);\n        mapLayer = new MapLayer();\n        // arrays of layers\n        layersDraw = new Layer[] { mapLayer, grid, sitesLayer, legend };\n        layersCompute = new Layer[] { grid, mapLayer, sitesLayer, legend };\n        layersComputeNoDraw = new boolean[] { true, true, false, false };\n        // disable double-buffering: since i have a whole stack of buffers\n        // that i draw myself, it's not really useful for me.\n        this.setDoubleBuffered(false);\n        // this seems to destroy double buffering for the rest of Corina\n        //RepaintManager.currentManager(this).setDoubleBufferingEnabled(false);\n        // add listener: update map when DB changes\n        // REMOVED: it wasn't getting called, and relied on some incorrect assumptions\n        JMenuItem save = new JMenuItem(\"Save...\");\n        save.addActionListener(new ActionListener() {\n\n            public void actionPerformed(ActionEvent ae) {\n                final JFileChooser chooser = new JFileChooser();\n                chooser.setFileFilter(new FileFilter() {\n\n                    public boolean accept(File f) {\n                        return f.getName().endsWith(\".png\");\n                    }\n\n                    public String getDescription() {\n                        return \"PNG image files\";\n                    }\n                });\n                chooser.setMultiSelectionEnabled(false);\n                chooser.setAcceptAllFileFilterUsed(true);\n                //chooser.setFileSelectionMode(JFileChooser.FILES_AND_DIRECTORIES);\n                int returnVal = chooser.showSaveDialog(fr);\n                if (returnVal != JFileChooser.APPROVE_OPTION)\n                    return;\n                /*\n          Splash splash = new Splash(\"Exporting graph to PNG file...\", null);\n          ProgressMeter pm = new ProgressMeter();                \n          pm.addProgressListener(splash);\n          */\n                ProgressMonitor pm = new // parent\n                ProgressMonitor(// parent\n                fr, // message\n                \"Exporting map to PNG file...\", // note\n                \"\", 0, // round up to 45 MB\n                50000);\n                pm.setMillisToDecideToPopup(100);\n                pm.setMillisToPopup(200);\n                pm.setProgress(1);\n                pm.setNote(\"Creating memory image...\");\n                Rectangle rect = getBounds();\n                BufferedImage fileImage = new BufferedImage(rect.width, rect.height, BufferedImage.TYPE_INT_RGB);\n                Graphics2D g = fileImage.createGraphics();\n                try {\n                    Thread.sleep(5000);\n                } catch (Exception e) {\n                }\n                pm.setProgress(2);\n                pm.setNote(\"Creating map...\");\n                paint(g);\n                pm.setProgress(3);\n                pm.setNote(\"Encoding as PNG...\");\n                try {\n                    ImageIO.write(fileImage, \"png\", chooser.getSelectedFile());\n                } catch (IOException ioe) {\n                    ioe.printStackTrace();\n                }\n                //dispose of the graphics content\n                g.dispose();\n                /*\n          EventQueue.invokeLater(new Runnable() {\n            public void run() {\n              Rectangle rect = getBounds();\n              final Image fileImage = \n                  createImage(rect.width,rect.height);\n              final Graphics g = fileImage.getGraphics();\n\n              //write to the image\n              paint(g);\n \n                  // write it out in the format you want\n\n              new Thread(new Runnable() {\n                public void run() {\n                  try {\n              \n                    PngEncoder encoder = new PngEncoder(fileImage);\n                    byte[] bytes = encoder.pngEncode(false);\n                    /* (bytes == null) {\n                      PngEncoderB encoderb = new PngEncoderB((BufferedImage) fileImage);\n                      bytes = encoderb.pngEncode(false);\n                    }*/\n                /*\n                    if (bytes != null) {\n                      FileOutputStream fos = new FileOutputStream(chooser.getSelectedFile());\n                      try {\n                        fos.write(bytes);\n                        fos.flush();\n                      } finally {\n                        try {\n                          fos.close();\n                        } catch (IOException ioe) {\n                          ioe.printStackTrace();\n                        }\n                      }\n                    } else {\n                      System.err.println(\"ERROR IN ENCODER\");\n                    }\n              \n                  } catch (Exception e) {\n                    System.err.println(\"ERROR SAVING GRAPH TO: \" + chooser.getSelectedFile());\n                    e.printStackTrace();\n                  }\n\n                  //dispose of the graphics content\n                  g.dispose();\n                }\n              }).start();\n            }\n          });\n        }\n      });\n      */\n            }\n        });\n        popup.add(save);\n        addMouseListener(new MouseAdapter() {\n\n            public void mouseReleased(MouseEvent e) {\n                System.out.println(e);\n                if (!e.isPopupTrigger())\n                    return;\n                System.out.println(\"Popup triggered!\");\n                popup.show(MapPanel.this, e.getX(), e.getY());\n            }\n        });\n    }\n\n    // USED BY: toFront(), ArrowTool (hmm), etc.\n    public void updateBufferLabelsOnly() {\n        // (stolen, mostly, from updateBuffer(), of course)\n        // whatever you're doing, stop it\n        stop();\n        // dirty this layer\n        sitesLayer.setDirty();\n        // start a new worker thread\n        worker = new WorkerThread();\n        worker.start();\n        // BUG: if workers take a long time to die, what's to stop this from\n        // building up a whole bunch of threads?\n    }\n\n    // used by ArrowTool -- if a lat/long changed, we need to fix the location cache\n    public void notifyLabelsChanged() {\n        labels.rehashLocations();\n    }\n\n    // a Map of (Location=>(Site|List)); first element of each list is the frontmost site\n    /*private*/\n    HashMap siteHash = new HashMap();\n\n    // i'll need iterators ... (will i need to make my own site iterator?  no.  maybe.)\n    public void setSites(List sites) {\n        // this is setSites, not addSites... clear it?\n        siteHash.clear();\n        for (int i = 0; i < sites.size(); i++) {\n            Site s = (Site) sites.get(i);\n            if (s.getLocation() == null || !s.getLocation().valid())\n                // ignore these\n                continue;\n            Location loc = (Location) s.getLocation().clone();\n            if (siteHash.containsKey(loc)) {\n                List list = (List) siteHash.get(loc);\n                list.add(s);\n            } else {\n                List list = new ArrayList();\n                list.add(s);\n                siteHash.put(loc, list);\n            }\n        }\n    }\n\n    // DESIGN: the list of sites should live in exactly one place: LabelSet\n    public void toFront(Site s) {\n        Location loc = (Location) s.getLocation().clone();\n        List list = (List) siteHash.get(loc);\n        list.remove(s);\n        list.add(0, s);\n        updateBufferLabelsOnly();\n        repaint();\n    }\n\n    // layers (listed from fastest to slowest) -- INIT?  use array?\n    private Layer grid;\n\n    private Layer legend;\n\n    private Layer sitesLayer;\n\n    private Layer mapLayer;\n\n    // does this need to be synch'd?  might solve a misdraw problem.\n    // (no, it doesn't.)\n    public void updateBuffer() {\n        // whatever you're doing, stop it\n        stop();\n        // dirty all layers\n        for (int i = 0; i < layersCompute.length; i++) // ??\n        layersCompute[i].setDirty(layersComputeNoDraw[i]);\n        // start a new worker thread\n        worker = new WorkerThread();\n        worker.start();\n        // BUG: if workers take a long time to die, what's to stop this from\n        // building up a whole bunch of threads?  (well, workers better die\n        // fast, then.)\n    }\n\n    // draw a label using this mappanel's offset hash\n    // USED BY: ArrowTool, RulerTool\n    public void drawLabel(Graphics2D g2, Point p, Site site, int numSites, View view) {\n        // get offsets\n        Offset o = getOffset(site.getLocation());\n        // compute bubble point\n        t.x = p.x + (int) (o.dist * view.getZoom() * Math.sin(o.angle));\n        t.y = p.y - (int) (o.dist * view.getZoom() * Math.cos(o.angle));\n        // call renderer to draw it for me\n        // false);\n        SitesLayer.drawLabelSR(g2, p, site, numSites, view, t, (site == selection));\n    }\n\n    private Point t = new Point();\n\n    // OBSOLETE: when everything is moved to Layer classes,\n    // this stuff won't be needed\n    // ** selecting sites!\n    private Site selection = null;\n\n    public void setSelection(Site s) {\n        // or null = deselect\n        selection = s;\n    }\n\n    /*\n      IDEA for new behavior: select /n/ sites, click on the distance tool, then\n      dragging from any one of those sites draws distance lines from all selected sites,\n      not just that site.  (i can see it being useful; would this ever get in the way?)\n    */\n    /*\n      IDEA for new behavior: select the way the finder does: with a darkened semitranslucent\n      square; selected sites are 50% darker than normal\n    */\n    /*\n      NEED TO BE ABLE TO select a bunch of sites, right-click -> \"crossdate these against...\",\n      or maybe just drag them to a crossdate(kit).\n\n      -- along with this, it would be really useful to have a \"show only...\" option, so only\n      oak, or 20th-century, or medieval, or whatever sites are shown.\n\n      -- but i've already used right-click for something (and something it's not typically\n      used for).  what other mechanism can i think of for shuffling through a pile?  (tog?)\n    */\n    // make this GETfont, instead.\n    public static void setFontForLabel(Graphics g, View view) {\n        //        g.setFont(new Font(\"sans-serif\", Font.BOLD, (int)view.getZoom()*5));\n        // g.setFont(new Font(\"sans-serif\", Font.PLAIN, 9));\n        int size = 9;\n        if (view.getZoom() < 1.2)\n            size = 8;\n        if (view.getZoom() > 3)\n            size = 10;\n        g.setFont(new Font(\"sans-serif\", Font.PLAIN, size));\n    }\n\n    /* private */\n    public static class Offset {\n\n        public float angle = 0f;\n\n        // new!\n        public float dist = 0f;\n    }\n\n    // (location => [angle, dist]) hash\n    private HashMap offsets = new HashMap();\n\n    public void setOffset(Location loc, float angle, float dist) {\n        Offset o = new Offset();\n        o.angle = angle;\n        o.dist = dist;\n        offsets.put(loc.clone(), o);\n    }\n\n    public Offset getOffset(Location location) {\n        if (offsets.containsKey(location))\n            // anaphoric macros, where are you?\n            return (Offset) offsets.get(location);\n        else\n            return nullOffset;\n    }\n\n    // singleton\n    private final Offset nullOffset = new Offset();\n\n    // ugh!\n    private Point3D p2 = new Point3D();\n\n    // PERF: when i recieve a sitemoved/codechanged event i need to\n    // respond to, i only need to look at its bounding box and redraw\n    // that, not the entire buffer.  that's going to be a LOT faster.\n    private Point pt = new Point();\n\n    // for actual POINT -- list all sites here, to be put in a popup menu\n    public List sitesForPoint(Site target) {\n        Location loc = target.getLocation();\n        return (List) siteHash.get(loc);\n    }\n\n    // how to use: on click (where? how?) on site, show popup consisting of these sites\n    // important: for LABEL -- (return topmost site, of course)\n    // (who uses this? -- the tools.)\n    public Site siteForPoint(Projection r, Point p, int dist) throws SiteNotFoundException {\n        if (siteHash == null)\n            throw new SiteNotFoundException();\n        // i'll need a graphics, of some sort, for measuring text.\n        BufferedImage buf = new BufferedImage(1, 1, BufferedImage.TYPE_INT_ARGB_PRE);\n        Graphics2D g2 = buf.createGraphics();\n        // yeah, very weird...\n        setFontForLabel(g2, view);\n        // (stuff that was originally in the loop, but are invariant and moved out for performance)\n        int textHeight = g2.getFontMetrics().getHeight();\n        Point t = new Point();\n        // WAS: Iterator iter = siteHash.values().iterator();\n        Iterator iter = labels.getLocations();\n        // FIXME: should getLocations() return only visible locations?  or should i make a getVisibleLocations()?\n        // normally, i'd check in backwards order, so you get the top-most (last-drawn) one first,\n        // which is what the user expects.  IteratorsSuck, and I can't iterate backwards, so I'll\n        // look at all and take the last one (it's still O(n)).\n        Site returnValue = null;\n        while (iter.hasNext()) {\n            // WAS: List list = (List) iter.next();\n            // WAS: Site s = (Site) list.get(0);\n            Location loc = (Location) iter.next();\n            // WAS: r.project(s.getLocation(), p2);\n            r.project(loc, p2);\n            if (p2.getZ() < 0)\n                continue;\n            // NEW\n            Site s = SiteDB.getSiteDB().getSite(loc);\n            // REFACTOR: violates OAOO -- should ask SiteRenderer what's there\n            String text = s.getCode();\n            // measure the text\n            int textWidth = g2.getFontMetrics().stringWidth(text);\n            // get offset, if any\n            // WAS: Offset o = getOffset(s.getLocation());\n            Offset o = getOffset(loc);\n            // center of Text bubble -- like drawLabel()\n            // IT'S EXACTLY LIKE DRAWLABEL -- USE THAT!\n            t.x = (int) p2.getX() + (int) (o.dist * view.getZoom() * Math.sin(o.angle));\n            t.y = (int) p2.getY() - (int) (o.dist * view.getZoom() * Math.cos(o.angle));\n            // ripped from drawLabel() -- SO MAKE IT A METHOD IN SITERENDERER AND USE THAT!\n            int left = t.x - (textWidth / 2 + EPS), width = textWidth + 2 * EPS;\n            int top = t.y - (textHeight / 2 + EPS / 4), height = textHeight + EPS / 2;\n            if (p.x >= left && p.x <= (left + width) && p.y >= top && p.y <= (top + height)) {\n                returnValue = s;\n            }\n        }\n        // if i have something, return it, else snfe\n        if (returnValue != null)\n            return returnValue;\n        throw new SiteNotFoundException();\n    }\n\n    // OAOO VIOLATION: must this be same as in sites layer?\n    private static int EPS = 4;\n\n    // the layers, in the order they're drawn (bottom to top, first to last)\n    private Layer[] layersDraw;\n\n    // the layers, in the order they're computed (first to last)\n    private Layer[] layersCompute;\n\n    private boolean[] layersComputeNoDraw;\n\n    // the layer which is currently being updated, or null if no update is occurring\n    private Layer currentLayer = null;\n\n    private class WorkerThread extends Thread {\n\n        public void run() {\n            // make an r\n            Projection r = Projection.makeProjection(view);\n            // for each layer,\n            for (int i = 0; i < layersCompute.length && !abort; i++) {\n                // if it's not dirty, skip it\n                if (!layersCompute[i].isDirty())\n                    continue;\n                // render it\n                currentLayer = layersCompute[i];\n                currentLayer.update(r);\n                currentLayer = null;\n            }\n            // revalidate this panel\n            revalidate();\n            repaint();\n        }\n\n        private boolean abort = false;\n\n        public void pleaseStop() {\n            abort = true;\n        }\n    }\n\n    // stop the worker thread, ASAP!\n    private void stop() {\n        if (worker == null)\n            return;\n        // stop thread\n        worker.pleaseStop();\n        if (currentLayer != null)\n            // stop layer\n            currentLayer.stop();\n        currentLayer = null;\n        // bury it\n        worker = null;\n    }\n\n    private WorkerThread worker = null;\n\n    // PERF: when a new layer is computed, simply draw it on top (!!!),\n    // don't recomposite everything.\n    // -- BUT that means i have to compute them in order, moron.  d'oh!\n    // PERF: when you release the mouse button, it's redrawn.  if the view doesn't\n    // change, don't recompute it!\n    // blit out the buffer, and draw Extra Crap.\n    public void paintComponent(Graphics g) {\n        // -- draw all clean layers\n        // -- if no worker thread, start one -- FIXME: either i should do this, or i shouldn't claim to.\n        if ((backbuffer == null) || (view.size.width != backbuffer.getWidth()) || (view.size.height != backbuffer.getHeight())) {\n            backbuffer = new BufferedImage(getSize().width, getSize().height, BufferedImage.TYPE_INT_RGB);\n        }\n        Graphics2D bg = backbuffer.createGraphics();\n        bg.setColor(Color.white);\n        bg.fillRect(0, 0, view.size.width, view.size.height);\n        // draw all layers\n        for (int i = 0; i < layersDraw.length; i++) {\n            if (!layersDraw[i].noDraw()) {\n                bg.drawImage(layersDraw[i].getBuffer(), 0, 0, null);\n            }\n        }\n        // turn on antialiasing for decorators.\n        bg.setRenderingHint(RenderingHints.KEY_ANTIALIASING, RenderingHints.VALUE_ANTIALIAS_ON);\n        // current tool gets a chance to decorate\n        // BUG: the decoration isn't double-buffered! (on win32)\n        decorate(bg);\n        g.drawImage(backbuffer, 0, 0, null);\n    }\n\n    // extra crap, er, decorators -- via callbacks.  probably not threadsafe, but\n    // consolidate with sample listeners if you really want that.\n    private List decorators = new ArrayList();\n\n    public void addDecorator(Tool t) {\n        decorators.add(t);\n    }\n\n    public void removeDecorator(Tool t) {\n        decorators.remove(t);\n    }\n\n    public void decorate(Graphics g) {\n        for (int i = 0; i < decorators.size(); i++) ((Tool) decorators.get(i)).decorate(g);\n    }\n\n    // hrm...\n    public void setHeight(int h) {\n        view.size.height = h;\n    }\n\n    public void setWidth(int w) {\n        view.size.width = w;\n    }\n\n    // they really want my view\n    public View getView() {\n        return view;\n    }\n    // there should be a permanent mouse/motion listener here:\n    // right-click on a site should always show:\n    // [see \"map planned features\"]\n    // and the title bar should always show the current location.\n}\n",
		"id": "/EvoSuiteBenchmark/35_corina/src/main/java/corina/map/MapPanel_0Test.java",
		"test_prompt": "// MapPanel_0Test.java\n// This file is part of Corina.\n//\n// Corina is free software; you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation; either version 2 of the License, or\n// (at your option) any later version.\n//\n// Corina is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Corina; if not, write to the Free Software\n// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n//\n// Copyright 2003 Ken Harris <kbh7@cornell.edu>\n//\npackage corina.map;\n\nimport corina.gui.ProgressMeter;\nimport corina.gui.Splash;\nimport corina.map.tools.Tool;\nimport corina.map.layers.GridlinesLayer;\nimport corina.map.layers.MapLayer;\nimport corina.map.layers.LegendLayer;\nimport corina.map.layers.SitesLayer;\nimport corina.site.Location;\nimport corina.site.Site;\nimport corina.site.SiteDB;\nimport corina.site.SiteNotFoundException;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.HashMap;\nimport java.util.Iterator;\nimport java.awt.EventQueue;\nimport java.awt.Image;\nimport java.awt.Point;\nimport java.awt.Color;\nimport java.awt.Font;\nimport java.awt.Graphics;\nimport java.awt.Graphics2D;\nimport java.awt.Rectangle;\nimport java.awt.RenderingHints;\nimport java.awt.event.*;\nimport java.awt.image.BufferedImage;\nimport java.io.File;\nimport java.io.FileOutputStream;\nimport java.io.IOException;\nimport javax.swing.JFileChooser;\nimport javax.swing.JMenuItem;\nimport javax.swing.JPanel;\nimport javax.swing.JFrame;\nimport javax.swing.JPopupMenu;\nimport javax.swing.ProgressMonitor;\nimport javax.swing.RepaintManager;\nimport javax.swing.filechooser.FileFilter;\nimport javax.imageio.*;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link MapPanel}.\n* It contains ten unit test cases for the {@link MapPanel#sitesForPoint(Site)} method.\n*/\nclass MapPanel_0Test {"
	},
	{
		"original_code": "// MapPanel.java\n//\n// This file is part of Corina.\n//\n// Corina is free software; you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation; either version 2 of the License, or\n// (at your option) any later version.\n//\n// Corina is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Corina; if not, write to the Free Software\n// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n//\n// Copyright 2003 Ken Harris <kbh7@cornell.edu>\n//\npackage corina.map;\n\nimport corina.gui.ProgressMeter;\nimport corina.gui.Splash;\nimport corina.map.tools.Tool;\nimport corina.map.layers.GridlinesLayer;\nimport corina.map.layers.MapLayer;\nimport corina.map.layers.LegendLayer;\nimport corina.map.layers.SitesLayer;\nimport corina.site.Location;\nimport corina.site.Site;\nimport corina.site.SiteDB;\nimport corina.site.SiteNotFoundException;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.HashMap;\nimport java.util.Iterator;\nimport java.awt.EventQueue;\nimport java.awt.Image;\nimport java.awt.Point;\nimport java.awt.Color;\nimport java.awt.Font;\nimport java.awt.Graphics;\nimport java.awt.Graphics2D;\nimport java.awt.Rectangle;\nimport java.awt.RenderingHints;\nimport java.awt.event.*;\nimport java.awt.image.BufferedImage;\nimport java.io.File;\nimport java.io.FileOutputStream;\nimport java.io.IOException;\nimport javax.swing.JFileChooser;\nimport javax.swing.JMenuItem;\nimport javax.swing.JPanel;\nimport javax.swing.JFrame;\nimport javax.swing.JPopupMenu;\nimport javax.swing.ProgressMonitor;\nimport javax.swing.RepaintManager;\nimport javax.swing.filechooser.FileFilter;\nimport javax.imageio.*;\n\n/**\n *   A map component.\n *\n *   <p>It extends JPanel, because that's what's recommended.\n *   <a href=\"http://java.sun.com/docs/books/tutorial/uiswing/painting/overview.html\">The\n *   Java Tutorial</a>: \"We recommend that you extend either JPanel or a more specialized\n *   Swing component class.\"  (Why?  Because \"if you extend JComponent, your component's\n *   background won't be painted unless you paint it yourself.\"  Oh darn!)</p>\n *\n *   <h2>Left to do:</h2>\n *   <ul>\n *     <li>Instances of this class need to keep track of \"selected sites\"; I need\n *         to be able to get it, set it, and find out when it changes\n *     <li>Instances of this class <i>may</i> need to keep track of offsets for\n *         sites (I haven't decided yet -- think printing)\n *     <li>Refactor\n *     <li>Refactor: look for \".getZ() < 0\" -- that's repeated gobs of times\n *         (and shouldn't even exist)\n *     <li>Rename this to MapComponent, and make a MapPanel which consists of\n *         a MapComponent, the Toolbar(?), the scrollbars, and the zoomer\n *     <li>Javadoc\n *   </ul>\n *\n *   @author Ken Harris &lt;kbh7 <i style=\"color: gray\">at</i> cornell <i style=\"color: gray\">dot</i> edu&gt;\n *   @version $Id: MapPanel.java,v 1.18 2006/06/20 18:31:55 lucasmo Exp $\n */\npublic class MapPanel extends JPanel {\n\n    private View view;\n\n    // private LabelSet labels;\n    // !!! -- (for tools)\n    public LabelSet labels;\n\n    // only used for setZoom() (which updates the slider based on the panel's zoom)\n    private MapFrame fr;\n\n    private JPopupMenu popup = new JPopupMenu(\"Save\");\n\n    // the backbuffer for double buffering the map. null= not created yet\n    private BufferedImage backbuffer = null;\n\n    public void setZoom() {\n        fr.setZoom();\n    }\n\n    public MapFrame getFrame() {\n        return fr;\n    }\n\n    // note: mapframe is only used for its setZoom() method.\n    public MapPanel(final MapFrame fr, LabelSet labels) {\n        // where?\n        view = new View();\n        setBackground(Color.white);\n        this.fr = fr;\n        this.labels = labels;\n        // make the layers; it's important that this run with a good copy of |labels|:\n        // if i'd said \"private Layer sitesLayer = new SitesLayer(labels);\", labels\n        // would be null there, and SitesLayer drawing would fail.\n        grid = new GridlinesLayer();\n        legend = new LegendLayer();\n        sitesLayer = new SitesLayer(labels);\n        mapLayer = new MapLayer();\n        // arrays of layers\n        layersDraw = new Layer[] { mapLayer, grid, sitesLayer, legend };\n        layersCompute = new Layer[] { grid, mapLayer, sitesLayer, legend };\n        layersComputeNoDraw = new boolean[] { true, true, false, false };\n        // disable double-buffering: since i have a whole stack of buffers\n        // that i draw myself, it's not really useful for me.\n        this.setDoubleBuffered(false);\n        // this seems to destroy double buffering for the rest of Corina\n        //RepaintManager.currentManager(this).setDoubleBufferingEnabled(false);\n        // add listener: update map when DB changes\n        // REMOVED: it wasn't getting called, and relied on some incorrect assumptions\n        JMenuItem save = new JMenuItem(\"Save...\");\n        save.addActionListener(new ActionListener() {\n\n            public void actionPerformed(ActionEvent ae) {\n                final JFileChooser chooser = new JFileChooser();\n                chooser.setFileFilter(new FileFilter() {\n\n                    public boolean accept(File f) {\n                        return f.getName().endsWith(\".png\");\n                    }\n\n                    public String getDescription() {\n                        return \"PNG image files\";\n                    }\n                });\n                chooser.setMultiSelectionEnabled(false);\n                chooser.setAcceptAllFileFilterUsed(true);\n                //chooser.setFileSelectionMode(JFileChooser.FILES_AND_DIRECTORIES);\n                int returnVal = chooser.showSaveDialog(fr);\n                if (returnVal != JFileChooser.APPROVE_OPTION)\n                    return;\n                /*\n          Splash splash = new Splash(\"Exporting graph to PNG file...\", null);\n          ProgressMeter pm = new ProgressMeter();                \n          pm.addProgressListener(splash);\n          */\n                ProgressMonitor pm = new // parent\n                ProgressMonitor(// parent\n                fr, // message\n                \"Exporting map to PNG file...\", // note\n                \"\", 0, // round up to 45 MB\n                50000);\n                pm.setMillisToDecideToPopup(100);\n                pm.setMillisToPopup(200);\n                pm.setProgress(1);\n                pm.setNote(\"Creating memory image...\");\n                Rectangle rect = getBounds();\n                BufferedImage fileImage = new BufferedImage(rect.width, rect.height, BufferedImage.TYPE_INT_RGB);\n                Graphics2D g = fileImage.createGraphics();\n                try {\n                    Thread.sleep(5000);\n                } catch (Exception e) {\n                }\n                pm.setProgress(2);\n                pm.setNote(\"Creating map...\");\n                paint(g);\n                pm.setProgress(3);\n                pm.setNote(\"Encoding as PNG...\");\n                try {\n                    ImageIO.write(fileImage, \"png\", chooser.getSelectedFile());\n                } catch (IOException ioe) {\n                    ioe.printStackTrace();\n                }\n                //dispose of the graphics content\n                g.dispose();\n                /*\n          EventQueue.invokeLater(new Runnable() {\n            public void run() {\n              Rectangle rect = getBounds();\n              final Image fileImage = \n                  createImage(rect.width,rect.height);\n              final Graphics g = fileImage.getGraphics();\n\n              //write to the image\n              paint(g);\n \n                  // write it out in the format you want\n\n              new Thread(new Runnable() {\n                public void run() {\n                  try {\n              \n                    PngEncoder encoder = new PngEncoder(fileImage);\n                    byte[] bytes = encoder.pngEncode(false);\n                    /* (bytes == null) {\n                      PngEncoderB encoderb = new PngEncoderB((BufferedImage) fileImage);\n                      bytes = encoderb.pngEncode(false);\n                    }*/\n                /*\n                    if (bytes != null) {\n                      FileOutputStream fos = new FileOutputStream(chooser.getSelectedFile());\n                      try {\n                        fos.write(bytes);\n                        fos.flush();\n                      } finally {\n                        try {\n                          fos.close();\n                        } catch (IOException ioe) {\n                          ioe.printStackTrace();\n                        }\n                      }\n                    } else {\n                      System.err.println(\"ERROR IN ENCODER\");\n                    }\n              \n                  } catch (Exception e) {\n                    System.err.println(\"ERROR SAVING GRAPH TO: \" + chooser.getSelectedFile());\n                    e.printStackTrace();\n                  }\n\n                  //dispose of the graphics content\n                  g.dispose();\n                }\n              }).start();\n            }\n          });\n        }\n      });\n      */\n            }\n        });\n        popup.add(save);\n        addMouseListener(new MouseAdapter() {\n\n            public void mouseReleased(MouseEvent e) {\n                System.out.println(e);\n                if (!e.isPopupTrigger())\n                    return;\n                System.out.println(\"Popup triggered!\");\n                popup.show(MapPanel.this, e.getX(), e.getY());\n            }\n        });\n    }\n\n    // USED BY: toFront(), ArrowTool (hmm), etc.\n    public void updateBufferLabelsOnly() {\n        // (stolen, mostly, from updateBuffer(), of course)\n        // whatever you're doing, stop it\n        stop();\n        // dirty this layer\n        sitesLayer.setDirty();\n        // start a new worker thread\n        worker = new WorkerThread();\n        worker.start();\n        // BUG: if workers take a long time to die, what's to stop this from\n        // building up a whole bunch of threads?\n    }\n\n    // used by ArrowTool -- if a lat/long changed, we need to fix the location cache\n    public void notifyLabelsChanged() {\n        labels.rehashLocations();\n    }\n\n    // a Map of (Location=>(Site|List)); first element of each list is the frontmost site\n    /*private*/\n    HashMap siteHash = new HashMap();\n\n    // i'll need iterators ... (will i need to make my own site iterator?  no.  maybe.)\n    public void setSites(List sites) {\n        // this is setSites, not addSites... clear it?\n        siteHash.clear();\n        for (int i = 0; i < sites.size(); i++) {\n            Site s = (Site) sites.get(i);\n            if (s.getLocation() == null || !s.getLocation().valid())\n                // ignore these\n                continue;\n            Location loc = (Location) s.getLocation().clone();\n            if (siteHash.containsKey(loc)) {\n                List list = (List) siteHash.get(loc);\n                list.add(s);\n            } else {\n                List list = new ArrayList();\n                list.add(s);\n                siteHash.put(loc, list);\n            }\n        }\n    }\n\n    // DESIGN: the list of sites should live in exactly one place: LabelSet\n    public void toFront(Site s) {\n        Location loc = (Location) s.getLocation().clone();\n        List list = (List) siteHash.get(loc);\n        list.remove(s);\n        list.add(0, s);\n        updateBufferLabelsOnly();\n        repaint();\n    }\n\n    // layers (listed from fastest to slowest) -- INIT?  use array?\n    private Layer grid;\n\n    private Layer legend;\n\n    private Layer sitesLayer;\n\n    private Layer mapLayer;\n\n    // does this need to be synch'd?  might solve a misdraw problem.\n    // (no, it doesn't.)\n    public void updateBuffer() {\n        // whatever you're doing, stop it\n        stop();\n        // dirty all layers\n        for (int i = 0; i < layersCompute.length; i++) // ??\n        layersCompute[i].setDirty(layersComputeNoDraw[i]);\n        // start a new worker thread\n        worker = new WorkerThread();\n        worker.start();\n        // BUG: if workers take a long time to die, what's to stop this from\n        // building up a whole bunch of threads?  (well, workers better die\n        // fast, then.)\n    }\n\n    // draw a label using this mappanel's offset hash\n    // USED BY: ArrowTool, RulerTool\n    public void drawLabel(Graphics2D g2, Point p, Site site, int numSites, View view) {\n        // get offsets\n        Offset o = getOffset(site.getLocation());\n        // compute bubble point\n        t.x = p.x + (int) (o.dist * view.getZoom() * Math.sin(o.angle));\n        t.y = p.y - (int) (o.dist * view.getZoom() * Math.cos(o.angle));\n        // call renderer to draw it for me\n        // false);\n        SitesLayer.drawLabelSR(g2, p, site, numSites, view, t, (site == selection));\n    }\n\n    private Point t = new Point();\n\n    // OBSOLETE: when everything is moved to Layer classes,\n    // this stuff won't be needed\n    // ** selecting sites!\n    private Site selection = null;\n\n    public void setSelection(Site s) {\n        // or null = deselect\n        selection = s;\n    }\n\n    /*\n      IDEA for new behavior: select /n/ sites, click on the distance tool, then\n      dragging from any one of those sites draws distance lines from all selected sites,\n      not just that site.  (i can see it being useful; would this ever get in the way?)\n    */\n    /*\n      IDEA for new behavior: select the way the finder does: with a darkened semitranslucent\n      square; selected sites are 50% darker than normal\n    */\n    /*\n      NEED TO BE ABLE TO select a bunch of sites, right-click -> \"crossdate these against...\",\n      or maybe just drag them to a crossdate(kit).\n\n      -- along with this, it would be really useful to have a \"show only...\" option, so only\n      oak, or 20th-century, or medieval, or whatever sites are shown.\n\n      -- but i've already used right-click for something (and something it's not typically\n      used for).  what other mechanism can i think of for shuffling through a pile?  (tog?)\n    */\n    // make this GETfont, instead.\n    public static void setFontForLabel(Graphics g, View view) {\n        //        g.setFont(new Font(\"sans-serif\", Font.BOLD, (int)view.getZoom()*5));\n        // g.setFont(new Font(\"sans-serif\", Font.PLAIN, 9));\n        int size = 9;\n        if (view.getZoom() < 1.2)\n            size = 8;\n        if (view.getZoom() > 3)\n            size = 10;\n        g.setFont(new Font(\"sans-serif\", Font.PLAIN, size));\n    }\n\n    /* private */\n    public static class Offset {\n\n        public float angle = 0f;\n\n        // new!\n        public float dist = 0f;\n    }\n\n    // (location => [angle, dist]) hash\n    private HashMap offsets = new HashMap();\n\n    public void setOffset(Location loc, float angle, float dist) {\n        Offset o = new Offset();\n        o.angle = angle;\n        o.dist = dist;\n        offsets.put(loc.clone(), o);\n    }\n\n    public Offset getOffset(Location location) {\n        if (offsets.containsKey(location))\n            // anaphoric macros, where are you?\n            return (Offset) offsets.get(location);\n        else\n            return nullOffset;\n    }\n\n    // singleton\n    private final Offset nullOffset = new Offset();\n\n    // ugh!\n    private Point3D p2 = new Point3D();\n\n    // PERF: when i recieve a sitemoved/codechanged event i need to\n    // respond to, i only need to look at its bounding box and redraw\n    // that, not the entire buffer.  that's going to be a LOT faster.\n    private Point pt = new Point();\n\n    // for actual POINT -- list all sites here, to be put in a popup menu\n    public List sitesForPoint(Site target) {\n        Location loc = target.getLocation();\n        return (List) siteHash.get(loc);\n    }\n\n    // how to use: on click (where? how?) on site, show popup consisting of these sites\n    // important: for LABEL -- (return topmost site, of course)\n    // (who uses this? -- the tools.)\n    public Site siteForPoint(Projection r, Point p, int dist) throws SiteNotFoundException {\n        if (siteHash == null)\n            throw new SiteNotFoundException();\n        // i'll need a graphics, of some sort, for measuring text.\n        BufferedImage buf = new BufferedImage(1, 1, BufferedImage.TYPE_INT_ARGB_PRE);\n        Graphics2D g2 = buf.createGraphics();\n        // yeah, very weird...\n        setFontForLabel(g2, view);\n        // (stuff that was originally in the loop, but are invariant and moved out for performance)\n        int textHeight = g2.getFontMetrics().getHeight();\n        Point t = new Point();\n        // WAS: Iterator iter = siteHash.values().iterator();\n        Iterator iter = labels.getLocations();\n        // FIXME: should getLocations() return only visible locations?  or should i make a getVisibleLocations()?\n        // normally, i'd check in backwards order, so you get the top-most (last-drawn) one first,\n        // which is what the user expects.  IteratorsSuck, and I can't iterate backwards, so I'll\n        // look at all and take the last one (it's still O(n)).\n        Site returnValue = null;\n        while (iter.hasNext()) {\n            // WAS: List list = (List) iter.next();\n            // WAS: Site s = (Site) list.get(0);\n            Location loc = (Location) iter.next();\n            // WAS: r.project(s.getLocation(), p2);\n            r.project(loc, p2);\n            if (p2.getZ() < 0)\n                continue;\n            // NEW\n            Site s = SiteDB.getSiteDB().getSite(loc);\n            // REFACTOR: violates OAOO -- should ask SiteRenderer what's there\n            String text = s.getCode();\n            // measure the text\n            int textWidth = g2.getFontMetrics().stringWidth(text);\n            // get offset, if any\n            // WAS: Offset o = getOffset(s.getLocation());\n            Offset o = getOffset(loc);\n            // center of Text bubble -- like drawLabel()\n            // IT'S EXACTLY LIKE DRAWLABEL -- USE THAT!\n            t.x = (int) p2.getX() + (int) (o.dist * view.getZoom() * Math.sin(o.angle));\n            t.y = (int) p2.getY() - (int) (o.dist * view.getZoom() * Math.cos(o.angle));\n            // ripped from drawLabel() -- SO MAKE IT A METHOD IN SITERENDERER AND USE THAT!\n            int left = t.x - (textWidth / 2 + EPS), width = textWidth + 2 * EPS;\n            int top = t.y - (textHeight / 2 + EPS / 4), height = textHeight + EPS / 2;\n            if (p.x >= left && p.x <= (left + width) && p.y >= top && p.y <= (top + height)) {\n                returnValue = s;\n            }\n        }\n        // if i have something, return it, else snfe\n        if (returnValue != null)\n            return returnValue;\n        throw new SiteNotFoundException();\n    }\n\n    // OAOO VIOLATION: must this be same as in sites layer?\n    private static int EPS = 4;\n\n    // the layers, in the order they're drawn (bottom to top, first to last)\n    private Layer[] layersDraw;\n\n    // the layers, in the order they're computed (first to last)\n    private Layer[] layersCompute;\n\n    private boolean[] layersComputeNoDraw;\n\n    // the layer which is currently being updated, or null if no update is occurring\n    private Layer currentLayer = null;\n\n    private class WorkerThread extends Thread {\n\n        public void run() {\n            // make an r\n            Projection r = Projection.makeProjection(view);\n            // for each layer,\n            for (int i = 0; i < layersCompute.length && !abort; i++) {\n                // if it's not dirty, skip it\n                if (!layersCompute[i].isDirty())\n                    continue;\n                // render it\n                currentLayer = layersCompute[i];\n                currentLayer.update(r);\n                currentLayer = null;\n            }\n            // revalidate this panel\n            revalidate();\n            repaint();\n        }\n\n        private boolean abort = false;\n\n        public void pleaseStop() {\n            abort = true;\n        }\n    }\n\n    // stop the worker thread, ASAP!\n    private void stop() {\n        if (worker == null)\n            return;\n        // stop thread\n        worker.pleaseStop();\n        if (currentLayer != null)\n            // stop layer\n            currentLayer.stop();\n        currentLayer = null;\n        // bury it\n        worker = null;\n    }\n\n    private WorkerThread worker = null;\n\n    // PERF: when a new layer is computed, simply draw it on top (!!!),\n    // don't recomposite everything.\n    // -- BUT that means i have to compute them in order, moron.  d'oh!\n    // PERF: when you release the mouse button, it's redrawn.  if the view doesn't\n    // change, don't recompute it!\n    // blit out the buffer, and draw Extra Crap.\n    public void paintComponent(Graphics g) {\n        // -- draw all clean layers\n        // -- if no worker thread, start one -- FIXME: either i should do this, or i shouldn't claim to.\n        if ((backbuffer == null) || (view.size.width != backbuffer.getWidth()) || (view.size.height != backbuffer.getHeight())) {\n            backbuffer = new BufferedImage(getSize().width, getSize().height, BufferedImage.TYPE_INT_RGB);\n        }\n        Graphics2D bg = backbuffer.createGraphics();\n        bg.setColor(Color.white);\n        bg.fillRect(0, 0, view.size.width, view.size.height);\n        // draw all layers\n        for (int i = 0; i < layersDraw.length; i++) {\n            if (!layersDraw[i].noDraw()) {\n                bg.drawImage(layersDraw[i].getBuffer(), 0, 0, null);\n            }\n        }\n        // turn on antialiasing for decorators.\n        bg.setRenderingHint(RenderingHints.KEY_ANTIALIASING, RenderingHints.VALUE_ANTIALIAS_ON);\n        // current tool gets a chance to decorate\n        // BUG: the decoration isn't double-buffered! (on win32)\n        decorate(bg);\n        g.drawImage(backbuffer, 0, 0, null);\n    }\n\n    // extra crap, er, decorators -- via callbacks.  probably not threadsafe, but\n    // consolidate with sample listeners if you really want that.\n    private List decorators = new ArrayList();\n\n    public void addDecorator(Tool t) {\n        decorators.add(t);\n    }\n\n    public void removeDecorator(Tool t) {\n        decorators.remove(t);\n    }\n\n    public void decorate(Graphics g) {\n        for (int i = 0; i < decorators.size(); i++) ((Tool) decorators.get(i)).decorate(g);\n    }\n\n    // hrm...\n    public void setHeight(int h) {\n        view.size.height = h;\n    }\n\n    public void setWidth(int w) {\n        view.size.width = w;\n    }\n\n    // they really want my view\n    public View getView() {\n        return view;\n    }\n    // there should be a permanent mouse/motion listener here:\n    // right-click on a site should always show:\n    // [see \"map planned features\"]\n    // and the title bar should always show the current location.\n}\n",
		"id": "/EvoSuiteBenchmark/35_corina/src/main/java/corina/map/MapPanel_1Test.java",
		"test_prompt": "// MapPanel_1Test.java\n// This file is part of Corina.\n//\n// Corina is free software; you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation; either version 2 of the License, or\n// (at your option) any later version.\n//\n// Corina is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Corina; if not, write to the Free Software\n// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n//\n// Copyright 2003 Ken Harris <kbh7@cornell.edu>\n//\npackage corina.map;\n\nimport corina.gui.ProgressMeter;\nimport corina.gui.Splash;\nimport corina.map.tools.Tool;\nimport corina.map.layers.GridlinesLayer;\nimport corina.map.layers.MapLayer;\nimport corina.map.layers.LegendLayer;\nimport corina.map.layers.SitesLayer;\nimport corina.site.Location;\nimport corina.site.Site;\nimport corina.site.SiteDB;\nimport corina.site.SiteNotFoundException;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.HashMap;\nimport java.util.Iterator;\nimport java.awt.EventQueue;\nimport java.awt.Image;\nimport java.awt.Point;\nimport java.awt.Color;\nimport java.awt.Font;\nimport java.awt.Graphics;\nimport java.awt.Graphics2D;\nimport java.awt.Rectangle;\nimport java.awt.RenderingHints;\nimport java.awt.event.*;\nimport java.awt.image.BufferedImage;\nimport java.io.File;\nimport java.io.FileOutputStream;\nimport java.io.IOException;\nimport javax.swing.JFileChooser;\nimport javax.swing.JMenuItem;\nimport javax.swing.JPanel;\nimport javax.swing.JFrame;\nimport javax.swing.JPopupMenu;\nimport javax.swing.ProgressMonitor;\nimport javax.swing.RepaintManager;\nimport javax.swing.filechooser.FileFilter;\nimport javax.imageio.*;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link MapPanel}.\n* It contains ten unit test cases for the {@link MapPanel#siteForPoint(Projection, Point, int)} method.\n*/\nclass MapPanel_1Test {"
	},
	{
		"original_code": "// MapFile.java\n//\n// This file is part of Corina.\n//\n// Corina is free software; you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation; either version 2 of the License, or\n// (at your option) any later version.\n//\n// Corina is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Corina; if not, write to the Free Software\n// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n//\n// Copyright 2001 Ken Harris <kbh7@cornell.edu>\n//\npackage corina.map;\n\nimport java.io.File;\nimport java.io.FileNotFoundException;\nimport java.io.FileOutputStream;\nimport java.io.IOException;\nimport java.io.InputStream;\nimport java.io.OutputStream;\nimport java.io.RandomAccessFile;\nimport java.util.Iterator;\nimport java.util.NoSuchElementException;\nimport java.util.zip.GZIPInputStream;\nimport javax.swing.JOptionPane;\nimport javax.swing.ProgressMonitor;\nimport corina.site.Location;\n\n// an interface to earth.rez-format files.\n// ABSTRACT: make interface for getting Segments(?) from a disk file,\n// then make RezMapFile implement it.  that way, i can play around with\n// putting maps in different formats.\n// (make raw-to-<type> part of this interface?)\n/**\n *    An interface to the map line-data file.\n *\n *    <p>Overview of how to use it:</p>\n *    <ul>\n *        <li>call MapFile.getHeaders() to get an Iterator\n *\n *        <li>go through that Iterator to get MapFile.Header objects\n *\n *        <li>by their bounding boxes (getMinLatitude(), etc) or their type\n *        (getCategory()/getType()), figure out which ones you're interested in\n *\n *        <li>call getNumberOfPoints() to figure out how many points are in that segment\n *\n *        <li>call projectData() with a Projection, and 2 arrays at least that big,\n *        and it'll give you rendered pixels from disk (this is the potentially slow\n *        part, since the actual data may be on disk still)\n *    </ul>\n *\n *    <p>The other slow part is loading all the headers from disk, the first time\n *    MapFile is referenced.  That might take about 1/2 a second.</p>\n *\n *    <h2>Used by:</h2>\n *    <ul>\n *        <li>MapLayer\n *        <li>Palette - but only to switch on segments' type/subtype\n *    </ul>\n *\n *    <h2>Left to do:</h2>\n *    <ul>\n *        <li>Get rid of Data.latitude/longitude, which get re-alloc'd every time for no reason -- or do they?\n *        <li>Merge Data into Header, and rename to Segment\n *        <li>JavaDoc everything\n *        <li>Change interface, so users asy \"new MapFile()\" / \"mapfile.getHeaders()\".  (Still class data, though.)\n *        <li>Fix synchronization bugs -- how to find?\n *        <li>Write unit tests!\n *        <li>Future: Enable this to work with different line-map file formats?\n *        <li>Get rid of main()\n *        <li>Header.isVisible() is weird\n *        <li>Profile some more\n *        <li>Am I guaranteed headers[] is filled before getHeaders() is called?\n *\n *        <li>Use a better line-data format; it's possible to store it more efficiently\n *\n *        <li>Only re-copy earth.rez if it doesn't already exist\n *        <li>Put earth.rez in some platform-dependent, user-agnostic location\n *        (like /Users/Shared/Corina/earth.rez on Mac)\n *\n *        <li>Have 3 different modes: no caching (segment data always on disk, only headers\n *        are loaded), with caching (some segment data in memory), memory only (all segments\n *        loaded into memory).  Decide between them based on user preference or a simple test\n *    </ul>\n */\n/*\n IDEA:\n - class MapFile\n - class Rez -- can load and save .rez files\n - class Pack (pick a better name) -- can load and save .pack files (compressed: 10 MB, hopefully)\n - ...\n - (what's their relationship?)\n - could this work?\n*/\npublic class MapFile {\n\n    private static final String COMPRESSED_FILENAME = \"earth.rez.gz\";\n\n    private static final String UNCOMPRESSED_FILENAME = \"corina-earth.rez\";\n\n    private static final File CACHED_FILE = new File(System.getProperty(\"java.io.tmpdir\") + File.separator + UNCOMPRESSED_FILENAME);\n\n    static {\n        try {\n            // FIXME: don't do this in a static block!\n            unpackDataFile();\n            open(CACHED_FILE);\n            // WAS: open(\"Libraries/earth.rez\");\n        } catch (IOException ioe) {\n            System.out.println(\"Error opening map: \" + ioe);\n        }\n    }\n\n    private MapFile() {\n        // don't instantiate me\n    }\n\n    private static Object lock = new Object();\n\n    // earth.rez file\n    private static RandomAccessFile rez;\n\n    // all the segment headers\n    private static Header[] headers;\n\n    // if /tmp/corina/earth.rez doesn't exist, make it.\n    // earth.rez is 44.4 MB; earth.rez.gz is 8.7 MB.\n    private static void unpackDataFile() throws IOException {\n        // see if it's there, first\n        if (CACHED_FILE.isFile()) {\n            /* disregard length check for now\n            // check length\n            boolean lengthOk = (file.length() == 46638184);\n            */\n            // TODO: check magic\n            // WRITEME\n            boolean magicOk = true;\n            // if length && magic, it's good, so just return now\n            //if (lengthOk && magicOk)\n            return;\n        }\n        // TODO: (lock it?)\n        // TODO: put close/close in finally clause\n        // copying from a resource to $(TMP) can take 4 or 5 seconds,\n        // so we'll put up a progress monitor so users know we haven't died.\n        ProgressMonitor progress = new // parent\n        ProgressMonitor(// parent\n        null, // message\n        \"Preparing map for first use...\", // note\n        \"\", 0, // round up to 45 MB\n        45 * 1024 * 1024);\n        // after 0.25 sec, if it looks like it'll take\n        // longer than 0.5 sec, show the monitor\n        progress.setMillisToDecideToPopup(250);\n        progress.setMillisToPopup(500);\n        // where i'm going to get the data from\n        ClassLoader loader = MapFile.class.getClassLoader();\n        InputStream rawInput = loader.getResourceAsStream(COMPRESSED_FILENAME);\n        if (rawInput == null) {\n            JOptionPane.showMessageDialog(null, \"Could not find '\" + COMPRESSED_FILENAME + \"' in class loader resource path\", \"File not found\", JOptionPane.ERROR_MESSAGE);\n            return;\n        }\n        // where i'm going to put the data\n        InputStream in = new GZIPInputStream(rawInput);\n        OutputStream out = new FileOutputStream(CACHED_FILE);\n        // buffer, for fast reading -- is 16 KB ok?\n        byte[] buf = new byte[16 * 1024];\n        // total number of bytes written\n        int total = 0;\n        try {\n            // copy everything from in to out\n            int bytesRead;\n            while ((bytesRead = in.read(buf)) != -1) {\n                out.write(buf, 0, bytesRead);\n                total += bytesRead;\n                progress.setProgress(total);\n            }\n            // get rid of the progress monitor\n            progress.setProgress(progress.getMaximum());\n        } finally {\n            // close the streams\n            if (in != null)\n                try {\n                    in.close();\n                } catch (IOException ioe) {\n                    ioe.printStackTrace();\n                }\n            if (out != null)\n                try {\n                    out.close();\n                } catch (IOException ioe) {\n                    ioe.printStackTrace();\n                }\n        }\n    }\n\n    /**\n     *       Get an Iterator which will return each Header.\n     *\n     *       @return an Iterator which returns each Header in turn\n     */\n    public static Iterator getHeaders() {\n        return new Iterator() {\n\n            int next = 0;\n\n            public boolean hasNext() {\n                return (next < headers.length);\n            }\n\n            public Object next() throws NoSuchElementException {\n                if (next == headers.length)\n                    throw new NoSuchElementException();\n                return headers[next++];\n            }\n\n            public void remove() {\n                throw new UnsupportedOperationException();\n            }\n        };\n    }\n\n    /* like read(), but guaranteed to read all */\n    private static void readAll(RandomAccessFile in, byte[] buf) throws IOException {\n        readAll(in, buf, 0, buf.length);\n    }\n\n    private static void readAll(RandomAccessFile in, byte[] buf, int off, int bytes) throws IOException {\n        int leftToRead = bytes;\n        int whereToWrite = off;\n        while (leftToRead > 0) {\n            int actuallyRead = in.read(buf, whereToWrite, leftToRead);\n            leftToRead -= actuallyRead;\n            whereToWrite += actuallyRead;\n        }\n    }\n\n    // a chunk of map data; one per segment.\n    // actually, there should probably only ever be one of these (?) -- not sure\n    // usage: once you know you want the data for a header h, just say\n    //    Data myData = h.getData(); // takes care of caching, etc.\n    // then\n    //    g.drawPolyline(myData.longitude, myData.latitude, myData.longitude.length); -- or myData.n?\n    // oops: but you have to project it first.\n    private static byte[] bufn = new byte[0];\n\n    private static Location loc = new Location();\n\n    private static Point3D vec = new Point3D();\n\n    private static class Data {\n\n        // PERF: latitude[]/longitude[] don't need to be re-alloc'd each time (as long as they're synch'd)\n        // in seconds\n        private int[] longitude, latitude;\n\n        private int n;\n\n        // TODO: will i need a version of projectData() that operates on floats, too?\n        // if so, call it projectData(Projection, float[], float[]).\n        /**\n         *           Project each point of this segment to a pixel location.  The output\n         *           are 2 arrays of ints (x and y) which are already allocated.  They\n         *           should be big enough for all of the data (from getNumberOfPoints()); if\n         *           they aren't, an IllegalArgumentException is thrown.\n         *\n         *           @param projection the projection to use\n         *           @param x an array to put the x pixel coordinates in\n         *           @param y an array to put the y pixel coordinates in\n         *           @exception IllegalArgumentException if either x or y isn't big enough\n         *           to hold all of the data\n         */\n        public void projectData(Projection r, int[] x, int[] y) throws IllegalArgumentException {\n            if (x.length < n || y.length < n)\n                throw new IllegalArgumentException(\"x/y arrays not big enough!\");\n            // PERF: is this synchro hurting my performance?  (try one loc per Data, no synchro needed)\n            synchronized (loc) {\n                for (int i = 0; i < n; i++) {\n                    // put point [i] into |loc|\n                    loc.setLatitudeAsSeconds(latitude[i]);\n                    loc.setLongitudeAsSeconds(longitude[i]);\n                    // project |loc| into |vec|\n                    r.project(loc, vec);\n                    // extract x/y from |vec|\n                    // BUG?: should i round these instead of just casting them?  (i assume casting truncates ... ?)\n                    x[i] = (int) vec.getX();\n                    y[i] = (int) vec.getY();\n                }\n            }\n        }\n\n        // load the data\n        // addr: address to start loading segment data from\n        // n: number of points that make up this segment\n        public static Data load(int address, int n) throws IOException {\n            Data data = new Data();\n            // alloc space for location data as ints\n            // PERF: this is really wasteful! -- maybe not... (cache)\n            data.n = n;\n            data.longitude = new int[data.n];\n            data.latitude = new int[data.n];\n            // make sure i have space for this data -- raw bytes from disk.\n            // how many bytes to read?  it's (x0,y0,n,dx,dy,dx,dy,...),\n            // with each x0,y0,dx,dy 4 bytes, and n is 4 bytes.\n            // so it's 4 + 8*(number of points).\n            int bufsize = 4 + 8 * n;\n            if (bufn.length < bufsize) {\n                bufn = new byte[(int) (bufsize * 1.15)];\n                // add 15% extra; this keeps the number of allocations down (to about 5),\n                // while not eating up way too much memory (as, say, bufsize*2 would).\n            }\n            // read the whole segment at once\n            synchronized (rez) {\n                rez.seek(address);\n                readAll(rez, bufn, 0, bufsize);\n            }\n            // decode and store the first point, now that i have a place to put it\n            data.longitude[0] = decode(bufn, 0);\n            data.latitude[0] = decode(bufn, 1);\n            // and put raw data into latitude/longitude arrays\n            for (int i = 0; i < n - 1; i++) {\n                // decode the bytes from the buffer\n                int dx = decode(bufn, 3 + 2 * i);\n                int dy = decode(bufn, 3 + 2 * i + 1);\n                // (dx,dy) vectors are relative\n                data.longitude[i + 1] = data.longitude[i] + dx;\n                data.latitude[i + 1] = data.latitude[i] + dy;\n            }\n            return data;\n        }\n    }\n\n    // PERFORMANCE: if it comes down to pure number-crunching speed,\n    // make Map, *Renderer, Location, Point3D, and Matrix abstract (?), and add JNI-backed native versions.\n    // specifically, this won't help JPanel or any swinging, so make sure it's worth it first.\n    // header data for a segment\n    public static class Header {\n\n        // raw stuff from the header\n        // min/max latitude, in seconds\n        private int minlat, maxlat;\n\n        public int getMinLatitude() {\n            return minlat;\n        }\n\n        public int getMaxLatitude() {\n            // outside of here, only one of these is ever needed!\n            return maxlat;\n        }\n\n        // min/max longitude, in seconds\n        private int minlong, maxlong;\n\n        public int getMinLongitude() {\n            return minlong;\n        }\n\n        public int getMaxLongitude() {\n            return maxlong;\n        }\n\n        // file offset to start reading data\n        private int address;\n\n        // they're <8bits, so scrunch them down as much as possible\n        // public byte continent; -- nobody uses this, currently\n        private byte category = 0;\n\n        private byte type = 3;\n\n        public byte getCategory() {\n            return category;\n        }\n\n        public byte getType() {\n            return type;\n        }\n\n        // SPEED: if i store nsegs here the first time i read it, data.load() is just one read()\n        // SPACE: bytes don't get packed.  ptth.\n        // buf: the bytes that make up the segment's header\n        // offset: where in buf to start reading/parsing\n        public Header(byte[] buf, int offset) {\n            // read starting at offset\n            // decode() wants which INT to parse, not which BYTEs to parse\n            offset /= 4;\n            maxlat = decode(buf, offset + 0);\n            minlat = decode(buf, offset + 1);\n            // MEMORY: maybe store only minlat(int) and (maxlat-minlat)(short) -- but saves only 2B x 30000 = 60K\n            //            if (Math.abs(maxlat - minlat) > 127*256)\n            //                System.out.println(\"d_lat = \" + (maxlat - minlat));\n            maxlong = decode(buf, offset + 2);\n            minlong = decode(buf, offset + 3);\n            //            if (Math.abs(maxlong - minlong) > 127*256)\n            //                System.out.println(\"d_long = \" + (maxlong - minlong));\n            // MEMORY: maybe store only minlon(int) and (maxlon-minlon)(short) -- but saves only 2B x 30000 = 60K\n            // are any/all of these packable?  if minlat<=2B, minlong<=2B, they could be packed into an int, for example.\n            address = decode(buf, offset + 4);\n            // continent = (byte) decode(buf, offset+5); -- nobody uses this, currently\n            category = log2(decode(buf, offset + 6));\n            type = (byte) decode(buf, offset + 7);\n            // QUESTION: are all headers in order on disk?  if so, i don't have to do 2 read()s when i load the data,\n            // because the number of bytes to load is just (header[i+1].addr-header[i].addr).\n            // THIS WOULD CUT SEGMENT LOAD TIME IN HALF!\n            // (you'd need to store n_lines in header, then, right?  that's probably easiest.)\n        }\n\n        // returns the first bit of b that's set\n        // -- since i know only 1 is ever set, =log_2(b)\n        private static byte log2(int b) {\n            for (byte i = 1; i <= 32; i++) {\n                if ((b & 1) != 0)\n                    return i;\n                b >>= 1;\n            }\n            // can't happen\n            return -1;\n        }\n\n        private Data getData() {\n            // (caching was here; now removed)\n            synchronized (rez) {\n                try {\n                    return Data.load(address, points);\n                } catch (IOException ioe) {\n                    System.out.println(\"error loading data: \" + ioe);\n                    return null;\n                }\n            }\n        }\n\n        // TODO: add caching again\n        // really horrible caching!\n        Data d = null;\n\n        // number of points that make up this segment\n        private int points;\n\n        // PERF: i also make Data.load() faster now: since i already know how many\n        // bytes to load, i don't need to call read() twice.\n        // TODO: mark on zoom slider where codes/names threshold is?\n        public int getNumberOfPoints() {\n            return points;\n        }\n\n        public void projectData(Projection r, int[] x, int[] y) throws IllegalArgumentException {\n            try {\n                if (d == null)\n                    d = getData();\n                d.projectData(r, x, y);\n            } catch (Throwable t) {\n                System.out.println(\"t=\" + t);\n                t.printStackTrace();\n            }\n        }\n\n        // used to figure out where the corners are.\n        // BUG(fixed?): need to synch if you're going to use a class member.\n        private static Location corner = new Location();\n\n        public int isVisible(Projection r) {\n            synchronized (corner) {\n                // compute min/min corner\n                corner.setLatitudeAsSeconds(minlat);\n                corner.setLongitudeAsSeconds(minlong);\n                r.project(corner, p1);\n                // compute max/max corner\n                corner.setLatitudeAsSeconds(maxlat);\n                corner.setLongitudeAsSeconds(maxlong);\n                r.project(corner, p2);\n            }\n            // IDEA: project() returns null if z<0, or a Point2D, since z isn't needed except for z-clipping.\n            // no, because sometimes one point of a segment might be invisible, which will cause a npe.\n            {\n                // WAS: if !r.isVisible2(p1,p2) return Projection.VISIBLE_NO;\n                // z-clipping: THIS DOESNT EVEN MAKE SENSE IN RECTANGULAR PROJECTION!\n                if (p1.getZ() < 0 || p2.getZ() < 0)\n                    return VISIBLE_NO;\n                // check for entirely outside viewport -- even this isn't entirely correct...\n                if ((p1.getX() > r.view.size.width && p2.getX() > r.view.size.width) || (p1.getY() > r.view.size.height && p2.getY() > r.view.size.height) || (p1.getX() < 0 && p2.getX() < 0) || (p1.getY() < 0 && p2.getY() < 0))\n                    return VISIBLE_NO;\n            }\n            // just a point?\n            if (((int) p1.getX() == (int) p2.getX()) && ((int) p1.getY() == (int) p2.getY()))\n                return VISIBLE_POINT;\n            return VISIBLE_YES;\n        }\n    }\n\n    // weird!\n    private static Point3D p1 = new Point3D(), p2 = new Point3D();\n\n    /**\n     * Not visible.\n     */\n    public static final int VISIBLE_NO = 0;\n\n    /**\n     * Visible.\n     */\n    public static final int VISIBLE_YES = 1;\n\n    /**\n     * Visible, but only as a point (1 pixel).\n     */\n    public static final int VISIBLE_POINT = 2;\n\n    // TODO: with high-res printing (600 dpi laser printers) and antialiasing,\n    // is VISIBLE_POINT helping?  is it doing more harm than good?  what sort\n    // of performance gain does it offer?\n    private static final int MAGIC = 0x86460346;\n\n    // opening the map file and loading all the headers takes a couple hundred milliseconds.\n    // enough for an hourglass pointer, perhaps, but not enough for a progress dialog.\n    private static void open(File f) throws IOException {\n        // check its existence first\n        if (!f.exists())\n            throw new FileNotFoundException();\n        // make sure it's the right size: this is a quick validity check\n        /*if (f.length() != 46638184)\n            throw new IOException(\"Not a map file (wrong length)\");*/\n        // BUG? shouldn't this be in the synch block, too?\n        // -- synch on something else?  synch on class?  not needed?\n        rez = new RandomAccessFile(f, \"r\");\n        synchronized (rez) {\n            // start to read file: 3 ints at once\n            // magic, address of header[0], number of segments\n            byte[] buf3 = new byte[3 * 4];\n            readAll(rez, buf3);\n            // first number is magic\n            int magic = decode(buf3, 0);\n            if (magic != MAGIC)\n                throw new IOException(\"Not a map file (bad magic)\");\n            // second number is addr=12 (useless)\n            // third number is number of segments: 31845\n            int count = decode(buf3, 2);\n            // load all the segment headers\n            // -- (~250K raw, ~1MB in memory, around 500ms to load)\n            // -- load chunks at a time, and then parse them.\n            headers = new Header[count];\n            // load 1024 headers at a time from disk (32K blocks)\n            final int CHUNK = 1024;\n            // 8 4-byte ints in a segment header\n            byte[] buf = new byte[CHUNK * 8 * 4];\n            int left = count;\n            // sort of redundant now, huh?  (hint: it's count-left)\n            int done = 0;\n            while (left > 0) {\n                int len = Math.min(left, CHUNK);\n                readAll(rez, buf, 0, len * 8 * 4);\n                for (int j = 0; j < len; j++) {\n                    headers[done] = new Header(buf, j * 8 * 4);\n                    done++;\n                }\n                left -= CHUNK;\n            }\n            // PERF: this would be simpler -- and probably faster -- if i just snarfed up all the headers at once.\n            // now fill in the sizes for the header\n            for (int i = 0; i < count - 1; i++) {\n                headers[i].points = (headers[i + 1].address - headers[i].address) / 8;\n            }\n            headers[count - 1].points = ((int) rez.length() - headers[count - 1].address) / 8;\n        }\n    }\n\n    // pick the /n/th int, decoding from little-endian; used by map, too.\n    // why isn't this built into the reader itself?  because i usually want to read a big chunk at once, and parse it later.\n    private static int decode(byte[] buf, int n) {\n        // the \"0x... &\" stuff is necessary, though my brain must be fried because i'm not sure why.\n        int x = 0xFF000000 & (buf[4 * n + 3] << 24);\n        x |= 0x00FF0000 & (buf[4 * n + 2] << 16);\n        x |= 0x0000FF00 & (buf[4 * n + 1] << 8);\n        x |= 0x000000FF & (buf[4 * n]);\n        return x;\n    }\n\n    // Close the map file. -- COMPLETELY UNUSED.\n    public static void close() throws IOException {\n        // would finalize be better?\n        synchronized (rez) {\n            rez.close();\n        }\n    }\n\n    private static int sign(int x) {\n        return (x > 0 ? 1 : (x < 0 ? -1 : 0));\n    }\n\n    public static void main(String[] args) throws Exception {\n        int maxdlat = 0, maxdlong = 0;\n        int maxx = 0, maxy = 0;\n        int maxdx = 0, maxdy = 0;\n        int numBad = 0;\n        Iterator iter = MapFile.getHeaders();\n        while (iter.hasNext()) {\n            Header h = (Header) iter.next();\n            //            if (h.maxlong>0 && h.minlong<0)\n            //                maxdlong = Math.max(maxdlong, h.maxlong - h.minlong - 3600*360); // special case\n            //            else\n            maxdlong = Math.max(maxdlong, h.maxlong - h.minlong);\n            maxdlat = Math.max(maxdlat, h.maxlat - h.minlat);\n            Data d = h.getData();\n            for (int i = 0; i < d.longitude.length; i++) {\n                maxx = Math.max(maxx, d.longitude[i]);\n                maxy = Math.max(maxy, d.latitude[i]);\n                if (i != 0) {\n                    int dx = d.longitude[i] - d.longitude[i - 1];\n                    int dy = d.latitude[i] - d.latitude[i - 1];\n                    //                    if (sign(d.longitude[i]) != sign(d.longitude[i-1])) {\n                    //                        dx = d.longitude[i] - d.longitude[i-1] - 3600*360;\n                    //                        numBad++;\n                    //                    }\n                    maxdx = Math.max(maxdx, dx);\n                    maxdy = Math.max(maxdy, dy);\n                }\n            }\n        }\n        System.out.println(\"maxdlat = \" + maxdlat);\n        System.out.println(\"maxdlong = \" + maxdlong);\n        System.out.println(\"maxx = \" + maxx);\n        System.out.println(\"maxy = \" + maxy);\n        System.out.println(\"maxdx = \" + maxdx);\n        System.out.println(\"maxdy = \" + maxdy);\n        System.out.println(\"numBad = \" + numBad);\n    }\n}\n",
		"id": "/EvoSuiteBenchmark/35_corina/src/main/java/corina/map/MapFile.java",
		"test_prompt": "// MapFileTest.java\n// This file is part of Corina.\n//\n// Corina is free software; you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation; either version 2 of the License, or\n// (at your option) any later version.\n//\n// Corina is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Corina; if not, write to the Free Software\n// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n//\n// Copyright 2001 Ken Harris <kbh7@cornell.edu>\n//\npackage corina.map;\n\nimport java.io.File;\nimport java.io.FileNotFoundException;\nimport java.io.FileOutputStream;\nimport java.io.IOException;\nimport java.io.InputStream;\nimport java.io.OutputStream;\nimport java.io.RandomAccessFile;\nimport java.util.Iterator;\nimport java.util.NoSuchElementException;\nimport java.util.zip.GZIPInputStream;\nimport javax.swing.JOptionPane;\nimport javax.swing.ProgressMonitor;\nimport corina.site.Location;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link MapFile}.\n* It contains ten unit test cases for the {@link MapFile#getHeaders()} method.\n*/\nclass MapFileTest {"
	},
	{
		"original_code": "// Layout.java\npackage corina.gui;\n\nimport corina.gui.layouts.ButtonLayout;\nimport javax.swing.JPanel;\nimport javax.swing.Box;\nimport java.awt.Component;\nimport java.awt.BorderLayout;\nimport javax.swing.BoxLayout;\nimport java.awt.FlowLayout;\nimport javax.swing.JLabel;\nimport java.awt.GridLayout;\n\n// TODO: gpl header, javadoc!\n// a factory for easily creating panels of a given layout.\n// for example,\n// JPanel p = Layout.borderLayout(null,\n//                                null, content, null,\n//                                Layout.buttonLayout(cancel, ok));\n// TODO: if cancel comes before ok, and os=win32, swap them?\n// TODO: accept 1, 2, 3, ... (...5?) components directly (not in array)\n// WRITEME: i'd like to be able to put an integer in any slot for a strut, but i can't.\n// -- BETTER: class Strut(w,h) -- e.g., Layout.flowLayoutL(\"Value:\", Strut.w(4), myField);\n// TODO: i tend to need to use temp vars for the output of these methods,\n// simply to set custom borders on them.  i think going to an XML generator\n// might actually help with that.\n// FIXME: consolidate componentOrGlue(), componentOrString() -- it\n// should be pretty much the same inputs for any of these methods.\npublic class Layout {\n\n    // add a component, if non-null, or add some glue\n    private static Component componentOrGlue(Component c) {\n        return (c != null ? c : Box.createHorizontalGlue());\n    }\n\n    // --------\n    // button layout\n    public static JPanel buttonLayout(Component c1) {\n        JPanel p = new JPanel(new ButtonLayout());\n        p.add(componentOrGlue(c1));\n        return p;\n    }\n\n    public static JPanel buttonLayout(Component c1, Component c2) {\n        JPanel p = new JPanel(new ButtonLayout());\n        p.add(componentOrGlue(c1));\n        p.add(componentOrGlue(c2));\n        return p;\n    }\n\n    public static JPanel buttonLayout(Component c1, Component c2, Component c3) {\n        JPanel p = new JPanel(new ButtonLayout());\n        p.add(componentOrGlue(c1));\n        p.add(componentOrGlue(c2));\n        p.add(componentOrGlue(c3));\n        return p;\n    }\n\n    public static JPanel buttonLayout(Component c1, Component c2, Component c3, Component c4) {\n        JPanel p = new JPanel(new ButtonLayout());\n        p.add(componentOrGlue(c1));\n        p.add(componentOrGlue(c2));\n        p.add(componentOrGlue(c3));\n        p.add(componentOrGlue(c4));\n        return p;\n    }\n\n    public static JPanel buttonLayout(Component c1, Component c2, Component c3, Component c4, Component c5) {\n        JPanel p = new JPanel(new ButtonLayout());\n        p.add(componentOrGlue(c1));\n        p.add(componentOrGlue(c2));\n        p.add(componentOrGlue(c3));\n        p.add(componentOrGlue(c4));\n        p.add(componentOrGlue(c5));\n        return p;\n    }\n\n    // --------\n    // border layout is verbose, too.  let's see what we can do about that.\n    public static JPanel borderLayout(Component n, Component w, Component c, Component e, Component s) {\n        // is this default, anyway?\n        JPanel p = new JPanel(new BorderLayout());\n        if (n != null)\n            p.add(n, BorderLayout.NORTH);\n        if (w != null)\n            p.add(w, BorderLayout.WEST);\n        if (c != null)\n            p.add(c, BorderLayout.CENTER);\n        if (e != null)\n            p.add(e, BorderLayout.EAST);\n        if (s != null)\n            p.add(s, BorderLayout.SOUTH);\n        return p;\n    }\n\n    // --------\n    // box layout...\n    public static JPanel boxLayoutY(Component c1) {\n        JPanel p = new JPanel();\n        p.setLayout(new BoxLayout(p, BoxLayout.Y_AXIS));\n        p.add(c1);\n        return p;\n    }\n\n    public static JPanel boxLayoutY(Component c1, Component c2) {\n        JPanel p = new JPanel();\n        p.setLayout(new BoxLayout(p, BoxLayout.Y_AXIS));\n        p.add(c1);\n        p.add(c2);\n        return p;\n    }\n\n    public static JPanel boxLayoutY(Component c1, Component c2, Component c3) {\n        JPanel p = new JPanel();\n        p.setLayout(new BoxLayout(p, BoxLayout.Y_AXIS));\n        p.add(c1);\n        p.add(c2);\n        p.add(c3);\n        return p;\n    }\n\n    public static JPanel boxLayoutY(Component c1, Component c2, Component c3, Component c4) {\n        JPanel p = new JPanel();\n        p.setLayout(new BoxLayout(p, BoxLayout.Y_AXIS));\n        p.add(c1);\n        p.add(c2);\n        p.add(c3);\n        p.add(c4);\n        return p;\n    }\n\n    public static JPanel boxLayoutY(Component c1, Component c2, Component c3, Component c4, Component c5) {\n        JPanel p = new JPanel();\n        p.setLayout(new BoxLayout(p, BoxLayout.Y_AXIS));\n        p.add(c1);\n        p.add(c2);\n        p.add(c3);\n        p.add(c4);\n        p.add(c5);\n        return p;\n    }\n\n    // -------------\n    // flow layout...\n    public static JPanel flowLayoutL(Object o1) {\n        JPanel p = new JPanel(new FlowLayout(FlowLayout.LEFT));\n        p.add(componentOrString(o1));\n        return p;\n    }\n\n    public static JPanel flowLayoutL(Object o1, Object o2) {\n        JPanel p = new JPanel(new FlowLayout(FlowLayout.LEFT));\n        p.add(componentOrString(o1));\n        p.add(componentOrString(o2));\n        return p;\n    }\n\n    public static JPanel flowLayoutR(Object o1, Object o2) {\n        JPanel p = new JPanel(new FlowLayout(FlowLayout.RIGHT));\n        p.add(componentOrString(o1));\n        p.add(componentOrString(o2));\n        return p;\n    }\n\n    public static JPanel flowLayoutL(Object o1, Object o2, Object o3) {\n        JPanel p = new JPanel(new FlowLayout(FlowLayout.LEFT));\n        p.add(componentOrString(o1));\n        p.add(componentOrString(o2));\n        p.add(componentOrString(o3));\n        return p;\n    }\n\n    public static JPanel flowLayoutL(Object o1, Object o2, Object o3, Object o4) {\n        JPanel p = new JPanel(new FlowLayout(FlowLayout.LEFT));\n        p.add(componentOrString(o1));\n        p.add(componentOrString(o2));\n        p.add(componentOrString(o3));\n        p.add(componentOrString(o4));\n        return p;\n    }\n\n    public static JPanel flowLayoutL(Object o1, Object o2, Object o3, Object o4, Object o5) {\n        JPanel p = new JPanel(new FlowLayout(FlowLayout.LEFT));\n        p.add(componentOrString(o1));\n        p.add(componentOrString(o2));\n        p.add(componentOrString(o3));\n        p.add(componentOrString(o4));\n        p.add(componentOrString(o5));\n        return p;\n    }\n\n    public static JPanel flowLayoutL(Object o1, Object o2, Object o3, Object o4, Object o5, Object o6) {\n        JPanel p = new JPanel(new FlowLayout(FlowLayout.LEFT));\n        p.add(componentOrString(o1));\n        p.add(componentOrString(o2));\n        p.add(componentOrString(o3));\n        p.add(componentOrString(o4));\n        p.add(componentOrString(o5));\n        p.add(componentOrString(o6));\n        return p;\n    }\n\n    public static JPanel flowLayoutL(Object o1, Object o2, Object o3, Object o4, Object o5, Object o6, Object o7) {\n        JPanel p = new JPanel(new FlowLayout(FlowLayout.LEFT));\n        p.add(componentOrString(o1));\n        p.add(componentOrString(o2));\n        p.add(componentOrString(o3));\n        p.add(componentOrString(o4));\n        p.add(componentOrString(o5));\n        p.add(componentOrString(o6));\n        p.add(componentOrString(o7));\n        return p;\n    }\n\n    public static JPanel flowLayoutC(Object o1) {\n        JPanel p = new JPanel(new FlowLayout(FlowLayout.CENTER));\n        p.add(componentOrString(o1));\n        return p;\n    }\n\n    // FIXME: in ANY layout, a string should be made into a jlabel automatically.\n    private static Component componentOrString(Object o) {\n        return (o instanceof String ? new JLabel((String) o) : (Component) o);\n    }\n\n    // -------------\n    // grid layout...\n    public static JPanel gridLayout(Component[][] o) {\n        int rows = o.length;\n        int cols = o[0].length;\n        JPanel p = new JPanel(new GridLayout(rows, cols));\n        for (int i = 0; i < rows; i++) for (int j = 0; j < cols; j++) p.add(o[i][j]);\n        return p;\n    }\n\n    public static JPanel gridLayout(Component[][] o, int hgap, int vgap) {\n        int rows = o.length;\n        int cols = o[0].length;\n        JPanel p = new JPanel(new GridLayout(rows, cols, hgap, vgap));\n        for (int i = 0; i < rows; i++) for (int j = 0; j < cols; j++) p.add(o[i][j]);\n        return p;\n    }\n}\n",
		"id": "/EvoSuiteBenchmark/35_corina/src/main/java/corina/gui/Layout_0Test.java",
		"test_prompt": "// Layout_0Test.java\npackage corina.gui;\n\nimport corina.gui.layouts.ButtonLayout;\nimport javax.swing.JPanel;\nimport javax.swing.Box;\nimport java.awt.Component;\nimport java.awt.BorderLayout;\nimport javax.swing.BoxLayout;\nimport java.awt.FlowLayout;\nimport javax.swing.JLabel;\nimport java.awt.GridLayout;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link Layout}.\n* It contains ten unit test cases for the {@link Layout#buttonLayout(Component)} method.\n*/\nclass Layout_0Test {"
	},
	{
		"original_code": "// Layout.java\npackage corina.gui;\n\nimport corina.gui.layouts.ButtonLayout;\nimport javax.swing.JPanel;\nimport javax.swing.Box;\nimport java.awt.Component;\nimport java.awt.BorderLayout;\nimport javax.swing.BoxLayout;\nimport java.awt.FlowLayout;\nimport javax.swing.JLabel;\nimport java.awt.GridLayout;\n\n// TODO: gpl header, javadoc!\n// a factory for easily creating panels of a given layout.\n// for example,\n// JPanel p = Layout.borderLayout(null,\n//                                null, content, null,\n//                                Layout.buttonLayout(cancel, ok));\n// TODO: if cancel comes before ok, and os=win32, swap them?\n// TODO: accept 1, 2, 3, ... (...5?) components directly (not in array)\n// WRITEME: i'd like to be able to put an integer in any slot for a strut, but i can't.\n// -- BETTER: class Strut(w,h) -- e.g., Layout.flowLayoutL(\"Value:\", Strut.w(4), myField);\n// TODO: i tend to need to use temp vars for the output of these methods,\n// simply to set custom borders on them.  i think going to an XML generator\n// might actually help with that.\n// FIXME: consolidate componentOrGlue(), componentOrString() -- it\n// should be pretty much the same inputs for any of these methods.\npublic class Layout {\n\n    // add a component, if non-null, or add some glue\n    private static Component componentOrGlue(Component c) {\n        return (c != null ? c : Box.createHorizontalGlue());\n    }\n\n    // --------\n    // button layout\n    public static JPanel buttonLayout(Component c1) {\n        JPanel p = new JPanel(new ButtonLayout());\n        p.add(componentOrGlue(c1));\n        return p;\n    }\n\n    public static JPanel buttonLayout(Component c1, Component c2) {\n        JPanel p = new JPanel(new ButtonLayout());\n        p.add(componentOrGlue(c1));\n        p.add(componentOrGlue(c2));\n        return p;\n    }\n\n    public static JPanel buttonLayout(Component c1, Component c2, Component c3) {\n        JPanel p = new JPanel(new ButtonLayout());\n        p.add(componentOrGlue(c1));\n        p.add(componentOrGlue(c2));\n        p.add(componentOrGlue(c3));\n        return p;\n    }\n\n    public static JPanel buttonLayout(Component c1, Component c2, Component c3, Component c4) {\n        JPanel p = new JPanel(new ButtonLayout());\n        p.add(componentOrGlue(c1));\n        p.add(componentOrGlue(c2));\n        p.add(componentOrGlue(c3));\n        p.add(componentOrGlue(c4));\n        return p;\n    }\n\n    public static JPanel buttonLayout(Component c1, Component c2, Component c3, Component c4, Component c5) {\n        JPanel p = new JPanel(new ButtonLayout());\n        p.add(componentOrGlue(c1));\n        p.add(componentOrGlue(c2));\n        p.add(componentOrGlue(c3));\n        p.add(componentOrGlue(c4));\n        p.add(componentOrGlue(c5));\n        return p;\n    }\n\n    // --------\n    // border layout is verbose, too.  let's see what we can do about that.\n    public static JPanel borderLayout(Component n, Component w, Component c, Component e, Component s) {\n        // is this default, anyway?\n        JPanel p = new JPanel(new BorderLayout());\n        if (n != null)\n            p.add(n, BorderLayout.NORTH);\n        if (w != null)\n            p.add(w, BorderLayout.WEST);\n        if (c != null)\n            p.add(c, BorderLayout.CENTER);\n        if (e != null)\n            p.add(e, BorderLayout.EAST);\n        if (s != null)\n            p.add(s, BorderLayout.SOUTH);\n        return p;\n    }\n\n    // --------\n    // box layout...\n    public static JPanel boxLayoutY(Component c1) {\n        JPanel p = new JPanel();\n        p.setLayout(new BoxLayout(p, BoxLayout.Y_AXIS));\n        p.add(c1);\n        return p;\n    }\n\n    public static JPanel boxLayoutY(Component c1, Component c2) {\n        JPanel p = new JPanel();\n        p.setLayout(new BoxLayout(p, BoxLayout.Y_AXIS));\n        p.add(c1);\n        p.add(c2);\n        return p;\n    }\n\n    public static JPanel boxLayoutY(Component c1, Component c2, Component c3) {\n        JPanel p = new JPanel();\n        p.setLayout(new BoxLayout(p, BoxLayout.Y_AXIS));\n        p.add(c1);\n        p.add(c2);\n        p.add(c3);\n        return p;\n    }\n\n    public static JPanel boxLayoutY(Component c1, Component c2, Component c3, Component c4) {\n        JPanel p = new JPanel();\n        p.setLayout(new BoxLayout(p, BoxLayout.Y_AXIS));\n        p.add(c1);\n        p.add(c2);\n        p.add(c3);\n        p.add(c4);\n        return p;\n    }\n\n    public static JPanel boxLayoutY(Component c1, Component c2, Component c3, Component c4, Component c5) {\n        JPanel p = new JPanel();\n        p.setLayout(new BoxLayout(p, BoxLayout.Y_AXIS));\n        p.add(c1);\n        p.add(c2);\n        p.add(c3);\n        p.add(c4);\n        p.add(c5);\n        return p;\n    }\n\n    // -------------\n    // flow layout...\n    public static JPanel flowLayoutL(Object o1) {\n        JPanel p = new JPanel(new FlowLayout(FlowLayout.LEFT));\n        p.add(componentOrString(o1));\n        return p;\n    }\n\n    public static JPanel flowLayoutL(Object o1, Object o2) {\n        JPanel p = new JPanel(new FlowLayout(FlowLayout.LEFT));\n        p.add(componentOrString(o1));\n        p.add(componentOrString(o2));\n        return p;\n    }\n\n    public static JPanel flowLayoutR(Object o1, Object o2) {\n        JPanel p = new JPanel(new FlowLayout(FlowLayout.RIGHT));\n        p.add(componentOrString(o1));\n        p.add(componentOrString(o2));\n        return p;\n    }\n\n    public static JPanel flowLayoutL(Object o1, Object o2, Object o3) {\n        JPanel p = new JPanel(new FlowLayout(FlowLayout.LEFT));\n        p.add(componentOrString(o1));\n        p.add(componentOrString(o2));\n        p.add(componentOrString(o3));\n        return p;\n    }\n\n    public static JPanel flowLayoutL(Object o1, Object o2, Object o3, Object o4) {\n        JPanel p = new JPanel(new FlowLayout(FlowLayout.LEFT));\n        p.add(componentOrString(o1));\n        p.add(componentOrString(o2));\n        p.add(componentOrString(o3));\n        p.add(componentOrString(o4));\n        return p;\n    }\n\n    public static JPanel flowLayoutL(Object o1, Object o2, Object o3, Object o4, Object o5) {\n        JPanel p = new JPanel(new FlowLayout(FlowLayout.LEFT));\n        p.add(componentOrString(o1));\n        p.add(componentOrString(o2));\n        p.add(componentOrString(o3));\n        p.add(componentOrString(o4));\n        p.add(componentOrString(o5));\n        return p;\n    }\n\n    public static JPanel flowLayoutL(Object o1, Object o2, Object o3, Object o4, Object o5, Object o6) {\n        JPanel p = new JPanel(new FlowLayout(FlowLayout.LEFT));\n        p.add(componentOrString(o1));\n        p.add(componentOrString(o2));\n        p.add(componentOrString(o3));\n        p.add(componentOrString(o4));\n        p.add(componentOrString(o5));\n        p.add(componentOrString(o6));\n        return p;\n    }\n\n    public static JPanel flowLayoutL(Object o1, Object o2, Object o3, Object o4, Object o5, Object o6, Object o7) {\n        JPanel p = new JPanel(new FlowLayout(FlowLayout.LEFT));\n        p.add(componentOrString(o1));\n        p.add(componentOrString(o2));\n        p.add(componentOrString(o3));\n        p.add(componentOrString(o4));\n        p.add(componentOrString(o5));\n        p.add(componentOrString(o6));\n        p.add(componentOrString(o7));\n        return p;\n    }\n\n    public static JPanel flowLayoutC(Object o1) {\n        JPanel p = new JPanel(new FlowLayout(FlowLayout.CENTER));\n        p.add(componentOrString(o1));\n        return p;\n    }\n\n    // FIXME: in ANY layout, a string should be made into a jlabel automatically.\n    private static Component componentOrString(Object o) {\n        return (o instanceof String ? new JLabel((String) o) : (Component) o);\n    }\n\n    // -------------\n    // grid layout...\n    public static JPanel gridLayout(Component[][] o) {\n        int rows = o.length;\n        int cols = o[0].length;\n        JPanel p = new JPanel(new GridLayout(rows, cols));\n        for (int i = 0; i < rows; i++) for (int j = 0; j < cols; j++) p.add(o[i][j]);\n        return p;\n    }\n\n    public static JPanel gridLayout(Component[][] o, int hgap, int vgap) {\n        int rows = o.length;\n        int cols = o[0].length;\n        JPanel p = new JPanel(new GridLayout(rows, cols, hgap, vgap));\n        for (int i = 0; i < rows; i++) for (int j = 0; j < cols; j++) p.add(o[i][j]);\n        return p;\n    }\n}\n",
		"id": "/EvoSuiteBenchmark/35_corina/src/main/java/corina/gui/Layout_1Test.java",
		"test_prompt": "// Layout_1Test.java\npackage corina.gui;\n\nimport corina.gui.layouts.ButtonLayout;\nimport javax.swing.JPanel;\nimport javax.swing.Box;\nimport java.awt.Component;\nimport java.awt.BorderLayout;\nimport javax.swing.BoxLayout;\nimport java.awt.FlowLayout;\nimport javax.swing.JLabel;\nimport java.awt.GridLayout;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link Layout}.\n* It contains ten unit test cases for the {@link Layout#buttonLayout(Component, Component)} method.\n*/\nclass Layout_1Test {"
	},
	{
		"original_code": "// Layout.java\npackage corina.gui;\n\nimport corina.gui.layouts.ButtonLayout;\nimport javax.swing.JPanel;\nimport javax.swing.Box;\nimport java.awt.Component;\nimport java.awt.BorderLayout;\nimport javax.swing.BoxLayout;\nimport java.awt.FlowLayout;\nimport javax.swing.JLabel;\nimport java.awt.GridLayout;\n\n// TODO: gpl header, javadoc!\n// a factory for easily creating panels of a given layout.\n// for example,\n// JPanel p = Layout.borderLayout(null,\n//                                null, content, null,\n//                                Layout.buttonLayout(cancel, ok));\n// TODO: if cancel comes before ok, and os=win32, swap them?\n// TODO: accept 1, 2, 3, ... (...5?) components directly (not in array)\n// WRITEME: i'd like to be able to put an integer in any slot for a strut, but i can't.\n// -- BETTER: class Strut(w,h) -- e.g., Layout.flowLayoutL(\"Value:\", Strut.w(4), myField);\n// TODO: i tend to need to use temp vars for the output of these methods,\n// simply to set custom borders on them.  i think going to an XML generator\n// might actually help with that.\n// FIXME: consolidate componentOrGlue(), componentOrString() -- it\n// should be pretty much the same inputs for any of these methods.\npublic class Layout {\n\n    // add a component, if non-null, or add some glue\n    private static Component componentOrGlue(Component c) {\n        return (c != null ? c : Box.createHorizontalGlue());\n    }\n\n    // --------\n    // button layout\n    public static JPanel buttonLayout(Component c1) {\n        JPanel p = new JPanel(new ButtonLayout());\n        p.add(componentOrGlue(c1));\n        return p;\n    }\n\n    public static JPanel buttonLayout(Component c1, Component c2) {\n        JPanel p = new JPanel(new ButtonLayout());\n        p.add(componentOrGlue(c1));\n        p.add(componentOrGlue(c2));\n        return p;\n    }\n\n    public static JPanel buttonLayout(Component c1, Component c2, Component c3) {\n        JPanel p = new JPanel(new ButtonLayout());\n        p.add(componentOrGlue(c1));\n        p.add(componentOrGlue(c2));\n        p.add(componentOrGlue(c3));\n        return p;\n    }\n\n    public static JPanel buttonLayout(Component c1, Component c2, Component c3, Component c4) {\n        JPanel p = new JPanel(new ButtonLayout());\n        p.add(componentOrGlue(c1));\n        p.add(componentOrGlue(c2));\n        p.add(componentOrGlue(c3));\n        p.add(componentOrGlue(c4));\n        return p;\n    }\n\n    public static JPanel buttonLayout(Component c1, Component c2, Component c3, Component c4, Component c5) {\n        JPanel p = new JPanel(new ButtonLayout());\n        p.add(componentOrGlue(c1));\n        p.add(componentOrGlue(c2));\n        p.add(componentOrGlue(c3));\n        p.add(componentOrGlue(c4));\n        p.add(componentOrGlue(c5));\n        return p;\n    }\n\n    // --------\n    // border layout is verbose, too.  let's see what we can do about that.\n    public static JPanel borderLayout(Component n, Component w, Component c, Component e, Component s) {\n        // is this default, anyway?\n        JPanel p = new JPanel(new BorderLayout());\n        if (n != null)\n            p.add(n, BorderLayout.NORTH);\n        if (w != null)\n            p.add(w, BorderLayout.WEST);\n        if (c != null)\n            p.add(c, BorderLayout.CENTER);\n        if (e != null)\n            p.add(e, BorderLayout.EAST);\n        if (s != null)\n            p.add(s, BorderLayout.SOUTH);\n        return p;\n    }\n\n    // --------\n    // box layout...\n    public static JPanel boxLayoutY(Component c1) {\n        JPanel p = new JPanel();\n        p.setLayout(new BoxLayout(p, BoxLayout.Y_AXIS));\n        p.add(c1);\n        return p;\n    }\n\n    public static JPanel boxLayoutY(Component c1, Component c2) {\n        JPanel p = new JPanel();\n        p.setLayout(new BoxLayout(p, BoxLayout.Y_AXIS));\n        p.add(c1);\n        p.add(c2);\n        return p;\n    }\n\n    public static JPanel boxLayoutY(Component c1, Component c2, Component c3) {\n        JPanel p = new JPanel();\n        p.setLayout(new BoxLayout(p, BoxLayout.Y_AXIS));\n        p.add(c1);\n        p.add(c2);\n        p.add(c3);\n        return p;\n    }\n\n    public static JPanel boxLayoutY(Component c1, Component c2, Component c3, Component c4) {\n        JPanel p = new JPanel();\n        p.setLayout(new BoxLayout(p, BoxLayout.Y_AXIS));\n        p.add(c1);\n        p.add(c2);\n        p.add(c3);\n        p.add(c4);\n        return p;\n    }\n\n    public static JPanel boxLayoutY(Component c1, Component c2, Component c3, Component c4, Component c5) {\n        JPanel p = new JPanel();\n        p.setLayout(new BoxLayout(p, BoxLayout.Y_AXIS));\n        p.add(c1);\n        p.add(c2);\n        p.add(c3);\n        p.add(c4);\n        p.add(c5);\n        return p;\n    }\n\n    // -------------\n    // flow layout...\n    public static JPanel flowLayoutL(Object o1) {\n        JPanel p = new JPanel(new FlowLayout(FlowLayout.LEFT));\n        p.add(componentOrString(o1));\n        return p;\n    }\n\n    public static JPanel flowLayoutL(Object o1, Object o2) {\n        JPanel p = new JPanel(new FlowLayout(FlowLayout.LEFT));\n        p.add(componentOrString(o1));\n        p.add(componentOrString(o2));\n        return p;\n    }\n\n    public static JPanel flowLayoutR(Object o1, Object o2) {\n        JPanel p = new JPanel(new FlowLayout(FlowLayout.RIGHT));\n        p.add(componentOrString(o1));\n        p.add(componentOrString(o2));\n        return p;\n    }\n\n    public static JPanel flowLayoutL(Object o1, Object o2, Object o3) {\n        JPanel p = new JPanel(new FlowLayout(FlowLayout.LEFT));\n        p.add(componentOrString(o1));\n        p.add(componentOrString(o2));\n        p.add(componentOrString(o3));\n        return p;\n    }\n\n    public static JPanel flowLayoutL(Object o1, Object o2, Object o3, Object o4) {\n        JPanel p = new JPanel(new FlowLayout(FlowLayout.LEFT));\n        p.add(componentOrString(o1));\n        p.add(componentOrString(o2));\n        p.add(componentOrString(o3));\n        p.add(componentOrString(o4));\n        return p;\n    }\n\n    public static JPanel flowLayoutL(Object o1, Object o2, Object o3, Object o4, Object o5) {\n        JPanel p = new JPanel(new FlowLayout(FlowLayout.LEFT));\n        p.add(componentOrString(o1));\n        p.add(componentOrString(o2));\n        p.add(componentOrString(o3));\n        p.add(componentOrString(o4));\n        p.add(componentOrString(o5));\n        return p;\n    }\n\n    public static JPanel flowLayoutL(Object o1, Object o2, Object o3, Object o4, Object o5, Object o6) {\n        JPanel p = new JPanel(new FlowLayout(FlowLayout.LEFT));\n        p.add(componentOrString(o1));\n        p.add(componentOrString(o2));\n        p.add(componentOrString(o3));\n        p.add(componentOrString(o4));\n        p.add(componentOrString(o5));\n        p.add(componentOrString(o6));\n        return p;\n    }\n\n    public static JPanel flowLayoutL(Object o1, Object o2, Object o3, Object o4, Object o5, Object o6, Object o7) {\n        JPanel p = new JPanel(new FlowLayout(FlowLayout.LEFT));\n        p.add(componentOrString(o1));\n        p.add(componentOrString(o2));\n        p.add(componentOrString(o3));\n        p.add(componentOrString(o4));\n        p.add(componentOrString(o5));\n        p.add(componentOrString(o6));\n        p.add(componentOrString(o7));\n        return p;\n    }\n\n    public static JPanel flowLayoutC(Object o1) {\n        JPanel p = new JPanel(new FlowLayout(FlowLayout.CENTER));\n        p.add(componentOrString(o1));\n        return p;\n    }\n\n    // FIXME: in ANY layout, a string should be made into a jlabel automatically.\n    private static Component componentOrString(Object o) {\n        return (o instanceof String ? new JLabel((String) o) : (Component) o);\n    }\n\n    // -------------\n    // grid layout...\n    public static JPanel gridLayout(Component[][] o) {\n        int rows = o.length;\n        int cols = o[0].length;\n        JPanel p = new JPanel(new GridLayout(rows, cols));\n        for (int i = 0; i < rows; i++) for (int j = 0; j < cols; j++) p.add(o[i][j]);\n        return p;\n    }\n\n    public static JPanel gridLayout(Component[][] o, int hgap, int vgap) {\n        int rows = o.length;\n        int cols = o[0].length;\n        JPanel p = new JPanel(new GridLayout(rows, cols, hgap, vgap));\n        for (int i = 0; i < rows; i++) for (int j = 0; j < cols; j++) p.add(o[i][j]);\n        return p;\n    }\n}\n",
		"id": "/EvoSuiteBenchmark/35_corina/src/main/java/corina/gui/Layout_2Test.java",
		"test_prompt": "// Layout_2Test.java\npackage corina.gui;\n\nimport corina.gui.layouts.ButtonLayout;\nimport javax.swing.JPanel;\nimport javax.swing.Box;\nimport java.awt.Component;\nimport java.awt.BorderLayout;\nimport javax.swing.BoxLayout;\nimport java.awt.FlowLayout;\nimport javax.swing.JLabel;\nimport java.awt.GridLayout;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link Layout}.\n* It contains ten unit test cases for the {@link Layout#buttonLayout(Component, Component, Component)} method.\n*/\nclass Layout_2Test {"
	},
	{
		"original_code": "// Layout.java\npackage corina.gui;\n\nimport corina.gui.layouts.ButtonLayout;\nimport javax.swing.JPanel;\nimport javax.swing.Box;\nimport java.awt.Component;\nimport java.awt.BorderLayout;\nimport javax.swing.BoxLayout;\nimport java.awt.FlowLayout;\nimport javax.swing.JLabel;\nimport java.awt.GridLayout;\n\n// TODO: gpl header, javadoc!\n// a factory for easily creating panels of a given layout.\n// for example,\n// JPanel p = Layout.borderLayout(null,\n//                                null, content, null,\n//                                Layout.buttonLayout(cancel, ok));\n// TODO: if cancel comes before ok, and os=win32, swap them?\n// TODO: accept 1, 2, 3, ... (...5?) components directly (not in array)\n// WRITEME: i'd like to be able to put an integer in any slot for a strut, but i can't.\n// -- BETTER: class Strut(w,h) -- e.g., Layout.flowLayoutL(\"Value:\", Strut.w(4), myField);\n// TODO: i tend to need to use temp vars for the output of these methods,\n// simply to set custom borders on them.  i think going to an XML generator\n// might actually help with that.\n// FIXME: consolidate componentOrGlue(), componentOrString() -- it\n// should be pretty much the same inputs for any of these methods.\npublic class Layout {\n\n    // add a component, if non-null, or add some glue\n    private static Component componentOrGlue(Component c) {\n        return (c != null ? c : Box.createHorizontalGlue());\n    }\n\n    // --------\n    // button layout\n    public static JPanel buttonLayout(Component c1) {\n        JPanel p = new JPanel(new ButtonLayout());\n        p.add(componentOrGlue(c1));\n        return p;\n    }\n\n    public static JPanel buttonLayout(Component c1, Component c2) {\n        JPanel p = new JPanel(new ButtonLayout());\n        p.add(componentOrGlue(c1));\n        p.add(componentOrGlue(c2));\n        return p;\n    }\n\n    public static JPanel buttonLayout(Component c1, Component c2, Component c3) {\n        JPanel p = new JPanel(new ButtonLayout());\n        p.add(componentOrGlue(c1));\n        p.add(componentOrGlue(c2));\n        p.add(componentOrGlue(c3));\n        return p;\n    }\n\n    public static JPanel buttonLayout(Component c1, Component c2, Component c3, Component c4) {\n        JPanel p = new JPanel(new ButtonLayout());\n        p.add(componentOrGlue(c1));\n        p.add(componentOrGlue(c2));\n        p.add(componentOrGlue(c3));\n        p.add(componentOrGlue(c4));\n        return p;\n    }\n\n    public static JPanel buttonLayout(Component c1, Component c2, Component c3, Component c4, Component c5) {\n        JPanel p = new JPanel(new ButtonLayout());\n        p.add(componentOrGlue(c1));\n        p.add(componentOrGlue(c2));\n        p.add(componentOrGlue(c3));\n        p.add(componentOrGlue(c4));\n        p.add(componentOrGlue(c5));\n        return p;\n    }\n\n    // --------\n    // border layout is verbose, too.  let's see what we can do about that.\n    public static JPanel borderLayout(Component n, Component w, Component c, Component e, Component s) {\n        // is this default, anyway?\n        JPanel p = new JPanel(new BorderLayout());\n        if (n != null)\n            p.add(n, BorderLayout.NORTH);\n        if (w != null)\n            p.add(w, BorderLayout.WEST);\n        if (c != null)\n            p.add(c, BorderLayout.CENTER);\n        if (e != null)\n            p.add(e, BorderLayout.EAST);\n        if (s != null)\n            p.add(s, BorderLayout.SOUTH);\n        return p;\n    }\n\n    // --------\n    // box layout...\n    public static JPanel boxLayoutY(Component c1) {\n        JPanel p = new JPanel();\n        p.setLayout(new BoxLayout(p, BoxLayout.Y_AXIS));\n        p.add(c1);\n        return p;\n    }\n\n    public static JPanel boxLayoutY(Component c1, Component c2) {\n        JPanel p = new JPanel();\n        p.setLayout(new BoxLayout(p, BoxLayout.Y_AXIS));\n        p.add(c1);\n        p.add(c2);\n        return p;\n    }\n\n    public static JPanel boxLayoutY(Component c1, Component c2, Component c3) {\n        JPanel p = new JPanel();\n        p.setLayout(new BoxLayout(p, BoxLayout.Y_AXIS));\n        p.add(c1);\n        p.add(c2);\n        p.add(c3);\n        return p;\n    }\n\n    public static JPanel boxLayoutY(Component c1, Component c2, Component c3, Component c4) {\n        JPanel p = new JPanel();\n        p.setLayout(new BoxLayout(p, BoxLayout.Y_AXIS));\n        p.add(c1);\n        p.add(c2);\n        p.add(c3);\n        p.add(c4);\n        return p;\n    }\n\n    public static JPanel boxLayoutY(Component c1, Component c2, Component c3, Component c4, Component c5) {\n        JPanel p = new JPanel();\n        p.setLayout(new BoxLayout(p, BoxLayout.Y_AXIS));\n        p.add(c1);\n        p.add(c2);\n        p.add(c3);\n        p.add(c4);\n        p.add(c5);\n        return p;\n    }\n\n    // -------------\n    // flow layout...\n    public static JPanel flowLayoutL(Object o1) {\n        JPanel p = new JPanel(new FlowLayout(FlowLayout.LEFT));\n        p.add(componentOrString(o1));\n        return p;\n    }\n\n    public static JPanel flowLayoutL(Object o1, Object o2) {\n        JPanel p = new JPanel(new FlowLayout(FlowLayout.LEFT));\n        p.add(componentOrString(o1));\n        p.add(componentOrString(o2));\n        return p;\n    }\n\n    public static JPanel flowLayoutR(Object o1, Object o2) {\n        JPanel p = new JPanel(new FlowLayout(FlowLayout.RIGHT));\n        p.add(componentOrString(o1));\n        p.add(componentOrString(o2));\n        return p;\n    }\n\n    public static JPanel flowLayoutL(Object o1, Object o2, Object o3) {\n        JPanel p = new JPanel(new FlowLayout(FlowLayout.LEFT));\n        p.add(componentOrString(o1));\n        p.add(componentOrString(o2));\n        p.add(componentOrString(o3));\n        return p;\n    }\n\n    public static JPanel flowLayoutL(Object o1, Object o2, Object o3, Object o4) {\n        JPanel p = new JPanel(new FlowLayout(FlowLayout.LEFT));\n        p.add(componentOrString(o1));\n        p.add(componentOrString(o2));\n        p.add(componentOrString(o3));\n        p.add(componentOrString(o4));\n        return p;\n    }\n\n    public static JPanel flowLayoutL(Object o1, Object o2, Object o3, Object o4, Object o5) {\n        JPanel p = new JPanel(new FlowLayout(FlowLayout.LEFT));\n        p.add(componentOrString(o1));\n        p.add(componentOrString(o2));\n        p.add(componentOrString(o3));\n        p.add(componentOrString(o4));\n        p.add(componentOrString(o5));\n        return p;\n    }\n\n    public static JPanel flowLayoutL(Object o1, Object o2, Object o3, Object o4, Object o5, Object o6) {\n        JPanel p = new JPanel(new FlowLayout(FlowLayout.LEFT));\n        p.add(componentOrString(o1));\n        p.add(componentOrString(o2));\n        p.add(componentOrString(o3));\n        p.add(componentOrString(o4));\n        p.add(componentOrString(o5));\n        p.add(componentOrString(o6));\n        return p;\n    }\n\n    public static JPanel flowLayoutL(Object o1, Object o2, Object o3, Object o4, Object o5, Object o6, Object o7) {\n        JPanel p = new JPanel(new FlowLayout(FlowLayout.LEFT));\n        p.add(componentOrString(o1));\n        p.add(componentOrString(o2));\n        p.add(componentOrString(o3));\n        p.add(componentOrString(o4));\n        p.add(componentOrString(o5));\n        p.add(componentOrString(o6));\n        p.add(componentOrString(o7));\n        return p;\n    }\n\n    public static JPanel flowLayoutC(Object o1) {\n        JPanel p = new JPanel(new FlowLayout(FlowLayout.CENTER));\n        p.add(componentOrString(o1));\n        return p;\n    }\n\n    // FIXME: in ANY layout, a string should be made into a jlabel automatically.\n    private static Component componentOrString(Object o) {\n        return (o instanceof String ? new JLabel((String) o) : (Component) o);\n    }\n\n    // -------------\n    // grid layout...\n    public static JPanel gridLayout(Component[][] o) {\n        int rows = o.length;\n        int cols = o[0].length;\n        JPanel p = new JPanel(new GridLayout(rows, cols));\n        for (int i = 0; i < rows; i++) for (int j = 0; j < cols; j++) p.add(o[i][j]);\n        return p;\n    }\n\n    public static JPanel gridLayout(Component[][] o, int hgap, int vgap) {\n        int rows = o.length;\n        int cols = o[0].length;\n        JPanel p = new JPanel(new GridLayout(rows, cols, hgap, vgap));\n        for (int i = 0; i < rows; i++) for (int j = 0; j < cols; j++) p.add(o[i][j]);\n        return p;\n    }\n}\n",
		"id": "/EvoSuiteBenchmark/35_corina/src/main/java/corina/gui/Layout_3Test.java",
		"test_prompt": "// Layout_3Test.java\npackage corina.gui;\n\nimport corina.gui.layouts.ButtonLayout;\nimport javax.swing.JPanel;\nimport javax.swing.Box;\nimport java.awt.Component;\nimport java.awt.BorderLayout;\nimport javax.swing.BoxLayout;\nimport java.awt.FlowLayout;\nimport javax.swing.JLabel;\nimport java.awt.GridLayout;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link Layout}.\n* It contains ten unit test cases for the {@link Layout#buttonLayout(Component, Component, Component, Component)} method.\n*/\nclass Layout_3Test {"
	},
	{
		"original_code": "// Layout.java\npackage corina.gui;\n\nimport corina.gui.layouts.ButtonLayout;\nimport javax.swing.JPanel;\nimport javax.swing.Box;\nimport java.awt.Component;\nimport java.awt.BorderLayout;\nimport javax.swing.BoxLayout;\nimport java.awt.FlowLayout;\nimport javax.swing.JLabel;\nimport java.awt.GridLayout;\n\n// TODO: gpl header, javadoc!\n// a factory for easily creating panels of a given layout.\n// for example,\n// JPanel p = Layout.borderLayout(null,\n//                                null, content, null,\n//                                Layout.buttonLayout(cancel, ok));\n// TODO: if cancel comes before ok, and os=win32, swap them?\n// TODO: accept 1, 2, 3, ... (...5?) components directly (not in array)\n// WRITEME: i'd like to be able to put an integer in any slot for a strut, but i can't.\n// -- BETTER: class Strut(w,h) -- e.g., Layout.flowLayoutL(\"Value:\", Strut.w(4), myField);\n// TODO: i tend to need to use temp vars for the output of these methods,\n// simply to set custom borders on them.  i think going to an XML generator\n// might actually help with that.\n// FIXME: consolidate componentOrGlue(), componentOrString() -- it\n// should be pretty much the same inputs for any of these methods.\npublic class Layout {\n\n    // add a component, if non-null, or add some glue\n    private static Component componentOrGlue(Component c) {\n        return (c != null ? c : Box.createHorizontalGlue());\n    }\n\n    // --------\n    // button layout\n    public static JPanel buttonLayout(Component c1) {\n        JPanel p = new JPanel(new ButtonLayout());\n        p.add(componentOrGlue(c1));\n        return p;\n    }\n\n    public static JPanel buttonLayout(Component c1, Component c2) {\n        JPanel p = new JPanel(new ButtonLayout());\n        p.add(componentOrGlue(c1));\n        p.add(componentOrGlue(c2));\n        return p;\n    }\n\n    public static JPanel buttonLayout(Component c1, Component c2, Component c3) {\n        JPanel p = new JPanel(new ButtonLayout());\n        p.add(componentOrGlue(c1));\n        p.add(componentOrGlue(c2));\n        p.add(componentOrGlue(c3));\n        return p;\n    }\n\n    public static JPanel buttonLayout(Component c1, Component c2, Component c3, Component c4) {\n        JPanel p = new JPanel(new ButtonLayout());\n        p.add(componentOrGlue(c1));\n        p.add(componentOrGlue(c2));\n        p.add(componentOrGlue(c3));\n        p.add(componentOrGlue(c4));\n        return p;\n    }\n\n    public static JPanel buttonLayout(Component c1, Component c2, Component c3, Component c4, Component c5) {\n        JPanel p = new JPanel(new ButtonLayout());\n        p.add(componentOrGlue(c1));\n        p.add(componentOrGlue(c2));\n        p.add(componentOrGlue(c3));\n        p.add(componentOrGlue(c4));\n        p.add(componentOrGlue(c5));\n        return p;\n    }\n\n    // --------\n    // border layout is verbose, too.  let's see what we can do about that.\n    public static JPanel borderLayout(Component n, Component w, Component c, Component e, Component s) {\n        // is this default, anyway?\n        JPanel p = new JPanel(new BorderLayout());\n        if (n != null)\n            p.add(n, BorderLayout.NORTH);\n        if (w != null)\n            p.add(w, BorderLayout.WEST);\n        if (c != null)\n            p.add(c, BorderLayout.CENTER);\n        if (e != null)\n            p.add(e, BorderLayout.EAST);\n        if (s != null)\n            p.add(s, BorderLayout.SOUTH);\n        return p;\n    }\n\n    // --------\n    // box layout...\n    public static JPanel boxLayoutY(Component c1) {\n        JPanel p = new JPanel();\n        p.setLayout(new BoxLayout(p, BoxLayout.Y_AXIS));\n        p.add(c1);\n        return p;\n    }\n\n    public static JPanel boxLayoutY(Component c1, Component c2) {\n        JPanel p = new JPanel();\n        p.setLayout(new BoxLayout(p, BoxLayout.Y_AXIS));\n        p.add(c1);\n        p.add(c2);\n        return p;\n    }\n\n    public static JPanel boxLayoutY(Component c1, Component c2, Component c3) {\n        JPanel p = new JPanel();\n        p.setLayout(new BoxLayout(p, BoxLayout.Y_AXIS));\n        p.add(c1);\n        p.add(c2);\n        p.add(c3);\n        return p;\n    }\n\n    public static JPanel boxLayoutY(Component c1, Component c2, Component c3, Component c4) {\n        JPanel p = new JPanel();\n        p.setLayout(new BoxLayout(p, BoxLayout.Y_AXIS));\n        p.add(c1);\n        p.add(c2);\n        p.add(c3);\n        p.add(c4);\n        return p;\n    }\n\n    public static JPanel boxLayoutY(Component c1, Component c2, Component c3, Component c4, Component c5) {\n        JPanel p = new JPanel();\n        p.setLayout(new BoxLayout(p, BoxLayout.Y_AXIS));\n        p.add(c1);\n        p.add(c2);\n        p.add(c3);\n        p.add(c4);\n        p.add(c5);\n        return p;\n    }\n\n    // -------------\n    // flow layout...\n    public static JPanel flowLayoutL(Object o1) {\n        JPanel p = new JPanel(new FlowLayout(FlowLayout.LEFT));\n        p.add(componentOrString(o1));\n        return p;\n    }\n\n    public static JPanel flowLayoutL(Object o1, Object o2) {\n        JPanel p = new JPanel(new FlowLayout(FlowLayout.LEFT));\n        p.add(componentOrString(o1));\n        p.add(componentOrString(o2));\n        return p;\n    }\n\n    public static JPanel flowLayoutR(Object o1, Object o2) {\n        JPanel p = new JPanel(new FlowLayout(FlowLayout.RIGHT));\n        p.add(componentOrString(o1));\n        p.add(componentOrString(o2));\n        return p;\n    }\n\n    public static JPanel flowLayoutL(Object o1, Object o2, Object o3) {\n        JPanel p = new JPanel(new FlowLayout(FlowLayout.LEFT));\n        p.add(componentOrString(o1));\n        p.add(componentOrString(o2));\n        p.add(componentOrString(o3));\n        return p;\n    }\n\n    public static JPanel flowLayoutL(Object o1, Object o2, Object o3, Object o4) {\n        JPanel p = new JPanel(new FlowLayout(FlowLayout.LEFT));\n        p.add(componentOrString(o1));\n        p.add(componentOrString(o2));\n        p.add(componentOrString(o3));\n        p.add(componentOrString(o4));\n        return p;\n    }\n\n    public static JPanel flowLayoutL(Object o1, Object o2, Object o3, Object o4, Object o5) {\n        JPanel p = new JPanel(new FlowLayout(FlowLayout.LEFT));\n        p.add(componentOrString(o1));\n        p.add(componentOrString(o2));\n        p.add(componentOrString(o3));\n        p.add(componentOrString(o4));\n        p.add(componentOrString(o5));\n        return p;\n    }\n\n    public static JPanel flowLayoutL(Object o1, Object o2, Object o3, Object o4, Object o5, Object o6) {\n        JPanel p = new JPanel(new FlowLayout(FlowLayout.LEFT));\n        p.add(componentOrString(o1));\n        p.add(componentOrString(o2));\n        p.add(componentOrString(o3));\n        p.add(componentOrString(o4));\n        p.add(componentOrString(o5));\n        p.add(componentOrString(o6));\n        return p;\n    }\n\n    public static JPanel flowLayoutL(Object o1, Object o2, Object o3, Object o4, Object o5, Object o6, Object o7) {\n        JPanel p = new JPanel(new FlowLayout(FlowLayout.LEFT));\n        p.add(componentOrString(o1));\n        p.add(componentOrString(o2));\n        p.add(componentOrString(o3));\n        p.add(componentOrString(o4));\n        p.add(componentOrString(o5));\n        p.add(componentOrString(o6));\n        p.add(componentOrString(o7));\n        return p;\n    }\n\n    public static JPanel flowLayoutC(Object o1) {\n        JPanel p = new JPanel(new FlowLayout(FlowLayout.CENTER));\n        p.add(componentOrString(o1));\n        return p;\n    }\n\n    // FIXME: in ANY layout, a string should be made into a jlabel automatically.\n    private static Component componentOrString(Object o) {\n        return (o instanceof String ? new JLabel((String) o) : (Component) o);\n    }\n\n    // -------------\n    // grid layout...\n    public static JPanel gridLayout(Component[][] o) {\n        int rows = o.length;\n        int cols = o[0].length;\n        JPanel p = new JPanel(new GridLayout(rows, cols));\n        for (int i = 0; i < rows; i++) for (int j = 0; j < cols; j++) p.add(o[i][j]);\n        return p;\n    }\n\n    public static JPanel gridLayout(Component[][] o, int hgap, int vgap) {\n        int rows = o.length;\n        int cols = o[0].length;\n        JPanel p = new JPanel(new GridLayout(rows, cols, hgap, vgap));\n        for (int i = 0; i < rows; i++) for (int j = 0; j < cols; j++) p.add(o[i][j]);\n        return p;\n    }\n}\n",
		"id": "/EvoSuiteBenchmark/35_corina/src/main/java/corina/gui/Layout_4Test.java",
		"test_prompt": "// Layout_4Test.java\npackage corina.gui;\n\nimport corina.gui.layouts.ButtonLayout;\nimport javax.swing.JPanel;\nimport javax.swing.Box;\nimport java.awt.Component;\nimport java.awt.BorderLayout;\nimport javax.swing.BoxLayout;\nimport java.awt.FlowLayout;\nimport javax.swing.JLabel;\nimport java.awt.GridLayout;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link Layout}.\n* It contains ten unit test cases for the {@link Layout#buttonLayout(Component, Component, Component, Component, Component)} method.\n*/\nclass Layout_4Test {"
	},
	{
		"original_code": "// Layout.java\npackage corina.gui;\n\nimport corina.gui.layouts.ButtonLayout;\nimport javax.swing.JPanel;\nimport javax.swing.Box;\nimport java.awt.Component;\nimport java.awt.BorderLayout;\nimport javax.swing.BoxLayout;\nimport java.awt.FlowLayout;\nimport javax.swing.JLabel;\nimport java.awt.GridLayout;\n\n// TODO: gpl header, javadoc!\n// a factory for easily creating panels of a given layout.\n// for example,\n// JPanel p = Layout.borderLayout(null,\n//                                null, content, null,\n//                                Layout.buttonLayout(cancel, ok));\n// TODO: if cancel comes before ok, and os=win32, swap them?\n// TODO: accept 1, 2, 3, ... (...5?) components directly (not in array)\n// WRITEME: i'd like to be able to put an integer in any slot for a strut, but i can't.\n// -- BETTER: class Strut(w,h) -- e.g., Layout.flowLayoutL(\"Value:\", Strut.w(4), myField);\n// TODO: i tend to need to use temp vars for the output of these methods,\n// simply to set custom borders on them.  i think going to an XML generator\n// might actually help with that.\n// FIXME: consolidate componentOrGlue(), componentOrString() -- it\n// should be pretty much the same inputs for any of these methods.\npublic class Layout {\n\n    // add a component, if non-null, or add some glue\n    private static Component componentOrGlue(Component c) {\n        return (c != null ? c : Box.createHorizontalGlue());\n    }\n\n    // --------\n    // button layout\n    public static JPanel buttonLayout(Component c1) {\n        JPanel p = new JPanel(new ButtonLayout());\n        p.add(componentOrGlue(c1));\n        return p;\n    }\n\n    public static JPanel buttonLayout(Component c1, Component c2) {\n        JPanel p = new JPanel(new ButtonLayout());\n        p.add(componentOrGlue(c1));\n        p.add(componentOrGlue(c2));\n        return p;\n    }\n\n    public static JPanel buttonLayout(Component c1, Component c2, Component c3) {\n        JPanel p = new JPanel(new ButtonLayout());\n        p.add(componentOrGlue(c1));\n        p.add(componentOrGlue(c2));\n        p.add(componentOrGlue(c3));\n        return p;\n    }\n\n    public static JPanel buttonLayout(Component c1, Component c2, Component c3, Component c4) {\n        JPanel p = new JPanel(new ButtonLayout());\n        p.add(componentOrGlue(c1));\n        p.add(componentOrGlue(c2));\n        p.add(componentOrGlue(c3));\n        p.add(componentOrGlue(c4));\n        return p;\n    }\n\n    public static JPanel buttonLayout(Component c1, Component c2, Component c3, Component c4, Component c5) {\n        JPanel p = new JPanel(new ButtonLayout());\n        p.add(componentOrGlue(c1));\n        p.add(componentOrGlue(c2));\n        p.add(componentOrGlue(c3));\n        p.add(componentOrGlue(c4));\n        p.add(componentOrGlue(c5));\n        return p;\n    }\n\n    // --------\n    // border layout is verbose, too.  let's see what we can do about that.\n    public static JPanel borderLayout(Component n, Component w, Component c, Component e, Component s) {\n        // is this default, anyway?\n        JPanel p = new JPanel(new BorderLayout());\n        if (n != null)\n            p.add(n, BorderLayout.NORTH);\n        if (w != null)\n            p.add(w, BorderLayout.WEST);\n        if (c != null)\n            p.add(c, BorderLayout.CENTER);\n        if (e != null)\n            p.add(e, BorderLayout.EAST);\n        if (s != null)\n            p.add(s, BorderLayout.SOUTH);\n        return p;\n    }\n\n    // --------\n    // box layout...\n    public static JPanel boxLayoutY(Component c1) {\n        JPanel p = new JPanel();\n        p.setLayout(new BoxLayout(p, BoxLayout.Y_AXIS));\n        p.add(c1);\n        return p;\n    }\n\n    public static JPanel boxLayoutY(Component c1, Component c2) {\n        JPanel p = new JPanel();\n        p.setLayout(new BoxLayout(p, BoxLayout.Y_AXIS));\n        p.add(c1);\n        p.add(c2);\n        return p;\n    }\n\n    public static JPanel boxLayoutY(Component c1, Component c2, Component c3) {\n        JPanel p = new JPanel();\n        p.setLayout(new BoxLayout(p, BoxLayout.Y_AXIS));\n        p.add(c1);\n        p.add(c2);\n        p.add(c3);\n        return p;\n    }\n\n    public static JPanel boxLayoutY(Component c1, Component c2, Component c3, Component c4) {\n        JPanel p = new JPanel();\n        p.setLayout(new BoxLayout(p, BoxLayout.Y_AXIS));\n        p.add(c1);\n        p.add(c2);\n        p.add(c3);\n        p.add(c4);\n        return p;\n    }\n\n    public static JPanel boxLayoutY(Component c1, Component c2, Component c3, Component c4, Component c5) {\n        JPanel p = new JPanel();\n        p.setLayout(new BoxLayout(p, BoxLayout.Y_AXIS));\n        p.add(c1);\n        p.add(c2);\n        p.add(c3);\n        p.add(c4);\n        p.add(c5);\n        return p;\n    }\n\n    // -------------\n    // flow layout...\n    public static JPanel flowLayoutL(Object o1) {\n        JPanel p = new JPanel(new FlowLayout(FlowLayout.LEFT));\n        p.add(componentOrString(o1));\n        return p;\n    }\n\n    public static JPanel flowLayoutL(Object o1, Object o2) {\n        JPanel p = new JPanel(new FlowLayout(FlowLayout.LEFT));\n        p.add(componentOrString(o1));\n        p.add(componentOrString(o2));\n        return p;\n    }\n\n    public static JPanel flowLayoutR(Object o1, Object o2) {\n        JPanel p = new JPanel(new FlowLayout(FlowLayout.RIGHT));\n        p.add(componentOrString(o1));\n        p.add(componentOrString(o2));\n        return p;\n    }\n\n    public static JPanel flowLayoutL(Object o1, Object o2, Object o3) {\n        JPanel p = new JPanel(new FlowLayout(FlowLayout.LEFT));\n        p.add(componentOrString(o1));\n        p.add(componentOrString(o2));\n        p.add(componentOrString(o3));\n        return p;\n    }\n\n    public static JPanel flowLayoutL(Object o1, Object o2, Object o3, Object o4) {\n        JPanel p = new JPanel(new FlowLayout(FlowLayout.LEFT));\n        p.add(componentOrString(o1));\n        p.add(componentOrString(o2));\n        p.add(componentOrString(o3));\n        p.add(componentOrString(o4));\n        return p;\n    }\n\n    public static JPanel flowLayoutL(Object o1, Object o2, Object o3, Object o4, Object o5) {\n        JPanel p = new JPanel(new FlowLayout(FlowLayout.LEFT));\n        p.add(componentOrString(o1));\n        p.add(componentOrString(o2));\n        p.add(componentOrString(o3));\n        p.add(componentOrString(o4));\n        p.add(componentOrString(o5));\n        return p;\n    }\n\n    public static JPanel flowLayoutL(Object o1, Object o2, Object o3, Object o4, Object o5, Object o6) {\n        JPanel p = new JPanel(new FlowLayout(FlowLayout.LEFT));\n        p.add(componentOrString(o1));\n        p.add(componentOrString(o2));\n        p.add(componentOrString(o3));\n        p.add(componentOrString(o4));\n        p.add(componentOrString(o5));\n        p.add(componentOrString(o6));\n        return p;\n    }\n\n    public static JPanel flowLayoutL(Object o1, Object o2, Object o3, Object o4, Object o5, Object o6, Object o7) {\n        JPanel p = new JPanel(new FlowLayout(FlowLayout.LEFT));\n        p.add(componentOrString(o1));\n        p.add(componentOrString(o2));\n        p.add(componentOrString(o3));\n        p.add(componentOrString(o4));\n        p.add(componentOrString(o5));\n        p.add(componentOrString(o6));\n        p.add(componentOrString(o7));\n        return p;\n    }\n\n    public static JPanel flowLayoutC(Object o1) {\n        JPanel p = new JPanel(new FlowLayout(FlowLayout.CENTER));\n        p.add(componentOrString(o1));\n        return p;\n    }\n\n    // FIXME: in ANY layout, a string should be made into a jlabel automatically.\n    private static Component componentOrString(Object o) {\n        return (o instanceof String ? new JLabel((String) o) : (Component) o);\n    }\n\n    // -------------\n    // grid layout...\n    public static JPanel gridLayout(Component[][] o) {\n        int rows = o.length;\n        int cols = o[0].length;\n        JPanel p = new JPanel(new GridLayout(rows, cols));\n        for (int i = 0; i < rows; i++) for (int j = 0; j < cols; j++) p.add(o[i][j]);\n        return p;\n    }\n\n    public static JPanel gridLayout(Component[][] o, int hgap, int vgap) {\n        int rows = o.length;\n        int cols = o[0].length;\n        JPanel p = new JPanel(new GridLayout(rows, cols, hgap, vgap));\n        for (int i = 0; i < rows; i++) for (int j = 0; j < cols; j++) p.add(o[i][j]);\n        return p;\n    }\n}\n",
		"id": "/EvoSuiteBenchmark/35_corina/src/main/java/corina/gui/Layout_5Test.java",
		"test_prompt": "// Layout_5Test.java\npackage corina.gui;\n\nimport corina.gui.layouts.ButtonLayout;\nimport javax.swing.JPanel;\nimport javax.swing.Box;\nimport java.awt.Component;\nimport java.awt.BorderLayout;\nimport javax.swing.BoxLayout;\nimport java.awt.FlowLayout;\nimport javax.swing.JLabel;\nimport java.awt.GridLayout;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link Layout}.\n* It contains ten unit test cases for the {@link Layout#borderLayout(Component, Component, Component, Component, Component)} method.\n*/\nclass Layout_5Test {"
	},
	{
		"original_code": "// Layout.java\npackage corina.gui;\n\nimport corina.gui.layouts.ButtonLayout;\nimport javax.swing.JPanel;\nimport javax.swing.Box;\nimport java.awt.Component;\nimport java.awt.BorderLayout;\nimport javax.swing.BoxLayout;\nimport java.awt.FlowLayout;\nimport javax.swing.JLabel;\nimport java.awt.GridLayout;\n\n// TODO: gpl header, javadoc!\n// a factory for easily creating panels of a given layout.\n// for example,\n// JPanel p = Layout.borderLayout(null,\n//                                null, content, null,\n//                                Layout.buttonLayout(cancel, ok));\n// TODO: if cancel comes before ok, and os=win32, swap them?\n// TODO: accept 1, 2, 3, ... (...5?) components directly (not in array)\n// WRITEME: i'd like to be able to put an integer in any slot for a strut, but i can't.\n// -- BETTER: class Strut(w,h) -- e.g., Layout.flowLayoutL(\"Value:\", Strut.w(4), myField);\n// TODO: i tend to need to use temp vars for the output of these methods,\n// simply to set custom borders on them.  i think going to an XML generator\n// might actually help with that.\n// FIXME: consolidate componentOrGlue(), componentOrString() -- it\n// should be pretty much the same inputs for any of these methods.\npublic class Layout {\n\n    // add a component, if non-null, or add some glue\n    private static Component componentOrGlue(Component c) {\n        return (c != null ? c : Box.createHorizontalGlue());\n    }\n\n    // --------\n    // button layout\n    public static JPanel buttonLayout(Component c1) {\n        JPanel p = new JPanel(new ButtonLayout());\n        p.add(componentOrGlue(c1));\n        return p;\n    }\n\n    public static JPanel buttonLayout(Component c1, Component c2) {\n        JPanel p = new JPanel(new ButtonLayout());\n        p.add(componentOrGlue(c1));\n        p.add(componentOrGlue(c2));\n        return p;\n    }\n\n    public static JPanel buttonLayout(Component c1, Component c2, Component c3) {\n        JPanel p = new JPanel(new ButtonLayout());\n        p.add(componentOrGlue(c1));\n        p.add(componentOrGlue(c2));\n        p.add(componentOrGlue(c3));\n        return p;\n    }\n\n    public static JPanel buttonLayout(Component c1, Component c2, Component c3, Component c4) {\n        JPanel p = new JPanel(new ButtonLayout());\n        p.add(componentOrGlue(c1));\n        p.add(componentOrGlue(c2));\n        p.add(componentOrGlue(c3));\n        p.add(componentOrGlue(c4));\n        return p;\n    }\n\n    public static JPanel buttonLayout(Component c1, Component c2, Component c3, Component c4, Component c5) {\n        JPanel p = new JPanel(new ButtonLayout());\n        p.add(componentOrGlue(c1));\n        p.add(componentOrGlue(c2));\n        p.add(componentOrGlue(c3));\n        p.add(componentOrGlue(c4));\n        p.add(componentOrGlue(c5));\n        return p;\n    }\n\n    // --------\n    // border layout is verbose, too.  let's see what we can do about that.\n    public static JPanel borderLayout(Component n, Component w, Component c, Component e, Component s) {\n        // is this default, anyway?\n        JPanel p = new JPanel(new BorderLayout());\n        if (n != null)\n            p.add(n, BorderLayout.NORTH);\n        if (w != null)\n            p.add(w, BorderLayout.WEST);\n        if (c != null)\n            p.add(c, BorderLayout.CENTER);\n        if (e != null)\n            p.add(e, BorderLayout.EAST);\n        if (s != null)\n            p.add(s, BorderLayout.SOUTH);\n        return p;\n    }\n\n    // --------\n    // box layout...\n    public static JPanel boxLayoutY(Component c1) {\n        JPanel p = new JPanel();\n        p.setLayout(new BoxLayout(p, BoxLayout.Y_AXIS));\n        p.add(c1);\n        return p;\n    }\n\n    public static JPanel boxLayoutY(Component c1, Component c2) {\n        JPanel p = new JPanel();\n        p.setLayout(new BoxLayout(p, BoxLayout.Y_AXIS));\n        p.add(c1);\n        p.add(c2);\n        return p;\n    }\n\n    public static JPanel boxLayoutY(Component c1, Component c2, Component c3) {\n        JPanel p = new JPanel();\n        p.setLayout(new BoxLayout(p, BoxLayout.Y_AXIS));\n        p.add(c1);\n        p.add(c2);\n        p.add(c3);\n        return p;\n    }\n\n    public static JPanel boxLayoutY(Component c1, Component c2, Component c3, Component c4) {\n        JPanel p = new JPanel();\n        p.setLayout(new BoxLayout(p, BoxLayout.Y_AXIS));\n        p.add(c1);\n        p.add(c2);\n        p.add(c3);\n        p.add(c4);\n        return p;\n    }\n\n    public static JPanel boxLayoutY(Component c1, Component c2, Component c3, Component c4, Component c5) {\n        JPanel p = new JPanel();\n        p.setLayout(new BoxLayout(p, BoxLayout.Y_AXIS));\n        p.add(c1);\n        p.add(c2);\n        p.add(c3);\n        p.add(c4);\n        p.add(c5);\n        return p;\n    }\n\n    // -------------\n    // flow layout...\n    public static JPanel flowLayoutL(Object o1) {\n        JPanel p = new JPanel(new FlowLayout(FlowLayout.LEFT));\n        p.add(componentOrString(o1));\n        return p;\n    }\n\n    public static JPanel flowLayoutL(Object o1, Object o2) {\n        JPanel p = new JPanel(new FlowLayout(FlowLayout.LEFT));\n        p.add(componentOrString(o1));\n        p.add(componentOrString(o2));\n        return p;\n    }\n\n    public static JPanel flowLayoutR(Object o1, Object o2) {\n        JPanel p = new JPanel(new FlowLayout(FlowLayout.RIGHT));\n        p.add(componentOrString(o1));\n        p.add(componentOrString(o2));\n        return p;\n    }\n\n    public static JPanel flowLayoutL(Object o1, Object o2, Object o3) {\n        JPanel p = new JPanel(new FlowLayout(FlowLayout.LEFT));\n        p.add(componentOrString(o1));\n        p.add(componentOrString(o2));\n        p.add(componentOrString(o3));\n        return p;\n    }\n\n    public static JPanel flowLayoutL(Object o1, Object o2, Object o3, Object o4) {\n        JPanel p = new JPanel(new FlowLayout(FlowLayout.LEFT));\n        p.add(componentOrString(o1));\n        p.add(componentOrString(o2));\n        p.add(componentOrString(o3));\n        p.add(componentOrString(o4));\n        return p;\n    }\n\n    public static JPanel flowLayoutL(Object o1, Object o2, Object o3, Object o4, Object o5) {\n        JPanel p = new JPanel(new FlowLayout(FlowLayout.LEFT));\n        p.add(componentOrString(o1));\n        p.add(componentOrString(o2));\n        p.add(componentOrString(o3));\n        p.add(componentOrString(o4));\n        p.add(componentOrString(o5));\n        return p;\n    }\n\n    public static JPanel flowLayoutL(Object o1, Object o2, Object o3, Object o4, Object o5, Object o6) {\n        JPanel p = new JPanel(new FlowLayout(FlowLayout.LEFT));\n        p.add(componentOrString(o1));\n        p.add(componentOrString(o2));\n        p.add(componentOrString(o3));\n        p.add(componentOrString(o4));\n        p.add(componentOrString(o5));\n        p.add(componentOrString(o6));\n        return p;\n    }\n\n    public static JPanel flowLayoutL(Object o1, Object o2, Object o3, Object o4, Object o5, Object o6, Object o7) {\n        JPanel p = new JPanel(new FlowLayout(FlowLayout.LEFT));\n        p.add(componentOrString(o1));\n        p.add(componentOrString(o2));\n        p.add(componentOrString(o3));\n        p.add(componentOrString(o4));\n        p.add(componentOrString(o5));\n        p.add(componentOrString(o6));\n        p.add(componentOrString(o7));\n        return p;\n    }\n\n    public static JPanel flowLayoutC(Object o1) {\n        JPanel p = new JPanel(new FlowLayout(FlowLayout.CENTER));\n        p.add(componentOrString(o1));\n        return p;\n    }\n\n    // FIXME: in ANY layout, a string should be made into a jlabel automatically.\n    private static Component componentOrString(Object o) {\n        return (o instanceof String ? new JLabel((String) o) : (Component) o);\n    }\n\n    // -------------\n    // grid layout...\n    public static JPanel gridLayout(Component[][] o) {\n        int rows = o.length;\n        int cols = o[0].length;\n        JPanel p = new JPanel(new GridLayout(rows, cols));\n        for (int i = 0; i < rows; i++) for (int j = 0; j < cols; j++) p.add(o[i][j]);\n        return p;\n    }\n\n    public static JPanel gridLayout(Component[][] o, int hgap, int vgap) {\n        int rows = o.length;\n        int cols = o[0].length;\n        JPanel p = new JPanel(new GridLayout(rows, cols, hgap, vgap));\n        for (int i = 0; i < rows; i++) for (int j = 0; j < cols; j++) p.add(o[i][j]);\n        return p;\n    }\n}\n",
		"id": "/EvoSuiteBenchmark/35_corina/src/main/java/corina/gui/Layout_6Test.java",
		"test_prompt": "// Layout_6Test.java\npackage corina.gui;\n\nimport corina.gui.layouts.ButtonLayout;\nimport javax.swing.JPanel;\nimport javax.swing.Box;\nimport java.awt.Component;\nimport java.awt.BorderLayout;\nimport javax.swing.BoxLayout;\nimport java.awt.FlowLayout;\nimport javax.swing.JLabel;\nimport java.awt.GridLayout;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link Layout}.\n* It contains ten unit test cases for the {@link Layout#boxLayoutY(Component)} method.\n*/\nclass Layout_6Test {"
	},
	{
		"original_code": "// Layout.java\npackage corina.gui;\n\nimport corina.gui.layouts.ButtonLayout;\nimport javax.swing.JPanel;\nimport javax.swing.Box;\nimport java.awt.Component;\nimport java.awt.BorderLayout;\nimport javax.swing.BoxLayout;\nimport java.awt.FlowLayout;\nimport javax.swing.JLabel;\nimport java.awt.GridLayout;\n\n// TODO: gpl header, javadoc!\n// a factory for easily creating panels of a given layout.\n// for example,\n// JPanel p = Layout.borderLayout(null,\n//                                null, content, null,\n//                                Layout.buttonLayout(cancel, ok));\n// TODO: if cancel comes before ok, and os=win32, swap them?\n// TODO: accept 1, 2, 3, ... (...5?) components directly (not in array)\n// WRITEME: i'd like to be able to put an integer in any slot for a strut, but i can't.\n// -- BETTER: class Strut(w,h) -- e.g., Layout.flowLayoutL(\"Value:\", Strut.w(4), myField);\n// TODO: i tend to need to use temp vars for the output of these methods,\n// simply to set custom borders on them.  i think going to an XML generator\n// might actually help with that.\n// FIXME: consolidate componentOrGlue(), componentOrString() -- it\n// should be pretty much the same inputs for any of these methods.\npublic class Layout {\n\n    // add a component, if non-null, or add some glue\n    private static Component componentOrGlue(Component c) {\n        return (c != null ? c : Box.createHorizontalGlue());\n    }\n\n    // --------\n    // button layout\n    public static JPanel buttonLayout(Component c1) {\n        JPanel p = new JPanel(new ButtonLayout());\n        p.add(componentOrGlue(c1));\n        return p;\n    }\n\n    public static JPanel buttonLayout(Component c1, Component c2) {\n        JPanel p = new JPanel(new ButtonLayout());\n        p.add(componentOrGlue(c1));\n        p.add(componentOrGlue(c2));\n        return p;\n    }\n\n    public static JPanel buttonLayout(Component c1, Component c2, Component c3) {\n        JPanel p = new JPanel(new ButtonLayout());\n        p.add(componentOrGlue(c1));\n        p.add(componentOrGlue(c2));\n        p.add(componentOrGlue(c3));\n        return p;\n    }\n\n    public static JPanel buttonLayout(Component c1, Component c2, Component c3, Component c4) {\n        JPanel p = new JPanel(new ButtonLayout());\n        p.add(componentOrGlue(c1));\n        p.add(componentOrGlue(c2));\n        p.add(componentOrGlue(c3));\n        p.add(componentOrGlue(c4));\n        return p;\n    }\n\n    public static JPanel buttonLayout(Component c1, Component c2, Component c3, Component c4, Component c5) {\n        JPanel p = new JPanel(new ButtonLayout());\n        p.add(componentOrGlue(c1));\n        p.add(componentOrGlue(c2));\n        p.add(componentOrGlue(c3));\n        p.add(componentOrGlue(c4));\n        p.add(componentOrGlue(c5));\n        return p;\n    }\n\n    // --------\n    // border layout is verbose, too.  let's see what we can do about that.\n    public static JPanel borderLayout(Component n, Component w, Component c, Component e, Component s) {\n        // is this default, anyway?\n        JPanel p = new JPanel(new BorderLayout());\n        if (n != null)\n            p.add(n, BorderLayout.NORTH);\n        if (w != null)\n            p.add(w, BorderLayout.WEST);\n        if (c != null)\n            p.add(c, BorderLayout.CENTER);\n        if (e != null)\n            p.add(e, BorderLayout.EAST);\n        if (s != null)\n            p.add(s, BorderLayout.SOUTH);\n        return p;\n    }\n\n    // --------\n    // box layout...\n    public static JPanel boxLayoutY(Component c1) {\n        JPanel p = new JPanel();\n        p.setLayout(new BoxLayout(p, BoxLayout.Y_AXIS));\n        p.add(c1);\n        return p;\n    }\n\n    public static JPanel boxLayoutY(Component c1, Component c2) {\n        JPanel p = new JPanel();\n        p.setLayout(new BoxLayout(p, BoxLayout.Y_AXIS));\n        p.add(c1);\n        p.add(c2);\n        return p;\n    }\n\n    public static JPanel boxLayoutY(Component c1, Component c2, Component c3) {\n        JPanel p = new JPanel();\n        p.setLayout(new BoxLayout(p, BoxLayout.Y_AXIS));\n        p.add(c1);\n        p.add(c2);\n        p.add(c3);\n        return p;\n    }\n\n    public static JPanel boxLayoutY(Component c1, Component c2, Component c3, Component c4) {\n        JPanel p = new JPanel();\n        p.setLayout(new BoxLayout(p, BoxLayout.Y_AXIS));\n        p.add(c1);\n        p.add(c2);\n        p.add(c3);\n        p.add(c4);\n        return p;\n    }\n\n    public static JPanel boxLayoutY(Component c1, Component c2, Component c3, Component c4, Component c5) {\n        JPanel p = new JPanel();\n        p.setLayout(new BoxLayout(p, BoxLayout.Y_AXIS));\n        p.add(c1);\n        p.add(c2);\n        p.add(c3);\n        p.add(c4);\n        p.add(c5);\n        return p;\n    }\n\n    // -------------\n    // flow layout...\n    public static JPanel flowLayoutL(Object o1) {\n        JPanel p = new JPanel(new FlowLayout(FlowLayout.LEFT));\n        p.add(componentOrString(o1));\n        return p;\n    }\n\n    public static JPanel flowLayoutL(Object o1, Object o2) {\n        JPanel p = new JPanel(new FlowLayout(FlowLayout.LEFT));\n        p.add(componentOrString(o1));\n        p.add(componentOrString(o2));\n        return p;\n    }\n\n    public static JPanel flowLayoutR(Object o1, Object o2) {\n        JPanel p = new JPanel(new FlowLayout(FlowLayout.RIGHT));\n        p.add(componentOrString(o1));\n        p.add(componentOrString(o2));\n        return p;\n    }\n\n    public static JPanel flowLayoutL(Object o1, Object o2, Object o3) {\n        JPanel p = new JPanel(new FlowLayout(FlowLayout.LEFT));\n        p.add(componentOrString(o1));\n        p.add(componentOrString(o2));\n        p.add(componentOrString(o3));\n        return p;\n    }\n\n    public static JPanel flowLayoutL(Object o1, Object o2, Object o3, Object o4) {\n        JPanel p = new JPanel(new FlowLayout(FlowLayout.LEFT));\n        p.add(componentOrString(o1));\n        p.add(componentOrString(o2));\n        p.add(componentOrString(o3));\n        p.add(componentOrString(o4));\n        return p;\n    }\n\n    public static JPanel flowLayoutL(Object o1, Object o2, Object o3, Object o4, Object o5) {\n        JPanel p = new JPanel(new FlowLayout(FlowLayout.LEFT));\n        p.add(componentOrString(o1));\n        p.add(componentOrString(o2));\n        p.add(componentOrString(o3));\n        p.add(componentOrString(o4));\n        p.add(componentOrString(o5));\n        return p;\n    }\n\n    public static JPanel flowLayoutL(Object o1, Object o2, Object o3, Object o4, Object o5, Object o6) {\n        JPanel p = new JPanel(new FlowLayout(FlowLayout.LEFT));\n        p.add(componentOrString(o1));\n        p.add(componentOrString(o2));\n        p.add(componentOrString(o3));\n        p.add(componentOrString(o4));\n        p.add(componentOrString(o5));\n        p.add(componentOrString(o6));\n        return p;\n    }\n\n    public static JPanel flowLayoutL(Object o1, Object o2, Object o3, Object o4, Object o5, Object o6, Object o7) {\n        JPanel p = new JPanel(new FlowLayout(FlowLayout.LEFT));\n        p.add(componentOrString(o1));\n        p.add(componentOrString(o2));\n        p.add(componentOrString(o3));\n        p.add(componentOrString(o4));\n        p.add(componentOrString(o5));\n        p.add(componentOrString(o6));\n        p.add(componentOrString(o7));\n        return p;\n    }\n\n    public static JPanel flowLayoutC(Object o1) {\n        JPanel p = new JPanel(new FlowLayout(FlowLayout.CENTER));\n        p.add(componentOrString(o1));\n        return p;\n    }\n\n    // FIXME: in ANY layout, a string should be made into a jlabel automatically.\n    private static Component componentOrString(Object o) {\n        return (o instanceof String ? new JLabel((String) o) : (Component) o);\n    }\n\n    // -------------\n    // grid layout...\n    public static JPanel gridLayout(Component[][] o) {\n        int rows = o.length;\n        int cols = o[0].length;\n        JPanel p = new JPanel(new GridLayout(rows, cols));\n        for (int i = 0; i < rows; i++) for (int j = 0; j < cols; j++) p.add(o[i][j]);\n        return p;\n    }\n\n    public static JPanel gridLayout(Component[][] o, int hgap, int vgap) {\n        int rows = o.length;\n        int cols = o[0].length;\n        JPanel p = new JPanel(new GridLayout(rows, cols, hgap, vgap));\n        for (int i = 0; i < rows; i++) for (int j = 0; j < cols; j++) p.add(o[i][j]);\n        return p;\n    }\n}\n",
		"id": "/EvoSuiteBenchmark/35_corina/src/main/java/corina/gui/Layout_7Test.java",
		"test_prompt": "// Layout_7Test.java\npackage corina.gui;\n\nimport corina.gui.layouts.ButtonLayout;\nimport javax.swing.JPanel;\nimport javax.swing.Box;\nimport java.awt.Component;\nimport java.awt.BorderLayout;\nimport javax.swing.BoxLayout;\nimport java.awt.FlowLayout;\nimport javax.swing.JLabel;\nimport java.awt.GridLayout;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link Layout}.\n* It contains ten unit test cases for the {@link Layout#boxLayoutY(Component, Component)} method.\n*/\nclass Layout_7Test {"
	},
	{
		"original_code": "// Layout.java\npackage corina.gui;\n\nimport corina.gui.layouts.ButtonLayout;\nimport javax.swing.JPanel;\nimport javax.swing.Box;\nimport java.awt.Component;\nimport java.awt.BorderLayout;\nimport javax.swing.BoxLayout;\nimport java.awt.FlowLayout;\nimport javax.swing.JLabel;\nimport java.awt.GridLayout;\n\n// TODO: gpl header, javadoc!\n// a factory for easily creating panels of a given layout.\n// for example,\n// JPanel p = Layout.borderLayout(null,\n//                                null, content, null,\n//                                Layout.buttonLayout(cancel, ok));\n// TODO: if cancel comes before ok, and os=win32, swap them?\n// TODO: accept 1, 2, 3, ... (...5?) components directly (not in array)\n// WRITEME: i'd like to be able to put an integer in any slot for a strut, but i can't.\n// -- BETTER: class Strut(w,h) -- e.g., Layout.flowLayoutL(\"Value:\", Strut.w(4), myField);\n// TODO: i tend to need to use temp vars for the output of these methods,\n// simply to set custom borders on them.  i think going to an XML generator\n// might actually help with that.\n// FIXME: consolidate componentOrGlue(), componentOrString() -- it\n// should be pretty much the same inputs for any of these methods.\npublic class Layout {\n\n    // add a component, if non-null, or add some glue\n    private static Component componentOrGlue(Component c) {\n        return (c != null ? c : Box.createHorizontalGlue());\n    }\n\n    // --------\n    // button layout\n    public static JPanel buttonLayout(Component c1) {\n        JPanel p = new JPanel(new ButtonLayout());\n        p.add(componentOrGlue(c1));\n        return p;\n    }\n\n    public static JPanel buttonLayout(Component c1, Component c2) {\n        JPanel p = new JPanel(new ButtonLayout());\n        p.add(componentOrGlue(c1));\n        p.add(componentOrGlue(c2));\n        return p;\n    }\n\n    public static JPanel buttonLayout(Component c1, Component c2, Component c3) {\n        JPanel p = new JPanel(new ButtonLayout());\n        p.add(componentOrGlue(c1));\n        p.add(componentOrGlue(c2));\n        p.add(componentOrGlue(c3));\n        return p;\n    }\n\n    public static JPanel buttonLayout(Component c1, Component c2, Component c3, Component c4) {\n        JPanel p = new JPanel(new ButtonLayout());\n        p.add(componentOrGlue(c1));\n        p.add(componentOrGlue(c2));\n        p.add(componentOrGlue(c3));\n        p.add(componentOrGlue(c4));\n        return p;\n    }\n\n    public static JPanel buttonLayout(Component c1, Component c2, Component c3, Component c4, Component c5) {\n        JPanel p = new JPanel(new ButtonLayout());\n        p.add(componentOrGlue(c1));\n        p.add(componentOrGlue(c2));\n        p.add(componentOrGlue(c3));\n        p.add(componentOrGlue(c4));\n        p.add(componentOrGlue(c5));\n        return p;\n    }\n\n    // --------\n    // border layout is verbose, too.  let's see what we can do about that.\n    public static JPanel borderLayout(Component n, Component w, Component c, Component e, Component s) {\n        // is this default, anyway?\n        JPanel p = new JPanel(new BorderLayout());\n        if (n != null)\n            p.add(n, BorderLayout.NORTH);\n        if (w != null)\n            p.add(w, BorderLayout.WEST);\n        if (c != null)\n            p.add(c, BorderLayout.CENTER);\n        if (e != null)\n            p.add(e, BorderLayout.EAST);\n        if (s != null)\n            p.add(s, BorderLayout.SOUTH);\n        return p;\n    }\n\n    // --------\n    // box layout...\n    public static JPanel boxLayoutY(Component c1) {\n        JPanel p = new JPanel();\n        p.setLayout(new BoxLayout(p, BoxLayout.Y_AXIS));\n        p.add(c1);\n        return p;\n    }\n\n    public static JPanel boxLayoutY(Component c1, Component c2) {\n        JPanel p = new JPanel();\n        p.setLayout(new BoxLayout(p, BoxLayout.Y_AXIS));\n        p.add(c1);\n        p.add(c2);\n        return p;\n    }\n\n    public static JPanel boxLayoutY(Component c1, Component c2, Component c3) {\n        JPanel p = new JPanel();\n        p.setLayout(new BoxLayout(p, BoxLayout.Y_AXIS));\n        p.add(c1);\n        p.add(c2);\n        p.add(c3);\n        return p;\n    }\n\n    public static JPanel boxLayoutY(Component c1, Component c2, Component c3, Component c4) {\n        JPanel p = new JPanel();\n        p.setLayout(new BoxLayout(p, BoxLayout.Y_AXIS));\n        p.add(c1);\n        p.add(c2);\n        p.add(c3);\n        p.add(c4);\n        return p;\n    }\n\n    public static JPanel boxLayoutY(Component c1, Component c2, Component c3, Component c4, Component c5) {\n        JPanel p = new JPanel();\n        p.setLayout(new BoxLayout(p, BoxLayout.Y_AXIS));\n        p.add(c1);\n        p.add(c2);\n        p.add(c3);\n        p.add(c4);\n        p.add(c5);\n        return p;\n    }\n\n    // -------------\n    // flow layout...\n    public static JPanel flowLayoutL(Object o1) {\n        JPanel p = new JPanel(new FlowLayout(FlowLayout.LEFT));\n        p.add(componentOrString(o1));\n        return p;\n    }\n\n    public static JPanel flowLayoutL(Object o1, Object o2) {\n        JPanel p = new JPanel(new FlowLayout(FlowLayout.LEFT));\n        p.add(componentOrString(o1));\n        p.add(componentOrString(o2));\n        return p;\n    }\n\n    public static JPanel flowLayoutR(Object o1, Object o2) {\n        JPanel p = new JPanel(new FlowLayout(FlowLayout.RIGHT));\n        p.add(componentOrString(o1));\n        p.add(componentOrString(o2));\n        return p;\n    }\n\n    public static JPanel flowLayoutL(Object o1, Object o2, Object o3) {\n        JPanel p = new JPanel(new FlowLayout(FlowLayout.LEFT));\n        p.add(componentOrString(o1));\n        p.add(componentOrString(o2));\n        p.add(componentOrString(o3));\n        return p;\n    }\n\n    public static JPanel flowLayoutL(Object o1, Object o2, Object o3, Object o4) {\n        JPanel p = new JPanel(new FlowLayout(FlowLayout.LEFT));\n        p.add(componentOrString(o1));\n        p.add(componentOrString(o2));\n        p.add(componentOrString(o3));\n        p.add(componentOrString(o4));\n        return p;\n    }\n\n    public static JPanel flowLayoutL(Object o1, Object o2, Object o3, Object o4, Object o5) {\n        JPanel p = new JPanel(new FlowLayout(FlowLayout.LEFT));\n        p.add(componentOrString(o1));\n        p.add(componentOrString(o2));\n        p.add(componentOrString(o3));\n        p.add(componentOrString(o4));\n        p.add(componentOrString(o5));\n        return p;\n    }\n\n    public static JPanel flowLayoutL(Object o1, Object o2, Object o3, Object o4, Object o5, Object o6) {\n        JPanel p = new JPanel(new FlowLayout(FlowLayout.LEFT));\n        p.add(componentOrString(o1));\n        p.add(componentOrString(o2));\n        p.add(componentOrString(o3));\n        p.add(componentOrString(o4));\n        p.add(componentOrString(o5));\n        p.add(componentOrString(o6));\n        return p;\n    }\n\n    public static JPanel flowLayoutL(Object o1, Object o2, Object o3, Object o4, Object o5, Object o6, Object o7) {\n        JPanel p = new JPanel(new FlowLayout(FlowLayout.LEFT));\n        p.add(componentOrString(o1));\n        p.add(componentOrString(o2));\n        p.add(componentOrString(o3));\n        p.add(componentOrString(o4));\n        p.add(componentOrString(o5));\n        p.add(componentOrString(o6));\n        p.add(componentOrString(o7));\n        return p;\n    }\n\n    public static JPanel flowLayoutC(Object o1) {\n        JPanel p = new JPanel(new FlowLayout(FlowLayout.CENTER));\n        p.add(componentOrString(o1));\n        return p;\n    }\n\n    // FIXME: in ANY layout, a string should be made into a jlabel automatically.\n    private static Component componentOrString(Object o) {\n        return (o instanceof String ? new JLabel((String) o) : (Component) o);\n    }\n\n    // -------------\n    // grid layout...\n    public static JPanel gridLayout(Component[][] o) {\n        int rows = o.length;\n        int cols = o[0].length;\n        JPanel p = new JPanel(new GridLayout(rows, cols));\n        for (int i = 0; i < rows; i++) for (int j = 0; j < cols; j++) p.add(o[i][j]);\n        return p;\n    }\n\n    public static JPanel gridLayout(Component[][] o, int hgap, int vgap) {\n        int rows = o.length;\n        int cols = o[0].length;\n        JPanel p = new JPanel(new GridLayout(rows, cols, hgap, vgap));\n        for (int i = 0; i < rows; i++) for (int j = 0; j < cols; j++) p.add(o[i][j]);\n        return p;\n    }\n}\n",
		"id": "/EvoSuiteBenchmark/35_corina/src/main/java/corina/gui/Layout_8Test.java",
		"test_prompt": "// Layout_8Test.java\npackage corina.gui;\n\nimport corina.gui.layouts.ButtonLayout;\nimport javax.swing.JPanel;\nimport javax.swing.Box;\nimport java.awt.Component;\nimport java.awt.BorderLayout;\nimport javax.swing.BoxLayout;\nimport java.awt.FlowLayout;\nimport javax.swing.JLabel;\nimport java.awt.GridLayout;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link Layout}.\n* It contains ten unit test cases for the {@link Layout#boxLayoutY(Component, Component, Component)} method.\n*/\nclass Layout_8Test {"
	},
	{
		"original_code": "// Layout.java\npackage corina.gui;\n\nimport corina.gui.layouts.ButtonLayout;\nimport javax.swing.JPanel;\nimport javax.swing.Box;\nimport java.awt.Component;\nimport java.awt.BorderLayout;\nimport javax.swing.BoxLayout;\nimport java.awt.FlowLayout;\nimport javax.swing.JLabel;\nimport java.awt.GridLayout;\n\n// TODO: gpl header, javadoc!\n// a factory for easily creating panels of a given layout.\n// for example,\n// JPanel p = Layout.borderLayout(null,\n//                                null, content, null,\n//                                Layout.buttonLayout(cancel, ok));\n// TODO: if cancel comes before ok, and os=win32, swap them?\n// TODO: accept 1, 2, 3, ... (...5?) components directly (not in array)\n// WRITEME: i'd like to be able to put an integer in any slot for a strut, but i can't.\n// -- BETTER: class Strut(w,h) -- e.g., Layout.flowLayoutL(\"Value:\", Strut.w(4), myField);\n// TODO: i tend to need to use temp vars for the output of these methods,\n// simply to set custom borders on them.  i think going to an XML generator\n// might actually help with that.\n// FIXME: consolidate componentOrGlue(), componentOrString() -- it\n// should be pretty much the same inputs for any of these methods.\npublic class Layout {\n\n    // add a component, if non-null, or add some glue\n    private static Component componentOrGlue(Component c) {\n        return (c != null ? c : Box.createHorizontalGlue());\n    }\n\n    // --------\n    // button layout\n    public static JPanel buttonLayout(Component c1) {\n        JPanel p = new JPanel(new ButtonLayout());\n        p.add(componentOrGlue(c1));\n        return p;\n    }\n\n    public static JPanel buttonLayout(Component c1, Component c2) {\n        JPanel p = new JPanel(new ButtonLayout());\n        p.add(componentOrGlue(c1));\n        p.add(componentOrGlue(c2));\n        return p;\n    }\n\n    public static JPanel buttonLayout(Component c1, Component c2, Component c3) {\n        JPanel p = new JPanel(new ButtonLayout());\n        p.add(componentOrGlue(c1));\n        p.add(componentOrGlue(c2));\n        p.add(componentOrGlue(c3));\n        return p;\n    }\n\n    public static JPanel buttonLayout(Component c1, Component c2, Component c3, Component c4) {\n        JPanel p = new JPanel(new ButtonLayout());\n        p.add(componentOrGlue(c1));\n        p.add(componentOrGlue(c2));\n        p.add(componentOrGlue(c3));\n        p.add(componentOrGlue(c4));\n        return p;\n    }\n\n    public static JPanel buttonLayout(Component c1, Component c2, Component c3, Component c4, Component c5) {\n        JPanel p = new JPanel(new ButtonLayout());\n        p.add(componentOrGlue(c1));\n        p.add(componentOrGlue(c2));\n        p.add(componentOrGlue(c3));\n        p.add(componentOrGlue(c4));\n        p.add(componentOrGlue(c5));\n        return p;\n    }\n\n    // --------\n    // border layout is verbose, too.  let's see what we can do about that.\n    public static JPanel borderLayout(Component n, Component w, Component c, Component e, Component s) {\n        // is this default, anyway?\n        JPanel p = new JPanel(new BorderLayout());\n        if (n != null)\n            p.add(n, BorderLayout.NORTH);\n        if (w != null)\n            p.add(w, BorderLayout.WEST);\n        if (c != null)\n            p.add(c, BorderLayout.CENTER);\n        if (e != null)\n            p.add(e, BorderLayout.EAST);\n        if (s != null)\n            p.add(s, BorderLayout.SOUTH);\n        return p;\n    }\n\n    // --------\n    // box layout...\n    public static JPanel boxLayoutY(Component c1) {\n        JPanel p = new JPanel();\n        p.setLayout(new BoxLayout(p, BoxLayout.Y_AXIS));\n        p.add(c1);\n        return p;\n    }\n\n    public static JPanel boxLayoutY(Component c1, Component c2) {\n        JPanel p = new JPanel();\n        p.setLayout(new BoxLayout(p, BoxLayout.Y_AXIS));\n        p.add(c1);\n        p.add(c2);\n        return p;\n    }\n\n    public static JPanel boxLayoutY(Component c1, Component c2, Component c3) {\n        JPanel p = new JPanel();\n        p.setLayout(new BoxLayout(p, BoxLayout.Y_AXIS));\n        p.add(c1);\n        p.add(c2);\n        p.add(c3);\n        return p;\n    }\n\n    public static JPanel boxLayoutY(Component c1, Component c2, Component c3, Component c4) {\n        JPanel p = new JPanel();\n        p.setLayout(new BoxLayout(p, BoxLayout.Y_AXIS));\n        p.add(c1);\n        p.add(c2);\n        p.add(c3);\n        p.add(c4);\n        return p;\n    }\n\n    public static JPanel boxLayoutY(Component c1, Component c2, Component c3, Component c4, Component c5) {\n        JPanel p = new JPanel();\n        p.setLayout(new BoxLayout(p, BoxLayout.Y_AXIS));\n        p.add(c1);\n        p.add(c2);\n        p.add(c3);\n        p.add(c4);\n        p.add(c5);\n        return p;\n    }\n\n    // -------------\n    // flow layout...\n    public static JPanel flowLayoutL(Object o1) {\n        JPanel p = new JPanel(new FlowLayout(FlowLayout.LEFT));\n        p.add(componentOrString(o1));\n        return p;\n    }\n\n    public static JPanel flowLayoutL(Object o1, Object o2) {\n        JPanel p = new JPanel(new FlowLayout(FlowLayout.LEFT));\n        p.add(componentOrString(o1));\n        p.add(componentOrString(o2));\n        return p;\n    }\n\n    public static JPanel flowLayoutR(Object o1, Object o2) {\n        JPanel p = new JPanel(new FlowLayout(FlowLayout.RIGHT));\n        p.add(componentOrString(o1));\n        p.add(componentOrString(o2));\n        return p;\n    }\n\n    public static JPanel flowLayoutL(Object o1, Object o2, Object o3) {\n        JPanel p = new JPanel(new FlowLayout(FlowLayout.LEFT));\n        p.add(componentOrString(o1));\n        p.add(componentOrString(o2));\n        p.add(componentOrString(o3));\n        return p;\n    }\n\n    public static JPanel flowLayoutL(Object o1, Object o2, Object o3, Object o4) {\n        JPanel p = new JPanel(new FlowLayout(FlowLayout.LEFT));\n        p.add(componentOrString(o1));\n        p.add(componentOrString(o2));\n        p.add(componentOrString(o3));\n        p.add(componentOrString(o4));\n        return p;\n    }\n\n    public static JPanel flowLayoutL(Object o1, Object o2, Object o3, Object o4, Object o5) {\n        JPanel p = new JPanel(new FlowLayout(FlowLayout.LEFT));\n        p.add(componentOrString(o1));\n        p.add(componentOrString(o2));\n        p.add(componentOrString(o3));\n        p.add(componentOrString(o4));\n        p.add(componentOrString(o5));\n        return p;\n    }\n\n    public static JPanel flowLayoutL(Object o1, Object o2, Object o3, Object o4, Object o5, Object o6) {\n        JPanel p = new JPanel(new FlowLayout(FlowLayout.LEFT));\n        p.add(componentOrString(o1));\n        p.add(componentOrString(o2));\n        p.add(componentOrString(o3));\n        p.add(componentOrString(o4));\n        p.add(componentOrString(o5));\n        p.add(componentOrString(o6));\n        return p;\n    }\n\n    public static JPanel flowLayoutL(Object o1, Object o2, Object o3, Object o4, Object o5, Object o6, Object o7) {\n        JPanel p = new JPanel(new FlowLayout(FlowLayout.LEFT));\n        p.add(componentOrString(o1));\n        p.add(componentOrString(o2));\n        p.add(componentOrString(o3));\n        p.add(componentOrString(o4));\n        p.add(componentOrString(o5));\n        p.add(componentOrString(o6));\n        p.add(componentOrString(o7));\n        return p;\n    }\n\n    public static JPanel flowLayoutC(Object o1) {\n        JPanel p = new JPanel(new FlowLayout(FlowLayout.CENTER));\n        p.add(componentOrString(o1));\n        return p;\n    }\n\n    // FIXME: in ANY layout, a string should be made into a jlabel automatically.\n    private static Component componentOrString(Object o) {\n        return (o instanceof String ? new JLabel((String) o) : (Component) o);\n    }\n\n    // -------------\n    // grid layout...\n    public static JPanel gridLayout(Component[][] o) {\n        int rows = o.length;\n        int cols = o[0].length;\n        JPanel p = new JPanel(new GridLayout(rows, cols));\n        for (int i = 0; i < rows; i++) for (int j = 0; j < cols; j++) p.add(o[i][j]);\n        return p;\n    }\n\n    public static JPanel gridLayout(Component[][] o, int hgap, int vgap) {\n        int rows = o.length;\n        int cols = o[0].length;\n        JPanel p = new JPanel(new GridLayout(rows, cols, hgap, vgap));\n        for (int i = 0; i < rows; i++) for (int j = 0; j < cols; j++) p.add(o[i][j]);\n        return p;\n    }\n}\n",
		"id": "/EvoSuiteBenchmark/35_corina/src/main/java/corina/gui/Layout_9Test.java",
		"test_prompt": "// Layout_9Test.java\npackage corina.gui;\n\nimport corina.gui.layouts.ButtonLayout;\nimport javax.swing.JPanel;\nimport javax.swing.Box;\nimport java.awt.Component;\nimport java.awt.BorderLayout;\nimport javax.swing.BoxLayout;\nimport java.awt.FlowLayout;\nimport javax.swing.JLabel;\nimport java.awt.GridLayout;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link Layout}.\n* It contains ten unit test cases for the {@link Layout#boxLayoutY(Component, Component, Component, Component)} method.\n*/\nclass Layout_9Test {"
	},
	{
		"original_code": "// Layout.java\npackage corina.gui;\n\nimport corina.gui.layouts.ButtonLayout;\nimport javax.swing.JPanel;\nimport javax.swing.Box;\nimport java.awt.Component;\nimport java.awt.BorderLayout;\nimport javax.swing.BoxLayout;\nimport java.awt.FlowLayout;\nimport javax.swing.JLabel;\nimport java.awt.GridLayout;\n\n// TODO: gpl header, javadoc!\n// a factory for easily creating panels of a given layout.\n// for example,\n// JPanel p = Layout.borderLayout(null,\n//                                null, content, null,\n//                                Layout.buttonLayout(cancel, ok));\n// TODO: if cancel comes before ok, and os=win32, swap them?\n// TODO: accept 1, 2, 3, ... (...5?) components directly (not in array)\n// WRITEME: i'd like to be able to put an integer in any slot for a strut, but i can't.\n// -- BETTER: class Strut(w,h) -- e.g., Layout.flowLayoutL(\"Value:\", Strut.w(4), myField);\n// TODO: i tend to need to use temp vars for the output of these methods,\n// simply to set custom borders on them.  i think going to an XML generator\n// might actually help with that.\n// FIXME: consolidate componentOrGlue(), componentOrString() -- it\n// should be pretty much the same inputs for any of these methods.\npublic class Layout {\n\n    // add a component, if non-null, or add some glue\n    private static Component componentOrGlue(Component c) {\n        return (c != null ? c : Box.createHorizontalGlue());\n    }\n\n    // --------\n    // button layout\n    public static JPanel buttonLayout(Component c1) {\n        JPanel p = new JPanel(new ButtonLayout());\n        p.add(componentOrGlue(c1));\n        return p;\n    }\n\n    public static JPanel buttonLayout(Component c1, Component c2) {\n        JPanel p = new JPanel(new ButtonLayout());\n        p.add(componentOrGlue(c1));\n        p.add(componentOrGlue(c2));\n        return p;\n    }\n\n    public static JPanel buttonLayout(Component c1, Component c2, Component c3) {\n        JPanel p = new JPanel(new ButtonLayout());\n        p.add(componentOrGlue(c1));\n        p.add(componentOrGlue(c2));\n        p.add(componentOrGlue(c3));\n        return p;\n    }\n\n    public static JPanel buttonLayout(Component c1, Component c2, Component c3, Component c4) {\n        JPanel p = new JPanel(new ButtonLayout());\n        p.add(componentOrGlue(c1));\n        p.add(componentOrGlue(c2));\n        p.add(componentOrGlue(c3));\n        p.add(componentOrGlue(c4));\n        return p;\n    }\n\n    public static JPanel buttonLayout(Component c1, Component c2, Component c3, Component c4, Component c5) {\n        JPanel p = new JPanel(new ButtonLayout());\n        p.add(componentOrGlue(c1));\n        p.add(componentOrGlue(c2));\n        p.add(componentOrGlue(c3));\n        p.add(componentOrGlue(c4));\n        p.add(componentOrGlue(c5));\n        return p;\n    }\n\n    // --------\n    // border layout is verbose, too.  let's see what we can do about that.\n    public static JPanel borderLayout(Component n, Component w, Component c, Component e, Component s) {\n        // is this default, anyway?\n        JPanel p = new JPanel(new BorderLayout());\n        if (n != null)\n            p.add(n, BorderLayout.NORTH);\n        if (w != null)\n            p.add(w, BorderLayout.WEST);\n        if (c != null)\n            p.add(c, BorderLayout.CENTER);\n        if (e != null)\n            p.add(e, BorderLayout.EAST);\n        if (s != null)\n            p.add(s, BorderLayout.SOUTH);\n        return p;\n    }\n\n    // --------\n    // box layout...\n    public static JPanel boxLayoutY(Component c1) {\n        JPanel p = new JPanel();\n        p.setLayout(new BoxLayout(p, BoxLayout.Y_AXIS));\n        p.add(c1);\n        return p;\n    }\n\n    public static JPanel boxLayoutY(Component c1, Component c2) {\n        JPanel p = new JPanel();\n        p.setLayout(new BoxLayout(p, BoxLayout.Y_AXIS));\n        p.add(c1);\n        p.add(c2);\n        return p;\n    }\n\n    public static JPanel boxLayoutY(Component c1, Component c2, Component c3) {\n        JPanel p = new JPanel();\n        p.setLayout(new BoxLayout(p, BoxLayout.Y_AXIS));\n        p.add(c1);\n        p.add(c2);\n        p.add(c3);\n        return p;\n    }\n\n    public static JPanel boxLayoutY(Component c1, Component c2, Component c3, Component c4) {\n        JPanel p = new JPanel();\n        p.setLayout(new BoxLayout(p, BoxLayout.Y_AXIS));\n        p.add(c1);\n        p.add(c2);\n        p.add(c3);\n        p.add(c4);\n        return p;\n    }\n\n    public static JPanel boxLayoutY(Component c1, Component c2, Component c3, Component c4, Component c5) {\n        JPanel p = new JPanel();\n        p.setLayout(new BoxLayout(p, BoxLayout.Y_AXIS));\n        p.add(c1);\n        p.add(c2);\n        p.add(c3);\n        p.add(c4);\n        p.add(c5);\n        return p;\n    }\n\n    // -------------\n    // flow layout...\n    public static JPanel flowLayoutL(Object o1) {\n        JPanel p = new JPanel(new FlowLayout(FlowLayout.LEFT));\n        p.add(componentOrString(o1));\n        return p;\n    }\n\n    public static JPanel flowLayoutL(Object o1, Object o2) {\n        JPanel p = new JPanel(new FlowLayout(FlowLayout.LEFT));\n        p.add(componentOrString(o1));\n        p.add(componentOrString(o2));\n        return p;\n    }\n\n    public static JPanel flowLayoutR(Object o1, Object o2) {\n        JPanel p = new JPanel(new FlowLayout(FlowLayout.RIGHT));\n        p.add(componentOrString(o1));\n        p.add(componentOrString(o2));\n        return p;\n    }\n\n    public static JPanel flowLayoutL(Object o1, Object o2, Object o3) {\n        JPanel p = new JPanel(new FlowLayout(FlowLayout.LEFT));\n        p.add(componentOrString(o1));\n        p.add(componentOrString(o2));\n        p.add(componentOrString(o3));\n        return p;\n    }\n\n    public static JPanel flowLayoutL(Object o1, Object o2, Object o3, Object o4) {\n        JPanel p = new JPanel(new FlowLayout(FlowLayout.LEFT));\n        p.add(componentOrString(o1));\n        p.add(componentOrString(o2));\n        p.add(componentOrString(o3));\n        p.add(componentOrString(o4));\n        return p;\n    }\n\n    public static JPanel flowLayoutL(Object o1, Object o2, Object o3, Object o4, Object o5) {\n        JPanel p = new JPanel(new FlowLayout(FlowLayout.LEFT));\n        p.add(componentOrString(o1));\n        p.add(componentOrString(o2));\n        p.add(componentOrString(o3));\n        p.add(componentOrString(o4));\n        p.add(componentOrString(o5));\n        return p;\n    }\n\n    public static JPanel flowLayoutL(Object o1, Object o2, Object o3, Object o4, Object o5, Object o6) {\n        JPanel p = new JPanel(new FlowLayout(FlowLayout.LEFT));\n        p.add(componentOrString(o1));\n        p.add(componentOrString(o2));\n        p.add(componentOrString(o3));\n        p.add(componentOrString(o4));\n        p.add(componentOrString(o5));\n        p.add(componentOrString(o6));\n        return p;\n    }\n\n    public static JPanel flowLayoutL(Object o1, Object o2, Object o3, Object o4, Object o5, Object o6, Object o7) {\n        JPanel p = new JPanel(new FlowLayout(FlowLayout.LEFT));\n        p.add(componentOrString(o1));\n        p.add(componentOrString(o2));\n        p.add(componentOrString(o3));\n        p.add(componentOrString(o4));\n        p.add(componentOrString(o5));\n        p.add(componentOrString(o6));\n        p.add(componentOrString(o7));\n        return p;\n    }\n\n    public static JPanel flowLayoutC(Object o1) {\n        JPanel p = new JPanel(new FlowLayout(FlowLayout.CENTER));\n        p.add(componentOrString(o1));\n        return p;\n    }\n\n    // FIXME: in ANY layout, a string should be made into a jlabel automatically.\n    private static Component componentOrString(Object o) {\n        return (o instanceof String ? new JLabel((String) o) : (Component) o);\n    }\n\n    // -------------\n    // grid layout...\n    public static JPanel gridLayout(Component[][] o) {\n        int rows = o.length;\n        int cols = o[0].length;\n        JPanel p = new JPanel(new GridLayout(rows, cols));\n        for (int i = 0; i < rows; i++) for (int j = 0; j < cols; j++) p.add(o[i][j]);\n        return p;\n    }\n\n    public static JPanel gridLayout(Component[][] o, int hgap, int vgap) {\n        int rows = o.length;\n        int cols = o[0].length;\n        JPanel p = new JPanel(new GridLayout(rows, cols, hgap, vgap));\n        for (int i = 0; i < rows; i++) for (int j = 0; j < cols; j++) p.add(o[i][j]);\n        return p;\n    }\n}\n",
		"id": "/EvoSuiteBenchmark/35_corina/src/main/java/corina/gui/Layout_10Test.java",
		"test_prompt": "// Layout_10Test.java\npackage corina.gui;\n\nimport corina.gui.layouts.ButtonLayout;\nimport javax.swing.JPanel;\nimport javax.swing.Box;\nimport java.awt.Component;\nimport java.awt.BorderLayout;\nimport javax.swing.BoxLayout;\nimport java.awt.FlowLayout;\nimport javax.swing.JLabel;\nimport java.awt.GridLayout;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link Layout}.\n* It contains ten unit test cases for the {@link Layout#boxLayoutY(Component, Component, Component, Component, Component)} method.\n*/\nclass Layout_10Test {"
	},
	{
		"original_code": "// Layout.java\npackage corina.gui;\n\nimport corina.gui.layouts.ButtonLayout;\nimport javax.swing.JPanel;\nimport javax.swing.Box;\nimport java.awt.Component;\nimport java.awt.BorderLayout;\nimport javax.swing.BoxLayout;\nimport java.awt.FlowLayout;\nimport javax.swing.JLabel;\nimport java.awt.GridLayout;\n\n// TODO: gpl header, javadoc!\n// a factory for easily creating panels of a given layout.\n// for example,\n// JPanel p = Layout.borderLayout(null,\n//                                null, content, null,\n//                                Layout.buttonLayout(cancel, ok));\n// TODO: if cancel comes before ok, and os=win32, swap them?\n// TODO: accept 1, 2, 3, ... (...5?) components directly (not in array)\n// WRITEME: i'd like to be able to put an integer in any slot for a strut, but i can't.\n// -- BETTER: class Strut(w,h) -- e.g., Layout.flowLayoutL(\"Value:\", Strut.w(4), myField);\n// TODO: i tend to need to use temp vars for the output of these methods,\n// simply to set custom borders on them.  i think going to an XML generator\n// might actually help with that.\n// FIXME: consolidate componentOrGlue(), componentOrString() -- it\n// should be pretty much the same inputs for any of these methods.\npublic class Layout {\n\n    // add a component, if non-null, or add some glue\n    private static Component componentOrGlue(Component c) {\n        return (c != null ? c : Box.createHorizontalGlue());\n    }\n\n    // --------\n    // button layout\n    public static JPanel buttonLayout(Component c1) {\n        JPanel p = new JPanel(new ButtonLayout());\n        p.add(componentOrGlue(c1));\n        return p;\n    }\n\n    public static JPanel buttonLayout(Component c1, Component c2) {\n        JPanel p = new JPanel(new ButtonLayout());\n        p.add(componentOrGlue(c1));\n        p.add(componentOrGlue(c2));\n        return p;\n    }\n\n    public static JPanel buttonLayout(Component c1, Component c2, Component c3) {\n        JPanel p = new JPanel(new ButtonLayout());\n        p.add(componentOrGlue(c1));\n        p.add(componentOrGlue(c2));\n        p.add(componentOrGlue(c3));\n        return p;\n    }\n\n    public static JPanel buttonLayout(Component c1, Component c2, Component c3, Component c4) {\n        JPanel p = new JPanel(new ButtonLayout());\n        p.add(componentOrGlue(c1));\n        p.add(componentOrGlue(c2));\n        p.add(componentOrGlue(c3));\n        p.add(componentOrGlue(c4));\n        return p;\n    }\n\n    public static JPanel buttonLayout(Component c1, Component c2, Component c3, Component c4, Component c5) {\n        JPanel p = new JPanel(new ButtonLayout());\n        p.add(componentOrGlue(c1));\n        p.add(componentOrGlue(c2));\n        p.add(componentOrGlue(c3));\n        p.add(componentOrGlue(c4));\n        p.add(componentOrGlue(c5));\n        return p;\n    }\n\n    // --------\n    // border layout is verbose, too.  let's see what we can do about that.\n    public static JPanel borderLayout(Component n, Component w, Component c, Component e, Component s) {\n        // is this default, anyway?\n        JPanel p = new JPanel(new BorderLayout());\n        if (n != null)\n            p.add(n, BorderLayout.NORTH);\n        if (w != null)\n            p.add(w, BorderLayout.WEST);\n        if (c != null)\n            p.add(c, BorderLayout.CENTER);\n        if (e != null)\n            p.add(e, BorderLayout.EAST);\n        if (s != null)\n            p.add(s, BorderLayout.SOUTH);\n        return p;\n    }\n\n    // --------\n    // box layout...\n    public static JPanel boxLayoutY(Component c1) {\n        JPanel p = new JPanel();\n        p.setLayout(new BoxLayout(p, BoxLayout.Y_AXIS));\n        p.add(c1);\n        return p;\n    }\n\n    public static JPanel boxLayoutY(Component c1, Component c2) {\n        JPanel p = new JPanel();\n        p.setLayout(new BoxLayout(p, BoxLayout.Y_AXIS));\n        p.add(c1);\n        p.add(c2);\n        return p;\n    }\n\n    public static JPanel boxLayoutY(Component c1, Component c2, Component c3) {\n        JPanel p = new JPanel();\n        p.setLayout(new BoxLayout(p, BoxLayout.Y_AXIS));\n        p.add(c1);\n        p.add(c2);\n        p.add(c3);\n        return p;\n    }\n\n    public static JPanel boxLayoutY(Component c1, Component c2, Component c3, Component c4) {\n        JPanel p = new JPanel();\n        p.setLayout(new BoxLayout(p, BoxLayout.Y_AXIS));\n        p.add(c1);\n        p.add(c2);\n        p.add(c3);\n        p.add(c4);\n        return p;\n    }\n\n    public static JPanel boxLayoutY(Component c1, Component c2, Component c3, Component c4, Component c5) {\n        JPanel p = new JPanel();\n        p.setLayout(new BoxLayout(p, BoxLayout.Y_AXIS));\n        p.add(c1);\n        p.add(c2);\n        p.add(c3);\n        p.add(c4);\n        p.add(c5);\n        return p;\n    }\n\n    // -------------\n    // flow layout...\n    public static JPanel flowLayoutL(Object o1) {\n        JPanel p = new JPanel(new FlowLayout(FlowLayout.LEFT));\n        p.add(componentOrString(o1));\n        return p;\n    }\n\n    public static JPanel flowLayoutL(Object o1, Object o2) {\n        JPanel p = new JPanel(new FlowLayout(FlowLayout.LEFT));\n        p.add(componentOrString(o1));\n        p.add(componentOrString(o2));\n        return p;\n    }\n\n    public static JPanel flowLayoutR(Object o1, Object o2) {\n        JPanel p = new JPanel(new FlowLayout(FlowLayout.RIGHT));\n        p.add(componentOrString(o1));\n        p.add(componentOrString(o2));\n        return p;\n    }\n\n    public static JPanel flowLayoutL(Object o1, Object o2, Object o3) {\n        JPanel p = new JPanel(new FlowLayout(FlowLayout.LEFT));\n        p.add(componentOrString(o1));\n        p.add(componentOrString(o2));\n        p.add(componentOrString(o3));\n        return p;\n    }\n\n    public static JPanel flowLayoutL(Object o1, Object o2, Object o3, Object o4) {\n        JPanel p = new JPanel(new FlowLayout(FlowLayout.LEFT));\n        p.add(componentOrString(o1));\n        p.add(componentOrString(o2));\n        p.add(componentOrString(o3));\n        p.add(componentOrString(o4));\n        return p;\n    }\n\n    public static JPanel flowLayoutL(Object o1, Object o2, Object o3, Object o4, Object o5) {\n        JPanel p = new JPanel(new FlowLayout(FlowLayout.LEFT));\n        p.add(componentOrString(o1));\n        p.add(componentOrString(o2));\n        p.add(componentOrString(o3));\n        p.add(componentOrString(o4));\n        p.add(componentOrString(o5));\n        return p;\n    }\n\n    public static JPanel flowLayoutL(Object o1, Object o2, Object o3, Object o4, Object o5, Object o6) {\n        JPanel p = new JPanel(new FlowLayout(FlowLayout.LEFT));\n        p.add(componentOrString(o1));\n        p.add(componentOrString(o2));\n        p.add(componentOrString(o3));\n        p.add(componentOrString(o4));\n        p.add(componentOrString(o5));\n        p.add(componentOrString(o6));\n        return p;\n    }\n\n    public static JPanel flowLayoutL(Object o1, Object o2, Object o3, Object o4, Object o5, Object o6, Object o7) {\n        JPanel p = new JPanel(new FlowLayout(FlowLayout.LEFT));\n        p.add(componentOrString(o1));\n        p.add(componentOrString(o2));\n        p.add(componentOrString(o3));\n        p.add(componentOrString(o4));\n        p.add(componentOrString(o5));\n        p.add(componentOrString(o6));\n        p.add(componentOrString(o7));\n        return p;\n    }\n\n    public static JPanel flowLayoutC(Object o1) {\n        JPanel p = new JPanel(new FlowLayout(FlowLayout.CENTER));\n        p.add(componentOrString(o1));\n        return p;\n    }\n\n    // FIXME: in ANY layout, a string should be made into a jlabel automatically.\n    private static Component componentOrString(Object o) {\n        return (o instanceof String ? new JLabel((String) o) : (Component) o);\n    }\n\n    // -------------\n    // grid layout...\n    public static JPanel gridLayout(Component[][] o) {\n        int rows = o.length;\n        int cols = o[0].length;\n        JPanel p = new JPanel(new GridLayout(rows, cols));\n        for (int i = 0; i < rows; i++) for (int j = 0; j < cols; j++) p.add(o[i][j]);\n        return p;\n    }\n\n    public static JPanel gridLayout(Component[][] o, int hgap, int vgap) {\n        int rows = o.length;\n        int cols = o[0].length;\n        JPanel p = new JPanel(new GridLayout(rows, cols, hgap, vgap));\n        for (int i = 0; i < rows; i++) for (int j = 0; j < cols; j++) p.add(o[i][j]);\n        return p;\n    }\n}\n",
		"id": "/EvoSuiteBenchmark/35_corina/src/main/java/corina/gui/Layout_11Test.java",
		"test_prompt": "// Layout_11Test.java\npackage corina.gui;\n\nimport corina.gui.layouts.ButtonLayout;\nimport javax.swing.JPanel;\nimport javax.swing.Box;\nimport java.awt.Component;\nimport java.awt.BorderLayout;\nimport javax.swing.BoxLayout;\nimport java.awt.FlowLayout;\nimport javax.swing.JLabel;\nimport java.awt.GridLayout;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link Layout}.\n* It contains ten unit test cases for the {@link Layout#flowLayoutL(Object)} method.\n*/\nclass Layout_11Test {"
	},
	{
		"original_code": "// Layout.java\npackage corina.gui;\n\nimport corina.gui.layouts.ButtonLayout;\nimport javax.swing.JPanel;\nimport javax.swing.Box;\nimport java.awt.Component;\nimport java.awt.BorderLayout;\nimport javax.swing.BoxLayout;\nimport java.awt.FlowLayout;\nimport javax.swing.JLabel;\nimport java.awt.GridLayout;\n\n// TODO: gpl header, javadoc!\n// a factory for easily creating panels of a given layout.\n// for example,\n// JPanel p = Layout.borderLayout(null,\n//                                null, content, null,\n//                                Layout.buttonLayout(cancel, ok));\n// TODO: if cancel comes before ok, and os=win32, swap them?\n// TODO: accept 1, 2, 3, ... (...5?) components directly (not in array)\n// WRITEME: i'd like to be able to put an integer in any slot for a strut, but i can't.\n// -- BETTER: class Strut(w,h) -- e.g., Layout.flowLayoutL(\"Value:\", Strut.w(4), myField);\n// TODO: i tend to need to use temp vars for the output of these methods,\n// simply to set custom borders on them.  i think going to an XML generator\n// might actually help with that.\n// FIXME: consolidate componentOrGlue(), componentOrString() -- it\n// should be pretty much the same inputs for any of these methods.\npublic class Layout {\n\n    // add a component, if non-null, or add some glue\n    private static Component componentOrGlue(Component c) {\n        return (c != null ? c : Box.createHorizontalGlue());\n    }\n\n    // --------\n    // button layout\n    public static JPanel buttonLayout(Component c1) {\n        JPanel p = new JPanel(new ButtonLayout());\n        p.add(componentOrGlue(c1));\n        return p;\n    }\n\n    public static JPanel buttonLayout(Component c1, Component c2) {\n        JPanel p = new JPanel(new ButtonLayout());\n        p.add(componentOrGlue(c1));\n        p.add(componentOrGlue(c2));\n        return p;\n    }\n\n    public static JPanel buttonLayout(Component c1, Component c2, Component c3) {\n        JPanel p = new JPanel(new ButtonLayout());\n        p.add(componentOrGlue(c1));\n        p.add(componentOrGlue(c2));\n        p.add(componentOrGlue(c3));\n        return p;\n    }\n\n    public static JPanel buttonLayout(Component c1, Component c2, Component c3, Component c4) {\n        JPanel p = new JPanel(new ButtonLayout());\n        p.add(componentOrGlue(c1));\n        p.add(componentOrGlue(c2));\n        p.add(componentOrGlue(c3));\n        p.add(componentOrGlue(c4));\n        return p;\n    }\n\n    public static JPanel buttonLayout(Component c1, Component c2, Component c3, Component c4, Component c5) {\n        JPanel p = new JPanel(new ButtonLayout());\n        p.add(componentOrGlue(c1));\n        p.add(componentOrGlue(c2));\n        p.add(componentOrGlue(c3));\n        p.add(componentOrGlue(c4));\n        p.add(componentOrGlue(c5));\n        return p;\n    }\n\n    // --------\n    // border layout is verbose, too.  let's see what we can do about that.\n    public static JPanel borderLayout(Component n, Component w, Component c, Component e, Component s) {\n        // is this default, anyway?\n        JPanel p = new JPanel(new BorderLayout());\n        if (n != null)\n            p.add(n, BorderLayout.NORTH);\n        if (w != null)\n            p.add(w, BorderLayout.WEST);\n        if (c != null)\n            p.add(c, BorderLayout.CENTER);\n        if (e != null)\n            p.add(e, BorderLayout.EAST);\n        if (s != null)\n            p.add(s, BorderLayout.SOUTH);\n        return p;\n    }\n\n    // --------\n    // box layout...\n    public static JPanel boxLayoutY(Component c1) {\n        JPanel p = new JPanel();\n        p.setLayout(new BoxLayout(p, BoxLayout.Y_AXIS));\n        p.add(c1);\n        return p;\n    }\n\n    public static JPanel boxLayoutY(Component c1, Component c2) {\n        JPanel p = new JPanel();\n        p.setLayout(new BoxLayout(p, BoxLayout.Y_AXIS));\n        p.add(c1);\n        p.add(c2);\n        return p;\n    }\n\n    public static JPanel boxLayoutY(Component c1, Component c2, Component c3) {\n        JPanel p = new JPanel();\n        p.setLayout(new BoxLayout(p, BoxLayout.Y_AXIS));\n        p.add(c1);\n        p.add(c2);\n        p.add(c3);\n        return p;\n    }\n\n    public static JPanel boxLayoutY(Component c1, Component c2, Component c3, Component c4) {\n        JPanel p = new JPanel();\n        p.setLayout(new BoxLayout(p, BoxLayout.Y_AXIS));\n        p.add(c1);\n        p.add(c2);\n        p.add(c3);\n        p.add(c4);\n        return p;\n    }\n\n    public static JPanel boxLayoutY(Component c1, Component c2, Component c3, Component c4, Component c5) {\n        JPanel p = new JPanel();\n        p.setLayout(new BoxLayout(p, BoxLayout.Y_AXIS));\n        p.add(c1);\n        p.add(c2);\n        p.add(c3);\n        p.add(c4);\n        p.add(c5);\n        return p;\n    }\n\n    // -------------\n    // flow layout...\n    public static JPanel flowLayoutL(Object o1) {\n        JPanel p = new JPanel(new FlowLayout(FlowLayout.LEFT));\n        p.add(componentOrString(o1));\n        return p;\n    }\n\n    public static JPanel flowLayoutL(Object o1, Object o2) {\n        JPanel p = new JPanel(new FlowLayout(FlowLayout.LEFT));\n        p.add(componentOrString(o1));\n        p.add(componentOrString(o2));\n        return p;\n    }\n\n    public static JPanel flowLayoutR(Object o1, Object o2) {\n        JPanel p = new JPanel(new FlowLayout(FlowLayout.RIGHT));\n        p.add(componentOrString(o1));\n        p.add(componentOrString(o2));\n        return p;\n    }\n\n    public static JPanel flowLayoutL(Object o1, Object o2, Object o3) {\n        JPanel p = new JPanel(new FlowLayout(FlowLayout.LEFT));\n        p.add(componentOrString(o1));\n        p.add(componentOrString(o2));\n        p.add(componentOrString(o3));\n        return p;\n    }\n\n    public static JPanel flowLayoutL(Object o1, Object o2, Object o3, Object o4) {\n        JPanel p = new JPanel(new FlowLayout(FlowLayout.LEFT));\n        p.add(componentOrString(o1));\n        p.add(componentOrString(o2));\n        p.add(componentOrString(o3));\n        p.add(componentOrString(o4));\n        return p;\n    }\n\n    public static JPanel flowLayoutL(Object o1, Object o2, Object o3, Object o4, Object o5) {\n        JPanel p = new JPanel(new FlowLayout(FlowLayout.LEFT));\n        p.add(componentOrString(o1));\n        p.add(componentOrString(o2));\n        p.add(componentOrString(o3));\n        p.add(componentOrString(o4));\n        p.add(componentOrString(o5));\n        return p;\n    }\n\n    public static JPanel flowLayoutL(Object o1, Object o2, Object o3, Object o4, Object o5, Object o6) {\n        JPanel p = new JPanel(new FlowLayout(FlowLayout.LEFT));\n        p.add(componentOrString(o1));\n        p.add(componentOrString(o2));\n        p.add(componentOrString(o3));\n        p.add(componentOrString(o4));\n        p.add(componentOrString(o5));\n        p.add(componentOrString(o6));\n        return p;\n    }\n\n    public static JPanel flowLayoutL(Object o1, Object o2, Object o3, Object o4, Object o5, Object o6, Object o7) {\n        JPanel p = new JPanel(new FlowLayout(FlowLayout.LEFT));\n        p.add(componentOrString(o1));\n        p.add(componentOrString(o2));\n        p.add(componentOrString(o3));\n        p.add(componentOrString(o4));\n        p.add(componentOrString(o5));\n        p.add(componentOrString(o6));\n        p.add(componentOrString(o7));\n        return p;\n    }\n\n    public static JPanel flowLayoutC(Object o1) {\n        JPanel p = new JPanel(new FlowLayout(FlowLayout.CENTER));\n        p.add(componentOrString(o1));\n        return p;\n    }\n\n    // FIXME: in ANY layout, a string should be made into a jlabel automatically.\n    private static Component componentOrString(Object o) {\n        return (o instanceof String ? new JLabel((String) o) : (Component) o);\n    }\n\n    // -------------\n    // grid layout...\n    public static JPanel gridLayout(Component[][] o) {\n        int rows = o.length;\n        int cols = o[0].length;\n        JPanel p = new JPanel(new GridLayout(rows, cols));\n        for (int i = 0; i < rows; i++) for (int j = 0; j < cols; j++) p.add(o[i][j]);\n        return p;\n    }\n\n    public static JPanel gridLayout(Component[][] o, int hgap, int vgap) {\n        int rows = o.length;\n        int cols = o[0].length;\n        JPanel p = new JPanel(new GridLayout(rows, cols, hgap, vgap));\n        for (int i = 0; i < rows; i++) for (int j = 0; j < cols; j++) p.add(o[i][j]);\n        return p;\n    }\n}\n",
		"id": "/EvoSuiteBenchmark/35_corina/src/main/java/corina/gui/Layout_12Test.java",
		"test_prompt": "// Layout_12Test.java\npackage corina.gui;\n\nimport corina.gui.layouts.ButtonLayout;\nimport javax.swing.JPanel;\nimport javax.swing.Box;\nimport java.awt.Component;\nimport java.awt.BorderLayout;\nimport javax.swing.BoxLayout;\nimport java.awt.FlowLayout;\nimport javax.swing.JLabel;\nimport java.awt.GridLayout;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link Layout}.\n* It contains ten unit test cases for the {@link Layout#flowLayoutL(Object, Object)} method.\n*/\nclass Layout_12Test {"
	},
	{
		"original_code": "// Layout.java\npackage corina.gui;\n\nimport corina.gui.layouts.ButtonLayout;\nimport javax.swing.JPanel;\nimport javax.swing.Box;\nimport java.awt.Component;\nimport java.awt.BorderLayout;\nimport javax.swing.BoxLayout;\nimport java.awt.FlowLayout;\nimport javax.swing.JLabel;\nimport java.awt.GridLayout;\n\n// TODO: gpl header, javadoc!\n// a factory for easily creating panels of a given layout.\n// for example,\n// JPanel p = Layout.borderLayout(null,\n//                                null, content, null,\n//                                Layout.buttonLayout(cancel, ok));\n// TODO: if cancel comes before ok, and os=win32, swap them?\n// TODO: accept 1, 2, 3, ... (...5?) components directly (not in array)\n// WRITEME: i'd like to be able to put an integer in any slot for a strut, but i can't.\n// -- BETTER: class Strut(w,h) -- e.g., Layout.flowLayoutL(\"Value:\", Strut.w(4), myField);\n// TODO: i tend to need to use temp vars for the output of these methods,\n// simply to set custom borders on them.  i think going to an XML generator\n// might actually help with that.\n// FIXME: consolidate componentOrGlue(), componentOrString() -- it\n// should be pretty much the same inputs for any of these methods.\npublic class Layout {\n\n    // add a component, if non-null, or add some glue\n    private static Component componentOrGlue(Component c) {\n        return (c != null ? c : Box.createHorizontalGlue());\n    }\n\n    // --------\n    // button layout\n    public static JPanel buttonLayout(Component c1) {\n        JPanel p = new JPanel(new ButtonLayout());\n        p.add(componentOrGlue(c1));\n        return p;\n    }\n\n    public static JPanel buttonLayout(Component c1, Component c2) {\n        JPanel p = new JPanel(new ButtonLayout());\n        p.add(componentOrGlue(c1));\n        p.add(componentOrGlue(c2));\n        return p;\n    }\n\n    public static JPanel buttonLayout(Component c1, Component c2, Component c3) {\n        JPanel p = new JPanel(new ButtonLayout());\n        p.add(componentOrGlue(c1));\n        p.add(componentOrGlue(c2));\n        p.add(componentOrGlue(c3));\n        return p;\n    }\n\n    public static JPanel buttonLayout(Component c1, Component c2, Component c3, Component c4) {\n        JPanel p = new JPanel(new ButtonLayout());\n        p.add(componentOrGlue(c1));\n        p.add(componentOrGlue(c2));\n        p.add(componentOrGlue(c3));\n        p.add(componentOrGlue(c4));\n        return p;\n    }\n\n    public static JPanel buttonLayout(Component c1, Component c2, Component c3, Component c4, Component c5) {\n        JPanel p = new JPanel(new ButtonLayout());\n        p.add(componentOrGlue(c1));\n        p.add(componentOrGlue(c2));\n        p.add(componentOrGlue(c3));\n        p.add(componentOrGlue(c4));\n        p.add(componentOrGlue(c5));\n        return p;\n    }\n\n    // --------\n    // border layout is verbose, too.  let's see what we can do about that.\n    public static JPanel borderLayout(Component n, Component w, Component c, Component e, Component s) {\n        // is this default, anyway?\n        JPanel p = new JPanel(new BorderLayout());\n        if (n != null)\n            p.add(n, BorderLayout.NORTH);\n        if (w != null)\n            p.add(w, BorderLayout.WEST);\n        if (c != null)\n            p.add(c, BorderLayout.CENTER);\n        if (e != null)\n            p.add(e, BorderLayout.EAST);\n        if (s != null)\n            p.add(s, BorderLayout.SOUTH);\n        return p;\n    }\n\n    // --------\n    // box layout...\n    public static JPanel boxLayoutY(Component c1) {\n        JPanel p = new JPanel();\n        p.setLayout(new BoxLayout(p, BoxLayout.Y_AXIS));\n        p.add(c1);\n        return p;\n    }\n\n    public static JPanel boxLayoutY(Component c1, Component c2) {\n        JPanel p = new JPanel();\n        p.setLayout(new BoxLayout(p, BoxLayout.Y_AXIS));\n        p.add(c1);\n        p.add(c2);\n        return p;\n    }\n\n    public static JPanel boxLayoutY(Component c1, Component c2, Component c3) {\n        JPanel p = new JPanel();\n        p.setLayout(new BoxLayout(p, BoxLayout.Y_AXIS));\n        p.add(c1);\n        p.add(c2);\n        p.add(c3);\n        return p;\n    }\n\n    public static JPanel boxLayoutY(Component c1, Component c2, Component c3, Component c4) {\n        JPanel p = new JPanel();\n        p.setLayout(new BoxLayout(p, BoxLayout.Y_AXIS));\n        p.add(c1);\n        p.add(c2);\n        p.add(c3);\n        p.add(c4);\n        return p;\n    }\n\n    public static JPanel boxLayoutY(Component c1, Component c2, Component c3, Component c4, Component c5) {\n        JPanel p = new JPanel();\n        p.setLayout(new BoxLayout(p, BoxLayout.Y_AXIS));\n        p.add(c1);\n        p.add(c2);\n        p.add(c3);\n        p.add(c4);\n        p.add(c5);\n        return p;\n    }\n\n    // -------------\n    // flow layout...\n    public static JPanel flowLayoutL(Object o1) {\n        JPanel p = new JPanel(new FlowLayout(FlowLayout.LEFT));\n        p.add(componentOrString(o1));\n        return p;\n    }\n\n    public static JPanel flowLayoutL(Object o1, Object o2) {\n        JPanel p = new JPanel(new FlowLayout(FlowLayout.LEFT));\n        p.add(componentOrString(o1));\n        p.add(componentOrString(o2));\n        return p;\n    }\n\n    public static JPanel flowLayoutR(Object o1, Object o2) {\n        JPanel p = new JPanel(new FlowLayout(FlowLayout.RIGHT));\n        p.add(componentOrString(o1));\n        p.add(componentOrString(o2));\n        return p;\n    }\n\n    public static JPanel flowLayoutL(Object o1, Object o2, Object o3) {\n        JPanel p = new JPanel(new FlowLayout(FlowLayout.LEFT));\n        p.add(componentOrString(o1));\n        p.add(componentOrString(o2));\n        p.add(componentOrString(o3));\n        return p;\n    }\n\n    public static JPanel flowLayoutL(Object o1, Object o2, Object o3, Object o4) {\n        JPanel p = new JPanel(new FlowLayout(FlowLayout.LEFT));\n        p.add(componentOrString(o1));\n        p.add(componentOrString(o2));\n        p.add(componentOrString(o3));\n        p.add(componentOrString(o4));\n        return p;\n    }\n\n    public static JPanel flowLayoutL(Object o1, Object o2, Object o3, Object o4, Object o5) {\n        JPanel p = new JPanel(new FlowLayout(FlowLayout.LEFT));\n        p.add(componentOrString(o1));\n        p.add(componentOrString(o2));\n        p.add(componentOrString(o3));\n        p.add(componentOrString(o4));\n        p.add(componentOrString(o5));\n        return p;\n    }\n\n    public static JPanel flowLayoutL(Object o1, Object o2, Object o3, Object o4, Object o5, Object o6) {\n        JPanel p = new JPanel(new FlowLayout(FlowLayout.LEFT));\n        p.add(componentOrString(o1));\n        p.add(componentOrString(o2));\n        p.add(componentOrString(o3));\n        p.add(componentOrString(o4));\n        p.add(componentOrString(o5));\n        p.add(componentOrString(o6));\n        return p;\n    }\n\n    public static JPanel flowLayoutL(Object o1, Object o2, Object o3, Object o4, Object o5, Object o6, Object o7) {\n        JPanel p = new JPanel(new FlowLayout(FlowLayout.LEFT));\n        p.add(componentOrString(o1));\n        p.add(componentOrString(o2));\n        p.add(componentOrString(o3));\n        p.add(componentOrString(o4));\n        p.add(componentOrString(o5));\n        p.add(componentOrString(o6));\n        p.add(componentOrString(o7));\n        return p;\n    }\n\n    public static JPanel flowLayoutC(Object o1) {\n        JPanel p = new JPanel(new FlowLayout(FlowLayout.CENTER));\n        p.add(componentOrString(o1));\n        return p;\n    }\n\n    // FIXME: in ANY layout, a string should be made into a jlabel automatically.\n    private static Component componentOrString(Object o) {\n        return (o instanceof String ? new JLabel((String) o) : (Component) o);\n    }\n\n    // -------------\n    // grid layout...\n    public static JPanel gridLayout(Component[][] o) {\n        int rows = o.length;\n        int cols = o[0].length;\n        JPanel p = new JPanel(new GridLayout(rows, cols));\n        for (int i = 0; i < rows; i++) for (int j = 0; j < cols; j++) p.add(o[i][j]);\n        return p;\n    }\n\n    public static JPanel gridLayout(Component[][] o, int hgap, int vgap) {\n        int rows = o.length;\n        int cols = o[0].length;\n        JPanel p = new JPanel(new GridLayout(rows, cols, hgap, vgap));\n        for (int i = 0; i < rows; i++) for (int j = 0; j < cols; j++) p.add(o[i][j]);\n        return p;\n    }\n}\n",
		"id": "/EvoSuiteBenchmark/35_corina/src/main/java/corina/gui/Layout_13Test.java",
		"test_prompt": "// Layout_13Test.java\npackage corina.gui;\n\nimport corina.gui.layouts.ButtonLayout;\nimport javax.swing.JPanel;\nimport javax.swing.Box;\nimport java.awt.Component;\nimport java.awt.BorderLayout;\nimport javax.swing.BoxLayout;\nimport java.awt.FlowLayout;\nimport javax.swing.JLabel;\nimport java.awt.GridLayout;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link Layout}.\n* It contains ten unit test cases for the {@link Layout#flowLayoutR(Object, Object)} method.\n*/\nclass Layout_13Test {"
	},
	{
		"original_code": "// Layout.java\npackage corina.gui;\n\nimport corina.gui.layouts.ButtonLayout;\nimport javax.swing.JPanel;\nimport javax.swing.Box;\nimport java.awt.Component;\nimport java.awt.BorderLayout;\nimport javax.swing.BoxLayout;\nimport java.awt.FlowLayout;\nimport javax.swing.JLabel;\nimport java.awt.GridLayout;\n\n// TODO: gpl header, javadoc!\n// a factory for easily creating panels of a given layout.\n// for example,\n// JPanel p = Layout.borderLayout(null,\n//                                null, content, null,\n//                                Layout.buttonLayout(cancel, ok));\n// TODO: if cancel comes before ok, and os=win32, swap them?\n// TODO: accept 1, 2, 3, ... (...5?) components directly (not in array)\n// WRITEME: i'd like to be able to put an integer in any slot for a strut, but i can't.\n// -- BETTER: class Strut(w,h) -- e.g., Layout.flowLayoutL(\"Value:\", Strut.w(4), myField);\n// TODO: i tend to need to use temp vars for the output of these methods,\n// simply to set custom borders on them.  i think going to an XML generator\n// might actually help with that.\n// FIXME: consolidate componentOrGlue(), componentOrString() -- it\n// should be pretty much the same inputs for any of these methods.\npublic class Layout {\n\n    // add a component, if non-null, or add some glue\n    private static Component componentOrGlue(Component c) {\n        return (c != null ? c : Box.createHorizontalGlue());\n    }\n\n    // --------\n    // button layout\n    public static JPanel buttonLayout(Component c1) {\n        JPanel p = new JPanel(new ButtonLayout());\n        p.add(componentOrGlue(c1));\n        return p;\n    }\n\n    public static JPanel buttonLayout(Component c1, Component c2) {\n        JPanel p = new JPanel(new ButtonLayout());\n        p.add(componentOrGlue(c1));\n        p.add(componentOrGlue(c2));\n        return p;\n    }\n\n    public static JPanel buttonLayout(Component c1, Component c2, Component c3) {\n        JPanel p = new JPanel(new ButtonLayout());\n        p.add(componentOrGlue(c1));\n        p.add(componentOrGlue(c2));\n        p.add(componentOrGlue(c3));\n        return p;\n    }\n\n    public static JPanel buttonLayout(Component c1, Component c2, Component c3, Component c4) {\n        JPanel p = new JPanel(new ButtonLayout());\n        p.add(componentOrGlue(c1));\n        p.add(componentOrGlue(c2));\n        p.add(componentOrGlue(c3));\n        p.add(componentOrGlue(c4));\n        return p;\n    }\n\n    public static JPanel buttonLayout(Component c1, Component c2, Component c3, Component c4, Component c5) {\n        JPanel p = new JPanel(new ButtonLayout());\n        p.add(componentOrGlue(c1));\n        p.add(componentOrGlue(c2));\n        p.add(componentOrGlue(c3));\n        p.add(componentOrGlue(c4));\n        p.add(componentOrGlue(c5));\n        return p;\n    }\n\n    // --------\n    // border layout is verbose, too.  let's see what we can do about that.\n    public static JPanel borderLayout(Component n, Component w, Component c, Component e, Component s) {\n        // is this default, anyway?\n        JPanel p = new JPanel(new BorderLayout());\n        if (n != null)\n            p.add(n, BorderLayout.NORTH);\n        if (w != null)\n            p.add(w, BorderLayout.WEST);\n        if (c != null)\n            p.add(c, BorderLayout.CENTER);\n        if (e != null)\n            p.add(e, BorderLayout.EAST);\n        if (s != null)\n            p.add(s, BorderLayout.SOUTH);\n        return p;\n    }\n\n    // --------\n    // box layout...\n    public static JPanel boxLayoutY(Component c1) {\n        JPanel p = new JPanel();\n        p.setLayout(new BoxLayout(p, BoxLayout.Y_AXIS));\n        p.add(c1);\n        return p;\n    }\n\n    public static JPanel boxLayoutY(Component c1, Component c2) {\n        JPanel p = new JPanel();\n        p.setLayout(new BoxLayout(p, BoxLayout.Y_AXIS));\n        p.add(c1);\n        p.add(c2);\n        return p;\n    }\n\n    public static JPanel boxLayoutY(Component c1, Component c2, Component c3) {\n        JPanel p = new JPanel();\n        p.setLayout(new BoxLayout(p, BoxLayout.Y_AXIS));\n        p.add(c1);\n        p.add(c2);\n        p.add(c3);\n        return p;\n    }\n\n    public static JPanel boxLayoutY(Component c1, Component c2, Component c3, Component c4) {\n        JPanel p = new JPanel();\n        p.setLayout(new BoxLayout(p, BoxLayout.Y_AXIS));\n        p.add(c1);\n        p.add(c2);\n        p.add(c3);\n        p.add(c4);\n        return p;\n    }\n\n    public static JPanel boxLayoutY(Component c1, Component c2, Component c3, Component c4, Component c5) {\n        JPanel p = new JPanel();\n        p.setLayout(new BoxLayout(p, BoxLayout.Y_AXIS));\n        p.add(c1);\n        p.add(c2);\n        p.add(c3);\n        p.add(c4);\n        p.add(c5);\n        return p;\n    }\n\n    // -------------\n    // flow layout...\n    public static JPanel flowLayoutL(Object o1) {\n        JPanel p = new JPanel(new FlowLayout(FlowLayout.LEFT));\n        p.add(componentOrString(o1));\n        return p;\n    }\n\n    public static JPanel flowLayoutL(Object o1, Object o2) {\n        JPanel p = new JPanel(new FlowLayout(FlowLayout.LEFT));\n        p.add(componentOrString(o1));\n        p.add(componentOrString(o2));\n        return p;\n    }\n\n    public static JPanel flowLayoutR(Object o1, Object o2) {\n        JPanel p = new JPanel(new FlowLayout(FlowLayout.RIGHT));\n        p.add(componentOrString(o1));\n        p.add(componentOrString(o2));\n        return p;\n    }\n\n    public static JPanel flowLayoutL(Object o1, Object o2, Object o3) {\n        JPanel p = new JPanel(new FlowLayout(FlowLayout.LEFT));\n        p.add(componentOrString(o1));\n        p.add(componentOrString(o2));\n        p.add(componentOrString(o3));\n        return p;\n    }\n\n    public static JPanel flowLayoutL(Object o1, Object o2, Object o3, Object o4) {\n        JPanel p = new JPanel(new FlowLayout(FlowLayout.LEFT));\n        p.add(componentOrString(o1));\n        p.add(componentOrString(o2));\n        p.add(componentOrString(o3));\n        p.add(componentOrString(o4));\n        return p;\n    }\n\n    public static JPanel flowLayoutL(Object o1, Object o2, Object o3, Object o4, Object o5) {\n        JPanel p = new JPanel(new FlowLayout(FlowLayout.LEFT));\n        p.add(componentOrString(o1));\n        p.add(componentOrString(o2));\n        p.add(componentOrString(o3));\n        p.add(componentOrString(o4));\n        p.add(componentOrString(o5));\n        return p;\n    }\n\n    public static JPanel flowLayoutL(Object o1, Object o2, Object o3, Object o4, Object o5, Object o6) {\n        JPanel p = new JPanel(new FlowLayout(FlowLayout.LEFT));\n        p.add(componentOrString(o1));\n        p.add(componentOrString(o2));\n        p.add(componentOrString(o3));\n        p.add(componentOrString(o4));\n        p.add(componentOrString(o5));\n        p.add(componentOrString(o6));\n        return p;\n    }\n\n    public static JPanel flowLayoutL(Object o1, Object o2, Object o3, Object o4, Object o5, Object o6, Object o7) {\n        JPanel p = new JPanel(new FlowLayout(FlowLayout.LEFT));\n        p.add(componentOrString(o1));\n        p.add(componentOrString(o2));\n        p.add(componentOrString(o3));\n        p.add(componentOrString(o4));\n        p.add(componentOrString(o5));\n        p.add(componentOrString(o6));\n        p.add(componentOrString(o7));\n        return p;\n    }\n\n    public static JPanel flowLayoutC(Object o1) {\n        JPanel p = new JPanel(new FlowLayout(FlowLayout.CENTER));\n        p.add(componentOrString(o1));\n        return p;\n    }\n\n    // FIXME: in ANY layout, a string should be made into a jlabel automatically.\n    private static Component componentOrString(Object o) {\n        return (o instanceof String ? new JLabel((String) o) : (Component) o);\n    }\n\n    // -------------\n    // grid layout...\n    public static JPanel gridLayout(Component[][] o) {\n        int rows = o.length;\n        int cols = o[0].length;\n        JPanel p = new JPanel(new GridLayout(rows, cols));\n        for (int i = 0; i < rows; i++) for (int j = 0; j < cols; j++) p.add(o[i][j]);\n        return p;\n    }\n\n    public static JPanel gridLayout(Component[][] o, int hgap, int vgap) {\n        int rows = o.length;\n        int cols = o[0].length;\n        JPanel p = new JPanel(new GridLayout(rows, cols, hgap, vgap));\n        for (int i = 0; i < rows; i++) for (int j = 0; j < cols; j++) p.add(o[i][j]);\n        return p;\n    }\n}\n",
		"id": "/EvoSuiteBenchmark/35_corina/src/main/java/corina/gui/Layout_14Test.java",
		"test_prompt": "// Layout_14Test.java\npackage corina.gui;\n\nimport corina.gui.layouts.ButtonLayout;\nimport javax.swing.JPanel;\nimport javax.swing.Box;\nimport java.awt.Component;\nimport java.awt.BorderLayout;\nimport javax.swing.BoxLayout;\nimport java.awt.FlowLayout;\nimport javax.swing.JLabel;\nimport java.awt.GridLayout;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link Layout}.\n* It contains ten unit test cases for the {@link Layout#flowLayoutL(Object, Object, Object)} method.\n*/\nclass Layout_14Test {"
	},
	{
		"original_code": "// Layout.java\npackage corina.gui;\n\nimport corina.gui.layouts.ButtonLayout;\nimport javax.swing.JPanel;\nimport javax.swing.Box;\nimport java.awt.Component;\nimport java.awt.BorderLayout;\nimport javax.swing.BoxLayout;\nimport java.awt.FlowLayout;\nimport javax.swing.JLabel;\nimport java.awt.GridLayout;\n\n// TODO: gpl header, javadoc!\n// a factory for easily creating panels of a given layout.\n// for example,\n// JPanel p = Layout.borderLayout(null,\n//                                null, content, null,\n//                                Layout.buttonLayout(cancel, ok));\n// TODO: if cancel comes before ok, and os=win32, swap them?\n// TODO: accept 1, 2, 3, ... (...5?) components directly (not in array)\n// WRITEME: i'd like to be able to put an integer in any slot for a strut, but i can't.\n// -- BETTER: class Strut(w,h) -- e.g., Layout.flowLayoutL(\"Value:\", Strut.w(4), myField);\n// TODO: i tend to need to use temp vars for the output of these methods,\n// simply to set custom borders on them.  i think going to an XML generator\n// might actually help with that.\n// FIXME: consolidate componentOrGlue(), componentOrString() -- it\n// should be pretty much the same inputs for any of these methods.\npublic class Layout {\n\n    // add a component, if non-null, or add some glue\n    private static Component componentOrGlue(Component c) {\n        return (c != null ? c : Box.createHorizontalGlue());\n    }\n\n    // --------\n    // button layout\n    public static JPanel buttonLayout(Component c1) {\n        JPanel p = new JPanel(new ButtonLayout());\n        p.add(componentOrGlue(c1));\n        return p;\n    }\n\n    public static JPanel buttonLayout(Component c1, Component c2) {\n        JPanel p = new JPanel(new ButtonLayout());\n        p.add(componentOrGlue(c1));\n        p.add(componentOrGlue(c2));\n        return p;\n    }\n\n    public static JPanel buttonLayout(Component c1, Component c2, Component c3) {\n        JPanel p = new JPanel(new ButtonLayout());\n        p.add(componentOrGlue(c1));\n        p.add(componentOrGlue(c2));\n        p.add(componentOrGlue(c3));\n        return p;\n    }\n\n    public static JPanel buttonLayout(Component c1, Component c2, Component c3, Component c4) {\n        JPanel p = new JPanel(new ButtonLayout());\n        p.add(componentOrGlue(c1));\n        p.add(componentOrGlue(c2));\n        p.add(componentOrGlue(c3));\n        p.add(componentOrGlue(c4));\n        return p;\n    }\n\n    public static JPanel buttonLayout(Component c1, Component c2, Component c3, Component c4, Component c5) {\n        JPanel p = new JPanel(new ButtonLayout());\n        p.add(componentOrGlue(c1));\n        p.add(componentOrGlue(c2));\n        p.add(componentOrGlue(c3));\n        p.add(componentOrGlue(c4));\n        p.add(componentOrGlue(c5));\n        return p;\n    }\n\n    // --------\n    // border layout is verbose, too.  let's see what we can do about that.\n    public static JPanel borderLayout(Component n, Component w, Component c, Component e, Component s) {\n        // is this default, anyway?\n        JPanel p = new JPanel(new BorderLayout());\n        if (n != null)\n            p.add(n, BorderLayout.NORTH);\n        if (w != null)\n            p.add(w, BorderLayout.WEST);\n        if (c != null)\n            p.add(c, BorderLayout.CENTER);\n        if (e != null)\n            p.add(e, BorderLayout.EAST);\n        if (s != null)\n            p.add(s, BorderLayout.SOUTH);\n        return p;\n    }\n\n    // --------\n    // box layout...\n    public static JPanel boxLayoutY(Component c1) {\n        JPanel p = new JPanel();\n        p.setLayout(new BoxLayout(p, BoxLayout.Y_AXIS));\n        p.add(c1);\n        return p;\n    }\n\n    public static JPanel boxLayoutY(Component c1, Component c2) {\n        JPanel p = new JPanel();\n        p.setLayout(new BoxLayout(p, BoxLayout.Y_AXIS));\n        p.add(c1);\n        p.add(c2);\n        return p;\n    }\n\n    public static JPanel boxLayoutY(Component c1, Component c2, Component c3) {\n        JPanel p = new JPanel();\n        p.setLayout(new BoxLayout(p, BoxLayout.Y_AXIS));\n        p.add(c1);\n        p.add(c2);\n        p.add(c3);\n        return p;\n    }\n\n    public static JPanel boxLayoutY(Component c1, Component c2, Component c3, Component c4) {\n        JPanel p = new JPanel();\n        p.setLayout(new BoxLayout(p, BoxLayout.Y_AXIS));\n        p.add(c1);\n        p.add(c2);\n        p.add(c3);\n        p.add(c4);\n        return p;\n    }\n\n    public static JPanel boxLayoutY(Component c1, Component c2, Component c3, Component c4, Component c5) {\n        JPanel p = new JPanel();\n        p.setLayout(new BoxLayout(p, BoxLayout.Y_AXIS));\n        p.add(c1);\n        p.add(c2);\n        p.add(c3);\n        p.add(c4);\n        p.add(c5);\n        return p;\n    }\n\n    // -------------\n    // flow layout...\n    public static JPanel flowLayoutL(Object o1) {\n        JPanel p = new JPanel(new FlowLayout(FlowLayout.LEFT));\n        p.add(componentOrString(o1));\n        return p;\n    }\n\n    public static JPanel flowLayoutL(Object o1, Object o2) {\n        JPanel p = new JPanel(new FlowLayout(FlowLayout.LEFT));\n        p.add(componentOrString(o1));\n        p.add(componentOrString(o2));\n        return p;\n    }\n\n    public static JPanel flowLayoutR(Object o1, Object o2) {\n        JPanel p = new JPanel(new FlowLayout(FlowLayout.RIGHT));\n        p.add(componentOrString(o1));\n        p.add(componentOrString(o2));\n        return p;\n    }\n\n    public static JPanel flowLayoutL(Object o1, Object o2, Object o3) {\n        JPanel p = new JPanel(new FlowLayout(FlowLayout.LEFT));\n        p.add(componentOrString(o1));\n        p.add(componentOrString(o2));\n        p.add(componentOrString(o3));\n        return p;\n    }\n\n    public static JPanel flowLayoutL(Object o1, Object o2, Object o3, Object o4) {\n        JPanel p = new JPanel(new FlowLayout(FlowLayout.LEFT));\n        p.add(componentOrString(o1));\n        p.add(componentOrString(o2));\n        p.add(componentOrString(o3));\n        p.add(componentOrString(o4));\n        return p;\n    }\n\n    public static JPanel flowLayoutL(Object o1, Object o2, Object o3, Object o4, Object o5) {\n        JPanel p = new JPanel(new FlowLayout(FlowLayout.LEFT));\n        p.add(componentOrString(o1));\n        p.add(componentOrString(o2));\n        p.add(componentOrString(o3));\n        p.add(componentOrString(o4));\n        p.add(componentOrString(o5));\n        return p;\n    }\n\n    public static JPanel flowLayoutL(Object o1, Object o2, Object o3, Object o4, Object o5, Object o6) {\n        JPanel p = new JPanel(new FlowLayout(FlowLayout.LEFT));\n        p.add(componentOrString(o1));\n        p.add(componentOrString(o2));\n        p.add(componentOrString(o3));\n        p.add(componentOrString(o4));\n        p.add(componentOrString(o5));\n        p.add(componentOrString(o6));\n        return p;\n    }\n\n    public static JPanel flowLayoutL(Object o1, Object o2, Object o3, Object o4, Object o5, Object o6, Object o7) {\n        JPanel p = new JPanel(new FlowLayout(FlowLayout.LEFT));\n        p.add(componentOrString(o1));\n        p.add(componentOrString(o2));\n        p.add(componentOrString(o3));\n        p.add(componentOrString(o4));\n        p.add(componentOrString(o5));\n        p.add(componentOrString(o6));\n        p.add(componentOrString(o7));\n        return p;\n    }\n\n    public static JPanel flowLayoutC(Object o1) {\n        JPanel p = new JPanel(new FlowLayout(FlowLayout.CENTER));\n        p.add(componentOrString(o1));\n        return p;\n    }\n\n    // FIXME: in ANY layout, a string should be made into a jlabel automatically.\n    private static Component componentOrString(Object o) {\n        return (o instanceof String ? new JLabel((String) o) : (Component) o);\n    }\n\n    // -------------\n    // grid layout...\n    public static JPanel gridLayout(Component[][] o) {\n        int rows = o.length;\n        int cols = o[0].length;\n        JPanel p = new JPanel(new GridLayout(rows, cols));\n        for (int i = 0; i < rows; i++) for (int j = 0; j < cols; j++) p.add(o[i][j]);\n        return p;\n    }\n\n    public static JPanel gridLayout(Component[][] o, int hgap, int vgap) {\n        int rows = o.length;\n        int cols = o[0].length;\n        JPanel p = new JPanel(new GridLayout(rows, cols, hgap, vgap));\n        for (int i = 0; i < rows; i++) for (int j = 0; j < cols; j++) p.add(o[i][j]);\n        return p;\n    }\n}\n",
		"id": "/EvoSuiteBenchmark/35_corina/src/main/java/corina/gui/Layout_15Test.java",
		"test_prompt": "// Layout_15Test.java\npackage corina.gui;\n\nimport corina.gui.layouts.ButtonLayout;\nimport javax.swing.JPanel;\nimport javax.swing.Box;\nimport java.awt.Component;\nimport java.awt.BorderLayout;\nimport javax.swing.BoxLayout;\nimport java.awt.FlowLayout;\nimport javax.swing.JLabel;\nimport java.awt.GridLayout;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link Layout}.\n* It contains ten unit test cases for the {@link Layout#flowLayoutL(Object, Object, Object, Object)} method.\n*/\nclass Layout_15Test {"
	},
	{
		"original_code": "// Layout.java\npackage corina.gui;\n\nimport corina.gui.layouts.ButtonLayout;\nimport javax.swing.JPanel;\nimport javax.swing.Box;\nimport java.awt.Component;\nimport java.awt.BorderLayout;\nimport javax.swing.BoxLayout;\nimport java.awt.FlowLayout;\nimport javax.swing.JLabel;\nimport java.awt.GridLayout;\n\n// TODO: gpl header, javadoc!\n// a factory for easily creating panels of a given layout.\n// for example,\n// JPanel p = Layout.borderLayout(null,\n//                                null, content, null,\n//                                Layout.buttonLayout(cancel, ok));\n// TODO: if cancel comes before ok, and os=win32, swap them?\n// TODO: accept 1, 2, 3, ... (...5?) components directly (not in array)\n// WRITEME: i'd like to be able to put an integer in any slot for a strut, but i can't.\n// -- BETTER: class Strut(w,h) -- e.g., Layout.flowLayoutL(\"Value:\", Strut.w(4), myField);\n// TODO: i tend to need to use temp vars for the output of these methods,\n// simply to set custom borders on them.  i think going to an XML generator\n// might actually help with that.\n// FIXME: consolidate componentOrGlue(), componentOrString() -- it\n// should be pretty much the same inputs for any of these methods.\npublic class Layout {\n\n    // add a component, if non-null, or add some glue\n    private static Component componentOrGlue(Component c) {\n        return (c != null ? c : Box.createHorizontalGlue());\n    }\n\n    // --------\n    // button layout\n    public static JPanel buttonLayout(Component c1) {\n        JPanel p = new JPanel(new ButtonLayout());\n        p.add(componentOrGlue(c1));\n        return p;\n    }\n\n    public static JPanel buttonLayout(Component c1, Component c2) {\n        JPanel p = new JPanel(new ButtonLayout());\n        p.add(componentOrGlue(c1));\n        p.add(componentOrGlue(c2));\n        return p;\n    }\n\n    public static JPanel buttonLayout(Component c1, Component c2, Component c3) {\n        JPanel p = new JPanel(new ButtonLayout());\n        p.add(componentOrGlue(c1));\n        p.add(componentOrGlue(c2));\n        p.add(componentOrGlue(c3));\n        return p;\n    }\n\n    public static JPanel buttonLayout(Component c1, Component c2, Component c3, Component c4) {\n        JPanel p = new JPanel(new ButtonLayout());\n        p.add(componentOrGlue(c1));\n        p.add(componentOrGlue(c2));\n        p.add(componentOrGlue(c3));\n        p.add(componentOrGlue(c4));\n        return p;\n    }\n\n    public static JPanel buttonLayout(Component c1, Component c2, Component c3, Component c4, Component c5) {\n        JPanel p = new JPanel(new ButtonLayout());\n        p.add(componentOrGlue(c1));\n        p.add(componentOrGlue(c2));\n        p.add(componentOrGlue(c3));\n        p.add(componentOrGlue(c4));\n        p.add(componentOrGlue(c5));\n        return p;\n    }\n\n    // --------\n    // border layout is verbose, too.  let's see what we can do about that.\n    public static JPanel borderLayout(Component n, Component w, Component c, Component e, Component s) {\n        // is this default, anyway?\n        JPanel p = new JPanel(new BorderLayout());\n        if (n != null)\n            p.add(n, BorderLayout.NORTH);\n        if (w != null)\n            p.add(w, BorderLayout.WEST);\n        if (c != null)\n            p.add(c, BorderLayout.CENTER);\n        if (e != null)\n            p.add(e, BorderLayout.EAST);\n        if (s != null)\n            p.add(s, BorderLayout.SOUTH);\n        return p;\n    }\n\n    // --------\n    // box layout...\n    public static JPanel boxLayoutY(Component c1) {\n        JPanel p = new JPanel();\n        p.setLayout(new BoxLayout(p, BoxLayout.Y_AXIS));\n        p.add(c1);\n        return p;\n    }\n\n    public static JPanel boxLayoutY(Component c1, Component c2) {\n        JPanel p = new JPanel();\n        p.setLayout(new BoxLayout(p, BoxLayout.Y_AXIS));\n        p.add(c1);\n        p.add(c2);\n        return p;\n    }\n\n    public static JPanel boxLayoutY(Component c1, Component c2, Component c3) {\n        JPanel p = new JPanel();\n        p.setLayout(new BoxLayout(p, BoxLayout.Y_AXIS));\n        p.add(c1);\n        p.add(c2);\n        p.add(c3);\n        return p;\n    }\n\n    public static JPanel boxLayoutY(Component c1, Component c2, Component c3, Component c4) {\n        JPanel p = new JPanel();\n        p.setLayout(new BoxLayout(p, BoxLayout.Y_AXIS));\n        p.add(c1);\n        p.add(c2);\n        p.add(c3);\n        p.add(c4);\n        return p;\n    }\n\n    public static JPanel boxLayoutY(Component c1, Component c2, Component c3, Component c4, Component c5) {\n        JPanel p = new JPanel();\n        p.setLayout(new BoxLayout(p, BoxLayout.Y_AXIS));\n        p.add(c1);\n        p.add(c2);\n        p.add(c3);\n        p.add(c4);\n        p.add(c5);\n        return p;\n    }\n\n    // -------------\n    // flow layout...\n    public static JPanel flowLayoutL(Object o1) {\n        JPanel p = new JPanel(new FlowLayout(FlowLayout.LEFT));\n        p.add(componentOrString(o1));\n        return p;\n    }\n\n    public static JPanel flowLayoutL(Object o1, Object o2) {\n        JPanel p = new JPanel(new FlowLayout(FlowLayout.LEFT));\n        p.add(componentOrString(o1));\n        p.add(componentOrString(o2));\n        return p;\n    }\n\n    public static JPanel flowLayoutR(Object o1, Object o2) {\n        JPanel p = new JPanel(new FlowLayout(FlowLayout.RIGHT));\n        p.add(componentOrString(o1));\n        p.add(componentOrString(o2));\n        return p;\n    }\n\n    public static JPanel flowLayoutL(Object o1, Object o2, Object o3) {\n        JPanel p = new JPanel(new FlowLayout(FlowLayout.LEFT));\n        p.add(componentOrString(o1));\n        p.add(componentOrString(o2));\n        p.add(componentOrString(o3));\n        return p;\n    }\n\n    public static JPanel flowLayoutL(Object o1, Object o2, Object o3, Object o4) {\n        JPanel p = new JPanel(new FlowLayout(FlowLayout.LEFT));\n        p.add(componentOrString(o1));\n        p.add(componentOrString(o2));\n        p.add(componentOrString(o3));\n        p.add(componentOrString(o4));\n        return p;\n    }\n\n    public static JPanel flowLayoutL(Object o1, Object o2, Object o3, Object o4, Object o5) {\n        JPanel p = new JPanel(new FlowLayout(FlowLayout.LEFT));\n        p.add(componentOrString(o1));\n        p.add(componentOrString(o2));\n        p.add(componentOrString(o3));\n        p.add(componentOrString(o4));\n        p.add(componentOrString(o5));\n        return p;\n    }\n\n    public static JPanel flowLayoutL(Object o1, Object o2, Object o3, Object o4, Object o5, Object o6) {\n        JPanel p = new JPanel(new FlowLayout(FlowLayout.LEFT));\n        p.add(componentOrString(o1));\n        p.add(componentOrString(o2));\n        p.add(componentOrString(o3));\n        p.add(componentOrString(o4));\n        p.add(componentOrString(o5));\n        p.add(componentOrString(o6));\n        return p;\n    }\n\n    public static JPanel flowLayoutL(Object o1, Object o2, Object o3, Object o4, Object o5, Object o6, Object o7) {\n        JPanel p = new JPanel(new FlowLayout(FlowLayout.LEFT));\n        p.add(componentOrString(o1));\n        p.add(componentOrString(o2));\n        p.add(componentOrString(o3));\n        p.add(componentOrString(o4));\n        p.add(componentOrString(o5));\n        p.add(componentOrString(o6));\n        p.add(componentOrString(o7));\n        return p;\n    }\n\n    public static JPanel flowLayoutC(Object o1) {\n        JPanel p = new JPanel(new FlowLayout(FlowLayout.CENTER));\n        p.add(componentOrString(o1));\n        return p;\n    }\n\n    // FIXME: in ANY layout, a string should be made into a jlabel automatically.\n    private static Component componentOrString(Object o) {\n        return (o instanceof String ? new JLabel((String) o) : (Component) o);\n    }\n\n    // -------------\n    // grid layout...\n    public static JPanel gridLayout(Component[][] o) {\n        int rows = o.length;\n        int cols = o[0].length;\n        JPanel p = new JPanel(new GridLayout(rows, cols));\n        for (int i = 0; i < rows; i++) for (int j = 0; j < cols; j++) p.add(o[i][j]);\n        return p;\n    }\n\n    public static JPanel gridLayout(Component[][] o, int hgap, int vgap) {\n        int rows = o.length;\n        int cols = o[0].length;\n        JPanel p = new JPanel(new GridLayout(rows, cols, hgap, vgap));\n        for (int i = 0; i < rows; i++) for (int j = 0; j < cols; j++) p.add(o[i][j]);\n        return p;\n    }\n}\n",
		"id": "/EvoSuiteBenchmark/35_corina/src/main/java/corina/gui/Layout_16Test.java",
		"test_prompt": "// Layout_16Test.java\npackage corina.gui;\n\nimport corina.gui.layouts.ButtonLayout;\nimport javax.swing.JPanel;\nimport javax.swing.Box;\nimport java.awt.Component;\nimport java.awt.BorderLayout;\nimport javax.swing.BoxLayout;\nimport java.awt.FlowLayout;\nimport javax.swing.JLabel;\nimport java.awt.GridLayout;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link Layout}.\n* It contains ten unit test cases for the {@link Layout#flowLayoutL(Object, Object, Object, Object, Object)} method.\n*/\nclass Layout_16Test {"
	},
	{
		"original_code": "// Layout.java\npackage corina.gui;\n\nimport corina.gui.layouts.ButtonLayout;\nimport javax.swing.JPanel;\nimport javax.swing.Box;\nimport java.awt.Component;\nimport java.awt.BorderLayout;\nimport javax.swing.BoxLayout;\nimport java.awt.FlowLayout;\nimport javax.swing.JLabel;\nimport java.awt.GridLayout;\n\n// TODO: gpl header, javadoc!\n// a factory for easily creating panels of a given layout.\n// for example,\n// JPanel p = Layout.borderLayout(null,\n//                                null, content, null,\n//                                Layout.buttonLayout(cancel, ok));\n// TODO: if cancel comes before ok, and os=win32, swap them?\n// TODO: accept 1, 2, 3, ... (...5?) components directly (not in array)\n// WRITEME: i'd like to be able to put an integer in any slot for a strut, but i can't.\n// -- BETTER: class Strut(w,h) -- e.g., Layout.flowLayoutL(\"Value:\", Strut.w(4), myField);\n// TODO: i tend to need to use temp vars for the output of these methods,\n// simply to set custom borders on them.  i think going to an XML generator\n// might actually help with that.\n// FIXME: consolidate componentOrGlue(), componentOrString() -- it\n// should be pretty much the same inputs for any of these methods.\npublic class Layout {\n\n    // add a component, if non-null, or add some glue\n    private static Component componentOrGlue(Component c) {\n        return (c != null ? c : Box.createHorizontalGlue());\n    }\n\n    // --------\n    // button layout\n    public static JPanel buttonLayout(Component c1) {\n        JPanel p = new JPanel(new ButtonLayout());\n        p.add(componentOrGlue(c1));\n        return p;\n    }\n\n    public static JPanel buttonLayout(Component c1, Component c2) {\n        JPanel p = new JPanel(new ButtonLayout());\n        p.add(componentOrGlue(c1));\n        p.add(componentOrGlue(c2));\n        return p;\n    }\n\n    public static JPanel buttonLayout(Component c1, Component c2, Component c3) {\n        JPanel p = new JPanel(new ButtonLayout());\n        p.add(componentOrGlue(c1));\n        p.add(componentOrGlue(c2));\n        p.add(componentOrGlue(c3));\n        return p;\n    }\n\n    public static JPanel buttonLayout(Component c1, Component c2, Component c3, Component c4) {\n        JPanel p = new JPanel(new ButtonLayout());\n        p.add(componentOrGlue(c1));\n        p.add(componentOrGlue(c2));\n        p.add(componentOrGlue(c3));\n        p.add(componentOrGlue(c4));\n        return p;\n    }\n\n    public static JPanel buttonLayout(Component c1, Component c2, Component c3, Component c4, Component c5) {\n        JPanel p = new JPanel(new ButtonLayout());\n        p.add(componentOrGlue(c1));\n        p.add(componentOrGlue(c2));\n        p.add(componentOrGlue(c3));\n        p.add(componentOrGlue(c4));\n        p.add(componentOrGlue(c5));\n        return p;\n    }\n\n    // --------\n    // border layout is verbose, too.  let's see what we can do about that.\n    public static JPanel borderLayout(Component n, Component w, Component c, Component e, Component s) {\n        // is this default, anyway?\n        JPanel p = new JPanel(new BorderLayout());\n        if (n != null)\n            p.add(n, BorderLayout.NORTH);\n        if (w != null)\n            p.add(w, BorderLayout.WEST);\n        if (c != null)\n            p.add(c, BorderLayout.CENTER);\n        if (e != null)\n            p.add(e, BorderLayout.EAST);\n        if (s != null)\n            p.add(s, BorderLayout.SOUTH);\n        return p;\n    }\n\n    // --------\n    // box layout...\n    public static JPanel boxLayoutY(Component c1) {\n        JPanel p = new JPanel();\n        p.setLayout(new BoxLayout(p, BoxLayout.Y_AXIS));\n        p.add(c1);\n        return p;\n    }\n\n    public static JPanel boxLayoutY(Component c1, Component c2) {\n        JPanel p = new JPanel();\n        p.setLayout(new BoxLayout(p, BoxLayout.Y_AXIS));\n        p.add(c1);\n        p.add(c2);\n        return p;\n    }\n\n    public static JPanel boxLayoutY(Component c1, Component c2, Component c3) {\n        JPanel p = new JPanel();\n        p.setLayout(new BoxLayout(p, BoxLayout.Y_AXIS));\n        p.add(c1);\n        p.add(c2);\n        p.add(c3);\n        return p;\n    }\n\n    public static JPanel boxLayoutY(Component c1, Component c2, Component c3, Component c4) {\n        JPanel p = new JPanel();\n        p.setLayout(new BoxLayout(p, BoxLayout.Y_AXIS));\n        p.add(c1);\n        p.add(c2);\n        p.add(c3);\n        p.add(c4);\n        return p;\n    }\n\n    public static JPanel boxLayoutY(Component c1, Component c2, Component c3, Component c4, Component c5) {\n        JPanel p = new JPanel();\n        p.setLayout(new BoxLayout(p, BoxLayout.Y_AXIS));\n        p.add(c1);\n        p.add(c2);\n        p.add(c3);\n        p.add(c4);\n        p.add(c5);\n        return p;\n    }\n\n    // -------------\n    // flow layout...\n    public static JPanel flowLayoutL(Object o1) {\n        JPanel p = new JPanel(new FlowLayout(FlowLayout.LEFT));\n        p.add(componentOrString(o1));\n        return p;\n    }\n\n    public static JPanel flowLayoutL(Object o1, Object o2) {\n        JPanel p = new JPanel(new FlowLayout(FlowLayout.LEFT));\n        p.add(componentOrString(o1));\n        p.add(componentOrString(o2));\n        return p;\n    }\n\n    public static JPanel flowLayoutR(Object o1, Object o2) {\n        JPanel p = new JPanel(new FlowLayout(FlowLayout.RIGHT));\n        p.add(componentOrString(o1));\n        p.add(componentOrString(o2));\n        return p;\n    }\n\n    public static JPanel flowLayoutL(Object o1, Object o2, Object o3) {\n        JPanel p = new JPanel(new FlowLayout(FlowLayout.LEFT));\n        p.add(componentOrString(o1));\n        p.add(componentOrString(o2));\n        p.add(componentOrString(o3));\n        return p;\n    }\n\n    public static JPanel flowLayoutL(Object o1, Object o2, Object o3, Object o4) {\n        JPanel p = new JPanel(new FlowLayout(FlowLayout.LEFT));\n        p.add(componentOrString(o1));\n        p.add(componentOrString(o2));\n        p.add(componentOrString(o3));\n        p.add(componentOrString(o4));\n        return p;\n    }\n\n    public static JPanel flowLayoutL(Object o1, Object o2, Object o3, Object o4, Object o5) {\n        JPanel p = new JPanel(new FlowLayout(FlowLayout.LEFT));\n        p.add(componentOrString(o1));\n        p.add(componentOrString(o2));\n        p.add(componentOrString(o3));\n        p.add(componentOrString(o4));\n        p.add(componentOrString(o5));\n        return p;\n    }\n\n    public static JPanel flowLayoutL(Object o1, Object o2, Object o3, Object o4, Object o5, Object o6) {\n        JPanel p = new JPanel(new FlowLayout(FlowLayout.LEFT));\n        p.add(componentOrString(o1));\n        p.add(componentOrString(o2));\n        p.add(componentOrString(o3));\n        p.add(componentOrString(o4));\n        p.add(componentOrString(o5));\n        p.add(componentOrString(o6));\n        return p;\n    }\n\n    public static JPanel flowLayoutL(Object o1, Object o2, Object o3, Object o4, Object o5, Object o6, Object o7) {\n        JPanel p = new JPanel(new FlowLayout(FlowLayout.LEFT));\n        p.add(componentOrString(o1));\n        p.add(componentOrString(o2));\n        p.add(componentOrString(o3));\n        p.add(componentOrString(o4));\n        p.add(componentOrString(o5));\n        p.add(componentOrString(o6));\n        p.add(componentOrString(o7));\n        return p;\n    }\n\n    public static JPanel flowLayoutC(Object o1) {\n        JPanel p = new JPanel(new FlowLayout(FlowLayout.CENTER));\n        p.add(componentOrString(o1));\n        return p;\n    }\n\n    // FIXME: in ANY layout, a string should be made into a jlabel automatically.\n    private static Component componentOrString(Object o) {\n        return (o instanceof String ? new JLabel((String) o) : (Component) o);\n    }\n\n    // -------------\n    // grid layout...\n    public static JPanel gridLayout(Component[][] o) {\n        int rows = o.length;\n        int cols = o[0].length;\n        JPanel p = new JPanel(new GridLayout(rows, cols));\n        for (int i = 0; i < rows; i++) for (int j = 0; j < cols; j++) p.add(o[i][j]);\n        return p;\n    }\n\n    public static JPanel gridLayout(Component[][] o, int hgap, int vgap) {\n        int rows = o.length;\n        int cols = o[0].length;\n        JPanel p = new JPanel(new GridLayout(rows, cols, hgap, vgap));\n        for (int i = 0; i < rows; i++) for (int j = 0; j < cols; j++) p.add(o[i][j]);\n        return p;\n    }\n}\n",
		"id": "/EvoSuiteBenchmark/35_corina/src/main/java/corina/gui/Layout_17Test.java",
		"test_prompt": "// Layout_17Test.java\npackage corina.gui;\n\nimport corina.gui.layouts.ButtonLayout;\nimport javax.swing.JPanel;\nimport javax.swing.Box;\nimport java.awt.Component;\nimport java.awt.BorderLayout;\nimport javax.swing.BoxLayout;\nimport java.awt.FlowLayout;\nimport javax.swing.JLabel;\nimport java.awt.GridLayout;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link Layout}.\n* It contains ten unit test cases for the {@link Layout#flowLayoutL(Object, Object, Object, Object, Object, Object)} method.\n*/\nclass Layout_17Test {"
	},
	{
		"original_code": "// Layout.java\npackage corina.gui;\n\nimport corina.gui.layouts.ButtonLayout;\nimport javax.swing.JPanel;\nimport javax.swing.Box;\nimport java.awt.Component;\nimport java.awt.BorderLayout;\nimport javax.swing.BoxLayout;\nimport java.awt.FlowLayout;\nimport javax.swing.JLabel;\nimport java.awt.GridLayout;\n\n// TODO: gpl header, javadoc!\n// a factory for easily creating panels of a given layout.\n// for example,\n// JPanel p = Layout.borderLayout(null,\n//                                null, content, null,\n//                                Layout.buttonLayout(cancel, ok));\n// TODO: if cancel comes before ok, and os=win32, swap them?\n// TODO: accept 1, 2, 3, ... (...5?) components directly (not in array)\n// WRITEME: i'd like to be able to put an integer in any slot for a strut, but i can't.\n// -- BETTER: class Strut(w,h) -- e.g., Layout.flowLayoutL(\"Value:\", Strut.w(4), myField);\n// TODO: i tend to need to use temp vars for the output of these methods,\n// simply to set custom borders on them.  i think going to an XML generator\n// might actually help with that.\n// FIXME: consolidate componentOrGlue(), componentOrString() -- it\n// should be pretty much the same inputs for any of these methods.\npublic class Layout {\n\n    // add a component, if non-null, or add some glue\n    private static Component componentOrGlue(Component c) {\n        return (c != null ? c : Box.createHorizontalGlue());\n    }\n\n    // --------\n    // button layout\n    public static JPanel buttonLayout(Component c1) {\n        JPanel p = new JPanel(new ButtonLayout());\n        p.add(componentOrGlue(c1));\n        return p;\n    }\n\n    public static JPanel buttonLayout(Component c1, Component c2) {\n        JPanel p = new JPanel(new ButtonLayout());\n        p.add(componentOrGlue(c1));\n        p.add(componentOrGlue(c2));\n        return p;\n    }\n\n    public static JPanel buttonLayout(Component c1, Component c2, Component c3) {\n        JPanel p = new JPanel(new ButtonLayout());\n        p.add(componentOrGlue(c1));\n        p.add(componentOrGlue(c2));\n        p.add(componentOrGlue(c3));\n        return p;\n    }\n\n    public static JPanel buttonLayout(Component c1, Component c2, Component c3, Component c4) {\n        JPanel p = new JPanel(new ButtonLayout());\n        p.add(componentOrGlue(c1));\n        p.add(componentOrGlue(c2));\n        p.add(componentOrGlue(c3));\n        p.add(componentOrGlue(c4));\n        return p;\n    }\n\n    public static JPanel buttonLayout(Component c1, Component c2, Component c3, Component c4, Component c5) {\n        JPanel p = new JPanel(new ButtonLayout());\n        p.add(componentOrGlue(c1));\n        p.add(componentOrGlue(c2));\n        p.add(componentOrGlue(c3));\n        p.add(componentOrGlue(c4));\n        p.add(componentOrGlue(c5));\n        return p;\n    }\n\n    // --------\n    // border layout is verbose, too.  let's see what we can do about that.\n    public static JPanel borderLayout(Component n, Component w, Component c, Component e, Component s) {\n        // is this default, anyway?\n        JPanel p = new JPanel(new BorderLayout());\n        if (n != null)\n            p.add(n, BorderLayout.NORTH);\n        if (w != null)\n            p.add(w, BorderLayout.WEST);\n        if (c != null)\n            p.add(c, BorderLayout.CENTER);\n        if (e != null)\n            p.add(e, BorderLayout.EAST);\n        if (s != null)\n            p.add(s, BorderLayout.SOUTH);\n        return p;\n    }\n\n    // --------\n    // box layout...\n    public static JPanel boxLayoutY(Component c1) {\n        JPanel p = new JPanel();\n        p.setLayout(new BoxLayout(p, BoxLayout.Y_AXIS));\n        p.add(c1);\n        return p;\n    }\n\n    public static JPanel boxLayoutY(Component c1, Component c2) {\n        JPanel p = new JPanel();\n        p.setLayout(new BoxLayout(p, BoxLayout.Y_AXIS));\n        p.add(c1);\n        p.add(c2);\n        return p;\n    }\n\n    public static JPanel boxLayoutY(Component c1, Component c2, Component c3) {\n        JPanel p = new JPanel();\n        p.setLayout(new BoxLayout(p, BoxLayout.Y_AXIS));\n        p.add(c1);\n        p.add(c2);\n        p.add(c3);\n        return p;\n    }\n\n    public static JPanel boxLayoutY(Component c1, Component c2, Component c3, Component c4) {\n        JPanel p = new JPanel();\n        p.setLayout(new BoxLayout(p, BoxLayout.Y_AXIS));\n        p.add(c1);\n        p.add(c2);\n        p.add(c3);\n        p.add(c4);\n        return p;\n    }\n\n    public static JPanel boxLayoutY(Component c1, Component c2, Component c3, Component c4, Component c5) {\n        JPanel p = new JPanel();\n        p.setLayout(new BoxLayout(p, BoxLayout.Y_AXIS));\n        p.add(c1);\n        p.add(c2);\n        p.add(c3);\n        p.add(c4);\n        p.add(c5);\n        return p;\n    }\n\n    // -------------\n    // flow layout...\n    public static JPanel flowLayoutL(Object o1) {\n        JPanel p = new JPanel(new FlowLayout(FlowLayout.LEFT));\n        p.add(componentOrString(o1));\n        return p;\n    }\n\n    public static JPanel flowLayoutL(Object o1, Object o2) {\n        JPanel p = new JPanel(new FlowLayout(FlowLayout.LEFT));\n        p.add(componentOrString(o1));\n        p.add(componentOrString(o2));\n        return p;\n    }\n\n    public static JPanel flowLayoutR(Object o1, Object o2) {\n        JPanel p = new JPanel(new FlowLayout(FlowLayout.RIGHT));\n        p.add(componentOrString(o1));\n        p.add(componentOrString(o2));\n        return p;\n    }\n\n    public static JPanel flowLayoutL(Object o1, Object o2, Object o3) {\n        JPanel p = new JPanel(new FlowLayout(FlowLayout.LEFT));\n        p.add(componentOrString(o1));\n        p.add(componentOrString(o2));\n        p.add(componentOrString(o3));\n        return p;\n    }\n\n    public static JPanel flowLayoutL(Object o1, Object o2, Object o3, Object o4) {\n        JPanel p = new JPanel(new FlowLayout(FlowLayout.LEFT));\n        p.add(componentOrString(o1));\n        p.add(componentOrString(o2));\n        p.add(componentOrString(o3));\n        p.add(componentOrString(o4));\n        return p;\n    }\n\n    public static JPanel flowLayoutL(Object o1, Object o2, Object o3, Object o4, Object o5) {\n        JPanel p = new JPanel(new FlowLayout(FlowLayout.LEFT));\n        p.add(componentOrString(o1));\n        p.add(componentOrString(o2));\n        p.add(componentOrString(o3));\n        p.add(componentOrString(o4));\n        p.add(componentOrString(o5));\n        return p;\n    }\n\n    public static JPanel flowLayoutL(Object o1, Object o2, Object o3, Object o4, Object o5, Object o6) {\n        JPanel p = new JPanel(new FlowLayout(FlowLayout.LEFT));\n        p.add(componentOrString(o1));\n        p.add(componentOrString(o2));\n        p.add(componentOrString(o3));\n        p.add(componentOrString(o4));\n        p.add(componentOrString(o5));\n        p.add(componentOrString(o6));\n        return p;\n    }\n\n    public static JPanel flowLayoutL(Object o1, Object o2, Object o3, Object o4, Object o5, Object o6, Object o7) {\n        JPanel p = new JPanel(new FlowLayout(FlowLayout.LEFT));\n        p.add(componentOrString(o1));\n        p.add(componentOrString(o2));\n        p.add(componentOrString(o3));\n        p.add(componentOrString(o4));\n        p.add(componentOrString(o5));\n        p.add(componentOrString(o6));\n        p.add(componentOrString(o7));\n        return p;\n    }\n\n    public static JPanel flowLayoutC(Object o1) {\n        JPanel p = new JPanel(new FlowLayout(FlowLayout.CENTER));\n        p.add(componentOrString(o1));\n        return p;\n    }\n\n    // FIXME: in ANY layout, a string should be made into a jlabel automatically.\n    private static Component componentOrString(Object o) {\n        return (o instanceof String ? new JLabel((String) o) : (Component) o);\n    }\n\n    // -------------\n    // grid layout...\n    public static JPanel gridLayout(Component[][] o) {\n        int rows = o.length;\n        int cols = o[0].length;\n        JPanel p = new JPanel(new GridLayout(rows, cols));\n        for (int i = 0; i < rows; i++) for (int j = 0; j < cols; j++) p.add(o[i][j]);\n        return p;\n    }\n\n    public static JPanel gridLayout(Component[][] o, int hgap, int vgap) {\n        int rows = o.length;\n        int cols = o[0].length;\n        JPanel p = new JPanel(new GridLayout(rows, cols, hgap, vgap));\n        for (int i = 0; i < rows; i++) for (int j = 0; j < cols; j++) p.add(o[i][j]);\n        return p;\n    }\n}\n",
		"id": "/EvoSuiteBenchmark/35_corina/src/main/java/corina/gui/Layout_18Test.java",
		"test_prompt": "// Layout_18Test.java\npackage corina.gui;\n\nimport corina.gui.layouts.ButtonLayout;\nimport javax.swing.JPanel;\nimport javax.swing.Box;\nimport java.awt.Component;\nimport java.awt.BorderLayout;\nimport javax.swing.BoxLayout;\nimport java.awt.FlowLayout;\nimport javax.swing.JLabel;\nimport java.awt.GridLayout;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link Layout}.\n* It contains ten unit test cases for the {@link Layout#flowLayoutL(Object, Object, Object, Object, Object, Object, Object)} method.\n*/\nclass Layout_18Test {"
	},
	{
		"original_code": "// Layout.java\npackage corina.gui;\n\nimport corina.gui.layouts.ButtonLayout;\nimport javax.swing.JPanel;\nimport javax.swing.Box;\nimport java.awt.Component;\nimport java.awt.BorderLayout;\nimport javax.swing.BoxLayout;\nimport java.awt.FlowLayout;\nimport javax.swing.JLabel;\nimport java.awt.GridLayout;\n\n// TODO: gpl header, javadoc!\n// a factory for easily creating panels of a given layout.\n// for example,\n// JPanel p = Layout.borderLayout(null,\n//                                null, content, null,\n//                                Layout.buttonLayout(cancel, ok));\n// TODO: if cancel comes before ok, and os=win32, swap them?\n// TODO: accept 1, 2, 3, ... (...5?) components directly (not in array)\n// WRITEME: i'd like to be able to put an integer in any slot for a strut, but i can't.\n// -- BETTER: class Strut(w,h) -- e.g., Layout.flowLayoutL(\"Value:\", Strut.w(4), myField);\n// TODO: i tend to need to use temp vars for the output of these methods,\n// simply to set custom borders on them.  i think going to an XML generator\n// might actually help with that.\n// FIXME: consolidate componentOrGlue(), componentOrString() -- it\n// should be pretty much the same inputs for any of these methods.\npublic class Layout {\n\n    // add a component, if non-null, or add some glue\n    private static Component componentOrGlue(Component c) {\n        return (c != null ? c : Box.createHorizontalGlue());\n    }\n\n    // --------\n    // button layout\n    public static JPanel buttonLayout(Component c1) {\n        JPanel p = new JPanel(new ButtonLayout());\n        p.add(componentOrGlue(c1));\n        return p;\n    }\n\n    public static JPanel buttonLayout(Component c1, Component c2) {\n        JPanel p = new JPanel(new ButtonLayout());\n        p.add(componentOrGlue(c1));\n        p.add(componentOrGlue(c2));\n        return p;\n    }\n\n    public static JPanel buttonLayout(Component c1, Component c2, Component c3) {\n        JPanel p = new JPanel(new ButtonLayout());\n        p.add(componentOrGlue(c1));\n        p.add(componentOrGlue(c2));\n        p.add(componentOrGlue(c3));\n        return p;\n    }\n\n    public static JPanel buttonLayout(Component c1, Component c2, Component c3, Component c4) {\n        JPanel p = new JPanel(new ButtonLayout());\n        p.add(componentOrGlue(c1));\n        p.add(componentOrGlue(c2));\n        p.add(componentOrGlue(c3));\n        p.add(componentOrGlue(c4));\n        return p;\n    }\n\n    public static JPanel buttonLayout(Component c1, Component c2, Component c3, Component c4, Component c5) {\n        JPanel p = new JPanel(new ButtonLayout());\n        p.add(componentOrGlue(c1));\n        p.add(componentOrGlue(c2));\n        p.add(componentOrGlue(c3));\n        p.add(componentOrGlue(c4));\n        p.add(componentOrGlue(c5));\n        return p;\n    }\n\n    // --------\n    // border layout is verbose, too.  let's see what we can do about that.\n    public static JPanel borderLayout(Component n, Component w, Component c, Component e, Component s) {\n        // is this default, anyway?\n        JPanel p = new JPanel(new BorderLayout());\n        if (n != null)\n            p.add(n, BorderLayout.NORTH);\n        if (w != null)\n            p.add(w, BorderLayout.WEST);\n        if (c != null)\n            p.add(c, BorderLayout.CENTER);\n        if (e != null)\n            p.add(e, BorderLayout.EAST);\n        if (s != null)\n            p.add(s, BorderLayout.SOUTH);\n        return p;\n    }\n\n    // --------\n    // box layout...\n    public static JPanel boxLayoutY(Component c1) {\n        JPanel p = new JPanel();\n        p.setLayout(new BoxLayout(p, BoxLayout.Y_AXIS));\n        p.add(c1);\n        return p;\n    }\n\n    public static JPanel boxLayoutY(Component c1, Component c2) {\n        JPanel p = new JPanel();\n        p.setLayout(new BoxLayout(p, BoxLayout.Y_AXIS));\n        p.add(c1);\n        p.add(c2);\n        return p;\n    }\n\n    public static JPanel boxLayoutY(Component c1, Component c2, Component c3) {\n        JPanel p = new JPanel();\n        p.setLayout(new BoxLayout(p, BoxLayout.Y_AXIS));\n        p.add(c1);\n        p.add(c2);\n        p.add(c3);\n        return p;\n    }\n\n    public static JPanel boxLayoutY(Component c1, Component c2, Component c3, Component c4) {\n        JPanel p = new JPanel();\n        p.setLayout(new BoxLayout(p, BoxLayout.Y_AXIS));\n        p.add(c1);\n        p.add(c2);\n        p.add(c3);\n        p.add(c4);\n        return p;\n    }\n\n    public static JPanel boxLayoutY(Component c1, Component c2, Component c3, Component c4, Component c5) {\n        JPanel p = new JPanel();\n        p.setLayout(new BoxLayout(p, BoxLayout.Y_AXIS));\n        p.add(c1);\n        p.add(c2);\n        p.add(c3);\n        p.add(c4);\n        p.add(c5);\n        return p;\n    }\n\n    // -------------\n    // flow layout...\n    public static JPanel flowLayoutL(Object o1) {\n        JPanel p = new JPanel(new FlowLayout(FlowLayout.LEFT));\n        p.add(componentOrString(o1));\n        return p;\n    }\n\n    public static JPanel flowLayoutL(Object o1, Object o2) {\n        JPanel p = new JPanel(new FlowLayout(FlowLayout.LEFT));\n        p.add(componentOrString(o1));\n        p.add(componentOrString(o2));\n        return p;\n    }\n\n    public static JPanel flowLayoutR(Object o1, Object o2) {\n        JPanel p = new JPanel(new FlowLayout(FlowLayout.RIGHT));\n        p.add(componentOrString(o1));\n        p.add(componentOrString(o2));\n        return p;\n    }\n\n    public static JPanel flowLayoutL(Object o1, Object o2, Object o3) {\n        JPanel p = new JPanel(new FlowLayout(FlowLayout.LEFT));\n        p.add(componentOrString(o1));\n        p.add(componentOrString(o2));\n        p.add(componentOrString(o3));\n        return p;\n    }\n\n    public static JPanel flowLayoutL(Object o1, Object o2, Object o3, Object o4) {\n        JPanel p = new JPanel(new FlowLayout(FlowLayout.LEFT));\n        p.add(componentOrString(o1));\n        p.add(componentOrString(o2));\n        p.add(componentOrString(o3));\n        p.add(componentOrString(o4));\n        return p;\n    }\n\n    public static JPanel flowLayoutL(Object o1, Object o2, Object o3, Object o4, Object o5) {\n        JPanel p = new JPanel(new FlowLayout(FlowLayout.LEFT));\n        p.add(componentOrString(o1));\n        p.add(componentOrString(o2));\n        p.add(componentOrString(o3));\n        p.add(componentOrString(o4));\n        p.add(componentOrString(o5));\n        return p;\n    }\n\n    public static JPanel flowLayoutL(Object o1, Object o2, Object o3, Object o4, Object o5, Object o6) {\n        JPanel p = new JPanel(new FlowLayout(FlowLayout.LEFT));\n        p.add(componentOrString(o1));\n        p.add(componentOrString(o2));\n        p.add(componentOrString(o3));\n        p.add(componentOrString(o4));\n        p.add(componentOrString(o5));\n        p.add(componentOrString(o6));\n        return p;\n    }\n\n    public static JPanel flowLayoutL(Object o1, Object o2, Object o3, Object o4, Object o5, Object o6, Object o7) {\n        JPanel p = new JPanel(new FlowLayout(FlowLayout.LEFT));\n        p.add(componentOrString(o1));\n        p.add(componentOrString(o2));\n        p.add(componentOrString(o3));\n        p.add(componentOrString(o4));\n        p.add(componentOrString(o5));\n        p.add(componentOrString(o6));\n        p.add(componentOrString(o7));\n        return p;\n    }\n\n    public static JPanel flowLayoutC(Object o1) {\n        JPanel p = new JPanel(new FlowLayout(FlowLayout.CENTER));\n        p.add(componentOrString(o1));\n        return p;\n    }\n\n    // FIXME: in ANY layout, a string should be made into a jlabel automatically.\n    private static Component componentOrString(Object o) {\n        return (o instanceof String ? new JLabel((String) o) : (Component) o);\n    }\n\n    // -------------\n    // grid layout...\n    public static JPanel gridLayout(Component[][] o) {\n        int rows = o.length;\n        int cols = o[0].length;\n        JPanel p = new JPanel(new GridLayout(rows, cols));\n        for (int i = 0; i < rows; i++) for (int j = 0; j < cols; j++) p.add(o[i][j]);\n        return p;\n    }\n\n    public static JPanel gridLayout(Component[][] o, int hgap, int vgap) {\n        int rows = o.length;\n        int cols = o[0].length;\n        JPanel p = new JPanel(new GridLayout(rows, cols, hgap, vgap));\n        for (int i = 0; i < rows; i++) for (int j = 0; j < cols; j++) p.add(o[i][j]);\n        return p;\n    }\n}\n",
		"id": "/EvoSuiteBenchmark/35_corina/src/main/java/corina/gui/Layout_19Test.java",
		"test_prompt": "// Layout_19Test.java\npackage corina.gui;\n\nimport corina.gui.layouts.ButtonLayout;\nimport javax.swing.JPanel;\nimport javax.swing.Box;\nimport java.awt.Component;\nimport java.awt.BorderLayout;\nimport javax.swing.BoxLayout;\nimport java.awt.FlowLayout;\nimport javax.swing.JLabel;\nimport java.awt.GridLayout;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link Layout}.\n* It contains ten unit test cases for the {@link Layout#flowLayoutC(Object)} method.\n*/\nclass Layout_19Test {"
	},
	{
		"original_code": "// Layout.java\npackage corina.gui;\n\nimport corina.gui.layouts.ButtonLayout;\nimport javax.swing.JPanel;\nimport javax.swing.Box;\nimport java.awt.Component;\nimport java.awt.BorderLayout;\nimport javax.swing.BoxLayout;\nimport java.awt.FlowLayout;\nimport javax.swing.JLabel;\nimport java.awt.GridLayout;\n\n// TODO: gpl header, javadoc!\n// a factory for easily creating panels of a given layout.\n// for example,\n// JPanel p = Layout.borderLayout(null,\n//                                null, content, null,\n//                                Layout.buttonLayout(cancel, ok));\n// TODO: if cancel comes before ok, and os=win32, swap them?\n// TODO: accept 1, 2, 3, ... (...5?) components directly (not in array)\n// WRITEME: i'd like to be able to put an integer in any slot for a strut, but i can't.\n// -- BETTER: class Strut(w,h) -- e.g., Layout.flowLayoutL(\"Value:\", Strut.w(4), myField);\n// TODO: i tend to need to use temp vars for the output of these methods,\n// simply to set custom borders on them.  i think going to an XML generator\n// might actually help with that.\n// FIXME: consolidate componentOrGlue(), componentOrString() -- it\n// should be pretty much the same inputs for any of these methods.\npublic class Layout {\n\n    // add a component, if non-null, or add some glue\n    private static Component componentOrGlue(Component c) {\n        return (c != null ? c : Box.createHorizontalGlue());\n    }\n\n    // --------\n    // button layout\n    public static JPanel buttonLayout(Component c1) {\n        JPanel p = new JPanel(new ButtonLayout());\n        p.add(componentOrGlue(c1));\n        return p;\n    }\n\n    public static JPanel buttonLayout(Component c1, Component c2) {\n        JPanel p = new JPanel(new ButtonLayout());\n        p.add(componentOrGlue(c1));\n        p.add(componentOrGlue(c2));\n        return p;\n    }\n\n    public static JPanel buttonLayout(Component c1, Component c2, Component c3) {\n        JPanel p = new JPanel(new ButtonLayout());\n        p.add(componentOrGlue(c1));\n        p.add(componentOrGlue(c2));\n        p.add(componentOrGlue(c3));\n        return p;\n    }\n\n    public static JPanel buttonLayout(Component c1, Component c2, Component c3, Component c4) {\n        JPanel p = new JPanel(new ButtonLayout());\n        p.add(componentOrGlue(c1));\n        p.add(componentOrGlue(c2));\n        p.add(componentOrGlue(c3));\n        p.add(componentOrGlue(c4));\n        return p;\n    }\n\n    public static JPanel buttonLayout(Component c1, Component c2, Component c3, Component c4, Component c5) {\n        JPanel p = new JPanel(new ButtonLayout());\n        p.add(componentOrGlue(c1));\n        p.add(componentOrGlue(c2));\n        p.add(componentOrGlue(c3));\n        p.add(componentOrGlue(c4));\n        p.add(componentOrGlue(c5));\n        return p;\n    }\n\n    // --------\n    // border layout is verbose, too.  let's see what we can do about that.\n    public static JPanel borderLayout(Component n, Component w, Component c, Component e, Component s) {\n        // is this default, anyway?\n        JPanel p = new JPanel(new BorderLayout());\n        if (n != null)\n            p.add(n, BorderLayout.NORTH);\n        if (w != null)\n            p.add(w, BorderLayout.WEST);\n        if (c != null)\n            p.add(c, BorderLayout.CENTER);\n        if (e != null)\n            p.add(e, BorderLayout.EAST);\n        if (s != null)\n            p.add(s, BorderLayout.SOUTH);\n        return p;\n    }\n\n    // --------\n    // box layout...\n    public static JPanel boxLayoutY(Component c1) {\n        JPanel p = new JPanel();\n        p.setLayout(new BoxLayout(p, BoxLayout.Y_AXIS));\n        p.add(c1);\n        return p;\n    }\n\n    public static JPanel boxLayoutY(Component c1, Component c2) {\n        JPanel p = new JPanel();\n        p.setLayout(new BoxLayout(p, BoxLayout.Y_AXIS));\n        p.add(c1);\n        p.add(c2);\n        return p;\n    }\n\n    public static JPanel boxLayoutY(Component c1, Component c2, Component c3) {\n        JPanel p = new JPanel();\n        p.setLayout(new BoxLayout(p, BoxLayout.Y_AXIS));\n        p.add(c1);\n        p.add(c2);\n        p.add(c3);\n        return p;\n    }\n\n    public static JPanel boxLayoutY(Component c1, Component c2, Component c3, Component c4) {\n        JPanel p = new JPanel();\n        p.setLayout(new BoxLayout(p, BoxLayout.Y_AXIS));\n        p.add(c1);\n        p.add(c2);\n        p.add(c3);\n        p.add(c4);\n        return p;\n    }\n\n    public static JPanel boxLayoutY(Component c1, Component c2, Component c3, Component c4, Component c5) {\n        JPanel p = new JPanel();\n        p.setLayout(new BoxLayout(p, BoxLayout.Y_AXIS));\n        p.add(c1);\n        p.add(c2);\n        p.add(c3);\n        p.add(c4);\n        p.add(c5);\n        return p;\n    }\n\n    // -------------\n    // flow layout...\n    public static JPanel flowLayoutL(Object o1) {\n        JPanel p = new JPanel(new FlowLayout(FlowLayout.LEFT));\n        p.add(componentOrString(o1));\n        return p;\n    }\n\n    public static JPanel flowLayoutL(Object o1, Object o2) {\n        JPanel p = new JPanel(new FlowLayout(FlowLayout.LEFT));\n        p.add(componentOrString(o1));\n        p.add(componentOrString(o2));\n        return p;\n    }\n\n    public static JPanel flowLayoutR(Object o1, Object o2) {\n        JPanel p = new JPanel(new FlowLayout(FlowLayout.RIGHT));\n        p.add(componentOrString(o1));\n        p.add(componentOrString(o2));\n        return p;\n    }\n\n    public static JPanel flowLayoutL(Object o1, Object o2, Object o3) {\n        JPanel p = new JPanel(new FlowLayout(FlowLayout.LEFT));\n        p.add(componentOrString(o1));\n        p.add(componentOrString(o2));\n        p.add(componentOrString(o3));\n        return p;\n    }\n\n    public static JPanel flowLayoutL(Object o1, Object o2, Object o3, Object o4) {\n        JPanel p = new JPanel(new FlowLayout(FlowLayout.LEFT));\n        p.add(componentOrString(o1));\n        p.add(componentOrString(o2));\n        p.add(componentOrString(o3));\n        p.add(componentOrString(o4));\n        return p;\n    }\n\n    public static JPanel flowLayoutL(Object o1, Object o2, Object o3, Object o4, Object o5) {\n        JPanel p = new JPanel(new FlowLayout(FlowLayout.LEFT));\n        p.add(componentOrString(o1));\n        p.add(componentOrString(o2));\n        p.add(componentOrString(o3));\n        p.add(componentOrString(o4));\n        p.add(componentOrString(o5));\n        return p;\n    }\n\n    public static JPanel flowLayoutL(Object o1, Object o2, Object o3, Object o4, Object o5, Object o6) {\n        JPanel p = new JPanel(new FlowLayout(FlowLayout.LEFT));\n        p.add(componentOrString(o1));\n        p.add(componentOrString(o2));\n        p.add(componentOrString(o3));\n        p.add(componentOrString(o4));\n        p.add(componentOrString(o5));\n        p.add(componentOrString(o6));\n        return p;\n    }\n\n    public static JPanel flowLayoutL(Object o1, Object o2, Object o3, Object o4, Object o5, Object o6, Object o7) {\n        JPanel p = new JPanel(new FlowLayout(FlowLayout.LEFT));\n        p.add(componentOrString(o1));\n        p.add(componentOrString(o2));\n        p.add(componentOrString(o3));\n        p.add(componentOrString(o4));\n        p.add(componentOrString(o5));\n        p.add(componentOrString(o6));\n        p.add(componentOrString(o7));\n        return p;\n    }\n\n    public static JPanel flowLayoutC(Object o1) {\n        JPanel p = new JPanel(new FlowLayout(FlowLayout.CENTER));\n        p.add(componentOrString(o1));\n        return p;\n    }\n\n    // FIXME: in ANY layout, a string should be made into a jlabel automatically.\n    private static Component componentOrString(Object o) {\n        return (o instanceof String ? new JLabel((String) o) : (Component) o);\n    }\n\n    // -------------\n    // grid layout...\n    public static JPanel gridLayout(Component[][] o) {\n        int rows = o.length;\n        int cols = o[0].length;\n        JPanel p = new JPanel(new GridLayout(rows, cols));\n        for (int i = 0; i < rows; i++) for (int j = 0; j < cols; j++) p.add(o[i][j]);\n        return p;\n    }\n\n    public static JPanel gridLayout(Component[][] o, int hgap, int vgap) {\n        int rows = o.length;\n        int cols = o[0].length;\n        JPanel p = new JPanel(new GridLayout(rows, cols, hgap, vgap));\n        for (int i = 0; i < rows; i++) for (int j = 0; j < cols; j++) p.add(o[i][j]);\n        return p;\n    }\n}\n",
		"id": "/EvoSuiteBenchmark/35_corina/src/main/java/corina/gui/Layout_20Test.java",
		"test_prompt": "// Layout_20Test.java\npackage corina.gui;\n\nimport corina.gui.layouts.ButtonLayout;\nimport javax.swing.JPanel;\nimport javax.swing.Box;\nimport java.awt.Component;\nimport java.awt.BorderLayout;\nimport javax.swing.BoxLayout;\nimport java.awt.FlowLayout;\nimport javax.swing.JLabel;\nimport java.awt.GridLayout;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link Layout}.\n* It contains ten unit test cases for the {@link Layout#gridLayout(Component[][])} method.\n*/\nclass Layout_20Test {"
	},
	{
		"original_code": "// Layout.java\npackage corina.gui;\n\nimport corina.gui.layouts.ButtonLayout;\nimport javax.swing.JPanel;\nimport javax.swing.Box;\nimport java.awt.Component;\nimport java.awt.BorderLayout;\nimport javax.swing.BoxLayout;\nimport java.awt.FlowLayout;\nimport javax.swing.JLabel;\nimport java.awt.GridLayout;\n\n// TODO: gpl header, javadoc!\n// a factory for easily creating panels of a given layout.\n// for example,\n// JPanel p = Layout.borderLayout(null,\n//                                null, content, null,\n//                                Layout.buttonLayout(cancel, ok));\n// TODO: if cancel comes before ok, and os=win32, swap them?\n// TODO: accept 1, 2, 3, ... (...5?) components directly (not in array)\n// WRITEME: i'd like to be able to put an integer in any slot for a strut, but i can't.\n// -- BETTER: class Strut(w,h) -- e.g., Layout.flowLayoutL(\"Value:\", Strut.w(4), myField);\n// TODO: i tend to need to use temp vars for the output of these methods,\n// simply to set custom borders on them.  i think going to an XML generator\n// might actually help with that.\n// FIXME: consolidate componentOrGlue(), componentOrString() -- it\n// should be pretty much the same inputs for any of these methods.\npublic class Layout {\n\n    // add a component, if non-null, or add some glue\n    private static Component componentOrGlue(Component c) {\n        return (c != null ? c : Box.createHorizontalGlue());\n    }\n\n    // --------\n    // button layout\n    public static JPanel buttonLayout(Component c1) {\n        JPanel p = new JPanel(new ButtonLayout());\n        p.add(componentOrGlue(c1));\n        return p;\n    }\n\n    public static JPanel buttonLayout(Component c1, Component c2) {\n        JPanel p = new JPanel(new ButtonLayout());\n        p.add(componentOrGlue(c1));\n        p.add(componentOrGlue(c2));\n        return p;\n    }\n\n    public static JPanel buttonLayout(Component c1, Component c2, Component c3) {\n        JPanel p = new JPanel(new ButtonLayout());\n        p.add(componentOrGlue(c1));\n        p.add(componentOrGlue(c2));\n        p.add(componentOrGlue(c3));\n        return p;\n    }\n\n    public static JPanel buttonLayout(Component c1, Component c2, Component c3, Component c4) {\n        JPanel p = new JPanel(new ButtonLayout());\n        p.add(componentOrGlue(c1));\n        p.add(componentOrGlue(c2));\n        p.add(componentOrGlue(c3));\n        p.add(componentOrGlue(c4));\n        return p;\n    }\n\n    public static JPanel buttonLayout(Component c1, Component c2, Component c3, Component c4, Component c5) {\n        JPanel p = new JPanel(new ButtonLayout());\n        p.add(componentOrGlue(c1));\n        p.add(componentOrGlue(c2));\n        p.add(componentOrGlue(c3));\n        p.add(componentOrGlue(c4));\n        p.add(componentOrGlue(c5));\n        return p;\n    }\n\n    // --------\n    // border layout is verbose, too.  let's see what we can do about that.\n    public static JPanel borderLayout(Component n, Component w, Component c, Component e, Component s) {\n        // is this default, anyway?\n        JPanel p = new JPanel(new BorderLayout());\n        if (n != null)\n            p.add(n, BorderLayout.NORTH);\n        if (w != null)\n            p.add(w, BorderLayout.WEST);\n        if (c != null)\n            p.add(c, BorderLayout.CENTER);\n        if (e != null)\n            p.add(e, BorderLayout.EAST);\n        if (s != null)\n            p.add(s, BorderLayout.SOUTH);\n        return p;\n    }\n\n    // --------\n    // box layout...\n    public static JPanel boxLayoutY(Component c1) {\n        JPanel p = new JPanel();\n        p.setLayout(new BoxLayout(p, BoxLayout.Y_AXIS));\n        p.add(c1);\n        return p;\n    }\n\n    public static JPanel boxLayoutY(Component c1, Component c2) {\n        JPanel p = new JPanel();\n        p.setLayout(new BoxLayout(p, BoxLayout.Y_AXIS));\n        p.add(c1);\n        p.add(c2);\n        return p;\n    }\n\n    public static JPanel boxLayoutY(Component c1, Component c2, Component c3) {\n        JPanel p = new JPanel();\n        p.setLayout(new BoxLayout(p, BoxLayout.Y_AXIS));\n        p.add(c1);\n        p.add(c2);\n        p.add(c3);\n        return p;\n    }\n\n    public static JPanel boxLayoutY(Component c1, Component c2, Component c3, Component c4) {\n        JPanel p = new JPanel();\n        p.setLayout(new BoxLayout(p, BoxLayout.Y_AXIS));\n        p.add(c1);\n        p.add(c2);\n        p.add(c3);\n        p.add(c4);\n        return p;\n    }\n\n    public static JPanel boxLayoutY(Component c1, Component c2, Component c3, Component c4, Component c5) {\n        JPanel p = new JPanel();\n        p.setLayout(new BoxLayout(p, BoxLayout.Y_AXIS));\n        p.add(c1);\n        p.add(c2);\n        p.add(c3);\n        p.add(c4);\n        p.add(c5);\n        return p;\n    }\n\n    // -------------\n    // flow layout...\n    public static JPanel flowLayoutL(Object o1) {\n        JPanel p = new JPanel(new FlowLayout(FlowLayout.LEFT));\n        p.add(componentOrString(o1));\n        return p;\n    }\n\n    public static JPanel flowLayoutL(Object o1, Object o2) {\n        JPanel p = new JPanel(new FlowLayout(FlowLayout.LEFT));\n        p.add(componentOrString(o1));\n        p.add(componentOrString(o2));\n        return p;\n    }\n\n    public static JPanel flowLayoutR(Object o1, Object o2) {\n        JPanel p = new JPanel(new FlowLayout(FlowLayout.RIGHT));\n        p.add(componentOrString(o1));\n        p.add(componentOrString(o2));\n        return p;\n    }\n\n    public static JPanel flowLayoutL(Object o1, Object o2, Object o3) {\n        JPanel p = new JPanel(new FlowLayout(FlowLayout.LEFT));\n        p.add(componentOrString(o1));\n        p.add(componentOrString(o2));\n        p.add(componentOrString(o3));\n        return p;\n    }\n\n    public static JPanel flowLayoutL(Object o1, Object o2, Object o3, Object o4) {\n        JPanel p = new JPanel(new FlowLayout(FlowLayout.LEFT));\n        p.add(componentOrString(o1));\n        p.add(componentOrString(o2));\n        p.add(componentOrString(o3));\n        p.add(componentOrString(o4));\n        return p;\n    }\n\n    public static JPanel flowLayoutL(Object o1, Object o2, Object o3, Object o4, Object o5) {\n        JPanel p = new JPanel(new FlowLayout(FlowLayout.LEFT));\n        p.add(componentOrString(o1));\n        p.add(componentOrString(o2));\n        p.add(componentOrString(o3));\n        p.add(componentOrString(o4));\n        p.add(componentOrString(o5));\n        return p;\n    }\n\n    public static JPanel flowLayoutL(Object o1, Object o2, Object o3, Object o4, Object o5, Object o6) {\n        JPanel p = new JPanel(new FlowLayout(FlowLayout.LEFT));\n        p.add(componentOrString(o1));\n        p.add(componentOrString(o2));\n        p.add(componentOrString(o3));\n        p.add(componentOrString(o4));\n        p.add(componentOrString(o5));\n        p.add(componentOrString(o6));\n        return p;\n    }\n\n    public static JPanel flowLayoutL(Object o1, Object o2, Object o3, Object o4, Object o5, Object o6, Object o7) {\n        JPanel p = new JPanel(new FlowLayout(FlowLayout.LEFT));\n        p.add(componentOrString(o1));\n        p.add(componentOrString(o2));\n        p.add(componentOrString(o3));\n        p.add(componentOrString(o4));\n        p.add(componentOrString(o5));\n        p.add(componentOrString(o6));\n        p.add(componentOrString(o7));\n        return p;\n    }\n\n    public static JPanel flowLayoutC(Object o1) {\n        JPanel p = new JPanel(new FlowLayout(FlowLayout.CENTER));\n        p.add(componentOrString(o1));\n        return p;\n    }\n\n    // FIXME: in ANY layout, a string should be made into a jlabel automatically.\n    private static Component componentOrString(Object o) {\n        return (o instanceof String ? new JLabel((String) o) : (Component) o);\n    }\n\n    // -------------\n    // grid layout...\n    public static JPanel gridLayout(Component[][] o) {\n        int rows = o.length;\n        int cols = o[0].length;\n        JPanel p = new JPanel(new GridLayout(rows, cols));\n        for (int i = 0; i < rows; i++) for (int j = 0; j < cols; j++) p.add(o[i][j]);\n        return p;\n    }\n\n    public static JPanel gridLayout(Component[][] o, int hgap, int vgap) {\n        int rows = o.length;\n        int cols = o[0].length;\n        JPanel p = new JPanel(new GridLayout(rows, cols, hgap, vgap));\n        for (int i = 0; i < rows; i++) for (int j = 0; j < cols; j++) p.add(o[i][j]);\n        return p;\n    }\n}\n",
		"id": "/EvoSuiteBenchmark/35_corina/src/main/java/corina/gui/Layout_21Test.java",
		"test_prompt": "// Layout_21Test.java\npackage corina.gui;\n\nimport corina.gui.layouts.ButtonLayout;\nimport javax.swing.JPanel;\nimport javax.swing.Box;\nimport java.awt.Component;\nimport java.awt.BorderLayout;\nimport javax.swing.BoxLayout;\nimport java.awt.FlowLayout;\nimport javax.swing.JLabel;\nimport java.awt.GridLayout;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link Layout}.\n* It contains ten unit test cases for the {@link Layout#gridLayout(Component[][], int, int)} method.\n*/\nclass Layout_21Test {"
	},
	{
		"original_code": "// Scripts.java\n//\n// This file is part of Corina.\n//\n// Corina is free software; you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation; either version 2 of the License, or\n// (at your option) any later version.\n//\n// Corina is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Corina; if not, write to the Free Software\n// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n//\n// Copyright 2001 Ken Harris <kbh7@cornell.edu>\n//\npackage corina.gui;\n\nimport corina.Year;\nimport corina.Range;\nimport corina.Sample;\nimport corina.Element;\nimport corina.index.Index;\n// extract const! -- better: let user pick!\nimport corina.index.Exponential;\nimport corina.util.Overwrite;\nimport corina.ui.Builder;\nimport corina.ui.Alert;\nimport java.io.File;\nimport java.io.IOException;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Hashtable;\n\n/*\n  3 things which used to be written as python scripts, but should be\n  better integrated.  plus i'm becoming less and less impressed with\n  python.\n\n  this desparately needs REFACTORING, but for now just getting it a\n  bit more homogeneous should help.\n*/\n// TODO: move to appropriate places, like corina.index.Index.indexMany()\n// BUG: after one of these is called by the browser, how will it know to update itself?\n// -- do i need a way to say \"hey browser, add/modify just this one element\"?\n/*\n  ok, wise guy, what's a better user interface for this?\n  -- (???)\n*/\npublic class Scripts {\n\n    // given a (possibly fully qualified) filename, return only its name.\n    // REFACTOR: move this to util?\n    // RENAME: not how it works, but what it does -- extractName()?\n    public static String removeFolders(String filename) {\n        return new File(filename).getName();\n    }\n\n    //\n    // --------------------------------------------------\n    //\n    // given the filename of a sample, load it, and\n    // split even/odd years into \"-early\" and \"-late\" files\n    public static void splitIntoEarlyLate(String filename) {\n        // load it\n        Sample raw;\n        try {\n            raw = new Sample(filename);\n        } catch (IOException ioe) {\n            String f = removeFolders(filename);\n            Alert.error(\"Error loading sample\", \"The sample \\\"\" + f + \"\\\" could not be loaded.\");\n            return;\n        }\n        // make sure we're not summed\n        if (raw.isSummed()) {\n            String f = removeFolders(filename);\n            Alert.error(\"Can't split summed sample\", \"The sample \\\"\" + f + \"\\\" could not\\n\" + \"be split, because it is summed file.\\n\");\n            return;\n        }\n        // split it: data\n        Sample early = new Sample();\n        Sample late = new Sample();\n        for (int i = 0; i < raw.data.size(); i++) {\n            if (i % 2 == 0)\n                early.data.add(raw.data.get(i));\n            else\n                late.data.add(raw.data.get(i));\n        }\n        // compute range\n        Year start = raw.range.getStart();\n        early.range = new Range(start, early.data.size());\n        late.range = new Range(start, late.data.size());\n        // copy meta, and set titles\n        early.meta = new Hashtable(raw.meta);\n        late.meta = new Hashtable(raw.meta);\n        String rawTitle = (String) raw.meta.get(\"title\");\n        early.meta.put(\"title\", rawTitle + \" - Earlywood\");\n        late.meta.put(\"title\", rawTitle + \" - Latewood\");\n        // make the new filenames\n        String earlyName = filename + \" - early\";\n        String lateName = filename + \" - late\";\n        // save the halves\n        try {\n            Overwrite.overwrite(earlyName);\n            early.save(earlyName);\n        } catch (IOException ioe) {\n            Alert.error(\"Error saving sample\", \"There was an error while trying to \" + \"save one of the results:\\n\" + ioe.getMessage());\n            return;\n        } catch (UserCancelledException uce) {\n            // don't do anything\n        } catch (RuntimeException re) {\n            Bug.bug(re);\n        }\n        // REFACTOR: these 2 are almost exactly the same\n        // (and probably the same as elsewhere)\n        try {\n            Overwrite.overwrite(lateName);\n            late.save(lateName);\n        } catch (IOException ioe) {\n            Alert.error(\"Error saving sample\", \"There was an error while trying to \" + \"save one of the results:\\n\" + ioe.getMessage());\n            return;\n        } catch (UserCancelledException uce) {\n            // don't do anything\n        } catch (RuntimeException re) {\n            Bug.bug(re);\n        }\n    }\n\n    //\n    // --------------------------------------------------\n    //\n    // given the filename\n    public static void joinEarlyLate(String filename) {\n        // load it\n        Sample raw;\n        try {\n            raw = new Sample(filename);\n        } catch (IOException ioe) {\n            Alert.error(\"Error loading sample\", \"The sample \\\"\" + removeFolders(filename) + \"\\\" \" + \"could not be loaded.\");\n            return;\n        }\n        // join it: data\n        List joined = new ArrayList();\n        for (int i = 0; i < raw.data.size() / 2; i++) {\n            int a = ((Number) raw.data.get(2 * i)).intValue();\n            int b = ((Number) raw.data.get(2 * i + 1)).intValue();\n            joined.add(new Integer(a + b));\n        }\n        // what if the length is odd?  take the odd last value as-is.\n        if (raw.data.size() % 2 == 1)\n            joined.add(raw.data.get(raw.data.size() - 1));\n        // assign data list\n        raw.data = joined;\n        // recompute range\n        Year start = raw.range.getStart();\n        raw.range = new Range(start, raw.data.size());\n        // adjust title\n        String title = (String) raw.meta.get(\"title\");\n        if (title == null || title.equals(\"\"))\n            title = \"Untitled\";\n        title = title + \" - joined\";\n        raw.meta.put(\"title\", title);\n        // BUG: doList doesn't update if summary is changed, e.g., n=63->n=64\n        // return filename, so browser can select it?\n        try {\n            // get new target file\n            filename = filename + \" - joined\";\n            // overwrite?\n            Overwrite.overwrite(filename);\n            // save it\n            raw.save(filename);\n        } catch (IOException ioe) {\n            Alert.error(\"Error saving sample\", \"There was an error while trying to \" + \"save the result:\\n\" + ioe.getMessage());\n        } catch (UserCancelledException uce) {\n            // don't do anything\n        }\n    }\n\n    //\n    // --------------------------------------------------\n    //\n    // change |name|'s extension to |ext|, if it has one, or add |ext| if it doesn't.\n    // e.g., changeExtension(\"myfile.raw\", \"ind\") => \"myfile.ind\"\n    private static String changeExtension(String name, String ext) {\n        // deal with ext starting with dot -- i might imagine it goes either way,\n        // so i might as well handle both.\n        if (ext.startsWith(\".\"))\n            ext = ext.substring(1);\n        int lastDot = name.lastIndexOf('.');\n        if (lastDot == -1)\n            return name + '.' + ext;\n        else\n            return name.substring(0, lastDot) + '.' + ext;\n    }\n\n    // let the user select several files, and index them all\n    // TODO: let user pick algorithm?  (show index-multi-dialog with indexes for each?)\n    // TODO: better exception handling?\n    /* unused, now:\n    public static void indexManyFiles() {\n\ttry {\n\t    List files = FileDialog.showMulti(\"Index\");\n\t    indexManyFiles(files);\n\t} catch (UserCancelledException uce) {\n\t    // ignore\n\t}\n    }\n    */\n    // BUG: what if it's already indexed?\n    public static void indexManyFiles(List elements) {\n        // keep a count of how many were already indexed, so i can\n        // tell the user nicely at the end, once, instead of bugging\n        // him at each file\n        int alreadyIndexed = 0;\n        // index each one as exponential, and save it as .IND\n        for (int i = 0; i < elements.size(); i++) {\n            Element e = (Element) elements.get(i);\n            Sample s;\n            try {\n                s = e.load();\n            } catch (IOException ioe) {\n                String f = removeFolders(e.getFilename());\n                Alert.error(\"Error loading sample\", \"The sample \\\"\" + f + \"\\\" could not be loaded.\");\n                continue;\n            }\n            // already indexed?\n            // PERF: i can find out if it's indexed by looking at the summary,\n            // which i know is loaded, because it's in the browser...\n            if (s.isIndexed()) {\n                alreadyIndexed++;\n                continue;\n            }\n            // run an exp index\n            Index index = new Exponential(s);\n            index.run();\n            index.apply();\n            // add \"(indexed)\" to the title, so they know later\n            s.meta.put(\"title\", s.meta.get(\"title\") + \" (indexed)\");\n            // take the filename, and make it end in .IND.\n            String name = new File((String) s.meta.get(\"filename\")).getPath();\n            // change the extension, or add one if it didn't have one\n            name = changeExtension(name, \"IND\");\n            ;\n            try {\n                // make sure it's safe to write here\n                Overwrite.overwrite(name);\n                // save it\n                s.save(name);\n            } catch (IOException ioe) {\n                String f = removeFolders(e.getFilename());\n                Alert.error(\"Error saving sample\", \"The sample \\\"\" + f + \"\\\" could not be saved.\");\n            } catch (UserCancelledException uce) {\n                // skip it\n            }\n        }\n        // tell the user about the files which were already indexed.\n        if (alreadyIndexed != 0) {\n            // make some effort at phrasing it appropriately\n            String alert;\n            if (alreadyIndexed == 1 && elements.size() == 1)\n                alert = \"This file is already indexed.\";\n            else if (alreadyIndexed == elements.size())\n                alert = \"All of the selected files are already indexed.\";\n            else\n                alert = alreadyIndexed + \" of the selected files were already indexed.\";\n            // tell them\n            Alert.error(\"Already indexed\", alert);\n        }\n    }\n}\n",
		"id": "/EvoSuiteBenchmark/35_corina/src/main/java/corina/gui/Scripts.java",
		"test_prompt": "// ScriptsTest.java\n// This file is part of Corina.\n//\n// Corina is free software; you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation; either version 2 of the License, or\n// (at your option) any later version.\n//\n// Corina is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Corina; if not, write to the Free Software\n// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n//\n// Copyright 2001 Ken Harris <kbh7@cornell.edu>\n//\npackage corina.gui;\n\nimport corina.Year;\nimport corina.Range;\nimport corina.Sample;\nimport corina.Element;\nimport corina.index.Index;\n// extract const! -- better: let user pick!\nimport corina.index.Exponential;\nimport corina.util.Overwrite;\nimport corina.ui.Builder;\nimport corina.ui.Alert;\nimport java.io.File;\nimport java.io.IOException;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Hashtable;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link Scripts}.\n* It contains ten unit test cases for the {@link Scripts#removeFolders(String)} method.\n*/\nclass ScriptsTest {"
	},
	{
		"original_code": "// FileDialog.java\n//\n// This file is part of Corina.\n//\n// Corina is free software; you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation; either version 2 of the License, or\n// (at your option) any later version.\n//\n// Corina is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Corina; if not, write to the Free Software\n// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n//\n// Copyright 2001 Ken Harris <kbh7@cornell.edu>\n//\npackage corina.gui;\n\nimport java.awt.Component;\nimport java.awt.Dimension;\nimport java.io.File;\nimport java.util.ArrayList;\nimport java.util.List;\nimport javax.swing.JFileChooser;\nimport javax.swing.JToggleButton;\nimport javax.swing.JToolBar;\nimport javax.swing.UIManager;\nimport javax.swing.filechooser.FileFilter;\nimport corina.core.App;\nimport corina.logging.CorinaLog;\nimport corina.ui.I18n;\n\n/**\n * A wrapper for JFileChooser, providing typical (Corina) usage.\n *\n * <p>\n * Here's what they provide, and why you'd want to use this class over\n * JFileChooser directly:\n * </p>\n *\n * <ul>\n *\n * <li>automatically uses a bunch of default filters</li>\n *\n * <li>gets its initial directory from corina.dir.data; subsequent calls start\n * from the last-used-directory</li>\n *\n * <li>incredibly neat preview component</li>\n *\n * <li>multiple-file-chooser lets the user select several files from one dialog\n * </li>\n *\n * <li>simple return values: a String (for single-selection) or a List of\n * Strings (for multiple-selection), or throws a UserCancelledException if the\n * user cancelled. No need to mess with JFileChooser.APPROVE_OPTION</li>\n *\n * </ul>\n *\n * @see corina.gui.UserCancelledException\n * @see javax.swing.JFileChooser\n *\n * @author Ken Harris &lt;kbh7 <i style=\"color: gray\">at </i> cornell <i\n *         style=\"color: gray\">dot </i> edu&gt;\n * @author Aaron Hamid\n * @version $Id: FileDialog.java,v 1.12 2006/10/08 10:17:51 lucasmo Exp $\n */\npublic class FileDialog {\n\n    private static final Dimension SINGLE_DEFAULT_DIMENSION = new Dimension(640, 480);\n\n    private static final Dimension MULTI_DEFAULT_DIMENSION = new Dimension(640, 480);\n\n    private static final String CLASS_NAME = FileDialog.class.getName();\n\n    private static final String SINGLE_DIM_PREF = CLASS_NAME + \".single.dimension\";\n\n    private static final String MULTI_DIM_PREF = CLASS_NAME + \".double.dimension\";\n\n    private static final String SINGLE_VIEWMODE_PREF = CLASS_NAME + \".single.viewmode\";\n\n    private static final String MULTI_VIEWMODE_PREF = CLASS_NAME + \".double.viewmode\";\n\n    private static final CorinaLog log = new CorinaLog(\"Prefs\");\n\n    private FileDialog() {\n        // (don't instantiate me)\n    }\n\n    private static class ExtensionFilter extends FileFilter {\n\n        private String TLA, tla;\n\n        private String name;\n\n        /**\n         * Create a new filter with the given name, for the given TLA.\n         * @param tla\n         *          3-letter-acronym to match as an extension\n         * @param name\n         *          the name of this filter\n         */\n        public ExtensionFilter(String tla, String name) {\n            this.tla = tla.toLowerCase();\n            this.TLA = tla.toUpperCase();\n            this.name = name + \" (*.\" + this.TLA + \")\";\n        }\n\n        /**\n         * Decide whether this file ends in the given TLA.\n         * @param f\n         *          the file to test\n         * @return true, if and only if the filename ends in the TLA\n         */\n        public boolean accept(File f) {\n            // users can always traverse a directory\n            if (f.isDirectory())\n                return true;\n            // it's okay if it ends with the TLA, either case\n            String filename = f.getName();\n            return (filename.endsWith(tla) || filename.endsWith(TLA));\n        }\n\n        /**\n         * The user-readable description of this filter. Specified as \"name\n         * (*.TLA)\".\n         * @return the user-readable name of this filter\n         */\n        public String getDescription() {\n            return name;\n        }\n    }\n\n    /**\n     * The default list of filters to use, as a list of extensions.\n     */\n    public static String[] FILTERS = new String[] { \"raw\", \"sum\", \"rec\", \"ind\", \"cln\", \"trn\" };\n\n    // add all default filters to this target, and then reset to default (*.*)\n    private static void addFilters(JFileChooser f) {\n        for (int i = 0; i < FILTERS.length; i++) f.addChoosableFileFilter(new ExtensionFilter(FILTERS[i], I18n.getText(\".\" + FILTERS[i])));\n        // REFACTOR: should only need to pass FILTERS[i] to constructor here\n        f.setFileFilter(f.getAcceptAllFileFilter());\n    }\n\n    // working directory -- this gets updated whenever OK is clicked\n    // XXX: can you say race condition - aaron... dependence on static\n    // initializers, data and methods needs to be fixed\n    // If this class is referenced before Prefs is, we are SOL\n    private static String wd = App.prefs.getPref(\"corina.dir.data\");\n\n    /**\n     * This is a big hack to snoop into the JFileChooser GUI, and find\n     * the details view mode button and fire it, so we can preserve\n     * settings.\n     */\n    private static void setConfiguredMode(JFileChooser chooser, String pref) {\n        String v = App.prefs.getPrefs().getProperty(pref, \"list\");\n        if (!\"details\".equals(v))\n            return;\n        Component[] comps = chooser.getComponents();\n        // ok, the JFileChooser contains a JToolBar\n        for (int i = 0; i < comps.length; i++) {\n            if (!(comps[i] instanceof JToolBar))\n                continue;\n            Component[] comps2 = ((JToolBar) comps[i]).getComponents();\n            // and the JToolBar has JToggleButtons\n            for (int j = 0; j < comps2.length; j++) {\n                if (!(comps2[j] instanceof JToggleButton))\n                    continue;\n                JToggleButton tb = (JToggleButton) comps2[j];\n                String s = tb.getAccessibleContext().getAccessibleName();\n                if (s != null && s.equals(UIManager.getString(\"FileChooser.detailsViewButtonAccessibleName\", chooser.getLocale()))) {\n                    tb.doClick();\n                    return;\n                }\n            }\n        }\n    }\n\n    private static void saveConfiguredMode(JFileChooser chooser, String pref) {\n        Component[] comps = chooser.getComponents();\n        // ok, the JFileChooser contains a JToolBar\n        for (int i = 0; i < comps.length; i++) {\n            if (!(comps[i] instanceof JToolBar))\n                continue;\n            Component[] comps2 = ((JToolBar) comps[i]).getComponents();\n            // and the JToolBar has JToggleButtons\n            for (int j = 0; j < comps2.length; j++) {\n                if (!(comps2[j] instanceof JToggleButton))\n                    continue;\n                JToggleButton tb = (JToggleButton) comps2[j];\n                String s = tb.getAccessibleContext().getAccessibleName();\n                if (s != null && s.equals(UIManager.getString(\"FileChooser.detailsViewButtonAccessibleName\", chooser.getLocale()))) {\n                    if (tb.isSelected()) {\n                        App.prefs.getPrefs().setProperty(pref, \"details\");\n                    } else {\n                        App.prefs.getPrefs().setProperty(pref, \"list\");\n                    }\n                }\n            }\n        }\n    }\n\n    /**\n     * Show a file selection dialog. This allows the user to select one file. It\n     * shows a preview component, and has the default filters available.\n     *\n     * @param prompt\n     *          the text string to use for both the title bar and approve button\n     * @return the filename that was selected\n     * @exception UserCancelledException\n     *              if the user cancelled\n     */\n    public static String showSingle(String prompt) throws UserCancelledException {\n        return showSingle(prompt, wd);\n    }\n\n    /**\n     * Show a file selection dialog. This allows the user to select one file. It\n     * shows a preview component, and has the default filters available.\n     *\n     * @param prompt\n     *          the text string to use for both the title bar and approve button\n     * @return the filename that was selected\n     * @exception UserCancelledException\n     *              if the user cancelled\n     */\n    public static String showSingle(String prompt, String workingDirectory) throws UserCancelledException {\n        // create chooser\n        JFileChooser f = new JFileChooser(workingDirectory);\n        // add filters\n        addFilters(f);\n        // preview component\n        f.setAccessory(new SamplePreview(f));\n        // make the window a resonable size to see everything\n        Dimension dim = App.prefs.getDimensionPref(SINGLE_DIM_PREF, SINGLE_DEFAULT_DIMENSION);\n        f.setPreferredSize(dim);\n        setConfiguredMode(f, SINGLE_VIEWMODE_PREF);\n        // show the dialog\n        int result = f.showDialog(null, prompt);\n        try {\n            if (result == JFileChooser.APPROVE_OPTION) {\n                // ok: store wd, and return file\n                wd = f.getCurrentDirectory().getPath();\n                return f.getSelectedFile().getPath();\n            } else {\n                // cancel\n                throw new UserCancelledException();\n            }\n        } finally {\n            Dimension d = f.getSize();\n            App.prefs.setPref(SINGLE_DIM_PREF, d.width + \",\" + d.height);\n            saveConfiguredMode(f, SINGLE_VIEWMODE_PREF);\n        }\n    }\n\n    // --------------------------------------------------\n    // multi\n    //\n    /**\n     * Show a multiple file selection dialog. This allows the user to select any\n     * number of files. It shows a preview component, and has the default filters\n     * available.\n     *\n     * @param prompt\n     *          the text string to use for both the title bar and approve button\n     * @return a List of filenames that were selected\n     * @exception UserCancelledException\n     *              if the user cancelled\n     */\n    public static List showMulti(String prompt) throws UserCancelledException {\n        // create a new list to use\n        List list = new ArrayList();\n        return showMultiReal(prompt, list);\n    }\n\n    /**\n     * Show a multiple file selection dialog, with a list of files to start with.\n     * This allows the user to select any number of files. It shows a preview\n     * component, and has the default filters available.\n     *\n     * @param prompt\n     *          the text string to use for both the title bar and approve button\n     * @param list\n     *          a List of filenames to have already selected\n     * @return a List of filenames that were selected\n     * @exception UserCancelledException\n     *              if the user cancelled\n     */\n    public static List showMulti(String prompt, List list) throws UserCancelledException {\n        // to edit a list\n        // use the given list\n        return showMultiReal(prompt, list);\n    }\n\n    private static List showMultiReal(String prompt, List list) throws UserCancelledException {\n        // big-preview-list-component-thingy ... yeah.\n        final MultiPreview mp = new MultiPreview(list);\n        // make double-clicking a file call MultiPreview's addClicked() method\n        JFileChooser f = new JFileChooser(wd) {\n\n            public void approveSelection() {\n                // heh heh heh...\n                mp.addClicked();\n            }\n        };\n        // filters\n        addFilters(f);\n        // hide ok/cancel, we'll do that ourselves\n        f.setControlButtonsAreShown(false);\n        // allow multiple selection!\n        f.setMultiSelectionEnabled(true);\n        // preview component + multi-list\n        // add reference to this jfilechooser\n        mp.hook(f);\n        f.setAccessory(mp);\n        // make the window a resonable size to see everything\n        Dimension dim = App.prefs.getDimensionPref(MULTI_DIM_PREF, MULTI_DEFAULT_DIMENSION);\n        f.setPreferredSize(dim);\n        setConfiguredMode(f, MULTI_VIEWMODE_PREF);\n        // show dialog\n        // don't care what the return value is, it's\n        f.showDialog(null, prompt);\n        // always CANCEL\n        Dimension d = f.getSize();\n        App.prefs.setPref(MULTI_DIM_PREF, d.width + \",\" + d.height);\n        saveConfiguredMode(f, MULTI_VIEWMODE_PREF);\n        // store wd, if ok\n        if (mp.getSamples() != null)\n            wd = f.getCurrentDirectory().getPath();\n        // null? have to deal, now.\n        if (mp.getSamples() == null)\n            throw new UserCancelledException();\n        // return samples\n        return mp.getSamples();\n    }\n}\n",
		"id": "/EvoSuiteBenchmark/35_corina/src/main/java/corina/gui/FileDialog_0Test.java",
		"test_prompt": "// FileDialog_0Test.java\n// This file is part of Corina.\n//\n// Corina is free software; you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation; either version 2 of the License, or\n// (at your option) any later version.\n//\n// Corina is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Corina; if not, write to the Free Software\n// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n//\n// Copyright 2001 Ken Harris <kbh7@cornell.edu>\n//\npackage corina.gui;\n\nimport java.awt.Component;\nimport java.awt.Dimension;\nimport java.io.File;\nimport java.util.ArrayList;\nimport java.util.List;\nimport javax.swing.JFileChooser;\nimport javax.swing.JToggleButton;\nimport javax.swing.JToolBar;\nimport javax.swing.UIManager;\nimport javax.swing.filechooser.FileFilter;\nimport corina.core.App;\nimport corina.logging.CorinaLog;\nimport corina.ui.I18n;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link FileDialog}.\n* It contains ten unit test cases for the {@link FileDialog#showSingle(String)} method.\n*/\nclass FileDialog_0Test {"
	},
	{
		"original_code": "// FileDialog.java\n//\n// This file is part of Corina.\n//\n// Corina is free software; you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation; either version 2 of the License, or\n// (at your option) any later version.\n//\n// Corina is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Corina; if not, write to the Free Software\n// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n//\n// Copyright 2001 Ken Harris <kbh7@cornell.edu>\n//\npackage corina.gui;\n\nimport java.awt.Component;\nimport java.awt.Dimension;\nimport java.io.File;\nimport java.util.ArrayList;\nimport java.util.List;\nimport javax.swing.JFileChooser;\nimport javax.swing.JToggleButton;\nimport javax.swing.JToolBar;\nimport javax.swing.UIManager;\nimport javax.swing.filechooser.FileFilter;\nimport corina.core.App;\nimport corina.logging.CorinaLog;\nimport corina.ui.I18n;\n\n/**\n * A wrapper for JFileChooser, providing typical (Corina) usage.\n *\n * <p>\n * Here's what they provide, and why you'd want to use this class over\n * JFileChooser directly:\n * </p>\n *\n * <ul>\n *\n * <li>automatically uses a bunch of default filters</li>\n *\n * <li>gets its initial directory from corina.dir.data; subsequent calls start\n * from the last-used-directory</li>\n *\n * <li>incredibly neat preview component</li>\n *\n * <li>multiple-file-chooser lets the user select several files from one dialog\n * </li>\n *\n * <li>simple return values: a String (for single-selection) or a List of\n * Strings (for multiple-selection), or throws a UserCancelledException if the\n * user cancelled. No need to mess with JFileChooser.APPROVE_OPTION</li>\n *\n * </ul>\n *\n * @see corina.gui.UserCancelledException\n * @see javax.swing.JFileChooser\n *\n * @author Ken Harris &lt;kbh7 <i style=\"color: gray\">at </i> cornell <i\n *         style=\"color: gray\">dot </i> edu&gt;\n * @author Aaron Hamid\n * @version $Id: FileDialog.java,v 1.12 2006/10/08 10:17:51 lucasmo Exp $\n */\npublic class FileDialog {\n\n    private static final Dimension SINGLE_DEFAULT_DIMENSION = new Dimension(640, 480);\n\n    private static final Dimension MULTI_DEFAULT_DIMENSION = new Dimension(640, 480);\n\n    private static final String CLASS_NAME = FileDialog.class.getName();\n\n    private static final String SINGLE_DIM_PREF = CLASS_NAME + \".single.dimension\";\n\n    private static final String MULTI_DIM_PREF = CLASS_NAME + \".double.dimension\";\n\n    private static final String SINGLE_VIEWMODE_PREF = CLASS_NAME + \".single.viewmode\";\n\n    private static final String MULTI_VIEWMODE_PREF = CLASS_NAME + \".double.viewmode\";\n\n    private static final CorinaLog log = new CorinaLog(\"Prefs\");\n\n    private FileDialog() {\n        // (don't instantiate me)\n    }\n\n    private static class ExtensionFilter extends FileFilter {\n\n        private String TLA, tla;\n\n        private String name;\n\n        /**\n         * Create a new filter with the given name, for the given TLA.\n         * @param tla\n         *          3-letter-acronym to match as an extension\n         * @param name\n         *          the name of this filter\n         */\n        public ExtensionFilter(String tla, String name) {\n            this.tla = tla.toLowerCase();\n            this.TLA = tla.toUpperCase();\n            this.name = name + \" (*.\" + this.TLA + \")\";\n        }\n\n        /**\n         * Decide whether this file ends in the given TLA.\n         * @param f\n         *          the file to test\n         * @return true, if and only if the filename ends in the TLA\n         */\n        public boolean accept(File f) {\n            // users can always traverse a directory\n            if (f.isDirectory())\n                return true;\n            // it's okay if it ends with the TLA, either case\n            String filename = f.getName();\n            return (filename.endsWith(tla) || filename.endsWith(TLA));\n        }\n\n        /**\n         * The user-readable description of this filter. Specified as \"name\n         * (*.TLA)\".\n         * @return the user-readable name of this filter\n         */\n        public String getDescription() {\n            return name;\n        }\n    }\n\n    /**\n     * The default list of filters to use, as a list of extensions.\n     */\n    public static String[] FILTERS = new String[] { \"raw\", \"sum\", \"rec\", \"ind\", \"cln\", \"trn\" };\n\n    // add all default filters to this target, and then reset to default (*.*)\n    private static void addFilters(JFileChooser f) {\n        for (int i = 0; i < FILTERS.length; i++) f.addChoosableFileFilter(new ExtensionFilter(FILTERS[i], I18n.getText(\".\" + FILTERS[i])));\n        // REFACTOR: should only need to pass FILTERS[i] to constructor here\n        f.setFileFilter(f.getAcceptAllFileFilter());\n    }\n\n    // working directory -- this gets updated whenever OK is clicked\n    // XXX: can you say race condition - aaron... dependence on static\n    // initializers, data and methods needs to be fixed\n    // If this class is referenced before Prefs is, we are SOL\n    private static String wd = App.prefs.getPref(\"corina.dir.data\");\n\n    /**\n     * This is a big hack to snoop into the JFileChooser GUI, and find\n     * the details view mode button and fire it, so we can preserve\n     * settings.\n     */\n    private static void setConfiguredMode(JFileChooser chooser, String pref) {\n        String v = App.prefs.getPrefs().getProperty(pref, \"list\");\n        if (!\"details\".equals(v))\n            return;\n        Component[] comps = chooser.getComponents();\n        // ok, the JFileChooser contains a JToolBar\n        for (int i = 0; i < comps.length; i++) {\n            if (!(comps[i] instanceof JToolBar))\n                continue;\n            Component[] comps2 = ((JToolBar) comps[i]).getComponents();\n            // and the JToolBar has JToggleButtons\n            for (int j = 0; j < comps2.length; j++) {\n                if (!(comps2[j] instanceof JToggleButton))\n                    continue;\n                JToggleButton tb = (JToggleButton) comps2[j];\n                String s = tb.getAccessibleContext().getAccessibleName();\n                if (s != null && s.equals(UIManager.getString(\"FileChooser.detailsViewButtonAccessibleName\", chooser.getLocale()))) {\n                    tb.doClick();\n                    return;\n                }\n            }\n        }\n    }\n\n    private static void saveConfiguredMode(JFileChooser chooser, String pref) {\n        Component[] comps = chooser.getComponents();\n        // ok, the JFileChooser contains a JToolBar\n        for (int i = 0; i < comps.length; i++) {\n            if (!(comps[i] instanceof JToolBar))\n                continue;\n            Component[] comps2 = ((JToolBar) comps[i]).getComponents();\n            // and the JToolBar has JToggleButtons\n            for (int j = 0; j < comps2.length; j++) {\n                if (!(comps2[j] instanceof JToggleButton))\n                    continue;\n                JToggleButton tb = (JToggleButton) comps2[j];\n                String s = tb.getAccessibleContext().getAccessibleName();\n                if (s != null && s.equals(UIManager.getString(\"FileChooser.detailsViewButtonAccessibleName\", chooser.getLocale()))) {\n                    if (tb.isSelected()) {\n                        App.prefs.getPrefs().setProperty(pref, \"details\");\n                    } else {\n                        App.prefs.getPrefs().setProperty(pref, \"list\");\n                    }\n                }\n            }\n        }\n    }\n\n    /**\n     * Show a file selection dialog. This allows the user to select one file. It\n     * shows a preview component, and has the default filters available.\n     *\n     * @param prompt\n     *          the text string to use for both the title bar and approve button\n     * @return the filename that was selected\n     * @exception UserCancelledException\n     *              if the user cancelled\n     */\n    public static String showSingle(String prompt) throws UserCancelledException {\n        return showSingle(prompt, wd);\n    }\n\n    /**\n     * Show a file selection dialog. This allows the user to select one file. It\n     * shows a preview component, and has the default filters available.\n     *\n     * @param prompt\n     *          the text string to use for both the title bar and approve button\n     * @return the filename that was selected\n     * @exception UserCancelledException\n     *              if the user cancelled\n     */\n    public static String showSingle(String prompt, String workingDirectory) throws UserCancelledException {\n        // create chooser\n        JFileChooser f = new JFileChooser(workingDirectory);\n        // add filters\n        addFilters(f);\n        // preview component\n        f.setAccessory(new SamplePreview(f));\n        // make the window a resonable size to see everything\n        Dimension dim = App.prefs.getDimensionPref(SINGLE_DIM_PREF, SINGLE_DEFAULT_DIMENSION);\n        f.setPreferredSize(dim);\n        setConfiguredMode(f, SINGLE_VIEWMODE_PREF);\n        // show the dialog\n        int result = f.showDialog(null, prompt);\n        try {\n            if (result == JFileChooser.APPROVE_OPTION) {\n                // ok: store wd, and return file\n                wd = f.getCurrentDirectory().getPath();\n                return f.getSelectedFile().getPath();\n            } else {\n                // cancel\n                throw new UserCancelledException();\n            }\n        } finally {\n            Dimension d = f.getSize();\n            App.prefs.setPref(SINGLE_DIM_PREF, d.width + \",\" + d.height);\n            saveConfiguredMode(f, SINGLE_VIEWMODE_PREF);\n        }\n    }\n\n    // --------------------------------------------------\n    // multi\n    //\n    /**\n     * Show a multiple file selection dialog. This allows the user to select any\n     * number of files. It shows a preview component, and has the default filters\n     * available.\n     *\n     * @param prompt\n     *          the text string to use for both the title bar and approve button\n     * @return a List of filenames that were selected\n     * @exception UserCancelledException\n     *              if the user cancelled\n     */\n    public static List showMulti(String prompt) throws UserCancelledException {\n        // create a new list to use\n        List list = new ArrayList();\n        return showMultiReal(prompt, list);\n    }\n\n    /**\n     * Show a multiple file selection dialog, with a list of files to start with.\n     * This allows the user to select any number of files. It shows a preview\n     * component, and has the default filters available.\n     *\n     * @param prompt\n     *          the text string to use for both the title bar and approve button\n     * @param list\n     *          a List of filenames to have already selected\n     * @return a List of filenames that were selected\n     * @exception UserCancelledException\n     *              if the user cancelled\n     */\n    public static List showMulti(String prompt, List list) throws UserCancelledException {\n        // to edit a list\n        // use the given list\n        return showMultiReal(prompt, list);\n    }\n\n    private static List showMultiReal(String prompt, List list) throws UserCancelledException {\n        // big-preview-list-component-thingy ... yeah.\n        final MultiPreview mp = new MultiPreview(list);\n        // make double-clicking a file call MultiPreview's addClicked() method\n        JFileChooser f = new JFileChooser(wd) {\n\n            public void approveSelection() {\n                // heh heh heh...\n                mp.addClicked();\n            }\n        };\n        // filters\n        addFilters(f);\n        // hide ok/cancel, we'll do that ourselves\n        f.setControlButtonsAreShown(false);\n        // allow multiple selection!\n        f.setMultiSelectionEnabled(true);\n        // preview component + multi-list\n        // add reference to this jfilechooser\n        mp.hook(f);\n        f.setAccessory(mp);\n        // make the window a resonable size to see everything\n        Dimension dim = App.prefs.getDimensionPref(MULTI_DIM_PREF, MULTI_DEFAULT_DIMENSION);\n        f.setPreferredSize(dim);\n        setConfiguredMode(f, MULTI_VIEWMODE_PREF);\n        // show dialog\n        // don't care what the return value is, it's\n        f.showDialog(null, prompt);\n        // always CANCEL\n        Dimension d = f.getSize();\n        App.prefs.setPref(MULTI_DIM_PREF, d.width + \",\" + d.height);\n        saveConfiguredMode(f, MULTI_VIEWMODE_PREF);\n        // store wd, if ok\n        if (mp.getSamples() != null)\n            wd = f.getCurrentDirectory().getPath();\n        // null? have to deal, now.\n        if (mp.getSamples() == null)\n            throw new UserCancelledException();\n        // return samples\n        return mp.getSamples();\n    }\n}\n",
		"id": "/EvoSuiteBenchmark/35_corina/src/main/java/corina/gui/FileDialog_1Test.java",
		"test_prompt": "// FileDialog_1Test.java\n// This file is part of Corina.\n//\n// Corina is free software; you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation; either version 2 of the License, or\n// (at your option) any later version.\n//\n// Corina is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Corina; if not, write to the Free Software\n// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n//\n// Copyright 2001 Ken Harris <kbh7@cornell.edu>\n//\npackage corina.gui;\n\nimport java.awt.Component;\nimport java.awt.Dimension;\nimport java.io.File;\nimport java.util.ArrayList;\nimport java.util.List;\nimport javax.swing.JFileChooser;\nimport javax.swing.JToggleButton;\nimport javax.swing.JToolBar;\nimport javax.swing.UIManager;\nimport javax.swing.filechooser.FileFilter;\nimport corina.core.App;\nimport corina.logging.CorinaLog;\nimport corina.ui.I18n;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link FileDialog}.\n* It contains ten unit test cases for the {@link FileDialog#showSingle(String, String)} method.\n*/\nclass FileDialog_1Test {"
	},
	{
		"original_code": "// FileDialog.java\n//\n// This file is part of Corina.\n//\n// Corina is free software; you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation; either version 2 of the License, or\n// (at your option) any later version.\n//\n// Corina is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Corina; if not, write to the Free Software\n// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n//\n// Copyright 2001 Ken Harris <kbh7@cornell.edu>\n//\npackage corina.gui;\n\nimport java.awt.Component;\nimport java.awt.Dimension;\nimport java.io.File;\nimport java.util.ArrayList;\nimport java.util.List;\nimport javax.swing.JFileChooser;\nimport javax.swing.JToggleButton;\nimport javax.swing.JToolBar;\nimport javax.swing.UIManager;\nimport javax.swing.filechooser.FileFilter;\nimport corina.core.App;\nimport corina.logging.CorinaLog;\nimport corina.ui.I18n;\n\n/**\n * A wrapper for JFileChooser, providing typical (Corina) usage.\n *\n * <p>\n * Here's what they provide, and why you'd want to use this class over\n * JFileChooser directly:\n * </p>\n *\n * <ul>\n *\n * <li>automatically uses a bunch of default filters</li>\n *\n * <li>gets its initial directory from corina.dir.data; subsequent calls start\n * from the last-used-directory</li>\n *\n * <li>incredibly neat preview component</li>\n *\n * <li>multiple-file-chooser lets the user select several files from one dialog\n * </li>\n *\n * <li>simple return values: a String (for single-selection) or a List of\n * Strings (for multiple-selection), or throws a UserCancelledException if the\n * user cancelled. No need to mess with JFileChooser.APPROVE_OPTION</li>\n *\n * </ul>\n *\n * @see corina.gui.UserCancelledException\n * @see javax.swing.JFileChooser\n *\n * @author Ken Harris &lt;kbh7 <i style=\"color: gray\">at </i> cornell <i\n *         style=\"color: gray\">dot </i> edu&gt;\n * @author Aaron Hamid\n * @version $Id: FileDialog.java,v 1.12 2006/10/08 10:17:51 lucasmo Exp $\n */\npublic class FileDialog {\n\n    private static final Dimension SINGLE_DEFAULT_DIMENSION = new Dimension(640, 480);\n\n    private static final Dimension MULTI_DEFAULT_DIMENSION = new Dimension(640, 480);\n\n    private static final String CLASS_NAME = FileDialog.class.getName();\n\n    private static final String SINGLE_DIM_PREF = CLASS_NAME + \".single.dimension\";\n\n    private static final String MULTI_DIM_PREF = CLASS_NAME + \".double.dimension\";\n\n    private static final String SINGLE_VIEWMODE_PREF = CLASS_NAME + \".single.viewmode\";\n\n    private static final String MULTI_VIEWMODE_PREF = CLASS_NAME + \".double.viewmode\";\n\n    private static final CorinaLog log = new CorinaLog(\"Prefs\");\n\n    private FileDialog() {\n        // (don't instantiate me)\n    }\n\n    private static class ExtensionFilter extends FileFilter {\n\n        private String TLA, tla;\n\n        private String name;\n\n        /**\n         * Create a new filter with the given name, for the given TLA.\n         * @param tla\n         *          3-letter-acronym to match as an extension\n         * @param name\n         *          the name of this filter\n         */\n        public ExtensionFilter(String tla, String name) {\n            this.tla = tla.toLowerCase();\n            this.TLA = tla.toUpperCase();\n            this.name = name + \" (*.\" + this.TLA + \")\";\n        }\n\n        /**\n         * Decide whether this file ends in the given TLA.\n         * @param f\n         *          the file to test\n         * @return true, if and only if the filename ends in the TLA\n         */\n        public boolean accept(File f) {\n            // users can always traverse a directory\n            if (f.isDirectory())\n                return true;\n            // it's okay if it ends with the TLA, either case\n            String filename = f.getName();\n            return (filename.endsWith(tla) || filename.endsWith(TLA));\n        }\n\n        /**\n         * The user-readable description of this filter. Specified as \"name\n         * (*.TLA)\".\n         * @return the user-readable name of this filter\n         */\n        public String getDescription() {\n            return name;\n        }\n    }\n\n    /**\n     * The default list of filters to use, as a list of extensions.\n     */\n    public static String[] FILTERS = new String[] { \"raw\", \"sum\", \"rec\", \"ind\", \"cln\", \"trn\" };\n\n    // add all default filters to this target, and then reset to default (*.*)\n    private static void addFilters(JFileChooser f) {\n        for (int i = 0; i < FILTERS.length; i++) f.addChoosableFileFilter(new ExtensionFilter(FILTERS[i], I18n.getText(\".\" + FILTERS[i])));\n        // REFACTOR: should only need to pass FILTERS[i] to constructor here\n        f.setFileFilter(f.getAcceptAllFileFilter());\n    }\n\n    // working directory -- this gets updated whenever OK is clicked\n    // XXX: can you say race condition - aaron... dependence on static\n    // initializers, data and methods needs to be fixed\n    // If this class is referenced before Prefs is, we are SOL\n    private static String wd = App.prefs.getPref(\"corina.dir.data\");\n\n    /**\n     * This is a big hack to snoop into the JFileChooser GUI, and find\n     * the details view mode button and fire it, so we can preserve\n     * settings.\n     */\n    private static void setConfiguredMode(JFileChooser chooser, String pref) {\n        String v = App.prefs.getPrefs().getProperty(pref, \"list\");\n        if (!\"details\".equals(v))\n            return;\n        Component[] comps = chooser.getComponents();\n        // ok, the JFileChooser contains a JToolBar\n        for (int i = 0; i < comps.length; i++) {\n            if (!(comps[i] instanceof JToolBar))\n                continue;\n            Component[] comps2 = ((JToolBar) comps[i]).getComponents();\n            // and the JToolBar has JToggleButtons\n            for (int j = 0; j < comps2.length; j++) {\n                if (!(comps2[j] instanceof JToggleButton))\n                    continue;\n                JToggleButton tb = (JToggleButton) comps2[j];\n                String s = tb.getAccessibleContext().getAccessibleName();\n                if (s != null && s.equals(UIManager.getString(\"FileChooser.detailsViewButtonAccessibleName\", chooser.getLocale()))) {\n                    tb.doClick();\n                    return;\n                }\n            }\n        }\n    }\n\n    private static void saveConfiguredMode(JFileChooser chooser, String pref) {\n        Component[] comps = chooser.getComponents();\n        // ok, the JFileChooser contains a JToolBar\n        for (int i = 0; i < comps.length; i++) {\n            if (!(comps[i] instanceof JToolBar))\n                continue;\n            Component[] comps2 = ((JToolBar) comps[i]).getComponents();\n            // and the JToolBar has JToggleButtons\n            for (int j = 0; j < comps2.length; j++) {\n                if (!(comps2[j] instanceof JToggleButton))\n                    continue;\n                JToggleButton tb = (JToggleButton) comps2[j];\n                String s = tb.getAccessibleContext().getAccessibleName();\n                if (s != null && s.equals(UIManager.getString(\"FileChooser.detailsViewButtonAccessibleName\", chooser.getLocale()))) {\n                    if (tb.isSelected()) {\n                        App.prefs.getPrefs().setProperty(pref, \"details\");\n                    } else {\n                        App.prefs.getPrefs().setProperty(pref, \"list\");\n                    }\n                }\n            }\n        }\n    }\n\n    /**\n     * Show a file selection dialog. This allows the user to select one file. It\n     * shows a preview component, and has the default filters available.\n     *\n     * @param prompt\n     *          the text string to use for both the title bar and approve button\n     * @return the filename that was selected\n     * @exception UserCancelledException\n     *              if the user cancelled\n     */\n    public static String showSingle(String prompt) throws UserCancelledException {\n        return showSingle(prompt, wd);\n    }\n\n    /**\n     * Show a file selection dialog. This allows the user to select one file. It\n     * shows a preview component, and has the default filters available.\n     *\n     * @param prompt\n     *          the text string to use for both the title bar and approve button\n     * @return the filename that was selected\n     * @exception UserCancelledException\n     *              if the user cancelled\n     */\n    public static String showSingle(String prompt, String workingDirectory) throws UserCancelledException {\n        // create chooser\n        JFileChooser f = new JFileChooser(workingDirectory);\n        // add filters\n        addFilters(f);\n        // preview component\n        f.setAccessory(new SamplePreview(f));\n        // make the window a resonable size to see everything\n        Dimension dim = App.prefs.getDimensionPref(SINGLE_DIM_PREF, SINGLE_DEFAULT_DIMENSION);\n        f.setPreferredSize(dim);\n        setConfiguredMode(f, SINGLE_VIEWMODE_PREF);\n        // show the dialog\n        int result = f.showDialog(null, prompt);\n        try {\n            if (result == JFileChooser.APPROVE_OPTION) {\n                // ok: store wd, and return file\n                wd = f.getCurrentDirectory().getPath();\n                return f.getSelectedFile().getPath();\n            } else {\n                // cancel\n                throw new UserCancelledException();\n            }\n        } finally {\n            Dimension d = f.getSize();\n            App.prefs.setPref(SINGLE_DIM_PREF, d.width + \",\" + d.height);\n            saveConfiguredMode(f, SINGLE_VIEWMODE_PREF);\n        }\n    }\n\n    // --------------------------------------------------\n    // multi\n    //\n    /**\n     * Show a multiple file selection dialog. This allows the user to select any\n     * number of files. It shows a preview component, and has the default filters\n     * available.\n     *\n     * @param prompt\n     *          the text string to use for both the title bar and approve button\n     * @return a List of filenames that were selected\n     * @exception UserCancelledException\n     *              if the user cancelled\n     */\n    public static List showMulti(String prompt) throws UserCancelledException {\n        // create a new list to use\n        List list = new ArrayList();\n        return showMultiReal(prompt, list);\n    }\n\n    /**\n     * Show a multiple file selection dialog, with a list of files to start with.\n     * This allows the user to select any number of files. It shows a preview\n     * component, and has the default filters available.\n     *\n     * @param prompt\n     *          the text string to use for both the title bar and approve button\n     * @param list\n     *          a List of filenames to have already selected\n     * @return a List of filenames that were selected\n     * @exception UserCancelledException\n     *              if the user cancelled\n     */\n    public static List showMulti(String prompt, List list) throws UserCancelledException {\n        // to edit a list\n        // use the given list\n        return showMultiReal(prompt, list);\n    }\n\n    private static List showMultiReal(String prompt, List list) throws UserCancelledException {\n        // big-preview-list-component-thingy ... yeah.\n        final MultiPreview mp = new MultiPreview(list);\n        // make double-clicking a file call MultiPreview's addClicked() method\n        JFileChooser f = new JFileChooser(wd) {\n\n            public void approveSelection() {\n                // heh heh heh...\n                mp.addClicked();\n            }\n        };\n        // filters\n        addFilters(f);\n        // hide ok/cancel, we'll do that ourselves\n        f.setControlButtonsAreShown(false);\n        // allow multiple selection!\n        f.setMultiSelectionEnabled(true);\n        // preview component + multi-list\n        // add reference to this jfilechooser\n        mp.hook(f);\n        f.setAccessory(mp);\n        // make the window a resonable size to see everything\n        Dimension dim = App.prefs.getDimensionPref(MULTI_DIM_PREF, MULTI_DEFAULT_DIMENSION);\n        f.setPreferredSize(dim);\n        setConfiguredMode(f, MULTI_VIEWMODE_PREF);\n        // show dialog\n        // don't care what the return value is, it's\n        f.showDialog(null, prompt);\n        // always CANCEL\n        Dimension d = f.getSize();\n        App.prefs.setPref(MULTI_DIM_PREF, d.width + \",\" + d.height);\n        saveConfiguredMode(f, MULTI_VIEWMODE_PREF);\n        // store wd, if ok\n        if (mp.getSamples() != null)\n            wd = f.getCurrentDirectory().getPath();\n        // null? have to deal, now.\n        if (mp.getSamples() == null)\n            throw new UserCancelledException();\n        // return samples\n        return mp.getSamples();\n    }\n}\n",
		"id": "/EvoSuiteBenchmark/35_corina/src/main/java/corina/gui/FileDialog_2Test.java",
		"test_prompt": "// FileDialog_2Test.java\n// This file is part of Corina.\n//\n// Corina is free software; you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation; either version 2 of the License, or\n// (at your option) any later version.\n//\n// Corina is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Corina; if not, write to the Free Software\n// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n//\n// Copyright 2001 Ken Harris <kbh7@cornell.edu>\n//\npackage corina.gui;\n\nimport java.awt.Component;\nimport java.awt.Dimension;\nimport java.io.File;\nimport java.util.ArrayList;\nimport java.util.List;\nimport javax.swing.JFileChooser;\nimport javax.swing.JToggleButton;\nimport javax.swing.JToolBar;\nimport javax.swing.UIManager;\nimport javax.swing.filechooser.FileFilter;\nimport corina.core.App;\nimport corina.logging.CorinaLog;\nimport corina.ui.I18n;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link FileDialog}.\n* It contains ten unit test cases for the {@link FileDialog#showMulti(String)} method.\n*/\nclass FileDialog_2Test {"
	},
	{
		"original_code": "// FileDialog.java\n//\n// This file is part of Corina.\n//\n// Corina is free software; you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation; either version 2 of the License, or\n// (at your option) any later version.\n//\n// Corina is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Corina; if not, write to the Free Software\n// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n//\n// Copyright 2001 Ken Harris <kbh7@cornell.edu>\n//\npackage corina.gui;\n\nimport java.awt.Component;\nimport java.awt.Dimension;\nimport java.io.File;\nimport java.util.ArrayList;\nimport java.util.List;\nimport javax.swing.JFileChooser;\nimport javax.swing.JToggleButton;\nimport javax.swing.JToolBar;\nimport javax.swing.UIManager;\nimport javax.swing.filechooser.FileFilter;\nimport corina.core.App;\nimport corina.logging.CorinaLog;\nimport corina.ui.I18n;\n\n/**\n * A wrapper for JFileChooser, providing typical (Corina) usage.\n *\n * <p>\n * Here's what they provide, and why you'd want to use this class over\n * JFileChooser directly:\n * </p>\n *\n * <ul>\n *\n * <li>automatically uses a bunch of default filters</li>\n *\n * <li>gets its initial directory from corina.dir.data; subsequent calls start\n * from the last-used-directory</li>\n *\n * <li>incredibly neat preview component</li>\n *\n * <li>multiple-file-chooser lets the user select several files from one dialog\n * </li>\n *\n * <li>simple return values: a String (for single-selection) or a List of\n * Strings (for multiple-selection), or throws a UserCancelledException if the\n * user cancelled. No need to mess with JFileChooser.APPROVE_OPTION</li>\n *\n * </ul>\n *\n * @see corina.gui.UserCancelledException\n * @see javax.swing.JFileChooser\n *\n * @author Ken Harris &lt;kbh7 <i style=\"color: gray\">at </i> cornell <i\n *         style=\"color: gray\">dot </i> edu&gt;\n * @author Aaron Hamid\n * @version $Id: FileDialog.java,v 1.12 2006/10/08 10:17:51 lucasmo Exp $\n */\npublic class FileDialog {\n\n    private static final Dimension SINGLE_DEFAULT_DIMENSION = new Dimension(640, 480);\n\n    private static final Dimension MULTI_DEFAULT_DIMENSION = new Dimension(640, 480);\n\n    private static final String CLASS_NAME = FileDialog.class.getName();\n\n    private static final String SINGLE_DIM_PREF = CLASS_NAME + \".single.dimension\";\n\n    private static final String MULTI_DIM_PREF = CLASS_NAME + \".double.dimension\";\n\n    private static final String SINGLE_VIEWMODE_PREF = CLASS_NAME + \".single.viewmode\";\n\n    private static final String MULTI_VIEWMODE_PREF = CLASS_NAME + \".double.viewmode\";\n\n    private static final CorinaLog log = new CorinaLog(\"Prefs\");\n\n    private FileDialog() {\n        // (don't instantiate me)\n    }\n\n    private static class ExtensionFilter extends FileFilter {\n\n        private String TLA, tla;\n\n        private String name;\n\n        /**\n         * Create a new filter with the given name, for the given TLA.\n         * @param tla\n         *          3-letter-acronym to match as an extension\n         * @param name\n         *          the name of this filter\n         */\n        public ExtensionFilter(String tla, String name) {\n            this.tla = tla.toLowerCase();\n            this.TLA = tla.toUpperCase();\n            this.name = name + \" (*.\" + this.TLA + \")\";\n        }\n\n        /**\n         * Decide whether this file ends in the given TLA.\n         * @param f\n         *          the file to test\n         * @return true, if and only if the filename ends in the TLA\n         */\n        public boolean accept(File f) {\n            // users can always traverse a directory\n            if (f.isDirectory())\n                return true;\n            // it's okay if it ends with the TLA, either case\n            String filename = f.getName();\n            return (filename.endsWith(tla) || filename.endsWith(TLA));\n        }\n\n        /**\n         * The user-readable description of this filter. Specified as \"name\n         * (*.TLA)\".\n         * @return the user-readable name of this filter\n         */\n        public String getDescription() {\n            return name;\n        }\n    }\n\n    /**\n     * The default list of filters to use, as a list of extensions.\n     */\n    public static String[] FILTERS = new String[] { \"raw\", \"sum\", \"rec\", \"ind\", \"cln\", \"trn\" };\n\n    // add all default filters to this target, and then reset to default (*.*)\n    private static void addFilters(JFileChooser f) {\n        for (int i = 0; i < FILTERS.length; i++) f.addChoosableFileFilter(new ExtensionFilter(FILTERS[i], I18n.getText(\".\" + FILTERS[i])));\n        // REFACTOR: should only need to pass FILTERS[i] to constructor here\n        f.setFileFilter(f.getAcceptAllFileFilter());\n    }\n\n    // working directory -- this gets updated whenever OK is clicked\n    // XXX: can you say race condition - aaron... dependence on static\n    // initializers, data and methods needs to be fixed\n    // If this class is referenced before Prefs is, we are SOL\n    private static String wd = App.prefs.getPref(\"corina.dir.data\");\n\n    /**\n     * This is a big hack to snoop into the JFileChooser GUI, and find\n     * the details view mode button and fire it, so we can preserve\n     * settings.\n     */\n    private static void setConfiguredMode(JFileChooser chooser, String pref) {\n        String v = App.prefs.getPrefs().getProperty(pref, \"list\");\n        if (!\"details\".equals(v))\n            return;\n        Component[] comps = chooser.getComponents();\n        // ok, the JFileChooser contains a JToolBar\n        for (int i = 0; i < comps.length; i++) {\n            if (!(comps[i] instanceof JToolBar))\n                continue;\n            Component[] comps2 = ((JToolBar) comps[i]).getComponents();\n            // and the JToolBar has JToggleButtons\n            for (int j = 0; j < comps2.length; j++) {\n                if (!(comps2[j] instanceof JToggleButton))\n                    continue;\n                JToggleButton tb = (JToggleButton) comps2[j];\n                String s = tb.getAccessibleContext().getAccessibleName();\n                if (s != null && s.equals(UIManager.getString(\"FileChooser.detailsViewButtonAccessibleName\", chooser.getLocale()))) {\n                    tb.doClick();\n                    return;\n                }\n            }\n        }\n    }\n\n    private static void saveConfiguredMode(JFileChooser chooser, String pref) {\n        Component[] comps = chooser.getComponents();\n        // ok, the JFileChooser contains a JToolBar\n        for (int i = 0; i < comps.length; i++) {\n            if (!(comps[i] instanceof JToolBar))\n                continue;\n            Component[] comps2 = ((JToolBar) comps[i]).getComponents();\n            // and the JToolBar has JToggleButtons\n            for (int j = 0; j < comps2.length; j++) {\n                if (!(comps2[j] instanceof JToggleButton))\n                    continue;\n                JToggleButton tb = (JToggleButton) comps2[j];\n                String s = tb.getAccessibleContext().getAccessibleName();\n                if (s != null && s.equals(UIManager.getString(\"FileChooser.detailsViewButtonAccessibleName\", chooser.getLocale()))) {\n                    if (tb.isSelected()) {\n                        App.prefs.getPrefs().setProperty(pref, \"details\");\n                    } else {\n                        App.prefs.getPrefs().setProperty(pref, \"list\");\n                    }\n                }\n            }\n        }\n    }\n\n    /**\n     * Show a file selection dialog. This allows the user to select one file. It\n     * shows a preview component, and has the default filters available.\n     *\n     * @param prompt\n     *          the text string to use for both the title bar and approve button\n     * @return the filename that was selected\n     * @exception UserCancelledException\n     *              if the user cancelled\n     */\n    public static String showSingle(String prompt) throws UserCancelledException {\n        return showSingle(prompt, wd);\n    }\n\n    /**\n     * Show a file selection dialog. This allows the user to select one file. It\n     * shows a preview component, and has the default filters available.\n     *\n     * @param prompt\n     *          the text string to use for both the title bar and approve button\n     * @return the filename that was selected\n     * @exception UserCancelledException\n     *              if the user cancelled\n     */\n    public static String showSingle(String prompt, String workingDirectory) throws UserCancelledException {\n        // create chooser\n        JFileChooser f = new JFileChooser(workingDirectory);\n        // add filters\n        addFilters(f);\n        // preview component\n        f.setAccessory(new SamplePreview(f));\n        // make the window a resonable size to see everything\n        Dimension dim = App.prefs.getDimensionPref(SINGLE_DIM_PREF, SINGLE_DEFAULT_DIMENSION);\n        f.setPreferredSize(dim);\n        setConfiguredMode(f, SINGLE_VIEWMODE_PREF);\n        // show the dialog\n        int result = f.showDialog(null, prompt);\n        try {\n            if (result == JFileChooser.APPROVE_OPTION) {\n                // ok: store wd, and return file\n                wd = f.getCurrentDirectory().getPath();\n                return f.getSelectedFile().getPath();\n            } else {\n                // cancel\n                throw new UserCancelledException();\n            }\n        } finally {\n            Dimension d = f.getSize();\n            App.prefs.setPref(SINGLE_DIM_PREF, d.width + \",\" + d.height);\n            saveConfiguredMode(f, SINGLE_VIEWMODE_PREF);\n        }\n    }\n\n    // --------------------------------------------------\n    // multi\n    //\n    /**\n     * Show a multiple file selection dialog. This allows the user to select any\n     * number of files. It shows a preview component, and has the default filters\n     * available.\n     *\n     * @param prompt\n     *          the text string to use for both the title bar and approve button\n     * @return a List of filenames that were selected\n     * @exception UserCancelledException\n     *              if the user cancelled\n     */\n    public static List showMulti(String prompt) throws UserCancelledException {\n        // create a new list to use\n        List list = new ArrayList();\n        return showMultiReal(prompt, list);\n    }\n\n    /**\n     * Show a multiple file selection dialog, with a list of files to start with.\n     * This allows the user to select any number of files. It shows a preview\n     * component, and has the default filters available.\n     *\n     * @param prompt\n     *          the text string to use for both the title bar and approve button\n     * @param list\n     *          a List of filenames to have already selected\n     * @return a List of filenames that were selected\n     * @exception UserCancelledException\n     *              if the user cancelled\n     */\n    public static List showMulti(String prompt, List list) throws UserCancelledException {\n        // to edit a list\n        // use the given list\n        return showMultiReal(prompt, list);\n    }\n\n    private static List showMultiReal(String prompt, List list) throws UserCancelledException {\n        // big-preview-list-component-thingy ... yeah.\n        final MultiPreview mp = new MultiPreview(list);\n        // make double-clicking a file call MultiPreview's addClicked() method\n        JFileChooser f = new JFileChooser(wd) {\n\n            public void approveSelection() {\n                // heh heh heh...\n                mp.addClicked();\n            }\n        };\n        // filters\n        addFilters(f);\n        // hide ok/cancel, we'll do that ourselves\n        f.setControlButtonsAreShown(false);\n        // allow multiple selection!\n        f.setMultiSelectionEnabled(true);\n        // preview component + multi-list\n        // add reference to this jfilechooser\n        mp.hook(f);\n        f.setAccessory(mp);\n        // make the window a resonable size to see everything\n        Dimension dim = App.prefs.getDimensionPref(MULTI_DIM_PREF, MULTI_DEFAULT_DIMENSION);\n        f.setPreferredSize(dim);\n        setConfiguredMode(f, MULTI_VIEWMODE_PREF);\n        // show dialog\n        // don't care what the return value is, it's\n        f.showDialog(null, prompt);\n        // always CANCEL\n        Dimension d = f.getSize();\n        App.prefs.setPref(MULTI_DIM_PREF, d.width + \",\" + d.height);\n        saveConfiguredMode(f, MULTI_VIEWMODE_PREF);\n        // store wd, if ok\n        if (mp.getSamples() != null)\n            wd = f.getCurrentDirectory().getPath();\n        // null? have to deal, now.\n        if (mp.getSamples() == null)\n            throw new UserCancelledException();\n        // return samples\n        return mp.getSamples();\n    }\n}\n",
		"id": "/EvoSuiteBenchmark/35_corina/src/main/java/corina/gui/FileDialog_3Test.java",
		"test_prompt": "// FileDialog_3Test.java\n// This file is part of Corina.\n//\n// Corina is free software; you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation; either version 2 of the License, or\n// (at your option) any later version.\n//\n// Corina is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Corina; if not, write to the Free Software\n// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n//\n// Copyright 2001 Ken Harris <kbh7@cornell.edu>\n//\npackage corina.gui;\n\nimport java.awt.Component;\nimport java.awt.Dimension;\nimport java.io.File;\nimport java.util.ArrayList;\nimport java.util.List;\nimport javax.swing.JFileChooser;\nimport javax.swing.JToggleButton;\nimport javax.swing.JToolBar;\nimport javax.swing.UIManager;\nimport javax.swing.filechooser.FileFilter;\nimport corina.core.App;\nimport corina.logging.CorinaLog;\nimport corina.ui.I18n;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link FileDialog}.\n* It contains ten unit test cases for the {@link FileDialog#showMulti(String, List)} method.\n*/\nclass FileDialog_3Test {"
	},
	{
		"original_code": "// AboutBox.java\n//\n// This file is part of Corina.\n//\n// Corina is free software; you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation; either version 2 of the License, or\n// (at your option) any later version.\n//\n// Corina is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Corina; if not, write to the Free Software\n// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n//\n// Copyright 2001 Ken Harris <kbh7@cornell.edu>\n//\npackage corina.gui;\n\nimport java.awt.BorderLayout;\nimport java.awt.Component;\nimport java.awt.Font;\nimport java.awt.event.KeyAdapter;\nimport java.awt.event.KeyEvent;\nimport java.io.BufferedReader;\nimport java.io.IOException;\nimport java.io.StringReader;\nimport java.text.MessageFormat;\nimport javax.swing.Box;\nimport javax.swing.BoxLayout;\nimport javax.swing.Icon;\nimport javax.swing.JDialog;\nimport javax.swing.JLabel;\nimport javax.swing.JPanel;\nimport javax.swing.SwingConstants;\nimport corina.Build;\nimport corina.ui.Builder;\nimport corina.ui.I18n;\nimport corina.util.Center;\n\n/**\n * About-box for Corina.\n *\n * <p>\n * This has the unique feature that, because there should only ever be one\n * about-box, creating a second instance simply shows the first one again.\n * (Magic.)\n * </p>\n *\n * <h2>Left to do</h2>\n * <ul>\n * <li>do version/year/author belong in corina.Version or Build.java?\n * <li>there's refactoring to be done here...\n * </ul>\n *\n * @author Ken Harris &lt;kbh7 <i style=\"color: gray\">at </i> cornell <i\n *         style=\"color: gray\">dot </i> edu&gt;\n * @version $Id: AboutBox.java,v 1.6 2004/09/29 16:08:57 aaron Exp $\n */\npublic class AboutBox extends JDialog {\n\n    private static AboutBox instance = null;\n\n    // fonts for various parts -- sizes/styles from aqua/hig\n    // use these fonts, or use relative sizes?\n    private static final Font nameFont = new Font(\"sansserif\", Font.BOLD, 14);\n\n    private static final Font versionFont = new Font(\"sansserif\", Font.PLAIN, 10);\n\n    private static final Font descriptionFont = new Font(\"sansserif\", Font.PLAIN, 11);\n\n    private static final Font copyrightFont = new Font(\"sansserif\", Font.PLAIN, 10);\n\n    public static synchronized AboutBox getInstance() {\n        if (instance == null) {\n            instance = new AboutBox();\n        }\n        return instance;\n    }\n\n    // add the icon and name: centered\n    private static void addName(JPanel box) {\n        JLabel name = new JLabel(\"Corina\");\n        {\n            // (add icon to name)\n            Icon icon = Builder.getIcon(\"Tree.png\");\n            if (icon != null) {\n                name.setIcon(icon);\n            }\n            name.setHorizontalTextPosition(SwingConstants.CENTER);\n            name.setVerticalTextPosition(SwingConstants.BOTTOM);\n            name.setIconTextGap(12);\n        }\n        name.setHorizontalAlignment(SwingConstants.CENTER);\n        name.setFont(nameFont);\n        name.setAlignmentX(Component.CENTER_ALIGNMENT);\n        box.add(name);\n    }\n\n    // add the version number: centered\n    private static void addVersion(JPanel box) {\n        String text = MessageFormat.format(I18n.getText(\"version\"), new Object[] { Build.VERSION });\n        JLabel version = new JLabel(text);\n        version.setFont(versionFont);\n        version.setAlignmentX(Component.CENTER_ALIGNMENT);\n        box.add(version);\n    }\n\n    // add timestamp\n    private static void addTimestamp(JPanel box) {\n        String text = MessageFormat.format(I18n.getText(\"timestamp\"), new Object[] { Build.TIMESTAMP });\n        JLabel timestamp = new JLabel(text);\n        timestamp.setFont(versionFont);\n        timestamp.setAlignmentX(Component.CENTER_ALIGNMENT);\n        box.add(timestamp);\n    }\n\n    // add the description: flush left\n    private static void addDescription(JPanel box) {\n        // get from bundle\n        final String description = I18n.getText(\"description\");\n        JPanel descriptionBlock = new JPanel();\n        descriptionBlock.setLayout(new BoxLayout(descriptionBlock, BoxLayout.Y_AXIS));\n        box.add(descriptionBlock);\n        descriptionBlock.setAlignmentX(Component.CENTER_ALIGNMENT);\n        // extract line at a time (would a stringtok on \\n\\r be simpler?)\n        // BETTER: i have a method to do this, somewhere...\n        BufferedReader r = new BufferedReader(new StringReader(description));\n        String line;\n        for (; ; ) {\n            try {\n                line = r.readLine();\n            } catch (IOException ioe) {\n                // can't happen?\n                break;\n            }\n            if (line == null)\n                break;\n            // add one line\n            JLabel descriptionLabel = new JLabel(line);\n            descriptionLabel.setFont(descriptionFont);\n            descriptionBlock.add(descriptionLabel);\n        }\n    }\n\n    // add the copyright notice: centered\n    private static void addCopyright(JPanel box) {\n        // get from bundle\n        final String description = I18n.getText(\"copyright\");\n        JPanel copyrightBlock = new JPanel();\n        copyrightBlock.setLayout(new BoxLayout(copyrightBlock, BoxLayout.Y_AXIS));\n        box.add(copyrightBlock);\n        copyrightBlock.setAlignmentX(Component.CENTER_ALIGNMENT);\n        // extract line at a time\n        BufferedReader r = new BufferedReader(new StringReader(description));\n        String line;\n        for (; ; ) {\n            try {\n                line = r.readLine();\n            } catch (IOException ioe) {\n                // can't happen?\n                break;\n            }\n            if (line == null)\n                break;\n            String subst = MessageFormat.format(line, new Object[] { Build.YEAR, Build.AUTHOR });\n            JLabel copyrightLabel = new JLabel(subst);\n            copyrightLabel.setAlignmentX(Component.CENTER_ALIGNMENT);\n            copyrightLabel.setFont(copyrightFont);\n            copyrightBlock.add(copyrightLabel);\n        }\n    }\n\n    // add extra space between components\n    private static void addSpace(JPanel box, int pixels) {\n        box.add(Box.createVerticalStrut(pixels));\n    }\n\n    private AboutBox() {\n        // no icon?\n        setTitle(\"About Corina\");\n        // layout: top-to-bottom\n        JPanel box = new JPanel();\n        box.setLayout(new BoxLayout(box, BoxLayout.Y_AXIS));\n        getContentPane().add(box, BorderLayout.CENTER);\n        // spacers on the sides\n        getContentPane().add(Box.createHorizontalStrut(24), BorderLayout.WEST);\n        getContentPane().add(Box.createHorizontalStrut(24), BorderLayout.EAST);\n        // put content into box\n        addSpace(box, 8);\n        addName(box);\n        addSpace(box, 8);\n        addVersion(box);\n        addTimestamp(box);\n        addSpace(box, 8);\n        addDescription(box);\n        addSpace(box, 8);\n        addCopyright(box);\n        addSpace(box, 20);\n        // can't resize -- does this get rid of minimize/maximize buttons?\n        setResizable(false);\n        addKeyListener(new KeyAdapter() {\n\n            public void keyPressed(KeyEvent ke) {\n                if (ke.getKeyCode() == KeyEvent.VK_ESCAPE) {\n                    hide();\n                }\n            }\n        });\n        // pack\n        pack();\n        // center it\n        Center.center(this);\n        // see also PrefsDialog -- PrefsDialog and AboutBox should subclass\n        // the same class, maybe gui.SingletonDialog? REFACTOR.\n    }\n}\n",
		"id": "/EvoSuiteBenchmark/35_corina/src/main/java/corina/gui/AboutBox.java",
		"test_prompt": "// AboutBoxTest.java\n// This file is part of Corina.\n//\n// Corina is free software; you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation; either version 2 of the License, or\n// (at your option) any later version.\n//\n// Corina is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Corina; if not, write to the Free Software\n// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n//\n// Copyright 2001 Ken Harris <kbh7@cornell.edu>\n//\npackage corina.gui;\n\nimport java.awt.BorderLayout;\nimport java.awt.Component;\nimport java.awt.Font;\nimport java.awt.event.KeyAdapter;\nimport java.awt.event.KeyEvent;\nimport java.io.BufferedReader;\nimport java.io.IOException;\nimport java.io.StringReader;\nimport java.text.MessageFormat;\nimport javax.swing.Box;\nimport javax.swing.BoxLayout;\nimport javax.swing.Icon;\nimport javax.swing.JDialog;\nimport javax.swing.JLabel;\nimport javax.swing.JPanel;\nimport javax.swing.SwingConstants;\nimport corina.Build;\nimport corina.ui.Builder;\nimport corina.ui.I18n;\nimport corina.util.Center;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link AboutBox}.\n* It contains ten unit test cases for the {@link AboutBox#getInstance()} method.\n*/\nclass AboutBoxTest {"
	},
	{
		"original_code": "// ButtonLayout.java\n//\n// This file is part of Corina.\n//\n// Corina is free software; you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation; either version 2 of the License, or\n// (at your option) any later version.\n//\n// Corina is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Corina; if not, write to the Free Software\n// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n//\n// Copyright 2003 Ken Harris <kbh7@cornell.edu>\n//\npackage corina.gui.layouts;\n\nimport java.awt.LayoutManager;\nimport java.awt.Component;\nimport java.awt.Container;\nimport java.awt.Dimension;\nimport java.awt.Insets;\n\n/**\n *     Make components equal-width, and right-aligned.\n *\n *     <p>The most common example:</p>\n *\n *     <table border=\"1\" cellspacing=\"0\" width=\"100%\">\n *       <tr>\n *         <td align=\"right\">\n *\n *         <table border=\"1\" cellspacing=\"0\">\n *           <tr>\n *             <td width=\"20%\" align=\"center\">Cancel</td>\n *             <td width=\"20%\" align=\"center\"><b>OK</b></td>\n *           </tr>\n *         </table>\n *\n *         </td>\n *       </tr>\n *     </table>\n *\n *     <p>This is how <a href=\"http://???\">Apple's Human Interface Guidelines</a> suggest placing\n *     buttons.  Even <a href=\"http://???\">Sun's Java guidelines</a> suggest this, yet they provide\n *     no easy way to do it, nor do their demo examples follow it.  (The\n *     easiest way is to put a GridLayout in a right-aligned FlowLayout,\n *     and adjust the spacing.)</p>\n *\n *     <p>The most common use of this is, of course, for buttons.  Put\n *     them in the SOUTH of a BorderLayout, and you're set.</p>\n *\n *     <p>An easy way to use this is via the Layout class.  You can make a\n *     panel with a few buttons simply by saying</p>\n *\n * <pre>\n *     JPanel buttons = Layout.buttonLayout(cancel, ok);\n * </pre>\n *\n *     <p>Sometimes you'll want some buttons on the left, and the rest on\n *     the right.  You can put a gap in the layout by passing either null\n *     or a glue object (as created by Box.createHorizontalGlue()).</p>\n *\n * <pre>\n *     JPanel buttons = Layout.buttonLayout(help, null, cancel, ok);\n * </pre>\n *\n *     <p>This layout will put an appropriate amount of space between the\n *     buttons, but won't put any space around the outside of the buttons.\n *     You'll probably want a space around the entire window, anyway.</p>\n *\n *     <h2>Left to do:</h2>\n *     <ul>\n *         <li>look up URLs\n *         <li>if rightmost buttons are \"cancel\" and \"ok\" (either order),\n *             make put them in the order \"ok\"-\"cancel\" on win32, \"cancel\"-\"ok\" on mac.\n *             (what to do on unix?)  (is that really better?)\n *         <li>refactor -- it's a bit confusing\n *     </ul>\n *\n *     @see java.awt.BorderLayout\n *     @see corina.gui.Layout\n *\n *     @author Ken Harris &lt;kbh7 <i style=\"color: gray\">at</i> cornell <i style=\"color: gray\">dot</i> edu&gt;\n *     @version $Id: ButtonLayout.java,v 1.1 2004/01/18 18:02:06 aaron Exp $\n */\npublic class ButtonLayout implements LayoutManager {\n\n    /**\n     *       Make a new ButtonLayout.\n     */\n    public ButtonLayout() {\n        // (needed only for a place to put the javadoc comment)\n    }\n\n    // suggests apple\n    private static final int LEADING = 12;\n\n    // fixme:\n    // -- if there's a glue component (has maxwidth>1000),\n    // \t-- align items before glue to left edge\n    // \t-- align items after glue to right edge\n    // -- (but still maintain consistent width for all items except glue)\n    // REFACTOR!  i can't figure out how this mess works any more.\n    /**\n     *       Lay out the components in the specified container.\n     *\n     *       @param parent the container to lay out the components in\n     */\n    public void layoutContainer(Container parent) {\n        Insets border = parent.getInsets();\n        synchronized (parent.getTreeLock()) {\n            int maxwidth = 0;\n            int n = parent.getComponentCount();\n            int glueIndex = -1;\n            // nn is like n, but doesn't count glue\n            int nn = 0;\n            for (int i = 0; i < n; i++) {\n                // first pass: measure\n                Component m = parent.getComponent(i);\n                if (m.getMaximumSize().width > 32000) {\n                    // is-a glue object\n                    glueIndex = i;\n                    continue;\n                }\n                if (m.isVisible()) {\n                    Dimension d = m.getPreferredSize();\n                    maxwidth = Math.max(maxwidth, d.width);\n                    if (glueIndex != -1)\n                        nn++;\n                }\n            }\n            if (// if they're only on the right side...\n            nn == 0)\n                nn = n;\n            int wholeWidth = nn * maxwidth + (nn - 1) * LEADING;\n            boolean beforeGlue = (glueIndex != -1);\n            int j = 0;\n            for (int i = 0; i < n; i++) {\n                // second pass: cut\n                Component m = parent.getComponent(i);\n                if (i == glueIndex) {\n                    beforeGlue = false;\n                    continue;\n                }\n                if (m.isVisible()) {\n                    Dimension d = m.getPreferredSize();\n                    m.setSize(maxwidth, d.height);\n                    if (beforeGlue) {\n                        m.setLocation(border.left + i * (maxwidth + LEADING), border.top);\n                    } else {\n                        int x = parent.getWidth() - wholeWidth - border.right + j * (maxwidth + LEADING);\n                        m.setLocation(parent.getWidth() - wholeWidth - border.right + j * (maxwidth + LEADING), border.top);\n                        // j is like i, but doesn't count the glue\n                        j++;\n                    }\n                }\n            }\n        }\n    }\n\n    // used by getLayoutSize() -- i make one here so i don't\n    // have to make a new one each time the container is laid out\n    // (which would cause lots of garbage to be created).\n    private Dimension d = new Dimension();\n\n    // get the size needed to lay out this container in |parent|.\n    // if |isPreferred|, return the preferred size, else return\n    // the minimum size.\n    private Dimension getLayoutSize(Container parent, boolean isPreferred) {\n        Insets border = parent.getInsets();\n        d.height = d.width = 0;\n        int n = parent.getComponentCount();\n        for (int i = 0; i < n; i++) {\n            Component m = parent.getComponent(i);\n            Dimension s = (isPreferred ? m.getPreferredSize() : m.getMinimumSize());\n            d.height = Math.max(d.height, s.height);\n            d.width = Math.max(d.width, s.width);\n        }\n        d.width = (n - 1) * LEADING + n * d.width;\n        // insets\n        d.width += border.left + border.right;\n        d.height += border.top + border.bottom;\n        return d;\n    }\n\n    /**\n     *        Return the minimum size required to lay out these components in\n     *        the parent.\n     *\n     *        @param the parent to lay out\n     *        @return the minimum layout size\n     */\n    public Dimension minimumLayoutSize(Container parent) {\n        return getLayoutSize(parent, false);\n    }\n\n    /**\n     *        Return the preferred size required to lay out these components\n     *        in the parent.\n     *\n     *        @param the parent to lay out\n     *        @return the preferred layout size\n     */\n    public Dimension preferredLayoutSize(Container parent) {\n        return getLayoutSize(parent, true);\n    }\n\n    /**\n     *        Optional, and not implemented.\n     */\n    public void addLayoutComponent(String name, Component comp) {\n        // do nothing\n    }\n\n    /**\n     *        Optional, and not implemented.\n     */\n    public void removeLayoutComponent(Component comp) {\n        // do nothing\n    }\n}\n",
		"id": "/EvoSuiteBenchmark/35_corina/src/main/java/corina/gui/layouts/ButtonLayout_0Test.java",
		"test_prompt": "// ButtonLayout_0Test.java\n// This file is part of Corina.\n//\n// Corina is free software; you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation; either version 2 of the License, or\n// (at your option) any later version.\n//\n// Corina is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Corina; if not, write to the Free Software\n// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n//\n// Copyright 2003 Ken Harris <kbh7@cornell.edu>\n//\npackage corina.gui.layouts;\n\nimport java.awt.LayoutManager;\nimport java.awt.Component;\nimport java.awt.Container;\nimport java.awt.Dimension;\nimport java.awt.Insets;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link ButtonLayout}.\n* It contains ten unit test cases for the {@link ButtonLayout#minimumLayoutSize(Container)} method.\n*/\nclass ButtonLayout_0Test {"
	},
	{
		"original_code": "// ButtonLayout.java\n//\n// This file is part of Corina.\n//\n// Corina is free software; you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation; either version 2 of the License, or\n// (at your option) any later version.\n//\n// Corina is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Corina; if not, write to the Free Software\n// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n//\n// Copyright 2003 Ken Harris <kbh7@cornell.edu>\n//\npackage corina.gui.layouts;\n\nimport java.awt.LayoutManager;\nimport java.awt.Component;\nimport java.awt.Container;\nimport java.awt.Dimension;\nimport java.awt.Insets;\n\n/**\n *     Make components equal-width, and right-aligned.\n *\n *     <p>The most common example:</p>\n *\n *     <table border=\"1\" cellspacing=\"0\" width=\"100%\">\n *       <tr>\n *         <td align=\"right\">\n *\n *         <table border=\"1\" cellspacing=\"0\">\n *           <tr>\n *             <td width=\"20%\" align=\"center\">Cancel</td>\n *             <td width=\"20%\" align=\"center\"><b>OK</b></td>\n *           </tr>\n *         </table>\n *\n *         </td>\n *       </tr>\n *     </table>\n *\n *     <p>This is how <a href=\"http://???\">Apple's Human Interface Guidelines</a> suggest placing\n *     buttons.  Even <a href=\"http://???\">Sun's Java guidelines</a> suggest this, yet they provide\n *     no easy way to do it, nor do their demo examples follow it.  (The\n *     easiest way is to put a GridLayout in a right-aligned FlowLayout,\n *     and adjust the spacing.)</p>\n *\n *     <p>The most common use of this is, of course, for buttons.  Put\n *     them in the SOUTH of a BorderLayout, and you're set.</p>\n *\n *     <p>An easy way to use this is via the Layout class.  You can make a\n *     panel with a few buttons simply by saying</p>\n *\n * <pre>\n *     JPanel buttons = Layout.buttonLayout(cancel, ok);\n * </pre>\n *\n *     <p>Sometimes you'll want some buttons on the left, and the rest on\n *     the right.  You can put a gap in the layout by passing either null\n *     or a glue object (as created by Box.createHorizontalGlue()).</p>\n *\n * <pre>\n *     JPanel buttons = Layout.buttonLayout(help, null, cancel, ok);\n * </pre>\n *\n *     <p>This layout will put an appropriate amount of space between the\n *     buttons, but won't put any space around the outside of the buttons.\n *     You'll probably want a space around the entire window, anyway.</p>\n *\n *     <h2>Left to do:</h2>\n *     <ul>\n *         <li>look up URLs\n *         <li>if rightmost buttons are \"cancel\" and \"ok\" (either order),\n *             make put them in the order \"ok\"-\"cancel\" on win32, \"cancel\"-\"ok\" on mac.\n *             (what to do on unix?)  (is that really better?)\n *         <li>refactor -- it's a bit confusing\n *     </ul>\n *\n *     @see java.awt.BorderLayout\n *     @see corina.gui.Layout\n *\n *     @author Ken Harris &lt;kbh7 <i style=\"color: gray\">at</i> cornell <i style=\"color: gray\">dot</i> edu&gt;\n *     @version $Id: ButtonLayout.java,v 1.1 2004/01/18 18:02:06 aaron Exp $\n */\npublic class ButtonLayout implements LayoutManager {\n\n    /**\n     *       Make a new ButtonLayout.\n     */\n    public ButtonLayout() {\n        // (needed only for a place to put the javadoc comment)\n    }\n\n    // suggests apple\n    private static final int LEADING = 12;\n\n    // fixme:\n    // -- if there's a glue component (has maxwidth>1000),\n    // \t-- align items before glue to left edge\n    // \t-- align items after glue to right edge\n    // -- (but still maintain consistent width for all items except glue)\n    // REFACTOR!  i can't figure out how this mess works any more.\n    /**\n     *       Lay out the components in the specified container.\n     *\n     *       @param parent the container to lay out the components in\n     */\n    public void layoutContainer(Container parent) {\n        Insets border = parent.getInsets();\n        synchronized (parent.getTreeLock()) {\n            int maxwidth = 0;\n            int n = parent.getComponentCount();\n            int glueIndex = -1;\n            // nn is like n, but doesn't count glue\n            int nn = 0;\n            for (int i = 0; i < n; i++) {\n                // first pass: measure\n                Component m = parent.getComponent(i);\n                if (m.getMaximumSize().width > 32000) {\n                    // is-a glue object\n                    glueIndex = i;\n                    continue;\n                }\n                if (m.isVisible()) {\n                    Dimension d = m.getPreferredSize();\n                    maxwidth = Math.max(maxwidth, d.width);\n                    if (glueIndex != -1)\n                        nn++;\n                }\n            }\n            if (// if they're only on the right side...\n            nn == 0)\n                nn = n;\n            int wholeWidth = nn * maxwidth + (nn - 1) * LEADING;\n            boolean beforeGlue = (glueIndex != -1);\n            int j = 0;\n            for (int i = 0; i < n; i++) {\n                // second pass: cut\n                Component m = parent.getComponent(i);\n                if (i == glueIndex) {\n                    beforeGlue = false;\n                    continue;\n                }\n                if (m.isVisible()) {\n                    Dimension d = m.getPreferredSize();\n                    m.setSize(maxwidth, d.height);\n                    if (beforeGlue) {\n                        m.setLocation(border.left + i * (maxwidth + LEADING), border.top);\n                    } else {\n                        int x = parent.getWidth() - wholeWidth - border.right + j * (maxwidth + LEADING);\n                        m.setLocation(parent.getWidth() - wholeWidth - border.right + j * (maxwidth + LEADING), border.top);\n                        // j is like i, but doesn't count the glue\n                        j++;\n                    }\n                }\n            }\n        }\n    }\n\n    // used by getLayoutSize() -- i make one here so i don't\n    // have to make a new one each time the container is laid out\n    // (which would cause lots of garbage to be created).\n    private Dimension d = new Dimension();\n\n    // get the size needed to lay out this container in |parent|.\n    // if |isPreferred|, return the preferred size, else return\n    // the minimum size.\n    private Dimension getLayoutSize(Container parent, boolean isPreferred) {\n        Insets border = parent.getInsets();\n        d.height = d.width = 0;\n        int n = parent.getComponentCount();\n        for (int i = 0; i < n; i++) {\n            Component m = parent.getComponent(i);\n            Dimension s = (isPreferred ? m.getPreferredSize() : m.getMinimumSize());\n            d.height = Math.max(d.height, s.height);\n            d.width = Math.max(d.width, s.width);\n        }\n        d.width = (n - 1) * LEADING + n * d.width;\n        // insets\n        d.width += border.left + border.right;\n        d.height += border.top + border.bottom;\n        return d;\n    }\n\n    /**\n     *        Return the minimum size required to lay out these components in\n     *        the parent.\n     *\n     *        @param the parent to lay out\n     *        @return the minimum layout size\n     */\n    public Dimension minimumLayoutSize(Container parent) {\n        return getLayoutSize(parent, false);\n    }\n\n    /**\n     *        Return the preferred size required to lay out these components\n     *        in the parent.\n     *\n     *        @param the parent to lay out\n     *        @return the preferred layout size\n     */\n    public Dimension preferredLayoutSize(Container parent) {\n        return getLayoutSize(parent, true);\n    }\n\n    /**\n     *        Optional, and not implemented.\n     */\n    public void addLayoutComponent(String name, Component comp) {\n        // do nothing\n    }\n\n    /**\n     *        Optional, and not implemented.\n     */\n    public void removeLayoutComponent(Component comp) {\n        // do nothing\n    }\n}\n",
		"id": "/EvoSuiteBenchmark/35_corina/src/main/java/corina/gui/layouts/ButtonLayout_1Test.java",
		"test_prompt": "// ButtonLayout_1Test.java\n// This file is part of Corina.\n//\n// Corina is free software; you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation; either version 2 of the License, or\n// (at your option) any later version.\n//\n// Corina is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Corina; if not, write to the Free Software\n// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n//\n// Copyright 2003 Ken Harris <kbh7@cornell.edu>\n//\npackage corina.gui.layouts;\n\nimport java.awt.LayoutManager;\nimport java.awt.Component;\nimport java.awt.Container;\nimport java.awt.Dimension;\nimport java.awt.Insets;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link ButtonLayout}.\n* It contains ten unit test cases for the {@link ButtonLayout#preferredLayoutSize(Container)} method.\n*/\nclass ButtonLayout_1Test {"
	},
	{
		"original_code": "// DialogLayout.java\n//\n// This file is part of Corina.\n//\n// Corina is free software; you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation; either version 2 of the License, or\n// (at your option) any later version.\n//\n// Corina is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Corina; if not, write to the Free Software\n// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n//\n// Copyright 2003 Ken Harris <kbh7@cornell.edu>\n//\npackage corina.gui.layouts;\n\nimport java.awt.LayoutManager2;\nimport java.awt.Component;\nimport java.awt.Container;\nimport java.awt.Dimension;\nimport java.awt.Insets;\nimport javax.swing.JLabel;\nimport java.util.List;\nimport java.util.ArrayList;\n// DEBUG\nimport javax.swing.*;\n\n/**\n *     Put components in a vertical stack, with labels to the left.\n *\n *     <p>This layout is commonly used for dialogs.  For example:</p>\n *\n *     <table border=\"1\" cellspacing=\"0\" align=\"center\">\n *         <tr>\n *             <td align=\"right\">Name:</td>\n *             <td><input type=\"text\" size=\"20\" /></td>\n *         </tr>\n *\n *         <tr>\n *             <form>\n *             <td align=\"right\">Password:</td>\n *             <td><input type=\"password\" size=\"20\" /></td>\n *             </form>\n *         </tr>\n *     </table>\n *\n *     <p>The left column has right-aligned labels, and the right column has left-aligned\n *     components.  In each row, everything is top-aligned.</p>\n *\n *     <p>To use the DialogLayout, use Container's add(Component comp,\n *     Object constraints) method.  The <code>constraints</code> argument\n *     is the label to use (as a String, not a JLabel).  For example,\n *     to create the layout above, you could say:</p>\n *\n * <pre>\n *      JPanel panel = new JPanel(new DialogLayout());\n *      panel.add(new JTextField(\"\", 20), \"Name:\");\n *      panel.add(new JPasswordField(\"\", 20), \"Password:\");\n * </pre>\n *\n *     <p>If you want to break up your layout into sections, add a JLabel\n *     with Container's <code>add(Component comp)</code> method.  It will\n *     appear on the left side, with no additional label.</p>\n *\n *     <h2>Left to do:</h2>\n *     <ul>\n * \t<li>note: behavior changed -- if you want components not to\n * \t    fill, you neet to put them in a flow-L yourself; (should\n * \t    i offer to not-fill?) -- YES!  i need a fill/no-fill\n * \t    option -- which is probably why i need to change the syntax\n * \t    here, so constraint is the fill/no-fill option, not the label.\n * \t    right?\n *         <li>Bug: some (container?) components don't line up!\n *         <li>Remove the add(comp) support?  it makes it much more complex,\n *             and can be easily achieved by the user\n *         <li>Need (better) documentation\n *         <li>Change interface?  Is add(component, label) really best?\n * \t<li>Remove out.println() calls (or convert them to logging calls)\n *     </ul>\n *\n * Usage:\n * <pre>\n *\n * // pretend it's a 2-column grid layout\n * p.add(new JLabel(\"Filetype:\"));\n * p.add(new JLabel(\"Filetype:\"));\n *\n * p.add(new JLine());\n *\n * p.add(new JLabel(\"Filetype:\"));\n * p.add(new JLabel(\"Filetype:\"));\n *\n * how about:\n *\n * p.add(component, DialogLayout.LABEL);\n * p.add(component, DialogLayout.COMPONENT);\n * p.add(component, DialogLayout.COMPONENT_FILL); ??\n * p.add(component, DialogLayout.FULL_LINE);\n *\n * where these are just marker objects?\n *\n * -- and/or: new DialogLayout.LabelMarker(spacing) (??)\n *\n * </pre>\n *\n *     @author Ken Harris &lt;kbh7 <i style=\"color: gray\">at</i> cornell <i style=\"color: gray\">dot</i> edu&gt;\n *     @version $Id: DialogLayout.java,v 1.2 2004/03/06 19:41:31 aaron Exp $\n */\npublic class DialogLayout implements LayoutManager2 {\n\n    /**\n     *        Make a new DialogLayout.\n     */\n    public DialogLayout() {\n        // no code -- this c'tor only for the javadoc tag\n    }\n\n    // WRITEME: make EXTRA, PADDING user-specifyable?\n    // extra padding to the left of the label column\n    private static final int EXTRA = 10;\n\n    // padding between the two columns\n    private static final int PADDING = 8;\n\n    public void layoutContainer(Container parent) {\n        int n = rows.size();\n        Insets border = parent.getInsets();\n        int lastY = border.top;\n        // figure out where the second column should start\n        int secondColumn = 0;\n        for (int i = 0; i < n; i++) {\n            Row r = (Row) rows.get(i);\n            if (r instanceof NormalRow) {\n                NormalRow nr = (NormalRow) r;\n                secondColumn = Math.max(secondColumn, // nr.l.getMinimumSize().width);\n                nr.getLabelWidth(false));\n            }\n        }\n        secondColumn += border.left + EXTRA;\n        for (int i = 0; i < n; i++) {\n            Row r = (Row) rows.get(i);\n            if (r instanceof HeaderRow) {\n                // header\n                Component header = ((HeaderRow) r).h;\n                int w = parent.getWidth() - (border.left + border.right);\n                int h = header.getMinimumSize().height;\n                int x = border.left;\n                int y = lastY;\n                header.setBounds(x, y, w, h);\n                lastY += h;\n            } else if (r instanceof NormalRow) {\n                // label\n                JLabel l = (JLabel) ((NormalRow) r).l;\n                int w1 = l.getMinimumSize().width;\n                // int h1 =  l.getPreferredSize().height;\n                int h1 = l.getMinimumSize().height;\n                int x1 = secondColumn - w1;\n                int y1 = lastY;\n                l.setBounds(x1, y1, w1, h1);\n                // control\n                Component c = ((NormalRow) r).c;\n                // WAS: int w2 = c.getPreferredSize().width;\n                // NEW!\n                int w2 = c.getMaximumSize().width;\n                w2 = Math.min(w2, parent.getWidth() - (border.right + PADDING + secondColumn));\n                int h2 = c.getPreferredSize().height;\n                // buffer between 'em\n                int x2 = secondColumn + PADDING;\n                int y2 = lastY;\n                c.setBounds(x2, y2, w2, h2);\n                lastY += Math.max(h1, h2);\n            }\n        }\n        // focus on the first one?  (is that my job?)  (is it even possible?)\n    }\n\n    public Dimension minimumLayoutSize(Container parent) {\n        return getLayoutSize(parent, false);\n    }\n\n    public Dimension preferredLayoutSize(Container parent) {\n        // return getLayoutSize(parent, true);\n        Dimension d = getLayoutSize(parent, true);\n        // d.width = 10000; -- WHY?\n        return d;\n    }\n\n    private Dimension getLayoutSize(Container parent, boolean isPreferred) {\n        // strategy:\n        // this.minwidth = max(header.minwidth, (max(label.minwidth) + max(controls.minwidth)))\n        // this.minheight = sum foreach row (header,control) (header.minheight or max(label.minheight, control.minheight))\n        int n = parent.getComponentCount();\n        int w1 = 0, w2 = 0, wh = 0;\n        Insets border = parent.getInsets();\n        int height = border.top + border.bottom;\n        for (int i = 0; i < n; i++) {\n            Row r = (Row) rows.get(i);\n            height += r.getHeight(isPreferred);\n            if (r instanceof HeaderRow) {\n                wh = Math.max(wh, ((HeaderRow) r).getWidth(isPreferred));\n            } else {\n                w1 = Math.max(w1, ((NormalRow) r).getLabelWidth(isPreferred));\n                w2 = Math.max(w1, ((NormalRow) r).getControlWidth(isPreferred));\n            }\n        }\n        wh = border.left + border.right + Math.max(wh, EXTRA + w1 + PADDING + w2);\n        return new Dimension(wh, height);\n    }\n\n    public void addLayoutComponent(String name, Component comp) {\n        // it's a header...\n        addLayoutComponent(comp, null);\n    }\n\n    public void removeLayoutComponent(Component comp) {\n        // remove the row containing |comp|\n        int n = rows.size();\n        for (int i = 0; i < n; i++) {\n            Row r = (Row) rows.get(i);\n            if (r instanceof HeaderRow && ((HeaderRow) r).h.equals(comp)) {\n                rows.remove(r);\n                return;\n            } else if (r instanceof NormalRow && ((NormalRow) r).c.equals(comp)) {\n                rows.remove(r);\n                return;\n            }\n        }\n    }\n\n    // i'm too cool for LayoutManager, i have to use LayoutManager2.  yee-ha.\n    private abstract class Row {\n\n        abstract int getHeight(boolean isPreferred);\n    }\n\n    private class HeaderRow extends Row {\n\n        Component h;\n\n        HeaderRow(Component h) {\n            this.h = h;\n        }\n\n        int getHeight(boolean isPreferred) {\n            int headerHeight = (isPreferred ? h.getPreferredSize().height : h.getMinimumSize().height);\n            return headerHeight;\n        }\n\n        int getWidth(boolean isPreferred) {\n            int headerWidth = (isPreferred ? h.getPreferredSize().width : h.getMinimumSize().width);\n            return headerWidth;\n        }\n    }\n\n    private class NormalRow extends Row {\n\n        Component l, c;\n\n        NormalRow(Component l, Component c) {\n            this.l = l;\n            this.c = c;\n        }\n\n        int getHeight(boolean isPreferred) {\n            int labelHeight = (isPreferred ? l.getPreferredSize().height : l.getMinimumSize().height);\n            int controlHeight = (isPreferred ? c.getPreferredSize().height : c.getMinimumSize().height);\n            return Math.max(labelHeight, controlHeight);\n        }\n\n        int getLabelWidth(boolean isPreferred) {\n            int labelWidth = (isPreferred ? l.getPreferredSize().width : l.getMinimumSize().width);\n            return labelWidth;\n        }\n\n        int getControlWidth(boolean isPreferred) {\n            int controlWidth = (isPreferred ? c.getPreferredSize().width : c.getMinimumSize().width);\n            return controlWidth;\n        }\n    }\n\n    private List rows = new ArrayList();\n\n    public void addLayoutComponent(Component comp, Object constraints) {\n        // constraints is either (1) null, meaning this is a header\n        // label (full span) or (2) a String, which is the label for\n        // this component.\n        if (constraints == null) {\n            // add a header row\n            rows.add(new HeaderRow(comp));\n            //System.out.println(\"header row!  comp=\" + comp);\n        } else if (!(constraints instanceof String)) {\n            // you suck\n            throw new IllegalArgumentException();\n            // BETTER: use the given object as a component,\n            // instead of jlabel((string) constraints)!\n        } else {\n            JLabel label = new JLabel((String) constraints);\n            //System.out.println(\"normal row!  label=\" + label);\n            // i need to add my own label.  i've no idea if adding a component\n            // to my parent is legal in this context.\n            // (NOTE: if this fails, draw label myself)\n            // short version: kids, don't try this at home.\n            comp.getParent().add(label);\n            // (it needs to come before this, apparently.)\n            rows.add(new NormalRow(label, comp));\n        }\n        // WRITE ME -- done?\n    }\n\n    public float getLayoutAlignmentX(Container target) {\n        return 0.5f;\n    }\n\n    public float getLayoutAlignmentY(Container target) {\n        return 0.0f;\n    }\n\n    public void invalidateLayout(Container target) {\n        // don't think i have to do anything here\n    }\n\n    public Dimension maximumLayoutSize(Container target) {\n        // why?\n        return new Dimension(Integer.MAX_VALUE, Integer.MAX_VALUE);\n    }\n\n    public static void main(String[] args) {\n        JPanel p = new JPanel(new DialogLayout());\n        p.add(new JLabel(\"Header\"));\n        p.add(new JLabel(\"A\"), \"1:\");\n        p.add(new JTextField(\"B\"), \"2:\");\n        p.add(new JPasswordField(\"C\"), \"3:\");\n        p.add(corina.gui.Layout.borderLayout(new JLabel(\"N\"), new JLabel(\"W\"), new JLabel(\"C\"), new JLabel(\"E\"), new JLabel(\"S\")), \"4:\");\n        JFrame f = new JFrame();\n        f.setContentPane(p);\n        f.pack();\n        f.show();\n    }\n    /*\n      WORKING HERE!\n\n      TODO: constraints object should be an inner class:\n\n      DialogLayoutConstraints {\n      - String label\n      - bool: fill?\n      }\n\n      - how to do full-width labels?\n    */\n}\n",
		"id": "/EvoSuiteBenchmark/35_corina/src/main/java/corina/gui/layouts/DialogLayout_0Test.java",
		"test_prompt": "// DialogLayout_0Test.java\n// This file is part of Corina.\n//\n// Corina is free software; you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation; either version 2 of the License, or\n// (at your option) any later version.\n//\n// Corina is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Corina; if not, write to the Free Software\n// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n//\n// Copyright 2003 Ken Harris <kbh7@cornell.edu>\n//\npackage corina.gui.layouts;\n\nimport java.awt.LayoutManager2;\nimport java.awt.Component;\nimport java.awt.Container;\nimport java.awt.Dimension;\nimport java.awt.Insets;\nimport javax.swing.JLabel;\nimport java.util.List;\nimport java.util.ArrayList;\n// DEBUG\nimport javax.swing.*;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link DialogLayout}.\n* It contains ten unit test cases for the {@link DialogLayout#minimumLayoutSize(Container)} method.\n*/\nclass DialogLayout_0Test {"
	},
	{
		"original_code": "// DialogLayout.java\n//\n// This file is part of Corina.\n//\n// Corina is free software; you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation; either version 2 of the License, or\n// (at your option) any later version.\n//\n// Corina is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Corina; if not, write to the Free Software\n// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n//\n// Copyright 2003 Ken Harris <kbh7@cornell.edu>\n//\npackage corina.gui.layouts;\n\nimport java.awt.LayoutManager2;\nimport java.awt.Component;\nimport java.awt.Container;\nimport java.awt.Dimension;\nimport java.awt.Insets;\nimport javax.swing.JLabel;\nimport java.util.List;\nimport java.util.ArrayList;\n// DEBUG\nimport javax.swing.*;\n\n/**\n *     Put components in a vertical stack, with labels to the left.\n *\n *     <p>This layout is commonly used for dialogs.  For example:</p>\n *\n *     <table border=\"1\" cellspacing=\"0\" align=\"center\">\n *         <tr>\n *             <td align=\"right\">Name:</td>\n *             <td><input type=\"text\" size=\"20\" /></td>\n *         </tr>\n *\n *         <tr>\n *             <form>\n *             <td align=\"right\">Password:</td>\n *             <td><input type=\"password\" size=\"20\" /></td>\n *             </form>\n *         </tr>\n *     </table>\n *\n *     <p>The left column has right-aligned labels, and the right column has left-aligned\n *     components.  In each row, everything is top-aligned.</p>\n *\n *     <p>To use the DialogLayout, use Container's add(Component comp,\n *     Object constraints) method.  The <code>constraints</code> argument\n *     is the label to use (as a String, not a JLabel).  For example,\n *     to create the layout above, you could say:</p>\n *\n * <pre>\n *      JPanel panel = new JPanel(new DialogLayout());\n *      panel.add(new JTextField(\"\", 20), \"Name:\");\n *      panel.add(new JPasswordField(\"\", 20), \"Password:\");\n * </pre>\n *\n *     <p>If you want to break up your layout into sections, add a JLabel\n *     with Container's <code>add(Component comp)</code> method.  It will\n *     appear on the left side, with no additional label.</p>\n *\n *     <h2>Left to do:</h2>\n *     <ul>\n * \t<li>note: behavior changed -- if you want components not to\n * \t    fill, you neet to put them in a flow-L yourself; (should\n * \t    i offer to not-fill?) -- YES!  i need a fill/no-fill\n * \t    option -- which is probably why i need to change the syntax\n * \t    here, so constraint is the fill/no-fill option, not the label.\n * \t    right?\n *         <li>Bug: some (container?) components don't line up!\n *         <li>Remove the add(comp) support?  it makes it much more complex,\n *             and can be easily achieved by the user\n *         <li>Need (better) documentation\n *         <li>Change interface?  Is add(component, label) really best?\n * \t<li>Remove out.println() calls (or convert them to logging calls)\n *     </ul>\n *\n * Usage:\n * <pre>\n *\n * // pretend it's a 2-column grid layout\n * p.add(new JLabel(\"Filetype:\"));\n * p.add(new JLabel(\"Filetype:\"));\n *\n * p.add(new JLine());\n *\n * p.add(new JLabel(\"Filetype:\"));\n * p.add(new JLabel(\"Filetype:\"));\n *\n * how about:\n *\n * p.add(component, DialogLayout.LABEL);\n * p.add(component, DialogLayout.COMPONENT);\n * p.add(component, DialogLayout.COMPONENT_FILL); ??\n * p.add(component, DialogLayout.FULL_LINE);\n *\n * where these are just marker objects?\n *\n * -- and/or: new DialogLayout.LabelMarker(spacing) (??)\n *\n * </pre>\n *\n *     @author Ken Harris &lt;kbh7 <i style=\"color: gray\">at</i> cornell <i style=\"color: gray\">dot</i> edu&gt;\n *     @version $Id: DialogLayout.java,v 1.2 2004/03/06 19:41:31 aaron Exp $\n */\npublic class DialogLayout implements LayoutManager2 {\n\n    /**\n     *        Make a new DialogLayout.\n     */\n    public DialogLayout() {\n        // no code -- this c'tor only for the javadoc tag\n    }\n\n    // WRITEME: make EXTRA, PADDING user-specifyable?\n    // extra padding to the left of the label column\n    private static final int EXTRA = 10;\n\n    // padding between the two columns\n    private static final int PADDING = 8;\n\n    public void layoutContainer(Container parent) {\n        int n = rows.size();\n        Insets border = parent.getInsets();\n        int lastY = border.top;\n        // figure out where the second column should start\n        int secondColumn = 0;\n        for (int i = 0; i < n; i++) {\n            Row r = (Row) rows.get(i);\n            if (r instanceof NormalRow) {\n                NormalRow nr = (NormalRow) r;\n                secondColumn = Math.max(secondColumn, // nr.l.getMinimumSize().width);\n                nr.getLabelWidth(false));\n            }\n        }\n        secondColumn += border.left + EXTRA;\n        for (int i = 0; i < n; i++) {\n            Row r = (Row) rows.get(i);\n            if (r instanceof HeaderRow) {\n                // header\n                Component header = ((HeaderRow) r).h;\n                int w = parent.getWidth() - (border.left + border.right);\n                int h = header.getMinimumSize().height;\n                int x = border.left;\n                int y = lastY;\n                header.setBounds(x, y, w, h);\n                lastY += h;\n            } else if (r instanceof NormalRow) {\n                // label\n                JLabel l = (JLabel) ((NormalRow) r).l;\n                int w1 = l.getMinimumSize().width;\n                // int h1 =  l.getPreferredSize().height;\n                int h1 = l.getMinimumSize().height;\n                int x1 = secondColumn - w1;\n                int y1 = lastY;\n                l.setBounds(x1, y1, w1, h1);\n                // control\n                Component c = ((NormalRow) r).c;\n                // WAS: int w2 = c.getPreferredSize().width;\n                // NEW!\n                int w2 = c.getMaximumSize().width;\n                w2 = Math.min(w2, parent.getWidth() - (border.right + PADDING + secondColumn));\n                int h2 = c.getPreferredSize().height;\n                // buffer between 'em\n                int x2 = secondColumn + PADDING;\n                int y2 = lastY;\n                c.setBounds(x2, y2, w2, h2);\n                lastY += Math.max(h1, h2);\n            }\n        }\n        // focus on the first one?  (is that my job?)  (is it even possible?)\n    }\n\n    public Dimension minimumLayoutSize(Container parent) {\n        return getLayoutSize(parent, false);\n    }\n\n    public Dimension preferredLayoutSize(Container parent) {\n        // return getLayoutSize(parent, true);\n        Dimension d = getLayoutSize(parent, true);\n        // d.width = 10000; -- WHY?\n        return d;\n    }\n\n    private Dimension getLayoutSize(Container parent, boolean isPreferred) {\n        // strategy:\n        // this.minwidth = max(header.minwidth, (max(label.minwidth) + max(controls.minwidth)))\n        // this.minheight = sum foreach row (header,control) (header.minheight or max(label.minheight, control.minheight))\n        int n = parent.getComponentCount();\n        int w1 = 0, w2 = 0, wh = 0;\n        Insets border = parent.getInsets();\n        int height = border.top + border.bottom;\n        for (int i = 0; i < n; i++) {\n            Row r = (Row) rows.get(i);\n            height += r.getHeight(isPreferred);\n            if (r instanceof HeaderRow) {\n                wh = Math.max(wh, ((HeaderRow) r).getWidth(isPreferred));\n            } else {\n                w1 = Math.max(w1, ((NormalRow) r).getLabelWidth(isPreferred));\n                w2 = Math.max(w1, ((NormalRow) r).getControlWidth(isPreferred));\n            }\n        }\n        wh = border.left + border.right + Math.max(wh, EXTRA + w1 + PADDING + w2);\n        return new Dimension(wh, height);\n    }\n\n    public void addLayoutComponent(String name, Component comp) {\n        // it's a header...\n        addLayoutComponent(comp, null);\n    }\n\n    public void removeLayoutComponent(Component comp) {\n        // remove the row containing |comp|\n        int n = rows.size();\n        for (int i = 0; i < n; i++) {\n            Row r = (Row) rows.get(i);\n            if (r instanceof HeaderRow && ((HeaderRow) r).h.equals(comp)) {\n                rows.remove(r);\n                return;\n            } else if (r instanceof NormalRow && ((NormalRow) r).c.equals(comp)) {\n                rows.remove(r);\n                return;\n            }\n        }\n    }\n\n    // i'm too cool for LayoutManager, i have to use LayoutManager2.  yee-ha.\n    private abstract class Row {\n\n        abstract int getHeight(boolean isPreferred);\n    }\n\n    private class HeaderRow extends Row {\n\n        Component h;\n\n        HeaderRow(Component h) {\n            this.h = h;\n        }\n\n        int getHeight(boolean isPreferred) {\n            int headerHeight = (isPreferred ? h.getPreferredSize().height : h.getMinimumSize().height);\n            return headerHeight;\n        }\n\n        int getWidth(boolean isPreferred) {\n            int headerWidth = (isPreferred ? h.getPreferredSize().width : h.getMinimumSize().width);\n            return headerWidth;\n        }\n    }\n\n    private class NormalRow extends Row {\n\n        Component l, c;\n\n        NormalRow(Component l, Component c) {\n            this.l = l;\n            this.c = c;\n        }\n\n        int getHeight(boolean isPreferred) {\n            int labelHeight = (isPreferred ? l.getPreferredSize().height : l.getMinimumSize().height);\n            int controlHeight = (isPreferred ? c.getPreferredSize().height : c.getMinimumSize().height);\n            return Math.max(labelHeight, controlHeight);\n        }\n\n        int getLabelWidth(boolean isPreferred) {\n            int labelWidth = (isPreferred ? l.getPreferredSize().width : l.getMinimumSize().width);\n            return labelWidth;\n        }\n\n        int getControlWidth(boolean isPreferred) {\n            int controlWidth = (isPreferred ? c.getPreferredSize().width : c.getMinimumSize().width);\n            return controlWidth;\n        }\n    }\n\n    private List rows = new ArrayList();\n\n    public void addLayoutComponent(Component comp, Object constraints) {\n        // constraints is either (1) null, meaning this is a header\n        // label (full span) or (2) a String, which is the label for\n        // this component.\n        if (constraints == null) {\n            // add a header row\n            rows.add(new HeaderRow(comp));\n            //System.out.println(\"header row!  comp=\" + comp);\n        } else if (!(constraints instanceof String)) {\n            // you suck\n            throw new IllegalArgumentException();\n            // BETTER: use the given object as a component,\n            // instead of jlabel((string) constraints)!\n        } else {\n            JLabel label = new JLabel((String) constraints);\n            //System.out.println(\"normal row!  label=\" + label);\n            // i need to add my own label.  i've no idea if adding a component\n            // to my parent is legal in this context.\n            // (NOTE: if this fails, draw label myself)\n            // short version: kids, don't try this at home.\n            comp.getParent().add(label);\n            // (it needs to come before this, apparently.)\n            rows.add(new NormalRow(label, comp));\n        }\n        // WRITE ME -- done?\n    }\n\n    public float getLayoutAlignmentX(Container target) {\n        return 0.5f;\n    }\n\n    public float getLayoutAlignmentY(Container target) {\n        return 0.0f;\n    }\n\n    public void invalidateLayout(Container target) {\n        // don't think i have to do anything here\n    }\n\n    public Dimension maximumLayoutSize(Container target) {\n        // why?\n        return new Dimension(Integer.MAX_VALUE, Integer.MAX_VALUE);\n    }\n\n    public static void main(String[] args) {\n        JPanel p = new JPanel(new DialogLayout());\n        p.add(new JLabel(\"Header\"));\n        p.add(new JLabel(\"A\"), \"1:\");\n        p.add(new JTextField(\"B\"), \"2:\");\n        p.add(new JPasswordField(\"C\"), \"3:\");\n        p.add(corina.gui.Layout.borderLayout(new JLabel(\"N\"), new JLabel(\"W\"), new JLabel(\"C\"), new JLabel(\"E\"), new JLabel(\"S\")), \"4:\");\n        JFrame f = new JFrame();\n        f.setContentPane(p);\n        f.pack();\n        f.show();\n    }\n    /*\n      WORKING HERE!\n\n      TODO: constraints object should be an inner class:\n\n      DialogLayoutConstraints {\n      - String label\n      - bool: fill?\n      }\n\n      - how to do full-width labels?\n    */\n}\n",
		"id": "/EvoSuiteBenchmark/35_corina/src/main/java/corina/gui/layouts/DialogLayout_1Test.java",
		"test_prompt": "// DialogLayout_1Test.java\n// This file is part of Corina.\n//\n// Corina is free software; you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation; either version 2 of the License, or\n// (at your option) any later version.\n//\n// Corina is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Corina; if not, write to the Free Software\n// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n//\n// Copyright 2003 Ken Harris <kbh7@cornell.edu>\n//\npackage corina.gui.layouts;\n\nimport java.awt.LayoutManager2;\nimport java.awt.Component;\nimport java.awt.Container;\nimport java.awt.Dimension;\nimport java.awt.Insets;\nimport javax.swing.JLabel;\nimport java.util.List;\nimport java.util.ArrayList;\n// DEBUG\nimport javax.swing.*;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link DialogLayout}.\n* It contains ten unit test cases for the {@link DialogLayout#preferredLayoutSize(Container)} method.\n*/\nclass DialogLayout_1Test {"
	},
	{
		"original_code": "// DialogLayout.java\n//\n// This file is part of Corina.\n//\n// Corina is free software; you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation; either version 2 of the License, or\n// (at your option) any later version.\n//\n// Corina is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Corina; if not, write to the Free Software\n// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n//\n// Copyright 2003 Ken Harris <kbh7@cornell.edu>\n//\npackage corina.gui.layouts;\n\nimport java.awt.LayoutManager2;\nimport java.awt.Component;\nimport java.awt.Container;\nimport java.awt.Dimension;\nimport java.awt.Insets;\nimport javax.swing.JLabel;\nimport java.util.List;\nimport java.util.ArrayList;\n// DEBUG\nimport javax.swing.*;\n\n/**\n *     Put components in a vertical stack, with labels to the left.\n *\n *     <p>This layout is commonly used for dialogs.  For example:</p>\n *\n *     <table border=\"1\" cellspacing=\"0\" align=\"center\">\n *         <tr>\n *             <td align=\"right\">Name:</td>\n *             <td><input type=\"text\" size=\"20\" /></td>\n *         </tr>\n *\n *         <tr>\n *             <form>\n *             <td align=\"right\">Password:</td>\n *             <td><input type=\"password\" size=\"20\" /></td>\n *             </form>\n *         </tr>\n *     </table>\n *\n *     <p>The left column has right-aligned labels, and the right column has left-aligned\n *     components.  In each row, everything is top-aligned.</p>\n *\n *     <p>To use the DialogLayout, use Container's add(Component comp,\n *     Object constraints) method.  The <code>constraints</code> argument\n *     is the label to use (as a String, not a JLabel).  For example,\n *     to create the layout above, you could say:</p>\n *\n * <pre>\n *      JPanel panel = new JPanel(new DialogLayout());\n *      panel.add(new JTextField(\"\", 20), \"Name:\");\n *      panel.add(new JPasswordField(\"\", 20), \"Password:\");\n * </pre>\n *\n *     <p>If you want to break up your layout into sections, add a JLabel\n *     with Container's <code>add(Component comp)</code> method.  It will\n *     appear on the left side, with no additional label.</p>\n *\n *     <h2>Left to do:</h2>\n *     <ul>\n * \t<li>note: behavior changed -- if you want components not to\n * \t    fill, you neet to put them in a flow-L yourself; (should\n * \t    i offer to not-fill?) -- YES!  i need a fill/no-fill\n * \t    option -- which is probably why i need to change the syntax\n * \t    here, so constraint is the fill/no-fill option, not the label.\n * \t    right?\n *         <li>Bug: some (container?) components don't line up!\n *         <li>Remove the add(comp) support?  it makes it much more complex,\n *             and can be easily achieved by the user\n *         <li>Need (better) documentation\n *         <li>Change interface?  Is add(component, label) really best?\n * \t<li>Remove out.println() calls (or convert them to logging calls)\n *     </ul>\n *\n * Usage:\n * <pre>\n *\n * // pretend it's a 2-column grid layout\n * p.add(new JLabel(\"Filetype:\"));\n * p.add(new JLabel(\"Filetype:\"));\n *\n * p.add(new JLine());\n *\n * p.add(new JLabel(\"Filetype:\"));\n * p.add(new JLabel(\"Filetype:\"));\n *\n * how about:\n *\n * p.add(component, DialogLayout.LABEL);\n * p.add(component, DialogLayout.COMPONENT);\n * p.add(component, DialogLayout.COMPONENT_FILL); ??\n * p.add(component, DialogLayout.FULL_LINE);\n *\n * where these are just marker objects?\n *\n * -- and/or: new DialogLayout.LabelMarker(spacing) (??)\n *\n * </pre>\n *\n *     @author Ken Harris &lt;kbh7 <i style=\"color: gray\">at</i> cornell <i style=\"color: gray\">dot</i> edu&gt;\n *     @version $Id: DialogLayout.java,v 1.2 2004/03/06 19:41:31 aaron Exp $\n */\npublic class DialogLayout implements LayoutManager2 {\n\n    /**\n     *        Make a new DialogLayout.\n     */\n    public DialogLayout() {\n        // no code -- this c'tor only for the javadoc tag\n    }\n\n    // WRITEME: make EXTRA, PADDING user-specifyable?\n    // extra padding to the left of the label column\n    private static final int EXTRA = 10;\n\n    // padding between the two columns\n    private static final int PADDING = 8;\n\n    public void layoutContainer(Container parent) {\n        int n = rows.size();\n        Insets border = parent.getInsets();\n        int lastY = border.top;\n        // figure out where the second column should start\n        int secondColumn = 0;\n        for (int i = 0; i < n; i++) {\n            Row r = (Row) rows.get(i);\n            if (r instanceof NormalRow) {\n                NormalRow nr = (NormalRow) r;\n                secondColumn = Math.max(secondColumn, // nr.l.getMinimumSize().width);\n                nr.getLabelWidth(false));\n            }\n        }\n        secondColumn += border.left + EXTRA;\n        for (int i = 0; i < n; i++) {\n            Row r = (Row) rows.get(i);\n            if (r instanceof HeaderRow) {\n                // header\n                Component header = ((HeaderRow) r).h;\n                int w = parent.getWidth() - (border.left + border.right);\n                int h = header.getMinimumSize().height;\n                int x = border.left;\n                int y = lastY;\n                header.setBounds(x, y, w, h);\n                lastY += h;\n            } else if (r instanceof NormalRow) {\n                // label\n                JLabel l = (JLabel) ((NormalRow) r).l;\n                int w1 = l.getMinimumSize().width;\n                // int h1 =  l.getPreferredSize().height;\n                int h1 = l.getMinimumSize().height;\n                int x1 = secondColumn - w1;\n                int y1 = lastY;\n                l.setBounds(x1, y1, w1, h1);\n                // control\n                Component c = ((NormalRow) r).c;\n                // WAS: int w2 = c.getPreferredSize().width;\n                // NEW!\n                int w2 = c.getMaximumSize().width;\n                w2 = Math.min(w2, parent.getWidth() - (border.right + PADDING + secondColumn));\n                int h2 = c.getPreferredSize().height;\n                // buffer between 'em\n                int x2 = secondColumn + PADDING;\n                int y2 = lastY;\n                c.setBounds(x2, y2, w2, h2);\n                lastY += Math.max(h1, h2);\n            }\n        }\n        // focus on the first one?  (is that my job?)  (is it even possible?)\n    }\n\n    public Dimension minimumLayoutSize(Container parent) {\n        return getLayoutSize(parent, false);\n    }\n\n    public Dimension preferredLayoutSize(Container parent) {\n        // return getLayoutSize(parent, true);\n        Dimension d = getLayoutSize(parent, true);\n        // d.width = 10000; -- WHY?\n        return d;\n    }\n\n    private Dimension getLayoutSize(Container parent, boolean isPreferred) {\n        // strategy:\n        // this.minwidth = max(header.minwidth, (max(label.minwidth) + max(controls.minwidth)))\n        // this.minheight = sum foreach row (header,control) (header.minheight or max(label.minheight, control.minheight))\n        int n = parent.getComponentCount();\n        int w1 = 0, w2 = 0, wh = 0;\n        Insets border = parent.getInsets();\n        int height = border.top + border.bottom;\n        for (int i = 0; i < n; i++) {\n            Row r = (Row) rows.get(i);\n            height += r.getHeight(isPreferred);\n            if (r instanceof HeaderRow) {\n                wh = Math.max(wh, ((HeaderRow) r).getWidth(isPreferred));\n            } else {\n                w1 = Math.max(w1, ((NormalRow) r).getLabelWidth(isPreferred));\n                w2 = Math.max(w1, ((NormalRow) r).getControlWidth(isPreferred));\n            }\n        }\n        wh = border.left + border.right + Math.max(wh, EXTRA + w1 + PADDING + w2);\n        return new Dimension(wh, height);\n    }\n\n    public void addLayoutComponent(String name, Component comp) {\n        // it's a header...\n        addLayoutComponent(comp, null);\n    }\n\n    public void removeLayoutComponent(Component comp) {\n        // remove the row containing |comp|\n        int n = rows.size();\n        for (int i = 0; i < n; i++) {\n            Row r = (Row) rows.get(i);\n            if (r instanceof HeaderRow && ((HeaderRow) r).h.equals(comp)) {\n                rows.remove(r);\n                return;\n            } else if (r instanceof NormalRow && ((NormalRow) r).c.equals(comp)) {\n                rows.remove(r);\n                return;\n            }\n        }\n    }\n\n    // i'm too cool for LayoutManager, i have to use LayoutManager2.  yee-ha.\n    private abstract class Row {\n\n        abstract int getHeight(boolean isPreferred);\n    }\n\n    private class HeaderRow extends Row {\n\n        Component h;\n\n        HeaderRow(Component h) {\n            this.h = h;\n        }\n\n        int getHeight(boolean isPreferred) {\n            int headerHeight = (isPreferred ? h.getPreferredSize().height : h.getMinimumSize().height);\n            return headerHeight;\n        }\n\n        int getWidth(boolean isPreferred) {\n            int headerWidth = (isPreferred ? h.getPreferredSize().width : h.getMinimumSize().width);\n            return headerWidth;\n        }\n    }\n\n    private class NormalRow extends Row {\n\n        Component l, c;\n\n        NormalRow(Component l, Component c) {\n            this.l = l;\n            this.c = c;\n        }\n\n        int getHeight(boolean isPreferred) {\n            int labelHeight = (isPreferred ? l.getPreferredSize().height : l.getMinimumSize().height);\n            int controlHeight = (isPreferred ? c.getPreferredSize().height : c.getMinimumSize().height);\n            return Math.max(labelHeight, controlHeight);\n        }\n\n        int getLabelWidth(boolean isPreferred) {\n            int labelWidth = (isPreferred ? l.getPreferredSize().width : l.getMinimumSize().width);\n            return labelWidth;\n        }\n\n        int getControlWidth(boolean isPreferred) {\n            int controlWidth = (isPreferred ? c.getPreferredSize().width : c.getMinimumSize().width);\n            return controlWidth;\n        }\n    }\n\n    private List rows = new ArrayList();\n\n    public void addLayoutComponent(Component comp, Object constraints) {\n        // constraints is either (1) null, meaning this is a header\n        // label (full span) or (2) a String, which is the label for\n        // this component.\n        if (constraints == null) {\n            // add a header row\n            rows.add(new HeaderRow(comp));\n            //System.out.println(\"header row!  comp=\" + comp);\n        } else if (!(constraints instanceof String)) {\n            // you suck\n            throw new IllegalArgumentException();\n            // BETTER: use the given object as a component,\n            // instead of jlabel((string) constraints)!\n        } else {\n            JLabel label = new JLabel((String) constraints);\n            //System.out.println(\"normal row!  label=\" + label);\n            // i need to add my own label.  i've no idea if adding a component\n            // to my parent is legal in this context.\n            // (NOTE: if this fails, draw label myself)\n            // short version: kids, don't try this at home.\n            comp.getParent().add(label);\n            // (it needs to come before this, apparently.)\n            rows.add(new NormalRow(label, comp));\n        }\n        // WRITE ME -- done?\n    }\n\n    public float getLayoutAlignmentX(Container target) {\n        return 0.5f;\n    }\n\n    public float getLayoutAlignmentY(Container target) {\n        return 0.0f;\n    }\n\n    public void invalidateLayout(Container target) {\n        // don't think i have to do anything here\n    }\n\n    public Dimension maximumLayoutSize(Container target) {\n        // why?\n        return new Dimension(Integer.MAX_VALUE, Integer.MAX_VALUE);\n    }\n\n    public static void main(String[] args) {\n        JPanel p = new JPanel(new DialogLayout());\n        p.add(new JLabel(\"Header\"));\n        p.add(new JLabel(\"A\"), \"1:\");\n        p.add(new JTextField(\"B\"), \"2:\");\n        p.add(new JPasswordField(\"C\"), \"3:\");\n        p.add(corina.gui.Layout.borderLayout(new JLabel(\"N\"), new JLabel(\"W\"), new JLabel(\"C\"), new JLabel(\"E\"), new JLabel(\"S\")), \"4:\");\n        JFrame f = new JFrame();\n        f.setContentPane(p);\n        f.pack();\n        f.show();\n    }\n    /*\n      WORKING HERE!\n\n      TODO: constraints object should be an inner class:\n\n      DialogLayoutConstraints {\n      - String label\n      - bool: fill?\n      }\n\n      - how to do full-width labels?\n    */\n}\n",
		"id": "/EvoSuiteBenchmark/35_corina/src/main/java/corina/gui/layouts/DialogLayout_2Test.java",
		"test_prompt": "// DialogLayout_2Test.java\n// This file is part of Corina.\n//\n// Corina is free software; you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation; either version 2 of the License, or\n// (at your option) any later version.\n//\n// Corina is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Corina; if not, write to the Free Software\n// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n//\n// Copyright 2003 Ken Harris <kbh7@cornell.edu>\n//\npackage corina.gui.layouts;\n\nimport java.awt.LayoutManager2;\nimport java.awt.Component;\nimport java.awt.Container;\nimport java.awt.Dimension;\nimport java.awt.Insets;\nimport javax.swing.JLabel;\nimport java.util.List;\nimport java.util.ArrayList;\n// DEBUG\nimport javax.swing.*;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link DialogLayout}.\n* It contains ten unit test cases for the {@link DialogLayout#maximumLayoutSize(Container)} method.\n*/\nclass DialogLayout_2Test {"
	},
	{
		"original_code": "// OpenRecent.java\n//\n// This file is part of Corina.\n//\n// Corina is free software; you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation; either version 2 of the License, or\n// (at your option) any later version.\n//\n// Corina is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Corina; if not, write to the Free Software\n// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n//\n// Copyright 2003 Ken Harris <kbh7@cornell.edu>\n//\npackage corina.gui.menus;\n\nimport java.awt.event.ActionEvent;\nimport java.io.File;\nimport java.io.FileNotFoundException;\nimport java.io.IOException;\nimport java.lang.ref.Reference;\nimport java.lang.ref.WeakReference;\nimport java.util.ArrayList;\nimport java.util.List;\nimport java.util.StringTokenizer;\nimport javax.swing.AbstractAction;\nimport javax.swing.JMenu;\nimport javax.swing.JMenuItem;\nimport corina.core.App;\nimport corina.gui.CanOpener;\nimport corina.ui.Alert;\nimport corina.ui.Builder;\n\n/**\n *    A menu which shows recently-opened files.\n *\n *    <p>(It's actually implemented as a list of recently-opened files,\n *    and a factory method to generate <code>JMenu</code>s.  But this will\n *    change in the near future.)</p>\n *\n *    <p>To use, simply call <code>OpenRecent.generateMenu()</code>, and\n *    use that as you would any other <code>JMenu</code>.  It will\n *    automatically be updated whenever the list changes due to some new\n *    file being opened.  (When it's no longer strongly\n *    reachable, it'll be garbage collected.)</p>\n *\n *    <h2>Left to do:</h2>\n *    <ul>\n *        <li>rename to OpenRecentMenu\n *        <li>extend JMenu; the c'tor should take care of notification stuff (add/removeNotify(), if necessary)\n *        <li>i don't need to use refs if i use add/remove notify, right?\n *        <li>doesn't use special 1.3 font hack any more -- do i care?\n *        <li>refactor -- separate model and view?\n *        <li>catch errors gracefully - \"this file may have been moved...\", etc.\n *        <li>if document is already open, just toFront() (needs other work first)\n *    </ul>\n *\n *   @author Ken Harris &lt;kbh7 <i style=\"color: gray\">at</i> cornell <i style=\"color: gray\">dot</i> edu&gt;\n *    @version $Id: OpenRecent.java,v 1.3 2005/01/24 03:09:30 aaron Exp $\n */\npublic class OpenRecent {\n\n    // number of recent docs to remember\n    private final static int NUMBER_TO_REMEMBER = 10;\n\n    // list of files, most-recent-first\n    private static List recent;\n\n    // list of created menus -- soft references\n    private static List menus = new ArrayList();\n\n    // on class load: load previous recent-list from system property into static structure\n    static {\n        loadList();\n    }\n\n    /**\n     *  Indicate to the recent-file list that a file was just opened.\n     * \tThis also updates every recent-file menu automatically.\n     * \t@param filename the (full) name of the file that was opened\n     */\n    public static void fileOpened(String filename) {\n        // if already in spot #0, don't need to do anything\n        if (!recent.isEmpty() && ((String) recent.get(0)).equals(filename))\n            return;\n        // if this item is in the list, remove me, too\n        recent.remove(filename);\n        // remove last item, if full\n        if (recent.size() == NUMBER_TO_REMEMBER)\n            recent.remove(NUMBER_TO_REMEMBER - 1);\n        // prepend filename\n        recent.add(0, filename);\n        // update menu(s)\n        updateAllMenus();\n        // update disk\n        saveList();\n    }\n\n    /**\n     *  Generate a new recent-file menu.  This menu will contain the\n     * \tnames of (up to) the last 4 files opened.  As long as the menu\n     * \treturned by this method is referenced, it will automatically\n     * \tbe kept updated.\n     */\n    public static JMenu makeOpenRecentMenu() {\n        // create a new menu\n        JMenu menu = Builder.makeMenu(\"open_recent\");\n        // generate its elements\n        updateMenu(menu);\n        // add it to the list\n        menus.add(new WeakReference(menu));\n        // return it\n        return menu;\n    }\n\n    // update all existing open-recent menus.  if any has since\n    // disappeared, remove it from my list.\n    private static void updateAllMenus() {\n        // for each menu...\n        for (int i = 0; i < menus.size(); i++) {\n            // dereference it\n            JMenu m = (JMenu) ((Reference) menus.get(i)).get();\n            // already gone?  remove it from my list\n            if (m == null) {\n                menus.remove(i);\n                continue;\n            }\n            // update it\n            updateMenu(m);\n        }\n    }\n\n    // BUG: error handling in here is miserable-to-nonexistant\n    private static void updateMenu(JMenu menu) {\n        menu.removeAll();\n        for (int i = 0; i < recent.size(); i++) {\n            String fn = (String) recent.get(i);\n            JMenuItem r = new JMenuItem(new File(fn).getName());\n            final int glue = i;\n            r.addActionListener(new AbstractAction() {\n\n                // todo: if already open, just toFront() it!\n                public void actionPerformed(ActionEvent e) {\n                    try {\n                        CanOpener.open((String) recent.get(glue));\n                    } catch (FileNotFoundException fnfe) {\n                        // file moved?\n                        Alert.error(\"File Isn't There\", \"The file called '\" + recent.get(glue) + \"'\\n\" + \"isn't there any more.  If it was moved, \" + \"you'll have to open it with File -> Open...\");\n                        // remove it from the list\n                        recent.remove(glue);\n                        // (doesn't really update all menus on mac.  ack.)\n                        updateAllMenus();\n                        // FUTURE: search for it, or allow user to.\n                        return;\n                    } catch (IOException ioe) {\n                        // !!!\n                        return;\n                    }\n                    /* -- don't do this; CanOpener.open() calls fileOpened(), which takes care of this\n\t\t\t// move this entry to top of list, now\n\t\t\tif (glue != 0) {\n\t\t\t    String me = (String) recent.remove(glue);\n\t\t\t    recent.add(0, me);\n\t\t\t    updateAllMenus(); // ok?\n\n\t\t\t    // update disk\n\t\t\t    saveList();\n\t\t\t}\n\t\t\t*/\n                }\n            });\n            menu.add(r);\n        }\n        JMenuItem clear = Builder.makeMenuItem(\"clear_menu\");\n        if (recent.isEmpty()) {\n            // no recent items: just \"Clear Menu\", but dimmed\n            clear.setEnabled(false);\n            menu.add(clear);\n        } else {\n            // some recent items: spacer, then \"Clear Menu\"\n            clear.addActionListener(new AbstractAction() {\n\n                public void actionPerformed(ActionEvent e) {\n                    // why not something like reset()?\n                    recent = new ArrayList();\n                    updateAllMenus();\n                    saveList();\n                }\n            });\n            menu.addSeparator();\n            menu.add(clear);\n        }\n    }\n\n    // load recent-list from |corina.recent.files|.\n    // only called on class-load, so doesn't need to be synch.\n    private static void loadList() {\n        // create recent list\n        recent = new ArrayList();\n        // parse |corina.recent.files| pref, splitting by |path.separator| chars.\n        // (ASSUMES (path.separator).length()==1?\n        StringTokenizer tok = new StringTokenizer(App.prefs.getPref(\"corina.recent.files\", \"\"), System.getProperty(\"path.separator\"));\n        // add all files to recent\n        while (tok.hasMoreTokens()) {\n            String next = tok.nextToken();\n            recent.add(next);\n        }\n    }\n\n    // store the recent-list in a string, in |corina.recent.files|\n    private static synchronized void saveList() {\n        StringBuffer buf = new StringBuffer();\n        char sep = File.pathSeparatorChar;\n        for (int i = 0; i < recent.size(); i++) {\n            buf.append(recent.get(i).toString());\n            if (i < recent.size() - 1)\n                buf.append(sep);\n        }\n        // store in pref\n        App.prefs.setPref(\"corina.recent.files\", buf.toString());\n    }\n}\n",
		"id": "/EvoSuiteBenchmark/35_corina/src/main/java/corina/gui/menus/OpenRecent.java",
		"test_prompt": "// OpenRecentTest.java\n// This file is part of Corina.\n//\n// Corina is free software; you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation; either version 2 of the License, or\n// (at your option) any later version.\n//\n// Corina is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Corina; if not, write to the Free Software\n// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n//\n// Copyright 2003 Ken Harris <kbh7@cornell.edu>\n//\npackage corina.gui.menus;\n\nimport java.awt.event.ActionEvent;\nimport java.io.File;\nimport java.io.FileNotFoundException;\nimport java.io.IOException;\nimport java.lang.ref.Reference;\nimport java.lang.ref.WeakReference;\nimport java.util.ArrayList;\nimport java.util.List;\nimport java.util.StringTokenizer;\nimport javax.swing.AbstractAction;\nimport javax.swing.JMenu;\nimport javax.swing.JMenuItem;\nimport corina.core.App;\nimport corina.gui.CanOpener;\nimport corina.ui.Alert;\nimport corina.ui.Builder;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link OpenRecent}.\n* It contains ten unit test cases for the {@link OpenRecent#makeOpenRecentMenu()} method.\n*/\nclass OpenRecentTest {"
	},
	{
		"original_code": "// ElementsTableModel.java\n//\n// This file is part of Corina.\n//\n// Corina is free software; you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation; either version 2 of the License, or\n// (at your option) any later version.\n//\n// Corina is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Corina; if not, write to the Free Software\n// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n//\n// Copyright 2001 Ken Harris <kbh7@cornell.edu>\n//\npackage corina.gui;\n\nimport corina.MetadataTemplate;\nimport corina.Element;\nimport corina.Sample;\nimport corina.ui.Alert;\nimport java.io.IOException;\nimport java.io.File;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.awt.Component;\nimport java.awt.Color;\nimport java.awt.BorderLayout;\nimport java.awt.FlowLayout;\nimport javax.swing.JCheckBox;\nimport javax.swing.JPanel;\nimport javax.swing.JLabel;\nimport javax.swing.JTable;\nimport javax.swing.table.TableCellEditor;\nimport javax.swing.table.TableCellRenderer;\nimport javax.swing.table.AbstractTableModel;\n\npublic class ElementsTableModel extends AbstractTableModel {\n\n    // list of Elements\n    private List elements;\n\n    // list of preview fields\n    private List fields;\n\n    // ElementsPanel.currentView...\n    private int view;\n\n    // constructor -- fields to use are given; fields cannot be null:\n    // pass an empty List if you don't want anything else.\n    public ElementsTableModel(List elements, List fields, int view) {\n        this.elements = elements;\n        this.fields = fields;\n        this.view = view;\n    }\n\n    // this is a really bad place for this...\n    // HEY: why can't i use a jcheckbox here?\n    public static class FilenameRenderer extends JPanel implements TableCellRenderer {\n\n        private JLabel label = new JLabel();\n\n        private JCheckBox check = new JCheckBox();\n\n        public FilenameRenderer(JTable table) {\n            setLayout(new BorderLayout());\n            label.setFont(table.getFont());\n            label.setOpaque(true);\n            check.setOpaque(true);\n            add(check, BorderLayout.WEST);\n            add(label, BorderLayout.CENTER);\n        }\n\n        public Component getTableCellRendererComponent(JTable table, Object value, boolean isSelected, boolean hasFocus, int row, int column) {\n            Element e = (Element) value;\n            check.setSelected(e.isActive());\n            label.setText(e.getBasename());\n            // REFACTOR: new UserFriendlyFile avoids this problem\n            Color fore = (isSelected ? table.getSelectionForeground() : table.getForeground());\n            Color back = (isSelected ? table.getSelectionBackground() : table.getBackground());\n            /*\n\t\t\t * // light-blue-ish if (row % 2 == 0) back = new\n\t\t\t * Color(back.getRed() - 16, back.getGreen() - 16, back.getBlue());\n\t\t\t */\n            check.setForeground(fore);\n            label.setForeground(fore);\n            check.setBackground(back);\n            label.setBackground(back);\n            return this;\n        }\n    }\n\n    // column name\n    public String getColumnName(int col) {\n        switch(col) {\n            case 0:\n                return \"Filename\";\n            case 1:\n                return \"Folder\";\n            case 2:\n                return \"Range\";\n            default:\n                return ((MetadataTemplate.Field) fields.get(col - 2)).getDescription();\n        }\n    }\n\n    // row count\n    public int getRowCount() {\n        return (elements == null ? 0 : elements.size());\n    }\n\n    // column count\n    public int getColumnCount() {\n        // just filename and meta...?\n        if (view == ElementsPanel.VIEW_FILENAMES_MINIMAL)\n            return 1 + fields.size();\n        // filename, folder, range + fields\n        return 3 + fields.size();\n    }\n\n    // value of cell (row,col)\n    public Object getValueAt(int row, int col) {\n        // element to look at\n        Element e = (Element) elements.get(row);\n        switch(col) {\n            case 0:\n                return e;\n            case 1:\n                return e.getFolder();\n            case 2:\n                // (lazy-loads)\n                return e.getRange();\n            default:\n                // might need more metadata\n                if (e.details == null)\n                    try {\n                        e.loadMeta();\n                    } catch (IOException ioe) {\n                        // System.out.println(\"ERROR: \" + e + \" won't refresh\");\n                    }\n                // refresh failed -- is this a redundant test?\n                if (e.details == null)\n                    return null;\n                String key = ((MetadataTemplate.Field) fields.get(col - 2)).getVariable();\n                return e.details.get(key);\n        }\n    }\n\n    // is editable?\n    public boolean isCellEditable(int row, int col) {\n        // only after refresh?  no, assume refresh is always \"done\".  (threadme)\n        // everything except folder, and range\n        return (col != 1 && col != 2);\n    }\n\n    // column class\n    public Class getColumnClass(int col) {\n        switch(col) {\n            case 0:\n                // ???\n                return Element.class;\n            case 1:\n            case 2:\n                // well, it's a range or a folder...\n                return String.class;\n            default:\n                //  hrm.  well, assume it's a String...\n                return String.class;\n        }\n    }\n\n    // set cell (row,col)\n    public void setValueAt(Object value, int row, int col) {\n        // get element\n        Element e = (Element) elements.get(row);\n        switch(col) {\n            case // filename + active-flag\n            0:\n                e.active = ((Boolean) value).booleanValue();\n                break;\n            // case 1: ignore, range isn't editable\n            default:\n                // update a user-chosen metadata field\n                // this is the key to update\n                String key = ((MetadataTemplate.Field) fields.get(col - 2)).getVariable();\n                // null?  remove it.  (q: are there any cases where it's assumed key exists, like title?)\n                if (value == null || (value instanceof String && ((String) value).length() == 0)) {\n                    e.details.remove(key);\n                } else {\n                    // try to squeeze the string into an integer\n                    try {\n                        value = new Integer(value.toString());\n                    } catch (NumberFormatException nfe) {\n                        // ... but don't care if you can't\n                    }\n                    // store it in the Element\n                    e.details.put(key, value);\n                }\n                // update the disk file -- do this in a background thread, or delayed?  see jwz.\n                Sample s;\n                try {\n                    s = e.load();\n                } catch (IOException ioe) {\n                    Alert.error(\"I/O Error\", \"Error loading file: \" + ioe.getMessage());\n                    return;\n                }\n                s.meta.put(key, value);\n                try {\n                    s.save();\n                } catch (IOException ioe) {\n                    Alert.error(\"I/O Error\", \"Error saving file: \" + ioe.getMessage());\n                }\n        }\n        fireTableCellUpdated(row, col);\n        // this (maybe?) changes the sample, if this [list of\n        // elements] is some sample's .elements -- so [this list of\n        // elements] should also have a \"Sample myMaster\" member, so I\n        // can say here \"myMaster.setModified()\"  (right?)\n    }\n}\n",
		"id": "/EvoSuiteBenchmark/35_corina/src/main/java/corina/gui/ElementsTableModel.java",
		"test_prompt": "// ElementsTableModelTest.java\n// This file is part of Corina.\n//\n// Corina is free software; you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation; either version 2 of the License, or\n// (at your option) any later version.\n//\n// Corina is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Corina; if not, write to the Free Software\n// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n//\n// Copyright 2001 Ken Harris <kbh7@cornell.edu>\n//\npackage corina.gui;\n\nimport corina.MetadataTemplate;\nimport corina.Element;\nimport corina.Sample;\nimport corina.ui.Alert;\nimport java.io.IOException;\nimport java.io.File;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.awt.Component;\nimport java.awt.Color;\nimport java.awt.BorderLayout;\nimport java.awt.FlowLayout;\nimport javax.swing.JCheckBox;\nimport javax.swing.JPanel;\nimport javax.swing.JLabel;\nimport javax.swing.JTable;\nimport javax.swing.table.TableCellEditor;\nimport javax.swing.table.TableCellRenderer;\nimport javax.swing.table.AbstractTableModel;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link ElementsTableModel}.\n* It contains ten unit test cases for the {@link ElementsTableModel#isCellEditable(int, int)} method.\n*/\nclass ElementsTableModelTest {"
	},
	{
		"original_code": "// Bug.java\npackage corina.gui;\n\nimport java.awt.BorderLayout;\nimport java.awt.event.ActionEvent;\nimport java.io.PrintWriter;\nimport java.text.DateFormat;\nimport java.util.Date;\nimport javax.swing.AbstractAction;\nimport javax.swing.BorderFactory;\nimport javax.swing.JButton;\nimport javax.swing.JComponent;\nimport javax.swing.JDialog;\nimport javax.swing.JPanel;\nimport javax.swing.JScrollPane;\nimport javax.swing.JTextArea;\nimport corina.Build;\nimport corina.util.Center;\nimport corina.util.OKCancel;\nimport corina.util.PureStringWriter;\n\n// TODO: refactor!\n// TODO: sizing: the dialog shouldn't change width -- set initial\n// width based on textField.getPreferredSize()?  also, it might look\n// weird for it to be centered when small, and then expand down.\n// TODO: let user copy bug report\n// TODO: let user print bug report (!!)\n// TODO: need big bug icon!\n/**\n *    A dialog for telling the user \"You've found a bug!\".\n *\n *    <p>This dialog tells the user that a bug in Corina was encountered,\n *    and gives the option of showing detailed information (the stack\n *    trace, and some info about the OS and JVM).</p>\n *\n *    <p>In the future, it should also lets the user copy, mail, print,\n *    or submit to SF's tracker the bug report.  It can also allow the\n *    user to easily save all data, or save all data to a special place\n *    (either with their default savers, or using serialization.</p>\n *\n *    <p>Use this for \"can't happen\" blocks, when you <b>know</b>\n *    something can't happen, but have to catch the exception for the\n *    compiler to be happy.  For example,</p>\n *\n * <pre>\n *    try {\n *       StringWriter s = new StringWriter();\n *       s.write(\"hello, world\");\n *    } catch (IOException ioe) {\n *       // there's no way a StringWriter can throw an IOE --\n *       // it's just appending to a StringBuffer --\n *       // but java requires us to catch it, since\n *       // Writer declares it.  but we don't want to ignore\n *       // it, either.\n *       new Bug(ioe);\n *    }\n * </pre>\n *\n *    @author Ken Harris &lt;kbh7 <i style=\"color: gray\">at</i> cornell <i style=\"color: gray\">dot</i> edu&gt;\n *    @version $Id: Bug.java,v 1.10 2005/01/24 03:09:35 aaron Exp $\n */\npublic class Bug extends JDialog {\n\n    /**\n     * Get the stack trace from a Throwable, as a String.\n     *\n     * <p>I think Java 1.4 has a method for this, but I'm not\n     * targetting 1.4 (yet).</p>\n     *\n     * @param t the Throwable (usually an Exception) to examine\n     * @return its stack trace\n     */\n    public static String getStackTrace(Throwable t) {\n        // use PureStringWriter here because otherwise windows\n        // would show funny boxes when displaying it.\n        // XXX: is that right... I need to check this -- Aaron\n        PureStringWriter sw = new PureStringWriter();\n        PrintWriter pw = new PrintWriter(sw);\n        t.printStackTrace(pw);\n        return sw.toString();\n    }\n\n    /**\n     * Assemble some system info useful for bug reports.\n     *\n     * <p>This consists of:</p>\n     *\n     * <ul>\n     *   <li>the date and time of the Corina build\n     *   <li>the name, version, and architecture of the OS\n     *   <li>the name, version, and vendor for the Java runtime/VM\n     *       specification/implementation\n     *   <li>the current date and time\n     * </ul>\n     *\n     * @return a string containing some system info\n     */\n    public static String getSystemInfo() {\n        StringBuffer buf = new StringBuffer();\n        // a nice header\n        buf.append(\"System Information:\\n\");\n        buf.append(\"\\n\");\n        // time/date/version of build\n        buf.append(\"Corina\\n\");\n        buf.append(\"   Version \" + Build.VERSION + \"\\n\");\n        buf.append(\"   Built at \" + Build.TIMESTAMP + \"\\n\");\n        // properties of the OS\n        buf.append(\"Operating system\\n\");\n        buf.append(\"   Name: \" + System.getProperty(\"os.name\") + \"\\n\");\n        buf.append(\"   Version: \" + System.getProperty(\"os.version\") + \"\\n\");\n        buf.append(\"   Architecture: \" + System.getProperty(\"os.arch\") + \"\\n\");\n        // java runtime environment\n        buf.append(\"Java Runtime Environment\\n\");\n        // spec\n        {\n            String version = System.getProperty(\"java.specification.version\");\n            String vendor = System.getProperty(\"java.specification.vendor\");\n            String name = System.getProperty(\"java.specification.name\");\n            buf.append(\"   Specification: \" + name + \", version \" + version + \", by \" + vendor + \"\\n\");\n        }\n        // impl\n        {\n            String version = System.getProperty(\"java.version\");\n            String vendor = System.getProperty(\"java.vendor\");\n            buf.append(\"   Implementation: version \" + version + \", by \" + vendor + \"\\n\");\n        }\n        // java VM\n        buf.append(\"Java Virtual Machine\\n\");\n        // spec\n        {\n            String version = System.getProperty(\"java.vm.specification.version\");\n            String vendor = System.getProperty(\"java.vm.specification.vendor\");\n            String name = System.getProperty(\"java.vm.specification.name\");\n            buf.append(\"   Specification: \" + name + \", version \" + version + \", by \" + vendor + \"\\n\");\n        }\n        // impl\n        {\n            String version = System.getProperty(\"java.vm.version\");\n            String vendor = System.getProperty(\"java.vm.vendor\");\n            String name = System.getProperty(\"java.vm.name\");\n            buf.append(\"   Implementation: \" + name + \", version \" + version + \", by \" + vendor + \"\\n\");\n        }\n        // do i care about java.home, java.class.version (\"48.0\"?),\n        // or java.class.path?  probably not.\n        // current date/time\n        Date now = new Date();\n        DateFormat date = DateFormat.getDateInstance(DateFormat.LONG);\n        DateFormat time = DateFormat.getTimeInstance(DateFormat.LONG);\n        buf.append(\"\\n\");\n        buf.append(\"Bug report generated: \" + date.format(now) + \" at \" + time.format(now) + \"\\n\");\n        return buf.toString();\n    }\n\n    /**\n     * Make a new bug dialog.\n     *\n     * @param t a Throwable, usually an Exception, that is a bug\n     */\n    public Bug(Throwable t) {\n        super();\n        setTitle(\"Bug!\");\n        setDefaultCloseOperation(DISPOSE_ON_CLOSE);\n        JTextArea textArea = new JTextArea(\"Exception:\\n\" + getStackTrace(t) + \"\\n\\n\" + getSystemInfo(), 10, 50);\n        textArea.setEditable(false);\n        stackTrace = new JScrollPane(textArea);\n        JPanel message = Layout.flowLayoutL(\"You found a bug in Corina!\");\n        JButton bummer = new JButton(\"Bummer\");\n        bummer.addActionListener(new AbstractAction() {\n\n            public void actionPerformed(ActionEvent e) {\n                dispose();\n            }\n        });\n        more = new JButton(\"Show Details\");\n        more.addActionListener(new AbstractAction() {\n\n            public void actionPerformed(ActionEvent e) {\n                // toggle visibility of stackTrace component\n                if (visible) {\n                    // hide it\n                    getContentPane().remove(stackTrace);\n                    pack();\n                    // change text: next op will be \"show\"\n                    more.setText(\"Show Details\");\n                } else {\n                    // show it\n                    getContentPane().add(stackTrace, BorderLayout.CENTER);\n                    pack();\n                    // change text: next op will be \"hide\"\n                    more.setText(\"Hide Details\");\n                }\n                visible = !visible;\n            }\n        });\n        JPanel buttons = Layout.buttonLayout(more, null, bummer);\n        buttons.setBorder(BorderFactory.createEmptyBorder(10, 0, 0, 0));\n        JPanel content = Layout.borderLayout(message, null, null, null, buttons);\n        content.setBorder(BorderFactory.createEmptyBorder(10, 10, 10, 10));\n        setContentPane(content);\n        pack();\n        OKCancel.addKeyboardDefaults(bummer);\n        // setResizable(false);\n        Center.center(this);\n        show();\n    }\n\n    private JComponent stackTrace;\n\n    private JButton more;\n\n    private boolean visible = false;\n\n    /**\n     * Old interface! -- fix all occurances of this, then remove.\n     *\n     * @deprecated use new Bug(t)\n     */\n    public static void bug(Throwable t) {\n        new Bug(t);\n    }\n}\n",
		"id": "/EvoSuiteBenchmark/35_corina/src/main/java/corina/gui/Bug_0Test.java",
		"test_prompt": "// Bug_0Test.java\npackage corina.gui;\n\nimport java.awt.BorderLayout;\nimport java.awt.event.ActionEvent;\nimport java.io.PrintWriter;\nimport java.text.DateFormat;\nimport java.util.Date;\nimport javax.swing.AbstractAction;\nimport javax.swing.BorderFactory;\nimport javax.swing.JButton;\nimport javax.swing.JComponent;\nimport javax.swing.JDialog;\nimport javax.swing.JPanel;\nimport javax.swing.JScrollPane;\nimport javax.swing.JTextArea;\nimport corina.Build;\nimport corina.util.Center;\nimport corina.util.OKCancel;\nimport corina.util.PureStringWriter;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link Bug}.\n* It contains ten unit test cases for the {@link Bug#getStackTrace(Throwable)} method.\n*/\nclass Bug_0Test {"
	},
	{
		"original_code": "// Bug.java\npackage corina.gui;\n\nimport java.awt.BorderLayout;\nimport java.awt.event.ActionEvent;\nimport java.io.PrintWriter;\nimport java.text.DateFormat;\nimport java.util.Date;\nimport javax.swing.AbstractAction;\nimport javax.swing.BorderFactory;\nimport javax.swing.JButton;\nimport javax.swing.JComponent;\nimport javax.swing.JDialog;\nimport javax.swing.JPanel;\nimport javax.swing.JScrollPane;\nimport javax.swing.JTextArea;\nimport corina.Build;\nimport corina.util.Center;\nimport corina.util.OKCancel;\nimport corina.util.PureStringWriter;\n\n// TODO: refactor!\n// TODO: sizing: the dialog shouldn't change width -- set initial\n// width based on textField.getPreferredSize()?  also, it might look\n// weird for it to be centered when small, and then expand down.\n// TODO: let user copy bug report\n// TODO: let user print bug report (!!)\n// TODO: need big bug icon!\n/**\n *    A dialog for telling the user \"You've found a bug!\".\n *\n *    <p>This dialog tells the user that a bug in Corina was encountered,\n *    and gives the option of showing detailed information (the stack\n *    trace, and some info about the OS and JVM).</p>\n *\n *    <p>In the future, it should also lets the user copy, mail, print,\n *    or submit to SF's tracker the bug report.  It can also allow the\n *    user to easily save all data, or save all data to a special place\n *    (either with their default savers, or using serialization.</p>\n *\n *    <p>Use this for \"can't happen\" blocks, when you <b>know</b>\n *    something can't happen, but have to catch the exception for the\n *    compiler to be happy.  For example,</p>\n *\n * <pre>\n *    try {\n *       StringWriter s = new StringWriter();\n *       s.write(\"hello, world\");\n *    } catch (IOException ioe) {\n *       // there's no way a StringWriter can throw an IOE --\n *       // it's just appending to a StringBuffer --\n *       // but java requires us to catch it, since\n *       // Writer declares it.  but we don't want to ignore\n *       // it, either.\n *       new Bug(ioe);\n *    }\n * </pre>\n *\n *    @author Ken Harris &lt;kbh7 <i style=\"color: gray\">at</i> cornell <i style=\"color: gray\">dot</i> edu&gt;\n *    @version $Id: Bug.java,v 1.10 2005/01/24 03:09:35 aaron Exp $\n */\npublic class Bug extends JDialog {\n\n    /**\n     * Get the stack trace from a Throwable, as a String.\n     *\n     * <p>I think Java 1.4 has a method for this, but I'm not\n     * targetting 1.4 (yet).</p>\n     *\n     * @param t the Throwable (usually an Exception) to examine\n     * @return its stack trace\n     */\n    public static String getStackTrace(Throwable t) {\n        // use PureStringWriter here because otherwise windows\n        // would show funny boxes when displaying it.\n        // XXX: is that right... I need to check this -- Aaron\n        PureStringWriter sw = new PureStringWriter();\n        PrintWriter pw = new PrintWriter(sw);\n        t.printStackTrace(pw);\n        return sw.toString();\n    }\n\n    /**\n     * Assemble some system info useful for bug reports.\n     *\n     * <p>This consists of:</p>\n     *\n     * <ul>\n     *   <li>the date and time of the Corina build\n     *   <li>the name, version, and architecture of the OS\n     *   <li>the name, version, and vendor for the Java runtime/VM\n     *       specification/implementation\n     *   <li>the current date and time\n     * </ul>\n     *\n     * @return a string containing some system info\n     */\n    public static String getSystemInfo() {\n        StringBuffer buf = new StringBuffer();\n        // a nice header\n        buf.append(\"System Information:\\n\");\n        buf.append(\"\\n\");\n        // time/date/version of build\n        buf.append(\"Corina\\n\");\n        buf.append(\"   Version \" + Build.VERSION + \"\\n\");\n        buf.append(\"   Built at \" + Build.TIMESTAMP + \"\\n\");\n        // properties of the OS\n        buf.append(\"Operating system\\n\");\n        buf.append(\"   Name: \" + System.getProperty(\"os.name\") + \"\\n\");\n        buf.append(\"   Version: \" + System.getProperty(\"os.version\") + \"\\n\");\n        buf.append(\"   Architecture: \" + System.getProperty(\"os.arch\") + \"\\n\");\n        // java runtime environment\n        buf.append(\"Java Runtime Environment\\n\");\n        // spec\n        {\n            String version = System.getProperty(\"java.specification.version\");\n            String vendor = System.getProperty(\"java.specification.vendor\");\n            String name = System.getProperty(\"java.specification.name\");\n            buf.append(\"   Specification: \" + name + \", version \" + version + \", by \" + vendor + \"\\n\");\n        }\n        // impl\n        {\n            String version = System.getProperty(\"java.version\");\n            String vendor = System.getProperty(\"java.vendor\");\n            buf.append(\"   Implementation: version \" + version + \", by \" + vendor + \"\\n\");\n        }\n        // java VM\n        buf.append(\"Java Virtual Machine\\n\");\n        // spec\n        {\n            String version = System.getProperty(\"java.vm.specification.version\");\n            String vendor = System.getProperty(\"java.vm.specification.vendor\");\n            String name = System.getProperty(\"java.vm.specification.name\");\n            buf.append(\"   Specification: \" + name + \", version \" + version + \", by \" + vendor + \"\\n\");\n        }\n        // impl\n        {\n            String version = System.getProperty(\"java.vm.version\");\n            String vendor = System.getProperty(\"java.vm.vendor\");\n            String name = System.getProperty(\"java.vm.name\");\n            buf.append(\"   Implementation: \" + name + \", version \" + version + \", by \" + vendor + \"\\n\");\n        }\n        // do i care about java.home, java.class.version (\"48.0\"?),\n        // or java.class.path?  probably not.\n        // current date/time\n        Date now = new Date();\n        DateFormat date = DateFormat.getDateInstance(DateFormat.LONG);\n        DateFormat time = DateFormat.getTimeInstance(DateFormat.LONG);\n        buf.append(\"\\n\");\n        buf.append(\"Bug report generated: \" + date.format(now) + \" at \" + time.format(now) + \"\\n\");\n        return buf.toString();\n    }\n\n    /**\n     * Make a new bug dialog.\n     *\n     * @param t a Throwable, usually an Exception, that is a bug\n     */\n    public Bug(Throwable t) {\n        super();\n        setTitle(\"Bug!\");\n        setDefaultCloseOperation(DISPOSE_ON_CLOSE);\n        JTextArea textArea = new JTextArea(\"Exception:\\n\" + getStackTrace(t) + \"\\n\\n\" + getSystemInfo(), 10, 50);\n        textArea.setEditable(false);\n        stackTrace = new JScrollPane(textArea);\n        JPanel message = Layout.flowLayoutL(\"You found a bug in Corina!\");\n        JButton bummer = new JButton(\"Bummer\");\n        bummer.addActionListener(new AbstractAction() {\n\n            public void actionPerformed(ActionEvent e) {\n                dispose();\n            }\n        });\n        more = new JButton(\"Show Details\");\n        more.addActionListener(new AbstractAction() {\n\n            public void actionPerformed(ActionEvent e) {\n                // toggle visibility of stackTrace component\n                if (visible) {\n                    // hide it\n                    getContentPane().remove(stackTrace);\n                    pack();\n                    // change text: next op will be \"show\"\n                    more.setText(\"Show Details\");\n                } else {\n                    // show it\n                    getContentPane().add(stackTrace, BorderLayout.CENTER);\n                    pack();\n                    // change text: next op will be \"hide\"\n                    more.setText(\"Hide Details\");\n                }\n                visible = !visible;\n            }\n        });\n        JPanel buttons = Layout.buttonLayout(more, null, bummer);\n        buttons.setBorder(BorderFactory.createEmptyBorder(10, 0, 0, 0));\n        JPanel content = Layout.borderLayout(message, null, null, null, buttons);\n        content.setBorder(BorderFactory.createEmptyBorder(10, 10, 10, 10));\n        setContentPane(content);\n        pack();\n        OKCancel.addKeyboardDefaults(bummer);\n        // setResizable(false);\n        Center.center(this);\n        show();\n    }\n\n    private JComponent stackTrace;\n\n    private JButton more;\n\n    private boolean visible = false;\n\n    /**\n     * Old interface! -- fix all occurances of this, then remove.\n     *\n     * @deprecated use new Bug(t)\n     */\n    public static void bug(Throwable t) {\n        new Bug(t);\n    }\n}\n",
		"id": "/EvoSuiteBenchmark/35_corina/src/main/java/corina/gui/Bug_1Test.java",
		"test_prompt": "// Bug_1Test.java\npackage corina.gui;\n\nimport java.awt.BorderLayout;\nimport java.awt.event.ActionEvent;\nimport java.io.PrintWriter;\nimport java.text.DateFormat;\nimport java.util.Date;\nimport javax.swing.AbstractAction;\nimport javax.swing.BorderFactory;\nimport javax.swing.JButton;\nimport javax.swing.JComponent;\nimport javax.swing.JDialog;\nimport javax.swing.JPanel;\nimport javax.swing.JScrollPane;\nimport javax.swing.JTextArea;\nimport corina.Build;\nimport corina.util.Center;\nimport corina.util.OKCancel;\nimport corina.util.PureStringWriter;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link Bug}.\n* It contains ten unit test cases for the {@link Bug#getSystemInfo()} method.\n*/\nclass Bug_1Test {"
	},
	{
		"original_code": "// Startup.java\n//\n// This file is part of Corina.\n//\n// Corina is free software; you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation; either version 2 of the License, or\n// (at your option) any later version.\n//\n// Corina is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Corina; if not, write to the Free Software\n// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n//\n// Copyright 2001 Ken Harris <kbh7@cornell.edu>\n//\npackage corina.gui;\n\nimport java.awt.Toolkit;\nimport java.net.URL;\nimport java.security.AccessController;\nimport java.security.PrivilegedAction;\nimport java.util.ArrayList;\nimport javax.security.auth.Subject;\nimport javax.security.auth.callback.Callback;\nimport javax.security.auth.callback.CallbackHandler;\nimport javax.security.auth.callback.NameCallback;\nimport javax.security.auth.callback.PasswordCallback;\nimport javax.security.auth.login.LoginContext;\nimport javax.security.auth.login.LoginException;\nimport javax.swing.ImageIcon;\nimport javax.swing.JOptionPane;\nimport javax.swing.JTextField;\nimport corina.Element;\nimport corina.core.App;\nimport corina.graph.GraphWindow;\n\n/**\n * Bootstrap for Corina. It all starts here...\n *\n * <h2>Left to do</h2>\n * <ul>\n * <li>extract Bootstrap, which will make testing much easier (Startup =\n * Bootstrap + new XCorina())\n * </ul>\n *\n * @author Ken Harris &lt;kbh7 <i style=\"color: gray\">at </i> cornell <i\n *         style=\"color: gray\">dot </i> edu&gt;\n * @version $Id: Startup.java,v 1.16 2006/05/30 20:11:46 lucasmo Exp $\n */\npublic class Startup implements PrivilegedAction {\n\n    private String[] args;\n\n    private Startup(String[] args) {\n        this.args = args;\n    }\n\n    public Object run() {\n        Subject subject = Subject.getSubject(AccessController.getContext());\n        if (subject != null) {\n            // replace the event queue with one that has the Subject stored\n            Toolkit.getDefaultToolkit().getSystemEventQueue().push(new AccessControlContextEventQueue());\n        }\n        /*\n     * Font f = new Font(\"courier\", java.awt.Font.PLAIN, 24);\n     * UIManager.put(\"Menu.font\", f); UIManager.put(\"MenuItem.font\", f);\n     */\n        try {\n            // TODO: implement progress listeners and splash screen for real\n            ClassLoader cl = this.getClass().getClassLoader();\n            URL url = cl.getResource(\"Images/Tree.png\");\n            ImageIcon ii = null;\n            if (url != null) {\n                ii = new ImageIcon(url);\n            }\n            Splash splash = new Splash(\"Starting Corina\", ii);\n            ProgressMeter pm = new ProgressMeter();\n            pm.addProgressListener(splash);\n            App.init(pm);\n            //monitor.close();\n            // let's go...\n            XCorina.showCorinaWindow();\n        } catch (Throwable t) {\n            new Bug(t);\n        }\n        return null;\n    }\n\n    private static final class PasswordDialogCallbackHandler implements CallbackHandler {\n\n        private boolean prompted = false;\n\n        private String user;\n\n        private String pass;\n\n        public void handle(Callback[] callbacks) {\n            if (prompted)\n                return;\n            JTextField nameField = new JTextField();\n            JTextField passField = new JTextField();\n            int option = JOptionPane.showOptionDialog(null, new Object[] { \"user name\", nameField, \"password\", passField }, \"Login\", JOptionPane.OK_CANCEL_OPTION, JOptionPane.QUESTION_MESSAGE, null, null, null);\n            prompted = true;\n            if (option == JOptionPane.CLOSED_OPTION || option == JOptionPane.CANCEL_OPTION) {\n                return;\n            }\n            for (int i = 0; i < callbacks.length; i++) {\n                System.out.println(\"Callback \" + i + \": \" + callbacks[i]);\n                if (callbacks[i] instanceof NameCallback) {\n                    ((NameCallback) callbacks[i]).setName(user);\n                } else if (callbacks[i] instanceof PasswordCallback) {\n                    ((PasswordCallback) callbacks[i]).setPassword(pass.toCharArray());\n                }\n            }\n        }\n    }\n\n    /**\n     * The <code>main()</code> method that sets all of Corina in motion. Loads\n     * system and user preferences, and instantiates an XCorina object.\n     * @param args\n     *          command-line arguments; ignored\n     */\n    public static void main(String[] args) {\n        // the Java Web Start security manager is by default horribly restrictive.\n        System.setSecurityManager(null);\n        if (args.length == 0 || !\"-a\".equals(args[0])) {\n            new Startup(args).run();\n            return;\n        }\n        // Obtain a LoginContext, needed for authentication. Tell it\n        // to use the LoginModule implementation specified by the\n        // entry named \"Corina\" in the JAAS login configuration\n        // file and to also use the specified CallbackHandler.\n        LoginContext lc = null;\n        try {\n            lc = new LoginContext(\"Corina\", new PasswordDialogCallbackHandler());\n        } catch (LoginException le) {\n            System.err.println(\"Cannot create LoginContext. \" + le.getMessage());\n            System.exit(-1);\n        } catch (SecurityException se) {\n            System.err.println(\"Cannot create LoginContext. \" + se.getMessage());\n            System.exit(-1);\n        }\n        int i;\n        for (i = 0; i < 3; i++) {\n            try {\n                // attempt authentication\n                lc.login();\n                break;\n            } catch (LoginException le) {\n                System.err.println(\"Authentication failed:\");\n                System.err.println(\"  \" + le.getMessage());\n                System.exit(-1);\n            }\n        }\n        // did they fail three times?\n        if (i == 3) {\n            System.out.println(\"Sorry\");\n            System.exit(-1);\n        }\n        System.out.println(\"Authentication succeeded!\");\n        Subject mySubject = lc.getSubject();\n        Subject.doAsPrivileged(mySubject, new Startup(args), null);\n        //Subject.doAs(mySubject, new Startup(args));\n    }\n}\n",
		"id": "/EvoSuiteBenchmark/35_corina/src/main/java/corina/gui/Startup.java",
		"test_prompt": "// StartupTest.java\n// This file is part of Corina.\n//\n// Corina is free software; you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation; either version 2 of the License, or\n// (at your option) any later version.\n//\n// Corina is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Corina; if not, write to the Free Software\n// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n//\n// Copyright 2001 Ken Harris <kbh7@cornell.edu>\n//\npackage corina.gui;\n\nimport java.awt.Toolkit;\nimport java.net.URL;\nimport java.security.AccessController;\nimport java.security.PrivilegedAction;\nimport java.util.ArrayList;\nimport javax.security.auth.Subject;\nimport javax.security.auth.callback.Callback;\nimport javax.security.auth.callback.CallbackHandler;\nimport javax.security.auth.callback.NameCallback;\nimport javax.security.auth.callback.PasswordCallback;\nimport javax.security.auth.login.LoginContext;\nimport javax.security.auth.login.LoginException;\nimport javax.swing.ImageIcon;\nimport javax.swing.JOptionPane;\nimport javax.swing.JTextField;\nimport corina.Element;\nimport corina.core.App;\nimport corina.graph.GraphWindow;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link Startup}.\n* It contains ten unit test cases for the {@link Startup#run()} method.\n*/\nclass StartupTest {"
	},
	{
		"original_code": "// Range.java\n//\n// This file is part of Corina.\n//\n// Corina is free software; you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation; either version 2 of the License, or\n// (at your option) any later version.\n//\n// Corina is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Corina; if not, write to the Free Software\n// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n//\n// Copyright 2001 Ken Harris <kbh7@cornell.edu>\n//\npackage corina;\n\n/**\n *   A range of years.  Ranges are immutable; all otherwise-destructive\n *   operations on a Range return a new Range.\n *\n *   <p>Unfortunately, use of this data structure in the class Sample\n *   often violates the single-instance storage principle: we hope that\n *   the usage of Range and Sample will always keep\n *   <code>Sample.data.size() == Range.span()</code>, but there aren't\n *   any built-in ways to do this, so it's up to you.  (If you add an\n *   element to sample.data, increase sample.range by one, for example.)\n *   The problem is that the <code>end</code> field is a duplicate of\n *   <code>Sample.data.size() + start</code>.</p>\n *\n *   @see Year\n *   @see Sample\n *\n *   @author Ken Harris &lt;kbh7 <i style=\"color: gray\">at</i> cornell <i style=\"color: gray\">dot</i> edu&gt;\n *   @version $Id: Range.java,v 1.5 2004/01/18 17:53:47 aaron Exp $\n */\npublic class Range implements Comparable {\n\n    /**\n     * Starting year of the Range.\n     */\n    private Year start;\n\n    /**\n     * Ending year of the range.\n     */\n    private Year end;\n\n    /**\n     *  Construct a new empty range, starting at <code>Year.DEFAULT</code>.\n     * \t@see Year\n     */\n    public Range() {\n        // this is only used by GraphFrame (which shouldn't use it)\n        // -- and Sample\n        start = Year.DEFAULT;\n        end = start.add(-1);\n    }\n\n    /**\n     *  Construct a new range, from y<sub>1</sub> to y<sub>2</sub>.\n     * \t(Neither year may be <code>null</code>.)  If y<sub>2</sub> &lt; y<sub>1</sub>,\n     * \tit is an empty interval.\n     * \t@param y1 starting year\n     * \t@param y2 ending year\n     */\n    public Range(Year y1, Year y2) {\n        // null argument?\n        if (y1 == null || y2 == null)\n            throw new NullPointerException();\n        this.start = y1;\n        this.end = y2;\n        // empty interval?\n        if (start.compareTo(end) > 0) {\n            start = Year.DEFAULT;\n            end = start.add(-1);\n        }\n    }\n\n    /**\n     *       Construct a range, given a starting year and span.\n     *\n     *       @param y the starting year\n     *       @param span the number of years\n     */\n    public Range(Year y, int span) {\n        this.start = y;\n        this.end = y.add(span - 1);\n    }\n\n    /**\n     *       Construct a range from a String.\n     *\n     *       @param s the String\n     */\n    public Range(String s) {\n        // (Grid.GridHandler.startElement is the only place this is used)\n        // (ignore outside whitespace)\n        String t = s.trim();\n        // find the first dash that isn't t[0]\n        int dash = t.indexOf('-', 1);\n        // -- there must be a dash! --\n        if (dash == -1)\n            throw new IllegalArgumentException();\n        // y1 is everything before, y2 is everything after\n        String y1 = t.substring(0, dash);\n        String y2 = t.substring(dash + 1);\n        // construct years\n        start = new Year(y1);\n        end = new Year(y2);\n    }\n\n    /**\n     *       Get the starting year of this range.\n     *\n     *       @return the starting year\n     */\n    public Year getStart() {\n        return start;\n    }\n\n    /**\n     *       Get the ending year of this range.\n     *\n     *       @return the ending year\n     */\n    public Year getEnd() {\n        return end;\n    }\n\n    /**\n     *       Set the starting year of the range, and adjust the ending year\n     *       to maintain the same length.\n     *\n     *       @param y new starting year for the range\n     *       @see #redateEndTo\n     */\n    public Range redateStartTo(Year y) {\n        return redateBy(y.diff(start));\n    }\n\n    /**\n     *        Redate a range by a certain number of years.  Usually, you'll\n     *        use redateStartTo() or redateEndTo(), which are more\n     *        convenient.\n     *\n     * \t@param dy the number of years to shift this range by\n     */\n    public Range redateBy(int dy) {\n        return new Range(start.add(dy), end.add(dy));\n    }\n\n    /**\n     *        Set the ending year of the range, and adjust the start year to\n     *        maintain the same length.\n     *\n     * \t@param y new ending year for the range\n     * \t@see #redateStartTo\n     */\n    public Range redateEndTo(Year y) {\n        return redateBy(y.diff(end));\n    }\n\n    /**\n     *       Return the number of years spanned by this range.  For\n     *       example, the range 1001 - 1005 spans 5 years.\n     *\n     *       @return the span of this range (difference between start and\n     *       end, inclusive)\n     */\n    public int span() {\n        return end.diff(start) + 1;\n    }\n\n    /**\n     *       Compute the number of rows this Range will take to display,\n     *       assuming rows are marked off as the row() method does.\n     *\n     *       @return the number of rows this range spans\n     */\n    public int rows() {\n        return getEnd().row() - getStart().row() + 1;\n    }\n\n    /**\n     *       Return a simple string representation of the range,\n     *       like \"1001 - 1036\".\n     *\n     *       @return a string representation of the range\n     */\n    public String toString() {\n        // this tends to get called a lot, so we'll memoize it.\n        if (memo == null)\n            // use \\u2014 EM DASH?\n            memo = start + \" - \" + end;\n        return memo;\n    }\n\n    private String memo = null;\n\n    /**\n     *       Return a string representation of the range, including\n     *       the span, like \"(1001 - 1036, n=36)\".\n     *\n     *       @return a string representation of the range, including span\n     */\n    public String toStringWithSpan() {\n        return \"(\" + start + \" - \" + end + \", n=\" + span() + \")\";\n        // use \\u2014 EM DASH?\n    }\n\n    /**\n     *       Return true if (and only if) the given year is inside the\n     *       range, inclusive.\n     *\n     *       @param y year to check\n     *       @return true if <code>y</code> is in the range, else false\n     */\n    public boolean contains(Year y) {\n        return (start.compareTo(y) <= 0) && (y.compareTo(end) <= 0);\n    }\n\n    /**\n     *       Return true if (and only if) the given range is completely\n     *       inside the range, inclusive.\n     *\n     *       @param r range to check\n     *       @return true if <code>r</code> is entirely in the range, else false\n     */\n    public boolean contains(Range r) {\n        return contains(r.start) && contains(r.end);\n    }\n\n    /**\n     *       Return true, iff this year is the start of a row.  (Year 1 is\n     *       considered the start of that row.)\n     *\n     *       @return true, iff this year is the start of a row\n     */\n    public boolean startOfRow(Year y) {\n        return y.equals(start) || y.column() == 0 || y.isYearOne();\n    }\n\n    /**\n     *       Return true, iff this year is the end of a row.\n     *\n     *       @return true, iff this year is the end of a row\n     */\n    public boolean endOfRow(Year y) {\n        return y.equals(end) || y.column() == 9;\n    }\n\n    /**\n     *       Return the number of years overlap between this range and the\n     *       given range.\n     *\n     *       @param r range to compare\n     *       @return number of years overlap\n     */\n    public int overlap(Range r) {\n        return intersection(r).span();\n    }\n\n    /**\n     *       The intersection of this range with r.  If they don't overlap,\n     *       returns an empty range (1 - -1).\n     *\n     *       @see #union\n     *\n     *       @param r the range to intersect with this range\n     *       @return the intersection of this and r\n     */\n    public Range intersection(Range r) {\n        return new Range(Year.max(start, r.start), Year.min(end, r.end));\n    }\n\n    /**\n     *       The union of this range with r.  Since there is no concept of\n     *       \"range with a gap\" in Corina, it assumes they overlap.\n     *\n     *       @see #intersection\n     *\n     *       @param r the range to union with this range\n     *       @return the union of this and r\n     */\n    public Range union(Range r) {\n        return new Range(Year.min(start, r.start), Year.max(end, r.end));\n    }\n\n    /**\n     *       Compare two ranges for equality.\n     *\n     *       @param r range to compare with this\n     *       @return true, if the ranges are equal, else false\n     */\n    public boolean equals(Object o) {\n        if (o instanceof Range) {\n            Range r = (Range) o;\n            return start.equals(r.start) && end.equals(r.end);\n        } else {\n            // not even a Range, can't be equal\n            return false;\n        }\n    }\n\n    /**\n     *       A hash code for the Range.  (Since I define equals(),\n     *       I need to define hashCode().)\n     *\n     *       @return a hash code for this Range\n     */\n    public int hashCode() {\n        return start.hashCode() + 2 * end.hashCode();\n    }\n\n    /**\n     *       Compares this and o, for placing in fallback order.  Fallback\n     *       order sorts ranges by their ending year, latest to earliest,\n     *       and then by their length, longest to shortest.  (This is\n     *       usually what people want when looking at bargraphs.)\n     *\n     *       @param o Object to compare\n     *       @return >0, ==0, or <0 if this is greater-than, equal-to, or less-than o\n     *       @throws ClassCastException if o is not a Range\n     */\n    public int compareTo(Object o) {\n        Range r2 = (Range) o;\n        int c1 = end.compareTo(r2.end);\n        if (c1 != 0)\n            return c1;\n        // negative, because fallback puts longest samples first\n        int c2 = -start.compareTo(r2.start);\n        return c2;\n    }\n}\n",
		"id": "/EvoSuiteBenchmark/35_corina/src/main/java/corina/Range_0Test.java",
		"test_prompt": "// Range_0Test.java\n// This file is part of Corina.\n//\n// Corina is free software; you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation; either version 2 of the License, or\n// (at your option) any later version.\n//\n// Corina is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Corina; if not, write to the Free Software\n// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n//\n// Copyright 2001 Ken Harris <kbh7@cornell.edu>\n//\npackage corina;\n\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link Range}.\n* It contains ten unit test cases for the {@link Range#redateStartTo(Year)} method.\n*/\nclass Range_0Test {"
	},
	{
		"original_code": "// Range.java\n//\n// This file is part of Corina.\n//\n// Corina is free software; you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation; either version 2 of the License, or\n// (at your option) any later version.\n//\n// Corina is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Corina; if not, write to the Free Software\n// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n//\n// Copyright 2001 Ken Harris <kbh7@cornell.edu>\n//\npackage corina;\n\n/**\n *   A range of years.  Ranges are immutable; all otherwise-destructive\n *   operations on a Range return a new Range.\n *\n *   <p>Unfortunately, use of this data structure in the class Sample\n *   often violates the single-instance storage principle: we hope that\n *   the usage of Range and Sample will always keep\n *   <code>Sample.data.size() == Range.span()</code>, but there aren't\n *   any built-in ways to do this, so it's up to you.  (If you add an\n *   element to sample.data, increase sample.range by one, for example.)\n *   The problem is that the <code>end</code> field is a duplicate of\n *   <code>Sample.data.size() + start</code>.</p>\n *\n *   @see Year\n *   @see Sample\n *\n *   @author Ken Harris &lt;kbh7 <i style=\"color: gray\">at</i> cornell <i style=\"color: gray\">dot</i> edu&gt;\n *   @version $Id: Range.java,v 1.5 2004/01/18 17:53:47 aaron Exp $\n */\npublic class Range implements Comparable {\n\n    /**\n     * Starting year of the Range.\n     */\n    private Year start;\n\n    /**\n     * Ending year of the range.\n     */\n    private Year end;\n\n    /**\n     *  Construct a new empty range, starting at <code>Year.DEFAULT</code>.\n     * \t@see Year\n     */\n    public Range() {\n        // this is only used by GraphFrame (which shouldn't use it)\n        // -- and Sample\n        start = Year.DEFAULT;\n        end = start.add(-1);\n    }\n\n    /**\n     *  Construct a new range, from y<sub>1</sub> to y<sub>2</sub>.\n     * \t(Neither year may be <code>null</code>.)  If y<sub>2</sub> &lt; y<sub>1</sub>,\n     * \tit is an empty interval.\n     * \t@param y1 starting year\n     * \t@param y2 ending year\n     */\n    public Range(Year y1, Year y2) {\n        // null argument?\n        if (y1 == null || y2 == null)\n            throw new NullPointerException();\n        this.start = y1;\n        this.end = y2;\n        // empty interval?\n        if (start.compareTo(end) > 0) {\n            start = Year.DEFAULT;\n            end = start.add(-1);\n        }\n    }\n\n    /**\n     *       Construct a range, given a starting year and span.\n     *\n     *       @param y the starting year\n     *       @param span the number of years\n     */\n    public Range(Year y, int span) {\n        this.start = y;\n        this.end = y.add(span - 1);\n    }\n\n    /**\n     *       Construct a range from a String.\n     *\n     *       @param s the String\n     */\n    public Range(String s) {\n        // (Grid.GridHandler.startElement is the only place this is used)\n        // (ignore outside whitespace)\n        String t = s.trim();\n        // find the first dash that isn't t[0]\n        int dash = t.indexOf('-', 1);\n        // -- there must be a dash! --\n        if (dash == -1)\n            throw new IllegalArgumentException();\n        // y1 is everything before, y2 is everything after\n        String y1 = t.substring(0, dash);\n        String y2 = t.substring(dash + 1);\n        // construct years\n        start = new Year(y1);\n        end = new Year(y2);\n    }\n\n    /**\n     *       Get the starting year of this range.\n     *\n     *       @return the starting year\n     */\n    public Year getStart() {\n        return start;\n    }\n\n    /**\n     *       Get the ending year of this range.\n     *\n     *       @return the ending year\n     */\n    public Year getEnd() {\n        return end;\n    }\n\n    /**\n     *       Set the starting year of the range, and adjust the ending year\n     *       to maintain the same length.\n     *\n     *       @param y new starting year for the range\n     *       @see #redateEndTo\n     */\n    public Range redateStartTo(Year y) {\n        return redateBy(y.diff(start));\n    }\n\n    /**\n     *        Redate a range by a certain number of years.  Usually, you'll\n     *        use redateStartTo() or redateEndTo(), which are more\n     *        convenient.\n     *\n     * \t@param dy the number of years to shift this range by\n     */\n    public Range redateBy(int dy) {\n        return new Range(start.add(dy), end.add(dy));\n    }\n\n    /**\n     *        Set the ending year of the range, and adjust the start year to\n     *        maintain the same length.\n     *\n     * \t@param y new ending year for the range\n     * \t@see #redateStartTo\n     */\n    public Range redateEndTo(Year y) {\n        return redateBy(y.diff(end));\n    }\n\n    /**\n     *       Return the number of years spanned by this range.  For\n     *       example, the range 1001 - 1005 spans 5 years.\n     *\n     *       @return the span of this range (difference between start and\n     *       end, inclusive)\n     */\n    public int span() {\n        return end.diff(start) + 1;\n    }\n\n    /**\n     *       Compute the number of rows this Range will take to display,\n     *       assuming rows are marked off as the row() method does.\n     *\n     *       @return the number of rows this range spans\n     */\n    public int rows() {\n        return getEnd().row() - getStart().row() + 1;\n    }\n\n    /**\n     *       Return a simple string representation of the range,\n     *       like \"1001 - 1036\".\n     *\n     *       @return a string representation of the range\n     */\n    public String toString() {\n        // this tends to get called a lot, so we'll memoize it.\n        if (memo == null)\n            // use \\u2014 EM DASH?\n            memo = start + \" - \" + end;\n        return memo;\n    }\n\n    private String memo = null;\n\n    /**\n     *       Return a string representation of the range, including\n     *       the span, like \"(1001 - 1036, n=36)\".\n     *\n     *       @return a string representation of the range, including span\n     */\n    public String toStringWithSpan() {\n        return \"(\" + start + \" - \" + end + \", n=\" + span() + \")\";\n        // use \\u2014 EM DASH?\n    }\n\n    /**\n     *       Return true if (and only if) the given year is inside the\n     *       range, inclusive.\n     *\n     *       @param y year to check\n     *       @return true if <code>y</code> is in the range, else false\n     */\n    public boolean contains(Year y) {\n        return (start.compareTo(y) <= 0) && (y.compareTo(end) <= 0);\n    }\n\n    /**\n     *       Return true if (and only if) the given range is completely\n     *       inside the range, inclusive.\n     *\n     *       @param r range to check\n     *       @return true if <code>r</code> is entirely in the range, else false\n     */\n    public boolean contains(Range r) {\n        return contains(r.start) && contains(r.end);\n    }\n\n    /**\n     *       Return true, iff this year is the start of a row.  (Year 1 is\n     *       considered the start of that row.)\n     *\n     *       @return true, iff this year is the start of a row\n     */\n    public boolean startOfRow(Year y) {\n        return y.equals(start) || y.column() == 0 || y.isYearOne();\n    }\n\n    /**\n     *       Return true, iff this year is the end of a row.\n     *\n     *       @return true, iff this year is the end of a row\n     */\n    public boolean endOfRow(Year y) {\n        return y.equals(end) || y.column() == 9;\n    }\n\n    /**\n     *       Return the number of years overlap between this range and the\n     *       given range.\n     *\n     *       @param r range to compare\n     *       @return number of years overlap\n     */\n    public int overlap(Range r) {\n        return intersection(r).span();\n    }\n\n    /**\n     *       The intersection of this range with r.  If they don't overlap,\n     *       returns an empty range (1 - -1).\n     *\n     *       @see #union\n     *\n     *       @param r the range to intersect with this range\n     *       @return the intersection of this and r\n     */\n    public Range intersection(Range r) {\n        return new Range(Year.max(start, r.start), Year.min(end, r.end));\n    }\n\n    /**\n     *       The union of this range with r.  Since there is no concept of\n     *       \"range with a gap\" in Corina, it assumes they overlap.\n     *\n     *       @see #intersection\n     *\n     *       @param r the range to union with this range\n     *       @return the union of this and r\n     */\n    public Range union(Range r) {\n        return new Range(Year.min(start, r.start), Year.max(end, r.end));\n    }\n\n    /**\n     *       Compare two ranges for equality.\n     *\n     *       @param r range to compare with this\n     *       @return true, if the ranges are equal, else false\n     */\n    public boolean equals(Object o) {\n        if (o instanceof Range) {\n            Range r = (Range) o;\n            return start.equals(r.start) && end.equals(r.end);\n        } else {\n            // not even a Range, can't be equal\n            return false;\n        }\n    }\n\n    /**\n     *       A hash code for the Range.  (Since I define equals(),\n     *       I need to define hashCode().)\n     *\n     *       @return a hash code for this Range\n     */\n    public int hashCode() {\n        return start.hashCode() + 2 * end.hashCode();\n    }\n\n    /**\n     *       Compares this and o, for placing in fallback order.  Fallback\n     *       order sorts ranges by their ending year, latest to earliest,\n     *       and then by their length, longest to shortest.  (This is\n     *       usually what people want when looking at bargraphs.)\n     *\n     *       @param o Object to compare\n     *       @return >0, ==0, or <0 if this is greater-than, equal-to, or less-than o\n     *       @throws ClassCastException if o is not a Range\n     */\n    public int compareTo(Object o) {\n        Range r2 = (Range) o;\n        int c1 = end.compareTo(r2.end);\n        if (c1 != 0)\n            return c1;\n        // negative, because fallback puts longest samples first\n        int c2 = -start.compareTo(r2.start);\n        return c2;\n    }\n}\n",
		"id": "/EvoSuiteBenchmark/35_corina/src/main/java/corina/Range_1Test.java",
		"test_prompt": "// Range_1Test.java\n// This file is part of Corina.\n//\n// Corina is free software; you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation; either version 2 of the License, or\n// (at your option) any later version.\n//\n// Corina is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Corina; if not, write to the Free Software\n// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n//\n// Copyright 2001 Ken Harris <kbh7@cornell.edu>\n//\npackage corina;\n\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link Range}.\n* It contains ten unit test cases for the {@link Range#redateBy(int)} method.\n*/\nclass Range_1Test {"
	},
	{
		"original_code": "// Range.java\n//\n// This file is part of Corina.\n//\n// Corina is free software; you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation; either version 2 of the License, or\n// (at your option) any later version.\n//\n// Corina is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Corina; if not, write to the Free Software\n// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n//\n// Copyright 2001 Ken Harris <kbh7@cornell.edu>\n//\npackage corina;\n\n/**\n *   A range of years.  Ranges are immutable; all otherwise-destructive\n *   operations on a Range return a new Range.\n *\n *   <p>Unfortunately, use of this data structure in the class Sample\n *   often violates the single-instance storage principle: we hope that\n *   the usage of Range and Sample will always keep\n *   <code>Sample.data.size() == Range.span()</code>, but there aren't\n *   any built-in ways to do this, so it's up to you.  (If you add an\n *   element to sample.data, increase sample.range by one, for example.)\n *   The problem is that the <code>end</code> field is a duplicate of\n *   <code>Sample.data.size() + start</code>.</p>\n *\n *   @see Year\n *   @see Sample\n *\n *   @author Ken Harris &lt;kbh7 <i style=\"color: gray\">at</i> cornell <i style=\"color: gray\">dot</i> edu&gt;\n *   @version $Id: Range.java,v 1.5 2004/01/18 17:53:47 aaron Exp $\n */\npublic class Range implements Comparable {\n\n    /**\n     * Starting year of the Range.\n     */\n    private Year start;\n\n    /**\n     * Ending year of the range.\n     */\n    private Year end;\n\n    /**\n     *  Construct a new empty range, starting at <code>Year.DEFAULT</code>.\n     * \t@see Year\n     */\n    public Range() {\n        // this is only used by GraphFrame (which shouldn't use it)\n        // -- and Sample\n        start = Year.DEFAULT;\n        end = start.add(-1);\n    }\n\n    /**\n     *  Construct a new range, from y<sub>1</sub> to y<sub>2</sub>.\n     * \t(Neither year may be <code>null</code>.)  If y<sub>2</sub> &lt; y<sub>1</sub>,\n     * \tit is an empty interval.\n     * \t@param y1 starting year\n     * \t@param y2 ending year\n     */\n    public Range(Year y1, Year y2) {\n        // null argument?\n        if (y1 == null || y2 == null)\n            throw new NullPointerException();\n        this.start = y1;\n        this.end = y2;\n        // empty interval?\n        if (start.compareTo(end) > 0) {\n            start = Year.DEFAULT;\n            end = start.add(-1);\n        }\n    }\n\n    /**\n     *       Construct a range, given a starting year and span.\n     *\n     *       @param y the starting year\n     *       @param span the number of years\n     */\n    public Range(Year y, int span) {\n        this.start = y;\n        this.end = y.add(span - 1);\n    }\n\n    /**\n     *       Construct a range from a String.\n     *\n     *       @param s the String\n     */\n    public Range(String s) {\n        // (Grid.GridHandler.startElement is the only place this is used)\n        // (ignore outside whitespace)\n        String t = s.trim();\n        // find the first dash that isn't t[0]\n        int dash = t.indexOf('-', 1);\n        // -- there must be a dash! --\n        if (dash == -1)\n            throw new IllegalArgumentException();\n        // y1 is everything before, y2 is everything after\n        String y1 = t.substring(0, dash);\n        String y2 = t.substring(dash + 1);\n        // construct years\n        start = new Year(y1);\n        end = new Year(y2);\n    }\n\n    /**\n     *       Get the starting year of this range.\n     *\n     *       @return the starting year\n     */\n    public Year getStart() {\n        return start;\n    }\n\n    /**\n     *       Get the ending year of this range.\n     *\n     *       @return the ending year\n     */\n    public Year getEnd() {\n        return end;\n    }\n\n    /**\n     *       Set the starting year of the range, and adjust the ending year\n     *       to maintain the same length.\n     *\n     *       @param y new starting year for the range\n     *       @see #redateEndTo\n     */\n    public Range redateStartTo(Year y) {\n        return redateBy(y.diff(start));\n    }\n\n    /**\n     *        Redate a range by a certain number of years.  Usually, you'll\n     *        use redateStartTo() or redateEndTo(), which are more\n     *        convenient.\n     *\n     * \t@param dy the number of years to shift this range by\n     */\n    public Range redateBy(int dy) {\n        return new Range(start.add(dy), end.add(dy));\n    }\n\n    /**\n     *        Set the ending year of the range, and adjust the start year to\n     *        maintain the same length.\n     *\n     * \t@param y new ending year for the range\n     * \t@see #redateStartTo\n     */\n    public Range redateEndTo(Year y) {\n        return redateBy(y.diff(end));\n    }\n\n    /**\n     *       Return the number of years spanned by this range.  For\n     *       example, the range 1001 - 1005 spans 5 years.\n     *\n     *       @return the span of this range (difference between start and\n     *       end, inclusive)\n     */\n    public int span() {\n        return end.diff(start) + 1;\n    }\n\n    /**\n     *       Compute the number of rows this Range will take to display,\n     *       assuming rows are marked off as the row() method does.\n     *\n     *       @return the number of rows this range spans\n     */\n    public int rows() {\n        return getEnd().row() - getStart().row() + 1;\n    }\n\n    /**\n     *       Return a simple string representation of the range,\n     *       like \"1001 - 1036\".\n     *\n     *       @return a string representation of the range\n     */\n    public String toString() {\n        // this tends to get called a lot, so we'll memoize it.\n        if (memo == null)\n            // use \\u2014 EM DASH?\n            memo = start + \" - \" + end;\n        return memo;\n    }\n\n    private String memo = null;\n\n    /**\n     *       Return a string representation of the range, including\n     *       the span, like \"(1001 - 1036, n=36)\".\n     *\n     *       @return a string representation of the range, including span\n     */\n    public String toStringWithSpan() {\n        return \"(\" + start + \" - \" + end + \", n=\" + span() + \")\";\n        // use \\u2014 EM DASH?\n    }\n\n    /**\n     *       Return true if (and only if) the given year is inside the\n     *       range, inclusive.\n     *\n     *       @param y year to check\n     *       @return true if <code>y</code> is in the range, else false\n     */\n    public boolean contains(Year y) {\n        return (start.compareTo(y) <= 0) && (y.compareTo(end) <= 0);\n    }\n\n    /**\n     *       Return true if (and only if) the given range is completely\n     *       inside the range, inclusive.\n     *\n     *       @param r range to check\n     *       @return true if <code>r</code> is entirely in the range, else false\n     */\n    public boolean contains(Range r) {\n        return contains(r.start) && contains(r.end);\n    }\n\n    /**\n     *       Return true, iff this year is the start of a row.  (Year 1 is\n     *       considered the start of that row.)\n     *\n     *       @return true, iff this year is the start of a row\n     */\n    public boolean startOfRow(Year y) {\n        return y.equals(start) || y.column() == 0 || y.isYearOne();\n    }\n\n    /**\n     *       Return true, iff this year is the end of a row.\n     *\n     *       @return true, iff this year is the end of a row\n     */\n    public boolean endOfRow(Year y) {\n        return y.equals(end) || y.column() == 9;\n    }\n\n    /**\n     *       Return the number of years overlap between this range and the\n     *       given range.\n     *\n     *       @param r range to compare\n     *       @return number of years overlap\n     */\n    public int overlap(Range r) {\n        return intersection(r).span();\n    }\n\n    /**\n     *       The intersection of this range with r.  If they don't overlap,\n     *       returns an empty range (1 - -1).\n     *\n     *       @see #union\n     *\n     *       @param r the range to intersect with this range\n     *       @return the intersection of this and r\n     */\n    public Range intersection(Range r) {\n        return new Range(Year.max(start, r.start), Year.min(end, r.end));\n    }\n\n    /**\n     *       The union of this range with r.  Since there is no concept of\n     *       \"range with a gap\" in Corina, it assumes they overlap.\n     *\n     *       @see #intersection\n     *\n     *       @param r the range to union with this range\n     *       @return the union of this and r\n     */\n    public Range union(Range r) {\n        return new Range(Year.min(start, r.start), Year.max(end, r.end));\n    }\n\n    /**\n     *       Compare two ranges for equality.\n     *\n     *       @param r range to compare with this\n     *       @return true, if the ranges are equal, else false\n     */\n    public boolean equals(Object o) {\n        if (o instanceof Range) {\n            Range r = (Range) o;\n            return start.equals(r.start) && end.equals(r.end);\n        } else {\n            // not even a Range, can't be equal\n            return false;\n        }\n    }\n\n    /**\n     *       A hash code for the Range.  (Since I define equals(),\n     *       I need to define hashCode().)\n     *\n     *       @return a hash code for this Range\n     */\n    public int hashCode() {\n        return start.hashCode() + 2 * end.hashCode();\n    }\n\n    /**\n     *       Compares this and o, for placing in fallback order.  Fallback\n     *       order sorts ranges by their ending year, latest to earliest,\n     *       and then by their length, longest to shortest.  (This is\n     *       usually what people want when looking at bargraphs.)\n     *\n     *       @param o Object to compare\n     *       @return >0, ==0, or <0 if this is greater-than, equal-to, or less-than o\n     *       @throws ClassCastException if o is not a Range\n     */\n    public int compareTo(Object o) {\n        Range r2 = (Range) o;\n        int c1 = end.compareTo(r2.end);\n        if (c1 != 0)\n            return c1;\n        // negative, because fallback puts longest samples first\n        int c2 = -start.compareTo(r2.start);\n        return c2;\n    }\n}\n",
		"id": "/EvoSuiteBenchmark/35_corina/src/main/java/corina/Range_2Test.java",
		"test_prompt": "// Range_2Test.java\n// This file is part of Corina.\n//\n// Corina is free software; you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation; either version 2 of the License, or\n// (at your option) any later version.\n//\n// Corina is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Corina; if not, write to the Free Software\n// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n//\n// Copyright 2001 Ken Harris <kbh7@cornell.edu>\n//\npackage corina;\n\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link Range}.\n* It contains ten unit test cases for the {@link Range#redateEndTo(Year)} method.\n*/\nclass Range_2Test {"
	},
	{
		"original_code": "// Range.java\n//\n// This file is part of Corina.\n//\n// Corina is free software; you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation; either version 2 of the License, or\n// (at your option) any later version.\n//\n// Corina is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Corina; if not, write to the Free Software\n// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n//\n// Copyright 2001 Ken Harris <kbh7@cornell.edu>\n//\npackage corina;\n\n/**\n *   A range of years.  Ranges are immutable; all otherwise-destructive\n *   operations on a Range return a new Range.\n *\n *   <p>Unfortunately, use of this data structure in the class Sample\n *   often violates the single-instance storage principle: we hope that\n *   the usage of Range and Sample will always keep\n *   <code>Sample.data.size() == Range.span()</code>, but there aren't\n *   any built-in ways to do this, so it's up to you.  (If you add an\n *   element to sample.data, increase sample.range by one, for example.)\n *   The problem is that the <code>end</code> field is a duplicate of\n *   <code>Sample.data.size() + start</code>.</p>\n *\n *   @see Year\n *   @see Sample\n *\n *   @author Ken Harris &lt;kbh7 <i style=\"color: gray\">at</i> cornell <i style=\"color: gray\">dot</i> edu&gt;\n *   @version $Id: Range.java,v 1.5 2004/01/18 17:53:47 aaron Exp $\n */\npublic class Range implements Comparable {\n\n    /**\n     * Starting year of the Range.\n     */\n    private Year start;\n\n    /**\n     * Ending year of the range.\n     */\n    private Year end;\n\n    /**\n     *  Construct a new empty range, starting at <code>Year.DEFAULT</code>.\n     * \t@see Year\n     */\n    public Range() {\n        // this is only used by GraphFrame (which shouldn't use it)\n        // -- and Sample\n        start = Year.DEFAULT;\n        end = start.add(-1);\n    }\n\n    /**\n     *  Construct a new range, from y<sub>1</sub> to y<sub>2</sub>.\n     * \t(Neither year may be <code>null</code>.)  If y<sub>2</sub> &lt; y<sub>1</sub>,\n     * \tit is an empty interval.\n     * \t@param y1 starting year\n     * \t@param y2 ending year\n     */\n    public Range(Year y1, Year y2) {\n        // null argument?\n        if (y1 == null || y2 == null)\n            throw new NullPointerException();\n        this.start = y1;\n        this.end = y2;\n        // empty interval?\n        if (start.compareTo(end) > 0) {\n            start = Year.DEFAULT;\n            end = start.add(-1);\n        }\n    }\n\n    /**\n     *       Construct a range, given a starting year and span.\n     *\n     *       @param y the starting year\n     *       @param span the number of years\n     */\n    public Range(Year y, int span) {\n        this.start = y;\n        this.end = y.add(span - 1);\n    }\n\n    /**\n     *       Construct a range from a String.\n     *\n     *       @param s the String\n     */\n    public Range(String s) {\n        // (Grid.GridHandler.startElement is the only place this is used)\n        // (ignore outside whitespace)\n        String t = s.trim();\n        // find the first dash that isn't t[0]\n        int dash = t.indexOf('-', 1);\n        // -- there must be a dash! --\n        if (dash == -1)\n            throw new IllegalArgumentException();\n        // y1 is everything before, y2 is everything after\n        String y1 = t.substring(0, dash);\n        String y2 = t.substring(dash + 1);\n        // construct years\n        start = new Year(y1);\n        end = new Year(y2);\n    }\n\n    /**\n     *       Get the starting year of this range.\n     *\n     *       @return the starting year\n     */\n    public Year getStart() {\n        return start;\n    }\n\n    /**\n     *       Get the ending year of this range.\n     *\n     *       @return the ending year\n     */\n    public Year getEnd() {\n        return end;\n    }\n\n    /**\n     *       Set the starting year of the range, and adjust the ending year\n     *       to maintain the same length.\n     *\n     *       @param y new starting year for the range\n     *       @see #redateEndTo\n     */\n    public Range redateStartTo(Year y) {\n        return redateBy(y.diff(start));\n    }\n\n    /**\n     *        Redate a range by a certain number of years.  Usually, you'll\n     *        use redateStartTo() or redateEndTo(), which are more\n     *        convenient.\n     *\n     * \t@param dy the number of years to shift this range by\n     */\n    public Range redateBy(int dy) {\n        return new Range(start.add(dy), end.add(dy));\n    }\n\n    /**\n     *        Set the ending year of the range, and adjust the start year to\n     *        maintain the same length.\n     *\n     * \t@param y new ending year for the range\n     * \t@see #redateStartTo\n     */\n    public Range redateEndTo(Year y) {\n        return redateBy(y.diff(end));\n    }\n\n    /**\n     *       Return the number of years spanned by this range.  For\n     *       example, the range 1001 - 1005 spans 5 years.\n     *\n     *       @return the span of this range (difference between start and\n     *       end, inclusive)\n     */\n    public int span() {\n        return end.diff(start) + 1;\n    }\n\n    /**\n     *       Compute the number of rows this Range will take to display,\n     *       assuming rows are marked off as the row() method does.\n     *\n     *       @return the number of rows this range spans\n     */\n    public int rows() {\n        return getEnd().row() - getStart().row() + 1;\n    }\n\n    /**\n     *       Return a simple string representation of the range,\n     *       like \"1001 - 1036\".\n     *\n     *       @return a string representation of the range\n     */\n    public String toString() {\n        // this tends to get called a lot, so we'll memoize it.\n        if (memo == null)\n            // use \\u2014 EM DASH?\n            memo = start + \" - \" + end;\n        return memo;\n    }\n\n    private String memo = null;\n\n    /**\n     *       Return a string representation of the range, including\n     *       the span, like \"(1001 - 1036, n=36)\".\n     *\n     *       @return a string representation of the range, including span\n     */\n    public String toStringWithSpan() {\n        return \"(\" + start + \" - \" + end + \", n=\" + span() + \")\";\n        // use \\u2014 EM DASH?\n    }\n\n    /**\n     *       Return true if (and only if) the given year is inside the\n     *       range, inclusive.\n     *\n     *       @param y year to check\n     *       @return true if <code>y</code> is in the range, else false\n     */\n    public boolean contains(Year y) {\n        return (start.compareTo(y) <= 0) && (y.compareTo(end) <= 0);\n    }\n\n    /**\n     *       Return true if (and only if) the given range is completely\n     *       inside the range, inclusive.\n     *\n     *       @param r range to check\n     *       @return true if <code>r</code> is entirely in the range, else false\n     */\n    public boolean contains(Range r) {\n        return contains(r.start) && contains(r.end);\n    }\n\n    /**\n     *       Return true, iff this year is the start of a row.  (Year 1 is\n     *       considered the start of that row.)\n     *\n     *       @return true, iff this year is the start of a row\n     */\n    public boolean startOfRow(Year y) {\n        return y.equals(start) || y.column() == 0 || y.isYearOne();\n    }\n\n    /**\n     *       Return true, iff this year is the end of a row.\n     *\n     *       @return true, iff this year is the end of a row\n     */\n    public boolean endOfRow(Year y) {\n        return y.equals(end) || y.column() == 9;\n    }\n\n    /**\n     *       Return the number of years overlap between this range and the\n     *       given range.\n     *\n     *       @param r range to compare\n     *       @return number of years overlap\n     */\n    public int overlap(Range r) {\n        return intersection(r).span();\n    }\n\n    /**\n     *       The intersection of this range with r.  If they don't overlap,\n     *       returns an empty range (1 - -1).\n     *\n     *       @see #union\n     *\n     *       @param r the range to intersect with this range\n     *       @return the intersection of this and r\n     */\n    public Range intersection(Range r) {\n        return new Range(Year.max(start, r.start), Year.min(end, r.end));\n    }\n\n    /**\n     *       The union of this range with r.  Since there is no concept of\n     *       \"range with a gap\" in Corina, it assumes they overlap.\n     *\n     *       @see #intersection\n     *\n     *       @param r the range to union with this range\n     *       @return the union of this and r\n     */\n    public Range union(Range r) {\n        return new Range(Year.min(start, r.start), Year.max(end, r.end));\n    }\n\n    /**\n     *       Compare two ranges for equality.\n     *\n     *       @param r range to compare with this\n     *       @return true, if the ranges are equal, else false\n     */\n    public boolean equals(Object o) {\n        if (o instanceof Range) {\n            Range r = (Range) o;\n            return start.equals(r.start) && end.equals(r.end);\n        } else {\n            // not even a Range, can't be equal\n            return false;\n        }\n    }\n\n    /**\n     *       A hash code for the Range.  (Since I define equals(),\n     *       I need to define hashCode().)\n     *\n     *       @return a hash code for this Range\n     */\n    public int hashCode() {\n        return start.hashCode() + 2 * end.hashCode();\n    }\n\n    /**\n     *       Compares this and o, for placing in fallback order.  Fallback\n     *       order sorts ranges by their ending year, latest to earliest,\n     *       and then by their length, longest to shortest.  (This is\n     *       usually what people want when looking at bargraphs.)\n     *\n     *       @param o Object to compare\n     *       @return >0, ==0, or <0 if this is greater-than, equal-to, or less-than o\n     *       @throws ClassCastException if o is not a Range\n     */\n    public int compareTo(Object o) {\n        Range r2 = (Range) o;\n        int c1 = end.compareTo(r2.end);\n        if (c1 != 0)\n            return c1;\n        // negative, because fallback puts longest samples first\n        int c2 = -start.compareTo(r2.start);\n        return c2;\n    }\n}\n",
		"id": "/EvoSuiteBenchmark/35_corina/src/main/java/corina/Range_3Test.java",
		"test_prompt": "// Range_3Test.java\n// This file is part of Corina.\n//\n// Corina is free software; you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation; either version 2 of the License, or\n// (at your option) any later version.\n//\n// Corina is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Corina; if not, write to the Free Software\n// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n//\n// Copyright 2001 Ken Harris <kbh7@cornell.edu>\n//\npackage corina;\n\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link Range}.\n* It contains ten unit test cases for the {@link Range#span()} method.\n*/\nclass Range_3Test {"
	},
	{
		"original_code": "// Range.java\n//\n// This file is part of Corina.\n//\n// Corina is free software; you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation; either version 2 of the License, or\n// (at your option) any later version.\n//\n// Corina is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Corina; if not, write to the Free Software\n// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n//\n// Copyright 2001 Ken Harris <kbh7@cornell.edu>\n//\npackage corina;\n\n/**\n *   A range of years.  Ranges are immutable; all otherwise-destructive\n *   operations on a Range return a new Range.\n *\n *   <p>Unfortunately, use of this data structure in the class Sample\n *   often violates the single-instance storage principle: we hope that\n *   the usage of Range and Sample will always keep\n *   <code>Sample.data.size() == Range.span()</code>, but there aren't\n *   any built-in ways to do this, so it's up to you.  (If you add an\n *   element to sample.data, increase sample.range by one, for example.)\n *   The problem is that the <code>end</code> field is a duplicate of\n *   <code>Sample.data.size() + start</code>.</p>\n *\n *   @see Year\n *   @see Sample\n *\n *   @author Ken Harris &lt;kbh7 <i style=\"color: gray\">at</i> cornell <i style=\"color: gray\">dot</i> edu&gt;\n *   @version $Id: Range.java,v 1.5 2004/01/18 17:53:47 aaron Exp $\n */\npublic class Range implements Comparable {\n\n    /**\n     * Starting year of the Range.\n     */\n    private Year start;\n\n    /**\n     * Ending year of the range.\n     */\n    private Year end;\n\n    /**\n     *  Construct a new empty range, starting at <code>Year.DEFAULT</code>.\n     * \t@see Year\n     */\n    public Range() {\n        // this is only used by GraphFrame (which shouldn't use it)\n        // -- and Sample\n        start = Year.DEFAULT;\n        end = start.add(-1);\n    }\n\n    /**\n     *  Construct a new range, from y<sub>1</sub> to y<sub>2</sub>.\n     * \t(Neither year may be <code>null</code>.)  If y<sub>2</sub> &lt; y<sub>1</sub>,\n     * \tit is an empty interval.\n     * \t@param y1 starting year\n     * \t@param y2 ending year\n     */\n    public Range(Year y1, Year y2) {\n        // null argument?\n        if (y1 == null || y2 == null)\n            throw new NullPointerException();\n        this.start = y1;\n        this.end = y2;\n        // empty interval?\n        if (start.compareTo(end) > 0) {\n            start = Year.DEFAULT;\n            end = start.add(-1);\n        }\n    }\n\n    /**\n     *       Construct a range, given a starting year and span.\n     *\n     *       @param y the starting year\n     *       @param span the number of years\n     */\n    public Range(Year y, int span) {\n        this.start = y;\n        this.end = y.add(span - 1);\n    }\n\n    /**\n     *       Construct a range from a String.\n     *\n     *       @param s the String\n     */\n    public Range(String s) {\n        // (Grid.GridHandler.startElement is the only place this is used)\n        // (ignore outside whitespace)\n        String t = s.trim();\n        // find the first dash that isn't t[0]\n        int dash = t.indexOf('-', 1);\n        // -- there must be a dash! --\n        if (dash == -1)\n            throw new IllegalArgumentException();\n        // y1 is everything before, y2 is everything after\n        String y1 = t.substring(0, dash);\n        String y2 = t.substring(dash + 1);\n        // construct years\n        start = new Year(y1);\n        end = new Year(y2);\n    }\n\n    /**\n     *       Get the starting year of this range.\n     *\n     *       @return the starting year\n     */\n    public Year getStart() {\n        return start;\n    }\n\n    /**\n     *       Get the ending year of this range.\n     *\n     *       @return the ending year\n     */\n    public Year getEnd() {\n        return end;\n    }\n\n    /**\n     *       Set the starting year of the range, and adjust the ending year\n     *       to maintain the same length.\n     *\n     *       @param y new starting year for the range\n     *       @see #redateEndTo\n     */\n    public Range redateStartTo(Year y) {\n        return redateBy(y.diff(start));\n    }\n\n    /**\n     *        Redate a range by a certain number of years.  Usually, you'll\n     *        use redateStartTo() or redateEndTo(), which are more\n     *        convenient.\n     *\n     * \t@param dy the number of years to shift this range by\n     */\n    public Range redateBy(int dy) {\n        return new Range(start.add(dy), end.add(dy));\n    }\n\n    /**\n     *        Set the ending year of the range, and adjust the start year to\n     *        maintain the same length.\n     *\n     * \t@param y new ending year for the range\n     * \t@see #redateStartTo\n     */\n    public Range redateEndTo(Year y) {\n        return redateBy(y.diff(end));\n    }\n\n    /**\n     *       Return the number of years spanned by this range.  For\n     *       example, the range 1001 - 1005 spans 5 years.\n     *\n     *       @return the span of this range (difference between start and\n     *       end, inclusive)\n     */\n    public int span() {\n        return end.diff(start) + 1;\n    }\n\n    /**\n     *       Compute the number of rows this Range will take to display,\n     *       assuming rows are marked off as the row() method does.\n     *\n     *       @return the number of rows this range spans\n     */\n    public int rows() {\n        return getEnd().row() - getStart().row() + 1;\n    }\n\n    /**\n     *       Return a simple string representation of the range,\n     *       like \"1001 - 1036\".\n     *\n     *       @return a string representation of the range\n     */\n    public String toString() {\n        // this tends to get called a lot, so we'll memoize it.\n        if (memo == null)\n            // use \\u2014 EM DASH?\n            memo = start + \" - \" + end;\n        return memo;\n    }\n\n    private String memo = null;\n\n    /**\n     *       Return a string representation of the range, including\n     *       the span, like \"(1001 - 1036, n=36)\".\n     *\n     *       @return a string representation of the range, including span\n     */\n    public String toStringWithSpan() {\n        return \"(\" + start + \" - \" + end + \", n=\" + span() + \")\";\n        // use \\u2014 EM DASH?\n    }\n\n    /**\n     *       Return true if (and only if) the given year is inside the\n     *       range, inclusive.\n     *\n     *       @param y year to check\n     *       @return true if <code>y</code> is in the range, else false\n     */\n    public boolean contains(Year y) {\n        return (start.compareTo(y) <= 0) && (y.compareTo(end) <= 0);\n    }\n\n    /**\n     *       Return true if (and only if) the given range is completely\n     *       inside the range, inclusive.\n     *\n     *       @param r range to check\n     *       @return true if <code>r</code> is entirely in the range, else false\n     */\n    public boolean contains(Range r) {\n        return contains(r.start) && contains(r.end);\n    }\n\n    /**\n     *       Return true, iff this year is the start of a row.  (Year 1 is\n     *       considered the start of that row.)\n     *\n     *       @return true, iff this year is the start of a row\n     */\n    public boolean startOfRow(Year y) {\n        return y.equals(start) || y.column() == 0 || y.isYearOne();\n    }\n\n    /**\n     *       Return true, iff this year is the end of a row.\n     *\n     *       @return true, iff this year is the end of a row\n     */\n    public boolean endOfRow(Year y) {\n        return y.equals(end) || y.column() == 9;\n    }\n\n    /**\n     *       Return the number of years overlap between this range and the\n     *       given range.\n     *\n     *       @param r range to compare\n     *       @return number of years overlap\n     */\n    public int overlap(Range r) {\n        return intersection(r).span();\n    }\n\n    /**\n     *       The intersection of this range with r.  If they don't overlap,\n     *       returns an empty range (1 - -1).\n     *\n     *       @see #union\n     *\n     *       @param r the range to intersect with this range\n     *       @return the intersection of this and r\n     */\n    public Range intersection(Range r) {\n        return new Range(Year.max(start, r.start), Year.min(end, r.end));\n    }\n\n    /**\n     *       The union of this range with r.  Since there is no concept of\n     *       \"range with a gap\" in Corina, it assumes they overlap.\n     *\n     *       @see #intersection\n     *\n     *       @param r the range to union with this range\n     *       @return the union of this and r\n     */\n    public Range union(Range r) {\n        return new Range(Year.min(start, r.start), Year.max(end, r.end));\n    }\n\n    /**\n     *       Compare two ranges for equality.\n     *\n     *       @param r range to compare with this\n     *       @return true, if the ranges are equal, else false\n     */\n    public boolean equals(Object o) {\n        if (o instanceof Range) {\n            Range r = (Range) o;\n            return start.equals(r.start) && end.equals(r.end);\n        } else {\n            // not even a Range, can't be equal\n            return false;\n        }\n    }\n\n    /**\n     *       A hash code for the Range.  (Since I define equals(),\n     *       I need to define hashCode().)\n     *\n     *       @return a hash code for this Range\n     */\n    public int hashCode() {\n        return start.hashCode() + 2 * end.hashCode();\n    }\n\n    /**\n     *       Compares this and o, for placing in fallback order.  Fallback\n     *       order sorts ranges by their ending year, latest to earliest,\n     *       and then by their length, longest to shortest.  (This is\n     *       usually what people want when looking at bargraphs.)\n     *\n     *       @param o Object to compare\n     *       @return >0, ==0, or <0 if this is greater-than, equal-to, or less-than o\n     *       @throws ClassCastException if o is not a Range\n     */\n    public int compareTo(Object o) {\n        Range r2 = (Range) o;\n        int c1 = end.compareTo(r2.end);\n        if (c1 != 0)\n            return c1;\n        // negative, because fallback puts longest samples first\n        int c2 = -start.compareTo(r2.start);\n        return c2;\n    }\n}\n",
		"id": "/EvoSuiteBenchmark/35_corina/src/main/java/corina/Range_4Test.java",
		"test_prompt": "// Range_4Test.java\n// This file is part of Corina.\n//\n// Corina is free software; you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation; either version 2 of the License, or\n// (at your option) any later version.\n//\n// Corina is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Corina; if not, write to the Free Software\n// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n//\n// Copyright 2001 Ken Harris <kbh7@cornell.edu>\n//\npackage corina;\n\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link Range}.\n* It contains ten unit test cases for the {@link Range#rows()} method.\n*/\nclass Range_4Test {"
	},
	{
		"original_code": "// Range.java\n//\n// This file is part of Corina.\n//\n// Corina is free software; you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation; either version 2 of the License, or\n// (at your option) any later version.\n//\n// Corina is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Corina; if not, write to the Free Software\n// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n//\n// Copyright 2001 Ken Harris <kbh7@cornell.edu>\n//\npackage corina;\n\n/**\n *   A range of years.  Ranges are immutable; all otherwise-destructive\n *   operations on a Range return a new Range.\n *\n *   <p>Unfortunately, use of this data structure in the class Sample\n *   often violates the single-instance storage principle: we hope that\n *   the usage of Range and Sample will always keep\n *   <code>Sample.data.size() == Range.span()</code>, but there aren't\n *   any built-in ways to do this, so it's up to you.  (If you add an\n *   element to sample.data, increase sample.range by one, for example.)\n *   The problem is that the <code>end</code> field is a duplicate of\n *   <code>Sample.data.size() + start</code>.</p>\n *\n *   @see Year\n *   @see Sample\n *\n *   @author Ken Harris &lt;kbh7 <i style=\"color: gray\">at</i> cornell <i style=\"color: gray\">dot</i> edu&gt;\n *   @version $Id: Range.java,v 1.5 2004/01/18 17:53:47 aaron Exp $\n */\npublic class Range implements Comparable {\n\n    /**\n     * Starting year of the Range.\n     */\n    private Year start;\n\n    /**\n     * Ending year of the range.\n     */\n    private Year end;\n\n    /**\n     *  Construct a new empty range, starting at <code>Year.DEFAULT</code>.\n     * \t@see Year\n     */\n    public Range() {\n        // this is only used by GraphFrame (which shouldn't use it)\n        // -- and Sample\n        start = Year.DEFAULT;\n        end = start.add(-1);\n    }\n\n    /**\n     *  Construct a new range, from y<sub>1</sub> to y<sub>2</sub>.\n     * \t(Neither year may be <code>null</code>.)  If y<sub>2</sub> &lt; y<sub>1</sub>,\n     * \tit is an empty interval.\n     * \t@param y1 starting year\n     * \t@param y2 ending year\n     */\n    public Range(Year y1, Year y2) {\n        // null argument?\n        if (y1 == null || y2 == null)\n            throw new NullPointerException();\n        this.start = y1;\n        this.end = y2;\n        // empty interval?\n        if (start.compareTo(end) > 0) {\n            start = Year.DEFAULT;\n            end = start.add(-1);\n        }\n    }\n\n    /**\n     *       Construct a range, given a starting year and span.\n     *\n     *       @param y the starting year\n     *       @param span the number of years\n     */\n    public Range(Year y, int span) {\n        this.start = y;\n        this.end = y.add(span - 1);\n    }\n\n    /**\n     *       Construct a range from a String.\n     *\n     *       @param s the String\n     */\n    public Range(String s) {\n        // (Grid.GridHandler.startElement is the only place this is used)\n        // (ignore outside whitespace)\n        String t = s.trim();\n        // find the first dash that isn't t[0]\n        int dash = t.indexOf('-', 1);\n        // -- there must be a dash! --\n        if (dash == -1)\n            throw new IllegalArgumentException();\n        // y1 is everything before, y2 is everything after\n        String y1 = t.substring(0, dash);\n        String y2 = t.substring(dash + 1);\n        // construct years\n        start = new Year(y1);\n        end = new Year(y2);\n    }\n\n    /**\n     *       Get the starting year of this range.\n     *\n     *       @return the starting year\n     */\n    public Year getStart() {\n        return start;\n    }\n\n    /**\n     *       Get the ending year of this range.\n     *\n     *       @return the ending year\n     */\n    public Year getEnd() {\n        return end;\n    }\n\n    /**\n     *       Set the starting year of the range, and adjust the ending year\n     *       to maintain the same length.\n     *\n     *       @param y new starting year for the range\n     *       @see #redateEndTo\n     */\n    public Range redateStartTo(Year y) {\n        return redateBy(y.diff(start));\n    }\n\n    /**\n     *        Redate a range by a certain number of years.  Usually, you'll\n     *        use redateStartTo() or redateEndTo(), which are more\n     *        convenient.\n     *\n     * \t@param dy the number of years to shift this range by\n     */\n    public Range redateBy(int dy) {\n        return new Range(start.add(dy), end.add(dy));\n    }\n\n    /**\n     *        Set the ending year of the range, and adjust the start year to\n     *        maintain the same length.\n     *\n     * \t@param y new ending year for the range\n     * \t@see #redateStartTo\n     */\n    public Range redateEndTo(Year y) {\n        return redateBy(y.diff(end));\n    }\n\n    /**\n     *       Return the number of years spanned by this range.  For\n     *       example, the range 1001 - 1005 spans 5 years.\n     *\n     *       @return the span of this range (difference between start and\n     *       end, inclusive)\n     */\n    public int span() {\n        return end.diff(start) + 1;\n    }\n\n    /**\n     *       Compute the number of rows this Range will take to display,\n     *       assuming rows are marked off as the row() method does.\n     *\n     *       @return the number of rows this range spans\n     */\n    public int rows() {\n        return getEnd().row() - getStart().row() + 1;\n    }\n\n    /**\n     *       Return a simple string representation of the range,\n     *       like \"1001 - 1036\".\n     *\n     *       @return a string representation of the range\n     */\n    public String toString() {\n        // this tends to get called a lot, so we'll memoize it.\n        if (memo == null)\n            // use \\u2014 EM DASH?\n            memo = start + \" - \" + end;\n        return memo;\n    }\n\n    private String memo = null;\n\n    /**\n     *       Return a string representation of the range, including\n     *       the span, like \"(1001 - 1036, n=36)\".\n     *\n     *       @return a string representation of the range, including span\n     */\n    public String toStringWithSpan() {\n        return \"(\" + start + \" - \" + end + \", n=\" + span() + \")\";\n        // use \\u2014 EM DASH?\n    }\n\n    /**\n     *       Return true if (and only if) the given year is inside the\n     *       range, inclusive.\n     *\n     *       @param y year to check\n     *       @return true if <code>y</code> is in the range, else false\n     */\n    public boolean contains(Year y) {\n        return (start.compareTo(y) <= 0) && (y.compareTo(end) <= 0);\n    }\n\n    /**\n     *       Return true if (and only if) the given range is completely\n     *       inside the range, inclusive.\n     *\n     *       @param r range to check\n     *       @return true if <code>r</code> is entirely in the range, else false\n     */\n    public boolean contains(Range r) {\n        return contains(r.start) && contains(r.end);\n    }\n\n    /**\n     *       Return true, iff this year is the start of a row.  (Year 1 is\n     *       considered the start of that row.)\n     *\n     *       @return true, iff this year is the start of a row\n     */\n    public boolean startOfRow(Year y) {\n        return y.equals(start) || y.column() == 0 || y.isYearOne();\n    }\n\n    /**\n     *       Return true, iff this year is the end of a row.\n     *\n     *       @return true, iff this year is the end of a row\n     */\n    public boolean endOfRow(Year y) {\n        return y.equals(end) || y.column() == 9;\n    }\n\n    /**\n     *       Return the number of years overlap between this range and the\n     *       given range.\n     *\n     *       @param r range to compare\n     *       @return number of years overlap\n     */\n    public int overlap(Range r) {\n        return intersection(r).span();\n    }\n\n    /**\n     *       The intersection of this range with r.  If they don't overlap,\n     *       returns an empty range (1 - -1).\n     *\n     *       @see #union\n     *\n     *       @param r the range to intersect with this range\n     *       @return the intersection of this and r\n     */\n    public Range intersection(Range r) {\n        return new Range(Year.max(start, r.start), Year.min(end, r.end));\n    }\n\n    /**\n     *       The union of this range with r.  Since there is no concept of\n     *       \"range with a gap\" in Corina, it assumes they overlap.\n     *\n     *       @see #intersection\n     *\n     *       @param r the range to union with this range\n     *       @return the union of this and r\n     */\n    public Range union(Range r) {\n        return new Range(Year.min(start, r.start), Year.max(end, r.end));\n    }\n\n    /**\n     *       Compare two ranges for equality.\n     *\n     *       @param r range to compare with this\n     *       @return true, if the ranges are equal, else false\n     */\n    public boolean equals(Object o) {\n        if (o instanceof Range) {\n            Range r = (Range) o;\n            return start.equals(r.start) && end.equals(r.end);\n        } else {\n            // not even a Range, can't be equal\n            return false;\n        }\n    }\n\n    /**\n     *       A hash code for the Range.  (Since I define equals(),\n     *       I need to define hashCode().)\n     *\n     *       @return a hash code for this Range\n     */\n    public int hashCode() {\n        return start.hashCode() + 2 * end.hashCode();\n    }\n\n    /**\n     *       Compares this and o, for placing in fallback order.  Fallback\n     *       order sorts ranges by their ending year, latest to earliest,\n     *       and then by their length, longest to shortest.  (This is\n     *       usually what people want when looking at bargraphs.)\n     *\n     *       @param o Object to compare\n     *       @return >0, ==0, or <0 if this is greater-than, equal-to, or less-than o\n     *       @throws ClassCastException if o is not a Range\n     */\n    public int compareTo(Object o) {\n        Range r2 = (Range) o;\n        int c1 = end.compareTo(r2.end);\n        if (c1 != 0)\n            return c1;\n        // negative, because fallback puts longest samples first\n        int c2 = -start.compareTo(r2.start);\n        return c2;\n    }\n}\n",
		"id": "/EvoSuiteBenchmark/35_corina/src/main/java/corina/Range_5Test.java",
		"test_prompt": "// Range_5Test.java\n// This file is part of Corina.\n//\n// Corina is free software; you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation; either version 2 of the License, or\n// (at your option) any later version.\n//\n// Corina is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Corina; if not, write to the Free Software\n// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n//\n// Copyright 2001 Ken Harris <kbh7@cornell.edu>\n//\npackage corina;\n\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link Range}.\n* It contains ten unit test cases for the {@link Range#toStringWithSpan()} method.\n*/\nclass Range_5Test {"
	},
	{
		"original_code": "// Range.java\n//\n// This file is part of Corina.\n//\n// Corina is free software; you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation; either version 2 of the License, or\n// (at your option) any later version.\n//\n// Corina is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Corina; if not, write to the Free Software\n// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n//\n// Copyright 2001 Ken Harris <kbh7@cornell.edu>\n//\npackage corina;\n\n/**\n *   A range of years.  Ranges are immutable; all otherwise-destructive\n *   operations on a Range return a new Range.\n *\n *   <p>Unfortunately, use of this data structure in the class Sample\n *   often violates the single-instance storage principle: we hope that\n *   the usage of Range and Sample will always keep\n *   <code>Sample.data.size() == Range.span()</code>, but there aren't\n *   any built-in ways to do this, so it's up to you.  (If you add an\n *   element to sample.data, increase sample.range by one, for example.)\n *   The problem is that the <code>end</code> field is a duplicate of\n *   <code>Sample.data.size() + start</code>.</p>\n *\n *   @see Year\n *   @see Sample\n *\n *   @author Ken Harris &lt;kbh7 <i style=\"color: gray\">at</i> cornell <i style=\"color: gray\">dot</i> edu&gt;\n *   @version $Id: Range.java,v 1.5 2004/01/18 17:53:47 aaron Exp $\n */\npublic class Range implements Comparable {\n\n    /**\n     * Starting year of the Range.\n     */\n    private Year start;\n\n    /**\n     * Ending year of the range.\n     */\n    private Year end;\n\n    /**\n     *  Construct a new empty range, starting at <code>Year.DEFAULT</code>.\n     * \t@see Year\n     */\n    public Range() {\n        // this is only used by GraphFrame (which shouldn't use it)\n        // -- and Sample\n        start = Year.DEFAULT;\n        end = start.add(-1);\n    }\n\n    /**\n     *  Construct a new range, from y<sub>1</sub> to y<sub>2</sub>.\n     * \t(Neither year may be <code>null</code>.)  If y<sub>2</sub> &lt; y<sub>1</sub>,\n     * \tit is an empty interval.\n     * \t@param y1 starting year\n     * \t@param y2 ending year\n     */\n    public Range(Year y1, Year y2) {\n        // null argument?\n        if (y1 == null || y2 == null)\n            throw new NullPointerException();\n        this.start = y1;\n        this.end = y2;\n        // empty interval?\n        if (start.compareTo(end) > 0) {\n            start = Year.DEFAULT;\n            end = start.add(-1);\n        }\n    }\n\n    /**\n     *       Construct a range, given a starting year and span.\n     *\n     *       @param y the starting year\n     *       @param span the number of years\n     */\n    public Range(Year y, int span) {\n        this.start = y;\n        this.end = y.add(span - 1);\n    }\n\n    /**\n     *       Construct a range from a String.\n     *\n     *       @param s the String\n     */\n    public Range(String s) {\n        // (Grid.GridHandler.startElement is the only place this is used)\n        // (ignore outside whitespace)\n        String t = s.trim();\n        // find the first dash that isn't t[0]\n        int dash = t.indexOf('-', 1);\n        // -- there must be a dash! --\n        if (dash == -1)\n            throw new IllegalArgumentException();\n        // y1 is everything before, y2 is everything after\n        String y1 = t.substring(0, dash);\n        String y2 = t.substring(dash + 1);\n        // construct years\n        start = new Year(y1);\n        end = new Year(y2);\n    }\n\n    /**\n     *       Get the starting year of this range.\n     *\n     *       @return the starting year\n     */\n    public Year getStart() {\n        return start;\n    }\n\n    /**\n     *       Get the ending year of this range.\n     *\n     *       @return the ending year\n     */\n    public Year getEnd() {\n        return end;\n    }\n\n    /**\n     *       Set the starting year of the range, and adjust the ending year\n     *       to maintain the same length.\n     *\n     *       @param y new starting year for the range\n     *       @see #redateEndTo\n     */\n    public Range redateStartTo(Year y) {\n        return redateBy(y.diff(start));\n    }\n\n    /**\n     *        Redate a range by a certain number of years.  Usually, you'll\n     *        use redateStartTo() or redateEndTo(), which are more\n     *        convenient.\n     *\n     * \t@param dy the number of years to shift this range by\n     */\n    public Range redateBy(int dy) {\n        return new Range(start.add(dy), end.add(dy));\n    }\n\n    /**\n     *        Set the ending year of the range, and adjust the start year to\n     *        maintain the same length.\n     *\n     * \t@param y new ending year for the range\n     * \t@see #redateStartTo\n     */\n    public Range redateEndTo(Year y) {\n        return redateBy(y.diff(end));\n    }\n\n    /**\n     *       Return the number of years spanned by this range.  For\n     *       example, the range 1001 - 1005 spans 5 years.\n     *\n     *       @return the span of this range (difference between start and\n     *       end, inclusive)\n     */\n    public int span() {\n        return end.diff(start) + 1;\n    }\n\n    /**\n     *       Compute the number of rows this Range will take to display,\n     *       assuming rows are marked off as the row() method does.\n     *\n     *       @return the number of rows this range spans\n     */\n    public int rows() {\n        return getEnd().row() - getStart().row() + 1;\n    }\n\n    /**\n     *       Return a simple string representation of the range,\n     *       like \"1001 - 1036\".\n     *\n     *       @return a string representation of the range\n     */\n    public String toString() {\n        // this tends to get called a lot, so we'll memoize it.\n        if (memo == null)\n            // use \\u2014 EM DASH?\n            memo = start + \" - \" + end;\n        return memo;\n    }\n\n    private String memo = null;\n\n    /**\n     *       Return a string representation of the range, including\n     *       the span, like \"(1001 - 1036, n=36)\".\n     *\n     *       @return a string representation of the range, including span\n     */\n    public String toStringWithSpan() {\n        return \"(\" + start + \" - \" + end + \", n=\" + span() + \")\";\n        // use \\u2014 EM DASH?\n    }\n\n    /**\n     *       Return true if (and only if) the given year is inside the\n     *       range, inclusive.\n     *\n     *       @param y year to check\n     *       @return true if <code>y</code> is in the range, else false\n     */\n    public boolean contains(Year y) {\n        return (start.compareTo(y) <= 0) && (y.compareTo(end) <= 0);\n    }\n\n    /**\n     *       Return true if (and only if) the given range is completely\n     *       inside the range, inclusive.\n     *\n     *       @param r range to check\n     *       @return true if <code>r</code> is entirely in the range, else false\n     */\n    public boolean contains(Range r) {\n        return contains(r.start) && contains(r.end);\n    }\n\n    /**\n     *       Return true, iff this year is the start of a row.  (Year 1 is\n     *       considered the start of that row.)\n     *\n     *       @return true, iff this year is the start of a row\n     */\n    public boolean startOfRow(Year y) {\n        return y.equals(start) || y.column() == 0 || y.isYearOne();\n    }\n\n    /**\n     *       Return true, iff this year is the end of a row.\n     *\n     *       @return true, iff this year is the end of a row\n     */\n    public boolean endOfRow(Year y) {\n        return y.equals(end) || y.column() == 9;\n    }\n\n    /**\n     *       Return the number of years overlap between this range and the\n     *       given range.\n     *\n     *       @param r range to compare\n     *       @return number of years overlap\n     */\n    public int overlap(Range r) {\n        return intersection(r).span();\n    }\n\n    /**\n     *       The intersection of this range with r.  If they don't overlap,\n     *       returns an empty range (1 - -1).\n     *\n     *       @see #union\n     *\n     *       @param r the range to intersect with this range\n     *       @return the intersection of this and r\n     */\n    public Range intersection(Range r) {\n        return new Range(Year.max(start, r.start), Year.min(end, r.end));\n    }\n\n    /**\n     *       The union of this range with r.  Since there is no concept of\n     *       \"range with a gap\" in Corina, it assumes they overlap.\n     *\n     *       @see #intersection\n     *\n     *       @param r the range to union with this range\n     *       @return the union of this and r\n     */\n    public Range union(Range r) {\n        return new Range(Year.min(start, r.start), Year.max(end, r.end));\n    }\n\n    /**\n     *       Compare two ranges for equality.\n     *\n     *       @param r range to compare with this\n     *       @return true, if the ranges are equal, else false\n     */\n    public boolean equals(Object o) {\n        if (o instanceof Range) {\n            Range r = (Range) o;\n            return start.equals(r.start) && end.equals(r.end);\n        } else {\n            // not even a Range, can't be equal\n            return false;\n        }\n    }\n\n    /**\n     *       A hash code for the Range.  (Since I define equals(),\n     *       I need to define hashCode().)\n     *\n     *       @return a hash code for this Range\n     */\n    public int hashCode() {\n        return start.hashCode() + 2 * end.hashCode();\n    }\n\n    /**\n     *       Compares this and o, for placing in fallback order.  Fallback\n     *       order sorts ranges by their ending year, latest to earliest,\n     *       and then by their length, longest to shortest.  (This is\n     *       usually what people want when looking at bargraphs.)\n     *\n     *       @param o Object to compare\n     *       @return >0, ==0, or <0 if this is greater-than, equal-to, or less-than o\n     *       @throws ClassCastException if o is not a Range\n     */\n    public int compareTo(Object o) {\n        Range r2 = (Range) o;\n        int c1 = end.compareTo(r2.end);\n        if (c1 != 0)\n            return c1;\n        // negative, because fallback puts longest samples first\n        int c2 = -start.compareTo(r2.start);\n        return c2;\n    }\n}\n",
		"id": "/EvoSuiteBenchmark/35_corina/src/main/java/corina/Range_6Test.java",
		"test_prompt": "// Range_6Test.java\n// This file is part of Corina.\n//\n// Corina is free software; you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation; either version 2 of the License, or\n// (at your option) any later version.\n//\n// Corina is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Corina; if not, write to the Free Software\n// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n//\n// Copyright 2001 Ken Harris <kbh7@cornell.edu>\n//\npackage corina;\n\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link Range}.\n* It contains ten unit test cases for the {@link Range#contains(Year)} method.\n*/\nclass Range_6Test {"
	},
	{
		"original_code": "// Range.java\n//\n// This file is part of Corina.\n//\n// Corina is free software; you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation; either version 2 of the License, or\n// (at your option) any later version.\n//\n// Corina is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Corina; if not, write to the Free Software\n// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n//\n// Copyright 2001 Ken Harris <kbh7@cornell.edu>\n//\npackage corina;\n\n/**\n *   A range of years.  Ranges are immutable; all otherwise-destructive\n *   operations on a Range return a new Range.\n *\n *   <p>Unfortunately, use of this data structure in the class Sample\n *   often violates the single-instance storage principle: we hope that\n *   the usage of Range and Sample will always keep\n *   <code>Sample.data.size() == Range.span()</code>, but there aren't\n *   any built-in ways to do this, so it's up to you.  (If you add an\n *   element to sample.data, increase sample.range by one, for example.)\n *   The problem is that the <code>end</code> field is a duplicate of\n *   <code>Sample.data.size() + start</code>.</p>\n *\n *   @see Year\n *   @see Sample\n *\n *   @author Ken Harris &lt;kbh7 <i style=\"color: gray\">at</i> cornell <i style=\"color: gray\">dot</i> edu&gt;\n *   @version $Id: Range.java,v 1.5 2004/01/18 17:53:47 aaron Exp $\n */\npublic class Range implements Comparable {\n\n    /**\n     * Starting year of the Range.\n     */\n    private Year start;\n\n    /**\n     * Ending year of the range.\n     */\n    private Year end;\n\n    /**\n     *  Construct a new empty range, starting at <code>Year.DEFAULT</code>.\n     * \t@see Year\n     */\n    public Range() {\n        // this is only used by GraphFrame (which shouldn't use it)\n        // -- and Sample\n        start = Year.DEFAULT;\n        end = start.add(-1);\n    }\n\n    /**\n     *  Construct a new range, from y<sub>1</sub> to y<sub>2</sub>.\n     * \t(Neither year may be <code>null</code>.)  If y<sub>2</sub> &lt; y<sub>1</sub>,\n     * \tit is an empty interval.\n     * \t@param y1 starting year\n     * \t@param y2 ending year\n     */\n    public Range(Year y1, Year y2) {\n        // null argument?\n        if (y1 == null || y2 == null)\n            throw new NullPointerException();\n        this.start = y1;\n        this.end = y2;\n        // empty interval?\n        if (start.compareTo(end) > 0) {\n            start = Year.DEFAULT;\n            end = start.add(-1);\n        }\n    }\n\n    /**\n     *       Construct a range, given a starting year and span.\n     *\n     *       @param y the starting year\n     *       @param span the number of years\n     */\n    public Range(Year y, int span) {\n        this.start = y;\n        this.end = y.add(span - 1);\n    }\n\n    /**\n     *       Construct a range from a String.\n     *\n     *       @param s the String\n     */\n    public Range(String s) {\n        // (Grid.GridHandler.startElement is the only place this is used)\n        // (ignore outside whitespace)\n        String t = s.trim();\n        // find the first dash that isn't t[0]\n        int dash = t.indexOf('-', 1);\n        // -- there must be a dash! --\n        if (dash == -1)\n            throw new IllegalArgumentException();\n        // y1 is everything before, y2 is everything after\n        String y1 = t.substring(0, dash);\n        String y2 = t.substring(dash + 1);\n        // construct years\n        start = new Year(y1);\n        end = new Year(y2);\n    }\n\n    /**\n     *       Get the starting year of this range.\n     *\n     *       @return the starting year\n     */\n    public Year getStart() {\n        return start;\n    }\n\n    /**\n     *       Get the ending year of this range.\n     *\n     *       @return the ending year\n     */\n    public Year getEnd() {\n        return end;\n    }\n\n    /**\n     *       Set the starting year of the range, and adjust the ending year\n     *       to maintain the same length.\n     *\n     *       @param y new starting year for the range\n     *       @see #redateEndTo\n     */\n    public Range redateStartTo(Year y) {\n        return redateBy(y.diff(start));\n    }\n\n    /**\n     *        Redate a range by a certain number of years.  Usually, you'll\n     *        use redateStartTo() or redateEndTo(), which are more\n     *        convenient.\n     *\n     * \t@param dy the number of years to shift this range by\n     */\n    public Range redateBy(int dy) {\n        return new Range(start.add(dy), end.add(dy));\n    }\n\n    /**\n     *        Set the ending year of the range, and adjust the start year to\n     *        maintain the same length.\n     *\n     * \t@param y new ending year for the range\n     * \t@see #redateStartTo\n     */\n    public Range redateEndTo(Year y) {\n        return redateBy(y.diff(end));\n    }\n\n    /**\n     *       Return the number of years spanned by this range.  For\n     *       example, the range 1001 - 1005 spans 5 years.\n     *\n     *       @return the span of this range (difference between start and\n     *       end, inclusive)\n     */\n    public int span() {\n        return end.diff(start) + 1;\n    }\n\n    /**\n     *       Compute the number of rows this Range will take to display,\n     *       assuming rows are marked off as the row() method does.\n     *\n     *       @return the number of rows this range spans\n     */\n    public int rows() {\n        return getEnd().row() - getStart().row() + 1;\n    }\n\n    /**\n     *       Return a simple string representation of the range,\n     *       like \"1001 - 1036\".\n     *\n     *       @return a string representation of the range\n     */\n    public String toString() {\n        // this tends to get called a lot, so we'll memoize it.\n        if (memo == null)\n            // use \\u2014 EM DASH?\n            memo = start + \" - \" + end;\n        return memo;\n    }\n\n    private String memo = null;\n\n    /**\n     *       Return a string representation of the range, including\n     *       the span, like \"(1001 - 1036, n=36)\".\n     *\n     *       @return a string representation of the range, including span\n     */\n    public String toStringWithSpan() {\n        return \"(\" + start + \" - \" + end + \", n=\" + span() + \")\";\n        // use \\u2014 EM DASH?\n    }\n\n    /**\n     *       Return true if (and only if) the given year is inside the\n     *       range, inclusive.\n     *\n     *       @param y year to check\n     *       @return true if <code>y</code> is in the range, else false\n     */\n    public boolean contains(Year y) {\n        return (start.compareTo(y) <= 0) && (y.compareTo(end) <= 0);\n    }\n\n    /**\n     *       Return true if (and only if) the given range is completely\n     *       inside the range, inclusive.\n     *\n     *       @param r range to check\n     *       @return true if <code>r</code> is entirely in the range, else false\n     */\n    public boolean contains(Range r) {\n        return contains(r.start) && contains(r.end);\n    }\n\n    /**\n     *       Return true, iff this year is the start of a row.  (Year 1 is\n     *       considered the start of that row.)\n     *\n     *       @return true, iff this year is the start of a row\n     */\n    public boolean startOfRow(Year y) {\n        return y.equals(start) || y.column() == 0 || y.isYearOne();\n    }\n\n    /**\n     *       Return true, iff this year is the end of a row.\n     *\n     *       @return true, iff this year is the end of a row\n     */\n    public boolean endOfRow(Year y) {\n        return y.equals(end) || y.column() == 9;\n    }\n\n    /**\n     *       Return the number of years overlap between this range and the\n     *       given range.\n     *\n     *       @param r range to compare\n     *       @return number of years overlap\n     */\n    public int overlap(Range r) {\n        return intersection(r).span();\n    }\n\n    /**\n     *       The intersection of this range with r.  If they don't overlap,\n     *       returns an empty range (1 - -1).\n     *\n     *       @see #union\n     *\n     *       @param r the range to intersect with this range\n     *       @return the intersection of this and r\n     */\n    public Range intersection(Range r) {\n        return new Range(Year.max(start, r.start), Year.min(end, r.end));\n    }\n\n    /**\n     *       The union of this range with r.  Since there is no concept of\n     *       \"range with a gap\" in Corina, it assumes they overlap.\n     *\n     *       @see #intersection\n     *\n     *       @param r the range to union with this range\n     *       @return the union of this and r\n     */\n    public Range union(Range r) {\n        return new Range(Year.min(start, r.start), Year.max(end, r.end));\n    }\n\n    /**\n     *       Compare two ranges for equality.\n     *\n     *       @param r range to compare with this\n     *       @return true, if the ranges are equal, else false\n     */\n    public boolean equals(Object o) {\n        if (o instanceof Range) {\n            Range r = (Range) o;\n            return start.equals(r.start) && end.equals(r.end);\n        } else {\n            // not even a Range, can't be equal\n            return false;\n        }\n    }\n\n    /**\n     *       A hash code for the Range.  (Since I define equals(),\n     *       I need to define hashCode().)\n     *\n     *       @return a hash code for this Range\n     */\n    public int hashCode() {\n        return start.hashCode() + 2 * end.hashCode();\n    }\n\n    /**\n     *       Compares this and o, for placing in fallback order.  Fallback\n     *       order sorts ranges by their ending year, latest to earliest,\n     *       and then by their length, longest to shortest.  (This is\n     *       usually what people want when looking at bargraphs.)\n     *\n     *       @param o Object to compare\n     *       @return >0, ==0, or <0 if this is greater-than, equal-to, or less-than o\n     *       @throws ClassCastException if o is not a Range\n     */\n    public int compareTo(Object o) {\n        Range r2 = (Range) o;\n        int c1 = end.compareTo(r2.end);\n        if (c1 != 0)\n            return c1;\n        // negative, because fallback puts longest samples first\n        int c2 = -start.compareTo(r2.start);\n        return c2;\n    }\n}\n",
		"id": "/EvoSuiteBenchmark/35_corina/src/main/java/corina/Range_7Test.java",
		"test_prompt": "// Range_7Test.java\n// This file is part of Corina.\n//\n// Corina is free software; you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation; either version 2 of the License, or\n// (at your option) any later version.\n//\n// Corina is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Corina; if not, write to the Free Software\n// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n//\n// Copyright 2001 Ken Harris <kbh7@cornell.edu>\n//\npackage corina;\n\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link Range}.\n* It contains ten unit test cases for the {@link Range#contains(Range)} method.\n*/\nclass Range_7Test {"
	},
	{
		"original_code": "// Range.java\n//\n// This file is part of Corina.\n//\n// Corina is free software; you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation; either version 2 of the License, or\n// (at your option) any later version.\n//\n// Corina is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Corina; if not, write to the Free Software\n// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n//\n// Copyright 2001 Ken Harris <kbh7@cornell.edu>\n//\npackage corina;\n\n/**\n *   A range of years.  Ranges are immutable; all otherwise-destructive\n *   operations on a Range return a new Range.\n *\n *   <p>Unfortunately, use of this data structure in the class Sample\n *   often violates the single-instance storage principle: we hope that\n *   the usage of Range and Sample will always keep\n *   <code>Sample.data.size() == Range.span()</code>, but there aren't\n *   any built-in ways to do this, so it's up to you.  (If you add an\n *   element to sample.data, increase sample.range by one, for example.)\n *   The problem is that the <code>end</code> field is a duplicate of\n *   <code>Sample.data.size() + start</code>.</p>\n *\n *   @see Year\n *   @see Sample\n *\n *   @author Ken Harris &lt;kbh7 <i style=\"color: gray\">at</i> cornell <i style=\"color: gray\">dot</i> edu&gt;\n *   @version $Id: Range.java,v 1.5 2004/01/18 17:53:47 aaron Exp $\n */\npublic class Range implements Comparable {\n\n    /**\n     * Starting year of the Range.\n     */\n    private Year start;\n\n    /**\n     * Ending year of the range.\n     */\n    private Year end;\n\n    /**\n     *  Construct a new empty range, starting at <code>Year.DEFAULT</code>.\n     * \t@see Year\n     */\n    public Range() {\n        // this is only used by GraphFrame (which shouldn't use it)\n        // -- and Sample\n        start = Year.DEFAULT;\n        end = start.add(-1);\n    }\n\n    /**\n     *  Construct a new range, from y<sub>1</sub> to y<sub>2</sub>.\n     * \t(Neither year may be <code>null</code>.)  If y<sub>2</sub> &lt; y<sub>1</sub>,\n     * \tit is an empty interval.\n     * \t@param y1 starting year\n     * \t@param y2 ending year\n     */\n    public Range(Year y1, Year y2) {\n        // null argument?\n        if (y1 == null || y2 == null)\n            throw new NullPointerException();\n        this.start = y1;\n        this.end = y2;\n        // empty interval?\n        if (start.compareTo(end) > 0) {\n            start = Year.DEFAULT;\n            end = start.add(-1);\n        }\n    }\n\n    /**\n     *       Construct a range, given a starting year and span.\n     *\n     *       @param y the starting year\n     *       @param span the number of years\n     */\n    public Range(Year y, int span) {\n        this.start = y;\n        this.end = y.add(span - 1);\n    }\n\n    /**\n     *       Construct a range from a String.\n     *\n     *       @param s the String\n     */\n    public Range(String s) {\n        // (Grid.GridHandler.startElement is the only place this is used)\n        // (ignore outside whitespace)\n        String t = s.trim();\n        // find the first dash that isn't t[0]\n        int dash = t.indexOf('-', 1);\n        // -- there must be a dash! --\n        if (dash == -1)\n            throw new IllegalArgumentException();\n        // y1 is everything before, y2 is everything after\n        String y1 = t.substring(0, dash);\n        String y2 = t.substring(dash + 1);\n        // construct years\n        start = new Year(y1);\n        end = new Year(y2);\n    }\n\n    /**\n     *       Get the starting year of this range.\n     *\n     *       @return the starting year\n     */\n    public Year getStart() {\n        return start;\n    }\n\n    /**\n     *       Get the ending year of this range.\n     *\n     *       @return the ending year\n     */\n    public Year getEnd() {\n        return end;\n    }\n\n    /**\n     *       Set the starting year of the range, and adjust the ending year\n     *       to maintain the same length.\n     *\n     *       @param y new starting year for the range\n     *       @see #redateEndTo\n     */\n    public Range redateStartTo(Year y) {\n        return redateBy(y.diff(start));\n    }\n\n    /**\n     *        Redate a range by a certain number of years.  Usually, you'll\n     *        use redateStartTo() or redateEndTo(), which are more\n     *        convenient.\n     *\n     * \t@param dy the number of years to shift this range by\n     */\n    public Range redateBy(int dy) {\n        return new Range(start.add(dy), end.add(dy));\n    }\n\n    /**\n     *        Set the ending year of the range, and adjust the start year to\n     *        maintain the same length.\n     *\n     * \t@param y new ending year for the range\n     * \t@see #redateStartTo\n     */\n    public Range redateEndTo(Year y) {\n        return redateBy(y.diff(end));\n    }\n\n    /**\n     *       Return the number of years spanned by this range.  For\n     *       example, the range 1001 - 1005 spans 5 years.\n     *\n     *       @return the span of this range (difference between start and\n     *       end, inclusive)\n     */\n    public int span() {\n        return end.diff(start) + 1;\n    }\n\n    /**\n     *       Compute the number of rows this Range will take to display,\n     *       assuming rows are marked off as the row() method does.\n     *\n     *       @return the number of rows this range spans\n     */\n    public int rows() {\n        return getEnd().row() - getStart().row() + 1;\n    }\n\n    /**\n     *       Return a simple string representation of the range,\n     *       like \"1001 - 1036\".\n     *\n     *       @return a string representation of the range\n     */\n    public String toString() {\n        // this tends to get called a lot, so we'll memoize it.\n        if (memo == null)\n            // use \\u2014 EM DASH?\n            memo = start + \" - \" + end;\n        return memo;\n    }\n\n    private String memo = null;\n\n    /**\n     *       Return a string representation of the range, including\n     *       the span, like \"(1001 - 1036, n=36)\".\n     *\n     *       @return a string representation of the range, including span\n     */\n    public String toStringWithSpan() {\n        return \"(\" + start + \" - \" + end + \", n=\" + span() + \")\";\n        // use \\u2014 EM DASH?\n    }\n\n    /**\n     *       Return true if (and only if) the given year is inside the\n     *       range, inclusive.\n     *\n     *       @param y year to check\n     *       @return true if <code>y</code> is in the range, else false\n     */\n    public boolean contains(Year y) {\n        return (start.compareTo(y) <= 0) && (y.compareTo(end) <= 0);\n    }\n\n    /**\n     *       Return true if (and only if) the given range is completely\n     *       inside the range, inclusive.\n     *\n     *       @param r range to check\n     *       @return true if <code>r</code> is entirely in the range, else false\n     */\n    public boolean contains(Range r) {\n        return contains(r.start) && contains(r.end);\n    }\n\n    /**\n     *       Return true, iff this year is the start of a row.  (Year 1 is\n     *       considered the start of that row.)\n     *\n     *       @return true, iff this year is the start of a row\n     */\n    public boolean startOfRow(Year y) {\n        return y.equals(start) || y.column() == 0 || y.isYearOne();\n    }\n\n    /**\n     *       Return true, iff this year is the end of a row.\n     *\n     *       @return true, iff this year is the end of a row\n     */\n    public boolean endOfRow(Year y) {\n        return y.equals(end) || y.column() == 9;\n    }\n\n    /**\n     *       Return the number of years overlap between this range and the\n     *       given range.\n     *\n     *       @param r range to compare\n     *       @return number of years overlap\n     */\n    public int overlap(Range r) {\n        return intersection(r).span();\n    }\n\n    /**\n     *       The intersection of this range with r.  If they don't overlap,\n     *       returns an empty range (1 - -1).\n     *\n     *       @see #union\n     *\n     *       @param r the range to intersect with this range\n     *       @return the intersection of this and r\n     */\n    public Range intersection(Range r) {\n        return new Range(Year.max(start, r.start), Year.min(end, r.end));\n    }\n\n    /**\n     *       The union of this range with r.  Since there is no concept of\n     *       \"range with a gap\" in Corina, it assumes they overlap.\n     *\n     *       @see #intersection\n     *\n     *       @param r the range to union with this range\n     *       @return the union of this and r\n     */\n    public Range union(Range r) {\n        return new Range(Year.min(start, r.start), Year.max(end, r.end));\n    }\n\n    /**\n     *       Compare two ranges for equality.\n     *\n     *       @param r range to compare with this\n     *       @return true, if the ranges are equal, else false\n     */\n    public boolean equals(Object o) {\n        if (o instanceof Range) {\n            Range r = (Range) o;\n            return start.equals(r.start) && end.equals(r.end);\n        } else {\n            // not even a Range, can't be equal\n            return false;\n        }\n    }\n\n    /**\n     *       A hash code for the Range.  (Since I define equals(),\n     *       I need to define hashCode().)\n     *\n     *       @return a hash code for this Range\n     */\n    public int hashCode() {\n        return start.hashCode() + 2 * end.hashCode();\n    }\n\n    /**\n     *       Compares this and o, for placing in fallback order.  Fallback\n     *       order sorts ranges by their ending year, latest to earliest,\n     *       and then by their length, longest to shortest.  (This is\n     *       usually what people want when looking at bargraphs.)\n     *\n     *       @param o Object to compare\n     *       @return >0, ==0, or <0 if this is greater-than, equal-to, or less-than o\n     *       @throws ClassCastException if o is not a Range\n     */\n    public int compareTo(Object o) {\n        Range r2 = (Range) o;\n        int c1 = end.compareTo(r2.end);\n        if (c1 != 0)\n            return c1;\n        // negative, because fallback puts longest samples first\n        int c2 = -start.compareTo(r2.start);\n        return c2;\n    }\n}\n",
		"id": "/EvoSuiteBenchmark/35_corina/src/main/java/corina/Range_8Test.java",
		"test_prompt": "// Range_8Test.java\n// This file is part of Corina.\n//\n// Corina is free software; you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation; either version 2 of the License, or\n// (at your option) any later version.\n//\n// Corina is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Corina; if not, write to the Free Software\n// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n//\n// Copyright 2001 Ken Harris <kbh7@cornell.edu>\n//\npackage corina;\n\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link Range}.\n* It contains ten unit test cases for the {@link Range#startOfRow(Year)} method.\n*/\nclass Range_8Test {"
	},
	{
		"original_code": "// Range.java\n//\n// This file is part of Corina.\n//\n// Corina is free software; you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation; either version 2 of the License, or\n// (at your option) any later version.\n//\n// Corina is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Corina; if not, write to the Free Software\n// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n//\n// Copyright 2001 Ken Harris <kbh7@cornell.edu>\n//\npackage corina;\n\n/**\n *   A range of years.  Ranges are immutable; all otherwise-destructive\n *   operations on a Range return a new Range.\n *\n *   <p>Unfortunately, use of this data structure in the class Sample\n *   often violates the single-instance storage principle: we hope that\n *   the usage of Range and Sample will always keep\n *   <code>Sample.data.size() == Range.span()</code>, but there aren't\n *   any built-in ways to do this, so it's up to you.  (If you add an\n *   element to sample.data, increase sample.range by one, for example.)\n *   The problem is that the <code>end</code> field is a duplicate of\n *   <code>Sample.data.size() + start</code>.</p>\n *\n *   @see Year\n *   @see Sample\n *\n *   @author Ken Harris &lt;kbh7 <i style=\"color: gray\">at</i> cornell <i style=\"color: gray\">dot</i> edu&gt;\n *   @version $Id: Range.java,v 1.5 2004/01/18 17:53:47 aaron Exp $\n */\npublic class Range implements Comparable {\n\n    /**\n     * Starting year of the Range.\n     */\n    private Year start;\n\n    /**\n     * Ending year of the range.\n     */\n    private Year end;\n\n    /**\n     *  Construct a new empty range, starting at <code>Year.DEFAULT</code>.\n     * \t@see Year\n     */\n    public Range() {\n        // this is only used by GraphFrame (which shouldn't use it)\n        // -- and Sample\n        start = Year.DEFAULT;\n        end = start.add(-1);\n    }\n\n    /**\n     *  Construct a new range, from y<sub>1</sub> to y<sub>2</sub>.\n     * \t(Neither year may be <code>null</code>.)  If y<sub>2</sub> &lt; y<sub>1</sub>,\n     * \tit is an empty interval.\n     * \t@param y1 starting year\n     * \t@param y2 ending year\n     */\n    public Range(Year y1, Year y2) {\n        // null argument?\n        if (y1 == null || y2 == null)\n            throw new NullPointerException();\n        this.start = y1;\n        this.end = y2;\n        // empty interval?\n        if (start.compareTo(end) > 0) {\n            start = Year.DEFAULT;\n            end = start.add(-1);\n        }\n    }\n\n    /**\n     *       Construct a range, given a starting year and span.\n     *\n     *       @param y the starting year\n     *       @param span the number of years\n     */\n    public Range(Year y, int span) {\n        this.start = y;\n        this.end = y.add(span - 1);\n    }\n\n    /**\n     *       Construct a range from a String.\n     *\n     *       @param s the String\n     */\n    public Range(String s) {\n        // (Grid.GridHandler.startElement is the only place this is used)\n        // (ignore outside whitespace)\n        String t = s.trim();\n        // find the first dash that isn't t[0]\n        int dash = t.indexOf('-', 1);\n        // -- there must be a dash! --\n        if (dash == -1)\n            throw new IllegalArgumentException();\n        // y1 is everything before, y2 is everything after\n        String y1 = t.substring(0, dash);\n        String y2 = t.substring(dash + 1);\n        // construct years\n        start = new Year(y1);\n        end = new Year(y2);\n    }\n\n    /**\n     *       Get the starting year of this range.\n     *\n     *       @return the starting year\n     */\n    public Year getStart() {\n        return start;\n    }\n\n    /**\n     *       Get the ending year of this range.\n     *\n     *       @return the ending year\n     */\n    public Year getEnd() {\n        return end;\n    }\n\n    /**\n     *       Set the starting year of the range, and adjust the ending year\n     *       to maintain the same length.\n     *\n     *       @param y new starting year for the range\n     *       @see #redateEndTo\n     */\n    public Range redateStartTo(Year y) {\n        return redateBy(y.diff(start));\n    }\n\n    /**\n     *        Redate a range by a certain number of years.  Usually, you'll\n     *        use redateStartTo() or redateEndTo(), which are more\n     *        convenient.\n     *\n     * \t@param dy the number of years to shift this range by\n     */\n    public Range redateBy(int dy) {\n        return new Range(start.add(dy), end.add(dy));\n    }\n\n    /**\n     *        Set the ending year of the range, and adjust the start year to\n     *        maintain the same length.\n     *\n     * \t@param y new ending year for the range\n     * \t@see #redateStartTo\n     */\n    public Range redateEndTo(Year y) {\n        return redateBy(y.diff(end));\n    }\n\n    /**\n     *       Return the number of years spanned by this range.  For\n     *       example, the range 1001 - 1005 spans 5 years.\n     *\n     *       @return the span of this range (difference between start and\n     *       end, inclusive)\n     */\n    public int span() {\n        return end.diff(start) + 1;\n    }\n\n    /**\n     *       Compute the number of rows this Range will take to display,\n     *       assuming rows are marked off as the row() method does.\n     *\n     *       @return the number of rows this range spans\n     */\n    public int rows() {\n        return getEnd().row() - getStart().row() + 1;\n    }\n\n    /**\n     *       Return a simple string representation of the range,\n     *       like \"1001 - 1036\".\n     *\n     *       @return a string representation of the range\n     */\n    public String toString() {\n        // this tends to get called a lot, so we'll memoize it.\n        if (memo == null)\n            // use \\u2014 EM DASH?\n            memo = start + \" - \" + end;\n        return memo;\n    }\n\n    private String memo = null;\n\n    /**\n     *       Return a string representation of the range, including\n     *       the span, like \"(1001 - 1036, n=36)\".\n     *\n     *       @return a string representation of the range, including span\n     */\n    public String toStringWithSpan() {\n        return \"(\" + start + \" - \" + end + \", n=\" + span() + \")\";\n        // use \\u2014 EM DASH?\n    }\n\n    /**\n     *       Return true if (and only if) the given year is inside the\n     *       range, inclusive.\n     *\n     *       @param y year to check\n     *       @return true if <code>y</code> is in the range, else false\n     */\n    public boolean contains(Year y) {\n        return (start.compareTo(y) <= 0) && (y.compareTo(end) <= 0);\n    }\n\n    /**\n     *       Return true if (and only if) the given range is completely\n     *       inside the range, inclusive.\n     *\n     *       @param r range to check\n     *       @return true if <code>r</code> is entirely in the range, else false\n     */\n    public boolean contains(Range r) {\n        return contains(r.start) && contains(r.end);\n    }\n\n    /**\n     *       Return true, iff this year is the start of a row.  (Year 1 is\n     *       considered the start of that row.)\n     *\n     *       @return true, iff this year is the start of a row\n     */\n    public boolean startOfRow(Year y) {\n        return y.equals(start) || y.column() == 0 || y.isYearOne();\n    }\n\n    /**\n     *       Return true, iff this year is the end of a row.\n     *\n     *       @return true, iff this year is the end of a row\n     */\n    public boolean endOfRow(Year y) {\n        return y.equals(end) || y.column() == 9;\n    }\n\n    /**\n     *       Return the number of years overlap between this range and the\n     *       given range.\n     *\n     *       @param r range to compare\n     *       @return number of years overlap\n     */\n    public int overlap(Range r) {\n        return intersection(r).span();\n    }\n\n    /**\n     *       The intersection of this range with r.  If they don't overlap,\n     *       returns an empty range (1 - -1).\n     *\n     *       @see #union\n     *\n     *       @param r the range to intersect with this range\n     *       @return the intersection of this and r\n     */\n    public Range intersection(Range r) {\n        return new Range(Year.max(start, r.start), Year.min(end, r.end));\n    }\n\n    /**\n     *       The union of this range with r.  Since there is no concept of\n     *       \"range with a gap\" in Corina, it assumes they overlap.\n     *\n     *       @see #intersection\n     *\n     *       @param r the range to union with this range\n     *       @return the union of this and r\n     */\n    public Range union(Range r) {\n        return new Range(Year.min(start, r.start), Year.max(end, r.end));\n    }\n\n    /**\n     *       Compare two ranges for equality.\n     *\n     *       @param r range to compare with this\n     *       @return true, if the ranges are equal, else false\n     */\n    public boolean equals(Object o) {\n        if (o instanceof Range) {\n            Range r = (Range) o;\n            return start.equals(r.start) && end.equals(r.end);\n        } else {\n            // not even a Range, can't be equal\n            return false;\n        }\n    }\n\n    /**\n     *       A hash code for the Range.  (Since I define equals(),\n     *       I need to define hashCode().)\n     *\n     *       @return a hash code for this Range\n     */\n    public int hashCode() {\n        return start.hashCode() + 2 * end.hashCode();\n    }\n\n    /**\n     *       Compares this and o, for placing in fallback order.  Fallback\n     *       order sorts ranges by their ending year, latest to earliest,\n     *       and then by their length, longest to shortest.  (This is\n     *       usually what people want when looking at bargraphs.)\n     *\n     *       @param o Object to compare\n     *       @return >0, ==0, or <0 if this is greater-than, equal-to, or less-than o\n     *       @throws ClassCastException if o is not a Range\n     */\n    public int compareTo(Object o) {\n        Range r2 = (Range) o;\n        int c1 = end.compareTo(r2.end);\n        if (c1 != 0)\n            return c1;\n        // negative, because fallback puts longest samples first\n        int c2 = -start.compareTo(r2.start);\n        return c2;\n    }\n}\n",
		"id": "/EvoSuiteBenchmark/35_corina/src/main/java/corina/Range_9Test.java",
		"test_prompt": "// Range_9Test.java\n// This file is part of Corina.\n//\n// Corina is free software; you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation; either version 2 of the License, or\n// (at your option) any later version.\n//\n// Corina is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Corina; if not, write to the Free Software\n// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n//\n// Copyright 2001 Ken Harris <kbh7@cornell.edu>\n//\npackage corina;\n\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link Range}.\n* It contains ten unit test cases for the {@link Range#endOfRow(Year)} method.\n*/\nclass Range_9Test {"
	},
	{
		"original_code": "// Range.java\n//\n// This file is part of Corina.\n//\n// Corina is free software; you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation; either version 2 of the License, or\n// (at your option) any later version.\n//\n// Corina is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Corina; if not, write to the Free Software\n// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n//\n// Copyright 2001 Ken Harris <kbh7@cornell.edu>\n//\npackage corina;\n\n/**\n *   A range of years.  Ranges are immutable; all otherwise-destructive\n *   operations on a Range return a new Range.\n *\n *   <p>Unfortunately, use of this data structure in the class Sample\n *   often violates the single-instance storage principle: we hope that\n *   the usage of Range and Sample will always keep\n *   <code>Sample.data.size() == Range.span()</code>, but there aren't\n *   any built-in ways to do this, so it's up to you.  (If you add an\n *   element to sample.data, increase sample.range by one, for example.)\n *   The problem is that the <code>end</code> field is a duplicate of\n *   <code>Sample.data.size() + start</code>.</p>\n *\n *   @see Year\n *   @see Sample\n *\n *   @author Ken Harris &lt;kbh7 <i style=\"color: gray\">at</i> cornell <i style=\"color: gray\">dot</i> edu&gt;\n *   @version $Id: Range.java,v 1.5 2004/01/18 17:53:47 aaron Exp $\n */\npublic class Range implements Comparable {\n\n    /**\n     * Starting year of the Range.\n     */\n    private Year start;\n\n    /**\n     * Ending year of the range.\n     */\n    private Year end;\n\n    /**\n     *  Construct a new empty range, starting at <code>Year.DEFAULT</code>.\n     * \t@see Year\n     */\n    public Range() {\n        // this is only used by GraphFrame (which shouldn't use it)\n        // -- and Sample\n        start = Year.DEFAULT;\n        end = start.add(-1);\n    }\n\n    /**\n     *  Construct a new range, from y<sub>1</sub> to y<sub>2</sub>.\n     * \t(Neither year may be <code>null</code>.)  If y<sub>2</sub> &lt; y<sub>1</sub>,\n     * \tit is an empty interval.\n     * \t@param y1 starting year\n     * \t@param y2 ending year\n     */\n    public Range(Year y1, Year y2) {\n        // null argument?\n        if (y1 == null || y2 == null)\n            throw new NullPointerException();\n        this.start = y1;\n        this.end = y2;\n        // empty interval?\n        if (start.compareTo(end) > 0) {\n            start = Year.DEFAULT;\n            end = start.add(-1);\n        }\n    }\n\n    /**\n     *       Construct a range, given a starting year and span.\n     *\n     *       @param y the starting year\n     *       @param span the number of years\n     */\n    public Range(Year y, int span) {\n        this.start = y;\n        this.end = y.add(span - 1);\n    }\n\n    /**\n     *       Construct a range from a String.\n     *\n     *       @param s the String\n     */\n    public Range(String s) {\n        // (Grid.GridHandler.startElement is the only place this is used)\n        // (ignore outside whitespace)\n        String t = s.trim();\n        // find the first dash that isn't t[0]\n        int dash = t.indexOf('-', 1);\n        // -- there must be a dash! --\n        if (dash == -1)\n            throw new IllegalArgumentException();\n        // y1 is everything before, y2 is everything after\n        String y1 = t.substring(0, dash);\n        String y2 = t.substring(dash + 1);\n        // construct years\n        start = new Year(y1);\n        end = new Year(y2);\n    }\n\n    /**\n     *       Get the starting year of this range.\n     *\n     *       @return the starting year\n     */\n    public Year getStart() {\n        return start;\n    }\n\n    /**\n     *       Get the ending year of this range.\n     *\n     *       @return the ending year\n     */\n    public Year getEnd() {\n        return end;\n    }\n\n    /**\n     *       Set the starting year of the range, and adjust the ending year\n     *       to maintain the same length.\n     *\n     *       @param y new starting year for the range\n     *       @see #redateEndTo\n     */\n    public Range redateStartTo(Year y) {\n        return redateBy(y.diff(start));\n    }\n\n    /**\n     *        Redate a range by a certain number of years.  Usually, you'll\n     *        use redateStartTo() or redateEndTo(), which are more\n     *        convenient.\n     *\n     * \t@param dy the number of years to shift this range by\n     */\n    public Range redateBy(int dy) {\n        return new Range(start.add(dy), end.add(dy));\n    }\n\n    /**\n     *        Set the ending year of the range, and adjust the start year to\n     *        maintain the same length.\n     *\n     * \t@param y new ending year for the range\n     * \t@see #redateStartTo\n     */\n    public Range redateEndTo(Year y) {\n        return redateBy(y.diff(end));\n    }\n\n    /**\n     *       Return the number of years spanned by this range.  For\n     *       example, the range 1001 - 1005 spans 5 years.\n     *\n     *       @return the span of this range (difference between start and\n     *       end, inclusive)\n     */\n    public int span() {\n        return end.diff(start) + 1;\n    }\n\n    /**\n     *       Compute the number of rows this Range will take to display,\n     *       assuming rows are marked off as the row() method does.\n     *\n     *       @return the number of rows this range spans\n     */\n    public int rows() {\n        return getEnd().row() - getStart().row() + 1;\n    }\n\n    /**\n     *       Return a simple string representation of the range,\n     *       like \"1001 - 1036\".\n     *\n     *       @return a string representation of the range\n     */\n    public String toString() {\n        // this tends to get called a lot, so we'll memoize it.\n        if (memo == null)\n            // use \\u2014 EM DASH?\n            memo = start + \" - \" + end;\n        return memo;\n    }\n\n    private String memo = null;\n\n    /**\n     *       Return a string representation of the range, including\n     *       the span, like \"(1001 - 1036, n=36)\".\n     *\n     *       @return a string representation of the range, including span\n     */\n    public String toStringWithSpan() {\n        return \"(\" + start + \" - \" + end + \", n=\" + span() + \")\";\n        // use \\u2014 EM DASH?\n    }\n\n    /**\n     *       Return true if (and only if) the given year is inside the\n     *       range, inclusive.\n     *\n     *       @param y year to check\n     *       @return true if <code>y</code> is in the range, else false\n     */\n    public boolean contains(Year y) {\n        return (start.compareTo(y) <= 0) && (y.compareTo(end) <= 0);\n    }\n\n    /**\n     *       Return true if (and only if) the given range is completely\n     *       inside the range, inclusive.\n     *\n     *       @param r range to check\n     *       @return true if <code>r</code> is entirely in the range, else false\n     */\n    public boolean contains(Range r) {\n        return contains(r.start) && contains(r.end);\n    }\n\n    /**\n     *       Return true, iff this year is the start of a row.  (Year 1 is\n     *       considered the start of that row.)\n     *\n     *       @return true, iff this year is the start of a row\n     */\n    public boolean startOfRow(Year y) {\n        return y.equals(start) || y.column() == 0 || y.isYearOne();\n    }\n\n    /**\n     *       Return true, iff this year is the end of a row.\n     *\n     *       @return true, iff this year is the end of a row\n     */\n    public boolean endOfRow(Year y) {\n        return y.equals(end) || y.column() == 9;\n    }\n\n    /**\n     *       Return the number of years overlap between this range and the\n     *       given range.\n     *\n     *       @param r range to compare\n     *       @return number of years overlap\n     */\n    public int overlap(Range r) {\n        return intersection(r).span();\n    }\n\n    /**\n     *       The intersection of this range with r.  If they don't overlap,\n     *       returns an empty range (1 - -1).\n     *\n     *       @see #union\n     *\n     *       @param r the range to intersect with this range\n     *       @return the intersection of this and r\n     */\n    public Range intersection(Range r) {\n        return new Range(Year.max(start, r.start), Year.min(end, r.end));\n    }\n\n    /**\n     *       The union of this range with r.  Since there is no concept of\n     *       \"range with a gap\" in Corina, it assumes they overlap.\n     *\n     *       @see #intersection\n     *\n     *       @param r the range to union with this range\n     *       @return the union of this and r\n     */\n    public Range union(Range r) {\n        return new Range(Year.min(start, r.start), Year.max(end, r.end));\n    }\n\n    /**\n     *       Compare two ranges for equality.\n     *\n     *       @param r range to compare with this\n     *       @return true, if the ranges are equal, else false\n     */\n    public boolean equals(Object o) {\n        if (o instanceof Range) {\n            Range r = (Range) o;\n            return start.equals(r.start) && end.equals(r.end);\n        } else {\n            // not even a Range, can't be equal\n            return false;\n        }\n    }\n\n    /**\n     *       A hash code for the Range.  (Since I define equals(),\n     *       I need to define hashCode().)\n     *\n     *       @return a hash code for this Range\n     */\n    public int hashCode() {\n        return start.hashCode() + 2 * end.hashCode();\n    }\n\n    /**\n     *       Compares this and o, for placing in fallback order.  Fallback\n     *       order sorts ranges by their ending year, latest to earliest,\n     *       and then by their length, longest to shortest.  (This is\n     *       usually what people want when looking at bargraphs.)\n     *\n     *       @param o Object to compare\n     *       @return >0, ==0, or <0 if this is greater-than, equal-to, or less-than o\n     *       @throws ClassCastException if o is not a Range\n     */\n    public int compareTo(Object o) {\n        Range r2 = (Range) o;\n        int c1 = end.compareTo(r2.end);\n        if (c1 != 0)\n            return c1;\n        // negative, because fallback puts longest samples first\n        int c2 = -start.compareTo(r2.start);\n        return c2;\n    }\n}\n",
		"id": "/EvoSuiteBenchmark/35_corina/src/main/java/corina/Range_10Test.java",
		"test_prompt": "// Range_10Test.java\n// This file is part of Corina.\n//\n// Corina is free software; you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation; either version 2 of the License, or\n// (at your option) any later version.\n//\n// Corina is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Corina; if not, write to the Free Software\n// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n//\n// Copyright 2001 Ken Harris <kbh7@cornell.edu>\n//\npackage corina;\n\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link Range}.\n* It contains ten unit test cases for the {@link Range#overlap(Range)} method.\n*/\nclass Range_10Test {"
	},
	{
		"original_code": "// Range.java\n//\n// This file is part of Corina.\n//\n// Corina is free software; you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation; either version 2 of the License, or\n// (at your option) any later version.\n//\n// Corina is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Corina; if not, write to the Free Software\n// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n//\n// Copyright 2001 Ken Harris <kbh7@cornell.edu>\n//\npackage corina;\n\n/**\n *   A range of years.  Ranges are immutable; all otherwise-destructive\n *   operations on a Range return a new Range.\n *\n *   <p>Unfortunately, use of this data structure in the class Sample\n *   often violates the single-instance storage principle: we hope that\n *   the usage of Range and Sample will always keep\n *   <code>Sample.data.size() == Range.span()</code>, but there aren't\n *   any built-in ways to do this, so it's up to you.  (If you add an\n *   element to sample.data, increase sample.range by one, for example.)\n *   The problem is that the <code>end</code> field is a duplicate of\n *   <code>Sample.data.size() + start</code>.</p>\n *\n *   @see Year\n *   @see Sample\n *\n *   @author Ken Harris &lt;kbh7 <i style=\"color: gray\">at</i> cornell <i style=\"color: gray\">dot</i> edu&gt;\n *   @version $Id: Range.java,v 1.5 2004/01/18 17:53:47 aaron Exp $\n */\npublic class Range implements Comparable {\n\n    /**\n     * Starting year of the Range.\n     */\n    private Year start;\n\n    /**\n     * Ending year of the range.\n     */\n    private Year end;\n\n    /**\n     *  Construct a new empty range, starting at <code>Year.DEFAULT</code>.\n     * \t@see Year\n     */\n    public Range() {\n        // this is only used by GraphFrame (which shouldn't use it)\n        // -- and Sample\n        start = Year.DEFAULT;\n        end = start.add(-1);\n    }\n\n    /**\n     *  Construct a new range, from y<sub>1</sub> to y<sub>2</sub>.\n     * \t(Neither year may be <code>null</code>.)  If y<sub>2</sub> &lt; y<sub>1</sub>,\n     * \tit is an empty interval.\n     * \t@param y1 starting year\n     * \t@param y2 ending year\n     */\n    public Range(Year y1, Year y2) {\n        // null argument?\n        if (y1 == null || y2 == null)\n            throw new NullPointerException();\n        this.start = y1;\n        this.end = y2;\n        // empty interval?\n        if (start.compareTo(end) > 0) {\n            start = Year.DEFAULT;\n            end = start.add(-1);\n        }\n    }\n\n    /**\n     *       Construct a range, given a starting year and span.\n     *\n     *       @param y the starting year\n     *       @param span the number of years\n     */\n    public Range(Year y, int span) {\n        this.start = y;\n        this.end = y.add(span - 1);\n    }\n\n    /**\n     *       Construct a range from a String.\n     *\n     *       @param s the String\n     */\n    public Range(String s) {\n        // (Grid.GridHandler.startElement is the only place this is used)\n        // (ignore outside whitespace)\n        String t = s.trim();\n        // find the first dash that isn't t[0]\n        int dash = t.indexOf('-', 1);\n        // -- there must be a dash! --\n        if (dash == -1)\n            throw new IllegalArgumentException();\n        // y1 is everything before, y2 is everything after\n        String y1 = t.substring(0, dash);\n        String y2 = t.substring(dash + 1);\n        // construct years\n        start = new Year(y1);\n        end = new Year(y2);\n    }\n\n    /**\n     *       Get the starting year of this range.\n     *\n     *       @return the starting year\n     */\n    public Year getStart() {\n        return start;\n    }\n\n    /**\n     *       Get the ending year of this range.\n     *\n     *       @return the ending year\n     */\n    public Year getEnd() {\n        return end;\n    }\n\n    /**\n     *       Set the starting year of the range, and adjust the ending year\n     *       to maintain the same length.\n     *\n     *       @param y new starting year for the range\n     *       @see #redateEndTo\n     */\n    public Range redateStartTo(Year y) {\n        return redateBy(y.diff(start));\n    }\n\n    /**\n     *        Redate a range by a certain number of years.  Usually, you'll\n     *        use redateStartTo() or redateEndTo(), which are more\n     *        convenient.\n     *\n     * \t@param dy the number of years to shift this range by\n     */\n    public Range redateBy(int dy) {\n        return new Range(start.add(dy), end.add(dy));\n    }\n\n    /**\n     *        Set the ending year of the range, and adjust the start year to\n     *        maintain the same length.\n     *\n     * \t@param y new ending year for the range\n     * \t@see #redateStartTo\n     */\n    public Range redateEndTo(Year y) {\n        return redateBy(y.diff(end));\n    }\n\n    /**\n     *       Return the number of years spanned by this range.  For\n     *       example, the range 1001 - 1005 spans 5 years.\n     *\n     *       @return the span of this range (difference between start and\n     *       end, inclusive)\n     */\n    public int span() {\n        return end.diff(start) + 1;\n    }\n\n    /**\n     *       Compute the number of rows this Range will take to display,\n     *       assuming rows are marked off as the row() method does.\n     *\n     *       @return the number of rows this range spans\n     */\n    public int rows() {\n        return getEnd().row() - getStart().row() + 1;\n    }\n\n    /**\n     *       Return a simple string representation of the range,\n     *       like \"1001 - 1036\".\n     *\n     *       @return a string representation of the range\n     */\n    public String toString() {\n        // this tends to get called a lot, so we'll memoize it.\n        if (memo == null)\n            // use \\u2014 EM DASH?\n            memo = start + \" - \" + end;\n        return memo;\n    }\n\n    private String memo = null;\n\n    /**\n     *       Return a string representation of the range, including\n     *       the span, like \"(1001 - 1036, n=36)\".\n     *\n     *       @return a string representation of the range, including span\n     */\n    public String toStringWithSpan() {\n        return \"(\" + start + \" - \" + end + \", n=\" + span() + \")\";\n        // use \\u2014 EM DASH?\n    }\n\n    /**\n     *       Return true if (and only if) the given year is inside the\n     *       range, inclusive.\n     *\n     *       @param y year to check\n     *       @return true if <code>y</code> is in the range, else false\n     */\n    public boolean contains(Year y) {\n        return (start.compareTo(y) <= 0) && (y.compareTo(end) <= 0);\n    }\n\n    /**\n     *       Return true if (and only if) the given range is completely\n     *       inside the range, inclusive.\n     *\n     *       @param r range to check\n     *       @return true if <code>r</code> is entirely in the range, else false\n     */\n    public boolean contains(Range r) {\n        return contains(r.start) && contains(r.end);\n    }\n\n    /**\n     *       Return true, iff this year is the start of a row.  (Year 1 is\n     *       considered the start of that row.)\n     *\n     *       @return true, iff this year is the start of a row\n     */\n    public boolean startOfRow(Year y) {\n        return y.equals(start) || y.column() == 0 || y.isYearOne();\n    }\n\n    /**\n     *       Return true, iff this year is the end of a row.\n     *\n     *       @return true, iff this year is the end of a row\n     */\n    public boolean endOfRow(Year y) {\n        return y.equals(end) || y.column() == 9;\n    }\n\n    /**\n     *       Return the number of years overlap between this range and the\n     *       given range.\n     *\n     *       @param r range to compare\n     *       @return number of years overlap\n     */\n    public int overlap(Range r) {\n        return intersection(r).span();\n    }\n\n    /**\n     *       The intersection of this range with r.  If they don't overlap,\n     *       returns an empty range (1 - -1).\n     *\n     *       @see #union\n     *\n     *       @param r the range to intersect with this range\n     *       @return the intersection of this and r\n     */\n    public Range intersection(Range r) {\n        return new Range(Year.max(start, r.start), Year.min(end, r.end));\n    }\n\n    /**\n     *       The union of this range with r.  Since there is no concept of\n     *       \"range with a gap\" in Corina, it assumes they overlap.\n     *\n     *       @see #intersection\n     *\n     *       @param r the range to union with this range\n     *       @return the union of this and r\n     */\n    public Range union(Range r) {\n        return new Range(Year.min(start, r.start), Year.max(end, r.end));\n    }\n\n    /**\n     *       Compare two ranges for equality.\n     *\n     *       @param r range to compare with this\n     *       @return true, if the ranges are equal, else false\n     */\n    public boolean equals(Object o) {\n        if (o instanceof Range) {\n            Range r = (Range) o;\n            return start.equals(r.start) && end.equals(r.end);\n        } else {\n            // not even a Range, can't be equal\n            return false;\n        }\n    }\n\n    /**\n     *       A hash code for the Range.  (Since I define equals(),\n     *       I need to define hashCode().)\n     *\n     *       @return a hash code for this Range\n     */\n    public int hashCode() {\n        return start.hashCode() + 2 * end.hashCode();\n    }\n\n    /**\n     *       Compares this and o, for placing in fallback order.  Fallback\n     *       order sorts ranges by their ending year, latest to earliest,\n     *       and then by their length, longest to shortest.  (This is\n     *       usually what people want when looking at bargraphs.)\n     *\n     *       @param o Object to compare\n     *       @return >0, ==0, or <0 if this is greater-than, equal-to, or less-than o\n     *       @throws ClassCastException if o is not a Range\n     */\n    public int compareTo(Object o) {\n        Range r2 = (Range) o;\n        int c1 = end.compareTo(r2.end);\n        if (c1 != 0)\n            return c1;\n        // negative, because fallback puts longest samples first\n        int c2 = -start.compareTo(r2.start);\n        return c2;\n    }\n}\n",
		"id": "/EvoSuiteBenchmark/35_corina/src/main/java/corina/Range_11Test.java",
		"test_prompt": "// Range_11Test.java\n// This file is part of Corina.\n//\n// Corina is free software; you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation; either version 2 of the License, or\n// (at your option) any later version.\n//\n// Corina is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Corina; if not, write to the Free Software\n// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n//\n// Copyright 2001 Ken Harris <kbh7@cornell.edu>\n//\npackage corina;\n\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link Range}.\n* It contains ten unit test cases for the {@link Range#intersection(Range)} method.\n*/\nclass Range_11Test {"
	},
	{
		"original_code": "// Range.java\n//\n// This file is part of Corina.\n//\n// Corina is free software; you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation; either version 2 of the License, or\n// (at your option) any later version.\n//\n// Corina is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Corina; if not, write to the Free Software\n// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n//\n// Copyright 2001 Ken Harris <kbh7@cornell.edu>\n//\npackage corina;\n\n/**\n *   A range of years.  Ranges are immutable; all otherwise-destructive\n *   operations on a Range return a new Range.\n *\n *   <p>Unfortunately, use of this data structure in the class Sample\n *   often violates the single-instance storage principle: we hope that\n *   the usage of Range and Sample will always keep\n *   <code>Sample.data.size() == Range.span()</code>, but there aren't\n *   any built-in ways to do this, so it's up to you.  (If you add an\n *   element to sample.data, increase sample.range by one, for example.)\n *   The problem is that the <code>end</code> field is a duplicate of\n *   <code>Sample.data.size() + start</code>.</p>\n *\n *   @see Year\n *   @see Sample\n *\n *   @author Ken Harris &lt;kbh7 <i style=\"color: gray\">at</i> cornell <i style=\"color: gray\">dot</i> edu&gt;\n *   @version $Id: Range.java,v 1.5 2004/01/18 17:53:47 aaron Exp $\n */\npublic class Range implements Comparable {\n\n    /**\n     * Starting year of the Range.\n     */\n    private Year start;\n\n    /**\n     * Ending year of the range.\n     */\n    private Year end;\n\n    /**\n     *  Construct a new empty range, starting at <code>Year.DEFAULT</code>.\n     * \t@see Year\n     */\n    public Range() {\n        // this is only used by GraphFrame (which shouldn't use it)\n        // -- and Sample\n        start = Year.DEFAULT;\n        end = start.add(-1);\n    }\n\n    /**\n     *  Construct a new range, from y<sub>1</sub> to y<sub>2</sub>.\n     * \t(Neither year may be <code>null</code>.)  If y<sub>2</sub> &lt; y<sub>1</sub>,\n     * \tit is an empty interval.\n     * \t@param y1 starting year\n     * \t@param y2 ending year\n     */\n    public Range(Year y1, Year y2) {\n        // null argument?\n        if (y1 == null || y2 == null)\n            throw new NullPointerException();\n        this.start = y1;\n        this.end = y2;\n        // empty interval?\n        if (start.compareTo(end) > 0) {\n            start = Year.DEFAULT;\n            end = start.add(-1);\n        }\n    }\n\n    /**\n     *       Construct a range, given a starting year and span.\n     *\n     *       @param y the starting year\n     *       @param span the number of years\n     */\n    public Range(Year y, int span) {\n        this.start = y;\n        this.end = y.add(span - 1);\n    }\n\n    /**\n     *       Construct a range from a String.\n     *\n     *       @param s the String\n     */\n    public Range(String s) {\n        // (Grid.GridHandler.startElement is the only place this is used)\n        // (ignore outside whitespace)\n        String t = s.trim();\n        // find the first dash that isn't t[0]\n        int dash = t.indexOf('-', 1);\n        // -- there must be a dash! --\n        if (dash == -1)\n            throw new IllegalArgumentException();\n        // y1 is everything before, y2 is everything after\n        String y1 = t.substring(0, dash);\n        String y2 = t.substring(dash + 1);\n        // construct years\n        start = new Year(y1);\n        end = new Year(y2);\n    }\n\n    /**\n     *       Get the starting year of this range.\n     *\n     *       @return the starting year\n     */\n    public Year getStart() {\n        return start;\n    }\n\n    /**\n     *       Get the ending year of this range.\n     *\n     *       @return the ending year\n     */\n    public Year getEnd() {\n        return end;\n    }\n\n    /**\n     *       Set the starting year of the range, and adjust the ending year\n     *       to maintain the same length.\n     *\n     *       @param y new starting year for the range\n     *       @see #redateEndTo\n     */\n    public Range redateStartTo(Year y) {\n        return redateBy(y.diff(start));\n    }\n\n    /**\n     *        Redate a range by a certain number of years.  Usually, you'll\n     *        use redateStartTo() or redateEndTo(), which are more\n     *        convenient.\n     *\n     * \t@param dy the number of years to shift this range by\n     */\n    public Range redateBy(int dy) {\n        return new Range(start.add(dy), end.add(dy));\n    }\n\n    /**\n     *        Set the ending year of the range, and adjust the start year to\n     *        maintain the same length.\n     *\n     * \t@param y new ending year for the range\n     * \t@see #redateStartTo\n     */\n    public Range redateEndTo(Year y) {\n        return redateBy(y.diff(end));\n    }\n\n    /**\n     *       Return the number of years spanned by this range.  For\n     *       example, the range 1001 - 1005 spans 5 years.\n     *\n     *       @return the span of this range (difference between start and\n     *       end, inclusive)\n     */\n    public int span() {\n        return end.diff(start) + 1;\n    }\n\n    /**\n     *       Compute the number of rows this Range will take to display,\n     *       assuming rows are marked off as the row() method does.\n     *\n     *       @return the number of rows this range spans\n     */\n    public int rows() {\n        return getEnd().row() - getStart().row() + 1;\n    }\n\n    /**\n     *       Return a simple string representation of the range,\n     *       like \"1001 - 1036\".\n     *\n     *       @return a string representation of the range\n     */\n    public String toString() {\n        // this tends to get called a lot, so we'll memoize it.\n        if (memo == null)\n            // use \\u2014 EM DASH?\n            memo = start + \" - \" + end;\n        return memo;\n    }\n\n    private String memo = null;\n\n    /**\n     *       Return a string representation of the range, including\n     *       the span, like \"(1001 - 1036, n=36)\".\n     *\n     *       @return a string representation of the range, including span\n     */\n    public String toStringWithSpan() {\n        return \"(\" + start + \" - \" + end + \", n=\" + span() + \")\";\n        // use \\u2014 EM DASH?\n    }\n\n    /**\n     *       Return true if (and only if) the given year is inside the\n     *       range, inclusive.\n     *\n     *       @param y year to check\n     *       @return true if <code>y</code> is in the range, else false\n     */\n    public boolean contains(Year y) {\n        return (start.compareTo(y) <= 0) && (y.compareTo(end) <= 0);\n    }\n\n    /**\n     *       Return true if (and only if) the given range is completely\n     *       inside the range, inclusive.\n     *\n     *       @param r range to check\n     *       @return true if <code>r</code> is entirely in the range, else false\n     */\n    public boolean contains(Range r) {\n        return contains(r.start) && contains(r.end);\n    }\n\n    /**\n     *       Return true, iff this year is the start of a row.  (Year 1 is\n     *       considered the start of that row.)\n     *\n     *       @return true, iff this year is the start of a row\n     */\n    public boolean startOfRow(Year y) {\n        return y.equals(start) || y.column() == 0 || y.isYearOne();\n    }\n\n    /**\n     *       Return true, iff this year is the end of a row.\n     *\n     *       @return true, iff this year is the end of a row\n     */\n    public boolean endOfRow(Year y) {\n        return y.equals(end) || y.column() == 9;\n    }\n\n    /**\n     *       Return the number of years overlap between this range and the\n     *       given range.\n     *\n     *       @param r range to compare\n     *       @return number of years overlap\n     */\n    public int overlap(Range r) {\n        return intersection(r).span();\n    }\n\n    /**\n     *       The intersection of this range with r.  If they don't overlap,\n     *       returns an empty range (1 - -1).\n     *\n     *       @see #union\n     *\n     *       @param r the range to intersect with this range\n     *       @return the intersection of this and r\n     */\n    public Range intersection(Range r) {\n        return new Range(Year.max(start, r.start), Year.min(end, r.end));\n    }\n\n    /**\n     *       The union of this range with r.  Since there is no concept of\n     *       \"range with a gap\" in Corina, it assumes they overlap.\n     *\n     *       @see #intersection\n     *\n     *       @param r the range to union with this range\n     *       @return the union of this and r\n     */\n    public Range union(Range r) {\n        return new Range(Year.min(start, r.start), Year.max(end, r.end));\n    }\n\n    /**\n     *       Compare two ranges for equality.\n     *\n     *       @param r range to compare with this\n     *       @return true, if the ranges are equal, else false\n     */\n    public boolean equals(Object o) {\n        if (o instanceof Range) {\n            Range r = (Range) o;\n            return start.equals(r.start) && end.equals(r.end);\n        } else {\n            // not even a Range, can't be equal\n            return false;\n        }\n    }\n\n    /**\n     *       A hash code for the Range.  (Since I define equals(),\n     *       I need to define hashCode().)\n     *\n     *       @return a hash code for this Range\n     */\n    public int hashCode() {\n        return start.hashCode() + 2 * end.hashCode();\n    }\n\n    /**\n     *       Compares this and o, for placing in fallback order.  Fallback\n     *       order sorts ranges by their ending year, latest to earliest,\n     *       and then by their length, longest to shortest.  (This is\n     *       usually what people want when looking at bargraphs.)\n     *\n     *       @param o Object to compare\n     *       @return >0, ==0, or <0 if this is greater-than, equal-to, or less-than o\n     *       @throws ClassCastException if o is not a Range\n     */\n    public int compareTo(Object o) {\n        Range r2 = (Range) o;\n        int c1 = end.compareTo(r2.end);\n        if (c1 != 0)\n            return c1;\n        // negative, because fallback puts longest samples first\n        int c2 = -start.compareTo(r2.start);\n        return c2;\n    }\n}\n",
		"id": "/EvoSuiteBenchmark/35_corina/src/main/java/corina/Range_12Test.java",
		"test_prompt": "// Range_12Test.java\n// This file is part of Corina.\n//\n// Corina is free software; you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation; either version 2 of the License, or\n// (at your option) any later version.\n//\n// Corina is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Corina; if not, write to the Free Software\n// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n//\n// Copyright 2001 Ken Harris <kbh7@cornell.edu>\n//\npackage corina;\n\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link Range}.\n* It contains ten unit test cases for the {@link Range#union(Range)} method.\n*/\nclass Range_12Test {"
	},
	{
		"original_code": "// Range.java\n//\n// This file is part of Corina.\n//\n// Corina is free software; you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation; either version 2 of the License, or\n// (at your option) any later version.\n//\n// Corina is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Corina; if not, write to the Free Software\n// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n//\n// Copyright 2001 Ken Harris <kbh7@cornell.edu>\n//\npackage corina;\n\n/**\n *   A range of years.  Ranges are immutable; all otherwise-destructive\n *   operations on a Range return a new Range.\n *\n *   <p>Unfortunately, use of this data structure in the class Sample\n *   often violates the single-instance storage principle: we hope that\n *   the usage of Range and Sample will always keep\n *   <code>Sample.data.size() == Range.span()</code>, but there aren't\n *   any built-in ways to do this, so it's up to you.  (If you add an\n *   element to sample.data, increase sample.range by one, for example.)\n *   The problem is that the <code>end</code> field is a duplicate of\n *   <code>Sample.data.size() + start</code>.</p>\n *\n *   @see Year\n *   @see Sample\n *\n *   @author Ken Harris &lt;kbh7 <i style=\"color: gray\">at</i> cornell <i style=\"color: gray\">dot</i> edu&gt;\n *   @version $Id: Range.java,v 1.5 2004/01/18 17:53:47 aaron Exp $\n */\npublic class Range implements Comparable {\n\n    /**\n     * Starting year of the Range.\n     */\n    private Year start;\n\n    /**\n     * Ending year of the range.\n     */\n    private Year end;\n\n    /**\n     *  Construct a new empty range, starting at <code>Year.DEFAULT</code>.\n     * \t@see Year\n     */\n    public Range() {\n        // this is only used by GraphFrame (which shouldn't use it)\n        // -- and Sample\n        start = Year.DEFAULT;\n        end = start.add(-1);\n    }\n\n    /**\n     *  Construct a new range, from y<sub>1</sub> to y<sub>2</sub>.\n     * \t(Neither year may be <code>null</code>.)  If y<sub>2</sub> &lt; y<sub>1</sub>,\n     * \tit is an empty interval.\n     * \t@param y1 starting year\n     * \t@param y2 ending year\n     */\n    public Range(Year y1, Year y2) {\n        // null argument?\n        if (y1 == null || y2 == null)\n            throw new NullPointerException();\n        this.start = y1;\n        this.end = y2;\n        // empty interval?\n        if (start.compareTo(end) > 0) {\n            start = Year.DEFAULT;\n            end = start.add(-1);\n        }\n    }\n\n    /**\n     *       Construct a range, given a starting year and span.\n     *\n     *       @param y the starting year\n     *       @param span the number of years\n     */\n    public Range(Year y, int span) {\n        this.start = y;\n        this.end = y.add(span - 1);\n    }\n\n    /**\n     *       Construct a range from a String.\n     *\n     *       @param s the String\n     */\n    public Range(String s) {\n        // (Grid.GridHandler.startElement is the only place this is used)\n        // (ignore outside whitespace)\n        String t = s.trim();\n        // find the first dash that isn't t[0]\n        int dash = t.indexOf('-', 1);\n        // -- there must be a dash! --\n        if (dash == -1)\n            throw new IllegalArgumentException();\n        // y1 is everything before, y2 is everything after\n        String y1 = t.substring(0, dash);\n        String y2 = t.substring(dash + 1);\n        // construct years\n        start = new Year(y1);\n        end = new Year(y2);\n    }\n\n    /**\n     *       Get the starting year of this range.\n     *\n     *       @return the starting year\n     */\n    public Year getStart() {\n        return start;\n    }\n\n    /**\n     *       Get the ending year of this range.\n     *\n     *       @return the ending year\n     */\n    public Year getEnd() {\n        return end;\n    }\n\n    /**\n     *       Set the starting year of the range, and adjust the ending year\n     *       to maintain the same length.\n     *\n     *       @param y new starting year for the range\n     *       @see #redateEndTo\n     */\n    public Range redateStartTo(Year y) {\n        return redateBy(y.diff(start));\n    }\n\n    /**\n     *        Redate a range by a certain number of years.  Usually, you'll\n     *        use redateStartTo() or redateEndTo(), which are more\n     *        convenient.\n     *\n     * \t@param dy the number of years to shift this range by\n     */\n    public Range redateBy(int dy) {\n        return new Range(start.add(dy), end.add(dy));\n    }\n\n    /**\n     *        Set the ending year of the range, and adjust the start year to\n     *        maintain the same length.\n     *\n     * \t@param y new ending year for the range\n     * \t@see #redateStartTo\n     */\n    public Range redateEndTo(Year y) {\n        return redateBy(y.diff(end));\n    }\n\n    /**\n     *       Return the number of years spanned by this range.  For\n     *       example, the range 1001 - 1005 spans 5 years.\n     *\n     *       @return the span of this range (difference between start and\n     *       end, inclusive)\n     */\n    public int span() {\n        return end.diff(start) + 1;\n    }\n\n    /**\n     *       Compute the number of rows this Range will take to display,\n     *       assuming rows are marked off as the row() method does.\n     *\n     *       @return the number of rows this range spans\n     */\n    public int rows() {\n        return getEnd().row() - getStart().row() + 1;\n    }\n\n    /**\n     *       Return a simple string representation of the range,\n     *       like \"1001 - 1036\".\n     *\n     *       @return a string representation of the range\n     */\n    public String toString() {\n        // this tends to get called a lot, so we'll memoize it.\n        if (memo == null)\n            // use \\u2014 EM DASH?\n            memo = start + \" - \" + end;\n        return memo;\n    }\n\n    private String memo = null;\n\n    /**\n     *       Return a string representation of the range, including\n     *       the span, like \"(1001 - 1036, n=36)\".\n     *\n     *       @return a string representation of the range, including span\n     */\n    public String toStringWithSpan() {\n        return \"(\" + start + \" - \" + end + \", n=\" + span() + \")\";\n        // use \\u2014 EM DASH?\n    }\n\n    /**\n     *       Return true if (and only if) the given year is inside the\n     *       range, inclusive.\n     *\n     *       @param y year to check\n     *       @return true if <code>y</code> is in the range, else false\n     */\n    public boolean contains(Year y) {\n        return (start.compareTo(y) <= 0) && (y.compareTo(end) <= 0);\n    }\n\n    /**\n     *       Return true if (and only if) the given range is completely\n     *       inside the range, inclusive.\n     *\n     *       @param r range to check\n     *       @return true if <code>r</code> is entirely in the range, else false\n     */\n    public boolean contains(Range r) {\n        return contains(r.start) && contains(r.end);\n    }\n\n    /**\n     *       Return true, iff this year is the start of a row.  (Year 1 is\n     *       considered the start of that row.)\n     *\n     *       @return true, iff this year is the start of a row\n     */\n    public boolean startOfRow(Year y) {\n        return y.equals(start) || y.column() == 0 || y.isYearOne();\n    }\n\n    /**\n     *       Return true, iff this year is the end of a row.\n     *\n     *       @return true, iff this year is the end of a row\n     */\n    public boolean endOfRow(Year y) {\n        return y.equals(end) || y.column() == 9;\n    }\n\n    /**\n     *       Return the number of years overlap between this range and the\n     *       given range.\n     *\n     *       @param r range to compare\n     *       @return number of years overlap\n     */\n    public int overlap(Range r) {\n        return intersection(r).span();\n    }\n\n    /**\n     *       The intersection of this range with r.  If they don't overlap,\n     *       returns an empty range (1 - -1).\n     *\n     *       @see #union\n     *\n     *       @param r the range to intersect with this range\n     *       @return the intersection of this and r\n     */\n    public Range intersection(Range r) {\n        return new Range(Year.max(start, r.start), Year.min(end, r.end));\n    }\n\n    /**\n     *       The union of this range with r.  Since there is no concept of\n     *       \"range with a gap\" in Corina, it assumes they overlap.\n     *\n     *       @see #intersection\n     *\n     *       @param r the range to union with this range\n     *       @return the union of this and r\n     */\n    public Range union(Range r) {\n        return new Range(Year.min(start, r.start), Year.max(end, r.end));\n    }\n\n    /**\n     *       Compare two ranges for equality.\n     *\n     *       @param r range to compare with this\n     *       @return true, if the ranges are equal, else false\n     */\n    public boolean equals(Object o) {\n        if (o instanceof Range) {\n            Range r = (Range) o;\n            return start.equals(r.start) && end.equals(r.end);\n        } else {\n            // not even a Range, can't be equal\n            return false;\n        }\n    }\n\n    /**\n     *       A hash code for the Range.  (Since I define equals(),\n     *       I need to define hashCode().)\n     *\n     *       @return a hash code for this Range\n     */\n    public int hashCode() {\n        return start.hashCode() + 2 * end.hashCode();\n    }\n\n    /**\n     *       Compares this and o, for placing in fallback order.  Fallback\n     *       order sorts ranges by their ending year, latest to earliest,\n     *       and then by their length, longest to shortest.  (This is\n     *       usually what people want when looking at bargraphs.)\n     *\n     *       @param o Object to compare\n     *       @return >0, ==0, or <0 if this is greater-than, equal-to, or less-than o\n     *       @throws ClassCastException if o is not a Range\n     */\n    public int compareTo(Object o) {\n        Range r2 = (Range) o;\n        int c1 = end.compareTo(r2.end);\n        if (c1 != 0)\n            return c1;\n        // negative, because fallback puts longest samples first\n        int c2 = -start.compareTo(r2.start);\n        return c2;\n    }\n}\n",
		"id": "/EvoSuiteBenchmark/35_corina/src/main/java/corina/Range_13Test.java",
		"test_prompt": "// Range_13Test.java\n// This file is part of Corina.\n//\n// Corina is free software; you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation; either version 2 of the License, or\n// (at your option) any later version.\n//\n// Corina is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Corina; if not, write to the Free Software\n// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n//\n// Copyright 2001 Ken Harris <kbh7@cornell.edu>\n//\npackage corina;\n\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link Range}.\n* It contains ten unit test cases for the {@link Range#equals(Object)} method.\n*/\nclass Range_13Test {"
	},
	{
		"original_code": "// Range.java\n//\n// This file is part of Corina.\n//\n// Corina is free software; you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation; either version 2 of the License, or\n// (at your option) any later version.\n//\n// Corina is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Corina; if not, write to the Free Software\n// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n//\n// Copyright 2001 Ken Harris <kbh7@cornell.edu>\n//\npackage corina;\n\n/**\n *   A range of years.  Ranges are immutable; all otherwise-destructive\n *   operations on a Range return a new Range.\n *\n *   <p>Unfortunately, use of this data structure in the class Sample\n *   often violates the single-instance storage principle: we hope that\n *   the usage of Range and Sample will always keep\n *   <code>Sample.data.size() == Range.span()</code>, but there aren't\n *   any built-in ways to do this, so it's up to you.  (If you add an\n *   element to sample.data, increase sample.range by one, for example.)\n *   The problem is that the <code>end</code> field is a duplicate of\n *   <code>Sample.data.size() + start</code>.</p>\n *\n *   @see Year\n *   @see Sample\n *\n *   @author Ken Harris &lt;kbh7 <i style=\"color: gray\">at</i> cornell <i style=\"color: gray\">dot</i> edu&gt;\n *   @version $Id: Range.java,v 1.5 2004/01/18 17:53:47 aaron Exp $\n */\npublic class Range implements Comparable {\n\n    /**\n     * Starting year of the Range.\n     */\n    private Year start;\n\n    /**\n     * Ending year of the range.\n     */\n    private Year end;\n\n    /**\n     *  Construct a new empty range, starting at <code>Year.DEFAULT</code>.\n     * \t@see Year\n     */\n    public Range() {\n        // this is only used by GraphFrame (which shouldn't use it)\n        // -- and Sample\n        start = Year.DEFAULT;\n        end = start.add(-1);\n    }\n\n    /**\n     *  Construct a new range, from y<sub>1</sub> to y<sub>2</sub>.\n     * \t(Neither year may be <code>null</code>.)  If y<sub>2</sub> &lt; y<sub>1</sub>,\n     * \tit is an empty interval.\n     * \t@param y1 starting year\n     * \t@param y2 ending year\n     */\n    public Range(Year y1, Year y2) {\n        // null argument?\n        if (y1 == null || y2 == null)\n            throw new NullPointerException();\n        this.start = y1;\n        this.end = y2;\n        // empty interval?\n        if (start.compareTo(end) > 0) {\n            start = Year.DEFAULT;\n            end = start.add(-1);\n        }\n    }\n\n    /**\n     *       Construct a range, given a starting year and span.\n     *\n     *       @param y the starting year\n     *       @param span the number of years\n     */\n    public Range(Year y, int span) {\n        this.start = y;\n        this.end = y.add(span - 1);\n    }\n\n    /**\n     *       Construct a range from a String.\n     *\n     *       @param s the String\n     */\n    public Range(String s) {\n        // (Grid.GridHandler.startElement is the only place this is used)\n        // (ignore outside whitespace)\n        String t = s.trim();\n        // find the first dash that isn't t[0]\n        int dash = t.indexOf('-', 1);\n        // -- there must be a dash! --\n        if (dash == -1)\n            throw new IllegalArgumentException();\n        // y1 is everything before, y2 is everything after\n        String y1 = t.substring(0, dash);\n        String y2 = t.substring(dash + 1);\n        // construct years\n        start = new Year(y1);\n        end = new Year(y2);\n    }\n\n    /**\n     *       Get the starting year of this range.\n     *\n     *       @return the starting year\n     */\n    public Year getStart() {\n        return start;\n    }\n\n    /**\n     *       Get the ending year of this range.\n     *\n     *       @return the ending year\n     */\n    public Year getEnd() {\n        return end;\n    }\n\n    /**\n     *       Set the starting year of the range, and adjust the ending year\n     *       to maintain the same length.\n     *\n     *       @param y new starting year for the range\n     *       @see #redateEndTo\n     */\n    public Range redateStartTo(Year y) {\n        return redateBy(y.diff(start));\n    }\n\n    /**\n     *        Redate a range by a certain number of years.  Usually, you'll\n     *        use redateStartTo() or redateEndTo(), which are more\n     *        convenient.\n     *\n     * \t@param dy the number of years to shift this range by\n     */\n    public Range redateBy(int dy) {\n        return new Range(start.add(dy), end.add(dy));\n    }\n\n    /**\n     *        Set the ending year of the range, and adjust the start year to\n     *        maintain the same length.\n     *\n     * \t@param y new ending year for the range\n     * \t@see #redateStartTo\n     */\n    public Range redateEndTo(Year y) {\n        return redateBy(y.diff(end));\n    }\n\n    /**\n     *       Return the number of years spanned by this range.  For\n     *       example, the range 1001 - 1005 spans 5 years.\n     *\n     *       @return the span of this range (difference between start and\n     *       end, inclusive)\n     */\n    public int span() {\n        return end.diff(start) + 1;\n    }\n\n    /**\n     *       Compute the number of rows this Range will take to display,\n     *       assuming rows are marked off as the row() method does.\n     *\n     *       @return the number of rows this range spans\n     */\n    public int rows() {\n        return getEnd().row() - getStart().row() + 1;\n    }\n\n    /**\n     *       Return a simple string representation of the range,\n     *       like \"1001 - 1036\".\n     *\n     *       @return a string representation of the range\n     */\n    public String toString() {\n        // this tends to get called a lot, so we'll memoize it.\n        if (memo == null)\n            // use \\u2014 EM DASH?\n            memo = start + \" - \" + end;\n        return memo;\n    }\n\n    private String memo = null;\n\n    /**\n     *       Return a string representation of the range, including\n     *       the span, like \"(1001 - 1036, n=36)\".\n     *\n     *       @return a string representation of the range, including span\n     */\n    public String toStringWithSpan() {\n        return \"(\" + start + \" - \" + end + \", n=\" + span() + \")\";\n        // use \\u2014 EM DASH?\n    }\n\n    /**\n     *       Return true if (and only if) the given year is inside the\n     *       range, inclusive.\n     *\n     *       @param y year to check\n     *       @return true if <code>y</code> is in the range, else false\n     */\n    public boolean contains(Year y) {\n        return (start.compareTo(y) <= 0) && (y.compareTo(end) <= 0);\n    }\n\n    /**\n     *       Return true if (and only if) the given range is completely\n     *       inside the range, inclusive.\n     *\n     *       @param r range to check\n     *       @return true if <code>r</code> is entirely in the range, else false\n     */\n    public boolean contains(Range r) {\n        return contains(r.start) && contains(r.end);\n    }\n\n    /**\n     *       Return true, iff this year is the start of a row.  (Year 1 is\n     *       considered the start of that row.)\n     *\n     *       @return true, iff this year is the start of a row\n     */\n    public boolean startOfRow(Year y) {\n        return y.equals(start) || y.column() == 0 || y.isYearOne();\n    }\n\n    /**\n     *       Return true, iff this year is the end of a row.\n     *\n     *       @return true, iff this year is the end of a row\n     */\n    public boolean endOfRow(Year y) {\n        return y.equals(end) || y.column() == 9;\n    }\n\n    /**\n     *       Return the number of years overlap between this range and the\n     *       given range.\n     *\n     *       @param r range to compare\n     *       @return number of years overlap\n     */\n    public int overlap(Range r) {\n        return intersection(r).span();\n    }\n\n    /**\n     *       The intersection of this range with r.  If they don't overlap,\n     *       returns an empty range (1 - -1).\n     *\n     *       @see #union\n     *\n     *       @param r the range to intersect with this range\n     *       @return the intersection of this and r\n     */\n    public Range intersection(Range r) {\n        return new Range(Year.max(start, r.start), Year.min(end, r.end));\n    }\n\n    /**\n     *       The union of this range with r.  Since there is no concept of\n     *       \"range with a gap\" in Corina, it assumes they overlap.\n     *\n     *       @see #intersection\n     *\n     *       @param r the range to union with this range\n     *       @return the union of this and r\n     */\n    public Range union(Range r) {\n        return new Range(Year.min(start, r.start), Year.max(end, r.end));\n    }\n\n    /**\n     *       Compare two ranges for equality.\n     *\n     *       @param r range to compare with this\n     *       @return true, if the ranges are equal, else false\n     */\n    public boolean equals(Object o) {\n        if (o instanceof Range) {\n            Range r = (Range) o;\n            return start.equals(r.start) && end.equals(r.end);\n        } else {\n            // not even a Range, can't be equal\n            return false;\n        }\n    }\n\n    /**\n     *       A hash code for the Range.  (Since I define equals(),\n     *       I need to define hashCode().)\n     *\n     *       @return a hash code for this Range\n     */\n    public int hashCode() {\n        return start.hashCode() + 2 * end.hashCode();\n    }\n\n    /**\n     *       Compares this and o, for placing in fallback order.  Fallback\n     *       order sorts ranges by their ending year, latest to earliest,\n     *       and then by their length, longest to shortest.  (This is\n     *       usually what people want when looking at bargraphs.)\n     *\n     *       @param o Object to compare\n     *       @return >0, ==0, or <0 if this is greater-than, equal-to, or less-than o\n     *       @throws ClassCastException if o is not a Range\n     */\n    public int compareTo(Object o) {\n        Range r2 = (Range) o;\n        int c1 = end.compareTo(r2.end);\n        if (c1 != 0)\n            return c1;\n        // negative, because fallback puts longest samples first\n        int c2 = -start.compareTo(r2.start);\n        return c2;\n    }\n}\n",
		"id": "/EvoSuiteBenchmark/35_corina/src/main/java/corina/Range_14Test.java",
		"test_prompt": "// Range_14Test.java\n// This file is part of Corina.\n//\n// Corina is free software; you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation; either version 2 of the License, or\n// (at your option) any later version.\n//\n// Corina is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Corina; if not, write to the Free Software\n// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n//\n// Copyright 2001 Ken Harris <kbh7@cornell.edu>\n//\npackage corina;\n\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link Range}.\n* It contains ten unit test cases for the {@link Range#hashCode()} method.\n*/\nclass Range_14Test {"
	},
	{
		"original_code": "// Range.java\n//\n// This file is part of Corina.\n//\n// Corina is free software; you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation; either version 2 of the License, or\n// (at your option) any later version.\n//\n// Corina is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Corina; if not, write to the Free Software\n// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n//\n// Copyright 2001 Ken Harris <kbh7@cornell.edu>\n//\npackage corina;\n\n/**\n *   A range of years.  Ranges are immutable; all otherwise-destructive\n *   operations on a Range return a new Range.\n *\n *   <p>Unfortunately, use of this data structure in the class Sample\n *   often violates the single-instance storage principle: we hope that\n *   the usage of Range and Sample will always keep\n *   <code>Sample.data.size() == Range.span()</code>, but there aren't\n *   any built-in ways to do this, so it's up to you.  (If you add an\n *   element to sample.data, increase sample.range by one, for example.)\n *   The problem is that the <code>end</code> field is a duplicate of\n *   <code>Sample.data.size() + start</code>.</p>\n *\n *   @see Year\n *   @see Sample\n *\n *   @author Ken Harris &lt;kbh7 <i style=\"color: gray\">at</i> cornell <i style=\"color: gray\">dot</i> edu&gt;\n *   @version $Id: Range.java,v 1.5 2004/01/18 17:53:47 aaron Exp $\n */\npublic class Range implements Comparable {\n\n    /**\n     * Starting year of the Range.\n     */\n    private Year start;\n\n    /**\n     * Ending year of the range.\n     */\n    private Year end;\n\n    /**\n     *  Construct a new empty range, starting at <code>Year.DEFAULT</code>.\n     * \t@see Year\n     */\n    public Range() {\n        // this is only used by GraphFrame (which shouldn't use it)\n        // -- and Sample\n        start = Year.DEFAULT;\n        end = start.add(-1);\n    }\n\n    /**\n     *  Construct a new range, from y<sub>1</sub> to y<sub>2</sub>.\n     * \t(Neither year may be <code>null</code>.)  If y<sub>2</sub> &lt; y<sub>1</sub>,\n     * \tit is an empty interval.\n     * \t@param y1 starting year\n     * \t@param y2 ending year\n     */\n    public Range(Year y1, Year y2) {\n        // null argument?\n        if (y1 == null || y2 == null)\n            throw new NullPointerException();\n        this.start = y1;\n        this.end = y2;\n        // empty interval?\n        if (start.compareTo(end) > 0) {\n            start = Year.DEFAULT;\n            end = start.add(-1);\n        }\n    }\n\n    /**\n     *       Construct a range, given a starting year and span.\n     *\n     *       @param y the starting year\n     *       @param span the number of years\n     */\n    public Range(Year y, int span) {\n        this.start = y;\n        this.end = y.add(span - 1);\n    }\n\n    /**\n     *       Construct a range from a String.\n     *\n     *       @param s the String\n     */\n    public Range(String s) {\n        // (Grid.GridHandler.startElement is the only place this is used)\n        // (ignore outside whitespace)\n        String t = s.trim();\n        // find the first dash that isn't t[0]\n        int dash = t.indexOf('-', 1);\n        // -- there must be a dash! --\n        if (dash == -1)\n            throw new IllegalArgumentException();\n        // y1 is everything before, y2 is everything after\n        String y1 = t.substring(0, dash);\n        String y2 = t.substring(dash + 1);\n        // construct years\n        start = new Year(y1);\n        end = new Year(y2);\n    }\n\n    /**\n     *       Get the starting year of this range.\n     *\n     *       @return the starting year\n     */\n    public Year getStart() {\n        return start;\n    }\n\n    /**\n     *       Get the ending year of this range.\n     *\n     *       @return the ending year\n     */\n    public Year getEnd() {\n        return end;\n    }\n\n    /**\n     *       Set the starting year of the range, and adjust the ending year\n     *       to maintain the same length.\n     *\n     *       @param y new starting year for the range\n     *       @see #redateEndTo\n     */\n    public Range redateStartTo(Year y) {\n        return redateBy(y.diff(start));\n    }\n\n    /**\n     *        Redate a range by a certain number of years.  Usually, you'll\n     *        use redateStartTo() or redateEndTo(), which are more\n     *        convenient.\n     *\n     * \t@param dy the number of years to shift this range by\n     */\n    public Range redateBy(int dy) {\n        return new Range(start.add(dy), end.add(dy));\n    }\n\n    /**\n     *        Set the ending year of the range, and adjust the start year to\n     *        maintain the same length.\n     *\n     * \t@param y new ending year for the range\n     * \t@see #redateStartTo\n     */\n    public Range redateEndTo(Year y) {\n        return redateBy(y.diff(end));\n    }\n\n    /**\n     *       Return the number of years spanned by this range.  For\n     *       example, the range 1001 - 1005 spans 5 years.\n     *\n     *       @return the span of this range (difference between start and\n     *       end, inclusive)\n     */\n    public int span() {\n        return end.diff(start) + 1;\n    }\n\n    /**\n     *       Compute the number of rows this Range will take to display,\n     *       assuming rows are marked off as the row() method does.\n     *\n     *       @return the number of rows this range spans\n     */\n    public int rows() {\n        return getEnd().row() - getStart().row() + 1;\n    }\n\n    /**\n     *       Return a simple string representation of the range,\n     *       like \"1001 - 1036\".\n     *\n     *       @return a string representation of the range\n     */\n    public String toString() {\n        // this tends to get called a lot, so we'll memoize it.\n        if (memo == null)\n            // use \\u2014 EM DASH?\n            memo = start + \" - \" + end;\n        return memo;\n    }\n\n    private String memo = null;\n\n    /**\n     *       Return a string representation of the range, including\n     *       the span, like \"(1001 - 1036, n=36)\".\n     *\n     *       @return a string representation of the range, including span\n     */\n    public String toStringWithSpan() {\n        return \"(\" + start + \" - \" + end + \", n=\" + span() + \")\";\n        // use \\u2014 EM DASH?\n    }\n\n    /**\n     *       Return true if (and only if) the given year is inside the\n     *       range, inclusive.\n     *\n     *       @param y year to check\n     *       @return true if <code>y</code> is in the range, else false\n     */\n    public boolean contains(Year y) {\n        return (start.compareTo(y) <= 0) && (y.compareTo(end) <= 0);\n    }\n\n    /**\n     *       Return true if (and only if) the given range is completely\n     *       inside the range, inclusive.\n     *\n     *       @param r range to check\n     *       @return true if <code>r</code> is entirely in the range, else false\n     */\n    public boolean contains(Range r) {\n        return contains(r.start) && contains(r.end);\n    }\n\n    /**\n     *       Return true, iff this year is the start of a row.  (Year 1 is\n     *       considered the start of that row.)\n     *\n     *       @return true, iff this year is the start of a row\n     */\n    public boolean startOfRow(Year y) {\n        return y.equals(start) || y.column() == 0 || y.isYearOne();\n    }\n\n    /**\n     *       Return true, iff this year is the end of a row.\n     *\n     *       @return true, iff this year is the end of a row\n     */\n    public boolean endOfRow(Year y) {\n        return y.equals(end) || y.column() == 9;\n    }\n\n    /**\n     *       Return the number of years overlap between this range and the\n     *       given range.\n     *\n     *       @param r range to compare\n     *       @return number of years overlap\n     */\n    public int overlap(Range r) {\n        return intersection(r).span();\n    }\n\n    /**\n     *       The intersection of this range with r.  If they don't overlap,\n     *       returns an empty range (1 - -1).\n     *\n     *       @see #union\n     *\n     *       @param r the range to intersect with this range\n     *       @return the intersection of this and r\n     */\n    public Range intersection(Range r) {\n        return new Range(Year.max(start, r.start), Year.min(end, r.end));\n    }\n\n    /**\n     *       The union of this range with r.  Since there is no concept of\n     *       \"range with a gap\" in Corina, it assumes they overlap.\n     *\n     *       @see #intersection\n     *\n     *       @param r the range to union with this range\n     *       @return the union of this and r\n     */\n    public Range union(Range r) {\n        return new Range(Year.min(start, r.start), Year.max(end, r.end));\n    }\n\n    /**\n     *       Compare two ranges for equality.\n     *\n     *       @param r range to compare with this\n     *       @return true, if the ranges are equal, else false\n     */\n    public boolean equals(Object o) {\n        if (o instanceof Range) {\n            Range r = (Range) o;\n            return start.equals(r.start) && end.equals(r.end);\n        } else {\n            // not even a Range, can't be equal\n            return false;\n        }\n    }\n\n    /**\n     *       A hash code for the Range.  (Since I define equals(),\n     *       I need to define hashCode().)\n     *\n     *       @return a hash code for this Range\n     */\n    public int hashCode() {\n        return start.hashCode() + 2 * end.hashCode();\n    }\n\n    /**\n     *       Compares this and o, for placing in fallback order.  Fallback\n     *       order sorts ranges by their ending year, latest to earliest,\n     *       and then by their length, longest to shortest.  (This is\n     *       usually what people want when looking at bargraphs.)\n     *\n     *       @param o Object to compare\n     *       @return >0, ==0, or <0 if this is greater-than, equal-to, or less-than o\n     *       @throws ClassCastException if o is not a Range\n     */\n    public int compareTo(Object o) {\n        Range r2 = (Range) o;\n        int c1 = end.compareTo(r2.end);\n        if (c1 != 0)\n            return c1;\n        // negative, because fallback puts longest samples first\n        int c2 = -start.compareTo(r2.start);\n        return c2;\n    }\n}\n",
		"id": "/EvoSuiteBenchmark/35_corina/src/main/java/corina/Range_15Test.java",
		"test_prompt": "// Range_15Test.java\n// This file is part of Corina.\n//\n// Corina is free software; you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation; either version 2 of the License, or\n// (at your option) any later version.\n//\n// Corina is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Corina; if not, write to the Free Software\n// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n//\n// Copyright 2001 Ken Harris <kbh7@cornell.edu>\n//\npackage corina;\n\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link Range}.\n* It contains ten unit test cases for the {@link Range#compareTo(Object)} method.\n*/\nclass Range_15Test {"
	},
	{
		"original_code": "// Country.java\npackage corina.site;\n\nimport corina.gui.Bug;\nimport java.util.Properties;\nimport java.io.IOException;\n\n/**\n *   Class for converting between country codes (like \"GR\") and country\n *   names (like \"Greece\").\n *\n *   <p>This uses ISO 3166-1, with the exception that Turkey is \"TU\",\n *   instead of \"TR\" - but \"TU\" isn't anything else, so it doesn't cause\n *   any problems internally.  (It might if another program expected\n *   pure ISO-3166-1.)</p>\n *\n *   <p>On first use, it loads the file\n *   <code>countries.properties</code> (actually, just a resource in the\n *   Corina application's jar).  It is not (yet) localized.</p>\n */\n// TODO: getName() is called a lot; it would probably be much faster (O(1) vs O(n))\n// if it used a hash table.\n// TODO: include small bitmaps of their flags, too; have a getFlag() method\n// (yes, this would be trivial in lisp.  please don't laugh.)\npublic class Country {\n\n    // somebody suggested 2 maps -- good idea?\n    private String code, name;\n\n    private static Country[] countries;\n\n    private static int n;\n\n    static {\n        Properties prop = new Properties();\n        try {\n            ClassLoader cl = corina.site.Country.class.getClassLoader();\n            prop.load(cl.getResource(\"countries.properties\").openStream());\n        } catch (Exception e) {\n            // can't happen\n            Bug.bug(e);\n        }\n        String[] keys = (String[]) prop.keySet().toArray(new String[0]);\n        n = keys.length;\n        countries = new Country[n];\n        for (int i = 0; i < n; i++) {\n            Country c = new Country(keys[i], prop.getProperty(keys[i]));\n            countries[i] = c;\n        }\n    }\n\n    // make a new country, as a (code, name) tuple\n    private Country(String code, String name) {\n        this.code = code;\n        this.name = name;\n    }\n\n    /**\n     *       Given a country code, return its name.\n     *\n     *       @param code the country code, like \"GR\"\n     *       @return its name, like \"Greece\"\n     *       @exception IllegalArgumentException if it's not a known country code\n     */\n    public static String getName(String code) {\n        for (int i = 0; i < n; i++) if (countries[i].code.equals(code))\n            return countries[i].name;\n        throw new IllegalArgumentException();\n    }\n\n    /**\n     *       Given a country name, return its code.\n     *       @param name the country name, like \"Greece\"\n     *       @return its code, like \"GR\"\n     *       @exception IllegalArgumentException if it's not a known country\n     *       name\n     */\n    public static String getCode(String name) {\n        for (int i = 0; i < n; i++) if (countries[i].name.equals(name))\n            return countries[i].code;\n        throw new IllegalArgumentException();\n    }\n\n    /**\n     *       Returns an array of all the country names.\n     *       @return an array of all the country names\n     */\n    public static String[] getAllNames() {\n        String[] result = new String[n];\n        for (int i = 0; i < n; i++) result[i] = countries[i].name;\n        return result;\n    }\n\n    /*\n     * Returns a false country name for a bad country code\n     */\n    public static String badCountry(String code) {\n        return \"<unknown \" + code + \">\";\n    }\n\n    /*\n     * Gets a bad country code from a false country name\n     */\n    public static String badCode(String country) {\n        if (!(country.startsWith(\"<unknown \"))) {\n            return \"<unknown '\" + country + \"'>\";\n        }\n        return country.substring(9, country.length() - 2);\n    }\n}\n",
		"id": "/EvoSuiteBenchmark/35_corina/src/main/java/corina/site/Country_0Test.java",
		"test_prompt": "// Country_0Test.java\npackage corina.site;\n\nimport corina.gui.Bug;\nimport java.util.Properties;\nimport java.io.IOException;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link Country}.\n* It contains ten unit test cases for the {@link Country#getName(String)} method.\n*/\nclass Country_0Test {"
	},
	{
		"original_code": "// Country.java\npackage corina.site;\n\nimport corina.gui.Bug;\nimport java.util.Properties;\nimport java.io.IOException;\n\n/**\n *   Class for converting between country codes (like \"GR\") and country\n *   names (like \"Greece\").\n *\n *   <p>This uses ISO 3166-1, with the exception that Turkey is \"TU\",\n *   instead of \"TR\" - but \"TU\" isn't anything else, so it doesn't cause\n *   any problems internally.  (It might if another program expected\n *   pure ISO-3166-1.)</p>\n *\n *   <p>On first use, it loads the file\n *   <code>countries.properties</code> (actually, just a resource in the\n *   Corina application's jar).  It is not (yet) localized.</p>\n */\n// TODO: getName() is called a lot; it would probably be much faster (O(1) vs O(n))\n// if it used a hash table.\n// TODO: include small bitmaps of their flags, too; have a getFlag() method\n// (yes, this would be trivial in lisp.  please don't laugh.)\npublic class Country {\n\n    // somebody suggested 2 maps -- good idea?\n    private String code, name;\n\n    private static Country[] countries;\n\n    private static int n;\n\n    static {\n        Properties prop = new Properties();\n        try {\n            ClassLoader cl = corina.site.Country.class.getClassLoader();\n            prop.load(cl.getResource(\"countries.properties\").openStream());\n        } catch (Exception e) {\n            // can't happen\n            Bug.bug(e);\n        }\n        String[] keys = (String[]) prop.keySet().toArray(new String[0]);\n        n = keys.length;\n        countries = new Country[n];\n        for (int i = 0; i < n; i++) {\n            Country c = new Country(keys[i], prop.getProperty(keys[i]));\n            countries[i] = c;\n        }\n    }\n\n    // make a new country, as a (code, name) tuple\n    private Country(String code, String name) {\n        this.code = code;\n        this.name = name;\n    }\n\n    /**\n     *       Given a country code, return its name.\n     *\n     *       @param code the country code, like \"GR\"\n     *       @return its name, like \"Greece\"\n     *       @exception IllegalArgumentException if it's not a known country code\n     */\n    public static String getName(String code) {\n        for (int i = 0; i < n; i++) if (countries[i].code.equals(code))\n            return countries[i].name;\n        throw new IllegalArgumentException();\n    }\n\n    /**\n     *       Given a country name, return its code.\n     *       @param name the country name, like \"Greece\"\n     *       @return its code, like \"GR\"\n     *       @exception IllegalArgumentException if it's not a known country\n     *       name\n     */\n    public static String getCode(String name) {\n        for (int i = 0; i < n; i++) if (countries[i].name.equals(name))\n            return countries[i].code;\n        throw new IllegalArgumentException();\n    }\n\n    /**\n     *       Returns an array of all the country names.\n     *       @return an array of all the country names\n     */\n    public static String[] getAllNames() {\n        String[] result = new String[n];\n        for (int i = 0; i < n; i++) result[i] = countries[i].name;\n        return result;\n    }\n\n    /*\n     * Returns a false country name for a bad country code\n     */\n    public static String badCountry(String code) {\n        return \"<unknown \" + code + \">\";\n    }\n\n    /*\n     * Gets a bad country code from a false country name\n     */\n    public static String badCode(String country) {\n        if (!(country.startsWith(\"<unknown \"))) {\n            return \"<unknown '\" + country + \"'>\";\n        }\n        return country.substring(9, country.length() - 2);\n    }\n}\n",
		"id": "/EvoSuiteBenchmark/35_corina/src/main/java/corina/site/Country_1Test.java",
		"test_prompt": "// Country_1Test.java\npackage corina.site;\n\nimport corina.gui.Bug;\nimport java.util.Properties;\nimport java.io.IOException;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link Country}.\n* It contains ten unit test cases for the {@link Country#getCode(String)} method.\n*/\nclass Country_1Test {"
	},
	{
		"original_code": "// Country.java\npackage corina.site;\n\nimport corina.gui.Bug;\nimport java.util.Properties;\nimport java.io.IOException;\n\n/**\n *   Class for converting between country codes (like \"GR\") and country\n *   names (like \"Greece\").\n *\n *   <p>This uses ISO 3166-1, with the exception that Turkey is \"TU\",\n *   instead of \"TR\" - but \"TU\" isn't anything else, so it doesn't cause\n *   any problems internally.  (It might if another program expected\n *   pure ISO-3166-1.)</p>\n *\n *   <p>On first use, it loads the file\n *   <code>countries.properties</code> (actually, just a resource in the\n *   Corina application's jar).  It is not (yet) localized.</p>\n */\n// TODO: getName() is called a lot; it would probably be much faster (O(1) vs O(n))\n// if it used a hash table.\n// TODO: include small bitmaps of their flags, too; have a getFlag() method\n// (yes, this would be trivial in lisp.  please don't laugh.)\npublic class Country {\n\n    // somebody suggested 2 maps -- good idea?\n    private String code, name;\n\n    private static Country[] countries;\n\n    private static int n;\n\n    static {\n        Properties prop = new Properties();\n        try {\n            ClassLoader cl = corina.site.Country.class.getClassLoader();\n            prop.load(cl.getResource(\"countries.properties\").openStream());\n        } catch (Exception e) {\n            // can't happen\n            Bug.bug(e);\n        }\n        String[] keys = (String[]) prop.keySet().toArray(new String[0]);\n        n = keys.length;\n        countries = new Country[n];\n        for (int i = 0; i < n; i++) {\n            Country c = new Country(keys[i], prop.getProperty(keys[i]));\n            countries[i] = c;\n        }\n    }\n\n    // make a new country, as a (code, name) tuple\n    private Country(String code, String name) {\n        this.code = code;\n        this.name = name;\n    }\n\n    /**\n     *       Given a country code, return its name.\n     *\n     *       @param code the country code, like \"GR\"\n     *       @return its name, like \"Greece\"\n     *       @exception IllegalArgumentException if it's not a known country code\n     */\n    public static String getName(String code) {\n        for (int i = 0; i < n; i++) if (countries[i].code.equals(code))\n            return countries[i].name;\n        throw new IllegalArgumentException();\n    }\n\n    /**\n     *       Given a country name, return its code.\n     *       @param name the country name, like \"Greece\"\n     *       @return its code, like \"GR\"\n     *       @exception IllegalArgumentException if it's not a known country\n     *       name\n     */\n    public static String getCode(String name) {\n        for (int i = 0; i < n; i++) if (countries[i].name.equals(name))\n            return countries[i].code;\n        throw new IllegalArgumentException();\n    }\n\n    /**\n     *       Returns an array of all the country names.\n     *       @return an array of all the country names\n     */\n    public static String[] getAllNames() {\n        String[] result = new String[n];\n        for (int i = 0; i < n; i++) result[i] = countries[i].name;\n        return result;\n    }\n\n    /*\n     * Returns a false country name for a bad country code\n     */\n    public static String badCountry(String code) {\n        return \"<unknown \" + code + \">\";\n    }\n\n    /*\n     * Gets a bad country code from a false country name\n     */\n    public static String badCode(String country) {\n        if (!(country.startsWith(\"<unknown \"))) {\n            return \"<unknown '\" + country + \"'>\";\n        }\n        return country.substring(9, country.length() - 2);\n    }\n}\n",
		"id": "/EvoSuiteBenchmark/35_corina/src/main/java/corina/site/Country_2Test.java",
		"test_prompt": "// Country_2Test.java\npackage corina.site;\n\nimport corina.gui.Bug;\nimport java.util.Properties;\nimport java.io.IOException;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link Country}.\n* It contains ten unit test cases for the {@link Country#getAllNames()} method.\n*/\nclass Country_2Test {"
	},
	{
		"original_code": "// Country.java\npackage corina.site;\n\nimport corina.gui.Bug;\nimport java.util.Properties;\nimport java.io.IOException;\n\n/**\n *   Class for converting between country codes (like \"GR\") and country\n *   names (like \"Greece\").\n *\n *   <p>This uses ISO 3166-1, with the exception that Turkey is \"TU\",\n *   instead of \"TR\" - but \"TU\" isn't anything else, so it doesn't cause\n *   any problems internally.  (It might if another program expected\n *   pure ISO-3166-1.)</p>\n *\n *   <p>On first use, it loads the file\n *   <code>countries.properties</code> (actually, just a resource in the\n *   Corina application's jar).  It is not (yet) localized.</p>\n */\n// TODO: getName() is called a lot; it would probably be much faster (O(1) vs O(n))\n// if it used a hash table.\n// TODO: include small bitmaps of their flags, too; have a getFlag() method\n// (yes, this would be trivial in lisp.  please don't laugh.)\npublic class Country {\n\n    // somebody suggested 2 maps -- good idea?\n    private String code, name;\n\n    private static Country[] countries;\n\n    private static int n;\n\n    static {\n        Properties prop = new Properties();\n        try {\n            ClassLoader cl = corina.site.Country.class.getClassLoader();\n            prop.load(cl.getResource(\"countries.properties\").openStream());\n        } catch (Exception e) {\n            // can't happen\n            Bug.bug(e);\n        }\n        String[] keys = (String[]) prop.keySet().toArray(new String[0]);\n        n = keys.length;\n        countries = new Country[n];\n        for (int i = 0; i < n; i++) {\n            Country c = new Country(keys[i], prop.getProperty(keys[i]));\n            countries[i] = c;\n        }\n    }\n\n    // make a new country, as a (code, name) tuple\n    private Country(String code, String name) {\n        this.code = code;\n        this.name = name;\n    }\n\n    /**\n     *       Given a country code, return its name.\n     *\n     *       @param code the country code, like \"GR\"\n     *       @return its name, like \"Greece\"\n     *       @exception IllegalArgumentException if it's not a known country code\n     */\n    public static String getName(String code) {\n        for (int i = 0; i < n; i++) if (countries[i].code.equals(code))\n            return countries[i].name;\n        throw new IllegalArgumentException();\n    }\n\n    /**\n     *       Given a country name, return its code.\n     *       @param name the country name, like \"Greece\"\n     *       @return its code, like \"GR\"\n     *       @exception IllegalArgumentException if it's not a known country\n     *       name\n     */\n    public static String getCode(String name) {\n        for (int i = 0; i < n; i++) if (countries[i].name.equals(name))\n            return countries[i].code;\n        throw new IllegalArgumentException();\n    }\n\n    /**\n     *       Returns an array of all the country names.\n     *       @return an array of all the country names\n     */\n    public static String[] getAllNames() {\n        String[] result = new String[n];\n        for (int i = 0; i < n; i++) result[i] = countries[i].name;\n        return result;\n    }\n\n    /*\n     * Returns a false country name for a bad country code\n     */\n    public static String badCountry(String code) {\n        return \"<unknown \" + code + \">\";\n    }\n\n    /*\n     * Gets a bad country code from a false country name\n     */\n    public static String badCode(String country) {\n        if (!(country.startsWith(\"<unknown \"))) {\n            return \"<unknown '\" + country + \"'>\";\n        }\n        return country.substring(9, country.length() - 2);\n    }\n}\n",
		"id": "/EvoSuiteBenchmark/35_corina/src/main/java/corina/site/Country_3Test.java",
		"test_prompt": "// Country_3Test.java\npackage corina.site;\n\nimport corina.gui.Bug;\nimport java.util.Properties;\nimport java.io.IOException;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link Country}.\n* It contains ten unit test cases for the {@link Country#badCountry(String)} method.\n*/\nclass Country_3Test {"
	},
	{
		"original_code": "// Country.java\npackage corina.site;\n\nimport corina.gui.Bug;\nimport java.util.Properties;\nimport java.io.IOException;\n\n/**\n *   Class for converting between country codes (like \"GR\") and country\n *   names (like \"Greece\").\n *\n *   <p>This uses ISO 3166-1, with the exception that Turkey is \"TU\",\n *   instead of \"TR\" - but \"TU\" isn't anything else, so it doesn't cause\n *   any problems internally.  (It might if another program expected\n *   pure ISO-3166-1.)</p>\n *\n *   <p>On first use, it loads the file\n *   <code>countries.properties</code> (actually, just a resource in the\n *   Corina application's jar).  It is not (yet) localized.</p>\n */\n// TODO: getName() is called a lot; it would probably be much faster (O(1) vs O(n))\n// if it used a hash table.\n// TODO: include small bitmaps of their flags, too; have a getFlag() method\n// (yes, this would be trivial in lisp.  please don't laugh.)\npublic class Country {\n\n    // somebody suggested 2 maps -- good idea?\n    private String code, name;\n\n    private static Country[] countries;\n\n    private static int n;\n\n    static {\n        Properties prop = new Properties();\n        try {\n            ClassLoader cl = corina.site.Country.class.getClassLoader();\n            prop.load(cl.getResource(\"countries.properties\").openStream());\n        } catch (Exception e) {\n            // can't happen\n            Bug.bug(e);\n        }\n        String[] keys = (String[]) prop.keySet().toArray(new String[0]);\n        n = keys.length;\n        countries = new Country[n];\n        for (int i = 0; i < n; i++) {\n            Country c = new Country(keys[i], prop.getProperty(keys[i]));\n            countries[i] = c;\n        }\n    }\n\n    // make a new country, as a (code, name) tuple\n    private Country(String code, String name) {\n        this.code = code;\n        this.name = name;\n    }\n\n    /**\n     *       Given a country code, return its name.\n     *\n     *       @param code the country code, like \"GR\"\n     *       @return its name, like \"Greece\"\n     *       @exception IllegalArgumentException if it's not a known country code\n     */\n    public static String getName(String code) {\n        for (int i = 0; i < n; i++) if (countries[i].code.equals(code))\n            return countries[i].name;\n        throw new IllegalArgumentException();\n    }\n\n    /**\n     *       Given a country name, return its code.\n     *       @param name the country name, like \"Greece\"\n     *       @return its code, like \"GR\"\n     *       @exception IllegalArgumentException if it's not a known country\n     *       name\n     */\n    public static String getCode(String name) {\n        for (int i = 0; i < n; i++) if (countries[i].name.equals(name))\n            return countries[i].code;\n        throw new IllegalArgumentException();\n    }\n\n    /**\n     *       Returns an array of all the country names.\n     *       @return an array of all the country names\n     */\n    public static String[] getAllNames() {\n        String[] result = new String[n];\n        for (int i = 0; i < n; i++) result[i] = countries[i].name;\n        return result;\n    }\n\n    /*\n     * Returns a false country name for a bad country code\n     */\n    public static String badCountry(String code) {\n        return \"<unknown \" + code + \">\";\n    }\n\n    /*\n     * Gets a bad country code from a false country name\n     */\n    public static String badCode(String country) {\n        if (!(country.startsWith(\"<unknown \"))) {\n            return \"<unknown '\" + country + \"'>\";\n        }\n        return country.substring(9, country.length() - 2);\n    }\n}\n",
		"id": "/EvoSuiteBenchmark/35_corina/src/main/java/corina/site/Country_4Test.java",
		"test_prompt": "// Country_4Test.java\npackage corina.site;\n\nimport corina.gui.Bug;\nimport java.util.Properties;\nimport java.io.IOException;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link Country}.\n* It contains ten unit test cases for the {@link Country#badCode(String)} method.\n*/\nclass Country_4Test {"
	},
	{
		"original_code": "// CountryDialog.java\n//\n// This file is part of Corina.\n//\n// Corina is free software; you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation; either version 2 of the License, or\n// (at your option) any later version.\n//\n// Corina is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Corina; if not, write to the Free Software\n// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n//\n// Copyright 2001 Ken Harris <kbh7@cornell.edu>\n//\npackage corina.site;\n\nimport java.awt.Dialog;\nimport java.awt.Dimension;\nimport java.awt.Frame;\nimport java.awt.event.ActionEvent;\nimport java.awt.event.MouseAdapter;\nimport java.awt.event.MouseEvent;\nimport java.util.Arrays;\nimport javax.swing.AbstractAction;\nimport javax.swing.BorderFactory;\nimport javax.swing.Box;\nimport javax.swing.JButton;\nimport javax.swing.JDialog;\nimport javax.swing.JList;\nimport javax.swing.JPanel;\nimport javax.swing.JScrollPane;\nimport corina.core.App;\nimport corina.gui.Layout;\nimport corina.ui.Builder;\nimport corina.ui.I18n;\nimport corina.util.Center;\nimport corina.util.OKCancel;\n\n/**\n *   Display a dialog allowing the user to choose a country, or \"None\".\n *\n *   @see corina.site.Country\n *\n *   @author Ken Harris &lt;kbh7 <i style=\"color: gray\">at</i> cornell <i style=\"color: gray\">dot</i> edu&gt;\n *   @version $Id: CountryDialog.java,v 1.7 2006/06/20 17:58:19 lucasmo Exp $\n */\npublic class CountryDialog {\n\n    // TODO: why's this have a weird interface?  why not\n    // c = new CountryDialog(parent, oldCode), c.getCode()?\n    // BUG?: if dialogs are hide-on-close by default, does that mean\n    // i'll leak memory if the user brings up a CountryDialog, clicks\n    // the close box, and repeats?\n    private String result;\n\n    private final String original;\n\n    // value[0] -- what to show to mean \"null\".\n    private final static String NONE = \"None\";\n\n    private JDialog getDialog(Dialog parent) {\n        if (parent != null)\n            // true=modal\n            return new JDialog(parent, (App.platform.isMac() ? \"\" : I18n.getText(\"choose_country\")), true);\n        else\n            // true=modal\n            return new JDialog((Frame) null, (App.platform.isMac() ? \"\" : I18n.getText(\"choose_country\")), true);\n    }\n\n    private CountryDialog(Dialog parent, String oldCode) {\n        original = oldCode;\n        // cancel just disposes, so set this now\n        result = original;\n        JButton cancel = Builder.makeButton(\"cancel\");\n        JButton ok = Builder.makeButton(\"ok\");\n        // make list of all countries, sorted;\n        // (assumes they're Capitalized Properly, else the\n        // sorting order will look weird.)\n        String[] names = Country.getAllNames();\n        Arrays.sort(names);\n        // prepend \"None\". (#'cons in 4 lines, 1 loop, double the memory!)\n        String[] countries = new String[names.length + 1];\n        for (int i = 0; i < names.length; i++) countries[i + 1] = names[i];\n        countries[0] = NONE;\n        // make jlist, and select old value\n        final JList countryList = new JList(countries);\n        int target = 0;\n        if (oldCode == null) {\n            countryList.setSelectedIndex(0);\n        } else {\n            String oldName = Country.getName(oldCode);\n            for (int i = 0; i < names.length; i++) {\n                if (oldName.equals(names[i])) {\n                    countryList.setSelectedIndex(i + 1);\n                    target = i + 1;\n                    // we'll call ensureIndexIsVisible on |target| later\n                    break;\n                }\n            }\n        }\n        // add \"type-to-select\" listener?  well, i can't find it in\n        // the mac HIG, and i think mac-style is different from\n        // win32-style, anyway.  plus you can already use the arrows\n        // and page up/down and home/end, so i don't think it's worth\n        // my implementation time.  (if you want to add it, go ahead.)\n        // create dialog and lay out components\n        final JDialog d = getDialog(parent);\n        // REFACTOR: use vertical margins on n/s instead of wrapping in box layouts?\n        JPanel n = Layout.boxLayoutY(Layout.flowLayoutL(I18n.getText(\"choose_a_country\")), Box.createVerticalStrut(16));\n        JPanel s = Layout.boxLayoutY(Box.createVerticalStrut(18), Layout.buttonLayout(cancel, ok));\n        JPanel p = Layout.borderLayout(n, null, new JScrollPane(countryList), null, s);\n        p.setBorder(BorderFactory.createEmptyBorder(12, 20, 20, 20));\n        d.setContentPane(p);\n        // cancel\n        cancel.addActionListener(new AbstractAction() {\n\n            public void actionPerformed(ActionEvent e) {\n                d.dispose();\n            }\n        });\n        // ok\n        ok.addActionListener(new AbstractAction() {\n\n            public void actionPerformed(ActionEvent e) {\n                if (countryList.getSelectedIndex() != 0) {\n                    // figure out code from name, store in result\n                    String name = (String) countryList.getSelectedValue();\n                    try {\n                        result = Country.getCode(name);\n                    } catch (IllegalArgumentException iee) {\n                        result = Country.badCode(name);\n                    }\n                }\n                d.dispose();\n            }\n        });\n        // double-click = ok\n        countryList.addMouseListener(new MouseAdapter() {\n\n            public void mouseClicked(MouseEvent e) {\n                if (e.getClickCount() == 2) {\n                    // is it null?\n                    int index = countryList.locationToIndex(e.getPoint());\n                    if (index == 0) {\n                        result = null;\n                        d.dispose();\n                        return;\n                    }\n                    // get name, lookup code, and close\n                    String name = (String) countryList.getSelectedValue();\n                    try {\n                        result = Country.getCode(name);\n                    } catch (IllegalArgumentException iee) {\n                        result = Country.badCode(name);\n                    }\n                    d.dispose();\n                }\n            }\n        });\n        // handle return/escape\n        OKCancel.addKeyboardDefaults(ok);\n        // set size: after pack(), increase the height, so users\n        // don't have to scroll as much.\n        // TODO: make sure this isn't taller than the screen!\n        d.pack();\n        Dimension size = d.getSize();\n        d.setSize(size.width, (int) (size.height * 1.5));\n        if (parent != null)\n            Center.center(d, parent);\n        else\n            Center.center(d);\n        // scroll to the current value, if it's not visible.\n        countryList.ensureIndexIsVisible(target);\n        // focus\n        // (does this help at all?)\n        countryList.requestFocus();\n        // whew, done.  (this blocks until dispose())\n        d.show();\n    }\n\n    /**\n     * \t Show the dialog, and return the country code the user chose.\n     * \t (If the user cancels, returns the original code.)\n     *\n     * \t @param parent the parent component (dialog) for this dialog\n     * \t @param oldCode the previous code; in the list, this is\n     * \t initially selected\n     * \t @return the new code, or null, if the user chose \"None\"\n     */\n    public static String showDialog(Dialog parent, String oldCode) {\n        CountryDialog c = new CountryDialog(parent, oldCode);\n        return c.result;\n    }\n}\n",
		"id": "/EvoSuiteBenchmark/35_corina/src/main/java/corina/site/CountryDialog.java",
		"test_prompt": "// CountryDialogTest.java\n// This file is part of Corina.\n//\n// Corina is free software; you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation; either version 2 of the License, or\n// (at your option) any later version.\n//\n// Corina is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Corina; if not, write to the Free Software\n// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n//\n// Copyright 2001 Ken Harris <kbh7@cornell.edu>\n//\npackage corina.site;\n\nimport java.awt.Dialog;\nimport java.awt.Dimension;\nimport java.awt.Frame;\nimport java.awt.event.ActionEvent;\nimport java.awt.event.MouseAdapter;\nimport java.awt.event.MouseEvent;\nimport java.util.Arrays;\nimport javax.swing.AbstractAction;\nimport javax.swing.BorderFactory;\nimport javax.swing.Box;\nimport javax.swing.JButton;\nimport javax.swing.JDialog;\nimport javax.swing.JList;\nimport javax.swing.JPanel;\nimport javax.swing.JScrollPane;\nimport corina.core.App;\nimport corina.gui.Layout;\nimport corina.ui.Builder;\nimport corina.ui.I18n;\nimport corina.util.Center;\nimport corina.util.OKCancel;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link CountryDialog}.\n* It contains ten unit test cases for the {@link CountryDialog#showDialog(Dialog, String)} method.\n*/\nclass CountryDialogTest {"
	},
	{
		"original_code": "// SiteDB.java\n//\n// This file is part of Corina.\n//\n// Corina is free software; you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation; either version 2 of the License, or\n// (at your option) any later version.\n//\n// Corina is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Corina; if not, write to the Free Software\n// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n//\n// Copyright 2001 Ken Harris <kbh7@cornell.edu>\n//\npackage corina.site;\n\nimport java.awt.print.Printable;\nimport java.io.BufferedWriter;\nimport java.io.File;\nimport java.io.FileInputStream;\nimport java.io.FileNotFoundException;\nimport java.io.FileOutputStream;\nimport java.io.FileWriter;\nimport java.io.IOException;\nimport java.io.InputStream;\nimport java.io.InputStreamReader;\nimport java.io.OutputStream;\nimport java.io.OutputStreamWriter;\nimport java.io.Reader;\nimport java.io.Writer;\nimport java.text.DateFormat;\nimport java.text.MessageFormat;\nimport java.text.SimpleDateFormat;\nimport java.util.ArrayList;\nimport java.util.Arrays;\nimport java.util.Date;\nimport java.util.HashSet;\nimport java.util.List;\nimport java.util.Set;\nimport javax.swing.JOptionPane;\nimport org.xml.sax.Attributes;\nimport org.xml.sax.InputSource;\nimport org.xml.sax.SAXException;\nimport org.xml.sax.XMLReader;\nimport org.xml.sax.helpers.DefaultHandler;\nimport org.xml.sax.helpers.XMLReaderFactory;\nimport corina.Sample;\nimport corina.core.App;\nimport corina.ui.Alert;\nimport corina.ui.I18n;\n\n/**\n * A database of sites.\n *\n * @author Ken Harris &lt;kbh7 <i style=\"color: gray\">at</i> cornell <i style=\"color: gray\">dot</i> edu&gt;\n * @version $Id: SiteDB.java,v 1.15 2006/06/20 18:29:27 lucasmo Exp $\n */\n/*\n * TODO: -- move to SiteFile, extends SiteStorage,\n */\npublic class // implements PrintableDocument {\nSiteDB {\n\n    // make it able to import/export/append stuff?\n    // TODO: call the file \"Corina Sites\", not \"Site DB\"\n    // TODO: add undo support.  this will probably consist of 2\n    // stacks, with an inner class Undo (field, oldval, newval),\n    // and undo()/redo(), canUndo()/canRedo() methods.\n    // (new SiteList(SiteDB) will actually bind them to accel-Z, accel-shift-Z.)\n    // TODO: move all i/o to its own (non-public) class, like\n    // SiteDBFile.  that's about 50% of the code in here, and will\n    // make things easier to work with, i presume.\n    // list of the sites -- use a different data struct? (private?)\n    public List sites = null;\n\n    private static SiteDB db = null;\n\n    // returns null on failure\n    public static SiteDB getSiteDB() {\n        if (db == null) {\n            db = new SiteDB();\n            db.sites = new ArrayList();\n            try {\n                db.loadDB();\n            } catch (IOException ioe) {\n                // !!! this is an important one.  why don't we throw this?\n                System.out.println(\"ioe! -- \" + ioe);\n                ioe.printStackTrace();\n                db.sites = null;\n            }\n            // this debug saves after loading.\n            /*\n\t\t\tfinally {\n\t\t\t\ttry {\n\t\t\t\t\tdb.saveDB();\n\t\t\t\t} catch (IOException ioe) {\n\t\t\t\t\tioe.printStackTrace();\n\t\t\t\t}\n\t\t\t}\n\t\t\t*/\n        }\n        // return it\n        return db;\n    }\n\n    /* Return true on a successful save! */\n    public boolean save() {\n        System.out.println(\"Saving Site DB!\");\n        try {\n            saveDB();\n            return true;\n        } catch (IOException ioe) {\n            System.out.println(\"trying to save db, ioe=\" + ioe);\n            ioe.printStackTrace();\n        }\n        return false;\n    }\n\n    // this causes all sorts of failures if corina.dir.data==null!\n    // OBSOLETE: moved to SiteDBFile.getDBFilename() -- only used in this file\n    // for watching for file changes, which should either be moved to SiteDBFile,\n    // or at least use SiteDBFile.getFilename().\n    private static String getDBFilename() {\n        return App.prefs.getPref(\"corina.dir.data\") + File.separator + \"Site DB\";\n    }\n\n    private void loadDB() throws IOException {\n        System.out.println(\"reloading database\");\n        try {\n            boolean lock = getLock(getDBFilename());\n            if (!lock) {\n                throw new IOException(\"Could not lock file for loading\");\n            }\n            // create XML reader\n            XMLReader xr = XMLReaderFactory.createXMLReader();\n            // i'm just updating myself now! -- don't worry, after\n            // loadDB() returns, the events get fired (up one level).\n            selfUpdating = true;\n            // set it up as a sitedb loader\n            SiteDBLoader loader = new SiteDBLoader();\n            xr.setContentHandler(loader);\n            xr.setErrorHandler(loader);\n            // load it -- use FileInputStream, InputStreamReader to force UTF-8\n            // RACE: lock file during entire load!\n            modDate = new File(getDBFilename()).lastModified();\n            db.startWatcher();\n            InputStream is = new FileInputStream(getDBFilename());\n            Reader r = new InputStreamReader(is, \"UTF8\");\n            xr.parse(new InputSource(r));\n            // done updating\n            selfUpdating = false;\n            // let it go\n            // FIXME: make this final?  see same call in saveDB() for discussion\n            r.close();\n            Lock.release(getDBFilename());\n        } catch (SAXException se) {\n            // ack! don't keep the lock on an error!\n            selfUpdating = false;\n            Lock.release(getDBFilename());\n            throw new IOException(se.getMessage());\n        } catch (IOException ioe) {\n            selfUpdating = false;\n            Alert.error(\"Error loading site database\", \"There was an error while loading the site database.\\n\" + \"Most likely this means your data directory is set improperly.\\n\" + \"Various corina functions will NOT work without a site database.\\n\\n\" + \"Error: \" + ioe.toString());\n            throw ioe;\n        }\n    }\n\n    // save the sitedb to disk -- not used yet!\n    // FIXME: lock file during entire save, and set |modDate|\n    // TODO: what happens if i throw an ioe?  restore a backup?\n    private void saveDB() throws IOException {\n        boolean lock = getLock(getDBFilename());\n        if (!lock) {\n            throw new IOException(\"Could not lock file for saving\");\n        }\n        // this is a sanity check. shouldn't happen.\n        if (selfUpdating) {\n            throw new IOException(\"SELF UPDATING ALREADY, DURING SAVE??\");\n        }\n        selfUpdating = true;\n        // use utf-8!\n        File outfile = new File(getDBFilename() + \" - Saving\");\n        OutputStream os = new FileOutputStream(outfile);\n        Writer wr = new OutputStreamWriter(os, \"UTF8\");\n        BufferedWriter w = new BufferedWriter(wr);\n        try {\n            w.write(\"<?xml version=\\\"1.0\\\" encoding=\\\"utf-8\\\"?>\");\n            w.newLine();\n            w.write(\"<!--\");\n            w.newLine();\n            w.write(\" WARNING WARNING WARNING WARNING WARNING WARNING \");\n            w.newLine();\n            w.newLine();\n            w.write(\"   This file is NOT MANUALLY EDITABLE. Modifying this file in a text editor such as notepad\");\n            w.newLine();\n            w.write(\"   will destroy the internationalized text contained within.\");\n            w.newLine();\n            w.write(\"   DO NOT EDIT UNLESS YOU ARE COMPLETELY SURE YOU KNOW WHAT YOU ARE DOING\");\n            w.newLine();\n            w.newLine();\n            w.write(\" WARNING WARNING WARNING WARNING WARNING WARNING \");\n            w.newLine();\n            w.newLine();\n            w.write(\" File automatically generated by Corina, the Cornell Tree Ring Analysis system.\");\n            w.newLine();\n            w.write(\" \" + nameCreator());\n            w.newLine();\n            w.write(\"-->\");\n            w.newLine();\n            w.newLine();\n            w.write(\"<sitedb>\");\n            w.newLine();\n            w.newLine();\n            // (loop for s in sites do (write w (site-to-xml s)))\n            for (int i = 0; i < sites.size(); i++) {\n                Site s = (Site) sites.get(i);\n                w.write(s.toXML());\n                w.newLine();\n            }\n            w.newLine();\n            w.write(\"</sitedb>\");\n            w.newLine();\n        } catch (Exception e) {\n            // an error.. writing the file? ack!\n            // clean up and bail!\n            outfile.delete();\n            selfUpdating = false;\n            Lock.release(getDBFilename());\n            if (e instanceof IOException)\n                throw (IOException) e;\n            else\n                e.printStackTrace();\n        } finally {\n            try {\n                w.close();\n            } catch (IOException ioe) {\n                // an error.. writing the file? ack!\n                // clean up and bail!\n                outfile.delete();\n                selfUpdating = false;\n                Lock.release(getDBFilename());\n                throw ioe;\n            }\n        }\n        // only after complete success do we rename the file.\n        File realoutfile = new File(getDBFilename());\n        // first, move the Site DB to Site DB - Old YYYYMMDD HHMMSS\n        Date now = new Date();\n        SimpleDateFormat dFormat = new SimpleDateFormat(\"yyyyMMdd HHmmss\");\n        File oldoutfile = new File(getDBFilename() + \" - Old \" + dFormat.format(now));\n        realoutfile.renameTo(oldoutfile);\n        // then, since realoutfile changed, reinit it...\n        realoutfile = new File(getDBFilename());\n        // and finally, move the new sitedb to the real sitedb.\n        if (outfile.renameTo(realoutfile) == false) {\n            System.out.println(\"Couldn't rename siteDB! I should handle this better!\");\n        }\n        // before you unlock it, update |modDate|, so it doesn't look\n        // like it was changed by somebody else.\n        modDate = new File(getDBFilename()).lastModified();\n        selfUpdating = false;\n        // let it go\n        // FIXME: should this be finally?  or would that cause problems, if i don't restore a backup?\n        Lock.release(getDBFilename());\n    }\n\n    // XML loader ------------------------------------------------------------\n    private class SiteDBLoader extends DefaultHandler {\n\n        private String state = \"\";\n\n        private String data = \"\";\n\n        private Site site = null;\n\n        public void startElement(String uri, String name, String qName, Attributes atts) {\n            if (name.equals(\"site\"))\n                site = new Site();\n            else\n                state = name;\n        }\n\n        public void endElement(String uri, String name, String qName) {\n            if (name.equals(\"site\")) {\n                sites.add(site);\n                site = null;\n            } else {\n                // ignore whitespace\n                data = data.trim();\n                if (data.length() == 0)\n                    return;\n                // ignore if site==null, meaning tag outside of <site>\n                if (site == null)\n                    return;\n                // parse -- use hashtable?\n                if (state.equals(\"country\"))\n                    site.setCountry(data);\n                else if (state.equals(\"code\"))\n                    site.setCode(data);\n                else if (state.equals(\"name\"))\n                    site.setName(data);\n                else if (state.equals(\"id\"))\n                    site.setId(data);\n                else if (state.equals(\"species\"))\n                    site.setSpecies(data);\n                else if (state.equals(\"type\")) {\n                    site.setTypeString(data);\n                } else if (state.equals(\"filename\")) {\n                    // shouldn't this be \"folder\"?\n                    // yes, it should. setFileName converts to folder for compatibility with older SiteDBs.\n                    site.setFilename(data);\n                } else if (state.equals(\"folder\")) {\n                    site.setFolder(data);\n                } else if (state.equals(\"location\")) {\n                    site.setLocation(new Location(data));\n                } else if (state.equals(\"comments\")) {\n                    site.setComments(data);\n                } else {\n                    // else ... what?\n                    return;\n                }\n                // something matched => reset data\n                data = \"\";\n            }\n        }\n\n        public void characters(char[] ch, int start, int length) {\n            // stringify\n            data += new String(ch, start, length);\n        }\n    }\n\n    // -----------------------------------------------------------------------------\n    // query functions -- only simple ones here, complex sql-selects\n    // and stuff can go in their own class.\n    public Site getSite(String code) throws SiteNotFoundException {\n        // return the site with code |code|\n        for (int i = 0; i < sites.size(); i++) {\n            Site s = (Site) sites.get(i);\n            if (s.getCode().equals(code))\n                return s;\n        }\n        throw new SiteNotFoundException();\n    }\n\n    private String folderToLocalPath(String folder) {\n        String s = folder.replace(\":\", File.separator);\n        return App.prefs.getPref(\"corina.dir.data\") + File.separator + s;\n    }\n\n    public Site getSite(File folder) throws SiteNotFoundException {\n        // return the site for folder |folder|\n        for (int i = 0; i < sites.size(); i++) {\n            Site s = (Site) sites.get(i);\n            if (matchesFilename(folder.getPath(), s))\n                return s;\n        }\n        throw new SiteNotFoundException();\n    }\n\n    public Site getSite(Sample sample) throws SiteNotFoundException {\n        String filename = (String) sample.meta.get(\"filename\");\n        // make sure it's been saved\n        if (filename == null)\n            throw new IllegalArgumentException();\n        // hack: no sites\n        if (sites == null)\n            throw new SiteNotFoundException();\n        // look through the database for that filename\n        for (int i = 0; i < sites.size(); i++) {\n            Site s = (Site) sites.get(i);\n            if (s.getFolder() == null)\n                continue;\n            // (i think this might not always work, depending on OS, rel/abs filenames, etc.\n            // -- no, it seems to...)\n            if (matchesFilename(filename, s))\n                return s;\n        }\n        throw new SiteNotFoundException();\n    }\n\n    // returns true, iff |filename| represents a file in |site|\n    private boolean matchesFilename(String filename, Site site) {\n        String folder = site.getFolder();\n        if (folder == null)\n            return false;\n        // convert our folder to contain our local path.\n        folder = folderToLocalPath(folder).toUpperCase();\n        // chop off any trailing separators\n        if (folder.endsWith(File.separator))\n            folder = folder.substring(0, folder.length() - File.separator.length());\n        // find the last separator\n        if (folder.lastIndexOf(File.separator) != -1)\n            folder = folder.substring(folder.lastIndexOf(File.separator) + 1, folder.length());\n        // find the last separator, but do the same with the file\n        if (filename.lastIndexOf(File.separator) != -1)\n            filename = filename.substring(filename.lastIndexOf(File.separator) + 1, filename.length());\n        return filename.toUpperCase().startsWith(folder);\n        //||\n        //  filename.startsWith(App.prefs.getPref(\"corina.dir.data\") + File.separator + folder) ||\n        //  filename.startsWith(App.prefs.getPref(\"corina.dir.data\") + folder);\n        // this matches if (1) folder is relative,\n        //                 (2) absolute and dir.data has no file.sep, or\n        //                 (3) absolute and dir.data ends with file.sep\n        // FIXME: folder will now always be relative to location of sitedb file\n    }\n\n    // is this still used?\n    public Site getSite(Location l) throws SiteNotFoundException {\n        // return the site at |l|.  if there's more than one, return\n        // an arbitrary one.\n        for (int i = 0; i < sites.size(); i++) {\n            Site s = (Site) sites.get(i);\n            if (s.getLocation() != null && s.getLocation().equals(l))\n                return s;\n        }\n        // none was there, but let's look for something nearby.\n        for (int i = 0; i < sites.size(); i++) {\n            Site s = (Site) sites.get(i);\n            if (s.getLocation() == null)\n                // wha?\n                continue;\n            if (s.getLocation().isNear(l, 10))\n                return s;\n        }\n        throw new SiteNotFoundException();\n    }\n\n    // ---------------------------------------------------------------------------\n    // (loop for s in +sitedb+ when (eq loc (site-location s)) collect s)\n    public Site[] getSitesAt(Location loc) {\n        List output = new ArrayList();\n        for (int i = 0; i < sites.size(); i++) {\n            Site s = (Site) sites.get(i);\n            if (loc.equals(s.getLocation()))\n                output.add(s);\n        }\n        return (Site[]) output.toArray(new Site[0]);\n    }\n\n    // return an array of the 2-letter codes of all countries represented in the sitedb\n    public String[] getCountries() {\n        int n = sites.size();\n        Set countries = new HashSet();\n        for (int i = 0; i < n; i++) {\n            Site s = (Site) sites.get(i);\n            countries.add(s.getCountry());\n        }\n        return (String[]) countries.toArray(new String[0]);\n    }\n\n    // return a list containing all of the site names\n    public List getSiteNames() {\n        List names = new ArrayList();\n        for (int i = 0; i < sites.size(); i++) {\n            String name = ((Site) sites.get(i)).getName();\n            if (name != null && !names.contains(name))\n                names.add(name);\n        }\n        return names;\n    }\n\n    // -----------------------------------------------------------------------------\n    // demeter, again.  (SELECT country FROM sites GROUP BY COUNT(?))\n    public List getCountriesInOrder() {\n        // get countries\n        String[] cs = getCountries();\n        // (number of unique countries)\n        int n = cs.length;\n        // put in array of tuples\n        Tuple[] tuple = new Tuple[n];\n        for (int i = 0; i < n; i++) tuple[i] = new Tuple(cs[i]);\n        // loop through sites, counting frequency\n        for (int i = 0; i < sites.size(); i++) {\n            // country\n            String c = ((Site) sites.get(i)).getCountry();\n            // look up in list, and count it\n            for (int j = 0; j < tuple.length; j++) if (tuple[j].name.equals(c))\n                tuple[j].freq++;\n        }\n        // sort (freq, then name)\n        Arrays.sort(tuple);\n        // copy names to array, and return\n        List l = new ArrayList();\n        for (int i = 0; i < n; i++) l.add(tuple[i].name);\n        return l;\n    }\n\n    private static class Tuple implements Comparable {\n\n        String name;\n\n        int freq = 0;\n\n        Tuple(String name) {\n            this.name = name;\n        }\n\n        public int compareTo(Object o2) {\n            Tuple t2 = (Tuple) o2;\n            if (freq < t2.freq)\n                return +1;\n            else if (freq > t2.freq)\n                return -1;\n            else\n                return Country.getName(name).compareTo(Country.getName(t2.name));\n        }\n    }\n\n    // -----------------------------------------------------------------------------\n    // add feature: dump the entire database into HTML.\n    public void toHTML(String filename) throws IOException {\n        BufferedWriter w = new BufferedWriter(new FileWriter(filename));\n        // WRITE ME\n        // strategy: make it look similar to what's on the wall now\n        // (embed a stylesheet?  sure, not many of these printed)\n        // <h2>Turkey</h2>\n        // for each country, a table:\n        // code | title | epoch | species\n        // => use Site.toHTML() for each site.\n        // (what sort of database integration will this end up with?\n        // number of samples, longest sample, etc. would be really\n        // neat)\n        // print = { print header, print EACH country, print footer }\n        // print country = { print header, print EACH site, print footer }\n        // print site = { ... about 7 lines ... }\n        // -- embed stylesheet in header; there won't be multiple sitedb.html's floating around,\n        // so there's no reason to complicate things by keeping it separate.\n        // (UNLESS that's the only way to switch on media -- ???)\n        w.close();\n    }\n\n    /*\n\t // ----\n\t // event handling -- stolen from Sample.java\n\t // REFACTOR: extract event handling to external (abstract) class?\n\t private Vector listeners = new Vector();\n\n\t public synchronized void addSiteDBListener(SiteDBListener l) {\n\t if (!listeners.contains(l))\n\t listeners.add(l);\n\t }\n\t public synchronized void removeSiteDBListener(SiteDBListener l) {\n\t listeners.remove(l);\n\t }\n\n\t private void fireSiteEvent(String method, Site source) {\n\t // is this me?  then drop it.\n\t if (selfUpdating)\n\t return;\n\n\t // alert all listeners\n\t Vector l;\n\t synchronized (this) {\n\t l = (Vector) listeners.clone();\n\t }\n\n\t int size = l.size();\n\n\t if (size == 0)\n\t return;\n\n\t SiteEvent e = new SiteEvent(source);\n\n\t try {\n\t Class types[] = new Class[] { SiteEvent.class };\n\t Method m = SiteDBListener.class.getMethod(method, types);\n\t Object args[] = new Object[] { e };\n\n\t for (int i=0; i<size; i++) {\n\t SiteDBListener listener = (SiteDBListener) l.elementAt(i);\n\n\t // this is like \"listener.method(e)\", though it's not terribly elegant.\n\t m.invoke(listener, args);\n\t }\n\t } catch (Exception ex) {\n\t // just ignore them all... (?)\n\t }\n\n\t // when you're done telling everybody in this JVM, update the\n\t // disk file so other people can find out.\n\t save();\n\t }\n\n\t public void fireSiteMoved(Site source) { fireSiteEvent(\"siteMoved\", source); }\n\t public void fireSiteNameChanged(Site source) { fireSiteEvent(\"siteNameChanged\", source); }\n\t public void fireSiteCodeChanged(Site source) { fireSiteEvent(\"siteCodeChanged\", source); }\n\t public void fireSiteIDChanged(Site source) { fireSiteEvent(\"siteIDChanged\", source); }\n\t public void fireSiteCommentsChanged(Site source) { fireSiteEvent(\"siteCommentsChanged\", source); }\n\t public void fireSiteCountryChanged(Site source) { fireSiteEvent(\"siteCountryChanged\", source); }\n\t */\n    /*\n\t NOTICE!  when you add a site event, it needs to be added to\n\t -- SiteDBListener, SiteDBAdapter\n\t -- SiteDB (new fireXXX() method)\n\t -- SiteDB (call save() in its own listener)\n\t */\n    // ------------------------------------------------------\n    // keep disk updated with my copy\n    // BUG: don't use a listener, because this means when somebody\n    // else changed it, i'll save it again, whis downright wrong.\n    private static boolean selfUpdating = false;\n\n    // ------------------------------------------------------\n    // keep disk updated with my copy\n    private long modDate;\n\n    private void startWatcher() {\n        // FIXME: if a method, make sure i get called only once\n        // FIXME: run at low priority\n        Runnable r = new Runnable() {\n\n            public void run() {\n                // file to check\n                File f = new File(getDBFilename());\n                for (; ; ) {\n                    if (selfUpdating) {\n                        // sleep 1sec, don't load! causes corruption!\n                        try {\n                            Thread.sleep(1000);\n                        } catch (InterruptedException ie) {\n                        }\n                        continue;\n                    }\n                    // check moddate on disk file\n                    long diskModDate = f.lastModified();\n                    // has it been changed?  better re-load.\n                    if (diskModDate > modDate) {\n                        // erase existing database\n                        db.sites = new ArrayList();\n                        // PERF: most of the database will be the same ... way to re-use\n                        // old database, instead of letting it all get gc'd?\n                        // load fresh\n                        try {\n                            db.loadDB();\n                        } catch (IOException ioe) {\n                            System.out.println(\"ioe -- \" + ioe);\n                            ioe.printStackTrace();\n                        }\n                        // FIXME: need new event model\n                        // -- listeners listen on the database, not one site, so deal with it\n                        // -- sites need an id number (but users should never see it)\n                        // -- a site-db-changed-event must contain:\n                        // ---- a type of event (reloaded, site-added, site-removed, site-changed)\n                        // ---- if it's site-added or site-removed, which site(s) were affected\n                        // ---- if it was a site-changed event, which site(s) and fields were affected\n                        System.out.println(\"throwing load events\");\n                        // DESIGN: how do i say \"everything changed!\"?\n                        // if the file changed, i have no idea what to fire!\n                        // (fire everything?)\n                        // selfUpdating = true;\n                        for (int i = 0; i < db.sites.size(); i++) {\n                            Site s = (Site) db.sites.get(i);\n                            // WAS: db.fireSiteNameChanged(s);\n                        }\n                        // db.fireSiteNameChanged((Site) db.sites.get(0)); // how about just 1?\n                        // selfUpdating = false;\n                    }\n                    // sleep 10sec\n                    try {\n                        Thread.sleep(1 * 1000);\n                    } catch (InterruptedException ie) {\n                        // ignore\n                    }\n                }\n            }\n        };\n        Thread t = new Thread(r);\n        t.start();\n    }\n\n    // --------------------------------------------------\n    // printing\n    // FIXME: move to PrintableDocument method of MapFrame\n    public Printable print() {\n        return new SitePrinter(sites);\n    }\n\n    private static String nameCreator() {\n        Date date = new Date();\n        String dateString = DateFormat.getDateInstance().format(date);\n        String timeString = DateFormat.getTimeInstance().format(date);\n        Object[] args = new Object[] { System.getProperty(\"user.name\", \"(unknown user)\"), dateString, timeString };\n        String byline = MessageFormat.format(I18n.getText(\"saved_by\"), args);\n        return byline;\n    }\n\n    private boolean getLock(String fullFilename) {\n        // lock the file\n        boolean lock = false;\n        while (!lock) {\n            lock = Lock.acquire(fullFilename);\n            if (!lock) {\n                String[] labels = { \"Try again\", \"Delete it\", \"Cancel\" };\n                int ret = JOptionPane.showOptionDialog(null, \"The site database appears to be locked. If nobody else is Using Corina,\\n\" + \"it's likely that this is a stale lock.\" + \"What should I do?\\n\", \"Can't access site database\", JOptionPane.YES_NO_CANCEL_OPTION, JOptionPane.QUESTION_MESSAGE, null, labels, labels[0]);\n                switch(ret) {\n                    case 0:\n                        continue;\n                    case 1:\n                        Lock.release(fullFilename);\n                        continue;\n                    case 2:\n                        return false;\n                }\n            }\n        }\n        return true;\n    }\n}\n",
		"id": "/EvoSuiteBenchmark/35_corina/src/main/java/corina/site/SiteDB_0Test.java",
		"test_prompt": "// SiteDB_0Test.java\n// This file is part of Corina.\n//\n// Corina is free software; you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation; either version 2 of the License, or\n// (at your option) any later version.\n//\n// Corina is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Corina; if not, write to the Free Software\n// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n//\n// Copyright 2001 Ken Harris <kbh7@cornell.edu>\n//\npackage corina.site;\n\nimport java.awt.print.Printable;\nimport java.io.BufferedWriter;\nimport java.io.File;\nimport java.io.FileInputStream;\nimport java.io.FileNotFoundException;\nimport java.io.FileOutputStream;\nimport java.io.FileWriter;\nimport java.io.IOException;\nimport java.io.InputStream;\nimport java.io.InputStreamReader;\nimport java.io.OutputStream;\nimport java.io.OutputStreamWriter;\nimport java.io.Reader;\nimport java.io.Writer;\nimport java.text.DateFormat;\nimport java.text.MessageFormat;\nimport java.text.SimpleDateFormat;\nimport java.util.ArrayList;\nimport java.util.Arrays;\nimport java.util.Date;\nimport java.util.HashSet;\nimport java.util.List;\nimport java.util.Set;\nimport javax.swing.JOptionPane;\nimport org.xml.sax.Attributes;\nimport org.xml.sax.InputSource;\nimport org.xml.sax.SAXException;\nimport org.xml.sax.XMLReader;\nimport org.xml.sax.helpers.DefaultHandler;\nimport org.xml.sax.helpers.XMLReaderFactory;\nimport corina.Sample;\nimport corina.core.App;\nimport corina.ui.Alert;\nimport corina.ui.I18n;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link SiteDB}.\n* It contains ten unit test cases for the {@link SiteDB#getSiteDB()} method.\n*/\nclass SiteDB_0Test {"
	},
	{
		"original_code": "// SiteDB.java\n//\n// This file is part of Corina.\n//\n// Corina is free software; you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation; either version 2 of the License, or\n// (at your option) any later version.\n//\n// Corina is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Corina; if not, write to the Free Software\n// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n//\n// Copyright 2001 Ken Harris <kbh7@cornell.edu>\n//\npackage corina.site;\n\nimport java.awt.print.Printable;\nimport java.io.BufferedWriter;\nimport java.io.File;\nimport java.io.FileInputStream;\nimport java.io.FileNotFoundException;\nimport java.io.FileOutputStream;\nimport java.io.FileWriter;\nimport java.io.IOException;\nimport java.io.InputStream;\nimport java.io.InputStreamReader;\nimport java.io.OutputStream;\nimport java.io.OutputStreamWriter;\nimport java.io.Reader;\nimport java.io.Writer;\nimport java.text.DateFormat;\nimport java.text.MessageFormat;\nimport java.text.SimpleDateFormat;\nimport java.util.ArrayList;\nimport java.util.Arrays;\nimport java.util.Date;\nimport java.util.HashSet;\nimport java.util.List;\nimport java.util.Set;\nimport javax.swing.JOptionPane;\nimport org.xml.sax.Attributes;\nimport org.xml.sax.InputSource;\nimport org.xml.sax.SAXException;\nimport org.xml.sax.XMLReader;\nimport org.xml.sax.helpers.DefaultHandler;\nimport org.xml.sax.helpers.XMLReaderFactory;\nimport corina.Sample;\nimport corina.core.App;\nimport corina.ui.Alert;\nimport corina.ui.I18n;\n\n/**\n * A database of sites.\n *\n * @author Ken Harris &lt;kbh7 <i style=\"color: gray\">at</i> cornell <i style=\"color: gray\">dot</i> edu&gt;\n * @version $Id: SiteDB.java,v 1.15 2006/06/20 18:29:27 lucasmo Exp $\n */\n/*\n * TODO: -- move to SiteFile, extends SiteStorage,\n */\npublic class // implements PrintableDocument {\nSiteDB {\n\n    // make it able to import/export/append stuff?\n    // TODO: call the file \"Corina Sites\", not \"Site DB\"\n    // TODO: add undo support.  this will probably consist of 2\n    // stacks, with an inner class Undo (field, oldval, newval),\n    // and undo()/redo(), canUndo()/canRedo() methods.\n    // (new SiteList(SiteDB) will actually bind them to accel-Z, accel-shift-Z.)\n    // TODO: move all i/o to its own (non-public) class, like\n    // SiteDBFile.  that's about 50% of the code in here, and will\n    // make things easier to work with, i presume.\n    // list of the sites -- use a different data struct? (private?)\n    public List sites = null;\n\n    private static SiteDB db = null;\n\n    // returns null on failure\n    public static SiteDB getSiteDB() {\n        if (db == null) {\n            db = new SiteDB();\n            db.sites = new ArrayList();\n            try {\n                db.loadDB();\n            } catch (IOException ioe) {\n                // !!! this is an important one.  why don't we throw this?\n                System.out.println(\"ioe! -- \" + ioe);\n                ioe.printStackTrace();\n                db.sites = null;\n            }\n            // this debug saves after loading.\n            /*\n\t\t\tfinally {\n\t\t\t\ttry {\n\t\t\t\t\tdb.saveDB();\n\t\t\t\t} catch (IOException ioe) {\n\t\t\t\t\tioe.printStackTrace();\n\t\t\t\t}\n\t\t\t}\n\t\t\t*/\n        }\n        // return it\n        return db;\n    }\n\n    /* Return true on a successful save! */\n    public boolean save() {\n        System.out.println(\"Saving Site DB!\");\n        try {\n            saveDB();\n            return true;\n        } catch (IOException ioe) {\n            System.out.println(\"trying to save db, ioe=\" + ioe);\n            ioe.printStackTrace();\n        }\n        return false;\n    }\n\n    // this causes all sorts of failures if corina.dir.data==null!\n    // OBSOLETE: moved to SiteDBFile.getDBFilename() -- only used in this file\n    // for watching for file changes, which should either be moved to SiteDBFile,\n    // or at least use SiteDBFile.getFilename().\n    private static String getDBFilename() {\n        return App.prefs.getPref(\"corina.dir.data\") + File.separator + \"Site DB\";\n    }\n\n    private void loadDB() throws IOException {\n        System.out.println(\"reloading database\");\n        try {\n            boolean lock = getLock(getDBFilename());\n            if (!lock) {\n                throw new IOException(\"Could not lock file for loading\");\n            }\n            // create XML reader\n            XMLReader xr = XMLReaderFactory.createXMLReader();\n            // i'm just updating myself now! -- don't worry, after\n            // loadDB() returns, the events get fired (up one level).\n            selfUpdating = true;\n            // set it up as a sitedb loader\n            SiteDBLoader loader = new SiteDBLoader();\n            xr.setContentHandler(loader);\n            xr.setErrorHandler(loader);\n            // load it -- use FileInputStream, InputStreamReader to force UTF-8\n            // RACE: lock file during entire load!\n            modDate = new File(getDBFilename()).lastModified();\n            db.startWatcher();\n            InputStream is = new FileInputStream(getDBFilename());\n            Reader r = new InputStreamReader(is, \"UTF8\");\n            xr.parse(new InputSource(r));\n            // done updating\n            selfUpdating = false;\n            // let it go\n            // FIXME: make this final?  see same call in saveDB() for discussion\n            r.close();\n            Lock.release(getDBFilename());\n        } catch (SAXException se) {\n            // ack! don't keep the lock on an error!\n            selfUpdating = false;\n            Lock.release(getDBFilename());\n            throw new IOException(se.getMessage());\n        } catch (IOException ioe) {\n            selfUpdating = false;\n            Alert.error(\"Error loading site database\", \"There was an error while loading the site database.\\n\" + \"Most likely this means your data directory is set improperly.\\n\" + \"Various corina functions will NOT work without a site database.\\n\\n\" + \"Error: \" + ioe.toString());\n            throw ioe;\n        }\n    }\n\n    // save the sitedb to disk -- not used yet!\n    // FIXME: lock file during entire save, and set |modDate|\n    // TODO: what happens if i throw an ioe?  restore a backup?\n    private void saveDB() throws IOException {\n        boolean lock = getLock(getDBFilename());\n        if (!lock) {\n            throw new IOException(\"Could not lock file for saving\");\n        }\n        // this is a sanity check. shouldn't happen.\n        if (selfUpdating) {\n            throw new IOException(\"SELF UPDATING ALREADY, DURING SAVE??\");\n        }\n        selfUpdating = true;\n        // use utf-8!\n        File outfile = new File(getDBFilename() + \" - Saving\");\n        OutputStream os = new FileOutputStream(outfile);\n        Writer wr = new OutputStreamWriter(os, \"UTF8\");\n        BufferedWriter w = new BufferedWriter(wr);\n        try {\n            w.write(\"<?xml version=\\\"1.0\\\" encoding=\\\"utf-8\\\"?>\");\n            w.newLine();\n            w.write(\"<!--\");\n            w.newLine();\n            w.write(\" WARNING WARNING WARNING WARNING WARNING WARNING \");\n            w.newLine();\n            w.newLine();\n            w.write(\"   This file is NOT MANUALLY EDITABLE. Modifying this file in a text editor such as notepad\");\n            w.newLine();\n            w.write(\"   will destroy the internationalized text contained within.\");\n            w.newLine();\n            w.write(\"   DO NOT EDIT UNLESS YOU ARE COMPLETELY SURE YOU KNOW WHAT YOU ARE DOING\");\n            w.newLine();\n            w.newLine();\n            w.write(\" WARNING WARNING WARNING WARNING WARNING WARNING \");\n            w.newLine();\n            w.newLine();\n            w.write(\" File automatically generated by Corina, the Cornell Tree Ring Analysis system.\");\n            w.newLine();\n            w.write(\" \" + nameCreator());\n            w.newLine();\n            w.write(\"-->\");\n            w.newLine();\n            w.newLine();\n            w.write(\"<sitedb>\");\n            w.newLine();\n            w.newLine();\n            // (loop for s in sites do (write w (site-to-xml s)))\n            for (int i = 0; i < sites.size(); i++) {\n                Site s = (Site) sites.get(i);\n                w.write(s.toXML());\n                w.newLine();\n            }\n            w.newLine();\n            w.write(\"</sitedb>\");\n            w.newLine();\n        } catch (Exception e) {\n            // an error.. writing the file? ack!\n            // clean up and bail!\n            outfile.delete();\n            selfUpdating = false;\n            Lock.release(getDBFilename());\n            if (e instanceof IOException)\n                throw (IOException) e;\n            else\n                e.printStackTrace();\n        } finally {\n            try {\n                w.close();\n            } catch (IOException ioe) {\n                // an error.. writing the file? ack!\n                // clean up and bail!\n                outfile.delete();\n                selfUpdating = false;\n                Lock.release(getDBFilename());\n                throw ioe;\n            }\n        }\n        // only after complete success do we rename the file.\n        File realoutfile = new File(getDBFilename());\n        // first, move the Site DB to Site DB - Old YYYYMMDD HHMMSS\n        Date now = new Date();\n        SimpleDateFormat dFormat = new SimpleDateFormat(\"yyyyMMdd HHmmss\");\n        File oldoutfile = new File(getDBFilename() + \" - Old \" + dFormat.format(now));\n        realoutfile.renameTo(oldoutfile);\n        // then, since realoutfile changed, reinit it...\n        realoutfile = new File(getDBFilename());\n        // and finally, move the new sitedb to the real sitedb.\n        if (outfile.renameTo(realoutfile) == false) {\n            System.out.println(\"Couldn't rename siteDB! I should handle this better!\");\n        }\n        // before you unlock it, update |modDate|, so it doesn't look\n        // like it was changed by somebody else.\n        modDate = new File(getDBFilename()).lastModified();\n        selfUpdating = false;\n        // let it go\n        // FIXME: should this be finally?  or would that cause problems, if i don't restore a backup?\n        Lock.release(getDBFilename());\n    }\n\n    // XML loader ------------------------------------------------------------\n    private class SiteDBLoader extends DefaultHandler {\n\n        private String state = \"\";\n\n        private String data = \"\";\n\n        private Site site = null;\n\n        public void startElement(String uri, String name, String qName, Attributes atts) {\n            if (name.equals(\"site\"))\n                site = new Site();\n            else\n                state = name;\n        }\n\n        public void endElement(String uri, String name, String qName) {\n            if (name.equals(\"site\")) {\n                sites.add(site);\n                site = null;\n            } else {\n                // ignore whitespace\n                data = data.trim();\n                if (data.length() == 0)\n                    return;\n                // ignore if site==null, meaning tag outside of <site>\n                if (site == null)\n                    return;\n                // parse -- use hashtable?\n                if (state.equals(\"country\"))\n                    site.setCountry(data);\n                else if (state.equals(\"code\"))\n                    site.setCode(data);\n                else if (state.equals(\"name\"))\n                    site.setName(data);\n                else if (state.equals(\"id\"))\n                    site.setId(data);\n                else if (state.equals(\"species\"))\n                    site.setSpecies(data);\n                else if (state.equals(\"type\")) {\n                    site.setTypeString(data);\n                } else if (state.equals(\"filename\")) {\n                    // shouldn't this be \"folder\"?\n                    // yes, it should. setFileName converts to folder for compatibility with older SiteDBs.\n                    site.setFilename(data);\n                } else if (state.equals(\"folder\")) {\n                    site.setFolder(data);\n                } else if (state.equals(\"location\")) {\n                    site.setLocation(new Location(data));\n                } else if (state.equals(\"comments\")) {\n                    site.setComments(data);\n                } else {\n                    // else ... what?\n                    return;\n                }\n                // something matched => reset data\n                data = \"\";\n            }\n        }\n\n        public void characters(char[] ch, int start, int length) {\n            // stringify\n            data += new String(ch, start, length);\n        }\n    }\n\n    // -----------------------------------------------------------------------------\n    // query functions -- only simple ones here, complex sql-selects\n    // and stuff can go in their own class.\n    public Site getSite(String code) throws SiteNotFoundException {\n        // return the site with code |code|\n        for (int i = 0; i < sites.size(); i++) {\n            Site s = (Site) sites.get(i);\n            if (s.getCode().equals(code))\n                return s;\n        }\n        throw new SiteNotFoundException();\n    }\n\n    private String folderToLocalPath(String folder) {\n        String s = folder.replace(\":\", File.separator);\n        return App.prefs.getPref(\"corina.dir.data\") + File.separator + s;\n    }\n\n    public Site getSite(File folder) throws SiteNotFoundException {\n        // return the site for folder |folder|\n        for (int i = 0; i < sites.size(); i++) {\n            Site s = (Site) sites.get(i);\n            if (matchesFilename(folder.getPath(), s))\n                return s;\n        }\n        throw new SiteNotFoundException();\n    }\n\n    public Site getSite(Sample sample) throws SiteNotFoundException {\n        String filename = (String) sample.meta.get(\"filename\");\n        // make sure it's been saved\n        if (filename == null)\n            throw new IllegalArgumentException();\n        // hack: no sites\n        if (sites == null)\n            throw new SiteNotFoundException();\n        // look through the database for that filename\n        for (int i = 0; i < sites.size(); i++) {\n            Site s = (Site) sites.get(i);\n            if (s.getFolder() == null)\n                continue;\n            // (i think this might not always work, depending on OS, rel/abs filenames, etc.\n            // -- no, it seems to...)\n            if (matchesFilename(filename, s))\n                return s;\n        }\n        throw new SiteNotFoundException();\n    }\n\n    // returns true, iff |filename| represents a file in |site|\n    private boolean matchesFilename(String filename, Site site) {\n        String folder = site.getFolder();\n        if (folder == null)\n            return false;\n        // convert our folder to contain our local path.\n        folder = folderToLocalPath(folder).toUpperCase();\n        // chop off any trailing separators\n        if (folder.endsWith(File.separator))\n            folder = folder.substring(0, folder.length() - File.separator.length());\n        // find the last separator\n        if (folder.lastIndexOf(File.separator) != -1)\n            folder = folder.substring(folder.lastIndexOf(File.separator) + 1, folder.length());\n        // find the last separator, but do the same with the file\n        if (filename.lastIndexOf(File.separator) != -1)\n            filename = filename.substring(filename.lastIndexOf(File.separator) + 1, filename.length());\n        return filename.toUpperCase().startsWith(folder);\n        //||\n        //  filename.startsWith(App.prefs.getPref(\"corina.dir.data\") + File.separator + folder) ||\n        //  filename.startsWith(App.prefs.getPref(\"corina.dir.data\") + folder);\n        // this matches if (1) folder is relative,\n        //                 (2) absolute and dir.data has no file.sep, or\n        //                 (3) absolute and dir.data ends with file.sep\n        // FIXME: folder will now always be relative to location of sitedb file\n    }\n\n    // is this still used?\n    public Site getSite(Location l) throws SiteNotFoundException {\n        // return the site at |l|.  if there's more than one, return\n        // an arbitrary one.\n        for (int i = 0; i < sites.size(); i++) {\n            Site s = (Site) sites.get(i);\n            if (s.getLocation() != null && s.getLocation().equals(l))\n                return s;\n        }\n        // none was there, but let's look for something nearby.\n        for (int i = 0; i < sites.size(); i++) {\n            Site s = (Site) sites.get(i);\n            if (s.getLocation() == null)\n                // wha?\n                continue;\n            if (s.getLocation().isNear(l, 10))\n                return s;\n        }\n        throw new SiteNotFoundException();\n    }\n\n    // ---------------------------------------------------------------------------\n    // (loop for s in +sitedb+ when (eq loc (site-location s)) collect s)\n    public Site[] getSitesAt(Location loc) {\n        List output = new ArrayList();\n        for (int i = 0; i < sites.size(); i++) {\n            Site s = (Site) sites.get(i);\n            if (loc.equals(s.getLocation()))\n                output.add(s);\n        }\n        return (Site[]) output.toArray(new Site[0]);\n    }\n\n    // return an array of the 2-letter codes of all countries represented in the sitedb\n    public String[] getCountries() {\n        int n = sites.size();\n        Set countries = new HashSet();\n        for (int i = 0; i < n; i++) {\n            Site s = (Site) sites.get(i);\n            countries.add(s.getCountry());\n        }\n        return (String[]) countries.toArray(new String[0]);\n    }\n\n    // return a list containing all of the site names\n    public List getSiteNames() {\n        List names = new ArrayList();\n        for (int i = 0; i < sites.size(); i++) {\n            String name = ((Site) sites.get(i)).getName();\n            if (name != null && !names.contains(name))\n                names.add(name);\n        }\n        return names;\n    }\n\n    // -----------------------------------------------------------------------------\n    // demeter, again.  (SELECT country FROM sites GROUP BY COUNT(?))\n    public List getCountriesInOrder() {\n        // get countries\n        String[] cs = getCountries();\n        // (number of unique countries)\n        int n = cs.length;\n        // put in array of tuples\n        Tuple[] tuple = new Tuple[n];\n        for (int i = 0; i < n; i++) tuple[i] = new Tuple(cs[i]);\n        // loop through sites, counting frequency\n        for (int i = 0; i < sites.size(); i++) {\n            // country\n            String c = ((Site) sites.get(i)).getCountry();\n            // look up in list, and count it\n            for (int j = 0; j < tuple.length; j++) if (tuple[j].name.equals(c))\n                tuple[j].freq++;\n        }\n        // sort (freq, then name)\n        Arrays.sort(tuple);\n        // copy names to array, and return\n        List l = new ArrayList();\n        for (int i = 0; i < n; i++) l.add(tuple[i].name);\n        return l;\n    }\n\n    private static class Tuple implements Comparable {\n\n        String name;\n\n        int freq = 0;\n\n        Tuple(String name) {\n            this.name = name;\n        }\n\n        public int compareTo(Object o2) {\n            Tuple t2 = (Tuple) o2;\n            if (freq < t2.freq)\n                return +1;\n            else if (freq > t2.freq)\n                return -1;\n            else\n                return Country.getName(name).compareTo(Country.getName(t2.name));\n        }\n    }\n\n    // -----------------------------------------------------------------------------\n    // add feature: dump the entire database into HTML.\n    public void toHTML(String filename) throws IOException {\n        BufferedWriter w = new BufferedWriter(new FileWriter(filename));\n        // WRITE ME\n        // strategy: make it look similar to what's on the wall now\n        // (embed a stylesheet?  sure, not many of these printed)\n        // <h2>Turkey</h2>\n        // for each country, a table:\n        // code | title | epoch | species\n        // => use Site.toHTML() for each site.\n        // (what sort of database integration will this end up with?\n        // number of samples, longest sample, etc. would be really\n        // neat)\n        // print = { print header, print EACH country, print footer }\n        // print country = { print header, print EACH site, print footer }\n        // print site = { ... about 7 lines ... }\n        // -- embed stylesheet in header; there won't be multiple sitedb.html's floating around,\n        // so there's no reason to complicate things by keeping it separate.\n        // (UNLESS that's the only way to switch on media -- ???)\n        w.close();\n    }\n\n    /*\n\t // ----\n\t // event handling -- stolen from Sample.java\n\t // REFACTOR: extract event handling to external (abstract) class?\n\t private Vector listeners = new Vector();\n\n\t public synchronized void addSiteDBListener(SiteDBListener l) {\n\t if (!listeners.contains(l))\n\t listeners.add(l);\n\t }\n\t public synchronized void removeSiteDBListener(SiteDBListener l) {\n\t listeners.remove(l);\n\t }\n\n\t private void fireSiteEvent(String method, Site source) {\n\t // is this me?  then drop it.\n\t if (selfUpdating)\n\t return;\n\n\t // alert all listeners\n\t Vector l;\n\t synchronized (this) {\n\t l = (Vector) listeners.clone();\n\t }\n\n\t int size = l.size();\n\n\t if (size == 0)\n\t return;\n\n\t SiteEvent e = new SiteEvent(source);\n\n\t try {\n\t Class types[] = new Class[] { SiteEvent.class };\n\t Method m = SiteDBListener.class.getMethod(method, types);\n\t Object args[] = new Object[] { e };\n\n\t for (int i=0; i<size; i++) {\n\t SiteDBListener listener = (SiteDBListener) l.elementAt(i);\n\n\t // this is like \"listener.method(e)\", though it's not terribly elegant.\n\t m.invoke(listener, args);\n\t }\n\t } catch (Exception ex) {\n\t // just ignore them all... (?)\n\t }\n\n\t // when you're done telling everybody in this JVM, update the\n\t // disk file so other people can find out.\n\t save();\n\t }\n\n\t public void fireSiteMoved(Site source) { fireSiteEvent(\"siteMoved\", source); }\n\t public void fireSiteNameChanged(Site source) { fireSiteEvent(\"siteNameChanged\", source); }\n\t public void fireSiteCodeChanged(Site source) { fireSiteEvent(\"siteCodeChanged\", source); }\n\t public void fireSiteIDChanged(Site source) { fireSiteEvent(\"siteIDChanged\", source); }\n\t public void fireSiteCommentsChanged(Site source) { fireSiteEvent(\"siteCommentsChanged\", source); }\n\t public void fireSiteCountryChanged(Site source) { fireSiteEvent(\"siteCountryChanged\", source); }\n\t */\n    /*\n\t NOTICE!  when you add a site event, it needs to be added to\n\t -- SiteDBListener, SiteDBAdapter\n\t -- SiteDB (new fireXXX() method)\n\t -- SiteDB (call save() in its own listener)\n\t */\n    // ------------------------------------------------------\n    // keep disk updated with my copy\n    // BUG: don't use a listener, because this means when somebody\n    // else changed it, i'll save it again, whis downright wrong.\n    private static boolean selfUpdating = false;\n\n    // ------------------------------------------------------\n    // keep disk updated with my copy\n    private long modDate;\n\n    private void startWatcher() {\n        // FIXME: if a method, make sure i get called only once\n        // FIXME: run at low priority\n        Runnable r = new Runnable() {\n\n            public void run() {\n                // file to check\n                File f = new File(getDBFilename());\n                for (; ; ) {\n                    if (selfUpdating) {\n                        // sleep 1sec, don't load! causes corruption!\n                        try {\n                            Thread.sleep(1000);\n                        } catch (InterruptedException ie) {\n                        }\n                        continue;\n                    }\n                    // check moddate on disk file\n                    long diskModDate = f.lastModified();\n                    // has it been changed?  better re-load.\n                    if (diskModDate > modDate) {\n                        // erase existing database\n                        db.sites = new ArrayList();\n                        // PERF: most of the database will be the same ... way to re-use\n                        // old database, instead of letting it all get gc'd?\n                        // load fresh\n                        try {\n                            db.loadDB();\n                        } catch (IOException ioe) {\n                            System.out.println(\"ioe -- \" + ioe);\n                            ioe.printStackTrace();\n                        }\n                        // FIXME: need new event model\n                        // -- listeners listen on the database, not one site, so deal with it\n                        // -- sites need an id number (but users should never see it)\n                        // -- a site-db-changed-event must contain:\n                        // ---- a type of event (reloaded, site-added, site-removed, site-changed)\n                        // ---- if it's site-added or site-removed, which site(s) were affected\n                        // ---- if it was a site-changed event, which site(s) and fields were affected\n                        System.out.println(\"throwing load events\");\n                        // DESIGN: how do i say \"everything changed!\"?\n                        // if the file changed, i have no idea what to fire!\n                        // (fire everything?)\n                        // selfUpdating = true;\n                        for (int i = 0; i < db.sites.size(); i++) {\n                            Site s = (Site) db.sites.get(i);\n                            // WAS: db.fireSiteNameChanged(s);\n                        }\n                        // db.fireSiteNameChanged((Site) db.sites.get(0)); // how about just 1?\n                        // selfUpdating = false;\n                    }\n                    // sleep 10sec\n                    try {\n                        Thread.sleep(1 * 1000);\n                    } catch (InterruptedException ie) {\n                        // ignore\n                    }\n                }\n            }\n        };\n        Thread t = new Thread(r);\n        t.start();\n    }\n\n    // --------------------------------------------------\n    // printing\n    // FIXME: move to PrintableDocument method of MapFrame\n    public Printable print() {\n        return new SitePrinter(sites);\n    }\n\n    private static String nameCreator() {\n        Date date = new Date();\n        String dateString = DateFormat.getDateInstance().format(date);\n        String timeString = DateFormat.getTimeInstance().format(date);\n        Object[] args = new Object[] { System.getProperty(\"user.name\", \"(unknown user)\"), dateString, timeString };\n        String byline = MessageFormat.format(I18n.getText(\"saved_by\"), args);\n        return byline;\n    }\n\n    private boolean getLock(String fullFilename) {\n        // lock the file\n        boolean lock = false;\n        while (!lock) {\n            lock = Lock.acquire(fullFilename);\n            if (!lock) {\n                String[] labels = { \"Try again\", \"Delete it\", \"Cancel\" };\n                int ret = JOptionPane.showOptionDialog(null, \"The site database appears to be locked. If nobody else is Using Corina,\\n\" + \"it's likely that this is a stale lock.\" + \"What should I do?\\n\", \"Can't access site database\", JOptionPane.YES_NO_CANCEL_OPTION, JOptionPane.QUESTION_MESSAGE, null, labels, labels[0]);\n                switch(ret) {\n                    case 0:\n                        continue;\n                    case 1:\n                        Lock.release(fullFilename);\n                        continue;\n                    case 2:\n                        return false;\n                }\n            }\n        }\n        return true;\n    }\n}\n",
		"id": "/EvoSuiteBenchmark/35_corina/src/main/java/corina/site/SiteDB_1Test.java",
		"test_prompt": "// SiteDB_1Test.java\n// This file is part of Corina.\n//\n// Corina is free software; you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation; either version 2 of the License, or\n// (at your option) any later version.\n//\n// Corina is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Corina; if not, write to the Free Software\n// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n//\n// Copyright 2001 Ken Harris <kbh7@cornell.edu>\n//\npackage corina.site;\n\nimport java.awt.print.Printable;\nimport java.io.BufferedWriter;\nimport java.io.File;\nimport java.io.FileInputStream;\nimport java.io.FileNotFoundException;\nimport java.io.FileOutputStream;\nimport java.io.FileWriter;\nimport java.io.IOException;\nimport java.io.InputStream;\nimport java.io.InputStreamReader;\nimport java.io.OutputStream;\nimport java.io.OutputStreamWriter;\nimport java.io.Reader;\nimport java.io.Writer;\nimport java.text.DateFormat;\nimport java.text.MessageFormat;\nimport java.text.SimpleDateFormat;\nimport java.util.ArrayList;\nimport java.util.Arrays;\nimport java.util.Date;\nimport java.util.HashSet;\nimport java.util.List;\nimport java.util.Set;\nimport javax.swing.JOptionPane;\nimport org.xml.sax.Attributes;\nimport org.xml.sax.InputSource;\nimport org.xml.sax.SAXException;\nimport org.xml.sax.XMLReader;\nimport org.xml.sax.helpers.DefaultHandler;\nimport org.xml.sax.helpers.XMLReaderFactory;\nimport corina.Sample;\nimport corina.core.App;\nimport corina.ui.Alert;\nimport corina.ui.I18n;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link SiteDB}.\n* It contains ten unit test cases for the {@link SiteDB#save()} method.\n*/\nclass SiteDB_1Test {"
	},
	{
		"original_code": "// SiteDB.java\n//\n// This file is part of Corina.\n//\n// Corina is free software; you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation; either version 2 of the License, or\n// (at your option) any later version.\n//\n// Corina is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Corina; if not, write to the Free Software\n// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n//\n// Copyright 2001 Ken Harris <kbh7@cornell.edu>\n//\npackage corina.site;\n\nimport java.awt.print.Printable;\nimport java.io.BufferedWriter;\nimport java.io.File;\nimport java.io.FileInputStream;\nimport java.io.FileNotFoundException;\nimport java.io.FileOutputStream;\nimport java.io.FileWriter;\nimport java.io.IOException;\nimport java.io.InputStream;\nimport java.io.InputStreamReader;\nimport java.io.OutputStream;\nimport java.io.OutputStreamWriter;\nimport java.io.Reader;\nimport java.io.Writer;\nimport java.text.DateFormat;\nimport java.text.MessageFormat;\nimport java.text.SimpleDateFormat;\nimport java.util.ArrayList;\nimport java.util.Arrays;\nimport java.util.Date;\nimport java.util.HashSet;\nimport java.util.List;\nimport java.util.Set;\nimport javax.swing.JOptionPane;\nimport org.xml.sax.Attributes;\nimport org.xml.sax.InputSource;\nimport org.xml.sax.SAXException;\nimport org.xml.sax.XMLReader;\nimport org.xml.sax.helpers.DefaultHandler;\nimport org.xml.sax.helpers.XMLReaderFactory;\nimport corina.Sample;\nimport corina.core.App;\nimport corina.ui.Alert;\nimport corina.ui.I18n;\n\n/**\n * A database of sites.\n *\n * @author Ken Harris &lt;kbh7 <i style=\"color: gray\">at</i> cornell <i style=\"color: gray\">dot</i> edu&gt;\n * @version $Id: SiteDB.java,v 1.15 2006/06/20 18:29:27 lucasmo Exp $\n */\n/*\n * TODO: -- move to SiteFile, extends SiteStorage,\n */\npublic class // implements PrintableDocument {\nSiteDB {\n\n    // make it able to import/export/append stuff?\n    // TODO: call the file \"Corina Sites\", not \"Site DB\"\n    // TODO: add undo support.  this will probably consist of 2\n    // stacks, with an inner class Undo (field, oldval, newval),\n    // and undo()/redo(), canUndo()/canRedo() methods.\n    // (new SiteList(SiteDB) will actually bind them to accel-Z, accel-shift-Z.)\n    // TODO: move all i/o to its own (non-public) class, like\n    // SiteDBFile.  that's about 50% of the code in here, and will\n    // make things easier to work with, i presume.\n    // list of the sites -- use a different data struct? (private?)\n    public List sites = null;\n\n    private static SiteDB db = null;\n\n    // returns null on failure\n    public static SiteDB getSiteDB() {\n        if (db == null) {\n            db = new SiteDB();\n            db.sites = new ArrayList();\n            try {\n                db.loadDB();\n            } catch (IOException ioe) {\n                // !!! this is an important one.  why don't we throw this?\n                System.out.println(\"ioe! -- \" + ioe);\n                ioe.printStackTrace();\n                db.sites = null;\n            }\n            // this debug saves after loading.\n            /*\n\t\t\tfinally {\n\t\t\t\ttry {\n\t\t\t\t\tdb.saveDB();\n\t\t\t\t} catch (IOException ioe) {\n\t\t\t\t\tioe.printStackTrace();\n\t\t\t\t}\n\t\t\t}\n\t\t\t*/\n        }\n        // return it\n        return db;\n    }\n\n    /* Return true on a successful save! */\n    public boolean save() {\n        System.out.println(\"Saving Site DB!\");\n        try {\n            saveDB();\n            return true;\n        } catch (IOException ioe) {\n            System.out.println(\"trying to save db, ioe=\" + ioe);\n            ioe.printStackTrace();\n        }\n        return false;\n    }\n\n    // this causes all sorts of failures if corina.dir.data==null!\n    // OBSOLETE: moved to SiteDBFile.getDBFilename() -- only used in this file\n    // for watching for file changes, which should either be moved to SiteDBFile,\n    // or at least use SiteDBFile.getFilename().\n    private static String getDBFilename() {\n        return App.prefs.getPref(\"corina.dir.data\") + File.separator + \"Site DB\";\n    }\n\n    private void loadDB() throws IOException {\n        System.out.println(\"reloading database\");\n        try {\n            boolean lock = getLock(getDBFilename());\n            if (!lock) {\n                throw new IOException(\"Could not lock file for loading\");\n            }\n            // create XML reader\n            XMLReader xr = XMLReaderFactory.createXMLReader();\n            // i'm just updating myself now! -- don't worry, after\n            // loadDB() returns, the events get fired (up one level).\n            selfUpdating = true;\n            // set it up as a sitedb loader\n            SiteDBLoader loader = new SiteDBLoader();\n            xr.setContentHandler(loader);\n            xr.setErrorHandler(loader);\n            // load it -- use FileInputStream, InputStreamReader to force UTF-8\n            // RACE: lock file during entire load!\n            modDate = new File(getDBFilename()).lastModified();\n            db.startWatcher();\n            InputStream is = new FileInputStream(getDBFilename());\n            Reader r = new InputStreamReader(is, \"UTF8\");\n            xr.parse(new InputSource(r));\n            // done updating\n            selfUpdating = false;\n            // let it go\n            // FIXME: make this final?  see same call in saveDB() for discussion\n            r.close();\n            Lock.release(getDBFilename());\n        } catch (SAXException se) {\n            // ack! don't keep the lock on an error!\n            selfUpdating = false;\n            Lock.release(getDBFilename());\n            throw new IOException(se.getMessage());\n        } catch (IOException ioe) {\n            selfUpdating = false;\n            Alert.error(\"Error loading site database\", \"There was an error while loading the site database.\\n\" + \"Most likely this means your data directory is set improperly.\\n\" + \"Various corina functions will NOT work without a site database.\\n\\n\" + \"Error: \" + ioe.toString());\n            throw ioe;\n        }\n    }\n\n    // save the sitedb to disk -- not used yet!\n    // FIXME: lock file during entire save, and set |modDate|\n    // TODO: what happens if i throw an ioe?  restore a backup?\n    private void saveDB() throws IOException {\n        boolean lock = getLock(getDBFilename());\n        if (!lock) {\n            throw new IOException(\"Could not lock file for saving\");\n        }\n        // this is a sanity check. shouldn't happen.\n        if (selfUpdating) {\n            throw new IOException(\"SELF UPDATING ALREADY, DURING SAVE??\");\n        }\n        selfUpdating = true;\n        // use utf-8!\n        File outfile = new File(getDBFilename() + \" - Saving\");\n        OutputStream os = new FileOutputStream(outfile);\n        Writer wr = new OutputStreamWriter(os, \"UTF8\");\n        BufferedWriter w = new BufferedWriter(wr);\n        try {\n            w.write(\"<?xml version=\\\"1.0\\\" encoding=\\\"utf-8\\\"?>\");\n            w.newLine();\n            w.write(\"<!--\");\n            w.newLine();\n            w.write(\" WARNING WARNING WARNING WARNING WARNING WARNING \");\n            w.newLine();\n            w.newLine();\n            w.write(\"   This file is NOT MANUALLY EDITABLE. Modifying this file in a text editor such as notepad\");\n            w.newLine();\n            w.write(\"   will destroy the internationalized text contained within.\");\n            w.newLine();\n            w.write(\"   DO NOT EDIT UNLESS YOU ARE COMPLETELY SURE YOU KNOW WHAT YOU ARE DOING\");\n            w.newLine();\n            w.newLine();\n            w.write(\" WARNING WARNING WARNING WARNING WARNING WARNING \");\n            w.newLine();\n            w.newLine();\n            w.write(\" File automatically generated by Corina, the Cornell Tree Ring Analysis system.\");\n            w.newLine();\n            w.write(\" \" + nameCreator());\n            w.newLine();\n            w.write(\"-->\");\n            w.newLine();\n            w.newLine();\n            w.write(\"<sitedb>\");\n            w.newLine();\n            w.newLine();\n            // (loop for s in sites do (write w (site-to-xml s)))\n            for (int i = 0; i < sites.size(); i++) {\n                Site s = (Site) sites.get(i);\n                w.write(s.toXML());\n                w.newLine();\n            }\n            w.newLine();\n            w.write(\"</sitedb>\");\n            w.newLine();\n        } catch (Exception e) {\n            // an error.. writing the file? ack!\n            // clean up and bail!\n            outfile.delete();\n            selfUpdating = false;\n            Lock.release(getDBFilename());\n            if (e instanceof IOException)\n                throw (IOException) e;\n            else\n                e.printStackTrace();\n        } finally {\n            try {\n                w.close();\n            } catch (IOException ioe) {\n                // an error.. writing the file? ack!\n                // clean up and bail!\n                outfile.delete();\n                selfUpdating = false;\n                Lock.release(getDBFilename());\n                throw ioe;\n            }\n        }\n        // only after complete success do we rename the file.\n        File realoutfile = new File(getDBFilename());\n        // first, move the Site DB to Site DB - Old YYYYMMDD HHMMSS\n        Date now = new Date();\n        SimpleDateFormat dFormat = new SimpleDateFormat(\"yyyyMMdd HHmmss\");\n        File oldoutfile = new File(getDBFilename() + \" - Old \" + dFormat.format(now));\n        realoutfile.renameTo(oldoutfile);\n        // then, since realoutfile changed, reinit it...\n        realoutfile = new File(getDBFilename());\n        // and finally, move the new sitedb to the real sitedb.\n        if (outfile.renameTo(realoutfile) == false) {\n            System.out.println(\"Couldn't rename siteDB! I should handle this better!\");\n        }\n        // before you unlock it, update |modDate|, so it doesn't look\n        // like it was changed by somebody else.\n        modDate = new File(getDBFilename()).lastModified();\n        selfUpdating = false;\n        // let it go\n        // FIXME: should this be finally?  or would that cause problems, if i don't restore a backup?\n        Lock.release(getDBFilename());\n    }\n\n    // XML loader ------------------------------------------------------------\n    private class SiteDBLoader extends DefaultHandler {\n\n        private String state = \"\";\n\n        private String data = \"\";\n\n        private Site site = null;\n\n        public void startElement(String uri, String name, String qName, Attributes atts) {\n            if (name.equals(\"site\"))\n                site = new Site();\n            else\n                state = name;\n        }\n\n        public void endElement(String uri, String name, String qName) {\n            if (name.equals(\"site\")) {\n                sites.add(site);\n                site = null;\n            } else {\n                // ignore whitespace\n                data = data.trim();\n                if (data.length() == 0)\n                    return;\n                // ignore if site==null, meaning tag outside of <site>\n                if (site == null)\n                    return;\n                // parse -- use hashtable?\n                if (state.equals(\"country\"))\n                    site.setCountry(data);\n                else if (state.equals(\"code\"))\n                    site.setCode(data);\n                else if (state.equals(\"name\"))\n                    site.setName(data);\n                else if (state.equals(\"id\"))\n                    site.setId(data);\n                else if (state.equals(\"species\"))\n                    site.setSpecies(data);\n                else if (state.equals(\"type\")) {\n                    site.setTypeString(data);\n                } else if (state.equals(\"filename\")) {\n                    // shouldn't this be \"folder\"?\n                    // yes, it should. setFileName converts to folder for compatibility with older SiteDBs.\n                    site.setFilename(data);\n                } else if (state.equals(\"folder\")) {\n                    site.setFolder(data);\n                } else if (state.equals(\"location\")) {\n                    site.setLocation(new Location(data));\n                } else if (state.equals(\"comments\")) {\n                    site.setComments(data);\n                } else {\n                    // else ... what?\n                    return;\n                }\n                // something matched => reset data\n                data = \"\";\n            }\n        }\n\n        public void characters(char[] ch, int start, int length) {\n            // stringify\n            data += new String(ch, start, length);\n        }\n    }\n\n    // -----------------------------------------------------------------------------\n    // query functions -- only simple ones here, complex sql-selects\n    // and stuff can go in their own class.\n    public Site getSite(String code) throws SiteNotFoundException {\n        // return the site with code |code|\n        for (int i = 0; i < sites.size(); i++) {\n            Site s = (Site) sites.get(i);\n            if (s.getCode().equals(code))\n                return s;\n        }\n        throw new SiteNotFoundException();\n    }\n\n    private String folderToLocalPath(String folder) {\n        String s = folder.replace(\":\", File.separator);\n        return App.prefs.getPref(\"corina.dir.data\") + File.separator + s;\n    }\n\n    public Site getSite(File folder) throws SiteNotFoundException {\n        // return the site for folder |folder|\n        for (int i = 0; i < sites.size(); i++) {\n            Site s = (Site) sites.get(i);\n            if (matchesFilename(folder.getPath(), s))\n                return s;\n        }\n        throw new SiteNotFoundException();\n    }\n\n    public Site getSite(Sample sample) throws SiteNotFoundException {\n        String filename = (String) sample.meta.get(\"filename\");\n        // make sure it's been saved\n        if (filename == null)\n            throw new IllegalArgumentException();\n        // hack: no sites\n        if (sites == null)\n            throw new SiteNotFoundException();\n        // look through the database for that filename\n        for (int i = 0; i < sites.size(); i++) {\n            Site s = (Site) sites.get(i);\n            if (s.getFolder() == null)\n                continue;\n            // (i think this might not always work, depending on OS, rel/abs filenames, etc.\n            // -- no, it seems to...)\n            if (matchesFilename(filename, s))\n                return s;\n        }\n        throw new SiteNotFoundException();\n    }\n\n    // returns true, iff |filename| represents a file in |site|\n    private boolean matchesFilename(String filename, Site site) {\n        String folder = site.getFolder();\n        if (folder == null)\n            return false;\n        // convert our folder to contain our local path.\n        folder = folderToLocalPath(folder).toUpperCase();\n        // chop off any trailing separators\n        if (folder.endsWith(File.separator))\n            folder = folder.substring(0, folder.length() - File.separator.length());\n        // find the last separator\n        if (folder.lastIndexOf(File.separator) != -1)\n            folder = folder.substring(folder.lastIndexOf(File.separator) + 1, folder.length());\n        // find the last separator, but do the same with the file\n        if (filename.lastIndexOf(File.separator) != -1)\n            filename = filename.substring(filename.lastIndexOf(File.separator) + 1, filename.length());\n        return filename.toUpperCase().startsWith(folder);\n        //||\n        //  filename.startsWith(App.prefs.getPref(\"corina.dir.data\") + File.separator + folder) ||\n        //  filename.startsWith(App.prefs.getPref(\"corina.dir.data\") + folder);\n        // this matches if (1) folder is relative,\n        //                 (2) absolute and dir.data has no file.sep, or\n        //                 (3) absolute and dir.data ends with file.sep\n        // FIXME: folder will now always be relative to location of sitedb file\n    }\n\n    // is this still used?\n    public Site getSite(Location l) throws SiteNotFoundException {\n        // return the site at |l|.  if there's more than one, return\n        // an arbitrary one.\n        for (int i = 0; i < sites.size(); i++) {\n            Site s = (Site) sites.get(i);\n            if (s.getLocation() != null && s.getLocation().equals(l))\n                return s;\n        }\n        // none was there, but let's look for something nearby.\n        for (int i = 0; i < sites.size(); i++) {\n            Site s = (Site) sites.get(i);\n            if (s.getLocation() == null)\n                // wha?\n                continue;\n            if (s.getLocation().isNear(l, 10))\n                return s;\n        }\n        throw new SiteNotFoundException();\n    }\n\n    // ---------------------------------------------------------------------------\n    // (loop for s in +sitedb+ when (eq loc (site-location s)) collect s)\n    public Site[] getSitesAt(Location loc) {\n        List output = new ArrayList();\n        for (int i = 0; i < sites.size(); i++) {\n            Site s = (Site) sites.get(i);\n            if (loc.equals(s.getLocation()))\n                output.add(s);\n        }\n        return (Site[]) output.toArray(new Site[0]);\n    }\n\n    // return an array of the 2-letter codes of all countries represented in the sitedb\n    public String[] getCountries() {\n        int n = sites.size();\n        Set countries = new HashSet();\n        for (int i = 0; i < n; i++) {\n            Site s = (Site) sites.get(i);\n            countries.add(s.getCountry());\n        }\n        return (String[]) countries.toArray(new String[0]);\n    }\n\n    // return a list containing all of the site names\n    public List getSiteNames() {\n        List names = new ArrayList();\n        for (int i = 0; i < sites.size(); i++) {\n            String name = ((Site) sites.get(i)).getName();\n            if (name != null && !names.contains(name))\n                names.add(name);\n        }\n        return names;\n    }\n\n    // -----------------------------------------------------------------------------\n    // demeter, again.  (SELECT country FROM sites GROUP BY COUNT(?))\n    public List getCountriesInOrder() {\n        // get countries\n        String[] cs = getCountries();\n        // (number of unique countries)\n        int n = cs.length;\n        // put in array of tuples\n        Tuple[] tuple = new Tuple[n];\n        for (int i = 0; i < n; i++) tuple[i] = new Tuple(cs[i]);\n        // loop through sites, counting frequency\n        for (int i = 0; i < sites.size(); i++) {\n            // country\n            String c = ((Site) sites.get(i)).getCountry();\n            // look up in list, and count it\n            for (int j = 0; j < tuple.length; j++) if (tuple[j].name.equals(c))\n                tuple[j].freq++;\n        }\n        // sort (freq, then name)\n        Arrays.sort(tuple);\n        // copy names to array, and return\n        List l = new ArrayList();\n        for (int i = 0; i < n; i++) l.add(tuple[i].name);\n        return l;\n    }\n\n    private static class Tuple implements Comparable {\n\n        String name;\n\n        int freq = 0;\n\n        Tuple(String name) {\n            this.name = name;\n        }\n\n        public int compareTo(Object o2) {\n            Tuple t2 = (Tuple) o2;\n            if (freq < t2.freq)\n                return +1;\n            else if (freq > t2.freq)\n                return -1;\n            else\n                return Country.getName(name).compareTo(Country.getName(t2.name));\n        }\n    }\n\n    // -----------------------------------------------------------------------------\n    // add feature: dump the entire database into HTML.\n    public void toHTML(String filename) throws IOException {\n        BufferedWriter w = new BufferedWriter(new FileWriter(filename));\n        // WRITE ME\n        // strategy: make it look similar to what's on the wall now\n        // (embed a stylesheet?  sure, not many of these printed)\n        // <h2>Turkey</h2>\n        // for each country, a table:\n        // code | title | epoch | species\n        // => use Site.toHTML() for each site.\n        // (what sort of database integration will this end up with?\n        // number of samples, longest sample, etc. would be really\n        // neat)\n        // print = { print header, print EACH country, print footer }\n        // print country = { print header, print EACH site, print footer }\n        // print site = { ... about 7 lines ... }\n        // -- embed stylesheet in header; there won't be multiple sitedb.html's floating around,\n        // so there's no reason to complicate things by keeping it separate.\n        // (UNLESS that's the only way to switch on media -- ???)\n        w.close();\n    }\n\n    /*\n\t // ----\n\t // event handling -- stolen from Sample.java\n\t // REFACTOR: extract event handling to external (abstract) class?\n\t private Vector listeners = new Vector();\n\n\t public synchronized void addSiteDBListener(SiteDBListener l) {\n\t if (!listeners.contains(l))\n\t listeners.add(l);\n\t }\n\t public synchronized void removeSiteDBListener(SiteDBListener l) {\n\t listeners.remove(l);\n\t }\n\n\t private void fireSiteEvent(String method, Site source) {\n\t // is this me?  then drop it.\n\t if (selfUpdating)\n\t return;\n\n\t // alert all listeners\n\t Vector l;\n\t synchronized (this) {\n\t l = (Vector) listeners.clone();\n\t }\n\n\t int size = l.size();\n\n\t if (size == 0)\n\t return;\n\n\t SiteEvent e = new SiteEvent(source);\n\n\t try {\n\t Class types[] = new Class[] { SiteEvent.class };\n\t Method m = SiteDBListener.class.getMethod(method, types);\n\t Object args[] = new Object[] { e };\n\n\t for (int i=0; i<size; i++) {\n\t SiteDBListener listener = (SiteDBListener) l.elementAt(i);\n\n\t // this is like \"listener.method(e)\", though it's not terribly elegant.\n\t m.invoke(listener, args);\n\t }\n\t } catch (Exception ex) {\n\t // just ignore them all... (?)\n\t }\n\n\t // when you're done telling everybody in this JVM, update the\n\t // disk file so other people can find out.\n\t save();\n\t }\n\n\t public void fireSiteMoved(Site source) { fireSiteEvent(\"siteMoved\", source); }\n\t public void fireSiteNameChanged(Site source) { fireSiteEvent(\"siteNameChanged\", source); }\n\t public void fireSiteCodeChanged(Site source) { fireSiteEvent(\"siteCodeChanged\", source); }\n\t public void fireSiteIDChanged(Site source) { fireSiteEvent(\"siteIDChanged\", source); }\n\t public void fireSiteCommentsChanged(Site source) { fireSiteEvent(\"siteCommentsChanged\", source); }\n\t public void fireSiteCountryChanged(Site source) { fireSiteEvent(\"siteCountryChanged\", source); }\n\t */\n    /*\n\t NOTICE!  when you add a site event, it needs to be added to\n\t -- SiteDBListener, SiteDBAdapter\n\t -- SiteDB (new fireXXX() method)\n\t -- SiteDB (call save() in its own listener)\n\t */\n    // ------------------------------------------------------\n    // keep disk updated with my copy\n    // BUG: don't use a listener, because this means when somebody\n    // else changed it, i'll save it again, whis downright wrong.\n    private static boolean selfUpdating = false;\n\n    // ------------------------------------------------------\n    // keep disk updated with my copy\n    private long modDate;\n\n    private void startWatcher() {\n        // FIXME: if a method, make sure i get called only once\n        // FIXME: run at low priority\n        Runnable r = new Runnable() {\n\n            public void run() {\n                // file to check\n                File f = new File(getDBFilename());\n                for (; ; ) {\n                    if (selfUpdating) {\n                        // sleep 1sec, don't load! causes corruption!\n                        try {\n                            Thread.sleep(1000);\n                        } catch (InterruptedException ie) {\n                        }\n                        continue;\n                    }\n                    // check moddate on disk file\n                    long diskModDate = f.lastModified();\n                    // has it been changed?  better re-load.\n                    if (diskModDate > modDate) {\n                        // erase existing database\n                        db.sites = new ArrayList();\n                        // PERF: most of the database will be the same ... way to re-use\n                        // old database, instead of letting it all get gc'd?\n                        // load fresh\n                        try {\n                            db.loadDB();\n                        } catch (IOException ioe) {\n                            System.out.println(\"ioe -- \" + ioe);\n                            ioe.printStackTrace();\n                        }\n                        // FIXME: need new event model\n                        // -- listeners listen on the database, not one site, so deal with it\n                        // -- sites need an id number (but users should never see it)\n                        // -- a site-db-changed-event must contain:\n                        // ---- a type of event (reloaded, site-added, site-removed, site-changed)\n                        // ---- if it's site-added or site-removed, which site(s) were affected\n                        // ---- if it was a site-changed event, which site(s) and fields were affected\n                        System.out.println(\"throwing load events\");\n                        // DESIGN: how do i say \"everything changed!\"?\n                        // if the file changed, i have no idea what to fire!\n                        // (fire everything?)\n                        // selfUpdating = true;\n                        for (int i = 0; i < db.sites.size(); i++) {\n                            Site s = (Site) db.sites.get(i);\n                            // WAS: db.fireSiteNameChanged(s);\n                        }\n                        // db.fireSiteNameChanged((Site) db.sites.get(0)); // how about just 1?\n                        // selfUpdating = false;\n                    }\n                    // sleep 10sec\n                    try {\n                        Thread.sleep(1 * 1000);\n                    } catch (InterruptedException ie) {\n                        // ignore\n                    }\n                }\n            }\n        };\n        Thread t = new Thread(r);\n        t.start();\n    }\n\n    // --------------------------------------------------\n    // printing\n    // FIXME: move to PrintableDocument method of MapFrame\n    public Printable print() {\n        return new SitePrinter(sites);\n    }\n\n    private static String nameCreator() {\n        Date date = new Date();\n        String dateString = DateFormat.getDateInstance().format(date);\n        String timeString = DateFormat.getTimeInstance().format(date);\n        Object[] args = new Object[] { System.getProperty(\"user.name\", \"(unknown user)\"), dateString, timeString };\n        String byline = MessageFormat.format(I18n.getText(\"saved_by\"), args);\n        return byline;\n    }\n\n    private boolean getLock(String fullFilename) {\n        // lock the file\n        boolean lock = false;\n        while (!lock) {\n            lock = Lock.acquire(fullFilename);\n            if (!lock) {\n                String[] labels = { \"Try again\", \"Delete it\", \"Cancel\" };\n                int ret = JOptionPane.showOptionDialog(null, \"The site database appears to be locked. If nobody else is Using Corina,\\n\" + \"it's likely that this is a stale lock.\" + \"What should I do?\\n\", \"Can't access site database\", JOptionPane.YES_NO_CANCEL_OPTION, JOptionPane.QUESTION_MESSAGE, null, labels, labels[0]);\n                switch(ret) {\n                    case 0:\n                        continue;\n                    case 1:\n                        Lock.release(fullFilename);\n                        continue;\n                    case 2:\n                        return false;\n                }\n            }\n        }\n        return true;\n    }\n}\n",
		"id": "/EvoSuiteBenchmark/35_corina/src/main/java/corina/site/SiteDB_2Test.java",
		"test_prompt": "// SiteDB_2Test.java\n// This file is part of Corina.\n//\n// Corina is free software; you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation; either version 2 of the License, or\n// (at your option) any later version.\n//\n// Corina is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Corina; if not, write to the Free Software\n// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n//\n// Copyright 2001 Ken Harris <kbh7@cornell.edu>\n//\npackage corina.site;\n\nimport java.awt.print.Printable;\nimport java.io.BufferedWriter;\nimport java.io.File;\nimport java.io.FileInputStream;\nimport java.io.FileNotFoundException;\nimport java.io.FileOutputStream;\nimport java.io.FileWriter;\nimport java.io.IOException;\nimport java.io.InputStream;\nimport java.io.InputStreamReader;\nimport java.io.OutputStream;\nimport java.io.OutputStreamWriter;\nimport java.io.Reader;\nimport java.io.Writer;\nimport java.text.DateFormat;\nimport java.text.MessageFormat;\nimport java.text.SimpleDateFormat;\nimport java.util.ArrayList;\nimport java.util.Arrays;\nimport java.util.Date;\nimport java.util.HashSet;\nimport java.util.List;\nimport java.util.Set;\nimport javax.swing.JOptionPane;\nimport org.xml.sax.Attributes;\nimport org.xml.sax.InputSource;\nimport org.xml.sax.SAXException;\nimport org.xml.sax.XMLReader;\nimport org.xml.sax.helpers.DefaultHandler;\nimport org.xml.sax.helpers.XMLReaderFactory;\nimport corina.Sample;\nimport corina.core.App;\nimport corina.ui.Alert;\nimport corina.ui.I18n;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link SiteDB}.\n* It contains ten unit test cases for the {@link SiteDB#print()} method.\n*/\nclass SiteDB_2Test {"
	},
	{
		"original_code": "// SiteEditorPanel.java\npackage corina.site;\n\nimport corina.map.MapFrame;\nimport corina.prefs.Prefs;\nimport corina.site.Site;\nimport corina.site.SiteDB;\nimport corina.site.Country;\nimport corina.site.SiteInfoDialog;\nimport corina.util.PopupListener;\nimport corina.ui.Builder;\nimport corina.gui.Layout;\n// (for ODD_ROW_COLOR)\nimport corina.browser.Browser;\nimport corina.core.App;\nimport corina.util.Sort;\nimport java.util.Collections;\nimport java.util.Comparator;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.awt.Color;\nimport java.awt.Component;\nimport java.awt.BorderLayout;\nimport java.awt.Dimension;\nimport java.awt.Event;\nimport java.awt.Font;\nimport java.awt.event.ActionListener;\nimport java.awt.event.AdjustmentEvent;\nimport java.awt.event.InputEvent;\nimport java.awt.event.KeyEvent;\nimport java.awt.event.MouseAdapter;\nimport java.awt.event.MouseEvent;\nimport java.awt.event.ActionEvent;\n// !\nimport javax.swing.*;\nimport javax.swing.event.ListSelectionListener;\nimport javax.swing.event.ListSelectionEvent;\nimport javax.swing.table.AbstractTableModel;\nimport javax.swing.table.DefaultTableCellRenderer;\nimport javax.swing.table.TableCellEditor;\n\n/**\n *   A panel which shows a table of sites.\n *\n *   <p>By right-clicking on the table header, the user can decide what columns to display.\n *   Available columns are: Show?, Name, Code, ID, Location, Altitude, Country, Species, Type,\n *   Comments, and Distance.  \"Show?\" is a checkbox which toggles whether this site is visible\n *   on the map.  \"Distance\" is the distance from a target site; the user can pick any site to\n *   mark as the target.  (\"Show?\" and \"Name\" must always be visible.)</p>\n *\n *   <p>If you have just 2 sites, and 3 of the nonessential columns showing, the table might\n *   look like this:</p>\n *\n * <table align=\"center\" cellspacing=\"0\" border=\"1\">\n *   <form> <!-- for checkboxes -->\n *   <tr>\n *     <th>Show?</th>\n *     <th>Name</th>\n *     <th>Species</th>\n *     <th>Country</th>\n *     <th>Distance</th>\n *   </tr>\n *   <tr>\n *     <td align=\"center\"><input type=\"checkbox\" checked></td>\n *     <td>Zonguldak, Karab&uuml;k</td>\n *     <td>Quercus sp.</td>\n *     <td>Turkey</td>\n *     <td>Target</td>\n *   </tr>\n *   <tr>\n *     <td align=\"center\"><input type=\"checkbox\" checked></td>\n *     <td>Zonguldak, Yenice</td>\n *     <td>Quercus sp.</td>\n *     <td>Turkey</td>\n *     <td>10 km</td>\n *   </tr>\n *   </form>\n * </table>\n *\n *   @author Ken Harris &lt;kbh7 <i style=\"color: gray\">at</i> cornell <i style=\"color: gray\">dot</i> edu&gt;\n *   @version $Id: SiteEditorPanel.java,v 1.6 2006/07/11 19:50:52 lucasmo Exp $\n */\n/*\n  11-may-2003:\n\n  this is a good start.  it just needs some refactoring.  ok, a lot.\n\n  TODO:\n  -- right-clicking header allows toggling columns\n  -- left-clicking header changes sort\n  -- use case-insensitive natural-order sort: use my nifty new\n     corina.util.StringComparator\n  -- sort is indicated by little arrow in header\n\n  -- make \"+\" button add a new site\n  -- make \"-\" button remove a site\n  -- after changes made, save to disk\n  -- in bottom left, add label: \"%d site[s], %d shown on map[, %d selected]\"\n\n -- javadoc: how table data gets saved in the prefs, etc.\n\n -- clean up .* import\n -- optimize!\n  -- type-to-select, from start of \"name\" field\n  -- dim \"show?\" checkbox for rows with no location\n  -- i18n the titles (\"altitude\" -> \"Altitude\"); change \"show?\" title\n     to \"map\"\n  -- right-click \"show on map\": adjust map so all selected sites are\n     visible (\"find on map\"?)\n  -- \"mark as target\" dimmed if no location for this site\n  -- double-right-click shouldn't show info\n  -- store visibility, location, size of columns in prefs\n  -- make zeroth column \"number\" -- no title, not movable, not sizeable\n  -- add undo (for add, delete, edit)\n  -- in distance column, show target as target icon?\n  -- use even/odd white/blue coloring for checkboxes-column, too\n  -- add itunes-like search field?  yes please!\n  -- manual: making a new site\n  -- manual: deleting a site\n  -- manual: printing the site list\n  -- manual: exporting the site list\n  -- manual: finding sites near a site (the target)\n  -- manual: changing which columns are visible\n  -- manual: sorting the list of sites\n  -- manual: the sites tab\n  -- make menubar; put all things like \"mark as target\" under menus\n     (site -> mark as target) for completeness\n  -- add modify-multiple-sites-at-once, like itunes?\n  -- profile; it's a bit sluggish\n  -- if multiple rows selected, make \"get info\" cycle through them,\n     with \"previous\"/\"next\" buttons on the left, like itunes?  or add\n     checkboxes?\n*/\npublic class SiteEditorPanel extends JPanel {\n\n    // a list of all the sites -- my own copy, which i can sort as i like\n    private List allSites;\n\n    // was any of this data modified?\n    private Boolean dataModified = false;\n\n    // \"distance\" = distance from this site;\n    // the user can pick any site for this.\n    private Site target;\n\n    private SiteEditor parent;\n\n    private void setTarget(Site s) {\n        target = s;\n        model.fireTableDataChanged();\n    }\n\n    private AbstractTableModel model;\n\n    // which fields are displayed, e.g., (\"show?\" \"id\" \"code\")\n    private List columns = new ArrayList();\n\n    {\n        columns.add(\"name\");\n        columns.add(\"code\");\n        columns.add(\"id\");\n        columns.add(\"latitude\");\n        columns.add(\"longitude\");\n        columns.add(\"altitude\");\n        columns.add(\"country\");\n        columns.add(\"species\");\n        columns.add(\"type\");\n        columns.add(\"folder\");\n        columns.add(\"comments\");\n        columns.add(\"distance\");\n    }\n\n    private final class SiteEditorSorter extends MouseAdapter {\n\n        public void mouseClicked(MouseEvent e) {\n            // which column was clicked?\n            int column = table.getTableHeader().columnAtPoint(e.getPoint());\n            // sort by that column\n            String field = (String) columns.get(column);\n            if (field.equals(\"distance\")) {\n                if (sortField.equals(\"distance\")) {\n                    Collections.reverse(allSites);\n                    sortBackwards = !sortBackwards;\n                    return;\n                }\n                sortField = field;\n                sortBackwards = false;\n                Collections.sort(allSites, new Comparator() {\n\n                    public int compare(Object o1, Object o2) {\n                        // EXTRACT: put all \"targeT\" stuff in one place -- its own class\n                        Site s1 = (Site) o1;\n                        Site s2 = (Site) o2;\n                        // target goes at the beginning\n                        if (s1 == target)\n                            return -1;\n                        if (s2 == target)\n                            return +1;\n                        // nulls go at the end\n                        if (s1.getLocation() == null && s2.getLocation() == null)\n                            return 0;\n                        if (s1.getLocation() == null)\n                            return +1;\n                        if (s2.getLocation() == null)\n                            return -1;\n                        // everything else, let distanceTo() decide it\n                        int d1 = s1.distanceTo(target);\n                        int d2 = s2.distanceTo(target);\n                        // PERF: inefficient!\n                        return new Integer(d1).compareTo(new Integer(d2));\n                    }\n                });\n            } else if (field.equals(\"latitude\")) {\n                if (sortField.equals(\"latitude\")) {\n                    Collections.reverse(allSites);\n                    sortBackwards = !sortBackwards;\n                    return;\n                }\n                sortField = field;\n                sortBackwards = false;\n                Collections.sort(allSites, new Comparator() {\n\n                    public int compare(Object o1, Object o2) {\n                        // EXTRACT: put all \"targeT\" stuff in one place -- its own class\n                        Site s1 = (Site) o1;\n                        Site s2 = (Site) o2;\n                        // nulls go at the end\n                        if (s1.getLocation() == null && s2.getLocation() == null)\n                            return 0;\n                        if (s1.getLocation() == null)\n                            return +1;\n                        if (s2.getLocation() == null)\n                            return -1;\n                        // everything else, use the name (not the code)\n                        String n1 = s1.getLocation().getLatitudeAsString();\n                        String n2 = s2.getLocation().getLatitudeAsString();\n                        return n1.compareTo(n2);\n                    }\n                });\n            } else if (field.equals(\"longitude\")) {\n                if (sortField.equals(\"longitude\")) {\n                    Collections.reverse(allSites);\n                    sortBackwards = !sortBackwards;\n                    return;\n                }\n                sortField = field;\n                sortBackwards = false;\n                Collections.sort(allSites, new Comparator() {\n\n                    public int compare(Object o1, Object o2) {\n                        Site s1 = (Site) o1;\n                        Site s2 = (Site) o2;\n                        // nulls go at the end\n                        if (s1.getLocation() == null && s2.getLocation() == null)\n                            return 0;\n                        if (s1.getLocation() == null)\n                            return +1;\n                        if (s2.getLocation() == null)\n                            return -1;\n                        // everything else, use the name (not the code)\n                        String n1 = s1.getLocation().getLongitudeAsString();\n                        String n2 = s2.getLocation().getLongitudeAsString();\n                        return n1.compareTo(n2);\n                    }\n                });\n            } else if (field.equals(\"country\")) {\n                // default\n                if (sortField.equals(field)) {\n                    Collections.reverse(allSites);\n                    sortBackwards = !sortBackwards;\n                    return;\n                } else {\n                    sortField = field;\n                    sortBackwards = false;\n                    Collections.sort(allSites, new Comparator() {\n\n                        public int compare(Object o1, Object o2) {\n                            Site s1 = (Site) o1;\n                            Site s2 = (Site) o2;\n                            // nulls at end\n                            if (s1.getCountry() == null && s2.getCountry() == null)\n                                return 0;\n                            if (s1.getCountry() == null)\n                                return +1;\n                            if (s2.getCountry() == null)\n                                return -1;\n                            // everything else, use the name (not the code)\n                            try {\n                                String n1 = Country.getName(s1.getCountry());\n                                String n2 = Country.getName(s2.getCountry());\n                                return n1.compareTo(n2);\n                            } catch (IllegalArgumentException iee) {\n                                // Invalid country code somewhere. Compare just the codes, then?\n                                return s1.getCountry().compareTo(s2.getCountry());\n                            }\n                        }\n                    });\n                }\n            } else {\n                // default\n                if (sortField.equals(field)) {\n                    Collections.reverse(allSites);\n                    sortBackwards = !sortBackwards;\n                } else {\n                    sortField = field;\n                    sortBackwards = false;\n                    Sort.sort(allSites, field);\n                }\n            }\n            // TODO: preserve selection for sort\n            // FIXME: use better sort (case-insens, natural order, accent-removal, etc.)\n            // FIXME: better sorts: species, nulls should go at end; show, visible first (throws ex now), etc.\n            // FIXME: sort by output, not code (i.e., Turkey by \"Turkey\", not \"TU\")\n            // TODO: store the sort in the prefs (corina.sites.sort.field = distance, corina.sites.sort.reverse = true)\n            // TODO: draw arrow on table with current sort\n            // (EXTRACT: click-to-sort, arrow-on-sort, save-to-prefs, preserve selection.)\n            // TODO: if some data gets changed, or a site gets moved on the map, or the target site changes,\n            // the site should automatically re-sort itself.\n            // refresh display\n            model.fireTableDataChanged();\n        }\n    }\n\n    // model for table to display all the sites\n    private class SiteTableModel extends AbstractTableModel {\n\n        // columns: id, code, name, country, type, species,\n        //          altitude, latitude, longitude, comments,\n        //          distance(!)\n        public int getRowCount() {\n            return allSites.size();\n        }\n\n        public int getColumnCount() {\n            return columns.size();\n        }\n\n        public Object getValueAt(int row, int column) {\n            long t1 = System.currentTimeMillis();\n            try {\n                Site s = (Site) allSites.get(row);\n                // PERF: why can't i store the field/column(?) by an int, instead of a string?\n                String field = (String) columns.get(column);\n                if (field.equals(\"id\"))\n                    return s.getId();\n                if (field.equals(\"code\"))\n                    return s.getCode();\n                if (field.equals(\"name\"))\n                    return s.getName();\n                if (field.equals(\"folder\"))\n                    return s.getFolder();\n                if (field.equals(\"type\"))\n                    // PERF\n                    return s.getTypesAsString();\n                if (field.equals(\"species\"))\n                    return s.getSpecies();\n                if (field.equals(\"altitude\"))\n                    return (s.getAltitude() != null) ? s.getAltitude().toString() : null;\n                Location loc;\n                if (field.equals(\"latitude\"))\n                    return ((loc = s.getLocation()) != null) ? loc.getLatitudeAsString() : null;\n                if (field.equals(\"longitude\"))\n                    return ((loc = s.getLocation()) != null) ? loc.getLongitudeAsString() : null;\n                if (field.equals(\"comments\"))\n                    return s.getComments();\n                if (field.equals(\"country\"))\n                    return s.getCountry();\n                if (field.equals(\"distance\")) {\n                    if (s == target)\n                        // need I18n\n                        return \"Target\";\n                    if (s.getLocation() == null || target.getLocation() == null)\n                        // was: \"--\"\n                        return null;\n                    // PERF\n                    return s.distanceTo(target) + \" km\";\n                }\n                // can't happen\n                return null;\n            } finally {\n                long t2 = System.currentTimeMillis();\n                total += t2 - t1;\n                number++;\n                if (number == 500) {\n                    System.out.println(\"average time spent in getValueAt()=\" + (total / number) + \" ms\");\n                    total = number = 0;\n                }\n            }\n        }\n\n        private long total = 0, number = 0;\n\n        public void setValueAt(Object object, int row, int column) {\n            Site s = (Site) allSites.get(row);\n            String field = (String) columns.get(column);\n            Object oldval = getValueAt(row, column);\n            // no changes? so what.\n            if ((oldval != null && oldval.equals(object)) || (oldval == null && object != null && object.equals(\"\")))\n                return;\n            if (field.equals(\"id\"))\n                s.setId((String) object);\n            else if (field.equals(\"code\"))\n                s.setCode((String) object);\n            else if (field.equals(\"name\"))\n                s.setName((String) object);\n            else if (field.equals(\"folder\"))\n                s.setFolder((String) object);\n            else if (field.equals(\"species\"))\n                s.setSpecies((String) object);\n            else if (field.equals(\"comments\"))\n                s.setComments((String) object);\n            else if (field.equals(\"altitude\")) {\n                try {\n                    Integer val = Integer.parseInt(((String) object));\n                    s.setAltitude(val);\n                } catch (NumberFormatException nfe) {\n                    // ignore this if it's an invalid altitude\n                    return;\n                }\n            } else if (field.equals(\"country\"))\n                s.setCountry((String) object);\n            setDataModified(true);\n            // update the label\n            updateLabel();\n        }\n\n        public Class getColumnClass(int column) {\n            String field = (String) columns.get(column);\n            if (field.equals(\"latitude\") || field.equals(\"longitude\"))\n                return Location.class;\n            if (field.equals(\"country\"))\n                return Country.class;\n            return String.class;\n        }\n\n        public String getColumnName(int column) {\n            String field = (String) columns.get(column);\n            return field;\n        }\n\n        public boolean isCellEditable(int row, int column) {\n            String field = (String) columns.get(column);\n            if (field.equals(\"distance\") || field.equals(\"type\"))\n                return false;\n            return true;\n        }\n    }\n\n    private JTable table;\n\n    private JButton plus, minus, editit;\n\n    public SiteEditorPanel(SiteEditor parent) {\n        this.parent = parent;\n        // get a COPY of the site list.\n        allSites = parent.getImmutableSitelist();\n        init();\n        // and we start with our first target.\n        target = (Site) allSites.get(0);\n    }\n\n    public void reloadSitelist() {\n        allSites = parent.getImmutableSitelist();\n        model.fireTableDataChanged();\n    }\n\n    private void init() {\n        // set up the table font...\n        final Font font = Font.decode(App.prefs.getPref(\"corina.deftable.font\"));\n        // table\n        // obnoxiously, the default editor doesn't respect the table font we set.\n        // override it!\n        if (font != null) {\n            table = new JTable() {\n\n                public Component prepareEditor(TableCellEditor editor, int row, int column) {\n                    Component c = super.prepareEditor(editor, row, column);\n                    c.setFont(font);\n                    return c;\n                }\n            };\n        } else\n            table = new JTable();\n        model = new SiteTableModel();\n        table.setModel(model);\n        // even/odd white/blue, with vertical gray lines\n        table.setDefaultRenderer(Object.class, new EvenOddRenderer());\n        table.setShowVerticalLines(true);\n        table.setShowHorizontalLines(false);\n        table.setGridColor(Color.lightGray.brighter());\n        table.setRowSelectionAllowed(true);\n        table.getSelectionModel().setSelectionMode(ListSelectionModel.SINGLE_SELECTION);\n        if (font != null) {\n            table.setFont(font);\n            table.setRowHeight(font.getSize() + 4);\n        }\n        JScrollPane scroll = new JScrollPane(table);\n        scroll.setVerticalScrollBarPolicy(JScrollPane.VERTICAL_SCROLLBAR_ALWAYS);\n        scroll.setHorizontalScrollBarPolicy(JScrollPane.HORIZONTAL_SCROLLBAR_AS_NEEDED);\n        // click-to-sort\n        table.getTableHeader().addMouseListener(new SiteEditorSorter());\n        // table popup\n        JPopupMenu sitePopup = new SitePopup();\n        table.addMouseListener(new PopupListener(sitePopup));\n        table.addMouseListener(new MouseAdapter() {\n\n            public void mouseClicked(MouseEvent e) {\n                if (e.getClickCount() == 2) {\n                    int i = table.getSelectedRow();\n                    Site site = (Site) allSites.get(i);\n                    SiteInfoDialog sid = new SiteInfoDialog(site, (JFrame) table.getTopLevelAncestor());\n                    if (sid.shouldSave())\n                        setDataModified(true);\n                }\n            }\n        });\n        // BUT: on double-click, do something else.\n        // make a PopupDoubleClickListener(popup, doubleClickRunnable)?\n        // can i make a DoubleClickListener(doubleClickRunnable), and add\n        // them separately?\n        // buttons\n        minus = new JButton(Builder.getIcon(\"minus.png\"));\n        plus = new JButton(Builder.getIcon(\"plus.png\"));\n        editit = new JButton(\"Edit...\");\n        editit.setPreferredSize(new Dimension(editit.getPreferredSize().width, plus.getPreferredSize().height));\n        Action editAction = new AbstractAction(\"editit\") {\n\n            public void actionPerformed(ActionEvent e) {\n                // same as double-click: REFACTOR\n                int i = table.getSelectedRow();\n                Site site = (Site) allSites.get(i);\n                SiteInfoDialog sid = new SiteInfoDialog(site, (JFrame) table.getTopLevelAncestor());\n                if (sid.shouldSave())\n                    setDataModified(true);\n            }\n        };\n        // obnoxiously, this code below makes ctrl-e edit.\n        InputMap editimap = editit.getInputMap(WHEN_IN_FOCUSED_WINDOW);\n        ActionMap editamap = editit.getActionMap();\n        KeyStroke ctrle = KeyStroke.getKeyStroke(KeyEvent.VK_E, InputEvent.CTRL_MASK);\n        editimap.put(ctrle, editAction.getValue(Action.NAME));\n        editamap.put(editAction.getValue(Action.NAME), editAction);\n        editit.addActionListener(editAction);\n        minus.addActionListener(new ActionListener() {\n\n            public void actionPerformed(ActionEvent e) {\n                int i = table.getSelectedRow();\n                if (i < 0)\n                    return;\n                Site site = (Site) allSites.get(i);\n                int ret = JOptionPane.showConfirmDialog(table.getTopLevelAncestor(), \"Are you sure you wish to delete information for the site:\\n\" + site.getName() + \"?\\n\" + \"This operation is not undoable.\", \"Remove site?\", JOptionPane.YES_NO_OPTION);\n                // delete it, and don't forget to save.\n                if (ret == JOptionPane.YES_OPTION) {\n                    allSites.remove(site);\n                    setDataModified(true);\n                }\n            }\n        });\n        plus.addActionListener(new ActionListener() {\n\n            public void actionPerformed(ActionEvent e) {\n                Site site = new Site();\n                SiteInfoDialog sid = new SiteInfoDialog(site, (JFrame) table.getTopLevelAncestor());\n                if (sid.shouldSave()) {\n                    allSites.add(site);\n                    Sort.sort(allSites, sortField);\n                    if (sortBackwards)\n                        Collections.reverse(allSites);\n                    setDataModified(true);\n                }\n            }\n        });\n        // label\n        label = new JLabel();\n        label.setBorder(BorderFactory.createEmptyBorder(2, 10, 2, 2));\n        updateLabel();\n        table.getSelectionModel().addListSelectionListener(new ListSelectionListener() {\n\n            public void valueChanged(ListSelectionEvent e) {\n                updateLabel();\n            }\n        });\n        // more table init\n        Sort.sort(allSites, sortField);\n        table.getColumnModel().getColumn(0).setPreferredWidth(300);\n        table.setDefaultRenderer(Country.class, new CountryRenderer());\n        table.setDefaultEditor(Location.class, new LocationEditor());\n        table.setDefaultEditor(Country.class, new CountryEditor());\n        JPanel buttons = Layout.buttonLayout(editit, minus, plus);\n        buttons.setBorder(BorderFactory.createEmptyBorder(4, 4, 4, 4));\n        // bottom = label + buttons\n        JPanel bottom = Layout.borderLayout(null, label, null, buttons, null);\n        // NEW: panel\n        // default is flow, for some reason\n        setLayout(new BorderLayout());\n        add(Layout.borderLayout(null, null, scroll, null, bottom));\n    }\n\n    private String sortField = \"name\";\n\n    private boolean sortBackwards = false;\n\n    // update the label at the bottom; to be called wehnever the number of sites,\n    // number of visible sites, or number of selected sites changes.\n    private void updateLabel() {\n        StringBuffer text = new StringBuffer();\n        if (allSites.size() == 1)\n            text.append(\"1 site\");\n        else\n            text.append(allSites.size() + \" sites.\");\n        int i = table.getSelectedRow();\n        if (i < 0) {\n            minus.setEnabled(false);\n            editit.setEnabled(false);\n        } else {\n            minus.setEnabled(true);\n            editit.setEnabled(true);\n            Site site = (Site) allSites.get(i);\n            text.append(\" \" + site.getName() + \" selected.\");\n        }\n        label.setText(text.toString());\n    }\n\n    private JLabel label;\n\n    // for right-clicking on a site:\n    // -- Show on Map\n    // -- Get Info (cmd-I)\n    // -- Mark as Target (cmd-T)\n    private class SitePopup extends JPopupMenu {\n\n        SitePopup() {\n            // iick...\n            final JMenuItem info = new JMenuItem(\"Edit...\");\n            info.setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_E, InputEvent.CTRL_MASK));\n            info.addActionListener(new AbstractAction() {\n\n                public void actionPerformed(ActionEvent e) {\n                    // same as double-click: REFACTOR\n                    int i = table.getSelectedRow();\n                    Site site = (Site) allSites.get(i);\n                    SiteInfoDialog sid = new SiteInfoDialog(site, (JFrame) table.getTopLevelAncestor());\n                    if (sid.shouldSave())\n                        setDataModified(true);\n                }\n            });\n            add(info);\n            addSeparator();\n            JMenuItem show = new JMenuItem(\"Show on Map\");\n            show.addActionListener(new AbstractAction() {\n\n                public void actionPerformed(ActionEvent e) {\n                    int i = table.getSelectedRow();\n                    Site site = (Site) allSites.get(i);\n                    // ahhh! horrible kludge, but it works ;)\n                    new MapFrame(site, site);\n                }\n            });\n            add(show);\n            JMenuItem mark = Builder.makeMenuItem(\"mark_as_target\");\n            mark.addActionListener(new AbstractAction() {\n\n                public void actionPerformed(ActionEvent e) {\n                    markSelectionAsTarget();\n                }\n            });\n            add(mark);\n        }\n    }\n\n    // whatever the selected site is, make that the new target.\n    // ASSUMES: only one site is selected!\n    public void markSelectionAsTarget() {\n        // get selected site -- EXTRACT METHOD\n        int i = table.getSelectedRow();\n        Site site = (Site) allSites.get(i);\n        // set target\n        setTarget(site);\n    }\n\n    // even/odd row coloring.\n    // BUG: doesn't color checkbox cells!\n    // QUESTION: what's a jcheckbox with background=blue look like?\n    // (i.e., do i need to make col 0 non-opaque, and paint blue first?)\n    private static class EvenOddRenderer extends DefaultTableCellRenderer {\n\n        public Component getTableCellRendererComponent(JTable table, Object value, boolean isSelected, boolean hasFocus, int row, int column) {\n            Component c = super.getTableCellRendererComponent(table, value, isSelected, hasFocus, row, column);\n            JComponent j = (JComponent) c;\n            j.setOpaque(true);\n            Color fore = (isSelected ? table.getSelectionForeground() : table.getForeground());\n            Color back = (isSelected ? table.getSelectionBackground() : table.getBackground());\n            if ((row % 2) == 0 && !isSelected)\n                back = Browser.ODD_ROW_COLOR;\n            c.setForeground(fore);\n            c.setBackground(back);\n            return c;\n        }\n    }\n\n    class LocationEditor extends AbstractCellEditor implements TableCellEditor, ActionListener {\n\n        private JButton button;\n\n        private Site site;\n\n        protected static final String EDIT = \"edit\";\n\n        public LocationEditor() {\n            button = new JButton();\n            button.setActionCommand(EDIT);\n            button.addActionListener(this);\n            button.setBorderPainted(false);\n        }\n\n        public Object getCellEditorValue() {\n            return site.getLocation();\n        }\n\n        public void actionPerformed(ActionEvent e) {\n            if (EDIT.equals(e.getActionCommand())) {\n                new LocationEditorDialog(site);\n                fireEditingStopped();\n            }\n        }\n\n        public Component getTableCellEditorComponent(JTable table, Object value, boolean isSelected, int row, int column) {\n            site = (Site) allSites.get(row);\n            return button;\n        }\n    }\n\n    private class CountryRenderer extends EvenOddRenderer {\n\n        public CountryRenderer() {\n            super();\n        }\n\n        public void setValue(Object value) {\n            if (value instanceof String) {\n                String country = (String) value;\n                try {\n                    setText(Country.getName(country));\n                } catch (IllegalArgumentException iee) {\n                    setText(Country.badCountry(country));\n                }\n            }\n        }\n    }\n\n    private class CountryEditor extends AbstractCellEditor implements TableCellEditor, ActionListener {\n\n        private JButton button;\n\n        private String country;\n\n        protected static final String EDIT = \"edit\";\n\n        public CountryEditor() {\n            button = new JButton();\n            button.setActionCommand(EDIT);\n            button.addActionListener(this);\n            button.setBorderPainted(false);\n        }\n\n        public Object getCellEditorValue() {\n            return country;\n        }\n\n        public void actionPerformed(ActionEvent e) {\n            if (EDIT.equals(e.getActionCommand())) {\n                country = CountryDialog.showDialog(null, country);\n                fireEditingStopped();\n            }\n        }\n\n        public Component getTableCellEditorComponent(JTable table, Object value, boolean isSelected, int row, int column) {\n            country = ((Site) allSites.get(row)).getCountry();\n            return button;\n        }\n    }\n\n    public void setDataModified(boolean isModified) {\n        model.fireTableDataChanged();\n        parent.setTitle(isModified ? \"[Modified]\" : null);\n        dataModified = isModified;\n    }\n\n    public boolean isDataModified() {\n        return dataModified;\n    }\n}\n",
		"id": "/EvoSuiteBenchmark/35_corina/src/main/java/corina/site/SiteEditorPanel.java",
		"test_prompt": "// SiteEditorPanelTest.java\npackage corina.site;\n\nimport corina.map.MapFrame;\nimport corina.prefs.Prefs;\nimport corina.site.Site;\nimport corina.site.SiteDB;\nimport corina.site.Country;\nimport corina.site.SiteInfoDialog;\nimport corina.util.PopupListener;\nimport corina.ui.Builder;\nimport corina.gui.Layout;\n// (for ODD_ROW_COLOR)\nimport corina.browser.Browser;\nimport corina.core.App;\nimport corina.util.Sort;\nimport java.util.Collections;\nimport java.util.Comparator;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.awt.Color;\nimport java.awt.Component;\nimport java.awt.BorderLayout;\nimport java.awt.Dimension;\nimport java.awt.Event;\nimport java.awt.Font;\nimport java.awt.event.ActionListener;\nimport java.awt.event.AdjustmentEvent;\nimport java.awt.event.InputEvent;\nimport java.awt.event.KeyEvent;\nimport java.awt.event.MouseAdapter;\nimport java.awt.event.MouseEvent;\nimport java.awt.event.ActionEvent;\n// !\nimport javax.swing.*;\nimport javax.swing.event.ListSelectionListener;\nimport javax.swing.event.ListSelectionEvent;\nimport javax.swing.table.AbstractTableModel;\nimport javax.swing.table.DefaultTableCellRenderer;\nimport javax.swing.table.TableCellEditor;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link SiteEditorPanel}.\n* It contains ten unit test cases for the {@link SiteEditorPanel#isDataModified()} method.\n*/\nclass SiteEditorPanelTest {"
	},
	{
		"original_code": "// SiteEditor.java\n/**\n */\npackage corina.site;\n\nimport java.awt.Dimension;\nimport java.awt.Window;\nimport java.util.ArrayList;\nimport java.util.List;\nimport javax.swing.JMenuBar;\nimport javax.swing.JScrollPane;\nimport corina.Build;\nimport corina.core.App;\nimport corina.gui.XFrame;\nimport corina.gui.menus.*;\nimport corina.util.*;\nimport corina.gui.SaveableDocument;\n\n/**\n * @author Lucas Madar\n */\npublic class SiteEditor extends XFrame implements SaveableDocument {\n\n    SiteEditorPanel sitePanel;\n\n    public SiteEditor() {\n        super();\n        setTitle(null);\n        // make our copy of the site list\n        createImmutableSitelist();\n        // add the site menu\n        sitePanel = new SiteEditorPanel(this);\n        setContentPane(sitePanel);\n        // add menubar\n        JMenuBar menubar = new JMenuBar();\n        menubar.add(new FileMenu(this));\n        menubar.add(new EditMenu());\n        //menubar.add(new MapViewMenu());\n        if (App.platform.isMac())\n            menubar.add(new WindowMenu(this));\n        menubar.add(new HelpMenu());\n        setJMenuBar(menubar);\n        // set size, and show it\n        pack();\n        setSize(new Dimension(700, 400));\n        Center.center(this);\n        setVisible(true);\n    }\n\n    public void setTitle(String appendage) {\n        if (appendage != null)\n            super.setTitle(\"Site List \" + appendage + \" - \" + Build.VERSION + \" \" + Build.TIMESTAMP);\n        else\n            super.setTitle(\"Site List - \" + Build.VERSION + \" \" + Build.TIMESTAMP);\n    }\n\n    public List getImmutableSitelist() {\n        return mySites;\n    }\n\n    private void createImmutableSitelist() {\n        List refSites = SiteDB.getSiteDB().sites;\n        mySites = new ArrayList(refSites.size());\n        // our list of sites should be immutable!\n        mySites = new ArrayList(refSites.size());\n        for (int i = 0; i < refSites.size(); i++) mySites.add(((Site) refSites.get(i)).clone());\n    }\n\n    // immutable site list\n    private List mySites;\n\n    // saveabledocument interface\n    public boolean isSaved() {\n        return !sitePanel.isDataModified();\n    }\n\n    public String getFilename() {\n        return null;\n    }\n\n    public void setFilename(String x) {\n        // don't do anything.\n    }\n\n    public boolean isNameChangeable() {\n        // this is the Site DB. We can't save as.\n        return false;\n    }\n\n    public String getDocumentTitle() {\n        return \"Corina Site Database\";\n    }\n\n    public void save() {\n        // set our sites to be the global list of sites\n        SiteDB.getSiteDB().sites = mySites;\n        // create a new cloned list of sites (from the ones we just installed!)\n        createImmutableSitelist();\n        sitePanel.reloadSitelist();\n        // Save the new site list to disk\n        // if we're successful,\n        // notify that we're no longer modified, plus we should redraw.\n        if (SiteDB.getSiteDB().save())\n            sitePanel.setDataModified(false);\n    }\n}\n",
		"id": "/EvoSuiteBenchmark/35_corina/src/main/java/corina/site/SiteEditor_0Test.java",
		"test_prompt": "// SiteEditor_0Test.java\npackage corina.site;\n\nimport java.awt.Dimension;\nimport java.awt.Window;\nimport java.util.ArrayList;\nimport java.util.List;\nimport javax.swing.JMenuBar;\nimport javax.swing.JScrollPane;\nimport corina.Build;\nimport corina.core.App;\nimport corina.gui.XFrame;\nimport corina.gui.menus.*;\nimport corina.util.*;\nimport corina.gui.SaveableDocument;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link SiteEditor}.\n* It contains ten unit test cases for the {@link SiteEditor#isSaved()} method.\n*/\nclass SiteEditor_0Test {"
	},
	{
		"original_code": "// SiteEditor.java\n/**\n */\npackage corina.site;\n\nimport java.awt.Dimension;\nimport java.awt.Window;\nimport java.util.ArrayList;\nimport java.util.List;\nimport javax.swing.JMenuBar;\nimport javax.swing.JScrollPane;\nimport corina.Build;\nimport corina.core.App;\nimport corina.gui.XFrame;\nimport corina.gui.menus.*;\nimport corina.util.*;\nimport corina.gui.SaveableDocument;\n\n/**\n * @author Lucas Madar\n */\npublic class SiteEditor extends XFrame implements SaveableDocument {\n\n    SiteEditorPanel sitePanel;\n\n    public SiteEditor() {\n        super();\n        setTitle(null);\n        // make our copy of the site list\n        createImmutableSitelist();\n        // add the site menu\n        sitePanel = new SiteEditorPanel(this);\n        setContentPane(sitePanel);\n        // add menubar\n        JMenuBar menubar = new JMenuBar();\n        menubar.add(new FileMenu(this));\n        menubar.add(new EditMenu());\n        //menubar.add(new MapViewMenu());\n        if (App.platform.isMac())\n            menubar.add(new WindowMenu(this));\n        menubar.add(new HelpMenu());\n        setJMenuBar(menubar);\n        // set size, and show it\n        pack();\n        setSize(new Dimension(700, 400));\n        Center.center(this);\n        setVisible(true);\n    }\n\n    public void setTitle(String appendage) {\n        if (appendage != null)\n            super.setTitle(\"Site List \" + appendage + \" - \" + Build.VERSION + \" \" + Build.TIMESTAMP);\n        else\n            super.setTitle(\"Site List - \" + Build.VERSION + \" \" + Build.TIMESTAMP);\n    }\n\n    public List getImmutableSitelist() {\n        return mySites;\n    }\n\n    private void createImmutableSitelist() {\n        List refSites = SiteDB.getSiteDB().sites;\n        mySites = new ArrayList(refSites.size());\n        // our list of sites should be immutable!\n        mySites = new ArrayList(refSites.size());\n        for (int i = 0; i < refSites.size(); i++) mySites.add(((Site) refSites.get(i)).clone());\n    }\n\n    // immutable site list\n    private List mySites;\n\n    // saveabledocument interface\n    public boolean isSaved() {\n        return !sitePanel.isDataModified();\n    }\n\n    public String getFilename() {\n        return null;\n    }\n\n    public void setFilename(String x) {\n        // don't do anything.\n    }\n\n    public boolean isNameChangeable() {\n        // this is the Site DB. We can't save as.\n        return false;\n    }\n\n    public String getDocumentTitle() {\n        return \"Corina Site Database\";\n    }\n\n    public void save() {\n        // set our sites to be the global list of sites\n        SiteDB.getSiteDB().sites = mySites;\n        // create a new cloned list of sites (from the ones we just installed!)\n        createImmutableSitelist();\n        sitePanel.reloadSitelist();\n        // Save the new site list to disk\n        // if we're successful,\n        // notify that we're no longer modified, plus we should redraw.\n        if (SiteDB.getSiteDB().save())\n            sitePanel.setDataModified(false);\n    }\n}\n",
		"id": "/EvoSuiteBenchmark/35_corina/src/main/java/corina/site/SiteEditor_1Test.java",
		"test_prompt": "// SiteEditor_1Test.java\npackage corina.site;\n\nimport java.awt.Dimension;\nimport java.awt.Window;\nimport java.util.ArrayList;\nimport java.util.List;\nimport javax.swing.JMenuBar;\nimport javax.swing.JScrollPane;\nimport corina.Build;\nimport corina.core.App;\nimport corina.gui.XFrame;\nimport corina.gui.menus.*;\nimport corina.util.*;\nimport corina.gui.SaveableDocument;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link SiteEditor}.\n* It contains ten unit test cases for the {@link SiteEditor#isNameChangeable()} method.\n*/\nclass SiteEditor_1Test {"
	},
	{
		"original_code": "// SiteInfoDialog.java\n//\n// This file is part of Corina.\n//\n// Corina is free software; you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation; either version 2 of the License, or\n// (at your option) any later version.\n//\n// Corina is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Corina; if not, write to the Free Software\n// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n//\n// Copyright 2001 Ken Harris <kbh7@cornell.edu>\n//\npackage corina.site;\n\nimport corina.gui.Layout;\nimport corina.gui.Help;\nimport corina.util.OKCancel;\nimport corina.util.Center;\nimport corina.ui.I18n;\nimport corina.ui.Builder;\nimport java.awt.*;\nimport java.awt.event.ActionEvent;\nimport javax.swing.*;\n\n/**\n *    A dialog which shows Site info, and lets the user edit it.\n *\n * <p>TODO:\n * <ul>\n *    <li>make 'ok' put data back into site object: location, altitude,\n *    folder\n *\n *    <li>put folder line at bottom: list folder, and \"change...\" button\n *    <li>also for folder line, allow open-in-finder, open-in-browser\n *\n *    <li>keep track of which sites (by hash) are being info'd, and disallow dupes\n *    <li>sitedb shouldn't ever be explicitly named.  Site.getSite(\"ZKB\").\n *        (it should also be able to be database- or file-backed.)\n *    <li>site shouldn't return null\n *    <li>wrap comments, so the horiz scrollbar is never needed\n *    <li>convert * to degree sign in location field as-you-type?\n *    <li>\"type\" and \"species\" words aren't lined up properly (altitude,\n *    either: the []-meters and ancient-medieval-forest-unknown panels\n *    have nonzero padding, i think)\n *    <li>refactor and javadoc\n *    <li>add \"help\" button?\n *    <li>i18n of folder stuff\n *    <li>i18n of names of all countries?  (nobody will translate them all, but they could translate some common ones)\n *    <li>add \"import from gps\" feature (sets loc, alt)\n *    <li>put \"folder\" stuff on its own tab?\n *    <li>make \"masters\"/\"nonfits\" on a tab (or 2 tabs)?\n * </ul>\n *\n *    @see corina.site.CountryPopup\n *    @see corina.site.Country\n *\n *    @author Ken Harris &lt;kbh7 <i style=\"color: gray\">at</i> cornell <i style=\"color: gray\">dot</i> edu&gt;\n *    @version $Id: SiteInfoDialog.java,v 1.2 2006/06/12 22:19:00 lucasmo Exp $\n */\npublic class SiteInfoDialog extends JDialog {\n\n    private static Component strutH(int width) {\n        return Box.createHorizontalStrut(width);\n    }\n\n    private Site site;\n\n    private Site originalSite;\n\n    private JTextField name, code, id;\n\n    // ADDME: location, altitude\n    private CountryPopup country;\n\n    private JTextField species, location, altitude;\n\n    private JCheckBox ancient, medieval, forest, unknown;\n\n    private JTextArea comments;\n\n    private JButton location_edit;\n\n    private JTextField folder;\n\n    private boolean doSave = false;\n\n    // ADDME: folder\n    // display info for |site|;\n    // center over |window|, or on screen if null.\n    public SiteInfoDialog(Site infosite, Window window) {\n        super((Frame) window, infosite.getName(), true);\n        // save site reference\n        this.site = infosite;\n        this.originalSite = (Site) infosite.clone();\n        // set dialog title\n        setTitle(site.getName());\n        // id line\n        name = new JTextField(site.getName(), 40);\n        code = new JTextField(site.getCode(), 3);\n        id = new JTextField(site.getId(), 3);\n        JPanel line_1 = Layout.flowLayoutL(labelOnTop(\"site_name\", name), strutH(12), labelOnTop(\"site_code\", code), strutH(12), labelOnTop(\"site_id\", id));\n        // location line\n        // FIXME: getLocationAsString, getAltitudeAsString()\n        location = new JTextField(site.getLocation() == null ? \"\" : site.getLocation().toString(), 15);\n        location.setEditable(false);\n        location_edit = new JButton(\"Change\");\n        location_edit.setFont(location_edit.getFont().deriveFont(9.0f));\n        location_edit.setPreferredSize(new Dimension(20, 20));\n        final JDialog _parent = this;\n        location_edit.addActionListener(new AbstractAction() {\n\n            public void actionPerformed(ActionEvent e) {\n                new LocationEditorDialog(site, _parent);\n                location.setText(site.getLocation() == null ? \"\" : site.getLocation().toString());\n            }\n        });\n        altitude = new JTextField(site.getAltitude() == null ? \"\" : site.getAltitude().toString(), 5);\n        country = new CountryPopup(this, site.getCountry());\n        JPanel altitude2 = Layout.flowLayoutL(altitude, new JLabel(\" \" + I18n.getText(\"meters\")));\n        JPanel line_2 = Layout.flowLayoutL(labelOnTop(\"site_location\", location), labelOnTopNotKey(\" \", location_edit), strutH(12), labelOnTop(\"site_altitude\", altitude2), strutH(12), labelOnTop(\"site_country\", country));\n        // type line\n        species = new JTextField(site.getSpecies(), 20);\n        boolean[] types = site.getTypes();\n        ancient = new JCheckBox(I18n.getText(\"site_ancient\"), types[0]);\n        medieval = new JCheckBox(I18n.getText(\"site_medieval\"), types[1]);\n        forest = new JCheckBox(I18n.getText(\"site_forest\"), types[2]);\n        unknown = new JCheckBox(I18n.getText(\"site_unknown\"), types[3]);\n        JPanel type = Layout.flowLayoutL(ancient, medieval, forest, unknown);\n        JPanel line_3 = Layout.flowLayoutL(labelOnTop(\"site_species\", species), strutH(12), labelOnTop(\"site_type\", type));\n        folder = new JTextField(site.getFolder(), 40);\n        JPanel line_4 = Layout.flowLayoutL(labelOnTop(\"storage_path\", folder));\n        // comments line\n        comments = new JTextArea(site.getComments(), 3, 50);\n        JPanel line_5 = Layout.flowLayoutL(labelOnTop(\"site_comments\", new JScrollPane(comments)));\n        // put them all together\n        JPanel content = Layout.boxLayoutY(line_1, line_2, line_3, line_4, line_5);\n        // buttons line\n        JButton help = Builder.makeButton(\"help\");\n        Help.addToButton(help, \"editing_site_info\");\n        JButton cancel = Builder.makeButton(\"cancel\");\n        final JButton ok = Builder.makeButton(\"ok\");\n        AbstractAction buttonAction = new AbstractAction() {\n\n            public void actionPerformed(ActionEvent e) {\n                // if 'ok' clicked, writeback\n                boolean kill = true;\n                if (e.getSource() == ok) {\n                    if (!writeback())\n                        kill = false;\n                    else\n                        // we updated the site.\n                        doSave = true;\n                }\n                // close this dialog if we're told to kill\n                if (kill)\n                    dispose();\n            }\n        };\n        cancel.addActionListener(buttonAction);\n        ok.addActionListener(buttonAction);\n        JPanel buttons = Layout.buttonLayout(help, null, cancel, ok);\n        buttons.setBorder(BorderFactory.createEmptyBorder(10, 0, 0, 0));\n        // everything together\n        JPanel everything = Layout.borderLayout(null, null, content, null, buttons);\n        everything.setBorder(BorderFactory.createEmptyBorder(10, 10, 10, 10));\n        setContentPane(everything);\n        name.selectAll();\n        setResizable(false);\n        OKCancel.addKeyboardDefaults(ok);\n        setDefaultCloseOperation(JDialog.DISPOSE_ON_CLOSE);\n        pack();\n        if (window != null)\n            Center.center(this, window);\n        else\n            // (on screen)\n            Center.center(this);\n        show();\n    }\n\n    private boolean writeback() {\n        Location loc;\n        Integer alt;\n        try {\n            // try to parse location, if it's set at all.\n            String text = location.getText();\n            if (text.length() == 0)\n                loc = null;\n            else\n                loc = new Location(text);\n        } catch (NumberFormatException nfe) {\n            JOptionPane.showMessageDialog(this, \"Invalid location set.\");\n            return false;\n        }\n        try {\n            String text = altitude.getText();\n            if (text.length() == 0)\n                alt = null;\n            else\n                alt = Integer.parseInt(text);\n        } catch (NumberFormatException nfe) {\n            JOptionPane.showMessageDialog(this, \"Invalid altitude, must be numeric!\");\n            return false;\n        }\n        // - name, code, id\n        site.setName(name.getText());\n        site.setCode(code.getText());\n        site.setId(id.getText());\n        // - location, altitude, country\n        site.setLocation(loc);\n        site.setAltitude(alt);\n        site.setCountry(country.getCountry());\n        // - species, type\n        site.setSpecies(species.getText());\n        site.setTypes(new boolean[] { ancient.isSelected(), medieval.isSelected(), forest.isSelected(), unknown.isSelected() });\n        // - comments\n        site.setComments(comments.getText());\n        // TODO: save this site now\n        // future: site.getStorage().save(site);\n        // no, don't do this. let whatever is calling our panel save it.\n        return true;\n    }\n\n    // (note: label is actually an i18n key!)\n    private static JComponent labelOnTop(String key, JComponent component) {\n        String text = I18n.getText(key) + \":\";\n        return Layout.borderLayout(new JLabel(text), null, component, null, null);\n    }\n\n    private static JComponent labelOnTopNotKey(String key, JComponent component) {\n        String text = key;\n        return Layout.borderLayout(new JLabel(text), null, component, null, null);\n    }\n\n    public boolean shouldSave() {\n        // check for modification. Let 'ok' equal 'cancel' when the site was not modified at all.\n        if (doSave && site.equals(originalSite))\n            return false;\n        return doSave;\n    }\n}\n",
		"id": "/EvoSuiteBenchmark/35_corina/src/main/java/corina/site/SiteInfoDialog.java",
		"test_prompt": "// SiteInfoDialogTest.java\n// This file is part of Corina.\n//\n// Corina is free software; you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation; either version 2 of the License, or\n// (at your option) any later version.\n//\n// Corina is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Corina; if not, write to the Free Software\n// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n//\n// Copyright 2001 Ken Harris <kbh7@cornell.edu>\n//\npackage corina.site;\n\nimport corina.gui.Layout;\nimport corina.gui.Help;\nimport corina.util.OKCancel;\nimport corina.util.Center;\nimport corina.ui.I18n;\nimport corina.ui.Builder;\nimport java.awt.*;\nimport java.awt.event.ActionEvent;\nimport javax.swing.*;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link SiteInfoDialog}.\n* It contains ten unit test cases for the {@link SiteInfoDialog#shouldSave()} method.\n*/\nclass SiteInfoDialogTest {"
	},
	{
		"original_code": "// Location.java\n//\n// This file is part of Corina.\n//\n// Corina is free software; you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation; either version 2 of the License, or\n// (at your option) any later version.\n//\n// Corina is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Corina; if not, write to the Free Software\n// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n//\n// Copyright 2003 Ken Harris <kbh7@cornell.edu>\n//\npackage corina.site;\n\nimport corina.map.Point3D;\nimport corina.ui.I18n;\nimport java.util.StringTokenizer;\nimport java.text.DecimalFormat;\n\n/**\n *   A (latitude, longitude) location on the earth.\n *\n *   <p>Latitudes run from -90 to 90 degrees; longitudes run from -180 to 180 degrees.\n *   Positive latitudes are north; positive longitudes are east.</p>\n *\n *   <p>The accessors are a bit different than most classes, because there are two\n *   fairly natural ways to access latitude and longitude angles.\n *\n *   <ul>\n *     <li>The first is how you'd read or write them, with degrees, minutes, and seconds,\n *     like \"38&deg;15'N\".\n *\n *     <li>The second is more natural for computation, as a floating point number, like\n *     38.25.\n *   </ul>\n *\n *   <p>Since there are times you'd need both, both are provided.  There are 8\n *   accessors total, for each combination of get/set, latitude/longitude, and\n *   integer/floating point.  The methods that end with \"...AsDegrees()\" deal with\n *   floating point numbers, as degrees, and the methods that end with \"...AsSeconds()\"\n *   deal with integers, as seconds (60 seconds to a minute, 60 minutes to a degree).\n *   (Note that 1 second is about 30 meters at the equator.  You'll never need\n *   sub-second resolution.)</p>\n *\n *   <p>(It might be nice to have immutable Locations sometimes, but when rendering maps\n *   you need speed, speed, speed, and one of the best ways to make Java go faster is to\n *   generate less garbage for the GC to have to deal with.)</p>\n *\n *   <p>ISO 6709 provides an ASCII-only, locale-independent way to store\n *   latitude, longitude, and altitude.  ISO is\n *   <a href=\"http://www.iso.org/iso/en/CatalogueDetailPage.CatalogueDetail?CSNUMBER=13152\">charging\n *   30 bucks for it</a>, even though it's only a 3-page PDF.  Sigh.\n *   But you can get <a href=\"http://www.ftp.uni-erlangen.de/pub/doc/ISO/ISO-6709-summary\">the\n *   Cliff notes here</a>, or <a href=\"http://www.ftp.uni-erlangen.de/pub/doc/ISO/iso-6709.pdf\">the\n *   whole thing here</a>.</p>\n *\n *   <h2>Left to do:</h2>\n *   <ul>\n *     <li>Extend parseISO6709() to parse any ISO-6709 format\n *     <li>Decide if this class is threadsafe or not.\n *     <li>Location.copy() is a bad idea; get rid of it\n *   </ul>\n *\n *   @author Ken Harris &lt;kbh7 <i style=\"color: gray\">at</i> cornell <i style=\"color: gray\">dot</i> edu&gt;\n *   @version $Id: Location.java,v 1.3 2006/06/20 17:58:19 lucasmo Exp $\n */\npublic final class Location implements Cloneable {\n\n    //\n    // CONSTANTS\n    //\n    /**\n     *       Radius of the earth in kilometers.  From Miller & Schroeer,\n     *       <i>College Physics</i>, 6th ed: 6.38x10<sup>3</sup> km.\n     */\n    // 6.38 x 10^6 m\n    public final static float EARTH_RADIUS = 6.38e3f;\n\n    // limits on latitude and longitude, in seconds\n    private static final int MIN_LATITUDE = -90 * 3600;\n\n    private static final int MAX_LATITUDE = 90 * 3600;\n\n    private static final int MIN_LONGITUDE = -180 * 3600;\n\n    private static final int MAX_LONGITUDE = 180 * 3600 - 1;\n\n    // L10n of N/S/E/W -- i'll use these inside a loop, later,\n    // so i'll just keep them around.\n    private static final String NORTH = I18n.getText(\"north\");\n\n    private static final String SOUTH = I18n.getText(\"south\");\n\n    private static final String EAST = I18n.getText(\"east\");\n\n    private static final String WEST = I18n.getText(\"west\");\n\n    //\n    // FIELDS\n    //\n    // in seconds; positive latitudes are north, positive longitudes are east\n    private int latitude = 0;\n\n    private int longitude = 0;\n\n    //\n    // CLONING\n    //\n    /**\n     *       Make a clone of this Location.\n     *\n     *       @return a Location with the same latitude and longitude as this one\n     */\n    public Object clone() {\n        Location clone = new Location();\n        clone.latitude = this.latitude;\n        clone.longitude = this.longitude;\n        return clone;\n    }\n\n    /**\n     *       Copy the (latitude, longitude) from one location to another.\n     *\n     *       @param target the Location to copy from\n     *       @param source the Location to copy to\n     */\n    public static void copy(Location target, Location source) {\n        target.latitude = source.latitude;\n        target.longitude = source.longitude;\n    }\n\n    //\n    // ACCESSORS\n    //\n    /**\n     *       Return the latitude, in degrees.\n     *\n     *       @return the latitude, in degrees\n     */\n    public float getLatitudeAsDegrees() {\n        return latitude / 3600f;\n    }\n\n    /**\n     *       Return the longitude, in degrees.\n     *\n     *       @return the longitude, in degrees\n     */\n    public float getLongitudeAsDegrees() {\n        return longitude / 3600f;\n    }\n\n    /**\n     *       Set the latitude, in degrees.\n     *\n     *       @param degrees the new latitude, in degrees\n     */\n    public void setLatitudeAsDegrees(float degrees) {\n        int seconds = Math.round(degrees * 3600);\n        if (seconds < MIN_LATITUDE)\n            seconds = MIN_LATITUDE;\n        else if (seconds > MAX_LATITUDE)\n            seconds = MAX_LATITUDE;\n        this.latitude = seconds;\n    }\n\n    /**\n     *       Set the longitude, in degrees.\n     *\n     *       @param degrees the new longitude, in degrees\n     */\n    public void setLongitudeAsDegrees(float degrees) {\n        int seconds = Math.round(degrees * 3600);\n        // need to make sure the longitude is between -180 and 179 degrees.\n        // 180 degrees, for example, gets sent back down to -180.\n        // if i were doing degrees, i'd add 180, mod 360, sub 180.\n        // so just do that in seconds.\n        seconds += 180 * 3600;\n        seconds %= 360 * 3600;\n        if (seconds <= 0)\n            seconds += 180 * 3600;\n        else\n            seconds -= 180 * 3600;\n        this.longitude = seconds;\n    }\n\n    /**\n     *       Get the latitude, in seconds.\n     *\n     *       @return the latitude, in seconds\n     */\n    public int getLatitudeAsSeconds() {\n        return latitude;\n    }\n\n    /**\n     *       Get the longitude, in seconds.\n     *\n     *       @return the longitude, in seconds\n     */\n    public int getLongitudeAsSeconds() {\n        return longitude;\n    }\n\n    /**\n     *       Set the latitude, in seconds.\n     *\n     *       @param seconds the new latitude, in seconds\n     */\n    public void setLatitudeAsSeconds(int seconds) {\n        if (seconds < MIN_LATITUDE)\n            seconds = MIN_LATITUDE;\n        else if (seconds > MAX_LATITUDE)\n            seconds = MAX_LATITUDE;\n        this.latitude = seconds;\n    }\n\n    /**\n     *       Set the longitude, in seconds.\n     *\n     *       @param seconds the new longitude, in seconds\n     */\n    public void setLongitudeAsSeconds(int seconds) {\n        // make sure longitude is between -180 and 179 degrees.\n        // see setLongitudeAsDegrees().\n        seconds += 180 * 3600;\n        seconds %= 360 * 3600;\n        if (seconds <= 0)\n            seconds += 180 * 3600;\n        else\n            seconds -= 180 * 3600;\n        // PERF: make sure these are computed at compile-time, not run-time.\n        // FIXME: extract method normalizeLongitude() (lat, too, while you're at it)\n        this.longitude = seconds;\n    }\n\n    //\n    // CONSTRUCTORS\n    //\n    /**\n     * Default location: 0&deg;N 0&deg;E.\n     */\n    public Location() {\n        // do nothing\n    }\n\n    /**\n     *         Constructor, given a String.  The input format is perfectly\n     * \tcompatible with the output of toString(), but is lenient in\n     * \tcase users type in a location and can't type the degree-sign\n     *         &mdash; any gap between numbers works, so \"34*56' N 11 22W\" will\n     * \twork just fine.  It also accepts ISO-6709 format strings\n     *         (but only the \"+DDMMSS+DDDMMSS/\" version so far).\n     *\n     * \t@param string the String to parse\n     *         @exception NumberFormatException if the location can't be parsed\n     */\n    public Location(String string) throws NumberFormatException {\n        setLocation(string);\n    }\n\n    public void setLocation(String string) throws NumberFormatException {\n        if (isISO6709(string))\n            parseISO6709(string);\n        else\n            parseString(string);\n    }\n\n    private void parseString(String string) throws NumberFormatException {\n        String whitespace = \" \\t\\n\\r\";\n        String degreeMinuteSecond = \"\\u00B0*'\\\"\";\n        StringTokenizer tok = new StringTokenizer(string, whitespace + degreeMinuteSecond);\n        // mulitply by this to make seconds\n        int multiplier = 3600;\n        // total of the seconds so far\n        int total = 0;\n        // we'll barf unless we have exactly one of each.\n        int latitudeCount = 0, longitudeCount = 0;\n        while (tok.hasMoreTokens()) {\n            String token = tok.nextToken();\n            try {\n                // it's a number: multiply it, to make it seconds, and add it.\n                // (if we get too many numbers, like \"12*34'56''78'''N\",\n                // multiplier=0 after 3 of them, so it's automatically ignored.)\n                int number = Integer.parseInt(token);\n                total += number * multiplier;\n                multiplier /= 60;\n            } catch (NumberFormatException nfe) {\n                // it's not a number: it's N/S/E/W (if not, ignore it).\n                // assume, in any given locale, that compass points never\n                // differ from each other only by case.  users will love you.\n                String compassPoint = token.toUpperCase();\n                if (compassPoint.equals(NORTH)) {\n                    setLatitudeAsSeconds(total);\n                    latitudeCount++;\n                } else if (compassPoint.equals(SOUTH)) {\n                    setLatitudeAsSeconds(-total);\n                    latitudeCount++;\n                } else if (compassPoint.equals(EAST)) {\n                    setLongitudeAsSeconds(total);\n                    longitudeCount++;\n                } else if (compassPoint.equals(WEST)) {\n                    setLongitudeAsSeconds(-total);\n                    longitudeCount++;\n                }\n                // reset multiplier, total\n                multiplier = 3600;\n                total = 0;\n            }\n        }\n        // a location has exactly one latitude, and one longitude.  double-check this.\n        if (latitudeCount != 1 || longitudeCount != 1)\n            throw new NumberFormatException(\"bad number of terms in location!\");\n    }\n\n    // this method only knows how to parse the \"+DDMMSS+DDDMMSS/\" format so far\n    // (i.e., the format that toISO6709() returns)\n    private void parseISO6709(String string) throws NumberFormatException {\n        if (string.length() != 16)\n            throw new NumberFormatException(\"don't know how to parse all ISO-6709 locations yet!\");\n        boolean north = (string.charAt(0) == '+');\n        int latDegs = Integer.parseInt(string.substring(1, 3));\n        int latMins = Integer.parseInt(string.substring(3, 5));\n        int latSecs = Integer.parseInt(string.substring(5, 7));\n        setLatitudeAsSeconds((north ? +1 : -1) * (latDegs * 3600 + latMins * 60 + latSecs));\n        boolean east = (string.charAt(7) == '+');\n        int longDegs = Integer.parseInt(string.substring(8, 11));\n        int longMins = Integer.parseInt(string.substring(11, 13));\n        int longSecs = Integer.parseInt(string.substring(13, 15));\n        setLongitudeAsSeconds((east ? +1 : -1) * (longDegs * 3600 + longMins * 60 + longSecs));\n    }\n\n    //\n    // TOSTRING\n    //\n    /*\n     * For location editor\n     */\n    public String getEasyString() {\n        // extract degrees and minutes, latitude and longitude\n        int latDegs = Math.abs(getLatitudeAsSeconds()) / 3600;\n        int latMins = Math.abs(getLatitudeAsSeconds()) / 60 - latDegs * 60;\n        int longDegs = Math.abs(getLongitudeAsSeconds()) / 3600;\n        int longMins = Math.abs(getLongitudeAsSeconds()) / 60 - longDegs * 60;\n        // hemispheres\n        String latHemi = (latitude > 0 ? NORTH : SOUTH);\n        String longHemi = (longitude > 0 ? EAST : WEST);\n        // assemble it into a string\n        return latDegs + \",\" + latMins + \",\" + latHemi + \",\" + longDegs + \",\" + longMins + \",\" + longHemi;\n    }\n\n    public String getLatitudeAsString() {\n        // extract degrees and minutes\n        int latDegs = Math.abs(getLatitudeAsSeconds()) / 3600;\n        int latMins = Math.abs(getLatitudeAsSeconds()) / 60 - latDegs * 60;\n        // hemisphere\n        String latHemi = (latitude > 0 ? NORTH : SOUTH);\n        return latDegs + DEGREE_SIGN + latMins + \"'\" + latHemi;\n    }\n\n    public String getLongitudeAsString() {\n        // extract degrees and minutes\n        int longDegs = Math.abs(getLongitudeAsSeconds()) / 3600;\n        int longMins = Math.abs(getLongitudeAsSeconds()) / 60 - longDegs * 60;\n        // hemispheres\n        String longHemi = (longitude > 0 ? EAST : WEST);\n        return longDegs + DEGREE_SIGN + longMins + \"'\" + longHemi;\n    }\n\n    /**\n     *       Return this location as a nicely-formatted string.  The string returned by this\n     *       method is locale-dependent, and should only be used for presentation to the user,\n     *       not for long-term storage; for that, see the toISO6709() method.\n     *\n     *       @see #toISO6709\n     *\n     *       @return this location as a string\n     */\n    public String toString() {\n        return getLatitudeAsString() + \" \" + getLongitudeAsString();\n    }\n\n    // unicode DEGREE SIGN character\n    public static final String DEGREE_SIGN = \"\\u00B0\";\n\n    // is this string an ISO-6709 location?\n    private boolean isISO6709(String check) {\n        return (check.startsWith(\"+\") || check.startsWith(\"-\")) && check.endsWith(\"/\");\n    }\n\n    /**\n     *       Convert this location to an ISO-6709 string.  (See above for where to ind ISO-6709\n     *       information.)\n     *\n     *       <p>This method always uses the ISO-6709 format <code>+DDMMSS+DDDMMSS/</code>.</p>\n     *\n     *       @return this Location as an ISO-6709 string\n     */\n    public String toISO6709() {\n        StringBuffer buf = new StringBuffer();\n        DecimalFormat twoDigits = new DecimalFormat(\"00\");\n        DecimalFormat threeDigits = new DecimalFormat(\"000\");\n        // latitude\n        buf.append(latitude < 0 ? \"-\" : \"+\");\n        int latDegs = Math.abs(getLatitudeAsSeconds()) / 3600;\n        int latMins = Math.abs(getLatitudeAsSeconds()) / 60 - latDegs * 60;\n        int latSecs = Math.abs(getLatitudeAsSeconds()) - latDegs * 3600 - latMins * 60;\n        buf.append(twoDigits.format(latDegs));\n        buf.append(twoDigits.format(latMins));\n        buf.append(twoDigits.format(latSecs));\n        // longitude\n        buf.append(longitude < 0 ? \"-\" : \"+\");\n        int longDegs = Math.abs(getLongitudeAsSeconds()) / 3600;\n        int longMins = Math.abs(getLongitudeAsSeconds()) / 60 - longDegs * 60;\n        int longSecs = Math.abs(getLongitudeAsSeconds()) - longDegs * 3600 - longMins * 60;\n        buf.append(threeDigits.format(longDegs));\n        buf.append(twoDigits.format(longMins));\n        buf.append(twoDigits.format(longSecs));\n        // altitude\n        // -- if i want altitude later, add it here, as \"+AAA...\"\n        // terminator\n        buf.append(\"/\");\n        return buf.toString();\n    }\n\n    //\n    // EQUALS and HASHCODE\n    //\n    /**\n     *       Check if an object is equal to this Location.  This tests equality to\n     *       second accuracy.\n     *\n     *       @param object the other Location to compare this against\n     *       @return true, if the object is a Location and equal to this, else false\n     */\n    public boolean equals(Object object) {\n        // make sure it's a Location\n        if (!(object instanceof Location))\n            return false;\n        // check seconds\n        Location location = (Location) object;\n        return (latitude == location.latitude && longitude == location.longitude);\n    }\n\n    /**\n     *       A hashcode for Locations.  (Since I define equals(), I need to define hashCode().)\n     *\n     *       @return a hash code for this Location\n     */\n    public int hashCode() {\n        return latitude * latitude * latitude + 3 * longitude * longitude * longitude;\n    }\n\n    //\n    // DISTANCE\n    //\n    /**\n     *       Compute the surface distance between two Locations, rounded to\n     *       the nearest 10km.\n     *\n     *       @param location measure distance to this Location\n     *       @return the distance in kilometers\n     */\n    public synchronized int distanceTo(Location location) {\n        // i have to be synch because i use static points\n        // for computation, to save allocations.  it's ok,\n        // i'm really fast.\n        // the two points, in (x,y,z) coordinates\n        p1.setFromLocation(this);\n        p2.setFromLocation(location);\n        // sides of a triangle:\n        // center-to-A\n        float a = EARTH_RADIUS;\n        // center-to-B\n        float b = EARTH_RADIUS;\n        // A-to-B (straight-line distance)\n        float c = p1.distanceTo(p2);\n        // angle at center between two locations (law of cosine)\n        float C = (float) Math.acos((a * a + b * b - c * c) / (2 * a * b));\n        // distance between locations, on the sphere of the earth\n        float dist = EARTH_RADIUS * C;\n        // round to nearest ten kilometers\n        return roundTo(dist, 10);\n    }\n\n    // points used by distanceTo().  distanceTo() is otherwise pretty darn\n    // fast, so i'll preallocate these (only once, as class members).\n    // the only downside is that distanceTo() has to be synchronized,\n    // but it returns almost immediately so it's probably no big deal.\n    private static Point3D p1 = new Point3D(), p2 = new Point3D();\n\n    // roundTo(x, 10) rounds x to the nearest 10, for example.\n    // WRITEME: unit test for this method?\n    private int roundTo(float value, int place) {\n        return place * (int) Math.round(value / (float) place);\n    }\n\n    /**\n     *       Check whether the given location is near this location.\n     *\n     *       <p>Unlike most Java methods, the parameter <code>location</code>\n     *       may be null; isNear(null, threshold) is always false.</p>\n     *\n     *       @param location the location to check\n     *       @param threshold the number of kilometers to consider \"near\"\n     *       @return true, if the location is non-null and within the threshold\n     */\n    public boolean isNear(Location location, int threshold) {\n        return (location != null) && (distanceTo(location) <= threshold);\n    }\n\n    /**\n     *       Make a location halfway between 2 locations.\n     *\n     *       <p>The midpoint is computed as the average of the latitudes, and\n     *       the average of the longitudes.  That may not be very accurate on\n     *       non-rectangular projections.</p>\n     *\n     *       @param a the first point\n     *       @param b the second point\n     *       @return the midpoint of a and b\n     */\n    public static Location midpoint(Location a, Location b) {\n        // latitude doesn't wrap around, just take the mean\n        Location l = new Location();\n        l.setLatitudeAsSeconds((a.getLatitudeAsSeconds() + b.getLatitudeAsSeconds()) / 2);\n        // longitude, though, does wrap around, so pick the short way.\n        // (i.e., if the difference is greater than 180 degrees, jump to the\n        // opposite side, which is also equidistant, but closer to both.)\n        l.setLongitudeAsSeconds((a.getLongitudeAsSeconds() + b.getLongitudeAsSeconds()) / 2);\n        if (Math.abs(a.getLongitudeAsDegrees() - b.getLongitudeAsDegrees()) >= 180) {\n            // 180 degrees, in seconds\n            final int HALFWAY = 180 * 60 * 60;\n            l.setLongitudeAsSeconds((l.getLongitudeAsSeconds() + HALFWAY) % HALFWAY);\n        }\n        return l;\n    }\n\n    public boolean valid() {\n        return (!(latitude == 0 && longitude == 0));\n    }\n}\n",
		"id": "/EvoSuiteBenchmark/35_corina/src/main/java/corina/site/Location_0Test.java",
		"test_prompt": "// Location_0Test.java\n// This file is part of Corina.\n//\n// Corina is free software; you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation; either version 2 of the License, or\n// (at your option) any later version.\n//\n// Corina is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Corina; if not, write to the Free Software\n// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n//\n// Copyright 2003 Ken Harris <kbh7@cornell.edu>\n//\npackage corina.site;\n\nimport corina.map.Point3D;\nimport corina.ui.I18n;\nimport java.util.StringTokenizer;\nimport java.text.DecimalFormat;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link Location}.\n* It contains ten unit test cases for the {@link Location#clone()} method.\n*/\nclass Location_0Test {"
	},
	{
		"original_code": "// Location.java\n//\n// This file is part of Corina.\n//\n// Corina is free software; you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation; either version 2 of the License, or\n// (at your option) any later version.\n//\n// Corina is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Corina; if not, write to the Free Software\n// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n//\n// Copyright 2003 Ken Harris <kbh7@cornell.edu>\n//\npackage corina.site;\n\nimport corina.map.Point3D;\nimport corina.ui.I18n;\nimport java.util.StringTokenizer;\nimport java.text.DecimalFormat;\n\n/**\n *   A (latitude, longitude) location on the earth.\n *\n *   <p>Latitudes run from -90 to 90 degrees; longitudes run from -180 to 180 degrees.\n *   Positive latitudes are north; positive longitudes are east.</p>\n *\n *   <p>The accessors are a bit different than most classes, because there are two\n *   fairly natural ways to access latitude and longitude angles.\n *\n *   <ul>\n *     <li>The first is how you'd read or write them, with degrees, minutes, and seconds,\n *     like \"38&deg;15'N\".\n *\n *     <li>The second is more natural for computation, as a floating point number, like\n *     38.25.\n *   </ul>\n *\n *   <p>Since there are times you'd need both, both are provided.  There are 8\n *   accessors total, for each combination of get/set, latitude/longitude, and\n *   integer/floating point.  The methods that end with \"...AsDegrees()\" deal with\n *   floating point numbers, as degrees, and the methods that end with \"...AsSeconds()\"\n *   deal with integers, as seconds (60 seconds to a minute, 60 minutes to a degree).\n *   (Note that 1 second is about 30 meters at the equator.  You'll never need\n *   sub-second resolution.)</p>\n *\n *   <p>(It might be nice to have immutable Locations sometimes, but when rendering maps\n *   you need speed, speed, speed, and one of the best ways to make Java go faster is to\n *   generate less garbage for the GC to have to deal with.)</p>\n *\n *   <p>ISO 6709 provides an ASCII-only, locale-independent way to store\n *   latitude, longitude, and altitude.  ISO is\n *   <a href=\"http://www.iso.org/iso/en/CatalogueDetailPage.CatalogueDetail?CSNUMBER=13152\">charging\n *   30 bucks for it</a>, even though it's only a 3-page PDF.  Sigh.\n *   But you can get <a href=\"http://www.ftp.uni-erlangen.de/pub/doc/ISO/ISO-6709-summary\">the\n *   Cliff notes here</a>, or <a href=\"http://www.ftp.uni-erlangen.de/pub/doc/ISO/iso-6709.pdf\">the\n *   whole thing here</a>.</p>\n *\n *   <h2>Left to do:</h2>\n *   <ul>\n *     <li>Extend parseISO6709() to parse any ISO-6709 format\n *     <li>Decide if this class is threadsafe or not.\n *     <li>Location.copy() is a bad idea; get rid of it\n *   </ul>\n *\n *   @author Ken Harris &lt;kbh7 <i style=\"color: gray\">at</i> cornell <i style=\"color: gray\">dot</i> edu&gt;\n *   @version $Id: Location.java,v 1.3 2006/06/20 17:58:19 lucasmo Exp $\n */\npublic final class Location implements Cloneable {\n\n    //\n    // CONSTANTS\n    //\n    /**\n     *       Radius of the earth in kilometers.  From Miller & Schroeer,\n     *       <i>College Physics</i>, 6th ed: 6.38x10<sup>3</sup> km.\n     */\n    // 6.38 x 10^6 m\n    public final static float EARTH_RADIUS = 6.38e3f;\n\n    // limits on latitude and longitude, in seconds\n    private static final int MIN_LATITUDE = -90 * 3600;\n\n    private static final int MAX_LATITUDE = 90 * 3600;\n\n    private static final int MIN_LONGITUDE = -180 * 3600;\n\n    private static final int MAX_LONGITUDE = 180 * 3600 - 1;\n\n    // L10n of N/S/E/W -- i'll use these inside a loop, later,\n    // so i'll just keep them around.\n    private static final String NORTH = I18n.getText(\"north\");\n\n    private static final String SOUTH = I18n.getText(\"south\");\n\n    private static final String EAST = I18n.getText(\"east\");\n\n    private static final String WEST = I18n.getText(\"west\");\n\n    //\n    // FIELDS\n    //\n    // in seconds; positive latitudes are north, positive longitudes are east\n    private int latitude = 0;\n\n    private int longitude = 0;\n\n    //\n    // CLONING\n    //\n    /**\n     *       Make a clone of this Location.\n     *\n     *       @return a Location with the same latitude and longitude as this one\n     */\n    public Object clone() {\n        Location clone = new Location();\n        clone.latitude = this.latitude;\n        clone.longitude = this.longitude;\n        return clone;\n    }\n\n    /**\n     *       Copy the (latitude, longitude) from one location to another.\n     *\n     *       @param target the Location to copy from\n     *       @param source the Location to copy to\n     */\n    public static void copy(Location target, Location source) {\n        target.latitude = source.latitude;\n        target.longitude = source.longitude;\n    }\n\n    //\n    // ACCESSORS\n    //\n    /**\n     *       Return the latitude, in degrees.\n     *\n     *       @return the latitude, in degrees\n     */\n    public float getLatitudeAsDegrees() {\n        return latitude / 3600f;\n    }\n\n    /**\n     *       Return the longitude, in degrees.\n     *\n     *       @return the longitude, in degrees\n     */\n    public float getLongitudeAsDegrees() {\n        return longitude / 3600f;\n    }\n\n    /**\n     *       Set the latitude, in degrees.\n     *\n     *       @param degrees the new latitude, in degrees\n     */\n    public void setLatitudeAsDegrees(float degrees) {\n        int seconds = Math.round(degrees * 3600);\n        if (seconds < MIN_LATITUDE)\n            seconds = MIN_LATITUDE;\n        else if (seconds > MAX_LATITUDE)\n            seconds = MAX_LATITUDE;\n        this.latitude = seconds;\n    }\n\n    /**\n     *       Set the longitude, in degrees.\n     *\n     *       @param degrees the new longitude, in degrees\n     */\n    public void setLongitudeAsDegrees(float degrees) {\n        int seconds = Math.round(degrees * 3600);\n        // need to make sure the longitude is between -180 and 179 degrees.\n        // 180 degrees, for example, gets sent back down to -180.\n        // if i were doing degrees, i'd add 180, mod 360, sub 180.\n        // so just do that in seconds.\n        seconds += 180 * 3600;\n        seconds %= 360 * 3600;\n        if (seconds <= 0)\n            seconds += 180 * 3600;\n        else\n            seconds -= 180 * 3600;\n        this.longitude = seconds;\n    }\n\n    /**\n     *       Get the latitude, in seconds.\n     *\n     *       @return the latitude, in seconds\n     */\n    public int getLatitudeAsSeconds() {\n        return latitude;\n    }\n\n    /**\n     *       Get the longitude, in seconds.\n     *\n     *       @return the longitude, in seconds\n     */\n    public int getLongitudeAsSeconds() {\n        return longitude;\n    }\n\n    /**\n     *       Set the latitude, in seconds.\n     *\n     *       @param seconds the new latitude, in seconds\n     */\n    public void setLatitudeAsSeconds(int seconds) {\n        if (seconds < MIN_LATITUDE)\n            seconds = MIN_LATITUDE;\n        else if (seconds > MAX_LATITUDE)\n            seconds = MAX_LATITUDE;\n        this.latitude = seconds;\n    }\n\n    /**\n     *       Set the longitude, in seconds.\n     *\n     *       @param seconds the new longitude, in seconds\n     */\n    public void setLongitudeAsSeconds(int seconds) {\n        // make sure longitude is between -180 and 179 degrees.\n        // see setLongitudeAsDegrees().\n        seconds += 180 * 3600;\n        seconds %= 360 * 3600;\n        if (seconds <= 0)\n            seconds += 180 * 3600;\n        else\n            seconds -= 180 * 3600;\n        // PERF: make sure these are computed at compile-time, not run-time.\n        // FIXME: extract method normalizeLongitude() (lat, too, while you're at it)\n        this.longitude = seconds;\n    }\n\n    //\n    // CONSTRUCTORS\n    //\n    /**\n     * Default location: 0&deg;N 0&deg;E.\n     */\n    public Location() {\n        // do nothing\n    }\n\n    /**\n     *         Constructor, given a String.  The input format is perfectly\n     * \tcompatible with the output of toString(), but is lenient in\n     * \tcase users type in a location and can't type the degree-sign\n     *         &mdash; any gap between numbers works, so \"34*56' N 11 22W\" will\n     * \twork just fine.  It also accepts ISO-6709 format strings\n     *         (but only the \"+DDMMSS+DDDMMSS/\" version so far).\n     *\n     * \t@param string the String to parse\n     *         @exception NumberFormatException if the location can't be parsed\n     */\n    public Location(String string) throws NumberFormatException {\n        setLocation(string);\n    }\n\n    public void setLocation(String string) throws NumberFormatException {\n        if (isISO6709(string))\n            parseISO6709(string);\n        else\n            parseString(string);\n    }\n\n    private void parseString(String string) throws NumberFormatException {\n        String whitespace = \" \\t\\n\\r\";\n        String degreeMinuteSecond = \"\\u00B0*'\\\"\";\n        StringTokenizer tok = new StringTokenizer(string, whitespace + degreeMinuteSecond);\n        // mulitply by this to make seconds\n        int multiplier = 3600;\n        // total of the seconds so far\n        int total = 0;\n        // we'll barf unless we have exactly one of each.\n        int latitudeCount = 0, longitudeCount = 0;\n        while (tok.hasMoreTokens()) {\n            String token = tok.nextToken();\n            try {\n                // it's a number: multiply it, to make it seconds, and add it.\n                // (if we get too many numbers, like \"12*34'56''78'''N\",\n                // multiplier=0 after 3 of them, so it's automatically ignored.)\n                int number = Integer.parseInt(token);\n                total += number * multiplier;\n                multiplier /= 60;\n            } catch (NumberFormatException nfe) {\n                // it's not a number: it's N/S/E/W (if not, ignore it).\n                // assume, in any given locale, that compass points never\n                // differ from each other only by case.  users will love you.\n                String compassPoint = token.toUpperCase();\n                if (compassPoint.equals(NORTH)) {\n                    setLatitudeAsSeconds(total);\n                    latitudeCount++;\n                } else if (compassPoint.equals(SOUTH)) {\n                    setLatitudeAsSeconds(-total);\n                    latitudeCount++;\n                } else if (compassPoint.equals(EAST)) {\n                    setLongitudeAsSeconds(total);\n                    longitudeCount++;\n                } else if (compassPoint.equals(WEST)) {\n                    setLongitudeAsSeconds(-total);\n                    longitudeCount++;\n                }\n                // reset multiplier, total\n                multiplier = 3600;\n                total = 0;\n            }\n        }\n        // a location has exactly one latitude, and one longitude.  double-check this.\n        if (latitudeCount != 1 || longitudeCount != 1)\n            throw new NumberFormatException(\"bad number of terms in location!\");\n    }\n\n    // this method only knows how to parse the \"+DDMMSS+DDDMMSS/\" format so far\n    // (i.e., the format that toISO6709() returns)\n    private void parseISO6709(String string) throws NumberFormatException {\n        if (string.length() != 16)\n            throw new NumberFormatException(\"don't know how to parse all ISO-6709 locations yet!\");\n        boolean north = (string.charAt(0) == '+');\n        int latDegs = Integer.parseInt(string.substring(1, 3));\n        int latMins = Integer.parseInt(string.substring(3, 5));\n        int latSecs = Integer.parseInt(string.substring(5, 7));\n        setLatitudeAsSeconds((north ? +1 : -1) * (latDegs * 3600 + latMins * 60 + latSecs));\n        boolean east = (string.charAt(7) == '+');\n        int longDegs = Integer.parseInt(string.substring(8, 11));\n        int longMins = Integer.parseInt(string.substring(11, 13));\n        int longSecs = Integer.parseInt(string.substring(13, 15));\n        setLongitudeAsSeconds((east ? +1 : -1) * (longDegs * 3600 + longMins * 60 + longSecs));\n    }\n\n    //\n    // TOSTRING\n    //\n    /*\n     * For location editor\n     */\n    public String getEasyString() {\n        // extract degrees and minutes, latitude and longitude\n        int latDegs = Math.abs(getLatitudeAsSeconds()) / 3600;\n        int latMins = Math.abs(getLatitudeAsSeconds()) / 60 - latDegs * 60;\n        int longDegs = Math.abs(getLongitudeAsSeconds()) / 3600;\n        int longMins = Math.abs(getLongitudeAsSeconds()) / 60 - longDegs * 60;\n        // hemispheres\n        String latHemi = (latitude > 0 ? NORTH : SOUTH);\n        String longHemi = (longitude > 0 ? EAST : WEST);\n        // assemble it into a string\n        return latDegs + \",\" + latMins + \",\" + latHemi + \",\" + longDegs + \",\" + longMins + \",\" + longHemi;\n    }\n\n    public String getLatitudeAsString() {\n        // extract degrees and minutes\n        int latDegs = Math.abs(getLatitudeAsSeconds()) / 3600;\n        int latMins = Math.abs(getLatitudeAsSeconds()) / 60 - latDegs * 60;\n        // hemisphere\n        String latHemi = (latitude > 0 ? NORTH : SOUTH);\n        return latDegs + DEGREE_SIGN + latMins + \"'\" + latHemi;\n    }\n\n    public String getLongitudeAsString() {\n        // extract degrees and minutes\n        int longDegs = Math.abs(getLongitudeAsSeconds()) / 3600;\n        int longMins = Math.abs(getLongitudeAsSeconds()) / 60 - longDegs * 60;\n        // hemispheres\n        String longHemi = (longitude > 0 ? EAST : WEST);\n        return longDegs + DEGREE_SIGN + longMins + \"'\" + longHemi;\n    }\n\n    /**\n     *       Return this location as a nicely-formatted string.  The string returned by this\n     *       method is locale-dependent, and should only be used for presentation to the user,\n     *       not for long-term storage; for that, see the toISO6709() method.\n     *\n     *       @see #toISO6709\n     *\n     *       @return this location as a string\n     */\n    public String toString() {\n        return getLatitudeAsString() + \" \" + getLongitudeAsString();\n    }\n\n    // unicode DEGREE SIGN character\n    public static final String DEGREE_SIGN = \"\\u00B0\";\n\n    // is this string an ISO-6709 location?\n    private boolean isISO6709(String check) {\n        return (check.startsWith(\"+\") || check.startsWith(\"-\")) && check.endsWith(\"/\");\n    }\n\n    /**\n     *       Convert this location to an ISO-6709 string.  (See above for where to ind ISO-6709\n     *       information.)\n     *\n     *       <p>This method always uses the ISO-6709 format <code>+DDMMSS+DDDMMSS/</code>.</p>\n     *\n     *       @return this Location as an ISO-6709 string\n     */\n    public String toISO6709() {\n        StringBuffer buf = new StringBuffer();\n        DecimalFormat twoDigits = new DecimalFormat(\"00\");\n        DecimalFormat threeDigits = new DecimalFormat(\"000\");\n        // latitude\n        buf.append(latitude < 0 ? \"-\" : \"+\");\n        int latDegs = Math.abs(getLatitudeAsSeconds()) / 3600;\n        int latMins = Math.abs(getLatitudeAsSeconds()) / 60 - latDegs * 60;\n        int latSecs = Math.abs(getLatitudeAsSeconds()) - latDegs * 3600 - latMins * 60;\n        buf.append(twoDigits.format(latDegs));\n        buf.append(twoDigits.format(latMins));\n        buf.append(twoDigits.format(latSecs));\n        // longitude\n        buf.append(longitude < 0 ? \"-\" : \"+\");\n        int longDegs = Math.abs(getLongitudeAsSeconds()) / 3600;\n        int longMins = Math.abs(getLongitudeAsSeconds()) / 60 - longDegs * 60;\n        int longSecs = Math.abs(getLongitudeAsSeconds()) - longDegs * 3600 - longMins * 60;\n        buf.append(threeDigits.format(longDegs));\n        buf.append(twoDigits.format(longMins));\n        buf.append(twoDigits.format(longSecs));\n        // altitude\n        // -- if i want altitude later, add it here, as \"+AAA...\"\n        // terminator\n        buf.append(\"/\");\n        return buf.toString();\n    }\n\n    //\n    // EQUALS and HASHCODE\n    //\n    /**\n     *       Check if an object is equal to this Location.  This tests equality to\n     *       second accuracy.\n     *\n     *       @param object the other Location to compare this against\n     *       @return true, if the object is a Location and equal to this, else false\n     */\n    public boolean equals(Object object) {\n        // make sure it's a Location\n        if (!(object instanceof Location))\n            return false;\n        // check seconds\n        Location location = (Location) object;\n        return (latitude == location.latitude && longitude == location.longitude);\n    }\n\n    /**\n     *       A hashcode for Locations.  (Since I define equals(), I need to define hashCode().)\n     *\n     *       @return a hash code for this Location\n     */\n    public int hashCode() {\n        return latitude * latitude * latitude + 3 * longitude * longitude * longitude;\n    }\n\n    //\n    // DISTANCE\n    //\n    /**\n     *       Compute the surface distance between two Locations, rounded to\n     *       the nearest 10km.\n     *\n     *       @param location measure distance to this Location\n     *       @return the distance in kilometers\n     */\n    public synchronized int distanceTo(Location location) {\n        // i have to be synch because i use static points\n        // for computation, to save allocations.  it's ok,\n        // i'm really fast.\n        // the two points, in (x,y,z) coordinates\n        p1.setFromLocation(this);\n        p2.setFromLocation(location);\n        // sides of a triangle:\n        // center-to-A\n        float a = EARTH_RADIUS;\n        // center-to-B\n        float b = EARTH_RADIUS;\n        // A-to-B (straight-line distance)\n        float c = p1.distanceTo(p2);\n        // angle at center between two locations (law of cosine)\n        float C = (float) Math.acos((a * a + b * b - c * c) / (2 * a * b));\n        // distance between locations, on the sphere of the earth\n        float dist = EARTH_RADIUS * C;\n        // round to nearest ten kilometers\n        return roundTo(dist, 10);\n    }\n\n    // points used by distanceTo().  distanceTo() is otherwise pretty darn\n    // fast, so i'll preallocate these (only once, as class members).\n    // the only downside is that distanceTo() has to be synchronized,\n    // but it returns almost immediately so it's probably no big deal.\n    private static Point3D p1 = new Point3D(), p2 = new Point3D();\n\n    // roundTo(x, 10) rounds x to the nearest 10, for example.\n    // WRITEME: unit test for this method?\n    private int roundTo(float value, int place) {\n        return place * (int) Math.round(value / (float) place);\n    }\n\n    /**\n     *       Check whether the given location is near this location.\n     *\n     *       <p>Unlike most Java methods, the parameter <code>location</code>\n     *       may be null; isNear(null, threshold) is always false.</p>\n     *\n     *       @param location the location to check\n     *       @param threshold the number of kilometers to consider \"near\"\n     *       @return true, if the location is non-null and within the threshold\n     */\n    public boolean isNear(Location location, int threshold) {\n        return (location != null) && (distanceTo(location) <= threshold);\n    }\n\n    /**\n     *       Make a location halfway between 2 locations.\n     *\n     *       <p>The midpoint is computed as the average of the latitudes, and\n     *       the average of the longitudes.  That may not be very accurate on\n     *       non-rectangular projections.</p>\n     *\n     *       @param a the first point\n     *       @param b the second point\n     *       @return the midpoint of a and b\n     */\n    public static Location midpoint(Location a, Location b) {\n        // latitude doesn't wrap around, just take the mean\n        Location l = new Location();\n        l.setLatitudeAsSeconds((a.getLatitudeAsSeconds() + b.getLatitudeAsSeconds()) / 2);\n        // longitude, though, does wrap around, so pick the short way.\n        // (i.e., if the difference is greater than 180 degrees, jump to the\n        // opposite side, which is also equidistant, but closer to both.)\n        l.setLongitudeAsSeconds((a.getLongitudeAsSeconds() + b.getLongitudeAsSeconds()) / 2);\n        if (Math.abs(a.getLongitudeAsDegrees() - b.getLongitudeAsDegrees()) >= 180) {\n            // 180 degrees, in seconds\n            final int HALFWAY = 180 * 60 * 60;\n            l.setLongitudeAsSeconds((l.getLongitudeAsSeconds() + HALFWAY) % HALFWAY);\n        }\n        return l;\n    }\n\n    public boolean valid() {\n        return (!(latitude == 0 && longitude == 0));\n    }\n}\n",
		"id": "/EvoSuiteBenchmark/35_corina/src/main/java/corina/site/Location_1Test.java",
		"test_prompt": "// Location_1Test.java\n// This file is part of Corina.\n//\n// Corina is free software; you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation; either version 2 of the License, or\n// (at your option) any later version.\n//\n// Corina is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Corina; if not, write to the Free Software\n// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n//\n// Copyright 2003 Ken Harris <kbh7@cornell.edu>\n//\npackage corina.site;\n\nimport corina.map.Point3D;\nimport corina.ui.I18n;\nimport java.util.StringTokenizer;\nimport java.text.DecimalFormat;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link Location}.\n* It contains ten unit test cases for the {@link Location#toISO6709()} method.\n*/\nclass Location_1Test {"
	},
	{
		"original_code": "// Location.java\n//\n// This file is part of Corina.\n//\n// Corina is free software; you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation; either version 2 of the License, or\n// (at your option) any later version.\n//\n// Corina is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Corina; if not, write to the Free Software\n// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n//\n// Copyright 2003 Ken Harris <kbh7@cornell.edu>\n//\npackage corina.site;\n\nimport corina.map.Point3D;\nimport corina.ui.I18n;\nimport java.util.StringTokenizer;\nimport java.text.DecimalFormat;\n\n/**\n *   A (latitude, longitude) location on the earth.\n *\n *   <p>Latitudes run from -90 to 90 degrees; longitudes run from -180 to 180 degrees.\n *   Positive latitudes are north; positive longitudes are east.</p>\n *\n *   <p>The accessors are a bit different than most classes, because there are two\n *   fairly natural ways to access latitude and longitude angles.\n *\n *   <ul>\n *     <li>The first is how you'd read or write them, with degrees, minutes, and seconds,\n *     like \"38&deg;15'N\".\n *\n *     <li>The second is more natural for computation, as a floating point number, like\n *     38.25.\n *   </ul>\n *\n *   <p>Since there are times you'd need both, both are provided.  There are 8\n *   accessors total, for each combination of get/set, latitude/longitude, and\n *   integer/floating point.  The methods that end with \"...AsDegrees()\" deal with\n *   floating point numbers, as degrees, and the methods that end with \"...AsSeconds()\"\n *   deal with integers, as seconds (60 seconds to a minute, 60 minutes to a degree).\n *   (Note that 1 second is about 30 meters at the equator.  You'll never need\n *   sub-second resolution.)</p>\n *\n *   <p>(It might be nice to have immutable Locations sometimes, but when rendering maps\n *   you need speed, speed, speed, and one of the best ways to make Java go faster is to\n *   generate less garbage for the GC to have to deal with.)</p>\n *\n *   <p>ISO 6709 provides an ASCII-only, locale-independent way to store\n *   latitude, longitude, and altitude.  ISO is\n *   <a href=\"http://www.iso.org/iso/en/CatalogueDetailPage.CatalogueDetail?CSNUMBER=13152\">charging\n *   30 bucks for it</a>, even though it's only a 3-page PDF.  Sigh.\n *   But you can get <a href=\"http://www.ftp.uni-erlangen.de/pub/doc/ISO/ISO-6709-summary\">the\n *   Cliff notes here</a>, or <a href=\"http://www.ftp.uni-erlangen.de/pub/doc/ISO/iso-6709.pdf\">the\n *   whole thing here</a>.</p>\n *\n *   <h2>Left to do:</h2>\n *   <ul>\n *     <li>Extend parseISO6709() to parse any ISO-6709 format\n *     <li>Decide if this class is threadsafe or not.\n *     <li>Location.copy() is a bad idea; get rid of it\n *   </ul>\n *\n *   @author Ken Harris &lt;kbh7 <i style=\"color: gray\">at</i> cornell <i style=\"color: gray\">dot</i> edu&gt;\n *   @version $Id: Location.java,v 1.3 2006/06/20 17:58:19 lucasmo Exp $\n */\npublic final class Location implements Cloneable {\n\n    //\n    // CONSTANTS\n    //\n    /**\n     *       Radius of the earth in kilometers.  From Miller & Schroeer,\n     *       <i>College Physics</i>, 6th ed: 6.38x10<sup>3</sup> km.\n     */\n    // 6.38 x 10^6 m\n    public final static float EARTH_RADIUS = 6.38e3f;\n\n    // limits on latitude and longitude, in seconds\n    private static final int MIN_LATITUDE = -90 * 3600;\n\n    private static final int MAX_LATITUDE = 90 * 3600;\n\n    private static final int MIN_LONGITUDE = -180 * 3600;\n\n    private static final int MAX_LONGITUDE = 180 * 3600 - 1;\n\n    // L10n of N/S/E/W -- i'll use these inside a loop, later,\n    // so i'll just keep them around.\n    private static final String NORTH = I18n.getText(\"north\");\n\n    private static final String SOUTH = I18n.getText(\"south\");\n\n    private static final String EAST = I18n.getText(\"east\");\n\n    private static final String WEST = I18n.getText(\"west\");\n\n    //\n    // FIELDS\n    //\n    // in seconds; positive latitudes are north, positive longitudes are east\n    private int latitude = 0;\n\n    private int longitude = 0;\n\n    //\n    // CLONING\n    //\n    /**\n     *       Make a clone of this Location.\n     *\n     *       @return a Location with the same latitude and longitude as this one\n     */\n    public Object clone() {\n        Location clone = new Location();\n        clone.latitude = this.latitude;\n        clone.longitude = this.longitude;\n        return clone;\n    }\n\n    /**\n     *       Copy the (latitude, longitude) from one location to another.\n     *\n     *       @param target the Location to copy from\n     *       @param source the Location to copy to\n     */\n    public static void copy(Location target, Location source) {\n        target.latitude = source.latitude;\n        target.longitude = source.longitude;\n    }\n\n    //\n    // ACCESSORS\n    //\n    /**\n     *       Return the latitude, in degrees.\n     *\n     *       @return the latitude, in degrees\n     */\n    public float getLatitudeAsDegrees() {\n        return latitude / 3600f;\n    }\n\n    /**\n     *       Return the longitude, in degrees.\n     *\n     *       @return the longitude, in degrees\n     */\n    public float getLongitudeAsDegrees() {\n        return longitude / 3600f;\n    }\n\n    /**\n     *       Set the latitude, in degrees.\n     *\n     *       @param degrees the new latitude, in degrees\n     */\n    public void setLatitudeAsDegrees(float degrees) {\n        int seconds = Math.round(degrees * 3600);\n        if (seconds < MIN_LATITUDE)\n            seconds = MIN_LATITUDE;\n        else if (seconds > MAX_LATITUDE)\n            seconds = MAX_LATITUDE;\n        this.latitude = seconds;\n    }\n\n    /**\n     *       Set the longitude, in degrees.\n     *\n     *       @param degrees the new longitude, in degrees\n     */\n    public void setLongitudeAsDegrees(float degrees) {\n        int seconds = Math.round(degrees * 3600);\n        // need to make sure the longitude is between -180 and 179 degrees.\n        // 180 degrees, for example, gets sent back down to -180.\n        // if i were doing degrees, i'd add 180, mod 360, sub 180.\n        // so just do that in seconds.\n        seconds += 180 * 3600;\n        seconds %= 360 * 3600;\n        if (seconds <= 0)\n            seconds += 180 * 3600;\n        else\n            seconds -= 180 * 3600;\n        this.longitude = seconds;\n    }\n\n    /**\n     *       Get the latitude, in seconds.\n     *\n     *       @return the latitude, in seconds\n     */\n    public int getLatitudeAsSeconds() {\n        return latitude;\n    }\n\n    /**\n     *       Get the longitude, in seconds.\n     *\n     *       @return the longitude, in seconds\n     */\n    public int getLongitudeAsSeconds() {\n        return longitude;\n    }\n\n    /**\n     *       Set the latitude, in seconds.\n     *\n     *       @param seconds the new latitude, in seconds\n     */\n    public void setLatitudeAsSeconds(int seconds) {\n        if (seconds < MIN_LATITUDE)\n            seconds = MIN_LATITUDE;\n        else if (seconds > MAX_LATITUDE)\n            seconds = MAX_LATITUDE;\n        this.latitude = seconds;\n    }\n\n    /**\n     *       Set the longitude, in seconds.\n     *\n     *       @param seconds the new longitude, in seconds\n     */\n    public void setLongitudeAsSeconds(int seconds) {\n        // make sure longitude is between -180 and 179 degrees.\n        // see setLongitudeAsDegrees().\n        seconds += 180 * 3600;\n        seconds %= 360 * 3600;\n        if (seconds <= 0)\n            seconds += 180 * 3600;\n        else\n            seconds -= 180 * 3600;\n        // PERF: make sure these are computed at compile-time, not run-time.\n        // FIXME: extract method normalizeLongitude() (lat, too, while you're at it)\n        this.longitude = seconds;\n    }\n\n    //\n    // CONSTRUCTORS\n    //\n    /**\n     * Default location: 0&deg;N 0&deg;E.\n     */\n    public Location() {\n        // do nothing\n    }\n\n    /**\n     *         Constructor, given a String.  The input format is perfectly\n     * \tcompatible with the output of toString(), but is lenient in\n     * \tcase users type in a location and can't type the degree-sign\n     *         &mdash; any gap between numbers works, so \"34*56' N 11 22W\" will\n     * \twork just fine.  It also accepts ISO-6709 format strings\n     *         (but only the \"+DDMMSS+DDDMMSS/\" version so far).\n     *\n     * \t@param string the String to parse\n     *         @exception NumberFormatException if the location can't be parsed\n     */\n    public Location(String string) throws NumberFormatException {\n        setLocation(string);\n    }\n\n    public void setLocation(String string) throws NumberFormatException {\n        if (isISO6709(string))\n            parseISO6709(string);\n        else\n            parseString(string);\n    }\n\n    private void parseString(String string) throws NumberFormatException {\n        String whitespace = \" \\t\\n\\r\";\n        String degreeMinuteSecond = \"\\u00B0*'\\\"\";\n        StringTokenizer tok = new StringTokenizer(string, whitespace + degreeMinuteSecond);\n        // mulitply by this to make seconds\n        int multiplier = 3600;\n        // total of the seconds so far\n        int total = 0;\n        // we'll barf unless we have exactly one of each.\n        int latitudeCount = 0, longitudeCount = 0;\n        while (tok.hasMoreTokens()) {\n            String token = tok.nextToken();\n            try {\n                // it's a number: multiply it, to make it seconds, and add it.\n                // (if we get too many numbers, like \"12*34'56''78'''N\",\n                // multiplier=0 after 3 of them, so it's automatically ignored.)\n                int number = Integer.parseInt(token);\n                total += number * multiplier;\n                multiplier /= 60;\n            } catch (NumberFormatException nfe) {\n                // it's not a number: it's N/S/E/W (if not, ignore it).\n                // assume, in any given locale, that compass points never\n                // differ from each other only by case.  users will love you.\n                String compassPoint = token.toUpperCase();\n                if (compassPoint.equals(NORTH)) {\n                    setLatitudeAsSeconds(total);\n                    latitudeCount++;\n                } else if (compassPoint.equals(SOUTH)) {\n                    setLatitudeAsSeconds(-total);\n                    latitudeCount++;\n                } else if (compassPoint.equals(EAST)) {\n                    setLongitudeAsSeconds(total);\n                    longitudeCount++;\n                } else if (compassPoint.equals(WEST)) {\n                    setLongitudeAsSeconds(-total);\n                    longitudeCount++;\n                }\n                // reset multiplier, total\n                multiplier = 3600;\n                total = 0;\n            }\n        }\n        // a location has exactly one latitude, and one longitude.  double-check this.\n        if (latitudeCount != 1 || longitudeCount != 1)\n            throw new NumberFormatException(\"bad number of terms in location!\");\n    }\n\n    // this method only knows how to parse the \"+DDMMSS+DDDMMSS/\" format so far\n    // (i.e., the format that toISO6709() returns)\n    private void parseISO6709(String string) throws NumberFormatException {\n        if (string.length() != 16)\n            throw new NumberFormatException(\"don't know how to parse all ISO-6709 locations yet!\");\n        boolean north = (string.charAt(0) == '+');\n        int latDegs = Integer.parseInt(string.substring(1, 3));\n        int latMins = Integer.parseInt(string.substring(3, 5));\n        int latSecs = Integer.parseInt(string.substring(5, 7));\n        setLatitudeAsSeconds((north ? +1 : -1) * (latDegs * 3600 + latMins * 60 + latSecs));\n        boolean east = (string.charAt(7) == '+');\n        int longDegs = Integer.parseInt(string.substring(8, 11));\n        int longMins = Integer.parseInt(string.substring(11, 13));\n        int longSecs = Integer.parseInt(string.substring(13, 15));\n        setLongitudeAsSeconds((east ? +1 : -1) * (longDegs * 3600 + longMins * 60 + longSecs));\n    }\n\n    //\n    // TOSTRING\n    //\n    /*\n     * For location editor\n     */\n    public String getEasyString() {\n        // extract degrees and minutes, latitude and longitude\n        int latDegs = Math.abs(getLatitudeAsSeconds()) / 3600;\n        int latMins = Math.abs(getLatitudeAsSeconds()) / 60 - latDegs * 60;\n        int longDegs = Math.abs(getLongitudeAsSeconds()) / 3600;\n        int longMins = Math.abs(getLongitudeAsSeconds()) / 60 - longDegs * 60;\n        // hemispheres\n        String latHemi = (latitude > 0 ? NORTH : SOUTH);\n        String longHemi = (longitude > 0 ? EAST : WEST);\n        // assemble it into a string\n        return latDegs + \",\" + latMins + \",\" + latHemi + \",\" + longDegs + \",\" + longMins + \",\" + longHemi;\n    }\n\n    public String getLatitudeAsString() {\n        // extract degrees and minutes\n        int latDegs = Math.abs(getLatitudeAsSeconds()) / 3600;\n        int latMins = Math.abs(getLatitudeAsSeconds()) / 60 - latDegs * 60;\n        // hemisphere\n        String latHemi = (latitude > 0 ? NORTH : SOUTH);\n        return latDegs + DEGREE_SIGN + latMins + \"'\" + latHemi;\n    }\n\n    public String getLongitudeAsString() {\n        // extract degrees and minutes\n        int longDegs = Math.abs(getLongitudeAsSeconds()) / 3600;\n        int longMins = Math.abs(getLongitudeAsSeconds()) / 60 - longDegs * 60;\n        // hemispheres\n        String longHemi = (longitude > 0 ? EAST : WEST);\n        return longDegs + DEGREE_SIGN + longMins + \"'\" + longHemi;\n    }\n\n    /**\n     *       Return this location as a nicely-formatted string.  The string returned by this\n     *       method is locale-dependent, and should only be used for presentation to the user,\n     *       not for long-term storage; for that, see the toISO6709() method.\n     *\n     *       @see #toISO6709\n     *\n     *       @return this location as a string\n     */\n    public String toString() {\n        return getLatitudeAsString() + \" \" + getLongitudeAsString();\n    }\n\n    // unicode DEGREE SIGN character\n    public static final String DEGREE_SIGN = \"\\u00B0\";\n\n    // is this string an ISO-6709 location?\n    private boolean isISO6709(String check) {\n        return (check.startsWith(\"+\") || check.startsWith(\"-\")) && check.endsWith(\"/\");\n    }\n\n    /**\n     *       Convert this location to an ISO-6709 string.  (See above for where to ind ISO-6709\n     *       information.)\n     *\n     *       <p>This method always uses the ISO-6709 format <code>+DDMMSS+DDDMMSS/</code>.</p>\n     *\n     *       @return this Location as an ISO-6709 string\n     */\n    public String toISO6709() {\n        StringBuffer buf = new StringBuffer();\n        DecimalFormat twoDigits = new DecimalFormat(\"00\");\n        DecimalFormat threeDigits = new DecimalFormat(\"000\");\n        // latitude\n        buf.append(latitude < 0 ? \"-\" : \"+\");\n        int latDegs = Math.abs(getLatitudeAsSeconds()) / 3600;\n        int latMins = Math.abs(getLatitudeAsSeconds()) / 60 - latDegs * 60;\n        int latSecs = Math.abs(getLatitudeAsSeconds()) - latDegs * 3600 - latMins * 60;\n        buf.append(twoDigits.format(latDegs));\n        buf.append(twoDigits.format(latMins));\n        buf.append(twoDigits.format(latSecs));\n        // longitude\n        buf.append(longitude < 0 ? \"-\" : \"+\");\n        int longDegs = Math.abs(getLongitudeAsSeconds()) / 3600;\n        int longMins = Math.abs(getLongitudeAsSeconds()) / 60 - longDegs * 60;\n        int longSecs = Math.abs(getLongitudeAsSeconds()) - longDegs * 3600 - longMins * 60;\n        buf.append(threeDigits.format(longDegs));\n        buf.append(twoDigits.format(longMins));\n        buf.append(twoDigits.format(longSecs));\n        // altitude\n        // -- if i want altitude later, add it here, as \"+AAA...\"\n        // terminator\n        buf.append(\"/\");\n        return buf.toString();\n    }\n\n    //\n    // EQUALS and HASHCODE\n    //\n    /**\n     *       Check if an object is equal to this Location.  This tests equality to\n     *       second accuracy.\n     *\n     *       @param object the other Location to compare this against\n     *       @return true, if the object is a Location and equal to this, else false\n     */\n    public boolean equals(Object object) {\n        // make sure it's a Location\n        if (!(object instanceof Location))\n            return false;\n        // check seconds\n        Location location = (Location) object;\n        return (latitude == location.latitude && longitude == location.longitude);\n    }\n\n    /**\n     *       A hashcode for Locations.  (Since I define equals(), I need to define hashCode().)\n     *\n     *       @return a hash code for this Location\n     */\n    public int hashCode() {\n        return latitude * latitude * latitude + 3 * longitude * longitude * longitude;\n    }\n\n    //\n    // DISTANCE\n    //\n    /**\n     *       Compute the surface distance between two Locations, rounded to\n     *       the nearest 10km.\n     *\n     *       @param location measure distance to this Location\n     *       @return the distance in kilometers\n     */\n    public synchronized int distanceTo(Location location) {\n        // i have to be synch because i use static points\n        // for computation, to save allocations.  it's ok,\n        // i'm really fast.\n        // the two points, in (x,y,z) coordinates\n        p1.setFromLocation(this);\n        p2.setFromLocation(location);\n        // sides of a triangle:\n        // center-to-A\n        float a = EARTH_RADIUS;\n        // center-to-B\n        float b = EARTH_RADIUS;\n        // A-to-B (straight-line distance)\n        float c = p1.distanceTo(p2);\n        // angle at center between two locations (law of cosine)\n        float C = (float) Math.acos((a * a + b * b - c * c) / (2 * a * b));\n        // distance between locations, on the sphere of the earth\n        float dist = EARTH_RADIUS * C;\n        // round to nearest ten kilometers\n        return roundTo(dist, 10);\n    }\n\n    // points used by distanceTo().  distanceTo() is otherwise pretty darn\n    // fast, so i'll preallocate these (only once, as class members).\n    // the only downside is that distanceTo() has to be synchronized,\n    // but it returns almost immediately so it's probably no big deal.\n    private static Point3D p1 = new Point3D(), p2 = new Point3D();\n\n    // roundTo(x, 10) rounds x to the nearest 10, for example.\n    // WRITEME: unit test for this method?\n    private int roundTo(float value, int place) {\n        return place * (int) Math.round(value / (float) place);\n    }\n\n    /**\n     *       Check whether the given location is near this location.\n     *\n     *       <p>Unlike most Java methods, the parameter <code>location</code>\n     *       may be null; isNear(null, threshold) is always false.</p>\n     *\n     *       @param location the location to check\n     *       @param threshold the number of kilometers to consider \"near\"\n     *       @return true, if the location is non-null and within the threshold\n     */\n    public boolean isNear(Location location, int threshold) {\n        return (location != null) && (distanceTo(location) <= threshold);\n    }\n\n    /**\n     *       Make a location halfway between 2 locations.\n     *\n     *       <p>The midpoint is computed as the average of the latitudes, and\n     *       the average of the longitudes.  That may not be very accurate on\n     *       non-rectangular projections.</p>\n     *\n     *       @param a the first point\n     *       @param b the second point\n     *       @return the midpoint of a and b\n     */\n    public static Location midpoint(Location a, Location b) {\n        // latitude doesn't wrap around, just take the mean\n        Location l = new Location();\n        l.setLatitudeAsSeconds((a.getLatitudeAsSeconds() + b.getLatitudeAsSeconds()) / 2);\n        // longitude, though, does wrap around, so pick the short way.\n        // (i.e., if the difference is greater than 180 degrees, jump to the\n        // opposite side, which is also equidistant, but closer to both.)\n        l.setLongitudeAsSeconds((a.getLongitudeAsSeconds() + b.getLongitudeAsSeconds()) / 2);\n        if (Math.abs(a.getLongitudeAsDegrees() - b.getLongitudeAsDegrees()) >= 180) {\n            // 180 degrees, in seconds\n            final int HALFWAY = 180 * 60 * 60;\n            l.setLongitudeAsSeconds((l.getLongitudeAsSeconds() + HALFWAY) % HALFWAY);\n        }\n        return l;\n    }\n\n    public boolean valid() {\n        return (!(latitude == 0 && longitude == 0));\n    }\n}\n",
		"id": "/EvoSuiteBenchmark/35_corina/src/main/java/corina/site/Location_2Test.java",
		"test_prompt": "// Location_2Test.java\n// This file is part of Corina.\n//\n// Corina is free software; you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation; either version 2 of the License, or\n// (at your option) any later version.\n//\n// Corina is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Corina; if not, write to the Free Software\n// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n//\n// Copyright 2003 Ken Harris <kbh7@cornell.edu>\n//\npackage corina.site;\n\nimport corina.map.Point3D;\nimport corina.ui.I18n;\nimport java.util.StringTokenizer;\nimport java.text.DecimalFormat;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link Location}.\n* It contains ten unit test cases for the {@link Location#equals(Object)} method.\n*/\nclass Location_2Test {"
	},
	{
		"original_code": "// Location.java\n//\n// This file is part of Corina.\n//\n// Corina is free software; you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation; either version 2 of the License, or\n// (at your option) any later version.\n//\n// Corina is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Corina; if not, write to the Free Software\n// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n//\n// Copyright 2003 Ken Harris <kbh7@cornell.edu>\n//\npackage corina.site;\n\nimport corina.map.Point3D;\nimport corina.ui.I18n;\nimport java.util.StringTokenizer;\nimport java.text.DecimalFormat;\n\n/**\n *   A (latitude, longitude) location on the earth.\n *\n *   <p>Latitudes run from -90 to 90 degrees; longitudes run from -180 to 180 degrees.\n *   Positive latitudes are north; positive longitudes are east.</p>\n *\n *   <p>The accessors are a bit different than most classes, because there are two\n *   fairly natural ways to access latitude and longitude angles.\n *\n *   <ul>\n *     <li>The first is how you'd read or write them, with degrees, minutes, and seconds,\n *     like \"38&deg;15'N\".\n *\n *     <li>The second is more natural for computation, as a floating point number, like\n *     38.25.\n *   </ul>\n *\n *   <p>Since there are times you'd need both, both are provided.  There are 8\n *   accessors total, for each combination of get/set, latitude/longitude, and\n *   integer/floating point.  The methods that end with \"...AsDegrees()\" deal with\n *   floating point numbers, as degrees, and the methods that end with \"...AsSeconds()\"\n *   deal with integers, as seconds (60 seconds to a minute, 60 minutes to a degree).\n *   (Note that 1 second is about 30 meters at the equator.  You'll never need\n *   sub-second resolution.)</p>\n *\n *   <p>(It might be nice to have immutable Locations sometimes, but when rendering maps\n *   you need speed, speed, speed, and one of the best ways to make Java go faster is to\n *   generate less garbage for the GC to have to deal with.)</p>\n *\n *   <p>ISO 6709 provides an ASCII-only, locale-independent way to store\n *   latitude, longitude, and altitude.  ISO is\n *   <a href=\"http://www.iso.org/iso/en/CatalogueDetailPage.CatalogueDetail?CSNUMBER=13152\">charging\n *   30 bucks for it</a>, even though it's only a 3-page PDF.  Sigh.\n *   But you can get <a href=\"http://www.ftp.uni-erlangen.de/pub/doc/ISO/ISO-6709-summary\">the\n *   Cliff notes here</a>, or <a href=\"http://www.ftp.uni-erlangen.de/pub/doc/ISO/iso-6709.pdf\">the\n *   whole thing here</a>.</p>\n *\n *   <h2>Left to do:</h2>\n *   <ul>\n *     <li>Extend parseISO6709() to parse any ISO-6709 format\n *     <li>Decide if this class is threadsafe or not.\n *     <li>Location.copy() is a bad idea; get rid of it\n *   </ul>\n *\n *   @author Ken Harris &lt;kbh7 <i style=\"color: gray\">at</i> cornell <i style=\"color: gray\">dot</i> edu&gt;\n *   @version $Id: Location.java,v 1.3 2006/06/20 17:58:19 lucasmo Exp $\n */\npublic final class Location implements Cloneable {\n\n    //\n    // CONSTANTS\n    //\n    /**\n     *       Radius of the earth in kilometers.  From Miller & Schroeer,\n     *       <i>College Physics</i>, 6th ed: 6.38x10<sup>3</sup> km.\n     */\n    // 6.38 x 10^6 m\n    public final static float EARTH_RADIUS = 6.38e3f;\n\n    // limits on latitude and longitude, in seconds\n    private static final int MIN_LATITUDE = -90 * 3600;\n\n    private static final int MAX_LATITUDE = 90 * 3600;\n\n    private static final int MIN_LONGITUDE = -180 * 3600;\n\n    private static final int MAX_LONGITUDE = 180 * 3600 - 1;\n\n    // L10n of N/S/E/W -- i'll use these inside a loop, later,\n    // so i'll just keep them around.\n    private static final String NORTH = I18n.getText(\"north\");\n\n    private static final String SOUTH = I18n.getText(\"south\");\n\n    private static final String EAST = I18n.getText(\"east\");\n\n    private static final String WEST = I18n.getText(\"west\");\n\n    //\n    // FIELDS\n    //\n    // in seconds; positive latitudes are north, positive longitudes are east\n    private int latitude = 0;\n\n    private int longitude = 0;\n\n    //\n    // CLONING\n    //\n    /**\n     *       Make a clone of this Location.\n     *\n     *       @return a Location with the same latitude and longitude as this one\n     */\n    public Object clone() {\n        Location clone = new Location();\n        clone.latitude = this.latitude;\n        clone.longitude = this.longitude;\n        return clone;\n    }\n\n    /**\n     *       Copy the (latitude, longitude) from one location to another.\n     *\n     *       @param target the Location to copy from\n     *       @param source the Location to copy to\n     */\n    public static void copy(Location target, Location source) {\n        target.latitude = source.latitude;\n        target.longitude = source.longitude;\n    }\n\n    //\n    // ACCESSORS\n    //\n    /**\n     *       Return the latitude, in degrees.\n     *\n     *       @return the latitude, in degrees\n     */\n    public float getLatitudeAsDegrees() {\n        return latitude / 3600f;\n    }\n\n    /**\n     *       Return the longitude, in degrees.\n     *\n     *       @return the longitude, in degrees\n     */\n    public float getLongitudeAsDegrees() {\n        return longitude / 3600f;\n    }\n\n    /**\n     *       Set the latitude, in degrees.\n     *\n     *       @param degrees the new latitude, in degrees\n     */\n    public void setLatitudeAsDegrees(float degrees) {\n        int seconds = Math.round(degrees * 3600);\n        if (seconds < MIN_LATITUDE)\n            seconds = MIN_LATITUDE;\n        else if (seconds > MAX_LATITUDE)\n            seconds = MAX_LATITUDE;\n        this.latitude = seconds;\n    }\n\n    /**\n     *       Set the longitude, in degrees.\n     *\n     *       @param degrees the new longitude, in degrees\n     */\n    public void setLongitudeAsDegrees(float degrees) {\n        int seconds = Math.round(degrees * 3600);\n        // need to make sure the longitude is between -180 and 179 degrees.\n        // 180 degrees, for example, gets sent back down to -180.\n        // if i were doing degrees, i'd add 180, mod 360, sub 180.\n        // so just do that in seconds.\n        seconds += 180 * 3600;\n        seconds %= 360 * 3600;\n        if (seconds <= 0)\n            seconds += 180 * 3600;\n        else\n            seconds -= 180 * 3600;\n        this.longitude = seconds;\n    }\n\n    /**\n     *       Get the latitude, in seconds.\n     *\n     *       @return the latitude, in seconds\n     */\n    public int getLatitudeAsSeconds() {\n        return latitude;\n    }\n\n    /**\n     *       Get the longitude, in seconds.\n     *\n     *       @return the longitude, in seconds\n     */\n    public int getLongitudeAsSeconds() {\n        return longitude;\n    }\n\n    /**\n     *       Set the latitude, in seconds.\n     *\n     *       @param seconds the new latitude, in seconds\n     */\n    public void setLatitudeAsSeconds(int seconds) {\n        if (seconds < MIN_LATITUDE)\n            seconds = MIN_LATITUDE;\n        else if (seconds > MAX_LATITUDE)\n            seconds = MAX_LATITUDE;\n        this.latitude = seconds;\n    }\n\n    /**\n     *       Set the longitude, in seconds.\n     *\n     *       @param seconds the new longitude, in seconds\n     */\n    public void setLongitudeAsSeconds(int seconds) {\n        // make sure longitude is between -180 and 179 degrees.\n        // see setLongitudeAsDegrees().\n        seconds += 180 * 3600;\n        seconds %= 360 * 3600;\n        if (seconds <= 0)\n            seconds += 180 * 3600;\n        else\n            seconds -= 180 * 3600;\n        // PERF: make sure these are computed at compile-time, not run-time.\n        // FIXME: extract method normalizeLongitude() (lat, too, while you're at it)\n        this.longitude = seconds;\n    }\n\n    //\n    // CONSTRUCTORS\n    //\n    /**\n     * Default location: 0&deg;N 0&deg;E.\n     */\n    public Location() {\n        // do nothing\n    }\n\n    /**\n     *         Constructor, given a String.  The input format is perfectly\n     * \tcompatible with the output of toString(), but is lenient in\n     * \tcase users type in a location and can't type the degree-sign\n     *         &mdash; any gap between numbers works, so \"34*56' N 11 22W\" will\n     * \twork just fine.  It also accepts ISO-6709 format strings\n     *         (but only the \"+DDMMSS+DDDMMSS/\" version so far).\n     *\n     * \t@param string the String to parse\n     *         @exception NumberFormatException if the location can't be parsed\n     */\n    public Location(String string) throws NumberFormatException {\n        setLocation(string);\n    }\n\n    public void setLocation(String string) throws NumberFormatException {\n        if (isISO6709(string))\n            parseISO6709(string);\n        else\n            parseString(string);\n    }\n\n    private void parseString(String string) throws NumberFormatException {\n        String whitespace = \" \\t\\n\\r\";\n        String degreeMinuteSecond = \"\\u00B0*'\\\"\";\n        StringTokenizer tok = new StringTokenizer(string, whitespace + degreeMinuteSecond);\n        // mulitply by this to make seconds\n        int multiplier = 3600;\n        // total of the seconds so far\n        int total = 0;\n        // we'll barf unless we have exactly one of each.\n        int latitudeCount = 0, longitudeCount = 0;\n        while (tok.hasMoreTokens()) {\n            String token = tok.nextToken();\n            try {\n                // it's a number: multiply it, to make it seconds, and add it.\n                // (if we get too many numbers, like \"12*34'56''78'''N\",\n                // multiplier=0 after 3 of them, so it's automatically ignored.)\n                int number = Integer.parseInt(token);\n                total += number * multiplier;\n                multiplier /= 60;\n            } catch (NumberFormatException nfe) {\n                // it's not a number: it's N/S/E/W (if not, ignore it).\n                // assume, in any given locale, that compass points never\n                // differ from each other only by case.  users will love you.\n                String compassPoint = token.toUpperCase();\n                if (compassPoint.equals(NORTH)) {\n                    setLatitudeAsSeconds(total);\n                    latitudeCount++;\n                } else if (compassPoint.equals(SOUTH)) {\n                    setLatitudeAsSeconds(-total);\n                    latitudeCount++;\n                } else if (compassPoint.equals(EAST)) {\n                    setLongitudeAsSeconds(total);\n                    longitudeCount++;\n                } else if (compassPoint.equals(WEST)) {\n                    setLongitudeAsSeconds(-total);\n                    longitudeCount++;\n                }\n                // reset multiplier, total\n                multiplier = 3600;\n                total = 0;\n            }\n        }\n        // a location has exactly one latitude, and one longitude.  double-check this.\n        if (latitudeCount != 1 || longitudeCount != 1)\n            throw new NumberFormatException(\"bad number of terms in location!\");\n    }\n\n    // this method only knows how to parse the \"+DDMMSS+DDDMMSS/\" format so far\n    // (i.e., the format that toISO6709() returns)\n    private void parseISO6709(String string) throws NumberFormatException {\n        if (string.length() != 16)\n            throw new NumberFormatException(\"don't know how to parse all ISO-6709 locations yet!\");\n        boolean north = (string.charAt(0) == '+');\n        int latDegs = Integer.parseInt(string.substring(1, 3));\n        int latMins = Integer.parseInt(string.substring(3, 5));\n        int latSecs = Integer.parseInt(string.substring(5, 7));\n        setLatitudeAsSeconds((north ? +1 : -1) * (latDegs * 3600 + latMins * 60 + latSecs));\n        boolean east = (string.charAt(7) == '+');\n        int longDegs = Integer.parseInt(string.substring(8, 11));\n        int longMins = Integer.parseInt(string.substring(11, 13));\n        int longSecs = Integer.parseInt(string.substring(13, 15));\n        setLongitudeAsSeconds((east ? +1 : -1) * (longDegs * 3600 + longMins * 60 + longSecs));\n    }\n\n    //\n    // TOSTRING\n    //\n    /*\n     * For location editor\n     */\n    public String getEasyString() {\n        // extract degrees and minutes, latitude and longitude\n        int latDegs = Math.abs(getLatitudeAsSeconds()) / 3600;\n        int latMins = Math.abs(getLatitudeAsSeconds()) / 60 - latDegs * 60;\n        int longDegs = Math.abs(getLongitudeAsSeconds()) / 3600;\n        int longMins = Math.abs(getLongitudeAsSeconds()) / 60 - longDegs * 60;\n        // hemispheres\n        String latHemi = (latitude > 0 ? NORTH : SOUTH);\n        String longHemi = (longitude > 0 ? EAST : WEST);\n        // assemble it into a string\n        return latDegs + \",\" + latMins + \",\" + latHemi + \",\" + longDegs + \",\" + longMins + \",\" + longHemi;\n    }\n\n    public String getLatitudeAsString() {\n        // extract degrees and minutes\n        int latDegs = Math.abs(getLatitudeAsSeconds()) / 3600;\n        int latMins = Math.abs(getLatitudeAsSeconds()) / 60 - latDegs * 60;\n        // hemisphere\n        String latHemi = (latitude > 0 ? NORTH : SOUTH);\n        return latDegs + DEGREE_SIGN + latMins + \"'\" + latHemi;\n    }\n\n    public String getLongitudeAsString() {\n        // extract degrees and minutes\n        int longDegs = Math.abs(getLongitudeAsSeconds()) / 3600;\n        int longMins = Math.abs(getLongitudeAsSeconds()) / 60 - longDegs * 60;\n        // hemispheres\n        String longHemi = (longitude > 0 ? EAST : WEST);\n        return longDegs + DEGREE_SIGN + longMins + \"'\" + longHemi;\n    }\n\n    /**\n     *       Return this location as a nicely-formatted string.  The string returned by this\n     *       method is locale-dependent, and should only be used for presentation to the user,\n     *       not for long-term storage; for that, see the toISO6709() method.\n     *\n     *       @see #toISO6709\n     *\n     *       @return this location as a string\n     */\n    public String toString() {\n        return getLatitudeAsString() + \" \" + getLongitudeAsString();\n    }\n\n    // unicode DEGREE SIGN character\n    public static final String DEGREE_SIGN = \"\\u00B0\";\n\n    // is this string an ISO-6709 location?\n    private boolean isISO6709(String check) {\n        return (check.startsWith(\"+\") || check.startsWith(\"-\")) && check.endsWith(\"/\");\n    }\n\n    /**\n     *       Convert this location to an ISO-6709 string.  (See above for where to ind ISO-6709\n     *       information.)\n     *\n     *       <p>This method always uses the ISO-6709 format <code>+DDMMSS+DDDMMSS/</code>.</p>\n     *\n     *       @return this Location as an ISO-6709 string\n     */\n    public String toISO6709() {\n        StringBuffer buf = new StringBuffer();\n        DecimalFormat twoDigits = new DecimalFormat(\"00\");\n        DecimalFormat threeDigits = new DecimalFormat(\"000\");\n        // latitude\n        buf.append(latitude < 0 ? \"-\" : \"+\");\n        int latDegs = Math.abs(getLatitudeAsSeconds()) / 3600;\n        int latMins = Math.abs(getLatitudeAsSeconds()) / 60 - latDegs * 60;\n        int latSecs = Math.abs(getLatitudeAsSeconds()) - latDegs * 3600 - latMins * 60;\n        buf.append(twoDigits.format(latDegs));\n        buf.append(twoDigits.format(latMins));\n        buf.append(twoDigits.format(latSecs));\n        // longitude\n        buf.append(longitude < 0 ? \"-\" : \"+\");\n        int longDegs = Math.abs(getLongitudeAsSeconds()) / 3600;\n        int longMins = Math.abs(getLongitudeAsSeconds()) / 60 - longDegs * 60;\n        int longSecs = Math.abs(getLongitudeAsSeconds()) - longDegs * 3600 - longMins * 60;\n        buf.append(threeDigits.format(longDegs));\n        buf.append(twoDigits.format(longMins));\n        buf.append(twoDigits.format(longSecs));\n        // altitude\n        // -- if i want altitude later, add it here, as \"+AAA...\"\n        // terminator\n        buf.append(\"/\");\n        return buf.toString();\n    }\n\n    //\n    // EQUALS and HASHCODE\n    //\n    /**\n     *       Check if an object is equal to this Location.  This tests equality to\n     *       second accuracy.\n     *\n     *       @param object the other Location to compare this against\n     *       @return true, if the object is a Location and equal to this, else false\n     */\n    public boolean equals(Object object) {\n        // make sure it's a Location\n        if (!(object instanceof Location))\n            return false;\n        // check seconds\n        Location location = (Location) object;\n        return (latitude == location.latitude && longitude == location.longitude);\n    }\n\n    /**\n     *       A hashcode for Locations.  (Since I define equals(), I need to define hashCode().)\n     *\n     *       @return a hash code for this Location\n     */\n    public int hashCode() {\n        return latitude * latitude * latitude + 3 * longitude * longitude * longitude;\n    }\n\n    //\n    // DISTANCE\n    //\n    /**\n     *       Compute the surface distance between two Locations, rounded to\n     *       the nearest 10km.\n     *\n     *       @param location measure distance to this Location\n     *       @return the distance in kilometers\n     */\n    public synchronized int distanceTo(Location location) {\n        // i have to be synch because i use static points\n        // for computation, to save allocations.  it's ok,\n        // i'm really fast.\n        // the two points, in (x,y,z) coordinates\n        p1.setFromLocation(this);\n        p2.setFromLocation(location);\n        // sides of a triangle:\n        // center-to-A\n        float a = EARTH_RADIUS;\n        // center-to-B\n        float b = EARTH_RADIUS;\n        // A-to-B (straight-line distance)\n        float c = p1.distanceTo(p2);\n        // angle at center between two locations (law of cosine)\n        float C = (float) Math.acos((a * a + b * b - c * c) / (2 * a * b));\n        // distance between locations, on the sphere of the earth\n        float dist = EARTH_RADIUS * C;\n        // round to nearest ten kilometers\n        return roundTo(dist, 10);\n    }\n\n    // points used by distanceTo().  distanceTo() is otherwise pretty darn\n    // fast, so i'll preallocate these (only once, as class members).\n    // the only downside is that distanceTo() has to be synchronized,\n    // but it returns almost immediately so it's probably no big deal.\n    private static Point3D p1 = new Point3D(), p2 = new Point3D();\n\n    // roundTo(x, 10) rounds x to the nearest 10, for example.\n    // WRITEME: unit test for this method?\n    private int roundTo(float value, int place) {\n        return place * (int) Math.round(value / (float) place);\n    }\n\n    /**\n     *       Check whether the given location is near this location.\n     *\n     *       <p>Unlike most Java methods, the parameter <code>location</code>\n     *       may be null; isNear(null, threshold) is always false.</p>\n     *\n     *       @param location the location to check\n     *       @param threshold the number of kilometers to consider \"near\"\n     *       @return true, if the location is non-null and within the threshold\n     */\n    public boolean isNear(Location location, int threshold) {\n        return (location != null) && (distanceTo(location) <= threshold);\n    }\n\n    /**\n     *       Make a location halfway between 2 locations.\n     *\n     *       <p>The midpoint is computed as the average of the latitudes, and\n     *       the average of the longitudes.  That may not be very accurate on\n     *       non-rectangular projections.</p>\n     *\n     *       @param a the first point\n     *       @param b the second point\n     *       @return the midpoint of a and b\n     */\n    public static Location midpoint(Location a, Location b) {\n        // latitude doesn't wrap around, just take the mean\n        Location l = new Location();\n        l.setLatitudeAsSeconds((a.getLatitudeAsSeconds() + b.getLatitudeAsSeconds()) / 2);\n        // longitude, though, does wrap around, so pick the short way.\n        // (i.e., if the difference is greater than 180 degrees, jump to the\n        // opposite side, which is also equidistant, but closer to both.)\n        l.setLongitudeAsSeconds((a.getLongitudeAsSeconds() + b.getLongitudeAsSeconds()) / 2);\n        if (Math.abs(a.getLongitudeAsDegrees() - b.getLongitudeAsDegrees()) >= 180) {\n            // 180 degrees, in seconds\n            final int HALFWAY = 180 * 60 * 60;\n            l.setLongitudeAsSeconds((l.getLongitudeAsSeconds() + HALFWAY) % HALFWAY);\n        }\n        return l;\n    }\n\n    public boolean valid() {\n        return (!(latitude == 0 && longitude == 0));\n    }\n}\n",
		"id": "/EvoSuiteBenchmark/35_corina/src/main/java/corina/site/Location_3Test.java",
		"test_prompt": "// Location_3Test.java\n// This file is part of Corina.\n//\n// Corina is free software; you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation; either version 2 of the License, or\n// (at your option) any later version.\n//\n// Corina is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Corina; if not, write to the Free Software\n// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n//\n// Copyright 2003 Ken Harris <kbh7@cornell.edu>\n//\npackage corina.site;\n\nimport corina.map.Point3D;\nimport corina.ui.I18n;\nimport java.util.StringTokenizer;\nimport java.text.DecimalFormat;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link Location}.\n* It contains ten unit test cases for the {@link Location#hashCode()} method.\n*/\nclass Location_3Test {"
	},
	{
		"original_code": "// Location.java\n//\n// This file is part of Corina.\n//\n// Corina is free software; you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation; either version 2 of the License, or\n// (at your option) any later version.\n//\n// Corina is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Corina; if not, write to the Free Software\n// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n//\n// Copyright 2003 Ken Harris <kbh7@cornell.edu>\n//\npackage corina.site;\n\nimport corina.map.Point3D;\nimport corina.ui.I18n;\nimport java.util.StringTokenizer;\nimport java.text.DecimalFormat;\n\n/**\n *   A (latitude, longitude) location on the earth.\n *\n *   <p>Latitudes run from -90 to 90 degrees; longitudes run from -180 to 180 degrees.\n *   Positive latitudes are north; positive longitudes are east.</p>\n *\n *   <p>The accessors are a bit different than most classes, because there are two\n *   fairly natural ways to access latitude and longitude angles.\n *\n *   <ul>\n *     <li>The first is how you'd read or write them, with degrees, minutes, and seconds,\n *     like \"38&deg;15'N\".\n *\n *     <li>The second is more natural for computation, as a floating point number, like\n *     38.25.\n *   </ul>\n *\n *   <p>Since there are times you'd need both, both are provided.  There are 8\n *   accessors total, for each combination of get/set, latitude/longitude, and\n *   integer/floating point.  The methods that end with \"...AsDegrees()\" deal with\n *   floating point numbers, as degrees, and the methods that end with \"...AsSeconds()\"\n *   deal with integers, as seconds (60 seconds to a minute, 60 minutes to a degree).\n *   (Note that 1 second is about 30 meters at the equator.  You'll never need\n *   sub-second resolution.)</p>\n *\n *   <p>(It might be nice to have immutable Locations sometimes, but when rendering maps\n *   you need speed, speed, speed, and one of the best ways to make Java go faster is to\n *   generate less garbage for the GC to have to deal with.)</p>\n *\n *   <p>ISO 6709 provides an ASCII-only, locale-independent way to store\n *   latitude, longitude, and altitude.  ISO is\n *   <a href=\"http://www.iso.org/iso/en/CatalogueDetailPage.CatalogueDetail?CSNUMBER=13152\">charging\n *   30 bucks for it</a>, even though it's only a 3-page PDF.  Sigh.\n *   But you can get <a href=\"http://www.ftp.uni-erlangen.de/pub/doc/ISO/ISO-6709-summary\">the\n *   Cliff notes here</a>, or <a href=\"http://www.ftp.uni-erlangen.de/pub/doc/ISO/iso-6709.pdf\">the\n *   whole thing here</a>.</p>\n *\n *   <h2>Left to do:</h2>\n *   <ul>\n *     <li>Extend parseISO6709() to parse any ISO-6709 format\n *     <li>Decide if this class is threadsafe or not.\n *     <li>Location.copy() is a bad idea; get rid of it\n *   </ul>\n *\n *   @author Ken Harris &lt;kbh7 <i style=\"color: gray\">at</i> cornell <i style=\"color: gray\">dot</i> edu&gt;\n *   @version $Id: Location.java,v 1.3 2006/06/20 17:58:19 lucasmo Exp $\n */\npublic final class Location implements Cloneable {\n\n    //\n    // CONSTANTS\n    //\n    /**\n     *       Radius of the earth in kilometers.  From Miller & Schroeer,\n     *       <i>College Physics</i>, 6th ed: 6.38x10<sup>3</sup> km.\n     */\n    // 6.38 x 10^6 m\n    public final static float EARTH_RADIUS = 6.38e3f;\n\n    // limits on latitude and longitude, in seconds\n    private static final int MIN_LATITUDE = -90 * 3600;\n\n    private static final int MAX_LATITUDE = 90 * 3600;\n\n    private static final int MIN_LONGITUDE = -180 * 3600;\n\n    private static final int MAX_LONGITUDE = 180 * 3600 - 1;\n\n    // L10n of N/S/E/W -- i'll use these inside a loop, later,\n    // so i'll just keep them around.\n    private static final String NORTH = I18n.getText(\"north\");\n\n    private static final String SOUTH = I18n.getText(\"south\");\n\n    private static final String EAST = I18n.getText(\"east\");\n\n    private static final String WEST = I18n.getText(\"west\");\n\n    //\n    // FIELDS\n    //\n    // in seconds; positive latitudes are north, positive longitudes are east\n    private int latitude = 0;\n\n    private int longitude = 0;\n\n    //\n    // CLONING\n    //\n    /**\n     *       Make a clone of this Location.\n     *\n     *       @return a Location with the same latitude and longitude as this one\n     */\n    public Object clone() {\n        Location clone = new Location();\n        clone.latitude = this.latitude;\n        clone.longitude = this.longitude;\n        return clone;\n    }\n\n    /**\n     *       Copy the (latitude, longitude) from one location to another.\n     *\n     *       @param target the Location to copy from\n     *       @param source the Location to copy to\n     */\n    public static void copy(Location target, Location source) {\n        target.latitude = source.latitude;\n        target.longitude = source.longitude;\n    }\n\n    //\n    // ACCESSORS\n    //\n    /**\n     *       Return the latitude, in degrees.\n     *\n     *       @return the latitude, in degrees\n     */\n    public float getLatitudeAsDegrees() {\n        return latitude / 3600f;\n    }\n\n    /**\n     *       Return the longitude, in degrees.\n     *\n     *       @return the longitude, in degrees\n     */\n    public float getLongitudeAsDegrees() {\n        return longitude / 3600f;\n    }\n\n    /**\n     *       Set the latitude, in degrees.\n     *\n     *       @param degrees the new latitude, in degrees\n     */\n    public void setLatitudeAsDegrees(float degrees) {\n        int seconds = Math.round(degrees * 3600);\n        if (seconds < MIN_LATITUDE)\n            seconds = MIN_LATITUDE;\n        else if (seconds > MAX_LATITUDE)\n            seconds = MAX_LATITUDE;\n        this.latitude = seconds;\n    }\n\n    /**\n     *       Set the longitude, in degrees.\n     *\n     *       @param degrees the new longitude, in degrees\n     */\n    public void setLongitudeAsDegrees(float degrees) {\n        int seconds = Math.round(degrees * 3600);\n        // need to make sure the longitude is between -180 and 179 degrees.\n        // 180 degrees, for example, gets sent back down to -180.\n        // if i were doing degrees, i'd add 180, mod 360, sub 180.\n        // so just do that in seconds.\n        seconds += 180 * 3600;\n        seconds %= 360 * 3600;\n        if (seconds <= 0)\n            seconds += 180 * 3600;\n        else\n            seconds -= 180 * 3600;\n        this.longitude = seconds;\n    }\n\n    /**\n     *       Get the latitude, in seconds.\n     *\n     *       @return the latitude, in seconds\n     */\n    public int getLatitudeAsSeconds() {\n        return latitude;\n    }\n\n    /**\n     *       Get the longitude, in seconds.\n     *\n     *       @return the longitude, in seconds\n     */\n    public int getLongitudeAsSeconds() {\n        return longitude;\n    }\n\n    /**\n     *       Set the latitude, in seconds.\n     *\n     *       @param seconds the new latitude, in seconds\n     */\n    public void setLatitudeAsSeconds(int seconds) {\n        if (seconds < MIN_LATITUDE)\n            seconds = MIN_LATITUDE;\n        else if (seconds > MAX_LATITUDE)\n            seconds = MAX_LATITUDE;\n        this.latitude = seconds;\n    }\n\n    /**\n     *       Set the longitude, in seconds.\n     *\n     *       @param seconds the new longitude, in seconds\n     */\n    public void setLongitudeAsSeconds(int seconds) {\n        // make sure longitude is between -180 and 179 degrees.\n        // see setLongitudeAsDegrees().\n        seconds += 180 * 3600;\n        seconds %= 360 * 3600;\n        if (seconds <= 0)\n            seconds += 180 * 3600;\n        else\n            seconds -= 180 * 3600;\n        // PERF: make sure these are computed at compile-time, not run-time.\n        // FIXME: extract method normalizeLongitude() (lat, too, while you're at it)\n        this.longitude = seconds;\n    }\n\n    //\n    // CONSTRUCTORS\n    //\n    /**\n     * Default location: 0&deg;N 0&deg;E.\n     */\n    public Location() {\n        // do nothing\n    }\n\n    /**\n     *         Constructor, given a String.  The input format is perfectly\n     * \tcompatible with the output of toString(), but is lenient in\n     * \tcase users type in a location and can't type the degree-sign\n     *         &mdash; any gap between numbers works, so \"34*56' N 11 22W\" will\n     * \twork just fine.  It also accepts ISO-6709 format strings\n     *         (but only the \"+DDMMSS+DDDMMSS/\" version so far).\n     *\n     * \t@param string the String to parse\n     *         @exception NumberFormatException if the location can't be parsed\n     */\n    public Location(String string) throws NumberFormatException {\n        setLocation(string);\n    }\n\n    public void setLocation(String string) throws NumberFormatException {\n        if (isISO6709(string))\n            parseISO6709(string);\n        else\n            parseString(string);\n    }\n\n    private void parseString(String string) throws NumberFormatException {\n        String whitespace = \" \\t\\n\\r\";\n        String degreeMinuteSecond = \"\\u00B0*'\\\"\";\n        StringTokenizer tok = new StringTokenizer(string, whitespace + degreeMinuteSecond);\n        // mulitply by this to make seconds\n        int multiplier = 3600;\n        // total of the seconds so far\n        int total = 0;\n        // we'll barf unless we have exactly one of each.\n        int latitudeCount = 0, longitudeCount = 0;\n        while (tok.hasMoreTokens()) {\n            String token = tok.nextToken();\n            try {\n                // it's a number: multiply it, to make it seconds, and add it.\n                // (if we get too many numbers, like \"12*34'56''78'''N\",\n                // multiplier=0 after 3 of them, so it's automatically ignored.)\n                int number = Integer.parseInt(token);\n                total += number * multiplier;\n                multiplier /= 60;\n            } catch (NumberFormatException nfe) {\n                // it's not a number: it's N/S/E/W (if not, ignore it).\n                // assume, in any given locale, that compass points never\n                // differ from each other only by case.  users will love you.\n                String compassPoint = token.toUpperCase();\n                if (compassPoint.equals(NORTH)) {\n                    setLatitudeAsSeconds(total);\n                    latitudeCount++;\n                } else if (compassPoint.equals(SOUTH)) {\n                    setLatitudeAsSeconds(-total);\n                    latitudeCount++;\n                } else if (compassPoint.equals(EAST)) {\n                    setLongitudeAsSeconds(total);\n                    longitudeCount++;\n                } else if (compassPoint.equals(WEST)) {\n                    setLongitudeAsSeconds(-total);\n                    longitudeCount++;\n                }\n                // reset multiplier, total\n                multiplier = 3600;\n                total = 0;\n            }\n        }\n        // a location has exactly one latitude, and one longitude.  double-check this.\n        if (latitudeCount != 1 || longitudeCount != 1)\n            throw new NumberFormatException(\"bad number of terms in location!\");\n    }\n\n    // this method only knows how to parse the \"+DDMMSS+DDDMMSS/\" format so far\n    // (i.e., the format that toISO6709() returns)\n    private void parseISO6709(String string) throws NumberFormatException {\n        if (string.length() != 16)\n            throw new NumberFormatException(\"don't know how to parse all ISO-6709 locations yet!\");\n        boolean north = (string.charAt(0) == '+');\n        int latDegs = Integer.parseInt(string.substring(1, 3));\n        int latMins = Integer.parseInt(string.substring(3, 5));\n        int latSecs = Integer.parseInt(string.substring(5, 7));\n        setLatitudeAsSeconds((north ? +1 : -1) * (latDegs * 3600 + latMins * 60 + latSecs));\n        boolean east = (string.charAt(7) == '+');\n        int longDegs = Integer.parseInt(string.substring(8, 11));\n        int longMins = Integer.parseInt(string.substring(11, 13));\n        int longSecs = Integer.parseInt(string.substring(13, 15));\n        setLongitudeAsSeconds((east ? +1 : -1) * (longDegs * 3600 + longMins * 60 + longSecs));\n    }\n\n    //\n    // TOSTRING\n    //\n    /*\n     * For location editor\n     */\n    public String getEasyString() {\n        // extract degrees and minutes, latitude and longitude\n        int latDegs = Math.abs(getLatitudeAsSeconds()) / 3600;\n        int latMins = Math.abs(getLatitudeAsSeconds()) / 60 - latDegs * 60;\n        int longDegs = Math.abs(getLongitudeAsSeconds()) / 3600;\n        int longMins = Math.abs(getLongitudeAsSeconds()) / 60 - longDegs * 60;\n        // hemispheres\n        String latHemi = (latitude > 0 ? NORTH : SOUTH);\n        String longHemi = (longitude > 0 ? EAST : WEST);\n        // assemble it into a string\n        return latDegs + \",\" + latMins + \",\" + latHemi + \",\" + longDegs + \",\" + longMins + \",\" + longHemi;\n    }\n\n    public String getLatitudeAsString() {\n        // extract degrees and minutes\n        int latDegs = Math.abs(getLatitudeAsSeconds()) / 3600;\n        int latMins = Math.abs(getLatitudeAsSeconds()) / 60 - latDegs * 60;\n        // hemisphere\n        String latHemi = (latitude > 0 ? NORTH : SOUTH);\n        return latDegs + DEGREE_SIGN + latMins + \"'\" + latHemi;\n    }\n\n    public String getLongitudeAsString() {\n        // extract degrees and minutes\n        int longDegs = Math.abs(getLongitudeAsSeconds()) / 3600;\n        int longMins = Math.abs(getLongitudeAsSeconds()) / 60 - longDegs * 60;\n        // hemispheres\n        String longHemi = (longitude > 0 ? EAST : WEST);\n        return longDegs + DEGREE_SIGN + longMins + \"'\" + longHemi;\n    }\n\n    /**\n     *       Return this location as a nicely-formatted string.  The string returned by this\n     *       method is locale-dependent, and should only be used for presentation to the user,\n     *       not for long-term storage; for that, see the toISO6709() method.\n     *\n     *       @see #toISO6709\n     *\n     *       @return this location as a string\n     */\n    public String toString() {\n        return getLatitudeAsString() + \" \" + getLongitudeAsString();\n    }\n\n    // unicode DEGREE SIGN character\n    public static final String DEGREE_SIGN = \"\\u00B0\";\n\n    // is this string an ISO-6709 location?\n    private boolean isISO6709(String check) {\n        return (check.startsWith(\"+\") || check.startsWith(\"-\")) && check.endsWith(\"/\");\n    }\n\n    /**\n     *       Convert this location to an ISO-6709 string.  (See above for where to ind ISO-6709\n     *       information.)\n     *\n     *       <p>This method always uses the ISO-6709 format <code>+DDMMSS+DDDMMSS/</code>.</p>\n     *\n     *       @return this Location as an ISO-6709 string\n     */\n    public String toISO6709() {\n        StringBuffer buf = new StringBuffer();\n        DecimalFormat twoDigits = new DecimalFormat(\"00\");\n        DecimalFormat threeDigits = new DecimalFormat(\"000\");\n        // latitude\n        buf.append(latitude < 0 ? \"-\" : \"+\");\n        int latDegs = Math.abs(getLatitudeAsSeconds()) / 3600;\n        int latMins = Math.abs(getLatitudeAsSeconds()) / 60 - latDegs * 60;\n        int latSecs = Math.abs(getLatitudeAsSeconds()) - latDegs * 3600 - latMins * 60;\n        buf.append(twoDigits.format(latDegs));\n        buf.append(twoDigits.format(latMins));\n        buf.append(twoDigits.format(latSecs));\n        // longitude\n        buf.append(longitude < 0 ? \"-\" : \"+\");\n        int longDegs = Math.abs(getLongitudeAsSeconds()) / 3600;\n        int longMins = Math.abs(getLongitudeAsSeconds()) / 60 - longDegs * 60;\n        int longSecs = Math.abs(getLongitudeAsSeconds()) - longDegs * 3600 - longMins * 60;\n        buf.append(threeDigits.format(longDegs));\n        buf.append(twoDigits.format(longMins));\n        buf.append(twoDigits.format(longSecs));\n        // altitude\n        // -- if i want altitude later, add it here, as \"+AAA...\"\n        // terminator\n        buf.append(\"/\");\n        return buf.toString();\n    }\n\n    //\n    // EQUALS and HASHCODE\n    //\n    /**\n     *       Check if an object is equal to this Location.  This tests equality to\n     *       second accuracy.\n     *\n     *       @param object the other Location to compare this against\n     *       @return true, if the object is a Location and equal to this, else false\n     */\n    public boolean equals(Object object) {\n        // make sure it's a Location\n        if (!(object instanceof Location))\n            return false;\n        // check seconds\n        Location location = (Location) object;\n        return (latitude == location.latitude && longitude == location.longitude);\n    }\n\n    /**\n     *       A hashcode for Locations.  (Since I define equals(), I need to define hashCode().)\n     *\n     *       @return a hash code for this Location\n     */\n    public int hashCode() {\n        return latitude * latitude * latitude + 3 * longitude * longitude * longitude;\n    }\n\n    //\n    // DISTANCE\n    //\n    /**\n     *       Compute the surface distance between two Locations, rounded to\n     *       the nearest 10km.\n     *\n     *       @param location measure distance to this Location\n     *       @return the distance in kilometers\n     */\n    public synchronized int distanceTo(Location location) {\n        // i have to be synch because i use static points\n        // for computation, to save allocations.  it's ok,\n        // i'm really fast.\n        // the two points, in (x,y,z) coordinates\n        p1.setFromLocation(this);\n        p2.setFromLocation(location);\n        // sides of a triangle:\n        // center-to-A\n        float a = EARTH_RADIUS;\n        // center-to-B\n        float b = EARTH_RADIUS;\n        // A-to-B (straight-line distance)\n        float c = p1.distanceTo(p2);\n        // angle at center between two locations (law of cosine)\n        float C = (float) Math.acos((a * a + b * b - c * c) / (2 * a * b));\n        // distance between locations, on the sphere of the earth\n        float dist = EARTH_RADIUS * C;\n        // round to nearest ten kilometers\n        return roundTo(dist, 10);\n    }\n\n    // points used by distanceTo().  distanceTo() is otherwise pretty darn\n    // fast, so i'll preallocate these (only once, as class members).\n    // the only downside is that distanceTo() has to be synchronized,\n    // but it returns almost immediately so it's probably no big deal.\n    private static Point3D p1 = new Point3D(), p2 = new Point3D();\n\n    // roundTo(x, 10) rounds x to the nearest 10, for example.\n    // WRITEME: unit test for this method?\n    private int roundTo(float value, int place) {\n        return place * (int) Math.round(value / (float) place);\n    }\n\n    /**\n     *       Check whether the given location is near this location.\n     *\n     *       <p>Unlike most Java methods, the parameter <code>location</code>\n     *       may be null; isNear(null, threshold) is always false.</p>\n     *\n     *       @param location the location to check\n     *       @param threshold the number of kilometers to consider \"near\"\n     *       @return true, if the location is non-null and within the threshold\n     */\n    public boolean isNear(Location location, int threshold) {\n        return (location != null) && (distanceTo(location) <= threshold);\n    }\n\n    /**\n     *       Make a location halfway between 2 locations.\n     *\n     *       <p>The midpoint is computed as the average of the latitudes, and\n     *       the average of the longitudes.  That may not be very accurate on\n     *       non-rectangular projections.</p>\n     *\n     *       @param a the first point\n     *       @param b the second point\n     *       @return the midpoint of a and b\n     */\n    public static Location midpoint(Location a, Location b) {\n        // latitude doesn't wrap around, just take the mean\n        Location l = new Location();\n        l.setLatitudeAsSeconds((a.getLatitudeAsSeconds() + b.getLatitudeAsSeconds()) / 2);\n        // longitude, though, does wrap around, so pick the short way.\n        // (i.e., if the difference is greater than 180 degrees, jump to the\n        // opposite side, which is also equidistant, but closer to both.)\n        l.setLongitudeAsSeconds((a.getLongitudeAsSeconds() + b.getLongitudeAsSeconds()) / 2);\n        if (Math.abs(a.getLongitudeAsDegrees() - b.getLongitudeAsDegrees()) >= 180) {\n            // 180 degrees, in seconds\n            final int HALFWAY = 180 * 60 * 60;\n            l.setLongitudeAsSeconds((l.getLongitudeAsSeconds() + HALFWAY) % HALFWAY);\n        }\n        return l;\n    }\n\n    public boolean valid() {\n        return (!(latitude == 0 && longitude == 0));\n    }\n}\n",
		"id": "/EvoSuiteBenchmark/35_corina/src/main/java/corina/site/Location_4Test.java",
		"test_prompt": "// Location_4Test.java\n// This file is part of Corina.\n//\n// Corina is free software; you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation; either version 2 of the License, or\n// (at your option) any later version.\n//\n// Corina is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Corina; if not, write to the Free Software\n// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n//\n// Copyright 2003 Ken Harris <kbh7@cornell.edu>\n//\npackage corina.site;\n\nimport corina.map.Point3D;\nimport corina.ui.I18n;\nimport java.util.StringTokenizer;\nimport java.text.DecimalFormat;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link Location}.\n* It contains ten unit test cases for the {@link Location#distanceTo(Location)} method.\n*/\nclass Location_4Test {"
	},
	{
		"original_code": "// Location.java\n//\n// This file is part of Corina.\n//\n// Corina is free software; you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation; either version 2 of the License, or\n// (at your option) any later version.\n//\n// Corina is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Corina; if not, write to the Free Software\n// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n//\n// Copyright 2003 Ken Harris <kbh7@cornell.edu>\n//\npackage corina.site;\n\nimport corina.map.Point3D;\nimport corina.ui.I18n;\nimport java.util.StringTokenizer;\nimport java.text.DecimalFormat;\n\n/**\n *   A (latitude, longitude) location on the earth.\n *\n *   <p>Latitudes run from -90 to 90 degrees; longitudes run from -180 to 180 degrees.\n *   Positive latitudes are north; positive longitudes are east.</p>\n *\n *   <p>The accessors are a bit different than most classes, because there are two\n *   fairly natural ways to access latitude and longitude angles.\n *\n *   <ul>\n *     <li>The first is how you'd read or write them, with degrees, minutes, and seconds,\n *     like \"38&deg;15'N\".\n *\n *     <li>The second is more natural for computation, as a floating point number, like\n *     38.25.\n *   </ul>\n *\n *   <p>Since there are times you'd need both, both are provided.  There are 8\n *   accessors total, for each combination of get/set, latitude/longitude, and\n *   integer/floating point.  The methods that end with \"...AsDegrees()\" deal with\n *   floating point numbers, as degrees, and the methods that end with \"...AsSeconds()\"\n *   deal with integers, as seconds (60 seconds to a minute, 60 minutes to a degree).\n *   (Note that 1 second is about 30 meters at the equator.  You'll never need\n *   sub-second resolution.)</p>\n *\n *   <p>(It might be nice to have immutable Locations sometimes, but when rendering maps\n *   you need speed, speed, speed, and one of the best ways to make Java go faster is to\n *   generate less garbage for the GC to have to deal with.)</p>\n *\n *   <p>ISO 6709 provides an ASCII-only, locale-independent way to store\n *   latitude, longitude, and altitude.  ISO is\n *   <a href=\"http://www.iso.org/iso/en/CatalogueDetailPage.CatalogueDetail?CSNUMBER=13152\">charging\n *   30 bucks for it</a>, even though it's only a 3-page PDF.  Sigh.\n *   But you can get <a href=\"http://www.ftp.uni-erlangen.de/pub/doc/ISO/ISO-6709-summary\">the\n *   Cliff notes here</a>, or <a href=\"http://www.ftp.uni-erlangen.de/pub/doc/ISO/iso-6709.pdf\">the\n *   whole thing here</a>.</p>\n *\n *   <h2>Left to do:</h2>\n *   <ul>\n *     <li>Extend parseISO6709() to parse any ISO-6709 format\n *     <li>Decide if this class is threadsafe or not.\n *     <li>Location.copy() is a bad idea; get rid of it\n *   </ul>\n *\n *   @author Ken Harris &lt;kbh7 <i style=\"color: gray\">at</i> cornell <i style=\"color: gray\">dot</i> edu&gt;\n *   @version $Id: Location.java,v 1.3 2006/06/20 17:58:19 lucasmo Exp $\n */\npublic final class Location implements Cloneable {\n\n    //\n    // CONSTANTS\n    //\n    /**\n     *       Radius of the earth in kilometers.  From Miller & Schroeer,\n     *       <i>College Physics</i>, 6th ed: 6.38x10<sup>3</sup> km.\n     */\n    // 6.38 x 10^6 m\n    public final static float EARTH_RADIUS = 6.38e3f;\n\n    // limits on latitude and longitude, in seconds\n    private static final int MIN_LATITUDE = -90 * 3600;\n\n    private static final int MAX_LATITUDE = 90 * 3600;\n\n    private static final int MIN_LONGITUDE = -180 * 3600;\n\n    private static final int MAX_LONGITUDE = 180 * 3600 - 1;\n\n    // L10n of N/S/E/W -- i'll use these inside a loop, later,\n    // so i'll just keep them around.\n    private static final String NORTH = I18n.getText(\"north\");\n\n    private static final String SOUTH = I18n.getText(\"south\");\n\n    private static final String EAST = I18n.getText(\"east\");\n\n    private static final String WEST = I18n.getText(\"west\");\n\n    //\n    // FIELDS\n    //\n    // in seconds; positive latitudes are north, positive longitudes are east\n    private int latitude = 0;\n\n    private int longitude = 0;\n\n    //\n    // CLONING\n    //\n    /**\n     *       Make a clone of this Location.\n     *\n     *       @return a Location with the same latitude and longitude as this one\n     */\n    public Object clone() {\n        Location clone = new Location();\n        clone.latitude = this.latitude;\n        clone.longitude = this.longitude;\n        return clone;\n    }\n\n    /**\n     *       Copy the (latitude, longitude) from one location to another.\n     *\n     *       @param target the Location to copy from\n     *       @param source the Location to copy to\n     */\n    public static void copy(Location target, Location source) {\n        target.latitude = source.latitude;\n        target.longitude = source.longitude;\n    }\n\n    //\n    // ACCESSORS\n    //\n    /**\n     *       Return the latitude, in degrees.\n     *\n     *       @return the latitude, in degrees\n     */\n    public float getLatitudeAsDegrees() {\n        return latitude / 3600f;\n    }\n\n    /**\n     *       Return the longitude, in degrees.\n     *\n     *       @return the longitude, in degrees\n     */\n    public float getLongitudeAsDegrees() {\n        return longitude / 3600f;\n    }\n\n    /**\n     *       Set the latitude, in degrees.\n     *\n     *       @param degrees the new latitude, in degrees\n     */\n    public void setLatitudeAsDegrees(float degrees) {\n        int seconds = Math.round(degrees * 3600);\n        if (seconds < MIN_LATITUDE)\n            seconds = MIN_LATITUDE;\n        else if (seconds > MAX_LATITUDE)\n            seconds = MAX_LATITUDE;\n        this.latitude = seconds;\n    }\n\n    /**\n     *       Set the longitude, in degrees.\n     *\n     *       @param degrees the new longitude, in degrees\n     */\n    public void setLongitudeAsDegrees(float degrees) {\n        int seconds = Math.round(degrees * 3600);\n        // need to make sure the longitude is between -180 and 179 degrees.\n        // 180 degrees, for example, gets sent back down to -180.\n        // if i were doing degrees, i'd add 180, mod 360, sub 180.\n        // so just do that in seconds.\n        seconds += 180 * 3600;\n        seconds %= 360 * 3600;\n        if (seconds <= 0)\n            seconds += 180 * 3600;\n        else\n            seconds -= 180 * 3600;\n        this.longitude = seconds;\n    }\n\n    /**\n     *       Get the latitude, in seconds.\n     *\n     *       @return the latitude, in seconds\n     */\n    public int getLatitudeAsSeconds() {\n        return latitude;\n    }\n\n    /**\n     *       Get the longitude, in seconds.\n     *\n     *       @return the longitude, in seconds\n     */\n    public int getLongitudeAsSeconds() {\n        return longitude;\n    }\n\n    /**\n     *       Set the latitude, in seconds.\n     *\n     *       @param seconds the new latitude, in seconds\n     */\n    public void setLatitudeAsSeconds(int seconds) {\n        if (seconds < MIN_LATITUDE)\n            seconds = MIN_LATITUDE;\n        else if (seconds > MAX_LATITUDE)\n            seconds = MAX_LATITUDE;\n        this.latitude = seconds;\n    }\n\n    /**\n     *       Set the longitude, in seconds.\n     *\n     *       @param seconds the new longitude, in seconds\n     */\n    public void setLongitudeAsSeconds(int seconds) {\n        // make sure longitude is between -180 and 179 degrees.\n        // see setLongitudeAsDegrees().\n        seconds += 180 * 3600;\n        seconds %= 360 * 3600;\n        if (seconds <= 0)\n            seconds += 180 * 3600;\n        else\n            seconds -= 180 * 3600;\n        // PERF: make sure these are computed at compile-time, not run-time.\n        // FIXME: extract method normalizeLongitude() (lat, too, while you're at it)\n        this.longitude = seconds;\n    }\n\n    //\n    // CONSTRUCTORS\n    //\n    /**\n     * Default location: 0&deg;N 0&deg;E.\n     */\n    public Location() {\n        // do nothing\n    }\n\n    /**\n     *         Constructor, given a String.  The input format is perfectly\n     * \tcompatible with the output of toString(), but is lenient in\n     * \tcase users type in a location and can't type the degree-sign\n     *         &mdash; any gap between numbers works, so \"34*56' N 11 22W\" will\n     * \twork just fine.  It also accepts ISO-6709 format strings\n     *         (but only the \"+DDMMSS+DDDMMSS/\" version so far).\n     *\n     * \t@param string the String to parse\n     *         @exception NumberFormatException if the location can't be parsed\n     */\n    public Location(String string) throws NumberFormatException {\n        setLocation(string);\n    }\n\n    public void setLocation(String string) throws NumberFormatException {\n        if (isISO6709(string))\n            parseISO6709(string);\n        else\n            parseString(string);\n    }\n\n    private void parseString(String string) throws NumberFormatException {\n        String whitespace = \" \\t\\n\\r\";\n        String degreeMinuteSecond = \"\\u00B0*'\\\"\";\n        StringTokenizer tok = new StringTokenizer(string, whitespace + degreeMinuteSecond);\n        // mulitply by this to make seconds\n        int multiplier = 3600;\n        // total of the seconds so far\n        int total = 0;\n        // we'll barf unless we have exactly one of each.\n        int latitudeCount = 0, longitudeCount = 0;\n        while (tok.hasMoreTokens()) {\n            String token = tok.nextToken();\n            try {\n                // it's a number: multiply it, to make it seconds, and add it.\n                // (if we get too many numbers, like \"12*34'56''78'''N\",\n                // multiplier=0 after 3 of them, so it's automatically ignored.)\n                int number = Integer.parseInt(token);\n                total += number * multiplier;\n                multiplier /= 60;\n            } catch (NumberFormatException nfe) {\n                // it's not a number: it's N/S/E/W (if not, ignore it).\n                // assume, in any given locale, that compass points never\n                // differ from each other only by case.  users will love you.\n                String compassPoint = token.toUpperCase();\n                if (compassPoint.equals(NORTH)) {\n                    setLatitudeAsSeconds(total);\n                    latitudeCount++;\n                } else if (compassPoint.equals(SOUTH)) {\n                    setLatitudeAsSeconds(-total);\n                    latitudeCount++;\n                } else if (compassPoint.equals(EAST)) {\n                    setLongitudeAsSeconds(total);\n                    longitudeCount++;\n                } else if (compassPoint.equals(WEST)) {\n                    setLongitudeAsSeconds(-total);\n                    longitudeCount++;\n                }\n                // reset multiplier, total\n                multiplier = 3600;\n                total = 0;\n            }\n        }\n        // a location has exactly one latitude, and one longitude.  double-check this.\n        if (latitudeCount != 1 || longitudeCount != 1)\n            throw new NumberFormatException(\"bad number of terms in location!\");\n    }\n\n    // this method only knows how to parse the \"+DDMMSS+DDDMMSS/\" format so far\n    // (i.e., the format that toISO6709() returns)\n    private void parseISO6709(String string) throws NumberFormatException {\n        if (string.length() != 16)\n            throw new NumberFormatException(\"don't know how to parse all ISO-6709 locations yet!\");\n        boolean north = (string.charAt(0) == '+');\n        int latDegs = Integer.parseInt(string.substring(1, 3));\n        int latMins = Integer.parseInt(string.substring(3, 5));\n        int latSecs = Integer.parseInt(string.substring(5, 7));\n        setLatitudeAsSeconds((north ? +1 : -1) * (latDegs * 3600 + latMins * 60 + latSecs));\n        boolean east = (string.charAt(7) == '+');\n        int longDegs = Integer.parseInt(string.substring(8, 11));\n        int longMins = Integer.parseInt(string.substring(11, 13));\n        int longSecs = Integer.parseInt(string.substring(13, 15));\n        setLongitudeAsSeconds((east ? +1 : -1) * (longDegs * 3600 + longMins * 60 + longSecs));\n    }\n\n    //\n    // TOSTRING\n    //\n    /*\n     * For location editor\n     */\n    public String getEasyString() {\n        // extract degrees and minutes, latitude and longitude\n        int latDegs = Math.abs(getLatitudeAsSeconds()) / 3600;\n        int latMins = Math.abs(getLatitudeAsSeconds()) / 60 - latDegs * 60;\n        int longDegs = Math.abs(getLongitudeAsSeconds()) / 3600;\n        int longMins = Math.abs(getLongitudeAsSeconds()) / 60 - longDegs * 60;\n        // hemispheres\n        String latHemi = (latitude > 0 ? NORTH : SOUTH);\n        String longHemi = (longitude > 0 ? EAST : WEST);\n        // assemble it into a string\n        return latDegs + \",\" + latMins + \",\" + latHemi + \",\" + longDegs + \",\" + longMins + \",\" + longHemi;\n    }\n\n    public String getLatitudeAsString() {\n        // extract degrees and minutes\n        int latDegs = Math.abs(getLatitudeAsSeconds()) / 3600;\n        int latMins = Math.abs(getLatitudeAsSeconds()) / 60 - latDegs * 60;\n        // hemisphere\n        String latHemi = (latitude > 0 ? NORTH : SOUTH);\n        return latDegs + DEGREE_SIGN + latMins + \"'\" + latHemi;\n    }\n\n    public String getLongitudeAsString() {\n        // extract degrees and minutes\n        int longDegs = Math.abs(getLongitudeAsSeconds()) / 3600;\n        int longMins = Math.abs(getLongitudeAsSeconds()) / 60 - longDegs * 60;\n        // hemispheres\n        String longHemi = (longitude > 0 ? EAST : WEST);\n        return longDegs + DEGREE_SIGN + longMins + \"'\" + longHemi;\n    }\n\n    /**\n     *       Return this location as a nicely-formatted string.  The string returned by this\n     *       method is locale-dependent, and should only be used for presentation to the user,\n     *       not for long-term storage; for that, see the toISO6709() method.\n     *\n     *       @see #toISO6709\n     *\n     *       @return this location as a string\n     */\n    public String toString() {\n        return getLatitudeAsString() + \" \" + getLongitudeAsString();\n    }\n\n    // unicode DEGREE SIGN character\n    public static final String DEGREE_SIGN = \"\\u00B0\";\n\n    // is this string an ISO-6709 location?\n    private boolean isISO6709(String check) {\n        return (check.startsWith(\"+\") || check.startsWith(\"-\")) && check.endsWith(\"/\");\n    }\n\n    /**\n     *       Convert this location to an ISO-6709 string.  (See above for where to ind ISO-6709\n     *       information.)\n     *\n     *       <p>This method always uses the ISO-6709 format <code>+DDMMSS+DDDMMSS/</code>.</p>\n     *\n     *       @return this Location as an ISO-6709 string\n     */\n    public String toISO6709() {\n        StringBuffer buf = new StringBuffer();\n        DecimalFormat twoDigits = new DecimalFormat(\"00\");\n        DecimalFormat threeDigits = new DecimalFormat(\"000\");\n        // latitude\n        buf.append(latitude < 0 ? \"-\" : \"+\");\n        int latDegs = Math.abs(getLatitudeAsSeconds()) / 3600;\n        int latMins = Math.abs(getLatitudeAsSeconds()) / 60 - latDegs * 60;\n        int latSecs = Math.abs(getLatitudeAsSeconds()) - latDegs * 3600 - latMins * 60;\n        buf.append(twoDigits.format(latDegs));\n        buf.append(twoDigits.format(latMins));\n        buf.append(twoDigits.format(latSecs));\n        // longitude\n        buf.append(longitude < 0 ? \"-\" : \"+\");\n        int longDegs = Math.abs(getLongitudeAsSeconds()) / 3600;\n        int longMins = Math.abs(getLongitudeAsSeconds()) / 60 - longDegs * 60;\n        int longSecs = Math.abs(getLongitudeAsSeconds()) - longDegs * 3600 - longMins * 60;\n        buf.append(threeDigits.format(longDegs));\n        buf.append(twoDigits.format(longMins));\n        buf.append(twoDigits.format(longSecs));\n        // altitude\n        // -- if i want altitude later, add it here, as \"+AAA...\"\n        // terminator\n        buf.append(\"/\");\n        return buf.toString();\n    }\n\n    //\n    // EQUALS and HASHCODE\n    //\n    /**\n     *       Check if an object is equal to this Location.  This tests equality to\n     *       second accuracy.\n     *\n     *       @param object the other Location to compare this against\n     *       @return true, if the object is a Location and equal to this, else false\n     */\n    public boolean equals(Object object) {\n        // make sure it's a Location\n        if (!(object instanceof Location))\n            return false;\n        // check seconds\n        Location location = (Location) object;\n        return (latitude == location.latitude && longitude == location.longitude);\n    }\n\n    /**\n     *       A hashcode for Locations.  (Since I define equals(), I need to define hashCode().)\n     *\n     *       @return a hash code for this Location\n     */\n    public int hashCode() {\n        return latitude * latitude * latitude + 3 * longitude * longitude * longitude;\n    }\n\n    //\n    // DISTANCE\n    //\n    /**\n     *       Compute the surface distance between two Locations, rounded to\n     *       the nearest 10km.\n     *\n     *       @param location measure distance to this Location\n     *       @return the distance in kilometers\n     */\n    public synchronized int distanceTo(Location location) {\n        // i have to be synch because i use static points\n        // for computation, to save allocations.  it's ok,\n        // i'm really fast.\n        // the two points, in (x,y,z) coordinates\n        p1.setFromLocation(this);\n        p2.setFromLocation(location);\n        // sides of a triangle:\n        // center-to-A\n        float a = EARTH_RADIUS;\n        // center-to-B\n        float b = EARTH_RADIUS;\n        // A-to-B (straight-line distance)\n        float c = p1.distanceTo(p2);\n        // angle at center between two locations (law of cosine)\n        float C = (float) Math.acos((a * a + b * b - c * c) / (2 * a * b));\n        // distance between locations, on the sphere of the earth\n        float dist = EARTH_RADIUS * C;\n        // round to nearest ten kilometers\n        return roundTo(dist, 10);\n    }\n\n    // points used by distanceTo().  distanceTo() is otherwise pretty darn\n    // fast, so i'll preallocate these (only once, as class members).\n    // the only downside is that distanceTo() has to be synchronized,\n    // but it returns almost immediately so it's probably no big deal.\n    private static Point3D p1 = new Point3D(), p2 = new Point3D();\n\n    // roundTo(x, 10) rounds x to the nearest 10, for example.\n    // WRITEME: unit test for this method?\n    private int roundTo(float value, int place) {\n        return place * (int) Math.round(value / (float) place);\n    }\n\n    /**\n     *       Check whether the given location is near this location.\n     *\n     *       <p>Unlike most Java methods, the parameter <code>location</code>\n     *       may be null; isNear(null, threshold) is always false.</p>\n     *\n     *       @param location the location to check\n     *       @param threshold the number of kilometers to consider \"near\"\n     *       @return true, if the location is non-null and within the threshold\n     */\n    public boolean isNear(Location location, int threshold) {\n        return (location != null) && (distanceTo(location) <= threshold);\n    }\n\n    /**\n     *       Make a location halfway between 2 locations.\n     *\n     *       <p>The midpoint is computed as the average of the latitudes, and\n     *       the average of the longitudes.  That may not be very accurate on\n     *       non-rectangular projections.</p>\n     *\n     *       @param a the first point\n     *       @param b the second point\n     *       @return the midpoint of a and b\n     */\n    public static Location midpoint(Location a, Location b) {\n        // latitude doesn't wrap around, just take the mean\n        Location l = new Location();\n        l.setLatitudeAsSeconds((a.getLatitudeAsSeconds() + b.getLatitudeAsSeconds()) / 2);\n        // longitude, though, does wrap around, so pick the short way.\n        // (i.e., if the difference is greater than 180 degrees, jump to the\n        // opposite side, which is also equidistant, but closer to both.)\n        l.setLongitudeAsSeconds((a.getLongitudeAsSeconds() + b.getLongitudeAsSeconds()) / 2);\n        if (Math.abs(a.getLongitudeAsDegrees() - b.getLongitudeAsDegrees()) >= 180) {\n            // 180 degrees, in seconds\n            final int HALFWAY = 180 * 60 * 60;\n            l.setLongitudeAsSeconds((l.getLongitudeAsSeconds() + HALFWAY) % HALFWAY);\n        }\n        return l;\n    }\n\n    public boolean valid() {\n        return (!(latitude == 0 && longitude == 0));\n    }\n}\n",
		"id": "/EvoSuiteBenchmark/35_corina/src/main/java/corina/site/Location_5Test.java",
		"test_prompt": "// Location_5Test.java\n// This file is part of Corina.\n//\n// Corina is free software; you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation; either version 2 of the License, or\n// (at your option) any later version.\n//\n// Corina is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Corina; if not, write to the Free Software\n// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n//\n// Copyright 2003 Ken Harris <kbh7@cornell.edu>\n//\npackage corina.site;\n\nimport corina.map.Point3D;\nimport corina.ui.I18n;\nimport java.util.StringTokenizer;\nimport java.text.DecimalFormat;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link Location}.\n* It contains ten unit test cases for the {@link Location#isNear(Location, int)} method.\n*/\nclass Location_5Test {"
	},
	{
		"original_code": "// Location.java\n//\n// This file is part of Corina.\n//\n// Corina is free software; you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation; either version 2 of the License, or\n// (at your option) any later version.\n//\n// Corina is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Corina; if not, write to the Free Software\n// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n//\n// Copyright 2003 Ken Harris <kbh7@cornell.edu>\n//\npackage corina.site;\n\nimport corina.map.Point3D;\nimport corina.ui.I18n;\nimport java.util.StringTokenizer;\nimport java.text.DecimalFormat;\n\n/**\n *   A (latitude, longitude) location on the earth.\n *\n *   <p>Latitudes run from -90 to 90 degrees; longitudes run from -180 to 180 degrees.\n *   Positive latitudes are north; positive longitudes are east.</p>\n *\n *   <p>The accessors are a bit different than most classes, because there are two\n *   fairly natural ways to access latitude and longitude angles.\n *\n *   <ul>\n *     <li>The first is how you'd read or write them, with degrees, minutes, and seconds,\n *     like \"38&deg;15'N\".\n *\n *     <li>The second is more natural for computation, as a floating point number, like\n *     38.25.\n *   </ul>\n *\n *   <p>Since there are times you'd need both, both are provided.  There are 8\n *   accessors total, for each combination of get/set, latitude/longitude, and\n *   integer/floating point.  The methods that end with \"...AsDegrees()\" deal with\n *   floating point numbers, as degrees, and the methods that end with \"...AsSeconds()\"\n *   deal with integers, as seconds (60 seconds to a minute, 60 minutes to a degree).\n *   (Note that 1 second is about 30 meters at the equator.  You'll never need\n *   sub-second resolution.)</p>\n *\n *   <p>(It might be nice to have immutable Locations sometimes, but when rendering maps\n *   you need speed, speed, speed, and one of the best ways to make Java go faster is to\n *   generate less garbage for the GC to have to deal with.)</p>\n *\n *   <p>ISO 6709 provides an ASCII-only, locale-independent way to store\n *   latitude, longitude, and altitude.  ISO is\n *   <a href=\"http://www.iso.org/iso/en/CatalogueDetailPage.CatalogueDetail?CSNUMBER=13152\">charging\n *   30 bucks for it</a>, even though it's only a 3-page PDF.  Sigh.\n *   But you can get <a href=\"http://www.ftp.uni-erlangen.de/pub/doc/ISO/ISO-6709-summary\">the\n *   Cliff notes here</a>, or <a href=\"http://www.ftp.uni-erlangen.de/pub/doc/ISO/iso-6709.pdf\">the\n *   whole thing here</a>.</p>\n *\n *   <h2>Left to do:</h2>\n *   <ul>\n *     <li>Extend parseISO6709() to parse any ISO-6709 format\n *     <li>Decide if this class is threadsafe or not.\n *     <li>Location.copy() is a bad idea; get rid of it\n *   </ul>\n *\n *   @author Ken Harris &lt;kbh7 <i style=\"color: gray\">at</i> cornell <i style=\"color: gray\">dot</i> edu&gt;\n *   @version $Id: Location.java,v 1.3 2006/06/20 17:58:19 lucasmo Exp $\n */\npublic final class Location implements Cloneable {\n\n    //\n    // CONSTANTS\n    //\n    /**\n     *       Radius of the earth in kilometers.  From Miller & Schroeer,\n     *       <i>College Physics</i>, 6th ed: 6.38x10<sup>3</sup> km.\n     */\n    // 6.38 x 10^6 m\n    public final static float EARTH_RADIUS = 6.38e3f;\n\n    // limits on latitude and longitude, in seconds\n    private static final int MIN_LATITUDE = -90 * 3600;\n\n    private static final int MAX_LATITUDE = 90 * 3600;\n\n    private static final int MIN_LONGITUDE = -180 * 3600;\n\n    private static final int MAX_LONGITUDE = 180 * 3600 - 1;\n\n    // L10n of N/S/E/W -- i'll use these inside a loop, later,\n    // so i'll just keep them around.\n    private static final String NORTH = I18n.getText(\"north\");\n\n    private static final String SOUTH = I18n.getText(\"south\");\n\n    private static final String EAST = I18n.getText(\"east\");\n\n    private static final String WEST = I18n.getText(\"west\");\n\n    //\n    // FIELDS\n    //\n    // in seconds; positive latitudes are north, positive longitudes are east\n    private int latitude = 0;\n\n    private int longitude = 0;\n\n    //\n    // CLONING\n    //\n    /**\n     *       Make a clone of this Location.\n     *\n     *       @return a Location with the same latitude and longitude as this one\n     */\n    public Object clone() {\n        Location clone = new Location();\n        clone.latitude = this.latitude;\n        clone.longitude = this.longitude;\n        return clone;\n    }\n\n    /**\n     *       Copy the (latitude, longitude) from one location to another.\n     *\n     *       @param target the Location to copy from\n     *       @param source the Location to copy to\n     */\n    public static void copy(Location target, Location source) {\n        target.latitude = source.latitude;\n        target.longitude = source.longitude;\n    }\n\n    //\n    // ACCESSORS\n    //\n    /**\n     *       Return the latitude, in degrees.\n     *\n     *       @return the latitude, in degrees\n     */\n    public float getLatitudeAsDegrees() {\n        return latitude / 3600f;\n    }\n\n    /**\n     *       Return the longitude, in degrees.\n     *\n     *       @return the longitude, in degrees\n     */\n    public float getLongitudeAsDegrees() {\n        return longitude / 3600f;\n    }\n\n    /**\n     *       Set the latitude, in degrees.\n     *\n     *       @param degrees the new latitude, in degrees\n     */\n    public void setLatitudeAsDegrees(float degrees) {\n        int seconds = Math.round(degrees * 3600);\n        if (seconds < MIN_LATITUDE)\n            seconds = MIN_LATITUDE;\n        else if (seconds > MAX_LATITUDE)\n            seconds = MAX_LATITUDE;\n        this.latitude = seconds;\n    }\n\n    /**\n     *       Set the longitude, in degrees.\n     *\n     *       @param degrees the new longitude, in degrees\n     */\n    public void setLongitudeAsDegrees(float degrees) {\n        int seconds = Math.round(degrees * 3600);\n        // need to make sure the longitude is between -180 and 179 degrees.\n        // 180 degrees, for example, gets sent back down to -180.\n        // if i were doing degrees, i'd add 180, mod 360, sub 180.\n        // so just do that in seconds.\n        seconds += 180 * 3600;\n        seconds %= 360 * 3600;\n        if (seconds <= 0)\n            seconds += 180 * 3600;\n        else\n            seconds -= 180 * 3600;\n        this.longitude = seconds;\n    }\n\n    /**\n     *       Get the latitude, in seconds.\n     *\n     *       @return the latitude, in seconds\n     */\n    public int getLatitudeAsSeconds() {\n        return latitude;\n    }\n\n    /**\n     *       Get the longitude, in seconds.\n     *\n     *       @return the longitude, in seconds\n     */\n    public int getLongitudeAsSeconds() {\n        return longitude;\n    }\n\n    /**\n     *       Set the latitude, in seconds.\n     *\n     *       @param seconds the new latitude, in seconds\n     */\n    public void setLatitudeAsSeconds(int seconds) {\n        if (seconds < MIN_LATITUDE)\n            seconds = MIN_LATITUDE;\n        else if (seconds > MAX_LATITUDE)\n            seconds = MAX_LATITUDE;\n        this.latitude = seconds;\n    }\n\n    /**\n     *       Set the longitude, in seconds.\n     *\n     *       @param seconds the new longitude, in seconds\n     */\n    public void setLongitudeAsSeconds(int seconds) {\n        // make sure longitude is between -180 and 179 degrees.\n        // see setLongitudeAsDegrees().\n        seconds += 180 * 3600;\n        seconds %= 360 * 3600;\n        if (seconds <= 0)\n            seconds += 180 * 3600;\n        else\n            seconds -= 180 * 3600;\n        // PERF: make sure these are computed at compile-time, not run-time.\n        // FIXME: extract method normalizeLongitude() (lat, too, while you're at it)\n        this.longitude = seconds;\n    }\n\n    //\n    // CONSTRUCTORS\n    //\n    /**\n     * Default location: 0&deg;N 0&deg;E.\n     */\n    public Location() {\n        // do nothing\n    }\n\n    /**\n     *         Constructor, given a String.  The input format is perfectly\n     * \tcompatible with the output of toString(), but is lenient in\n     * \tcase users type in a location and can't type the degree-sign\n     *         &mdash; any gap between numbers works, so \"34*56' N 11 22W\" will\n     * \twork just fine.  It also accepts ISO-6709 format strings\n     *         (but only the \"+DDMMSS+DDDMMSS/\" version so far).\n     *\n     * \t@param string the String to parse\n     *         @exception NumberFormatException if the location can't be parsed\n     */\n    public Location(String string) throws NumberFormatException {\n        setLocation(string);\n    }\n\n    public void setLocation(String string) throws NumberFormatException {\n        if (isISO6709(string))\n            parseISO6709(string);\n        else\n            parseString(string);\n    }\n\n    private void parseString(String string) throws NumberFormatException {\n        String whitespace = \" \\t\\n\\r\";\n        String degreeMinuteSecond = \"\\u00B0*'\\\"\";\n        StringTokenizer tok = new StringTokenizer(string, whitespace + degreeMinuteSecond);\n        // mulitply by this to make seconds\n        int multiplier = 3600;\n        // total of the seconds so far\n        int total = 0;\n        // we'll barf unless we have exactly one of each.\n        int latitudeCount = 0, longitudeCount = 0;\n        while (tok.hasMoreTokens()) {\n            String token = tok.nextToken();\n            try {\n                // it's a number: multiply it, to make it seconds, and add it.\n                // (if we get too many numbers, like \"12*34'56''78'''N\",\n                // multiplier=0 after 3 of them, so it's automatically ignored.)\n                int number = Integer.parseInt(token);\n                total += number * multiplier;\n                multiplier /= 60;\n            } catch (NumberFormatException nfe) {\n                // it's not a number: it's N/S/E/W (if not, ignore it).\n                // assume, in any given locale, that compass points never\n                // differ from each other only by case.  users will love you.\n                String compassPoint = token.toUpperCase();\n                if (compassPoint.equals(NORTH)) {\n                    setLatitudeAsSeconds(total);\n                    latitudeCount++;\n                } else if (compassPoint.equals(SOUTH)) {\n                    setLatitudeAsSeconds(-total);\n                    latitudeCount++;\n                } else if (compassPoint.equals(EAST)) {\n                    setLongitudeAsSeconds(total);\n                    longitudeCount++;\n                } else if (compassPoint.equals(WEST)) {\n                    setLongitudeAsSeconds(-total);\n                    longitudeCount++;\n                }\n                // reset multiplier, total\n                multiplier = 3600;\n                total = 0;\n            }\n        }\n        // a location has exactly one latitude, and one longitude.  double-check this.\n        if (latitudeCount != 1 || longitudeCount != 1)\n            throw new NumberFormatException(\"bad number of terms in location!\");\n    }\n\n    // this method only knows how to parse the \"+DDMMSS+DDDMMSS/\" format so far\n    // (i.e., the format that toISO6709() returns)\n    private void parseISO6709(String string) throws NumberFormatException {\n        if (string.length() != 16)\n            throw new NumberFormatException(\"don't know how to parse all ISO-6709 locations yet!\");\n        boolean north = (string.charAt(0) == '+');\n        int latDegs = Integer.parseInt(string.substring(1, 3));\n        int latMins = Integer.parseInt(string.substring(3, 5));\n        int latSecs = Integer.parseInt(string.substring(5, 7));\n        setLatitudeAsSeconds((north ? +1 : -1) * (latDegs * 3600 + latMins * 60 + latSecs));\n        boolean east = (string.charAt(7) == '+');\n        int longDegs = Integer.parseInt(string.substring(8, 11));\n        int longMins = Integer.parseInt(string.substring(11, 13));\n        int longSecs = Integer.parseInt(string.substring(13, 15));\n        setLongitudeAsSeconds((east ? +1 : -1) * (longDegs * 3600 + longMins * 60 + longSecs));\n    }\n\n    //\n    // TOSTRING\n    //\n    /*\n     * For location editor\n     */\n    public String getEasyString() {\n        // extract degrees and minutes, latitude and longitude\n        int latDegs = Math.abs(getLatitudeAsSeconds()) / 3600;\n        int latMins = Math.abs(getLatitudeAsSeconds()) / 60 - latDegs * 60;\n        int longDegs = Math.abs(getLongitudeAsSeconds()) / 3600;\n        int longMins = Math.abs(getLongitudeAsSeconds()) / 60 - longDegs * 60;\n        // hemispheres\n        String latHemi = (latitude > 0 ? NORTH : SOUTH);\n        String longHemi = (longitude > 0 ? EAST : WEST);\n        // assemble it into a string\n        return latDegs + \",\" + latMins + \",\" + latHemi + \",\" + longDegs + \",\" + longMins + \",\" + longHemi;\n    }\n\n    public String getLatitudeAsString() {\n        // extract degrees and minutes\n        int latDegs = Math.abs(getLatitudeAsSeconds()) / 3600;\n        int latMins = Math.abs(getLatitudeAsSeconds()) / 60 - latDegs * 60;\n        // hemisphere\n        String latHemi = (latitude > 0 ? NORTH : SOUTH);\n        return latDegs + DEGREE_SIGN + latMins + \"'\" + latHemi;\n    }\n\n    public String getLongitudeAsString() {\n        // extract degrees and minutes\n        int longDegs = Math.abs(getLongitudeAsSeconds()) / 3600;\n        int longMins = Math.abs(getLongitudeAsSeconds()) / 60 - longDegs * 60;\n        // hemispheres\n        String longHemi = (longitude > 0 ? EAST : WEST);\n        return longDegs + DEGREE_SIGN + longMins + \"'\" + longHemi;\n    }\n\n    /**\n     *       Return this location as a nicely-formatted string.  The string returned by this\n     *       method is locale-dependent, and should only be used for presentation to the user,\n     *       not for long-term storage; for that, see the toISO6709() method.\n     *\n     *       @see #toISO6709\n     *\n     *       @return this location as a string\n     */\n    public String toString() {\n        return getLatitudeAsString() + \" \" + getLongitudeAsString();\n    }\n\n    // unicode DEGREE SIGN character\n    public static final String DEGREE_SIGN = \"\\u00B0\";\n\n    // is this string an ISO-6709 location?\n    private boolean isISO6709(String check) {\n        return (check.startsWith(\"+\") || check.startsWith(\"-\")) && check.endsWith(\"/\");\n    }\n\n    /**\n     *       Convert this location to an ISO-6709 string.  (See above for where to ind ISO-6709\n     *       information.)\n     *\n     *       <p>This method always uses the ISO-6709 format <code>+DDMMSS+DDDMMSS/</code>.</p>\n     *\n     *       @return this Location as an ISO-6709 string\n     */\n    public String toISO6709() {\n        StringBuffer buf = new StringBuffer();\n        DecimalFormat twoDigits = new DecimalFormat(\"00\");\n        DecimalFormat threeDigits = new DecimalFormat(\"000\");\n        // latitude\n        buf.append(latitude < 0 ? \"-\" : \"+\");\n        int latDegs = Math.abs(getLatitudeAsSeconds()) / 3600;\n        int latMins = Math.abs(getLatitudeAsSeconds()) / 60 - latDegs * 60;\n        int latSecs = Math.abs(getLatitudeAsSeconds()) - latDegs * 3600 - latMins * 60;\n        buf.append(twoDigits.format(latDegs));\n        buf.append(twoDigits.format(latMins));\n        buf.append(twoDigits.format(latSecs));\n        // longitude\n        buf.append(longitude < 0 ? \"-\" : \"+\");\n        int longDegs = Math.abs(getLongitudeAsSeconds()) / 3600;\n        int longMins = Math.abs(getLongitudeAsSeconds()) / 60 - longDegs * 60;\n        int longSecs = Math.abs(getLongitudeAsSeconds()) - longDegs * 3600 - longMins * 60;\n        buf.append(threeDigits.format(longDegs));\n        buf.append(twoDigits.format(longMins));\n        buf.append(twoDigits.format(longSecs));\n        // altitude\n        // -- if i want altitude later, add it here, as \"+AAA...\"\n        // terminator\n        buf.append(\"/\");\n        return buf.toString();\n    }\n\n    //\n    // EQUALS and HASHCODE\n    //\n    /**\n     *       Check if an object is equal to this Location.  This tests equality to\n     *       second accuracy.\n     *\n     *       @param object the other Location to compare this against\n     *       @return true, if the object is a Location and equal to this, else false\n     */\n    public boolean equals(Object object) {\n        // make sure it's a Location\n        if (!(object instanceof Location))\n            return false;\n        // check seconds\n        Location location = (Location) object;\n        return (latitude == location.latitude && longitude == location.longitude);\n    }\n\n    /**\n     *       A hashcode for Locations.  (Since I define equals(), I need to define hashCode().)\n     *\n     *       @return a hash code for this Location\n     */\n    public int hashCode() {\n        return latitude * latitude * latitude + 3 * longitude * longitude * longitude;\n    }\n\n    //\n    // DISTANCE\n    //\n    /**\n     *       Compute the surface distance between two Locations, rounded to\n     *       the nearest 10km.\n     *\n     *       @param location measure distance to this Location\n     *       @return the distance in kilometers\n     */\n    public synchronized int distanceTo(Location location) {\n        // i have to be synch because i use static points\n        // for computation, to save allocations.  it's ok,\n        // i'm really fast.\n        // the two points, in (x,y,z) coordinates\n        p1.setFromLocation(this);\n        p2.setFromLocation(location);\n        // sides of a triangle:\n        // center-to-A\n        float a = EARTH_RADIUS;\n        // center-to-B\n        float b = EARTH_RADIUS;\n        // A-to-B (straight-line distance)\n        float c = p1.distanceTo(p2);\n        // angle at center between two locations (law of cosine)\n        float C = (float) Math.acos((a * a + b * b - c * c) / (2 * a * b));\n        // distance between locations, on the sphere of the earth\n        float dist = EARTH_RADIUS * C;\n        // round to nearest ten kilometers\n        return roundTo(dist, 10);\n    }\n\n    // points used by distanceTo().  distanceTo() is otherwise pretty darn\n    // fast, so i'll preallocate these (only once, as class members).\n    // the only downside is that distanceTo() has to be synchronized,\n    // but it returns almost immediately so it's probably no big deal.\n    private static Point3D p1 = new Point3D(), p2 = new Point3D();\n\n    // roundTo(x, 10) rounds x to the nearest 10, for example.\n    // WRITEME: unit test for this method?\n    private int roundTo(float value, int place) {\n        return place * (int) Math.round(value / (float) place);\n    }\n\n    /**\n     *       Check whether the given location is near this location.\n     *\n     *       <p>Unlike most Java methods, the parameter <code>location</code>\n     *       may be null; isNear(null, threshold) is always false.</p>\n     *\n     *       @param location the location to check\n     *       @param threshold the number of kilometers to consider \"near\"\n     *       @return true, if the location is non-null and within the threshold\n     */\n    public boolean isNear(Location location, int threshold) {\n        return (location != null) && (distanceTo(location) <= threshold);\n    }\n\n    /**\n     *       Make a location halfway between 2 locations.\n     *\n     *       <p>The midpoint is computed as the average of the latitudes, and\n     *       the average of the longitudes.  That may not be very accurate on\n     *       non-rectangular projections.</p>\n     *\n     *       @param a the first point\n     *       @param b the second point\n     *       @return the midpoint of a and b\n     */\n    public static Location midpoint(Location a, Location b) {\n        // latitude doesn't wrap around, just take the mean\n        Location l = new Location();\n        l.setLatitudeAsSeconds((a.getLatitudeAsSeconds() + b.getLatitudeAsSeconds()) / 2);\n        // longitude, though, does wrap around, so pick the short way.\n        // (i.e., if the difference is greater than 180 degrees, jump to the\n        // opposite side, which is also equidistant, but closer to both.)\n        l.setLongitudeAsSeconds((a.getLongitudeAsSeconds() + b.getLongitudeAsSeconds()) / 2);\n        if (Math.abs(a.getLongitudeAsDegrees() - b.getLongitudeAsDegrees()) >= 180) {\n            // 180 degrees, in seconds\n            final int HALFWAY = 180 * 60 * 60;\n            l.setLongitudeAsSeconds((l.getLongitudeAsSeconds() + HALFWAY) % HALFWAY);\n        }\n        return l;\n    }\n\n    public boolean valid() {\n        return (!(latitude == 0 && longitude == 0));\n    }\n}\n",
		"id": "/EvoSuiteBenchmark/35_corina/src/main/java/corina/site/Location_6Test.java",
		"test_prompt": "// Location_6Test.java\n// This file is part of Corina.\n//\n// Corina is free software; you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation; either version 2 of the License, or\n// (at your option) any later version.\n//\n// Corina is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Corina; if not, write to the Free Software\n// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n//\n// Copyright 2003 Ken Harris <kbh7@cornell.edu>\n//\npackage corina.site;\n\nimport corina.map.Point3D;\nimport corina.ui.I18n;\nimport java.util.StringTokenizer;\nimport java.text.DecimalFormat;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link Location}.\n* It contains ten unit test cases for the {@link Location#midpoint(Location, Location)} method.\n*/\nclass Location_6Test {"
	},
	{
		"original_code": "// Location.java\n//\n// This file is part of Corina.\n//\n// Corina is free software; you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation; either version 2 of the License, or\n// (at your option) any later version.\n//\n// Corina is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Corina; if not, write to the Free Software\n// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n//\n// Copyright 2003 Ken Harris <kbh7@cornell.edu>\n//\npackage corina.site;\n\nimport corina.map.Point3D;\nimport corina.ui.I18n;\nimport java.util.StringTokenizer;\nimport java.text.DecimalFormat;\n\n/**\n *   A (latitude, longitude) location on the earth.\n *\n *   <p>Latitudes run from -90 to 90 degrees; longitudes run from -180 to 180 degrees.\n *   Positive latitudes are north; positive longitudes are east.</p>\n *\n *   <p>The accessors are a bit different than most classes, because there are two\n *   fairly natural ways to access latitude and longitude angles.\n *\n *   <ul>\n *     <li>The first is how you'd read or write them, with degrees, minutes, and seconds,\n *     like \"38&deg;15'N\".\n *\n *     <li>The second is more natural for computation, as a floating point number, like\n *     38.25.\n *   </ul>\n *\n *   <p>Since there are times you'd need both, both are provided.  There are 8\n *   accessors total, for each combination of get/set, latitude/longitude, and\n *   integer/floating point.  The methods that end with \"...AsDegrees()\" deal with\n *   floating point numbers, as degrees, and the methods that end with \"...AsSeconds()\"\n *   deal with integers, as seconds (60 seconds to a minute, 60 minutes to a degree).\n *   (Note that 1 second is about 30 meters at the equator.  You'll never need\n *   sub-second resolution.)</p>\n *\n *   <p>(It might be nice to have immutable Locations sometimes, but when rendering maps\n *   you need speed, speed, speed, and one of the best ways to make Java go faster is to\n *   generate less garbage for the GC to have to deal with.)</p>\n *\n *   <p>ISO 6709 provides an ASCII-only, locale-independent way to store\n *   latitude, longitude, and altitude.  ISO is\n *   <a href=\"http://www.iso.org/iso/en/CatalogueDetailPage.CatalogueDetail?CSNUMBER=13152\">charging\n *   30 bucks for it</a>, even though it's only a 3-page PDF.  Sigh.\n *   But you can get <a href=\"http://www.ftp.uni-erlangen.de/pub/doc/ISO/ISO-6709-summary\">the\n *   Cliff notes here</a>, or <a href=\"http://www.ftp.uni-erlangen.de/pub/doc/ISO/iso-6709.pdf\">the\n *   whole thing here</a>.</p>\n *\n *   <h2>Left to do:</h2>\n *   <ul>\n *     <li>Extend parseISO6709() to parse any ISO-6709 format\n *     <li>Decide if this class is threadsafe or not.\n *     <li>Location.copy() is a bad idea; get rid of it\n *   </ul>\n *\n *   @author Ken Harris &lt;kbh7 <i style=\"color: gray\">at</i> cornell <i style=\"color: gray\">dot</i> edu&gt;\n *   @version $Id: Location.java,v 1.3 2006/06/20 17:58:19 lucasmo Exp $\n */\npublic final class Location implements Cloneable {\n\n    //\n    // CONSTANTS\n    //\n    /**\n     *       Radius of the earth in kilometers.  From Miller & Schroeer,\n     *       <i>College Physics</i>, 6th ed: 6.38x10<sup>3</sup> km.\n     */\n    // 6.38 x 10^6 m\n    public final static float EARTH_RADIUS = 6.38e3f;\n\n    // limits on latitude and longitude, in seconds\n    private static final int MIN_LATITUDE = -90 * 3600;\n\n    private static final int MAX_LATITUDE = 90 * 3600;\n\n    private static final int MIN_LONGITUDE = -180 * 3600;\n\n    private static final int MAX_LONGITUDE = 180 * 3600 - 1;\n\n    // L10n of N/S/E/W -- i'll use these inside a loop, later,\n    // so i'll just keep them around.\n    private static final String NORTH = I18n.getText(\"north\");\n\n    private static final String SOUTH = I18n.getText(\"south\");\n\n    private static final String EAST = I18n.getText(\"east\");\n\n    private static final String WEST = I18n.getText(\"west\");\n\n    //\n    // FIELDS\n    //\n    // in seconds; positive latitudes are north, positive longitudes are east\n    private int latitude = 0;\n\n    private int longitude = 0;\n\n    //\n    // CLONING\n    //\n    /**\n     *       Make a clone of this Location.\n     *\n     *       @return a Location with the same latitude and longitude as this one\n     */\n    public Object clone() {\n        Location clone = new Location();\n        clone.latitude = this.latitude;\n        clone.longitude = this.longitude;\n        return clone;\n    }\n\n    /**\n     *       Copy the (latitude, longitude) from one location to another.\n     *\n     *       @param target the Location to copy from\n     *       @param source the Location to copy to\n     */\n    public static void copy(Location target, Location source) {\n        target.latitude = source.latitude;\n        target.longitude = source.longitude;\n    }\n\n    //\n    // ACCESSORS\n    //\n    /**\n     *       Return the latitude, in degrees.\n     *\n     *       @return the latitude, in degrees\n     */\n    public float getLatitudeAsDegrees() {\n        return latitude / 3600f;\n    }\n\n    /**\n     *       Return the longitude, in degrees.\n     *\n     *       @return the longitude, in degrees\n     */\n    public float getLongitudeAsDegrees() {\n        return longitude / 3600f;\n    }\n\n    /**\n     *       Set the latitude, in degrees.\n     *\n     *       @param degrees the new latitude, in degrees\n     */\n    public void setLatitudeAsDegrees(float degrees) {\n        int seconds = Math.round(degrees * 3600);\n        if (seconds < MIN_LATITUDE)\n            seconds = MIN_LATITUDE;\n        else if (seconds > MAX_LATITUDE)\n            seconds = MAX_LATITUDE;\n        this.latitude = seconds;\n    }\n\n    /**\n     *       Set the longitude, in degrees.\n     *\n     *       @param degrees the new longitude, in degrees\n     */\n    public void setLongitudeAsDegrees(float degrees) {\n        int seconds = Math.round(degrees * 3600);\n        // need to make sure the longitude is between -180 and 179 degrees.\n        // 180 degrees, for example, gets sent back down to -180.\n        // if i were doing degrees, i'd add 180, mod 360, sub 180.\n        // so just do that in seconds.\n        seconds += 180 * 3600;\n        seconds %= 360 * 3600;\n        if (seconds <= 0)\n            seconds += 180 * 3600;\n        else\n            seconds -= 180 * 3600;\n        this.longitude = seconds;\n    }\n\n    /**\n     *       Get the latitude, in seconds.\n     *\n     *       @return the latitude, in seconds\n     */\n    public int getLatitudeAsSeconds() {\n        return latitude;\n    }\n\n    /**\n     *       Get the longitude, in seconds.\n     *\n     *       @return the longitude, in seconds\n     */\n    public int getLongitudeAsSeconds() {\n        return longitude;\n    }\n\n    /**\n     *       Set the latitude, in seconds.\n     *\n     *       @param seconds the new latitude, in seconds\n     */\n    public void setLatitudeAsSeconds(int seconds) {\n        if (seconds < MIN_LATITUDE)\n            seconds = MIN_LATITUDE;\n        else if (seconds > MAX_LATITUDE)\n            seconds = MAX_LATITUDE;\n        this.latitude = seconds;\n    }\n\n    /**\n     *       Set the longitude, in seconds.\n     *\n     *       @param seconds the new longitude, in seconds\n     */\n    public void setLongitudeAsSeconds(int seconds) {\n        // make sure longitude is between -180 and 179 degrees.\n        // see setLongitudeAsDegrees().\n        seconds += 180 * 3600;\n        seconds %= 360 * 3600;\n        if (seconds <= 0)\n            seconds += 180 * 3600;\n        else\n            seconds -= 180 * 3600;\n        // PERF: make sure these are computed at compile-time, not run-time.\n        // FIXME: extract method normalizeLongitude() (lat, too, while you're at it)\n        this.longitude = seconds;\n    }\n\n    //\n    // CONSTRUCTORS\n    //\n    /**\n     * Default location: 0&deg;N 0&deg;E.\n     */\n    public Location() {\n        // do nothing\n    }\n\n    /**\n     *         Constructor, given a String.  The input format is perfectly\n     * \tcompatible with the output of toString(), but is lenient in\n     * \tcase users type in a location and can't type the degree-sign\n     *         &mdash; any gap between numbers works, so \"34*56' N 11 22W\" will\n     * \twork just fine.  It also accepts ISO-6709 format strings\n     *         (but only the \"+DDMMSS+DDDMMSS/\" version so far).\n     *\n     * \t@param string the String to parse\n     *         @exception NumberFormatException if the location can't be parsed\n     */\n    public Location(String string) throws NumberFormatException {\n        setLocation(string);\n    }\n\n    public void setLocation(String string) throws NumberFormatException {\n        if (isISO6709(string))\n            parseISO6709(string);\n        else\n            parseString(string);\n    }\n\n    private void parseString(String string) throws NumberFormatException {\n        String whitespace = \" \\t\\n\\r\";\n        String degreeMinuteSecond = \"\\u00B0*'\\\"\";\n        StringTokenizer tok = new StringTokenizer(string, whitespace + degreeMinuteSecond);\n        // mulitply by this to make seconds\n        int multiplier = 3600;\n        // total of the seconds so far\n        int total = 0;\n        // we'll barf unless we have exactly one of each.\n        int latitudeCount = 0, longitudeCount = 0;\n        while (tok.hasMoreTokens()) {\n            String token = tok.nextToken();\n            try {\n                // it's a number: multiply it, to make it seconds, and add it.\n                // (if we get too many numbers, like \"12*34'56''78'''N\",\n                // multiplier=0 after 3 of them, so it's automatically ignored.)\n                int number = Integer.parseInt(token);\n                total += number * multiplier;\n                multiplier /= 60;\n            } catch (NumberFormatException nfe) {\n                // it's not a number: it's N/S/E/W (if not, ignore it).\n                // assume, in any given locale, that compass points never\n                // differ from each other only by case.  users will love you.\n                String compassPoint = token.toUpperCase();\n                if (compassPoint.equals(NORTH)) {\n                    setLatitudeAsSeconds(total);\n                    latitudeCount++;\n                } else if (compassPoint.equals(SOUTH)) {\n                    setLatitudeAsSeconds(-total);\n                    latitudeCount++;\n                } else if (compassPoint.equals(EAST)) {\n                    setLongitudeAsSeconds(total);\n                    longitudeCount++;\n                } else if (compassPoint.equals(WEST)) {\n                    setLongitudeAsSeconds(-total);\n                    longitudeCount++;\n                }\n                // reset multiplier, total\n                multiplier = 3600;\n                total = 0;\n            }\n        }\n        // a location has exactly one latitude, and one longitude.  double-check this.\n        if (latitudeCount != 1 || longitudeCount != 1)\n            throw new NumberFormatException(\"bad number of terms in location!\");\n    }\n\n    // this method only knows how to parse the \"+DDMMSS+DDDMMSS/\" format so far\n    // (i.e., the format that toISO6709() returns)\n    private void parseISO6709(String string) throws NumberFormatException {\n        if (string.length() != 16)\n            throw new NumberFormatException(\"don't know how to parse all ISO-6709 locations yet!\");\n        boolean north = (string.charAt(0) == '+');\n        int latDegs = Integer.parseInt(string.substring(1, 3));\n        int latMins = Integer.parseInt(string.substring(3, 5));\n        int latSecs = Integer.parseInt(string.substring(5, 7));\n        setLatitudeAsSeconds((north ? +1 : -1) * (latDegs * 3600 + latMins * 60 + latSecs));\n        boolean east = (string.charAt(7) == '+');\n        int longDegs = Integer.parseInt(string.substring(8, 11));\n        int longMins = Integer.parseInt(string.substring(11, 13));\n        int longSecs = Integer.parseInt(string.substring(13, 15));\n        setLongitudeAsSeconds((east ? +1 : -1) * (longDegs * 3600 + longMins * 60 + longSecs));\n    }\n\n    //\n    // TOSTRING\n    //\n    /*\n     * For location editor\n     */\n    public String getEasyString() {\n        // extract degrees and minutes, latitude and longitude\n        int latDegs = Math.abs(getLatitudeAsSeconds()) / 3600;\n        int latMins = Math.abs(getLatitudeAsSeconds()) / 60 - latDegs * 60;\n        int longDegs = Math.abs(getLongitudeAsSeconds()) / 3600;\n        int longMins = Math.abs(getLongitudeAsSeconds()) / 60 - longDegs * 60;\n        // hemispheres\n        String latHemi = (latitude > 0 ? NORTH : SOUTH);\n        String longHemi = (longitude > 0 ? EAST : WEST);\n        // assemble it into a string\n        return latDegs + \",\" + latMins + \",\" + latHemi + \",\" + longDegs + \",\" + longMins + \",\" + longHemi;\n    }\n\n    public String getLatitudeAsString() {\n        // extract degrees and minutes\n        int latDegs = Math.abs(getLatitudeAsSeconds()) / 3600;\n        int latMins = Math.abs(getLatitudeAsSeconds()) / 60 - latDegs * 60;\n        // hemisphere\n        String latHemi = (latitude > 0 ? NORTH : SOUTH);\n        return latDegs + DEGREE_SIGN + latMins + \"'\" + latHemi;\n    }\n\n    public String getLongitudeAsString() {\n        // extract degrees and minutes\n        int longDegs = Math.abs(getLongitudeAsSeconds()) / 3600;\n        int longMins = Math.abs(getLongitudeAsSeconds()) / 60 - longDegs * 60;\n        // hemispheres\n        String longHemi = (longitude > 0 ? EAST : WEST);\n        return longDegs + DEGREE_SIGN + longMins + \"'\" + longHemi;\n    }\n\n    /**\n     *       Return this location as a nicely-formatted string.  The string returned by this\n     *       method is locale-dependent, and should only be used for presentation to the user,\n     *       not for long-term storage; for that, see the toISO6709() method.\n     *\n     *       @see #toISO6709\n     *\n     *       @return this location as a string\n     */\n    public String toString() {\n        return getLatitudeAsString() + \" \" + getLongitudeAsString();\n    }\n\n    // unicode DEGREE SIGN character\n    public static final String DEGREE_SIGN = \"\\u00B0\";\n\n    // is this string an ISO-6709 location?\n    private boolean isISO6709(String check) {\n        return (check.startsWith(\"+\") || check.startsWith(\"-\")) && check.endsWith(\"/\");\n    }\n\n    /**\n     *       Convert this location to an ISO-6709 string.  (See above for where to ind ISO-6709\n     *       information.)\n     *\n     *       <p>This method always uses the ISO-6709 format <code>+DDMMSS+DDDMMSS/</code>.</p>\n     *\n     *       @return this Location as an ISO-6709 string\n     */\n    public String toISO6709() {\n        StringBuffer buf = new StringBuffer();\n        DecimalFormat twoDigits = new DecimalFormat(\"00\");\n        DecimalFormat threeDigits = new DecimalFormat(\"000\");\n        // latitude\n        buf.append(latitude < 0 ? \"-\" : \"+\");\n        int latDegs = Math.abs(getLatitudeAsSeconds()) / 3600;\n        int latMins = Math.abs(getLatitudeAsSeconds()) / 60 - latDegs * 60;\n        int latSecs = Math.abs(getLatitudeAsSeconds()) - latDegs * 3600 - latMins * 60;\n        buf.append(twoDigits.format(latDegs));\n        buf.append(twoDigits.format(latMins));\n        buf.append(twoDigits.format(latSecs));\n        // longitude\n        buf.append(longitude < 0 ? \"-\" : \"+\");\n        int longDegs = Math.abs(getLongitudeAsSeconds()) / 3600;\n        int longMins = Math.abs(getLongitudeAsSeconds()) / 60 - longDegs * 60;\n        int longSecs = Math.abs(getLongitudeAsSeconds()) - longDegs * 3600 - longMins * 60;\n        buf.append(threeDigits.format(longDegs));\n        buf.append(twoDigits.format(longMins));\n        buf.append(twoDigits.format(longSecs));\n        // altitude\n        // -- if i want altitude later, add it here, as \"+AAA...\"\n        // terminator\n        buf.append(\"/\");\n        return buf.toString();\n    }\n\n    //\n    // EQUALS and HASHCODE\n    //\n    /**\n     *       Check if an object is equal to this Location.  This tests equality to\n     *       second accuracy.\n     *\n     *       @param object the other Location to compare this against\n     *       @return true, if the object is a Location and equal to this, else false\n     */\n    public boolean equals(Object object) {\n        // make sure it's a Location\n        if (!(object instanceof Location))\n            return false;\n        // check seconds\n        Location location = (Location) object;\n        return (latitude == location.latitude && longitude == location.longitude);\n    }\n\n    /**\n     *       A hashcode for Locations.  (Since I define equals(), I need to define hashCode().)\n     *\n     *       @return a hash code for this Location\n     */\n    public int hashCode() {\n        return latitude * latitude * latitude + 3 * longitude * longitude * longitude;\n    }\n\n    //\n    // DISTANCE\n    //\n    /**\n     *       Compute the surface distance between two Locations, rounded to\n     *       the nearest 10km.\n     *\n     *       @param location measure distance to this Location\n     *       @return the distance in kilometers\n     */\n    public synchronized int distanceTo(Location location) {\n        // i have to be synch because i use static points\n        // for computation, to save allocations.  it's ok,\n        // i'm really fast.\n        // the two points, in (x,y,z) coordinates\n        p1.setFromLocation(this);\n        p2.setFromLocation(location);\n        // sides of a triangle:\n        // center-to-A\n        float a = EARTH_RADIUS;\n        // center-to-B\n        float b = EARTH_RADIUS;\n        // A-to-B (straight-line distance)\n        float c = p1.distanceTo(p2);\n        // angle at center between two locations (law of cosine)\n        float C = (float) Math.acos((a * a + b * b - c * c) / (2 * a * b));\n        // distance between locations, on the sphere of the earth\n        float dist = EARTH_RADIUS * C;\n        // round to nearest ten kilometers\n        return roundTo(dist, 10);\n    }\n\n    // points used by distanceTo().  distanceTo() is otherwise pretty darn\n    // fast, so i'll preallocate these (only once, as class members).\n    // the only downside is that distanceTo() has to be synchronized,\n    // but it returns almost immediately so it's probably no big deal.\n    private static Point3D p1 = new Point3D(), p2 = new Point3D();\n\n    // roundTo(x, 10) rounds x to the nearest 10, for example.\n    // WRITEME: unit test for this method?\n    private int roundTo(float value, int place) {\n        return place * (int) Math.round(value / (float) place);\n    }\n\n    /**\n     *       Check whether the given location is near this location.\n     *\n     *       <p>Unlike most Java methods, the parameter <code>location</code>\n     *       may be null; isNear(null, threshold) is always false.</p>\n     *\n     *       @param location the location to check\n     *       @param threshold the number of kilometers to consider \"near\"\n     *       @return true, if the location is non-null and within the threshold\n     */\n    public boolean isNear(Location location, int threshold) {\n        return (location != null) && (distanceTo(location) <= threshold);\n    }\n\n    /**\n     *       Make a location halfway between 2 locations.\n     *\n     *       <p>The midpoint is computed as the average of the latitudes, and\n     *       the average of the longitudes.  That may not be very accurate on\n     *       non-rectangular projections.</p>\n     *\n     *       @param a the first point\n     *       @param b the second point\n     *       @return the midpoint of a and b\n     */\n    public static Location midpoint(Location a, Location b) {\n        // latitude doesn't wrap around, just take the mean\n        Location l = new Location();\n        l.setLatitudeAsSeconds((a.getLatitudeAsSeconds() + b.getLatitudeAsSeconds()) / 2);\n        // longitude, though, does wrap around, so pick the short way.\n        // (i.e., if the difference is greater than 180 degrees, jump to the\n        // opposite side, which is also equidistant, but closer to both.)\n        l.setLongitudeAsSeconds((a.getLongitudeAsSeconds() + b.getLongitudeAsSeconds()) / 2);\n        if (Math.abs(a.getLongitudeAsDegrees() - b.getLongitudeAsDegrees()) >= 180) {\n            // 180 degrees, in seconds\n            final int HALFWAY = 180 * 60 * 60;\n            l.setLongitudeAsSeconds((l.getLongitudeAsSeconds() + HALFWAY) % HALFWAY);\n        }\n        return l;\n    }\n\n    public boolean valid() {\n        return (!(latitude == 0 && longitude == 0));\n    }\n}\n",
		"id": "/EvoSuiteBenchmark/35_corina/src/main/java/corina/site/Location_7Test.java",
		"test_prompt": "// Location_7Test.java\n// This file is part of Corina.\n//\n// Corina is free software; you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation; either version 2 of the License, or\n// (at your option) any later version.\n//\n// Corina is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Corina; if not, write to the Free Software\n// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n//\n// Copyright 2003 Ken Harris <kbh7@cornell.edu>\n//\npackage corina.site;\n\nimport corina.map.Point3D;\nimport corina.ui.I18n;\nimport java.util.StringTokenizer;\nimport java.text.DecimalFormat;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link Location}.\n* It contains ten unit test cases for the {@link Location#valid()} method.\n*/\nclass Location_7Test {"
	},
	{
		"original_code": "// Lock.java\npackage corina.site;\n\nimport java.io.File;\nimport java.io.IOException;\nimport javax.swing.JDialog;\n// and others...\nimport javax.swing.*;\nimport java.awt.*;\n\n// MOVE ME: this class belongs in corina.util, not corina.site\n/**\n *   A file locking mechanism, requiring nothing beyond what is provided\n *   by Java 1.1.  This uses the atomicity guaranteed by\n *   <code>File.createNewFile()</code>.  (The lockfile it creates for a\n *   file called \"Data\" would be called \"Data - locked\".  If Corina gets\n *   wedged, you can delete it by hand.)\n *\n *   <p>It's appropriate for a relatively low-utilization fileserver\n *   where one filesystem is shared by multiple users.  For lock a\n *   single file in one JVM, use class methods and members, not the\n *   filesystem; for heavy-duty locking, use <a\n *   href=\"http://www.postgresql.org/\">a real database</a> (which is\n *   more robust, and probably higher performance).</p>\n *\n *   <p>Please do <em>not</em> write a native version of this.  Java's\n *   <code>createNewFile()</code> method guarantees atomicity, and it\n *   will work on any platform, so (for example) Mac and Windows\n *   workstations using a shared folder will all be able to do locking\n *   together correctly.  And creating a zero-length file will almost\n *   certainly be cached, so performance isn't really an issue.</p>\n *\n *   @author Ken Harris &lt;kbh7 <i style=\"color: gray\">at</i> cornell <i style=\"color: gray\">dot</i> edu&gt;\n *   @version $Id: Lock.java,v 1.2 2004/01/18 18:10:30 aaron Exp $\n */\npublic class Lock {\n\n    /*\n     what i do:\n     -- let this instance of corina acquire a lock on a file (sitedb)\n     -- release the lock\n     -- try to acquire the lock, try again, and then present the user with a dialog explaining the situation\n     -- (that all?)\n     */\n    // don't instantiate me\n    private Lock() {\n    }\n\n    // add this suffix to a filename to create the lockfile\n    private final static String SUFFIX = \" - locked\";\n\n    /**\n     *  Try to acquire a lock on a file.\n     *\n     *         <p>There's nothing forcing anybody to respect this lock,\n     * \tespecially other programs; you have to trust that they'll use\n     * \tthis Lock class, as well.</p>\n     *\n     * \t@param filename the name of the file to lock\n     * \t@return true if the lock was acquired, else false\n     */\n    public static boolean acquire(String filename) {\n        try {\n            File f = new File(filename + SUFFIX);\n            return f.createNewFile();\n        } catch (IOException ioe) {\n            return false;\n        }\n    }\n\n    /**\n     *       Try to acquire a lock on a file.  If it's not available, keep\n     *       trying every half second until it's available, up to a certain\n     *       number of tries.  If it's still unavailable after that time, it\n     *       returns false as normal.\n     *\n     *       <p>There's nothing forcing anybody to respect this lock,\n     *       especially other programs; you have to trust that they'll use\n     *       this Lock class, as well.</p>\n     *\n     *       @param filename the name of the file to lock\n     *       @param keepTrying if locked, try again this many times, 0.5 seconds apart\n     *       @return true if the lock was acquired, else false\n     */\n    public static boolean acquire(String filename, int keepTrying) {\n        try {\n            File f = new File(filename + SUFFIX);\n            for (int i = 0; i < keepTrying; i++) {\n                boolean x = f.createNewFile();\n                // success\n                if (x)\n                    return x;\n                // failure -- pause, and have another try\n                if (i < keepTrying - 1) {\n                    try {\n                        Thread.sleep(500);\n                    } catch (InterruptedException ie) {\n                        // ignore\n                    }\n                }\n            }\n            // WRITEME: this method doesn't have a unit test.\n            // no good.  oh well.\n            return false;\n        } catch (IOException ioe) {\n            return false;\n        }\n    }\n\n    /**\n     *        Release the lock on a file.  If that file wasn't locked, does nothing.\n     *\n     *        <p>There's no explicit <code>steal()</code> method, because Lock doesn't\n     *        provide any assurance that this file is truly locked, aside from trusting\n     *        that you will call <code>acquire()</code> to check first.  If you really\n     *        need to steal a lock, just do whatever you were going to do - but bad\n     *        things will happen.</p>\n     *\n     * <!-- note: if i want to store useful information in the lockfile, like IP/username/PID/timestamp, then i'll need a steal() method -->\n     *\n     *        @param filename the name of the file to release the lock on\n     */\n    public static void release(String filename) {\n        File f = new File(filename + SUFFIX);\n        // don't really care if it fails, do i?\n        f.delete();\n    }\n\n    /*\n    public static void acquireButWait(String filename) {\n        // strategy:\n        // -- try to acquire\n        boolean test = acquire(filename);\n        if (test)\n            return;\n        // -- if no success, wait 1s, and try again\n        try {\n            Thread.sleep(1000);\n        } catch (InterruptedException ie) {\n            // ignore\n        }\n        test = acquire(filename);\n        if (test)\n            return;\n        // -- (repeat?)\n        // ???\n        // -- show dialog\n        JLabel summary = new JLabel(\"The Corina site data appears to be locked.\");\n        summary.setFont(summary.getFont().deriveFont(Font.BOLD));\n        JLabel description = new JLabel(\"The Corina site data...\"); // i really need a multi-line jlabel -- WRITEME\n        // ...\n        // TODO: put label+label+[steal/null/cancel/wait] in a vboxlayout?\n        // ---- steal: return true\n        // ---- cancel: return false\n        // ---- wait: wait 1s, and try again, etc.\n    }\n    */\n    // semi-related...\n    private static boolean canWrite(String filename) {\n        File f = new File(filename);\n        if (f.canWrite())\n            return true;\n        // -- show dialog\n        // ---- cancel\n        // ---- try again\n        return false;\n    }\n}\n",
		"id": "/EvoSuiteBenchmark/35_corina/src/main/java/corina/site/Lock_0Test.java",
		"test_prompt": "// Lock_0Test.java\npackage corina.site;\n\nimport java.io.File;\nimport java.io.IOException;\nimport javax.swing.JDialog;\n// and others...\nimport javax.swing.*;\nimport java.awt.*;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link Lock}.\n* It contains ten unit test cases for the {@link Lock#acquire(String)} method.\n*/\nclass Lock_0Test {"
	},
	{
		"original_code": "// Lock.java\npackage corina.site;\n\nimport java.io.File;\nimport java.io.IOException;\nimport javax.swing.JDialog;\n// and others...\nimport javax.swing.*;\nimport java.awt.*;\n\n// MOVE ME: this class belongs in corina.util, not corina.site\n/**\n *   A file locking mechanism, requiring nothing beyond what is provided\n *   by Java 1.1.  This uses the atomicity guaranteed by\n *   <code>File.createNewFile()</code>.  (The lockfile it creates for a\n *   file called \"Data\" would be called \"Data - locked\".  If Corina gets\n *   wedged, you can delete it by hand.)\n *\n *   <p>It's appropriate for a relatively low-utilization fileserver\n *   where one filesystem is shared by multiple users.  For lock a\n *   single file in one JVM, use class methods and members, not the\n *   filesystem; for heavy-duty locking, use <a\n *   href=\"http://www.postgresql.org/\">a real database</a> (which is\n *   more robust, and probably higher performance).</p>\n *\n *   <p>Please do <em>not</em> write a native version of this.  Java's\n *   <code>createNewFile()</code> method guarantees atomicity, and it\n *   will work on any platform, so (for example) Mac and Windows\n *   workstations using a shared folder will all be able to do locking\n *   together correctly.  And creating a zero-length file will almost\n *   certainly be cached, so performance isn't really an issue.</p>\n *\n *   @author Ken Harris &lt;kbh7 <i style=\"color: gray\">at</i> cornell <i style=\"color: gray\">dot</i> edu&gt;\n *   @version $Id: Lock.java,v 1.2 2004/01/18 18:10:30 aaron Exp $\n */\npublic class Lock {\n\n    /*\n     what i do:\n     -- let this instance of corina acquire a lock on a file (sitedb)\n     -- release the lock\n     -- try to acquire the lock, try again, and then present the user with a dialog explaining the situation\n     -- (that all?)\n     */\n    // don't instantiate me\n    private Lock() {\n    }\n\n    // add this suffix to a filename to create the lockfile\n    private final static String SUFFIX = \" - locked\";\n\n    /**\n     *  Try to acquire a lock on a file.\n     *\n     *         <p>There's nothing forcing anybody to respect this lock,\n     * \tespecially other programs; you have to trust that they'll use\n     * \tthis Lock class, as well.</p>\n     *\n     * \t@param filename the name of the file to lock\n     * \t@return true if the lock was acquired, else false\n     */\n    public static boolean acquire(String filename) {\n        try {\n            File f = new File(filename + SUFFIX);\n            return f.createNewFile();\n        } catch (IOException ioe) {\n            return false;\n        }\n    }\n\n    /**\n     *       Try to acquire a lock on a file.  If it's not available, keep\n     *       trying every half second until it's available, up to a certain\n     *       number of tries.  If it's still unavailable after that time, it\n     *       returns false as normal.\n     *\n     *       <p>There's nothing forcing anybody to respect this lock,\n     *       especially other programs; you have to trust that they'll use\n     *       this Lock class, as well.</p>\n     *\n     *       @param filename the name of the file to lock\n     *       @param keepTrying if locked, try again this many times, 0.5 seconds apart\n     *       @return true if the lock was acquired, else false\n     */\n    public static boolean acquire(String filename, int keepTrying) {\n        try {\n            File f = new File(filename + SUFFIX);\n            for (int i = 0; i < keepTrying; i++) {\n                boolean x = f.createNewFile();\n                // success\n                if (x)\n                    return x;\n                // failure -- pause, and have another try\n                if (i < keepTrying - 1) {\n                    try {\n                        Thread.sleep(500);\n                    } catch (InterruptedException ie) {\n                        // ignore\n                    }\n                }\n            }\n            // WRITEME: this method doesn't have a unit test.\n            // no good.  oh well.\n            return false;\n        } catch (IOException ioe) {\n            return false;\n        }\n    }\n\n    /**\n     *        Release the lock on a file.  If that file wasn't locked, does nothing.\n     *\n     *        <p>There's no explicit <code>steal()</code> method, because Lock doesn't\n     *        provide any assurance that this file is truly locked, aside from trusting\n     *        that you will call <code>acquire()</code> to check first.  If you really\n     *        need to steal a lock, just do whatever you were going to do - but bad\n     *        things will happen.</p>\n     *\n     * <!-- note: if i want to store useful information in the lockfile, like IP/username/PID/timestamp, then i'll need a steal() method -->\n     *\n     *        @param filename the name of the file to release the lock on\n     */\n    public static void release(String filename) {\n        File f = new File(filename + SUFFIX);\n        // don't really care if it fails, do i?\n        f.delete();\n    }\n\n    /*\n    public static void acquireButWait(String filename) {\n        // strategy:\n        // -- try to acquire\n        boolean test = acquire(filename);\n        if (test)\n            return;\n        // -- if no success, wait 1s, and try again\n        try {\n            Thread.sleep(1000);\n        } catch (InterruptedException ie) {\n            // ignore\n        }\n        test = acquire(filename);\n        if (test)\n            return;\n        // -- (repeat?)\n        // ???\n        // -- show dialog\n        JLabel summary = new JLabel(\"The Corina site data appears to be locked.\");\n        summary.setFont(summary.getFont().deriveFont(Font.BOLD));\n        JLabel description = new JLabel(\"The Corina site data...\"); // i really need a multi-line jlabel -- WRITEME\n        // ...\n        // TODO: put label+label+[steal/null/cancel/wait] in a vboxlayout?\n        // ---- steal: return true\n        // ---- cancel: return false\n        // ---- wait: wait 1s, and try again, etc.\n    }\n    */\n    // semi-related...\n    private static boolean canWrite(String filename) {\n        File f = new File(filename);\n        if (f.canWrite())\n            return true;\n        // -- show dialog\n        // ---- cancel\n        // ---- try again\n        return false;\n    }\n}\n",
		"id": "/EvoSuiteBenchmark/35_corina/src/main/java/corina/site/Lock_1Test.java",
		"test_prompt": "// Lock_1Test.java\npackage corina.site;\n\nimport java.io.File;\nimport java.io.IOException;\nimport javax.swing.JDialog;\n// and others...\nimport javax.swing.*;\nimport java.awt.*;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link Lock}.\n* It contains ten unit test cases for the {@link Lock#acquire(String, int)} method.\n*/\nclass Lock_1Test {"
	},
	{
		"original_code": "// Site.java\n//\n// This file is part of Corina.\n//\n// Corina is free software; you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation; either version 2 of the License, or\n// (at your option) any later version.\n//\n// Corina is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Corina; if not, write to the Free Software\n// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n//\n// Copyright 2001 Ken Harris <kbh7@cornell.edu>\n//\npackage corina.site;\n\nimport corina.core.App;\nimport corina.util.ColorUtils;\nimport corina.util.StringUtils;\nimport java.awt.Color;\nimport java.awt.Graphics2D;\nimport java.io.File;\n\n/*\n  todo:\n  -- add string i/o (of xml tags)\n  -- encapsulate members better\n -- javadoc!\n\n  -- implement toString(), so i can see what's going on!\n*/\n/**\n *   Site object, which holds name/ID information, location, and\n *   other assorted data.  For example, lists of masters and non-fits.\n *\n *   @author Ken Harris &lt;kbh7 <i style=\"color: gray\">at</i> cornell <i style=\"color: gray\">dot</i> edu&gt;\n *   @version $Id: Site.java,v 1.7 2006/06/12 22:14:05 lucasmo Exp $\n */\npublic class Site implements Cloneable {\n\n    public String getId() {\n        return id;\n    }\n\n    public void setId(String id) {\n        this.id = id;\n        // WAS: SiteDB.getSiteDB().fireSiteIDChanged(this);\n    }\n\n    public String getCode() {\n        return code;\n    }\n\n    public void setCode(String code) {\n        this.code = code;\n        // WAS: SiteDB.getSiteDB().fireSiteCodeChanged(this);\n    }\n\n    public String getName() {\n        return name;\n    }\n\n    public void setName(String name) {\n        this.name = name;\n        // WAS: SiteDB.getSiteDB().fireSiteNameChanged(this);\n    }\n\n    public String getCountry() {\n        return country;\n    }\n\n    public void setCountry(String country) {\n        this.country = country;\n        // WAS: SiteDB.getSiteDB().fireSiteCountryChanged(this);\n    }\n\n    // the type: FOREST(1), MEDIEVAL(2), ANCIENT(3), or UNKNOWN(4->0)\n    // => make bitfield?\n    public final static int TYPE_UNKNOWN = 0;\n\n    public final static int TYPE_FOREST = 1;\n\n    public final static int TYPE_MEDIEVAL = 2;\n\n    public final static int TYPE_ANCIENT = 3;\n\n    //    public int type=TYPE_UNKNOWN;\n    // eh? what is this?\n    //public String type2 = \"\"; // a string, like \"AU\" (=ancient+unknown)\n    // 10-may-2003: what i want:\n    // in xml:\n    //   <types>ancient,forest</types> (empty string = none = same as no tag)\n    // as getter:\n    //   bool[4] getTypes()??\n    // as setter:\n    //   void setTypes(bool[4])??\n    // as data structure:\n    //   bool[4]\n    // migration strategy:\n    //   add methods; make old types private; convert to new methods\n    // what's on disk now:\n    //   \"2\", or \"1,3\".  (but trivial to convert -- or, just accept either)\n    public boolean[] getTypes() {\n        // this is the new api i want.  in the future, i'll just say:\n        /*\n\t\t int n = this.types.length;\n\t\t boolean types[] = new boolean[n];\n\t\t for (int i=0; i<n; i++)\n\t\t types[i] = this.types[i]; // -- can i just clone() it, even?\n\t\t return types;\n\t\t */\n        // but for now, i've got the old \"type=2,3\" legacy crap.\n        // oh well, i'll just write a simple adapter.\n        boolean[] types = new boolean[4];\n        for (int i = 0; i < type.length(); i++) {\n            char c = type.charAt(i);\n            if (c == '0' || c == '4')\n                types[3] = true;\n            if (c == '3')\n                types[0] = true;\n            if (c == '2')\n                types[1] = true;\n            if (c == '1')\n                types[2] = true;\n        }\n        // note: the old way had 0=unkn,1=for,2=med,3=anc;\n        // the new way is bool[] { anc, med, for, unkn }\n        return types;\n    }\n\n    public void setTypes(boolean[] types) {\n        // new api, legacy backing.  see getTypes().\n        // future:\n        /*\n\t\t int n = this.types.length;\n\t\t for (int i=0; i<n; i++)\n\t\t this.types[i] = types[i]; // -- can i just copy it, even?\n\t\t */\n        String type = \"\";\n        if (types[0])\n            type += \"3\";\n        if (types[1])\n            type += \"2\";\n        if (types[2])\n            type += \"1\";\n        if (types[3])\n            type += \"4\";\n        this.type = type;\n    }\n\n    // e.g., [t,t,f,f] => \"Ancient, Medieval\"\n    public String getTypesAsString() {\n        // future: types will be native.  until then, just call getTypes().\n        boolean[] types = getTypes();\n        StringBuffer buf = new StringBuffer();\n        if (types[0])\n            // FIXME: i18n!\n            buf.append(\"Ancient\");\n        if (types[1]) {\n            if (buf.length() > 0)\n                buf.append(\", \");\n            buf.append(\"Medieval\");\n        }\n        if (types[2]) {\n            if (buf.length() > 0)\n                buf.append(\", \");\n            buf.append(\"Forests\");\n        }\n        if (types[3]) {\n            if (buf.length() > 0)\n                buf.append(\", \");\n            buf.append(\"Unknown\");\n        }\n        return buf.toString();\n    }\n\n    public String getTypeString() {\n        return type;\n    }\n\n    public void setTypeString(String type) {\n        this.type = type;\n    }\n\n    public String getSpecies() {\n        return species;\n    }\n\n    public void setSpecies(String species) {\n        this.species = species;\n    }\n\n    public Location getLocation() {\n        return location;\n    }\n\n    public void setLocation(Location location) {\n        this.location = location;\n        // WAS: SiteDB.getSiteDB().fireSiteMoved(this);\n    }\n\n    // BUG: but location is mutable, for performance!  so theoretically\n    // the user could say getLocation().setSomething() and screw this\n    // up ...  oops (fortunately this never happens, i think; at\n    // least, it doesn't show up when grepping for \"getLocation()\" and\n    // \"=\" without \"==\", so it doesn't happen in any 1-line\n    // expression, at least.)\n    // -- SOLUTION: make Mutable and Immutable Location classes.\n    public Integer getAltitude() {\n        return altitude;\n    }\n\n    public void setAltitude(Integer altitude) {\n        this.altitude = altitude;\n    }\n\n    /**\n     *  All samples with a filename starting with this, belong to this\n     * \t site.  This is just a hack, until a new file format, which\n     * \t contains the site explicitly\n     * \t (\"<code>&lt;site&gt;ZKB&lt;/site&gt;</code>\") is in place.\n     */\n    public String getFolder() {\n        return folder;\n    }\n\n    //\n    // Remove G:\\DATA cruft, and silly filename tag in sitedb\n    // Also removes data directory, if anyone else is using corina (??)\n    // TODO: maybe remove this, once sitedbs are updated?\n    public void setFilename(String filename) {\n        String folder = filename;\n        if (filename.startsWith(\"G:\\\\DATA\\\\\")) {\n            folder = filename.substring(8);\n        } else if (filename.startsWith(App.prefs.getPref(\"corina.dir.data\") + File.separator)) {\n            folder = filename.substring(App.prefs.getPref(\"corina.dir.data\").length() + File.separator.length());\n        }\n        // replace forward slashes with a :, which will be our path separator.\n        folder = folder.replace(\"\\\\\", \":\");\n        // do the same for some other platform\n        folder = folder.replace(File.separator, \":\");\n        setFolder(folder);\n    }\n\n    public void setFolder(String folder) {\n        this.folder = folder;\n        // WRITEME: fire event!\n    }\n\n    public String getComments() {\n        return comments;\n    }\n\n    public void setComments(String comments) {\n        this.comments = comments;\n        // WRITEME: fire event!\n    }\n\n    /**\n     *  A pretty-printer for sites.\n     * \t @return the site in human-readable form\n     */\n    public String toString() {\n        StringBuffer result = new StringBuffer();\n        result.append(\"[Site: \");\n        // name, code, id\n        result.append(\"name='\" + name + \"' \");\n        result.append(\"code='\" + code + \"' \");\n        result.append(\"id='\" + id + \"' \");\n        // location, if available\n        if (location != null)\n            result.append(\"location=\" + location + \" \");\n        // return it\n        result.append(\"]\");\n        return result.toString();\n    }\n\n    /*\n\t ok, i officially don't like toString() any more.  it can be\n\t really useful, but i want to have more than one toString() and\n\t choose among them when i use it -- toString() and\n\t toStringWithLocation(), perhaps, and then say add(site :toString\n\t 'toStringWithLocation);\n\t */\n    /**\n     * \t Make an XML String which represents this Site.\n     *\n     * \t @return this Site as an XML String\n     */\n    public String toXML() {\n        String lineSeparator = System.getProperty(\"line.separator\");\n        StringBuffer buf = new StringBuffer(\"   <site>\" + lineSeparator);\n        appendIfNonNull(buf, getCountry(), \"country\", lineSeparator);\n        appendIfNonNull(buf, code, \"code\", lineSeparator);\n        appendIfNonNull(buf, getName(), \"name\", lineSeparator);\n        appendIfNonNull(buf, getId(), \"id\", lineSeparator);\n        appendIfNonNull(buf, species, \"species\", lineSeparator);\n        appendIfNonNull(buf, type, \"type\", lineSeparator);\n        appendIfNonNull(buf, getFolder(), \"folder\", lineSeparator);\n        Location loc = getLocation();\n        if (loc != null)\n            appendIfNonNull(buf, loc.toISO6709(), \"location\", lineSeparator);\n        appendIfNonNull(buf, getComments(), \"comments\", lineSeparator);\n        buf.append(\"   </site>\" + lineSeparator);\n        return buf.toString();\n    }\n\n    // append \"<tag>value</tag>\\n\" to buf if value!=null and value!=\"\"\n    private void appendIfNonNull(StringBuffer buf, Object value, String tag, String lineSeparator) {\n        if (value == null || value.equals(\"\"))\n            return;\n        // escape for XML!! AGH! Yay for no more corrupted site databases.\n        String outvalue = StringUtils.escapeForXML(value.toString());\n        buf.append(\"      <\" + tag + \">\" + outvalue + \"</\" + tag + \">\" + lineSeparator);\n    }\n\n    // make this customizable? -- (use map.Pallette?  no...)\n    // -- use type.contains(\"F\") => green, etc.?  (.indexOf(TYPE_FOREST), really)\n    // RENAME: just getColor() -- but don't rename it until it's been moved\n    // REFACTOR: belongs in SiteRenderer, not here\n    public Color getSiteColor() {\n        // better to hook this into some sort of scheme-chooser.  what for?  color ...\n        // -- by species\n        // -- by country\n        // -- by epoch\n        // and maybe even others i can't think of\n        int x;\n        try {\n            // was: type2\n            x = Integer.parseInt(type);\n        } catch (NumberFormatException nfe) {\n            x = TYPE_UNKNOWN;\n        }\n        switch(x) {\n            case TYPE_FOREST:\n                return FOREST_COLOR;\n            case TYPE_MEDIEVAL:\n                return MEDIEVAL_COLOR;\n            case TYPE_ANCIENT:\n                return ANCIENT_COLOR;\n            default:\n                return UNKNOWN_COLOR;\n        }\n    }\n\n    // temp?  though it may be otherwise useful...\n    public boolean isForest() {\n        return (type.indexOf(\"\" + TYPE_FOREST) != -1);\n    }\n\n    // colors\n    // green\n    private static Color FOREST_COLOR = whiten(new Color(22, 144, 58));\n\n    // red\n    private static Color MEDIEVAL_COLOR = whiten(new Color(196, 28, 28));\n\n    // blue\n    private static Color ANCIENT_COLOR = whiten(new Color(25, 81, 162));\n\n    // gray\n    private static Color UNKNOWN_COLOR = whiten(new Color(128, 128, 128));\n\n    private static Color whiten(Color c) {\n        // WAS: ColorUtils.blend(c, 0.3f, Color.white, 0.7f);\n        return c;\n    }\n\n    // for law of demeter, because 99% of the time you want my\n    // location, you want it for the distance to another site.\n    public int distanceTo(Site s2) {\n        return location.distanceTo(s2.location);\n    }\n\n    //\n    // equals/hashCode\n    //\n    public boolean equals(Object o2) {\n        // WRITEME: compare name,code,id,location,altitude,country,species,type,comments,folder?\n        Site s2 = (Site) o2;\n        return eq(name, s2.name) && eq(code, s2.code) && eq(id, s2.id) && eq(location, s2.location) && eq(altitude, s2.altitude) && eq(country, s2.country) && eq(species, s2.species) && eq(type, s2.type) && eq(comments, s2.comments) && eq(folder, s2.folder);\n    }\n\n    // o1.equals(o2), but valid for null/null as well.\n    // also, null string can equal null for this compare.\n    private boolean eq(Object o1, Object o2) {\n        if (o1 == null && o2 != null)\n            return o2.equals(\"\");\n        if (o2 == null && o1 != null)\n            return o1.equals(\"\");\n        if (o1 == null)\n            return (o2 == null);\n        else\n            return o1.equals(o2);\n    }\n\n    public int hashCode() {\n        int x = 0;\n        x += hash(name) + hash(code) + hash(id);\n        x += hash(location) + hash(altitude) + hash(country);\n        x += hash(species) + hash(type);\n        x += hash(comments);\n        x += hash(folder);\n        return x;\n    }\n\n    // .hashCode(), or 0 if null\n    private int hash(Object o) {\n        return (o == null ? 0 : o.hashCode());\n    }\n\n    // make a duplicate copy of this site.\n    public Object clone() {\n        Site clone = new Site();\n        clone.id = new String(id);\n        clone.code = new String(code);\n        clone.name = new String(name);\n        if (country != null)\n            clone.country = new String(country);\n        clone.type = new String(type);\n        clone.species = new String(species);\n        if (location != null)\n            clone.location = (Location) location.clone();\n        if (altitude != null)\n            clone.altitude = new Integer(altitude);\n        if (folder != null)\n            clone.folder = new String(folder);\n        if (comments != null)\n            clone.comments = new String(comments);\n        return clone;\n    }\n\n    // The 3-digit identification number.\n    private String id = \"\";\n\n    // The 3-letter code.\n    private String code = \"\";\n\n    // Site name\n    private String name = \"\";\n\n    // country\n    private String country = null;\n\n    // Site type\n    private String type = \"\";\n\n    // Species\n    private String species = \"\";\n\n    // The location (latitude, longitude).\n    private Location location = null;\n\n    // Null means no location entered by user (yet).\n    // The altitude, in meters.\n    private Integer altitude = null;\n\n    // The folder path which contains the file\n    private String folder = null;\n\n    // Site comments\n    private String comments = null;\n}\n",
		"id": "/EvoSuiteBenchmark/35_corina/src/main/java/corina/site/Site_0Test.java",
		"test_prompt": "// Site_0Test.java\n// This file is part of Corina.\n//\n// Corina is free software; you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation; either version 2 of the License, or\n// (at your option) any later version.\n//\n// Corina is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Corina; if not, write to the Free Software\n// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n//\n// Copyright 2001 Ken Harris <kbh7@cornell.edu>\n//\npackage corina.site;\n\nimport corina.core.App;\nimport corina.util.ColorUtils;\nimport corina.util.StringUtils;\nimport java.awt.Color;\nimport java.awt.Graphics2D;\nimport java.io.File;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link Site}.\n* It contains ten unit test cases for the {@link Site#toXML()} method.\n*/\nclass Site_0Test {"
	},
	{
		"original_code": "// Site.java\n//\n// This file is part of Corina.\n//\n// Corina is free software; you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation; either version 2 of the License, or\n// (at your option) any later version.\n//\n// Corina is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Corina; if not, write to the Free Software\n// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n//\n// Copyright 2001 Ken Harris <kbh7@cornell.edu>\n//\npackage corina.site;\n\nimport corina.core.App;\nimport corina.util.ColorUtils;\nimport corina.util.StringUtils;\nimport java.awt.Color;\nimport java.awt.Graphics2D;\nimport java.io.File;\n\n/*\n  todo:\n  -- add string i/o (of xml tags)\n  -- encapsulate members better\n -- javadoc!\n\n  -- implement toString(), so i can see what's going on!\n*/\n/**\n *   Site object, which holds name/ID information, location, and\n *   other assorted data.  For example, lists of masters and non-fits.\n *\n *   @author Ken Harris &lt;kbh7 <i style=\"color: gray\">at</i> cornell <i style=\"color: gray\">dot</i> edu&gt;\n *   @version $Id: Site.java,v 1.7 2006/06/12 22:14:05 lucasmo Exp $\n */\npublic class Site implements Cloneable {\n\n    public String getId() {\n        return id;\n    }\n\n    public void setId(String id) {\n        this.id = id;\n        // WAS: SiteDB.getSiteDB().fireSiteIDChanged(this);\n    }\n\n    public String getCode() {\n        return code;\n    }\n\n    public void setCode(String code) {\n        this.code = code;\n        // WAS: SiteDB.getSiteDB().fireSiteCodeChanged(this);\n    }\n\n    public String getName() {\n        return name;\n    }\n\n    public void setName(String name) {\n        this.name = name;\n        // WAS: SiteDB.getSiteDB().fireSiteNameChanged(this);\n    }\n\n    public String getCountry() {\n        return country;\n    }\n\n    public void setCountry(String country) {\n        this.country = country;\n        // WAS: SiteDB.getSiteDB().fireSiteCountryChanged(this);\n    }\n\n    // the type: FOREST(1), MEDIEVAL(2), ANCIENT(3), or UNKNOWN(4->0)\n    // => make bitfield?\n    public final static int TYPE_UNKNOWN = 0;\n\n    public final static int TYPE_FOREST = 1;\n\n    public final static int TYPE_MEDIEVAL = 2;\n\n    public final static int TYPE_ANCIENT = 3;\n\n    //    public int type=TYPE_UNKNOWN;\n    // eh? what is this?\n    //public String type2 = \"\"; // a string, like \"AU\" (=ancient+unknown)\n    // 10-may-2003: what i want:\n    // in xml:\n    //   <types>ancient,forest</types> (empty string = none = same as no tag)\n    // as getter:\n    //   bool[4] getTypes()??\n    // as setter:\n    //   void setTypes(bool[4])??\n    // as data structure:\n    //   bool[4]\n    // migration strategy:\n    //   add methods; make old types private; convert to new methods\n    // what's on disk now:\n    //   \"2\", or \"1,3\".  (but trivial to convert -- or, just accept either)\n    public boolean[] getTypes() {\n        // this is the new api i want.  in the future, i'll just say:\n        /*\n\t\t int n = this.types.length;\n\t\t boolean types[] = new boolean[n];\n\t\t for (int i=0; i<n; i++)\n\t\t types[i] = this.types[i]; // -- can i just clone() it, even?\n\t\t return types;\n\t\t */\n        // but for now, i've got the old \"type=2,3\" legacy crap.\n        // oh well, i'll just write a simple adapter.\n        boolean[] types = new boolean[4];\n        for (int i = 0; i < type.length(); i++) {\n            char c = type.charAt(i);\n            if (c == '0' || c == '4')\n                types[3] = true;\n            if (c == '3')\n                types[0] = true;\n            if (c == '2')\n                types[1] = true;\n            if (c == '1')\n                types[2] = true;\n        }\n        // note: the old way had 0=unkn,1=for,2=med,3=anc;\n        // the new way is bool[] { anc, med, for, unkn }\n        return types;\n    }\n\n    public void setTypes(boolean[] types) {\n        // new api, legacy backing.  see getTypes().\n        // future:\n        /*\n\t\t int n = this.types.length;\n\t\t for (int i=0; i<n; i++)\n\t\t this.types[i] = types[i]; // -- can i just copy it, even?\n\t\t */\n        String type = \"\";\n        if (types[0])\n            type += \"3\";\n        if (types[1])\n            type += \"2\";\n        if (types[2])\n            type += \"1\";\n        if (types[3])\n            type += \"4\";\n        this.type = type;\n    }\n\n    // e.g., [t,t,f,f] => \"Ancient, Medieval\"\n    public String getTypesAsString() {\n        // future: types will be native.  until then, just call getTypes().\n        boolean[] types = getTypes();\n        StringBuffer buf = new StringBuffer();\n        if (types[0])\n            // FIXME: i18n!\n            buf.append(\"Ancient\");\n        if (types[1]) {\n            if (buf.length() > 0)\n                buf.append(\", \");\n            buf.append(\"Medieval\");\n        }\n        if (types[2]) {\n            if (buf.length() > 0)\n                buf.append(\", \");\n            buf.append(\"Forests\");\n        }\n        if (types[3]) {\n            if (buf.length() > 0)\n                buf.append(\", \");\n            buf.append(\"Unknown\");\n        }\n        return buf.toString();\n    }\n\n    public String getTypeString() {\n        return type;\n    }\n\n    public void setTypeString(String type) {\n        this.type = type;\n    }\n\n    public String getSpecies() {\n        return species;\n    }\n\n    public void setSpecies(String species) {\n        this.species = species;\n    }\n\n    public Location getLocation() {\n        return location;\n    }\n\n    public void setLocation(Location location) {\n        this.location = location;\n        // WAS: SiteDB.getSiteDB().fireSiteMoved(this);\n    }\n\n    // BUG: but location is mutable, for performance!  so theoretically\n    // the user could say getLocation().setSomething() and screw this\n    // up ...  oops (fortunately this never happens, i think; at\n    // least, it doesn't show up when grepping for \"getLocation()\" and\n    // \"=\" without \"==\", so it doesn't happen in any 1-line\n    // expression, at least.)\n    // -- SOLUTION: make Mutable and Immutable Location classes.\n    public Integer getAltitude() {\n        return altitude;\n    }\n\n    public void setAltitude(Integer altitude) {\n        this.altitude = altitude;\n    }\n\n    /**\n     *  All samples with a filename starting with this, belong to this\n     * \t site.  This is just a hack, until a new file format, which\n     * \t contains the site explicitly\n     * \t (\"<code>&lt;site&gt;ZKB&lt;/site&gt;</code>\") is in place.\n     */\n    public String getFolder() {\n        return folder;\n    }\n\n    //\n    // Remove G:\\DATA cruft, and silly filename tag in sitedb\n    // Also removes data directory, if anyone else is using corina (??)\n    // TODO: maybe remove this, once sitedbs are updated?\n    public void setFilename(String filename) {\n        String folder = filename;\n        if (filename.startsWith(\"G:\\\\DATA\\\\\")) {\n            folder = filename.substring(8);\n        } else if (filename.startsWith(App.prefs.getPref(\"corina.dir.data\") + File.separator)) {\n            folder = filename.substring(App.prefs.getPref(\"corina.dir.data\").length() + File.separator.length());\n        }\n        // replace forward slashes with a :, which will be our path separator.\n        folder = folder.replace(\"\\\\\", \":\");\n        // do the same for some other platform\n        folder = folder.replace(File.separator, \":\");\n        setFolder(folder);\n    }\n\n    public void setFolder(String folder) {\n        this.folder = folder;\n        // WRITEME: fire event!\n    }\n\n    public String getComments() {\n        return comments;\n    }\n\n    public void setComments(String comments) {\n        this.comments = comments;\n        // WRITEME: fire event!\n    }\n\n    /**\n     *  A pretty-printer for sites.\n     * \t @return the site in human-readable form\n     */\n    public String toString() {\n        StringBuffer result = new StringBuffer();\n        result.append(\"[Site: \");\n        // name, code, id\n        result.append(\"name='\" + name + \"' \");\n        result.append(\"code='\" + code + \"' \");\n        result.append(\"id='\" + id + \"' \");\n        // location, if available\n        if (location != null)\n            result.append(\"location=\" + location + \" \");\n        // return it\n        result.append(\"]\");\n        return result.toString();\n    }\n\n    /*\n\t ok, i officially don't like toString() any more.  it can be\n\t really useful, but i want to have more than one toString() and\n\t choose among them when i use it -- toString() and\n\t toStringWithLocation(), perhaps, and then say add(site :toString\n\t 'toStringWithLocation);\n\t */\n    /**\n     * \t Make an XML String which represents this Site.\n     *\n     * \t @return this Site as an XML String\n     */\n    public String toXML() {\n        String lineSeparator = System.getProperty(\"line.separator\");\n        StringBuffer buf = new StringBuffer(\"   <site>\" + lineSeparator);\n        appendIfNonNull(buf, getCountry(), \"country\", lineSeparator);\n        appendIfNonNull(buf, code, \"code\", lineSeparator);\n        appendIfNonNull(buf, getName(), \"name\", lineSeparator);\n        appendIfNonNull(buf, getId(), \"id\", lineSeparator);\n        appendIfNonNull(buf, species, \"species\", lineSeparator);\n        appendIfNonNull(buf, type, \"type\", lineSeparator);\n        appendIfNonNull(buf, getFolder(), \"folder\", lineSeparator);\n        Location loc = getLocation();\n        if (loc != null)\n            appendIfNonNull(buf, loc.toISO6709(), \"location\", lineSeparator);\n        appendIfNonNull(buf, getComments(), \"comments\", lineSeparator);\n        buf.append(\"   </site>\" + lineSeparator);\n        return buf.toString();\n    }\n\n    // append \"<tag>value</tag>\\n\" to buf if value!=null and value!=\"\"\n    private void appendIfNonNull(StringBuffer buf, Object value, String tag, String lineSeparator) {\n        if (value == null || value.equals(\"\"))\n            return;\n        // escape for XML!! AGH! Yay for no more corrupted site databases.\n        String outvalue = StringUtils.escapeForXML(value.toString());\n        buf.append(\"      <\" + tag + \">\" + outvalue + \"</\" + tag + \">\" + lineSeparator);\n    }\n\n    // make this customizable? -- (use map.Pallette?  no...)\n    // -- use type.contains(\"F\") => green, etc.?  (.indexOf(TYPE_FOREST), really)\n    // RENAME: just getColor() -- but don't rename it until it's been moved\n    // REFACTOR: belongs in SiteRenderer, not here\n    public Color getSiteColor() {\n        // better to hook this into some sort of scheme-chooser.  what for?  color ...\n        // -- by species\n        // -- by country\n        // -- by epoch\n        // and maybe even others i can't think of\n        int x;\n        try {\n            // was: type2\n            x = Integer.parseInt(type);\n        } catch (NumberFormatException nfe) {\n            x = TYPE_UNKNOWN;\n        }\n        switch(x) {\n            case TYPE_FOREST:\n                return FOREST_COLOR;\n            case TYPE_MEDIEVAL:\n                return MEDIEVAL_COLOR;\n            case TYPE_ANCIENT:\n                return ANCIENT_COLOR;\n            default:\n                return UNKNOWN_COLOR;\n        }\n    }\n\n    // temp?  though it may be otherwise useful...\n    public boolean isForest() {\n        return (type.indexOf(\"\" + TYPE_FOREST) != -1);\n    }\n\n    // colors\n    // green\n    private static Color FOREST_COLOR = whiten(new Color(22, 144, 58));\n\n    // red\n    private static Color MEDIEVAL_COLOR = whiten(new Color(196, 28, 28));\n\n    // blue\n    private static Color ANCIENT_COLOR = whiten(new Color(25, 81, 162));\n\n    // gray\n    private static Color UNKNOWN_COLOR = whiten(new Color(128, 128, 128));\n\n    private static Color whiten(Color c) {\n        // WAS: ColorUtils.blend(c, 0.3f, Color.white, 0.7f);\n        return c;\n    }\n\n    // for law of demeter, because 99% of the time you want my\n    // location, you want it for the distance to another site.\n    public int distanceTo(Site s2) {\n        return location.distanceTo(s2.location);\n    }\n\n    //\n    // equals/hashCode\n    //\n    public boolean equals(Object o2) {\n        // WRITEME: compare name,code,id,location,altitude,country,species,type,comments,folder?\n        Site s2 = (Site) o2;\n        return eq(name, s2.name) && eq(code, s2.code) && eq(id, s2.id) && eq(location, s2.location) && eq(altitude, s2.altitude) && eq(country, s2.country) && eq(species, s2.species) && eq(type, s2.type) && eq(comments, s2.comments) && eq(folder, s2.folder);\n    }\n\n    // o1.equals(o2), but valid for null/null as well.\n    // also, null string can equal null for this compare.\n    private boolean eq(Object o1, Object o2) {\n        if (o1 == null && o2 != null)\n            return o2.equals(\"\");\n        if (o2 == null && o1 != null)\n            return o1.equals(\"\");\n        if (o1 == null)\n            return (o2 == null);\n        else\n            return o1.equals(o2);\n    }\n\n    public int hashCode() {\n        int x = 0;\n        x += hash(name) + hash(code) + hash(id);\n        x += hash(location) + hash(altitude) + hash(country);\n        x += hash(species) + hash(type);\n        x += hash(comments);\n        x += hash(folder);\n        return x;\n    }\n\n    // .hashCode(), or 0 if null\n    private int hash(Object o) {\n        return (o == null ? 0 : o.hashCode());\n    }\n\n    // make a duplicate copy of this site.\n    public Object clone() {\n        Site clone = new Site();\n        clone.id = new String(id);\n        clone.code = new String(code);\n        clone.name = new String(name);\n        if (country != null)\n            clone.country = new String(country);\n        clone.type = new String(type);\n        clone.species = new String(species);\n        if (location != null)\n            clone.location = (Location) location.clone();\n        if (altitude != null)\n            clone.altitude = new Integer(altitude);\n        if (folder != null)\n            clone.folder = new String(folder);\n        if (comments != null)\n            clone.comments = new String(comments);\n        return clone;\n    }\n\n    // The 3-digit identification number.\n    private String id = \"\";\n\n    // The 3-letter code.\n    private String code = \"\";\n\n    // Site name\n    private String name = \"\";\n\n    // country\n    private String country = null;\n\n    // Site type\n    private String type = \"\";\n\n    // Species\n    private String species = \"\";\n\n    // The location (latitude, longitude).\n    private Location location = null;\n\n    // Null means no location entered by user (yet).\n    // The altitude, in meters.\n    private Integer altitude = null;\n\n    // The folder path which contains the file\n    private String folder = null;\n\n    // Site comments\n    private String comments = null;\n}\n",
		"id": "/EvoSuiteBenchmark/35_corina/src/main/java/corina/site/Site_1Test.java",
		"test_prompt": "// Site_1Test.java\n// This file is part of Corina.\n//\n// Corina is free software; you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation; either version 2 of the License, or\n// (at your option) any later version.\n//\n// Corina is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Corina; if not, write to the Free Software\n// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n//\n// Copyright 2001 Ken Harris <kbh7@cornell.edu>\n//\npackage corina.site;\n\nimport corina.core.App;\nimport corina.util.ColorUtils;\nimport corina.util.StringUtils;\nimport java.awt.Color;\nimport java.awt.Graphics2D;\nimport java.io.File;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link Site}.\n* It contains ten unit test cases for the {@link Site#isForest()} method.\n*/\nclass Site_1Test {"
	},
	{
		"original_code": "// Site.java\n//\n// This file is part of Corina.\n//\n// Corina is free software; you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation; either version 2 of the License, or\n// (at your option) any later version.\n//\n// Corina is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Corina; if not, write to the Free Software\n// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n//\n// Copyright 2001 Ken Harris <kbh7@cornell.edu>\n//\npackage corina.site;\n\nimport corina.core.App;\nimport corina.util.ColorUtils;\nimport corina.util.StringUtils;\nimport java.awt.Color;\nimport java.awt.Graphics2D;\nimport java.io.File;\n\n/*\n  todo:\n  -- add string i/o (of xml tags)\n  -- encapsulate members better\n -- javadoc!\n\n  -- implement toString(), so i can see what's going on!\n*/\n/**\n *   Site object, which holds name/ID information, location, and\n *   other assorted data.  For example, lists of masters and non-fits.\n *\n *   @author Ken Harris &lt;kbh7 <i style=\"color: gray\">at</i> cornell <i style=\"color: gray\">dot</i> edu&gt;\n *   @version $Id: Site.java,v 1.7 2006/06/12 22:14:05 lucasmo Exp $\n */\npublic class Site implements Cloneable {\n\n    public String getId() {\n        return id;\n    }\n\n    public void setId(String id) {\n        this.id = id;\n        // WAS: SiteDB.getSiteDB().fireSiteIDChanged(this);\n    }\n\n    public String getCode() {\n        return code;\n    }\n\n    public void setCode(String code) {\n        this.code = code;\n        // WAS: SiteDB.getSiteDB().fireSiteCodeChanged(this);\n    }\n\n    public String getName() {\n        return name;\n    }\n\n    public void setName(String name) {\n        this.name = name;\n        // WAS: SiteDB.getSiteDB().fireSiteNameChanged(this);\n    }\n\n    public String getCountry() {\n        return country;\n    }\n\n    public void setCountry(String country) {\n        this.country = country;\n        // WAS: SiteDB.getSiteDB().fireSiteCountryChanged(this);\n    }\n\n    // the type: FOREST(1), MEDIEVAL(2), ANCIENT(3), or UNKNOWN(4->0)\n    // => make bitfield?\n    public final static int TYPE_UNKNOWN = 0;\n\n    public final static int TYPE_FOREST = 1;\n\n    public final static int TYPE_MEDIEVAL = 2;\n\n    public final static int TYPE_ANCIENT = 3;\n\n    //    public int type=TYPE_UNKNOWN;\n    // eh? what is this?\n    //public String type2 = \"\"; // a string, like \"AU\" (=ancient+unknown)\n    // 10-may-2003: what i want:\n    // in xml:\n    //   <types>ancient,forest</types> (empty string = none = same as no tag)\n    // as getter:\n    //   bool[4] getTypes()??\n    // as setter:\n    //   void setTypes(bool[4])??\n    // as data structure:\n    //   bool[4]\n    // migration strategy:\n    //   add methods; make old types private; convert to new methods\n    // what's on disk now:\n    //   \"2\", or \"1,3\".  (but trivial to convert -- or, just accept either)\n    public boolean[] getTypes() {\n        // this is the new api i want.  in the future, i'll just say:\n        /*\n\t\t int n = this.types.length;\n\t\t boolean types[] = new boolean[n];\n\t\t for (int i=0; i<n; i++)\n\t\t types[i] = this.types[i]; // -- can i just clone() it, even?\n\t\t return types;\n\t\t */\n        // but for now, i've got the old \"type=2,3\" legacy crap.\n        // oh well, i'll just write a simple adapter.\n        boolean[] types = new boolean[4];\n        for (int i = 0; i < type.length(); i++) {\n            char c = type.charAt(i);\n            if (c == '0' || c == '4')\n                types[3] = true;\n            if (c == '3')\n                types[0] = true;\n            if (c == '2')\n                types[1] = true;\n            if (c == '1')\n                types[2] = true;\n        }\n        // note: the old way had 0=unkn,1=for,2=med,3=anc;\n        // the new way is bool[] { anc, med, for, unkn }\n        return types;\n    }\n\n    public void setTypes(boolean[] types) {\n        // new api, legacy backing.  see getTypes().\n        // future:\n        /*\n\t\t int n = this.types.length;\n\t\t for (int i=0; i<n; i++)\n\t\t this.types[i] = types[i]; // -- can i just copy it, even?\n\t\t */\n        String type = \"\";\n        if (types[0])\n            type += \"3\";\n        if (types[1])\n            type += \"2\";\n        if (types[2])\n            type += \"1\";\n        if (types[3])\n            type += \"4\";\n        this.type = type;\n    }\n\n    // e.g., [t,t,f,f] => \"Ancient, Medieval\"\n    public String getTypesAsString() {\n        // future: types will be native.  until then, just call getTypes().\n        boolean[] types = getTypes();\n        StringBuffer buf = new StringBuffer();\n        if (types[0])\n            // FIXME: i18n!\n            buf.append(\"Ancient\");\n        if (types[1]) {\n            if (buf.length() > 0)\n                buf.append(\", \");\n            buf.append(\"Medieval\");\n        }\n        if (types[2]) {\n            if (buf.length() > 0)\n                buf.append(\", \");\n            buf.append(\"Forests\");\n        }\n        if (types[3]) {\n            if (buf.length() > 0)\n                buf.append(\", \");\n            buf.append(\"Unknown\");\n        }\n        return buf.toString();\n    }\n\n    public String getTypeString() {\n        return type;\n    }\n\n    public void setTypeString(String type) {\n        this.type = type;\n    }\n\n    public String getSpecies() {\n        return species;\n    }\n\n    public void setSpecies(String species) {\n        this.species = species;\n    }\n\n    public Location getLocation() {\n        return location;\n    }\n\n    public void setLocation(Location location) {\n        this.location = location;\n        // WAS: SiteDB.getSiteDB().fireSiteMoved(this);\n    }\n\n    // BUG: but location is mutable, for performance!  so theoretically\n    // the user could say getLocation().setSomething() and screw this\n    // up ...  oops (fortunately this never happens, i think; at\n    // least, it doesn't show up when grepping for \"getLocation()\" and\n    // \"=\" without \"==\", so it doesn't happen in any 1-line\n    // expression, at least.)\n    // -- SOLUTION: make Mutable and Immutable Location classes.\n    public Integer getAltitude() {\n        return altitude;\n    }\n\n    public void setAltitude(Integer altitude) {\n        this.altitude = altitude;\n    }\n\n    /**\n     *  All samples with a filename starting with this, belong to this\n     * \t site.  This is just a hack, until a new file format, which\n     * \t contains the site explicitly\n     * \t (\"<code>&lt;site&gt;ZKB&lt;/site&gt;</code>\") is in place.\n     */\n    public String getFolder() {\n        return folder;\n    }\n\n    //\n    // Remove G:\\DATA cruft, and silly filename tag in sitedb\n    // Also removes data directory, if anyone else is using corina (??)\n    // TODO: maybe remove this, once sitedbs are updated?\n    public void setFilename(String filename) {\n        String folder = filename;\n        if (filename.startsWith(\"G:\\\\DATA\\\\\")) {\n            folder = filename.substring(8);\n        } else if (filename.startsWith(App.prefs.getPref(\"corina.dir.data\") + File.separator)) {\n            folder = filename.substring(App.prefs.getPref(\"corina.dir.data\").length() + File.separator.length());\n        }\n        // replace forward slashes with a :, which will be our path separator.\n        folder = folder.replace(\"\\\\\", \":\");\n        // do the same for some other platform\n        folder = folder.replace(File.separator, \":\");\n        setFolder(folder);\n    }\n\n    public void setFolder(String folder) {\n        this.folder = folder;\n        // WRITEME: fire event!\n    }\n\n    public String getComments() {\n        return comments;\n    }\n\n    public void setComments(String comments) {\n        this.comments = comments;\n        // WRITEME: fire event!\n    }\n\n    /**\n     *  A pretty-printer for sites.\n     * \t @return the site in human-readable form\n     */\n    public String toString() {\n        StringBuffer result = new StringBuffer();\n        result.append(\"[Site: \");\n        // name, code, id\n        result.append(\"name='\" + name + \"' \");\n        result.append(\"code='\" + code + \"' \");\n        result.append(\"id='\" + id + \"' \");\n        // location, if available\n        if (location != null)\n            result.append(\"location=\" + location + \" \");\n        // return it\n        result.append(\"]\");\n        return result.toString();\n    }\n\n    /*\n\t ok, i officially don't like toString() any more.  it can be\n\t really useful, but i want to have more than one toString() and\n\t choose among them when i use it -- toString() and\n\t toStringWithLocation(), perhaps, and then say add(site :toString\n\t 'toStringWithLocation);\n\t */\n    /**\n     * \t Make an XML String which represents this Site.\n     *\n     * \t @return this Site as an XML String\n     */\n    public String toXML() {\n        String lineSeparator = System.getProperty(\"line.separator\");\n        StringBuffer buf = new StringBuffer(\"   <site>\" + lineSeparator);\n        appendIfNonNull(buf, getCountry(), \"country\", lineSeparator);\n        appendIfNonNull(buf, code, \"code\", lineSeparator);\n        appendIfNonNull(buf, getName(), \"name\", lineSeparator);\n        appendIfNonNull(buf, getId(), \"id\", lineSeparator);\n        appendIfNonNull(buf, species, \"species\", lineSeparator);\n        appendIfNonNull(buf, type, \"type\", lineSeparator);\n        appendIfNonNull(buf, getFolder(), \"folder\", lineSeparator);\n        Location loc = getLocation();\n        if (loc != null)\n            appendIfNonNull(buf, loc.toISO6709(), \"location\", lineSeparator);\n        appendIfNonNull(buf, getComments(), \"comments\", lineSeparator);\n        buf.append(\"   </site>\" + lineSeparator);\n        return buf.toString();\n    }\n\n    // append \"<tag>value</tag>\\n\" to buf if value!=null and value!=\"\"\n    private void appendIfNonNull(StringBuffer buf, Object value, String tag, String lineSeparator) {\n        if (value == null || value.equals(\"\"))\n            return;\n        // escape for XML!! AGH! Yay for no more corrupted site databases.\n        String outvalue = StringUtils.escapeForXML(value.toString());\n        buf.append(\"      <\" + tag + \">\" + outvalue + \"</\" + tag + \">\" + lineSeparator);\n    }\n\n    // make this customizable? -- (use map.Pallette?  no...)\n    // -- use type.contains(\"F\") => green, etc.?  (.indexOf(TYPE_FOREST), really)\n    // RENAME: just getColor() -- but don't rename it until it's been moved\n    // REFACTOR: belongs in SiteRenderer, not here\n    public Color getSiteColor() {\n        // better to hook this into some sort of scheme-chooser.  what for?  color ...\n        // -- by species\n        // -- by country\n        // -- by epoch\n        // and maybe even others i can't think of\n        int x;\n        try {\n            // was: type2\n            x = Integer.parseInt(type);\n        } catch (NumberFormatException nfe) {\n            x = TYPE_UNKNOWN;\n        }\n        switch(x) {\n            case TYPE_FOREST:\n                return FOREST_COLOR;\n            case TYPE_MEDIEVAL:\n                return MEDIEVAL_COLOR;\n            case TYPE_ANCIENT:\n                return ANCIENT_COLOR;\n            default:\n                return UNKNOWN_COLOR;\n        }\n    }\n\n    // temp?  though it may be otherwise useful...\n    public boolean isForest() {\n        return (type.indexOf(\"\" + TYPE_FOREST) != -1);\n    }\n\n    // colors\n    // green\n    private static Color FOREST_COLOR = whiten(new Color(22, 144, 58));\n\n    // red\n    private static Color MEDIEVAL_COLOR = whiten(new Color(196, 28, 28));\n\n    // blue\n    private static Color ANCIENT_COLOR = whiten(new Color(25, 81, 162));\n\n    // gray\n    private static Color UNKNOWN_COLOR = whiten(new Color(128, 128, 128));\n\n    private static Color whiten(Color c) {\n        // WAS: ColorUtils.blend(c, 0.3f, Color.white, 0.7f);\n        return c;\n    }\n\n    // for law of demeter, because 99% of the time you want my\n    // location, you want it for the distance to another site.\n    public int distanceTo(Site s2) {\n        return location.distanceTo(s2.location);\n    }\n\n    //\n    // equals/hashCode\n    //\n    public boolean equals(Object o2) {\n        // WRITEME: compare name,code,id,location,altitude,country,species,type,comments,folder?\n        Site s2 = (Site) o2;\n        return eq(name, s2.name) && eq(code, s2.code) && eq(id, s2.id) && eq(location, s2.location) && eq(altitude, s2.altitude) && eq(country, s2.country) && eq(species, s2.species) && eq(type, s2.type) && eq(comments, s2.comments) && eq(folder, s2.folder);\n    }\n\n    // o1.equals(o2), but valid for null/null as well.\n    // also, null string can equal null for this compare.\n    private boolean eq(Object o1, Object o2) {\n        if (o1 == null && o2 != null)\n            return o2.equals(\"\");\n        if (o2 == null && o1 != null)\n            return o1.equals(\"\");\n        if (o1 == null)\n            return (o2 == null);\n        else\n            return o1.equals(o2);\n    }\n\n    public int hashCode() {\n        int x = 0;\n        x += hash(name) + hash(code) + hash(id);\n        x += hash(location) + hash(altitude) + hash(country);\n        x += hash(species) + hash(type);\n        x += hash(comments);\n        x += hash(folder);\n        return x;\n    }\n\n    // .hashCode(), or 0 if null\n    private int hash(Object o) {\n        return (o == null ? 0 : o.hashCode());\n    }\n\n    // make a duplicate copy of this site.\n    public Object clone() {\n        Site clone = new Site();\n        clone.id = new String(id);\n        clone.code = new String(code);\n        clone.name = new String(name);\n        if (country != null)\n            clone.country = new String(country);\n        clone.type = new String(type);\n        clone.species = new String(species);\n        if (location != null)\n            clone.location = (Location) location.clone();\n        if (altitude != null)\n            clone.altitude = new Integer(altitude);\n        if (folder != null)\n            clone.folder = new String(folder);\n        if (comments != null)\n            clone.comments = new String(comments);\n        return clone;\n    }\n\n    // The 3-digit identification number.\n    private String id = \"\";\n\n    // The 3-letter code.\n    private String code = \"\";\n\n    // Site name\n    private String name = \"\";\n\n    // country\n    private String country = null;\n\n    // Site type\n    private String type = \"\";\n\n    // Species\n    private String species = \"\";\n\n    // The location (latitude, longitude).\n    private Location location = null;\n\n    // Null means no location entered by user (yet).\n    // The altitude, in meters.\n    private Integer altitude = null;\n\n    // The folder path which contains the file\n    private String folder = null;\n\n    // Site comments\n    private String comments = null;\n}\n",
		"id": "/EvoSuiteBenchmark/35_corina/src/main/java/corina/site/Site_2Test.java",
		"test_prompt": "// Site_2Test.java\n// This file is part of Corina.\n//\n// Corina is free software; you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation; either version 2 of the License, or\n// (at your option) any later version.\n//\n// Corina is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Corina; if not, write to the Free Software\n// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n//\n// Copyright 2001 Ken Harris <kbh7@cornell.edu>\n//\npackage corina.site;\n\nimport corina.core.App;\nimport corina.util.ColorUtils;\nimport corina.util.StringUtils;\nimport java.awt.Color;\nimport java.awt.Graphics2D;\nimport java.io.File;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link Site}.\n* It contains ten unit test cases for the {@link Site#distanceTo(Site)} method.\n*/\nclass Site_2Test {"
	},
	{
		"original_code": "// Site.java\n//\n// This file is part of Corina.\n//\n// Corina is free software; you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation; either version 2 of the License, or\n// (at your option) any later version.\n//\n// Corina is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Corina; if not, write to the Free Software\n// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n//\n// Copyright 2001 Ken Harris <kbh7@cornell.edu>\n//\npackage corina.site;\n\nimport corina.core.App;\nimport corina.util.ColorUtils;\nimport corina.util.StringUtils;\nimport java.awt.Color;\nimport java.awt.Graphics2D;\nimport java.io.File;\n\n/*\n  todo:\n  -- add string i/o (of xml tags)\n  -- encapsulate members better\n -- javadoc!\n\n  -- implement toString(), so i can see what's going on!\n*/\n/**\n *   Site object, which holds name/ID information, location, and\n *   other assorted data.  For example, lists of masters and non-fits.\n *\n *   @author Ken Harris &lt;kbh7 <i style=\"color: gray\">at</i> cornell <i style=\"color: gray\">dot</i> edu&gt;\n *   @version $Id: Site.java,v 1.7 2006/06/12 22:14:05 lucasmo Exp $\n */\npublic class Site implements Cloneable {\n\n    public String getId() {\n        return id;\n    }\n\n    public void setId(String id) {\n        this.id = id;\n        // WAS: SiteDB.getSiteDB().fireSiteIDChanged(this);\n    }\n\n    public String getCode() {\n        return code;\n    }\n\n    public void setCode(String code) {\n        this.code = code;\n        // WAS: SiteDB.getSiteDB().fireSiteCodeChanged(this);\n    }\n\n    public String getName() {\n        return name;\n    }\n\n    public void setName(String name) {\n        this.name = name;\n        // WAS: SiteDB.getSiteDB().fireSiteNameChanged(this);\n    }\n\n    public String getCountry() {\n        return country;\n    }\n\n    public void setCountry(String country) {\n        this.country = country;\n        // WAS: SiteDB.getSiteDB().fireSiteCountryChanged(this);\n    }\n\n    // the type: FOREST(1), MEDIEVAL(2), ANCIENT(3), or UNKNOWN(4->0)\n    // => make bitfield?\n    public final static int TYPE_UNKNOWN = 0;\n\n    public final static int TYPE_FOREST = 1;\n\n    public final static int TYPE_MEDIEVAL = 2;\n\n    public final static int TYPE_ANCIENT = 3;\n\n    //    public int type=TYPE_UNKNOWN;\n    // eh? what is this?\n    //public String type2 = \"\"; // a string, like \"AU\" (=ancient+unknown)\n    // 10-may-2003: what i want:\n    // in xml:\n    //   <types>ancient,forest</types> (empty string = none = same as no tag)\n    // as getter:\n    //   bool[4] getTypes()??\n    // as setter:\n    //   void setTypes(bool[4])??\n    // as data structure:\n    //   bool[4]\n    // migration strategy:\n    //   add methods; make old types private; convert to new methods\n    // what's on disk now:\n    //   \"2\", or \"1,3\".  (but trivial to convert -- or, just accept either)\n    public boolean[] getTypes() {\n        // this is the new api i want.  in the future, i'll just say:\n        /*\n\t\t int n = this.types.length;\n\t\t boolean types[] = new boolean[n];\n\t\t for (int i=0; i<n; i++)\n\t\t types[i] = this.types[i]; // -- can i just clone() it, even?\n\t\t return types;\n\t\t */\n        // but for now, i've got the old \"type=2,3\" legacy crap.\n        // oh well, i'll just write a simple adapter.\n        boolean[] types = new boolean[4];\n        for (int i = 0; i < type.length(); i++) {\n            char c = type.charAt(i);\n            if (c == '0' || c == '4')\n                types[3] = true;\n            if (c == '3')\n                types[0] = true;\n            if (c == '2')\n                types[1] = true;\n            if (c == '1')\n                types[2] = true;\n        }\n        // note: the old way had 0=unkn,1=for,2=med,3=anc;\n        // the new way is bool[] { anc, med, for, unkn }\n        return types;\n    }\n\n    public void setTypes(boolean[] types) {\n        // new api, legacy backing.  see getTypes().\n        // future:\n        /*\n\t\t int n = this.types.length;\n\t\t for (int i=0; i<n; i++)\n\t\t this.types[i] = types[i]; // -- can i just copy it, even?\n\t\t */\n        String type = \"\";\n        if (types[0])\n            type += \"3\";\n        if (types[1])\n            type += \"2\";\n        if (types[2])\n            type += \"1\";\n        if (types[3])\n            type += \"4\";\n        this.type = type;\n    }\n\n    // e.g., [t,t,f,f] => \"Ancient, Medieval\"\n    public String getTypesAsString() {\n        // future: types will be native.  until then, just call getTypes().\n        boolean[] types = getTypes();\n        StringBuffer buf = new StringBuffer();\n        if (types[0])\n            // FIXME: i18n!\n            buf.append(\"Ancient\");\n        if (types[1]) {\n            if (buf.length() > 0)\n                buf.append(\", \");\n            buf.append(\"Medieval\");\n        }\n        if (types[2]) {\n            if (buf.length() > 0)\n                buf.append(\", \");\n            buf.append(\"Forests\");\n        }\n        if (types[3]) {\n            if (buf.length() > 0)\n                buf.append(\", \");\n            buf.append(\"Unknown\");\n        }\n        return buf.toString();\n    }\n\n    public String getTypeString() {\n        return type;\n    }\n\n    public void setTypeString(String type) {\n        this.type = type;\n    }\n\n    public String getSpecies() {\n        return species;\n    }\n\n    public void setSpecies(String species) {\n        this.species = species;\n    }\n\n    public Location getLocation() {\n        return location;\n    }\n\n    public void setLocation(Location location) {\n        this.location = location;\n        // WAS: SiteDB.getSiteDB().fireSiteMoved(this);\n    }\n\n    // BUG: but location is mutable, for performance!  so theoretically\n    // the user could say getLocation().setSomething() and screw this\n    // up ...  oops (fortunately this never happens, i think; at\n    // least, it doesn't show up when grepping for \"getLocation()\" and\n    // \"=\" without \"==\", so it doesn't happen in any 1-line\n    // expression, at least.)\n    // -- SOLUTION: make Mutable and Immutable Location classes.\n    public Integer getAltitude() {\n        return altitude;\n    }\n\n    public void setAltitude(Integer altitude) {\n        this.altitude = altitude;\n    }\n\n    /**\n     *  All samples with a filename starting with this, belong to this\n     * \t site.  This is just a hack, until a new file format, which\n     * \t contains the site explicitly\n     * \t (\"<code>&lt;site&gt;ZKB&lt;/site&gt;</code>\") is in place.\n     */\n    public String getFolder() {\n        return folder;\n    }\n\n    //\n    // Remove G:\\DATA cruft, and silly filename tag in sitedb\n    // Also removes data directory, if anyone else is using corina (??)\n    // TODO: maybe remove this, once sitedbs are updated?\n    public void setFilename(String filename) {\n        String folder = filename;\n        if (filename.startsWith(\"G:\\\\DATA\\\\\")) {\n            folder = filename.substring(8);\n        } else if (filename.startsWith(App.prefs.getPref(\"corina.dir.data\") + File.separator)) {\n            folder = filename.substring(App.prefs.getPref(\"corina.dir.data\").length() + File.separator.length());\n        }\n        // replace forward slashes with a :, which will be our path separator.\n        folder = folder.replace(\"\\\\\", \":\");\n        // do the same for some other platform\n        folder = folder.replace(File.separator, \":\");\n        setFolder(folder);\n    }\n\n    public void setFolder(String folder) {\n        this.folder = folder;\n        // WRITEME: fire event!\n    }\n\n    public String getComments() {\n        return comments;\n    }\n\n    public void setComments(String comments) {\n        this.comments = comments;\n        // WRITEME: fire event!\n    }\n\n    /**\n     *  A pretty-printer for sites.\n     * \t @return the site in human-readable form\n     */\n    public String toString() {\n        StringBuffer result = new StringBuffer();\n        result.append(\"[Site: \");\n        // name, code, id\n        result.append(\"name='\" + name + \"' \");\n        result.append(\"code='\" + code + \"' \");\n        result.append(\"id='\" + id + \"' \");\n        // location, if available\n        if (location != null)\n            result.append(\"location=\" + location + \" \");\n        // return it\n        result.append(\"]\");\n        return result.toString();\n    }\n\n    /*\n\t ok, i officially don't like toString() any more.  it can be\n\t really useful, but i want to have more than one toString() and\n\t choose among them when i use it -- toString() and\n\t toStringWithLocation(), perhaps, and then say add(site :toString\n\t 'toStringWithLocation);\n\t */\n    /**\n     * \t Make an XML String which represents this Site.\n     *\n     * \t @return this Site as an XML String\n     */\n    public String toXML() {\n        String lineSeparator = System.getProperty(\"line.separator\");\n        StringBuffer buf = new StringBuffer(\"   <site>\" + lineSeparator);\n        appendIfNonNull(buf, getCountry(), \"country\", lineSeparator);\n        appendIfNonNull(buf, code, \"code\", lineSeparator);\n        appendIfNonNull(buf, getName(), \"name\", lineSeparator);\n        appendIfNonNull(buf, getId(), \"id\", lineSeparator);\n        appendIfNonNull(buf, species, \"species\", lineSeparator);\n        appendIfNonNull(buf, type, \"type\", lineSeparator);\n        appendIfNonNull(buf, getFolder(), \"folder\", lineSeparator);\n        Location loc = getLocation();\n        if (loc != null)\n            appendIfNonNull(buf, loc.toISO6709(), \"location\", lineSeparator);\n        appendIfNonNull(buf, getComments(), \"comments\", lineSeparator);\n        buf.append(\"   </site>\" + lineSeparator);\n        return buf.toString();\n    }\n\n    // append \"<tag>value</tag>\\n\" to buf if value!=null and value!=\"\"\n    private void appendIfNonNull(StringBuffer buf, Object value, String tag, String lineSeparator) {\n        if (value == null || value.equals(\"\"))\n            return;\n        // escape for XML!! AGH! Yay for no more corrupted site databases.\n        String outvalue = StringUtils.escapeForXML(value.toString());\n        buf.append(\"      <\" + tag + \">\" + outvalue + \"</\" + tag + \">\" + lineSeparator);\n    }\n\n    // make this customizable? -- (use map.Pallette?  no...)\n    // -- use type.contains(\"F\") => green, etc.?  (.indexOf(TYPE_FOREST), really)\n    // RENAME: just getColor() -- but don't rename it until it's been moved\n    // REFACTOR: belongs in SiteRenderer, not here\n    public Color getSiteColor() {\n        // better to hook this into some sort of scheme-chooser.  what for?  color ...\n        // -- by species\n        // -- by country\n        // -- by epoch\n        // and maybe even others i can't think of\n        int x;\n        try {\n            // was: type2\n            x = Integer.parseInt(type);\n        } catch (NumberFormatException nfe) {\n            x = TYPE_UNKNOWN;\n        }\n        switch(x) {\n            case TYPE_FOREST:\n                return FOREST_COLOR;\n            case TYPE_MEDIEVAL:\n                return MEDIEVAL_COLOR;\n            case TYPE_ANCIENT:\n                return ANCIENT_COLOR;\n            default:\n                return UNKNOWN_COLOR;\n        }\n    }\n\n    // temp?  though it may be otherwise useful...\n    public boolean isForest() {\n        return (type.indexOf(\"\" + TYPE_FOREST) != -1);\n    }\n\n    // colors\n    // green\n    private static Color FOREST_COLOR = whiten(new Color(22, 144, 58));\n\n    // red\n    private static Color MEDIEVAL_COLOR = whiten(new Color(196, 28, 28));\n\n    // blue\n    private static Color ANCIENT_COLOR = whiten(new Color(25, 81, 162));\n\n    // gray\n    private static Color UNKNOWN_COLOR = whiten(new Color(128, 128, 128));\n\n    private static Color whiten(Color c) {\n        // WAS: ColorUtils.blend(c, 0.3f, Color.white, 0.7f);\n        return c;\n    }\n\n    // for law of demeter, because 99% of the time you want my\n    // location, you want it for the distance to another site.\n    public int distanceTo(Site s2) {\n        return location.distanceTo(s2.location);\n    }\n\n    //\n    // equals/hashCode\n    //\n    public boolean equals(Object o2) {\n        // WRITEME: compare name,code,id,location,altitude,country,species,type,comments,folder?\n        Site s2 = (Site) o2;\n        return eq(name, s2.name) && eq(code, s2.code) && eq(id, s2.id) && eq(location, s2.location) && eq(altitude, s2.altitude) && eq(country, s2.country) && eq(species, s2.species) && eq(type, s2.type) && eq(comments, s2.comments) && eq(folder, s2.folder);\n    }\n\n    // o1.equals(o2), but valid for null/null as well.\n    // also, null string can equal null for this compare.\n    private boolean eq(Object o1, Object o2) {\n        if (o1 == null && o2 != null)\n            return o2.equals(\"\");\n        if (o2 == null && o1 != null)\n            return o1.equals(\"\");\n        if (o1 == null)\n            return (o2 == null);\n        else\n            return o1.equals(o2);\n    }\n\n    public int hashCode() {\n        int x = 0;\n        x += hash(name) + hash(code) + hash(id);\n        x += hash(location) + hash(altitude) + hash(country);\n        x += hash(species) + hash(type);\n        x += hash(comments);\n        x += hash(folder);\n        return x;\n    }\n\n    // .hashCode(), or 0 if null\n    private int hash(Object o) {\n        return (o == null ? 0 : o.hashCode());\n    }\n\n    // make a duplicate copy of this site.\n    public Object clone() {\n        Site clone = new Site();\n        clone.id = new String(id);\n        clone.code = new String(code);\n        clone.name = new String(name);\n        if (country != null)\n            clone.country = new String(country);\n        clone.type = new String(type);\n        clone.species = new String(species);\n        if (location != null)\n            clone.location = (Location) location.clone();\n        if (altitude != null)\n            clone.altitude = new Integer(altitude);\n        if (folder != null)\n            clone.folder = new String(folder);\n        if (comments != null)\n            clone.comments = new String(comments);\n        return clone;\n    }\n\n    // The 3-digit identification number.\n    private String id = \"\";\n\n    // The 3-letter code.\n    private String code = \"\";\n\n    // Site name\n    private String name = \"\";\n\n    // country\n    private String country = null;\n\n    // Site type\n    private String type = \"\";\n\n    // Species\n    private String species = \"\";\n\n    // The location (latitude, longitude).\n    private Location location = null;\n\n    // Null means no location entered by user (yet).\n    // The altitude, in meters.\n    private Integer altitude = null;\n\n    // The folder path which contains the file\n    private String folder = null;\n\n    // Site comments\n    private String comments = null;\n}\n",
		"id": "/EvoSuiteBenchmark/35_corina/src/main/java/corina/site/Site_3Test.java",
		"test_prompt": "// Site_3Test.java\n// This file is part of Corina.\n//\n// Corina is free software; you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation; either version 2 of the License, or\n// (at your option) any later version.\n//\n// Corina is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Corina; if not, write to the Free Software\n// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n//\n// Copyright 2001 Ken Harris <kbh7@cornell.edu>\n//\npackage corina.site;\n\nimport corina.core.App;\nimport corina.util.ColorUtils;\nimport corina.util.StringUtils;\nimport java.awt.Color;\nimport java.awt.Graphics2D;\nimport java.io.File;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link Site}.\n* It contains ten unit test cases for the {@link Site#equals(Object)} method.\n*/\nclass Site_3Test {"
	},
	{
		"original_code": "// Site.java\n//\n// This file is part of Corina.\n//\n// Corina is free software; you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation; either version 2 of the License, or\n// (at your option) any later version.\n//\n// Corina is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Corina; if not, write to the Free Software\n// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n//\n// Copyright 2001 Ken Harris <kbh7@cornell.edu>\n//\npackage corina.site;\n\nimport corina.core.App;\nimport corina.util.ColorUtils;\nimport corina.util.StringUtils;\nimport java.awt.Color;\nimport java.awt.Graphics2D;\nimport java.io.File;\n\n/*\n  todo:\n  -- add string i/o (of xml tags)\n  -- encapsulate members better\n -- javadoc!\n\n  -- implement toString(), so i can see what's going on!\n*/\n/**\n *   Site object, which holds name/ID information, location, and\n *   other assorted data.  For example, lists of masters and non-fits.\n *\n *   @author Ken Harris &lt;kbh7 <i style=\"color: gray\">at</i> cornell <i style=\"color: gray\">dot</i> edu&gt;\n *   @version $Id: Site.java,v 1.7 2006/06/12 22:14:05 lucasmo Exp $\n */\npublic class Site implements Cloneable {\n\n    public String getId() {\n        return id;\n    }\n\n    public void setId(String id) {\n        this.id = id;\n        // WAS: SiteDB.getSiteDB().fireSiteIDChanged(this);\n    }\n\n    public String getCode() {\n        return code;\n    }\n\n    public void setCode(String code) {\n        this.code = code;\n        // WAS: SiteDB.getSiteDB().fireSiteCodeChanged(this);\n    }\n\n    public String getName() {\n        return name;\n    }\n\n    public void setName(String name) {\n        this.name = name;\n        // WAS: SiteDB.getSiteDB().fireSiteNameChanged(this);\n    }\n\n    public String getCountry() {\n        return country;\n    }\n\n    public void setCountry(String country) {\n        this.country = country;\n        // WAS: SiteDB.getSiteDB().fireSiteCountryChanged(this);\n    }\n\n    // the type: FOREST(1), MEDIEVAL(2), ANCIENT(3), or UNKNOWN(4->0)\n    // => make bitfield?\n    public final static int TYPE_UNKNOWN = 0;\n\n    public final static int TYPE_FOREST = 1;\n\n    public final static int TYPE_MEDIEVAL = 2;\n\n    public final static int TYPE_ANCIENT = 3;\n\n    //    public int type=TYPE_UNKNOWN;\n    // eh? what is this?\n    //public String type2 = \"\"; // a string, like \"AU\" (=ancient+unknown)\n    // 10-may-2003: what i want:\n    // in xml:\n    //   <types>ancient,forest</types> (empty string = none = same as no tag)\n    // as getter:\n    //   bool[4] getTypes()??\n    // as setter:\n    //   void setTypes(bool[4])??\n    // as data structure:\n    //   bool[4]\n    // migration strategy:\n    //   add methods; make old types private; convert to new methods\n    // what's on disk now:\n    //   \"2\", or \"1,3\".  (but trivial to convert -- or, just accept either)\n    public boolean[] getTypes() {\n        // this is the new api i want.  in the future, i'll just say:\n        /*\n\t\t int n = this.types.length;\n\t\t boolean types[] = new boolean[n];\n\t\t for (int i=0; i<n; i++)\n\t\t types[i] = this.types[i]; // -- can i just clone() it, even?\n\t\t return types;\n\t\t */\n        // but for now, i've got the old \"type=2,3\" legacy crap.\n        // oh well, i'll just write a simple adapter.\n        boolean[] types = new boolean[4];\n        for (int i = 0; i < type.length(); i++) {\n            char c = type.charAt(i);\n            if (c == '0' || c == '4')\n                types[3] = true;\n            if (c == '3')\n                types[0] = true;\n            if (c == '2')\n                types[1] = true;\n            if (c == '1')\n                types[2] = true;\n        }\n        // note: the old way had 0=unkn,1=for,2=med,3=anc;\n        // the new way is bool[] { anc, med, for, unkn }\n        return types;\n    }\n\n    public void setTypes(boolean[] types) {\n        // new api, legacy backing.  see getTypes().\n        // future:\n        /*\n\t\t int n = this.types.length;\n\t\t for (int i=0; i<n; i++)\n\t\t this.types[i] = types[i]; // -- can i just copy it, even?\n\t\t */\n        String type = \"\";\n        if (types[0])\n            type += \"3\";\n        if (types[1])\n            type += \"2\";\n        if (types[2])\n            type += \"1\";\n        if (types[3])\n            type += \"4\";\n        this.type = type;\n    }\n\n    // e.g., [t,t,f,f] => \"Ancient, Medieval\"\n    public String getTypesAsString() {\n        // future: types will be native.  until then, just call getTypes().\n        boolean[] types = getTypes();\n        StringBuffer buf = new StringBuffer();\n        if (types[0])\n            // FIXME: i18n!\n            buf.append(\"Ancient\");\n        if (types[1]) {\n            if (buf.length() > 0)\n                buf.append(\", \");\n            buf.append(\"Medieval\");\n        }\n        if (types[2]) {\n            if (buf.length() > 0)\n                buf.append(\", \");\n            buf.append(\"Forests\");\n        }\n        if (types[3]) {\n            if (buf.length() > 0)\n                buf.append(\", \");\n            buf.append(\"Unknown\");\n        }\n        return buf.toString();\n    }\n\n    public String getTypeString() {\n        return type;\n    }\n\n    public void setTypeString(String type) {\n        this.type = type;\n    }\n\n    public String getSpecies() {\n        return species;\n    }\n\n    public void setSpecies(String species) {\n        this.species = species;\n    }\n\n    public Location getLocation() {\n        return location;\n    }\n\n    public void setLocation(Location location) {\n        this.location = location;\n        // WAS: SiteDB.getSiteDB().fireSiteMoved(this);\n    }\n\n    // BUG: but location is mutable, for performance!  so theoretically\n    // the user could say getLocation().setSomething() and screw this\n    // up ...  oops (fortunately this never happens, i think; at\n    // least, it doesn't show up when grepping for \"getLocation()\" and\n    // \"=\" without \"==\", so it doesn't happen in any 1-line\n    // expression, at least.)\n    // -- SOLUTION: make Mutable and Immutable Location classes.\n    public Integer getAltitude() {\n        return altitude;\n    }\n\n    public void setAltitude(Integer altitude) {\n        this.altitude = altitude;\n    }\n\n    /**\n     *  All samples with a filename starting with this, belong to this\n     * \t site.  This is just a hack, until a new file format, which\n     * \t contains the site explicitly\n     * \t (\"<code>&lt;site&gt;ZKB&lt;/site&gt;</code>\") is in place.\n     */\n    public String getFolder() {\n        return folder;\n    }\n\n    //\n    // Remove G:\\DATA cruft, and silly filename tag in sitedb\n    // Also removes data directory, if anyone else is using corina (??)\n    // TODO: maybe remove this, once sitedbs are updated?\n    public void setFilename(String filename) {\n        String folder = filename;\n        if (filename.startsWith(\"G:\\\\DATA\\\\\")) {\n            folder = filename.substring(8);\n        } else if (filename.startsWith(App.prefs.getPref(\"corina.dir.data\") + File.separator)) {\n            folder = filename.substring(App.prefs.getPref(\"corina.dir.data\").length() + File.separator.length());\n        }\n        // replace forward slashes with a :, which will be our path separator.\n        folder = folder.replace(\"\\\\\", \":\");\n        // do the same for some other platform\n        folder = folder.replace(File.separator, \":\");\n        setFolder(folder);\n    }\n\n    public void setFolder(String folder) {\n        this.folder = folder;\n        // WRITEME: fire event!\n    }\n\n    public String getComments() {\n        return comments;\n    }\n\n    public void setComments(String comments) {\n        this.comments = comments;\n        // WRITEME: fire event!\n    }\n\n    /**\n     *  A pretty-printer for sites.\n     * \t @return the site in human-readable form\n     */\n    public String toString() {\n        StringBuffer result = new StringBuffer();\n        result.append(\"[Site: \");\n        // name, code, id\n        result.append(\"name='\" + name + \"' \");\n        result.append(\"code='\" + code + \"' \");\n        result.append(\"id='\" + id + \"' \");\n        // location, if available\n        if (location != null)\n            result.append(\"location=\" + location + \" \");\n        // return it\n        result.append(\"]\");\n        return result.toString();\n    }\n\n    /*\n\t ok, i officially don't like toString() any more.  it can be\n\t really useful, but i want to have more than one toString() and\n\t choose among them when i use it -- toString() and\n\t toStringWithLocation(), perhaps, and then say add(site :toString\n\t 'toStringWithLocation);\n\t */\n    /**\n     * \t Make an XML String which represents this Site.\n     *\n     * \t @return this Site as an XML String\n     */\n    public String toXML() {\n        String lineSeparator = System.getProperty(\"line.separator\");\n        StringBuffer buf = new StringBuffer(\"   <site>\" + lineSeparator);\n        appendIfNonNull(buf, getCountry(), \"country\", lineSeparator);\n        appendIfNonNull(buf, code, \"code\", lineSeparator);\n        appendIfNonNull(buf, getName(), \"name\", lineSeparator);\n        appendIfNonNull(buf, getId(), \"id\", lineSeparator);\n        appendIfNonNull(buf, species, \"species\", lineSeparator);\n        appendIfNonNull(buf, type, \"type\", lineSeparator);\n        appendIfNonNull(buf, getFolder(), \"folder\", lineSeparator);\n        Location loc = getLocation();\n        if (loc != null)\n            appendIfNonNull(buf, loc.toISO6709(), \"location\", lineSeparator);\n        appendIfNonNull(buf, getComments(), \"comments\", lineSeparator);\n        buf.append(\"   </site>\" + lineSeparator);\n        return buf.toString();\n    }\n\n    // append \"<tag>value</tag>\\n\" to buf if value!=null and value!=\"\"\n    private void appendIfNonNull(StringBuffer buf, Object value, String tag, String lineSeparator) {\n        if (value == null || value.equals(\"\"))\n            return;\n        // escape for XML!! AGH! Yay for no more corrupted site databases.\n        String outvalue = StringUtils.escapeForXML(value.toString());\n        buf.append(\"      <\" + tag + \">\" + outvalue + \"</\" + tag + \">\" + lineSeparator);\n    }\n\n    // make this customizable? -- (use map.Pallette?  no...)\n    // -- use type.contains(\"F\") => green, etc.?  (.indexOf(TYPE_FOREST), really)\n    // RENAME: just getColor() -- but don't rename it until it's been moved\n    // REFACTOR: belongs in SiteRenderer, not here\n    public Color getSiteColor() {\n        // better to hook this into some sort of scheme-chooser.  what for?  color ...\n        // -- by species\n        // -- by country\n        // -- by epoch\n        // and maybe even others i can't think of\n        int x;\n        try {\n            // was: type2\n            x = Integer.parseInt(type);\n        } catch (NumberFormatException nfe) {\n            x = TYPE_UNKNOWN;\n        }\n        switch(x) {\n            case TYPE_FOREST:\n                return FOREST_COLOR;\n            case TYPE_MEDIEVAL:\n                return MEDIEVAL_COLOR;\n            case TYPE_ANCIENT:\n                return ANCIENT_COLOR;\n            default:\n                return UNKNOWN_COLOR;\n        }\n    }\n\n    // temp?  though it may be otherwise useful...\n    public boolean isForest() {\n        return (type.indexOf(\"\" + TYPE_FOREST) != -1);\n    }\n\n    // colors\n    // green\n    private static Color FOREST_COLOR = whiten(new Color(22, 144, 58));\n\n    // red\n    private static Color MEDIEVAL_COLOR = whiten(new Color(196, 28, 28));\n\n    // blue\n    private static Color ANCIENT_COLOR = whiten(new Color(25, 81, 162));\n\n    // gray\n    private static Color UNKNOWN_COLOR = whiten(new Color(128, 128, 128));\n\n    private static Color whiten(Color c) {\n        // WAS: ColorUtils.blend(c, 0.3f, Color.white, 0.7f);\n        return c;\n    }\n\n    // for law of demeter, because 99% of the time you want my\n    // location, you want it for the distance to another site.\n    public int distanceTo(Site s2) {\n        return location.distanceTo(s2.location);\n    }\n\n    //\n    // equals/hashCode\n    //\n    public boolean equals(Object o2) {\n        // WRITEME: compare name,code,id,location,altitude,country,species,type,comments,folder?\n        Site s2 = (Site) o2;\n        return eq(name, s2.name) && eq(code, s2.code) && eq(id, s2.id) && eq(location, s2.location) && eq(altitude, s2.altitude) && eq(country, s2.country) && eq(species, s2.species) && eq(type, s2.type) && eq(comments, s2.comments) && eq(folder, s2.folder);\n    }\n\n    // o1.equals(o2), but valid for null/null as well.\n    // also, null string can equal null for this compare.\n    private boolean eq(Object o1, Object o2) {\n        if (o1 == null && o2 != null)\n            return o2.equals(\"\");\n        if (o2 == null && o1 != null)\n            return o1.equals(\"\");\n        if (o1 == null)\n            return (o2 == null);\n        else\n            return o1.equals(o2);\n    }\n\n    public int hashCode() {\n        int x = 0;\n        x += hash(name) + hash(code) + hash(id);\n        x += hash(location) + hash(altitude) + hash(country);\n        x += hash(species) + hash(type);\n        x += hash(comments);\n        x += hash(folder);\n        return x;\n    }\n\n    // .hashCode(), or 0 if null\n    private int hash(Object o) {\n        return (o == null ? 0 : o.hashCode());\n    }\n\n    // make a duplicate copy of this site.\n    public Object clone() {\n        Site clone = new Site();\n        clone.id = new String(id);\n        clone.code = new String(code);\n        clone.name = new String(name);\n        if (country != null)\n            clone.country = new String(country);\n        clone.type = new String(type);\n        clone.species = new String(species);\n        if (location != null)\n            clone.location = (Location) location.clone();\n        if (altitude != null)\n            clone.altitude = new Integer(altitude);\n        if (folder != null)\n            clone.folder = new String(folder);\n        if (comments != null)\n            clone.comments = new String(comments);\n        return clone;\n    }\n\n    // The 3-digit identification number.\n    private String id = \"\";\n\n    // The 3-letter code.\n    private String code = \"\";\n\n    // Site name\n    private String name = \"\";\n\n    // country\n    private String country = null;\n\n    // Site type\n    private String type = \"\";\n\n    // Species\n    private String species = \"\";\n\n    // The location (latitude, longitude).\n    private Location location = null;\n\n    // Null means no location entered by user (yet).\n    // The altitude, in meters.\n    private Integer altitude = null;\n\n    // The folder path which contains the file\n    private String folder = null;\n\n    // Site comments\n    private String comments = null;\n}\n",
		"id": "/EvoSuiteBenchmark/35_corina/src/main/java/corina/site/Site_4Test.java",
		"test_prompt": "// Site_4Test.java\n// This file is part of Corina.\n//\n// Corina is free software; you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation; either version 2 of the License, or\n// (at your option) any later version.\n//\n// Corina is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Corina; if not, write to the Free Software\n// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n//\n// Copyright 2001 Ken Harris <kbh7@cornell.edu>\n//\npackage corina.site;\n\nimport corina.core.App;\nimport corina.util.ColorUtils;\nimport corina.util.StringUtils;\nimport java.awt.Color;\nimport java.awt.Graphics2D;\nimport java.io.File;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link Site}.\n* It contains ten unit test cases for the {@link Site#hashCode()} method.\n*/\nclass Site_4Test {"
	},
	{
		"original_code": "// Site.java\n//\n// This file is part of Corina.\n//\n// Corina is free software; you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation; either version 2 of the License, or\n// (at your option) any later version.\n//\n// Corina is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Corina; if not, write to the Free Software\n// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n//\n// Copyright 2001 Ken Harris <kbh7@cornell.edu>\n//\npackage corina.site;\n\nimport corina.core.App;\nimport corina.util.ColorUtils;\nimport corina.util.StringUtils;\nimport java.awt.Color;\nimport java.awt.Graphics2D;\nimport java.io.File;\n\n/*\n  todo:\n  -- add string i/o (of xml tags)\n  -- encapsulate members better\n -- javadoc!\n\n  -- implement toString(), so i can see what's going on!\n*/\n/**\n *   Site object, which holds name/ID information, location, and\n *   other assorted data.  For example, lists of masters and non-fits.\n *\n *   @author Ken Harris &lt;kbh7 <i style=\"color: gray\">at</i> cornell <i style=\"color: gray\">dot</i> edu&gt;\n *   @version $Id: Site.java,v 1.7 2006/06/12 22:14:05 lucasmo Exp $\n */\npublic class Site implements Cloneable {\n\n    public String getId() {\n        return id;\n    }\n\n    public void setId(String id) {\n        this.id = id;\n        // WAS: SiteDB.getSiteDB().fireSiteIDChanged(this);\n    }\n\n    public String getCode() {\n        return code;\n    }\n\n    public void setCode(String code) {\n        this.code = code;\n        // WAS: SiteDB.getSiteDB().fireSiteCodeChanged(this);\n    }\n\n    public String getName() {\n        return name;\n    }\n\n    public void setName(String name) {\n        this.name = name;\n        // WAS: SiteDB.getSiteDB().fireSiteNameChanged(this);\n    }\n\n    public String getCountry() {\n        return country;\n    }\n\n    public void setCountry(String country) {\n        this.country = country;\n        // WAS: SiteDB.getSiteDB().fireSiteCountryChanged(this);\n    }\n\n    // the type: FOREST(1), MEDIEVAL(2), ANCIENT(3), or UNKNOWN(4->0)\n    // => make bitfield?\n    public final static int TYPE_UNKNOWN = 0;\n\n    public final static int TYPE_FOREST = 1;\n\n    public final static int TYPE_MEDIEVAL = 2;\n\n    public final static int TYPE_ANCIENT = 3;\n\n    //    public int type=TYPE_UNKNOWN;\n    // eh? what is this?\n    //public String type2 = \"\"; // a string, like \"AU\" (=ancient+unknown)\n    // 10-may-2003: what i want:\n    // in xml:\n    //   <types>ancient,forest</types> (empty string = none = same as no tag)\n    // as getter:\n    //   bool[4] getTypes()??\n    // as setter:\n    //   void setTypes(bool[4])??\n    // as data structure:\n    //   bool[4]\n    // migration strategy:\n    //   add methods; make old types private; convert to new methods\n    // what's on disk now:\n    //   \"2\", or \"1,3\".  (but trivial to convert -- or, just accept either)\n    public boolean[] getTypes() {\n        // this is the new api i want.  in the future, i'll just say:\n        /*\n\t\t int n = this.types.length;\n\t\t boolean types[] = new boolean[n];\n\t\t for (int i=0; i<n; i++)\n\t\t types[i] = this.types[i]; // -- can i just clone() it, even?\n\t\t return types;\n\t\t */\n        // but for now, i've got the old \"type=2,3\" legacy crap.\n        // oh well, i'll just write a simple adapter.\n        boolean[] types = new boolean[4];\n        for (int i = 0; i < type.length(); i++) {\n            char c = type.charAt(i);\n            if (c == '0' || c == '4')\n                types[3] = true;\n            if (c == '3')\n                types[0] = true;\n            if (c == '2')\n                types[1] = true;\n            if (c == '1')\n                types[2] = true;\n        }\n        // note: the old way had 0=unkn,1=for,2=med,3=anc;\n        // the new way is bool[] { anc, med, for, unkn }\n        return types;\n    }\n\n    public void setTypes(boolean[] types) {\n        // new api, legacy backing.  see getTypes().\n        // future:\n        /*\n\t\t int n = this.types.length;\n\t\t for (int i=0; i<n; i++)\n\t\t this.types[i] = types[i]; // -- can i just copy it, even?\n\t\t */\n        String type = \"\";\n        if (types[0])\n            type += \"3\";\n        if (types[1])\n            type += \"2\";\n        if (types[2])\n            type += \"1\";\n        if (types[3])\n            type += \"4\";\n        this.type = type;\n    }\n\n    // e.g., [t,t,f,f] => \"Ancient, Medieval\"\n    public String getTypesAsString() {\n        // future: types will be native.  until then, just call getTypes().\n        boolean[] types = getTypes();\n        StringBuffer buf = new StringBuffer();\n        if (types[0])\n            // FIXME: i18n!\n            buf.append(\"Ancient\");\n        if (types[1]) {\n            if (buf.length() > 0)\n                buf.append(\", \");\n            buf.append(\"Medieval\");\n        }\n        if (types[2]) {\n            if (buf.length() > 0)\n                buf.append(\", \");\n            buf.append(\"Forests\");\n        }\n        if (types[3]) {\n            if (buf.length() > 0)\n                buf.append(\", \");\n            buf.append(\"Unknown\");\n        }\n        return buf.toString();\n    }\n\n    public String getTypeString() {\n        return type;\n    }\n\n    public void setTypeString(String type) {\n        this.type = type;\n    }\n\n    public String getSpecies() {\n        return species;\n    }\n\n    public void setSpecies(String species) {\n        this.species = species;\n    }\n\n    public Location getLocation() {\n        return location;\n    }\n\n    public void setLocation(Location location) {\n        this.location = location;\n        // WAS: SiteDB.getSiteDB().fireSiteMoved(this);\n    }\n\n    // BUG: but location is mutable, for performance!  so theoretically\n    // the user could say getLocation().setSomething() and screw this\n    // up ...  oops (fortunately this never happens, i think; at\n    // least, it doesn't show up when grepping for \"getLocation()\" and\n    // \"=\" without \"==\", so it doesn't happen in any 1-line\n    // expression, at least.)\n    // -- SOLUTION: make Mutable and Immutable Location classes.\n    public Integer getAltitude() {\n        return altitude;\n    }\n\n    public void setAltitude(Integer altitude) {\n        this.altitude = altitude;\n    }\n\n    /**\n     *  All samples with a filename starting with this, belong to this\n     * \t site.  This is just a hack, until a new file format, which\n     * \t contains the site explicitly\n     * \t (\"<code>&lt;site&gt;ZKB&lt;/site&gt;</code>\") is in place.\n     */\n    public String getFolder() {\n        return folder;\n    }\n\n    //\n    // Remove G:\\DATA cruft, and silly filename tag in sitedb\n    // Also removes data directory, if anyone else is using corina (??)\n    // TODO: maybe remove this, once sitedbs are updated?\n    public void setFilename(String filename) {\n        String folder = filename;\n        if (filename.startsWith(\"G:\\\\DATA\\\\\")) {\n            folder = filename.substring(8);\n        } else if (filename.startsWith(App.prefs.getPref(\"corina.dir.data\") + File.separator)) {\n            folder = filename.substring(App.prefs.getPref(\"corina.dir.data\").length() + File.separator.length());\n        }\n        // replace forward slashes with a :, which will be our path separator.\n        folder = folder.replace(\"\\\\\", \":\");\n        // do the same for some other platform\n        folder = folder.replace(File.separator, \":\");\n        setFolder(folder);\n    }\n\n    public void setFolder(String folder) {\n        this.folder = folder;\n        // WRITEME: fire event!\n    }\n\n    public String getComments() {\n        return comments;\n    }\n\n    public void setComments(String comments) {\n        this.comments = comments;\n        // WRITEME: fire event!\n    }\n\n    /**\n     *  A pretty-printer for sites.\n     * \t @return the site in human-readable form\n     */\n    public String toString() {\n        StringBuffer result = new StringBuffer();\n        result.append(\"[Site: \");\n        // name, code, id\n        result.append(\"name='\" + name + \"' \");\n        result.append(\"code='\" + code + \"' \");\n        result.append(\"id='\" + id + \"' \");\n        // location, if available\n        if (location != null)\n            result.append(\"location=\" + location + \" \");\n        // return it\n        result.append(\"]\");\n        return result.toString();\n    }\n\n    /*\n\t ok, i officially don't like toString() any more.  it can be\n\t really useful, but i want to have more than one toString() and\n\t choose among them when i use it -- toString() and\n\t toStringWithLocation(), perhaps, and then say add(site :toString\n\t 'toStringWithLocation);\n\t */\n    /**\n     * \t Make an XML String which represents this Site.\n     *\n     * \t @return this Site as an XML String\n     */\n    public String toXML() {\n        String lineSeparator = System.getProperty(\"line.separator\");\n        StringBuffer buf = new StringBuffer(\"   <site>\" + lineSeparator);\n        appendIfNonNull(buf, getCountry(), \"country\", lineSeparator);\n        appendIfNonNull(buf, code, \"code\", lineSeparator);\n        appendIfNonNull(buf, getName(), \"name\", lineSeparator);\n        appendIfNonNull(buf, getId(), \"id\", lineSeparator);\n        appendIfNonNull(buf, species, \"species\", lineSeparator);\n        appendIfNonNull(buf, type, \"type\", lineSeparator);\n        appendIfNonNull(buf, getFolder(), \"folder\", lineSeparator);\n        Location loc = getLocation();\n        if (loc != null)\n            appendIfNonNull(buf, loc.toISO6709(), \"location\", lineSeparator);\n        appendIfNonNull(buf, getComments(), \"comments\", lineSeparator);\n        buf.append(\"   </site>\" + lineSeparator);\n        return buf.toString();\n    }\n\n    // append \"<tag>value</tag>\\n\" to buf if value!=null and value!=\"\"\n    private void appendIfNonNull(StringBuffer buf, Object value, String tag, String lineSeparator) {\n        if (value == null || value.equals(\"\"))\n            return;\n        // escape for XML!! AGH! Yay for no more corrupted site databases.\n        String outvalue = StringUtils.escapeForXML(value.toString());\n        buf.append(\"      <\" + tag + \">\" + outvalue + \"</\" + tag + \">\" + lineSeparator);\n    }\n\n    // make this customizable? -- (use map.Pallette?  no...)\n    // -- use type.contains(\"F\") => green, etc.?  (.indexOf(TYPE_FOREST), really)\n    // RENAME: just getColor() -- but don't rename it until it's been moved\n    // REFACTOR: belongs in SiteRenderer, not here\n    public Color getSiteColor() {\n        // better to hook this into some sort of scheme-chooser.  what for?  color ...\n        // -- by species\n        // -- by country\n        // -- by epoch\n        // and maybe even others i can't think of\n        int x;\n        try {\n            // was: type2\n            x = Integer.parseInt(type);\n        } catch (NumberFormatException nfe) {\n            x = TYPE_UNKNOWN;\n        }\n        switch(x) {\n            case TYPE_FOREST:\n                return FOREST_COLOR;\n            case TYPE_MEDIEVAL:\n                return MEDIEVAL_COLOR;\n            case TYPE_ANCIENT:\n                return ANCIENT_COLOR;\n            default:\n                return UNKNOWN_COLOR;\n        }\n    }\n\n    // temp?  though it may be otherwise useful...\n    public boolean isForest() {\n        return (type.indexOf(\"\" + TYPE_FOREST) != -1);\n    }\n\n    // colors\n    // green\n    private static Color FOREST_COLOR = whiten(new Color(22, 144, 58));\n\n    // red\n    private static Color MEDIEVAL_COLOR = whiten(new Color(196, 28, 28));\n\n    // blue\n    private static Color ANCIENT_COLOR = whiten(new Color(25, 81, 162));\n\n    // gray\n    private static Color UNKNOWN_COLOR = whiten(new Color(128, 128, 128));\n\n    private static Color whiten(Color c) {\n        // WAS: ColorUtils.blend(c, 0.3f, Color.white, 0.7f);\n        return c;\n    }\n\n    // for law of demeter, because 99% of the time you want my\n    // location, you want it for the distance to another site.\n    public int distanceTo(Site s2) {\n        return location.distanceTo(s2.location);\n    }\n\n    //\n    // equals/hashCode\n    //\n    public boolean equals(Object o2) {\n        // WRITEME: compare name,code,id,location,altitude,country,species,type,comments,folder?\n        Site s2 = (Site) o2;\n        return eq(name, s2.name) && eq(code, s2.code) && eq(id, s2.id) && eq(location, s2.location) && eq(altitude, s2.altitude) && eq(country, s2.country) && eq(species, s2.species) && eq(type, s2.type) && eq(comments, s2.comments) && eq(folder, s2.folder);\n    }\n\n    // o1.equals(o2), but valid for null/null as well.\n    // also, null string can equal null for this compare.\n    private boolean eq(Object o1, Object o2) {\n        if (o1 == null && o2 != null)\n            return o2.equals(\"\");\n        if (o2 == null && o1 != null)\n            return o1.equals(\"\");\n        if (o1 == null)\n            return (o2 == null);\n        else\n            return o1.equals(o2);\n    }\n\n    public int hashCode() {\n        int x = 0;\n        x += hash(name) + hash(code) + hash(id);\n        x += hash(location) + hash(altitude) + hash(country);\n        x += hash(species) + hash(type);\n        x += hash(comments);\n        x += hash(folder);\n        return x;\n    }\n\n    // .hashCode(), or 0 if null\n    private int hash(Object o) {\n        return (o == null ? 0 : o.hashCode());\n    }\n\n    // make a duplicate copy of this site.\n    public Object clone() {\n        Site clone = new Site();\n        clone.id = new String(id);\n        clone.code = new String(code);\n        clone.name = new String(name);\n        if (country != null)\n            clone.country = new String(country);\n        clone.type = new String(type);\n        clone.species = new String(species);\n        if (location != null)\n            clone.location = (Location) location.clone();\n        if (altitude != null)\n            clone.altitude = new Integer(altitude);\n        if (folder != null)\n            clone.folder = new String(folder);\n        if (comments != null)\n            clone.comments = new String(comments);\n        return clone;\n    }\n\n    // The 3-digit identification number.\n    private String id = \"\";\n\n    // The 3-letter code.\n    private String code = \"\";\n\n    // Site name\n    private String name = \"\";\n\n    // country\n    private String country = null;\n\n    // Site type\n    private String type = \"\";\n\n    // Species\n    private String species = \"\";\n\n    // The location (latitude, longitude).\n    private Location location = null;\n\n    // Null means no location entered by user (yet).\n    // The altitude, in meters.\n    private Integer altitude = null;\n\n    // The folder path which contains the file\n    private String folder = null;\n\n    // Site comments\n    private String comments = null;\n}\n",
		"id": "/EvoSuiteBenchmark/35_corina/src/main/java/corina/site/Site_5Test.java",
		"test_prompt": "// Site_5Test.java\n// This file is part of Corina.\n//\n// Corina is free software; you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation; either version 2 of the License, or\n// (at your option) any later version.\n//\n// Corina is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Corina; if not, write to the Free Software\n// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n//\n// Copyright 2001 Ken Harris <kbh7@cornell.edu>\n//\npackage corina.site;\n\nimport corina.core.App;\nimport corina.util.ColorUtils;\nimport corina.util.StringUtils;\nimport java.awt.Color;\nimport java.awt.Graphics2D;\nimport java.io.File;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link Site}.\n* It contains ten unit test cases for the {@link Site#clone()} method.\n*/\nclass Site_5Test {"
	},
	{
		"original_code": "// Schema.java\npackage corina.db;\n\nimport java.sql.*;\n\n/**\n *    Schema tools for Corina databases.\n *\n *    This class is only responsible for creating, verifying, and\n *    destroying Corina databases.  All of the data access, like how to\n *    put a Sample into the database, is in the class DB.\n *\n *    <h2>Database Schema</h2>\n *\n *    <p>Samples are stored in the RDBMS in 3 tables: data, metadata, and\n *    elements.  Range is stored as metadata fields.  Non-data numeric\n *    data (count, incr, decr) are stored in the data table, with a\n *    different type code.</p>\n *\n *    <blockquote>In the future, there will be 2 more tables to round it\n *    out: sites, and history.  The sites table will hold all of the\n *    sites: site ID, country, 3-letter code, 3-digit code, full name,\n *    species present (use more tables for multiple species?), type\n *    (ancient, forest, etc.), and location (latitude/longitude).  The\n *    history table will hold a list of all operations performed on the\n *    table: history ID, time/date, user, sample ID, and operation.  For\n *    example, [4893782, 7 June 2003 2:02pm, Ken Harris, 123981, Inserted\n *    MR at 1002].  Initially, this will be used purely as a log of\n *    who-did-what.  (Imagine asking for \"all of the samples that Joe\n *    reconciled\", or \"everything Joe did last week\".  -- I might need to\n *    standardize the \"operation type\" column a bit more, or add another\n *    column.)  Later, it may be used to selectively undo certain\n *    operations.</blockquote>\n *\n *    <p>Corina databases can also store Sites.  These are stored in a\n *    table called \"sites\".</p>\n *\n *    <p>Corina doesn't create any explicit indexes.  Corina creates\n *    PRIMARY KEYs as needed, so no indexes are needed.  (sid on metadata\n *    and elements, and (sid,type,decade) on data.)</p>\n *\n *    <h2>Data</h2>\n *\n *    <p>The table is called \"data\".  It holds all decadal numeric data\n *    for samples.  The data is split up into decades, and each decade is\n *    stored in one row of the table.  If there's more than one type of\n *    decadal data (like ring width, number of samples,\n *    number-increasing, and number-decreasing), there are multiple rows\n *    for that decade, with different \"type\" values.</p>\n *\n *    <table align=\"center\" border=\"1\" cellspacing=\"0\">\n *      <tr><th>Field</th>  <th>Type</th> <th>Description</th></tr>\n *      <tr><td>sid</td>    <td>INT</td>  <td>sample ID</td></tr>\n *      <tr><td>decade</td> <td>INT</td>  <td>which decade this is</td></tr>\n *      <tr><td>type</td>   <td>CHAR</td> <td>type of decadal data</td></tr>\n *      <tr><td>d0</td> <td>INT</td> <td>value for year 1 of this decade</td></tr>\n *      <tr><td>d1</td> <td>INT</td> <td>value for year 2 of this decade</td></tr>\n *      <tr><td>d2</td> <td>INT</td> <td>value for year 3 of this decade</td></tr>\n *      <tr><td>d3</td> <td>INT</td> <td>value for year 4 of this decade</td></tr>\n *      <tr><td>d4</td> <td>INT</td> <td>value for year 5 of this decade</td></tr>\n *      <tr><td>d5</td> <td>INT</td> <td>value for year 6 of this decade</td></tr>\n *      <tr><td>d6</td> <td>INT</td> <td>value for year 7 of this decade</td></tr>\n *      <tr><td>d7</td> <td>INT</td> <td>value for year 8 of this decade</td></tr>\n *      <tr><td>d8</td> <td>INT</td> <td>value for year 9 of this decade</td></tr>\n *      <tr><td>d9</td> <td>INT</td> <td>value for year 10 of this decade</td></tr>\n *    </table>\n *\n *    <p>The types of data are 'W' (data - \"width\"), 'C' (count), 'I'\n *    (increments), and 'D' (decrements).</p>\n *\n *    <p>If there's no value for a year, that field's value is NULL.\n *    This happens at the beginning of a row if the sample doesn't start\n *    on a decade, at the end of a row if the sample doesn't end on a\n *    decade, and at d0 for the year \"zero\".</p>\n *\n *    <h2>Metadata</h2>\n *\n * \t  -- \"end\" is reserved in SQL, so we use \"start\" and \"stop\"\n * \t  for the range.)\n *\n * \t  -- why is \"id\" not UNIQUE?  because for cornell's data, the\n * \t  ID field never was unique.\n *\n * \t  -- on some databases, VARCHAR (used for comments) size is\n * \t  rather small.  oracle: 4000; ms sql server: you don't even\n * \t  want to know...  postgresql: rumor mill says at least\n * \t  100-200K (!).  mysql: 255.\n *\n *    <table align=\"center\" border=\"1\" cellspacing=\"0\">\n *      <tr><th>Field</th>       <th>Type</th>    <th>Description</th></tr>\n *\n *      <tr><td>sid</td>         <td>INT</td>     <td>sample ID</td></tr>\n *\n *      <tr><td>start</td>       <td>INT</td>     <td rowspan=\"3\">range</td></tr>\n *      <tr><td>stop</td>        <td>INT</td>     </tr>\n *      <tr><td>span</td>        <td>INT</td>     </tr>\n *\n *      <tr><td>site</td>        <td>VARCHAR</td> <td>site</td></tr>\n *\n *      <tr><td>id</td>          <td>VARCHAR</td> <td rowspan=\"17\">metadata</td></tr>\n *      <tr><td>title</td>       <td>VARCHAR</td> </tr>\n *      <tr><td>dating</td>      <td>CHAR</td>    </tr>\n *      <tr><td>unmeas_pre</td>  <td>INT</td>     </tr>\n *      <tr><td>unmeas_post</td> <td>INT</td>     </tr>\n *      <tr><td>type</td>        <td>CHAR</td>    </tr>\n *      <tr><td>species</td>     <td>VARCHAR</td> </tr>\n *      <tr><td>format</td>      <td>CHAR</td>    </tr>\n *      <tr><td>index_type</td>  <td>INT</td>     </tr>\n *      <tr><td>sapwood</td>     <td>INT</td>     </tr>\n *      <tr><td>pith</td>        <td>CHAR</td>    </tr>\n *      <tr><td>terminal</td>    <td>VARCHAR</td> </tr>\n *      <tr><td>continuous</td>  <td>CHAR</td>    </tr>\n *      <tr><td>quality</td>     <td>VARCHAR</td> </tr>\n *      <tr><td>reconciled</td>  <td>CHAR</td>    </tr>\n *      <tr><td>author</td>      <td>VARCHAR</td> </tr>\n *      <tr><td>comments</td>    <td>VARCHAR</td> </tr>\n *    </table>\n * </pre>\n *\n *    <h2>Elements</h2>\n *\n *    <p>The elements are stored in a table called \"elements\".  For a sum\n *    with 10 elements, there are 10 rows in this table; each row\n *    contains the sample ID of the master, and the sample ID of one\n *    element.</p>\n *\n *    <table align=\"center\" border=\"1\" cellspacing=\"0\">\n *      <tr><th>Field</th> <th>Type</th> <th>Description</th></tr>\n *      <tr><td>sid</td>   <td>INT</td>  <td>sample ID</td></tr>\n *      <tr><td>esid</td>  <td>INT</td>  <td>element that is contained in\n *                                           thismaster</td></tr>\n *    </table>\n * </pre>\n *\n *    <h2>Sites</h2>\n *\n *    -- sites table\n *\n *    <table align=\"center\" border=\"1\" cellspacing=\"0\">\n *      <tr><th>Field</th>    <th>Type</th> <th>Description</th></tr>\n *      <tr><td>id</td>       <td>INT PRIMARY KEY(??),\n *      <tr><td>country</td>  <td>CHAR(2)</td>\n *      <tr><td>code</td>     <td>CHAR(3)</td>\n *      <tr><td>name</td>     <td>VARCHAR</td>\n *      <tr><td>species</td>  <td>VARCHAR</td>\n *      <tr><td>type</td>     <td>VARCHAR (??)</td>\n *      <tr><td>location</td> <td>VARCHAR</td>\n *    </table>\n *\n *    <h2>Left to do</h2>\n *    <ul>\n *\n *       <li>i won't ever need to put 2 dendro databases in the same\n *       database (namespace), so it doesn't do any harm that the tables\n *       are called \"data\", etc., but \"corina_data\" would be more in-line\n *       with postgres using \"pg_aggregate\" for postgres-specific tables.\n *       Or should I be using schemas?\n *\n *       <li>on that note, make \"data\", \"elements\", \"metadata\" table\n *       names constants.\n *\n *       <li>create metadata table columns/types from MetadataTemplate\n *       object\n *\n *       <li>(come up with a better way to store elements? -- need\n *       referential integrity!)\n *\n *       <li>come up with a better way to store sites?\n *\n *       <li>finish documentation\n *\n *       <li>error handling: what if build() called, but schema already\n *       exists?  what if destroy() called, but no schema here?  (need\n *       verify()!)\n *\n *       <li>need at least a \"last-modified\" field in the\n *       <code>metadata</code> table; a <code>history</code> table which\n *       held (sid, author, time/date, modification) tuples would be\n *       optimal\n *\n *       <li>improve verify() to confirm columns and types\n *\n *    </ul>\n *\n *    @see corina.db.DB\n *\n *    @author Ken Harris &lt;kbh7 <i style=\"color: gray\">at</i> cornell <i style=\"color: gray\">dot</i> edu&gt;\n *    @version $Id: Schema.java,v 1.1 2004/01/18 17:56:18 aaron Exp $\n */\npublic class Schema {\n\n    // don't instantiate me\n    private Schema() {\n    }\n\n    /**\n     *       Build a Corina schema database.\n     *\n     *       @param connection the connection to create the database on\n     *       @exception SQLException if an SQL exception occurs\n     */\n    public static void build(Connection connection) throws SQLException {\n        // schema building should be atomic\n        connection.setAutoCommit(false);\n        Statement stmt = connection.createStatement();\n        // add metadata table\n        /*\n\t  notes:\n\t\n\t  -- \"end\" is reserved in SQL, so we use \"stop\" for the\n\t  end of the range.)\n\t\n\t  -- why is \"id\" not UNIQUE?  because for cornell's data, the\n\t  ID field never was unique.\n\n\t  -- on some databases, VARCHAR size is rather small.  oracle:\n\t  4000; ms sql server: you don't even want to know...\n\t  postgresql: rumor mill says at least 100-200K (!).\n\t*/\n        // DESIGN: get names (and types) from Metadata!  how to get\n        // types?  CHAR/VARCHAR is easy to find out, but i need my own\n        // flag for INTs (unmeas_*, index_type, sapwood) -- it's a\n        // good idea, anyway: we can prevent people from even typing\n        // non-numbers, if fields have numeric/non-numeric types.\n        // (this also causes BUGs, if the order here isn't exactly the\n        // same as in MetadataTemplate.)\n        stmt.executeUpdate(\"CREATE TABLE metadata (\" + // sample ID\n        \"sid INT PRIMARY KEY,\" + // range\n        \"start INT NOT NULL,\" + \"stop INT NOT NULL,\" + \"span INT NOT NULL,\" + // site -- TODO: make this a REF!\n        \"site VARCHAR,\" + // metadata\n        \"title VARCHAR,\" + \"id VARCHAR,\" + \"dating CHAR,\" + \"unmeas_pre INT,\" + \"unmeas_post INT,\" + \"type CHAR,\" + \"species VARCHAR,\" + \"format CHAR,\" + \"index_type INT,\" + \"sapwood INT,\" + \"pith CHAR,\" + \"terminal VARCHAR,\" + \"continuous CHAR,\" + \"quality VARCHAR,\" + \"reconciled CHAR,\" + \"author VARCHAR,\" + \"comments VARCHAR);\");\n        // add data table, for data, count, incr, decr\n        stmt.executeUpdate(\"CREATE TABLE data (\" + \"sid INT REFERENCES metadata, \" + \"type CHAR NOT NULL, \" + \"decade INT NOT NULL, \" + \"d0 INT, d1 INT, d2 INT, d3 INT, d4 INT,\" + \"d5 INT, d6 INT, d7 INT, d8 INT, d9 INT,\" + \"PRIMARY KEY (sid, type, decade)\" + \");\");\n        // add elements table\n        stmt.executeUpdate(\"CREATE TABLE elements (\" + \"sid INT NOT NULL, \" + //  REFERENCES metadata (sid));\");\n        \"esid INT);\");\n        // BUG: can't put in referential integrity check until i know\n        // all elements exist, which may never be true.  how to deal\n        // with this?\n        stmt.close();\n        connection.commit();\n        // how do we know this is the old value?\n        connection.setAutoCommit(true);\n    }\n\n    /**\n     *       Destroy an existing Corina-schema database.\n     *\n     *       @param connection the connection to find the database to destroy\n     *       @exception SQLException if an SQL exception occurs\n     */\n    public static void destroy(Connection connection) throws SQLException {\n        connection.setAutoCommit(false);\n        // die tables die!  (it's german; it means \"the, table, the\".)\n        Statement stmt = connection.createStatement();\n        try {\n            stmt.executeUpdate(\"DROP TABLE data;\");\n            stmt.executeUpdate(\"DROP TABLE elements;\");\n            stmt.executeUpdate(\"DROP TABLE metadata;\");\n            // (the api says any \"statements that return nothing\"\n            // are ok for executeUpdate())\n        } catch (SQLException se) {\n            System.out.println(\"error dropping table: \" + se);\n            // is this fatal?  a warning?  BUG: \"no table by this\n            // name\" seems to cause this -- so i'd better check\n            // for the table first, and skip them if they're not\n            // here.\n            throw se;\n        }\n        stmt.close();\n        connection.commit();\n        // how do we know this is the old value?\n        connection.setAutoCommit(true);\n    }\n\n    /**\n     *       Is there a valid Corina database here?\n     *\n     *       @param connection the connection to check\n     *       @return true, if there's a valid Corina database here, else\n     *       false\n     *       @exception SQLException if an SQL exception occurs\n     */\n    public static boolean verify(Connection connection) throws SQLException {\n        // strategy: for now, let's just perform a couple SELECTs, and\n        // make sure no exceptions are thrown.  it won't confirm all\n        // the types, but it'll confirm the tables exist.\n        try {\n            Statement verifyStmt = connection.createStatement();\n            verifyStmt.executeQuery(\"SELECT count(*) FROM metadata;\");\n            verifyStmt.executeQuery(\"SELECT count(*) FROM data;\");\n            verifyStmt.executeQuery(\"SELECT count(*) FROM elements;\");\n            return true;\n        } catch (SQLException se) {\n            return false;\n        }\n    }\n}\n",
		"id": "/EvoSuiteBenchmark/35_corina/src/main/java/corina/db/Schema.java",
		"test_prompt": "// SchemaTest.java\npackage corina.db;\n\nimport java.sql.*;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link Schema}.\n* It contains ten unit test cases for the {@link Schema#verify(Connection)} method.\n*/\nclass SchemaTest {"
	},
	{
		"original_code": "// DB.java\n//\n// This file is part of Corina.\n//\n// Corina is free software; you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation; either version 2 of the License, or\n// (at your option) any later version.\n//\n// Corina is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Corina; if not, write to the Free Software\n// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n//\n// Copyright 2003 Ken Harris <kbh7@cornell.edu>\n//\npackage corina.db;\n\nimport corina.Year;\nimport corina.Range;\nimport corina.Sample;\nimport corina.Element;\nimport corina.MetadataTemplate;\nimport corina.MetadataTemplate.Field;\nimport corina.formats.WrongFiletypeException;\nimport corina.logging.CorinaLog;\nimport java.sql.Connection;\nimport java.sql.DriverManager;\nimport java.sql.PreparedStatement;\nimport java.sql.Statement;\nimport java.sql.Types;\nimport java.sql.ResultSet;\nimport java.sql.SQLException;\nimport java.io.File;\nimport java.io.IOException;\nimport java.util.Map;\nimport java.util.Hashtable;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Iterator;\n\n/**\n *    Store Samples in an RDBMS.\n *\n *   <h2>Left to do</h2>\n *   <ul>\n *\n *      <li>don't use my own order in Schema.build(), but ask\n *      MetadataTemplate.\n *\n *      <li>the elements table sid values don't seem to match up (verify\n *      this)\n *\n *      <li>getting the sid from the filename isn't reliable, unless you\n *      use the canonical pathnames\n *\n *      <li>document me!\n *\n *      <li>names are bad: instead of load/save (which seem ambiguous),\n *      use more database-like names, like insert(Sample),\n *      delete(Sample?), etc.\n *\n *      <li>if you try to save a sample which is already there, it throws\n *      some random exception (java.sql.SQLException, somewhere)\n *\n *      <li>load() makes new PreparedStatements each run; to gain any\n *      benefit from this, they should be lazily created and re-used\n *\n *      <li>need a way to update samples in-place (update(Sample)?)\n *\n *      <li>non-int values cause problem: sapwood \"10?\" can't be put in\n *      an INT slot; solution: add value \"10\", and add \"Sapwood = '10?'\"\n *      to comments field\n *\n *      <li>exception handling is poor-to-nonexistant\n *\n *      <li>extract all SQL queries to either string constants, or .sql\n *      files\n *\n *      <li>make all queries lazily-created PreparedStatements\n *\n *      <li>move higher-level stuff, like loading elements automatically,\n *      into a different class\n *\n *      <li>add support for sites, in a different class\n *\n *      <li>add support for \"history\" table\n *\n * <pre>\n *    document all performance specs.\n *\n *    also, document db compatibility (should work with all, but note testing)\n *    -- do this in package.html!\n *\n *    also, this requires a Connection, right?  how do i get that?  doc!\n *    -- Schema does, too -- do this in package.html!\n *\n *    also, can i take URL's yet, like\n *          \"postgresql://picea.arts.cornell.edu/dendro?sid=1344012846\"\n *\n *    also, what about security?  how do you do passwords?\n *\n *    also, what is an \"sid\"?  how do i get one?\n *\n *    rename Schema, DB to DendroDBSchema, DendroDB(Samples? / Sites??)\n * </pre>\n *\n *   </ul>\n *\n *    @author Ken Harris &lt;kbh7 <i style=\"color: gray\">at</i> cornell <i style=\"color: gray\">dot</i> edu&gt;\n *    @version $Id: DB.java,v 1.4 2005/01/24 03:09:29 aaron Exp $\n */\npublic class DB {\n\n    private static final CorinaLog log = new CorinaLog(DB.class);\n\n    private Connection connection;\n\n    /**\n     *       Make a new DB object on an open connection.  This DB object can\n     *       then be used to access the Corina database on this connection.\n     *\n     *       @param connection the connection to use\n     */\n    public DB(Connection connection) {\n        this.connection = connection;\n    }\n\n    // -- load() performance: takes 275ms to load data of\n    // \"blc7000.new\" (100KB) from a file; takes <500ms to load same\n    // data from postgresql.  i think users will be able to live with\n    // 1/5sec more delay for loading a 7000-year master chronology, if\n    // it means they can do full-library-searches in 5sec instead of\n    // 30min.\n    /**\n     *       Load a sample from the database.  This operation is atomic.\n     *\n     *       @param sid the sid of the sample to load\n     *       @return the Sample\n     *       @exception SQLException if an SQL exception occurs\n     */\n    public Sample load(int sid) throws SQLException {\n        // DESIGN: have load take a url?\n        // e.g., \"postgresql://picea.arts.cornell.edu/dendro?sid=1344012846\"\n        Sample sample = new Sample();\n        // load data\n        sample.data = loadData(sid, 'W');\n        // load dens, incr, decr\n        sample.count = loadData(sid, 'C');\n        sample.incr = loadData(sid, 'I');\n        sample.decr = loadData(sid, 'D');\n        // load meta -- including range\n        {\n            PreparedStatement stmt = connection.prepareStatement(\"SELECT * FROM metadata \" + \"WHERE sid = ?;\");\n            try {\n                stmt.setInt(1, sid);\n                ResultSet meta = stmt.executeQuery();\n                // move to first (only) row\n                meta.next();\n                // read range.\n                sample.range = readRange(meta);\n                // read other meta fields.\n                sample.meta = readMeta(meta);\n                // DESIGN: what about \"site\" field?\n            } finally {\n                try {\n                    stmt.close();\n                } catch (SQLException sqle) {\n                    log.error(\"Error closing prepared statement\", sqle);\n                }\n            }\n        }\n        // load elements\n        {\n            PreparedStatement stmt = connection.prepareStatement(\"SELECT * FROM elements \" + \"WHERE sid = ?;\");\n            try {\n                stmt.setInt(1, sid);\n                ResultSet elements = stmt.executeQuery();\n                sample.elements = new ArrayList();\n                while (elements.next()) {\n                    Element e = new Element(elements.getString(\"el\"));\n                    sample.elements.add(e);\n                }\n                if (sample.elements.size() == 0)\n                    sample.elements = null;\n            } finally {\n                try {\n                    stmt.close();\n                } catch (SQLException sqle) {\n                    log.error(\"Error closing prepared statement\", sqle);\n                }\n            }\n        }\n        // DESIGN: would elements be in the database as jdbc urls?\n        return sample;\n    }\n\n    // extract a Range from the current row of this resultset (which\n    // points to a meta row).\n    private Range readRange(ResultSet meta) throws SQLException {\n        Year start = new Year(meta.getInt(\"start\"));\n        Year end = new Year(meta.getInt(\"stop\"));\n        return new Range(start, end);\n    }\n\n    // extract all normal metadata from the current row of this\n    // resultset (which points to a meta row).\n    private Map readMeta(ResultSet meta) throws SQLException {\n        Map map = new Hashtable();\n        Iterator i = MetadataTemplate.getFields();\n        while (i.hasNext()) {\n            MetadataTemplate.Field f = (MetadataTemplate.Field) i.next();\n            Object x = meta.getObject(f.getVariable());\n            // since i don't want to worry about types right now\n            // PERFORMANCE: but getObject() is slower than get<Type>().\n            if (x != null)\n                map.put(f.getVariable(), x);\n        }\n        return map;\n    }\n\n    // given an sid and a connection and a type ('W', 'C', 'I', 'D'),\n    // load a list of numbers.  if there's no data for this sid/type,\n    // return null.\n    private PreparedStatement dataStmt = null;\n\n    private List loadData(int sid, char type) throws SQLException {\n        if (dataStmt == null)\n            dataStmt = connection.prepareStatement(\"SELECT * FROM data \" + \"WHERE sid = ? AND type = ? \" + \"GROUP BY sid, decade, type, \" + \"d0, d1, d2, d3, d4, \" + \"d5, d6, d7, d8, d9;\");\n        dataStmt.setInt(1, sid);\n        dataStmt.setString(2, String.valueOf(type));\n        ResultSet data = dataStmt.executeQuery();\n        List list = new ArrayList();\n        while (data.next()) {\n            for (int i = 0; i < 10; i++) {\n                // skip (sid, type, decade) columns\n                int col = i + 4;\n                int x = data.getInt(col);\n                if (!data.wasNull()) {\n                    list.add(new Integer(x));\n                }\n            }\n        }\n        // if there's none of this type of data (no count, for\n        // example), return null.\n        if (list.size() == 0)\n            return null;\n        return list;\n    }\n\n    /**\n     *       Delete a sample from the database.  This operation is atomic.\n     *\n     *       @param sid the sid of the sample to delete\n     *       @exception SQLException if an SQL exception occurs\n     */\n    public void delete(int sid) throws SQLException {\n        // do this as one atomic operation\n        connection.setAutoCommit(false);\n        // remove data (and count, incr, decr)\n        if (deleteData == null)\n            deleteData = connection.prepareStatement(\"DELETE data \" + \"WHERE sid = ?;\");\n        deleteData.setInt(1, sid);\n        deleteData.executeUpdate();\n        // remove metadata\n        if (deleteMeta == null)\n            deleteMeta = connection.prepareStatement(\"DELETE metadata \" + \"WHERE sid = ?;\");\n        deleteMeta.setInt(1, sid);\n        deleteMeta.executeUpdate();\n        // remove elements\n        if (deleteEl == null)\n            deleteEl = connection.prepareStatement(\"DELETE elements \" + \"WHERE sid = ?;\");\n        deleteEl.setInt(1, sid);\n        deleteEl.executeUpdate();\n        // perform deletes\n        connection.commit();\n        connection.setAutoCommit(true);\n    }\n\n    private PreparedStatement deleteData = null;\n\n    private PreparedStatement deleteMeta = null;\n\n    private PreparedStatement deleteEl = null;\n\n    // WRITEME: update a Sample in the DB (in one transaction,\n    // insert/remove as necessary?)  -- well, sort of: update =\n    // (delete, insert) in one transaction.  but it's a useful\n    // abstraction.\n    /**\n     *       Save a sample into the database.  This operation is atomic.\n     *\n     *       @param sample the sample to save\n     *       @exception SQLException if an SQL exception occurs\n     */\n    public void save(Sample sample) throws SQLException {\n        connection.setAutoCommit(false);\n        saveSample(sample);\n        connection.commit();\n        connection.setAutoCommit(true);\n    }\n\n    // dump this sample into the database.\n    private void saveSample(Sample s) throws SQLException {\n        // compute sid\n        int sid = s.meta.get(\"filename\").hashCode();\n        // or if you prefer strings:\n        // sid = Integer.toHexString(filename.hashCode());\n        // metadata (including range)\n        insertMeta(sid, s);\n        // data\n        insertData(sid, s, s.data, 'W');\n        if (s.isSummed())\n            insertData(sid, s, s.count, 'C');\n        // wj (optional)\n        if (s.hasWeiserjahre()) {\n            insertData(sid, s, s.incr, 'I');\n            insertData(sid, s, s.decr, 'D');\n        }\n        // elements (optional)\n        if (s.elements != null)\n            insertElements(sid, s);\n    }\n\n    /**\n     *       Import all files from a folder into the database.  All files in\n     *       sub-folders will be imported, as well.  Non-dendro files are\n     *       ignored.  The entire import is atomic.\n     *\n     *       @param folder the folder to import\n     *       @exception SQLException if there is an SQL exception while\n     *       importing data\n     */\n    public void dump(String folder) throws SQLException {\n        // connection.setAutoCommit(false);\n        File f = new File(folder);\n        if (f.isDirectory()) {\n            importFolder(f);\n        } else {\n            importFile(f);\n        }\n        // connection.commit();\n        // connection.setAutoCommit(true);\n    }\n\n    // import a folder\n    private void importFolder(File folder) throws SQLException {\n        if (folder.isHidden())\n            return;\n        File[] files = folder.listFiles();\n        for (int i = 0; i < files.length; i++) {\n            if (files[i].isDirectory())\n                importFolder(files[i]);\n            else\n                importFile(files[i]);\n        }\n    }\n\n    // import a file\n    private void importFile(File file) throws SQLException {\n        if (file.isHidden())\n            return;\n        connection.setAutoCommit(false);\n        try {\n            Sample s = new Sample(file.getPath());\n            saveSample(s);\n        } catch (WrongFiletypeException wfte) {\n            // ignore non-dendro files\n        } catch (IOException ioe) {\n            // -- WHAT TO DO?\n        } finally {\n            connection.commit();\n            connection.setAutoCommit(true);\n        }\n    }\n\n    private PreparedStatement elStmt = null;\n\n    private void insertElements(int sid, Sample s) throws SQLException {\n        // create, if necessary\n        if (elStmt == null)\n            elStmt = connection.prepareStatement(\"INSERT INTO elements \" + \"VALUES (?, ?);\");\n        // insert each element, as its filename (for now)\n        for (int i = 0; i < s.elements.size(); i++) {\n            elStmt.setInt(1, sid);\n            // REFACTOR: need a makeSID() method!\n            int esid = ((Element) s.elements.get(i)).getFilename().hashCode();\n            elStmt.setInt(2, esid);\n            elStmt.executeUpdate();\n        }\n    }\n\n    private PreparedStatement metaStmt = null;\n\n    private void insertMeta(int sid, Sample s) throws SQLException {\n        // get site name/code (actually \"directory i'm in\")\n        File dir = new File((String) s.meta.get(\"filename\"));\n        String site = dir.getParentFile().getName();\n        if (metaStmt == null) {\n            // build template, by counting number of meta fields\n            StringBuffer line = new StringBuffer(\"INSERT INTO metadata \" + \"VALUES (?, ?\");\n            // start, end, span\n            line.append(\", ?, ?, ?\");\n            Iterator i = MetadataTemplate.getFields();\n            while (i.hasNext()) {\n                line.append(\", ?\");\n                // (and ignore value)\n                i.next();\n            }\n            line.append(\");\");\n            metaStmt = connection.prepareStatement(line.toString());\n        }\n        metaStmt.setInt(1, sid);\n        // this may look ugly, but it is correct.  (see\n        // Year.intValue() for details.)\n        metaStmt.setInt(2, Integer.parseInt(s.range.getStart().toString()));\n        metaStmt.setInt(3, Integer.parseInt(s.range.getEnd().toString()));\n        metaStmt.setInt(4, s.range.span());\n        metaStmt.setString(5, site);\n        int n = 0;\n        Iterator i = MetadataTemplate.getFields();\n        List extraComments = new ArrayList();\n        while (i.hasNext()) {\n            String variable = ((Field) i.next()).getVariable();\n            n++;\n            Object v = s.meta.get(variable);\n            // ASSUME: metadata have only Numbers, Strings, and nulls.\n            /*\n\t      PROBLEM: at this point, there are 2 sets of types: the\n\t      types that s.meta has, and the types that metaStmt\n\t      expects (which I can query with metaStmt.getMetaData() -\n\t      getColumnCount(), getColumnType(), getColumnName(), ...).\n\n\t      SOLUTION: MetadataTemplate needs to hold types for each\n\t      value, which will be used for schema creation, and also\n\t      for here.  the only problem remaining will be old files\n\t      that have bad values\n\n\t      TEMPORARY: if you find a non-number (\"10?\") in\n\t      var=\"sapwood\", make it into \"10\", and add the line\n\t      \"Sapwood: '10?'\" to var=\"comments\".\n\n\t      ALSO: need to verify one-of types.  if {\"+\",\"++\"} is\n\t      expected, and \"++?\" is found, we need to mangle that,\n\t      too.\n\n\t      ALSO: ?'s aren't getting set to NULL in the corina\n\t      loader, so they're getting put in the database as '?' \n\t      chars.  bad bad.\n\n\t      ALSO: sometimes CHAR-sized fields have had strings put\n\t      in them, like pith=\"Near\".  what to do?  check the first\n\t      char -- if it's a valid char, use that, else use NULL;\n\t      either way, put the whole \"var=value\" in the comments,\n\t      as well.\n\t    */\n            // TEMPORARY hack:\n            if ((variable.equals(\"sapwood\") || variable.equals(\"index_type\") || variable.equals(\"unmeas_pre\") || variable.equals(\"unmeas_post\")) && !(v instanceof Number)) {\n                try {\n                    v = new Integer((String) v);\n                    // got an int?  ok!\n                } catch (NumberFormatException nfe) {\n                    // no int?  ouch!\n                    // temporary temporary hack hack: null.\n                    extraComments.add(/*i18n:*/\n                    variable + \": \\\"\" + v + \"\\\"\");\n                    v = null;\n                }\n            }\n            if ((variable.equals(\"pith\") || variable.equals(\"dating\") || variable.equals(\"reconciled\") || variable.equals(\"continuous\") || variable.equals(\"format\") || variable.equals(\"type\")) && (v != null && v.toString().length() > 1)) {\n                extraComments.add(/*i18n:*/\n                variable + \": \\\"\" + v + \"\\\"\");\n                v = v.toString().substring(0, 1);\n            }\n            if (v instanceof Number)\n                metaStmt.setInt(5 + n, ((Number) v).intValue());\n            else if (v == null)\n                metaStmt.setNull(5 + n, Types.INTEGER);\n            else // setNull wants a type?  evil!  dumb!\n            {\n                String str = (String) v;\n                // System.out.println(\"str='\" + str + \"'\");\n                // TODO: escape things like ' too?\n                // add temp data\n                if (variable.equals(\"comments\"))\n                    for (int ii = 0; ii < extraComments.size(); ii++) str += \"\\n\" + extraComments.get(ii);\n                // BUG: this is weird!\n                str = corina.util.StringUtils.substitute(str, \"\\n\", \"n\");\n                str = corina.util.StringUtils.substitute(str, \"\\r\", \"r\");\n                metaStmt.setString(5 + n, str);\n            }\n            // ROBUSTNESS: am i positive it's a String?\n        }\n        try {\n            metaStmt.executeUpdate();\n        } catch (SQLException e) {\n            // can't update |filename|\n            System.out.println(\"sql/e=\" + e);\n            e.printStackTrace();\n            throw e;\n        } catch (Exception e) {\n            System.out.println(\"e=\" + e);\n            e.printStackTrace();\n        }\n    }\n\n    // insert any List as decadal data, into a table with the given name.\n    private PreparedStatement dataInsertStmt = null;\n\n    private void insertData(int sid, Sample s, List data, char type) throws SQLException {\n        // if there's no data, there's no reason to do anything.\n        // (plus we hit a bug below if we actually try.)\n        if (data.size() == 0)\n            return;\n        // set up prepared statement; every line starts with sid\n        if (dataInsertStmt == null) {\n            dataInsertStmt = connection.prepareStatement(\"INSERT INTO data \" + \"VALUES \" + \"(?, ?, ?, \" + \"?, ?, ?, ?, ?, \" + \"?, ?, ?, ?, ?)\");\n        }\n        dataInsertStmt.setInt(1, sid);\n        dataInsertStmt.setString(2, String.valueOf(type));\n        // starting sample: fill nulls\n        for (int i = 0; i < s.range.getStart().column(); i++) dataInsertStmt.setNull(i + 4, Types.INTEGER);\n        // \"INSERT INTO data VALUES (%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d);\"\n        Range r = s.range;\n        for (Year y = r.getStart(); y.compareTo(r.getEnd()) <= 0; y = y.add(+1)) {\n            // new line: second field is always year (decade)\n            if (r.startOfRow(y))\n                dataInsertStmt.setInt(3, Integer.parseInt(y.toString()));\n            // if NOT first line, add NULL for year zero\n            if (y.isYearOne() && !r.getStart().equals(y))\n                dataInsertStmt.setNull(4, Types.INTEGER);\n            // add datum\n            int index = y.diff(r.getStart());\n            dataInsertStmt.setInt(y.column() + 4, ((Integer) data.get(index)).intValue());\n            // end of line?  send it in.\n            try {\n                if (y.column() == 9)\n                    dataInsertStmt.executeUpdate();\n            } catch (Exception e) {\n                System.out.println(\"e=\" + e);\n                System.out.println(\"s=\" + s);\n                System.out.println(\"fn=\" + s.meta.get(\"filename\"));\n            }\n        }\n        // finish sample: fill nulls\n        if (r.getEnd().column() != 9) {\n            for (int i = r.getEnd().column() + 1; i < 10; i++) dataInsertStmt.setNull(i + 4, Types.INTEGER);\n            dataInsertStmt.executeUpdate();\n        }\n    }\n\n    // ======================================================================\n    // higher-level stuff, formerly in DBBrowser.java\n    //\n    // return Elements (almost -- no load ability)\n    public List getElements(String site) throws SQLException {\n        // send the SELECT to the database\n        if (getElStmt == null) {\n            getElStmt = connection.prepareStatement(\"SELECT * \" + \"FROM meta \" + \"WHERE UPPER(site) = ?;\");\n        }\n        getElStmt.setString(1, site.toUpperCase());\n        ResultSet rs = getElStmt.executeQuery();\n        // need to sort?  no, display component will sort however the\n        // user wants.\n        // BUG: need to GROUP BY to prevent duplicates?\n        // from results, put each element in a list.\n        List list = new ArrayList();\n        while (rs.next()) {\n            ;\n            // need some filename...\n            Element e = new Element(\"\");\n            // read range\n            e.setRange(readRange(rs));\n            // read other fields\n            e.details = readMeta(rs);\n            // DESIGN: add stamp to corner of database icon to mean\n            // \"connected\"!\n            // DESIGN: allow users to run arbitrary SQL statements on\n            // a connected database\n            list.add(e);\n            rs.next();\n        }\n        return list;\n    }\n\n    private PreparedStatement getElStmt = null;\n\n    // return Elements (almost -- no load ability).\n    // search for string in title, comments.  (FIXME: search all fields)\n    // REFACTOR: this is almost identical to getElements(site), except for the statement.\n    public List getElements(String site, String search) throws SQLException {\n        // send the SELECT to the database\n        if (getElemSearchStmt == null) {\n            getElemSearchStmt = connection.prepareStatement(\"SELECT * FROM meta \" + \"WHERE UPPER(site) = ? AND \" + \"(UPPER(title) LIKE ? OR \" + \"UPPER(comments) LIKE ?);\");\n        }\n        getElemSearchStmt.setString(1, site.toUpperCase());\n        getElemSearchStmt.setString(2, \"'%\" + search.toUpperCase() + \"%'\");\n        getElemSearchStmt.setString(3, \"'%\" + search.toUpperCase() + \"%'\");\n        ResultSet rs = getElemSearchStmt.executeQuery();\n        // need to sort?  no, display component will sort however the user wants.\n        // BUG: need to GROUP BY to prevent duplicates?\n        // from results, put each element in a list.\n        List list = new ArrayList();\n        while (rs.next()) {\n            ;\n            // need some filename...\n            Element e = new Element(\"\");\n            // read range\n            e.setRange(readRange(rs));\n            // read other fields -- FIXME: use addAll() instead\n            e.details = readMeta(rs);\n            // DESIGN: add stamp to corner of database icon to mean\n            // \"connected\"!\n            // DESIGN: allow users to run arbitrary SQL statements on\n            // a connected database\n            list.add(e);\n            rs.next();\n        }\n        return list;\n    }\n\n    private PreparedStatement getElemSearchStmt = null;\n}\n",
		"id": "/EvoSuiteBenchmark/35_corina/src/main/java/corina/db/DB.java",
		"test_prompt": "// DBTest.java\n// This file is part of Corina.\n//\n// Corina is free software; you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation; either version 2 of the License, or\n// (at your option) any later version.\n//\n// Corina is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Corina; if not, write to the Free Software\n// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n//\n// Copyright 2003 Ken Harris <kbh7@cornell.edu>\n//\npackage corina.db;\n\nimport corina.Year;\nimport corina.Range;\nimport corina.Sample;\nimport corina.Element;\nimport corina.MetadataTemplate;\nimport corina.MetadataTemplate.Field;\nimport corina.formats.WrongFiletypeException;\nimport corina.logging.CorinaLog;\nimport java.sql.Connection;\nimport java.sql.DriverManager;\nimport java.sql.PreparedStatement;\nimport java.sql.Statement;\nimport java.sql.Types;\nimport java.sql.ResultSet;\nimport java.sql.SQLException;\nimport java.io.File;\nimport java.io.IOException;\nimport java.util.Map;\nimport java.util.Hashtable;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Iterator;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link DB}.\n* It contains ten unit test cases for the {@link DB#load(int)} method.\n*/\nclass DBTest {"
	},
	{
		"original_code": "// FavoritesSource.java\npackage corina.sources;\n\nimport corina.ui.Builder;\nimport corina.ui.I18n;\nimport javax.swing.Icon;\n\npublic class FavoritesSource implements Source {\n\n    private String name = \"Favorites\";\n\n    // testing\n    FavoritesSource(String name) {\n        this.name = name;\n    }\n\n    public String getName() {\n        return name;\n    }\n\n    public Icon getIcon() {\n        return Builder.getIcon(\"Favorites.png\");\n    }\n\n    public boolean canAcceptDrop() {\n        return true;\n    }\n\n    public boolean canBeDragged() {\n        return true;\n    }\n\n    public boolean canElementsBeDragged() {\n        return true;\n    }\n}\n",
		"id": "/EvoSuiteBenchmark/35_corina/src/main/java/corina/sources/FavoritesSource_0Test.java",
		"test_prompt": "// FavoritesSource_0Test.java\npackage corina.sources;\n\nimport corina.ui.Builder;\nimport corina.ui.I18n;\nimport javax.swing.Icon;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link FavoritesSource}.\n* It contains ten unit test cases for the {@link FavoritesSource#canAcceptDrop()} method.\n*/\nclass FavoritesSource_0Test {"
	},
	{
		"original_code": "// FavoritesSource.java\npackage corina.sources;\n\nimport corina.ui.Builder;\nimport corina.ui.I18n;\nimport javax.swing.Icon;\n\npublic class FavoritesSource implements Source {\n\n    private String name = \"Favorites\";\n\n    // testing\n    FavoritesSource(String name) {\n        this.name = name;\n    }\n\n    public String getName() {\n        return name;\n    }\n\n    public Icon getIcon() {\n        return Builder.getIcon(\"Favorites.png\");\n    }\n\n    public boolean canAcceptDrop() {\n        return true;\n    }\n\n    public boolean canBeDragged() {\n        return true;\n    }\n\n    public boolean canElementsBeDragged() {\n        return true;\n    }\n}\n",
		"id": "/EvoSuiteBenchmark/35_corina/src/main/java/corina/sources/FavoritesSource_1Test.java",
		"test_prompt": "// FavoritesSource_1Test.java\npackage corina.sources;\n\nimport corina.ui.Builder;\nimport corina.ui.I18n;\nimport javax.swing.Icon;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link FavoritesSource}.\n* It contains ten unit test cases for the {@link FavoritesSource#canBeDragged()} method.\n*/\nclass FavoritesSource_1Test {"
	},
	{
		"original_code": "// FavoritesSource.java\npackage corina.sources;\n\nimport corina.ui.Builder;\nimport corina.ui.I18n;\nimport javax.swing.Icon;\n\npublic class FavoritesSource implements Source {\n\n    private String name = \"Favorites\";\n\n    // testing\n    FavoritesSource(String name) {\n        this.name = name;\n    }\n\n    public String getName() {\n        return name;\n    }\n\n    public Icon getIcon() {\n        return Builder.getIcon(\"Favorites.png\");\n    }\n\n    public boolean canAcceptDrop() {\n        return true;\n    }\n\n    public boolean canBeDragged() {\n        return true;\n    }\n\n    public boolean canElementsBeDragged() {\n        return true;\n    }\n}\n",
		"id": "/EvoSuiteBenchmark/35_corina/src/main/java/corina/sources/FavoritesSource_2Test.java",
		"test_prompt": "// FavoritesSource_2Test.java\npackage corina.sources;\n\nimport corina.ui.Builder;\nimport corina.ui.I18n;\nimport javax.swing.Icon;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link FavoritesSource}.\n* It contains ten unit test cases for the {@link FavoritesSource#canElementsBeDragged()} method.\n*/\nclass FavoritesSource_2Test {"
	},
	{
		"original_code": "// FolderSource.java\npackage corina.sources;\n\nimport javax.swing.Icon;\nimport javax.swing.tree.DefaultTreeCellRenderer;\n\n/*\n  notes:\n  -- this class will be responsible for caching files\n  ---- (ftpsource even more so -- though differently)\n*/\npublic class FolderSource implements Source {\n\n    // like \"Library\"\n    private String name = \"Library\";\n\n    // like \"G:\\\\DATA\"\n    private String folder;\n\n    public String getName() {\n        return name;\n    }\n\n    private static Icon openIcon, closedIcon;\n\n    static {\n        DefaultTreeCellRenderer dtcr = new DefaultTreeCellRenderer();\n        openIcon = dtcr.getOpenIcon();\n        closedIcon = dtcr.getClosedIcon();\n    }\n\n    public Icon getIcon() {\n        return closedIcon;\n    }\n\n    public boolean canAcceptDrop() {\n        return true;\n    }\n\n    public boolean canBeDragged() {\n        return true;\n    }\n\n    public boolean canElementsBeDragged() {\n        return true;\n    }\n}\n",
		"id": "/EvoSuiteBenchmark/35_corina/src/main/java/corina/sources/FolderSource_0Test.java",
		"test_prompt": "// FolderSource_0Test.java\npackage corina.sources;\n\nimport javax.swing.Icon;\nimport javax.swing.tree.DefaultTreeCellRenderer;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link FolderSource}.\n* It contains ten unit test cases for the {@link FolderSource#canAcceptDrop()} method.\n*/\nclass FolderSource_0Test {"
	},
	{
		"original_code": "// FolderSource.java\npackage corina.sources;\n\nimport javax.swing.Icon;\nimport javax.swing.tree.DefaultTreeCellRenderer;\n\n/*\n  notes:\n  -- this class will be responsible for caching files\n  ---- (ftpsource even more so -- though differently)\n*/\npublic class FolderSource implements Source {\n\n    // like \"Library\"\n    private String name = \"Library\";\n\n    // like \"G:\\\\DATA\"\n    private String folder;\n\n    public String getName() {\n        return name;\n    }\n\n    private static Icon openIcon, closedIcon;\n\n    static {\n        DefaultTreeCellRenderer dtcr = new DefaultTreeCellRenderer();\n        openIcon = dtcr.getOpenIcon();\n        closedIcon = dtcr.getClosedIcon();\n    }\n\n    public Icon getIcon() {\n        return closedIcon;\n    }\n\n    public boolean canAcceptDrop() {\n        return true;\n    }\n\n    public boolean canBeDragged() {\n        return true;\n    }\n\n    public boolean canElementsBeDragged() {\n        return true;\n    }\n}\n",
		"id": "/EvoSuiteBenchmark/35_corina/src/main/java/corina/sources/FolderSource_1Test.java",
		"test_prompt": "// FolderSource_1Test.java\npackage corina.sources;\n\nimport javax.swing.Icon;\nimport javax.swing.tree.DefaultTreeCellRenderer;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link FolderSource}.\n* It contains ten unit test cases for the {@link FolderSource#canBeDragged()} method.\n*/\nclass FolderSource_1Test {"
	},
	{
		"original_code": "// FolderSource.java\npackage corina.sources;\n\nimport javax.swing.Icon;\nimport javax.swing.tree.DefaultTreeCellRenderer;\n\n/*\n  notes:\n  -- this class will be responsible for caching files\n  ---- (ftpsource even more so -- though differently)\n*/\npublic class FolderSource implements Source {\n\n    // like \"Library\"\n    private String name = \"Library\";\n\n    // like \"G:\\\\DATA\"\n    private String folder;\n\n    public String getName() {\n        return name;\n    }\n\n    private static Icon openIcon, closedIcon;\n\n    static {\n        DefaultTreeCellRenderer dtcr = new DefaultTreeCellRenderer();\n        openIcon = dtcr.getOpenIcon();\n        closedIcon = dtcr.getClosedIcon();\n    }\n\n    public Icon getIcon() {\n        return closedIcon;\n    }\n\n    public boolean canAcceptDrop() {\n        return true;\n    }\n\n    public boolean canBeDragged() {\n        return true;\n    }\n\n    public boolean canElementsBeDragged() {\n        return true;\n    }\n}\n",
		"id": "/EvoSuiteBenchmark/35_corina/src/main/java/corina/sources/FolderSource_2Test.java",
		"test_prompt": "// FolderSource_2Test.java\npackage corina.sources;\n\nimport javax.swing.Icon;\nimport javax.swing.tree.DefaultTreeCellRenderer;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link FolderSource}.\n* It contains ten unit test cases for the {@link FolderSource#canElementsBeDragged()} method.\n*/\nclass FolderSource_2Test {"
	},
	{
		"original_code": "// Exponential.java\n//\n// This file is part of Corina.\n//\n// Corina is free software; you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation; either version 2 of the License, or\n// (at your option) any later version.\n//\n// Corina is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Corina; if not, write to the Free Software\n// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n//\n// Copyright 2001 Ken Harris <kbh7@cornell.edu>\n//\npackage corina.index;\n\nimport corina.Sample;\nimport corina.ui.I18n;\nimport java.util.ArrayList;\n\n/**\n *   An exponential curve fit.\n *\n *   <p>Since it's fitting to the curve\n *\n *   <blockquote><i>y = a<sub>1</sub> + a<sub>2</sub>e<sup>-px</sup></i></blockquote>\n *\n *   by solving for <i>[a<sub>1</sub> a<sub>2</sub>]</i>, we compute\n *   <i>p</i> by 2 passes of a linear search, based on where it will\n *   probably be.  This isn't as slow as it sounds, because each\n *   iteration only involves solving a 2x2 matrix equation, which\n *   <code>Solver.solve2x2()</code> does very quickly.</p>\n *\n *   <p>The first pass runs <i>p</i> from 0.01 to 0.41 in steps of 0.01;\n *   the second pass runs for 0.01 on either side of the best value\n *   found in steps of 0.001.</p>\n *\n *   @author Ken Harris &lt;kbh7 <i style=\"color: gray\">at</i> cornell <i style=\"color: gray\">dot</i> edu&gt;\n *   @version $Id: Exponential.java,v 1.4 2004/01/18 18:03:08 aaron Exp $\n */\npublic class Exponential extends Index implements Function {\n\n    // this class took 11 minutes to write (not counting\n    // documentation).  porting mecki's exponential-fit (which i can't\n    // even distribute because it's under NR's license) took hours, if\n    // not days.  plus, this one is simpler.\n    // multiplier in exponent\n    private double p;\n\n    /**\n     *       Compute the basis vector, which is\n     *       <blockquote><i>[ 1 e<sup>-px</sup> ]</i></blockquote>.\n     */\n    public double[] f(double x) {\n        return new double[] { 1., Math.exp(-p * x) };\n    }\n\n    /**\n     *       Create an exponential fit from a given sample.\n     *\n     *       @param s the Sample to index\n     */\n    public Exponential(Sample s) {\n        super(s);\n    }\n\n    public String getName() {\n        // include p?\n        return I18n.getText(\"exponential\");\n    }\n\n    // if forReal==false, compute chi2, only.\n    // if forReal==true, compute chi2 and put results in data\n    private double compute(boolean forReal) {\n        // init x, y\n        int n = source.data.size();\n        // don't worry, this is only called once\n        double[] x = new double[n];\n        double[] y = new double[n];\n        for (int i = 0; i < n; i++) {\n            x[i] = (double) i;\n            y[i] = ((Number) source.data.get(i)).doubleValue();\n        }\n        // compute coeffs\n        double[] c = null;\n        try {\n            c = Solver.leastSquares(this, x, y);\n        } catch (SingularMatrixException sme) {\n            // how to deal with errors?  return a really big chi2!\n            return Double.MAX_VALUE;\n        }\n        // compute curve, chi2.  (this is a special chi^2-computer: it\n        // doesn't require a complete list, or O(n) memory.  otherwise\n        // i'd re-use Index's implementation.)\n        double chi2 = 0.;\n        if (forReal)\n            data = new ArrayList(n);\n        for (int i = 0; i < n; i++) {\n            double[] f = f(x[i]);\n            double yp = 0.;\n            for (// degree+1\n            int j = 0; // degree+1\n            j < 2; // degree+1\n            j++) yp += c[j] * f[j];\n            chi2 += (y[i] - yp) * (y[i] - yp);\n            if (forReal)\n                data.add(new Double(yp));\n        }\n        // (if your compiler does loop unrolling and CSE, that last\n        // part will be beautiful.  if not...)\n        // return chi2\n        return chi2;\n    }\n\n    // do a linear search from BIG_START to BIG_STOP, in steps of BIG_STEP\n    private static final double BIG_START = 0.01;\n\n    private static final double BIG_STOP = 0.41;\n\n    private static final double BIG_STEP = 0.01;\n\n    // then do a linear search around the best value, in steps of BIG_STEP/10\n    // the best p-value found so far\n    private double bestExp;\n\n    // the chi2 of the best p-value\n    private double bestChi2 = Double.MAX_VALUE;\n\n    // search from |start| to |stop| every |incr|, looking for the\n    // lowest chi^2.  store results in bestChi2, bestExp\n    private void search(double start, double stop, double incr) {\n        for (p = start; p < stop; p += incr) {\n            double chi2 = compute(false);\n            if (chi2 < bestChi2) {\n                bestChi2 = chi2;\n                bestExp = p;\n            }\n        }\n    }\n\n    /**\n     *       Run the index; do a search in two passes to find a good\n     *       &Chi;<sup>2</sup>.\n     */\n    public void index() {\n        // big steps\n        search(BIG_START, BIG_STOP, BIG_STEP);\n        // refine that best value\n        // mecki: .003\n        search(bestExp - BIG_STEP, bestExp + BIG_STEP, BIG_STEP / 10);\n        // for real, now\n        p = bestExp;\n        compute(true);\n    }\n\n    public int getID() {\n        return 7;\n    }\n}\n",
		"id": "/EvoSuiteBenchmark/35_corina/src/main/java/corina/index/Exponential.java",
		"test_prompt": "// ExponentialTest.java\n// This file is part of Corina.\n//\n// Corina is free software; you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation; either version 2 of the License, or\n// (at your option) any later version.\n//\n// Corina is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Corina; if not, write to the Free Software\n// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n//\n// Copyright 2001 Ken Harris <kbh7@cornell.edu>\n//\npackage corina.index;\n\nimport corina.Sample;\nimport corina.ui.I18n;\nimport java.util.ArrayList;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link Exponential}.\n* It contains ten unit test cases for the {@link Exponential#f(double)} method.\n*/\nclass ExponentialTest {"
	},
	{
		"original_code": "// Solver.java\n//\n// This file is part of Corina.\n//\n// Corina is free software; you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation; either version 2 of the License, or\n// (at your option) any later version.\n//\n// Corina is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Corina; if not, write to the Free Software\n// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n//\n// Copyright 2001 Ken Harris <kbh7@cornell.edu>\n//\npackage corina.index;\n\n/**\n *    A collection of matrix solvers.\n *\n *    <p><code>solveNxN</code> will solve any square matrix system.  In\n *    solving Ax=b, it will destroy A (and b?).  The\n *    routines were adapted from chapter 6 of <i>Introduction to\n *    Scientific Computing</i>, second edition, Charles van Loan.  The\n *    solver uses LU decomposition with pivoting.</p>\n *\n *    <p>Also contains a least-squares fitter,\n *    <code>leastSquares()</code>, from <i>Introduction to\n *    Algorithms</i>, Cormen, Leiserson, and Rivest, pp. 768-771, which\n *    uses the matrix solvers.</p>\n *\n *    @see Function\n *    @see SingularMatrixException\n *\n *    @author Ken Harris &lt;kbh7 <i style=\"color: gray\">at</i> cornell <i style=\"color: gray\">dot</i> edu&gt;\n *    @version $Id: Solver.java,v 1.2 2004/01/18 18:03:08 aaron Exp $\n */\npublic class Solver {\n\n    private Solver() {\n        // don't instantiate me\n    }\n\n    /**\n     *  Lower-upper decomposition of a matrix; returns the permutation\n     * \tvector.  See van Loan, p. 228.\n     * \t@param A the matrix to decompose\n     * \t@return the permutation vector\n     * \t@exception IllegalArgumentException if A is not square\n     * \t@exception SingularMatrixException if A is singular\n     */\n    private static int[] GEpiv(double[][] A) throws SingularMatrixException {\n        // if there's ever a licensing issue with this code, see\n        // octave.  it uses the free LAPACK for this and many other\n        // routines.\n        // make sure it's square\n        int n = A.length;\n        if (A[0].length != n)\n            throw new IllegalArgumentException(\"Not square\");\n        int[] piv = new int[n];\n        for (int i = 0; i < n; i++) piv[i] = i;\n        for (int k = 0; k < n - 1; k++) {\n            // get max(A[k:n][k])\n            double maxr = 0.;\n            int r = 0;\n            for (int i = k; i < n; i++) if (Math.abs(A[i][k]) > maxr) {\n                maxr = Math.abs(A[i][k]);\n                r = i;\n            }\n            // no need for q, here: all array indexing is absolute.\n            // pivot k, r\n            {\n                int tmp = piv[k];\n                piv[k] = piv[r];\n                piv[r] = tmp;\n            }\n            for (int i = 0; i < n; i++) {\n                double tmp = A[k][i];\n                A[k][i] = A[r][i];\n                A[r][i] = tmp;\n            }\n            // adjust remainder\n            if (A[k][k] != 0.) {\n                for (int i = k + 1; i < n; i++) {\n                    A[i][k] /= A[k][k];\n                    for (int j = k + 1; j < n; j++) A[i][j] -= A[i][k] * A[k][j];\n                }\n            }\n        }\n        // L-U extraction is done later, because java can't return 2\n        // values like matlab can.\n        return piv;\n        /*\n\t  state:\n\n\t  - L is the lower half of this matrix, with 1's on the main\n\t  diagonal, and 0's in the upper half\n\n\t  - U is the upper half of this matrix, with the diagonal\n\t  as-is, and 0's in the lower half\n\n\t  - A is the original matrix\n\n\t  - P is a matrix with all zeros, except in row i, column\n\t  pi[i] is a 1\n\n\t  then:\n\n\t  PA = LU\n\n\t*/\n    }\n\n    /**\n     *  Solves the nonsingular lower-triangular system Lx=b.  See van\n     * \tLoan, p. 211.\n     * \t@param L\n     * \t@param b\n     * \t@return x\n     * \t@exception IllegalArgumentException if L isn't square, or b\n     * \tisn't the same size\n     */\n    private static double[] LTriSol(double[][] L, double[] b) {\n        // make sure it's an acceptable size\n        int n = L.length;\n        if (L[0].length != n || b.length != n)\n            throw new IllegalArgumentException(\"Wrong size\");\n        // make vector for output\n        double[] x = new double[n];\n        // loop to create x\n        for (int j = 0; j < n - 1; j++) {\n            x[j] = b[j] / L[j][j];\n            for (int i = j + 1; i < n; i++) b[i] -= L[i][j] * x[j];\n        }\n        x[n - 1] = b[n - 1] / L[n - 1][n - 1];\n        // return it\n        return x;\n    }\n\n    /**\n     *  Solves the nonsingular upper-triangular system Ux=b.  See van\n     * \tLoan, p. 212.\n     * \t@param U\n     * \t@param b\n     * \t@return x\n     * \t@exception IllegalArgumentException if L isn't square, or b\n     * \tisn't the same size\n     */\n    private static double[] UTriSol(double[][] U, double[] b) {\n        // make sure it's an acceptable size\n        int n = U.length;\n        if (U[0].length != n || b.length != n)\n            throw new IllegalArgumentException(\"Wrong size\");\n        // make vector for output\n        double[] x = new double[n];\n        // loop to create x\n        for (int j = n - 1; j > 0; j--) {\n            x[j] = b[j] / U[j][j];\n            for (int i = 0; i < j; i++) b[i] -= x[j] * U[i][j];\n        }\n        x[0] = b[0] / U[0][0];\n        // return it\n        return x;\n    }\n\n    /**\n     *  Solve the general equation Ax=b for x, given square matrix A\n     * \tand vector b.  (Intended to be partially compatible with\n     * \tNumerical Recipes' <code>gaussj</code>, which it replaces.)\n     * \tSee van Loan for derivation.\n     * \t@param A the \"A\" matrix in Ax=b\n     * \t@param b the \"b\" matrix in Ax=b; it is replaced with x\n     * \t@exception IllegalArgumentException if A is not square, or b\n     * \tis a different size\n     * \t@exception SingularMatrixException if A is singular\n     */\n    public static double[] solveNxN(double[][] A, double[] b) throws SingularMatrixException {\n        // is it a 2x2?  i know a really fast way to do those...\n        if (A.length == 2 && A[0].length == 2 && b.length == 2)\n            return solve2x2(A, b);\n        // make sure it's an acceptable size\n        int n = A.length;\n        if (A[0].length != n || b.length != n)\n            throw new IllegalArgumentException(\"Wrong size\");\n        // LU decompose, and get pi (this smashes A)\n        int[] piv = GEpiv(A);\n        // extract L and U\n        double[][] L = new double[n][n];\n        double[][] U = new double[n][n];\n        for (int i = 0; i < n; i++) for (int j = 0; j < n; j++) if (j >= i)\n            U[i][j] = A[i][j];\n        else\n            L[i][j] = A[i][j];\n        for (int i = 0; i < n; i++) L[i][i] = 1.;\n        // with polyfit in its current setup, piv is n-1:0.  possible\n        // to take advantage of this?  sure, save allocating [n] and\n        // one loop and just say: for (int i=0; i<n; i++) { double tmp\n        // = b[i]; b[i] = b[n-1-i]; b[n-1-i] = tmp; } (i won't use\n        // this until i'm convinced piv is ALWAYS n-1:0, though.)\n        // pivot b using piv.\n        {\n            double[] tmp = new double[n];\n            for (int i = 0; i < n; i++) tmp[i] = b[piv[i]];\n            for (int i = 0; i < n; i++) b[i] = tmp[i];\n        }\n        // back-substitute\n        double[] y = LTriSol(L, b);\n        double[] x = UTriSol(U, y);\n        // return it\n        return x;\n    }\n\n    /**\n     *  A special case of <code>solveNxN</code> for 2x2 matrices.  In\n     * \tthe equation Ax=b, given A and b, x is found; its value is\n     * \twritten back into b.  Direct substitution is used, so it is\n     * \tvery fast (only 10 floating-point operations).\n     * \t@param A the \"A\" matrix in Ax=b; it is untouched\n     * \t@param b the \"b\" matrix in Ax=b; it is replaced with x\n     * \t@exception IllegalArgumentException if A is any size other\n     * \tthan 2x2 or b is any size other than 2\n     * \t@exception SingularMatrixException if A is singular\n     */\n    public static double[] solve2x2(double[][] A, double[] b) throws SingularMatrixException {\n        // make sure it's 2x2\n        if (A.length != 2 || A[0].length != 2 || b.length != 2)\n            throw new IllegalArgumentException(\"Wrong size\");\n        try {\n            // compute result\n            double x0 = (b[1] - b[0] * A[1][1] / A[0][1]) / (A[1][0] - A[1][1] * A[0][0] / A[0][1]);\n            double x1 = (b[0] - A[0][0] * x0) / A[0][1];\n            // return it in an array\n            return new double[] { x0, x1 };\n            // watch for singularities (== divide-by-zeros)\n        } catch (ArithmeticException ae) {\n            throw new SingularMatrixException();\n        }\n    }\n\n    /**\n     *  A least-squares solver.  See <i>Introduction to\n     *         Algorithms</i>, Cormen, Leiserson, and Rivest, pp. 768-771.\n     *         This uses <code>solveNxN</code> or <code>solve2x2</code>.\n     * \t@param s an object that can evaluate the basis functions\n     * \t@param x the x-coordinates of the data\n     * \t@param y the y-coordinates of the data\n     * \t@return the coefficients of the basis functions\n     * \t@exception SingularMatrixException (can this happen?)\n     */\n    public static double[] leastSquares(Function s, double[] x, double[] y) throws SingularMatrixException {\n        // n = nr of (x,y) points; m = nr of basis functions\n        int n = x.length;\n        int m = s.f(0.).length;\n        // A: each row is f(x[i]), x.length rows (A is n x m)\n        double[][] A = new double[n][];\n        for (int i = 0; i < n; i++) A[i] = s.f(x[i]);\n        // now, compute coefficients c by solving (A^t A) c = A^t y\n        // compute S = A^t A\n        double[][] S = new double[m][m];\n        for (int i = 0; i < m; i++) {\n            for (int j = 0; j <= i; j++) {\n                S[i][j] = 0.;\n                for (int k = 0; k < n; k++) S[i][j] += A[k][i] * A[k][j];\n                // result is symmetric, so save the effort\n                S[j][i] = S[i][j];\n            }\n        }\n        // compute T = A^t y\n        double[] T = new double[m];\n        for (int i = 0; i < m; i++) {\n            T[i] = 0.;\n            for (int j = 0; j < n; j++) T[i] += A[j][i] * y[j];\n        }\n        // solve Sx=T; this throws SingularMatrixException\n        return solveNxN(S, T);\n    }\n}\n",
		"id": "/EvoSuiteBenchmark/35_corina/src/main/java/corina/index/Solver_0Test.java",
		"test_prompt": "// Solver_0Test.java\n// This file is part of Corina.\n//\n// Corina is free software; you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation; either version 2 of the License, or\n// (at your option) any later version.\n//\n// Corina is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Corina; if not, write to the Free Software\n// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n//\n// Copyright 2001 Ken Harris <kbh7@cornell.edu>\n//\npackage corina.index;\n\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link Solver}.\n* It contains ten unit test cases for the {@link Solver#solveNxN(double[][], double[])} method.\n*/\nclass Solver_0Test {"
	},
	{
		"original_code": "// Solver.java\n//\n// This file is part of Corina.\n//\n// Corina is free software; you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation; either version 2 of the License, or\n// (at your option) any later version.\n//\n// Corina is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Corina; if not, write to the Free Software\n// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n//\n// Copyright 2001 Ken Harris <kbh7@cornell.edu>\n//\npackage corina.index;\n\n/**\n *    A collection of matrix solvers.\n *\n *    <p><code>solveNxN</code> will solve any square matrix system.  In\n *    solving Ax=b, it will destroy A (and b?).  The\n *    routines were adapted from chapter 6 of <i>Introduction to\n *    Scientific Computing</i>, second edition, Charles van Loan.  The\n *    solver uses LU decomposition with pivoting.</p>\n *\n *    <p>Also contains a least-squares fitter,\n *    <code>leastSquares()</code>, from <i>Introduction to\n *    Algorithms</i>, Cormen, Leiserson, and Rivest, pp. 768-771, which\n *    uses the matrix solvers.</p>\n *\n *    @see Function\n *    @see SingularMatrixException\n *\n *    @author Ken Harris &lt;kbh7 <i style=\"color: gray\">at</i> cornell <i style=\"color: gray\">dot</i> edu&gt;\n *    @version $Id: Solver.java,v 1.2 2004/01/18 18:03:08 aaron Exp $\n */\npublic class Solver {\n\n    private Solver() {\n        // don't instantiate me\n    }\n\n    /**\n     *  Lower-upper decomposition of a matrix; returns the permutation\n     * \tvector.  See van Loan, p. 228.\n     * \t@param A the matrix to decompose\n     * \t@return the permutation vector\n     * \t@exception IllegalArgumentException if A is not square\n     * \t@exception SingularMatrixException if A is singular\n     */\n    private static int[] GEpiv(double[][] A) throws SingularMatrixException {\n        // if there's ever a licensing issue with this code, see\n        // octave.  it uses the free LAPACK for this and many other\n        // routines.\n        // make sure it's square\n        int n = A.length;\n        if (A[0].length != n)\n            throw new IllegalArgumentException(\"Not square\");\n        int[] piv = new int[n];\n        for (int i = 0; i < n; i++) piv[i] = i;\n        for (int k = 0; k < n - 1; k++) {\n            // get max(A[k:n][k])\n            double maxr = 0.;\n            int r = 0;\n            for (int i = k; i < n; i++) if (Math.abs(A[i][k]) > maxr) {\n                maxr = Math.abs(A[i][k]);\n                r = i;\n            }\n            // no need for q, here: all array indexing is absolute.\n            // pivot k, r\n            {\n                int tmp = piv[k];\n                piv[k] = piv[r];\n                piv[r] = tmp;\n            }\n            for (int i = 0; i < n; i++) {\n                double tmp = A[k][i];\n                A[k][i] = A[r][i];\n                A[r][i] = tmp;\n            }\n            // adjust remainder\n            if (A[k][k] != 0.) {\n                for (int i = k + 1; i < n; i++) {\n                    A[i][k] /= A[k][k];\n                    for (int j = k + 1; j < n; j++) A[i][j] -= A[i][k] * A[k][j];\n                }\n            }\n        }\n        // L-U extraction is done later, because java can't return 2\n        // values like matlab can.\n        return piv;\n        /*\n\t  state:\n\n\t  - L is the lower half of this matrix, with 1's on the main\n\t  diagonal, and 0's in the upper half\n\n\t  - U is the upper half of this matrix, with the diagonal\n\t  as-is, and 0's in the lower half\n\n\t  - A is the original matrix\n\n\t  - P is a matrix with all zeros, except in row i, column\n\t  pi[i] is a 1\n\n\t  then:\n\n\t  PA = LU\n\n\t*/\n    }\n\n    /**\n     *  Solves the nonsingular lower-triangular system Lx=b.  See van\n     * \tLoan, p. 211.\n     * \t@param L\n     * \t@param b\n     * \t@return x\n     * \t@exception IllegalArgumentException if L isn't square, or b\n     * \tisn't the same size\n     */\n    private static double[] LTriSol(double[][] L, double[] b) {\n        // make sure it's an acceptable size\n        int n = L.length;\n        if (L[0].length != n || b.length != n)\n            throw new IllegalArgumentException(\"Wrong size\");\n        // make vector for output\n        double[] x = new double[n];\n        // loop to create x\n        for (int j = 0; j < n - 1; j++) {\n            x[j] = b[j] / L[j][j];\n            for (int i = j + 1; i < n; i++) b[i] -= L[i][j] * x[j];\n        }\n        x[n - 1] = b[n - 1] / L[n - 1][n - 1];\n        // return it\n        return x;\n    }\n\n    /**\n     *  Solves the nonsingular upper-triangular system Ux=b.  See van\n     * \tLoan, p. 212.\n     * \t@param U\n     * \t@param b\n     * \t@return x\n     * \t@exception IllegalArgumentException if L isn't square, or b\n     * \tisn't the same size\n     */\n    private static double[] UTriSol(double[][] U, double[] b) {\n        // make sure it's an acceptable size\n        int n = U.length;\n        if (U[0].length != n || b.length != n)\n            throw new IllegalArgumentException(\"Wrong size\");\n        // make vector for output\n        double[] x = new double[n];\n        // loop to create x\n        for (int j = n - 1; j > 0; j--) {\n            x[j] = b[j] / U[j][j];\n            for (int i = 0; i < j; i++) b[i] -= x[j] * U[i][j];\n        }\n        x[0] = b[0] / U[0][0];\n        // return it\n        return x;\n    }\n\n    /**\n     *  Solve the general equation Ax=b for x, given square matrix A\n     * \tand vector b.  (Intended to be partially compatible with\n     * \tNumerical Recipes' <code>gaussj</code>, which it replaces.)\n     * \tSee van Loan for derivation.\n     * \t@param A the \"A\" matrix in Ax=b\n     * \t@param b the \"b\" matrix in Ax=b; it is replaced with x\n     * \t@exception IllegalArgumentException if A is not square, or b\n     * \tis a different size\n     * \t@exception SingularMatrixException if A is singular\n     */\n    public static double[] solveNxN(double[][] A, double[] b) throws SingularMatrixException {\n        // is it a 2x2?  i know a really fast way to do those...\n        if (A.length == 2 && A[0].length == 2 && b.length == 2)\n            return solve2x2(A, b);\n        // make sure it's an acceptable size\n        int n = A.length;\n        if (A[0].length != n || b.length != n)\n            throw new IllegalArgumentException(\"Wrong size\");\n        // LU decompose, and get pi (this smashes A)\n        int[] piv = GEpiv(A);\n        // extract L and U\n        double[][] L = new double[n][n];\n        double[][] U = new double[n][n];\n        for (int i = 0; i < n; i++) for (int j = 0; j < n; j++) if (j >= i)\n            U[i][j] = A[i][j];\n        else\n            L[i][j] = A[i][j];\n        for (int i = 0; i < n; i++) L[i][i] = 1.;\n        // with polyfit in its current setup, piv is n-1:0.  possible\n        // to take advantage of this?  sure, save allocating [n] and\n        // one loop and just say: for (int i=0; i<n; i++) { double tmp\n        // = b[i]; b[i] = b[n-1-i]; b[n-1-i] = tmp; } (i won't use\n        // this until i'm convinced piv is ALWAYS n-1:0, though.)\n        // pivot b using piv.\n        {\n            double[] tmp = new double[n];\n            for (int i = 0; i < n; i++) tmp[i] = b[piv[i]];\n            for (int i = 0; i < n; i++) b[i] = tmp[i];\n        }\n        // back-substitute\n        double[] y = LTriSol(L, b);\n        double[] x = UTriSol(U, y);\n        // return it\n        return x;\n    }\n\n    /**\n     *  A special case of <code>solveNxN</code> for 2x2 matrices.  In\n     * \tthe equation Ax=b, given A and b, x is found; its value is\n     * \twritten back into b.  Direct substitution is used, so it is\n     * \tvery fast (only 10 floating-point operations).\n     * \t@param A the \"A\" matrix in Ax=b; it is untouched\n     * \t@param b the \"b\" matrix in Ax=b; it is replaced with x\n     * \t@exception IllegalArgumentException if A is any size other\n     * \tthan 2x2 or b is any size other than 2\n     * \t@exception SingularMatrixException if A is singular\n     */\n    public static double[] solve2x2(double[][] A, double[] b) throws SingularMatrixException {\n        // make sure it's 2x2\n        if (A.length != 2 || A[0].length != 2 || b.length != 2)\n            throw new IllegalArgumentException(\"Wrong size\");\n        try {\n            // compute result\n            double x0 = (b[1] - b[0] * A[1][1] / A[0][1]) / (A[1][0] - A[1][1] * A[0][0] / A[0][1]);\n            double x1 = (b[0] - A[0][0] * x0) / A[0][1];\n            // return it in an array\n            return new double[] { x0, x1 };\n            // watch for singularities (== divide-by-zeros)\n        } catch (ArithmeticException ae) {\n            throw new SingularMatrixException();\n        }\n    }\n\n    /**\n     *  A least-squares solver.  See <i>Introduction to\n     *         Algorithms</i>, Cormen, Leiserson, and Rivest, pp. 768-771.\n     *         This uses <code>solveNxN</code> or <code>solve2x2</code>.\n     * \t@param s an object that can evaluate the basis functions\n     * \t@param x the x-coordinates of the data\n     * \t@param y the y-coordinates of the data\n     * \t@return the coefficients of the basis functions\n     * \t@exception SingularMatrixException (can this happen?)\n     */\n    public static double[] leastSquares(Function s, double[] x, double[] y) throws SingularMatrixException {\n        // n = nr of (x,y) points; m = nr of basis functions\n        int n = x.length;\n        int m = s.f(0.).length;\n        // A: each row is f(x[i]), x.length rows (A is n x m)\n        double[][] A = new double[n][];\n        for (int i = 0; i < n; i++) A[i] = s.f(x[i]);\n        // now, compute coefficients c by solving (A^t A) c = A^t y\n        // compute S = A^t A\n        double[][] S = new double[m][m];\n        for (int i = 0; i < m; i++) {\n            for (int j = 0; j <= i; j++) {\n                S[i][j] = 0.;\n                for (int k = 0; k < n; k++) S[i][j] += A[k][i] * A[k][j];\n                // result is symmetric, so save the effort\n                S[j][i] = S[i][j];\n            }\n        }\n        // compute T = A^t y\n        double[] T = new double[m];\n        for (int i = 0; i < m; i++) {\n            T[i] = 0.;\n            for (int j = 0; j < n; j++) T[i] += A[j][i] * y[j];\n        }\n        // solve Sx=T; this throws SingularMatrixException\n        return solveNxN(S, T);\n    }\n}\n",
		"id": "/EvoSuiteBenchmark/35_corina/src/main/java/corina/index/Solver_1Test.java",
		"test_prompt": "// Solver_1Test.java\n// This file is part of Corina.\n//\n// Corina is free software; you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation; either version 2 of the License, or\n// (at your option) any later version.\n//\n// Corina is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Corina; if not, write to the Free Software\n// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n//\n// Copyright 2001 Ken Harris <kbh7@cornell.edu>\n//\npackage corina.index;\n\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link Solver}.\n* It contains ten unit test cases for the {@link Solver#solve2x2(double[][], double[])} method.\n*/\nclass Solver_1Test {"
	},
	{
		"original_code": "// Solver.java\n//\n// This file is part of Corina.\n//\n// Corina is free software; you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation; either version 2 of the License, or\n// (at your option) any later version.\n//\n// Corina is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Corina; if not, write to the Free Software\n// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n//\n// Copyright 2001 Ken Harris <kbh7@cornell.edu>\n//\npackage corina.index;\n\n/**\n *    A collection of matrix solvers.\n *\n *    <p><code>solveNxN</code> will solve any square matrix system.  In\n *    solving Ax=b, it will destroy A (and b?).  The\n *    routines were adapted from chapter 6 of <i>Introduction to\n *    Scientific Computing</i>, second edition, Charles van Loan.  The\n *    solver uses LU decomposition with pivoting.</p>\n *\n *    <p>Also contains a least-squares fitter,\n *    <code>leastSquares()</code>, from <i>Introduction to\n *    Algorithms</i>, Cormen, Leiserson, and Rivest, pp. 768-771, which\n *    uses the matrix solvers.</p>\n *\n *    @see Function\n *    @see SingularMatrixException\n *\n *    @author Ken Harris &lt;kbh7 <i style=\"color: gray\">at</i> cornell <i style=\"color: gray\">dot</i> edu&gt;\n *    @version $Id: Solver.java,v 1.2 2004/01/18 18:03:08 aaron Exp $\n */\npublic class Solver {\n\n    private Solver() {\n        // don't instantiate me\n    }\n\n    /**\n     *  Lower-upper decomposition of a matrix; returns the permutation\n     * \tvector.  See van Loan, p. 228.\n     * \t@param A the matrix to decompose\n     * \t@return the permutation vector\n     * \t@exception IllegalArgumentException if A is not square\n     * \t@exception SingularMatrixException if A is singular\n     */\n    private static int[] GEpiv(double[][] A) throws SingularMatrixException {\n        // if there's ever a licensing issue with this code, see\n        // octave.  it uses the free LAPACK for this and many other\n        // routines.\n        // make sure it's square\n        int n = A.length;\n        if (A[0].length != n)\n            throw new IllegalArgumentException(\"Not square\");\n        int[] piv = new int[n];\n        for (int i = 0; i < n; i++) piv[i] = i;\n        for (int k = 0; k < n - 1; k++) {\n            // get max(A[k:n][k])\n            double maxr = 0.;\n            int r = 0;\n            for (int i = k; i < n; i++) if (Math.abs(A[i][k]) > maxr) {\n                maxr = Math.abs(A[i][k]);\n                r = i;\n            }\n            // no need for q, here: all array indexing is absolute.\n            // pivot k, r\n            {\n                int tmp = piv[k];\n                piv[k] = piv[r];\n                piv[r] = tmp;\n            }\n            for (int i = 0; i < n; i++) {\n                double tmp = A[k][i];\n                A[k][i] = A[r][i];\n                A[r][i] = tmp;\n            }\n            // adjust remainder\n            if (A[k][k] != 0.) {\n                for (int i = k + 1; i < n; i++) {\n                    A[i][k] /= A[k][k];\n                    for (int j = k + 1; j < n; j++) A[i][j] -= A[i][k] * A[k][j];\n                }\n            }\n        }\n        // L-U extraction is done later, because java can't return 2\n        // values like matlab can.\n        return piv;\n        /*\n\t  state:\n\n\t  - L is the lower half of this matrix, with 1's on the main\n\t  diagonal, and 0's in the upper half\n\n\t  - U is the upper half of this matrix, with the diagonal\n\t  as-is, and 0's in the lower half\n\n\t  - A is the original matrix\n\n\t  - P is a matrix with all zeros, except in row i, column\n\t  pi[i] is a 1\n\n\t  then:\n\n\t  PA = LU\n\n\t*/\n    }\n\n    /**\n     *  Solves the nonsingular lower-triangular system Lx=b.  See van\n     * \tLoan, p. 211.\n     * \t@param L\n     * \t@param b\n     * \t@return x\n     * \t@exception IllegalArgumentException if L isn't square, or b\n     * \tisn't the same size\n     */\n    private static double[] LTriSol(double[][] L, double[] b) {\n        // make sure it's an acceptable size\n        int n = L.length;\n        if (L[0].length != n || b.length != n)\n            throw new IllegalArgumentException(\"Wrong size\");\n        // make vector for output\n        double[] x = new double[n];\n        // loop to create x\n        for (int j = 0; j < n - 1; j++) {\n            x[j] = b[j] / L[j][j];\n            for (int i = j + 1; i < n; i++) b[i] -= L[i][j] * x[j];\n        }\n        x[n - 1] = b[n - 1] / L[n - 1][n - 1];\n        // return it\n        return x;\n    }\n\n    /**\n     *  Solves the nonsingular upper-triangular system Ux=b.  See van\n     * \tLoan, p. 212.\n     * \t@param U\n     * \t@param b\n     * \t@return x\n     * \t@exception IllegalArgumentException if L isn't square, or b\n     * \tisn't the same size\n     */\n    private static double[] UTriSol(double[][] U, double[] b) {\n        // make sure it's an acceptable size\n        int n = U.length;\n        if (U[0].length != n || b.length != n)\n            throw new IllegalArgumentException(\"Wrong size\");\n        // make vector for output\n        double[] x = new double[n];\n        // loop to create x\n        for (int j = n - 1; j > 0; j--) {\n            x[j] = b[j] / U[j][j];\n            for (int i = 0; i < j; i++) b[i] -= x[j] * U[i][j];\n        }\n        x[0] = b[0] / U[0][0];\n        // return it\n        return x;\n    }\n\n    /**\n     *  Solve the general equation Ax=b for x, given square matrix A\n     * \tand vector b.  (Intended to be partially compatible with\n     * \tNumerical Recipes' <code>gaussj</code>, which it replaces.)\n     * \tSee van Loan for derivation.\n     * \t@param A the \"A\" matrix in Ax=b\n     * \t@param b the \"b\" matrix in Ax=b; it is replaced with x\n     * \t@exception IllegalArgumentException if A is not square, or b\n     * \tis a different size\n     * \t@exception SingularMatrixException if A is singular\n     */\n    public static double[] solveNxN(double[][] A, double[] b) throws SingularMatrixException {\n        // is it a 2x2?  i know a really fast way to do those...\n        if (A.length == 2 && A[0].length == 2 && b.length == 2)\n            return solve2x2(A, b);\n        // make sure it's an acceptable size\n        int n = A.length;\n        if (A[0].length != n || b.length != n)\n            throw new IllegalArgumentException(\"Wrong size\");\n        // LU decompose, and get pi (this smashes A)\n        int[] piv = GEpiv(A);\n        // extract L and U\n        double[][] L = new double[n][n];\n        double[][] U = new double[n][n];\n        for (int i = 0; i < n; i++) for (int j = 0; j < n; j++) if (j >= i)\n            U[i][j] = A[i][j];\n        else\n            L[i][j] = A[i][j];\n        for (int i = 0; i < n; i++) L[i][i] = 1.;\n        // with polyfit in its current setup, piv is n-1:0.  possible\n        // to take advantage of this?  sure, save allocating [n] and\n        // one loop and just say: for (int i=0; i<n; i++) { double tmp\n        // = b[i]; b[i] = b[n-1-i]; b[n-1-i] = tmp; } (i won't use\n        // this until i'm convinced piv is ALWAYS n-1:0, though.)\n        // pivot b using piv.\n        {\n            double[] tmp = new double[n];\n            for (int i = 0; i < n; i++) tmp[i] = b[piv[i]];\n            for (int i = 0; i < n; i++) b[i] = tmp[i];\n        }\n        // back-substitute\n        double[] y = LTriSol(L, b);\n        double[] x = UTriSol(U, y);\n        // return it\n        return x;\n    }\n\n    /**\n     *  A special case of <code>solveNxN</code> for 2x2 matrices.  In\n     * \tthe equation Ax=b, given A and b, x is found; its value is\n     * \twritten back into b.  Direct substitution is used, so it is\n     * \tvery fast (only 10 floating-point operations).\n     * \t@param A the \"A\" matrix in Ax=b; it is untouched\n     * \t@param b the \"b\" matrix in Ax=b; it is replaced with x\n     * \t@exception IllegalArgumentException if A is any size other\n     * \tthan 2x2 or b is any size other than 2\n     * \t@exception SingularMatrixException if A is singular\n     */\n    public static double[] solve2x2(double[][] A, double[] b) throws SingularMatrixException {\n        // make sure it's 2x2\n        if (A.length != 2 || A[0].length != 2 || b.length != 2)\n            throw new IllegalArgumentException(\"Wrong size\");\n        try {\n            // compute result\n            double x0 = (b[1] - b[0] * A[1][1] / A[0][1]) / (A[1][0] - A[1][1] * A[0][0] / A[0][1]);\n            double x1 = (b[0] - A[0][0] * x0) / A[0][1];\n            // return it in an array\n            return new double[] { x0, x1 };\n            // watch for singularities (== divide-by-zeros)\n        } catch (ArithmeticException ae) {\n            throw new SingularMatrixException();\n        }\n    }\n\n    /**\n     *  A least-squares solver.  See <i>Introduction to\n     *         Algorithms</i>, Cormen, Leiserson, and Rivest, pp. 768-771.\n     *         This uses <code>solveNxN</code> or <code>solve2x2</code>.\n     * \t@param s an object that can evaluate the basis functions\n     * \t@param x the x-coordinates of the data\n     * \t@param y the y-coordinates of the data\n     * \t@return the coefficients of the basis functions\n     * \t@exception SingularMatrixException (can this happen?)\n     */\n    public static double[] leastSquares(Function s, double[] x, double[] y) throws SingularMatrixException {\n        // n = nr of (x,y) points; m = nr of basis functions\n        int n = x.length;\n        int m = s.f(0.).length;\n        // A: each row is f(x[i]), x.length rows (A is n x m)\n        double[][] A = new double[n][];\n        for (int i = 0; i < n; i++) A[i] = s.f(x[i]);\n        // now, compute coefficients c by solving (A^t A) c = A^t y\n        // compute S = A^t A\n        double[][] S = new double[m][m];\n        for (int i = 0; i < m; i++) {\n            for (int j = 0; j <= i; j++) {\n                S[i][j] = 0.;\n                for (int k = 0; k < n; k++) S[i][j] += A[k][i] * A[k][j];\n                // result is symmetric, so save the effort\n                S[j][i] = S[i][j];\n            }\n        }\n        // compute T = A^t y\n        double[] T = new double[m];\n        for (int i = 0; i < m; i++) {\n            T[i] = 0.;\n            for (int j = 0; j < n; j++) T[i] += A[j][i] * y[j];\n        }\n        // solve Sx=T; this throws SingularMatrixException\n        return solveNxN(S, T);\n    }\n}\n",
		"id": "/EvoSuiteBenchmark/35_corina/src/main/java/corina/index/Solver_2Test.java",
		"test_prompt": "// Solver_2Test.java\n// This file is part of Corina.\n//\n// Corina is free software; you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation; either version 2 of the License, or\n// (at your option) any later version.\n//\n// Corina is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Corina; if not, write to the Free Software\n// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n//\n// Copyright 2001 Ken Harris <kbh7@cornell.edu>\n//\npackage corina.index;\n\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link Solver}.\n* It contains ten unit test cases for the {@link Solver#leastSquares(Function, double[], double[])} method.\n*/\nclass Solver_2Test {"
	},
	{
		"original_code": "// HighPass.java\n//\n// This file is part of Corina.\n//\n// Corina is free software; you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation; either version 2 of the License, or\n// (at your option) any later version.\n//\n// Corina is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Corina; if not, write to the Free Software\n// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n//\n// Copyright 2001 Ken Harris <kbh7@cornell.edu>\n//\npackage corina.index;\n\nimport java.text.MessageFormat;\nimport java.util.ArrayList;\nimport java.util.List;\nimport corina.Sample;\nimport corina.core.App;\nimport corina.ui.I18n;\nimport corina.util.StringUtils;\n\n/**\n *   A simple high-pass filter.\n *\n *   <p>The filter is a simple weighted filter; a graphics jock might\n *   call this \"Gaussian smoothing\" or a \"convolution matrix\".</p>\n *\n *   <p>The weights are taken from the property\n *   <code>corina.index.lowpass</code>; if it isn't set, the filter \"1 2\n *   4 2 1\" is used.  The weights must be integers, separated by spaces.\n *   If there are an even number of weights, the last one is ignored.\n *   The divisor is the sum of all the weights.</p>\n *\n *   <p>Cook makes reference to low-pass filtering as applied to\n *   \"growth-trend estimation\" in <i>Methods of Dendrochronology</i>,\n *   Cook and Kairiukstis, pp. 110-111.  (At\n *   <a href=\"http://www.amazon.com/exec/obidos/ASIN/0792305868/o/qid=993490628/sr=2-1/ref=aps_sr_b_1_1/104-5614136-5731905\">Amazon.com</a>,\n *   it costs a small fortune.)</p>\n *\n *   @author Ken Harris &lt;kbh7 <i style=\"color: gray\">at</i> cornell <i style=\"color: gray\">dot</i> edu&gt;\n *   @version $Id: HighPass.java,v 1.6 2005/01/24 03:09:30 aaron Exp $\n */\npublic class HighPass extends Index {\n\n    /**\n     *       Create a new high-pass filter for the given sample.\n     *\n     *       @param s the Sample to index\n     */\n    public HighPass(Sample s) {\n        super(s);\n        // parse weights; assumes weights.length is odd\n        weights = StringUtils.extractInts(App.prefs.getPref(\"corina.index.lowpass\", \"1 2 4 2 1\"));\n    }\n\n    private int[] weights;\n\n    /**\n     * Compute the index.\n     */\n    public void index() {\n        data = filter(source.data, weights);\n    }\n\n    // a discrete high-pass filter.\n    // used by: highpass.run(), floating.run(), tscore.preamble()\n    // -- array/list dichotomy problem?  no, seems ok.\n    // -- implement special case for w[i]==1?  (floating and t-score use it this way.)\n    public static List filter(List input, int[] w) {\n        int n = input.size();\n        List output = new ArrayList(n);\n        int nw = (w.length - 1) / 2;\n        // sum the weights -- (extract method?)\n        // -- (apply '+ w)\n        int sum = 0;\n        for (int i = 0; i < w.length; i++) sum += w[i];\n        for (int i = 0; i < n; i++) {\n            double x = 0, adj = 0;\n            int j = -nw;\n            do {\n                if (i + j >= 0 && i + j < n)\n                    // add value, weighted, or ...\n                    x += ((Number) input.get(i + j)).doubleValue() * w[nw + j];\n                else\n                    // ... discount weights by that amount\n                    adj += w[nw + j];\n                j++;\n            } while (j <= nw);\n            double value;\n            if (sum - adj == 0) {\n                // was: ... || x==0\n                value = 0.0;\n            } else {\n                value = x / (sum - adj);\n            }\n            output.add(new Double(value));\n        }\n        return output;\n    }\n\n    /**\n     *       The name of this filter.  This lists the weights, separated by\n     *       hyphens, so the default filter is called \"High-pass\n     *       (1-2-4-2-1)\".\n     */\n    public String getName() {\n        // this is basically the opposite of StringUtils.extractInts() -- consolidate?\n        StringBuffer buf = new StringBuffer();\n        for (int i = 0; i < weights.length; i++) {\n            buf.append(weights[i]);\n            if (i < weights.length - 1)\n                buf.append('-');\n        }\n        // format, and return\n        return MessageFormat.format(I18n.getText(\"high_pass\"), new Object[] { buf.toString() });\n    }\n\n    public int getID() {\n        return 9;\n    }\n}\n",
		"id": "/EvoSuiteBenchmark/35_corina/src/main/java/corina/index/HighPass.java",
		"test_prompt": "// HighPassTest.java\n// This file is part of Corina.\n//\n// Corina is free software; you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation; either version 2 of the License, or\n// (at your option) any later version.\n//\n// Corina is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Corina; if not, write to the Free Software\n// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n//\n// Copyright 2001 Ken Harris <kbh7@cornell.edu>\n//\npackage corina.index;\n\nimport java.text.MessageFormat;\nimport java.util.ArrayList;\nimport java.util.List;\nimport corina.Sample;\nimport corina.core.App;\nimport corina.ui.I18n;\nimport corina.util.StringUtils;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link HighPass}.\n* It contains ten unit test cases for the {@link HighPass#filter(List, int[])} method.\n*/\nclass HighPassTest {"
	},
	{
		"original_code": "// Polynomial.java\n//\n// This file is part of Corina.\n//\n// Corina is free software; you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation; either version 2 of the License, or\n// (at your option) any later version.\n//\n// Corina is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Corina; if not, write to the Free Software\n// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n//\n// Copyright 2001 Ken Harris <kbh7@cornell.edu>\n//\npackage corina.index;\n\nimport corina.Sample;\nimport corina.ui.I18n;\nimport java.text.MessageFormat;\n\n/**\n *   A polynomial-fit index to a data sample.  The user specifies the\n *   degree of polynomial to use.\n *\n *   @author Ken Harris &lt;kbh7 <i style=\"color: gray\">at</i> cornell <i style=\"color: gray\">dot</i> edu&gt;\n *   @version $Id: Polynomial.java,v 1.3 2004/01/18 18:03:08 aaron Exp $\n */\npublic class Polynomial extends Index implements Function {\n\n    // degree of polynomial to use\n    private int degree;\n\n    /**\n     *       Evaluate the basis polynomial at x, for\n     *       <code>Solver.leastSquares()</code>.  The basis polynomial is:\n     *       <blockquote><i>f(x) = [ 1 x x&#x00B2; x&#x00B3;\n     *                               ... x<sup>degree</sup> ]</i></blockquote>\n     *\n     *       @param x the x-value to evaluate the polynomial at\n     *       @return the y-value of the basis polynomial at this x\n     */\n    public double[] f(double x) {\n        double[] y = new double[degree + 1];\n        y[0] = 1.;\n        for (int i = 1; i < degree + 1; i++) y[i] = y[i - 1] * x;\n        return y;\n    }\n\n    /**\n     *       Construct a new polynomial fit from a sample, given a degree\n     *       polynomial to fit.\n     *\n     *       @param s the Sample to index\n     *       @param degree the degree polynomial to use\n     */\n    public Polynomial(Sample s, int degree) {\n        super(s);\n        this.degree = degree;\n    }\n\n    /**\n     *       Return the name, e.g., \"Polynomial (3&#x00B0;)\" for a\n     *       third-degree polynomial.\n     *\n     *       @return name of this index\n     */\n    public String getName() {\n        return MessageFormat.format(I18n.getText(\"polynomial\"), new Object[] { new Integer(degree) });\n    }\n\n    /**\n     * Compute the index.\n     */\n    public void index() {\n        // init x, y\n        int n = source.data.size();\n        double[] x = new double[n];\n        double[] y = new double[n];\n        for (int i = 0; i < n; i++) {\n            x[i] = (double) i;\n            y[i] = ((Number) source.data.get(i)).doubleValue();\n        }\n        // compute coeffs\n        double[] c = null;\n        try {\n            c = Solver.leastSquares(this, x, y);\n        } catch (SingularMatrixException sme) {\n            // how to deal with errors?\n            return;\n        }\n        // compute curve\n        for (int i = 0; i < n; i++) {\n            double[] f = f(x[i]);\n            double yp = 0.;\n            for (int j = 0; j < degree + 1; j++) yp += c[j] * f[j];\n            data.add(new Double(yp));\n        }\n    }\n\n    public int getID() {\n        return degree;\n    }\n}\n",
		"id": "/EvoSuiteBenchmark/35_corina/src/main/java/corina/index/Polynomial.java",
		"test_prompt": "// PolynomialTest.java\n// This file is part of Corina.\n//\n// Corina is free software; you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation; either version 2 of the License, or\n// (at your option) any later version.\n//\n// Corina is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Corina; if not, write to the Free Software\n// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n//\n// Copyright 2001 Ken Harris <kbh7@cornell.edu>\n//\npackage corina.index;\n\nimport corina.Sample;\nimport corina.ui.I18n;\nimport java.text.MessageFormat;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link Polynomial}.\n* It contains ten unit test cases for the {@link Polynomial#f(double)} method.\n*/\nclass PolynomialTest {"
	},
	{
		"original_code": "// Species.java\n//\n// This file is part of Corina.\n//\n// Corina is free software; you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation; either version 2 of the License, or\n// (at your option) any later version.\n//\n// Corina is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Corina; if not, write to the Free Software\n// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n//\n// Copyright 2001 Ken Harris <kbh7@cornell.edu>\n//\npackage corina;\n\nimport java.util.ArrayList;\nimport java.util.Enumeration;\nimport java.util.Iterator;\nimport java.util.List;\nimport java.util.NoSuchElementException;\nimport java.util.Properties;\nimport java.util.StringTokenizer;\nimport corina.core.App;\nimport corina.gui.Bug;\n\n// a complete list of all the species.\n// the file came from http://web.utk.edu/~grissino/species.htm\n// (I hope I didn't murder it too bad in converting it to a text file)\n// -- this is for latin name only.  it would be useful to have common name lookups, as well.\n// -- in SQL, this'd be TABLE latin_species ( key code, latin ), TABLE common_species ( code, common )\n// -- in java, i'll either need more hashes/tables, or a multi-column table, or ... ick.  where's lisp?\n// -- common names are in english only.  it would be useful to have non-english common names, as well.\n// -- e.g., \"i know the turkish common name, what's the latin?\"  or, \"here's a dataset of quercus, what would a german know?\"\n// -- this would go ESPECIALLY well with string-almost-equals, because random users probably won't\n// type in non-english vowels (umlauts and the like).\n/**\n *    Conversions between Latin names and 4-letter codes of species.\n *\n * <pre>\n * WRITEME:\n * -- where the list came from\n * -- how it's stored by this class\n * -- how/where it's stored on disk / in the jar\n * </pre>\n *\n *    <h2>Left to do</h2>\n *    <ul>\n *      <li>Javadoc\n *      <li>Make species, common private, with (safe) accessors\n *      <li>Move stringAlmostEquals(), etc., to util, if I'm going to keep it\n *      <li>Clean up closestSpecies(), if I'm going to keep it\n *      <li>Future: this is for Latin name only; common names would be useful\n *      <li>Future: make Species an instantiable class, with getCode()/getName()/etc. methods?\n *          Sure, and add Iterator getSpecies() method...\n *    </ul>\n *\n *    @author Ken Harris &lt;kbh7 <i style=\"color: gray\">at</i> cornell <i style=\"color: gray\">dot</i> edu&gt;\n *    @version $Id: Species.java,v 1.11 2005/01/24 03:09:33 aaron Exp $\n */\npublic class Species {\n\n    private Species() {\n        // don't instantiate me\n    }\n\n    // code => name hash\n    public static final Properties species = new Properties();\n\n    static {\n        try {\n            // load properties\n            ClassLoader cl = corina.Species.class.getClassLoader();\n            species.load(cl.getResource(\"species.properties\").openStream());\n        } catch (Exception e) {\n            // can't happen\n            // move to its own class so the exception can be caught and it can be unit tested?\n            new Bug(e);\n        }\n    }\n\n    public static String getCode(String s) throws UnknownSpeciesException {\n        Enumeration e = species.keys();\n        while (e.hasMoreElements()) {\n            String maybe = (String) e.nextElement();\n            if (stringAlmostEquals((String) species.get(maybe), s))\n                return maybe;\n        }\n        throw new UnknownSpeciesException();\n    }\n\n    /**\n     *       Look up a code in the list, and return its Latin name.\n     *\n     *       @param code the code to look up; usually 4 letters, all upper-case\n     *       @return the Latin name of that species\n     *       @exception UnknownSpeciesException if the code isn't in the list\n     */\n    public static String getName(String code) throws UnknownSpeciesException {\n        String name = (String) species.get(code);\n        if (name != null)\n            return name;\n        else\n            throw new UnknownSpeciesException();\n    }\n\n    // list of strings, like (\"PISP\" \"QUSP\")\n    public static final List common = new ArrayList();\n\n    public static Iterator getCommonCodes() {\n        return new Iterator() {\n\n            private int i = 0;\n\n            public boolean hasNext() {\n                return (i < common.size());\n            }\n\n            public Object next() throws NoSuchElementException {\n                if (i < common.size())\n                    return common.get(i++);\n                throw new NoSuchElementException();\n            }\n\n            public void remove() {\n                throw new UnsupportedOperationException();\n            }\n        };\n    }\n\n    // carol made this list for me; she also made a list of forest-speficic species (40 of 'em) --\n    // what to do with those?\n    private static final String DEFAULT = \"ABSP,ACSP,CDLI,CDSP,CUSP,FASP,FRSP,JUSP,\" + \"LASP,PCSP,PISP,QUSP,TABA,ULSP,UNKN\";\n\n    static {\n        // load most-common species\n        String s = App.prefs.getPref(\"corina.species.common\", DEFAULT);\n        StringTokenizer t = new StringTokenizer(s, \", \");\n        while (t.hasMoreTokens()) common.add(t.nextToken());\n        // sums will need the same sort of routine: \"QUSP,PISP\" => { \"QUSP\", \"PISP\" } => \"Quercus, Pinus\"\n    }\n\n    // ---- MOVE EVERYTHING BELOW HERE TO corina.util.Text! ----\n    // \"string-almost-equals\" algorithm.  good for finding typos.\n    // isn't species-specific, but i only plan to use it here.\n    // taken from: http://www.faqts.com/knowledge_base/view.phtml/aid/4418/fid/538\n    // (originally in python)\n    private static int stringDistance(String a, String b) {\n        int n = a.length();\n        int m = b.length();\n        int[][] c = new int[n + 1][m + 1];\n        for (int i = 0; i < n + 1; i++) c[i][0] = i;\n        for (int j = 0; j < m + 1; j++) c[0][j] = j;\n        for (int i = 1; i < n + 1; i++) {\n            for (int j = 1; j < m + 1; j++) {\n                int x = c[i - 1][j] + 1;\n                int y = c[i][j - 1] + 1;\n                int z = c[i - 1][j - 1];\n                if (a.charAt(i - 1) != b.charAt(j - 1))\n                    z++;\n                c[i][j] = Math.min(Math.min(x, y), z);\n            }\n        }\n        return c[n][m];\n    }\n\n    //    public static boolean stringAlmostEquals(String s1, String s2, int typosAllowed) {\n    //        return (stringDistance(s1, s2) <= typosAllowed);\n    //    }\n    public static boolean stringAlmostEquals(String s1, String s2) {\n        int distance = stringDistance(s1.toLowerCase(), s2.toLowerCase());\n        //        int minLength = Math.min(s1.length(), s2.length());\n        //        return (distance / (double) minLength <= 0.40); // what's a good error rate?\n        // then again, species strings are all about the same length\n        return distance <= 4;\n    }\n\n    // the closest species to |s|, or Unknown, if none is reasonably close\n    public static String closestSpecies(String s) throws UnknownSpeciesException {\n        // say the threshold is dist=5.\n        int fail = 6;\n        // make the compiler happy\n        String bestGuess = null;\n        Enumeration e = species.keys();\n        while (e.hasMoreElements()) {\n            String maybe = (String) e.nextElement();\n            int d = stringDistance((String) species.get(maybe), s);\n            if (d <= fail) {\n                fail = d;\n                bestGuess = (String) species.get(maybe);\n            }\n        }\n        if (fail < 6)\n            return bestGuess;\n        else\n            throw new UnknownSpeciesException();\n    }\n    // IDEA: this algorithm could be used to implement a findClosestMatch(String, String[]),\n    // which could be quite powerful.\n    // (it'd be a hell of a lot easier in lisp with #key, though.  what am i supposed to do,\n    // use reflection for every member-access?)\n}\n",
		"id": "/EvoSuiteBenchmark/35_corina/src/main/java/corina/Species_0Test.java",
		"test_prompt": "// Species_0Test.java\n// This file is part of Corina.\n//\n// Corina is free software; you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation; either version 2 of the License, or\n// (at your option) any later version.\n//\n// Corina is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Corina; if not, write to the Free Software\n// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n//\n// Copyright 2001 Ken Harris <kbh7@cornell.edu>\n//\npackage corina;\n\nimport java.util.ArrayList;\nimport java.util.Enumeration;\nimport java.util.Iterator;\nimport java.util.List;\nimport java.util.NoSuchElementException;\nimport java.util.Properties;\nimport java.util.StringTokenizer;\nimport corina.core.App;\nimport corina.gui.Bug;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link Species}.\n* It contains ten unit test cases for the {@link Species#getCode(String)} method.\n*/\nclass Species_0Test {"
	},
	{
		"original_code": "// Species.java\n//\n// This file is part of Corina.\n//\n// Corina is free software; you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation; either version 2 of the License, or\n// (at your option) any later version.\n//\n// Corina is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Corina; if not, write to the Free Software\n// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n//\n// Copyright 2001 Ken Harris <kbh7@cornell.edu>\n//\npackage corina;\n\nimport java.util.ArrayList;\nimport java.util.Enumeration;\nimport java.util.Iterator;\nimport java.util.List;\nimport java.util.NoSuchElementException;\nimport java.util.Properties;\nimport java.util.StringTokenizer;\nimport corina.core.App;\nimport corina.gui.Bug;\n\n// a complete list of all the species.\n// the file came from http://web.utk.edu/~grissino/species.htm\n// (I hope I didn't murder it too bad in converting it to a text file)\n// -- this is for latin name only.  it would be useful to have common name lookups, as well.\n// -- in SQL, this'd be TABLE latin_species ( key code, latin ), TABLE common_species ( code, common )\n// -- in java, i'll either need more hashes/tables, or a multi-column table, or ... ick.  where's lisp?\n// -- common names are in english only.  it would be useful to have non-english common names, as well.\n// -- e.g., \"i know the turkish common name, what's the latin?\"  or, \"here's a dataset of quercus, what would a german know?\"\n// -- this would go ESPECIALLY well with string-almost-equals, because random users probably won't\n// type in non-english vowels (umlauts and the like).\n/**\n *    Conversions between Latin names and 4-letter codes of species.\n *\n * <pre>\n * WRITEME:\n * -- where the list came from\n * -- how it's stored by this class\n * -- how/where it's stored on disk / in the jar\n * </pre>\n *\n *    <h2>Left to do</h2>\n *    <ul>\n *      <li>Javadoc\n *      <li>Make species, common private, with (safe) accessors\n *      <li>Move stringAlmostEquals(), etc., to util, if I'm going to keep it\n *      <li>Clean up closestSpecies(), if I'm going to keep it\n *      <li>Future: this is for Latin name only; common names would be useful\n *      <li>Future: make Species an instantiable class, with getCode()/getName()/etc. methods?\n *          Sure, and add Iterator getSpecies() method...\n *    </ul>\n *\n *    @author Ken Harris &lt;kbh7 <i style=\"color: gray\">at</i> cornell <i style=\"color: gray\">dot</i> edu&gt;\n *    @version $Id: Species.java,v 1.11 2005/01/24 03:09:33 aaron Exp $\n */\npublic class Species {\n\n    private Species() {\n        // don't instantiate me\n    }\n\n    // code => name hash\n    public static final Properties species = new Properties();\n\n    static {\n        try {\n            // load properties\n            ClassLoader cl = corina.Species.class.getClassLoader();\n            species.load(cl.getResource(\"species.properties\").openStream());\n        } catch (Exception e) {\n            // can't happen\n            // move to its own class so the exception can be caught and it can be unit tested?\n            new Bug(e);\n        }\n    }\n\n    public static String getCode(String s) throws UnknownSpeciesException {\n        Enumeration e = species.keys();\n        while (e.hasMoreElements()) {\n            String maybe = (String) e.nextElement();\n            if (stringAlmostEquals((String) species.get(maybe), s))\n                return maybe;\n        }\n        throw new UnknownSpeciesException();\n    }\n\n    /**\n     *       Look up a code in the list, and return its Latin name.\n     *\n     *       @param code the code to look up; usually 4 letters, all upper-case\n     *       @return the Latin name of that species\n     *       @exception UnknownSpeciesException if the code isn't in the list\n     */\n    public static String getName(String code) throws UnknownSpeciesException {\n        String name = (String) species.get(code);\n        if (name != null)\n            return name;\n        else\n            throw new UnknownSpeciesException();\n    }\n\n    // list of strings, like (\"PISP\" \"QUSP\")\n    public static final List common = new ArrayList();\n\n    public static Iterator getCommonCodes() {\n        return new Iterator() {\n\n            private int i = 0;\n\n            public boolean hasNext() {\n                return (i < common.size());\n            }\n\n            public Object next() throws NoSuchElementException {\n                if (i < common.size())\n                    return common.get(i++);\n                throw new NoSuchElementException();\n            }\n\n            public void remove() {\n                throw new UnsupportedOperationException();\n            }\n        };\n    }\n\n    // carol made this list for me; she also made a list of forest-speficic species (40 of 'em) --\n    // what to do with those?\n    private static final String DEFAULT = \"ABSP,ACSP,CDLI,CDSP,CUSP,FASP,FRSP,JUSP,\" + \"LASP,PCSP,PISP,QUSP,TABA,ULSP,UNKN\";\n\n    static {\n        // load most-common species\n        String s = App.prefs.getPref(\"corina.species.common\", DEFAULT);\n        StringTokenizer t = new StringTokenizer(s, \", \");\n        while (t.hasMoreTokens()) common.add(t.nextToken());\n        // sums will need the same sort of routine: \"QUSP,PISP\" => { \"QUSP\", \"PISP\" } => \"Quercus, Pinus\"\n    }\n\n    // ---- MOVE EVERYTHING BELOW HERE TO corina.util.Text! ----\n    // \"string-almost-equals\" algorithm.  good for finding typos.\n    // isn't species-specific, but i only plan to use it here.\n    // taken from: http://www.faqts.com/knowledge_base/view.phtml/aid/4418/fid/538\n    // (originally in python)\n    private static int stringDistance(String a, String b) {\n        int n = a.length();\n        int m = b.length();\n        int[][] c = new int[n + 1][m + 1];\n        for (int i = 0; i < n + 1; i++) c[i][0] = i;\n        for (int j = 0; j < m + 1; j++) c[0][j] = j;\n        for (int i = 1; i < n + 1; i++) {\n            for (int j = 1; j < m + 1; j++) {\n                int x = c[i - 1][j] + 1;\n                int y = c[i][j - 1] + 1;\n                int z = c[i - 1][j - 1];\n                if (a.charAt(i - 1) != b.charAt(j - 1))\n                    z++;\n                c[i][j] = Math.min(Math.min(x, y), z);\n            }\n        }\n        return c[n][m];\n    }\n\n    //    public static boolean stringAlmostEquals(String s1, String s2, int typosAllowed) {\n    //        return (stringDistance(s1, s2) <= typosAllowed);\n    //    }\n    public static boolean stringAlmostEquals(String s1, String s2) {\n        int distance = stringDistance(s1.toLowerCase(), s2.toLowerCase());\n        //        int minLength = Math.min(s1.length(), s2.length());\n        //        return (distance / (double) minLength <= 0.40); // what's a good error rate?\n        // then again, species strings are all about the same length\n        return distance <= 4;\n    }\n\n    // the closest species to |s|, or Unknown, if none is reasonably close\n    public static String closestSpecies(String s) throws UnknownSpeciesException {\n        // say the threshold is dist=5.\n        int fail = 6;\n        // make the compiler happy\n        String bestGuess = null;\n        Enumeration e = species.keys();\n        while (e.hasMoreElements()) {\n            String maybe = (String) e.nextElement();\n            int d = stringDistance((String) species.get(maybe), s);\n            if (d <= fail) {\n                fail = d;\n                bestGuess = (String) species.get(maybe);\n            }\n        }\n        if (fail < 6)\n            return bestGuess;\n        else\n            throw new UnknownSpeciesException();\n    }\n    // IDEA: this algorithm could be used to implement a findClosestMatch(String, String[]),\n    // which could be quite powerful.\n    // (it'd be a hell of a lot easier in lisp with #key, though.  what am i supposed to do,\n    // use reflection for every member-access?)\n}\n",
		"id": "/EvoSuiteBenchmark/35_corina/src/main/java/corina/Species_1Test.java",
		"test_prompt": "// Species_1Test.java\n// This file is part of Corina.\n//\n// Corina is free software; you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation; either version 2 of the License, or\n// (at your option) any later version.\n//\n// Corina is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Corina; if not, write to the Free Software\n// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n//\n// Copyright 2001 Ken Harris <kbh7@cornell.edu>\n//\npackage corina;\n\nimport java.util.ArrayList;\nimport java.util.Enumeration;\nimport java.util.Iterator;\nimport java.util.List;\nimport java.util.NoSuchElementException;\nimport java.util.Properties;\nimport java.util.StringTokenizer;\nimport corina.core.App;\nimport corina.gui.Bug;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link Species}.\n* It contains ten unit test cases for the {@link Species#getName(String)} method.\n*/\nclass Species_1Test {"
	},
	{
		"original_code": "// Species.java\n//\n// This file is part of Corina.\n//\n// Corina is free software; you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation; either version 2 of the License, or\n// (at your option) any later version.\n//\n// Corina is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Corina; if not, write to the Free Software\n// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n//\n// Copyright 2001 Ken Harris <kbh7@cornell.edu>\n//\npackage corina;\n\nimport java.util.ArrayList;\nimport java.util.Enumeration;\nimport java.util.Iterator;\nimport java.util.List;\nimport java.util.NoSuchElementException;\nimport java.util.Properties;\nimport java.util.StringTokenizer;\nimport corina.core.App;\nimport corina.gui.Bug;\n\n// a complete list of all the species.\n// the file came from http://web.utk.edu/~grissino/species.htm\n// (I hope I didn't murder it too bad in converting it to a text file)\n// -- this is for latin name only.  it would be useful to have common name lookups, as well.\n// -- in SQL, this'd be TABLE latin_species ( key code, latin ), TABLE common_species ( code, common )\n// -- in java, i'll either need more hashes/tables, or a multi-column table, or ... ick.  where's lisp?\n// -- common names are in english only.  it would be useful to have non-english common names, as well.\n// -- e.g., \"i know the turkish common name, what's the latin?\"  or, \"here's a dataset of quercus, what would a german know?\"\n// -- this would go ESPECIALLY well with string-almost-equals, because random users probably won't\n// type in non-english vowels (umlauts and the like).\n/**\n *    Conversions between Latin names and 4-letter codes of species.\n *\n * <pre>\n * WRITEME:\n * -- where the list came from\n * -- how it's stored by this class\n * -- how/where it's stored on disk / in the jar\n * </pre>\n *\n *    <h2>Left to do</h2>\n *    <ul>\n *      <li>Javadoc\n *      <li>Make species, common private, with (safe) accessors\n *      <li>Move stringAlmostEquals(), etc., to util, if I'm going to keep it\n *      <li>Clean up closestSpecies(), if I'm going to keep it\n *      <li>Future: this is for Latin name only; common names would be useful\n *      <li>Future: make Species an instantiable class, with getCode()/getName()/etc. methods?\n *          Sure, and add Iterator getSpecies() method...\n *    </ul>\n *\n *    @author Ken Harris &lt;kbh7 <i style=\"color: gray\">at</i> cornell <i style=\"color: gray\">dot</i> edu&gt;\n *    @version $Id: Species.java,v 1.11 2005/01/24 03:09:33 aaron Exp $\n */\npublic class Species {\n\n    private Species() {\n        // don't instantiate me\n    }\n\n    // code => name hash\n    public static final Properties species = new Properties();\n\n    static {\n        try {\n            // load properties\n            ClassLoader cl = corina.Species.class.getClassLoader();\n            species.load(cl.getResource(\"species.properties\").openStream());\n        } catch (Exception e) {\n            // can't happen\n            // move to its own class so the exception can be caught and it can be unit tested?\n            new Bug(e);\n        }\n    }\n\n    public static String getCode(String s) throws UnknownSpeciesException {\n        Enumeration e = species.keys();\n        while (e.hasMoreElements()) {\n            String maybe = (String) e.nextElement();\n            if (stringAlmostEquals((String) species.get(maybe), s))\n                return maybe;\n        }\n        throw new UnknownSpeciesException();\n    }\n\n    /**\n     *       Look up a code in the list, and return its Latin name.\n     *\n     *       @param code the code to look up; usually 4 letters, all upper-case\n     *       @return the Latin name of that species\n     *       @exception UnknownSpeciesException if the code isn't in the list\n     */\n    public static String getName(String code) throws UnknownSpeciesException {\n        String name = (String) species.get(code);\n        if (name != null)\n            return name;\n        else\n            throw new UnknownSpeciesException();\n    }\n\n    // list of strings, like (\"PISP\" \"QUSP\")\n    public static final List common = new ArrayList();\n\n    public static Iterator getCommonCodes() {\n        return new Iterator() {\n\n            private int i = 0;\n\n            public boolean hasNext() {\n                return (i < common.size());\n            }\n\n            public Object next() throws NoSuchElementException {\n                if (i < common.size())\n                    return common.get(i++);\n                throw new NoSuchElementException();\n            }\n\n            public void remove() {\n                throw new UnsupportedOperationException();\n            }\n        };\n    }\n\n    // carol made this list for me; she also made a list of forest-speficic species (40 of 'em) --\n    // what to do with those?\n    private static final String DEFAULT = \"ABSP,ACSP,CDLI,CDSP,CUSP,FASP,FRSP,JUSP,\" + \"LASP,PCSP,PISP,QUSP,TABA,ULSP,UNKN\";\n\n    static {\n        // load most-common species\n        String s = App.prefs.getPref(\"corina.species.common\", DEFAULT);\n        StringTokenizer t = new StringTokenizer(s, \", \");\n        while (t.hasMoreTokens()) common.add(t.nextToken());\n        // sums will need the same sort of routine: \"QUSP,PISP\" => { \"QUSP\", \"PISP\" } => \"Quercus, Pinus\"\n    }\n\n    // ---- MOVE EVERYTHING BELOW HERE TO corina.util.Text! ----\n    // \"string-almost-equals\" algorithm.  good for finding typos.\n    // isn't species-specific, but i only plan to use it here.\n    // taken from: http://www.faqts.com/knowledge_base/view.phtml/aid/4418/fid/538\n    // (originally in python)\n    private static int stringDistance(String a, String b) {\n        int n = a.length();\n        int m = b.length();\n        int[][] c = new int[n + 1][m + 1];\n        for (int i = 0; i < n + 1; i++) c[i][0] = i;\n        for (int j = 0; j < m + 1; j++) c[0][j] = j;\n        for (int i = 1; i < n + 1; i++) {\n            for (int j = 1; j < m + 1; j++) {\n                int x = c[i - 1][j] + 1;\n                int y = c[i][j - 1] + 1;\n                int z = c[i - 1][j - 1];\n                if (a.charAt(i - 1) != b.charAt(j - 1))\n                    z++;\n                c[i][j] = Math.min(Math.min(x, y), z);\n            }\n        }\n        return c[n][m];\n    }\n\n    //    public static boolean stringAlmostEquals(String s1, String s2, int typosAllowed) {\n    //        return (stringDistance(s1, s2) <= typosAllowed);\n    //    }\n    public static boolean stringAlmostEquals(String s1, String s2) {\n        int distance = stringDistance(s1.toLowerCase(), s2.toLowerCase());\n        //        int minLength = Math.min(s1.length(), s2.length());\n        //        return (distance / (double) minLength <= 0.40); // what's a good error rate?\n        // then again, species strings are all about the same length\n        return distance <= 4;\n    }\n\n    // the closest species to |s|, or Unknown, if none is reasonably close\n    public static String closestSpecies(String s) throws UnknownSpeciesException {\n        // say the threshold is dist=5.\n        int fail = 6;\n        // make the compiler happy\n        String bestGuess = null;\n        Enumeration e = species.keys();\n        while (e.hasMoreElements()) {\n            String maybe = (String) e.nextElement();\n            int d = stringDistance((String) species.get(maybe), s);\n            if (d <= fail) {\n                fail = d;\n                bestGuess = (String) species.get(maybe);\n            }\n        }\n        if (fail < 6)\n            return bestGuess;\n        else\n            throw new UnknownSpeciesException();\n    }\n    // IDEA: this algorithm could be used to implement a findClosestMatch(String, String[]),\n    // which could be quite powerful.\n    // (it'd be a hell of a lot easier in lisp with #key, though.  what am i supposed to do,\n    // use reflection for every member-access?)\n}\n",
		"id": "/EvoSuiteBenchmark/35_corina/src/main/java/corina/Species_2Test.java",
		"test_prompt": "// Species_2Test.java\n// This file is part of Corina.\n//\n// Corina is free software; you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation; either version 2 of the License, or\n// (at your option) any later version.\n//\n// Corina is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Corina; if not, write to the Free Software\n// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n//\n// Copyright 2001 Ken Harris <kbh7@cornell.edu>\n//\npackage corina;\n\nimport java.util.ArrayList;\nimport java.util.Enumeration;\nimport java.util.Iterator;\nimport java.util.List;\nimport java.util.NoSuchElementException;\nimport java.util.Properties;\nimport java.util.StringTokenizer;\nimport corina.core.App;\nimport corina.gui.Bug;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link Species}.\n* It contains ten unit test cases for the {@link Species#getCommonCodes()} method.\n*/\nclass Species_2Test {"
	},
	{
		"original_code": "// Species.java\n//\n// This file is part of Corina.\n//\n// Corina is free software; you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation; either version 2 of the License, or\n// (at your option) any later version.\n//\n// Corina is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Corina; if not, write to the Free Software\n// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n//\n// Copyright 2001 Ken Harris <kbh7@cornell.edu>\n//\npackage corina;\n\nimport java.util.ArrayList;\nimport java.util.Enumeration;\nimport java.util.Iterator;\nimport java.util.List;\nimport java.util.NoSuchElementException;\nimport java.util.Properties;\nimport java.util.StringTokenizer;\nimport corina.core.App;\nimport corina.gui.Bug;\n\n// a complete list of all the species.\n// the file came from http://web.utk.edu/~grissino/species.htm\n// (I hope I didn't murder it too bad in converting it to a text file)\n// -- this is for latin name only.  it would be useful to have common name lookups, as well.\n// -- in SQL, this'd be TABLE latin_species ( key code, latin ), TABLE common_species ( code, common )\n// -- in java, i'll either need more hashes/tables, or a multi-column table, or ... ick.  where's lisp?\n// -- common names are in english only.  it would be useful to have non-english common names, as well.\n// -- e.g., \"i know the turkish common name, what's the latin?\"  or, \"here's a dataset of quercus, what would a german know?\"\n// -- this would go ESPECIALLY well with string-almost-equals, because random users probably won't\n// type in non-english vowels (umlauts and the like).\n/**\n *    Conversions between Latin names and 4-letter codes of species.\n *\n * <pre>\n * WRITEME:\n * -- where the list came from\n * -- how it's stored by this class\n * -- how/where it's stored on disk / in the jar\n * </pre>\n *\n *    <h2>Left to do</h2>\n *    <ul>\n *      <li>Javadoc\n *      <li>Make species, common private, with (safe) accessors\n *      <li>Move stringAlmostEquals(), etc., to util, if I'm going to keep it\n *      <li>Clean up closestSpecies(), if I'm going to keep it\n *      <li>Future: this is for Latin name only; common names would be useful\n *      <li>Future: make Species an instantiable class, with getCode()/getName()/etc. methods?\n *          Sure, and add Iterator getSpecies() method...\n *    </ul>\n *\n *    @author Ken Harris &lt;kbh7 <i style=\"color: gray\">at</i> cornell <i style=\"color: gray\">dot</i> edu&gt;\n *    @version $Id: Species.java,v 1.11 2005/01/24 03:09:33 aaron Exp $\n */\npublic class Species {\n\n    private Species() {\n        // don't instantiate me\n    }\n\n    // code => name hash\n    public static final Properties species = new Properties();\n\n    static {\n        try {\n            // load properties\n            ClassLoader cl = corina.Species.class.getClassLoader();\n            species.load(cl.getResource(\"species.properties\").openStream());\n        } catch (Exception e) {\n            // can't happen\n            // move to its own class so the exception can be caught and it can be unit tested?\n            new Bug(e);\n        }\n    }\n\n    public static String getCode(String s) throws UnknownSpeciesException {\n        Enumeration e = species.keys();\n        while (e.hasMoreElements()) {\n            String maybe = (String) e.nextElement();\n            if (stringAlmostEquals((String) species.get(maybe), s))\n                return maybe;\n        }\n        throw new UnknownSpeciesException();\n    }\n\n    /**\n     *       Look up a code in the list, and return its Latin name.\n     *\n     *       @param code the code to look up; usually 4 letters, all upper-case\n     *       @return the Latin name of that species\n     *       @exception UnknownSpeciesException if the code isn't in the list\n     */\n    public static String getName(String code) throws UnknownSpeciesException {\n        String name = (String) species.get(code);\n        if (name != null)\n            return name;\n        else\n            throw new UnknownSpeciesException();\n    }\n\n    // list of strings, like (\"PISP\" \"QUSP\")\n    public static final List common = new ArrayList();\n\n    public static Iterator getCommonCodes() {\n        return new Iterator() {\n\n            private int i = 0;\n\n            public boolean hasNext() {\n                return (i < common.size());\n            }\n\n            public Object next() throws NoSuchElementException {\n                if (i < common.size())\n                    return common.get(i++);\n                throw new NoSuchElementException();\n            }\n\n            public void remove() {\n                throw new UnsupportedOperationException();\n            }\n        };\n    }\n\n    // carol made this list for me; she also made a list of forest-speficic species (40 of 'em) --\n    // what to do with those?\n    private static final String DEFAULT = \"ABSP,ACSP,CDLI,CDSP,CUSP,FASP,FRSP,JUSP,\" + \"LASP,PCSP,PISP,QUSP,TABA,ULSP,UNKN\";\n\n    static {\n        // load most-common species\n        String s = App.prefs.getPref(\"corina.species.common\", DEFAULT);\n        StringTokenizer t = new StringTokenizer(s, \", \");\n        while (t.hasMoreTokens()) common.add(t.nextToken());\n        // sums will need the same sort of routine: \"QUSP,PISP\" => { \"QUSP\", \"PISP\" } => \"Quercus, Pinus\"\n    }\n\n    // ---- MOVE EVERYTHING BELOW HERE TO corina.util.Text! ----\n    // \"string-almost-equals\" algorithm.  good for finding typos.\n    // isn't species-specific, but i only plan to use it here.\n    // taken from: http://www.faqts.com/knowledge_base/view.phtml/aid/4418/fid/538\n    // (originally in python)\n    private static int stringDistance(String a, String b) {\n        int n = a.length();\n        int m = b.length();\n        int[][] c = new int[n + 1][m + 1];\n        for (int i = 0; i < n + 1; i++) c[i][0] = i;\n        for (int j = 0; j < m + 1; j++) c[0][j] = j;\n        for (int i = 1; i < n + 1; i++) {\n            for (int j = 1; j < m + 1; j++) {\n                int x = c[i - 1][j] + 1;\n                int y = c[i][j - 1] + 1;\n                int z = c[i - 1][j - 1];\n                if (a.charAt(i - 1) != b.charAt(j - 1))\n                    z++;\n                c[i][j] = Math.min(Math.min(x, y), z);\n            }\n        }\n        return c[n][m];\n    }\n\n    //    public static boolean stringAlmostEquals(String s1, String s2, int typosAllowed) {\n    //        return (stringDistance(s1, s2) <= typosAllowed);\n    //    }\n    public static boolean stringAlmostEquals(String s1, String s2) {\n        int distance = stringDistance(s1.toLowerCase(), s2.toLowerCase());\n        //        int minLength = Math.min(s1.length(), s2.length());\n        //        return (distance / (double) minLength <= 0.40); // what's a good error rate?\n        // then again, species strings are all about the same length\n        return distance <= 4;\n    }\n\n    // the closest species to |s|, or Unknown, if none is reasonably close\n    public static String closestSpecies(String s) throws UnknownSpeciesException {\n        // say the threshold is dist=5.\n        int fail = 6;\n        // make the compiler happy\n        String bestGuess = null;\n        Enumeration e = species.keys();\n        while (e.hasMoreElements()) {\n            String maybe = (String) e.nextElement();\n            int d = stringDistance((String) species.get(maybe), s);\n            if (d <= fail) {\n                fail = d;\n                bestGuess = (String) species.get(maybe);\n            }\n        }\n        if (fail < 6)\n            return bestGuess;\n        else\n            throw new UnknownSpeciesException();\n    }\n    // IDEA: this algorithm could be used to implement a findClosestMatch(String, String[]),\n    // which could be quite powerful.\n    // (it'd be a hell of a lot easier in lisp with #key, though.  what am i supposed to do,\n    // use reflection for every member-access?)\n}\n",
		"id": "/EvoSuiteBenchmark/35_corina/src/main/java/corina/Species_3Test.java",
		"test_prompt": "// Species_3Test.java\n// This file is part of Corina.\n//\n// Corina is free software; you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation; either version 2 of the License, or\n// (at your option) any later version.\n//\n// Corina is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Corina; if not, write to the Free Software\n// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n//\n// Copyright 2001 Ken Harris <kbh7@cornell.edu>\n//\npackage corina;\n\nimport java.util.ArrayList;\nimport java.util.Enumeration;\nimport java.util.Iterator;\nimport java.util.List;\nimport java.util.NoSuchElementException;\nimport java.util.Properties;\nimport java.util.StringTokenizer;\nimport corina.core.App;\nimport corina.gui.Bug;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link Species}.\n* It contains ten unit test cases for the {@link Species#stringAlmostEquals(String, String)} method.\n*/\nclass Species_3Test {"
	},
	{
		"original_code": "// Species.java\n//\n// This file is part of Corina.\n//\n// Corina is free software; you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation; either version 2 of the License, or\n// (at your option) any later version.\n//\n// Corina is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Corina; if not, write to the Free Software\n// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n//\n// Copyright 2001 Ken Harris <kbh7@cornell.edu>\n//\npackage corina;\n\nimport java.util.ArrayList;\nimport java.util.Enumeration;\nimport java.util.Iterator;\nimport java.util.List;\nimport java.util.NoSuchElementException;\nimport java.util.Properties;\nimport java.util.StringTokenizer;\nimport corina.core.App;\nimport corina.gui.Bug;\n\n// a complete list of all the species.\n// the file came from http://web.utk.edu/~grissino/species.htm\n// (I hope I didn't murder it too bad in converting it to a text file)\n// -- this is for latin name only.  it would be useful to have common name lookups, as well.\n// -- in SQL, this'd be TABLE latin_species ( key code, latin ), TABLE common_species ( code, common )\n// -- in java, i'll either need more hashes/tables, or a multi-column table, or ... ick.  where's lisp?\n// -- common names are in english only.  it would be useful to have non-english common names, as well.\n// -- e.g., \"i know the turkish common name, what's the latin?\"  or, \"here's a dataset of quercus, what would a german know?\"\n// -- this would go ESPECIALLY well with string-almost-equals, because random users probably won't\n// type in non-english vowels (umlauts and the like).\n/**\n *    Conversions between Latin names and 4-letter codes of species.\n *\n * <pre>\n * WRITEME:\n * -- where the list came from\n * -- how it's stored by this class\n * -- how/where it's stored on disk / in the jar\n * </pre>\n *\n *    <h2>Left to do</h2>\n *    <ul>\n *      <li>Javadoc\n *      <li>Make species, common private, with (safe) accessors\n *      <li>Move stringAlmostEquals(), etc., to util, if I'm going to keep it\n *      <li>Clean up closestSpecies(), if I'm going to keep it\n *      <li>Future: this is for Latin name only; common names would be useful\n *      <li>Future: make Species an instantiable class, with getCode()/getName()/etc. methods?\n *          Sure, and add Iterator getSpecies() method...\n *    </ul>\n *\n *    @author Ken Harris &lt;kbh7 <i style=\"color: gray\">at</i> cornell <i style=\"color: gray\">dot</i> edu&gt;\n *    @version $Id: Species.java,v 1.11 2005/01/24 03:09:33 aaron Exp $\n */\npublic class Species {\n\n    private Species() {\n        // don't instantiate me\n    }\n\n    // code => name hash\n    public static final Properties species = new Properties();\n\n    static {\n        try {\n            // load properties\n            ClassLoader cl = corina.Species.class.getClassLoader();\n            species.load(cl.getResource(\"species.properties\").openStream());\n        } catch (Exception e) {\n            // can't happen\n            // move to its own class so the exception can be caught and it can be unit tested?\n            new Bug(e);\n        }\n    }\n\n    public static String getCode(String s) throws UnknownSpeciesException {\n        Enumeration e = species.keys();\n        while (e.hasMoreElements()) {\n            String maybe = (String) e.nextElement();\n            if (stringAlmostEquals((String) species.get(maybe), s))\n                return maybe;\n        }\n        throw new UnknownSpeciesException();\n    }\n\n    /**\n     *       Look up a code in the list, and return its Latin name.\n     *\n     *       @param code the code to look up; usually 4 letters, all upper-case\n     *       @return the Latin name of that species\n     *       @exception UnknownSpeciesException if the code isn't in the list\n     */\n    public static String getName(String code) throws UnknownSpeciesException {\n        String name = (String) species.get(code);\n        if (name != null)\n            return name;\n        else\n            throw new UnknownSpeciesException();\n    }\n\n    // list of strings, like (\"PISP\" \"QUSP\")\n    public static final List common = new ArrayList();\n\n    public static Iterator getCommonCodes() {\n        return new Iterator() {\n\n            private int i = 0;\n\n            public boolean hasNext() {\n                return (i < common.size());\n            }\n\n            public Object next() throws NoSuchElementException {\n                if (i < common.size())\n                    return common.get(i++);\n                throw new NoSuchElementException();\n            }\n\n            public void remove() {\n                throw new UnsupportedOperationException();\n            }\n        };\n    }\n\n    // carol made this list for me; she also made a list of forest-speficic species (40 of 'em) --\n    // what to do with those?\n    private static final String DEFAULT = \"ABSP,ACSP,CDLI,CDSP,CUSP,FASP,FRSP,JUSP,\" + \"LASP,PCSP,PISP,QUSP,TABA,ULSP,UNKN\";\n\n    static {\n        // load most-common species\n        String s = App.prefs.getPref(\"corina.species.common\", DEFAULT);\n        StringTokenizer t = new StringTokenizer(s, \", \");\n        while (t.hasMoreTokens()) common.add(t.nextToken());\n        // sums will need the same sort of routine: \"QUSP,PISP\" => { \"QUSP\", \"PISP\" } => \"Quercus, Pinus\"\n    }\n\n    // ---- MOVE EVERYTHING BELOW HERE TO corina.util.Text! ----\n    // \"string-almost-equals\" algorithm.  good for finding typos.\n    // isn't species-specific, but i only plan to use it here.\n    // taken from: http://www.faqts.com/knowledge_base/view.phtml/aid/4418/fid/538\n    // (originally in python)\n    private static int stringDistance(String a, String b) {\n        int n = a.length();\n        int m = b.length();\n        int[][] c = new int[n + 1][m + 1];\n        for (int i = 0; i < n + 1; i++) c[i][0] = i;\n        for (int j = 0; j < m + 1; j++) c[0][j] = j;\n        for (int i = 1; i < n + 1; i++) {\n            for (int j = 1; j < m + 1; j++) {\n                int x = c[i - 1][j] + 1;\n                int y = c[i][j - 1] + 1;\n                int z = c[i - 1][j - 1];\n                if (a.charAt(i - 1) != b.charAt(j - 1))\n                    z++;\n                c[i][j] = Math.min(Math.min(x, y), z);\n            }\n        }\n        return c[n][m];\n    }\n\n    //    public static boolean stringAlmostEquals(String s1, String s2, int typosAllowed) {\n    //        return (stringDistance(s1, s2) <= typosAllowed);\n    //    }\n    public static boolean stringAlmostEquals(String s1, String s2) {\n        int distance = stringDistance(s1.toLowerCase(), s2.toLowerCase());\n        //        int minLength = Math.min(s1.length(), s2.length());\n        //        return (distance / (double) minLength <= 0.40); // what's a good error rate?\n        // then again, species strings are all about the same length\n        return distance <= 4;\n    }\n\n    // the closest species to |s|, or Unknown, if none is reasonably close\n    public static String closestSpecies(String s) throws UnknownSpeciesException {\n        // say the threshold is dist=5.\n        int fail = 6;\n        // make the compiler happy\n        String bestGuess = null;\n        Enumeration e = species.keys();\n        while (e.hasMoreElements()) {\n            String maybe = (String) e.nextElement();\n            int d = stringDistance((String) species.get(maybe), s);\n            if (d <= fail) {\n                fail = d;\n                bestGuess = (String) species.get(maybe);\n            }\n        }\n        if (fail < 6)\n            return bestGuess;\n        else\n            throw new UnknownSpeciesException();\n    }\n    // IDEA: this algorithm could be used to implement a findClosestMatch(String, String[]),\n    // which could be quite powerful.\n    // (it'd be a hell of a lot easier in lisp with #key, though.  what am i supposed to do,\n    // use reflection for every member-access?)\n}\n",
		"id": "/EvoSuiteBenchmark/35_corina/src/main/java/corina/Species_4Test.java",
		"test_prompt": "// Species_4Test.java\n// This file is part of Corina.\n//\n// Corina is free software; you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation; either version 2 of the License, or\n// (at your option) any later version.\n//\n// Corina is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Corina; if not, write to the Free Software\n// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n//\n// Copyright 2001 Ken Harris <kbh7@cornell.edu>\n//\npackage corina;\n\nimport java.util.ArrayList;\nimport java.util.Enumeration;\nimport java.util.Iterator;\nimport java.util.List;\nimport java.util.NoSuchElementException;\nimport java.util.Properties;\nimport java.util.StringTokenizer;\nimport corina.core.App;\nimport corina.gui.Bug;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link Species}.\n* It contains ten unit test cases for the {@link Species#closestSpecies(String)} method.\n*/\nclass Species_4Test {"
	},
	{
		"original_code": "// CorinaLog.java\n// Copyright (c) 2004-2005 Aaron Hamid.  All rights reserved.\n// See license in COPYING.txt distributed with this file and available online at http://www.gnu.org/licenses/gpl.txt\npackage corina.logging;\n\nimport java.io.OutputStream;\nimport java.io.PrintStream;\nimport java.util.ArrayList;\nimport java.util.StringTokenizer;\nimport javax.swing.ListModel;\nimport javax.swing.SwingUtilities;\nimport javax.swing.event.ListDataEvent;\nimport javax.swing.event.ListDataListener;\nimport org.apache.commons.logging.Log;\nimport org.apache.commons.logging.LogFactory;\nimport org.apache.commons.logging.impl.SimpleLog;\n\n/**\n * Log implementation that subclasses SimpleLog and stores entries in a circular\n * buffer to be presented in a GUI window.\n * TODO: write factory class or method to obtain named <code>CorinaLog</code>s to\n * save instantiations.\n * @author Aaron Hamid\n */\npublic class CorinaLog extends SimpleLog {\n\n    /**\n     * The maximum number of log messages that will be kept in memory.\n     * TODO: grab this from prefs...\n     */\n    public static final int MAXLINES;\n\n    public final static PrintStream realOut;\n\n    public final static PrintStream realErr;\n\n    static {\n        realOut = System.out;\n        realErr = System.err;\n        String s = System.getProperty(\"corina.log.maxlines\");\n        int maxlines = 500;\n        if (s != null) {\n            try {\n                maxlines = Integer.parseInt(s);\n            } catch (NumberFormatException nfe) {\n                nfe.printStackTrace();\n            }\n        }\n        MAXLINES = maxlines;\n    }\n\n    // protected visibility to avoid synthetic accessors\n    protected static String[] log = new String[MAXLINES];\n\n    protected static int logLineCount;\n\n    protected static boolean wrap;\n\n    private static LogListModel listModel = new LogListModel();\n\n    private static CorinaLog STDOUT = new CorinaLog(\"STDOUT\", true);\n\n    private static CorinaLog STDERR = new CorinaLog(\"STDERR\", true);\n\n    private static Object LOCK = new Object();\n\n    public static void init() {\n        System.setOut(createPrintStream(STDOUT, false));\n        System.setErr(createPrintStream(STDERR, true));\n    }\n\n    private static PrintStream createPrintStream(final Log log, final boolean error) {\n        return new PrintStream(new OutputStream() {\n\n            public void write(int b) {\n                byte[] barray = { (byte) b };\n                write(barray, 0, 1);\n            }\n\n            public void write(byte[] b, int off, int len) {\n                String str = new String(b, off, len);\n                // skip any trailing EOL\n                if (\"\\r\".equals(str) || \"\\n\".equals(str) || \"\\r\\n\".equals(str))\n                    return;\n                if (error) {\n                    log.error(str);\n                } else {\n                    log.info(str);\n                }\n            }\n        });\n    }\n\n    public static ListModel getLogListModel() {\n        return listModel;\n    }\n\n    /**\n     * ListModel for a JList-based log viewer\n     * @author Aaron Hamid\n     */\n    static class LogListModel implements ListModel {\n\n        ArrayList listeners = new ArrayList();\n\n        // protected visibility to avoid synthetic accessor\n        protected void fireIntervalAdded(int index1, int index2) {\n            for (int i = 0; i < listeners.size(); i++) {\n                ListDataListener listener = (ListDataListener) listeners.get(i);\n                listener.intervalAdded(new ListDataEvent(this, ListDataEvent.INTERVAL_ADDED, index1, index2));\n            }\n        }\n\n        // protected visibility to avoid synthetic accessor\n        protected void fireIntervalRemoved(int index1, int index2) {\n            for (int i = 0; i < listeners.size(); i++) {\n                ListDataListener listener = (ListDataListener) listeners.get(i);\n                listener.intervalRemoved(new ListDataEvent(this, ListDataEvent.INTERVAL_REMOVED, index1, index2));\n            }\n        }\n\n        public void addListDataListener(ListDataListener listener) {\n            listeners.add(listener);\n        }\n\n        public void removeListDataListener(ListDataListener listener) {\n            listeners.add(listener);\n        }\n\n        public Object getElementAt(int index) {\n            if (wrap) {\n                if (index < MAXLINES - logLineCount)\n                    return log[index + logLineCount];\n                else\n                    return log[index - MAXLINES + logLineCount];\n            } else\n                return log[index];\n        }\n\n        public int getSize() {\n            if (wrap)\n                return MAXLINES;\n            else\n                return logLineCount;\n        }\n\n        void update(final int lineCount, final boolean oldWrap) {\n            if (lineCount == 0 || listeners.size() == 0)\n                return;\n            SwingUtilities.invokeLater(new Runnable() {\n\n                public void run() {\n                    if (wrap) {\n                        if (oldWrap)\n                            fireIntervalRemoved(0, lineCount - 1);\n                        else {\n                            fireIntervalRemoved(0, logLineCount);\n                        }\n                        fireIntervalAdded(MAXLINES - lineCount + 1, MAXLINES);\n                    } else {\n                        fireIntervalAdded(logLineCount - lineCount + 1, logLineCount);\n                    }\n                }\n            });\n        }\n    }\n\n    private Log chained;\n\n    public CorinaLog(Class clazz) {\n        super(clazz.toString());\n        this.chained = LogFactory.getLog(clazz);\n    }\n\n    public CorinaLog(String name) {\n        super(name);\n        this.chained = LogFactory.getLog(name);\n    }\n\n    public CorinaLog(String name, boolean chain) {\n        super(name);\n        if (chain)\n            this.chained = LogFactory.getLog(name);\n    }\n\n    /**\n     * Log to central log buffer.\n     */\n    protected void write(StringBuffer buf) {\n        String str = buf.toString();\n        //  If multiple threads log stuff, we don't want\n        // the output to get mixed up\n        synchronized (LOCK) {\n            StringTokenizer st = new StringTokenizer(str, \"\\r\\n\");\n            int lineCount = 0;\n            boolean oldWrap = wrap;\n            while (st.hasMoreTokens()) {\n                lineCount++;\n                log[logLineCount] = st.nextToken().replace('\\t', ' ');\n                if (++logLineCount >= log.length) {\n                    wrap = true;\n                    logLineCount = 0;\n                }\n            }\n            listModel.update(lineCount, oldWrap);\n        }\n    }\n\n    /**\n     * Override default dispatching to also call chained instance, if any.\n     */\n    protected void log(int type, Object message, Throwable t) {\n        super.log(type, message, t);\n        if (chained == null)\n            return;\n        switch(type) {\n            case SimpleLog.LOG_LEVEL_TRACE:\n                chained.trace(message, t);\n                break;\n            case SimpleLog.LOG_LEVEL_DEBUG:\n                chained.debug(message, t);\n                break;\n            case SimpleLog.LOG_LEVEL_INFO:\n                chained.info(message, t);\n                break;\n            case SimpleLog.LOG_LEVEL_WARN:\n                chained.warn(message, t);\n                break;\n            case SimpleLog.LOG_LEVEL_ERROR:\n                chained.error(message, t);\n                break;\n            case SimpleLog.LOG_LEVEL_FATAL:\n                chained.fatal(message, t);\n                break;\n            default:\n                chained.info(message, t);\n                break;\n        }\n    }\n}\n",
		"id": "/EvoSuiteBenchmark/35_corina/src/main/java/corina/logging/CorinaLog.java",
		"test_prompt": "// CorinaLogTest.java\n// See license in COPYING.txt distributed with this file and available online at http://www.gnu.org/licenses/gpl.txt\npackage corina.logging;\n\nimport java.io.OutputStream;\nimport java.io.PrintStream;\nimport java.util.ArrayList;\nimport java.util.StringTokenizer;\nimport javax.swing.ListModel;\nimport javax.swing.SwingUtilities;\nimport javax.swing.event.ListDataEvent;\nimport javax.swing.event.ListDataListener;\nimport org.apache.commons.logging.Log;\nimport org.apache.commons.logging.LogFactory;\nimport org.apache.commons.logging.impl.SimpleLog;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link CorinaLog}.\n* It contains ten unit test cases for the {@link CorinaLog#getLogListModel()} method.\n*/\nclass CorinaLogTest {"
	},
	{
		"original_code": "// EditorTabSetFactory.java\n/**\n */\npackage corina.editor;\n\nimport java.util.ArrayList;\nimport java.util.List;\nimport java.util.StringTokenizer;\nimport javax.swing.text.*;\n\n/**\n * A factory for creating fixed tab-stops for JTextPanes. Derived from TabbedLineFactory.\n *\n * <p>The way it works is: you give it a specification for the lines you'll\n * be adding, and then use the factory for creating those lines.</p>\n *\n * <p>When you create a factory, you feed it a specification string.\n * The specification string consists of percentages, and the four\n * characters: &lt; ^ &gt; |.  They mean:</p>\n *\n * <dl>\n * <dt>30% (or any percentage)</dt>\n * <dd>Move right by 30% of the width of the page.  If you skip\n * right by more than 100%, there won't be any error, but you\n * won't see anything printed off the right edge.  Non-integer\n * percentages (e.g., <code>\"33.3%\"</code>) are perfectly legal.</dd>\n *\n * <dt>&gt;</dt>\n * <dd>Some left-aligned text goes here.</dd>\n *\n * <dt>^</dt>\n * <dd>Some center-aligned text goes here.</dd>\n *\n * <dt>&lt;</dt>\n * <dd>Some right-aligned text goes here.</dd>\n *\n * <dt>|</dt>\n * <dd>Draw a vertical bar here.  It's the full height of the line,\n * so if you add multiple lines from this factory in a row, they'll\n * connect all the way down your table.</dd>\n * </dl>\n *\n * <p>(Extra whitespace in the spec string is ignored.)</p>\n *\n * <p>For example, the spec string <code>\"> 50% | 50 <\"</code> creates\n * a table consisting of 2 columns: one left-aligned on the left half\n * of the page, and one right-aligned on the right half of the page,\n * with a vertical bar between them.</p>\n *\n * <p>A fancer example: <code>\"10% | 2% > 38% | 2% > 38% | 10%\"</code>\n * makes a 2-column table, with both columns left-aligned, and vertical\n * bars down the middle and on both sides.  (The extra 2% is there to\n * prevent the text from running into the lines.)</p>\n *\n * <p>Once you've created a factory, how do you use it?  Simple!  Just\n * call the <code>makeLine()</code> method, passing it a string with\n * all of your table entries, separated by tab characters\n * (<code>'\\t'</code>).  To use the last example above:</p>\n *\n * <pre>\n * // print a table of the numbers 1-5, along with their squares\n * TabbedLineFactory f = new TabbedLineFactory(\"10% | 2% > 38% | 2% > 38% | 10%\");\n * lines.add(f.makeLine(\"n \\t n squared\"));\n * for (int i=1; i<=5; i++)\n * &nbsp;&nbsp;&nbsp;lines.add(f.makeLine(i + \"\\t\" + i*i));\n * </pre>\n *\n *  @author Lucas Madar\n */\npublic class EditorTabSetFactory {\n\n    private static final String BAR = \"|\";\n\n    private static final String LEFT = \">\";\n\n    private static final String CENTER = \"^\";\n\n    private static final String RIGHT = \"<\";\n\n    private static final String DECIMAL = \"*\";\n\n    /**\n     *  Create a tabbed-line factory, given a line specification (see\n     * \t above).\n     * \t @param spec the line specification\n     */\n    public static TabSet buildTabset(String spec, int width) {\n        // parse spec\n        StringTokenizer tok = new StringTokenizer(spec, \" *<>^|\", true);\n        int n = tok.countTokens();\n        List tabs = new ArrayList();\n        int mode = TabStop.ALIGN_LEFT;\n        float pos = 0f;\n        for (int i = 0; i < n; i++) {\n            String t = tok.nextToken();\n            // skip whitespace (but i need to watch for it,\n            // because it's a delimiter)\n            if (t.trim().length() == 0)\n                continue;\n            // store |<>^ and %ages\n            if (t.equals(BAR))\n                mode = TabStop.ALIGN_BAR;\n            else if (t.equals(LEFT))\n                mode = TabStop.ALIGN_LEFT;\n            else if (t.equals(CENTER))\n                mode = TabStop.ALIGN_CENTER;\n            else if (t.equals(RIGHT))\n                mode = TabStop.ALIGN_RIGHT;\n            else if (t.equals(DECIMAL))\n                mode = TabStop.ALIGN_DECIMAL;\n            else if (t.endsWith(\"%\")) {\n                Float value = new Float(t.substring(0, t.length() - 1));\n                pos += value.floatValue();\n                int x = (int) (width * (pos / 100f));\n                tabs.add(new TabStop(x, mode, TabStop.LEAD_NONE));\n            } else\n                throw new IllegalArgumentException();\n        }\n        return new TabSet((TabStop[]) tabs.toArray(new TabStop[tabs.size()]));\n    }\n}\n",
		"id": "/EvoSuiteBenchmark/35_corina/src/main/java/corina/editor/EditorTabSetFactory.java",
		"test_prompt": "// EditorTabSetFactoryTest.java\npackage corina.editor;\n\nimport java.util.ArrayList;\nimport java.util.List;\nimport java.util.StringTokenizer;\nimport javax.swing.text.*;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link EditorTabSetFactory}.\n* It contains ten unit test cases for the {@link EditorTabSetFactory#buildTabset(String, int)} method.\n*/\nclass EditorTabSetFactoryTest {"
	},
	{
		"original_code": "// SampleDataView.java\n//\n// This file is part of Corina.\n//\n// Corina is free software; you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation; either version 2 of the License, or\n// (at your option) any later version.\n//\n// Corina is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Corina; if not, write to the Free Software\n// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n//\n// Copyright 2001 Ken Harris <kbh7@cornell.edu>\n//\npackage corina.editor;\n\nimport java.awt.BorderLayout;\nimport java.awt.Color;\nimport java.awt.Font;\nimport java.awt.Toolkit;\nimport java.awt.event.ActionEvent;\nimport java.awt.event.KeyEvent;\nimport java.awt.event.MouseEvent;\nimport java.util.Collections;\nimport javax.swing.AbstractAction;\nimport javax.swing.BorderFactory;\nimport javax.swing.JMenuItem;\nimport javax.swing.JPanel;\nimport javax.swing.JPopupMenu;\nimport javax.swing.JScrollPane;\nimport javax.swing.JTable;\nimport javax.swing.ScrollPaneConstants;\nimport javax.swing.table.AbstractTableModel;\nimport javax.swing.table.TableModel;\nimport javax.swing.ListSelectionModel;\nimport javax.swing.DefaultListSelectionModel;\nimport javax.swing.event.ListSelectionListener;\nimport javax.swing.event.ListSelectionEvent;\nimport corina.Range;\nimport corina.Sample;\nimport corina.SampleEvent;\nimport corina.SampleListener;\nimport corina.Year;\nimport corina.core.App;\nimport corina.gui.Bug;\nimport corina.prefs.Prefs;\nimport corina.prefs.PrefsEvent;\nimport corina.prefs.PrefsListener;\nimport corina.ui.Alert;\nimport corina.ui.Builder;\nimport corina.util.PopupListener;\n\n// TODO: add slasher -- but it needs to either (1) override table\n// sizing, or (2) override scrollpane painting (probably the latter)\n/**\n *   A view of the raw data in a Sample.\n *\n *   @author Ken Harris &lt;kbh7 <i style=\"color: gray\">at</i> cornell <i style=\"color: gray\">dot</i> edu&gt;\n *   @version $Id: SampleDataView.java,v 1.13 2006/05/30 20:01:07 lucasmo Exp $\n */\n// left to add:\n// - setSelectedYear(Year) -- (why?)\n// - (the popup)\npublic class SampleDataView extends JPanel implements SampleListener, PrefsListener {\n\n    private Sample mySample;\n\n    public JTable myTable;\n\n    private TableModel myModel;\n\n    // pass this along to the table\n    public void requestFocus() {\n        myTable.requestFocus();\n    }\n\n    // (for Editor)\n    public void stopEditing() {\n        // strategy: if editing, fire an VK_ENTER keytype event at the table\n        // (that also solves the \"user typed the number and shouldn't lose that data\" problem)\n        if (myTable.isEditing())\n            myTable.dispatchEvent(new KeyEvent(this, KeyEvent.KEY_PRESSED, System.currentTimeMillis(), 0, KeyEvent.VK_ENTER));\n    }\n\n    public void enableEditing(boolean enable) {\n        if (!enable)\n            stopEditing();\n        ((DecadalModel) myModel).enableEditing(enable);\n    }\n\n    public SampleDataView(Sample s) {\n        // copy data reference, add self as observer\n        mySample = s;\n        mySample.addSampleListener(this);\n        // create table\n        myModel = new DecadalModel(mySample);\n        /*\n\t\t final Color DARK = new Color(0.7333f, 0.7765f, 0.8431f); // EXTRACT CONSTs!\n\t\t final Color LIGHT = new Color(0.8196f, 0.8510f, 0.9216f);\n\t\t final int THIN = 2;\n\t\t final int THICK = 5;\n\t\t */\n        myTable = new JTable(myModel);\n        /* {\n\t\t public void paint(Graphics g) {\n\t\t setOpaque(true);\n\n\t\t int w = getWidth(), h = getHeight();\n\n\t\t // fill light\n\t\t g.setColor(LIGHT);\n\t\t g.fillRect(0, 0, w, h);\n\n\t\t // dark stripes\n\t\t g.setColor(DARK);\n\t\t ((Graphics2D) g).setStroke(new BasicStroke(THIN-1f));\n\t\t for (int x=0; x<w+h; x+=THIN+THICK)\n\t\t g.drawLine(x, 0, x-h, h);\n\n\t\t super.paint(g);\n\t\t }\n\t\t }; */\n        // completeley transparent\n        myTable.setGridColor(new Color(0, 0, 0, 0));\n        // mouse listener for table\n        myTable.addMouseListener(new PopupListener() {\n\n            public void showPopup(MouseEvent e) {\n                int row = myTable.rowAtPoint(e.getPoint());\n                int col = myTable.columnAtPoint(e.getPoint());\n                // clicked on a row header?  don't do anything.\n                if (col == 0)\n                    return;\n                // select the cell at e.getPoint()\n                myTable.setRowSelectionInterval(row, row);\n                myTable.setColumnSelectionInterval(col, col);\n                // (does this work?  it does, but\n                // the table doesn't get hilited\n                // immediately..)\n                // TODO: if it's not a valid data cell, don't show popup\n                // TODO: if you can't ins/del a year here, dim those menuitems [done?]\n                // show a popup here.\n                JPopupMenu popup = new JPopupMenu();\n                // PERF: build this popup lazily here, and hold on to it.\n                // TODO: use buttongroup (what for? -- oh, the marks)\n                /* DISABLED\n\t\t\t\t JMenu marks = new JMenu(\"Mark with\");\n\t\t\t\t for (int i=0; i<Mark.defaults.length; i++)\n\t\t\t\t marks.add(new JRadioButtonMenuItem(Mark.defaults[i].icon, false));\n\t\t\t\t marks.addSeparator();\n\t\t\t\t marks.add(new JRadioButtonMenuItem(\"None\", true));\n\t\t\t\t */\n                JMenuItem insert = Builder.makeMenuItem(\"insert_year\");\n                insert.addActionListener(new AbstractAction() {\n\n                    public void actionPerformed(ActionEvent ae) {\n                        insertYear();\n                    }\n                });\n                JMenuItem insertMR = Builder.makeMenuItem(\"insert_mr\");\n                insertMR.addActionListener(new AbstractAction() {\n\n                    public void actionPerformed(ActionEvent ae) {\n                        insertMR();\n                    }\n                });\n                JMenuItem delete = Builder.makeMenuItem(\"delete_year\");\n                delete.addActionListener(new AbstractAction() {\n\n                    public void actionPerformed(ActionEvent ae) {\n                        deleteYear();\n                    }\n                });\n                popup.add(insert);\n                popup.add(insertMR);\n                popup.add(delete);\n                // DISABLED until they're implemented.\n                // popup.addSeparator();\n                // popup.add(marks);\n                // popup.addSeparator();\n                // popup.add(new JMenuItem(\"Edit note...\"));\n                // TODO: hook up edit_note, with i18n\n                // (dim insert/insertMR/delete, if it's not an editable sample.)\n                if (!mySample.isEditable()) {\n                    insert.setEnabled(false);\n                    insertMR.setEnabled(false);\n                    delete.setEnabled(false);\n                }\n                popup.show(myTable, e.getX(), e.getY());\n            }\n        });\n        // key listener for table\n        myTable.addKeyListener(new DecadalKeyListener(myTable, mySample));\n        myTable.setCellSelectionEnabled(true);\n        myTable.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);\n        // select the first year\n        myTable.setRowSelectionInterval(0, 0);\n        myTable.setColumnSelectionInterval(mySample.range.getStart().column() + 1, mySample.range.getStart().column() + 1);\n        // don't let the columns be rearranged or resized\n        myTable.getTableHeader().setReorderingAllowed(false);\n        myTable.getTableHeader().setResizingAllowed(false);\n        // make the last column a jprogressbar, % of max\n        int max = 0;\n        if (mySample.count != null)\n            max = ((Integer) Collections.max(mySample.count)).intValue();\n        // DISABLED: use column-header renderer for first column (pseudo-row-headers)\n        // -- it doesn't look that great, since there are still gridlines between\n        // rows; what i should really do is make a real table-row-header, which isn't too hard.\n        // myTable.getColumnModel().getColumn(0).setCellRenderer(new\n        //         javax.swing.table.JTableHeader().getDefaultRenderer());\n        myTable.getColumnModel().getColumn(11).setCellRenderer(new CountRenderer(max));\n        // make nulls elsewhere shaded, to indicate \"can't use\"\n        // DISABLED, because it doesn't hit the area below the table yet (how?).\n        // (but it looks really cool.)\n        //SlashedIfNullRenderer slasher = new SlashedIfNullRenderer(mySample, myModel);\n        //for (int i=1; i<=10; i++)\n        //myTable.getColumnModel().getColumn(i).setCellRenderer(slasher);\n        //myTable.setIntercellSpacing(new Dimension(0, 0));\n        // set font, gridlines, colors ==> handled by refreshFromPreferences()\n        // add to panel\n        // huh?\n        setLayout(new BorderLayout(0, 0));\n        JScrollPane sp = new JScrollPane(myTable, ScrollPaneConstants.VERTICAL_SCROLLBAR_ALWAYS, ScrollPaneConstants.HORIZONTAL_SCROLLBAR_AS_NEEDED);\n        sp.setBorder(BorderFactory.createEmptyBorder(0, 0, 0, 0));\n        add(sp, BorderLayout.CENTER);\n        add(new Modeline(myTable, mySample), BorderLayout.SOUTH);\n        initPrefs();\n        App.prefs.addPrefsListener(this);\n    }\n\n    /**\n     *  Return the Year of the currently selected cell.\n     * \t @return the selected Year\n     */\n    public Year getSelectedYear() {\n        return ((DecadalModel) myModel).getYear(myTable.getSelectedRow(), myTable.getSelectedColumn());\n    }\n\n    // default is an empty string to type in.\n    public void insertYear() {\n        insertYear(\"\", true);\n    }\n\n    // use Sample.MR for now.\n    // -- let users change this?\n    // -- add it as \"MR\", display as a different symbol, and save as \"MR\"?\n    public void insertMR() {\n        insertYear(new Integer(Sample.MR), true);\n    }\n\n    public void insertYear(Object val, boolean selectAndEdit) {\n        // note: ideally this would never be called for isSummed() or\n        // isIndexed() samples, so these checks will be obselete.\n        // make sure it's not indexed or summed\n        if (!mySample.isEditable()) {\n            Alert.error(\"Can't Modify Data\", \"You cannot modify indexed or summed data files.\");\n            return;\n        }\n        // get row, col\n        int row = myTable.getSelectedRow();\n        int col = myTable.getSelectedColumn();\n        // get year => get data index\n        Year y = ((DecadalModel) myModel).getYear(row, col);\n        int i = y.diff(mySample.range.getStart());\n        // make sure it's a valid place to insert a year\n        if (!mySample.range.contains(y) && !mySample.range.getEnd().add(+1).equals(y)) {\n            // Alert.error(\"Can't insert here\",\n            //    \"This isn't a valid place to insert a year.\");\n            return;\n        }\n        // insert 0\n        // new Integer(0));\n        mySample.data.add(i, val);\n        mySample.range = new Range(mySample.range.getStart(), mySample.range.getEnd().add(+1));\n        // REFACTOR: by LoD, should be range.extend()\n        // fire event -- obsolete?\n        ((DecadalModel) myModel).fireTableDataChanged();\n        // select this cell again?  edit it\n        myTable.setRowSelectionInterval(row, row);\n        myTable.setColumnSelectionInterval(col, col);\n        if (selectAndEdit)\n            myTable.editCellAt(row, col);\n        // set modified\n        mySample.fireSampleDataChanged();\n        mySample.fireSampleRedated();\n        mySample.setModified();\n        if (!selectAndEdit) {\n            // what's the next year?\n            y = y.add(1);\n            // where's it located?\n            row = y.row() - mySample.range.getStart().row();\n            col = y.column() + 1;\n            myTable.setRowSelectionInterval(row, row);\n            myTable.setColumnSelectionInterval(col, col);\n        }\n    }\n\n    public void insertYears(Object val, int nYears) {\n        // make sure it's not indexed or summed\n        if (!mySample.isEditable()) {\n            Alert.error(\"Can't Modify Data\", \"You cannot modify indexed or summed data files.\");\n            return;\n        }\n        // get row, col\n        int row = myTable.getSelectedRow();\n        int col = myTable.getSelectedColumn();\n        // get year => get data index\n        Year y = ((DecadalModel) myModel).getYear(row, col);\n        int i = y.diff(mySample.range.getStart());\n        // make sure it's a valid place to insert a year\n        if (!mySample.range.contains(y) && !mySample.range.getEnd().add(nYears).equals(y)) {\n            // Alert.error(\"Can't insert here\",\n            //    \"This isn't a valid place to insert a year.\");\n            return;\n        }\n        // insert 0, nyears times...\n        for (int j = 0; j < nYears; j++) // new Integer(0));\n        mySample.data.add(i, val);\n        mySample.range = new Range(mySample.range.getStart(), mySample.range.getEnd().add(nYears));\n        // REFACTOR: by LoD, should be range.extend()\n        // fire event -- obsolete?\n        ((DecadalModel) myModel).fireTableDataChanged();\n        // select this cell again?  edit it\n        myTable.setRowSelectionInterval(row, row);\n        myTable.setColumnSelectionInterval(col, col);\n        // set modified\n        mySample.fireSampleDataChanged();\n        mySample.fireSampleRedated();\n        mySample.setModified();\n        myTable.setRowSelectionInterval(row, row);\n        myTable.setColumnSelectionInterval(col, col);\n    }\n\n    // TODO: insert/delete shouldn't be enabled if the selection isn't a data year, either.\n    public void deleteYear() {\n        // make sure it's not indexed or summed\n        if (!mySample.isEditable()) {\n            Bug.bug(new IllegalArgumentException(\"deleteYear() called on non-editable sample\"));\n            return;\n        }\n        // get row, col\n        int row = myTable.getSelectedRow();\n        int col = myTable.getSelectedColumn();\n        // get year => get data index\n        Year y = ((DecadalModel) myModel).getYear(row, col);\n        int i = y.diff(mySample.range.getStart());\n        // make sure there's data to delete\n        if (!mySample.range.contains(y)) {\n            // Alert.error(\"Can't delete here\",\n            //    \"This isn't a value that can be deleted.\");\n            return;\n        }\n        // delete value\n        mySample.data.remove(i);\n        // mySample.range.end = mySample.range.end.add(-1);\n        mySample.range = new Range(mySample.range.getStart(), mySample.range.getEnd().add(-1));\n        // fire event\n        ((DecadalModel) myModel).fireTableDataChanged();\n        // select this cell again\n        myTable.setRowSelectionInterval(row, row);\n        myTable.setColumnSelectionInterval(col, col);\n        // note: if the last datum was just deleted, should back up\n        // the cursor to the new-last-cell.  better yet: BACKSPACE\n        // does this always, DELETE never does.\n        // set modified\n        mySample.setModified();\n        mySample.fireSampleDataChanged();\n        mySample.fireSampleRedated();\n    }\n\n    public void sampleRedated(SampleEvent e) {\n        // update data view\n        ((DecadalModel) myModel).fireTableDataChanged();\n    }\n\n    public void sampleDataChanged(SampleEvent e) {\n        // update data view\n        ((DecadalModel) myModel).fireTableDataChanged();\n        // FIXME: make myModel an AbstractTableModel, so i don't have to cast\n    }\n\n    public void sampleMetadataChanged(SampleEvent e) {\n    }\n\n    public void sampleElementsChanged(SampleEvent e) {\n    }\n\n    private void initPrefs() {\n        // reset fonts\n        Font font = Font.decode(App.prefs.getPref(\"corina.edit.font\"));\n        if (font != null)\n            myTable.setFont(font);\n        // from font size, set table row height\n        myTable.setRowHeight((font == null ? 12 : font.getSize()) + 4);\n        // BUG: this seems to not work sometimes (?) -- try zapfino\n        // disable gridlines, if requested\n        boolean gridlines = Boolean.valueOf(App.prefs.getPref(Prefs.EDIT_GRIDLINES)).booleanValue();\n        myTable.setShowGrid(gridlines);\n        // set colors\n        myTable.setBackground(App.prefs.getColorPref(Prefs.EDIT_BACKGROUND, Color.white));\n        myTable.setForeground(App.prefs.getColorPref(Prefs.EDIT_FOREGROUND, Color.black));\n    }\n\n    // should this be part of update()?  well, the constructor will\n    // need it, too, so it might as well be a separate method, anyway.\n    public void prefChanged(PrefsEvent e) {\n        initPrefs();\n    }\n\n    // returns the Year that was measured, for graphical display goodness.\n    public Year measured(int x) {\n        /*\n\t\t * This code inserts the year instead of overwriting values... \n\t\t * insertYear(new Integer(x), false);\n\t\t */\n        // figure out what year we're looking at now -- BREAKS IF EDITING=TRUE\n        Year y = ((DecadalModel) myTable.getModel()).getYear(myTable.getSelectedRow(), myTable.getSelectedColumn());\n        // beyond the end?  extend.\n        // -- old way:\n        // Year end = mySample.range.getEnd();\n        // if (y.compareTo(end) > 0) {\n        // mySample.range.setEnd(end.add(1));\n        // mySample.data.add(new Integer(0));\n        // }\n        if (!mySample.range.contains(y)) {\n            mySample.range = new Range(mySample.range.getStart(), mySample.range.getEnd().add(1));\n            mySample.data.add(new Integer(0));\n        }\n        // set the value\n        int i = y.diff(mySample.range.getStart());\n        mySample.data.set(i, new Integer(x));\n        // this is the year we return...\n        Year retYear = y;\n        // beep! (twice on column 0)\n        /*\n\t\t * meh.. beeping doesn't do anything on newer computers.\n\t\t * \n\t\t * play a .wav file instead... to be implemented.\n\t\t * \n\t\t *\tToolkit.getDefaultToolkit().beep();\n\t\t *\tif (y.column() == 0)\n\t\t *\t\tToolkit.getDefaultToolkit().beep();\n\t\t */\n        // what's the next year?\n        y = y.add(1);\n        // where's it located?\n        int row = y.row() - mySample.range.getStart().row();\n        int col = y.column() + 1;\n        // fire sample events first, so the table update below gets the good data\n        mySample.fireSampleRedated();\n        mySample.fireSampleDataChanged();\n        mySample.setModified();\n        // update table (overkill?)\n        ((AbstractTableModel) myTable.getModel()).fireTableDataChanged();\n        // select it\n        myTable.setRowSelectionInterval(row, row);\n        myTable.setColumnSelectionInterval(col, col);\n        return retYear;\n    }\n}\n",
		"id": "/EvoSuiteBenchmark/35_corina/src/main/java/corina/editor/SampleDataView.java",
		"test_prompt": "// SampleDataViewTest.java\n// This file is part of Corina.\n//\n// Corina is free software; you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation; either version 2 of the License, or\n// (at your option) any later version.\n//\n// Corina is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Corina; if not, write to the Free Software\n// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n//\n// Copyright 2001 Ken Harris <kbh7@cornell.edu>\n//\npackage corina.editor;\n\nimport java.awt.BorderLayout;\nimport java.awt.Color;\nimport java.awt.Font;\nimport java.awt.Toolkit;\nimport java.awt.event.ActionEvent;\nimport java.awt.event.KeyEvent;\nimport java.awt.event.MouseEvent;\nimport java.util.Collections;\nimport javax.swing.AbstractAction;\nimport javax.swing.BorderFactory;\nimport javax.swing.JMenuItem;\nimport javax.swing.JPanel;\nimport javax.swing.JPopupMenu;\nimport javax.swing.JScrollPane;\nimport javax.swing.JTable;\nimport javax.swing.ScrollPaneConstants;\nimport javax.swing.table.AbstractTableModel;\nimport javax.swing.table.TableModel;\nimport javax.swing.ListSelectionModel;\nimport javax.swing.DefaultListSelectionModel;\nimport javax.swing.event.ListSelectionListener;\nimport javax.swing.event.ListSelectionEvent;\nimport corina.Range;\nimport corina.Sample;\nimport corina.SampleEvent;\nimport corina.SampleListener;\nimport corina.Year;\nimport corina.core.App;\nimport corina.gui.Bug;\nimport corina.prefs.Prefs;\nimport corina.prefs.PrefsEvent;\nimport corina.prefs.PrefsListener;\nimport corina.ui.Alert;\nimport corina.ui.Builder;\nimport corina.util.PopupListener;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link SampleDataView}.\n* It contains ten unit test cases for the {@link SampleDataView#measured(int)} method.\n*/\nclass SampleDataViewTest {"
	},
	{
		"original_code": "// SampleBit.java\npackage corina.editor;\n\nimport javax.swing.BorderFactory;\nimport javax.swing.JPanel;\nimport javax.swing.JDialog;\nimport javax.swing.JFrame;\nimport java.awt.Container;\nimport java.awt.GridBagLayout;\nimport java.awt.GridBagConstraints;\nimport java.awt.Component;\nimport java.awt.Insets;\nimport javax.swing.JCheckBox;\nimport javax.swing.JButton;\nimport java.awt.BorderLayout;\nimport java.awt.FlowLayout;\nimport java.awt.event.ActionEvent;\nimport java.awt.event.ActionListener;\nimport javax.swing.JLabel;\n\n/*\n * this is a dirty little class that pops up a dialog asking what you'd like inside of a sample printed report.\n * then, you can pass the object to a printer which puts values in...\n */\npublic class SampleBit {\n\n    private boolean sb_title;\n\n    private boolean sb_printinfo;\n\n    private boolean sb_data;\n\n    private boolean sb_meta;\n\n    private boolean sb_weiser;\n\n    private boolean sb_elements;\n\n    private boolean sb_header;\n\n    private boolean sb_doublespace;\n\n    private SampleBit() {\n    }\n\n    public boolean wantTitle() {\n        return sb_title;\n    }\n\n    public boolean wantPrintInfo() {\n        return sb_printinfo;\n    }\n\n    public boolean wantSampleHeader() {\n        return sb_header;\n    }\n\n    public boolean wantSampleData() {\n        return sb_data;\n    }\n\n    public boolean wantMetaData() {\n        return sb_meta;\n    }\n\n    public boolean wantWeiserjahre() {\n        return sb_weiser;\n    }\n\n    public boolean wantElements() {\n        return sb_elements;\n    }\n\n    public boolean isDoubleSpaced() {\n        return sb_doublespace;\n    }\n\n    static public SampleBit askBits(JFrame parent) {\n        final JDialog dialog;\n        Container c;\n        JPanel checkboxpanel, buttonpanel;\n        final class successholder {\n\n            boolean success;\n        }\n        final successholder success = new successholder();\n        success.success = false;\n        dialog = new JDialog(parent, \"Sample report bit chooser\", true);\n        c = dialog.getContentPane();\n        c.setLayout(new BorderLayout());\n        checkboxpanel = new JPanel(new GridBagLayout());\n        checkboxpanel.setBorder(BorderFactory.createTitledBorder(\"Data options\"));\n        GridBagConstraints gbc = new GridBagConstraints();\n        gbc.anchor = gbc.WEST;\n        gbc.fill = gbc.NONE;\n        gbc.insets = new Insets(2, 2, 2, 2);\n        gbc.gridy = 0;\n        JCheckBox showTitle = new JCheckBox(\"Title\", true);\n        JCheckBox showPrintInfo = new JCheckBox(\"Printing info\", true);\n        JCheckBox showSampleHeader = new JCheckBox(\"Sample header (non-indexed only)\", true);\n        JCheckBox showSampleData = new JCheckBox(\"Sample data\", true);\n        JCheckBox showMeta = new JCheckBox(\"Metadata\", true);\n        JCheckBox showWeiser = new JCheckBox(\"Weiserjahre\", true);\n        JCheckBox showElements = new JCheckBox(\"Elements\", true);\n        JCheckBox doubleSpace = new JCheckBox(\"Double-space all numerical data\", true);\n        JLabel text = new JLabel(\"<html>Which parts of the report<br>would you like to include?\");\n        addComponent(checkboxpanel, text, gbc);\n        addComponent(checkboxpanel, showTitle, gbc);\n        addComponent(checkboxpanel, showPrintInfo, gbc);\n        addComponent(checkboxpanel, showSampleHeader, gbc);\n        addComponent(checkboxpanel, showSampleData, gbc);\n        addComponent(checkboxpanel, showMeta, gbc);\n        addComponent(checkboxpanel, showWeiser, gbc);\n        addComponent(checkboxpanel, showElements, gbc);\n        addComponent(checkboxpanel, doubleSpace, gbc);\n        c.add(checkboxpanel, BorderLayout.CENTER);\n        buttonpanel = new JPanel(new FlowLayout(FlowLayout.RIGHT));\n        String oktext = corina.ui.I18n.getText(\"ok\");\n        if (oktext == null)\n            oktext = \"Ok\";\n        JButton okButton = new JButton(oktext);\n        buttonpanel.add(okButton);\n        okButton.addActionListener(new ActionListener() {\n\n            public void actionPerformed(ActionEvent ae) {\n                success.success = true;\n                dialog.dispose();\n            }\n        });\n        String canceltext = corina.ui.I18n.getText(\"cancel\");\n        if (canceltext == null)\n            canceltext = \"Cancel\";\n        JButton cancelButton = new JButton(canceltext);\n        buttonpanel.add(cancelButton);\n        cancelButton.addActionListener(new ActionListener() {\n\n            public void actionPerformed(ActionEvent ae) {\n                dialog.dispose();\n            }\n        });\n        c.add(buttonpanel, BorderLayout.SOUTH);\n        dialog.pack();\n        dialog.setLocationRelativeTo(parent);\n        dialog.setVisible(true);\n        if (!success.success)\n            return null;\n        SampleBit sb = new SampleBit();\n        sb.sb_data = showSampleData.isSelected();\n        sb.sb_header = showSampleHeader.isSelected();\n        sb.sb_elements = showElements.isSelected();\n        sb.sb_meta = showMeta.isSelected();\n        sb.sb_printinfo = showPrintInfo.isSelected();\n        sb.sb_title = showTitle.isSelected();\n        sb.sb_weiser = showWeiser.isSelected();\n        sb.sb_doublespace = doubleSpace.isSelected();\n        return sb;\n    }\n\n    static private void addComponent(Container cont, Component comp, GridBagConstraints gbc) {\n        gbc.gridy++;\n        gbc.gridx = 0;\n        cont.add(comp, gbc);\n    }\n}\n",
		"id": "/EvoSuiteBenchmark/35_corina/src/main/java/corina/editor/SampleBit_0Test.java",
		"test_prompt": "// SampleBit_0Test.java\npackage corina.editor;\n\nimport javax.swing.BorderFactory;\nimport javax.swing.JPanel;\nimport javax.swing.JDialog;\nimport javax.swing.JFrame;\nimport java.awt.Container;\nimport java.awt.GridBagLayout;\nimport java.awt.GridBagConstraints;\nimport java.awt.Component;\nimport java.awt.Insets;\nimport javax.swing.JCheckBox;\nimport javax.swing.JButton;\nimport java.awt.BorderLayout;\nimport java.awt.FlowLayout;\nimport java.awt.event.ActionEvent;\nimport java.awt.event.ActionListener;\nimport javax.swing.JLabel;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link SampleBit}.\n* It contains ten unit test cases for the {@link SampleBit#wantTitle()} method.\n*/\nclass SampleBit_0Test {"
	},
	{
		"original_code": "// SampleBit.java\npackage corina.editor;\n\nimport javax.swing.BorderFactory;\nimport javax.swing.JPanel;\nimport javax.swing.JDialog;\nimport javax.swing.JFrame;\nimport java.awt.Container;\nimport java.awt.GridBagLayout;\nimport java.awt.GridBagConstraints;\nimport java.awt.Component;\nimport java.awt.Insets;\nimport javax.swing.JCheckBox;\nimport javax.swing.JButton;\nimport java.awt.BorderLayout;\nimport java.awt.FlowLayout;\nimport java.awt.event.ActionEvent;\nimport java.awt.event.ActionListener;\nimport javax.swing.JLabel;\n\n/*\n * this is a dirty little class that pops up a dialog asking what you'd like inside of a sample printed report.\n * then, you can pass the object to a printer which puts values in...\n */\npublic class SampleBit {\n\n    private boolean sb_title;\n\n    private boolean sb_printinfo;\n\n    private boolean sb_data;\n\n    private boolean sb_meta;\n\n    private boolean sb_weiser;\n\n    private boolean sb_elements;\n\n    private boolean sb_header;\n\n    private boolean sb_doublespace;\n\n    private SampleBit() {\n    }\n\n    public boolean wantTitle() {\n        return sb_title;\n    }\n\n    public boolean wantPrintInfo() {\n        return sb_printinfo;\n    }\n\n    public boolean wantSampleHeader() {\n        return sb_header;\n    }\n\n    public boolean wantSampleData() {\n        return sb_data;\n    }\n\n    public boolean wantMetaData() {\n        return sb_meta;\n    }\n\n    public boolean wantWeiserjahre() {\n        return sb_weiser;\n    }\n\n    public boolean wantElements() {\n        return sb_elements;\n    }\n\n    public boolean isDoubleSpaced() {\n        return sb_doublespace;\n    }\n\n    static public SampleBit askBits(JFrame parent) {\n        final JDialog dialog;\n        Container c;\n        JPanel checkboxpanel, buttonpanel;\n        final class successholder {\n\n            boolean success;\n        }\n        final successholder success = new successholder();\n        success.success = false;\n        dialog = new JDialog(parent, \"Sample report bit chooser\", true);\n        c = dialog.getContentPane();\n        c.setLayout(new BorderLayout());\n        checkboxpanel = new JPanel(new GridBagLayout());\n        checkboxpanel.setBorder(BorderFactory.createTitledBorder(\"Data options\"));\n        GridBagConstraints gbc = new GridBagConstraints();\n        gbc.anchor = gbc.WEST;\n        gbc.fill = gbc.NONE;\n        gbc.insets = new Insets(2, 2, 2, 2);\n        gbc.gridy = 0;\n        JCheckBox showTitle = new JCheckBox(\"Title\", true);\n        JCheckBox showPrintInfo = new JCheckBox(\"Printing info\", true);\n        JCheckBox showSampleHeader = new JCheckBox(\"Sample header (non-indexed only)\", true);\n        JCheckBox showSampleData = new JCheckBox(\"Sample data\", true);\n        JCheckBox showMeta = new JCheckBox(\"Metadata\", true);\n        JCheckBox showWeiser = new JCheckBox(\"Weiserjahre\", true);\n        JCheckBox showElements = new JCheckBox(\"Elements\", true);\n        JCheckBox doubleSpace = new JCheckBox(\"Double-space all numerical data\", true);\n        JLabel text = new JLabel(\"<html>Which parts of the report<br>would you like to include?\");\n        addComponent(checkboxpanel, text, gbc);\n        addComponent(checkboxpanel, showTitle, gbc);\n        addComponent(checkboxpanel, showPrintInfo, gbc);\n        addComponent(checkboxpanel, showSampleHeader, gbc);\n        addComponent(checkboxpanel, showSampleData, gbc);\n        addComponent(checkboxpanel, showMeta, gbc);\n        addComponent(checkboxpanel, showWeiser, gbc);\n        addComponent(checkboxpanel, showElements, gbc);\n        addComponent(checkboxpanel, doubleSpace, gbc);\n        c.add(checkboxpanel, BorderLayout.CENTER);\n        buttonpanel = new JPanel(new FlowLayout(FlowLayout.RIGHT));\n        String oktext = corina.ui.I18n.getText(\"ok\");\n        if (oktext == null)\n            oktext = \"Ok\";\n        JButton okButton = new JButton(oktext);\n        buttonpanel.add(okButton);\n        okButton.addActionListener(new ActionListener() {\n\n            public void actionPerformed(ActionEvent ae) {\n                success.success = true;\n                dialog.dispose();\n            }\n        });\n        String canceltext = corina.ui.I18n.getText(\"cancel\");\n        if (canceltext == null)\n            canceltext = \"Cancel\";\n        JButton cancelButton = new JButton(canceltext);\n        buttonpanel.add(cancelButton);\n        cancelButton.addActionListener(new ActionListener() {\n\n            public void actionPerformed(ActionEvent ae) {\n                dialog.dispose();\n            }\n        });\n        c.add(buttonpanel, BorderLayout.SOUTH);\n        dialog.pack();\n        dialog.setLocationRelativeTo(parent);\n        dialog.setVisible(true);\n        if (!success.success)\n            return null;\n        SampleBit sb = new SampleBit();\n        sb.sb_data = showSampleData.isSelected();\n        sb.sb_header = showSampleHeader.isSelected();\n        sb.sb_elements = showElements.isSelected();\n        sb.sb_meta = showMeta.isSelected();\n        sb.sb_printinfo = showPrintInfo.isSelected();\n        sb.sb_title = showTitle.isSelected();\n        sb.sb_weiser = showWeiser.isSelected();\n        sb.sb_doublespace = doubleSpace.isSelected();\n        return sb;\n    }\n\n    static private void addComponent(Container cont, Component comp, GridBagConstraints gbc) {\n        gbc.gridy++;\n        gbc.gridx = 0;\n        cont.add(comp, gbc);\n    }\n}\n",
		"id": "/EvoSuiteBenchmark/35_corina/src/main/java/corina/editor/SampleBit_1Test.java",
		"test_prompt": "// SampleBit_1Test.java\npackage corina.editor;\n\nimport javax.swing.BorderFactory;\nimport javax.swing.JPanel;\nimport javax.swing.JDialog;\nimport javax.swing.JFrame;\nimport java.awt.Container;\nimport java.awt.GridBagLayout;\nimport java.awt.GridBagConstraints;\nimport java.awt.Component;\nimport java.awt.Insets;\nimport javax.swing.JCheckBox;\nimport javax.swing.JButton;\nimport java.awt.BorderLayout;\nimport java.awt.FlowLayout;\nimport java.awt.event.ActionEvent;\nimport java.awt.event.ActionListener;\nimport javax.swing.JLabel;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link SampleBit}.\n* It contains ten unit test cases for the {@link SampleBit#wantPrintInfo()} method.\n*/\nclass SampleBit_1Test {"
	},
	{
		"original_code": "// SampleBit.java\npackage corina.editor;\n\nimport javax.swing.BorderFactory;\nimport javax.swing.JPanel;\nimport javax.swing.JDialog;\nimport javax.swing.JFrame;\nimport java.awt.Container;\nimport java.awt.GridBagLayout;\nimport java.awt.GridBagConstraints;\nimport java.awt.Component;\nimport java.awt.Insets;\nimport javax.swing.JCheckBox;\nimport javax.swing.JButton;\nimport java.awt.BorderLayout;\nimport java.awt.FlowLayout;\nimport java.awt.event.ActionEvent;\nimport java.awt.event.ActionListener;\nimport javax.swing.JLabel;\n\n/*\n * this is a dirty little class that pops up a dialog asking what you'd like inside of a sample printed report.\n * then, you can pass the object to a printer which puts values in...\n */\npublic class SampleBit {\n\n    private boolean sb_title;\n\n    private boolean sb_printinfo;\n\n    private boolean sb_data;\n\n    private boolean sb_meta;\n\n    private boolean sb_weiser;\n\n    private boolean sb_elements;\n\n    private boolean sb_header;\n\n    private boolean sb_doublespace;\n\n    private SampleBit() {\n    }\n\n    public boolean wantTitle() {\n        return sb_title;\n    }\n\n    public boolean wantPrintInfo() {\n        return sb_printinfo;\n    }\n\n    public boolean wantSampleHeader() {\n        return sb_header;\n    }\n\n    public boolean wantSampleData() {\n        return sb_data;\n    }\n\n    public boolean wantMetaData() {\n        return sb_meta;\n    }\n\n    public boolean wantWeiserjahre() {\n        return sb_weiser;\n    }\n\n    public boolean wantElements() {\n        return sb_elements;\n    }\n\n    public boolean isDoubleSpaced() {\n        return sb_doublespace;\n    }\n\n    static public SampleBit askBits(JFrame parent) {\n        final JDialog dialog;\n        Container c;\n        JPanel checkboxpanel, buttonpanel;\n        final class successholder {\n\n            boolean success;\n        }\n        final successholder success = new successholder();\n        success.success = false;\n        dialog = new JDialog(parent, \"Sample report bit chooser\", true);\n        c = dialog.getContentPane();\n        c.setLayout(new BorderLayout());\n        checkboxpanel = new JPanel(new GridBagLayout());\n        checkboxpanel.setBorder(BorderFactory.createTitledBorder(\"Data options\"));\n        GridBagConstraints gbc = new GridBagConstraints();\n        gbc.anchor = gbc.WEST;\n        gbc.fill = gbc.NONE;\n        gbc.insets = new Insets(2, 2, 2, 2);\n        gbc.gridy = 0;\n        JCheckBox showTitle = new JCheckBox(\"Title\", true);\n        JCheckBox showPrintInfo = new JCheckBox(\"Printing info\", true);\n        JCheckBox showSampleHeader = new JCheckBox(\"Sample header (non-indexed only)\", true);\n        JCheckBox showSampleData = new JCheckBox(\"Sample data\", true);\n        JCheckBox showMeta = new JCheckBox(\"Metadata\", true);\n        JCheckBox showWeiser = new JCheckBox(\"Weiserjahre\", true);\n        JCheckBox showElements = new JCheckBox(\"Elements\", true);\n        JCheckBox doubleSpace = new JCheckBox(\"Double-space all numerical data\", true);\n        JLabel text = new JLabel(\"<html>Which parts of the report<br>would you like to include?\");\n        addComponent(checkboxpanel, text, gbc);\n        addComponent(checkboxpanel, showTitle, gbc);\n        addComponent(checkboxpanel, showPrintInfo, gbc);\n        addComponent(checkboxpanel, showSampleHeader, gbc);\n        addComponent(checkboxpanel, showSampleData, gbc);\n        addComponent(checkboxpanel, showMeta, gbc);\n        addComponent(checkboxpanel, showWeiser, gbc);\n        addComponent(checkboxpanel, showElements, gbc);\n        addComponent(checkboxpanel, doubleSpace, gbc);\n        c.add(checkboxpanel, BorderLayout.CENTER);\n        buttonpanel = new JPanel(new FlowLayout(FlowLayout.RIGHT));\n        String oktext = corina.ui.I18n.getText(\"ok\");\n        if (oktext == null)\n            oktext = \"Ok\";\n        JButton okButton = new JButton(oktext);\n        buttonpanel.add(okButton);\n        okButton.addActionListener(new ActionListener() {\n\n            public void actionPerformed(ActionEvent ae) {\n                success.success = true;\n                dialog.dispose();\n            }\n        });\n        String canceltext = corina.ui.I18n.getText(\"cancel\");\n        if (canceltext == null)\n            canceltext = \"Cancel\";\n        JButton cancelButton = new JButton(canceltext);\n        buttonpanel.add(cancelButton);\n        cancelButton.addActionListener(new ActionListener() {\n\n            public void actionPerformed(ActionEvent ae) {\n                dialog.dispose();\n            }\n        });\n        c.add(buttonpanel, BorderLayout.SOUTH);\n        dialog.pack();\n        dialog.setLocationRelativeTo(parent);\n        dialog.setVisible(true);\n        if (!success.success)\n            return null;\n        SampleBit sb = new SampleBit();\n        sb.sb_data = showSampleData.isSelected();\n        sb.sb_header = showSampleHeader.isSelected();\n        sb.sb_elements = showElements.isSelected();\n        sb.sb_meta = showMeta.isSelected();\n        sb.sb_printinfo = showPrintInfo.isSelected();\n        sb.sb_title = showTitle.isSelected();\n        sb.sb_weiser = showWeiser.isSelected();\n        sb.sb_doublespace = doubleSpace.isSelected();\n        return sb;\n    }\n\n    static private void addComponent(Container cont, Component comp, GridBagConstraints gbc) {\n        gbc.gridy++;\n        gbc.gridx = 0;\n        cont.add(comp, gbc);\n    }\n}\n",
		"id": "/EvoSuiteBenchmark/35_corina/src/main/java/corina/editor/SampleBit_2Test.java",
		"test_prompt": "// SampleBit_2Test.java\npackage corina.editor;\n\nimport javax.swing.BorderFactory;\nimport javax.swing.JPanel;\nimport javax.swing.JDialog;\nimport javax.swing.JFrame;\nimport java.awt.Container;\nimport java.awt.GridBagLayout;\nimport java.awt.GridBagConstraints;\nimport java.awt.Component;\nimport java.awt.Insets;\nimport javax.swing.JCheckBox;\nimport javax.swing.JButton;\nimport java.awt.BorderLayout;\nimport java.awt.FlowLayout;\nimport java.awt.event.ActionEvent;\nimport java.awt.event.ActionListener;\nimport javax.swing.JLabel;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link SampleBit}.\n* It contains ten unit test cases for the {@link SampleBit#wantSampleHeader()} method.\n*/\nclass SampleBit_2Test {"
	},
	{
		"original_code": "// SampleBit.java\npackage corina.editor;\n\nimport javax.swing.BorderFactory;\nimport javax.swing.JPanel;\nimport javax.swing.JDialog;\nimport javax.swing.JFrame;\nimport java.awt.Container;\nimport java.awt.GridBagLayout;\nimport java.awt.GridBagConstraints;\nimport java.awt.Component;\nimport java.awt.Insets;\nimport javax.swing.JCheckBox;\nimport javax.swing.JButton;\nimport java.awt.BorderLayout;\nimport java.awt.FlowLayout;\nimport java.awt.event.ActionEvent;\nimport java.awt.event.ActionListener;\nimport javax.swing.JLabel;\n\n/*\n * this is a dirty little class that pops up a dialog asking what you'd like inside of a sample printed report.\n * then, you can pass the object to a printer which puts values in...\n */\npublic class SampleBit {\n\n    private boolean sb_title;\n\n    private boolean sb_printinfo;\n\n    private boolean sb_data;\n\n    private boolean sb_meta;\n\n    private boolean sb_weiser;\n\n    private boolean sb_elements;\n\n    private boolean sb_header;\n\n    private boolean sb_doublespace;\n\n    private SampleBit() {\n    }\n\n    public boolean wantTitle() {\n        return sb_title;\n    }\n\n    public boolean wantPrintInfo() {\n        return sb_printinfo;\n    }\n\n    public boolean wantSampleHeader() {\n        return sb_header;\n    }\n\n    public boolean wantSampleData() {\n        return sb_data;\n    }\n\n    public boolean wantMetaData() {\n        return sb_meta;\n    }\n\n    public boolean wantWeiserjahre() {\n        return sb_weiser;\n    }\n\n    public boolean wantElements() {\n        return sb_elements;\n    }\n\n    public boolean isDoubleSpaced() {\n        return sb_doublespace;\n    }\n\n    static public SampleBit askBits(JFrame parent) {\n        final JDialog dialog;\n        Container c;\n        JPanel checkboxpanel, buttonpanel;\n        final class successholder {\n\n            boolean success;\n        }\n        final successholder success = new successholder();\n        success.success = false;\n        dialog = new JDialog(parent, \"Sample report bit chooser\", true);\n        c = dialog.getContentPane();\n        c.setLayout(new BorderLayout());\n        checkboxpanel = new JPanel(new GridBagLayout());\n        checkboxpanel.setBorder(BorderFactory.createTitledBorder(\"Data options\"));\n        GridBagConstraints gbc = new GridBagConstraints();\n        gbc.anchor = gbc.WEST;\n        gbc.fill = gbc.NONE;\n        gbc.insets = new Insets(2, 2, 2, 2);\n        gbc.gridy = 0;\n        JCheckBox showTitle = new JCheckBox(\"Title\", true);\n        JCheckBox showPrintInfo = new JCheckBox(\"Printing info\", true);\n        JCheckBox showSampleHeader = new JCheckBox(\"Sample header (non-indexed only)\", true);\n        JCheckBox showSampleData = new JCheckBox(\"Sample data\", true);\n        JCheckBox showMeta = new JCheckBox(\"Metadata\", true);\n        JCheckBox showWeiser = new JCheckBox(\"Weiserjahre\", true);\n        JCheckBox showElements = new JCheckBox(\"Elements\", true);\n        JCheckBox doubleSpace = new JCheckBox(\"Double-space all numerical data\", true);\n        JLabel text = new JLabel(\"<html>Which parts of the report<br>would you like to include?\");\n        addComponent(checkboxpanel, text, gbc);\n        addComponent(checkboxpanel, showTitle, gbc);\n        addComponent(checkboxpanel, showPrintInfo, gbc);\n        addComponent(checkboxpanel, showSampleHeader, gbc);\n        addComponent(checkboxpanel, showSampleData, gbc);\n        addComponent(checkboxpanel, showMeta, gbc);\n        addComponent(checkboxpanel, showWeiser, gbc);\n        addComponent(checkboxpanel, showElements, gbc);\n        addComponent(checkboxpanel, doubleSpace, gbc);\n        c.add(checkboxpanel, BorderLayout.CENTER);\n        buttonpanel = new JPanel(new FlowLayout(FlowLayout.RIGHT));\n        String oktext = corina.ui.I18n.getText(\"ok\");\n        if (oktext == null)\n            oktext = \"Ok\";\n        JButton okButton = new JButton(oktext);\n        buttonpanel.add(okButton);\n        okButton.addActionListener(new ActionListener() {\n\n            public void actionPerformed(ActionEvent ae) {\n                success.success = true;\n                dialog.dispose();\n            }\n        });\n        String canceltext = corina.ui.I18n.getText(\"cancel\");\n        if (canceltext == null)\n            canceltext = \"Cancel\";\n        JButton cancelButton = new JButton(canceltext);\n        buttonpanel.add(cancelButton);\n        cancelButton.addActionListener(new ActionListener() {\n\n            public void actionPerformed(ActionEvent ae) {\n                dialog.dispose();\n            }\n        });\n        c.add(buttonpanel, BorderLayout.SOUTH);\n        dialog.pack();\n        dialog.setLocationRelativeTo(parent);\n        dialog.setVisible(true);\n        if (!success.success)\n            return null;\n        SampleBit sb = new SampleBit();\n        sb.sb_data = showSampleData.isSelected();\n        sb.sb_header = showSampleHeader.isSelected();\n        sb.sb_elements = showElements.isSelected();\n        sb.sb_meta = showMeta.isSelected();\n        sb.sb_printinfo = showPrintInfo.isSelected();\n        sb.sb_title = showTitle.isSelected();\n        sb.sb_weiser = showWeiser.isSelected();\n        sb.sb_doublespace = doubleSpace.isSelected();\n        return sb;\n    }\n\n    static private void addComponent(Container cont, Component comp, GridBagConstraints gbc) {\n        gbc.gridy++;\n        gbc.gridx = 0;\n        cont.add(comp, gbc);\n    }\n}\n",
		"id": "/EvoSuiteBenchmark/35_corina/src/main/java/corina/editor/SampleBit_3Test.java",
		"test_prompt": "// SampleBit_3Test.java\npackage corina.editor;\n\nimport javax.swing.BorderFactory;\nimport javax.swing.JPanel;\nimport javax.swing.JDialog;\nimport javax.swing.JFrame;\nimport java.awt.Container;\nimport java.awt.GridBagLayout;\nimport java.awt.GridBagConstraints;\nimport java.awt.Component;\nimport java.awt.Insets;\nimport javax.swing.JCheckBox;\nimport javax.swing.JButton;\nimport java.awt.BorderLayout;\nimport java.awt.FlowLayout;\nimport java.awt.event.ActionEvent;\nimport java.awt.event.ActionListener;\nimport javax.swing.JLabel;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link SampleBit}.\n* It contains ten unit test cases for the {@link SampleBit#wantSampleData()} method.\n*/\nclass SampleBit_3Test {"
	},
	{
		"original_code": "// SampleBit.java\npackage corina.editor;\n\nimport javax.swing.BorderFactory;\nimport javax.swing.JPanel;\nimport javax.swing.JDialog;\nimport javax.swing.JFrame;\nimport java.awt.Container;\nimport java.awt.GridBagLayout;\nimport java.awt.GridBagConstraints;\nimport java.awt.Component;\nimport java.awt.Insets;\nimport javax.swing.JCheckBox;\nimport javax.swing.JButton;\nimport java.awt.BorderLayout;\nimport java.awt.FlowLayout;\nimport java.awt.event.ActionEvent;\nimport java.awt.event.ActionListener;\nimport javax.swing.JLabel;\n\n/*\n * this is a dirty little class that pops up a dialog asking what you'd like inside of a sample printed report.\n * then, you can pass the object to a printer which puts values in...\n */\npublic class SampleBit {\n\n    private boolean sb_title;\n\n    private boolean sb_printinfo;\n\n    private boolean sb_data;\n\n    private boolean sb_meta;\n\n    private boolean sb_weiser;\n\n    private boolean sb_elements;\n\n    private boolean sb_header;\n\n    private boolean sb_doublespace;\n\n    private SampleBit() {\n    }\n\n    public boolean wantTitle() {\n        return sb_title;\n    }\n\n    public boolean wantPrintInfo() {\n        return sb_printinfo;\n    }\n\n    public boolean wantSampleHeader() {\n        return sb_header;\n    }\n\n    public boolean wantSampleData() {\n        return sb_data;\n    }\n\n    public boolean wantMetaData() {\n        return sb_meta;\n    }\n\n    public boolean wantWeiserjahre() {\n        return sb_weiser;\n    }\n\n    public boolean wantElements() {\n        return sb_elements;\n    }\n\n    public boolean isDoubleSpaced() {\n        return sb_doublespace;\n    }\n\n    static public SampleBit askBits(JFrame parent) {\n        final JDialog dialog;\n        Container c;\n        JPanel checkboxpanel, buttonpanel;\n        final class successholder {\n\n            boolean success;\n        }\n        final successholder success = new successholder();\n        success.success = false;\n        dialog = new JDialog(parent, \"Sample report bit chooser\", true);\n        c = dialog.getContentPane();\n        c.setLayout(new BorderLayout());\n        checkboxpanel = new JPanel(new GridBagLayout());\n        checkboxpanel.setBorder(BorderFactory.createTitledBorder(\"Data options\"));\n        GridBagConstraints gbc = new GridBagConstraints();\n        gbc.anchor = gbc.WEST;\n        gbc.fill = gbc.NONE;\n        gbc.insets = new Insets(2, 2, 2, 2);\n        gbc.gridy = 0;\n        JCheckBox showTitle = new JCheckBox(\"Title\", true);\n        JCheckBox showPrintInfo = new JCheckBox(\"Printing info\", true);\n        JCheckBox showSampleHeader = new JCheckBox(\"Sample header (non-indexed only)\", true);\n        JCheckBox showSampleData = new JCheckBox(\"Sample data\", true);\n        JCheckBox showMeta = new JCheckBox(\"Metadata\", true);\n        JCheckBox showWeiser = new JCheckBox(\"Weiserjahre\", true);\n        JCheckBox showElements = new JCheckBox(\"Elements\", true);\n        JCheckBox doubleSpace = new JCheckBox(\"Double-space all numerical data\", true);\n        JLabel text = new JLabel(\"<html>Which parts of the report<br>would you like to include?\");\n        addComponent(checkboxpanel, text, gbc);\n        addComponent(checkboxpanel, showTitle, gbc);\n        addComponent(checkboxpanel, showPrintInfo, gbc);\n        addComponent(checkboxpanel, showSampleHeader, gbc);\n        addComponent(checkboxpanel, showSampleData, gbc);\n        addComponent(checkboxpanel, showMeta, gbc);\n        addComponent(checkboxpanel, showWeiser, gbc);\n        addComponent(checkboxpanel, showElements, gbc);\n        addComponent(checkboxpanel, doubleSpace, gbc);\n        c.add(checkboxpanel, BorderLayout.CENTER);\n        buttonpanel = new JPanel(new FlowLayout(FlowLayout.RIGHT));\n        String oktext = corina.ui.I18n.getText(\"ok\");\n        if (oktext == null)\n            oktext = \"Ok\";\n        JButton okButton = new JButton(oktext);\n        buttonpanel.add(okButton);\n        okButton.addActionListener(new ActionListener() {\n\n            public void actionPerformed(ActionEvent ae) {\n                success.success = true;\n                dialog.dispose();\n            }\n        });\n        String canceltext = corina.ui.I18n.getText(\"cancel\");\n        if (canceltext == null)\n            canceltext = \"Cancel\";\n        JButton cancelButton = new JButton(canceltext);\n        buttonpanel.add(cancelButton);\n        cancelButton.addActionListener(new ActionListener() {\n\n            public void actionPerformed(ActionEvent ae) {\n                dialog.dispose();\n            }\n        });\n        c.add(buttonpanel, BorderLayout.SOUTH);\n        dialog.pack();\n        dialog.setLocationRelativeTo(parent);\n        dialog.setVisible(true);\n        if (!success.success)\n            return null;\n        SampleBit sb = new SampleBit();\n        sb.sb_data = showSampleData.isSelected();\n        sb.sb_header = showSampleHeader.isSelected();\n        sb.sb_elements = showElements.isSelected();\n        sb.sb_meta = showMeta.isSelected();\n        sb.sb_printinfo = showPrintInfo.isSelected();\n        sb.sb_title = showTitle.isSelected();\n        sb.sb_weiser = showWeiser.isSelected();\n        sb.sb_doublespace = doubleSpace.isSelected();\n        return sb;\n    }\n\n    static private void addComponent(Container cont, Component comp, GridBagConstraints gbc) {\n        gbc.gridy++;\n        gbc.gridx = 0;\n        cont.add(comp, gbc);\n    }\n}\n",
		"id": "/EvoSuiteBenchmark/35_corina/src/main/java/corina/editor/SampleBit_4Test.java",
		"test_prompt": "// SampleBit_4Test.java\npackage corina.editor;\n\nimport javax.swing.BorderFactory;\nimport javax.swing.JPanel;\nimport javax.swing.JDialog;\nimport javax.swing.JFrame;\nimport java.awt.Container;\nimport java.awt.GridBagLayout;\nimport java.awt.GridBagConstraints;\nimport java.awt.Component;\nimport java.awt.Insets;\nimport javax.swing.JCheckBox;\nimport javax.swing.JButton;\nimport java.awt.BorderLayout;\nimport java.awt.FlowLayout;\nimport java.awt.event.ActionEvent;\nimport java.awt.event.ActionListener;\nimport javax.swing.JLabel;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link SampleBit}.\n* It contains ten unit test cases for the {@link SampleBit#wantMetaData()} method.\n*/\nclass SampleBit_4Test {"
	},
	{
		"original_code": "// SampleBit.java\npackage corina.editor;\n\nimport javax.swing.BorderFactory;\nimport javax.swing.JPanel;\nimport javax.swing.JDialog;\nimport javax.swing.JFrame;\nimport java.awt.Container;\nimport java.awt.GridBagLayout;\nimport java.awt.GridBagConstraints;\nimport java.awt.Component;\nimport java.awt.Insets;\nimport javax.swing.JCheckBox;\nimport javax.swing.JButton;\nimport java.awt.BorderLayout;\nimport java.awt.FlowLayout;\nimport java.awt.event.ActionEvent;\nimport java.awt.event.ActionListener;\nimport javax.swing.JLabel;\n\n/*\n * this is a dirty little class that pops up a dialog asking what you'd like inside of a sample printed report.\n * then, you can pass the object to a printer which puts values in...\n */\npublic class SampleBit {\n\n    private boolean sb_title;\n\n    private boolean sb_printinfo;\n\n    private boolean sb_data;\n\n    private boolean sb_meta;\n\n    private boolean sb_weiser;\n\n    private boolean sb_elements;\n\n    private boolean sb_header;\n\n    private boolean sb_doublespace;\n\n    private SampleBit() {\n    }\n\n    public boolean wantTitle() {\n        return sb_title;\n    }\n\n    public boolean wantPrintInfo() {\n        return sb_printinfo;\n    }\n\n    public boolean wantSampleHeader() {\n        return sb_header;\n    }\n\n    public boolean wantSampleData() {\n        return sb_data;\n    }\n\n    public boolean wantMetaData() {\n        return sb_meta;\n    }\n\n    public boolean wantWeiserjahre() {\n        return sb_weiser;\n    }\n\n    public boolean wantElements() {\n        return sb_elements;\n    }\n\n    public boolean isDoubleSpaced() {\n        return sb_doublespace;\n    }\n\n    static public SampleBit askBits(JFrame parent) {\n        final JDialog dialog;\n        Container c;\n        JPanel checkboxpanel, buttonpanel;\n        final class successholder {\n\n            boolean success;\n        }\n        final successholder success = new successholder();\n        success.success = false;\n        dialog = new JDialog(parent, \"Sample report bit chooser\", true);\n        c = dialog.getContentPane();\n        c.setLayout(new BorderLayout());\n        checkboxpanel = new JPanel(new GridBagLayout());\n        checkboxpanel.setBorder(BorderFactory.createTitledBorder(\"Data options\"));\n        GridBagConstraints gbc = new GridBagConstraints();\n        gbc.anchor = gbc.WEST;\n        gbc.fill = gbc.NONE;\n        gbc.insets = new Insets(2, 2, 2, 2);\n        gbc.gridy = 0;\n        JCheckBox showTitle = new JCheckBox(\"Title\", true);\n        JCheckBox showPrintInfo = new JCheckBox(\"Printing info\", true);\n        JCheckBox showSampleHeader = new JCheckBox(\"Sample header (non-indexed only)\", true);\n        JCheckBox showSampleData = new JCheckBox(\"Sample data\", true);\n        JCheckBox showMeta = new JCheckBox(\"Metadata\", true);\n        JCheckBox showWeiser = new JCheckBox(\"Weiserjahre\", true);\n        JCheckBox showElements = new JCheckBox(\"Elements\", true);\n        JCheckBox doubleSpace = new JCheckBox(\"Double-space all numerical data\", true);\n        JLabel text = new JLabel(\"<html>Which parts of the report<br>would you like to include?\");\n        addComponent(checkboxpanel, text, gbc);\n        addComponent(checkboxpanel, showTitle, gbc);\n        addComponent(checkboxpanel, showPrintInfo, gbc);\n        addComponent(checkboxpanel, showSampleHeader, gbc);\n        addComponent(checkboxpanel, showSampleData, gbc);\n        addComponent(checkboxpanel, showMeta, gbc);\n        addComponent(checkboxpanel, showWeiser, gbc);\n        addComponent(checkboxpanel, showElements, gbc);\n        addComponent(checkboxpanel, doubleSpace, gbc);\n        c.add(checkboxpanel, BorderLayout.CENTER);\n        buttonpanel = new JPanel(new FlowLayout(FlowLayout.RIGHT));\n        String oktext = corina.ui.I18n.getText(\"ok\");\n        if (oktext == null)\n            oktext = \"Ok\";\n        JButton okButton = new JButton(oktext);\n        buttonpanel.add(okButton);\n        okButton.addActionListener(new ActionListener() {\n\n            public void actionPerformed(ActionEvent ae) {\n                success.success = true;\n                dialog.dispose();\n            }\n        });\n        String canceltext = corina.ui.I18n.getText(\"cancel\");\n        if (canceltext == null)\n            canceltext = \"Cancel\";\n        JButton cancelButton = new JButton(canceltext);\n        buttonpanel.add(cancelButton);\n        cancelButton.addActionListener(new ActionListener() {\n\n            public void actionPerformed(ActionEvent ae) {\n                dialog.dispose();\n            }\n        });\n        c.add(buttonpanel, BorderLayout.SOUTH);\n        dialog.pack();\n        dialog.setLocationRelativeTo(parent);\n        dialog.setVisible(true);\n        if (!success.success)\n            return null;\n        SampleBit sb = new SampleBit();\n        sb.sb_data = showSampleData.isSelected();\n        sb.sb_header = showSampleHeader.isSelected();\n        sb.sb_elements = showElements.isSelected();\n        sb.sb_meta = showMeta.isSelected();\n        sb.sb_printinfo = showPrintInfo.isSelected();\n        sb.sb_title = showTitle.isSelected();\n        sb.sb_weiser = showWeiser.isSelected();\n        sb.sb_doublespace = doubleSpace.isSelected();\n        return sb;\n    }\n\n    static private void addComponent(Container cont, Component comp, GridBagConstraints gbc) {\n        gbc.gridy++;\n        gbc.gridx = 0;\n        cont.add(comp, gbc);\n    }\n}\n",
		"id": "/EvoSuiteBenchmark/35_corina/src/main/java/corina/editor/SampleBit_5Test.java",
		"test_prompt": "// SampleBit_5Test.java\npackage corina.editor;\n\nimport javax.swing.BorderFactory;\nimport javax.swing.JPanel;\nimport javax.swing.JDialog;\nimport javax.swing.JFrame;\nimport java.awt.Container;\nimport java.awt.GridBagLayout;\nimport java.awt.GridBagConstraints;\nimport java.awt.Component;\nimport java.awt.Insets;\nimport javax.swing.JCheckBox;\nimport javax.swing.JButton;\nimport java.awt.BorderLayout;\nimport java.awt.FlowLayout;\nimport java.awt.event.ActionEvent;\nimport java.awt.event.ActionListener;\nimport javax.swing.JLabel;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link SampleBit}.\n* It contains ten unit test cases for the {@link SampleBit#wantWeiserjahre()} method.\n*/\nclass SampleBit_5Test {"
	},
	{
		"original_code": "// SampleBit.java\npackage corina.editor;\n\nimport javax.swing.BorderFactory;\nimport javax.swing.JPanel;\nimport javax.swing.JDialog;\nimport javax.swing.JFrame;\nimport java.awt.Container;\nimport java.awt.GridBagLayout;\nimport java.awt.GridBagConstraints;\nimport java.awt.Component;\nimport java.awt.Insets;\nimport javax.swing.JCheckBox;\nimport javax.swing.JButton;\nimport java.awt.BorderLayout;\nimport java.awt.FlowLayout;\nimport java.awt.event.ActionEvent;\nimport java.awt.event.ActionListener;\nimport javax.swing.JLabel;\n\n/*\n * this is a dirty little class that pops up a dialog asking what you'd like inside of a sample printed report.\n * then, you can pass the object to a printer which puts values in...\n */\npublic class SampleBit {\n\n    private boolean sb_title;\n\n    private boolean sb_printinfo;\n\n    private boolean sb_data;\n\n    private boolean sb_meta;\n\n    private boolean sb_weiser;\n\n    private boolean sb_elements;\n\n    private boolean sb_header;\n\n    private boolean sb_doublespace;\n\n    private SampleBit() {\n    }\n\n    public boolean wantTitle() {\n        return sb_title;\n    }\n\n    public boolean wantPrintInfo() {\n        return sb_printinfo;\n    }\n\n    public boolean wantSampleHeader() {\n        return sb_header;\n    }\n\n    public boolean wantSampleData() {\n        return sb_data;\n    }\n\n    public boolean wantMetaData() {\n        return sb_meta;\n    }\n\n    public boolean wantWeiserjahre() {\n        return sb_weiser;\n    }\n\n    public boolean wantElements() {\n        return sb_elements;\n    }\n\n    public boolean isDoubleSpaced() {\n        return sb_doublespace;\n    }\n\n    static public SampleBit askBits(JFrame parent) {\n        final JDialog dialog;\n        Container c;\n        JPanel checkboxpanel, buttonpanel;\n        final class successholder {\n\n            boolean success;\n        }\n        final successholder success = new successholder();\n        success.success = false;\n        dialog = new JDialog(parent, \"Sample report bit chooser\", true);\n        c = dialog.getContentPane();\n        c.setLayout(new BorderLayout());\n        checkboxpanel = new JPanel(new GridBagLayout());\n        checkboxpanel.setBorder(BorderFactory.createTitledBorder(\"Data options\"));\n        GridBagConstraints gbc = new GridBagConstraints();\n        gbc.anchor = gbc.WEST;\n        gbc.fill = gbc.NONE;\n        gbc.insets = new Insets(2, 2, 2, 2);\n        gbc.gridy = 0;\n        JCheckBox showTitle = new JCheckBox(\"Title\", true);\n        JCheckBox showPrintInfo = new JCheckBox(\"Printing info\", true);\n        JCheckBox showSampleHeader = new JCheckBox(\"Sample header (non-indexed only)\", true);\n        JCheckBox showSampleData = new JCheckBox(\"Sample data\", true);\n        JCheckBox showMeta = new JCheckBox(\"Metadata\", true);\n        JCheckBox showWeiser = new JCheckBox(\"Weiserjahre\", true);\n        JCheckBox showElements = new JCheckBox(\"Elements\", true);\n        JCheckBox doubleSpace = new JCheckBox(\"Double-space all numerical data\", true);\n        JLabel text = new JLabel(\"<html>Which parts of the report<br>would you like to include?\");\n        addComponent(checkboxpanel, text, gbc);\n        addComponent(checkboxpanel, showTitle, gbc);\n        addComponent(checkboxpanel, showPrintInfo, gbc);\n        addComponent(checkboxpanel, showSampleHeader, gbc);\n        addComponent(checkboxpanel, showSampleData, gbc);\n        addComponent(checkboxpanel, showMeta, gbc);\n        addComponent(checkboxpanel, showWeiser, gbc);\n        addComponent(checkboxpanel, showElements, gbc);\n        addComponent(checkboxpanel, doubleSpace, gbc);\n        c.add(checkboxpanel, BorderLayout.CENTER);\n        buttonpanel = new JPanel(new FlowLayout(FlowLayout.RIGHT));\n        String oktext = corina.ui.I18n.getText(\"ok\");\n        if (oktext == null)\n            oktext = \"Ok\";\n        JButton okButton = new JButton(oktext);\n        buttonpanel.add(okButton);\n        okButton.addActionListener(new ActionListener() {\n\n            public void actionPerformed(ActionEvent ae) {\n                success.success = true;\n                dialog.dispose();\n            }\n        });\n        String canceltext = corina.ui.I18n.getText(\"cancel\");\n        if (canceltext == null)\n            canceltext = \"Cancel\";\n        JButton cancelButton = new JButton(canceltext);\n        buttonpanel.add(cancelButton);\n        cancelButton.addActionListener(new ActionListener() {\n\n            public void actionPerformed(ActionEvent ae) {\n                dialog.dispose();\n            }\n        });\n        c.add(buttonpanel, BorderLayout.SOUTH);\n        dialog.pack();\n        dialog.setLocationRelativeTo(parent);\n        dialog.setVisible(true);\n        if (!success.success)\n            return null;\n        SampleBit sb = new SampleBit();\n        sb.sb_data = showSampleData.isSelected();\n        sb.sb_header = showSampleHeader.isSelected();\n        sb.sb_elements = showElements.isSelected();\n        sb.sb_meta = showMeta.isSelected();\n        sb.sb_printinfo = showPrintInfo.isSelected();\n        sb.sb_title = showTitle.isSelected();\n        sb.sb_weiser = showWeiser.isSelected();\n        sb.sb_doublespace = doubleSpace.isSelected();\n        return sb;\n    }\n\n    static private void addComponent(Container cont, Component comp, GridBagConstraints gbc) {\n        gbc.gridy++;\n        gbc.gridx = 0;\n        cont.add(comp, gbc);\n    }\n}\n",
		"id": "/EvoSuiteBenchmark/35_corina/src/main/java/corina/editor/SampleBit_6Test.java",
		"test_prompt": "// SampleBit_6Test.java\npackage corina.editor;\n\nimport javax.swing.BorderFactory;\nimport javax.swing.JPanel;\nimport javax.swing.JDialog;\nimport javax.swing.JFrame;\nimport java.awt.Container;\nimport java.awt.GridBagLayout;\nimport java.awt.GridBagConstraints;\nimport java.awt.Component;\nimport java.awt.Insets;\nimport javax.swing.JCheckBox;\nimport javax.swing.JButton;\nimport java.awt.BorderLayout;\nimport java.awt.FlowLayout;\nimport java.awt.event.ActionEvent;\nimport java.awt.event.ActionListener;\nimport javax.swing.JLabel;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link SampleBit}.\n* It contains ten unit test cases for the {@link SampleBit#wantElements()} method.\n*/\nclass SampleBit_6Test {"
	},
	{
		"original_code": "// SampleBit.java\npackage corina.editor;\n\nimport javax.swing.BorderFactory;\nimport javax.swing.JPanel;\nimport javax.swing.JDialog;\nimport javax.swing.JFrame;\nimport java.awt.Container;\nimport java.awt.GridBagLayout;\nimport java.awt.GridBagConstraints;\nimport java.awt.Component;\nimport java.awt.Insets;\nimport javax.swing.JCheckBox;\nimport javax.swing.JButton;\nimport java.awt.BorderLayout;\nimport java.awt.FlowLayout;\nimport java.awt.event.ActionEvent;\nimport java.awt.event.ActionListener;\nimport javax.swing.JLabel;\n\n/*\n * this is a dirty little class that pops up a dialog asking what you'd like inside of a sample printed report.\n * then, you can pass the object to a printer which puts values in...\n */\npublic class SampleBit {\n\n    private boolean sb_title;\n\n    private boolean sb_printinfo;\n\n    private boolean sb_data;\n\n    private boolean sb_meta;\n\n    private boolean sb_weiser;\n\n    private boolean sb_elements;\n\n    private boolean sb_header;\n\n    private boolean sb_doublespace;\n\n    private SampleBit() {\n    }\n\n    public boolean wantTitle() {\n        return sb_title;\n    }\n\n    public boolean wantPrintInfo() {\n        return sb_printinfo;\n    }\n\n    public boolean wantSampleHeader() {\n        return sb_header;\n    }\n\n    public boolean wantSampleData() {\n        return sb_data;\n    }\n\n    public boolean wantMetaData() {\n        return sb_meta;\n    }\n\n    public boolean wantWeiserjahre() {\n        return sb_weiser;\n    }\n\n    public boolean wantElements() {\n        return sb_elements;\n    }\n\n    public boolean isDoubleSpaced() {\n        return sb_doublespace;\n    }\n\n    static public SampleBit askBits(JFrame parent) {\n        final JDialog dialog;\n        Container c;\n        JPanel checkboxpanel, buttonpanel;\n        final class successholder {\n\n            boolean success;\n        }\n        final successholder success = new successholder();\n        success.success = false;\n        dialog = new JDialog(parent, \"Sample report bit chooser\", true);\n        c = dialog.getContentPane();\n        c.setLayout(new BorderLayout());\n        checkboxpanel = new JPanel(new GridBagLayout());\n        checkboxpanel.setBorder(BorderFactory.createTitledBorder(\"Data options\"));\n        GridBagConstraints gbc = new GridBagConstraints();\n        gbc.anchor = gbc.WEST;\n        gbc.fill = gbc.NONE;\n        gbc.insets = new Insets(2, 2, 2, 2);\n        gbc.gridy = 0;\n        JCheckBox showTitle = new JCheckBox(\"Title\", true);\n        JCheckBox showPrintInfo = new JCheckBox(\"Printing info\", true);\n        JCheckBox showSampleHeader = new JCheckBox(\"Sample header (non-indexed only)\", true);\n        JCheckBox showSampleData = new JCheckBox(\"Sample data\", true);\n        JCheckBox showMeta = new JCheckBox(\"Metadata\", true);\n        JCheckBox showWeiser = new JCheckBox(\"Weiserjahre\", true);\n        JCheckBox showElements = new JCheckBox(\"Elements\", true);\n        JCheckBox doubleSpace = new JCheckBox(\"Double-space all numerical data\", true);\n        JLabel text = new JLabel(\"<html>Which parts of the report<br>would you like to include?\");\n        addComponent(checkboxpanel, text, gbc);\n        addComponent(checkboxpanel, showTitle, gbc);\n        addComponent(checkboxpanel, showPrintInfo, gbc);\n        addComponent(checkboxpanel, showSampleHeader, gbc);\n        addComponent(checkboxpanel, showSampleData, gbc);\n        addComponent(checkboxpanel, showMeta, gbc);\n        addComponent(checkboxpanel, showWeiser, gbc);\n        addComponent(checkboxpanel, showElements, gbc);\n        addComponent(checkboxpanel, doubleSpace, gbc);\n        c.add(checkboxpanel, BorderLayout.CENTER);\n        buttonpanel = new JPanel(new FlowLayout(FlowLayout.RIGHT));\n        String oktext = corina.ui.I18n.getText(\"ok\");\n        if (oktext == null)\n            oktext = \"Ok\";\n        JButton okButton = new JButton(oktext);\n        buttonpanel.add(okButton);\n        okButton.addActionListener(new ActionListener() {\n\n            public void actionPerformed(ActionEvent ae) {\n                success.success = true;\n                dialog.dispose();\n            }\n        });\n        String canceltext = corina.ui.I18n.getText(\"cancel\");\n        if (canceltext == null)\n            canceltext = \"Cancel\";\n        JButton cancelButton = new JButton(canceltext);\n        buttonpanel.add(cancelButton);\n        cancelButton.addActionListener(new ActionListener() {\n\n            public void actionPerformed(ActionEvent ae) {\n                dialog.dispose();\n            }\n        });\n        c.add(buttonpanel, BorderLayout.SOUTH);\n        dialog.pack();\n        dialog.setLocationRelativeTo(parent);\n        dialog.setVisible(true);\n        if (!success.success)\n            return null;\n        SampleBit sb = new SampleBit();\n        sb.sb_data = showSampleData.isSelected();\n        sb.sb_header = showSampleHeader.isSelected();\n        sb.sb_elements = showElements.isSelected();\n        sb.sb_meta = showMeta.isSelected();\n        sb.sb_printinfo = showPrintInfo.isSelected();\n        sb.sb_title = showTitle.isSelected();\n        sb.sb_weiser = showWeiser.isSelected();\n        sb.sb_doublespace = doubleSpace.isSelected();\n        return sb;\n    }\n\n    static private void addComponent(Container cont, Component comp, GridBagConstraints gbc) {\n        gbc.gridy++;\n        gbc.gridx = 0;\n        cont.add(comp, gbc);\n    }\n}\n",
		"id": "/EvoSuiteBenchmark/35_corina/src/main/java/corina/editor/SampleBit_7Test.java",
		"test_prompt": "// SampleBit_7Test.java\npackage corina.editor;\n\nimport javax.swing.BorderFactory;\nimport javax.swing.JPanel;\nimport javax.swing.JDialog;\nimport javax.swing.JFrame;\nimport java.awt.Container;\nimport java.awt.GridBagLayout;\nimport java.awt.GridBagConstraints;\nimport java.awt.Component;\nimport java.awt.Insets;\nimport javax.swing.JCheckBox;\nimport javax.swing.JButton;\nimport java.awt.BorderLayout;\nimport java.awt.FlowLayout;\nimport java.awt.event.ActionEvent;\nimport java.awt.event.ActionListener;\nimport javax.swing.JLabel;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link SampleBit}.\n* It contains ten unit test cases for the {@link SampleBit#isDoubleSpaced()} method.\n*/\nclass SampleBit_7Test {"
	},
	{
		"original_code": "// SampleBit.java\npackage corina.editor;\n\nimport javax.swing.BorderFactory;\nimport javax.swing.JPanel;\nimport javax.swing.JDialog;\nimport javax.swing.JFrame;\nimport java.awt.Container;\nimport java.awt.GridBagLayout;\nimport java.awt.GridBagConstraints;\nimport java.awt.Component;\nimport java.awt.Insets;\nimport javax.swing.JCheckBox;\nimport javax.swing.JButton;\nimport java.awt.BorderLayout;\nimport java.awt.FlowLayout;\nimport java.awt.event.ActionEvent;\nimport java.awt.event.ActionListener;\nimport javax.swing.JLabel;\n\n/*\n * this is a dirty little class that pops up a dialog asking what you'd like inside of a sample printed report.\n * then, you can pass the object to a printer which puts values in...\n */\npublic class SampleBit {\n\n    private boolean sb_title;\n\n    private boolean sb_printinfo;\n\n    private boolean sb_data;\n\n    private boolean sb_meta;\n\n    private boolean sb_weiser;\n\n    private boolean sb_elements;\n\n    private boolean sb_header;\n\n    private boolean sb_doublespace;\n\n    private SampleBit() {\n    }\n\n    public boolean wantTitle() {\n        return sb_title;\n    }\n\n    public boolean wantPrintInfo() {\n        return sb_printinfo;\n    }\n\n    public boolean wantSampleHeader() {\n        return sb_header;\n    }\n\n    public boolean wantSampleData() {\n        return sb_data;\n    }\n\n    public boolean wantMetaData() {\n        return sb_meta;\n    }\n\n    public boolean wantWeiserjahre() {\n        return sb_weiser;\n    }\n\n    public boolean wantElements() {\n        return sb_elements;\n    }\n\n    public boolean isDoubleSpaced() {\n        return sb_doublespace;\n    }\n\n    static public SampleBit askBits(JFrame parent) {\n        final JDialog dialog;\n        Container c;\n        JPanel checkboxpanel, buttonpanel;\n        final class successholder {\n\n            boolean success;\n        }\n        final successholder success = new successholder();\n        success.success = false;\n        dialog = new JDialog(parent, \"Sample report bit chooser\", true);\n        c = dialog.getContentPane();\n        c.setLayout(new BorderLayout());\n        checkboxpanel = new JPanel(new GridBagLayout());\n        checkboxpanel.setBorder(BorderFactory.createTitledBorder(\"Data options\"));\n        GridBagConstraints gbc = new GridBagConstraints();\n        gbc.anchor = gbc.WEST;\n        gbc.fill = gbc.NONE;\n        gbc.insets = new Insets(2, 2, 2, 2);\n        gbc.gridy = 0;\n        JCheckBox showTitle = new JCheckBox(\"Title\", true);\n        JCheckBox showPrintInfo = new JCheckBox(\"Printing info\", true);\n        JCheckBox showSampleHeader = new JCheckBox(\"Sample header (non-indexed only)\", true);\n        JCheckBox showSampleData = new JCheckBox(\"Sample data\", true);\n        JCheckBox showMeta = new JCheckBox(\"Metadata\", true);\n        JCheckBox showWeiser = new JCheckBox(\"Weiserjahre\", true);\n        JCheckBox showElements = new JCheckBox(\"Elements\", true);\n        JCheckBox doubleSpace = new JCheckBox(\"Double-space all numerical data\", true);\n        JLabel text = new JLabel(\"<html>Which parts of the report<br>would you like to include?\");\n        addComponent(checkboxpanel, text, gbc);\n        addComponent(checkboxpanel, showTitle, gbc);\n        addComponent(checkboxpanel, showPrintInfo, gbc);\n        addComponent(checkboxpanel, showSampleHeader, gbc);\n        addComponent(checkboxpanel, showSampleData, gbc);\n        addComponent(checkboxpanel, showMeta, gbc);\n        addComponent(checkboxpanel, showWeiser, gbc);\n        addComponent(checkboxpanel, showElements, gbc);\n        addComponent(checkboxpanel, doubleSpace, gbc);\n        c.add(checkboxpanel, BorderLayout.CENTER);\n        buttonpanel = new JPanel(new FlowLayout(FlowLayout.RIGHT));\n        String oktext = corina.ui.I18n.getText(\"ok\");\n        if (oktext == null)\n            oktext = \"Ok\";\n        JButton okButton = new JButton(oktext);\n        buttonpanel.add(okButton);\n        okButton.addActionListener(new ActionListener() {\n\n            public void actionPerformed(ActionEvent ae) {\n                success.success = true;\n                dialog.dispose();\n            }\n        });\n        String canceltext = corina.ui.I18n.getText(\"cancel\");\n        if (canceltext == null)\n            canceltext = \"Cancel\";\n        JButton cancelButton = new JButton(canceltext);\n        buttonpanel.add(cancelButton);\n        cancelButton.addActionListener(new ActionListener() {\n\n            public void actionPerformed(ActionEvent ae) {\n                dialog.dispose();\n            }\n        });\n        c.add(buttonpanel, BorderLayout.SOUTH);\n        dialog.pack();\n        dialog.setLocationRelativeTo(parent);\n        dialog.setVisible(true);\n        if (!success.success)\n            return null;\n        SampleBit sb = new SampleBit();\n        sb.sb_data = showSampleData.isSelected();\n        sb.sb_header = showSampleHeader.isSelected();\n        sb.sb_elements = showElements.isSelected();\n        sb.sb_meta = showMeta.isSelected();\n        sb.sb_printinfo = showPrintInfo.isSelected();\n        sb.sb_title = showTitle.isSelected();\n        sb.sb_weiser = showWeiser.isSelected();\n        sb.sb_doublespace = doubleSpace.isSelected();\n        return sb;\n    }\n\n    static private void addComponent(Container cont, Component comp, GridBagConstraints gbc) {\n        gbc.gridy++;\n        gbc.gridx = 0;\n        cont.add(comp, gbc);\n    }\n}\n",
		"id": "/EvoSuiteBenchmark/35_corina/src/main/java/corina/editor/SampleBit_8Test.java",
		"test_prompt": "// SampleBit_8Test.java\npackage corina.editor;\n\nimport javax.swing.BorderFactory;\nimport javax.swing.JPanel;\nimport javax.swing.JDialog;\nimport javax.swing.JFrame;\nimport java.awt.Container;\nimport java.awt.GridBagLayout;\nimport java.awt.GridBagConstraints;\nimport java.awt.Component;\nimport java.awt.Insets;\nimport javax.swing.JCheckBox;\nimport javax.swing.JButton;\nimport java.awt.BorderLayout;\nimport java.awt.FlowLayout;\nimport java.awt.event.ActionEvent;\nimport java.awt.event.ActionListener;\nimport javax.swing.JLabel;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link SampleBit}.\n* It contains ten unit test cases for the {@link SampleBit#askBits(JFrame)} method.\n*/\nclass SampleBit_8Test {"
	},
	{
		"original_code": "// Editor.java\n//\n// This file is part of Corina.\n//\n// Corina is free software; you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation; either version 2 of the License, or\n// (at your option) any later version.\n//\n// Corina is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Corina; if not, write to the Free Software\n// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n//\n// Copyright 2001 Ken Harris <kbh7@cornell.edu>\n//\npackage corina.editor;\n\nimport java.awt.BorderLayout;\nimport java.awt.Color;\nimport java.awt.Component;\nimport java.awt.Dimension;\nimport java.awt.Font;\nimport java.awt.Frame;\nimport java.awt.event.ActionEvent;\nimport java.awt.event.WindowEvent;\nimport java.awt.print.PageFormat;\nimport java.io.File;\nimport java.io.IOException;\nimport java.util.Collections;\nimport javax.swing.AbstractAction;\nimport javax.swing.BorderFactory;\nimport javax.swing.Box;\nimport javax.swing.JButton;\nimport javax.swing.JCheckBox;\nimport javax.swing.JComponent;\nimport javax.swing.JDialog;\nimport javax.swing.JLabel;\nimport javax.swing.JMenuBar;\nimport javax.swing.JMenuItem;\nimport javax.swing.JOptionPane;\nimport javax.swing.JPanel;\nimport javax.swing.JScrollPane;\nimport javax.swing.JTabbedPane;\nimport javax.swing.JTable;\nimport javax.swing.JTextField;\nimport javax.swing.ScrollPaneConstants;\nimport javax.swing.event.DocumentEvent;\nimport javax.swing.event.UndoableEditEvent;\nimport javax.swing.event.UndoableEditListener;\nimport javax.swing.text.BadLocationException;\nimport javax.swing.text.Document;\nimport javax.swing.undo.UndoManager;\nimport javax.swing.undo.UndoableEdit;\nimport javax.swing.undo.UndoableEditSupport;\nimport corina.Build;\nimport corina.Sample;\nimport corina.SampleEvent;\nimport corina.SampleListener;\nimport corina.core.App;\nimport corina.gui.Bug;\nimport corina.gui.ElementsPanel;\nimport corina.gui.FileDialog;\nimport corina.gui.Help;\nimport corina.gui.Layout;\nimport corina.gui.PrintableDocument;\nimport corina.gui.SaveableDocument;\nimport corina.gui.UserCancelledException;\nimport corina.gui.XFrame;\nimport corina.gui.menus.HelpMenu;\nimport corina.gui.menus.WindowMenu;\nimport corina.logging.CorinaLog;\nimport corina.prefs.Prefs;\nimport corina.prefs.PrefsEvent;\nimport corina.prefs.PrefsListener;\nimport corina.site.Site;\nimport corina.ui.Alert;\nimport corina.ui.Builder;\nimport corina.ui.I18n;\nimport corina.util.Center;\nimport corina.util.DocumentListener2;\nimport corina.util.OKCancel;\nimport corina.util.Overwrite;\nimport corina.io.SerialSampleIO;\nimport corina.io.SerialSampleIOEvent;\nimport corina.Year;\n\n/*\n left to do:\n -- extract EditorMenuBar as its own class?\n -- javadoc!\n \n  change around the menus slightly:\n\n  File\n    (usual)\n  Edit\n    Undo\n    Redo\n    ---\n    Cut (dimmed)\n    Copy\n    Paste\n    ---\n    Insert Year\n    Delete Year\n    ---\n    Start Measuring\n    ---\n    (Preferences...)\n  Manipulate\n    Redate...\n    Index...\n    Truncate...\n    Reverse*\n    ---\n    Cross Against...\n    Reconcile*\n  Sum (Master?)\n    Re-Sum\n    Clean\n    ---\n    Add Element...\n    Remove Element --- no, add cut/copy/paste/delete to Edit; Edit->Delete removes element?\n\n  NB: the menu enabler/disabler code is duplicated -- in the init, and also in the event handler.  refactor.\n\n  ----------------------------------------\n\n  this class is the second-biggest (with 64 more lines it would be the\n  biggest), and is in serious need of refactoring.  things that don't\n  belong here:\n\n  -- setEnabled() calls are duplicated: on init, and also in the event-handlers\n\n  -- guts of save() look really familiar ...\n     ... that goes into XFrame, or some other general utility class\n\n  -- WJ panel stuff could go into a wjpanel, perhaps subclassing dataviewpanel\n\n  -- makeMenus is lines 455-868 (n=414).  ouch.  maybe this could be (compiled?) scheme.\n\n  -- the 3 view menuitems can certainly be combined into one Action\n\n  -- since the hold-down-control crap is gone now, those menus don't need object-scope.\n  (what did i mean by this?)\n\n  -- refactor mapframe so it can be simply \"new MapFrame(sample)\"\n*/\npublic class Editor extends XFrame implements SaveableDocument, PrefsListener, SampleListener, PrintableDocument {\n\n    private static final CorinaLog log = new CorinaLog(\"Editor\");\n\n    // gui\n    private JTable wjTable;\n\n    private JPanel wjPanel;\n\n    private ElementsPanel elemPanel = null;\n\n    private EditorMeasurePanel measurePanel = null;\n\n    private JComponent metaView;\n\n    // gui -- new\n    // (a jpanel)\n    private SampleDataView dataView;\n\n    private JTabbedPane rolodex;\n\n    // for menus we have to notify...\n    private EditorViewMenu editorViewMenu;\n\n    private EditorSumMenu editorSumMenu;\n\n    private EditorEditMenu editorEditMenu;\n\n    // undo\n    private UndoManager undoManager = new UndoManager();\n\n    private UndoableEditSupport undoSupport = new UndoableEditSupport();\n\n    public void postEdit(UndoableEdit x) {\n        undoSupport.postEdit(x);\n    }\n\n    private void refreshUndoRedo(JMenuItem undoMenu, JMenuItem redoMenu) {\n        undoMenu.setText(undoManager.getUndoPresentationName());\n        undoMenu.setEnabled(undoManager.canUndo());\n        if (!undoManager.canUndo())\n            undoMenu.setText(I18n.getText(\"undo\"));\n        redoMenu.setText(undoManager.getRedoPresentationName());\n        redoMenu.setEnabled(undoManager.canRedo());\n        if (!undoManager.canRedo())\n            redoMenu.setText(I18n.getText(\"redo\"));\n    }\n\n    private void initUndoRedo() {\n        undoManager = new UndoManager();\n        undoSupport.addUndoableEditListener(new UndoAdapter());\n        // ??\n        // DISABLED: refreshUndoRedo(/* FAKE: */ null, null);\n    }\n\n    private class UndoAdapter implements UndoableEditListener {\n\n        public void undoableEditHappened(UndoableEditEvent e) {\n            undoManager.addEdit(e.getEdit());\n            // DISABLED: refreshUndoRedo(/* FAKE: */ null, null);\n        }\n    }\n\n    // data\n    private Sample sample;\n\n    // BUG: measureMenu gets enabled/disabled here, when it's status\n    // should be the AND of what editor thinks and what measure\n    // thinks. add pleaseDim()/canUndim(), or just override setEnabled()?\n    // SampleListener\n    public void sampleRedated(SampleEvent e) {\n        // title\n        updateTitle();\n    }\n\n    public void sampleDataChanged(SampleEvent e) {\n        // menubar gets \"*\" if change made -- BUG: no, then meta field modified?\n        // gets set, so this ISN'T NEEDED.  right?\n        updateTitle();\n        // -> todo: menubar needs undo/redo, save updated\n    }\n\n    public void sampleMetadataChanged(SampleEvent e) {\n        // title may have changed\n        updateTitle();\n        // get rid of wj, elements tabs\n        if (e != null) {\n            // only for real events, not menu setup -- HACK!\n            if (!sample.hasWeiserjahre())\n                rolodex.remove(wjPanel);\n            else if (rolodex.indexOfComponent(wjPanel) == -1)\n                rolodex.add(wjPanel, I18n.getText(\"tab_weiserjahre\"));\n            if (sample.elements == null) {\n                rolodex.remove(elemPanel);\n                initElemPanel();\n                editorViewMenu.setElementsPanel(elemPanel);\n                editorSumMenu.setElementsPanel(elemPanel);\n            } else if (elemPanel == null) {\n                initElemPanel();\n                rolodex.add(elemPanel, I18n.getText(\"tab_elements\"));\n                editorViewMenu.setElementsPanel(elemPanel);\n                editorSumMenu.setElementsPanel(elemPanel);\n            }\n        }\n    }\n\n    public void sampleElementsChanged(SampleEvent e) {\n    }\n\n    // SaveableDocument\n    public String toString() {\n        return sample.toString();\n    }\n\n    public boolean isSaved() {\n        return !sample.isModified();\n    }\n\n    public void setFilename(String fn) {\n        sample.meta.put(\"filename\", fn);\n    }\n\n    public String getFilename() {\n        return (String) sample.meta.get(\"filename\");\n    }\n\n    public String getDocumentTitle() {\n        String fn = getFilename();\n        if (fn != null) {\n            // REFACTOR: why's this not return new File(fn).getName()?\n            int lastSlash = fn.lastIndexOf(File.separatorChar);\n            if (lastSlash != -1)\n                fn = fn.substring(lastSlash + 1);\n            return fn;\n        } else {\n            return (String) sample.meta.get(\"title\");\n        }\n    }\n\n    // saveabledocument -- yes, we can use save as...\n    public boolean isNameChangeable() {\n        return true;\n    }\n\n    public void save() {\n        // make sure we're not measuring\n        this.stopMeasuring();\n        // make sure user isn't editing\n        dataView.stopEditing();\n        // make sure they're all numbers -- no nulls, strings, etc.\n        // abstract this out as \"boolean verifyOnlyNumbers()\" or something?\n        for (int i = 0; i < sample.data.size(); i++) {\n            Object o = sample.data.get(i);\n            if (o == null || !(o instanceof Integer)) {\n                // integer?  or number?\n                // BUT: didn't i used to pass in |this| as the owner?  is this worse?\n                Alert.error(\"Bad Data\", \"One or more years had bad (non-numeric) data, or no data:\\n\" + \"- year \" + sample.range.getStart().add(i) + \" has \" + (o == null ? \"no value\" : \"value \" + o));\n                return;\n                // BUG: return failure.  how?  (UserCancelled?)\n                // NO, DESIGN BUG: this shouldn't ever be allowed to happen.  why does it?\n            }\n            // REPLACE WITH: call to method ensureNumbersOnly()\n            // -- why not simply disallow non-numbers to begin with?\n        }\n        // get filename from sample; fall back to user's choice\n        // BUG: why not containsKey()?\n        String filename = (String) sample.meta.get(\"filename\");\n        if (filename == null) {\n            // make sure metadata was entered\n            if (!sample.wasMetadataChanged()) {\n                // what i'd prefer:\n                // Alert.ask(\"You didn't set the metadata!\", { \"Save Anyway\", \"Cancel\" })\n                // or even: Alert.ask(\"You didn't set the metadata! [Save Anyway] [Cancel]\"); (!)\n                /*\n\t\t\t\t can i put something like this directly in a resource?\n\t\t\t\t You didn't set the metadata! [Save Anyway] [Cancel]\n\t\t\t\t that's crazy talk!\n\t\t\t\t */\n                int x = JOptionPane.showOptionDialog(this, \"You didn't set the metadata!\", \"Metadata Untouched\", JOptionPane.YES_NO_OPTION, // no icon\n                JOptionPane.QUESTION_MESSAGE, // no icon\n                null, new String[] { \"Save Anyway\", \"Cancel\" }, // default\n                null);\n                if (x == 1) {\n                    // show metadata tab, and abort.\n                    rolodex.setSelectedIndex(1);\n                    // user cancelled!\n                    return;\n                }\n            }\n            // get target filename\n            try {\n                filename = FileDialog.showSingle(\"Save\");\n                // check for already-exists\n                Overwrite.overwrite(filename);\n            } catch (UserCancelledException uce) {\n                return;\n            }\n            sample.meta.put(\"filename\", filename);\n        }\n        save(filename);\n    }\n\n    public void save(String filename) {\n        // save sample\n        try {\n            // BUG?  do i mean to ignore the filename args?\n            // FIXME: isn't this just sample.save()?\n            sample.save((String) sample.meta.get(\"filename\"));\n        } catch (IOException ioe) {\n            Alert.error(\"I/O Error\", \"There was an error while saving the file: \\n\" + ioe.getMessage());\n            return;\n        } catch (Exception e) {\n            Bug.bug(e);\n        }\n        sample.clearModified();\n        // mac os x\n        App.platform.setModified(this, false);\n        // BIGGER ISSUE: need to separate/abstract window-title/window-modified setting\n        // -- make window (jframe) a samplelistener for updating platform.modified?\n        // -- (platform.modified sets either mac property, or resets *+title from getTitle()?)\n        // LONG-TERM: this won't be an issue.  why not?  because we won't\n        // have this klutzy \"save\" system.  open a file, mess around with it, close it.\n        // as far as you're concerned, it's always \"saved\".\n        updateTitle();\n    }\n\n    // init methods\n    private void initWJPanel() {\n        // Mac OS X has animated progress bars, which is *not* wanted\n        // for the histogram (they're not really animated here, but\n        // they change phase when redrawn).  Cocoa has other special\n        // bars to use for this sort of thing, but probably not\n        // available to a normal Java program.  So lose the last\n        // column, and add a hand-drawn histogram instead.\n        // no wj?  die.  (Q: why didn't i have/need this before?  A: i\n        // made it, but it never got displayed, so nobody checks to\n        // see if it actually has any rows or columns)\n        // if (!sample.hasWeiserjahre())\n        // return;\n        // -> i should go back to doing it this way.  don't have an\n        // initialized wjtable/panel sitting around if it's not being used.\n        // FIXME.\n        // create the table\n        wjTable = new JTable(new WJTableModel(sample));\n        // select the first year\n        wjTable.setRowSelectionAllowed(false);\n        if (sample.hasWeiserjahre()) {\n            wjTable.setRowSelectionInterval(0, 0);\n            wjTable.setColumnSelectionInterval(sample.range.getStart().column() + 1, sample.range.getStart().column() + 1);\n        }\n        // make the \"Nr\" column renderer a progress bar -- this recomputes max(count)!!!\n        int max = 0;\n        if (sample.count != null)\n            max = ((Integer) Collections.max(sample.count)).intValue();\n        wjTable.getColumnModel().getColumn(11).setCellRenderer(new CountRenderer(max));\n        // set font, gridlines, and colors -- these are all user preferences\n        // put table and new modeline into a panel\n        wjPanel = new JPanel(new BorderLayout(0, 0));\n        wjPanel.add(new JScrollPane(wjTable, ScrollPaneConstants.VERTICAL_SCROLLBAR_ALWAYS, ScrollPaneConstants.HORIZONTAL_SCROLLBAR_AS_NEEDED), BorderLayout.CENTER);\n        wjPanel.add(new Modeline(wjTable, sample), BorderLayout.SOUTH);\n    }\n\n    private void initMetaView() {\n        metaView = new MetadataPanel(sample);\n        // FIXME: move this to add/remove notify of MetadataPanel?\n        sample.addSampleListener((SampleListener) metaView);\n    }\n\n    private void initElemPanel() {\n        if (sample.elements != null) {\n            elemPanel = new ElementsPanel(this);\n            sample.addSampleListener(elemPanel);\n        } else {\n            if (elemPanel != null)\n                sample.removeSampleListener(elemPanel);\n            elemPanel = null;\n        }\n    }\n\n    private void addCards() {\n        // start fresh\n        rolodex.removeAll();\n        // all samples get data, meta\n        dataView = new SampleDataView(sample);\n        rolodex.add(dataView, I18n.getText(\"tab_data\"));\n        rolodex.add(metaView, I18n.getText(\"tab_metadata\"));\n        // wj and elements, if it's summed\n        if (sample.hasWeiserjahre())\n            rolodex.add(wjPanel, I18n.getText(\"tab_weiserjahre\"));\n        if (sample.elements != null)\n            rolodex.add(elemPanel, I18n.getText(\"tab_elements\"));\n    }\n\n    private void initRolodex() {\n        // try also: BOTTOM, but that's worse, by Fitt's Law, isn't it?\n        // (excel, for example, does that.)\n        rolodex = new JTabbedPane(JTabbedPane.TOP);\n        // rolodex.setBorder(BorderFactory.createEmptyBorder(4, 0, 0, 0)); -- but the old frame is still there!  hmm...\n        addCards();\n        getContentPane().add(rolodex, BorderLayout.CENTER);\n    }\n\n    public Sample getSample() {\n        return sample;\n    }\n\n    public void updateTitle() {\n        setTitle(sample.toString() + \" - \" + Build.VERSION + \" \" + Build.TIMESTAMP);\n    }\n\n    // ask the user for a title for this (new) sample.  it's guaranteed to have a number, now!\n    /*\n\t TODO:\n\t -- esc doesn't work -- no, this is a problem with OKCancel in 1.4.1, not here\n\t -- (initial value is name of this site?)\n\t ---- (askTitle(Site)?)\n\t -- (title for non-mac platforms?)\n\t -- (i18n / extract text)\n\t -- (import classes so i don't need fq here)\n\t */\n    /*\n\t what's truly unique about this?\n\t ... AskText extends JDialog ...\n\t pass it:\n\t -- initial text\n\t -- dictionary for autocomplete\n\t -- instructions text\n\t -- help tag\n\t then, simply:\n\t ask.show();\n\t title = ask.getResult();\n\t */\n    private static final String DEMO = \"Acemh\\u00FCy\\u00FCk 36A\";\n\n    private static String askTitle() throws UserCancelledException {\n        JLabel line1 = new JLabel(\"Enter a title for the new sample.\");\n        JLabel line2 = new JLabel(\"Titles are usually of the form \\\"\" + DEMO + \"\\\".\");\n        JLabel line3 = new JLabel(\"(You must include both a letter and a number in the title.)\");\n        // jmultilinelabel for last 2 lines?\n        line2.setBorder(BorderFactory.createEmptyBorder(10, 0, 0, 0));\n        line3.setBorder(BorderFactory.createEmptyBorder(0, 0, 10, 0));\n        JTextField input = new AutoComplete(\"\", 30);\n        // defaults to site names -- TODO: pass current site in as initial text?\n        final boolean[] isOk = new boolean[1];\n        JButton help = Builder.makeButton(\"help\");\n        Help.addToButton(help, \"identification\");\n        JButton cancel = Builder.makeButton(\"cancel\");\n        final JButton ok = Builder.makeButton(\"ok\");\n        ok.setEnabled(false);\n        input.getDocument().addDocumentListener(new DocumentListener2() {\n\n            public void update(DocumentEvent e) {\n                try {\n                    Document doc = e.getDocument();\n                    // BETTER: why not just input.getText()?\n                    String text = doc.getText(0, doc.getLength());\n                    // FIXME: combine these!\n                    ok.setEnabled(containsDigit(text) && containsLetter(text));\n                } catch (BadLocationException ble) {\n                    // can't happen\n                }\n            }\n        });\n        /*\n\t\t how about:\n\t\t ...addDocumentAdapter(new Runnable() {\n\t\t public void run() {\n\t\t ok.setEnabled(containsDigit(text.getDocument().getText()));\n\t\t });\n\t\t // unaryop would be better\n\t\t */\n        JPanel text = Layout.boxLayoutY(line1, line2, line3);\n        JPanel buttons = Layout.buttonLayout(help, null, cancel, ok);\n        buttons.setBorder(BorderFactory.createEmptyBorder(10, 0, 10, 0));\n        JPanel content = Layout.borderLayout(text, null, input, null, null);\n        JPanel fixed = Layout.borderLayout(content, null, null, null, buttons);\n        fixed.setBorder(BorderFactory.createEmptyBorder(10, 14, 6, 14));\n        final JDialog dialog = new JDialog(new Frame(), true);\n        dialog.getContentPane().add(fixed);\n        AbstractAction okCancel = new AbstractAction() {\n\n            public void actionPerformed(ActionEvent e) {\n                isOk[0] = (e.getSource() == ok);\n                dialog.dispose();\n            }\n        };\n        ok.addActionListener(okCancel);\n        cancel.addActionListener(okCancel);\n        dialog.pack();\n        OKCancel.addKeyboardDefaults(ok);\n        // (if there's anything here, later, e.g., site name)\n        input.selectAll();\n        input.requestFocus();\n        Center.center(dialog);\n        dialog.show();\n        // then, after it's hidden (by cancel, ok, or close-box)...\n        if (!isOk[0])\n            throw new UserCancelledException();\n        return input.getText();\n    }\n\n    // FIXME: disable the \"ok\" button if there's no number in the title, but\n    // put a notice in the dialog saying it must have a number!\n    private String askTitleOld(String defaultText) throws UserCancelledException {\n        String title = defaultText;\n        for (; ; ) {\n            title = (String) // parent component\n            JOptionPane.// parent component\n            showInputDialog(// parent component\n            null, // message\n            I18n.getText(\"new_sample_prompt\"), // title\n            I18n.getText(\"new_sample\"), JOptionPane.QUESTION_MESSAGE, Builder.getIcon(// null, // icon\n            \"Tree-64x64.png\"), // values (options)\n            null, title);\n            // user cancelled?\n            if (title == null)\n                throw new UserCancelledException();\n            // make sure there's a digit in there somewhere, and return.\n            if (containsDigit(title) && containsLetter(title))\n                return title;\n            // no numbers!\n            // (FIXME: this error shouldn't exist!)\n            Alert.error(\"No number\", \"There's no number in that title.  I think you forgot the sample number.\");\n            // be sure to put in the user manual the trick for creating a sample\n            // without a sample number, if they ever need that: put a digit on\n            // the end, and remove it right away (heh heh).\n        }\n    }\n\n    // if i need this anywhere else, move to util?\n    private static boolean containsDigit(String s) {\n        for (int i = 0; i < s.length(); i++) if (Character.isDigit(s.charAt(i)))\n            return true;\n        return false;\n    }\n\n    private static boolean containsLetter(String s) {\n        for (int i = 0; i < s.length(); i++) if (Character.isLetter(s.charAt(i)))\n            return true;\n        return false;\n    }\n\n    public Editor() {\n        // ask user for title\n        String title;\n        try {\n            title = askTitle();\n        } catch (UserCancelledException uce) {\n            dispose();\n            return;\n        }\n        // make dataset ref, with our title\n        sample = new Sample();\n        sample.meta.put(\"title\", title);\n        // pass\n        setup();\n    }\n\n    // new sample for site -- not used yet\n    public Editor(Site s) {\n        // ask user for title\n        String title;\n        try {\n            // WAS: s.getName() + \" \");\n            title = askTitle();\n        } catch (UserCancelledException uce) {\n            dispose();\n            return;\n        }\n        // make dataset ref, with our title\n        sample = new Sample();\n        sample.meta.put(\"title\", title);\n        // pass\n        setup();\n    }\n\n    // TODO: want single-instance editors.\n    // so:\n    // -- make this private\n    // -- (should it just be Editor(filename)?)\n    // -- keep a (sample,editor) hash\n    // -- create a public getEditor(Sample)\n    // -- if an editor is in the hash, just front() it\n    // -- if it's not, add it\n    // -- on dispose(), remove it from the hash\n    public Editor(Sample sample) {\n        // copy data ref\n        this.sample = sample;\n        // pass\n        setup();\n    }\n\n    // setup common to both constructors\n    private void setup() {\n        // view area\n        initWJPanel();\n        initMetaView();\n        initElemPanel();\n        // i'll watch the data\n        sample.addSampleListener(this);\n        // title (must be before menubar)\n        updateTitle();\n        // put views into notecard-rolodex\n        initRolodex();\n        // set preferences\n        setUIFromPrefs();\n        // menubar\n        // This must happen *after* initRolodex(), as dataview and elempanel come from it.\n        JMenuBar menubar = new JMenuBar();\n        // TODO: extend CorinaMenuBar\n        menubar.add(new EditorFileMenu(this));\n        editorEditMenu = new EditorEditMenu(sample, dataView, this);\n        menubar.add(editorEditMenu);\n        editorViewMenu = new EditorViewMenu(sample, elemPanel);\n        menubar.add(editorViewMenu);\n        menubar.add(new EditorManipMenu(sample, this));\n        editorSumMenu = new EditorSumMenu(sample, elemPanel);\n        menubar.add(editorSumMenu);\n        menubar.add(new EditorGraphMenu(sample));\n        menubar.add(new EditorSiteMenu(sample));\n        if (App.platform.isMac())\n            menubar.add(new WindowMenu(this));\n        menubar.add(new HelpMenu());\n        setJMenuBar(menubar);\n        // init undo/redo\n        initUndoRedo();\n        App.prefs.addPrefsListener(this);\n        // pack, size, and show\n        // is this needed?\n        pack();\n        setSize(new Dimension(640, 480));\n        // TODO: store window position, X-style (\"WIDTHxHEIGHT+LEFT+TOP\"), so it always re-appears in the same place.\n        // Q: store the resolution, as well, so the relative position\n        // is the same, or just make sure the absolute is within range?\n        // i can store the position either in a ;WINDOW field, or beyond the ~author line.\n        show();\n        /*\n\t\t // strategy: keep going down, until it would go off-screen, then start again.\n\t\t // -- unless there's somewhere else the user would like it (save bounds in file?)\n\t\t if (base == null) {\n\t\t show();\n\t\t doffset = getContentPane().getLocationOnScreen().y - getLocationOnScreen().y;\n\t\t base = getLocationOnScreen();\n\t\t // System.out.println(\"doffset = \" + doffset);\n\t\t } else {\n\t\t Dimension screen = Toolkit.getDefaultToolkit().getScreenSize();\n\t\t setLocation(new java.awt.Point(base.x+offset, base.y+offset));\n\t\t show(); // BUG!  don't show until i've made sure it's where i want it!\n\t\t if (getBounds().x + getBounds().width > screen.width ||\n\t\t getBounds().y + getBounds().height > screen.height) {\n\t\t setLocation(new java.awt.Point(0, 0));\n\t\t offset = doffset;\n\t\t } else {\n\t\t offset += doffset;\n\t\t }\n\t\t // show();\n\t\t }\n\t\t */\n        // datatable gets initial focus, and select year 1001\n        dataView.requestFocus();\n    }\n\n    // DESIGN: move all editor menus into corina.editor.menus.ManipulateMenu, etc.\n    /*\n\t TODO:\n\t -- resumming used to call Platform.setModified(editor, true) for isMac.\n\t that's bad.  instead, Editor should be a SampleListener which calls\n\t setMod(this,meta.mod?) on metadataChanged() -- or anything, actually.\n\t */\n    private void setUIFromPrefs() {\n        if (wjTable == null)\n            return;\n        Font font = Font.decode(App.prefs.getPref(Prefs.EDIT_FONT));\n        if (font != null)\n            wjTable.setFont(font);\n        // BUG: this doesn't reset the row-heights!\n        // from font size, set table row height\n        wjTable.setRowHeight((font == null ? 12 : font.getSize()) + 4);\n        // disable gridlines, if requested\n        boolean gridlines = Boolean.valueOf(App.prefs.getPref(Prefs.EDIT_GRIDLINES, \"true\")).booleanValue();\n        wjTable.setShowGrid(gridlines);\n        // set colors\n        wjTable.setBackground(App.prefs.getColorPref(Prefs.EDIT_BACKGROUND, Color.white));\n        wjTable.setForeground(App.prefs.getColorPref(Prefs.EDIT_FOREGROUND, Color.black));\n        wjTable.repaint();\n    }\n\n    // PrefsListener\n    public void prefChanged(PrefsEvent e) {\n        // strategy: refresh each view i contain\n        // data view\n        // TODO: remove this commented line now that HasPreferences usage has been replaced\n        // with PrefsListener\n        //dataView.refreshFromPreferences();\n        // used to refreshFromPreferences() on elemPanel here, too.  but why?\n        // add metadata update here, when it's written\n        setUIFromPrefs();\n    }\n\n    //\n    // for serial-line measure-mode\n    //\n    public Year measured(int x) {\n        return dataView.measured(x);\n    }\n\n    // printing\n    public String getPrintTitle() {\n        return getTitle();\n    }\n\n    public Object getPrinter(PageFormat pf) {\n        // what to do with |format| here?\n        SampleBit bits = SampleBit.askBits(this);\n        // user cancelled anyway...\n        if (bits == null)\n            return null;\n        SamplePrintEditor spe = new SamplePrintEditor(sample, bits, this, (int) pf.getImageableWidth());\n        return spe.getPrintable();\n        //\t\treturn null;\n        // TODO: use askWhichPages() to figure out which sections to print\n        // then pass to SamplePrinter(sample, bool[])\n        // BUT: how to distinguish?  as an Editor, i'll represent 2 PrintableDocs!\n        //return new SamplePrinter(sample);\n    }\n\n    // TODO: use me!\n    private static boolean[] askWhichPages(Sample s, int def) throws UserCancelledException {\n        // dialog\n        // TODO: modal?\n        final JDialog d = new JDialog(new Frame(), \"\", true);\n        // components\n        // TODO: i18n\n        JLabel question = new JLabel(\"Print which sections?\");\n        final JCheckBox s1 = new JCheckBox(I18n.getText(\"tab_data\"), def == 0);\n        final JCheckBox s2 = new JCheckBox(I18n.getText(\"tab_metadata\"), def == 1);\n        final JCheckBox s3 = new JCheckBox(I18n.getText(\"tab_weiserjahre\"), def == 2);\n        final JCheckBox s4 = new JCheckBox(I18n.getText(\"tab_elements\"), def == 3);\n        // dim sections which aren't available\n        s3.setEnabled(s.hasWeiserjahre());\n        // FIXME: hasElements method!\n        s4.setEnabled(s.elements != null);\n        // FIXME: if s1-4 is an array, i can simply say s[def].setEnabled(true)\n        // -- if def=0..3\n        final JButton cancel = Builder.makeButton(\"cancel\");\n        final JButton ok = Builder.makeButton(\"print\");\n        Component indent = Box.createHorizontalStrut(14);\n        // on ok/cancel, done\n        final boolean[] okClicked = new boolean[1];\n        AbstractAction a = new AbstractAction() {\n\n            public void actionPerformed(ActionEvent e) {\n                okClicked[0] = (e.getSource() == ok);\n                d.dispose();\n            }\n        };\n        cancel.addActionListener(a);\n        ok.addActionListener(a);\n        // if you uncheck all, \"print\" gets dimmed\n        AbstractAction b = new AbstractAction() {\n\n            public void actionPerformed(ActionEvent e) {\n                ok.setEnabled(s1.isSelected() || s2.isSelected() || s3.isSelected() || s4.isSelected());\n            }\n        };\n        s1.addActionListener(b);\n        s2.addActionListener(b);\n        s3.addActionListener(b);\n        s4.addActionListener(b);\n        // layout\n        JPanel checks = Layout.boxLayoutY(s1, s2, s3, s4);\n        JPanel buttons = Layout.buttonLayout(cancel, ok);\n        JPanel content = Layout.borderLayout(question, indent, checks, null, buttons);\n        question.setBorder(BorderFactory.createEmptyBorder(0, 0, 6, 0));\n        buttons.setBorder(BorderFactory.createEmptyBorder(6, 0, 0, 0));\n        content.setBorder(BorderFactory.createEmptyBorder(10, 10, 10, 10));\n        // display\n        d.setContentPane(content);\n        OKCancel.addKeyboardDefaults(ok);\n        d.pack();\n        d.setResizable(false);\n        d.show();\n        // -- (user selects something) --\n        // maybe cancel\n        if (!okClicked[0])\n            throw new UserCancelledException();\n        // else return it\n        boolean[] result = new boolean[4];\n        result[0] = s1.isSelected();\n        result[1] = s2.isSelected();\n        result[2] = s3.isSelected();\n        result[3] = s4.isSelected();\n        return result;\n    }\n\n    public void startMeasuring() {\n        SerialSampleIO dataPort;\n        try {\n            dataPort = new SerialSampleIO(App.prefs.getPref(\"corina.serialsampleio.port\"));\n            dataPort.initialize();\n        } catch (IOException ioe) {\n            Alert.error(\"Couldn't start measuring\", \"There was an error while initializing the external communications device: \" + ioe.toString());\n            return;\n        }\n        editorEditMenu.enableMeasureMenu(false);\n        dataView.enableEditing(false);\n        // add the measure panel...\n        measurePanel = new EditorMeasurePanel(this, dataPort);\n        add(measurePanel, BorderLayout.SOUTH);\n        getContentPane().validate();\n        getContentPane().repaint();\n    }\n\n    public void stopMeasuring() {\n        if (measurePanel != null) {\n            measurePanel.cleanup();\n            remove(measurePanel);\n            editorEditMenu.enableMeasureMenu(true);\n            dataView.enableEditing(true);\n            getContentPane().validate();\n            getContentPane().repaint();\n        }\n        measurePanel = null;\n    }\n\n    public void windowClosing(WindowEvent e) {\n        stopMeasuring();\n        super.windowClosing(e);\n    }\n\n    protected void finalize() throws Throwable {\n        super.finalize();\n        App.prefs.removePrefsListener(this);\n    }\n\n    public static void main(String[] args) throws Exception {\n        try {\n            Sample s = new Sample(args[0]);\n            boolean[] x = askWhichPages(s, 3);\n            System.out.print(\"x[] = { \");\n            for (int i = 0; i < x.length; i++) {\n                System.out.print(x[i] ? \"#t\" : \"#f\");\n                System.out.print(\", \");\n            }\n            System.out.println(\"}\");\n        } catch (UserCancelledException uce) {\n            System.out.println(\"user cancelled\");\n        }\n    }\n}\n",
		"id": "/EvoSuiteBenchmark/35_corina/src/main/java/corina/editor/Editor_0Test.java",
		"test_prompt": "// Editor_0Test.java\n// This file is part of Corina.\n//\n// Corina is free software; you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation; either version 2 of the License, or\n// (at your option) any later version.\n//\n// Corina is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Corina; if not, write to the Free Software\n// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n//\n// Copyright 2001 Ken Harris <kbh7@cornell.edu>\n//\npackage corina.editor;\n\nimport java.awt.BorderLayout;\nimport java.awt.Color;\nimport java.awt.Component;\nimport java.awt.Dimension;\nimport java.awt.Font;\nimport java.awt.Frame;\nimport java.awt.event.ActionEvent;\nimport java.awt.event.WindowEvent;\nimport java.awt.print.PageFormat;\nimport java.io.File;\nimport java.io.IOException;\nimport java.util.Collections;\nimport javax.swing.AbstractAction;\nimport javax.swing.BorderFactory;\nimport javax.swing.Box;\nimport javax.swing.JButton;\nimport javax.swing.JCheckBox;\nimport javax.swing.JComponent;\nimport javax.swing.JDialog;\nimport javax.swing.JLabel;\nimport javax.swing.JMenuBar;\nimport javax.swing.JMenuItem;\nimport javax.swing.JOptionPane;\nimport javax.swing.JPanel;\nimport javax.swing.JScrollPane;\nimport javax.swing.JTabbedPane;\nimport javax.swing.JTable;\nimport javax.swing.JTextField;\nimport javax.swing.ScrollPaneConstants;\nimport javax.swing.event.DocumentEvent;\nimport javax.swing.event.UndoableEditEvent;\nimport javax.swing.event.UndoableEditListener;\nimport javax.swing.text.BadLocationException;\nimport javax.swing.text.Document;\nimport javax.swing.undo.UndoManager;\nimport javax.swing.undo.UndoableEdit;\nimport javax.swing.undo.UndoableEditSupport;\nimport corina.Build;\nimport corina.Sample;\nimport corina.SampleEvent;\nimport corina.SampleListener;\nimport corina.core.App;\nimport corina.gui.Bug;\nimport corina.gui.ElementsPanel;\nimport corina.gui.FileDialog;\nimport corina.gui.Help;\nimport corina.gui.Layout;\nimport corina.gui.PrintableDocument;\nimport corina.gui.SaveableDocument;\nimport corina.gui.UserCancelledException;\nimport corina.gui.XFrame;\nimport corina.gui.menus.HelpMenu;\nimport corina.gui.menus.WindowMenu;\nimport corina.logging.CorinaLog;\nimport corina.prefs.Prefs;\nimport corina.prefs.PrefsEvent;\nimport corina.prefs.PrefsListener;\nimport corina.site.Site;\nimport corina.ui.Alert;\nimport corina.ui.Builder;\nimport corina.ui.I18n;\nimport corina.util.Center;\nimport corina.util.DocumentListener2;\nimport corina.util.OKCancel;\nimport corina.util.Overwrite;\nimport corina.io.SerialSampleIO;\nimport corina.io.SerialSampleIOEvent;\nimport corina.Year;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link Editor}.\n* It contains ten unit test cases for the {@link Editor#isSaved()} method.\n*/\nclass Editor_0Test {"
	},
	{
		"original_code": "// Editor.java\n//\n// This file is part of Corina.\n//\n// Corina is free software; you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation; either version 2 of the License, or\n// (at your option) any later version.\n//\n// Corina is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Corina; if not, write to the Free Software\n// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n//\n// Copyright 2001 Ken Harris <kbh7@cornell.edu>\n//\npackage corina.editor;\n\nimport java.awt.BorderLayout;\nimport java.awt.Color;\nimport java.awt.Component;\nimport java.awt.Dimension;\nimport java.awt.Font;\nimport java.awt.Frame;\nimport java.awt.event.ActionEvent;\nimport java.awt.event.WindowEvent;\nimport java.awt.print.PageFormat;\nimport java.io.File;\nimport java.io.IOException;\nimport java.util.Collections;\nimport javax.swing.AbstractAction;\nimport javax.swing.BorderFactory;\nimport javax.swing.Box;\nimport javax.swing.JButton;\nimport javax.swing.JCheckBox;\nimport javax.swing.JComponent;\nimport javax.swing.JDialog;\nimport javax.swing.JLabel;\nimport javax.swing.JMenuBar;\nimport javax.swing.JMenuItem;\nimport javax.swing.JOptionPane;\nimport javax.swing.JPanel;\nimport javax.swing.JScrollPane;\nimport javax.swing.JTabbedPane;\nimport javax.swing.JTable;\nimport javax.swing.JTextField;\nimport javax.swing.ScrollPaneConstants;\nimport javax.swing.event.DocumentEvent;\nimport javax.swing.event.UndoableEditEvent;\nimport javax.swing.event.UndoableEditListener;\nimport javax.swing.text.BadLocationException;\nimport javax.swing.text.Document;\nimport javax.swing.undo.UndoManager;\nimport javax.swing.undo.UndoableEdit;\nimport javax.swing.undo.UndoableEditSupport;\nimport corina.Build;\nimport corina.Sample;\nimport corina.SampleEvent;\nimport corina.SampleListener;\nimport corina.core.App;\nimport corina.gui.Bug;\nimport corina.gui.ElementsPanel;\nimport corina.gui.FileDialog;\nimport corina.gui.Help;\nimport corina.gui.Layout;\nimport corina.gui.PrintableDocument;\nimport corina.gui.SaveableDocument;\nimport corina.gui.UserCancelledException;\nimport corina.gui.XFrame;\nimport corina.gui.menus.HelpMenu;\nimport corina.gui.menus.WindowMenu;\nimport corina.logging.CorinaLog;\nimport corina.prefs.Prefs;\nimport corina.prefs.PrefsEvent;\nimport corina.prefs.PrefsListener;\nimport corina.site.Site;\nimport corina.ui.Alert;\nimport corina.ui.Builder;\nimport corina.ui.I18n;\nimport corina.util.Center;\nimport corina.util.DocumentListener2;\nimport corina.util.OKCancel;\nimport corina.util.Overwrite;\nimport corina.io.SerialSampleIO;\nimport corina.io.SerialSampleIOEvent;\nimport corina.Year;\n\n/*\n left to do:\n -- extract EditorMenuBar as its own class?\n -- javadoc!\n \n  change around the menus slightly:\n\n  File\n    (usual)\n  Edit\n    Undo\n    Redo\n    ---\n    Cut (dimmed)\n    Copy\n    Paste\n    ---\n    Insert Year\n    Delete Year\n    ---\n    Start Measuring\n    ---\n    (Preferences...)\n  Manipulate\n    Redate...\n    Index...\n    Truncate...\n    Reverse*\n    ---\n    Cross Against...\n    Reconcile*\n  Sum (Master?)\n    Re-Sum\n    Clean\n    ---\n    Add Element...\n    Remove Element --- no, add cut/copy/paste/delete to Edit; Edit->Delete removes element?\n\n  NB: the menu enabler/disabler code is duplicated -- in the init, and also in the event handler.  refactor.\n\n  ----------------------------------------\n\n  this class is the second-biggest (with 64 more lines it would be the\n  biggest), and is in serious need of refactoring.  things that don't\n  belong here:\n\n  -- setEnabled() calls are duplicated: on init, and also in the event-handlers\n\n  -- guts of save() look really familiar ...\n     ... that goes into XFrame, or some other general utility class\n\n  -- WJ panel stuff could go into a wjpanel, perhaps subclassing dataviewpanel\n\n  -- makeMenus is lines 455-868 (n=414).  ouch.  maybe this could be (compiled?) scheme.\n\n  -- the 3 view menuitems can certainly be combined into one Action\n\n  -- since the hold-down-control crap is gone now, those menus don't need object-scope.\n  (what did i mean by this?)\n\n  -- refactor mapframe so it can be simply \"new MapFrame(sample)\"\n*/\npublic class Editor extends XFrame implements SaveableDocument, PrefsListener, SampleListener, PrintableDocument {\n\n    private static final CorinaLog log = new CorinaLog(\"Editor\");\n\n    // gui\n    private JTable wjTable;\n\n    private JPanel wjPanel;\n\n    private ElementsPanel elemPanel = null;\n\n    private EditorMeasurePanel measurePanel = null;\n\n    private JComponent metaView;\n\n    // gui -- new\n    // (a jpanel)\n    private SampleDataView dataView;\n\n    private JTabbedPane rolodex;\n\n    // for menus we have to notify...\n    private EditorViewMenu editorViewMenu;\n\n    private EditorSumMenu editorSumMenu;\n\n    private EditorEditMenu editorEditMenu;\n\n    // undo\n    private UndoManager undoManager = new UndoManager();\n\n    private UndoableEditSupport undoSupport = new UndoableEditSupport();\n\n    public void postEdit(UndoableEdit x) {\n        undoSupport.postEdit(x);\n    }\n\n    private void refreshUndoRedo(JMenuItem undoMenu, JMenuItem redoMenu) {\n        undoMenu.setText(undoManager.getUndoPresentationName());\n        undoMenu.setEnabled(undoManager.canUndo());\n        if (!undoManager.canUndo())\n            undoMenu.setText(I18n.getText(\"undo\"));\n        redoMenu.setText(undoManager.getRedoPresentationName());\n        redoMenu.setEnabled(undoManager.canRedo());\n        if (!undoManager.canRedo())\n            redoMenu.setText(I18n.getText(\"redo\"));\n    }\n\n    private void initUndoRedo() {\n        undoManager = new UndoManager();\n        undoSupport.addUndoableEditListener(new UndoAdapter());\n        // ??\n        // DISABLED: refreshUndoRedo(/* FAKE: */ null, null);\n    }\n\n    private class UndoAdapter implements UndoableEditListener {\n\n        public void undoableEditHappened(UndoableEditEvent e) {\n            undoManager.addEdit(e.getEdit());\n            // DISABLED: refreshUndoRedo(/* FAKE: */ null, null);\n        }\n    }\n\n    // data\n    private Sample sample;\n\n    // BUG: measureMenu gets enabled/disabled here, when it's status\n    // should be the AND of what editor thinks and what measure\n    // thinks. add pleaseDim()/canUndim(), or just override setEnabled()?\n    // SampleListener\n    public void sampleRedated(SampleEvent e) {\n        // title\n        updateTitle();\n    }\n\n    public void sampleDataChanged(SampleEvent e) {\n        // menubar gets \"*\" if change made -- BUG: no, then meta field modified?\n        // gets set, so this ISN'T NEEDED.  right?\n        updateTitle();\n        // -> todo: menubar needs undo/redo, save updated\n    }\n\n    public void sampleMetadataChanged(SampleEvent e) {\n        // title may have changed\n        updateTitle();\n        // get rid of wj, elements tabs\n        if (e != null) {\n            // only for real events, not menu setup -- HACK!\n            if (!sample.hasWeiserjahre())\n                rolodex.remove(wjPanel);\n            else if (rolodex.indexOfComponent(wjPanel) == -1)\n                rolodex.add(wjPanel, I18n.getText(\"tab_weiserjahre\"));\n            if (sample.elements == null) {\n                rolodex.remove(elemPanel);\n                initElemPanel();\n                editorViewMenu.setElementsPanel(elemPanel);\n                editorSumMenu.setElementsPanel(elemPanel);\n            } else if (elemPanel == null) {\n                initElemPanel();\n                rolodex.add(elemPanel, I18n.getText(\"tab_elements\"));\n                editorViewMenu.setElementsPanel(elemPanel);\n                editorSumMenu.setElementsPanel(elemPanel);\n            }\n        }\n    }\n\n    public void sampleElementsChanged(SampleEvent e) {\n    }\n\n    // SaveableDocument\n    public String toString() {\n        return sample.toString();\n    }\n\n    public boolean isSaved() {\n        return !sample.isModified();\n    }\n\n    public void setFilename(String fn) {\n        sample.meta.put(\"filename\", fn);\n    }\n\n    public String getFilename() {\n        return (String) sample.meta.get(\"filename\");\n    }\n\n    public String getDocumentTitle() {\n        String fn = getFilename();\n        if (fn != null) {\n            // REFACTOR: why's this not return new File(fn).getName()?\n            int lastSlash = fn.lastIndexOf(File.separatorChar);\n            if (lastSlash != -1)\n                fn = fn.substring(lastSlash + 1);\n            return fn;\n        } else {\n            return (String) sample.meta.get(\"title\");\n        }\n    }\n\n    // saveabledocument -- yes, we can use save as...\n    public boolean isNameChangeable() {\n        return true;\n    }\n\n    public void save() {\n        // make sure we're not measuring\n        this.stopMeasuring();\n        // make sure user isn't editing\n        dataView.stopEditing();\n        // make sure they're all numbers -- no nulls, strings, etc.\n        // abstract this out as \"boolean verifyOnlyNumbers()\" or something?\n        for (int i = 0; i < sample.data.size(); i++) {\n            Object o = sample.data.get(i);\n            if (o == null || !(o instanceof Integer)) {\n                // integer?  or number?\n                // BUT: didn't i used to pass in |this| as the owner?  is this worse?\n                Alert.error(\"Bad Data\", \"One or more years had bad (non-numeric) data, or no data:\\n\" + \"- year \" + sample.range.getStart().add(i) + \" has \" + (o == null ? \"no value\" : \"value \" + o));\n                return;\n                // BUG: return failure.  how?  (UserCancelled?)\n                // NO, DESIGN BUG: this shouldn't ever be allowed to happen.  why does it?\n            }\n            // REPLACE WITH: call to method ensureNumbersOnly()\n            // -- why not simply disallow non-numbers to begin with?\n        }\n        // get filename from sample; fall back to user's choice\n        // BUG: why not containsKey()?\n        String filename = (String) sample.meta.get(\"filename\");\n        if (filename == null) {\n            // make sure metadata was entered\n            if (!sample.wasMetadataChanged()) {\n                // what i'd prefer:\n                // Alert.ask(\"You didn't set the metadata!\", { \"Save Anyway\", \"Cancel\" })\n                // or even: Alert.ask(\"You didn't set the metadata! [Save Anyway] [Cancel]\"); (!)\n                /*\n\t\t\t\t can i put something like this directly in a resource?\n\t\t\t\t You didn't set the metadata! [Save Anyway] [Cancel]\n\t\t\t\t that's crazy talk!\n\t\t\t\t */\n                int x = JOptionPane.showOptionDialog(this, \"You didn't set the metadata!\", \"Metadata Untouched\", JOptionPane.YES_NO_OPTION, // no icon\n                JOptionPane.QUESTION_MESSAGE, // no icon\n                null, new String[] { \"Save Anyway\", \"Cancel\" }, // default\n                null);\n                if (x == 1) {\n                    // show metadata tab, and abort.\n                    rolodex.setSelectedIndex(1);\n                    // user cancelled!\n                    return;\n                }\n            }\n            // get target filename\n            try {\n                filename = FileDialog.showSingle(\"Save\");\n                // check for already-exists\n                Overwrite.overwrite(filename);\n            } catch (UserCancelledException uce) {\n                return;\n            }\n            sample.meta.put(\"filename\", filename);\n        }\n        save(filename);\n    }\n\n    public void save(String filename) {\n        // save sample\n        try {\n            // BUG?  do i mean to ignore the filename args?\n            // FIXME: isn't this just sample.save()?\n            sample.save((String) sample.meta.get(\"filename\"));\n        } catch (IOException ioe) {\n            Alert.error(\"I/O Error\", \"There was an error while saving the file: \\n\" + ioe.getMessage());\n            return;\n        } catch (Exception e) {\n            Bug.bug(e);\n        }\n        sample.clearModified();\n        // mac os x\n        App.platform.setModified(this, false);\n        // BIGGER ISSUE: need to separate/abstract window-title/window-modified setting\n        // -- make window (jframe) a samplelistener for updating platform.modified?\n        // -- (platform.modified sets either mac property, or resets *+title from getTitle()?)\n        // LONG-TERM: this won't be an issue.  why not?  because we won't\n        // have this klutzy \"save\" system.  open a file, mess around with it, close it.\n        // as far as you're concerned, it's always \"saved\".\n        updateTitle();\n    }\n\n    // init methods\n    private void initWJPanel() {\n        // Mac OS X has animated progress bars, which is *not* wanted\n        // for the histogram (they're not really animated here, but\n        // they change phase when redrawn).  Cocoa has other special\n        // bars to use for this sort of thing, but probably not\n        // available to a normal Java program.  So lose the last\n        // column, and add a hand-drawn histogram instead.\n        // no wj?  die.  (Q: why didn't i have/need this before?  A: i\n        // made it, but it never got displayed, so nobody checks to\n        // see if it actually has any rows or columns)\n        // if (!sample.hasWeiserjahre())\n        // return;\n        // -> i should go back to doing it this way.  don't have an\n        // initialized wjtable/panel sitting around if it's not being used.\n        // FIXME.\n        // create the table\n        wjTable = new JTable(new WJTableModel(sample));\n        // select the first year\n        wjTable.setRowSelectionAllowed(false);\n        if (sample.hasWeiserjahre()) {\n            wjTable.setRowSelectionInterval(0, 0);\n            wjTable.setColumnSelectionInterval(sample.range.getStart().column() + 1, sample.range.getStart().column() + 1);\n        }\n        // make the \"Nr\" column renderer a progress bar -- this recomputes max(count)!!!\n        int max = 0;\n        if (sample.count != null)\n            max = ((Integer) Collections.max(sample.count)).intValue();\n        wjTable.getColumnModel().getColumn(11).setCellRenderer(new CountRenderer(max));\n        // set font, gridlines, and colors -- these are all user preferences\n        // put table and new modeline into a panel\n        wjPanel = new JPanel(new BorderLayout(0, 0));\n        wjPanel.add(new JScrollPane(wjTable, ScrollPaneConstants.VERTICAL_SCROLLBAR_ALWAYS, ScrollPaneConstants.HORIZONTAL_SCROLLBAR_AS_NEEDED), BorderLayout.CENTER);\n        wjPanel.add(new Modeline(wjTable, sample), BorderLayout.SOUTH);\n    }\n\n    private void initMetaView() {\n        metaView = new MetadataPanel(sample);\n        // FIXME: move this to add/remove notify of MetadataPanel?\n        sample.addSampleListener((SampleListener) metaView);\n    }\n\n    private void initElemPanel() {\n        if (sample.elements != null) {\n            elemPanel = new ElementsPanel(this);\n            sample.addSampleListener(elemPanel);\n        } else {\n            if (elemPanel != null)\n                sample.removeSampleListener(elemPanel);\n            elemPanel = null;\n        }\n    }\n\n    private void addCards() {\n        // start fresh\n        rolodex.removeAll();\n        // all samples get data, meta\n        dataView = new SampleDataView(sample);\n        rolodex.add(dataView, I18n.getText(\"tab_data\"));\n        rolodex.add(metaView, I18n.getText(\"tab_metadata\"));\n        // wj and elements, if it's summed\n        if (sample.hasWeiserjahre())\n            rolodex.add(wjPanel, I18n.getText(\"tab_weiserjahre\"));\n        if (sample.elements != null)\n            rolodex.add(elemPanel, I18n.getText(\"tab_elements\"));\n    }\n\n    private void initRolodex() {\n        // try also: BOTTOM, but that's worse, by Fitt's Law, isn't it?\n        // (excel, for example, does that.)\n        rolodex = new JTabbedPane(JTabbedPane.TOP);\n        // rolodex.setBorder(BorderFactory.createEmptyBorder(4, 0, 0, 0)); -- but the old frame is still there!  hmm...\n        addCards();\n        getContentPane().add(rolodex, BorderLayout.CENTER);\n    }\n\n    public Sample getSample() {\n        return sample;\n    }\n\n    public void updateTitle() {\n        setTitle(sample.toString() + \" - \" + Build.VERSION + \" \" + Build.TIMESTAMP);\n    }\n\n    // ask the user for a title for this (new) sample.  it's guaranteed to have a number, now!\n    /*\n\t TODO:\n\t -- esc doesn't work -- no, this is a problem with OKCancel in 1.4.1, not here\n\t -- (initial value is name of this site?)\n\t ---- (askTitle(Site)?)\n\t -- (title for non-mac platforms?)\n\t -- (i18n / extract text)\n\t -- (import classes so i don't need fq here)\n\t */\n    /*\n\t what's truly unique about this?\n\t ... AskText extends JDialog ...\n\t pass it:\n\t -- initial text\n\t -- dictionary for autocomplete\n\t -- instructions text\n\t -- help tag\n\t then, simply:\n\t ask.show();\n\t title = ask.getResult();\n\t */\n    private static final String DEMO = \"Acemh\\u00FCy\\u00FCk 36A\";\n\n    private static String askTitle() throws UserCancelledException {\n        JLabel line1 = new JLabel(\"Enter a title for the new sample.\");\n        JLabel line2 = new JLabel(\"Titles are usually of the form \\\"\" + DEMO + \"\\\".\");\n        JLabel line3 = new JLabel(\"(You must include both a letter and a number in the title.)\");\n        // jmultilinelabel for last 2 lines?\n        line2.setBorder(BorderFactory.createEmptyBorder(10, 0, 0, 0));\n        line3.setBorder(BorderFactory.createEmptyBorder(0, 0, 10, 0));\n        JTextField input = new AutoComplete(\"\", 30);\n        // defaults to site names -- TODO: pass current site in as initial text?\n        final boolean[] isOk = new boolean[1];\n        JButton help = Builder.makeButton(\"help\");\n        Help.addToButton(help, \"identification\");\n        JButton cancel = Builder.makeButton(\"cancel\");\n        final JButton ok = Builder.makeButton(\"ok\");\n        ok.setEnabled(false);\n        input.getDocument().addDocumentListener(new DocumentListener2() {\n\n            public void update(DocumentEvent e) {\n                try {\n                    Document doc = e.getDocument();\n                    // BETTER: why not just input.getText()?\n                    String text = doc.getText(0, doc.getLength());\n                    // FIXME: combine these!\n                    ok.setEnabled(containsDigit(text) && containsLetter(text));\n                } catch (BadLocationException ble) {\n                    // can't happen\n                }\n            }\n        });\n        /*\n\t\t how about:\n\t\t ...addDocumentAdapter(new Runnable() {\n\t\t public void run() {\n\t\t ok.setEnabled(containsDigit(text.getDocument().getText()));\n\t\t });\n\t\t // unaryop would be better\n\t\t */\n        JPanel text = Layout.boxLayoutY(line1, line2, line3);\n        JPanel buttons = Layout.buttonLayout(help, null, cancel, ok);\n        buttons.setBorder(BorderFactory.createEmptyBorder(10, 0, 10, 0));\n        JPanel content = Layout.borderLayout(text, null, input, null, null);\n        JPanel fixed = Layout.borderLayout(content, null, null, null, buttons);\n        fixed.setBorder(BorderFactory.createEmptyBorder(10, 14, 6, 14));\n        final JDialog dialog = new JDialog(new Frame(), true);\n        dialog.getContentPane().add(fixed);\n        AbstractAction okCancel = new AbstractAction() {\n\n            public void actionPerformed(ActionEvent e) {\n                isOk[0] = (e.getSource() == ok);\n                dialog.dispose();\n            }\n        };\n        ok.addActionListener(okCancel);\n        cancel.addActionListener(okCancel);\n        dialog.pack();\n        OKCancel.addKeyboardDefaults(ok);\n        // (if there's anything here, later, e.g., site name)\n        input.selectAll();\n        input.requestFocus();\n        Center.center(dialog);\n        dialog.show();\n        // then, after it's hidden (by cancel, ok, or close-box)...\n        if (!isOk[0])\n            throw new UserCancelledException();\n        return input.getText();\n    }\n\n    // FIXME: disable the \"ok\" button if there's no number in the title, but\n    // put a notice in the dialog saying it must have a number!\n    private String askTitleOld(String defaultText) throws UserCancelledException {\n        String title = defaultText;\n        for (; ; ) {\n            title = (String) // parent component\n            JOptionPane.// parent component\n            showInputDialog(// parent component\n            null, // message\n            I18n.getText(\"new_sample_prompt\"), // title\n            I18n.getText(\"new_sample\"), JOptionPane.QUESTION_MESSAGE, Builder.getIcon(// null, // icon\n            \"Tree-64x64.png\"), // values (options)\n            null, title);\n            // user cancelled?\n            if (title == null)\n                throw new UserCancelledException();\n            // make sure there's a digit in there somewhere, and return.\n            if (containsDigit(title) && containsLetter(title))\n                return title;\n            // no numbers!\n            // (FIXME: this error shouldn't exist!)\n            Alert.error(\"No number\", \"There's no number in that title.  I think you forgot the sample number.\");\n            // be sure to put in the user manual the trick for creating a sample\n            // without a sample number, if they ever need that: put a digit on\n            // the end, and remove it right away (heh heh).\n        }\n    }\n\n    // if i need this anywhere else, move to util?\n    private static boolean containsDigit(String s) {\n        for (int i = 0; i < s.length(); i++) if (Character.isDigit(s.charAt(i)))\n            return true;\n        return false;\n    }\n\n    private static boolean containsLetter(String s) {\n        for (int i = 0; i < s.length(); i++) if (Character.isLetter(s.charAt(i)))\n            return true;\n        return false;\n    }\n\n    public Editor() {\n        // ask user for title\n        String title;\n        try {\n            title = askTitle();\n        } catch (UserCancelledException uce) {\n            dispose();\n            return;\n        }\n        // make dataset ref, with our title\n        sample = new Sample();\n        sample.meta.put(\"title\", title);\n        // pass\n        setup();\n    }\n\n    // new sample for site -- not used yet\n    public Editor(Site s) {\n        // ask user for title\n        String title;\n        try {\n            // WAS: s.getName() + \" \");\n            title = askTitle();\n        } catch (UserCancelledException uce) {\n            dispose();\n            return;\n        }\n        // make dataset ref, with our title\n        sample = new Sample();\n        sample.meta.put(\"title\", title);\n        // pass\n        setup();\n    }\n\n    // TODO: want single-instance editors.\n    // so:\n    // -- make this private\n    // -- (should it just be Editor(filename)?)\n    // -- keep a (sample,editor) hash\n    // -- create a public getEditor(Sample)\n    // -- if an editor is in the hash, just front() it\n    // -- if it's not, add it\n    // -- on dispose(), remove it from the hash\n    public Editor(Sample sample) {\n        // copy data ref\n        this.sample = sample;\n        // pass\n        setup();\n    }\n\n    // setup common to both constructors\n    private void setup() {\n        // view area\n        initWJPanel();\n        initMetaView();\n        initElemPanel();\n        // i'll watch the data\n        sample.addSampleListener(this);\n        // title (must be before menubar)\n        updateTitle();\n        // put views into notecard-rolodex\n        initRolodex();\n        // set preferences\n        setUIFromPrefs();\n        // menubar\n        // This must happen *after* initRolodex(), as dataview and elempanel come from it.\n        JMenuBar menubar = new JMenuBar();\n        // TODO: extend CorinaMenuBar\n        menubar.add(new EditorFileMenu(this));\n        editorEditMenu = new EditorEditMenu(sample, dataView, this);\n        menubar.add(editorEditMenu);\n        editorViewMenu = new EditorViewMenu(sample, elemPanel);\n        menubar.add(editorViewMenu);\n        menubar.add(new EditorManipMenu(sample, this));\n        editorSumMenu = new EditorSumMenu(sample, elemPanel);\n        menubar.add(editorSumMenu);\n        menubar.add(new EditorGraphMenu(sample));\n        menubar.add(new EditorSiteMenu(sample));\n        if (App.platform.isMac())\n            menubar.add(new WindowMenu(this));\n        menubar.add(new HelpMenu());\n        setJMenuBar(menubar);\n        // init undo/redo\n        initUndoRedo();\n        App.prefs.addPrefsListener(this);\n        // pack, size, and show\n        // is this needed?\n        pack();\n        setSize(new Dimension(640, 480));\n        // TODO: store window position, X-style (\"WIDTHxHEIGHT+LEFT+TOP\"), so it always re-appears in the same place.\n        // Q: store the resolution, as well, so the relative position\n        // is the same, or just make sure the absolute is within range?\n        // i can store the position either in a ;WINDOW field, or beyond the ~author line.\n        show();\n        /*\n\t\t // strategy: keep going down, until it would go off-screen, then start again.\n\t\t // -- unless there's somewhere else the user would like it (save bounds in file?)\n\t\t if (base == null) {\n\t\t show();\n\t\t doffset = getContentPane().getLocationOnScreen().y - getLocationOnScreen().y;\n\t\t base = getLocationOnScreen();\n\t\t // System.out.println(\"doffset = \" + doffset);\n\t\t } else {\n\t\t Dimension screen = Toolkit.getDefaultToolkit().getScreenSize();\n\t\t setLocation(new java.awt.Point(base.x+offset, base.y+offset));\n\t\t show(); // BUG!  don't show until i've made sure it's where i want it!\n\t\t if (getBounds().x + getBounds().width > screen.width ||\n\t\t getBounds().y + getBounds().height > screen.height) {\n\t\t setLocation(new java.awt.Point(0, 0));\n\t\t offset = doffset;\n\t\t } else {\n\t\t offset += doffset;\n\t\t }\n\t\t // show();\n\t\t }\n\t\t */\n        // datatable gets initial focus, and select year 1001\n        dataView.requestFocus();\n    }\n\n    // DESIGN: move all editor menus into corina.editor.menus.ManipulateMenu, etc.\n    /*\n\t TODO:\n\t -- resumming used to call Platform.setModified(editor, true) for isMac.\n\t that's bad.  instead, Editor should be a SampleListener which calls\n\t setMod(this,meta.mod?) on metadataChanged() -- or anything, actually.\n\t */\n    private void setUIFromPrefs() {\n        if (wjTable == null)\n            return;\n        Font font = Font.decode(App.prefs.getPref(Prefs.EDIT_FONT));\n        if (font != null)\n            wjTable.setFont(font);\n        // BUG: this doesn't reset the row-heights!\n        // from font size, set table row height\n        wjTable.setRowHeight((font == null ? 12 : font.getSize()) + 4);\n        // disable gridlines, if requested\n        boolean gridlines = Boolean.valueOf(App.prefs.getPref(Prefs.EDIT_GRIDLINES, \"true\")).booleanValue();\n        wjTable.setShowGrid(gridlines);\n        // set colors\n        wjTable.setBackground(App.prefs.getColorPref(Prefs.EDIT_BACKGROUND, Color.white));\n        wjTable.setForeground(App.prefs.getColorPref(Prefs.EDIT_FOREGROUND, Color.black));\n        wjTable.repaint();\n    }\n\n    // PrefsListener\n    public void prefChanged(PrefsEvent e) {\n        // strategy: refresh each view i contain\n        // data view\n        // TODO: remove this commented line now that HasPreferences usage has been replaced\n        // with PrefsListener\n        //dataView.refreshFromPreferences();\n        // used to refreshFromPreferences() on elemPanel here, too.  but why?\n        // add metadata update here, when it's written\n        setUIFromPrefs();\n    }\n\n    //\n    // for serial-line measure-mode\n    //\n    public Year measured(int x) {\n        return dataView.measured(x);\n    }\n\n    // printing\n    public String getPrintTitle() {\n        return getTitle();\n    }\n\n    public Object getPrinter(PageFormat pf) {\n        // what to do with |format| here?\n        SampleBit bits = SampleBit.askBits(this);\n        // user cancelled anyway...\n        if (bits == null)\n            return null;\n        SamplePrintEditor spe = new SamplePrintEditor(sample, bits, this, (int) pf.getImageableWidth());\n        return spe.getPrintable();\n        //\t\treturn null;\n        // TODO: use askWhichPages() to figure out which sections to print\n        // then pass to SamplePrinter(sample, bool[])\n        // BUT: how to distinguish?  as an Editor, i'll represent 2 PrintableDocs!\n        //return new SamplePrinter(sample);\n    }\n\n    // TODO: use me!\n    private static boolean[] askWhichPages(Sample s, int def) throws UserCancelledException {\n        // dialog\n        // TODO: modal?\n        final JDialog d = new JDialog(new Frame(), \"\", true);\n        // components\n        // TODO: i18n\n        JLabel question = new JLabel(\"Print which sections?\");\n        final JCheckBox s1 = new JCheckBox(I18n.getText(\"tab_data\"), def == 0);\n        final JCheckBox s2 = new JCheckBox(I18n.getText(\"tab_metadata\"), def == 1);\n        final JCheckBox s3 = new JCheckBox(I18n.getText(\"tab_weiserjahre\"), def == 2);\n        final JCheckBox s4 = new JCheckBox(I18n.getText(\"tab_elements\"), def == 3);\n        // dim sections which aren't available\n        s3.setEnabled(s.hasWeiserjahre());\n        // FIXME: hasElements method!\n        s4.setEnabled(s.elements != null);\n        // FIXME: if s1-4 is an array, i can simply say s[def].setEnabled(true)\n        // -- if def=0..3\n        final JButton cancel = Builder.makeButton(\"cancel\");\n        final JButton ok = Builder.makeButton(\"print\");\n        Component indent = Box.createHorizontalStrut(14);\n        // on ok/cancel, done\n        final boolean[] okClicked = new boolean[1];\n        AbstractAction a = new AbstractAction() {\n\n            public void actionPerformed(ActionEvent e) {\n                okClicked[0] = (e.getSource() == ok);\n                d.dispose();\n            }\n        };\n        cancel.addActionListener(a);\n        ok.addActionListener(a);\n        // if you uncheck all, \"print\" gets dimmed\n        AbstractAction b = new AbstractAction() {\n\n            public void actionPerformed(ActionEvent e) {\n                ok.setEnabled(s1.isSelected() || s2.isSelected() || s3.isSelected() || s4.isSelected());\n            }\n        };\n        s1.addActionListener(b);\n        s2.addActionListener(b);\n        s3.addActionListener(b);\n        s4.addActionListener(b);\n        // layout\n        JPanel checks = Layout.boxLayoutY(s1, s2, s3, s4);\n        JPanel buttons = Layout.buttonLayout(cancel, ok);\n        JPanel content = Layout.borderLayout(question, indent, checks, null, buttons);\n        question.setBorder(BorderFactory.createEmptyBorder(0, 0, 6, 0));\n        buttons.setBorder(BorderFactory.createEmptyBorder(6, 0, 0, 0));\n        content.setBorder(BorderFactory.createEmptyBorder(10, 10, 10, 10));\n        // display\n        d.setContentPane(content);\n        OKCancel.addKeyboardDefaults(ok);\n        d.pack();\n        d.setResizable(false);\n        d.show();\n        // -- (user selects something) --\n        // maybe cancel\n        if (!okClicked[0])\n            throw new UserCancelledException();\n        // else return it\n        boolean[] result = new boolean[4];\n        result[0] = s1.isSelected();\n        result[1] = s2.isSelected();\n        result[2] = s3.isSelected();\n        result[3] = s4.isSelected();\n        return result;\n    }\n\n    public void startMeasuring() {\n        SerialSampleIO dataPort;\n        try {\n            dataPort = new SerialSampleIO(App.prefs.getPref(\"corina.serialsampleio.port\"));\n            dataPort.initialize();\n        } catch (IOException ioe) {\n            Alert.error(\"Couldn't start measuring\", \"There was an error while initializing the external communications device: \" + ioe.toString());\n            return;\n        }\n        editorEditMenu.enableMeasureMenu(false);\n        dataView.enableEditing(false);\n        // add the measure panel...\n        measurePanel = new EditorMeasurePanel(this, dataPort);\n        add(measurePanel, BorderLayout.SOUTH);\n        getContentPane().validate();\n        getContentPane().repaint();\n    }\n\n    public void stopMeasuring() {\n        if (measurePanel != null) {\n            measurePanel.cleanup();\n            remove(measurePanel);\n            editorEditMenu.enableMeasureMenu(true);\n            dataView.enableEditing(true);\n            getContentPane().validate();\n            getContentPane().repaint();\n        }\n        measurePanel = null;\n    }\n\n    public void windowClosing(WindowEvent e) {\n        stopMeasuring();\n        super.windowClosing(e);\n    }\n\n    protected void finalize() throws Throwable {\n        super.finalize();\n        App.prefs.removePrefsListener(this);\n    }\n\n    public static void main(String[] args) throws Exception {\n        try {\n            Sample s = new Sample(args[0]);\n            boolean[] x = askWhichPages(s, 3);\n            System.out.print(\"x[] = { \");\n            for (int i = 0; i < x.length; i++) {\n                System.out.print(x[i] ? \"#t\" : \"#f\");\n                System.out.print(\", \");\n            }\n            System.out.println(\"}\");\n        } catch (UserCancelledException uce) {\n            System.out.println(\"user cancelled\");\n        }\n    }\n}\n",
		"id": "/EvoSuiteBenchmark/35_corina/src/main/java/corina/editor/Editor_1Test.java",
		"test_prompt": "// Editor_1Test.java\n// This file is part of Corina.\n//\n// Corina is free software; you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation; either version 2 of the License, or\n// (at your option) any later version.\n//\n// Corina is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Corina; if not, write to the Free Software\n// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n//\n// Copyright 2001 Ken Harris <kbh7@cornell.edu>\n//\npackage corina.editor;\n\nimport java.awt.BorderLayout;\nimport java.awt.Color;\nimport java.awt.Component;\nimport java.awt.Dimension;\nimport java.awt.Font;\nimport java.awt.Frame;\nimport java.awt.event.ActionEvent;\nimport java.awt.event.WindowEvent;\nimport java.awt.print.PageFormat;\nimport java.io.File;\nimport java.io.IOException;\nimport java.util.Collections;\nimport javax.swing.AbstractAction;\nimport javax.swing.BorderFactory;\nimport javax.swing.Box;\nimport javax.swing.JButton;\nimport javax.swing.JCheckBox;\nimport javax.swing.JComponent;\nimport javax.swing.JDialog;\nimport javax.swing.JLabel;\nimport javax.swing.JMenuBar;\nimport javax.swing.JMenuItem;\nimport javax.swing.JOptionPane;\nimport javax.swing.JPanel;\nimport javax.swing.JScrollPane;\nimport javax.swing.JTabbedPane;\nimport javax.swing.JTable;\nimport javax.swing.JTextField;\nimport javax.swing.ScrollPaneConstants;\nimport javax.swing.event.DocumentEvent;\nimport javax.swing.event.UndoableEditEvent;\nimport javax.swing.event.UndoableEditListener;\nimport javax.swing.text.BadLocationException;\nimport javax.swing.text.Document;\nimport javax.swing.undo.UndoManager;\nimport javax.swing.undo.UndoableEdit;\nimport javax.swing.undo.UndoableEditSupport;\nimport corina.Build;\nimport corina.Sample;\nimport corina.SampleEvent;\nimport corina.SampleListener;\nimport corina.core.App;\nimport corina.gui.Bug;\nimport corina.gui.ElementsPanel;\nimport corina.gui.FileDialog;\nimport corina.gui.Help;\nimport corina.gui.Layout;\nimport corina.gui.PrintableDocument;\nimport corina.gui.SaveableDocument;\nimport corina.gui.UserCancelledException;\nimport corina.gui.XFrame;\nimport corina.gui.menus.HelpMenu;\nimport corina.gui.menus.WindowMenu;\nimport corina.logging.CorinaLog;\nimport corina.prefs.Prefs;\nimport corina.prefs.PrefsEvent;\nimport corina.prefs.PrefsListener;\nimport corina.site.Site;\nimport corina.ui.Alert;\nimport corina.ui.Builder;\nimport corina.ui.I18n;\nimport corina.util.Center;\nimport corina.util.DocumentListener2;\nimport corina.util.OKCancel;\nimport corina.util.Overwrite;\nimport corina.io.SerialSampleIO;\nimport corina.io.SerialSampleIOEvent;\nimport corina.Year;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link Editor}.\n* It contains ten unit test cases for the {@link Editor#isNameChangeable()} method.\n*/\nclass Editor_1Test {"
	},
	{
		"original_code": "// Editor.java\n//\n// This file is part of Corina.\n//\n// Corina is free software; you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation; either version 2 of the License, or\n// (at your option) any later version.\n//\n// Corina is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Corina; if not, write to the Free Software\n// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n//\n// Copyright 2001 Ken Harris <kbh7@cornell.edu>\n//\npackage corina.editor;\n\nimport java.awt.BorderLayout;\nimport java.awt.Color;\nimport java.awt.Component;\nimport java.awt.Dimension;\nimport java.awt.Font;\nimport java.awt.Frame;\nimport java.awt.event.ActionEvent;\nimport java.awt.event.WindowEvent;\nimport java.awt.print.PageFormat;\nimport java.io.File;\nimport java.io.IOException;\nimport java.util.Collections;\nimport javax.swing.AbstractAction;\nimport javax.swing.BorderFactory;\nimport javax.swing.Box;\nimport javax.swing.JButton;\nimport javax.swing.JCheckBox;\nimport javax.swing.JComponent;\nimport javax.swing.JDialog;\nimport javax.swing.JLabel;\nimport javax.swing.JMenuBar;\nimport javax.swing.JMenuItem;\nimport javax.swing.JOptionPane;\nimport javax.swing.JPanel;\nimport javax.swing.JScrollPane;\nimport javax.swing.JTabbedPane;\nimport javax.swing.JTable;\nimport javax.swing.JTextField;\nimport javax.swing.ScrollPaneConstants;\nimport javax.swing.event.DocumentEvent;\nimport javax.swing.event.UndoableEditEvent;\nimport javax.swing.event.UndoableEditListener;\nimport javax.swing.text.BadLocationException;\nimport javax.swing.text.Document;\nimport javax.swing.undo.UndoManager;\nimport javax.swing.undo.UndoableEdit;\nimport javax.swing.undo.UndoableEditSupport;\nimport corina.Build;\nimport corina.Sample;\nimport corina.SampleEvent;\nimport corina.SampleListener;\nimport corina.core.App;\nimport corina.gui.Bug;\nimport corina.gui.ElementsPanel;\nimport corina.gui.FileDialog;\nimport corina.gui.Help;\nimport corina.gui.Layout;\nimport corina.gui.PrintableDocument;\nimport corina.gui.SaveableDocument;\nimport corina.gui.UserCancelledException;\nimport corina.gui.XFrame;\nimport corina.gui.menus.HelpMenu;\nimport corina.gui.menus.WindowMenu;\nimport corina.logging.CorinaLog;\nimport corina.prefs.Prefs;\nimport corina.prefs.PrefsEvent;\nimport corina.prefs.PrefsListener;\nimport corina.site.Site;\nimport corina.ui.Alert;\nimport corina.ui.Builder;\nimport corina.ui.I18n;\nimport corina.util.Center;\nimport corina.util.DocumentListener2;\nimport corina.util.OKCancel;\nimport corina.util.Overwrite;\nimport corina.io.SerialSampleIO;\nimport corina.io.SerialSampleIOEvent;\nimport corina.Year;\n\n/*\n left to do:\n -- extract EditorMenuBar as its own class?\n -- javadoc!\n \n  change around the menus slightly:\n\n  File\n    (usual)\n  Edit\n    Undo\n    Redo\n    ---\n    Cut (dimmed)\n    Copy\n    Paste\n    ---\n    Insert Year\n    Delete Year\n    ---\n    Start Measuring\n    ---\n    (Preferences...)\n  Manipulate\n    Redate...\n    Index...\n    Truncate...\n    Reverse*\n    ---\n    Cross Against...\n    Reconcile*\n  Sum (Master?)\n    Re-Sum\n    Clean\n    ---\n    Add Element...\n    Remove Element --- no, add cut/copy/paste/delete to Edit; Edit->Delete removes element?\n\n  NB: the menu enabler/disabler code is duplicated -- in the init, and also in the event handler.  refactor.\n\n  ----------------------------------------\n\n  this class is the second-biggest (with 64 more lines it would be the\n  biggest), and is in serious need of refactoring.  things that don't\n  belong here:\n\n  -- setEnabled() calls are duplicated: on init, and also in the event-handlers\n\n  -- guts of save() look really familiar ...\n     ... that goes into XFrame, or some other general utility class\n\n  -- WJ panel stuff could go into a wjpanel, perhaps subclassing dataviewpanel\n\n  -- makeMenus is lines 455-868 (n=414).  ouch.  maybe this could be (compiled?) scheme.\n\n  -- the 3 view menuitems can certainly be combined into one Action\n\n  -- since the hold-down-control crap is gone now, those menus don't need object-scope.\n  (what did i mean by this?)\n\n  -- refactor mapframe so it can be simply \"new MapFrame(sample)\"\n*/\npublic class Editor extends XFrame implements SaveableDocument, PrefsListener, SampleListener, PrintableDocument {\n\n    private static final CorinaLog log = new CorinaLog(\"Editor\");\n\n    // gui\n    private JTable wjTable;\n\n    private JPanel wjPanel;\n\n    private ElementsPanel elemPanel = null;\n\n    private EditorMeasurePanel measurePanel = null;\n\n    private JComponent metaView;\n\n    // gui -- new\n    // (a jpanel)\n    private SampleDataView dataView;\n\n    private JTabbedPane rolodex;\n\n    // for menus we have to notify...\n    private EditorViewMenu editorViewMenu;\n\n    private EditorSumMenu editorSumMenu;\n\n    private EditorEditMenu editorEditMenu;\n\n    // undo\n    private UndoManager undoManager = new UndoManager();\n\n    private UndoableEditSupport undoSupport = new UndoableEditSupport();\n\n    public void postEdit(UndoableEdit x) {\n        undoSupport.postEdit(x);\n    }\n\n    private void refreshUndoRedo(JMenuItem undoMenu, JMenuItem redoMenu) {\n        undoMenu.setText(undoManager.getUndoPresentationName());\n        undoMenu.setEnabled(undoManager.canUndo());\n        if (!undoManager.canUndo())\n            undoMenu.setText(I18n.getText(\"undo\"));\n        redoMenu.setText(undoManager.getRedoPresentationName());\n        redoMenu.setEnabled(undoManager.canRedo());\n        if (!undoManager.canRedo())\n            redoMenu.setText(I18n.getText(\"redo\"));\n    }\n\n    private void initUndoRedo() {\n        undoManager = new UndoManager();\n        undoSupport.addUndoableEditListener(new UndoAdapter());\n        // ??\n        // DISABLED: refreshUndoRedo(/* FAKE: */ null, null);\n    }\n\n    private class UndoAdapter implements UndoableEditListener {\n\n        public void undoableEditHappened(UndoableEditEvent e) {\n            undoManager.addEdit(e.getEdit());\n            // DISABLED: refreshUndoRedo(/* FAKE: */ null, null);\n        }\n    }\n\n    // data\n    private Sample sample;\n\n    // BUG: measureMenu gets enabled/disabled here, when it's status\n    // should be the AND of what editor thinks and what measure\n    // thinks. add pleaseDim()/canUndim(), or just override setEnabled()?\n    // SampleListener\n    public void sampleRedated(SampleEvent e) {\n        // title\n        updateTitle();\n    }\n\n    public void sampleDataChanged(SampleEvent e) {\n        // menubar gets \"*\" if change made -- BUG: no, then meta field modified?\n        // gets set, so this ISN'T NEEDED.  right?\n        updateTitle();\n        // -> todo: menubar needs undo/redo, save updated\n    }\n\n    public void sampleMetadataChanged(SampleEvent e) {\n        // title may have changed\n        updateTitle();\n        // get rid of wj, elements tabs\n        if (e != null) {\n            // only for real events, not menu setup -- HACK!\n            if (!sample.hasWeiserjahre())\n                rolodex.remove(wjPanel);\n            else if (rolodex.indexOfComponent(wjPanel) == -1)\n                rolodex.add(wjPanel, I18n.getText(\"tab_weiserjahre\"));\n            if (sample.elements == null) {\n                rolodex.remove(elemPanel);\n                initElemPanel();\n                editorViewMenu.setElementsPanel(elemPanel);\n                editorSumMenu.setElementsPanel(elemPanel);\n            } else if (elemPanel == null) {\n                initElemPanel();\n                rolodex.add(elemPanel, I18n.getText(\"tab_elements\"));\n                editorViewMenu.setElementsPanel(elemPanel);\n                editorSumMenu.setElementsPanel(elemPanel);\n            }\n        }\n    }\n\n    public void sampleElementsChanged(SampleEvent e) {\n    }\n\n    // SaveableDocument\n    public String toString() {\n        return sample.toString();\n    }\n\n    public boolean isSaved() {\n        return !sample.isModified();\n    }\n\n    public void setFilename(String fn) {\n        sample.meta.put(\"filename\", fn);\n    }\n\n    public String getFilename() {\n        return (String) sample.meta.get(\"filename\");\n    }\n\n    public String getDocumentTitle() {\n        String fn = getFilename();\n        if (fn != null) {\n            // REFACTOR: why's this not return new File(fn).getName()?\n            int lastSlash = fn.lastIndexOf(File.separatorChar);\n            if (lastSlash != -1)\n                fn = fn.substring(lastSlash + 1);\n            return fn;\n        } else {\n            return (String) sample.meta.get(\"title\");\n        }\n    }\n\n    // saveabledocument -- yes, we can use save as...\n    public boolean isNameChangeable() {\n        return true;\n    }\n\n    public void save() {\n        // make sure we're not measuring\n        this.stopMeasuring();\n        // make sure user isn't editing\n        dataView.stopEditing();\n        // make sure they're all numbers -- no nulls, strings, etc.\n        // abstract this out as \"boolean verifyOnlyNumbers()\" or something?\n        for (int i = 0; i < sample.data.size(); i++) {\n            Object o = sample.data.get(i);\n            if (o == null || !(o instanceof Integer)) {\n                // integer?  or number?\n                // BUT: didn't i used to pass in |this| as the owner?  is this worse?\n                Alert.error(\"Bad Data\", \"One or more years had bad (non-numeric) data, or no data:\\n\" + \"- year \" + sample.range.getStart().add(i) + \" has \" + (o == null ? \"no value\" : \"value \" + o));\n                return;\n                // BUG: return failure.  how?  (UserCancelled?)\n                // NO, DESIGN BUG: this shouldn't ever be allowed to happen.  why does it?\n            }\n            // REPLACE WITH: call to method ensureNumbersOnly()\n            // -- why not simply disallow non-numbers to begin with?\n        }\n        // get filename from sample; fall back to user's choice\n        // BUG: why not containsKey()?\n        String filename = (String) sample.meta.get(\"filename\");\n        if (filename == null) {\n            // make sure metadata was entered\n            if (!sample.wasMetadataChanged()) {\n                // what i'd prefer:\n                // Alert.ask(\"You didn't set the metadata!\", { \"Save Anyway\", \"Cancel\" })\n                // or even: Alert.ask(\"You didn't set the metadata! [Save Anyway] [Cancel]\"); (!)\n                /*\n\t\t\t\t can i put something like this directly in a resource?\n\t\t\t\t You didn't set the metadata! [Save Anyway] [Cancel]\n\t\t\t\t that's crazy talk!\n\t\t\t\t */\n                int x = JOptionPane.showOptionDialog(this, \"You didn't set the metadata!\", \"Metadata Untouched\", JOptionPane.YES_NO_OPTION, // no icon\n                JOptionPane.QUESTION_MESSAGE, // no icon\n                null, new String[] { \"Save Anyway\", \"Cancel\" }, // default\n                null);\n                if (x == 1) {\n                    // show metadata tab, and abort.\n                    rolodex.setSelectedIndex(1);\n                    // user cancelled!\n                    return;\n                }\n            }\n            // get target filename\n            try {\n                filename = FileDialog.showSingle(\"Save\");\n                // check for already-exists\n                Overwrite.overwrite(filename);\n            } catch (UserCancelledException uce) {\n                return;\n            }\n            sample.meta.put(\"filename\", filename);\n        }\n        save(filename);\n    }\n\n    public void save(String filename) {\n        // save sample\n        try {\n            // BUG?  do i mean to ignore the filename args?\n            // FIXME: isn't this just sample.save()?\n            sample.save((String) sample.meta.get(\"filename\"));\n        } catch (IOException ioe) {\n            Alert.error(\"I/O Error\", \"There was an error while saving the file: \\n\" + ioe.getMessage());\n            return;\n        } catch (Exception e) {\n            Bug.bug(e);\n        }\n        sample.clearModified();\n        // mac os x\n        App.platform.setModified(this, false);\n        // BIGGER ISSUE: need to separate/abstract window-title/window-modified setting\n        // -- make window (jframe) a samplelistener for updating platform.modified?\n        // -- (platform.modified sets either mac property, or resets *+title from getTitle()?)\n        // LONG-TERM: this won't be an issue.  why not?  because we won't\n        // have this klutzy \"save\" system.  open a file, mess around with it, close it.\n        // as far as you're concerned, it's always \"saved\".\n        updateTitle();\n    }\n\n    // init methods\n    private void initWJPanel() {\n        // Mac OS X has animated progress bars, which is *not* wanted\n        // for the histogram (they're not really animated here, but\n        // they change phase when redrawn).  Cocoa has other special\n        // bars to use for this sort of thing, but probably not\n        // available to a normal Java program.  So lose the last\n        // column, and add a hand-drawn histogram instead.\n        // no wj?  die.  (Q: why didn't i have/need this before?  A: i\n        // made it, but it never got displayed, so nobody checks to\n        // see if it actually has any rows or columns)\n        // if (!sample.hasWeiserjahre())\n        // return;\n        // -> i should go back to doing it this way.  don't have an\n        // initialized wjtable/panel sitting around if it's not being used.\n        // FIXME.\n        // create the table\n        wjTable = new JTable(new WJTableModel(sample));\n        // select the first year\n        wjTable.setRowSelectionAllowed(false);\n        if (sample.hasWeiserjahre()) {\n            wjTable.setRowSelectionInterval(0, 0);\n            wjTable.setColumnSelectionInterval(sample.range.getStart().column() + 1, sample.range.getStart().column() + 1);\n        }\n        // make the \"Nr\" column renderer a progress bar -- this recomputes max(count)!!!\n        int max = 0;\n        if (sample.count != null)\n            max = ((Integer) Collections.max(sample.count)).intValue();\n        wjTable.getColumnModel().getColumn(11).setCellRenderer(new CountRenderer(max));\n        // set font, gridlines, and colors -- these are all user preferences\n        // put table and new modeline into a panel\n        wjPanel = new JPanel(new BorderLayout(0, 0));\n        wjPanel.add(new JScrollPane(wjTable, ScrollPaneConstants.VERTICAL_SCROLLBAR_ALWAYS, ScrollPaneConstants.HORIZONTAL_SCROLLBAR_AS_NEEDED), BorderLayout.CENTER);\n        wjPanel.add(new Modeline(wjTable, sample), BorderLayout.SOUTH);\n    }\n\n    private void initMetaView() {\n        metaView = new MetadataPanel(sample);\n        // FIXME: move this to add/remove notify of MetadataPanel?\n        sample.addSampleListener((SampleListener) metaView);\n    }\n\n    private void initElemPanel() {\n        if (sample.elements != null) {\n            elemPanel = new ElementsPanel(this);\n            sample.addSampleListener(elemPanel);\n        } else {\n            if (elemPanel != null)\n                sample.removeSampleListener(elemPanel);\n            elemPanel = null;\n        }\n    }\n\n    private void addCards() {\n        // start fresh\n        rolodex.removeAll();\n        // all samples get data, meta\n        dataView = new SampleDataView(sample);\n        rolodex.add(dataView, I18n.getText(\"tab_data\"));\n        rolodex.add(metaView, I18n.getText(\"tab_metadata\"));\n        // wj and elements, if it's summed\n        if (sample.hasWeiserjahre())\n            rolodex.add(wjPanel, I18n.getText(\"tab_weiserjahre\"));\n        if (sample.elements != null)\n            rolodex.add(elemPanel, I18n.getText(\"tab_elements\"));\n    }\n\n    private void initRolodex() {\n        // try also: BOTTOM, but that's worse, by Fitt's Law, isn't it?\n        // (excel, for example, does that.)\n        rolodex = new JTabbedPane(JTabbedPane.TOP);\n        // rolodex.setBorder(BorderFactory.createEmptyBorder(4, 0, 0, 0)); -- but the old frame is still there!  hmm...\n        addCards();\n        getContentPane().add(rolodex, BorderLayout.CENTER);\n    }\n\n    public Sample getSample() {\n        return sample;\n    }\n\n    public void updateTitle() {\n        setTitle(sample.toString() + \" - \" + Build.VERSION + \" \" + Build.TIMESTAMP);\n    }\n\n    // ask the user for a title for this (new) sample.  it's guaranteed to have a number, now!\n    /*\n\t TODO:\n\t -- esc doesn't work -- no, this is a problem with OKCancel in 1.4.1, not here\n\t -- (initial value is name of this site?)\n\t ---- (askTitle(Site)?)\n\t -- (title for non-mac platforms?)\n\t -- (i18n / extract text)\n\t -- (import classes so i don't need fq here)\n\t */\n    /*\n\t what's truly unique about this?\n\t ... AskText extends JDialog ...\n\t pass it:\n\t -- initial text\n\t -- dictionary for autocomplete\n\t -- instructions text\n\t -- help tag\n\t then, simply:\n\t ask.show();\n\t title = ask.getResult();\n\t */\n    private static final String DEMO = \"Acemh\\u00FCy\\u00FCk 36A\";\n\n    private static String askTitle() throws UserCancelledException {\n        JLabel line1 = new JLabel(\"Enter a title for the new sample.\");\n        JLabel line2 = new JLabel(\"Titles are usually of the form \\\"\" + DEMO + \"\\\".\");\n        JLabel line3 = new JLabel(\"(You must include both a letter and a number in the title.)\");\n        // jmultilinelabel for last 2 lines?\n        line2.setBorder(BorderFactory.createEmptyBorder(10, 0, 0, 0));\n        line3.setBorder(BorderFactory.createEmptyBorder(0, 0, 10, 0));\n        JTextField input = new AutoComplete(\"\", 30);\n        // defaults to site names -- TODO: pass current site in as initial text?\n        final boolean[] isOk = new boolean[1];\n        JButton help = Builder.makeButton(\"help\");\n        Help.addToButton(help, \"identification\");\n        JButton cancel = Builder.makeButton(\"cancel\");\n        final JButton ok = Builder.makeButton(\"ok\");\n        ok.setEnabled(false);\n        input.getDocument().addDocumentListener(new DocumentListener2() {\n\n            public void update(DocumentEvent e) {\n                try {\n                    Document doc = e.getDocument();\n                    // BETTER: why not just input.getText()?\n                    String text = doc.getText(0, doc.getLength());\n                    // FIXME: combine these!\n                    ok.setEnabled(containsDigit(text) && containsLetter(text));\n                } catch (BadLocationException ble) {\n                    // can't happen\n                }\n            }\n        });\n        /*\n\t\t how about:\n\t\t ...addDocumentAdapter(new Runnable() {\n\t\t public void run() {\n\t\t ok.setEnabled(containsDigit(text.getDocument().getText()));\n\t\t });\n\t\t // unaryop would be better\n\t\t */\n        JPanel text = Layout.boxLayoutY(line1, line2, line3);\n        JPanel buttons = Layout.buttonLayout(help, null, cancel, ok);\n        buttons.setBorder(BorderFactory.createEmptyBorder(10, 0, 10, 0));\n        JPanel content = Layout.borderLayout(text, null, input, null, null);\n        JPanel fixed = Layout.borderLayout(content, null, null, null, buttons);\n        fixed.setBorder(BorderFactory.createEmptyBorder(10, 14, 6, 14));\n        final JDialog dialog = new JDialog(new Frame(), true);\n        dialog.getContentPane().add(fixed);\n        AbstractAction okCancel = new AbstractAction() {\n\n            public void actionPerformed(ActionEvent e) {\n                isOk[0] = (e.getSource() == ok);\n                dialog.dispose();\n            }\n        };\n        ok.addActionListener(okCancel);\n        cancel.addActionListener(okCancel);\n        dialog.pack();\n        OKCancel.addKeyboardDefaults(ok);\n        // (if there's anything here, later, e.g., site name)\n        input.selectAll();\n        input.requestFocus();\n        Center.center(dialog);\n        dialog.show();\n        // then, after it's hidden (by cancel, ok, or close-box)...\n        if (!isOk[0])\n            throw new UserCancelledException();\n        return input.getText();\n    }\n\n    // FIXME: disable the \"ok\" button if there's no number in the title, but\n    // put a notice in the dialog saying it must have a number!\n    private String askTitleOld(String defaultText) throws UserCancelledException {\n        String title = defaultText;\n        for (; ; ) {\n            title = (String) // parent component\n            JOptionPane.// parent component\n            showInputDialog(// parent component\n            null, // message\n            I18n.getText(\"new_sample_prompt\"), // title\n            I18n.getText(\"new_sample\"), JOptionPane.QUESTION_MESSAGE, Builder.getIcon(// null, // icon\n            \"Tree-64x64.png\"), // values (options)\n            null, title);\n            // user cancelled?\n            if (title == null)\n                throw new UserCancelledException();\n            // make sure there's a digit in there somewhere, and return.\n            if (containsDigit(title) && containsLetter(title))\n                return title;\n            // no numbers!\n            // (FIXME: this error shouldn't exist!)\n            Alert.error(\"No number\", \"There's no number in that title.  I think you forgot the sample number.\");\n            // be sure to put in the user manual the trick for creating a sample\n            // without a sample number, if they ever need that: put a digit on\n            // the end, and remove it right away (heh heh).\n        }\n    }\n\n    // if i need this anywhere else, move to util?\n    private static boolean containsDigit(String s) {\n        for (int i = 0; i < s.length(); i++) if (Character.isDigit(s.charAt(i)))\n            return true;\n        return false;\n    }\n\n    private static boolean containsLetter(String s) {\n        for (int i = 0; i < s.length(); i++) if (Character.isLetter(s.charAt(i)))\n            return true;\n        return false;\n    }\n\n    public Editor() {\n        // ask user for title\n        String title;\n        try {\n            title = askTitle();\n        } catch (UserCancelledException uce) {\n            dispose();\n            return;\n        }\n        // make dataset ref, with our title\n        sample = new Sample();\n        sample.meta.put(\"title\", title);\n        // pass\n        setup();\n    }\n\n    // new sample for site -- not used yet\n    public Editor(Site s) {\n        // ask user for title\n        String title;\n        try {\n            // WAS: s.getName() + \" \");\n            title = askTitle();\n        } catch (UserCancelledException uce) {\n            dispose();\n            return;\n        }\n        // make dataset ref, with our title\n        sample = new Sample();\n        sample.meta.put(\"title\", title);\n        // pass\n        setup();\n    }\n\n    // TODO: want single-instance editors.\n    // so:\n    // -- make this private\n    // -- (should it just be Editor(filename)?)\n    // -- keep a (sample,editor) hash\n    // -- create a public getEditor(Sample)\n    // -- if an editor is in the hash, just front() it\n    // -- if it's not, add it\n    // -- on dispose(), remove it from the hash\n    public Editor(Sample sample) {\n        // copy data ref\n        this.sample = sample;\n        // pass\n        setup();\n    }\n\n    // setup common to both constructors\n    private void setup() {\n        // view area\n        initWJPanel();\n        initMetaView();\n        initElemPanel();\n        // i'll watch the data\n        sample.addSampleListener(this);\n        // title (must be before menubar)\n        updateTitle();\n        // put views into notecard-rolodex\n        initRolodex();\n        // set preferences\n        setUIFromPrefs();\n        // menubar\n        // This must happen *after* initRolodex(), as dataview and elempanel come from it.\n        JMenuBar menubar = new JMenuBar();\n        // TODO: extend CorinaMenuBar\n        menubar.add(new EditorFileMenu(this));\n        editorEditMenu = new EditorEditMenu(sample, dataView, this);\n        menubar.add(editorEditMenu);\n        editorViewMenu = new EditorViewMenu(sample, elemPanel);\n        menubar.add(editorViewMenu);\n        menubar.add(new EditorManipMenu(sample, this));\n        editorSumMenu = new EditorSumMenu(sample, elemPanel);\n        menubar.add(editorSumMenu);\n        menubar.add(new EditorGraphMenu(sample));\n        menubar.add(new EditorSiteMenu(sample));\n        if (App.platform.isMac())\n            menubar.add(new WindowMenu(this));\n        menubar.add(new HelpMenu());\n        setJMenuBar(menubar);\n        // init undo/redo\n        initUndoRedo();\n        App.prefs.addPrefsListener(this);\n        // pack, size, and show\n        // is this needed?\n        pack();\n        setSize(new Dimension(640, 480));\n        // TODO: store window position, X-style (\"WIDTHxHEIGHT+LEFT+TOP\"), so it always re-appears in the same place.\n        // Q: store the resolution, as well, so the relative position\n        // is the same, or just make sure the absolute is within range?\n        // i can store the position either in a ;WINDOW field, or beyond the ~author line.\n        show();\n        /*\n\t\t // strategy: keep going down, until it would go off-screen, then start again.\n\t\t // -- unless there's somewhere else the user would like it (save bounds in file?)\n\t\t if (base == null) {\n\t\t show();\n\t\t doffset = getContentPane().getLocationOnScreen().y - getLocationOnScreen().y;\n\t\t base = getLocationOnScreen();\n\t\t // System.out.println(\"doffset = \" + doffset);\n\t\t } else {\n\t\t Dimension screen = Toolkit.getDefaultToolkit().getScreenSize();\n\t\t setLocation(new java.awt.Point(base.x+offset, base.y+offset));\n\t\t show(); // BUG!  don't show until i've made sure it's where i want it!\n\t\t if (getBounds().x + getBounds().width > screen.width ||\n\t\t getBounds().y + getBounds().height > screen.height) {\n\t\t setLocation(new java.awt.Point(0, 0));\n\t\t offset = doffset;\n\t\t } else {\n\t\t offset += doffset;\n\t\t }\n\t\t // show();\n\t\t }\n\t\t */\n        // datatable gets initial focus, and select year 1001\n        dataView.requestFocus();\n    }\n\n    // DESIGN: move all editor menus into corina.editor.menus.ManipulateMenu, etc.\n    /*\n\t TODO:\n\t -- resumming used to call Platform.setModified(editor, true) for isMac.\n\t that's bad.  instead, Editor should be a SampleListener which calls\n\t setMod(this,meta.mod?) on metadataChanged() -- or anything, actually.\n\t */\n    private void setUIFromPrefs() {\n        if (wjTable == null)\n            return;\n        Font font = Font.decode(App.prefs.getPref(Prefs.EDIT_FONT));\n        if (font != null)\n            wjTable.setFont(font);\n        // BUG: this doesn't reset the row-heights!\n        // from font size, set table row height\n        wjTable.setRowHeight((font == null ? 12 : font.getSize()) + 4);\n        // disable gridlines, if requested\n        boolean gridlines = Boolean.valueOf(App.prefs.getPref(Prefs.EDIT_GRIDLINES, \"true\")).booleanValue();\n        wjTable.setShowGrid(gridlines);\n        // set colors\n        wjTable.setBackground(App.prefs.getColorPref(Prefs.EDIT_BACKGROUND, Color.white));\n        wjTable.setForeground(App.prefs.getColorPref(Prefs.EDIT_FOREGROUND, Color.black));\n        wjTable.repaint();\n    }\n\n    // PrefsListener\n    public void prefChanged(PrefsEvent e) {\n        // strategy: refresh each view i contain\n        // data view\n        // TODO: remove this commented line now that HasPreferences usage has been replaced\n        // with PrefsListener\n        //dataView.refreshFromPreferences();\n        // used to refreshFromPreferences() on elemPanel here, too.  but why?\n        // add metadata update here, when it's written\n        setUIFromPrefs();\n    }\n\n    //\n    // for serial-line measure-mode\n    //\n    public Year measured(int x) {\n        return dataView.measured(x);\n    }\n\n    // printing\n    public String getPrintTitle() {\n        return getTitle();\n    }\n\n    public Object getPrinter(PageFormat pf) {\n        // what to do with |format| here?\n        SampleBit bits = SampleBit.askBits(this);\n        // user cancelled anyway...\n        if (bits == null)\n            return null;\n        SamplePrintEditor spe = new SamplePrintEditor(sample, bits, this, (int) pf.getImageableWidth());\n        return spe.getPrintable();\n        //\t\treturn null;\n        // TODO: use askWhichPages() to figure out which sections to print\n        // then pass to SamplePrinter(sample, bool[])\n        // BUT: how to distinguish?  as an Editor, i'll represent 2 PrintableDocs!\n        //return new SamplePrinter(sample);\n    }\n\n    // TODO: use me!\n    private static boolean[] askWhichPages(Sample s, int def) throws UserCancelledException {\n        // dialog\n        // TODO: modal?\n        final JDialog d = new JDialog(new Frame(), \"\", true);\n        // components\n        // TODO: i18n\n        JLabel question = new JLabel(\"Print which sections?\");\n        final JCheckBox s1 = new JCheckBox(I18n.getText(\"tab_data\"), def == 0);\n        final JCheckBox s2 = new JCheckBox(I18n.getText(\"tab_metadata\"), def == 1);\n        final JCheckBox s3 = new JCheckBox(I18n.getText(\"tab_weiserjahre\"), def == 2);\n        final JCheckBox s4 = new JCheckBox(I18n.getText(\"tab_elements\"), def == 3);\n        // dim sections which aren't available\n        s3.setEnabled(s.hasWeiserjahre());\n        // FIXME: hasElements method!\n        s4.setEnabled(s.elements != null);\n        // FIXME: if s1-4 is an array, i can simply say s[def].setEnabled(true)\n        // -- if def=0..3\n        final JButton cancel = Builder.makeButton(\"cancel\");\n        final JButton ok = Builder.makeButton(\"print\");\n        Component indent = Box.createHorizontalStrut(14);\n        // on ok/cancel, done\n        final boolean[] okClicked = new boolean[1];\n        AbstractAction a = new AbstractAction() {\n\n            public void actionPerformed(ActionEvent e) {\n                okClicked[0] = (e.getSource() == ok);\n                d.dispose();\n            }\n        };\n        cancel.addActionListener(a);\n        ok.addActionListener(a);\n        // if you uncheck all, \"print\" gets dimmed\n        AbstractAction b = new AbstractAction() {\n\n            public void actionPerformed(ActionEvent e) {\n                ok.setEnabled(s1.isSelected() || s2.isSelected() || s3.isSelected() || s4.isSelected());\n            }\n        };\n        s1.addActionListener(b);\n        s2.addActionListener(b);\n        s3.addActionListener(b);\n        s4.addActionListener(b);\n        // layout\n        JPanel checks = Layout.boxLayoutY(s1, s2, s3, s4);\n        JPanel buttons = Layout.buttonLayout(cancel, ok);\n        JPanel content = Layout.borderLayout(question, indent, checks, null, buttons);\n        question.setBorder(BorderFactory.createEmptyBorder(0, 0, 6, 0));\n        buttons.setBorder(BorderFactory.createEmptyBorder(6, 0, 0, 0));\n        content.setBorder(BorderFactory.createEmptyBorder(10, 10, 10, 10));\n        // display\n        d.setContentPane(content);\n        OKCancel.addKeyboardDefaults(ok);\n        d.pack();\n        d.setResizable(false);\n        d.show();\n        // -- (user selects something) --\n        // maybe cancel\n        if (!okClicked[0])\n            throw new UserCancelledException();\n        // else return it\n        boolean[] result = new boolean[4];\n        result[0] = s1.isSelected();\n        result[1] = s2.isSelected();\n        result[2] = s3.isSelected();\n        result[3] = s4.isSelected();\n        return result;\n    }\n\n    public void startMeasuring() {\n        SerialSampleIO dataPort;\n        try {\n            dataPort = new SerialSampleIO(App.prefs.getPref(\"corina.serialsampleio.port\"));\n            dataPort.initialize();\n        } catch (IOException ioe) {\n            Alert.error(\"Couldn't start measuring\", \"There was an error while initializing the external communications device: \" + ioe.toString());\n            return;\n        }\n        editorEditMenu.enableMeasureMenu(false);\n        dataView.enableEditing(false);\n        // add the measure panel...\n        measurePanel = new EditorMeasurePanel(this, dataPort);\n        add(measurePanel, BorderLayout.SOUTH);\n        getContentPane().validate();\n        getContentPane().repaint();\n    }\n\n    public void stopMeasuring() {\n        if (measurePanel != null) {\n            measurePanel.cleanup();\n            remove(measurePanel);\n            editorEditMenu.enableMeasureMenu(true);\n            dataView.enableEditing(true);\n            getContentPane().validate();\n            getContentPane().repaint();\n        }\n        measurePanel = null;\n    }\n\n    public void windowClosing(WindowEvent e) {\n        stopMeasuring();\n        super.windowClosing(e);\n    }\n\n    protected void finalize() throws Throwable {\n        super.finalize();\n        App.prefs.removePrefsListener(this);\n    }\n\n    public static void main(String[] args) throws Exception {\n        try {\n            Sample s = new Sample(args[0]);\n            boolean[] x = askWhichPages(s, 3);\n            System.out.print(\"x[] = { \");\n            for (int i = 0; i < x.length; i++) {\n                System.out.print(x[i] ? \"#t\" : \"#f\");\n                System.out.print(\", \");\n            }\n            System.out.println(\"}\");\n        } catch (UserCancelledException uce) {\n            System.out.println(\"user cancelled\");\n        }\n    }\n}\n",
		"id": "/EvoSuiteBenchmark/35_corina/src/main/java/corina/editor/Editor_2Test.java",
		"test_prompt": "// Editor_2Test.java\n// This file is part of Corina.\n//\n// Corina is free software; you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation; either version 2 of the License, or\n// (at your option) any later version.\n//\n// Corina is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Corina; if not, write to the Free Software\n// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n//\n// Copyright 2001 Ken Harris <kbh7@cornell.edu>\n//\npackage corina.editor;\n\nimport java.awt.BorderLayout;\nimport java.awt.Color;\nimport java.awt.Component;\nimport java.awt.Dimension;\nimport java.awt.Font;\nimport java.awt.Frame;\nimport java.awt.event.ActionEvent;\nimport java.awt.event.WindowEvent;\nimport java.awt.print.PageFormat;\nimport java.io.File;\nimport java.io.IOException;\nimport java.util.Collections;\nimport javax.swing.AbstractAction;\nimport javax.swing.BorderFactory;\nimport javax.swing.Box;\nimport javax.swing.JButton;\nimport javax.swing.JCheckBox;\nimport javax.swing.JComponent;\nimport javax.swing.JDialog;\nimport javax.swing.JLabel;\nimport javax.swing.JMenuBar;\nimport javax.swing.JMenuItem;\nimport javax.swing.JOptionPane;\nimport javax.swing.JPanel;\nimport javax.swing.JScrollPane;\nimport javax.swing.JTabbedPane;\nimport javax.swing.JTable;\nimport javax.swing.JTextField;\nimport javax.swing.ScrollPaneConstants;\nimport javax.swing.event.DocumentEvent;\nimport javax.swing.event.UndoableEditEvent;\nimport javax.swing.event.UndoableEditListener;\nimport javax.swing.text.BadLocationException;\nimport javax.swing.text.Document;\nimport javax.swing.undo.UndoManager;\nimport javax.swing.undo.UndoableEdit;\nimport javax.swing.undo.UndoableEditSupport;\nimport corina.Build;\nimport corina.Sample;\nimport corina.SampleEvent;\nimport corina.SampleListener;\nimport corina.core.App;\nimport corina.gui.Bug;\nimport corina.gui.ElementsPanel;\nimport corina.gui.FileDialog;\nimport corina.gui.Help;\nimport corina.gui.Layout;\nimport corina.gui.PrintableDocument;\nimport corina.gui.SaveableDocument;\nimport corina.gui.UserCancelledException;\nimport corina.gui.XFrame;\nimport corina.gui.menus.HelpMenu;\nimport corina.gui.menus.WindowMenu;\nimport corina.logging.CorinaLog;\nimport corina.prefs.Prefs;\nimport corina.prefs.PrefsEvent;\nimport corina.prefs.PrefsListener;\nimport corina.site.Site;\nimport corina.ui.Alert;\nimport corina.ui.Builder;\nimport corina.ui.I18n;\nimport corina.util.Center;\nimport corina.util.DocumentListener2;\nimport corina.util.OKCancel;\nimport corina.util.Overwrite;\nimport corina.io.SerialSampleIO;\nimport corina.io.SerialSampleIOEvent;\nimport corina.Year;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link Editor}.\n* It contains ten unit test cases for the {@link Editor#measured(int)} method.\n*/\nclass Editor_2Test {"
	},
	{
		"original_code": "// DecadalModel.java\n//\n// This file is part of Corina.\n//\n// Corina is free software; you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation; either version 2 of the License, or\n// (at your option) any later version.\n//\n// Corina is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Corina; if not, write to the Free Software\n// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n//\n// Copyright 2001 Ken Harris <kbh7@cornell.edu>\n//\npackage corina.editor;\n\nimport corina.Year;\nimport corina.Range;\nimport corina.Sample;\nimport corina.manip.Redate;\nimport corina.ui.I18n;\nimport corina.gui.Bug;\nimport java.awt.event.*;\nimport javax.swing.*;\nimport javax.swing.table.*;\nimport javax.swing.undo.AbstractUndoableEdit;\nimport javax.swing.undo.CannotUndoException;\nimport javax.swing.undo.CannotRedoException;\n\n/**\n *   Table model for a decadal dataset.\n *\n *   <p>Left to do: it might be simpler to make the data table actually\n *   3 tables (year, data, count) that scroll together, so tabbing\n *   always stays in the same table.</p>\n *\n *   @author Ken Harris &lt;kbh7 <i style=\"color: gray\">at</i> cornell <i style=\"color: gray\">dot</i> edu&gt;\n *   @version $Id: DecadalModel.java,v 1.5 2006/01/23 08:16:54 lucasmo Exp $\n */\npublic class DecadalModel extends AbstractTableModel {\n\n    // BUG! -- if the length changes (e.g., truncate), there's a problem\n    // with sums.  ouch.  (<-- what did i mean by this?)\n    /**\n     * The sample whose data is being displayed.\n     */\n    protected Sample s;\n\n    /**\n     *  The first row of the dataset.  Default is 0.\n     * \t @see #row_max\n     * \t @see Year#row()\n     */\n    protected int row_min = 0;\n\n    /**\n     *  The last row of the dataset.  Default is -1, so if row_min and\n     * \t row_max are never set, no rows are displayed.\n     * \t @see #row_min\n     * \t @see Year#row()\n     */\n    protected int row_max = -1;\n\n    /**\n     *  Default constructor.  Not used, but required for\n     * \t subclassing.\n     */\n    public DecadalModel() {\n        // to keep subclasses happy\n    }\n\n    /**\n     *  Constructor, given a Sample.\n     * \t @param s the Sample whose data is being viewed\n     */\n    public DecadalModel(Sample s) {\n        this.s = s;\n        countRows();\n    }\n\n    public Sample getSample() {\n        return s;\n    }\n\n    /**\n     *  Return the column name.  The first column is \"Year\", the last\n     * \t column is \"Nr\" (number), and the 10 columns in between are 0\n     * \t through 9.\n     * \t @param col the JTable column number to query\n     * \t @return the column's name\n     */\n    public String getColumnName(int col) {\n        if (col == 0)\n            return I18n.getText(\"year\");\n        else if (col == 11)\n            return I18n.getText(\"number\");\n        else\n            return Integer.toString(col - 1);\n    }\n\n    // query the Sample to figure out row_min, row_max\n    protected void countRows() {\n        row_min = s.range.getStart().row();\n        row_max = s.range.getEnd().row();\n    }\n\n    /**\n     *  Return the row count.  For the Data tab of a Sample (i.e., not\n     * \t Weiserjahre), it adds an extra row if the last datum is a -9\n     * \t year, thus ensuring that there's always one blank after the\n     * \t end for user editing.\n     * \t @return the number of displayable rows\n     */\n    public int getRowCount() {\n        // these need to be updated when the user inserts/deletes\n        countRows();\n        // compute num rows\n        int n = row_max - row_min + 1;\n        // always give a blank space for more data entry; if the last year\n        // is the last year of this decade, we'll need another decade\n        if (s.range.getEnd().column() == 9)\n            n++;\n        return n;\n    }\n\n    /**\n     *  Return the column count.  This is always 12: the decade, 10\n     * \t columns of data, and the histogram cell\n     * \t @return the number of columns, 12\n     */\n    public int getColumnCount() {\n        return 12;\n    }\n\n    /**\n     *  Return the Year that a (row,col) cell should display.\n     *\n     * \t <b>This method creates a new object, and is called far, far too often.</b>\n     * \t For opening one raw sample, it creates 526 Year objects, and about as\n     * \t many each time the window is uncovered (and there are only about 200 years\n     * \t of data visible!).  This can't be good for performance.\n     * \t Make sure each call to this is really needed, or make them not require\n     * \t object creation each time.\n     *\n     * \t (Candidates for this: 2 calls in getValueAt().)\n     *\n     * \t @param row the row in question\n     * \t @param col the column in question\n     * \t @return the Year that the (row,col) cell should display\n     */\n    public /* protected */\n    Year getYear(int row, int col) {\n        // System.out.println(\"getYear() called (n=\" + __n++ + \")\");\n        return new // offset row by row_min (top row is 0)\n        Year(// offset row by row_min (top row is 0)\n        row + row_min, // offset col by 1 (left col is year label)\n        col - 1);\n    }\n\n    // private static int __n=0;\n    // i'll have a lot of these.  better to use only one (flyweight).\n    protected final static Integer ZERO = new Integer(0);\n\n    protected final Integer getMean(int row) {\n        // if no count, just return zero\n        if (s.count == null)\n            return ZERO;\n        // compute left end of range\n        Year y1 = getYear(row, 1);\n        if (row == 0)\n            y1 = s.range.getStart();\n        else if (row + row_min == 0)\n            y1 = new Year(1);\n        // compute right end of range: min(10th column, end)\n        Year y2 = getYear(row, 10);\n        y2 = Year.min(y2, s.range.getEnd());\n        // compute span (assumed nonzero), sum, mean\n        int sum = 0, span = y2.diff(y1) + 1;\n        int left = y1.diff(s.range.getStart());\n        int right = y2.diff(s.range.getStart());\n        for (int i = left; i <= right; i++) sum += ((Integer) s.count.get(i)).intValue();\n        // in a very rare case it can be zero!  (when?  the n+1 year of a sum that ends in -9.)\n        // (actually, though, sums shouldn't have the n+1 cell, so this special case belongs elsewhere!)\n        if (span == 0)\n            return ZERO;\n        // return the mean\n        int mean = Math.round((float) sum / span);\n        return new Integer(mean);\n    }\n\n    private int __a = 0, __b = 0;\n\n    public Object getValueAt(int row, int col) {\n        if (col == 0) {\n            if (row == 0)\n                return s.range.getStart();\n            else if (// special case\n            row + row_min == 0)\n                return \"1\";\n            else {\n                // System.out.println(\"getYear() called (a=\" + __a++ + \")\");\n                // called 66 times\n                return getYear(row, 1);\n                // (was (row,col+1), but col=0 here)\n            }\n        } else if (col == 11) {\n            // average\n            return getMean(row);\n        } else if (col == 1 && row + row_min == 0) {\n            // year \"zero\"\n            return null;\n        } else {\n            // System.out.println(\"getYear() called (b=\" + __b++ + \")\");\n            // 479 -- THIS GETS CALLED TOO MANY TIMES!\n            Year y = getYear(row, col);\n            if (!s.range.contains(y))\n                return null;\n            else\n                return s.data.get(y.diff(s.range.getStart()));\n        }\n    }\n\n    /**\n     *  Return the Class of the specified column.  This is\n     * \t <code>Integer.class</code> for the displayed data, else\n     * \t <code>String.class</code>\n     * \t @param col the column to query\n     * \t @return the column's class\n     */\n    public Class getColumnClass(int col) {\n        return ((col >= 1 && col <= 10) ? Integer.class : String.class);\n    }\n\n    private boolean editingOff = false;\n\n    public void enableEditing(boolean enable) {\n        // if it's true, turn off editingOff\n        editingOff = !enable;\n    }\n\n    public boolean isCellEditable(int row, int col) {\n        // REFACTOR this whole method.  i'd like to see a couple temps, then something simple\n        // like return a||b||c||d;\n        // we're currently in a mode that doesn't allow editing!\n        if (editingOff)\n            return false;\n        // feature: (0,0) is editable (it's the start year, and editing it redates the sample)\n        if (row == 0 && col == 0)\n            return true;\n        // if bad column, is indexed, or is summed, NOT editable\n        if ((col < 1) || (col > 10) || (!s.isEditable()))\n            return false;\n        // proposed year to edit\n        Year y = getYear(row, col);\n        // okay if in range, or one beyond end\n        return (s.range.contains(y) || s.range.getEnd().add(1).equals(y));\n    }\n\n    // oldval from /previous/ edit -- because typing into a cell\n    // counts as 2 edits, oldvalue->\"\", \"\"->newvalue\n    private Object lastOldVal = null;\n\n    public void setValueAt(Object value, int row, int col) {\n        // new feature: (0,0) redates\n        if (row == 0 && col == 0) {\n            // redate\n            try {\n                // compute and set\n                Year newYear = new Year((String) value);\n                // if we don't change it at all, don't mark it as modified...\n                if (newYear.equals(s.range.getStart()))\n                    return;\n                Range newRange = s.range.redateStartTo(newYear);\n                // redate, and post undo\n                s.postEdit(Redate.redate(s, newRange));\n                return;\n            } catch (NumberFormatException nfe) {\n                // tell the user this is bad?\n            } catch (Exception e) {\n                Bug.bug(e);\n            }\n            // stop, either way\n            return;\n        }\n        // if user just typed into end+1, we'll need to increase the size!\n        final boolean bigger = s.range.getEnd().add(+1).equals(getYear(row, col));\n        // if we get a String, make it into an Integer\n        // [Q: what else could it be?]\n        if ((value instanceof String) && ((String) value).length() > 0)\n            try {\n                value = Integer.decode((String) value);\n            } catch (NumberFormatException nfe) {\n                // can't parse, give 'em 0\n                value = new Integer(0);\n            } catch (Exception e) {\n                Bug.bug(e);\n            }\n        final Year y = (bigger ? s.range.getEnd().add(+1) : getYear(row, col));\n        Object tmp = (bigger ? null : s.data.get(y.diff(s.range.getStart())));\n        if (tmp != null && tmp.toString().length() == 0) {\n            tmp = lastOldVal;\n        } else {\n            lastOldVal = tmp;\n        }\n        final Object oldVal = tmp;\n        if (bigger) {\n            s.data.add(value);\n            // s.range.end = s.range.getEnd().add(+1);\n            s.range = new Range(s.range.getStart(), s.range.getEnd().add(+1));\n        } else {\n            if (value.equals(oldVal))\n                return;\n            s.data.set(y.diff(s.range.getStart()), value);\n        }\n        fireTableCellUpdated(row, col);\n        // set modified\n        s.setModified();\n        s.fireSampleDataChanged();\n        if (bigger)\n            s.fireSampleRedated();\n        // add undo-able\n        if (value == null || value.toString().length() == 0)\n            // better to use collapsing undo-edits -- solves both problems\n            return;\n        final Object glue = value;\n        s.postEdit(new AbstractUndoableEdit() {\n\n            private Object newVal = glue;\n\n            // BIGGER IS ALWAYS FALSE HERE -- LASTVAL PROBLEM!\n            private boolean grew = bigger;\n\n            public void undo() throws CannotUndoException {\n                // debugging\n                System.out.println(\"undo, grew=\" + grew);\n                if (grew) {\n                    s.data.remove(s.data.size() - 1);\n                    s.range = new Range(s.range.getStart(), s.range.getEnd().add(-1));\n                } else {\n                    s.data.set(y.diff(s.range.getStart()), oldVal);\n                    // selectYear(y);\n                }\n                s.fireSampleDataChanged();\n                if (grew)\n                    s.fireSampleRedated();\n            }\n\n            public void redo() throws CannotRedoException {\n                // debugging\n                System.out.println(\"redo, grew=\" + grew);\n                if (grew) {\n                    s.data.add(newVal);\n                    s.range = new Range(s.range.getStart(), s.range.getEnd().add(+1));\n                } else {\n                    s.data.set(y.diff(s.range.getStart()), newVal);\n                }\n                s.fireSampleDataChanged();\n                if (grew)\n                    s.fireSampleRedated();\n            }\n\n            public boolean canRedo() {\n                return true;\n            }\n\n            public String getPresentationName() {\n                return I18n.getText(\"edit\");\n                // that's silly, that's the edit menu title -- well, it works...\n            }\n        });\n    }\n}\n",
		"id": "/EvoSuiteBenchmark/35_corina/src/main/java/corina/editor/DecadalModel.java",
		"test_prompt": "// DecadalModelTest.java\n// This file is part of Corina.\n//\n// Corina is free software; you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation; either version 2 of the License, or\n// (at your option) any later version.\n//\n// Corina is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Corina; if not, write to the Free Software\n// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n//\n// Copyright 2001 Ken Harris <kbh7@cornell.edu>\n//\npackage corina.editor;\n\nimport corina.Year;\nimport corina.Range;\nimport corina.Sample;\nimport corina.manip.Redate;\nimport corina.ui.I18n;\nimport corina.gui.Bug;\nimport java.awt.event.*;\nimport javax.swing.*;\nimport javax.swing.table.*;\nimport javax.swing.undo.AbstractUndoableEdit;\nimport javax.swing.undo.CannotUndoException;\nimport javax.swing.undo.CannotRedoException;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link DecadalModel}.\n* It contains ten unit test cases for the {@link DecadalModel#isCellEditable(int, int)} method.\n*/\nclass DecadalModelTest {"
	},
	{
		"original_code": "// CopyDialog.java\n/**\n */\npackage corina.editor;\n\nimport java.awt.*;\nimport java.awt.event.*;\nimport javax.swing.*;\nimport corina.Range;\nimport corina.Year;\nimport corina.ui.Alert;\nimport corina.util.Center;\n\n/**\n * @author Lucas Madar\n */\npublic class CopyDialog extends JDialog {\n\n    boolean cancelled = true;\n\n    private JTextField start, end;\n\n    private Range range;\n\n    private Range completedRange;\n\n    public Range getChosenRange() {\n        return completedRange;\n    }\n\n    public boolean isOk() {\n        return !cancelled;\n    }\n\n    public CopyDialog(JFrame parent, Range sampleRange) {\n        super(parent, \"Copy range...\", true);\n        range = sampleRange;\n        setDefaultCloseOperation(JDialog.DISPOSE_ON_CLOSE);\n        setLayout(new BorderLayout());\n        start = new JTextField(range.getStart().toString());\n        end = new JTextField(range.getEnd().toString());\n        JLabel label;\n        JPanel center = new JPanel(new GridLayout(2, 2));\n        label = new JLabel(\"Start year\");\n        center.add(label);\n        center.add(start);\n        label = new JLabel(\"End year\");\n        center.add(label);\n        center.add(end);\n        center.setBorder(BorderFactory.createTitledBorder(\"Copy range\"));\n        add(center, BorderLayout.CENTER);\n        JPanel south = new JPanel(new FlowLayout(FlowLayout.RIGHT));\n        JButton copy = new JButton(\"Copy\");\n        copy.addActionListener(new AbstractAction() {\n\n            public void actionPerformed(ActionEvent ae) {\n                Year ybeg, yend;\n                try {\n                    ybeg = new Year(Integer.parseInt(start.getText()));\n                } catch (NumberFormatException nfe) {\n                    Alert.error(\"Can't copy\", \"Invalid start range is not a number!\");\n                    return;\n                }\n                if (ybeg.compareTo(range.getStart()) < 0) {\n                    Alert.error(\"Can't copy\", \"Start year is less than sample start year (\" + range.getStart().toString() + \")\");\n                    return;\n                }\n                try {\n                    yend = new Year(Integer.parseInt(end.getText()));\n                } catch (NumberFormatException nfe) {\n                    Alert.error(\"Can't copy\", \"Invalid end of range is not a number!\");\n                    return;\n                }\n                if (yend.compareTo(range.getEnd()) > 0) {\n                    Alert.error(\"Can't copy\", \"End year is greater than sample end year (\" + range.getEnd().toString() + \")\");\n                    return;\n                }\n                if (ybeg.compareTo(yend) >= 0) {\n                    Alert.error(\"Can't copy\", \"Invalid range (must be at least one year, must be from low to high!)\");\n                }\n                completedRange = new Range(ybeg, yend);\n                cancelled = false;\n                dispose();\n            }\n        });\n        south.add(copy);\n        JButton cancel = new JButton(\"Cancel\");\n        cancel.addActionListener(new AbstractAction() {\n\n            public void actionPerformed(ActionEvent ae) {\n                dispose();\n            }\n        });\n        south.add(cancel);\n        add(south, BorderLayout.SOUTH);\n        pack();\n        Center.center(this, parent);\n        setVisible(true);\n    }\n}\n",
		"id": "/EvoSuiteBenchmark/35_corina/src/main/java/corina/editor/CopyDialog.java",
		"test_prompt": "// CopyDialogTest.java\npackage corina.editor;\n\nimport java.awt.*;\nimport java.awt.event.*;\nimport javax.swing.*;\nimport corina.Range;\nimport corina.Year;\nimport corina.ui.Alert;\nimport corina.util.Center;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link CopyDialog}.\n* It contains ten unit test cases for the {@link CopyDialog#isOk()} method.\n*/\nclass CopyDialogTest {"
	},
	{
		"original_code": "// Measure.java\n//\n// This file is part of Corina.\n//\n// Corina is free software; you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation; either version 2 of the License, or\n// (at your option) any later version.\n//\n// Corina is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Corina; if not, write to the Free Software\n// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n//\n// Copyright 2001 Ken Harris <kbh7@cornell.edu>\n//\npackage corina.editor;\n\nimport java.awt.event.ActionEvent;\nimport java.io.BufferedReader;\nimport java.io.IOException;\nimport java.io.InputStreamReader;\nimport java.lang.ref.Reference;\nimport java.lang.ref.WeakReference;\nimport java.util.ArrayList;\nimport java.util.List;\nimport java.util.TooManyListenersException;\nimport javax.comm.CommPortIdentifier;\nimport javax.comm.NoSuchPortException;\nimport javax.comm.PortInUseException;\nimport javax.comm.SerialPort;\nimport javax.comm.SerialPortEvent;\nimport javax.comm.SerialPortEventListener;\nimport javax.comm.UnsupportedCommOperationException;\nimport javax.swing.AbstractAction;\nimport javax.swing.JMenuItem;\nimport javax.swing.KeyStroke;\nimport corina.core.App;\nimport corina.ui.Builder;\nimport corina.ui.I18n;\n\n/*\n  \n */\npublic class Measure extends Thread implements SerialPortEventListener {\n\n    // port ID\n    private CommPortIdentifier portID;\n\n    // ???\n    BufferedReader reader;\n\n    SerialPort serialPort;\n\n    private Editor _e;\n\n    // singleton!\n    private static Measure _m = null;\n\n    // ----------------------------------------------------------------------\n    // menu commands\n    public static boolean hasSerialAPI() {\n        try {\n            Class.forName(\"javax.comm.SerialPort\");\n            return true;\n        } catch (ClassNotFoundException cnfe) {\n            return false;\n        }\n    }\n\n    // a bunch of menuitems:\n    // -- when \"start\" is selected, it becomes \"stop\" and all others are dimmed.\n    // -- when \"stop\" is selected, it becomes \"start\" and all others are enabled.\n    // of jmenuitem\n    private static List menus = new ArrayList();\n\n    public JMenuItem makeMenuItem() {\n        // make a new menuitem\n        // shortcut key?  F1/F2?\n        final JMenuItem menu = Builder.makeMenuItem(\"start_measuring\");\n        menu.setAccelerator(KeyStroke.getKeyStroke(\"F1\"));\n        if (// is running?\n        _m != null)\n            menu.setEnabled(false);\n        menu.addActionListener(new AbstractAction() {\n\n            public void actionPerformed(ActionEvent e) {\n                if (_m != null) {\n                    // was running, stop now\n                    // i become \"start\"\n                    menu.setText(I18n.getText(\"start_measuring\"));\n                    // stop thread\n                    _m.pleaseStop();\n                    _m = null;\n                    // close the port -- BUG, why is this null?\n                    // serialPort.close();\n                    // all others un-dimmed\n                    for (int i = 0; i < menus.size(); i++) if (((Reference) menus.get(i)).get() != menu)\n                        ((JMenuItem) ((Reference) menus.get(i)).get()).setEnabled(true);\n                } else {\n                    // (was not running, start now)\n                    // i become \"stop\"\n                    menu.setText(I18n.getText(\"stop_measuring\"));\n                    // all others get dimmed\n                    for (int i = 0; i < menus.size(); i++) if (((Reference) menus.get(i)).get() != menu)\n                        ((JMenuItem) ((Reference) menus.get(i)).get()).setEnabled(false);\n                    // start thread\n                    _m = new Measure(_e);\n                    _m.start();\n                }\n            }\n        });\n        // i'll remember this one, but only as long as you do\n        menus.add(new WeakReference(menu));\n        // return it\n        return menu;\n    }\n\n    // ----------------------------------------------------------------------\n    public Measure(Editor e) {\n        _e = e;\n        // nothing else\n    }\n\n    public void start() {\n        // identify the port to use\n        try {\n            portID = CommPortIdentifier.getPortIdentifier(App.prefs.getPref(\"corina.measure.port\", \"COM1\"));\n        } catch (NoSuchPortException nspe) {\n            System.out.println(\"no such port!\");\n            // HANDLE ME\n            return;\n        }\n        // try to open the port\n        try {\n            serialPort = (SerialPort) portID.open(\"Corina\", 1000);\n        } catch (PortInUseException piue) {\n            System.out.println(\"port in use!\");\n            // HANDLE ME\n            return;\n        }\n        // open an input stream\n        try {\n            reader = new BufferedReader(new InputStreamReader(serialPort.getInputStream()));\n        } catch (IOException ioe) {\n            System.out.println(\"can't open stream!\");\n            // HANDLE ME\n            return;\n        }\n        try {\n            serialPort.addEventListener(this);\n        } catch (TooManyListenersException tmle) {\n            System.out.println(\"can't add event listener!\");\n            // HANDLE ME\n            return;\n        }\n        // let me know when there's data\n        serialPort.notifyOnDataAvailable(true);\n        // configure for 9600/8/N/1\n        try {\n            serialPort.setSerialPortParams(9600, SerialPort.DATABITS_8, SerialPort.STOPBITS_1, SerialPort.PARITY_NONE);\n        } catch (UnsupportedCommOperationException ucoe) {\n            System.out.println(\"can't set parameters!\");\n            // HANDLE ME\n            return;\n        }\n        // now you can start\n        super.start();\n    }\n\n    // why don't i need to override run()?  because i do my stuff by\n    // registering a listener in start().  maybe i should sleep...\n    public void run() {\n        while (!pleaseStop) {\n            try {\n                Thread.sleep(100);\n                // i'll bet nobody's going to stop measure-mode in\n                // this window, then start measure-mode somewhere else\n                // in under 0.1s.\n            } catch (InterruptedException ie) {\n                // ignore\n            }\n        }\n    }\n\n    private boolean pleaseStop = false;\n\n    public void pleaseStop() {\n        // kill the thread nicely -- editor's \"close\" should do this\n        pleaseStop = true;\n    }\n\n    public void serialEvent(SerialPortEvent spe) {\n        // if it's not DATA, i don't know what it is, so ignore it\n        if (spe.getEventType() != SerialPortEvent.DATA_AVAILABLE)\n            return;\n        // as long as there's data available...\n        for (; ; ) {\n            // get line\n            String line;\n            try {\n                line = reader.readLine().trim();\n            } catch (IOException ioe) {\n                // can't read a line.  i can't imagine what would\n                // cause this.  but we're the first test, so it'll\n                // come right back, so we'd better just return.\n                return;\n            }\n            // if it starts with ';', it's just me being silly\n            if (line.startsWith(\";\"))\n                continue;\n            // it must be a number, therefore, parse it\n            int value = Integer.parseInt(line);\n            // tell the editor\n            _e.measured(value);\n            // done?\n            try {\n                if (!reader.ready())\n                    return;\n            } catch (IOException ioe) {\n                // what to do on ioe here?  can't continue, because\n                // it'll probably keep throwing.  gotta return.\n                return;\n            }\n        }\n    }\n}\n",
		"id": "/EvoSuiteBenchmark/35_corina/src/main/java/corina/editor/Measure_0Test.java",
		"test_prompt": "// Measure_0Test.java\n// This file is part of Corina.\n//\n// Corina is free software; you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation; either version 2 of the License, or\n// (at your option) any later version.\n//\n// Corina is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Corina; if not, write to the Free Software\n// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n//\n// Copyright 2001 Ken Harris <kbh7@cornell.edu>\n//\npackage corina.editor;\n\nimport java.awt.event.ActionEvent;\nimport java.io.BufferedReader;\nimport java.io.IOException;\nimport java.io.InputStreamReader;\nimport java.lang.ref.Reference;\nimport java.lang.ref.WeakReference;\nimport java.util.ArrayList;\nimport java.util.List;\nimport java.util.TooManyListenersException;\nimport javax.comm.CommPortIdentifier;\nimport javax.comm.NoSuchPortException;\nimport javax.comm.PortInUseException;\nimport javax.comm.SerialPort;\nimport javax.comm.SerialPortEvent;\nimport javax.comm.SerialPortEventListener;\nimport javax.comm.UnsupportedCommOperationException;\nimport javax.swing.AbstractAction;\nimport javax.swing.JMenuItem;\nimport javax.swing.KeyStroke;\nimport corina.core.App;\nimport corina.ui.Builder;\nimport corina.ui.I18n;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link Measure}.\n* It contains ten unit test cases for the {@link Measure#hasSerialAPI()} method.\n*/\nclass Measure_0Test {"
	},
	{
		"original_code": "// Measure.java\n//\n// This file is part of Corina.\n//\n// Corina is free software; you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation; either version 2 of the License, or\n// (at your option) any later version.\n//\n// Corina is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Corina; if not, write to the Free Software\n// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n//\n// Copyright 2001 Ken Harris <kbh7@cornell.edu>\n//\npackage corina.editor;\n\nimport java.awt.event.ActionEvent;\nimport java.io.BufferedReader;\nimport java.io.IOException;\nimport java.io.InputStreamReader;\nimport java.lang.ref.Reference;\nimport java.lang.ref.WeakReference;\nimport java.util.ArrayList;\nimport java.util.List;\nimport java.util.TooManyListenersException;\nimport javax.comm.CommPortIdentifier;\nimport javax.comm.NoSuchPortException;\nimport javax.comm.PortInUseException;\nimport javax.comm.SerialPort;\nimport javax.comm.SerialPortEvent;\nimport javax.comm.SerialPortEventListener;\nimport javax.comm.UnsupportedCommOperationException;\nimport javax.swing.AbstractAction;\nimport javax.swing.JMenuItem;\nimport javax.swing.KeyStroke;\nimport corina.core.App;\nimport corina.ui.Builder;\nimport corina.ui.I18n;\n\n/*\n  \n */\npublic class Measure extends Thread implements SerialPortEventListener {\n\n    // port ID\n    private CommPortIdentifier portID;\n\n    // ???\n    BufferedReader reader;\n\n    SerialPort serialPort;\n\n    private Editor _e;\n\n    // singleton!\n    private static Measure _m = null;\n\n    // ----------------------------------------------------------------------\n    // menu commands\n    public static boolean hasSerialAPI() {\n        try {\n            Class.forName(\"javax.comm.SerialPort\");\n            return true;\n        } catch (ClassNotFoundException cnfe) {\n            return false;\n        }\n    }\n\n    // a bunch of menuitems:\n    // -- when \"start\" is selected, it becomes \"stop\" and all others are dimmed.\n    // -- when \"stop\" is selected, it becomes \"start\" and all others are enabled.\n    // of jmenuitem\n    private static List menus = new ArrayList();\n\n    public JMenuItem makeMenuItem() {\n        // make a new menuitem\n        // shortcut key?  F1/F2?\n        final JMenuItem menu = Builder.makeMenuItem(\"start_measuring\");\n        menu.setAccelerator(KeyStroke.getKeyStroke(\"F1\"));\n        if (// is running?\n        _m != null)\n            menu.setEnabled(false);\n        menu.addActionListener(new AbstractAction() {\n\n            public void actionPerformed(ActionEvent e) {\n                if (_m != null) {\n                    // was running, stop now\n                    // i become \"start\"\n                    menu.setText(I18n.getText(\"start_measuring\"));\n                    // stop thread\n                    _m.pleaseStop();\n                    _m = null;\n                    // close the port -- BUG, why is this null?\n                    // serialPort.close();\n                    // all others un-dimmed\n                    for (int i = 0; i < menus.size(); i++) if (((Reference) menus.get(i)).get() != menu)\n                        ((JMenuItem) ((Reference) menus.get(i)).get()).setEnabled(true);\n                } else {\n                    // (was not running, start now)\n                    // i become \"stop\"\n                    menu.setText(I18n.getText(\"stop_measuring\"));\n                    // all others get dimmed\n                    for (int i = 0; i < menus.size(); i++) if (((Reference) menus.get(i)).get() != menu)\n                        ((JMenuItem) ((Reference) menus.get(i)).get()).setEnabled(false);\n                    // start thread\n                    _m = new Measure(_e);\n                    _m.start();\n                }\n            }\n        });\n        // i'll remember this one, but only as long as you do\n        menus.add(new WeakReference(menu));\n        // return it\n        return menu;\n    }\n\n    // ----------------------------------------------------------------------\n    public Measure(Editor e) {\n        _e = e;\n        // nothing else\n    }\n\n    public void start() {\n        // identify the port to use\n        try {\n            portID = CommPortIdentifier.getPortIdentifier(App.prefs.getPref(\"corina.measure.port\", \"COM1\"));\n        } catch (NoSuchPortException nspe) {\n            System.out.println(\"no such port!\");\n            // HANDLE ME\n            return;\n        }\n        // try to open the port\n        try {\n            serialPort = (SerialPort) portID.open(\"Corina\", 1000);\n        } catch (PortInUseException piue) {\n            System.out.println(\"port in use!\");\n            // HANDLE ME\n            return;\n        }\n        // open an input stream\n        try {\n            reader = new BufferedReader(new InputStreamReader(serialPort.getInputStream()));\n        } catch (IOException ioe) {\n            System.out.println(\"can't open stream!\");\n            // HANDLE ME\n            return;\n        }\n        try {\n            serialPort.addEventListener(this);\n        } catch (TooManyListenersException tmle) {\n            System.out.println(\"can't add event listener!\");\n            // HANDLE ME\n            return;\n        }\n        // let me know when there's data\n        serialPort.notifyOnDataAvailable(true);\n        // configure for 9600/8/N/1\n        try {\n            serialPort.setSerialPortParams(9600, SerialPort.DATABITS_8, SerialPort.STOPBITS_1, SerialPort.PARITY_NONE);\n        } catch (UnsupportedCommOperationException ucoe) {\n            System.out.println(\"can't set parameters!\");\n            // HANDLE ME\n            return;\n        }\n        // now you can start\n        super.start();\n    }\n\n    // why don't i need to override run()?  because i do my stuff by\n    // registering a listener in start().  maybe i should sleep...\n    public void run() {\n        while (!pleaseStop) {\n            try {\n                Thread.sleep(100);\n                // i'll bet nobody's going to stop measure-mode in\n                // this window, then start measure-mode somewhere else\n                // in under 0.1s.\n            } catch (InterruptedException ie) {\n                // ignore\n            }\n        }\n    }\n\n    private boolean pleaseStop = false;\n\n    public void pleaseStop() {\n        // kill the thread nicely -- editor's \"close\" should do this\n        pleaseStop = true;\n    }\n\n    public void serialEvent(SerialPortEvent spe) {\n        // if it's not DATA, i don't know what it is, so ignore it\n        if (spe.getEventType() != SerialPortEvent.DATA_AVAILABLE)\n            return;\n        // as long as there's data available...\n        for (; ; ) {\n            // get line\n            String line;\n            try {\n                line = reader.readLine().trim();\n            } catch (IOException ioe) {\n                // can't read a line.  i can't imagine what would\n                // cause this.  but we're the first test, so it'll\n                // come right back, so we'd better just return.\n                return;\n            }\n            // if it starts with ';', it's just me being silly\n            if (line.startsWith(\";\"))\n                continue;\n            // it must be a number, therefore, parse it\n            int value = Integer.parseInt(line);\n            // tell the editor\n            _e.measured(value);\n            // done?\n            try {\n                if (!reader.ready())\n                    return;\n            } catch (IOException ioe) {\n                // what to do on ioe here?  can't continue, because\n                // it'll probably keep throwing.  gotta return.\n                return;\n            }\n        }\n    }\n}\n",
		"id": "/EvoSuiteBenchmark/35_corina/src/main/java/corina/editor/Measure_1Test.java",
		"test_prompt": "// Measure_1Test.java\n// This file is part of Corina.\n//\n// Corina is free software; you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation; either version 2 of the License, or\n// (at your option) any later version.\n//\n// Corina is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Corina; if not, write to the Free Software\n// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n//\n// Copyright 2001 Ken Harris <kbh7@cornell.edu>\n//\npackage corina.editor;\n\nimport java.awt.event.ActionEvent;\nimport java.io.BufferedReader;\nimport java.io.IOException;\nimport java.io.InputStreamReader;\nimport java.lang.ref.Reference;\nimport java.lang.ref.WeakReference;\nimport java.util.ArrayList;\nimport java.util.List;\nimport java.util.TooManyListenersException;\nimport javax.comm.CommPortIdentifier;\nimport javax.comm.NoSuchPortException;\nimport javax.comm.PortInUseException;\nimport javax.comm.SerialPort;\nimport javax.comm.SerialPortEvent;\nimport javax.comm.SerialPortEventListener;\nimport javax.comm.UnsupportedCommOperationException;\nimport javax.swing.AbstractAction;\nimport javax.swing.JMenuItem;\nimport javax.swing.KeyStroke;\nimport corina.core.App;\nimport corina.ui.Builder;\nimport corina.ui.I18n;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link Measure}.\n* It contains ten unit test cases for the {@link Measure#makeMenuItem()} method.\n*/\nclass Measure_1Test {"
	},
	{
		"original_code": "// WJTableModel.java\n//\n// This file is part of Corina.\n//\n// Corina is free software; you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation; either version 2 of the License, or\n// (at your option) any later version.\n//\n// Corina is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Corina; if not, write to the Free Software\n// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n//\n// Copyright 2001 Ken Harris <kbh7@cornell.edu>\n//\npackage corina.editor;\n\nimport corina.Year;\nimport corina.Sample;\nimport corina.SampleListener;\nimport corina.SampleEvent;\nimport corina.Weiserjahre;\n\n/**\n *   Special DecadalModel for Weiserjahre.\n *\n *   <p>Differences from the stock DecadalModel:</p>\n *\n *   <ul>\n *     <li>Weiserjahre is never user-editable, so isCellEditable()\n *         always returns false\n *\n *     <li>Also because it's never user-editable, it doesn't need to\n *         have an extra line if it ends on a -9 year.\n *\n *     <li>It doesn't need to reference the Editor it is a part of,\n *         because it is a read-only view (no modified-flag to set)\n *   </ul>\n *\n *   @author Ken Harris &lt;kbh7 <i style=\"color: gray\">at</i> cornell <i style=\"color: gray\">dot</i> edu&gt;\n *   @version $Id: WJTableModel.java,v 1.2 2004/01/18 17:56:56 aaron Exp $\n */\npublic class WJTableModel extends DecadalModel implements SampleListener {\n\n    /**\n     *       Constructor, given a Sample to view.\n     *\n     *       @param s the Sample to view\n     */\n    public WJTableModel(Sample s) {\n        this.s = s;\n        if (// get rid of this check later\n        s != null && s.hasWeiserjahre())\n            countRows();\n        // we want to see redate-events\n        s.addSampleListener(this);\n    }\n\n    /**\n     *       Return the row count.  The Weiserjahre is not user-editable, so\n     *       there's no need to ever have an extra (empty) line.\n     *\n     *       @return the number of rows\n     */\n    public int getRowCount() {\n        countRows();\n        return (row_max - row_min + 1);\n    }\n\n    /**\n     *       Return the value of the specified cell.\n     *\n     *       @param row the row to query\n     *       @param row the column to query\n     *       @return the value of this cell: the decade title, the\n     *       Weiserjahre value, or the count\n     */\n    public Object getValueAt(int row, int col) {\n        if (col == 0) {\n            if (row == 0)\n                return s.range.getStart();\n            else if (// special case\n            row + row_min == 0)\n                return \"1\";\n            else\n                return getYear(row, col + 1);\n        }\n        if (col == 11) {\n            return getMean(row);\n        } else {\n            Year y = getYear(row, col);\n            return (s.range.contains(y) ? Weiserjahre.toString(s, y) : null);\n        }\n    }\n\n    /**\n     *       Return false: no cell is editable.  Weiserjahre is always\n     *       automatically computed.\n     *\n     *       @param row the row to query\n     *       @param row the column to query\n     *       @return false, meaning that no Weiserjahre cell is editable\n     */\n    public boolean isCellEditable(int row, int col) {\n        return false;\n    }\n\n    // watch for redate events\n    public void sampleRedated(SampleEvent e) {\n        fireTableDataChanged();\n    }\n\n    public void sampleDataChanged(SampleEvent e) {\n    }\n\n    public void sampleMetadataChanged(SampleEvent e) {\n    }\n\n    public void sampleElementsChanged(SampleEvent e) {\n    }\n}\n",
		"id": "/EvoSuiteBenchmark/35_corina/src/main/java/corina/editor/WJTableModel.java",
		"test_prompt": "// WJTableModelTest.java\n// This file is part of Corina.\n//\n// Corina is free software; you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation; either version 2 of the License, or\n// (at your option) any later version.\n//\n// Corina is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Corina; if not, write to the Free Software\n// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n//\n// Copyright 2001 Ken Harris <kbh7@cornell.edu>\n//\npackage corina.editor;\n\nimport corina.Year;\nimport corina.Sample;\nimport corina.SampleListener;\nimport corina.SampleEvent;\nimport corina.Weiserjahre;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link WJTableModel}.\n* It contains ten unit test cases for the {@link WJTableModel#isCellEditable(int, int)} method.\n*/\nclass WJTableModelTest {"
	}
]