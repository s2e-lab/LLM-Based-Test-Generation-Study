[
	{
		"original_code": "// LibrarySuite.java\n/**\r\n * LibrarySuite.java 10:38:35 PM Apr 22, 2008\r\n *\r\n * <PRE>\r\n * Copyright (c) 2008, Jan Amoyo\r\n * All rights reserved.\r\n *\r\n * Redistribution and use in source and binary forms, with or without\r\n * modification, are permitted provided that the following conditions are met:\r\n *\r\n *     - Redistributions of source code must retain the above copyright\r\n *       notice, this list of conditions and the following disclaimer.\r\n *     - Redistributions in binary form must reproduce the above copyright\r\n *       notice, this list of conditions and the following disclaimer in the\r\n *       documentation and/or other materials provided with the distribution.\r\n *\r\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS 'AS IS';\r\n * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\r\n * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\r\n * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDERS AND CONTRIBUTORS\r\n * BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR\r\n * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF\r\n * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS\r\n * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN\r\n * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\r\n * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\r\n * POSSIBILITY OF SUCH DAMAGE.\r\n * </PRE>\r\n */\r\npackage org.fixsuite.message;\r\n\r\nimport java.awt.BorderLayout;\r\nimport java.awt.Dimension;\r\nimport java.awt.event.ActionEvent;\r\nimport java.awt.event.ActionListener;\r\nimport java.awt.event.InputEvent;\r\nimport java.awt.event.KeyEvent;\r\nimport java.awt.event.WindowAdapter;\r\nimport java.awt.event.WindowEvent;\r\nimport javax.swing.ImageIcon;\r\nimport javax.swing.JFrame;\r\nimport javax.swing.JMenu;\r\nimport javax.swing.JMenuBar;\r\nimport javax.swing.JMenuItem;\r\nimport javax.swing.JOptionPane;\r\nimport javax.swing.JSplitPane;\r\nimport javax.swing.JTabbedPane;\r\nimport javax.swing.KeyStroke;\r\nimport javax.swing.SwingUtilities;\r\nimport javax.swing.UIManager;\r\nimport javax.swing.WindowConstants;\r\nimport org.apache.log4j.PropertyConfigurator;\r\nimport org.fixsuite.message.view.AboutDialog;\r\nimport org.fixsuite.message.view.DetailsPanel;\r\nimport org.fixsuite.message.view.ListView;\r\nimport org.fixsuite.message.view.LoadingSplashScreen;\r\nimport org.fixsuite.message.view.TreeView;\r\nimport org.slf4j.Logger;\r\nimport org.slf4j.LoggerFactory;\r\n\r\n/**\r\n * Main application of FixSuite - Library.\r\n *\r\n * @author jramoyo\r\n */\r\npublic class LibrarySuite extends JFrame implements ActionListener {\r\n\r\n    public static final String VERSION = \"Beta\";\r\n\r\n    public static final String TITLE = \"FixLibrary\";\r\n\r\n    public static final String URL = \"http://sourceforge.net/projects/fixsuite/\";\r\n\r\n    private static Logger logger = LoggerFactory.getLogger(LibrarySuite.class);\r\n\r\n    private static final long serialVersionUID = 1L;\r\n\r\n    private static LibrarySuite instance;\r\n\r\n    // GUI\r\n    private JMenuBar menuBar;\r\n\r\n    private JMenu fileMenu;\r\n\r\n    private JMenu helpMenu;\r\n\r\n    private JMenuItem exitMenuItem;\r\n\r\n    private JMenuItem aboutMenuItem;\r\n\r\n    private JSplitPane mainSplitPane;\r\n\r\n    private JTabbedPane viewsTabbedPane;\r\n\r\n    private LoadingSplashScreen splashScreen;\r\n\r\n    private TreeView treeView;\r\n\r\n    private ListView listView;\r\n\r\n    private DetailsPanel detailsPanel;\r\n\r\n    private AboutDialog aboutDialog;\r\n\r\n    // Attributes\r\n    private Library library;\r\n\r\n    /**\r\n     * Creates a new LibrarySuite\r\n     */\r\n    public LibrarySuite() {\r\n        super();\r\n        library = new Library();\r\n        // Show the splash screen\r\n        splashScreen = new LoadingSplashScreen();\r\n        splashScreen.splash();\r\n        // Load the dictionary\r\n        new Thread(new LibraryLoader()).start();\r\n    }\r\n\r\n    private void initGUI() {\r\n        try {\r\n            // Set the layout\r\n            setLayout(new BorderLayout());\r\n            // Setup the menu bar\r\n            menuBar = new JMenuBar();\r\n            // File Menu\r\n            fileMenu = new JMenu(\"File\");\r\n            fileMenu.setMnemonic('F');\r\n            menuBar.add(fileMenu);\r\n            // Exit\r\n            exitMenuItem = new JMenuItem(\"Exit\");\r\n            exitMenuItem.setMnemonic('x');\r\n            exitMenuItem.setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_X, InputEvent.CTRL_DOWN_MASK));\r\n            exitMenuItem.addActionListener(this);\r\n            fileMenu.add(exitMenuItem);\r\n            // Help Menu\r\n            helpMenu = new JMenu(\"Help\");\r\n            helpMenu.setMnemonic('H');\r\n            menuBar.add(helpMenu);\r\n            // About\r\n            aboutMenuItem = new JMenuItem(\"About\");\r\n            aboutMenuItem.setMnemonic('A');\r\n            aboutMenuItem.addActionListener(this);\r\n            helpMenu.add(aboutMenuItem);\r\n            // About dialog\r\n            aboutDialog = new AboutDialog();\r\n            // Main split pane\r\n            mainSplitPane = new JSplitPane(JSplitPane.HORIZONTAL_SPLIT);\r\n            mainSplitPane.setOneTouchExpandable(true);\r\n            mainSplitPane.setPreferredSize(new Dimension(1024, 768));\r\n            mainSplitPane.setContinuousLayout(true);\r\n            mainSplitPane.setResizeWeight(0);\r\n            mainSplitPane.setDividerSize(10);\r\n            // Left component\r\n            viewsTabbedPane = new JTabbedPane();\r\n            listView = new ListView(library);\r\n            viewsTabbedPane.add(listView, \"List View\");\r\n            treeView = new TreeView(library);\r\n            viewsTabbedPane.add(treeView, \"Tree View\");\r\n            mainSplitPane.setLeftComponent(viewsTabbedPane);\r\n            // Right component\r\n            detailsPanel = new DetailsPanel();\r\n            mainSplitPane.setRightComponent(detailsPanel);\r\n            getContentPane().add(mainSplitPane, BorderLayout.CENTER);\r\n            // Setup the minimum sizes\r\n            mainSplitPane.getRightComponent().setMinimumSize(new Dimension(512, 768));\r\n            mainSplitPane.getLeftComponent().setMinimumSize(new Dimension(512, 768));\r\n            // Setup the frame\r\n            setJMenuBar(menuBar);\r\n            setTitle(TITLE + \" (\" + VERSION + \")\");\r\n            setIconImage(new ImageIcon(\".\\\\resources\\\\logo.gif\").getImage());\r\n            setDefaultCloseOperation(WindowConstants.DO_NOTHING_ON_CLOSE);\r\n            addWindowListener(new WindowAdapter() {\r\n\r\n                public void windowClosing(WindowEvent event) {\r\n                    exitFrame();\r\n                }\r\n            });\r\n            // Show the frame\r\n            pack();\r\n            setLocationRelativeTo(null);\r\n            setVisible(true);\r\n        } catch (Exception ex) {\r\n            logger.error(\"An error occured while initializing the UI: \" + ex.getMessage(), ex);\r\n            System.exit(1);\r\n        }\r\n    }\r\n\r\n    public static void main(String[] args) {\r\n        PropertyConfigurator.configure(\".\\\\resources\\\\log4j.properties\");\r\n        try {\r\n            UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());\r\n        } catch (Exception ex) {\r\n            logger.warn(\"Unable to switch to native look and feel.\");\r\n        }\r\n        SwingUtilities.invokeLater(new Runnable() {\r\n\r\n            public void run() {\r\n                logger.info(\"Starting FixSuite - Library...\");\r\n                instance = new LibrarySuite();\r\n            }\r\n        });\r\n    }\r\n\r\n    public static LibrarySuite getInstance() {\r\n        return instance;\r\n    }\r\n\r\n    public void actionPerformed(ActionEvent event) {\r\n        if (event.getSource().equals(exitMenuItem)) {\r\n            exitFrame();\r\n        } else if (event.getSource().equals(aboutMenuItem)) {\r\n            aboutDialog.setLocationRelativeTo(null);\r\n            aboutDialog.setVisible(true);\r\n        }\r\n    }\r\n\r\n    public DetailsPanel getDetailsPanel() {\r\n        return detailsPanel;\r\n    }\r\n\r\n    private void exitFrame() {\r\n        int choice = JOptionPane.showConfirmDialog(this, \"Are you sure you want to exit?\", \"Exit\", JOptionPane.YES_NO_OPTION);\r\n        if (choice == JOptionPane.YES_OPTION) {\r\n            logger.info(\"FIX Suite - Library shutting down...\");\r\n            System.exit(0);\r\n        }\r\n    }\r\n\r\n    private class LibraryLoader implements Runnable {\r\n\r\n        public void run() {\r\n            library.loadFromDirectory(\".\\\\resources\\\\libraryFpl\");\r\n            // Dispose splash screen\r\n            splashScreen.unSplash();\r\n            // Initialize the GUI\r\n            initGUI();\r\n        }\r\n    }\r\n}\r\n",
		"id": "EvoSuiteBenchmark/74_fixsuite/src/main/java/org/fixsuite/message/LibrarySuiteTest.java",
		"test_prompt": "// LibrarySuiteTest.java\npackage org.fixsuite.message;\n\nimport java.awt.BorderLayout;\nimport java.awt.Dimension;\nimport java.awt.event.ActionEvent;\nimport java.awt.event.ActionListener;\nimport java.awt.event.InputEvent;\nimport java.awt.event.KeyEvent;\nimport java.awt.event.WindowAdapter;\nimport java.awt.event.WindowEvent;\nimport javax.swing.ImageIcon;\nimport javax.swing.JFrame;\nimport javax.swing.JMenu;\nimport javax.swing.JMenuBar;\nimport javax.swing.JMenuItem;\nimport javax.swing.JOptionPane;\nimport javax.swing.JSplitPane;\nimport javax.swing.JTabbedPane;\nimport javax.swing.KeyStroke;\nimport javax.swing.SwingUtilities;\nimport javax.swing.UIManager;\nimport javax.swing.WindowConstants;\nimport org.apache.log4j.PropertyConfigurator;\nimport org.fixsuite.message.view.AboutDialog;\nimport org.fixsuite.message.view.DetailsPanel;\nimport org.fixsuite.message.view.ListView;\nimport org.fixsuite.message.view.LoadingSplashScreen;\nimport org.fixsuite.message.view.TreeView;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link LibrarySuite}.\n* It contains ten unit test cases for the {@link LibrarySuite#getInstance()} method.\n*/\nclass LibrarySuiteTest {"
	},
	{
		"original_code": "// AbstractParser.java\n/**\r\n * AbstractParser.java 11:42:21 PM Apr 21, 2008\r\n *\r\n * <PRE>\r\n * Copyright (c) 2008, Jan Amoyo\r\n * All rights reserved.\r\n *\r\n * Redistribution and use in source and binary forms, with or without\r\n * modification, are permitted provided that the following conditions are met:\r\n *\r\n *     - Redistributions of source code must retain the above copyright\r\n *       notice, this list of conditions and the following disclaimer.\r\n *     - Redistributions in binary form must reproduce the above copyright\r\n *       notice, this list of conditions and the following disclaimer in the\r\n *       documentation and/or other materials provided with the distribution.\r\n *\r\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS 'AS IS';\r\n * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\r\n * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\r\n * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDERS AND CONTRIBUTORS\r\n * BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR\r\n * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF\r\n * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS\r\n * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN\r\n * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\r\n * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\r\n * POSSIBILITY OF SUCH DAMAGE.\r\n * </PRE>\r\n */\r\npackage org.fixsuite.message.parsers.fpl;\r\n\r\nimport java.io.File;\r\nimport java.io.IOException;\r\nimport org.fixsuite.message.info.DictionaryInfo;\r\nimport org.fixsuite.message.parsers.Parser;\r\nimport org.jdom.Document;\r\nimport org.jdom.Element;\r\nimport org.jdom.JDOMException;\r\nimport org.jdom.input.SAXBuilder;\r\nimport org.slf4j.Logger;\r\nimport org.slf4j.LoggerFactory;\r\n\r\n/**\r\n * Base class to all FPL parsers.\r\n *\r\n * @author jramoyo\r\n */\r\npublic abstract class AbstractParser implements Parser {\r\n\r\n    private static Logger logger = LoggerFactory.getLogger(Parser.class);\r\n\r\n    /**\r\n     * @see com.jramoyo.fix.library.parser.Parser#parse(com.jramoyo.fix.library.model.DictionaryInfo,\r\n     *      java.io.File)\r\n     */\r\n    public boolean parse(DictionaryInfo dictionary, File xmlFile) {\r\n        boolean result = true;\r\n        try {\r\n            Document document = new SAXBuilder().build(xmlFile);\r\n            Element root = document.getRootElement();\r\n            load(dictionary, root);\r\n        } catch (IOException ex) {\r\n            logger.error(\"Unable to access XML file \" + xmlFile.getName() + \".\", ex);\r\n            result = false;\r\n        } catch (JDOMException ex) {\r\n            logger.error(\"Unable to parse XML file \" + xmlFile + \".\", ex);\r\n            result = false;\r\n        } catch (Exception ex) {\r\n            logger.error(\"An exception occured while parsing.\" + xmlFile, ex);\r\n            result = false;\r\n        }\r\n        return result;\r\n    }\r\n\r\n    protected abstract void load(DictionaryInfo dictionary, Element root) throws Exception;\r\n}\r\n",
		"id": "EvoSuiteBenchmark/74_fixsuite/src/main/java/org/fixsuite/message/parsers/fpl/AbstractParserTest.java",
		"test_prompt": "// AbstractParserTest.java\npackage org.fixsuite.message.parsers.fpl;\n\nimport java.io.File;\nimport java.io.IOException;\nimport org.fixsuite.message.info.DictionaryInfo;\nimport org.fixsuite.message.parsers.Parser;\nimport org.jdom.Document;\nimport org.jdom.Element;\nimport org.jdom.JDOMException;\nimport org.jdom.input.SAXBuilder;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link AbstractParser}.\n* It contains ten unit test cases for the {@link AbstractParser#parse(DictionaryInfo, File)} method.\n*/\nclass AbstractParserTest {"
	},
	{
		"original_code": "// MsgContentModel.java\n/**\r\n * MsgContentModel.java 12:34:27 AM May 1, 2008\r\n *\r\n * <PRE>\r\n * Copyright (c) 2008, Jan Amoyo\r\n * All rights reserved.\r\n *\r\n * Redistribution and use in source and binary forms, with or without\r\n * modification, are permitted provided that the following conditions are met:\r\n *\r\n *     - Redistributions of source code must retain the above copyright\r\n *       notice, this list of conditions and the following disclaimer.\r\n *     - Redistributions in binary form must reproduce the above copyright\r\n *       notice, this list of conditions and the following disclaimer in the\r\n *       documentation and/or other materials provided with the distribution.\r\n *\r\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS 'AS IS';\r\n * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\r\n * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\r\n * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDERS AND CONTRIBUTORS\r\n * BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR\r\n * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF\r\n * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS\r\n * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN\r\n * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\r\n * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\r\n * POSSIBILITY OF SUCH DAMAGE.\r\n * </PRE>\r\n */\r\npackage org.fixsuite.message.parsers.fpl;\r\n\r\n/**\r\n * Model representing an element in a MsgContents.xml specification. This is\r\n * used for sorting misplaced contents from FIX 5.0 and FIX 5.0SP1.\r\n *\r\n * @author jramoyo\r\n */\r\npublic class MsgContentModel implements Comparable<MsgContentModel> {\r\n\r\n    private int indent;\r\n\r\n    private double position;\r\n\r\n    private String tagText;\r\n\r\n    private boolean isRequired;\r\n\r\n    private String description;\r\n\r\n    private int id;\r\n\r\n    /**\r\n     * Returns the indent\r\n     *\r\n     * @return the indent\r\n     */\r\n    public int getIndent() {\r\n        return indent;\r\n    }\r\n\r\n    /**\r\n     * Modifies the indent\r\n     *\r\n     * @param indent - the indent to set\r\n     */\r\n    public void setIndent(int indent) {\r\n        this.indent = indent;\r\n    }\r\n\r\n    /**\r\n     * Returns the position\r\n     *\r\n     * @return the position\r\n     */\r\n    public double getPosition() {\r\n        return position;\r\n    }\r\n\r\n    /**\r\n     * Modifies the position\r\n     *\r\n     * @param position - the position to set\r\n     */\r\n    public void setPosition(double position) {\r\n        this.position = position;\r\n    }\r\n\r\n    /**\r\n     * Returns the tagText\r\n     *\r\n     * @return the tagText\r\n     */\r\n    public String getTagText() {\r\n        return tagText;\r\n    }\r\n\r\n    /**\r\n     * Modifies the tagText\r\n     *\r\n     * @param tagText - the tagText to set\r\n     */\r\n    public void setTagText(String tagText) {\r\n        this.tagText = tagText;\r\n    }\r\n\r\n    /**\r\n     * Returns the isRequired\r\n     *\r\n     * @return the isRequired\r\n     */\r\n    public boolean isRequired() {\r\n        return isRequired;\r\n    }\r\n\r\n    /**\r\n     * Modifies the isRequired\r\n     *\r\n     * @param isRequired - the isRequired to set\r\n     */\r\n    public void setRequired(boolean isRequired) {\r\n        this.isRequired = isRequired;\r\n    }\r\n\r\n    /**\r\n     * Returns the description\r\n     *\r\n     * @return the description\r\n     */\r\n    public String getDescription() {\r\n        return description;\r\n    }\r\n\r\n    /**\r\n     * Modifies the description\r\n     *\r\n     * @param description - the description to set\r\n     */\r\n    public void setDescription(String description) {\r\n        this.description = description;\r\n    }\r\n\r\n    /**\r\n     * Returns the id\r\n     *\r\n     * @return the id\r\n     */\r\n    public int getId() {\r\n        return id;\r\n    }\r\n\r\n    /**\r\n     * Modifies the id\r\n     *\r\n     * @param id - the id to set\r\n     */\r\n    public void setId(int id) {\r\n        this.id = id;\r\n    }\r\n\r\n    public int compareTo(MsgContentModel model) {\r\n        if (id < model.getId()) {\r\n            return -1;\r\n        } else if (id == model.getId()) {\r\n            if (position < model.getPosition()) {\r\n                return -1;\r\n            } else if (position == model.getPosition()) {\r\n                return 0;\r\n            } else {\r\n                return 1;\r\n            }\r\n        } else {\r\n            return 1;\r\n        }\r\n    }\r\n}\r\n",
		"id": "EvoSuiteBenchmark/74_fixsuite/src/main/java/org/fixsuite/message/parsers/fpl/MsgContentModelTest0.java",
		"test_prompt": "// MsgContentModelTest0.java\npackage org.fixsuite.message.parsers.fpl;\n\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link MsgContentModel}.\n* It contains ten unit test cases for the {@link MsgContentModel#isRequired()} method.\n*/\nclass MsgContentModelTest0 {"
	},
	{
		"original_code": "// MsgContentModel.java\n/**\r\n * MsgContentModel.java 12:34:27 AM May 1, 2008\r\n *\r\n * <PRE>\r\n * Copyright (c) 2008, Jan Amoyo\r\n * All rights reserved.\r\n *\r\n * Redistribution and use in source and binary forms, with or without\r\n * modification, are permitted provided that the following conditions are met:\r\n *\r\n *     - Redistributions of source code must retain the above copyright\r\n *       notice, this list of conditions and the following disclaimer.\r\n *     - Redistributions in binary form must reproduce the above copyright\r\n *       notice, this list of conditions and the following disclaimer in the\r\n *       documentation and/or other materials provided with the distribution.\r\n *\r\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS 'AS IS';\r\n * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\r\n * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\r\n * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDERS AND CONTRIBUTORS\r\n * BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR\r\n * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF\r\n * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS\r\n * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN\r\n * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\r\n * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\r\n * POSSIBILITY OF SUCH DAMAGE.\r\n * </PRE>\r\n */\r\npackage org.fixsuite.message.parsers.fpl;\r\n\r\n/**\r\n * Model representing an element in a MsgContents.xml specification. This is\r\n * used for sorting misplaced contents from FIX 5.0 and FIX 5.0SP1.\r\n *\r\n * @author jramoyo\r\n */\r\npublic class MsgContentModel implements Comparable<MsgContentModel> {\r\n\r\n    private int indent;\r\n\r\n    private double position;\r\n\r\n    private String tagText;\r\n\r\n    private boolean isRequired;\r\n\r\n    private String description;\r\n\r\n    private int id;\r\n\r\n    /**\r\n     * Returns the indent\r\n     *\r\n     * @return the indent\r\n     */\r\n    public int getIndent() {\r\n        return indent;\r\n    }\r\n\r\n    /**\r\n     * Modifies the indent\r\n     *\r\n     * @param indent - the indent to set\r\n     */\r\n    public void setIndent(int indent) {\r\n        this.indent = indent;\r\n    }\r\n\r\n    /**\r\n     * Returns the position\r\n     *\r\n     * @return the position\r\n     */\r\n    public double getPosition() {\r\n        return position;\r\n    }\r\n\r\n    /**\r\n     * Modifies the position\r\n     *\r\n     * @param position - the position to set\r\n     */\r\n    public void setPosition(double position) {\r\n        this.position = position;\r\n    }\r\n\r\n    /**\r\n     * Returns the tagText\r\n     *\r\n     * @return the tagText\r\n     */\r\n    public String getTagText() {\r\n        return tagText;\r\n    }\r\n\r\n    /**\r\n     * Modifies the tagText\r\n     *\r\n     * @param tagText - the tagText to set\r\n     */\r\n    public void setTagText(String tagText) {\r\n        this.tagText = tagText;\r\n    }\r\n\r\n    /**\r\n     * Returns the isRequired\r\n     *\r\n     * @return the isRequired\r\n     */\r\n    public boolean isRequired() {\r\n        return isRequired;\r\n    }\r\n\r\n    /**\r\n     * Modifies the isRequired\r\n     *\r\n     * @param isRequired - the isRequired to set\r\n     */\r\n    public void setRequired(boolean isRequired) {\r\n        this.isRequired = isRequired;\r\n    }\r\n\r\n    /**\r\n     * Returns the description\r\n     *\r\n     * @return the description\r\n     */\r\n    public String getDescription() {\r\n        return description;\r\n    }\r\n\r\n    /**\r\n     * Modifies the description\r\n     *\r\n     * @param description - the description to set\r\n     */\r\n    public void setDescription(String description) {\r\n        this.description = description;\r\n    }\r\n\r\n    /**\r\n     * Returns the id\r\n     *\r\n     * @return the id\r\n     */\r\n    public int getId() {\r\n        return id;\r\n    }\r\n\r\n    /**\r\n     * Modifies the id\r\n     *\r\n     * @param id - the id to set\r\n     */\r\n    public void setId(int id) {\r\n        this.id = id;\r\n    }\r\n\r\n    public int compareTo(MsgContentModel model) {\r\n        if (id < model.getId()) {\r\n            return -1;\r\n        } else if (id == model.getId()) {\r\n            if (position < model.getPosition()) {\r\n                return -1;\r\n            } else if (position == model.getPosition()) {\r\n                return 0;\r\n            } else {\r\n                return 1;\r\n            }\r\n        } else {\r\n            return 1;\r\n        }\r\n    }\r\n}\r\n",
		"id": "EvoSuiteBenchmark/74_fixsuite/src/main/java/org/fixsuite/message/parsers/fpl/MsgContentModelTest1.java",
		"test_prompt": "// MsgContentModelTest1.java\npackage org.fixsuite.message.parsers.fpl;\n\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link MsgContentModel}.\n* It contains ten unit test cases for the {@link MsgContentModel#compareTo(MsgContentModel)} method.\n*/\nclass MsgContentModelTest1 {"
	},
	{
		"original_code": "// MainParser.java\n/**\r\n * MainParser.java 8:48:30 PM Apr 22, 2008\r\n *\r\n * <PRE>\r\n * Copyright (c) 2008, Jan Amoyo\r\n * All rights reserved.\r\n *\r\n * Redistribution and use in source and binary forms, with or without\r\n * modification, are permitted provided that the following conditions are met:\r\n *\r\n *     - Redistributions of source code must retain the above copyright\r\n *       notice, this list of conditions and the following disclaimer.\r\n *     - Redistributions in binary form must reproduce the above copyright\r\n *       notice, this list of conditions and the following disclaimer in the\r\n *       documentation and/or other materials provided with the distribution.\r\n *\r\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS 'AS IS';\r\n * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\r\n * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\r\n * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDERS AND CONTRIBUTORS\r\n * BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR\r\n * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF\r\n * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS\r\n * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN\r\n * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\r\n * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\r\n * POSSIBILITY OF SUCH DAMAGE.\r\n * </PRE>\r\n */\r\npackage org.fixsuite.message.parsers.fpl;\r\n\r\nimport java.io.File;\r\nimport java.util.HashMap;\r\nimport java.util.Map;\r\nimport org.fixsuite.message.info.DictionaryInfo;\r\nimport org.fixsuite.message.parsers.Parser;\r\nimport org.slf4j.Logger;\r\nimport org.slf4j.LoggerFactory;\r\n\r\n/**\r\n * Main FPL parser. MainParser maps an FPL XML specification and delegates the\r\n * parsing to the respective parser.\r\n *\r\n * @author jramoyo\r\n */\r\npublic class MainParser {\r\n\r\n    private static final String COMPONENTS_FILE_NAME = \"Components.xml\";\r\n\r\n    private static final String ENUMS_FILE_NAME = \"Enums.xml\";\r\n\r\n    private static final String FIELDS_FILE_NAME = \"Fields.xml\";\r\n\r\n    private static final String MSG_CONTENTS_FILE_NAME = \"MsgContents.xml\";\r\n\r\n    private static final String MSG_TYPE_FILE_NAME = \"MsgType.xml\";\r\n\r\n    private static Logger logger = LoggerFactory.getLogger(MainParser.class);\r\n\r\n    private static MainParser singleton;\r\n\r\n    private Map<String, Parser> parsers;\r\n\r\n    public MainParser() {\r\n        parsers = new HashMap<String, Parser>();\r\n        parsers.put(COMPONENTS_FILE_NAME, new ComponentsParser());\r\n        parsers.put(ENUMS_FILE_NAME, new EnumsParser());\r\n        parsers.put(FIELDS_FILE_NAME, new FieldsParser());\r\n        parsers.put(MSG_CONTENTS_FILE_NAME, new MsgContentsParser());\r\n        parsers.put(MSG_TYPE_FILE_NAME, new MsgTypeParser());\r\n    }\r\n\r\n    public static boolean parse(DictionaryInfo dictionary, File xmlFile) {\r\n        boolean result = true;\r\n        if (xmlFile.isFile()) {\r\n            if (getInstance().getParser(xmlFile.getName()) != null) {\r\n                getInstance().getParser(xmlFile.getName()).parse(dictionary, xmlFile);\r\n                logger.debug(\"Loaded XML file \" + xmlFile.getPath() + \".\");\r\n            } else {\r\n                logger.debug(\"Unknown XML file \" + xmlFile.getName() + \".\");\r\n                result = false;\r\n            }\r\n        } else {\r\n            logger.error(\"Path name does not point to a file.\");\r\n            result = false;\r\n        }\r\n        return result;\r\n    }\r\n\r\n    private static MainParser getInstance() {\r\n        synchronized (MainParser.class) {\r\n            if (singleton == null) {\r\n                singleton = new MainParser();\r\n            }\r\n        }\r\n        return singleton;\r\n    }\r\n\r\n    private Parser getParser(String fileName) {\r\n        return parsers.get(fileName);\r\n    }\r\n}\r\n",
		"id": "EvoSuiteBenchmark/74_fixsuite/src/main/java/org/fixsuite/message/parsers/fpl/MainParserTest.java",
		"test_prompt": "// MainParserTest.java\npackage org.fixsuite.message.parsers.fpl;\n\nimport java.io.File;\nimport java.util.HashMap;\nimport java.util.Map;\nimport org.fixsuite.message.info.DictionaryInfo;\nimport org.fixsuite.message.parsers.Parser;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link MainParser}.\n* It contains ten unit test cases for the {@link MainParser#parse(DictionaryInfo, File)} method.\n*/\nclass MainParserTest {"
	},
	{
		"original_code": "// Library.java\n/**\r\n * Library.java 8:50:42 PM Apr 22, 2008\r\n *\r\n * <PRE>\r\n * Copyright (c) 2008, Jan Amoyo\r\n * All rights reserved.\r\n *\r\n * Redistribution and use in source and binary forms, with or without\r\n * modification, are permitted provided that the following conditions are met:\r\n *\r\n *     - Redistributions of source code must retain the above copyright\r\n *       notice, this list of conditions and the following disclaimer.\r\n *     - Redistributions in binary form must reproduce the above copyright\r\n *       notice, this list of conditions and the following disclaimer in the\r\n *       documentation and/or other materials provided with the distribution.\r\n *\r\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS 'AS IS';\r\n * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\r\n * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\r\n * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDERS AND CONTRIBUTORS\r\n * BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR\r\n * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF\r\n * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS\r\n * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN\r\n * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\r\n * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\r\n * POSSIBILITY OF SUCH DAMAGE.\r\n * </PRE>\r\n */\r\npackage org.fixsuite.message;\r\n\r\nimport java.io.File;\r\nimport java.text.DecimalFormat;\r\nimport java.util.ArrayList;\r\nimport java.util.List;\r\nimport java.util.Map;\r\nimport java.util.TreeMap;\r\nimport org.fixsuite.message.info.DictionaryInfo;\r\nimport org.fixsuite.message.parsers.fpl.MainParser;\r\nimport org.slf4j.Logger;\r\nimport org.slf4j.LoggerFactory;\r\n\r\n/**\r\n * Main storage for all available FIX version specifications.\r\n *\r\n * @author jramoyo\r\n */\r\npublic class Library {\r\n\r\n    private static final String FIELDS_FILE_NAME = \"Fields.xml\";\r\n\r\n    private static final String ENUMS_FILE_NAME = \"Enums.xml\";\r\n\r\n    private static final String COMPONENTS_FILE_NAME = \"Components.xml\";\r\n\r\n    private static final String MSG_TYPE_FILE_NAME = \"MsgType.xml\";\r\n\r\n    private static final String MSG_CONTENTS_FILE_NAME = \"MsgContents.xml\";\r\n\r\n    private static final int FIELDS_FILE_KEY = 1;\r\n\r\n    private static final int ENUMS_FILE_KEY = 2;\r\n\r\n    private static final int COMPONENTS_FILE_KEY = 3;\r\n\r\n    private static final int MSG_TYPE_FILE_KEY = 4;\r\n\r\n    private static final int MSG_CONTENTS_FILE_KEY = 5;\r\n\r\n    private static Logger logger = LoggerFactory.getLogger(Library.class);\r\n\r\n    private Map<String, DictionaryInfo> dictionaries;\r\n\r\n    public Library() {\r\n        dictionaries = new TreeMap<String, DictionaryInfo>();\r\n    }\r\n\r\n    public boolean loadFromDirectory(String libraryPath) {\r\n        boolean result = true;\r\n        long startTime = System.currentTimeMillis();\r\n        if (!dictionaries.isEmpty()) {\r\n            logger.debug(\"Unloading previous dictionaries\");\r\n            dictionaries.clear();\r\n        }\r\n        // Cleanup JVM before loading\r\n        System.gc();\r\n        long startMemory = Runtime.getRuntime().freeMemory();\r\n        File path = new File(libraryPath);\r\n        if (path.isDirectory()) {\r\n            File[] files = path.listFiles();\r\n            if (files.length != 0) {\r\n                for (int i = 0; i < files.length; i++) {\r\n                    if (files[i].isDirectory()) {\r\n                        loadDirectory(arrangeFiles(files[i].listFiles()), files[i].getName());\r\n                    }\r\n                }\r\n                if (!dictionaries.isEmpty()) {\r\n                    logger.debug(\"Loaded \" + dictionaries.size() + \" FIX dictionaries.\");\r\n                } else {\r\n                    logger.error(\"Unable to load any dictionaries\");\r\n                }\r\n            } else {\r\n                logger.error(\"Supplied directory is empty.\");\r\n                result = false;\r\n            }\r\n        } else {\r\n            logger.error(\"Supplied path is not a directory.\");\r\n            result = false;\r\n        }\r\n        // Cleanup JVM after loading\r\n        System.gc();\r\n        logger.debug(\"Approximate memory allocation: \" + new DecimalFormat().format(((double) (Runtime.getRuntime().freeMemory() - startMemory) / 1000000)) + \" MB.\");\r\n        logger.info(\"Loading time: \" + (System.currentTimeMillis() - startTime) + \" milliseconds.\");\r\n        return result;\r\n    }\r\n\r\n    public List<DictionaryInfo> getDictionaries() {\r\n        return new ArrayList<DictionaryInfo>(dictionaries.values());\r\n    }\r\n\r\n    public DictionaryInfo getDictionary(String version) {\r\n        return dictionaries.get(version);\r\n    }\r\n\r\n    private void loadDirectory(List<File> files, String version) {\r\n        DictionaryInfo dictionary = new DictionaryInfo(version);\r\n        for (File file : files) {\r\n            MainParser.parse(dictionary, file);\r\n        }\r\n        if (dictionary.isLoaded()) {\r\n            dictionaries.put(dictionary.getVersion(), dictionary);\r\n        } else {\r\n            logger.debug(\"Unable to load dictionary from \" + version + \".\");\r\n        }\r\n    }\r\n\r\n    /*\r\n     * Files must be properly arranged for the FPL parsers to work\r\n     */\r\n    private List<File> arrangeFiles(File[] files) {\r\n        Map<Integer, File> arrangedFiles = new TreeMap<Integer, File>();\r\n        for (int i = 0; i < files.length; i++) {\r\n            if (files[i].getName().equals(FIELDS_FILE_NAME)) {\r\n                arrangedFiles.put(FIELDS_FILE_KEY, files[i]);\r\n            } else if (files[i].getName().equals(ENUMS_FILE_NAME)) {\r\n                arrangedFiles.put(ENUMS_FILE_KEY, files[i]);\r\n            } else if (files[i].getName().equals(COMPONENTS_FILE_NAME)) {\r\n                arrangedFiles.put(COMPONENTS_FILE_KEY, files[i]);\r\n            } else if (files[i].getName().equals(MSG_TYPE_FILE_NAME)) {\r\n                arrangedFiles.put(MSG_TYPE_FILE_KEY, files[i]);\r\n            } else if (files[i].getName().equals(MSG_CONTENTS_FILE_NAME)) {\r\n                arrangedFiles.put(MSG_CONTENTS_FILE_KEY, files[i]);\r\n            }\r\n        }\r\n        return new ArrayList<File>(arrangedFiles.values());\r\n    }\r\n}\r\n",
		"id": "EvoSuiteBenchmark/74_fixsuite/src/main/java/org/fixsuite/message/LibraryTest.java",
		"test_prompt": "// LibraryTest.java\npackage org.fixsuite.message;\n\nimport java.io.File;\nimport java.text.DecimalFormat;\nimport java.util.ArrayList;\nimport java.util.List;\nimport java.util.Map;\nimport java.util.TreeMap;\nimport org.fixsuite.message.info.DictionaryInfo;\nimport org.fixsuite.message.parsers.fpl.MainParser;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link Library}.\n* It contains ten unit test cases for the {@link Library#loadFromDirectory(String)} method.\n*/\nclass LibraryTest {"
	},
	{
		"original_code": "// FieldInfo.java\n/**\r\n * FieldInfo.java 9:05:06 PM Apr 21, 2008\r\n *\r\n * <PRE>\r\n * Copyright (c) 2008, Jan Amoyo\r\n * All rights reserved.\r\n *\r\n * Redistribution and use in source and binary forms, with or without\r\n * modification, are permitted provided that the following conditions are met:\r\n *\r\n *     - Redistributions of source code must retain the above copyright\r\n *       notice, this list of conditions and the following disclaimer.\r\n *     - Redistributions in binary form must reproduce the above copyright\r\n *       notice, this list of conditions and the following disclaimer in the\r\n *       documentation and/or other materials provided with the distribution.\r\n *\r\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS 'AS IS';\r\n * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\r\n * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\r\n * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDERS AND CONTRIBUTORS\r\n * BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR\r\n * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF\r\n * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS\r\n * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN\r\n * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\r\n * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\r\n * POSSIBILITY OF SUCH DAMAGE.\r\n * </PRE>\r\n */\r\npackage org.fixsuite.message.info;\r\n\r\nimport java.util.ArrayList;\r\nimport java.util.List;\r\nimport java.util.TreeMap;\r\n\r\n/**\r\n * Represents a Field as defined by the FIX specification.\r\n *\r\n * @author jramoyo\r\n */\r\npublic class FieldInfo implements FixInfo {\r\n\r\n    private int tagNumber;\r\n\r\n    private String name;\r\n\r\n    private String dataType;\r\n\r\n    private String description;\r\n\r\n    private String abbreviation;\r\n\r\n    private String overrideXmlName;\r\n\r\n    private String baseCategory;\r\n\r\n    private String baseCategoryXmlName;\r\n\r\n    private String unionDataType;\r\n\r\n    private String usesEnumFromTag;\r\n\r\n    private String comments;\r\n\r\n    private int length;\r\n\r\n    private boolean isNotRequiredXml;\r\n\r\n    private String deprecatingVersion;\r\n\r\n    private List<ComponentInfo> requiringComponents;\r\n\r\n    private TreeMap<String, ValueInfo> validValues;\r\n\r\n    /**\r\n     * Returns the tagNumber\r\n     *\r\n     * @return the tagNumber\r\n     */\r\n    public int getTagNumber() {\r\n        return tagNumber;\r\n    }\r\n\r\n    /**\r\n     * Modifies the tagNumber\r\n     *\r\n     * @param tagNumber - the tagNumber to set\r\n     */\r\n    public void setTagNumber(int tagNumber) {\r\n        this.tagNumber = tagNumber;\r\n    }\r\n\r\n    /**\r\n     * Returns the fieldName\r\n     *\r\n     * @return the fieldName\r\n     */\r\n    public String getName() {\r\n        return name;\r\n    }\r\n\r\n    /**\r\n     * Modifies the fieldName\r\n     *\r\n     * @param name - the fieldName to set\r\n     */\r\n    public void setName(String name) {\r\n        this.name = name;\r\n    }\r\n\r\n    /**\r\n     * Returns the dataType\r\n     *\r\n     * @return the dataType\r\n     */\r\n    public String getDataType() {\r\n        return dataType;\r\n    }\r\n\r\n    /**\r\n     * Modifies the dataType\r\n     *\r\n     * @param dataType - the dataType to set\r\n     */\r\n    public void setDataType(String dataType) {\r\n        this.dataType = dataType;\r\n    }\r\n\r\n    /**\r\n     * Returns the description\r\n     *\r\n     * @return the description\r\n     */\r\n    public String getDescription() {\r\n        return description;\r\n    }\r\n\r\n    /**\r\n     * Modifies the description\r\n     *\r\n     * @param description - the description to set\r\n     */\r\n    public void setDescription(String description) {\r\n        this.description = description;\r\n    }\r\n\r\n    /**\r\n     * Returns the comments\r\n     *\r\n     * @return the comments\r\n     */\r\n    public String getComments() {\r\n        return comments;\r\n    }\r\n\r\n    /**\r\n     * Modifies the comments\r\n     *\r\n     * @param comments - the comments to set\r\n     */\r\n    public void setComments(String comments) {\r\n        this.comments = comments;\r\n    }\r\n\r\n    /**\r\n     * Returns the abbreviation\r\n     *\r\n     * @return the abbreviation\r\n     */\r\n    public String getAbbreviation() {\r\n        return abbreviation;\r\n    }\r\n\r\n    /**\r\n     * Modifies the abbreviation\r\n     *\r\n     * @param abbreviation - the abbreviation to set\r\n     */\r\n    public void setAbbreviation(String abbreviation) {\r\n        this.abbreviation = abbreviation;\r\n    }\r\n\r\n    /**\r\n     * Returns the overrideXmlName\r\n     *\r\n     * @return the overrideXmlName\r\n     */\r\n    public String getOverrideXmlName() {\r\n        return overrideXmlName;\r\n    }\r\n\r\n    /**\r\n     * Modifies the overrideXmlName\r\n     *\r\n     * @param overrideXmlName - the overrideXmlName to set\r\n     */\r\n    public void setOverrideXmlName(String overrideXmlName) {\r\n        this.overrideXmlName = overrideXmlName;\r\n    }\r\n\r\n    /**\r\n     * Returns the baseCategory\r\n     *\r\n     * @return the baseCategory\r\n     */\r\n    public String getBaseCategory() {\r\n        return baseCategory;\r\n    }\r\n\r\n    /**\r\n     * Modifies the baseCategory\r\n     *\r\n     * @param baseCategory - the baseCategory to set\r\n     */\r\n    public void setBaseCategory(String baseCategory) {\r\n        this.baseCategory = baseCategory;\r\n    }\r\n\r\n    /**\r\n     * Returns the baseCategoryXmlName\r\n     *\r\n     * @return the baseCategoryXmlName\r\n     */\r\n    public String getBaseCategoryXmlName() {\r\n        return baseCategoryXmlName;\r\n    }\r\n\r\n    /**\r\n     * Modifies the baseCategoryXmlName\r\n     *\r\n     * @param baseCategoryXmlName - the baseCategoryXmlName to set\r\n     */\r\n    public void setBaseCategoryXmlName(String baseCategoryXmlName) {\r\n        this.baseCategoryXmlName = baseCategoryXmlName;\r\n    }\r\n\r\n    /**\r\n     * Returns the unionDataType\r\n     *\r\n     * @return the unionDataType\r\n     */\r\n    public String getUnionDataType() {\r\n        return unionDataType;\r\n    }\r\n\r\n    /**\r\n     * Modifies the unionDataType\r\n     *\r\n     * @param unionDataType - the unionDataType to set\r\n     */\r\n    public void setUnionDataType(String unionDataType) {\r\n        this.unionDataType = unionDataType;\r\n    }\r\n\r\n    /**\r\n     * Returns the usesEnumFromTag\r\n     *\r\n     * @return the usesEnumFromTag\r\n     */\r\n    public String getUsesEnumFromTag() {\r\n        return usesEnumFromTag;\r\n    }\r\n\r\n    /**\r\n     * Modifies the usesEnumFromTag\r\n     *\r\n     * @param usesEnumFromTag - the usesEnumFromTag to set\r\n     */\r\n    public void setUsesEnumFromTag(String usesEnumFromTag) {\r\n        this.usesEnumFromTag = usesEnumFromTag;\r\n    }\r\n\r\n    /**\r\n     * Returns the length\r\n     *\r\n     * @return the length\r\n     */\r\n    public int getLength() {\r\n        return length;\r\n    }\r\n\r\n    /**\r\n     * Modifies the length\r\n     *\r\n     * @param length - the length to set\r\n     */\r\n    public void setLength(int length) {\r\n        this.length = length;\r\n    }\r\n\r\n    /**\r\n     * Returns the isNotRequiredXml\r\n     *\r\n     * @return the isNotRequiredXml\r\n     */\r\n    public boolean isNotRequiredXml() {\r\n        return isNotRequiredXml;\r\n    }\r\n\r\n    /**\r\n     * Modifies the isNotRequiredXml\r\n     *\r\n     * @param isNotRequiredXml - the isNotRequiredXml to set\r\n     */\r\n    public void setNotRequiredXml(boolean isNotRequiredXml) {\r\n        this.isNotRequiredXml = isNotRequiredXml;\r\n    }\r\n\r\n    /**\r\n     * Returns the deprecatingVersion\r\n     *\r\n     * @return the deprecatingVersion\r\n     */\r\n    public String getDeprecatingVersion() {\r\n        return deprecatingVersion;\r\n    }\r\n\r\n    /**\r\n     * Modifies the deprecatingVersion\r\n     *\r\n     * @param deprecatingVersion - the deprecatingVersion to set\r\n     */\r\n    public void setDeprecatingVersion(String deprecatingVersion) {\r\n        this.deprecatingVersion = deprecatingVersion;\r\n    }\r\n\r\n    /**\r\n     * Returns the requiringComponents\r\n     *\r\n     * @return the requiringComponents\r\n     */\r\n    public List<ComponentInfo> getRequiringComponents() {\r\n        return requiringComponents;\r\n    }\r\n\r\n    /**\r\n     * Add a requiringComponent\r\n     *\r\n     * @param component - a requiringComponent\r\n     */\r\n    public void addRequiringComponent(ComponentInfo component) {\r\n        if (requiringComponents == null) {\r\n            requiringComponents = new ArrayList<ComponentInfo>();\r\n        }\r\n        requiringComponents.add(component);\r\n    }\r\n\r\n    /**\r\n     * Modifies the requiringComponents\r\n     *\r\n     * @param requiringComponents - the requiringComponent to set\r\n     */\r\n    protected void setRequiringComponents(List<ComponentInfo> requiringComponents) {\r\n        this.requiringComponents = requiringComponents;\r\n    }\r\n\r\n    /**\r\n     * Returns whether this field is required in the specified component\r\n     *\r\n     * @param component - a component\r\n     * @return whether this field is required in the specified component\r\n     */\r\n    public boolean isRequiredInComponent(ComponentInfo component) {\r\n        if (requiringComponents != null) {\r\n            return requiringComponents.contains(component);\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Returns the validValues\r\n     *\r\n     * @return the validValues\r\n     */\r\n    public List<ValueInfo> getValidValues() {\r\n        if (validValues != null) {\r\n            return new ArrayList<ValueInfo>(validValues.values());\r\n        } else {\r\n            return null;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Adds a value\r\n     *\r\n     * @param value - a value\r\n     */\r\n    public void addValidValue(ValueInfo value) {\r\n        if (validValues == null) {\r\n            validValues = new TreeMap<String, ValueInfo>();\r\n        }\r\n        validValues.put(value.getValue(), value);\r\n    }\r\n\r\n    /**\r\n     * Returns whether a given value is valid\r\n     *\r\n     * @param value - a value\r\n     * @return whether a given value is valid\r\n     */\r\n    public boolean isValidValue(String value) {\r\n        return validValues.keySet().contains(value);\r\n    }\r\n\r\n    /**\r\n     * Modifies the validValues\r\n     *\r\n     * @param validValues - the validValues to set\r\n     */\r\n    protected void setValidValues(TreeMap<String, ValueInfo> validValues) {\r\n        this.validValues = validValues;\r\n    }\r\n\r\n    /**\r\n     * Returns the validValues Map\r\n     *\r\n     * @return the validValues Map\r\n     */\r\n    protected TreeMap<String, ValueInfo> getValidValuesMap() {\r\n        return validValues;\r\n    }\r\n}\r\n",
		"id": "EvoSuiteBenchmark/74_fixsuite/src/main/java/org/fixsuite/message/info/FieldInfoTest0.java",
		"test_prompt": "// FieldInfoTest0.java\npackage org.fixsuite.message.info;\n\nimport java.util.ArrayList;\nimport java.util.List;\nimport java.util.TreeMap;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link FieldInfo}.\n* It contains ten unit test cases for the {@link FieldInfo#isNotRequiredXml()} method.\n*/\nclass FieldInfoTest0 {"
	},
	{
		"original_code": "// FieldInfo.java\n/**\r\n * FieldInfo.java 9:05:06 PM Apr 21, 2008\r\n *\r\n * <PRE>\r\n * Copyright (c) 2008, Jan Amoyo\r\n * All rights reserved.\r\n *\r\n * Redistribution and use in source and binary forms, with or without\r\n * modification, are permitted provided that the following conditions are met:\r\n *\r\n *     - Redistributions of source code must retain the above copyright\r\n *       notice, this list of conditions and the following disclaimer.\r\n *     - Redistributions in binary form must reproduce the above copyright\r\n *       notice, this list of conditions and the following disclaimer in the\r\n *       documentation and/or other materials provided with the distribution.\r\n *\r\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS 'AS IS';\r\n * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\r\n * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\r\n * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDERS AND CONTRIBUTORS\r\n * BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR\r\n * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF\r\n * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS\r\n * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN\r\n * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\r\n * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\r\n * POSSIBILITY OF SUCH DAMAGE.\r\n * </PRE>\r\n */\r\npackage org.fixsuite.message.info;\r\n\r\nimport java.util.ArrayList;\r\nimport java.util.List;\r\nimport java.util.TreeMap;\r\n\r\n/**\r\n * Represents a Field as defined by the FIX specification.\r\n *\r\n * @author jramoyo\r\n */\r\npublic class FieldInfo implements FixInfo {\r\n\r\n    private int tagNumber;\r\n\r\n    private String name;\r\n\r\n    private String dataType;\r\n\r\n    private String description;\r\n\r\n    private String abbreviation;\r\n\r\n    private String overrideXmlName;\r\n\r\n    private String baseCategory;\r\n\r\n    private String baseCategoryXmlName;\r\n\r\n    private String unionDataType;\r\n\r\n    private String usesEnumFromTag;\r\n\r\n    private String comments;\r\n\r\n    private int length;\r\n\r\n    private boolean isNotRequiredXml;\r\n\r\n    private String deprecatingVersion;\r\n\r\n    private List<ComponentInfo> requiringComponents;\r\n\r\n    private TreeMap<String, ValueInfo> validValues;\r\n\r\n    /**\r\n     * Returns the tagNumber\r\n     *\r\n     * @return the tagNumber\r\n     */\r\n    public int getTagNumber() {\r\n        return tagNumber;\r\n    }\r\n\r\n    /**\r\n     * Modifies the tagNumber\r\n     *\r\n     * @param tagNumber - the tagNumber to set\r\n     */\r\n    public void setTagNumber(int tagNumber) {\r\n        this.tagNumber = tagNumber;\r\n    }\r\n\r\n    /**\r\n     * Returns the fieldName\r\n     *\r\n     * @return the fieldName\r\n     */\r\n    public String getName() {\r\n        return name;\r\n    }\r\n\r\n    /**\r\n     * Modifies the fieldName\r\n     *\r\n     * @param name - the fieldName to set\r\n     */\r\n    public void setName(String name) {\r\n        this.name = name;\r\n    }\r\n\r\n    /**\r\n     * Returns the dataType\r\n     *\r\n     * @return the dataType\r\n     */\r\n    public String getDataType() {\r\n        return dataType;\r\n    }\r\n\r\n    /**\r\n     * Modifies the dataType\r\n     *\r\n     * @param dataType - the dataType to set\r\n     */\r\n    public void setDataType(String dataType) {\r\n        this.dataType = dataType;\r\n    }\r\n\r\n    /**\r\n     * Returns the description\r\n     *\r\n     * @return the description\r\n     */\r\n    public String getDescription() {\r\n        return description;\r\n    }\r\n\r\n    /**\r\n     * Modifies the description\r\n     *\r\n     * @param description - the description to set\r\n     */\r\n    public void setDescription(String description) {\r\n        this.description = description;\r\n    }\r\n\r\n    /**\r\n     * Returns the comments\r\n     *\r\n     * @return the comments\r\n     */\r\n    public String getComments() {\r\n        return comments;\r\n    }\r\n\r\n    /**\r\n     * Modifies the comments\r\n     *\r\n     * @param comments - the comments to set\r\n     */\r\n    public void setComments(String comments) {\r\n        this.comments = comments;\r\n    }\r\n\r\n    /**\r\n     * Returns the abbreviation\r\n     *\r\n     * @return the abbreviation\r\n     */\r\n    public String getAbbreviation() {\r\n        return abbreviation;\r\n    }\r\n\r\n    /**\r\n     * Modifies the abbreviation\r\n     *\r\n     * @param abbreviation - the abbreviation to set\r\n     */\r\n    public void setAbbreviation(String abbreviation) {\r\n        this.abbreviation = abbreviation;\r\n    }\r\n\r\n    /**\r\n     * Returns the overrideXmlName\r\n     *\r\n     * @return the overrideXmlName\r\n     */\r\n    public String getOverrideXmlName() {\r\n        return overrideXmlName;\r\n    }\r\n\r\n    /**\r\n     * Modifies the overrideXmlName\r\n     *\r\n     * @param overrideXmlName - the overrideXmlName to set\r\n     */\r\n    public void setOverrideXmlName(String overrideXmlName) {\r\n        this.overrideXmlName = overrideXmlName;\r\n    }\r\n\r\n    /**\r\n     * Returns the baseCategory\r\n     *\r\n     * @return the baseCategory\r\n     */\r\n    public String getBaseCategory() {\r\n        return baseCategory;\r\n    }\r\n\r\n    /**\r\n     * Modifies the baseCategory\r\n     *\r\n     * @param baseCategory - the baseCategory to set\r\n     */\r\n    public void setBaseCategory(String baseCategory) {\r\n        this.baseCategory = baseCategory;\r\n    }\r\n\r\n    /**\r\n     * Returns the baseCategoryXmlName\r\n     *\r\n     * @return the baseCategoryXmlName\r\n     */\r\n    public String getBaseCategoryXmlName() {\r\n        return baseCategoryXmlName;\r\n    }\r\n\r\n    /**\r\n     * Modifies the baseCategoryXmlName\r\n     *\r\n     * @param baseCategoryXmlName - the baseCategoryXmlName to set\r\n     */\r\n    public void setBaseCategoryXmlName(String baseCategoryXmlName) {\r\n        this.baseCategoryXmlName = baseCategoryXmlName;\r\n    }\r\n\r\n    /**\r\n     * Returns the unionDataType\r\n     *\r\n     * @return the unionDataType\r\n     */\r\n    public String getUnionDataType() {\r\n        return unionDataType;\r\n    }\r\n\r\n    /**\r\n     * Modifies the unionDataType\r\n     *\r\n     * @param unionDataType - the unionDataType to set\r\n     */\r\n    public void setUnionDataType(String unionDataType) {\r\n        this.unionDataType = unionDataType;\r\n    }\r\n\r\n    /**\r\n     * Returns the usesEnumFromTag\r\n     *\r\n     * @return the usesEnumFromTag\r\n     */\r\n    public String getUsesEnumFromTag() {\r\n        return usesEnumFromTag;\r\n    }\r\n\r\n    /**\r\n     * Modifies the usesEnumFromTag\r\n     *\r\n     * @param usesEnumFromTag - the usesEnumFromTag to set\r\n     */\r\n    public void setUsesEnumFromTag(String usesEnumFromTag) {\r\n        this.usesEnumFromTag = usesEnumFromTag;\r\n    }\r\n\r\n    /**\r\n     * Returns the length\r\n     *\r\n     * @return the length\r\n     */\r\n    public int getLength() {\r\n        return length;\r\n    }\r\n\r\n    /**\r\n     * Modifies the length\r\n     *\r\n     * @param length - the length to set\r\n     */\r\n    public void setLength(int length) {\r\n        this.length = length;\r\n    }\r\n\r\n    /**\r\n     * Returns the isNotRequiredXml\r\n     *\r\n     * @return the isNotRequiredXml\r\n     */\r\n    public boolean isNotRequiredXml() {\r\n        return isNotRequiredXml;\r\n    }\r\n\r\n    /**\r\n     * Modifies the isNotRequiredXml\r\n     *\r\n     * @param isNotRequiredXml - the isNotRequiredXml to set\r\n     */\r\n    public void setNotRequiredXml(boolean isNotRequiredXml) {\r\n        this.isNotRequiredXml = isNotRequiredXml;\r\n    }\r\n\r\n    /**\r\n     * Returns the deprecatingVersion\r\n     *\r\n     * @return the deprecatingVersion\r\n     */\r\n    public String getDeprecatingVersion() {\r\n        return deprecatingVersion;\r\n    }\r\n\r\n    /**\r\n     * Modifies the deprecatingVersion\r\n     *\r\n     * @param deprecatingVersion - the deprecatingVersion to set\r\n     */\r\n    public void setDeprecatingVersion(String deprecatingVersion) {\r\n        this.deprecatingVersion = deprecatingVersion;\r\n    }\r\n\r\n    /**\r\n     * Returns the requiringComponents\r\n     *\r\n     * @return the requiringComponents\r\n     */\r\n    public List<ComponentInfo> getRequiringComponents() {\r\n        return requiringComponents;\r\n    }\r\n\r\n    /**\r\n     * Add a requiringComponent\r\n     *\r\n     * @param component - a requiringComponent\r\n     */\r\n    public void addRequiringComponent(ComponentInfo component) {\r\n        if (requiringComponents == null) {\r\n            requiringComponents = new ArrayList<ComponentInfo>();\r\n        }\r\n        requiringComponents.add(component);\r\n    }\r\n\r\n    /**\r\n     * Modifies the requiringComponents\r\n     *\r\n     * @param requiringComponents - the requiringComponent to set\r\n     */\r\n    protected void setRequiringComponents(List<ComponentInfo> requiringComponents) {\r\n        this.requiringComponents = requiringComponents;\r\n    }\r\n\r\n    /**\r\n     * Returns whether this field is required in the specified component\r\n     *\r\n     * @param component - a component\r\n     * @return whether this field is required in the specified component\r\n     */\r\n    public boolean isRequiredInComponent(ComponentInfo component) {\r\n        if (requiringComponents != null) {\r\n            return requiringComponents.contains(component);\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Returns the validValues\r\n     *\r\n     * @return the validValues\r\n     */\r\n    public List<ValueInfo> getValidValues() {\r\n        if (validValues != null) {\r\n            return new ArrayList<ValueInfo>(validValues.values());\r\n        } else {\r\n            return null;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Adds a value\r\n     *\r\n     * @param value - a value\r\n     */\r\n    public void addValidValue(ValueInfo value) {\r\n        if (validValues == null) {\r\n            validValues = new TreeMap<String, ValueInfo>();\r\n        }\r\n        validValues.put(value.getValue(), value);\r\n    }\r\n\r\n    /**\r\n     * Returns whether a given value is valid\r\n     *\r\n     * @param value - a value\r\n     * @return whether a given value is valid\r\n     */\r\n    public boolean isValidValue(String value) {\r\n        return validValues.keySet().contains(value);\r\n    }\r\n\r\n    /**\r\n     * Modifies the validValues\r\n     *\r\n     * @param validValues - the validValues to set\r\n     */\r\n    protected void setValidValues(TreeMap<String, ValueInfo> validValues) {\r\n        this.validValues = validValues;\r\n    }\r\n\r\n    /**\r\n     * Returns the validValues Map\r\n     *\r\n     * @return the validValues Map\r\n     */\r\n    protected TreeMap<String, ValueInfo> getValidValuesMap() {\r\n        return validValues;\r\n    }\r\n}\r\n",
		"id": "EvoSuiteBenchmark/74_fixsuite/src/main/java/org/fixsuite/message/info/FieldInfoTest1.java",
		"test_prompt": "// FieldInfoTest1.java\npackage org.fixsuite.message.info;\n\nimport java.util.ArrayList;\nimport java.util.List;\nimport java.util.TreeMap;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link FieldInfo}.\n* It contains ten unit test cases for the {@link FieldInfo#isRequiredInComponent(ComponentInfo)} method.\n*/\nclass FieldInfoTest1 {"
	},
	{
		"original_code": "// FieldInfo.java\n/**\r\n * FieldInfo.java 9:05:06 PM Apr 21, 2008\r\n *\r\n * <PRE>\r\n * Copyright (c) 2008, Jan Amoyo\r\n * All rights reserved.\r\n *\r\n * Redistribution and use in source and binary forms, with or without\r\n * modification, are permitted provided that the following conditions are met:\r\n *\r\n *     - Redistributions of source code must retain the above copyright\r\n *       notice, this list of conditions and the following disclaimer.\r\n *     - Redistributions in binary form must reproduce the above copyright\r\n *       notice, this list of conditions and the following disclaimer in the\r\n *       documentation and/or other materials provided with the distribution.\r\n *\r\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS 'AS IS';\r\n * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\r\n * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\r\n * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDERS AND CONTRIBUTORS\r\n * BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR\r\n * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF\r\n * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS\r\n * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN\r\n * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\r\n * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\r\n * POSSIBILITY OF SUCH DAMAGE.\r\n * </PRE>\r\n */\r\npackage org.fixsuite.message.info;\r\n\r\nimport java.util.ArrayList;\r\nimport java.util.List;\r\nimport java.util.TreeMap;\r\n\r\n/**\r\n * Represents a Field as defined by the FIX specification.\r\n *\r\n * @author jramoyo\r\n */\r\npublic class FieldInfo implements FixInfo {\r\n\r\n    private int tagNumber;\r\n\r\n    private String name;\r\n\r\n    private String dataType;\r\n\r\n    private String description;\r\n\r\n    private String abbreviation;\r\n\r\n    private String overrideXmlName;\r\n\r\n    private String baseCategory;\r\n\r\n    private String baseCategoryXmlName;\r\n\r\n    private String unionDataType;\r\n\r\n    private String usesEnumFromTag;\r\n\r\n    private String comments;\r\n\r\n    private int length;\r\n\r\n    private boolean isNotRequiredXml;\r\n\r\n    private String deprecatingVersion;\r\n\r\n    private List<ComponentInfo> requiringComponents;\r\n\r\n    private TreeMap<String, ValueInfo> validValues;\r\n\r\n    /**\r\n     * Returns the tagNumber\r\n     *\r\n     * @return the tagNumber\r\n     */\r\n    public int getTagNumber() {\r\n        return tagNumber;\r\n    }\r\n\r\n    /**\r\n     * Modifies the tagNumber\r\n     *\r\n     * @param tagNumber - the tagNumber to set\r\n     */\r\n    public void setTagNumber(int tagNumber) {\r\n        this.tagNumber = tagNumber;\r\n    }\r\n\r\n    /**\r\n     * Returns the fieldName\r\n     *\r\n     * @return the fieldName\r\n     */\r\n    public String getName() {\r\n        return name;\r\n    }\r\n\r\n    /**\r\n     * Modifies the fieldName\r\n     *\r\n     * @param name - the fieldName to set\r\n     */\r\n    public void setName(String name) {\r\n        this.name = name;\r\n    }\r\n\r\n    /**\r\n     * Returns the dataType\r\n     *\r\n     * @return the dataType\r\n     */\r\n    public String getDataType() {\r\n        return dataType;\r\n    }\r\n\r\n    /**\r\n     * Modifies the dataType\r\n     *\r\n     * @param dataType - the dataType to set\r\n     */\r\n    public void setDataType(String dataType) {\r\n        this.dataType = dataType;\r\n    }\r\n\r\n    /**\r\n     * Returns the description\r\n     *\r\n     * @return the description\r\n     */\r\n    public String getDescription() {\r\n        return description;\r\n    }\r\n\r\n    /**\r\n     * Modifies the description\r\n     *\r\n     * @param description - the description to set\r\n     */\r\n    public void setDescription(String description) {\r\n        this.description = description;\r\n    }\r\n\r\n    /**\r\n     * Returns the comments\r\n     *\r\n     * @return the comments\r\n     */\r\n    public String getComments() {\r\n        return comments;\r\n    }\r\n\r\n    /**\r\n     * Modifies the comments\r\n     *\r\n     * @param comments - the comments to set\r\n     */\r\n    public void setComments(String comments) {\r\n        this.comments = comments;\r\n    }\r\n\r\n    /**\r\n     * Returns the abbreviation\r\n     *\r\n     * @return the abbreviation\r\n     */\r\n    public String getAbbreviation() {\r\n        return abbreviation;\r\n    }\r\n\r\n    /**\r\n     * Modifies the abbreviation\r\n     *\r\n     * @param abbreviation - the abbreviation to set\r\n     */\r\n    public void setAbbreviation(String abbreviation) {\r\n        this.abbreviation = abbreviation;\r\n    }\r\n\r\n    /**\r\n     * Returns the overrideXmlName\r\n     *\r\n     * @return the overrideXmlName\r\n     */\r\n    public String getOverrideXmlName() {\r\n        return overrideXmlName;\r\n    }\r\n\r\n    /**\r\n     * Modifies the overrideXmlName\r\n     *\r\n     * @param overrideXmlName - the overrideXmlName to set\r\n     */\r\n    public void setOverrideXmlName(String overrideXmlName) {\r\n        this.overrideXmlName = overrideXmlName;\r\n    }\r\n\r\n    /**\r\n     * Returns the baseCategory\r\n     *\r\n     * @return the baseCategory\r\n     */\r\n    public String getBaseCategory() {\r\n        return baseCategory;\r\n    }\r\n\r\n    /**\r\n     * Modifies the baseCategory\r\n     *\r\n     * @param baseCategory - the baseCategory to set\r\n     */\r\n    public void setBaseCategory(String baseCategory) {\r\n        this.baseCategory = baseCategory;\r\n    }\r\n\r\n    /**\r\n     * Returns the baseCategoryXmlName\r\n     *\r\n     * @return the baseCategoryXmlName\r\n     */\r\n    public String getBaseCategoryXmlName() {\r\n        return baseCategoryXmlName;\r\n    }\r\n\r\n    /**\r\n     * Modifies the baseCategoryXmlName\r\n     *\r\n     * @param baseCategoryXmlName - the baseCategoryXmlName to set\r\n     */\r\n    public void setBaseCategoryXmlName(String baseCategoryXmlName) {\r\n        this.baseCategoryXmlName = baseCategoryXmlName;\r\n    }\r\n\r\n    /**\r\n     * Returns the unionDataType\r\n     *\r\n     * @return the unionDataType\r\n     */\r\n    public String getUnionDataType() {\r\n        return unionDataType;\r\n    }\r\n\r\n    /**\r\n     * Modifies the unionDataType\r\n     *\r\n     * @param unionDataType - the unionDataType to set\r\n     */\r\n    public void setUnionDataType(String unionDataType) {\r\n        this.unionDataType = unionDataType;\r\n    }\r\n\r\n    /**\r\n     * Returns the usesEnumFromTag\r\n     *\r\n     * @return the usesEnumFromTag\r\n     */\r\n    public String getUsesEnumFromTag() {\r\n        return usesEnumFromTag;\r\n    }\r\n\r\n    /**\r\n     * Modifies the usesEnumFromTag\r\n     *\r\n     * @param usesEnumFromTag - the usesEnumFromTag to set\r\n     */\r\n    public void setUsesEnumFromTag(String usesEnumFromTag) {\r\n        this.usesEnumFromTag = usesEnumFromTag;\r\n    }\r\n\r\n    /**\r\n     * Returns the length\r\n     *\r\n     * @return the length\r\n     */\r\n    public int getLength() {\r\n        return length;\r\n    }\r\n\r\n    /**\r\n     * Modifies the length\r\n     *\r\n     * @param length - the length to set\r\n     */\r\n    public void setLength(int length) {\r\n        this.length = length;\r\n    }\r\n\r\n    /**\r\n     * Returns the isNotRequiredXml\r\n     *\r\n     * @return the isNotRequiredXml\r\n     */\r\n    public boolean isNotRequiredXml() {\r\n        return isNotRequiredXml;\r\n    }\r\n\r\n    /**\r\n     * Modifies the isNotRequiredXml\r\n     *\r\n     * @param isNotRequiredXml - the isNotRequiredXml to set\r\n     */\r\n    public void setNotRequiredXml(boolean isNotRequiredXml) {\r\n        this.isNotRequiredXml = isNotRequiredXml;\r\n    }\r\n\r\n    /**\r\n     * Returns the deprecatingVersion\r\n     *\r\n     * @return the deprecatingVersion\r\n     */\r\n    public String getDeprecatingVersion() {\r\n        return deprecatingVersion;\r\n    }\r\n\r\n    /**\r\n     * Modifies the deprecatingVersion\r\n     *\r\n     * @param deprecatingVersion - the deprecatingVersion to set\r\n     */\r\n    public void setDeprecatingVersion(String deprecatingVersion) {\r\n        this.deprecatingVersion = deprecatingVersion;\r\n    }\r\n\r\n    /**\r\n     * Returns the requiringComponents\r\n     *\r\n     * @return the requiringComponents\r\n     */\r\n    public List<ComponentInfo> getRequiringComponents() {\r\n        return requiringComponents;\r\n    }\r\n\r\n    /**\r\n     * Add a requiringComponent\r\n     *\r\n     * @param component - a requiringComponent\r\n     */\r\n    public void addRequiringComponent(ComponentInfo component) {\r\n        if (requiringComponents == null) {\r\n            requiringComponents = new ArrayList<ComponentInfo>();\r\n        }\r\n        requiringComponents.add(component);\r\n    }\r\n\r\n    /**\r\n     * Modifies the requiringComponents\r\n     *\r\n     * @param requiringComponents - the requiringComponent to set\r\n     */\r\n    protected void setRequiringComponents(List<ComponentInfo> requiringComponents) {\r\n        this.requiringComponents = requiringComponents;\r\n    }\r\n\r\n    /**\r\n     * Returns whether this field is required in the specified component\r\n     *\r\n     * @param component - a component\r\n     * @return whether this field is required in the specified component\r\n     */\r\n    public boolean isRequiredInComponent(ComponentInfo component) {\r\n        if (requiringComponents != null) {\r\n            return requiringComponents.contains(component);\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Returns the validValues\r\n     *\r\n     * @return the validValues\r\n     */\r\n    public List<ValueInfo> getValidValues() {\r\n        if (validValues != null) {\r\n            return new ArrayList<ValueInfo>(validValues.values());\r\n        } else {\r\n            return null;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Adds a value\r\n     *\r\n     * @param value - a value\r\n     */\r\n    public void addValidValue(ValueInfo value) {\r\n        if (validValues == null) {\r\n            validValues = new TreeMap<String, ValueInfo>();\r\n        }\r\n        validValues.put(value.getValue(), value);\r\n    }\r\n\r\n    /**\r\n     * Returns whether a given value is valid\r\n     *\r\n     * @param value - a value\r\n     * @return whether a given value is valid\r\n     */\r\n    public boolean isValidValue(String value) {\r\n        return validValues.keySet().contains(value);\r\n    }\r\n\r\n    /**\r\n     * Modifies the validValues\r\n     *\r\n     * @param validValues - the validValues to set\r\n     */\r\n    protected void setValidValues(TreeMap<String, ValueInfo> validValues) {\r\n        this.validValues = validValues;\r\n    }\r\n\r\n    /**\r\n     * Returns the validValues Map\r\n     *\r\n     * @return the validValues Map\r\n     */\r\n    protected TreeMap<String, ValueInfo> getValidValuesMap() {\r\n        return validValues;\r\n    }\r\n}\r\n",
		"id": "EvoSuiteBenchmark/74_fixsuite/src/main/java/org/fixsuite/message/info/FieldInfoTest2.java",
		"test_prompt": "// FieldInfoTest2.java\npackage org.fixsuite.message.info;\n\nimport java.util.ArrayList;\nimport java.util.List;\nimport java.util.TreeMap;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link FieldInfo}.\n* It contains ten unit test cases for the {@link FieldInfo#isValidValue(String)} method.\n*/\nclass FieldInfoTest2 {"
	},
	{
		"original_code": "// ComponentInfo.java\n/**\r\n * ComponentInfo.java 10:36:09 PM Apr 21, 2008\r\n *\r\n * <PRE>\r\n * Copyright (c) 2008, Jan Amoyo\r\n * All rights reserved.\r\n *\r\n * Redistribution and use in source and binary forms, with or without\r\n * modification, are permitted provided that the following conditions are met:\r\n *\r\n *     - Redistributions of source code must retain the above copyright\r\n *       notice, this list of conditions and the following disclaimer.\r\n *     - Redistributions in binary form must reproduce the above copyright\r\n *       notice, this list of conditions and the following disclaimer in the\r\n *       documentation and/or other materials provided with the distribution.\r\n *\r\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS 'AS IS';\r\n * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\r\n * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\r\n * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDERS AND CONTRIBUTORS\r\n * BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR\r\n * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF\r\n * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS\r\n * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN\r\n * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\r\n * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\r\n * POSSIBILITY OF SUCH DAMAGE.\r\n * </PRE>\r\n */\r\npackage org.fixsuite.message.info;\r\n\r\nimport java.util.ArrayList;\r\nimport java.util.HashMap;\r\nimport java.util.List;\r\nimport java.util.TreeMap;\r\n\r\n/**\r\n * Represents a Component as defined by the FIX specification.\r\n *\r\n * @author jramoyo\r\n */\r\npublic class ComponentInfo implements CompositeFixInfo {\r\n\r\n    private String name;\r\n\r\n    private String componentType;\r\n\r\n    private String category;\r\n\r\n    private int id;\r\n\r\n    private String abbreviation;\r\n\r\n    private boolean isNotRequiredXml;\r\n\r\n    private boolean isRequired;\r\n\r\n    // Default collection\r\n    private TreeMap<Double, FixInfo> itemsByPosition;\r\n\r\n    private HashMap<FixInfo, Double> itemsByContent;\r\n\r\n    // Default collection\r\n    private TreeMap<Integer, FieldInfo> fieldsByTagNumber;\r\n\r\n    private TreeMap<String, FieldInfo> fieldsByName;\r\n\r\n    // Default collection\r\n    private TreeMap<String, ComponentInfo> componentsByName;\r\n\r\n    private TreeMap<Integer, ComponentInfo> componentsById;\r\n\r\n    /**\r\n     * @see org.fixsuite.message.info.CompositeFixInfo#getFields()\r\n     */\r\n    public List<FieldInfo> getFields() {\r\n        if (fieldsByTagNumber != null) {\r\n            return new ArrayList<FieldInfo>(fieldsByTagNumber.values());\r\n        }\r\n        return null;\r\n    }\r\n\r\n    /**\r\n     * @see org.fixsuite.message.info.CompositeFixInfo#getField(int)\r\n     */\r\n    public FieldInfo getField(int tagNumber) {\r\n        if (fieldsByTagNumber != null) {\r\n            return fieldsByTagNumber.get(tagNumber);\r\n        }\r\n        return null;\r\n    }\r\n\r\n    /**\r\n     * @see org.fixsuite.message.info.CompositeFixInfo#getField(java.lang.String)\r\n     */\r\n    public FieldInfo getField(String name) {\r\n        if (fieldsByName != null) {\r\n            return fieldsByName.get(name);\r\n        }\r\n        return null;\r\n    }\r\n\r\n    /**\r\n     * @see org.fixsuite.message.info.CompositeFixInfo#addField(org.fixsuite.message.info.FieldInfo,\r\n     *      double)\r\n     */\r\n    public void addField(FieldInfo field, double position) {\r\n        if (fieldsByTagNumber == null) {\r\n            fieldsByTagNumber = new TreeMap<Integer, FieldInfo>();\r\n            fieldsByName = new TreeMap<String, FieldInfo>();\r\n        }\r\n        fieldsByTagNumber.put(field.getTagNumber(), field);\r\n        fieldsByName.put(field.getName(), field);\r\n        addItem(field, position);\r\n    }\r\n\r\n    /**\r\n     * @see org.fixsuite.message.info.CompositeFixInfo#getComponents()\r\n     */\r\n    public List<ComponentInfo> getComponents() {\r\n        if (componentsByName != null) {\r\n            return new ArrayList<ComponentInfo>(componentsByName.values());\r\n        }\r\n        return null;\r\n    }\r\n\r\n    /**\r\n     * @see org.fixsuite.message.info.CompositeFixInfo#getComponent(int)\r\n     */\r\n    public ComponentInfo getComponent(int id) {\r\n        if (componentsById != null) {\r\n            return componentsById.get(id);\r\n        }\r\n        return null;\r\n    }\r\n\r\n    /**\r\n     * @see org.fixsuite.message.info.CompositeFixInfo#getComponent(java.lang.String)\r\n     */\r\n    public ComponentInfo getComponent(String name) {\r\n        if (componentsByName != null) {\r\n            return componentsByName.get(name);\r\n        }\r\n        return null;\r\n    }\r\n\r\n    /**\r\n     * @see org.fixsuite.message.info.CompositeFixInfo#addComponent(org.fixsuite.message.info.ComponentInfo,\r\n     *      double)\r\n     */\r\n    public void addComponent(ComponentInfo component, double position) {\r\n        if (componentsByName == null) {\r\n            componentsByName = new TreeMap<String, ComponentInfo>();\r\n            componentsById = new TreeMap<Integer, ComponentInfo>();\r\n        }\r\n        componentsByName.put(component.getName(), component);\r\n        componentsById.put(component.getId(), component);\r\n        addItem(component, position);\r\n    }\r\n\r\n    /**\r\n     * @see org.fixsuite.message.info.CompositeFixInfo#getItems()\r\n     */\r\n    public List<FixInfo> getItems() {\r\n        if (itemsByPosition != null) {\r\n            return new ArrayList<FixInfo>(itemsByPosition.values());\r\n        }\r\n        return null;\r\n    }\r\n\r\n    /**\r\n     * @see org.fixsuite.message.info.CompositeFixInfo#replaceAsGroup(org.fixsuite.message.info.FieldInfo,\r\n     *      org.fixsuite.message.info.GroupInfo)\r\n     */\r\n    public void replaceAsGroup(FieldInfo field, GroupInfo group) {\r\n        fieldsByTagNumber.put(field.getTagNumber(), group);\r\n        fieldsByName.put(field.getName(), group);\r\n        double position = itemsByContent.get(field);\r\n        itemsByContent.remove(field);\r\n        itemsByContent.put(group, position);\r\n        itemsByPosition.put(position, group);\r\n    }\r\n\r\n    /**\r\n     * Returns the name\r\n     *\r\n     * @return the name\r\n     */\r\n    public String getName() {\r\n        return name;\r\n    }\r\n\r\n    /**\r\n     * Modifies the name\r\n     *\r\n     * @param name - the name to set\r\n     */\r\n    public void setName(String name) {\r\n        this.name = name;\r\n    }\r\n\r\n    /**\r\n     * Returns the componentType\r\n     *\r\n     * @return the componentType\r\n     */\r\n    public String getComponentType() {\r\n        return componentType;\r\n    }\r\n\r\n    /**\r\n     * Modifies the componentType\r\n     *\r\n     * @param componentType - the componentType to set\r\n     */\r\n    public void setComponentType(String componentType) {\r\n        this.componentType = componentType;\r\n    }\r\n\r\n    /**\r\n     * Returns the category\r\n     *\r\n     * @return the category\r\n     */\r\n    public String getCategory() {\r\n        return category;\r\n    }\r\n\r\n    /**\r\n     * Modifies the category\r\n     *\r\n     * @param category - the category to set\r\n     */\r\n    public void setCategory(String category) {\r\n        this.category = category;\r\n    }\r\n\r\n    /**\r\n     * Returns the id\r\n     *\r\n     * @return the id\r\n     */\r\n    public int getId() {\r\n        return id;\r\n    }\r\n\r\n    /**\r\n     * Modifies the id\r\n     *\r\n     * @param id - the id to set\r\n     */\r\n    public void setId(int id) {\r\n        this.id = id;\r\n    }\r\n\r\n    /**\r\n     * Returns the abbreviation\r\n     *\r\n     * @return the abbreviation\r\n     */\r\n    public String getAbbreviation() {\r\n        return abbreviation;\r\n    }\r\n\r\n    /**\r\n     * Modifies the abbreviation\r\n     *\r\n     * @param abbreviation - the abbreviation to set\r\n     */\r\n    public void setAbbreviation(String abbreviation) {\r\n        this.abbreviation = abbreviation;\r\n    }\r\n\r\n    /**\r\n     * Returns the isNotRequiredXml\r\n     *\r\n     * @return the isNotRequiredXml\r\n     */\r\n    public boolean isNotRequiredXml() {\r\n        return isNotRequiredXml;\r\n    }\r\n\r\n    /**\r\n     * Modifies the isNotRequiredXml\r\n     *\r\n     * @param isNotRequiredXml - the isNotRequiredXml to set\r\n     */\r\n    public void setNotRequiredXml(boolean isNotRequiredXml) {\r\n        this.isNotRequiredXml = isNotRequiredXml;\r\n    }\r\n\r\n    /**\r\n     * Returns the isRequired\r\n     *\r\n     * @return the isRequired\r\n     */\r\n    public boolean isRequired() {\r\n        return isRequired;\r\n    }\r\n\r\n    /**\r\n     * Modifies the isRequired\r\n     *\r\n     * @param isRequired - the isRequired to set\r\n     */\r\n    public void setRequired(boolean isRequired) {\r\n        this.isRequired = isRequired;\r\n    }\r\n\r\n    private void addItem(FixInfo item, double position) {\r\n        if (itemsByPosition == null) {\r\n            itemsByPosition = new TreeMap<Double, FixInfo>();\r\n            itemsByContent = new HashMap<FixInfo, Double>();\r\n        }\r\n        itemsByPosition.put(position, item);\r\n        itemsByContent.put(item, position);\r\n    }\r\n}\r\n",
		"id": "EvoSuiteBenchmark/74_fixsuite/src/main/java/org/fixsuite/message/info/ComponentInfoTest0.java",
		"test_prompt": "// ComponentInfoTest0.java\npackage org.fixsuite.message.info;\n\nimport java.util.ArrayList;\nimport java.util.HashMap;\nimport java.util.List;\nimport java.util.TreeMap;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link ComponentInfo}.\n* It contains ten unit test cases for the {@link ComponentInfo#isNotRequiredXml()} method.\n*/\nclass ComponentInfoTest0 {"
	},
	{
		"original_code": "// ComponentInfo.java\n/**\r\n * ComponentInfo.java 10:36:09 PM Apr 21, 2008\r\n *\r\n * <PRE>\r\n * Copyright (c) 2008, Jan Amoyo\r\n * All rights reserved.\r\n *\r\n * Redistribution and use in source and binary forms, with or without\r\n * modification, are permitted provided that the following conditions are met:\r\n *\r\n *     - Redistributions of source code must retain the above copyright\r\n *       notice, this list of conditions and the following disclaimer.\r\n *     - Redistributions in binary form must reproduce the above copyright\r\n *       notice, this list of conditions and the following disclaimer in the\r\n *       documentation and/or other materials provided with the distribution.\r\n *\r\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS 'AS IS';\r\n * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\r\n * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\r\n * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDERS AND CONTRIBUTORS\r\n * BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR\r\n * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF\r\n * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS\r\n * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN\r\n * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\r\n * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\r\n * POSSIBILITY OF SUCH DAMAGE.\r\n * </PRE>\r\n */\r\npackage org.fixsuite.message.info;\r\n\r\nimport java.util.ArrayList;\r\nimport java.util.HashMap;\r\nimport java.util.List;\r\nimport java.util.TreeMap;\r\n\r\n/**\r\n * Represents a Component as defined by the FIX specification.\r\n *\r\n * @author jramoyo\r\n */\r\npublic class ComponentInfo implements CompositeFixInfo {\r\n\r\n    private String name;\r\n\r\n    private String componentType;\r\n\r\n    private String category;\r\n\r\n    private int id;\r\n\r\n    private String abbreviation;\r\n\r\n    private boolean isNotRequiredXml;\r\n\r\n    private boolean isRequired;\r\n\r\n    // Default collection\r\n    private TreeMap<Double, FixInfo> itemsByPosition;\r\n\r\n    private HashMap<FixInfo, Double> itemsByContent;\r\n\r\n    // Default collection\r\n    private TreeMap<Integer, FieldInfo> fieldsByTagNumber;\r\n\r\n    private TreeMap<String, FieldInfo> fieldsByName;\r\n\r\n    // Default collection\r\n    private TreeMap<String, ComponentInfo> componentsByName;\r\n\r\n    private TreeMap<Integer, ComponentInfo> componentsById;\r\n\r\n    /**\r\n     * @see org.fixsuite.message.info.CompositeFixInfo#getFields()\r\n     */\r\n    public List<FieldInfo> getFields() {\r\n        if (fieldsByTagNumber != null) {\r\n            return new ArrayList<FieldInfo>(fieldsByTagNumber.values());\r\n        }\r\n        return null;\r\n    }\r\n\r\n    /**\r\n     * @see org.fixsuite.message.info.CompositeFixInfo#getField(int)\r\n     */\r\n    public FieldInfo getField(int tagNumber) {\r\n        if (fieldsByTagNumber != null) {\r\n            return fieldsByTagNumber.get(tagNumber);\r\n        }\r\n        return null;\r\n    }\r\n\r\n    /**\r\n     * @see org.fixsuite.message.info.CompositeFixInfo#getField(java.lang.String)\r\n     */\r\n    public FieldInfo getField(String name) {\r\n        if (fieldsByName != null) {\r\n            return fieldsByName.get(name);\r\n        }\r\n        return null;\r\n    }\r\n\r\n    /**\r\n     * @see org.fixsuite.message.info.CompositeFixInfo#addField(org.fixsuite.message.info.FieldInfo,\r\n     *      double)\r\n     */\r\n    public void addField(FieldInfo field, double position) {\r\n        if (fieldsByTagNumber == null) {\r\n            fieldsByTagNumber = new TreeMap<Integer, FieldInfo>();\r\n            fieldsByName = new TreeMap<String, FieldInfo>();\r\n        }\r\n        fieldsByTagNumber.put(field.getTagNumber(), field);\r\n        fieldsByName.put(field.getName(), field);\r\n        addItem(field, position);\r\n    }\r\n\r\n    /**\r\n     * @see org.fixsuite.message.info.CompositeFixInfo#getComponents()\r\n     */\r\n    public List<ComponentInfo> getComponents() {\r\n        if (componentsByName != null) {\r\n            return new ArrayList<ComponentInfo>(componentsByName.values());\r\n        }\r\n        return null;\r\n    }\r\n\r\n    /**\r\n     * @see org.fixsuite.message.info.CompositeFixInfo#getComponent(int)\r\n     */\r\n    public ComponentInfo getComponent(int id) {\r\n        if (componentsById != null) {\r\n            return componentsById.get(id);\r\n        }\r\n        return null;\r\n    }\r\n\r\n    /**\r\n     * @see org.fixsuite.message.info.CompositeFixInfo#getComponent(java.lang.String)\r\n     */\r\n    public ComponentInfo getComponent(String name) {\r\n        if (componentsByName != null) {\r\n            return componentsByName.get(name);\r\n        }\r\n        return null;\r\n    }\r\n\r\n    /**\r\n     * @see org.fixsuite.message.info.CompositeFixInfo#addComponent(org.fixsuite.message.info.ComponentInfo,\r\n     *      double)\r\n     */\r\n    public void addComponent(ComponentInfo component, double position) {\r\n        if (componentsByName == null) {\r\n            componentsByName = new TreeMap<String, ComponentInfo>();\r\n            componentsById = new TreeMap<Integer, ComponentInfo>();\r\n        }\r\n        componentsByName.put(component.getName(), component);\r\n        componentsById.put(component.getId(), component);\r\n        addItem(component, position);\r\n    }\r\n\r\n    /**\r\n     * @see org.fixsuite.message.info.CompositeFixInfo#getItems()\r\n     */\r\n    public List<FixInfo> getItems() {\r\n        if (itemsByPosition != null) {\r\n            return new ArrayList<FixInfo>(itemsByPosition.values());\r\n        }\r\n        return null;\r\n    }\r\n\r\n    /**\r\n     * @see org.fixsuite.message.info.CompositeFixInfo#replaceAsGroup(org.fixsuite.message.info.FieldInfo,\r\n     *      org.fixsuite.message.info.GroupInfo)\r\n     */\r\n    public void replaceAsGroup(FieldInfo field, GroupInfo group) {\r\n        fieldsByTagNumber.put(field.getTagNumber(), group);\r\n        fieldsByName.put(field.getName(), group);\r\n        double position = itemsByContent.get(field);\r\n        itemsByContent.remove(field);\r\n        itemsByContent.put(group, position);\r\n        itemsByPosition.put(position, group);\r\n    }\r\n\r\n    /**\r\n     * Returns the name\r\n     *\r\n     * @return the name\r\n     */\r\n    public String getName() {\r\n        return name;\r\n    }\r\n\r\n    /**\r\n     * Modifies the name\r\n     *\r\n     * @param name - the name to set\r\n     */\r\n    public void setName(String name) {\r\n        this.name = name;\r\n    }\r\n\r\n    /**\r\n     * Returns the componentType\r\n     *\r\n     * @return the componentType\r\n     */\r\n    public String getComponentType() {\r\n        return componentType;\r\n    }\r\n\r\n    /**\r\n     * Modifies the componentType\r\n     *\r\n     * @param componentType - the componentType to set\r\n     */\r\n    public void setComponentType(String componentType) {\r\n        this.componentType = componentType;\r\n    }\r\n\r\n    /**\r\n     * Returns the category\r\n     *\r\n     * @return the category\r\n     */\r\n    public String getCategory() {\r\n        return category;\r\n    }\r\n\r\n    /**\r\n     * Modifies the category\r\n     *\r\n     * @param category - the category to set\r\n     */\r\n    public void setCategory(String category) {\r\n        this.category = category;\r\n    }\r\n\r\n    /**\r\n     * Returns the id\r\n     *\r\n     * @return the id\r\n     */\r\n    public int getId() {\r\n        return id;\r\n    }\r\n\r\n    /**\r\n     * Modifies the id\r\n     *\r\n     * @param id - the id to set\r\n     */\r\n    public void setId(int id) {\r\n        this.id = id;\r\n    }\r\n\r\n    /**\r\n     * Returns the abbreviation\r\n     *\r\n     * @return the abbreviation\r\n     */\r\n    public String getAbbreviation() {\r\n        return abbreviation;\r\n    }\r\n\r\n    /**\r\n     * Modifies the abbreviation\r\n     *\r\n     * @param abbreviation - the abbreviation to set\r\n     */\r\n    public void setAbbreviation(String abbreviation) {\r\n        this.abbreviation = abbreviation;\r\n    }\r\n\r\n    /**\r\n     * Returns the isNotRequiredXml\r\n     *\r\n     * @return the isNotRequiredXml\r\n     */\r\n    public boolean isNotRequiredXml() {\r\n        return isNotRequiredXml;\r\n    }\r\n\r\n    /**\r\n     * Modifies the isNotRequiredXml\r\n     *\r\n     * @param isNotRequiredXml - the isNotRequiredXml to set\r\n     */\r\n    public void setNotRequiredXml(boolean isNotRequiredXml) {\r\n        this.isNotRequiredXml = isNotRequiredXml;\r\n    }\r\n\r\n    /**\r\n     * Returns the isRequired\r\n     *\r\n     * @return the isRequired\r\n     */\r\n    public boolean isRequired() {\r\n        return isRequired;\r\n    }\r\n\r\n    /**\r\n     * Modifies the isRequired\r\n     *\r\n     * @param isRequired - the isRequired to set\r\n     */\r\n    public void setRequired(boolean isRequired) {\r\n        this.isRequired = isRequired;\r\n    }\r\n\r\n    private void addItem(FixInfo item, double position) {\r\n        if (itemsByPosition == null) {\r\n            itemsByPosition = new TreeMap<Double, FixInfo>();\r\n            itemsByContent = new HashMap<FixInfo, Double>();\r\n        }\r\n        itemsByPosition.put(position, item);\r\n        itemsByContent.put(item, position);\r\n    }\r\n}\r\n",
		"id": "EvoSuiteBenchmark/74_fixsuite/src/main/java/org/fixsuite/message/info/ComponentInfoTest1.java",
		"test_prompt": "// ComponentInfoTest1.java\npackage org.fixsuite.message.info;\n\nimport java.util.ArrayList;\nimport java.util.HashMap;\nimport java.util.List;\nimport java.util.TreeMap;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link ComponentInfo}.\n* It contains ten unit test cases for the {@link ComponentInfo#isRequired()} method.\n*/\nclass ComponentInfoTest1 {"
	},
	{
		"original_code": "// DictionaryInfo.java\n/**\r\n * DictionaryInfo.java 11:33:45 PM Apr 21, 2008\r\n *\r\n * <PRE>\r\n * Copyright (c) 2008, Jan Amoyo\r\n * All rights reserved.\r\n *\r\n * Redistribution and use in source and binary forms, with or without\r\n * modification, are permitted provided that the following conditions are met:\r\n *\r\n *     - Redistributions of source code must retain the above copyright\r\n *       notice, this list of conditions and the following disclaimer.\r\n *     - Redistributions in binary form must reproduce the above copyright\r\n *       notice, this list of conditions and the following disclaimer in the\r\n *       documentation and/or other materials provided with the distribution.\r\n *\r\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS 'AS IS';\r\n * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\r\n * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\r\n * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDERS AND CONTRIBUTORS\r\n * BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR\r\n * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF\r\n * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS\r\n * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN\r\n * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\r\n * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\r\n * POSSIBILITY OF SUCH DAMAGE.\r\n * </PRE>\r\n */\r\npackage org.fixsuite.message.info;\r\n\r\nimport java.util.ArrayList;\r\nimport java.util.List;\r\nimport java.util.TreeMap;\r\n\r\n/**\r\n * Represents a FIX version specification. DictionaryInfo acts as a central\r\n * storage for all items defined in a version.\r\n *\r\n * @author jramoyo\r\n */\r\npublic class DictionaryInfo {\r\n\r\n    private String version;\r\n\r\n    private int loadCount;\r\n\r\n    // Default collection\r\n    private TreeMap<String, MessageInfo> messagesByName;\r\n\r\n    private TreeMap<Integer, MessageInfo> messagesById;\r\n\r\n    // Default collection\r\n    private TreeMap<Integer, FieldInfo> fieldsByTagNumber;\r\n\r\n    private TreeMap<String, FieldInfo> fieldsByName;\r\n\r\n    // Default collection\r\n    private TreeMap<String, ComponentInfo> componentsByName;\r\n\r\n    private TreeMap<Integer, ComponentInfo> componentsById;\r\n\r\n    /**\r\n     * Creates a new DictionaryInfo\r\n     *\r\n     * @param version - a version\r\n     */\r\n    public DictionaryInfo(String version) {\r\n        this.version = version;\r\n    }\r\n\r\n    /**\r\n     * Returns the fields\r\n     *\r\n     * @return the fields\r\n     */\r\n    public List<FieldInfo> getFields() {\r\n        if (fieldsByTagNumber != null) {\r\n            return new ArrayList<FieldInfo>(fieldsByTagNumber.values());\r\n        }\r\n        return null;\r\n    }\r\n\r\n    /**\r\n     * Returns a field given a tagNumber\r\n     *\r\n     * @param tagNumber - a tagNumber\r\n     * @return a field given a tagNumber\r\n     */\r\n    public FieldInfo getField(int tagNumber) {\r\n        if (fieldsByTagNumber != null) {\r\n            return fieldsByTagNumber.get(tagNumber);\r\n        }\r\n        return null;\r\n    }\r\n\r\n    /**\r\n     * Returns a field given a name\r\n     *\r\n     * @param name - a name\r\n     * @return a field given a name\r\n     */\r\n    public FieldInfo getField(String name) {\r\n        if (fieldsByName != null) {\r\n            return fieldsByName.get(name);\r\n        }\r\n        return null;\r\n    }\r\n\r\n    /**\r\n     * Adds a field\r\n     *\r\n     * @param field - a field\r\n     */\r\n    public void addField(FieldInfo field) {\r\n        if (fieldsByTagNumber == null) {\r\n            fieldsByTagNumber = new TreeMap<Integer, FieldInfo>();\r\n            fieldsByName = new TreeMap<String, FieldInfo>();\r\n        }\r\n        fieldsByTagNumber.put(field.getTagNumber(), field);\r\n        fieldsByName.put(field.getName(), field);\r\n    }\r\n\r\n    /**\r\n     * Returns the components\r\n     *\r\n     * @return the components\r\n     */\r\n    public List<ComponentInfo> getComponents() {\r\n        if (componentsByName != null) {\r\n            return new ArrayList<ComponentInfo>(componentsByName.values());\r\n        }\r\n        return null;\r\n    }\r\n\r\n    /**\r\n     * Returns a component given an id\r\n     *\r\n     * @param id - an id\r\n     * @return a component given an id\r\n     */\r\n    public ComponentInfo getComponent(int id) {\r\n        if (componentsById != null) {\r\n            return componentsById.get(id);\r\n        }\r\n        return null;\r\n    }\r\n\r\n    /**\r\n     * Returns a component given a name\r\n     *\r\n     * @param name - a name\r\n     * @return a component given a name\r\n     */\r\n    public ComponentInfo getComponent(String name) {\r\n        if (componentsByName != null) {\r\n            return componentsByName.get(name);\r\n        }\r\n        return null;\r\n    }\r\n\r\n    /**\r\n     * Adds a component\r\n     *\r\n     * @param component\r\n     */\r\n    public void addComponent(ComponentInfo component) {\r\n        if (componentsByName == null) {\r\n            componentsByName = new TreeMap<String, ComponentInfo>();\r\n            componentsById = new TreeMap<Integer, ComponentInfo>();\r\n        }\r\n        componentsByName.put(component.getName(), component);\r\n        componentsById.put(component.getId(), component);\r\n    }\r\n\r\n    /**\r\n     * Replace the field by a group. This is used by FPL parsers which cannot\r\n     * tell if a field is a group just from Fields.xml\r\n     *\r\n     * @param field - a field\r\n     * @param group - a group\r\n     */\r\n    public void replaceAsGroup(FieldInfo field, GroupInfo group) {\r\n        fieldsByTagNumber.put(field.getTagNumber(), group);\r\n        fieldsByName.put(field.getName(), group);\r\n    }\r\n\r\n    /**\r\n     * Returns a message given an id\r\n     *\r\n     * @param id - an id\r\n     * @return a message given an id\r\n     */\r\n    public MessageInfo getMessage(int id) {\r\n        if (messagesById != null) {\r\n            return messagesById.get(id);\r\n        } else {\r\n            return null;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Returns a message given a name\r\n     *\r\n     * @param name - a name\r\n     * @return a message given a name\r\n     */\r\n    public MessageInfo getMessage(String name) {\r\n        if (messagesByName != null) {\r\n            return messagesByName.get(name);\r\n        } else {\r\n            return null;\r\n        }\r\n    }\r\n\r\n    public List<MessageInfo> getMessages() {\r\n        return new ArrayList<MessageInfo>(messagesById.values());\r\n    }\r\n\r\n    /**\r\n     * Adds a message\r\n     *\r\n     * @param message - a message\r\n     */\r\n    public void addMessage(MessageInfo message) {\r\n        if (messagesByName == null) {\r\n            messagesByName = new TreeMap<String, MessageInfo>();\r\n            messagesById = new TreeMap<Integer, MessageInfo>();\r\n        }\r\n        messagesById.put(message.getId(), message);\r\n        messagesByName.put(message.getName(), message);\r\n    }\r\n\r\n    /**\r\n     * Returns the version\r\n     *\r\n     * @return the version\r\n     */\r\n    public String getVersion() {\r\n        return version;\r\n    }\r\n\r\n    /**\r\n     * Modifies the version\r\n     *\r\n     * @param version - the version to set\r\n     */\r\n    public void setVersion(String version) {\r\n        this.version = version;\r\n    }\r\n\r\n    /**\r\n     * Increments the loadCount\r\n     */\r\n    public void incrementLoadCount() {\r\n        loadCount++;\r\n    }\r\n\r\n    /**\r\n     * Returns whether the dictionary is loaded\r\n     *\r\n     * @return whether the dictionary is loaded\r\n     */\r\n    public boolean isLoaded() {\r\n        return loadCount == 5;\r\n    }\r\n}\r\n",
		"id": "EvoSuiteBenchmark/74_fixsuite/src/main/java/org/fixsuite/message/info/DictionaryInfoTest.java",
		"test_prompt": "// DictionaryInfoTest.java\npackage org.fixsuite.message.info;\n\nimport java.util.ArrayList;\nimport java.util.List;\nimport java.util.TreeMap;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link DictionaryInfo}.\n* It contains ten unit test cases for the {@link DictionaryInfo#isLoaded()} method.\n*/\nclass DictionaryInfoTest {"
	}
]