[
	{
		"original_code": "// ArenaObject.java\npackage net.virtualinfinity.atrobots.arenaobjects;\r\n\r\nimport net.virtualinfinity.atrobots.ArenaObjectVisitor;\r\nimport net.virtualinfinity.atrobots.arena.*;\r\nimport net.virtualinfinity.atrobots.measures.Duration;\r\nimport net.virtualinfinity.atrobots.measures.Vector;\r\nimport net.virtualinfinity.atrobots.snapshots.ArenaObjectSnapshot;\r\n\r\n/**\r\n * Abstract base class for objects which can appear in the {@link net.virtualinfinity.atrobots.arena.Arena}.\r\n *\r\n * @author Daniel Pitts\r\n */\r\npublic abstract class ArenaObject {\r\n\r\n    protected final Heading heading = new Heading();\r\n\r\n    protected final Speed speed = new Speed();\r\n\r\n    protected final Velocity velocity = new Velocity(heading, speed);\r\n\r\n    protected final Position position;\r\n\r\n    private Arena arena;\r\n\r\n    private boolean dead;\r\n\r\n    protected ArenaObject() {\r\n        position = new Position();\r\n    }\r\n\r\n    public ArenaObject(Vector location) {\r\n        position = new Position(location);\r\n    }\r\n\r\n    /**\r\n     * Update the position based on velocity.\r\n     *\r\n     * @param duration the amount of time to simulate movement for.\r\n     */\r\n    public final void simulateMovement(Duration duration) {\r\n        position.move(velocity.times(duration));\r\n    }\r\n\r\n    /**\r\n     * Get the position.\r\n     *\r\n     * @return the position.\r\n     */\r\n    public final Position getPosition() {\r\n        return position;\r\n    }\r\n\r\n    /**\r\n     * Check if this ArenaObject is dead.\r\n     *\r\n     * @return true if this ArenaObject is dead\r\n     */\r\n    public final boolean isDead() {\r\n        return dead;\r\n    }\r\n\r\n    /**\r\n     * Mark this ArenaObject as dead.\r\n     */\r\n    protected final void die() {\r\n        this.dead = true;\r\n    }\r\n\r\n    public void update(Duration duration) {\r\n        simulateMovement(duration);\r\n    }\r\n\r\n    /**\r\n     * Get a snapshot of the current state of this ArenaObject.\r\n     *\r\n     * @return the current snapshot.\r\n     * @see net.virtualinfinity.atrobots.arena.FrameBuilder\r\n     * @see Arena#buildFrame()\r\n     */\r\n    public final ArenaObjectSnapshot getSnapshot() {\r\n        final ArenaObjectSnapshot objectSnapshot = createSpecificSnapshot();\r\n        objectSnapshot.setPositionVector(position.getVector());\r\n        objectSnapshot.setVelocityVector(velocity.times(Duration.ONE_CYCLE));\r\n        objectSnapshot.setDead(isDead());\r\n        return objectSnapshot;\r\n    }\r\n\r\n    /**\r\n     * Create the snapshot with type-specific information.\r\n     *\r\n     * @return a type-specific snapshot.\r\n     */\r\n    protected abstract ArenaObjectSnapshot createSpecificSnapshot();\r\n\r\n    /**\r\n     * Get the arena that this object is in.\r\n     *\r\n     * @return the arena.\r\n     */\r\n    public final Arena getArena() {\r\n        return arena;\r\n    }\r\n\r\n    /**\r\n     * Set the arena that this object lives in.\r\n     *\r\n     * @param arena the arena.\r\n     */\r\n    public final void setArena(Arena arena) {\r\n        this.arena = arena;\r\n        arenaConnected(arena);\r\n    }\r\n\r\n    protected void arenaConnected(Arena arena) {\r\n    }\r\n\r\n    public abstract void accept(ArenaObjectVisitor arenaObjectVisitor);\r\n}\r\n",
		"id": "EvoSuiteBenchmark/86_at-robots2-j/src/main/java/net/virtualinfinity/atrobots/arenaobjects/ArenaObjectTest.java",
		"test_prompt": "// ArenaObjectTest.java\npackage net.virtualinfinity.atrobots.arenaobjects;\n\nimport net.virtualinfinity.atrobots.ArenaObjectVisitor;\nimport net.virtualinfinity.atrobots.arena.*;\nimport net.virtualinfinity.atrobots.measures.Duration;\nimport net.virtualinfinity.atrobots.measures.Vector;\nimport net.virtualinfinity.atrobots.snapshots.ArenaObjectSnapshot;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link ArenaObject}.\n* It contains ten unit test cases for the {@link ArenaObject#isDead()} method.\n*/\nclass ArenaObjectTest {"
	},
	{
		"original_code": "// Shield.java\npackage net.virtualinfinity.atrobots.hardware.shield;\r\n\r\nimport net.virtualinfinity.atrobots.computer.Resettable;\r\nimport net.virtualinfinity.atrobots.computer.ShutdownListener;\r\nimport net.virtualinfinity.atrobots.hardware.heatsinks.HeatSinks;\r\nimport net.virtualinfinity.atrobots.measures.Duration;\r\nimport net.virtualinfinity.atrobots.measures.Temperature;\r\nimport net.virtualinfinity.atrobots.ports.PortHandler;\r\n\r\n/**\r\n * @author Daniel Pitts\r\n */\r\npublic class Shield implements Resettable, ShutdownListener {\r\n\r\n    private boolean active;\r\n\r\n    private double heatFraction = 0;\r\n\r\n    private double damageFraction = 1;\r\n\r\n    private HeatSinks heatSinks;\r\n\r\n    public Shield(double strength) {\r\n        this.heatFraction = strength;\r\n        this.damageFraction = strength;\r\n    }\r\n\r\n    public PortHandler getLatch() {\r\n        return new PortHandler() {\r\n\r\n            public short read() {\r\n                return (short) (isActive() ? 1 : 0);\r\n            }\r\n\r\n            public void write(short value) {\r\n                setActive(value != 0);\r\n            }\r\n        };\r\n    }\r\n\r\n    public boolean isActive() {\r\n        return active;\r\n    }\r\n\r\n    public void setActive(boolean active) {\r\n        this.active = active;\r\n        heatSinks.blockHeat(active);\r\n    }\r\n\r\n    public void reset() {\r\n        setActive(false);\r\n    }\r\n\r\n    public double absorbDamage(double damageAmount) {\r\n        if (active) {\r\n            heatSinks.warm(Temperature.fromLogScale((int) Math.round(damageAmount * heatFraction)));\r\n            return damageAmount * damageFraction;\r\n        }\r\n        return damageAmount;\r\n    }\r\n\r\n    public void setHeatSinks(HeatSinks heatSinks) {\r\n        this.heatSinks = heatSinks;\r\n    }\r\n\r\n    public void update(Duration duration) {\r\n        if (active && heatFraction > 0) {\r\n            heatSinks.warm(Temperature.fromLogScale(duration.getCycles() / 3.0));\r\n        }\r\n    }\r\n\r\n    public void shutDown() {\r\n        setActive(false);\r\n    }\r\n}\r\n",
		"id": "EvoSuiteBenchmark/86_at-robots2-j/src/main/java/net/virtualinfinity/atrobots/hardware/shield/ShieldTest0.java",
		"test_prompt": "// ShieldTest0.java\npackage net.virtualinfinity.atrobots.hardware.shield;\n\nimport net.virtualinfinity.atrobots.computer.Resettable;\nimport net.virtualinfinity.atrobots.computer.ShutdownListener;\nimport net.virtualinfinity.atrobots.hardware.heatsinks.HeatSinks;\nimport net.virtualinfinity.atrobots.measures.Duration;\nimport net.virtualinfinity.atrobots.measures.Temperature;\nimport net.virtualinfinity.atrobots.ports.PortHandler;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link Shield}.\n* It contains ten unit test cases for the {@link Shield#isActive()} method.\n*/\nclass ShieldTest0 {"
	},
	{
		"original_code": "// Shield.java\npackage net.virtualinfinity.atrobots.hardware.shield;\r\n\r\nimport net.virtualinfinity.atrobots.computer.Resettable;\r\nimport net.virtualinfinity.atrobots.computer.ShutdownListener;\r\nimport net.virtualinfinity.atrobots.hardware.heatsinks.HeatSinks;\r\nimport net.virtualinfinity.atrobots.measures.Duration;\r\nimport net.virtualinfinity.atrobots.measures.Temperature;\r\nimport net.virtualinfinity.atrobots.ports.PortHandler;\r\n\r\n/**\r\n * @author Daniel Pitts\r\n */\r\npublic class Shield implements Resettable, ShutdownListener {\r\n\r\n    private boolean active;\r\n\r\n    private double heatFraction = 0;\r\n\r\n    private double damageFraction = 1;\r\n\r\n    private HeatSinks heatSinks;\r\n\r\n    public Shield(double strength) {\r\n        this.heatFraction = strength;\r\n        this.damageFraction = strength;\r\n    }\r\n\r\n    public PortHandler getLatch() {\r\n        return new PortHandler() {\r\n\r\n            public short read() {\r\n                return (short) (isActive() ? 1 : 0);\r\n            }\r\n\r\n            public void write(short value) {\r\n                setActive(value != 0);\r\n            }\r\n        };\r\n    }\r\n\r\n    public boolean isActive() {\r\n        return active;\r\n    }\r\n\r\n    public void setActive(boolean active) {\r\n        this.active = active;\r\n        heatSinks.blockHeat(active);\r\n    }\r\n\r\n    public void reset() {\r\n        setActive(false);\r\n    }\r\n\r\n    public double absorbDamage(double damageAmount) {\r\n        if (active) {\r\n            heatSinks.warm(Temperature.fromLogScale((int) Math.round(damageAmount * heatFraction)));\r\n            return damageAmount * damageFraction;\r\n        }\r\n        return damageAmount;\r\n    }\r\n\r\n    public void setHeatSinks(HeatSinks heatSinks) {\r\n        this.heatSinks = heatSinks;\r\n    }\r\n\r\n    public void update(Duration duration) {\r\n        if (active && heatFraction > 0) {\r\n            heatSinks.warm(Temperature.fromLogScale(duration.getCycles() / 3.0));\r\n        }\r\n    }\r\n\r\n    public void shutDown() {\r\n        setActive(false);\r\n    }\r\n}\r\n",
		"id": "EvoSuiteBenchmark/86_at-robots2-j/src/main/java/net/virtualinfinity/atrobots/hardware/shield/ShieldTest1.java",
		"test_prompt": "// ShieldTest1.java\npackage net.virtualinfinity.atrobots.hardware.shield;\n\nimport net.virtualinfinity.atrobots.computer.Resettable;\nimport net.virtualinfinity.atrobots.computer.ShutdownListener;\nimport net.virtualinfinity.atrobots.hardware.heatsinks.HeatSinks;\nimport net.virtualinfinity.atrobots.measures.Duration;\nimport net.virtualinfinity.atrobots.measures.Temperature;\nimport net.virtualinfinity.atrobots.ports.PortHandler;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link Shield}.\n* It contains ten unit test cases for the {@link Shield#absorbDamage(double)} method.\n*/\nclass ShieldTest1 {"
	},
	{
		"original_code": "// Mine.java\npackage net.virtualinfinity.atrobots.hardware.mines;\r\n\r\nimport net.virtualinfinity.atrobots.ArenaObjectVisitor;\r\nimport net.virtualinfinity.atrobots.arena.LinearDamageFunction;\r\nimport net.virtualinfinity.atrobots.arena.Position;\r\nimport net.virtualinfinity.atrobots.arena.TangibleArenaObject;\r\nimport net.virtualinfinity.atrobots.arenaobjects.CollidableArenaObject;\r\nimport net.virtualinfinity.atrobots.arenaobjects.DamageInflicter;\r\nimport net.virtualinfinity.atrobots.snapshots.ArenaObjectSnapshot;\r\nimport net.virtualinfinity.atrobots.snapshots.MineSnapshot;\r\n\r\n/**\r\n * A motionless but explosive arena object.\r\n *\r\n * @author Daniel Pitts\r\n */\r\npublic class Mine extends CollidableArenaObject {\r\n\r\n    private double triggerRadius;\r\n\r\n    private final DamageInflicter owner;\r\n\r\n    private double triggerRadiusSquared;\r\n\r\n    public Mine(DamageInflicter owner) {\r\n        this.owner = owner;\r\n    }\r\n\r\n    public void setTriggerRadius(double triggerRadius) {\r\n        this.triggerRadius = triggerRadius;\r\n        this.triggerRadiusSquared = triggerRadius * triggerRadius;\r\n    }\r\n\r\n    public void setPosition(Position source) {\r\n        position.copyFrom(source);\r\n    }\r\n\r\n    public boolean layedBy(Object owner) {\r\n        return this.owner == owner;\r\n    }\r\n\r\n    protected ArenaObjectSnapshot createSpecificSnapshot() {\r\n        final MineSnapshot snapshot = new MineSnapshot();\r\n        snapshot.setTriggerRadius(triggerRadius);\r\n        return snapshot;\r\n    }\r\n\r\n    @Override\r\n    public void checkCollision(TangibleArenaObject arenaObject) {\r\n        if (isDead() || layedBy(arenaObject)) {\r\n            return;\r\n        }\r\n        if (arenaObject.getPosition().getVectorTo(position).getMagnitudeSquared() < triggerRadiusSquared) {\r\n            explode();\r\n        }\r\n    }\r\n\r\n    public void explode() {\r\n        if (!isDead()) {\r\n            die();\r\n            getArena().explosion(owner, new LinearDamageFunction(position, 1, 35.0));\r\n        }\r\n    }\r\n\r\n    public void accept(ArenaObjectVisitor arenaObjectVisitor) {\r\n        arenaObjectVisitor.visit(this);\r\n    }\r\n}\r\n",
		"id": "EvoSuiteBenchmark/86_at-robots2-j/src/main/java/net/virtualinfinity/atrobots/hardware/mines/MineTest.java",
		"test_prompt": "// MineTest.java\npackage net.virtualinfinity.atrobots.hardware.mines;\n\nimport net.virtualinfinity.atrobots.ArenaObjectVisitor;\nimport net.virtualinfinity.atrobots.arena.LinearDamageFunction;\nimport net.virtualinfinity.atrobots.arena.Position;\nimport net.virtualinfinity.atrobots.arena.TangibleArenaObject;\nimport net.virtualinfinity.atrobots.arenaobjects.CollidableArenaObject;\nimport net.virtualinfinity.atrobots.arenaobjects.DamageInflicter;\nimport net.virtualinfinity.atrobots.snapshots.ArenaObjectSnapshot;\nimport net.virtualinfinity.atrobots.snapshots.MineSnapshot;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link Mine}.\n* It contains ten unit test cases for the {@link Mine#layedBy(Object)} method.\n*/\nclass MineTest {"
	},
	{
		"original_code": "// MapWithDefaultValue.java\npackage net.virtualinfinity.atrobots.util;\r\n\r\nimport java.util.Collection;\r\nimport java.util.Map;\r\nimport java.util.Set;\r\n\r\n/**\r\n * @author Daniel Pitts\r\n */\r\npublic class MapWithDefaultValue<K, E> implements Map<K, E> {\r\n\r\n    private final Map<K, E> backingMap;\r\n\r\n    private E defaultValue;\r\n\r\n    public MapWithDefaultValue(Map<K, E> backingMap) {\r\n        this.backingMap = backingMap;\r\n    }\r\n\r\n    public MapWithDefaultValue(Map<K, E> backingMap, E defaultValue) {\r\n        this.backingMap = backingMap;\r\n        this.defaultValue = defaultValue;\r\n    }\r\n\r\n    public E getDefaultValue() {\r\n        return defaultValue;\r\n    }\r\n\r\n    public void setDefaultValue(E defaultValue) {\r\n        this.defaultValue = defaultValue;\r\n    }\r\n\r\n    public int size() {\r\n        return backingMap.size();\r\n    }\r\n\r\n    public boolean isEmpty() {\r\n        return backingMap.isEmpty();\r\n    }\r\n\r\n    public boolean containsKey(Object key) {\r\n        return backingMap.containsKey(key);\r\n    }\r\n\r\n    public boolean containsValue(Object value) {\r\n        return backingMap.containsValue(value);\r\n    }\r\n\r\n    public E get(Object key) {\r\n        if (!containsKey(key)) {\r\n            return getDefaultValue();\r\n        }\r\n        return backingMap.get(key);\r\n    }\r\n\r\n    public E put(K key, E value) {\r\n        return backingMap.put(key, value);\r\n    }\r\n\r\n    public E remove(Object key) {\r\n        return backingMap.remove(key);\r\n    }\r\n\r\n    public void putAll(Map<? extends K, ? extends E> m) {\r\n        backingMap.putAll(m);\r\n    }\r\n\r\n    public void clear() {\r\n        backingMap.clear();\r\n    }\r\n\r\n    public Set<K> keySet() {\r\n        return backingMap.keySet();\r\n    }\r\n\r\n    public Collection<E> values() {\r\n        return backingMap.values();\r\n    }\r\n\r\n    public Set<Entry<K, E>> entrySet() {\r\n        return backingMap.entrySet();\r\n    }\r\n\r\n    public boolean equals(Object o) {\r\n        return backingMap.equals(o);\r\n    }\r\n\r\n    public int hashCode() {\r\n        return backingMap.hashCode();\r\n    }\r\n}\r\n",
		"id": "EvoSuiteBenchmark/86_at-robots2-j/src/main/java/net/virtualinfinity/atrobots/util/MapWithDefaultValueTest0.java",
		"test_prompt": "// MapWithDefaultValueTest0.java\npackage net.virtualinfinity.atrobots.util;\n\nimport java.util.Collection;\nimport java.util.Map;\nimport java.util.Set;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link MapWithDefaultValue}.\n* It contains ten unit test cases for the {@link MapWithDefaultValue#size()} method.\n*/\nclass MapWithDefaultValueTest0 {"
	},
	{
		"original_code": "// MapWithDefaultValue.java\npackage net.virtualinfinity.atrobots.util;\r\n\r\nimport java.util.Collection;\r\nimport java.util.Map;\r\nimport java.util.Set;\r\n\r\n/**\r\n * @author Daniel Pitts\r\n */\r\npublic class MapWithDefaultValue<K, E> implements Map<K, E> {\r\n\r\n    private final Map<K, E> backingMap;\r\n\r\n    private E defaultValue;\r\n\r\n    public MapWithDefaultValue(Map<K, E> backingMap) {\r\n        this.backingMap = backingMap;\r\n    }\r\n\r\n    public MapWithDefaultValue(Map<K, E> backingMap, E defaultValue) {\r\n        this.backingMap = backingMap;\r\n        this.defaultValue = defaultValue;\r\n    }\r\n\r\n    public E getDefaultValue() {\r\n        return defaultValue;\r\n    }\r\n\r\n    public void setDefaultValue(E defaultValue) {\r\n        this.defaultValue = defaultValue;\r\n    }\r\n\r\n    public int size() {\r\n        return backingMap.size();\r\n    }\r\n\r\n    public boolean isEmpty() {\r\n        return backingMap.isEmpty();\r\n    }\r\n\r\n    public boolean containsKey(Object key) {\r\n        return backingMap.containsKey(key);\r\n    }\r\n\r\n    public boolean containsValue(Object value) {\r\n        return backingMap.containsValue(value);\r\n    }\r\n\r\n    public E get(Object key) {\r\n        if (!containsKey(key)) {\r\n            return getDefaultValue();\r\n        }\r\n        return backingMap.get(key);\r\n    }\r\n\r\n    public E put(K key, E value) {\r\n        return backingMap.put(key, value);\r\n    }\r\n\r\n    public E remove(Object key) {\r\n        return backingMap.remove(key);\r\n    }\r\n\r\n    public void putAll(Map<? extends K, ? extends E> m) {\r\n        backingMap.putAll(m);\r\n    }\r\n\r\n    public void clear() {\r\n        backingMap.clear();\r\n    }\r\n\r\n    public Set<K> keySet() {\r\n        return backingMap.keySet();\r\n    }\r\n\r\n    public Collection<E> values() {\r\n        return backingMap.values();\r\n    }\r\n\r\n    public Set<Entry<K, E>> entrySet() {\r\n        return backingMap.entrySet();\r\n    }\r\n\r\n    public boolean equals(Object o) {\r\n        return backingMap.equals(o);\r\n    }\r\n\r\n    public int hashCode() {\r\n        return backingMap.hashCode();\r\n    }\r\n}\r\n",
		"id": "EvoSuiteBenchmark/86_at-robots2-j/src/main/java/net/virtualinfinity/atrobots/util/MapWithDefaultValueTest1.java",
		"test_prompt": "// MapWithDefaultValueTest1.java\npackage net.virtualinfinity.atrobots.util;\n\nimport java.util.Collection;\nimport java.util.Map;\nimport java.util.Set;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link MapWithDefaultValue}.\n* It contains ten unit test cases for the {@link MapWithDefaultValue#isEmpty()} method.\n*/\nclass MapWithDefaultValueTest1 {"
	},
	{
		"original_code": "// MapWithDefaultValue.java\npackage net.virtualinfinity.atrobots.util;\r\n\r\nimport java.util.Collection;\r\nimport java.util.Map;\r\nimport java.util.Set;\r\n\r\n/**\r\n * @author Daniel Pitts\r\n */\r\npublic class MapWithDefaultValue<K, E> implements Map<K, E> {\r\n\r\n    private final Map<K, E> backingMap;\r\n\r\n    private E defaultValue;\r\n\r\n    public MapWithDefaultValue(Map<K, E> backingMap) {\r\n        this.backingMap = backingMap;\r\n    }\r\n\r\n    public MapWithDefaultValue(Map<K, E> backingMap, E defaultValue) {\r\n        this.backingMap = backingMap;\r\n        this.defaultValue = defaultValue;\r\n    }\r\n\r\n    public E getDefaultValue() {\r\n        return defaultValue;\r\n    }\r\n\r\n    public void setDefaultValue(E defaultValue) {\r\n        this.defaultValue = defaultValue;\r\n    }\r\n\r\n    public int size() {\r\n        return backingMap.size();\r\n    }\r\n\r\n    public boolean isEmpty() {\r\n        return backingMap.isEmpty();\r\n    }\r\n\r\n    public boolean containsKey(Object key) {\r\n        return backingMap.containsKey(key);\r\n    }\r\n\r\n    public boolean containsValue(Object value) {\r\n        return backingMap.containsValue(value);\r\n    }\r\n\r\n    public E get(Object key) {\r\n        if (!containsKey(key)) {\r\n            return getDefaultValue();\r\n        }\r\n        return backingMap.get(key);\r\n    }\r\n\r\n    public E put(K key, E value) {\r\n        return backingMap.put(key, value);\r\n    }\r\n\r\n    public E remove(Object key) {\r\n        return backingMap.remove(key);\r\n    }\r\n\r\n    public void putAll(Map<? extends K, ? extends E> m) {\r\n        backingMap.putAll(m);\r\n    }\r\n\r\n    public void clear() {\r\n        backingMap.clear();\r\n    }\r\n\r\n    public Set<K> keySet() {\r\n        return backingMap.keySet();\r\n    }\r\n\r\n    public Collection<E> values() {\r\n        return backingMap.values();\r\n    }\r\n\r\n    public Set<Entry<K, E>> entrySet() {\r\n        return backingMap.entrySet();\r\n    }\r\n\r\n    public boolean equals(Object o) {\r\n        return backingMap.equals(o);\r\n    }\r\n\r\n    public int hashCode() {\r\n        return backingMap.hashCode();\r\n    }\r\n}\r\n",
		"id": "EvoSuiteBenchmark/86_at-robots2-j/src/main/java/net/virtualinfinity/atrobots/util/MapWithDefaultValueTest2.java",
		"test_prompt": "// MapWithDefaultValueTest2.java\npackage net.virtualinfinity.atrobots.util;\n\nimport java.util.Collection;\nimport java.util.Map;\nimport java.util.Set;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link MapWithDefaultValue}.\n* It contains ten unit test cases for the {@link MapWithDefaultValue#containsKey(Object)} method.\n*/\nclass MapWithDefaultValueTest2 {"
	},
	{
		"original_code": "// MapWithDefaultValue.java\npackage net.virtualinfinity.atrobots.util;\r\n\r\nimport java.util.Collection;\r\nimport java.util.Map;\r\nimport java.util.Set;\r\n\r\n/**\r\n * @author Daniel Pitts\r\n */\r\npublic class MapWithDefaultValue<K, E> implements Map<K, E> {\r\n\r\n    private final Map<K, E> backingMap;\r\n\r\n    private E defaultValue;\r\n\r\n    public MapWithDefaultValue(Map<K, E> backingMap) {\r\n        this.backingMap = backingMap;\r\n    }\r\n\r\n    public MapWithDefaultValue(Map<K, E> backingMap, E defaultValue) {\r\n        this.backingMap = backingMap;\r\n        this.defaultValue = defaultValue;\r\n    }\r\n\r\n    public E getDefaultValue() {\r\n        return defaultValue;\r\n    }\r\n\r\n    public void setDefaultValue(E defaultValue) {\r\n        this.defaultValue = defaultValue;\r\n    }\r\n\r\n    public int size() {\r\n        return backingMap.size();\r\n    }\r\n\r\n    public boolean isEmpty() {\r\n        return backingMap.isEmpty();\r\n    }\r\n\r\n    public boolean containsKey(Object key) {\r\n        return backingMap.containsKey(key);\r\n    }\r\n\r\n    public boolean containsValue(Object value) {\r\n        return backingMap.containsValue(value);\r\n    }\r\n\r\n    public E get(Object key) {\r\n        if (!containsKey(key)) {\r\n            return getDefaultValue();\r\n        }\r\n        return backingMap.get(key);\r\n    }\r\n\r\n    public E put(K key, E value) {\r\n        return backingMap.put(key, value);\r\n    }\r\n\r\n    public E remove(Object key) {\r\n        return backingMap.remove(key);\r\n    }\r\n\r\n    public void putAll(Map<? extends K, ? extends E> m) {\r\n        backingMap.putAll(m);\r\n    }\r\n\r\n    public void clear() {\r\n        backingMap.clear();\r\n    }\r\n\r\n    public Set<K> keySet() {\r\n        return backingMap.keySet();\r\n    }\r\n\r\n    public Collection<E> values() {\r\n        return backingMap.values();\r\n    }\r\n\r\n    public Set<Entry<K, E>> entrySet() {\r\n        return backingMap.entrySet();\r\n    }\r\n\r\n    public boolean equals(Object o) {\r\n        return backingMap.equals(o);\r\n    }\r\n\r\n    public int hashCode() {\r\n        return backingMap.hashCode();\r\n    }\r\n}\r\n",
		"id": "EvoSuiteBenchmark/86_at-robots2-j/src/main/java/net/virtualinfinity/atrobots/util/MapWithDefaultValueTest3.java",
		"test_prompt": "// MapWithDefaultValueTest3.java\npackage net.virtualinfinity.atrobots.util;\n\nimport java.util.Collection;\nimport java.util.Map;\nimport java.util.Set;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link MapWithDefaultValue}.\n* It contains ten unit test cases for the {@link MapWithDefaultValue#containsValue(Object)} method.\n*/\nclass MapWithDefaultValueTest3 {"
	},
	{
		"original_code": "// MapWithDefaultValue.java\npackage net.virtualinfinity.atrobots.util;\r\n\r\nimport java.util.Collection;\r\nimport java.util.Map;\r\nimport java.util.Set;\r\n\r\n/**\r\n * @author Daniel Pitts\r\n */\r\npublic class MapWithDefaultValue<K, E> implements Map<K, E> {\r\n\r\n    private final Map<K, E> backingMap;\r\n\r\n    private E defaultValue;\r\n\r\n    public MapWithDefaultValue(Map<K, E> backingMap) {\r\n        this.backingMap = backingMap;\r\n    }\r\n\r\n    public MapWithDefaultValue(Map<K, E> backingMap, E defaultValue) {\r\n        this.backingMap = backingMap;\r\n        this.defaultValue = defaultValue;\r\n    }\r\n\r\n    public E getDefaultValue() {\r\n        return defaultValue;\r\n    }\r\n\r\n    public void setDefaultValue(E defaultValue) {\r\n        this.defaultValue = defaultValue;\r\n    }\r\n\r\n    public int size() {\r\n        return backingMap.size();\r\n    }\r\n\r\n    public boolean isEmpty() {\r\n        return backingMap.isEmpty();\r\n    }\r\n\r\n    public boolean containsKey(Object key) {\r\n        return backingMap.containsKey(key);\r\n    }\r\n\r\n    public boolean containsValue(Object value) {\r\n        return backingMap.containsValue(value);\r\n    }\r\n\r\n    public E get(Object key) {\r\n        if (!containsKey(key)) {\r\n            return getDefaultValue();\r\n        }\r\n        return backingMap.get(key);\r\n    }\r\n\r\n    public E put(K key, E value) {\r\n        return backingMap.put(key, value);\r\n    }\r\n\r\n    public E remove(Object key) {\r\n        return backingMap.remove(key);\r\n    }\r\n\r\n    public void putAll(Map<? extends K, ? extends E> m) {\r\n        backingMap.putAll(m);\r\n    }\r\n\r\n    public void clear() {\r\n        backingMap.clear();\r\n    }\r\n\r\n    public Set<K> keySet() {\r\n        return backingMap.keySet();\r\n    }\r\n\r\n    public Collection<E> values() {\r\n        return backingMap.values();\r\n    }\r\n\r\n    public Set<Entry<K, E>> entrySet() {\r\n        return backingMap.entrySet();\r\n    }\r\n\r\n    public boolean equals(Object o) {\r\n        return backingMap.equals(o);\r\n    }\r\n\r\n    public int hashCode() {\r\n        return backingMap.hashCode();\r\n    }\r\n}\r\n",
		"id": "EvoSuiteBenchmark/86_at-robots2-j/src/main/java/net/virtualinfinity/atrobots/util/MapWithDefaultValueTest4.java",
		"test_prompt": "// MapWithDefaultValueTest4.java\npackage net.virtualinfinity.atrobots.util;\n\nimport java.util.Collection;\nimport java.util.Map;\nimport java.util.Set;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link MapWithDefaultValue}.\n* It contains ten unit test cases for the {@link MapWithDefaultValue#put(K, E)} method.\n*/\nclass MapWithDefaultValueTest4 {"
	},
	{
		"original_code": "// MapWithDefaultValue.java\npackage net.virtualinfinity.atrobots.util;\r\n\r\nimport java.util.Collection;\r\nimport java.util.Map;\r\nimport java.util.Set;\r\n\r\n/**\r\n * @author Daniel Pitts\r\n */\r\npublic class MapWithDefaultValue<K, E> implements Map<K, E> {\r\n\r\n    private final Map<K, E> backingMap;\r\n\r\n    private E defaultValue;\r\n\r\n    public MapWithDefaultValue(Map<K, E> backingMap) {\r\n        this.backingMap = backingMap;\r\n    }\r\n\r\n    public MapWithDefaultValue(Map<K, E> backingMap, E defaultValue) {\r\n        this.backingMap = backingMap;\r\n        this.defaultValue = defaultValue;\r\n    }\r\n\r\n    public E getDefaultValue() {\r\n        return defaultValue;\r\n    }\r\n\r\n    public void setDefaultValue(E defaultValue) {\r\n        this.defaultValue = defaultValue;\r\n    }\r\n\r\n    public int size() {\r\n        return backingMap.size();\r\n    }\r\n\r\n    public boolean isEmpty() {\r\n        return backingMap.isEmpty();\r\n    }\r\n\r\n    public boolean containsKey(Object key) {\r\n        return backingMap.containsKey(key);\r\n    }\r\n\r\n    public boolean containsValue(Object value) {\r\n        return backingMap.containsValue(value);\r\n    }\r\n\r\n    public E get(Object key) {\r\n        if (!containsKey(key)) {\r\n            return getDefaultValue();\r\n        }\r\n        return backingMap.get(key);\r\n    }\r\n\r\n    public E put(K key, E value) {\r\n        return backingMap.put(key, value);\r\n    }\r\n\r\n    public E remove(Object key) {\r\n        return backingMap.remove(key);\r\n    }\r\n\r\n    public void putAll(Map<? extends K, ? extends E> m) {\r\n        backingMap.putAll(m);\r\n    }\r\n\r\n    public void clear() {\r\n        backingMap.clear();\r\n    }\r\n\r\n    public Set<K> keySet() {\r\n        return backingMap.keySet();\r\n    }\r\n\r\n    public Collection<E> values() {\r\n        return backingMap.values();\r\n    }\r\n\r\n    public Set<Entry<K, E>> entrySet() {\r\n        return backingMap.entrySet();\r\n    }\r\n\r\n    public boolean equals(Object o) {\r\n        return backingMap.equals(o);\r\n    }\r\n\r\n    public int hashCode() {\r\n        return backingMap.hashCode();\r\n    }\r\n}\r\n",
		"id": "EvoSuiteBenchmark/86_at-robots2-j/src/main/java/net/virtualinfinity/atrobots/util/MapWithDefaultValueTest5.java",
		"test_prompt": "// MapWithDefaultValueTest5.java\npackage net.virtualinfinity.atrobots.util;\n\nimport java.util.Collection;\nimport java.util.Map;\nimport java.util.Set;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link MapWithDefaultValue}.\n* It contains ten unit test cases for the {@link MapWithDefaultValue#remove(Object)} method.\n*/\nclass MapWithDefaultValueTest5 {"
	},
	{
		"original_code": "// MapWithDefaultValue.java\npackage net.virtualinfinity.atrobots.util;\r\n\r\nimport java.util.Collection;\r\nimport java.util.Map;\r\nimport java.util.Set;\r\n\r\n/**\r\n * @author Daniel Pitts\r\n */\r\npublic class MapWithDefaultValue<K, E> implements Map<K, E> {\r\n\r\n    private final Map<K, E> backingMap;\r\n\r\n    private E defaultValue;\r\n\r\n    public MapWithDefaultValue(Map<K, E> backingMap) {\r\n        this.backingMap = backingMap;\r\n    }\r\n\r\n    public MapWithDefaultValue(Map<K, E> backingMap, E defaultValue) {\r\n        this.backingMap = backingMap;\r\n        this.defaultValue = defaultValue;\r\n    }\r\n\r\n    public E getDefaultValue() {\r\n        return defaultValue;\r\n    }\r\n\r\n    public void setDefaultValue(E defaultValue) {\r\n        this.defaultValue = defaultValue;\r\n    }\r\n\r\n    public int size() {\r\n        return backingMap.size();\r\n    }\r\n\r\n    public boolean isEmpty() {\r\n        return backingMap.isEmpty();\r\n    }\r\n\r\n    public boolean containsKey(Object key) {\r\n        return backingMap.containsKey(key);\r\n    }\r\n\r\n    public boolean containsValue(Object value) {\r\n        return backingMap.containsValue(value);\r\n    }\r\n\r\n    public E get(Object key) {\r\n        if (!containsKey(key)) {\r\n            return getDefaultValue();\r\n        }\r\n        return backingMap.get(key);\r\n    }\r\n\r\n    public E put(K key, E value) {\r\n        return backingMap.put(key, value);\r\n    }\r\n\r\n    public E remove(Object key) {\r\n        return backingMap.remove(key);\r\n    }\r\n\r\n    public void putAll(Map<? extends K, ? extends E> m) {\r\n        backingMap.putAll(m);\r\n    }\r\n\r\n    public void clear() {\r\n        backingMap.clear();\r\n    }\r\n\r\n    public Set<K> keySet() {\r\n        return backingMap.keySet();\r\n    }\r\n\r\n    public Collection<E> values() {\r\n        return backingMap.values();\r\n    }\r\n\r\n    public Set<Entry<K, E>> entrySet() {\r\n        return backingMap.entrySet();\r\n    }\r\n\r\n    public boolean equals(Object o) {\r\n        return backingMap.equals(o);\r\n    }\r\n\r\n    public int hashCode() {\r\n        return backingMap.hashCode();\r\n    }\r\n}\r\n",
		"id": "EvoSuiteBenchmark/86_at-robots2-j/src/main/java/net/virtualinfinity/atrobots/util/MapWithDefaultValueTest6.java",
		"test_prompt": "// MapWithDefaultValueTest6.java\npackage net.virtualinfinity.atrobots.util;\n\nimport java.util.Collection;\nimport java.util.Map;\nimport java.util.Set;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link MapWithDefaultValue}.\n* It contains ten unit test cases for the {@link MapWithDefaultValue#keySet()} method.\n*/\nclass MapWithDefaultValueTest6 {"
	},
	{
		"original_code": "// MapWithDefaultValue.java\npackage net.virtualinfinity.atrobots.util;\r\n\r\nimport java.util.Collection;\r\nimport java.util.Map;\r\nimport java.util.Set;\r\n\r\n/**\r\n * @author Daniel Pitts\r\n */\r\npublic class MapWithDefaultValue<K, E> implements Map<K, E> {\r\n\r\n    private final Map<K, E> backingMap;\r\n\r\n    private E defaultValue;\r\n\r\n    public MapWithDefaultValue(Map<K, E> backingMap) {\r\n        this.backingMap = backingMap;\r\n    }\r\n\r\n    public MapWithDefaultValue(Map<K, E> backingMap, E defaultValue) {\r\n        this.backingMap = backingMap;\r\n        this.defaultValue = defaultValue;\r\n    }\r\n\r\n    public E getDefaultValue() {\r\n        return defaultValue;\r\n    }\r\n\r\n    public void setDefaultValue(E defaultValue) {\r\n        this.defaultValue = defaultValue;\r\n    }\r\n\r\n    public int size() {\r\n        return backingMap.size();\r\n    }\r\n\r\n    public boolean isEmpty() {\r\n        return backingMap.isEmpty();\r\n    }\r\n\r\n    public boolean containsKey(Object key) {\r\n        return backingMap.containsKey(key);\r\n    }\r\n\r\n    public boolean containsValue(Object value) {\r\n        return backingMap.containsValue(value);\r\n    }\r\n\r\n    public E get(Object key) {\r\n        if (!containsKey(key)) {\r\n            return getDefaultValue();\r\n        }\r\n        return backingMap.get(key);\r\n    }\r\n\r\n    public E put(K key, E value) {\r\n        return backingMap.put(key, value);\r\n    }\r\n\r\n    public E remove(Object key) {\r\n        return backingMap.remove(key);\r\n    }\r\n\r\n    public void putAll(Map<? extends K, ? extends E> m) {\r\n        backingMap.putAll(m);\r\n    }\r\n\r\n    public void clear() {\r\n        backingMap.clear();\r\n    }\r\n\r\n    public Set<K> keySet() {\r\n        return backingMap.keySet();\r\n    }\r\n\r\n    public Collection<E> values() {\r\n        return backingMap.values();\r\n    }\r\n\r\n    public Set<Entry<K, E>> entrySet() {\r\n        return backingMap.entrySet();\r\n    }\r\n\r\n    public boolean equals(Object o) {\r\n        return backingMap.equals(o);\r\n    }\r\n\r\n    public int hashCode() {\r\n        return backingMap.hashCode();\r\n    }\r\n}\r\n",
		"id": "EvoSuiteBenchmark/86_at-robots2-j/src/main/java/net/virtualinfinity/atrobots/util/MapWithDefaultValueTest7.java",
		"test_prompt": "// MapWithDefaultValueTest7.java\npackage net.virtualinfinity.atrobots.util;\n\nimport java.util.Collection;\nimport java.util.Map;\nimport java.util.Set;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link MapWithDefaultValue}.\n* It contains ten unit test cases for the {@link MapWithDefaultValue#values()} method.\n*/\nclass MapWithDefaultValueTest7 {"
	},
	{
		"original_code": "// MapWithDefaultValue.java\npackage net.virtualinfinity.atrobots.util;\r\n\r\nimport java.util.Collection;\r\nimport java.util.Map;\r\nimport java.util.Set;\r\n\r\n/**\r\n * @author Daniel Pitts\r\n */\r\npublic class MapWithDefaultValue<K, E> implements Map<K, E> {\r\n\r\n    private final Map<K, E> backingMap;\r\n\r\n    private E defaultValue;\r\n\r\n    public MapWithDefaultValue(Map<K, E> backingMap) {\r\n        this.backingMap = backingMap;\r\n    }\r\n\r\n    public MapWithDefaultValue(Map<K, E> backingMap, E defaultValue) {\r\n        this.backingMap = backingMap;\r\n        this.defaultValue = defaultValue;\r\n    }\r\n\r\n    public E getDefaultValue() {\r\n        return defaultValue;\r\n    }\r\n\r\n    public void setDefaultValue(E defaultValue) {\r\n        this.defaultValue = defaultValue;\r\n    }\r\n\r\n    public int size() {\r\n        return backingMap.size();\r\n    }\r\n\r\n    public boolean isEmpty() {\r\n        return backingMap.isEmpty();\r\n    }\r\n\r\n    public boolean containsKey(Object key) {\r\n        return backingMap.containsKey(key);\r\n    }\r\n\r\n    public boolean containsValue(Object value) {\r\n        return backingMap.containsValue(value);\r\n    }\r\n\r\n    public E get(Object key) {\r\n        if (!containsKey(key)) {\r\n            return getDefaultValue();\r\n        }\r\n        return backingMap.get(key);\r\n    }\r\n\r\n    public E put(K key, E value) {\r\n        return backingMap.put(key, value);\r\n    }\r\n\r\n    public E remove(Object key) {\r\n        return backingMap.remove(key);\r\n    }\r\n\r\n    public void putAll(Map<? extends K, ? extends E> m) {\r\n        backingMap.putAll(m);\r\n    }\r\n\r\n    public void clear() {\r\n        backingMap.clear();\r\n    }\r\n\r\n    public Set<K> keySet() {\r\n        return backingMap.keySet();\r\n    }\r\n\r\n    public Collection<E> values() {\r\n        return backingMap.values();\r\n    }\r\n\r\n    public Set<Entry<K, E>> entrySet() {\r\n        return backingMap.entrySet();\r\n    }\r\n\r\n    public boolean equals(Object o) {\r\n        return backingMap.equals(o);\r\n    }\r\n\r\n    public int hashCode() {\r\n        return backingMap.hashCode();\r\n    }\r\n}\r\n",
		"id": "EvoSuiteBenchmark/86_at-robots2-j/src/main/java/net/virtualinfinity/atrobots/util/MapWithDefaultValueTest8.java",
		"test_prompt": "// MapWithDefaultValueTest8.java\npackage net.virtualinfinity.atrobots.util;\n\nimport java.util.Collection;\nimport java.util.Map;\nimport java.util.Set;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link MapWithDefaultValue}.\n* It contains ten unit test cases for the {@link MapWithDefaultValue#entrySet()} method.\n*/\nclass MapWithDefaultValueTest8 {"
	},
	{
		"original_code": "// MapWithDefaultValue.java\npackage net.virtualinfinity.atrobots.util;\r\n\r\nimport java.util.Collection;\r\nimport java.util.Map;\r\nimport java.util.Set;\r\n\r\n/**\r\n * @author Daniel Pitts\r\n */\r\npublic class MapWithDefaultValue<K, E> implements Map<K, E> {\r\n\r\n    private final Map<K, E> backingMap;\r\n\r\n    private E defaultValue;\r\n\r\n    public MapWithDefaultValue(Map<K, E> backingMap) {\r\n        this.backingMap = backingMap;\r\n    }\r\n\r\n    public MapWithDefaultValue(Map<K, E> backingMap, E defaultValue) {\r\n        this.backingMap = backingMap;\r\n        this.defaultValue = defaultValue;\r\n    }\r\n\r\n    public E getDefaultValue() {\r\n        return defaultValue;\r\n    }\r\n\r\n    public void setDefaultValue(E defaultValue) {\r\n        this.defaultValue = defaultValue;\r\n    }\r\n\r\n    public int size() {\r\n        return backingMap.size();\r\n    }\r\n\r\n    public boolean isEmpty() {\r\n        return backingMap.isEmpty();\r\n    }\r\n\r\n    public boolean containsKey(Object key) {\r\n        return backingMap.containsKey(key);\r\n    }\r\n\r\n    public boolean containsValue(Object value) {\r\n        return backingMap.containsValue(value);\r\n    }\r\n\r\n    public E get(Object key) {\r\n        if (!containsKey(key)) {\r\n            return getDefaultValue();\r\n        }\r\n        return backingMap.get(key);\r\n    }\r\n\r\n    public E put(K key, E value) {\r\n        return backingMap.put(key, value);\r\n    }\r\n\r\n    public E remove(Object key) {\r\n        return backingMap.remove(key);\r\n    }\r\n\r\n    public void putAll(Map<? extends K, ? extends E> m) {\r\n        backingMap.putAll(m);\r\n    }\r\n\r\n    public void clear() {\r\n        backingMap.clear();\r\n    }\r\n\r\n    public Set<K> keySet() {\r\n        return backingMap.keySet();\r\n    }\r\n\r\n    public Collection<E> values() {\r\n        return backingMap.values();\r\n    }\r\n\r\n    public Set<Entry<K, E>> entrySet() {\r\n        return backingMap.entrySet();\r\n    }\r\n\r\n    public boolean equals(Object o) {\r\n        return backingMap.equals(o);\r\n    }\r\n\r\n    public int hashCode() {\r\n        return backingMap.hashCode();\r\n    }\r\n}\r\n",
		"id": "EvoSuiteBenchmark/86_at-robots2-j/src/main/java/net/virtualinfinity/atrobots/util/MapWithDefaultValueTest9.java",
		"test_prompt": "// MapWithDefaultValueTest9.java\npackage net.virtualinfinity.atrobots.util;\n\nimport java.util.Collection;\nimport java.util.Map;\nimport java.util.Set;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link MapWithDefaultValue}.\n* It contains ten unit test cases for the {@link MapWithDefaultValue#equals(Object)} method.\n*/\nclass MapWithDefaultValueTest9 {"
	},
	{
		"original_code": "// MapWithDefaultValue.java\npackage net.virtualinfinity.atrobots.util;\r\n\r\nimport java.util.Collection;\r\nimport java.util.Map;\r\nimport java.util.Set;\r\n\r\n/**\r\n * @author Daniel Pitts\r\n */\r\npublic class MapWithDefaultValue<K, E> implements Map<K, E> {\r\n\r\n    private final Map<K, E> backingMap;\r\n\r\n    private E defaultValue;\r\n\r\n    public MapWithDefaultValue(Map<K, E> backingMap) {\r\n        this.backingMap = backingMap;\r\n    }\r\n\r\n    public MapWithDefaultValue(Map<K, E> backingMap, E defaultValue) {\r\n        this.backingMap = backingMap;\r\n        this.defaultValue = defaultValue;\r\n    }\r\n\r\n    public E getDefaultValue() {\r\n        return defaultValue;\r\n    }\r\n\r\n    public void setDefaultValue(E defaultValue) {\r\n        this.defaultValue = defaultValue;\r\n    }\r\n\r\n    public int size() {\r\n        return backingMap.size();\r\n    }\r\n\r\n    public boolean isEmpty() {\r\n        return backingMap.isEmpty();\r\n    }\r\n\r\n    public boolean containsKey(Object key) {\r\n        return backingMap.containsKey(key);\r\n    }\r\n\r\n    public boolean containsValue(Object value) {\r\n        return backingMap.containsValue(value);\r\n    }\r\n\r\n    public E get(Object key) {\r\n        if (!containsKey(key)) {\r\n            return getDefaultValue();\r\n        }\r\n        return backingMap.get(key);\r\n    }\r\n\r\n    public E put(K key, E value) {\r\n        return backingMap.put(key, value);\r\n    }\r\n\r\n    public E remove(Object key) {\r\n        return backingMap.remove(key);\r\n    }\r\n\r\n    public void putAll(Map<? extends K, ? extends E> m) {\r\n        backingMap.putAll(m);\r\n    }\r\n\r\n    public void clear() {\r\n        backingMap.clear();\r\n    }\r\n\r\n    public Set<K> keySet() {\r\n        return backingMap.keySet();\r\n    }\r\n\r\n    public Collection<E> values() {\r\n        return backingMap.values();\r\n    }\r\n\r\n    public Set<Entry<K, E>> entrySet() {\r\n        return backingMap.entrySet();\r\n    }\r\n\r\n    public boolean equals(Object o) {\r\n        return backingMap.equals(o);\r\n    }\r\n\r\n    public int hashCode() {\r\n        return backingMap.hashCode();\r\n    }\r\n}\r\n",
		"id": "EvoSuiteBenchmark/86_at-robots2-j/src/main/java/net/virtualinfinity/atrobots/util/MapWithDefaultValueTest10.java",
		"test_prompt": "// MapWithDefaultValueTest10.java\npackage net.virtualinfinity.atrobots.util;\n\nimport java.util.Collection;\nimport java.util.Map;\nimport java.util.Set;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link MapWithDefaultValue}.\n* It contains ten unit test cases for the {@link MapWithDefaultValue#hashCode()} method.\n*/\nclass MapWithDefaultValueTest10 {"
	},
	{
		"original_code": "// RobotSnapshot.java\npackage net.virtualinfinity.atrobots.snapshots;\r\n\r\nimport net.virtualinfinity.atrobots.measures.AbsoluteAngle;\r\nimport net.virtualinfinity.atrobots.measures.Temperature;\r\n\r\n/**\r\n * @author Daniel Pitts\r\n */\r\npublic class RobotSnapshot extends ArenaObjectSnapshot {\r\n\r\n    private Temperature temperature;\r\n\r\n    private double armor;\r\n\r\n    private boolean overburn;\r\n\r\n    private boolean activeShield;\r\n\r\n    private AbsoluteAngle heading;\r\n\r\n    private AbsoluteAngle turretHeading;\r\n\r\n    private String name;\r\n\r\n    private int id;\r\n\r\n    private String lastMessage;\r\n\r\n    private int roundKills;\r\n\r\n    private int totalKills;\r\n\r\n    private int totalDeaths;\r\n\r\n    private int totalWins;\r\n\r\n    private int totalTies;\r\n\r\n    public void setTemperature(Temperature temperature) {\r\n        this.temperature = temperature;\r\n    }\r\n\r\n    public void setArmor(double armor) {\r\n        this.armor = armor;\r\n    }\r\n\r\n    public void setOverburn(boolean overburn) {\r\n        this.overburn = overburn;\r\n    }\r\n\r\n    public void setActiveShield(boolean activeShield) {\r\n        this.activeShield = activeShield;\r\n    }\r\n\r\n    public void visit(SnapshotVisitor visitor) {\r\n        visitor.acceptRobot(this);\r\n    }\r\n\r\n    public void setHeading(AbsoluteAngle heading) {\r\n        this.heading = heading;\r\n    }\r\n\r\n    public void setTurretHeading(AbsoluteAngle turretHeading) {\r\n        this.turretHeading = turretHeading;\r\n    }\r\n\r\n    public void setName(String name) {\r\n        this.name = name;\r\n    }\r\n\r\n    public Temperature getTemperature() {\r\n        return temperature;\r\n    }\r\n\r\n    public double getArmor() {\r\n        return armor;\r\n    }\r\n\r\n    public boolean isOverburn() {\r\n        return overburn;\r\n    }\r\n\r\n    public boolean isActiveShield() {\r\n        return activeShield;\r\n    }\r\n\r\n    public AbsoluteAngle getHeading() {\r\n        return heading;\r\n    }\r\n\r\n    public AbsoluteAngle getTurretHeading() {\r\n        return turretHeading;\r\n    }\r\n\r\n    public String getName() {\r\n        return name;\r\n    }\r\n\r\n    public int getId() {\r\n        return id;\r\n    }\r\n\r\n    public void setId(int id) {\r\n        this.id = id;\r\n    }\r\n\r\n    public String getLastMessage() {\r\n        return lastMessage;\r\n    }\r\n\r\n    public void setLastMessage(String lastMessage) {\r\n        this.lastMessage = lastMessage;\r\n    }\r\n\r\n    public int getRoundKills() {\r\n        return roundKills;\r\n    }\r\n\r\n    public void setRoundKills(int roundKills) {\r\n        this.roundKills = roundKills;\r\n    }\r\n\r\n    public int getTotalKills() {\r\n        return totalKills;\r\n    }\r\n\r\n    public void setTotalKills(int totalKills) {\r\n        this.totalKills = totalKills;\r\n    }\r\n\r\n    public int getTotalDeaths() {\r\n        return totalDeaths;\r\n    }\r\n\r\n    public void setTotalDeaths(int totalDeaths) {\r\n        this.totalDeaths = totalDeaths;\r\n    }\r\n\r\n    public int getTotalWins() {\r\n        return totalWins;\r\n    }\r\n\r\n    public void setTotalWins(int totalWins) {\r\n        this.totalWins = totalWins;\r\n    }\r\n\r\n    public int getTotalTies() {\r\n        return totalTies;\r\n    }\r\n\r\n    public void setTotalTies(int totalTies) {\r\n        this.totalTies = totalTies;\r\n    }\r\n\r\n    @Override\r\n    public boolean equals(Object o) {\r\n        if (this == o)\r\n            return true;\r\n        if (o == null || getClass() != o.getClass())\r\n            return false;\r\n        RobotSnapshot that = (RobotSnapshot) o;\r\n        if (activeShield != that.activeShield)\r\n            return false;\r\n        if (Double.compare(that.armor, armor) != 0)\r\n            return false;\r\n        if (id != that.id)\r\n            return false;\r\n        if (overburn != that.overburn)\r\n            return false;\r\n        if (roundKills != that.roundKills)\r\n            return false;\r\n        if (totalDeaths != that.totalDeaths)\r\n            return false;\r\n        if (totalWins != that.totalWins)\r\n            return false;\r\n        if (totalTies != that.totalTies)\r\n            return false;\r\n        if (totalKills != that.totalKills)\r\n            return false;\r\n        if (!heading.equals(that.heading))\r\n            return false;\r\n        if (lastMessage != null ? !lastMessage.equals(that.lastMessage) : that.lastMessage != null)\r\n            return false;\r\n        if (!name.equals(that.name))\r\n            return false;\r\n        if (!temperature.equals(that.temperature))\r\n            return false;\r\n        if (!turretHeading.equals(that.turretHeading))\r\n            return false;\r\n        return true;\r\n    }\r\n\r\n    @Override\r\n    public int hashCode() {\r\n        int result;\r\n        long temp;\r\n        result = temperature.hashCode();\r\n        temp = armor != +0.0d ? Double.doubleToLongBits(armor) : 0L;\r\n        result = 31 * result + (int) (temp ^ (temp >>> 32));\r\n        result = 31 * result + (overburn ? 1 : 0);\r\n        result = 31 * result + (activeShield ? 1 : 0);\r\n        result = 31 * result + heading.hashCode();\r\n        result = 31 * result + turretHeading.hashCode();\r\n        result = 31 * result + name.hashCode();\r\n        result = 31 * result + id;\r\n        result = 31 * result + (lastMessage != null ? lastMessage.hashCode() : 0);\r\n        result = 31 * result + roundKills;\r\n        result = 31 * result + totalKills;\r\n        result = 31 * result + totalWins;\r\n        result = 31 * result + totalTies;\r\n        result = 31 * result + totalDeaths;\r\n        return result;\r\n    }\r\n}\r\n",
		"id": "EvoSuiteBenchmark/86_at-robots2-j/src/main/java/net/virtualinfinity/atrobots/snapshots/RobotSnapshotTest0.java",
		"test_prompt": "// RobotSnapshotTest0.java\npackage net.virtualinfinity.atrobots.snapshots;\n\nimport net.virtualinfinity.atrobots.measures.AbsoluteAngle;\nimport net.virtualinfinity.atrobots.measures.Temperature;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link RobotSnapshot}.\n* It contains ten unit test cases for the {@link RobotSnapshot#isOverburn()} method.\n*/\nclass RobotSnapshotTest0 {"
	},
	{
		"original_code": "// RobotSnapshot.java\npackage net.virtualinfinity.atrobots.snapshots;\r\n\r\nimport net.virtualinfinity.atrobots.measures.AbsoluteAngle;\r\nimport net.virtualinfinity.atrobots.measures.Temperature;\r\n\r\n/**\r\n * @author Daniel Pitts\r\n */\r\npublic class RobotSnapshot extends ArenaObjectSnapshot {\r\n\r\n    private Temperature temperature;\r\n\r\n    private double armor;\r\n\r\n    private boolean overburn;\r\n\r\n    private boolean activeShield;\r\n\r\n    private AbsoluteAngle heading;\r\n\r\n    private AbsoluteAngle turretHeading;\r\n\r\n    private String name;\r\n\r\n    private int id;\r\n\r\n    private String lastMessage;\r\n\r\n    private int roundKills;\r\n\r\n    private int totalKills;\r\n\r\n    private int totalDeaths;\r\n\r\n    private int totalWins;\r\n\r\n    private int totalTies;\r\n\r\n    public void setTemperature(Temperature temperature) {\r\n        this.temperature = temperature;\r\n    }\r\n\r\n    public void setArmor(double armor) {\r\n        this.armor = armor;\r\n    }\r\n\r\n    public void setOverburn(boolean overburn) {\r\n        this.overburn = overburn;\r\n    }\r\n\r\n    public void setActiveShield(boolean activeShield) {\r\n        this.activeShield = activeShield;\r\n    }\r\n\r\n    public void visit(SnapshotVisitor visitor) {\r\n        visitor.acceptRobot(this);\r\n    }\r\n\r\n    public void setHeading(AbsoluteAngle heading) {\r\n        this.heading = heading;\r\n    }\r\n\r\n    public void setTurretHeading(AbsoluteAngle turretHeading) {\r\n        this.turretHeading = turretHeading;\r\n    }\r\n\r\n    public void setName(String name) {\r\n        this.name = name;\r\n    }\r\n\r\n    public Temperature getTemperature() {\r\n        return temperature;\r\n    }\r\n\r\n    public double getArmor() {\r\n        return armor;\r\n    }\r\n\r\n    public boolean isOverburn() {\r\n        return overburn;\r\n    }\r\n\r\n    public boolean isActiveShield() {\r\n        return activeShield;\r\n    }\r\n\r\n    public AbsoluteAngle getHeading() {\r\n        return heading;\r\n    }\r\n\r\n    public AbsoluteAngle getTurretHeading() {\r\n        return turretHeading;\r\n    }\r\n\r\n    public String getName() {\r\n        return name;\r\n    }\r\n\r\n    public int getId() {\r\n        return id;\r\n    }\r\n\r\n    public void setId(int id) {\r\n        this.id = id;\r\n    }\r\n\r\n    public String getLastMessage() {\r\n        return lastMessage;\r\n    }\r\n\r\n    public void setLastMessage(String lastMessage) {\r\n        this.lastMessage = lastMessage;\r\n    }\r\n\r\n    public int getRoundKills() {\r\n        return roundKills;\r\n    }\r\n\r\n    public void setRoundKills(int roundKills) {\r\n        this.roundKills = roundKills;\r\n    }\r\n\r\n    public int getTotalKills() {\r\n        return totalKills;\r\n    }\r\n\r\n    public void setTotalKills(int totalKills) {\r\n        this.totalKills = totalKills;\r\n    }\r\n\r\n    public int getTotalDeaths() {\r\n        return totalDeaths;\r\n    }\r\n\r\n    public void setTotalDeaths(int totalDeaths) {\r\n        this.totalDeaths = totalDeaths;\r\n    }\r\n\r\n    public int getTotalWins() {\r\n        return totalWins;\r\n    }\r\n\r\n    public void setTotalWins(int totalWins) {\r\n        this.totalWins = totalWins;\r\n    }\r\n\r\n    public int getTotalTies() {\r\n        return totalTies;\r\n    }\r\n\r\n    public void setTotalTies(int totalTies) {\r\n        this.totalTies = totalTies;\r\n    }\r\n\r\n    @Override\r\n    public boolean equals(Object o) {\r\n        if (this == o)\r\n            return true;\r\n        if (o == null || getClass() != o.getClass())\r\n            return false;\r\n        RobotSnapshot that = (RobotSnapshot) o;\r\n        if (activeShield != that.activeShield)\r\n            return false;\r\n        if (Double.compare(that.armor, armor) != 0)\r\n            return false;\r\n        if (id != that.id)\r\n            return false;\r\n        if (overburn != that.overburn)\r\n            return false;\r\n        if (roundKills != that.roundKills)\r\n            return false;\r\n        if (totalDeaths != that.totalDeaths)\r\n            return false;\r\n        if (totalWins != that.totalWins)\r\n            return false;\r\n        if (totalTies != that.totalTies)\r\n            return false;\r\n        if (totalKills != that.totalKills)\r\n            return false;\r\n        if (!heading.equals(that.heading))\r\n            return false;\r\n        if (lastMessage != null ? !lastMessage.equals(that.lastMessage) : that.lastMessage != null)\r\n            return false;\r\n        if (!name.equals(that.name))\r\n            return false;\r\n        if (!temperature.equals(that.temperature))\r\n            return false;\r\n        if (!turretHeading.equals(that.turretHeading))\r\n            return false;\r\n        return true;\r\n    }\r\n\r\n    @Override\r\n    public int hashCode() {\r\n        int result;\r\n        long temp;\r\n        result = temperature.hashCode();\r\n        temp = armor != +0.0d ? Double.doubleToLongBits(armor) : 0L;\r\n        result = 31 * result + (int) (temp ^ (temp >>> 32));\r\n        result = 31 * result + (overburn ? 1 : 0);\r\n        result = 31 * result + (activeShield ? 1 : 0);\r\n        result = 31 * result + heading.hashCode();\r\n        result = 31 * result + turretHeading.hashCode();\r\n        result = 31 * result + name.hashCode();\r\n        result = 31 * result + id;\r\n        result = 31 * result + (lastMessage != null ? lastMessage.hashCode() : 0);\r\n        result = 31 * result + roundKills;\r\n        result = 31 * result + totalKills;\r\n        result = 31 * result + totalWins;\r\n        result = 31 * result + totalTies;\r\n        result = 31 * result + totalDeaths;\r\n        return result;\r\n    }\r\n}\r\n",
		"id": "EvoSuiteBenchmark/86_at-robots2-j/src/main/java/net/virtualinfinity/atrobots/snapshots/RobotSnapshotTest1.java",
		"test_prompt": "// RobotSnapshotTest1.java\npackage net.virtualinfinity.atrobots.snapshots;\n\nimport net.virtualinfinity.atrobots.measures.AbsoluteAngle;\nimport net.virtualinfinity.atrobots.measures.Temperature;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link RobotSnapshot}.\n* It contains ten unit test cases for the {@link RobotSnapshot#isActiveShield()} method.\n*/\nclass RobotSnapshotTest1 {"
	},
	{
		"original_code": "// RobotSnapshot.java\npackage net.virtualinfinity.atrobots.snapshots;\r\n\r\nimport net.virtualinfinity.atrobots.measures.AbsoluteAngle;\r\nimport net.virtualinfinity.atrobots.measures.Temperature;\r\n\r\n/**\r\n * @author Daniel Pitts\r\n */\r\npublic class RobotSnapshot extends ArenaObjectSnapshot {\r\n\r\n    private Temperature temperature;\r\n\r\n    private double armor;\r\n\r\n    private boolean overburn;\r\n\r\n    private boolean activeShield;\r\n\r\n    private AbsoluteAngle heading;\r\n\r\n    private AbsoluteAngle turretHeading;\r\n\r\n    private String name;\r\n\r\n    private int id;\r\n\r\n    private String lastMessage;\r\n\r\n    private int roundKills;\r\n\r\n    private int totalKills;\r\n\r\n    private int totalDeaths;\r\n\r\n    private int totalWins;\r\n\r\n    private int totalTies;\r\n\r\n    public void setTemperature(Temperature temperature) {\r\n        this.temperature = temperature;\r\n    }\r\n\r\n    public void setArmor(double armor) {\r\n        this.armor = armor;\r\n    }\r\n\r\n    public void setOverburn(boolean overburn) {\r\n        this.overburn = overburn;\r\n    }\r\n\r\n    public void setActiveShield(boolean activeShield) {\r\n        this.activeShield = activeShield;\r\n    }\r\n\r\n    public void visit(SnapshotVisitor visitor) {\r\n        visitor.acceptRobot(this);\r\n    }\r\n\r\n    public void setHeading(AbsoluteAngle heading) {\r\n        this.heading = heading;\r\n    }\r\n\r\n    public void setTurretHeading(AbsoluteAngle turretHeading) {\r\n        this.turretHeading = turretHeading;\r\n    }\r\n\r\n    public void setName(String name) {\r\n        this.name = name;\r\n    }\r\n\r\n    public Temperature getTemperature() {\r\n        return temperature;\r\n    }\r\n\r\n    public double getArmor() {\r\n        return armor;\r\n    }\r\n\r\n    public boolean isOverburn() {\r\n        return overburn;\r\n    }\r\n\r\n    public boolean isActiveShield() {\r\n        return activeShield;\r\n    }\r\n\r\n    public AbsoluteAngle getHeading() {\r\n        return heading;\r\n    }\r\n\r\n    public AbsoluteAngle getTurretHeading() {\r\n        return turretHeading;\r\n    }\r\n\r\n    public String getName() {\r\n        return name;\r\n    }\r\n\r\n    public int getId() {\r\n        return id;\r\n    }\r\n\r\n    public void setId(int id) {\r\n        this.id = id;\r\n    }\r\n\r\n    public String getLastMessage() {\r\n        return lastMessage;\r\n    }\r\n\r\n    public void setLastMessage(String lastMessage) {\r\n        this.lastMessage = lastMessage;\r\n    }\r\n\r\n    public int getRoundKills() {\r\n        return roundKills;\r\n    }\r\n\r\n    public void setRoundKills(int roundKills) {\r\n        this.roundKills = roundKills;\r\n    }\r\n\r\n    public int getTotalKills() {\r\n        return totalKills;\r\n    }\r\n\r\n    public void setTotalKills(int totalKills) {\r\n        this.totalKills = totalKills;\r\n    }\r\n\r\n    public int getTotalDeaths() {\r\n        return totalDeaths;\r\n    }\r\n\r\n    public void setTotalDeaths(int totalDeaths) {\r\n        this.totalDeaths = totalDeaths;\r\n    }\r\n\r\n    public int getTotalWins() {\r\n        return totalWins;\r\n    }\r\n\r\n    public void setTotalWins(int totalWins) {\r\n        this.totalWins = totalWins;\r\n    }\r\n\r\n    public int getTotalTies() {\r\n        return totalTies;\r\n    }\r\n\r\n    public void setTotalTies(int totalTies) {\r\n        this.totalTies = totalTies;\r\n    }\r\n\r\n    @Override\r\n    public boolean equals(Object o) {\r\n        if (this == o)\r\n            return true;\r\n        if (o == null || getClass() != o.getClass())\r\n            return false;\r\n        RobotSnapshot that = (RobotSnapshot) o;\r\n        if (activeShield != that.activeShield)\r\n            return false;\r\n        if (Double.compare(that.armor, armor) != 0)\r\n            return false;\r\n        if (id != that.id)\r\n            return false;\r\n        if (overburn != that.overburn)\r\n            return false;\r\n        if (roundKills != that.roundKills)\r\n            return false;\r\n        if (totalDeaths != that.totalDeaths)\r\n            return false;\r\n        if (totalWins != that.totalWins)\r\n            return false;\r\n        if (totalTies != that.totalTies)\r\n            return false;\r\n        if (totalKills != that.totalKills)\r\n            return false;\r\n        if (!heading.equals(that.heading))\r\n            return false;\r\n        if (lastMessage != null ? !lastMessage.equals(that.lastMessage) : that.lastMessage != null)\r\n            return false;\r\n        if (!name.equals(that.name))\r\n            return false;\r\n        if (!temperature.equals(that.temperature))\r\n            return false;\r\n        if (!turretHeading.equals(that.turretHeading))\r\n            return false;\r\n        return true;\r\n    }\r\n\r\n    @Override\r\n    public int hashCode() {\r\n        int result;\r\n        long temp;\r\n        result = temperature.hashCode();\r\n        temp = armor != +0.0d ? Double.doubleToLongBits(armor) : 0L;\r\n        result = 31 * result + (int) (temp ^ (temp >>> 32));\r\n        result = 31 * result + (overburn ? 1 : 0);\r\n        result = 31 * result + (activeShield ? 1 : 0);\r\n        result = 31 * result + heading.hashCode();\r\n        result = 31 * result + turretHeading.hashCode();\r\n        result = 31 * result + name.hashCode();\r\n        result = 31 * result + id;\r\n        result = 31 * result + (lastMessage != null ? lastMessage.hashCode() : 0);\r\n        result = 31 * result + roundKills;\r\n        result = 31 * result + totalKills;\r\n        result = 31 * result + totalWins;\r\n        result = 31 * result + totalTies;\r\n        result = 31 * result + totalDeaths;\r\n        return result;\r\n    }\r\n}\r\n",
		"id": "EvoSuiteBenchmark/86_at-robots2-j/src/main/java/net/virtualinfinity/atrobots/snapshots/RobotSnapshotTest2.java",
		"test_prompt": "// RobotSnapshotTest2.java\npackage net.virtualinfinity.atrobots.snapshots;\n\nimport net.virtualinfinity.atrobots.measures.AbsoluteAngle;\nimport net.virtualinfinity.atrobots.measures.Temperature;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link RobotSnapshot}.\n* It contains ten unit test cases for the {@link RobotSnapshot#equals(Object)} method.\n*/\nclass RobotSnapshotTest2 {"
	},
	{
		"original_code": "// RobotSnapshot.java\npackage net.virtualinfinity.atrobots.snapshots;\r\n\r\nimport net.virtualinfinity.atrobots.measures.AbsoluteAngle;\r\nimport net.virtualinfinity.atrobots.measures.Temperature;\r\n\r\n/**\r\n * @author Daniel Pitts\r\n */\r\npublic class RobotSnapshot extends ArenaObjectSnapshot {\r\n\r\n    private Temperature temperature;\r\n\r\n    private double armor;\r\n\r\n    private boolean overburn;\r\n\r\n    private boolean activeShield;\r\n\r\n    private AbsoluteAngle heading;\r\n\r\n    private AbsoluteAngle turretHeading;\r\n\r\n    private String name;\r\n\r\n    private int id;\r\n\r\n    private String lastMessage;\r\n\r\n    private int roundKills;\r\n\r\n    private int totalKills;\r\n\r\n    private int totalDeaths;\r\n\r\n    private int totalWins;\r\n\r\n    private int totalTies;\r\n\r\n    public void setTemperature(Temperature temperature) {\r\n        this.temperature = temperature;\r\n    }\r\n\r\n    public void setArmor(double armor) {\r\n        this.armor = armor;\r\n    }\r\n\r\n    public void setOverburn(boolean overburn) {\r\n        this.overburn = overburn;\r\n    }\r\n\r\n    public void setActiveShield(boolean activeShield) {\r\n        this.activeShield = activeShield;\r\n    }\r\n\r\n    public void visit(SnapshotVisitor visitor) {\r\n        visitor.acceptRobot(this);\r\n    }\r\n\r\n    public void setHeading(AbsoluteAngle heading) {\r\n        this.heading = heading;\r\n    }\r\n\r\n    public void setTurretHeading(AbsoluteAngle turretHeading) {\r\n        this.turretHeading = turretHeading;\r\n    }\r\n\r\n    public void setName(String name) {\r\n        this.name = name;\r\n    }\r\n\r\n    public Temperature getTemperature() {\r\n        return temperature;\r\n    }\r\n\r\n    public double getArmor() {\r\n        return armor;\r\n    }\r\n\r\n    public boolean isOverburn() {\r\n        return overburn;\r\n    }\r\n\r\n    public boolean isActiveShield() {\r\n        return activeShield;\r\n    }\r\n\r\n    public AbsoluteAngle getHeading() {\r\n        return heading;\r\n    }\r\n\r\n    public AbsoluteAngle getTurretHeading() {\r\n        return turretHeading;\r\n    }\r\n\r\n    public String getName() {\r\n        return name;\r\n    }\r\n\r\n    public int getId() {\r\n        return id;\r\n    }\r\n\r\n    public void setId(int id) {\r\n        this.id = id;\r\n    }\r\n\r\n    public String getLastMessage() {\r\n        return lastMessage;\r\n    }\r\n\r\n    public void setLastMessage(String lastMessage) {\r\n        this.lastMessage = lastMessage;\r\n    }\r\n\r\n    public int getRoundKills() {\r\n        return roundKills;\r\n    }\r\n\r\n    public void setRoundKills(int roundKills) {\r\n        this.roundKills = roundKills;\r\n    }\r\n\r\n    public int getTotalKills() {\r\n        return totalKills;\r\n    }\r\n\r\n    public void setTotalKills(int totalKills) {\r\n        this.totalKills = totalKills;\r\n    }\r\n\r\n    public int getTotalDeaths() {\r\n        return totalDeaths;\r\n    }\r\n\r\n    public void setTotalDeaths(int totalDeaths) {\r\n        this.totalDeaths = totalDeaths;\r\n    }\r\n\r\n    public int getTotalWins() {\r\n        return totalWins;\r\n    }\r\n\r\n    public void setTotalWins(int totalWins) {\r\n        this.totalWins = totalWins;\r\n    }\r\n\r\n    public int getTotalTies() {\r\n        return totalTies;\r\n    }\r\n\r\n    public void setTotalTies(int totalTies) {\r\n        this.totalTies = totalTies;\r\n    }\r\n\r\n    @Override\r\n    public boolean equals(Object o) {\r\n        if (this == o)\r\n            return true;\r\n        if (o == null || getClass() != o.getClass())\r\n            return false;\r\n        RobotSnapshot that = (RobotSnapshot) o;\r\n        if (activeShield != that.activeShield)\r\n            return false;\r\n        if (Double.compare(that.armor, armor) != 0)\r\n            return false;\r\n        if (id != that.id)\r\n            return false;\r\n        if (overburn != that.overburn)\r\n            return false;\r\n        if (roundKills != that.roundKills)\r\n            return false;\r\n        if (totalDeaths != that.totalDeaths)\r\n            return false;\r\n        if (totalWins != that.totalWins)\r\n            return false;\r\n        if (totalTies != that.totalTies)\r\n            return false;\r\n        if (totalKills != that.totalKills)\r\n            return false;\r\n        if (!heading.equals(that.heading))\r\n            return false;\r\n        if (lastMessage != null ? !lastMessage.equals(that.lastMessage) : that.lastMessage != null)\r\n            return false;\r\n        if (!name.equals(that.name))\r\n            return false;\r\n        if (!temperature.equals(that.temperature))\r\n            return false;\r\n        if (!turretHeading.equals(that.turretHeading))\r\n            return false;\r\n        return true;\r\n    }\r\n\r\n    @Override\r\n    public int hashCode() {\r\n        int result;\r\n        long temp;\r\n        result = temperature.hashCode();\r\n        temp = armor != +0.0d ? Double.doubleToLongBits(armor) : 0L;\r\n        result = 31 * result + (int) (temp ^ (temp >>> 32));\r\n        result = 31 * result + (overburn ? 1 : 0);\r\n        result = 31 * result + (activeShield ? 1 : 0);\r\n        result = 31 * result + heading.hashCode();\r\n        result = 31 * result + turretHeading.hashCode();\r\n        result = 31 * result + name.hashCode();\r\n        result = 31 * result + id;\r\n        result = 31 * result + (lastMessage != null ? lastMessage.hashCode() : 0);\r\n        result = 31 * result + roundKills;\r\n        result = 31 * result + totalKills;\r\n        result = 31 * result + totalWins;\r\n        result = 31 * result + totalTies;\r\n        result = 31 * result + totalDeaths;\r\n        return result;\r\n    }\r\n}\r\n",
		"id": "EvoSuiteBenchmark/86_at-robots2-j/src/main/java/net/virtualinfinity/atrobots/snapshots/RobotSnapshotTest3.java",
		"test_prompt": "// RobotSnapshotTest3.java\npackage net.virtualinfinity.atrobots.snapshots;\n\nimport net.virtualinfinity.atrobots.measures.AbsoluteAngle;\nimport net.virtualinfinity.atrobots.measures.Temperature;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link RobotSnapshot}.\n* It contains ten unit test cases for the {@link RobotSnapshot#hashCode()} method.\n*/\nclass RobotSnapshotTest3 {"
	},
	{
		"original_code": "// MissileSnapshot.java\npackage net.virtualinfinity.atrobots.snapshots;\r\n\r\nimport net.virtualinfinity.atrobots.measures.Duration;\r\n\r\n/**\r\n * @author Daniel Pitts\r\n */\r\npublic class MissileSnapshot extends ArenaObjectSnapshot {\r\n\r\n    private final boolean overburn;\r\n\r\n    private final Duration age;\r\n\r\n    public MissileSnapshot(boolean overburn, Duration age) {\r\n        this.overburn = overburn;\r\n        this.age = age;\r\n    }\r\n\r\n    public void visit(SnapshotVisitor visitor) {\r\n        visitor.acceptMissile(this);\r\n    }\r\n\r\n    public boolean isOverburn() {\r\n        return overburn;\r\n    }\r\n\r\n    public Duration getAge() {\r\n        return age;\r\n    }\r\n}\r\n",
		"id": "EvoSuiteBenchmark/86_at-robots2-j/src/main/java/net/virtualinfinity/atrobots/snapshots/MissileSnapshotTest.java",
		"test_prompt": "// MissileSnapshotTest.java\npackage net.virtualinfinity.atrobots.snapshots;\n\nimport net.virtualinfinity.atrobots.measures.Duration;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link MissileSnapshot}.\n* It contains ten unit test cases for the {@link MissileSnapshot#isOverburn()} method.\n*/\nclass MissileSnapshotTest {"
	},
	{
		"original_code": "// ScanSnapshot.java\npackage net.virtualinfinity.atrobots.snapshots;\r\n\r\nimport net.virtualinfinity.atrobots.measures.AngleBracket;\r\nimport net.virtualinfinity.atrobots.measures.Vector;\r\nimport java.awt.*;\r\n\r\n/**\r\n * @author Daniel Pitts\r\n */\r\npublic class ScanSnapshot extends ArenaObjectSnapshot {\r\n\r\n    private final AngleBracket angleBracket;\r\n\r\n    private final double maxDistance;\r\n\r\n    private final Vector matchVector;\r\n\r\n    private final boolean accuracyAvailable;\r\n\r\n    private final int accuracy;\r\n\r\n    private final boolean successful;\r\n\r\n    public ScanSnapshot(AngleBracket angleBracket, double maxDistance, boolean successful, Vector matchVector, boolean accuracyAvailable, int accuracy) {\r\n        this.angleBracket = angleBracket;\r\n        this.maxDistance = maxDistance;\r\n        this.successful = successful;\r\n        this.matchVector = matchVector;\r\n        this.accuracyAvailable = accuracyAvailable;\r\n        this.accuracy = accuracy;\r\n    }\r\n\r\n    public void visit(SnapshotVisitor visitor) {\r\n        visitor.acceptScan(this);\r\n    }\r\n\r\n    public AngleBracket getAngleBracket() {\r\n        return angleBracket;\r\n    }\r\n\r\n    public double getMaxDistance() {\r\n        return maxDistance;\r\n    }\r\n\r\n    public Vector getMatchVector() {\r\n        return matchVector;\r\n    }\r\n\r\n    public boolean isSuccessful() {\r\n        return successful;\r\n    }\r\n\r\n    public Shape getScanArea() {\r\n        return shapeFor(getAngleBracket());\r\n    }\r\n\r\n    private Shape shapeFor(AngleBracket bracket) {\r\n        return bracket.toShape(getPositionVector().getX(), getPositionVector().getY(), getMaxDistance());\r\n    }\r\n\r\n    public Shape getAccuracyArea() {\r\n        if (!accuracyAvailable) {\r\n            return getScanArea();\r\n        }\r\n        return shapeFor(getAccuracyBracket());\r\n    }\r\n\r\n    public AngleBracket getAccuracyBracket() {\r\n        return getAngleBracket().subrange(Math.max(0, .5 - (accuracy * .25 + .125)), Math.min(1, .5 - (accuracy * .25 - .125)));\r\n    }\r\n\r\n    public boolean isAccuracyAvailable() {\r\n        return accuracyAvailable;\r\n    }\r\n\r\n    public int getAccuracy() {\r\n        return accuracy;\r\n    }\r\n}\r\n",
		"id": "EvoSuiteBenchmark/86_at-robots2-j/src/main/java/net/virtualinfinity/atrobots/snapshots/ScanSnapshotTest0.java",
		"test_prompt": "// ScanSnapshotTest0.java\npackage net.virtualinfinity.atrobots.snapshots;\n\nimport net.virtualinfinity.atrobots.measures.AngleBracket;\nimport net.virtualinfinity.atrobots.measures.Vector;\nimport java.awt.*;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link ScanSnapshot}.\n* It contains ten unit test cases for the {@link ScanSnapshot#isSuccessful()} method.\n*/\nclass ScanSnapshotTest0 {"
	},
	{
		"original_code": "// ScanSnapshot.java\npackage net.virtualinfinity.atrobots.snapshots;\r\n\r\nimport net.virtualinfinity.atrobots.measures.AngleBracket;\r\nimport net.virtualinfinity.atrobots.measures.Vector;\r\nimport java.awt.*;\r\n\r\n/**\r\n * @author Daniel Pitts\r\n */\r\npublic class ScanSnapshot extends ArenaObjectSnapshot {\r\n\r\n    private final AngleBracket angleBracket;\r\n\r\n    private final double maxDistance;\r\n\r\n    private final Vector matchVector;\r\n\r\n    private final boolean accuracyAvailable;\r\n\r\n    private final int accuracy;\r\n\r\n    private final boolean successful;\r\n\r\n    public ScanSnapshot(AngleBracket angleBracket, double maxDistance, boolean successful, Vector matchVector, boolean accuracyAvailable, int accuracy) {\r\n        this.angleBracket = angleBracket;\r\n        this.maxDistance = maxDistance;\r\n        this.successful = successful;\r\n        this.matchVector = matchVector;\r\n        this.accuracyAvailable = accuracyAvailable;\r\n        this.accuracy = accuracy;\r\n    }\r\n\r\n    public void visit(SnapshotVisitor visitor) {\r\n        visitor.acceptScan(this);\r\n    }\r\n\r\n    public AngleBracket getAngleBracket() {\r\n        return angleBracket;\r\n    }\r\n\r\n    public double getMaxDistance() {\r\n        return maxDistance;\r\n    }\r\n\r\n    public Vector getMatchVector() {\r\n        return matchVector;\r\n    }\r\n\r\n    public boolean isSuccessful() {\r\n        return successful;\r\n    }\r\n\r\n    public Shape getScanArea() {\r\n        return shapeFor(getAngleBracket());\r\n    }\r\n\r\n    private Shape shapeFor(AngleBracket bracket) {\r\n        return bracket.toShape(getPositionVector().getX(), getPositionVector().getY(), getMaxDistance());\r\n    }\r\n\r\n    public Shape getAccuracyArea() {\r\n        if (!accuracyAvailable) {\r\n            return getScanArea();\r\n        }\r\n        return shapeFor(getAccuracyBracket());\r\n    }\r\n\r\n    public AngleBracket getAccuracyBracket() {\r\n        return getAngleBracket().subrange(Math.max(0, .5 - (accuracy * .25 + .125)), Math.min(1, .5 - (accuracy * .25 - .125)));\r\n    }\r\n\r\n    public boolean isAccuracyAvailable() {\r\n        return accuracyAvailable;\r\n    }\r\n\r\n    public int getAccuracy() {\r\n        return accuracy;\r\n    }\r\n}\r\n",
		"id": "EvoSuiteBenchmark/86_at-robots2-j/src/main/java/net/virtualinfinity/atrobots/snapshots/ScanSnapshotTest1.java",
		"test_prompt": "// ScanSnapshotTest1.java\npackage net.virtualinfinity.atrobots.snapshots;\n\nimport net.virtualinfinity.atrobots.measures.AngleBracket;\nimport net.virtualinfinity.atrobots.measures.Vector;\nimport java.awt.*;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link ScanSnapshot}.\n* It contains ten unit test cases for the {@link ScanSnapshot#isAccuracyAvailable()} method.\n*/\nclass ScanSnapshotTest1 {"
	},
	{
		"original_code": "// ArenaObjectSnapshot.java\npackage net.virtualinfinity.atrobots.snapshots;\r\n\r\nimport net.virtualinfinity.atrobots.measures.Vector;\r\n\r\n/**\r\n * @author Daniel Pitts\r\n */\r\npublic abstract class ArenaObjectSnapshot {\r\n\r\n    private Vector positionVector;\r\n\r\n    private Vector velocityVector;\r\n\r\n    private boolean dead;\r\n\r\n    public void setPositionVector(Vector positionVector) {\r\n        this.positionVector = positionVector;\r\n    }\r\n\r\n    public void setVelocityVector(Vector velocityVector) {\r\n        this.velocityVector = velocityVector;\r\n    }\r\n\r\n    public abstract void visit(SnapshotVisitor visitor);\r\n\r\n    public double getY() {\r\n        return getPositionVector().getY();\r\n    }\r\n\r\n    public double getX() {\r\n        return getPositionVector().getX();\r\n    }\r\n\r\n    public double getVelocityX() {\r\n        return getVelocityVector().getX();\r\n    }\r\n\r\n    public double getVelocityY() {\r\n        return getVelocityVector().getY();\r\n    }\r\n\r\n    public Vector getPositionVector() {\r\n        return positionVector;\r\n    }\r\n\r\n    public Vector getVelocityVector() {\r\n        return velocityVector;\r\n    }\r\n\r\n    public void setDead(boolean dead) {\r\n        this.dead = dead;\r\n    }\r\n\r\n    public boolean isDead() {\r\n        return dead;\r\n    }\r\n}\r\n",
		"id": "EvoSuiteBenchmark/86_at-robots2-j/src/main/java/net/virtualinfinity/atrobots/snapshots/ArenaObjectSnapshotTest.java",
		"test_prompt": "// ArenaObjectSnapshotTest.java\npackage net.virtualinfinity.atrobots.snapshots;\n\nimport net.virtualinfinity.atrobots.measures.Vector;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link ArenaObjectSnapshot}.\n* It contains ten unit test cases for the {@link ArenaObjectSnapshot#isDead()} method.\n*/\nclass ArenaObjectSnapshotTest {"
	},
	{
		"original_code": "// RobotSource.java\npackage net.virtualinfinity.atrobots.config;\r\n\r\nimport net.virtualinfinity.atrobots.compiler.AtRobotCompiler;\r\nimport net.virtualinfinity.atrobots.compiler.AtRobotCompilerOutput;\r\nimport net.virtualinfinity.atrobots.compiler.RobotFactory;\r\nimport java.io.IOException;\r\n\r\n/**\r\n * Describes a source for an entrant.\r\n *\r\n * @author Daniel Pitts\r\n */\r\npublic abstract class RobotSource {\r\n\r\n    private AtRobotCompiler compiler = new AtRobotCompiler();\r\n\r\n    public final String getName() {\r\n        return getDefaultName();\r\n    }\r\n\r\n    protected String getDefaultName() {\r\n        return null;\r\n    }\r\n\r\n    public final RobotFactory createFactory() throws IOException {\r\n        return compile(getCompiler()).createRobotFactory(getName());\r\n    }\r\n\r\n    protected abstract AtRobotCompilerOutput compile(AtRobotCompiler compiler) throws IOException;\r\n\r\n    public AtRobotCompiler getCompiler() {\r\n        return compiler;\r\n    }\r\n\r\n    @Override\r\n    public String toString() {\r\n        return getName();\r\n    }\r\n}\r\n",
		"id": "EvoSuiteBenchmark/86_at-robots2-j/src/main/java/net/virtualinfinity/atrobots/config/RobotSourceTest.java",
		"test_prompt": "// RobotSourceTest.java\npackage net.virtualinfinity.atrobots.config;\n\nimport net.virtualinfinity.atrobots.compiler.AtRobotCompiler;\nimport net.virtualinfinity.atrobots.compiler.AtRobotCompilerOutput;\nimport net.virtualinfinity.atrobots.compiler.RobotFactory;\nimport java.io.IOException;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link RobotSource}.\n* It contains ten unit test cases for the {@link RobotSource#createFactory()} method.\n*/\nclass RobotSourceTest {"
	},
	{
		"original_code": "// RobotFile.java\npackage net.virtualinfinity.atrobots.config;\r\n\r\nimport net.virtualinfinity.atrobots.compiler.AtRobotCompiler;\r\nimport net.virtualinfinity.atrobots.compiler.AtRobotCompilerOutput;\r\nimport java.io.File;\r\nimport java.io.FileNotFoundException;\r\nimport java.io.IOException;\r\n\r\n/**\r\n * TODO: Describe this class.\r\n *\r\n * @author Daniel Pitts\r\n */\r\npublic class RobotFile extends RobotSource {\r\n\r\n    private File file;\r\n\r\n    private String defaultName;\r\n\r\n    public RobotFile(File file) throws IOException {\r\n        setFile(file);\r\n    }\r\n\r\n    public void setFile(File file) throws IOException {\r\n        defaultName = null;\r\n        if (!file.exists()) {\r\n            throw new FileNotFoundException(file.getPath());\r\n        }\r\n        this.file = file.getCanonicalFile();\r\n        defaultName = removeEndIgnoreCase(file.getName(), \".at2\");\r\n    }\r\n\r\n    public static String removeEndIgnoreCase(String s, String suffix) {\r\n        if (s == null) {\r\n            return null;\r\n        }\r\n        if (s.toLowerCase().endsWith(suffix)) {\r\n            return s.substring(0, s.length() - suffix.length());\r\n        }\r\n        return s;\r\n    }\r\n\r\n    @Override\r\n    protected String getDefaultName() {\r\n        return defaultName;\r\n    }\r\n\r\n    protected AtRobotCompilerOutput compile(AtRobotCompiler compiler) throws IOException {\r\n        return compiler.compile(file);\r\n    }\r\n}\r\n",
		"id": "EvoSuiteBenchmark/86_at-robots2-j/src/main/java/net/virtualinfinity/atrobots/config/RobotFileTest.java",
		"test_prompt": "// RobotFileTest.java\npackage net.virtualinfinity.atrobots.config;\n\nimport net.virtualinfinity.atrobots.compiler.AtRobotCompiler;\nimport net.virtualinfinity.atrobots.compiler.AtRobotCompilerOutput;\nimport java.io.File;\nimport java.io.FileNotFoundException;\nimport java.io.IOException;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link RobotFile}.\n* It contains ten unit test cases for the {@link RobotFile#removeEndIgnoreCase(String, String)} method.\n*/\nclass RobotFileTest {"
	},
	{
		"original_code": "// PairTournament.java\npackage net.virtualinfinity.atrobots.tournament;\n\nimport net.virtualinfinity.atrobots.arena.FrameBuilder;\nimport net.virtualinfinity.atrobots.compiler.RobotFactory;\nimport net.virtualinfinity.atrobots.game.Game;\nimport net.virtualinfinity.atrobots.game.GameResult;\nimport java.util.List;\nimport java.util.concurrent.*;\n\n/**\n * @author <a href='mailto:daniel.pitts@cbs.com'>Daniel Pitts</a>\n */\npublic class PairTournament implements Callable<PairTournamentResults> {\n\n    private List<RobotFactory> competitors;\n\n    private int roundsPerPairing = 25;\n\n    private FrameBuilder frameBuffer;\n\n    private final long delay;\n\n    private final ExecutorService executorService;\n\n    public PairTournament() {\n        this(Executors.newFixedThreadPool(Runtime.getRuntime().availableProcessors() + 1), 0);\n    }\n\n    public PairTournament(long delay) {\n        this(Executors.newSingleThreadExecutor(), delay);\n    }\n\n    public PairTournament(ExecutorService executorService, long delay) {\n        this.executorService = executorService;\n        this.delay = delay;\n    }\n\n    public PairTournamentResults call() throws InterruptedException, ExecutionException {\n        final PairTournamentResults results = new PairTournamentResults();\n        final CompletionService<GameResult> service = new ExecutorCompletionService<GameResult>(executorService);\n        int toTake = 0;\n        for (final RobotFactory left : competitors) {\n            for (final RobotFactory right : competitors) {\n                if (right == left) {\n                    break;\n                }\n                ++toTake;\n                service.submit(new CompeteWorker(results, left, right));\n            }\n        }\n        for (int count = 0; count < toTake; ++count) {\n            results.recordScores(service.take().get());\n        }\n        return results;\n    }\n\n    public List<RobotFactory> getCompetitors() {\n        return competitors;\n    }\n\n    public void setCompetitors(List<RobotFactory> competitors) {\n        this.competitors = competitors;\n    }\n\n    public int getRoundsPerPairing() {\n        return roundsPerPairing;\n    }\n\n    public void setRoundsPerPairing(int roundsPerPairing) {\n        this.roundsPerPairing = roundsPerPairing;\n    }\n\n    private GameResult compete(RobotFactory left, RobotFactory right) throws InterruptedException {\n        System.out.println(\"Running pairing: \" + left.getName() + \" vs \" + right.getName());\n        final Object lock = frameBuffer != null ? frameBuffer : new Object();\n        synchronized (lock) {\n            final Game game = new Game(roundsPerPairing, frameBuffer);\n            game.addEntrant(left);\n            game.addEntrant(right);\n            game.nextRound();\n            while (game.stepRound()) {\n                if (delay > 0) {\n                    Thread.sleep(delay);\n                }\n            }\n            System.out.println(\"Pairing complete: \" + left.getName() + \" vs \" + right.getName());\n            return game.getFinalResults();\n        }\n    }\n\n    public FrameBuilder getFrameBuffer() {\n        if (frameBuffer == null) {\n            frameBuffer = new FrameBuilder();\n        }\n        return frameBuffer;\n    }\n\n    private class CompeteWorker implements Callable<GameResult> {\n\n        private final PairTournamentResults results;\n\n        private final RobotFactory left;\n\n        private final RobotFactory right;\n\n        public CompeteWorker(PairTournamentResults results, RobotFactory left, RobotFactory right) {\n            this.results = results;\n            this.left = left;\n            this.right = right;\n        }\n\n        public GameResult call() throws InterruptedException {\n            return compete(left, right);\n        }\n    }\n}\n",
		"id": "EvoSuiteBenchmark/86_at-robots2-j/src/main/java/net/virtualinfinity/atrobots/tournament/PairTournamentTest.java",
		"test_prompt": "// PairTournamentTest.java\npackage net.virtualinfinity.atrobots.tournament;\n\nimport net.virtualinfinity.atrobots.arena.FrameBuilder;\nimport net.virtualinfinity.atrobots.compiler.RobotFactory;\nimport net.virtualinfinity.atrobots.game.Game;\nimport net.virtualinfinity.atrobots.game.GameResult;\nimport java.util.List;\nimport java.util.concurrent.*;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link PairTournament}.\n* It contains ten unit test cases for the {@link PairTournament#call()} method.\n*/\nclass PairTournamentTest {"
	},
	{
		"original_code": "// RobotGameResult.java\npackage net.virtualinfinity.atrobots.game;\n\nimport net.virtualinfinity.atrobots.compiler.RobotFactory;\nimport net.virtualinfinity.atrobots.robot.RobotScore;\n\n/**\n * TODO: JavaDoc\n *\n * @author <a href='mailto:daniel.pitts@cbs.com'>Daniel Pitts</a>\n */\npublic class RobotGameResult implements Comparable<RobotGameResult> {\n\n    private final RobotFactory entrant;\n\n    private final RobotScore finalScore;\n\n    RobotGameResult(RobotFactory entrant, RobotScore finalScore) {\n        this.entrant = entrant;\n        this.finalScore = finalScore;\n    }\n\n    public RobotFactory getEntrant() {\n        return entrant;\n    }\n\n    public RobotScore getFinalScore() {\n        return finalScore;\n    }\n\n    public int compareTo(RobotGameResult o) {\n        return RobotScore.RobotScoreComparator.compareScores(finalScore, o.finalScore);\n    }\n\n    @Override\n    public String toString() {\n        return \"RobotGameResult{\" + \"entrant=\" + entrant + \", finalScore=\" + finalScore + '}';\n    }\n}\n",
		"id": "EvoSuiteBenchmark/86_at-robots2-j/src/main/java/net/virtualinfinity/atrobots/game/RobotGameResultTest.java",
		"test_prompt": "// RobotGameResultTest.java\npackage net.virtualinfinity.atrobots.game;\n\nimport net.virtualinfinity.atrobots.compiler.RobotFactory;\nimport net.virtualinfinity.atrobots.robot.RobotScore;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link RobotGameResult}.\n* It contains ten unit test cases for the {@link RobotGameResult#compareTo(RobotGameResult)} method.\n*/\nclass RobotGameResultTest {"
	},
	{
		"original_code": "// Round.java\npackage net.virtualinfinity.atrobots.game;\r\n\r\nimport net.virtualinfinity.atrobots.arena.Arena;\r\nimport net.virtualinfinity.atrobots.arena.FrameBuilder;\r\nimport net.virtualinfinity.atrobots.arena.RoundTimer;\r\nimport net.virtualinfinity.atrobots.measures.Duration;\r\nimport java.util.ArrayList;\r\nimport java.util.List;\r\n\r\n/**\r\n * TODO: Document\r\n *\r\n * @author Daniel Pitts\r\n */\r\npublic class Round {\r\n\r\n    private Duration roundEnd = Duration.fromCycles(10);\r\n\r\n    private Duration maxCycles = Duration.fromCycles(25000);\r\n\r\n    private final Arena arena;\r\n\r\n    private final RoundTimer roundTimer;\r\n\r\n    private final List<RoundListener> roundListeners = new ArrayList<RoundListener>();\r\n\r\n    private boolean roundOver;\r\n\r\n    public Round(FrameBuilder frameBuffer) {\r\n        arena = new Arena(frameBuffer);\r\n        roundTimer = arena.getRoundTimer();\r\n    }\r\n\r\n    public void addRoundListener(RoundListener roundListener) {\r\n        roundListeners.add(roundListener);\r\n    }\r\n\r\n    public Arena getArena() {\r\n        return arena;\r\n    }\r\n\r\n    public boolean step() {\r\n        if (!roundOver) {\r\n            arena.simulate();\r\n            checkEndCondition();\r\n            if (roundOver) {\r\n                for (RoundListener roundListener : roundListeners) {\r\n                    roundListener.roundOver();\r\n                }\r\n            }\r\n        }\r\n        return roundOver;\r\n    }\r\n\r\n    private void checkEndCondition() {\r\n        if (arena.isOnlyOneRobotAlive()) {\r\n            roundEnd = roundEnd.minus(Duration.ONE_CYCLE);\r\n            if (roundEnd.getCycles() == 0) {\r\n                roundOver = true;\r\n            }\r\n        }\r\n        if (isArenaEmpty() || isRoundExpired()) {\r\n            roundOver = true;\r\n        }\r\n    }\r\n\r\n    private boolean isRoundExpired() {\r\n        return roundTimer.getTime().compareTo(maxCycles) > 0;\r\n    }\r\n\r\n    private boolean isArenaEmpty() {\r\n        return arena.countActiveRobots() == 0;\r\n    }\r\n\r\n    public void finalizeRound() {\r\n        arena.endRound();\r\n    }\r\n}\r\n",
		"id": "EvoSuiteBenchmark/86_at-robots2-j/src/main/java/net/virtualinfinity/atrobots/game/RoundTest.java",
		"test_prompt": "// RoundTest.java\npackage net.virtualinfinity.atrobots.game;\n\nimport net.virtualinfinity.atrobots.arena.Arena;\nimport net.virtualinfinity.atrobots.arena.FrameBuilder;\nimport net.virtualinfinity.atrobots.arena.RoundTimer;\nimport net.virtualinfinity.atrobots.measures.Duration;\nimport java.util.ArrayList;\nimport java.util.List;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link Round}.\n* It contains ten unit test cases for the {@link Round#step()} method.\n*/\nclass RoundTest {"
	},
	{
		"original_code": "// Game.java\npackage net.virtualinfinity.atrobots.game;\r\n\r\nimport net.virtualinfinity.atrobots.arena.FrameBuilder;\r\nimport net.virtualinfinity.atrobots.arena.RoundState;\r\nimport net.virtualinfinity.atrobots.arena.SimulationObserver;\r\nimport net.virtualinfinity.atrobots.compiler.RobotFactory;\r\nimport net.virtualinfinity.atrobots.robot.FinalRobotScore;\r\nimport net.virtualinfinity.atrobots.robot.Robot;\r\nimport net.virtualinfinity.atrobots.robot.RobotScore;\r\nimport net.virtualinfinity.atrobots.robot.RobotScoreKeeper;\r\nimport java.util.*;\r\n\r\n/**\r\n * This class coordinates rounds, entrants, and the simulation frame buffer.\r\n *\r\n * @author Daniel Pitts\r\n */\r\npublic class Game implements RoundListener {\r\n\r\n    private RoundState roundState;\r\n\r\n    private Round round;\r\n\r\n    private int roundNumber = 0;\r\n\r\n    private int totalRounds;\r\n\r\n    private int maxProcessorSpeed = 5;\r\n\r\n    private final FrameBuilder frameBuffer;\r\n\r\n    private final List<RobotFactory> entrants = Collections.synchronizedList(new ArrayList<RobotFactory>());\r\n\r\n    private int nextEntrantId;\r\n\r\n    private final Map<RobotFactory, RobotScoreKeeper> scoreKeepers = new IdentityHashMap<RobotFactory, RobotScoreKeeper>();\r\n\r\n    public Game(int totalRounds) {\r\n        this(totalRounds, new FrameBuilder());\r\n    }\r\n\r\n    public Game(int totalRounds, FrameBuilder frameBuffer) {\r\n        this.totalRounds = totalRounds;\r\n        this.frameBuffer = frameBuffer;\r\n    }\r\n\r\n    /**\r\n     * Get the current round.\r\n     *\r\n     * @return the current round.\r\n     */\r\n    public synchronized Round getRound() {\r\n        return round;\r\n    }\r\n\r\n    /**\r\n     * Get the total number of rounds.\r\n     *\r\n     * @return the total number of rounds.\r\n     */\r\n    public synchronized int getTotalRounds() {\r\n        return totalRounds;\r\n    }\r\n\r\n    /**\r\n     * Start the next round. This ends the current round.\r\n     */\r\n    public synchronized void nextRound() {\r\n        if (round != null) {\r\n            round.finalizeRound();\r\n        }\r\n        if (roundNumber < getTotalRounds()) {\r\n            roundState = new StandardRoundState(totalRounds, ++roundNumber);\r\n            round = new Round(frameBuffer);\r\n            round.addRoundListener(this);\r\n            for (int i = 0, entrantsSize = entrants.size(); i < entrantsSize; i++) {\r\n                round.getArena().addRobot(createRobotFor(entrants.get(i), i));\r\n            }\r\n            round.getArena().buildFrame();\r\n        } else {\r\n            round = null;\r\n            gameOver();\r\n        }\r\n    }\r\n\r\n    private void gameOver() {\r\n    }\r\n\r\n    /**\r\n     * Create a robot for the given entrant.\r\n     *\r\n     * @param entrant the entrant\r\n     * @param id      the id for the robot.\r\n     * @return the robot.\r\n     */\r\n    protected Robot createRobotFor(RobotFactory entrant, int id) {\r\n        return entrant.createRobot(roundState, getMaxProcessorSpeed(), getScoreKeeper(entrant), round.getArena(), id);\r\n    }\r\n\r\n    private RobotScoreKeeper getScoreKeeper(RobotFactory entrant) {\r\n        RobotScoreKeeper robotScoreKeeper = scoreKeepers.get(entrant);\r\n        if (robotScoreKeeper == null) {\r\n            robotScoreKeeper = new RobotScoreKeeper();\r\n            scoreKeepers.put(entrant, robotScoreKeeper);\r\n        }\r\n        return robotScoreKeeper;\r\n    }\r\n\r\n    private RobotScore getFinalRobotScore(RobotFactory entrant) {\r\n        final RobotScoreKeeper robotScoreKeeper = scoreKeepers.get(entrant);\r\n        if (robotScoreKeeper == null) {\r\n            throw new IllegalArgumentException(\"Entrant did not participate in this game, so you can't get its final score.\");\r\n        }\r\n        return FinalRobotScore.copyOf(getScoreKeeper(entrant));\r\n    }\r\n\r\n    public GameResult getFinalResults() {\r\n        List<RobotGameResult> results = new ArrayList<RobotGameResult>();\r\n        for (Map.Entry<RobotFactory, RobotScoreKeeper> robots : scoreKeepers.entrySet()) {\r\n            results.add(new RobotGameResult(robots.getKey(), FinalRobotScore.copyOf(robots.getValue())));\r\n        }\r\n        Collections.sort(results);\r\n        return new GameResult(results);\r\n    }\r\n\r\n    /**\r\n     * Add an observer.\r\n     *\r\n     * @param observer the observer to add.\r\n     */\r\n    public synchronized void addSimulationObserver(SimulationObserver observer) {\r\n        frameBuffer.addSimulationObserver(observer);\r\n    }\r\n\r\n    /**\r\n     * Remove an observer.\r\n     *\r\n     * @param observer the observer to remove.\r\n     */\r\n    public synchronized void removeSimulationObserver(SimulationObserver observer) {\r\n        frameBuffer.removeSimulationObserver(observer);\r\n    }\r\n\r\n    /**\r\n     * Add an entrant for the next round.\r\n     *\r\n     * @param entrant the entrant\r\n     */\r\n    public synchronized void addEntrant(RobotFactory entrant) {\r\n        entrants.add(entrant);\r\n    }\r\n\r\n    /**\r\n     * Execute one step in the simulation.\r\n     */\r\n    public synchronized boolean stepRound() {\r\n        if (round == null) {\r\n            return false;\r\n        }\r\n        getRound().step();\r\n        return round != null;\r\n    }\r\n\r\n    public void roundOver() {\r\n        nextRound();\r\n    }\r\n\r\n    public int getMaxProcessorSpeed() {\r\n        return maxProcessorSpeed;\r\n    }\r\n\r\n    public void setMaxProcessorSpeed(int maxProcessorSpeed) {\r\n        this.maxProcessorSpeed = maxProcessorSpeed;\r\n    }\r\n}\r\n",
		"id": "EvoSuiteBenchmark/86_at-robots2-j/src/main/java/net/virtualinfinity/atrobots/game/GameTest.java",
		"test_prompt": "// GameTest.java\npackage net.virtualinfinity.atrobots.game;\n\nimport net.virtualinfinity.atrobots.arena.FrameBuilder;\nimport net.virtualinfinity.atrobots.arena.RoundState;\nimport net.virtualinfinity.atrobots.arena.SimulationObserver;\nimport net.virtualinfinity.atrobots.compiler.RobotFactory;\nimport net.virtualinfinity.atrobots.robot.FinalRobotScore;\nimport net.virtualinfinity.atrobots.robot.Robot;\nimport net.virtualinfinity.atrobots.robot.RobotScore;\nimport net.virtualinfinity.atrobots.robot.RobotScoreKeeper;\nimport java.util.*;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link Game}.\n* It contains ten unit test cases for the {@link Game#stepRound()} method.\n*/\nclass GameTest {"
	},
	{
		"original_code": "// RobotScanner.java\npackage net.virtualinfinity.atrobots.robot;\r\n\r\nimport net.virtualinfinity.atrobots.ArenaObjectVisitorAdaptor;\r\nimport net.virtualinfinity.atrobots.arena.Position;\r\nimport net.virtualinfinity.atrobots.measures.AbsoluteAngle;\r\nimport net.virtualinfinity.atrobots.measures.AngleBracket;\r\nimport net.virtualinfinity.atrobots.measures.Vector;\r\n\r\n/**\r\n * TODO: Describe this class.\r\n *\r\n * @author Daniel Pitts\r\n */\r\npublic class RobotScanner extends ArenaObjectVisitorAdaptor {\r\n\r\n    private final Robot source;\r\n\r\n    private final double maxDistanceSquared;\r\n\r\n    private final Position position;\r\n\r\n    private final AngleBracket angleBracket;\r\n\r\n    private final boolean calculateAccuracy;\r\n\r\n    private Vector vectorToClosest = null;\r\n\r\n    private double closestDistanceSquared;\r\n\r\n    private Robot closest = null;\r\n\r\n    private Vector counterClockwiseBound;\r\n\r\n    private Vector clockwiseBound;\r\n\r\n    private static final int ROBOT_RADIUS_SQUARED = 16;\r\n\r\n    public RobotScanner(Robot source, Position position, AngleBracket angleBracket, double maxDistance, boolean calculateAccuracy) {\r\n        this.source = source;\r\n        this.position = position;\r\n        this.angleBracket = angleBracket;\r\n        this.calculateAccuracy = calculateAccuracy;\r\n        this.counterClockwiseBound = getUnit(angleBracket.getCounterClockwiseBound());\r\n        this.clockwiseBound = getUnit(angleBracket.getClockwiseBound());\r\n        this.maxDistanceSquared = maxDistance * maxDistance;\r\n        this.closestDistanceSquared = maxDistanceSquared;\r\n    }\r\n\r\n    private static Vector getUnit(AbsoluteAngle absoluteAngle) {\r\n        if (absoluteAngle == null) {\r\n            return null;\r\n        }\r\n        return absoluteAngle.toUnitVector();\r\n    }\r\n\r\n    public void visit(Robot arenaObject) {\r\n        if (arenaObject == source) {\r\n            return;\r\n        }\r\n        final Vector position = arenaObject.getPosition().getVectorTo(this.position);\r\n        final double distanceSquared = position.getMagnitudeSquared();\r\n        if (distanceSquared < closestDistanceSquared && withinArc(position, distanceSquared)) {\r\n            closest = arenaObject;\r\n            closestDistanceSquared = distanceSquared;\r\n            vectorToClosest = position;\r\n        }\r\n    }\r\n\r\n    private boolean withinArc(Vector position, double distanceSquared) {\r\n        return angleBracket.contains(position.getAngle()) || rayIntersection(position, distanceSquared, counterClockwiseBound) || rayIntersection(position, distanceSquared, clockwiseBound);\r\n    }\r\n\r\n    private boolean rayIntersection(Vector circleCenter, double distanceSquared, Vector direction) {\r\n        final double a = direction.dot(circleCenter);\r\n        return a > 0 && a * a > distanceSquared - ROBOT_RADIUS_SQUARED;\r\n    }\r\n\r\n    public RobotScanResult toScanResult() {\r\n        if (closest == null || closestDistanceSquared > maxDistanceSquared) {\r\n            return new RobotScanResult();\r\n        }\r\n        final AbsoluteAngle angleToClosest = vectorToClosest.getAngle();\r\n        final int accuracy = calculateAccuracy ? findAccuracy(angleToClosest) : 0;\r\n        return new RobotScanResult(closest, Math.sqrt(closestDistanceSquared), angleToClosest, accuracy);\r\n    }\r\n\r\n    private int findAccuracy(AbsoluteAngle angleToClosest) {\r\n        final int accuracy;\r\n        final double v = 0.5d - angleBracket.fractionTo(angleToClosest);\r\n        if (angleBracket.getRangeSize().getBygrees() <= 4) {\r\n            accuracy = roundAwayFromZero(v * 2) * 2;\r\n        } else {\r\n            accuracy = roundAwayFromZero(v * 4);\r\n        }\r\n        return Math.min(2, Math.max(-2, accuracy));\r\n    }\r\n\r\n    private static int roundAwayFromZero(double value) {\r\n        return (int) (value < 0 ? Math.ceil(value - 0.5d) : Math.floor(value + 0.5d));\r\n    }\r\n}\r\n",
		"id": "EvoSuiteBenchmark/86_at-robots2-j/src/main/java/net/virtualinfinity/atrobots/robot/RobotScannerTest.java",
		"test_prompt": "// RobotScannerTest.java\npackage net.virtualinfinity.atrobots.robot;\n\nimport net.virtualinfinity.atrobots.ArenaObjectVisitorAdaptor;\nimport net.virtualinfinity.atrobots.arena.Position;\nimport net.virtualinfinity.atrobots.measures.AbsoluteAngle;\nimport net.virtualinfinity.atrobots.measures.AngleBracket;\nimport net.virtualinfinity.atrobots.measures.Vector;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link RobotScanner}.\n* It contains ten unit test cases for the {@link RobotScanner#toScanResult()} method.\n*/\nclass RobotScannerTest {"
	},
	{
		"original_code": "// FinalRobotScore.java\npackage net.virtualinfinity.atrobots.robot;\n\n/**\n * A constant (thread safe) robot score.\n *\n * @author <a href='mailto:daniel.pitts@cbs.com'>Daniel Pitts</a>\n */\npublic final class FinalRobotScore implements RobotScore {\n\n    final int totalKills;\n\n    final int totalDeaths;\n\n    final int totalTies;\n\n    final int totalWins;\n\n    final double totalDamageInflicted;\n\n    private FinalRobotScore(RobotScore score) {\n        this.totalKills = score.getTotalKills();\n        this.totalDeaths = score.getTotalDeaths();\n        this.totalTies = score.getTotalTies();\n        this.totalWins = score.getTotalWins();\n        this.totalDamageInflicted = score.getTotalDamageInflicted();\n    }\n\n    public static RobotScore copyOf(RobotScore score) {\n        if (score == null) {\n            throw new NullPointerException();\n        }\n        if (score instanceof FinalRobotScore) {\n            return score;\n        }\n        return new FinalRobotScore(score);\n    }\n\n    public int getTotalKills() {\n        return totalKills;\n    }\n\n    public int getTotalDeaths() {\n        return totalDeaths;\n    }\n\n    public int getTotalTies() {\n        return totalTies;\n    }\n\n    public int getTotalWins() {\n        return totalWins;\n    }\n\n    public double getTotalDamageInflicted() {\n        return totalDamageInflicted;\n    }\n\n    @Override\n    public String toString() {\n        return \"Final Score: (\" + totalWins + \",\" + totalTies + \",\" + totalKills + \",\" + totalDeaths + \",\" + totalDamageInflicted + ')';\n    }\n}\n",
		"id": "EvoSuiteBenchmark/86_at-robots2-j/src/main/java/net/virtualinfinity/atrobots/robot/FinalRobotScoreTest.java",
		"test_prompt": "// FinalRobotScoreTest.java\npackage net.virtualinfinity.atrobots.robot;\n\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link FinalRobotScore}.\n* It contains ten unit test cases for the {@link FinalRobotScore#copyOf(RobotScore)} method.\n*/\nclass FinalRobotScoreTest {"
	},
	{
		"original_code": "// Robot.java\npackage net.virtualinfinity.atrobots.robot;\r\n\r\nimport net.virtualinfinity.atrobots.ArenaObjectVisitor;\r\nimport net.virtualinfinity.atrobots.arena.*;\r\nimport net.virtualinfinity.atrobots.arenaobjects.DamageInflicter;\r\nimport net.virtualinfinity.atrobots.computer.*;\r\nimport net.virtualinfinity.atrobots.hardware.HasHeading;\r\nimport net.virtualinfinity.atrobots.hardware.HasOverburner;\r\nimport net.virtualinfinity.atrobots.hardware.armor.Armor;\r\nimport net.virtualinfinity.atrobots.hardware.armor.ArmorDepletionListener;\r\nimport net.virtualinfinity.atrobots.hardware.heatsinks.HeatSinks;\r\nimport net.virtualinfinity.atrobots.hardware.mines.MineLayer;\r\nimport net.virtualinfinity.atrobots.hardware.missiles.Missile;\r\nimport net.virtualinfinity.atrobots.hardware.missiles.MissileFactory;\r\nimport net.virtualinfinity.atrobots.hardware.radio.Transceiver;\r\nimport net.virtualinfinity.atrobots.hardware.scanning.ScanResult;\r\nimport net.virtualinfinity.atrobots.hardware.scanning.ScanSource;\r\nimport net.virtualinfinity.atrobots.hardware.scanning.radar.Radar;\r\nimport net.virtualinfinity.atrobots.hardware.scanning.sonar.Sonar;\r\nimport net.virtualinfinity.atrobots.hardware.shield.Shield;\r\nimport net.virtualinfinity.atrobots.hardware.throttle.Throttle;\r\nimport net.virtualinfinity.atrobots.hardware.transponder.Transponder;\r\nimport net.virtualinfinity.atrobots.hardware.turret.Turret;\r\nimport net.virtualinfinity.atrobots.interrupts.Destructable;\r\nimport net.virtualinfinity.atrobots.measures.*;\r\nimport net.virtualinfinity.atrobots.ports.PortHandler;\r\nimport net.virtualinfinity.atrobots.snapshots.ArenaObjectSnapshot;\r\nimport net.virtualinfinity.atrobots.snapshots.RobotSnapshot;\r\nimport java.util.ArrayList;\r\nimport java.util.List;\r\n\r\n/**\r\n * @author Daniel Pitts\r\n */\r\npublic class Robot extends TangibleArenaObject implements Resettable, HasHeading, Destructable, HasOverburner, MissileFactory, ArmorDepletionListener, ScanSource, DamageInflicter {\r\n\r\n    private final HeatSinks heatSinks = new HeatSinks();\r\n\r\n    private final Odometer odometer = new Odometer();\r\n\r\n    private final String name;\r\n\r\n    private final int id;\r\n\r\n    private final RobotScore score;\r\n\r\n    private Throttle throttle;\r\n\r\n    private Computer computer;\r\n\r\n    private Turret turret;\r\n\r\n    private Transponder transponder;\r\n\r\n    private Transceiver transceiver;\r\n\r\n    private Duration lastDamageGiven = Duration.fromCycles(0);\r\n\r\n    private Duration lastDamageTaken = Duration.fromCycles(0);\r\n\r\n    private Armor armor;\r\n\r\n    private Radar radar;\r\n\r\n    private Sonar sonar;\r\n\r\n    private Temperature shutdownLevel;\r\n\r\n    private MineLayer mineLayer;\r\n\r\n    private Shield shield;\r\n\r\n    private boolean overburn;\r\n\r\n    private HardwareBus hardwareBus;\r\n\r\n    private static final RelativeAngle STEERING_SPEED = RelativeAngle.fromBygrees(8);\r\n\r\n    private final Position oldPosition = new Position();\r\n\r\n    private int roundKills;\r\n\r\n    private final List<RobotListener> robotListeners = new ArrayList<RobotListener>();\r\n\r\n    private final Heading desiredHeading = new Heading(heading.getAngle());\r\n\r\n    {\r\n        position.setOdometer(odometer);\r\n    }\r\n\r\n    public Robot(String name, int id, RobotScore score) {\r\n        this.name = name;\r\n        this.id = id;\r\n        this.score = score;\r\n        this.roundKills = 0;\r\n    }\r\n\r\n    public void setComputer(Computer computer) {\r\n        this.computer = computer;\r\n        computer.setId(getId());\r\n        computer.setName(getName());\r\n    }\r\n\r\n    public Computer getComputer() {\r\n        return computer;\r\n    }\r\n\r\n    public void destruct() {\r\n        getArmor().destruct();\r\n    }\r\n\r\n    public Turret getTurret() {\r\n        return turret;\r\n    }\r\n\r\n    public void setOverburn(boolean overburn) {\r\n        this.overburn = overburn;\r\n    }\r\n\r\n    public Transponder getTransponder() {\r\n        return transponder;\r\n    }\r\n\r\n    public Speed getSpeed() {\r\n        return speed;\r\n    }\r\n\r\n    public Duration getLastDamageGiven() {\r\n        return lastDamageGiven;\r\n    }\r\n\r\n    public Duration getLastDamageTaken() {\r\n        return lastDamageTaken;\r\n    }\r\n\r\n    public Transceiver getTransceiver() {\r\n        return transceiver;\r\n    }\r\n\r\n    public Odometer getOdometer() {\r\n        return odometer;\r\n    }\r\n\r\n    public Throttle getThrottle() {\r\n        return throttle;\r\n    }\r\n\r\n    public HeatSinks getHeatSinks() {\r\n        return heatSinks;\r\n    }\r\n\r\n    public Heading getHeading() {\r\n        return heading;\r\n    }\r\n\r\n    public PortHandler getTurretOffsetSensor() {\r\n        return new PortHandler() {\r\n\r\n            public short read() {\r\n                return (short) getTurretShift();\r\n            }\r\n        };\r\n    }\r\n\r\n    public int getTurretShift() {\r\n        return getTurret().getHeading().getAngle().getAngleCounterClockwiseTo(getHeading().getAngle()).getBygrees();\r\n    }\r\n\r\n    public Armor getArmor() {\r\n        return armor;\r\n    }\r\n\r\n    public Radar getRadar() {\r\n        return radar;\r\n    }\r\n\r\n    public PortHandler getAimTurretPort() {\r\n        return new PortHandler() {\r\n\r\n            public void write(short value) {\r\n                setTurretOffset(RelativeAngle.fromBygrees(value));\r\n            }\r\n        };\r\n    }\r\n\r\n    private void setTurretOffset(RelativeAngle angle) {\r\n        getTurret().getHeading().setAngle(getHeading().getAngle().counterClockwise(angle));\r\n    }\r\n\r\n    public Heading getDesiredHeading() {\r\n        return desiredHeading;\r\n    }\r\n\r\n    public Sonar getSonar() {\r\n        return sonar;\r\n    }\r\n\r\n    public PortHandler getOverburnLatchPort() {\r\n        return new PortHandler() {\r\n\r\n            public short read() {\r\n                return (short) (isOverburn() ? 1 : 0);\r\n            }\r\n\r\n            public void write(short value) {\r\n                setOverburn(value != 0);\r\n            }\r\n        };\r\n    }\r\n\r\n    public boolean isOverburn() {\r\n        return overburn;\r\n    }\r\n\r\n    public PortHandler getShutdownLevelLatchPort() {\r\n        return new PortHandler() {\r\n\r\n            public short read() {\r\n                return (short) hardwareBus.getShutdownLevel();\r\n            }\r\n\r\n            public void write(short value) {\r\n                hardwareBus.setShutdownLevel(value);\r\n            }\r\n        };\r\n    }\r\n\r\n    public MineLayer getMineLayer() {\r\n        return mineLayer;\r\n    }\r\n\r\n    public Shield getShield() {\r\n        return shield;\r\n    }\r\n\r\n    public void setTurret(Turret turret) {\r\n        this.turret = turret;\r\n    }\r\n\r\n    public void setTransponder(Transponder transponder) {\r\n        this.transponder = transponder;\r\n    }\r\n\r\n    public void setTransceiver(Transceiver transceiver) {\r\n        this.transceiver = transceiver;\r\n    }\r\n\r\n    public void setArmor(Armor armor) {\r\n        this.armor = armor;\r\n        armor.setArmorDepletionListener(this);\r\n    }\r\n\r\n    public void setRadar(Radar radar) {\r\n        this.radar = radar;\r\n    }\r\n\r\n    public void setSonar(Sonar sonar) {\r\n        this.sonar = sonar;\r\n    }\r\n\r\n    public void setMineLayer(MineLayer mineLayer) {\r\n        this.mineLayer = mineLayer;\r\n    }\r\n\r\n    public void setShield(Shield shield) {\r\n        this.shield = shield;\r\n    }\r\n\r\n    public HardwareBus getHardwareBus() {\r\n        return hardwareBus;\r\n    }\r\n\r\n    public void setHardwareBus(HardwareBus hardwareBus) {\r\n        this.hardwareBus = hardwareBus;\r\n    }\r\n\r\n    public void reset() {\r\n        setOverburn(false);\r\n    }\r\n\r\n    public ScanResult scan(AngleBracket angleBracket, double maxDistance, boolean calculateAccuracy, boolean includeTargetDetails) {\r\n        final RobotScanResult scanResult = doScan(angleBracket, maxDistance, calculateAccuracy);\r\n        if (scanResult.successful()) {\r\n            getComputer().getRegisters().getTargetId().set((short) scanResult.getMatch().transponder.getId());\r\n            if (includeTargetDetails) {\r\n                final AbsoluteAngle matchAngle = scanResult.getMatch().getHeading().getAngle();\r\n                final AbsoluteAngle turretAngle = getTurret().getHeading().getAngle();\r\n                getComputer().getRegisters().getTargetHeading().set((short) matchAngle.getAngleCounterClockwiseTo(turretAngle).getBygrees());\r\n                getComputer().getRegisters().getTargetThrottle().set((short) scanResult.getMatch().getThrottle().getPower());\r\n                getComputer().getRegisters().getTargetVelocity().set((short) Math.round(scanResult.getMatch().getSpeed().times(Duration.ONE_CYCLE) * 100));\r\n            }\r\n        }\r\n        return scanResult;\r\n    }\r\n\r\n    private RobotScanResult doScan(AngleBracket angleBracket, double maxDistance, boolean calculateAccuracy) {\r\n        Position position = getPosition();\r\n        final RobotScanner robotScanner = new RobotScanner(this, position, angleBracket, maxDistance, calculateAccuracy);\r\n        getArena().visitActiveRobots(robotScanner);\r\n        final RobotScanResult scanResult = robotScanner.toScanResult();\r\n        final Scan object = new Scan(angleBracket, maxDistance, scanResult.successful(), scanResult.getMatchPositionVector(), calculateAccuracy && scanResult.successful(), scanResult.getAccuracy());\r\n        getArena().addIntangible(object);\r\n        object.getPosition().copyFrom(position);\r\n        return scanResult;\r\n    }\r\n\r\n    protected ArenaObjectSnapshot createSpecificSnapshot() {\r\n        final RobotSnapshot robotSnapshot = new RobotSnapshot();\r\n        robotSnapshot.setTemperature(getHeatSinks().getTemperature());\r\n        robotSnapshot.setArmor(getArmor().getRemaining());\r\n        robotSnapshot.setOverburn(isOverburn());\r\n        robotSnapshot.setActiveShield(getShield().isActive());\r\n        robotSnapshot.setHeading(getHeading().getAngle());\r\n        robotSnapshot.setTurretHeading(getTurret().getHeading().getAngle());\r\n        robotSnapshot.setName(getName());\r\n        robotSnapshot.setId(getId());\r\n        robotSnapshot.setRoundKills(getRoundKills());\r\n        robotSnapshot.setTotalKills(getTotalKills());\r\n        robotSnapshot.setTotalDeaths(getTotalDeaths());\r\n        robotSnapshot.setTotalWins(getTotalWins());\r\n        robotSnapshot.setTotalTies(getTotalTies());\r\n        robotSnapshot.setLastMessage(getComputer().getLastMessage());\r\n        return robotSnapshot;\r\n    }\r\n\r\n    @Override\r\n    public void checkCollision(TangibleArenaObject robot) {\r\n        if (robot.getPosition().getVectorTo(position).getMagnitudeSquared() < 64) {\r\n            collides();\r\n            robot.collides();\r\n        }\r\n    }\r\n\r\n    public void collides() {\r\n        position.copyFrom(oldPosition);\r\n        if (speed.times(Duration.ONE_CYCLE) > 2) {\r\n            armor.inflictDamage(1);\r\n        }\r\n        throttle.setPower(0);\r\n        throttle.setDesiredPower(0);\r\n        computer.getRegisters().getCollisionCount().increment();\r\n    }\r\n\r\n    public void inflictDamage(DamageInflicter cause, double damageAmount) {\r\n        if (!isDead()) {\r\n            final double unabsorbedAmount = shield.absorbDamage(damageAmount);\r\n            if (unabsorbedAmount > 0) {\r\n                lastDamageTaken = getArena().getRoundTimer().getTime();\r\n                cause.inflictedDamage(unabsorbedAmount);\r\n            }\r\n            armor.inflictDamage(unabsorbedAmount);\r\n            if (isDead()) {\r\n                cause.killedRobot();\r\n            }\r\n        }\r\n    }\r\n\r\n    public void armorDepleted() {\r\n        if (!isDead()) {\r\n            for (RobotListener listener : robotListeners) {\r\n                listener.died(this);\r\n            }\r\n            die();\r\n            getArena().explosion(this, new LinearDamageFunction(position, isOverburn() ? 1.3 : 1, 25.0));\r\n        }\r\n    }\r\n\r\n    public void update(Duration duration) {\r\n        oldPosition.copyFrom(position);\r\n        super.update(duration);\r\n        getThrottle().update(duration);\r\n        getHeading().moveToward(getDesiredHeading(), STEERING_SPEED);\r\n        getComputer().update(duration);\r\n        if (heatSinks.getTemperature().getLogScale() >= 500) {\r\n            destruct();\r\n        } else if (heatSinks.getTemperature().getLogScale() >= 475) {\r\n            armor.inflictDamage(duration.getCycles() / 4d);\r\n        } else if (heatSinks.getTemperature().getLogScale() >= 450) {\r\n            armor.inflictDamage(duration.getCycles() / 8d);\r\n        } else if (heatSinks.getTemperature().getLogScale() >= 400) {\r\n            armor.inflictDamage(duration.getCycles() / 16d);\r\n        } else if (heatSinks.getTemperature().getLogScale() >= 350) {\r\n            armor.inflictDamage(duration.getCycles() / 32d);\r\n        } else if (heatSinks.getTemperature().getLogScale() >= 300) {\r\n            armor.inflictDamage(duration.getCycles() / 64d);\r\n        }\r\n        heatSinks.cool(isOverburn() ? getCoolTemp(duration).times(0.66) : getCoolTemp(duration));\r\n        shield.update(duration);\r\n        if (position.getX() < 4 || position.getX() > 1000 - 4 || position.getY() < 4 || position.getY() > 1000 - 4) {\r\n            collides();\r\n        }\r\n    }\r\n\r\n    private Temperature getCoolTemp(Duration duration) {\r\n        return Temperature.fromLogScale(duration.getCycles() * 1.125);\r\n    }\r\n\r\n    public void setThrottle(Throttle throttle) {\r\n        this.throttle = throttle;\r\n        throttle.setSpeed(speed);\r\n        throttle.setHeatSinks(heatSinks);\r\n    }\r\n\r\n    public void winRound() {\r\n        for (RobotListener listener : robotListeners) {\r\n            listener.wonRound(this);\r\n        }\r\n    }\r\n\r\n    public void tieRound() {\r\n        for (RobotListener listener : robotListeners) {\r\n            listener.tiedRound(this);\r\n        }\r\n    }\r\n\r\n    public void killedRobot() {\r\n        for (RobotListener listener : robotListeners) {\r\n            listener.killedRobot(this);\r\n        }\r\n    }\r\n\r\n    public void inflictedDamage(double amount) {\r\n        lastDamageGiven = getArena().getRoundTimer().getTime();\r\n        for (RobotListener listener : robotListeners) {\r\n            listener.inflictedDamage(this, amount);\r\n        }\r\n    }\r\n\r\n    public String getName() {\r\n        return name;\r\n    }\r\n\r\n    public int getTotalKills() {\r\n        return score.getTotalKills();\r\n    }\r\n\r\n    public int getRoundKills() {\r\n        return roundKills;\r\n    }\r\n\r\n    public int getTotalDeaths() {\r\n        return score.getTotalDeaths();\r\n    }\r\n\r\n    public int getId() {\r\n        return id;\r\n    }\r\n\r\n    public int getTotalWins() {\r\n        return score.getTotalWins();\r\n    }\r\n\r\n    public int getTotalTies() {\r\n        return score.getTotalTies();\r\n    }\r\n\r\n    public void addRobotListener(RobotListener robotListener) {\r\n        robotListeners.add(robotListener);\r\n    }\r\n\r\n    @Override\r\n    protected void arenaConnected(Arena arena) {\r\n        transceiver.setRadioDispatcher(arena.getRadioDispatcher());\r\n    }\r\n\r\n    public InterruptHandler createGetRobotInfoInterruptHandler(MemoryCell speed, MemoryCell lastDamageTaken, MemoryCell lastDamageGiven) {\r\n        return new GetRobotInfoInterrupt(speed, lastDamageTaken, lastDamageGiven);\r\n    }\r\n\r\n    public GetRobotStatisticsInterrupt createGetRobotStatisticsInterrupt(MemoryCell totalKills, MemoryCell roundKills, MemoryCell totalDeaths) {\r\n        return new GetRobotStatisticsInterrupt(totalKills, roundKills, totalDeaths);\r\n    }\r\n\r\n    public Missile createMissile(AbsoluteAngle heading, Position position, double power) {\r\n        return new Missile(this, position, heading, power, this.isOverburn());\r\n    }\r\n\r\n    public void accept(ArenaObjectVisitor arenaObjectVisitor) {\r\n        arenaObjectVisitor.visit(this);\r\n    }\r\n\r\n    /**\r\n     * @author Daniel Pitts\r\n     */\r\n    public class GetRobotInfoInterrupt extends InterruptHandler {\r\n\r\n        private final MemoryCell speed;\r\n\r\n        private final MemoryCell lastDamageTaken;\r\n\r\n        private final MemoryCell lastDamageGiven;\r\n\r\n        private GetRobotInfoInterrupt(MemoryCell speed, MemoryCell lastDamageTaken, MemoryCell lastDamageGiven) {\r\n            this.speed = speed;\r\n            this.lastDamageTaken = lastDamageTaken;\r\n            this.lastDamageGiven = lastDamageGiven;\r\n        }\r\n\r\n        public void handleInterrupt() {\r\n            speed.set((short) Math.round(getSpeed().times(Duration.ONE_CYCLE) * 100));\r\n            lastDamageGiven.set((short) getLastDamageGiven().getCycles());\r\n            lastDamageTaken.set((short) getLastDamageTaken().getCycles());\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @author Daniel Pitts\r\n     */\r\n    public class GetRobotStatisticsInterrupt extends InterruptHandler {\r\n\r\n        private final MemoryCell totalKills;\r\n\r\n        private final MemoryCell roundKills;\r\n\r\n        private final MemoryCell totalDeaths;\r\n\r\n        private GetRobotStatisticsInterrupt(MemoryCell totalKills, MemoryCell roundKills, MemoryCell totalDeaths) {\r\n            this.totalKills = totalKills;\r\n            this.roundKills = roundKills;\r\n            this.totalDeaths = totalDeaths;\r\n        }\r\n\r\n        public void handleInterrupt() {\r\n            totalKills.set((short) getTotalKills());\r\n            roundKills.set((short) getRoundKills());\r\n            totalDeaths.set((short) getTotalDeaths());\r\n        }\r\n    }\r\n}\r\n",
		"id": "EvoSuiteBenchmark/86_at-robots2-j/src/main/java/net/virtualinfinity/atrobots/robot/RobotTest0.java",
		"test_prompt": "// RobotTest0.java\npackage net.virtualinfinity.atrobots.robot;\n\nimport net.virtualinfinity.atrobots.ArenaObjectVisitor;\nimport net.virtualinfinity.atrobots.arena.*;\nimport net.virtualinfinity.atrobots.arenaobjects.DamageInflicter;\nimport net.virtualinfinity.atrobots.computer.*;\nimport net.virtualinfinity.atrobots.hardware.HasHeading;\nimport net.virtualinfinity.atrobots.hardware.HasOverburner;\nimport net.virtualinfinity.atrobots.hardware.armor.Armor;\nimport net.virtualinfinity.atrobots.hardware.armor.ArmorDepletionListener;\nimport net.virtualinfinity.atrobots.hardware.heatsinks.HeatSinks;\nimport net.virtualinfinity.atrobots.hardware.mines.MineLayer;\nimport net.virtualinfinity.atrobots.hardware.missiles.Missile;\nimport net.virtualinfinity.atrobots.hardware.missiles.MissileFactory;\nimport net.virtualinfinity.atrobots.hardware.radio.Transceiver;\nimport net.virtualinfinity.atrobots.hardware.scanning.ScanResult;\nimport net.virtualinfinity.atrobots.hardware.scanning.ScanSource;\nimport net.virtualinfinity.atrobots.hardware.scanning.radar.Radar;\nimport net.virtualinfinity.atrobots.hardware.scanning.sonar.Sonar;\nimport net.virtualinfinity.atrobots.hardware.shield.Shield;\nimport net.virtualinfinity.atrobots.hardware.throttle.Throttle;\nimport net.virtualinfinity.atrobots.hardware.transponder.Transponder;\nimport net.virtualinfinity.atrobots.hardware.turret.Turret;\nimport net.virtualinfinity.atrobots.interrupts.Destructable;\nimport net.virtualinfinity.atrobots.measures.*;\nimport net.virtualinfinity.atrobots.ports.PortHandler;\nimport net.virtualinfinity.atrobots.snapshots.ArenaObjectSnapshot;\nimport net.virtualinfinity.atrobots.snapshots.RobotSnapshot;\nimport java.util.ArrayList;\nimport java.util.List;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link Robot}.\n* It contains ten unit test cases for the {@link Robot#isOverburn()} method.\n*/\nclass RobotTest0 {"
	},
	{
		"original_code": "// Robot.java\npackage net.virtualinfinity.atrobots.robot;\r\n\r\nimport net.virtualinfinity.atrobots.ArenaObjectVisitor;\r\nimport net.virtualinfinity.atrobots.arena.*;\r\nimport net.virtualinfinity.atrobots.arenaobjects.DamageInflicter;\r\nimport net.virtualinfinity.atrobots.computer.*;\r\nimport net.virtualinfinity.atrobots.hardware.HasHeading;\r\nimport net.virtualinfinity.atrobots.hardware.HasOverburner;\r\nimport net.virtualinfinity.atrobots.hardware.armor.Armor;\r\nimport net.virtualinfinity.atrobots.hardware.armor.ArmorDepletionListener;\r\nimport net.virtualinfinity.atrobots.hardware.heatsinks.HeatSinks;\r\nimport net.virtualinfinity.atrobots.hardware.mines.MineLayer;\r\nimport net.virtualinfinity.atrobots.hardware.missiles.Missile;\r\nimport net.virtualinfinity.atrobots.hardware.missiles.MissileFactory;\r\nimport net.virtualinfinity.atrobots.hardware.radio.Transceiver;\r\nimport net.virtualinfinity.atrobots.hardware.scanning.ScanResult;\r\nimport net.virtualinfinity.atrobots.hardware.scanning.ScanSource;\r\nimport net.virtualinfinity.atrobots.hardware.scanning.radar.Radar;\r\nimport net.virtualinfinity.atrobots.hardware.scanning.sonar.Sonar;\r\nimport net.virtualinfinity.atrobots.hardware.shield.Shield;\r\nimport net.virtualinfinity.atrobots.hardware.throttle.Throttle;\r\nimport net.virtualinfinity.atrobots.hardware.transponder.Transponder;\r\nimport net.virtualinfinity.atrobots.hardware.turret.Turret;\r\nimport net.virtualinfinity.atrobots.interrupts.Destructable;\r\nimport net.virtualinfinity.atrobots.measures.*;\r\nimport net.virtualinfinity.atrobots.ports.PortHandler;\r\nimport net.virtualinfinity.atrobots.snapshots.ArenaObjectSnapshot;\r\nimport net.virtualinfinity.atrobots.snapshots.RobotSnapshot;\r\nimport java.util.ArrayList;\r\nimport java.util.List;\r\n\r\n/**\r\n * @author Daniel Pitts\r\n */\r\npublic class Robot extends TangibleArenaObject implements Resettable, HasHeading, Destructable, HasOverburner, MissileFactory, ArmorDepletionListener, ScanSource, DamageInflicter {\r\n\r\n    private final HeatSinks heatSinks = new HeatSinks();\r\n\r\n    private final Odometer odometer = new Odometer();\r\n\r\n    private final String name;\r\n\r\n    private final int id;\r\n\r\n    private final RobotScore score;\r\n\r\n    private Throttle throttle;\r\n\r\n    private Computer computer;\r\n\r\n    private Turret turret;\r\n\r\n    private Transponder transponder;\r\n\r\n    private Transceiver transceiver;\r\n\r\n    private Duration lastDamageGiven = Duration.fromCycles(0);\r\n\r\n    private Duration lastDamageTaken = Duration.fromCycles(0);\r\n\r\n    private Armor armor;\r\n\r\n    private Radar radar;\r\n\r\n    private Sonar sonar;\r\n\r\n    private Temperature shutdownLevel;\r\n\r\n    private MineLayer mineLayer;\r\n\r\n    private Shield shield;\r\n\r\n    private boolean overburn;\r\n\r\n    private HardwareBus hardwareBus;\r\n\r\n    private static final RelativeAngle STEERING_SPEED = RelativeAngle.fromBygrees(8);\r\n\r\n    private final Position oldPosition = new Position();\r\n\r\n    private int roundKills;\r\n\r\n    private final List<RobotListener> robotListeners = new ArrayList<RobotListener>();\r\n\r\n    private final Heading desiredHeading = new Heading(heading.getAngle());\r\n\r\n    {\r\n        position.setOdometer(odometer);\r\n    }\r\n\r\n    public Robot(String name, int id, RobotScore score) {\r\n        this.name = name;\r\n        this.id = id;\r\n        this.score = score;\r\n        this.roundKills = 0;\r\n    }\r\n\r\n    public void setComputer(Computer computer) {\r\n        this.computer = computer;\r\n        computer.setId(getId());\r\n        computer.setName(getName());\r\n    }\r\n\r\n    public Computer getComputer() {\r\n        return computer;\r\n    }\r\n\r\n    public void destruct() {\r\n        getArmor().destruct();\r\n    }\r\n\r\n    public Turret getTurret() {\r\n        return turret;\r\n    }\r\n\r\n    public void setOverburn(boolean overburn) {\r\n        this.overburn = overburn;\r\n    }\r\n\r\n    public Transponder getTransponder() {\r\n        return transponder;\r\n    }\r\n\r\n    public Speed getSpeed() {\r\n        return speed;\r\n    }\r\n\r\n    public Duration getLastDamageGiven() {\r\n        return lastDamageGiven;\r\n    }\r\n\r\n    public Duration getLastDamageTaken() {\r\n        return lastDamageTaken;\r\n    }\r\n\r\n    public Transceiver getTransceiver() {\r\n        return transceiver;\r\n    }\r\n\r\n    public Odometer getOdometer() {\r\n        return odometer;\r\n    }\r\n\r\n    public Throttle getThrottle() {\r\n        return throttle;\r\n    }\r\n\r\n    public HeatSinks getHeatSinks() {\r\n        return heatSinks;\r\n    }\r\n\r\n    public Heading getHeading() {\r\n        return heading;\r\n    }\r\n\r\n    public PortHandler getTurretOffsetSensor() {\r\n        return new PortHandler() {\r\n\r\n            public short read() {\r\n                return (short) getTurretShift();\r\n            }\r\n        };\r\n    }\r\n\r\n    public int getTurretShift() {\r\n        return getTurret().getHeading().getAngle().getAngleCounterClockwiseTo(getHeading().getAngle()).getBygrees();\r\n    }\r\n\r\n    public Armor getArmor() {\r\n        return armor;\r\n    }\r\n\r\n    public Radar getRadar() {\r\n        return radar;\r\n    }\r\n\r\n    public PortHandler getAimTurretPort() {\r\n        return new PortHandler() {\r\n\r\n            public void write(short value) {\r\n                setTurretOffset(RelativeAngle.fromBygrees(value));\r\n            }\r\n        };\r\n    }\r\n\r\n    private void setTurretOffset(RelativeAngle angle) {\r\n        getTurret().getHeading().setAngle(getHeading().getAngle().counterClockwise(angle));\r\n    }\r\n\r\n    public Heading getDesiredHeading() {\r\n        return desiredHeading;\r\n    }\r\n\r\n    public Sonar getSonar() {\r\n        return sonar;\r\n    }\r\n\r\n    public PortHandler getOverburnLatchPort() {\r\n        return new PortHandler() {\r\n\r\n            public short read() {\r\n                return (short) (isOverburn() ? 1 : 0);\r\n            }\r\n\r\n            public void write(short value) {\r\n                setOverburn(value != 0);\r\n            }\r\n        };\r\n    }\r\n\r\n    public boolean isOverburn() {\r\n        return overburn;\r\n    }\r\n\r\n    public PortHandler getShutdownLevelLatchPort() {\r\n        return new PortHandler() {\r\n\r\n            public short read() {\r\n                return (short) hardwareBus.getShutdownLevel();\r\n            }\r\n\r\n            public void write(short value) {\r\n                hardwareBus.setShutdownLevel(value);\r\n            }\r\n        };\r\n    }\r\n\r\n    public MineLayer getMineLayer() {\r\n        return mineLayer;\r\n    }\r\n\r\n    public Shield getShield() {\r\n        return shield;\r\n    }\r\n\r\n    public void setTurret(Turret turret) {\r\n        this.turret = turret;\r\n    }\r\n\r\n    public void setTransponder(Transponder transponder) {\r\n        this.transponder = transponder;\r\n    }\r\n\r\n    public void setTransceiver(Transceiver transceiver) {\r\n        this.transceiver = transceiver;\r\n    }\r\n\r\n    public void setArmor(Armor armor) {\r\n        this.armor = armor;\r\n        armor.setArmorDepletionListener(this);\r\n    }\r\n\r\n    public void setRadar(Radar radar) {\r\n        this.radar = radar;\r\n    }\r\n\r\n    public void setSonar(Sonar sonar) {\r\n        this.sonar = sonar;\r\n    }\r\n\r\n    public void setMineLayer(MineLayer mineLayer) {\r\n        this.mineLayer = mineLayer;\r\n    }\r\n\r\n    public void setShield(Shield shield) {\r\n        this.shield = shield;\r\n    }\r\n\r\n    public HardwareBus getHardwareBus() {\r\n        return hardwareBus;\r\n    }\r\n\r\n    public void setHardwareBus(HardwareBus hardwareBus) {\r\n        this.hardwareBus = hardwareBus;\r\n    }\r\n\r\n    public void reset() {\r\n        setOverburn(false);\r\n    }\r\n\r\n    public ScanResult scan(AngleBracket angleBracket, double maxDistance, boolean calculateAccuracy, boolean includeTargetDetails) {\r\n        final RobotScanResult scanResult = doScan(angleBracket, maxDistance, calculateAccuracy);\r\n        if (scanResult.successful()) {\r\n            getComputer().getRegisters().getTargetId().set((short) scanResult.getMatch().transponder.getId());\r\n            if (includeTargetDetails) {\r\n                final AbsoluteAngle matchAngle = scanResult.getMatch().getHeading().getAngle();\r\n                final AbsoluteAngle turretAngle = getTurret().getHeading().getAngle();\r\n                getComputer().getRegisters().getTargetHeading().set((short) matchAngle.getAngleCounterClockwiseTo(turretAngle).getBygrees());\r\n                getComputer().getRegisters().getTargetThrottle().set((short) scanResult.getMatch().getThrottle().getPower());\r\n                getComputer().getRegisters().getTargetVelocity().set((short) Math.round(scanResult.getMatch().getSpeed().times(Duration.ONE_CYCLE) * 100));\r\n            }\r\n        }\r\n        return scanResult;\r\n    }\r\n\r\n    private RobotScanResult doScan(AngleBracket angleBracket, double maxDistance, boolean calculateAccuracy) {\r\n        Position position = getPosition();\r\n        final RobotScanner robotScanner = new RobotScanner(this, position, angleBracket, maxDistance, calculateAccuracy);\r\n        getArena().visitActiveRobots(robotScanner);\r\n        final RobotScanResult scanResult = robotScanner.toScanResult();\r\n        final Scan object = new Scan(angleBracket, maxDistance, scanResult.successful(), scanResult.getMatchPositionVector(), calculateAccuracy && scanResult.successful(), scanResult.getAccuracy());\r\n        getArena().addIntangible(object);\r\n        object.getPosition().copyFrom(position);\r\n        return scanResult;\r\n    }\r\n\r\n    protected ArenaObjectSnapshot createSpecificSnapshot() {\r\n        final RobotSnapshot robotSnapshot = new RobotSnapshot();\r\n        robotSnapshot.setTemperature(getHeatSinks().getTemperature());\r\n        robotSnapshot.setArmor(getArmor().getRemaining());\r\n        robotSnapshot.setOverburn(isOverburn());\r\n        robotSnapshot.setActiveShield(getShield().isActive());\r\n        robotSnapshot.setHeading(getHeading().getAngle());\r\n        robotSnapshot.setTurretHeading(getTurret().getHeading().getAngle());\r\n        robotSnapshot.setName(getName());\r\n        robotSnapshot.setId(getId());\r\n        robotSnapshot.setRoundKills(getRoundKills());\r\n        robotSnapshot.setTotalKills(getTotalKills());\r\n        robotSnapshot.setTotalDeaths(getTotalDeaths());\r\n        robotSnapshot.setTotalWins(getTotalWins());\r\n        robotSnapshot.setTotalTies(getTotalTies());\r\n        robotSnapshot.setLastMessage(getComputer().getLastMessage());\r\n        return robotSnapshot;\r\n    }\r\n\r\n    @Override\r\n    public void checkCollision(TangibleArenaObject robot) {\r\n        if (robot.getPosition().getVectorTo(position).getMagnitudeSquared() < 64) {\r\n            collides();\r\n            robot.collides();\r\n        }\r\n    }\r\n\r\n    public void collides() {\r\n        position.copyFrom(oldPosition);\r\n        if (speed.times(Duration.ONE_CYCLE) > 2) {\r\n            armor.inflictDamage(1);\r\n        }\r\n        throttle.setPower(0);\r\n        throttle.setDesiredPower(0);\r\n        computer.getRegisters().getCollisionCount().increment();\r\n    }\r\n\r\n    public void inflictDamage(DamageInflicter cause, double damageAmount) {\r\n        if (!isDead()) {\r\n            final double unabsorbedAmount = shield.absorbDamage(damageAmount);\r\n            if (unabsorbedAmount > 0) {\r\n                lastDamageTaken = getArena().getRoundTimer().getTime();\r\n                cause.inflictedDamage(unabsorbedAmount);\r\n            }\r\n            armor.inflictDamage(unabsorbedAmount);\r\n            if (isDead()) {\r\n                cause.killedRobot();\r\n            }\r\n        }\r\n    }\r\n\r\n    public void armorDepleted() {\r\n        if (!isDead()) {\r\n            for (RobotListener listener : robotListeners) {\r\n                listener.died(this);\r\n            }\r\n            die();\r\n            getArena().explosion(this, new LinearDamageFunction(position, isOverburn() ? 1.3 : 1, 25.0));\r\n        }\r\n    }\r\n\r\n    public void update(Duration duration) {\r\n        oldPosition.copyFrom(position);\r\n        super.update(duration);\r\n        getThrottle().update(duration);\r\n        getHeading().moveToward(getDesiredHeading(), STEERING_SPEED);\r\n        getComputer().update(duration);\r\n        if (heatSinks.getTemperature().getLogScale() >= 500) {\r\n            destruct();\r\n        } else if (heatSinks.getTemperature().getLogScale() >= 475) {\r\n            armor.inflictDamage(duration.getCycles() / 4d);\r\n        } else if (heatSinks.getTemperature().getLogScale() >= 450) {\r\n            armor.inflictDamage(duration.getCycles() / 8d);\r\n        } else if (heatSinks.getTemperature().getLogScale() >= 400) {\r\n            armor.inflictDamage(duration.getCycles() / 16d);\r\n        } else if (heatSinks.getTemperature().getLogScale() >= 350) {\r\n            armor.inflictDamage(duration.getCycles() / 32d);\r\n        } else if (heatSinks.getTemperature().getLogScale() >= 300) {\r\n            armor.inflictDamage(duration.getCycles() / 64d);\r\n        }\r\n        heatSinks.cool(isOverburn() ? getCoolTemp(duration).times(0.66) : getCoolTemp(duration));\r\n        shield.update(duration);\r\n        if (position.getX() < 4 || position.getX() > 1000 - 4 || position.getY() < 4 || position.getY() > 1000 - 4) {\r\n            collides();\r\n        }\r\n    }\r\n\r\n    private Temperature getCoolTemp(Duration duration) {\r\n        return Temperature.fromLogScale(duration.getCycles() * 1.125);\r\n    }\r\n\r\n    public void setThrottle(Throttle throttle) {\r\n        this.throttle = throttle;\r\n        throttle.setSpeed(speed);\r\n        throttle.setHeatSinks(heatSinks);\r\n    }\r\n\r\n    public void winRound() {\r\n        for (RobotListener listener : robotListeners) {\r\n            listener.wonRound(this);\r\n        }\r\n    }\r\n\r\n    public void tieRound() {\r\n        for (RobotListener listener : robotListeners) {\r\n            listener.tiedRound(this);\r\n        }\r\n    }\r\n\r\n    public void killedRobot() {\r\n        for (RobotListener listener : robotListeners) {\r\n            listener.killedRobot(this);\r\n        }\r\n    }\r\n\r\n    public void inflictedDamage(double amount) {\r\n        lastDamageGiven = getArena().getRoundTimer().getTime();\r\n        for (RobotListener listener : robotListeners) {\r\n            listener.inflictedDamage(this, amount);\r\n        }\r\n    }\r\n\r\n    public String getName() {\r\n        return name;\r\n    }\r\n\r\n    public int getTotalKills() {\r\n        return score.getTotalKills();\r\n    }\r\n\r\n    public int getRoundKills() {\r\n        return roundKills;\r\n    }\r\n\r\n    public int getTotalDeaths() {\r\n        return score.getTotalDeaths();\r\n    }\r\n\r\n    public int getId() {\r\n        return id;\r\n    }\r\n\r\n    public int getTotalWins() {\r\n        return score.getTotalWins();\r\n    }\r\n\r\n    public int getTotalTies() {\r\n        return score.getTotalTies();\r\n    }\r\n\r\n    public void addRobotListener(RobotListener robotListener) {\r\n        robotListeners.add(robotListener);\r\n    }\r\n\r\n    @Override\r\n    protected void arenaConnected(Arena arena) {\r\n        transceiver.setRadioDispatcher(arena.getRadioDispatcher());\r\n    }\r\n\r\n    public InterruptHandler createGetRobotInfoInterruptHandler(MemoryCell speed, MemoryCell lastDamageTaken, MemoryCell lastDamageGiven) {\r\n        return new GetRobotInfoInterrupt(speed, lastDamageTaken, lastDamageGiven);\r\n    }\r\n\r\n    public GetRobotStatisticsInterrupt createGetRobotStatisticsInterrupt(MemoryCell totalKills, MemoryCell roundKills, MemoryCell totalDeaths) {\r\n        return new GetRobotStatisticsInterrupt(totalKills, roundKills, totalDeaths);\r\n    }\r\n\r\n    public Missile createMissile(AbsoluteAngle heading, Position position, double power) {\r\n        return new Missile(this, position, heading, power, this.isOverburn());\r\n    }\r\n\r\n    public void accept(ArenaObjectVisitor arenaObjectVisitor) {\r\n        arenaObjectVisitor.visit(this);\r\n    }\r\n\r\n    /**\r\n     * @author Daniel Pitts\r\n     */\r\n    public class GetRobotInfoInterrupt extends InterruptHandler {\r\n\r\n        private final MemoryCell speed;\r\n\r\n        private final MemoryCell lastDamageTaken;\r\n\r\n        private final MemoryCell lastDamageGiven;\r\n\r\n        private GetRobotInfoInterrupt(MemoryCell speed, MemoryCell lastDamageTaken, MemoryCell lastDamageGiven) {\r\n            this.speed = speed;\r\n            this.lastDamageTaken = lastDamageTaken;\r\n            this.lastDamageGiven = lastDamageGiven;\r\n        }\r\n\r\n        public void handleInterrupt() {\r\n            speed.set((short) Math.round(getSpeed().times(Duration.ONE_CYCLE) * 100));\r\n            lastDamageGiven.set((short) getLastDamageGiven().getCycles());\r\n            lastDamageTaken.set((short) getLastDamageTaken().getCycles());\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @author Daniel Pitts\r\n     */\r\n    public class GetRobotStatisticsInterrupt extends InterruptHandler {\r\n\r\n        private final MemoryCell totalKills;\r\n\r\n        private final MemoryCell roundKills;\r\n\r\n        private final MemoryCell totalDeaths;\r\n\r\n        private GetRobotStatisticsInterrupt(MemoryCell totalKills, MemoryCell roundKills, MemoryCell totalDeaths) {\r\n            this.totalKills = totalKills;\r\n            this.roundKills = roundKills;\r\n            this.totalDeaths = totalDeaths;\r\n        }\r\n\r\n        public void handleInterrupt() {\r\n            totalKills.set((short) getTotalKills());\r\n            roundKills.set((short) getRoundKills());\r\n            totalDeaths.set((short) getTotalDeaths());\r\n        }\r\n    }\r\n}\r\n",
		"id": "EvoSuiteBenchmark/86_at-robots2-j/src/main/java/net/virtualinfinity/atrobots/robot/RobotTest1.java",
		"test_prompt": "// RobotTest1.java\npackage net.virtualinfinity.atrobots.robot;\n\nimport net.virtualinfinity.atrobots.ArenaObjectVisitor;\nimport net.virtualinfinity.atrobots.arena.*;\nimport net.virtualinfinity.atrobots.arenaobjects.DamageInflicter;\nimport net.virtualinfinity.atrobots.computer.*;\nimport net.virtualinfinity.atrobots.hardware.HasHeading;\nimport net.virtualinfinity.atrobots.hardware.HasOverburner;\nimport net.virtualinfinity.atrobots.hardware.armor.Armor;\nimport net.virtualinfinity.atrobots.hardware.armor.ArmorDepletionListener;\nimport net.virtualinfinity.atrobots.hardware.heatsinks.HeatSinks;\nimport net.virtualinfinity.atrobots.hardware.mines.MineLayer;\nimport net.virtualinfinity.atrobots.hardware.missiles.Missile;\nimport net.virtualinfinity.atrobots.hardware.missiles.MissileFactory;\nimport net.virtualinfinity.atrobots.hardware.radio.Transceiver;\nimport net.virtualinfinity.atrobots.hardware.scanning.ScanResult;\nimport net.virtualinfinity.atrobots.hardware.scanning.ScanSource;\nimport net.virtualinfinity.atrobots.hardware.scanning.radar.Radar;\nimport net.virtualinfinity.atrobots.hardware.scanning.sonar.Sonar;\nimport net.virtualinfinity.atrobots.hardware.shield.Shield;\nimport net.virtualinfinity.atrobots.hardware.throttle.Throttle;\nimport net.virtualinfinity.atrobots.hardware.transponder.Transponder;\nimport net.virtualinfinity.atrobots.hardware.turret.Turret;\nimport net.virtualinfinity.atrobots.interrupts.Destructable;\nimport net.virtualinfinity.atrobots.measures.*;\nimport net.virtualinfinity.atrobots.ports.PortHandler;\nimport net.virtualinfinity.atrobots.snapshots.ArenaObjectSnapshot;\nimport net.virtualinfinity.atrobots.snapshots.RobotSnapshot;\nimport java.util.ArrayList;\nimport java.util.List;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link Robot}.\n* It contains ten unit test cases for the {@link Robot#scan(AngleBracket, double, boolean, boolean)} method.\n*/\nclass RobotTest1 {"
	},
	{
		"original_code": "// Robot.java\npackage net.virtualinfinity.atrobots.robot;\r\n\r\nimport net.virtualinfinity.atrobots.ArenaObjectVisitor;\r\nimport net.virtualinfinity.atrobots.arena.*;\r\nimport net.virtualinfinity.atrobots.arenaobjects.DamageInflicter;\r\nimport net.virtualinfinity.atrobots.computer.*;\r\nimport net.virtualinfinity.atrobots.hardware.HasHeading;\r\nimport net.virtualinfinity.atrobots.hardware.HasOverburner;\r\nimport net.virtualinfinity.atrobots.hardware.armor.Armor;\r\nimport net.virtualinfinity.atrobots.hardware.armor.ArmorDepletionListener;\r\nimport net.virtualinfinity.atrobots.hardware.heatsinks.HeatSinks;\r\nimport net.virtualinfinity.atrobots.hardware.mines.MineLayer;\r\nimport net.virtualinfinity.atrobots.hardware.missiles.Missile;\r\nimport net.virtualinfinity.atrobots.hardware.missiles.MissileFactory;\r\nimport net.virtualinfinity.atrobots.hardware.radio.Transceiver;\r\nimport net.virtualinfinity.atrobots.hardware.scanning.ScanResult;\r\nimport net.virtualinfinity.atrobots.hardware.scanning.ScanSource;\r\nimport net.virtualinfinity.atrobots.hardware.scanning.radar.Radar;\r\nimport net.virtualinfinity.atrobots.hardware.scanning.sonar.Sonar;\r\nimport net.virtualinfinity.atrobots.hardware.shield.Shield;\r\nimport net.virtualinfinity.atrobots.hardware.throttle.Throttle;\r\nimport net.virtualinfinity.atrobots.hardware.transponder.Transponder;\r\nimport net.virtualinfinity.atrobots.hardware.turret.Turret;\r\nimport net.virtualinfinity.atrobots.interrupts.Destructable;\r\nimport net.virtualinfinity.atrobots.measures.*;\r\nimport net.virtualinfinity.atrobots.ports.PortHandler;\r\nimport net.virtualinfinity.atrobots.snapshots.ArenaObjectSnapshot;\r\nimport net.virtualinfinity.atrobots.snapshots.RobotSnapshot;\r\nimport java.util.ArrayList;\r\nimport java.util.List;\r\n\r\n/**\r\n * @author Daniel Pitts\r\n */\r\npublic class Robot extends TangibleArenaObject implements Resettable, HasHeading, Destructable, HasOverburner, MissileFactory, ArmorDepletionListener, ScanSource, DamageInflicter {\r\n\r\n    private final HeatSinks heatSinks = new HeatSinks();\r\n\r\n    private final Odometer odometer = new Odometer();\r\n\r\n    private final String name;\r\n\r\n    private final int id;\r\n\r\n    private final RobotScore score;\r\n\r\n    private Throttle throttle;\r\n\r\n    private Computer computer;\r\n\r\n    private Turret turret;\r\n\r\n    private Transponder transponder;\r\n\r\n    private Transceiver transceiver;\r\n\r\n    private Duration lastDamageGiven = Duration.fromCycles(0);\r\n\r\n    private Duration lastDamageTaken = Duration.fromCycles(0);\r\n\r\n    private Armor armor;\r\n\r\n    private Radar radar;\r\n\r\n    private Sonar sonar;\r\n\r\n    private Temperature shutdownLevel;\r\n\r\n    private MineLayer mineLayer;\r\n\r\n    private Shield shield;\r\n\r\n    private boolean overburn;\r\n\r\n    private HardwareBus hardwareBus;\r\n\r\n    private static final RelativeAngle STEERING_SPEED = RelativeAngle.fromBygrees(8);\r\n\r\n    private final Position oldPosition = new Position();\r\n\r\n    private int roundKills;\r\n\r\n    private final List<RobotListener> robotListeners = new ArrayList<RobotListener>();\r\n\r\n    private final Heading desiredHeading = new Heading(heading.getAngle());\r\n\r\n    {\r\n        position.setOdometer(odometer);\r\n    }\r\n\r\n    public Robot(String name, int id, RobotScore score) {\r\n        this.name = name;\r\n        this.id = id;\r\n        this.score = score;\r\n        this.roundKills = 0;\r\n    }\r\n\r\n    public void setComputer(Computer computer) {\r\n        this.computer = computer;\r\n        computer.setId(getId());\r\n        computer.setName(getName());\r\n    }\r\n\r\n    public Computer getComputer() {\r\n        return computer;\r\n    }\r\n\r\n    public void destruct() {\r\n        getArmor().destruct();\r\n    }\r\n\r\n    public Turret getTurret() {\r\n        return turret;\r\n    }\r\n\r\n    public void setOverburn(boolean overburn) {\r\n        this.overburn = overburn;\r\n    }\r\n\r\n    public Transponder getTransponder() {\r\n        return transponder;\r\n    }\r\n\r\n    public Speed getSpeed() {\r\n        return speed;\r\n    }\r\n\r\n    public Duration getLastDamageGiven() {\r\n        return lastDamageGiven;\r\n    }\r\n\r\n    public Duration getLastDamageTaken() {\r\n        return lastDamageTaken;\r\n    }\r\n\r\n    public Transceiver getTransceiver() {\r\n        return transceiver;\r\n    }\r\n\r\n    public Odometer getOdometer() {\r\n        return odometer;\r\n    }\r\n\r\n    public Throttle getThrottle() {\r\n        return throttle;\r\n    }\r\n\r\n    public HeatSinks getHeatSinks() {\r\n        return heatSinks;\r\n    }\r\n\r\n    public Heading getHeading() {\r\n        return heading;\r\n    }\r\n\r\n    public PortHandler getTurretOffsetSensor() {\r\n        return new PortHandler() {\r\n\r\n            public short read() {\r\n                return (short) getTurretShift();\r\n            }\r\n        };\r\n    }\r\n\r\n    public int getTurretShift() {\r\n        return getTurret().getHeading().getAngle().getAngleCounterClockwiseTo(getHeading().getAngle()).getBygrees();\r\n    }\r\n\r\n    public Armor getArmor() {\r\n        return armor;\r\n    }\r\n\r\n    public Radar getRadar() {\r\n        return radar;\r\n    }\r\n\r\n    public PortHandler getAimTurretPort() {\r\n        return new PortHandler() {\r\n\r\n            public void write(short value) {\r\n                setTurretOffset(RelativeAngle.fromBygrees(value));\r\n            }\r\n        };\r\n    }\r\n\r\n    private void setTurretOffset(RelativeAngle angle) {\r\n        getTurret().getHeading().setAngle(getHeading().getAngle().counterClockwise(angle));\r\n    }\r\n\r\n    public Heading getDesiredHeading() {\r\n        return desiredHeading;\r\n    }\r\n\r\n    public Sonar getSonar() {\r\n        return sonar;\r\n    }\r\n\r\n    public PortHandler getOverburnLatchPort() {\r\n        return new PortHandler() {\r\n\r\n            public short read() {\r\n                return (short) (isOverburn() ? 1 : 0);\r\n            }\r\n\r\n            public void write(short value) {\r\n                setOverburn(value != 0);\r\n            }\r\n        };\r\n    }\r\n\r\n    public boolean isOverburn() {\r\n        return overburn;\r\n    }\r\n\r\n    public PortHandler getShutdownLevelLatchPort() {\r\n        return new PortHandler() {\r\n\r\n            public short read() {\r\n                return (short) hardwareBus.getShutdownLevel();\r\n            }\r\n\r\n            public void write(short value) {\r\n                hardwareBus.setShutdownLevel(value);\r\n            }\r\n        };\r\n    }\r\n\r\n    public MineLayer getMineLayer() {\r\n        return mineLayer;\r\n    }\r\n\r\n    public Shield getShield() {\r\n        return shield;\r\n    }\r\n\r\n    public void setTurret(Turret turret) {\r\n        this.turret = turret;\r\n    }\r\n\r\n    public void setTransponder(Transponder transponder) {\r\n        this.transponder = transponder;\r\n    }\r\n\r\n    public void setTransceiver(Transceiver transceiver) {\r\n        this.transceiver = transceiver;\r\n    }\r\n\r\n    public void setArmor(Armor armor) {\r\n        this.armor = armor;\r\n        armor.setArmorDepletionListener(this);\r\n    }\r\n\r\n    public void setRadar(Radar radar) {\r\n        this.radar = radar;\r\n    }\r\n\r\n    public void setSonar(Sonar sonar) {\r\n        this.sonar = sonar;\r\n    }\r\n\r\n    public void setMineLayer(MineLayer mineLayer) {\r\n        this.mineLayer = mineLayer;\r\n    }\r\n\r\n    public void setShield(Shield shield) {\r\n        this.shield = shield;\r\n    }\r\n\r\n    public HardwareBus getHardwareBus() {\r\n        return hardwareBus;\r\n    }\r\n\r\n    public void setHardwareBus(HardwareBus hardwareBus) {\r\n        this.hardwareBus = hardwareBus;\r\n    }\r\n\r\n    public void reset() {\r\n        setOverburn(false);\r\n    }\r\n\r\n    public ScanResult scan(AngleBracket angleBracket, double maxDistance, boolean calculateAccuracy, boolean includeTargetDetails) {\r\n        final RobotScanResult scanResult = doScan(angleBracket, maxDistance, calculateAccuracy);\r\n        if (scanResult.successful()) {\r\n            getComputer().getRegisters().getTargetId().set((short) scanResult.getMatch().transponder.getId());\r\n            if (includeTargetDetails) {\r\n                final AbsoluteAngle matchAngle = scanResult.getMatch().getHeading().getAngle();\r\n                final AbsoluteAngle turretAngle = getTurret().getHeading().getAngle();\r\n                getComputer().getRegisters().getTargetHeading().set((short) matchAngle.getAngleCounterClockwiseTo(turretAngle).getBygrees());\r\n                getComputer().getRegisters().getTargetThrottle().set((short) scanResult.getMatch().getThrottle().getPower());\r\n                getComputer().getRegisters().getTargetVelocity().set((short) Math.round(scanResult.getMatch().getSpeed().times(Duration.ONE_CYCLE) * 100));\r\n            }\r\n        }\r\n        return scanResult;\r\n    }\r\n\r\n    private RobotScanResult doScan(AngleBracket angleBracket, double maxDistance, boolean calculateAccuracy) {\r\n        Position position = getPosition();\r\n        final RobotScanner robotScanner = new RobotScanner(this, position, angleBracket, maxDistance, calculateAccuracy);\r\n        getArena().visitActiveRobots(robotScanner);\r\n        final RobotScanResult scanResult = robotScanner.toScanResult();\r\n        final Scan object = new Scan(angleBracket, maxDistance, scanResult.successful(), scanResult.getMatchPositionVector(), calculateAccuracy && scanResult.successful(), scanResult.getAccuracy());\r\n        getArena().addIntangible(object);\r\n        object.getPosition().copyFrom(position);\r\n        return scanResult;\r\n    }\r\n\r\n    protected ArenaObjectSnapshot createSpecificSnapshot() {\r\n        final RobotSnapshot robotSnapshot = new RobotSnapshot();\r\n        robotSnapshot.setTemperature(getHeatSinks().getTemperature());\r\n        robotSnapshot.setArmor(getArmor().getRemaining());\r\n        robotSnapshot.setOverburn(isOverburn());\r\n        robotSnapshot.setActiveShield(getShield().isActive());\r\n        robotSnapshot.setHeading(getHeading().getAngle());\r\n        robotSnapshot.setTurretHeading(getTurret().getHeading().getAngle());\r\n        robotSnapshot.setName(getName());\r\n        robotSnapshot.setId(getId());\r\n        robotSnapshot.setRoundKills(getRoundKills());\r\n        robotSnapshot.setTotalKills(getTotalKills());\r\n        robotSnapshot.setTotalDeaths(getTotalDeaths());\r\n        robotSnapshot.setTotalWins(getTotalWins());\r\n        robotSnapshot.setTotalTies(getTotalTies());\r\n        robotSnapshot.setLastMessage(getComputer().getLastMessage());\r\n        return robotSnapshot;\r\n    }\r\n\r\n    @Override\r\n    public void checkCollision(TangibleArenaObject robot) {\r\n        if (robot.getPosition().getVectorTo(position).getMagnitudeSquared() < 64) {\r\n            collides();\r\n            robot.collides();\r\n        }\r\n    }\r\n\r\n    public void collides() {\r\n        position.copyFrom(oldPosition);\r\n        if (speed.times(Duration.ONE_CYCLE) > 2) {\r\n            armor.inflictDamage(1);\r\n        }\r\n        throttle.setPower(0);\r\n        throttle.setDesiredPower(0);\r\n        computer.getRegisters().getCollisionCount().increment();\r\n    }\r\n\r\n    public void inflictDamage(DamageInflicter cause, double damageAmount) {\r\n        if (!isDead()) {\r\n            final double unabsorbedAmount = shield.absorbDamage(damageAmount);\r\n            if (unabsorbedAmount > 0) {\r\n                lastDamageTaken = getArena().getRoundTimer().getTime();\r\n                cause.inflictedDamage(unabsorbedAmount);\r\n            }\r\n            armor.inflictDamage(unabsorbedAmount);\r\n            if (isDead()) {\r\n                cause.killedRobot();\r\n            }\r\n        }\r\n    }\r\n\r\n    public void armorDepleted() {\r\n        if (!isDead()) {\r\n            for (RobotListener listener : robotListeners) {\r\n                listener.died(this);\r\n            }\r\n            die();\r\n            getArena().explosion(this, new LinearDamageFunction(position, isOverburn() ? 1.3 : 1, 25.0));\r\n        }\r\n    }\r\n\r\n    public void update(Duration duration) {\r\n        oldPosition.copyFrom(position);\r\n        super.update(duration);\r\n        getThrottle().update(duration);\r\n        getHeading().moveToward(getDesiredHeading(), STEERING_SPEED);\r\n        getComputer().update(duration);\r\n        if (heatSinks.getTemperature().getLogScale() >= 500) {\r\n            destruct();\r\n        } else if (heatSinks.getTemperature().getLogScale() >= 475) {\r\n            armor.inflictDamage(duration.getCycles() / 4d);\r\n        } else if (heatSinks.getTemperature().getLogScale() >= 450) {\r\n            armor.inflictDamage(duration.getCycles() / 8d);\r\n        } else if (heatSinks.getTemperature().getLogScale() >= 400) {\r\n            armor.inflictDamage(duration.getCycles() / 16d);\r\n        } else if (heatSinks.getTemperature().getLogScale() >= 350) {\r\n            armor.inflictDamage(duration.getCycles() / 32d);\r\n        } else if (heatSinks.getTemperature().getLogScale() >= 300) {\r\n            armor.inflictDamage(duration.getCycles() / 64d);\r\n        }\r\n        heatSinks.cool(isOverburn() ? getCoolTemp(duration).times(0.66) : getCoolTemp(duration));\r\n        shield.update(duration);\r\n        if (position.getX() < 4 || position.getX() > 1000 - 4 || position.getY() < 4 || position.getY() > 1000 - 4) {\r\n            collides();\r\n        }\r\n    }\r\n\r\n    private Temperature getCoolTemp(Duration duration) {\r\n        return Temperature.fromLogScale(duration.getCycles() * 1.125);\r\n    }\r\n\r\n    public void setThrottle(Throttle throttle) {\r\n        this.throttle = throttle;\r\n        throttle.setSpeed(speed);\r\n        throttle.setHeatSinks(heatSinks);\r\n    }\r\n\r\n    public void winRound() {\r\n        for (RobotListener listener : robotListeners) {\r\n            listener.wonRound(this);\r\n        }\r\n    }\r\n\r\n    public void tieRound() {\r\n        for (RobotListener listener : robotListeners) {\r\n            listener.tiedRound(this);\r\n        }\r\n    }\r\n\r\n    public void killedRobot() {\r\n        for (RobotListener listener : robotListeners) {\r\n            listener.killedRobot(this);\r\n        }\r\n    }\r\n\r\n    public void inflictedDamage(double amount) {\r\n        lastDamageGiven = getArena().getRoundTimer().getTime();\r\n        for (RobotListener listener : robotListeners) {\r\n            listener.inflictedDamage(this, amount);\r\n        }\r\n    }\r\n\r\n    public String getName() {\r\n        return name;\r\n    }\r\n\r\n    public int getTotalKills() {\r\n        return score.getTotalKills();\r\n    }\r\n\r\n    public int getRoundKills() {\r\n        return roundKills;\r\n    }\r\n\r\n    public int getTotalDeaths() {\r\n        return score.getTotalDeaths();\r\n    }\r\n\r\n    public int getId() {\r\n        return id;\r\n    }\r\n\r\n    public int getTotalWins() {\r\n        return score.getTotalWins();\r\n    }\r\n\r\n    public int getTotalTies() {\r\n        return score.getTotalTies();\r\n    }\r\n\r\n    public void addRobotListener(RobotListener robotListener) {\r\n        robotListeners.add(robotListener);\r\n    }\r\n\r\n    @Override\r\n    protected void arenaConnected(Arena arena) {\r\n        transceiver.setRadioDispatcher(arena.getRadioDispatcher());\r\n    }\r\n\r\n    public InterruptHandler createGetRobotInfoInterruptHandler(MemoryCell speed, MemoryCell lastDamageTaken, MemoryCell lastDamageGiven) {\r\n        return new GetRobotInfoInterrupt(speed, lastDamageTaken, lastDamageGiven);\r\n    }\r\n\r\n    public GetRobotStatisticsInterrupt createGetRobotStatisticsInterrupt(MemoryCell totalKills, MemoryCell roundKills, MemoryCell totalDeaths) {\r\n        return new GetRobotStatisticsInterrupt(totalKills, roundKills, totalDeaths);\r\n    }\r\n\r\n    public Missile createMissile(AbsoluteAngle heading, Position position, double power) {\r\n        return new Missile(this, position, heading, power, this.isOverburn());\r\n    }\r\n\r\n    public void accept(ArenaObjectVisitor arenaObjectVisitor) {\r\n        arenaObjectVisitor.visit(this);\r\n    }\r\n\r\n    /**\r\n     * @author Daniel Pitts\r\n     */\r\n    public class GetRobotInfoInterrupt extends InterruptHandler {\r\n\r\n        private final MemoryCell speed;\r\n\r\n        private final MemoryCell lastDamageTaken;\r\n\r\n        private final MemoryCell lastDamageGiven;\r\n\r\n        private GetRobotInfoInterrupt(MemoryCell speed, MemoryCell lastDamageTaken, MemoryCell lastDamageGiven) {\r\n            this.speed = speed;\r\n            this.lastDamageTaken = lastDamageTaken;\r\n            this.lastDamageGiven = lastDamageGiven;\r\n        }\r\n\r\n        public void handleInterrupt() {\r\n            speed.set((short) Math.round(getSpeed().times(Duration.ONE_CYCLE) * 100));\r\n            lastDamageGiven.set((short) getLastDamageGiven().getCycles());\r\n            lastDamageTaken.set((short) getLastDamageTaken().getCycles());\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @author Daniel Pitts\r\n     */\r\n    public class GetRobotStatisticsInterrupt extends InterruptHandler {\r\n\r\n        private final MemoryCell totalKills;\r\n\r\n        private final MemoryCell roundKills;\r\n\r\n        private final MemoryCell totalDeaths;\r\n\r\n        private GetRobotStatisticsInterrupt(MemoryCell totalKills, MemoryCell roundKills, MemoryCell totalDeaths) {\r\n            this.totalKills = totalKills;\r\n            this.roundKills = roundKills;\r\n            this.totalDeaths = totalDeaths;\r\n        }\r\n\r\n        public void handleInterrupt() {\r\n            totalKills.set((short) getTotalKills());\r\n            roundKills.set((short) getRoundKills());\r\n            totalDeaths.set((short) getTotalDeaths());\r\n        }\r\n    }\r\n}\r\n",
		"id": "EvoSuiteBenchmark/86_at-robots2-j/src/main/java/net/virtualinfinity/atrobots/robot/RobotTest2.java",
		"test_prompt": "// RobotTest2.java\npackage net.virtualinfinity.atrobots.robot;\n\nimport net.virtualinfinity.atrobots.ArenaObjectVisitor;\nimport net.virtualinfinity.atrobots.arena.*;\nimport net.virtualinfinity.atrobots.arenaobjects.DamageInflicter;\nimport net.virtualinfinity.atrobots.computer.*;\nimport net.virtualinfinity.atrobots.hardware.HasHeading;\nimport net.virtualinfinity.atrobots.hardware.HasOverburner;\nimport net.virtualinfinity.atrobots.hardware.armor.Armor;\nimport net.virtualinfinity.atrobots.hardware.armor.ArmorDepletionListener;\nimport net.virtualinfinity.atrobots.hardware.heatsinks.HeatSinks;\nimport net.virtualinfinity.atrobots.hardware.mines.MineLayer;\nimport net.virtualinfinity.atrobots.hardware.missiles.Missile;\nimport net.virtualinfinity.atrobots.hardware.missiles.MissileFactory;\nimport net.virtualinfinity.atrobots.hardware.radio.Transceiver;\nimport net.virtualinfinity.atrobots.hardware.scanning.ScanResult;\nimport net.virtualinfinity.atrobots.hardware.scanning.ScanSource;\nimport net.virtualinfinity.atrobots.hardware.scanning.radar.Radar;\nimport net.virtualinfinity.atrobots.hardware.scanning.sonar.Sonar;\nimport net.virtualinfinity.atrobots.hardware.shield.Shield;\nimport net.virtualinfinity.atrobots.hardware.throttle.Throttle;\nimport net.virtualinfinity.atrobots.hardware.transponder.Transponder;\nimport net.virtualinfinity.atrobots.hardware.turret.Turret;\nimport net.virtualinfinity.atrobots.interrupts.Destructable;\nimport net.virtualinfinity.atrobots.measures.*;\nimport net.virtualinfinity.atrobots.ports.PortHandler;\nimport net.virtualinfinity.atrobots.snapshots.ArenaObjectSnapshot;\nimport net.virtualinfinity.atrobots.snapshots.RobotSnapshot;\nimport java.util.ArrayList;\nimport java.util.List;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link Robot}.\n* It contains ten unit test cases for the {@link Robot#createGetRobotInfoInterruptHandler(MemoryCell, MemoryCell, MemoryCell)} method.\n*/\nclass RobotTest2 {"
	},
	{
		"original_code": "// Robot.java\npackage net.virtualinfinity.atrobots.robot;\r\n\r\nimport net.virtualinfinity.atrobots.ArenaObjectVisitor;\r\nimport net.virtualinfinity.atrobots.arena.*;\r\nimport net.virtualinfinity.atrobots.arenaobjects.DamageInflicter;\r\nimport net.virtualinfinity.atrobots.computer.*;\r\nimport net.virtualinfinity.atrobots.hardware.HasHeading;\r\nimport net.virtualinfinity.atrobots.hardware.HasOverburner;\r\nimport net.virtualinfinity.atrobots.hardware.armor.Armor;\r\nimport net.virtualinfinity.atrobots.hardware.armor.ArmorDepletionListener;\r\nimport net.virtualinfinity.atrobots.hardware.heatsinks.HeatSinks;\r\nimport net.virtualinfinity.atrobots.hardware.mines.MineLayer;\r\nimport net.virtualinfinity.atrobots.hardware.missiles.Missile;\r\nimport net.virtualinfinity.atrobots.hardware.missiles.MissileFactory;\r\nimport net.virtualinfinity.atrobots.hardware.radio.Transceiver;\r\nimport net.virtualinfinity.atrobots.hardware.scanning.ScanResult;\r\nimport net.virtualinfinity.atrobots.hardware.scanning.ScanSource;\r\nimport net.virtualinfinity.atrobots.hardware.scanning.radar.Radar;\r\nimport net.virtualinfinity.atrobots.hardware.scanning.sonar.Sonar;\r\nimport net.virtualinfinity.atrobots.hardware.shield.Shield;\r\nimport net.virtualinfinity.atrobots.hardware.throttle.Throttle;\r\nimport net.virtualinfinity.atrobots.hardware.transponder.Transponder;\r\nimport net.virtualinfinity.atrobots.hardware.turret.Turret;\r\nimport net.virtualinfinity.atrobots.interrupts.Destructable;\r\nimport net.virtualinfinity.atrobots.measures.*;\r\nimport net.virtualinfinity.atrobots.ports.PortHandler;\r\nimport net.virtualinfinity.atrobots.snapshots.ArenaObjectSnapshot;\r\nimport net.virtualinfinity.atrobots.snapshots.RobotSnapshot;\r\nimport java.util.ArrayList;\r\nimport java.util.List;\r\n\r\n/**\r\n * @author Daniel Pitts\r\n */\r\npublic class Robot extends TangibleArenaObject implements Resettable, HasHeading, Destructable, HasOverburner, MissileFactory, ArmorDepletionListener, ScanSource, DamageInflicter {\r\n\r\n    private final HeatSinks heatSinks = new HeatSinks();\r\n\r\n    private final Odometer odometer = new Odometer();\r\n\r\n    private final String name;\r\n\r\n    private final int id;\r\n\r\n    private final RobotScore score;\r\n\r\n    private Throttle throttle;\r\n\r\n    private Computer computer;\r\n\r\n    private Turret turret;\r\n\r\n    private Transponder transponder;\r\n\r\n    private Transceiver transceiver;\r\n\r\n    private Duration lastDamageGiven = Duration.fromCycles(0);\r\n\r\n    private Duration lastDamageTaken = Duration.fromCycles(0);\r\n\r\n    private Armor armor;\r\n\r\n    private Radar radar;\r\n\r\n    private Sonar sonar;\r\n\r\n    private Temperature shutdownLevel;\r\n\r\n    private MineLayer mineLayer;\r\n\r\n    private Shield shield;\r\n\r\n    private boolean overburn;\r\n\r\n    private HardwareBus hardwareBus;\r\n\r\n    private static final RelativeAngle STEERING_SPEED = RelativeAngle.fromBygrees(8);\r\n\r\n    private final Position oldPosition = new Position();\r\n\r\n    private int roundKills;\r\n\r\n    private final List<RobotListener> robotListeners = new ArrayList<RobotListener>();\r\n\r\n    private final Heading desiredHeading = new Heading(heading.getAngle());\r\n\r\n    {\r\n        position.setOdometer(odometer);\r\n    }\r\n\r\n    public Robot(String name, int id, RobotScore score) {\r\n        this.name = name;\r\n        this.id = id;\r\n        this.score = score;\r\n        this.roundKills = 0;\r\n    }\r\n\r\n    public void setComputer(Computer computer) {\r\n        this.computer = computer;\r\n        computer.setId(getId());\r\n        computer.setName(getName());\r\n    }\r\n\r\n    public Computer getComputer() {\r\n        return computer;\r\n    }\r\n\r\n    public void destruct() {\r\n        getArmor().destruct();\r\n    }\r\n\r\n    public Turret getTurret() {\r\n        return turret;\r\n    }\r\n\r\n    public void setOverburn(boolean overburn) {\r\n        this.overburn = overburn;\r\n    }\r\n\r\n    public Transponder getTransponder() {\r\n        return transponder;\r\n    }\r\n\r\n    public Speed getSpeed() {\r\n        return speed;\r\n    }\r\n\r\n    public Duration getLastDamageGiven() {\r\n        return lastDamageGiven;\r\n    }\r\n\r\n    public Duration getLastDamageTaken() {\r\n        return lastDamageTaken;\r\n    }\r\n\r\n    public Transceiver getTransceiver() {\r\n        return transceiver;\r\n    }\r\n\r\n    public Odometer getOdometer() {\r\n        return odometer;\r\n    }\r\n\r\n    public Throttle getThrottle() {\r\n        return throttle;\r\n    }\r\n\r\n    public HeatSinks getHeatSinks() {\r\n        return heatSinks;\r\n    }\r\n\r\n    public Heading getHeading() {\r\n        return heading;\r\n    }\r\n\r\n    public PortHandler getTurretOffsetSensor() {\r\n        return new PortHandler() {\r\n\r\n            public short read() {\r\n                return (short) getTurretShift();\r\n            }\r\n        };\r\n    }\r\n\r\n    public int getTurretShift() {\r\n        return getTurret().getHeading().getAngle().getAngleCounterClockwiseTo(getHeading().getAngle()).getBygrees();\r\n    }\r\n\r\n    public Armor getArmor() {\r\n        return armor;\r\n    }\r\n\r\n    public Radar getRadar() {\r\n        return radar;\r\n    }\r\n\r\n    public PortHandler getAimTurretPort() {\r\n        return new PortHandler() {\r\n\r\n            public void write(short value) {\r\n                setTurretOffset(RelativeAngle.fromBygrees(value));\r\n            }\r\n        };\r\n    }\r\n\r\n    private void setTurretOffset(RelativeAngle angle) {\r\n        getTurret().getHeading().setAngle(getHeading().getAngle().counterClockwise(angle));\r\n    }\r\n\r\n    public Heading getDesiredHeading() {\r\n        return desiredHeading;\r\n    }\r\n\r\n    public Sonar getSonar() {\r\n        return sonar;\r\n    }\r\n\r\n    public PortHandler getOverburnLatchPort() {\r\n        return new PortHandler() {\r\n\r\n            public short read() {\r\n                return (short) (isOverburn() ? 1 : 0);\r\n            }\r\n\r\n            public void write(short value) {\r\n                setOverburn(value != 0);\r\n            }\r\n        };\r\n    }\r\n\r\n    public boolean isOverburn() {\r\n        return overburn;\r\n    }\r\n\r\n    public PortHandler getShutdownLevelLatchPort() {\r\n        return new PortHandler() {\r\n\r\n            public short read() {\r\n                return (short) hardwareBus.getShutdownLevel();\r\n            }\r\n\r\n            public void write(short value) {\r\n                hardwareBus.setShutdownLevel(value);\r\n            }\r\n        };\r\n    }\r\n\r\n    public MineLayer getMineLayer() {\r\n        return mineLayer;\r\n    }\r\n\r\n    public Shield getShield() {\r\n        return shield;\r\n    }\r\n\r\n    public void setTurret(Turret turret) {\r\n        this.turret = turret;\r\n    }\r\n\r\n    public void setTransponder(Transponder transponder) {\r\n        this.transponder = transponder;\r\n    }\r\n\r\n    public void setTransceiver(Transceiver transceiver) {\r\n        this.transceiver = transceiver;\r\n    }\r\n\r\n    public void setArmor(Armor armor) {\r\n        this.armor = armor;\r\n        armor.setArmorDepletionListener(this);\r\n    }\r\n\r\n    public void setRadar(Radar radar) {\r\n        this.radar = radar;\r\n    }\r\n\r\n    public void setSonar(Sonar sonar) {\r\n        this.sonar = sonar;\r\n    }\r\n\r\n    public void setMineLayer(MineLayer mineLayer) {\r\n        this.mineLayer = mineLayer;\r\n    }\r\n\r\n    public void setShield(Shield shield) {\r\n        this.shield = shield;\r\n    }\r\n\r\n    public HardwareBus getHardwareBus() {\r\n        return hardwareBus;\r\n    }\r\n\r\n    public void setHardwareBus(HardwareBus hardwareBus) {\r\n        this.hardwareBus = hardwareBus;\r\n    }\r\n\r\n    public void reset() {\r\n        setOverburn(false);\r\n    }\r\n\r\n    public ScanResult scan(AngleBracket angleBracket, double maxDistance, boolean calculateAccuracy, boolean includeTargetDetails) {\r\n        final RobotScanResult scanResult = doScan(angleBracket, maxDistance, calculateAccuracy);\r\n        if (scanResult.successful()) {\r\n            getComputer().getRegisters().getTargetId().set((short) scanResult.getMatch().transponder.getId());\r\n            if (includeTargetDetails) {\r\n                final AbsoluteAngle matchAngle = scanResult.getMatch().getHeading().getAngle();\r\n                final AbsoluteAngle turretAngle = getTurret().getHeading().getAngle();\r\n                getComputer().getRegisters().getTargetHeading().set((short) matchAngle.getAngleCounterClockwiseTo(turretAngle).getBygrees());\r\n                getComputer().getRegisters().getTargetThrottle().set((short) scanResult.getMatch().getThrottle().getPower());\r\n                getComputer().getRegisters().getTargetVelocity().set((short) Math.round(scanResult.getMatch().getSpeed().times(Duration.ONE_CYCLE) * 100));\r\n            }\r\n        }\r\n        return scanResult;\r\n    }\r\n\r\n    private RobotScanResult doScan(AngleBracket angleBracket, double maxDistance, boolean calculateAccuracy) {\r\n        Position position = getPosition();\r\n        final RobotScanner robotScanner = new RobotScanner(this, position, angleBracket, maxDistance, calculateAccuracy);\r\n        getArena().visitActiveRobots(robotScanner);\r\n        final RobotScanResult scanResult = robotScanner.toScanResult();\r\n        final Scan object = new Scan(angleBracket, maxDistance, scanResult.successful(), scanResult.getMatchPositionVector(), calculateAccuracy && scanResult.successful(), scanResult.getAccuracy());\r\n        getArena().addIntangible(object);\r\n        object.getPosition().copyFrom(position);\r\n        return scanResult;\r\n    }\r\n\r\n    protected ArenaObjectSnapshot createSpecificSnapshot() {\r\n        final RobotSnapshot robotSnapshot = new RobotSnapshot();\r\n        robotSnapshot.setTemperature(getHeatSinks().getTemperature());\r\n        robotSnapshot.setArmor(getArmor().getRemaining());\r\n        robotSnapshot.setOverburn(isOverburn());\r\n        robotSnapshot.setActiveShield(getShield().isActive());\r\n        robotSnapshot.setHeading(getHeading().getAngle());\r\n        robotSnapshot.setTurretHeading(getTurret().getHeading().getAngle());\r\n        robotSnapshot.setName(getName());\r\n        robotSnapshot.setId(getId());\r\n        robotSnapshot.setRoundKills(getRoundKills());\r\n        robotSnapshot.setTotalKills(getTotalKills());\r\n        robotSnapshot.setTotalDeaths(getTotalDeaths());\r\n        robotSnapshot.setTotalWins(getTotalWins());\r\n        robotSnapshot.setTotalTies(getTotalTies());\r\n        robotSnapshot.setLastMessage(getComputer().getLastMessage());\r\n        return robotSnapshot;\r\n    }\r\n\r\n    @Override\r\n    public void checkCollision(TangibleArenaObject robot) {\r\n        if (robot.getPosition().getVectorTo(position).getMagnitudeSquared() < 64) {\r\n            collides();\r\n            robot.collides();\r\n        }\r\n    }\r\n\r\n    public void collides() {\r\n        position.copyFrom(oldPosition);\r\n        if (speed.times(Duration.ONE_CYCLE) > 2) {\r\n            armor.inflictDamage(1);\r\n        }\r\n        throttle.setPower(0);\r\n        throttle.setDesiredPower(0);\r\n        computer.getRegisters().getCollisionCount().increment();\r\n    }\r\n\r\n    public void inflictDamage(DamageInflicter cause, double damageAmount) {\r\n        if (!isDead()) {\r\n            final double unabsorbedAmount = shield.absorbDamage(damageAmount);\r\n            if (unabsorbedAmount > 0) {\r\n                lastDamageTaken = getArena().getRoundTimer().getTime();\r\n                cause.inflictedDamage(unabsorbedAmount);\r\n            }\r\n            armor.inflictDamage(unabsorbedAmount);\r\n            if (isDead()) {\r\n                cause.killedRobot();\r\n            }\r\n        }\r\n    }\r\n\r\n    public void armorDepleted() {\r\n        if (!isDead()) {\r\n            for (RobotListener listener : robotListeners) {\r\n                listener.died(this);\r\n            }\r\n            die();\r\n            getArena().explosion(this, new LinearDamageFunction(position, isOverburn() ? 1.3 : 1, 25.0));\r\n        }\r\n    }\r\n\r\n    public void update(Duration duration) {\r\n        oldPosition.copyFrom(position);\r\n        super.update(duration);\r\n        getThrottle().update(duration);\r\n        getHeading().moveToward(getDesiredHeading(), STEERING_SPEED);\r\n        getComputer().update(duration);\r\n        if (heatSinks.getTemperature().getLogScale() >= 500) {\r\n            destruct();\r\n        } else if (heatSinks.getTemperature().getLogScale() >= 475) {\r\n            armor.inflictDamage(duration.getCycles() / 4d);\r\n        } else if (heatSinks.getTemperature().getLogScale() >= 450) {\r\n            armor.inflictDamage(duration.getCycles() / 8d);\r\n        } else if (heatSinks.getTemperature().getLogScale() >= 400) {\r\n            armor.inflictDamage(duration.getCycles() / 16d);\r\n        } else if (heatSinks.getTemperature().getLogScale() >= 350) {\r\n            armor.inflictDamage(duration.getCycles() / 32d);\r\n        } else if (heatSinks.getTemperature().getLogScale() >= 300) {\r\n            armor.inflictDamage(duration.getCycles() / 64d);\r\n        }\r\n        heatSinks.cool(isOverburn() ? getCoolTemp(duration).times(0.66) : getCoolTemp(duration));\r\n        shield.update(duration);\r\n        if (position.getX() < 4 || position.getX() > 1000 - 4 || position.getY() < 4 || position.getY() > 1000 - 4) {\r\n            collides();\r\n        }\r\n    }\r\n\r\n    private Temperature getCoolTemp(Duration duration) {\r\n        return Temperature.fromLogScale(duration.getCycles() * 1.125);\r\n    }\r\n\r\n    public void setThrottle(Throttle throttle) {\r\n        this.throttle = throttle;\r\n        throttle.setSpeed(speed);\r\n        throttle.setHeatSinks(heatSinks);\r\n    }\r\n\r\n    public void winRound() {\r\n        for (RobotListener listener : robotListeners) {\r\n            listener.wonRound(this);\r\n        }\r\n    }\r\n\r\n    public void tieRound() {\r\n        for (RobotListener listener : robotListeners) {\r\n            listener.tiedRound(this);\r\n        }\r\n    }\r\n\r\n    public void killedRobot() {\r\n        for (RobotListener listener : robotListeners) {\r\n            listener.killedRobot(this);\r\n        }\r\n    }\r\n\r\n    public void inflictedDamage(double amount) {\r\n        lastDamageGiven = getArena().getRoundTimer().getTime();\r\n        for (RobotListener listener : robotListeners) {\r\n            listener.inflictedDamage(this, amount);\r\n        }\r\n    }\r\n\r\n    public String getName() {\r\n        return name;\r\n    }\r\n\r\n    public int getTotalKills() {\r\n        return score.getTotalKills();\r\n    }\r\n\r\n    public int getRoundKills() {\r\n        return roundKills;\r\n    }\r\n\r\n    public int getTotalDeaths() {\r\n        return score.getTotalDeaths();\r\n    }\r\n\r\n    public int getId() {\r\n        return id;\r\n    }\r\n\r\n    public int getTotalWins() {\r\n        return score.getTotalWins();\r\n    }\r\n\r\n    public int getTotalTies() {\r\n        return score.getTotalTies();\r\n    }\r\n\r\n    public void addRobotListener(RobotListener robotListener) {\r\n        robotListeners.add(robotListener);\r\n    }\r\n\r\n    @Override\r\n    protected void arenaConnected(Arena arena) {\r\n        transceiver.setRadioDispatcher(arena.getRadioDispatcher());\r\n    }\r\n\r\n    public InterruptHandler createGetRobotInfoInterruptHandler(MemoryCell speed, MemoryCell lastDamageTaken, MemoryCell lastDamageGiven) {\r\n        return new GetRobotInfoInterrupt(speed, lastDamageTaken, lastDamageGiven);\r\n    }\r\n\r\n    public GetRobotStatisticsInterrupt createGetRobotStatisticsInterrupt(MemoryCell totalKills, MemoryCell roundKills, MemoryCell totalDeaths) {\r\n        return new GetRobotStatisticsInterrupt(totalKills, roundKills, totalDeaths);\r\n    }\r\n\r\n    public Missile createMissile(AbsoluteAngle heading, Position position, double power) {\r\n        return new Missile(this, position, heading, power, this.isOverburn());\r\n    }\r\n\r\n    public void accept(ArenaObjectVisitor arenaObjectVisitor) {\r\n        arenaObjectVisitor.visit(this);\r\n    }\r\n\r\n    /**\r\n     * @author Daniel Pitts\r\n     */\r\n    public class GetRobotInfoInterrupt extends InterruptHandler {\r\n\r\n        private final MemoryCell speed;\r\n\r\n        private final MemoryCell lastDamageTaken;\r\n\r\n        private final MemoryCell lastDamageGiven;\r\n\r\n        private GetRobotInfoInterrupt(MemoryCell speed, MemoryCell lastDamageTaken, MemoryCell lastDamageGiven) {\r\n            this.speed = speed;\r\n            this.lastDamageTaken = lastDamageTaken;\r\n            this.lastDamageGiven = lastDamageGiven;\r\n        }\r\n\r\n        public void handleInterrupt() {\r\n            speed.set((short) Math.round(getSpeed().times(Duration.ONE_CYCLE) * 100));\r\n            lastDamageGiven.set((short) getLastDamageGiven().getCycles());\r\n            lastDamageTaken.set((short) getLastDamageTaken().getCycles());\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @author Daniel Pitts\r\n     */\r\n    public class GetRobotStatisticsInterrupt extends InterruptHandler {\r\n\r\n        private final MemoryCell totalKills;\r\n\r\n        private final MemoryCell roundKills;\r\n\r\n        private final MemoryCell totalDeaths;\r\n\r\n        private GetRobotStatisticsInterrupt(MemoryCell totalKills, MemoryCell roundKills, MemoryCell totalDeaths) {\r\n            this.totalKills = totalKills;\r\n            this.roundKills = roundKills;\r\n            this.totalDeaths = totalDeaths;\r\n        }\r\n\r\n        public void handleInterrupt() {\r\n            totalKills.set((short) getTotalKills());\r\n            roundKills.set((short) getRoundKills());\r\n            totalDeaths.set((short) getTotalDeaths());\r\n        }\r\n    }\r\n}\r\n",
		"id": "EvoSuiteBenchmark/86_at-robots2-j/src/main/java/net/virtualinfinity/atrobots/robot/RobotTest3.java",
		"test_prompt": "// RobotTest3.java\npackage net.virtualinfinity.atrobots.robot;\n\nimport net.virtualinfinity.atrobots.ArenaObjectVisitor;\nimport net.virtualinfinity.atrobots.arena.*;\nimport net.virtualinfinity.atrobots.arenaobjects.DamageInflicter;\nimport net.virtualinfinity.atrobots.computer.*;\nimport net.virtualinfinity.atrobots.hardware.HasHeading;\nimport net.virtualinfinity.atrobots.hardware.HasOverburner;\nimport net.virtualinfinity.atrobots.hardware.armor.Armor;\nimport net.virtualinfinity.atrobots.hardware.armor.ArmorDepletionListener;\nimport net.virtualinfinity.atrobots.hardware.heatsinks.HeatSinks;\nimport net.virtualinfinity.atrobots.hardware.mines.MineLayer;\nimport net.virtualinfinity.atrobots.hardware.missiles.Missile;\nimport net.virtualinfinity.atrobots.hardware.missiles.MissileFactory;\nimport net.virtualinfinity.atrobots.hardware.radio.Transceiver;\nimport net.virtualinfinity.atrobots.hardware.scanning.ScanResult;\nimport net.virtualinfinity.atrobots.hardware.scanning.ScanSource;\nimport net.virtualinfinity.atrobots.hardware.scanning.radar.Radar;\nimport net.virtualinfinity.atrobots.hardware.scanning.sonar.Sonar;\nimport net.virtualinfinity.atrobots.hardware.shield.Shield;\nimport net.virtualinfinity.atrobots.hardware.throttle.Throttle;\nimport net.virtualinfinity.atrobots.hardware.transponder.Transponder;\nimport net.virtualinfinity.atrobots.hardware.turret.Turret;\nimport net.virtualinfinity.atrobots.interrupts.Destructable;\nimport net.virtualinfinity.atrobots.measures.*;\nimport net.virtualinfinity.atrobots.ports.PortHandler;\nimport net.virtualinfinity.atrobots.snapshots.ArenaObjectSnapshot;\nimport net.virtualinfinity.atrobots.snapshots.RobotSnapshot;\nimport java.util.ArrayList;\nimport java.util.List;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link Robot}.\n* It contains ten unit test cases for the {@link Robot#createGetRobotStatisticsInterrupt(MemoryCell, MemoryCell, MemoryCell)} method.\n*/\nclass RobotTest3 {"
	},
	{
		"original_code": "// Robot.java\npackage net.virtualinfinity.atrobots.robot;\r\n\r\nimport net.virtualinfinity.atrobots.ArenaObjectVisitor;\r\nimport net.virtualinfinity.atrobots.arena.*;\r\nimport net.virtualinfinity.atrobots.arenaobjects.DamageInflicter;\r\nimport net.virtualinfinity.atrobots.computer.*;\r\nimport net.virtualinfinity.atrobots.hardware.HasHeading;\r\nimport net.virtualinfinity.atrobots.hardware.HasOverburner;\r\nimport net.virtualinfinity.atrobots.hardware.armor.Armor;\r\nimport net.virtualinfinity.atrobots.hardware.armor.ArmorDepletionListener;\r\nimport net.virtualinfinity.atrobots.hardware.heatsinks.HeatSinks;\r\nimport net.virtualinfinity.atrobots.hardware.mines.MineLayer;\r\nimport net.virtualinfinity.atrobots.hardware.missiles.Missile;\r\nimport net.virtualinfinity.atrobots.hardware.missiles.MissileFactory;\r\nimport net.virtualinfinity.atrobots.hardware.radio.Transceiver;\r\nimport net.virtualinfinity.atrobots.hardware.scanning.ScanResult;\r\nimport net.virtualinfinity.atrobots.hardware.scanning.ScanSource;\r\nimport net.virtualinfinity.atrobots.hardware.scanning.radar.Radar;\r\nimport net.virtualinfinity.atrobots.hardware.scanning.sonar.Sonar;\r\nimport net.virtualinfinity.atrobots.hardware.shield.Shield;\r\nimport net.virtualinfinity.atrobots.hardware.throttle.Throttle;\r\nimport net.virtualinfinity.atrobots.hardware.transponder.Transponder;\r\nimport net.virtualinfinity.atrobots.hardware.turret.Turret;\r\nimport net.virtualinfinity.atrobots.interrupts.Destructable;\r\nimport net.virtualinfinity.atrobots.measures.*;\r\nimport net.virtualinfinity.atrobots.ports.PortHandler;\r\nimport net.virtualinfinity.atrobots.snapshots.ArenaObjectSnapshot;\r\nimport net.virtualinfinity.atrobots.snapshots.RobotSnapshot;\r\nimport java.util.ArrayList;\r\nimport java.util.List;\r\n\r\n/**\r\n * @author Daniel Pitts\r\n */\r\npublic class Robot extends TangibleArenaObject implements Resettable, HasHeading, Destructable, HasOverburner, MissileFactory, ArmorDepletionListener, ScanSource, DamageInflicter {\r\n\r\n    private final HeatSinks heatSinks = new HeatSinks();\r\n\r\n    private final Odometer odometer = new Odometer();\r\n\r\n    private final String name;\r\n\r\n    private final int id;\r\n\r\n    private final RobotScore score;\r\n\r\n    private Throttle throttle;\r\n\r\n    private Computer computer;\r\n\r\n    private Turret turret;\r\n\r\n    private Transponder transponder;\r\n\r\n    private Transceiver transceiver;\r\n\r\n    private Duration lastDamageGiven = Duration.fromCycles(0);\r\n\r\n    private Duration lastDamageTaken = Duration.fromCycles(0);\r\n\r\n    private Armor armor;\r\n\r\n    private Radar radar;\r\n\r\n    private Sonar sonar;\r\n\r\n    private Temperature shutdownLevel;\r\n\r\n    private MineLayer mineLayer;\r\n\r\n    private Shield shield;\r\n\r\n    private boolean overburn;\r\n\r\n    private HardwareBus hardwareBus;\r\n\r\n    private static final RelativeAngle STEERING_SPEED = RelativeAngle.fromBygrees(8);\r\n\r\n    private final Position oldPosition = new Position();\r\n\r\n    private int roundKills;\r\n\r\n    private final List<RobotListener> robotListeners = new ArrayList<RobotListener>();\r\n\r\n    private final Heading desiredHeading = new Heading(heading.getAngle());\r\n\r\n    {\r\n        position.setOdometer(odometer);\r\n    }\r\n\r\n    public Robot(String name, int id, RobotScore score) {\r\n        this.name = name;\r\n        this.id = id;\r\n        this.score = score;\r\n        this.roundKills = 0;\r\n    }\r\n\r\n    public void setComputer(Computer computer) {\r\n        this.computer = computer;\r\n        computer.setId(getId());\r\n        computer.setName(getName());\r\n    }\r\n\r\n    public Computer getComputer() {\r\n        return computer;\r\n    }\r\n\r\n    public void destruct() {\r\n        getArmor().destruct();\r\n    }\r\n\r\n    public Turret getTurret() {\r\n        return turret;\r\n    }\r\n\r\n    public void setOverburn(boolean overburn) {\r\n        this.overburn = overburn;\r\n    }\r\n\r\n    public Transponder getTransponder() {\r\n        return transponder;\r\n    }\r\n\r\n    public Speed getSpeed() {\r\n        return speed;\r\n    }\r\n\r\n    public Duration getLastDamageGiven() {\r\n        return lastDamageGiven;\r\n    }\r\n\r\n    public Duration getLastDamageTaken() {\r\n        return lastDamageTaken;\r\n    }\r\n\r\n    public Transceiver getTransceiver() {\r\n        return transceiver;\r\n    }\r\n\r\n    public Odometer getOdometer() {\r\n        return odometer;\r\n    }\r\n\r\n    public Throttle getThrottle() {\r\n        return throttle;\r\n    }\r\n\r\n    public HeatSinks getHeatSinks() {\r\n        return heatSinks;\r\n    }\r\n\r\n    public Heading getHeading() {\r\n        return heading;\r\n    }\r\n\r\n    public PortHandler getTurretOffsetSensor() {\r\n        return new PortHandler() {\r\n\r\n            public short read() {\r\n                return (short) getTurretShift();\r\n            }\r\n        };\r\n    }\r\n\r\n    public int getTurretShift() {\r\n        return getTurret().getHeading().getAngle().getAngleCounterClockwiseTo(getHeading().getAngle()).getBygrees();\r\n    }\r\n\r\n    public Armor getArmor() {\r\n        return armor;\r\n    }\r\n\r\n    public Radar getRadar() {\r\n        return radar;\r\n    }\r\n\r\n    public PortHandler getAimTurretPort() {\r\n        return new PortHandler() {\r\n\r\n            public void write(short value) {\r\n                setTurretOffset(RelativeAngle.fromBygrees(value));\r\n            }\r\n        };\r\n    }\r\n\r\n    private void setTurretOffset(RelativeAngle angle) {\r\n        getTurret().getHeading().setAngle(getHeading().getAngle().counterClockwise(angle));\r\n    }\r\n\r\n    public Heading getDesiredHeading() {\r\n        return desiredHeading;\r\n    }\r\n\r\n    public Sonar getSonar() {\r\n        return sonar;\r\n    }\r\n\r\n    public PortHandler getOverburnLatchPort() {\r\n        return new PortHandler() {\r\n\r\n            public short read() {\r\n                return (short) (isOverburn() ? 1 : 0);\r\n            }\r\n\r\n            public void write(short value) {\r\n                setOverburn(value != 0);\r\n            }\r\n        };\r\n    }\r\n\r\n    public boolean isOverburn() {\r\n        return overburn;\r\n    }\r\n\r\n    public PortHandler getShutdownLevelLatchPort() {\r\n        return new PortHandler() {\r\n\r\n            public short read() {\r\n                return (short) hardwareBus.getShutdownLevel();\r\n            }\r\n\r\n            public void write(short value) {\r\n                hardwareBus.setShutdownLevel(value);\r\n            }\r\n        };\r\n    }\r\n\r\n    public MineLayer getMineLayer() {\r\n        return mineLayer;\r\n    }\r\n\r\n    public Shield getShield() {\r\n        return shield;\r\n    }\r\n\r\n    public void setTurret(Turret turret) {\r\n        this.turret = turret;\r\n    }\r\n\r\n    public void setTransponder(Transponder transponder) {\r\n        this.transponder = transponder;\r\n    }\r\n\r\n    public void setTransceiver(Transceiver transceiver) {\r\n        this.transceiver = transceiver;\r\n    }\r\n\r\n    public void setArmor(Armor armor) {\r\n        this.armor = armor;\r\n        armor.setArmorDepletionListener(this);\r\n    }\r\n\r\n    public void setRadar(Radar radar) {\r\n        this.radar = radar;\r\n    }\r\n\r\n    public void setSonar(Sonar sonar) {\r\n        this.sonar = sonar;\r\n    }\r\n\r\n    public void setMineLayer(MineLayer mineLayer) {\r\n        this.mineLayer = mineLayer;\r\n    }\r\n\r\n    public void setShield(Shield shield) {\r\n        this.shield = shield;\r\n    }\r\n\r\n    public HardwareBus getHardwareBus() {\r\n        return hardwareBus;\r\n    }\r\n\r\n    public void setHardwareBus(HardwareBus hardwareBus) {\r\n        this.hardwareBus = hardwareBus;\r\n    }\r\n\r\n    public void reset() {\r\n        setOverburn(false);\r\n    }\r\n\r\n    public ScanResult scan(AngleBracket angleBracket, double maxDistance, boolean calculateAccuracy, boolean includeTargetDetails) {\r\n        final RobotScanResult scanResult = doScan(angleBracket, maxDistance, calculateAccuracy);\r\n        if (scanResult.successful()) {\r\n            getComputer().getRegisters().getTargetId().set((short) scanResult.getMatch().transponder.getId());\r\n            if (includeTargetDetails) {\r\n                final AbsoluteAngle matchAngle = scanResult.getMatch().getHeading().getAngle();\r\n                final AbsoluteAngle turretAngle = getTurret().getHeading().getAngle();\r\n                getComputer().getRegisters().getTargetHeading().set((short) matchAngle.getAngleCounterClockwiseTo(turretAngle).getBygrees());\r\n                getComputer().getRegisters().getTargetThrottle().set((short) scanResult.getMatch().getThrottle().getPower());\r\n                getComputer().getRegisters().getTargetVelocity().set((short) Math.round(scanResult.getMatch().getSpeed().times(Duration.ONE_CYCLE) * 100));\r\n            }\r\n        }\r\n        return scanResult;\r\n    }\r\n\r\n    private RobotScanResult doScan(AngleBracket angleBracket, double maxDistance, boolean calculateAccuracy) {\r\n        Position position = getPosition();\r\n        final RobotScanner robotScanner = new RobotScanner(this, position, angleBracket, maxDistance, calculateAccuracy);\r\n        getArena().visitActiveRobots(robotScanner);\r\n        final RobotScanResult scanResult = robotScanner.toScanResult();\r\n        final Scan object = new Scan(angleBracket, maxDistance, scanResult.successful(), scanResult.getMatchPositionVector(), calculateAccuracy && scanResult.successful(), scanResult.getAccuracy());\r\n        getArena().addIntangible(object);\r\n        object.getPosition().copyFrom(position);\r\n        return scanResult;\r\n    }\r\n\r\n    protected ArenaObjectSnapshot createSpecificSnapshot() {\r\n        final RobotSnapshot robotSnapshot = new RobotSnapshot();\r\n        robotSnapshot.setTemperature(getHeatSinks().getTemperature());\r\n        robotSnapshot.setArmor(getArmor().getRemaining());\r\n        robotSnapshot.setOverburn(isOverburn());\r\n        robotSnapshot.setActiveShield(getShield().isActive());\r\n        robotSnapshot.setHeading(getHeading().getAngle());\r\n        robotSnapshot.setTurretHeading(getTurret().getHeading().getAngle());\r\n        robotSnapshot.setName(getName());\r\n        robotSnapshot.setId(getId());\r\n        robotSnapshot.setRoundKills(getRoundKills());\r\n        robotSnapshot.setTotalKills(getTotalKills());\r\n        robotSnapshot.setTotalDeaths(getTotalDeaths());\r\n        robotSnapshot.setTotalWins(getTotalWins());\r\n        robotSnapshot.setTotalTies(getTotalTies());\r\n        robotSnapshot.setLastMessage(getComputer().getLastMessage());\r\n        return robotSnapshot;\r\n    }\r\n\r\n    @Override\r\n    public void checkCollision(TangibleArenaObject robot) {\r\n        if (robot.getPosition().getVectorTo(position).getMagnitudeSquared() < 64) {\r\n            collides();\r\n            robot.collides();\r\n        }\r\n    }\r\n\r\n    public void collides() {\r\n        position.copyFrom(oldPosition);\r\n        if (speed.times(Duration.ONE_CYCLE) > 2) {\r\n            armor.inflictDamage(1);\r\n        }\r\n        throttle.setPower(0);\r\n        throttle.setDesiredPower(0);\r\n        computer.getRegisters().getCollisionCount().increment();\r\n    }\r\n\r\n    public void inflictDamage(DamageInflicter cause, double damageAmount) {\r\n        if (!isDead()) {\r\n            final double unabsorbedAmount = shield.absorbDamage(damageAmount);\r\n            if (unabsorbedAmount > 0) {\r\n                lastDamageTaken = getArena().getRoundTimer().getTime();\r\n                cause.inflictedDamage(unabsorbedAmount);\r\n            }\r\n            armor.inflictDamage(unabsorbedAmount);\r\n            if (isDead()) {\r\n                cause.killedRobot();\r\n            }\r\n        }\r\n    }\r\n\r\n    public void armorDepleted() {\r\n        if (!isDead()) {\r\n            for (RobotListener listener : robotListeners) {\r\n                listener.died(this);\r\n            }\r\n            die();\r\n            getArena().explosion(this, new LinearDamageFunction(position, isOverburn() ? 1.3 : 1, 25.0));\r\n        }\r\n    }\r\n\r\n    public void update(Duration duration) {\r\n        oldPosition.copyFrom(position);\r\n        super.update(duration);\r\n        getThrottle().update(duration);\r\n        getHeading().moveToward(getDesiredHeading(), STEERING_SPEED);\r\n        getComputer().update(duration);\r\n        if (heatSinks.getTemperature().getLogScale() >= 500) {\r\n            destruct();\r\n        } else if (heatSinks.getTemperature().getLogScale() >= 475) {\r\n            armor.inflictDamage(duration.getCycles() / 4d);\r\n        } else if (heatSinks.getTemperature().getLogScale() >= 450) {\r\n            armor.inflictDamage(duration.getCycles() / 8d);\r\n        } else if (heatSinks.getTemperature().getLogScale() >= 400) {\r\n            armor.inflictDamage(duration.getCycles() / 16d);\r\n        } else if (heatSinks.getTemperature().getLogScale() >= 350) {\r\n            armor.inflictDamage(duration.getCycles() / 32d);\r\n        } else if (heatSinks.getTemperature().getLogScale() >= 300) {\r\n            armor.inflictDamage(duration.getCycles() / 64d);\r\n        }\r\n        heatSinks.cool(isOverburn() ? getCoolTemp(duration).times(0.66) : getCoolTemp(duration));\r\n        shield.update(duration);\r\n        if (position.getX() < 4 || position.getX() > 1000 - 4 || position.getY() < 4 || position.getY() > 1000 - 4) {\r\n            collides();\r\n        }\r\n    }\r\n\r\n    private Temperature getCoolTemp(Duration duration) {\r\n        return Temperature.fromLogScale(duration.getCycles() * 1.125);\r\n    }\r\n\r\n    public void setThrottle(Throttle throttle) {\r\n        this.throttle = throttle;\r\n        throttle.setSpeed(speed);\r\n        throttle.setHeatSinks(heatSinks);\r\n    }\r\n\r\n    public void winRound() {\r\n        for (RobotListener listener : robotListeners) {\r\n            listener.wonRound(this);\r\n        }\r\n    }\r\n\r\n    public void tieRound() {\r\n        for (RobotListener listener : robotListeners) {\r\n            listener.tiedRound(this);\r\n        }\r\n    }\r\n\r\n    public void killedRobot() {\r\n        for (RobotListener listener : robotListeners) {\r\n            listener.killedRobot(this);\r\n        }\r\n    }\r\n\r\n    public void inflictedDamage(double amount) {\r\n        lastDamageGiven = getArena().getRoundTimer().getTime();\r\n        for (RobotListener listener : robotListeners) {\r\n            listener.inflictedDamage(this, amount);\r\n        }\r\n    }\r\n\r\n    public String getName() {\r\n        return name;\r\n    }\r\n\r\n    public int getTotalKills() {\r\n        return score.getTotalKills();\r\n    }\r\n\r\n    public int getRoundKills() {\r\n        return roundKills;\r\n    }\r\n\r\n    public int getTotalDeaths() {\r\n        return score.getTotalDeaths();\r\n    }\r\n\r\n    public int getId() {\r\n        return id;\r\n    }\r\n\r\n    public int getTotalWins() {\r\n        return score.getTotalWins();\r\n    }\r\n\r\n    public int getTotalTies() {\r\n        return score.getTotalTies();\r\n    }\r\n\r\n    public void addRobotListener(RobotListener robotListener) {\r\n        robotListeners.add(robotListener);\r\n    }\r\n\r\n    @Override\r\n    protected void arenaConnected(Arena arena) {\r\n        transceiver.setRadioDispatcher(arena.getRadioDispatcher());\r\n    }\r\n\r\n    public InterruptHandler createGetRobotInfoInterruptHandler(MemoryCell speed, MemoryCell lastDamageTaken, MemoryCell lastDamageGiven) {\r\n        return new GetRobotInfoInterrupt(speed, lastDamageTaken, lastDamageGiven);\r\n    }\r\n\r\n    public GetRobotStatisticsInterrupt createGetRobotStatisticsInterrupt(MemoryCell totalKills, MemoryCell roundKills, MemoryCell totalDeaths) {\r\n        return new GetRobotStatisticsInterrupt(totalKills, roundKills, totalDeaths);\r\n    }\r\n\r\n    public Missile createMissile(AbsoluteAngle heading, Position position, double power) {\r\n        return new Missile(this, position, heading, power, this.isOverburn());\r\n    }\r\n\r\n    public void accept(ArenaObjectVisitor arenaObjectVisitor) {\r\n        arenaObjectVisitor.visit(this);\r\n    }\r\n\r\n    /**\r\n     * @author Daniel Pitts\r\n     */\r\n    public class GetRobotInfoInterrupt extends InterruptHandler {\r\n\r\n        private final MemoryCell speed;\r\n\r\n        private final MemoryCell lastDamageTaken;\r\n\r\n        private final MemoryCell lastDamageGiven;\r\n\r\n        private GetRobotInfoInterrupt(MemoryCell speed, MemoryCell lastDamageTaken, MemoryCell lastDamageGiven) {\r\n            this.speed = speed;\r\n            this.lastDamageTaken = lastDamageTaken;\r\n            this.lastDamageGiven = lastDamageGiven;\r\n        }\r\n\r\n        public void handleInterrupt() {\r\n            speed.set((short) Math.round(getSpeed().times(Duration.ONE_CYCLE) * 100));\r\n            lastDamageGiven.set((short) getLastDamageGiven().getCycles());\r\n            lastDamageTaken.set((short) getLastDamageTaken().getCycles());\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @author Daniel Pitts\r\n     */\r\n    public class GetRobotStatisticsInterrupt extends InterruptHandler {\r\n\r\n        private final MemoryCell totalKills;\r\n\r\n        private final MemoryCell roundKills;\r\n\r\n        private final MemoryCell totalDeaths;\r\n\r\n        private GetRobotStatisticsInterrupt(MemoryCell totalKills, MemoryCell roundKills, MemoryCell totalDeaths) {\r\n            this.totalKills = totalKills;\r\n            this.roundKills = roundKills;\r\n            this.totalDeaths = totalDeaths;\r\n        }\r\n\r\n        public void handleInterrupt() {\r\n            totalKills.set((short) getTotalKills());\r\n            roundKills.set((short) getRoundKills());\r\n            totalDeaths.set((short) getTotalDeaths());\r\n        }\r\n    }\r\n}\r\n",
		"id": "EvoSuiteBenchmark/86_at-robots2-j/src/main/java/net/virtualinfinity/atrobots/robot/RobotTest4.java",
		"test_prompt": "// RobotTest4.java\npackage net.virtualinfinity.atrobots.robot;\n\nimport net.virtualinfinity.atrobots.ArenaObjectVisitor;\nimport net.virtualinfinity.atrobots.arena.*;\nimport net.virtualinfinity.atrobots.arenaobjects.DamageInflicter;\nimport net.virtualinfinity.atrobots.computer.*;\nimport net.virtualinfinity.atrobots.hardware.HasHeading;\nimport net.virtualinfinity.atrobots.hardware.HasOverburner;\nimport net.virtualinfinity.atrobots.hardware.armor.Armor;\nimport net.virtualinfinity.atrobots.hardware.armor.ArmorDepletionListener;\nimport net.virtualinfinity.atrobots.hardware.heatsinks.HeatSinks;\nimport net.virtualinfinity.atrobots.hardware.mines.MineLayer;\nimport net.virtualinfinity.atrobots.hardware.missiles.Missile;\nimport net.virtualinfinity.atrobots.hardware.missiles.MissileFactory;\nimport net.virtualinfinity.atrobots.hardware.radio.Transceiver;\nimport net.virtualinfinity.atrobots.hardware.scanning.ScanResult;\nimport net.virtualinfinity.atrobots.hardware.scanning.ScanSource;\nimport net.virtualinfinity.atrobots.hardware.scanning.radar.Radar;\nimport net.virtualinfinity.atrobots.hardware.scanning.sonar.Sonar;\nimport net.virtualinfinity.atrobots.hardware.shield.Shield;\nimport net.virtualinfinity.atrobots.hardware.throttle.Throttle;\nimport net.virtualinfinity.atrobots.hardware.transponder.Transponder;\nimport net.virtualinfinity.atrobots.hardware.turret.Turret;\nimport net.virtualinfinity.atrobots.interrupts.Destructable;\nimport net.virtualinfinity.atrobots.measures.*;\nimport net.virtualinfinity.atrobots.ports.PortHandler;\nimport net.virtualinfinity.atrobots.snapshots.ArenaObjectSnapshot;\nimport net.virtualinfinity.atrobots.snapshots.RobotSnapshot;\nimport java.util.ArrayList;\nimport java.util.List;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link Robot}.\n* It contains ten unit test cases for the {@link Robot#createMissile(AbsoluteAngle, Position, double)} method.\n*/\nclass RobotTest4 {"
	},
	{
		"original_code": "// RobotScanResult.java\npackage net.virtualinfinity.atrobots.robot;\r\n\r\nimport net.virtualinfinity.atrobots.hardware.scanning.ScanResult;\r\nimport net.virtualinfinity.atrobots.measures.AbsoluteAngle;\r\nimport net.virtualinfinity.atrobots.measures.Vector;\r\n\r\n/**\r\n * @author Daniel Pitts\r\n */\r\npublic class RobotScanResult implements ScanResult {\r\n\r\n    private final Robot match;\r\n\r\n    private final double distance;\r\n\r\n    private final AbsoluteAngle angle;\r\n\r\n    private final AbsoluteAngle heading;\r\n\r\n    private final int throttle;\r\n\r\n    private final int accuracy;\r\n\r\n    public RobotScanResult(Robot match, double distance, AbsoluteAngle angle, int accuracy) {\r\n        this.match = match;\r\n        this.distance = distance;\r\n        this.angle = angle;\r\n        this.accuracy = accuracy;\r\n        heading = match.getHeading().getAngle();\r\n        throttle = match.getThrottle().getDesiredPower();\r\n    }\r\n\r\n    public RobotScanResult() {\r\n        distance = Double.POSITIVE_INFINITY;\r\n        match = null;\r\n        angle = null;\r\n        heading = null;\r\n        throttle = 0;\r\n        accuracy = 0;\r\n    }\r\n\r\n    public Robot getMatch() {\r\n        return match;\r\n    }\r\n\r\n    public double getDistance() {\r\n        return distance;\r\n    }\r\n\r\n    public AbsoluteAngle getAngle() {\r\n        return angle;\r\n    }\r\n\r\n    public AbsoluteAngle getHeading() {\r\n        return heading;\r\n    }\r\n\r\n    public int getThrottle() {\r\n        return throttle;\r\n    }\r\n\r\n    public boolean successful() {\r\n        return match != null;\r\n    }\r\n\r\n    public int getAccuracy() {\r\n        return accuracy;\r\n    }\r\n\r\n    Vector getMatchPositionVector() {\r\n        return successful() ? getMatch().getPosition().getVector() : null;\r\n    }\r\n}\r\n",
		"id": "EvoSuiteBenchmark/86_at-robots2-j/src/main/java/net/virtualinfinity/atrobots/robot/RobotScanResultTest.java",
		"test_prompt": "// RobotScanResultTest.java\npackage net.virtualinfinity.atrobots.robot;\n\nimport net.virtualinfinity.atrobots.hardware.scanning.ScanResult;\nimport net.virtualinfinity.atrobots.measures.AbsoluteAngle;\nimport net.virtualinfinity.atrobots.measures.Vector;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link RobotScanResult}.\n* It contains ten unit test cases for the {@link RobotScanResult#successful()} method.\n*/\nclass RobotScanResultTest {"
	},
	{
		"original_code": "// RobotRenderer.java\npackage net.virtualinfinity.atrobots.gui.renderers;\r\n\r\nimport net.virtualinfinity.atrobots.measures.AbsoluteAngle;\r\nimport net.virtualinfinity.atrobots.measures.RelativeAngle;\r\nimport net.virtualinfinity.atrobots.snapshots.RobotSnapshot;\r\nimport java.awt.*;\r\nimport java.awt.geom.Ellipse2D;\r\nimport java.awt.geom.GeneralPath;\r\nimport java.awt.geom.Line2D;\r\nimport java.awt.geom.Rectangle2D;\r\nimport java.util.Set;\r\n\r\n/**\r\n * @author Daniel Pitts\r\n */\r\npublic class RobotRenderer implements SnapshotRenderer<RobotSnapshot> {\r\n\r\n    private boolean showStatusBars = true;\r\n\r\n    private boolean renderDead = true;\r\n\r\n    private boolean showName = true;\r\n\r\n    private boolean fillShield = true;\r\n\r\n    private static final Color HEAT_COLOR1 = new Color(1f, 0f, 0f, 0.1f);\r\n\r\n    private static final Color HEAT_COLOR2 = Color.yellow;\r\n\r\n    public void render(Graphics2D g2d, RobotSnapshot robotSnapshot, Set<Integer> selectedRobotIds) {\r\n        if (!isRenderDead() && robotSnapshot.isDead()) {\r\n            return;\r\n        }\r\n        paintBody(g2d, robotSnapshot);\r\n        if (!robotSnapshot.isDead()) {\r\n            paintShield(g2d, robotSnapshot);\r\n            paintTurret(g2d, robotSnapshot);\r\n            if (isShowStatusBars()) {\r\n                paintArmor(g2d, robotSnapshot);\r\n                paintHeat(g2d, robotSnapshot);\r\n            }\r\n            if (isShowName()) {\r\n                paintName(g2d, robotSnapshot);\r\n            }\r\n        }\r\n        if (selectedRobotIds.contains(robotSnapshot.getId())) {\r\n            paintSelection(g2d, robotSnapshot);\r\n        }\r\n    }\r\n\r\n    public boolean isRenderDead() {\r\n        return renderDead;\r\n    }\r\n\r\n    public void setRenderDead(boolean renderDead) {\r\n        this.renderDead = renderDead;\r\n    }\r\n\r\n    public boolean isShowStatusBars() {\r\n        return showStatusBars;\r\n    }\r\n\r\n    public void setShowStatusBars(boolean showStatusBars) {\r\n        this.showStatusBars = showStatusBars;\r\n    }\r\n\r\n    public boolean isShowName() {\r\n        return showName;\r\n    }\r\n\r\n    public void setShowName(boolean showName) {\r\n        this.showName = showName;\r\n    }\r\n\r\n    public boolean isFillShield() {\r\n        return fillShield;\r\n    }\r\n\r\n    public void setFillShield(boolean fillShield) {\r\n        this.fillShield = fillShield;\r\n    }\r\n\r\n    private void paintSelection(Graphics2D g2d, RobotSnapshot robotSnapshot) {\r\n        g2d.setPaint(new Color(1f, 1f, 0f, .25f));\r\n        final Ellipse2D.Double s = new Ellipse2D.Double();\r\n        s.setFrameFromCenter(robotSnapshot.getX(), robotSnapshot.getY(), robotSnapshot.getX() + 30, robotSnapshot.getY() + 30);\r\n        g2d.fill(s);\r\n    }\r\n\r\n    private void paintShield(Graphics2D g2d, RobotSnapshot robotSnapshot) {\r\n        if (robotSnapshot.isActiveShield()) {\r\n            final Ellipse2D.Double s = new Ellipse2D.Double();\r\n            s.setFrameFromCenter(robotSnapshot.getX(), robotSnapshot.getY(), robotSnapshot.getX() + 15, robotSnapshot.getY() + 15);\r\n            if (isFillShield()) {\r\n                g2d.setPaint(new RadialGradientPaint(robotSnapshot.getPositionVector().toPoint2D(), 15, new float[] { 0, .75f, 1f }, new Color[] { new Color(.5f, .5f, 0f, .8f), new Color(0, 0, .5f, .1f), Color.white }));\r\n                g2d.fill(s);\r\n                g2d.fill(s);\r\n            } else {\r\n                g2d.setPaint(new Color(.8f, .6f, 1f));\r\n                g2d.draw(s);\r\n            }\r\n        }\r\n    }\r\n\r\n    private void paintName(Graphics2D g2d, RobotSnapshot robotSnapshot) {\r\n        g2d.setPaint(Color.yellow);\r\n        g2d.drawString(robotSnapshot.getName(), (float) (robotSnapshot.getX() - g2d.getFontMetrics().getStringBounds(robotSnapshot.getName(), g2d).getWidth() / 2), (float) (robotSnapshot.getY() - 10));\r\n    }\r\n\r\n    private void paintHeat(Graphics2D g2d, RobotSnapshot robotSnapshot) {\r\n        final Rectangle2D.Double rect = new Rectangle2D.Double(robotSnapshot.getX() - 50, robotSnapshot.getY() + 35, 100, 10);\r\n        g2d.setPaint(new GradientPaint((float) rect.getMinX(), (float) rect.getMinY(), HEAT_COLOR1, (float) rect.getMaxX(), (float) rect.getMinY(), HEAT_COLOR2));\r\n        if (!robotSnapshot.isDead()) {\r\n            g2d.fill(new Rectangle2D.Double(robotSnapshot.getX() - 50, robotSnapshot.getY() + 35, robotSnapshot.getTemperature().getLogScale() * .2, 10));\r\n        }\r\n        g2d.draw(rect);\r\n    }\r\n\r\n    private void paintArmor(Graphics2D g2d, RobotSnapshot robotSnapshot) {\r\n        g2d.setPaint(new Color(0f, 0f, 1f, 0.6f));\r\n        g2d.fill(new Rectangle2D.Double(robotSnapshot.getX() - 50, robotSnapshot.getY() + 20, robotSnapshot.getArmor(), 10));\r\n        g2d.setPaint(new Color(0f, 1f, 0f, 0.6f));\r\n        g2d.draw(new Rectangle2D.Double(robotSnapshot.getX() - 50, robotSnapshot.getY() + 20, 100, 10));\r\n    }\r\n\r\n    private void paintTurret(Graphics2D g2d, RobotSnapshot robotSnapshot) {\r\n        g2d.setPaint(Color.white);\r\n        g2d.draw(new Line2D.Double(robotSnapshot.getX(), robotSnapshot.getY(), robotSnapshot.getX() + robotSnapshot.getTurretHeading().cosine() * 5, robotSnapshot.getY() + robotSnapshot.getTurretHeading().sine() * 5));\r\n    }\r\n\r\n    private void paintBody(Graphics2D g2d, RobotSnapshot robotSnapshot) {\r\n        final Stroke stroke = g2d.getStroke();\r\n        if (robotSnapshot.isDead()) {\r\n            final BasicStroke basicStroke = new BasicStroke(1, BasicStroke.CAP_ROUND, BasicStroke.JOIN_MITER, 10, new float[] { 5f, 5f }, 0f);\r\n            g2d.setStroke(basicStroke);\r\n            g2d.setPaint(Color.orange.darker().darker());\r\n        } else {\r\n            g2d.setPaint(Color.red);\r\n        }\r\n        final GeneralPath path = new GeneralPath();\r\n        path.moveTo(robotSnapshot.getX() + robotSnapshot.getHeading().cosine() * 15, robotSnapshot.getY() + robotSnapshot.getHeading().sine() * 15);\r\n        AbsoluteAngle cc = robotSnapshot.getHeading().counterClockwise(RelativeAngle.fromBygrees(160));\r\n        AbsoluteAngle c = robotSnapshot.getHeading().clockwise(RelativeAngle.fromBygrees(160));\r\n        path.lineTo(robotSnapshot.getX() + cc.cosine() * 9, robotSnapshot.getY() + cc.sine() * 9);\r\n        path.lineTo(robotSnapshot.getX(), robotSnapshot.getY());\r\n        path.lineTo(robotSnapshot.getX() + c.cosine() * 9, robotSnapshot.getY() + c.sine() * 9);\r\n        path.closePath();\r\n        if (robotSnapshot.isDead()) {\r\n            g2d.draw(path);\r\n        } else {\r\n            g2d.fill(path);\r\n        }\r\n        g2d.setStroke(stroke);\r\n    }\r\n}\r\n",
		"id": "EvoSuiteBenchmark/86_at-robots2-j/src/main/java/net/virtualinfinity/atrobots/gui/renderers/RobotRendererTest0.java",
		"test_prompt": "// RobotRendererTest0.java\npackage net.virtualinfinity.atrobots.gui.renderers;\n\nimport net.virtualinfinity.atrobots.measures.AbsoluteAngle;\nimport net.virtualinfinity.atrobots.measures.RelativeAngle;\nimport net.virtualinfinity.atrobots.snapshots.RobotSnapshot;\nimport java.awt.*;\nimport java.awt.geom.Ellipse2D;\nimport java.awt.geom.GeneralPath;\nimport java.awt.geom.Line2D;\nimport java.awt.geom.Rectangle2D;\nimport java.util.Set;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link RobotRenderer}.\n* It contains ten unit test cases for the {@link RobotRenderer#isRenderDead()} method.\n*/\nclass RobotRendererTest0 {"
	},
	{
		"original_code": "// RobotRenderer.java\npackage net.virtualinfinity.atrobots.gui.renderers;\r\n\r\nimport net.virtualinfinity.atrobots.measures.AbsoluteAngle;\r\nimport net.virtualinfinity.atrobots.measures.RelativeAngle;\r\nimport net.virtualinfinity.atrobots.snapshots.RobotSnapshot;\r\nimport java.awt.*;\r\nimport java.awt.geom.Ellipse2D;\r\nimport java.awt.geom.GeneralPath;\r\nimport java.awt.geom.Line2D;\r\nimport java.awt.geom.Rectangle2D;\r\nimport java.util.Set;\r\n\r\n/**\r\n * @author Daniel Pitts\r\n */\r\npublic class RobotRenderer implements SnapshotRenderer<RobotSnapshot> {\r\n\r\n    private boolean showStatusBars = true;\r\n\r\n    private boolean renderDead = true;\r\n\r\n    private boolean showName = true;\r\n\r\n    private boolean fillShield = true;\r\n\r\n    private static final Color HEAT_COLOR1 = new Color(1f, 0f, 0f, 0.1f);\r\n\r\n    private static final Color HEAT_COLOR2 = Color.yellow;\r\n\r\n    public void render(Graphics2D g2d, RobotSnapshot robotSnapshot, Set<Integer> selectedRobotIds) {\r\n        if (!isRenderDead() && robotSnapshot.isDead()) {\r\n            return;\r\n        }\r\n        paintBody(g2d, robotSnapshot);\r\n        if (!robotSnapshot.isDead()) {\r\n            paintShield(g2d, robotSnapshot);\r\n            paintTurret(g2d, robotSnapshot);\r\n            if (isShowStatusBars()) {\r\n                paintArmor(g2d, robotSnapshot);\r\n                paintHeat(g2d, robotSnapshot);\r\n            }\r\n            if (isShowName()) {\r\n                paintName(g2d, robotSnapshot);\r\n            }\r\n        }\r\n        if (selectedRobotIds.contains(robotSnapshot.getId())) {\r\n            paintSelection(g2d, robotSnapshot);\r\n        }\r\n    }\r\n\r\n    public boolean isRenderDead() {\r\n        return renderDead;\r\n    }\r\n\r\n    public void setRenderDead(boolean renderDead) {\r\n        this.renderDead = renderDead;\r\n    }\r\n\r\n    public boolean isShowStatusBars() {\r\n        return showStatusBars;\r\n    }\r\n\r\n    public void setShowStatusBars(boolean showStatusBars) {\r\n        this.showStatusBars = showStatusBars;\r\n    }\r\n\r\n    public boolean isShowName() {\r\n        return showName;\r\n    }\r\n\r\n    public void setShowName(boolean showName) {\r\n        this.showName = showName;\r\n    }\r\n\r\n    public boolean isFillShield() {\r\n        return fillShield;\r\n    }\r\n\r\n    public void setFillShield(boolean fillShield) {\r\n        this.fillShield = fillShield;\r\n    }\r\n\r\n    private void paintSelection(Graphics2D g2d, RobotSnapshot robotSnapshot) {\r\n        g2d.setPaint(new Color(1f, 1f, 0f, .25f));\r\n        final Ellipse2D.Double s = new Ellipse2D.Double();\r\n        s.setFrameFromCenter(robotSnapshot.getX(), robotSnapshot.getY(), robotSnapshot.getX() + 30, robotSnapshot.getY() + 30);\r\n        g2d.fill(s);\r\n    }\r\n\r\n    private void paintShield(Graphics2D g2d, RobotSnapshot robotSnapshot) {\r\n        if (robotSnapshot.isActiveShield()) {\r\n            final Ellipse2D.Double s = new Ellipse2D.Double();\r\n            s.setFrameFromCenter(robotSnapshot.getX(), robotSnapshot.getY(), robotSnapshot.getX() + 15, robotSnapshot.getY() + 15);\r\n            if (isFillShield()) {\r\n                g2d.setPaint(new RadialGradientPaint(robotSnapshot.getPositionVector().toPoint2D(), 15, new float[] { 0, .75f, 1f }, new Color[] { new Color(.5f, .5f, 0f, .8f), new Color(0, 0, .5f, .1f), Color.white }));\r\n                g2d.fill(s);\r\n                g2d.fill(s);\r\n            } else {\r\n                g2d.setPaint(new Color(.8f, .6f, 1f));\r\n                g2d.draw(s);\r\n            }\r\n        }\r\n    }\r\n\r\n    private void paintName(Graphics2D g2d, RobotSnapshot robotSnapshot) {\r\n        g2d.setPaint(Color.yellow);\r\n        g2d.drawString(robotSnapshot.getName(), (float) (robotSnapshot.getX() - g2d.getFontMetrics().getStringBounds(robotSnapshot.getName(), g2d).getWidth() / 2), (float) (robotSnapshot.getY() - 10));\r\n    }\r\n\r\n    private void paintHeat(Graphics2D g2d, RobotSnapshot robotSnapshot) {\r\n        final Rectangle2D.Double rect = new Rectangle2D.Double(robotSnapshot.getX() - 50, robotSnapshot.getY() + 35, 100, 10);\r\n        g2d.setPaint(new GradientPaint((float) rect.getMinX(), (float) rect.getMinY(), HEAT_COLOR1, (float) rect.getMaxX(), (float) rect.getMinY(), HEAT_COLOR2));\r\n        if (!robotSnapshot.isDead()) {\r\n            g2d.fill(new Rectangle2D.Double(robotSnapshot.getX() - 50, robotSnapshot.getY() + 35, robotSnapshot.getTemperature().getLogScale() * .2, 10));\r\n        }\r\n        g2d.draw(rect);\r\n    }\r\n\r\n    private void paintArmor(Graphics2D g2d, RobotSnapshot robotSnapshot) {\r\n        g2d.setPaint(new Color(0f, 0f, 1f, 0.6f));\r\n        g2d.fill(new Rectangle2D.Double(robotSnapshot.getX() - 50, robotSnapshot.getY() + 20, robotSnapshot.getArmor(), 10));\r\n        g2d.setPaint(new Color(0f, 1f, 0f, 0.6f));\r\n        g2d.draw(new Rectangle2D.Double(robotSnapshot.getX() - 50, robotSnapshot.getY() + 20, 100, 10));\r\n    }\r\n\r\n    private void paintTurret(Graphics2D g2d, RobotSnapshot robotSnapshot) {\r\n        g2d.setPaint(Color.white);\r\n        g2d.draw(new Line2D.Double(robotSnapshot.getX(), robotSnapshot.getY(), robotSnapshot.getX() + robotSnapshot.getTurretHeading().cosine() * 5, robotSnapshot.getY() + robotSnapshot.getTurretHeading().sine() * 5));\r\n    }\r\n\r\n    private void paintBody(Graphics2D g2d, RobotSnapshot robotSnapshot) {\r\n        final Stroke stroke = g2d.getStroke();\r\n        if (robotSnapshot.isDead()) {\r\n            final BasicStroke basicStroke = new BasicStroke(1, BasicStroke.CAP_ROUND, BasicStroke.JOIN_MITER, 10, new float[] { 5f, 5f }, 0f);\r\n            g2d.setStroke(basicStroke);\r\n            g2d.setPaint(Color.orange.darker().darker());\r\n        } else {\r\n            g2d.setPaint(Color.red);\r\n        }\r\n        final GeneralPath path = new GeneralPath();\r\n        path.moveTo(robotSnapshot.getX() + robotSnapshot.getHeading().cosine() * 15, robotSnapshot.getY() + robotSnapshot.getHeading().sine() * 15);\r\n        AbsoluteAngle cc = robotSnapshot.getHeading().counterClockwise(RelativeAngle.fromBygrees(160));\r\n        AbsoluteAngle c = robotSnapshot.getHeading().clockwise(RelativeAngle.fromBygrees(160));\r\n        path.lineTo(robotSnapshot.getX() + cc.cosine() * 9, robotSnapshot.getY() + cc.sine() * 9);\r\n        path.lineTo(robotSnapshot.getX(), robotSnapshot.getY());\r\n        path.lineTo(robotSnapshot.getX() + c.cosine() * 9, robotSnapshot.getY() + c.sine() * 9);\r\n        path.closePath();\r\n        if (robotSnapshot.isDead()) {\r\n            g2d.draw(path);\r\n        } else {\r\n            g2d.fill(path);\r\n        }\r\n        g2d.setStroke(stroke);\r\n    }\r\n}\r\n",
		"id": "EvoSuiteBenchmark/86_at-robots2-j/src/main/java/net/virtualinfinity/atrobots/gui/renderers/RobotRendererTest1.java",
		"test_prompt": "// RobotRendererTest1.java\npackage net.virtualinfinity.atrobots.gui.renderers;\n\nimport net.virtualinfinity.atrobots.measures.AbsoluteAngle;\nimport net.virtualinfinity.atrobots.measures.RelativeAngle;\nimport net.virtualinfinity.atrobots.snapshots.RobotSnapshot;\nimport java.awt.*;\nimport java.awt.geom.Ellipse2D;\nimport java.awt.geom.GeneralPath;\nimport java.awt.geom.Line2D;\nimport java.awt.geom.Rectangle2D;\nimport java.util.Set;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link RobotRenderer}.\n* It contains ten unit test cases for the {@link RobotRenderer#isShowStatusBars()} method.\n*/\nclass RobotRendererTest1 {"
	},
	{
		"original_code": "// RobotRenderer.java\npackage net.virtualinfinity.atrobots.gui.renderers;\r\n\r\nimport net.virtualinfinity.atrobots.measures.AbsoluteAngle;\r\nimport net.virtualinfinity.atrobots.measures.RelativeAngle;\r\nimport net.virtualinfinity.atrobots.snapshots.RobotSnapshot;\r\nimport java.awt.*;\r\nimport java.awt.geom.Ellipse2D;\r\nimport java.awt.geom.GeneralPath;\r\nimport java.awt.geom.Line2D;\r\nimport java.awt.geom.Rectangle2D;\r\nimport java.util.Set;\r\n\r\n/**\r\n * @author Daniel Pitts\r\n */\r\npublic class RobotRenderer implements SnapshotRenderer<RobotSnapshot> {\r\n\r\n    private boolean showStatusBars = true;\r\n\r\n    private boolean renderDead = true;\r\n\r\n    private boolean showName = true;\r\n\r\n    private boolean fillShield = true;\r\n\r\n    private static final Color HEAT_COLOR1 = new Color(1f, 0f, 0f, 0.1f);\r\n\r\n    private static final Color HEAT_COLOR2 = Color.yellow;\r\n\r\n    public void render(Graphics2D g2d, RobotSnapshot robotSnapshot, Set<Integer> selectedRobotIds) {\r\n        if (!isRenderDead() && robotSnapshot.isDead()) {\r\n            return;\r\n        }\r\n        paintBody(g2d, robotSnapshot);\r\n        if (!robotSnapshot.isDead()) {\r\n            paintShield(g2d, robotSnapshot);\r\n            paintTurret(g2d, robotSnapshot);\r\n            if (isShowStatusBars()) {\r\n                paintArmor(g2d, robotSnapshot);\r\n                paintHeat(g2d, robotSnapshot);\r\n            }\r\n            if (isShowName()) {\r\n                paintName(g2d, robotSnapshot);\r\n            }\r\n        }\r\n        if (selectedRobotIds.contains(robotSnapshot.getId())) {\r\n            paintSelection(g2d, robotSnapshot);\r\n        }\r\n    }\r\n\r\n    public boolean isRenderDead() {\r\n        return renderDead;\r\n    }\r\n\r\n    public void setRenderDead(boolean renderDead) {\r\n        this.renderDead = renderDead;\r\n    }\r\n\r\n    public boolean isShowStatusBars() {\r\n        return showStatusBars;\r\n    }\r\n\r\n    public void setShowStatusBars(boolean showStatusBars) {\r\n        this.showStatusBars = showStatusBars;\r\n    }\r\n\r\n    public boolean isShowName() {\r\n        return showName;\r\n    }\r\n\r\n    public void setShowName(boolean showName) {\r\n        this.showName = showName;\r\n    }\r\n\r\n    public boolean isFillShield() {\r\n        return fillShield;\r\n    }\r\n\r\n    public void setFillShield(boolean fillShield) {\r\n        this.fillShield = fillShield;\r\n    }\r\n\r\n    private void paintSelection(Graphics2D g2d, RobotSnapshot robotSnapshot) {\r\n        g2d.setPaint(new Color(1f, 1f, 0f, .25f));\r\n        final Ellipse2D.Double s = new Ellipse2D.Double();\r\n        s.setFrameFromCenter(robotSnapshot.getX(), robotSnapshot.getY(), robotSnapshot.getX() + 30, robotSnapshot.getY() + 30);\r\n        g2d.fill(s);\r\n    }\r\n\r\n    private void paintShield(Graphics2D g2d, RobotSnapshot robotSnapshot) {\r\n        if (robotSnapshot.isActiveShield()) {\r\n            final Ellipse2D.Double s = new Ellipse2D.Double();\r\n            s.setFrameFromCenter(robotSnapshot.getX(), robotSnapshot.getY(), robotSnapshot.getX() + 15, robotSnapshot.getY() + 15);\r\n            if (isFillShield()) {\r\n                g2d.setPaint(new RadialGradientPaint(robotSnapshot.getPositionVector().toPoint2D(), 15, new float[] { 0, .75f, 1f }, new Color[] { new Color(.5f, .5f, 0f, .8f), new Color(0, 0, .5f, .1f), Color.white }));\r\n                g2d.fill(s);\r\n                g2d.fill(s);\r\n            } else {\r\n                g2d.setPaint(new Color(.8f, .6f, 1f));\r\n                g2d.draw(s);\r\n            }\r\n        }\r\n    }\r\n\r\n    private void paintName(Graphics2D g2d, RobotSnapshot robotSnapshot) {\r\n        g2d.setPaint(Color.yellow);\r\n        g2d.drawString(robotSnapshot.getName(), (float) (robotSnapshot.getX() - g2d.getFontMetrics().getStringBounds(robotSnapshot.getName(), g2d).getWidth() / 2), (float) (robotSnapshot.getY() - 10));\r\n    }\r\n\r\n    private void paintHeat(Graphics2D g2d, RobotSnapshot robotSnapshot) {\r\n        final Rectangle2D.Double rect = new Rectangle2D.Double(robotSnapshot.getX() - 50, robotSnapshot.getY() + 35, 100, 10);\r\n        g2d.setPaint(new GradientPaint((float) rect.getMinX(), (float) rect.getMinY(), HEAT_COLOR1, (float) rect.getMaxX(), (float) rect.getMinY(), HEAT_COLOR2));\r\n        if (!robotSnapshot.isDead()) {\r\n            g2d.fill(new Rectangle2D.Double(robotSnapshot.getX() - 50, robotSnapshot.getY() + 35, robotSnapshot.getTemperature().getLogScale() * .2, 10));\r\n        }\r\n        g2d.draw(rect);\r\n    }\r\n\r\n    private void paintArmor(Graphics2D g2d, RobotSnapshot robotSnapshot) {\r\n        g2d.setPaint(new Color(0f, 0f, 1f, 0.6f));\r\n        g2d.fill(new Rectangle2D.Double(robotSnapshot.getX() - 50, robotSnapshot.getY() + 20, robotSnapshot.getArmor(), 10));\r\n        g2d.setPaint(new Color(0f, 1f, 0f, 0.6f));\r\n        g2d.draw(new Rectangle2D.Double(robotSnapshot.getX() - 50, robotSnapshot.getY() + 20, 100, 10));\r\n    }\r\n\r\n    private void paintTurret(Graphics2D g2d, RobotSnapshot robotSnapshot) {\r\n        g2d.setPaint(Color.white);\r\n        g2d.draw(new Line2D.Double(robotSnapshot.getX(), robotSnapshot.getY(), robotSnapshot.getX() + robotSnapshot.getTurretHeading().cosine() * 5, robotSnapshot.getY() + robotSnapshot.getTurretHeading().sine() * 5));\r\n    }\r\n\r\n    private void paintBody(Graphics2D g2d, RobotSnapshot robotSnapshot) {\r\n        final Stroke stroke = g2d.getStroke();\r\n        if (robotSnapshot.isDead()) {\r\n            final BasicStroke basicStroke = new BasicStroke(1, BasicStroke.CAP_ROUND, BasicStroke.JOIN_MITER, 10, new float[] { 5f, 5f }, 0f);\r\n            g2d.setStroke(basicStroke);\r\n            g2d.setPaint(Color.orange.darker().darker());\r\n        } else {\r\n            g2d.setPaint(Color.red);\r\n        }\r\n        final GeneralPath path = new GeneralPath();\r\n        path.moveTo(robotSnapshot.getX() + robotSnapshot.getHeading().cosine() * 15, robotSnapshot.getY() + robotSnapshot.getHeading().sine() * 15);\r\n        AbsoluteAngle cc = robotSnapshot.getHeading().counterClockwise(RelativeAngle.fromBygrees(160));\r\n        AbsoluteAngle c = robotSnapshot.getHeading().clockwise(RelativeAngle.fromBygrees(160));\r\n        path.lineTo(robotSnapshot.getX() + cc.cosine() * 9, robotSnapshot.getY() + cc.sine() * 9);\r\n        path.lineTo(robotSnapshot.getX(), robotSnapshot.getY());\r\n        path.lineTo(robotSnapshot.getX() + c.cosine() * 9, robotSnapshot.getY() + c.sine() * 9);\r\n        path.closePath();\r\n        if (robotSnapshot.isDead()) {\r\n            g2d.draw(path);\r\n        } else {\r\n            g2d.fill(path);\r\n        }\r\n        g2d.setStroke(stroke);\r\n    }\r\n}\r\n",
		"id": "EvoSuiteBenchmark/86_at-robots2-j/src/main/java/net/virtualinfinity/atrobots/gui/renderers/RobotRendererTest2.java",
		"test_prompt": "// RobotRendererTest2.java\npackage net.virtualinfinity.atrobots.gui.renderers;\n\nimport net.virtualinfinity.atrobots.measures.AbsoluteAngle;\nimport net.virtualinfinity.atrobots.measures.RelativeAngle;\nimport net.virtualinfinity.atrobots.snapshots.RobotSnapshot;\nimport java.awt.*;\nimport java.awt.geom.Ellipse2D;\nimport java.awt.geom.GeneralPath;\nimport java.awt.geom.Line2D;\nimport java.awt.geom.Rectangle2D;\nimport java.util.Set;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link RobotRenderer}.\n* It contains ten unit test cases for the {@link RobotRenderer#isShowName()} method.\n*/\nclass RobotRendererTest2 {"
	},
	{
		"original_code": "// RobotRenderer.java\npackage net.virtualinfinity.atrobots.gui.renderers;\r\n\r\nimport net.virtualinfinity.atrobots.measures.AbsoluteAngle;\r\nimport net.virtualinfinity.atrobots.measures.RelativeAngle;\r\nimport net.virtualinfinity.atrobots.snapshots.RobotSnapshot;\r\nimport java.awt.*;\r\nimport java.awt.geom.Ellipse2D;\r\nimport java.awt.geom.GeneralPath;\r\nimport java.awt.geom.Line2D;\r\nimport java.awt.geom.Rectangle2D;\r\nimport java.util.Set;\r\n\r\n/**\r\n * @author Daniel Pitts\r\n */\r\npublic class RobotRenderer implements SnapshotRenderer<RobotSnapshot> {\r\n\r\n    private boolean showStatusBars = true;\r\n\r\n    private boolean renderDead = true;\r\n\r\n    private boolean showName = true;\r\n\r\n    private boolean fillShield = true;\r\n\r\n    private static final Color HEAT_COLOR1 = new Color(1f, 0f, 0f, 0.1f);\r\n\r\n    private static final Color HEAT_COLOR2 = Color.yellow;\r\n\r\n    public void render(Graphics2D g2d, RobotSnapshot robotSnapshot, Set<Integer> selectedRobotIds) {\r\n        if (!isRenderDead() && robotSnapshot.isDead()) {\r\n            return;\r\n        }\r\n        paintBody(g2d, robotSnapshot);\r\n        if (!robotSnapshot.isDead()) {\r\n            paintShield(g2d, robotSnapshot);\r\n            paintTurret(g2d, robotSnapshot);\r\n            if (isShowStatusBars()) {\r\n                paintArmor(g2d, robotSnapshot);\r\n                paintHeat(g2d, robotSnapshot);\r\n            }\r\n            if (isShowName()) {\r\n                paintName(g2d, robotSnapshot);\r\n            }\r\n        }\r\n        if (selectedRobotIds.contains(robotSnapshot.getId())) {\r\n            paintSelection(g2d, robotSnapshot);\r\n        }\r\n    }\r\n\r\n    public boolean isRenderDead() {\r\n        return renderDead;\r\n    }\r\n\r\n    public void setRenderDead(boolean renderDead) {\r\n        this.renderDead = renderDead;\r\n    }\r\n\r\n    public boolean isShowStatusBars() {\r\n        return showStatusBars;\r\n    }\r\n\r\n    public void setShowStatusBars(boolean showStatusBars) {\r\n        this.showStatusBars = showStatusBars;\r\n    }\r\n\r\n    public boolean isShowName() {\r\n        return showName;\r\n    }\r\n\r\n    public void setShowName(boolean showName) {\r\n        this.showName = showName;\r\n    }\r\n\r\n    public boolean isFillShield() {\r\n        return fillShield;\r\n    }\r\n\r\n    public void setFillShield(boolean fillShield) {\r\n        this.fillShield = fillShield;\r\n    }\r\n\r\n    private void paintSelection(Graphics2D g2d, RobotSnapshot robotSnapshot) {\r\n        g2d.setPaint(new Color(1f, 1f, 0f, .25f));\r\n        final Ellipse2D.Double s = new Ellipse2D.Double();\r\n        s.setFrameFromCenter(robotSnapshot.getX(), robotSnapshot.getY(), robotSnapshot.getX() + 30, robotSnapshot.getY() + 30);\r\n        g2d.fill(s);\r\n    }\r\n\r\n    private void paintShield(Graphics2D g2d, RobotSnapshot robotSnapshot) {\r\n        if (robotSnapshot.isActiveShield()) {\r\n            final Ellipse2D.Double s = new Ellipse2D.Double();\r\n            s.setFrameFromCenter(robotSnapshot.getX(), robotSnapshot.getY(), robotSnapshot.getX() + 15, robotSnapshot.getY() + 15);\r\n            if (isFillShield()) {\r\n                g2d.setPaint(new RadialGradientPaint(robotSnapshot.getPositionVector().toPoint2D(), 15, new float[] { 0, .75f, 1f }, new Color[] { new Color(.5f, .5f, 0f, .8f), new Color(0, 0, .5f, .1f), Color.white }));\r\n                g2d.fill(s);\r\n                g2d.fill(s);\r\n            } else {\r\n                g2d.setPaint(new Color(.8f, .6f, 1f));\r\n                g2d.draw(s);\r\n            }\r\n        }\r\n    }\r\n\r\n    private void paintName(Graphics2D g2d, RobotSnapshot robotSnapshot) {\r\n        g2d.setPaint(Color.yellow);\r\n        g2d.drawString(robotSnapshot.getName(), (float) (robotSnapshot.getX() - g2d.getFontMetrics().getStringBounds(robotSnapshot.getName(), g2d).getWidth() / 2), (float) (robotSnapshot.getY() - 10));\r\n    }\r\n\r\n    private void paintHeat(Graphics2D g2d, RobotSnapshot robotSnapshot) {\r\n        final Rectangle2D.Double rect = new Rectangle2D.Double(robotSnapshot.getX() - 50, robotSnapshot.getY() + 35, 100, 10);\r\n        g2d.setPaint(new GradientPaint((float) rect.getMinX(), (float) rect.getMinY(), HEAT_COLOR1, (float) rect.getMaxX(), (float) rect.getMinY(), HEAT_COLOR2));\r\n        if (!robotSnapshot.isDead()) {\r\n            g2d.fill(new Rectangle2D.Double(robotSnapshot.getX() - 50, robotSnapshot.getY() + 35, robotSnapshot.getTemperature().getLogScale() * .2, 10));\r\n        }\r\n        g2d.draw(rect);\r\n    }\r\n\r\n    private void paintArmor(Graphics2D g2d, RobotSnapshot robotSnapshot) {\r\n        g2d.setPaint(new Color(0f, 0f, 1f, 0.6f));\r\n        g2d.fill(new Rectangle2D.Double(robotSnapshot.getX() - 50, robotSnapshot.getY() + 20, robotSnapshot.getArmor(), 10));\r\n        g2d.setPaint(new Color(0f, 1f, 0f, 0.6f));\r\n        g2d.draw(new Rectangle2D.Double(robotSnapshot.getX() - 50, robotSnapshot.getY() + 20, 100, 10));\r\n    }\r\n\r\n    private void paintTurret(Graphics2D g2d, RobotSnapshot robotSnapshot) {\r\n        g2d.setPaint(Color.white);\r\n        g2d.draw(new Line2D.Double(robotSnapshot.getX(), robotSnapshot.getY(), robotSnapshot.getX() + robotSnapshot.getTurretHeading().cosine() * 5, robotSnapshot.getY() + robotSnapshot.getTurretHeading().sine() * 5));\r\n    }\r\n\r\n    private void paintBody(Graphics2D g2d, RobotSnapshot robotSnapshot) {\r\n        final Stroke stroke = g2d.getStroke();\r\n        if (robotSnapshot.isDead()) {\r\n            final BasicStroke basicStroke = new BasicStroke(1, BasicStroke.CAP_ROUND, BasicStroke.JOIN_MITER, 10, new float[] { 5f, 5f }, 0f);\r\n            g2d.setStroke(basicStroke);\r\n            g2d.setPaint(Color.orange.darker().darker());\r\n        } else {\r\n            g2d.setPaint(Color.red);\r\n        }\r\n        final GeneralPath path = new GeneralPath();\r\n        path.moveTo(robotSnapshot.getX() + robotSnapshot.getHeading().cosine() * 15, robotSnapshot.getY() + robotSnapshot.getHeading().sine() * 15);\r\n        AbsoluteAngle cc = robotSnapshot.getHeading().counterClockwise(RelativeAngle.fromBygrees(160));\r\n        AbsoluteAngle c = robotSnapshot.getHeading().clockwise(RelativeAngle.fromBygrees(160));\r\n        path.lineTo(robotSnapshot.getX() + cc.cosine() * 9, robotSnapshot.getY() + cc.sine() * 9);\r\n        path.lineTo(robotSnapshot.getX(), robotSnapshot.getY());\r\n        path.lineTo(robotSnapshot.getX() + c.cosine() * 9, robotSnapshot.getY() + c.sine() * 9);\r\n        path.closePath();\r\n        if (robotSnapshot.isDead()) {\r\n            g2d.draw(path);\r\n        } else {\r\n            g2d.fill(path);\r\n        }\r\n        g2d.setStroke(stroke);\r\n    }\r\n}\r\n",
		"id": "EvoSuiteBenchmark/86_at-robots2-j/src/main/java/net/virtualinfinity/atrobots/gui/renderers/RobotRendererTest3.java",
		"test_prompt": "// RobotRendererTest3.java\npackage net.virtualinfinity.atrobots.gui.renderers;\n\nimport net.virtualinfinity.atrobots.measures.AbsoluteAngle;\nimport net.virtualinfinity.atrobots.measures.RelativeAngle;\nimport net.virtualinfinity.atrobots.snapshots.RobotSnapshot;\nimport java.awt.*;\nimport java.awt.geom.Ellipse2D;\nimport java.awt.geom.GeneralPath;\nimport java.awt.geom.Line2D;\nimport java.awt.geom.Rectangle2D;\nimport java.util.Set;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link RobotRenderer}.\n* It contains ten unit test cases for the {@link RobotRenderer#isFillShield()} method.\n*/\nclass RobotRendererTest3 {"
	},
	{
		"original_code": "// ScanRenderer.java\npackage net.virtualinfinity.atrobots.gui.renderers;\r\n\r\nimport net.virtualinfinity.atrobots.snapshots.ScanSnapshot;\r\nimport java.awt.*;\r\nimport java.util.Set;\r\n\r\n/**\r\n * @author Daniel Pitts\r\n */\r\npublic class ScanRenderer implements SnapshotRenderer<ScanSnapshot> {\r\n\r\n    private boolean fillArcs = false;\r\n\r\n    private float highlightMatchRadius = 50;\r\n\r\n    private Color[] matchColors = new Color[] { new Color(1f, 0f, 0f, 1f), new Color(1f, 0f, 0f, .25f) };\r\n\r\n    private float[] noMatchFractions = new float[] { 0f, 1f };\r\n\r\n    private Color[] noMatchFillColors = new Color[] { new Color(1f, 1f, 1f, .75f), new Color(0f, 0f, 0f, 0f) };\r\n\r\n    private float[] matchFractions = new float[] { 0f, 1f };\r\n\r\n    private Color successOutline = Color.red;\r\n\r\n    private Color failureOutline = Color.white;\r\n\r\n    public void render(Graphics2D g2d, ScanSnapshot scanSnapshot, Set<Integer> selectedRobotIds) {\r\n        g2d.setPaint(getOutlinePaint(scanSnapshot));\r\n        final Shape scanArea = scanSnapshot.getScanArea();\r\n        g2d.draw(scanArea);\r\n        if (fillArcs) {\r\n            g2d.setPaint(getFillPaint(scanSnapshot));\r\n            g2d.fill(scanArea);\r\n            if (scanSnapshot.isAccuracyAvailable()) {\r\n                g2d.setPaint(new Color(.1f, 0f, .5f, .20f));\r\n                g2d.fill(scanSnapshot.getAccuracyArea());\r\n                g2d.setPaint(new Color(.4f, .4f, .5f, .5f));\r\n                g2d.draw(scanSnapshot.getAccuracyArea());\r\n            }\r\n        }\r\n    }\r\n\r\n    public boolean isFillArcs() {\r\n        return fillArcs;\r\n    }\r\n\r\n    public void setFillArcs(boolean fillArcs) {\r\n        this.fillArcs = fillArcs;\r\n    }\r\n\r\n    private Paint getFillPaint(ScanSnapshot scanSnapshot) {\r\n        if (scanSnapshot.isSuccessful()) {\r\n            return new RadialGradientPaint(scanSnapshot.getMatchVector().toPoint2D(), highlightMatchRadius, matchFractions, matchColors);\r\n        } else {\r\n            return new RadialGradientPaint(scanSnapshot.getPositionVector().toPoint2D(), (float) scanSnapshot.getMaxDistance(), noMatchFractions, noMatchFillColors);\r\n        }\r\n    }\r\n\r\n    private Paint getOutlinePaint(ScanSnapshot scanSnapshot) {\r\n        return scanSnapshot.isSuccessful() ? successOutline : failureOutline;\r\n    }\r\n}\r\n",
		"id": "EvoSuiteBenchmark/86_at-robots2-j/src/main/java/net/virtualinfinity/atrobots/gui/renderers/ScanRendererTest.java",
		"test_prompt": "// ScanRendererTest.java\npackage net.virtualinfinity.atrobots.gui.renderers;\n\nimport net.virtualinfinity.atrobots.snapshots.ScanSnapshot;\nimport java.awt.*;\nimport java.util.Set;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link ScanRenderer}.\n* It contains ten unit test cases for the {@link ScanRenderer#isFillArcs()} method.\n*/\nclass ScanRendererTest {"
	},
	{
		"original_code": "// RobotFileUtils.java\npackage net.virtualinfinity.atrobots.gui;\n\nimport javax.swing.filechooser.FileNameExtensionFilter;\nimport java.io.File;\nimport java.io.FilenameFilter;\nimport java.util.ArrayList;\n\n/**\n * TODO: JavaDoc\n *\n * @author <a href='mailto:daniel.pitts@cbs.com'>Daniel Pitts</a>\n */\npublic class RobotFileUtils {\n\n    public static FileNameExtensionFilter getAtRobotsFileNameFilter() {\n        return new FileNameExtensionFilter(\"AT-Robots files\", \"at2\", \"ats\");\n    }\n\n    static EntrantFile[] getFilesByName(java.util.List<String> initialRobots) {\n        final java.util.List<EntrantFile> files = new ArrayList<EntrantFile>();\n        boolean debug = false;\n        for (String file : initialRobots) {\n            if (!debug && \"-d\".equals(file)) {\n                debug = true;\n            } else {\n                files.add(new EntrantFile(debug, robotFile(file)));\n                debug = false;\n            }\n        }\n        return files.toArray(new EntrantFile[files.size()]);\n    }\n\n    static EntrantFile[] getEntrantFiles(File[] initialRobots) {\n        final java.util.List<EntrantFile> files = new ArrayList<EntrantFile>();\n        for (File file : initialRobots) {\n            files.add(new EntrantFile(false, file));\n        }\n        return files.toArray(new EntrantFile[files.size()]);\n    }\n\n    static File robotFile(String robotName) {\n        final File file = new File(robotName);\n        if (file.exists()) {\n            return file;\n        }\n        for (File f : file.getParentFile().listFiles(new FilenameAt2Filter(robotName))) {\n            return f;\n        }\n        return file;\n    }\n\n    static class EntrantFile {\n\n        final boolean debug;\n\n        final File file;\n\n        EntrantFile(boolean debug, File file) {\n            this.debug = debug;\n            this.file = file;\n        }\n    }\n\n    static class FilenameAt2Filter implements FilenameFilter {\n\n        private final String robotName;\n\n        public FilenameAt2Filter(String robotName) {\n            this.robotName = robotName;\n        }\n\n        public boolean accept(File dir, String name) {\n            return name.toLowerCase().equals(robotName + \".at2\");\n        }\n    }\n}\n",
		"id": "EvoSuiteBenchmark/86_at-robots2-j/src/main/java/net/virtualinfinity/atrobots/gui/RobotFileUtilsTest.java",
		"test_prompt": "// RobotFileUtilsTest.java\npackage net.virtualinfinity.atrobots.gui;\n\nimport javax.swing.filechooser.FileNameExtensionFilter;\nimport java.io.File;\nimport java.io.FilenameFilter;\nimport java.util.ArrayList;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link RobotFileUtils}.\n* It contains ten unit test cases for the {@link RobotFileUtils#getAtRobotsFileNameFilter()} method.\n*/\nclass RobotFileUtilsTest {"
	},
	{
		"original_code": "// Main.java\npackage net.virtualinfinity.atrobots.gui;\r\n\r\nimport net.virtualinfinity.atrobots.compiler.AtRobotCompiler;\r\nimport net.virtualinfinity.atrobots.compiler.AtRobotCompilerOutput;\r\nimport net.virtualinfinity.atrobots.compiler.Errors;\r\nimport net.virtualinfinity.atrobots.compiler.RobotFactory;\r\nimport net.virtualinfinity.atrobots.game.Game;\r\nimport javax.swing.*;\r\nimport java.awt.*;\r\nimport java.awt.event.ActionEvent;\r\nimport java.awt.event.WindowAdapter;\r\nimport java.awt.event.WindowEvent;\r\nimport java.io.File;\r\nimport java.io.FilenameFilter;\r\nimport java.io.IOException;\r\nimport java.util.ArrayList;\r\nimport java.util.Arrays;\r\nimport java.util.concurrent.ExecutionException;\r\n\r\n/**\r\n * This is the main GUI class.\r\n *\r\n * @author Daniel Pitts\r\n */\r\npublic class Main extends ArenaWindowBuilder implements Runnable {\r\n\r\n    private volatile Game game;\r\n\r\n    private boolean paused = true;\r\n\r\n    private final Object gameLock;\r\n\r\n    private volatile int frameDelay = 25;\r\n\r\n    private volatile boolean useDelay = true;\r\n\r\n    private Thread gameThread = new GameThread();\r\n\r\n    private volatile boolean closed;\r\n\r\n    private boolean debugMode;\r\n\r\n    private java.util.List<String> initialRobots;\r\n\r\n    private final AbstractAction runAction = new AbstractAction(\"Run\") {\r\n\r\n        public void actionPerformed(ActionEvent e) {\r\n            setPaused(!paused);\r\n            this.putValue(Action.NAME, paused ? \"Run\" : \"Pause\");\r\n        }\r\n    };\r\n\r\n    public boolean isPaused() {\r\n        synchronized (gameLock) {\r\n            return paused;\r\n        }\r\n    }\r\n\r\n    public void setPaused(boolean paused) {\r\n        synchronized (gameLock) {\r\n            this.paused = paused;\r\n            gameLock.notifyAll();\r\n        }\r\n    }\r\n\r\n    private final AbstractAction speedToggleAction = new AbstractAction(\"Full Speed\") {\r\n\r\n        public void actionPerformed(ActionEvent e) {\r\n            useDelay = !useDelay;\r\n            this.putValue(Action.NAME, useDelay ? \"Full Speed\" : \"Slower\");\r\n        }\r\n    };\r\n\r\n    public Main() {\r\n        gameLock = new Object();\r\n    }\r\n\r\n    public void run() {\r\n        initializeWindow();\r\n        startGame();\r\n    }\r\n\r\n    private void startGame() {\r\n        setGame(new Game(1000));\r\n        if (!initialRobots.isEmpty()) {\r\n            new EntrantLoader(initialRobots).execute();\r\n        }\r\n        gameThread.setDaemon(true);\r\n        gameThread.start();\r\n    }\r\n\r\n    @Override\r\n    protected void buildMenuBar() {\r\n        menubar.add(createFileMenu());\r\n        menubar.add(createViewMenu());\r\n        menubar.add(new JButton(runAction));\r\n        if (isDebugMode()) {\r\n            addDebugMenuItems();\r\n        }\r\n    }\r\n\r\n    private JMenu createFileMenu() {\r\n        final JMenu menu = new JMenu(\"Game\");\r\n        menu.add(new AbstractAction(\"New Game\") {\r\n\r\n            public void actionPerformed(ActionEvent e) {\r\n                final NewGameDialog dialog = new NewGameDialog();\r\n                dialog.setModal(true);\r\n                dialog.pack();\r\n                dialog.setVisible(true);\r\n                final Game newGame = dialog.getGame();\r\n                if (newGame != null) {\r\n                    //                    if (game != null) {\r\n                    //                        game.dispose();\r\n                    //                    }\r\n                    setGame(newGame);\r\n                }\r\n                game.nextRound();\r\n            }\r\n        });\r\n        menu.add(new AbstractAction(\"Add Entrant\") {\r\n\r\n            public void actionPerformed(ActionEvent e) {\r\n                final JFileChooser chooser = new JFileChooser();\r\n                chooser.setFileFilter(RobotFileUtils.getAtRobotsFileNameFilter());\r\n                chooser.setMultiSelectionEnabled(true);\r\n                if (chooser.showOpenDialog(mainFrame) == JFileChooser.APPROVE_OPTION) {\r\n                    new EntrantLoader(chooser.getSelectedFiles()).execute();\r\n                }\r\n            }\r\n        });\r\n        return menu;\r\n    }\r\n\r\n    private void setGame(Game newGame) {\r\n        setPaused(true);\r\n        arenaPane.reset();\r\n        robotStatusPane.reset();\r\n        game = newGame;\r\n        game.addSimulationObserver(arenaPane);\r\n        game.addSimulationObserver(robotStatusPane);\r\n    }\r\n\r\n    private void addDebugMenuItems() {\r\n        menubar.add(new JButton(new AbstractAction(\"Add all original\") {\r\n\r\n            public void actionPerformed(ActionEvent e) {\r\n                new EntrantLoader(new File(\"original\").listFiles(new FilenameFilter() {\r\n\r\n                    public boolean accept(File dir, String name) {\r\n                        return name.toLowerCase().endsWith(\".at2\");\r\n                    }\r\n                })).execute();\r\n            }\r\n        }));\r\n        menubar.add(new JButton(new AbstractAction(\"Add single\") {\r\n\r\n            public void actionPerformed(ActionEvent e) {\r\n                for (final File parent : new File[] { new File(\".\"), new File(\"original\") }) new EntrantLoader(parent.listFiles(new FilenameFilter() {\r\n\r\n                    public boolean accept(File dir, String name) {\r\n                        return name.toLowerCase().matches(\"zitgun.at2\") || name.toLowerCase().endsWith(\"sniper2.at2\");\r\n                    }\r\n                })).execute();\r\n            }\r\n        }));\r\n        menubar.add(new JButton(speedToggleAction));\r\n    }\r\n\r\n    public static void main(String[] args) {\r\n        final Main main = new Main();\r\n        java.util.List<String> initialRobots = new ArrayList<String>(Arrays.asList(args));\r\n        main.setDebugMode(initialRobots.remove(\"--debug\"));\r\n        main.setInitialRobots(initialRobots);\r\n        EventQueue.invokeLater(main);\r\n    }\r\n\r\n    private void setInitialRobots(java.util.List<String> initialRobots) {\r\n        this.initialRobots = initialRobots;\r\n    }\r\n\r\n    public boolean isDebugMode() {\r\n        return debugMode;\r\n    }\r\n\r\n    public void setDebugMode(boolean debugMode) {\r\n        this.debugMode = debugMode;\r\n    }\r\n\r\n    protected void registerCloseListener() {\r\n        mainFrame.addWindowListener(new WindowAdapter() {\r\n\r\n            public void windowClosed(WindowEvent e) {\r\n                synchronized (gameLock) {\r\n                    closed = true;\r\n                    paused = false;\r\n                    gameLock.notifyAll();\r\n                }\r\n            }\r\n        });\r\n    }\r\n\r\n    private class EntrantLoader extends SwingWorker<Errors, RobotFactory> {\r\n\r\n        private final RobotFileUtils.EntrantFile[] selectedFiles;\r\n\r\n        public EntrantLoader(File[] selectedFiles) {\r\n            this(RobotFileUtils.getEntrantFiles(selectedFiles));\r\n        }\r\n\r\n        public EntrantLoader(RobotFileUtils.EntrantFile[] selectedFiles) {\r\n            this.selectedFiles = selectedFiles;\r\n        }\r\n\r\n        public EntrantLoader(java.util.List<String> initialRobots) {\r\n            this(RobotFileUtils.getFilesByName(initialRobots));\r\n        }\r\n\r\n        protected Errors doInBackground() throws Exception {\r\n            Errors errors = new Errors();\r\n            for (RobotFileUtils.EntrantFile entrantFile : selectedFiles) {\r\n                final File file = entrantFile.file;\r\n                AtRobotCompiler compiler = new AtRobotCompiler();\r\n                try {\r\n                    System.out.println(\"Loading \" + file);\r\n                    final AtRobotCompilerOutput result = compiler.compile(file);\r\n                    if (result.hasErrors()) {\r\n                        errors.info(\"Errors in \" + file.getName());\r\n                        errors.addAll(result.getErrors());\r\n                    }\r\n                    if (game != null) {\r\n                        game.addEntrant(result.createRobotFactory(file.getName()).setDebug(entrantFile.debug));\r\n                    }\r\n                } catch (IOException e1) {\r\n                    errors.info(\"Errors in \" + file.getName());\r\n                    errors.info(e1.getMessage());\r\n                } catch (Throwable t) {\r\n                    errors.info(\"Compiler error in \" + file.getName());\r\n                    errors.info(t.getMessage());\r\n                    t.printStackTrace();\r\n                }\r\n            }\r\n            return errors;\r\n        }\r\n\r\n        protected void done() {\r\n            try {\r\n                get().showErrorDialog(\"Errors\", mainFrame);\r\n                game.nextRound();\r\n            } catch (InterruptedException e1) {\r\n                e1.printStackTrace();\r\n            } catch (ExecutionException e1) {\r\n                e1.printStackTrace();\r\n            }\r\n        }\r\n    }\r\n\r\n    private class GameThread extends Thread {\r\n\r\n        public void run() {\r\n            while (!closed) {\r\n                try {\r\n                    synchronized (gameLock) {\r\n                        while (paused && !closed) {\r\n                            gameLock.wait();\r\n                        }\r\n                    }\r\n                    if (useDelay) {\r\n                        Thread.sleep(frameDelay);\r\n                    } else {\r\n                        Thread.yield();\r\n                    }\r\n                    synchronized (gameLock) {\r\n                        if (!closed && game != null) {\r\n                            game.stepRound();\r\n                        }\r\n                    }\r\n                } catch (Throwable e) {\r\n                    e.printStackTrace();\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n",
		"id": "EvoSuiteBenchmark/86_at-robots2-j/src/main/java/net/virtualinfinity/atrobots/gui/MainTest0.java",
		"test_prompt": "// MainTest0.java\npackage net.virtualinfinity.atrobots.gui;\n\nimport net.virtualinfinity.atrobots.compiler.AtRobotCompiler;\nimport net.virtualinfinity.atrobots.compiler.AtRobotCompilerOutput;\nimport net.virtualinfinity.atrobots.compiler.Errors;\nimport net.virtualinfinity.atrobots.compiler.RobotFactory;\nimport net.virtualinfinity.atrobots.game.Game;\nimport javax.swing.*;\nimport java.awt.*;\nimport java.awt.event.ActionEvent;\nimport java.awt.event.WindowAdapter;\nimport java.awt.event.WindowEvent;\nimport java.io.File;\nimport java.io.FilenameFilter;\nimport java.io.IOException;\nimport java.util.ArrayList;\nimport java.util.Arrays;\nimport java.util.concurrent.ExecutionException;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link Main}.\n* It contains ten unit test cases for the {@link Main#isPaused()} method.\n*/\nclass MainTest0 {"
	},
	{
		"original_code": "// Main.java\npackage net.virtualinfinity.atrobots.gui;\r\n\r\nimport net.virtualinfinity.atrobots.compiler.AtRobotCompiler;\r\nimport net.virtualinfinity.atrobots.compiler.AtRobotCompilerOutput;\r\nimport net.virtualinfinity.atrobots.compiler.Errors;\r\nimport net.virtualinfinity.atrobots.compiler.RobotFactory;\r\nimport net.virtualinfinity.atrobots.game.Game;\r\nimport javax.swing.*;\r\nimport java.awt.*;\r\nimport java.awt.event.ActionEvent;\r\nimport java.awt.event.WindowAdapter;\r\nimport java.awt.event.WindowEvent;\r\nimport java.io.File;\r\nimport java.io.FilenameFilter;\r\nimport java.io.IOException;\r\nimport java.util.ArrayList;\r\nimport java.util.Arrays;\r\nimport java.util.concurrent.ExecutionException;\r\n\r\n/**\r\n * This is the main GUI class.\r\n *\r\n * @author Daniel Pitts\r\n */\r\npublic class Main extends ArenaWindowBuilder implements Runnable {\r\n\r\n    private volatile Game game;\r\n\r\n    private boolean paused = true;\r\n\r\n    private final Object gameLock;\r\n\r\n    private volatile int frameDelay = 25;\r\n\r\n    private volatile boolean useDelay = true;\r\n\r\n    private Thread gameThread = new GameThread();\r\n\r\n    private volatile boolean closed;\r\n\r\n    private boolean debugMode;\r\n\r\n    private java.util.List<String> initialRobots;\r\n\r\n    private final AbstractAction runAction = new AbstractAction(\"Run\") {\r\n\r\n        public void actionPerformed(ActionEvent e) {\r\n            setPaused(!paused);\r\n            this.putValue(Action.NAME, paused ? \"Run\" : \"Pause\");\r\n        }\r\n    };\r\n\r\n    public boolean isPaused() {\r\n        synchronized (gameLock) {\r\n            return paused;\r\n        }\r\n    }\r\n\r\n    public void setPaused(boolean paused) {\r\n        synchronized (gameLock) {\r\n            this.paused = paused;\r\n            gameLock.notifyAll();\r\n        }\r\n    }\r\n\r\n    private final AbstractAction speedToggleAction = new AbstractAction(\"Full Speed\") {\r\n\r\n        public void actionPerformed(ActionEvent e) {\r\n            useDelay = !useDelay;\r\n            this.putValue(Action.NAME, useDelay ? \"Full Speed\" : \"Slower\");\r\n        }\r\n    };\r\n\r\n    public Main() {\r\n        gameLock = new Object();\r\n    }\r\n\r\n    public void run() {\r\n        initializeWindow();\r\n        startGame();\r\n    }\r\n\r\n    private void startGame() {\r\n        setGame(new Game(1000));\r\n        if (!initialRobots.isEmpty()) {\r\n            new EntrantLoader(initialRobots).execute();\r\n        }\r\n        gameThread.setDaemon(true);\r\n        gameThread.start();\r\n    }\r\n\r\n    @Override\r\n    protected void buildMenuBar() {\r\n        menubar.add(createFileMenu());\r\n        menubar.add(createViewMenu());\r\n        menubar.add(new JButton(runAction));\r\n        if (isDebugMode()) {\r\n            addDebugMenuItems();\r\n        }\r\n    }\r\n\r\n    private JMenu createFileMenu() {\r\n        final JMenu menu = new JMenu(\"Game\");\r\n        menu.add(new AbstractAction(\"New Game\") {\r\n\r\n            public void actionPerformed(ActionEvent e) {\r\n                final NewGameDialog dialog = new NewGameDialog();\r\n                dialog.setModal(true);\r\n                dialog.pack();\r\n                dialog.setVisible(true);\r\n                final Game newGame = dialog.getGame();\r\n                if (newGame != null) {\r\n                    //                    if (game != null) {\r\n                    //                        game.dispose();\r\n                    //                    }\r\n                    setGame(newGame);\r\n                }\r\n                game.nextRound();\r\n            }\r\n        });\r\n        menu.add(new AbstractAction(\"Add Entrant\") {\r\n\r\n            public void actionPerformed(ActionEvent e) {\r\n                final JFileChooser chooser = new JFileChooser();\r\n                chooser.setFileFilter(RobotFileUtils.getAtRobotsFileNameFilter());\r\n                chooser.setMultiSelectionEnabled(true);\r\n                if (chooser.showOpenDialog(mainFrame) == JFileChooser.APPROVE_OPTION) {\r\n                    new EntrantLoader(chooser.getSelectedFiles()).execute();\r\n                }\r\n            }\r\n        });\r\n        return menu;\r\n    }\r\n\r\n    private void setGame(Game newGame) {\r\n        setPaused(true);\r\n        arenaPane.reset();\r\n        robotStatusPane.reset();\r\n        game = newGame;\r\n        game.addSimulationObserver(arenaPane);\r\n        game.addSimulationObserver(robotStatusPane);\r\n    }\r\n\r\n    private void addDebugMenuItems() {\r\n        menubar.add(new JButton(new AbstractAction(\"Add all original\") {\r\n\r\n            public void actionPerformed(ActionEvent e) {\r\n                new EntrantLoader(new File(\"original\").listFiles(new FilenameFilter() {\r\n\r\n                    public boolean accept(File dir, String name) {\r\n                        return name.toLowerCase().endsWith(\".at2\");\r\n                    }\r\n                })).execute();\r\n            }\r\n        }));\r\n        menubar.add(new JButton(new AbstractAction(\"Add single\") {\r\n\r\n            public void actionPerformed(ActionEvent e) {\r\n                for (final File parent : new File[] { new File(\".\"), new File(\"original\") }) new EntrantLoader(parent.listFiles(new FilenameFilter() {\r\n\r\n                    public boolean accept(File dir, String name) {\r\n                        return name.toLowerCase().matches(\"zitgun.at2\") || name.toLowerCase().endsWith(\"sniper2.at2\");\r\n                    }\r\n                })).execute();\r\n            }\r\n        }));\r\n        menubar.add(new JButton(speedToggleAction));\r\n    }\r\n\r\n    public static void main(String[] args) {\r\n        final Main main = new Main();\r\n        java.util.List<String> initialRobots = new ArrayList<String>(Arrays.asList(args));\r\n        main.setDebugMode(initialRobots.remove(\"--debug\"));\r\n        main.setInitialRobots(initialRobots);\r\n        EventQueue.invokeLater(main);\r\n    }\r\n\r\n    private void setInitialRobots(java.util.List<String> initialRobots) {\r\n        this.initialRobots = initialRobots;\r\n    }\r\n\r\n    public boolean isDebugMode() {\r\n        return debugMode;\r\n    }\r\n\r\n    public void setDebugMode(boolean debugMode) {\r\n        this.debugMode = debugMode;\r\n    }\r\n\r\n    protected void registerCloseListener() {\r\n        mainFrame.addWindowListener(new WindowAdapter() {\r\n\r\n            public void windowClosed(WindowEvent e) {\r\n                synchronized (gameLock) {\r\n                    closed = true;\r\n                    paused = false;\r\n                    gameLock.notifyAll();\r\n                }\r\n            }\r\n        });\r\n    }\r\n\r\n    private class EntrantLoader extends SwingWorker<Errors, RobotFactory> {\r\n\r\n        private final RobotFileUtils.EntrantFile[] selectedFiles;\r\n\r\n        public EntrantLoader(File[] selectedFiles) {\r\n            this(RobotFileUtils.getEntrantFiles(selectedFiles));\r\n        }\r\n\r\n        public EntrantLoader(RobotFileUtils.EntrantFile[] selectedFiles) {\r\n            this.selectedFiles = selectedFiles;\r\n        }\r\n\r\n        public EntrantLoader(java.util.List<String> initialRobots) {\r\n            this(RobotFileUtils.getFilesByName(initialRobots));\r\n        }\r\n\r\n        protected Errors doInBackground() throws Exception {\r\n            Errors errors = new Errors();\r\n            for (RobotFileUtils.EntrantFile entrantFile : selectedFiles) {\r\n                final File file = entrantFile.file;\r\n                AtRobotCompiler compiler = new AtRobotCompiler();\r\n                try {\r\n                    System.out.println(\"Loading \" + file);\r\n                    final AtRobotCompilerOutput result = compiler.compile(file);\r\n                    if (result.hasErrors()) {\r\n                        errors.info(\"Errors in \" + file.getName());\r\n                        errors.addAll(result.getErrors());\r\n                    }\r\n                    if (game != null) {\r\n                        game.addEntrant(result.createRobotFactory(file.getName()).setDebug(entrantFile.debug));\r\n                    }\r\n                } catch (IOException e1) {\r\n                    errors.info(\"Errors in \" + file.getName());\r\n                    errors.info(e1.getMessage());\r\n                } catch (Throwable t) {\r\n                    errors.info(\"Compiler error in \" + file.getName());\r\n                    errors.info(t.getMessage());\r\n                    t.printStackTrace();\r\n                }\r\n            }\r\n            return errors;\r\n        }\r\n\r\n        protected void done() {\r\n            try {\r\n                get().showErrorDialog(\"Errors\", mainFrame);\r\n                game.nextRound();\r\n            } catch (InterruptedException e1) {\r\n                e1.printStackTrace();\r\n            } catch (ExecutionException e1) {\r\n                e1.printStackTrace();\r\n            }\r\n        }\r\n    }\r\n\r\n    private class GameThread extends Thread {\r\n\r\n        public void run() {\r\n            while (!closed) {\r\n                try {\r\n                    synchronized (gameLock) {\r\n                        while (paused && !closed) {\r\n                            gameLock.wait();\r\n                        }\r\n                    }\r\n                    if (useDelay) {\r\n                        Thread.sleep(frameDelay);\r\n                    } else {\r\n                        Thread.yield();\r\n                    }\r\n                    synchronized (gameLock) {\r\n                        if (!closed && game != null) {\r\n                            game.stepRound();\r\n                        }\r\n                    }\r\n                } catch (Throwable e) {\r\n                    e.printStackTrace();\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n",
		"id": "EvoSuiteBenchmark/86_at-robots2-j/src/main/java/net/virtualinfinity/atrobots/gui/MainTest1.java",
		"test_prompt": "// MainTest1.java\npackage net.virtualinfinity.atrobots.gui;\n\nimport net.virtualinfinity.atrobots.compiler.AtRobotCompiler;\nimport net.virtualinfinity.atrobots.compiler.AtRobotCompilerOutput;\nimport net.virtualinfinity.atrobots.compiler.Errors;\nimport net.virtualinfinity.atrobots.compiler.RobotFactory;\nimport net.virtualinfinity.atrobots.game.Game;\nimport javax.swing.*;\nimport java.awt.*;\nimport java.awt.event.ActionEvent;\nimport java.awt.event.WindowAdapter;\nimport java.awt.event.WindowEvent;\nimport java.io.File;\nimport java.io.FilenameFilter;\nimport java.io.IOException;\nimport java.util.ArrayList;\nimport java.util.Arrays;\nimport java.util.concurrent.ExecutionException;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link Main}.\n* It contains ten unit test cases for the {@link Main#isDebugMode()} method.\n*/\nclass MainTest1 {"
	},
	{
		"original_code": "// ToggleProperty.java\npackage net.virtualinfinity.atrobots.gui;\r\n\r\nimport javax.swing.*;\r\nimport java.awt.event.ActionEvent;\r\nimport java.beans.PropertyChangeListener;\r\n\r\n/**\r\n * TODO: Describe this class.\r\n *\r\n * @author Daniel Pitts\r\n */\r\npublic class ToggleProperty {\r\n\r\n    private final Action action;\r\n\r\n    private ToggleProperty(Action action) {\r\n        this.action = action;\r\n    }\r\n\r\n    public ToggleProperty(BooleanAccessor booleanAccessor) {\r\n        this(new Action(booleanAccessor));\r\n    }\r\n\r\n    public ToggleProperty(String name, BooleanAccessor booleanAccessor) {\r\n        this(new Action(name, booleanAccessor));\r\n    }\r\n\r\n    public ToggleProperty(String name, Icon icon, BooleanAccessor booleanAccessor) {\r\n        this(new Action(name, icon, booleanAccessor));\r\n    }\r\n\r\n    private void doConfigure(AbstractButton button) {\r\n        button.setModel(action.model);\r\n        button.setAction(action);\r\n    }\r\n\r\n    public <T extends JToggleButton> T configure(T button) {\r\n        doConfigure(button);\r\n        return button;\r\n    }\r\n\r\n    public <T extends JCheckBoxMenuItem> T configure(T button) {\r\n        doConfigure(button);\r\n        return button;\r\n    }\r\n\r\n    public Object getValue(String key) {\r\n        return action.getValue(key);\r\n    }\r\n\r\n    public void putValue(String key, Object newValue) {\r\n        action.putValue(key, newValue);\r\n    }\r\n\r\n    public boolean isEnabled() {\r\n        return action.isEnabled();\r\n    }\r\n\r\n    public void setEnabled(boolean newValue) {\r\n        action.setEnabled(newValue);\r\n    }\r\n\r\n    public Object[] getKeys() {\r\n        return action.getKeys();\r\n    }\r\n\r\n    public void addPropertyChangeListener(PropertyChangeListener listener) {\r\n        action.addPropertyChangeListener(listener);\r\n    }\r\n\r\n    public void removePropertyChangeListener(PropertyChangeListener listener) {\r\n        action.removePropertyChangeListener(listener);\r\n    }\r\n\r\n    public PropertyChangeListener[] getPropertyChangeListeners() {\r\n        return action.getPropertyChangeListeners();\r\n    }\r\n\r\n    private static class Action extends AbstractAction {\r\n\r\n        private final JToggleButton.ToggleButtonModel model = new JToggleButton.ToggleButtonModel() {\r\n\r\n            @Override\r\n            public void setSelected(boolean b) {\r\n                super.setSelected(b);\r\n                booleanAccessor.set(b);\r\n            }\r\n\r\n            @Override\r\n            public boolean isSelected() {\r\n                return booleanAccessor.get();\r\n            }\r\n        };\r\n\r\n        private final BooleanAccessor booleanAccessor;\r\n\r\n        private Action(BooleanAccessor booleanAccessor) {\r\n            this.booleanAccessor = booleanAccessor;\r\n        }\r\n\r\n        private Action(String name, BooleanAccessor booleanAccessor) {\r\n            super(name);\r\n            this.booleanAccessor = booleanAccessor;\r\n        }\r\n\r\n        private Action(String name, Icon icon, BooleanAccessor booleanAccessor) {\r\n            super(name, icon);\r\n            this.booleanAccessor = booleanAccessor;\r\n        }\r\n\r\n        public void actionPerformed(ActionEvent e) {\r\n        }\r\n    }\r\n}\r\n",
		"id": "EvoSuiteBenchmark/86_at-robots2-j/src/main/java/net/virtualinfinity/atrobots/gui/TogglePropertyTest0.java",
		"test_prompt": "// TogglePropertyTest0.java\npackage net.virtualinfinity.atrobots.gui;\n\nimport javax.swing.*;\nimport java.awt.event.ActionEvent;\nimport java.beans.PropertyChangeListener;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link ToggleProperty}.\n* It contains ten unit test cases for the {@link ToggleProperty#configure(T)} method.\n*/\nclass TogglePropertyTest0 {"
	},
	{
		"original_code": "// ToggleProperty.java\npackage net.virtualinfinity.atrobots.gui;\r\n\r\nimport javax.swing.*;\r\nimport java.awt.event.ActionEvent;\r\nimport java.beans.PropertyChangeListener;\r\n\r\n/**\r\n * TODO: Describe this class.\r\n *\r\n * @author Daniel Pitts\r\n */\r\npublic class ToggleProperty {\r\n\r\n    private final Action action;\r\n\r\n    private ToggleProperty(Action action) {\r\n        this.action = action;\r\n    }\r\n\r\n    public ToggleProperty(BooleanAccessor booleanAccessor) {\r\n        this(new Action(booleanAccessor));\r\n    }\r\n\r\n    public ToggleProperty(String name, BooleanAccessor booleanAccessor) {\r\n        this(new Action(name, booleanAccessor));\r\n    }\r\n\r\n    public ToggleProperty(String name, Icon icon, BooleanAccessor booleanAccessor) {\r\n        this(new Action(name, icon, booleanAccessor));\r\n    }\r\n\r\n    private void doConfigure(AbstractButton button) {\r\n        button.setModel(action.model);\r\n        button.setAction(action);\r\n    }\r\n\r\n    public <T extends JToggleButton> T configure(T button) {\r\n        doConfigure(button);\r\n        return button;\r\n    }\r\n\r\n    public <T extends JCheckBoxMenuItem> T configure(T button) {\r\n        doConfigure(button);\r\n        return button;\r\n    }\r\n\r\n    public Object getValue(String key) {\r\n        return action.getValue(key);\r\n    }\r\n\r\n    public void putValue(String key, Object newValue) {\r\n        action.putValue(key, newValue);\r\n    }\r\n\r\n    public boolean isEnabled() {\r\n        return action.isEnabled();\r\n    }\r\n\r\n    public void setEnabled(boolean newValue) {\r\n        action.setEnabled(newValue);\r\n    }\r\n\r\n    public Object[] getKeys() {\r\n        return action.getKeys();\r\n    }\r\n\r\n    public void addPropertyChangeListener(PropertyChangeListener listener) {\r\n        action.addPropertyChangeListener(listener);\r\n    }\r\n\r\n    public void removePropertyChangeListener(PropertyChangeListener listener) {\r\n        action.removePropertyChangeListener(listener);\r\n    }\r\n\r\n    public PropertyChangeListener[] getPropertyChangeListeners() {\r\n        return action.getPropertyChangeListeners();\r\n    }\r\n\r\n    private static class Action extends AbstractAction {\r\n\r\n        private final JToggleButton.ToggleButtonModel model = new JToggleButton.ToggleButtonModel() {\r\n\r\n            @Override\r\n            public void setSelected(boolean b) {\r\n                super.setSelected(b);\r\n                booleanAccessor.set(b);\r\n            }\r\n\r\n            @Override\r\n            public boolean isSelected() {\r\n                return booleanAccessor.get();\r\n            }\r\n        };\r\n\r\n        private final BooleanAccessor booleanAccessor;\r\n\r\n        private Action(BooleanAccessor booleanAccessor) {\r\n            this.booleanAccessor = booleanAccessor;\r\n        }\r\n\r\n        private Action(String name, BooleanAccessor booleanAccessor) {\r\n            super(name);\r\n            this.booleanAccessor = booleanAccessor;\r\n        }\r\n\r\n        private Action(String name, Icon icon, BooleanAccessor booleanAccessor) {\r\n            super(name, icon);\r\n            this.booleanAccessor = booleanAccessor;\r\n        }\r\n\r\n        public void actionPerformed(ActionEvent e) {\r\n        }\r\n    }\r\n}\r\n",
		"id": "EvoSuiteBenchmark/86_at-robots2-j/src/main/java/net/virtualinfinity/atrobots/gui/TogglePropertyTest1.java",
		"test_prompt": "// TogglePropertyTest1.java\npackage net.virtualinfinity.atrobots.gui;\n\nimport javax.swing.*;\nimport java.awt.event.ActionEvent;\nimport java.beans.PropertyChangeListener;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link ToggleProperty}.\n* It contains ten unit test cases for the {@link ToggleProperty#configure(T)} method.\n*/\nclass TogglePropertyTest1 {"
	},
	{
		"original_code": "// ToggleProperty.java\npackage net.virtualinfinity.atrobots.gui;\r\n\r\nimport javax.swing.*;\r\nimport java.awt.event.ActionEvent;\r\nimport java.beans.PropertyChangeListener;\r\n\r\n/**\r\n * TODO: Describe this class.\r\n *\r\n * @author Daniel Pitts\r\n */\r\npublic class ToggleProperty {\r\n\r\n    private final Action action;\r\n\r\n    private ToggleProperty(Action action) {\r\n        this.action = action;\r\n    }\r\n\r\n    public ToggleProperty(BooleanAccessor booleanAccessor) {\r\n        this(new Action(booleanAccessor));\r\n    }\r\n\r\n    public ToggleProperty(String name, BooleanAccessor booleanAccessor) {\r\n        this(new Action(name, booleanAccessor));\r\n    }\r\n\r\n    public ToggleProperty(String name, Icon icon, BooleanAccessor booleanAccessor) {\r\n        this(new Action(name, icon, booleanAccessor));\r\n    }\r\n\r\n    private void doConfigure(AbstractButton button) {\r\n        button.setModel(action.model);\r\n        button.setAction(action);\r\n    }\r\n\r\n    public <T extends JToggleButton> T configure(T button) {\r\n        doConfigure(button);\r\n        return button;\r\n    }\r\n\r\n    public <T extends JCheckBoxMenuItem> T configure(T button) {\r\n        doConfigure(button);\r\n        return button;\r\n    }\r\n\r\n    public Object getValue(String key) {\r\n        return action.getValue(key);\r\n    }\r\n\r\n    public void putValue(String key, Object newValue) {\r\n        action.putValue(key, newValue);\r\n    }\r\n\r\n    public boolean isEnabled() {\r\n        return action.isEnabled();\r\n    }\r\n\r\n    public void setEnabled(boolean newValue) {\r\n        action.setEnabled(newValue);\r\n    }\r\n\r\n    public Object[] getKeys() {\r\n        return action.getKeys();\r\n    }\r\n\r\n    public void addPropertyChangeListener(PropertyChangeListener listener) {\r\n        action.addPropertyChangeListener(listener);\r\n    }\r\n\r\n    public void removePropertyChangeListener(PropertyChangeListener listener) {\r\n        action.removePropertyChangeListener(listener);\r\n    }\r\n\r\n    public PropertyChangeListener[] getPropertyChangeListeners() {\r\n        return action.getPropertyChangeListeners();\r\n    }\r\n\r\n    private static class Action extends AbstractAction {\r\n\r\n        private final JToggleButton.ToggleButtonModel model = new JToggleButton.ToggleButtonModel() {\r\n\r\n            @Override\r\n            public void setSelected(boolean b) {\r\n                super.setSelected(b);\r\n                booleanAccessor.set(b);\r\n            }\r\n\r\n            @Override\r\n            public boolean isSelected() {\r\n                return booleanAccessor.get();\r\n            }\r\n        };\r\n\r\n        private final BooleanAccessor booleanAccessor;\r\n\r\n        private Action(BooleanAccessor booleanAccessor) {\r\n            this.booleanAccessor = booleanAccessor;\r\n        }\r\n\r\n        private Action(String name, BooleanAccessor booleanAccessor) {\r\n            super(name);\r\n            this.booleanAccessor = booleanAccessor;\r\n        }\r\n\r\n        private Action(String name, Icon icon, BooleanAccessor booleanAccessor) {\r\n            super(name, icon);\r\n            this.booleanAccessor = booleanAccessor;\r\n        }\r\n\r\n        public void actionPerformed(ActionEvent e) {\r\n        }\r\n    }\r\n}\r\n",
		"id": "EvoSuiteBenchmark/86_at-robots2-j/src/main/java/net/virtualinfinity/atrobots/gui/TogglePropertyTest2.java",
		"test_prompt": "// TogglePropertyTest2.java\npackage net.virtualinfinity.atrobots.gui;\n\nimport javax.swing.*;\nimport java.awt.event.ActionEvent;\nimport java.beans.PropertyChangeListener;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link ToggleProperty}.\n* It contains ten unit test cases for the {@link ToggleProperty#isEnabled()} method.\n*/\nclass TogglePropertyTest2 {"
	},
	{
		"original_code": "// RobotStatusPane.java\npackage net.virtualinfinity.atrobots.gui;\r\n\r\nimport net.virtualinfinity.atrobots.arena.SimulationFrame;\r\nimport net.virtualinfinity.atrobots.arena.SimulationFrameBuffer;\r\nimport net.virtualinfinity.atrobots.arena.SimulationObserver;\r\nimport net.virtualinfinity.atrobots.snapshots.RobotSnapshot;\r\nimport net.virtualinfinity.atrobots.snapshots.SnapshotAdaptor;\r\nimport javax.swing.*;\r\nimport javax.swing.border.EtchedBorder;\r\nimport javax.swing.event.ChangeEvent;\r\nimport javax.swing.event.ChangeListener;\r\nimport java.awt.*;\r\nimport java.util.*;\r\nimport java.util.List;\r\n\r\n/**\r\n * TODO: Describe this class.\r\n *\r\n * @author Daniel Pitts\r\n */\r\npublic class RobotStatusPane extends JList implements SimulationObserver {\r\n\r\n    private final DefaultListModel robotList;\r\n\r\n    private final List<RobotItem> reorderedList = new ArrayList<RobotItem>();\r\n\r\n    private final Map<Integer, RobotItem> items = new HashMap<Integer, RobotItem>();\r\n\r\n    private RobotStatusPane() {\r\n        robotList = new DefaultListModel();\r\n        setModel(robotList);\r\n        this.setCellRenderer(new RobotStatusRenderer());\r\n        final RobotSnapshot robotSnapshot = new RobotSnapshot();\r\n        robotSnapshot.setName(\"SUPER DUPER LONG NAME!\");\r\n        robotSnapshot.setLastMessage(\"VERY LONG ERROR MESSAGE FOR THIS ROBOT\");\r\n        robotSnapshot.setTotalKills(10000000);\r\n        this.setPrototypeCellValue(new RobotItem(robotSnapshot));\r\n    }\r\n\r\n    public void frameAvailable(final SimulationFrameBuffer frameBuffer) {\r\n        EventQueue.invokeLater(new UpdateRobotList(frameBuffer));\r\n    }\r\n\r\n    private void updateRobotStatus(RobotSnapshot robotSnapshot) {\r\n        final RobotItem robotItem = items.get(robotSnapshot.getId());\r\n        if (robotItem == null) {\r\n            addItem(new RobotItem(robotSnapshot));\r\n        } else {\r\n            robotItem.setRobotSnapshot(robotSnapshot);\r\n        }\r\n        revalidate();\r\n    }\r\n\r\n    private void addItem(RobotItem robotItem) {\r\n        items.put(robotItem.getId(), robotItem);\r\n        robotList.addElement(robotItem);\r\n    }\r\n\r\n    public static RobotStatusPane createRobotStatusPane() {\r\n        return new RobotStatusPane();\r\n    }\r\n\r\n    public Set<Integer> getSelectedRobotIds() {\r\n        final Object[] objects = this.getSelectedValues();\r\n        final Set<Integer> selectedIds = new HashSet<Integer>();\r\n        for (Object o : objects) {\r\n            selectedIds.add(((RobotItem) o).getId());\r\n        }\r\n        return selectedIds;\r\n    }\r\n\r\n    public void reset() {\r\n        robotList.removeAllElements();\r\n    }\r\n\r\n    private static class Bar extends JComponent {\r\n\r\n        private BoundedRangeModel model;\r\n\r\n        private final ChangeListener changeListener = new ChangeListener() {\r\n\r\n            public void stateChanged(ChangeEvent e) {\r\n                repaint();\r\n            }\r\n        };\r\n\r\n        private float[] foregroundGradientFractions;\r\n\r\n        private Color[] foregroundGradientColors;\r\n\r\n        @Override\r\n        protected void paintComponent(Graphics g) {\r\n            final Graphics2D g2d = (Graphics2D) g;\r\n            final Insets insets = getInsets(null);\r\n            final int maxWidth = getWidth() - insets.left - insets.right;\r\n            final int maxHeight = getHeight() - insets.top - insets.bottom;\r\n            if (foregroundGradientFractions != null) {\r\n                g2d.setPaint(new LinearGradientPaint(insets.left, 0, getWidth() - insets.right, 0, foregroundGradientFractions, foregroundGradientColors));\r\n            } else {\r\n                g2d.setPaint(getForeground());\r\n            }\r\n            g2d.fillRect(insets.left, insets.top, maxWidth * model.getValue() / model.getMaximum(), maxHeight);\r\n            g2d.drawRect(insets.left, insets.top, maxWidth - 1, maxHeight - 1);\r\n        }\r\n\r\n        public float[] getForegroundGradientFractions() {\r\n            return foregroundGradientFractions;\r\n        }\r\n\r\n        public void setForegroundGradientFractions(float[] foregroundGradientFractions) {\r\n            this.foregroundGradientFractions = foregroundGradientFractions;\r\n        }\r\n\r\n        public Color[] getForegroundGradientColors() {\r\n            return foregroundGradientColors;\r\n        }\r\n\r\n        public void setForegroundGradientColors(Color[] foregroundGradientColors) {\r\n            this.foregroundGradientColors = foregroundGradientColors;\r\n        }\r\n\r\n        private Bar() {\r\n            setModel(new DefaultBoundedRangeModel());\r\n        }\r\n\r\n        public void setModel(BoundedRangeModel model) {\r\n            if (this.model != null) {\r\n                model.removeChangeListener(changeListener);\r\n            }\r\n            model.addChangeListener(changeListener);\r\n            this.model = model;\r\n        }\r\n\r\n        public int getMinimum() {\r\n            return getModel().getMinimum();\r\n        }\r\n\r\n        public void setMinimum(int newMinimum) {\r\n            getModel().setMinimum(newMinimum);\r\n        }\r\n\r\n        public int getMaximum() {\r\n            return getModel().getMaximum();\r\n        }\r\n\r\n        public void setMaximum(int newMaximum) {\r\n            getModel().setMaximum(newMaximum);\r\n        }\r\n\r\n        public int getValue() {\r\n            return getModel().getValue();\r\n        }\r\n\r\n        public void setValue(int newValue) {\r\n            getModel().setValue(newValue);\r\n        }\r\n\r\n        public void setValueIsAdjusting(boolean b) {\r\n            getModel().setValueIsAdjusting(b);\r\n        }\r\n\r\n        public boolean getValueIsAdjusting() {\r\n            return getModel().getValueIsAdjusting();\r\n        }\r\n\r\n        public int getExtent() {\r\n            return getModel().getExtent();\r\n        }\r\n\r\n        public void setExtent(int newExtent) {\r\n            getModel().setExtent(newExtent);\r\n        }\r\n\r\n        public BoundedRangeModel getModel() {\r\n            return model;\r\n        }\r\n    }\r\n\r\n    private static class RobotStatusRenderer extends JPanel implements ListCellRenderer {\r\n\r\n        private final JLabel name = new JLabel();\r\n\r\n        private final JLabel roundKills = new JLabel();\r\n\r\n        private final JLabel gameStats = new JLabel();\r\n\r\n        private final Bar armor = new Bar();\r\n\r\n        private final Bar heat = new Bar();\r\n\r\n        private final JLabel lastMessage = new JLabel();\r\n\r\n        public Component getListCellRendererComponent(JList list, Object value, int index, boolean isSelected, boolean cellHasFocus) {\r\n            final Color background = isSelected ? Color.blue : Color.black;\r\n            setBackground(background);\r\n            setBorder(BorderFactory.createEtchedBorder(EtchedBorder.RAISED, Color.lightGray, Color.darkGray));\r\n            final Color foreground = isSelected ? Color.yellow : Color.gray;\r\n            armor.setForegroundGradientFractions(new float[] { 0, .25f, 1 });\r\n            armor.setForegroundGradientColors(new Color[] { new Color(0, 0, .25f), Color.blue, Color.green });\r\n            heat.setForegroundGradientFractions(new float[] { 0, .25f, 1 });\r\n            heat.setForegroundGradientColors(new Color[] { new Color(.2f, 0, 0), Color.red, Color.yellow });\r\n            name.setForeground(foreground);\r\n            roundKills.setForeground(foreground);\r\n            gameStats.setForeground(foreground);\r\n            lastMessage.setForeground(foreground);\r\n            removeAll();\r\n            setLayout(new GridLayout(6, 1, 0, 1));\r\n            add(name);\r\n            add(roundKills);\r\n            add(armor);\r\n            add(heat);\r\n            add(gameStats);\r\n            add(lastMessage);\r\n            final RobotItem item = (RobotItem) value;\r\n            final RobotSnapshot robotSnapshot = item.getRobotSnapshot();\r\n            roundKills.setText(\"Kills (round/total): \" + robotSnapshot.getRoundKills() + \"/\" + robotSnapshot.getTotalKills());\r\n            gameStats.setText(\"Wins/Ties/Deaths: \" + robotSnapshot.getTotalWins() + \"/\" + robotSnapshot.getTotalTies() + \"/\" + robotSnapshot.getTotalDeaths());\r\n            if (!item.isDead()) {\r\n                armor.setValue((int) Math.round(Math.min(100, robotSnapshot.getArmor())));\r\n                heat.setValue((int) Math.round(Math.min(100, robotSnapshot.getTemperature().getLogScale() * .2)));\r\n                name.setText(robotSnapshot.getName());\r\n            } else {\r\n                armor.setValue(0);\r\n                heat.setValue(0);\r\n                name.setText(\"<html><strike>\" + robotSnapshot.getName() + \"</html></strike>\");\r\n            }\r\n            lastMessage.setText(robotSnapshot.getLastMessage() == null ? \"\" : robotSnapshot.getLastMessage());\r\n            return this;\r\n        }\r\n    }\r\n\r\n    private class UpdateRobotList implements Runnable {\r\n\r\n        private final SimulationFrameBuffer frameBuffer;\r\n\r\n        public UpdateRobotList(SimulationFrameBuffer frameBuffer) {\r\n            this.frameBuffer = frameBuffer;\r\n        }\r\n\r\n        public void run() {\r\n            final SimulationFrame currentFrame = frameBuffer.getCurrentFrame();\r\n            currentFrame.visitRobots(new SnapshotAdaptor() {\r\n\r\n                @Override\r\n                public void acceptRobot(RobotSnapshot robotSnapshot) {\r\n                    updateRobotStatus(robotSnapshot);\r\n                }\r\n            });\r\n            if (currentFrame.isRoundOver()) {\r\n                reorderedList.clear();\r\n                reorderedList.addAll(items.values());\r\n                Collections.sort(reorderedList);\r\n                robotList.setSize(reorderedList.size());\r\n            }\r\n            for (int i = 0; i < reorderedList.size(); ++i) {\r\n                final RobotItem existingItem = (RobotItem) robotList.get(i);\r\n                final RobotItem reorderedItem = reorderedList.get(i);\r\n                if (reorderedItem.isChanged() || existingItem != reorderedItem) {\r\n                    robotList.set(i, reorderedItem);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    private static class RobotItem implements Comparable<RobotItem> {\r\n\r\n        private RobotSnapshot robotSnapshot;\r\n\r\n        private boolean dead;\r\n\r\n        private boolean updated;\r\n\r\n        private boolean changed;\r\n\r\n        private RobotItem() {\r\n        }\r\n\r\n        public RobotItem(RobotSnapshot robotSnapshot) {\r\n            setRobotSnapshot(robotSnapshot);\r\n        }\r\n\r\n        public RobotSnapshot getRobotSnapshot() {\r\n            return robotSnapshot;\r\n        }\r\n\r\n        public boolean isUpdated() {\r\n            return updated;\r\n        }\r\n\r\n        public void clearUpdated() {\r\n            updated = false;\r\n            changed = false;\r\n        }\r\n\r\n        public void setRobotSnapshot(RobotSnapshot robotSnapshot) {\r\n            changed = this.robotSnapshot == null || !this.robotSnapshot.equals(robotSnapshot);\r\n            this.updated = true;\r\n            this.dead = robotSnapshot.getArmor() <= 0;\r\n            this.robotSnapshot = robotSnapshot;\r\n        }\r\n\r\n        public boolean isChanged() {\r\n            return changed;\r\n        }\r\n\r\n        public boolean isDead() {\r\n            return dead;\r\n        }\r\n\r\n        public int getId() {\r\n            return getRobotSnapshot().getId();\r\n        }\r\n\r\n        public int compareTo(RobotItem o) {\r\n            if (robotSnapshot == null && o.robotSnapshot == null) {\r\n                return 0;\r\n            }\r\n            if (robotSnapshot == null) {\r\n                return -1;\r\n            }\r\n            if (o.robotSnapshot == null) {\r\n                return 1;\r\n            }\r\n            return -compare(robotSnapshot.getTotalWins(), o.robotSnapshot.getTotalWins(), 2) + -compare(robotSnapshot.getTotalTies(), o.robotSnapshot.getTotalTies(), 1);\r\n        }\r\n\r\n        private int compare(int left, int right, int priority) {\r\n            return left == right ? 0 : left < right ? -priority : priority;\r\n        }\r\n    }\r\n}\r\n",
		"id": "EvoSuiteBenchmark/86_at-robots2-j/src/main/java/net/virtualinfinity/atrobots/gui/RobotStatusPaneTest.java",
		"test_prompt": "// RobotStatusPaneTest.java\npackage net.virtualinfinity.atrobots.gui;\n\nimport net.virtualinfinity.atrobots.arena.SimulationFrame;\nimport net.virtualinfinity.atrobots.arena.SimulationFrameBuffer;\nimport net.virtualinfinity.atrobots.arena.SimulationObserver;\nimport net.virtualinfinity.atrobots.snapshots.RobotSnapshot;\nimport net.virtualinfinity.atrobots.snapshots.SnapshotAdaptor;\nimport javax.swing.*;\nimport javax.swing.border.EtchedBorder;\nimport javax.swing.event.ChangeEvent;\nimport javax.swing.event.ChangeListener;\nimport java.awt.*;\nimport java.util.*;\nimport java.util.List;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link RobotStatusPane}.\n* It contains ten unit test cases for the {@link RobotStatusPane#createRobotStatusPane()} method.\n*/\nclass RobotStatusPaneTest {"
	},
	{
		"original_code": "// Vector.java\npackage net.virtualinfinity.atrobots.measures;\r\n\r\nimport java.awt.geom.Point2D;\r\n\r\n/**\r\n * This is a 2d vector class. Use {@link #createPolar(AbsoluteAngle, double)} or\r\n * {@link #createCartesian(double , double)} } to create an instance of this class.\r\n *\r\n * @author Daniel Pitts\r\n */\r\npublic abstract class Vector {\r\n\r\n    /**\r\n     * Get the magnitude of his vector\r\n     *\r\n     * @return the magnitude of this vector\r\n     */\r\n    public abstract double getMagnitude();\r\n\r\n    /**\r\n     * Get the direction of this vector.\r\n     *\r\n     * @return the theta of this angle.\r\n     */\r\n    public abstract AbsoluteAngle getAngle();\r\n\r\n    /**\r\n     * Get the X component of this vector\r\n     *\r\n     * @return the x component.\r\n     */\r\n    public abstract double getX();\r\n\r\n    /**\r\n     * Get the Y component of this vector\r\n     *\r\n     * @return the y component.\r\n     */\r\n    public abstract double getY();\r\n\r\n    /**\r\n     * Create a new Vector instance based on polar coordinates\r\n     *\r\n     * @param angle     the direction of the vector\r\n     * @param magnitude the magnitude of the vector\r\n     * @return a vector with the given direction and magnitude\r\n     */\r\n    public static Vector createPolar(AbsoluteAngle angle, double magnitude) {\r\n        return PolarVector.createPolar(angle, magnitude);\r\n    }\r\n\r\n    /**\r\n     * Create a new Vector instance based on cartesian (rectangular) coordinates\r\n     *\r\n     * @param x the x component of the vector\r\n     * @param y the y component of the vector\r\n     * @return a vector with the given <x,y> components\r\n     */\r\n    public static Vector createCartesian(double x, double y) {\r\n        return CartesianVector.fromCartesian(x, y);\r\n    }\r\n\r\n    /**\r\n     * Add this vector with the given vector\r\n     *\r\n     * @param vector the summand.\r\n     * @return a new vector which is the sum.\r\n     */\r\n    public Vector plus(Vector vector) {\r\n        return createCartesian(getX() + (vector.getX()), getY() + (vector.getY()));\r\n    }\r\n\r\n    public String toString() {\r\n        return \"<\" + getAngle() + \", \" + getMagnitude() + \">:<\" + getX() + \", \" + getY() + \">\";\r\n    }\r\n\r\n    /**\r\n     * Convert this vector to a {@link java.awt.geom.Point2D}\r\n     *\r\n     * @return a point.\r\n     */\r\n    public Point2D toPoint2D() {\r\n        return new Point2D.Double(getX(), getY());\r\n    }\r\n\r\n    /**\r\n     * Subtract the given vector from this one.\r\n     *\r\n     * @param vector the vector to subtract.\r\n     * @return the difference between the vectors.\r\n     */\r\n    public Vector minus(Vector vector) {\r\n        return createCartesian(getX() - (vector.getX()), getY() - (vector.getY()));\r\n    }\r\n\r\n    /**\r\n     * Calculate the dot product of this vector with another vector.\r\n     *\r\n     * @param vector the other vector.\r\n     * @return the dot product.\r\n     */\r\n    public double dot(Vector vector) {\r\n        return getX() * (vector.getX()) + (getY() * (vector.getY()));\r\n    }\r\n\r\n    /**\r\n     * Find the intersection of the given line segment with the line that is perpendicular to the given line and goes\r\n     * through the point represented by this vector.\r\n     *\r\n     * @param linePoint     the start of the line segment.\r\n     * @param lineSlope     the angle of the line segment.\r\n     * @param segmentLength the length of the segment\r\n     * @return the point where the segment intersects the line.\r\n     */\r\n    public Vector perpendicularIntersectionFrom(Vector linePoint, AbsoluteAngle lineSlope, double segmentLength) {\r\n        final Vector intersectionVector = lineSlope.projectAngle(minus(linePoint));\r\n        if (intersectionVector.getMagnitude() < (segmentLength))\r\n            return intersectionVector.plus(linePoint);\r\n        else {\r\n            return null;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Scale this vector.\r\n     *\r\n     * @param scalar the scale.\r\n     * @return a vector who's direction is the same as this vector, but whos magnitude is scaled.\r\n     */\r\n    public abstract Vector times(double scalar);\r\n\r\n    /**\r\n     * Get the square of the magnitude of this.\r\n     *\r\n     * @return the square of the magnitude.\r\n     */\r\n    public abstract double getMagnitudeSquared();\r\n\r\n    public boolean equals(Object o) {\r\n        if (!(o instanceof Vector)) {\r\n            return false;\r\n        }\r\n        Vector vector = (Vector) o;\r\n        return getX() == (vector.getX()) && getY() == (vector.getY());\r\n    }\r\n\r\n    /**\r\n     * Project this vector onto the given vector.\r\n     *\r\n     * @param v the vector to be projected upon.\r\n     * @return the vector projection.\r\n     */\r\n    public Vector projectOnto(Vector v) {\r\n        return v.times(v.dot(this) / (v.getMagnitudeSquared()));\r\n    }\r\n}\r\n",
		"id": "EvoSuiteBenchmark/86_at-robots2-j/src/main/java/net/virtualinfinity/atrobots/measures/VectorTest0.java",
		"test_prompt": "// VectorTest0.java\npackage net.virtualinfinity.atrobots.measures;\n\nimport java.awt.geom.Point2D;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link Vector}.\n* It contains ten unit test cases for the {@link Vector#createPolar(AbsoluteAngle, double)} method.\n*/\nclass VectorTest0 {"
	},
	{
		"original_code": "// Vector.java\npackage net.virtualinfinity.atrobots.measures;\r\n\r\nimport java.awt.geom.Point2D;\r\n\r\n/**\r\n * This is a 2d vector class. Use {@link #createPolar(AbsoluteAngle, double)} or\r\n * {@link #createCartesian(double , double)} } to create an instance of this class.\r\n *\r\n * @author Daniel Pitts\r\n */\r\npublic abstract class Vector {\r\n\r\n    /**\r\n     * Get the magnitude of his vector\r\n     *\r\n     * @return the magnitude of this vector\r\n     */\r\n    public abstract double getMagnitude();\r\n\r\n    /**\r\n     * Get the direction of this vector.\r\n     *\r\n     * @return the theta of this angle.\r\n     */\r\n    public abstract AbsoluteAngle getAngle();\r\n\r\n    /**\r\n     * Get the X component of this vector\r\n     *\r\n     * @return the x component.\r\n     */\r\n    public abstract double getX();\r\n\r\n    /**\r\n     * Get the Y component of this vector\r\n     *\r\n     * @return the y component.\r\n     */\r\n    public abstract double getY();\r\n\r\n    /**\r\n     * Create a new Vector instance based on polar coordinates\r\n     *\r\n     * @param angle     the direction of the vector\r\n     * @param magnitude the magnitude of the vector\r\n     * @return a vector with the given direction and magnitude\r\n     */\r\n    public static Vector createPolar(AbsoluteAngle angle, double magnitude) {\r\n        return PolarVector.createPolar(angle, magnitude);\r\n    }\r\n\r\n    /**\r\n     * Create a new Vector instance based on cartesian (rectangular) coordinates\r\n     *\r\n     * @param x the x component of the vector\r\n     * @param y the y component of the vector\r\n     * @return a vector with the given <x,y> components\r\n     */\r\n    public static Vector createCartesian(double x, double y) {\r\n        return CartesianVector.fromCartesian(x, y);\r\n    }\r\n\r\n    /**\r\n     * Add this vector with the given vector\r\n     *\r\n     * @param vector the summand.\r\n     * @return a new vector which is the sum.\r\n     */\r\n    public Vector plus(Vector vector) {\r\n        return createCartesian(getX() + (vector.getX()), getY() + (vector.getY()));\r\n    }\r\n\r\n    public String toString() {\r\n        return \"<\" + getAngle() + \", \" + getMagnitude() + \">:<\" + getX() + \", \" + getY() + \">\";\r\n    }\r\n\r\n    /**\r\n     * Convert this vector to a {@link java.awt.geom.Point2D}\r\n     *\r\n     * @return a point.\r\n     */\r\n    public Point2D toPoint2D() {\r\n        return new Point2D.Double(getX(), getY());\r\n    }\r\n\r\n    /**\r\n     * Subtract the given vector from this one.\r\n     *\r\n     * @param vector the vector to subtract.\r\n     * @return the difference between the vectors.\r\n     */\r\n    public Vector minus(Vector vector) {\r\n        return createCartesian(getX() - (vector.getX()), getY() - (vector.getY()));\r\n    }\r\n\r\n    /**\r\n     * Calculate the dot product of this vector with another vector.\r\n     *\r\n     * @param vector the other vector.\r\n     * @return the dot product.\r\n     */\r\n    public double dot(Vector vector) {\r\n        return getX() * (vector.getX()) + (getY() * (vector.getY()));\r\n    }\r\n\r\n    /**\r\n     * Find the intersection of the given line segment with the line that is perpendicular to the given line and goes\r\n     * through the point represented by this vector.\r\n     *\r\n     * @param linePoint     the start of the line segment.\r\n     * @param lineSlope     the angle of the line segment.\r\n     * @param segmentLength the length of the segment\r\n     * @return the point where the segment intersects the line.\r\n     */\r\n    public Vector perpendicularIntersectionFrom(Vector linePoint, AbsoluteAngle lineSlope, double segmentLength) {\r\n        final Vector intersectionVector = lineSlope.projectAngle(minus(linePoint));\r\n        if (intersectionVector.getMagnitude() < (segmentLength))\r\n            return intersectionVector.plus(linePoint);\r\n        else {\r\n            return null;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Scale this vector.\r\n     *\r\n     * @param scalar the scale.\r\n     * @return a vector who's direction is the same as this vector, but whos magnitude is scaled.\r\n     */\r\n    public abstract Vector times(double scalar);\r\n\r\n    /**\r\n     * Get the square of the magnitude of this.\r\n     *\r\n     * @return the square of the magnitude.\r\n     */\r\n    public abstract double getMagnitudeSquared();\r\n\r\n    public boolean equals(Object o) {\r\n        if (!(o instanceof Vector)) {\r\n            return false;\r\n        }\r\n        Vector vector = (Vector) o;\r\n        return getX() == (vector.getX()) && getY() == (vector.getY());\r\n    }\r\n\r\n    /**\r\n     * Project this vector onto the given vector.\r\n     *\r\n     * @param v the vector to be projected upon.\r\n     * @return the vector projection.\r\n     */\r\n    public Vector projectOnto(Vector v) {\r\n        return v.times(v.dot(this) / (v.getMagnitudeSquared()));\r\n    }\r\n}\r\n",
		"id": "EvoSuiteBenchmark/86_at-robots2-j/src/main/java/net/virtualinfinity/atrobots/measures/VectorTest1.java",
		"test_prompt": "// VectorTest1.java\npackage net.virtualinfinity.atrobots.measures;\n\nimport java.awt.geom.Point2D;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link Vector}.\n* It contains ten unit test cases for the {@link Vector#createCartesian(double, double)} method.\n*/\nclass VectorTest1 {"
	},
	{
		"original_code": "// Vector.java\npackage net.virtualinfinity.atrobots.measures;\r\n\r\nimport java.awt.geom.Point2D;\r\n\r\n/**\r\n * This is a 2d vector class. Use {@link #createPolar(AbsoluteAngle, double)} or\r\n * {@link #createCartesian(double , double)} } to create an instance of this class.\r\n *\r\n * @author Daniel Pitts\r\n */\r\npublic abstract class Vector {\r\n\r\n    /**\r\n     * Get the magnitude of his vector\r\n     *\r\n     * @return the magnitude of this vector\r\n     */\r\n    public abstract double getMagnitude();\r\n\r\n    /**\r\n     * Get the direction of this vector.\r\n     *\r\n     * @return the theta of this angle.\r\n     */\r\n    public abstract AbsoluteAngle getAngle();\r\n\r\n    /**\r\n     * Get the X component of this vector\r\n     *\r\n     * @return the x component.\r\n     */\r\n    public abstract double getX();\r\n\r\n    /**\r\n     * Get the Y component of this vector\r\n     *\r\n     * @return the y component.\r\n     */\r\n    public abstract double getY();\r\n\r\n    /**\r\n     * Create a new Vector instance based on polar coordinates\r\n     *\r\n     * @param angle     the direction of the vector\r\n     * @param magnitude the magnitude of the vector\r\n     * @return a vector with the given direction and magnitude\r\n     */\r\n    public static Vector createPolar(AbsoluteAngle angle, double magnitude) {\r\n        return PolarVector.createPolar(angle, magnitude);\r\n    }\r\n\r\n    /**\r\n     * Create a new Vector instance based on cartesian (rectangular) coordinates\r\n     *\r\n     * @param x the x component of the vector\r\n     * @param y the y component of the vector\r\n     * @return a vector with the given <x,y> components\r\n     */\r\n    public static Vector createCartesian(double x, double y) {\r\n        return CartesianVector.fromCartesian(x, y);\r\n    }\r\n\r\n    /**\r\n     * Add this vector with the given vector\r\n     *\r\n     * @param vector the summand.\r\n     * @return a new vector which is the sum.\r\n     */\r\n    public Vector plus(Vector vector) {\r\n        return createCartesian(getX() + (vector.getX()), getY() + (vector.getY()));\r\n    }\r\n\r\n    public String toString() {\r\n        return \"<\" + getAngle() + \", \" + getMagnitude() + \">:<\" + getX() + \", \" + getY() + \">\";\r\n    }\r\n\r\n    /**\r\n     * Convert this vector to a {@link java.awt.geom.Point2D}\r\n     *\r\n     * @return a point.\r\n     */\r\n    public Point2D toPoint2D() {\r\n        return new Point2D.Double(getX(), getY());\r\n    }\r\n\r\n    /**\r\n     * Subtract the given vector from this one.\r\n     *\r\n     * @param vector the vector to subtract.\r\n     * @return the difference between the vectors.\r\n     */\r\n    public Vector minus(Vector vector) {\r\n        return createCartesian(getX() - (vector.getX()), getY() - (vector.getY()));\r\n    }\r\n\r\n    /**\r\n     * Calculate the dot product of this vector with another vector.\r\n     *\r\n     * @param vector the other vector.\r\n     * @return the dot product.\r\n     */\r\n    public double dot(Vector vector) {\r\n        return getX() * (vector.getX()) + (getY() * (vector.getY()));\r\n    }\r\n\r\n    /**\r\n     * Find the intersection of the given line segment with the line that is perpendicular to the given line and goes\r\n     * through the point represented by this vector.\r\n     *\r\n     * @param linePoint     the start of the line segment.\r\n     * @param lineSlope     the angle of the line segment.\r\n     * @param segmentLength the length of the segment\r\n     * @return the point where the segment intersects the line.\r\n     */\r\n    public Vector perpendicularIntersectionFrom(Vector linePoint, AbsoluteAngle lineSlope, double segmentLength) {\r\n        final Vector intersectionVector = lineSlope.projectAngle(minus(linePoint));\r\n        if (intersectionVector.getMagnitude() < (segmentLength))\r\n            return intersectionVector.plus(linePoint);\r\n        else {\r\n            return null;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Scale this vector.\r\n     *\r\n     * @param scalar the scale.\r\n     * @return a vector who's direction is the same as this vector, but whos magnitude is scaled.\r\n     */\r\n    public abstract Vector times(double scalar);\r\n\r\n    /**\r\n     * Get the square of the magnitude of this.\r\n     *\r\n     * @return the square of the magnitude.\r\n     */\r\n    public abstract double getMagnitudeSquared();\r\n\r\n    public boolean equals(Object o) {\r\n        if (!(o instanceof Vector)) {\r\n            return false;\r\n        }\r\n        Vector vector = (Vector) o;\r\n        return getX() == (vector.getX()) && getY() == (vector.getY());\r\n    }\r\n\r\n    /**\r\n     * Project this vector onto the given vector.\r\n     *\r\n     * @param v the vector to be projected upon.\r\n     * @return the vector projection.\r\n     */\r\n    public Vector projectOnto(Vector v) {\r\n        return v.times(v.dot(this) / (v.getMagnitudeSquared()));\r\n    }\r\n}\r\n",
		"id": "EvoSuiteBenchmark/86_at-robots2-j/src/main/java/net/virtualinfinity/atrobots/measures/VectorTest2.java",
		"test_prompt": "// VectorTest2.java\npackage net.virtualinfinity.atrobots.measures;\n\nimport java.awt.geom.Point2D;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link Vector}.\n* It contains ten unit test cases for the {@link Vector#plus(Vector)} method.\n*/\nclass VectorTest2 {"
	},
	{
		"original_code": "// Vector.java\npackage net.virtualinfinity.atrobots.measures;\r\n\r\nimport java.awt.geom.Point2D;\r\n\r\n/**\r\n * This is a 2d vector class. Use {@link #createPolar(AbsoluteAngle, double)} or\r\n * {@link #createCartesian(double , double)} } to create an instance of this class.\r\n *\r\n * @author Daniel Pitts\r\n */\r\npublic abstract class Vector {\r\n\r\n    /**\r\n     * Get the magnitude of his vector\r\n     *\r\n     * @return the magnitude of this vector\r\n     */\r\n    public abstract double getMagnitude();\r\n\r\n    /**\r\n     * Get the direction of this vector.\r\n     *\r\n     * @return the theta of this angle.\r\n     */\r\n    public abstract AbsoluteAngle getAngle();\r\n\r\n    /**\r\n     * Get the X component of this vector\r\n     *\r\n     * @return the x component.\r\n     */\r\n    public abstract double getX();\r\n\r\n    /**\r\n     * Get the Y component of this vector\r\n     *\r\n     * @return the y component.\r\n     */\r\n    public abstract double getY();\r\n\r\n    /**\r\n     * Create a new Vector instance based on polar coordinates\r\n     *\r\n     * @param angle     the direction of the vector\r\n     * @param magnitude the magnitude of the vector\r\n     * @return a vector with the given direction and magnitude\r\n     */\r\n    public static Vector createPolar(AbsoluteAngle angle, double magnitude) {\r\n        return PolarVector.createPolar(angle, magnitude);\r\n    }\r\n\r\n    /**\r\n     * Create a new Vector instance based on cartesian (rectangular) coordinates\r\n     *\r\n     * @param x the x component of the vector\r\n     * @param y the y component of the vector\r\n     * @return a vector with the given <x,y> components\r\n     */\r\n    public static Vector createCartesian(double x, double y) {\r\n        return CartesianVector.fromCartesian(x, y);\r\n    }\r\n\r\n    /**\r\n     * Add this vector with the given vector\r\n     *\r\n     * @param vector the summand.\r\n     * @return a new vector which is the sum.\r\n     */\r\n    public Vector plus(Vector vector) {\r\n        return createCartesian(getX() + (vector.getX()), getY() + (vector.getY()));\r\n    }\r\n\r\n    public String toString() {\r\n        return \"<\" + getAngle() + \", \" + getMagnitude() + \">:<\" + getX() + \", \" + getY() + \">\";\r\n    }\r\n\r\n    /**\r\n     * Convert this vector to a {@link java.awt.geom.Point2D}\r\n     *\r\n     * @return a point.\r\n     */\r\n    public Point2D toPoint2D() {\r\n        return new Point2D.Double(getX(), getY());\r\n    }\r\n\r\n    /**\r\n     * Subtract the given vector from this one.\r\n     *\r\n     * @param vector the vector to subtract.\r\n     * @return the difference between the vectors.\r\n     */\r\n    public Vector minus(Vector vector) {\r\n        return createCartesian(getX() - (vector.getX()), getY() - (vector.getY()));\r\n    }\r\n\r\n    /**\r\n     * Calculate the dot product of this vector with another vector.\r\n     *\r\n     * @param vector the other vector.\r\n     * @return the dot product.\r\n     */\r\n    public double dot(Vector vector) {\r\n        return getX() * (vector.getX()) + (getY() * (vector.getY()));\r\n    }\r\n\r\n    /**\r\n     * Find the intersection of the given line segment with the line that is perpendicular to the given line and goes\r\n     * through the point represented by this vector.\r\n     *\r\n     * @param linePoint     the start of the line segment.\r\n     * @param lineSlope     the angle of the line segment.\r\n     * @param segmentLength the length of the segment\r\n     * @return the point where the segment intersects the line.\r\n     */\r\n    public Vector perpendicularIntersectionFrom(Vector linePoint, AbsoluteAngle lineSlope, double segmentLength) {\r\n        final Vector intersectionVector = lineSlope.projectAngle(minus(linePoint));\r\n        if (intersectionVector.getMagnitude() < (segmentLength))\r\n            return intersectionVector.plus(linePoint);\r\n        else {\r\n            return null;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Scale this vector.\r\n     *\r\n     * @param scalar the scale.\r\n     * @return a vector who's direction is the same as this vector, but whos magnitude is scaled.\r\n     */\r\n    public abstract Vector times(double scalar);\r\n\r\n    /**\r\n     * Get the square of the magnitude of this.\r\n     *\r\n     * @return the square of the magnitude.\r\n     */\r\n    public abstract double getMagnitudeSquared();\r\n\r\n    public boolean equals(Object o) {\r\n        if (!(o instanceof Vector)) {\r\n            return false;\r\n        }\r\n        Vector vector = (Vector) o;\r\n        return getX() == (vector.getX()) && getY() == (vector.getY());\r\n    }\r\n\r\n    /**\r\n     * Project this vector onto the given vector.\r\n     *\r\n     * @param v the vector to be projected upon.\r\n     * @return the vector projection.\r\n     */\r\n    public Vector projectOnto(Vector v) {\r\n        return v.times(v.dot(this) / (v.getMagnitudeSquared()));\r\n    }\r\n}\r\n",
		"id": "EvoSuiteBenchmark/86_at-robots2-j/src/main/java/net/virtualinfinity/atrobots/measures/VectorTest3.java",
		"test_prompt": "// VectorTest3.java\npackage net.virtualinfinity.atrobots.measures;\n\nimport java.awt.geom.Point2D;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link Vector}.\n* It contains ten unit test cases for the {@link Vector#toPoint2D()} method.\n*/\nclass VectorTest3 {"
	},
	{
		"original_code": "// Vector.java\npackage net.virtualinfinity.atrobots.measures;\r\n\r\nimport java.awt.geom.Point2D;\r\n\r\n/**\r\n * This is a 2d vector class. Use {@link #createPolar(AbsoluteAngle, double)} or\r\n * {@link #createCartesian(double , double)} } to create an instance of this class.\r\n *\r\n * @author Daniel Pitts\r\n */\r\npublic abstract class Vector {\r\n\r\n    /**\r\n     * Get the magnitude of his vector\r\n     *\r\n     * @return the magnitude of this vector\r\n     */\r\n    public abstract double getMagnitude();\r\n\r\n    /**\r\n     * Get the direction of this vector.\r\n     *\r\n     * @return the theta of this angle.\r\n     */\r\n    public abstract AbsoluteAngle getAngle();\r\n\r\n    /**\r\n     * Get the X component of this vector\r\n     *\r\n     * @return the x component.\r\n     */\r\n    public abstract double getX();\r\n\r\n    /**\r\n     * Get the Y component of this vector\r\n     *\r\n     * @return the y component.\r\n     */\r\n    public abstract double getY();\r\n\r\n    /**\r\n     * Create a new Vector instance based on polar coordinates\r\n     *\r\n     * @param angle     the direction of the vector\r\n     * @param magnitude the magnitude of the vector\r\n     * @return a vector with the given direction and magnitude\r\n     */\r\n    public static Vector createPolar(AbsoluteAngle angle, double magnitude) {\r\n        return PolarVector.createPolar(angle, magnitude);\r\n    }\r\n\r\n    /**\r\n     * Create a new Vector instance based on cartesian (rectangular) coordinates\r\n     *\r\n     * @param x the x component of the vector\r\n     * @param y the y component of the vector\r\n     * @return a vector with the given <x,y> components\r\n     */\r\n    public static Vector createCartesian(double x, double y) {\r\n        return CartesianVector.fromCartesian(x, y);\r\n    }\r\n\r\n    /**\r\n     * Add this vector with the given vector\r\n     *\r\n     * @param vector the summand.\r\n     * @return a new vector which is the sum.\r\n     */\r\n    public Vector plus(Vector vector) {\r\n        return createCartesian(getX() + (vector.getX()), getY() + (vector.getY()));\r\n    }\r\n\r\n    public String toString() {\r\n        return \"<\" + getAngle() + \", \" + getMagnitude() + \">:<\" + getX() + \", \" + getY() + \">\";\r\n    }\r\n\r\n    /**\r\n     * Convert this vector to a {@link java.awt.geom.Point2D}\r\n     *\r\n     * @return a point.\r\n     */\r\n    public Point2D toPoint2D() {\r\n        return new Point2D.Double(getX(), getY());\r\n    }\r\n\r\n    /**\r\n     * Subtract the given vector from this one.\r\n     *\r\n     * @param vector the vector to subtract.\r\n     * @return the difference between the vectors.\r\n     */\r\n    public Vector minus(Vector vector) {\r\n        return createCartesian(getX() - (vector.getX()), getY() - (vector.getY()));\r\n    }\r\n\r\n    /**\r\n     * Calculate the dot product of this vector with another vector.\r\n     *\r\n     * @param vector the other vector.\r\n     * @return the dot product.\r\n     */\r\n    public double dot(Vector vector) {\r\n        return getX() * (vector.getX()) + (getY() * (vector.getY()));\r\n    }\r\n\r\n    /**\r\n     * Find the intersection of the given line segment with the line that is perpendicular to the given line and goes\r\n     * through the point represented by this vector.\r\n     *\r\n     * @param linePoint     the start of the line segment.\r\n     * @param lineSlope     the angle of the line segment.\r\n     * @param segmentLength the length of the segment\r\n     * @return the point where the segment intersects the line.\r\n     */\r\n    public Vector perpendicularIntersectionFrom(Vector linePoint, AbsoluteAngle lineSlope, double segmentLength) {\r\n        final Vector intersectionVector = lineSlope.projectAngle(minus(linePoint));\r\n        if (intersectionVector.getMagnitude() < (segmentLength))\r\n            return intersectionVector.plus(linePoint);\r\n        else {\r\n            return null;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Scale this vector.\r\n     *\r\n     * @param scalar the scale.\r\n     * @return a vector who's direction is the same as this vector, but whos magnitude is scaled.\r\n     */\r\n    public abstract Vector times(double scalar);\r\n\r\n    /**\r\n     * Get the square of the magnitude of this.\r\n     *\r\n     * @return the square of the magnitude.\r\n     */\r\n    public abstract double getMagnitudeSquared();\r\n\r\n    public boolean equals(Object o) {\r\n        if (!(o instanceof Vector)) {\r\n            return false;\r\n        }\r\n        Vector vector = (Vector) o;\r\n        return getX() == (vector.getX()) && getY() == (vector.getY());\r\n    }\r\n\r\n    /**\r\n     * Project this vector onto the given vector.\r\n     *\r\n     * @param v the vector to be projected upon.\r\n     * @return the vector projection.\r\n     */\r\n    public Vector projectOnto(Vector v) {\r\n        return v.times(v.dot(this) / (v.getMagnitudeSquared()));\r\n    }\r\n}\r\n",
		"id": "EvoSuiteBenchmark/86_at-robots2-j/src/main/java/net/virtualinfinity/atrobots/measures/VectorTest4.java",
		"test_prompt": "// VectorTest4.java\npackage net.virtualinfinity.atrobots.measures;\n\nimport java.awt.geom.Point2D;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link Vector}.\n* It contains ten unit test cases for the {@link Vector#minus(Vector)} method.\n*/\nclass VectorTest4 {"
	},
	{
		"original_code": "// Vector.java\npackage net.virtualinfinity.atrobots.measures;\r\n\r\nimport java.awt.geom.Point2D;\r\n\r\n/**\r\n * This is a 2d vector class. Use {@link #createPolar(AbsoluteAngle, double)} or\r\n * {@link #createCartesian(double , double)} } to create an instance of this class.\r\n *\r\n * @author Daniel Pitts\r\n */\r\npublic abstract class Vector {\r\n\r\n    /**\r\n     * Get the magnitude of his vector\r\n     *\r\n     * @return the magnitude of this vector\r\n     */\r\n    public abstract double getMagnitude();\r\n\r\n    /**\r\n     * Get the direction of this vector.\r\n     *\r\n     * @return the theta of this angle.\r\n     */\r\n    public abstract AbsoluteAngle getAngle();\r\n\r\n    /**\r\n     * Get the X component of this vector\r\n     *\r\n     * @return the x component.\r\n     */\r\n    public abstract double getX();\r\n\r\n    /**\r\n     * Get the Y component of this vector\r\n     *\r\n     * @return the y component.\r\n     */\r\n    public abstract double getY();\r\n\r\n    /**\r\n     * Create a new Vector instance based on polar coordinates\r\n     *\r\n     * @param angle     the direction of the vector\r\n     * @param magnitude the magnitude of the vector\r\n     * @return a vector with the given direction and magnitude\r\n     */\r\n    public static Vector createPolar(AbsoluteAngle angle, double magnitude) {\r\n        return PolarVector.createPolar(angle, magnitude);\r\n    }\r\n\r\n    /**\r\n     * Create a new Vector instance based on cartesian (rectangular) coordinates\r\n     *\r\n     * @param x the x component of the vector\r\n     * @param y the y component of the vector\r\n     * @return a vector with the given <x,y> components\r\n     */\r\n    public static Vector createCartesian(double x, double y) {\r\n        return CartesianVector.fromCartesian(x, y);\r\n    }\r\n\r\n    /**\r\n     * Add this vector with the given vector\r\n     *\r\n     * @param vector the summand.\r\n     * @return a new vector which is the sum.\r\n     */\r\n    public Vector plus(Vector vector) {\r\n        return createCartesian(getX() + (vector.getX()), getY() + (vector.getY()));\r\n    }\r\n\r\n    public String toString() {\r\n        return \"<\" + getAngle() + \", \" + getMagnitude() + \">:<\" + getX() + \", \" + getY() + \">\";\r\n    }\r\n\r\n    /**\r\n     * Convert this vector to a {@link java.awt.geom.Point2D}\r\n     *\r\n     * @return a point.\r\n     */\r\n    public Point2D toPoint2D() {\r\n        return new Point2D.Double(getX(), getY());\r\n    }\r\n\r\n    /**\r\n     * Subtract the given vector from this one.\r\n     *\r\n     * @param vector the vector to subtract.\r\n     * @return the difference between the vectors.\r\n     */\r\n    public Vector minus(Vector vector) {\r\n        return createCartesian(getX() - (vector.getX()), getY() - (vector.getY()));\r\n    }\r\n\r\n    /**\r\n     * Calculate the dot product of this vector with another vector.\r\n     *\r\n     * @param vector the other vector.\r\n     * @return the dot product.\r\n     */\r\n    public double dot(Vector vector) {\r\n        return getX() * (vector.getX()) + (getY() * (vector.getY()));\r\n    }\r\n\r\n    /**\r\n     * Find the intersection of the given line segment with the line that is perpendicular to the given line and goes\r\n     * through the point represented by this vector.\r\n     *\r\n     * @param linePoint     the start of the line segment.\r\n     * @param lineSlope     the angle of the line segment.\r\n     * @param segmentLength the length of the segment\r\n     * @return the point where the segment intersects the line.\r\n     */\r\n    public Vector perpendicularIntersectionFrom(Vector linePoint, AbsoluteAngle lineSlope, double segmentLength) {\r\n        final Vector intersectionVector = lineSlope.projectAngle(minus(linePoint));\r\n        if (intersectionVector.getMagnitude() < (segmentLength))\r\n            return intersectionVector.plus(linePoint);\r\n        else {\r\n            return null;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Scale this vector.\r\n     *\r\n     * @param scalar the scale.\r\n     * @return a vector who's direction is the same as this vector, but whos magnitude is scaled.\r\n     */\r\n    public abstract Vector times(double scalar);\r\n\r\n    /**\r\n     * Get the square of the magnitude of this.\r\n     *\r\n     * @return the square of the magnitude.\r\n     */\r\n    public abstract double getMagnitudeSquared();\r\n\r\n    public boolean equals(Object o) {\r\n        if (!(o instanceof Vector)) {\r\n            return false;\r\n        }\r\n        Vector vector = (Vector) o;\r\n        return getX() == (vector.getX()) && getY() == (vector.getY());\r\n    }\r\n\r\n    /**\r\n     * Project this vector onto the given vector.\r\n     *\r\n     * @param v the vector to be projected upon.\r\n     * @return the vector projection.\r\n     */\r\n    public Vector projectOnto(Vector v) {\r\n        return v.times(v.dot(this) / (v.getMagnitudeSquared()));\r\n    }\r\n}\r\n",
		"id": "EvoSuiteBenchmark/86_at-robots2-j/src/main/java/net/virtualinfinity/atrobots/measures/VectorTest5.java",
		"test_prompt": "// VectorTest5.java\npackage net.virtualinfinity.atrobots.measures;\n\nimport java.awt.geom.Point2D;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link Vector}.\n* It contains ten unit test cases for the {@link Vector#dot(Vector)} method.\n*/\nclass VectorTest5 {"
	},
	{
		"original_code": "// Vector.java\npackage net.virtualinfinity.atrobots.measures;\r\n\r\nimport java.awt.geom.Point2D;\r\n\r\n/**\r\n * This is a 2d vector class. Use {@link #createPolar(AbsoluteAngle, double)} or\r\n * {@link #createCartesian(double , double)} } to create an instance of this class.\r\n *\r\n * @author Daniel Pitts\r\n */\r\npublic abstract class Vector {\r\n\r\n    /**\r\n     * Get the magnitude of his vector\r\n     *\r\n     * @return the magnitude of this vector\r\n     */\r\n    public abstract double getMagnitude();\r\n\r\n    /**\r\n     * Get the direction of this vector.\r\n     *\r\n     * @return the theta of this angle.\r\n     */\r\n    public abstract AbsoluteAngle getAngle();\r\n\r\n    /**\r\n     * Get the X component of this vector\r\n     *\r\n     * @return the x component.\r\n     */\r\n    public abstract double getX();\r\n\r\n    /**\r\n     * Get the Y component of this vector\r\n     *\r\n     * @return the y component.\r\n     */\r\n    public abstract double getY();\r\n\r\n    /**\r\n     * Create a new Vector instance based on polar coordinates\r\n     *\r\n     * @param angle     the direction of the vector\r\n     * @param magnitude the magnitude of the vector\r\n     * @return a vector with the given direction and magnitude\r\n     */\r\n    public static Vector createPolar(AbsoluteAngle angle, double magnitude) {\r\n        return PolarVector.createPolar(angle, magnitude);\r\n    }\r\n\r\n    /**\r\n     * Create a new Vector instance based on cartesian (rectangular) coordinates\r\n     *\r\n     * @param x the x component of the vector\r\n     * @param y the y component of the vector\r\n     * @return a vector with the given <x,y> components\r\n     */\r\n    public static Vector createCartesian(double x, double y) {\r\n        return CartesianVector.fromCartesian(x, y);\r\n    }\r\n\r\n    /**\r\n     * Add this vector with the given vector\r\n     *\r\n     * @param vector the summand.\r\n     * @return a new vector which is the sum.\r\n     */\r\n    public Vector plus(Vector vector) {\r\n        return createCartesian(getX() + (vector.getX()), getY() + (vector.getY()));\r\n    }\r\n\r\n    public String toString() {\r\n        return \"<\" + getAngle() + \", \" + getMagnitude() + \">:<\" + getX() + \", \" + getY() + \">\";\r\n    }\r\n\r\n    /**\r\n     * Convert this vector to a {@link java.awt.geom.Point2D}\r\n     *\r\n     * @return a point.\r\n     */\r\n    public Point2D toPoint2D() {\r\n        return new Point2D.Double(getX(), getY());\r\n    }\r\n\r\n    /**\r\n     * Subtract the given vector from this one.\r\n     *\r\n     * @param vector the vector to subtract.\r\n     * @return the difference between the vectors.\r\n     */\r\n    public Vector minus(Vector vector) {\r\n        return createCartesian(getX() - (vector.getX()), getY() - (vector.getY()));\r\n    }\r\n\r\n    /**\r\n     * Calculate the dot product of this vector with another vector.\r\n     *\r\n     * @param vector the other vector.\r\n     * @return the dot product.\r\n     */\r\n    public double dot(Vector vector) {\r\n        return getX() * (vector.getX()) + (getY() * (vector.getY()));\r\n    }\r\n\r\n    /**\r\n     * Find the intersection of the given line segment with the line that is perpendicular to the given line and goes\r\n     * through the point represented by this vector.\r\n     *\r\n     * @param linePoint     the start of the line segment.\r\n     * @param lineSlope     the angle of the line segment.\r\n     * @param segmentLength the length of the segment\r\n     * @return the point where the segment intersects the line.\r\n     */\r\n    public Vector perpendicularIntersectionFrom(Vector linePoint, AbsoluteAngle lineSlope, double segmentLength) {\r\n        final Vector intersectionVector = lineSlope.projectAngle(minus(linePoint));\r\n        if (intersectionVector.getMagnitude() < (segmentLength))\r\n            return intersectionVector.plus(linePoint);\r\n        else {\r\n            return null;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Scale this vector.\r\n     *\r\n     * @param scalar the scale.\r\n     * @return a vector who's direction is the same as this vector, but whos magnitude is scaled.\r\n     */\r\n    public abstract Vector times(double scalar);\r\n\r\n    /**\r\n     * Get the square of the magnitude of this.\r\n     *\r\n     * @return the square of the magnitude.\r\n     */\r\n    public abstract double getMagnitudeSquared();\r\n\r\n    public boolean equals(Object o) {\r\n        if (!(o instanceof Vector)) {\r\n            return false;\r\n        }\r\n        Vector vector = (Vector) o;\r\n        return getX() == (vector.getX()) && getY() == (vector.getY());\r\n    }\r\n\r\n    /**\r\n     * Project this vector onto the given vector.\r\n     *\r\n     * @param v the vector to be projected upon.\r\n     * @return the vector projection.\r\n     */\r\n    public Vector projectOnto(Vector v) {\r\n        return v.times(v.dot(this) / (v.getMagnitudeSquared()));\r\n    }\r\n}\r\n",
		"id": "EvoSuiteBenchmark/86_at-robots2-j/src/main/java/net/virtualinfinity/atrobots/measures/VectorTest6.java",
		"test_prompt": "// VectorTest6.java\npackage net.virtualinfinity.atrobots.measures;\n\nimport java.awt.geom.Point2D;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link Vector}.\n* It contains ten unit test cases for the {@link Vector#perpendicularIntersectionFrom(Vector, AbsoluteAngle, double)} method.\n*/\nclass VectorTest6 {"
	},
	{
		"original_code": "// Vector.java\npackage net.virtualinfinity.atrobots.measures;\r\n\r\nimport java.awt.geom.Point2D;\r\n\r\n/**\r\n * This is a 2d vector class. Use {@link #createPolar(AbsoluteAngle, double)} or\r\n * {@link #createCartesian(double , double)} } to create an instance of this class.\r\n *\r\n * @author Daniel Pitts\r\n */\r\npublic abstract class Vector {\r\n\r\n    /**\r\n     * Get the magnitude of his vector\r\n     *\r\n     * @return the magnitude of this vector\r\n     */\r\n    public abstract double getMagnitude();\r\n\r\n    /**\r\n     * Get the direction of this vector.\r\n     *\r\n     * @return the theta of this angle.\r\n     */\r\n    public abstract AbsoluteAngle getAngle();\r\n\r\n    /**\r\n     * Get the X component of this vector\r\n     *\r\n     * @return the x component.\r\n     */\r\n    public abstract double getX();\r\n\r\n    /**\r\n     * Get the Y component of this vector\r\n     *\r\n     * @return the y component.\r\n     */\r\n    public abstract double getY();\r\n\r\n    /**\r\n     * Create a new Vector instance based on polar coordinates\r\n     *\r\n     * @param angle     the direction of the vector\r\n     * @param magnitude the magnitude of the vector\r\n     * @return a vector with the given direction and magnitude\r\n     */\r\n    public static Vector createPolar(AbsoluteAngle angle, double magnitude) {\r\n        return PolarVector.createPolar(angle, magnitude);\r\n    }\r\n\r\n    /**\r\n     * Create a new Vector instance based on cartesian (rectangular) coordinates\r\n     *\r\n     * @param x the x component of the vector\r\n     * @param y the y component of the vector\r\n     * @return a vector with the given <x,y> components\r\n     */\r\n    public static Vector createCartesian(double x, double y) {\r\n        return CartesianVector.fromCartesian(x, y);\r\n    }\r\n\r\n    /**\r\n     * Add this vector with the given vector\r\n     *\r\n     * @param vector the summand.\r\n     * @return a new vector which is the sum.\r\n     */\r\n    public Vector plus(Vector vector) {\r\n        return createCartesian(getX() + (vector.getX()), getY() + (vector.getY()));\r\n    }\r\n\r\n    public String toString() {\r\n        return \"<\" + getAngle() + \", \" + getMagnitude() + \">:<\" + getX() + \", \" + getY() + \">\";\r\n    }\r\n\r\n    /**\r\n     * Convert this vector to a {@link java.awt.geom.Point2D}\r\n     *\r\n     * @return a point.\r\n     */\r\n    public Point2D toPoint2D() {\r\n        return new Point2D.Double(getX(), getY());\r\n    }\r\n\r\n    /**\r\n     * Subtract the given vector from this one.\r\n     *\r\n     * @param vector the vector to subtract.\r\n     * @return the difference between the vectors.\r\n     */\r\n    public Vector minus(Vector vector) {\r\n        return createCartesian(getX() - (vector.getX()), getY() - (vector.getY()));\r\n    }\r\n\r\n    /**\r\n     * Calculate the dot product of this vector with another vector.\r\n     *\r\n     * @param vector the other vector.\r\n     * @return the dot product.\r\n     */\r\n    public double dot(Vector vector) {\r\n        return getX() * (vector.getX()) + (getY() * (vector.getY()));\r\n    }\r\n\r\n    /**\r\n     * Find the intersection of the given line segment with the line that is perpendicular to the given line and goes\r\n     * through the point represented by this vector.\r\n     *\r\n     * @param linePoint     the start of the line segment.\r\n     * @param lineSlope     the angle of the line segment.\r\n     * @param segmentLength the length of the segment\r\n     * @return the point where the segment intersects the line.\r\n     */\r\n    public Vector perpendicularIntersectionFrom(Vector linePoint, AbsoluteAngle lineSlope, double segmentLength) {\r\n        final Vector intersectionVector = lineSlope.projectAngle(minus(linePoint));\r\n        if (intersectionVector.getMagnitude() < (segmentLength))\r\n            return intersectionVector.plus(linePoint);\r\n        else {\r\n            return null;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Scale this vector.\r\n     *\r\n     * @param scalar the scale.\r\n     * @return a vector who's direction is the same as this vector, but whos magnitude is scaled.\r\n     */\r\n    public abstract Vector times(double scalar);\r\n\r\n    /**\r\n     * Get the square of the magnitude of this.\r\n     *\r\n     * @return the square of the magnitude.\r\n     */\r\n    public abstract double getMagnitudeSquared();\r\n\r\n    public boolean equals(Object o) {\r\n        if (!(o instanceof Vector)) {\r\n            return false;\r\n        }\r\n        Vector vector = (Vector) o;\r\n        return getX() == (vector.getX()) && getY() == (vector.getY());\r\n    }\r\n\r\n    /**\r\n     * Project this vector onto the given vector.\r\n     *\r\n     * @param v the vector to be projected upon.\r\n     * @return the vector projection.\r\n     */\r\n    public Vector projectOnto(Vector v) {\r\n        return v.times(v.dot(this) / (v.getMagnitudeSquared()));\r\n    }\r\n}\r\n",
		"id": "EvoSuiteBenchmark/86_at-robots2-j/src/main/java/net/virtualinfinity/atrobots/measures/VectorTest7.java",
		"test_prompt": "// VectorTest7.java\npackage net.virtualinfinity.atrobots.measures;\n\nimport java.awt.geom.Point2D;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link Vector}.\n* It contains ten unit test cases for the {@link Vector#equals(Object)} method.\n*/\nclass VectorTest7 {"
	},
	{
		"original_code": "// Vector.java\npackage net.virtualinfinity.atrobots.measures;\r\n\r\nimport java.awt.geom.Point2D;\r\n\r\n/**\r\n * This is a 2d vector class. Use {@link #createPolar(AbsoluteAngle, double)} or\r\n * {@link #createCartesian(double , double)} } to create an instance of this class.\r\n *\r\n * @author Daniel Pitts\r\n */\r\npublic abstract class Vector {\r\n\r\n    /**\r\n     * Get the magnitude of his vector\r\n     *\r\n     * @return the magnitude of this vector\r\n     */\r\n    public abstract double getMagnitude();\r\n\r\n    /**\r\n     * Get the direction of this vector.\r\n     *\r\n     * @return the theta of this angle.\r\n     */\r\n    public abstract AbsoluteAngle getAngle();\r\n\r\n    /**\r\n     * Get the X component of this vector\r\n     *\r\n     * @return the x component.\r\n     */\r\n    public abstract double getX();\r\n\r\n    /**\r\n     * Get the Y component of this vector\r\n     *\r\n     * @return the y component.\r\n     */\r\n    public abstract double getY();\r\n\r\n    /**\r\n     * Create a new Vector instance based on polar coordinates\r\n     *\r\n     * @param angle     the direction of the vector\r\n     * @param magnitude the magnitude of the vector\r\n     * @return a vector with the given direction and magnitude\r\n     */\r\n    public static Vector createPolar(AbsoluteAngle angle, double magnitude) {\r\n        return PolarVector.createPolar(angle, magnitude);\r\n    }\r\n\r\n    /**\r\n     * Create a new Vector instance based on cartesian (rectangular) coordinates\r\n     *\r\n     * @param x the x component of the vector\r\n     * @param y the y component of the vector\r\n     * @return a vector with the given <x,y> components\r\n     */\r\n    public static Vector createCartesian(double x, double y) {\r\n        return CartesianVector.fromCartesian(x, y);\r\n    }\r\n\r\n    /**\r\n     * Add this vector with the given vector\r\n     *\r\n     * @param vector the summand.\r\n     * @return a new vector which is the sum.\r\n     */\r\n    public Vector plus(Vector vector) {\r\n        return createCartesian(getX() + (vector.getX()), getY() + (vector.getY()));\r\n    }\r\n\r\n    public String toString() {\r\n        return \"<\" + getAngle() + \", \" + getMagnitude() + \">:<\" + getX() + \", \" + getY() + \">\";\r\n    }\r\n\r\n    /**\r\n     * Convert this vector to a {@link java.awt.geom.Point2D}\r\n     *\r\n     * @return a point.\r\n     */\r\n    public Point2D toPoint2D() {\r\n        return new Point2D.Double(getX(), getY());\r\n    }\r\n\r\n    /**\r\n     * Subtract the given vector from this one.\r\n     *\r\n     * @param vector the vector to subtract.\r\n     * @return the difference between the vectors.\r\n     */\r\n    public Vector minus(Vector vector) {\r\n        return createCartesian(getX() - (vector.getX()), getY() - (vector.getY()));\r\n    }\r\n\r\n    /**\r\n     * Calculate the dot product of this vector with another vector.\r\n     *\r\n     * @param vector the other vector.\r\n     * @return the dot product.\r\n     */\r\n    public double dot(Vector vector) {\r\n        return getX() * (vector.getX()) + (getY() * (vector.getY()));\r\n    }\r\n\r\n    /**\r\n     * Find the intersection of the given line segment with the line that is perpendicular to the given line and goes\r\n     * through the point represented by this vector.\r\n     *\r\n     * @param linePoint     the start of the line segment.\r\n     * @param lineSlope     the angle of the line segment.\r\n     * @param segmentLength the length of the segment\r\n     * @return the point where the segment intersects the line.\r\n     */\r\n    public Vector perpendicularIntersectionFrom(Vector linePoint, AbsoluteAngle lineSlope, double segmentLength) {\r\n        final Vector intersectionVector = lineSlope.projectAngle(minus(linePoint));\r\n        if (intersectionVector.getMagnitude() < (segmentLength))\r\n            return intersectionVector.plus(linePoint);\r\n        else {\r\n            return null;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Scale this vector.\r\n     *\r\n     * @param scalar the scale.\r\n     * @return a vector who's direction is the same as this vector, but whos magnitude is scaled.\r\n     */\r\n    public abstract Vector times(double scalar);\r\n\r\n    /**\r\n     * Get the square of the magnitude of this.\r\n     *\r\n     * @return the square of the magnitude.\r\n     */\r\n    public abstract double getMagnitudeSquared();\r\n\r\n    public boolean equals(Object o) {\r\n        if (!(o instanceof Vector)) {\r\n            return false;\r\n        }\r\n        Vector vector = (Vector) o;\r\n        return getX() == (vector.getX()) && getY() == (vector.getY());\r\n    }\r\n\r\n    /**\r\n     * Project this vector onto the given vector.\r\n     *\r\n     * @param v the vector to be projected upon.\r\n     * @return the vector projection.\r\n     */\r\n    public Vector projectOnto(Vector v) {\r\n        return v.times(v.dot(this) / (v.getMagnitudeSquared()));\r\n    }\r\n}\r\n",
		"id": "EvoSuiteBenchmark/86_at-robots2-j/src/main/java/net/virtualinfinity/atrobots/measures/VectorTest8.java",
		"test_prompt": "// VectorTest8.java\npackage net.virtualinfinity.atrobots.measures;\n\nimport java.awt.geom.Point2D;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link Vector}.\n* It contains ten unit test cases for the {@link Vector#projectOnto(Vector)} method.\n*/\nclass VectorTest8 {"
	},
	{
		"original_code": "// Duration.java\npackage net.virtualinfinity.atrobots.measures;\r\n\r\n/**\r\n * Represents a particular amount of time.\r\n *\r\n * @author Daniel Pitts\r\n */\r\npublic final class Duration implements Comparable<Duration> {\r\n\r\n    private final int cycles;\r\n\r\n    public static final Duration ZERO_CYCLE = Duration.fromCycles(1);\r\n\r\n    public static final Duration ONE_CYCLE = Duration.fromCycles(1);\r\n\r\n    private Duration(int cycles) {\r\n        this.cycles = cycles;\r\n    }\r\n\r\n    public double divided(Duration duration) {\r\n        return ((double) cycles) / ((double) duration.cycles);\r\n    }\r\n\r\n    public int getCycles() {\r\n        return cycles;\r\n    }\r\n\r\n    public static Duration fromCycles(int cycles) {\r\n        return new Duration(cycles);\r\n    }\r\n\r\n    public Duration minus(Duration duration) {\r\n        return new Duration(getCycles() - duration.getCycles());\r\n    }\r\n\r\n    public String toString() {\r\n        return cycles + \"s\";\r\n    }\r\n\r\n    public int compareTo(Duration duration) {\r\n        return getCycles() < duration.getCycles() ? -1 : getCycles() == duration.getCycles() ? 0 : 1;\r\n    }\r\n\r\n    public Duration plus(Duration duration) {\r\n        return fromCycles(getCycles() + duration.getCycles());\r\n    }\r\n}\r\n",
		"id": "EvoSuiteBenchmark/86_at-robots2-j/src/main/java/net/virtualinfinity/atrobots/measures/DurationTest0.java",
		"test_prompt": "// DurationTest0.java\npackage net.virtualinfinity.atrobots.measures;\n\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link Duration}.\n* It contains ten unit test cases for the {@link Duration#divided(Duration)} method.\n*/\nclass DurationTest0 {"
	},
	{
		"original_code": "// Duration.java\npackage net.virtualinfinity.atrobots.measures;\r\n\r\n/**\r\n * Represents a particular amount of time.\r\n *\r\n * @author Daniel Pitts\r\n */\r\npublic final class Duration implements Comparable<Duration> {\r\n\r\n    private final int cycles;\r\n\r\n    public static final Duration ZERO_CYCLE = Duration.fromCycles(1);\r\n\r\n    public static final Duration ONE_CYCLE = Duration.fromCycles(1);\r\n\r\n    private Duration(int cycles) {\r\n        this.cycles = cycles;\r\n    }\r\n\r\n    public double divided(Duration duration) {\r\n        return ((double) cycles) / ((double) duration.cycles);\r\n    }\r\n\r\n    public int getCycles() {\r\n        return cycles;\r\n    }\r\n\r\n    public static Duration fromCycles(int cycles) {\r\n        return new Duration(cycles);\r\n    }\r\n\r\n    public Duration minus(Duration duration) {\r\n        return new Duration(getCycles() - duration.getCycles());\r\n    }\r\n\r\n    public String toString() {\r\n        return cycles + \"s\";\r\n    }\r\n\r\n    public int compareTo(Duration duration) {\r\n        return getCycles() < duration.getCycles() ? -1 : getCycles() == duration.getCycles() ? 0 : 1;\r\n    }\r\n\r\n    public Duration plus(Duration duration) {\r\n        return fromCycles(getCycles() + duration.getCycles());\r\n    }\r\n}\r\n",
		"id": "EvoSuiteBenchmark/86_at-robots2-j/src/main/java/net/virtualinfinity/atrobots/measures/DurationTest1.java",
		"test_prompt": "// DurationTest1.java\npackage net.virtualinfinity.atrobots.measures;\n\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link Duration}.\n* It contains ten unit test cases for the {@link Duration#fromCycles(int)} method.\n*/\nclass DurationTest1 {"
	},
	{
		"original_code": "// Duration.java\npackage net.virtualinfinity.atrobots.measures;\r\n\r\n/**\r\n * Represents a particular amount of time.\r\n *\r\n * @author Daniel Pitts\r\n */\r\npublic final class Duration implements Comparable<Duration> {\r\n\r\n    private final int cycles;\r\n\r\n    public static final Duration ZERO_CYCLE = Duration.fromCycles(1);\r\n\r\n    public static final Duration ONE_CYCLE = Duration.fromCycles(1);\r\n\r\n    private Duration(int cycles) {\r\n        this.cycles = cycles;\r\n    }\r\n\r\n    public double divided(Duration duration) {\r\n        return ((double) cycles) / ((double) duration.cycles);\r\n    }\r\n\r\n    public int getCycles() {\r\n        return cycles;\r\n    }\r\n\r\n    public static Duration fromCycles(int cycles) {\r\n        return new Duration(cycles);\r\n    }\r\n\r\n    public Duration minus(Duration duration) {\r\n        return new Duration(getCycles() - duration.getCycles());\r\n    }\r\n\r\n    public String toString() {\r\n        return cycles + \"s\";\r\n    }\r\n\r\n    public int compareTo(Duration duration) {\r\n        return getCycles() < duration.getCycles() ? -1 : getCycles() == duration.getCycles() ? 0 : 1;\r\n    }\r\n\r\n    public Duration plus(Duration duration) {\r\n        return fromCycles(getCycles() + duration.getCycles());\r\n    }\r\n}\r\n",
		"id": "EvoSuiteBenchmark/86_at-robots2-j/src/main/java/net/virtualinfinity/atrobots/measures/DurationTest2.java",
		"test_prompt": "// DurationTest2.java\npackage net.virtualinfinity.atrobots.measures;\n\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link Duration}.\n* It contains ten unit test cases for the {@link Duration#minus(Duration)} method.\n*/\nclass DurationTest2 {"
	},
	{
		"original_code": "// Duration.java\npackage net.virtualinfinity.atrobots.measures;\r\n\r\n/**\r\n * Represents a particular amount of time.\r\n *\r\n * @author Daniel Pitts\r\n */\r\npublic final class Duration implements Comparable<Duration> {\r\n\r\n    private final int cycles;\r\n\r\n    public static final Duration ZERO_CYCLE = Duration.fromCycles(1);\r\n\r\n    public static final Duration ONE_CYCLE = Duration.fromCycles(1);\r\n\r\n    private Duration(int cycles) {\r\n        this.cycles = cycles;\r\n    }\r\n\r\n    public double divided(Duration duration) {\r\n        return ((double) cycles) / ((double) duration.cycles);\r\n    }\r\n\r\n    public int getCycles() {\r\n        return cycles;\r\n    }\r\n\r\n    public static Duration fromCycles(int cycles) {\r\n        return new Duration(cycles);\r\n    }\r\n\r\n    public Duration minus(Duration duration) {\r\n        return new Duration(getCycles() - duration.getCycles());\r\n    }\r\n\r\n    public String toString() {\r\n        return cycles + \"s\";\r\n    }\r\n\r\n    public int compareTo(Duration duration) {\r\n        return getCycles() < duration.getCycles() ? -1 : getCycles() == duration.getCycles() ? 0 : 1;\r\n    }\r\n\r\n    public Duration plus(Duration duration) {\r\n        return fromCycles(getCycles() + duration.getCycles());\r\n    }\r\n}\r\n",
		"id": "EvoSuiteBenchmark/86_at-robots2-j/src/main/java/net/virtualinfinity/atrobots/measures/DurationTest3.java",
		"test_prompt": "// DurationTest3.java\npackage net.virtualinfinity.atrobots.measures;\n\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link Duration}.\n* It contains ten unit test cases for the {@link Duration#compareTo(Duration)} method.\n*/\nclass DurationTest3 {"
	},
	{
		"original_code": "// Duration.java\npackage net.virtualinfinity.atrobots.measures;\r\n\r\n/**\r\n * Represents a particular amount of time.\r\n *\r\n * @author Daniel Pitts\r\n */\r\npublic final class Duration implements Comparable<Duration> {\r\n\r\n    private final int cycles;\r\n\r\n    public static final Duration ZERO_CYCLE = Duration.fromCycles(1);\r\n\r\n    public static final Duration ONE_CYCLE = Duration.fromCycles(1);\r\n\r\n    private Duration(int cycles) {\r\n        this.cycles = cycles;\r\n    }\r\n\r\n    public double divided(Duration duration) {\r\n        return ((double) cycles) / ((double) duration.cycles);\r\n    }\r\n\r\n    public int getCycles() {\r\n        return cycles;\r\n    }\r\n\r\n    public static Duration fromCycles(int cycles) {\r\n        return new Duration(cycles);\r\n    }\r\n\r\n    public Duration minus(Duration duration) {\r\n        return new Duration(getCycles() - duration.getCycles());\r\n    }\r\n\r\n    public String toString() {\r\n        return cycles + \"s\";\r\n    }\r\n\r\n    public int compareTo(Duration duration) {\r\n        return getCycles() < duration.getCycles() ? -1 : getCycles() == duration.getCycles() ? 0 : 1;\r\n    }\r\n\r\n    public Duration plus(Duration duration) {\r\n        return fromCycles(getCycles() + duration.getCycles());\r\n    }\r\n}\r\n",
		"id": "EvoSuiteBenchmark/86_at-robots2-j/src/main/java/net/virtualinfinity/atrobots/measures/DurationTest4.java",
		"test_prompt": "// DurationTest4.java\npackage net.virtualinfinity.atrobots.measures;\n\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link Duration}.\n* It contains ten unit test cases for the {@link Duration#plus(Duration)} method.\n*/\nclass DurationTest4 {"
	},
	{
		"original_code": "// AngleBracket.java\npackage net.virtualinfinity.atrobots.measures;\r\n\r\nimport java.awt.*;\r\nimport java.awt.geom.Arc2D;\r\nimport java.awt.geom.Ellipse2D;\r\n\r\n/**\r\n * Represents a range of angles.\r\n *\r\n * @author Daniel Pitts\r\n */\r\npublic class AngleBracket {\r\n\r\n    private final AbsoluteAngle counterClockwiseBound;\r\n\r\n    private final RelativeAngle rangeSize;\r\n\r\n    private AngleBracket(AbsoluteAngle counterClockwiseBound, AbsoluteAngle clockwiseBound) {\r\n        this.counterClockwiseBound = counterClockwiseBound;\r\n        rangeSize = counterClockwiseBound.getAngleCounterClockwiseTo(clockwiseBound);\r\n    }\r\n\r\n    private AngleBracket(AbsoluteAngle counterClockwiseBound, RelativeAngle rangeSize) {\r\n        this.counterClockwiseBound = counterClockwiseBound;\r\n        this.rangeSize = rangeSize;\r\n    }\r\n\r\n    private AngleBracket() {\r\n        counterClockwiseBound = null;\r\n        rangeSize = RelativeAngle.FULL_CIRCLE;\r\n    }\r\n\r\n    public static AngleBracket around(AbsoluteAngle center, RelativeAngle width) {\r\n        return new AngleBracket(center.counterClockwise(width), width.times(2));\r\n    }\r\n\r\n    public static AngleBracket clockwiseFrom(AbsoluteAngle counterClockwiseBound, RelativeAngle width) {\r\n        return new AngleBracket(counterClockwiseBound, width);\r\n    }\r\n\r\n    public static AngleBracket between(AbsoluteAngle counterClockwiseBound, AbsoluteAngle clockwiseBound) {\r\n        return new AngleBracket(counterClockwiseBound, clockwiseBound);\r\n    }\r\n\r\n    public static AngleBracket all() {\r\n        return new AngleBracket() {\r\n\r\n            @Override\r\n            public boolean contains(AbsoluteAngle angle) {\r\n                return true;\r\n            }\r\n\r\n            @Override\r\n            public Shape toShape(double x, double y, double radius) {\r\n                final Ellipse2D ellipse2D = new Ellipse2D.Double();\r\n                ellipse2D.setFrameFromCenter(x, y, x + (radius), y + (radius));\r\n                return ellipse2D;\r\n            }\r\n        };\r\n    }\r\n\r\n    public boolean contains(AbsoluteAngle angle) {\r\n        return counterClockwiseBound.getAngleCounterClockwiseTo(angle).compareTo(rangeSize) <= 0;\r\n    }\r\n\r\n    public double fractionTo(AbsoluteAngle angle) {\r\n        return counterClockwiseBound.getAngleCounterClockwiseTo(angle).normalize().dividedBy(rangeSize);\r\n    }\r\n\r\n    public AbsoluteAngle randomAngleBetween() {\r\n        return AbsoluteAngle.fromRadians(counterClockwiseBound.getNormalizedRadians() - Math.random() * rangeSize.getRadians());\r\n    }\r\n\r\n    public AngleBracket subrange(double from, double to) {\r\n        return between(counterClockwiseBound.clockwise(getRangeSize().times(from)), counterClockwiseBound.clockwise(getRangeSize().times(to)));\r\n    }\r\n\r\n    public Shape toShape(double x, double y, double radius) {\r\n        final Arc2D.Double arc = new Arc2D.Double();\r\n        arc.setArcByCenter(x, y, radius, -counterClockwiseBound.getDegrees(), rangeSize.getDegrees(), Arc2D.PIE);\r\n        return arc;\r\n    }\r\n\r\n    public AbsoluteAngle getCounterClockwiseBound() {\r\n        return counterClockwiseBound;\r\n    }\r\n\r\n    public AbsoluteAngle getClockwiseBound() {\r\n        return counterClockwiseBound == null ? null : counterClockwiseBound.clockwise(getRangeSize());\r\n    }\r\n\r\n    public RelativeAngle getRangeSize() {\r\n        return rangeSize;\r\n    }\r\n}\r\n",
		"id": "EvoSuiteBenchmark/86_at-robots2-j/src/main/java/net/virtualinfinity/atrobots/measures/AngleBracketTest0.java",
		"test_prompt": "// AngleBracketTest0.java\npackage net.virtualinfinity.atrobots.measures;\n\nimport java.awt.*;\nimport java.awt.geom.Arc2D;\nimport java.awt.geom.Ellipse2D;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link AngleBracket}.\n* It contains ten unit test cases for the {@link AngleBracket#around(AbsoluteAngle, RelativeAngle)} method.\n*/\nclass AngleBracketTest0 {"
	},
	{
		"original_code": "// AngleBracket.java\npackage net.virtualinfinity.atrobots.measures;\r\n\r\nimport java.awt.*;\r\nimport java.awt.geom.Arc2D;\r\nimport java.awt.geom.Ellipse2D;\r\n\r\n/**\r\n * Represents a range of angles.\r\n *\r\n * @author Daniel Pitts\r\n */\r\npublic class AngleBracket {\r\n\r\n    private final AbsoluteAngle counterClockwiseBound;\r\n\r\n    private final RelativeAngle rangeSize;\r\n\r\n    private AngleBracket(AbsoluteAngle counterClockwiseBound, AbsoluteAngle clockwiseBound) {\r\n        this.counterClockwiseBound = counterClockwiseBound;\r\n        rangeSize = counterClockwiseBound.getAngleCounterClockwiseTo(clockwiseBound);\r\n    }\r\n\r\n    private AngleBracket(AbsoluteAngle counterClockwiseBound, RelativeAngle rangeSize) {\r\n        this.counterClockwiseBound = counterClockwiseBound;\r\n        this.rangeSize = rangeSize;\r\n    }\r\n\r\n    private AngleBracket() {\r\n        counterClockwiseBound = null;\r\n        rangeSize = RelativeAngle.FULL_CIRCLE;\r\n    }\r\n\r\n    public static AngleBracket around(AbsoluteAngle center, RelativeAngle width) {\r\n        return new AngleBracket(center.counterClockwise(width), width.times(2));\r\n    }\r\n\r\n    public static AngleBracket clockwiseFrom(AbsoluteAngle counterClockwiseBound, RelativeAngle width) {\r\n        return new AngleBracket(counterClockwiseBound, width);\r\n    }\r\n\r\n    public static AngleBracket between(AbsoluteAngle counterClockwiseBound, AbsoluteAngle clockwiseBound) {\r\n        return new AngleBracket(counterClockwiseBound, clockwiseBound);\r\n    }\r\n\r\n    public static AngleBracket all() {\r\n        return new AngleBracket() {\r\n\r\n            @Override\r\n            public boolean contains(AbsoluteAngle angle) {\r\n                return true;\r\n            }\r\n\r\n            @Override\r\n            public Shape toShape(double x, double y, double radius) {\r\n                final Ellipse2D ellipse2D = new Ellipse2D.Double();\r\n                ellipse2D.setFrameFromCenter(x, y, x + (radius), y + (radius));\r\n                return ellipse2D;\r\n            }\r\n        };\r\n    }\r\n\r\n    public boolean contains(AbsoluteAngle angle) {\r\n        return counterClockwiseBound.getAngleCounterClockwiseTo(angle).compareTo(rangeSize) <= 0;\r\n    }\r\n\r\n    public double fractionTo(AbsoluteAngle angle) {\r\n        return counterClockwiseBound.getAngleCounterClockwiseTo(angle).normalize().dividedBy(rangeSize);\r\n    }\r\n\r\n    public AbsoluteAngle randomAngleBetween() {\r\n        return AbsoluteAngle.fromRadians(counterClockwiseBound.getNormalizedRadians() - Math.random() * rangeSize.getRadians());\r\n    }\r\n\r\n    public AngleBracket subrange(double from, double to) {\r\n        return between(counterClockwiseBound.clockwise(getRangeSize().times(from)), counterClockwiseBound.clockwise(getRangeSize().times(to)));\r\n    }\r\n\r\n    public Shape toShape(double x, double y, double radius) {\r\n        final Arc2D.Double arc = new Arc2D.Double();\r\n        arc.setArcByCenter(x, y, radius, -counterClockwiseBound.getDegrees(), rangeSize.getDegrees(), Arc2D.PIE);\r\n        return arc;\r\n    }\r\n\r\n    public AbsoluteAngle getCounterClockwiseBound() {\r\n        return counterClockwiseBound;\r\n    }\r\n\r\n    public AbsoluteAngle getClockwiseBound() {\r\n        return counterClockwiseBound == null ? null : counterClockwiseBound.clockwise(getRangeSize());\r\n    }\r\n\r\n    public RelativeAngle getRangeSize() {\r\n        return rangeSize;\r\n    }\r\n}\r\n",
		"id": "EvoSuiteBenchmark/86_at-robots2-j/src/main/java/net/virtualinfinity/atrobots/measures/AngleBracketTest1.java",
		"test_prompt": "// AngleBracketTest1.java\npackage net.virtualinfinity.atrobots.measures;\n\nimport java.awt.*;\nimport java.awt.geom.Arc2D;\nimport java.awt.geom.Ellipse2D;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link AngleBracket}.\n* It contains ten unit test cases for the {@link AngleBracket#clockwiseFrom(AbsoluteAngle, RelativeAngle)} method.\n*/\nclass AngleBracketTest1 {"
	},
	{
		"original_code": "// AngleBracket.java\npackage net.virtualinfinity.atrobots.measures;\r\n\r\nimport java.awt.*;\r\nimport java.awt.geom.Arc2D;\r\nimport java.awt.geom.Ellipse2D;\r\n\r\n/**\r\n * Represents a range of angles.\r\n *\r\n * @author Daniel Pitts\r\n */\r\npublic class AngleBracket {\r\n\r\n    private final AbsoluteAngle counterClockwiseBound;\r\n\r\n    private final RelativeAngle rangeSize;\r\n\r\n    private AngleBracket(AbsoluteAngle counterClockwiseBound, AbsoluteAngle clockwiseBound) {\r\n        this.counterClockwiseBound = counterClockwiseBound;\r\n        rangeSize = counterClockwiseBound.getAngleCounterClockwiseTo(clockwiseBound);\r\n    }\r\n\r\n    private AngleBracket(AbsoluteAngle counterClockwiseBound, RelativeAngle rangeSize) {\r\n        this.counterClockwiseBound = counterClockwiseBound;\r\n        this.rangeSize = rangeSize;\r\n    }\r\n\r\n    private AngleBracket() {\r\n        counterClockwiseBound = null;\r\n        rangeSize = RelativeAngle.FULL_CIRCLE;\r\n    }\r\n\r\n    public static AngleBracket around(AbsoluteAngle center, RelativeAngle width) {\r\n        return new AngleBracket(center.counterClockwise(width), width.times(2));\r\n    }\r\n\r\n    public static AngleBracket clockwiseFrom(AbsoluteAngle counterClockwiseBound, RelativeAngle width) {\r\n        return new AngleBracket(counterClockwiseBound, width);\r\n    }\r\n\r\n    public static AngleBracket between(AbsoluteAngle counterClockwiseBound, AbsoluteAngle clockwiseBound) {\r\n        return new AngleBracket(counterClockwiseBound, clockwiseBound);\r\n    }\r\n\r\n    public static AngleBracket all() {\r\n        return new AngleBracket() {\r\n\r\n            @Override\r\n            public boolean contains(AbsoluteAngle angle) {\r\n                return true;\r\n            }\r\n\r\n            @Override\r\n            public Shape toShape(double x, double y, double radius) {\r\n                final Ellipse2D ellipse2D = new Ellipse2D.Double();\r\n                ellipse2D.setFrameFromCenter(x, y, x + (radius), y + (radius));\r\n                return ellipse2D;\r\n            }\r\n        };\r\n    }\r\n\r\n    public boolean contains(AbsoluteAngle angle) {\r\n        return counterClockwiseBound.getAngleCounterClockwiseTo(angle).compareTo(rangeSize) <= 0;\r\n    }\r\n\r\n    public double fractionTo(AbsoluteAngle angle) {\r\n        return counterClockwiseBound.getAngleCounterClockwiseTo(angle).normalize().dividedBy(rangeSize);\r\n    }\r\n\r\n    public AbsoluteAngle randomAngleBetween() {\r\n        return AbsoluteAngle.fromRadians(counterClockwiseBound.getNormalizedRadians() - Math.random() * rangeSize.getRadians());\r\n    }\r\n\r\n    public AngleBracket subrange(double from, double to) {\r\n        return between(counterClockwiseBound.clockwise(getRangeSize().times(from)), counterClockwiseBound.clockwise(getRangeSize().times(to)));\r\n    }\r\n\r\n    public Shape toShape(double x, double y, double radius) {\r\n        final Arc2D.Double arc = new Arc2D.Double();\r\n        arc.setArcByCenter(x, y, radius, -counterClockwiseBound.getDegrees(), rangeSize.getDegrees(), Arc2D.PIE);\r\n        return arc;\r\n    }\r\n\r\n    public AbsoluteAngle getCounterClockwiseBound() {\r\n        return counterClockwiseBound;\r\n    }\r\n\r\n    public AbsoluteAngle getClockwiseBound() {\r\n        return counterClockwiseBound == null ? null : counterClockwiseBound.clockwise(getRangeSize());\r\n    }\r\n\r\n    public RelativeAngle getRangeSize() {\r\n        return rangeSize;\r\n    }\r\n}\r\n",
		"id": "EvoSuiteBenchmark/86_at-robots2-j/src/main/java/net/virtualinfinity/atrobots/measures/AngleBracketTest2.java",
		"test_prompt": "// AngleBracketTest2.java\npackage net.virtualinfinity.atrobots.measures;\n\nimport java.awt.*;\nimport java.awt.geom.Arc2D;\nimport java.awt.geom.Ellipse2D;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link AngleBracket}.\n* It contains ten unit test cases for the {@link AngleBracket#between(AbsoluteAngle, AbsoluteAngle)} method.\n*/\nclass AngleBracketTest2 {"
	},
	{
		"original_code": "// AngleBracket.java\npackage net.virtualinfinity.atrobots.measures;\r\n\r\nimport java.awt.*;\r\nimport java.awt.geom.Arc2D;\r\nimport java.awt.geom.Ellipse2D;\r\n\r\n/**\r\n * Represents a range of angles.\r\n *\r\n * @author Daniel Pitts\r\n */\r\npublic class AngleBracket {\r\n\r\n    private final AbsoluteAngle counterClockwiseBound;\r\n\r\n    private final RelativeAngle rangeSize;\r\n\r\n    private AngleBracket(AbsoluteAngle counterClockwiseBound, AbsoluteAngle clockwiseBound) {\r\n        this.counterClockwiseBound = counterClockwiseBound;\r\n        rangeSize = counterClockwiseBound.getAngleCounterClockwiseTo(clockwiseBound);\r\n    }\r\n\r\n    private AngleBracket(AbsoluteAngle counterClockwiseBound, RelativeAngle rangeSize) {\r\n        this.counterClockwiseBound = counterClockwiseBound;\r\n        this.rangeSize = rangeSize;\r\n    }\r\n\r\n    private AngleBracket() {\r\n        counterClockwiseBound = null;\r\n        rangeSize = RelativeAngle.FULL_CIRCLE;\r\n    }\r\n\r\n    public static AngleBracket around(AbsoluteAngle center, RelativeAngle width) {\r\n        return new AngleBracket(center.counterClockwise(width), width.times(2));\r\n    }\r\n\r\n    public static AngleBracket clockwiseFrom(AbsoluteAngle counterClockwiseBound, RelativeAngle width) {\r\n        return new AngleBracket(counterClockwiseBound, width);\r\n    }\r\n\r\n    public static AngleBracket between(AbsoluteAngle counterClockwiseBound, AbsoluteAngle clockwiseBound) {\r\n        return new AngleBracket(counterClockwiseBound, clockwiseBound);\r\n    }\r\n\r\n    public static AngleBracket all() {\r\n        return new AngleBracket() {\r\n\r\n            @Override\r\n            public boolean contains(AbsoluteAngle angle) {\r\n                return true;\r\n            }\r\n\r\n            @Override\r\n            public Shape toShape(double x, double y, double radius) {\r\n                final Ellipse2D ellipse2D = new Ellipse2D.Double();\r\n                ellipse2D.setFrameFromCenter(x, y, x + (radius), y + (radius));\r\n                return ellipse2D;\r\n            }\r\n        };\r\n    }\r\n\r\n    public boolean contains(AbsoluteAngle angle) {\r\n        return counterClockwiseBound.getAngleCounterClockwiseTo(angle).compareTo(rangeSize) <= 0;\r\n    }\r\n\r\n    public double fractionTo(AbsoluteAngle angle) {\r\n        return counterClockwiseBound.getAngleCounterClockwiseTo(angle).normalize().dividedBy(rangeSize);\r\n    }\r\n\r\n    public AbsoluteAngle randomAngleBetween() {\r\n        return AbsoluteAngle.fromRadians(counterClockwiseBound.getNormalizedRadians() - Math.random() * rangeSize.getRadians());\r\n    }\r\n\r\n    public AngleBracket subrange(double from, double to) {\r\n        return between(counterClockwiseBound.clockwise(getRangeSize().times(from)), counterClockwiseBound.clockwise(getRangeSize().times(to)));\r\n    }\r\n\r\n    public Shape toShape(double x, double y, double radius) {\r\n        final Arc2D.Double arc = new Arc2D.Double();\r\n        arc.setArcByCenter(x, y, radius, -counterClockwiseBound.getDegrees(), rangeSize.getDegrees(), Arc2D.PIE);\r\n        return arc;\r\n    }\r\n\r\n    public AbsoluteAngle getCounterClockwiseBound() {\r\n        return counterClockwiseBound;\r\n    }\r\n\r\n    public AbsoluteAngle getClockwiseBound() {\r\n        return counterClockwiseBound == null ? null : counterClockwiseBound.clockwise(getRangeSize());\r\n    }\r\n\r\n    public RelativeAngle getRangeSize() {\r\n        return rangeSize;\r\n    }\r\n}\r\n",
		"id": "EvoSuiteBenchmark/86_at-robots2-j/src/main/java/net/virtualinfinity/atrobots/measures/AngleBracketTest3.java",
		"test_prompt": "// AngleBracketTest3.java\npackage net.virtualinfinity.atrobots.measures;\n\nimport java.awt.*;\nimport java.awt.geom.Arc2D;\nimport java.awt.geom.Ellipse2D;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link AngleBracket}.\n* It contains ten unit test cases for the {@link AngleBracket#all()} method.\n*/\nclass AngleBracketTest3 {"
	},
	{
		"original_code": "// AngleBracket.java\npackage net.virtualinfinity.atrobots.measures;\r\n\r\nimport java.awt.*;\r\nimport java.awt.geom.Arc2D;\r\nimport java.awt.geom.Ellipse2D;\r\n\r\n/**\r\n * Represents a range of angles.\r\n *\r\n * @author Daniel Pitts\r\n */\r\npublic class AngleBracket {\r\n\r\n    private final AbsoluteAngle counterClockwiseBound;\r\n\r\n    private final RelativeAngle rangeSize;\r\n\r\n    private AngleBracket(AbsoluteAngle counterClockwiseBound, AbsoluteAngle clockwiseBound) {\r\n        this.counterClockwiseBound = counterClockwiseBound;\r\n        rangeSize = counterClockwiseBound.getAngleCounterClockwiseTo(clockwiseBound);\r\n    }\r\n\r\n    private AngleBracket(AbsoluteAngle counterClockwiseBound, RelativeAngle rangeSize) {\r\n        this.counterClockwiseBound = counterClockwiseBound;\r\n        this.rangeSize = rangeSize;\r\n    }\r\n\r\n    private AngleBracket() {\r\n        counterClockwiseBound = null;\r\n        rangeSize = RelativeAngle.FULL_CIRCLE;\r\n    }\r\n\r\n    public static AngleBracket around(AbsoluteAngle center, RelativeAngle width) {\r\n        return new AngleBracket(center.counterClockwise(width), width.times(2));\r\n    }\r\n\r\n    public static AngleBracket clockwiseFrom(AbsoluteAngle counterClockwiseBound, RelativeAngle width) {\r\n        return new AngleBracket(counterClockwiseBound, width);\r\n    }\r\n\r\n    public static AngleBracket between(AbsoluteAngle counterClockwiseBound, AbsoluteAngle clockwiseBound) {\r\n        return new AngleBracket(counterClockwiseBound, clockwiseBound);\r\n    }\r\n\r\n    public static AngleBracket all() {\r\n        return new AngleBracket() {\r\n\r\n            @Override\r\n            public boolean contains(AbsoluteAngle angle) {\r\n                return true;\r\n            }\r\n\r\n            @Override\r\n            public Shape toShape(double x, double y, double radius) {\r\n                final Ellipse2D ellipse2D = new Ellipse2D.Double();\r\n                ellipse2D.setFrameFromCenter(x, y, x + (radius), y + (radius));\r\n                return ellipse2D;\r\n            }\r\n        };\r\n    }\r\n\r\n    public boolean contains(AbsoluteAngle angle) {\r\n        return counterClockwiseBound.getAngleCounterClockwiseTo(angle).compareTo(rangeSize) <= 0;\r\n    }\r\n\r\n    public double fractionTo(AbsoluteAngle angle) {\r\n        return counterClockwiseBound.getAngleCounterClockwiseTo(angle).normalize().dividedBy(rangeSize);\r\n    }\r\n\r\n    public AbsoluteAngle randomAngleBetween() {\r\n        return AbsoluteAngle.fromRadians(counterClockwiseBound.getNormalizedRadians() - Math.random() * rangeSize.getRadians());\r\n    }\r\n\r\n    public AngleBracket subrange(double from, double to) {\r\n        return between(counterClockwiseBound.clockwise(getRangeSize().times(from)), counterClockwiseBound.clockwise(getRangeSize().times(to)));\r\n    }\r\n\r\n    public Shape toShape(double x, double y, double radius) {\r\n        final Arc2D.Double arc = new Arc2D.Double();\r\n        arc.setArcByCenter(x, y, radius, -counterClockwiseBound.getDegrees(), rangeSize.getDegrees(), Arc2D.PIE);\r\n        return arc;\r\n    }\r\n\r\n    public AbsoluteAngle getCounterClockwiseBound() {\r\n        return counterClockwiseBound;\r\n    }\r\n\r\n    public AbsoluteAngle getClockwiseBound() {\r\n        return counterClockwiseBound == null ? null : counterClockwiseBound.clockwise(getRangeSize());\r\n    }\r\n\r\n    public RelativeAngle getRangeSize() {\r\n        return rangeSize;\r\n    }\r\n}\r\n",
		"id": "EvoSuiteBenchmark/86_at-robots2-j/src/main/java/net/virtualinfinity/atrobots/measures/AngleBracketTest4.java",
		"test_prompt": "// AngleBracketTest4.java\npackage net.virtualinfinity.atrobots.measures;\n\nimport java.awt.*;\nimport java.awt.geom.Arc2D;\nimport java.awt.geom.Ellipse2D;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link AngleBracket}.\n* It contains ten unit test cases for the {@link AngleBracket#contains(AbsoluteAngle)} method.\n*/\nclass AngleBracketTest4 {"
	},
	{
		"original_code": "// AngleBracket.java\npackage net.virtualinfinity.atrobots.measures;\r\n\r\nimport java.awt.*;\r\nimport java.awt.geom.Arc2D;\r\nimport java.awt.geom.Ellipse2D;\r\n\r\n/**\r\n * Represents a range of angles.\r\n *\r\n * @author Daniel Pitts\r\n */\r\npublic class AngleBracket {\r\n\r\n    private final AbsoluteAngle counterClockwiseBound;\r\n\r\n    private final RelativeAngle rangeSize;\r\n\r\n    private AngleBracket(AbsoluteAngle counterClockwiseBound, AbsoluteAngle clockwiseBound) {\r\n        this.counterClockwiseBound = counterClockwiseBound;\r\n        rangeSize = counterClockwiseBound.getAngleCounterClockwiseTo(clockwiseBound);\r\n    }\r\n\r\n    private AngleBracket(AbsoluteAngle counterClockwiseBound, RelativeAngle rangeSize) {\r\n        this.counterClockwiseBound = counterClockwiseBound;\r\n        this.rangeSize = rangeSize;\r\n    }\r\n\r\n    private AngleBracket() {\r\n        counterClockwiseBound = null;\r\n        rangeSize = RelativeAngle.FULL_CIRCLE;\r\n    }\r\n\r\n    public static AngleBracket around(AbsoluteAngle center, RelativeAngle width) {\r\n        return new AngleBracket(center.counterClockwise(width), width.times(2));\r\n    }\r\n\r\n    public static AngleBracket clockwiseFrom(AbsoluteAngle counterClockwiseBound, RelativeAngle width) {\r\n        return new AngleBracket(counterClockwiseBound, width);\r\n    }\r\n\r\n    public static AngleBracket between(AbsoluteAngle counterClockwiseBound, AbsoluteAngle clockwiseBound) {\r\n        return new AngleBracket(counterClockwiseBound, clockwiseBound);\r\n    }\r\n\r\n    public static AngleBracket all() {\r\n        return new AngleBracket() {\r\n\r\n            @Override\r\n            public boolean contains(AbsoluteAngle angle) {\r\n                return true;\r\n            }\r\n\r\n            @Override\r\n            public Shape toShape(double x, double y, double radius) {\r\n                final Ellipse2D ellipse2D = new Ellipse2D.Double();\r\n                ellipse2D.setFrameFromCenter(x, y, x + (radius), y + (radius));\r\n                return ellipse2D;\r\n            }\r\n        };\r\n    }\r\n\r\n    public boolean contains(AbsoluteAngle angle) {\r\n        return counterClockwiseBound.getAngleCounterClockwiseTo(angle).compareTo(rangeSize) <= 0;\r\n    }\r\n\r\n    public double fractionTo(AbsoluteAngle angle) {\r\n        return counterClockwiseBound.getAngleCounterClockwiseTo(angle).normalize().dividedBy(rangeSize);\r\n    }\r\n\r\n    public AbsoluteAngle randomAngleBetween() {\r\n        return AbsoluteAngle.fromRadians(counterClockwiseBound.getNormalizedRadians() - Math.random() * rangeSize.getRadians());\r\n    }\r\n\r\n    public AngleBracket subrange(double from, double to) {\r\n        return between(counterClockwiseBound.clockwise(getRangeSize().times(from)), counterClockwiseBound.clockwise(getRangeSize().times(to)));\r\n    }\r\n\r\n    public Shape toShape(double x, double y, double radius) {\r\n        final Arc2D.Double arc = new Arc2D.Double();\r\n        arc.setArcByCenter(x, y, radius, -counterClockwiseBound.getDegrees(), rangeSize.getDegrees(), Arc2D.PIE);\r\n        return arc;\r\n    }\r\n\r\n    public AbsoluteAngle getCounterClockwiseBound() {\r\n        return counterClockwiseBound;\r\n    }\r\n\r\n    public AbsoluteAngle getClockwiseBound() {\r\n        return counterClockwiseBound == null ? null : counterClockwiseBound.clockwise(getRangeSize());\r\n    }\r\n\r\n    public RelativeAngle getRangeSize() {\r\n        return rangeSize;\r\n    }\r\n}\r\n",
		"id": "EvoSuiteBenchmark/86_at-robots2-j/src/main/java/net/virtualinfinity/atrobots/measures/AngleBracketTest5.java",
		"test_prompt": "// AngleBracketTest5.java\npackage net.virtualinfinity.atrobots.measures;\n\nimport java.awt.*;\nimport java.awt.geom.Arc2D;\nimport java.awt.geom.Ellipse2D;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link AngleBracket}.\n* It contains ten unit test cases for the {@link AngleBracket#fractionTo(AbsoluteAngle)} method.\n*/\nclass AngleBracketTest5 {"
	},
	{
		"original_code": "// AngleBracket.java\npackage net.virtualinfinity.atrobots.measures;\r\n\r\nimport java.awt.*;\r\nimport java.awt.geom.Arc2D;\r\nimport java.awt.geom.Ellipse2D;\r\n\r\n/**\r\n * Represents a range of angles.\r\n *\r\n * @author Daniel Pitts\r\n */\r\npublic class AngleBracket {\r\n\r\n    private final AbsoluteAngle counterClockwiseBound;\r\n\r\n    private final RelativeAngle rangeSize;\r\n\r\n    private AngleBracket(AbsoluteAngle counterClockwiseBound, AbsoluteAngle clockwiseBound) {\r\n        this.counterClockwiseBound = counterClockwiseBound;\r\n        rangeSize = counterClockwiseBound.getAngleCounterClockwiseTo(clockwiseBound);\r\n    }\r\n\r\n    private AngleBracket(AbsoluteAngle counterClockwiseBound, RelativeAngle rangeSize) {\r\n        this.counterClockwiseBound = counterClockwiseBound;\r\n        this.rangeSize = rangeSize;\r\n    }\r\n\r\n    private AngleBracket() {\r\n        counterClockwiseBound = null;\r\n        rangeSize = RelativeAngle.FULL_CIRCLE;\r\n    }\r\n\r\n    public static AngleBracket around(AbsoluteAngle center, RelativeAngle width) {\r\n        return new AngleBracket(center.counterClockwise(width), width.times(2));\r\n    }\r\n\r\n    public static AngleBracket clockwiseFrom(AbsoluteAngle counterClockwiseBound, RelativeAngle width) {\r\n        return new AngleBracket(counterClockwiseBound, width);\r\n    }\r\n\r\n    public static AngleBracket between(AbsoluteAngle counterClockwiseBound, AbsoluteAngle clockwiseBound) {\r\n        return new AngleBracket(counterClockwiseBound, clockwiseBound);\r\n    }\r\n\r\n    public static AngleBracket all() {\r\n        return new AngleBracket() {\r\n\r\n            @Override\r\n            public boolean contains(AbsoluteAngle angle) {\r\n                return true;\r\n            }\r\n\r\n            @Override\r\n            public Shape toShape(double x, double y, double radius) {\r\n                final Ellipse2D ellipse2D = new Ellipse2D.Double();\r\n                ellipse2D.setFrameFromCenter(x, y, x + (radius), y + (radius));\r\n                return ellipse2D;\r\n            }\r\n        };\r\n    }\r\n\r\n    public boolean contains(AbsoluteAngle angle) {\r\n        return counterClockwiseBound.getAngleCounterClockwiseTo(angle).compareTo(rangeSize) <= 0;\r\n    }\r\n\r\n    public double fractionTo(AbsoluteAngle angle) {\r\n        return counterClockwiseBound.getAngleCounterClockwiseTo(angle).normalize().dividedBy(rangeSize);\r\n    }\r\n\r\n    public AbsoluteAngle randomAngleBetween() {\r\n        return AbsoluteAngle.fromRadians(counterClockwiseBound.getNormalizedRadians() - Math.random() * rangeSize.getRadians());\r\n    }\r\n\r\n    public AngleBracket subrange(double from, double to) {\r\n        return between(counterClockwiseBound.clockwise(getRangeSize().times(from)), counterClockwiseBound.clockwise(getRangeSize().times(to)));\r\n    }\r\n\r\n    public Shape toShape(double x, double y, double radius) {\r\n        final Arc2D.Double arc = new Arc2D.Double();\r\n        arc.setArcByCenter(x, y, radius, -counterClockwiseBound.getDegrees(), rangeSize.getDegrees(), Arc2D.PIE);\r\n        return arc;\r\n    }\r\n\r\n    public AbsoluteAngle getCounterClockwiseBound() {\r\n        return counterClockwiseBound;\r\n    }\r\n\r\n    public AbsoluteAngle getClockwiseBound() {\r\n        return counterClockwiseBound == null ? null : counterClockwiseBound.clockwise(getRangeSize());\r\n    }\r\n\r\n    public RelativeAngle getRangeSize() {\r\n        return rangeSize;\r\n    }\r\n}\r\n",
		"id": "EvoSuiteBenchmark/86_at-robots2-j/src/main/java/net/virtualinfinity/atrobots/measures/AngleBracketTest6.java",
		"test_prompt": "// AngleBracketTest6.java\npackage net.virtualinfinity.atrobots.measures;\n\nimport java.awt.*;\nimport java.awt.geom.Arc2D;\nimport java.awt.geom.Ellipse2D;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link AngleBracket}.\n* It contains ten unit test cases for the {@link AngleBracket#randomAngleBetween()} method.\n*/\nclass AngleBracketTest6 {"
	},
	{
		"original_code": "// AngleBracket.java\npackage net.virtualinfinity.atrobots.measures;\r\n\r\nimport java.awt.*;\r\nimport java.awt.geom.Arc2D;\r\nimport java.awt.geom.Ellipse2D;\r\n\r\n/**\r\n * Represents a range of angles.\r\n *\r\n * @author Daniel Pitts\r\n */\r\npublic class AngleBracket {\r\n\r\n    private final AbsoluteAngle counterClockwiseBound;\r\n\r\n    private final RelativeAngle rangeSize;\r\n\r\n    private AngleBracket(AbsoluteAngle counterClockwiseBound, AbsoluteAngle clockwiseBound) {\r\n        this.counterClockwiseBound = counterClockwiseBound;\r\n        rangeSize = counterClockwiseBound.getAngleCounterClockwiseTo(clockwiseBound);\r\n    }\r\n\r\n    private AngleBracket(AbsoluteAngle counterClockwiseBound, RelativeAngle rangeSize) {\r\n        this.counterClockwiseBound = counterClockwiseBound;\r\n        this.rangeSize = rangeSize;\r\n    }\r\n\r\n    private AngleBracket() {\r\n        counterClockwiseBound = null;\r\n        rangeSize = RelativeAngle.FULL_CIRCLE;\r\n    }\r\n\r\n    public static AngleBracket around(AbsoluteAngle center, RelativeAngle width) {\r\n        return new AngleBracket(center.counterClockwise(width), width.times(2));\r\n    }\r\n\r\n    public static AngleBracket clockwiseFrom(AbsoluteAngle counterClockwiseBound, RelativeAngle width) {\r\n        return new AngleBracket(counterClockwiseBound, width);\r\n    }\r\n\r\n    public static AngleBracket between(AbsoluteAngle counterClockwiseBound, AbsoluteAngle clockwiseBound) {\r\n        return new AngleBracket(counterClockwiseBound, clockwiseBound);\r\n    }\r\n\r\n    public static AngleBracket all() {\r\n        return new AngleBracket() {\r\n\r\n            @Override\r\n            public boolean contains(AbsoluteAngle angle) {\r\n                return true;\r\n            }\r\n\r\n            @Override\r\n            public Shape toShape(double x, double y, double radius) {\r\n                final Ellipse2D ellipse2D = new Ellipse2D.Double();\r\n                ellipse2D.setFrameFromCenter(x, y, x + (radius), y + (radius));\r\n                return ellipse2D;\r\n            }\r\n        };\r\n    }\r\n\r\n    public boolean contains(AbsoluteAngle angle) {\r\n        return counterClockwiseBound.getAngleCounterClockwiseTo(angle).compareTo(rangeSize) <= 0;\r\n    }\r\n\r\n    public double fractionTo(AbsoluteAngle angle) {\r\n        return counterClockwiseBound.getAngleCounterClockwiseTo(angle).normalize().dividedBy(rangeSize);\r\n    }\r\n\r\n    public AbsoluteAngle randomAngleBetween() {\r\n        return AbsoluteAngle.fromRadians(counterClockwiseBound.getNormalizedRadians() - Math.random() * rangeSize.getRadians());\r\n    }\r\n\r\n    public AngleBracket subrange(double from, double to) {\r\n        return between(counterClockwiseBound.clockwise(getRangeSize().times(from)), counterClockwiseBound.clockwise(getRangeSize().times(to)));\r\n    }\r\n\r\n    public Shape toShape(double x, double y, double radius) {\r\n        final Arc2D.Double arc = new Arc2D.Double();\r\n        arc.setArcByCenter(x, y, radius, -counterClockwiseBound.getDegrees(), rangeSize.getDegrees(), Arc2D.PIE);\r\n        return arc;\r\n    }\r\n\r\n    public AbsoluteAngle getCounterClockwiseBound() {\r\n        return counterClockwiseBound;\r\n    }\r\n\r\n    public AbsoluteAngle getClockwiseBound() {\r\n        return counterClockwiseBound == null ? null : counterClockwiseBound.clockwise(getRangeSize());\r\n    }\r\n\r\n    public RelativeAngle getRangeSize() {\r\n        return rangeSize;\r\n    }\r\n}\r\n",
		"id": "EvoSuiteBenchmark/86_at-robots2-j/src/main/java/net/virtualinfinity/atrobots/measures/AngleBracketTest7.java",
		"test_prompt": "// AngleBracketTest7.java\npackage net.virtualinfinity.atrobots.measures;\n\nimport java.awt.*;\nimport java.awt.geom.Arc2D;\nimport java.awt.geom.Ellipse2D;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link AngleBracket}.\n* It contains ten unit test cases for the {@link AngleBracket#subrange(double, double)} method.\n*/\nclass AngleBracketTest7 {"
	},
	{
		"original_code": "// AngleBracket.java\npackage net.virtualinfinity.atrobots.measures;\r\n\r\nimport java.awt.*;\r\nimport java.awt.geom.Arc2D;\r\nimport java.awt.geom.Ellipse2D;\r\n\r\n/**\r\n * Represents a range of angles.\r\n *\r\n * @author Daniel Pitts\r\n */\r\npublic class AngleBracket {\r\n\r\n    private final AbsoluteAngle counterClockwiseBound;\r\n\r\n    private final RelativeAngle rangeSize;\r\n\r\n    private AngleBracket(AbsoluteAngle counterClockwiseBound, AbsoluteAngle clockwiseBound) {\r\n        this.counterClockwiseBound = counterClockwiseBound;\r\n        rangeSize = counterClockwiseBound.getAngleCounterClockwiseTo(clockwiseBound);\r\n    }\r\n\r\n    private AngleBracket(AbsoluteAngle counterClockwiseBound, RelativeAngle rangeSize) {\r\n        this.counterClockwiseBound = counterClockwiseBound;\r\n        this.rangeSize = rangeSize;\r\n    }\r\n\r\n    private AngleBracket() {\r\n        counterClockwiseBound = null;\r\n        rangeSize = RelativeAngle.FULL_CIRCLE;\r\n    }\r\n\r\n    public static AngleBracket around(AbsoluteAngle center, RelativeAngle width) {\r\n        return new AngleBracket(center.counterClockwise(width), width.times(2));\r\n    }\r\n\r\n    public static AngleBracket clockwiseFrom(AbsoluteAngle counterClockwiseBound, RelativeAngle width) {\r\n        return new AngleBracket(counterClockwiseBound, width);\r\n    }\r\n\r\n    public static AngleBracket between(AbsoluteAngle counterClockwiseBound, AbsoluteAngle clockwiseBound) {\r\n        return new AngleBracket(counterClockwiseBound, clockwiseBound);\r\n    }\r\n\r\n    public static AngleBracket all() {\r\n        return new AngleBracket() {\r\n\r\n            @Override\r\n            public boolean contains(AbsoluteAngle angle) {\r\n                return true;\r\n            }\r\n\r\n            @Override\r\n            public Shape toShape(double x, double y, double radius) {\r\n                final Ellipse2D ellipse2D = new Ellipse2D.Double();\r\n                ellipse2D.setFrameFromCenter(x, y, x + (radius), y + (radius));\r\n                return ellipse2D;\r\n            }\r\n        };\r\n    }\r\n\r\n    public boolean contains(AbsoluteAngle angle) {\r\n        return counterClockwiseBound.getAngleCounterClockwiseTo(angle).compareTo(rangeSize) <= 0;\r\n    }\r\n\r\n    public double fractionTo(AbsoluteAngle angle) {\r\n        return counterClockwiseBound.getAngleCounterClockwiseTo(angle).normalize().dividedBy(rangeSize);\r\n    }\r\n\r\n    public AbsoluteAngle randomAngleBetween() {\r\n        return AbsoluteAngle.fromRadians(counterClockwiseBound.getNormalizedRadians() - Math.random() * rangeSize.getRadians());\r\n    }\r\n\r\n    public AngleBracket subrange(double from, double to) {\r\n        return between(counterClockwiseBound.clockwise(getRangeSize().times(from)), counterClockwiseBound.clockwise(getRangeSize().times(to)));\r\n    }\r\n\r\n    public Shape toShape(double x, double y, double radius) {\r\n        final Arc2D.Double arc = new Arc2D.Double();\r\n        arc.setArcByCenter(x, y, radius, -counterClockwiseBound.getDegrees(), rangeSize.getDegrees(), Arc2D.PIE);\r\n        return arc;\r\n    }\r\n\r\n    public AbsoluteAngle getCounterClockwiseBound() {\r\n        return counterClockwiseBound;\r\n    }\r\n\r\n    public AbsoluteAngle getClockwiseBound() {\r\n        return counterClockwiseBound == null ? null : counterClockwiseBound.clockwise(getRangeSize());\r\n    }\r\n\r\n    public RelativeAngle getRangeSize() {\r\n        return rangeSize;\r\n    }\r\n}\r\n",
		"id": "EvoSuiteBenchmark/86_at-robots2-j/src/main/java/net/virtualinfinity/atrobots/measures/AngleBracketTest8.java",
		"test_prompt": "// AngleBracketTest8.java\npackage net.virtualinfinity.atrobots.measures;\n\nimport java.awt.*;\nimport java.awt.geom.Arc2D;\nimport java.awt.geom.Ellipse2D;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link AngleBracket}.\n* It contains ten unit test cases for the {@link AngleBracket#toShape(double, double, double)} method.\n*/\nclass AngleBracketTest8 {"
	},
	{
		"original_code": "// RelativeAngle.java\npackage net.virtualinfinity.atrobots.measures;\r\n\r\n/**\r\n * Represents an amount of rotation.\r\n *\r\n * @author Daniel Pitts\r\n */\r\npublic class RelativeAngle implements Comparable<RelativeAngle> {\r\n\r\n    public static final RelativeAngle HALF_CIRCLE;\r\n\r\n    public static final RelativeAngle FULL_CIRCLE;\r\n\r\n    private static final RelativeAngle[] bygreeTable = new RelativeAngle[256];\r\n\r\n    static {\r\n        for (int bygree = 0; bygree < 256; ++bygree) {\r\n            final double radians = RelativeAngle.bygreesToRadians(bygree);\r\n            bygreeTable[bygree] = new RelativeBygreeAngle(bygree, (byte) bygree, radians, radiansToDegrees(radians));\r\n        }\r\n        HALF_CIRCLE = RelativeAngle.fromBygrees(128);\r\n        FULL_CIRCLE = RelativeAngle.fromBygrees(256);\r\n    }\r\n\r\n    private final double radians;\r\n\r\n    private RelativeAngle(double radians) {\r\n        this.radians = radians;\r\n    }\r\n\r\n    private double cosine() {\r\n        return Math.cos(radians);\r\n    }\r\n\r\n    private double sine() {\r\n        return Math.sin(radians);\r\n    }\r\n\r\n    public static RelativeAngle fromRadians(double radians) {\r\n        return new RelativeAngle(radians);\r\n    }\r\n\r\n    public RelativeAngle plus(RelativeAngle angle) {\r\n        return fromRadians(getRadians() + angle.getRadians());\r\n    }\r\n\r\n    public double getRadians() {\r\n        return radians;\r\n    }\r\n\r\n    public RelativeAngle normalize() {\r\n        if (radians >= Math.PI * 2 || radians < 0) {\r\n            return fromRadians(Math.atan2(sine(), cosine()));\r\n        }\r\n        return this;\r\n    }\r\n\r\n    public int getBygrees() {\r\n        return (int) Math.round(radians * 128 / Math.PI) & 255;\r\n    }\r\n\r\n    public static RelativeAngle fromBygrees(int value) {\r\n        if (value <= 255) {\r\n            if (value >= 0) {\r\n                return bygreeTable[value];\r\n            }\r\n            if (value >= -255) {\r\n                return bygreeTable[-value].negate();\r\n            }\r\n        }\r\n        return new RelativeBygreeAngle(value, (byte) value, bygreesToRadians(value), radiansToDegrees(value));\r\n    }\r\n\r\n    private RelativeAngle negate() {\r\n        return fromRadians(-radians);\r\n    }\r\n\r\n    private static double bygreesToRadians(int value) {\r\n        return value * Math.PI / 128;\r\n    }\r\n\r\n    public byte getSignedBygrees() {\r\n        return (byte) getBygrees();\r\n    }\r\n\r\n    public String toString() {\r\n        return getRadians() + \"r/\" + getBygrees();\r\n    }\r\n\r\n    public int compareTo(RelativeAngle angle) {\r\n        return Double.compare(getRadians(), angle.getRadians());\r\n    }\r\n\r\n    public double getDegrees() {\r\n        return radiansToDegrees(getRadians());\r\n    }\r\n\r\n    private static double radiansToDegrees(double radians) {\r\n        return radians * 180 / Math.PI;\r\n    }\r\n\r\n    public double dividedBy(RelativeAngle relativeAngle) {\r\n        return radians / relativeAngle.radians;\r\n    }\r\n\r\n    boolean isExactBygrees() {\r\n        return false;\r\n    }\r\n\r\n    public RelativeAngle dividedBy(double scale) {\r\n        return fromRadians(radians / scale);\r\n    }\r\n\r\n    public RelativeAngle times(int scale) {\r\n        return fromRadians(radians * scale);\r\n    }\r\n\r\n    public RelativeAngle times(double scale) {\r\n        return fromRadians(radians * scale);\r\n    }\r\n\r\n    private static class RelativeBygreeAngle extends RelativeAngle {\r\n\r\n        private final int bygree;\r\n\r\n        private final byte signedBygree;\r\n\r\n        private final double degrees;\r\n\r\n        public RelativeBygreeAngle(int bygree, byte signedBygree, double radians, double degrees) {\r\n            super(radians);\r\n            this.bygree = bygree;\r\n            this.signedBygree = signedBygree;\r\n            this.degrees = degrees;\r\n        }\r\n\r\n        @Override\r\n        public RelativeAngle normalize() {\r\n            return bygreeTable[bygree & 255];\r\n        }\r\n\r\n        @Override\r\n        public int getBygrees() {\r\n            return bygree;\r\n        }\r\n\r\n        @Override\r\n        public byte getSignedBygrees() {\r\n            return signedBygree;\r\n        }\r\n\r\n        @Override\r\n        public double getDegrees() {\r\n            return degrees;\r\n        }\r\n\r\n        @Override\r\n        boolean isExactBygrees() {\r\n            return true;\r\n        }\r\n\r\n        @Override\r\n        public RelativeAngle times(int scale) {\r\n            return fromBygrees(bygree * scale);\r\n        }\r\n    }\r\n}\r\n",
		"id": "EvoSuiteBenchmark/86_at-robots2-j/src/main/java/net/virtualinfinity/atrobots/measures/RelativeAngleTest0.java",
		"test_prompt": "// RelativeAngleTest0.java\npackage net.virtualinfinity.atrobots.measures;\n\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link RelativeAngle}.\n* It contains ten unit test cases for the {@link RelativeAngle#fromRadians(double)} method.\n*/\nclass RelativeAngleTest0 {"
	},
	{
		"original_code": "// RelativeAngle.java\npackage net.virtualinfinity.atrobots.measures;\r\n\r\n/**\r\n * Represents an amount of rotation.\r\n *\r\n * @author Daniel Pitts\r\n */\r\npublic class RelativeAngle implements Comparable<RelativeAngle> {\r\n\r\n    public static final RelativeAngle HALF_CIRCLE;\r\n\r\n    public static final RelativeAngle FULL_CIRCLE;\r\n\r\n    private static final RelativeAngle[] bygreeTable = new RelativeAngle[256];\r\n\r\n    static {\r\n        for (int bygree = 0; bygree < 256; ++bygree) {\r\n            final double radians = RelativeAngle.bygreesToRadians(bygree);\r\n            bygreeTable[bygree] = new RelativeBygreeAngle(bygree, (byte) bygree, radians, radiansToDegrees(radians));\r\n        }\r\n        HALF_CIRCLE = RelativeAngle.fromBygrees(128);\r\n        FULL_CIRCLE = RelativeAngle.fromBygrees(256);\r\n    }\r\n\r\n    private final double radians;\r\n\r\n    private RelativeAngle(double radians) {\r\n        this.radians = radians;\r\n    }\r\n\r\n    private double cosine() {\r\n        return Math.cos(radians);\r\n    }\r\n\r\n    private double sine() {\r\n        return Math.sin(radians);\r\n    }\r\n\r\n    public static RelativeAngle fromRadians(double radians) {\r\n        return new RelativeAngle(radians);\r\n    }\r\n\r\n    public RelativeAngle plus(RelativeAngle angle) {\r\n        return fromRadians(getRadians() + angle.getRadians());\r\n    }\r\n\r\n    public double getRadians() {\r\n        return radians;\r\n    }\r\n\r\n    public RelativeAngle normalize() {\r\n        if (radians >= Math.PI * 2 || radians < 0) {\r\n            return fromRadians(Math.atan2(sine(), cosine()));\r\n        }\r\n        return this;\r\n    }\r\n\r\n    public int getBygrees() {\r\n        return (int) Math.round(radians * 128 / Math.PI) & 255;\r\n    }\r\n\r\n    public static RelativeAngle fromBygrees(int value) {\r\n        if (value <= 255) {\r\n            if (value >= 0) {\r\n                return bygreeTable[value];\r\n            }\r\n            if (value >= -255) {\r\n                return bygreeTable[-value].negate();\r\n            }\r\n        }\r\n        return new RelativeBygreeAngle(value, (byte) value, bygreesToRadians(value), radiansToDegrees(value));\r\n    }\r\n\r\n    private RelativeAngle negate() {\r\n        return fromRadians(-radians);\r\n    }\r\n\r\n    private static double bygreesToRadians(int value) {\r\n        return value * Math.PI / 128;\r\n    }\r\n\r\n    public byte getSignedBygrees() {\r\n        return (byte) getBygrees();\r\n    }\r\n\r\n    public String toString() {\r\n        return getRadians() + \"r/\" + getBygrees();\r\n    }\r\n\r\n    public int compareTo(RelativeAngle angle) {\r\n        return Double.compare(getRadians(), angle.getRadians());\r\n    }\r\n\r\n    public double getDegrees() {\r\n        return radiansToDegrees(getRadians());\r\n    }\r\n\r\n    private static double radiansToDegrees(double radians) {\r\n        return radians * 180 / Math.PI;\r\n    }\r\n\r\n    public double dividedBy(RelativeAngle relativeAngle) {\r\n        return radians / relativeAngle.radians;\r\n    }\r\n\r\n    boolean isExactBygrees() {\r\n        return false;\r\n    }\r\n\r\n    public RelativeAngle dividedBy(double scale) {\r\n        return fromRadians(radians / scale);\r\n    }\r\n\r\n    public RelativeAngle times(int scale) {\r\n        return fromRadians(radians * scale);\r\n    }\r\n\r\n    public RelativeAngle times(double scale) {\r\n        return fromRadians(radians * scale);\r\n    }\r\n\r\n    private static class RelativeBygreeAngle extends RelativeAngle {\r\n\r\n        private final int bygree;\r\n\r\n        private final byte signedBygree;\r\n\r\n        private final double degrees;\r\n\r\n        public RelativeBygreeAngle(int bygree, byte signedBygree, double radians, double degrees) {\r\n            super(radians);\r\n            this.bygree = bygree;\r\n            this.signedBygree = signedBygree;\r\n            this.degrees = degrees;\r\n        }\r\n\r\n        @Override\r\n        public RelativeAngle normalize() {\r\n            return bygreeTable[bygree & 255];\r\n        }\r\n\r\n        @Override\r\n        public int getBygrees() {\r\n            return bygree;\r\n        }\r\n\r\n        @Override\r\n        public byte getSignedBygrees() {\r\n            return signedBygree;\r\n        }\r\n\r\n        @Override\r\n        public double getDegrees() {\r\n            return degrees;\r\n        }\r\n\r\n        @Override\r\n        boolean isExactBygrees() {\r\n            return true;\r\n        }\r\n\r\n        @Override\r\n        public RelativeAngle times(int scale) {\r\n            return fromBygrees(bygree * scale);\r\n        }\r\n    }\r\n}\r\n",
		"id": "EvoSuiteBenchmark/86_at-robots2-j/src/main/java/net/virtualinfinity/atrobots/measures/RelativeAngleTest1.java",
		"test_prompt": "// RelativeAngleTest1.java\npackage net.virtualinfinity.atrobots.measures;\n\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link RelativeAngle}.\n* It contains ten unit test cases for the {@link RelativeAngle#plus(RelativeAngle)} method.\n*/\nclass RelativeAngleTest1 {"
	},
	{
		"original_code": "// RelativeAngle.java\npackage net.virtualinfinity.atrobots.measures;\r\n\r\n/**\r\n * Represents an amount of rotation.\r\n *\r\n * @author Daniel Pitts\r\n */\r\npublic class RelativeAngle implements Comparable<RelativeAngle> {\r\n\r\n    public static final RelativeAngle HALF_CIRCLE;\r\n\r\n    public static final RelativeAngle FULL_CIRCLE;\r\n\r\n    private static final RelativeAngle[] bygreeTable = new RelativeAngle[256];\r\n\r\n    static {\r\n        for (int bygree = 0; bygree < 256; ++bygree) {\r\n            final double radians = RelativeAngle.bygreesToRadians(bygree);\r\n            bygreeTable[bygree] = new RelativeBygreeAngle(bygree, (byte) bygree, radians, radiansToDegrees(radians));\r\n        }\r\n        HALF_CIRCLE = RelativeAngle.fromBygrees(128);\r\n        FULL_CIRCLE = RelativeAngle.fromBygrees(256);\r\n    }\r\n\r\n    private final double radians;\r\n\r\n    private RelativeAngle(double radians) {\r\n        this.radians = radians;\r\n    }\r\n\r\n    private double cosine() {\r\n        return Math.cos(radians);\r\n    }\r\n\r\n    private double sine() {\r\n        return Math.sin(radians);\r\n    }\r\n\r\n    public static RelativeAngle fromRadians(double radians) {\r\n        return new RelativeAngle(radians);\r\n    }\r\n\r\n    public RelativeAngle plus(RelativeAngle angle) {\r\n        return fromRadians(getRadians() + angle.getRadians());\r\n    }\r\n\r\n    public double getRadians() {\r\n        return radians;\r\n    }\r\n\r\n    public RelativeAngle normalize() {\r\n        if (radians >= Math.PI * 2 || radians < 0) {\r\n            return fromRadians(Math.atan2(sine(), cosine()));\r\n        }\r\n        return this;\r\n    }\r\n\r\n    public int getBygrees() {\r\n        return (int) Math.round(radians * 128 / Math.PI) & 255;\r\n    }\r\n\r\n    public static RelativeAngle fromBygrees(int value) {\r\n        if (value <= 255) {\r\n            if (value >= 0) {\r\n                return bygreeTable[value];\r\n            }\r\n            if (value >= -255) {\r\n                return bygreeTable[-value].negate();\r\n            }\r\n        }\r\n        return new RelativeBygreeAngle(value, (byte) value, bygreesToRadians(value), radiansToDegrees(value));\r\n    }\r\n\r\n    private RelativeAngle negate() {\r\n        return fromRadians(-radians);\r\n    }\r\n\r\n    private static double bygreesToRadians(int value) {\r\n        return value * Math.PI / 128;\r\n    }\r\n\r\n    public byte getSignedBygrees() {\r\n        return (byte) getBygrees();\r\n    }\r\n\r\n    public String toString() {\r\n        return getRadians() + \"r/\" + getBygrees();\r\n    }\r\n\r\n    public int compareTo(RelativeAngle angle) {\r\n        return Double.compare(getRadians(), angle.getRadians());\r\n    }\r\n\r\n    public double getDegrees() {\r\n        return radiansToDegrees(getRadians());\r\n    }\r\n\r\n    private static double radiansToDegrees(double radians) {\r\n        return radians * 180 / Math.PI;\r\n    }\r\n\r\n    public double dividedBy(RelativeAngle relativeAngle) {\r\n        return radians / relativeAngle.radians;\r\n    }\r\n\r\n    boolean isExactBygrees() {\r\n        return false;\r\n    }\r\n\r\n    public RelativeAngle dividedBy(double scale) {\r\n        return fromRadians(radians / scale);\r\n    }\r\n\r\n    public RelativeAngle times(int scale) {\r\n        return fromRadians(radians * scale);\r\n    }\r\n\r\n    public RelativeAngle times(double scale) {\r\n        return fromRadians(radians * scale);\r\n    }\r\n\r\n    private static class RelativeBygreeAngle extends RelativeAngle {\r\n\r\n        private final int bygree;\r\n\r\n        private final byte signedBygree;\r\n\r\n        private final double degrees;\r\n\r\n        public RelativeBygreeAngle(int bygree, byte signedBygree, double radians, double degrees) {\r\n            super(radians);\r\n            this.bygree = bygree;\r\n            this.signedBygree = signedBygree;\r\n            this.degrees = degrees;\r\n        }\r\n\r\n        @Override\r\n        public RelativeAngle normalize() {\r\n            return bygreeTable[bygree & 255];\r\n        }\r\n\r\n        @Override\r\n        public int getBygrees() {\r\n            return bygree;\r\n        }\r\n\r\n        @Override\r\n        public byte getSignedBygrees() {\r\n            return signedBygree;\r\n        }\r\n\r\n        @Override\r\n        public double getDegrees() {\r\n            return degrees;\r\n        }\r\n\r\n        @Override\r\n        boolean isExactBygrees() {\r\n            return true;\r\n        }\r\n\r\n        @Override\r\n        public RelativeAngle times(int scale) {\r\n            return fromBygrees(bygree * scale);\r\n        }\r\n    }\r\n}\r\n",
		"id": "EvoSuiteBenchmark/86_at-robots2-j/src/main/java/net/virtualinfinity/atrobots/measures/RelativeAngleTest2.java",
		"test_prompt": "// RelativeAngleTest2.java\npackage net.virtualinfinity.atrobots.measures;\n\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link RelativeAngle}.\n* It contains ten unit test cases for the {@link RelativeAngle#normalize()} method.\n*/\nclass RelativeAngleTest2 {"
	},
	{
		"original_code": "// RelativeAngle.java\npackage net.virtualinfinity.atrobots.measures;\r\n\r\n/**\r\n * Represents an amount of rotation.\r\n *\r\n * @author Daniel Pitts\r\n */\r\npublic class RelativeAngle implements Comparable<RelativeAngle> {\r\n\r\n    public static final RelativeAngle HALF_CIRCLE;\r\n\r\n    public static final RelativeAngle FULL_CIRCLE;\r\n\r\n    private static final RelativeAngle[] bygreeTable = new RelativeAngle[256];\r\n\r\n    static {\r\n        for (int bygree = 0; bygree < 256; ++bygree) {\r\n            final double radians = RelativeAngle.bygreesToRadians(bygree);\r\n            bygreeTable[bygree] = new RelativeBygreeAngle(bygree, (byte) bygree, radians, radiansToDegrees(radians));\r\n        }\r\n        HALF_CIRCLE = RelativeAngle.fromBygrees(128);\r\n        FULL_CIRCLE = RelativeAngle.fromBygrees(256);\r\n    }\r\n\r\n    private final double radians;\r\n\r\n    private RelativeAngle(double radians) {\r\n        this.radians = radians;\r\n    }\r\n\r\n    private double cosine() {\r\n        return Math.cos(radians);\r\n    }\r\n\r\n    private double sine() {\r\n        return Math.sin(radians);\r\n    }\r\n\r\n    public static RelativeAngle fromRadians(double radians) {\r\n        return new RelativeAngle(radians);\r\n    }\r\n\r\n    public RelativeAngle plus(RelativeAngle angle) {\r\n        return fromRadians(getRadians() + angle.getRadians());\r\n    }\r\n\r\n    public double getRadians() {\r\n        return radians;\r\n    }\r\n\r\n    public RelativeAngle normalize() {\r\n        if (radians >= Math.PI * 2 || radians < 0) {\r\n            return fromRadians(Math.atan2(sine(), cosine()));\r\n        }\r\n        return this;\r\n    }\r\n\r\n    public int getBygrees() {\r\n        return (int) Math.round(radians * 128 / Math.PI) & 255;\r\n    }\r\n\r\n    public static RelativeAngle fromBygrees(int value) {\r\n        if (value <= 255) {\r\n            if (value >= 0) {\r\n                return bygreeTable[value];\r\n            }\r\n            if (value >= -255) {\r\n                return bygreeTable[-value].negate();\r\n            }\r\n        }\r\n        return new RelativeBygreeAngle(value, (byte) value, bygreesToRadians(value), radiansToDegrees(value));\r\n    }\r\n\r\n    private RelativeAngle negate() {\r\n        return fromRadians(-radians);\r\n    }\r\n\r\n    private static double bygreesToRadians(int value) {\r\n        return value * Math.PI / 128;\r\n    }\r\n\r\n    public byte getSignedBygrees() {\r\n        return (byte) getBygrees();\r\n    }\r\n\r\n    public String toString() {\r\n        return getRadians() + \"r/\" + getBygrees();\r\n    }\r\n\r\n    public int compareTo(RelativeAngle angle) {\r\n        return Double.compare(getRadians(), angle.getRadians());\r\n    }\r\n\r\n    public double getDegrees() {\r\n        return radiansToDegrees(getRadians());\r\n    }\r\n\r\n    private static double radiansToDegrees(double radians) {\r\n        return radians * 180 / Math.PI;\r\n    }\r\n\r\n    public double dividedBy(RelativeAngle relativeAngle) {\r\n        return radians / relativeAngle.radians;\r\n    }\r\n\r\n    boolean isExactBygrees() {\r\n        return false;\r\n    }\r\n\r\n    public RelativeAngle dividedBy(double scale) {\r\n        return fromRadians(radians / scale);\r\n    }\r\n\r\n    public RelativeAngle times(int scale) {\r\n        return fromRadians(radians * scale);\r\n    }\r\n\r\n    public RelativeAngle times(double scale) {\r\n        return fromRadians(radians * scale);\r\n    }\r\n\r\n    private static class RelativeBygreeAngle extends RelativeAngle {\r\n\r\n        private final int bygree;\r\n\r\n        private final byte signedBygree;\r\n\r\n        private final double degrees;\r\n\r\n        public RelativeBygreeAngle(int bygree, byte signedBygree, double radians, double degrees) {\r\n            super(radians);\r\n            this.bygree = bygree;\r\n            this.signedBygree = signedBygree;\r\n            this.degrees = degrees;\r\n        }\r\n\r\n        @Override\r\n        public RelativeAngle normalize() {\r\n            return bygreeTable[bygree & 255];\r\n        }\r\n\r\n        @Override\r\n        public int getBygrees() {\r\n            return bygree;\r\n        }\r\n\r\n        @Override\r\n        public byte getSignedBygrees() {\r\n            return signedBygree;\r\n        }\r\n\r\n        @Override\r\n        public double getDegrees() {\r\n            return degrees;\r\n        }\r\n\r\n        @Override\r\n        boolean isExactBygrees() {\r\n            return true;\r\n        }\r\n\r\n        @Override\r\n        public RelativeAngle times(int scale) {\r\n            return fromBygrees(bygree * scale);\r\n        }\r\n    }\r\n}\r\n",
		"id": "EvoSuiteBenchmark/86_at-robots2-j/src/main/java/net/virtualinfinity/atrobots/measures/RelativeAngleTest3.java",
		"test_prompt": "// RelativeAngleTest3.java\npackage net.virtualinfinity.atrobots.measures;\n\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link RelativeAngle}.\n* It contains ten unit test cases for the {@link RelativeAngle#fromBygrees(int)} method.\n*/\nclass RelativeAngleTest3 {"
	},
	{
		"original_code": "// RelativeAngle.java\npackage net.virtualinfinity.atrobots.measures;\r\n\r\n/**\r\n * Represents an amount of rotation.\r\n *\r\n * @author Daniel Pitts\r\n */\r\npublic class RelativeAngle implements Comparable<RelativeAngle> {\r\n\r\n    public static final RelativeAngle HALF_CIRCLE;\r\n\r\n    public static final RelativeAngle FULL_CIRCLE;\r\n\r\n    private static final RelativeAngle[] bygreeTable = new RelativeAngle[256];\r\n\r\n    static {\r\n        for (int bygree = 0; bygree < 256; ++bygree) {\r\n            final double radians = RelativeAngle.bygreesToRadians(bygree);\r\n            bygreeTable[bygree] = new RelativeBygreeAngle(bygree, (byte) bygree, radians, radiansToDegrees(radians));\r\n        }\r\n        HALF_CIRCLE = RelativeAngle.fromBygrees(128);\r\n        FULL_CIRCLE = RelativeAngle.fromBygrees(256);\r\n    }\r\n\r\n    private final double radians;\r\n\r\n    private RelativeAngle(double radians) {\r\n        this.radians = radians;\r\n    }\r\n\r\n    private double cosine() {\r\n        return Math.cos(radians);\r\n    }\r\n\r\n    private double sine() {\r\n        return Math.sin(radians);\r\n    }\r\n\r\n    public static RelativeAngle fromRadians(double radians) {\r\n        return new RelativeAngle(radians);\r\n    }\r\n\r\n    public RelativeAngle plus(RelativeAngle angle) {\r\n        return fromRadians(getRadians() + angle.getRadians());\r\n    }\r\n\r\n    public double getRadians() {\r\n        return radians;\r\n    }\r\n\r\n    public RelativeAngle normalize() {\r\n        if (radians >= Math.PI * 2 || radians < 0) {\r\n            return fromRadians(Math.atan2(sine(), cosine()));\r\n        }\r\n        return this;\r\n    }\r\n\r\n    public int getBygrees() {\r\n        return (int) Math.round(radians * 128 / Math.PI) & 255;\r\n    }\r\n\r\n    public static RelativeAngle fromBygrees(int value) {\r\n        if (value <= 255) {\r\n            if (value >= 0) {\r\n                return bygreeTable[value];\r\n            }\r\n            if (value >= -255) {\r\n                return bygreeTable[-value].negate();\r\n            }\r\n        }\r\n        return new RelativeBygreeAngle(value, (byte) value, bygreesToRadians(value), radiansToDegrees(value));\r\n    }\r\n\r\n    private RelativeAngle negate() {\r\n        return fromRadians(-radians);\r\n    }\r\n\r\n    private static double bygreesToRadians(int value) {\r\n        return value * Math.PI / 128;\r\n    }\r\n\r\n    public byte getSignedBygrees() {\r\n        return (byte) getBygrees();\r\n    }\r\n\r\n    public String toString() {\r\n        return getRadians() + \"r/\" + getBygrees();\r\n    }\r\n\r\n    public int compareTo(RelativeAngle angle) {\r\n        return Double.compare(getRadians(), angle.getRadians());\r\n    }\r\n\r\n    public double getDegrees() {\r\n        return radiansToDegrees(getRadians());\r\n    }\r\n\r\n    private static double radiansToDegrees(double radians) {\r\n        return radians * 180 / Math.PI;\r\n    }\r\n\r\n    public double dividedBy(RelativeAngle relativeAngle) {\r\n        return radians / relativeAngle.radians;\r\n    }\r\n\r\n    boolean isExactBygrees() {\r\n        return false;\r\n    }\r\n\r\n    public RelativeAngle dividedBy(double scale) {\r\n        return fromRadians(radians / scale);\r\n    }\r\n\r\n    public RelativeAngle times(int scale) {\r\n        return fromRadians(radians * scale);\r\n    }\r\n\r\n    public RelativeAngle times(double scale) {\r\n        return fromRadians(radians * scale);\r\n    }\r\n\r\n    private static class RelativeBygreeAngle extends RelativeAngle {\r\n\r\n        private final int bygree;\r\n\r\n        private final byte signedBygree;\r\n\r\n        private final double degrees;\r\n\r\n        public RelativeBygreeAngle(int bygree, byte signedBygree, double radians, double degrees) {\r\n            super(radians);\r\n            this.bygree = bygree;\r\n            this.signedBygree = signedBygree;\r\n            this.degrees = degrees;\r\n        }\r\n\r\n        @Override\r\n        public RelativeAngle normalize() {\r\n            return bygreeTable[bygree & 255];\r\n        }\r\n\r\n        @Override\r\n        public int getBygrees() {\r\n            return bygree;\r\n        }\r\n\r\n        @Override\r\n        public byte getSignedBygrees() {\r\n            return signedBygree;\r\n        }\r\n\r\n        @Override\r\n        public double getDegrees() {\r\n            return degrees;\r\n        }\r\n\r\n        @Override\r\n        boolean isExactBygrees() {\r\n            return true;\r\n        }\r\n\r\n        @Override\r\n        public RelativeAngle times(int scale) {\r\n            return fromBygrees(bygree * scale);\r\n        }\r\n    }\r\n}\r\n",
		"id": "EvoSuiteBenchmark/86_at-robots2-j/src/main/java/net/virtualinfinity/atrobots/measures/RelativeAngleTest4.java",
		"test_prompt": "// RelativeAngleTest4.java\npackage net.virtualinfinity.atrobots.measures;\n\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link RelativeAngle}.\n* It contains ten unit test cases for the {@link RelativeAngle#compareTo(RelativeAngle)} method.\n*/\nclass RelativeAngleTest4 {"
	},
	{
		"original_code": "// RelativeAngle.java\npackage net.virtualinfinity.atrobots.measures;\r\n\r\n/**\r\n * Represents an amount of rotation.\r\n *\r\n * @author Daniel Pitts\r\n */\r\npublic class RelativeAngle implements Comparable<RelativeAngle> {\r\n\r\n    public static final RelativeAngle HALF_CIRCLE;\r\n\r\n    public static final RelativeAngle FULL_CIRCLE;\r\n\r\n    private static final RelativeAngle[] bygreeTable = new RelativeAngle[256];\r\n\r\n    static {\r\n        for (int bygree = 0; bygree < 256; ++bygree) {\r\n            final double radians = RelativeAngle.bygreesToRadians(bygree);\r\n            bygreeTable[bygree] = new RelativeBygreeAngle(bygree, (byte) bygree, radians, radiansToDegrees(radians));\r\n        }\r\n        HALF_CIRCLE = RelativeAngle.fromBygrees(128);\r\n        FULL_CIRCLE = RelativeAngle.fromBygrees(256);\r\n    }\r\n\r\n    private final double radians;\r\n\r\n    private RelativeAngle(double radians) {\r\n        this.radians = radians;\r\n    }\r\n\r\n    private double cosine() {\r\n        return Math.cos(radians);\r\n    }\r\n\r\n    private double sine() {\r\n        return Math.sin(radians);\r\n    }\r\n\r\n    public static RelativeAngle fromRadians(double radians) {\r\n        return new RelativeAngle(radians);\r\n    }\r\n\r\n    public RelativeAngle plus(RelativeAngle angle) {\r\n        return fromRadians(getRadians() + angle.getRadians());\r\n    }\r\n\r\n    public double getRadians() {\r\n        return radians;\r\n    }\r\n\r\n    public RelativeAngle normalize() {\r\n        if (radians >= Math.PI * 2 || radians < 0) {\r\n            return fromRadians(Math.atan2(sine(), cosine()));\r\n        }\r\n        return this;\r\n    }\r\n\r\n    public int getBygrees() {\r\n        return (int) Math.round(radians * 128 / Math.PI) & 255;\r\n    }\r\n\r\n    public static RelativeAngle fromBygrees(int value) {\r\n        if (value <= 255) {\r\n            if (value >= 0) {\r\n                return bygreeTable[value];\r\n            }\r\n            if (value >= -255) {\r\n                return bygreeTable[-value].negate();\r\n            }\r\n        }\r\n        return new RelativeBygreeAngle(value, (byte) value, bygreesToRadians(value), radiansToDegrees(value));\r\n    }\r\n\r\n    private RelativeAngle negate() {\r\n        return fromRadians(-radians);\r\n    }\r\n\r\n    private static double bygreesToRadians(int value) {\r\n        return value * Math.PI / 128;\r\n    }\r\n\r\n    public byte getSignedBygrees() {\r\n        return (byte) getBygrees();\r\n    }\r\n\r\n    public String toString() {\r\n        return getRadians() + \"r/\" + getBygrees();\r\n    }\r\n\r\n    public int compareTo(RelativeAngle angle) {\r\n        return Double.compare(getRadians(), angle.getRadians());\r\n    }\r\n\r\n    public double getDegrees() {\r\n        return radiansToDegrees(getRadians());\r\n    }\r\n\r\n    private static double radiansToDegrees(double radians) {\r\n        return radians * 180 / Math.PI;\r\n    }\r\n\r\n    public double dividedBy(RelativeAngle relativeAngle) {\r\n        return radians / relativeAngle.radians;\r\n    }\r\n\r\n    boolean isExactBygrees() {\r\n        return false;\r\n    }\r\n\r\n    public RelativeAngle dividedBy(double scale) {\r\n        return fromRadians(radians / scale);\r\n    }\r\n\r\n    public RelativeAngle times(int scale) {\r\n        return fromRadians(radians * scale);\r\n    }\r\n\r\n    public RelativeAngle times(double scale) {\r\n        return fromRadians(radians * scale);\r\n    }\r\n\r\n    private static class RelativeBygreeAngle extends RelativeAngle {\r\n\r\n        private final int bygree;\r\n\r\n        private final byte signedBygree;\r\n\r\n        private final double degrees;\r\n\r\n        public RelativeBygreeAngle(int bygree, byte signedBygree, double radians, double degrees) {\r\n            super(radians);\r\n            this.bygree = bygree;\r\n            this.signedBygree = signedBygree;\r\n            this.degrees = degrees;\r\n        }\r\n\r\n        @Override\r\n        public RelativeAngle normalize() {\r\n            return bygreeTable[bygree & 255];\r\n        }\r\n\r\n        @Override\r\n        public int getBygrees() {\r\n            return bygree;\r\n        }\r\n\r\n        @Override\r\n        public byte getSignedBygrees() {\r\n            return signedBygree;\r\n        }\r\n\r\n        @Override\r\n        public double getDegrees() {\r\n            return degrees;\r\n        }\r\n\r\n        @Override\r\n        boolean isExactBygrees() {\r\n            return true;\r\n        }\r\n\r\n        @Override\r\n        public RelativeAngle times(int scale) {\r\n            return fromBygrees(bygree * scale);\r\n        }\r\n    }\r\n}\r\n",
		"id": "EvoSuiteBenchmark/86_at-robots2-j/src/main/java/net/virtualinfinity/atrobots/measures/RelativeAngleTest5.java",
		"test_prompt": "// RelativeAngleTest5.java\npackage net.virtualinfinity.atrobots.measures;\n\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link RelativeAngle}.\n* It contains ten unit test cases for the {@link RelativeAngle#dividedBy(RelativeAngle)} method.\n*/\nclass RelativeAngleTest5 {"
	},
	{
		"original_code": "// RelativeAngle.java\npackage net.virtualinfinity.atrobots.measures;\r\n\r\n/**\r\n * Represents an amount of rotation.\r\n *\r\n * @author Daniel Pitts\r\n */\r\npublic class RelativeAngle implements Comparable<RelativeAngle> {\r\n\r\n    public static final RelativeAngle HALF_CIRCLE;\r\n\r\n    public static final RelativeAngle FULL_CIRCLE;\r\n\r\n    private static final RelativeAngle[] bygreeTable = new RelativeAngle[256];\r\n\r\n    static {\r\n        for (int bygree = 0; bygree < 256; ++bygree) {\r\n            final double radians = RelativeAngle.bygreesToRadians(bygree);\r\n            bygreeTable[bygree] = new RelativeBygreeAngle(bygree, (byte) bygree, radians, radiansToDegrees(radians));\r\n        }\r\n        HALF_CIRCLE = RelativeAngle.fromBygrees(128);\r\n        FULL_CIRCLE = RelativeAngle.fromBygrees(256);\r\n    }\r\n\r\n    private final double radians;\r\n\r\n    private RelativeAngle(double radians) {\r\n        this.radians = radians;\r\n    }\r\n\r\n    private double cosine() {\r\n        return Math.cos(radians);\r\n    }\r\n\r\n    private double sine() {\r\n        return Math.sin(radians);\r\n    }\r\n\r\n    public static RelativeAngle fromRadians(double radians) {\r\n        return new RelativeAngle(radians);\r\n    }\r\n\r\n    public RelativeAngle plus(RelativeAngle angle) {\r\n        return fromRadians(getRadians() + angle.getRadians());\r\n    }\r\n\r\n    public double getRadians() {\r\n        return radians;\r\n    }\r\n\r\n    public RelativeAngle normalize() {\r\n        if (radians >= Math.PI * 2 || radians < 0) {\r\n            return fromRadians(Math.atan2(sine(), cosine()));\r\n        }\r\n        return this;\r\n    }\r\n\r\n    public int getBygrees() {\r\n        return (int) Math.round(radians * 128 / Math.PI) & 255;\r\n    }\r\n\r\n    public static RelativeAngle fromBygrees(int value) {\r\n        if (value <= 255) {\r\n            if (value >= 0) {\r\n                return bygreeTable[value];\r\n            }\r\n            if (value >= -255) {\r\n                return bygreeTable[-value].negate();\r\n            }\r\n        }\r\n        return new RelativeBygreeAngle(value, (byte) value, bygreesToRadians(value), radiansToDegrees(value));\r\n    }\r\n\r\n    private RelativeAngle negate() {\r\n        return fromRadians(-radians);\r\n    }\r\n\r\n    private static double bygreesToRadians(int value) {\r\n        return value * Math.PI / 128;\r\n    }\r\n\r\n    public byte getSignedBygrees() {\r\n        return (byte) getBygrees();\r\n    }\r\n\r\n    public String toString() {\r\n        return getRadians() + \"r/\" + getBygrees();\r\n    }\r\n\r\n    public int compareTo(RelativeAngle angle) {\r\n        return Double.compare(getRadians(), angle.getRadians());\r\n    }\r\n\r\n    public double getDegrees() {\r\n        return radiansToDegrees(getRadians());\r\n    }\r\n\r\n    private static double radiansToDegrees(double radians) {\r\n        return radians * 180 / Math.PI;\r\n    }\r\n\r\n    public double dividedBy(RelativeAngle relativeAngle) {\r\n        return radians / relativeAngle.radians;\r\n    }\r\n\r\n    boolean isExactBygrees() {\r\n        return false;\r\n    }\r\n\r\n    public RelativeAngle dividedBy(double scale) {\r\n        return fromRadians(radians / scale);\r\n    }\r\n\r\n    public RelativeAngle times(int scale) {\r\n        return fromRadians(radians * scale);\r\n    }\r\n\r\n    public RelativeAngle times(double scale) {\r\n        return fromRadians(radians * scale);\r\n    }\r\n\r\n    private static class RelativeBygreeAngle extends RelativeAngle {\r\n\r\n        private final int bygree;\r\n\r\n        private final byte signedBygree;\r\n\r\n        private final double degrees;\r\n\r\n        public RelativeBygreeAngle(int bygree, byte signedBygree, double radians, double degrees) {\r\n            super(radians);\r\n            this.bygree = bygree;\r\n            this.signedBygree = signedBygree;\r\n            this.degrees = degrees;\r\n        }\r\n\r\n        @Override\r\n        public RelativeAngle normalize() {\r\n            return bygreeTable[bygree & 255];\r\n        }\r\n\r\n        @Override\r\n        public int getBygrees() {\r\n            return bygree;\r\n        }\r\n\r\n        @Override\r\n        public byte getSignedBygrees() {\r\n            return signedBygree;\r\n        }\r\n\r\n        @Override\r\n        public double getDegrees() {\r\n            return degrees;\r\n        }\r\n\r\n        @Override\r\n        boolean isExactBygrees() {\r\n            return true;\r\n        }\r\n\r\n        @Override\r\n        public RelativeAngle times(int scale) {\r\n            return fromBygrees(bygree * scale);\r\n        }\r\n    }\r\n}\r\n",
		"id": "EvoSuiteBenchmark/86_at-robots2-j/src/main/java/net/virtualinfinity/atrobots/measures/RelativeAngleTest6.java",
		"test_prompt": "// RelativeAngleTest6.java\npackage net.virtualinfinity.atrobots.measures;\n\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link RelativeAngle}.\n* It contains ten unit test cases for the {@link RelativeAngle#dividedBy(double)} method.\n*/\nclass RelativeAngleTest6 {"
	},
	{
		"original_code": "// RelativeAngle.java\npackage net.virtualinfinity.atrobots.measures;\r\n\r\n/**\r\n * Represents an amount of rotation.\r\n *\r\n * @author Daniel Pitts\r\n */\r\npublic class RelativeAngle implements Comparable<RelativeAngle> {\r\n\r\n    public static final RelativeAngle HALF_CIRCLE;\r\n\r\n    public static final RelativeAngle FULL_CIRCLE;\r\n\r\n    private static final RelativeAngle[] bygreeTable = new RelativeAngle[256];\r\n\r\n    static {\r\n        for (int bygree = 0; bygree < 256; ++bygree) {\r\n            final double radians = RelativeAngle.bygreesToRadians(bygree);\r\n            bygreeTable[bygree] = new RelativeBygreeAngle(bygree, (byte) bygree, radians, radiansToDegrees(radians));\r\n        }\r\n        HALF_CIRCLE = RelativeAngle.fromBygrees(128);\r\n        FULL_CIRCLE = RelativeAngle.fromBygrees(256);\r\n    }\r\n\r\n    private final double radians;\r\n\r\n    private RelativeAngle(double radians) {\r\n        this.radians = radians;\r\n    }\r\n\r\n    private double cosine() {\r\n        return Math.cos(radians);\r\n    }\r\n\r\n    private double sine() {\r\n        return Math.sin(radians);\r\n    }\r\n\r\n    public static RelativeAngle fromRadians(double radians) {\r\n        return new RelativeAngle(radians);\r\n    }\r\n\r\n    public RelativeAngle plus(RelativeAngle angle) {\r\n        return fromRadians(getRadians() + angle.getRadians());\r\n    }\r\n\r\n    public double getRadians() {\r\n        return radians;\r\n    }\r\n\r\n    public RelativeAngle normalize() {\r\n        if (radians >= Math.PI * 2 || radians < 0) {\r\n            return fromRadians(Math.atan2(sine(), cosine()));\r\n        }\r\n        return this;\r\n    }\r\n\r\n    public int getBygrees() {\r\n        return (int) Math.round(radians * 128 / Math.PI) & 255;\r\n    }\r\n\r\n    public static RelativeAngle fromBygrees(int value) {\r\n        if (value <= 255) {\r\n            if (value >= 0) {\r\n                return bygreeTable[value];\r\n            }\r\n            if (value >= -255) {\r\n                return bygreeTable[-value].negate();\r\n            }\r\n        }\r\n        return new RelativeBygreeAngle(value, (byte) value, bygreesToRadians(value), radiansToDegrees(value));\r\n    }\r\n\r\n    private RelativeAngle negate() {\r\n        return fromRadians(-radians);\r\n    }\r\n\r\n    private static double bygreesToRadians(int value) {\r\n        return value * Math.PI / 128;\r\n    }\r\n\r\n    public byte getSignedBygrees() {\r\n        return (byte) getBygrees();\r\n    }\r\n\r\n    public String toString() {\r\n        return getRadians() + \"r/\" + getBygrees();\r\n    }\r\n\r\n    public int compareTo(RelativeAngle angle) {\r\n        return Double.compare(getRadians(), angle.getRadians());\r\n    }\r\n\r\n    public double getDegrees() {\r\n        return radiansToDegrees(getRadians());\r\n    }\r\n\r\n    private static double radiansToDegrees(double radians) {\r\n        return radians * 180 / Math.PI;\r\n    }\r\n\r\n    public double dividedBy(RelativeAngle relativeAngle) {\r\n        return radians / relativeAngle.radians;\r\n    }\r\n\r\n    boolean isExactBygrees() {\r\n        return false;\r\n    }\r\n\r\n    public RelativeAngle dividedBy(double scale) {\r\n        return fromRadians(radians / scale);\r\n    }\r\n\r\n    public RelativeAngle times(int scale) {\r\n        return fromRadians(radians * scale);\r\n    }\r\n\r\n    public RelativeAngle times(double scale) {\r\n        return fromRadians(radians * scale);\r\n    }\r\n\r\n    private static class RelativeBygreeAngle extends RelativeAngle {\r\n\r\n        private final int bygree;\r\n\r\n        private final byte signedBygree;\r\n\r\n        private final double degrees;\r\n\r\n        public RelativeBygreeAngle(int bygree, byte signedBygree, double radians, double degrees) {\r\n            super(radians);\r\n            this.bygree = bygree;\r\n            this.signedBygree = signedBygree;\r\n            this.degrees = degrees;\r\n        }\r\n\r\n        @Override\r\n        public RelativeAngle normalize() {\r\n            return bygreeTable[bygree & 255];\r\n        }\r\n\r\n        @Override\r\n        public int getBygrees() {\r\n            return bygree;\r\n        }\r\n\r\n        @Override\r\n        public byte getSignedBygrees() {\r\n            return signedBygree;\r\n        }\r\n\r\n        @Override\r\n        public double getDegrees() {\r\n            return degrees;\r\n        }\r\n\r\n        @Override\r\n        boolean isExactBygrees() {\r\n            return true;\r\n        }\r\n\r\n        @Override\r\n        public RelativeAngle times(int scale) {\r\n            return fromBygrees(bygree * scale);\r\n        }\r\n    }\r\n}\r\n",
		"id": "EvoSuiteBenchmark/86_at-robots2-j/src/main/java/net/virtualinfinity/atrobots/measures/RelativeAngleTest7.java",
		"test_prompt": "// RelativeAngleTest7.java\npackage net.virtualinfinity.atrobots.measures;\n\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link RelativeAngle}.\n* It contains ten unit test cases for the {@link RelativeAngle#times(int)} method.\n*/\nclass RelativeAngleTest7 {"
	},
	{
		"original_code": "// RelativeAngle.java\npackage net.virtualinfinity.atrobots.measures;\r\n\r\n/**\r\n * Represents an amount of rotation.\r\n *\r\n * @author Daniel Pitts\r\n */\r\npublic class RelativeAngle implements Comparable<RelativeAngle> {\r\n\r\n    public static final RelativeAngle HALF_CIRCLE;\r\n\r\n    public static final RelativeAngle FULL_CIRCLE;\r\n\r\n    private static final RelativeAngle[] bygreeTable = new RelativeAngle[256];\r\n\r\n    static {\r\n        for (int bygree = 0; bygree < 256; ++bygree) {\r\n            final double radians = RelativeAngle.bygreesToRadians(bygree);\r\n            bygreeTable[bygree] = new RelativeBygreeAngle(bygree, (byte) bygree, radians, radiansToDegrees(radians));\r\n        }\r\n        HALF_CIRCLE = RelativeAngle.fromBygrees(128);\r\n        FULL_CIRCLE = RelativeAngle.fromBygrees(256);\r\n    }\r\n\r\n    private final double radians;\r\n\r\n    private RelativeAngle(double radians) {\r\n        this.radians = radians;\r\n    }\r\n\r\n    private double cosine() {\r\n        return Math.cos(radians);\r\n    }\r\n\r\n    private double sine() {\r\n        return Math.sin(radians);\r\n    }\r\n\r\n    public static RelativeAngle fromRadians(double radians) {\r\n        return new RelativeAngle(radians);\r\n    }\r\n\r\n    public RelativeAngle plus(RelativeAngle angle) {\r\n        return fromRadians(getRadians() + angle.getRadians());\r\n    }\r\n\r\n    public double getRadians() {\r\n        return radians;\r\n    }\r\n\r\n    public RelativeAngle normalize() {\r\n        if (radians >= Math.PI * 2 || radians < 0) {\r\n            return fromRadians(Math.atan2(sine(), cosine()));\r\n        }\r\n        return this;\r\n    }\r\n\r\n    public int getBygrees() {\r\n        return (int) Math.round(radians * 128 / Math.PI) & 255;\r\n    }\r\n\r\n    public static RelativeAngle fromBygrees(int value) {\r\n        if (value <= 255) {\r\n            if (value >= 0) {\r\n                return bygreeTable[value];\r\n            }\r\n            if (value >= -255) {\r\n                return bygreeTable[-value].negate();\r\n            }\r\n        }\r\n        return new RelativeBygreeAngle(value, (byte) value, bygreesToRadians(value), radiansToDegrees(value));\r\n    }\r\n\r\n    private RelativeAngle negate() {\r\n        return fromRadians(-radians);\r\n    }\r\n\r\n    private static double bygreesToRadians(int value) {\r\n        return value * Math.PI / 128;\r\n    }\r\n\r\n    public byte getSignedBygrees() {\r\n        return (byte) getBygrees();\r\n    }\r\n\r\n    public String toString() {\r\n        return getRadians() + \"r/\" + getBygrees();\r\n    }\r\n\r\n    public int compareTo(RelativeAngle angle) {\r\n        return Double.compare(getRadians(), angle.getRadians());\r\n    }\r\n\r\n    public double getDegrees() {\r\n        return radiansToDegrees(getRadians());\r\n    }\r\n\r\n    private static double radiansToDegrees(double radians) {\r\n        return radians * 180 / Math.PI;\r\n    }\r\n\r\n    public double dividedBy(RelativeAngle relativeAngle) {\r\n        return radians / relativeAngle.radians;\r\n    }\r\n\r\n    boolean isExactBygrees() {\r\n        return false;\r\n    }\r\n\r\n    public RelativeAngle dividedBy(double scale) {\r\n        return fromRadians(radians / scale);\r\n    }\r\n\r\n    public RelativeAngle times(int scale) {\r\n        return fromRadians(radians * scale);\r\n    }\r\n\r\n    public RelativeAngle times(double scale) {\r\n        return fromRadians(radians * scale);\r\n    }\r\n\r\n    private static class RelativeBygreeAngle extends RelativeAngle {\r\n\r\n        private final int bygree;\r\n\r\n        private final byte signedBygree;\r\n\r\n        private final double degrees;\r\n\r\n        public RelativeBygreeAngle(int bygree, byte signedBygree, double radians, double degrees) {\r\n            super(radians);\r\n            this.bygree = bygree;\r\n            this.signedBygree = signedBygree;\r\n            this.degrees = degrees;\r\n        }\r\n\r\n        @Override\r\n        public RelativeAngle normalize() {\r\n            return bygreeTable[bygree & 255];\r\n        }\r\n\r\n        @Override\r\n        public int getBygrees() {\r\n            return bygree;\r\n        }\r\n\r\n        @Override\r\n        public byte getSignedBygrees() {\r\n            return signedBygree;\r\n        }\r\n\r\n        @Override\r\n        public double getDegrees() {\r\n            return degrees;\r\n        }\r\n\r\n        @Override\r\n        boolean isExactBygrees() {\r\n            return true;\r\n        }\r\n\r\n        @Override\r\n        public RelativeAngle times(int scale) {\r\n            return fromBygrees(bygree * scale);\r\n        }\r\n    }\r\n}\r\n",
		"id": "EvoSuiteBenchmark/86_at-robots2-j/src/main/java/net/virtualinfinity/atrobots/measures/RelativeAngleTest8.java",
		"test_prompt": "// RelativeAngleTest8.java\npackage net.virtualinfinity.atrobots.measures;\n\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link RelativeAngle}.\n* It contains ten unit test cases for the {@link RelativeAngle#times(double)} method.\n*/\nclass RelativeAngleTest8 {"
	},
	{
		"original_code": "// Temperature.java\npackage net.virtualinfinity.atrobots.measures;\r\n\r\n/**\r\n * @author Daniel Pitts\r\n */\r\npublic class Temperature implements Comparable<Temperature> {\r\n\r\n    private final double logScale;\r\n\r\n    public static final Temperature BASE_TEMPERATURE = fromLogScale(0);\r\n\r\n    public Temperature(double logScale) {\r\n        this.logScale = logScale;\r\n    }\r\n\r\n    //    private final double celsius;\r\n    //\r\n    //    public static final Temperature BASE_TEMPERATURE = fromCelsius(20);\r\n    //    private static final Temperature ROBOT_DEATH = fromCelsius(750);\r\n    //    private static final int LOG_SCALE_ROBOT_DEATH = 500;\r\n    //    private static final double LOG_ROBOT_DEATH = Math.log(ROBOT_DEATH.getCelsius());\r\n    //    private static final double LOG_SCALER = LOG_ROBOT_DEATH / LOG_SCALE_ROBOT_DEATH;\r\n    //\r\n    //    private Temperature(double celsius) {\r\n    //        this.celsius = celsius;\r\n    //    }\r\n    //\r\n    //    public int getLogScale() {\r\n    //        return (int) Math.round(Math.log(getCelsius() - BASE_TEMPERATURE.getCelsius()) / LOG_SCALER);\r\n    //    }\r\n    //\r\n    //    public static Temperature fromCelsius(double celsius) {\r\n    //        return new Temperature(celsius);\r\n    //    }\r\n    //\r\n    //    public double getCelsius() {\r\n    //        return celsius;\r\n    //    }\r\n    //\r\n    //    public static Temperature fromLogScale(int logTemp) {\r\n    //        return fromCelsius(Math.exp(logTemp * LOG_SCALER) + BASE_TEMPERATURE.getCelsius());\r\n    //    }\r\n    //\r\n    //    public Temperature minus(Temperature temperature) {\r\n    //        return fromCelsius(getCelsius() - temperature.getCelsius());\r\n    //    }\r\n    //\r\n    //    public Temperature plus(Temperature temperature) {\r\n    //        return fromCelsius(getCelsius() + temperature.getCelsius());\r\n    //    }\r\n    public double getLogScale() {\r\n        return logScale;\r\n    }\r\n\r\n    public static Temperature fromLogScale(double value) {\r\n        return new Temperature(value);\r\n    }\r\n\r\n    public Temperature plus(Temperature temperature) {\r\n        return fromLogScale(getLogScale() + temperature.getLogScale());\r\n    }\r\n\r\n    public Temperature minus(Temperature temperature) {\r\n        return fromLogScale(getLogScale() - temperature.getLogScale());\r\n    }\r\n\r\n    public int compareTo(Temperature temperature) {\r\n        return Double.valueOf(getLogScale()).compareTo(temperature.getLogScale());\r\n    }\r\n\r\n    public Temperature times(double multiplier) {\r\n        return fromLogScale(getLogScale() * multiplier);\r\n    }\r\n\r\n    @Override\r\n    public boolean equals(Object o) {\r\n        if (this == o)\r\n            return true;\r\n        if (o == null || getClass() != o.getClass())\r\n            return false;\r\n        Temperature that = (Temperature) o;\r\n        if (Double.compare(that.logScale, logScale) != 0)\r\n            return false;\r\n        return true;\r\n    }\r\n\r\n    @Override\r\n    public int hashCode() {\r\n        long temp = logScale != +0.0d ? Double.doubleToLongBits(logScale) : 0L;\r\n        return (int) (temp ^ (temp >>> 32));\r\n    }\r\n}\r\n",
		"id": "EvoSuiteBenchmark/86_at-robots2-j/src/main/java/net/virtualinfinity/atrobots/measures/TemperatureTest0.java",
		"test_prompt": "// TemperatureTest0.java\npackage net.virtualinfinity.atrobots.measures;\n\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link Temperature}.\n* It contains ten unit test cases for the {@link Temperature#fromLogScale(double)} method.\n*/\nclass TemperatureTest0 {"
	},
	{
		"original_code": "// Temperature.java\npackage net.virtualinfinity.atrobots.measures;\r\n\r\n/**\r\n * @author Daniel Pitts\r\n */\r\npublic class Temperature implements Comparable<Temperature> {\r\n\r\n    private final double logScale;\r\n\r\n    public static final Temperature BASE_TEMPERATURE = fromLogScale(0);\r\n\r\n    public Temperature(double logScale) {\r\n        this.logScale = logScale;\r\n    }\r\n\r\n    //    private final double celsius;\r\n    //\r\n    //    public static final Temperature BASE_TEMPERATURE = fromCelsius(20);\r\n    //    private static final Temperature ROBOT_DEATH = fromCelsius(750);\r\n    //    private static final int LOG_SCALE_ROBOT_DEATH = 500;\r\n    //    private static final double LOG_ROBOT_DEATH = Math.log(ROBOT_DEATH.getCelsius());\r\n    //    private static final double LOG_SCALER = LOG_ROBOT_DEATH / LOG_SCALE_ROBOT_DEATH;\r\n    //\r\n    //    private Temperature(double celsius) {\r\n    //        this.celsius = celsius;\r\n    //    }\r\n    //\r\n    //    public int getLogScale() {\r\n    //        return (int) Math.round(Math.log(getCelsius() - BASE_TEMPERATURE.getCelsius()) / LOG_SCALER);\r\n    //    }\r\n    //\r\n    //    public static Temperature fromCelsius(double celsius) {\r\n    //        return new Temperature(celsius);\r\n    //    }\r\n    //\r\n    //    public double getCelsius() {\r\n    //        return celsius;\r\n    //    }\r\n    //\r\n    //    public static Temperature fromLogScale(int logTemp) {\r\n    //        return fromCelsius(Math.exp(logTemp * LOG_SCALER) + BASE_TEMPERATURE.getCelsius());\r\n    //    }\r\n    //\r\n    //    public Temperature minus(Temperature temperature) {\r\n    //        return fromCelsius(getCelsius() - temperature.getCelsius());\r\n    //    }\r\n    //\r\n    //    public Temperature plus(Temperature temperature) {\r\n    //        return fromCelsius(getCelsius() + temperature.getCelsius());\r\n    //    }\r\n    public double getLogScale() {\r\n        return logScale;\r\n    }\r\n\r\n    public static Temperature fromLogScale(double value) {\r\n        return new Temperature(value);\r\n    }\r\n\r\n    public Temperature plus(Temperature temperature) {\r\n        return fromLogScale(getLogScale() + temperature.getLogScale());\r\n    }\r\n\r\n    public Temperature minus(Temperature temperature) {\r\n        return fromLogScale(getLogScale() - temperature.getLogScale());\r\n    }\r\n\r\n    public int compareTo(Temperature temperature) {\r\n        return Double.valueOf(getLogScale()).compareTo(temperature.getLogScale());\r\n    }\r\n\r\n    public Temperature times(double multiplier) {\r\n        return fromLogScale(getLogScale() * multiplier);\r\n    }\r\n\r\n    @Override\r\n    public boolean equals(Object o) {\r\n        if (this == o)\r\n            return true;\r\n        if (o == null || getClass() != o.getClass())\r\n            return false;\r\n        Temperature that = (Temperature) o;\r\n        if (Double.compare(that.logScale, logScale) != 0)\r\n            return false;\r\n        return true;\r\n    }\r\n\r\n    @Override\r\n    public int hashCode() {\r\n        long temp = logScale != +0.0d ? Double.doubleToLongBits(logScale) : 0L;\r\n        return (int) (temp ^ (temp >>> 32));\r\n    }\r\n}\r\n",
		"id": "EvoSuiteBenchmark/86_at-robots2-j/src/main/java/net/virtualinfinity/atrobots/measures/TemperatureTest1.java",
		"test_prompt": "// TemperatureTest1.java\npackage net.virtualinfinity.atrobots.measures;\n\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link Temperature}.\n* It contains ten unit test cases for the {@link Temperature#plus(Temperature)} method.\n*/\nclass TemperatureTest1 {"
	},
	{
		"original_code": "// Temperature.java\npackage net.virtualinfinity.atrobots.measures;\r\n\r\n/**\r\n * @author Daniel Pitts\r\n */\r\npublic class Temperature implements Comparable<Temperature> {\r\n\r\n    private final double logScale;\r\n\r\n    public static final Temperature BASE_TEMPERATURE = fromLogScale(0);\r\n\r\n    public Temperature(double logScale) {\r\n        this.logScale = logScale;\r\n    }\r\n\r\n    //    private final double celsius;\r\n    //\r\n    //    public static final Temperature BASE_TEMPERATURE = fromCelsius(20);\r\n    //    private static final Temperature ROBOT_DEATH = fromCelsius(750);\r\n    //    private static final int LOG_SCALE_ROBOT_DEATH = 500;\r\n    //    private static final double LOG_ROBOT_DEATH = Math.log(ROBOT_DEATH.getCelsius());\r\n    //    private static final double LOG_SCALER = LOG_ROBOT_DEATH / LOG_SCALE_ROBOT_DEATH;\r\n    //\r\n    //    private Temperature(double celsius) {\r\n    //        this.celsius = celsius;\r\n    //    }\r\n    //\r\n    //    public int getLogScale() {\r\n    //        return (int) Math.round(Math.log(getCelsius() - BASE_TEMPERATURE.getCelsius()) / LOG_SCALER);\r\n    //    }\r\n    //\r\n    //    public static Temperature fromCelsius(double celsius) {\r\n    //        return new Temperature(celsius);\r\n    //    }\r\n    //\r\n    //    public double getCelsius() {\r\n    //        return celsius;\r\n    //    }\r\n    //\r\n    //    public static Temperature fromLogScale(int logTemp) {\r\n    //        return fromCelsius(Math.exp(logTemp * LOG_SCALER) + BASE_TEMPERATURE.getCelsius());\r\n    //    }\r\n    //\r\n    //    public Temperature minus(Temperature temperature) {\r\n    //        return fromCelsius(getCelsius() - temperature.getCelsius());\r\n    //    }\r\n    //\r\n    //    public Temperature plus(Temperature temperature) {\r\n    //        return fromCelsius(getCelsius() + temperature.getCelsius());\r\n    //    }\r\n    public double getLogScale() {\r\n        return logScale;\r\n    }\r\n\r\n    public static Temperature fromLogScale(double value) {\r\n        return new Temperature(value);\r\n    }\r\n\r\n    public Temperature plus(Temperature temperature) {\r\n        return fromLogScale(getLogScale() + temperature.getLogScale());\r\n    }\r\n\r\n    public Temperature minus(Temperature temperature) {\r\n        return fromLogScale(getLogScale() - temperature.getLogScale());\r\n    }\r\n\r\n    public int compareTo(Temperature temperature) {\r\n        return Double.valueOf(getLogScale()).compareTo(temperature.getLogScale());\r\n    }\r\n\r\n    public Temperature times(double multiplier) {\r\n        return fromLogScale(getLogScale() * multiplier);\r\n    }\r\n\r\n    @Override\r\n    public boolean equals(Object o) {\r\n        if (this == o)\r\n            return true;\r\n        if (o == null || getClass() != o.getClass())\r\n            return false;\r\n        Temperature that = (Temperature) o;\r\n        if (Double.compare(that.logScale, logScale) != 0)\r\n            return false;\r\n        return true;\r\n    }\r\n\r\n    @Override\r\n    public int hashCode() {\r\n        long temp = logScale != +0.0d ? Double.doubleToLongBits(logScale) : 0L;\r\n        return (int) (temp ^ (temp >>> 32));\r\n    }\r\n}\r\n",
		"id": "EvoSuiteBenchmark/86_at-robots2-j/src/main/java/net/virtualinfinity/atrobots/measures/TemperatureTest2.java",
		"test_prompt": "// TemperatureTest2.java\npackage net.virtualinfinity.atrobots.measures;\n\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link Temperature}.\n* It contains ten unit test cases for the {@link Temperature#minus(Temperature)} method.\n*/\nclass TemperatureTest2 {"
	},
	{
		"original_code": "// Temperature.java\npackage net.virtualinfinity.atrobots.measures;\r\n\r\n/**\r\n * @author Daniel Pitts\r\n */\r\npublic class Temperature implements Comparable<Temperature> {\r\n\r\n    private final double logScale;\r\n\r\n    public static final Temperature BASE_TEMPERATURE = fromLogScale(0);\r\n\r\n    public Temperature(double logScale) {\r\n        this.logScale = logScale;\r\n    }\r\n\r\n    //    private final double celsius;\r\n    //\r\n    //    public static final Temperature BASE_TEMPERATURE = fromCelsius(20);\r\n    //    private static final Temperature ROBOT_DEATH = fromCelsius(750);\r\n    //    private static final int LOG_SCALE_ROBOT_DEATH = 500;\r\n    //    private static final double LOG_ROBOT_DEATH = Math.log(ROBOT_DEATH.getCelsius());\r\n    //    private static final double LOG_SCALER = LOG_ROBOT_DEATH / LOG_SCALE_ROBOT_DEATH;\r\n    //\r\n    //    private Temperature(double celsius) {\r\n    //        this.celsius = celsius;\r\n    //    }\r\n    //\r\n    //    public int getLogScale() {\r\n    //        return (int) Math.round(Math.log(getCelsius() - BASE_TEMPERATURE.getCelsius()) / LOG_SCALER);\r\n    //    }\r\n    //\r\n    //    public static Temperature fromCelsius(double celsius) {\r\n    //        return new Temperature(celsius);\r\n    //    }\r\n    //\r\n    //    public double getCelsius() {\r\n    //        return celsius;\r\n    //    }\r\n    //\r\n    //    public static Temperature fromLogScale(int logTemp) {\r\n    //        return fromCelsius(Math.exp(logTemp * LOG_SCALER) + BASE_TEMPERATURE.getCelsius());\r\n    //    }\r\n    //\r\n    //    public Temperature minus(Temperature temperature) {\r\n    //        return fromCelsius(getCelsius() - temperature.getCelsius());\r\n    //    }\r\n    //\r\n    //    public Temperature plus(Temperature temperature) {\r\n    //        return fromCelsius(getCelsius() + temperature.getCelsius());\r\n    //    }\r\n    public double getLogScale() {\r\n        return logScale;\r\n    }\r\n\r\n    public static Temperature fromLogScale(double value) {\r\n        return new Temperature(value);\r\n    }\r\n\r\n    public Temperature plus(Temperature temperature) {\r\n        return fromLogScale(getLogScale() + temperature.getLogScale());\r\n    }\r\n\r\n    public Temperature minus(Temperature temperature) {\r\n        return fromLogScale(getLogScale() - temperature.getLogScale());\r\n    }\r\n\r\n    public int compareTo(Temperature temperature) {\r\n        return Double.valueOf(getLogScale()).compareTo(temperature.getLogScale());\r\n    }\r\n\r\n    public Temperature times(double multiplier) {\r\n        return fromLogScale(getLogScale() * multiplier);\r\n    }\r\n\r\n    @Override\r\n    public boolean equals(Object o) {\r\n        if (this == o)\r\n            return true;\r\n        if (o == null || getClass() != o.getClass())\r\n            return false;\r\n        Temperature that = (Temperature) o;\r\n        if (Double.compare(that.logScale, logScale) != 0)\r\n            return false;\r\n        return true;\r\n    }\r\n\r\n    @Override\r\n    public int hashCode() {\r\n        long temp = logScale != +0.0d ? Double.doubleToLongBits(logScale) : 0L;\r\n        return (int) (temp ^ (temp >>> 32));\r\n    }\r\n}\r\n",
		"id": "EvoSuiteBenchmark/86_at-robots2-j/src/main/java/net/virtualinfinity/atrobots/measures/TemperatureTest3.java",
		"test_prompt": "// TemperatureTest3.java\npackage net.virtualinfinity.atrobots.measures;\n\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link Temperature}.\n* It contains ten unit test cases for the {@link Temperature#compareTo(Temperature)} method.\n*/\nclass TemperatureTest3 {"
	},
	{
		"original_code": "// Temperature.java\npackage net.virtualinfinity.atrobots.measures;\r\n\r\n/**\r\n * @author Daniel Pitts\r\n */\r\npublic class Temperature implements Comparable<Temperature> {\r\n\r\n    private final double logScale;\r\n\r\n    public static final Temperature BASE_TEMPERATURE = fromLogScale(0);\r\n\r\n    public Temperature(double logScale) {\r\n        this.logScale = logScale;\r\n    }\r\n\r\n    //    private final double celsius;\r\n    //\r\n    //    public static final Temperature BASE_TEMPERATURE = fromCelsius(20);\r\n    //    private static final Temperature ROBOT_DEATH = fromCelsius(750);\r\n    //    private static final int LOG_SCALE_ROBOT_DEATH = 500;\r\n    //    private static final double LOG_ROBOT_DEATH = Math.log(ROBOT_DEATH.getCelsius());\r\n    //    private static final double LOG_SCALER = LOG_ROBOT_DEATH / LOG_SCALE_ROBOT_DEATH;\r\n    //\r\n    //    private Temperature(double celsius) {\r\n    //        this.celsius = celsius;\r\n    //    }\r\n    //\r\n    //    public int getLogScale() {\r\n    //        return (int) Math.round(Math.log(getCelsius() - BASE_TEMPERATURE.getCelsius()) / LOG_SCALER);\r\n    //    }\r\n    //\r\n    //    public static Temperature fromCelsius(double celsius) {\r\n    //        return new Temperature(celsius);\r\n    //    }\r\n    //\r\n    //    public double getCelsius() {\r\n    //        return celsius;\r\n    //    }\r\n    //\r\n    //    public static Temperature fromLogScale(int logTemp) {\r\n    //        return fromCelsius(Math.exp(logTemp * LOG_SCALER) + BASE_TEMPERATURE.getCelsius());\r\n    //    }\r\n    //\r\n    //    public Temperature minus(Temperature temperature) {\r\n    //        return fromCelsius(getCelsius() - temperature.getCelsius());\r\n    //    }\r\n    //\r\n    //    public Temperature plus(Temperature temperature) {\r\n    //        return fromCelsius(getCelsius() + temperature.getCelsius());\r\n    //    }\r\n    public double getLogScale() {\r\n        return logScale;\r\n    }\r\n\r\n    public static Temperature fromLogScale(double value) {\r\n        return new Temperature(value);\r\n    }\r\n\r\n    public Temperature plus(Temperature temperature) {\r\n        return fromLogScale(getLogScale() + temperature.getLogScale());\r\n    }\r\n\r\n    public Temperature minus(Temperature temperature) {\r\n        return fromLogScale(getLogScale() - temperature.getLogScale());\r\n    }\r\n\r\n    public int compareTo(Temperature temperature) {\r\n        return Double.valueOf(getLogScale()).compareTo(temperature.getLogScale());\r\n    }\r\n\r\n    public Temperature times(double multiplier) {\r\n        return fromLogScale(getLogScale() * multiplier);\r\n    }\r\n\r\n    @Override\r\n    public boolean equals(Object o) {\r\n        if (this == o)\r\n            return true;\r\n        if (o == null || getClass() != o.getClass())\r\n            return false;\r\n        Temperature that = (Temperature) o;\r\n        if (Double.compare(that.logScale, logScale) != 0)\r\n            return false;\r\n        return true;\r\n    }\r\n\r\n    @Override\r\n    public int hashCode() {\r\n        long temp = logScale != +0.0d ? Double.doubleToLongBits(logScale) : 0L;\r\n        return (int) (temp ^ (temp >>> 32));\r\n    }\r\n}\r\n",
		"id": "EvoSuiteBenchmark/86_at-robots2-j/src/main/java/net/virtualinfinity/atrobots/measures/TemperatureTest4.java",
		"test_prompt": "// TemperatureTest4.java\npackage net.virtualinfinity.atrobots.measures;\n\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link Temperature}.\n* It contains ten unit test cases for the {@link Temperature#times(double)} method.\n*/\nclass TemperatureTest4 {"
	},
	{
		"original_code": "// Temperature.java\npackage net.virtualinfinity.atrobots.measures;\r\n\r\n/**\r\n * @author Daniel Pitts\r\n */\r\npublic class Temperature implements Comparable<Temperature> {\r\n\r\n    private final double logScale;\r\n\r\n    public static final Temperature BASE_TEMPERATURE = fromLogScale(0);\r\n\r\n    public Temperature(double logScale) {\r\n        this.logScale = logScale;\r\n    }\r\n\r\n    //    private final double celsius;\r\n    //\r\n    //    public static final Temperature BASE_TEMPERATURE = fromCelsius(20);\r\n    //    private static final Temperature ROBOT_DEATH = fromCelsius(750);\r\n    //    private static final int LOG_SCALE_ROBOT_DEATH = 500;\r\n    //    private static final double LOG_ROBOT_DEATH = Math.log(ROBOT_DEATH.getCelsius());\r\n    //    private static final double LOG_SCALER = LOG_ROBOT_DEATH / LOG_SCALE_ROBOT_DEATH;\r\n    //\r\n    //    private Temperature(double celsius) {\r\n    //        this.celsius = celsius;\r\n    //    }\r\n    //\r\n    //    public int getLogScale() {\r\n    //        return (int) Math.round(Math.log(getCelsius() - BASE_TEMPERATURE.getCelsius()) / LOG_SCALER);\r\n    //    }\r\n    //\r\n    //    public static Temperature fromCelsius(double celsius) {\r\n    //        return new Temperature(celsius);\r\n    //    }\r\n    //\r\n    //    public double getCelsius() {\r\n    //        return celsius;\r\n    //    }\r\n    //\r\n    //    public static Temperature fromLogScale(int logTemp) {\r\n    //        return fromCelsius(Math.exp(logTemp * LOG_SCALER) + BASE_TEMPERATURE.getCelsius());\r\n    //    }\r\n    //\r\n    //    public Temperature minus(Temperature temperature) {\r\n    //        return fromCelsius(getCelsius() - temperature.getCelsius());\r\n    //    }\r\n    //\r\n    //    public Temperature plus(Temperature temperature) {\r\n    //        return fromCelsius(getCelsius() + temperature.getCelsius());\r\n    //    }\r\n    public double getLogScale() {\r\n        return logScale;\r\n    }\r\n\r\n    public static Temperature fromLogScale(double value) {\r\n        return new Temperature(value);\r\n    }\r\n\r\n    public Temperature plus(Temperature temperature) {\r\n        return fromLogScale(getLogScale() + temperature.getLogScale());\r\n    }\r\n\r\n    public Temperature minus(Temperature temperature) {\r\n        return fromLogScale(getLogScale() - temperature.getLogScale());\r\n    }\r\n\r\n    public int compareTo(Temperature temperature) {\r\n        return Double.valueOf(getLogScale()).compareTo(temperature.getLogScale());\r\n    }\r\n\r\n    public Temperature times(double multiplier) {\r\n        return fromLogScale(getLogScale() * multiplier);\r\n    }\r\n\r\n    @Override\r\n    public boolean equals(Object o) {\r\n        if (this == o)\r\n            return true;\r\n        if (o == null || getClass() != o.getClass())\r\n            return false;\r\n        Temperature that = (Temperature) o;\r\n        if (Double.compare(that.logScale, logScale) != 0)\r\n            return false;\r\n        return true;\r\n    }\r\n\r\n    @Override\r\n    public int hashCode() {\r\n        long temp = logScale != +0.0d ? Double.doubleToLongBits(logScale) : 0L;\r\n        return (int) (temp ^ (temp >>> 32));\r\n    }\r\n}\r\n",
		"id": "EvoSuiteBenchmark/86_at-robots2-j/src/main/java/net/virtualinfinity/atrobots/measures/TemperatureTest5.java",
		"test_prompt": "// TemperatureTest5.java\npackage net.virtualinfinity.atrobots.measures;\n\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link Temperature}.\n* It contains ten unit test cases for the {@link Temperature#equals(Object)} method.\n*/\nclass TemperatureTest5 {"
	},
	{
		"original_code": "// Temperature.java\npackage net.virtualinfinity.atrobots.measures;\r\n\r\n/**\r\n * @author Daniel Pitts\r\n */\r\npublic class Temperature implements Comparable<Temperature> {\r\n\r\n    private final double logScale;\r\n\r\n    public static final Temperature BASE_TEMPERATURE = fromLogScale(0);\r\n\r\n    public Temperature(double logScale) {\r\n        this.logScale = logScale;\r\n    }\r\n\r\n    //    private final double celsius;\r\n    //\r\n    //    public static final Temperature BASE_TEMPERATURE = fromCelsius(20);\r\n    //    private static final Temperature ROBOT_DEATH = fromCelsius(750);\r\n    //    private static final int LOG_SCALE_ROBOT_DEATH = 500;\r\n    //    private static final double LOG_ROBOT_DEATH = Math.log(ROBOT_DEATH.getCelsius());\r\n    //    private static final double LOG_SCALER = LOG_ROBOT_DEATH / LOG_SCALE_ROBOT_DEATH;\r\n    //\r\n    //    private Temperature(double celsius) {\r\n    //        this.celsius = celsius;\r\n    //    }\r\n    //\r\n    //    public int getLogScale() {\r\n    //        return (int) Math.round(Math.log(getCelsius() - BASE_TEMPERATURE.getCelsius()) / LOG_SCALER);\r\n    //    }\r\n    //\r\n    //    public static Temperature fromCelsius(double celsius) {\r\n    //        return new Temperature(celsius);\r\n    //    }\r\n    //\r\n    //    public double getCelsius() {\r\n    //        return celsius;\r\n    //    }\r\n    //\r\n    //    public static Temperature fromLogScale(int logTemp) {\r\n    //        return fromCelsius(Math.exp(logTemp * LOG_SCALER) + BASE_TEMPERATURE.getCelsius());\r\n    //    }\r\n    //\r\n    //    public Temperature minus(Temperature temperature) {\r\n    //        return fromCelsius(getCelsius() - temperature.getCelsius());\r\n    //    }\r\n    //\r\n    //    public Temperature plus(Temperature temperature) {\r\n    //        return fromCelsius(getCelsius() + temperature.getCelsius());\r\n    //    }\r\n    public double getLogScale() {\r\n        return logScale;\r\n    }\r\n\r\n    public static Temperature fromLogScale(double value) {\r\n        return new Temperature(value);\r\n    }\r\n\r\n    public Temperature plus(Temperature temperature) {\r\n        return fromLogScale(getLogScale() + temperature.getLogScale());\r\n    }\r\n\r\n    public Temperature minus(Temperature temperature) {\r\n        return fromLogScale(getLogScale() - temperature.getLogScale());\r\n    }\r\n\r\n    public int compareTo(Temperature temperature) {\r\n        return Double.valueOf(getLogScale()).compareTo(temperature.getLogScale());\r\n    }\r\n\r\n    public Temperature times(double multiplier) {\r\n        return fromLogScale(getLogScale() * multiplier);\r\n    }\r\n\r\n    @Override\r\n    public boolean equals(Object o) {\r\n        if (this == o)\r\n            return true;\r\n        if (o == null || getClass() != o.getClass())\r\n            return false;\r\n        Temperature that = (Temperature) o;\r\n        if (Double.compare(that.logScale, logScale) != 0)\r\n            return false;\r\n        return true;\r\n    }\r\n\r\n    @Override\r\n    public int hashCode() {\r\n        long temp = logScale != +0.0d ? Double.doubleToLongBits(logScale) : 0L;\r\n        return (int) (temp ^ (temp >>> 32));\r\n    }\r\n}\r\n",
		"id": "EvoSuiteBenchmark/86_at-robots2-j/src/main/java/net/virtualinfinity/atrobots/measures/TemperatureTest6.java",
		"test_prompt": "// TemperatureTest6.java\npackage net.virtualinfinity.atrobots.measures;\n\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link Temperature}.\n* It contains ten unit test cases for the {@link Temperature#hashCode()} method.\n*/\nclass TemperatureTest6 {"
	},
	{
		"original_code": "// DistanceOverTime.java\npackage net.virtualinfinity.atrobots.measures;\r\n\r\n/**\r\n * Represents a particular speed.\r\n *\r\n * @author Daniel Pitts\r\n */\r\npublic final class DistanceOverTime {\r\n\r\n    private final double distance;\r\n\r\n    private final Duration duration;\r\n\r\n    public DistanceOverTime(double distance, Duration duration) {\r\n        this.distance = distance;\r\n        this.duration = duration;\r\n    }\r\n\r\n    public double times(Duration duration) {\r\n        return distance * (this.duration.divided(duration));\r\n    }\r\n\r\n    public String toString() {\r\n        return distance + \"/\" + duration;\r\n    }\r\n}\r\n",
		"id": "EvoSuiteBenchmark/86_at-robots2-j/src/main/java/net/virtualinfinity/atrobots/measures/DistanceOverTimeTest.java",
		"test_prompt": "// DistanceOverTimeTest.java\npackage net.virtualinfinity.atrobots.measures;\n\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link DistanceOverTime}.\n* It contains ten unit test cases for the {@link DistanceOverTime#times(Duration)} method.\n*/\nclass DistanceOverTimeTest {"
	},
	{
		"original_code": "// PolarVector.java\npackage net.virtualinfinity.atrobots.measures;\r\n\r\n/**\r\n * A {@link net.virtualinfinity.atrobots.measures.Vector} which is implemented via a polar representation.\r\n *\r\n * @author Daniel Pitts\r\n */\r\nclass PolarVector extends Vector {\r\n\r\n    private final double magnitude;\r\n\r\n    private final AbsoluteAngle angle;\r\n\r\n    private PolarVector(double magnitude, AbsoluteAngle angle) {\r\n        this.magnitude = magnitude;\r\n        this.angle = angle;\r\n    }\r\n\r\n    public double getMagnitude() {\r\n        return magnitude;\r\n    }\r\n\r\n    public AbsoluteAngle getAngle() {\r\n        return angle;\r\n    }\r\n\r\n    public double getX() {\r\n        return magnitude * angle.cosine();\r\n    }\r\n\r\n    public double getY() {\r\n        return magnitude * angle.sine();\r\n    }\r\n\r\n    public static PolarVector createPolar(AbsoluteAngle angle, double magnitude) {\r\n        if (magnitude < 0) {\r\n            return new PolarVector(-magnitude, angle.getSupplementary());\r\n        }\r\n        return new PolarVector(magnitude, angle);\r\n    }\r\n\r\n    public double getMagnitudeSquared() {\r\n        return magnitude * (magnitude);\r\n    }\r\n\r\n    public Vector times(double v) {\r\n        return createPolar(angle, magnitude * (v));\r\n    }\r\n}\r\n",
		"id": "EvoSuiteBenchmark/86_at-robots2-j/src/main/java/net/virtualinfinity/atrobots/measures/PolarVectorTest0.java",
		"test_prompt": "// PolarVectorTest0.java\npackage net.virtualinfinity.atrobots.measures;\n\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link PolarVector}.\n* It contains ten unit test cases for the {@link PolarVector#createPolar(AbsoluteAngle, double)} method.\n*/\nclass PolarVectorTest0 {"
	},
	{
		"original_code": "// PolarVector.java\npackage net.virtualinfinity.atrobots.measures;\r\n\r\n/**\r\n * A {@link net.virtualinfinity.atrobots.measures.Vector} which is implemented via a polar representation.\r\n *\r\n * @author Daniel Pitts\r\n */\r\nclass PolarVector extends Vector {\r\n\r\n    private final double magnitude;\r\n\r\n    private final AbsoluteAngle angle;\r\n\r\n    private PolarVector(double magnitude, AbsoluteAngle angle) {\r\n        this.magnitude = magnitude;\r\n        this.angle = angle;\r\n    }\r\n\r\n    public double getMagnitude() {\r\n        return magnitude;\r\n    }\r\n\r\n    public AbsoluteAngle getAngle() {\r\n        return angle;\r\n    }\r\n\r\n    public double getX() {\r\n        return magnitude * angle.cosine();\r\n    }\r\n\r\n    public double getY() {\r\n        return magnitude * angle.sine();\r\n    }\r\n\r\n    public static PolarVector createPolar(AbsoluteAngle angle, double magnitude) {\r\n        if (magnitude < 0) {\r\n            return new PolarVector(-magnitude, angle.getSupplementary());\r\n        }\r\n        return new PolarVector(magnitude, angle);\r\n    }\r\n\r\n    public double getMagnitudeSquared() {\r\n        return magnitude * (magnitude);\r\n    }\r\n\r\n    public Vector times(double v) {\r\n        return createPolar(angle, magnitude * (v));\r\n    }\r\n}\r\n",
		"id": "EvoSuiteBenchmark/86_at-robots2-j/src/main/java/net/virtualinfinity/atrobots/measures/PolarVectorTest1.java",
		"test_prompt": "// PolarVectorTest1.java\npackage net.virtualinfinity.atrobots.measures;\n\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link PolarVector}.\n* It contains ten unit test cases for the {@link PolarVector#times(double)} method.\n*/\nclass PolarVectorTest1 {"
	},
	{
		"original_code": "// AbsoluteAngle.java\npackage net.virtualinfinity.atrobots.measures;\r\n\r\n/**\r\n * Represents an exact angle.\r\n *\r\n * @author Daniel Pitts\r\n * @see net.virtualinfinity.atrobots.measures.RelativeAngle\r\n */\r\npublic class AbsoluteAngle {\r\n\r\n    private static final AbsoluteAngle[] bygreeTable = new AbsoluteAngle[256];\r\n\r\n    private static final double RADIANS_PER_BYGREE = Math.PI / 128.0;\r\n\r\n    private static final double BYGREES_PER_RADIANS = 128 / Math.PI;\r\n\r\n    private static final int BYGREE_MASK = 255;\r\n\r\n    private static final double FULL_CIRCLE_RADIANS = Math.PI * 2;\r\n\r\n    static {\r\n        for (int bygrees = 0; bygrees < bygreeTable.length; ++bygrees) {\r\n            bygreeTable[bygrees] = new AbsoluateBygreeAngle(bygrees);\r\n        }\r\n    }\r\n\r\n    protected boolean isExactBygrees() {\r\n        return false;\r\n    }\r\n\r\n    private final double radians;\r\n\r\n    private AbsoluteAngle(double radians) {\r\n        if (radians < 0) {\r\n            radians += FULL_CIRCLE_RADIANS;\r\n        } else if (radians >= FULL_CIRCLE_RADIANS) {\r\n            radians -= FULL_CIRCLE_RADIANS;\r\n        }\r\n        this.radians = radians;\r\n    }\r\n\r\n    public double cosine() {\r\n        return Math.cos(radians);\r\n    }\r\n\r\n    public double sine() {\r\n        return Math.sin(radians);\r\n    }\r\n\r\n    public AbsoluteAngle counterClockwise(RelativeAngle angle) {\r\n        return fromRadians(getRadians() + angle.getRadians());\r\n    }\r\n\r\n    public double getRadians() {\r\n        return radians;\r\n    }\r\n\r\n    public double getNormalizedRadians() {\r\n        if (radians >= FULL_CIRCLE_RADIANS || radians < 0) {\r\n            return Math.atan2(sine(), cosine());\r\n        }\r\n        return radians;\r\n    }\r\n\r\n    public Vector toUnitVector() {\r\n        return toVector(1);\r\n    }\r\n\r\n    public Vector toVector(double magnitude) {\r\n        return Vector.createPolar(this, magnitude);\r\n    }\r\n\r\n    public int getBygrees() {\r\n        return radiansToBygrees(getRadians());\r\n    }\r\n\r\n    public AbsoluteAngle clockwise(RelativeAngle angle) {\r\n        return fromRadians(getRadians() - angle.getRadians());\r\n    }\r\n\r\n    public byte getSignedBygrees() {\r\n        return (byte) getBygrees();\r\n    }\r\n\r\n    public boolean isClockwiseCloser(AbsoluteAngle angle) {\r\n        return getAngleCounterClockwiseTo(angle).compareTo(RelativeAngle.HALF_CIRCLE) < 0;\r\n    }\r\n\r\n    public String toString() {\r\n        return getNormalizedRadians() + \"r/\" + getBygrees();\r\n    }\r\n\r\n    public RelativeAngle counterClockwiseFromStandardOrigin() {\r\n        return RelativeAngle.fromRadians(getRadians());\r\n    }\r\n\r\n    public double getDegrees() {\r\n        return getRadians() / Math.PI * 180;\r\n    }\r\n\r\n    public RelativeAngle getAngleCounterClockwiseTo(AbsoluteAngle counterClockwiseValue) {\r\n        final double difference = getNormalizedRadians() - counterClockwiseValue.getNormalizedRadians();\r\n        return RelativeAngle.fromRadians(difference < 0 ? difference + Math.PI * 2.0 : difference);\r\n    }\r\n\r\n    public Vector projectAngle(Vector vector) {\r\n        final Vector unit = toVector(1);\r\n        return unit.times(unit.dot(vector));\r\n    }\r\n\r\n    public static AbsoluteAngle fromBygrees(int value) {\r\n        return bygreeTable[value & BYGREE_MASK];\r\n    }\r\n\r\n    public static AbsoluteAngle fromCartesian(double x, double y) {\r\n        return fromRadians(Math.atan2(y, x));\r\n    }\r\n\r\n    public static AbsoluteAngle fromRadians(double radians) {\r\n        return new AbsoluteAngle(radians);\r\n    }\r\n\r\n    private static int radiansToBygrees(double radians) {\r\n        return (int) Math.round(64 + (radians * BYGREES_PER_RADIANS)) & BYGREE_MASK;\r\n    }\r\n\r\n    private static double bygreeToRadians(int bygrees) {\r\n        return (bygrees - 64) * RADIANS_PER_BYGREE;\r\n    }\r\n\r\n    public AbsoluteAngle getSupplementary() {\r\n        return fromRadians(Math.PI + getRadians());\r\n    }\r\n\r\n    private static class AbsoluateBygreeAngle extends AbsoluteAngle {\r\n\r\n        private final double cosine;\r\n\r\n        private final double sine;\r\n\r\n        private final int bygrees;\r\n\r\n        private final byte signedBygrees;\r\n\r\n        private final double normalizedRadians;\r\n\r\n        private final double degrees;\r\n\r\n        private final RelativeAngle counterClockwiseFromStandardOrigin;\r\n\r\n        public AbsoluateBygreeAngle(int bygrees) {\r\n            super(bygreeToRadians(bygrees));\r\n            final AbsoluteAngle template = AbsoluteAngle.fromRadians(bygreeToRadians(bygrees));\r\n            switch(bygrees) {\r\n                case 0:\r\n                    this.cosine = 0;\r\n                    this.sine = -1;\r\n                    break;\r\n                case 128:\r\n                    this.cosine = 0;\r\n                    this.sine = 1;\r\n                    break;\r\n                case 192:\r\n                    this.cosine = -1;\r\n                    this.sine = 0;\r\n                    break;\r\n                default:\r\n                    this.cosine = template.cosine();\r\n                    this.sine = template.sine();\r\n                    break;\r\n            }\r\n            this.bygrees = bygrees;\r\n            this.signedBygrees = template.getSignedBygrees();\r\n            this.normalizedRadians = template.getNormalizedRadians();\r\n            this.degrees = template.getDegrees();\r\n            counterClockwiseFromStandardOrigin = RelativeAngle.fromBygrees(64 - this.bygrees);\r\n        }\r\n\r\n        @Override\r\n        public double cosine() {\r\n            return cosine;\r\n        }\r\n\r\n        @Override\r\n        public double sine() {\r\n            return sine;\r\n        }\r\n\r\n        @Override\r\n        public int getBygrees() {\r\n            return bygrees;\r\n        }\r\n\r\n        @Override\r\n        public byte getSignedBygrees() {\r\n            return signedBygrees;\r\n        }\r\n\r\n        @Override\r\n        protected boolean isExactBygrees() {\r\n            return true;\r\n        }\r\n\r\n        @Override\r\n        public double getNormalizedRadians() {\r\n            return normalizedRadians;\r\n        }\r\n\r\n        @Override\r\n        public AbsoluteAngle counterClockwise(RelativeAngle angle) {\r\n            if (angle.isExactBygrees()) {\r\n                return fromBygrees(getBygrees() + angle.getBygrees());\r\n            }\r\n            return super.counterClockwise(angle);\r\n        }\r\n\r\n        @Override\r\n        public AbsoluteAngle clockwise(RelativeAngle angle) {\r\n            if (angle.isExactBygrees()) {\r\n                return fromBygrees(getBygrees() - angle.getBygrees());\r\n            }\r\n            return super.clockwise(angle);\r\n        }\r\n\r\n        @Override\r\n        public double getDegrees() {\r\n            return degrees;\r\n        }\r\n\r\n        @Override\r\n        public RelativeAngle getAngleCounterClockwiseTo(AbsoluteAngle counterClockwiseValue) {\r\n            if (counterClockwiseValue.isExactBygrees()) {\r\n                final int difference = getBygrees() - counterClockwiseValue.getBygrees();\r\n                return RelativeAngle.fromBygrees(difference < 0 ? difference + 256 : difference);\r\n            }\r\n            return super.getAngleCounterClockwiseTo(counterClockwiseValue);\r\n        }\r\n\r\n        @Override\r\n        public RelativeAngle counterClockwiseFromStandardOrigin() {\r\n            return counterClockwiseFromStandardOrigin;\r\n        }\r\n\r\n        @Override\r\n        public AbsoluteAngle getSupplementary() {\r\n            return fromBygrees(bygrees + 128);\r\n        }\r\n    }\r\n\r\n    @Override\r\n    public boolean equals(Object o) {\r\n        if (this == o)\r\n            return true;\r\n        if (o == null || getClass() != o.getClass())\r\n            return false;\r\n        AbsoluteAngle angle = (AbsoluteAngle) o;\r\n        if (Double.compare(angle.radians, radians) != 0)\r\n            return false;\r\n        return true;\r\n    }\r\n\r\n    @Override\r\n    public int hashCode() {\r\n        long temp = radians != +0.0d ? Double.doubleToLongBits(radians) : 0L;\r\n        return (int) (temp ^ (temp >>> 32));\r\n    }\r\n}\r\n",
		"id": "EvoSuiteBenchmark/86_at-robots2-j/src/main/java/net/virtualinfinity/atrobots/measures/AbsoluteAngleTest0.java",
		"test_prompt": "// AbsoluteAngleTest0.java\npackage net.virtualinfinity.atrobots.measures;\n\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link AbsoluteAngle}.\n* It contains ten unit test cases for the {@link AbsoluteAngle#cosine()} method.\n*/\nclass AbsoluteAngleTest0 {"
	},
	{
		"original_code": "// AbsoluteAngle.java\npackage net.virtualinfinity.atrobots.measures;\r\n\r\n/**\r\n * Represents an exact angle.\r\n *\r\n * @author Daniel Pitts\r\n * @see net.virtualinfinity.atrobots.measures.RelativeAngle\r\n */\r\npublic class AbsoluteAngle {\r\n\r\n    private static final AbsoluteAngle[] bygreeTable = new AbsoluteAngle[256];\r\n\r\n    private static final double RADIANS_PER_BYGREE = Math.PI / 128.0;\r\n\r\n    private static final double BYGREES_PER_RADIANS = 128 / Math.PI;\r\n\r\n    private static final int BYGREE_MASK = 255;\r\n\r\n    private static final double FULL_CIRCLE_RADIANS = Math.PI * 2;\r\n\r\n    static {\r\n        for (int bygrees = 0; bygrees < bygreeTable.length; ++bygrees) {\r\n            bygreeTable[bygrees] = new AbsoluateBygreeAngle(bygrees);\r\n        }\r\n    }\r\n\r\n    protected boolean isExactBygrees() {\r\n        return false;\r\n    }\r\n\r\n    private final double radians;\r\n\r\n    private AbsoluteAngle(double radians) {\r\n        if (radians < 0) {\r\n            radians += FULL_CIRCLE_RADIANS;\r\n        } else if (radians >= FULL_CIRCLE_RADIANS) {\r\n            radians -= FULL_CIRCLE_RADIANS;\r\n        }\r\n        this.radians = radians;\r\n    }\r\n\r\n    public double cosine() {\r\n        return Math.cos(radians);\r\n    }\r\n\r\n    public double sine() {\r\n        return Math.sin(radians);\r\n    }\r\n\r\n    public AbsoluteAngle counterClockwise(RelativeAngle angle) {\r\n        return fromRadians(getRadians() + angle.getRadians());\r\n    }\r\n\r\n    public double getRadians() {\r\n        return radians;\r\n    }\r\n\r\n    public double getNormalizedRadians() {\r\n        if (radians >= FULL_CIRCLE_RADIANS || radians < 0) {\r\n            return Math.atan2(sine(), cosine());\r\n        }\r\n        return radians;\r\n    }\r\n\r\n    public Vector toUnitVector() {\r\n        return toVector(1);\r\n    }\r\n\r\n    public Vector toVector(double magnitude) {\r\n        return Vector.createPolar(this, magnitude);\r\n    }\r\n\r\n    public int getBygrees() {\r\n        return radiansToBygrees(getRadians());\r\n    }\r\n\r\n    public AbsoluteAngle clockwise(RelativeAngle angle) {\r\n        return fromRadians(getRadians() - angle.getRadians());\r\n    }\r\n\r\n    public byte getSignedBygrees() {\r\n        return (byte) getBygrees();\r\n    }\r\n\r\n    public boolean isClockwiseCloser(AbsoluteAngle angle) {\r\n        return getAngleCounterClockwiseTo(angle).compareTo(RelativeAngle.HALF_CIRCLE) < 0;\r\n    }\r\n\r\n    public String toString() {\r\n        return getNormalizedRadians() + \"r/\" + getBygrees();\r\n    }\r\n\r\n    public RelativeAngle counterClockwiseFromStandardOrigin() {\r\n        return RelativeAngle.fromRadians(getRadians());\r\n    }\r\n\r\n    public double getDegrees() {\r\n        return getRadians() / Math.PI * 180;\r\n    }\r\n\r\n    public RelativeAngle getAngleCounterClockwiseTo(AbsoluteAngle counterClockwiseValue) {\r\n        final double difference = getNormalizedRadians() - counterClockwiseValue.getNormalizedRadians();\r\n        return RelativeAngle.fromRadians(difference < 0 ? difference + Math.PI * 2.0 : difference);\r\n    }\r\n\r\n    public Vector projectAngle(Vector vector) {\r\n        final Vector unit = toVector(1);\r\n        return unit.times(unit.dot(vector));\r\n    }\r\n\r\n    public static AbsoluteAngle fromBygrees(int value) {\r\n        return bygreeTable[value & BYGREE_MASK];\r\n    }\r\n\r\n    public static AbsoluteAngle fromCartesian(double x, double y) {\r\n        return fromRadians(Math.atan2(y, x));\r\n    }\r\n\r\n    public static AbsoluteAngle fromRadians(double radians) {\r\n        return new AbsoluteAngle(radians);\r\n    }\r\n\r\n    private static int radiansToBygrees(double radians) {\r\n        return (int) Math.round(64 + (radians * BYGREES_PER_RADIANS)) & BYGREE_MASK;\r\n    }\r\n\r\n    private static double bygreeToRadians(int bygrees) {\r\n        return (bygrees - 64) * RADIANS_PER_BYGREE;\r\n    }\r\n\r\n    public AbsoluteAngle getSupplementary() {\r\n        return fromRadians(Math.PI + getRadians());\r\n    }\r\n\r\n    private static class AbsoluateBygreeAngle extends AbsoluteAngle {\r\n\r\n        private final double cosine;\r\n\r\n        private final double sine;\r\n\r\n        private final int bygrees;\r\n\r\n        private final byte signedBygrees;\r\n\r\n        private final double normalizedRadians;\r\n\r\n        private final double degrees;\r\n\r\n        private final RelativeAngle counterClockwiseFromStandardOrigin;\r\n\r\n        public AbsoluateBygreeAngle(int bygrees) {\r\n            super(bygreeToRadians(bygrees));\r\n            final AbsoluteAngle template = AbsoluteAngle.fromRadians(bygreeToRadians(bygrees));\r\n            switch(bygrees) {\r\n                case 0:\r\n                    this.cosine = 0;\r\n                    this.sine = -1;\r\n                    break;\r\n                case 128:\r\n                    this.cosine = 0;\r\n                    this.sine = 1;\r\n                    break;\r\n                case 192:\r\n                    this.cosine = -1;\r\n                    this.sine = 0;\r\n                    break;\r\n                default:\r\n                    this.cosine = template.cosine();\r\n                    this.sine = template.sine();\r\n                    break;\r\n            }\r\n            this.bygrees = bygrees;\r\n            this.signedBygrees = template.getSignedBygrees();\r\n            this.normalizedRadians = template.getNormalizedRadians();\r\n            this.degrees = template.getDegrees();\r\n            counterClockwiseFromStandardOrigin = RelativeAngle.fromBygrees(64 - this.bygrees);\r\n        }\r\n\r\n        @Override\r\n        public double cosine() {\r\n            return cosine;\r\n        }\r\n\r\n        @Override\r\n        public double sine() {\r\n            return sine;\r\n        }\r\n\r\n        @Override\r\n        public int getBygrees() {\r\n            return bygrees;\r\n        }\r\n\r\n        @Override\r\n        public byte getSignedBygrees() {\r\n            return signedBygrees;\r\n        }\r\n\r\n        @Override\r\n        protected boolean isExactBygrees() {\r\n            return true;\r\n        }\r\n\r\n        @Override\r\n        public double getNormalizedRadians() {\r\n            return normalizedRadians;\r\n        }\r\n\r\n        @Override\r\n        public AbsoluteAngle counterClockwise(RelativeAngle angle) {\r\n            if (angle.isExactBygrees()) {\r\n                return fromBygrees(getBygrees() + angle.getBygrees());\r\n            }\r\n            return super.counterClockwise(angle);\r\n        }\r\n\r\n        @Override\r\n        public AbsoluteAngle clockwise(RelativeAngle angle) {\r\n            if (angle.isExactBygrees()) {\r\n                return fromBygrees(getBygrees() - angle.getBygrees());\r\n            }\r\n            return super.clockwise(angle);\r\n        }\r\n\r\n        @Override\r\n        public double getDegrees() {\r\n            return degrees;\r\n        }\r\n\r\n        @Override\r\n        public RelativeAngle getAngleCounterClockwiseTo(AbsoluteAngle counterClockwiseValue) {\r\n            if (counterClockwiseValue.isExactBygrees()) {\r\n                final int difference = getBygrees() - counterClockwiseValue.getBygrees();\r\n                return RelativeAngle.fromBygrees(difference < 0 ? difference + 256 : difference);\r\n            }\r\n            return super.getAngleCounterClockwiseTo(counterClockwiseValue);\r\n        }\r\n\r\n        @Override\r\n        public RelativeAngle counterClockwiseFromStandardOrigin() {\r\n            return counterClockwiseFromStandardOrigin;\r\n        }\r\n\r\n        @Override\r\n        public AbsoluteAngle getSupplementary() {\r\n            return fromBygrees(bygrees + 128);\r\n        }\r\n    }\r\n\r\n    @Override\r\n    public boolean equals(Object o) {\r\n        if (this == o)\r\n            return true;\r\n        if (o == null || getClass() != o.getClass())\r\n            return false;\r\n        AbsoluteAngle angle = (AbsoluteAngle) o;\r\n        if (Double.compare(angle.radians, radians) != 0)\r\n            return false;\r\n        return true;\r\n    }\r\n\r\n    @Override\r\n    public int hashCode() {\r\n        long temp = radians != +0.0d ? Double.doubleToLongBits(radians) : 0L;\r\n        return (int) (temp ^ (temp >>> 32));\r\n    }\r\n}\r\n",
		"id": "EvoSuiteBenchmark/86_at-robots2-j/src/main/java/net/virtualinfinity/atrobots/measures/AbsoluteAngleTest1.java",
		"test_prompt": "// AbsoluteAngleTest1.java\npackage net.virtualinfinity.atrobots.measures;\n\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link AbsoluteAngle}.\n* It contains ten unit test cases for the {@link AbsoluteAngle#sine()} method.\n*/\nclass AbsoluteAngleTest1 {"
	},
	{
		"original_code": "// AbsoluteAngle.java\npackage net.virtualinfinity.atrobots.measures;\r\n\r\n/**\r\n * Represents an exact angle.\r\n *\r\n * @author Daniel Pitts\r\n * @see net.virtualinfinity.atrobots.measures.RelativeAngle\r\n */\r\npublic class AbsoluteAngle {\r\n\r\n    private static final AbsoluteAngle[] bygreeTable = new AbsoluteAngle[256];\r\n\r\n    private static final double RADIANS_PER_BYGREE = Math.PI / 128.0;\r\n\r\n    private static final double BYGREES_PER_RADIANS = 128 / Math.PI;\r\n\r\n    private static final int BYGREE_MASK = 255;\r\n\r\n    private static final double FULL_CIRCLE_RADIANS = Math.PI * 2;\r\n\r\n    static {\r\n        for (int bygrees = 0; bygrees < bygreeTable.length; ++bygrees) {\r\n            bygreeTable[bygrees] = new AbsoluateBygreeAngle(bygrees);\r\n        }\r\n    }\r\n\r\n    protected boolean isExactBygrees() {\r\n        return false;\r\n    }\r\n\r\n    private final double radians;\r\n\r\n    private AbsoluteAngle(double radians) {\r\n        if (radians < 0) {\r\n            radians += FULL_CIRCLE_RADIANS;\r\n        } else if (radians >= FULL_CIRCLE_RADIANS) {\r\n            radians -= FULL_CIRCLE_RADIANS;\r\n        }\r\n        this.radians = radians;\r\n    }\r\n\r\n    public double cosine() {\r\n        return Math.cos(radians);\r\n    }\r\n\r\n    public double sine() {\r\n        return Math.sin(radians);\r\n    }\r\n\r\n    public AbsoluteAngle counterClockwise(RelativeAngle angle) {\r\n        return fromRadians(getRadians() + angle.getRadians());\r\n    }\r\n\r\n    public double getRadians() {\r\n        return radians;\r\n    }\r\n\r\n    public double getNormalizedRadians() {\r\n        if (radians >= FULL_CIRCLE_RADIANS || radians < 0) {\r\n            return Math.atan2(sine(), cosine());\r\n        }\r\n        return radians;\r\n    }\r\n\r\n    public Vector toUnitVector() {\r\n        return toVector(1);\r\n    }\r\n\r\n    public Vector toVector(double magnitude) {\r\n        return Vector.createPolar(this, magnitude);\r\n    }\r\n\r\n    public int getBygrees() {\r\n        return radiansToBygrees(getRadians());\r\n    }\r\n\r\n    public AbsoluteAngle clockwise(RelativeAngle angle) {\r\n        return fromRadians(getRadians() - angle.getRadians());\r\n    }\r\n\r\n    public byte getSignedBygrees() {\r\n        return (byte) getBygrees();\r\n    }\r\n\r\n    public boolean isClockwiseCloser(AbsoluteAngle angle) {\r\n        return getAngleCounterClockwiseTo(angle).compareTo(RelativeAngle.HALF_CIRCLE) < 0;\r\n    }\r\n\r\n    public String toString() {\r\n        return getNormalizedRadians() + \"r/\" + getBygrees();\r\n    }\r\n\r\n    public RelativeAngle counterClockwiseFromStandardOrigin() {\r\n        return RelativeAngle.fromRadians(getRadians());\r\n    }\r\n\r\n    public double getDegrees() {\r\n        return getRadians() / Math.PI * 180;\r\n    }\r\n\r\n    public RelativeAngle getAngleCounterClockwiseTo(AbsoluteAngle counterClockwiseValue) {\r\n        final double difference = getNormalizedRadians() - counterClockwiseValue.getNormalizedRadians();\r\n        return RelativeAngle.fromRadians(difference < 0 ? difference + Math.PI * 2.0 : difference);\r\n    }\r\n\r\n    public Vector projectAngle(Vector vector) {\r\n        final Vector unit = toVector(1);\r\n        return unit.times(unit.dot(vector));\r\n    }\r\n\r\n    public static AbsoluteAngle fromBygrees(int value) {\r\n        return bygreeTable[value & BYGREE_MASK];\r\n    }\r\n\r\n    public static AbsoluteAngle fromCartesian(double x, double y) {\r\n        return fromRadians(Math.atan2(y, x));\r\n    }\r\n\r\n    public static AbsoluteAngle fromRadians(double radians) {\r\n        return new AbsoluteAngle(radians);\r\n    }\r\n\r\n    private static int radiansToBygrees(double radians) {\r\n        return (int) Math.round(64 + (radians * BYGREES_PER_RADIANS)) & BYGREE_MASK;\r\n    }\r\n\r\n    private static double bygreeToRadians(int bygrees) {\r\n        return (bygrees - 64) * RADIANS_PER_BYGREE;\r\n    }\r\n\r\n    public AbsoluteAngle getSupplementary() {\r\n        return fromRadians(Math.PI + getRadians());\r\n    }\r\n\r\n    private static class AbsoluateBygreeAngle extends AbsoluteAngle {\r\n\r\n        private final double cosine;\r\n\r\n        private final double sine;\r\n\r\n        private final int bygrees;\r\n\r\n        private final byte signedBygrees;\r\n\r\n        private final double normalizedRadians;\r\n\r\n        private final double degrees;\r\n\r\n        private final RelativeAngle counterClockwiseFromStandardOrigin;\r\n\r\n        public AbsoluateBygreeAngle(int bygrees) {\r\n            super(bygreeToRadians(bygrees));\r\n            final AbsoluteAngle template = AbsoluteAngle.fromRadians(bygreeToRadians(bygrees));\r\n            switch(bygrees) {\r\n                case 0:\r\n                    this.cosine = 0;\r\n                    this.sine = -1;\r\n                    break;\r\n                case 128:\r\n                    this.cosine = 0;\r\n                    this.sine = 1;\r\n                    break;\r\n                case 192:\r\n                    this.cosine = -1;\r\n                    this.sine = 0;\r\n                    break;\r\n                default:\r\n                    this.cosine = template.cosine();\r\n                    this.sine = template.sine();\r\n                    break;\r\n            }\r\n            this.bygrees = bygrees;\r\n            this.signedBygrees = template.getSignedBygrees();\r\n            this.normalizedRadians = template.getNormalizedRadians();\r\n            this.degrees = template.getDegrees();\r\n            counterClockwiseFromStandardOrigin = RelativeAngle.fromBygrees(64 - this.bygrees);\r\n        }\r\n\r\n        @Override\r\n        public double cosine() {\r\n            return cosine;\r\n        }\r\n\r\n        @Override\r\n        public double sine() {\r\n            return sine;\r\n        }\r\n\r\n        @Override\r\n        public int getBygrees() {\r\n            return bygrees;\r\n        }\r\n\r\n        @Override\r\n        public byte getSignedBygrees() {\r\n            return signedBygrees;\r\n        }\r\n\r\n        @Override\r\n        protected boolean isExactBygrees() {\r\n            return true;\r\n        }\r\n\r\n        @Override\r\n        public double getNormalizedRadians() {\r\n            return normalizedRadians;\r\n        }\r\n\r\n        @Override\r\n        public AbsoluteAngle counterClockwise(RelativeAngle angle) {\r\n            if (angle.isExactBygrees()) {\r\n                return fromBygrees(getBygrees() + angle.getBygrees());\r\n            }\r\n            return super.counterClockwise(angle);\r\n        }\r\n\r\n        @Override\r\n        public AbsoluteAngle clockwise(RelativeAngle angle) {\r\n            if (angle.isExactBygrees()) {\r\n                return fromBygrees(getBygrees() - angle.getBygrees());\r\n            }\r\n            return super.clockwise(angle);\r\n        }\r\n\r\n        @Override\r\n        public double getDegrees() {\r\n            return degrees;\r\n        }\r\n\r\n        @Override\r\n        public RelativeAngle getAngleCounterClockwiseTo(AbsoluteAngle counterClockwiseValue) {\r\n            if (counterClockwiseValue.isExactBygrees()) {\r\n                final int difference = getBygrees() - counterClockwiseValue.getBygrees();\r\n                return RelativeAngle.fromBygrees(difference < 0 ? difference + 256 : difference);\r\n            }\r\n            return super.getAngleCounterClockwiseTo(counterClockwiseValue);\r\n        }\r\n\r\n        @Override\r\n        public RelativeAngle counterClockwiseFromStandardOrigin() {\r\n            return counterClockwiseFromStandardOrigin;\r\n        }\r\n\r\n        @Override\r\n        public AbsoluteAngle getSupplementary() {\r\n            return fromBygrees(bygrees + 128);\r\n        }\r\n    }\r\n\r\n    @Override\r\n    public boolean equals(Object o) {\r\n        if (this == o)\r\n            return true;\r\n        if (o == null || getClass() != o.getClass())\r\n            return false;\r\n        AbsoluteAngle angle = (AbsoluteAngle) o;\r\n        if (Double.compare(angle.radians, radians) != 0)\r\n            return false;\r\n        return true;\r\n    }\r\n\r\n    @Override\r\n    public int hashCode() {\r\n        long temp = radians != +0.0d ? Double.doubleToLongBits(radians) : 0L;\r\n        return (int) (temp ^ (temp >>> 32));\r\n    }\r\n}\r\n",
		"id": "EvoSuiteBenchmark/86_at-robots2-j/src/main/java/net/virtualinfinity/atrobots/measures/AbsoluteAngleTest2.java",
		"test_prompt": "// AbsoluteAngleTest2.java\npackage net.virtualinfinity.atrobots.measures;\n\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link AbsoluteAngle}.\n* It contains ten unit test cases for the {@link AbsoluteAngle#counterClockwise(RelativeAngle)} method.\n*/\nclass AbsoluteAngleTest2 {"
	},
	{
		"original_code": "// AbsoluteAngle.java\npackage net.virtualinfinity.atrobots.measures;\r\n\r\n/**\r\n * Represents an exact angle.\r\n *\r\n * @author Daniel Pitts\r\n * @see net.virtualinfinity.atrobots.measures.RelativeAngle\r\n */\r\npublic class AbsoluteAngle {\r\n\r\n    private static final AbsoluteAngle[] bygreeTable = new AbsoluteAngle[256];\r\n\r\n    private static final double RADIANS_PER_BYGREE = Math.PI / 128.0;\r\n\r\n    private static final double BYGREES_PER_RADIANS = 128 / Math.PI;\r\n\r\n    private static final int BYGREE_MASK = 255;\r\n\r\n    private static final double FULL_CIRCLE_RADIANS = Math.PI * 2;\r\n\r\n    static {\r\n        for (int bygrees = 0; bygrees < bygreeTable.length; ++bygrees) {\r\n            bygreeTable[bygrees] = new AbsoluateBygreeAngle(bygrees);\r\n        }\r\n    }\r\n\r\n    protected boolean isExactBygrees() {\r\n        return false;\r\n    }\r\n\r\n    private final double radians;\r\n\r\n    private AbsoluteAngle(double radians) {\r\n        if (radians < 0) {\r\n            radians += FULL_CIRCLE_RADIANS;\r\n        } else if (radians >= FULL_CIRCLE_RADIANS) {\r\n            radians -= FULL_CIRCLE_RADIANS;\r\n        }\r\n        this.radians = radians;\r\n    }\r\n\r\n    public double cosine() {\r\n        return Math.cos(radians);\r\n    }\r\n\r\n    public double sine() {\r\n        return Math.sin(radians);\r\n    }\r\n\r\n    public AbsoluteAngle counterClockwise(RelativeAngle angle) {\r\n        return fromRadians(getRadians() + angle.getRadians());\r\n    }\r\n\r\n    public double getRadians() {\r\n        return radians;\r\n    }\r\n\r\n    public double getNormalizedRadians() {\r\n        if (radians >= FULL_CIRCLE_RADIANS || radians < 0) {\r\n            return Math.atan2(sine(), cosine());\r\n        }\r\n        return radians;\r\n    }\r\n\r\n    public Vector toUnitVector() {\r\n        return toVector(1);\r\n    }\r\n\r\n    public Vector toVector(double magnitude) {\r\n        return Vector.createPolar(this, magnitude);\r\n    }\r\n\r\n    public int getBygrees() {\r\n        return radiansToBygrees(getRadians());\r\n    }\r\n\r\n    public AbsoluteAngle clockwise(RelativeAngle angle) {\r\n        return fromRadians(getRadians() - angle.getRadians());\r\n    }\r\n\r\n    public byte getSignedBygrees() {\r\n        return (byte) getBygrees();\r\n    }\r\n\r\n    public boolean isClockwiseCloser(AbsoluteAngle angle) {\r\n        return getAngleCounterClockwiseTo(angle).compareTo(RelativeAngle.HALF_CIRCLE) < 0;\r\n    }\r\n\r\n    public String toString() {\r\n        return getNormalizedRadians() + \"r/\" + getBygrees();\r\n    }\r\n\r\n    public RelativeAngle counterClockwiseFromStandardOrigin() {\r\n        return RelativeAngle.fromRadians(getRadians());\r\n    }\r\n\r\n    public double getDegrees() {\r\n        return getRadians() / Math.PI * 180;\r\n    }\r\n\r\n    public RelativeAngle getAngleCounterClockwiseTo(AbsoluteAngle counterClockwiseValue) {\r\n        final double difference = getNormalizedRadians() - counterClockwiseValue.getNormalizedRadians();\r\n        return RelativeAngle.fromRadians(difference < 0 ? difference + Math.PI * 2.0 : difference);\r\n    }\r\n\r\n    public Vector projectAngle(Vector vector) {\r\n        final Vector unit = toVector(1);\r\n        return unit.times(unit.dot(vector));\r\n    }\r\n\r\n    public static AbsoluteAngle fromBygrees(int value) {\r\n        return bygreeTable[value & BYGREE_MASK];\r\n    }\r\n\r\n    public static AbsoluteAngle fromCartesian(double x, double y) {\r\n        return fromRadians(Math.atan2(y, x));\r\n    }\r\n\r\n    public static AbsoluteAngle fromRadians(double radians) {\r\n        return new AbsoluteAngle(radians);\r\n    }\r\n\r\n    private static int radiansToBygrees(double radians) {\r\n        return (int) Math.round(64 + (radians * BYGREES_PER_RADIANS)) & BYGREE_MASK;\r\n    }\r\n\r\n    private static double bygreeToRadians(int bygrees) {\r\n        return (bygrees - 64) * RADIANS_PER_BYGREE;\r\n    }\r\n\r\n    public AbsoluteAngle getSupplementary() {\r\n        return fromRadians(Math.PI + getRadians());\r\n    }\r\n\r\n    private static class AbsoluateBygreeAngle extends AbsoluteAngle {\r\n\r\n        private final double cosine;\r\n\r\n        private final double sine;\r\n\r\n        private final int bygrees;\r\n\r\n        private final byte signedBygrees;\r\n\r\n        private final double normalizedRadians;\r\n\r\n        private final double degrees;\r\n\r\n        private final RelativeAngle counterClockwiseFromStandardOrigin;\r\n\r\n        public AbsoluateBygreeAngle(int bygrees) {\r\n            super(bygreeToRadians(bygrees));\r\n            final AbsoluteAngle template = AbsoluteAngle.fromRadians(bygreeToRadians(bygrees));\r\n            switch(bygrees) {\r\n                case 0:\r\n                    this.cosine = 0;\r\n                    this.sine = -1;\r\n                    break;\r\n                case 128:\r\n                    this.cosine = 0;\r\n                    this.sine = 1;\r\n                    break;\r\n                case 192:\r\n                    this.cosine = -1;\r\n                    this.sine = 0;\r\n                    break;\r\n                default:\r\n                    this.cosine = template.cosine();\r\n                    this.sine = template.sine();\r\n                    break;\r\n            }\r\n            this.bygrees = bygrees;\r\n            this.signedBygrees = template.getSignedBygrees();\r\n            this.normalizedRadians = template.getNormalizedRadians();\r\n            this.degrees = template.getDegrees();\r\n            counterClockwiseFromStandardOrigin = RelativeAngle.fromBygrees(64 - this.bygrees);\r\n        }\r\n\r\n        @Override\r\n        public double cosine() {\r\n            return cosine;\r\n        }\r\n\r\n        @Override\r\n        public double sine() {\r\n            return sine;\r\n        }\r\n\r\n        @Override\r\n        public int getBygrees() {\r\n            return bygrees;\r\n        }\r\n\r\n        @Override\r\n        public byte getSignedBygrees() {\r\n            return signedBygrees;\r\n        }\r\n\r\n        @Override\r\n        protected boolean isExactBygrees() {\r\n            return true;\r\n        }\r\n\r\n        @Override\r\n        public double getNormalizedRadians() {\r\n            return normalizedRadians;\r\n        }\r\n\r\n        @Override\r\n        public AbsoluteAngle counterClockwise(RelativeAngle angle) {\r\n            if (angle.isExactBygrees()) {\r\n                return fromBygrees(getBygrees() + angle.getBygrees());\r\n            }\r\n            return super.counterClockwise(angle);\r\n        }\r\n\r\n        @Override\r\n        public AbsoluteAngle clockwise(RelativeAngle angle) {\r\n            if (angle.isExactBygrees()) {\r\n                return fromBygrees(getBygrees() - angle.getBygrees());\r\n            }\r\n            return super.clockwise(angle);\r\n        }\r\n\r\n        @Override\r\n        public double getDegrees() {\r\n            return degrees;\r\n        }\r\n\r\n        @Override\r\n        public RelativeAngle getAngleCounterClockwiseTo(AbsoluteAngle counterClockwiseValue) {\r\n            if (counterClockwiseValue.isExactBygrees()) {\r\n                final int difference = getBygrees() - counterClockwiseValue.getBygrees();\r\n                return RelativeAngle.fromBygrees(difference < 0 ? difference + 256 : difference);\r\n            }\r\n            return super.getAngleCounterClockwiseTo(counterClockwiseValue);\r\n        }\r\n\r\n        @Override\r\n        public RelativeAngle counterClockwiseFromStandardOrigin() {\r\n            return counterClockwiseFromStandardOrigin;\r\n        }\r\n\r\n        @Override\r\n        public AbsoluteAngle getSupplementary() {\r\n            return fromBygrees(bygrees + 128);\r\n        }\r\n    }\r\n\r\n    @Override\r\n    public boolean equals(Object o) {\r\n        if (this == o)\r\n            return true;\r\n        if (o == null || getClass() != o.getClass())\r\n            return false;\r\n        AbsoluteAngle angle = (AbsoluteAngle) o;\r\n        if (Double.compare(angle.radians, radians) != 0)\r\n            return false;\r\n        return true;\r\n    }\r\n\r\n    @Override\r\n    public int hashCode() {\r\n        long temp = radians != +0.0d ? Double.doubleToLongBits(radians) : 0L;\r\n        return (int) (temp ^ (temp >>> 32));\r\n    }\r\n}\r\n",
		"id": "EvoSuiteBenchmark/86_at-robots2-j/src/main/java/net/virtualinfinity/atrobots/measures/AbsoluteAngleTest3.java",
		"test_prompt": "// AbsoluteAngleTest3.java\npackage net.virtualinfinity.atrobots.measures;\n\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link AbsoluteAngle}.\n* It contains ten unit test cases for the {@link AbsoluteAngle#toUnitVector()} method.\n*/\nclass AbsoluteAngleTest3 {"
	},
	{
		"original_code": "// AbsoluteAngle.java\npackage net.virtualinfinity.atrobots.measures;\r\n\r\n/**\r\n * Represents an exact angle.\r\n *\r\n * @author Daniel Pitts\r\n * @see net.virtualinfinity.atrobots.measures.RelativeAngle\r\n */\r\npublic class AbsoluteAngle {\r\n\r\n    private static final AbsoluteAngle[] bygreeTable = new AbsoluteAngle[256];\r\n\r\n    private static final double RADIANS_PER_BYGREE = Math.PI / 128.0;\r\n\r\n    private static final double BYGREES_PER_RADIANS = 128 / Math.PI;\r\n\r\n    private static final int BYGREE_MASK = 255;\r\n\r\n    private static final double FULL_CIRCLE_RADIANS = Math.PI * 2;\r\n\r\n    static {\r\n        for (int bygrees = 0; bygrees < bygreeTable.length; ++bygrees) {\r\n            bygreeTable[bygrees] = new AbsoluateBygreeAngle(bygrees);\r\n        }\r\n    }\r\n\r\n    protected boolean isExactBygrees() {\r\n        return false;\r\n    }\r\n\r\n    private final double radians;\r\n\r\n    private AbsoluteAngle(double radians) {\r\n        if (radians < 0) {\r\n            radians += FULL_CIRCLE_RADIANS;\r\n        } else if (radians >= FULL_CIRCLE_RADIANS) {\r\n            radians -= FULL_CIRCLE_RADIANS;\r\n        }\r\n        this.radians = radians;\r\n    }\r\n\r\n    public double cosine() {\r\n        return Math.cos(radians);\r\n    }\r\n\r\n    public double sine() {\r\n        return Math.sin(radians);\r\n    }\r\n\r\n    public AbsoluteAngle counterClockwise(RelativeAngle angle) {\r\n        return fromRadians(getRadians() + angle.getRadians());\r\n    }\r\n\r\n    public double getRadians() {\r\n        return radians;\r\n    }\r\n\r\n    public double getNormalizedRadians() {\r\n        if (radians >= FULL_CIRCLE_RADIANS || radians < 0) {\r\n            return Math.atan2(sine(), cosine());\r\n        }\r\n        return radians;\r\n    }\r\n\r\n    public Vector toUnitVector() {\r\n        return toVector(1);\r\n    }\r\n\r\n    public Vector toVector(double magnitude) {\r\n        return Vector.createPolar(this, magnitude);\r\n    }\r\n\r\n    public int getBygrees() {\r\n        return radiansToBygrees(getRadians());\r\n    }\r\n\r\n    public AbsoluteAngle clockwise(RelativeAngle angle) {\r\n        return fromRadians(getRadians() - angle.getRadians());\r\n    }\r\n\r\n    public byte getSignedBygrees() {\r\n        return (byte) getBygrees();\r\n    }\r\n\r\n    public boolean isClockwiseCloser(AbsoluteAngle angle) {\r\n        return getAngleCounterClockwiseTo(angle).compareTo(RelativeAngle.HALF_CIRCLE) < 0;\r\n    }\r\n\r\n    public String toString() {\r\n        return getNormalizedRadians() + \"r/\" + getBygrees();\r\n    }\r\n\r\n    public RelativeAngle counterClockwiseFromStandardOrigin() {\r\n        return RelativeAngle.fromRadians(getRadians());\r\n    }\r\n\r\n    public double getDegrees() {\r\n        return getRadians() / Math.PI * 180;\r\n    }\r\n\r\n    public RelativeAngle getAngleCounterClockwiseTo(AbsoluteAngle counterClockwiseValue) {\r\n        final double difference = getNormalizedRadians() - counterClockwiseValue.getNormalizedRadians();\r\n        return RelativeAngle.fromRadians(difference < 0 ? difference + Math.PI * 2.0 : difference);\r\n    }\r\n\r\n    public Vector projectAngle(Vector vector) {\r\n        final Vector unit = toVector(1);\r\n        return unit.times(unit.dot(vector));\r\n    }\r\n\r\n    public static AbsoluteAngle fromBygrees(int value) {\r\n        return bygreeTable[value & BYGREE_MASK];\r\n    }\r\n\r\n    public static AbsoluteAngle fromCartesian(double x, double y) {\r\n        return fromRadians(Math.atan2(y, x));\r\n    }\r\n\r\n    public static AbsoluteAngle fromRadians(double radians) {\r\n        return new AbsoluteAngle(radians);\r\n    }\r\n\r\n    private static int radiansToBygrees(double radians) {\r\n        return (int) Math.round(64 + (radians * BYGREES_PER_RADIANS)) & BYGREE_MASK;\r\n    }\r\n\r\n    private static double bygreeToRadians(int bygrees) {\r\n        return (bygrees - 64) * RADIANS_PER_BYGREE;\r\n    }\r\n\r\n    public AbsoluteAngle getSupplementary() {\r\n        return fromRadians(Math.PI + getRadians());\r\n    }\r\n\r\n    private static class AbsoluateBygreeAngle extends AbsoluteAngle {\r\n\r\n        private final double cosine;\r\n\r\n        private final double sine;\r\n\r\n        private final int bygrees;\r\n\r\n        private final byte signedBygrees;\r\n\r\n        private final double normalizedRadians;\r\n\r\n        private final double degrees;\r\n\r\n        private final RelativeAngle counterClockwiseFromStandardOrigin;\r\n\r\n        public AbsoluateBygreeAngle(int bygrees) {\r\n            super(bygreeToRadians(bygrees));\r\n            final AbsoluteAngle template = AbsoluteAngle.fromRadians(bygreeToRadians(bygrees));\r\n            switch(bygrees) {\r\n                case 0:\r\n                    this.cosine = 0;\r\n                    this.sine = -1;\r\n                    break;\r\n                case 128:\r\n                    this.cosine = 0;\r\n                    this.sine = 1;\r\n                    break;\r\n                case 192:\r\n                    this.cosine = -1;\r\n                    this.sine = 0;\r\n                    break;\r\n                default:\r\n                    this.cosine = template.cosine();\r\n                    this.sine = template.sine();\r\n                    break;\r\n            }\r\n            this.bygrees = bygrees;\r\n            this.signedBygrees = template.getSignedBygrees();\r\n            this.normalizedRadians = template.getNormalizedRadians();\r\n            this.degrees = template.getDegrees();\r\n            counterClockwiseFromStandardOrigin = RelativeAngle.fromBygrees(64 - this.bygrees);\r\n        }\r\n\r\n        @Override\r\n        public double cosine() {\r\n            return cosine;\r\n        }\r\n\r\n        @Override\r\n        public double sine() {\r\n            return sine;\r\n        }\r\n\r\n        @Override\r\n        public int getBygrees() {\r\n            return bygrees;\r\n        }\r\n\r\n        @Override\r\n        public byte getSignedBygrees() {\r\n            return signedBygrees;\r\n        }\r\n\r\n        @Override\r\n        protected boolean isExactBygrees() {\r\n            return true;\r\n        }\r\n\r\n        @Override\r\n        public double getNormalizedRadians() {\r\n            return normalizedRadians;\r\n        }\r\n\r\n        @Override\r\n        public AbsoluteAngle counterClockwise(RelativeAngle angle) {\r\n            if (angle.isExactBygrees()) {\r\n                return fromBygrees(getBygrees() + angle.getBygrees());\r\n            }\r\n            return super.counterClockwise(angle);\r\n        }\r\n\r\n        @Override\r\n        public AbsoluteAngle clockwise(RelativeAngle angle) {\r\n            if (angle.isExactBygrees()) {\r\n                return fromBygrees(getBygrees() - angle.getBygrees());\r\n            }\r\n            return super.clockwise(angle);\r\n        }\r\n\r\n        @Override\r\n        public double getDegrees() {\r\n            return degrees;\r\n        }\r\n\r\n        @Override\r\n        public RelativeAngle getAngleCounterClockwiseTo(AbsoluteAngle counterClockwiseValue) {\r\n            if (counterClockwiseValue.isExactBygrees()) {\r\n                final int difference = getBygrees() - counterClockwiseValue.getBygrees();\r\n                return RelativeAngle.fromBygrees(difference < 0 ? difference + 256 : difference);\r\n            }\r\n            return super.getAngleCounterClockwiseTo(counterClockwiseValue);\r\n        }\r\n\r\n        @Override\r\n        public RelativeAngle counterClockwiseFromStandardOrigin() {\r\n            return counterClockwiseFromStandardOrigin;\r\n        }\r\n\r\n        @Override\r\n        public AbsoluteAngle getSupplementary() {\r\n            return fromBygrees(bygrees + 128);\r\n        }\r\n    }\r\n\r\n    @Override\r\n    public boolean equals(Object o) {\r\n        if (this == o)\r\n            return true;\r\n        if (o == null || getClass() != o.getClass())\r\n            return false;\r\n        AbsoluteAngle angle = (AbsoluteAngle) o;\r\n        if (Double.compare(angle.radians, radians) != 0)\r\n            return false;\r\n        return true;\r\n    }\r\n\r\n    @Override\r\n    public int hashCode() {\r\n        long temp = radians != +0.0d ? Double.doubleToLongBits(radians) : 0L;\r\n        return (int) (temp ^ (temp >>> 32));\r\n    }\r\n}\r\n",
		"id": "EvoSuiteBenchmark/86_at-robots2-j/src/main/java/net/virtualinfinity/atrobots/measures/AbsoluteAngleTest4.java",
		"test_prompt": "// AbsoluteAngleTest4.java\npackage net.virtualinfinity.atrobots.measures;\n\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link AbsoluteAngle}.\n* It contains ten unit test cases for the {@link AbsoluteAngle#toVector(double)} method.\n*/\nclass AbsoluteAngleTest4 {"
	},
	{
		"original_code": "// AbsoluteAngle.java\npackage net.virtualinfinity.atrobots.measures;\r\n\r\n/**\r\n * Represents an exact angle.\r\n *\r\n * @author Daniel Pitts\r\n * @see net.virtualinfinity.atrobots.measures.RelativeAngle\r\n */\r\npublic class AbsoluteAngle {\r\n\r\n    private static final AbsoluteAngle[] bygreeTable = new AbsoluteAngle[256];\r\n\r\n    private static final double RADIANS_PER_BYGREE = Math.PI / 128.0;\r\n\r\n    private static final double BYGREES_PER_RADIANS = 128 / Math.PI;\r\n\r\n    private static final int BYGREE_MASK = 255;\r\n\r\n    private static final double FULL_CIRCLE_RADIANS = Math.PI * 2;\r\n\r\n    static {\r\n        for (int bygrees = 0; bygrees < bygreeTable.length; ++bygrees) {\r\n            bygreeTable[bygrees] = new AbsoluateBygreeAngle(bygrees);\r\n        }\r\n    }\r\n\r\n    protected boolean isExactBygrees() {\r\n        return false;\r\n    }\r\n\r\n    private final double radians;\r\n\r\n    private AbsoluteAngle(double radians) {\r\n        if (radians < 0) {\r\n            radians += FULL_CIRCLE_RADIANS;\r\n        } else if (radians >= FULL_CIRCLE_RADIANS) {\r\n            radians -= FULL_CIRCLE_RADIANS;\r\n        }\r\n        this.radians = radians;\r\n    }\r\n\r\n    public double cosine() {\r\n        return Math.cos(radians);\r\n    }\r\n\r\n    public double sine() {\r\n        return Math.sin(radians);\r\n    }\r\n\r\n    public AbsoluteAngle counterClockwise(RelativeAngle angle) {\r\n        return fromRadians(getRadians() + angle.getRadians());\r\n    }\r\n\r\n    public double getRadians() {\r\n        return radians;\r\n    }\r\n\r\n    public double getNormalizedRadians() {\r\n        if (radians >= FULL_CIRCLE_RADIANS || radians < 0) {\r\n            return Math.atan2(sine(), cosine());\r\n        }\r\n        return radians;\r\n    }\r\n\r\n    public Vector toUnitVector() {\r\n        return toVector(1);\r\n    }\r\n\r\n    public Vector toVector(double magnitude) {\r\n        return Vector.createPolar(this, magnitude);\r\n    }\r\n\r\n    public int getBygrees() {\r\n        return radiansToBygrees(getRadians());\r\n    }\r\n\r\n    public AbsoluteAngle clockwise(RelativeAngle angle) {\r\n        return fromRadians(getRadians() - angle.getRadians());\r\n    }\r\n\r\n    public byte getSignedBygrees() {\r\n        return (byte) getBygrees();\r\n    }\r\n\r\n    public boolean isClockwiseCloser(AbsoluteAngle angle) {\r\n        return getAngleCounterClockwiseTo(angle).compareTo(RelativeAngle.HALF_CIRCLE) < 0;\r\n    }\r\n\r\n    public String toString() {\r\n        return getNormalizedRadians() + \"r/\" + getBygrees();\r\n    }\r\n\r\n    public RelativeAngle counterClockwiseFromStandardOrigin() {\r\n        return RelativeAngle.fromRadians(getRadians());\r\n    }\r\n\r\n    public double getDegrees() {\r\n        return getRadians() / Math.PI * 180;\r\n    }\r\n\r\n    public RelativeAngle getAngleCounterClockwiseTo(AbsoluteAngle counterClockwiseValue) {\r\n        final double difference = getNormalizedRadians() - counterClockwiseValue.getNormalizedRadians();\r\n        return RelativeAngle.fromRadians(difference < 0 ? difference + Math.PI * 2.0 : difference);\r\n    }\r\n\r\n    public Vector projectAngle(Vector vector) {\r\n        final Vector unit = toVector(1);\r\n        return unit.times(unit.dot(vector));\r\n    }\r\n\r\n    public static AbsoluteAngle fromBygrees(int value) {\r\n        return bygreeTable[value & BYGREE_MASK];\r\n    }\r\n\r\n    public static AbsoluteAngle fromCartesian(double x, double y) {\r\n        return fromRadians(Math.atan2(y, x));\r\n    }\r\n\r\n    public static AbsoluteAngle fromRadians(double radians) {\r\n        return new AbsoluteAngle(radians);\r\n    }\r\n\r\n    private static int radiansToBygrees(double radians) {\r\n        return (int) Math.round(64 + (radians * BYGREES_PER_RADIANS)) & BYGREE_MASK;\r\n    }\r\n\r\n    private static double bygreeToRadians(int bygrees) {\r\n        return (bygrees - 64) * RADIANS_PER_BYGREE;\r\n    }\r\n\r\n    public AbsoluteAngle getSupplementary() {\r\n        return fromRadians(Math.PI + getRadians());\r\n    }\r\n\r\n    private static class AbsoluateBygreeAngle extends AbsoluteAngle {\r\n\r\n        private final double cosine;\r\n\r\n        private final double sine;\r\n\r\n        private final int bygrees;\r\n\r\n        private final byte signedBygrees;\r\n\r\n        private final double normalizedRadians;\r\n\r\n        private final double degrees;\r\n\r\n        private final RelativeAngle counterClockwiseFromStandardOrigin;\r\n\r\n        public AbsoluateBygreeAngle(int bygrees) {\r\n            super(bygreeToRadians(bygrees));\r\n            final AbsoluteAngle template = AbsoluteAngle.fromRadians(bygreeToRadians(bygrees));\r\n            switch(bygrees) {\r\n                case 0:\r\n                    this.cosine = 0;\r\n                    this.sine = -1;\r\n                    break;\r\n                case 128:\r\n                    this.cosine = 0;\r\n                    this.sine = 1;\r\n                    break;\r\n                case 192:\r\n                    this.cosine = -1;\r\n                    this.sine = 0;\r\n                    break;\r\n                default:\r\n                    this.cosine = template.cosine();\r\n                    this.sine = template.sine();\r\n                    break;\r\n            }\r\n            this.bygrees = bygrees;\r\n            this.signedBygrees = template.getSignedBygrees();\r\n            this.normalizedRadians = template.getNormalizedRadians();\r\n            this.degrees = template.getDegrees();\r\n            counterClockwiseFromStandardOrigin = RelativeAngle.fromBygrees(64 - this.bygrees);\r\n        }\r\n\r\n        @Override\r\n        public double cosine() {\r\n            return cosine;\r\n        }\r\n\r\n        @Override\r\n        public double sine() {\r\n            return sine;\r\n        }\r\n\r\n        @Override\r\n        public int getBygrees() {\r\n            return bygrees;\r\n        }\r\n\r\n        @Override\r\n        public byte getSignedBygrees() {\r\n            return signedBygrees;\r\n        }\r\n\r\n        @Override\r\n        protected boolean isExactBygrees() {\r\n            return true;\r\n        }\r\n\r\n        @Override\r\n        public double getNormalizedRadians() {\r\n            return normalizedRadians;\r\n        }\r\n\r\n        @Override\r\n        public AbsoluteAngle counterClockwise(RelativeAngle angle) {\r\n            if (angle.isExactBygrees()) {\r\n                return fromBygrees(getBygrees() + angle.getBygrees());\r\n            }\r\n            return super.counterClockwise(angle);\r\n        }\r\n\r\n        @Override\r\n        public AbsoluteAngle clockwise(RelativeAngle angle) {\r\n            if (angle.isExactBygrees()) {\r\n                return fromBygrees(getBygrees() - angle.getBygrees());\r\n            }\r\n            return super.clockwise(angle);\r\n        }\r\n\r\n        @Override\r\n        public double getDegrees() {\r\n            return degrees;\r\n        }\r\n\r\n        @Override\r\n        public RelativeAngle getAngleCounterClockwiseTo(AbsoluteAngle counterClockwiseValue) {\r\n            if (counterClockwiseValue.isExactBygrees()) {\r\n                final int difference = getBygrees() - counterClockwiseValue.getBygrees();\r\n                return RelativeAngle.fromBygrees(difference < 0 ? difference + 256 : difference);\r\n            }\r\n            return super.getAngleCounterClockwiseTo(counterClockwiseValue);\r\n        }\r\n\r\n        @Override\r\n        public RelativeAngle counterClockwiseFromStandardOrigin() {\r\n            return counterClockwiseFromStandardOrigin;\r\n        }\r\n\r\n        @Override\r\n        public AbsoluteAngle getSupplementary() {\r\n            return fromBygrees(bygrees + 128);\r\n        }\r\n    }\r\n\r\n    @Override\r\n    public boolean equals(Object o) {\r\n        if (this == o)\r\n            return true;\r\n        if (o == null || getClass() != o.getClass())\r\n            return false;\r\n        AbsoluteAngle angle = (AbsoluteAngle) o;\r\n        if (Double.compare(angle.radians, radians) != 0)\r\n            return false;\r\n        return true;\r\n    }\r\n\r\n    @Override\r\n    public int hashCode() {\r\n        long temp = radians != +0.0d ? Double.doubleToLongBits(radians) : 0L;\r\n        return (int) (temp ^ (temp >>> 32));\r\n    }\r\n}\r\n",
		"id": "EvoSuiteBenchmark/86_at-robots2-j/src/main/java/net/virtualinfinity/atrobots/measures/AbsoluteAngleTest5.java",
		"test_prompt": "// AbsoluteAngleTest5.java\npackage net.virtualinfinity.atrobots.measures;\n\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link AbsoluteAngle}.\n* It contains ten unit test cases for the {@link AbsoluteAngle#clockwise(RelativeAngle)} method.\n*/\nclass AbsoluteAngleTest5 {"
	},
	{
		"original_code": "// AbsoluteAngle.java\npackage net.virtualinfinity.atrobots.measures;\r\n\r\n/**\r\n * Represents an exact angle.\r\n *\r\n * @author Daniel Pitts\r\n * @see net.virtualinfinity.atrobots.measures.RelativeAngle\r\n */\r\npublic class AbsoluteAngle {\r\n\r\n    private static final AbsoluteAngle[] bygreeTable = new AbsoluteAngle[256];\r\n\r\n    private static final double RADIANS_PER_BYGREE = Math.PI / 128.0;\r\n\r\n    private static final double BYGREES_PER_RADIANS = 128 / Math.PI;\r\n\r\n    private static final int BYGREE_MASK = 255;\r\n\r\n    private static final double FULL_CIRCLE_RADIANS = Math.PI * 2;\r\n\r\n    static {\r\n        for (int bygrees = 0; bygrees < bygreeTable.length; ++bygrees) {\r\n            bygreeTable[bygrees] = new AbsoluateBygreeAngle(bygrees);\r\n        }\r\n    }\r\n\r\n    protected boolean isExactBygrees() {\r\n        return false;\r\n    }\r\n\r\n    private final double radians;\r\n\r\n    private AbsoluteAngle(double radians) {\r\n        if (radians < 0) {\r\n            radians += FULL_CIRCLE_RADIANS;\r\n        } else if (radians >= FULL_CIRCLE_RADIANS) {\r\n            radians -= FULL_CIRCLE_RADIANS;\r\n        }\r\n        this.radians = radians;\r\n    }\r\n\r\n    public double cosine() {\r\n        return Math.cos(radians);\r\n    }\r\n\r\n    public double sine() {\r\n        return Math.sin(radians);\r\n    }\r\n\r\n    public AbsoluteAngle counterClockwise(RelativeAngle angle) {\r\n        return fromRadians(getRadians() + angle.getRadians());\r\n    }\r\n\r\n    public double getRadians() {\r\n        return radians;\r\n    }\r\n\r\n    public double getNormalizedRadians() {\r\n        if (radians >= FULL_CIRCLE_RADIANS || radians < 0) {\r\n            return Math.atan2(sine(), cosine());\r\n        }\r\n        return radians;\r\n    }\r\n\r\n    public Vector toUnitVector() {\r\n        return toVector(1);\r\n    }\r\n\r\n    public Vector toVector(double magnitude) {\r\n        return Vector.createPolar(this, magnitude);\r\n    }\r\n\r\n    public int getBygrees() {\r\n        return radiansToBygrees(getRadians());\r\n    }\r\n\r\n    public AbsoluteAngle clockwise(RelativeAngle angle) {\r\n        return fromRadians(getRadians() - angle.getRadians());\r\n    }\r\n\r\n    public byte getSignedBygrees() {\r\n        return (byte) getBygrees();\r\n    }\r\n\r\n    public boolean isClockwiseCloser(AbsoluteAngle angle) {\r\n        return getAngleCounterClockwiseTo(angle).compareTo(RelativeAngle.HALF_CIRCLE) < 0;\r\n    }\r\n\r\n    public String toString() {\r\n        return getNormalizedRadians() + \"r/\" + getBygrees();\r\n    }\r\n\r\n    public RelativeAngle counterClockwiseFromStandardOrigin() {\r\n        return RelativeAngle.fromRadians(getRadians());\r\n    }\r\n\r\n    public double getDegrees() {\r\n        return getRadians() / Math.PI * 180;\r\n    }\r\n\r\n    public RelativeAngle getAngleCounterClockwiseTo(AbsoluteAngle counterClockwiseValue) {\r\n        final double difference = getNormalizedRadians() - counterClockwiseValue.getNormalizedRadians();\r\n        return RelativeAngle.fromRadians(difference < 0 ? difference + Math.PI * 2.0 : difference);\r\n    }\r\n\r\n    public Vector projectAngle(Vector vector) {\r\n        final Vector unit = toVector(1);\r\n        return unit.times(unit.dot(vector));\r\n    }\r\n\r\n    public static AbsoluteAngle fromBygrees(int value) {\r\n        return bygreeTable[value & BYGREE_MASK];\r\n    }\r\n\r\n    public static AbsoluteAngle fromCartesian(double x, double y) {\r\n        return fromRadians(Math.atan2(y, x));\r\n    }\r\n\r\n    public static AbsoluteAngle fromRadians(double radians) {\r\n        return new AbsoluteAngle(radians);\r\n    }\r\n\r\n    private static int radiansToBygrees(double radians) {\r\n        return (int) Math.round(64 + (radians * BYGREES_PER_RADIANS)) & BYGREE_MASK;\r\n    }\r\n\r\n    private static double bygreeToRadians(int bygrees) {\r\n        return (bygrees - 64) * RADIANS_PER_BYGREE;\r\n    }\r\n\r\n    public AbsoluteAngle getSupplementary() {\r\n        return fromRadians(Math.PI + getRadians());\r\n    }\r\n\r\n    private static class AbsoluateBygreeAngle extends AbsoluteAngle {\r\n\r\n        private final double cosine;\r\n\r\n        private final double sine;\r\n\r\n        private final int bygrees;\r\n\r\n        private final byte signedBygrees;\r\n\r\n        private final double normalizedRadians;\r\n\r\n        private final double degrees;\r\n\r\n        private final RelativeAngle counterClockwiseFromStandardOrigin;\r\n\r\n        public AbsoluateBygreeAngle(int bygrees) {\r\n            super(bygreeToRadians(bygrees));\r\n            final AbsoluteAngle template = AbsoluteAngle.fromRadians(bygreeToRadians(bygrees));\r\n            switch(bygrees) {\r\n                case 0:\r\n                    this.cosine = 0;\r\n                    this.sine = -1;\r\n                    break;\r\n                case 128:\r\n                    this.cosine = 0;\r\n                    this.sine = 1;\r\n                    break;\r\n                case 192:\r\n                    this.cosine = -1;\r\n                    this.sine = 0;\r\n                    break;\r\n                default:\r\n                    this.cosine = template.cosine();\r\n                    this.sine = template.sine();\r\n                    break;\r\n            }\r\n            this.bygrees = bygrees;\r\n            this.signedBygrees = template.getSignedBygrees();\r\n            this.normalizedRadians = template.getNormalizedRadians();\r\n            this.degrees = template.getDegrees();\r\n            counterClockwiseFromStandardOrigin = RelativeAngle.fromBygrees(64 - this.bygrees);\r\n        }\r\n\r\n        @Override\r\n        public double cosine() {\r\n            return cosine;\r\n        }\r\n\r\n        @Override\r\n        public double sine() {\r\n            return sine;\r\n        }\r\n\r\n        @Override\r\n        public int getBygrees() {\r\n            return bygrees;\r\n        }\r\n\r\n        @Override\r\n        public byte getSignedBygrees() {\r\n            return signedBygrees;\r\n        }\r\n\r\n        @Override\r\n        protected boolean isExactBygrees() {\r\n            return true;\r\n        }\r\n\r\n        @Override\r\n        public double getNormalizedRadians() {\r\n            return normalizedRadians;\r\n        }\r\n\r\n        @Override\r\n        public AbsoluteAngle counterClockwise(RelativeAngle angle) {\r\n            if (angle.isExactBygrees()) {\r\n                return fromBygrees(getBygrees() + angle.getBygrees());\r\n            }\r\n            return super.counterClockwise(angle);\r\n        }\r\n\r\n        @Override\r\n        public AbsoluteAngle clockwise(RelativeAngle angle) {\r\n            if (angle.isExactBygrees()) {\r\n                return fromBygrees(getBygrees() - angle.getBygrees());\r\n            }\r\n            return super.clockwise(angle);\r\n        }\r\n\r\n        @Override\r\n        public double getDegrees() {\r\n            return degrees;\r\n        }\r\n\r\n        @Override\r\n        public RelativeAngle getAngleCounterClockwiseTo(AbsoluteAngle counterClockwiseValue) {\r\n            if (counterClockwiseValue.isExactBygrees()) {\r\n                final int difference = getBygrees() - counterClockwiseValue.getBygrees();\r\n                return RelativeAngle.fromBygrees(difference < 0 ? difference + 256 : difference);\r\n            }\r\n            return super.getAngleCounterClockwiseTo(counterClockwiseValue);\r\n        }\r\n\r\n        @Override\r\n        public RelativeAngle counterClockwiseFromStandardOrigin() {\r\n            return counterClockwiseFromStandardOrigin;\r\n        }\r\n\r\n        @Override\r\n        public AbsoluteAngle getSupplementary() {\r\n            return fromBygrees(bygrees + 128);\r\n        }\r\n    }\r\n\r\n    @Override\r\n    public boolean equals(Object o) {\r\n        if (this == o)\r\n            return true;\r\n        if (o == null || getClass() != o.getClass())\r\n            return false;\r\n        AbsoluteAngle angle = (AbsoluteAngle) o;\r\n        if (Double.compare(angle.radians, radians) != 0)\r\n            return false;\r\n        return true;\r\n    }\r\n\r\n    @Override\r\n    public int hashCode() {\r\n        long temp = radians != +0.0d ? Double.doubleToLongBits(radians) : 0L;\r\n        return (int) (temp ^ (temp >>> 32));\r\n    }\r\n}\r\n",
		"id": "EvoSuiteBenchmark/86_at-robots2-j/src/main/java/net/virtualinfinity/atrobots/measures/AbsoluteAngleTest6.java",
		"test_prompt": "// AbsoluteAngleTest6.java\npackage net.virtualinfinity.atrobots.measures;\n\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link AbsoluteAngle}.\n* It contains ten unit test cases for the {@link AbsoluteAngle#isClockwiseCloser(AbsoluteAngle)} method.\n*/\nclass AbsoluteAngleTest6 {"
	},
	{
		"original_code": "// AbsoluteAngle.java\npackage net.virtualinfinity.atrobots.measures;\r\n\r\n/**\r\n * Represents an exact angle.\r\n *\r\n * @author Daniel Pitts\r\n * @see net.virtualinfinity.atrobots.measures.RelativeAngle\r\n */\r\npublic class AbsoluteAngle {\r\n\r\n    private static final AbsoluteAngle[] bygreeTable = new AbsoluteAngle[256];\r\n\r\n    private static final double RADIANS_PER_BYGREE = Math.PI / 128.0;\r\n\r\n    private static final double BYGREES_PER_RADIANS = 128 / Math.PI;\r\n\r\n    private static final int BYGREE_MASK = 255;\r\n\r\n    private static final double FULL_CIRCLE_RADIANS = Math.PI * 2;\r\n\r\n    static {\r\n        for (int bygrees = 0; bygrees < bygreeTable.length; ++bygrees) {\r\n            bygreeTable[bygrees] = new AbsoluateBygreeAngle(bygrees);\r\n        }\r\n    }\r\n\r\n    protected boolean isExactBygrees() {\r\n        return false;\r\n    }\r\n\r\n    private final double radians;\r\n\r\n    private AbsoluteAngle(double radians) {\r\n        if (radians < 0) {\r\n            radians += FULL_CIRCLE_RADIANS;\r\n        } else if (radians >= FULL_CIRCLE_RADIANS) {\r\n            radians -= FULL_CIRCLE_RADIANS;\r\n        }\r\n        this.radians = radians;\r\n    }\r\n\r\n    public double cosine() {\r\n        return Math.cos(radians);\r\n    }\r\n\r\n    public double sine() {\r\n        return Math.sin(radians);\r\n    }\r\n\r\n    public AbsoluteAngle counterClockwise(RelativeAngle angle) {\r\n        return fromRadians(getRadians() + angle.getRadians());\r\n    }\r\n\r\n    public double getRadians() {\r\n        return radians;\r\n    }\r\n\r\n    public double getNormalizedRadians() {\r\n        if (radians >= FULL_CIRCLE_RADIANS || radians < 0) {\r\n            return Math.atan2(sine(), cosine());\r\n        }\r\n        return radians;\r\n    }\r\n\r\n    public Vector toUnitVector() {\r\n        return toVector(1);\r\n    }\r\n\r\n    public Vector toVector(double magnitude) {\r\n        return Vector.createPolar(this, magnitude);\r\n    }\r\n\r\n    public int getBygrees() {\r\n        return radiansToBygrees(getRadians());\r\n    }\r\n\r\n    public AbsoluteAngle clockwise(RelativeAngle angle) {\r\n        return fromRadians(getRadians() - angle.getRadians());\r\n    }\r\n\r\n    public byte getSignedBygrees() {\r\n        return (byte) getBygrees();\r\n    }\r\n\r\n    public boolean isClockwiseCloser(AbsoluteAngle angle) {\r\n        return getAngleCounterClockwiseTo(angle).compareTo(RelativeAngle.HALF_CIRCLE) < 0;\r\n    }\r\n\r\n    public String toString() {\r\n        return getNormalizedRadians() + \"r/\" + getBygrees();\r\n    }\r\n\r\n    public RelativeAngle counterClockwiseFromStandardOrigin() {\r\n        return RelativeAngle.fromRadians(getRadians());\r\n    }\r\n\r\n    public double getDegrees() {\r\n        return getRadians() / Math.PI * 180;\r\n    }\r\n\r\n    public RelativeAngle getAngleCounterClockwiseTo(AbsoluteAngle counterClockwiseValue) {\r\n        final double difference = getNormalizedRadians() - counterClockwiseValue.getNormalizedRadians();\r\n        return RelativeAngle.fromRadians(difference < 0 ? difference + Math.PI * 2.0 : difference);\r\n    }\r\n\r\n    public Vector projectAngle(Vector vector) {\r\n        final Vector unit = toVector(1);\r\n        return unit.times(unit.dot(vector));\r\n    }\r\n\r\n    public static AbsoluteAngle fromBygrees(int value) {\r\n        return bygreeTable[value & BYGREE_MASK];\r\n    }\r\n\r\n    public static AbsoluteAngle fromCartesian(double x, double y) {\r\n        return fromRadians(Math.atan2(y, x));\r\n    }\r\n\r\n    public static AbsoluteAngle fromRadians(double radians) {\r\n        return new AbsoluteAngle(radians);\r\n    }\r\n\r\n    private static int radiansToBygrees(double radians) {\r\n        return (int) Math.round(64 + (radians * BYGREES_PER_RADIANS)) & BYGREE_MASK;\r\n    }\r\n\r\n    private static double bygreeToRadians(int bygrees) {\r\n        return (bygrees - 64) * RADIANS_PER_BYGREE;\r\n    }\r\n\r\n    public AbsoluteAngle getSupplementary() {\r\n        return fromRadians(Math.PI + getRadians());\r\n    }\r\n\r\n    private static class AbsoluateBygreeAngle extends AbsoluteAngle {\r\n\r\n        private final double cosine;\r\n\r\n        private final double sine;\r\n\r\n        private final int bygrees;\r\n\r\n        private final byte signedBygrees;\r\n\r\n        private final double normalizedRadians;\r\n\r\n        private final double degrees;\r\n\r\n        private final RelativeAngle counterClockwiseFromStandardOrigin;\r\n\r\n        public AbsoluateBygreeAngle(int bygrees) {\r\n            super(bygreeToRadians(bygrees));\r\n            final AbsoluteAngle template = AbsoluteAngle.fromRadians(bygreeToRadians(bygrees));\r\n            switch(bygrees) {\r\n                case 0:\r\n                    this.cosine = 0;\r\n                    this.sine = -1;\r\n                    break;\r\n                case 128:\r\n                    this.cosine = 0;\r\n                    this.sine = 1;\r\n                    break;\r\n                case 192:\r\n                    this.cosine = -1;\r\n                    this.sine = 0;\r\n                    break;\r\n                default:\r\n                    this.cosine = template.cosine();\r\n                    this.sine = template.sine();\r\n                    break;\r\n            }\r\n            this.bygrees = bygrees;\r\n            this.signedBygrees = template.getSignedBygrees();\r\n            this.normalizedRadians = template.getNormalizedRadians();\r\n            this.degrees = template.getDegrees();\r\n            counterClockwiseFromStandardOrigin = RelativeAngle.fromBygrees(64 - this.bygrees);\r\n        }\r\n\r\n        @Override\r\n        public double cosine() {\r\n            return cosine;\r\n        }\r\n\r\n        @Override\r\n        public double sine() {\r\n            return sine;\r\n        }\r\n\r\n        @Override\r\n        public int getBygrees() {\r\n            return bygrees;\r\n        }\r\n\r\n        @Override\r\n        public byte getSignedBygrees() {\r\n            return signedBygrees;\r\n        }\r\n\r\n        @Override\r\n        protected boolean isExactBygrees() {\r\n            return true;\r\n        }\r\n\r\n        @Override\r\n        public double getNormalizedRadians() {\r\n            return normalizedRadians;\r\n        }\r\n\r\n        @Override\r\n        public AbsoluteAngle counterClockwise(RelativeAngle angle) {\r\n            if (angle.isExactBygrees()) {\r\n                return fromBygrees(getBygrees() + angle.getBygrees());\r\n            }\r\n            return super.counterClockwise(angle);\r\n        }\r\n\r\n        @Override\r\n        public AbsoluteAngle clockwise(RelativeAngle angle) {\r\n            if (angle.isExactBygrees()) {\r\n                return fromBygrees(getBygrees() - angle.getBygrees());\r\n            }\r\n            return super.clockwise(angle);\r\n        }\r\n\r\n        @Override\r\n        public double getDegrees() {\r\n            return degrees;\r\n        }\r\n\r\n        @Override\r\n        public RelativeAngle getAngleCounterClockwiseTo(AbsoluteAngle counterClockwiseValue) {\r\n            if (counterClockwiseValue.isExactBygrees()) {\r\n                final int difference = getBygrees() - counterClockwiseValue.getBygrees();\r\n                return RelativeAngle.fromBygrees(difference < 0 ? difference + 256 : difference);\r\n            }\r\n            return super.getAngleCounterClockwiseTo(counterClockwiseValue);\r\n        }\r\n\r\n        @Override\r\n        public RelativeAngle counterClockwiseFromStandardOrigin() {\r\n            return counterClockwiseFromStandardOrigin;\r\n        }\r\n\r\n        @Override\r\n        public AbsoluteAngle getSupplementary() {\r\n            return fromBygrees(bygrees + 128);\r\n        }\r\n    }\r\n\r\n    @Override\r\n    public boolean equals(Object o) {\r\n        if (this == o)\r\n            return true;\r\n        if (o == null || getClass() != o.getClass())\r\n            return false;\r\n        AbsoluteAngle angle = (AbsoluteAngle) o;\r\n        if (Double.compare(angle.radians, radians) != 0)\r\n            return false;\r\n        return true;\r\n    }\r\n\r\n    @Override\r\n    public int hashCode() {\r\n        long temp = radians != +0.0d ? Double.doubleToLongBits(radians) : 0L;\r\n        return (int) (temp ^ (temp >>> 32));\r\n    }\r\n}\r\n",
		"id": "EvoSuiteBenchmark/86_at-robots2-j/src/main/java/net/virtualinfinity/atrobots/measures/AbsoluteAngleTest7.java",
		"test_prompt": "// AbsoluteAngleTest7.java\npackage net.virtualinfinity.atrobots.measures;\n\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link AbsoluteAngle}.\n* It contains ten unit test cases for the {@link AbsoluteAngle#counterClockwiseFromStandardOrigin()} method.\n*/\nclass AbsoluteAngleTest7 {"
	},
	{
		"original_code": "// AbsoluteAngle.java\npackage net.virtualinfinity.atrobots.measures;\r\n\r\n/**\r\n * Represents an exact angle.\r\n *\r\n * @author Daniel Pitts\r\n * @see net.virtualinfinity.atrobots.measures.RelativeAngle\r\n */\r\npublic class AbsoluteAngle {\r\n\r\n    private static final AbsoluteAngle[] bygreeTable = new AbsoluteAngle[256];\r\n\r\n    private static final double RADIANS_PER_BYGREE = Math.PI / 128.0;\r\n\r\n    private static final double BYGREES_PER_RADIANS = 128 / Math.PI;\r\n\r\n    private static final int BYGREE_MASK = 255;\r\n\r\n    private static final double FULL_CIRCLE_RADIANS = Math.PI * 2;\r\n\r\n    static {\r\n        for (int bygrees = 0; bygrees < bygreeTable.length; ++bygrees) {\r\n            bygreeTable[bygrees] = new AbsoluateBygreeAngle(bygrees);\r\n        }\r\n    }\r\n\r\n    protected boolean isExactBygrees() {\r\n        return false;\r\n    }\r\n\r\n    private final double radians;\r\n\r\n    private AbsoluteAngle(double radians) {\r\n        if (radians < 0) {\r\n            radians += FULL_CIRCLE_RADIANS;\r\n        } else if (radians >= FULL_CIRCLE_RADIANS) {\r\n            radians -= FULL_CIRCLE_RADIANS;\r\n        }\r\n        this.radians = radians;\r\n    }\r\n\r\n    public double cosine() {\r\n        return Math.cos(radians);\r\n    }\r\n\r\n    public double sine() {\r\n        return Math.sin(radians);\r\n    }\r\n\r\n    public AbsoluteAngle counterClockwise(RelativeAngle angle) {\r\n        return fromRadians(getRadians() + angle.getRadians());\r\n    }\r\n\r\n    public double getRadians() {\r\n        return radians;\r\n    }\r\n\r\n    public double getNormalizedRadians() {\r\n        if (radians >= FULL_CIRCLE_RADIANS || radians < 0) {\r\n            return Math.atan2(sine(), cosine());\r\n        }\r\n        return radians;\r\n    }\r\n\r\n    public Vector toUnitVector() {\r\n        return toVector(1);\r\n    }\r\n\r\n    public Vector toVector(double magnitude) {\r\n        return Vector.createPolar(this, magnitude);\r\n    }\r\n\r\n    public int getBygrees() {\r\n        return radiansToBygrees(getRadians());\r\n    }\r\n\r\n    public AbsoluteAngle clockwise(RelativeAngle angle) {\r\n        return fromRadians(getRadians() - angle.getRadians());\r\n    }\r\n\r\n    public byte getSignedBygrees() {\r\n        return (byte) getBygrees();\r\n    }\r\n\r\n    public boolean isClockwiseCloser(AbsoluteAngle angle) {\r\n        return getAngleCounterClockwiseTo(angle).compareTo(RelativeAngle.HALF_CIRCLE) < 0;\r\n    }\r\n\r\n    public String toString() {\r\n        return getNormalizedRadians() + \"r/\" + getBygrees();\r\n    }\r\n\r\n    public RelativeAngle counterClockwiseFromStandardOrigin() {\r\n        return RelativeAngle.fromRadians(getRadians());\r\n    }\r\n\r\n    public double getDegrees() {\r\n        return getRadians() / Math.PI * 180;\r\n    }\r\n\r\n    public RelativeAngle getAngleCounterClockwiseTo(AbsoluteAngle counterClockwiseValue) {\r\n        final double difference = getNormalizedRadians() - counterClockwiseValue.getNormalizedRadians();\r\n        return RelativeAngle.fromRadians(difference < 0 ? difference + Math.PI * 2.0 : difference);\r\n    }\r\n\r\n    public Vector projectAngle(Vector vector) {\r\n        final Vector unit = toVector(1);\r\n        return unit.times(unit.dot(vector));\r\n    }\r\n\r\n    public static AbsoluteAngle fromBygrees(int value) {\r\n        return bygreeTable[value & BYGREE_MASK];\r\n    }\r\n\r\n    public static AbsoluteAngle fromCartesian(double x, double y) {\r\n        return fromRadians(Math.atan2(y, x));\r\n    }\r\n\r\n    public static AbsoluteAngle fromRadians(double radians) {\r\n        return new AbsoluteAngle(radians);\r\n    }\r\n\r\n    private static int radiansToBygrees(double radians) {\r\n        return (int) Math.round(64 + (radians * BYGREES_PER_RADIANS)) & BYGREE_MASK;\r\n    }\r\n\r\n    private static double bygreeToRadians(int bygrees) {\r\n        return (bygrees - 64) * RADIANS_PER_BYGREE;\r\n    }\r\n\r\n    public AbsoluteAngle getSupplementary() {\r\n        return fromRadians(Math.PI + getRadians());\r\n    }\r\n\r\n    private static class AbsoluateBygreeAngle extends AbsoluteAngle {\r\n\r\n        private final double cosine;\r\n\r\n        private final double sine;\r\n\r\n        private final int bygrees;\r\n\r\n        private final byte signedBygrees;\r\n\r\n        private final double normalizedRadians;\r\n\r\n        private final double degrees;\r\n\r\n        private final RelativeAngle counterClockwiseFromStandardOrigin;\r\n\r\n        public AbsoluateBygreeAngle(int bygrees) {\r\n            super(bygreeToRadians(bygrees));\r\n            final AbsoluteAngle template = AbsoluteAngle.fromRadians(bygreeToRadians(bygrees));\r\n            switch(bygrees) {\r\n                case 0:\r\n                    this.cosine = 0;\r\n                    this.sine = -1;\r\n                    break;\r\n                case 128:\r\n                    this.cosine = 0;\r\n                    this.sine = 1;\r\n                    break;\r\n                case 192:\r\n                    this.cosine = -1;\r\n                    this.sine = 0;\r\n                    break;\r\n                default:\r\n                    this.cosine = template.cosine();\r\n                    this.sine = template.sine();\r\n                    break;\r\n            }\r\n            this.bygrees = bygrees;\r\n            this.signedBygrees = template.getSignedBygrees();\r\n            this.normalizedRadians = template.getNormalizedRadians();\r\n            this.degrees = template.getDegrees();\r\n            counterClockwiseFromStandardOrigin = RelativeAngle.fromBygrees(64 - this.bygrees);\r\n        }\r\n\r\n        @Override\r\n        public double cosine() {\r\n            return cosine;\r\n        }\r\n\r\n        @Override\r\n        public double sine() {\r\n            return sine;\r\n        }\r\n\r\n        @Override\r\n        public int getBygrees() {\r\n            return bygrees;\r\n        }\r\n\r\n        @Override\r\n        public byte getSignedBygrees() {\r\n            return signedBygrees;\r\n        }\r\n\r\n        @Override\r\n        protected boolean isExactBygrees() {\r\n            return true;\r\n        }\r\n\r\n        @Override\r\n        public double getNormalizedRadians() {\r\n            return normalizedRadians;\r\n        }\r\n\r\n        @Override\r\n        public AbsoluteAngle counterClockwise(RelativeAngle angle) {\r\n            if (angle.isExactBygrees()) {\r\n                return fromBygrees(getBygrees() + angle.getBygrees());\r\n            }\r\n            return super.counterClockwise(angle);\r\n        }\r\n\r\n        @Override\r\n        public AbsoluteAngle clockwise(RelativeAngle angle) {\r\n            if (angle.isExactBygrees()) {\r\n                return fromBygrees(getBygrees() - angle.getBygrees());\r\n            }\r\n            return super.clockwise(angle);\r\n        }\r\n\r\n        @Override\r\n        public double getDegrees() {\r\n            return degrees;\r\n        }\r\n\r\n        @Override\r\n        public RelativeAngle getAngleCounterClockwiseTo(AbsoluteAngle counterClockwiseValue) {\r\n            if (counterClockwiseValue.isExactBygrees()) {\r\n                final int difference = getBygrees() - counterClockwiseValue.getBygrees();\r\n                return RelativeAngle.fromBygrees(difference < 0 ? difference + 256 : difference);\r\n            }\r\n            return super.getAngleCounterClockwiseTo(counterClockwiseValue);\r\n        }\r\n\r\n        @Override\r\n        public RelativeAngle counterClockwiseFromStandardOrigin() {\r\n            return counterClockwiseFromStandardOrigin;\r\n        }\r\n\r\n        @Override\r\n        public AbsoluteAngle getSupplementary() {\r\n            return fromBygrees(bygrees + 128);\r\n        }\r\n    }\r\n\r\n    @Override\r\n    public boolean equals(Object o) {\r\n        if (this == o)\r\n            return true;\r\n        if (o == null || getClass() != o.getClass())\r\n            return false;\r\n        AbsoluteAngle angle = (AbsoluteAngle) o;\r\n        if (Double.compare(angle.radians, radians) != 0)\r\n            return false;\r\n        return true;\r\n    }\r\n\r\n    @Override\r\n    public int hashCode() {\r\n        long temp = radians != +0.0d ? Double.doubleToLongBits(radians) : 0L;\r\n        return (int) (temp ^ (temp >>> 32));\r\n    }\r\n}\r\n",
		"id": "EvoSuiteBenchmark/86_at-robots2-j/src/main/java/net/virtualinfinity/atrobots/measures/AbsoluteAngleTest8.java",
		"test_prompt": "// AbsoluteAngleTest8.java\npackage net.virtualinfinity.atrobots.measures;\n\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link AbsoluteAngle}.\n* It contains ten unit test cases for the {@link AbsoluteAngle#projectAngle(Vector)} method.\n*/\nclass AbsoluteAngleTest8 {"
	},
	{
		"original_code": "// AbsoluteAngle.java\npackage net.virtualinfinity.atrobots.measures;\r\n\r\n/**\r\n * Represents an exact angle.\r\n *\r\n * @author Daniel Pitts\r\n * @see net.virtualinfinity.atrobots.measures.RelativeAngle\r\n */\r\npublic class AbsoluteAngle {\r\n\r\n    private static final AbsoluteAngle[] bygreeTable = new AbsoluteAngle[256];\r\n\r\n    private static final double RADIANS_PER_BYGREE = Math.PI / 128.0;\r\n\r\n    private static final double BYGREES_PER_RADIANS = 128 / Math.PI;\r\n\r\n    private static final int BYGREE_MASK = 255;\r\n\r\n    private static final double FULL_CIRCLE_RADIANS = Math.PI * 2;\r\n\r\n    static {\r\n        for (int bygrees = 0; bygrees < bygreeTable.length; ++bygrees) {\r\n            bygreeTable[bygrees] = new AbsoluateBygreeAngle(bygrees);\r\n        }\r\n    }\r\n\r\n    protected boolean isExactBygrees() {\r\n        return false;\r\n    }\r\n\r\n    private final double radians;\r\n\r\n    private AbsoluteAngle(double radians) {\r\n        if (radians < 0) {\r\n            radians += FULL_CIRCLE_RADIANS;\r\n        } else if (radians >= FULL_CIRCLE_RADIANS) {\r\n            radians -= FULL_CIRCLE_RADIANS;\r\n        }\r\n        this.radians = radians;\r\n    }\r\n\r\n    public double cosine() {\r\n        return Math.cos(radians);\r\n    }\r\n\r\n    public double sine() {\r\n        return Math.sin(radians);\r\n    }\r\n\r\n    public AbsoluteAngle counterClockwise(RelativeAngle angle) {\r\n        return fromRadians(getRadians() + angle.getRadians());\r\n    }\r\n\r\n    public double getRadians() {\r\n        return radians;\r\n    }\r\n\r\n    public double getNormalizedRadians() {\r\n        if (radians >= FULL_CIRCLE_RADIANS || radians < 0) {\r\n            return Math.atan2(sine(), cosine());\r\n        }\r\n        return radians;\r\n    }\r\n\r\n    public Vector toUnitVector() {\r\n        return toVector(1);\r\n    }\r\n\r\n    public Vector toVector(double magnitude) {\r\n        return Vector.createPolar(this, magnitude);\r\n    }\r\n\r\n    public int getBygrees() {\r\n        return radiansToBygrees(getRadians());\r\n    }\r\n\r\n    public AbsoluteAngle clockwise(RelativeAngle angle) {\r\n        return fromRadians(getRadians() - angle.getRadians());\r\n    }\r\n\r\n    public byte getSignedBygrees() {\r\n        return (byte) getBygrees();\r\n    }\r\n\r\n    public boolean isClockwiseCloser(AbsoluteAngle angle) {\r\n        return getAngleCounterClockwiseTo(angle).compareTo(RelativeAngle.HALF_CIRCLE) < 0;\r\n    }\r\n\r\n    public String toString() {\r\n        return getNormalizedRadians() + \"r/\" + getBygrees();\r\n    }\r\n\r\n    public RelativeAngle counterClockwiseFromStandardOrigin() {\r\n        return RelativeAngle.fromRadians(getRadians());\r\n    }\r\n\r\n    public double getDegrees() {\r\n        return getRadians() / Math.PI * 180;\r\n    }\r\n\r\n    public RelativeAngle getAngleCounterClockwiseTo(AbsoluteAngle counterClockwiseValue) {\r\n        final double difference = getNormalizedRadians() - counterClockwiseValue.getNormalizedRadians();\r\n        return RelativeAngle.fromRadians(difference < 0 ? difference + Math.PI * 2.0 : difference);\r\n    }\r\n\r\n    public Vector projectAngle(Vector vector) {\r\n        final Vector unit = toVector(1);\r\n        return unit.times(unit.dot(vector));\r\n    }\r\n\r\n    public static AbsoluteAngle fromBygrees(int value) {\r\n        return bygreeTable[value & BYGREE_MASK];\r\n    }\r\n\r\n    public static AbsoluteAngle fromCartesian(double x, double y) {\r\n        return fromRadians(Math.atan2(y, x));\r\n    }\r\n\r\n    public static AbsoluteAngle fromRadians(double radians) {\r\n        return new AbsoluteAngle(radians);\r\n    }\r\n\r\n    private static int radiansToBygrees(double radians) {\r\n        return (int) Math.round(64 + (radians * BYGREES_PER_RADIANS)) & BYGREE_MASK;\r\n    }\r\n\r\n    private static double bygreeToRadians(int bygrees) {\r\n        return (bygrees - 64) * RADIANS_PER_BYGREE;\r\n    }\r\n\r\n    public AbsoluteAngle getSupplementary() {\r\n        return fromRadians(Math.PI + getRadians());\r\n    }\r\n\r\n    private static class AbsoluateBygreeAngle extends AbsoluteAngle {\r\n\r\n        private final double cosine;\r\n\r\n        private final double sine;\r\n\r\n        private final int bygrees;\r\n\r\n        private final byte signedBygrees;\r\n\r\n        private final double normalizedRadians;\r\n\r\n        private final double degrees;\r\n\r\n        private final RelativeAngle counterClockwiseFromStandardOrigin;\r\n\r\n        public AbsoluateBygreeAngle(int bygrees) {\r\n            super(bygreeToRadians(bygrees));\r\n            final AbsoluteAngle template = AbsoluteAngle.fromRadians(bygreeToRadians(bygrees));\r\n            switch(bygrees) {\r\n                case 0:\r\n                    this.cosine = 0;\r\n                    this.sine = -1;\r\n                    break;\r\n                case 128:\r\n                    this.cosine = 0;\r\n                    this.sine = 1;\r\n                    break;\r\n                case 192:\r\n                    this.cosine = -1;\r\n                    this.sine = 0;\r\n                    break;\r\n                default:\r\n                    this.cosine = template.cosine();\r\n                    this.sine = template.sine();\r\n                    break;\r\n            }\r\n            this.bygrees = bygrees;\r\n            this.signedBygrees = template.getSignedBygrees();\r\n            this.normalizedRadians = template.getNormalizedRadians();\r\n            this.degrees = template.getDegrees();\r\n            counterClockwiseFromStandardOrigin = RelativeAngle.fromBygrees(64 - this.bygrees);\r\n        }\r\n\r\n        @Override\r\n        public double cosine() {\r\n            return cosine;\r\n        }\r\n\r\n        @Override\r\n        public double sine() {\r\n            return sine;\r\n        }\r\n\r\n        @Override\r\n        public int getBygrees() {\r\n            return bygrees;\r\n        }\r\n\r\n        @Override\r\n        public byte getSignedBygrees() {\r\n            return signedBygrees;\r\n        }\r\n\r\n        @Override\r\n        protected boolean isExactBygrees() {\r\n            return true;\r\n        }\r\n\r\n        @Override\r\n        public double getNormalizedRadians() {\r\n            return normalizedRadians;\r\n        }\r\n\r\n        @Override\r\n        public AbsoluteAngle counterClockwise(RelativeAngle angle) {\r\n            if (angle.isExactBygrees()) {\r\n                return fromBygrees(getBygrees() + angle.getBygrees());\r\n            }\r\n            return super.counterClockwise(angle);\r\n        }\r\n\r\n        @Override\r\n        public AbsoluteAngle clockwise(RelativeAngle angle) {\r\n            if (angle.isExactBygrees()) {\r\n                return fromBygrees(getBygrees() - angle.getBygrees());\r\n            }\r\n            return super.clockwise(angle);\r\n        }\r\n\r\n        @Override\r\n        public double getDegrees() {\r\n            return degrees;\r\n        }\r\n\r\n        @Override\r\n        public RelativeAngle getAngleCounterClockwiseTo(AbsoluteAngle counterClockwiseValue) {\r\n            if (counterClockwiseValue.isExactBygrees()) {\r\n                final int difference = getBygrees() - counterClockwiseValue.getBygrees();\r\n                return RelativeAngle.fromBygrees(difference < 0 ? difference + 256 : difference);\r\n            }\r\n            return super.getAngleCounterClockwiseTo(counterClockwiseValue);\r\n        }\r\n\r\n        @Override\r\n        public RelativeAngle counterClockwiseFromStandardOrigin() {\r\n            return counterClockwiseFromStandardOrigin;\r\n        }\r\n\r\n        @Override\r\n        public AbsoluteAngle getSupplementary() {\r\n            return fromBygrees(bygrees + 128);\r\n        }\r\n    }\r\n\r\n    @Override\r\n    public boolean equals(Object o) {\r\n        if (this == o)\r\n            return true;\r\n        if (o == null || getClass() != o.getClass())\r\n            return false;\r\n        AbsoluteAngle angle = (AbsoluteAngle) o;\r\n        if (Double.compare(angle.radians, radians) != 0)\r\n            return false;\r\n        return true;\r\n    }\r\n\r\n    @Override\r\n    public int hashCode() {\r\n        long temp = radians != +0.0d ? Double.doubleToLongBits(radians) : 0L;\r\n        return (int) (temp ^ (temp >>> 32));\r\n    }\r\n}\r\n",
		"id": "EvoSuiteBenchmark/86_at-robots2-j/src/main/java/net/virtualinfinity/atrobots/measures/AbsoluteAngleTest9.java",
		"test_prompt": "// AbsoluteAngleTest9.java\npackage net.virtualinfinity.atrobots.measures;\n\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link AbsoluteAngle}.\n* It contains ten unit test cases for the {@link AbsoluteAngle#fromBygrees(int)} method.\n*/\nclass AbsoluteAngleTest9 {"
	},
	{
		"original_code": "// AbsoluteAngle.java\npackage net.virtualinfinity.atrobots.measures;\r\n\r\n/**\r\n * Represents an exact angle.\r\n *\r\n * @author Daniel Pitts\r\n * @see net.virtualinfinity.atrobots.measures.RelativeAngle\r\n */\r\npublic class AbsoluteAngle {\r\n\r\n    private static final AbsoluteAngle[] bygreeTable = new AbsoluteAngle[256];\r\n\r\n    private static final double RADIANS_PER_BYGREE = Math.PI / 128.0;\r\n\r\n    private static final double BYGREES_PER_RADIANS = 128 / Math.PI;\r\n\r\n    private static final int BYGREE_MASK = 255;\r\n\r\n    private static final double FULL_CIRCLE_RADIANS = Math.PI * 2;\r\n\r\n    static {\r\n        for (int bygrees = 0; bygrees < bygreeTable.length; ++bygrees) {\r\n            bygreeTable[bygrees] = new AbsoluateBygreeAngle(bygrees);\r\n        }\r\n    }\r\n\r\n    protected boolean isExactBygrees() {\r\n        return false;\r\n    }\r\n\r\n    private final double radians;\r\n\r\n    private AbsoluteAngle(double radians) {\r\n        if (radians < 0) {\r\n            radians += FULL_CIRCLE_RADIANS;\r\n        } else if (radians >= FULL_CIRCLE_RADIANS) {\r\n            radians -= FULL_CIRCLE_RADIANS;\r\n        }\r\n        this.radians = radians;\r\n    }\r\n\r\n    public double cosine() {\r\n        return Math.cos(radians);\r\n    }\r\n\r\n    public double sine() {\r\n        return Math.sin(radians);\r\n    }\r\n\r\n    public AbsoluteAngle counterClockwise(RelativeAngle angle) {\r\n        return fromRadians(getRadians() + angle.getRadians());\r\n    }\r\n\r\n    public double getRadians() {\r\n        return radians;\r\n    }\r\n\r\n    public double getNormalizedRadians() {\r\n        if (radians >= FULL_CIRCLE_RADIANS || radians < 0) {\r\n            return Math.atan2(sine(), cosine());\r\n        }\r\n        return radians;\r\n    }\r\n\r\n    public Vector toUnitVector() {\r\n        return toVector(1);\r\n    }\r\n\r\n    public Vector toVector(double magnitude) {\r\n        return Vector.createPolar(this, magnitude);\r\n    }\r\n\r\n    public int getBygrees() {\r\n        return radiansToBygrees(getRadians());\r\n    }\r\n\r\n    public AbsoluteAngle clockwise(RelativeAngle angle) {\r\n        return fromRadians(getRadians() - angle.getRadians());\r\n    }\r\n\r\n    public byte getSignedBygrees() {\r\n        return (byte) getBygrees();\r\n    }\r\n\r\n    public boolean isClockwiseCloser(AbsoluteAngle angle) {\r\n        return getAngleCounterClockwiseTo(angle).compareTo(RelativeAngle.HALF_CIRCLE) < 0;\r\n    }\r\n\r\n    public String toString() {\r\n        return getNormalizedRadians() + \"r/\" + getBygrees();\r\n    }\r\n\r\n    public RelativeAngle counterClockwiseFromStandardOrigin() {\r\n        return RelativeAngle.fromRadians(getRadians());\r\n    }\r\n\r\n    public double getDegrees() {\r\n        return getRadians() / Math.PI * 180;\r\n    }\r\n\r\n    public RelativeAngle getAngleCounterClockwiseTo(AbsoluteAngle counterClockwiseValue) {\r\n        final double difference = getNormalizedRadians() - counterClockwiseValue.getNormalizedRadians();\r\n        return RelativeAngle.fromRadians(difference < 0 ? difference + Math.PI * 2.0 : difference);\r\n    }\r\n\r\n    public Vector projectAngle(Vector vector) {\r\n        final Vector unit = toVector(1);\r\n        return unit.times(unit.dot(vector));\r\n    }\r\n\r\n    public static AbsoluteAngle fromBygrees(int value) {\r\n        return bygreeTable[value & BYGREE_MASK];\r\n    }\r\n\r\n    public static AbsoluteAngle fromCartesian(double x, double y) {\r\n        return fromRadians(Math.atan2(y, x));\r\n    }\r\n\r\n    public static AbsoluteAngle fromRadians(double radians) {\r\n        return new AbsoluteAngle(radians);\r\n    }\r\n\r\n    private static int radiansToBygrees(double radians) {\r\n        return (int) Math.round(64 + (radians * BYGREES_PER_RADIANS)) & BYGREE_MASK;\r\n    }\r\n\r\n    private static double bygreeToRadians(int bygrees) {\r\n        return (bygrees - 64) * RADIANS_PER_BYGREE;\r\n    }\r\n\r\n    public AbsoluteAngle getSupplementary() {\r\n        return fromRadians(Math.PI + getRadians());\r\n    }\r\n\r\n    private static class AbsoluateBygreeAngle extends AbsoluteAngle {\r\n\r\n        private final double cosine;\r\n\r\n        private final double sine;\r\n\r\n        private final int bygrees;\r\n\r\n        private final byte signedBygrees;\r\n\r\n        private final double normalizedRadians;\r\n\r\n        private final double degrees;\r\n\r\n        private final RelativeAngle counterClockwiseFromStandardOrigin;\r\n\r\n        public AbsoluateBygreeAngle(int bygrees) {\r\n            super(bygreeToRadians(bygrees));\r\n            final AbsoluteAngle template = AbsoluteAngle.fromRadians(bygreeToRadians(bygrees));\r\n            switch(bygrees) {\r\n                case 0:\r\n                    this.cosine = 0;\r\n                    this.sine = -1;\r\n                    break;\r\n                case 128:\r\n                    this.cosine = 0;\r\n                    this.sine = 1;\r\n                    break;\r\n                case 192:\r\n                    this.cosine = -1;\r\n                    this.sine = 0;\r\n                    break;\r\n                default:\r\n                    this.cosine = template.cosine();\r\n                    this.sine = template.sine();\r\n                    break;\r\n            }\r\n            this.bygrees = bygrees;\r\n            this.signedBygrees = template.getSignedBygrees();\r\n            this.normalizedRadians = template.getNormalizedRadians();\r\n            this.degrees = template.getDegrees();\r\n            counterClockwiseFromStandardOrigin = RelativeAngle.fromBygrees(64 - this.bygrees);\r\n        }\r\n\r\n        @Override\r\n        public double cosine() {\r\n            return cosine;\r\n        }\r\n\r\n        @Override\r\n        public double sine() {\r\n            return sine;\r\n        }\r\n\r\n        @Override\r\n        public int getBygrees() {\r\n            return bygrees;\r\n        }\r\n\r\n        @Override\r\n        public byte getSignedBygrees() {\r\n            return signedBygrees;\r\n        }\r\n\r\n        @Override\r\n        protected boolean isExactBygrees() {\r\n            return true;\r\n        }\r\n\r\n        @Override\r\n        public double getNormalizedRadians() {\r\n            return normalizedRadians;\r\n        }\r\n\r\n        @Override\r\n        public AbsoluteAngle counterClockwise(RelativeAngle angle) {\r\n            if (angle.isExactBygrees()) {\r\n                return fromBygrees(getBygrees() + angle.getBygrees());\r\n            }\r\n            return super.counterClockwise(angle);\r\n        }\r\n\r\n        @Override\r\n        public AbsoluteAngle clockwise(RelativeAngle angle) {\r\n            if (angle.isExactBygrees()) {\r\n                return fromBygrees(getBygrees() - angle.getBygrees());\r\n            }\r\n            return super.clockwise(angle);\r\n        }\r\n\r\n        @Override\r\n        public double getDegrees() {\r\n            return degrees;\r\n        }\r\n\r\n        @Override\r\n        public RelativeAngle getAngleCounterClockwiseTo(AbsoluteAngle counterClockwiseValue) {\r\n            if (counterClockwiseValue.isExactBygrees()) {\r\n                final int difference = getBygrees() - counterClockwiseValue.getBygrees();\r\n                return RelativeAngle.fromBygrees(difference < 0 ? difference + 256 : difference);\r\n            }\r\n            return super.getAngleCounterClockwiseTo(counterClockwiseValue);\r\n        }\r\n\r\n        @Override\r\n        public RelativeAngle counterClockwiseFromStandardOrigin() {\r\n            return counterClockwiseFromStandardOrigin;\r\n        }\r\n\r\n        @Override\r\n        public AbsoluteAngle getSupplementary() {\r\n            return fromBygrees(bygrees + 128);\r\n        }\r\n    }\r\n\r\n    @Override\r\n    public boolean equals(Object o) {\r\n        if (this == o)\r\n            return true;\r\n        if (o == null || getClass() != o.getClass())\r\n            return false;\r\n        AbsoluteAngle angle = (AbsoluteAngle) o;\r\n        if (Double.compare(angle.radians, radians) != 0)\r\n            return false;\r\n        return true;\r\n    }\r\n\r\n    @Override\r\n    public int hashCode() {\r\n        long temp = radians != +0.0d ? Double.doubleToLongBits(radians) : 0L;\r\n        return (int) (temp ^ (temp >>> 32));\r\n    }\r\n}\r\n",
		"id": "EvoSuiteBenchmark/86_at-robots2-j/src/main/java/net/virtualinfinity/atrobots/measures/AbsoluteAngleTest10.java",
		"test_prompt": "// AbsoluteAngleTest10.java\npackage net.virtualinfinity.atrobots.measures;\n\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link AbsoluteAngle}.\n* It contains ten unit test cases for the {@link AbsoluteAngle#fromCartesian(double, double)} method.\n*/\nclass AbsoluteAngleTest10 {"
	},
	{
		"original_code": "// AbsoluteAngle.java\npackage net.virtualinfinity.atrobots.measures;\r\n\r\n/**\r\n * Represents an exact angle.\r\n *\r\n * @author Daniel Pitts\r\n * @see net.virtualinfinity.atrobots.measures.RelativeAngle\r\n */\r\npublic class AbsoluteAngle {\r\n\r\n    private static final AbsoluteAngle[] bygreeTable = new AbsoluteAngle[256];\r\n\r\n    private static final double RADIANS_PER_BYGREE = Math.PI / 128.0;\r\n\r\n    private static final double BYGREES_PER_RADIANS = 128 / Math.PI;\r\n\r\n    private static final int BYGREE_MASK = 255;\r\n\r\n    private static final double FULL_CIRCLE_RADIANS = Math.PI * 2;\r\n\r\n    static {\r\n        for (int bygrees = 0; bygrees < bygreeTable.length; ++bygrees) {\r\n            bygreeTable[bygrees] = new AbsoluateBygreeAngle(bygrees);\r\n        }\r\n    }\r\n\r\n    protected boolean isExactBygrees() {\r\n        return false;\r\n    }\r\n\r\n    private final double radians;\r\n\r\n    private AbsoluteAngle(double radians) {\r\n        if (radians < 0) {\r\n            radians += FULL_CIRCLE_RADIANS;\r\n        } else if (radians >= FULL_CIRCLE_RADIANS) {\r\n            radians -= FULL_CIRCLE_RADIANS;\r\n        }\r\n        this.radians = radians;\r\n    }\r\n\r\n    public double cosine() {\r\n        return Math.cos(radians);\r\n    }\r\n\r\n    public double sine() {\r\n        return Math.sin(radians);\r\n    }\r\n\r\n    public AbsoluteAngle counterClockwise(RelativeAngle angle) {\r\n        return fromRadians(getRadians() + angle.getRadians());\r\n    }\r\n\r\n    public double getRadians() {\r\n        return radians;\r\n    }\r\n\r\n    public double getNormalizedRadians() {\r\n        if (radians >= FULL_CIRCLE_RADIANS || radians < 0) {\r\n            return Math.atan2(sine(), cosine());\r\n        }\r\n        return radians;\r\n    }\r\n\r\n    public Vector toUnitVector() {\r\n        return toVector(1);\r\n    }\r\n\r\n    public Vector toVector(double magnitude) {\r\n        return Vector.createPolar(this, magnitude);\r\n    }\r\n\r\n    public int getBygrees() {\r\n        return radiansToBygrees(getRadians());\r\n    }\r\n\r\n    public AbsoluteAngle clockwise(RelativeAngle angle) {\r\n        return fromRadians(getRadians() - angle.getRadians());\r\n    }\r\n\r\n    public byte getSignedBygrees() {\r\n        return (byte) getBygrees();\r\n    }\r\n\r\n    public boolean isClockwiseCloser(AbsoluteAngle angle) {\r\n        return getAngleCounterClockwiseTo(angle).compareTo(RelativeAngle.HALF_CIRCLE) < 0;\r\n    }\r\n\r\n    public String toString() {\r\n        return getNormalizedRadians() + \"r/\" + getBygrees();\r\n    }\r\n\r\n    public RelativeAngle counterClockwiseFromStandardOrigin() {\r\n        return RelativeAngle.fromRadians(getRadians());\r\n    }\r\n\r\n    public double getDegrees() {\r\n        return getRadians() / Math.PI * 180;\r\n    }\r\n\r\n    public RelativeAngle getAngleCounterClockwiseTo(AbsoluteAngle counterClockwiseValue) {\r\n        final double difference = getNormalizedRadians() - counterClockwiseValue.getNormalizedRadians();\r\n        return RelativeAngle.fromRadians(difference < 0 ? difference + Math.PI * 2.0 : difference);\r\n    }\r\n\r\n    public Vector projectAngle(Vector vector) {\r\n        final Vector unit = toVector(1);\r\n        return unit.times(unit.dot(vector));\r\n    }\r\n\r\n    public static AbsoluteAngle fromBygrees(int value) {\r\n        return bygreeTable[value & BYGREE_MASK];\r\n    }\r\n\r\n    public static AbsoluteAngle fromCartesian(double x, double y) {\r\n        return fromRadians(Math.atan2(y, x));\r\n    }\r\n\r\n    public static AbsoluteAngle fromRadians(double radians) {\r\n        return new AbsoluteAngle(radians);\r\n    }\r\n\r\n    private static int radiansToBygrees(double radians) {\r\n        return (int) Math.round(64 + (radians * BYGREES_PER_RADIANS)) & BYGREE_MASK;\r\n    }\r\n\r\n    private static double bygreeToRadians(int bygrees) {\r\n        return (bygrees - 64) * RADIANS_PER_BYGREE;\r\n    }\r\n\r\n    public AbsoluteAngle getSupplementary() {\r\n        return fromRadians(Math.PI + getRadians());\r\n    }\r\n\r\n    private static class AbsoluateBygreeAngle extends AbsoluteAngle {\r\n\r\n        private final double cosine;\r\n\r\n        private final double sine;\r\n\r\n        private final int bygrees;\r\n\r\n        private final byte signedBygrees;\r\n\r\n        private final double normalizedRadians;\r\n\r\n        private final double degrees;\r\n\r\n        private final RelativeAngle counterClockwiseFromStandardOrigin;\r\n\r\n        public AbsoluateBygreeAngle(int bygrees) {\r\n            super(bygreeToRadians(bygrees));\r\n            final AbsoluteAngle template = AbsoluteAngle.fromRadians(bygreeToRadians(bygrees));\r\n            switch(bygrees) {\r\n                case 0:\r\n                    this.cosine = 0;\r\n                    this.sine = -1;\r\n                    break;\r\n                case 128:\r\n                    this.cosine = 0;\r\n                    this.sine = 1;\r\n                    break;\r\n                case 192:\r\n                    this.cosine = -1;\r\n                    this.sine = 0;\r\n                    break;\r\n                default:\r\n                    this.cosine = template.cosine();\r\n                    this.sine = template.sine();\r\n                    break;\r\n            }\r\n            this.bygrees = bygrees;\r\n            this.signedBygrees = template.getSignedBygrees();\r\n            this.normalizedRadians = template.getNormalizedRadians();\r\n            this.degrees = template.getDegrees();\r\n            counterClockwiseFromStandardOrigin = RelativeAngle.fromBygrees(64 - this.bygrees);\r\n        }\r\n\r\n        @Override\r\n        public double cosine() {\r\n            return cosine;\r\n        }\r\n\r\n        @Override\r\n        public double sine() {\r\n            return sine;\r\n        }\r\n\r\n        @Override\r\n        public int getBygrees() {\r\n            return bygrees;\r\n        }\r\n\r\n        @Override\r\n        public byte getSignedBygrees() {\r\n            return signedBygrees;\r\n        }\r\n\r\n        @Override\r\n        protected boolean isExactBygrees() {\r\n            return true;\r\n        }\r\n\r\n        @Override\r\n        public double getNormalizedRadians() {\r\n            return normalizedRadians;\r\n        }\r\n\r\n        @Override\r\n        public AbsoluteAngle counterClockwise(RelativeAngle angle) {\r\n            if (angle.isExactBygrees()) {\r\n                return fromBygrees(getBygrees() + angle.getBygrees());\r\n            }\r\n            return super.counterClockwise(angle);\r\n        }\r\n\r\n        @Override\r\n        public AbsoluteAngle clockwise(RelativeAngle angle) {\r\n            if (angle.isExactBygrees()) {\r\n                return fromBygrees(getBygrees() - angle.getBygrees());\r\n            }\r\n            return super.clockwise(angle);\r\n        }\r\n\r\n        @Override\r\n        public double getDegrees() {\r\n            return degrees;\r\n        }\r\n\r\n        @Override\r\n        public RelativeAngle getAngleCounterClockwiseTo(AbsoluteAngle counterClockwiseValue) {\r\n            if (counterClockwiseValue.isExactBygrees()) {\r\n                final int difference = getBygrees() - counterClockwiseValue.getBygrees();\r\n                return RelativeAngle.fromBygrees(difference < 0 ? difference + 256 : difference);\r\n            }\r\n            return super.getAngleCounterClockwiseTo(counterClockwiseValue);\r\n        }\r\n\r\n        @Override\r\n        public RelativeAngle counterClockwiseFromStandardOrigin() {\r\n            return counterClockwiseFromStandardOrigin;\r\n        }\r\n\r\n        @Override\r\n        public AbsoluteAngle getSupplementary() {\r\n            return fromBygrees(bygrees + 128);\r\n        }\r\n    }\r\n\r\n    @Override\r\n    public boolean equals(Object o) {\r\n        if (this == o)\r\n            return true;\r\n        if (o == null || getClass() != o.getClass())\r\n            return false;\r\n        AbsoluteAngle angle = (AbsoluteAngle) o;\r\n        if (Double.compare(angle.radians, radians) != 0)\r\n            return false;\r\n        return true;\r\n    }\r\n\r\n    @Override\r\n    public int hashCode() {\r\n        long temp = radians != +0.0d ? Double.doubleToLongBits(radians) : 0L;\r\n        return (int) (temp ^ (temp >>> 32));\r\n    }\r\n}\r\n",
		"id": "EvoSuiteBenchmark/86_at-robots2-j/src/main/java/net/virtualinfinity/atrobots/measures/AbsoluteAngleTest11.java",
		"test_prompt": "// AbsoluteAngleTest11.java\npackage net.virtualinfinity.atrobots.measures;\n\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link AbsoluteAngle}.\n* It contains ten unit test cases for the {@link AbsoluteAngle#fromRadians(double)} method.\n*/\nclass AbsoluteAngleTest11 {"
	},
	{
		"original_code": "// AbsoluteAngle.java\npackage net.virtualinfinity.atrobots.measures;\r\n\r\n/**\r\n * Represents an exact angle.\r\n *\r\n * @author Daniel Pitts\r\n * @see net.virtualinfinity.atrobots.measures.RelativeAngle\r\n */\r\npublic class AbsoluteAngle {\r\n\r\n    private static final AbsoluteAngle[] bygreeTable = new AbsoluteAngle[256];\r\n\r\n    private static final double RADIANS_PER_BYGREE = Math.PI / 128.0;\r\n\r\n    private static final double BYGREES_PER_RADIANS = 128 / Math.PI;\r\n\r\n    private static final int BYGREE_MASK = 255;\r\n\r\n    private static final double FULL_CIRCLE_RADIANS = Math.PI * 2;\r\n\r\n    static {\r\n        for (int bygrees = 0; bygrees < bygreeTable.length; ++bygrees) {\r\n            bygreeTable[bygrees] = new AbsoluateBygreeAngle(bygrees);\r\n        }\r\n    }\r\n\r\n    protected boolean isExactBygrees() {\r\n        return false;\r\n    }\r\n\r\n    private final double radians;\r\n\r\n    private AbsoluteAngle(double radians) {\r\n        if (radians < 0) {\r\n            radians += FULL_CIRCLE_RADIANS;\r\n        } else if (radians >= FULL_CIRCLE_RADIANS) {\r\n            radians -= FULL_CIRCLE_RADIANS;\r\n        }\r\n        this.radians = radians;\r\n    }\r\n\r\n    public double cosine() {\r\n        return Math.cos(radians);\r\n    }\r\n\r\n    public double sine() {\r\n        return Math.sin(radians);\r\n    }\r\n\r\n    public AbsoluteAngle counterClockwise(RelativeAngle angle) {\r\n        return fromRadians(getRadians() + angle.getRadians());\r\n    }\r\n\r\n    public double getRadians() {\r\n        return radians;\r\n    }\r\n\r\n    public double getNormalizedRadians() {\r\n        if (radians >= FULL_CIRCLE_RADIANS || radians < 0) {\r\n            return Math.atan2(sine(), cosine());\r\n        }\r\n        return radians;\r\n    }\r\n\r\n    public Vector toUnitVector() {\r\n        return toVector(1);\r\n    }\r\n\r\n    public Vector toVector(double magnitude) {\r\n        return Vector.createPolar(this, magnitude);\r\n    }\r\n\r\n    public int getBygrees() {\r\n        return radiansToBygrees(getRadians());\r\n    }\r\n\r\n    public AbsoluteAngle clockwise(RelativeAngle angle) {\r\n        return fromRadians(getRadians() - angle.getRadians());\r\n    }\r\n\r\n    public byte getSignedBygrees() {\r\n        return (byte) getBygrees();\r\n    }\r\n\r\n    public boolean isClockwiseCloser(AbsoluteAngle angle) {\r\n        return getAngleCounterClockwiseTo(angle).compareTo(RelativeAngle.HALF_CIRCLE) < 0;\r\n    }\r\n\r\n    public String toString() {\r\n        return getNormalizedRadians() + \"r/\" + getBygrees();\r\n    }\r\n\r\n    public RelativeAngle counterClockwiseFromStandardOrigin() {\r\n        return RelativeAngle.fromRadians(getRadians());\r\n    }\r\n\r\n    public double getDegrees() {\r\n        return getRadians() / Math.PI * 180;\r\n    }\r\n\r\n    public RelativeAngle getAngleCounterClockwiseTo(AbsoluteAngle counterClockwiseValue) {\r\n        final double difference = getNormalizedRadians() - counterClockwiseValue.getNormalizedRadians();\r\n        return RelativeAngle.fromRadians(difference < 0 ? difference + Math.PI * 2.0 : difference);\r\n    }\r\n\r\n    public Vector projectAngle(Vector vector) {\r\n        final Vector unit = toVector(1);\r\n        return unit.times(unit.dot(vector));\r\n    }\r\n\r\n    public static AbsoluteAngle fromBygrees(int value) {\r\n        return bygreeTable[value & BYGREE_MASK];\r\n    }\r\n\r\n    public static AbsoluteAngle fromCartesian(double x, double y) {\r\n        return fromRadians(Math.atan2(y, x));\r\n    }\r\n\r\n    public static AbsoluteAngle fromRadians(double radians) {\r\n        return new AbsoluteAngle(radians);\r\n    }\r\n\r\n    private static int radiansToBygrees(double radians) {\r\n        return (int) Math.round(64 + (radians * BYGREES_PER_RADIANS)) & BYGREE_MASK;\r\n    }\r\n\r\n    private static double bygreeToRadians(int bygrees) {\r\n        return (bygrees - 64) * RADIANS_PER_BYGREE;\r\n    }\r\n\r\n    public AbsoluteAngle getSupplementary() {\r\n        return fromRadians(Math.PI + getRadians());\r\n    }\r\n\r\n    private static class AbsoluateBygreeAngle extends AbsoluteAngle {\r\n\r\n        private final double cosine;\r\n\r\n        private final double sine;\r\n\r\n        private final int bygrees;\r\n\r\n        private final byte signedBygrees;\r\n\r\n        private final double normalizedRadians;\r\n\r\n        private final double degrees;\r\n\r\n        private final RelativeAngle counterClockwiseFromStandardOrigin;\r\n\r\n        public AbsoluateBygreeAngle(int bygrees) {\r\n            super(bygreeToRadians(bygrees));\r\n            final AbsoluteAngle template = AbsoluteAngle.fromRadians(bygreeToRadians(bygrees));\r\n            switch(bygrees) {\r\n                case 0:\r\n                    this.cosine = 0;\r\n                    this.sine = -1;\r\n                    break;\r\n                case 128:\r\n                    this.cosine = 0;\r\n                    this.sine = 1;\r\n                    break;\r\n                case 192:\r\n                    this.cosine = -1;\r\n                    this.sine = 0;\r\n                    break;\r\n                default:\r\n                    this.cosine = template.cosine();\r\n                    this.sine = template.sine();\r\n                    break;\r\n            }\r\n            this.bygrees = bygrees;\r\n            this.signedBygrees = template.getSignedBygrees();\r\n            this.normalizedRadians = template.getNormalizedRadians();\r\n            this.degrees = template.getDegrees();\r\n            counterClockwiseFromStandardOrigin = RelativeAngle.fromBygrees(64 - this.bygrees);\r\n        }\r\n\r\n        @Override\r\n        public double cosine() {\r\n            return cosine;\r\n        }\r\n\r\n        @Override\r\n        public double sine() {\r\n            return sine;\r\n        }\r\n\r\n        @Override\r\n        public int getBygrees() {\r\n            return bygrees;\r\n        }\r\n\r\n        @Override\r\n        public byte getSignedBygrees() {\r\n            return signedBygrees;\r\n        }\r\n\r\n        @Override\r\n        protected boolean isExactBygrees() {\r\n            return true;\r\n        }\r\n\r\n        @Override\r\n        public double getNormalizedRadians() {\r\n            return normalizedRadians;\r\n        }\r\n\r\n        @Override\r\n        public AbsoluteAngle counterClockwise(RelativeAngle angle) {\r\n            if (angle.isExactBygrees()) {\r\n                return fromBygrees(getBygrees() + angle.getBygrees());\r\n            }\r\n            return super.counterClockwise(angle);\r\n        }\r\n\r\n        @Override\r\n        public AbsoluteAngle clockwise(RelativeAngle angle) {\r\n            if (angle.isExactBygrees()) {\r\n                return fromBygrees(getBygrees() - angle.getBygrees());\r\n            }\r\n            return super.clockwise(angle);\r\n        }\r\n\r\n        @Override\r\n        public double getDegrees() {\r\n            return degrees;\r\n        }\r\n\r\n        @Override\r\n        public RelativeAngle getAngleCounterClockwiseTo(AbsoluteAngle counterClockwiseValue) {\r\n            if (counterClockwiseValue.isExactBygrees()) {\r\n                final int difference = getBygrees() - counterClockwiseValue.getBygrees();\r\n                return RelativeAngle.fromBygrees(difference < 0 ? difference + 256 : difference);\r\n            }\r\n            return super.getAngleCounterClockwiseTo(counterClockwiseValue);\r\n        }\r\n\r\n        @Override\r\n        public RelativeAngle counterClockwiseFromStandardOrigin() {\r\n            return counterClockwiseFromStandardOrigin;\r\n        }\r\n\r\n        @Override\r\n        public AbsoluteAngle getSupplementary() {\r\n            return fromBygrees(bygrees + 128);\r\n        }\r\n    }\r\n\r\n    @Override\r\n    public boolean equals(Object o) {\r\n        if (this == o)\r\n            return true;\r\n        if (o == null || getClass() != o.getClass())\r\n            return false;\r\n        AbsoluteAngle angle = (AbsoluteAngle) o;\r\n        if (Double.compare(angle.radians, radians) != 0)\r\n            return false;\r\n        return true;\r\n    }\r\n\r\n    @Override\r\n    public int hashCode() {\r\n        long temp = radians != +0.0d ? Double.doubleToLongBits(radians) : 0L;\r\n        return (int) (temp ^ (temp >>> 32));\r\n    }\r\n}\r\n",
		"id": "EvoSuiteBenchmark/86_at-robots2-j/src/main/java/net/virtualinfinity/atrobots/measures/AbsoluteAngleTest12.java",
		"test_prompt": "// AbsoluteAngleTest12.java\npackage net.virtualinfinity.atrobots.measures;\n\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link AbsoluteAngle}.\n* It contains ten unit test cases for the {@link AbsoluteAngle#equals(Object)} method.\n*/\nclass AbsoluteAngleTest12 {"
	},
	{
		"original_code": "// AbsoluteAngle.java\npackage net.virtualinfinity.atrobots.measures;\r\n\r\n/**\r\n * Represents an exact angle.\r\n *\r\n * @author Daniel Pitts\r\n * @see net.virtualinfinity.atrobots.measures.RelativeAngle\r\n */\r\npublic class AbsoluteAngle {\r\n\r\n    private static final AbsoluteAngle[] bygreeTable = new AbsoluteAngle[256];\r\n\r\n    private static final double RADIANS_PER_BYGREE = Math.PI / 128.0;\r\n\r\n    private static final double BYGREES_PER_RADIANS = 128 / Math.PI;\r\n\r\n    private static final int BYGREE_MASK = 255;\r\n\r\n    private static final double FULL_CIRCLE_RADIANS = Math.PI * 2;\r\n\r\n    static {\r\n        for (int bygrees = 0; bygrees < bygreeTable.length; ++bygrees) {\r\n            bygreeTable[bygrees] = new AbsoluateBygreeAngle(bygrees);\r\n        }\r\n    }\r\n\r\n    protected boolean isExactBygrees() {\r\n        return false;\r\n    }\r\n\r\n    private final double radians;\r\n\r\n    private AbsoluteAngle(double radians) {\r\n        if (radians < 0) {\r\n            radians += FULL_CIRCLE_RADIANS;\r\n        } else if (radians >= FULL_CIRCLE_RADIANS) {\r\n            radians -= FULL_CIRCLE_RADIANS;\r\n        }\r\n        this.radians = radians;\r\n    }\r\n\r\n    public double cosine() {\r\n        return Math.cos(radians);\r\n    }\r\n\r\n    public double sine() {\r\n        return Math.sin(radians);\r\n    }\r\n\r\n    public AbsoluteAngle counterClockwise(RelativeAngle angle) {\r\n        return fromRadians(getRadians() + angle.getRadians());\r\n    }\r\n\r\n    public double getRadians() {\r\n        return radians;\r\n    }\r\n\r\n    public double getNormalizedRadians() {\r\n        if (radians >= FULL_CIRCLE_RADIANS || radians < 0) {\r\n            return Math.atan2(sine(), cosine());\r\n        }\r\n        return radians;\r\n    }\r\n\r\n    public Vector toUnitVector() {\r\n        return toVector(1);\r\n    }\r\n\r\n    public Vector toVector(double magnitude) {\r\n        return Vector.createPolar(this, magnitude);\r\n    }\r\n\r\n    public int getBygrees() {\r\n        return radiansToBygrees(getRadians());\r\n    }\r\n\r\n    public AbsoluteAngle clockwise(RelativeAngle angle) {\r\n        return fromRadians(getRadians() - angle.getRadians());\r\n    }\r\n\r\n    public byte getSignedBygrees() {\r\n        return (byte) getBygrees();\r\n    }\r\n\r\n    public boolean isClockwiseCloser(AbsoluteAngle angle) {\r\n        return getAngleCounterClockwiseTo(angle).compareTo(RelativeAngle.HALF_CIRCLE) < 0;\r\n    }\r\n\r\n    public String toString() {\r\n        return getNormalizedRadians() + \"r/\" + getBygrees();\r\n    }\r\n\r\n    public RelativeAngle counterClockwiseFromStandardOrigin() {\r\n        return RelativeAngle.fromRadians(getRadians());\r\n    }\r\n\r\n    public double getDegrees() {\r\n        return getRadians() / Math.PI * 180;\r\n    }\r\n\r\n    public RelativeAngle getAngleCounterClockwiseTo(AbsoluteAngle counterClockwiseValue) {\r\n        final double difference = getNormalizedRadians() - counterClockwiseValue.getNormalizedRadians();\r\n        return RelativeAngle.fromRadians(difference < 0 ? difference + Math.PI * 2.0 : difference);\r\n    }\r\n\r\n    public Vector projectAngle(Vector vector) {\r\n        final Vector unit = toVector(1);\r\n        return unit.times(unit.dot(vector));\r\n    }\r\n\r\n    public static AbsoluteAngle fromBygrees(int value) {\r\n        return bygreeTable[value & BYGREE_MASK];\r\n    }\r\n\r\n    public static AbsoluteAngle fromCartesian(double x, double y) {\r\n        return fromRadians(Math.atan2(y, x));\r\n    }\r\n\r\n    public static AbsoluteAngle fromRadians(double radians) {\r\n        return new AbsoluteAngle(radians);\r\n    }\r\n\r\n    private static int radiansToBygrees(double radians) {\r\n        return (int) Math.round(64 + (radians * BYGREES_PER_RADIANS)) & BYGREE_MASK;\r\n    }\r\n\r\n    private static double bygreeToRadians(int bygrees) {\r\n        return (bygrees - 64) * RADIANS_PER_BYGREE;\r\n    }\r\n\r\n    public AbsoluteAngle getSupplementary() {\r\n        return fromRadians(Math.PI + getRadians());\r\n    }\r\n\r\n    private static class AbsoluateBygreeAngle extends AbsoluteAngle {\r\n\r\n        private final double cosine;\r\n\r\n        private final double sine;\r\n\r\n        private final int bygrees;\r\n\r\n        private final byte signedBygrees;\r\n\r\n        private final double normalizedRadians;\r\n\r\n        private final double degrees;\r\n\r\n        private final RelativeAngle counterClockwiseFromStandardOrigin;\r\n\r\n        public AbsoluateBygreeAngle(int bygrees) {\r\n            super(bygreeToRadians(bygrees));\r\n            final AbsoluteAngle template = AbsoluteAngle.fromRadians(bygreeToRadians(bygrees));\r\n            switch(bygrees) {\r\n                case 0:\r\n                    this.cosine = 0;\r\n                    this.sine = -1;\r\n                    break;\r\n                case 128:\r\n                    this.cosine = 0;\r\n                    this.sine = 1;\r\n                    break;\r\n                case 192:\r\n                    this.cosine = -1;\r\n                    this.sine = 0;\r\n                    break;\r\n                default:\r\n                    this.cosine = template.cosine();\r\n                    this.sine = template.sine();\r\n                    break;\r\n            }\r\n            this.bygrees = bygrees;\r\n            this.signedBygrees = template.getSignedBygrees();\r\n            this.normalizedRadians = template.getNormalizedRadians();\r\n            this.degrees = template.getDegrees();\r\n            counterClockwiseFromStandardOrigin = RelativeAngle.fromBygrees(64 - this.bygrees);\r\n        }\r\n\r\n        @Override\r\n        public double cosine() {\r\n            return cosine;\r\n        }\r\n\r\n        @Override\r\n        public double sine() {\r\n            return sine;\r\n        }\r\n\r\n        @Override\r\n        public int getBygrees() {\r\n            return bygrees;\r\n        }\r\n\r\n        @Override\r\n        public byte getSignedBygrees() {\r\n            return signedBygrees;\r\n        }\r\n\r\n        @Override\r\n        protected boolean isExactBygrees() {\r\n            return true;\r\n        }\r\n\r\n        @Override\r\n        public double getNormalizedRadians() {\r\n            return normalizedRadians;\r\n        }\r\n\r\n        @Override\r\n        public AbsoluteAngle counterClockwise(RelativeAngle angle) {\r\n            if (angle.isExactBygrees()) {\r\n                return fromBygrees(getBygrees() + angle.getBygrees());\r\n            }\r\n            return super.counterClockwise(angle);\r\n        }\r\n\r\n        @Override\r\n        public AbsoluteAngle clockwise(RelativeAngle angle) {\r\n            if (angle.isExactBygrees()) {\r\n                return fromBygrees(getBygrees() - angle.getBygrees());\r\n            }\r\n            return super.clockwise(angle);\r\n        }\r\n\r\n        @Override\r\n        public double getDegrees() {\r\n            return degrees;\r\n        }\r\n\r\n        @Override\r\n        public RelativeAngle getAngleCounterClockwiseTo(AbsoluteAngle counterClockwiseValue) {\r\n            if (counterClockwiseValue.isExactBygrees()) {\r\n                final int difference = getBygrees() - counterClockwiseValue.getBygrees();\r\n                return RelativeAngle.fromBygrees(difference < 0 ? difference + 256 : difference);\r\n            }\r\n            return super.getAngleCounterClockwiseTo(counterClockwiseValue);\r\n        }\r\n\r\n        @Override\r\n        public RelativeAngle counterClockwiseFromStandardOrigin() {\r\n            return counterClockwiseFromStandardOrigin;\r\n        }\r\n\r\n        @Override\r\n        public AbsoluteAngle getSupplementary() {\r\n            return fromBygrees(bygrees + 128);\r\n        }\r\n    }\r\n\r\n    @Override\r\n    public boolean equals(Object o) {\r\n        if (this == o)\r\n            return true;\r\n        if (o == null || getClass() != o.getClass())\r\n            return false;\r\n        AbsoluteAngle angle = (AbsoluteAngle) o;\r\n        if (Double.compare(angle.radians, radians) != 0)\r\n            return false;\r\n        return true;\r\n    }\r\n\r\n    @Override\r\n    public int hashCode() {\r\n        long temp = radians != +0.0d ? Double.doubleToLongBits(radians) : 0L;\r\n        return (int) (temp ^ (temp >>> 32));\r\n    }\r\n}\r\n",
		"id": "EvoSuiteBenchmark/86_at-robots2-j/src/main/java/net/virtualinfinity/atrobots/measures/AbsoluteAngleTest13.java",
		"test_prompt": "// AbsoluteAngleTest13.java\npackage net.virtualinfinity.atrobots.measures;\n\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link AbsoluteAngle}.\n* It contains ten unit test cases for the {@link AbsoluteAngle#hashCode()} method.\n*/\nclass AbsoluteAngleTest13 {"
	},
	{
		"original_code": "// CartesianVector.java\npackage net.virtualinfinity.atrobots.measures;\r\n\r\n/**\r\n * A {@link net.virtualinfinity.atrobots.measures.Vector} which is implemented via a cartesian (rectangular)\r\n * representation.\r\n *\r\n * @author Daniel Pitts\r\n */\r\nclass CartesianVector extends Vector {\r\n\r\n    private final double x;\r\n\r\n    private final double y;\r\n\r\n    private CartesianVector(double x, double y) {\r\n        this.x = x;\r\n        this.y = y;\r\n    }\r\n\r\n    public double getMagnitude() {\r\n        return Math.hypot(x, y);\r\n    }\r\n\r\n    public double getMagnitudeSquared() {\r\n        return x * x + y * y;\r\n    }\r\n\r\n    public AbsoluteAngle getAngle() {\r\n        return AbsoluteAngle.fromCartesian(x, y);\r\n    }\r\n\r\n    public double getX() {\r\n        return x;\r\n    }\r\n\r\n    public double getY() {\r\n        return y;\r\n    }\r\n\r\n    public Vector times(double v) {\r\n        return fromCartesian(x * (v), y * (v));\r\n    }\r\n\r\n    public static Vector fromCartesian(double x, double y) {\r\n        return new CartesianVector(x, y);\r\n    }\r\n}\r\n",
		"id": "EvoSuiteBenchmark/86_at-robots2-j/src/main/java/net/virtualinfinity/atrobots/measures/CartesianVectorTest0.java",
		"test_prompt": "// CartesianVectorTest0.java\npackage net.virtualinfinity.atrobots.measures;\n\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link CartesianVector}.\n* It contains ten unit test cases for the {@link CartesianVector#times(double)} method.\n*/\nclass CartesianVectorTest0 {"
	},
	{
		"original_code": "// CartesianVector.java\npackage net.virtualinfinity.atrobots.measures;\r\n\r\n/**\r\n * A {@link net.virtualinfinity.atrobots.measures.Vector} which is implemented via a cartesian (rectangular)\r\n * representation.\r\n *\r\n * @author Daniel Pitts\r\n */\r\nclass CartesianVector extends Vector {\r\n\r\n    private final double x;\r\n\r\n    private final double y;\r\n\r\n    private CartesianVector(double x, double y) {\r\n        this.x = x;\r\n        this.y = y;\r\n    }\r\n\r\n    public double getMagnitude() {\r\n        return Math.hypot(x, y);\r\n    }\r\n\r\n    public double getMagnitudeSquared() {\r\n        return x * x + y * y;\r\n    }\r\n\r\n    public AbsoluteAngle getAngle() {\r\n        return AbsoluteAngle.fromCartesian(x, y);\r\n    }\r\n\r\n    public double getX() {\r\n        return x;\r\n    }\r\n\r\n    public double getY() {\r\n        return y;\r\n    }\r\n\r\n    public Vector times(double v) {\r\n        return fromCartesian(x * (v), y * (v));\r\n    }\r\n\r\n    public static Vector fromCartesian(double x, double y) {\r\n        return new CartesianVector(x, y);\r\n    }\r\n}\r\n",
		"id": "EvoSuiteBenchmark/86_at-robots2-j/src/main/java/net/virtualinfinity/atrobots/measures/CartesianVectorTest1.java",
		"test_prompt": "// CartesianVectorTest1.java\npackage net.virtualinfinity.atrobots.measures;\n\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link CartesianVector}.\n* It contains ten unit test cases for the {@link CartesianVector#fromCartesian(double, double)} method.\n*/\nclass CartesianVectorTest1 {"
	},
	{
		"original_code": "// ReaderConsoleInput.java\npackage net.virtualinfinity.atrobots.debugger;\r\n\r\nimport java.io.*;\r\n\r\n/**\r\n * TODO: Describe this class.\r\n *\r\n * @author Daniel Pitts\r\n */\r\npublic class ReaderConsoleInput implements ConsoleInput {\r\n\r\n    private final BufferedReader reader;\r\n\r\n    public ReaderConsoleInput(InputStream in) {\r\n        this(new InputStreamReader(in));\r\n    }\r\n\r\n    public ReaderConsoleInput(Reader readfer) {\r\n        this(new BufferedReader(readfer));\r\n    }\r\n\r\n    public ReaderConsoleInput(BufferedReader reader) {\r\n        this.reader = reader;\r\n    }\r\n\r\n    public String readLine() throws IOException {\r\n        return reader.readLine();\r\n    }\r\n}\r\n",
		"id": "EvoSuiteBenchmark/86_at-robots2-j/src/main/java/net/virtualinfinity/atrobots/debugger/ReaderConsoleInputTest.java",
		"test_prompt": "// ReaderConsoleInputTest.java\npackage net.virtualinfinity.atrobots.debugger;\n\nimport java.io.*;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link ReaderConsoleInput}.\n* It contains ten unit test cases for the {@link ReaderConsoleInput#readLine()} method.\n*/\nclass ReaderConsoleInputTest {"
	},
	{
		"original_code": "// ConsoleImpl.java\npackage net.virtualinfinity.atrobots.debugger;\r\n\r\nimport java.io.IOException;\r\n\r\n/**\r\n * TODO: Describe this class.\r\n *\r\n * @author Daniel Pitts\r\n */\r\npublic class ConsoleImpl implements Console {\r\n\r\n    private final ConsoleInput input;\r\n\r\n    private final ConsoleOutput output;\r\n\r\n    private final ConsoleOutput error;\r\n\r\n    public ConsoleImpl(ConsoleInput input, ConsoleOutput output, ConsoleOutput error) {\r\n        this.input = input;\r\n        this.output = output;\r\n        this.error = error;\r\n    }\r\n\r\n    public void println(Object o) {\r\n        output.println(o);\r\n    }\r\n\r\n    public String readline() throws IOException {\r\n        try {\r\n            println(\"> \");\r\n            return input.readLine();\r\n        } catch (IOException e) {\r\n            println(\"IO Exception handling debug command: \" + e.getLocalizedMessage());\r\n        }\r\n        return null;\r\n    }\r\n\r\n    public void handleException(Exception e) {\r\n        error.handleExceptione(e);\r\n    }\r\n}\r\n",
		"id": "EvoSuiteBenchmark/86_at-robots2-j/src/main/java/net/virtualinfinity/atrobots/debugger/ConsoleImplTest.java",
		"test_prompt": "// ConsoleImplTest.java\npackage net.virtualinfinity.atrobots.debugger;\n\nimport java.io.IOException;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link ConsoleImpl}.\n* It contains ten unit test cases for the {@link ConsoleImpl#readline()} method.\n*/\nclass ConsoleImplTest {"
	},
	{
		"original_code": "// DebugConsole.java\npackage net.virtualinfinity.atrobots.debugger;\r\n\r\nimport net.virtualinfinity.atrobots.atsetup.AtRobotInstruction;\r\nimport net.virtualinfinity.atrobots.atsetup.AtRobotInterrupt;\r\nimport net.virtualinfinity.atrobots.atsetup.AtRobotPort;\r\nimport net.virtualinfinity.atrobots.computer.Computer;\r\nimport net.virtualinfinity.atrobots.computer.Microcode;\r\nimport java.io.IOException;\r\n\r\n/**\r\n * TODO: Describe this class.\r\n *\r\n * @author Daniel Pitts\r\n */\r\npublic class DebugConsole {\r\n\r\n    private final Debugger debugger;\r\n\r\n    private final Console console;\r\n\r\n    private DebugConsole(Debugger debugger, Console console) {\r\n        this.console = console;\r\n        this.debugger = debugger;\r\n    }\r\n\r\n    public static DebugConsole create(Console console) {\r\n        return create(console, new Debugger());\r\n    }\r\n\r\n    public static DebugConsole create(Console console, Debugger debugger) {\r\n        return new DebugConsole(debugger, console).start();\r\n    }\r\n\r\n    private void inputLoop() throws IOException {\r\n        for (String line = readline(); line != null; line = readline()) {\r\n            handleLine(line);\r\n        }\r\n    }\r\n\r\n    private void handleLine(String line) {\r\n        try {\r\n            handleInput(line);\r\n        } catch (Exception e) {\r\n            console.handleException(e);\r\n            e.printStackTrace();\r\n        }\r\n    }\r\n\r\n    private void handleInput(String line) throws InterruptedException {\r\n        if (line.trim().length() == 0) {\r\n            debugger.step();\r\n            return;\r\n        }\r\n        final String[] tokens = line.split(\"\\\\s++\");\r\n        if (tokens[0].equalsIgnoreCase(\"pause\")) {\r\n            if (tokens.length > 1) {\r\n                debugger.pause(Integer.parseInt(tokens[1]));\r\n            } else {\r\n                debugger.pause();\r\n            }\r\n        } else if (tokens[0].equalsIgnoreCase(\"go\")) {\r\n            debugger.go();\r\n        } else if (tokens[0].equalsIgnoreCase(\"step\")) {\r\n            debugger.step();\r\n        } else if (tokens[0].equalsIgnoreCase(\"break\")) {\r\n            if (tokens.length > 1) {\r\n                debugger.setBreakpoint(Integer.parseInt(tokens[1]));\r\n            } else {\r\n                debugger.setBreakpoint();\r\n            }\r\n        } else if (tokens[0].equalsIgnoreCase(\"unbreak\")) {\r\n            if (tokens.length > 1) {\r\n                debugger.clearBreakpoint(Integer.parseInt(tokens[1]));\r\n            } else {\r\n                debugger.clearBreakpoint();\r\n            }\r\n        } else if (tokens[0].equalsIgnoreCase(\"entrant\")) {\r\n            if (tokens.length > 1) {\r\n                debugger.setDefaultEntrant(Integer.parseInt(tokens[1]));\r\n            } else {\r\n                debugger.resetDefaultEntrant();\r\n            }\r\n        } else if (tokens[0].equalsIgnoreCase(\"unbreak\")) {\r\n        } else {\r\n            println(null, \"Unknown command.\");\r\n        }\r\n    }\r\n\r\n    private void printState(Computer computer) {\r\n        println(computer, computer.getRegisters());\r\n        println(computer, computer.getInstructionPointer() + \": \" + instructionString(computer));\r\n    }\r\n\r\n    private String instructionString(Computer computer) {\r\n        if (isInterruptInstruction(computer.getOperandValue(0))) {\r\n            return operatorString(computer) + \" \" + interruptString(computer);\r\n        }\r\n        if (isPortInstruction(computer.getOperandValue(0))) {\r\n            return operatorString(computer) + \" \" + portString(computer) + \", \" + operandString(computer, 2);\r\n        }\r\n        return operatorString(computer) + \" \" + operandString(computer, 1) + \", \" + operandString(computer, 2);\r\n    }\r\n\r\n    private String portString(Computer computer) {\r\n        return AtRobotPort.nameOf(computer.getOperandValue(1)) + \"(\" + operandString(computer, 1) + \")\";\r\n    }\r\n\r\n    private String interruptString(Computer computer) {\r\n        return AtRobotInterrupt.nameOf(computer.getOperandValue(1)) + \"(\" + operandString(computer, 1) + \")\";\r\n    }\r\n\r\n    private boolean isInterruptInstruction(short operandValue) {\r\n        return AtRobotInstruction.INT.value == operandValue;\r\n    }\r\n\r\n    private boolean isPortInstruction(short operandValue) {\r\n        return AtRobotInstruction.IPO.value == operandValue || AtRobotInstruction.OPO.value == operandValue;\r\n    }\r\n\r\n    private static String operandString(Computer computer, int operand) {\r\n        Microcode microcode = computer.getMicrocode(operand);\r\n        switch(microcode) {\r\n            case DoubleDereference:\r\n                return \"[\" + variableString(computer, operand) + \"]=[\" + computer.getDeferencedValue(operand) + \"]=\" + computer.getDoubleDereferencedValue(operand);\r\n            case Dereference:\r\n                return variableString(computer, operand) + \"=\" + computer.getDeferencedValue(operand);\r\n            case NumberedLabel:\r\n                return \":\" + computer.getConstant(operand);\r\n            case ResolvedLabel:\r\n                return labelString(computer, operand);\r\n            case UnresolvedLabel:\r\n                return \"!<unknown>\";\r\n            case Constant:\r\n                return String.valueOf(computer.getConstant(operand));\r\n            default:\r\n            case Invalid:\r\n                return \"<invalid>\";\r\n        }\r\n    }\r\n\r\n    private static String labelString(Computer computer, int operand) {\r\n        return \"!\" + computer.getConstant(operand);\r\n    }\r\n\r\n    private static String variableString(Computer computer, int operand) {\r\n        return computer.getDebugInfo().getVariableName(computer.getConstant(operand));\r\n    }\r\n\r\n    private static String operatorString(Computer computer) {\r\n        Microcode microcode = computer.getMicrocode(0);\r\n        if (!microcode.isValid()) {\r\n            return \"<invalid>\";\r\n        }\r\n        final short value = microcode.getValue(computer, 0);\r\n        if (microcode == Microcode.NumberedLabel) {\r\n            return \":\" + value;\r\n        }\r\n        return AtRobotInstruction.nameOf(value);\r\n    }\r\n\r\n    private DebugConsole start() {\r\n        debugger.setBreakpointHandler(new MyBreakpointHandler());\r\n        final Thread thread = new Thread(\"Debugger\") {\r\n\r\n            public void run() {\r\n                try {\r\n                    inputLoop();\r\n                } catch (IOException e) {\r\n                    e.printStackTrace();\r\n                }\r\n            }\r\n        };\r\n        thread.setDaemon(true);\r\n        thread.start();\r\n        return this;\r\n    }\r\n\r\n    public Debugger getDebugger() {\r\n        return debugger;\r\n    }\r\n\r\n    private class MyBreakpointHandler implements BreakpointHandler {\r\n\r\n        public void handleBreakpoint(Computer computer) {\r\n            printState(computer);\r\n        }\r\n    }\r\n\r\n    public void println(Computer computer, Object o) {\r\n        if (computer != null) {\r\n            console.println(\"#\" + computer.getId() + \": \" + computer.getName() + \"} \" + o);\r\n        } else {\r\n            console.println(\" } \" + o);\r\n        }\r\n    }\r\n\r\n    public String readline() throws IOException {\r\n        return console.readline();\r\n    }\r\n}\r\n",
		"id": "EvoSuiteBenchmark/86_at-robots2-j/src/main/java/net/virtualinfinity/atrobots/debugger/DebugConsoleTest0.java",
		"test_prompt": "// DebugConsoleTest0.java\npackage net.virtualinfinity.atrobots.debugger;\n\nimport net.virtualinfinity.atrobots.atsetup.AtRobotInstruction;\nimport net.virtualinfinity.atrobots.atsetup.AtRobotInterrupt;\nimport net.virtualinfinity.atrobots.atsetup.AtRobotPort;\nimport net.virtualinfinity.atrobots.computer.Computer;\nimport net.virtualinfinity.atrobots.computer.Microcode;\nimport java.io.IOException;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link DebugConsole}.\n* It contains ten unit test cases for the {@link DebugConsole#create(Console)} method.\n*/\nclass DebugConsoleTest0 {"
	},
	{
		"original_code": "// DebugConsole.java\npackage net.virtualinfinity.atrobots.debugger;\r\n\r\nimport net.virtualinfinity.atrobots.atsetup.AtRobotInstruction;\r\nimport net.virtualinfinity.atrobots.atsetup.AtRobotInterrupt;\r\nimport net.virtualinfinity.atrobots.atsetup.AtRobotPort;\r\nimport net.virtualinfinity.atrobots.computer.Computer;\r\nimport net.virtualinfinity.atrobots.computer.Microcode;\r\nimport java.io.IOException;\r\n\r\n/**\r\n * TODO: Describe this class.\r\n *\r\n * @author Daniel Pitts\r\n */\r\npublic class DebugConsole {\r\n\r\n    private final Debugger debugger;\r\n\r\n    private final Console console;\r\n\r\n    private DebugConsole(Debugger debugger, Console console) {\r\n        this.console = console;\r\n        this.debugger = debugger;\r\n    }\r\n\r\n    public static DebugConsole create(Console console) {\r\n        return create(console, new Debugger());\r\n    }\r\n\r\n    public static DebugConsole create(Console console, Debugger debugger) {\r\n        return new DebugConsole(debugger, console).start();\r\n    }\r\n\r\n    private void inputLoop() throws IOException {\r\n        for (String line = readline(); line != null; line = readline()) {\r\n            handleLine(line);\r\n        }\r\n    }\r\n\r\n    private void handleLine(String line) {\r\n        try {\r\n            handleInput(line);\r\n        } catch (Exception e) {\r\n            console.handleException(e);\r\n            e.printStackTrace();\r\n        }\r\n    }\r\n\r\n    private void handleInput(String line) throws InterruptedException {\r\n        if (line.trim().length() == 0) {\r\n            debugger.step();\r\n            return;\r\n        }\r\n        final String[] tokens = line.split(\"\\\\s++\");\r\n        if (tokens[0].equalsIgnoreCase(\"pause\")) {\r\n            if (tokens.length > 1) {\r\n                debugger.pause(Integer.parseInt(tokens[1]));\r\n            } else {\r\n                debugger.pause();\r\n            }\r\n        } else if (tokens[0].equalsIgnoreCase(\"go\")) {\r\n            debugger.go();\r\n        } else if (tokens[0].equalsIgnoreCase(\"step\")) {\r\n            debugger.step();\r\n        } else if (tokens[0].equalsIgnoreCase(\"break\")) {\r\n            if (tokens.length > 1) {\r\n                debugger.setBreakpoint(Integer.parseInt(tokens[1]));\r\n            } else {\r\n                debugger.setBreakpoint();\r\n            }\r\n        } else if (tokens[0].equalsIgnoreCase(\"unbreak\")) {\r\n            if (tokens.length > 1) {\r\n                debugger.clearBreakpoint(Integer.parseInt(tokens[1]));\r\n            } else {\r\n                debugger.clearBreakpoint();\r\n            }\r\n        } else if (tokens[0].equalsIgnoreCase(\"entrant\")) {\r\n            if (tokens.length > 1) {\r\n                debugger.setDefaultEntrant(Integer.parseInt(tokens[1]));\r\n            } else {\r\n                debugger.resetDefaultEntrant();\r\n            }\r\n        } else if (tokens[0].equalsIgnoreCase(\"unbreak\")) {\r\n        } else {\r\n            println(null, \"Unknown command.\");\r\n        }\r\n    }\r\n\r\n    private void printState(Computer computer) {\r\n        println(computer, computer.getRegisters());\r\n        println(computer, computer.getInstructionPointer() + \": \" + instructionString(computer));\r\n    }\r\n\r\n    private String instructionString(Computer computer) {\r\n        if (isInterruptInstruction(computer.getOperandValue(0))) {\r\n            return operatorString(computer) + \" \" + interruptString(computer);\r\n        }\r\n        if (isPortInstruction(computer.getOperandValue(0))) {\r\n            return operatorString(computer) + \" \" + portString(computer) + \", \" + operandString(computer, 2);\r\n        }\r\n        return operatorString(computer) + \" \" + operandString(computer, 1) + \", \" + operandString(computer, 2);\r\n    }\r\n\r\n    private String portString(Computer computer) {\r\n        return AtRobotPort.nameOf(computer.getOperandValue(1)) + \"(\" + operandString(computer, 1) + \")\";\r\n    }\r\n\r\n    private String interruptString(Computer computer) {\r\n        return AtRobotInterrupt.nameOf(computer.getOperandValue(1)) + \"(\" + operandString(computer, 1) + \")\";\r\n    }\r\n\r\n    private boolean isInterruptInstruction(short operandValue) {\r\n        return AtRobotInstruction.INT.value == operandValue;\r\n    }\r\n\r\n    private boolean isPortInstruction(short operandValue) {\r\n        return AtRobotInstruction.IPO.value == operandValue || AtRobotInstruction.OPO.value == operandValue;\r\n    }\r\n\r\n    private static String operandString(Computer computer, int operand) {\r\n        Microcode microcode = computer.getMicrocode(operand);\r\n        switch(microcode) {\r\n            case DoubleDereference:\r\n                return \"[\" + variableString(computer, operand) + \"]=[\" + computer.getDeferencedValue(operand) + \"]=\" + computer.getDoubleDereferencedValue(operand);\r\n            case Dereference:\r\n                return variableString(computer, operand) + \"=\" + computer.getDeferencedValue(operand);\r\n            case NumberedLabel:\r\n                return \":\" + computer.getConstant(operand);\r\n            case ResolvedLabel:\r\n                return labelString(computer, operand);\r\n            case UnresolvedLabel:\r\n                return \"!<unknown>\";\r\n            case Constant:\r\n                return String.valueOf(computer.getConstant(operand));\r\n            default:\r\n            case Invalid:\r\n                return \"<invalid>\";\r\n        }\r\n    }\r\n\r\n    private static String labelString(Computer computer, int operand) {\r\n        return \"!\" + computer.getConstant(operand);\r\n    }\r\n\r\n    private static String variableString(Computer computer, int operand) {\r\n        return computer.getDebugInfo().getVariableName(computer.getConstant(operand));\r\n    }\r\n\r\n    private static String operatorString(Computer computer) {\r\n        Microcode microcode = computer.getMicrocode(0);\r\n        if (!microcode.isValid()) {\r\n            return \"<invalid>\";\r\n        }\r\n        final short value = microcode.getValue(computer, 0);\r\n        if (microcode == Microcode.NumberedLabel) {\r\n            return \":\" + value;\r\n        }\r\n        return AtRobotInstruction.nameOf(value);\r\n    }\r\n\r\n    private DebugConsole start() {\r\n        debugger.setBreakpointHandler(new MyBreakpointHandler());\r\n        final Thread thread = new Thread(\"Debugger\") {\r\n\r\n            public void run() {\r\n                try {\r\n                    inputLoop();\r\n                } catch (IOException e) {\r\n                    e.printStackTrace();\r\n                }\r\n            }\r\n        };\r\n        thread.setDaemon(true);\r\n        thread.start();\r\n        return this;\r\n    }\r\n\r\n    public Debugger getDebugger() {\r\n        return debugger;\r\n    }\r\n\r\n    private class MyBreakpointHandler implements BreakpointHandler {\r\n\r\n        public void handleBreakpoint(Computer computer) {\r\n            printState(computer);\r\n        }\r\n    }\r\n\r\n    public void println(Computer computer, Object o) {\r\n        if (computer != null) {\r\n            console.println(\"#\" + computer.getId() + \": \" + computer.getName() + \"} \" + o);\r\n        } else {\r\n            console.println(\" } \" + o);\r\n        }\r\n    }\r\n\r\n    public String readline() throws IOException {\r\n        return console.readline();\r\n    }\r\n}\r\n",
		"id": "EvoSuiteBenchmark/86_at-robots2-j/src/main/java/net/virtualinfinity/atrobots/debugger/DebugConsoleTest1.java",
		"test_prompt": "// DebugConsoleTest1.java\npackage net.virtualinfinity.atrobots.debugger;\n\nimport net.virtualinfinity.atrobots.atsetup.AtRobotInstruction;\nimport net.virtualinfinity.atrobots.atsetup.AtRobotInterrupt;\nimport net.virtualinfinity.atrobots.atsetup.AtRobotPort;\nimport net.virtualinfinity.atrobots.computer.Computer;\nimport net.virtualinfinity.atrobots.computer.Microcode;\nimport java.io.IOException;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link DebugConsole}.\n* It contains ten unit test cases for the {@link DebugConsole#create(Console, Debugger)} method.\n*/\nclass DebugConsoleTest1 {"
	},
	{
		"original_code": "// DebugConsole.java\npackage net.virtualinfinity.atrobots.debugger;\r\n\r\nimport net.virtualinfinity.atrobots.atsetup.AtRobotInstruction;\r\nimport net.virtualinfinity.atrobots.atsetup.AtRobotInterrupt;\r\nimport net.virtualinfinity.atrobots.atsetup.AtRobotPort;\r\nimport net.virtualinfinity.atrobots.computer.Computer;\r\nimport net.virtualinfinity.atrobots.computer.Microcode;\r\nimport java.io.IOException;\r\n\r\n/**\r\n * TODO: Describe this class.\r\n *\r\n * @author Daniel Pitts\r\n */\r\npublic class DebugConsole {\r\n\r\n    private final Debugger debugger;\r\n\r\n    private final Console console;\r\n\r\n    private DebugConsole(Debugger debugger, Console console) {\r\n        this.console = console;\r\n        this.debugger = debugger;\r\n    }\r\n\r\n    public static DebugConsole create(Console console) {\r\n        return create(console, new Debugger());\r\n    }\r\n\r\n    public static DebugConsole create(Console console, Debugger debugger) {\r\n        return new DebugConsole(debugger, console).start();\r\n    }\r\n\r\n    private void inputLoop() throws IOException {\r\n        for (String line = readline(); line != null; line = readline()) {\r\n            handleLine(line);\r\n        }\r\n    }\r\n\r\n    private void handleLine(String line) {\r\n        try {\r\n            handleInput(line);\r\n        } catch (Exception e) {\r\n            console.handleException(e);\r\n            e.printStackTrace();\r\n        }\r\n    }\r\n\r\n    private void handleInput(String line) throws InterruptedException {\r\n        if (line.trim().length() == 0) {\r\n            debugger.step();\r\n            return;\r\n        }\r\n        final String[] tokens = line.split(\"\\\\s++\");\r\n        if (tokens[0].equalsIgnoreCase(\"pause\")) {\r\n            if (tokens.length > 1) {\r\n                debugger.pause(Integer.parseInt(tokens[1]));\r\n            } else {\r\n                debugger.pause();\r\n            }\r\n        } else if (tokens[0].equalsIgnoreCase(\"go\")) {\r\n            debugger.go();\r\n        } else if (tokens[0].equalsIgnoreCase(\"step\")) {\r\n            debugger.step();\r\n        } else if (tokens[0].equalsIgnoreCase(\"break\")) {\r\n            if (tokens.length > 1) {\r\n                debugger.setBreakpoint(Integer.parseInt(tokens[1]));\r\n            } else {\r\n                debugger.setBreakpoint();\r\n            }\r\n        } else if (tokens[0].equalsIgnoreCase(\"unbreak\")) {\r\n            if (tokens.length > 1) {\r\n                debugger.clearBreakpoint(Integer.parseInt(tokens[1]));\r\n            } else {\r\n                debugger.clearBreakpoint();\r\n            }\r\n        } else if (tokens[0].equalsIgnoreCase(\"entrant\")) {\r\n            if (tokens.length > 1) {\r\n                debugger.setDefaultEntrant(Integer.parseInt(tokens[1]));\r\n            } else {\r\n                debugger.resetDefaultEntrant();\r\n            }\r\n        } else if (tokens[0].equalsIgnoreCase(\"unbreak\")) {\r\n        } else {\r\n            println(null, \"Unknown command.\");\r\n        }\r\n    }\r\n\r\n    private void printState(Computer computer) {\r\n        println(computer, computer.getRegisters());\r\n        println(computer, computer.getInstructionPointer() + \": \" + instructionString(computer));\r\n    }\r\n\r\n    private String instructionString(Computer computer) {\r\n        if (isInterruptInstruction(computer.getOperandValue(0))) {\r\n            return operatorString(computer) + \" \" + interruptString(computer);\r\n        }\r\n        if (isPortInstruction(computer.getOperandValue(0))) {\r\n            return operatorString(computer) + \" \" + portString(computer) + \", \" + operandString(computer, 2);\r\n        }\r\n        return operatorString(computer) + \" \" + operandString(computer, 1) + \", \" + operandString(computer, 2);\r\n    }\r\n\r\n    private String portString(Computer computer) {\r\n        return AtRobotPort.nameOf(computer.getOperandValue(1)) + \"(\" + operandString(computer, 1) + \")\";\r\n    }\r\n\r\n    private String interruptString(Computer computer) {\r\n        return AtRobotInterrupt.nameOf(computer.getOperandValue(1)) + \"(\" + operandString(computer, 1) + \")\";\r\n    }\r\n\r\n    private boolean isInterruptInstruction(short operandValue) {\r\n        return AtRobotInstruction.INT.value == operandValue;\r\n    }\r\n\r\n    private boolean isPortInstruction(short operandValue) {\r\n        return AtRobotInstruction.IPO.value == operandValue || AtRobotInstruction.OPO.value == operandValue;\r\n    }\r\n\r\n    private static String operandString(Computer computer, int operand) {\r\n        Microcode microcode = computer.getMicrocode(operand);\r\n        switch(microcode) {\r\n            case DoubleDereference:\r\n                return \"[\" + variableString(computer, operand) + \"]=[\" + computer.getDeferencedValue(operand) + \"]=\" + computer.getDoubleDereferencedValue(operand);\r\n            case Dereference:\r\n                return variableString(computer, operand) + \"=\" + computer.getDeferencedValue(operand);\r\n            case NumberedLabel:\r\n                return \":\" + computer.getConstant(operand);\r\n            case ResolvedLabel:\r\n                return labelString(computer, operand);\r\n            case UnresolvedLabel:\r\n                return \"!<unknown>\";\r\n            case Constant:\r\n                return String.valueOf(computer.getConstant(operand));\r\n            default:\r\n            case Invalid:\r\n                return \"<invalid>\";\r\n        }\r\n    }\r\n\r\n    private static String labelString(Computer computer, int operand) {\r\n        return \"!\" + computer.getConstant(operand);\r\n    }\r\n\r\n    private static String variableString(Computer computer, int operand) {\r\n        return computer.getDebugInfo().getVariableName(computer.getConstant(operand));\r\n    }\r\n\r\n    private static String operatorString(Computer computer) {\r\n        Microcode microcode = computer.getMicrocode(0);\r\n        if (!microcode.isValid()) {\r\n            return \"<invalid>\";\r\n        }\r\n        final short value = microcode.getValue(computer, 0);\r\n        if (microcode == Microcode.NumberedLabel) {\r\n            return \":\" + value;\r\n        }\r\n        return AtRobotInstruction.nameOf(value);\r\n    }\r\n\r\n    private DebugConsole start() {\r\n        debugger.setBreakpointHandler(new MyBreakpointHandler());\r\n        final Thread thread = new Thread(\"Debugger\") {\r\n\r\n            public void run() {\r\n                try {\r\n                    inputLoop();\r\n                } catch (IOException e) {\r\n                    e.printStackTrace();\r\n                }\r\n            }\r\n        };\r\n        thread.setDaemon(true);\r\n        thread.start();\r\n        return this;\r\n    }\r\n\r\n    public Debugger getDebugger() {\r\n        return debugger;\r\n    }\r\n\r\n    private class MyBreakpointHandler implements BreakpointHandler {\r\n\r\n        public void handleBreakpoint(Computer computer) {\r\n            printState(computer);\r\n        }\r\n    }\r\n\r\n    public void println(Computer computer, Object o) {\r\n        if (computer != null) {\r\n            console.println(\"#\" + computer.getId() + \": \" + computer.getName() + \"} \" + o);\r\n        } else {\r\n            console.println(\" } \" + o);\r\n        }\r\n    }\r\n\r\n    public String readline() throws IOException {\r\n        return console.readline();\r\n    }\r\n}\r\n",
		"id": "EvoSuiteBenchmark/86_at-robots2-j/src/main/java/net/virtualinfinity/atrobots/debugger/DebugConsoleTest2.java",
		"test_prompt": "// DebugConsoleTest2.java\npackage net.virtualinfinity.atrobots.debugger;\n\nimport net.virtualinfinity.atrobots.atsetup.AtRobotInstruction;\nimport net.virtualinfinity.atrobots.atsetup.AtRobotInterrupt;\nimport net.virtualinfinity.atrobots.atsetup.AtRobotPort;\nimport net.virtualinfinity.atrobots.computer.Computer;\nimport net.virtualinfinity.atrobots.computer.Microcode;\nimport java.io.IOException;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link DebugConsole}.\n* It contains ten unit test cases for the {@link DebugConsole#readline()} method.\n*/\nclass DebugConsoleTest2 {"
	},
	{
		"original_code": "// Debugger.java\npackage net.virtualinfinity.atrobots.debugger;\r\n\r\nimport net.virtualinfinity.atrobots.computer.Computer;\r\nimport net.virtualinfinity.atrobots.computer.DebugListener;\r\nimport java.util.*;\r\nimport java.util.concurrent.BlockingQueue;\r\nimport java.util.concurrent.LinkedBlockingDeque;\r\n\r\n/**\r\n * TODO: Describe this class.\r\n *\r\n * @author Daniel Pitts\r\n */\r\npublic class Debugger implements DebugListener {\r\n\r\n    private final BlockingQueue<Command> afterBreakpointCommandQueue = new LinkedBlockingDeque<Command>();\r\n\r\n    private final BlockingQueue<Command> commandQueue = new LinkedBlockingDeque<Command>();\r\n\r\n    private BreakpointHandler breakpointHandler;\r\n\r\n    private volatile boolean allPaused;\r\n\r\n    private boolean wasAllPaused;\r\n\r\n    private volatile Integer defaultEntrant;\r\n\r\n    private boolean inBreakpoint;\r\n\r\n    protected void doPauseAll() {\r\n        allPaused = true;\r\n    }\r\n\r\n    private final Map<Integer, EntrantState> entrantStates = new HashMap<Integer, EntrantState>();\r\n\r\n    protected EntrantState getEntrantState(Computer computer) {\r\n        return getEntrantState(computer.getId());\r\n    }\r\n\r\n    private EntrantState getEntrantState(int entrantId) {\r\n        EntrantState state = entrantStates.get(entrantId);\r\n        if (state == null) {\r\n            state = createEntrantState();\r\n            entrantStates.put(entrantId, state);\r\n        }\r\n        return state;\r\n    }\r\n\r\n    protected EntrantState createEntrantState() {\r\n        return new EntrantState();\r\n    }\r\n\r\n    protected boolean isPaused(Computer computer) {\r\n        return allPaused || getEntrantState(computer).isPaused();\r\n    }\r\n\r\n    protected void doPause(Computer computer) {\r\n        getEntrantState(computer).pause();\r\n    }\r\n\r\n    protected boolean doPause(Integer entrantId) {\r\n        return getEntrantState(entrantId).isPaused();\r\n    }\r\n\r\n    protected void clearPaused(Computer computer) {\r\n        if (getEntrantState(computer).isPaused()) {\r\n            getEntrantState(computer).clearPaused();\r\n        } else {\r\n            allPaused = false;\r\n        }\r\n    }\r\n\r\n    private boolean isBreakpoint(Computer computer) {\r\n        return getEntrantState(computer).isBreakpoint(computer);\r\n    }\r\n\r\n    public void afterInstruction(Computer computer) {\r\n    }\r\n\r\n    public boolean isAllPaused() {\r\n        return allPaused;\r\n    }\r\n\r\n    public int getDefaultEntrant() {\r\n        return defaultEntrant;\r\n    }\r\n\r\n    public void setDefaultEntrant(int defaultEntrant) {\r\n        this.defaultEntrant = defaultEntrant;\r\n    }\r\n\r\n    public void clearDefaultEntrant() {\r\n        this.defaultEntrant = null;\r\n    }\r\n\r\n    public boolean hasDefaultEntrant() {\r\n        return defaultEntrant != null;\r\n    }\r\n\r\n    protected void invokeOnBreakpoint(Command command) throws InterruptedException {\r\n        afterBreakpointCommandQueue.put(command);\r\n    }\r\n\r\n    protected void invokeLater(Command command) throws InterruptedException {\r\n        commandQueue.put(command);\r\n    }\r\n\r\n    public void beforeInstruction(Computer computer) {\r\n        try {\r\n            final Collection<Command> commands = new ArrayList<Command>();\r\n            commandQueue.drainTo(commands);\r\n            for (Command command : commands) {\r\n                command.execute(computer);\r\n            }\r\n            wasAllPaused = isAllPaused();\r\n            if (isBreakpoint(computer) || isPaused(computer)) {\r\n                clearPaused(computer);\r\n                getBreakpointHandler().handleBreakpoint(computer);\r\n                waitForCommandAfterBreakpoint(computer);\r\n            }\r\n        } catch (InterruptedException e) {\r\n            Thread.interrupted();\r\n            e.printStackTrace();\r\n        }\r\n    }\r\n\r\n    private void waitForCommandAfterBreakpoint(Computer computer) throws InterruptedException {\r\n        inBreakpoint = true;\r\n        while (inBreakpoint) {\r\n            afterBreakpointCommandQueue.take().execute(computer);\r\n        }\r\n    }\r\n\r\n    public void pause(final int enrantId) throws InterruptedException {\r\n        invokeLater(new Command() {\r\n\r\n            public void execute(Computer computer) {\r\n                doPause(enrantId);\r\n            }\r\n        });\r\n    }\r\n\r\n    public void pauseAll() throws InterruptedException {\r\n        invokeLater(new Command() {\r\n\r\n            public void execute(Computer computer) {\r\n                doPauseAll();\r\n            }\r\n        });\r\n    }\r\n\r\n    public void go() throws InterruptedException {\r\n        invokeOnBreakpoint(new Command() {\r\n\r\n            public void execute(Computer computer) {\r\n                inBreakpoint = false;\r\n                clearPaused(computer);\r\n            }\r\n        });\r\n    }\r\n\r\n    public void step() throws InterruptedException {\r\n        invokeOnBreakpoint(new Command() {\r\n\r\n            public void execute(Computer computer) throws InterruptedException {\r\n                inBreakpoint = false;\r\n                if (wasAllPaused) {\r\n                    doPauseAll();\r\n                } else {\r\n                    doPause(computer);\r\n                }\r\n            }\r\n        });\r\n    }\r\n\r\n    public void pause() throws InterruptedException {\r\n        if (hasDefaultEntrant()) {\r\n            pause(getDefaultEntrant());\r\n        }\r\n        pauseAll();\r\n    }\r\n\r\n    public BreakpointHandler getBreakpointHandler() {\r\n        return breakpointHandler;\r\n    }\r\n\r\n    public void setBreakpointHandler(BreakpointHandler breakpointHandler) {\r\n        this.breakpointHandler = breakpointHandler;\r\n    }\r\n\r\n    public void clearBreakpoint() throws InterruptedException {\r\n        invokeOnBreakpoint(new Command() {\r\n\r\n            public void execute(Computer computer) {\r\n                getEntrantState(computer).removeBreakpoint(computer.getInstructionPointer());\r\n            }\r\n        });\r\n    }\r\n\r\n    public void clearBreakpoint(final int instructionPointer) throws InterruptedException {\r\n        invokeLater(new Command() {\r\n\r\n            public void execute(Computer computer) {\r\n                getDefaultEntrantState(computer).removeBreakpoint(instructionPointer);\r\n            }\r\n        });\r\n    }\r\n\r\n    public void setBreakpoint() throws InterruptedException {\r\n        invokeOnBreakpoint(new Command() {\r\n\r\n            public void execute(Computer computer) {\r\n                getEntrantState(computer).setBreakpoint(computer.getInstructionPointer());\r\n            }\r\n        });\r\n    }\r\n\r\n    public void setBreakpoint(final int instructionPointer) throws InterruptedException {\r\n        invokeLater(new Command() {\r\n\r\n            public void execute(Computer computer) {\r\n                getDefaultEntrantState(computer).setBreakpoint(instructionPointer);\r\n            }\r\n        });\r\n    }\r\n\r\n    private EntrantState getDefaultEntrantState(Computer computer) {\r\n        return hasDefaultEntrant() ? getEntrantState(getDefaultEntrant()) : getEntrantState(computer);\r\n    }\r\n\r\n    public void resetDefaultEntrant() throws InterruptedException {\r\n        invokeLater(new Command() {\r\n\r\n            public void execute(Computer computer) throws InterruptedException {\r\n                setDefaultEntrant(computer.getId());\r\n            }\r\n        });\r\n    }\r\n\r\n    protected static class EntrantState {\r\n\r\n        private Set<Integer> breakpoints = new HashSet<Integer>();\r\n\r\n        private boolean paused;\r\n\r\n        public boolean isBreakpoint(Computer computer) {\r\n            return breakpoints.contains(computer.getInstructionPointer());\r\n        }\r\n\r\n        public void setBreakpoint(int breakpoint) {\r\n            breakpoints.add(breakpoint);\r\n        }\r\n\r\n        public void removeBreakpoint(int breakpoint) {\r\n            breakpoints.remove(breakpoint);\r\n        }\r\n\r\n        public boolean isPaused() {\r\n            return paused;\r\n        }\r\n\r\n        public void clearPaused() {\r\n            paused = false;\r\n        }\r\n\r\n        public void pause() {\r\n            paused = true;\r\n        }\r\n    }\r\n\r\n    protected static interface Command {\r\n\r\n        void execute(Computer computer) throws InterruptedException;\r\n    }\r\n}\r\n",
		"id": "EvoSuiteBenchmark/86_at-robots2-j/src/main/java/net/virtualinfinity/atrobots/debugger/DebuggerTest0.java",
		"test_prompt": "// DebuggerTest0.java\npackage net.virtualinfinity.atrobots.debugger;\n\nimport net.virtualinfinity.atrobots.computer.Computer;\nimport net.virtualinfinity.atrobots.computer.DebugListener;\nimport java.util.*;\nimport java.util.concurrent.BlockingQueue;\nimport java.util.concurrent.LinkedBlockingDeque;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link Debugger}.\n* It contains ten unit test cases for the {@link Debugger#isAllPaused()} method.\n*/\nclass DebuggerTest0 {"
	},
	{
		"original_code": "// Debugger.java\npackage net.virtualinfinity.atrobots.debugger;\r\n\r\nimport net.virtualinfinity.atrobots.computer.Computer;\r\nimport net.virtualinfinity.atrobots.computer.DebugListener;\r\nimport java.util.*;\r\nimport java.util.concurrent.BlockingQueue;\r\nimport java.util.concurrent.LinkedBlockingDeque;\r\n\r\n/**\r\n * TODO: Describe this class.\r\n *\r\n * @author Daniel Pitts\r\n */\r\npublic class Debugger implements DebugListener {\r\n\r\n    private final BlockingQueue<Command> afterBreakpointCommandQueue = new LinkedBlockingDeque<Command>();\r\n\r\n    private final BlockingQueue<Command> commandQueue = new LinkedBlockingDeque<Command>();\r\n\r\n    private BreakpointHandler breakpointHandler;\r\n\r\n    private volatile boolean allPaused;\r\n\r\n    private boolean wasAllPaused;\r\n\r\n    private volatile Integer defaultEntrant;\r\n\r\n    private boolean inBreakpoint;\r\n\r\n    protected void doPauseAll() {\r\n        allPaused = true;\r\n    }\r\n\r\n    private final Map<Integer, EntrantState> entrantStates = new HashMap<Integer, EntrantState>();\r\n\r\n    protected EntrantState getEntrantState(Computer computer) {\r\n        return getEntrantState(computer.getId());\r\n    }\r\n\r\n    private EntrantState getEntrantState(int entrantId) {\r\n        EntrantState state = entrantStates.get(entrantId);\r\n        if (state == null) {\r\n            state = createEntrantState();\r\n            entrantStates.put(entrantId, state);\r\n        }\r\n        return state;\r\n    }\r\n\r\n    protected EntrantState createEntrantState() {\r\n        return new EntrantState();\r\n    }\r\n\r\n    protected boolean isPaused(Computer computer) {\r\n        return allPaused || getEntrantState(computer).isPaused();\r\n    }\r\n\r\n    protected void doPause(Computer computer) {\r\n        getEntrantState(computer).pause();\r\n    }\r\n\r\n    protected boolean doPause(Integer entrantId) {\r\n        return getEntrantState(entrantId).isPaused();\r\n    }\r\n\r\n    protected void clearPaused(Computer computer) {\r\n        if (getEntrantState(computer).isPaused()) {\r\n            getEntrantState(computer).clearPaused();\r\n        } else {\r\n            allPaused = false;\r\n        }\r\n    }\r\n\r\n    private boolean isBreakpoint(Computer computer) {\r\n        return getEntrantState(computer).isBreakpoint(computer);\r\n    }\r\n\r\n    public void afterInstruction(Computer computer) {\r\n    }\r\n\r\n    public boolean isAllPaused() {\r\n        return allPaused;\r\n    }\r\n\r\n    public int getDefaultEntrant() {\r\n        return defaultEntrant;\r\n    }\r\n\r\n    public void setDefaultEntrant(int defaultEntrant) {\r\n        this.defaultEntrant = defaultEntrant;\r\n    }\r\n\r\n    public void clearDefaultEntrant() {\r\n        this.defaultEntrant = null;\r\n    }\r\n\r\n    public boolean hasDefaultEntrant() {\r\n        return defaultEntrant != null;\r\n    }\r\n\r\n    protected void invokeOnBreakpoint(Command command) throws InterruptedException {\r\n        afterBreakpointCommandQueue.put(command);\r\n    }\r\n\r\n    protected void invokeLater(Command command) throws InterruptedException {\r\n        commandQueue.put(command);\r\n    }\r\n\r\n    public void beforeInstruction(Computer computer) {\r\n        try {\r\n            final Collection<Command> commands = new ArrayList<Command>();\r\n            commandQueue.drainTo(commands);\r\n            for (Command command : commands) {\r\n                command.execute(computer);\r\n            }\r\n            wasAllPaused = isAllPaused();\r\n            if (isBreakpoint(computer) || isPaused(computer)) {\r\n                clearPaused(computer);\r\n                getBreakpointHandler().handleBreakpoint(computer);\r\n                waitForCommandAfterBreakpoint(computer);\r\n            }\r\n        } catch (InterruptedException e) {\r\n            Thread.interrupted();\r\n            e.printStackTrace();\r\n        }\r\n    }\r\n\r\n    private void waitForCommandAfterBreakpoint(Computer computer) throws InterruptedException {\r\n        inBreakpoint = true;\r\n        while (inBreakpoint) {\r\n            afterBreakpointCommandQueue.take().execute(computer);\r\n        }\r\n    }\r\n\r\n    public void pause(final int enrantId) throws InterruptedException {\r\n        invokeLater(new Command() {\r\n\r\n            public void execute(Computer computer) {\r\n                doPause(enrantId);\r\n            }\r\n        });\r\n    }\r\n\r\n    public void pauseAll() throws InterruptedException {\r\n        invokeLater(new Command() {\r\n\r\n            public void execute(Computer computer) {\r\n                doPauseAll();\r\n            }\r\n        });\r\n    }\r\n\r\n    public void go() throws InterruptedException {\r\n        invokeOnBreakpoint(new Command() {\r\n\r\n            public void execute(Computer computer) {\r\n                inBreakpoint = false;\r\n                clearPaused(computer);\r\n            }\r\n        });\r\n    }\r\n\r\n    public void step() throws InterruptedException {\r\n        invokeOnBreakpoint(new Command() {\r\n\r\n            public void execute(Computer computer) throws InterruptedException {\r\n                inBreakpoint = false;\r\n                if (wasAllPaused) {\r\n                    doPauseAll();\r\n                } else {\r\n                    doPause(computer);\r\n                }\r\n            }\r\n        });\r\n    }\r\n\r\n    public void pause() throws InterruptedException {\r\n        if (hasDefaultEntrant()) {\r\n            pause(getDefaultEntrant());\r\n        }\r\n        pauseAll();\r\n    }\r\n\r\n    public BreakpointHandler getBreakpointHandler() {\r\n        return breakpointHandler;\r\n    }\r\n\r\n    public void setBreakpointHandler(BreakpointHandler breakpointHandler) {\r\n        this.breakpointHandler = breakpointHandler;\r\n    }\r\n\r\n    public void clearBreakpoint() throws InterruptedException {\r\n        invokeOnBreakpoint(new Command() {\r\n\r\n            public void execute(Computer computer) {\r\n                getEntrantState(computer).removeBreakpoint(computer.getInstructionPointer());\r\n            }\r\n        });\r\n    }\r\n\r\n    public void clearBreakpoint(final int instructionPointer) throws InterruptedException {\r\n        invokeLater(new Command() {\r\n\r\n            public void execute(Computer computer) {\r\n                getDefaultEntrantState(computer).removeBreakpoint(instructionPointer);\r\n            }\r\n        });\r\n    }\r\n\r\n    public void setBreakpoint() throws InterruptedException {\r\n        invokeOnBreakpoint(new Command() {\r\n\r\n            public void execute(Computer computer) {\r\n                getEntrantState(computer).setBreakpoint(computer.getInstructionPointer());\r\n            }\r\n        });\r\n    }\r\n\r\n    public void setBreakpoint(final int instructionPointer) throws InterruptedException {\r\n        invokeLater(new Command() {\r\n\r\n            public void execute(Computer computer) {\r\n                getDefaultEntrantState(computer).setBreakpoint(instructionPointer);\r\n            }\r\n        });\r\n    }\r\n\r\n    private EntrantState getDefaultEntrantState(Computer computer) {\r\n        return hasDefaultEntrant() ? getEntrantState(getDefaultEntrant()) : getEntrantState(computer);\r\n    }\r\n\r\n    public void resetDefaultEntrant() throws InterruptedException {\r\n        invokeLater(new Command() {\r\n\r\n            public void execute(Computer computer) throws InterruptedException {\r\n                setDefaultEntrant(computer.getId());\r\n            }\r\n        });\r\n    }\r\n\r\n    protected static class EntrantState {\r\n\r\n        private Set<Integer> breakpoints = new HashSet<Integer>();\r\n\r\n        private boolean paused;\r\n\r\n        public boolean isBreakpoint(Computer computer) {\r\n            return breakpoints.contains(computer.getInstructionPointer());\r\n        }\r\n\r\n        public void setBreakpoint(int breakpoint) {\r\n            breakpoints.add(breakpoint);\r\n        }\r\n\r\n        public void removeBreakpoint(int breakpoint) {\r\n            breakpoints.remove(breakpoint);\r\n        }\r\n\r\n        public boolean isPaused() {\r\n            return paused;\r\n        }\r\n\r\n        public void clearPaused() {\r\n            paused = false;\r\n        }\r\n\r\n        public void pause() {\r\n            paused = true;\r\n        }\r\n    }\r\n\r\n    protected static interface Command {\r\n\r\n        void execute(Computer computer) throws InterruptedException;\r\n    }\r\n}\r\n",
		"id": "EvoSuiteBenchmark/86_at-robots2-j/src/main/java/net/virtualinfinity/atrobots/debugger/DebuggerTest1.java",
		"test_prompt": "// DebuggerTest1.java\npackage net.virtualinfinity.atrobots.debugger;\n\nimport net.virtualinfinity.atrobots.computer.Computer;\nimport net.virtualinfinity.atrobots.computer.DebugListener;\nimport java.util.*;\nimport java.util.concurrent.BlockingQueue;\nimport java.util.concurrent.LinkedBlockingDeque;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link Debugger}.\n* It contains ten unit test cases for the {@link Debugger#hasDefaultEntrant()} method.\n*/\nclass DebuggerTest1 {"
	},
	{
		"original_code": "// Velocity.java\npackage net.virtualinfinity.atrobots.arena;\r\n\r\nimport net.virtualinfinity.atrobots.measures.Duration;\r\nimport net.virtualinfinity.atrobots.measures.Vector;\r\n\r\n/**\r\n * @author Daniel Pitts\r\n */\r\npublic class Velocity {\r\n\r\n    private final Heading heading;\r\n\r\n    private final Speed speed;\r\n\r\n    public Velocity(Heading heading, Speed speed) {\r\n        this.heading = heading;\r\n        this.speed = speed;\r\n    }\r\n\r\n    public Vector times(Duration duration) {\r\n        return heading.times(speed.times(duration));\r\n    }\r\n\r\n    public String toString() {\r\n        return heading + \"*\" + speed;\r\n    }\r\n}\r\n",
		"id": "EvoSuiteBenchmark/86_at-robots2-j/src/main/java/net/virtualinfinity/atrobots/arena/VelocityTest.java",
		"test_prompt": "// VelocityTest.java\npackage net.virtualinfinity.atrobots.arena;\n\nimport net.virtualinfinity.atrobots.measures.Duration;\nimport net.virtualinfinity.atrobots.measures.Vector;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link Velocity}.\n* It contains ten unit test cases for the {@link Velocity#times(Duration)} method.\n*/\nclass VelocityTest {"
	},
	{
		"original_code": "// Heading.java\npackage net.virtualinfinity.atrobots.arena;\r\n\r\nimport net.virtualinfinity.atrobots.measures.AbsoluteAngle;\r\nimport net.virtualinfinity.atrobots.measures.AngleBracket;\r\nimport net.virtualinfinity.atrobots.measures.RelativeAngle;\r\nimport net.virtualinfinity.atrobots.measures.Vector;\r\n\r\n/**\r\n * @author Daniel Pitts\r\n */\r\npublic class Heading {\r\n\r\n    private AbsoluteAngle absoluteAngle;\r\n\r\n    private RelativeAngle relativeAngle = RelativeAngle.fromBygrees(0);\r\n\r\n    private boolean absolute = true;\r\n\r\n    private Heading relation;\r\n\r\n    public Heading() {\r\n        this(AbsoluteAngle.fromBygrees((int) (Math.random() * 256)));\r\n    }\r\n\r\n    public Heading(AbsoluteAngle absoluteAngle) {\r\n        this.absoluteAngle = absoluteAngle;\r\n    }\r\n\r\n    public Vector times(double distance) {\r\n        return getAngle().toVector(distance);\r\n    }\r\n\r\n    public AbsoluteAngle getAngle() {\r\n        if (absolute) {\r\n            return absoluteAngle;\r\n        }\r\n        return relation.getAngle().clockwise(relativeAngle);\r\n    }\r\n\r\n    public void rotate(RelativeAngle angle) {\r\n        setAngle(getAngle().counterClockwise(angle));\r\n    }\r\n\r\n    public void setAngle(AbsoluteAngle angle) {\r\n        if (absolute) {\r\n            this.absoluteAngle = angle;\r\n            return;\r\n        }\r\n        this.relativeAngle = relation.getAngle().getAngleCounterClockwiseTo(angle);\r\n    }\r\n\r\n    public void moveToward(Heading desiredHeading, RelativeAngle maxDelta) {\r\n        if (AngleBracket.around(getAngle(), maxDelta).contains(desiredHeading.getAngle())) {\r\n            setAngle(desiredHeading.getAngle());\r\n        } else if (getAngle().isClockwiseCloser(desiredHeading.getAngle())) {\r\n            setAngle(getAngle().clockwise(maxDelta));\r\n        } else {\r\n            setAngle(getAngle().counterClockwise(maxDelta));\r\n        }\r\n    }\r\n\r\n    public void setAbsolute(boolean absolute) {\r\n        AbsoluteAngle angle = getAngle();\r\n        this.absolute = absolute;\r\n        setAngle(angle);\r\n    }\r\n\r\n    public void setRelation(Heading relation) {\r\n        this.relation = relation;\r\n    }\r\n\r\n    public String toString() {\r\n        return String.valueOf(getAngle());\r\n    }\r\n}\r\n",
		"id": "EvoSuiteBenchmark/86_at-robots2-j/src/main/java/net/virtualinfinity/atrobots/arena/HeadingTest.java",
		"test_prompt": "// HeadingTest.java\npackage net.virtualinfinity.atrobots.arena;\n\nimport net.virtualinfinity.atrobots.measures.AbsoluteAngle;\nimport net.virtualinfinity.atrobots.measures.AngleBracket;\nimport net.virtualinfinity.atrobots.measures.RelativeAngle;\nimport net.virtualinfinity.atrobots.measures.Vector;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link Heading}.\n* It contains ten unit test cases for the {@link Heading#times(double)} method.\n*/\nclass HeadingTest {"
	},
	{
		"original_code": "// Position.java\npackage net.virtualinfinity.atrobots.arena;\r\n\r\nimport net.virtualinfinity.atrobots.measures.Vector;\r\nimport java.util.Random;\r\n\r\n/**\r\n * @author Daniel Pitts\r\n */\r\npublic class Position {\r\n\r\n    private Vector vector;\r\n\r\n    private Vector lastVector;\r\n\r\n    private Odometer odometer;\r\n\r\n    public Position() {\r\n    }\r\n\r\n    public Position(Vector vector) {\r\n        this.vector = vector;\r\n    }\r\n\r\n    public double getX() {\r\n        return vector.getX();\r\n    }\r\n\r\n    public double getY() {\r\n        return vector.getY();\r\n    }\r\n\r\n    public void move(Vector delta) {\r\n        if (odometer != null) {\r\n            odometer.accumulate((delta.getMagnitude()));\r\n        }\r\n        lastVector = vector;\r\n        vector = vector.plus(delta);\r\n    }\r\n\r\n    public void setOdometer(Odometer odometer) {\r\n        this.odometer = odometer;\r\n    }\r\n\r\n    public void copyFrom(Position source) {\r\n        vector = source.vector;\r\n        lastVector = source.lastVector;\r\n    }\r\n\r\n    public Vector getVectorTo(Position position) {\r\n        return Vector.createCartesian(getX() - (position.getX()), getY() - (position.getY()));\r\n    }\r\n\r\n    public Vector getVector() {\r\n        return vector;\r\n    }\r\n\r\n    public static Position random(double lowerX, double lowerY, double higherX, double higherY) {\r\n        final Position position = new Position();\r\n        Random random = new Random();\r\n        position.vector = Vector.createCartesian((lowerX + random.nextDouble() * (higherX - lowerX)), (lowerY + random.nextDouble() * (higherY - lowerY)));\r\n        position.lastVector = position.vector;\r\n        return position;\r\n    }\r\n}\r\n",
		"id": "EvoSuiteBenchmark/86_at-robots2-j/src/main/java/net/virtualinfinity/atrobots/arena/PositionTest.java",
		"test_prompt": "// PositionTest.java\npackage net.virtualinfinity.atrobots.arena;\n\nimport net.virtualinfinity.atrobots.measures.Vector;\nimport java.util.Random;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link Position}.\n* It contains ten unit test cases for the {@link Position#random(double, double, double, double)} method.\n*/\nclass PositionTest {"
	},
	{
		"original_code": "// SimulationFrame.java\npackage net.virtualinfinity.atrobots.arena;\n\nimport net.virtualinfinity.atrobots.snapshots.ArenaObjectSnapshot;\nimport net.virtualinfinity.atrobots.snapshots.RobotSnapshot;\nimport net.virtualinfinity.atrobots.snapshots.SnapshotAdaptor;\nimport net.virtualinfinity.atrobots.snapshots.SnapshotVisitor;\nimport java.util.Collection;\n\n/**\n * TODO: JavaDoc\n *\n * @author <a href='mailto:daniel.pitts@cbs.com'>Daniel Pitts</a>\n */\npublic class SimulationFrame {\n\n    private final Collection<ArenaObjectSnapshot> allObjects;\n\n    private final Collection<RobotSnapshot> robots;\n\n    private final boolean roundOver;\n\n    private SnapshotVisitor robotFilter = new SnapshotAdaptor() {\n\n        @Override\n        public void acceptRobot(RobotSnapshot robotSnapshot) {\n            SimulationFrame.this.robots.add(robotSnapshot);\n        }\n    };\n\n    public SimulationFrame(Collection<ArenaObjectSnapshot> allObjects, Collection<RobotSnapshot> robots, boolean roundOver) {\n        this.allObjects = allObjects;\n        this.robots = robots;\n        this.roundOver = roundOver;\n    }\n\n    public void visitAll(SnapshotVisitor visitor) {\n        for (ArenaObjectSnapshot snapshot : allObjects) {\n            snapshot.visit(visitor);\n        }\n    }\n\n    public void visitRobots(SnapshotVisitor visitor) {\n        for (RobotSnapshot snapshot : robots) {\n            snapshot.visit(visitor);\n        }\n    }\n\n    void add(ArenaObjectSnapshot snapshot) {\n        allObjects.add(snapshot);\n        snapshot.visit(robotFilter);\n    }\n\n    public Collection<ArenaObjectSnapshot> getAllObjects() {\n        return allObjects;\n    }\n\n    public boolean isRoundOver() {\n        return roundOver;\n    }\n}\n",
		"id": "EvoSuiteBenchmark/86_at-robots2-j/src/main/java/net/virtualinfinity/atrobots/arena/SimulationFrameTest.java",
		"test_prompt": "// SimulationFrameTest.java\npackage net.virtualinfinity.atrobots.arena;\n\nimport net.virtualinfinity.atrobots.snapshots.ArenaObjectSnapshot;\nimport net.virtualinfinity.atrobots.snapshots.RobotSnapshot;\nimport net.virtualinfinity.atrobots.snapshots.SnapshotAdaptor;\nimport net.virtualinfinity.atrobots.snapshots.SnapshotVisitor;\nimport java.util.Collection;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link SimulationFrame}.\n* It contains ten unit test cases for the {@link SimulationFrame#isRoundOver()} method.\n*/\nclass SimulationFrameTest {"
	},
	{
		"original_code": "// Speed.java\npackage net.virtualinfinity.atrobots.arena;\r\n\r\nimport net.virtualinfinity.atrobots.measures.DistanceOverTime;\r\nimport net.virtualinfinity.atrobots.measures.Duration;\r\n\r\n/**\r\n * @author Daniel Pitts\r\n */\r\npublic class Speed {\r\n\r\n    private DistanceOverTime distanceOverTime = new DistanceOverTime(0, Duration.ONE_CYCLE);\r\n\r\n    public double times(Duration duration) {\r\n        return distanceOverTime.times(duration);\r\n    }\r\n\r\n    public void setDistanceOverTime(double distance, Duration duration) {\r\n        distanceOverTime = new DistanceOverTime(distance, duration);\r\n    }\r\n\r\n    public String toString() {\r\n        return distanceOverTime.toString();\r\n    }\r\n}\r\n",
		"id": "EvoSuiteBenchmark/86_at-robots2-j/src/main/java/net/virtualinfinity/atrobots/arena/SpeedTest.java",
		"test_prompt": "// SpeedTest.java\npackage net.virtualinfinity.atrobots.arena;\n\nimport net.virtualinfinity.atrobots.measures.DistanceOverTime;\nimport net.virtualinfinity.atrobots.measures.Duration;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link Speed}.\n* It contains ten unit test cases for the {@link Speed#times(Duration)} method.\n*/\nclass SpeedTest {"
	},
	{
		"original_code": "// Arena.java\npackage net.virtualinfinity.atrobots.arena;\r\n\r\nimport net.virtualinfinity.atrobots.ArenaObjectVisitor;\r\nimport net.virtualinfinity.atrobots.arenaobjects.ArenaObject;\r\nimport net.virtualinfinity.atrobots.arenaobjects.CollidableArenaObject;\r\nimport net.virtualinfinity.atrobots.arenaobjects.DamageInflicter;\r\nimport net.virtualinfinity.atrobots.measures.Duration;\r\nimport net.virtualinfinity.atrobots.radio.RadioDispatcher;\r\nimport java.util.*;\r\n\r\n/**\r\n * The Arena is the virtual world within which the simulation occurs.\r\n *\r\n * @author Daniel Pitts\r\n */\r\npublic class Arena {\r\n\r\n    private final List<TangibleArenaObject> activeRobots = new LinkedList<TangibleArenaObject>();\r\n\r\n    private final List<TangibleArenaObject> allRobots = new LinkedList<TangibleArenaObject>();\r\n\r\n    private final List<CollidableArenaObject> collidables = new LinkedList<CollidableArenaObject>();\r\n\r\n    private final Collection<ArenaObject> intangibles = new LinkedList<ArenaObject>();\r\n\r\n    private final RoundTimer roundTimer = new RoundTimer();\r\n\r\n    @SuppressWarnings({ \"unchecked\" })\r\n    final Collection<Collection<? extends ArenaObject>> allActiveObjects = new ArrayList<Collection<? extends ArenaObject>>(Arrays.asList(collidables, activeRobots, intangibles));\r\n\r\n    @SuppressWarnings({ \"unchecked\" })\r\n    final Collection<Collection<? extends ArenaObject>> allFramedObjects = new ArrayList<Collection<? extends ArenaObject>>(Arrays.asList(collidables, intangibles, allRobots));\r\n\r\n    @SuppressWarnings({ \"unchecked\" })\r\n    final Collection<Collection<? extends CollidableArenaObject>> allCollidable = new ArrayList<Collection<? extends CollidableArenaObject>>(Arrays.asList(collidables, activeRobots));\r\n\r\n    private final RadioDispatcher radioDispatcher = new RadioDispatcher();\r\n\r\n    private final FrameBuilder frameBuilder;\r\n\r\n    private boolean roundOver;\r\n\r\n    public Arena() {\r\n        this(null);\r\n    }\r\n\r\n    public Arena(FrameBuilder frameBuilder) {\r\n        this.frameBuilder = frameBuilder;\r\n        if (frameBuilder != null) {\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Get the number of robots still active in the arena.\r\n     *\r\n     * @return the number of robots still active in the arena.\r\n     */\r\n    public int countActiveRobots() {\r\n        return activeRobots.size();\r\n    }\r\n\r\n    private void connectArena(ArenaObject object) {\r\n        object.setArena(this);\r\n    }\r\n\r\n    /**\r\n     * Get the radio dispatcher for this arena.\r\n     *\r\n     * @return the radio dispatcher for this arena.\r\n     */\r\n    public RadioDispatcher getRadioDispatcher() {\r\n        return radioDispatcher;\r\n    }\r\n\r\n    /**\r\n     * Simulate a certain amount of time elapsing.\r\n     */\r\n    public void simulate() {\r\n        updateSimulation();\r\n        buildFrame();\r\n        roundTimer.increment(Duration.ONE_CYCLE);\r\n    }\r\n\r\n    /**\r\n     * Prepare a snapshot of the current arena state in the {@link FrameBuilder}.\r\n     */\r\n    public void buildFrame() {\r\n        if (frameBuilder != null) {\r\n            frameBuilder.beginFrame(roundOver);\r\n            for (Collection<? extends ArenaObject> objectCollection : allFramedObjects) {\r\n                for (ArenaObject object : objectCollection) {\r\n                    frameBuilder.addObject(object.getSnapshot());\r\n                }\r\n            }\r\n            frameBuilder.endFrame();\r\n        }\r\n    }\r\n\r\n    private void updateSimulation() {\r\n        for (Collection<? extends ArenaObject> objectCollection : allActiveObjects) {\r\n            for (ArenaObject object : objectCollection) {\r\n                object.update(Duration.ONE_CYCLE);\r\n            }\r\n        }\r\n        checkCollissions();\r\n        removeDead();\r\n    }\r\n\r\n    private void removeDead() {\r\n        for (Collection<? extends ArenaObject> objectCollection : allActiveObjects) {\r\n            for (Iterator<? extends ArenaObject> it = objectCollection.iterator(); it.hasNext(); ) {\r\n                if (it.next().isDead()) {\r\n                    it.remove();\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    private void checkCollissions() {\r\n        for (final TangibleArenaObject collisionTarget : activeRobots) {\r\n            for (Iterable<? extends CollidableArenaObject> toCheckAgainst : allCollidable) {\r\n                for (CollidableArenaObject collidable : toCheckAgainst) {\r\n                    if (collidable == collisionTarget) {\r\n                        break;\r\n                    }\r\n                    collidable.checkCollision(collisionTarget);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Add a robot to the arena at a random location.\r\n     *\r\n     * @param robot the robot to add to this arena.\r\n     */\r\n    public void addRobot(TangibleArenaObject robot) {\r\n        robot.getPosition().copyFrom(Position.random(0.0, 0.0, 1000.0, 1000.0));\r\n        connectArena(robot);\r\n        activeRobots.add(robot);\r\n        allRobots.add(robot);\r\n    }\r\n\r\n    public void addCollidable(CollidableArenaObject arenaObject) {\r\n        connectArena(arenaObject);\r\n        collidables.add(arenaObject);\r\n    }\r\n\r\n    /**\r\n     * Cause an explosion.\r\n     *\r\n     * @param cause             the robot which gets credit for any damage done.\r\n     * @param explosionFunction the damage explosion function.\r\n     */\r\n    public void explosion(DamageInflicter cause, ExplosionFunction explosionFunction) {\r\n        addIntangible(new Explosion(explosionFunction.getCenter(), explosionFunction.getRadius()));\r\n        for (TangibleArenaObject robot : activeRobots) {\r\n            explosionFunction.inflictDamage(cause, robot);\r\n        }\r\n    }\r\n\r\n    public void determineWinners() {\r\n        if (!activeRobots.isEmpty()) {\r\n            if (activeRobots.size() == 1) {\r\n                for (TangibleArenaObject robot : activeRobots) {\r\n                    robot.winRound();\r\n                }\r\n            } else {\r\n                for (TangibleArenaObject robot : activeRobots) {\r\n                    robot.tieRound();\r\n                }\r\n            }\r\n        } else {\r\n            for (TangibleArenaObject robot : allRobots) {\r\n                robot.tieRound();\r\n            }\r\n        }\r\n    }\r\n\r\n    public void endRound() {\r\n        roundOver = true;\r\n        determineWinners();\r\n        buildFrame();\r\n    }\r\n\r\n    public boolean isOnlyOneRobotAlive() {\r\n        return countActiveRobots() == 1;\r\n    }\r\n\r\n    public void addIntangible(ArenaObject object) {\r\n        if (frameBuilder != null) {\r\n            intangibles.add(object);\r\n        }\r\n    }\r\n\r\n    public void visitActiveRobots(ArenaObjectVisitor arenaObjectVisitor) {\r\n        for (ArenaObject arenaObject : activeRobots) {\r\n            arenaObject.accept(arenaObjectVisitor);\r\n        }\r\n    }\r\n\r\n    public RoundTimer getRoundTimer() {\r\n        return roundTimer;\r\n    }\r\n}\r\n",
		"id": "EvoSuiteBenchmark/86_at-robots2-j/src/main/java/net/virtualinfinity/atrobots/arena/ArenaTest0.java",
		"test_prompt": "// ArenaTest0.java\npackage net.virtualinfinity.atrobots.arena;\n\nimport net.virtualinfinity.atrobots.ArenaObjectVisitor;\nimport net.virtualinfinity.atrobots.arenaobjects.ArenaObject;\nimport net.virtualinfinity.atrobots.arenaobjects.CollidableArenaObject;\nimport net.virtualinfinity.atrobots.arenaobjects.DamageInflicter;\nimport net.virtualinfinity.atrobots.measures.Duration;\nimport net.virtualinfinity.atrobots.radio.RadioDispatcher;\nimport java.util.*;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link Arena}.\n* It contains ten unit test cases for the {@link Arena#countActiveRobots()} method.\n*/\nclass ArenaTest0 {"
	},
	{
		"original_code": "// Arena.java\npackage net.virtualinfinity.atrobots.arena;\r\n\r\nimport net.virtualinfinity.atrobots.ArenaObjectVisitor;\r\nimport net.virtualinfinity.atrobots.arenaobjects.ArenaObject;\r\nimport net.virtualinfinity.atrobots.arenaobjects.CollidableArenaObject;\r\nimport net.virtualinfinity.atrobots.arenaobjects.DamageInflicter;\r\nimport net.virtualinfinity.atrobots.measures.Duration;\r\nimport net.virtualinfinity.atrobots.radio.RadioDispatcher;\r\nimport java.util.*;\r\n\r\n/**\r\n * The Arena is the virtual world within which the simulation occurs.\r\n *\r\n * @author Daniel Pitts\r\n */\r\npublic class Arena {\r\n\r\n    private final List<TangibleArenaObject> activeRobots = new LinkedList<TangibleArenaObject>();\r\n\r\n    private final List<TangibleArenaObject> allRobots = new LinkedList<TangibleArenaObject>();\r\n\r\n    private final List<CollidableArenaObject> collidables = new LinkedList<CollidableArenaObject>();\r\n\r\n    private final Collection<ArenaObject> intangibles = new LinkedList<ArenaObject>();\r\n\r\n    private final RoundTimer roundTimer = new RoundTimer();\r\n\r\n    @SuppressWarnings({ \"unchecked\" })\r\n    final Collection<Collection<? extends ArenaObject>> allActiveObjects = new ArrayList<Collection<? extends ArenaObject>>(Arrays.asList(collidables, activeRobots, intangibles));\r\n\r\n    @SuppressWarnings({ \"unchecked\" })\r\n    final Collection<Collection<? extends ArenaObject>> allFramedObjects = new ArrayList<Collection<? extends ArenaObject>>(Arrays.asList(collidables, intangibles, allRobots));\r\n\r\n    @SuppressWarnings({ \"unchecked\" })\r\n    final Collection<Collection<? extends CollidableArenaObject>> allCollidable = new ArrayList<Collection<? extends CollidableArenaObject>>(Arrays.asList(collidables, activeRobots));\r\n\r\n    private final RadioDispatcher radioDispatcher = new RadioDispatcher();\r\n\r\n    private final FrameBuilder frameBuilder;\r\n\r\n    private boolean roundOver;\r\n\r\n    public Arena() {\r\n        this(null);\r\n    }\r\n\r\n    public Arena(FrameBuilder frameBuilder) {\r\n        this.frameBuilder = frameBuilder;\r\n        if (frameBuilder != null) {\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Get the number of robots still active in the arena.\r\n     *\r\n     * @return the number of robots still active in the arena.\r\n     */\r\n    public int countActiveRobots() {\r\n        return activeRobots.size();\r\n    }\r\n\r\n    private void connectArena(ArenaObject object) {\r\n        object.setArena(this);\r\n    }\r\n\r\n    /**\r\n     * Get the radio dispatcher for this arena.\r\n     *\r\n     * @return the radio dispatcher for this arena.\r\n     */\r\n    public RadioDispatcher getRadioDispatcher() {\r\n        return radioDispatcher;\r\n    }\r\n\r\n    /**\r\n     * Simulate a certain amount of time elapsing.\r\n     */\r\n    public void simulate() {\r\n        updateSimulation();\r\n        buildFrame();\r\n        roundTimer.increment(Duration.ONE_CYCLE);\r\n    }\r\n\r\n    /**\r\n     * Prepare a snapshot of the current arena state in the {@link FrameBuilder}.\r\n     */\r\n    public void buildFrame() {\r\n        if (frameBuilder != null) {\r\n            frameBuilder.beginFrame(roundOver);\r\n            for (Collection<? extends ArenaObject> objectCollection : allFramedObjects) {\r\n                for (ArenaObject object : objectCollection) {\r\n                    frameBuilder.addObject(object.getSnapshot());\r\n                }\r\n            }\r\n            frameBuilder.endFrame();\r\n        }\r\n    }\r\n\r\n    private void updateSimulation() {\r\n        for (Collection<? extends ArenaObject> objectCollection : allActiveObjects) {\r\n            for (ArenaObject object : objectCollection) {\r\n                object.update(Duration.ONE_CYCLE);\r\n            }\r\n        }\r\n        checkCollissions();\r\n        removeDead();\r\n    }\r\n\r\n    private void removeDead() {\r\n        for (Collection<? extends ArenaObject> objectCollection : allActiveObjects) {\r\n            for (Iterator<? extends ArenaObject> it = objectCollection.iterator(); it.hasNext(); ) {\r\n                if (it.next().isDead()) {\r\n                    it.remove();\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    private void checkCollissions() {\r\n        for (final TangibleArenaObject collisionTarget : activeRobots) {\r\n            for (Iterable<? extends CollidableArenaObject> toCheckAgainst : allCollidable) {\r\n                for (CollidableArenaObject collidable : toCheckAgainst) {\r\n                    if (collidable == collisionTarget) {\r\n                        break;\r\n                    }\r\n                    collidable.checkCollision(collisionTarget);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Add a robot to the arena at a random location.\r\n     *\r\n     * @param robot the robot to add to this arena.\r\n     */\r\n    public void addRobot(TangibleArenaObject robot) {\r\n        robot.getPosition().copyFrom(Position.random(0.0, 0.0, 1000.0, 1000.0));\r\n        connectArena(robot);\r\n        activeRobots.add(robot);\r\n        allRobots.add(robot);\r\n    }\r\n\r\n    public void addCollidable(CollidableArenaObject arenaObject) {\r\n        connectArena(arenaObject);\r\n        collidables.add(arenaObject);\r\n    }\r\n\r\n    /**\r\n     * Cause an explosion.\r\n     *\r\n     * @param cause             the robot which gets credit for any damage done.\r\n     * @param explosionFunction the damage explosion function.\r\n     */\r\n    public void explosion(DamageInflicter cause, ExplosionFunction explosionFunction) {\r\n        addIntangible(new Explosion(explosionFunction.getCenter(), explosionFunction.getRadius()));\r\n        for (TangibleArenaObject robot : activeRobots) {\r\n            explosionFunction.inflictDamage(cause, robot);\r\n        }\r\n    }\r\n\r\n    public void determineWinners() {\r\n        if (!activeRobots.isEmpty()) {\r\n            if (activeRobots.size() == 1) {\r\n                for (TangibleArenaObject robot : activeRobots) {\r\n                    robot.winRound();\r\n                }\r\n            } else {\r\n                for (TangibleArenaObject robot : activeRobots) {\r\n                    robot.tieRound();\r\n                }\r\n            }\r\n        } else {\r\n            for (TangibleArenaObject robot : allRobots) {\r\n                robot.tieRound();\r\n            }\r\n        }\r\n    }\r\n\r\n    public void endRound() {\r\n        roundOver = true;\r\n        determineWinners();\r\n        buildFrame();\r\n    }\r\n\r\n    public boolean isOnlyOneRobotAlive() {\r\n        return countActiveRobots() == 1;\r\n    }\r\n\r\n    public void addIntangible(ArenaObject object) {\r\n        if (frameBuilder != null) {\r\n            intangibles.add(object);\r\n        }\r\n    }\r\n\r\n    public void visitActiveRobots(ArenaObjectVisitor arenaObjectVisitor) {\r\n        for (ArenaObject arenaObject : activeRobots) {\r\n            arenaObject.accept(arenaObjectVisitor);\r\n        }\r\n    }\r\n\r\n    public RoundTimer getRoundTimer() {\r\n        return roundTimer;\r\n    }\r\n}\r\n",
		"id": "EvoSuiteBenchmark/86_at-robots2-j/src/main/java/net/virtualinfinity/atrobots/arena/ArenaTest1.java",
		"test_prompt": "// ArenaTest1.java\npackage net.virtualinfinity.atrobots.arena;\n\nimport net.virtualinfinity.atrobots.ArenaObjectVisitor;\nimport net.virtualinfinity.atrobots.arenaobjects.ArenaObject;\nimport net.virtualinfinity.atrobots.arenaobjects.CollidableArenaObject;\nimport net.virtualinfinity.atrobots.arenaobjects.DamageInflicter;\nimport net.virtualinfinity.atrobots.measures.Duration;\nimport net.virtualinfinity.atrobots.radio.RadioDispatcher;\nimport java.util.*;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link Arena}.\n* It contains ten unit test cases for the {@link Arena#isOnlyOneRobotAlive()} method.\n*/\nclass ArenaTest1 {"
	},
	{
		"original_code": "// StackMemory.java\npackage net.virtualinfinity.atrobots.computer;\r\n\r\n/**\r\n * Memory, which is separate from main memory, and used as a stack.\r\n *\r\n * @author Daniel Pitts\r\n */\r\npublic class StackMemory {\r\n\r\n    private final MemoryArray stackMemory;\r\n\r\n    private final MemoryCell stackPointer;\r\n\r\n    public StackMemory(MemoryCell stackPointer, int stackSize) {\r\n        this.stackPointer = stackPointer;\r\n        stackMemory = new RandomAccessMemoryArray(stackSize);\r\n    }\r\n\r\n    public short pop() {\r\n        stackPointer.decrement();\r\n        final short value = stackMemory.get(stackPointer.signed());\r\n        return value;\r\n    }\r\n\r\n    public void push(short value) {\r\n        stackPointer.increment();\r\n        stackMemory.put(stackPointer.signed() - 1, value);\r\n    }\r\n\r\n    public void reset() {\r\n        stackMemory.clear();\r\n    }\r\n}\r\n",
		"id": "EvoSuiteBenchmark/86_at-robots2-j/src/main/java/net/virtualinfinity/atrobots/computer/StackMemoryTest.java",
		"test_prompt": "// StackMemoryTest.java\npackage net.virtualinfinity.atrobots.computer;\n\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link StackMemory}.\n* It contains ten unit test cases for the {@link StackMemory#pop()} method.\n*/\nclass StackMemoryTest {"
	},
	{
		"original_code": "// Flags.java\npackage net.virtualinfinity.atrobots.computer;\r\n\r\n/**\r\n * Wrapper for CPU flags.\r\n *\r\n * @author Daniel Pitts\r\n */\r\npublic class Flags {\r\n\r\n    private final MemoryCell flagCell;\r\n\r\n    private static final short EQUAL_BIT_MASK = 1;\r\n\r\n    private static final short LESS_BIT_MASK = 2;\r\n\r\n    private static final short GREATER_BIT_MASK = 4;\r\n\r\n    private static final short ZERO_BIT_MASK = 8;\r\n\r\n    private static final short RESET_MASK = (short) 0xFF00;\r\n\r\n    public Flags(MemoryCell flagCell) {\r\n        this.flagCell = flagCell;\r\n    }\r\n\r\n    public boolean isLess() {\r\n        return hasBitInMask(LESS_BIT_MASK);\r\n    }\r\n\r\n    public void setLess(boolean less) {\r\n        optionallySetBitsInMask(less, LESS_BIT_MASK);\r\n    }\r\n\r\n    public boolean isGreater() {\r\n        return hasBitInMask(GREATER_BIT_MASK);\r\n    }\r\n\r\n    public void setGreater(boolean greater) {\r\n        optionallySetBitsInMask(greater, GREATER_BIT_MASK);\r\n    }\r\n\r\n    public boolean isEqual() {\r\n        return hasBitInMask(EQUAL_BIT_MASK);\r\n    }\r\n\r\n    public void setEqual(boolean equal) {\r\n        optionallySetBitsInMask(equal, EQUAL_BIT_MASK);\r\n    }\r\n\r\n    public boolean isZero() {\r\n        return hasBitInMask(ZERO_BIT_MASK);\r\n    }\r\n\r\n    public void setZero(boolean zero) {\r\n        optionallySetBitsInMask(zero, ZERO_BIT_MASK);\r\n    }\r\n\r\n    private boolean hasBitInMask(short bitMask) {\r\n        return 0 != (flagCell.unsigned() & bitMask);\r\n    }\r\n\r\n    private void optionallySetBitsInMask(boolean shouldSet, short bitMask) {\r\n        if (shouldSet) {\r\n            addBitsInMask(bitMask);\r\n        }\r\n    }\r\n\r\n    private void addBitsInMask(short bitMask) {\r\n        flagCell.or(bitMask);\r\n    }\r\n\r\n    public void reset() {\r\n        flagCell.and(RESET_MASK);\r\n    }\r\n\r\n    public String toString() {\r\n        return uppercaseIf('e', isEqual()) + uppercaseIf('l', isLess()) + uppercaseIf('g', isGreater()) + uppercaseIf('z', isZero());\r\n    }\r\n\r\n    private String uppercaseIf(char c, boolean useUppercase) {\r\n        return String.valueOf(useUppercase ? Character.toUpperCase(c) : c);\r\n    }\r\n}\r\n",
		"id": "EvoSuiteBenchmark/86_at-robots2-j/src/main/java/net/virtualinfinity/atrobots/computer/FlagsTest0.java",
		"test_prompt": "// FlagsTest0.java\npackage net.virtualinfinity.atrobots.computer;\n\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link Flags}.\n* It contains ten unit test cases for the {@link Flags#isLess()} method.\n*/\nclass FlagsTest0 {"
	},
	{
		"original_code": "// Flags.java\npackage net.virtualinfinity.atrobots.computer;\r\n\r\n/**\r\n * Wrapper for CPU flags.\r\n *\r\n * @author Daniel Pitts\r\n */\r\npublic class Flags {\r\n\r\n    private final MemoryCell flagCell;\r\n\r\n    private static final short EQUAL_BIT_MASK = 1;\r\n\r\n    private static final short LESS_BIT_MASK = 2;\r\n\r\n    private static final short GREATER_BIT_MASK = 4;\r\n\r\n    private static final short ZERO_BIT_MASK = 8;\r\n\r\n    private static final short RESET_MASK = (short) 0xFF00;\r\n\r\n    public Flags(MemoryCell flagCell) {\r\n        this.flagCell = flagCell;\r\n    }\r\n\r\n    public boolean isLess() {\r\n        return hasBitInMask(LESS_BIT_MASK);\r\n    }\r\n\r\n    public void setLess(boolean less) {\r\n        optionallySetBitsInMask(less, LESS_BIT_MASK);\r\n    }\r\n\r\n    public boolean isGreater() {\r\n        return hasBitInMask(GREATER_BIT_MASK);\r\n    }\r\n\r\n    public void setGreater(boolean greater) {\r\n        optionallySetBitsInMask(greater, GREATER_BIT_MASK);\r\n    }\r\n\r\n    public boolean isEqual() {\r\n        return hasBitInMask(EQUAL_BIT_MASK);\r\n    }\r\n\r\n    public void setEqual(boolean equal) {\r\n        optionallySetBitsInMask(equal, EQUAL_BIT_MASK);\r\n    }\r\n\r\n    public boolean isZero() {\r\n        return hasBitInMask(ZERO_BIT_MASK);\r\n    }\r\n\r\n    public void setZero(boolean zero) {\r\n        optionallySetBitsInMask(zero, ZERO_BIT_MASK);\r\n    }\r\n\r\n    private boolean hasBitInMask(short bitMask) {\r\n        return 0 != (flagCell.unsigned() & bitMask);\r\n    }\r\n\r\n    private void optionallySetBitsInMask(boolean shouldSet, short bitMask) {\r\n        if (shouldSet) {\r\n            addBitsInMask(bitMask);\r\n        }\r\n    }\r\n\r\n    private void addBitsInMask(short bitMask) {\r\n        flagCell.or(bitMask);\r\n    }\r\n\r\n    public void reset() {\r\n        flagCell.and(RESET_MASK);\r\n    }\r\n\r\n    public String toString() {\r\n        return uppercaseIf('e', isEqual()) + uppercaseIf('l', isLess()) + uppercaseIf('g', isGreater()) + uppercaseIf('z', isZero());\r\n    }\r\n\r\n    private String uppercaseIf(char c, boolean useUppercase) {\r\n        return String.valueOf(useUppercase ? Character.toUpperCase(c) : c);\r\n    }\r\n}\r\n",
		"id": "EvoSuiteBenchmark/86_at-robots2-j/src/main/java/net/virtualinfinity/atrobots/computer/FlagsTest1.java",
		"test_prompt": "// FlagsTest1.java\npackage net.virtualinfinity.atrobots.computer;\n\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link Flags}.\n* It contains ten unit test cases for the {@link Flags#isGreater()} method.\n*/\nclass FlagsTest1 {"
	},
	{
		"original_code": "// Flags.java\npackage net.virtualinfinity.atrobots.computer;\r\n\r\n/**\r\n * Wrapper for CPU flags.\r\n *\r\n * @author Daniel Pitts\r\n */\r\npublic class Flags {\r\n\r\n    private final MemoryCell flagCell;\r\n\r\n    private static final short EQUAL_BIT_MASK = 1;\r\n\r\n    private static final short LESS_BIT_MASK = 2;\r\n\r\n    private static final short GREATER_BIT_MASK = 4;\r\n\r\n    private static final short ZERO_BIT_MASK = 8;\r\n\r\n    private static final short RESET_MASK = (short) 0xFF00;\r\n\r\n    public Flags(MemoryCell flagCell) {\r\n        this.flagCell = flagCell;\r\n    }\r\n\r\n    public boolean isLess() {\r\n        return hasBitInMask(LESS_BIT_MASK);\r\n    }\r\n\r\n    public void setLess(boolean less) {\r\n        optionallySetBitsInMask(less, LESS_BIT_MASK);\r\n    }\r\n\r\n    public boolean isGreater() {\r\n        return hasBitInMask(GREATER_BIT_MASK);\r\n    }\r\n\r\n    public void setGreater(boolean greater) {\r\n        optionallySetBitsInMask(greater, GREATER_BIT_MASK);\r\n    }\r\n\r\n    public boolean isEqual() {\r\n        return hasBitInMask(EQUAL_BIT_MASK);\r\n    }\r\n\r\n    public void setEqual(boolean equal) {\r\n        optionallySetBitsInMask(equal, EQUAL_BIT_MASK);\r\n    }\r\n\r\n    public boolean isZero() {\r\n        return hasBitInMask(ZERO_BIT_MASK);\r\n    }\r\n\r\n    public void setZero(boolean zero) {\r\n        optionallySetBitsInMask(zero, ZERO_BIT_MASK);\r\n    }\r\n\r\n    private boolean hasBitInMask(short bitMask) {\r\n        return 0 != (flagCell.unsigned() & bitMask);\r\n    }\r\n\r\n    private void optionallySetBitsInMask(boolean shouldSet, short bitMask) {\r\n        if (shouldSet) {\r\n            addBitsInMask(bitMask);\r\n        }\r\n    }\r\n\r\n    private void addBitsInMask(short bitMask) {\r\n        flagCell.or(bitMask);\r\n    }\r\n\r\n    public void reset() {\r\n        flagCell.and(RESET_MASK);\r\n    }\r\n\r\n    public String toString() {\r\n        return uppercaseIf('e', isEqual()) + uppercaseIf('l', isLess()) + uppercaseIf('g', isGreater()) + uppercaseIf('z', isZero());\r\n    }\r\n\r\n    private String uppercaseIf(char c, boolean useUppercase) {\r\n        return String.valueOf(useUppercase ? Character.toUpperCase(c) : c);\r\n    }\r\n}\r\n",
		"id": "EvoSuiteBenchmark/86_at-robots2-j/src/main/java/net/virtualinfinity/atrobots/computer/FlagsTest2.java",
		"test_prompt": "// FlagsTest2.java\npackage net.virtualinfinity.atrobots.computer;\n\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link Flags}.\n* It contains ten unit test cases for the {@link Flags#isEqual()} method.\n*/\nclass FlagsTest2 {"
	},
	{
		"original_code": "// Flags.java\npackage net.virtualinfinity.atrobots.computer;\r\n\r\n/**\r\n * Wrapper for CPU flags.\r\n *\r\n * @author Daniel Pitts\r\n */\r\npublic class Flags {\r\n\r\n    private final MemoryCell flagCell;\r\n\r\n    private static final short EQUAL_BIT_MASK = 1;\r\n\r\n    private static final short LESS_BIT_MASK = 2;\r\n\r\n    private static final short GREATER_BIT_MASK = 4;\r\n\r\n    private static final short ZERO_BIT_MASK = 8;\r\n\r\n    private static final short RESET_MASK = (short) 0xFF00;\r\n\r\n    public Flags(MemoryCell flagCell) {\r\n        this.flagCell = flagCell;\r\n    }\r\n\r\n    public boolean isLess() {\r\n        return hasBitInMask(LESS_BIT_MASK);\r\n    }\r\n\r\n    public void setLess(boolean less) {\r\n        optionallySetBitsInMask(less, LESS_BIT_MASK);\r\n    }\r\n\r\n    public boolean isGreater() {\r\n        return hasBitInMask(GREATER_BIT_MASK);\r\n    }\r\n\r\n    public void setGreater(boolean greater) {\r\n        optionallySetBitsInMask(greater, GREATER_BIT_MASK);\r\n    }\r\n\r\n    public boolean isEqual() {\r\n        return hasBitInMask(EQUAL_BIT_MASK);\r\n    }\r\n\r\n    public void setEqual(boolean equal) {\r\n        optionallySetBitsInMask(equal, EQUAL_BIT_MASK);\r\n    }\r\n\r\n    public boolean isZero() {\r\n        return hasBitInMask(ZERO_BIT_MASK);\r\n    }\r\n\r\n    public void setZero(boolean zero) {\r\n        optionallySetBitsInMask(zero, ZERO_BIT_MASK);\r\n    }\r\n\r\n    private boolean hasBitInMask(short bitMask) {\r\n        return 0 != (flagCell.unsigned() & bitMask);\r\n    }\r\n\r\n    private void optionallySetBitsInMask(boolean shouldSet, short bitMask) {\r\n        if (shouldSet) {\r\n            addBitsInMask(bitMask);\r\n        }\r\n    }\r\n\r\n    private void addBitsInMask(short bitMask) {\r\n        flagCell.or(bitMask);\r\n    }\r\n\r\n    public void reset() {\r\n        flagCell.and(RESET_MASK);\r\n    }\r\n\r\n    public String toString() {\r\n        return uppercaseIf('e', isEqual()) + uppercaseIf('l', isLess()) + uppercaseIf('g', isGreater()) + uppercaseIf('z', isZero());\r\n    }\r\n\r\n    private String uppercaseIf(char c, boolean useUppercase) {\r\n        return String.valueOf(useUppercase ? Character.toUpperCase(c) : c);\r\n    }\r\n}\r\n",
		"id": "EvoSuiteBenchmark/86_at-robots2-j/src/main/java/net/virtualinfinity/atrobots/computer/FlagsTest3.java",
		"test_prompt": "// FlagsTest3.java\npackage net.virtualinfinity.atrobots.computer;\n\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link Flags}.\n* It contains ten unit test cases for the {@link Flags#isZero()} method.\n*/\nclass FlagsTest3 {"
	},
	{
		"original_code": "// HardwareBus.java\npackage net.virtualinfinity.atrobots.computer;\r\n\r\nimport net.virtualinfinity.atrobots.measures.Heat;\r\nimport net.virtualinfinity.atrobots.measures.Temperature;\r\nimport net.virtualinfinity.atrobots.ports.PortHandler;\r\nimport java.util.ArrayList;\r\nimport java.util.Collection;\r\nimport java.util.Map;\r\n\r\n/**\r\n * Represents all the hardware connected to a single robot.\r\n *\r\n * @author Daniel Pitts\r\n */\r\npublic class HardwareBus {\r\n\r\n    private Map<Integer, PortHandler> ports;\r\n\r\n    private Map<Integer, InterruptHandler> interrupts;\r\n\r\n    private final Collection<Resettable> resettables = new ArrayList<Resettable>();\r\n\r\n    private final Collection<ShutdownListener> shutdownListeners = new ArrayList<ShutdownListener>();\r\n\r\n    private Restartable autoShutdownTarget;\r\n\r\n    private Temperature autoShutDown = Temperature.fromLogScale(350);\r\n\r\n    private Heat heat;\r\n\r\n    /**\r\n     * Get the port handler map.\r\n     *\r\n     * @return map of port numbers to port handler.\r\n     */\r\n    public Map<Integer, PortHandler> getPorts() {\r\n        return ports;\r\n    }\r\n\r\n    /**\r\n     * Set the port handler map.\r\n     *\r\n     * @param ports map of port numbers to port handler.\r\n     */\r\n    public void setPorts(Map<Integer, PortHandler> ports) {\r\n        this.ports = ports;\r\n    }\r\n\r\n    /**\r\n     * Get the interrupt handler map.\r\n     *\r\n     * @return map of interrupt numbers to interrupt handler.\r\n     */\r\n    public Map<Integer, InterruptHandler> getInterrupts() {\r\n        return interrupts;\r\n    }\r\n\r\n    /**\r\n     * Set the interrupt handler map.\r\n     *\r\n     * @param interrupts map of interrupt numbers to interrupt handler.\r\n     */\r\n    public void setInterrupts(Map<Integer, InterruptHandler> interrupts) {\r\n        this.interrupts = interrupts;\r\n    }\r\n\r\n    /**\r\n     * Call a specific interrupt.\r\n     *\r\n     * @param interruptNumber the interrupt to execute.\r\n     */\r\n    public void callInterrupt(int interruptNumber) {\r\n        interrupts.get(interruptNumber).call();\r\n    }\r\n\r\n    /**\r\n     * Read from a specific port.\r\n     *\r\n     * @param portNumber the port to read from\r\n     * @return the value read.\r\n     */\r\n    public short readPort(int portNumber) {\r\n        return ports.get(portNumber).read();\r\n    }\r\n\r\n    /**\r\n     * Write to a specific port\r\n     *\r\n     * @param portNumber the port number\r\n     * @param value      the value to write.\r\n     */\r\n    public void writePort(int portNumber, short value) {\r\n        ports.get(portNumber).write(value);\r\n    }\r\n\r\n    /**\r\n     * Reset all resetables in this hardward bus.\r\n     */\r\n    public void reset() {\r\n        for (Resettable resettable : resettables) {\r\n            resettable.reset();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Register a resetable.\r\n     *\r\n     * @param resettable a resetible to get reset when this bus is reset.\r\n     */\r\n    public void addResetable(Resettable resettable) {\r\n        resettables.add(resettable);\r\n    }\r\n\r\n    public void addShutdownListener(ShutdownListener shutdownListener) {\r\n        shutdownListeners.add(shutdownListener);\r\n    }\r\n\r\n    public void setAutoShutdownListener(Restartable autoShutdownListener) {\r\n        this.autoShutdownTarget = autoShutdownListener;\r\n    }\r\n\r\n    /**\r\n     * Check temperature against autoShutDown temp\r\n     */\r\n    public void checkHeat() {\r\n        if (isAutoShutdownEngaged()) {\r\n            shutDown();\r\n        }\r\n        if (autoShutdownTarget.isShutDown() && isAutoStartupEngaged()) {\r\n            autoShutdownTarget.startUp();\r\n        }\r\n    }\r\n\r\n    private boolean isAutoStartupEngaged() {\r\n        return heat.getTemperature().compareTo(autoShutDown.minus(Temperature.fromLogScale(50))) < 0;\r\n    }\r\n\r\n    private boolean isAutoShutdownEngaged() {\r\n        return heat.getTemperature().compareTo(autoShutDown) >= 0;\r\n    }\r\n\r\n    private void startUp() {\r\n        autoShutdownTarget.startUp();\r\n    }\r\n\r\n    private void shutDown() {\r\n        for (ShutdownListener listener : shutdownListeners) {\r\n            listener.shutDown();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Get the temperature that shuts down computer.\r\n     *\r\n     * @return the temperature that shuts down computer.\r\n     */\r\n    public int getShutdownLevel() {\r\n        return (int) Math.round(autoShutDown.getLogScale());\r\n    }\r\n\r\n    /**\r\n     * Set the temperature that shuts down computer.\r\n     *\r\n     * @param value the temperature that shuts down computer.\r\n     */\r\n    public void setShutdownLevel(int value) {\r\n        autoShutDown = Temperature.fromLogScale(value);\r\n    }\r\n\r\n    public void setHeat(Heat heat) {\r\n        this.heat = heat;\r\n    }\r\n}\r\n",
		"id": "EvoSuiteBenchmark/86_at-robots2-j/src/main/java/net/virtualinfinity/atrobots/computer/HardwareBusTest.java",
		"test_prompt": "// HardwareBusTest.java\npackage net.virtualinfinity.atrobots.computer;\n\nimport net.virtualinfinity.atrobots.measures.Heat;\nimport net.virtualinfinity.atrobots.measures.Temperature;\nimport net.virtualinfinity.atrobots.ports.PortHandler;\nimport java.util.ArrayList;\nimport java.util.Collection;\nimport java.util.Map;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link HardwareBus}.\n* It contains ten unit test cases for the {@link HardwareBus#readPort(int)} method.\n*/\nclass HardwareBusTest {"
	},
	{
		"original_code": "// MemoryArray.java\npackage net.virtualinfinity.atrobots.computer;\r\n\r\nimport java.util.Arrays;\r\n\r\n/**\r\n * Represents a block of memory of some type (RAM or ROM).\r\n *\r\n * @author Daniel Pitts\r\n */\r\npublic abstract class MemoryArray {\r\n\r\n    private static final SpecialRegister[] NO_REGISTERS = new SpecialRegister[0];\r\n\r\n    private ComputerErrorHandler errorHandler;\r\n\r\n    private SpecialRegister[] specialRegisters = NO_REGISTERS;\r\n\r\n    protected final short[] cells;\r\n\r\n    public MemoryArray(int blockSize) {\r\n        cells = new short[blockSize];\r\n    }\r\n\r\n    public final int size() {\r\n        return cells.length;\r\n    }\r\n\r\n    public final short get(int index) {\r\n        if (index < specialRegisters.length) {\r\n            final SpecialRegister register = specialRegisters[index];\r\n            if (register != null) {\r\n                return register.get();\r\n            }\r\n        }\r\n        return cells[index];\r\n    }\r\n\r\n    public abstract void put(int index, short value);\r\n\r\n    public abstract void decrement(int index);\r\n\r\n    public abstract void increment(int index);\r\n\r\n    public abstract void or(int index, short value);\r\n\r\n    public abstract void and(int index, short value);\r\n\r\n    public abstract void clear();\r\n\r\n    public ComputerErrorHandler getErrorHandler() {\r\n        return errorHandler;\r\n    }\r\n\r\n    public void setErrorHandler(ComputerErrorHandler errorHandler) {\r\n        this.errorHandler = errorHandler;\r\n    }\r\n\r\n    /**\r\n     * Use a special register for the given address.  A special register isn't read from memory,\r\n     * but from some external system.  Generally these are read-only, but writing is not an error.\r\n     *\r\n     * @param address         the address which will be read specially.\r\n     * @param specialRegister the handler which returns the special value.\r\n     */\r\n    public void addSpecialRegister(int address, SpecialRegister specialRegister) {\r\n        if (address >= specialRegisters.length) {\r\n            specialRegisters = Arrays.copyOf(specialRegisters, address + 1);\r\n        }\r\n        specialRegisters[address] = specialRegister;\r\n    }\r\n}\r\n",
		"id": "EvoSuiteBenchmark/86_at-robots2-j/src/main/java/net/virtualinfinity/atrobots/computer/MemoryArrayTest.java",
		"test_prompt": "// MemoryArrayTest.java\npackage net.virtualinfinity.atrobots.computer;\n\nimport java.util.Arrays;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link MemoryArray}.\n* It contains ten unit test cases for the {@link MemoryArray#size()} method.\n*/\nclass MemoryArrayTest {"
	},
	{
		"original_code": "// Computer.java\npackage net.virtualinfinity.atrobots.computer;\r\n\r\nimport net.virtualinfinity.atrobots.measures.Duration;\r\nimport net.virtualinfinity.atrobots.ports.InvalidPort;\r\nimport net.virtualinfinity.atrobots.ports.PortHandler;\r\nimport net.virtualinfinity.atrobots.ports.PortListener;\r\nimport java.util.Collections;\r\nimport java.util.HashMap;\r\nimport java.util.Map;\r\n\r\n/**\r\n * An AT-Robots 2 virtual machine.\r\n *\r\n * @author Daniel Pitts\r\n */\r\npublic class Computer implements PortListener, Restartable {\r\n\r\n    private Memory memory;\r\n\r\n    private Registers registers;\r\n\r\n    private StackMemory stack;\r\n\r\n    private MemoryRegion program;\r\n\r\n    private int cycles;\r\n\r\n    private int instructionPointer;\r\n\r\n    private int nextInstructionPointer;\r\n\r\n    private InstructionTable instructionTable;\r\n\r\n    private HardwareBus hardwareBus;\r\n\r\n    private Map<Integer, Integer> jumpTable;\r\n\r\n    private AtRobotsCommunicationsQueue commQueue;\r\n\r\n    private int cyclesPerSimCycle;\r\n\r\n    private String lastMessage;\r\n\r\n    private ComputerErrorHandler errorHandler = new ErrorHandler();\r\n\r\n    private boolean shutDown;\r\n\r\n    private int maxInstructionPointer;\r\n\r\n    private DebugListener debugListener = new EmptyDebugListener();\r\n\r\n    private int id;\r\n\r\n    private String name;\r\n\r\n    private final DebugInfo debugInfo;\r\n\r\n    public Computer(Memory memory, int stackSize, int maxProcessorSpeed, DebugInfo debugInfo) {\r\n        this.memory = memory;\r\n        this.debugInfo = debugInfo;\r\n        this.registers = new Registers(memory);\r\n        this.stack = new StackMemory(registers.getStackPointerCell(), stackSize);\r\n        this.program = new MemoryRegion(memory, 1024, 4096);\r\n        this.cyclesPerSimCycle = maxProcessorSpeed;\r\n        instructionTable = new InstructionTable();\r\n        Map<Integer, Integer> jumpTable = new HashMap<Integer, Integer>();\r\n        maxInstructionPointer = program.size() / 4;\r\n        for (int i = 0; i < maxInstructionPointer; ++i) {\r\n            if (getMicrocodeAt(0, i) == Microcode.NumberedLabel) {\r\n                jumpTable.put((int) getConstantAt(0, i), i);\r\n            }\r\n        }\r\n        if (jumpTable.isEmpty()) {\r\n            this.jumpTable = Collections.emptyMap();\r\n        } else {\r\n            this.jumpTable = jumpTable;\r\n        }\r\n    }\r\n\r\n    public HardwareBus getHardwareBus() {\r\n        return hardwareBus;\r\n    }\r\n\r\n    public void setHardwareBus(HardwareBus hardwareBus) {\r\n        this.hardwareBus = hardwareBus;\r\n    }\r\n\r\n    public void useCycles() {\r\n        while (cycles > 0 && !shutDown) {\r\n            getHardwareBus().checkHeat();\r\n            executeInstruction();\r\n        }\r\n        if (shutDown && cycles > 0) {\r\n            cycles = 0;\r\n        }\r\n        getHardwareBus().checkHeat();\r\n    }\r\n\r\n    void executeInstruction() {\r\n        if (nextInstructionPointer >= maxInstructionPointer) {\r\n            nextInstructionPointer = 0;\r\n        }\r\n        instructionPointer = nextInstructionPointer;\r\n        debugListener.beforeInstruction(this);\r\n        nextInstructionPointer++;\r\n        getInstruction().execute(this);\r\n        debugListener.afterInstruction(this);\r\n    }\r\n\r\n    public DebugListener getDebugListener() {\r\n        return debugListener;\r\n    }\r\n\r\n    public void setDebugListener(DebugListener debugListener) {\r\n        this.debugListener = debugListener;\r\n    }\r\n\r\n    public int getInstructionPointer() {\r\n        return instructionPointer;\r\n    }\r\n\r\n    public short getOperandValue(int opnumber) {\r\n        return getMicrocode(opnumber).getValue(Computer.this, opnumber);\r\n    }\r\n\r\n    public Microcode getMicrocode(int opnumber) {\r\n        return Microcode.get(getConstant(3) >> (4 * opnumber));\r\n    }\r\n\r\n    private Microcode getMicrocodeAt(int opnumber, int pointer) {\r\n        return Microcode.get(getConstantAt(3, pointer) >> (4 * opnumber));\r\n    }\r\n\r\n    public short getConstant(int opnumber) {\r\n        return getConstantAt(opnumber, instructionPointer);\r\n    }\r\n\r\n    private short getConstantAt(int opnumber, int pointer) {\r\n        return program.get(pointer * 4 + opnumber);\r\n    }\r\n\r\n    public short getUnresolvedLabelValue(int opnumber) {\r\n        return getConstant(opnumber);\r\n    }\r\n\r\n    public short getLabelValue(int opnumber) {\r\n        return getConstant(opnumber);\r\n    }\r\n\r\n    public short getNumberedLabelValue(int opnumber) {\r\n        return getConstant(opnumber);\r\n    }\r\n\r\n    public short getDoubleDereferencedValue(int opnumber) {\r\n        return memory.get(Microcode.Dereference.getValue(Computer.this, opnumber));\r\n    }\r\n\r\n    public short getDeferencedValue(int opnumber) {\r\n        return memory.get(Microcode.Constant.getValue(Computer.this, opnumber));\r\n    }\r\n\r\n    public Instruction getInstruction() {\r\n        final Microcode microcode = getMicrocode(0);\r\n        if (microcode == Microcode.NumberedLabel) {\r\n            return instructionTable.getNumberedLabelInstruction();\r\n        }\r\n        if (!microcode.hasValue()) {\r\n            return instructionTable.getInvalidMicrocodeInstruction();\r\n        }\r\n        return instructionTable.getInstruction(microcode.getValue(Computer.this, 0));\r\n    }\r\n\r\n    public void consumeCycles(int cost) {\r\n        if (cost > 0) {\r\n            cycles -= cost;\r\n        }\r\n    }\r\n\r\n    public void setOperandValue(int opnumber, short value) {\r\n        final Microcode microcode = getMicrocode(opnumber);\r\n        if (microcode.isAddressible()) {\r\n            memory.set(microcode.getAddress(Computer.this, opnumber), value);\r\n        }\r\n    }\r\n\r\n    public void popInstructionPointer() {\r\n        nextInstructionPointer = stack.pop();\r\n    }\r\n\r\n    public void call() {\r\n        stack.push((short) nextInstructionPointer);\r\n        jump();\r\n    }\r\n\r\n    public void jump() {\r\n        final Microcode microcode = getMicrocode(1);\r\n        if (microcode == Microcode.ResolvedLabel) {\r\n            setInstructionPointer(getLabelValue(1));\r\n        } else if (microcode.isValid()) {\r\n            jumpToNumberedLabel(microcode.getValue(this, 1));\r\n        }\r\n    }\r\n\r\n    public Flags getFlags() {\r\n        return registers.getFlags();\r\n    }\r\n\r\n    public Registers getRegisters() {\r\n        return registers;\r\n    }\r\n\r\n    public void callInterrupt() {\r\n        hardwareBus.callInterrupt(getOperandValue(1));\r\n    }\r\n\r\n    public void incrementOperand(int opnumber) {\r\n        memory.increment(getMicrocode(opnumber).getAddress(Computer.this, opnumber));\r\n    }\r\n\r\n    public void decrementOperand(int opnumber) {\r\n        memory.decrement(getMicrocode(opnumber).getAddress(Computer.this, opnumber));\r\n    }\r\n\r\n    public void push() {\r\n        stack.push(getOperandValue(1));\r\n    }\r\n\r\n    public void pop() {\r\n        setOperandValue(1, stack.pop());\r\n    }\r\n\r\n    public void readPort() {\r\n        setOperandValue(2, hardwareBus.readPort(getOperandValue(1)));\r\n    }\r\n\r\n    public void writePort() {\r\n        hardwareBus.writePort(getOperandValue(1), getOperandValue(2));\r\n    }\r\n\r\n    public int getOperandAddress(int opnumber) {\r\n        return getMicrocode(opnumber).getAddress(Computer.this, opnumber);\r\n    }\r\n\r\n    public Memory getMemory() {\r\n        return memory;\r\n    }\r\n\r\n    public void reset() {\r\n        stack.reset();\r\n        getHardwareBus().reset();\r\n    }\r\n\r\n    public PortHandler createDefaultPortHandler() {\r\n        return new InvalidPort().setPortListener(Computer.this);\r\n    }\r\n\r\n    public MemoryRegion getCommQueueMemoryRegion() {\r\n        return new MemoryRegion(memory, 512, 256);\r\n    }\r\n\r\n    public ComputerErrorHandler getErrorHandler() {\r\n        return errorHandler;\r\n    }\r\n\r\n    public void update(Duration duration) {\r\n        cycles += duration.getCycles() * getCyclesPerSimCycle();\r\n        useCycles();\r\n    }\r\n\r\n    public int getCyclesPerSimCycle() {\r\n        return cyclesPerSimCycle;\r\n    }\r\n\r\n    private void jumpToNumberedLabel(short value) {\r\n        final Integer location = jumpTable.get((int) value);\r\n        if (location == null) {\r\n            errorHandler.labelNotFound(value);\r\n        } else {\r\n            setInstructionPointer(location);\r\n        }\r\n    }\r\n\r\n    public void jumpToLine() {\r\n        setInstructionPointer(getOperandValue(1));\r\n    }\r\n\r\n    private void setInstructionPointer(int instructionPointer) {\r\n        this.nextInstructionPointer = instructionPointer;\r\n    }\r\n\r\n    public void setCommQueue(AtRobotsCommunicationsQueue commQueue) {\r\n        Computer.this.commQueue = commQueue;\r\n    }\r\n\r\n    public AtRobotsCommunicationsQueue getCommQueue() {\r\n        return commQueue;\r\n    }\r\n\r\n    public void invalidMicrocodeError() {\r\n        errorHandler.invalidMicrocodeError();\r\n    }\r\n\r\n    public void divideByZeroError() {\r\n        errorHandler.divideByZeroError();\r\n    }\r\n\r\n    public void genericError(short operandValue) {\r\n        errorHandler.genericError(operandValue);\r\n    }\r\n\r\n    public void unknownInstructionError(short operandValue) {\r\n        errorHandler.unknownInstructionError(operandValue);\r\n    }\r\n\r\n    public void invalidInterruptError(short operandValue) {\r\n        errorHandler.invalidInterruptError(operandValue);\r\n    }\r\n\r\n    public void invalidPortError() {\r\n        errorHandler.invalidPortError();\r\n    }\r\n\r\n    public void notAddressableError() {\r\n        errorHandler.notAddressableError();\r\n    }\r\n\r\n    public void shutDown() {\r\n        shutDown = true;\r\n    }\r\n\r\n    public boolean isShutDown() {\r\n        return shutDown;\r\n    }\r\n\r\n    public void startUp() {\r\n        shutDown = false;\r\n    }\r\n\r\n    public int getCycles() {\r\n        return cycles;\r\n    }\r\n\r\n    public int getNextInstructionPointer() {\r\n        return nextInstructionPointer;\r\n    }\r\n\r\n    public String getLastMessage() {\r\n        return lastMessage;\r\n    }\r\n\r\n    public StackMemory getStack() {\r\n        return stack;\r\n    }\r\n\r\n    public DebugInfo getDebugInfo() {\r\n        return debugInfo;\r\n    }\r\n\r\n    public void setId(int id) {\r\n        this.id = id;\r\n    }\r\n\r\n    public void setName(String name) {\r\n        this.name = name;\r\n    }\r\n\r\n    public int getId() {\r\n        return id;\r\n    }\r\n\r\n    public String getName() {\r\n        return name;\r\n    }\r\n\r\n    private class ErrorHandler implements ComputerErrorHandler {\r\n\r\n        public void genericError(short operandValue) {\r\n            lastMessage = \"ERR \" + operandValue;\r\n        }\r\n\r\n        public void unknownInstructionError(short operandValue) {\r\n            lastMessage = \"Unknown instruction: \" + operandValue;\r\n        }\r\n\r\n        public void invalidInterruptError(short operandValue) {\r\n            lastMessage = \"Invalid Interrupt: \" + operandValue;\r\n        }\r\n\r\n        public void notAddressableError() {\r\n            lastMessage = \"Not addressable error.\";\r\n        }\r\n\r\n        public void labelNotFound(short value) {\r\n            lastMessage = \"Label not found: \" + value;\r\n        }\r\n\r\n        public void invalidMicrocodeError() {\r\n            lastMessage = \"Invalid microcode.\";\r\n        }\r\n\r\n        public void divideByZeroError() {\r\n            lastMessage = \"Divide by zero\";\r\n        }\r\n\r\n        public void invalidPortError() {\r\n            lastMessage = \"Invalid port.\";\r\n        }\r\n\r\n        public void commQueueEmptyError() {\r\n            lastMessage = \"Empty Comm Queue\";\r\n        }\r\n\r\n        public void memoryBoundsError(int address) {\r\n            lastMessage = \"OutOfBounds: @\" + address;\r\n        }\r\n\r\n        public void writeToRomError() {\r\n            lastMessage = \"Write to ROM.\";\r\n        }\r\n    }\r\n}\r\n",
		"id": "EvoSuiteBenchmark/86_at-robots2-j/src/main/java/net/virtualinfinity/atrobots/computer/ComputerTest0.java",
		"test_prompt": "// ComputerTest0.java\npackage net.virtualinfinity.atrobots.computer;\n\nimport net.virtualinfinity.atrobots.measures.Duration;\nimport net.virtualinfinity.atrobots.ports.InvalidPort;\nimport net.virtualinfinity.atrobots.ports.PortHandler;\nimport net.virtualinfinity.atrobots.ports.PortListener;\nimport java.util.Collections;\nimport java.util.HashMap;\nimport java.util.Map;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link Computer}.\n* It contains ten unit test cases for the {@link Computer#createDefaultPortHandler()} method.\n*/\nclass ComputerTest0 {"
	},
	{
		"original_code": "// Computer.java\npackage net.virtualinfinity.atrobots.computer;\r\n\r\nimport net.virtualinfinity.atrobots.measures.Duration;\r\nimport net.virtualinfinity.atrobots.ports.InvalidPort;\r\nimport net.virtualinfinity.atrobots.ports.PortHandler;\r\nimport net.virtualinfinity.atrobots.ports.PortListener;\r\nimport java.util.Collections;\r\nimport java.util.HashMap;\r\nimport java.util.Map;\r\n\r\n/**\r\n * An AT-Robots 2 virtual machine.\r\n *\r\n * @author Daniel Pitts\r\n */\r\npublic class Computer implements PortListener, Restartable {\r\n\r\n    private Memory memory;\r\n\r\n    private Registers registers;\r\n\r\n    private StackMemory stack;\r\n\r\n    private MemoryRegion program;\r\n\r\n    private int cycles;\r\n\r\n    private int instructionPointer;\r\n\r\n    private int nextInstructionPointer;\r\n\r\n    private InstructionTable instructionTable;\r\n\r\n    private HardwareBus hardwareBus;\r\n\r\n    private Map<Integer, Integer> jumpTable;\r\n\r\n    private AtRobotsCommunicationsQueue commQueue;\r\n\r\n    private int cyclesPerSimCycle;\r\n\r\n    private String lastMessage;\r\n\r\n    private ComputerErrorHandler errorHandler = new ErrorHandler();\r\n\r\n    private boolean shutDown;\r\n\r\n    private int maxInstructionPointer;\r\n\r\n    private DebugListener debugListener = new EmptyDebugListener();\r\n\r\n    private int id;\r\n\r\n    private String name;\r\n\r\n    private final DebugInfo debugInfo;\r\n\r\n    public Computer(Memory memory, int stackSize, int maxProcessorSpeed, DebugInfo debugInfo) {\r\n        this.memory = memory;\r\n        this.debugInfo = debugInfo;\r\n        this.registers = new Registers(memory);\r\n        this.stack = new StackMemory(registers.getStackPointerCell(), stackSize);\r\n        this.program = new MemoryRegion(memory, 1024, 4096);\r\n        this.cyclesPerSimCycle = maxProcessorSpeed;\r\n        instructionTable = new InstructionTable();\r\n        Map<Integer, Integer> jumpTable = new HashMap<Integer, Integer>();\r\n        maxInstructionPointer = program.size() / 4;\r\n        for (int i = 0; i < maxInstructionPointer; ++i) {\r\n            if (getMicrocodeAt(0, i) == Microcode.NumberedLabel) {\r\n                jumpTable.put((int) getConstantAt(0, i), i);\r\n            }\r\n        }\r\n        if (jumpTable.isEmpty()) {\r\n            this.jumpTable = Collections.emptyMap();\r\n        } else {\r\n            this.jumpTable = jumpTable;\r\n        }\r\n    }\r\n\r\n    public HardwareBus getHardwareBus() {\r\n        return hardwareBus;\r\n    }\r\n\r\n    public void setHardwareBus(HardwareBus hardwareBus) {\r\n        this.hardwareBus = hardwareBus;\r\n    }\r\n\r\n    public void useCycles() {\r\n        while (cycles > 0 && !shutDown) {\r\n            getHardwareBus().checkHeat();\r\n            executeInstruction();\r\n        }\r\n        if (shutDown && cycles > 0) {\r\n            cycles = 0;\r\n        }\r\n        getHardwareBus().checkHeat();\r\n    }\r\n\r\n    void executeInstruction() {\r\n        if (nextInstructionPointer >= maxInstructionPointer) {\r\n            nextInstructionPointer = 0;\r\n        }\r\n        instructionPointer = nextInstructionPointer;\r\n        debugListener.beforeInstruction(this);\r\n        nextInstructionPointer++;\r\n        getInstruction().execute(this);\r\n        debugListener.afterInstruction(this);\r\n    }\r\n\r\n    public DebugListener getDebugListener() {\r\n        return debugListener;\r\n    }\r\n\r\n    public void setDebugListener(DebugListener debugListener) {\r\n        this.debugListener = debugListener;\r\n    }\r\n\r\n    public int getInstructionPointer() {\r\n        return instructionPointer;\r\n    }\r\n\r\n    public short getOperandValue(int opnumber) {\r\n        return getMicrocode(opnumber).getValue(Computer.this, opnumber);\r\n    }\r\n\r\n    public Microcode getMicrocode(int opnumber) {\r\n        return Microcode.get(getConstant(3) >> (4 * opnumber));\r\n    }\r\n\r\n    private Microcode getMicrocodeAt(int opnumber, int pointer) {\r\n        return Microcode.get(getConstantAt(3, pointer) >> (4 * opnumber));\r\n    }\r\n\r\n    public short getConstant(int opnumber) {\r\n        return getConstantAt(opnumber, instructionPointer);\r\n    }\r\n\r\n    private short getConstantAt(int opnumber, int pointer) {\r\n        return program.get(pointer * 4 + opnumber);\r\n    }\r\n\r\n    public short getUnresolvedLabelValue(int opnumber) {\r\n        return getConstant(opnumber);\r\n    }\r\n\r\n    public short getLabelValue(int opnumber) {\r\n        return getConstant(opnumber);\r\n    }\r\n\r\n    public short getNumberedLabelValue(int opnumber) {\r\n        return getConstant(opnumber);\r\n    }\r\n\r\n    public short getDoubleDereferencedValue(int opnumber) {\r\n        return memory.get(Microcode.Dereference.getValue(Computer.this, opnumber));\r\n    }\r\n\r\n    public short getDeferencedValue(int opnumber) {\r\n        return memory.get(Microcode.Constant.getValue(Computer.this, opnumber));\r\n    }\r\n\r\n    public Instruction getInstruction() {\r\n        final Microcode microcode = getMicrocode(0);\r\n        if (microcode == Microcode.NumberedLabel) {\r\n            return instructionTable.getNumberedLabelInstruction();\r\n        }\r\n        if (!microcode.hasValue()) {\r\n            return instructionTable.getInvalidMicrocodeInstruction();\r\n        }\r\n        return instructionTable.getInstruction(microcode.getValue(Computer.this, 0));\r\n    }\r\n\r\n    public void consumeCycles(int cost) {\r\n        if (cost > 0) {\r\n            cycles -= cost;\r\n        }\r\n    }\r\n\r\n    public void setOperandValue(int opnumber, short value) {\r\n        final Microcode microcode = getMicrocode(opnumber);\r\n        if (microcode.isAddressible()) {\r\n            memory.set(microcode.getAddress(Computer.this, opnumber), value);\r\n        }\r\n    }\r\n\r\n    public void popInstructionPointer() {\r\n        nextInstructionPointer = stack.pop();\r\n    }\r\n\r\n    public void call() {\r\n        stack.push((short) nextInstructionPointer);\r\n        jump();\r\n    }\r\n\r\n    public void jump() {\r\n        final Microcode microcode = getMicrocode(1);\r\n        if (microcode == Microcode.ResolvedLabel) {\r\n            setInstructionPointer(getLabelValue(1));\r\n        } else if (microcode.isValid()) {\r\n            jumpToNumberedLabel(microcode.getValue(this, 1));\r\n        }\r\n    }\r\n\r\n    public Flags getFlags() {\r\n        return registers.getFlags();\r\n    }\r\n\r\n    public Registers getRegisters() {\r\n        return registers;\r\n    }\r\n\r\n    public void callInterrupt() {\r\n        hardwareBus.callInterrupt(getOperandValue(1));\r\n    }\r\n\r\n    public void incrementOperand(int opnumber) {\r\n        memory.increment(getMicrocode(opnumber).getAddress(Computer.this, opnumber));\r\n    }\r\n\r\n    public void decrementOperand(int opnumber) {\r\n        memory.decrement(getMicrocode(opnumber).getAddress(Computer.this, opnumber));\r\n    }\r\n\r\n    public void push() {\r\n        stack.push(getOperandValue(1));\r\n    }\r\n\r\n    public void pop() {\r\n        setOperandValue(1, stack.pop());\r\n    }\r\n\r\n    public void readPort() {\r\n        setOperandValue(2, hardwareBus.readPort(getOperandValue(1)));\r\n    }\r\n\r\n    public void writePort() {\r\n        hardwareBus.writePort(getOperandValue(1), getOperandValue(2));\r\n    }\r\n\r\n    public int getOperandAddress(int opnumber) {\r\n        return getMicrocode(opnumber).getAddress(Computer.this, opnumber);\r\n    }\r\n\r\n    public Memory getMemory() {\r\n        return memory;\r\n    }\r\n\r\n    public void reset() {\r\n        stack.reset();\r\n        getHardwareBus().reset();\r\n    }\r\n\r\n    public PortHandler createDefaultPortHandler() {\r\n        return new InvalidPort().setPortListener(Computer.this);\r\n    }\r\n\r\n    public MemoryRegion getCommQueueMemoryRegion() {\r\n        return new MemoryRegion(memory, 512, 256);\r\n    }\r\n\r\n    public ComputerErrorHandler getErrorHandler() {\r\n        return errorHandler;\r\n    }\r\n\r\n    public void update(Duration duration) {\r\n        cycles += duration.getCycles() * getCyclesPerSimCycle();\r\n        useCycles();\r\n    }\r\n\r\n    public int getCyclesPerSimCycle() {\r\n        return cyclesPerSimCycle;\r\n    }\r\n\r\n    private void jumpToNumberedLabel(short value) {\r\n        final Integer location = jumpTable.get((int) value);\r\n        if (location == null) {\r\n            errorHandler.labelNotFound(value);\r\n        } else {\r\n            setInstructionPointer(location);\r\n        }\r\n    }\r\n\r\n    public void jumpToLine() {\r\n        setInstructionPointer(getOperandValue(1));\r\n    }\r\n\r\n    private void setInstructionPointer(int instructionPointer) {\r\n        this.nextInstructionPointer = instructionPointer;\r\n    }\r\n\r\n    public void setCommQueue(AtRobotsCommunicationsQueue commQueue) {\r\n        Computer.this.commQueue = commQueue;\r\n    }\r\n\r\n    public AtRobotsCommunicationsQueue getCommQueue() {\r\n        return commQueue;\r\n    }\r\n\r\n    public void invalidMicrocodeError() {\r\n        errorHandler.invalidMicrocodeError();\r\n    }\r\n\r\n    public void divideByZeroError() {\r\n        errorHandler.divideByZeroError();\r\n    }\r\n\r\n    public void genericError(short operandValue) {\r\n        errorHandler.genericError(operandValue);\r\n    }\r\n\r\n    public void unknownInstructionError(short operandValue) {\r\n        errorHandler.unknownInstructionError(operandValue);\r\n    }\r\n\r\n    public void invalidInterruptError(short operandValue) {\r\n        errorHandler.invalidInterruptError(operandValue);\r\n    }\r\n\r\n    public void invalidPortError() {\r\n        errorHandler.invalidPortError();\r\n    }\r\n\r\n    public void notAddressableError() {\r\n        errorHandler.notAddressableError();\r\n    }\r\n\r\n    public void shutDown() {\r\n        shutDown = true;\r\n    }\r\n\r\n    public boolean isShutDown() {\r\n        return shutDown;\r\n    }\r\n\r\n    public void startUp() {\r\n        shutDown = false;\r\n    }\r\n\r\n    public int getCycles() {\r\n        return cycles;\r\n    }\r\n\r\n    public int getNextInstructionPointer() {\r\n        return nextInstructionPointer;\r\n    }\r\n\r\n    public String getLastMessage() {\r\n        return lastMessage;\r\n    }\r\n\r\n    public StackMemory getStack() {\r\n        return stack;\r\n    }\r\n\r\n    public DebugInfo getDebugInfo() {\r\n        return debugInfo;\r\n    }\r\n\r\n    public void setId(int id) {\r\n        this.id = id;\r\n    }\r\n\r\n    public void setName(String name) {\r\n        this.name = name;\r\n    }\r\n\r\n    public int getId() {\r\n        return id;\r\n    }\r\n\r\n    public String getName() {\r\n        return name;\r\n    }\r\n\r\n    private class ErrorHandler implements ComputerErrorHandler {\r\n\r\n        public void genericError(short operandValue) {\r\n            lastMessage = \"ERR \" + operandValue;\r\n        }\r\n\r\n        public void unknownInstructionError(short operandValue) {\r\n            lastMessage = \"Unknown instruction: \" + operandValue;\r\n        }\r\n\r\n        public void invalidInterruptError(short operandValue) {\r\n            lastMessage = \"Invalid Interrupt: \" + operandValue;\r\n        }\r\n\r\n        public void notAddressableError() {\r\n            lastMessage = \"Not addressable error.\";\r\n        }\r\n\r\n        public void labelNotFound(short value) {\r\n            lastMessage = \"Label not found: \" + value;\r\n        }\r\n\r\n        public void invalidMicrocodeError() {\r\n            lastMessage = \"Invalid microcode.\";\r\n        }\r\n\r\n        public void divideByZeroError() {\r\n            lastMessage = \"Divide by zero\";\r\n        }\r\n\r\n        public void invalidPortError() {\r\n            lastMessage = \"Invalid port.\";\r\n        }\r\n\r\n        public void commQueueEmptyError() {\r\n            lastMessage = \"Empty Comm Queue\";\r\n        }\r\n\r\n        public void memoryBoundsError(int address) {\r\n            lastMessage = \"OutOfBounds: @\" + address;\r\n        }\r\n\r\n        public void writeToRomError() {\r\n            lastMessage = \"Write to ROM.\";\r\n        }\r\n    }\r\n}\r\n",
		"id": "EvoSuiteBenchmark/86_at-robots2-j/src/main/java/net/virtualinfinity/atrobots/computer/ComputerTest1.java",
		"test_prompt": "// ComputerTest1.java\npackage net.virtualinfinity.atrobots.computer;\n\nimport net.virtualinfinity.atrobots.measures.Duration;\nimport net.virtualinfinity.atrobots.ports.InvalidPort;\nimport net.virtualinfinity.atrobots.ports.PortHandler;\nimport net.virtualinfinity.atrobots.ports.PortListener;\nimport java.util.Collections;\nimport java.util.HashMap;\nimport java.util.Map;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link Computer}.\n* It contains ten unit test cases for the {@link Computer#isShutDown()} method.\n*/\nclass ComputerTest1 {"
	},
	{
		"original_code": "// Memory.java\npackage net.virtualinfinity.atrobots.computer;\r\n\r\nimport java.util.ArrayList;\r\nimport java.util.List;\r\n\r\n/**\r\n * Represents the entire memory (RAM and ROM) of a {@link net.virtualinfinity.atrobots.computer.Computer}.\r\n *\r\n * @author Daniel Pitts\r\n */\r\npublic class Memory {\r\n\r\n    private final List<MemoryArray> arrays = new ArrayList<MemoryArray>();\r\n\r\n    private ComputerErrorHandler errorHandler;\r\n\r\n    /**\r\n     * Bitwise-or the value at the given location with the given value.\r\n     *\r\n     * @param address the address\r\n     * @param value   the value to or.\r\n     */\r\n    public void or(int address, short value) {\r\n        for (MemoryArray array : arrays) {\r\n            if (address < array.size()) {\r\n                array.or(address, value);\r\n                return;\r\n            }\r\n            address -= array.size();\r\n        }\r\n        errorHandler.memoryBoundsError(address);\r\n    }\r\n\r\n    /**\r\n     * Bitwise-and the value at the given location with the given value.\r\n     *\r\n     * @param address the address\r\n     * @param value   the value to or.\r\n     */\r\n    public void and(int address, short value) {\r\n        for (MemoryArray array : arrays) {\r\n            if (address < array.size()) {\r\n                array.and(address, value);\r\n                return;\r\n            }\r\n            address -= array.size();\r\n        }\r\n        errorHandler.memoryBoundsError(address);\r\n    }\r\n\r\n    public ComputerErrorHandler getErrorHandler() {\r\n        return errorHandler;\r\n    }\r\n\r\n    /**\r\n     * Get the total size of this memory.\r\n     *\r\n     * @return the size.\r\n     */\r\n    public int size() {\r\n        int size = 0;\r\n        for (MemoryArray array : arrays) {\r\n            size += array.size();\r\n        }\r\n        return size;\r\n    }\r\n\r\n    /**\r\n     * Add the next section of memory.\r\n     *\r\n     * @param array a section of memory.\r\n     */\r\n    public void addMemoryArray(MemoryArray array) {\r\n        arrays.add(array);\r\n        array.setErrorHandler(errorHandler);\r\n    }\r\n\r\n    /**\r\n     * Read the value at the specific address\r\n     *\r\n     * @param address the address to read.\r\n     * @return the value at that address, or 0 if invalid.\r\n     */\r\n    public short get(int address) {\r\n        for (MemoryArray array : arrays) {\r\n            if (address < array.size()) {\r\n                return array.get(address);\r\n            }\r\n            address -= array.size();\r\n        }\r\n        errorHandler.memoryBoundsError(address);\r\n        return 0;\r\n    }\r\n\r\n    public int unsigned(int index) {\r\n        return get(index) & 0xFFFF;\r\n    }\r\n\r\n    /**\r\n     * writes the value at the specific address\r\n     *\r\n     * @param address the address to write.\r\n     * @param value   the value to write at that address.\r\n     */\r\n    public void set(int address, short value) {\r\n        for (MemoryArray array : arrays) {\r\n            if (address < array.size()) {\r\n                array.put(address, value);\r\n                return;\r\n            }\r\n            address -= array.size();\r\n        }\r\n        errorHandler.memoryBoundsError(address);\r\n    }\r\n\r\n    public MemoryCell getCell(int index) {\r\n        return new MemoryCell(this, index);\r\n    }\r\n\r\n    public void decrement(int address) {\r\n        for (MemoryArray array : arrays) {\r\n            if (address < array.size()) {\r\n                array.decrement(address);\r\n                return;\r\n            }\r\n            address -= array.size();\r\n        }\r\n        errorHandler.memoryBoundsError(address);\r\n    }\r\n\r\n    public void increment(int address) {\r\n        for (MemoryArray array : arrays) {\r\n            if (address < array.size()) {\r\n                array.increment(address);\r\n                return;\r\n            }\r\n            address -= array.size();\r\n        }\r\n        errorHandler.memoryBoundsError(address);\r\n    }\r\n\r\n    public void setErrorHandler(ComputerErrorHandler errorHandler) {\r\n        for (MemoryArray array : arrays) {\r\n            array.setErrorHandler(errorHandler);\r\n        }\r\n        this.errorHandler = errorHandler;\r\n    }\r\n}\r\n",
		"id": "EvoSuiteBenchmark/86_at-robots2-j/src/main/java/net/virtualinfinity/atrobots/computer/MemoryTest0.java",
		"test_prompt": "// MemoryTest0.java\npackage net.virtualinfinity.atrobots.computer;\n\nimport java.util.ArrayList;\nimport java.util.List;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link Memory}.\n* It contains ten unit test cases for the {@link Memory#size()} method.\n*/\nclass MemoryTest0 {"
	},
	{
		"original_code": "// Memory.java\npackage net.virtualinfinity.atrobots.computer;\r\n\r\nimport java.util.ArrayList;\r\nimport java.util.List;\r\n\r\n/**\r\n * Represents the entire memory (RAM and ROM) of a {@link net.virtualinfinity.atrobots.computer.Computer}.\r\n *\r\n * @author Daniel Pitts\r\n */\r\npublic class Memory {\r\n\r\n    private final List<MemoryArray> arrays = new ArrayList<MemoryArray>();\r\n\r\n    private ComputerErrorHandler errorHandler;\r\n\r\n    /**\r\n     * Bitwise-or the value at the given location with the given value.\r\n     *\r\n     * @param address the address\r\n     * @param value   the value to or.\r\n     */\r\n    public void or(int address, short value) {\r\n        for (MemoryArray array : arrays) {\r\n            if (address < array.size()) {\r\n                array.or(address, value);\r\n                return;\r\n            }\r\n            address -= array.size();\r\n        }\r\n        errorHandler.memoryBoundsError(address);\r\n    }\r\n\r\n    /**\r\n     * Bitwise-and the value at the given location with the given value.\r\n     *\r\n     * @param address the address\r\n     * @param value   the value to or.\r\n     */\r\n    public void and(int address, short value) {\r\n        for (MemoryArray array : arrays) {\r\n            if (address < array.size()) {\r\n                array.and(address, value);\r\n                return;\r\n            }\r\n            address -= array.size();\r\n        }\r\n        errorHandler.memoryBoundsError(address);\r\n    }\r\n\r\n    public ComputerErrorHandler getErrorHandler() {\r\n        return errorHandler;\r\n    }\r\n\r\n    /**\r\n     * Get the total size of this memory.\r\n     *\r\n     * @return the size.\r\n     */\r\n    public int size() {\r\n        int size = 0;\r\n        for (MemoryArray array : arrays) {\r\n            size += array.size();\r\n        }\r\n        return size;\r\n    }\r\n\r\n    /**\r\n     * Add the next section of memory.\r\n     *\r\n     * @param array a section of memory.\r\n     */\r\n    public void addMemoryArray(MemoryArray array) {\r\n        arrays.add(array);\r\n        array.setErrorHandler(errorHandler);\r\n    }\r\n\r\n    /**\r\n     * Read the value at the specific address\r\n     *\r\n     * @param address the address to read.\r\n     * @return the value at that address, or 0 if invalid.\r\n     */\r\n    public short get(int address) {\r\n        for (MemoryArray array : arrays) {\r\n            if (address < array.size()) {\r\n                return array.get(address);\r\n            }\r\n            address -= array.size();\r\n        }\r\n        errorHandler.memoryBoundsError(address);\r\n        return 0;\r\n    }\r\n\r\n    public int unsigned(int index) {\r\n        return get(index) & 0xFFFF;\r\n    }\r\n\r\n    /**\r\n     * writes the value at the specific address\r\n     *\r\n     * @param address the address to write.\r\n     * @param value   the value to write at that address.\r\n     */\r\n    public void set(int address, short value) {\r\n        for (MemoryArray array : arrays) {\r\n            if (address < array.size()) {\r\n                array.put(address, value);\r\n                return;\r\n            }\r\n            address -= array.size();\r\n        }\r\n        errorHandler.memoryBoundsError(address);\r\n    }\r\n\r\n    public MemoryCell getCell(int index) {\r\n        return new MemoryCell(this, index);\r\n    }\r\n\r\n    public void decrement(int address) {\r\n        for (MemoryArray array : arrays) {\r\n            if (address < array.size()) {\r\n                array.decrement(address);\r\n                return;\r\n            }\r\n            address -= array.size();\r\n        }\r\n        errorHandler.memoryBoundsError(address);\r\n    }\r\n\r\n    public void increment(int address) {\r\n        for (MemoryArray array : arrays) {\r\n            if (address < array.size()) {\r\n                array.increment(address);\r\n                return;\r\n            }\r\n            address -= array.size();\r\n        }\r\n        errorHandler.memoryBoundsError(address);\r\n    }\r\n\r\n    public void setErrorHandler(ComputerErrorHandler errorHandler) {\r\n        for (MemoryArray array : arrays) {\r\n            array.setErrorHandler(errorHandler);\r\n        }\r\n        this.errorHandler = errorHandler;\r\n    }\r\n}\r\n",
		"id": "EvoSuiteBenchmark/86_at-robots2-j/src/main/java/net/virtualinfinity/atrobots/computer/MemoryTest1.java",
		"test_prompt": "// MemoryTest1.java\npackage net.virtualinfinity.atrobots.computer;\n\nimport java.util.ArrayList;\nimport java.util.List;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link Memory}.\n* It contains ten unit test cases for the {@link Memory#unsigned(int)} method.\n*/\nclass MemoryTest1 {"
	},
	{
		"original_code": "// Program.java\npackage net.virtualinfinity.atrobots.computer;\r\n\r\n/**\r\n * A Program is a ROM definition.\r\n *\r\n * @author Daniel Pitts\r\n */\r\npublic class Program {\r\n\r\n    private short[] programCode;\r\n\r\n    public Program(short[] programCode) {\r\n        this.programCode = programCode;\r\n    }\r\n\r\n    /**\r\n     * Creates a read-only memory array with the program code pre-flashed.\r\n     *\r\n     * @return the memory array.\r\n     */\r\n    public MemoryArray createProgramMemory() {\r\n        final ReadOnlyMemoryArray readOnlyMemoryArray = new ReadOnlyMemoryArray(programCode.length);\r\n        readOnlyMemoryArray.flash(programCode);\r\n        return readOnlyMemoryArray;\r\n    }\r\n}\r\n",
		"id": "EvoSuiteBenchmark/86_at-robots2-j/src/main/java/net/virtualinfinity/atrobots/computer/ProgramTest.java",
		"test_prompt": "// ProgramTest.java\npackage net.virtualinfinity.atrobots.computer;\n\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link Program}.\n* It contains ten unit test cases for the {@link Program#createProgramMemory()} method.\n*/\nclass ProgramTest {"
	},
	{
		"original_code": "// AtRobotsCommunicationsQueue.java\npackage net.virtualinfinity.atrobots.computer;\r\n\r\nimport net.virtualinfinity.atrobots.comqueue.CommunicationsQueue;\r\n\r\n/**\r\n * A communications queue wrapper.\r\n *\r\n * @author Daniel Pitts\r\n */\r\npublic class AtRobotsCommunicationsQueue implements CommunicationsQueue {\r\n\r\n    private final MemoryRegion queue;\r\n\r\n    private final MemoryCell head;\r\n\r\n    private final MemoryCell tail;\r\n\r\n    private ComputerErrorHandler computerErrorHandler;\r\n\r\n    public AtRobotsCommunicationsQueue(MemoryRegion communicationsQueueMemory, MemoryCell head, MemoryCell tail) {\r\n        this.queue = communicationsQueueMemory;\r\n        this.head = head;\r\n        this.tail = tail;\r\n    }\r\n\r\n    public void popTo(MemoryCell destination) {\r\n        fixRange();\r\n        if (isEmpty()) {\r\n            computerErrorHandler.commQueueEmptyError();\r\n            return;\r\n        }\r\n        destination.set(queue.get(head.signed()));\r\n        head.increment();\r\n        fixRange();\r\n    }\r\n\r\n    public boolean isEmpty() {\r\n        return head.signed() == tail.signed();\r\n    }\r\n\r\n    private void fixRange() {\r\n        fixRange(head);\r\n        fixRange(tail);\r\n    }\r\n\r\n    private void fixRange(MemoryCell pointer) {\r\n        if (pointer.unsigned() >= queue.size()) {\r\n            pointer.set((short) 0);\r\n        }\r\n    }\r\n\r\n    public short size() {\r\n        fixRange();\r\n        final int size = tail.signed() - head.signed();\r\n        return (short) (size > 0 ? size : (size + queue.size()));\r\n    }\r\n\r\n    public void setComputerErrorHandler(ComputerErrorHandler computerErrorHandler) {\r\n        this.computerErrorHandler = computerErrorHandler;\r\n    }\r\n\r\n    public void enqueue(short value) {\r\n        fixRange(tail);\r\n        fixRange(head);\r\n        queue.set(tail.signed(), value);\r\n        tail.increment();\r\n        fixRange(tail);\r\n    }\r\n}\r\n",
		"id": "EvoSuiteBenchmark/86_at-robots2-j/src/main/java/net/virtualinfinity/atrobots/computer/AtRobotsCommunicationsQueueTest0.java",
		"test_prompt": "// AtRobotsCommunicationsQueueTest0.java\npackage net.virtualinfinity.atrobots.computer;\n\nimport net.virtualinfinity.atrobots.comqueue.CommunicationsQueue;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link AtRobotsCommunicationsQueue}.\n* It contains ten unit test cases for the {@link AtRobotsCommunicationsQueue#isEmpty()} method.\n*/\nclass AtRobotsCommunicationsQueueTest0 {"
	},
	{
		"original_code": "// AtRobotsCommunicationsQueue.java\npackage net.virtualinfinity.atrobots.computer;\r\n\r\nimport net.virtualinfinity.atrobots.comqueue.CommunicationsQueue;\r\n\r\n/**\r\n * A communications queue wrapper.\r\n *\r\n * @author Daniel Pitts\r\n */\r\npublic class AtRobotsCommunicationsQueue implements CommunicationsQueue {\r\n\r\n    private final MemoryRegion queue;\r\n\r\n    private final MemoryCell head;\r\n\r\n    private final MemoryCell tail;\r\n\r\n    private ComputerErrorHandler computerErrorHandler;\r\n\r\n    public AtRobotsCommunicationsQueue(MemoryRegion communicationsQueueMemory, MemoryCell head, MemoryCell tail) {\r\n        this.queue = communicationsQueueMemory;\r\n        this.head = head;\r\n        this.tail = tail;\r\n    }\r\n\r\n    public void popTo(MemoryCell destination) {\r\n        fixRange();\r\n        if (isEmpty()) {\r\n            computerErrorHandler.commQueueEmptyError();\r\n            return;\r\n        }\r\n        destination.set(queue.get(head.signed()));\r\n        head.increment();\r\n        fixRange();\r\n    }\r\n\r\n    public boolean isEmpty() {\r\n        return head.signed() == tail.signed();\r\n    }\r\n\r\n    private void fixRange() {\r\n        fixRange(head);\r\n        fixRange(tail);\r\n    }\r\n\r\n    private void fixRange(MemoryCell pointer) {\r\n        if (pointer.unsigned() >= queue.size()) {\r\n            pointer.set((short) 0);\r\n        }\r\n    }\r\n\r\n    public short size() {\r\n        fixRange();\r\n        final int size = tail.signed() - head.signed();\r\n        return (short) (size > 0 ? size : (size + queue.size()));\r\n    }\r\n\r\n    public void setComputerErrorHandler(ComputerErrorHandler computerErrorHandler) {\r\n        this.computerErrorHandler = computerErrorHandler;\r\n    }\r\n\r\n    public void enqueue(short value) {\r\n        fixRange(tail);\r\n        fixRange(head);\r\n        queue.set(tail.signed(), value);\r\n        tail.increment();\r\n        fixRange(tail);\r\n    }\r\n}\r\n",
		"id": "EvoSuiteBenchmark/86_at-robots2-j/src/main/java/net/virtualinfinity/atrobots/computer/AtRobotsCommunicationsQueueTest1.java",
		"test_prompt": "// AtRobotsCommunicationsQueueTest1.java\npackage net.virtualinfinity.atrobots.computer;\n\nimport net.virtualinfinity.atrobots.comqueue.CommunicationsQueue;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link AtRobotsCommunicationsQueue}.\n* It contains ten unit test cases for the {@link AtRobotsCommunicationsQueue#size()} method.\n*/\nclass AtRobotsCommunicationsQueueTest1 {"
	},
	{
		"original_code": "// InterruptHandler.java\npackage net.virtualinfinity.atrobots.computer;\r\n\r\nimport net.virtualinfinity.atrobots.ports.CycleSource;\r\n\r\n/**\r\n * @author Daniel Pitts\r\n */\r\npublic abstract class InterruptHandler {\r\n\r\n    private int cost;\r\n\r\n    private CycleSource cycleSource;\r\n\r\n    protected abstract void handleInterrupt();\r\n\r\n    public final InterruptHandler costs(int cost) {\r\n        this.cost = cost;\r\n        return this;\r\n    }\r\n\r\n    public void setCycleSource(CycleSource cycleSource) {\r\n        this.cycleSource = cycleSource;\r\n    }\r\n\r\n    public final void call() {\r\n        cycleSource.consumeCycles(cost);\r\n        handleInterrupt();\r\n    }\r\n}\r\n",
		"id": "EvoSuiteBenchmark/86_at-robots2-j/src/main/java/net/virtualinfinity/atrobots/computer/InterruptHandlerTest.java",
		"test_prompt": "// InterruptHandlerTest.java\npackage net.virtualinfinity.atrobots.computer;\n\nimport net.virtualinfinity.atrobots.ports.CycleSource;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link InterruptHandler}.\n* It contains ten unit test cases for the {@link InterruptHandler#costs(int)} method.\n*/\nclass InterruptHandlerTest {"
	},
	{
		"original_code": "// MemoryCell.java\npackage net.virtualinfinity.atrobots.computer;\r\n\r\n/**\r\n * Represents one cell in a memory.\r\n *\r\n * @author Daniel Pitts\r\n */\r\npublic class MemoryCell {\r\n\r\n    private final Memory memory;\r\n\r\n    private final int address;\r\n\r\n    public MemoryCell(Memory memory, int address) {\r\n        this.memory = memory;\r\n        this.address = address;\r\n    }\r\n\r\n    public short signed() {\r\n        return memory.get(address);\r\n    }\r\n\r\n    public int unsigned() {\r\n        return memory.unsigned(address);\r\n    }\r\n\r\n    public void set(short value) {\r\n        memory.set(address, value);\r\n    }\r\n\r\n    public void decrement() {\r\n        memory.decrement(address);\r\n    }\r\n\r\n    public void increment() {\r\n        memory.increment(address);\r\n    }\r\n\r\n    public void or(short value) {\r\n        memory.or(address, value);\r\n    }\r\n\r\n    public void and(short value) {\r\n        memory.and(address, value);\r\n    }\r\n\r\n    public String toString() {\r\n        return \"@\" + address + \"=\" + this.signed();\r\n    }\r\n}\r\n",
		"id": "EvoSuiteBenchmark/86_at-robots2-j/src/main/java/net/virtualinfinity/atrobots/computer/MemoryCellTest0.java",
		"test_prompt": "// MemoryCellTest0.java\npackage net.virtualinfinity.atrobots.computer;\n\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link MemoryCell}.\n* It contains ten unit test cases for the {@link MemoryCell#signed()} method.\n*/\nclass MemoryCellTest0 {"
	},
	{
		"original_code": "// MemoryCell.java\npackage net.virtualinfinity.atrobots.computer;\r\n\r\n/**\r\n * Represents one cell in a memory.\r\n *\r\n * @author Daniel Pitts\r\n */\r\npublic class MemoryCell {\r\n\r\n    private final Memory memory;\r\n\r\n    private final int address;\r\n\r\n    public MemoryCell(Memory memory, int address) {\r\n        this.memory = memory;\r\n        this.address = address;\r\n    }\r\n\r\n    public short signed() {\r\n        return memory.get(address);\r\n    }\r\n\r\n    public int unsigned() {\r\n        return memory.unsigned(address);\r\n    }\r\n\r\n    public void set(short value) {\r\n        memory.set(address, value);\r\n    }\r\n\r\n    public void decrement() {\r\n        memory.decrement(address);\r\n    }\r\n\r\n    public void increment() {\r\n        memory.increment(address);\r\n    }\r\n\r\n    public void or(short value) {\r\n        memory.or(address, value);\r\n    }\r\n\r\n    public void and(short value) {\r\n        memory.and(address, value);\r\n    }\r\n\r\n    public String toString() {\r\n        return \"@\" + address + \"=\" + this.signed();\r\n    }\r\n}\r\n",
		"id": "EvoSuiteBenchmark/86_at-robots2-j/src/main/java/net/virtualinfinity/atrobots/computer/MemoryCellTest1.java",
		"test_prompt": "// MemoryCellTest1.java\npackage net.virtualinfinity.atrobots.computer;\n\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link MemoryCell}.\n* It contains ten unit test cases for the {@link MemoryCell#unsigned()} method.\n*/\nclass MemoryCellTest1 {"
	},
	{
		"original_code": "// MemoryRegion.java\npackage net.virtualinfinity.atrobots.computer;\r\n\r\n/**\r\n * Represents a contiguous region of memory.\r\n *\r\n * @author Daniel Pitts\r\n */\r\npublic class MemoryRegion {\r\n\r\n    private final Memory memory;\r\n\r\n    private final int startAddress;\r\n\r\n    private final int length;\r\n\r\n    public MemoryRegion(Memory memory, int startAddress, int length) {\r\n        this.memory = memory;\r\n        this.startAddress = startAddress;\r\n        this.length = Math.min(length, memory.size() - startAddress);\r\n    }\r\n\r\n    public short get(int index) {\r\n        if (rangeCheck(index)) {\r\n            return memory.get(startAddress + index);\r\n        }\r\n        memory.getErrorHandler().memoryBoundsError(index + startAddress);\r\n        return 0;\r\n    }\r\n\r\n    private boolean rangeCheck(int index) {\r\n        return index >= 0 && index < length;\r\n    }\r\n\r\n    public int unsigned(int index) {\r\n        if (rangeCheck(index)) {\r\n            return memory.unsigned(startAddress + index);\r\n        }\r\n        memory.getErrorHandler().memoryBoundsError(startAddress + index);\r\n        return 0;\r\n    }\r\n\r\n    public void set(int index, short value) {\r\n        if (rangeCheck(index)) {\r\n            memory.set(startAddress + index, value);\r\n            return;\r\n        }\r\n        memory.getErrorHandler().memoryBoundsError(startAddress + index);\r\n    }\r\n\r\n    public MemoryCell getCell(int index) {\r\n        if (rangeCheck(index)) {\r\n            return memory.getCell(startAddress + index);\r\n        }\r\n        throw new IndexOutOfBoundsException(String.valueOf(index));\r\n    }\r\n\r\n    public int size() {\r\n        return length;\r\n    }\r\n}\r\n",
		"id": "EvoSuiteBenchmark/86_at-robots2-j/src/main/java/net/virtualinfinity/atrobots/computer/MemoryRegionTest0.java",
		"test_prompt": "// MemoryRegionTest0.java\npackage net.virtualinfinity.atrobots.computer;\n\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link MemoryRegion}.\n* It contains ten unit test cases for the {@link MemoryRegion#unsigned(int)} method.\n*/\nclass MemoryRegionTest0 {"
	},
	{
		"original_code": "// MemoryRegion.java\npackage net.virtualinfinity.atrobots.computer;\r\n\r\n/**\r\n * Represents a contiguous region of memory.\r\n *\r\n * @author Daniel Pitts\r\n */\r\npublic class MemoryRegion {\r\n\r\n    private final Memory memory;\r\n\r\n    private final int startAddress;\r\n\r\n    private final int length;\r\n\r\n    public MemoryRegion(Memory memory, int startAddress, int length) {\r\n        this.memory = memory;\r\n        this.startAddress = startAddress;\r\n        this.length = Math.min(length, memory.size() - startAddress);\r\n    }\r\n\r\n    public short get(int index) {\r\n        if (rangeCheck(index)) {\r\n            return memory.get(startAddress + index);\r\n        }\r\n        memory.getErrorHandler().memoryBoundsError(index + startAddress);\r\n        return 0;\r\n    }\r\n\r\n    private boolean rangeCheck(int index) {\r\n        return index >= 0 && index < length;\r\n    }\r\n\r\n    public int unsigned(int index) {\r\n        if (rangeCheck(index)) {\r\n            return memory.unsigned(startAddress + index);\r\n        }\r\n        memory.getErrorHandler().memoryBoundsError(startAddress + index);\r\n        return 0;\r\n    }\r\n\r\n    public void set(int index, short value) {\r\n        if (rangeCheck(index)) {\r\n            memory.set(startAddress + index, value);\r\n            return;\r\n        }\r\n        memory.getErrorHandler().memoryBoundsError(startAddress + index);\r\n    }\r\n\r\n    public MemoryCell getCell(int index) {\r\n        if (rangeCheck(index)) {\r\n            return memory.getCell(startAddress + index);\r\n        }\r\n        throw new IndexOutOfBoundsException(String.valueOf(index));\r\n    }\r\n\r\n    public int size() {\r\n        return length;\r\n    }\r\n}\r\n",
		"id": "EvoSuiteBenchmark/86_at-robots2-j/src/main/java/net/virtualinfinity/atrobots/computer/MemoryRegionTest1.java",
		"test_prompt": "// MemoryRegionTest1.java\npackage net.virtualinfinity.atrobots.computer;\n\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link MemoryRegion}.\n* It contains ten unit test cases for the {@link MemoryRegion#size()} method.\n*/\nclass MemoryRegionTest1 {"
	},
	{
		"original_code": "// PortHandler.java\npackage net.virtualinfinity.atrobots.ports;\r\n\r\n/**\r\n * @author Daniel Pitts\r\n */\r\npublic abstract class PortHandler {\r\n\r\n    private PortListener portListener;\r\n\r\n    public short read() {\r\n        portListener.invalidPortError();\r\n        return 0;\r\n    }\r\n\r\n    public void write(short value) {\r\n        portListener.invalidPortError();\r\n    }\r\n\r\n    public PortHandler setPortListener(PortListener portListener) {\r\n        this.portListener = portListener;\r\n        return this;\r\n    }\r\n\r\n    protected void consumeCycles(int cycles) {\r\n        portListener.consumeCycles(cycles);\r\n    }\r\n}\r\n",
		"id": "EvoSuiteBenchmark/86_at-robots2-j/src/main/java/net/virtualinfinity/atrobots/ports/PortHandlerTest.java",
		"test_prompt": "// PortHandlerTest.java\npackage net.virtualinfinity.atrobots.ports;\n\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link PortHandler}.\n* It contains ten unit test cases for the {@link PortHandler#read()} method.\n*/\nclass PortHandlerTest {"
	},
	{
		"original_code": "// AtRobotInterruptFactory.java\npackage net.virtualinfinity.atrobots.compiler;\r\n\r\nimport net.virtualinfinity.atrobots.arena.Arena;\r\nimport net.virtualinfinity.atrobots.arena.RoundState;\r\nimport net.virtualinfinity.atrobots.arena.RoundTimer;\r\nimport net.virtualinfinity.atrobots.atsetup.AtRobotInterrupt;\r\nimport net.virtualinfinity.atrobots.computer.InterruptHandler;\r\nimport net.virtualinfinity.atrobots.computer.MemoryCell;\r\nimport net.virtualinfinity.atrobots.computer.Registers;\r\nimport net.virtualinfinity.atrobots.interrupts.*;\r\nimport net.virtualinfinity.atrobots.robot.Robot;\r\nimport net.virtualinfinity.atrobots.util.MapWithDefaultValue;\r\nimport java.util.Collection;\r\nimport java.util.HashMap;\r\nimport java.util.Map;\r\nimport static net.virtualinfinity.atrobots.atsetup.AtRobotInterrupt.*;\r\n\r\n/**\r\n * Creates built-in interrupt handlers for the standard AT-Robots set up.\r\n *\r\n * @author Daniel Pitts\r\n */\r\npublic class AtRobotInterruptFactory {\r\n\r\n    private InterruptHandler createResetMetersInterrupt(Robot robot) {\r\n        return new ResetMetersInterrupt(getRegisters(robot).getMeters(), robot.getOdometer());\r\n    }\r\n\r\n    private InterruptHandler createGetRobotStatisticsInterrupt(Robot robot) {\r\n        return robot.createGetRobotStatisticsInterrupt(getDxCell(robot), getExCell(robot), getFxCell(robot));\r\n    }\r\n\r\n    private MemoryCell getDxCell(Robot robot) {\r\n        return getRegisters(robot).getDx();\r\n    }\r\n\r\n    private InterruptHandler createResetQueueInterrupt(Robot robot) {\r\n        return new ZeroMemoryCellsInterrupt(getRegisters(robot).getCommunicationQueueHead(), getRegisters(robot).getCommunicationQueueTail());\r\n    }\r\n\r\n    private InterruptHandler createGetQueueSizeInterrupt(Robot robot) {\r\n        return new GetQueueSizeInterrupt(robot.getComputer().getCommQueue(), getFxCell(robot));\r\n    }\r\n\r\n    private InterruptHandler createRecieveInterrupt(Robot robot) {\r\n        return new ReceiveInterrupt(robot.getComputer().getCommQueue(), getFxCell(robot));\r\n    }\r\n\r\n    private InterruptHandler createTransmitInterrupt(Robot robot) {\r\n        return new TransmitInterrupt(robot.getTransceiver(), getAxCell(robot));\r\n    }\r\n\r\n    private InterruptHandler createResetCollisionCountInterrupt(Robot robot) {\r\n        return new ZeroMemoryCellsInterrupt(getRegisters(robot).getCollisionCount());\r\n    }\r\n\r\n    private InterruptHandler createGetCollisionsInterrupt(Robot robot) {\r\n        return new CopyMemoryCellsInterrupt(getRegisters(robot).getCollisionCount(), getFxCell(robot));\r\n    }\r\n\r\n    private InterruptHandler createGetRobotInfoInterrupt(Robot robot) {\r\n        return robot.createGetRobotInfoInterruptHandler(getDxCell(robot), getExCell(robot), getFxCell(robot));\r\n    }\r\n\r\n    private InterruptHandler createGetGameInfoInterrupt(Robot robot, Arena arena, RoundState roundState) {\r\n        return new GetGameInfoInterrupt(getDxCell(robot), getExCell(robot), getFxCell(robot), roundState.getTotalRounds(), roundState.getRoundNumber(), arena);\r\n    }\r\n\r\n    private InterruptHandler createGetTargetInfoInterrupt(Robot robot) {\r\n        return new CopyMemoryCellsInterrupt(getRegisters(robot).getTargetHeading(), getExCell(robot), getRegisters(robot).getTargetThrottle(), getFxCell(robot));\r\n    }\r\n\r\n    private InterruptHandler createGetTargetIdInterrupt(Robot robot) {\r\n        return new CopyMemoryCellsInterrupt(getRegisters(robot).getTargetId(), getFxCell(robot));\r\n    }\r\n\r\n    private InterruptHandler createFindAngleInterrupt(Robot robot) {\r\n        return new FindAngleInterrupt(getExCell(robot), getFxCell(robot), getAxCell(robot), robot);\r\n    }\r\n\r\n    private MemoryCell getAxCell(Robot robot) {\r\n        return getRegisters(robot).getAx();\r\n    }\r\n\r\n    private InterruptHandler createGetTimerInterrupt(Robot robot, RoundTimer roundTimer) {\r\n        return new GetTimerInterrupt(getExCell(robot), getFxCell(robot), roundTimer);\r\n    }\r\n\r\n    private InterruptHandler createGetTransponderIdInterrupt(Robot robot) {\r\n        return new GetIdInterrupt(robot.getTransponder(), getFxCell(robot));\r\n    }\r\n\r\n    private InterruptHandler createOverburnInterrupt(Robot robot) {\r\n        return new OverburnInterrupt(robot, getAxCell(robot));\r\n    }\r\n\r\n    private InterruptHandler createSetKeepshiftInterrupt(Robot robot) {\r\n        return new SetKeepshiftInterrupt(robot.getTurret(), getAxCell(robot));\r\n    }\r\n\r\n    private InterruptHandler createLocateInterrupt(Robot robot) {\r\n        return new LocateInterrupt(robot, getExCell(robot), getFxCell(robot));\r\n    }\r\n\r\n    private MemoryCell getFxCell(Robot robot) {\r\n        return getRegisters(robot).getFx();\r\n    }\r\n\r\n    private MemoryCell getExCell(Robot robot) {\r\n        return getRegisters(robot).getEx();\r\n    }\r\n\r\n    private Registers getRegisters(Robot robot) {\r\n        return robot.getComputer().getRegisters();\r\n    }\r\n\r\n    private InterruptHandler createResetInterrupt(Robot robot) {\r\n        return new ResetInterrupt(robot.getComputer());\r\n    }\r\n\r\n    private InterruptHandler createDestructInterrupt(Destructable destructable) {\r\n        return new DestructInterrupt(destructable);\r\n    }\r\n\r\n    InvalidInterrupt createInvalidInterrupt(Robot robot) {\r\n        return new InvalidInterrupt(robot.getComputer());\r\n    }\r\n\r\n    public Map<Integer, InterruptHandler> createInterruptTable(Robot robot, Arena arena, RoundState roundState) {\r\n        Map<Integer, InterruptHandler> interrupts = new HashMap<Integer, InterruptHandler>();\r\n        mapHandler(interrupts, DESTRUCT, createDestructInterrupt(robot));\r\n        mapHandler(interrupts, RESET, createResetInterrupt(robot).costs(10));\r\n        mapHandler(interrupts, LOCATE, createLocateInterrupt(robot).costs(5));\r\n        mapHandler(interrupts, KEEPSHIFT, createSetKeepshiftInterrupt(robot).costs(2));\r\n        mapHandler(interrupts, OVERBURN, createOverburnInterrupt(robot).costs(1));\r\n        mapHandler(interrupts, ID, createGetTransponderIdInterrupt(robot).costs(2));\r\n        mapHandler(interrupts, TIMER, createGetTimerInterrupt(robot, arena.getRoundTimer()).costs(2));\r\n        mapHandler(interrupts, ANGLE, createFindAngleInterrupt(robot).costs(32));\r\n        mapHandler(interrupts, TARGETID, createGetTargetIdInterrupt(robot).costs(1));\r\n        mapHandler(interrupts, TARGETINFO, createGetTargetInfoInterrupt(robot).costs(2));\r\n        mapHandler(interrupts, GAMEINFO, createGetGameInfoInterrupt(robot, arena, roundState).costs(4));\r\n        mapHandler(interrupts, ROBOTINFO, createGetRobotInfoInterrupt(robot).costs(5));\r\n        mapHandler(interrupts, COLLISIONS, createGetCollisionsInterrupt(robot).costs(1));\r\n        mapHandler(interrupts, RESETCOLCNT, createResetCollisionCountInterrupt(robot).costs(1));\r\n        mapHandler(interrupts, TRANSMIT, createTransmitInterrupt(robot).costs(1));\r\n        mapHandler(interrupts, RECEIVE, createRecieveInterrupt(robot).costs(1));\r\n        mapHandler(interrupts, DATAREADY, createGetQueueSizeInterrupt(robot).costs(1));\r\n        mapHandler(interrupts, CLEARCOM, createResetQueueInterrupt(robot).costs(1));\r\n        mapHandler(interrupts, KILLS, createGetRobotStatisticsInterrupt(robot).costs(3));\r\n        mapHandler(interrupts, CLEARMETERS, createResetMetersInterrupt(robot).costs(1));\r\n        connectHandlers(robot, interrupts.values());\r\n        return new MapWithDefaultValue<Integer, InterruptHandler>(interrupts, createInvalidInterrupt(robot));\r\n    }\r\n\r\n    private void mapHandler(Map<Integer, InterruptHandler> interrupts, AtRobotInterrupt interrupt, InterruptHandler handler) {\r\n        interrupts.put(interrupt.interruptNumber, handler);\r\n    }\r\n\r\n    private void connectHandlers(Robot robot, Collection<InterruptHandler> interruptHandlers) {\r\n        for (InterruptHandler handler : interruptHandlers) {\r\n            handler.setCycleSource(robot.getComputer());\r\n        }\r\n    }\r\n}\r\n",
		"id": "EvoSuiteBenchmark/86_at-robots2-j/src/main/java/net/virtualinfinity/atrobots/compiler/AtRobotInterruptFactoryTest.java",
		"test_prompt": "// AtRobotInterruptFactoryTest.java\npackage net.virtualinfinity.atrobots.compiler;\n\nimport net.virtualinfinity.atrobots.arena.Arena;\nimport net.virtualinfinity.atrobots.arena.RoundState;\nimport net.virtualinfinity.atrobots.arena.RoundTimer;\nimport net.virtualinfinity.atrobots.atsetup.AtRobotInterrupt;\nimport net.virtualinfinity.atrobots.computer.InterruptHandler;\nimport net.virtualinfinity.atrobots.computer.MemoryCell;\nimport net.virtualinfinity.atrobots.computer.Registers;\nimport net.virtualinfinity.atrobots.interrupts.*;\nimport net.virtualinfinity.atrobots.robot.Robot;\nimport net.virtualinfinity.atrobots.util.MapWithDefaultValue;\nimport java.util.Collection;\nimport java.util.HashMap;\nimport java.util.Map;\nimport static net.virtualinfinity.atrobots.atsetup.AtRobotInterrupt.*;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link AtRobotInterruptFactory}.\n* It contains ten unit test cases for the {@link AtRobotInterruptFactory#createInterruptTable(Robot, Arena, RoundState)} method.\n*/\nclass AtRobotInterruptFactoryTest {"
	},
	{
		"original_code": "// RobotFactory.java\npackage net.virtualinfinity.atrobots.compiler;\n\nimport net.virtualinfinity.atrobots.arena.Arena;\nimport net.virtualinfinity.atrobots.arena.RoundState;\nimport net.virtualinfinity.atrobots.computer.*;\nimport net.virtualinfinity.atrobots.debugger.*;\nimport net.virtualinfinity.atrobots.robot.Robot;\nimport net.virtualinfinity.atrobots.robot.RobotScoreKeeper;\n\n/**\n * Represents an entrant in a game.\n *\n * @author Daniel Pitts\n */\npublic class RobotFactory {\n\n    private static final int ROBOT_STACK_SIZE = 256;\n\n    private static final int LOWER_MEMORY_BLOCK_SIZE = 1024;\n\n    private static final Debugger DEBUGGER = DebugConsole.create(RobotFactory.getSystemConsole()).getDebugger();\n\n    protected final String name;\n\n    protected final Program program;\n\n    protected final HardwareSpecification hardwareSpecification;\n\n    protected final DebugInfo debugInfo;\n\n    protected final int maxProcessorSpeed;\n\n    protected final String message;\n\n    private volatile boolean debug;\n\n    public RobotFactory(String name, Program program, HardwareSpecification hardwareSpecification, DebugInfo debugInfo, int maxProcessorSpeed, String message) {\n        this.message = message;\n        this.program = program;\n        this.name = name;\n        this.maxProcessorSpeed = maxProcessorSpeed;\n        this.debugInfo = debugInfo;\n        this.hardwareSpecification = hardwareSpecification;\n    }\n\n    private static Console getSystemConsole() {\n        return new ConsoleImpl(new ReaderConsoleInput(System.in), new PrintStreamConsoleOutput(System.out), new PrintStreamConsoleOutput(System.err));\n    }\n\n    /**\n     * Create a robot.\n     *\n     * @param roundState\n     * @param maxProcessorSpeed\n     * @param robotScoreKeeper\n     * @param arena\n     * @param robotId\n     * @return the robot to enter.\n     */\n    public Robot createRobot(RoundState roundState, int maxProcessorSpeed, RobotScoreKeeper robotScoreKeeper, Arena arena, int robotId) {\n        final Robot robot = new Robot(name, robotId, robotScoreKeeper);\n        robot.addRobotListener(robotScoreKeeper);\n        final RandomAccessMemoryArray lowerMemoryBlock = new RandomAccessMemoryArray(LOWER_MEMORY_BLOCK_SIZE);\n        robot.setComputer(createComputer(lowerMemoryBlock, maxProcessorSpeed));\n        final RobotConfigurer robotConfigurer = new RobotConfigurer();\n        robotConfigurer.setRobot(robot);\n        hardwareSpecification.buildRobotConfigurer(robotConfigurer);\n        robotConfigurer.setLowerMemoryArray(lowerMemoryBlock);\n        robotConfigurer.wireRobotComponents(arena, roundState);\n        if (debug) {\n            robot.getComputer().setDebugListener(DEBUGGER);\n        }\n        return robot;\n    }\n\n    private Computer createComputer(RandomAccessMemoryArray lowerMemoryBlock, int maxProcessorSpeed) {\n        return new Computer(createMemory(lowerMemoryBlock), ROBOT_STACK_SIZE, getProcessorSpeed(maxProcessorSpeed), debugInfo);\n    }\n\n    private Memory createMemory(RandomAccessMemoryArray lowerMemoryBlock) {\n        final Memory memory = new Memory();\n        memory.addMemoryArray(lowerMemoryBlock);\n        memory.addMemoryArray(program.createProgramMemory());\n        return memory;\n    }\n\n    private int getProcessorSpeed(int maxProcessorSpeed) {\n        return Math.max(this.maxProcessorSpeed, maxProcessorSpeed);\n    }\n\n    public RobotFactory setDebug(boolean debug) {\n        this.debug = debug;\n        return this;\n    }\n\n    public String getName() {\n        return name;\n    }\n\n    @Override\n    public String toString() {\n        return \"RobotFactory{\" + \"name='\" + name + '\\'' + '}';\n    }\n}\n",
		"id": "EvoSuiteBenchmark/86_at-robots2-j/src/main/java/net/virtualinfinity/atrobots/compiler/RobotFactoryTest.java",
		"test_prompt": "// RobotFactoryTest.java\npackage net.virtualinfinity.atrobots.compiler;\n\nimport net.virtualinfinity.atrobots.arena.Arena;\nimport net.virtualinfinity.atrobots.arena.RoundState;\nimport net.virtualinfinity.atrobots.computer.*;\nimport net.virtualinfinity.atrobots.debugger.*;\nimport net.virtualinfinity.atrobots.robot.Robot;\nimport net.virtualinfinity.atrobots.robot.RobotScoreKeeper;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link RobotFactory}.\n* It contains ten unit test cases for the {@link RobotFactory#createRobot(RoundState, int, RobotScoreKeeper, Arena, int)} method.\n*/\nclass RobotFactoryTest {"
	},
	{
		"original_code": "// AtRobotPortFactory.java\npackage net.virtualinfinity.atrobots.compiler;\r\n\r\nimport net.virtualinfinity.atrobots.arena.Heading;\r\nimport net.virtualinfinity.atrobots.atsetup.AtRobotPort;\r\nimport net.virtualinfinity.atrobots.hardware.HasHeading;\r\nimport net.virtualinfinity.atrobots.hardware.transponder.Transponder;\r\nimport net.virtualinfinity.atrobots.measures.Heat;\r\nimport net.virtualinfinity.atrobots.measures.RelativeAngle;\r\nimport net.virtualinfinity.atrobots.ports.PortHandler;\r\nimport net.virtualinfinity.atrobots.ports.PortListener;\r\nimport net.virtualinfinity.atrobots.robot.Robot;\r\nimport net.virtualinfinity.atrobots.util.MapWithDefaultValue;\r\nimport java.util.*;\r\nimport static net.virtualinfinity.atrobots.atsetup.AtRobotPort.*;\r\n\r\n/**\r\n * Creates the port mapping for a standard AT-Robot configuration.\r\n *\r\n * @author Daniel Pitts\r\n */\r\npublic class AtRobotPortFactory {\r\n\r\n    public static PortHandler getCompass(final Heading heading) {\r\n        return new PortHandler() {\r\n\r\n            public short read() {\r\n                return (short) heading.getAngle().getBygrees();\r\n            }\r\n        };\r\n    }\r\n\r\n    public static PortHandler getRotationPort(final Heading heading) {\r\n        return new PortHandler() {\r\n\r\n            public void write(short value) {\r\n                heading.rotate(RelativeAngle.fromBygrees(value));\r\n            }\r\n        };\r\n    }\r\n\r\n    public Map<Integer, PortHandler> createPortHandlers(Robot robot) {\r\n        final Map<Integer, PortHandler> ports = new HashMap<Integer, PortHandler>();\r\n        mapPort(ports, SPEDOMETER, robot.getThrottle().getSpedometer());\r\n        mapPort(ports, HEAT, getTemperatureSensor(robot.getHeatSinks()));\r\n        mapPort(ports, COMPASS, getCompass(robot));\r\n        mapPort(ports, TURRET_OFS, robot.getTurretOffsetSensor());\r\n        mapPort(ports, TURRET_ABS, getCompass(robot.getTurret()));\r\n        mapPort(ports, DAMAGE, robot.getArmor().getSensor());\r\n        mapPort(ports, SCAN, robot.getTurret().getScanner().getScanPort());\r\n        mapPort(ports, ACCURACY, robot.getTurret().getScanner().getAccuracyPort());\r\n        mapPort(ports, RADAR, robot.getRadar().getScanPort());\r\n        mapPort(ports, RANDOM, createRandomNumberGenerator());\r\n        mapPort(ports, THROTTLE, robot.getThrottle().getActuator());\r\n        mapPort(ports, OFS_TURRET, getRotationPort(robot.getTurret().getHeading()));\r\n        mapPort(ports, ABS_TURRET, robot.getAimTurretPort());\r\n        mapPort(ports, STEERING, getRotationPort(robot.getDesiredHeading()));\r\n        mapPort(ports, WEAP, robot.getTurret().getMissileLauncher().getActuator());\r\n        mapPort(ports, SONAR, robot.getSonar().getScanPort());\r\n        mapPort(ports, ARC, robot.getTurret().getScanner().getScanArcLatchPort());\r\n        mapPort(ports, OVERBURN, robot.getOverburnLatchPort());\r\n        mapPort(ports, TRANSPONDER, getTransponderLatchPort(robot.getTransponder()));\r\n        mapPort(ports, SHUTDOWN, robot.getShutdownLevelLatchPort());\r\n        mapPort(ports, CHANNEL, robot.getTransceiver().getChannelLatchPort());\r\n        mapPort(ports, MINELAYER, robot.getMineLayer().getMineBayPort());\r\n        mapPort(ports, MINETRIGGER, robot.getMineLayer().getPlacedMinePort());\r\n        mapPort(ports, SHIELD, robot.getShield().getLatch());\r\n        connectPortHandlers(ports.values(), robot.getComputer());\r\n        return new MapWithDefaultValue<Integer, PortHandler>(Collections.unmodifiableMap(ports), robot.getComputer().createDefaultPortHandler());\r\n    }\r\n\r\n    private PortHandler getTransponderLatchPort(final Transponder transponder) {\r\n        return new PortHandler() {\r\n\r\n            public short read() {\r\n                return (short) transponder.getId();\r\n            }\r\n\r\n            public void write(short value) {\r\n                transponder.setId(value);\r\n            }\r\n        };\r\n    }\r\n\r\n    private PortHandler getTemperatureSensor(final Heat heat) {\r\n        return new PortHandler() {\r\n\r\n            public short read() {\r\n                return (short) heat.getTemperature().getLogScale();\r\n            }\r\n        };\r\n    }\r\n\r\n    private PortHandler getCompass(HasHeading hasHeading) {\r\n        return getCompass(hasHeading.getHeading());\r\n    }\r\n\r\n    private void connectPortHandlers(Collection<PortHandler> collection, PortListener portListener) {\r\n        for (PortHandler handler : collection) {\r\n            handler.setPortListener(portListener);\r\n        }\r\n    }\r\n\r\n    private void mapPort(Map<Integer, PortHandler> ports, AtRobotPort port, PortHandler portHandler) {\r\n        ports.put(port.portNumber, portHandler);\r\n    }\r\n\r\n    private PortHandler createRandomNumberGenerator() {\r\n        return new PortHandler() {\r\n\r\n            private final Random random = new Random();\r\n\r\n            public short read() {\r\n                return (short) random.nextInt();\r\n            }\r\n        };\r\n    }\r\n}\r\n",
		"id": "EvoSuiteBenchmark/86_at-robots2-j/src/main/java/net/virtualinfinity/atrobots/compiler/AtRobotPortFactoryTest0.java",
		"test_prompt": "// AtRobotPortFactoryTest0.java\npackage net.virtualinfinity.atrobots.compiler;\n\nimport net.virtualinfinity.atrobots.arena.Heading;\nimport net.virtualinfinity.atrobots.atsetup.AtRobotPort;\nimport net.virtualinfinity.atrobots.hardware.HasHeading;\nimport net.virtualinfinity.atrobots.hardware.transponder.Transponder;\nimport net.virtualinfinity.atrobots.measures.Heat;\nimport net.virtualinfinity.atrobots.measures.RelativeAngle;\nimport net.virtualinfinity.atrobots.ports.PortHandler;\nimport net.virtualinfinity.atrobots.ports.PortListener;\nimport net.virtualinfinity.atrobots.robot.Robot;\nimport net.virtualinfinity.atrobots.util.MapWithDefaultValue;\nimport java.util.*;\nimport static net.virtualinfinity.atrobots.atsetup.AtRobotPort.*;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link AtRobotPortFactory}.\n* It contains ten unit test cases for the {@link AtRobotPortFactory#getCompass(Heading)} method.\n*/\nclass AtRobotPortFactoryTest0 {"
	},
	{
		"original_code": "// AtRobotPortFactory.java\npackage net.virtualinfinity.atrobots.compiler;\r\n\r\nimport net.virtualinfinity.atrobots.arena.Heading;\r\nimport net.virtualinfinity.atrobots.atsetup.AtRobotPort;\r\nimport net.virtualinfinity.atrobots.hardware.HasHeading;\r\nimport net.virtualinfinity.atrobots.hardware.transponder.Transponder;\r\nimport net.virtualinfinity.atrobots.measures.Heat;\r\nimport net.virtualinfinity.atrobots.measures.RelativeAngle;\r\nimport net.virtualinfinity.atrobots.ports.PortHandler;\r\nimport net.virtualinfinity.atrobots.ports.PortListener;\r\nimport net.virtualinfinity.atrobots.robot.Robot;\r\nimport net.virtualinfinity.atrobots.util.MapWithDefaultValue;\r\nimport java.util.*;\r\nimport static net.virtualinfinity.atrobots.atsetup.AtRobotPort.*;\r\n\r\n/**\r\n * Creates the port mapping for a standard AT-Robot configuration.\r\n *\r\n * @author Daniel Pitts\r\n */\r\npublic class AtRobotPortFactory {\r\n\r\n    public static PortHandler getCompass(final Heading heading) {\r\n        return new PortHandler() {\r\n\r\n            public short read() {\r\n                return (short) heading.getAngle().getBygrees();\r\n            }\r\n        };\r\n    }\r\n\r\n    public static PortHandler getRotationPort(final Heading heading) {\r\n        return new PortHandler() {\r\n\r\n            public void write(short value) {\r\n                heading.rotate(RelativeAngle.fromBygrees(value));\r\n            }\r\n        };\r\n    }\r\n\r\n    public Map<Integer, PortHandler> createPortHandlers(Robot robot) {\r\n        final Map<Integer, PortHandler> ports = new HashMap<Integer, PortHandler>();\r\n        mapPort(ports, SPEDOMETER, robot.getThrottle().getSpedometer());\r\n        mapPort(ports, HEAT, getTemperatureSensor(robot.getHeatSinks()));\r\n        mapPort(ports, COMPASS, getCompass(robot));\r\n        mapPort(ports, TURRET_OFS, robot.getTurretOffsetSensor());\r\n        mapPort(ports, TURRET_ABS, getCompass(robot.getTurret()));\r\n        mapPort(ports, DAMAGE, robot.getArmor().getSensor());\r\n        mapPort(ports, SCAN, robot.getTurret().getScanner().getScanPort());\r\n        mapPort(ports, ACCURACY, robot.getTurret().getScanner().getAccuracyPort());\r\n        mapPort(ports, RADAR, robot.getRadar().getScanPort());\r\n        mapPort(ports, RANDOM, createRandomNumberGenerator());\r\n        mapPort(ports, THROTTLE, robot.getThrottle().getActuator());\r\n        mapPort(ports, OFS_TURRET, getRotationPort(robot.getTurret().getHeading()));\r\n        mapPort(ports, ABS_TURRET, robot.getAimTurretPort());\r\n        mapPort(ports, STEERING, getRotationPort(robot.getDesiredHeading()));\r\n        mapPort(ports, WEAP, robot.getTurret().getMissileLauncher().getActuator());\r\n        mapPort(ports, SONAR, robot.getSonar().getScanPort());\r\n        mapPort(ports, ARC, robot.getTurret().getScanner().getScanArcLatchPort());\r\n        mapPort(ports, OVERBURN, robot.getOverburnLatchPort());\r\n        mapPort(ports, TRANSPONDER, getTransponderLatchPort(robot.getTransponder()));\r\n        mapPort(ports, SHUTDOWN, robot.getShutdownLevelLatchPort());\r\n        mapPort(ports, CHANNEL, robot.getTransceiver().getChannelLatchPort());\r\n        mapPort(ports, MINELAYER, robot.getMineLayer().getMineBayPort());\r\n        mapPort(ports, MINETRIGGER, robot.getMineLayer().getPlacedMinePort());\r\n        mapPort(ports, SHIELD, robot.getShield().getLatch());\r\n        connectPortHandlers(ports.values(), robot.getComputer());\r\n        return new MapWithDefaultValue<Integer, PortHandler>(Collections.unmodifiableMap(ports), robot.getComputer().createDefaultPortHandler());\r\n    }\r\n\r\n    private PortHandler getTransponderLatchPort(final Transponder transponder) {\r\n        return new PortHandler() {\r\n\r\n            public short read() {\r\n                return (short) transponder.getId();\r\n            }\r\n\r\n            public void write(short value) {\r\n                transponder.setId(value);\r\n            }\r\n        };\r\n    }\r\n\r\n    private PortHandler getTemperatureSensor(final Heat heat) {\r\n        return new PortHandler() {\r\n\r\n            public short read() {\r\n                return (short) heat.getTemperature().getLogScale();\r\n            }\r\n        };\r\n    }\r\n\r\n    private PortHandler getCompass(HasHeading hasHeading) {\r\n        return getCompass(hasHeading.getHeading());\r\n    }\r\n\r\n    private void connectPortHandlers(Collection<PortHandler> collection, PortListener portListener) {\r\n        for (PortHandler handler : collection) {\r\n            handler.setPortListener(portListener);\r\n        }\r\n    }\r\n\r\n    private void mapPort(Map<Integer, PortHandler> ports, AtRobotPort port, PortHandler portHandler) {\r\n        ports.put(port.portNumber, portHandler);\r\n    }\r\n\r\n    private PortHandler createRandomNumberGenerator() {\r\n        return new PortHandler() {\r\n\r\n            private final Random random = new Random();\r\n\r\n            public short read() {\r\n                return (short) random.nextInt();\r\n            }\r\n        };\r\n    }\r\n}\r\n",
		"id": "EvoSuiteBenchmark/86_at-robots2-j/src/main/java/net/virtualinfinity/atrobots/compiler/AtRobotPortFactoryTest1.java",
		"test_prompt": "// AtRobotPortFactoryTest1.java\npackage net.virtualinfinity.atrobots.compiler;\n\nimport net.virtualinfinity.atrobots.arena.Heading;\nimport net.virtualinfinity.atrobots.atsetup.AtRobotPort;\nimport net.virtualinfinity.atrobots.hardware.HasHeading;\nimport net.virtualinfinity.atrobots.hardware.transponder.Transponder;\nimport net.virtualinfinity.atrobots.measures.Heat;\nimport net.virtualinfinity.atrobots.measures.RelativeAngle;\nimport net.virtualinfinity.atrobots.ports.PortHandler;\nimport net.virtualinfinity.atrobots.ports.PortListener;\nimport net.virtualinfinity.atrobots.robot.Robot;\nimport net.virtualinfinity.atrobots.util.MapWithDefaultValue;\nimport java.util.*;\nimport static net.virtualinfinity.atrobots.atsetup.AtRobotPort.*;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link AtRobotPortFactory}.\n* It contains ten unit test cases for the {@link AtRobotPortFactory#getRotationPort(Heading)} method.\n*/\nclass AtRobotPortFactoryTest1 {"
	},
	{
		"original_code": "// AtRobotPortFactory.java\npackage net.virtualinfinity.atrobots.compiler;\r\n\r\nimport net.virtualinfinity.atrobots.arena.Heading;\r\nimport net.virtualinfinity.atrobots.atsetup.AtRobotPort;\r\nimport net.virtualinfinity.atrobots.hardware.HasHeading;\r\nimport net.virtualinfinity.atrobots.hardware.transponder.Transponder;\r\nimport net.virtualinfinity.atrobots.measures.Heat;\r\nimport net.virtualinfinity.atrobots.measures.RelativeAngle;\r\nimport net.virtualinfinity.atrobots.ports.PortHandler;\r\nimport net.virtualinfinity.atrobots.ports.PortListener;\r\nimport net.virtualinfinity.atrobots.robot.Robot;\r\nimport net.virtualinfinity.atrobots.util.MapWithDefaultValue;\r\nimport java.util.*;\r\nimport static net.virtualinfinity.atrobots.atsetup.AtRobotPort.*;\r\n\r\n/**\r\n * Creates the port mapping for a standard AT-Robot configuration.\r\n *\r\n * @author Daniel Pitts\r\n */\r\npublic class AtRobotPortFactory {\r\n\r\n    public static PortHandler getCompass(final Heading heading) {\r\n        return new PortHandler() {\r\n\r\n            public short read() {\r\n                return (short) heading.getAngle().getBygrees();\r\n            }\r\n        };\r\n    }\r\n\r\n    public static PortHandler getRotationPort(final Heading heading) {\r\n        return new PortHandler() {\r\n\r\n            public void write(short value) {\r\n                heading.rotate(RelativeAngle.fromBygrees(value));\r\n            }\r\n        };\r\n    }\r\n\r\n    public Map<Integer, PortHandler> createPortHandlers(Robot robot) {\r\n        final Map<Integer, PortHandler> ports = new HashMap<Integer, PortHandler>();\r\n        mapPort(ports, SPEDOMETER, robot.getThrottle().getSpedometer());\r\n        mapPort(ports, HEAT, getTemperatureSensor(robot.getHeatSinks()));\r\n        mapPort(ports, COMPASS, getCompass(robot));\r\n        mapPort(ports, TURRET_OFS, robot.getTurretOffsetSensor());\r\n        mapPort(ports, TURRET_ABS, getCompass(robot.getTurret()));\r\n        mapPort(ports, DAMAGE, robot.getArmor().getSensor());\r\n        mapPort(ports, SCAN, robot.getTurret().getScanner().getScanPort());\r\n        mapPort(ports, ACCURACY, robot.getTurret().getScanner().getAccuracyPort());\r\n        mapPort(ports, RADAR, robot.getRadar().getScanPort());\r\n        mapPort(ports, RANDOM, createRandomNumberGenerator());\r\n        mapPort(ports, THROTTLE, robot.getThrottle().getActuator());\r\n        mapPort(ports, OFS_TURRET, getRotationPort(robot.getTurret().getHeading()));\r\n        mapPort(ports, ABS_TURRET, robot.getAimTurretPort());\r\n        mapPort(ports, STEERING, getRotationPort(robot.getDesiredHeading()));\r\n        mapPort(ports, WEAP, robot.getTurret().getMissileLauncher().getActuator());\r\n        mapPort(ports, SONAR, robot.getSonar().getScanPort());\r\n        mapPort(ports, ARC, robot.getTurret().getScanner().getScanArcLatchPort());\r\n        mapPort(ports, OVERBURN, robot.getOverburnLatchPort());\r\n        mapPort(ports, TRANSPONDER, getTransponderLatchPort(robot.getTransponder()));\r\n        mapPort(ports, SHUTDOWN, robot.getShutdownLevelLatchPort());\r\n        mapPort(ports, CHANNEL, robot.getTransceiver().getChannelLatchPort());\r\n        mapPort(ports, MINELAYER, robot.getMineLayer().getMineBayPort());\r\n        mapPort(ports, MINETRIGGER, robot.getMineLayer().getPlacedMinePort());\r\n        mapPort(ports, SHIELD, robot.getShield().getLatch());\r\n        connectPortHandlers(ports.values(), robot.getComputer());\r\n        return new MapWithDefaultValue<Integer, PortHandler>(Collections.unmodifiableMap(ports), robot.getComputer().createDefaultPortHandler());\r\n    }\r\n\r\n    private PortHandler getTransponderLatchPort(final Transponder transponder) {\r\n        return new PortHandler() {\r\n\r\n            public short read() {\r\n                return (short) transponder.getId();\r\n            }\r\n\r\n            public void write(short value) {\r\n                transponder.setId(value);\r\n            }\r\n        };\r\n    }\r\n\r\n    private PortHandler getTemperatureSensor(final Heat heat) {\r\n        return new PortHandler() {\r\n\r\n            public short read() {\r\n                return (short) heat.getTemperature().getLogScale();\r\n            }\r\n        };\r\n    }\r\n\r\n    private PortHandler getCompass(HasHeading hasHeading) {\r\n        return getCompass(hasHeading.getHeading());\r\n    }\r\n\r\n    private void connectPortHandlers(Collection<PortHandler> collection, PortListener portListener) {\r\n        for (PortHandler handler : collection) {\r\n            handler.setPortListener(portListener);\r\n        }\r\n    }\r\n\r\n    private void mapPort(Map<Integer, PortHandler> ports, AtRobotPort port, PortHandler portHandler) {\r\n        ports.put(port.portNumber, portHandler);\r\n    }\r\n\r\n    private PortHandler createRandomNumberGenerator() {\r\n        return new PortHandler() {\r\n\r\n            private final Random random = new Random();\r\n\r\n            public short read() {\r\n                return (short) random.nextInt();\r\n            }\r\n        };\r\n    }\r\n}\r\n",
		"id": "EvoSuiteBenchmark/86_at-robots2-j/src/main/java/net/virtualinfinity/atrobots/compiler/AtRobotPortFactoryTest2.java",
		"test_prompt": "// AtRobotPortFactoryTest2.java\npackage net.virtualinfinity.atrobots.compiler;\n\nimport net.virtualinfinity.atrobots.arena.Heading;\nimport net.virtualinfinity.atrobots.atsetup.AtRobotPort;\nimport net.virtualinfinity.atrobots.hardware.HasHeading;\nimport net.virtualinfinity.atrobots.hardware.transponder.Transponder;\nimport net.virtualinfinity.atrobots.measures.Heat;\nimport net.virtualinfinity.atrobots.measures.RelativeAngle;\nimport net.virtualinfinity.atrobots.ports.PortHandler;\nimport net.virtualinfinity.atrobots.ports.PortListener;\nimport net.virtualinfinity.atrobots.robot.Robot;\nimport net.virtualinfinity.atrobots.util.MapWithDefaultValue;\nimport java.util.*;\nimport static net.virtualinfinity.atrobots.atsetup.AtRobotPort.*;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link AtRobotPortFactory}.\n* It contains ten unit test cases for the {@link AtRobotPortFactory#createPortHandlers(Robot)} method.\n*/\nclass AtRobotPortFactoryTest2 {"
	},
	{
		"original_code": "// LineNumberReaderCompiler.java\npackage net.virtualinfinity.atrobots.compiler;\r\n\r\nimport net.virtualinfinity.atrobots.atsetup.*;\r\nimport net.virtualinfinity.atrobots.computer.DebugInfo;\r\nimport net.virtualinfinity.atrobots.computer.Program;\r\nimport java.io.IOException;\r\nimport java.io.LineNumberReader;\r\nimport java.util.*;\r\n\r\n/**\r\n * A line-lexer visiter which creates a compiled output.\r\n *\r\n * @author Daniel Pitts\r\n */\r\npublic class LineNumberReaderCompiler {\r\n\r\n    private final Errors errors = new Errors();\r\n\r\n    private final List<Short> programCode = new ArrayList<Short>();\r\n\r\n    private final Map<String, Symbol> symbols = new HashMap<String, Symbol>();\r\n\r\n    private final Collection<UnresolvedToken> unresolved = new ArrayList<UnresolvedToken>();\r\n\r\n    private final Map<String, Integer> configs = new HashMap<String, Integer>();\r\n\r\n    private final List<String> lines = new ArrayList<String>();\r\n\r\n    private final List<Integer> instructionLineNumber = new ArrayList<Integer>();\r\n\r\n    private final DebugInfo debugInfo = new DebugInfo();\r\n\r\n    private int variables;\r\n\r\n    private String message = \"\";\r\n\r\n    private int maxProcessorSpeed;\r\n\r\n    {\r\n        setConfig(HardwareSpecification.SCANNER, 5);\r\n        setConfig(HardwareSpecification.WEAPON, 2);\r\n        setConfig(HardwareSpecification.ARMOR, 2);\r\n        setConfig(HardwareSpecification.ENGINE, 2);\r\n        setConfig(HardwareSpecification.HEATSINKS, 1);\r\n        setConfig(HardwareSpecification.MINES, 0);\r\n        setConfig(HardwareSpecification.SHIELD, 0);\r\n    }\r\n\r\n    private static final int BUILT_IN_SYMBOL_LINENUMBER = -1;\r\n\r\n    private LineVisitor createLineVisitor() {\r\n        return new MyLineVisitor();\r\n    }\r\n\r\n    public AtRobotCompilerOutput compile(LineNumberReader reader) throws IOException {\r\n        createLineLexer(reader).visitAllLines();\r\n        resolve();\r\n        return createCompilerOutput();\r\n    }\r\n\r\n    private AtRobotLineLexer createLineLexer(LineNumberReader reader) {\r\n        return new AtRobotLineLexer(reader, createLineVisitor());\r\n    }\r\n\r\n    {\r\n        addConstant(Short.MAX_VALUE, \"MAXINT\", BUILT_IN_SYMBOL_LINENUMBER);\r\n        addConstant(Short.MIN_VALUE, \"MININT\", BUILT_IN_SYMBOL_LINENUMBER);\r\n        addConstants(AtRobotPort.values(), AtRobotMicrocodes.CONSTANT);\r\n        addConstants(AtRobotInstruction.values(), AtRobotMicrocodes.CONSTANT);\r\n        addConstants(AtRobotInterrupt.values(), AtRobotMicrocodes.CONSTANT);\r\n        addConstants(AtRobotRegister.values(), AtRobotMicrocodes.REFERENCE);\r\n    }\r\n\r\n    private void addConstants(AtRobotSymbol[] values, short microcode) {\r\n        for (AtRobotSymbol symbol : values) {\r\n            for (String name : symbol.getSymbolNames()) {\r\n                addSymbol(name, microcode, symbol.getSymbolValue(), BUILT_IN_SYMBOL_LINENUMBER);\r\n            }\r\n        }\r\n    }\r\n\r\n    private class MyLineVisitor implements LineVisitor {\r\n\r\n        public void expectedDigit(int column, int lineNumber) {\r\n            errors.add(\"Expected digit.\", lineNumber, column);\r\n        }\r\n\r\n        public void expectedDirectiveName(int column, int lineNumber) {\r\n            errors.add(\"Expected directive.\", lineNumber, column);\r\n        }\r\n\r\n        public void unexpectedCharacter(int column, int lineNumber) {\r\n            errors.add(\"Unexpected character\", lineNumber, column);\r\n        }\r\n\r\n        public void invalidVariableNameChar(int column, int lineNumber) {\r\n            errors.add(\"Invalid character in variable name\", lineNumber, column);\r\n        }\r\n\r\n        public void expectedDeviceName(int column, int lineNumber) {\r\n            errors.add(\"Expected device name\", lineNumber, column);\r\n        }\r\n\r\n        public void expectedMoreTokens(int lineNumber) {\r\n            errors.add(\"Expected more tokens on line\", lineNumber);\r\n        }\r\n\r\n        public void invalidNumber(int lineNumber) {\r\n            errors.add(\"Not a valid number\", lineNumber);\r\n        }\r\n\r\n        public void defineVariable(String variableName, int lineNumber) {\r\n            addReference(variables + 128, variableName, lineNumber);\r\n            variables++;\r\n        }\r\n\r\n        public void numberedLabel(int value, int lineNumber) {\r\n            programCode.add((short) value);\r\n            alignProgram();\r\n            programCode.set(programCode.size() - 1, AtRobotMicrocodes.NUMBERED_LABEL);\r\n            markLineNumber(lineNumber);\r\n        }\r\n\r\n        public void maxProcessorSpeed(int speed) {\r\n            maxProcessorSpeed = speed;\r\n        }\r\n\r\n        public void setMessage(String message) {\r\n            LineNumberReaderCompiler.this.message = message;\r\n        }\r\n\r\n        public void setConfig(String name, int value) {\r\n            LineNumberReaderCompiler.this.setConfig(name, value);\r\n        }\r\n\r\n        public void machineCode(int[] values, int lineNumber) {\r\n            for (int value : values) {\r\n                programCode.add((short) value);\r\n            }\r\n            alignProgram();\r\n            markLineNumber(lineNumber);\r\n        }\r\n\r\n        public void label(String label, int lineNumber) {\r\n            addSymbol(label, AtRobotMicrocodes.RESOLVED_LABEL, programCode.size() / 4, lineNumber);\r\n        }\r\n\r\n        public void tokenizedLine(List<Token> tokens, int lineNumber) {\r\n            addTokensToProgram(tokens);\r\n            alignProgram();\r\n            addMicrocodeToProgram(tokens);\r\n            markLineNumber(lineNumber);\r\n        }\r\n\r\n        public void unknownDirective(String directive, int lineNumber) {\r\n            errors.add(\"Unknown directive: #\" + directive, lineNumber);\r\n        }\r\n\r\n        public void appendRawLine(String line) {\r\n            lines.add(line);\r\n        }\r\n    }\r\n\r\n    private void setConfig(String name, int value) {\r\n        configs.put(name.toLowerCase(), value);\r\n    }\r\n\r\n    private void alignProgram() {\r\n        while (programCode.size() % 4 != 0) {\r\n            programCode.add((short) 0);\r\n        }\r\n    }\r\n\r\n    private void markLineNumber(int lineNumber) {\r\n        debugInfo.setLineForInstructionPointer(instructionLineNumber.size(), lineNumber + \": \" + lines.get(lines.size() - 1));\r\n        instructionLineNumber.add(lineNumber);\r\n    }\r\n\r\n    private void addSymbol(String name, short microcode, int value, int lineNumber) {\r\n        final String lowerCaseName = name.toLowerCase();\r\n        if (symbols.containsKey(lowerCaseName)) {\r\n            duplicateSymbol(lowerCaseName, symbols.get(lowerCaseName), lineNumber);\r\n        }\r\n        symbols.put(lowerCaseName, new Symbol(microcode, (short) value, lineNumber));\r\n        if (microcode == AtRobotMicrocodes.REFERENCE) {\r\n            debugInfo.addVariable(value, name);\r\n        }\r\n    }\r\n\r\n    public void resolve() {\r\n        int sum = 0;\r\n        for (int value : configs.values()) {\r\n            sum += value;\r\n        }\r\n        if (sum > 12) {\r\n            errors.info(\"Config points too high. \" + sum + \" out of a max of 12.\");\r\n        }\r\n        for (UnresolvedToken entry : unresolved) {\r\n            if (!entry.getToken().isUnresolved(symbols)) {\r\n                resolve(entry.getAddress(), entry.getToken());\r\n            } else {\r\n                errors.add(\"Unresolved symbol: \" + entry.getToken().toString(), entry.getToken().getLineNumber());\r\n            }\r\n        }\r\n    }\r\n\r\n    private Program createProgram() {\r\n        if (hasErrors()) {\r\n            return null;\r\n        } else {\r\n            return new Program(getProgramCode());\r\n        }\r\n    }\r\n\r\n    private HardwareSpecification createHardwareSpecification() {\r\n        if (hasErrors()) {\r\n            return null;\r\n        } else {\r\n            return new HardwareSpecification(configs);\r\n        }\r\n    }\r\n\r\n    public AtRobotCompilerOutput createCompilerOutput() {\r\n        return new AtRobotCompilerOutput(getErrors(), createProgram(), createHardwareSpecification(), getMaxProcessorSpeed(), getDebugInfo(), getMessage());\r\n    }\r\n\r\n    private DebugInfo getDebugInfo() {\r\n        return debugInfo;\r\n    }\r\n\r\n    private String getMessage() {\r\n        return message;\r\n    }\r\n\r\n    private Errors getErrors() {\r\n        return errors;\r\n    }\r\n\r\n    private int getMaxProcessorSpeed() {\r\n        return maxProcessorSpeed;\r\n    }\r\n\r\n    private void addMicrocodeToProgram(List<Token> tokens) {\r\n        programCode.set(programCode.size() - 1, getMicrocodeFor(tokens));\r\n    }\r\n\r\n    private void addTokensToProgram(List<Token> tokens) {\r\n        for (Token token : tokens) {\r\n            addTokenToProgram(token);\r\n        }\r\n    }\r\n\r\n    private void addTokenToProgram(Token token) {\r\n        programCode.add(token.getValue(symbols));\r\n        if (token.isUnresolved(symbols)) {\r\n            unresolved.add(new UnresolvedToken(programCode.size() - 1, token));\r\n        }\r\n    }\r\n\r\n    private short getMicrocodeFor(List<Token> tokens) {\r\n        short microcode = 0;\r\n        for (ListIterator<Token> iterator = tokens.listIterator(tokens.size()); iterator.hasPrevious(); ) {\r\n            microcode = (short) ((microcode << 4) | iterator.previous().getMicrocode(symbols));\r\n        }\r\n        return microcode;\r\n    }\r\n\r\n    private void addReference(int value, String variableName, int lineNumber) {\r\n        addSymbol(variableName, AtRobotMicrocodes.REFERENCE, value, lineNumber);\r\n    }\r\n\r\n    private void addConstant(int value, String name, int lineNumber) {\r\n        addSymbol(name, AtRobotMicrocodes.CONSTANT, value, lineNumber);\r\n    }\r\n\r\n    private void resolve(int address, Token token) {\r\n        adjustValue(address, token);\r\n        adjustMicrocode(address, token);\r\n    }\r\n\r\n    private void adjustValue(int address, Token token) {\r\n        programCode.set(address, token.getValue(symbols));\r\n    }\r\n\r\n    private void adjustMicrocode(int address, Token token) {\r\n        final int microcodeIndex = address | 3;\r\n        programCode.set(microcodeIndex, replaceMicrocdeNibble(address & 3, programCode.get(microcodeIndex), token.getMicrocode(symbols)));\r\n    }\r\n\r\n    private short replaceMicrocdeNibble(int opNumber, short oldMicrocode, short nibble) {\r\n        return (short) ((oldMicrocode & (0xFFFF0FFF >> ((3 - opNumber) << 2))) | ((nibble & 0xF) << (opNumber << 2)));\r\n    }\r\n\r\n    private short[] getProgramCode() {\r\n        final short[] programCode = new short[this.programCode.size()];\r\n        int i = 0;\r\n        for (short value : this.programCode) {\r\n            programCode[i++] = value;\r\n        }\r\n        return programCode;\r\n    }\r\n\r\n    private void duplicateSymbol(String lowerCaseName, Symbol symbol, int lineNumber) {\r\n        errors.add(\"Duplicate symbol: \" + lowerCaseName + \".\" + (symbol.getLineNumber() >= 0 ? \" Original declaration on line \" + symbol.getLineNumber() : \"\"), lineNumber);\r\n    }\r\n\r\n    private boolean hasErrors() {\r\n        return errors.hasErrors();\r\n    }\r\n\r\n    private static class UnresolvedToken {\r\n\r\n        private final int address;\r\n\r\n        private final Token token;\r\n\r\n        private UnresolvedToken(int address, Token token) {\r\n            this.address = address;\r\n            this.token = token;\r\n        }\r\n\r\n        public int getAddress() {\r\n            return address;\r\n        }\r\n\r\n        public Token getToken() {\r\n            return token;\r\n        }\r\n    }\r\n}\r\n",
		"id": "EvoSuiteBenchmark/86_at-robots2-j/src/main/java/net/virtualinfinity/atrobots/compiler/LineNumberReaderCompilerTest0.java",
		"test_prompt": "// LineNumberReaderCompilerTest0.java\npackage net.virtualinfinity.atrobots.compiler;\n\nimport net.virtualinfinity.atrobots.atsetup.*;\nimport net.virtualinfinity.atrobots.computer.DebugInfo;\nimport net.virtualinfinity.atrobots.computer.Program;\nimport java.io.IOException;\nimport java.io.LineNumberReader;\nimport java.util.*;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link LineNumberReaderCompiler}.\n* It contains ten unit test cases for the {@link LineNumberReaderCompiler#compile(LineNumberReader)} method.\n*/\nclass LineNumberReaderCompilerTest0 {"
	},
	{
		"original_code": "// LineNumberReaderCompiler.java\npackage net.virtualinfinity.atrobots.compiler;\r\n\r\nimport net.virtualinfinity.atrobots.atsetup.*;\r\nimport net.virtualinfinity.atrobots.computer.DebugInfo;\r\nimport net.virtualinfinity.atrobots.computer.Program;\r\nimport java.io.IOException;\r\nimport java.io.LineNumberReader;\r\nimport java.util.*;\r\n\r\n/**\r\n * A line-lexer visiter which creates a compiled output.\r\n *\r\n * @author Daniel Pitts\r\n */\r\npublic class LineNumberReaderCompiler {\r\n\r\n    private final Errors errors = new Errors();\r\n\r\n    private final List<Short> programCode = new ArrayList<Short>();\r\n\r\n    private final Map<String, Symbol> symbols = new HashMap<String, Symbol>();\r\n\r\n    private final Collection<UnresolvedToken> unresolved = new ArrayList<UnresolvedToken>();\r\n\r\n    private final Map<String, Integer> configs = new HashMap<String, Integer>();\r\n\r\n    private final List<String> lines = new ArrayList<String>();\r\n\r\n    private final List<Integer> instructionLineNumber = new ArrayList<Integer>();\r\n\r\n    private final DebugInfo debugInfo = new DebugInfo();\r\n\r\n    private int variables;\r\n\r\n    private String message = \"\";\r\n\r\n    private int maxProcessorSpeed;\r\n\r\n    {\r\n        setConfig(HardwareSpecification.SCANNER, 5);\r\n        setConfig(HardwareSpecification.WEAPON, 2);\r\n        setConfig(HardwareSpecification.ARMOR, 2);\r\n        setConfig(HardwareSpecification.ENGINE, 2);\r\n        setConfig(HardwareSpecification.HEATSINKS, 1);\r\n        setConfig(HardwareSpecification.MINES, 0);\r\n        setConfig(HardwareSpecification.SHIELD, 0);\r\n    }\r\n\r\n    private static final int BUILT_IN_SYMBOL_LINENUMBER = -1;\r\n\r\n    private LineVisitor createLineVisitor() {\r\n        return new MyLineVisitor();\r\n    }\r\n\r\n    public AtRobotCompilerOutput compile(LineNumberReader reader) throws IOException {\r\n        createLineLexer(reader).visitAllLines();\r\n        resolve();\r\n        return createCompilerOutput();\r\n    }\r\n\r\n    private AtRobotLineLexer createLineLexer(LineNumberReader reader) {\r\n        return new AtRobotLineLexer(reader, createLineVisitor());\r\n    }\r\n\r\n    {\r\n        addConstant(Short.MAX_VALUE, \"MAXINT\", BUILT_IN_SYMBOL_LINENUMBER);\r\n        addConstant(Short.MIN_VALUE, \"MININT\", BUILT_IN_SYMBOL_LINENUMBER);\r\n        addConstants(AtRobotPort.values(), AtRobotMicrocodes.CONSTANT);\r\n        addConstants(AtRobotInstruction.values(), AtRobotMicrocodes.CONSTANT);\r\n        addConstants(AtRobotInterrupt.values(), AtRobotMicrocodes.CONSTANT);\r\n        addConstants(AtRobotRegister.values(), AtRobotMicrocodes.REFERENCE);\r\n    }\r\n\r\n    private void addConstants(AtRobotSymbol[] values, short microcode) {\r\n        for (AtRobotSymbol symbol : values) {\r\n            for (String name : symbol.getSymbolNames()) {\r\n                addSymbol(name, microcode, symbol.getSymbolValue(), BUILT_IN_SYMBOL_LINENUMBER);\r\n            }\r\n        }\r\n    }\r\n\r\n    private class MyLineVisitor implements LineVisitor {\r\n\r\n        public void expectedDigit(int column, int lineNumber) {\r\n            errors.add(\"Expected digit.\", lineNumber, column);\r\n        }\r\n\r\n        public void expectedDirectiveName(int column, int lineNumber) {\r\n            errors.add(\"Expected directive.\", lineNumber, column);\r\n        }\r\n\r\n        public void unexpectedCharacter(int column, int lineNumber) {\r\n            errors.add(\"Unexpected character\", lineNumber, column);\r\n        }\r\n\r\n        public void invalidVariableNameChar(int column, int lineNumber) {\r\n            errors.add(\"Invalid character in variable name\", lineNumber, column);\r\n        }\r\n\r\n        public void expectedDeviceName(int column, int lineNumber) {\r\n            errors.add(\"Expected device name\", lineNumber, column);\r\n        }\r\n\r\n        public void expectedMoreTokens(int lineNumber) {\r\n            errors.add(\"Expected more tokens on line\", lineNumber);\r\n        }\r\n\r\n        public void invalidNumber(int lineNumber) {\r\n            errors.add(\"Not a valid number\", lineNumber);\r\n        }\r\n\r\n        public void defineVariable(String variableName, int lineNumber) {\r\n            addReference(variables + 128, variableName, lineNumber);\r\n            variables++;\r\n        }\r\n\r\n        public void numberedLabel(int value, int lineNumber) {\r\n            programCode.add((short) value);\r\n            alignProgram();\r\n            programCode.set(programCode.size() - 1, AtRobotMicrocodes.NUMBERED_LABEL);\r\n            markLineNumber(lineNumber);\r\n        }\r\n\r\n        public void maxProcessorSpeed(int speed) {\r\n            maxProcessorSpeed = speed;\r\n        }\r\n\r\n        public void setMessage(String message) {\r\n            LineNumberReaderCompiler.this.message = message;\r\n        }\r\n\r\n        public void setConfig(String name, int value) {\r\n            LineNumberReaderCompiler.this.setConfig(name, value);\r\n        }\r\n\r\n        public void machineCode(int[] values, int lineNumber) {\r\n            for (int value : values) {\r\n                programCode.add((short) value);\r\n            }\r\n            alignProgram();\r\n            markLineNumber(lineNumber);\r\n        }\r\n\r\n        public void label(String label, int lineNumber) {\r\n            addSymbol(label, AtRobotMicrocodes.RESOLVED_LABEL, programCode.size() / 4, lineNumber);\r\n        }\r\n\r\n        public void tokenizedLine(List<Token> tokens, int lineNumber) {\r\n            addTokensToProgram(tokens);\r\n            alignProgram();\r\n            addMicrocodeToProgram(tokens);\r\n            markLineNumber(lineNumber);\r\n        }\r\n\r\n        public void unknownDirective(String directive, int lineNumber) {\r\n            errors.add(\"Unknown directive: #\" + directive, lineNumber);\r\n        }\r\n\r\n        public void appendRawLine(String line) {\r\n            lines.add(line);\r\n        }\r\n    }\r\n\r\n    private void setConfig(String name, int value) {\r\n        configs.put(name.toLowerCase(), value);\r\n    }\r\n\r\n    private void alignProgram() {\r\n        while (programCode.size() % 4 != 0) {\r\n            programCode.add((short) 0);\r\n        }\r\n    }\r\n\r\n    private void markLineNumber(int lineNumber) {\r\n        debugInfo.setLineForInstructionPointer(instructionLineNumber.size(), lineNumber + \": \" + lines.get(lines.size() - 1));\r\n        instructionLineNumber.add(lineNumber);\r\n    }\r\n\r\n    private void addSymbol(String name, short microcode, int value, int lineNumber) {\r\n        final String lowerCaseName = name.toLowerCase();\r\n        if (symbols.containsKey(lowerCaseName)) {\r\n            duplicateSymbol(lowerCaseName, symbols.get(lowerCaseName), lineNumber);\r\n        }\r\n        symbols.put(lowerCaseName, new Symbol(microcode, (short) value, lineNumber));\r\n        if (microcode == AtRobotMicrocodes.REFERENCE) {\r\n            debugInfo.addVariable(value, name);\r\n        }\r\n    }\r\n\r\n    public void resolve() {\r\n        int sum = 0;\r\n        for (int value : configs.values()) {\r\n            sum += value;\r\n        }\r\n        if (sum > 12) {\r\n            errors.info(\"Config points too high. \" + sum + \" out of a max of 12.\");\r\n        }\r\n        for (UnresolvedToken entry : unresolved) {\r\n            if (!entry.getToken().isUnresolved(symbols)) {\r\n                resolve(entry.getAddress(), entry.getToken());\r\n            } else {\r\n                errors.add(\"Unresolved symbol: \" + entry.getToken().toString(), entry.getToken().getLineNumber());\r\n            }\r\n        }\r\n    }\r\n\r\n    private Program createProgram() {\r\n        if (hasErrors()) {\r\n            return null;\r\n        } else {\r\n            return new Program(getProgramCode());\r\n        }\r\n    }\r\n\r\n    private HardwareSpecification createHardwareSpecification() {\r\n        if (hasErrors()) {\r\n            return null;\r\n        } else {\r\n            return new HardwareSpecification(configs);\r\n        }\r\n    }\r\n\r\n    public AtRobotCompilerOutput createCompilerOutput() {\r\n        return new AtRobotCompilerOutput(getErrors(), createProgram(), createHardwareSpecification(), getMaxProcessorSpeed(), getDebugInfo(), getMessage());\r\n    }\r\n\r\n    private DebugInfo getDebugInfo() {\r\n        return debugInfo;\r\n    }\r\n\r\n    private String getMessage() {\r\n        return message;\r\n    }\r\n\r\n    private Errors getErrors() {\r\n        return errors;\r\n    }\r\n\r\n    private int getMaxProcessorSpeed() {\r\n        return maxProcessorSpeed;\r\n    }\r\n\r\n    private void addMicrocodeToProgram(List<Token> tokens) {\r\n        programCode.set(programCode.size() - 1, getMicrocodeFor(tokens));\r\n    }\r\n\r\n    private void addTokensToProgram(List<Token> tokens) {\r\n        for (Token token : tokens) {\r\n            addTokenToProgram(token);\r\n        }\r\n    }\r\n\r\n    private void addTokenToProgram(Token token) {\r\n        programCode.add(token.getValue(symbols));\r\n        if (token.isUnresolved(symbols)) {\r\n            unresolved.add(new UnresolvedToken(programCode.size() - 1, token));\r\n        }\r\n    }\r\n\r\n    private short getMicrocodeFor(List<Token> tokens) {\r\n        short microcode = 0;\r\n        for (ListIterator<Token> iterator = tokens.listIterator(tokens.size()); iterator.hasPrevious(); ) {\r\n            microcode = (short) ((microcode << 4) | iterator.previous().getMicrocode(symbols));\r\n        }\r\n        return microcode;\r\n    }\r\n\r\n    private void addReference(int value, String variableName, int lineNumber) {\r\n        addSymbol(variableName, AtRobotMicrocodes.REFERENCE, value, lineNumber);\r\n    }\r\n\r\n    private void addConstant(int value, String name, int lineNumber) {\r\n        addSymbol(name, AtRobotMicrocodes.CONSTANT, value, lineNumber);\r\n    }\r\n\r\n    private void resolve(int address, Token token) {\r\n        adjustValue(address, token);\r\n        adjustMicrocode(address, token);\r\n    }\r\n\r\n    private void adjustValue(int address, Token token) {\r\n        programCode.set(address, token.getValue(symbols));\r\n    }\r\n\r\n    private void adjustMicrocode(int address, Token token) {\r\n        final int microcodeIndex = address | 3;\r\n        programCode.set(microcodeIndex, replaceMicrocdeNibble(address & 3, programCode.get(microcodeIndex), token.getMicrocode(symbols)));\r\n    }\r\n\r\n    private short replaceMicrocdeNibble(int opNumber, short oldMicrocode, short nibble) {\r\n        return (short) ((oldMicrocode & (0xFFFF0FFF >> ((3 - opNumber) << 2))) | ((nibble & 0xF) << (opNumber << 2)));\r\n    }\r\n\r\n    private short[] getProgramCode() {\r\n        final short[] programCode = new short[this.programCode.size()];\r\n        int i = 0;\r\n        for (short value : this.programCode) {\r\n            programCode[i++] = value;\r\n        }\r\n        return programCode;\r\n    }\r\n\r\n    private void duplicateSymbol(String lowerCaseName, Symbol symbol, int lineNumber) {\r\n        errors.add(\"Duplicate symbol: \" + lowerCaseName + \".\" + (symbol.getLineNumber() >= 0 ? \" Original declaration on line \" + symbol.getLineNumber() : \"\"), lineNumber);\r\n    }\r\n\r\n    private boolean hasErrors() {\r\n        return errors.hasErrors();\r\n    }\r\n\r\n    private static class UnresolvedToken {\r\n\r\n        private final int address;\r\n\r\n        private final Token token;\r\n\r\n        private UnresolvedToken(int address, Token token) {\r\n            this.address = address;\r\n            this.token = token;\r\n        }\r\n\r\n        public int getAddress() {\r\n            return address;\r\n        }\r\n\r\n        public Token getToken() {\r\n            return token;\r\n        }\r\n    }\r\n}\r\n",
		"id": "EvoSuiteBenchmark/86_at-robots2-j/src/main/java/net/virtualinfinity/atrobots/compiler/LineNumberReaderCompilerTest1.java",
		"test_prompt": "// LineNumberReaderCompilerTest1.java\npackage net.virtualinfinity.atrobots.compiler;\n\nimport net.virtualinfinity.atrobots.atsetup.*;\nimport net.virtualinfinity.atrobots.computer.DebugInfo;\nimport net.virtualinfinity.atrobots.computer.Program;\nimport java.io.IOException;\nimport java.io.LineNumberReader;\nimport java.util.*;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link LineNumberReaderCompiler}.\n* It contains ten unit test cases for the {@link LineNumberReaderCompiler#createCompilerOutput()} method.\n*/\nclass LineNumberReaderCompilerTest1 {"
	},
	{
		"original_code": "// AtRobotLineLexer.java\npackage net.virtualinfinity.atrobots.compiler;\r\n\r\nimport java.io.IOException;\r\nimport java.io.LineNumberReader;\r\nimport java.util.ArrayList;\r\nimport java.util.List;\r\n\r\n/**\r\n * Does lexical analysis on lines from an AT-Robots 2 source code.\r\n *\r\n * @author Daniel Pitts\r\n */\r\npublic class AtRobotLineLexer {\r\n\r\n    private final LineNumberReader reader;\r\n\r\n    private final LineVisitor lineVisitor;\r\n\r\n    private boolean stopProcessing;\r\n\r\n    public AtRobotLineLexer(LineNumberReader reader, LineVisitor lineVisitor) {\r\n        this.reader = reader;\r\n        this.lineVisitor = lineVisitor;\r\n    }\r\n\r\n    public void visitAllLines() throws IOException {\r\n        stopProcessing = false;\r\n        String line;\r\n        while (!(stopProcessing || (line = reader.readLine()) == null)) {\r\n            visitLine(line);\r\n        }\r\n    }\r\n\r\n    public void visitLine(String line) throws IOException {\r\n        lineVisitor.appendRawLine(line);\r\n        final int commentStart = line.indexOf(';');\r\n        if (commentStart >= 0) {\r\n            line = line.substring(0, commentStart);\r\n        }\r\n        int i = 0;\r\n        while (i < line.length() && isSeperator(line.charAt(i))) {\r\n            ++i;\r\n        }\r\n        line = line.substring(i);\r\n        if (line.length() != 0) {\r\n            switch(line.charAt(0)) {\r\n                case '#':\r\n                    visitDirective(line);\r\n                    break;\r\n                case ':':\r\n                    visitNumberLabel(line);\r\n                    break;\r\n                case '*':\r\n                    visitMachineCode(line);\r\n                    break;\r\n                case '!':\r\n                    visitLabel(line);\r\n                    break;\r\n                default:\r\n                    visitNormalLine(line);\r\n                    break;\r\n            }\r\n        }\r\n    }\r\n\r\n    private void visitLabel(String line) {\r\n        int i = 0;\r\n        while (i < line.length()) {\r\n            if (isSeperator(line.charAt(i))) {\r\n                line = line.substring(0, i);\r\n                break;\r\n            }\r\n            ++i;\r\n        }\r\n        lineVisitor.label(line, getLineNumber());\r\n    }\r\n\r\n    private void visitNormalLine(String line) {\r\n        List<Token> tokens = new ArrayList<Token>(4);\r\n        int i = 0;\r\n        while (i < line.length()) {\r\n            while (i < line.length() && isSeperator(line.charAt(i))) {\r\n                i++;\r\n            }\r\n            int last = i;\r\n            while (i < line.length() && !isSeperator(line.charAt(i))) {\r\n                i++;\r\n            }\r\n            if (last != i) {\r\n                tokens.add(Token.parse(getLineNumber(), line.substring(last, i).toLowerCase()));\r\n            }\r\n        }\r\n        lineVisitor.tokenizedLine(tokens, getLineNumber());\r\n    }\r\n\r\n    private static boolean isSeperator(char c) {\r\n        return \"0123456789ABCDEFGHJIKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz#![]:@*_-$\".indexOf(c) < 0;\r\n    }\r\n\r\n    private void visitMachineCode(String line) {\r\n        String[] tokens = line.toLowerCase().split(\"[^0-9h]+\");\r\n        if (tokens.length != 4) {\r\n            lineVisitor.expectedMoreTokens(getLineNumber());\r\n            return;\r\n        }\r\n        int[] values = new int[4];\r\n        for (int i = 0; i < 4; ++i) {\r\n            values[i] = parseNumber(tokens[i]);\r\n            if (values[i] == Integer.MIN_VALUE) {\r\n                lineVisitor.invalidNumber(getLineNumber());\r\n                return;\r\n            }\r\n        }\r\n        lineVisitor.machineCode(values, getLineNumber());\r\n    }\r\n\r\n    public static int parseNumber(String token) {\r\n        int value = 0;\r\n        final int radix;\r\n        final boolean negative = token.charAt(0) == '-';\r\n        if (negative) {\r\n            token = token.substring(1);\r\n        }\r\n        if (token.endsWith(\"h\")) {\r\n            token = token.substring(0, token.length() - 1);\r\n            radix = 16;\r\n        } else if (token.startsWith(\"0x\") || token.startsWith(\"0X\")) {\r\n            token = token.substring(2);\r\n            radix = 16;\r\n        } else {\r\n            radix = 10;\r\n        }\r\n        for (int i = 0; i < token.length(); ++i) {\r\n            final int digit = Character.digit(token.charAt(i), radix);\r\n            if (digit < 0) {\r\n                return Integer.MIN_VALUE;\r\n            }\r\n            value = value * radix + digit;\r\n        }\r\n        return negative ? -value : value;\r\n    }\r\n\r\n    private void visitNumberLabel(String line) {\r\n        String number = line.substring(1);\r\n        int value = 0;\r\n        for (int i = 0; i < number.length(); ++i) {\r\n            if (isSeperator(number.charAt(i))) {\r\n                break;\r\n            }\r\n            if (!Character.isDigit(number.charAt(i))) {\r\n                lineVisitor.expectedDigit(i + 1, getLineNumber());\r\n                return;\r\n            }\r\n            value = value * 10 + Character.digit(number.charAt(i), 10);\r\n        }\r\n        lineVisitor.numberedLabel(value, getLineNumber());\r\n    }\r\n\r\n    private void visitDirective(String line) throws IOException {\r\n        for (int i = 1; i < line.length(); ++i) {\r\n            if (!Character.isLetter(line.charAt(i))) {\r\n                handleDirective(line, i);\r\n                return;\r\n            }\r\n        }\r\n        handleDirective(line, line.length());\r\n    }\r\n\r\n    private void handleDirective(String line, int i) throws IOException {\r\n        String directive = line.substring(1, i).toLowerCase();\r\n        if (directive.length() == 0) {\r\n            lineVisitor.expectedDirectiveName(i, getLineNumber());\r\n            return;\r\n        }\r\n        if (i < line.length() && !isSeperator(line.charAt(i))) {\r\n            lineVisitor.unexpectedCharacter(i, getLineNumber());\r\n        }\r\n        while (i < line.length() && isSeperator(line.charAt(i))) {\r\n            ++i;\r\n        }\r\n        final int start = i;\r\n        if (directive.equals(\"def\")) {\r\n            while (i < line.length()) {\r\n                if (!isValidVariableNameChar(line.charAt(i))) {\r\n                    lineVisitor.invalidVariableNameChar(i, getLineNumber());\r\n                    return;\r\n                }\r\n                i++;\r\n            }\r\n            lineVisitor.defineVariable(line.substring(start).toLowerCase(), getLineNumber());\r\n            return;\r\n        }\r\n        if (directive.equals(\"time\")) {\r\n            while (i < line.length()) {\r\n                if (!Character.isDigit(line.charAt(i))) {\r\n                    lineVisitor.expectedDigit(i, getLineNumber());\r\n                    return;\r\n                }\r\n                ++i;\r\n            }\r\n            lineVisitor.maxProcessorSpeed(Integer.parseInt(line.substring(start)));\r\n            return;\r\n        }\r\n        if (directive.equals(\"msg\")) {\r\n            lineVisitor.setMessage(line.substring(i));\r\n            return;\r\n        }\r\n        if (directive.equals(\"config\")) {\r\n            while (i < line.length()) {\r\n                if (line.charAt(i) == '=') {\r\n                    String name = line.substring(start, i);\r\n                    int valueStart = ++i;\r\n                    while (i < line.length() && !isSeperator(line.charAt(i))) {\r\n                        if (!Character.isDigit(line.charAt(i))) {\r\n                            lineVisitor.expectedDigit(i, getLineNumber());\r\n                            return;\r\n                        }\r\n                        ++i;\r\n                    }\r\n                    lineVisitor.setConfig(name, Integer.parseInt(line.substring(valueStart, i)));\r\n                    return;\r\n                }\r\n                if (!Character.isLetter(line.charAt(i))) {\r\n                    lineVisitor.expectedDeviceName(i, getLineNumber());\r\n                    return;\r\n                }\r\n                ++i;\r\n            }\r\n            return;\r\n        }\r\n        if (directive.equals(\"end\")) {\r\n            stopProcessing();\r\n            return;\r\n        }\r\n        lineVisitor.unknownDirective(directive, getLineNumber());\r\n    }\r\n\r\n    private void stopProcessing() {\r\n        stopProcessing = true;\r\n    }\r\n\r\n    private boolean isValidVariableNameChar(char c) {\r\n        return Character.isLetterOrDigit(c) || c == '_';\r\n    }\r\n\r\n    public int getLineNumber() {\r\n        return reader.getLineNumber();\r\n    }\r\n}\r\n",
		"id": "EvoSuiteBenchmark/86_at-robots2-j/src/main/java/net/virtualinfinity/atrobots/compiler/AtRobotLineLexerTest.java",
		"test_prompt": "// AtRobotLineLexerTest.java\npackage net.virtualinfinity.atrobots.compiler;\n\nimport java.io.IOException;\nimport java.io.LineNumberReader;\nimport java.util.ArrayList;\nimport java.util.List;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link AtRobotLineLexer}.\n* It contains ten unit test cases for the {@link AtRobotLineLexer#parseNumber(String)} method.\n*/\nclass AtRobotLineLexerTest {"
	},
	{
		"original_code": "// AtRobotCompilerOutput.java\npackage net.virtualinfinity.atrobots.compiler;\r\n\r\nimport net.virtualinfinity.atrobots.computer.DebugInfo;\r\nimport net.virtualinfinity.atrobots.computer.Program;\r\n\r\n/**\r\n * The results of a compilation attempt.\r\n *\r\n * @author Daniel Pitts\r\n */\r\npublic class AtRobotCompilerOutput {\r\n\r\n    private final Errors errors;\r\n\r\n    private final Program program;\r\n\r\n    private final HardwareSpecification hardwareSpecification;\r\n\r\n    private final int maxProcessorSpeed;\r\n\r\n    private final DebugInfo debugInfo;\r\n\r\n    private final String message;\r\n\r\n    /**\r\n     * Construct an output.\r\n     *\r\n     * @param errors                the errors (if any). Should not be null.\r\n     * @param program               the program produced by the compiler.\r\n     * @param hardwareSpecification the hardware specs produced by the compiler\r\n     * @param maxProcessorSpeed     the max processor speed. TODO: This should be part of HardwareSpecification\r\n     * @param debugInfo             debug information.\r\n     * @param message               the robots message.\r\n     * @throws NullPointerException if errors is null, or if errors.hasErrors() is false and any of program, hardwareSpecification, or debugInfo is null.\r\n     */\r\n    public AtRobotCompilerOutput(Errors errors, Program program, HardwareSpecification hardwareSpecification, int maxProcessorSpeed, DebugInfo debugInfo, String message) {\r\n        if (errors == null) {\r\n            throw new NullPointerException(\"errors must not be null\");\r\n        }\r\n        this.errors = errors;\r\n        if (!errors.hasErrors()) {\r\n            if (program == null) {\r\n                throw new NullPointerException(\"program must not be null unless there are errors.\");\r\n            }\r\n            if (debugInfo == null) {\r\n                throw new NullPointerException(\"debugInfo must not be null unless there are errors.\");\r\n            }\r\n            if (hardwareSpecification == null) {\r\n                throw new NullPointerException(\"hardwareSpecification must not be null unless there are errors.\");\r\n            }\r\n        }\r\n        this.program = program;\r\n        this.hardwareSpecification = hardwareSpecification;\r\n        this.maxProcessorSpeed = maxProcessorSpeed;\r\n        this.debugInfo = debugInfo;\r\n        this.message = message;\r\n    }\r\n\r\n    /**\r\n     * Creates an RobotFactory based on this compiled output.\r\n     *\r\n     * @param name the name of the entrant to create.\r\n     * @return a configured entrant\r\n     * @throws IllegalStateException if there are compiler errors.\r\n     */\r\n    public RobotFactory createRobotFactory(String name) {\r\n        if (hasErrors()) {\r\n            throw new IllegalStateException(\"Can not create an entrant with errors. Check CompilerOutput.hasErrors() first.\");\r\n        }\r\n        return new RobotFactory(name, getProgram(), getHardwareSpecification(), getDebugInfo(), getMaxProcessorSpeed(), getMessage());\r\n    }\r\n\r\n    /**\r\n     * Get the Errors object.\r\n     *\r\n     * @return the Errors object.\r\n     */\r\n    public Errors getErrors() {\r\n        return errors;\r\n    }\r\n\r\n    /**\r\n     * Check for errors.\r\n     *\r\n     * @return true if there are errors.\r\n     */\r\n    public boolean hasErrors() {\r\n        return errors.hasErrors();\r\n    }\r\n\r\n    /**\r\n     * Get the program code.\r\n     *\r\n     * @return the program code.\r\n     * @throws IllegalStateException if there are compiler errors.\r\n     */\r\n    public Program getProgram() {\r\n        if (hasErrors()) {\r\n            throw new IllegalStateException(\"Can not get the program when there are errors.\");\r\n        }\r\n        return program;\r\n    }\r\n\r\n    /**\r\n     * Get the message.\r\n     *\r\n     * @return the message.\r\n     * @throws IllegalStateException if there are compiler errors.\r\n     */\r\n    public String getMessage() {\r\n        if (hasErrors()) {\r\n            throw new IllegalStateException(\"Can not get the message when there are errors.\");\r\n        }\r\n        return message;\r\n    }\r\n\r\n    /**\r\n     * Get the hardware specification.\r\n     *\r\n     * @return the hardware specification.\r\n     * @throws IllegalStateException if there are compiler errors.\r\n     */\r\n    public HardwareSpecification getHardwareSpecification() {\r\n        if (hasErrors()) {\r\n            throw new IllegalStateException(\"Can not get the hardware specification when there are errors.\");\r\n        }\r\n        return hardwareSpecification;\r\n    }\r\n\r\n    /**\r\n     * Get the maximum desired processor speed.\r\n     *\r\n     * @return the maximum desired processor speed.\r\n     * @throws IllegalStateException if there are compiler errors.\r\n     */\r\n    public int getMaxProcessorSpeed() {\r\n        if (hasErrors()) {\r\n            throw new IllegalStateException(\"Can not get the maximum processor speed when there are errors.\");\r\n        }\r\n        return maxProcessorSpeed;\r\n    }\r\n\r\n    /**\r\n     * Get the debug info.\r\n     *\r\n     * @return the debug info.\r\n     * @throws IllegalStateException if there are compiler errors.\r\n     */\r\n    public DebugInfo getDebugInfo() {\r\n        if (hasErrors()) {\r\n            throw new IllegalStateException(\"Can not get the debug info when there are errors.\");\r\n        }\r\n        return debugInfo;\r\n    }\r\n}\r\n",
		"id": "EvoSuiteBenchmark/86_at-robots2-j/src/main/java/net/virtualinfinity/atrobots/compiler/AtRobotCompilerOutputTest0.java",
		"test_prompt": "// AtRobotCompilerOutputTest0.java\npackage net.virtualinfinity.atrobots.compiler;\n\nimport net.virtualinfinity.atrobots.computer.DebugInfo;\nimport net.virtualinfinity.atrobots.computer.Program;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link AtRobotCompilerOutput}.\n* It contains ten unit test cases for the {@link AtRobotCompilerOutput#createRobotFactory(String)} method.\n*/\nclass AtRobotCompilerOutputTest0 {"
	},
	{
		"original_code": "// AtRobotCompilerOutput.java\npackage net.virtualinfinity.atrobots.compiler;\r\n\r\nimport net.virtualinfinity.atrobots.computer.DebugInfo;\r\nimport net.virtualinfinity.atrobots.computer.Program;\r\n\r\n/**\r\n * The results of a compilation attempt.\r\n *\r\n * @author Daniel Pitts\r\n */\r\npublic class AtRobotCompilerOutput {\r\n\r\n    private final Errors errors;\r\n\r\n    private final Program program;\r\n\r\n    private final HardwareSpecification hardwareSpecification;\r\n\r\n    private final int maxProcessorSpeed;\r\n\r\n    private final DebugInfo debugInfo;\r\n\r\n    private final String message;\r\n\r\n    /**\r\n     * Construct an output.\r\n     *\r\n     * @param errors                the errors (if any). Should not be null.\r\n     * @param program               the program produced by the compiler.\r\n     * @param hardwareSpecification the hardware specs produced by the compiler\r\n     * @param maxProcessorSpeed     the max processor speed. TODO: This should be part of HardwareSpecification\r\n     * @param debugInfo             debug information.\r\n     * @param message               the robots message.\r\n     * @throws NullPointerException if errors is null, or if errors.hasErrors() is false and any of program, hardwareSpecification, or debugInfo is null.\r\n     */\r\n    public AtRobotCompilerOutput(Errors errors, Program program, HardwareSpecification hardwareSpecification, int maxProcessorSpeed, DebugInfo debugInfo, String message) {\r\n        if (errors == null) {\r\n            throw new NullPointerException(\"errors must not be null\");\r\n        }\r\n        this.errors = errors;\r\n        if (!errors.hasErrors()) {\r\n            if (program == null) {\r\n                throw new NullPointerException(\"program must not be null unless there are errors.\");\r\n            }\r\n            if (debugInfo == null) {\r\n                throw new NullPointerException(\"debugInfo must not be null unless there are errors.\");\r\n            }\r\n            if (hardwareSpecification == null) {\r\n                throw new NullPointerException(\"hardwareSpecification must not be null unless there are errors.\");\r\n            }\r\n        }\r\n        this.program = program;\r\n        this.hardwareSpecification = hardwareSpecification;\r\n        this.maxProcessorSpeed = maxProcessorSpeed;\r\n        this.debugInfo = debugInfo;\r\n        this.message = message;\r\n    }\r\n\r\n    /**\r\n     * Creates an RobotFactory based on this compiled output.\r\n     *\r\n     * @param name the name of the entrant to create.\r\n     * @return a configured entrant\r\n     * @throws IllegalStateException if there are compiler errors.\r\n     */\r\n    public RobotFactory createRobotFactory(String name) {\r\n        if (hasErrors()) {\r\n            throw new IllegalStateException(\"Can not create an entrant with errors. Check CompilerOutput.hasErrors() first.\");\r\n        }\r\n        return new RobotFactory(name, getProgram(), getHardwareSpecification(), getDebugInfo(), getMaxProcessorSpeed(), getMessage());\r\n    }\r\n\r\n    /**\r\n     * Get the Errors object.\r\n     *\r\n     * @return the Errors object.\r\n     */\r\n    public Errors getErrors() {\r\n        return errors;\r\n    }\r\n\r\n    /**\r\n     * Check for errors.\r\n     *\r\n     * @return true if there are errors.\r\n     */\r\n    public boolean hasErrors() {\r\n        return errors.hasErrors();\r\n    }\r\n\r\n    /**\r\n     * Get the program code.\r\n     *\r\n     * @return the program code.\r\n     * @throws IllegalStateException if there are compiler errors.\r\n     */\r\n    public Program getProgram() {\r\n        if (hasErrors()) {\r\n            throw new IllegalStateException(\"Can not get the program when there are errors.\");\r\n        }\r\n        return program;\r\n    }\r\n\r\n    /**\r\n     * Get the message.\r\n     *\r\n     * @return the message.\r\n     * @throws IllegalStateException if there are compiler errors.\r\n     */\r\n    public String getMessage() {\r\n        if (hasErrors()) {\r\n            throw new IllegalStateException(\"Can not get the message when there are errors.\");\r\n        }\r\n        return message;\r\n    }\r\n\r\n    /**\r\n     * Get the hardware specification.\r\n     *\r\n     * @return the hardware specification.\r\n     * @throws IllegalStateException if there are compiler errors.\r\n     */\r\n    public HardwareSpecification getHardwareSpecification() {\r\n        if (hasErrors()) {\r\n            throw new IllegalStateException(\"Can not get the hardware specification when there are errors.\");\r\n        }\r\n        return hardwareSpecification;\r\n    }\r\n\r\n    /**\r\n     * Get the maximum desired processor speed.\r\n     *\r\n     * @return the maximum desired processor speed.\r\n     * @throws IllegalStateException if there are compiler errors.\r\n     */\r\n    public int getMaxProcessorSpeed() {\r\n        if (hasErrors()) {\r\n            throw new IllegalStateException(\"Can not get the maximum processor speed when there are errors.\");\r\n        }\r\n        return maxProcessorSpeed;\r\n    }\r\n\r\n    /**\r\n     * Get the debug info.\r\n     *\r\n     * @return the debug info.\r\n     * @throws IllegalStateException if there are compiler errors.\r\n     */\r\n    public DebugInfo getDebugInfo() {\r\n        if (hasErrors()) {\r\n            throw new IllegalStateException(\"Can not get the debug info when there are errors.\");\r\n        }\r\n        return debugInfo;\r\n    }\r\n}\r\n",
		"id": "EvoSuiteBenchmark/86_at-robots2-j/src/main/java/net/virtualinfinity/atrobots/compiler/AtRobotCompilerOutputTest1.java",
		"test_prompt": "// AtRobotCompilerOutputTest1.java\npackage net.virtualinfinity.atrobots.compiler;\n\nimport net.virtualinfinity.atrobots.computer.DebugInfo;\nimport net.virtualinfinity.atrobots.computer.Program;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link AtRobotCompilerOutput}.\n* It contains ten unit test cases for the {@link AtRobotCompilerOutput#hasErrors()} method.\n*/\nclass AtRobotCompilerOutputTest1 {"
	},
	{
		"original_code": "// Errors.java\npackage net.virtualinfinity.atrobots.compiler;\r\n\r\nimport javax.swing.*;\r\nimport java.awt.*;\r\nimport java.util.ArrayList;\r\nimport java.util.List;\r\n\r\n/**\r\n * Keeps track of compiler errors.\r\n *\r\n * @author Daniel Pitts\r\n */\r\npublic class Errors {\r\n\r\n    List<String> messages = new ArrayList<String>();\r\n\r\n    /**\r\n     * Add an error message on the given line number.\r\n     *\r\n     * @param error      the message.\r\n     * @param lineNumber the line number.\r\n     */\r\n    public void add(String error, int lineNumber) {\r\n        messages.add(\"Line \" + lineNumber + \": \" + error);\r\n    }\r\n\r\n    public boolean hasErrors() {\r\n        return !messages.isEmpty();\r\n    }\r\n\r\n    /**\r\n     * Add an error message on the given line number and column.\r\n     *\r\n     * @param error      the message.\r\n     * @param lineNumber the line number.\r\n     * @param column     the column\r\n     */\r\n    public void add(String error, int lineNumber, int column) {\r\n        messages.add(\"Line \" + lineNumber + \",\" + column + \": \" + error);\r\n    }\r\n\r\n    /**\r\n     * Display the errors in a JDialog, if there are any.\r\n     *\r\n     * @param name   the dialog name.\r\n     * @param parent the parent frame or dialog.\r\n     */\r\n    public void showErrorDialog(String name, Object parent) {\r\n        if (!hasErrors()) {\r\n            return;\r\n        }\r\n        final JDialog dialog = parent instanceof Frame ? new JDialog((Frame) parent, name, true) : new JDialog((Dialog) parent, name, true);\r\n        final JList jList = new JList();\r\n        dialog.add(new JScrollPane(jList));\r\n        final DefaultListModel listModel = new DefaultListModel();\r\n        for (String st : messages) {\r\n            listModel.addElement(st);\r\n        }\r\n        jList.setModel(listModel);\r\n        dialog.pack();\r\n        dialog.setVisible(true);\r\n    }\r\n\r\n    /**\r\n     * Add information not associated with a line.\r\n     *\r\n     * @param info the information.\r\n     */\r\n    public void info(String info) {\r\n        messages.add(info);\r\n    }\r\n\r\n    /**\r\n     * Add a copy of the messages in another errors object into this one.\r\n     *\r\n     * @param errors the errors to add from.\r\n     */\r\n    public void addAll(Errors errors) {\r\n        messages.addAll(errors.messages);\r\n    }\r\n\r\n    /**\r\n     * Dump the errors to System.out.\r\n     */\r\n    public void dumpErrors() {\r\n        if (hasErrors()) {\r\n            for (String m : messages) {\r\n                System.out.println(m);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Get a copy of the messages.\r\n     *\r\n     * @return a copy of the messages.\r\n     */\r\n    public List<String> getMessages() {\r\n        return new ArrayList<String>(messages);\r\n    }\r\n}\r\n",
		"id": "EvoSuiteBenchmark/86_at-robots2-j/src/main/java/net/virtualinfinity/atrobots/compiler/ErrorsTest.java",
		"test_prompt": "// ErrorsTest.java\npackage net.virtualinfinity.atrobots.compiler;\n\nimport javax.swing.*;\nimport java.awt.*;\nimport java.util.ArrayList;\nimport java.util.List;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link Errors}.\n* It contains ten unit test cases for the {@link Errors#hasErrors()} method.\n*/\nclass ErrorsTest {"
	},
	{
		"original_code": "// Token.java\npackage net.virtualinfinity.atrobots.compiler;\r\n\r\nimport net.virtualinfinity.atrobots.atsetup.AtRobotMicrocodes;\r\nimport java.util.Map;\r\n\r\n/**\r\n * A parsed expression.\r\n *\r\n * @author Daniel Pitts\r\n */\r\npublic abstract class Token {\r\n\r\n    private int lineNumber;\r\n\r\n    /**\r\n     * Parse the expression and return a token.\r\n     *\r\n     * @param lineNumber the line number, for error reporting.\r\n     * @param token      the string.\r\n     * @return a token.\r\n     */\r\n    public static Token parse(int lineNumber, String token) {\r\n        final Token t = getToken(lineNumber, token);\r\n        t.setLineNumber(lineNumber);\r\n        return t;\r\n    }\r\n\r\n    private static Token getToken(int lineNumber, String token) {\r\n        if (token.startsWith(\"[\") && token.endsWith(\"]\")) {\r\n            return new Indirect(parse(lineNumber, token.substring(1, token.length() - 1)));\r\n        }\r\n        if (token.startsWith(\"@\")) {\r\n            return new ConstantReference(AtRobotLineLexer.parseNumber(token.substring(1)));\r\n        }\r\n        if (Character.isDigit(token.charAt(0)) || (token.charAt(0) == '-' && token.length() > 1 && Character.isDigit(token.charAt(1)))) {\r\n            return new Constant(AtRobotLineLexer.parseNumber(token));\r\n        }\r\n        if (token.charAt(0) == '!') {\r\n            return new Label(token);\r\n        }\r\n        return new Name(token);\r\n    }\r\n\r\n    abstract public short getValue(Map<String, Symbol> symbols);\r\n\r\n    abstract public short getMicrocode(Map<String, Symbol> symbols);\r\n\r\n    public boolean isUnresolved(Map<String, Symbol> symbols) {\r\n        return false;\r\n    }\r\n\r\n    public void setLineNumber(int lineNumber) {\r\n        this.lineNumber = lineNumber;\r\n    }\r\n\r\n    public int getLineNumber() {\r\n        return lineNumber;\r\n    }\r\n\r\n    private static class Indirect extends Token {\r\n\r\n        private final Token inner;\r\n\r\n        public Indirect(Token inner) {\r\n            this.inner = inner;\r\n        }\r\n\r\n        public short getValue(Map<String, Symbol> symbols) {\r\n            return inner.getValue(symbols);\r\n        }\r\n\r\n        public short getMicrocode(Map<String, Symbol> symbols) {\r\n            return (short) (8 | inner.getMicrocode(symbols));\r\n        }\r\n    }\r\n\r\n    private static class Constant extends Token {\r\n\r\n        private int value;\r\n\r\n        public Constant(int value) {\r\n            this.value = value;\r\n        }\r\n\r\n        public short getValue(Map<String, Symbol> symbols) {\r\n            return (short) value;\r\n        }\r\n\r\n        public short getMicrocode(Map<String, Symbol> symbols) {\r\n            return 0;\r\n        }\r\n    }\r\n\r\n    private abstract static class Resolvable extends Token {\r\n\r\n        protected final String name;\r\n\r\n        protected Resolvable(String name) {\r\n            this.name = name;\r\n        }\r\n\r\n        public short getValue(Map<String, Symbol> symbols) {\r\n            return isUnresolved(symbols) ? 0 : get(symbols).getValue();\r\n        }\r\n\r\n        public short getMicrocode(Map<String, Symbol> symbols) {\r\n            return isUnresolved(symbols) ? getUnresolvedMicrocode() : get(symbols).getMicrocode();\r\n        }\r\n\r\n        protected abstract short getUnresolvedMicrocode();\r\n\r\n        private Symbol get(Map<String, Symbol> symbols) {\r\n            return symbols.get(name);\r\n        }\r\n\r\n        public boolean isUnresolved(Map<String, Symbol> symbols) {\r\n            int old = 0x481;\r\n            int n = 0x488;\r\n            return !symbols.containsKey(name);\r\n        }\r\n\r\n        public String toString() {\r\n            return name;\r\n        }\r\n    }\r\n\r\n    private static class Name extends Resolvable {\r\n\r\n        protected Name(String name) {\r\n            super(name);\r\n        }\r\n\r\n        @Override\r\n        protected short getUnresolvedMicrocode() {\r\n            return AtRobotMicrocodes.CONSTANT;\r\n        }\r\n    }\r\n\r\n    private static class Label extends Resolvable {\r\n\r\n        public Label(String token) {\r\n            super(token);\r\n        }\r\n\r\n        @Override\r\n        protected short getUnresolvedMicrocode() {\r\n            return AtRobotMicrocodes.UNRESOLVED_LABEL;\r\n        }\r\n    }\r\n\r\n    public String toString() {\r\n        return \"<token>\";\r\n    }\r\n\r\n    private static class ConstantReference extends Constant {\r\n\r\n        public ConstantReference(int value) {\r\n            super(value);\r\n        }\r\n\r\n        public short getMicrocode(Map<String, Symbol> symbols) {\r\n            return AtRobotMicrocodes.REFERENCE;\r\n        }\r\n    }\r\n}\r\n",
		"id": "EvoSuiteBenchmark/86_at-robots2-j/src/main/java/net/virtualinfinity/atrobots/compiler/TokenTest0.java",
		"test_prompt": "// TokenTest0.java\npackage net.virtualinfinity.atrobots.compiler;\n\nimport net.virtualinfinity.atrobots.atsetup.AtRobotMicrocodes;\nimport java.util.Map;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link Token}.\n* It contains ten unit test cases for the {@link Token#parse(int, String)} method.\n*/\nclass TokenTest0 {"
	},
	{
		"original_code": "// Token.java\npackage net.virtualinfinity.atrobots.compiler;\r\n\r\nimport net.virtualinfinity.atrobots.atsetup.AtRobotMicrocodes;\r\nimport java.util.Map;\r\n\r\n/**\r\n * A parsed expression.\r\n *\r\n * @author Daniel Pitts\r\n */\r\npublic abstract class Token {\r\n\r\n    private int lineNumber;\r\n\r\n    /**\r\n     * Parse the expression and return a token.\r\n     *\r\n     * @param lineNumber the line number, for error reporting.\r\n     * @param token      the string.\r\n     * @return a token.\r\n     */\r\n    public static Token parse(int lineNumber, String token) {\r\n        final Token t = getToken(lineNumber, token);\r\n        t.setLineNumber(lineNumber);\r\n        return t;\r\n    }\r\n\r\n    private static Token getToken(int lineNumber, String token) {\r\n        if (token.startsWith(\"[\") && token.endsWith(\"]\")) {\r\n            return new Indirect(parse(lineNumber, token.substring(1, token.length() - 1)));\r\n        }\r\n        if (token.startsWith(\"@\")) {\r\n            return new ConstantReference(AtRobotLineLexer.parseNumber(token.substring(1)));\r\n        }\r\n        if (Character.isDigit(token.charAt(0)) || (token.charAt(0) == '-' && token.length() > 1 && Character.isDigit(token.charAt(1)))) {\r\n            return new Constant(AtRobotLineLexer.parseNumber(token));\r\n        }\r\n        if (token.charAt(0) == '!') {\r\n            return new Label(token);\r\n        }\r\n        return new Name(token);\r\n    }\r\n\r\n    abstract public short getValue(Map<String, Symbol> symbols);\r\n\r\n    abstract public short getMicrocode(Map<String, Symbol> symbols);\r\n\r\n    public boolean isUnresolved(Map<String, Symbol> symbols) {\r\n        return false;\r\n    }\r\n\r\n    public void setLineNumber(int lineNumber) {\r\n        this.lineNumber = lineNumber;\r\n    }\r\n\r\n    public int getLineNumber() {\r\n        return lineNumber;\r\n    }\r\n\r\n    private static class Indirect extends Token {\r\n\r\n        private final Token inner;\r\n\r\n        public Indirect(Token inner) {\r\n            this.inner = inner;\r\n        }\r\n\r\n        public short getValue(Map<String, Symbol> symbols) {\r\n            return inner.getValue(symbols);\r\n        }\r\n\r\n        public short getMicrocode(Map<String, Symbol> symbols) {\r\n            return (short) (8 | inner.getMicrocode(symbols));\r\n        }\r\n    }\r\n\r\n    private static class Constant extends Token {\r\n\r\n        private int value;\r\n\r\n        public Constant(int value) {\r\n            this.value = value;\r\n        }\r\n\r\n        public short getValue(Map<String, Symbol> symbols) {\r\n            return (short) value;\r\n        }\r\n\r\n        public short getMicrocode(Map<String, Symbol> symbols) {\r\n            return 0;\r\n        }\r\n    }\r\n\r\n    private abstract static class Resolvable extends Token {\r\n\r\n        protected final String name;\r\n\r\n        protected Resolvable(String name) {\r\n            this.name = name;\r\n        }\r\n\r\n        public short getValue(Map<String, Symbol> symbols) {\r\n            return isUnresolved(symbols) ? 0 : get(symbols).getValue();\r\n        }\r\n\r\n        public short getMicrocode(Map<String, Symbol> symbols) {\r\n            return isUnresolved(symbols) ? getUnresolvedMicrocode() : get(symbols).getMicrocode();\r\n        }\r\n\r\n        protected abstract short getUnresolvedMicrocode();\r\n\r\n        private Symbol get(Map<String, Symbol> symbols) {\r\n            return symbols.get(name);\r\n        }\r\n\r\n        public boolean isUnresolved(Map<String, Symbol> symbols) {\r\n            int old = 0x481;\r\n            int n = 0x488;\r\n            return !symbols.containsKey(name);\r\n        }\r\n\r\n        public String toString() {\r\n            return name;\r\n        }\r\n    }\r\n\r\n    private static class Name extends Resolvable {\r\n\r\n        protected Name(String name) {\r\n            super(name);\r\n        }\r\n\r\n        @Override\r\n        protected short getUnresolvedMicrocode() {\r\n            return AtRobotMicrocodes.CONSTANT;\r\n        }\r\n    }\r\n\r\n    private static class Label extends Resolvable {\r\n\r\n        public Label(String token) {\r\n            super(token);\r\n        }\r\n\r\n        @Override\r\n        protected short getUnresolvedMicrocode() {\r\n            return AtRobotMicrocodes.UNRESOLVED_LABEL;\r\n        }\r\n    }\r\n\r\n    public String toString() {\r\n        return \"<token>\";\r\n    }\r\n\r\n    private static class ConstantReference extends Constant {\r\n\r\n        public ConstantReference(int value) {\r\n            super(value);\r\n        }\r\n\r\n        public short getMicrocode(Map<String, Symbol> symbols) {\r\n            return AtRobotMicrocodes.REFERENCE;\r\n        }\r\n    }\r\n}\r\n",
		"id": "EvoSuiteBenchmark/86_at-robots2-j/src/main/java/net/virtualinfinity/atrobots/compiler/TokenTest1.java",
		"test_prompt": "// TokenTest1.java\npackage net.virtualinfinity.atrobots.compiler;\n\nimport net.virtualinfinity.atrobots.atsetup.AtRobotMicrocodes;\nimport java.util.Map;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link Token}.\n* It contains ten unit test cases for the {@link Token#isUnresolved(Map)} method.\n*/\nclass TokenTest1 {"
	},
	{
		"original_code": "// AtRobotCompiler.java\npackage net.virtualinfinity.atrobots.compiler;\r\n\r\nimport java.io.*;\r\n\r\n/**\r\n * Compiler which will compile source-code.\r\n *\r\n * @author Daniel Pitts\r\n */\r\npublic class AtRobotCompiler {\r\n\r\n    public AtRobotCompiler() {\r\n    }\r\n\r\n    /**\r\n     * Compile the specific file.\r\n     *\r\n     * @param sourceFile the source file.\r\n     * @return a CompilerOutput object.\r\n     * @throws IOException if there is a problem reading from the file.\r\n     */\r\n    public AtRobotCompilerOutput compile(File sourceFile) throws IOException {\r\n        final InputStream in = new FileInputStream(sourceFile);\r\n        try {\r\n            return compile(in);\r\n        } finally {\r\n            in.close();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Compile the source read from the stream.\r\n     *\r\n     * @param in the stream.\r\n     * @return a CompilerOutput object.\r\n     * @throws IOException if there is a problem reading from the stream.\r\n     */\r\n    public AtRobotCompilerOutput compile(InputStream in) throws IOException {\r\n        final Reader reader = new InputStreamReader(in);\r\n        try {\r\n            return compile(reader);\r\n        } finally {\r\n            reader.close();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Compile the source read from the given reader.\r\n     *\r\n     * @param in the reader\r\n     * @return a CompilerOutput object.\r\n     * @throws IOException if there is a problem reading from the reader.\r\n     */\r\n    public AtRobotCompilerOutput compile(Reader in) throws IOException {\r\n        if (in instanceof LineNumberReader) {\r\n            return compile((LineNumberReader) in);\r\n        }\r\n        final LineNumberReader reader = new LineNumberReader(in);\r\n        try {\r\n            return compile(reader);\r\n        } finally {\r\n            reader.close();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Compile the source read from the given reader.\r\n     *\r\n     * @param reader the reader\r\n     * @return a CompilerOutput object.\r\n     * @throws IOException if there is a problem reading from the reader.\r\n     */\r\n    public AtRobotCompilerOutput compile(LineNumberReader reader) throws IOException {\r\n        return new LineNumberReaderCompiler().compile(reader);\r\n    }\r\n}\r\n",
		"id": "EvoSuiteBenchmark/86_at-robots2-j/src/main/java/net/virtualinfinity/atrobots/compiler/AtRobotCompilerTest0.java",
		"test_prompt": "// AtRobotCompilerTest0.java\npackage net.virtualinfinity.atrobots.compiler;\n\nimport java.io.*;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link AtRobotCompiler}.\n* It contains ten unit test cases for the {@link AtRobotCompiler#compile(File)} method.\n*/\nclass AtRobotCompilerTest0 {"
	},
	{
		"original_code": "// AtRobotCompiler.java\npackage net.virtualinfinity.atrobots.compiler;\r\n\r\nimport java.io.*;\r\n\r\n/**\r\n * Compiler which will compile source-code.\r\n *\r\n * @author Daniel Pitts\r\n */\r\npublic class AtRobotCompiler {\r\n\r\n    public AtRobotCompiler() {\r\n    }\r\n\r\n    /**\r\n     * Compile the specific file.\r\n     *\r\n     * @param sourceFile the source file.\r\n     * @return a CompilerOutput object.\r\n     * @throws IOException if there is a problem reading from the file.\r\n     */\r\n    public AtRobotCompilerOutput compile(File sourceFile) throws IOException {\r\n        final InputStream in = new FileInputStream(sourceFile);\r\n        try {\r\n            return compile(in);\r\n        } finally {\r\n            in.close();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Compile the source read from the stream.\r\n     *\r\n     * @param in the stream.\r\n     * @return a CompilerOutput object.\r\n     * @throws IOException if there is a problem reading from the stream.\r\n     */\r\n    public AtRobotCompilerOutput compile(InputStream in) throws IOException {\r\n        final Reader reader = new InputStreamReader(in);\r\n        try {\r\n            return compile(reader);\r\n        } finally {\r\n            reader.close();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Compile the source read from the given reader.\r\n     *\r\n     * @param in the reader\r\n     * @return a CompilerOutput object.\r\n     * @throws IOException if there is a problem reading from the reader.\r\n     */\r\n    public AtRobotCompilerOutput compile(Reader in) throws IOException {\r\n        if (in instanceof LineNumberReader) {\r\n            return compile((LineNumberReader) in);\r\n        }\r\n        final LineNumberReader reader = new LineNumberReader(in);\r\n        try {\r\n            return compile(reader);\r\n        } finally {\r\n            reader.close();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Compile the source read from the given reader.\r\n     *\r\n     * @param reader the reader\r\n     * @return a CompilerOutput object.\r\n     * @throws IOException if there is a problem reading from the reader.\r\n     */\r\n    public AtRobotCompilerOutput compile(LineNumberReader reader) throws IOException {\r\n        return new LineNumberReaderCompiler().compile(reader);\r\n    }\r\n}\r\n",
		"id": "EvoSuiteBenchmark/86_at-robots2-j/src/main/java/net/virtualinfinity/atrobots/compiler/AtRobotCompilerTest1.java",
		"test_prompt": "// AtRobotCompilerTest1.java\npackage net.virtualinfinity.atrobots.compiler;\n\nimport java.io.*;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link AtRobotCompiler}.\n* It contains ten unit test cases for the {@link AtRobotCompiler#compile(InputStream)} method.\n*/\nclass AtRobotCompilerTest1 {"
	},
	{
		"original_code": "// AtRobotCompiler.java\npackage net.virtualinfinity.atrobots.compiler;\r\n\r\nimport java.io.*;\r\n\r\n/**\r\n * Compiler which will compile source-code.\r\n *\r\n * @author Daniel Pitts\r\n */\r\npublic class AtRobotCompiler {\r\n\r\n    public AtRobotCompiler() {\r\n    }\r\n\r\n    /**\r\n     * Compile the specific file.\r\n     *\r\n     * @param sourceFile the source file.\r\n     * @return a CompilerOutput object.\r\n     * @throws IOException if there is a problem reading from the file.\r\n     */\r\n    public AtRobotCompilerOutput compile(File sourceFile) throws IOException {\r\n        final InputStream in = new FileInputStream(sourceFile);\r\n        try {\r\n            return compile(in);\r\n        } finally {\r\n            in.close();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Compile the source read from the stream.\r\n     *\r\n     * @param in the stream.\r\n     * @return a CompilerOutput object.\r\n     * @throws IOException if there is a problem reading from the stream.\r\n     */\r\n    public AtRobotCompilerOutput compile(InputStream in) throws IOException {\r\n        final Reader reader = new InputStreamReader(in);\r\n        try {\r\n            return compile(reader);\r\n        } finally {\r\n            reader.close();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Compile the source read from the given reader.\r\n     *\r\n     * @param in the reader\r\n     * @return a CompilerOutput object.\r\n     * @throws IOException if there is a problem reading from the reader.\r\n     */\r\n    public AtRobotCompilerOutput compile(Reader in) throws IOException {\r\n        if (in instanceof LineNumberReader) {\r\n            return compile((LineNumberReader) in);\r\n        }\r\n        final LineNumberReader reader = new LineNumberReader(in);\r\n        try {\r\n            return compile(reader);\r\n        } finally {\r\n            reader.close();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Compile the source read from the given reader.\r\n     *\r\n     * @param reader the reader\r\n     * @return a CompilerOutput object.\r\n     * @throws IOException if there is a problem reading from the reader.\r\n     */\r\n    public AtRobotCompilerOutput compile(LineNumberReader reader) throws IOException {\r\n        return new LineNumberReaderCompiler().compile(reader);\r\n    }\r\n}\r\n",
		"id": "EvoSuiteBenchmark/86_at-robots2-j/src/main/java/net/virtualinfinity/atrobots/compiler/AtRobotCompilerTest2.java",
		"test_prompt": "// AtRobotCompilerTest2.java\npackage net.virtualinfinity.atrobots.compiler;\n\nimport java.io.*;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link AtRobotCompiler}.\n* It contains ten unit test cases for the {@link AtRobotCompiler#compile(Reader)} method.\n*/\nclass AtRobotCompilerTest2 {"
	},
	{
		"original_code": "// AtRobotCompiler.java\npackage net.virtualinfinity.atrobots.compiler;\r\n\r\nimport java.io.*;\r\n\r\n/**\r\n * Compiler which will compile source-code.\r\n *\r\n * @author Daniel Pitts\r\n */\r\npublic class AtRobotCompiler {\r\n\r\n    public AtRobotCompiler() {\r\n    }\r\n\r\n    /**\r\n     * Compile the specific file.\r\n     *\r\n     * @param sourceFile the source file.\r\n     * @return a CompilerOutput object.\r\n     * @throws IOException if there is a problem reading from the file.\r\n     */\r\n    public AtRobotCompilerOutput compile(File sourceFile) throws IOException {\r\n        final InputStream in = new FileInputStream(sourceFile);\r\n        try {\r\n            return compile(in);\r\n        } finally {\r\n            in.close();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Compile the source read from the stream.\r\n     *\r\n     * @param in the stream.\r\n     * @return a CompilerOutput object.\r\n     * @throws IOException if there is a problem reading from the stream.\r\n     */\r\n    public AtRobotCompilerOutput compile(InputStream in) throws IOException {\r\n        final Reader reader = new InputStreamReader(in);\r\n        try {\r\n            return compile(reader);\r\n        } finally {\r\n            reader.close();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Compile the source read from the given reader.\r\n     *\r\n     * @param in the reader\r\n     * @return a CompilerOutput object.\r\n     * @throws IOException if there is a problem reading from the reader.\r\n     */\r\n    public AtRobotCompilerOutput compile(Reader in) throws IOException {\r\n        if (in instanceof LineNumberReader) {\r\n            return compile((LineNumberReader) in);\r\n        }\r\n        final LineNumberReader reader = new LineNumberReader(in);\r\n        try {\r\n            return compile(reader);\r\n        } finally {\r\n            reader.close();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Compile the source read from the given reader.\r\n     *\r\n     * @param reader the reader\r\n     * @return a CompilerOutput object.\r\n     * @throws IOException if there is a problem reading from the reader.\r\n     */\r\n    public AtRobotCompilerOutput compile(LineNumberReader reader) throws IOException {\r\n        return new LineNumberReaderCompiler().compile(reader);\r\n    }\r\n}\r\n",
		"id": "EvoSuiteBenchmark/86_at-robots2-j/src/main/java/net/virtualinfinity/atrobots/compiler/AtRobotCompilerTest3.java",
		"test_prompt": "// AtRobotCompilerTest3.java\npackage net.virtualinfinity.atrobots.compiler;\n\nimport java.io.*;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link AtRobotCompiler}.\n* It contains ten unit test cases for the {@link AtRobotCompiler#compile(LineNumberReader)} method.\n*/\nclass AtRobotCompilerTest3 {"
	},
	{
		"original_code": "// HardwareSpecification.java\npackage net.virtualinfinity.atrobots.compiler;\r\n\r\nimport net.virtualinfinity.atrobots.computer.HardwareBus;\r\nimport net.virtualinfinity.atrobots.hardware.armor.Armor;\r\nimport net.virtualinfinity.atrobots.hardware.mines.MineLayer;\r\nimport net.virtualinfinity.atrobots.hardware.missiles.MissileLauncher;\r\nimport net.virtualinfinity.atrobots.hardware.radio.Transceiver;\r\nimport net.virtualinfinity.atrobots.hardware.scanning.radar.Radar;\r\nimport net.virtualinfinity.atrobots.hardware.scanning.scanner.Scanner;\r\nimport net.virtualinfinity.atrobots.hardware.scanning.sonar.Sonar;\r\nimport net.virtualinfinity.atrobots.hardware.shield.Shield;\r\nimport net.virtualinfinity.atrobots.hardware.throttle.Throttle;\r\nimport net.virtualinfinity.atrobots.hardware.transponder.Transponder;\r\nimport net.virtualinfinity.atrobots.hardware.turret.Turret;\r\nimport java.util.Map;\r\n\r\n/**\r\n * A factory for various configurable hardware components.\r\n *\r\n * @author Daniel Pitts\r\n */\r\npublic class HardwareSpecification {\r\n\r\n    private final Map<String, Integer> configs;\r\n\r\n    public static final String SCANNER = \"scanner\";\r\n\r\n    public static final String WEAPON = \"weapon\";\r\n\r\n    public static final String ARMOR = \"armor\";\r\n\r\n    public static final String ENGINE = \"engine\";\r\n\r\n    public static final String HEATSINKS = \"heatsinks\";\r\n\r\n    public static final String MINES = \"mines\";\r\n\r\n    public static final String SHIELD = \"shield\";\r\n\r\n    public HardwareSpecification(Map<String, Integer> configs) {\r\n        this.configs = configs;\r\n    }\r\n\r\n    public Armor createArmor() {\r\n        return new Armor(chooseFor(ARMOR, 50, 66, 100, 120, 130, 150));\r\n    }\r\n\r\n    public MineLayer createMineLayer() {\r\n        return new MineLayer(chooseFor(MINES, 2, 4, 6, 10, 16, 24));\r\n    }\r\n\r\n    public Radar createRadar() {\r\n        return new Radar();\r\n    }\r\n\r\n    public Shield createShield() {\r\n        return new Shield(chooseFor(SHIELD, 1.0, 1.0, 1.0, 2.0 / 3, 1.0 / 2, 1.0 / 3));\r\n    }\r\n\r\n    public Sonar createSonar() {\r\n        return new Sonar();\r\n    }\r\n\r\n    public Transceiver createTransceiver() {\r\n        return new Transceiver();\r\n    }\r\n\r\n    public Transponder createTransponder() {\r\n        return new Transponder();\r\n    }\r\n\r\n    public Turret createTurret() {\r\n        return new Turret();\r\n    }\r\n\r\n    private Scanner createScanner() {\r\n        return new Scanner(chooseFor(SCANNER, 250, 350, 500, 700, 1000, 1500));\r\n    }\r\n\r\n    private Throttle createThrottle() {\r\n        return new Throttle(chooseFor(ENGINE, 0.5, 0.8, 1.0, 1.12, 1.35, 1.50) * chooseFor(ARMOR, 1.33, 1.20, 1.00, 0.85, 0.75, 0.66));\r\n    }\r\n\r\n    private <T> T chooseFor(String name, T... values) {\r\n        return values[Math.max(0, Math.min(configs.get(name), values.length))];\r\n    }\r\n\r\n    /**\r\n     * Configure the specific hardware context based on this spec.\r\n     *\r\n     * @param robotConfigurer the context to configure.\r\n     */\r\n    public void buildRobotConfigurer(RobotConfigurer robotConfigurer) {\r\n        robotConfigurer.setThrottle(createThrottle());\r\n        robotConfigurer.setCoolMultiplier(chooseFor(HEATSINKS, 0.75, 1.00, 1.125, 1.25, 1.33, 1.50));\r\n        robotConfigurer.setArmor(createArmor());\r\n        robotConfigurer.setMineLayer(createMineLayer());\r\n        robotConfigurer.setRadar(createRadar());\r\n        robotConfigurer.setShield(createShield());\r\n        robotConfigurer.setSonar(createSonar());\r\n        robotConfigurer.setTransceiver(createTransceiver());\r\n        robotConfigurer.setTransponder(createTransponder());\r\n        robotConfigurer.setTurret(createTurret());\r\n        robotConfigurer.setMissileLauncher(new MissileLauncher());\r\n        robotConfigurer.setMissileLauncherPower(chooseFor(WEAPON, .5, .8, 1.0, 1.2, 1.35, 1.5));\r\n        robotConfigurer.setScanner(createScanner());\r\n        robotConfigurer.setHardwareBus(new HardwareBus());\r\n    }\r\n}\r\n",
		"id": "EvoSuiteBenchmark/86_at-robots2-j/src/main/java/net/virtualinfinity/atrobots/compiler/HardwareSpecificationTest0.java",
		"test_prompt": "// HardwareSpecificationTest0.java\npackage net.virtualinfinity.atrobots.compiler;\n\nimport net.virtualinfinity.atrobots.computer.HardwareBus;\nimport net.virtualinfinity.atrobots.hardware.armor.Armor;\nimport net.virtualinfinity.atrobots.hardware.mines.MineLayer;\nimport net.virtualinfinity.atrobots.hardware.missiles.MissileLauncher;\nimport net.virtualinfinity.atrobots.hardware.radio.Transceiver;\nimport net.virtualinfinity.atrobots.hardware.scanning.radar.Radar;\nimport net.virtualinfinity.atrobots.hardware.scanning.scanner.Scanner;\nimport net.virtualinfinity.atrobots.hardware.scanning.sonar.Sonar;\nimport net.virtualinfinity.atrobots.hardware.shield.Shield;\nimport net.virtualinfinity.atrobots.hardware.throttle.Throttle;\nimport net.virtualinfinity.atrobots.hardware.transponder.Transponder;\nimport net.virtualinfinity.atrobots.hardware.turret.Turret;\nimport java.util.Map;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link HardwareSpecification}.\n* It contains ten unit test cases for the {@link HardwareSpecification#createArmor()} method.\n*/\nclass HardwareSpecificationTest0 {"
	},
	{
		"original_code": "// HardwareSpecification.java\npackage net.virtualinfinity.atrobots.compiler;\r\n\r\nimport net.virtualinfinity.atrobots.computer.HardwareBus;\r\nimport net.virtualinfinity.atrobots.hardware.armor.Armor;\r\nimport net.virtualinfinity.atrobots.hardware.mines.MineLayer;\r\nimport net.virtualinfinity.atrobots.hardware.missiles.MissileLauncher;\r\nimport net.virtualinfinity.atrobots.hardware.radio.Transceiver;\r\nimport net.virtualinfinity.atrobots.hardware.scanning.radar.Radar;\r\nimport net.virtualinfinity.atrobots.hardware.scanning.scanner.Scanner;\r\nimport net.virtualinfinity.atrobots.hardware.scanning.sonar.Sonar;\r\nimport net.virtualinfinity.atrobots.hardware.shield.Shield;\r\nimport net.virtualinfinity.atrobots.hardware.throttle.Throttle;\r\nimport net.virtualinfinity.atrobots.hardware.transponder.Transponder;\r\nimport net.virtualinfinity.atrobots.hardware.turret.Turret;\r\nimport java.util.Map;\r\n\r\n/**\r\n * A factory for various configurable hardware components.\r\n *\r\n * @author Daniel Pitts\r\n */\r\npublic class HardwareSpecification {\r\n\r\n    private final Map<String, Integer> configs;\r\n\r\n    public static final String SCANNER = \"scanner\";\r\n\r\n    public static final String WEAPON = \"weapon\";\r\n\r\n    public static final String ARMOR = \"armor\";\r\n\r\n    public static final String ENGINE = \"engine\";\r\n\r\n    public static final String HEATSINKS = \"heatsinks\";\r\n\r\n    public static final String MINES = \"mines\";\r\n\r\n    public static final String SHIELD = \"shield\";\r\n\r\n    public HardwareSpecification(Map<String, Integer> configs) {\r\n        this.configs = configs;\r\n    }\r\n\r\n    public Armor createArmor() {\r\n        return new Armor(chooseFor(ARMOR, 50, 66, 100, 120, 130, 150));\r\n    }\r\n\r\n    public MineLayer createMineLayer() {\r\n        return new MineLayer(chooseFor(MINES, 2, 4, 6, 10, 16, 24));\r\n    }\r\n\r\n    public Radar createRadar() {\r\n        return new Radar();\r\n    }\r\n\r\n    public Shield createShield() {\r\n        return new Shield(chooseFor(SHIELD, 1.0, 1.0, 1.0, 2.0 / 3, 1.0 / 2, 1.0 / 3));\r\n    }\r\n\r\n    public Sonar createSonar() {\r\n        return new Sonar();\r\n    }\r\n\r\n    public Transceiver createTransceiver() {\r\n        return new Transceiver();\r\n    }\r\n\r\n    public Transponder createTransponder() {\r\n        return new Transponder();\r\n    }\r\n\r\n    public Turret createTurret() {\r\n        return new Turret();\r\n    }\r\n\r\n    private Scanner createScanner() {\r\n        return new Scanner(chooseFor(SCANNER, 250, 350, 500, 700, 1000, 1500));\r\n    }\r\n\r\n    private Throttle createThrottle() {\r\n        return new Throttle(chooseFor(ENGINE, 0.5, 0.8, 1.0, 1.12, 1.35, 1.50) * chooseFor(ARMOR, 1.33, 1.20, 1.00, 0.85, 0.75, 0.66));\r\n    }\r\n\r\n    private <T> T chooseFor(String name, T... values) {\r\n        return values[Math.max(0, Math.min(configs.get(name), values.length))];\r\n    }\r\n\r\n    /**\r\n     * Configure the specific hardware context based on this spec.\r\n     *\r\n     * @param robotConfigurer the context to configure.\r\n     */\r\n    public void buildRobotConfigurer(RobotConfigurer robotConfigurer) {\r\n        robotConfigurer.setThrottle(createThrottle());\r\n        robotConfigurer.setCoolMultiplier(chooseFor(HEATSINKS, 0.75, 1.00, 1.125, 1.25, 1.33, 1.50));\r\n        robotConfigurer.setArmor(createArmor());\r\n        robotConfigurer.setMineLayer(createMineLayer());\r\n        robotConfigurer.setRadar(createRadar());\r\n        robotConfigurer.setShield(createShield());\r\n        robotConfigurer.setSonar(createSonar());\r\n        robotConfigurer.setTransceiver(createTransceiver());\r\n        robotConfigurer.setTransponder(createTransponder());\r\n        robotConfigurer.setTurret(createTurret());\r\n        robotConfigurer.setMissileLauncher(new MissileLauncher());\r\n        robotConfigurer.setMissileLauncherPower(chooseFor(WEAPON, .5, .8, 1.0, 1.2, 1.35, 1.5));\r\n        robotConfigurer.setScanner(createScanner());\r\n        robotConfigurer.setHardwareBus(new HardwareBus());\r\n    }\r\n}\r\n",
		"id": "EvoSuiteBenchmark/86_at-robots2-j/src/main/java/net/virtualinfinity/atrobots/compiler/HardwareSpecificationTest1.java",
		"test_prompt": "// HardwareSpecificationTest1.java\npackage net.virtualinfinity.atrobots.compiler;\n\nimport net.virtualinfinity.atrobots.computer.HardwareBus;\nimport net.virtualinfinity.atrobots.hardware.armor.Armor;\nimport net.virtualinfinity.atrobots.hardware.mines.MineLayer;\nimport net.virtualinfinity.atrobots.hardware.missiles.MissileLauncher;\nimport net.virtualinfinity.atrobots.hardware.radio.Transceiver;\nimport net.virtualinfinity.atrobots.hardware.scanning.radar.Radar;\nimport net.virtualinfinity.atrobots.hardware.scanning.scanner.Scanner;\nimport net.virtualinfinity.atrobots.hardware.scanning.sonar.Sonar;\nimport net.virtualinfinity.atrobots.hardware.shield.Shield;\nimport net.virtualinfinity.atrobots.hardware.throttle.Throttle;\nimport net.virtualinfinity.atrobots.hardware.transponder.Transponder;\nimport net.virtualinfinity.atrobots.hardware.turret.Turret;\nimport java.util.Map;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link HardwareSpecification}.\n* It contains ten unit test cases for the {@link HardwareSpecification#createMineLayer()} method.\n*/\nclass HardwareSpecificationTest1 {"
	},
	{
		"original_code": "// HardwareSpecification.java\npackage net.virtualinfinity.atrobots.compiler;\r\n\r\nimport net.virtualinfinity.atrobots.computer.HardwareBus;\r\nimport net.virtualinfinity.atrobots.hardware.armor.Armor;\r\nimport net.virtualinfinity.atrobots.hardware.mines.MineLayer;\r\nimport net.virtualinfinity.atrobots.hardware.missiles.MissileLauncher;\r\nimport net.virtualinfinity.atrobots.hardware.radio.Transceiver;\r\nimport net.virtualinfinity.atrobots.hardware.scanning.radar.Radar;\r\nimport net.virtualinfinity.atrobots.hardware.scanning.scanner.Scanner;\r\nimport net.virtualinfinity.atrobots.hardware.scanning.sonar.Sonar;\r\nimport net.virtualinfinity.atrobots.hardware.shield.Shield;\r\nimport net.virtualinfinity.atrobots.hardware.throttle.Throttle;\r\nimport net.virtualinfinity.atrobots.hardware.transponder.Transponder;\r\nimport net.virtualinfinity.atrobots.hardware.turret.Turret;\r\nimport java.util.Map;\r\n\r\n/**\r\n * A factory for various configurable hardware components.\r\n *\r\n * @author Daniel Pitts\r\n */\r\npublic class HardwareSpecification {\r\n\r\n    private final Map<String, Integer> configs;\r\n\r\n    public static final String SCANNER = \"scanner\";\r\n\r\n    public static final String WEAPON = \"weapon\";\r\n\r\n    public static final String ARMOR = \"armor\";\r\n\r\n    public static final String ENGINE = \"engine\";\r\n\r\n    public static final String HEATSINKS = \"heatsinks\";\r\n\r\n    public static final String MINES = \"mines\";\r\n\r\n    public static final String SHIELD = \"shield\";\r\n\r\n    public HardwareSpecification(Map<String, Integer> configs) {\r\n        this.configs = configs;\r\n    }\r\n\r\n    public Armor createArmor() {\r\n        return new Armor(chooseFor(ARMOR, 50, 66, 100, 120, 130, 150));\r\n    }\r\n\r\n    public MineLayer createMineLayer() {\r\n        return new MineLayer(chooseFor(MINES, 2, 4, 6, 10, 16, 24));\r\n    }\r\n\r\n    public Radar createRadar() {\r\n        return new Radar();\r\n    }\r\n\r\n    public Shield createShield() {\r\n        return new Shield(chooseFor(SHIELD, 1.0, 1.0, 1.0, 2.0 / 3, 1.0 / 2, 1.0 / 3));\r\n    }\r\n\r\n    public Sonar createSonar() {\r\n        return new Sonar();\r\n    }\r\n\r\n    public Transceiver createTransceiver() {\r\n        return new Transceiver();\r\n    }\r\n\r\n    public Transponder createTransponder() {\r\n        return new Transponder();\r\n    }\r\n\r\n    public Turret createTurret() {\r\n        return new Turret();\r\n    }\r\n\r\n    private Scanner createScanner() {\r\n        return new Scanner(chooseFor(SCANNER, 250, 350, 500, 700, 1000, 1500));\r\n    }\r\n\r\n    private Throttle createThrottle() {\r\n        return new Throttle(chooseFor(ENGINE, 0.5, 0.8, 1.0, 1.12, 1.35, 1.50) * chooseFor(ARMOR, 1.33, 1.20, 1.00, 0.85, 0.75, 0.66));\r\n    }\r\n\r\n    private <T> T chooseFor(String name, T... values) {\r\n        return values[Math.max(0, Math.min(configs.get(name), values.length))];\r\n    }\r\n\r\n    /**\r\n     * Configure the specific hardware context based on this spec.\r\n     *\r\n     * @param robotConfigurer the context to configure.\r\n     */\r\n    public void buildRobotConfigurer(RobotConfigurer robotConfigurer) {\r\n        robotConfigurer.setThrottle(createThrottle());\r\n        robotConfigurer.setCoolMultiplier(chooseFor(HEATSINKS, 0.75, 1.00, 1.125, 1.25, 1.33, 1.50));\r\n        robotConfigurer.setArmor(createArmor());\r\n        robotConfigurer.setMineLayer(createMineLayer());\r\n        robotConfigurer.setRadar(createRadar());\r\n        robotConfigurer.setShield(createShield());\r\n        robotConfigurer.setSonar(createSonar());\r\n        robotConfigurer.setTransceiver(createTransceiver());\r\n        robotConfigurer.setTransponder(createTransponder());\r\n        robotConfigurer.setTurret(createTurret());\r\n        robotConfigurer.setMissileLauncher(new MissileLauncher());\r\n        robotConfigurer.setMissileLauncherPower(chooseFor(WEAPON, .5, .8, 1.0, 1.2, 1.35, 1.5));\r\n        robotConfigurer.setScanner(createScanner());\r\n        robotConfigurer.setHardwareBus(new HardwareBus());\r\n    }\r\n}\r\n",
		"id": "EvoSuiteBenchmark/86_at-robots2-j/src/main/java/net/virtualinfinity/atrobots/compiler/HardwareSpecificationTest2.java",
		"test_prompt": "// HardwareSpecificationTest2.java\npackage net.virtualinfinity.atrobots.compiler;\n\nimport net.virtualinfinity.atrobots.computer.HardwareBus;\nimport net.virtualinfinity.atrobots.hardware.armor.Armor;\nimport net.virtualinfinity.atrobots.hardware.mines.MineLayer;\nimport net.virtualinfinity.atrobots.hardware.missiles.MissileLauncher;\nimport net.virtualinfinity.atrobots.hardware.radio.Transceiver;\nimport net.virtualinfinity.atrobots.hardware.scanning.radar.Radar;\nimport net.virtualinfinity.atrobots.hardware.scanning.scanner.Scanner;\nimport net.virtualinfinity.atrobots.hardware.scanning.sonar.Sonar;\nimport net.virtualinfinity.atrobots.hardware.shield.Shield;\nimport net.virtualinfinity.atrobots.hardware.throttle.Throttle;\nimport net.virtualinfinity.atrobots.hardware.transponder.Transponder;\nimport net.virtualinfinity.atrobots.hardware.turret.Turret;\nimport java.util.Map;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link HardwareSpecification}.\n* It contains ten unit test cases for the {@link HardwareSpecification#createRadar()} method.\n*/\nclass HardwareSpecificationTest2 {"
	},
	{
		"original_code": "// HardwareSpecification.java\npackage net.virtualinfinity.atrobots.compiler;\r\n\r\nimport net.virtualinfinity.atrobots.computer.HardwareBus;\r\nimport net.virtualinfinity.atrobots.hardware.armor.Armor;\r\nimport net.virtualinfinity.atrobots.hardware.mines.MineLayer;\r\nimport net.virtualinfinity.atrobots.hardware.missiles.MissileLauncher;\r\nimport net.virtualinfinity.atrobots.hardware.radio.Transceiver;\r\nimport net.virtualinfinity.atrobots.hardware.scanning.radar.Radar;\r\nimport net.virtualinfinity.atrobots.hardware.scanning.scanner.Scanner;\r\nimport net.virtualinfinity.atrobots.hardware.scanning.sonar.Sonar;\r\nimport net.virtualinfinity.atrobots.hardware.shield.Shield;\r\nimport net.virtualinfinity.atrobots.hardware.throttle.Throttle;\r\nimport net.virtualinfinity.atrobots.hardware.transponder.Transponder;\r\nimport net.virtualinfinity.atrobots.hardware.turret.Turret;\r\nimport java.util.Map;\r\n\r\n/**\r\n * A factory for various configurable hardware components.\r\n *\r\n * @author Daniel Pitts\r\n */\r\npublic class HardwareSpecification {\r\n\r\n    private final Map<String, Integer> configs;\r\n\r\n    public static final String SCANNER = \"scanner\";\r\n\r\n    public static final String WEAPON = \"weapon\";\r\n\r\n    public static final String ARMOR = \"armor\";\r\n\r\n    public static final String ENGINE = \"engine\";\r\n\r\n    public static final String HEATSINKS = \"heatsinks\";\r\n\r\n    public static final String MINES = \"mines\";\r\n\r\n    public static final String SHIELD = \"shield\";\r\n\r\n    public HardwareSpecification(Map<String, Integer> configs) {\r\n        this.configs = configs;\r\n    }\r\n\r\n    public Armor createArmor() {\r\n        return new Armor(chooseFor(ARMOR, 50, 66, 100, 120, 130, 150));\r\n    }\r\n\r\n    public MineLayer createMineLayer() {\r\n        return new MineLayer(chooseFor(MINES, 2, 4, 6, 10, 16, 24));\r\n    }\r\n\r\n    public Radar createRadar() {\r\n        return new Radar();\r\n    }\r\n\r\n    public Shield createShield() {\r\n        return new Shield(chooseFor(SHIELD, 1.0, 1.0, 1.0, 2.0 / 3, 1.0 / 2, 1.0 / 3));\r\n    }\r\n\r\n    public Sonar createSonar() {\r\n        return new Sonar();\r\n    }\r\n\r\n    public Transceiver createTransceiver() {\r\n        return new Transceiver();\r\n    }\r\n\r\n    public Transponder createTransponder() {\r\n        return new Transponder();\r\n    }\r\n\r\n    public Turret createTurret() {\r\n        return new Turret();\r\n    }\r\n\r\n    private Scanner createScanner() {\r\n        return new Scanner(chooseFor(SCANNER, 250, 350, 500, 700, 1000, 1500));\r\n    }\r\n\r\n    private Throttle createThrottle() {\r\n        return new Throttle(chooseFor(ENGINE, 0.5, 0.8, 1.0, 1.12, 1.35, 1.50) * chooseFor(ARMOR, 1.33, 1.20, 1.00, 0.85, 0.75, 0.66));\r\n    }\r\n\r\n    private <T> T chooseFor(String name, T... values) {\r\n        return values[Math.max(0, Math.min(configs.get(name), values.length))];\r\n    }\r\n\r\n    /**\r\n     * Configure the specific hardware context based on this spec.\r\n     *\r\n     * @param robotConfigurer the context to configure.\r\n     */\r\n    public void buildRobotConfigurer(RobotConfigurer robotConfigurer) {\r\n        robotConfigurer.setThrottle(createThrottle());\r\n        robotConfigurer.setCoolMultiplier(chooseFor(HEATSINKS, 0.75, 1.00, 1.125, 1.25, 1.33, 1.50));\r\n        robotConfigurer.setArmor(createArmor());\r\n        robotConfigurer.setMineLayer(createMineLayer());\r\n        robotConfigurer.setRadar(createRadar());\r\n        robotConfigurer.setShield(createShield());\r\n        robotConfigurer.setSonar(createSonar());\r\n        robotConfigurer.setTransceiver(createTransceiver());\r\n        robotConfigurer.setTransponder(createTransponder());\r\n        robotConfigurer.setTurret(createTurret());\r\n        robotConfigurer.setMissileLauncher(new MissileLauncher());\r\n        robotConfigurer.setMissileLauncherPower(chooseFor(WEAPON, .5, .8, 1.0, 1.2, 1.35, 1.5));\r\n        robotConfigurer.setScanner(createScanner());\r\n        robotConfigurer.setHardwareBus(new HardwareBus());\r\n    }\r\n}\r\n",
		"id": "EvoSuiteBenchmark/86_at-robots2-j/src/main/java/net/virtualinfinity/atrobots/compiler/HardwareSpecificationTest3.java",
		"test_prompt": "// HardwareSpecificationTest3.java\npackage net.virtualinfinity.atrobots.compiler;\n\nimport net.virtualinfinity.atrobots.computer.HardwareBus;\nimport net.virtualinfinity.atrobots.hardware.armor.Armor;\nimport net.virtualinfinity.atrobots.hardware.mines.MineLayer;\nimport net.virtualinfinity.atrobots.hardware.missiles.MissileLauncher;\nimport net.virtualinfinity.atrobots.hardware.radio.Transceiver;\nimport net.virtualinfinity.atrobots.hardware.scanning.radar.Radar;\nimport net.virtualinfinity.atrobots.hardware.scanning.scanner.Scanner;\nimport net.virtualinfinity.atrobots.hardware.scanning.sonar.Sonar;\nimport net.virtualinfinity.atrobots.hardware.shield.Shield;\nimport net.virtualinfinity.atrobots.hardware.throttle.Throttle;\nimport net.virtualinfinity.atrobots.hardware.transponder.Transponder;\nimport net.virtualinfinity.atrobots.hardware.turret.Turret;\nimport java.util.Map;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link HardwareSpecification}.\n* It contains ten unit test cases for the {@link HardwareSpecification#createShield()} method.\n*/\nclass HardwareSpecificationTest3 {"
	},
	{
		"original_code": "// HardwareSpecification.java\npackage net.virtualinfinity.atrobots.compiler;\r\n\r\nimport net.virtualinfinity.atrobots.computer.HardwareBus;\r\nimport net.virtualinfinity.atrobots.hardware.armor.Armor;\r\nimport net.virtualinfinity.atrobots.hardware.mines.MineLayer;\r\nimport net.virtualinfinity.atrobots.hardware.missiles.MissileLauncher;\r\nimport net.virtualinfinity.atrobots.hardware.radio.Transceiver;\r\nimport net.virtualinfinity.atrobots.hardware.scanning.radar.Radar;\r\nimport net.virtualinfinity.atrobots.hardware.scanning.scanner.Scanner;\r\nimport net.virtualinfinity.atrobots.hardware.scanning.sonar.Sonar;\r\nimport net.virtualinfinity.atrobots.hardware.shield.Shield;\r\nimport net.virtualinfinity.atrobots.hardware.throttle.Throttle;\r\nimport net.virtualinfinity.atrobots.hardware.transponder.Transponder;\r\nimport net.virtualinfinity.atrobots.hardware.turret.Turret;\r\nimport java.util.Map;\r\n\r\n/**\r\n * A factory for various configurable hardware components.\r\n *\r\n * @author Daniel Pitts\r\n */\r\npublic class HardwareSpecification {\r\n\r\n    private final Map<String, Integer> configs;\r\n\r\n    public static final String SCANNER = \"scanner\";\r\n\r\n    public static final String WEAPON = \"weapon\";\r\n\r\n    public static final String ARMOR = \"armor\";\r\n\r\n    public static final String ENGINE = \"engine\";\r\n\r\n    public static final String HEATSINKS = \"heatsinks\";\r\n\r\n    public static final String MINES = \"mines\";\r\n\r\n    public static final String SHIELD = \"shield\";\r\n\r\n    public HardwareSpecification(Map<String, Integer> configs) {\r\n        this.configs = configs;\r\n    }\r\n\r\n    public Armor createArmor() {\r\n        return new Armor(chooseFor(ARMOR, 50, 66, 100, 120, 130, 150));\r\n    }\r\n\r\n    public MineLayer createMineLayer() {\r\n        return new MineLayer(chooseFor(MINES, 2, 4, 6, 10, 16, 24));\r\n    }\r\n\r\n    public Radar createRadar() {\r\n        return new Radar();\r\n    }\r\n\r\n    public Shield createShield() {\r\n        return new Shield(chooseFor(SHIELD, 1.0, 1.0, 1.0, 2.0 / 3, 1.0 / 2, 1.0 / 3));\r\n    }\r\n\r\n    public Sonar createSonar() {\r\n        return new Sonar();\r\n    }\r\n\r\n    public Transceiver createTransceiver() {\r\n        return new Transceiver();\r\n    }\r\n\r\n    public Transponder createTransponder() {\r\n        return new Transponder();\r\n    }\r\n\r\n    public Turret createTurret() {\r\n        return new Turret();\r\n    }\r\n\r\n    private Scanner createScanner() {\r\n        return new Scanner(chooseFor(SCANNER, 250, 350, 500, 700, 1000, 1500));\r\n    }\r\n\r\n    private Throttle createThrottle() {\r\n        return new Throttle(chooseFor(ENGINE, 0.5, 0.8, 1.0, 1.12, 1.35, 1.50) * chooseFor(ARMOR, 1.33, 1.20, 1.00, 0.85, 0.75, 0.66));\r\n    }\r\n\r\n    private <T> T chooseFor(String name, T... values) {\r\n        return values[Math.max(0, Math.min(configs.get(name), values.length))];\r\n    }\r\n\r\n    /**\r\n     * Configure the specific hardware context based on this spec.\r\n     *\r\n     * @param robotConfigurer the context to configure.\r\n     */\r\n    public void buildRobotConfigurer(RobotConfigurer robotConfigurer) {\r\n        robotConfigurer.setThrottle(createThrottle());\r\n        robotConfigurer.setCoolMultiplier(chooseFor(HEATSINKS, 0.75, 1.00, 1.125, 1.25, 1.33, 1.50));\r\n        robotConfigurer.setArmor(createArmor());\r\n        robotConfigurer.setMineLayer(createMineLayer());\r\n        robotConfigurer.setRadar(createRadar());\r\n        robotConfigurer.setShield(createShield());\r\n        robotConfigurer.setSonar(createSonar());\r\n        robotConfigurer.setTransceiver(createTransceiver());\r\n        robotConfigurer.setTransponder(createTransponder());\r\n        robotConfigurer.setTurret(createTurret());\r\n        robotConfigurer.setMissileLauncher(new MissileLauncher());\r\n        robotConfigurer.setMissileLauncherPower(chooseFor(WEAPON, .5, .8, 1.0, 1.2, 1.35, 1.5));\r\n        robotConfigurer.setScanner(createScanner());\r\n        robotConfigurer.setHardwareBus(new HardwareBus());\r\n    }\r\n}\r\n",
		"id": "EvoSuiteBenchmark/86_at-robots2-j/src/main/java/net/virtualinfinity/atrobots/compiler/HardwareSpecificationTest4.java",
		"test_prompt": "// HardwareSpecificationTest4.java\npackage net.virtualinfinity.atrobots.compiler;\n\nimport net.virtualinfinity.atrobots.computer.HardwareBus;\nimport net.virtualinfinity.atrobots.hardware.armor.Armor;\nimport net.virtualinfinity.atrobots.hardware.mines.MineLayer;\nimport net.virtualinfinity.atrobots.hardware.missiles.MissileLauncher;\nimport net.virtualinfinity.atrobots.hardware.radio.Transceiver;\nimport net.virtualinfinity.atrobots.hardware.scanning.radar.Radar;\nimport net.virtualinfinity.atrobots.hardware.scanning.scanner.Scanner;\nimport net.virtualinfinity.atrobots.hardware.scanning.sonar.Sonar;\nimport net.virtualinfinity.atrobots.hardware.shield.Shield;\nimport net.virtualinfinity.atrobots.hardware.throttle.Throttle;\nimport net.virtualinfinity.atrobots.hardware.transponder.Transponder;\nimport net.virtualinfinity.atrobots.hardware.turret.Turret;\nimport java.util.Map;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link HardwareSpecification}.\n* It contains ten unit test cases for the {@link HardwareSpecification#createSonar()} method.\n*/\nclass HardwareSpecificationTest4 {"
	},
	{
		"original_code": "// HardwareSpecification.java\npackage net.virtualinfinity.atrobots.compiler;\r\n\r\nimport net.virtualinfinity.atrobots.computer.HardwareBus;\r\nimport net.virtualinfinity.atrobots.hardware.armor.Armor;\r\nimport net.virtualinfinity.atrobots.hardware.mines.MineLayer;\r\nimport net.virtualinfinity.atrobots.hardware.missiles.MissileLauncher;\r\nimport net.virtualinfinity.atrobots.hardware.radio.Transceiver;\r\nimport net.virtualinfinity.atrobots.hardware.scanning.radar.Radar;\r\nimport net.virtualinfinity.atrobots.hardware.scanning.scanner.Scanner;\r\nimport net.virtualinfinity.atrobots.hardware.scanning.sonar.Sonar;\r\nimport net.virtualinfinity.atrobots.hardware.shield.Shield;\r\nimport net.virtualinfinity.atrobots.hardware.throttle.Throttle;\r\nimport net.virtualinfinity.atrobots.hardware.transponder.Transponder;\r\nimport net.virtualinfinity.atrobots.hardware.turret.Turret;\r\nimport java.util.Map;\r\n\r\n/**\r\n * A factory for various configurable hardware components.\r\n *\r\n * @author Daniel Pitts\r\n */\r\npublic class HardwareSpecification {\r\n\r\n    private final Map<String, Integer> configs;\r\n\r\n    public static final String SCANNER = \"scanner\";\r\n\r\n    public static final String WEAPON = \"weapon\";\r\n\r\n    public static final String ARMOR = \"armor\";\r\n\r\n    public static final String ENGINE = \"engine\";\r\n\r\n    public static final String HEATSINKS = \"heatsinks\";\r\n\r\n    public static final String MINES = \"mines\";\r\n\r\n    public static final String SHIELD = \"shield\";\r\n\r\n    public HardwareSpecification(Map<String, Integer> configs) {\r\n        this.configs = configs;\r\n    }\r\n\r\n    public Armor createArmor() {\r\n        return new Armor(chooseFor(ARMOR, 50, 66, 100, 120, 130, 150));\r\n    }\r\n\r\n    public MineLayer createMineLayer() {\r\n        return new MineLayer(chooseFor(MINES, 2, 4, 6, 10, 16, 24));\r\n    }\r\n\r\n    public Radar createRadar() {\r\n        return new Radar();\r\n    }\r\n\r\n    public Shield createShield() {\r\n        return new Shield(chooseFor(SHIELD, 1.0, 1.0, 1.0, 2.0 / 3, 1.0 / 2, 1.0 / 3));\r\n    }\r\n\r\n    public Sonar createSonar() {\r\n        return new Sonar();\r\n    }\r\n\r\n    public Transceiver createTransceiver() {\r\n        return new Transceiver();\r\n    }\r\n\r\n    public Transponder createTransponder() {\r\n        return new Transponder();\r\n    }\r\n\r\n    public Turret createTurret() {\r\n        return new Turret();\r\n    }\r\n\r\n    private Scanner createScanner() {\r\n        return new Scanner(chooseFor(SCANNER, 250, 350, 500, 700, 1000, 1500));\r\n    }\r\n\r\n    private Throttle createThrottle() {\r\n        return new Throttle(chooseFor(ENGINE, 0.5, 0.8, 1.0, 1.12, 1.35, 1.50) * chooseFor(ARMOR, 1.33, 1.20, 1.00, 0.85, 0.75, 0.66));\r\n    }\r\n\r\n    private <T> T chooseFor(String name, T... values) {\r\n        return values[Math.max(0, Math.min(configs.get(name), values.length))];\r\n    }\r\n\r\n    /**\r\n     * Configure the specific hardware context based on this spec.\r\n     *\r\n     * @param robotConfigurer the context to configure.\r\n     */\r\n    public void buildRobotConfigurer(RobotConfigurer robotConfigurer) {\r\n        robotConfigurer.setThrottle(createThrottle());\r\n        robotConfigurer.setCoolMultiplier(chooseFor(HEATSINKS, 0.75, 1.00, 1.125, 1.25, 1.33, 1.50));\r\n        robotConfigurer.setArmor(createArmor());\r\n        robotConfigurer.setMineLayer(createMineLayer());\r\n        robotConfigurer.setRadar(createRadar());\r\n        robotConfigurer.setShield(createShield());\r\n        robotConfigurer.setSonar(createSonar());\r\n        robotConfigurer.setTransceiver(createTransceiver());\r\n        robotConfigurer.setTransponder(createTransponder());\r\n        robotConfigurer.setTurret(createTurret());\r\n        robotConfigurer.setMissileLauncher(new MissileLauncher());\r\n        robotConfigurer.setMissileLauncherPower(chooseFor(WEAPON, .5, .8, 1.0, 1.2, 1.35, 1.5));\r\n        robotConfigurer.setScanner(createScanner());\r\n        robotConfigurer.setHardwareBus(new HardwareBus());\r\n    }\r\n}\r\n",
		"id": "EvoSuiteBenchmark/86_at-robots2-j/src/main/java/net/virtualinfinity/atrobots/compiler/HardwareSpecificationTest5.java",
		"test_prompt": "// HardwareSpecificationTest5.java\npackage net.virtualinfinity.atrobots.compiler;\n\nimport net.virtualinfinity.atrobots.computer.HardwareBus;\nimport net.virtualinfinity.atrobots.hardware.armor.Armor;\nimport net.virtualinfinity.atrobots.hardware.mines.MineLayer;\nimport net.virtualinfinity.atrobots.hardware.missiles.MissileLauncher;\nimport net.virtualinfinity.atrobots.hardware.radio.Transceiver;\nimport net.virtualinfinity.atrobots.hardware.scanning.radar.Radar;\nimport net.virtualinfinity.atrobots.hardware.scanning.scanner.Scanner;\nimport net.virtualinfinity.atrobots.hardware.scanning.sonar.Sonar;\nimport net.virtualinfinity.atrobots.hardware.shield.Shield;\nimport net.virtualinfinity.atrobots.hardware.throttle.Throttle;\nimport net.virtualinfinity.atrobots.hardware.transponder.Transponder;\nimport net.virtualinfinity.atrobots.hardware.turret.Turret;\nimport java.util.Map;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link HardwareSpecification}.\n* It contains ten unit test cases for the {@link HardwareSpecification#createTransceiver()} method.\n*/\nclass HardwareSpecificationTest5 {"
	},
	{
		"original_code": "// HardwareSpecification.java\npackage net.virtualinfinity.atrobots.compiler;\r\n\r\nimport net.virtualinfinity.atrobots.computer.HardwareBus;\r\nimport net.virtualinfinity.atrobots.hardware.armor.Armor;\r\nimport net.virtualinfinity.atrobots.hardware.mines.MineLayer;\r\nimport net.virtualinfinity.atrobots.hardware.missiles.MissileLauncher;\r\nimport net.virtualinfinity.atrobots.hardware.radio.Transceiver;\r\nimport net.virtualinfinity.atrobots.hardware.scanning.radar.Radar;\r\nimport net.virtualinfinity.atrobots.hardware.scanning.scanner.Scanner;\r\nimport net.virtualinfinity.atrobots.hardware.scanning.sonar.Sonar;\r\nimport net.virtualinfinity.atrobots.hardware.shield.Shield;\r\nimport net.virtualinfinity.atrobots.hardware.throttle.Throttle;\r\nimport net.virtualinfinity.atrobots.hardware.transponder.Transponder;\r\nimport net.virtualinfinity.atrobots.hardware.turret.Turret;\r\nimport java.util.Map;\r\n\r\n/**\r\n * A factory for various configurable hardware components.\r\n *\r\n * @author Daniel Pitts\r\n */\r\npublic class HardwareSpecification {\r\n\r\n    private final Map<String, Integer> configs;\r\n\r\n    public static final String SCANNER = \"scanner\";\r\n\r\n    public static final String WEAPON = \"weapon\";\r\n\r\n    public static final String ARMOR = \"armor\";\r\n\r\n    public static final String ENGINE = \"engine\";\r\n\r\n    public static final String HEATSINKS = \"heatsinks\";\r\n\r\n    public static final String MINES = \"mines\";\r\n\r\n    public static final String SHIELD = \"shield\";\r\n\r\n    public HardwareSpecification(Map<String, Integer> configs) {\r\n        this.configs = configs;\r\n    }\r\n\r\n    public Armor createArmor() {\r\n        return new Armor(chooseFor(ARMOR, 50, 66, 100, 120, 130, 150));\r\n    }\r\n\r\n    public MineLayer createMineLayer() {\r\n        return new MineLayer(chooseFor(MINES, 2, 4, 6, 10, 16, 24));\r\n    }\r\n\r\n    public Radar createRadar() {\r\n        return new Radar();\r\n    }\r\n\r\n    public Shield createShield() {\r\n        return new Shield(chooseFor(SHIELD, 1.0, 1.0, 1.0, 2.0 / 3, 1.0 / 2, 1.0 / 3));\r\n    }\r\n\r\n    public Sonar createSonar() {\r\n        return new Sonar();\r\n    }\r\n\r\n    public Transceiver createTransceiver() {\r\n        return new Transceiver();\r\n    }\r\n\r\n    public Transponder createTransponder() {\r\n        return new Transponder();\r\n    }\r\n\r\n    public Turret createTurret() {\r\n        return new Turret();\r\n    }\r\n\r\n    private Scanner createScanner() {\r\n        return new Scanner(chooseFor(SCANNER, 250, 350, 500, 700, 1000, 1500));\r\n    }\r\n\r\n    private Throttle createThrottle() {\r\n        return new Throttle(chooseFor(ENGINE, 0.5, 0.8, 1.0, 1.12, 1.35, 1.50) * chooseFor(ARMOR, 1.33, 1.20, 1.00, 0.85, 0.75, 0.66));\r\n    }\r\n\r\n    private <T> T chooseFor(String name, T... values) {\r\n        return values[Math.max(0, Math.min(configs.get(name), values.length))];\r\n    }\r\n\r\n    /**\r\n     * Configure the specific hardware context based on this spec.\r\n     *\r\n     * @param robotConfigurer the context to configure.\r\n     */\r\n    public void buildRobotConfigurer(RobotConfigurer robotConfigurer) {\r\n        robotConfigurer.setThrottle(createThrottle());\r\n        robotConfigurer.setCoolMultiplier(chooseFor(HEATSINKS, 0.75, 1.00, 1.125, 1.25, 1.33, 1.50));\r\n        robotConfigurer.setArmor(createArmor());\r\n        robotConfigurer.setMineLayer(createMineLayer());\r\n        robotConfigurer.setRadar(createRadar());\r\n        robotConfigurer.setShield(createShield());\r\n        robotConfigurer.setSonar(createSonar());\r\n        robotConfigurer.setTransceiver(createTransceiver());\r\n        robotConfigurer.setTransponder(createTransponder());\r\n        robotConfigurer.setTurret(createTurret());\r\n        robotConfigurer.setMissileLauncher(new MissileLauncher());\r\n        robotConfigurer.setMissileLauncherPower(chooseFor(WEAPON, .5, .8, 1.0, 1.2, 1.35, 1.5));\r\n        robotConfigurer.setScanner(createScanner());\r\n        robotConfigurer.setHardwareBus(new HardwareBus());\r\n    }\r\n}\r\n",
		"id": "EvoSuiteBenchmark/86_at-robots2-j/src/main/java/net/virtualinfinity/atrobots/compiler/HardwareSpecificationTest6.java",
		"test_prompt": "// HardwareSpecificationTest6.java\npackage net.virtualinfinity.atrobots.compiler;\n\nimport net.virtualinfinity.atrobots.computer.HardwareBus;\nimport net.virtualinfinity.atrobots.hardware.armor.Armor;\nimport net.virtualinfinity.atrobots.hardware.mines.MineLayer;\nimport net.virtualinfinity.atrobots.hardware.missiles.MissileLauncher;\nimport net.virtualinfinity.atrobots.hardware.radio.Transceiver;\nimport net.virtualinfinity.atrobots.hardware.scanning.radar.Radar;\nimport net.virtualinfinity.atrobots.hardware.scanning.scanner.Scanner;\nimport net.virtualinfinity.atrobots.hardware.scanning.sonar.Sonar;\nimport net.virtualinfinity.atrobots.hardware.shield.Shield;\nimport net.virtualinfinity.atrobots.hardware.throttle.Throttle;\nimport net.virtualinfinity.atrobots.hardware.transponder.Transponder;\nimport net.virtualinfinity.atrobots.hardware.turret.Turret;\nimport java.util.Map;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link HardwareSpecification}.\n* It contains ten unit test cases for the {@link HardwareSpecification#createTransponder()} method.\n*/\nclass HardwareSpecificationTest6 {"
	},
	{
		"original_code": "// HardwareSpecification.java\npackage net.virtualinfinity.atrobots.compiler;\r\n\r\nimport net.virtualinfinity.atrobots.computer.HardwareBus;\r\nimport net.virtualinfinity.atrobots.hardware.armor.Armor;\r\nimport net.virtualinfinity.atrobots.hardware.mines.MineLayer;\r\nimport net.virtualinfinity.atrobots.hardware.missiles.MissileLauncher;\r\nimport net.virtualinfinity.atrobots.hardware.radio.Transceiver;\r\nimport net.virtualinfinity.atrobots.hardware.scanning.radar.Radar;\r\nimport net.virtualinfinity.atrobots.hardware.scanning.scanner.Scanner;\r\nimport net.virtualinfinity.atrobots.hardware.scanning.sonar.Sonar;\r\nimport net.virtualinfinity.atrobots.hardware.shield.Shield;\r\nimport net.virtualinfinity.atrobots.hardware.throttle.Throttle;\r\nimport net.virtualinfinity.atrobots.hardware.transponder.Transponder;\r\nimport net.virtualinfinity.atrobots.hardware.turret.Turret;\r\nimport java.util.Map;\r\n\r\n/**\r\n * A factory for various configurable hardware components.\r\n *\r\n * @author Daniel Pitts\r\n */\r\npublic class HardwareSpecification {\r\n\r\n    private final Map<String, Integer> configs;\r\n\r\n    public static final String SCANNER = \"scanner\";\r\n\r\n    public static final String WEAPON = \"weapon\";\r\n\r\n    public static final String ARMOR = \"armor\";\r\n\r\n    public static final String ENGINE = \"engine\";\r\n\r\n    public static final String HEATSINKS = \"heatsinks\";\r\n\r\n    public static final String MINES = \"mines\";\r\n\r\n    public static final String SHIELD = \"shield\";\r\n\r\n    public HardwareSpecification(Map<String, Integer> configs) {\r\n        this.configs = configs;\r\n    }\r\n\r\n    public Armor createArmor() {\r\n        return new Armor(chooseFor(ARMOR, 50, 66, 100, 120, 130, 150));\r\n    }\r\n\r\n    public MineLayer createMineLayer() {\r\n        return new MineLayer(chooseFor(MINES, 2, 4, 6, 10, 16, 24));\r\n    }\r\n\r\n    public Radar createRadar() {\r\n        return new Radar();\r\n    }\r\n\r\n    public Shield createShield() {\r\n        return new Shield(chooseFor(SHIELD, 1.0, 1.0, 1.0, 2.0 / 3, 1.0 / 2, 1.0 / 3));\r\n    }\r\n\r\n    public Sonar createSonar() {\r\n        return new Sonar();\r\n    }\r\n\r\n    public Transceiver createTransceiver() {\r\n        return new Transceiver();\r\n    }\r\n\r\n    public Transponder createTransponder() {\r\n        return new Transponder();\r\n    }\r\n\r\n    public Turret createTurret() {\r\n        return new Turret();\r\n    }\r\n\r\n    private Scanner createScanner() {\r\n        return new Scanner(chooseFor(SCANNER, 250, 350, 500, 700, 1000, 1500));\r\n    }\r\n\r\n    private Throttle createThrottle() {\r\n        return new Throttle(chooseFor(ENGINE, 0.5, 0.8, 1.0, 1.12, 1.35, 1.50) * chooseFor(ARMOR, 1.33, 1.20, 1.00, 0.85, 0.75, 0.66));\r\n    }\r\n\r\n    private <T> T chooseFor(String name, T... values) {\r\n        return values[Math.max(0, Math.min(configs.get(name), values.length))];\r\n    }\r\n\r\n    /**\r\n     * Configure the specific hardware context based on this spec.\r\n     *\r\n     * @param robotConfigurer the context to configure.\r\n     */\r\n    public void buildRobotConfigurer(RobotConfigurer robotConfigurer) {\r\n        robotConfigurer.setThrottle(createThrottle());\r\n        robotConfigurer.setCoolMultiplier(chooseFor(HEATSINKS, 0.75, 1.00, 1.125, 1.25, 1.33, 1.50));\r\n        robotConfigurer.setArmor(createArmor());\r\n        robotConfigurer.setMineLayer(createMineLayer());\r\n        robotConfigurer.setRadar(createRadar());\r\n        robotConfigurer.setShield(createShield());\r\n        robotConfigurer.setSonar(createSonar());\r\n        robotConfigurer.setTransceiver(createTransceiver());\r\n        robotConfigurer.setTransponder(createTransponder());\r\n        robotConfigurer.setTurret(createTurret());\r\n        robotConfigurer.setMissileLauncher(new MissileLauncher());\r\n        robotConfigurer.setMissileLauncherPower(chooseFor(WEAPON, .5, .8, 1.0, 1.2, 1.35, 1.5));\r\n        robotConfigurer.setScanner(createScanner());\r\n        robotConfigurer.setHardwareBus(new HardwareBus());\r\n    }\r\n}\r\n",
		"id": "EvoSuiteBenchmark/86_at-robots2-j/src/main/java/net/virtualinfinity/atrobots/compiler/HardwareSpecificationTest7.java",
		"test_prompt": "// HardwareSpecificationTest7.java\npackage net.virtualinfinity.atrobots.compiler;\n\nimport net.virtualinfinity.atrobots.computer.HardwareBus;\nimport net.virtualinfinity.atrobots.hardware.armor.Armor;\nimport net.virtualinfinity.atrobots.hardware.mines.MineLayer;\nimport net.virtualinfinity.atrobots.hardware.missiles.MissileLauncher;\nimport net.virtualinfinity.atrobots.hardware.radio.Transceiver;\nimport net.virtualinfinity.atrobots.hardware.scanning.radar.Radar;\nimport net.virtualinfinity.atrobots.hardware.scanning.scanner.Scanner;\nimport net.virtualinfinity.atrobots.hardware.scanning.sonar.Sonar;\nimport net.virtualinfinity.atrobots.hardware.shield.Shield;\nimport net.virtualinfinity.atrobots.hardware.throttle.Throttle;\nimport net.virtualinfinity.atrobots.hardware.transponder.Transponder;\nimport net.virtualinfinity.atrobots.hardware.turret.Turret;\nimport java.util.Map;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link HardwareSpecification}.\n* It contains ten unit test cases for the {@link HardwareSpecification#createTurret()} method.\n*/\nclass HardwareSpecificationTest7 {"
	}
]