[
	{
		"original_code": "// SecurityUtils.java\npackage br.com.jnfe.base.util;\n\nimport java.io.File;\nimport java.io.FileInputStream;\nimport java.io.InputStream;\nimport java.security.KeyStore;\nimport java.security.cert.CertificateFactory;\nimport java.security.cert.X509Certificate;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\nimport org.springframework.core.io.FileSystemResource;\nimport org.springframework.core.io.Resource;\n\n/**\n * Helper class to handle common security tasks.\n *\n * @author mauriciofernandesdecastro\n */\npublic class SecurityUtils {\n\n    static char SEP = File.separatorChar;\n\n    static String trustStoreName = \"cacerts\";\n\n    static String trustStorePath = null;\n\n    static String trustStorePassword = \"changeit\";\n\n    /**\n     * Abre um armaz�m.\n     *\n     * @param keyStoreType\n     * @param keyStoreResource\n     * @param passphrase\n     *\n     * @throws Exception\n     */\n    public static KeyStore openStore(String keyStoreType, Resource keyStoreResource, char[] passphrase) throws Exception {\n        logger.debug(\"Abrindo armaz�m {} ...\", keyStoreResource.getFilename());\n        KeyStore keyStore = KeyStore.getInstance(keyStoreType);\n        keyStore.load(keyStoreResource.getInputStream(), passphrase);\n        return keyStore;\n    }\n\n    /**\n     * Abre um armaz�m.\n     *\n     * @param keyStoreResource\n     * @param passphrase\n     *\n     * @throws Exception\n     */\n    public static KeyStore openStore(Resource keyStoreResource, char[] passphrase) throws Exception {\n        return openStore(KeyStore.getDefaultType(), keyStoreResource, passphrase);\n    }\n\n    /**\n     * Abre um armaz�m.\n     *\n     * @param keyStoreType\n     * @param storeLocation\n     * @param passphrase\n     *\n     * @throws Exception\n     */\n    public static KeyStore openStore(String keyStoreType, String storeLocation, char[] passphrase) throws Exception {\n        return openStore(keyStoreType, new FileSystemResource(storeLocation), passphrase);\n    }\n\n    /**\n     * Abre um armaz�m.\n     *\n     * @param storeLocation\n     * @param passphrase\n     *\n     * @throws Exception\n     */\n    public static KeyStore openStore(String storeLocation, char[] passphrase) throws Exception {\n        return openStore(new FileSystemResource(storeLocation), passphrase);\n    }\n\n    /**\n     * Abre o armaz�m de chaves confi�veis.\n     *\n     * @param passphrase\n     *\n     * @throws Exception\n     */\n    public static KeyStore openTrustStore(char[] passphrase) throws Exception {\n        return openTrustStore(trustStorePath, passphrase);\n    }\n\n    /**\n     * Abre o armaz�m de chaves confi�veis.\n     *\n     * @param passphrase\n     *\n     * @throws Exception\n     */\n    public static KeyStore openTrustStore(String trustStorePath, char[] passphrase) throws Exception {\n        StringBuilder storeLocation = new StringBuilder(System.getProperty(\"java.home\"));\n        if (trustStorePath == null) {\n            storeLocation.append(SEP).append(\"lib\").append(SEP).append(\"security\").append(SEP);\n        } else {\n            storeLocation.append(trustStorePath);\n        }\n        KeyStore trustStore = SecurityUtils.openStore(storeLocation.append(trustStoreName).toString(), passphrase);\n        return trustStore;\n    }\n\n    /**\n     * Carrega um certificado no armaz�m seguro.\n     *\n     * @param certificateLocation\n     * @param certificateName\n     *\n     * @throws Exception\n     */\n    public static void installCertificate(String certificateLocation, String certificateName) throws Exception {\n        installCertificate(trustStorePath, certificateLocation, certificateName);\n    }\n\n    /**\n     * Carrega um certificado no armaz�m seguro.\n     *\n     * @param trustStorePath\n     * @param certificateLocation\n     * @param certificateName\n     *\n     * @throws Exception\n     */\n    public static void installCertificate(String trustStorePath, String certificateLocation, String certificateName) throws Exception {\n        KeyStore trustStore = SecurityUtils.openTrustStore(trustStorePath, trustStorePassword.toCharArray());\n        File dir = new File(certificateLocation);\n        File file = new File(dir, certificateName + \".cer\");\n        logger.debug(\"Abrindo certificado {} ...\", file);\n        CertificateFactory cf = CertificateFactory.getInstance(\"X.509\");\n        InputStream in = new FileInputStream(file);\n        X509Certificate cert = (X509Certificate) cf.generateCertificate(in);\n        in.close();\n        if (trustStore.containsAlias(certificateName)) {\n            logger.info(\"Certificado existente {}\", trustStore.getCertificate(certificateName).getType());\n        } else {\n            trustStore.setCertificateEntry(certificateName, cert);\n            logger.info(\"Certificado CARREGADO {}\", trustStore.getCertificate(certificateName).getType());\n        }\n    }\n\n    /**\n     * Execut�vel para acrescentar certificados.\n     *\n     * @param args\n     * @throws Exception\n     */\n    public static void main(String[] args) throws Exception {\n        String trustStorePath = null;\n        String certificateLocation = \"\";\n        String certificateName = \"\";\n        if (args.length > 2) {\n            trustStorePath = args[2];\n            certificateLocation = args[1];\n            certificateName = args[0];\n        } else if (args.length > 1) {\n            certificateLocation = args[1];\n            certificateName = args[0];\n        } else {\n            System.out.println(\"Uso: java SecurityUtils <localDoCertificado> <nomeDoCertificado> [localDoCacertsAPartirDoJavaHome]\");\n            return;\n        }\n        installCertificate(trustStorePath, certificateLocation, certificateName);\n    }\n\n    private final static Logger logger = LoggerFactory.getLogger(SecurityUtils.class);\n}\n",
		"id": "EvoSuiteBenchmark/6_jnfe/src/main/java/br/com/jnfe/base/util/SecurityUtilsTest0.java",
		"test_prompt": "// SecurityUtilsTest0.java\npackage br.com.jnfe.base.util;\n\nimport java.io.File;\nimport java.io.FileInputStream;\nimport java.io.InputStream;\nimport java.security.KeyStore;\nimport java.security.cert.CertificateFactory;\nimport java.security.cert.X509Certificate;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\nimport org.springframework.core.io.FileSystemResource;\nimport org.springframework.core.io.Resource;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link SecurityUtils}.\n* It contains ten unit test cases for the {@link SecurityUtils#openStore(String, Resource, char[])} method.\n*/\nclass SecurityUtilsTest0 {"
	},
	{
		"original_code": "// SecurityUtils.java\npackage br.com.jnfe.base.util;\n\nimport java.io.File;\nimport java.io.FileInputStream;\nimport java.io.InputStream;\nimport java.security.KeyStore;\nimport java.security.cert.CertificateFactory;\nimport java.security.cert.X509Certificate;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\nimport org.springframework.core.io.FileSystemResource;\nimport org.springframework.core.io.Resource;\n\n/**\n * Helper class to handle common security tasks.\n *\n * @author mauriciofernandesdecastro\n */\npublic class SecurityUtils {\n\n    static char SEP = File.separatorChar;\n\n    static String trustStoreName = \"cacerts\";\n\n    static String trustStorePath = null;\n\n    static String trustStorePassword = \"changeit\";\n\n    /**\n     * Abre um armaz�m.\n     *\n     * @param keyStoreType\n     * @param keyStoreResource\n     * @param passphrase\n     *\n     * @throws Exception\n     */\n    public static KeyStore openStore(String keyStoreType, Resource keyStoreResource, char[] passphrase) throws Exception {\n        logger.debug(\"Abrindo armaz�m {} ...\", keyStoreResource.getFilename());\n        KeyStore keyStore = KeyStore.getInstance(keyStoreType);\n        keyStore.load(keyStoreResource.getInputStream(), passphrase);\n        return keyStore;\n    }\n\n    /**\n     * Abre um armaz�m.\n     *\n     * @param keyStoreResource\n     * @param passphrase\n     *\n     * @throws Exception\n     */\n    public static KeyStore openStore(Resource keyStoreResource, char[] passphrase) throws Exception {\n        return openStore(KeyStore.getDefaultType(), keyStoreResource, passphrase);\n    }\n\n    /**\n     * Abre um armaz�m.\n     *\n     * @param keyStoreType\n     * @param storeLocation\n     * @param passphrase\n     *\n     * @throws Exception\n     */\n    public static KeyStore openStore(String keyStoreType, String storeLocation, char[] passphrase) throws Exception {\n        return openStore(keyStoreType, new FileSystemResource(storeLocation), passphrase);\n    }\n\n    /**\n     * Abre um armaz�m.\n     *\n     * @param storeLocation\n     * @param passphrase\n     *\n     * @throws Exception\n     */\n    public static KeyStore openStore(String storeLocation, char[] passphrase) throws Exception {\n        return openStore(new FileSystemResource(storeLocation), passphrase);\n    }\n\n    /**\n     * Abre o armaz�m de chaves confi�veis.\n     *\n     * @param passphrase\n     *\n     * @throws Exception\n     */\n    public static KeyStore openTrustStore(char[] passphrase) throws Exception {\n        return openTrustStore(trustStorePath, passphrase);\n    }\n\n    /**\n     * Abre o armaz�m de chaves confi�veis.\n     *\n     * @param passphrase\n     *\n     * @throws Exception\n     */\n    public static KeyStore openTrustStore(String trustStorePath, char[] passphrase) throws Exception {\n        StringBuilder storeLocation = new StringBuilder(System.getProperty(\"java.home\"));\n        if (trustStorePath == null) {\n            storeLocation.append(SEP).append(\"lib\").append(SEP).append(\"security\").append(SEP);\n        } else {\n            storeLocation.append(trustStorePath);\n        }\n        KeyStore trustStore = SecurityUtils.openStore(storeLocation.append(trustStoreName).toString(), passphrase);\n        return trustStore;\n    }\n\n    /**\n     * Carrega um certificado no armaz�m seguro.\n     *\n     * @param certificateLocation\n     * @param certificateName\n     *\n     * @throws Exception\n     */\n    public static void installCertificate(String certificateLocation, String certificateName) throws Exception {\n        installCertificate(trustStorePath, certificateLocation, certificateName);\n    }\n\n    /**\n     * Carrega um certificado no armaz�m seguro.\n     *\n     * @param trustStorePath\n     * @param certificateLocation\n     * @param certificateName\n     *\n     * @throws Exception\n     */\n    public static void installCertificate(String trustStorePath, String certificateLocation, String certificateName) throws Exception {\n        KeyStore trustStore = SecurityUtils.openTrustStore(trustStorePath, trustStorePassword.toCharArray());\n        File dir = new File(certificateLocation);\n        File file = new File(dir, certificateName + \".cer\");\n        logger.debug(\"Abrindo certificado {} ...\", file);\n        CertificateFactory cf = CertificateFactory.getInstance(\"X.509\");\n        InputStream in = new FileInputStream(file);\n        X509Certificate cert = (X509Certificate) cf.generateCertificate(in);\n        in.close();\n        if (trustStore.containsAlias(certificateName)) {\n            logger.info(\"Certificado existente {}\", trustStore.getCertificate(certificateName).getType());\n        } else {\n            trustStore.setCertificateEntry(certificateName, cert);\n            logger.info(\"Certificado CARREGADO {}\", trustStore.getCertificate(certificateName).getType());\n        }\n    }\n\n    /**\n     * Execut�vel para acrescentar certificados.\n     *\n     * @param args\n     * @throws Exception\n     */\n    public static void main(String[] args) throws Exception {\n        String trustStorePath = null;\n        String certificateLocation = \"\";\n        String certificateName = \"\";\n        if (args.length > 2) {\n            trustStorePath = args[2];\n            certificateLocation = args[1];\n            certificateName = args[0];\n        } else if (args.length > 1) {\n            certificateLocation = args[1];\n            certificateName = args[0];\n        } else {\n            System.out.println(\"Uso: java SecurityUtils <localDoCertificado> <nomeDoCertificado> [localDoCacertsAPartirDoJavaHome]\");\n            return;\n        }\n        installCertificate(trustStorePath, certificateLocation, certificateName);\n    }\n\n    private final static Logger logger = LoggerFactory.getLogger(SecurityUtils.class);\n}\n",
		"id": "EvoSuiteBenchmark/6_jnfe/src/main/java/br/com/jnfe/base/util/SecurityUtilsTest1.java",
		"test_prompt": "// SecurityUtilsTest1.java\npackage br.com.jnfe.base.util;\n\nimport java.io.File;\nimport java.io.FileInputStream;\nimport java.io.InputStream;\nimport java.security.KeyStore;\nimport java.security.cert.CertificateFactory;\nimport java.security.cert.X509Certificate;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\nimport org.springframework.core.io.FileSystemResource;\nimport org.springframework.core.io.Resource;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link SecurityUtils}.\n* It contains ten unit test cases for the {@link SecurityUtils#openStore(Resource, char[])} method.\n*/\nclass SecurityUtilsTest1 {"
	},
	{
		"original_code": "// SecurityUtils.java\npackage br.com.jnfe.base.util;\n\nimport java.io.File;\nimport java.io.FileInputStream;\nimport java.io.InputStream;\nimport java.security.KeyStore;\nimport java.security.cert.CertificateFactory;\nimport java.security.cert.X509Certificate;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\nimport org.springframework.core.io.FileSystemResource;\nimport org.springframework.core.io.Resource;\n\n/**\n * Helper class to handle common security tasks.\n *\n * @author mauriciofernandesdecastro\n */\npublic class SecurityUtils {\n\n    static char SEP = File.separatorChar;\n\n    static String trustStoreName = \"cacerts\";\n\n    static String trustStorePath = null;\n\n    static String trustStorePassword = \"changeit\";\n\n    /**\n     * Abre um armaz�m.\n     *\n     * @param keyStoreType\n     * @param keyStoreResource\n     * @param passphrase\n     *\n     * @throws Exception\n     */\n    public static KeyStore openStore(String keyStoreType, Resource keyStoreResource, char[] passphrase) throws Exception {\n        logger.debug(\"Abrindo armaz�m {} ...\", keyStoreResource.getFilename());\n        KeyStore keyStore = KeyStore.getInstance(keyStoreType);\n        keyStore.load(keyStoreResource.getInputStream(), passphrase);\n        return keyStore;\n    }\n\n    /**\n     * Abre um armaz�m.\n     *\n     * @param keyStoreResource\n     * @param passphrase\n     *\n     * @throws Exception\n     */\n    public static KeyStore openStore(Resource keyStoreResource, char[] passphrase) throws Exception {\n        return openStore(KeyStore.getDefaultType(), keyStoreResource, passphrase);\n    }\n\n    /**\n     * Abre um armaz�m.\n     *\n     * @param keyStoreType\n     * @param storeLocation\n     * @param passphrase\n     *\n     * @throws Exception\n     */\n    public static KeyStore openStore(String keyStoreType, String storeLocation, char[] passphrase) throws Exception {\n        return openStore(keyStoreType, new FileSystemResource(storeLocation), passphrase);\n    }\n\n    /**\n     * Abre um armaz�m.\n     *\n     * @param storeLocation\n     * @param passphrase\n     *\n     * @throws Exception\n     */\n    public static KeyStore openStore(String storeLocation, char[] passphrase) throws Exception {\n        return openStore(new FileSystemResource(storeLocation), passphrase);\n    }\n\n    /**\n     * Abre o armaz�m de chaves confi�veis.\n     *\n     * @param passphrase\n     *\n     * @throws Exception\n     */\n    public static KeyStore openTrustStore(char[] passphrase) throws Exception {\n        return openTrustStore(trustStorePath, passphrase);\n    }\n\n    /**\n     * Abre o armaz�m de chaves confi�veis.\n     *\n     * @param passphrase\n     *\n     * @throws Exception\n     */\n    public static KeyStore openTrustStore(String trustStorePath, char[] passphrase) throws Exception {\n        StringBuilder storeLocation = new StringBuilder(System.getProperty(\"java.home\"));\n        if (trustStorePath == null) {\n            storeLocation.append(SEP).append(\"lib\").append(SEP).append(\"security\").append(SEP);\n        } else {\n            storeLocation.append(trustStorePath);\n        }\n        KeyStore trustStore = SecurityUtils.openStore(storeLocation.append(trustStoreName).toString(), passphrase);\n        return trustStore;\n    }\n\n    /**\n     * Carrega um certificado no armaz�m seguro.\n     *\n     * @param certificateLocation\n     * @param certificateName\n     *\n     * @throws Exception\n     */\n    public static void installCertificate(String certificateLocation, String certificateName) throws Exception {\n        installCertificate(trustStorePath, certificateLocation, certificateName);\n    }\n\n    /**\n     * Carrega um certificado no armaz�m seguro.\n     *\n     * @param trustStorePath\n     * @param certificateLocation\n     * @param certificateName\n     *\n     * @throws Exception\n     */\n    public static void installCertificate(String trustStorePath, String certificateLocation, String certificateName) throws Exception {\n        KeyStore trustStore = SecurityUtils.openTrustStore(trustStorePath, trustStorePassword.toCharArray());\n        File dir = new File(certificateLocation);\n        File file = new File(dir, certificateName + \".cer\");\n        logger.debug(\"Abrindo certificado {} ...\", file);\n        CertificateFactory cf = CertificateFactory.getInstance(\"X.509\");\n        InputStream in = new FileInputStream(file);\n        X509Certificate cert = (X509Certificate) cf.generateCertificate(in);\n        in.close();\n        if (trustStore.containsAlias(certificateName)) {\n            logger.info(\"Certificado existente {}\", trustStore.getCertificate(certificateName).getType());\n        } else {\n            trustStore.setCertificateEntry(certificateName, cert);\n            logger.info(\"Certificado CARREGADO {}\", trustStore.getCertificate(certificateName).getType());\n        }\n    }\n\n    /**\n     * Execut�vel para acrescentar certificados.\n     *\n     * @param args\n     * @throws Exception\n     */\n    public static void main(String[] args) throws Exception {\n        String trustStorePath = null;\n        String certificateLocation = \"\";\n        String certificateName = \"\";\n        if (args.length > 2) {\n            trustStorePath = args[2];\n            certificateLocation = args[1];\n            certificateName = args[0];\n        } else if (args.length > 1) {\n            certificateLocation = args[1];\n            certificateName = args[0];\n        } else {\n            System.out.println(\"Uso: java SecurityUtils <localDoCertificado> <nomeDoCertificado> [localDoCacertsAPartirDoJavaHome]\");\n            return;\n        }\n        installCertificate(trustStorePath, certificateLocation, certificateName);\n    }\n\n    private final static Logger logger = LoggerFactory.getLogger(SecurityUtils.class);\n}\n",
		"id": "EvoSuiteBenchmark/6_jnfe/src/main/java/br/com/jnfe/base/util/SecurityUtilsTest2.java",
		"test_prompt": "// SecurityUtilsTest2.java\npackage br.com.jnfe.base.util;\n\nimport java.io.File;\nimport java.io.FileInputStream;\nimport java.io.InputStream;\nimport java.security.KeyStore;\nimport java.security.cert.CertificateFactory;\nimport java.security.cert.X509Certificate;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\nimport org.springframework.core.io.FileSystemResource;\nimport org.springframework.core.io.Resource;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link SecurityUtils}.\n* It contains ten unit test cases for the {@link SecurityUtils#openStore(String, String, char[])} method.\n*/\nclass SecurityUtilsTest2 {"
	},
	{
		"original_code": "// SecurityUtils.java\npackage br.com.jnfe.base.util;\n\nimport java.io.File;\nimport java.io.FileInputStream;\nimport java.io.InputStream;\nimport java.security.KeyStore;\nimport java.security.cert.CertificateFactory;\nimport java.security.cert.X509Certificate;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\nimport org.springframework.core.io.FileSystemResource;\nimport org.springframework.core.io.Resource;\n\n/**\n * Helper class to handle common security tasks.\n *\n * @author mauriciofernandesdecastro\n */\npublic class SecurityUtils {\n\n    static char SEP = File.separatorChar;\n\n    static String trustStoreName = \"cacerts\";\n\n    static String trustStorePath = null;\n\n    static String trustStorePassword = \"changeit\";\n\n    /**\n     * Abre um armaz�m.\n     *\n     * @param keyStoreType\n     * @param keyStoreResource\n     * @param passphrase\n     *\n     * @throws Exception\n     */\n    public static KeyStore openStore(String keyStoreType, Resource keyStoreResource, char[] passphrase) throws Exception {\n        logger.debug(\"Abrindo armaz�m {} ...\", keyStoreResource.getFilename());\n        KeyStore keyStore = KeyStore.getInstance(keyStoreType);\n        keyStore.load(keyStoreResource.getInputStream(), passphrase);\n        return keyStore;\n    }\n\n    /**\n     * Abre um armaz�m.\n     *\n     * @param keyStoreResource\n     * @param passphrase\n     *\n     * @throws Exception\n     */\n    public static KeyStore openStore(Resource keyStoreResource, char[] passphrase) throws Exception {\n        return openStore(KeyStore.getDefaultType(), keyStoreResource, passphrase);\n    }\n\n    /**\n     * Abre um armaz�m.\n     *\n     * @param keyStoreType\n     * @param storeLocation\n     * @param passphrase\n     *\n     * @throws Exception\n     */\n    public static KeyStore openStore(String keyStoreType, String storeLocation, char[] passphrase) throws Exception {\n        return openStore(keyStoreType, new FileSystemResource(storeLocation), passphrase);\n    }\n\n    /**\n     * Abre um armaz�m.\n     *\n     * @param storeLocation\n     * @param passphrase\n     *\n     * @throws Exception\n     */\n    public static KeyStore openStore(String storeLocation, char[] passphrase) throws Exception {\n        return openStore(new FileSystemResource(storeLocation), passphrase);\n    }\n\n    /**\n     * Abre o armaz�m de chaves confi�veis.\n     *\n     * @param passphrase\n     *\n     * @throws Exception\n     */\n    public static KeyStore openTrustStore(char[] passphrase) throws Exception {\n        return openTrustStore(trustStorePath, passphrase);\n    }\n\n    /**\n     * Abre o armaz�m de chaves confi�veis.\n     *\n     * @param passphrase\n     *\n     * @throws Exception\n     */\n    public static KeyStore openTrustStore(String trustStorePath, char[] passphrase) throws Exception {\n        StringBuilder storeLocation = new StringBuilder(System.getProperty(\"java.home\"));\n        if (trustStorePath == null) {\n            storeLocation.append(SEP).append(\"lib\").append(SEP).append(\"security\").append(SEP);\n        } else {\n            storeLocation.append(trustStorePath);\n        }\n        KeyStore trustStore = SecurityUtils.openStore(storeLocation.append(trustStoreName).toString(), passphrase);\n        return trustStore;\n    }\n\n    /**\n     * Carrega um certificado no armaz�m seguro.\n     *\n     * @param certificateLocation\n     * @param certificateName\n     *\n     * @throws Exception\n     */\n    public static void installCertificate(String certificateLocation, String certificateName) throws Exception {\n        installCertificate(trustStorePath, certificateLocation, certificateName);\n    }\n\n    /**\n     * Carrega um certificado no armaz�m seguro.\n     *\n     * @param trustStorePath\n     * @param certificateLocation\n     * @param certificateName\n     *\n     * @throws Exception\n     */\n    public static void installCertificate(String trustStorePath, String certificateLocation, String certificateName) throws Exception {\n        KeyStore trustStore = SecurityUtils.openTrustStore(trustStorePath, trustStorePassword.toCharArray());\n        File dir = new File(certificateLocation);\n        File file = new File(dir, certificateName + \".cer\");\n        logger.debug(\"Abrindo certificado {} ...\", file);\n        CertificateFactory cf = CertificateFactory.getInstance(\"X.509\");\n        InputStream in = new FileInputStream(file);\n        X509Certificate cert = (X509Certificate) cf.generateCertificate(in);\n        in.close();\n        if (trustStore.containsAlias(certificateName)) {\n            logger.info(\"Certificado existente {}\", trustStore.getCertificate(certificateName).getType());\n        } else {\n            trustStore.setCertificateEntry(certificateName, cert);\n            logger.info(\"Certificado CARREGADO {}\", trustStore.getCertificate(certificateName).getType());\n        }\n    }\n\n    /**\n     * Execut�vel para acrescentar certificados.\n     *\n     * @param args\n     * @throws Exception\n     */\n    public static void main(String[] args) throws Exception {\n        String trustStorePath = null;\n        String certificateLocation = \"\";\n        String certificateName = \"\";\n        if (args.length > 2) {\n            trustStorePath = args[2];\n            certificateLocation = args[1];\n            certificateName = args[0];\n        } else if (args.length > 1) {\n            certificateLocation = args[1];\n            certificateName = args[0];\n        } else {\n            System.out.println(\"Uso: java SecurityUtils <localDoCertificado> <nomeDoCertificado> [localDoCacertsAPartirDoJavaHome]\");\n            return;\n        }\n        installCertificate(trustStorePath, certificateLocation, certificateName);\n    }\n\n    private final static Logger logger = LoggerFactory.getLogger(SecurityUtils.class);\n}\n",
		"id": "EvoSuiteBenchmark/6_jnfe/src/main/java/br/com/jnfe/base/util/SecurityUtilsTest3.java",
		"test_prompt": "// SecurityUtilsTest3.java\npackage br.com.jnfe.base.util;\n\nimport java.io.File;\nimport java.io.FileInputStream;\nimport java.io.InputStream;\nimport java.security.KeyStore;\nimport java.security.cert.CertificateFactory;\nimport java.security.cert.X509Certificate;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\nimport org.springframework.core.io.FileSystemResource;\nimport org.springframework.core.io.Resource;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link SecurityUtils}.\n* It contains ten unit test cases for the {@link SecurityUtils#openStore(String, char[])} method.\n*/\nclass SecurityUtilsTest3 {"
	},
	{
		"original_code": "// SecurityUtils.java\npackage br.com.jnfe.base.util;\n\nimport java.io.File;\nimport java.io.FileInputStream;\nimport java.io.InputStream;\nimport java.security.KeyStore;\nimport java.security.cert.CertificateFactory;\nimport java.security.cert.X509Certificate;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\nimport org.springframework.core.io.FileSystemResource;\nimport org.springframework.core.io.Resource;\n\n/**\n * Helper class to handle common security tasks.\n *\n * @author mauriciofernandesdecastro\n */\npublic class SecurityUtils {\n\n    static char SEP = File.separatorChar;\n\n    static String trustStoreName = \"cacerts\";\n\n    static String trustStorePath = null;\n\n    static String trustStorePassword = \"changeit\";\n\n    /**\n     * Abre um armaz�m.\n     *\n     * @param keyStoreType\n     * @param keyStoreResource\n     * @param passphrase\n     *\n     * @throws Exception\n     */\n    public static KeyStore openStore(String keyStoreType, Resource keyStoreResource, char[] passphrase) throws Exception {\n        logger.debug(\"Abrindo armaz�m {} ...\", keyStoreResource.getFilename());\n        KeyStore keyStore = KeyStore.getInstance(keyStoreType);\n        keyStore.load(keyStoreResource.getInputStream(), passphrase);\n        return keyStore;\n    }\n\n    /**\n     * Abre um armaz�m.\n     *\n     * @param keyStoreResource\n     * @param passphrase\n     *\n     * @throws Exception\n     */\n    public static KeyStore openStore(Resource keyStoreResource, char[] passphrase) throws Exception {\n        return openStore(KeyStore.getDefaultType(), keyStoreResource, passphrase);\n    }\n\n    /**\n     * Abre um armaz�m.\n     *\n     * @param keyStoreType\n     * @param storeLocation\n     * @param passphrase\n     *\n     * @throws Exception\n     */\n    public static KeyStore openStore(String keyStoreType, String storeLocation, char[] passphrase) throws Exception {\n        return openStore(keyStoreType, new FileSystemResource(storeLocation), passphrase);\n    }\n\n    /**\n     * Abre um armaz�m.\n     *\n     * @param storeLocation\n     * @param passphrase\n     *\n     * @throws Exception\n     */\n    public static KeyStore openStore(String storeLocation, char[] passphrase) throws Exception {\n        return openStore(new FileSystemResource(storeLocation), passphrase);\n    }\n\n    /**\n     * Abre o armaz�m de chaves confi�veis.\n     *\n     * @param passphrase\n     *\n     * @throws Exception\n     */\n    public static KeyStore openTrustStore(char[] passphrase) throws Exception {\n        return openTrustStore(trustStorePath, passphrase);\n    }\n\n    /**\n     * Abre o armaz�m de chaves confi�veis.\n     *\n     * @param passphrase\n     *\n     * @throws Exception\n     */\n    public static KeyStore openTrustStore(String trustStorePath, char[] passphrase) throws Exception {\n        StringBuilder storeLocation = new StringBuilder(System.getProperty(\"java.home\"));\n        if (trustStorePath == null) {\n            storeLocation.append(SEP).append(\"lib\").append(SEP).append(\"security\").append(SEP);\n        } else {\n            storeLocation.append(trustStorePath);\n        }\n        KeyStore trustStore = SecurityUtils.openStore(storeLocation.append(trustStoreName).toString(), passphrase);\n        return trustStore;\n    }\n\n    /**\n     * Carrega um certificado no armaz�m seguro.\n     *\n     * @param certificateLocation\n     * @param certificateName\n     *\n     * @throws Exception\n     */\n    public static void installCertificate(String certificateLocation, String certificateName) throws Exception {\n        installCertificate(trustStorePath, certificateLocation, certificateName);\n    }\n\n    /**\n     * Carrega um certificado no armaz�m seguro.\n     *\n     * @param trustStorePath\n     * @param certificateLocation\n     * @param certificateName\n     *\n     * @throws Exception\n     */\n    public static void installCertificate(String trustStorePath, String certificateLocation, String certificateName) throws Exception {\n        KeyStore trustStore = SecurityUtils.openTrustStore(trustStorePath, trustStorePassword.toCharArray());\n        File dir = new File(certificateLocation);\n        File file = new File(dir, certificateName + \".cer\");\n        logger.debug(\"Abrindo certificado {} ...\", file);\n        CertificateFactory cf = CertificateFactory.getInstance(\"X.509\");\n        InputStream in = new FileInputStream(file);\n        X509Certificate cert = (X509Certificate) cf.generateCertificate(in);\n        in.close();\n        if (trustStore.containsAlias(certificateName)) {\n            logger.info(\"Certificado existente {}\", trustStore.getCertificate(certificateName).getType());\n        } else {\n            trustStore.setCertificateEntry(certificateName, cert);\n            logger.info(\"Certificado CARREGADO {}\", trustStore.getCertificate(certificateName).getType());\n        }\n    }\n\n    /**\n     * Execut�vel para acrescentar certificados.\n     *\n     * @param args\n     * @throws Exception\n     */\n    public static void main(String[] args) throws Exception {\n        String trustStorePath = null;\n        String certificateLocation = \"\";\n        String certificateName = \"\";\n        if (args.length > 2) {\n            trustStorePath = args[2];\n            certificateLocation = args[1];\n            certificateName = args[0];\n        } else if (args.length > 1) {\n            certificateLocation = args[1];\n            certificateName = args[0];\n        } else {\n            System.out.println(\"Uso: java SecurityUtils <localDoCertificado> <nomeDoCertificado> [localDoCacertsAPartirDoJavaHome]\");\n            return;\n        }\n        installCertificate(trustStorePath, certificateLocation, certificateName);\n    }\n\n    private final static Logger logger = LoggerFactory.getLogger(SecurityUtils.class);\n}\n",
		"id": "EvoSuiteBenchmark/6_jnfe/src/main/java/br/com/jnfe/base/util/SecurityUtilsTest4.java",
		"test_prompt": "// SecurityUtilsTest4.java\npackage br.com.jnfe.base.util;\n\nimport java.io.File;\nimport java.io.FileInputStream;\nimport java.io.InputStream;\nimport java.security.KeyStore;\nimport java.security.cert.CertificateFactory;\nimport java.security.cert.X509Certificate;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\nimport org.springframework.core.io.FileSystemResource;\nimport org.springframework.core.io.Resource;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link SecurityUtils}.\n* It contains ten unit test cases for the {@link SecurityUtils#openTrustStore(char[])} method.\n*/\nclass SecurityUtilsTest4 {"
	},
	{
		"original_code": "// SecurityUtils.java\npackage br.com.jnfe.base.util;\n\nimport java.io.File;\nimport java.io.FileInputStream;\nimport java.io.InputStream;\nimport java.security.KeyStore;\nimport java.security.cert.CertificateFactory;\nimport java.security.cert.X509Certificate;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\nimport org.springframework.core.io.FileSystemResource;\nimport org.springframework.core.io.Resource;\n\n/**\n * Helper class to handle common security tasks.\n *\n * @author mauriciofernandesdecastro\n */\npublic class SecurityUtils {\n\n    static char SEP = File.separatorChar;\n\n    static String trustStoreName = \"cacerts\";\n\n    static String trustStorePath = null;\n\n    static String trustStorePassword = \"changeit\";\n\n    /**\n     * Abre um armaz�m.\n     *\n     * @param keyStoreType\n     * @param keyStoreResource\n     * @param passphrase\n     *\n     * @throws Exception\n     */\n    public static KeyStore openStore(String keyStoreType, Resource keyStoreResource, char[] passphrase) throws Exception {\n        logger.debug(\"Abrindo armaz�m {} ...\", keyStoreResource.getFilename());\n        KeyStore keyStore = KeyStore.getInstance(keyStoreType);\n        keyStore.load(keyStoreResource.getInputStream(), passphrase);\n        return keyStore;\n    }\n\n    /**\n     * Abre um armaz�m.\n     *\n     * @param keyStoreResource\n     * @param passphrase\n     *\n     * @throws Exception\n     */\n    public static KeyStore openStore(Resource keyStoreResource, char[] passphrase) throws Exception {\n        return openStore(KeyStore.getDefaultType(), keyStoreResource, passphrase);\n    }\n\n    /**\n     * Abre um armaz�m.\n     *\n     * @param keyStoreType\n     * @param storeLocation\n     * @param passphrase\n     *\n     * @throws Exception\n     */\n    public static KeyStore openStore(String keyStoreType, String storeLocation, char[] passphrase) throws Exception {\n        return openStore(keyStoreType, new FileSystemResource(storeLocation), passphrase);\n    }\n\n    /**\n     * Abre um armaz�m.\n     *\n     * @param storeLocation\n     * @param passphrase\n     *\n     * @throws Exception\n     */\n    public static KeyStore openStore(String storeLocation, char[] passphrase) throws Exception {\n        return openStore(new FileSystemResource(storeLocation), passphrase);\n    }\n\n    /**\n     * Abre o armaz�m de chaves confi�veis.\n     *\n     * @param passphrase\n     *\n     * @throws Exception\n     */\n    public static KeyStore openTrustStore(char[] passphrase) throws Exception {\n        return openTrustStore(trustStorePath, passphrase);\n    }\n\n    /**\n     * Abre o armaz�m de chaves confi�veis.\n     *\n     * @param passphrase\n     *\n     * @throws Exception\n     */\n    public static KeyStore openTrustStore(String trustStorePath, char[] passphrase) throws Exception {\n        StringBuilder storeLocation = new StringBuilder(System.getProperty(\"java.home\"));\n        if (trustStorePath == null) {\n            storeLocation.append(SEP).append(\"lib\").append(SEP).append(\"security\").append(SEP);\n        } else {\n            storeLocation.append(trustStorePath);\n        }\n        KeyStore trustStore = SecurityUtils.openStore(storeLocation.append(trustStoreName).toString(), passphrase);\n        return trustStore;\n    }\n\n    /**\n     * Carrega um certificado no armaz�m seguro.\n     *\n     * @param certificateLocation\n     * @param certificateName\n     *\n     * @throws Exception\n     */\n    public static void installCertificate(String certificateLocation, String certificateName) throws Exception {\n        installCertificate(trustStorePath, certificateLocation, certificateName);\n    }\n\n    /**\n     * Carrega um certificado no armaz�m seguro.\n     *\n     * @param trustStorePath\n     * @param certificateLocation\n     * @param certificateName\n     *\n     * @throws Exception\n     */\n    public static void installCertificate(String trustStorePath, String certificateLocation, String certificateName) throws Exception {\n        KeyStore trustStore = SecurityUtils.openTrustStore(trustStorePath, trustStorePassword.toCharArray());\n        File dir = new File(certificateLocation);\n        File file = new File(dir, certificateName + \".cer\");\n        logger.debug(\"Abrindo certificado {} ...\", file);\n        CertificateFactory cf = CertificateFactory.getInstance(\"X.509\");\n        InputStream in = new FileInputStream(file);\n        X509Certificate cert = (X509Certificate) cf.generateCertificate(in);\n        in.close();\n        if (trustStore.containsAlias(certificateName)) {\n            logger.info(\"Certificado existente {}\", trustStore.getCertificate(certificateName).getType());\n        } else {\n            trustStore.setCertificateEntry(certificateName, cert);\n            logger.info(\"Certificado CARREGADO {}\", trustStore.getCertificate(certificateName).getType());\n        }\n    }\n\n    /**\n     * Execut�vel para acrescentar certificados.\n     *\n     * @param args\n     * @throws Exception\n     */\n    public static void main(String[] args) throws Exception {\n        String trustStorePath = null;\n        String certificateLocation = \"\";\n        String certificateName = \"\";\n        if (args.length > 2) {\n            trustStorePath = args[2];\n            certificateLocation = args[1];\n            certificateName = args[0];\n        } else if (args.length > 1) {\n            certificateLocation = args[1];\n            certificateName = args[0];\n        } else {\n            System.out.println(\"Uso: java SecurityUtils <localDoCertificado> <nomeDoCertificado> [localDoCacertsAPartirDoJavaHome]\");\n            return;\n        }\n        installCertificate(trustStorePath, certificateLocation, certificateName);\n    }\n\n    private final static Logger logger = LoggerFactory.getLogger(SecurityUtils.class);\n}\n",
		"id": "EvoSuiteBenchmark/6_jnfe/src/main/java/br/com/jnfe/base/util/SecurityUtilsTest5.java",
		"test_prompt": "// SecurityUtilsTest5.java\npackage br.com.jnfe.base.util;\n\nimport java.io.File;\nimport java.io.FileInputStream;\nimport java.io.InputStream;\nimport java.security.KeyStore;\nimport java.security.cert.CertificateFactory;\nimport java.security.cert.X509Certificate;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\nimport org.springframework.core.io.FileSystemResource;\nimport org.springframework.core.io.Resource;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link SecurityUtils}.\n* It contains ten unit test cases for the {@link SecurityUtils#openTrustStore(String, char[])} method.\n*/\nclass SecurityUtilsTest5 {"
	},
	{
		"original_code": "// RequestAdapterImpl.java\npackage br.com.jnfe.base.pl006;\n\nimport javax.xml.stream.XMLOutputFactory;\nimport javax.xml.stream.XMLStreamException;\nimport javax.xml.stream.XMLStreamWriter;\nimport javax.xml.transform.Result;\nimport javax.xml.transform.Source;\nimport javax.xml.transform.Transformer;\nimport javax.xml.transform.TransformerException;\nimport javax.xml.transform.TransformerFactory;\nimport javax.xml.transform.dom.DOMResult;\nimport javax.xml.transform.dom.DOMSource;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\nimport org.springframework.xml.transform.StringResult;\nimport org.w3c.dom.Document;\nimport br.com.jnfe.base.adapter.RequestAdapter;\nimport br.com.jnfe.base.adapter.dom.AbstractNFeDOMAdapter;\n\n/**\n * Implementa��o padr�o da interface <code>RequestAdapter</code>.\n *\n * @author mauriciofernandesdecastro\n */\npublic class RequestAdapterImpl extends AbstractNFeDOMAdapter implements RequestAdapter {\n\n    public static final String VERSAO_DADOS = \"2.00\";\n\n    public static final String PREFIXO_NAMESPACE = \"http://www.portalfiscal.inf.br/nfe/wsdl/\";\n\n    public String newCabec() {\n        return new StringBuilder(\"<versaoDados>\").append(VERSAO_DADOS).append(\"</versaoDados>\").toString();\n    }\n\n    /**\n     * Prepara uma solicita��o.\n     *\n     * @param servicoRemoto\n     * @param qualificadorAbreviado\n     * @param content\n     */\n    public Source newRequest(String servicoRemoto, String qualificadorAbreviado, String content) {\n        String nameSpaceUri = new StringBuilder(PREFIXO_NAMESPACE).append(qualificadorAbreviado).toString();\n        XMLStreamWriter writer = null;\n        Document doc = newDocument(nameSpaceUri, servicoRemoto);\n        try {\n            XMLOutputFactory output = XMLOutputFactory.newInstance();\n            output.setProperty(\"javax.xml.stream.isNamespaceAware\", new Boolean(false));\n            writer = output.createXMLStreamWriter(new DOMResult(doc.getDocumentElement()));\n            writer.writeStartElement(\"nfeDadosMsg\");\n            writer.writeCharacters(content);\n            writer.writeEndElement();\n            writer.writeEndDocument();\n            writer.flush();\n            writer.close();\n        } catch (XMLStreamException e) {\n            throw new IllegalArgumentException(\"Imposs�vel gerar nova requisi��o, \", e);\n        }\n        if (logger.isTraceEnabled()) {\n            try {\n                Result stringResult = new StringResult();\n                TransformerFactory tFactory = TransformerFactory.newInstance();\n                Transformer transformer = tFactory.newTransformer();\n                transformer.transform(new DOMSource(doc), stringResult);\n                logger.trace(\"+++ A NOVA REQUISI��O �: {}\", stringResult);\n            } catch (TransformerException e) {\n                throw new IllegalArgumentException(\"Imposs�vel gerar nova requisi��o, \", e);\n            }\n        }\n        return new DOMSource(doc);\n    }\n\n    private static final Logger logger = LoggerFactory.getLogger(RequestAdapterImpl.class);\n}\n",
		"id": "EvoSuiteBenchmark/6_jnfe/src/main/java/br/com/jnfe/base/pl006/RequestAdapterImplTest0.java",
		"test_prompt": "// RequestAdapterImplTest0.java\npackage br.com.jnfe.base.pl006;\n\nimport javax.xml.stream.XMLOutputFactory;\nimport javax.xml.stream.XMLStreamException;\nimport javax.xml.stream.XMLStreamWriter;\nimport javax.xml.transform.Result;\nimport javax.xml.transform.Source;\nimport javax.xml.transform.Transformer;\nimport javax.xml.transform.TransformerException;\nimport javax.xml.transform.TransformerFactory;\nimport javax.xml.transform.dom.DOMResult;\nimport javax.xml.transform.dom.DOMSource;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\nimport org.springframework.xml.transform.StringResult;\nimport org.w3c.dom.Document;\nimport br.com.jnfe.base.adapter.RequestAdapter;\nimport br.com.jnfe.base.adapter.dom.AbstractNFeDOMAdapter;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link RequestAdapterImpl}.\n* It contains ten unit test cases for the {@link RequestAdapterImpl#newCabec()} method.\n*/\nclass RequestAdapterImplTest0 {"
	},
	{
		"original_code": "// RequestAdapterImpl.java\npackage br.com.jnfe.base.pl006;\n\nimport javax.xml.stream.XMLOutputFactory;\nimport javax.xml.stream.XMLStreamException;\nimport javax.xml.stream.XMLStreamWriter;\nimport javax.xml.transform.Result;\nimport javax.xml.transform.Source;\nimport javax.xml.transform.Transformer;\nimport javax.xml.transform.TransformerException;\nimport javax.xml.transform.TransformerFactory;\nimport javax.xml.transform.dom.DOMResult;\nimport javax.xml.transform.dom.DOMSource;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\nimport org.springframework.xml.transform.StringResult;\nimport org.w3c.dom.Document;\nimport br.com.jnfe.base.adapter.RequestAdapter;\nimport br.com.jnfe.base.adapter.dom.AbstractNFeDOMAdapter;\n\n/**\n * Implementa��o padr�o da interface <code>RequestAdapter</code>.\n *\n * @author mauriciofernandesdecastro\n */\npublic class RequestAdapterImpl extends AbstractNFeDOMAdapter implements RequestAdapter {\n\n    public static final String VERSAO_DADOS = \"2.00\";\n\n    public static final String PREFIXO_NAMESPACE = \"http://www.portalfiscal.inf.br/nfe/wsdl/\";\n\n    public String newCabec() {\n        return new StringBuilder(\"<versaoDados>\").append(VERSAO_DADOS).append(\"</versaoDados>\").toString();\n    }\n\n    /**\n     * Prepara uma solicita��o.\n     *\n     * @param servicoRemoto\n     * @param qualificadorAbreviado\n     * @param content\n     */\n    public Source newRequest(String servicoRemoto, String qualificadorAbreviado, String content) {\n        String nameSpaceUri = new StringBuilder(PREFIXO_NAMESPACE).append(qualificadorAbreviado).toString();\n        XMLStreamWriter writer = null;\n        Document doc = newDocument(nameSpaceUri, servicoRemoto);\n        try {\n            XMLOutputFactory output = XMLOutputFactory.newInstance();\n            output.setProperty(\"javax.xml.stream.isNamespaceAware\", new Boolean(false));\n            writer = output.createXMLStreamWriter(new DOMResult(doc.getDocumentElement()));\n            writer.writeStartElement(\"nfeDadosMsg\");\n            writer.writeCharacters(content);\n            writer.writeEndElement();\n            writer.writeEndDocument();\n            writer.flush();\n            writer.close();\n        } catch (XMLStreamException e) {\n            throw new IllegalArgumentException(\"Imposs�vel gerar nova requisi��o, \", e);\n        }\n        if (logger.isTraceEnabled()) {\n            try {\n                Result stringResult = new StringResult();\n                TransformerFactory tFactory = TransformerFactory.newInstance();\n                Transformer transformer = tFactory.newTransformer();\n                transformer.transform(new DOMSource(doc), stringResult);\n                logger.trace(\"+++ A NOVA REQUISI��O �: {}\", stringResult);\n            } catch (TransformerException e) {\n                throw new IllegalArgumentException(\"Imposs�vel gerar nova requisi��o, \", e);\n            }\n        }\n        return new DOMSource(doc);\n    }\n\n    private static final Logger logger = LoggerFactory.getLogger(RequestAdapterImpl.class);\n}\n",
		"id": "EvoSuiteBenchmark/6_jnfe/src/main/java/br/com/jnfe/base/pl006/RequestAdapterImplTest1.java",
		"test_prompt": "// RequestAdapterImplTest1.java\npackage br.com.jnfe.base.pl006;\n\nimport javax.xml.stream.XMLOutputFactory;\nimport javax.xml.stream.XMLStreamException;\nimport javax.xml.stream.XMLStreamWriter;\nimport javax.xml.transform.Result;\nimport javax.xml.transform.Source;\nimport javax.xml.transform.Transformer;\nimport javax.xml.transform.TransformerException;\nimport javax.xml.transform.TransformerFactory;\nimport javax.xml.transform.dom.DOMResult;\nimport javax.xml.transform.dom.DOMSource;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\nimport org.springframework.xml.transform.StringResult;\nimport org.w3c.dom.Document;\nimport br.com.jnfe.base.adapter.RequestAdapter;\nimport br.com.jnfe.base.adapter.dom.AbstractNFeDOMAdapter;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link RequestAdapterImpl}.\n* It contains ten unit test cases for the {@link RequestAdapterImpl#newRequest(String, String, String)} method.\n*/\nclass RequestAdapterImplTest1 {"
	},
	{
		"original_code": "// AbstractNFeAdaptadorBean.java\n/* Copyright 2005 I Serv Consultoria Empresarial Ltda.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage br.com.jnfe.base.adapter;\n\nimport java.math.RoundingMode;\nimport java.text.DecimalFormat;\nimport java.text.DecimalFormatSymbols;\nimport java.text.Format;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\nimport org.springframework.beans.factory.InitializingBean;\n\n/**\n * Classe base para os beans de adaptadores.\n *\n * <p>\n * Os esquemas reconhecidos pelos servi�os das diversas secretarias de\n * fazenda est�o sujeitos a revis�es frequentes, publicadas atrav�s de pacotes\n * de libera��o (PLxxx). Para garantir alguma estabilidade ao modelo de dom�nio\n * adotado pelo jNFe, � necess�rio um conjunto de adaptadores, cuja responsabilidade\n * passa a ser traduzir \"do\" modelo liberado em um certo PLxxx \"para\" o modelo de\n * dom�nio jNFe, ou vice-versa.\n * </p>\n *\n * @author Mauricio Fernandes de Castro\n */\npublic abstract class AbstractNFeAdaptadorBean implements InitializingBean {\n\n    private Format formatador2Digitos;\n\n    private Format formatador3Digitos;\n\n    private Format formatador4Digitos;\n\n    private char separadorDecimal = '.';\n\n    private RoundingMode modoDeArredondamento;\n\n    /**\n     * Formatador para n�meros com 2 d�gitos\n     */\n    public Format getFormatador2Digitos() {\n        return this.formatador2Digitos;\n    }\n\n    protected void setFormatador2Digitos(Format formatador2Digitos) {\n        this.formatador2Digitos = formatador2Digitos;\n    }\n\n    /**\n     * Formatador para n�meros com 3 d�gitos\n     */\n    public Format getFormatador3Digitos() {\n        return this.formatador3Digitos;\n    }\n\n    protected void setFormatador3Digitos(Format formatador3Digitos) {\n        this.formatador3Digitos = formatador3Digitos;\n    }\n\n    /**\n     * Formatador para n�meros com 4 d�gitos\n     */\n    public Format getFormatador4Digitos() {\n        return this.formatador4Digitos;\n    }\n\n    protected void setFormatador4Digitos(Format formatador4Digitos) {\n        this.formatador4Digitos = formatador4Digitos;\n    }\n\n    /**\n     * O separador decimal a ser usado.\n     *\n     * <p>\n     * Caso n�o seja definido, ser� '.'.\n     * </p>\n     */\n    public char getSeparadorDecimal() {\n        return separadorDecimal;\n    }\n\n    public void setSeparadorDecimal(char separadorDecimal) {\n        this.separadorDecimal = separadorDecimal;\n    }\n\n    /**\n     * Modo de arredondamento.\n     *\n     * <p>\n     * Caso n�o seja definido, ser� RoundingMode.DOWN.\n     * </p>\n     */\n    public RoundingMode getModoDeArredondamento() {\n        return modoDeArredondamento;\n    }\n\n    public void setModoDeArredondamento(RoundingMode modoDeArredondamento) {\n        this.modoDeArredondamento = modoDeArredondamento;\n    }\n\n    /**\n     * Formata com 2 d�gitos.\n     */\n    public String f2d(Object numero) {\n        if (numero != null) {\n            return getFormatador2Digitos().format(numero);\n        }\n        return null;\n    }\n\n    /**\n     * Formata com 3 d�gitos.\n     */\n    public String f3d(Object numero) {\n        if (numero != null) {\n            return getFormatador3Digitos().format(numero);\n        }\n        return null;\n    }\n\n    /**\n     * Formata com 4 d�gitos.\n     */\n    public String f4d(Object numero) {\n        if (numero != null) {\n            return getFormatador4Digitos().format(numero);\n        }\n        return null;\n    }\n\n    /**\n     * Implementa a interface <code>InitializingBean</code> para realizar\n     * a��es ap�s a inicializa��o desta classe pelo contexto Spring.\n     */\n    public void afterPropertiesSet() throws Exception {\n        DecimalFormatSymbols symbols = new DecimalFormatSymbols();\n        symbols.setDecimalSeparator(getSeparadorDecimal());\n        if (getModoDeArredondamento() == null) {\n            setModoDeArredondamento(RoundingMode.DOWN);\n        }\n        DecimalFormat d2 = new DecimalFormat(\"0.00\", symbols);\n        d2.setRoundingMode(getModoDeArredondamento());\n        setFormatador2Digitos(d2);\n        DecimalFormat d3 = new DecimalFormat(\"0.000\", symbols);\n        d3.setRoundingMode(getModoDeArredondamento());\n        setFormatador3Digitos(d3);\n        DecimalFormat d4 = new DecimalFormat(\"0.0000\", symbols);\n        d4.setRoundingMode(getModoDeArredondamento());\n        setFormatador4Digitos(d4);\n        if (logger.isDebugEnabled()) {\n            logger.debug(\"Formatadores decimais para 0\" + getSeparadorDecimal() + \"00 e \" + \"0\" + getSeparadorDecimal() + \"0000 definidos com arredondamento \" + getModoDeArredondamento());\n        }\n    }\n\n    /**\n     * Calcula o d�gito verificador.\n     *\n     * @param chNFe\n     */\n    public int calculaDV(String chNFe) {\n        int soma = calculaSomaDV(chNFe);\n        int dv = 11 - (soma % 11);\n        dv = dv > 9 ? 0 : dv;\n        logger.debug(\"D�gito verificador calculado para {} � {}.\", chNFe, dv);\n        return dv;\n    }\n\n    public int calculaSomaDV(String chNFe) {\n        if (chNFe.length() != 43) {\n            throw new IllegalArgumentException(\"Comprimento da chave '\" + chNFe + \"' precisa ser 43, mas � \" + chNFe.length());\n        }\n        int soma = 0;\n        for (int i = 0; i < 43; i++) {\n            soma += Character.getNumericValue(chNFe.charAt(i)) * convertePosPeso(i + 1, 43);\n        }\n        return soma;\n    }\n\n    public int convertePosPeso(int posicao, int comprimento) {\n        return ((comprimento - posicao) % 8) + 2;\n    }\n\n    private static final Logger logger = LoggerFactory.getLogger(AbstractNFeAdaptadorBean.class);\n}\n",
		"id": "EvoSuiteBenchmark/6_jnfe/src/main/java/br/com/jnfe/base/adapter/AbstractNFeAdaptadorBeanTest0.java",
		"test_prompt": "// AbstractNFeAdaptadorBeanTest0.java\npackage br.com.jnfe.base.adapter;\n\nimport java.math.RoundingMode;\nimport java.text.DecimalFormat;\nimport java.text.DecimalFormatSymbols;\nimport java.text.Format;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\nimport org.springframework.beans.factory.InitializingBean;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link AbstractNFeAdaptadorBean}.\n* It contains ten unit test cases for the {@link AbstractNFeAdaptadorBean#f2d(Object)} method.\n*/\nclass AbstractNFeAdaptadorBeanTest0 {"
	},
	{
		"original_code": "// AbstractNFeAdaptadorBean.java\n/* Copyright 2005 I Serv Consultoria Empresarial Ltda.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage br.com.jnfe.base.adapter;\n\nimport java.math.RoundingMode;\nimport java.text.DecimalFormat;\nimport java.text.DecimalFormatSymbols;\nimport java.text.Format;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\nimport org.springframework.beans.factory.InitializingBean;\n\n/**\n * Classe base para os beans de adaptadores.\n *\n * <p>\n * Os esquemas reconhecidos pelos servi�os das diversas secretarias de\n * fazenda est�o sujeitos a revis�es frequentes, publicadas atrav�s de pacotes\n * de libera��o (PLxxx). Para garantir alguma estabilidade ao modelo de dom�nio\n * adotado pelo jNFe, � necess�rio um conjunto de adaptadores, cuja responsabilidade\n * passa a ser traduzir \"do\" modelo liberado em um certo PLxxx \"para\" o modelo de\n * dom�nio jNFe, ou vice-versa.\n * </p>\n *\n * @author Mauricio Fernandes de Castro\n */\npublic abstract class AbstractNFeAdaptadorBean implements InitializingBean {\n\n    private Format formatador2Digitos;\n\n    private Format formatador3Digitos;\n\n    private Format formatador4Digitos;\n\n    private char separadorDecimal = '.';\n\n    private RoundingMode modoDeArredondamento;\n\n    /**\n     * Formatador para n�meros com 2 d�gitos\n     */\n    public Format getFormatador2Digitos() {\n        return this.formatador2Digitos;\n    }\n\n    protected void setFormatador2Digitos(Format formatador2Digitos) {\n        this.formatador2Digitos = formatador2Digitos;\n    }\n\n    /**\n     * Formatador para n�meros com 3 d�gitos\n     */\n    public Format getFormatador3Digitos() {\n        return this.formatador3Digitos;\n    }\n\n    protected void setFormatador3Digitos(Format formatador3Digitos) {\n        this.formatador3Digitos = formatador3Digitos;\n    }\n\n    /**\n     * Formatador para n�meros com 4 d�gitos\n     */\n    public Format getFormatador4Digitos() {\n        return this.formatador4Digitos;\n    }\n\n    protected void setFormatador4Digitos(Format formatador4Digitos) {\n        this.formatador4Digitos = formatador4Digitos;\n    }\n\n    /**\n     * O separador decimal a ser usado.\n     *\n     * <p>\n     * Caso n�o seja definido, ser� '.'.\n     * </p>\n     */\n    public char getSeparadorDecimal() {\n        return separadorDecimal;\n    }\n\n    public void setSeparadorDecimal(char separadorDecimal) {\n        this.separadorDecimal = separadorDecimal;\n    }\n\n    /**\n     * Modo de arredondamento.\n     *\n     * <p>\n     * Caso n�o seja definido, ser� RoundingMode.DOWN.\n     * </p>\n     */\n    public RoundingMode getModoDeArredondamento() {\n        return modoDeArredondamento;\n    }\n\n    public void setModoDeArredondamento(RoundingMode modoDeArredondamento) {\n        this.modoDeArredondamento = modoDeArredondamento;\n    }\n\n    /**\n     * Formata com 2 d�gitos.\n     */\n    public String f2d(Object numero) {\n        if (numero != null) {\n            return getFormatador2Digitos().format(numero);\n        }\n        return null;\n    }\n\n    /**\n     * Formata com 3 d�gitos.\n     */\n    public String f3d(Object numero) {\n        if (numero != null) {\n            return getFormatador3Digitos().format(numero);\n        }\n        return null;\n    }\n\n    /**\n     * Formata com 4 d�gitos.\n     */\n    public String f4d(Object numero) {\n        if (numero != null) {\n            return getFormatador4Digitos().format(numero);\n        }\n        return null;\n    }\n\n    /**\n     * Implementa a interface <code>InitializingBean</code> para realizar\n     * a��es ap�s a inicializa��o desta classe pelo contexto Spring.\n     */\n    public void afterPropertiesSet() throws Exception {\n        DecimalFormatSymbols symbols = new DecimalFormatSymbols();\n        symbols.setDecimalSeparator(getSeparadorDecimal());\n        if (getModoDeArredondamento() == null) {\n            setModoDeArredondamento(RoundingMode.DOWN);\n        }\n        DecimalFormat d2 = new DecimalFormat(\"0.00\", symbols);\n        d2.setRoundingMode(getModoDeArredondamento());\n        setFormatador2Digitos(d2);\n        DecimalFormat d3 = new DecimalFormat(\"0.000\", symbols);\n        d3.setRoundingMode(getModoDeArredondamento());\n        setFormatador3Digitos(d3);\n        DecimalFormat d4 = new DecimalFormat(\"0.0000\", symbols);\n        d4.setRoundingMode(getModoDeArredondamento());\n        setFormatador4Digitos(d4);\n        if (logger.isDebugEnabled()) {\n            logger.debug(\"Formatadores decimais para 0\" + getSeparadorDecimal() + \"00 e \" + \"0\" + getSeparadorDecimal() + \"0000 definidos com arredondamento \" + getModoDeArredondamento());\n        }\n    }\n\n    /**\n     * Calcula o d�gito verificador.\n     *\n     * @param chNFe\n     */\n    public int calculaDV(String chNFe) {\n        int soma = calculaSomaDV(chNFe);\n        int dv = 11 - (soma % 11);\n        dv = dv > 9 ? 0 : dv;\n        logger.debug(\"D�gito verificador calculado para {} � {}.\", chNFe, dv);\n        return dv;\n    }\n\n    public int calculaSomaDV(String chNFe) {\n        if (chNFe.length() != 43) {\n            throw new IllegalArgumentException(\"Comprimento da chave '\" + chNFe + \"' precisa ser 43, mas � \" + chNFe.length());\n        }\n        int soma = 0;\n        for (int i = 0; i < 43; i++) {\n            soma += Character.getNumericValue(chNFe.charAt(i)) * convertePosPeso(i + 1, 43);\n        }\n        return soma;\n    }\n\n    public int convertePosPeso(int posicao, int comprimento) {\n        return ((comprimento - posicao) % 8) + 2;\n    }\n\n    private static final Logger logger = LoggerFactory.getLogger(AbstractNFeAdaptadorBean.class);\n}\n",
		"id": "EvoSuiteBenchmark/6_jnfe/src/main/java/br/com/jnfe/base/adapter/AbstractNFeAdaptadorBeanTest1.java",
		"test_prompt": "// AbstractNFeAdaptadorBeanTest1.java\npackage br.com.jnfe.base.adapter;\n\nimport java.math.RoundingMode;\nimport java.text.DecimalFormat;\nimport java.text.DecimalFormatSymbols;\nimport java.text.Format;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\nimport org.springframework.beans.factory.InitializingBean;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link AbstractNFeAdaptadorBean}.\n* It contains ten unit test cases for the {@link AbstractNFeAdaptadorBean#f3d(Object)} method.\n*/\nclass AbstractNFeAdaptadorBeanTest1 {"
	},
	{
		"original_code": "// AbstractNFeAdaptadorBean.java\n/* Copyright 2005 I Serv Consultoria Empresarial Ltda.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage br.com.jnfe.base.adapter;\n\nimport java.math.RoundingMode;\nimport java.text.DecimalFormat;\nimport java.text.DecimalFormatSymbols;\nimport java.text.Format;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\nimport org.springframework.beans.factory.InitializingBean;\n\n/**\n * Classe base para os beans de adaptadores.\n *\n * <p>\n * Os esquemas reconhecidos pelos servi�os das diversas secretarias de\n * fazenda est�o sujeitos a revis�es frequentes, publicadas atrav�s de pacotes\n * de libera��o (PLxxx). Para garantir alguma estabilidade ao modelo de dom�nio\n * adotado pelo jNFe, � necess�rio um conjunto de adaptadores, cuja responsabilidade\n * passa a ser traduzir \"do\" modelo liberado em um certo PLxxx \"para\" o modelo de\n * dom�nio jNFe, ou vice-versa.\n * </p>\n *\n * @author Mauricio Fernandes de Castro\n */\npublic abstract class AbstractNFeAdaptadorBean implements InitializingBean {\n\n    private Format formatador2Digitos;\n\n    private Format formatador3Digitos;\n\n    private Format formatador4Digitos;\n\n    private char separadorDecimal = '.';\n\n    private RoundingMode modoDeArredondamento;\n\n    /**\n     * Formatador para n�meros com 2 d�gitos\n     */\n    public Format getFormatador2Digitos() {\n        return this.formatador2Digitos;\n    }\n\n    protected void setFormatador2Digitos(Format formatador2Digitos) {\n        this.formatador2Digitos = formatador2Digitos;\n    }\n\n    /**\n     * Formatador para n�meros com 3 d�gitos\n     */\n    public Format getFormatador3Digitos() {\n        return this.formatador3Digitos;\n    }\n\n    protected void setFormatador3Digitos(Format formatador3Digitos) {\n        this.formatador3Digitos = formatador3Digitos;\n    }\n\n    /**\n     * Formatador para n�meros com 4 d�gitos\n     */\n    public Format getFormatador4Digitos() {\n        return this.formatador4Digitos;\n    }\n\n    protected void setFormatador4Digitos(Format formatador4Digitos) {\n        this.formatador4Digitos = formatador4Digitos;\n    }\n\n    /**\n     * O separador decimal a ser usado.\n     *\n     * <p>\n     * Caso n�o seja definido, ser� '.'.\n     * </p>\n     */\n    public char getSeparadorDecimal() {\n        return separadorDecimal;\n    }\n\n    public void setSeparadorDecimal(char separadorDecimal) {\n        this.separadorDecimal = separadorDecimal;\n    }\n\n    /**\n     * Modo de arredondamento.\n     *\n     * <p>\n     * Caso n�o seja definido, ser� RoundingMode.DOWN.\n     * </p>\n     */\n    public RoundingMode getModoDeArredondamento() {\n        return modoDeArredondamento;\n    }\n\n    public void setModoDeArredondamento(RoundingMode modoDeArredondamento) {\n        this.modoDeArredondamento = modoDeArredondamento;\n    }\n\n    /**\n     * Formata com 2 d�gitos.\n     */\n    public String f2d(Object numero) {\n        if (numero != null) {\n            return getFormatador2Digitos().format(numero);\n        }\n        return null;\n    }\n\n    /**\n     * Formata com 3 d�gitos.\n     */\n    public String f3d(Object numero) {\n        if (numero != null) {\n            return getFormatador3Digitos().format(numero);\n        }\n        return null;\n    }\n\n    /**\n     * Formata com 4 d�gitos.\n     */\n    public String f4d(Object numero) {\n        if (numero != null) {\n            return getFormatador4Digitos().format(numero);\n        }\n        return null;\n    }\n\n    /**\n     * Implementa a interface <code>InitializingBean</code> para realizar\n     * a��es ap�s a inicializa��o desta classe pelo contexto Spring.\n     */\n    public void afterPropertiesSet() throws Exception {\n        DecimalFormatSymbols symbols = new DecimalFormatSymbols();\n        symbols.setDecimalSeparator(getSeparadorDecimal());\n        if (getModoDeArredondamento() == null) {\n            setModoDeArredondamento(RoundingMode.DOWN);\n        }\n        DecimalFormat d2 = new DecimalFormat(\"0.00\", symbols);\n        d2.setRoundingMode(getModoDeArredondamento());\n        setFormatador2Digitos(d2);\n        DecimalFormat d3 = new DecimalFormat(\"0.000\", symbols);\n        d3.setRoundingMode(getModoDeArredondamento());\n        setFormatador3Digitos(d3);\n        DecimalFormat d4 = new DecimalFormat(\"0.0000\", symbols);\n        d4.setRoundingMode(getModoDeArredondamento());\n        setFormatador4Digitos(d4);\n        if (logger.isDebugEnabled()) {\n            logger.debug(\"Formatadores decimais para 0\" + getSeparadorDecimal() + \"00 e \" + \"0\" + getSeparadorDecimal() + \"0000 definidos com arredondamento \" + getModoDeArredondamento());\n        }\n    }\n\n    /**\n     * Calcula o d�gito verificador.\n     *\n     * @param chNFe\n     */\n    public int calculaDV(String chNFe) {\n        int soma = calculaSomaDV(chNFe);\n        int dv = 11 - (soma % 11);\n        dv = dv > 9 ? 0 : dv;\n        logger.debug(\"D�gito verificador calculado para {} � {}.\", chNFe, dv);\n        return dv;\n    }\n\n    public int calculaSomaDV(String chNFe) {\n        if (chNFe.length() != 43) {\n            throw new IllegalArgumentException(\"Comprimento da chave '\" + chNFe + \"' precisa ser 43, mas � \" + chNFe.length());\n        }\n        int soma = 0;\n        for (int i = 0; i < 43; i++) {\n            soma += Character.getNumericValue(chNFe.charAt(i)) * convertePosPeso(i + 1, 43);\n        }\n        return soma;\n    }\n\n    public int convertePosPeso(int posicao, int comprimento) {\n        return ((comprimento - posicao) % 8) + 2;\n    }\n\n    private static final Logger logger = LoggerFactory.getLogger(AbstractNFeAdaptadorBean.class);\n}\n",
		"id": "EvoSuiteBenchmark/6_jnfe/src/main/java/br/com/jnfe/base/adapter/AbstractNFeAdaptadorBeanTest2.java",
		"test_prompt": "// AbstractNFeAdaptadorBeanTest2.java\npackage br.com.jnfe.base.adapter;\n\nimport java.math.RoundingMode;\nimport java.text.DecimalFormat;\nimport java.text.DecimalFormatSymbols;\nimport java.text.Format;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\nimport org.springframework.beans.factory.InitializingBean;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link AbstractNFeAdaptadorBean}.\n* It contains ten unit test cases for the {@link AbstractNFeAdaptadorBean#f4d(Object)} method.\n*/\nclass AbstractNFeAdaptadorBeanTest2 {"
	},
	{
		"original_code": "// AbstractNFeAdaptadorBean.java\n/* Copyright 2005 I Serv Consultoria Empresarial Ltda.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage br.com.jnfe.base.adapter;\n\nimport java.math.RoundingMode;\nimport java.text.DecimalFormat;\nimport java.text.DecimalFormatSymbols;\nimport java.text.Format;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\nimport org.springframework.beans.factory.InitializingBean;\n\n/**\n * Classe base para os beans de adaptadores.\n *\n * <p>\n * Os esquemas reconhecidos pelos servi�os das diversas secretarias de\n * fazenda est�o sujeitos a revis�es frequentes, publicadas atrav�s de pacotes\n * de libera��o (PLxxx). Para garantir alguma estabilidade ao modelo de dom�nio\n * adotado pelo jNFe, � necess�rio um conjunto de adaptadores, cuja responsabilidade\n * passa a ser traduzir \"do\" modelo liberado em um certo PLxxx \"para\" o modelo de\n * dom�nio jNFe, ou vice-versa.\n * </p>\n *\n * @author Mauricio Fernandes de Castro\n */\npublic abstract class AbstractNFeAdaptadorBean implements InitializingBean {\n\n    private Format formatador2Digitos;\n\n    private Format formatador3Digitos;\n\n    private Format formatador4Digitos;\n\n    private char separadorDecimal = '.';\n\n    private RoundingMode modoDeArredondamento;\n\n    /**\n     * Formatador para n�meros com 2 d�gitos\n     */\n    public Format getFormatador2Digitos() {\n        return this.formatador2Digitos;\n    }\n\n    protected void setFormatador2Digitos(Format formatador2Digitos) {\n        this.formatador2Digitos = formatador2Digitos;\n    }\n\n    /**\n     * Formatador para n�meros com 3 d�gitos\n     */\n    public Format getFormatador3Digitos() {\n        return this.formatador3Digitos;\n    }\n\n    protected void setFormatador3Digitos(Format formatador3Digitos) {\n        this.formatador3Digitos = formatador3Digitos;\n    }\n\n    /**\n     * Formatador para n�meros com 4 d�gitos\n     */\n    public Format getFormatador4Digitos() {\n        return this.formatador4Digitos;\n    }\n\n    protected void setFormatador4Digitos(Format formatador4Digitos) {\n        this.formatador4Digitos = formatador4Digitos;\n    }\n\n    /**\n     * O separador decimal a ser usado.\n     *\n     * <p>\n     * Caso n�o seja definido, ser� '.'.\n     * </p>\n     */\n    public char getSeparadorDecimal() {\n        return separadorDecimal;\n    }\n\n    public void setSeparadorDecimal(char separadorDecimal) {\n        this.separadorDecimal = separadorDecimal;\n    }\n\n    /**\n     * Modo de arredondamento.\n     *\n     * <p>\n     * Caso n�o seja definido, ser� RoundingMode.DOWN.\n     * </p>\n     */\n    public RoundingMode getModoDeArredondamento() {\n        return modoDeArredondamento;\n    }\n\n    public void setModoDeArredondamento(RoundingMode modoDeArredondamento) {\n        this.modoDeArredondamento = modoDeArredondamento;\n    }\n\n    /**\n     * Formata com 2 d�gitos.\n     */\n    public String f2d(Object numero) {\n        if (numero != null) {\n            return getFormatador2Digitos().format(numero);\n        }\n        return null;\n    }\n\n    /**\n     * Formata com 3 d�gitos.\n     */\n    public String f3d(Object numero) {\n        if (numero != null) {\n            return getFormatador3Digitos().format(numero);\n        }\n        return null;\n    }\n\n    /**\n     * Formata com 4 d�gitos.\n     */\n    public String f4d(Object numero) {\n        if (numero != null) {\n            return getFormatador4Digitos().format(numero);\n        }\n        return null;\n    }\n\n    /**\n     * Implementa a interface <code>InitializingBean</code> para realizar\n     * a��es ap�s a inicializa��o desta classe pelo contexto Spring.\n     */\n    public void afterPropertiesSet() throws Exception {\n        DecimalFormatSymbols symbols = new DecimalFormatSymbols();\n        symbols.setDecimalSeparator(getSeparadorDecimal());\n        if (getModoDeArredondamento() == null) {\n            setModoDeArredondamento(RoundingMode.DOWN);\n        }\n        DecimalFormat d2 = new DecimalFormat(\"0.00\", symbols);\n        d2.setRoundingMode(getModoDeArredondamento());\n        setFormatador2Digitos(d2);\n        DecimalFormat d3 = new DecimalFormat(\"0.000\", symbols);\n        d3.setRoundingMode(getModoDeArredondamento());\n        setFormatador3Digitos(d3);\n        DecimalFormat d4 = new DecimalFormat(\"0.0000\", symbols);\n        d4.setRoundingMode(getModoDeArredondamento());\n        setFormatador4Digitos(d4);\n        if (logger.isDebugEnabled()) {\n            logger.debug(\"Formatadores decimais para 0\" + getSeparadorDecimal() + \"00 e \" + \"0\" + getSeparadorDecimal() + \"0000 definidos com arredondamento \" + getModoDeArredondamento());\n        }\n    }\n\n    /**\n     * Calcula o d�gito verificador.\n     *\n     * @param chNFe\n     */\n    public int calculaDV(String chNFe) {\n        int soma = calculaSomaDV(chNFe);\n        int dv = 11 - (soma % 11);\n        dv = dv > 9 ? 0 : dv;\n        logger.debug(\"D�gito verificador calculado para {} � {}.\", chNFe, dv);\n        return dv;\n    }\n\n    public int calculaSomaDV(String chNFe) {\n        if (chNFe.length() != 43) {\n            throw new IllegalArgumentException(\"Comprimento da chave '\" + chNFe + \"' precisa ser 43, mas � \" + chNFe.length());\n        }\n        int soma = 0;\n        for (int i = 0; i < 43; i++) {\n            soma += Character.getNumericValue(chNFe.charAt(i)) * convertePosPeso(i + 1, 43);\n        }\n        return soma;\n    }\n\n    public int convertePosPeso(int posicao, int comprimento) {\n        return ((comprimento - posicao) % 8) + 2;\n    }\n\n    private static final Logger logger = LoggerFactory.getLogger(AbstractNFeAdaptadorBean.class);\n}\n",
		"id": "EvoSuiteBenchmark/6_jnfe/src/main/java/br/com/jnfe/base/adapter/AbstractNFeAdaptadorBeanTest3.java",
		"test_prompt": "// AbstractNFeAdaptadorBeanTest3.java\npackage br.com.jnfe.base.adapter;\n\nimport java.math.RoundingMode;\nimport java.text.DecimalFormat;\nimport java.text.DecimalFormatSymbols;\nimport java.text.Format;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\nimport org.springframework.beans.factory.InitializingBean;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link AbstractNFeAdaptadorBean}.\n* It contains ten unit test cases for the {@link AbstractNFeAdaptadorBean#calculaDV(String)} method.\n*/\nclass AbstractNFeAdaptadorBeanTest3 {"
	},
	{
		"original_code": "// AbstractNFeAdaptadorBean.java\n/* Copyright 2005 I Serv Consultoria Empresarial Ltda.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage br.com.jnfe.base.adapter;\n\nimport java.math.RoundingMode;\nimport java.text.DecimalFormat;\nimport java.text.DecimalFormatSymbols;\nimport java.text.Format;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\nimport org.springframework.beans.factory.InitializingBean;\n\n/**\n * Classe base para os beans de adaptadores.\n *\n * <p>\n * Os esquemas reconhecidos pelos servi�os das diversas secretarias de\n * fazenda est�o sujeitos a revis�es frequentes, publicadas atrav�s de pacotes\n * de libera��o (PLxxx). Para garantir alguma estabilidade ao modelo de dom�nio\n * adotado pelo jNFe, � necess�rio um conjunto de adaptadores, cuja responsabilidade\n * passa a ser traduzir \"do\" modelo liberado em um certo PLxxx \"para\" o modelo de\n * dom�nio jNFe, ou vice-versa.\n * </p>\n *\n * @author Mauricio Fernandes de Castro\n */\npublic abstract class AbstractNFeAdaptadorBean implements InitializingBean {\n\n    private Format formatador2Digitos;\n\n    private Format formatador3Digitos;\n\n    private Format formatador4Digitos;\n\n    private char separadorDecimal = '.';\n\n    private RoundingMode modoDeArredondamento;\n\n    /**\n     * Formatador para n�meros com 2 d�gitos\n     */\n    public Format getFormatador2Digitos() {\n        return this.formatador2Digitos;\n    }\n\n    protected void setFormatador2Digitos(Format formatador2Digitos) {\n        this.formatador2Digitos = formatador2Digitos;\n    }\n\n    /**\n     * Formatador para n�meros com 3 d�gitos\n     */\n    public Format getFormatador3Digitos() {\n        return this.formatador3Digitos;\n    }\n\n    protected void setFormatador3Digitos(Format formatador3Digitos) {\n        this.formatador3Digitos = formatador3Digitos;\n    }\n\n    /**\n     * Formatador para n�meros com 4 d�gitos\n     */\n    public Format getFormatador4Digitos() {\n        return this.formatador4Digitos;\n    }\n\n    protected void setFormatador4Digitos(Format formatador4Digitos) {\n        this.formatador4Digitos = formatador4Digitos;\n    }\n\n    /**\n     * O separador decimal a ser usado.\n     *\n     * <p>\n     * Caso n�o seja definido, ser� '.'.\n     * </p>\n     */\n    public char getSeparadorDecimal() {\n        return separadorDecimal;\n    }\n\n    public void setSeparadorDecimal(char separadorDecimal) {\n        this.separadorDecimal = separadorDecimal;\n    }\n\n    /**\n     * Modo de arredondamento.\n     *\n     * <p>\n     * Caso n�o seja definido, ser� RoundingMode.DOWN.\n     * </p>\n     */\n    public RoundingMode getModoDeArredondamento() {\n        return modoDeArredondamento;\n    }\n\n    public void setModoDeArredondamento(RoundingMode modoDeArredondamento) {\n        this.modoDeArredondamento = modoDeArredondamento;\n    }\n\n    /**\n     * Formata com 2 d�gitos.\n     */\n    public String f2d(Object numero) {\n        if (numero != null) {\n            return getFormatador2Digitos().format(numero);\n        }\n        return null;\n    }\n\n    /**\n     * Formata com 3 d�gitos.\n     */\n    public String f3d(Object numero) {\n        if (numero != null) {\n            return getFormatador3Digitos().format(numero);\n        }\n        return null;\n    }\n\n    /**\n     * Formata com 4 d�gitos.\n     */\n    public String f4d(Object numero) {\n        if (numero != null) {\n            return getFormatador4Digitos().format(numero);\n        }\n        return null;\n    }\n\n    /**\n     * Implementa a interface <code>InitializingBean</code> para realizar\n     * a��es ap�s a inicializa��o desta classe pelo contexto Spring.\n     */\n    public void afterPropertiesSet() throws Exception {\n        DecimalFormatSymbols symbols = new DecimalFormatSymbols();\n        symbols.setDecimalSeparator(getSeparadorDecimal());\n        if (getModoDeArredondamento() == null) {\n            setModoDeArredondamento(RoundingMode.DOWN);\n        }\n        DecimalFormat d2 = new DecimalFormat(\"0.00\", symbols);\n        d2.setRoundingMode(getModoDeArredondamento());\n        setFormatador2Digitos(d2);\n        DecimalFormat d3 = new DecimalFormat(\"0.000\", symbols);\n        d3.setRoundingMode(getModoDeArredondamento());\n        setFormatador3Digitos(d3);\n        DecimalFormat d4 = new DecimalFormat(\"0.0000\", symbols);\n        d4.setRoundingMode(getModoDeArredondamento());\n        setFormatador4Digitos(d4);\n        if (logger.isDebugEnabled()) {\n            logger.debug(\"Formatadores decimais para 0\" + getSeparadorDecimal() + \"00 e \" + \"0\" + getSeparadorDecimal() + \"0000 definidos com arredondamento \" + getModoDeArredondamento());\n        }\n    }\n\n    /**\n     * Calcula o d�gito verificador.\n     *\n     * @param chNFe\n     */\n    public int calculaDV(String chNFe) {\n        int soma = calculaSomaDV(chNFe);\n        int dv = 11 - (soma % 11);\n        dv = dv > 9 ? 0 : dv;\n        logger.debug(\"D�gito verificador calculado para {} � {}.\", chNFe, dv);\n        return dv;\n    }\n\n    public int calculaSomaDV(String chNFe) {\n        if (chNFe.length() != 43) {\n            throw new IllegalArgumentException(\"Comprimento da chave '\" + chNFe + \"' precisa ser 43, mas � \" + chNFe.length());\n        }\n        int soma = 0;\n        for (int i = 0; i < 43; i++) {\n            soma += Character.getNumericValue(chNFe.charAt(i)) * convertePosPeso(i + 1, 43);\n        }\n        return soma;\n    }\n\n    public int convertePosPeso(int posicao, int comprimento) {\n        return ((comprimento - posicao) % 8) + 2;\n    }\n\n    private static final Logger logger = LoggerFactory.getLogger(AbstractNFeAdaptadorBean.class);\n}\n",
		"id": "EvoSuiteBenchmark/6_jnfe/src/main/java/br/com/jnfe/base/adapter/AbstractNFeAdaptadorBeanTest4.java",
		"test_prompt": "// AbstractNFeAdaptadorBeanTest4.java\npackage br.com.jnfe.base.adapter;\n\nimport java.math.RoundingMode;\nimport java.text.DecimalFormat;\nimport java.text.DecimalFormatSymbols;\nimport java.text.Format;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\nimport org.springframework.beans.factory.InitializingBean;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link AbstractNFeAdaptadorBean}.\n* It contains ten unit test cases for the {@link AbstractNFeAdaptadorBean#calculaSomaDV(String)} method.\n*/\nclass AbstractNFeAdaptadorBeanTest4 {"
	},
	{
		"original_code": "// AbstractNFeAdaptadorBean.java\n/* Copyright 2005 I Serv Consultoria Empresarial Ltda.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage br.com.jnfe.base.adapter;\n\nimport java.math.RoundingMode;\nimport java.text.DecimalFormat;\nimport java.text.DecimalFormatSymbols;\nimport java.text.Format;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\nimport org.springframework.beans.factory.InitializingBean;\n\n/**\n * Classe base para os beans de adaptadores.\n *\n * <p>\n * Os esquemas reconhecidos pelos servi�os das diversas secretarias de\n * fazenda est�o sujeitos a revis�es frequentes, publicadas atrav�s de pacotes\n * de libera��o (PLxxx). Para garantir alguma estabilidade ao modelo de dom�nio\n * adotado pelo jNFe, � necess�rio um conjunto de adaptadores, cuja responsabilidade\n * passa a ser traduzir \"do\" modelo liberado em um certo PLxxx \"para\" o modelo de\n * dom�nio jNFe, ou vice-versa.\n * </p>\n *\n * @author Mauricio Fernandes de Castro\n */\npublic abstract class AbstractNFeAdaptadorBean implements InitializingBean {\n\n    private Format formatador2Digitos;\n\n    private Format formatador3Digitos;\n\n    private Format formatador4Digitos;\n\n    private char separadorDecimal = '.';\n\n    private RoundingMode modoDeArredondamento;\n\n    /**\n     * Formatador para n�meros com 2 d�gitos\n     */\n    public Format getFormatador2Digitos() {\n        return this.formatador2Digitos;\n    }\n\n    protected void setFormatador2Digitos(Format formatador2Digitos) {\n        this.formatador2Digitos = formatador2Digitos;\n    }\n\n    /**\n     * Formatador para n�meros com 3 d�gitos\n     */\n    public Format getFormatador3Digitos() {\n        return this.formatador3Digitos;\n    }\n\n    protected void setFormatador3Digitos(Format formatador3Digitos) {\n        this.formatador3Digitos = formatador3Digitos;\n    }\n\n    /**\n     * Formatador para n�meros com 4 d�gitos\n     */\n    public Format getFormatador4Digitos() {\n        return this.formatador4Digitos;\n    }\n\n    protected void setFormatador4Digitos(Format formatador4Digitos) {\n        this.formatador4Digitos = formatador4Digitos;\n    }\n\n    /**\n     * O separador decimal a ser usado.\n     *\n     * <p>\n     * Caso n�o seja definido, ser� '.'.\n     * </p>\n     */\n    public char getSeparadorDecimal() {\n        return separadorDecimal;\n    }\n\n    public void setSeparadorDecimal(char separadorDecimal) {\n        this.separadorDecimal = separadorDecimal;\n    }\n\n    /**\n     * Modo de arredondamento.\n     *\n     * <p>\n     * Caso n�o seja definido, ser� RoundingMode.DOWN.\n     * </p>\n     */\n    public RoundingMode getModoDeArredondamento() {\n        return modoDeArredondamento;\n    }\n\n    public void setModoDeArredondamento(RoundingMode modoDeArredondamento) {\n        this.modoDeArredondamento = modoDeArredondamento;\n    }\n\n    /**\n     * Formata com 2 d�gitos.\n     */\n    public String f2d(Object numero) {\n        if (numero != null) {\n            return getFormatador2Digitos().format(numero);\n        }\n        return null;\n    }\n\n    /**\n     * Formata com 3 d�gitos.\n     */\n    public String f3d(Object numero) {\n        if (numero != null) {\n            return getFormatador3Digitos().format(numero);\n        }\n        return null;\n    }\n\n    /**\n     * Formata com 4 d�gitos.\n     */\n    public String f4d(Object numero) {\n        if (numero != null) {\n            return getFormatador4Digitos().format(numero);\n        }\n        return null;\n    }\n\n    /**\n     * Implementa a interface <code>InitializingBean</code> para realizar\n     * a��es ap�s a inicializa��o desta classe pelo contexto Spring.\n     */\n    public void afterPropertiesSet() throws Exception {\n        DecimalFormatSymbols symbols = new DecimalFormatSymbols();\n        symbols.setDecimalSeparator(getSeparadorDecimal());\n        if (getModoDeArredondamento() == null) {\n            setModoDeArredondamento(RoundingMode.DOWN);\n        }\n        DecimalFormat d2 = new DecimalFormat(\"0.00\", symbols);\n        d2.setRoundingMode(getModoDeArredondamento());\n        setFormatador2Digitos(d2);\n        DecimalFormat d3 = new DecimalFormat(\"0.000\", symbols);\n        d3.setRoundingMode(getModoDeArredondamento());\n        setFormatador3Digitos(d3);\n        DecimalFormat d4 = new DecimalFormat(\"0.0000\", symbols);\n        d4.setRoundingMode(getModoDeArredondamento());\n        setFormatador4Digitos(d4);\n        if (logger.isDebugEnabled()) {\n            logger.debug(\"Formatadores decimais para 0\" + getSeparadorDecimal() + \"00 e \" + \"0\" + getSeparadorDecimal() + \"0000 definidos com arredondamento \" + getModoDeArredondamento());\n        }\n    }\n\n    /**\n     * Calcula o d�gito verificador.\n     *\n     * @param chNFe\n     */\n    public int calculaDV(String chNFe) {\n        int soma = calculaSomaDV(chNFe);\n        int dv = 11 - (soma % 11);\n        dv = dv > 9 ? 0 : dv;\n        logger.debug(\"D�gito verificador calculado para {} � {}.\", chNFe, dv);\n        return dv;\n    }\n\n    public int calculaSomaDV(String chNFe) {\n        if (chNFe.length() != 43) {\n            throw new IllegalArgumentException(\"Comprimento da chave '\" + chNFe + \"' precisa ser 43, mas � \" + chNFe.length());\n        }\n        int soma = 0;\n        for (int i = 0; i < 43; i++) {\n            soma += Character.getNumericValue(chNFe.charAt(i)) * convertePosPeso(i + 1, 43);\n        }\n        return soma;\n    }\n\n    public int convertePosPeso(int posicao, int comprimento) {\n        return ((comprimento - posicao) % 8) + 2;\n    }\n\n    private static final Logger logger = LoggerFactory.getLogger(AbstractNFeAdaptadorBean.class);\n}\n",
		"id": "EvoSuiteBenchmark/6_jnfe/src/main/java/br/com/jnfe/base/adapter/AbstractNFeAdaptadorBeanTest5.java",
		"test_prompt": "// AbstractNFeAdaptadorBeanTest5.java\npackage br.com.jnfe.base.adapter;\n\nimport java.math.RoundingMode;\nimport java.text.DecimalFormat;\nimport java.text.DecimalFormatSymbols;\nimport java.text.Format;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\nimport org.springframework.beans.factory.InitializingBean;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link AbstractNFeAdaptadorBean}.\n* It contains ten unit test cases for the {@link AbstractNFeAdaptadorBean#convertePosPeso(int, int)} method.\n*/\nclass AbstractNFeAdaptadorBeanTest5 {"
	},
	{
		"original_code": "// RequestAdapterImpl.java\npackage br.com.jnfe.base.pl005d;\n\nimport javax.xml.stream.XMLOutputFactory;\nimport javax.xml.stream.XMLStreamException;\nimport javax.xml.stream.XMLStreamWriter;\nimport javax.xml.transform.Result;\nimport javax.xml.transform.Source;\nimport javax.xml.transform.Transformer;\nimport javax.xml.transform.TransformerException;\nimport javax.xml.transform.TransformerFactory;\nimport javax.xml.transform.dom.DOMResult;\nimport javax.xml.transform.dom.DOMSource;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\nimport org.springframework.xml.transform.StringResult;\nimport org.w3c.dom.Document;\nimport br.com.jnfe.base.adapter.RequestAdapter;\nimport br.com.jnfe.base.adapter.dom.AbstractNFeDOMAdapter;\n\n/**\n * Implementa��o padr�o da interface <code>RequestAdapter</code>.\n *\n * @author mauriciofernandesdecastro\n */\npublic class RequestAdapterImpl extends AbstractNFeDOMAdapter implements RequestAdapter {\n\n    public static final String VERSAO_DADOS = \"1.07\";\n\n    public static final String PREFIXO_NAMESPACE = \"http://www.portalfiscal.inf.br/nfe/wsdl/\";\n\n    public String newCabec() {\n        return new StringBuilder(\"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?>\").append(\"<cabecMsg xmlns=\\\"http://www.portalfiscal.inf.br/nfe\\\" \").append(\"versao=\\\"\").append(\"1.02\").append(\"\\\"><versaoDados>\").append(VERSAO_DADOS).append(\"</versaoDados>\").append(\"</cabecMsg>\").toString();\n    }\n\n    /**\n     * Prepara uma solicita��o.\n     *\n     * @param servicoRemoto\n     * @param qualificadorAbreviado\n     * @param content\n     */\n    public Source newRequest(String servicoRemoto, String qualificadorAbreviado, String content) {\n        String nameSpaceUri = new StringBuilder(PREFIXO_NAMESPACE).append(qualificadorAbreviado).toString();\n        XMLStreamWriter writer = null;\n        Document doc = newDocument(nameSpaceUri, servicoRemoto);\n        try {\n            XMLOutputFactory output = XMLOutputFactory.newInstance();\n            output.setProperty(\"javax.xml.stream.isNamespaceAware\", new Boolean(false));\n            writer = output.createXMLStreamWriter(new DOMResult(doc.getDocumentElement()));\n            writer.writeStartElement(\"nfeCabecMsg\");\n            writer.writeCharacters(newCabec());\n            writer.writeEndElement();\n            writer.writeStartElement(\"nfeDadosMsg\");\n            writer.writeCharacters(content);\n            writer.writeEndElement();\n            writer.writeEndDocument();\n            writer.flush();\n            writer.close();\n        } catch (XMLStreamException e) {\n            throw new IllegalArgumentException(\"Imposs�vel gerar nova requisi��o, \", e);\n        }\n        if (logger.isTraceEnabled()) {\n            try {\n                Result stringResult = new StringResult();\n                TransformerFactory tFactory = TransformerFactory.newInstance();\n                Transformer transformer = tFactory.newTransformer();\n                transformer.transform(new DOMSource(doc), stringResult);\n                logger.trace(\"+++ A NOVA REQUISI��O �: {}\", stringResult);\n            } catch (TransformerException e) {\n                throw new IllegalArgumentException(\"Imposs�vel gerar nova requisi��o, \", e);\n            }\n        }\n        return new DOMSource(doc);\n    }\n\n    private static final Logger logger = LoggerFactory.getLogger(RequestAdapterImpl.class);\n}\n",
		"id": "EvoSuiteBenchmark/6_jnfe/src/main/java/br/com/jnfe/base/pl005d/RequestAdapterImplTest0.java",
		"test_prompt": "// RequestAdapterImplTest0.java\npackage br.com.jnfe.base.pl005d;\n\nimport javax.xml.stream.XMLOutputFactory;\nimport javax.xml.stream.XMLStreamException;\nimport javax.xml.stream.XMLStreamWriter;\nimport javax.xml.transform.Result;\nimport javax.xml.transform.Source;\nimport javax.xml.transform.Transformer;\nimport javax.xml.transform.TransformerException;\nimport javax.xml.transform.TransformerFactory;\nimport javax.xml.transform.dom.DOMResult;\nimport javax.xml.transform.dom.DOMSource;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\nimport org.springframework.xml.transform.StringResult;\nimport org.w3c.dom.Document;\nimport br.com.jnfe.base.adapter.RequestAdapter;\nimport br.com.jnfe.base.adapter.dom.AbstractNFeDOMAdapter;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link RequestAdapterImpl}.\n* It contains ten unit test cases for the {@link RequestAdapterImpl#newCabec()} method.\n*/\nclass RequestAdapterImplTest0 {"
	},
	{
		"original_code": "// RequestAdapterImpl.java\npackage br.com.jnfe.base.pl005d;\n\nimport javax.xml.stream.XMLOutputFactory;\nimport javax.xml.stream.XMLStreamException;\nimport javax.xml.stream.XMLStreamWriter;\nimport javax.xml.transform.Result;\nimport javax.xml.transform.Source;\nimport javax.xml.transform.Transformer;\nimport javax.xml.transform.TransformerException;\nimport javax.xml.transform.TransformerFactory;\nimport javax.xml.transform.dom.DOMResult;\nimport javax.xml.transform.dom.DOMSource;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\nimport org.springframework.xml.transform.StringResult;\nimport org.w3c.dom.Document;\nimport br.com.jnfe.base.adapter.RequestAdapter;\nimport br.com.jnfe.base.adapter.dom.AbstractNFeDOMAdapter;\n\n/**\n * Implementa��o padr�o da interface <code>RequestAdapter</code>.\n *\n * @author mauriciofernandesdecastro\n */\npublic class RequestAdapterImpl extends AbstractNFeDOMAdapter implements RequestAdapter {\n\n    public static final String VERSAO_DADOS = \"1.07\";\n\n    public static final String PREFIXO_NAMESPACE = \"http://www.portalfiscal.inf.br/nfe/wsdl/\";\n\n    public String newCabec() {\n        return new StringBuilder(\"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?>\").append(\"<cabecMsg xmlns=\\\"http://www.portalfiscal.inf.br/nfe\\\" \").append(\"versao=\\\"\").append(\"1.02\").append(\"\\\"><versaoDados>\").append(VERSAO_DADOS).append(\"</versaoDados>\").append(\"</cabecMsg>\").toString();\n    }\n\n    /**\n     * Prepara uma solicita��o.\n     *\n     * @param servicoRemoto\n     * @param qualificadorAbreviado\n     * @param content\n     */\n    public Source newRequest(String servicoRemoto, String qualificadorAbreviado, String content) {\n        String nameSpaceUri = new StringBuilder(PREFIXO_NAMESPACE).append(qualificadorAbreviado).toString();\n        XMLStreamWriter writer = null;\n        Document doc = newDocument(nameSpaceUri, servicoRemoto);\n        try {\n            XMLOutputFactory output = XMLOutputFactory.newInstance();\n            output.setProperty(\"javax.xml.stream.isNamespaceAware\", new Boolean(false));\n            writer = output.createXMLStreamWriter(new DOMResult(doc.getDocumentElement()));\n            writer.writeStartElement(\"nfeCabecMsg\");\n            writer.writeCharacters(newCabec());\n            writer.writeEndElement();\n            writer.writeStartElement(\"nfeDadosMsg\");\n            writer.writeCharacters(content);\n            writer.writeEndElement();\n            writer.writeEndDocument();\n            writer.flush();\n            writer.close();\n        } catch (XMLStreamException e) {\n            throw new IllegalArgumentException(\"Imposs�vel gerar nova requisi��o, \", e);\n        }\n        if (logger.isTraceEnabled()) {\n            try {\n                Result stringResult = new StringResult();\n                TransformerFactory tFactory = TransformerFactory.newInstance();\n                Transformer transformer = tFactory.newTransformer();\n                transformer.transform(new DOMSource(doc), stringResult);\n                logger.trace(\"+++ A NOVA REQUISI��O �: {}\", stringResult);\n            } catch (TransformerException e) {\n                throw new IllegalArgumentException(\"Imposs�vel gerar nova requisi��o, \", e);\n            }\n        }\n        return new DOMSource(doc);\n    }\n\n    private static final Logger logger = LoggerFactory.getLogger(RequestAdapterImpl.class);\n}\n",
		"id": "EvoSuiteBenchmark/6_jnfe/src/main/java/br/com/jnfe/base/pl005d/RequestAdapterImplTest1.java",
		"test_prompt": "// RequestAdapterImplTest1.java\npackage br.com.jnfe.base.pl005d;\n\nimport javax.xml.stream.XMLOutputFactory;\nimport javax.xml.stream.XMLStreamException;\nimport javax.xml.stream.XMLStreamWriter;\nimport javax.xml.transform.Result;\nimport javax.xml.transform.Source;\nimport javax.xml.transform.Transformer;\nimport javax.xml.transform.TransformerException;\nimport javax.xml.transform.TransformerFactory;\nimport javax.xml.transform.dom.DOMResult;\nimport javax.xml.transform.dom.DOMSource;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\nimport org.springframework.xml.transform.StringResult;\nimport org.w3c.dom.Document;\nimport br.com.jnfe.base.adapter.RequestAdapter;\nimport br.com.jnfe.base.adapter.dom.AbstractNFeDOMAdapter;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link RequestAdapterImpl}.\n* It contains ten unit test cases for the {@link RequestAdapterImpl#newRequest(String, String, String)} method.\n*/\nclass RequestAdapterImplTest1 {"
	},
	{
		"original_code": "// TransportKeyStoreBean.java\n/* Copyright 2005 I Serv Consultoria Empresarial Ltda.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage br.com.jnfe.base;\n\nimport java.security.KeyStore;\nimport javax.net.ssl.KeyManagerFactory;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\nimport org.springframework.beans.factory.InitializingBean;\nimport br.com.jnfe.base.util.SecurityUtils;\n\n/**\n * Atualiza as propriedades do sistema para establecer a \"keyStore\"\n * usada para o transmiss�o das mensagens dos web services NFe.\n *\n * @author Mauricio Fernandes de Castro\n */\npublic class TransportKeyStoreBean implements InitializingBean {\n\n    private final static String DEFAULT_KEYSTORE_URI = \"file:#{ systemProperties['user.home'] }/jnfe.pfx\";\n\n    private final static String DEFAULT_KEYSTORE_TYPE = \"pkcs12\";\n\n    private String keyStoreUri;\n\n    private String keyStoreType;\n\n    private String keyStorePassword;\n\n    private String trustStoreType;\n\n    private String trustStore;\n\n    private String trustStorePassword;\n\n    /**\n     * A URI para a keystore usada para autenticar o transporte.\n     *\n     * @param keyStoreUri\n     */\n    public void setKeyStoreUri(String keyStoreUri) {\n        this.keyStoreUri = keyStoreUri;\n    }\n\n    /**\n     * O tipo de keystore empregado para o transporte.\n     *\n     * @param keyStoreType\n     */\n    public void setKeyStoreType(String keyStoreType) {\n        this.keyStoreType = keyStoreType;\n    }\n\n    /**\n     * A senha para acesso ao keystore empregado para o transporte.\n     *\n     * @param keyStorePassword\n     */\n    public void setKeyStorePassword(String keyStorePassword) {\n        this.keyStorePassword = keyStorePassword;\n    }\n\n    /**\n     * Localiza��o do aramz�m seguro.\n     *\n     * @param trustStore\n     */\n    public void setTrustStore(String trustStore) {\n        this.trustStore = trustStore;\n    }\n\n    /**\n     * Tipo do armaz�m do armaz�m seguro (cacerts).\n     *\n     * @param trustStoreType\n     */\n    public void setTrustStoreType(String trustStoreType) {\n        this.trustStoreType = trustStoreType;\n    }\n\n    /**\n     * Senah do armaz�m seguro (cacerts).\n     *\n     * @param trustStorePassword\n     */\n    public void setTrustStorePassword(String trustStorePassword) {\n        this.trustStorePassword = trustStorePassword;\n    }\n\n    public void afterPropertiesSet() throws Exception {\n        if (keyStoreType == null || keyStoreType.length() == 0) {\n            logger.warn(\"Using default keyStoreType.\");\n            setKeyStoreType(DEFAULT_KEYSTORE_TYPE);\n        }\n        System.setProperty(\"javax.net.ssl.keyStoreType\", keyStoreType);\n        if (keyStoreUri == null || keyStoreUri.length() == 0) {\n            logger.warn(\"Using default keyStoreUri.\");\n            setKeyStoreUri(DEFAULT_KEYSTORE_URI);\n        }\n        System.setProperty(\"javax.net.ssl.keyStore\", keyStoreUri);\n        // TODO proteger senha da keystore de transporte com MD5 ou SHA\n        if (keyStorePassword != null && keyStorePassword.length() > 0) {\n            System.setProperty(\"javax.net.ssl.keyStorePassword\", keyStorePassword);\n        }\n        if (trustStore != null) {\n            System.setProperty(\"javax.net.ssl.trustStore\", trustStore);\n        }\n        if (trustStoreType != null) {\n            System.setProperty(\"javax.net.ssl.trustStoreType\", trustStoreType);\n        }\n        if (trustStorePassword != null) {\n            System.setProperty(\"javax.net.ssl.trustStorePassword\", trustStorePassword);\n        }\n        logger.info(\"Propriedades de transporte: {}\", toString());\n    }\n\n    /**\n     * toString\n     * @return String\n     */\n    public String toString() {\n        StringBuffer buffer = new StringBuffer();\n        buffer.append(getClass().getName()).append(\"@\").append(Integer.toHexString(hashCode())).append(\" [\");\n        buffer.append(\"javax.net.ssl.keyStore\").append(\"='\").append(System.getProperty(\"javax.net.ssl.keyStore\")).append(\"' \");\n        buffer.append(\"javax.net.ssl.keyStoreType\").append(\"='\").append(System.getProperty(\"javax.net.ssl.keyStoreType\")).append(\"' \");\n        buffer.append(\"javax.net.ssl.trustStoreType\").append(\"='\").append(System.getProperty(\"javax.net.ssl.trustStoreType\")).append(\"' \");\n        buffer.append(\"javax.net.ssl.trustStore\").append(\"='\").append(System.getProperty(\"javax.net.ssl.trustStore\")).append(\"' \");\n        buffer.append(\"]\");\n        return buffer.toString();\n    }\n\n    /**\n     * Abre o  armaz�m seguro (cacerts).\n     *\n     * @throws Exception\n     */\n    public KeyStore openTransportStore() throws Exception {\n        return SecurityUtils.openStore(keyStoreType, keyStoreUri, keyStorePassword.toCharArray());\n    }\n\n    /**\n     * Abre o gerenciador de chaves do armaz�m de transporte.\n     *\n     * @throws Exception\n     */\n    public KeyManagerFactory openTransportKeyManagerFactory() throws Exception {\n        KeyManagerFactory kmf = KeyManagerFactory.getInstance(\"SunX509\");\n        kmf.init(openTransportStore(), keyStorePassword.toCharArray());\n        return kmf;\n    }\n\n    private static final Logger logger = LoggerFactory.getLogger(TransportKeyStoreBean.class);\n}\n",
		"id": "EvoSuiteBenchmark/6_jnfe/src/main/java/br/com/jnfe/base/TransportKeyStoreBeanTest0.java",
		"test_prompt": "// TransportKeyStoreBeanTest0.java\npackage br.com.jnfe.base;\n\nimport java.security.KeyStore;\nimport javax.net.ssl.KeyManagerFactory;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\nimport org.springframework.beans.factory.InitializingBean;\nimport br.com.jnfe.base.util.SecurityUtils;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link TransportKeyStoreBean}.\n* It contains ten unit test cases for the {@link TransportKeyStoreBean#openTransportStore()} method.\n*/\nclass TransportKeyStoreBeanTest0 {"
	},
	{
		"original_code": "// TransportKeyStoreBean.java\n/* Copyright 2005 I Serv Consultoria Empresarial Ltda.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage br.com.jnfe.base;\n\nimport java.security.KeyStore;\nimport javax.net.ssl.KeyManagerFactory;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\nimport org.springframework.beans.factory.InitializingBean;\nimport br.com.jnfe.base.util.SecurityUtils;\n\n/**\n * Atualiza as propriedades do sistema para establecer a \"keyStore\"\n * usada para o transmiss�o das mensagens dos web services NFe.\n *\n * @author Mauricio Fernandes de Castro\n */\npublic class TransportKeyStoreBean implements InitializingBean {\n\n    private final static String DEFAULT_KEYSTORE_URI = \"file:#{ systemProperties['user.home'] }/jnfe.pfx\";\n\n    private final static String DEFAULT_KEYSTORE_TYPE = \"pkcs12\";\n\n    private String keyStoreUri;\n\n    private String keyStoreType;\n\n    private String keyStorePassword;\n\n    private String trustStoreType;\n\n    private String trustStore;\n\n    private String trustStorePassword;\n\n    /**\n     * A URI para a keystore usada para autenticar o transporte.\n     *\n     * @param keyStoreUri\n     */\n    public void setKeyStoreUri(String keyStoreUri) {\n        this.keyStoreUri = keyStoreUri;\n    }\n\n    /**\n     * O tipo de keystore empregado para o transporte.\n     *\n     * @param keyStoreType\n     */\n    public void setKeyStoreType(String keyStoreType) {\n        this.keyStoreType = keyStoreType;\n    }\n\n    /**\n     * A senha para acesso ao keystore empregado para o transporte.\n     *\n     * @param keyStorePassword\n     */\n    public void setKeyStorePassword(String keyStorePassword) {\n        this.keyStorePassword = keyStorePassword;\n    }\n\n    /**\n     * Localiza��o do aramz�m seguro.\n     *\n     * @param trustStore\n     */\n    public void setTrustStore(String trustStore) {\n        this.trustStore = trustStore;\n    }\n\n    /**\n     * Tipo do armaz�m do armaz�m seguro (cacerts).\n     *\n     * @param trustStoreType\n     */\n    public void setTrustStoreType(String trustStoreType) {\n        this.trustStoreType = trustStoreType;\n    }\n\n    /**\n     * Senah do armaz�m seguro (cacerts).\n     *\n     * @param trustStorePassword\n     */\n    public void setTrustStorePassword(String trustStorePassword) {\n        this.trustStorePassword = trustStorePassword;\n    }\n\n    public void afterPropertiesSet() throws Exception {\n        if (keyStoreType == null || keyStoreType.length() == 0) {\n            logger.warn(\"Using default keyStoreType.\");\n            setKeyStoreType(DEFAULT_KEYSTORE_TYPE);\n        }\n        System.setProperty(\"javax.net.ssl.keyStoreType\", keyStoreType);\n        if (keyStoreUri == null || keyStoreUri.length() == 0) {\n            logger.warn(\"Using default keyStoreUri.\");\n            setKeyStoreUri(DEFAULT_KEYSTORE_URI);\n        }\n        System.setProperty(\"javax.net.ssl.keyStore\", keyStoreUri);\n        // TODO proteger senha da keystore de transporte com MD5 ou SHA\n        if (keyStorePassword != null && keyStorePassword.length() > 0) {\n            System.setProperty(\"javax.net.ssl.keyStorePassword\", keyStorePassword);\n        }\n        if (trustStore != null) {\n            System.setProperty(\"javax.net.ssl.trustStore\", trustStore);\n        }\n        if (trustStoreType != null) {\n            System.setProperty(\"javax.net.ssl.trustStoreType\", trustStoreType);\n        }\n        if (trustStorePassword != null) {\n            System.setProperty(\"javax.net.ssl.trustStorePassword\", trustStorePassword);\n        }\n        logger.info(\"Propriedades de transporte: {}\", toString());\n    }\n\n    /**\n     * toString\n     * @return String\n     */\n    public String toString() {\n        StringBuffer buffer = new StringBuffer();\n        buffer.append(getClass().getName()).append(\"@\").append(Integer.toHexString(hashCode())).append(\" [\");\n        buffer.append(\"javax.net.ssl.keyStore\").append(\"='\").append(System.getProperty(\"javax.net.ssl.keyStore\")).append(\"' \");\n        buffer.append(\"javax.net.ssl.keyStoreType\").append(\"='\").append(System.getProperty(\"javax.net.ssl.keyStoreType\")).append(\"' \");\n        buffer.append(\"javax.net.ssl.trustStoreType\").append(\"='\").append(System.getProperty(\"javax.net.ssl.trustStoreType\")).append(\"' \");\n        buffer.append(\"javax.net.ssl.trustStore\").append(\"='\").append(System.getProperty(\"javax.net.ssl.trustStore\")).append(\"' \");\n        buffer.append(\"]\");\n        return buffer.toString();\n    }\n\n    /**\n     * Abre o  armaz�m seguro (cacerts).\n     *\n     * @throws Exception\n     */\n    public KeyStore openTransportStore() throws Exception {\n        return SecurityUtils.openStore(keyStoreType, keyStoreUri, keyStorePassword.toCharArray());\n    }\n\n    /**\n     * Abre o gerenciador de chaves do armaz�m de transporte.\n     *\n     * @throws Exception\n     */\n    public KeyManagerFactory openTransportKeyManagerFactory() throws Exception {\n        KeyManagerFactory kmf = KeyManagerFactory.getInstance(\"SunX509\");\n        kmf.init(openTransportStore(), keyStorePassword.toCharArray());\n        return kmf;\n    }\n\n    private static final Logger logger = LoggerFactory.getLogger(TransportKeyStoreBean.class);\n}\n",
		"id": "EvoSuiteBenchmark/6_jnfe/src/main/java/br/com/jnfe/base/TransportKeyStoreBeanTest1.java",
		"test_prompt": "// TransportKeyStoreBeanTest1.java\npackage br.com.jnfe.base;\n\nimport java.security.KeyStore;\nimport javax.net.ssl.KeyManagerFactory;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\nimport org.springframework.beans.factory.InitializingBean;\nimport br.com.jnfe.base.util.SecurityUtils;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link TransportKeyStoreBean}.\n* It contains ten unit test cases for the {@link TransportKeyStoreBean#openTransportKeyManagerFactory()} method.\n*/\nclass TransportKeyStoreBeanTest1 {"
	},
	{
		"original_code": "// NFeCalculatorImpl.java\npackage br.com.jnfe.base.service;\n\nimport java.math.BigDecimal;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\nimport br.com.jnfe.base.COFINS;\nimport br.com.jnfe.base.ICMS;\nimport br.com.jnfe.base.ICMSExt;\nimport br.com.jnfe.base.ICMSST;\nimport br.com.jnfe.base.IPI;\nimport br.com.jnfe.base.ModBC;\nimport br.com.jnfe.base.PIS;\n\n/**\n * Implementa��o padr�o para c�lculo de impostos.\n *\n * @author mauriciofernandesdecastro\n */\npublic class NFeCalculatorImpl implements NFeCalculator {\n\n    public BigDecimal calculate(ICMS icms) {\n        BigDecimal taxValue = icms.getVICMS();\n        validate(icms.getPICMS(), icms.getVBc());\n        if (taxValue == null) {\n            if (icms.getModBC() == ModBC.MARGEM.getValue()) {\n                taxValue = internalCalculate(icms.getVBc(), icms.getPICMS());\n                logger.debug(\"Valor calculado do ICMS: {}.\", taxValue);\n                return taxValue;\n            }\n            throw new UnsupportedOperationException(\"Modo de determina��o da base de c�lculo ainda n�o suportada.\");\n        }\n        logger.warn(\"Valor n�o recalculado do ICMS: {}.\", taxValue);\n        return taxValue;\n    }\n\n    public BigDecimal calculate(ICMSST icms) {\n        BigDecimal taxValue = calculate((ICMS) icms);\n        // TODO implantar calculo ICMS ST.\n        return taxValue;\n    }\n\n    public BigDecimal calculate(ICMSExt icms) {\n        BigDecimal taxValue = calculate((ICMS) icms);\n        // TODO implantar calculo ICMS ext.\n        return taxValue;\n    }\n\n    public BigDecimal calculate(IPI ipi) {\n        BigDecimal taxValue = ipi.getVIPI();\n        validate(ipi.getPIPI(), ipi.getIPIVBC());\n        if (taxValue == null) {\n            taxValue = internalCalculate(ipi.getIPIVBC(), ipi.getPIPI());\n            logger.debug(\"Valor calculado do IPI: {}.\", taxValue);\n            return taxValue;\n        }\n        logger.warn(\"Valor n�o recalculado do IPI: {}.\", taxValue);\n        return taxValue;\n    }\n\n    public BigDecimal calculate(PIS pis) {\n        BigDecimal taxValue = pis.getVPIS();\n        validate(pis.getPPIS(), pis.getPISVBC());\n        if (taxValue == null) {\n            taxValue = internalCalculate(pis.getPISVBC(), pis.getPPIS());\n            logger.debug(\"Valor calculado do PIS: {}.\", taxValue);\n            return taxValue;\n        }\n        logger.warn(\"Valor n�o recalculado do PIS: {}.\", taxValue);\n        return taxValue;\n    }\n\n    public BigDecimal calculate(COFINS cofins) {\n        BigDecimal taxValue = cofins.getVCOFINS();\n        validate(cofins.getPCOFINS(), cofins.getCOFINSVBC());\n        if (taxValue == null) {\n            taxValue = internalCalculate(cofins.getCOFINSVBC(), cofins.getPCOFINS());\n            logger.debug(\"Valor calculado do CONFINS: {}.\", taxValue);\n            return taxValue;\n        }\n        logger.warn(\"Valor n�o recalculado do CONFINS: {}.\", taxValue);\n        return taxValue;\n    }\n\n    /**\n     * Lan�a exce��o sempre que algum dos par�metros for nulo.\n     *\n     * @param aliquota\n     * @param vBC\n     */\n    protected void validate(BigDecimal aliquota, BigDecimal vBC) {\n        if (aliquota == null) {\n            throw new IllegalArgumentException(\"Valor da al�quota n�o pode ser nulo\");\n        }\n        if (vBC == null) {\n            throw new IllegalArgumentException(\"Valor da base de c�lculo n�o pode ser nulo\");\n        }\n    }\n\n    /**\n     * Calcula o imposto como um percentual da base.\n     *\n     * @param vBC valor da base de c�lculo\n     * @param p al�quota\n     */\n    protected BigDecimal internalCalculate(BigDecimal vBC, BigDecimal p) {\n        return vBC.multiply(p).divide(new BigDecimal(100));\n    }\n\n    private static final Logger logger = LoggerFactory.getLogger(NFeCalculatorImpl.class);\n}\n",
		"id": "EvoSuiteBenchmark/6_jnfe/src/main/java/br/com/jnfe/base/service/NFeCalculatorImplTest0.java",
		"test_prompt": "// NFeCalculatorImplTest0.java\npackage br.com.jnfe.base.service;\n\nimport java.math.BigDecimal;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\nimport br.com.jnfe.base.COFINS;\nimport br.com.jnfe.base.ICMS;\nimport br.com.jnfe.base.ICMSExt;\nimport br.com.jnfe.base.ICMSST;\nimport br.com.jnfe.base.IPI;\nimport br.com.jnfe.base.ModBC;\nimport br.com.jnfe.base.PIS;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link NFeCalculatorImpl}.\n* It contains ten unit test cases for the {@link NFeCalculatorImpl#calculate(ICMS)} method.\n*/\nclass NFeCalculatorImplTest0 {"
	},
	{
		"original_code": "// NFeCalculatorImpl.java\npackage br.com.jnfe.base.service;\n\nimport java.math.BigDecimal;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\nimport br.com.jnfe.base.COFINS;\nimport br.com.jnfe.base.ICMS;\nimport br.com.jnfe.base.ICMSExt;\nimport br.com.jnfe.base.ICMSST;\nimport br.com.jnfe.base.IPI;\nimport br.com.jnfe.base.ModBC;\nimport br.com.jnfe.base.PIS;\n\n/**\n * Implementa��o padr�o para c�lculo de impostos.\n *\n * @author mauriciofernandesdecastro\n */\npublic class NFeCalculatorImpl implements NFeCalculator {\n\n    public BigDecimal calculate(ICMS icms) {\n        BigDecimal taxValue = icms.getVICMS();\n        validate(icms.getPICMS(), icms.getVBc());\n        if (taxValue == null) {\n            if (icms.getModBC() == ModBC.MARGEM.getValue()) {\n                taxValue = internalCalculate(icms.getVBc(), icms.getPICMS());\n                logger.debug(\"Valor calculado do ICMS: {}.\", taxValue);\n                return taxValue;\n            }\n            throw new UnsupportedOperationException(\"Modo de determina��o da base de c�lculo ainda n�o suportada.\");\n        }\n        logger.warn(\"Valor n�o recalculado do ICMS: {}.\", taxValue);\n        return taxValue;\n    }\n\n    public BigDecimal calculate(ICMSST icms) {\n        BigDecimal taxValue = calculate((ICMS) icms);\n        // TODO implantar calculo ICMS ST.\n        return taxValue;\n    }\n\n    public BigDecimal calculate(ICMSExt icms) {\n        BigDecimal taxValue = calculate((ICMS) icms);\n        // TODO implantar calculo ICMS ext.\n        return taxValue;\n    }\n\n    public BigDecimal calculate(IPI ipi) {\n        BigDecimal taxValue = ipi.getVIPI();\n        validate(ipi.getPIPI(), ipi.getIPIVBC());\n        if (taxValue == null) {\n            taxValue = internalCalculate(ipi.getIPIVBC(), ipi.getPIPI());\n            logger.debug(\"Valor calculado do IPI: {}.\", taxValue);\n            return taxValue;\n        }\n        logger.warn(\"Valor n�o recalculado do IPI: {}.\", taxValue);\n        return taxValue;\n    }\n\n    public BigDecimal calculate(PIS pis) {\n        BigDecimal taxValue = pis.getVPIS();\n        validate(pis.getPPIS(), pis.getPISVBC());\n        if (taxValue == null) {\n            taxValue = internalCalculate(pis.getPISVBC(), pis.getPPIS());\n            logger.debug(\"Valor calculado do PIS: {}.\", taxValue);\n            return taxValue;\n        }\n        logger.warn(\"Valor n�o recalculado do PIS: {}.\", taxValue);\n        return taxValue;\n    }\n\n    public BigDecimal calculate(COFINS cofins) {\n        BigDecimal taxValue = cofins.getVCOFINS();\n        validate(cofins.getPCOFINS(), cofins.getCOFINSVBC());\n        if (taxValue == null) {\n            taxValue = internalCalculate(cofins.getCOFINSVBC(), cofins.getPCOFINS());\n            logger.debug(\"Valor calculado do CONFINS: {}.\", taxValue);\n            return taxValue;\n        }\n        logger.warn(\"Valor n�o recalculado do CONFINS: {}.\", taxValue);\n        return taxValue;\n    }\n\n    /**\n     * Lan�a exce��o sempre que algum dos par�metros for nulo.\n     *\n     * @param aliquota\n     * @param vBC\n     */\n    protected void validate(BigDecimal aliquota, BigDecimal vBC) {\n        if (aliquota == null) {\n            throw new IllegalArgumentException(\"Valor da al�quota n�o pode ser nulo\");\n        }\n        if (vBC == null) {\n            throw new IllegalArgumentException(\"Valor da base de c�lculo n�o pode ser nulo\");\n        }\n    }\n\n    /**\n     * Calcula o imposto como um percentual da base.\n     *\n     * @param vBC valor da base de c�lculo\n     * @param p al�quota\n     */\n    protected BigDecimal internalCalculate(BigDecimal vBC, BigDecimal p) {\n        return vBC.multiply(p).divide(new BigDecimal(100));\n    }\n\n    private static final Logger logger = LoggerFactory.getLogger(NFeCalculatorImpl.class);\n}\n",
		"id": "EvoSuiteBenchmark/6_jnfe/src/main/java/br/com/jnfe/base/service/NFeCalculatorImplTest1.java",
		"test_prompt": "// NFeCalculatorImplTest1.java\npackage br.com.jnfe.base.service;\n\nimport java.math.BigDecimal;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\nimport br.com.jnfe.base.COFINS;\nimport br.com.jnfe.base.ICMS;\nimport br.com.jnfe.base.ICMSExt;\nimport br.com.jnfe.base.ICMSST;\nimport br.com.jnfe.base.IPI;\nimport br.com.jnfe.base.ModBC;\nimport br.com.jnfe.base.PIS;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link NFeCalculatorImpl}.\n* It contains ten unit test cases for the {@link NFeCalculatorImpl#calculate(ICMSST)} method.\n*/\nclass NFeCalculatorImplTest1 {"
	},
	{
		"original_code": "// NFeCalculatorImpl.java\npackage br.com.jnfe.base.service;\n\nimport java.math.BigDecimal;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\nimport br.com.jnfe.base.COFINS;\nimport br.com.jnfe.base.ICMS;\nimport br.com.jnfe.base.ICMSExt;\nimport br.com.jnfe.base.ICMSST;\nimport br.com.jnfe.base.IPI;\nimport br.com.jnfe.base.ModBC;\nimport br.com.jnfe.base.PIS;\n\n/**\n * Implementa��o padr�o para c�lculo de impostos.\n *\n * @author mauriciofernandesdecastro\n */\npublic class NFeCalculatorImpl implements NFeCalculator {\n\n    public BigDecimal calculate(ICMS icms) {\n        BigDecimal taxValue = icms.getVICMS();\n        validate(icms.getPICMS(), icms.getVBc());\n        if (taxValue == null) {\n            if (icms.getModBC() == ModBC.MARGEM.getValue()) {\n                taxValue = internalCalculate(icms.getVBc(), icms.getPICMS());\n                logger.debug(\"Valor calculado do ICMS: {}.\", taxValue);\n                return taxValue;\n            }\n            throw new UnsupportedOperationException(\"Modo de determina��o da base de c�lculo ainda n�o suportada.\");\n        }\n        logger.warn(\"Valor n�o recalculado do ICMS: {}.\", taxValue);\n        return taxValue;\n    }\n\n    public BigDecimal calculate(ICMSST icms) {\n        BigDecimal taxValue = calculate((ICMS) icms);\n        // TODO implantar calculo ICMS ST.\n        return taxValue;\n    }\n\n    public BigDecimal calculate(ICMSExt icms) {\n        BigDecimal taxValue = calculate((ICMS) icms);\n        // TODO implantar calculo ICMS ext.\n        return taxValue;\n    }\n\n    public BigDecimal calculate(IPI ipi) {\n        BigDecimal taxValue = ipi.getVIPI();\n        validate(ipi.getPIPI(), ipi.getIPIVBC());\n        if (taxValue == null) {\n            taxValue = internalCalculate(ipi.getIPIVBC(), ipi.getPIPI());\n            logger.debug(\"Valor calculado do IPI: {}.\", taxValue);\n            return taxValue;\n        }\n        logger.warn(\"Valor n�o recalculado do IPI: {}.\", taxValue);\n        return taxValue;\n    }\n\n    public BigDecimal calculate(PIS pis) {\n        BigDecimal taxValue = pis.getVPIS();\n        validate(pis.getPPIS(), pis.getPISVBC());\n        if (taxValue == null) {\n            taxValue = internalCalculate(pis.getPISVBC(), pis.getPPIS());\n            logger.debug(\"Valor calculado do PIS: {}.\", taxValue);\n            return taxValue;\n        }\n        logger.warn(\"Valor n�o recalculado do PIS: {}.\", taxValue);\n        return taxValue;\n    }\n\n    public BigDecimal calculate(COFINS cofins) {\n        BigDecimal taxValue = cofins.getVCOFINS();\n        validate(cofins.getPCOFINS(), cofins.getCOFINSVBC());\n        if (taxValue == null) {\n            taxValue = internalCalculate(cofins.getCOFINSVBC(), cofins.getPCOFINS());\n            logger.debug(\"Valor calculado do CONFINS: {}.\", taxValue);\n            return taxValue;\n        }\n        logger.warn(\"Valor n�o recalculado do CONFINS: {}.\", taxValue);\n        return taxValue;\n    }\n\n    /**\n     * Lan�a exce��o sempre que algum dos par�metros for nulo.\n     *\n     * @param aliquota\n     * @param vBC\n     */\n    protected void validate(BigDecimal aliquota, BigDecimal vBC) {\n        if (aliquota == null) {\n            throw new IllegalArgumentException(\"Valor da al�quota n�o pode ser nulo\");\n        }\n        if (vBC == null) {\n            throw new IllegalArgumentException(\"Valor da base de c�lculo n�o pode ser nulo\");\n        }\n    }\n\n    /**\n     * Calcula o imposto como um percentual da base.\n     *\n     * @param vBC valor da base de c�lculo\n     * @param p al�quota\n     */\n    protected BigDecimal internalCalculate(BigDecimal vBC, BigDecimal p) {\n        return vBC.multiply(p).divide(new BigDecimal(100));\n    }\n\n    private static final Logger logger = LoggerFactory.getLogger(NFeCalculatorImpl.class);\n}\n",
		"id": "EvoSuiteBenchmark/6_jnfe/src/main/java/br/com/jnfe/base/service/NFeCalculatorImplTest2.java",
		"test_prompt": "// NFeCalculatorImplTest2.java\npackage br.com.jnfe.base.service;\n\nimport java.math.BigDecimal;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\nimport br.com.jnfe.base.COFINS;\nimport br.com.jnfe.base.ICMS;\nimport br.com.jnfe.base.ICMSExt;\nimport br.com.jnfe.base.ICMSST;\nimport br.com.jnfe.base.IPI;\nimport br.com.jnfe.base.ModBC;\nimport br.com.jnfe.base.PIS;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link NFeCalculatorImpl}.\n* It contains ten unit test cases for the {@link NFeCalculatorImpl#calculate(ICMSExt)} method.\n*/\nclass NFeCalculatorImplTest2 {"
	},
	{
		"original_code": "// NFeCalculatorImpl.java\npackage br.com.jnfe.base.service;\n\nimport java.math.BigDecimal;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\nimport br.com.jnfe.base.COFINS;\nimport br.com.jnfe.base.ICMS;\nimport br.com.jnfe.base.ICMSExt;\nimport br.com.jnfe.base.ICMSST;\nimport br.com.jnfe.base.IPI;\nimport br.com.jnfe.base.ModBC;\nimport br.com.jnfe.base.PIS;\n\n/**\n * Implementa��o padr�o para c�lculo de impostos.\n *\n * @author mauriciofernandesdecastro\n */\npublic class NFeCalculatorImpl implements NFeCalculator {\n\n    public BigDecimal calculate(ICMS icms) {\n        BigDecimal taxValue = icms.getVICMS();\n        validate(icms.getPICMS(), icms.getVBc());\n        if (taxValue == null) {\n            if (icms.getModBC() == ModBC.MARGEM.getValue()) {\n                taxValue = internalCalculate(icms.getVBc(), icms.getPICMS());\n                logger.debug(\"Valor calculado do ICMS: {}.\", taxValue);\n                return taxValue;\n            }\n            throw new UnsupportedOperationException(\"Modo de determina��o da base de c�lculo ainda n�o suportada.\");\n        }\n        logger.warn(\"Valor n�o recalculado do ICMS: {}.\", taxValue);\n        return taxValue;\n    }\n\n    public BigDecimal calculate(ICMSST icms) {\n        BigDecimal taxValue = calculate((ICMS) icms);\n        // TODO implantar calculo ICMS ST.\n        return taxValue;\n    }\n\n    public BigDecimal calculate(ICMSExt icms) {\n        BigDecimal taxValue = calculate((ICMS) icms);\n        // TODO implantar calculo ICMS ext.\n        return taxValue;\n    }\n\n    public BigDecimal calculate(IPI ipi) {\n        BigDecimal taxValue = ipi.getVIPI();\n        validate(ipi.getPIPI(), ipi.getIPIVBC());\n        if (taxValue == null) {\n            taxValue = internalCalculate(ipi.getIPIVBC(), ipi.getPIPI());\n            logger.debug(\"Valor calculado do IPI: {}.\", taxValue);\n            return taxValue;\n        }\n        logger.warn(\"Valor n�o recalculado do IPI: {}.\", taxValue);\n        return taxValue;\n    }\n\n    public BigDecimal calculate(PIS pis) {\n        BigDecimal taxValue = pis.getVPIS();\n        validate(pis.getPPIS(), pis.getPISVBC());\n        if (taxValue == null) {\n            taxValue = internalCalculate(pis.getPISVBC(), pis.getPPIS());\n            logger.debug(\"Valor calculado do PIS: {}.\", taxValue);\n            return taxValue;\n        }\n        logger.warn(\"Valor n�o recalculado do PIS: {}.\", taxValue);\n        return taxValue;\n    }\n\n    public BigDecimal calculate(COFINS cofins) {\n        BigDecimal taxValue = cofins.getVCOFINS();\n        validate(cofins.getPCOFINS(), cofins.getCOFINSVBC());\n        if (taxValue == null) {\n            taxValue = internalCalculate(cofins.getCOFINSVBC(), cofins.getPCOFINS());\n            logger.debug(\"Valor calculado do CONFINS: {}.\", taxValue);\n            return taxValue;\n        }\n        logger.warn(\"Valor n�o recalculado do CONFINS: {}.\", taxValue);\n        return taxValue;\n    }\n\n    /**\n     * Lan�a exce��o sempre que algum dos par�metros for nulo.\n     *\n     * @param aliquota\n     * @param vBC\n     */\n    protected void validate(BigDecimal aliquota, BigDecimal vBC) {\n        if (aliquota == null) {\n            throw new IllegalArgumentException(\"Valor da al�quota n�o pode ser nulo\");\n        }\n        if (vBC == null) {\n            throw new IllegalArgumentException(\"Valor da base de c�lculo n�o pode ser nulo\");\n        }\n    }\n\n    /**\n     * Calcula o imposto como um percentual da base.\n     *\n     * @param vBC valor da base de c�lculo\n     * @param p al�quota\n     */\n    protected BigDecimal internalCalculate(BigDecimal vBC, BigDecimal p) {\n        return vBC.multiply(p).divide(new BigDecimal(100));\n    }\n\n    private static final Logger logger = LoggerFactory.getLogger(NFeCalculatorImpl.class);\n}\n",
		"id": "EvoSuiteBenchmark/6_jnfe/src/main/java/br/com/jnfe/base/service/NFeCalculatorImplTest3.java",
		"test_prompt": "// NFeCalculatorImplTest3.java\npackage br.com.jnfe.base.service;\n\nimport java.math.BigDecimal;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\nimport br.com.jnfe.base.COFINS;\nimport br.com.jnfe.base.ICMS;\nimport br.com.jnfe.base.ICMSExt;\nimport br.com.jnfe.base.ICMSST;\nimport br.com.jnfe.base.IPI;\nimport br.com.jnfe.base.ModBC;\nimport br.com.jnfe.base.PIS;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link NFeCalculatorImpl}.\n* It contains ten unit test cases for the {@link NFeCalculatorImpl#calculate(IPI)} method.\n*/\nclass NFeCalculatorImplTest3 {"
	},
	{
		"original_code": "// NFeCalculatorImpl.java\npackage br.com.jnfe.base.service;\n\nimport java.math.BigDecimal;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\nimport br.com.jnfe.base.COFINS;\nimport br.com.jnfe.base.ICMS;\nimport br.com.jnfe.base.ICMSExt;\nimport br.com.jnfe.base.ICMSST;\nimport br.com.jnfe.base.IPI;\nimport br.com.jnfe.base.ModBC;\nimport br.com.jnfe.base.PIS;\n\n/**\n * Implementa��o padr�o para c�lculo de impostos.\n *\n * @author mauriciofernandesdecastro\n */\npublic class NFeCalculatorImpl implements NFeCalculator {\n\n    public BigDecimal calculate(ICMS icms) {\n        BigDecimal taxValue = icms.getVICMS();\n        validate(icms.getPICMS(), icms.getVBc());\n        if (taxValue == null) {\n            if (icms.getModBC() == ModBC.MARGEM.getValue()) {\n                taxValue = internalCalculate(icms.getVBc(), icms.getPICMS());\n                logger.debug(\"Valor calculado do ICMS: {}.\", taxValue);\n                return taxValue;\n            }\n            throw new UnsupportedOperationException(\"Modo de determina��o da base de c�lculo ainda n�o suportada.\");\n        }\n        logger.warn(\"Valor n�o recalculado do ICMS: {}.\", taxValue);\n        return taxValue;\n    }\n\n    public BigDecimal calculate(ICMSST icms) {\n        BigDecimal taxValue = calculate((ICMS) icms);\n        // TODO implantar calculo ICMS ST.\n        return taxValue;\n    }\n\n    public BigDecimal calculate(ICMSExt icms) {\n        BigDecimal taxValue = calculate((ICMS) icms);\n        // TODO implantar calculo ICMS ext.\n        return taxValue;\n    }\n\n    public BigDecimal calculate(IPI ipi) {\n        BigDecimal taxValue = ipi.getVIPI();\n        validate(ipi.getPIPI(), ipi.getIPIVBC());\n        if (taxValue == null) {\n            taxValue = internalCalculate(ipi.getIPIVBC(), ipi.getPIPI());\n            logger.debug(\"Valor calculado do IPI: {}.\", taxValue);\n            return taxValue;\n        }\n        logger.warn(\"Valor n�o recalculado do IPI: {}.\", taxValue);\n        return taxValue;\n    }\n\n    public BigDecimal calculate(PIS pis) {\n        BigDecimal taxValue = pis.getVPIS();\n        validate(pis.getPPIS(), pis.getPISVBC());\n        if (taxValue == null) {\n            taxValue = internalCalculate(pis.getPISVBC(), pis.getPPIS());\n            logger.debug(\"Valor calculado do PIS: {}.\", taxValue);\n            return taxValue;\n        }\n        logger.warn(\"Valor n�o recalculado do PIS: {}.\", taxValue);\n        return taxValue;\n    }\n\n    public BigDecimal calculate(COFINS cofins) {\n        BigDecimal taxValue = cofins.getVCOFINS();\n        validate(cofins.getPCOFINS(), cofins.getCOFINSVBC());\n        if (taxValue == null) {\n            taxValue = internalCalculate(cofins.getCOFINSVBC(), cofins.getPCOFINS());\n            logger.debug(\"Valor calculado do CONFINS: {}.\", taxValue);\n            return taxValue;\n        }\n        logger.warn(\"Valor n�o recalculado do CONFINS: {}.\", taxValue);\n        return taxValue;\n    }\n\n    /**\n     * Lan�a exce��o sempre que algum dos par�metros for nulo.\n     *\n     * @param aliquota\n     * @param vBC\n     */\n    protected void validate(BigDecimal aliquota, BigDecimal vBC) {\n        if (aliquota == null) {\n            throw new IllegalArgumentException(\"Valor da al�quota n�o pode ser nulo\");\n        }\n        if (vBC == null) {\n            throw new IllegalArgumentException(\"Valor da base de c�lculo n�o pode ser nulo\");\n        }\n    }\n\n    /**\n     * Calcula o imposto como um percentual da base.\n     *\n     * @param vBC valor da base de c�lculo\n     * @param p al�quota\n     */\n    protected BigDecimal internalCalculate(BigDecimal vBC, BigDecimal p) {\n        return vBC.multiply(p).divide(new BigDecimal(100));\n    }\n\n    private static final Logger logger = LoggerFactory.getLogger(NFeCalculatorImpl.class);\n}\n",
		"id": "EvoSuiteBenchmark/6_jnfe/src/main/java/br/com/jnfe/base/service/NFeCalculatorImplTest4.java",
		"test_prompt": "// NFeCalculatorImplTest4.java\npackage br.com.jnfe.base.service;\n\nimport java.math.BigDecimal;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\nimport br.com.jnfe.base.COFINS;\nimport br.com.jnfe.base.ICMS;\nimport br.com.jnfe.base.ICMSExt;\nimport br.com.jnfe.base.ICMSST;\nimport br.com.jnfe.base.IPI;\nimport br.com.jnfe.base.ModBC;\nimport br.com.jnfe.base.PIS;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link NFeCalculatorImpl}.\n* It contains ten unit test cases for the {@link NFeCalculatorImpl#calculate(PIS)} method.\n*/\nclass NFeCalculatorImplTest4 {"
	},
	{
		"original_code": "// NFeCalculatorImpl.java\npackage br.com.jnfe.base.service;\n\nimport java.math.BigDecimal;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\nimport br.com.jnfe.base.COFINS;\nimport br.com.jnfe.base.ICMS;\nimport br.com.jnfe.base.ICMSExt;\nimport br.com.jnfe.base.ICMSST;\nimport br.com.jnfe.base.IPI;\nimport br.com.jnfe.base.ModBC;\nimport br.com.jnfe.base.PIS;\n\n/**\n * Implementa��o padr�o para c�lculo de impostos.\n *\n * @author mauriciofernandesdecastro\n */\npublic class NFeCalculatorImpl implements NFeCalculator {\n\n    public BigDecimal calculate(ICMS icms) {\n        BigDecimal taxValue = icms.getVICMS();\n        validate(icms.getPICMS(), icms.getVBc());\n        if (taxValue == null) {\n            if (icms.getModBC() == ModBC.MARGEM.getValue()) {\n                taxValue = internalCalculate(icms.getVBc(), icms.getPICMS());\n                logger.debug(\"Valor calculado do ICMS: {}.\", taxValue);\n                return taxValue;\n            }\n            throw new UnsupportedOperationException(\"Modo de determina��o da base de c�lculo ainda n�o suportada.\");\n        }\n        logger.warn(\"Valor n�o recalculado do ICMS: {}.\", taxValue);\n        return taxValue;\n    }\n\n    public BigDecimal calculate(ICMSST icms) {\n        BigDecimal taxValue = calculate((ICMS) icms);\n        // TODO implantar calculo ICMS ST.\n        return taxValue;\n    }\n\n    public BigDecimal calculate(ICMSExt icms) {\n        BigDecimal taxValue = calculate((ICMS) icms);\n        // TODO implantar calculo ICMS ext.\n        return taxValue;\n    }\n\n    public BigDecimal calculate(IPI ipi) {\n        BigDecimal taxValue = ipi.getVIPI();\n        validate(ipi.getPIPI(), ipi.getIPIVBC());\n        if (taxValue == null) {\n            taxValue = internalCalculate(ipi.getIPIVBC(), ipi.getPIPI());\n            logger.debug(\"Valor calculado do IPI: {}.\", taxValue);\n            return taxValue;\n        }\n        logger.warn(\"Valor n�o recalculado do IPI: {}.\", taxValue);\n        return taxValue;\n    }\n\n    public BigDecimal calculate(PIS pis) {\n        BigDecimal taxValue = pis.getVPIS();\n        validate(pis.getPPIS(), pis.getPISVBC());\n        if (taxValue == null) {\n            taxValue = internalCalculate(pis.getPISVBC(), pis.getPPIS());\n            logger.debug(\"Valor calculado do PIS: {}.\", taxValue);\n            return taxValue;\n        }\n        logger.warn(\"Valor n�o recalculado do PIS: {}.\", taxValue);\n        return taxValue;\n    }\n\n    public BigDecimal calculate(COFINS cofins) {\n        BigDecimal taxValue = cofins.getVCOFINS();\n        validate(cofins.getPCOFINS(), cofins.getCOFINSVBC());\n        if (taxValue == null) {\n            taxValue = internalCalculate(cofins.getCOFINSVBC(), cofins.getPCOFINS());\n            logger.debug(\"Valor calculado do CONFINS: {}.\", taxValue);\n            return taxValue;\n        }\n        logger.warn(\"Valor n�o recalculado do CONFINS: {}.\", taxValue);\n        return taxValue;\n    }\n\n    /**\n     * Lan�a exce��o sempre que algum dos par�metros for nulo.\n     *\n     * @param aliquota\n     * @param vBC\n     */\n    protected void validate(BigDecimal aliquota, BigDecimal vBC) {\n        if (aliquota == null) {\n            throw new IllegalArgumentException(\"Valor da al�quota n�o pode ser nulo\");\n        }\n        if (vBC == null) {\n            throw new IllegalArgumentException(\"Valor da base de c�lculo n�o pode ser nulo\");\n        }\n    }\n\n    /**\n     * Calcula o imposto como um percentual da base.\n     *\n     * @param vBC valor da base de c�lculo\n     * @param p al�quota\n     */\n    protected BigDecimal internalCalculate(BigDecimal vBC, BigDecimal p) {\n        return vBC.multiply(p).divide(new BigDecimal(100));\n    }\n\n    private static final Logger logger = LoggerFactory.getLogger(NFeCalculatorImpl.class);\n}\n",
		"id": "EvoSuiteBenchmark/6_jnfe/src/main/java/br/com/jnfe/base/service/NFeCalculatorImplTest5.java",
		"test_prompt": "// NFeCalculatorImplTest5.java\npackage br.com.jnfe.base.service;\n\nimport java.math.BigDecimal;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\nimport br.com.jnfe.base.COFINS;\nimport br.com.jnfe.base.ICMS;\nimport br.com.jnfe.base.ICMSExt;\nimport br.com.jnfe.base.ICMSST;\nimport br.com.jnfe.base.IPI;\nimport br.com.jnfe.base.ModBC;\nimport br.com.jnfe.base.PIS;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link NFeCalculatorImpl}.\n* It contains ten unit test cases for the {@link NFeCalculatorImpl#calculate(COFINS)} method.\n*/\nclass NFeCalculatorImplTest5 {"
	},
	{
		"original_code": "// DOMNFeKeyInfoBuilder.java\npackage br.com.jnfe.base.service;\n\nimport java.security.cert.Certificate;\nimport java.util.Collections;\nimport javax.annotation.Resource;\nimport javax.xml.crypto.dsig.XMLSignatureFactory;\nimport javax.xml.crypto.dsig.keyinfo.KeyInfo;\nimport javax.xml.crypto.dsig.keyinfo.KeyInfoFactory;\nimport javax.xml.crypto.dsig.keyinfo.X509Data;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\n\n/**\n * Implementa��o padr�o da interface <code>KeyInfoBuilder</code>.\n *\n * @author mauriciofernandesdecastro\n */\npublic class DOMNFeKeyInfoBuilder implements KeyInfoBuilder {\n\n    public KeyInfo newKeyInfo(Certificate certificate) {\n        KeyInfoFactory kif = signatureFactory.getKeyInfoFactory();\n        X509Data x509Data = kif.newX509Data(Collections.singletonList(certificate));\n        KeyInfo keyInfo = kif.newKeyInfo(Collections.singletonList(x509Data));\n        logger.debug(\"Elemento <KeyInfo ...> preparado para assinatura.\");\n        return keyInfo;\n    }\n\n    // collabs\n    private XMLSignatureFactory signatureFactory;\n\n    @Resource\n    protected void setXMLSignatureFactory(XMLSignatureFactory signatureFactory) {\n        this.signatureFactory = signatureFactory;\n    }\n\n    private static final Logger logger = LoggerFactory.getLogger(DOMNFeKeyInfoBuilder.class);\n}\n",
		"id": "EvoSuiteBenchmark/6_jnfe/src/main/java/br/com/jnfe/base/service/DOMNFeKeyInfoBuilderTest.java",
		"test_prompt": "// DOMNFeKeyInfoBuilderTest.java\npackage br.com.jnfe.base.service;\n\nimport java.security.cert.Certificate;\nimport java.util.Collections;\nimport javax.annotation.Resource;\nimport javax.xml.crypto.dsig.XMLSignatureFactory;\nimport javax.xml.crypto.dsig.keyinfo.KeyInfo;\nimport javax.xml.crypto.dsig.keyinfo.KeyInfoFactory;\nimport javax.xml.crypto.dsig.keyinfo.X509Data;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link DOMNFeKeyInfoBuilder}.\n* It contains ten unit test cases for the {@link DOMNFeKeyInfoBuilder#newKeyInfo(Certificate)} method.\n*/\nclass DOMNFeKeyInfoBuilderTest {"
	},
	{
		"original_code": "// DOMNFeFileReader.java\npackage br.com.jnfe.base.service;\n\nimport java.io.ByteArrayOutputStream;\nimport java.io.InputStream;\nimport java.io.OutputStream;\nimport javax.xml.crypto.dom.DOMStructure;\nimport javax.xml.parsers.DocumentBuilder;\nimport javax.xml.parsers.DocumentBuilderFactory;\nimport javax.xml.transform.Result;\nimport javax.xml.transform.Transformer;\nimport javax.xml.transform.TransformerException;\nimport javax.xml.transform.TransformerFactory;\nimport javax.xml.transform.dom.DOMSource;\nimport javax.xml.transform.stream.StreamResult;\nimport org.springframework.core.io.ClassPathResource;\nimport org.springframework.core.io.InputStreamSource;\nimport org.w3c.dom.Document;\nimport org.w3c.dom.Element;\n\n/**\n * L� um arquivo do sistema e assina.\n *\n * @author mauriciofernandesdecastro\n */\npublic class DOMNFeFileReader {\n\n    /**\n     * L� um arquivo e assina.\n     *\n     * @param filePath\n     * @param tagToSign\n     *\n     * @throws Exception\n     */\n    public Result loadAndSign(String filePath, String tagToSign) throws Exception {\n        InputStreamSource resource = new ClassPathResource(filePath);\n        return loadAndSign(resource.getInputStream(), tagToSign);\n    }\n\n    /**\n     * L� um arquivo e assina.\n     *\n     * @param inputStream\n     * @param tagToSign\n     *\n     * @throws Exception\n     */\n    public Result loadAndSign(InputStream inputStream, String tagToSign) throws Exception {\n        DocumentBuilder builder = documentBuilderFactory.newDocumentBuilder();\n        Document document = builder.parse(inputStream);\n        Element root = document.getDocumentElement();\n        Element parent = (Element) document.getElementsByTagName(\"NFe\").item(0);\n        signatureHandler.sign(new DOMStructure(parent), tagToSign);\n        OutputStream outputResult = new ByteArrayOutputStream();\n        StreamResult streamResult = new StreamResult(outputResult);\n        try {\n            TransformerFactory tFactory = TransformerFactory.newInstance();\n            Transformer transformer = tFactory.newTransformer();\n            transformer.transform(new DOMSource(root), streamResult);\n        } catch (TransformerException e) {\n            throw new IllegalArgumentException(\"Imposs�vel transformar assinatura, \", e);\n        }\n        return streamResult;\n    }\n\n    // collabs\n    private DocumentBuilderFactory documentBuilderFactory;\n\n    private SignatureHandler signatureHandler;\n\n    @javax.annotation.Resource\n    public void setDocumentBuilderFactory(DocumentBuilderFactory documentBuilderFactory) {\n        this.documentBuilderFactory = documentBuilderFactory;\n    }\n\n    @javax.annotation.Resource\n    public void setSignatureHandler(SignatureHandler signatureHandler) {\n        this.signatureHandler = signatureHandler;\n    }\n}\n",
		"id": "EvoSuiteBenchmark/6_jnfe/src/main/java/br/com/jnfe/base/service/DOMNFeFileReaderTest0.java",
		"test_prompt": "// DOMNFeFileReaderTest0.java\npackage br.com.jnfe.base.service;\n\nimport java.io.ByteArrayOutputStream;\nimport java.io.InputStream;\nimport java.io.OutputStream;\nimport javax.xml.crypto.dom.DOMStructure;\nimport javax.xml.parsers.DocumentBuilder;\nimport javax.xml.parsers.DocumentBuilderFactory;\nimport javax.xml.transform.Result;\nimport javax.xml.transform.Transformer;\nimport javax.xml.transform.TransformerException;\nimport javax.xml.transform.TransformerFactory;\nimport javax.xml.transform.dom.DOMSource;\nimport javax.xml.transform.stream.StreamResult;\nimport org.springframework.core.io.ClassPathResource;\nimport org.springframework.core.io.InputStreamSource;\nimport org.w3c.dom.Document;\nimport org.w3c.dom.Element;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link DOMNFeFileReader}.\n* It contains ten unit test cases for the {@link DOMNFeFileReader#loadAndSign(String, String)} method.\n*/\nclass DOMNFeFileReaderTest0 {"
	},
	{
		"original_code": "// DOMNFeFileReader.java\npackage br.com.jnfe.base.service;\n\nimport java.io.ByteArrayOutputStream;\nimport java.io.InputStream;\nimport java.io.OutputStream;\nimport javax.xml.crypto.dom.DOMStructure;\nimport javax.xml.parsers.DocumentBuilder;\nimport javax.xml.parsers.DocumentBuilderFactory;\nimport javax.xml.transform.Result;\nimport javax.xml.transform.Transformer;\nimport javax.xml.transform.TransformerException;\nimport javax.xml.transform.TransformerFactory;\nimport javax.xml.transform.dom.DOMSource;\nimport javax.xml.transform.stream.StreamResult;\nimport org.springframework.core.io.ClassPathResource;\nimport org.springframework.core.io.InputStreamSource;\nimport org.w3c.dom.Document;\nimport org.w3c.dom.Element;\n\n/**\n * L� um arquivo do sistema e assina.\n *\n * @author mauriciofernandesdecastro\n */\npublic class DOMNFeFileReader {\n\n    /**\n     * L� um arquivo e assina.\n     *\n     * @param filePath\n     * @param tagToSign\n     *\n     * @throws Exception\n     */\n    public Result loadAndSign(String filePath, String tagToSign) throws Exception {\n        InputStreamSource resource = new ClassPathResource(filePath);\n        return loadAndSign(resource.getInputStream(), tagToSign);\n    }\n\n    /**\n     * L� um arquivo e assina.\n     *\n     * @param inputStream\n     * @param tagToSign\n     *\n     * @throws Exception\n     */\n    public Result loadAndSign(InputStream inputStream, String tagToSign) throws Exception {\n        DocumentBuilder builder = documentBuilderFactory.newDocumentBuilder();\n        Document document = builder.parse(inputStream);\n        Element root = document.getDocumentElement();\n        Element parent = (Element) document.getElementsByTagName(\"NFe\").item(0);\n        signatureHandler.sign(new DOMStructure(parent), tagToSign);\n        OutputStream outputResult = new ByteArrayOutputStream();\n        StreamResult streamResult = new StreamResult(outputResult);\n        try {\n            TransformerFactory tFactory = TransformerFactory.newInstance();\n            Transformer transformer = tFactory.newTransformer();\n            transformer.transform(new DOMSource(root), streamResult);\n        } catch (TransformerException e) {\n            throw new IllegalArgumentException(\"Imposs�vel transformar assinatura, \", e);\n        }\n        return streamResult;\n    }\n\n    // collabs\n    private DocumentBuilderFactory documentBuilderFactory;\n\n    private SignatureHandler signatureHandler;\n\n    @javax.annotation.Resource\n    public void setDocumentBuilderFactory(DocumentBuilderFactory documentBuilderFactory) {\n        this.documentBuilderFactory = documentBuilderFactory;\n    }\n\n    @javax.annotation.Resource\n    public void setSignatureHandler(SignatureHandler signatureHandler) {\n        this.signatureHandler = signatureHandler;\n    }\n}\n",
		"id": "EvoSuiteBenchmark/6_jnfe/src/main/java/br/com/jnfe/base/service/DOMNFeFileReaderTest1.java",
		"test_prompt": "// DOMNFeFileReaderTest1.java\npackage br.com.jnfe.base.service;\n\nimport java.io.ByteArrayOutputStream;\nimport java.io.InputStream;\nimport java.io.OutputStream;\nimport javax.xml.crypto.dom.DOMStructure;\nimport javax.xml.parsers.DocumentBuilder;\nimport javax.xml.parsers.DocumentBuilderFactory;\nimport javax.xml.transform.Result;\nimport javax.xml.transform.Transformer;\nimport javax.xml.transform.TransformerException;\nimport javax.xml.transform.TransformerFactory;\nimport javax.xml.transform.dom.DOMSource;\nimport javax.xml.transform.stream.StreamResult;\nimport org.springframework.core.io.ClassPathResource;\nimport org.springframework.core.io.InputStreamSource;\nimport org.w3c.dom.Document;\nimport org.w3c.dom.Element;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link DOMNFeFileReader}.\n* It contains ten unit test cases for the {@link DOMNFeFileReader#loadAndSign(InputStream, String)} method.\n*/\nclass DOMNFeFileReaderTest1 {"
	},
	{
		"original_code": "// DOMNFeSigantureFactoryBean.java\npackage br.com.jnfe.base.service;\n\nimport java.security.Provider;\nimport javax.xml.crypto.dsig.XMLSignatureFactory;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\nimport org.springframework.beans.factory.FactoryBean;\nimport org.springframework.beans.factory.InitializingBean;\n\n/**\n * Cria inst�ncias de <code>XMLSignatureFactory</code>.\n *\n * @author mauriciofernandesdecastro\n */\npublic class DOMNFeSigantureFactoryBean implements InitializingBean, FactoryBean<XMLSignatureFactory> {\n\n    public static final String DEFAULT_PROVIDER_CLASS_NAME = \"org.jcp.xml.dsig.internal.dom.XMLDSigRI\";\n\n    public static final String DEFAULT_PROVIDER_NAME = \"jsr105Provider\";\n\n    private String providerClassName = \"\";\n\n    private String providerName = \"\";\n\n    /**\n     * O nome do provedor JCA.\n     */\n    public String getProviderName() {\n        return providerName;\n    }\n\n    public void setProviderName(String providerName) {\n        this.providerName = providerName;\n    }\n\n    /**\n     * A classe do provedor JCA.\n     */\n    public String getProviderClassName() {\n        return providerClassName;\n    }\n\n    public void setProviderClassName(String providerClassName) {\n        this.providerClassName = providerClassName;\n    }\n\n    /**\n     * Prepara a cria��o de inst�ncias de <code>XMLSignatureFactory</code>.\n     */\n    public void afterPropertiesSet() throws Exception {\n        if (getProviderName().isEmpty()) {\n            setProviderName(DEFAULT_PROVIDER_NAME);\n            logger.warn(\"PRovider name n�o definido, usando {}\", getProviderName());\n        }\n        if (getProviderClassName().isEmpty()) {\n            setProviderClassName(DEFAULT_PROVIDER_CLASS_NAME);\n            logger.warn(\"PRovider name n�o definido, usando {}\", getProviderClassName());\n        }\n        providerName = System.getProperty(getProviderName(), getProviderClassName());\n    }\n\n    public XMLSignatureFactory getObject() throws Exception {\n        logger.debug(\"Usando o provider com nome {}.\", providerName);\n        Provider provider = (Provider) Class.forName(providerName).newInstance();\n        XMLSignatureFactory xmlSignatureFactory = XMLSignatureFactory.getInstance(\"DOM\", provider);\n        logger.debug(\"A inst�ncia de XMLSignatureFactory � {}.\", xmlSignatureFactory);\n        return xmlSignatureFactory;\n    }\n\n    public Class<?> getObjectType() {\n        return XMLSignatureFactory.class;\n    }\n\n    public boolean isSingleton() {\n        return false;\n    }\n\n    private static final Logger logger = LoggerFactory.getLogger(DOMNFeSigantureFactoryBean.class);\n}\n",
		"id": "EvoSuiteBenchmark/6_jnfe/src/main/java/br/com/jnfe/base/service/DOMNFeSigantureFactoryBeanTest.java",
		"test_prompt": "// DOMNFeSigantureFactoryBeanTest.java\npackage br.com.jnfe.base.service;\n\nimport java.security.Provider;\nimport javax.xml.crypto.dsig.XMLSignatureFactory;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\nimport org.springframework.beans.factory.FactoryBean;\nimport org.springframework.beans.factory.InitializingBean;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link DOMNFeSigantureFactoryBean}.\n* It contains ten unit test cases for the {@link DOMNFeSigantureFactoryBean#isSingleton()} method.\n*/\nclass DOMNFeSigantureFactoryBeanTest {"
	}
]