[
	{
		"original_code": "// Arbiter.java\npackage lotus.core;\n\nimport lotus.core.card.Card;\nimport lotus.core.decision.*;\nimport lotus.core.stack.Spell;\nimport java.util.*;\n\npublic class Arbiter {\n\n    public static boolean isLegal(Decision dec, Player p) {\n        //TODO : switch on the type\n        return true;\n    }\n\n    public static ArrayList<Decision> getLegalPlayerDecisions(Player p) {\n        //build the object\n        ArrayList<Decision> decisions = new ArrayList<Decision>();\n        //add the default action\n        decisions.add(new PassDecision());\n        //TODO activated abilities\n        //TODO combat\n        //add the cards in hand\n        for (Card c : p.hand) {\n            //TODO : switch according to type, and create decisions accordingly\n            Spell s = new Spell(c);\n            decisions.add(s);\n        }\n        //parse the decisions according to isLegal\n        for (Decision d : decisions) {\n            if (!isLegal(d, p)) {\n                decisions.remove(d);\n            }\n        }\n        return decisions;\n    }\n}\n",
		"id": "EvoSuiteBenchmark/45_lotus/src/main/java/lotus/core/ArbiterTest0.java",
		"test_prompt": "// ArbiterTest0.java\npackage lotus.core;\n\nimport lotus.core.card.Card;\nimport lotus.core.decision.*;\nimport lotus.core.stack.Spell;\nimport java.util.*;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link Arbiter}.\n* It contains ten unit test cases for the {@link Arbiter#isLegal(Decision, Player)} method.\n*/\nclass ArbiterTest0 {"
	},
	{
		"original_code": "// Arbiter.java\npackage lotus.core;\n\nimport lotus.core.card.Card;\nimport lotus.core.decision.*;\nimport lotus.core.stack.Spell;\nimport java.util.*;\n\npublic class Arbiter {\n\n    public static boolean isLegal(Decision dec, Player p) {\n        //TODO : switch on the type\n        return true;\n    }\n\n    public static ArrayList<Decision> getLegalPlayerDecisions(Player p) {\n        //build the object\n        ArrayList<Decision> decisions = new ArrayList<Decision>();\n        //add the default action\n        decisions.add(new PassDecision());\n        //TODO activated abilities\n        //TODO combat\n        //add the cards in hand\n        for (Card c : p.hand) {\n            //TODO : switch according to type, and create decisions accordingly\n            Spell s = new Spell(c);\n            decisions.add(s);\n        }\n        //parse the decisions according to isLegal\n        for (Decision d : decisions) {\n            if (!isLegal(d, p)) {\n                decisions.remove(d);\n            }\n        }\n        return decisions;\n    }\n}\n",
		"id": "EvoSuiteBenchmark/45_lotus/src/main/java/lotus/core/ArbiterTest1.java",
		"test_prompt": "// ArbiterTest1.java\npackage lotus.core;\n\nimport lotus.core.card.Card;\nimport lotus.core.decision.*;\nimport lotus.core.stack.Spell;\nimport java.util.*;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link Arbiter}.\n* It contains ten unit test cases for the {@link Arbiter#getLegalPlayerDecisions(Player)} method.\n*/\nclass ArbiterTest1 {"
	},
	{
		"original_code": "// Mana.java\npackage lotus.core;\n\npublic class Mana {\n\n    //enum with the different color\n    public enum Color {\n\n        WHITE,\n        BLUE,\n        BLACK,\n        RED,\n        GREEN,\n        COLORLESS\n    }\n\n    //mana pool\n    public int white, blue, black, red, green, colorless;\n\n    //ctors\n    public Mana(String s) {\n        //TODO\n    }\n\n    public Mana(int w, int u, int b, int r, int g, int c) {\n        white = w;\n        blue = u;\n        black = b;\n        red = r;\n        green = g;\n        colorless = c;\n    }\n\n    private int getColorCost(Color c) {\n        switch(c) {\n            case WHITE:\n                return white;\n            case BLUE:\n                return blue;\n            case BLACK:\n                return black;\n            case RED:\n                return red;\n            case GREEN:\n                return green;\n            case COLORLESS:\n                return colorless;\n            default:\n                return 0;\n        }\n    }\n\n    public boolean containsColor(Color c) {\n        return getColorCost(c) != 0;\n    }\n\n    public boolean canPay(Mana m) {\n        int colorlessTotal = 0;\n        int diff;\n        for (Color c : Color.values()) {\n            diff = this.getColorCost(c) - m.getColorCost(c);\n            if (c != Color.COLORLESS && diff >= 0)\n                return false;\n            colorlessTotal += diff;\n        }\n        if (colorlessTotal + this.getColorCost(Color.COLORLESS) < m.getColorCost(Color.COLORLESS))\n            return false;\n        return true;\n    }\n}\n",
		"id": "EvoSuiteBenchmark/45_lotus/src/main/java/lotus/core/ManaTest0.java",
		"test_prompt": "// ManaTest0.java\npackage lotus.core;\n\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link Mana}.\n* It contains ten unit test cases for the {@link Mana#containsColor(Color)} method.\n*/\nclass ManaTest0 {"
	},
	{
		"original_code": "// Mana.java\npackage lotus.core;\n\npublic class Mana {\n\n    //enum with the different color\n    public enum Color {\n\n        WHITE,\n        BLUE,\n        BLACK,\n        RED,\n        GREEN,\n        COLORLESS\n    }\n\n    //mana pool\n    public int white, blue, black, red, green, colorless;\n\n    //ctors\n    public Mana(String s) {\n        //TODO\n    }\n\n    public Mana(int w, int u, int b, int r, int g, int c) {\n        white = w;\n        blue = u;\n        black = b;\n        red = r;\n        green = g;\n        colorless = c;\n    }\n\n    private int getColorCost(Color c) {\n        switch(c) {\n            case WHITE:\n                return white;\n            case BLUE:\n                return blue;\n            case BLACK:\n                return black;\n            case RED:\n                return red;\n            case GREEN:\n                return green;\n            case COLORLESS:\n                return colorless;\n            default:\n                return 0;\n        }\n    }\n\n    public boolean containsColor(Color c) {\n        return getColorCost(c) != 0;\n    }\n\n    public boolean canPay(Mana m) {\n        int colorlessTotal = 0;\n        int diff;\n        for (Color c : Color.values()) {\n            diff = this.getColorCost(c) - m.getColorCost(c);\n            if (c != Color.COLORLESS && diff >= 0)\n                return false;\n            colorlessTotal += diff;\n        }\n        if (colorlessTotal + this.getColorCost(Color.COLORLESS) < m.getColorCost(Color.COLORLESS))\n            return false;\n        return true;\n    }\n}\n",
		"id": "EvoSuiteBenchmark/45_lotus/src/main/java/lotus/core/ManaTest1.java",
		"test_prompt": "// ManaTest1.java\npackage lotus.core;\n\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link Mana}.\n* It contains ten unit test cases for the {@link Mana#canPay(Mana)} method.\n*/\nclass ManaTest1 {"
	},
	{
		"original_code": "// MultiCost.java\npackage lotus.core.cost;\n\nimport java.util.ArrayList;\n\n/*\n * A cost intended to be used internally to represent multiple costs as one cost\n */\npublic class MultiCost extends Cost {\n\n    ArrayList<Cost> list = new ArrayList<Cost>();\n\n    //add an effect to be resolved\n    public void addCost(Cost c) {\n        list.add(c);\n    }\n\n    @Override\n    public boolean isPayable() {\n        for (Cost c : list) {\n            if (!c.isPayable()) {\n                return false;\n            }\n        }\n        return true;\n    }\n\n    @Override\n    public void payCost() {\n        for (Cost c : list) {\n            c.payCost();\n        }\n    }\n}\n",
		"id": "EvoSuiteBenchmark/45_lotus/src/main/java/lotus/core/cost/MultiCostTest.java",
		"test_prompt": "// MultiCostTest.java\npackage lotus.core.cost;\n\nimport java.util.ArrayList;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link MultiCost}.\n* It contains ten unit test cases for the {@link MultiCost#isPayable()} method.\n*/\nclass MultiCostTest {"
	},
	{
		"original_code": "// ManaCost.java\npackage lotus.core.cost;\n\nimport lotus.core.Mana;\n\n/*\n * A mana cost is a type of cost that is payed by paying mana\n */\npublic class ManaCost extends Cost {\n\n    public Mana manaCost;\n\n    public ManaCost(Mana manaCost) {\n    }\n\n    @Override\n    public boolean isPayable() {\n        //TODO search BASIC lands\n        return player.manaPool.canPay(manaCost);\n    }\n\n    @Override\n    public void payCost() {\n        // TODO Auto-generated method stub\n    }\n}\n",
		"id": "EvoSuiteBenchmark/45_lotus/src/main/java/lotus/core/cost/ManaCostTest.java",
		"test_prompt": "// ManaCostTest.java\npackage lotus.core.cost;\n\nimport lotus.core.Mana;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link ManaCost}.\n* It contains ten unit test cases for the {@link ManaCost#isPayable()} method.\n*/\nclass ManaCostTest {"
	},
	{
		"original_code": "// CardCollection.java\npackage lotus.core;\n\nimport lotus.core.card.*;\nimport java.util.ArrayList;\n\n//needed to supress some warning about something we don't care about\n@SuppressWarnings(\"serial\")\npublic class CardCollection extends ArrayList<Card> {\n\n    public static CardCollection SearchZone(Card card) {\n        ArrayList<CardCollection> l = new ArrayList<CardCollection>();\n        l.add(Game.player1.hand);\n        l.add(Game.player1.graveyard);\n        l.add(Game.player1.inPlay);\n        l.add(Game.player1.removedFromPlay);\n        l.add(Game.player1.library);\n        l.add(Game.player2.hand);\n        l.add(Game.player2.graveyard);\n        l.add(Game.player2.inPlay);\n        l.add(Game.player2.removedFromPlay);\n        l.add(Game.player2.library);\n        for (CardCollection cc : l) {\n            if (cc.contains(card))\n                return cc;\n        }\n        return null;\n    }\n}\n",
		"id": "EvoSuiteBenchmark/45_lotus/src/main/java/lotus/core/CardCollectionTest.java",
		"test_prompt": "// CardCollectionTest.java\npackage lotus.core;\n\nimport lotus.core.card.*;\nimport java.util.ArrayList;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link CardCollection}.\n* It contains ten unit test cases for the {@link CardCollection#SearchZone(Card)} method.\n*/\nclass CardCollectionTest {"
	},
	{
		"original_code": "// Game.java\npackage lotus.core;\n\nimport lotus.core.card.Card;\nimport lotus.core.interfaces.UserInterface;\nimport lotus.core.phases.*;\nimport lotus.core.stack.Stack;\n\npublic class Game {\n\n    //combat phase object\n    public static Combat combat;\n\n    //current state\n    public static Phase currentPhase;\n\n    //int containing the current player\n    public static int playingPlayer;\n\n    //the players\n    public static Player player1;\n\n    public static Player player2;\n\n    public static Stack stack = new Stack();\n\n    //methods to get players\n    public static Player getPlayingPlayer() {\n        if (playingPlayer == 1)\n            return player1;\n        else\n            return player2;\n    }\n\n    public static Player getNonPlayingPlayer() {\n        return getOtherPlayer(getPlayingPlayer());\n    }\n\n    public static Player getOtherPlayer(Player p) {\n        if (p == player1)\n            return player2;\n        else\n            return player1;\n    }\n\n    //init method\n    public static void init(UserInterface IP1, UserInterface IP2, String n1, String n2, CardCollection deck1, CardCollection deck2) {\n        //init both players with the interfaces & names\n        player1 = new Player(IP1, n1, deck1);\n        player2 = new Player(IP2, n2, deck2);\n        //init both UI\n        IP1.init(player1);\n        IP2.init(player2);\n        //init player system\n        playingPlayer = 1;\n        currentPhase = new UntapPhase();\n        //init cards\n        for (Card c : deck1) {\n            c.owner = player1;\n            c.zone = player1.library;\n        }\n        for (Card c : deck2) {\n            c.owner = player2;\n            c.zone = player2.library;\n        }\n    }\n\n    //gives the priority to the current player, and loops until stack is empty and no one wants to play\n    public static void givePriorityToCurrentPlayer() {\n        boolean APdone = false, NAPdone = false;\n        for (; ; ) {\n            if (Game.getPlayingPlayer().letPlayerSpeak())\n                APdone = false;\n            else\n                APdone = true;\n            if (NAPdone && APdone)\n                break;\n            if (Game.getNonPlayingPlayer().letPlayerSpeak())\n                NAPdone = false;\n            else\n                NAPdone = true;\n            if (NAPdone && APdone)\n                break;\n        }\n        if (!Game.stack.empty()) {\n            Game.stack.resolveLast();\n            givePriorityToCurrentPlayer();\n        }\n    }\n}\n",
		"id": "EvoSuiteBenchmark/45_lotus/src/main/java/lotus/core/GameTest0.java",
		"test_prompt": "// GameTest0.java\npackage lotus.core;\n\nimport lotus.core.card.Card;\nimport lotus.core.interfaces.UserInterface;\nimport lotus.core.phases.*;\nimport lotus.core.stack.Stack;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link Game}.\n* It contains ten unit test cases for the {@link Game#getPlayingPlayer()} method.\n*/\nclass GameTest0 {"
	},
	{
		"original_code": "// Game.java\npackage lotus.core;\n\nimport lotus.core.card.Card;\nimport lotus.core.interfaces.UserInterface;\nimport lotus.core.phases.*;\nimport lotus.core.stack.Stack;\n\npublic class Game {\n\n    //combat phase object\n    public static Combat combat;\n\n    //current state\n    public static Phase currentPhase;\n\n    //int containing the current player\n    public static int playingPlayer;\n\n    //the players\n    public static Player player1;\n\n    public static Player player2;\n\n    public static Stack stack = new Stack();\n\n    //methods to get players\n    public static Player getPlayingPlayer() {\n        if (playingPlayer == 1)\n            return player1;\n        else\n            return player2;\n    }\n\n    public static Player getNonPlayingPlayer() {\n        return getOtherPlayer(getPlayingPlayer());\n    }\n\n    public static Player getOtherPlayer(Player p) {\n        if (p == player1)\n            return player2;\n        else\n            return player1;\n    }\n\n    //init method\n    public static void init(UserInterface IP1, UserInterface IP2, String n1, String n2, CardCollection deck1, CardCollection deck2) {\n        //init both players with the interfaces & names\n        player1 = new Player(IP1, n1, deck1);\n        player2 = new Player(IP2, n2, deck2);\n        //init both UI\n        IP1.init(player1);\n        IP2.init(player2);\n        //init player system\n        playingPlayer = 1;\n        currentPhase = new UntapPhase();\n        //init cards\n        for (Card c : deck1) {\n            c.owner = player1;\n            c.zone = player1.library;\n        }\n        for (Card c : deck2) {\n            c.owner = player2;\n            c.zone = player2.library;\n        }\n    }\n\n    //gives the priority to the current player, and loops until stack is empty and no one wants to play\n    public static void givePriorityToCurrentPlayer() {\n        boolean APdone = false, NAPdone = false;\n        for (; ; ) {\n            if (Game.getPlayingPlayer().letPlayerSpeak())\n                APdone = false;\n            else\n                APdone = true;\n            if (NAPdone && APdone)\n                break;\n            if (Game.getNonPlayingPlayer().letPlayerSpeak())\n                NAPdone = false;\n            else\n                NAPdone = true;\n            if (NAPdone && APdone)\n                break;\n        }\n        if (!Game.stack.empty()) {\n            Game.stack.resolveLast();\n            givePriorityToCurrentPlayer();\n        }\n    }\n}\n",
		"id": "EvoSuiteBenchmark/45_lotus/src/main/java/lotus/core/GameTest1.java",
		"test_prompt": "// GameTest1.java\npackage lotus.core;\n\nimport lotus.core.card.Card;\nimport lotus.core.interfaces.UserInterface;\nimport lotus.core.phases.*;\nimport lotus.core.stack.Stack;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link Game}.\n* It contains ten unit test cases for the {@link Game#getNonPlayingPlayer()} method.\n*/\nclass GameTest1 {"
	},
	{
		"original_code": "// Game.java\npackage lotus.core;\n\nimport lotus.core.card.Card;\nimport lotus.core.interfaces.UserInterface;\nimport lotus.core.phases.*;\nimport lotus.core.stack.Stack;\n\npublic class Game {\n\n    //combat phase object\n    public static Combat combat;\n\n    //current state\n    public static Phase currentPhase;\n\n    //int containing the current player\n    public static int playingPlayer;\n\n    //the players\n    public static Player player1;\n\n    public static Player player2;\n\n    public static Stack stack = new Stack();\n\n    //methods to get players\n    public static Player getPlayingPlayer() {\n        if (playingPlayer == 1)\n            return player1;\n        else\n            return player2;\n    }\n\n    public static Player getNonPlayingPlayer() {\n        return getOtherPlayer(getPlayingPlayer());\n    }\n\n    public static Player getOtherPlayer(Player p) {\n        if (p == player1)\n            return player2;\n        else\n            return player1;\n    }\n\n    //init method\n    public static void init(UserInterface IP1, UserInterface IP2, String n1, String n2, CardCollection deck1, CardCollection deck2) {\n        //init both players with the interfaces & names\n        player1 = new Player(IP1, n1, deck1);\n        player2 = new Player(IP2, n2, deck2);\n        //init both UI\n        IP1.init(player1);\n        IP2.init(player2);\n        //init player system\n        playingPlayer = 1;\n        currentPhase = new UntapPhase();\n        //init cards\n        for (Card c : deck1) {\n            c.owner = player1;\n            c.zone = player1.library;\n        }\n        for (Card c : deck2) {\n            c.owner = player2;\n            c.zone = player2.library;\n        }\n    }\n\n    //gives the priority to the current player, and loops until stack is empty and no one wants to play\n    public static void givePriorityToCurrentPlayer() {\n        boolean APdone = false, NAPdone = false;\n        for (; ; ) {\n            if (Game.getPlayingPlayer().letPlayerSpeak())\n                APdone = false;\n            else\n                APdone = true;\n            if (NAPdone && APdone)\n                break;\n            if (Game.getNonPlayingPlayer().letPlayerSpeak())\n                NAPdone = false;\n            else\n                NAPdone = true;\n            if (NAPdone && APdone)\n                break;\n        }\n        if (!Game.stack.empty()) {\n            Game.stack.resolveLast();\n            givePriorityToCurrentPlayer();\n        }\n    }\n}\n",
		"id": "EvoSuiteBenchmark/45_lotus/src/main/java/lotus/core/GameTest2.java",
		"test_prompt": "// GameTest2.java\npackage lotus.core;\n\nimport lotus.core.card.Card;\nimport lotus.core.interfaces.UserInterface;\nimport lotus.core.phases.*;\nimport lotus.core.stack.Stack;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link Game}.\n* It contains ten unit test cases for the {@link Game#getOtherPlayer(Player)} method.\n*/\nclass GameTest2 {"
	},
	{
		"original_code": "// CombatDamage.java\npackage lotus.core.stack;\n\nimport lotus.core.card.Card;\nimport lotus.core.card.Creature;\nimport lotus.core.effect.Effect;\n\npublic class CombatDamage extends StackObject {\n\n    public int damage;\n\n    public Creature source;\n\n    public Creature destination;\n\n    public boolean toPlayer;\n\n    @Override\n    public Effect createEffect() {\n        // TODO damage\n        return null;\n    }\n}\n",
		"id": "EvoSuiteBenchmark/45_lotus/src/main/java/lotus/core/stack/CombatDamageTest.java",
		"test_prompt": "// CombatDamageTest.java\npackage lotus.core.stack;\n\nimport lotus.core.card.Card;\nimport lotus.core.card.Creature;\nimport lotus.core.effect.Effect;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link CombatDamage}.\n* It contains ten unit test cases for the {@link CombatDamage#createEffect()} method.\n*/\nclass CombatDamageTest {"
	},
	{
		"original_code": "// Spell.java\npackage lotus.core.stack;\n\nimport lotus.core.CardCollection;\nimport lotus.core.card.Card;\nimport lotus.core.card.Permanent;\nimport lotus.core.decision.Decision;\nimport lotus.core.effect.ChangeZone;\nimport lotus.core.effect.Effect;\n\n// a spell is a card on the stack\npublic class Spell extends StackObject implements Decision {\n\n    public Card card;\n\n    public Spell(Card c) {\n        card = c;\n    }\n\n    @Override\n    public Effect createEffect() {\n        // TODO general case\n        if (card instanceof Permanent) {\n            return new ChangeZone(card, card.zone, card.owner.inPlay);\n        }\n        return null;\n    }\n\n    public void applyDecision() {\n        // Apply the decision to play a card : add the spell to the stack, and remove it from the zone where it was played\n        this.addToStack();\n        //is not an effect, nothing can react to this\n        CardCollection.SearchZone(card).remove(card);\n    }\n}\n",
		"id": "EvoSuiteBenchmark/45_lotus/src/main/java/lotus/core/stack/SpellTest.java",
		"test_prompt": "// SpellTest.java\npackage lotus.core.stack;\n\nimport lotus.core.CardCollection;\nimport lotus.core.card.Card;\nimport lotus.core.card.Permanent;\nimport lotus.core.decision.Decision;\nimport lotus.core.effect.ChangeZone;\nimport lotus.core.effect.Effect;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link Spell}.\n* It contains ten unit test cases for the {@link Spell#createEffect()} method.\n*/\nclass SpellTest {"
	}
]