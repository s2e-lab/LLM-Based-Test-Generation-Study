[
	{
		"original_code": "// Linear.java\npackage simulator.util;\n\n/**\n * An implementation of a linear function.\n * Y = aX + b\n * @author Vartalas Panagiotis\n * @author Ioannis N. Athanasiadis\n * @version 1.9\n * @since 2003-2006\n */\npublic class Linear extends Function {\n\n    private static final long serialVersionUID = -1407554814565153847L;\n\n    private FunctionConstant a = new FunctionConstant(\"a\", true);\n\n    private FunctionConstant b = new FunctionConstant(\"b\", true);\n\n    public Linear() {\n        super(\"LINEAR\", \" Y = aX + b \");\n        this.setFunctionConstant(a);\n        this.setFunctionConstant(b);\n    }\n\n    public Linear(float a, float b) {\n        super(\"LINEAR\", \" Y = aX + b \");\n        this.a.setConstantValue(a);\n        this.setFunctionConstant(this.a);\n        this.b.setConstantValue(b);\n        this.setFunctionConstant(this.b);\n    }\n\n    public float valueFor(int x) {\n        float y = (a.getConstantFValue() * x) + b.getConstantFValue();\n        return y;\n    }\n\n    public float valueFor(float x) {\n        float y = (a.getConstantFValue() * x) + b.getConstantFValue();\n        return y;\n    }\n\n    public boolean parseString(String inputs) {\n        return true;\n    }\n}\n",
		"id": "EvoSuiteBenchmark/10_water-simulator/src/main/java/simulator/util/LinearTest0.java",
		"test_prompt": "// LinearTest0.java\npackage simulator.util;\n\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link Linear}.\n* It contains ten unit test cases for the {@link Linear#valueFor(int)} method.\n*/\nclass LinearTest0 {"
	},
	{
		"original_code": "// Linear.java\npackage simulator.util;\n\n/**\n * An implementation of a linear function.\n * Y = aX + b\n * @author Vartalas Panagiotis\n * @author Ioannis N. Athanasiadis\n * @version 1.9\n * @since 2003-2006\n */\npublic class Linear extends Function {\n\n    private static final long serialVersionUID = -1407554814565153847L;\n\n    private FunctionConstant a = new FunctionConstant(\"a\", true);\n\n    private FunctionConstant b = new FunctionConstant(\"b\", true);\n\n    public Linear() {\n        super(\"LINEAR\", \" Y = aX + b \");\n        this.setFunctionConstant(a);\n        this.setFunctionConstant(b);\n    }\n\n    public Linear(float a, float b) {\n        super(\"LINEAR\", \" Y = aX + b \");\n        this.a.setConstantValue(a);\n        this.setFunctionConstant(this.a);\n        this.b.setConstantValue(b);\n        this.setFunctionConstant(this.b);\n    }\n\n    public float valueFor(int x) {\n        float y = (a.getConstantFValue() * x) + b.getConstantFValue();\n        return y;\n    }\n\n    public float valueFor(float x) {\n        float y = (a.getConstantFValue() * x) + b.getConstantFValue();\n        return y;\n    }\n\n    public boolean parseString(String inputs) {\n        return true;\n    }\n}\n",
		"id": "EvoSuiteBenchmark/10_water-simulator/src/main/java/simulator/util/LinearTest1.java",
		"test_prompt": "// LinearTest1.java\npackage simulator.util;\n\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link Linear}.\n* It contains ten unit test cases for the {@link Linear#valueFor(float)} method.\n*/\nclass LinearTest1 {"
	},
	{
		"original_code": "// Linear.java\npackage simulator.util;\n\n/**\n * An implementation of a linear function.\n * Y = aX + b\n * @author Vartalas Panagiotis\n * @author Ioannis N. Athanasiadis\n * @version 1.9\n * @since 2003-2006\n */\npublic class Linear extends Function {\n\n    private static final long serialVersionUID = -1407554814565153847L;\n\n    private FunctionConstant a = new FunctionConstant(\"a\", true);\n\n    private FunctionConstant b = new FunctionConstant(\"b\", true);\n\n    public Linear() {\n        super(\"LINEAR\", \" Y = aX + b \");\n        this.setFunctionConstant(a);\n        this.setFunctionConstant(b);\n    }\n\n    public Linear(float a, float b) {\n        super(\"LINEAR\", \" Y = aX + b \");\n        this.a.setConstantValue(a);\n        this.setFunctionConstant(this.a);\n        this.b.setConstantValue(b);\n        this.setFunctionConstant(this.b);\n    }\n\n    public float valueFor(int x) {\n        float y = (a.getConstantFValue() * x) + b.getConstantFValue();\n        return y;\n    }\n\n    public float valueFor(float x) {\n        float y = (a.getConstantFValue() * x) + b.getConstantFValue();\n        return y;\n    }\n\n    public boolean parseString(String inputs) {\n        return true;\n    }\n}\n",
		"id": "EvoSuiteBenchmark/10_water-simulator/src/main/java/simulator/util/LinearTest2.java",
		"test_prompt": "// LinearTest2.java\npackage simulator.util;\n\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link Linear}.\n* It contains ten unit test cases for the {@link Linear#parseString(String)} method.\n*/\nclass LinearTest2 {"
	},
	{
		"original_code": "// ParameterAttributes.java\npackage simulator.util;\n\nimport java.io.Serializable;\nimport org.apache.log4j.Logger;\n\n/**\n * A class representing a Parameter in a demand curve function of a Consumer Agent.\n * The properties of such a parameter are :\n * name,\n * elasticity,\n * a boolean indicating if parameter's value  will be the logarithm or not of the function,\n * a Function for calculating the parameter's value,\n * a Function for calculating the social weight for this parameter,\n * a boolean indicating if this parameter is social\n *\n * @author Vartalas Panagiotis\n * @author Ioannis N. Athanasiadis\n * @version 1.9\n * @since 2003-2006\n */\npublic class ParameterAttributes implements Serializable {\n\n    private static final long serialVersionUID = 6885432319261152672L;\n\n    private Logger log = Logger.getLogger(ParameterAttributes.class);\n\n    //Properties\n    private String name;\n\n    private Float elasticity;\n\n    private Boolean ln;\n\n    private Function demandCurveFunction;\n\n    private Function socialFunction;\n\n    private Boolean social = Boolean.FALSE;\n\n    private Float value = new Float(0);\n\n    /**\n     * Set parameter name\n     * @param name\n     */\n    public void setName(String name) {\n        this.name = name;\n    }\n\n    /**\n     * @return\n     */\n    public String getName() {\n        return name;\n    }\n\n    /**\n     * Set elasticity\n     * @param elasticity\n     */\n    public void setElasticity(float elasticity) {\n        this.elasticity = new Float(elasticity);\n    }\n\n    /**\n     * @return\n     */\n    public float getElasticity() {\n        return elasticity.floatValue();\n    }\n\n    /**\n     * Set true if the value of the parameter is the logarithm of parameter's function\n     * @param ln\n     */\n    public void setLn(boolean ln) {\n        this.ln = new Boolean(ln);\n    }\n\n    /**\n     * @return\n     */\n    public boolean getLn() {\n        return ln.booleanValue();\n    }\n\n    /**\n     * Set the demand curve function for this parameter. The Demand Curve Function gets the stepId\n     * as input if the parameter isn't social, otherwise gets the sum of all weights received from\n     * its neighbours. It returns parameter's value.\n     * @param dCF One of the availabe functions\n     */\n    public void setDemandCurveFunction(Function dCF) {\n        demandCurveFunction = dCF;\n    }\n\n    /**\n     * Set the demand curve function for this parameter\n     * @return\n     */\n    public Function getDemandCurveFunction() {\n        return demandCurveFunction;\n    }\n\n    /**\n     * Set the social function for this parameter. The Social Curve Function gets the stepId\n     * as input and returns a value (the weight) that the consumer agent will send in socialization\n     * stage of simulation in the specified step.\n     * @param sF One of the available functions\n     */\n    public void setSocialFunction(Function sF) {\n        socialFunction = sF;\n    }\n\n    /**\n     * @return\n     */\n    public Function getSocialFunction() {\n        return socialFunction;\n    }\n\n    /**\n     * Set this parameter to be social\n     */\n    public void setSocial(boolean b) {\n        this.social = Boolean.valueOf(b);\n    }\n\n    /**\n     * @return\n     */\n    public boolean isSocial() {\n        return social.booleanValue();\n    }\n\n    /**\n     * Calculates parameter's value for the Demand Curve as : elasticity * [ ln ] ( demandCurveFunction(step) )\n     * @param step The step for which to calculate parameters value\n     * @return Parameter's value that will be summed for calculating total consumer's consumption\n     */\n    public float valueFor(int step) {\n        return valueFor((float) step);\n    }\n\n    /**\n     * Overrides the previous method if the input is a float number. Mostly used when the parameter is\n     * social and the input value is the sum of weights.\n     * Calculates parameter's value for the Demand Curve as :\n     * elasticity * [ ln ] (demandCurveFunction(weights) )\n     * @param x The step for which to calculate parameters value\n     * @return Parameter's value that will be summed for calculating total consumer's consumption\n     */\n    public float valueFor(float x) {\n        float temp = demandCurveFunction.valueFor(x);\n        if (temp > 0) {\n            if (ln.booleanValue()) {\n                this.value = new Float(elasticity.floatValue() * ((float) Math.log(temp)));\n            } else {\n                this.value = new Float(elasticity.floatValue() * temp);\n            }\n        } else {\n            log.error(\"FATAL ERROR: Parameter was zero\");\n        }\n        return value.floatValue();\n    }\n\n    public String toString() {\n        return \"Parameter\" + name + \" type: \" + demandCurveFunction.getFunctionName() + \"(elasticity: \" + elasticity + \" log: \" + ln + \" soc: \" + social;\n    }\n}\n",
		"id": "EvoSuiteBenchmark/10_water-simulator/src/main/java/simulator/util/ParameterAttributesTest0.java",
		"test_prompt": "// ParameterAttributesTest0.java\npackage simulator.util;\n\nimport java.io.Serializable;\nimport org.apache.log4j.Logger;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link ParameterAttributes}.\n* It contains ten unit test cases for the {@link ParameterAttributes#isSocial()} method.\n*/\nclass ParameterAttributesTest0 {"
	},
	{
		"original_code": "// ParameterAttributes.java\npackage simulator.util;\n\nimport java.io.Serializable;\nimport org.apache.log4j.Logger;\n\n/**\n * A class representing a Parameter in a demand curve function of a Consumer Agent.\n * The properties of such a parameter are :\n * name,\n * elasticity,\n * a boolean indicating if parameter's value  will be the logarithm or not of the function,\n * a Function for calculating the parameter's value,\n * a Function for calculating the social weight for this parameter,\n * a boolean indicating if this parameter is social\n *\n * @author Vartalas Panagiotis\n * @author Ioannis N. Athanasiadis\n * @version 1.9\n * @since 2003-2006\n */\npublic class ParameterAttributes implements Serializable {\n\n    private static final long serialVersionUID = 6885432319261152672L;\n\n    private Logger log = Logger.getLogger(ParameterAttributes.class);\n\n    //Properties\n    private String name;\n\n    private Float elasticity;\n\n    private Boolean ln;\n\n    private Function demandCurveFunction;\n\n    private Function socialFunction;\n\n    private Boolean social = Boolean.FALSE;\n\n    private Float value = new Float(0);\n\n    /**\n     * Set parameter name\n     * @param name\n     */\n    public void setName(String name) {\n        this.name = name;\n    }\n\n    /**\n     * @return\n     */\n    public String getName() {\n        return name;\n    }\n\n    /**\n     * Set elasticity\n     * @param elasticity\n     */\n    public void setElasticity(float elasticity) {\n        this.elasticity = new Float(elasticity);\n    }\n\n    /**\n     * @return\n     */\n    public float getElasticity() {\n        return elasticity.floatValue();\n    }\n\n    /**\n     * Set true if the value of the parameter is the logarithm of parameter's function\n     * @param ln\n     */\n    public void setLn(boolean ln) {\n        this.ln = new Boolean(ln);\n    }\n\n    /**\n     * @return\n     */\n    public boolean getLn() {\n        return ln.booleanValue();\n    }\n\n    /**\n     * Set the demand curve function for this parameter. The Demand Curve Function gets the stepId\n     * as input if the parameter isn't social, otherwise gets the sum of all weights received from\n     * its neighbours. It returns parameter's value.\n     * @param dCF One of the availabe functions\n     */\n    public void setDemandCurveFunction(Function dCF) {\n        demandCurveFunction = dCF;\n    }\n\n    /**\n     * Set the demand curve function for this parameter\n     * @return\n     */\n    public Function getDemandCurveFunction() {\n        return demandCurveFunction;\n    }\n\n    /**\n     * Set the social function for this parameter. The Social Curve Function gets the stepId\n     * as input and returns a value (the weight) that the consumer agent will send in socialization\n     * stage of simulation in the specified step.\n     * @param sF One of the available functions\n     */\n    public void setSocialFunction(Function sF) {\n        socialFunction = sF;\n    }\n\n    /**\n     * @return\n     */\n    public Function getSocialFunction() {\n        return socialFunction;\n    }\n\n    /**\n     * Set this parameter to be social\n     */\n    public void setSocial(boolean b) {\n        this.social = Boolean.valueOf(b);\n    }\n\n    /**\n     * @return\n     */\n    public boolean isSocial() {\n        return social.booleanValue();\n    }\n\n    /**\n     * Calculates parameter's value for the Demand Curve as : elasticity * [ ln ] ( demandCurveFunction(step) )\n     * @param step The step for which to calculate parameters value\n     * @return Parameter's value that will be summed for calculating total consumer's consumption\n     */\n    public float valueFor(int step) {\n        return valueFor((float) step);\n    }\n\n    /**\n     * Overrides the previous method if the input is a float number. Mostly used when the parameter is\n     * social and the input value is the sum of weights.\n     * Calculates parameter's value for the Demand Curve as :\n     * elasticity * [ ln ] (demandCurveFunction(weights) )\n     * @param x The step for which to calculate parameters value\n     * @return Parameter's value that will be summed for calculating total consumer's consumption\n     */\n    public float valueFor(float x) {\n        float temp = demandCurveFunction.valueFor(x);\n        if (temp > 0) {\n            if (ln.booleanValue()) {\n                this.value = new Float(elasticity.floatValue() * ((float) Math.log(temp)));\n            } else {\n                this.value = new Float(elasticity.floatValue() * temp);\n            }\n        } else {\n            log.error(\"FATAL ERROR: Parameter was zero\");\n        }\n        return value.floatValue();\n    }\n\n    public String toString() {\n        return \"Parameter\" + name + \" type: \" + demandCurveFunction.getFunctionName() + \"(elasticity: \" + elasticity + \" log: \" + ln + \" soc: \" + social;\n    }\n}\n",
		"id": "EvoSuiteBenchmark/10_water-simulator/src/main/java/simulator/util/ParameterAttributesTest1.java",
		"test_prompt": "// ParameterAttributesTest1.java\npackage simulator.util;\n\nimport java.io.Serializable;\nimport org.apache.log4j.Logger;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link ParameterAttributes}.\n* It contains ten unit test cases for the {@link ParameterAttributes#valueFor(int)} method.\n*/\nclass ParameterAttributesTest1 {"
	},
	{
		"original_code": "// ParameterAttributes.java\npackage simulator.util;\n\nimport java.io.Serializable;\nimport org.apache.log4j.Logger;\n\n/**\n * A class representing a Parameter in a demand curve function of a Consumer Agent.\n * The properties of such a parameter are :\n * name,\n * elasticity,\n * a boolean indicating if parameter's value  will be the logarithm or not of the function,\n * a Function for calculating the parameter's value,\n * a Function for calculating the social weight for this parameter,\n * a boolean indicating if this parameter is social\n *\n * @author Vartalas Panagiotis\n * @author Ioannis N. Athanasiadis\n * @version 1.9\n * @since 2003-2006\n */\npublic class ParameterAttributes implements Serializable {\n\n    private static final long serialVersionUID = 6885432319261152672L;\n\n    private Logger log = Logger.getLogger(ParameterAttributes.class);\n\n    //Properties\n    private String name;\n\n    private Float elasticity;\n\n    private Boolean ln;\n\n    private Function demandCurveFunction;\n\n    private Function socialFunction;\n\n    private Boolean social = Boolean.FALSE;\n\n    private Float value = new Float(0);\n\n    /**\n     * Set parameter name\n     * @param name\n     */\n    public void setName(String name) {\n        this.name = name;\n    }\n\n    /**\n     * @return\n     */\n    public String getName() {\n        return name;\n    }\n\n    /**\n     * Set elasticity\n     * @param elasticity\n     */\n    public void setElasticity(float elasticity) {\n        this.elasticity = new Float(elasticity);\n    }\n\n    /**\n     * @return\n     */\n    public float getElasticity() {\n        return elasticity.floatValue();\n    }\n\n    /**\n     * Set true if the value of the parameter is the logarithm of parameter's function\n     * @param ln\n     */\n    public void setLn(boolean ln) {\n        this.ln = new Boolean(ln);\n    }\n\n    /**\n     * @return\n     */\n    public boolean getLn() {\n        return ln.booleanValue();\n    }\n\n    /**\n     * Set the demand curve function for this parameter. The Demand Curve Function gets the stepId\n     * as input if the parameter isn't social, otherwise gets the sum of all weights received from\n     * its neighbours. It returns parameter's value.\n     * @param dCF One of the availabe functions\n     */\n    public void setDemandCurveFunction(Function dCF) {\n        demandCurveFunction = dCF;\n    }\n\n    /**\n     * Set the demand curve function for this parameter\n     * @return\n     */\n    public Function getDemandCurveFunction() {\n        return demandCurveFunction;\n    }\n\n    /**\n     * Set the social function for this parameter. The Social Curve Function gets the stepId\n     * as input and returns a value (the weight) that the consumer agent will send in socialization\n     * stage of simulation in the specified step.\n     * @param sF One of the available functions\n     */\n    public void setSocialFunction(Function sF) {\n        socialFunction = sF;\n    }\n\n    /**\n     * @return\n     */\n    public Function getSocialFunction() {\n        return socialFunction;\n    }\n\n    /**\n     * Set this parameter to be social\n     */\n    public void setSocial(boolean b) {\n        this.social = Boolean.valueOf(b);\n    }\n\n    /**\n     * @return\n     */\n    public boolean isSocial() {\n        return social.booleanValue();\n    }\n\n    /**\n     * Calculates parameter's value for the Demand Curve as : elasticity * [ ln ] ( demandCurveFunction(step) )\n     * @param step The step for which to calculate parameters value\n     * @return Parameter's value that will be summed for calculating total consumer's consumption\n     */\n    public float valueFor(int step) {\n        return valueFor((float) step);\n    }\n\n    /**\n     * Overrides the previous method if the input is a float number. Mostly used when the parameter is\n     * social and the input value is the sum of weights.\n     * Calculates parameter's value for the Demand Curve as :\n     * elasticity * [ ln ] (demandCurveFunction(weights) )\n     * @param x The step for which to calculate parameters value\n     * @return Parameter's value that will be summed for calculating total consumer's consumption\n     */\n    public float valueFor(float x) {\n        float temp = demandCurveFunction.valueFor(x);\n        if (temp > 0) {\n            if (ln.booleanValue()) {\n                this.value = new Float(elasticity.floatValue() * ((float) Math.log(temp)));\n            } else {\n                this.value = new Float(elasticity.floatValue() * temp);\n            }\n        } else {\n            log.error(\"FATAL ERROR: Parameter was zero\");\n        }\n        return value.floatValue();\n    }\n\n    public String toString() {\n        return \"Parameter\" + name + \" type: \" + demandCurveFunction.getFunctionName() + \"(elasticity: \" + elasticity + \" log: \" + ln + \" soc: \" + social;\n    }\n}\n",
		"id": "EvoSuiteBenchmark/10_water-simulator/src/main/java/simulator/util/ParameterAttributesTest2.java",
		"test_prompt": "// ParameterAttributesTest2.java\npackage simulator.util;\n\nimport java.io.Serializable;\nimport org.apache.log4j.Logger;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link ParameterAttributes}.\n* It contains ten unit test cases for the {@link ParameterAttributes#valueFor(float)} method.\n*/\nclass ParameterAttributesTest2 {"
	},
	{
		"original_code": "// Discrete.java\npackage simulator.util;\n\n/**\n * An implementation of a  discrete function.\n * @author Vartalas Panagiotis\n * @author Ioannis N. Athanasiadis\n * @version 1.9\n * @since 2003-2006\n */\npublic class Discrete extends Function {\n\n    private static final long serialVersionUID = -169005630854837068L;\n\n    private FunctionConstant period = new FunctionConstant(\"T\", true);\n\n    private FunctionConstant values = new FunctionConstant(\"Values\", false);\n\n    private Float[] v;\n\n    public Discrete() {\n        super(\"DISCRETE\", \" Y = { Xi } , i � {0,1, ... T} \");\n        this.setFunctionConstant(period);\n        this.setFunctionConstant(values);\n    }\n\n    public float valueFor(int x) {\n        // x --> stepId (starts from 1)\n        int k = (x - 1) % ((int) period.getConstantFValue());\n        return v[k].floatValue();\n    }\n\n    public float valueFor(float x) {\n        int k = ((int) x) % ((int) period.getConstantFValue());\n        return v[k].floatValue();\n    }\n\n    public boolean parseString(String inputs) {\n        v = new Float[(int) period.getConstantFValue()];\n        String temp = \"\";\n        char ch;\n        int j = 0;\n        try {\n            for (int i = 0; i < inputs.length(); i++) {\n                ch = inputs.charAt(i);\n                if (ch == ' ' || ch == ',') {\n                    if (!temp.equals(\"\")) {\n                        v[j] = new Float(temp);\n                        temp = \"\";\n                        j++;\n                    }\n                } else\n                    temp += ch;\n            }\n            v[j] = new Float(temp);\n        } catch (NullPointerException npe) {\n            return false;\n        }\n        if (j == (v.length - 1))\n            return true;\n        else\n            return false;\n    }\n}\n",
		"id": "EvoSuiteBenchmark/10_water-simulator/src/main/java/simulator/util/DiscreteTest0.java",
		"test_prompt": "// DiscreteTest0.java\npackage simulator.util;\n\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link Discrete}.\n* It contains ten unit test cases for the {@link Discrete#valueFor(int)} method.\n*/\nclass DiscreteTest0 {"
	},
	{
		"original_code": "// Discrete.java\npackage simulator.util;\n\n/**\n * An implementation of a  discrete function.\n * @author Vartalas Panagiotis\n * @author Ioannis N. Athanasiadis\n * @version 1.9\n * @since 2003-2006\n */\npublic class Discrete extends Function {\n\n    private static final long serialVersionUID = -169005630854837068L;\n\n    private FunctionConstant period = new FunctionConstant(\"T\", true);\n\n    private FunctionConstant values = new FunctionConstant(\"Values\", false);\n\n    private Float[] v;\n\n    public Discrete() {\n        super(\"DISCRETE\", \" Y = { Xi } , i � {0,1, ... T} \");\n        this.setFunctionConstant(period);\n        this.setFunctionConstant(values);\n    }\n\n    public float valueFor(int x) {\n        // x --> stepId (starts from 1)\n        int k = (x - 1) % ((int) period.getConstantFValue());\n        return v[k].floatValue();\n    }\n\n    public float valueFor(float x) {\n        int k = ((int) x) % ((int) period.getConstantFValue());\n        return v[k].floatValue();\n    }\n\n    public boolean parseString(String inputs) {\n        v = new Float[(int) period.getConstantFValue()];\n        String temp = \"\";\n        char ch;\n        int j = 0;\n        try {\n            for (int i = 0; i < inputs.length(); i++) {\n                ch = inputs.charAt(i);\n                if (ch == ' ' || ch == ',') {\n                    if (!temp.equals(\"\")) {\n                        v[j] = new Float(temp);\n                        temp = \"\";\n                        j++;\n                    }\n                } else\n                    temp += ch;\n            }\n            v[j] = new Float(temp);\n        } catch (NullPointerException npe) {\n            return false;\n        }\n        if (j == (v.length - 1))\n            return true;\n        else\n            return false;\n    }\n}\n",
		"id": "EvoSuiteBenchmark/10_water-simulator/src/main/java/simulator/util/DiscreteTest1.java",
		"test_prompt": "// DiscreteTest1.java\npackage simulator.util;\n\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link Discrete}.\n* It contains ten unit test cases for the {@link Discrete#valueFor(float)} method.\n*/\nclass DiscreteTest1 {"
	},
	{
		"original_code": "// Discrete.java\npackage simulator.util;\n\n/**\n * An implementation of a  discrete function.\n * @author Vartalas Panagiotis\n * @author Ioannis N. Athanasiadis\n * @version 1.9\n * @since 2003-2006\n */\npublic class Discrete extends Function {\n\n    private static final long serialVersionUID = -169005630854837068L;\n\n    private FunctionConstant period = new FunctionConstant(\"T\", true);\n\n    private FunctionConstant values = new FunctionConstant(\"Values\", false);\n\n    private Float[] v;\n\n    public Discrete() {\n        super(\"DISCRETE\", \" Y = { Xi } , i � {0,1, ... T} \");\n        this.setFunctionConstant(period);\n        this.setFunctionConstant(values);\n    }\n\n    public float valueFor(int x) {\n        // x --> stepId (starts from 1)\n        int k = (x - 1) % ((int) period.getConstantFValue());\n        return v[k].floatValue();\n    }\n\n    public float valueFor(float x) {\n        int k = ((int) x) % ((int) period.getConstantFValue());\n        return v[k].floatValue();\n    }\n\n    public boolean parseString(String inputs) {\n        v = new Float[(int) period.getConstantFValue()];\n        String temp = \"\";\n        char ch;\n        int j = 0;\n        try {\n            for (int i = 0; i < inputs.length(); i++) {\n                ch = inputs.charAt(i);\n                if (ch == ' ' || ch == ',') {\n                    if (!temp.equals(\"\")) {\n                        v[j] = new Float(temp);\n                        temp = \"\";\n                        j++;\n                    }\n                } else\n                    temp += ch;\n            }\n            v[j] = new Float(temp);\n        } catch (NullPointerException npe) {\n            return false;\n        }\n        if (j == (v.length - 1))\n            return true;\n        else\n            return false;\n    }\n}\n",
		"id": "EvoSuiteBenchmark/10_water-simulator/src/main/java/simulator/util/DiscreteTest2.java",
		"test_prompt": "// DiscreteTest2.java\npackage simulator.util;\n\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link Discrete}.\n* It contains ten unit test cases for the {@link Discrete#parseString(String)} method.\n*/\nclass DiscreteTest2 {"
	},
	{
		"original_code": "// MetDataFunction.java\npackage simulator.util;\n\n/**\n * A Function implementation that returns the content of the meteorological data\n * @author Vartalas Panagiotis\n * @author Ioannis N. Athanasiadis\n * @version 1.9\n * @since 2003-2006\n */\npublic class MetDataFunction extends Function {\n\n    private static final long serialVersionUID = -2320692789743826748L;\n\n    private FunctionConstant a = new FunctionConstant(\"a\", true);\n\n    public MetDataFunction() {\n        super(\"MetDATA\", \" Y = a * (MetData) \");\n        this.setFunctionConstant(a);\n        this.a.setConstantValue(1);\n    }\n\n    public float valueFor(int x) {\n        float y = (a.getConstantFValue() * x);\n        return y;\n    }\n\n    public float valueFor(float x) {\n        float y = (a.getConstantFValue() * x);\n        return y;\n    }\n\n    public boolean parseString(String inputs) {\n        return true;\n    }\n}\n",
		"id": "EvoSuiteBenchmark/10_water-simulator/src/main/java/simulator/util/MetDataFunctionTest0.java",
		"test_prompt": "// MetDataFunctionTest0.java\npackage simulator.util;\n\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link MetDataFunction}.\n* It contains ten unit test cases for the {@link MetDataFunction#valueFor(int)} method.\n*/\nclass MetDataFunctionTest0 {"
	},
	{
		"original_code": "// MetDataFunction.java\npackage simulator.util;\n\n/**\n * A Function implementation that returns the content of the meteorological data\n * @author Vartalas Panagiotis\n * @author Ioannis N. Athanasiadis\n * @version 1.9\n * @since 2003-2006\n */\npublic class MetDataFunction extends Function {\n\n    private static final long serialVersionUID = -2320692789743826748L;\n\n    private FunctionConstant a = new FunctionConstant(\"a\", true);\n\n    public MetDataFunction() {\n        super(\"MetDATA\", \" Y = a * (MetData) \");\n        this.setFunctionConstant(a);\n        this.a.setConstantValue(1);\n    }\n\n    public float valueFor(int x) {\n        float y = (a.getConstantFValue() * x);\n        return y;\n    }\n\n    public float valueFor(float x) {\n        float y = (a.getConstantFValue() * x);\n        return y;\n    }\n\n    public boolean parseString(String inputs) {\n        return true;\n    }\n}\n",
		"id": "EvoSuiteBenchmark/10_water-simulator/src/main/java/simulator/util/MetDataFunctionTest1.java",
		"test_prompt": "// MetDataFunctionTest1.java\npackage simulator.util;\n\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link MetDataFunction}.\n* It contains ten unit test cases for the {@link MetDataFunction#valueFor(float)} method.\n*/\nclass MetDataFunctionTest1 {"
	},
	{
		"original_code": "// MetDataFunction.java\npackage simulator.util;\n\n/**\n * A Function implementation that returns the content of the meteorological data\n * @author Vartalas Panagiotis\n * @author Ioannis N. Athanasiadis\n * @version 1.9\n * @since 2003-2006\n */\npublic class MetDataFunction extends Function {\n\n    private static final long serialVersionUID = -2320692789743826748L;\n\n    private FunctionConstant a = new FunctionConstant(\"a\", true);\n\n    public MetDataFunction() {\n        super(\"MetDATA\", \" Y = a * (MetData) \");\n        this.setFunctionConstant(a);\n        this.a.setConstantValue(1);\n    }\n\n    public float valueFor(int x) {\n        float y = (a.getConstantFValue() * x);\n        return y;\n    }\n\n    public float valueFor(float x) {\n        float y = (a.getConstantFValue() * x);\n        return y;\n    }\n\n    public boolean parseString(String inputs) {\n        return true;\n    }\n}\n",
		"id": "EvoSuiteBenchmark/10_water-simulator/src/main/java/simulator/util/MetDataFunctionTest2.java",
		"test_prompt": "// MetDataFunctionTest2.java\npackage simulator.util;\n\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link MetDataFunction}.\n* It contains ten unit test cases for the {@link MetDataFunction#parseString(String)} method.\n*/\nclass MetDataFunctionTest2 {"
	},
	{
		"original_code": "// Random.java\npackage simulator.util;\n\n/**\n * A random number generator implemented as Function type\n * @author Vartalas Panagiotis\n * @author Ioannis N. Athanasiadis\n * @version 1.9\n * @since 2003-2006\n */\npublic class Random extends Function {\n\n    private static final long serialVersionUID = 5561984714827868505L;\n\n    private FunctionConstant min = new FunctionConstant(\"min\", true);\n\n    private FunctionConstant max = new FunctionConstant(\"max\", true);\n\n    private boolean fORi = false;\n\n    public Random() {\n        super(\"RANDOM\", \" min  < Y < max \");\n        this.setFunctionConstant(min);\n        this.setFunctionConstant(max);\n    }\n\n    public Random(float min, float max) {\n        super(\"RANDOM\", \" min  < Y < max \");\n        this.min.setConstantValue(min);\n        this.setFunctionConstant(this.min);\n        this.max.setConstantValue(max);\n        this.setFunctionConstant(this.max);\n    }\n\n    public float valueFor(int x) {\n        if (fORi)\n            return valueFor((float) 1.);\n        // number Generator\n        java.util.Random gen = new java.util.Random();\n        boolean out = false;\n        int y = 0;\n        if (max.getConstantFValue() > min.getConstantFValue()) {\n            while (!out) {\n                y = gen.nextInt((int) max.getConstantFValue());\n                if (y > min.getConstantFValue())\n                    out = true;\n            }\n        }\n        return (float) y;\n    }\n\n    public float valueFor(float x) {\n        // number Generator\n        java.util.Random gen = new java.util.Random();\n        boolean out = false;\n        float y = 0;\n        if (max.getConstantFValue() > min.getConstantFValue()) {\n            while (!out) {\n                y = (gen.nextFloat() * max.getConstantFValue());\n                if (y > min.getConstantFValue())\n                    out = true;\n            }\n        }\n        return y;\n    }\n\n    public boolean parseString(String inputs) {\n        return true;\n    }\n\n    public void setFloat() {\n        this.fORi = true;\n    }\n}\n",
		"id": "EvoSuiteBenchmark/10_water-simulator/src/main/java/simulator/util/RandomTest0.java",
		"test_prompt": "// RandomTest0.java\npackage simulator.util;\n\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link Random}.\n* It contains ten unit test cases for the {@link Random#valueFor(int)} method.\n*/\nclass RandomTest0 {"
	},
	{
		"original_code": "// Random.java\npackage simulator.util;\n\n/**\n * A random number generator implemented as Function type\n * @author Vartalas Panagiotis\n * @author Ioannis N. Athanasiadis\n * @version 1.9\n * @since 2003-2006\n */\npublic class Random extends Function {\n\n    private static final long serialVersionUID = 5561984714827868505L;\n\n    private FunctionConstant min = new FunctionConstant(\"min\", true);\n\n    private FunctionConstant max = new FunctionConstant(\"max\", true);\n\n    private boolean fORi = false;\n\n    public Random() {\n        super(\"RANDOM\", \" min  < Y < max \");\n        this.setFunctionConstant(min);\n        this.setFunctionConstant(max);\n    }\n\n    public Random(float min, float max) {\n        super(\"RANDOM\", \" min  < Y < max \");\n        this.min.setConstantValue(min);\n        this.setFunctionConstant(this.min);\n        this.max.setConstantValue(max);\n        this.setFunctionConstant(this.max);\n    }\n\n    public float valueFor(int x) {\n        if (fORi)\n            return valueFor((float) 1.);\n        // number Generator\n        java.util.Random gen = new java.util.Random();\n        boolean out = false;\n        int y = 0;\n        if (max.getConstantFValue() > min.getConstantFValue()) {\n            while (!out) {\n                y = gen.nextInt((int) max.getConstantFValue());\n                if (y > min.getConstantFValue())\n                    out = true;\n            }\n        }\n        return (float) y;\n    }\n\n    public float valueFor(float x) {\n        // number Generator\n        java.util.Random gen = new java.util.Random();\n        boolean out = false;\n        float y = 0;\n        if (max.getConstantFValue() > min.getConstantFValue()) {\n            while (!out) {\n                y = (gen.nextFloat() * max.getConstantFValue());\n                if (y > min.getConstantFValue())\n                    out = true;\n            }\n        }\n        return y;\n    }\n\n    public boolean parseString(String inputs) {\n        return true;\n    }\n\n    public void setFloat() {\n        this.fORi = true;\n    }\n}\n",
		"id": "EvoSuiteBenchmark/10_water-simulator/src/main/java/simulator/util/RandomTest1.java",
		"test_prompt": "// RandomTest1.java\npackage simulator.util;\n\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link Random}.\n* It contains ten unit test cases for the {@link Random#valueFor(float)} method.\n*/\nclass RandomTest1 {"
	},
	{
		"original_code": "// Random.java\npackage simulator.util;\n\n/**\n * A random number generator implemented as Function type\n * @author Vartalas Panagiotis\n * @author Ioannis N. Athanasiadis\n * @version 1.9\n * @since 2003-2006\n */\npublic class Random extends Function {\n\n    private static final long serialVersionUID = 5561984714827868505L;\n\n    private FunctionConstant min = new FunctionConstant(\"min\", true);\n\n    private FunctionConstant max = new FunctionConstant(\"max\", true);\n\n    private boolean fORi = false;\n\n    public Random() {\n        super(\"RANDOM\", \" min  < Y < max \");\n        this.setFunctionConstant(min);\n        this.setFunctionConstant(max);\n    }\n\n    public Random(float min, float max) {\n        super(\"RANDOM\", \" min  < Y < max \");\n        this.min.setConstantValue(min);\n        this.setFunctionConstant(this.min);\n        this.max.setConstantValue(max);\n        this.setFunctionConstant(this.max);\n    }\n\n    public float valueFor(int x) {\n        if (fORi)\n            return valueFor((float) 1.);\n        // number Generator\n        java.util.Random gen = new java.util.Random();\n        boolean out = false;\n        int y = 0;\n        if (max.getConstantFValue() > min.getConstantFValue()) {\n            while (!out) {\n                y = gen.nextInt((int) max.getConstantFValue());\n                if (y > min.getConstantFValue())\n                    out = true;\n            }\n        }\n        return (float) y;\n    }\n\n    public float valueFor(float x) {\n        // number Generator\n        java.util.Random gen = new java.util.Random();\n        boolean out = false;\n        float y = 0;\n        if (max.getConstantFValue() > min.getConstantFValue()) {\n            while (!out) {\n                y = (gen.nextFloat() * max.getConstantFValue());\n                if (y > min.getConstantFValue())\n                    out = true;\n            }\n        }\n        return y;\n    }\n\n    public boolean parseString(String inputs) {\n        return true;\n    }\n\n    public void setFloat() {\n        this.fORi = true;\n    }\n}\n",
		"id": "EvoSuiteBenchmark/10_water-simulator/src/main/java/simulator/util/RandomTest2.java",
		"test_prompt": "// RandomTest2.java\npackage simulator.util;\n\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link Random}.\n* It contains ten unit test cases for the {@link Random#parseString(String)} method.\n*/\nclass RandomTest2 {"
	},
	{
		"original_code": "// Raise.java\npackage simulator.util;\n\n/**\n * An exponential function implemented as Function type\n * @author Vartalas Panagiotis\n * @author Ioannis N. Athanasiadis\n * @version 1.9\n * @since 2003-2006\n */\npublic class Raise extends Function {\n\n    private static final long serialVersionUID = -7852793195233992557L;\n\n    private FunctionConstant a = new FunctionConstant(\"a\", true);\n\n    private FunctionConstant n = new FunctionConstant(\"n\", true);\n\n    public Raise() {\n        super(\"LN-RAISE\", \" Y = a [ln(X)]^n \");\n        this.setFunctionConstant(a);\n        this.setFunctionConstant(n);\n    }\n\n    public float valueFor(int x) {\n        double init = Math.log((double) x);\n        double power = init;\n        for (int i = 1; i < ((int) n.getConstantFValue()); i++) power = power * init;\n        return (a.getConstantFValue() * (float) power);\n    }\n\n    public float valueFor(float x) {\n        float init = (float) Math.log((double) x);\n        float power = init;\n        for (int i = 1; i < ((int) n.getConstantFValue()); i++) power = power * init;\n        return (a.getConstantFValue() * power);\n    }\n\n    public boolean parseString(String inputs) {\n        return true;\n    }\n}\n",
		"id": "EvoSuiteBenchmark/10_water-simulator/src/main/java/simulator/util/RaiseTest0.java",
		"test_prompt": "// RaiseTest0.java\npackage simulator.util;\n\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link Raise}.\n* It contains ten unit test cases for the {@link Raise#valueFor(int)} method.\n*/\nclass RaiseTest0 {"
	},
	{
		"original_code": "// Raise.java\npackage simulator.util;\n\n/**\n * An exponential function implemented as Function type\n * @author Vartalas Panagiotis\n * @author Ioannis N. Athanasiadis\n * @version 1.9\n * @since 2003-2006\n */\npublic class Raise extends Function {\n\n    private static final long serialVersionUID = -7852793195233992557L;\n\n    private FunctionConstant a = new FunctionConstant(\"a\", true);\n\n    private FunctionConstant n = new FunctionConstant(\"n\", true);\n\n    public Raise() {\n        super(\"LN-RAISE\", \" Y = a [ln(X)]^n \");\n        this.setFunctionConstant(a);\n        this.setFunctionConstant(n);\n    }\n\n    public float valueFor(int x) {\n        double init = Math.log((double) x);\n        double power = init;\n        for (int i = 1; i < ((int) n.getConstantFValue()); i++) power = power * init;\n        return (a.getConstantFValue() * (float) power);\n    }\n\n    public float valueFor(float x) {\n        float init = (float) Math.log((double) x);\n        float power = init;\n        for (int i = 1; i < ((int) n.getConstantFValue()); i++) power = power * init;\n        return (a.getConstantFValue() * power);\n    }\n\n    public boolean parseString(String inputs) {\n        return true;\n    }\n}\n",
		"id": "EvoSuiteBenchmark/10_water-simulator/src/main/java/simulator/util/RaiseTest1.java",
		"test_prompt": "// RaiseTest1.java\npackage simulator.util;\n\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link Raise}.\n* It contains ten unit test cases for the {@link Raise#valueFor(float)} method.\n*/\nclass RaiseTest1 {"
	},
	{
		"original_code": "// Raise.java\npackage simulator.util;\n\n/**\n * An exponential function implemented as Function type\n * @author Vartalas Panagiotis\n * @author Ioannis N. Athanasiadis\n * @version 1.9\n * @since 2003-2006\n */\npublic class Raise extends Function {\n\n    private static final long serialVersionUID = -7852793195233992557L;\n\n    private FunctionConstant a = new FunctionConstant(\"a\", true);\n\n    private FunctionConstant n = new FunctionConstant(\"n\", true);\n\n    public Raise() {\n        super(\"LN-RAISE\", \" Y = a [ln(X)]^n \");\n        this.setFunctionConstant(a);\n        this.setFunctionConstant(n);\n    }\n\n    public float valueFor(int x) {\n        double init = Math.log((double) x);\n        double power = init;\n        for (int i = 1; i < ((int) n.getConstantFValue()); i++) power = power * init;\n        return (a.getConstantFValue() * (float) power);\n    }\n\n    public float valueFor(float x) {\n        float init = (float) Math.log((double) x);\n        float power = init;\n        for (int i = 1; i < ((int) n.getConstantFValue()); i++) power = power * init;\n        return (a.getConstantFValue() * power);\n    }\n\n    public boolean parseString(String inputs) {\n        return true;\n    }\n}\n",
		"id": "EvoSuiteBenchmark/10_water-simulator/src/main/java/simulator/util/RaiseTest2.java",
		"test_prompt": "// RaiseTest2.java\npackage simulator.util;\n\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link Raise}.\n* It contains ten unit test cases for the {@link Raise#parseString(String)} method.\n*/\nclass RaiseTest2 {"
	},
	{
		"original_code": "// Function.java\npackage simulator.util;\n\nimport java.util.Vector;\nimport java.util.Iterator;\nimport java.io.Serializable;\n\n/**\n * An abstract class that defines the basic attributes of a function object.\n * Every implementation of a function must extend this class. A Fuction has a name,a representation\n * and a set of constants. The abstract methods are : valueFor(int step), valueFor(float x)\n * and parseString(String inputs) </p>\n *\n * @author Vartalas Panagiotis\n * @author Ioannis N. Athanasiadis\n * @version 1.9\n * @since 2003-2006\n */\npublic abstract class Function implements Serializable {\n\n    private String functionName;\n\n    private String functionRepresentation;\n\n    private Vector functionConstants = new Vector();\n\n    /**\n     * Constructor\n     */\n    public Function() {\n    }\n\n    /**\n     * Constructor\n     * @param name Function name\n     * @param representation A string to give a short description of the Function eg Y = aX + b.\n     * Used in GUI\n     */\n    public Function(String name, String representation) {\n        this.functionName = name;\n        this.functionRepresentation = representation;\n    }\n\n    /**\n     * @param name\n     */\n    public void setFunctionName(String name) {\n        this.functionName = name;\n    }\n\n    /**\n     * @return\n     */\n    public String getFunctionName() {\n        return this.functionName;\n    }\n\n    /**\n     * @param r\n     */\n    public void setFunctionRepresentation(String r) {\n        this.functionRepresentation = r;\n    }\n\n    /**\n     * @return\n     */\n    public String getFunctionRepresentation() {\n        return this.functionRepresentation;\n    }\n\n    /**\n     * @param fc\n     */\n    @SuppressWarnings(\"unchecked\")\n    protected void setFunctionConstant(FunctionConstant fc) {\n        this.functionConstants.addElement(fc);\n    }\n\n    /**\n     * simulator\n     *  @param v\n     */\n    public void setFunctionConstants(Vector v) {\n        this.functionConstants = v;\n    }\n\n    /**\n     * @return An iterator of this function's constants\n     */\n    public Iterator getFunctionConstants() {\n        return this.functionConstants.iterator();\n    }\n\n    /**\n     * @return The number of constants\n     */\n    public int constantsNumber() {\n        return functionConstants.size();\n    }\n\n    /**\n     * It must be implemented by a child class so as for every input X (int x) to return a value Y.\n     * X could be the stepId.\n     * @param x\n     * @return\n     */\n    abstract public float valueFor(int x);\n\n    /**\n     * It must be implemented by a child class so as for every input X (float x) to return a value Y.\n     * X could be weights' sum when this Function used for socialization.\n     * @param x\n     * @return\n     */\n    abstract public float valueFor(float x);\n\n    /**\n     * It must be implemented by a child class when a Function has to check if the String read from GUI\n     * has the appropriate format.\n     * @param inputs\n     * @return\n     */\n    abstract public boolean parseString(String inputs);\n\n    /**\n     * <p>Title: FunctionConstant</p>\n     * <p>Description: A class to hold the basic attributes of a Function Constant:\n     * A name, a float value and a string value. </p>\n     * <p>Copyright: Copyright (c) 2003</p>\n     * <p>Company: </p>\n     * @author Vartalas Panagiotis\n     * @version 1.0\n     */\n    public class FunctionConstant implements java.io.Serializable {\n\n        private static final long serialVersionUID = 8666992235285732337L;\n\n        private String constantName;\n\n        private Float constantFValue;\n\n        private String constantSValue;\n\n        private Boolean FSValue;\n\n        /**\n         * Constructor\n         */\n        public FunctionConstant() {\n        }\n\n        /**\n         * Constructor\n         * @param name Function constant name\n         * @param fsvalue A boolean value to define if the constant value is a String or a float.\n         * true for float\n         */\n        protected FunctionConstant(String name, boolean fsvalue) {\n            this.constantName = name;\n            this.FSValue = new Boolean(fsvalue);\n        }\n\n        /**\n         * @return true if the constant value is a float\n         */\n        public boolean asFloat() {\n            return FSValue.booleanValue();\n        }\n\n        /**\n         * @param name\n         */\n        protected void setConstantName(String name) {\n            this.constantName = name;\n        }\n\n        /**\n         * @return\n         */\n        public String getConstantName() {\n            return this.constantName;\n        }\n\n        /**\n         * @param value\n         * @return\n         */\n        public boolean setConstantValue(float value) {\n            this.constantFValue = new Float(value);\n            return true;\n        }\n\n        /**\n         * @return\n         */\n        public float getConstantFValue() {\n            return this.constantFValue.floatValue();\n        }\n\n        /**\n         * For Overriding\n         */\n        public boolean setConstantValue(String value) {\n            this.constantSValue = value;\n            return parseString(value);\n        }\n\n        /**\n         * @return\n         */\n        public String getConstantSValue() {\n            return this.constantSValue;\n        }\n    }\n}\n",
		"id": "EvoSuiteBenchmark/10_water-simulator/src/main/java/simulator/util/FunctionTest.java",
		"test_prompt": "// FunctionTest.java\npackage simulator.util;\n\nimport java.util.Vector;\nimport java.util.Iterator;\nimport java.io.Serializable;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link Function}.\n* It contains ten unit test cases for the {@link Function#constantsNumber()} method.\n*/\nclass FunctionTest {"
	},
	{
		"original_code": "// WDS_Ontology.java\n// file: WDS_Ontology.java generated by ontology bean generator\r\npackage simulator.ontology;\r\n\r\nimport jade.content.onto.*;\r\nimport jade.content.schema.*;\r\n\r\n/**\r\n * file: WDS_Ontology.java\r\n * @author ontology bean generator\r\n * @author Ioannis N. Athanasiadis\r\n * @version Oct 2003 - 2006\r\n */\r\npublic class WDS_Ontology extends Ontology {\r\n\r\n    //NAME\r\n    public static final String ONTOLOGY_NAME = \"WDS_Ontology\";\r\n\r\n    private static WDS_Ontology theInstance = new WDS_Ontology(ACLOntology.getInstance());\r\n\r\n    public static WDS_Ontology getInstance() {\r\n        return theInstance;\r\n    }\r\n\r\n    //VOCABULARY\r\n    public static final String PARAMETER = \"Parameter\";\r\n\r\n    public static final String PARAMETER_WEIGHT = \"weight\";\r\n\r\n    public static final String PARAMETER_NAME = \"name\";\r\n\r\n    public static final String SAVEPERSONALDATA = \"SavePersonalData\";\r\n\r\n    public static final String SAVEPERSONALDATA_TODIRECTORY = \"toDirectory\";\r\n\r\n    public static final String LAUNCHGUI = \"LaunchGUI\";\r\n\r\n    public static final String SAVINGPATH = \"SavingPath\";\r\n\r\n    public static final String SAVINGPATH_DIRECTORY = \"directory\";\r\n\r\n    public static final String START = \"Start\";\r\n\r\n    public static final String START_SIMULATIONSTEP = \"simulationStep\";\r\n\r\n    public static final String METDATA = \"MetData\";\r\n\r\n    public static final String METDATA_RAINFALL = \"rainfall\";\r\n\r\n    public static final String METDATA_TEMPERATURE = \"temperature\";\r\n\r\n    public static final String STEPATTR = \"StepAttr\";\r\n\r\n    public static final String STEPATTR_ID = \"id\";\r\n\r\n    public static final String WATERCONSUMPTION = \"WaterConsumption\";\r\n\r\n    public static final String WATERCONSUMPTION_QUANTITY = \"quantity\";\r\n\r\n    public static final String PRICEBLOCK = \"PriceBlock\";\r\n\r\n    public static final String PRICEBLOCK_PRICE = \"price\";\r\n\r\n    public static final String PRICEBLOCK_NO = \"no\";\r\n\r\n    public static final String PRICEBLOCK_LIMITUP = \"limitUp\";\r\n\r\n    public static final String PRICEBLOCK_LIMITDOWN = \"limitDown\";\r\n\r\n    public static final String CONSUMES = \"Consumes\";\r\n\r\n    public static final String CONSUMES_PERSONALCONSUMPTION = \"personalConsumption\";\r\n\r\n    public static final String CONSUMES_METEODATA = \"meteoData\";\r\n\r\n    public static final String CONSUMES_PRICINGSCALE = \"pricingScale\";\r\n\r\n    public static final String CONSUMES_STEP2 = \"step2\";\r\n\r\n    public static final String ASKWEIGHTSFOR = \"AskWeightsFor\";\r\n\r\n    public static final String ASKWEIGHTSFOR_PARAMETERS = \"parameters\";\r\n\r\n    public static final String ASKWEIGHTSFOR_STEP3 = \"step3\";\r\n\r\n    public static final String STEPTOTALCONSUMPTION = \"StepTotalConsumption\";\r\n\r\n    public static final String STEPTOTALCONSUMPTION_STEPCONSUMPTION = \"stepConsumption\";\r\n\r\n    public static final String STEPTOTALCONSUMPTION_WATERPRICE = \"waterPrice\";\r\n\r\n    public static final String STEPTOTALCONSUMPTION_STEP4 = \"step4\";\r\n\r\n    public static final String HASMETDATA = \"HasMetData\";\r\n\r\n    public static final String HASMETDATA_STEP1 = \"step1\";\r\n\r\n    public static final String HASMETDATA_DATA = \"data\";\r\n\r\n    /**\r\n     * Constructor\r\n     */\r\n    private WDS_Ontology(Ontology base) {\r\n        super(ONTOLOGY_NAME, base);\r\n        try {\r\n            // adding Concept(s)\r\n            ConceptSchema parameterSchema = new ConceptSchema(PARAMETER);\r\n            add(parameterSchema, Parameter.class);\r\n            ConceptSchema savePersonalDataSchema = new ConceptSchema(SAVEPERSONALDATA);\r\n            add(savePersonalDataSchema, SavePersonalData.class);\r\n            ConceptSchema launchGUISchema = new ConceptSchema(LAUNCHGUI);\r\n            add(launchGUISchema, LaunchGUI.class);\r\n            ConceptSchema savingPathSchema = new ConceptSchema(SAVINGPATH);\r\n            add(savingPathSchema, SavingPath.class);\r\n            ConceptSchema startSchema = new ConceptSchema(START);\r\n            add(startSchema, Start.class);\r\n            ConceptSchema metDataSchema = new ConceptSchema(METDATA);\r\n            add(metDataSchema, MetData.class);\r\n            ConceptSchema stepAttrSchema = new ConceptSchema(STEPATTR);\r\n            add(stepAttrSchema, StepAttr.class);\r\n            ConceptSchema waterConsumptionSchema = new ConceptSchema(WATERCONSUMPTION);\r\n            add(waterConsumptionSchema, WaterConsumption.class);\r\n            ConceptSchema priceBlockSchema = new ConceptSchema(PRICEBLOCK);\r\n            add(priceBlockSchema, PriceBlock.class);\r\n            // adding Predicate(s)\r\n            PredicateSchema consumesSchema = new PredicateSchema(CONSUMES);\r\n            add(consumesSchema, Consumes.class);\r\n            PredicateSchema askWeightsForSchema = new PredicateSchema(ASKWEIGHTSFOR);\r\n            add(askWeightsForSchema, AskWeightsFor.class);\r\n            PredicateSchema stepTotalConsumptionSchema = new PredicateSchema(STEPTOTALCONSUMPTION);\r\n            add(stepTotalConsumptionSchema, StepTotalConsumption.class);\r\n            PredicateSchema hasMetDataSchema = new PredicateSchema(HASMETDATA);\r\n            add(hasMetDataSchema, HasMetData.class);\r\n            parameterSchema.add(PARAMETER_WEIGHT, (TermSchema) getSchema(BasicOntology.FLOAT), ObjectSchema.OPTIONAL);\r\n            // facets of weight:\r\n            parameterSchema.add(PARAMETER_NAME, (TermSchema) getSchema(BasicOntology.STRING), ObjectSchema.OPTIONAL);\r\n            // facets of name:\r\n            savePersonalDataSchema.add(SAVEPERSONALDATA_TODIRECTORY, savingPathSchema, ObjectSchema.OPTIONAL);\r\n            // facets of toDirectory: MinimumCardinality 1,MaximumCardinality 1, getAllowedClses: Cls(SavingPath), , getAllowedParents: Cls(SavingPath), , getAllowedValues: Cls(SavingPath),\r\n            savingPathSchema.add(SAVINGPATH_DIRECTORY, (TermSchema) getSchema(BasicOntology.STRING), ObjectSchema.OPTIONAL);\r\n            // facets of directory:\r\n            startSchema.add(START_SIMULATIONSTEP, stepAttrSchema, ObjectSchema.OPTIONAL);\r\n            // facets of simulationStep: MinimumCardinality 1,MaximumCardinality 1, getAllowedClses: Cls(StepAttr), , getAllowedParents: Cls(StepAttr), , getAllowedValues: Cls(StepAttr),\r\n            metDataSchema.add(METDATA_RAINFALL, (TermSchema) getSchema(BasicOntology.FLOAT), ObjectSchema.OPTIONAL);\r\n            // facets of rainfall:\r\n            metDataSchema.add(METDATA_TEMPERATURE, (TermSchema) getSchema(BasicOntology.FLOAT), ObjectSchema.OPTIONAL);\r\n            // facets of temperature:\r\n            stepAttrSchema.add(STEPATTR_ID, (TermSchema) getSchema(BasicOntology.INTEGER), ObjectSchema.OPTIONAL);\r\n            // facets of id:\r\n            waterConsumptionSchema.add(WATERCONSUMPTION_QUANTITY, (TermSchema) getSchema(BasicOntology.FLOAT), ObjectSchema.OPTIONAL);\r\n            // facets of quantity:\r\n            priceBlockSchema.add(PRICEBLOCK_PRICE, (TermSchema) getSchema(BasicOntology.FLOAT), ObjectSchema.OPTIONAL);\r\n            // facets of price:\r\n            priceBlockSchema.add(PRICEBLOCK_NO, (TermSchema) getSchema(BasicOntology.INTEGER), ObjectSchema.OPTIONAL);\r\n            // facets of no:\r\n            priceBlockSchema.add(PRICEBLOCK_LIMITUP, (TermSchema) getSchema(BasicOntology.INTEGER), ObjectSchema.OPTIONAL);\r\n            // facets of limitUp:\r\n            priceBlockSchema.add(PRICEBLOCK_LIMITDOWN, (TermSchema) getSchema(BasicOntology.INTEGER), ObjectSchema.OPTIONAL);\r\n            // facets of limitDown:\r\n            consumesSchema.add(CONSUMES_PERSONALCONSUMPTION, waterConsumptionSchema, ObjectSchema.OPTIONAL);\r\n            // facets of personalConsumption: MaximumCardinality 1, getAllowedClses: Cls(WaterConsumption), , getAllowedParents: Cls(WaterConsumption), , getAllowedValues: Cls(WaterConsumption),\r\n            consumesSchema.add(CONSUMES_METEODATA, metDataSchema, ObjectSchema.OPTIONAL);\r\n            // facets of meteoData: MinimumCardinality 1,MaximumCardinality 1, getAllowedClses: Cls(MetData), , getAllowedParents: Cls(MetData), , getAllowedValues: Cls(MetData),\r\n            consumesSchema.add(CONSUMES_PRICINGSCALE, (AggregateSchema) getSchema(BasicOntology.SET), ObjectSchema.OPTIONAL);\r\n            // facets of pricingScale: MinimumCardinality 1,getAllowedClses: Cls(PriceBlock), , getAllowedParents: Cls(PriceBlock), , getAllowedValues: Cls(PriceBlock),\r\n            consumesSchema.add(CONSUMES_STEP2, stepAttrSchema, ObjectSchema.OPTIONAL);\r\n            // facets of step2: MinimumCardinality 1,MaximumCardinality 1, getAllowedClses: Cls(StepAttr), , getAllowedParents: Cls(StepAttr), , getAllowedValues: Cls(StepAttr),\r\n            askWeightsForSchema.add(ASKWEIGHTSFOR_PARAMETERS, (AggregateSchema) getSchema(BasicOntology.SET), ObjectSchema.OPTIONAL);\r\n            // facets of parameters: getAllowedClses: Cls(Parameter), , getAllowedParents: Cls(Parameter), , getAllowedValues: Cls(Parameter),\r\n            askWeightsForSchema.add(ASKWEIGHTSFOR_STEP3, stepAttrSchema, ObjectSchema.OPTIONAL);\r\n            // facets of step3: MinimumCardinality 1,MaximumCardinality 1, getAllowedClses: Cls(StepAttr), , getAllowedParents: Cls(StepAttr), , getAllowedValues: Cls(StepAttr),\r\n            stepTotalConsumptionSchema.add(STEPTOTALCONSUMPTION_STEPCONSUMPTION, waterConsumptionSchema, ObjectSchema.OPTIONAL);\r\n            // facets of stepConsumption: MinimumCardinality 1,MaximumCardinality 1, getAllowedClses: Cls(WaterConsumption), , getAllowedParents: Cls(WaterConsumption), , getAllowedValues: Cls(WaterConsumption),\r\n            stepTotalConsumptionSchema.add(STEPTOTALCONSUMPTION_WATERPRICE, (AggregateSchema) getSchema(BasicOntology.SET), ObjectSchema.OPTIONAL);\r\n            // facets of waterPrice: MinimumCardinality 1,getAllowedClses: Cls(PriceBlock), , getAllowedParents: Cls(PriceBlock), , getAllowedValues: Cls(PriceBlock),\r\n            stepTotalConsumptionSchema.add(STEPTOTALCONSUMPTION_STEP4, stepAttrSchema, ObjectSchema.OPTIONAL);\r\n            // facets of step4: MinimumCardinality 1,MaximumCardinality 1, getAllowedClses: Cls(StepAttr), , getAllowedParents: Cls(StepAttr), , getAllowedValues: Cls(StepAttr),\r\n            hasMetDataSchema.add(HASMETDATA_STEP1, stepAttrSchema, ObjectSchema.OPTIONAL);\r\n            // facets of step1: MinimumCardinality 1,MaximumCardinality 1, getAllowedClses: Cls(StepAttr), , getAllowedParents: Cls(StepAttr), , getAllowedValues: Cls(StepAttr),\r\n            hasMetDataSchema.add(HASMETDATA_DATA, metDataSchema, ObjectSchema.OPTIONAL);\r\n            // facets of data: MaximumCardinality 1, getAllowedClses: Cls(MetData), , getAllowedParents: Cls(MetData), , getAllowedValues: Cls(MetData),\r\n        } catch (Exception e) {\r\n            e.printStackTrace();\r\n        }\r\n    }\r\n}\r\n",
		"id": "EvoSuiteBenchmark/10_water-simulator/src/main/java/simulator/ontology/WDS_OntologyTest.java",
		"test_prompt": "// WDS_OntologyTest.java\npackage simulator.ontology;\n\nimport jade.content.onto.*;\nimport jade.content.schema.*;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link WDS_Ontology}.\n* It contains ten unit test cases for the {@link WDS_Ontology#getInstance()} method.\n*/\nclass WDS_OntologyTest {"
	},
	{
		"original_code": "// StepTotalConsumption.java\npackage simulator.ontology;\r\n\r\nimport jade.content.Predicate;\r\nimport jade.util.leap.ArrayList;\r\nimport jade.util.leap.Iterator;\r\nimport jade.util.leap.List;\r\n\r\n/**\r\n * file: StepTotalConsumption.java\r\n * @author ontology bean generator\r\n * @version 2003/08/12\r\n */\r\npublic class StepTotalConsumption implements Predicate {\r\n\r\n    // WaterConsumption stepConsumption\r\n    private WaterConsumption stepConsumption;\r\n\r\n    public void setStepConsumption(WaterConsumption s) {\r\n        this.stepConsumption = s;\r\n    }\r\n\r\n    public WaterConsumption getStepConsumption() {\r\n        return this.stepConsumption;\r\n    }\r\n\r\n    // StepAttr step4\r\n    private StepAttr step4;\r\n\r\n    public void setStep4(StepAttr s) {\r\n        this.step4 = s;\r\n    }\r\n\r\n    public StepAttr getStep4() {\r\n        return this.step4;\r\n    }\r\n\r\n    //  Collection  waterPrice\r\n    private List waterPrice = new ArrayList();\r\n\r\n    public void addWaterPrice(PriceBlock o) {\r\n        waterPrice.add(o);\r\n    }\r\n\r\n    public boolean removeWaterPrice(PriceBlock o) {\r\n        return waterPrice.remove(o);\r\n    }\r\n\r\n    public void clearAllWaterPrice() {\r\n        waterPrice.clear();\r\n    }\r\n\r\n    public Iterator getAllWaterPrice() {\r\n        return waterPrice.iterator();\r\n    }\r\n\r\n    public List getWaterPrice() {\r\n        return waterPrice;\r\n    }\r\n\r\n    public void setWaterPrice(List l) {\r\n        waterPrice = l;\r\n    }\r\n}\r\n",
		"id": "EvoSuiteBenchmark/10_water-simulator/src/main/java/simulator/ontology/StepTotalConsumptionTest.java",
		"test_prompt": "// StepTotalConsumptionTest.java\npackage simulator.ontology;\n\nimport jade.content.Predicate;\nimport jade.util.leap.ArrayList;\nimport jade.util.leap.Iterator;\nimport jade.util.leap.List;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link StepTotalConsumption}.\n* It contains ten unit test cases for the {@link StepTotalConsumption#removeWaterPrice(PriceBlock)} method.\n*/\nclass StepTotalConsumptionTest {"
	},
	{
		"original_code": "// Consumes.java\npackage simulator.ontology;\r\n\r\nimport jade.content.Predicate;\r\nimport jade.util.leap.ArrayList;\r\nimport jade.util.leap.Iterator;\r\nimport jade.util.leap.List;\r\n\r\n/**\r\n * file: Consumes.java\r\n * @author ontology bean generator\r\n * @version 2003/08/12\r\n */\r\npublic class Consumes implements Predicate {\r\n\r\n    // StepAttr step2\r\n    private StepAttr step2;\r\n\r\n    public void setStep2(StepAttr s) {\r\n        this.step2 = s;\r\n    }\r\n\r\n    public StepAttr getStep2() {\r\n        return this.step2;\r\n    }\r\n\r\n    // MetData meteoData\r\n    private MetData meteoData;\r\n\r\n    public void setMeteoData(MetData s) {\r\n        this.meteoData = s;\r\n    }\r\n\r\n    public MetData getMeteoData() {\r\n        return this.meteoData;\r\n    }\r\n\r\n    // WaterConsumption personalConsumption\r\n    private WaterConsumption personalConsumption;\r\n\r\n    public void setPersonalConsumption(WaterConsumption s) {\r\n        this.personalConsumption = s;\r\n    }\r\n\r\n    public WaterConsumption getPersonalConsumption() {\r\n        return this.personalConsumption;\r\n    }\r\n\r\n    //  Collection  pricingScale\r\n    private List pricingScale = new ArrayList();\r\n\r\n    public void addPricingScale(PriceBlock o) {\r\n        pricingScale.add(o);\r\n    }\r\n\r\n    public boolean removePricingScale(PriceBlock o) {\r\n        return pricingScale.remove(o);\r\n    }\r\n\r\n    public void clearAllPricingScale() {\r\n        pricingScale.clear();\r\n    }\r\n\r\n    public Iterator getAllPricingScale() {\r\n        return pricingScale.iterator();\r\n    }\r\n\r\n    public List getPricingScale() {\r\n        return pricingScale;\r\n    }\r\n\r\n    public void setPricingScale(List l) {\r\n        pricingScale = l;\r\n    }\r\n}\r\n",
		"id": "EvoSuiteBenchmark/10_water-simulator/src/main/java/simulator/ontology/ConsumesTest.java",
		"test_prompt": "// ConsumesTest.java\npackage simulator.ontology;\n\nimport jade.content.Predicate;\nimport jade.util.leap.ArrayList;\nimport jade.util.leap.Iterator;\nimport jade.util.leap.List;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link Consumes}.\n* It contains ten unit test cases for the {@link Consumes#removePricingScale(PriceBlock)} method.\n*/\nclass ConsumesTest {"
	},
	{
		"original_code": "// AskWeightsFor.java\npackage simulator.ontology;\r\n\r\nimport jade.content.Predicate;\r\nimport jade.util.leap.ArrayList;\r\nimport jade.util.leap.Iterator;\r\nimport jade.util.leap.List;\r\n\r\n/**\r\n * file: AskWeightsFor.java\r\n * @author ontology bean generator\r\n * @version 2003/08/12\r\n */\r\npublic class AskWeightsFor implements Predicate {\r\n\r\n    //  Collection  parameters\r\n    private List parameters = new ArrayList();\r\n\r\n    public void addParameters(Parameter o) {\r\n        parameters.add(o);\r\n    }\r\n\r\n    public boolean removeParameters(Parameter o) {\r\n        return parameters.remove(o);\r\n    }\r\n\r\n    public void clearAllParameters() {\r\n        parameters.clear();\r\n    }\r\n\r\n    public Iterator getAllParameters() {\r\n        return parameters.iterator();\r\n    }\r\n\r\n    public List getParameters() {\r\n        return parameters;\r\n    }\r\n\r\n    public void setParameters(List l) {\r\n        parameters = l;\r\n    }\r\n\r\n    // StepAttr step3\r\n    private StepAttr step3;\r\n\r\n    public void setStep3(StepAttr s) {\r\n        this.step3 = s;\r\n    }\r\n\r\n    public StepAttr getStep3() {\r\n        return this.step3;\r\n    }\r\n}\r\n",
		"id": "EvoSuiteBenchmark/10_water-simulator/src/main/java/simulator/ontology/AskWeightsForTest.java",
		"test_prompt": "// AskWeightsForTest.java\npackage simulator.ontology;\n\nimport jade.content.Predicate;\nimport jade.util.leap.ArrayList;\nimport jade.util.leap.Iterator;\nimport jade.util.leap.List;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link AskWeightsFor}.\n* It contains ten unit test cases for the {@link AskWeightsFor#removeParameters(Parameter)} method.\n*/\nclass AskWeightsForTest {"
	},
	{
		"original_code": "// ScenarioDesignWizard.java\npackage simulator.SA.gui;\n\nimport java.awt.BorderLayout;\nimport java.awt.Component;\nimport java.awt.Dimension;\nimport java.awt.FlowLayout;\nimport java.awt.GridLayout;\nimport java.awt.SystemColor;\nimport java.awt.event.ActionEvent;\nimport java.awt.event.ActionListener;\nimport java.io.File;\nimport java.util.Enumeration;\nimport java.util.Iterator;\nimport java.util.Vector;\nimport javax.swing.BorderFactory;\nimport javax.swing.ButtonGroup;\nimport javax.swing.DefaultListModel;\nimport javax.swing.JButton;\nimport javax.swing.JCheckBox;\nimport javax.swing.JComboBox;\nimport javax.swing.JDesktopPane;\nimport javax.swing.JFileChooser;\nimport javax.swing.JInternalFrame;\nimport javax.swing.JLabel;\nimport javax.swing.JList;\nimport javax.swing.JOptionPane;\nimport javax.swing.JPanel;\nimport javax.swing.JRadioButton;\nimport javax.swing.JScrollPane;\nimport javax.swing.JTable;\nimport javax.swing.JTextField;\nimport javax.swing.ListCellRenderer;\nimport javax.swing.SwingConstants;\nimport javax.swing.table.AbstractTableModel;\nimport javax.swing.table.TableModel;\nimport org.apache.log4j.Logger;\nimport simulator.util.ConsumerType;\nimport simulator.util.Function;\nimport simulator.util.ParameterAttributes;\n\n/**\n * @author Vartalas Panagiotis\n * @author Ioannis N. Athanasiadis\n * @version 1.9\n * @since 2003-2006\n */\npublic class ScenarioDesignWizard {\n\n    private Logger log = Logger.getLogger(ScenarioDesignWizard.class);\n\n    private JDesktopPane mainPanel;\n\n    private Integer layer;\n\n    private ActionListener suite;\n\n    private Function[] availableFunctions;\n\n    private String[] availablePricingScenarios;\n\n    private Integer[] simulationParameters = new Integer[5];\n\n    // Parameters list\n    // Filled  with Parameter objects (local use)\n    // Store name,ln,social\n    private Parameter[] demandCurveParameters;\n\n    // Filled  with ConsumerType objects (util)\n    private Vector consumerTypes = new Vector(0);\n\n    // All parameters for each consumer type\n    private Vector consumerTypeParameters = new Vector(0, 1);\n\n    // local use step2 - step4\n    private Boolean launchMOA = new Boolean(false);\n\n    //Left side of demand curve (step2)\n    private Boolean consumptionLn;\n\n    private File metDataFile = new File(\"\");\n\n    private Vector priceData = new Vector(0, 1);\n\n    private Vector distributionData = new Vector(0, 1);\n\n    private JInternalFrame step1;\n\n    private JInternalFrame step2;\n\n    private JInternalFrame step3;\n\n    @SuppressWarnings(\"unused\")\n    private JInternalFrame step4;\n\n    private JInternalFrame step5;\n\n    private JInternalFrame step6;\n\n    //Constructor\n    public ScenarioDesignWizard(Integer layer, JDesktopPane mainPanel, Function[] availableFunctions, String[] availablePricingScenarios, ActionListener suite) {\n        this.mainPanel = mainPanel;\n        this.layer = layer;\n        this.availableFunctions = availableFunctions;\n        this.availablePricingScenarios = availablePricingScenarios;\n        this.suite = suite;\n        step1 = new Step1Frame();\n        step2 = new Step2Frame();\n        // first step start\n        step1.setLocation(50, 50);\n        step1.show();\n    }\n\n    /**\n     * *************************************************************************\n     *                               STEP 1\n     * **************************************************************************\n     */\n    private class Step1Frame extends JInternalFrame {\n\n        private static final long serialVersionUID = 8034923647921247581L;\n\n        private JPanel contentPane = (JPanel) this.getContentPane();\n\n        {\n            contentPane.setLayout(new BorderLayout());\n            this.setClosable(true);\n            this.setDefaultCloseOperation(JInternalFrame.HIDE_ON_CLOSE);\n            this.setResizable(false);\n            this.setSize(new Dimension(400, 350));\n            this.setTitle(\"STEP 1/6 - Scenario Design Wizard\");\n        }\n\n        //*******************************************************\n        // DATA PANEL\n        private JPanel dataPanel = new JPanel(new GridLayout(0, 1, 5, 5));\n\n        {\n            contentPane.add(dataPanel, BorderLayout.CENTER);\n        }\n\n        //*******************************************************\n        private JPanel panel1 = new JPanel(new FlowLayout(FlowLayout.CENTER, 10, 5));\n\n        {\n            dataPanel.add(panel1, null);\n        }\n\n        private JLabel label1 = new JLabel(\"Grid Dimension  :\");\n\n        {\n            label1.setFont(new java.awt.Font(\"Dialog\", 1, 12));\n            label1.setBorder(BorderFactory.createEtchedBorder());\n            label1.setPreferredSize(new Dimension(150, 17));\n            label1.setHorizontalAlignment(SwingConstants.CENTER);\n            label1.setHorizontalTextPosition(SwingConstants.CENTER);\n            panel1.add(label1, null);\n        }\n\n        private JTextField textField1 = new JTextField(10);\n\n        {\n            textField1.setBorder(BorderFactory.createLoweredBevelBorder());\n            panel1.add(textField1, null);\n        }\n\n        private JPanel panel2 = new JPanel(new FlowLayout(FlowLayout.CENTER, 10, 5));\n\n        {\n            dataPanel.add(panel2, null);\n        }\n\n        private JLabel label2 = new JLabel(\"Sight Limit  :\");\n\n        {\n            label2.setFont(new java.awt.Font(\"Dialog\", 1, 12));\n            label2.setBorder(BorderFactory.createEtchedBorder());\n            label2.setPreferredSize(new Dimension(150, 17));\n            label2.setHorizontalAlignment(SwingConstants.CENTER);\n            label2.setHorizontalTextPosition(SwingConstants.CENTER);\n            panel2.add(label2, null);\n        }\n\n        private JTextField textField2 = new JTextField(10);\n\n        {\n            textField2.setBorder(BorderFactory.createLoweredBevelBorder());\n            panel2.add(textField2, null);\n        }\n\n        private JPanel panel3 = new JPanel(new FlowLayout(FlowLayout.CENTER, 10, 5));\n\n        {\n            dataPanel.add(panel3, null);\n        }\n\n        private JLabel label3 = new JLabel(\"Consumers Population :\");\n\n        {\n            label3.setFont(new java.awt.Font(\"Dialog\", 1, 12));\n            label3.setBorder(BorderFactory.createEtchedBorder());\n            label3.setPreferredSize(new Dimension(150, 17));\n            label3.setHorizontalAlignment(SwingConstants.CENTER);\n            label3.setHorizontalTextPosition(SwingConstants.CENTER);\n            panel3.add(label3, null);\n        }\n\n        private JTextField textField3 = new JTextField(10);\n\n        {\n            textField3.setBorder(BorderFactory.createLoweredBevelBorder());\n            panel3.add(textField3, null);\n        }\n\n        private JPanel panel4 = new JPanel(new FlowLayout(FlowLayout.CENTER, 10, 5));\n\n        {\n            dataPanel.add(panel4, null);\n        }\n\n        private JLabel label4 = new JLabel(\"Duration :\");\n\n        {\n            label4.setFont(new java.awt.Font(\"Dialog\", 1, 12));\n            label4.setBorder(BorderFactory.createEtchedBorder());\n            label4.setPreferredSize(new Dimension(80, 17));\n            label4.setHorizontalAlignment(SwingConstants.CENTER);\n            label4.setHorizontalTextPosition(SwingConstants.CENTER);\n            panel4.add(label4, null);\n        }\n\n        private JTextField textField4 = new JTextField(5);\n\n        {\n            textField4.setBorder(BorderFactory.createLoweredBevelBorder());\n            panel4.add(textField4, null);\n        }\n\n        private JLabel label5 = new JLabel(\"year(s)\");\n\n        {\n            label5.setFont(new java.awt.Font(\"Dialog\", 1, 12));\n            label5.setHorizontalAlignment(SwingConstants.CENTER);\n            label5.setHorizontalTextPosition(SwingConstants.CENTER);\n            panel4.add(label5, null);\n        }\n\n        private JTextField textField5 = new JTextField(5);\n\n        {\n            textField5.setBorder(BorderFactory.createLoweredBevelBorder());\n            textField5.setText(\"0\");\n            panel4.add(textField5, null);\n        }\n\n        private JLabel label6 = new JLabel(\"month(s)\");\n\n        {\n            label6.setFont(new java.awt.Font(\"Dialog\", 1, 12));\n            label6.setHorizontalAlignment(SwingConstants.CENTER);\n            label6.setHorizontalTextPosition(SwingConstants.CENTER);\n            panel4.add(label6, null);\n        }\n\n        private JPanel panel5 = new JPanel(new FlowLayout(FlowLayout.CENTER, 10, 5));\n\n        {\n            dataPanel.add(panel5, null);\n        }\n\n        private JLabel label7 = new JLabel(\"Time Step :\");\n\n        {\n            label7.setFont(new java.awt.Font(\"Dialog\", 1, 12));\n            label7.setBorder(BorderFactory.createEtchedBorder());\n            label7.setPreferredSize(new Dimension(80, 17));\n            label7.setHorizontalAlignment(SwingConstants.CENTER);\n            label7.setHorizontalTextPosition(SwingConstants.CENTER);\n            panel5.add(label7, null);\n        }\n\n        private JTextField textField6 = new JTextField(5);\n\n        {\n            textField6.setBorder(BorderFactory.createLoweredBevelBorder());\n            panel5.add(textField6, null);\n        }\n\n        private JLabel label8 = new JLabel(\"month(s)\");\n\n        {\n            label8.setFont(new java.awt.Font(\"Dialog\", 1, 12));\n            label8.setHorizontalAlignment(SwingConstants.CENTER);\n            label8.setHorizontalTextPosition(SwingConstants.CENTER);\n            panel5.add(label8, null);\n        }\n\n        //***************************END of Data Panel****************************\n        //*******************************************************\n        // NAVIGATION PANEL\n        private JPanel navigationPanel = new JPanel(new FlowLayout(FlowLayout.CENTER, 30, 10));\n\n        {\n            navigationPanel.setBorder(BorderFactory.createEtchedBorder());\n            navigationPanel.setPreferredSize(new Dimension(0, 40));\n            contentPane.add(navigationPanel, BorderLayout.SOUTH);\n        }\n\n        //*******************************************************\n        private JButton cancelButton = new JButton(\"     Cancel    \");\n\n        {\n            cancelButton.setBorder(BorderFactory.createRaisedBevelBorder());\n            navigationPanel.add(cancelButton, null);\n            cancelButton.addActionListener(new ActionListener() {\n\n                public void actionPerformed(ActionEvent ev) {\n                    try {\n                        Step1Frame.this.setClosed(true);\n                    } catch (java.beans.PropertyVetoException ex) {\n                    }\n                }\n            });\n        }\n\n        // END cancelButton\n        private JButton previousButton = new JButton(\"  << Previous  \");\n\n        {\n            previousButton.setBorder(BorderFactory.createRaisedBevelBorder());\n            navigationPanel.add(previousButton);\n            previousButton.setEnabled(false);\n        }\n\n        // END previousButton\n        private JButton nextButton = new JButton(\"    Next >>    \");\n\n        {\n            nextButton.setBorder(BorderFactory.createRaisedBevelBorder());\n            navigationPanel.add(nextButton);\n            nextButton.addActionListener(new ActionListener() {\n\n                public void actionPerformed(ActionEvent ev) {\n                    if (checkConstraints()) {\n                        saveInputs();\n                        step1.setVisible(false);\n                        step2.setLocation(50, 50);\n                        step2.setVisible(true);\n                    }\n                }\n            });\n        }\n\n        // END nextButton\n        //***************************END of Navigation Panel**********************\n        private boolean checkConstraints() {\n            boolean t = false;\n            String warnings = \"\";\n            try {\n                Integer gridSize = new Integer(textField1.getText());\n                Integer sightLimit = new Integer(textField2.getText());\n                Integer population = new Integer(textField3.getText());\n                Integer durYears = new Integer(textField4.getText());\n                Integer durMonths = new Integer(textField5.getText());\n                Integer step = new Integer(textField6.getText());\n                // Errors\n                if (population.intValue() > (gridSize.intValue() * gridSize.intValue())) {\n                    JOptionPane.showMessageDialog(this, \"Grid is too small for this population !!!\", \"Error\", JOptionPane.ERROR_MESSAGE);\n                    t = false;\n                } else if (step.intValue() == 0) {\n                    JOptionPane.showMessageDialog(this, \"Step time can't be zero !!!\", \"Error\", JOptionPane.ERROR_MESSAGE);\n                    t = false;\n                } else {\n                    // No fatal errors\n                    t = true;\n                    // WARNINGS\n                    if (sightLimit.intValue() > gridSize.intValue()) {\n                        warnings = \"Sight Limit is larger than Grid Size !!!\";\n                        textField2.setText(gridSize.toString());\n                    }\n                    if (population.intValue() == 0)\n                        warnings += \"\\nConsumers population is zero !!!\";\n                    if (durYears.intValue() == 0 && durMonths.intValue() == 0)\n                        warnings += \"\\nDuration is zero !!!\";\n                    if (!warnings.equals(\"\"))\n                        t = (JOptionPane.showConfirmDialog(this, warnings + \"\\nContinue anyway?\", \"Warning\", JOptionPane.YES_NO_OPTION) == JOptionPane.YES_OPTION) ? true : false;\n                }\n            } catch (NumberFormatException nfe) {\n                JOptionPane.showMessageDialog(this, \"Fill in ALL fields with INTEGERs !!!\", \"Error\", JOptionPane.ERROR_MESSAGE);\n                t = false;\n            }\n            return t;\n        }\n\n        private void saveInputs() {\n            simulationParameters[0] = new Integer(textField1.getText());\n            simulationParameters[1] = new Integer(textField2.getText());\n            simulationParameters[2] = new Integer(textField3.getText());\n            simulationParameters[3] = new Integer(((Integer.parseInt(textField4.getText()) * 12) + Integer.parseInt(textField5.getText())) / Integer.parseInt(textField6.getText()));\n            simulationParameters[4] = new Integer(Integer.parseInt(textField6.getText()));\n        }\n\n        Step1Frame() {\n            mainPanel.add(this, layer);\n        }\n    }\n\n    // END of Step1Frame\n    /**\n     * *************************************************************************\n     *                               STEP 2\n     * **************************************************************************\n     */\n    private class Step2Frame extends JInternalFrame {\n\n        private static final long serialVersionUID = -2574807796499095054L;\n\n        private boolean parametersListChanged = true;\n\n        // Constructor\n        Step2Frame() {\n            mainPanel.add(this, layer);\n        }\n\n        private JPanel contentPane = (JPanel) this.getContentPane();\n\n        {\n            contentPane.setLayout(new BorderLayout());\n            this.setClosable(true);\n            this.setDefaultCloseOperation(JInternalFrame.HIDE_ON_CLOSE);\n            this.setResizable(false);\n            this.setSize(new Dimension(500, 380));\n            this.setTitle(\"STEP 2/6 - Scenario Design Wizard\");\n        }\n\n        //*******************************************************\n        // INPUT PANEL\n        private JPanel inputPanel = new JPanel(new GridLayout(2, 1, 0, 0));\n\n        {\n            inputPanel.setBorder(BorderFactory.createEtchedBorder());\n            inputPanel.setPreferredSize(new Dimension(0, 80));\n            contentPane.add(inputPanel, BorderLayout.NORTH);\n        }\n\n        //*******************************************************\n        private JPanel upperPanel = new JPanel(new FlowLayout(FlowLayout.CENTER, 10, 0));\n\n        {\n            upperPanel.setBorder(BorderFactory.createEmptyBorder(5, 5, 5, 5));\n            inputPanel.add(upperPanel, null);\n        }\n\n        private JLabel labelCon = new JLabel(\"Consumption\");\n\n        {\n            labelCon.setFont(new java.awt.Font(\"Dialog\", 1, 12));\n            labelCon.setBorder(BorderFactory.createEtchedBorder());\n            labelCon.setHorizontalAlignment(SwingConstants.CENTER);\n            labelCon.setHorizontalTextPosition(SwingConstants.CENTER);\n            upperPanel.add(labelCon, null);\n        }\n\n        private JCheckBox boxConsumptionLN = new JCheckBox(\"Log\");\n\n        {\n            upperPanel.add(boxConsumptionLN, null);\n        }\n\n        private JPanel lowerPanel = new JPanel(new FlowLayout(FlowLayout.CENTER, 10, 0));\n\n        {\n            lowerPanel.setBorder(BorderFactory.createEmptyBorder(5, 5, 5, 5));\n            inputPanel.add(lowerPanel, null);\n        }\n\n        private JLabel label = new JLabel(\"Parameter Name :\");\n\n        {\n            label.setFont(new java.awt.Font(\"Dialog\", 1, 12));\n            label.setBorder(BorderFactory.createEtchedBorder());\n            label.setHorizontalAlignment(SwingConstants.CENTER);\n            label.setHorizontalTextPosition(SwingConstants.CENTER);\n            lowerPanel.add(label, null);\n        }\n\n        private JTextField textField = new JTextField(12);\n\n        {\n            textField.setBorder(BorderFactory.createLoweredBevelBorder());\n            lowerPanel.add(textField, null);\n        }\n\n        private JCheckBox box1 = new JCheckBox(\"Log\");\n\n        {\n            lowerPanel.add(box1, null);\n        }\n\n        private JCheckBox box2 = new JCheckBox(\"Social\");\n\n        {\n            lowerPanel.add(box2, null);\n        }\n\n        //***************************END of input panel*********************************\n        //*******************************************************\n        // Control PANEL\n        private JPanel controlPanel = new JPanel(new FlowLayout(FlowLayout.CENTER, 5, 40));\n\n        {\n            controlPanel.setBorder(BorderFactory.createEtchedBorder());\n            controlPanel.setPreferredSize(new Dimension(120, 0));\n            contentPane.add(controlPanel, BorderLayout.EAST);\n        }\n\n        //*******************************************************\n        private JButton addButton = new JButton(\"     Add...      \");\n\n        {\n            addButton.setBorder(BorderFactory.createRaisedBevelBorder());\n            controlPanel.add(addButton, null);\n            addButton.addActionListener(new ActionListener() {\n\n                public void actionPerformed(ActionEvent ev) {\n                    textField.setEnabled(true);\n                    box2.setEnabled(true);\n                    // add to model (Default model list)\n                    if (!textField.getText().equals(\"\")) {\n                        if (checkModel(textField.getText()))\n                            model.addElement(new Parameter(textField.getText(), new Boolean(box1.isSelected()), new Boolean(box2.isSelected())));\n                        else {\n                            JOptionPane.showMessageDialog(Step2Frame.this, \"A Parameter with this name already exists !!!\", \"Error\", JOptionPane.ERROR_MESSAGE);\n                        }\n                    }\n                    textField.setText(\"\");\n                    box1.setSelected(false);\n                    box2.setSelected(false);\n                    parametersListChanged = true;\n                }\n            });\n        }\n\n        // END addButton\n        private boolean checkModel(String parameterName) {\n            boolean result = true;\n            Enumeration e = model.elements();\n            while (e.hasMoreElements() && result) {\n                Parameter p = (Parameter) e.nextElement();\n                if (p.getName().equals(parameterName))\n                    result = false;\n            }\n            return result;\n        }\n\n        private JButton editButton = new JButton(\"     Edit...     \");\n\n        {\n            editButton.setBorder(BorderFactory.createRaisedBevelBorder());\n            controlPanel.add(editButton);\n            editButton.addActionListener(new ActionListener() {\n\n                public void actionPerformed(ActionEvent ev) {\n                    if (list.getSelectedIndex() != -1) {\n                        Parameter p = (Parameter) model.elementAt(list.getSelectedIndex());\n                        if (p.getName().equals(\"TEMPERATURE\") || p.getName().equals(\"RAINFALL\")) {\n                            textField.setText(p.getName());\n                            textField.setEnabled(false);\n                            box1.setSelected(p.getLn().booleanValue());\n                            box2.setSelected(false);\n                            box2.setEnabled(false);\n                            model.removeElementAt(list.getSelectedIndex());\n                        } else {\n                            textField.setText(p.getName());\n                            box1.setSelected(p.getLn().booleanValue());\n                            box2.setSelected(p.getSocial().booleanValue());\n                            model.removeElementAt(list.getSelectedIndex());\n                        }\n                        parametersListChanged = true;\n                    }\n                }\n            });\n        }\n\n        // END editButton\n        private JButton removeButton = new JButton(\"   Remove   \");\n\n        {\n            removeButton.setBorder(BorderFactory.createRaisedBevelBorder());\n            controlPanel.add(removeButton);\n            removeButton.addActionListener(new ActionListener() {\n\n                public void actionPerformed(ActionEvent ev) {\n                    if (list.getSelectedIndex() != -1) {\n                        Parameter p = (Parameter) model.elementAt(list.getSelectedIndex());\n                        if (p.getName().equals(\"TEMPERATURE\") || p.getName().equals(\"RAINFALL\")) {\n                            if (JOptionPane.showConfirmDialog(Step2Frame.this, p.getName() + \" will be removed from Parameters List. Are U sure?\", \"Confirm\", JOptionPane.YES_NO_OPTION) == JOptionPane.YES_OPTION) {\n                                model.removeElementAt(list.getSelectedIndex());\n                                parametersListChanged = true;\n                            }\n                        } else {\n                            model.removeElementAt(list.getSelectedIndex());\n                            parametersListChanged = true;\n                        }\n                    }\n                }\n            });\n        }\n\n        // END remove Button\n        //***************************END of Control Panel**********************\n        //*******************************************************\n        // LIST PANEL\n        private JPanel listPanel = new JPanel(new FlowLayout(FlowLayout.CENTER, 10, 10));\n\n        {\n            listPanel.setBorder(BorderFactory.createEtchedBorder());\n            contentPane.add(listPanel, BorderLayout.CENTER);\n        }\n\n        //*******************************************************\n        private DefaultListModel model = new DefaultListModel();\n\n        private JList list = new JList(model);\n\n        {\n            list.setCellRenderer(new ListRenderer());\n            model.addElement(new Parameter(\"TEMPERATURE\", new Boolean(false), new Boolean(false)));\n            model.addElement(new Parameter(\"RAINFALL\", new Boolean(false), new Boolean(false)));\n        }\n\n        private JScrollPane scroll = new JScrollPane(list);\n\n        {\n            scroll.setPreferredSize(new Dimension(300, 200));\n            listPanel.add(scroll, null);\n        }\n\n        //***************************END of List Panel**********************\n        //*******************************************************\n        // NAVIGATION PANEL\n        private JPanel navigationPanel = new JPanel(new FlowLayout(FlowLayout.CENTER, 30, 10));\n\n        {\n            navigationPanel.setBorder(BorderFactory.createEtchedBorder());\n            navigationPanel.setPreferredSize(new Dimension(0, 40));\n            contentPane.add(navigationPanel, BorderLayout.SOUTH);\n        }\n\n        //*******************************************************\n        private JButton cancelButton = new JButton(\"    Cancel    \");\n\n        {\n            cancelButton.setBorder(BorderFactory.createRaisedBevelBorder());\n            navigationPanel.add(cancelButton, null);\n            cancelButton.addActionListener(new ActionListener() {\n\n                public void actionPerformed(ActionEvent ev) {\n                    try {\n                        Step2Frame.this.setClosed(true);\n                    } catch (java.beans.PropertyVetoException ex) {\n                    }\n                }\n            });\n        }\n\n        // END cancelButton\n        private JButton previousButton = new JButton(\"  << Previous  \");\n\n        {\n            previousButton.setBorder(BorderFactory.createRaisedBevelBorder());\n            navigationPanel.add(previousButton);\n            previousButton.addActionListener(new ActionListener() {\n\n                public void actionPerformed(ActionEvent ev) {\n                    step2.setVisible(false);\n                    step1.setVisible(true);\n                }\n            });\n        }\n\n        // END previousButton\n        private JButton nextButton = new JButton(\"    Next >>    \");\n\n        {\n            nextButton.setBorder(BorderFactory.createRaisedBevelBorder());\n            navigationPanel.add(nextButton);\n            nextButton.addActionListener(new ActionListener() {\n\n                public void actionPerformed(ActionEvent ev) {\n                    if (model.size() != 0) {\n                        step2.setVisible(false);\n                        // define size\n                        // Store name,ln,social\n                        demandCurveParameters = new Parameter[model.size()];\n                        //******************************* save data *******************\n                        Enumeration e = model.elements();\n                        int i = 0;\n                        while (e.hasMoreElements()) {\n                            Parameter p = new Parameter();\n                            p = (Parameter) e.nextElement();\n                            demandCurveParameters[i] = p;\n                            i++;\n                        }\n                        ScenarioDesignWizard.this.consumptionLn = new Boolean(Step2Frame.this.boxConsumptionLN.isSelected());\n                        // Next Step\n                        if (parametersListChanged) {\n                            // for step3\n                            step3 = new Step3Frame();\n                            consumerTypes.removeAllElements();\n                            consumerTypeParameters.removeAllElements();\n                            parametersListChanged = false;\n                        }\n                        step3.setLocation(50, 50);\n                        step3.setVisible(true);\n                    } else {\n                        JOptionPane.showMessageDialog(Step2Frame.this, \"NO Parameters defined !!!\", \"Error\", JOptionPane.ERROR_MESSAGE);\n                    }\n                }\n            });\n        }\n\n        // END nextButton\n        //***************************END of Navigation Panel**********************\n        // RENDER\n        class ListRenderer implements ListCellRenderer {\n\n            @SuppressWarnings(\"unused\")\n            private boolean focused = false;\n\n            private JPanel panel;\n\n            private JLabel label;\n\n            private JCheckBox box1, box2;\n\n            public ListRenderer() {\n                panel = new JPanel(new GridLayout(1, 3, 0, 0));\n                label = new JLabel();\n                box1 = new JCheckBox(\"Log\");\n                box1.setPreferredSize(new Dimension(50, 25));\n                box2 = new JCheckBox(\"Social\");\n                label.setOpaque(true);\n                box1.setOpaque(true);\n                box2.setOpaque(true);\n                panel.add(label, null);\n                panel.add(box1, null);\n                panel.add(box2, null);\n            }\n\n            public Component getListCellRendererComponent(JList list, Object value, int index, boolean isSelected, boolean cellHasFocus) {\n                if (value == null) {\n                    label.setText(\"\");\n                } else {\n                    Parameter p = new Parameter();\n                    p = (Parameter) value;\n                    label.setText(p.getName());\n                    box1.setSelected(p.getLn().booleanValue());\n                    box2.setSelected(p.getSocial().booleanValue());\n                }\n                // else\n                label.setBackground(isSelected ? SystemColor.textHighlight : SystemColor.text);\n                label.setForeground(isSelected ? SystemColor.textHighlightText : SystemColor.textText);\n                box2.setBackground(isSelected ? SystemColor.textHighlight : SystemColor.text);\n                box2.setForeground(isSelected ? SystemColor.textHighlightText : SystemColor.textText);\n                return panel;\n            }\n        }\n        // End of class\n    }\n\n    // END of Step2Frame\n    /**\n     * *************************************************************************\n     *                               STEP 3\n     * **************************************************************************\n     */\n    private class Step3Frame extends JInternalFrame {\n\n        private static final long serialVersionUID = 8381154358245864832L;\n\n        // Constructor\n        Step3Frame() {\n            mainPanel.add(this, layer);\n        }\n\n        private JPanel contentPane = (JPanel) this.getContentPane();\n\n        {\n            contentPane.setLayout(new BorderLayout());\n            this.setClosable(true);\n            this.setDefaultCloseOperation(JInternalFrame.HIDE_ON_CLOSE);\n            this.setResizable(false);\n            this.setSize(new Dimension(400, 350));\n            this.setTitle(\"STEP 3/6 - Scenario Design Wizard\");\n        }\n\n        //*******************************************************\n        // INPUT PANEL\n        private JPanel inputPanel = new JPanel(new FlowLayout(FlowLayout.CENTER, 10, 10));\n\n        {\n            inputPanel.setBorder(BorderFactory.createEtchedBorder());\n            inputPanel.setPreferredSize(new Dimension(0, 80));\n            contentPane.add(inputPanel, BorderLayout.NORTH);\n        }\n\n        //*******************************************************\n        private JLabel label = new JLabel(\"Consumer Type Name :\");\n\n        {\n            label.setFont(new java.awt.Font(\"Dialog\", 1, 12));\n            label.setBorder(BorderFactory.createEtchedBorder());\n            label.setHorizontalAlignment(SwingConstants.CENTER);\n            label.setHorizontalTextPosition(SwingConstants.CENTER);\n            inputPanel.add(label, null);\n        }\n\n        private JTextField textField = new JTextField(15);\n\n        {\n            textField.setBorder(BorderFactory.createLoweredBevelBorder());\n            inputPanel.add(textField, null);\n        }\n\n        private JLabel label1 = new JLabel(\"Percentage :\");\n\n        {\n            label1.setFont(new java.awt.Font(\"Dialog\", 1, 12));\n            label1.setBorder(BorderFactory.createEtchedBorder());\n            label1.setHorizontalAlignment(SwingConstants.CENTER);\n            label1.setHorizontalTextPosition(SwingConstants.CENTER);\n            inputPanel.add(label1, null);\n        }\n\n        private JTextField textField1 = new JTextField(5);\n\n        {\n            textField1.setBorder(BorderFactory.createLoweredBevelBorder());\n            inputPanel.add(textField1, null);\n        }\n\n        //***************************END of input panel*********************************\n        //*******************************************************\n        // Control PANEL\n        private JPanel controlPanel = new JPanel(new FlowLayout(FlowLayout.CENTER, 5, 30));\n\n        {\n            controlPanel.setBorder(BorderFactory.createEtchedBorder());\n            controlPanel.setPreferredSize(new Dimension(120, 0));\n            contentPane.add(controlPanel, BorderLayout.EAST);\n        }\n\n        //*******************************************************\n        private JButton newButton = new JButton(\"     New...     \");\n\n        {\n            newButton.setBorder(BorderFactory.createRaisedBevelBorder());\n            controlPanel.add(newButton, null);\n            newButton.addActionListener(new ActionListener() {\n\n                @SuppressWarnings(\"unchecked\")\n                public void actionPerformed(ActionEvent ev) {\n                    try {\n                        if (!textField.getText().equals(\"\")) {\n                            float f = (new Float(textField1.getText())).floatValue();\n                            if (f <= 100 && f > 0) {\n                                // update model\n                                ConsumerType ct = new ConsumerType(textField.getText(), new Float(textField1.getText()));\n                                model.addElement(ct);\n                                consumerTypes.addElement(ct);\n                                step3.setVisible(false);\n                                // step 3.1\n                                JInternalFrame step3_1 = new Step3_1Frame(ct.getName());\n                                step3_1.setLocation(50, 50);\n                                step3_1.setVisible(true);\n                                textField.setText(\"\");\n                                textField1.setText(\"\");\n                            } else {\n                                JOptionPane.showMessageDialog(Step3Frame.this, \"Percentage MUST be between 0 and 100 !!!\", \"Error\", JOptionPane.ERROR_MESSAGE);\n                            }\n                        }\n                    } catch (NumberFormatException nfe) {\n                        JOptionPane.showMessageDialog(Step3Frame.this, \"FILL in Percentage field with a FLOAT NUMBER !!!\", \"Error\", JOptionPane.ERROR_MESSAGE);\n                    }\n                }\n            });\n        }\n\n        // END addButton\n        private JButton editButton = new JButton(\"     Edit...     \");\n\n        {\n            editButton.setBorder(BorderFactory.createRaisedBevelBorder());\n            controlPanel.add(editButton);\n            editButton.addActionListener(new ActionListener() {\n\n                public void actionPerformed(ActionEvent ev) {\n                    JOptionPane.showMessageDialog(Step3Frame.this, \"Under Construction\", \"Info\", JOptionPane.NO_OPTION);\n                    // TEST                                    <--------------------------------------\n                    for (int i = 0; i < demandCurveParameters.length; i++) {\n                        Parameter p = demandCurveParameters[i];\n                        log.info(p.getName() + \" \" + p.getLn() + \" \" + p.getSocial());\n                    }\n                    log.info(\" Consumer Types : \");\n                    int blockStart = 0;\n                    for (int j = 0; j < consumerTypes.size(); j++) {\n                        ConsumerType ct = (ConsumerType) consumerTypes.elementAt(j);\n                        log.info(ct.getName() + \" : \" + ct.getPercentage());\n                        for (int i = 0; i < demandCurveParameters.length; i++) {\n                            ParameterAttributes pa = (ParameterAttributes) consumerTypeParameters.elementAt(blockStart + i);\n                            log.info(pa.getName() + \" \" + pa.getLn() + \"  \" + pa.isSocial() + \"  \" + \"  \" + pa.getElasticity() + \"  \" + pa.getDemandCurveFunction().getFunctionRepresentation() + \"  \");\n                            Iterator it = pa.getDemandCurveFunction().getFunctionConstants();\n                            while (it.hasNext()) {\n                                Function.FunctionConstant fc = (Function.FunctionConstant) it.next();\n                                log.info(fc.getConstantName() + \" - \" + fc.getConstantFValue());\n                            }\n                            if (pa.isSocial()) {\n                                it = pa.getSocialFunction().getFunctionConstants();\n                                log.info(\"Social : \" + pa.getSocialFunction().getFunctionRepresentation());\n                                while (it.hasNext()) {\n                                    Function.FunctionConstant fc = (Function.FunctionConstant) it.next();\n                                    log.info(fc.getConstantName() + \" - \" + fc.getConstantFValue());\n                                }\n                                // while\n                            }\n                            // if\n                        }\n                        // i\n                        blockStart += demandCurveParameters.length;\n                    }\n                    // j\n                }\n            });\n        }\n\n        // END editButton\n        private JButton removeButton = new JButton(\"   Remove   \");\n\n        {\n            removeButton.setBorder(BorderFactory.createRaisedBevelBorder());\n            controlPanel.add(removeButton);\n            removeButton.addActionListener(new ActionListener() {\n\n                public void actionPerformed(ActionEvent ev) {\n                    int index = list.getSelectedIndex();\n                    if (index != -1) {\n                        // remove from model\n                        model.removeElementAt(index);\n                        // remove from list\n                        consumerTypes.removeElementAt(index);\n                        // remove its parameters\n                        for (int i = 0; i < demandCurveParameters.length; i++) consumerTypeParameters.removeElementAt((index * demandCurveParameters.length) + i);\n                    }\n                }\n            });\n        }\n\n        // END remove Button\n        //***************************END of Control Panel**********************\n        //*******************************************************\n        // LIST PANEL\n        private JPanel listPanel = new JPanel(new FlowLayout(FlowLayout.CENTER, 20, 20));\n\n        {\n            listPanel.setBorder(BorderFactory.createEtchedBorder());\n            contentPane.add(listPanel, BorderLayout.CENTER);\n        }\n\n        //*******************************************************\n        private DefaultListModel model = new DefaultListModel();\n\n        private JList list = new JList(model);\n\n        {\n            list.setCellRenderer(new ListRenderer());\n        }\n\n        private JScrollPane scroll = new JScrollPane(list);\n\n        {\n            scroll.setPreferredSize(new Dimension(150, 150));\n            listPanel.add(scroll, null);\n        }\n\n        //***************************END of List Panel**********************\n        //*******************************************************\n        // NAVIGATION PANEL\n        private JPanel navigationPanel = new JPanel(new FlowLayout(FlowLayout.CENTER, 30, 10));\n\n        {\n            navigationPanel.setBorder(BorderFactory.createEtchedBorder());\n            navigationPanel.setPreferredSize(new Dimension(0, 40));\n            contentPane.add(navigationPanel, BorderLayout.SOUTH);\n        }\n\n        //*******************************************************\n        private JButton cancelButton = new JButton(\"     Cancel    \");\n\n        {\n            cancelButton.setBorder(BorderFactory.createRaisedBevelBorder());\n            navigationPanel.add(cancelButton, null);\n            cancelButton.addActionListener(new ActionListener() {\n\n                public void actionPerformed(ActionEvent ev) {\n                    try {\n                        Step3Frame.this.setClosed(true);\n                    } catch (java.beans.PropertyVetoException ex) {\n                    }\n                }\n            });\n        }\n\n        // END cancelButton\n        private JButton previousButton = new JButton(\"  << Previous  \");\n\n        {\n            previousButton.setBorder(BorderFactory.createRaisedBevelBorder());\n            navigationPanel.add(previousButton);\n            previousButton.addActionListener(new ActionListener() {\n\n                public void actionPerformed(ActionEvent ev) {\n                    if (JOptionPane.showConfirmDialog(Step3Frame.this, \"ALL consumer types defined so far, will be deleted if ParametersList change!!\", \"Info\", JOptionPane.OK_CANCEL_OPTION) == JOptionPane.OK_OPTION) {\n                        step3.setVisible(false);\n                        step2.setVisible(true);\n                    }\n                }\n            });\n        }\n\n        // END previousButton\n        private JButton nextButton = new JButton(\"    Next >>    \");\n\n        {\n            nextButton.setBorder(BorderFactory.createRaisedBevelBorder());\n            navigationPanel.add(nextButton);\n            nextButton.addActionListener(new ActionListener() {\n\n                public void actionPerformed(ActionEvent ev) {\n                    // inputs already saved\n                    String error = \"\", warning = \"\";\n                    boolean ok = true;\n                    switch(checkPercentages()) {\n                        case 0:\n                            break;\n                        case 1:\n                            error = \"No Consumer Types defined !!\";\n                            break;\n                        case 2:\n                            error = \"Percentages exceed 100% !!\";\n                            break;\n                        case 3:\n                            warning = \"Percentages rounded !!\\nContinue ?\";\n                            break;\n                    }\n                    if (!error.equals(\"\")) {\n                        JOptionPane.showMessageDialog(Step3Frame.this, error, \"Error\", JOptionPane.ERROR_MESSAGE);\n                        ok = false;\n                    } else {\n                        String str = \"\";\n                        for (int i = 0; i < consumerTypes.size(); i++) {\n                            ConsumerType ct = (ConsumerType) consumerTypes.elementAt(i);\n                            str += (\"[ \" + ct.getName() + \" ]  :  \" + ct.getMembers() + \" / \" + simulationParameters[2].intValue() + \"\\n\");\n                        }\n                        if (!warning.equals(\"\")) {\n                            if (JOptionPane.showConfirmDialog(Step3Frame.this, (str + warning), \"Warning\", JOptionPane.YES_NO_OPTION) == JOptionPane.NO_OPTION)\n                                ok = false;\n                        } else\n                            JOptionPane.showMessageDialog(Step3Frame.this, str, \"Info\", JOptionPane.INFORMATION_MESSAGE);\n                    }\n                    if (ok) {\n                        step3.setVisible(false);\n                        step4 = new Step4Frame();\n                    }\n                }\n            });\n        }\n\n        // END nextButton\n        //***************************END of Navigation Panel**********************\n        // RENDER\n        class ListRenderer implements ListCellRenderer {\n\n            @SuppressWarnings(\"unused\")\n            private boolean focused = false;\n\n            private JPanel panel;\n\n            private JLabel typeName;\n\n            private JLabel percentage;\n\n            public ListRenderer() {\n                panel = new JPanel(new GridLayout(1, 2, 0, 0));\n                typeName = new JLabel();\n                percentage = new JLabel(\"\", SwingConstants.CENTER);\n                panel.setOpaque(true);\n                typeName.setOpaque(true);\n                percentage.setOpaque(true);\n                panel.add(typeName, null);\n                panel.add(percentage, null);\n            }\n\n            public Component getListCellRendererComponent(JList list, Object value, int index, boolean isSelected, boolean cellHasFocus) {\n                if (value == null) {\n                    typeName.setText(\"\");\n                    percentage.setText(\"\");\n                } else {\n                    ConsumerType ct = (ConsumerType) value;\n                    typeName.setText(ct.getName());\n                    percentage.setText(ct.getPercentage().toString() + \"%\");\n                }\n                typeName.setBackground(isSelected ? SystemColor.textHighlight : SystemColor.text);\n                typeName.setForeground(isSelected ? SystemColor.textHighlightText : SystemColor.textText);\n                percentage.setBackground(isSelected ? SystemColor.textHighlight : SystemColor.text);\n                percentage.setForeground(isSelected ? SystemColor.textHighlightText : SystemColor.textText);\n                return panel;\n            }\n        }\n\n        // End of class\n        private int checkPercentages() {\n            float sum = 0;\n            int counter = 0, population = simulationParameters[2].intValue();\n            // Calculate consumers number for each type from percentages\n            // model & consumerTypes --> identical\n            if (model.size() == 0)\n                return 1;\n            for (int i = 0; i < consumerTypes.size(); i++) {\n                ConsumerType ct = (ConsumerType) consumerTypes.elementAt(i);\n                ct.setMembers(Math.round((ct.getPercentage().floatValue() / 100) * population));\n                sum += ct.getPercentage().floatValue();\n                counter += ct.getMembers();\n            }\n            if (sum > 101)\n                return 2;\n            // check rounding\n            ConsumerType ct = (ConsumerType) consumerTypes.lastElement();\n            if (counter != population) {\n                ct.setMembers((population - counter) + ct.getMembers());\n                return 3;\n            }\n            return 0;\n        }\n    }\n\n    // END of Step3Frame\n    /**\n     * *************************************************************************\n     *                               STEP 3.1\n     * **************************************************************************\n     */\n    private class Step3_1Frame extends JInternalFrame {\n\n        private static final long serialVersionUID = -7956322878889418413L;\n\n        // Count the parameters\n        private int index = 0;\n\n        private boolean flagFunctionSelected = false;\n\n        private boolean flagSocialSelected = false;\n\n        private String consumerTypeName;\n\n        private String[] availableFunctionsNames = new String[availableFunctions.length];\n\n        {\n            for (int i = 0; i < availableFunctions.length; i++) availableFunctionsNames[i] = availableFunctions[i].getFunctionName();\n        }\n\n        private JPanel contentPane = (JPanel) this.getContentPane();\n\n        {\n            contentPane.setLayout(new BorderLayout());\n            this.setClosable(true);\n            this.setDefaultCloseOperation(JInternalFrame.HIDE_ON_CLOSE);\n            this.setResizable(false);\n            this.setSize(new Dimension(650, 400));\n        }\n\n        //*******************************************************\n        // TITLE PANEL\n        private JPanel titlePanel = new JPanel(new GridLayout(2, 1, 5, 5));\n\n        {\n            titlePanel.setBorder(BorderFactory.createEtchedBorder());\n            titlePanel.setPreferredSize(new Dimension(0, 150));\n        }\n\n        //*******************************************************\n        private JPanel subTitlePanel = new JPanel(new FlowLayout(FlowLayout.CENTER, 5, 5));\n\n        {\n            titlePanel.add(subTitlePanel, null);\n        }\n\n        private JLabel titleLabel1 = new JLabel();\n\n        {\n            titleLabel1.setFont(new java.awt.Font(\"Dialog\", 1, 12));\n            titleLabel1.setBorder(BorderFactory.createRaisedBevelBorder());\n            titleLabel1.setHorizontalAlignment(SwingConstants.CENTER);\n            titleLabel1.setHorizontalTextPosition(SwingConstants.CENTER);\n            subTitlePanel.add(titleLabel1, null);\n        }\n\n        private JLabel titleLabel2 = new JLabel();\n\n        {\n            titleLabel2.setFont(new java.awt.Font(\"Dialog\", 1, 12));\n            titleLabel2.setHorizontalAlignment(SwingConstants.CENTER);\n            titleLabel2.setHorizontalTextPosition(SwingConstants.CENTER);\n            titleLabel2.setForeground(SystemColor.textText);\n            titlePanel.add(titleLabel2, null);\n        }\n\n        //***************************END of title panel*********************************\n        //*******************************************************\n        // Center PANEL\n        private JPanel centerPanel = new JPanel(new GridLayout(3, 1, 0, 0));\n\n        {\n            centerPanel.setBorder(BorderFactory.createEtchedBorder());\n        }\n\n        //*******************************************************\n        // INPUT PANEL\n        private JPanel inputPanel = new JPanel(new FlowLayout(FlowLayout.CENTER, 15, 20));\n\n        {\n            inputPanel.setBorder(BorderFactory.createEtchedBorder());\n        }\n\n        //*******************************************************\n        private JLabel inputLabelElasticity = new JLabel(\"Elasticity  :\");\n\n        {\n            inputLabelElasticity.setFont(new java.awt.Font(\"Dialog\", 1, 12));\n            inputLabelElasticity.setBorder(BorderFactory.createEtchedBorder());\n            inputLabelElasticity.setHorizontalAlignment(SwingConstants.CENTER);\n            inputLabelElasticity.setHorizontalTextPosition(SwingConstants.CENTER);\n            inputPanel.add(inputLabelElasticity, null);\n        }\n\n        private JTextField textFieldElasticity = new JTextField(7);\n\n        {\n            textFieldElasticity.setBorder(BorderFactory.createLoweredBevelBorder());\n            inputPanel.add(textFieldElasticity, null);\n        }\n\n        private JLabel inputLabelFunction = new JLabel(\"Function\");\n\n        {\n            inputLabelFunction.setFont(new java.awt.Font(\"Dialog\", 1, 12));\n            inputLabelFunction.setHorizontalAlignment(SwingConstants.CENTER);\n            inputLabelFunction.setHorizontalTextPosition(SwingConstants.CENTER);\n            inputPanel.add(inputLabelFunction, null);\n        }\n\n        private JComboBox functionCombo = new JComboBox(availableFunctionsNames);\n\n        {\n            inputPanel.add(functionCombo, null);\n            functionCombo.addActionListener(new ActionListener() {\n\n                public void actionPerformed(ActionEvent e) {\n                    if (\"comboBoxChanged\".equals(e.getActionCommand())) {\n                        functionPanel.removeAll();\n                        functionPanel.validate();\n                        flagFunctionSelected = true;\n                        if (functionCombo.getSelectedItem().toString().equals(\"MetDATA\") || functionCombo.getSelectedItem().toString().equals(\"PRICE\")) {\n                            // to pass the ok test and will be changed\n                            flagSocialSelected = true;\n                            socialCombo.setEnabled(false);\n                            socialPanel.removeAll();\n                            socialPanel.setBorder(BorderFactory.createEmptyBorder());\n                            socialPanel.validate();\n                        } else if (demandCurveParameters[index].getSocial().booleanValue()) {\n                            socialCombo.setEnabled(true);\n                        }\n                        createParametersPanel(functionPanel, availableFunctions[functionCombo.getSelectedIndex()]);\n                    }\n                }\n            });\n        }\n\n        private JLabel inputLabelSocial = new JLabel(\"Social Function\");\n\n        {\n            inputLabelSocial.setFont(new java.awt.Font(\"Dialog\", 1, 12));\n            inputLabelSocial.setHorizontalAlignment(SwingConstants.CENTER);\n            inputLabelSocial.setHorizontalTextPosition(SwingConstants.CENTER);\n            inputPanel.add(inputLabelSocial, null);\n        }\n\n        private JComboBox socialCombo = new JComboBox(availableFunctionsNames);\n\n        {\n            socialCombo.removeItem(\"MetDATA\");\n            socialCombo.removeItem(\"PRICE\");\n            socialCombo.setEnabled(false);\n            inputPanel.add(socialCombo, null);\n            socialCombo.addActionListener(new ActionListener() {\n\n                public void actionPerformed(ActionEvent e) {\n                    if (\"comboBoxChanged\".equals(e.getActionCommand())) {\n                        socialPanel.removeAll();\n                        socialPanel.validate();\n                        flagSocialSelected = true;\n                        createParametersPanel(socialPanel, availableFunctions[socialCombo.getSelectedIndex()]);\n                    }\n                }\n            });\n        }\n\n        //***************************END of Input Panel**********************\n        //*******************************************************\n        // Function PANEL\n        private JPanel functionPanel = new JPanel(new FlowLayout(FlowLayout.CENTER, 5, 5));\n\n        {\n            functionPanel.setName(\"FUNCTION\");\n        }\n\n        //*******************************************************\n        // Social PANEL\n        private JPanel socialPanel = new JPanel(new FlowLayout(FlowLayout.CENTER, 5, 5));\n\n        {\n            socialPanel.setName(\"SOCIAL\");\n        }\n\n        //*******************************************************\n        // End PANEL\n        private JPanel endPanel = new JPanel(new FlowLayout(FlowLayout.CENTER, 10, 10));\n\n        {\n            endPanel.setBorder(BorderFactory.createEtchedBorder());\n            titlePanel.setPreferredSize(new Dimension(0, 60));\n        }\n\n        //*******************************************************\n        private JButton okButton = new JButton(\"   OK   \");\n\n        {\n            okButton.setBorder(BorderFactory.createRaisedBevelBorder());\n            endPanel.add(okButton, null);\n            okButton.addActionListener(new ActionListener() {\n\n                @SuppressWarnings({ \"unchecked\", \"unchecked\" })\n                public void actionPerformed(ActionEvent ev) {\n                    if (flagFunctionSelected && (demandCurveParameters[index].getSocial().booleanValue() ? flagSocialSelected : true)) {\n                        try {\n                            int i = 0;\n                            boolean ok = true;\n                            // Saving this consumer type parameters\n                            ParameterAttributes pa = new ParameterAttributes();\n                            pa.setName(demandCurveParameters[index].getName());\n                            pa.setElasticity(new Float(textFieldElasticity.getText()).floatValue());\n                            pa.setLn(demandCurveParameters[index].getLn().booleanValue());\n                            pa.setDemandCurveFunction((Function) availableFunctions[functionCombo.getSelectedIndex()].getClass().newInstance());\n                            //********************************\n                            if (// 6\n                            functionCombo.getSelectedItem().equals(\"PRICE\"))\n                                pa.getDemandCurveFunction().setFunctionName(\"PRICE\");\n                            if (functionCombo.getSelectedItem().equals(\"RANDOM-INT\"))\n                                pa.getDemandCurveFunction().setFunctionName(\"RANDOM-INT\");\n                            if (functionCombo.getSelectedItem().equals(\"RANDOM-FL\"))\n                                pa.getDemandCurveFunction().setFunctionName(\"RANDOM-FL\");\n                            //********************************\n                            Vector v = new Vector(0);\n                            Iterator it = pa.getDemandCurveFunction().getFunctionConstants();\n                            while (it.hasNext()) {\n                                Function.FunctionConstant fc = (Function.FunctionConstant) it.next();\n                                if (fc.asFloat())\n                                    fc.setConstantValue(new Float(simpleTextFields[0][i].getText()).floatValue());\n                                else\n                                    ok = fc.setConstantValue(simpleTextFields[0][i].getText());\n                                if (!ok)\n                                    new Float(\"zong!!\");\n                                v.addElement(fc);\n                                i++;\n                            }\n                            pa.getDemandCurveFunction().setFunctionConstants(v);\n                            // if it is social PARAMETER\n                            if (pa.getDemandCurveFunction().getFunctionName().equals(\"MetDATA\") || pa.getDemandCurveFunction().getFunctionName().equals(\"PRICE\"))\n                                demandCurveParameters[index].setSocial(Boolean.FALSE);\n                            else if (demandCurveParameters[index].getSocial().booleanValue()) {\n                                pa.setSocial(true);\n                                pa.setSocialFunction((Function) availableFunctions[socialCombo.getSelectedIndex()].getClass().newInstance());\n                                //********************************\n                                if (socialCombo.getSelectedItem().equals(\"RANDOM-INT\"))\n                                    pa.getSocialFunction().setFunctionName(\"RANDOM-INT\");\n                                if (socialCombo.getSelectedItem().equals(\"RANDOM-FL\"))\n                                    pa.getSocialFunction().setFunctionName(\"RANDOM-FL\");\n                                //********************************\n                                i = 0;\n                                Vector v2 = new Vector(0);\n                                it = pa.getSocialFunction().getFunctionConstants();\n                                while (it.hasNext()) {\n                                    Function.FunctionConstant fc = (Function.FunctionConstant) it.next();\n                                    if (fc.asFloat())\n                                        fc.setConstantValue(new Float(simpleTextFields[1][i].getText()).floatValue());\n                                    else\n                                        ok = fc.setConstantValue(simpleTextFields[1][i].getText());\n                                    if (!ok)\n                                        new Float(\"zong!!\");\n                                    v2.addElement(fc);\n                                    i++;\n                                }\n                                pa.getSocialFunction().setFunctionConstants(v2);\n                            }\n                            consumerTypeParameters.addElement(pa);\n                            // *****************************End of Saving********************************\n                            if (index >= demandCurveParameters.length - 1) {\n                                Step3_1Frame.this.setVisible(false);\n                                step3.setVisible(true);\n                            } else if (JOptionPane.showConfirmDialog(Step3_1Frame.this, \"Continue to next Parameter\", \"Confirm\", JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE) == JOptionPane.YES_OPTION) {\n                                // Reset flag and fields\n                                flagFunctionSelected = false;\n                                flagSocialSelected = false;\n                                textFieldElasticity.setText(\"\");\n                                //Next parameter\n                                index++;\n                                Step3_1Frame.this.setTitle(\"Scenario Design Wizard - Step 3 - \" + (index + 1) + \"/\" + demandCurveParameters.length);\n                                titleLabel2.setText(\"Demand Curve Parameter : \" + demandCurveParameters[index].getName());\n                                functionPanel.removeAll();\n                                functionPanel.validate();\n                                functionPanel.setBorder(BorderFactory.createEmptyBorder());\n                                socialPanel.removeAll();\n                                socialPanel.validate();\n                                socialPanel.setBorder(BorderFactory.createEmptyBorder());\n                                socialCombo.setEnabled(demandCurveParameters[index].getSocial().booleanValue() ? true : false);\n                                if (demandCurveParameters[index].getName().equals(\"TEMPERATURE\") || demandCurveParameters[index].getName().equals(\"RAINFALL\")) {\n                                    functionCombo.setEnabled(false);\n                                    flagFunctionSelected = true;\n                                    functionCombo.setSelectedItem(\"MetDATA\");\n                                } else\n                                    // if-temperature\n                                    functionCombo.setEnabled(true);\n                            }\n                            // ELSE-if\n                        } catch (NumberFormatException nfe) {\n                            JOptionPane.showMessageDialog(Step3_1Frame.this, \"Invalid INPUTS !!!\", \"Error\", JOptionPane.ERROR_MESSAGE);\n                        } catch (IllegalAccessException iae) {\n                            iae.printStackTrace();\n                        } catch (InstantiationException ie) {\n                            ie.printStackTrace();\n                        }\n                    } else // IF  for Flags\n                    {\n                        // functions are not selected\n                        JOptionPane.showMessageDialog(Step3_1Frame.this, \"Select Functions !!!\", \"Error\", JOptionPane.ERROR_MESSAGE);\n                    }\n                }\n            });\n        }\n\n        // END okButton\n        //***************************END of End Panel**********************\n        private int maxConstants = 0;\n\n        {\n            for (int i = 0; i < availableFunctions.length; i++) if (availableFunctions[i].constantsNumber() > maxConstants)\n                maxConstants = availableFunctions[i].constantsNumber();\n        }\n\n        private JLabel[][] simpleLabels = new JLabel[2][maxConstants];\n\n        {\n            for (int j = 0; j < 2; j++) for (int i = 0; i < maxConstants; i++) {\n                simpleLabels[j][i] = new JLabel();\n                simpleLabels[j][i].setFont(new java.awt.Font(\"Dialog\", 1, 12));\n                //simpleLabels[j][i].setHorizontalAlignment(SwingConstants.CENTER);\n                simpleLabels[j][i].setHorizontalTextPosition(SwingConstants.CENTER);\n                simpleLabels[j][i].setSize(new Dimension(20, 15));\n            }\n        }\n\n        private JTextField[][] simpleTextFields = new JTextField[2][maxConstants];\n\n        {\n            for (int j = 0; j < 2; j++) for (int i = 0; i < maxConstants; i++) {\n                simpleTextFields[j][i] = new JTextField(4);\n                simpleTextFields[j][i].setBorder(BorderFactory.createLoweredBevelBorder());\n            }\n        }\n\n        private void createParametersPanel(JPanel panel, Function function) {\n            int j = ((panel.getName() == \"FUNCTION\") ? 0 : 1);\n            String title = ((panel.getName() == \"FUNCTION\") ? \"Function  :\" : \"Social Function  :\");\n            panel.setBorder(BorderFactory.createCompoundBorder(BorderFactory.createTitledBorder(BorderFactory.createLineBorder(SystemColor.BLACK), title + \"   \" + function.getFunctionName().toLowerCase() + \"    \" + function.getFunctionRepresentation()), BorderFactory.createEmptyBorder(5, 5, 5, 5)));\n            int i = 0;\n            Iterator it = function.getFunctionConstants();\n            while (it.hasNext()) {\n                Function.FunctionConstant fc = (Function.FunctionConstant) it.next();\n                simpleLabels[j][i].setText(fc.getConstantName() + \" : \");\n                panel.add(simpleLabels[j][i], null);\n                simpleTextFields[j][i].setText(function.getFunctionName().equals(\"MetDATA\") ? \"1\" : \"\");\n                panel.add(simpleTextFields[j][i], null);\n                i++;\n            }\n            panel.validate();\n        }\n\n        // End createParametersPanel\n        // Constructor\n        Step3_1Frame(String consumerTypeName) {\n            this.consumerTypeName = consumerTypeName;\n            this.setTitle(\"STEP 3 - 1/\" + demandCurveParameters.length);\n            titleLabel1.setText(this.consumerTypeName + \" Consumer Type\");\n            titleLabel2.setText(\"Demand Curve Parameter : \" + demandCurveParameters[0].getName());\n            contentPane.add(titlePanel, BorderLayout.NORTH);\n            contentPane.add(centerPanel, BorderLayout.CENTER);\n            centerPanel.add(inputPanel);\n            centerPanel.add(functionPanel);\n            centerPanel.add(socialPanel);\n            contentPane.add(endPanel, BorderLayout.SOUTH);\n            if (demandCurveParameters[0].getName().equals(\"TEMPERATURE\") || demandCurveParameters[0].getName().equals(\"RAINFALL\")) {\n                functionCombo.setEnabled(false);\n                flagFunctionSelected = true;\n                functionCombo.setSelectedItem(\"MetDATA\");\n            } else // if\n            if (demandCurveParameters[0].getSocial().booleanValue())\n                socialCombo.setEnabled(true);\n            mainPanel.add(this, layer);\n        }\n        // END od constructor\n    }\n\n    // END of Step3_1Frame\n    /**\n     * *************************************************************************\n     *                               STEP 4\n     * **************************************************************************\n     */\n    private class Step4Frame extends JInternalFrame {\n\n        private static final long serialVersionUID = -5384578159639835523L;\n\n        // Constructor\n        Step4Frame() {\n            showStep4();\n        }\n\n        private void showStep4() {\n            boolean fileChosen = false;\n            int i = 0;\n            while (i < demandCurveParameters.length && !launchMOA.booleanValue()) {\n                if (demandCurveParameters[i].getName().equals(\"TEMPERATURE\") || demandCurveParameters[i].getName().equals(\"RAINFALL\"))\n                    launchMOA = Boolean.valueOf(true);\n                i++;\n            }\n            String msg = \"\";\n            if (launchMOA.booleanValue()) {\n                JOptionPane.showMessageDialog(mainPanel, \"MetOffice Agent will be launched !!\\nSelect file with meteorological data\", \"Step 4\", JOptionPane.INFORMATION_MESSAGE);\n                // instantiate file chooser\n                JFileChooser chooser = new JFileChooser(System.getProperty(\"user.dir\"));\n                // file chooser properties\n                chooser.setControlButtonsAreShown(true);\n                chooser.setDialogType(JFileChooser.CUSTOM_DIALOG);\n                chooser.setAcceptAllFileFilterUsed(true);\n                chooser.setFileSelectionMode(JFileChooser.FILES_ONLY);\n                chooser.setMultiSelectionEnabled(false);\n                chooser.setSelectedFile(null);\n                chooser.setDialogTitle(\"Scenario Design Wizard - Step 4\");\n                chooser.setLocation(50, 50);\n                int returnValue = chooser.showDialog(mainPanel, \"Load\");\n                if (returnValue == JFileChooser.APPROVE_OPTION) {\n                    ScenarioDesignWizard.this.metDataFile = chooser.getSelectedFile();\n                    if (ScenarioDesignWizard.this.metDataFile != null) {\n                        msg = \"You chose this file: \" + ScenarioDesignWizard.this.metDataFile.getPath();\n                        fileChosen = true;\n                    }\n                } else if (returnValue == JFileChooser.CANCEL_OPTION) {\n                    msg = \"User cancelled operation. No file was chosen.\";\n                } else if (returnValue == JFileChooser.ERROR_OPTION) {\n                    msg = \"An error occured. No file was chosen.\";\n                } else {\n                    msg = \"Unknown operation occured.\";\n                }\n            } else {\n                msg = \"MetOffice Agent WON'T be launched !!\";\n                fileChosen = true;\n            }\n            JOptionPane.showMessageDialog(mainPanel, msg, \"Step 4\", JOptionPane.INFORMATION_MESSAGE);\n            if (fileChosen) {\n                step5 = new Step5Frame();\n                step5.setLocation(50, 50);\n                step5.setVisible(true);\n            } else\n                step3.setVisible(true);\n        }\n        // END of showStep4\n    }\n\n    // END of Step4Frame\n    /**\n     * *************************************************************************\n     *                               STEP 5\n     * **************************************************************************\n     */\n    private class Step5Frame extends JInternalFrame {\n\n        private static final long serialVersionUID = 1560906109955756274L;\n\n        int chosenScenario = 0;\n\n        Integer reviewPeriod;\n\n        Float CPI;\n\n        Float CPIpercentage;\n\n        Vector scenarioVariables = new Vector(0, 1);\n\n        // Constructor\n        Step5Frame() {\n            mainPanel.add(this, layer);\n        }\n\n        private JPanel contentPane = (JPanel) this.getContentPane();\n\n        {\n            contentPane.setLayout(new BorderLayout());\n            this.setClosable(true);\n            this.setDefaultCloseOperation(JInternalFrame.HIDE_ON_CLOSE);\n            this.setResizable(false);\n            this.setSize(new Dimension(500, 430));\n            this.setTitle(\"STEP 5/6 - Pricing Policy\");\n        }\n\n        //*******************************************************\n        // INPUT PANEL\n        private JPanel inputPanel = new JPanel(new GridLayout(3, 1, 0, 0));\n\n        {\n            inputPanel.setBorder(BorderFactory.createEtchedBorder());\n            //inputPanel.setPreferredSize(new Dimension(0,100));\n            contentPane.add(inputPanel, BorderLayout.NORTH);\n        }\n\n        //*******************************************************\n        // Scenarios\n        private JPanel panel1 = new JPanel(new GridLayout(2, 1));\n\n        {\n            inputPanel.add(panel1, null);\n        }\n\n        private JPanel panel1_a = new JPanel(new FlowLayout(FlowLayout.CENTER));\n\n        {\n            panel1.add(panel1_a, null);\n        }\n\n        private JComboBox scenarioCombo = new JComboBox(availablePricingScenarios);\n\n        {\n            //panel1.setSize(0,40);\n            panel1_a.add(scenarioCombo, null);\n            scenarioCombo.addActionListener(new ActionListener() {\n\n                public void actionPerformed(ActionEvent e) {\n                    chosenScenario = scenarioCombo.getSelectedIndex();\n                }\n            });\n        }\n\n        private JPanel panel1_b = new JPanel(new FlowLayout(FlowLayout.CENTER));\n\n        {\n            panel1.add(panel1_b, null);\n        }\n\n        private JLabel labelReview = new JLabel(\"Policy reviewing every :\");\n\n        {\n            labelReview.setFont(new java.awt.Font(\"Dialog\", 1, 12));\n            labelReview.setHorizontalAlignment(SwingConstants.CENTER);\n            labelReview.setHorizontalTextPosition(SwingConstants.CENTER);\n            panel1_b.add(labelReview, null);\n        }\n\n        private JTextField textReview = new JTextField(5);\n\n        {\n            textReview.setBorder(BorderFactory.createLoweredBevelBorder());\n            panel1_b.add(textReview, null);\n        }\n\n        private JLabel labelStepsReview = new JLabel(\" simulation step(s)\");\n\n        {\n            labelStepsReview.setFont(new java.awt.Font(\"Dialog\", 1, 12));\n            labelStepsReview.setHorizontalAlignment(SwingConstants.CENTER);\n            labelStepsReview.setHorizontalTextPosition(SwingConstants.CENTER);\n            panel1_b.add(labelStepsReview, null);\n        }\n\n        // CPI\n        private JPanel panel2 = new JPanel(new FlowLayout(FlowLayout.CENTER, 0, 0));\n\n        private JPanel panel2a = new JPanel(new GridLayout(2, 2));\n\n        {\n            panel2.setBorder(BorderFactory.createEtchedBorder());\n            panel2.add(panel2a, null);\n            inputPanel.add(panel2, null);\n        }\n\n        private JLabel labelCPI = new JLabel(\"Consumer Price Index (CPI) :\");\n\n        {\n            labelCPI.setFont(new java.awt.Font(\"Dialog\", 1, 12));\n            panel2a.add(labelCPI, null);\n        }\n\n        private JPanel panel_a = new JPanel(new FlowLayout(FlowLayout.LEFT));\n\n        private JTextField textCPI = new JTextField(10);\n\n        {\n            textCPI.setBorder(BorderFactory.createLoweredBevelBorder());\n            panel2a.add(panel_a, null);\n            panel_a.add(textCPI, null);\n        }\n\n        private JLabel labelPercentage = new JLabel(\"Increasing Percentage :\");\n\n        {\n            labelPercentage.setFont(new java.awt.Font(\"Dialog\", 1, 12));\n            panel2a.add(labelPercentage, null);\n        }\n\n        private JPanel panel_b = new JPanel(new FlowLayout(FlowLayout.LEADING));\n\n        private JTextField textPercentage = new JTextField(10);\n\n        {\n            textPercentage.setBorder(BorderFactory.createLoweredBevelBorder());\n            panel2a.add(panel_b, null);\n            panel_b.add(textPercentage, null);\n        }\n\n        // Price Variables\n        private JPanel panel3 = new JPanel(new FlowLayout(FlowLayout.CENTER, 0, 0));\n\n        private JPanel panel3a = new JPanel(new GridLayout(2, 1));\n\n        private JRadioButton[] buttons = new JRadioButton[2];\n\n        private ButtonGroup group = new ButtonGroup();\n\n        {\n            buttons[0] = new JRadioButton(\"Average Price (AP)\");\n            buttons[1] = new JRadioButton(\"Marginal Price (MP)\");\n            group.add(buttons[0]);\n            group.add(buttons[1]);\n            buttons[0].setSelected(true);\n            panel3a.add(buttons[0], null);\n            panel3a.add(buttons[1], null);\n            panel3a.setBorder(BorderFactory.createEmptyBorder(5, 0, 5, 0));\n            panel3.add(panel3a, null);\n            inputPanel.add(panel3, null);\n        }\n\n        //***************************END of input panel*********************************\n        //*******************************************************\n        // TABLE PANEL\n        private JPanel tablePanel = new JPanel(new FlowLayout(FlowLayout.CENTER));\n\n        {\n            tablePanel.setBorder(BorderFactory.createEtchedBorder());\n            contentPane.add(tablePanel, BorderLayout.CENTER);\n        }\n\n        //*******************************************************\n        private TableModel model = new AbstractTableModel() {\n\n            private static final long serialVersionUID = 4616524774096974641L;\n\n            private String[] columnsNames = { \"Block No\", \"Limit Down\", \"Limit Up\", \"Price\" };\n\n            private Object[][] data = new Object[10][4];\n\n            {\n                // Initialize price table\n                for (int i = 0; i < 10; i++) data[i][0] = String.valueOf(i + 1);\n                data[0][1] = \"0\";\n            }\n\n            public int getColumnCount() {\n                return columnsNames.length;\n            }\n\n            public int getRowCount() {\n                return data.length;\n            }\n\n            public String getColumnName(int col) {\n                return columnsNames[col];\n            }\n\n            public Object getValueAt(int row, int col) {\n                return data[row][col];\n            }\n\n            public void setValueAt(Object value, int row, int col) {\n                data[row][col] = value;\n                if (col == 2)\n                    data[row + 1][col - 1] = value;\n                fireTableCellUpdated(row, col);\n            }\n\n            public boolean isCellEditable(int row, int column) {\n                // 1st & 2nd columns is read-only (limit Down)\n                return ((column != 0) && (column != 1));\n            }\n        };\n\n        private JTable table = new JTable(model);\n\n        private JScrollPane scroll = new JScrollPane(table);\n\n        {\n            scroll.setBorder(BorderFactory.createRaisedBevelBorder());\n            scroll.setPreferredSize(new Dimension(300, 100));\n            tablePanel.add(scroll, null);\n        }\n\n        //***************************END of List Panel**********************\n        //*******************************************************\n        // NAVIGATION PANEL\n        private JPanel navigationPanel = new JPanel(new FlowLayout(FlowLayout.CENTER, 30, 10));\n\n        {\n            navigationPanel.setBorder(BorderFactory.createEtchedBorder());\n            navigationPanel.setPreferredSize(new Dimension(0, 40));\n            contentPane.add(navigationPanel, BorderLayout.SOUTH);\n        }\n\n        //*******************************************************\n        private JButton cancelButton = new JButton(\"    Cancel    \");\n\n        {\n            cancelButton.setBorder(BorderFactory.createRaisedBevelBorder());\n            navigationPanel.add(cancelButton, null);\n            cancelButton.addActionListener(new ActionListener() {\n\n                public void actionPerformed(ActionEvent ev) {\n                    try {\n                        Step5Frame.this.setClosed(true);\n                    } catch (java.beans.PropertyVetoException ex) {\n                    }\n                }\n            });\n        }\n\n        // END cancelButton\n        private JButton previousButton = new JButton(\"  << Previous  \");\n\n        {\n            previousButton.setBorder(BorderFactory.createRaisedBevelBorder());\n            navigationPanel.add(previousButton);\n            previousButton.addActionListener(new ActionListener() {\n\n                public void actionPerformed(ActionEvent ev) {\n                    step5.setVisible(false);\n                    step4 = new Step4Frame();\n                }\n            });\n        }\n\n        // END previousButton\n        private JButton nextButton = new JButton(\" Next  >> \");\n\n        {\n            nextButton.setBorder(BorderFactory.createRaisedBevelBorder());\n            navigationPanel.add(nextButton);\n            nextButton.addActionListener(new ActionListener() {\n\n                @SuppressWarnings(\"unchecked\")\n                public void actionPerformed(ActionEvent ev) {\n                    int countBlocks = 1;\n                    while (countBlocks < 10 && model.getValueAt(countBlocks, 3) != null && !model.getValueAt(countBlocks, 3).equals((String) \"\")) countBlocks++;\n                    // Set last block's limit up to infinity\n                    model.setValueAt(\"100000000\", countBlocks - 1, 2);\n                    boolean check = true;\n                    try {\n                        reviewPeriod = new Integer(textReview.getText());\n                        CPI = new Float(textCPI.getText());\n                        CPIpercentage = new Float(textPercentage.getText());\n                    } catch (NumberFormatException nfee) {\n                        JOptionPane.showMessageDialog(Step5Frame.this, \" Invalid input!! CPI's attributes must be a float and review period an integer\", \"Error\", JOptionPane.ERROR_MESSAGE);\n                        check = false;\n                    }\n                    if (check && checkTable(countBlocks)) {\n                        //  JOptionPane.showMessageDialog(Step5Frame.this,\"Scenario is ready!!\",\"Information\",\n                        //                                                        JOptionPane.INFORMATION_MESSAGE);\n                        priceData.addElement(new Integer(chosenScenario));\n                        priceData.addElement(Step5Frame.this.scenarioVariables);\n                        priceData.addElement(reviewPeriod);\n                        priceData.addElement(CPI);\n                        priceData.addElement(CPIpercentage);\n                        if (buttons[0].isSelected())\n                            priceData.addElement(new String(\"AP\"));\n                        else\n                            priceData.addElement(new String(\"MP\"));\n                        priceData.addElement(new Integer(countBlocks));\n                        for (int i = 0; i < countBlocks; i++) {\n                            priceData.addElement(new Integer(model.getValueAt(i, 1).toString()));\n                            priceData.addElement(new Integer(model.getValueAt(i, 2).toString()));\n                            priceData.addElement(new Float(model.getValueAt(i, 3).toString()));\n                        }\n                        step5.setVisible(false);\n                        step6 = new Step6Frame();\n                        step6.setLocation(50, 50);\n                        step6.setVisible(true);\n                    }\n                }\n            });\n        }\n\n        // END nextButton\n        private boolean checkTable(int blocks) {\n            try {\n                for (int i = 0; i < blocks; i++) {\n                    new Integer((String) model.getValueAt(i, 2));\n                    new Float((String) model.getValueAt(i, 3));\n                }\n            } catch (NumberFormatException nfe) {\n                JOptionPane.showMessageDialog(Step5Frame.this, \" Invalid input !! Limit down must be an integer and price must be a float\", \"Error\", JOptionPane.ERROR_MESSAGE);\n                return false;\n            } catch (NullPointerException npe) {\n                JOptionPane.showMessageDialog(Step5Frame.this, \" Price table is not properly filled in!!\", \"Error\", JOptionPane.ERROR_MESSAGE);\n                return false;\n            }\n            return true;\n        }\n        //***************************END of Navigation Panel**********************\n    }\n\n    // END of Step5Frame\n    /**\n     * *************************************************************************\n     *                               STEP 6\n     * **************************************************************************\n     */\n    private class Step6Frame extends JInternalFrame {\n\n        private static final long serialVersionUID = -1969313893449647589L;\n\n        Float meanValue;\n\n        Float deviationValue;\n\n        // Constructor\n        Step6Frame() {\n            mainPanel.add(this, layer);\n        }\n\n        private JPanel contentPane = (JPanel) this.getContentPane();\n\n        {\n            contentPane.setLayout(new BorderLayout());\n            this.setClosable(true);\n            this.setDefaultCloseOperation(JInternalFrame.HIDE_ON_CLOSE);\n            this.setResizable(false);\n            this.setSize(new Dimension(500, 250));\n            this.setTitle(\"STEP 6/6 - Scenario Design Wizard\");\n        }\n\n        //*******************************************************\n        // DATA PANEL\n        private JPanel dataPanel = new JPanel(new GridLayout(3, 1));\n\n        {\n            dataPanel.setBorder(BorderFactory.createEtchedBorder());\n            contentPane.add(dataPanel, BorderLayout.CENTER);\n        }\n\n        //*******************************************************\n        private JPanel panel1 = new JPanel(new FlowLayout(FlowLayout.CENTER, 10, 0));\n\n        {\n            dataPanel.add(panel1, null);\n        }\n\n        private JLabel labelInfo = new JLabel(\"Define the Gaussian distribution which community's initial consumptions follow\");\n\n        {\n            labelInfo.setFont(new java.awt.Font(\"Dialog\", 1, 12));\n            labelInfo.setBorder(BorderFactory.createCompoundBorder(BorderFactory.createLoweredBevelBorder(), BorderFactory.createEmptyBorder(10, 10, 10, 10)));\n            labelInfo.setHorizontalAlignment(SwingConstants.CENTER);\n            labelInfo.setHorizontalTextPosition(SwingConstants.CENTER);\n            panel1.add(labelInfo, null);\n        }\n\n        private JPanel panel2 = new JPanel(new FlowLayout(FlowLayout.CENTER));\n\n        {\n            dataPanel.add(panel2, null);\n        }\n\n        private JLabel labelMean = new JLabel(\"Mean value (�) - (m3):\");\n\n        {\n            labelMean.setFont(new java.awt.Font(\"Dialog\", 1, 12));\n            labelMean.setHorizontalAlignment(SwingConstants.CENTER);\n            labelMean.setHorizontalTextPosition(SwingConstants.CENTER);\n            panel2.add(labelMean, null);\n        }\n\n        private JTextField textMean = new JTextField(5);\n\n        {\n            textMean.setBorder(BorderFactory.createLoweredBevelBorder());\n            panel2.add(textMean, null);\n        }\n\n        private JPanel panel3 = new JPanel(new FlowLayout(FlowLayout.CENTER));\n\n        {\n            dataPanel.add(panel3, null);\n        }\n\n        private JLabel labelDev = new JLabel(\"Deviation (�^2) :\");\n\n        {\n            labelDev.setFont(new java.awt.Font(\"Dialog\", 1, 12));\n            labelDev.setHorizontalAlignment(SwingConstants.CENTER);\n            labelDev.setHorizontalTextPosition(SwingConstants.CENTER);\n            panel3.add(labelDev, null);\n        }\n\n        private JTextField textDev = new JTextField(5);\n\n        {\n            textDev.setBorder(BorderFactory.createLoweredBevelBorder());\n            panel3.add(textDev, null);\n        }\n\n        //*******************************************************\n        // NAVIGATION PANEL\n        private JPanel navigationPanel = new JPanel(new FlowLayout(FlowLayout.CENTER, 30, 10));\n\n        {\n            navigationPanel.setBorder(BorderFactory.createEtchedBorder());\n            navigationPanel.setPreferredSize(new Dimension(0, 40));\n            contentPane.add(navigationPanel, BorderLayout.SOUTH);\n        }\n\n        //*******************************************************\n        private JButton cancelButton = new JButton(\"     Cancel    \");\n\n        {\n            cancelButton.setBorder(BorderFactory.createRaisedBevelBorder());\n            navigationPanel.add(cancelButton, null);\n            cancelButton.addActionListener(new ActionListener() {\n\n                public void actionPerformed(ActionEvent ev) {\n                    try {\n                        Step6Frame.this.setClosed(true);\n                    } catch (java.beans.PropertyVetoException ex) {\n                    }\n                }\n            });\n        }\n\n        // END cancelButton\n        private JButton previousButton = new JButton(\"  << Previous  \");\n\n        {\n            previousButton.setBorder(BorderFactory.createRaisedBevelBorder());\n            navigationPanel.add(previousButton);\n            previousButton.addActionListener(new ActionListener() {\n\n                public void actionPerformed(ActionEvent ev) {\n                    step6.setVisible(false);\n                    step5.setVisible(true);\n                }\n            });\n        }\n\n        // END previousButton\n        private JButton nextButton = new JButton(\"End Wizard\");\n\n        {\n            nextButton.setBorder(BorderFactory.createRaisedBevelBorder());\n            navigationPanel.add(nextButton);\n            //Inform SuiteGUI to read inputs\n            nextButton.addActionListener(suite);\n            nextButton.addActionListener(new ActionListener() {\n\n                public void actionPerformed(ActionEvent ev) {\n                    if (checkInputs()) {\n                        saveInputs();\n                        step6.setVisible(false);\n                    }\n                }\n            });\n        }\n\n        // END nextButton\n        //***************************END of Navigation Panel**********************\n        private boolean checkInputs() {\n            boolean t = true;\n            try {\n                meanValue = new Float(textMean.getText());\n                deviationValue = new Float(textDev.getText());\n                t = true;\n            } catch (NumberFormatException nfe) {\n                JOptionPane.showMessageDialog(this, \"Fill in the fields with floats !!!\", \"Error\", JOptionPane.ERROR_MESSAGE);\n                t = false;\n            }\n            return t;\n        }\n\n        @SuppressWarnings(\"unchecked\")\n        private void saveInputs() {\n            distributionData.addElement(meanValue);\n            distributionData.addElement(deviationValue);\n        }\n    }\n\n    // END of Step6Frame\n    //*******************************************************************************************\n    public Object[] packedInputs() {\n        Object[] allInputs = new Object[12];\n        // add parameters\n        for (int i = 0; i < 5; i++) allInputs[i] = simulationParameters[i];\n        allInputs[5] = consumerTypes;\n        allInputs[6] = this.consumptionLn;\n        allInputs[7] = new Integer(demandCurveParameters.length);\n        allInputs[8] = consumerTypeParameters;\n        allInputs[9] = this.metDataFile;\n        allInputs[10] = priceData;\n        allInputs[11] = distributionData;\n        return allInputs;\n    }\n\n    //*******************************************************************************************\n    public class Parameter {\n\n        private String name;\n\n        private Boolean ln, social;\n\n        public Parameter() {\n        }\n\n        public Parameter(String n, Boolean log, Boolean soc) {\n            this.name = n;\n            this.ln = log;\n            this.social = soc;\n        }\n\n        public String getName() {\n            return this.name;\n        }\n\n        public Boolean getLn() {\n            return this.ln;\n        }\n\n        public Boolean getSocial() {\n            return this.social;\n        }\n\n        public void setName(String n) {\n            this.name = n;\n        }\n\n        public void setLn(Boolean n) {\n            this.ln = n;\n        }\n\n        public void setSocial(Boolean n) {\n            this.social = n;\n        }\n    }\n    // end of parameter Class\n}\n// END of ScenarioDesignWizard\n",
		"id": "EvoSuiteBenchmark/10_water-simulator/src/main/java/simulator/SA/gui/ScenarioDesignWizardTest.java",
		"test_prompt": "// ScenarioDesignWizardTest.java\npackage simulator.SA.gui;\n\nimport java.awt.BorderLayout;\nimport java.awt.Component;\nimport java.awt.Dimension;\nimport java.awt.FlowLayout;\nimport java.awt.GridLayout;\nimport java.awt.SystemColor;\nimport java.awt.event.ActionEvent;\nimport java.awt.event.ActionListener;\nimport java.io.File;\nimport java.util.Enumeration;\nimport java.util.Iterator;\nimport java.util.Vector;\nimport javax.swing.BorderFactory;\nimport javax.swing.ButtonGroup;\nimport javax.swing.DefaultListModel;\nimport javax.swing.JButton;\nimport javax.swing.JCheckBox;\nimport javax.swing.JComboBox;\nimport javax.swing.JDesktopPane;\nimport javax.swing.JFileChooser;\nimport javax.swing.JInternalFrame;\nimport javax.swing.JLabel;\nimport javax.swing.JList;\nimport javax.swing.JOptionPane;\nimport javax.swing.JPanel;\nimport javax.swing.JRadioButton;\nimport javax.swing.JScrollPane;\nimport javax.swing.JTable;\nimport javax.swing.JTextField;\nimport javax.swing.ListCellRenderer;\nimport javax.swing.SwingConstants;\nimport javax.swing.table.AbstractTableModel;\nimport javax.swing.table.TableModel;\nimport org.apache.log4j.Logger;\nimport simulator.util.ConsumerType;\nimport simulator.util.Function;\nimport simulator.util.ParameterAttributes;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link ScenarioDesignWizard}.\n* It contains ten unit test cases for the {@link ScenarioDesignWizard#packedInputs()} method.\n*/\nclass ScenarioDesignWizardTest {"
	}
]