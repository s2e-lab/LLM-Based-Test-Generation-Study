[
	{
		"original_code": "// PdfSelectionTableItem.java\n/*\r\n * Created on 18-Nov-2007\r\n * Copyright (C) 2006 by Andrea Vacondio.\r\n *\r\n * This program is free software; you can redistribute it and/or modify it under the terms of the \r\n * GNU General Public License as published by the Free Software Foundation; \r\n * either version 2 of the License.\r\n * This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; \r\n * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. \r\n * See the GNU General Public License for more details.\r\n * You should have received a copy of the GNU General Public License along with this program; \r\n * if not, write to the Free Software Foundation, Inc., \r\n *  59 Temple Place, Suite 330, Boston, MA 02111-1307 USA\r\n */\r\npackage org.pdfsam.guiclient.dto;\r\n\r\nimport java.io.File;\r\nimport java.io.Serializable;\r\nimport org.pdfsam.guiclient.commons.panels.JPdfSelectionPanel;\r\nimport org.pdfsam.guiclient.utils.PdfVersionUtility;\r\n\r\n/**\r\n * Item of the table in {@link JPdfSelectionPanel}\r\n * @author Andrea Vacondio\r\n */\r\npublic class PdfSelectionTableItem implements Serializable {\r\n\r\n    private static final long serialVersionUID = 7190628784577648811L;\r\n\r\n    private File inputFile;\r\n\r\n    private String pagesNumber;\r\n\r\n    private String pageSelection;\r\n\r\n    private boolean encrypted;\r\n\r\n    private boolean fullPermission;\r\n\r\n    private String encryptionAlgorithm;\r\n\r\n    private String permissions;\r\n\r\n    private long fileSize = 0;\r\n\r\n    private DocumentMetaData documentMetaData = new DocumentMetaData();\r\n\r\n    private String password;\r\n\r\n    private char pdfVersion;\r\n\r\n    private String pdfVersionDescription;\r\n\r\n    private boolean loadedWithErrors = false;\r\n\r\n    private boolean syntaxErrors = false;\r\n\r\n    /**\r\n     * Default values\r\n     */\r\n    public PdfSelectionTableItem() {\r\n        this(null, \"0\", \"All\", false, true, ' ');\r\n    }\r\n\r\n    /**\r\n     * @param inputFile\r\n     * @param pagesNumber\r\n     * @param pageSelection\r\n     * @param encrypted\r\n     * @param fullPermission\r\n     * @param password\r\n     * @param loadedWithErrors\r\n     * @param syntaxErrors\r\n     */\r\n    public PdfSelectionTableItem(File inputFile, String pagesNumber, String pageSelection, boolean encrypted, boolean fullPermission, char pdfVersion, String password, boolean loadedWithErrors, boolean syntaxErrors) {\r\n        super();\r\n        this.inputFile = inputFile;\r\n        this.pagesNumber = pagesNumber;\r\n        this.pageSelection = pageSelection;\r\n        this.encrypted = encrypted;\r\n        this.pdfVersion = pdfVersion;\r\n        this.pdfVersionDescription = PdfVersionUtility.getVersionDescription(pdfVersion);\r\n        this.password = password;\r\n        this.loadedWithErrors = loadedWithErrors;\r\n        this.syntaxErrors = syntaxErrors;\r\n        this.fullPermission = fullPermission;\r\n    }\r\n\r\n    /**\r\n     * loadedWithErrors is false\r\n     * @param inputFile\r\n     * @param pagesNumber\r\n     * @param pageSelection\r\n     * @param encrypted\r\n     * @param password\r\n     */\r\n    public PdfSelectionTableItem(File inputFile, String pagesNumber, String pageSelection, boolean encrypted, boolean fullPermission, char pdfVersion, String password) {\r\n        this(inputFile, pagesNumber, pageSelection, encrypted, fullPermission, pdfVersion, password, false, false);\r\n    }\r\n\r\n    /**\r\n     * No password given\r\n     * loadedWithErrors is false\r\n     * @param inputFile\r\n     * @param pagesNumber\r\n     * @param pageSelection\r\n     * @param encrypted\r\n     */\r\n    public PdfSelectionTableItem(File inputFile, String pagesNumber, String pageSelection, boolean encrypted, boolean fullPermission, char pdfVersion) {\r\n        this(inputFile, pagesNumber, pageSelection, encrypted, fullPermission, pdfVersion, null);\r\n    }\r\n\r\n    /**\r\n     * @return the inputFile\r\n     */\r\n    public File getInputFile() {\r\n        return inputFile;\r\n    }\r\n\r\n    /**\r\n     * @param inputFile the inputFile to set\r\n     */\r\n    public void setInputFile(File inputFile) {\r\n        this.inputFile = inputFile;\r\n    }\r\n\r\n    /**\r\n     * @return the pagesNumber\r\n     */\r\n    public String getPagesNumber() {\r\n        return pagesNumber;\r\n    }\r\n\r\n    /**\r\n     * @param pagesNumber the pagesNumber to set\r\n     */\r\n    public void setPagesNumber(String pagesNumber) {\r\n        this.pagesNumber = pagesNumber;\r\n    }\r\n\r\n    /**\r\n     * @return the pageSelection\r\n     */\r\n    public String getPageSelection() {\r\n        return pageSelection;\r\n    }\r\n\r\n    /**\r\n     * @param pageSelection the pageSelection to set\r\n     */\r\n    public void setPageSelection(String pageSelection) {\r\n        this.pageSelection = pageSelection;\r\n    }\r\n\r\n    /**\r\n     * @return the encrypted\r\n     */\r\n    public boolean isEncrypted() {\r\n        return encrypted;\r\n    }\r\n\r\n    /**\r\n     * @param encrypted the encrypted to set\r\n     */\r\n    public void setEncrypted(boolean encrypted) {\r\n        this.encrypted = encrypted;\r\n    }\r\n\r\n    /**\r\n     * @return the password\r\n     */\r\n    public String getPassword() {\r\n        return password;\r\n    }\r\n\r\n    /**\r\n     * @param password the password to set\r\n     */\r\n    public void setPassword(String password) {\r\n        this.password = password;\r\n    }\r\n\r\n    /**\r\n     * @return the pdfVersion\r\n     */\r\n    public char getPdfVersion() {\r\n        return pdfVersion;\r\n    }\r\n\r\n    /**\r\n     * @param pdfVersion the pdfVersion to set\r\n     */\r\n    public void setPdfVersion(char pdfVersion) {\r\n        this.pdfVersion = pdfVersion;\r\n        this.pdfVersionDescription = PdfVersionUtility.getVersionDescription(pdfVersion);\r\n    }\r\n\r\n    /**\r\n     * @return the loadedWithErrors\r\n     */\r\n    public boolean isLoadedWithErrors() {\r\n        return loadedWithErrors;\r\n    }\r\n\r\n    /**\r\n     * @param loadedWithErrors the loadedWithErrors to set\r\n     */\r\n    public void setLoadedWithErrors(boolean loadedWithErrors) {\r\n        this.loadedWithErrors = loadedWithErrors;\r\n    }\r\n\r\n    /**\r\n     * @return the pdfVersionDescription\r\n     */\r\n    public String getPdfVersionDescription() {\r\n        return pdfVersionDescription;\r\n    }\r\n\r\n    /**\r\n     * @return the syntaxErrors\r\n     */\r\n    public boolean isSyntaxErrors() {\r\n        return syntaxErrors;\r\n    }\r\n\r\n    /**\r\n     * @param syntaxErrors the syntaxErrors to set\r\n     */\r\n    public void setSyntaxErrors(boolean syntaxErrors) {\r\n        this.syntaxErrors = syntaxErrors;\r\n    }\r\n\r\n    /**\r\n     * @return the encryptionAlgorithm\r\n     */\r\n    public String getEncryptionAlgorithm() {\r\n        return encryptionAlgorithm;\r\n    }\r\n\r\n    /**\r\n     * @param encryptionAlgorithm the encryptionAlgorithm to set\r\n     */\r\n    public void setEncryptionAlgorithm(String encryptionAlgorithm) {\r\n        this.encryptionAlgorithm = encryptionAlgorithm;\r\n    }\r\n\r\n    /**\r\n     * @return the permissions\r\n     */\r\n    public String getPermissions() {\r\n        return permissions;\r\n    }\r\n\r\n    /**\r\n     * @param permissions the permissions to set\r\n     */\r\n    public void setPermissions(String permissions) {\r\n        this.permissions = permissions;\r\n    }\r\n\r\n    /**\r\n     * @return the fileSize\r\n     */\r\n    public long getFileSize() {\r\n        return fileSize;\r\n    }\r\n\r\n    /**\r\n     * @param fileSize the fileSize to set\r\n     */\r\n    public void setFileSize(long fileSize) {\r\n        this.fileSize = fileSize;\r\n    }\r\n\r\n    /**\r\n     * @return the DocumentMetaData\r\n     */\r\n    public DocumentMetaData getDocumentMetaData() {\r\n        return documentMetaData;\r\n    }\r\n\r\n    /**\r\n     * @param documentMetaData the DocumentMetaData to set\r\n     */\r\n    public void setDocumentInfo(DocumentMetaData documentMetaData) {\r\n        this.documentMetaData = documentMetaData;\r\n    }\r\n\r\n    /**\r\n     * @return the fullPermission\r\n     */\r\n    public boolean isFullPermission() {\r\n        return fullPermission;\r\n    }\r\n\r\n    /**\r\n     * @param fullPermission the fullPermission to set\r\n     */\r\n    public void setFullPermission(boolean fullPermission) {\r\n        this.fullPermission = fullPermission;\r\n    }\r\n\r\n    /* (non-Javadoc)\r\n\t * @see java.lang.Object#hashCode()\r\n\t */\r\n    @Override\r\n    public int hashCode() {\r\n        final int prime = 31;\r\n        int result = 1;\r\n        result = prime * result + ((documentMetaData == null) ? 0 : documentMetaData.hashCode());\r\n        result = prime * result + (encrypted ? 1231 : 1237);\r\n        result = prime * result + ((encryptionAlgorithm == null) ? 0 : encryptionAlgorithm.hashCode());\r\n        result = prime * result + (int) (fileSize ^ (fileSize >>> 32));\r\n        result = prime * result + (fullPermission ? 1231 : 1237);\r\n        result = prime * result + ((inputFile == null) ? 0 : inputFile.hashCode());\r\n        result = prime * result + (loadedWithErrors ? 1231 : 1237);\r\n        result = prime * result + ((pageSelection == null) ? 0 : pageSelection.hashCode());\r\n        result = prime * result + ((pagesNumber == null) ? 0 : pagesNumber.hashCode());\r\n        result = prime * result + ((password == null) ? 0 : password.hashCode());\r\n        result = prime * result + pdfVersion;\r\n        result = prime * result + ((pdfVersionDescription == null) ? 0 : pdfVersionDescription.hashCode());\r\n        result = prime * result + ((permissions == null) ? 0 : permissions.hashCode());\r\n        result = prime * result + (syntaxErrors ? 1231 : 1237);\r\n        return result;\r\n    }\r\n\r\n    /* (non-Javadoc)\r\n\t * @see java.lang.Object#equals(java.lang.Object)\r\n\t */\r\n    @Override\r\n    public boolean equals(Object obj) {\r\n        if (this == obj)\r\n            return true;\r\n        if (obj == null)\r\n            return false;\r\n        if (getClass() != obj.getClass())\r\n            return false;\r\n        PdfSelectionTableItem other = (PdfSelectionTableItem) obj;\r\n        if (documentMetaData == null) {\r\n            if (other.documentMetaData != null)\r\n                return false;\r\n        } else if (!documentMetaData.equals(other.documentMetaData))\r\n            return false;\r\n        if (encrypted != other.encrypted)\r\n            return false;\r\n        if (encryptionAlgorithm == null) {\r\n            if (other.encryptionAlgorithm != null)\r\n                return false;\r\n        } else if (!encryptionAlgorithm.equals(other.encryptionAlgorithm))\r\n            return false;\r\n        if (fileSize != other.fileSize)\r\n            return false;\r\n        if (fullPermission != other.fullPermission)\r\n            return false;\r\n        if (inputFile == null) {\r\n            if (other.inputFile != null)\r\n                return false;\r\n        } else if (!inputFile.equals(other.inputFile))\r\n            return false;\r\n        if (loadedWithErrors != other.loadedWithErrors)\r\n            return false;\r\n        if (pageSelection == null) {\r\n            if (other.pageSelection != null)\r\n                return false;\r\n        } else if (!pageSelection.equals(other.pageSelection))\r\n            return false;\r\n        if (pagesNumber == null) {\r\n            if (other.pagesNumber != null)\r\n                return false;\r\n        } else if (!pagesNumber.equals(other.pagesNumber))\r\n            return false;\r\n        if (password == null) {\r\n            if (other.password != null)\r\n                return false;\r\n        } else if (!password.equals(other.password))\r\n            return false;\r\n        if (pdfVersion != other.pdfVersion)\r\n            return false;\r\n        if (pdfVersionDescription == null) {\r\n            if (other.pdfVersionDescription != null)\r\n                return false;\r\n        } else if (!pdfVersionDescription.equals(other.pdfVersionDescription))\r\n            return false;\r\n        if (permissions == null) {\r\n            if (other.permissions != null)\r\n                return false;\r\n        } else if (!permissions.equals(other.permissions))\r\n            return false;\r\n        if (syntaxErrors != other.syntaxErrors)\r\n            return false;\r\n        return true;\r\n    }\r\n}\r\n",
		"id": "EvoSuiteBenchmark/109_pdfsam/src/main/java/org/pdfsam/guiclient/dto/PdfSelectionTableItemTest0.java",
		"test_prompt": "// PdfSelectionTableItemTest0.java\npackage org.pdfsam.guiclient.dto;\n\nimport java.io.File;\nimport java.io.Serializable;\nimport org.pdfsam.guiclient.commons.panels.JPdfSelectionPanel;\nimport org.pdfsam.guiclient.utils.PdfVersionUtility;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link PdfSelectionTableItem}.\n* It contains ten unit test cases for the {@link PdfSelectionTableItem#isEncrypted()} method.\n*/\nclass PdfSelectionTableItemTest0 {"
	},
	{
		"original_code": "// PdfSelectionTableItem.java\n/*\r\n * Created on 18-Nov-2007\r\n * Copyright (C) 2006 by Andrea Vacondio.\r\n *\r\n * This program is free software; you can redistribute it and/or modify it under the terms of the \r\n * GNU General Public License as published by the Free Software Foundation; \r\n * either version 2 of the License.\r\n * This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; \r\n * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. \r\n * See the GNU General Public License for more details.\r\n * You should have received a copy of the GNU General Public License along with this program; \r\n * if not, write to the Free Software Foundation, Inc., \r\n *  59 Temple Place, Suite 330, Boston, MA 02111-1307 USA\r\n */\r\npackage org.pdfsam.guiclient.dto;\r\n\r\nimport java.io.File;\r\nimport java.io.Serializable;\r\nimport org.pdfsam.guiclient.commons.panels.JPdfSelectionPanel;\r\nimport org.pdfsam.guiclient.utils.PdfVersionUtility;\r\n\r\n/**\r\n * Item of the table in {@link JPdfSelectionPanel}\r\n * @author Andrea Vacondio\r\n */\r\npublic class PdfSelectionTableItem implements Serializable {\r\n\r\n    private static final long serialVersionUID = 7190628784577648811L;\r\n\r\n    private File inputFile;\r\n\r\n    private String pagesNumber;\r\n\r\n    private String pageSelection;\r\n\r\n    private boolean encrypted;\r\n\r\n    private boolean fullPermission;\r\n\r\n    private String encryptionAlgorithm;\r\n\r\n    private String permissions;\r\n\r\n    private long fileSize = 0;\r\n\r\n    private DocumentMetaData documentMetaData = new DocumentMetaData();\r\n\r\n    private String password;\r\n\r\n    private char pdfVersion;\r\n\r\n    private String pdfVersionDescription;\r\n\r\n    private boolean loadedWithErrors = false;\r\n\r\n    private boolean syntaxErrors = false;\r\n\r\n    /**\r\n     * Default values\r\n     */\r\n    public PdfSelectionTableItem() {\r\n        this(null, \"0\", \"All\", false, true, ' ');\r\n    }\r\n\r\n    /**\r\n     * @param inputFile\r\n     * @param pagesNumber\r\n     * @param pageSelection\r\n     * @param encrypted\r\n     * @param fullPermission\r\n     * @param password\r\n     * @param loadedWithErrors\r\n     * @param syntaxErrors\r\n     */\r\n    public PdfSelectionTableItem(File inputFile, String pagesNumber, String pageSelection, boolean encrypted, boolean fullPermission, char pdfVersion, String password, boolean loadedWithErrors, boolean syntaxErrors) {\r\n        super();\r\n        this.inputFile = inputFile;\r\n        this.pagesNumber = pagesNumber;\r\n        this.pageSelection = pageSelection;\r\n        this.encrypted = encrypted;\r\n        this.pdfVersion = pdfVersion;\r\n        this.pdfVersionDescription = PdfVersionUtility.getVersionDescription(pdfVersion);\r\n        this.password = password;\r\n        this.loadedWithErrors = loadedWithErrors;\r\n        this.syntaxErrors = syntaxErrors;\r\n        this.fullPermission = fullPermission;\r\n    }\r\n\r\n    /**\r\n     * loadedWithErrors is false\r\n     * @param inputFile\r\n     * @param pagesNumber\r\n     * @param pageSelection\r\n     * @param encrypted\r\n     * @param password\r\n     */\r\n    public PdfSelectionTableItem(File inputFile, String pagesNumber, String pageSelection, boolean encrypted, boolean fullPermission, char pdfVersion, String password) {\r\n        this(inputFile, pagesNumber, pageSelection, encrypted, fullPermission, pdfVersion, password, false, false);\r\n    }\r\n\r\n    /**\r\n     * No password given\r\n     * loadedWithErrors is false\r\n     * @param inputFile\r\n     * @param pagesNumber\r\n     * @param pageSelection\r\n     * @param encrypted\r\n     */\r\n    public PdfSelectionTableItem(File inputFile, String pagesNumber, String pageSelection, boolean encrypted, boolean fullPermission, char pdfVersion) {\r\n        this(inputFile, pagesNumber, pageSelection, encrypted, fullPermission, pdfVersion, null);\r\n    }\r\n\r\n    /**\r\n     * @return the inputFile\r\n     */\r\n    public File getInputFile() {\r\n        return inputFile;\r\n    }\r\n\r\n    /**\r\n     * @param inputFile the inputFile to set\r\n     */\r\n    public void setInputFile(File inputFile) {\r\n        this.inputFile = inputFile;\r\n    }\r\n\r\n    /**\r\n     * @return the pagesNumber\r\n     */\r\n    public String getPagesNumber() {\r\n        return pagesNumber;\r\n    }\r\n\r\n    /**\r\n     * @param pagesNumber the pagesNumber to set\r\n     */\r\n    public void setPagesNumber(String pagesNumber) {\r\n        this.pagesNumber = pagesNumber;\r\n    }\r\n\r\n    /**\r\n     * @return the pageSelection\r\n     */\r\n    public String getPageSelection() {\r\n        return pageSelection;\r\n    }\r\n\r\n    /**\r\n     * @param pageSelection the pageSelection to set\r\n     */\r\n    public void setPageSelection(String pageSelection) {\r\n        this.pageSelection = pageSelection;\r\n    }\r\n\r\n    /**\r\n     * @return the encrypted\r\n     */\r\n    public boolean isEncrypted() {\r\n        return encrypted;\r\n    }\r\n\r\n    /**\r\n     * @param encrypted the encrypted to set\r\n     */\r\n    public void setEncrypted(boolean encrypted) {\r\n        this.encrypted = encrypted;\r\n    }\r\n\r\n    /**\r\n     * @return the password\r\n     */\r\n    public String getPassword() {\r\n        return password;\r\n    }\r\n\r\n    /**\r\n     * @param password the password to set\r\n     */\r\n    public void setPassword(String password) {\r\n        this.password = password;\r\n    }\r\n\r\n    /**\r\n     * @return the pdfVersion\r\n     */\r\n    public char getPdfVersion() {\r\n        return pdfVersion;\r\n    }\r\n\r\n    /**\r\n     * @param pdfVersion the pdfVersion to set\r\n     */\r\n    public void setPdfVersion(char pdfVersion) {\r\n        this.pdfVersion = pdfVersion;\r\n        this.pdfVersionDescription = PdfVersionUtility.getVersionDescription(pdfVersion);\r\n    }\r\n\r\n    /**\r\n     * @return the loadedWithErrors\r\n     */\r\n    public boolean isLoadedWithErrors() {\r\n        return loadedWithErrors;\r\n    }\r\n\r\n    /**\r\n     * @param loadedWithErrors the loadedWithErrors to set\r\n     */\r\n    public void setLoadedWithErrors(boolean loadedWithErrors) {\r\n        this.loadedWithErrors = loadedWithErrors;\r\n    }\r\n\r\n    /**\r\n     * @return the pdfVersionDescription\r\n     */\r\n    public String getPdfVersionDescription() {\r\n        return pdfVersionDescription;\r\n    }\r\n\r\n    /**\r\n     * @return the syntaxErrors\r\n     */\r\n    public boolean isSyntaxErrors() {\r\n        return syntaxErrors;\r\n    }\r\n\r\n    /**\r\n     * @param syntaxErrors the syntaxErrors to set\r\n     */\r\n    public void setSyntaxErrors(boolean syntaxErrors) {\r\n        this.syntaxErrors = syntaxErrors;\r\n    }\r\n\r\n    /**\r\n     * @return the encryptionAlgorithm\r\n     */\r\n    public String getEncryptionAlgorithm() {\r\n        return encryptionAlgorithm;\r\n    }\r\n\r\n    /**\r\n     * @param encryptionAlgorithm the encryptionAlgorithm to set\r\n     */\r\n    public void setEncryptionAlgorithm(String encryptionAlgorithm) {\r\n        this.encryptionAlgorithm = encryptionAlgorithm;\r\n    }\r\n\r\n    /**\r\n     * @return the permissions\r\n     */\r\n    public String getPermissions() {\r\n        return permissions;\r\n    }\r\n\r\n    /**\r\n     * @param permissions the permissions to set\r\n     */\r\n    public void setPermissions(String permissions) {\r\n        this.permissions = permissions;\r\n    }\r\n\r\n    /**\r\n     * @return the fileSize\r\n     */\r\n    public long getFileSize() {\r\n        return fileSize;\r\n    }\r\n\r\n    /**\r\n     * @param fileSize the fileSize to set\r\n     */\r\n    public void setFileSize(long fileSize) {\r\n        this.fileSize = fileSize;\r\n    }\r\n\r\n    /**\r\n     * @return the DocumentMetaData\r\n     */\r\n    public DocumentMetaData getDocumentMetaData() {\r\n        return documentMetaData;\r\n    }\r\n\r\n    /**\r\n     * @param documentMetaData the DocumentMetaData to set\r\n     */\r\n    public void setDocumentInfo(DocumentMetaData documentMetaData) {\r\n        this.documentMetaData = documentMetaData;\r\n    }\r\n\r\n    /**\r\n     * @return the fullPermission\r\n     */\r\n    public boolean isFullPermission() {\r\n        return fullPermission;\r\n    }\r\n\r\n    /**\r\n     * @param fullPermission the fullPermission to set\r\n     */\r\n    public void setFullPermission(boolean fullPermission) {\r\n        this.fullPermission = fullPermission;\r\n    }\r\n\r\n    /* (non-Javadoc)\r\n\t * @see java.lang.Object#hashCode()\r\n\t */\r\n    @Override\r\n    public int hashCode() {\r\n        final int prime = 31;\r\n        int result = 1;\r\n        result = prime * result + ((documentMetaData == null) ? 0 : documentMetaData.hashCode());\r\n        result = prime * result + (encrypted ? 1231 : 1237);\r\n        result = prime * result + ((encryptionAlgorithm == null) ? 0 : encryptionAlgorithm.hashCode());\r\n        result = prime * result + (int) (fileSize ^ (fileSize >>> 32));\r\n        result = prime * result + (fullPermission ? 1231 : 1237);\r\n        result = prime * result + ((inputFile == null) ? 0 : inputFile.hashCode());\r\n        result = prime * result + (loadedWithErrors ? 1231 : 1237);\r\n        result = prime * result + ((pageSelection == null) ? 0 : pageSelection.hashCode());\r\n        result = prime * result + ((pagesNumber == null) ? 0 : pagesNumber.hashCode());\r\n        result = prime * result + ((password == null) ? 0 : password.hashCode());\r\n        result = prime * result + pdfVersion;\r\n        result = prime * result + ((pdfVersionDescription == null) ? 0 : pdfVersionDescription.hashCode());\r\n        result = prime * result + ((permissions == null) ? 0 : permissions.hashCode());\r\n        result = prime * result + (syntaxErrors ? 1231 : 1237);\r\n        return result;\r\n    }\r\n\r\n    /* (non-Javadoc)\r\n\t * @see java.lang.Object#equals(java.lang.Object)\r\n\t */\r\n    @Override\r\n    public boolean equals(Object obj) {\r\n        if (this == obj)\r\n            return true;\r\n        if (obj == null)\r\n            return false;\r\n        if (getClass() != obj.getClass())\r\n            return false;\r\n        PdfSelectionTableItem other = (PdfSelectionTableItem) obj;\r\n        if (documentMetaData == null) {\r\n            if (other.documentMetaData != null)\r\n                return false;\r\n        } else if (!documentMetaData.equals(other.documentMetaData))\r\n            return false;\r\n        if (encrypted != other.encrypted)\r\n            return false;\r\n        if (encryptionAlgorithm == null) {\r\n            if (other.encryptionAlgorithm != null)\r\n                return false;\r\n        } else if (!encryptionAlgorithm.equals(other.encryptionAlgorithm))\r\n            return false;\r\n        if (fileSize != other.fileSize)\r\n            return false;\r\n        if (fullPermission != other.fullPermission)\r\n            return false;\r\n        if (inputFile == null) {\r\n            if (other.inputFile != null)\r\n                return false;\r\n        } else if (!inputFile.equals(other.inputFile))\r\n            return false;\r\n        if (loadedWithErrors != other.loadedWithErrors)\r\n            return false;\r\n        if (pageSelection == null) {\r\n            if (other.pageSelection != null)\r\n                return false;\r\n        } else if (!pageSelection.equals(other.pageSelection))\r\n            return false;\r\n        if (pagesNumber == null) {\r\n            if (other.pagesNumber != null)\r\n                return false;\r\n        } else if (!pagesNumber.equals(other.pagesNumber))\r\n            return false;\r\n        if (password == null) {\r\n            if (other.password != null)\r\n                return false;\r\n        } else if (!password.equals(other.password))\r\n            return false;\r\n        if (pdfVersion != other.pdfVersion)\r\n            return false;\r\n        if (pdfVersionDescription == null) {\r\n            if (other.pdfVersionDescription != null)\r\n                return false;\r\n        } else if (!pdfVersionDescription.equals(other.pdfVersionDescription))\r\n            return false;\r\n        if (permissions == null) {\r\n            if (other.permissions != null)\r\n                return false;\r\n        } else if (!permissions.equals(other.permissions))\r\n            return false;\r\n        if (syntaxErrors != other.syntaxErrors)\r\n            return false;\r\n        return true;\r\n    }\r\n}\r\n",
		"id": "EvoSuiteBenchmark/109_pdfsam/src/main/java/org/pdfsam/guiclient/dto/PdfSelectionTableItemTest1.java",
		"test_prompt": "// PdfSelectionTableItemTest1.java\npackage org.pdfsam.guiclient.dto;\n\nimport java.io.File;\nimport java.io.Serializable;\nimport org.pdfsam.guiclient.commons.panels.JPdfSelectionPanel;\nimport org.pdfsam.guiclient.utils.PdfVersionUtility;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link PdfSelectionTableItem}.\n* It contains ten unit test cases for the {@link PdfSelectionTableItem#isLoadedWithErrors()} method.\n*/\nclass PdfSelectionTableItemTest1 {"
	},
	{
		"original_code": "// PdfSelectionTableItem.java\n/*\r\n * Created on 18-Nov-2007\r\n * Copyright (C) 2006 by Andrea Vacondio.\r\n *\r\n * This program is free software; you can redistribute it and/or modify it under the terms of the \r\n * GNU General Public License as published by the Free Software Foundation; \r\n * either version 2 of the License.\r\n * This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; \r\n * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. \r\n * See the GNU General Public License for more details.\r\n * You should have received a copy of the GNU General Public License along with this program; \r\n * if not, write to the Free Software Foundation, Inc., \r\n *  59 Temple Place, Suite 330, Boston, MA 02111-1307 USA\r\n */\r\npackage org.pdfsam.guiclient.dto;\r\n\r\nimport java.io.File;\r\nimport java.io.Serializable;\r\nimport org.pdfsam.guiclient.commons.panels.JPdfSelectionPanel;\r\nimport org.pdfsam.guiclient.utils.PdfVersionUtility;\r\n\r\n/**\r\n * Item of the table in {@link JPdfSelectionPanel}\r\n * @author Andrea Vacondio\r\n */\r\npublic class PdfSelectionTableItem implements Serializable {\r\n\r\n    private static final long serialVersionUID = 7190628784577648811L;\r\n\r\n    private File inputFile;\r\n\r\n    private String pagesNumber;\r\n\r\n    private String pageSelection;\r\n\r\n    private boolean encrypted;\r\n\r\n    private boolean fullPermission;\r\n\r\n    private String encryptionAlgorithm;\r\n\r\n    private String permissions;\r\n\r\n    private long fileSize = 0;\r\n\r\n    private DocumentMetaData documentMetaData = new DocumentMetaData();\r\n\r\n    private String password;\r\n\r\n    private char pdfVersion;\r\n\r\n    private String pdfVersionDescription;\r\n\r\n    private boolean loadedWithErrors = false;\r\n\r\n    private boolean syntaxErrors = false;\r\n\r\n    /**\r\n     * Default values\r\n     */\r\n    public PdfSelectionTableItem() {\r\n        this(null, \"0\", \"All\", false, true, ' ');\r\n    }\r\n\r\n    /**\r\n     * @param inputFile\r\n     * @param pagesNumber\r\n     * @param pageSelection\r\n     * @param encrypted\r\n     * @param fullPermission\r\n     * @param password\r\n     * @param loadedWithErrors\r\n     * @param syntaxErrors\r\n     */\r\n    public PdfSelectionTableItem(File inputFile, String pagesNumber, String pageSelection, boolean encrypted, boolean fullPermission, char pdfVersion, String password, boolean loadedWithErrors, boolean syntaxErrors) {\r\n        super();\r\n        this.inputFile = inputFile;\r\n        this.pagesNumber = pagesNumber;\r\n        this.pageSelection = pageSelection;\r\n        this.encrypted = encrypted;\r\n        this.pdfVersion = pdfVersion;\r\n        this.pdfVersionDescription = PdfVersionUtility.getVersionDescription(pdfVersion);\r\n        this.password = password;\r\n        this.loadedWithErrors = loadedWithErrors;\r\n        this.syntaxErrors = syntaxErrors;\r\n        this.fullPermission = fullPermission;\r\n    }\r\n\r\n    /**\r\n     * loadedWithErrors is false\r\n     * @param inputFile\r\n     * @param pagesNumber\r\n     * @param pageSelection\r\n     * @param encrypted\r\n     * @param password\r\n     */\r\n    public PdfSelectionTableItem(File inputFile, String pagesNumber, String pageSelection, boolean encrypted, boolean fullPermission, char pdfVersion, String password) {\r\n        this(inputFile, pagesNumber, pageSelection, encrypted, fullPermission, pdfVersion, password, false, false);\r\n    }\r\n\r\n    /**\r\n     * No password given\r\n     * loadedWithErrors is false\r\n     * @param inputFile\r\n     * @param pagesNumber\r\n     * @param pageSelection\r\n     * @param encrypted\r\n     */\r\n    public PdfSelectionTableItem(File inputFile, String pagesNumber, String pageSelection, boolean encrypted, boolean fullPermission, char pdfVersion) {\r\n        this(inputFile, pagesNumber, pageSelection, encrypted, fullPermission, pdfVersion, null);\r\n    }\r\n\r\n    /**\r\n     * @return the inputFile\r\n     */\r\n    public File getInputFile() {\r\n        return inputFile;\r\n    }\r\n\r\n    /**\r\n     * @param inputFile the inputFile to set\r\n     */\r\n    public void setInputFile(File inputFile) {\r\n        this.inputFile = inputFile;\r\n    }\r\n\r\n    /**\r\n     * @return the pagesNumber\r\n     */\r\n    public String getPagesNumber() {\r\n        return pagesNumber;\r\n    }\r\n\r\n    /**\r\n     * @param pagesNumber the pagesNumber to set\r\n     */\r\n    public void setPagesNumber(String pagesNumber) {\r\n        this.pagesNumber = pagesNumber;\r\n    }\r\n\r\n    /**\r\n     * @return the pageSelection\r\n     */\r\n    public String getPageSelection() {\r\n        return pageSelection;\r\n    }\r\n\r\n    /**\r\n     * @param pageSelection the pageSelection to set\r\n     */\r\n    public void setPageSelection(String pageSelection) {\r\n        this.pageSelection = pageSelection;\r\n    }\r\n\r\n    /**\r\n     * @return the encrypted\r\n     */\r\n    public boolean isEncrypted() {\r\n        return encrypted;\r\n    }\r\n\r\n    /**\r\n     * @param encrypted the encrypted to set\r\n     */\r\n    public void setEncrypted(boolean encrypted) {\r\n        this.encrypted = encrypted;\r\n    }\r\n\r\n    /**\r\n     * @return the password\r\n     */\r\n    public String getPassword() {\r\n        return password;\r\n    }\r\n\r\n    /**\r\n     * @param password the password to set\r\n     */\r\n    public void setPassword(String password) {\r\n        this.password = password;\r\n    }\r\n\r\n    /**\r\n     * @return the pdfVersion\r\n     */\r\n    public char getPdfVersion() {\r\n        return pdfVersion;\r\n    }\r\n\r\n    /**\r\n     * @param pdfVersion the pdfVersion to set\r\n     */\r\n    public void setPdfVersion(char pdfVersion) {\r\n        this.pdfVersion = pdfVersion;\r\n        this.pdfVersionDescription = PdfVersionUtility.getVersionDescription(pdfVersion);\r\n    }\r\n\r\n    /**\r\n     * @return the loadedWithErrors\r\n     */\r\n    public boolean isLoadedWithErrors() {\r\n        return loadedWithErrors;\r\n    }\r\n\r\n    /**\r\n     * @param loadedWithErrors the loadedWithErrors to set\r\n     */\r\n    public void setLoadedWithErrors(boolean loadedWithErrors) {\r\n        this.loadedWithErrors = loadedWithErrors;\r\n    }\r\n\r\n    /**\r\n     * @return the pdfVersionDescription\r\n     */\r\n    public String getPdfVersionDescription() {\r\n        return pdfVersionDescription;\r\n    }\r\n\r\n    /**\r\n     * @return the syntaxErrors\r\n     */\r\n    public boolean isSyntaxErrors() {\r\n        return syntaxErrors;\r\n    }\r\n\r\n    /**\r\n     * @param syntaxErrors the syntaxErrors to set\r\n     */\r\n    public void setSyntaxErrors(boolean syntaxErrors) {\r\n        this.syntaxErrors = syntaxErrors;\r\n    }\r\n\r\n    /**\r\n     * @return the encryptionAlgorithm\r\n     */\r\n    public String getEncryptionAlgorithm() {\r\n        return encryptionAlgorithm;\r\n    }\r\n\r\n    /**\r\n     * @param encryptionAlgorithm the encryptionAlgorithm to set\r\n     */\r\n    public void setEncryptionAlgorithm(String encryptionAlgorithm) {\r\n        this.encryptionAlgorithm = encryptionAlgorithm;\r\n    }\r\n\r\n    /**\r\n     * @return the permissions\r\n     */\r\n    public String getPermissions() {\r\n        return permissions;\r\n    }\r\n\r\n    /**\r\n     * @param permissions the permissions to set\r\n     */\r\n    public void setPermissions(String permissions) {\r\n        this.permissions = permissions;\r\n    }\r\n\r\n    /**\r\n     * @return the fileSize\r\n     */\r\n    public long getFileSize() {\r\n        return fileSize;\r\n    }\r\n\r\n    /**\r\n     * @param fileSize the fileSize to set\r\n     */\r\n    public void setFileSize(long fileSize) {\r\n        this.fileSize = fileSize;\r\n    }\r\n\r\n    /**\r\n     * @return the DocumentMetaData\r\n     */\r\n    public DocumentMetaData getDocumentMetaData() {\r\n        return documentMetaData;\r\n    }\r\n\r\n    /**\r\n     * @param documentMetaData the DocumentMetaData to set\r\n     */\r\n    public void setDocumentInfo(DocumentMetaData documentMetaData) {\r\n        this.documentMetaData = documentMetaData;\r\n    }\r\n\r\n    /**\r\n     * @return the fullPermission\r\n     */\r\n    public boolean isFullPermission() {\r\n        return fullPermission;\r\n    }\r\n\r\n    /**\r\n     * @param fullPermission the fullPermission to set\r\n     */\r\n    public void setFullPermission(boolean fullPermission) {\r\n        this.fullPermission = fullPermission;\r\n    }\r\n\r\n    /* (non-Javadoc)\r\n\t * @see java.lang.Object#hashCode()\r\n\t */\r\n    @Override\r\n    public int hashCode() {\r\n        final int prime = 31;\r\n        int result = 1;\r\n        result = prime * result + ((documentMetaData == null) ? 0 : documentMetaData.hashCode());\r\n        result = prime * result + (encrypted ? 1231 : 1237);\r\n        result = prime * result + ((encryptionAlgorithm == null) ? 0 : encryptionAlgorithm.hashCode());\r\n        result = prime * result + (int) (fileSize ^ (fileSize >>> 32));\r\n        result = prime * result + (fullPermission ? 1231 : 1237);\r\n        result = prime * result + ((inputFile == null) ? 0 : inputFile.hashCode());\r\n        result = prime * result + (loadedWithErrors ? 1231 : 1237);\r\n        result = prime * result + ((pageSelection == null) ? 0 : pageSelection.hashCode());\r\n        result = prime * result + ((pagesNumber == null) ? 0 : pagesNumber.hashCode());\r\n        result = prime * result + ((password == null) ? 0 : password.hashCode());\r\n        result = prime * result + pdfVersion;\r\n        result = prime * result + ((pdfVersionDescription == null) ? 0 : pdfVersionDescription.hashCode());\r\n        result = prime * result + ((permissions == null) ? 0 : permissions.hashCode());\r\n        result = prime * result + (syntaxErrors ? 1231 : 1237);\r\n        return result;\r\n    }\r\n\r\n    /* (non-Javadoc)\r\n\t * @see java.lang.Object#equals(java.lang.Object)\r\n\t */\r\n    @Override\r\n    public boolean equals(Object obj) {\r\n        if (this == obj)\r\n            return true;\r\n        if (obj == null)\r\n            return false;\r\n        if (getClass() != obj.getClass())\r\n            return false;\r\n        PdfSelectionTableItem other = (PdfSelectionTableItem) obj;\r\n        if (documentMetaData == null) {\r\n            if (other.documentMetaData != null)\r\n                return false;\r\n        } else if (!documentMetaData.equals(other.documentMetaData))\r\n            return false;\r\n        if (encrypted != other.encrypted)\r\n            return false;\r\n        if (encryptionAlgorithm == null) {\r\n            if (other.encryptionAlgorithm != null)\r\n                return false;\r\n        } else if (!encryptionAlgorithm.equals(other.encryptionAlgorithm))\r\n            return false;\r\n        if (fileSize != other.fileSize)\r\n            return false;\r\n        if (fullPermission != other.fullPermission)\r\n            return false;\r\n        if (inputFile == null) {\r\n            if (other.inputFile != null)\r\n                return false;\r\n        } else if (!inputFile.equals(other.inputFile))\r\n            return false;\r\n        if (loadedWithErrors != other.loadedWithErrors)\r\n            return false;\r\n        if (pageSelection == null) {\r\n            if (other.pageSelection != null)\r\n                return false;\r\n        } else if (!pageSelection.equals(other.pageSelection))\r\n            return false;\r\n        if (pagesNumber == null) {\r\n            if (other.pagesNumber != null)\r\n                return false;\r\n        } else if (!pagesNumber.equals(other.pagesNumber))\r\n            return false;\r\n        if (password == null) {\r\n            if (other.password != null)\r\n                return false;\r\n        } else if (!password.equals(other.password))\r\n            return false;\r\n        if (pdfVersion != other.pdfVersion)\r\n            return false;\r\n        if (pdfVersionDescription == null) {\r\n            if (other.pdfVersionDescription != null)\r\n                return false;\r\n        } else if (!pdfVersionDescription.equals(other.pdfVersionDescription))\r\n            return false;\r\n        if (permissions == null) {\r\n            if (other.permissions != null)\r\n                return false;\r\n        } else if (!permissions.equals(other.permissions))\r\n            return false;\r\n        if (syntaxErrors != other.syntaxErrors)\r\n            return false;\r\n        return true;\r\n    }\r\n}\r\n",
		"id": "EvoSuiteBenchmark/109_pdfsam/src/main/java/org/pdfsam/guiclient/dto/PdfSelectionTableItemTest2.java",
		"test_prompt": "// PdfSelectionTableItemTest2.java\npackage org.pdfsam.guiclient.dto;\n\nimport java.io.File;\nimport java.io.Serializable;\nimport org.pdfsam.guiclient.commons.panels.JPdfSelectionPanel;\nimport org.pdfsam.guiclient.utils.PdfVersionUtility;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link PdfSelectionTableItem}.\n* It contains ten unit test cases for the {@link PdfSelectionTableItem#isSyntaxErrors()} method.\n*/\nclass PdfSelectionTableItemTest2 {"
	},
	{
		"original_code": "// PdfSelectionTableItem.java\n/*\r\n * Created on 18-Nov-2007\r\n * Copyright (C) 2006 by Andrea Vacondio.\r\n *\r\n * This program is free software; you can redistribute it and/or modify it under the terms of the \r\n * GNU General Public License as published by the Free Software Foundation; \r\n * either version 2 of the License.\r\n * This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; \r\n * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. \r\n * See the GNU General Public License for more details.\r\n * You should have received a copy of the GNU General Public License along with this program; \r\n * if not, write to the Free Software Foundation, Inc., \r\n *  59 Temple Place, Suite 330, Boston, MA 02111-1307 USA\r\n */\r\npackage org.pdfsam.guiclient.dto;\r\n\r\nimport java.io.File;\r\nimport java.io.Serializable;\r\nimport org.pdfsam.guiclient.commons.panels.JPdfSelectionPanel;\r\nimport org.pdfsam.guiclient.utils.PdfVersionUtility;\r\n\r\n/**\r\n * Item of the table in {@link JPdfSelectionPanel}\r\n * @author Andrea Vacondio\r\n */\r\npublic class PdfSelectionTableItem implements Serializable {\r\n\r\n    private static final long serialVersionUID = 7190628784577648811L;\r\n\r\n    private File inputFile;\r\n\r\n    private String pagesNumber;\r\n\r\n    private String pageSelection;\r\n\r\n    private boolean encrypted;\r\n\r\n    private boolean fullPermission;\r\n\r\n    private String encryptionAlgorithm;\r\n\r\n    private String permissions;\r\n\r\n    private long fileSize = 0;\r\n\r\n    private DocumentMetaData documentMetaData = new DocumentMetaData();\r\n\r\n    private String password;\r\n\r\n    private char pdfVersion;\r\n\r\n    private String pdfVersionDescription;\r\n\r\n    private boolean loadedWithErrors = false;\r\n\r\n    private boolean syntaxErrors = false;\r\n\r\n    /**\r\n     * Default values\r\n     */\r\n    public PdfSelectionTableItem() {\r\n        this(null, \"0\", \"All\", false, true, ' ');\r\n    }\r\n\r\n    /**\r\n     * @param inputFile\r\n     * @param pagesNumber\r\n     * @param pageSelection\r\n     * @param encrypted\r\n     * @param fullPermission\r\n     * @param password\r\n     * @param loadedWithErrors\r\n     * @param syntaxErrors\r\n     */\r\n    public PdfSelectionTableItem(File inputFile, String pagesNumber, String pageSelection, boolean encrypted, boolean fullPermission, char pdfVersion, String password, boolean loadedWithErrors, boolean syntaxErrors) {\r\n        super();\r\n        this.inputFile = inputFile;\r\n        this.pagesNumber = pagesNumber;\r\n        this.pageSelection = pageSelection;\r\n        this.encrypted = encrypted;\r\n        this.pdfVersion = pdfVersion;\r\n        this.pdfVersionDescription = PdfVersionUtility.getVersionDescription(pdfVersion);\r\n        this.password = password;\r\n        this.loadedWithErrors = loadedWithErrors;\r\n        this.syntaxErrors = syntaxErrors;\r\n        this.fullPermission = fullPermission;\r\n    }\r\n\r\n    /**\r\n     * loadedWithErrors is false\r\n     * @param inputFile\r\n     * @param pagesNumber\r\n     * @param pageSelection\r\n     * @param encrypted\r\n     * @param password\r\n     */\r\n    public PdfSelectionTableItem(File inputFile, String pagesNumber, String pageSelection, boolean encrypted, boolean fullPermission, char pdfVersion, String password) {\r\n        this(inputFile, pagesNumber, pageSelection, encrypted, fullPermission, pdfVersion, password, false, false);\r\n    }\r\n\r\n    /**\r\n     * No password given\r\n     * loadedWithErrors is false\r\n     * @param inputFile\r\n     * @param pagesNumber\r\n     * @param pageSelection\r\n     * @param encrypted\r\n     */\r\n    public PdfSelectionTableItem(File inputFile, String pagesNumber, String pageSelection, boolean encrypted, boolean fullPermission, char pdfVersion) {\r\n        this(inputFile, pagesNumber, pageSelection, encrypted, fullPermission, pdfVersion, null);\r\n    }\r\n\r\n    /**\r\n     * @return the inputFile\r\n     */\r\n    public File getInputFile() {\r\n        return inputFile;\r\n    }\r\n\r\n    /**\r\n     * @param inputFile the inputFile to set\r\n     */\r\n    public void setInputFile(File inputFile) {\r\n        this.inputFile = inputFile;\r\n    }\r\n\r\n    /**\r\n     * @return the pagesNumber\r\n     */\r\n    public String getPagesNumber() {\r\n        return pagesNumber;\r\n    }\r\n\r\n    /**\r\n     * @param pagesNumber the pagesNumber to set\r\n     */\r\n    public void setPagesNumber(String pagesNumber) {\r\n        this.pagesNumber = pagesNumber;\r\n    }\r\n\r\n    /**\r\n     * @return the pageSelection\r\n     */\r\n    public String getPageSelection() {\r\n        return pageSelection;\r\n    }\r\n\r\n    /**\r\n     * @param pageSelection the pageSelection to set\r\n     */\r\n    public void setPageSelection(String pageSelection) {\r\n        this.pageSelection = pageSelection;\r\n    }\r\n\r\n    /**\r\n     * @return the encrypted\r\n     */\r\n    public boolean isEncrypted() {\r\n        return encrypted;\r\n    }\r\n\r\n    /**\r\n     * @param encrypted the encrypted to set\r\n     */\r\n    public void setEncrypted(boolean encrypted) {\r\n        this.encrypted = encrypted;\r\n    }\r\n\r\n    /**\r\n     * @return the password\r\n     */\r\n    public String getPassword() {\r\n        return password;\r\n    }\r\n\r\n    /**\r\n     * @param password the password to set\r\n     */\r\n    public void setPassword(String password) {\r\n        this.password = password;\r\n    }\r\n\r\n    /**\r\n     * @return the pdfVersion\r\n     */\r\n    public char getPdfVersion() {\r\n        return pdfVersion;\r\n    }\r\n\r\n    /**\r\n     * @param pdfVersion the pdfVersion to set\r\n     */\r\n    public void setPdfVersion(char pdfVersion) {\r\n        this.pdfVersion = pdfVersion;\r\n        this.pdfVersionDescription = PdfVersionUtility.getVersionDescription(pdfVersion);\r\n    }\r\n\r\n    /**\r\n     * @return the loadedWithErrors\r\n     */\r\n    public boolean isLoadedWithErrors() {\r\n        return loadedWithErrors;\r\n    }\r\n\r\n    /**\r\n     * @param loadedWithErrors the loadedWithErrors to set\r\n     */\r\n    public void setLoadedWithErrors(boolean loadedWithErrors) {\r\n        this.loadedWithErrors = loadedWithErrors;\r\n    }\r\n\r\n    /**\r\n     * @return the pdfVersionDescription\r\n     */\r\n    public String getPdfVersionDescription() {\r\n        return pdfVersionDescription;\r\n    }\r\n\r\n    /**\r\n     * @return the syntaxErrors\r\n     */\r\n    public boolean isSyntaxErrors() {\r\n        return syntaxErrors;\r\n    }\r\n\r\n    /**\r\n     * @param syntaxErrors the syntaxErrors to set\r\n     */\r\n    public void setSyntaxErrors(boolean syntaxErrors) {\r\n        this.syntaxErrors = syntaxErrors;\r\n    }\r\n\r\n    /**\r\n     * @return the encryptionAlgorithm\r\n     */\r\n    public String getEncryptionAlgorithm() {\r\n        return encryptionAlgorithm;\r\n    }\r\n\r\n    /**\r\n     * @param encryptionAlgorithm the encryptionAlgorithm to set\r\n     */\r\n    public void setEncryptionAlgorithm(String encryptionAlgorithm) {\r\n        this.encryptionAlgorithm = encryptionAlgorithm;\r\n    }\r\n\r\n    /**\r\n     * @return the permissions\r\n     */\r\n    public String getPermissions() {\r\n        return permissions;\r\n    }\r\n\r\n    /**\r\n     * @param permissions the permissions to set\r\n     */\r\n    public void setPermissions(String permissions) {\r\n        this.permissions = permissions;\r\n    }\r\n\r\n    /**\r\n     * @return the fileSize\r\n     */\r\n    public long getFileSize() {\r\n        return fileSize;\r\n    }\r\n\r\n    /**\r\n     * @param fileSize the fileSize to set\r\n     */\r\n    public void setFileSize(long fileSize) {\r\n        this.fileSize = fileSize;\r\n    }\r\n\r\n    /**\r\n     * @return the DocumentMetaData\r\n     */\r\n    public DocumentMetaData getDocumentMetaData() {\r\n        return documentMetaData;\r\n    }\r\n\r\n    /**\r\n     * @param documentMetaData the DocumentMetaData to set\r\n     */\r\n    public void setDocumentInfo(DocumentMetaData documentMetaData) {\r\n        this.documentMetaData = documentMetaData;\r\n    }\r\n\r\n    /**\r\n     * @return the fullPermission\r\n     */\r\n    public boolean isFullPermission() {\r\n        return fullPermission;\r\n    }\r\n\r\n    /**\r\n     * @param fullPermission the fullPermission to set\r\n     */\r\n    public void setFullPermission(boolean fullPermission) {\r\n        this.fullPermission = fullPermission;\r\n    }\r\n\r\n    /* (non-Javadoc)\r\n\t * @see java.lang.Object#hashCode()\r\n\t */\r\n    @Override\r\n    public int hashCode() {\r\n        final int prime = 31;\r\n        int result = 1;\r\n        result = prime * result + ((documentMetaData == null) ? 0 : documentMetaData.hashCode());\r\n        result = prime * result + (encrypted ? 1231 : 1237);\r\n        result = prime * result + ((encryptionAlgorithm == null) ? 0 : encryptionAlgorithm.hashCode());\r\n        result = prime * result + (int) (fileSize ^ (fileSize >>> 32));\r\n        result = prime * result + (fullPermission ? 1231 : 1237);\r\n        result = prime * result + ((inputFile == null) ? 0 : inputFile.hashCode());\r\n        result = prime * result + (loadedWithErrors ? 1231 : 1237);\r\n        result = prime * result + ((pageSelection == null) ? 0 : pageSelection.hashCode());\r\n        result = prime * result + ((pagesNumber == null) ? 0 : pagesNumber.hashCode());\r\n        result = prime * result + ((password == null) ? 0 : password.hashCode());\r\n        result = prime * result + pdfVersion;\r\n        result = prime * result + ((pdfVersionDescription == null) ? 0 : pdfVersionDescription.hashCode());\r\n        result = prime * result + ((permissions == null) ? 0 : permissions.hashCode());\r\n        result = prime * result + (syntaxErrors ? 1231 : 1237);\r\n        return result;\r\n    }\r\n\r\n    /* (non-Javadoc)\r\n\t * @see java.lang.Object#equals(java.lang.Object)\r\n\t */\r\n    @Override\r\n    public boolean equals(Object obj) {\r\n        if (this == obj)\r\n            return true;\r\n        if (obj == null)\r\n            return false;\r\n        if (getClass() != obj.getClass())\r\n            return false;\r\n        PdfSelectionTableItem other = (PdfSelectionTableItem) obj;\r\n        if (documentMetaData == null) {\r\n            if (other.documentMetaData != null)\r\n                return false;\r\n        } else if (!documentMetaData.equals(other.documentMetaData))\r\n            return false;\r\n        if (encrypted != other.encrypted)\r\n            return false;\r\n        if (encryptionAlgorithm == null) {\r\n            if (other.encryptionAlgorithm != null)\r\n                return false;\r\n        } else if (!encryptionAlgorithm.equals(other.encryptionAlgorithm))\r\n            return false;\r\n        if (fileSize != other.fileSize)\r\n            return false;\r\n        if (fullPermission != other.fullPermission)\r\n            return false;\r\n        if (inputFile == null) {\r\n            if (other.inputFile != null)\r\n                return false;\r\n        } else if (!inputFile.equals(other.inputFile))\r\n            return false;\r\n        if (loadedWithErrors != other.loadedWithErrors)\r\n            return false;\r\n        if (pageSelection == null) {\r\n            if (other.pageSelection != null)\r\n                return false;\r\n        } else if (!pageSelection.equals(other.pageSelection))\r\n            return false;\r\n        if (pagesNumber == null) {\r\n            if (other.pagesNumber != null)\r\n                return false;\r\n        } else if (!pagesNumber.equals(other.pagesNumber))\r\n            return false;\r\n        if (password == null) {\r\n            if (other.password != null)\r\n                return false;\r\n        } else if (!password.equals(other.password))\r\n            return false;\r\n        if (pdfVersion != other.pdfVersion)\r\n            return false;\r\n        if (pdfVersionDescription == null) {\r\n            if (other.pdfVersionDescription != null)\r\n                return false;\r\n        } else if (!pdfVersionDescription.equals(other.pdfVersionDescription))\r\n            return false;\r\n        if (permissions == null) {\r\n            if (other.permissions != null)\r\n                return false;\r\n        } else if (!permissions.equals(other.permissions))\r\n            return false;\r\n        if (syntaxErrors != other.syntaxErrors)\r\n            return false;\r\n        return true;\r\n    }\r\n}\r\n",
		"id": "EvoSuiteBenchmark/109_pdfsam/src/main/java/org/pdfsam/guiclient/dto/PdfSelectionTableItemTest3.java",
		"test_prompt": "// PdfSelectionTableItemTest3.java\npackage org.pdfsam.guiclient.dto;\n\nimport java.io.File;\nimport java.io.Serializable;\nimport org.pdfsam.guiclient.commons.panels.JPdfSelectionPanel;\nimport org.pdfsam.guiclient.utils.PdfVersionUtility;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link PdfSelectionTableItem}.\n* It contains ten unit test cases for the {@link PdfSelectionTableItem#isFullPermission()} method.\n*/\nclass PdfSelectionTableItemTest3 {"
	},
	{
		"original_code": "// PdfSelectionTableItem.java\n/*\r\n * Created on 18-Nov-2007\r\n * Copyright (C) 2006 by Andrea Vacondio.\r\n *\r\n * This program is free software; you can redistribute it and/or modify it under the terms of the \r\n * GNU General Public License as published by the Free Software Foundation; \r\n * either version 2 of the License.\r\n * This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; \r\n * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. \r\n * See the GNU General Public License for more details.\r\n * You should have received a copy of the GNU General Public License along with this program; \r\n * if not, write to the Free Software Foundation, Inc., \r\n *  59 Temple Place, Suite 330, Boston, MA 02111-1307 USA\r\n */\r\npackage org.pdfsam.guiclient.dto;\r\n\r\nimport java.io.File;\r\nimport java.io.Serializable;\r\nimport org.pdfsam.guiclient.commons.panels.JPdfSelectionPanel;\r\nimport org.pdfsam.guiclient.utils.PdfVersionUtility;\r\n\r\n/**\r\n * Item of the table in {@link JPdfSelectionPanel}\r\n * @author Andrea Vacondio\r\n */\r\npublic class PdfSelectionTableItem implements Serializable {\r\n\r\n    private static final long serialVersionUID = 7190628784577648811L;\r\n\r\n    private File inputFile;\r\n\r\n    private String pagesNumber;\r\n\r\n    private String pageSelection;\r\n\r\n    private boolean encrypted;\r\n\r\n    private boolean fullPermission;\r\n\r\n    private String encryptionAlgorithm;\r\n\r\n    private String permissions;\r\n\r\n    private long fileSize = 0;\r\n\r\n    private DocumentMetaData documentMetaData = new DocumentMetaData();\r\n\r\n    private String password;\r\n\r\n    private char pdfVersion;\r\n\r\n    private String pdfVersionDescription;\r\n\r\n    private boolean loadedWithErrors = false;\r\n\r\n    private boolean syntaxErrors = false;\r\n\r\n    /**\r\n     * Default values\r\n     */\r\n    public PdfSelectionTableItem() {\r\n        this(null, \"0\", \"All\", false, true, ' ');\r\n    }\r\n\r\n    /**\r\n     * @param inputFile\r\n     * @param pagesNumber\r\n     * @param pageSelection\r\n     * @param encrypted\r\n     * @param fullPermission\r\n     * @param password\r\n     * @param loadedWithErrors\r\n     * @param syntaxErrors\r\n     */\r\n    public PdfSelectionTableItem(File inputFile, String pagesNumber, String pageSelection, boolean encrypted, boolean fullPermission, char pdfVersion, String password, boolean loadedWithErrors, boolean syntaxErrors) {\r\n        super();\r\n        this.inputFile = inputFile;\r\n        this.pagesNumber = pagesNumber;\r\n        this.pageSelection = pageSelection;\r\n        this.encrypted = encrypted;\r\n        this.pdfVersion = pdfVersion;\r\n        this.pdfVersionDescription = PdfVersionUtility.getVersionDescription(pdfVersion);\r\n        this.password = password;\r\n        this.loadedWithErrors = loadedWithErrors;\r\n        this.syntaxErrors = syntaxErrors;\r\n        this.fullPermission = fullPermission;\r\n    }\r\n\r\n    /**\r\n     * loadedWithErrors is false\r\n     * @param inputFile\r\n     * @param pagesNumber\r\n     * @param pageSelection\r\n     * @param encrypted\r\n     * @param password\r\n     */\r\n    public PdfSelectionTableItem(File inputFile, String pagesNumber, String pageSelection, boolean encrypted, boolean fullPermission, char pdfVersion, String password) {\r\n        this(inputFile, pagesNumber, pageSelection, encrypted, fullPermission, pdfVersion, password, false, false);\r\n    }\r\n\r\n    /**\r\n     * No password given\r\n     * loadedWithErrors is false\r\n     * @param inputFile\r\n     * @param pagesNumber\r\n     * @param pageSelection\r\n     * @param encrypted\r\n     */\r\n    public PdfSelectionTableItem(File inputFile, String pagesNumber, String pageSelection, boolean encrypted, boolean fullPermission, char pdfVersion) {\r\n        this(inputFile, pagesNumber, pageSelection, encrypted, fullPermission, pdfVersion, null);\r\n    }\r\n\r\n    /**\r\n     * @return the inputFile\r\n     */\r\n    public File getInputFile() {\r\n        return inputFile;\r\n    }\r\n\r\n    /**\r\n     * @param inputFile the inputFile to set\r\n     */\r\n    public void setInputFile(File inputFile) {\r\n        this.inputFile = inputFile;\r\n    }\r\n\r\n    /**\r\n     * @return the pagesNumber\r\n     */\r\n    public String getPagesNumber() {\r\n        return pagesNumber;\r\n    }\r\n\r\n    /**\r\n     * @param pagesNumber the pagesNumber to set\r\n     */\r\n    public void setPagesNumber(String pagesNumber) {\r\n        this.pagesNumber = pagesNumber;\r\n    }\r\n\r\n    /**\r\n     * @return the pageSelection\r\n     */\r\n    public String getPageSelection() {\r\n        return pageSelection;\r\n    }\r\n\r\n    /**\r\n     * @param pageSelection the pageSelection to set\r\n     */\r\n    public void setPageSelection(String pageSelection) {\r\n        this.pageSelection = pageSelection;\r\n    }\r\n\r\n    /**\r\n     * @return the encrypted\r\n     */\r\n    public boolean isEncrypted() {\r\n        return encrypted;\r\n    }\r\n\r\n    /**\r\n     * @param encrypted the encrypted to set\r\n     */\r\n    public void setEncrypted(boolean encrypted) {\r\n        this.encrypted = encrypted;\r\n    }\r\n\r\n    /**\r\n     * @return the password\r\n     */\r\n    public String getPassword() {\r\n        return password;\r\n    }\r\n\r\n    /**\r\n     * @param password the password to set\r\n     */\r\n    public void setPassword(String password) {\r\n        this.password = password;\r\n    }\r\n\r\n    /**\r\n     * @return the pdfVersion\r\n     */\r\n    public char getPdfVersion() {\r\n        return pdfVersion;\r\n    }\r\n\r\n    /**\r\n     * @param pdfVersion the pdfVersion to set\r\n     */\r\n    public void setPdfVersion(char pdfVersion) {\r\n        this.pdfVersion = pdfVersion;\r\n        this.pdfVersionDescription = PdfVersionUtility.getVersionDescription(pdfVersion);\r\n    }\r\n\r\n    /**\r\n     * @return the loadedWithErrors\r\n     */\r\n    public boolean isLoadedWithErrors() {\r\n        return loadedWithErrors;\r\n    }\r\n\r\n    /**\r\n     * @param loadedWithErrors the loadedWithErrors to set\r\n     */\r\n    public void setLoadedWithErrors(boolean loadedWithErrors) {\r\n        this.loadedWithErrors = loadedWithErrors;\r\n    }\r\n\r\n    /**\r\n     * @return the pdfVersionDescription\r\n     */\r\n    public String getPdfVersionDescription() {\r\n        return pdfVersionDescription;\r\n    }\r\n\r\n    /**\r\n     * @return the syntaxErrors\r\n     */\r\n    public boolean isSyntaxErrors() {\r\n        return syntaxErrors;\r\n    }\r\n\r\n    /**\r\n     * @param syntaxErrors the syntaxErrors to set\r\n     */\r\n    public void setSyntaxErrors(boolean syntaxErrors) {\r\n        this.syntaxErrors = syntaxErrors;\r\n    }\r\n\r\n    /**\r\n     * @return the encryptionAlgorithm\r\n     */\r\n    public String getEncryptionAlgorithm() {\r\n        return encryptionAlgorithm;\r\n    }\r\n\r\n    /**\r\n     * @param encryptionAlgorithm the encryptionAlgorithm to set\r\n     */\r\n    public void setEncryptionAlgorithm(String encryptionAlgorithm) {\r\n        this.encryptionAlgorithm = encryptionAlgorithm;\r\n    }\r\n\r\n    /**\r\n     * @return the permissions\r\n     */\r\n    public String getPermissions() {\r\n        return permissions;\r\n    }\r\n\r\n    /**\r\n     * @param permissions the permissions to set\r\n     */\r\n    public void setPermissions(String permissions) {\r\n        this.permissions = permissions;\r\n    }\r\n\r\n    /**\r\n     * @return the fileSize\r\n     */\r\n    public long getFileSize() {\r\n        return fileSize;\r\n    }\r\n\r\n    /**\r\n     * @param fileSize the fileSize to set\r\n     */\r\n    public void setFileSize(long fileSize) {\r\n        this.fileSize = fileSize;\r\n    }\r\n\r\n    /**\r\n     * @return the DocumentMetaData\r\n     */\r\n    public DocumentMetaData getDocumentMetaData() {\r\n        return documentMetaData;\r\n    }\r\n\r\n    /**\r\n     * @param documentMetaData the DocumentMetaData to set\r\n     */\r\n    public void setDocumentInfo(DocumentMetaData documentMetaData) {\r\n        this.documentMetaData = documentMetaData;\r\n    }\r\n\r\n    /**\r\n     * @return the fullPermission\r\n     */\r\n    public boolean isFullPermission() {\r\n        return fullPermission;\r\n    }\r\n\r\n    /**\r\n     * @param fullPermission the fullPermission to set\r\n     */\r\n    public void setFullPermission(boolean fullPermission) {\r\n        this.fullPermission = fullPermission;\r\n    }\r\n\r\n    /* (non-Javadoc)\r\n\t * @see java.lang.Object#hashCode()\r\n\t */\r\n    @Override\r\n    public int hashCode() {\r\n        final int prime = 31;\r\n        int result = 1;\r\n        result = prime * result + ((documentMetaData == null) ? 0 : documentMetaData.hashCode());\r\n        result = prime * result + (encrypted ? 1231 : 1237);\r\n        result = prime * result + ((encryptionAlgorithm == null) ? 0 : encryptionAlgorithm.hashCode());\r\n        result = prime * result + (int) (fileSize ^ (fileSize >>> 32));\r\n        result = prime * result + (fullPermission ? 1231 : 1237);\r\n        result = prime * result + ((inputFile == null) ? 0 : inputFile.hashCode());\r\n        result = prime * result + (loadedWithErrors ? 1231 : 1237);\r\n        result = prime * result + ((pageSelection == null) ? 0 : pageSelection.hashCode());\r\n        result = prime * result + ((pagesNumber == null) ? 0 : pagesNumber.hashCode());\r\n        result = prime * result + ((password == null) ? 0 : password.hashCode());\r\n        result = prime * result + pdfVersion;\r\n        result = prime * result + ((pdfVersionDescription == null) ? 0 : pdfVersionDescription.hashCode());\r\n        result = prime * result + ((permissions == null) ? 0 : permissions.hashCode());\r\n        result = prime * result + (syntaxErrors ? 1231 : 1237);\r\n        return result;\r\n    }\r\n\r\n    /* (non-Javadoc)\r\n\t * @see java.lang.Object#equals(java.lang.Object)\r\n\t */\r\n    @Override\r\n    public boolean equals(Object obj) {\r\n        if (this == obj)\r\n            return true;\r\n        if (obj == null)\r\n            return false;\r\n        if (getClass() != obj.getClass())\r\n            return false;\r\n        PdfSelectionTableItem other = (PdfSelectionTableItem) obj;\r\n        if (documentMetaData == null) {\r\n            if (other.documentMetaData != null)\r\n                return false;\r\n        } else if (!documentMetaData.equals(other.documentMetaData))\r\n            return false;\r\n        if (encrypted != other.encrypted)\r\n            return false;\r\n        if (encryptionAlgorithm == null) {\r\n            if (other.encryptionAlgorithm != null)\r\n                return false;\r\n        } else if (!encryptionAlgorithm.equals(other.encryptionAlgorithm))\r\n            return false;\r\n        if (fileSize != other.fileSize)\r\n            return false;\r\n        if (fullPermission != other.fullPermission)\r\n            return false;\r\n        if (inputFile == null) {\r\n            if (other.inputFile != null)\r\n                return false;\r\n        } else if (!inputFile.equals(other.inputFile))\r\n            return false;\r\n        if (loadedWithErrors != other.loadedWithErrors)\r\n            return false;\r\n        if (pageSelection == null) {\r\n            if (other.pageSelection != null)\r\n                return false;\r\n        } else if (!pageSelection.equals(other.pageSelection))\r\n            return false;\r\n        if (pagesNumber == null) {\r\n            if (other.pagesNumber != null)\r\n                return false;\r\n        } else if (!pagesNumber.equals(other.pagesNumber))\r\n            return false;\r\n        if (password == null) {\r\n            if (other.password != null)\r\n                return false;\r\n        } else if (!password.equals(other.password))\r\n            return false;\r\n        if (pdfVersion != other.pdfVersion)\r\n            return false;\r\n        if (pdfVersionDescription == null) {\r\n            if (other.pdfVersionDescription != null)\r\n                return false;\r\n        } else if (!pdfVersionDescription.equals(other.pdfVersionDescription))\r\n            return false;\r\n        if (permissions == null) {\r\n            if (other.permissions != null)\r\n                return false;\r\n        } else if (!permissions.equals(other.permissions))\r\n            return false;\r\n        if (syntaxErrors != other.syntaxErrors)\r\n            return false;\r\n        return true;\r\n    }\r\n}\r\n",
		"id": "EvoSuiteBenchmark/109_pdfsam/src/main/java/org/pdfsam/guiclient/dto/PdfSelectionTableItemTest4.java",
		"test_prompt": "// PdfSelectionTableItemTest4.java\npackage org.pdfsam.guiclient.dto;\n\nimport java.io.File;\nimport java.io.Serializable;\nimport org.pdfsam.guiclient.commons.panels.JPdfSelectionPanel;\nimport org.pdfsam.guiclient.utils.PdfVersionUtility;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link PdfSelectionTableItem}.\n* It contains ten unit test cases for the {@link PdfSelectionTableItem#hashCode()} method.\n*/\nclass PdfSelectionTableItemTest4 {"
	},
	{
		"original_code": "// PdfSelectionTableItem.java\n/*\r\n * Created on 18-Nov-2007\r\n * Copyright (C) 2006 by Andrea Vacondio.\r\n *\r\n * This program is free software; you can redistribute it and/or modify it under the terms of the \r\n * GNU General Public License as published by the Free Software Foundation; \r\n * either version 2 of the License.\r\n * This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; \r\n * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. \r\n * See the GNU General Public License for more details.\r\n * You should have received a copy of the GNU General Public License along with this program; \r\n * if not, write to the Free Software Foundation, Inc., \r\n *  59 Temple Place, Suite 330, Boston, MA 02111-1307 USA\r\n */\r\npackage org.pdfsam.guiclient.dto;\r\n\r\nimport java.io.File;\r\nimport java.io.Serializable;\r\nimport org.pdfsam.guiclient.commons.panels.JPdfSelectionPanel;\r\nimport org.pdfsam.guiclient.utils.PdfVersionUtility;\r\n\r\n/**\r\n * Item of the table in {@link JPdfSelectionPanel}\r\n * @author Andrea Vacondio\r\n */\r\npublic class PdfSelectionTableItem implements Serializable {\r\n\r\n    private static final long serialVersionUID = 7190628784577648811L;\r\n\r\n    private File inputFile;\r\n\r\n    private String pagesNumber;\r\n\r\n    private String pageSelection;\r\n\r\n    private boolean encrypted;\r\n\r\n    private boolean fullPermission;\r\n\r\n    private String encryptionAlgorithm;\r\n\r\n    private String permissions;\r\n\r\n    private long fileSize = 0;\r\n\r\n    private DocumentMetaData documentMetaData = new DocumentMetaData();\r\n\r\n    private String password;\r\n\r\n    private char pdfVersion;\r\n\r\n    private String pdfVersionDescription;\r\n\r\n    private boolean loadedWithErrors = false;\r\n\r\n    private boolean syntaxErrors = false;\r\n\r\n    /**\r\n     * Default values\r\n     */\r\n    public PdfSelectionTableItem() {\r\n        this(null, \"0\", \"All\", false, true, ' ');\r\n    }\r\n\r\n    /**\r\n     * @param inputFile\r\n     * @param pagesNumber\r\n     * @param pageSelection\r\n     * @param encrypted\r\n     * @param fullPermission\r\n     * @param password\r\n     * @param loadedWithErrors\r\n     * @param syntaxErrors\r\n     */\r\n    public PdfSelectionTableItem(File inputFile, String pagesNumber, String pageSelection, boolean encrypted, boolean fullPermission, char pdfVersion, String password, boolean loadedWithErrors, boolean syntaxErrors) {\r\n        super();\r\n        this.inputFile = inputFile;\r\n        this.pagesNumber = pagesNumber;\r\n        this.pageSelection = pageSelection;\r\n        this.encrypted = encrypted;\r\n        this.pdfVersion = pdfVersion;\r\n        this.pdfVersionDescription = PdfVersionUtility.getVersionDescription(pdfVersion);\r\n        this.password = password;\r\n        this.loadedWithErrors = loadedWithErrors;\r\n        this.syntaxErrors = syntaxErrors;\r\n        this.fullPermission = fullPermission;\r\n    }\r\n\r\n    /**\r\n     * loadedWithErrors is false\r\n     * @param inputFile\r\n     * @param pagesNumber\r\n     * @param pageSelection\r\n     * @param encrypted\r\n     * @param password\r\n     */\r\n    public PdfSelectionTableItem(File inputFile, String pagesNumber, String pageSelection, boolean encrypted, boolean fullPermission, char pdfVersion, String password) {\r\n        this(inputFile, pagesNumber, pageSelection, encrypted, fullPermission, pdfVersion, password, false, false);\r\n    }\r\n\r\n    /**\r\n     * No password given\r\n     * loadedWithErrors is false\r\n     * @param inputFile\r\n     * @param pagesNumber\r\n     * @param pageSelection\r\n     * @param encrypted\r\n     */\r\n    public PdfSelectionTableItem(File inputFile, String pagesNumber, String pageSelection, boolean encrypted, boolean fullPermission, char pdfVersion) {\r\n        this(inputFile, pagesNumber, pageSelection, encrypted, fullPermission, pdfVersion, null);\r\n    }\r\n\r\n    /**\r\n     * @return the inputFile\r\n     */\r\n    public File getInputFile() {\r\n        return inputFile;\r\n    }\r\n\r\n    /**\r\n     * @param inputFile the inputFile to set\r\n     */\r\n    public void setInputFile(File inputFile) {\r\n        this.inputFile = inputFile;\r\n    }\r\n\r\n    /**\r\n     * @return the pagesNumber\r\n     */\r\n    public String getPagesNumber() {\r\n        return pagesNumber;\r\n    }\r\n\r\n    /**\r\n     * @param pagesNumber the pagesNumber to set\r\n     */\r\n    public void setPagesNumber(String pagesNumber) {\r\n        this.pagesNumber = pagesNumber;\r\n    }\r\n\r\n    /**\r\n     * @return the pageSelection\r\n     */\r\n    public String getPageSelection() {\r\n        return pageSelection;\r\n    }\r\n\r\n    /**\r\n     * @param pageSelection the pageSelection to set\r\n     */\r\n    public void setPageSelection(String pageSelection) {\r\n        this.pageSelection = pageSelection;\r\n    }\r\n\r\n    /**\r\n     * @return the encrypted\r\n     */\r\n    public boolean isEncrypted() {\r\n        return encrypted;\r\n    }\r\n\r\n    /**\r\n     * @param encrypted the encrypted to set\r\n     */\r\n    public void setEncrypted(boolean encrypted) {\r\n        this.encrypted = encrypted;\r\n    }\r\n\r\n    /**\r\n     * @return the password\r\n     */\r\n    public String getPassword() {\r\n        return password;\r\n    }\r\n\r\n    /**\r\n     * @param password the password to set\r\n     */\r\n    public void setPassword(String password) {\r\n        this.password = password;\r\n    }\r\n\r\n    /**\r\n     * @return the pdfVersion\r\n     */\r\n    public char getPdfVersion() {\r\n        return pdfVersion;\r\n    }\r\n\r\n    /**\r\n     * @param pdfVersion the pdfVersion to set\r\n     */\r\n    public void setPdfVersion(char pdfVersion) {\r\n        this.pdfVersion = pdfVersion;\r\n        this.pdfVersionDescription = PdfVersionUtility.getVersionDescription(pdfVersion);\r\n    }\r\n\r\n    /**\r\n     * @return the loadedWithErrors\r\n     */\r\n    public boolean isLoadedWithErrors() {\r\n        return loadedWithErrors;\r\n    }\r\n\r\n    /**\r\n     * @param loadedWithErrors the loadedWithErrors to set\r\n     */\r\n    public void setLoadedWithErrors(boolean loadedWithErrors) {\r\n        this.loadedWithErrors = loadedWithErrors;\r\n    }\r\n\r\n    /**\r\n     * @return the pdfVersionDescription\r\n     */\r\n    public String getPdfVersionDescription() {\r\n        return pdfVersionDescription;\r\n    }\r\n\r\n    /**\r\n     * @return the syntaxErrors\r\n     */\r\n    public boolean isSyntaxErrors() {\r\n        return syntaxErrors;\r\n    }\r\n\r\n    /**\r\n     * @param syntaxErrors the syntaxErrors to set\r\n     */\r\n    public void setSyntaxErrors(boolean syntaxErrors) {\r\n        this.syntaxErrors = syntaxErrors;\r\n    }\r\n\r\n    /**\r\n     * @return the encryptionAlgorithm\r\n     */\r\n    public String getEncryptionAlgorithm() {\r\n        return encryptionAlgorithm;\r\n    }\r\n\r\n    /**\r\n     * @param encryptionAlgorithm the encryptionAlgorithm to set\r\n     */\r\n    public void setEncryptionAlgorithm(String encryptionAlgorithm) {\r\n        this.encryptionAlgorithm = encryptionAlgorithm;\r\n    }\r\n\r\n    /**\r\n     * @return the permissions\r\n     */\r\n    public String getPermissions() {\r\n        return permissions;\r\n    }\r\n\r\n    /**\r\n     * @param permissions the permissions to set\r\n     */\r\n    public void setPermissions(String permissions) {\r\n        this.permissions = permissions;\r\n    }\r\n\r\n    /**\r\n     * @return the fileSize\r\n     */\r\n    public long getFileSize() {\r\n        return fileSize;\r\n    }\r\n\r\n    /**\r\n     * @param fileSize the fileSize to set\r\n     */\r\n    public void setFileSize(long fileSize) {\r\n        this.fileSize = fileSize;\r\n    }\r\n\r\n    /**\r\n     * @return the DocumentMetaData\r\n     */\r\n    public DocumentMetaData getDocumentMetaData() {\r\n        return documentMetaData;\r\n    }\r\n\r\n    /**\r\n     * @param documentMetaData the DocumentMetaData to set\r\n     */\r\n    public void setDocumentInfo(DocumentMetaData documentMetaData) {\r\n        this.documentMetaData = documentMetaData;\r\n    }\r\n\r\n    /**\r\n     * @return the fullPermission\r\n     */\r\n    public boolean isFullPermission() {\r\n        return fullPermission;\r\n    }\r\n\r\n    /**\r\n     * @param fullPermission the fullPermission to set\r\n     */\r\n    public void setFullPermission(boolean fullPermission) {\r\n        this.fullPermission = fullPermission;\r\n    }\r\n\r\n    /* (non-Javadoc)\r\n\t * @see java.lang.Object#hashCode()\r\n\t */\r\n    @Override\r\n    public int hashCode() {\r\n        final int prime = 31;\r\n        int result = 1;\r\n        result = prime * result + ((documentMetaData == null) ? 0 : documentMetaData.hashCode());\r\n        result = prime * result + (encrypted ? 1231 : 1237);\r\n        result = prime * result + ((encryptionAlgorithm == null) ? 0 : encryptionAlgorithm.hashCode());\r\n        result = prime * result + (int) (fileSize ^ (fileSize >>> 32));\r\n        result = prime * result + (fullPermission ? 1231 : 1237);\r\n        result = prime * result + ((inputFile == null) ? 0 : inputFile.hashCode());\r\n        result = prime * result + (loadedWithErrors ? 1231 : 1237);\r\n        result = prime * result + ((pageSelection == null) ? 0 : pageSelection.hashCode());\r\n        result = prime * result + ((pagesNumber == null) ? 0 : pagesNumber.hashCode());\r\n        result = prime * result + ((password == null) ? 0 : password.hashCode());\r\n        result = prime * result + pdfVersion;\r\n        result = prime * result + ((pdfVersionDescription == null) ? 0 : pdfVersionDescription.hashCode());\r\n        result = prime * result + ((permissions == null) ? 0 : permissions.hashCode());\r\n        result = prime * result + (syntaxErrors ? 1231 : 1237);\r\n        return result;\r\n    }\r\n\r\n    /* (non-Javadoc)\r\n\t * @see java.lang.Object#equals(java.lang.Object)\r\n\t */\r\n    @Override\r\n    public boolean equals(Object obj) {\r\n        if (this == obj)\r\n            return true;\r\n        if (obj == null)\r\n            return false;\r\n        if (getClass() != obj.getClass())\r\n            return false;\r\n        PdfSelectionTableItem other = (PdfSelectionTableItem) obj;\r\n        if (documentMetaData == null) {\r\n            if (other.documentMetaData != null)\r\n                return false;\r\n        } else if (!documentMetaData.equals(other.documentMetaData))\r\n            return false;\r\n        if (encrypted != other.encrypted)\r\n            return false;\r\n        if (encryptionAlgorithm == null) {\r\n            if (other.encryptionAlgorithm != null)\r\n                return false;\r\n        } else if (!encryptionAlgorithm.equals(other.encryptionAlgorithm))\r\n            return false;\r\n        if (fileSize != other.fileSize)\r\n            return false;\r\n        if (fullPermission != other.fullPermission)\r\n            return false;\r\n        if (inputFile == null) {\r\n            if (other.inputFile != null)\r\n                return false;\r\n        } else if (!inputFile.equals(other.inputFile))\r\n            return false;\r\n        if (loadedWithErrors != other.loadedWithErrors)\r\n            return false;\r\n        if (pageSelection == null) {\r\n            if (other.pageSelection != null)\r\n                return false;\r\n        } else if (!pageSelection.equals(other.pageSelection))\r\n            return false;\r\n        if (pagesNumber == null) {\r\n            if (other.pagesNumber != null)\r\n                return false;\r\n        } else if (!pagesNumber.equals(other.pagesNumber))\r\n            return false;\r\n        if (password == null) {\r\n            if (other.password != null)\r\n                return false;\r\n        } else if (!password.equals(other.password))\r\n            return false;\r\n        if (pdfVersion != other.pdfVersion)\r\n            return false;\r\n        if (pdfVersionDescription == null) {\r\n            if (other.pdfVersionDescription != null)\r\n                return false;\r\n        } else if (!pdfVersionDescription.equals(other.pdfVersionDescription))\r\n            return false;\r\n        if (permissions == null) {\r\n            if (other.permissions != null)\r\n                return false;\r\n        } else if (!permissions.equals(other.permissions))\r\n            return false;\r\n        if (syntaxErrors != other.syntaxErrors)\r\n            return false;\r\n        return true;\r\n    }\r\n}\r\n",
		"id": "EvoSuiteBenchmark/109_pdfsam/src/main/java/org/pdfsam/guiclient/dto/PdfSelectionTableItemTest5.java",
		"test_prompt": "// PdfSelectionTableItemTest5.java\npackage org.pdfsam.guiclient.dto;\n\nimport java.io.File;\nimport java.io.Serializable;\nimport org.pdfsam.guiclient.commons.panels.JPdfSelectionPanel;\nimport org.pdfsam.guiclient.utils.PdfVersionUtility;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link PdfSelectionTableItem}.\n* It contains ten unit test cases for the {@link PdfSelectionTableItem#equals(Object)} method.\n*/\nclass PdfSelectionTableItemTest5 {"
	},
	{
		"original_code": "// VisualPageListItem.java\n/*\r\n * Created on 18-Jun-2008\r\n * Copyright (C) 2008 by Andrea Vacondio.\r\n *\r\n * This program is free software; you can redistribute it and/or modify it under the terms of the \r\n * GNU General Public License as published by the Free Software Foundation; \r\n * either version 2 of the License.\r\n * This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; \r\n * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. \r\n * See the GNU General Public License for more details.\r\n * You should have received a copy of the GNU General Public License along with this program; \r\n * if not, write to the Free Software Foundation, Inc., \r\n *  59 Temple Place, Suite 330, Boston, MA 02111-1307 USA\r\n */\r\npackage org.pdfsam.guiclient.dto;\r\n\r\nimport java.awt.image.BufferedImage;\r\nimport java.io.IOException;\r\nimport java.io.Serializable;\r\nimport org.pdfsam.guiclient.configuration.Configuration;\r\nimport org.pdfsam.guiclient.utils.ConversionUtility;\r\nimport org.pdfsam.guiclient.utils.ImageUtility;\r\nimport org.pdfsam.guiclient.utils.paper.PaperFormatUtility;\r\n\r\n/**\r\n * DTO representing a page of a document\r\n * @author Andrea Vacondio\r\n */\r\npublic class VisualPageListItem implements Serializable, Cloneable {\r\n\r\n    private static final long serialVersionUID = 7598120284619680606L;\r\n\r\n    private transient BufferedImage thumbnail = ImageUtility.getHourglassImage();\r\n\r\n    private int pageNumber;\r\n\r\n    private boolean deleted = false;\r\n\r\n    private String parentFileCanonicalPath = \"\";\r\n\r\n    private String documentPassword = \"\";\r\n\r\n    private Rotation rotation = Rotation.DEGREES_0;\r\n\r\n    private Rotation originalRotation = Rotation.DEGREES_0;\r\n\r\n    private String paperFormat = \"\";\r\n\r\n    public VisualPageListItem() {\r\n    }\r\n\r\n    /**\r\n     * @param pageNumber\r\n     */\r\n    public VisualPageListItem(int pageNumber) {\r\n        this(ImageUtility.getHourglassImage(), pageNumber);\r\n    }\r\n\r\n    /**\r\n     * @param pageNumber\r\n     * @param parentFileCanonicalPath\r\n     */\r\n    public VisualPageListItem(int pageNumber, String parentFileCanonicalPath) {\r\n        this(ImageUtility.getHourglassImage(), pageNumber, false, parentFileCanonicalPath, null);\r\n    }\r\n\r\n    /**\r\n     * @param pageNumber\r\n     * @param parentFileCanonicalPath\r\n     * @param documentPassword\r\n     */\r\n    public VisualPageListItem(int pageNumber, String parentFileCanonicalPath, String documentPassword) {\r\n        this(ImageUtility.getHourglassImage(), pageNumber, false, parentFileCanonicalPath, documentPassword);\r\n    }\r\n\r\n    /**\r\n     * @param thumbnail\r\n     * @param pageNumber\r\n     */\r\n    public VisualPageListItem(BufferedImage thumbnail, int pageNumber) {\r\n        this(thumbnail, pageNumber, false);\r\n    }\r\n\r\n    /**\r\n     * @param thumbnail\r\n     * @param pageNumber\r\n     * @param deleted\r\n     */\r\n    public VisualPageListItem(BufferedImage thumbnail, int pageNumber, boolean deleted) {\r\n        this(thumbnail, pageNumber, deleted, \"\", null);\r\n    }\r\n\r\n    /**\r\n     * @param thumbnail\r\n     * @param pageNumber\r\n     * @param deleted\r\n     * @param parentFileCanonicalPath\r\n     * @param documentPassword\r\n     */\r\n    public VisualPageListItem(BufferedImage thumbnail, int pageNumber, boolean deleted, String parentFileCanonicalPath, String documentPassword) {\r\n        this(thumbnail, pageNumber, deleted, parentFileCanonicalPath, documentPassword, Rotation.DEGREES_0);\r\n    }\r\n\r\n    /**\r\n     * @param thumbnail\r\n     * @param pageNumber\r\n     * @param deleted\r\n     * @param parentFileCanonicalPath\r\n     * @param documentPassword\r\n     * @param rotation\r\n     */\r\n    public VisualPageListItem(BufferedImage thumbnail, int pageNumber, boolean deleted, String parentFileCanonicalPath, String documentPassword, Rotation rotation) {\r\n        super();\r\n        this.thumbnail = thumbnail;\r\n        this.pageNumber = pageNumber;\r\n        this.deleted = deleted;\r\n        this.parentFileCanonicalPath = parentFileCanonicalPath;\r\n        this.documentPassword = documentPassword;\r\n        this.rotation = rotation;\r\n    }\r\n\r\n    /**\r\n     * @return the thumbnail\r\n     */\r\n    public BufferedImage getThumbnail() {\r\n        return thumbnail;\r\n    }\r\n\r\n    /**\r\n     * @param thumbnail the thumbnails to set\r\n     */\r\n    public void setThumbnail(BufferedImage thumbnail) {\r\n        this.thumbnail = thumbnail;\r\n    }\r\n\r\n    /**\r\n     * @return the pageNumber\r\n     */\r\n    public int getPageNumber() {\r\n        return pageNumber;\r\n    }\r\n\r\n    /**\r\n     * @param pageNumber the pageNumber to set\r\n     */\r\n    public void setPageNumber(int pageNumber) {\r\n        this.pageNumber = pageNumber;\r\n    }\r\n\r\n    /**\r\n     * @return the deleted\r\n     */\r\n    public boolean isDeleted() {\r\n        return deleted;\r\n    }\r\n\r\n    /**\r\n     * @param deleted the deleted to set\r\n     */\r\n    public void setDeleted(boolean deleted) {\r\n        this.deleted = deleted;\r\n    }\r\n\r\n    /**\r\n     * @return the parentFileCanonicalPath\r\n     */\r\n    public String getParentFileCanonicalPath() {\r\n        return parentFileCanonicalPath;\r\n    }\r\n\r\n    /**\r\n     * @param parentFileCanonicalPath the parentFileCanonicalPath to set\r\n     */\r\n    public void setParentFileCanonicalPath(String parentFileCanonicalPath) {\r\n        this.parentFileCanonicalPath = parentFileCanonicalPath;\r\n    }\r\n\r\n    /**\r\n     * @return the documentPassword\r\n     */\r\n    public String getDocumentPassword() {\r\n        return documentPassword;\r\n    }\r\n\r\n    /**\r\n     * @param documentPassword the documentPassword to set\r\n     */\r\n    public void setDocumentPassword(String documentPassword) {\r\n        this.documentPassword = documentPassword;\r\n    }\r\n\r\n    /**\r\n     * @return the rotation\r\n     */\r\n    public Rotation getRotation() {\r\n        return rotation;\r\n    }\r\n\r\n    /**\r\n     * @param rotation the rotation to set\r\n     */\r\n    public void setRotation(Rotation rotation) {\r\n        this.rotation = rotation;\r\n    }\r\n\r\n    /**\r\n     * rotate clockwise the item\r\n     */\r\n    public void rotateClockwise() {\r\n        this.rotation = rotation.rotateClockwise();\r\n        this.thumbnail = ImageUtility.rotateImage(thumbnail, 90);\r\n    }\r\n\r\n    /**\r\n     * rotate anticlockwise the item\r\n     */\r\n    public void rotateAnticlockwise() {\r\n        this.rotation = rotation.rotateAnticlockwise();\r\n        this.thumbnail = ImageUtility.rotateImage(thumbnail, 270);\r\n    }\r\n\r\n    /**\r\n     * @return true if this item is rotated\r\n     */\r\n    public boolean isRotated() {\r\n        return (getCompleteRotation() != Rotation.DEGREES_0.getDegrees());\r\n    }\r\n\r\n    /**\r\n     * @return if the item has a 180 degrees rotation\r\n     */\r\n    public boolean isFullyRotated() {\r\n        return (getCompleteRotation() == Rotation.DEGREES_180.getDegrees());\r\n    }\r\n\r\n    /**\r\n     * Set the paper format in a string format\r\n     * @param width width of the generated image\r\n     * @param height height of the generated image\r\n     * @param resolution the resolution of the generated image\r\n     */\r\n    public void setPaperFormat(double width, double height, int resolution) {\r\n        double width2 = Math.round(ConversionUtility.toCentimeters(width / (double) resolution) * 10);\r\n        double height2 = Math.round(ConversionUtility.toCentimeters(height / (double) resolution) * 10);\r\n        this.paperFormat = PaperFormatUtility.getFormat(width2, height2);\r\n    }\r\n\r\n    /**\r\n     * set the paper format using the screen resolution\r\n     * @param width width of the generated image\r\n     * @param height height of the generated image\r\n     */\r\n    public void setPaperFormat(double width, double height) {\r\n        setPaperFormat(width, height, Configuration.getInstance().getScreenResolution());\r\n    }\r\n\r\n    public Object clone() {\r\n        VisualPageListItem retVal = new VisualPageListItem(thumbnail, pageNumber, deleted, parentFileCanonicalPath, documentPassword, rotation);\r\n        retVal.setPaperFormat(paperFormat);\r\n        retVal.setOriginalRotation(originalRotation);\r\n        return retVal;\r\n    }\r\n\r\n    /**\r\n     * @return the paperFormat\r\n     */\r\n    public String getPaperFormat() {\r\n        return paperFormat;\r\n    }\r\n\r\n    /**\r\n     * @param paperFormat the paperFormat to set\r\n     */\r\n    public void setPaperFormat(String paperFormat) {\r\n        this.paperFormat = paperFormat;\r\n    }\r\n\r\n    /**\r\n     * @return the originalRotation\r\n     */\r\n    public Rotation getOriginalRotation() {\r\n        return originalRotation;\r\n    }\r\n\r\n    /**\r\n     * @param originalRotation the originalRotation to set\r\n     */\r\n    public void setOriginalRotation(Rotation originalRotation) {\r\n        this.originalRotation = originalRotation;\r\n    }\r\n\r\n    /**\r\n     * @return the full page rotation given by the sum of the {@link #originalRotation} and {@link #rotation}\r\n     */\r\n    public int getCompleteRotation() {\r\n        int retVal = rotation.getDegrees();\r\n        if (originalRotation != null) {\r\n            retVal += originalRotation.getDegrees();\r\n        }\r\n        retVal = (retVal % 360);\r\n        return retVal;\r\n    }\r\n\r\n    private void writeObject(java.io.ObjectOutputStream out) throws IOException {\r\n        out.defaultWriteObject();\r\n        out.writeObject(ImageUtility.toByteArray(thumbnail));\r\n    }\r\n\r\n    private void readObject(java.io.ObjectInputStream in) throws IOException, ClassNotFoundException {\r\n        in.defaultReadObject();\r\n        thumbnail = ImageUtility.fromByteArray((byte[]) in.readObject());\r\n    }\r\n}\r\n",
		"id": "EvoSuiteBenchmark/109_pdfsam/src/main/java/org/pdfsam/guiclient/dto/VisualPageListItemTest0.java",
		"test_prompt": "// VisualPageListItemTest0.java\npackage org.pdfsam.guiclient.dto;\n\nimport java.awt.image.BufferedImage;\nimport java.io.IOException;\nimport java.io.Serializable;\nimport org.pdfsam.guiclient.configuration.Configuration;\nimport org.pdfsam.guiclient.utils.ConversionUtility;\nimport org.pdfsam.guiclient.utils.ImageUtility;\nimport org.pdfsam.guiclient.utils.paper.PaperFormatUtility;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link VisualPageListItem}.\n* It contains ten unit test cases for the {@link VisualPageListItem#isDeleted()} method.\n*/\nclass VisualPageListItemTest0 {"
	},
	{
		"original_code": "// VisualPageListItem.java\n/*\r\n * Created on 18-Jun-2008\r\n * Copyright (C) 2008 by Andrea Vacondio.\r\n *\r\n * This program is free software; you can redistribute it and/or modify it under the terms of the \r\n * GNU General Public License as published by the Free Software Foundation; \r\n * either version 2 of the License.\r\n * This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; \r\n * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. \r\n * See the GNU General Public License for more details.\r\n * You should have received a copy of the GNU General Public License along with this program; \r\n * if not, write to the Free Software Foundation, Inc., \r\n *  59 Temple Place, Suite 330, Boston, MA 02111-1307 USA\r\n */\r\npackage org.pdfsam.guiclient.dto;\r\n\r\nimport java.awt.image.BufferedImage;\r\nimport java.io.IOException;\r\nimport java.io.Serializable;\r\nimport org.pdfsam.guiclient.configuration.Configuration;\r\nimport org.pdfsam.guiclient.utils.ConversionUtility;\r\nimport org.pdfsam.guiclient.utils.ImageUtility;\r\nimport org.pdfsam.guiclient.utils.paper.PaperFormatUtility;\r\n\r\n/**\r\n * DTO representing a page of a document\r\n * @author Andrea Vacondio\r\n */\r\npublic class VisualPageListItem implements Serializable, Cloneable {\r\n\r\n    private static final long serialVersionUID = 7598120284619680606L;\r\n\r\n    private transient BufferedImage thumbnail = ImageUtility.getHourglassImage();\r\n\r\n    private int pageNumber;\r\n\r\n    private boolean deleted = false;\r\n\r\n    private String parentFileCanonicalPath = \"\";\r\n\r\n    private String documentPassword = \"\";\r\n\r\n    private Rotation rotation = Rotation.DEGREES_0;\r\n\r\n    private Rotation originalRotation = Rotation.DEGREES_0;\r\n\r\n    private String paperFormat = \"\";\r\n\r\n    public VisualPageListItem() {\r\n    }\r\n\r\n    /**\r\n     * @param pageNumber\r\n     */\r\n    public VisualPageListItem(int pageNumber) {\r\n        this(ImageUtility.getHourglassImage(), pageNumber);\r\n    }\r\n\r\n    /**\r\n     * @param pageNumber\r\n     * @param parentFileCanonicalPath\r\n     */\r\n    public VisualPageListItem(int pageNumber, String parentFileCanonicalPath) {\r\n        this(ImageUtility.getHourglassImage(), pageNumber, false, parentFileCanonicalPath, null);\r\n    }\r\n\r\n    /**\r\n     * @param pageNumber\r\n     * @param parentFileCanonicalPath\r\n     * @param documentPassword\r\n     */\r\n    public VisualPageListItem(int pageNumber, String parentFileCanonicalPath, String documentPassword) {\r\n        this(ImageUtility.getHourglassImage(), pageNumber, false, parentFileCanonicalPath, documentPassword);\r\n    }\r\n\r\n    /**\r\n     * @param thumbnail\r\n     * @param pageNumber\r\n     */\r\n    public VisualPageListItem(BufferedImage thumbnail, int pageNumber) {\r\n        this(thumbnail, pageNumber, false);\r\n    }\r\n\r\n    /**\r\n     * @param thumbnail\r\n     * @param pageNumber\r\n     * @param deleted\r\n     */\r\n    public VisualPageListItem(BufferedImage thumbnail, int pageNumber, boolean deleted) {\r\n        this(thumbnail, pageNumber, deleted, \"\", null);\r\n    }\r\n\r\n    /**\r\n     * @param thumbnail\r\n     * @param pageNumber\r\n     * @param deleted\r\n     * @param parentFileCanonicalPath\r\n     * @param documentPassword\r\n     */\r\n    public VisualPageListItem(BufferedImage thumbnail, int pageNumber, boolean deleted, String parentFileCanonicalPath, String documentPassword) {\r\n        this(thumbnail, pageNumber, deleted, parentFileCanonicalPath, documentPassword, Rotation.DEGREES_0);\r\n    }\r\n\r\n    /**\r\n     * @param thumbnail\r\n     * @param pageNumber\r\n     * @param deleted\r\n     * @param parentFileCanonicalPath\r\n     * @param documentPassword\r\n     * @param rotation\r\n     */\r\n    public VisualPageListItem(BufferedImage thumbnail, int pageNumber, boolean deleted, String parentFileCanonicalPath, String documentPassword, Rotation rotation) {\r\n        super();\r\n        this.thumbnail = thumbnail;\r\n        this.pageNumber = pageNumber;\r\n        this.deleted = deleted;\r\n        this.parentFileCanonicalPath = parentFileCanonicalPath;\r\n        this.documentPassword = documentPassword;\r\n        this.rotation = rotation;\r\n    }\r\n\r\n    /**\r\n     * @return the thumbnail\r\n     */\r\n    public BufferedImage getThumbnail() {\r\n        return thumbnail;\r\n    }\r\n\r\n    /**\r\n     * @param thumbnail the thumbnails to set\r\n     */\r\n    public void setThumbnail(BufferedImage thumbnail) {\r\n        this.thumbnail = thumbnail;\r\n    }\r\n\r\n    /**\r\n     * @return the pageNumber\r\n     */\r\n    public int getPageNumber() {\r\n        return pageNumber;\r\n    }\r\n\r\n    /**\r\n     * @param pageNumber the pageNumber to set\r\n     */\r\n    public void setPageNumber(int pageNumber) {\r\n        this.pageNumber = pageNumber;\r\n    }\r\n\r\n    /**\r\n     * @return the deleted\r\n     */\r\n    public boolean isDeleted() {\r\n        return deleted;\r\n    }\r\n\r\n    /**\r\n     * @param deleted the deleted to set\r\n     */\r\n    public void setDeleted(boolean deleted) {\r\n        this.deleted = deleted;\r\n    }\r\n\r\n    /**\r\n     * @return the parentFileCanonicalPath\r\n     */\r\n    public String getParentFileCanonicalPath() {\r\n        return parentFileCanonicalPath;\r\n    }\r\n\r\n    /**\r\n     * @param parentFileCanonicalPath the parentFileCanonicalPath to set\r\n     */\r\n    public void setParentFileCanonicalPath(String parentFileCanonicalPath) {\r\n        this.parentFileCanonicalPath = parentFileCanonicalPath;\r\n    }\r\n\r\n    /**\r\n     * @return the documentPassword\r\n     */\r\n    public String getDocumentPassword() {\r\n        return documentPassword;\r\n    }\r\n\r\n    /**\r\n     * @param documentPassword the documentPassword to set\r\n     */\r\n    public void setDocumentPassword(String documentPassword) {\r\n        this.documentPassword = documentPassword;\r\n    }\r\n\r\n    /**\r\n     * @return the rotation\r\n     */\r\n    public Rotation getRotation() {\r\n        return rotation;\r\n    }\r\n\r\n    /**\r\n     * @param rotation the rotation to set\r\n     */\r\n    public void setRotation(Rotation rotation) {\r\n        this.rotation = rotation;\r\n    }\r\n\r\n    /**\r\n     * rotate clockwise the item\r\n     */\r\n    public void rotateClockwise() {\r\n        this.rotation = rotation.rotateClockwise();\r\n        this.thumbnail = ImageUtility.rotateImage(thumbnail, 90);\r\n    }\r\n\r\n    /**\r\n     * rotate anticlockwise the item\r\n     */\r\n    public void rotateAnticlockwise() {\r\n        this.rotation = rotation.rotateAnticlockwise();\r\n        this.thumbnail = ImageUtility.rotateImage(thumbnail, 270);\r\n    }\r\n\r\n    /**\r\n     * @return true if this item is rotated\r\n     */\r\n    public boolean isRotated() {\r\n        return (getCompleteRotation() != Rotation.DEGREES_0.getDegrees());\r\n    }\r\n\r\n    /**\r\n     * @return if the item has a 180 degrees rotation\r\n     */\r\n    public boolean isFullyRotated() {\r\n        return (getCompleteRotation() == Rotation.DEGREES_180.getDegrees());\r\n    }\r\n\r\n    /**\r\n     * Set the paper format in a string format\r\n     * @param width width of the generated image\r\n     * @param height height of the generated image\r\n     * @param resolution the resolution of the generated image\r\n     */\r\n    public void setPaperFormat(double width, double height, int resolution) {\r\n        double width2 = Math.round(ConversionUtility.toCentimeters(width / (double) resolution) * 10);\r\n        double height2 = Math.round(ConversionUtility.toCentimeters(height / (double) resolution) * 10);\r\n        this.paperFormat = PaperFormatUtility.getFormat(width2, height2);\r\n    }\r\n\r\n    /**\r\n     * set the paper format using the screen resolution\r\n     * @param width width of the generated image\r\n     * @param height height of the generated image\r\n     */\r\n    public void setPaperFormat(double width, double height) {\r\n        setPaperFormat(width, height, Configuration.getInstance().getScreenResolution());\r\n    }\r\n\r\n    public Object clone() {\r\n        VisualPageListItem retVal = new VisualPageListItem(thumbnail, pageNumber, deleted, parentFileCanonicalPath, documentPassword, rotation);\r\n        retVal.setPaperFormat(paperFormat);\r\n        retVal.setOriginalRotation(originalRotation);\r\n        return retVal;\r\n    }\r\n\r\n    /**\r\n     * @return the paperFormat\r\n     */\r\n    public String getPaperFormat() {\r\n        return paperFormat;\r\n    }\r\n\r\n    /**\r\n     * @param paperFormat the paperFormat to set\r\n     */\r\n    public void setPaperFormat(String paperFormat) {\r\n        this.paperFormat = paperFormat;\r\n    }\r\n\r\n    /**\r\n     * @return the originalRotation\r\n     */\r\n    public Rotation getOriginalRotation() {\r\n        return originalRotation;\r\n    }\r\n\r\n    /**\r\n     * @param originalRotation the originalRotation to set\r\n     */\r\n    public void setOriginalRotation(Rotation originalRotation) {\r\n        this.originalRotation = originalRotation;\r\n    }\r\n\r\n    /**\r\n     * @return the full page rotation given by the sum of the {@link #originalRotation} and {@link #rotation}\r\n     */\r\n    public int getCompleteRotation() {\r\n        int retVal = rotation.getDegrees();\r\n        if (originalRotation != null) {\r\n            retVal += originalRotation.getDegrees();\r\n        }\r\n        retVal = (retVal % 360);\r\n        return retVal;\r\n    }\r\n\r\n    private void writeObject(java.io.ObjectOutputStream out) throws IOException {\r\n        out.defaultWriteObject();\r\n        out.writeObject(ImageUtility.toByteArray(thumbnail));\r\n    }\r\n\r\n    private void readObject(java.io.ObjectInputStream in) throws IOException, ClassNotFoundException {\r\n        in.defaultReadObject();\r\n        thumbnail = ImageUtility.fromByteArray((byte[]) in.readObject());\r\n    }\r\n}\r\n",
		"id": "EvoSuiteBenchmark/109_pdfsam/src/main/java/org/pdfsam/guiclient/dto/VisualPageListItemTest1.java",
		"test_prompt": "// VisualPageListItemTest1.java\npackage org.pdfsam.guiclient.dto;\n\nimport java.awt.image.BufferedImage;\nimport java.io.IOException;\nimport java.io.Serializable;\nimport org.pdfsam.guiclient.configuration.Configuration;\nimport org.pdfsam.guiclient.utils.ConversionUtility;\nimport org.pdfsam.guiclient.utils.ImageUtility;\nimport org.pdfsam.guiclient.utils.paper.PaperFormatUtility;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link VisualPageListItem}.\n* It contains ten unit test cases for the {@link VisualPageListItem#isRotated()} method.\n*/\nclass VisualPageListItemTest1 {"
	},
	{
		"original_code": "// VisualPageListItem.java\n/*\r\n * Created on 18-Jun-2008\r\n * Copyright (C) 2008 by Andrea Vacondio.\r\n *\r\n * This program is free software; you can redistribute it and/or modify it under the terms of the \r\n * GNU General Public License as published by the Free Software Foundation; \r\n * either version 2 of the License.\r\n * This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; \r\n * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. \r\n * See the GNU General Public License for more details.\r\n * You should have received a copy of the GNU General Public License along with this program; \r\n * if not, write to the Free Software Foundation, Inc., \r\n *  59 Temple Place, Suite 330, Boston, MA 02111-1307 USA\r\n */\r\npackage org.pdfsam.guiclient.dto;\r\n\r\nimport java.awt.image.BufferedImage;\r\nimport java.io.IOException;\r\nimport java.io.Serializable;\r\nimport org.pdfsam.guiclient.configuration.Configuration;\r\nimport org.pdfsam.guiclient.utils.ConversionUtility;\r\nimport org.pdfsam.guiclient.utils.ImageUtility;\r\nimport org.pdfsam.guiclient.utils.paper.PaperFormatUtility;\r\n\r\n/**\r\n * DTO representing a page of a document\r\n * @author Andrea Vacondio\r\n */\r\npublic class VisualPageListItem implements Serializable, Cloneable {\r\n\r\n    private static final long serialVersionUID = 7598120284619680606L;\r\n\r\n    private transient BufferedImage thumbnail = ImageUtility.getHourglassImage();\r\n\r\n    private int pageNumber;\r\n\r\n    private boolean deleted = false;\r\n\r\n    private String parentFileCanonicalPath = \"\";\r\n\r\n    private String documentPassword = \"\";\r\n\r\n    private Rotation rotation = Rotation.DEGREES_0;\r\n\r\n    private Rotation originalRotation = Rotation.DEGREES_0;\r\n\r\n    private String paperFormat = \"\";\r\n\r\n    public VisualPageListItem() {\r\n    }\r\n\r\n    /**\r\n     * @param pageNumber\r\n     */\r\n    public VisualPageListItem(int pageNumber) {\r\n        this(ImageUtility.getHourglassImage(), pageNumber);\r\n    }\r\n\r\n    /**\r\n     * @param pageNumber\r\n     * @param parentFileCanonicalPath\r\n     */\r\n    public VisualPageListItem(int pageNumber, String parentFileCanonicalPath) {\r\n        this(ImageUtility.getHourglassImage(), pageNumber, false, parentFileCanonicalPath, null);\r\n    }\r\n\r\n    /**\r\n     * @param pageNumber\r\n     * @param parentFileCanonicalPath\r\n     * @param documentPassword\r\n     */\r\n    public VisualPageListItem(int pageNumber, String parentFileCanonicalPath, String documentPassword) {\r\n        this(ImageUtility.getHourglassImage(), pageNumber, false, parentFileCanonicalPath, documentPassword);\r\n    }\r\n\r\n    /**\r\n     * @param thumbnail\r\n     * @param pageNumber\r\n     */\r\n    public VisualPageListItem(BufferedImage thumbnail, int pageNumber) {\r\n        this(thumbnail, pageNumber, false);\r\n    }\r\n\r\n    /**\r\n     * @param thumbnail\r\n     * @param pageNumber\r\n     * @param deleted\r\n     */\r\n    public VisualPageListItem(BufferedImage thumbnail, int pageNumber, boolean deleted) {\r\n        this(thumbnail, pageNumber, deleted, \"\", null);\r\n    }\r\n\r\n    /**\r\n     * @param thumbnail\r\n     * @param pageNumber\r\n     * @param deleted\r\n     * @param parentFileCanonicalPath\r\n     * @param documentPassword\r\n     */\r\n    public VisualPageListItem(BufferedImage thumbnail, int pageNumber, boolean deleted, String parentFileCanonicalPath, String documentPassword) {\r\n        this(thumbnail, pageNumber, deleted, parentFileCanonicalPath, documentPassword, Rotation.DEGREES_0);\r\n    }\r\n\r\n    /**\r\n     * @param thumbnail\r\n     * @param pageNumber\r\n     * @param deleted\r\n     * @param parentFileCanonicalPath\r\n     * @param documentPassword\r\n     * @param rotation\r\n     */\r\n    public VisualPageListItem(BufferedImage thumbnail, int pageNumber, boolean deleted, String parentFileCanonicalPath, String documentPassword, Rotation rotation) {\r\n        super();\r\n        this.thumbnail = thumbnail;\r\n        this.pageNumber = pageNumber;\r\n        this.deleted = deleted;\r\n        this.parentFileCanonicalPath = parentFileCanonicalPath;\r\n        this.documentPassword = documentPassword;\r\n        this.rotation = rotation;\r\n    }\r\n\r\n    /**\r\n     * @return the thumbnail\r\n     */\r\n    public BufferedImage getThumbnail() {\r\n        return thumbnail;\r\n    }\r\n\r\n    /**\r\n     * @param thumbnail the thumbnails to set\r\n     */\r\n    public void setThumbnail(BufferedImage thumbnail) {\r\n        this.thumbnail = thumbnail;\r\n    }\r\n\r\n    /**\r\n     * @return the pageNumber\r\n     */\r\n    public int getPageNumber() {\r\n        return pageNumber;\r\n    }\r\n\r\n    /**\r\n     * @param pageNumber the pageNumber to set\r\n     */\r\n    public void setPageNumber(int pageNumber) {\r\n        this.pageNumber = pageNumber;\r\n    }\r\n\r\n    /**\r\n     * @return the deleted\r\n     */\r\n    public boolean isDeleted() {\r\n        return deleted;\r\n    }\r\n\r\n    /**\r\n     * @param deleted the deleted to set\r\n     */\r\n    public void setDeleted(boolean deleted) {\r\n        this.deleted = deleted;\r\n    }\r\n\r\n    /**\r\n     * @return the parentFileCanonicalPath\r\n     */\r\n    public String getParentFileCanonicalPath() {\r\n        return parentFileCanonicalPath;\r\n    }\r\n\r\n    /**\r\n     * @param parentFileCanonicalPath the parentFileCanonicalPath to set\r\n     */\r\n    public void setParentFileCanonicalPath(String parentFileCanonicalPath) {\r\n        this.parentFileCanonicalPath = parentFileCanonicalPath;\r\n    }\r\n\r\n    /**\r\n     * @return the documentPassword\r\n     */\r\n    public String getDocumentPassword() {\r\n        return documentPassword;\r\n    }\r\n\r\n    /**\r\n     * @param documentPassword the documentPassword to set\r\n     */\r\n    public void setDocumentPassword(String documentPassword) {\r\n        this.documentPassword = documentPassword;\r\n    }\r\n\r\n    /**\r\n     * @return the rotation\r\n     */\r\n    public Rotation getRotation() {\r\n        return rotation;\r\n    }\r\n\r\n    /**\r\n     * @param rotation the rotation to set\r\n     */\r\n    public void setRotation(Rotation rotation) {\r\n        this.rotation = rotation;\r\n    }\r\n\r\n    /**\r\n     * rotate clockwise the item\r\n     */\r\n    public void rotateClockwise() {\r\n        this.rotation = rotation.rotateClockwise();\r\n        this.thumbnail = ImageUtility.rotateImage(thumbnail, 90);\r\n    }\r\n\r\n    /**\r\n     * rotate anticlockwise the item\r\n     */\r\n    public void rotateAnticlockwise() {\r\n        this.rotation = rotation.rotateAnticlockwise();\r\n        this.thumbnail = ImageUtility.rotateImage(thumbnail, 270);\r\n    }\r\n\r\n    /**\r\n     * @return true if this item is rotated\r\n     */\r\n    public boolean isRotated() {\r\n        return (getCompleteRotation() != Rotation.DEGREES_0.getDegrees());\r\n    }\r\n\r\n    /**\r\n     * @return if the item has a 180 degrees rotation\r\n     */\r\n    public boolean isFullyRotated() {\r\n        return (getCompleteRotation() == Rotation.DEGREES_180.getDegrees());\r\n    }\r\n\r\n    /**\r\n     * Set the paper format in a string format\r\n     * @param width width of the generated image\r\n     * @param height height of the generated image\r\n     * @param resolution the resolution of the generated image\r\n     */\r\n    public void setPaperFormat(double width, double height, int resolution) {\r\n        double width2 = Math.round(ConversionUtility.toCentimeters(width / (double) resolution) * 10);\r\n        double height2 = Math.round(ConversionUtility.toCentimeters(height / (double) resolution) * 10);\r\n        this.paperFormat = PaperFormatUtility.getFormat(width2, height2);\r\n    }\r\n\r\n    /**\r\n     * set the paper format using the screen resolution\r\n     * @param width width of the generated image\r\n     * @param height height of the generated image\r\n     */\r\n    public void setPaperFormat(double width, double height) {\r\n        setPaperFormat(width, height, Configuration.getInstance().getScreenResolution());\r\n    }\r\n\r\n    public Object clone() {\r\n        VisualPageListItem retVal = new VisualPageListItem(thumbnail, pageNumber, deleted, parentFileCanonicalPath, documentPassword, rotation);\r\n        retVal.setPaperFormat(paperFormat);\r\n        retVal.setOriginalRotation(originalRotation);\r\n        return retVal;\r\n    }\r\n\r\n    /**\r\n     * @return the paperFormat\r\n     */\r\n    public String getPaperFormat() {\r\n        return paperFormat;\r\n    }\r\n\r\n    /**\r\n     * @param paperFormat the paperFormat to set\r\n     */\r\n    public void setPaperFormat(String paperFormat) {\r\n        this.paperFormat = paperFormat;\r\n    }\r\n\r\n    /**\r\n     * @return the originalRotation\r\n     */\r\n    public Rotation getOriginalRotation() {\r\n        return originalRotation;\r\n    }\r\n\r\n    /**\r\n     * @param originalRotation the originalRotation to set\r\n     */\r\n    public void setOriginalRotation(Rotation originalRotation) {\r\n        this.originalRotation = originalRotation;\r\n    }\r\n\r\n    /**\r\n     * @return the full page rotation given by the sum of the {@link #originalRotation} and {@link #rotation}\r\n     */\r\n    public int getCompleteRotation() {\r\n        int retVal = rotation.getDegrees();\r\n        if (originalRotation != null) {\r\n            retVal += originalRotation.getDegrees();\r\n        }\r\n        retVal = (retVal % 360);\r\n        return retVal;\r\n    }\r\n\r\n    private void writeObject(java.io.ObjectOutputStream out) throws IOException {\r\n        out.defaultWriteObject();\r\n        out.writeObject(ImageUtility.toByteArray(thumbnail));\r\n    }\r\n\r\n    private void readObject(java.io.ObjectInputStream in) throws IOException, ClassNotFoundException {\r\n        in.defaultReadObject();\r\n        thumbnail = ImageUtility.fromByteArray((byte[]) in.readObject());\r\n    }\r\n}\r\n",
		"id": "EvoSuiteBenchmark/109_pdfsam/src/main/java/org/pdfsam/guiclient/dto/VisualPageListItemTest2.java",
		"test_prompt": "// VisualPageListItemTest2.java\npackage org.pdfsam.guiclient.dto;\n\nimport java.awt.image.BufferedImage;\nimport java.io.IOException;\nimport java.io.Serializable;\nimport org.pdfsam.guiclient.configuration.Configuration;\nimport org.pdfsam.guiclient.utils.ConversionUtility;\nimport org.pdfsam.guiclient.utils.ImageUtility;\nimport org.pdfsam.guiclient.utils.paper.PaperFormatUtility;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link VisualPageListItem}.\n* It contains ten unit test cases for the {@link VisualPageListItem#isFullyRotated()} method.\n*/\nclass VisualPageListItemTest2 {"
	},
	{
		"original_code": "// VisualPageListItem.java\n/*\r\n * Created on 18-Jun-2008\r\n * Copyright (C) 2008 by Andrea Vacondio.\r\n *\r\n * This program is free software; you can redistribute it and/or modify it under the terms of the \r\n * GNU General Public License as published by the Free Software Foundation; \r\n * either version 2 of the License.\r\n * This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; \r\n * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. \r\n * See the GNU General Public License for more details.\r\n * You should have received a copy of the GNU General Public License along with this program; \r\n * if not, write to the Free Software Foundation, Inc., \r\n *  59 Temple Place, Suite 330, Boston, MA 02111-1307 USA\r\n */\r\npackage org.pdfsam.guiclient.dto;\r\n\r\nimport java.awt.image.BufferedImage;\r\nimport java.io.IOException;\r\nimport java.io.Serializable;\r\nimport org.pdfsam.guiclient.configuration.Configuration;\r\nimport org.pdfsam.guiclient.utils.ConversionUtility;\r\nimport org.pdfsam.guiclient.utils.ImageUtility;\r\nimport org.pdfsam.guiclient.utils.paper.PaperFormatUtility;\r\n\r\n/**\r\n * DTO representing a page of a document\r\n * @author Andrea Vacondio\r\n */\r\npublic class VisualPageListItem implements Serializable, Cloneable {\r\n\r\n    private static final long serialVersionUID = 7598120284619680606L;\r\n\r\n    private transient BufferedImage thumbnail = ImageUtility.getHourglassImage();\r\n\r\n    private int pageNumber;\r\n\r\n    private boolean deleted = false;\r\n\r\n    private String parentFileCanonicalPath = \"\";\r\n\r\n    private String documentPassword = \"\";\r\n\r\n    private Rotation rotation = Rotation.DEGREES_0;\r\n\r\n    private Rotation originalRotation = Rotation.DEGREES_0;\r\n\r\n    private String paperFormat = \"\";\r\n\r\n    public VisualPageListItem() {\r\n    }\r\n\r\n    /**\r\n     * @param pageNumber\r\n     */\r\n    public VisualPageListItem(int pageNumber) {\r\n        this(ImageUtility.getHourglassImage(), pageNumber);\r\n    }\r\n\r\n    /**\r\n     * @param pageNumber\r\n     * @param parentFileCanonicalPath\r\n     */\r\n    public VisualPageListItem(int pageNumber, String parentFileCanonicalPath) {\r\n        this(ImageUtility.getHourglassImage(), pageNumber, false, parentFileCanonicalPath, null);\r\n    }\r\n\r\n    /**\r\n     * @param pageNumber\r\n     * @param parentFileCanonicalPath\r\n     * @param documentPassword\r\n     */\r\n    public VisualPageListItem(int pageNumber, String parentFileCanonicalPath, String documentPassword) {\r\n        this(ImageUtility.getHourglassImage(), pageNumber, false, parentFileCanonicalPath, documentPassword);\r\n    }\r\n\r\n    /**\r\n     * @param thumbnail\r\n     * @param pageNumber\r\n     */\r\n    public VisualPageListItem(BufferedImage thumbnail, int pageNumber) {\r\n        this(thumbnail, pageNumber, false);\r\n    }\r\n\r\n    /**\r\n     * @param thumbnail\r\n     * @param pageNumber\r\n     * @param deleted\r\n     */\r\n    public VisualPageListItem(BufferedImage thumbnail, int pageNumber, boolean deleted) {\r\n        this(thumbnail, pageNumber, deleted, \"\", null);\r\n    }\r\n\r\n    /**\r\n     * @param thumbnail\r\n     * @param pageNumber\r\n     * @param deleted\r\n     * @param parentFileCanonicalPath\r\n     * @param documentPassword\r\n     */\r\n    public VisualPageListItem(BufferedImage thumbnail, int pageNumber, boolean deleted, String parentFileCanonicalPath, String documentPassword) {\r\n        this(thumbnail, pageNumber, deleted, parentFileCanonicalPath, documentPassword, Rotation.DEGREES_0);\r\n    }\r\n\r\n    /**\r\n     * @param thumbnail\r\n     * @param pageNumber\r\n     * @param deleted\r\n     * @param parentFileCanonicalPath\r\n     * @param documentPassword\r\n     * @param rotation\r\n     */\r\n    public VisualPageListItem(BufferedImage thumbnail, int pageNumber, boolean deleted, String parentFileCanonicalPath, String documentPassword, Rotation rotation) {\r\n        super();\r\n        this.thumbnail = thumbnail;\r\n        this.pageNumber = pageNumber;\r\n        this.deleted = deleted;\r\n        this.parentFileCanonicalPath = parentFileCanonicalPath;\r\n        this.documentPassword = documentPassword;\r\n        this.rotation = rotation;\r\n    }\r\n\r\n    /**\r\n     * @return the thumbnail\r\n     */\r\n    public BufferedImage getThumbnail() {\r\n        return thumbnail;\r\n    }\r\n\r\n    /**\r\n     * @param thumbnail the thumbnails to set\r\n     */\r\n    public void setThumbnail(BufferedImage thumbnail) {\r\n        this.thumbnail = thumbnail;\r\n    }\r\n\r\n    /**\r\n     * @return the pageNumber\r\n     */\r\n    public int getPageNumber() {\r\n        return pageNumber;\r\n    }\r\n\r\n    /**\r\n     * @param pageNumber the pageNumber to set\r\n     */\r\n    public void setPageNumber(int pageNumber) {\r\n        this.pageNumber = pageNumber;\r\n    }\r\n\r\n    /**\r\n     * @return the deleted\r\n     */\r\n    public boolean isDeleted() {\r\n        return deleted;\r\n    }\r\n\r\n    /**\r\n     * @param deleted the deleted to set\r\n     */\r\n    public void setDeleted(boolean deleted) {\r\n        this.deleted = deleted;\r\n    }\r\n\r\n    /**\r\n     * @return the parentFileCanonicalPath\r\n     */\r\n    public String getParentFileCanonicalPath() {\r\n        return parentFileCanonicalPath;\r\n    }\r\n\r\n    /**\r\n     * @param parentFileCanonicalPath the parentFileCanonicalPath to set\r\n     */\r\n    public void setParentFileCanonicalPath(String parentFileCanonicalPath) {\r\n        this.parentFileCanonicalPath = parentFileCanonicalPath;\r\n    }\r\n\r\n    /**\r\n     * @return the documentPassword\r\n     */\r\n    public String getDocumentPassword() {\r\n        return documentPassword;\r\n    }\r\n\r\n    /**\r\n     * @param documentPassword the documentPassword to set\r\n     */\r\n    public void setDocumentPassword(String documentPassword) {\r\n        this.documentPassword = documentPassword;\r\n    }\r\n\r\n    /**\r\n     * @return the rotation\r\n     */\r\n    public Rotation getRotation() {\r\n        return rotation;\r\n    }\r\n\r\n    /**\r\n     * @param rotation the rotation to set\r\n     */\r\n    public void setRotation(Rotation rotation) {\r\n        this.rotation = rotation;\r\n    }\r\n\r\n    /**\r\n     * rotate clockwise the item\r\n     */\r\n    public void rotateClockwise() {\r\n        this.rotation = rotation.rotateClockwise();\r\n        this.thumbnail = ImageUtility.rotateImage(thumbnail, 90);\r\n    }\r\n\r\n    /**\r\n     * rotate anticlockwise the item\r\n     */\r\n    public void rotateAnticlockwise() {\r\n        this.rotation = rotation.rotateAnticlockwise();\r\n        this.thumbnail = ImageUtility.rotateImage(thumbnail, 270);\r\n    }\r\n\r\n    /**\r\n     * @return true if this item is rotated\r\n     */\r\n    public boolean isRotated() {\r\n        return (getCompleteRotation() != Rotation.DEGREES_0.getDegrees());\r\n    }\r\n\r\n    /**\r\n     * @return if the item has a 180 degrees rotation\r\n     */\r\n    public boolean isFullyRotated() {\r\n        return (getCompleteRotation() == Rotation.DEGREES_180.getDegrees());\r\n    }\r\n\r\n    /**\r\n     * Set the paper format in a string format\r\n     * @param width width of the generated image\r\n     * @param height height of the generated image\r\n     * @param resolution the resolution of the generated image\r\n     */\r\n    public void setPaperFormat(double width, double height, int resolution) {\r\n        double width2 = Math.round(ConversionUtility.toCentimeters(width / (double) resolution) * 10);\r\n        double height2 = Math.round(ConversionUtility.toCentimeters(height / (double) resolution) * 10);\r\n        this.paperFormat = PaperFormatUtility.getFormat(width2, height2);\r\n    }\r\n\r\n    /**\r\n     * set the paper format using the screen resolution\r\n     * @param width width of the generated image\r\n     * @param height height of the generated image\r\n     */\r\n    public void setPaperFormat(double width, double height) {\r\n        setPaperFormat(width, height, Configuration.getInstance().getScreenResolution());\r\n    }\r\n\r\n    public Object clone() {\r\n        VisualPageListItem retVal = new VisualPageListItem(thumbnail, pageNumber, deleted, parentFileCanonicalPath, documentPassword, rotation);\r\n        retVal.setPaperFormat(paperFormat);\r\n        retVal.setOriginalRotation(originalRotation);\r\n        return retVal;\r\n    }\r\n\r\n    /**\r\n     * @return the paperFormat\r\n     */\r\n    public String getPaperFormat() {\r\n        return paperFormat;\r\n    }\r\n\r\n    /**\r\n     * @param paperFormat the paperFormat to set\r\n     */\r\n    public void setPaperFormat(String paperFormat) {\r\n        this.paperFormat = paperFormat;\r\n    }\r\n\r\n    /**\r\n     * @return the originalRotation\r\n     */\r\n    public Rotation getOriginalRotation() {\r\n        return originalRotation;\r\n    }\r\n\r\n    /**\r\n     * @param originalRotation the originalRotation to set\r\n     */\r\n    public void setOriginalRotation(Rotation originalRotation) {\r\n        this.originalRotation = originalRotation;\r\n    }\r\n\r\n    /**\r\n     * @return the full page rotation given by the sum of the {@link #originalRotation} and {@link #rotation}\r\n     */\r\n    public int getCompleteRotation() {\r\n        int retVal = rotation.getDegrees();\r\n        if (originalRotation != null) {\r\n            retVal += originalRotation.getDegrees();\r\n        }\r\n        retVal = (retVal % 360);\r\n        return retVal;\r\n    }\r\n\r\n    private void writeObject(java.io.ObjectOutputStream out) throws IOException {\r\n        out.defaultWriteObject();\r\n        out.writeObject(ImageUtility.toByteArray(thumbnail));\r\n    }\r\n\r\n    private void readObject(java.io.ObjectInputStream in) throws IOException, ClassNotFoundException {\r\n        in.defaultReadObject();\r\n        thumbnail = ImageUtility.fromByteArray((byte[]) in.readObject());\r\n    }\r\n}\r\n",
		"id": "EvoSuiteBenchmark/109_pdfsam/src/main/java/org/pdfsam/guiclient/dto/VisualPageListItemTest3.java",
		"test_prompt": "// VisualPageListItemTest3.java\npackage org.pdfsam.guiclient.dto;\n\nimport java.awt.image.BufferedImage;\nimport java.io.IOException;\nimport java.io.Serializable;\nimport org.pdfsam.guiclient.configuration.Configuration;\nimport org.pdfsam.guiclient.utils.ConversionUtility;\nimport org.pdfsam.guiclient.utils.ImageUtility;\nimport org.pdfsam.guiclient.utils.paper.PaperFormatUtility;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link VisualPageListItem}.\n* It contains ten unit test cases for the {@link VisualPageListItem#clone()} method.\n*/\nclass VisualPageListItemTest3 {"
	},
	{
		"original_code": "// StringItem.java\n/*\n * Created on 3-Nov-2007\n * Copyright (C) 2007 by Andrea Vacondio.\n *\n * This program is free software; you can redistribute it and/or modify it under the terms of the \n * GNU General Public License as published by the Free Software Foundation; \n * either version 2 of the License.\n * This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; \n * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. \n * See the GNU General Public License for more details.\n * You should have received a copy of the GNU General Public License along with this program; \n * if not, write to the Free Software Foundation, Inc., \n *  59 Temple Place, Suite 330, Boston, MA 02111-1307 USA\n */\npackage org.pdfsam.guiclient.dto;\n\nimport java.io.Serializable;\n\n/**\n * Model of a String id and its description\n * @author  Andrea Vacondio\n */\npublic class StringItem implements Serializable, Comparable<StringItem> {\n\n    private static final long serialVersionUID = -2689293296890998558L;\n\n    private String id;\n\n    private String description;\n\n    public StringItem() {\n    }\n\n    public StringItem(String id, String description) {\n        super();\n        this.id = id;\n        this.description = description;\n    }\n\n    /**\n     * @return the description\n     */\n    public String getDescription() {\n        return description;\n    }\n\n    /**\n     * @param description the description to set\n     */\n    public void setDescription(String description) {\n        this.description = description;\n    }\n\n    /**\n     * @return the id\n     */\n    public String getId() {\n        return id;\n    }\n\n    /**\n     * @param id the id to set\n     */\n    public void setId(String id) {\n        this.id = id;\n    }\n\n    public String toString() {\n        return description;\n    }\n\n    /* (non-Javadoc)\n\t * @see java.lang.Object#hashCode()\n\t */\n    public int hashCode() {\n        final int PRIME = 31;\n        int result = 1;\n        result = PRIME * result + ((description == null) ? 0 : description.hashCode());\n        result = PRIME * result + ((id == null) ? 0 : id.hashCode());\n        return result;\n    }\n\n    /* (non-Javadoc)\n\t * @see java.lang.Object#equals(java.lang.Object)\n\t */\n    public boolean equals(Object obj) {\n        if (this == obj)\n            return true;\n        if (obj == null)\n            return false;\n        if (getClass() != obj.getClass())\n            return false;\n        final StringItem other = (StringItem) obj;\n        if (description == null) {\n            if (other.description != null)\n                return false;\n        } else if (!description.equals(other.description))\n            return false;\n        if (id == null) {\n            if (other.id != null)\n                return false;\n        } else if (!id.equals(other.id))\n            return false;\n        return true;\n    }\n\n    public int compareTo(StringItem item) {\n        int retVal = description.compareTo(item.description);\n        if (retVal == 0) {\n            retVal = (this.hashCode() > item.hashCode()) ? 1 : -1;\n        }\n        return retVal;\n    }\n}\n",
		"id": "EvoSuiteBenchmark/109_pdfsam/src/main/java/org/pdfsam/guiclient/dto/StringItemTest0.java",
		"test_prompt": "// StringItemTest0.java\npackage org.pdfsam.guiclient.dto;\n\nimport java.io.Serializable;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link StringItem}.\n* It contains ten unit test cases for the {@link StringItem#hashCode()} method.\n*/\nclass StringItemTest0 {"
	},
	{
		"original_code": "// StringItem.java\n/*\n * Created on 3-Nov-2007\n * Copyright (C) 2007 by Andrea Vacondio.\n *\n * This program is free software; you can redistribute it and/or modify it under the terms of the \n * GNU General Public License as published by the Free Software Foundation; \n * either version 2 of the License.\n * This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; \n * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. \n * See the GNU General Public License for more details.\n * You should have received a copy of the GNU General Public License along with this program; \n * if not, write to the Free Software Foundation, Inc., \n *  59 Temple Place, Suite 330, Boston, MA 02111-1307 USA\n */\npackage org.pdfsam.guiclient.dto;\n\nimport java.io.Serializable;\n\n/**\n * Model of a String id and its description\n * @author  Andrea Vacondio\n */\npublic class StringItem implements Serializable, Comparable<StringItem> {\n\n    private static final long serialVersionUID = -2689293296890998558L;\n\n    private String id;\n\n    private String description;\n\n    public StringItem() {\n    }\n\n    public StringItem(String id, String description) {\n        super();\n        this.id = id;\n        this.description = description;\n    }\n\n    /**\n     * @return the description\n     */\n    public String getDescription() {\n        return description;\n    }\n\n    /**\n     * @param description the description to set\n     */\n    public void setDescription(String description) {\n        this.description = description;\n    }\n\n    /**\n     * @return the id\n     */\n    public String getId() {\n        return id;\n    }\n\n    /**\n     * @param id the id to set\n     */\n    public void setId(String id) {\n        this.id = id;\n    }\n\n    public String toString() {\n        return description;\n    }\n\n    /* (non-Javadoc)\n\t * @see java.lang.Object#hashCode()\n\t */\n    public int hashCode() {\n        final int PRIME = 31;\n        int result = 1;\n        result = PRIME * result + ((description == null) ? 0 : description.hashCode());\n        result = PRIME * result + ((id == null) ? 0 : id.hashCode());\n        return result;\n    }\n\n    /* (non-Javadoc)\n\t * @see java.lang.Object#equals(java.lang.Object)\n\t */\n    public boolean equals(Object obj) {\n        if (this == obj)\n            return true;\n        if (obj == null)\n            return false;\n        if (getClass() != obj.getClass())\n            return false;\n        final StringItem other = (StringItem) obj;\n        if (description == null) {\n            if (other.description != null)\n                return false;\n        } else if (!description.equals(other.description))\n            return false;\n        if (id == null) {\n            if (other.id != null)\n                return false;\n        } else if (!id.equals(other.id))\n            return false;\n        return true;\n    }\n\n    public int compareTo(StringItem item) {\n        int retVal = description.compareTo(item.description);\n        if (retVal == 0) {\n            retVal = (this.hashCode() > item.hashCode()) ? 1 : -1;\n        }\n        return retVal;\n    }\n}\n",
		"id": "EvoSuiteBenchmark/109_pdfsam/src/main/java/org/pdfsam/guiclient/dto/StringItemTest1.java",
		"test_prompt": "// StringItemTest1.java\npackage org.pdfsam.guiclient.dto;\n\nimport java.io.Serializable;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link StringItem}.\n* It contains ten unit test cases for the {@link StringItem#equals(Object)} method.\n*/\nclass StringItemTest1 {"
	},
	{
		"original_code": "// StringItem.java\n/*\n * Created on 3-Nov-2007\n * Copyright (C) 2007 by Andrea Vacondio.\n *\n * This program is free software; you can redistribute it and/or modify it under the terms of the \n * GNU General Public License as published by the Free Software Foundation; \n * either version 2 of the License.\n * This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; \n * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. \n * See the GNU General Public License for more details.\n * You should have received a copy of the GNU General Public License along with this program; \n * if not, write to the Free Software Foundation, Inc., \n *  59 Temple Place, Suite 330, Boston, MA 02111-1307 USA\n */\npackage org.pdfsam.guiclient.dto;\n\nimport java.io.Serializable;\n\n/**\n * Model of a String id and its description\n * @author  Andrea Vacondio\n */\npublic class StringItem implements Serializable, Comparable<StringItem> {\n\n    private static final long serialVersionUID = -2689293296890998558L;\n\n    private String id;\n\n    private String description;\n\n    public StringItem() {\n    }\n\n    public StringItem(String id, String description) {\n        super();\n        this.id = id;\n        this.description = description;\n    }\n\n    /**\n     * @return the description\n     */\n    public String getDescription() {\n        return description;\n    }\n\n    /**\n     * @param description the description to set\n     */\n    public void setDescription(String description) {\n        this.description = description;\n    }\n\n    /**\n     * @return the id\n     */\n    public String getId() {\n        return id;\n    }\n\n    /**\n     * @param id the id to set\n     */\n    public void setId(String id) {\n        this.id = id;\n    }\n\n    public String toString() {\n        return description;\n    }\n\n    /* (non-Javadoc)\n\t * @see java.lang.Object#hashCode()\n\t */\n    public int hashCode() {\n        final int PRIME = 31;\n        int result = 1;\n        result = PRIME * result + ((description == null) ? 0 : description.hashCode());\n        result = PRIME * result + ((id == null) ? 0 : id.hashCode());\n        return result;\n    }\n\n    /* (non-Javadoc)\n\t * @see java.lang.Object#equals(java.lang.Object)\n\t */\n    public boolean equals(Object obj) {\n        if (this == obj)\n            return true;\n        if (obj == null)\n            return false;\n        if (getClass() != obj.getClass())\n            return false;\n        final StringItem other = (StringItem) obj;\n        if (description == null) {\n            if (other.description != null)\n                return false;\n        } else if (!description.equals(other.description))\n            return false;\n        if (id == null) {\n            if (other.id != null)\n                return false;\n        } else if (!id.equals(other.id))\n            return false;\n        return true;\n    }\n\n    public int compareTo(StringItem item) {\n        int retVal = description.compareTo(item.description);\n        if (retVal == 0) {\n            retVal = (this.hashCode() > item.hashCode()) ? 1 : -1;\n        }\n        return retVal;\n    }\n}\n",
		"id": "EvoSuiteBenchmark/109_pdfsam/src/main/java/org/pdfsam/guiclient/dto/StringItemTest2.java",
		"test_prompt": "// StringItemTest2.java\npackage org.pdfsam.guiclient.dto;\n\nimport java.io.Serializable;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link StringItem}.\n* It contains ten unit test cases for the {@link StringItem#compareTo(StringItem)} method.\n*/\nclass StringItemTest2 {"
	},
	{
		"original_code": "// DocumentInfo.java\n/*\r\n * Created on 25-Sep-2008\r\n * Copyright (C) 2008 by Andrea Vacondio.\r\n *\r\n * This program is free software; you can redistribute it and/or modify it under the terms of the \r\n * GNU General Public License as published by the Free Software Foundation; \r\n * either version 2 of the License.\r\n * This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; \r\n * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. \r\n * See the GNU General Public License for more details.\r\n * You should have received a copy of the GNU General Public License along with this program; \r\n * if not, write to the Free Software Foundation, Inc., \r\n *  59 Temple Place, Suite 330, Boston, MA 02111-1307 USA\r\n */\r\npackage org.pdfsam.guiclient.dto;\r\n\r\nimport java.io.Serializable;\r\n\r\n/**\r\n * Pdf document informations\r\n * @author Andrea Vacondio\r\n */\r\npublic class DocumentInfo implements Serializable {\r\n\r\n    private static final long serialVersionUID = 311953478483580551L;\r\n\r\n    private String fileName;\r\n\r\n    private int pages;\r\n\r\n    private String pdfVersion;\r\n\r\n    private DocumentMetaData documentMetaData;\r\n\r\n    private boolean isEncrypted;\r\n\r\n    /**\r\n     * Creates and empty object with an empty DocumentMetaData\r\n     */\r\n    public DocumentInfo() {\r\n        super();\r\n        this.documentMetaData = new DocumentMetaData();\r\n    }\r\n\r\n    /**\r\n     * @param fileName\r\n     * @param pages\r\n     * @param pdfVersion\r\n     * @param documentMetaData\r\n     * @param isEncrypted\r\n     */\r\n    public DocumentInfo(String fileName, int pages, String pdfVersion, DocumentMetaData documentMetaData, boolean isEncrypted) {\r\n        super();\r\n        this.fileName = fileName;\r\n        this.pages = pages;\r\n        this.pdfVersion = pdfVersion;\r\n        this.documentMetaData = documentMetaData;\r\n        this.isEncrypted = isEncrypted;\r\n    }\r\n\r\n    /**\r\n     * @return the fileName\r\n     */\r\n    public String getFileName() {\r\n        return fileName;\r\n    }\r\n\r\n    /**\r\n     * @param fileName the fileName to set\r\n     */\r\n    public void setFileName(String fileName) {\r\n        this.fileName = fileName;\r\n    }\r\n\r\n    /**\r\n     * @return the pages\r\n     */\r\n    public int getPages() {\r\n        return pages;\r\n    }\r\n\r\n    /**\r\n     * @param pages the pages to set\r\n     */\r\n    public void setPages(int pages) {\r\n        this.pages = pages;\r\n    }\r\n\r\n    /**\r\n     * @return the pdfVersion\r\n     */\r\n    public String getPdfVersion() {\r\n        return pdfVersion;\r\n    }\r\n\r\n    /**\r\n     * @param pdfVersion the pdfVersion to set\r\n     */\r\n    public void setPdfVersion(String pdfVersion) {\r\n        this.pdfVersion = pdfVersion;\r\n    }\r\n\r\n    /**\r\n     * @return the documentMetaData\r\n     */\r\n    public DocumentMetaData getDocumentMetaData() {\r\n        return documentMetaData;\r\n    }\r\n\r\n    /**\r\n     * @param documentMetaData the documentMetaData to set\r\n     */\r\n    public void setDocumentMetaData(DocumentMetaData documentMetaData) {\r\n        this.documentMetaData = documentMetaData;\r\n    }\r\n\r\n    /**\r\n     * @return the isEncrypted\r\n     */\r\n    public boolean isEncrypted() {\r\n        return isEncrypted;\r\n    }\r\n\r\n    /**\r\n     * @param isEncrypted the isEncrypted to set\r\n     */\r\n    public void setEncrypted(boolean isEncrypted) {\r\n        this.isEncrypted = isEncrypted;\r\n    }\r\n}\r\n",
		"id": "EvoSuiteBenchmark/109_pdfsam/src/main/java/org/pdfsam/guiclient/dto/DocumentInfoTest.java",
		"test_prompt": "// DocumentInfoTest.java\npackage org.pdfsam.guiclient.dto;\n\nimport java.io.Serializable;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link DocumentInfo}.\n* It contains ten unit test cases for the {@link DocumentInfo#isEncrypted()} method.\n*/\nclass DocumentInfoTest {"
	},
	{
		"original_code": "// DocumentPage.java\n/*\n * Created on 22-Jul-2008\n * Copyright (C) 2008 by Andrea Vacondio.\n *\n * This program is free software; you can redistribute it and/or modify it under the terms of the \n * GNU General Public License as published by the Free Software Foundation; \n * either version 2 of the License.\n * This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; \n * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. \n * See the GNU General Public License for more details.\n * You should have received a copy of the GNU General Public License along with this program; \n * if not, write to the Free Software Foundation, Inc., \n *  59 Temple Place, Suite 330, Boston, MA 02111-1307 USA\n */\npackage org.pdfsam.guiclient.dto;\n\nimport java.io.Serializable;\n\n/**\n * Document page model used when loading the environment\n * @author Andrea Vacondio\n */\npublic class DocumentPage implements Serializable {\n\n    private static final long serialVersionUID = -5641009544900617998L;\n\n    private int pageNumber;\n\n    private boolean deleted;\n\n    private Rotation rotation = Rotation.DEGREES_0;\n\n    public DocumentPage() {\n    }\n\n    /**\n     * @param pageNumber\n     * @param deleted\n     * @param rotation\n     */\n    public DocumentPage(int pageNumber, boolean deleted, Rotation rotation) {\n        super();\n        this.pageNumber = pageNumber;\n        this.deleted = deleted;\n        this.rotation = rotation;\n    }\n\n    /**\n     * @return the pageNumber\n     */\n    public int getPageNumber() {\n        return pageNumber;\n    }\n\n    /**\n     * @param pageNumber the pageNumber to set\n     */\n    public void setPageNumber(int pageNumber) {\n        this.pageNumber = pageNumber;\n    }\n\n    /**\n     * @return the deleted\n     */\n    public boolean isDeleted() {\n        return deleted;\n    }\n\n    /**\n     * @param deleted the deleted to set\n     */\n    public void setDeleted(boolean deleted) {\n        this.deleted = deleted;\n    }\n\n    /**\n     * @return the rotation\n     */\n    public Rotation getRotation() {\n        return rotation;\n    }\n\n    /**\n     * @param rotation the rotation to set\n     */\n    public void setRotation(Rotation rotation) {\n        this.rotation = rotation;\n    }\n}\n",
		"id": "EvoSuiteBenchmark/109_pdfsam/src/main/java/org/pdfsam/guiclient/dto/DocumentPageTest.java",
		"test_prompt": "// DocumentPageTest.java\npackage org.pdfsam.guiclient.dto;\n\nimport java.io.Serializable;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link DocumentPage}.\n* It contains ten unit test cases for the {@link DocumentPage#isDeleted()} method.\n*/\nclass DocumentPageTest {"
	},
	{
		"original_code": "// Configuration.java\n/*\r\n * Created on 21-Dec-2006\r\n * Copyright (C) 2006 by Andrea Vacondio.\r\n *\r\n * This program is free software; you can redistribute it and/or modify it under the terms of the \r\n * GNU General Public License as published by the Free Software Foundation; \r\n * either version 2 of the License.\r\n * This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; \r\n * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. \r\n * See the GNU General Public License for more details.\r\n * You should have received a copy of the GNU General Public License along with this program; \r\n * if not, write to the Free Software Foundation, Inc., \r\n *  59 Temple Place, Suite 330, Boston, MA 02111-1307 USA\r\n */\r\npackage org.pdfsam.guiclient.configuration;\r\n\r\nimport java.awt.Toolkit;\r\nimport java.io.IOException;\r\nimport java.util.ResourceBundle;\r\nimport javax.swing.UIManager;\r\nimport org.apache.log4j.Level;\r\nimport org.apache.log4j.Logger;\r\nimport org.pdfsam.console.business.ConsoleServicesFacade;\r\nimport org.pdfsam.guiclient.business.TextPaneAppender;\r\nimport org.pdfsam.guiclient.configuration.services.ConfigurationService;\r\nimport org.pdfsam.guiclient.configuration.services.ConfigurationServiceLocator;\r\nimport org.pdfsam.guiclient.utils.ThemeUtility;\r\nimport org.pdfsam.i18n.GettextResource;\r\n\r\n/**\r\n * Configuration Singleton\r\n *\r\n * @author Andrea Vacondio\r\n */\r\npublic class Configuration {\r\n\r\n    private static final Logger log = Logger.getLogger(Configuration.class.getPackage().getName());\r\n\r\n    public static final int DEFAULT_POOL_SIZE = 3;\r\n\r\n    private static Configuration configObject;\r\n\r\n    private ConfigurationService configurationService;\r\n\r\n    private int screenResolution = 0;\r\n\r\n    private Configuration() {\r\n        initialize();\r\n    }\r\n\r\n    public Object clone() throws CloneNotSupportedException {\r\n        throw new CloneNotSupportedException(\"Cannot clone configuration object.\");\r\n    }\r\n\r\n    public static synchronized Configuration getInstance() {\r\n        if (configObject == null) {\r\n            configObject = new Configuration();\r\n        }\r\n        return configObject;\r\n    }\r\n\r\n    /**\r\n     * Initialization\r\n     */\r\n    private void initialize() {\r\n        try {\r\n            configurationService = ConfigurationServiceLocator.LOCATOR.getConfigurationService();\r\n            initializeLookAndFeel();\r\n            initializeLoggingLevel();\r\n            screenResolution = Toolkit.getDefaultToolkit().getScreenResolution();\r\n        } catch (Exception e) {\r\n            log.fatal(\"Error loading configuration.\", e);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * sets the look and feel\r\n     *\r\n     * @throws Exception\r\n     */\r\n    private void initializeLookAndFeel() throws Exception {\r\n        if (ThemeUtility.isPlastic(configurationService.getLookAndFeel())) {\r\n            ThemeUtility.setTheme(configurationService.getTheme());\r\n        }\r\n        UIManager.setLookAndFeel(ThemeUtility.getLAF(configurationService.getLookAndFeel()));\r\n    }\r\n\r\n    /**\r\n     * sets the logging threshold for the appender\r\n     */\r\n    private void initializeLoggingLevel() {\r\n        int logLevel = configurationService.getLoggingLevel();\r\n        try {\r\n            TextPaneAppender appender = (TextPaneAppender) Logger.getLogger(\"org.pdfsam\").getAppender(\"JLogPanel\");\r\n            Level loggingLevel = Level.toLevel(logLevel, Level.DEBUG);\r\n            log.info(GettextResource.gettext(getI18nResourceBundle(), \"Logging level set to \") + loggingLevel);\r\n            appender.setThreshold(loggingLevel);\r\n        } catch (Exception e) {\r\n            log.warn(GettextResource.gettext(getI18nResourceBundle(), \"Unable to set logging level.\"), e);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @return the language ResourceBundle\r\n     */\r\n    public ResourceBundle getI18nResourceBundle() {\r\n        return configurationService.getI18nResourceBundle();\r\n    }\r\n\r\n    /**\r\n     * @return the default environment\r\n     */\r\n    public String getDefaultEnvironment() {\r\n        return configurationService.getDefaultEnvironment();\r\n    }\r\n\r\n    /**\r\n     * Set the default environment path\r\n     *\r\n     * @param environmentPath\r\n     */\r\n    public void setDefaultEnvironment(String environmentPath) {\r\n        configurationService.setDefaultEnvironment(environmentPath);\r\n    }\r\n\r\n    /**\r\n     * @return the ConsoleServicesFacade\r\n     */\r\n    public ConsoleServicesFacade getConsoleServicesFacade() {\r\n        return configurationService.getConsoleServicesFacade();\r\n    }\r\n\r\n    /**\r\n     * @return the loggingLevel\r\n     */\r\n    public int getLoggingLevel() {\r\n        return configurationService.getLoggingLevel();\r\n    }\r\n\r\n    /**\r\n     * @return the checkForUpdates\r\n     */\r\n    public boolean isCheckForUpdates() {\r\n        return configurationService.isCheckForUpdates();\r\n    }\r\n\r\n    /**\r\n     * Set the check for updates\r\n     *\r\n     * @param checkForUpdateds\r\n     */\r\n    public void setCheckForUpdates(boolean checkForUpdateds) {\r\n        configurationService.setCheckForUpdates(checkForUpdateds);\r\n    }\r\n\r\n    /**\r\n     * @return the defaultWorkingDir\r\n     */\r\n    public String getDefaultWorkingDirectory() {\r\n        return configurationService.getDefaultWorkingDirectory();\r\n    }\r\n\r\n    /**\r\n     * Set the default working directory\r\n     *\r\n     * @param defaultDirectory\r\n     */\r\n    public void setDefaultWorkingDirectory(String defaultDirectory) {\r\n        configurationService.setDefaultWorkingDirectory(defaultDirectory);\r\n    }\r\n\r\n    /**\r\n     * @return the playSounds\r\n     */\r\n    public boolean isPlaySounds() {\r\n        return configurationService.isPlaySounds();\r\n    }\r\n\r\n    /**\r\n     * @param playSounds\r\n     *            the playSounds to set\r\n     */\r\n    public void setPlaySounds(boolean playSounds) {\r\n        configurationService.setPlaySounds(playSounds);\r\n    }\r\n\r\n    /**\r\n     * @return the screenResolution\r\n     */\r\n    public int getScreenResolution() {\r\n        return screenResolution;\r\n    }\r\n\r\n    /**\r\n     * @return the thumbCreatorPoolSize\r\n     */\r\n    public int getThumbCreatorPoolSize() {\r\n        return configurationService.getThumbCreatorPoolSize();\r\n    }\r\n\r\n    /**\r\n     * @return the thumbnailsCreatorIdentifier\r\n     */\r\n    public String getThumbnailsCreatorIdentifier() {\r\n        return configurationService.getThumbnailsCreatorIdentifier();\r\n    }\r\n\r\n    /**\r\n     * @param thumbnailsCreatorIdentifier\r\n     *            the thumbnailsCreatorIdentifier to set\r\n     */\r\n    public void setThumbnailsCreatorIdentifier(String thumbnailsCreatorIdentifier) {\r\n        configurationService.setThumbnailsCreatorIdentifier(thumbnailsCreatorIdentifier);\r\n    }\r\n\r\n    /**\r\n     * @return the selected language String representation\r\n     */\r\n    public String getSelectedLanguage() {\r\n        return configurationService.getLanguage();\r\n    }\r\n\r\n    /**\r\n     * Set the selected language\r\n     *\r\n     * @param language\r\n     */\r\n    public void setSelectedLanguage(String language) {\r\n        configurationService.setLanguage(language);\r\n    }\r\n\r\n    /**\r\n     * @return informations to be displayed\r\n     */\r\n    public String getConfigurationInformations() {\r\n        return configurationService.getConfigurationInformations();\r\n    }\r\n\r\n    /**\r\n     * @return the plugin absolute path\r\n     */\r\n    public String getPluginAbsolutePath() {\r\n        return configurationService.getPluginAbsolutePath();\r\n    }\r\n\r\n    /**\r\n     * @return the look and feel\r\n     */\r\n    public int getLookAndFeel() {\r\n        return configurationService.getLookAndFeel();\r\n    }\r\n\r\n    /**\r\n     * Set the look and feel\r\n     *\r\n     * @param lookAndFeel\r\n     */\r\n    public void setLookAndFeel(int lookAndFeel) {\r\n        configurationService.setLookAndFeel(lookAndFeel);\r\n    }\r\n\r\n    /**\r\n     * @return the theme\r\n     */\r\n    public int getTheme() {\r\n        return configurationService.getTheme();\r\n    }\r\n\r\n    /**\r\n     * Set the theme\r\n     *\r\n     * @param theme\r\n     */\r\n    public void setTheme(int theme) {\r\n        configurationService.setTheme(theme);\r\n    }\r\n\r\n    /**\r\n     * Set the logging level\r\n     *\r\n     * @param level\r\n     */\r\n    public void setLoggingLevel(int level) {\r\n        configurationService.setLoggingLevel(level);\r\n    }\r\n\r\n    /**\r\n     * @return the ask overwrite confirmation flag\r\n     */\r\n    public boolean isAskOverwriteConfirmation() {\r\n        return configurationService.isAskOverwriteConfirmation();\r\n    }\r\n\r\n    /**\r\n     * set the ask overwrite confirmation flag\r\n     *\r\n     * @param askOverwriteConfirmation\r\n     */\r\n    public void setAskOverwriteConfirmation(boolean askOverwriteConfirmation) {\r\n        configurationService.setAskOverwriteConfirmation(askOverwriteConfirmation);\r\n    }\r\n\r\n    /**\r\n     * @return true if high quality thumbnails\r\n     */\r\n    public boolean isHighQualityThumbnails() {\r\n        return configurationService.isHighQualityThumbnils();\r\n    }\r\n\r\n    /**\r\n     * @return\r\n     * @see org.pdfsam.guiclient.configuration.services.ConfigurationService#getThumbnailSize()\r\n     */\r\n    public int getThumbnailSize() {\r\n        return configurationService.getThumbnailSize();\r\n    }\r\n\r\n    /**\r\n     * save the current configuration\r\n     *\r\n     * @throws IOException\r\n     */\r\n    public void save() throws IOException {\r\n        configurationService.save();\r\n    }\r\n}\r\n",
		"id": "EvoSuiteBenchmark/109_pdfsam/src/main/java/org/pdfsam/guiclient/configuration/ConfigurationTest0.java",
		"test_prompt": "// ConfigurationTest0.java\npackage org.pdfsam.guiclient.configuration;\n\nimport java.awt.Toolkit;\nimport java.io.IOException;\nimport java.util.ResourceBundle;\nimport javax.swing.UIManager;\nimport org.apache.log4j.Level;\nimport org.apache.log4j.Logger;\nimport org.pdfsam.console.business.ConsoleServicesFacade;\nimport org.pdfsam.guiclient.business.TextPaneAppender;\nimport org.pdfsam.guiclient.configuration.services.ConfigurationService;\nimport org.pdfsam.guiclient.configuration.services.ConfigurationServiceLocator;\nimport org.pdfsam.guiclient.utils.ThemeUtility;\nimport org.pdfsam.i18n.GettextResource;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link Configuration}.\n* It contains ten unit test cases for the {@link Configuration#clone()} method.\n*/\nclass ConfigurationTest0 {"
	},
	{
		"original_code": "// Configuration.java\n/*\r\n * Created on 21-Dec-2006\r\n * Copyright (C) 2006 by Andrea Vacondio.\r\n *\r\n * This program is free software; you can redistribute it and/or modify it under the terms of the \r\n * GNU General Public License as published by the Free Software Foundation; \r\n * either version 2 of the License.\r\n * This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; \r\n * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. \r\n * See the GNU General Public License for more details.\r\n * You should have received a copy of the GNU General Public License along with this program; \r\n * if not, write to the Free Software Foundation, Inc., \r\n *  59 Temple Place, Suite 330, Boston, MA 02111-1307 USA\r\n */\r\npackage org.pdfsam.guiclient.configuration;\r\n\r\nimport java.awt.Toolkit;\r\nimport java.io.IOException;\r\nimport java.util.ResourceBundle;\r\nimport javax.swing.UIManager;\r\nimport org.apache.log4j.Level;\r\nimport org.apache.log4j.Logger;\r\nimport org.pdfsam.console.business.ConsoleServicesFacade;\r\nimport org.pdfsam.guiclient.business.TextPaneAppender;\r\nimport org.pdfsam.guiclient.configuration.services.ConfigurationService;\r\nimport org.pdfsam.guiclient.configuration.services.ConfigurationServiceLocator;\r\nimport org.pdfsam.guiclient.utils.ThemeUtility;\r\nimport org.pdfsam.i18n.GettextResource;\r\n\r\n/**\r\n * Configuration Singleton\r\n *\r\n * @author Andrea Vacondio\r\n */\r\npublic class Configuration {\r\n\r\n    private static final Logger log = Logger.getLogger(Configuration.class.getPackage().getName());\r\n\r\n    public static final int DEFAULT_POOL_SIZE = 3;\r\n\r\n    private static Configuration configObject;\r\n\r\n    private ConfigurationService configurationService;\r\n\r\n    private int screenResolution = 0;\r\n\r\n    private Configuration() {\r\n        initialize();\r\n    }\r\n\r\n    public Object clone() throws CloneNotSupportedException {\r\n        throw new CloneNotSupportedException(\"Cannot clone configuration object.\");\r\n    }\r\n\r\n    public static synchronized Configuration getInstance() {\r\n        if (configObject == null) {\r\n            configObject = new Configuration();\r\n        }\r\n        return configObject;\r\n    }\r\n\r\n    /**\r\n     * Initialization\r\n     */\r\n    private void initialize() {\r\n        try {\r\n            configurationService = ConfigurationServiceLocator.LOCATOR.getConfigurationService();\r\n            initializeLookAndFeel();\r\n            initializeLoggingLevel();\r\n            screenResolution = Toolkit.getDefaultToolkit().getScreenResolution();\r\n        } catch (Exception e) {\r\n            log.fatal(\"Error loading configuration.\", e);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * sets the look and feel\r\n     *\r\n     * @throws Exception\r\n     */\r\n    private void initializeLookAndFeel() throws Exception {\r\n        if (ThemeUtility.isPlastic(configurationService.getLookAndFeel())) {\r\n            ThemeUtility.setTheme(configurationService.getTheme());\r\n        }\r\n        UIManager.setLookAndFeel(ThemeUtility.getLAF(configurationService.getLookAndFeel()));\r\n    }\r\n\r\n    /**\r\n     * sets the logging threshold for the appender\r\n     */\r\n    private void initializeLoggingLevel() {\r\n        int logLevel = configurationService.getLoggingLevel();\r\n        try {\r\n            TextPaneAppender appender = (TextPaneAppender) Logger.getLogger(\"org.pdfsam\").getAppender(\"JLogPanel\");\r\n            Level loggingLevel = Level.toLevel(logLevel, Level.DEBUG);\r\n            log.info(GettextResource.gettext(getI18nResourceBundle(), \"Logging level set to \") + loggingLevel);\r\n            appender.setThreshold(loggingLevel);\r\n        } catch (Exception e) {\r\n            log.warn(GettextResource.gettext(getI18nResourceBundle(), \"Unable to set logging level.\"), e);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @return the language ResourceBundle\r\n     */\r\n    public ResourceBundle getI18nResourceBundle() {\r\n        return configurationService.getI18nResourceBundle();\r\n    }\r\n\r\n    /**\r\n     * @return the default environment\r\n     */\r\n    public String getDefaultEnvironment() {\r\n        return configurationService.getDefaultEnvironment();\r\n    }\r\n\r\n    /**\r\n     * Set the default environment path\r\n     *\r\n     * @param environmentPath\r\n     */\r\n    public void setDefaultEnvironment(String environmentPath) {\r\n        configurationService.setDefaultEnvironment(environmentPath);\r\n    }\r\n\r\n    /**\r\n     * @return the ConsoleServicesFacade\r\n     */\r\n    public ConsoleServicesFacade getConsoleServicesFacade() {\r\n        return configurationService.getConsoleServicesFacade();\r\n    }\r\n\r\n    /**\r\n     * @return the loggingLevel\r\n     */\r\n    public int getLoggingLevel() {\r\n        return configurationService.getLoggingLevel();\r\n    }\r\n\r\n    /**\r\n     * @return the checkForUpdates\r\n     */\r\n    public boolean isCheckForUpdates() {\r\n        return configurationService.isCheckForUpdates();\r\n    }\r\n\r\n    /**\r\n     * Set the check for updates\r\n     *\r\n     * @param checkForUpdateds\r\n     */\r\n    public void setCheckForUpdates(boolean checkForUpdateds) {\r\n        configurationService.setCheckForUpdates(checkForUpdateds);\r\n    }\r\n\r\n    /**\r\n     * @return the defaultWorkingDir\r\n     */\r\n    public String getDefaultWorkingDirectory() {\r\n        return configurationService.getDefaultWorkingDirectory();\r\n    }\r\n\r\n    /**\r\n     * Set the default working directory\r\n     *\r\n     * @param defaultDirectory\r\n     */\r\n    public void setDefaultWorkingDirectory(String defaultDirectory) {\r\n        configurationService.setDefaultWorkingDirectory(defaultDirectory);\r\n    }\r\n\r\n    /**\r\n     * @return the playSounds\r\n     */\r\n    public boolean isPlaySounds() {\r\n        return configurationService.isPlaySounds();\r\n    }\r\n\r\n    /**\r\n     * @param playSounds\r\n     *            the playSounds to set\r\n     */\r\n    public void setPlaySounds(boolean playSounds) {\r\n        configurationService.setPlaySounds(playSounds);\r\n    }\r\n\r\n    /**\r\n     * @return the screenResolution\r\n     */\r\n    public int getScreenResolution() {\r\n        return screenResolution;\r\n    }\r\n\r\n    /**\r\n     * @return the thumbCreatorPoolSize\r\n     */\r\n    public int getThumbCreatorPoolSize() {\r\n        return configurationService.getThumbCreatorPoolSize();\r\n    }\r\n\r\n    /**\r\n     * @return the thumbnailsCreatorIdentifier\r\n     */\r\n    public String getThumbnailsCreatorIdentifier() {\r\n        return configurationService.getThumbnailsCreatorIdentifier();\r\n    }\r\n\r\n    /**\r\n     * @param thumbnailsCreatorIdentifier\r\n     *            the thumbnailsCreatorIdentifier to set\r\n     */\r\n    public void setThumbnailsCreatorIdentifier(String thumbnailsCreatorIdentifier) {\r\n        configurationService.setThumbnailsCreatorIdentifier(thumbnailsCreatorIdentifier);\r\n    }\r\n\r\n    /**\r\n     * @return the selected language String representation\r\n     */\r\n    public String getSelectedLanguage() {\r\n        return configurationService.getLanguage();\r\n    }\r\n\r\n    /**\r\n     * Set the selected language\r\n     *\r\n     * @param language\r\n     */\r\n    public void setSelectedLanguage(String language) {\r\n        configurationService.setLanguage(language);\r\n    }\r\n\r\n    /**\r\n     * @return informations to be displayed\r\n     */\r\n    public String getConfigurationInformations() {\r\n        return configurationService.getConfigurationInformations();\r\n    }\r\n\r\n    /**\r\n     * @return the plugin absolute path\r\n     */\r\n    public String getPluginAbsolutePath() {\r\n        return configurationService.getPluginAbsolutePath();\r\n    }\r\n\r\n    /**\r\n     * @return the look and feel\r\n     */\r\n    public int getLookAndFeel() {\r\n        return configurationService.getLookAndFeel();\r\n    }\r\n\r\n    /**\r\n     * Set the look and feel\r\n     *\r\n     * @param lookAndFeel\r\n     */\r\n    public void setLookAndFeel(int lookAndFeel) {\r\n        configurationService.setLookAndFeel(lookAndFeel);\r\n    }\r\n\r\n    /**\r\n     * @return the theme\r\n     */\r\n    public int getTheme() {\r\n        return configurationService.getTheme();\r\n    }\r\n\r\n    /**\r\n     * Set the theme\r\n     *\r\n     * @param theme\r\n     */\r\n    public void setTheme(int theme) {\r\n        configurationService.setTheme(theme);\r\n    }\r\n\r\n    /**\r\n     * Set the logging level\r\n     *\r\n     * @param level\r\n     */\r\n    public void setLoggingLevel(int level) {\r\n        configurationService.setLoggingLevel(level);\r\n    }\r\n\r\n    /**\r\n     * @return the ask overwrite confirmation flag\r\n     */\r\n    public boolean isAskOverwriteConfirmation() {\r\n        return configurationService.isAskOverwriteConfirmation();\r\n    }\r\n\r\n    /**\r\n     * set the ask overwrite confirmation flag\r\n     *\r\n     * @param askOverwriteConfirmation\r\n     */\r\n    public void setAskOverwriteConfirmation(boolean askOverwriteConfirmation) {\r\n        configurationService.setAskOverwriteConfirmation(askOverwriteConfirmation);\r\n    }\r\n\r\n    /**\r\n     * @return true if high quality thumbnails\r\n     */\r\n    public boolean isHighQualityThumbnails() {\r\n        return configurationService.isHighQualityThumbnils();\r\n    }\r\n\r\n    /**\r\n     * @return\r\n     * @see org.pdfsam.guiclient.configuration.services.ConfigurationService#getThumbnailSize()\r\n     */\r\n    public int getThumbnailSize() {\r\n        return configurationService.getThumbnailSize();\r\n    }\r\n\r\n    /**\r\n     * save the current configuration\r\n     *\r\n     * @throws IOException\r\n     */\r\n    public void save() throws IOException {\r\n        configurationService.save();\r\n    }\r\n}\r\n",
		"id": "EvoSuiteBenchmark/109_pdfsam/src/main/java/org/pdfsam/guiclient/configuration/ConfigurationTest1.java",
		"test_prompt": "// ConfigurationTest1.java\npackage org.pdfsam.guiclient.configuration;\n\nimport java.awt.Toolkit;\nimport java.io.IOException;\nimport java.util.ResourceBundle;\nimport javax.swing.UIManager;\nimport org.apache.log4j.Level;\nimport org.apache.log4j.Logger;\nimport org.pdfsam.console.business.ConsoleServicesFacade;\nimport org.pdfsam.guiclient.business.TextPaneAppender;\nimport org.pdfsam.guiclient.configuration.services.ConfigurationService;\nimport org.pdfsam.guiclient.configuration.services.ConfigurationServiceLocator;\nimport org.pdfsam.guiclient.utils.ThemeUtility;\nimport org.pdfsam.i18n.GettextResource;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link Configuration}.\n* It contains ten unit test cases for the {@link Configuration#getInstance()} method.\n*/\nclass ConfigurationTest1 {"
	},
	{
		"original_code": "// Configuration.java\n/*\r\n * Created on 21-Dec-2006\r\n * Copyright (C) 2006 by Andrea Vacondio.\r\n *\r\n * This program is free software; you can redistribute it and/or modify it under the terms of the \r\n * GNU General Public License as published by the Free Software Foundation; \r\n * either version 2 of the License.\r\n * This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; \r\n * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. \r\n * See the GNU General Public License for more details.\r\n * You should have received a copy of the GNU General Public License along with this program; \r\n * if not, write to the Free Software Foundation, Inc., \r\n *  59 Temple Place, Suite 330, Boston, MA 02111-1307 USA\r\n */\r\npackage org.pdfsam.guiclient.configuration;\r\n\r\nimport java.awt.Toolkit;\r\nimport java.io.IOException;\r\nimport java.util.ResourceBundle;\r\nimport javax.swing.UIManager;\r\nimport org.apache.log4j.Level;\r\nimport org.apache.log4j.Logger;\r\nimport org.pdfsam.console.business.ConsoleServicesFacade;\r\nimport org.pdfsam.guiclient.business.TextPaneAppender;\r\nimport org.pdfsam.guiclient.configuration.services.ConfigurationService;\r\nimport org.pdfsam.guiclient.configuration.services.ConfigurationServiceLocator;\r\nimport org.pdfsam.guiclient.utils.ThemeUtility;\r\nimport org.pdfsam.i18n.GettextResource;\r\n\r\n/**\r\n * Configuration Singleton\r\n *\r\n * @author Andrea Vacondio\r\n */\r\npublic class Configuration {\r\n\r\n    private static final Logger log = Logger.getLogger(Configuration.class.getPackage().getName());\r\n\r\n    public static final int DEFAULT_POOL_SIZE = 3;\r\n\r\n    private static Configuration configObject;\r\n\r\n    private ConfigurationService configurationService;\r\n\r\n    private int screenResolution = 0;\r\n\r\n    private Configuration() {\r\n        initialize();\r\n    }\r\n\r\n    public Object clone() throws CloneNotSupportedException {\r\n        throw new CloneNotSupportedException(\"Cannot clone configuration object.\");\r\n    }\r\n\r\n    public static synchronized Configuration getInstance() {\r\n        if (configObject == null) {\r\n            configObject = new Configuration();\r\n        }\r\n        return configObject;\r\n    }\r\n\r\n    /**\r\n     * Initialization\r\n     */\r\n    private void initialize() {\r\n        try {\r\n            configurationService = ConfigurationServiceLocator.LOCATOR.getConfigurationService();\r\n            initializeLookAndFeel();\r\n            initializeLoggingLevel();\r\n            screenResolution = Toolkit.getDefaultToolkit().getScreenResolution();\r\n        } catch (Exception e) {\r\n            log.fatal(\"Error loading configuration.\", e);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * sets the look and feel\r\n     *\r\n     * @throws Exception\r\n     */\r\n    private void initializeLookAndFeel() throws Exception {\r\n        if (ThemeUtility.isPlastic(configurationService.getLookAndFeel())) {\r\n            ThemeUtility.setTheme(configurationService.getTheme());\r\n        }\r\n        UIManager.setLookAndFeel(ThemeUtility.getLAF(configurationService.getLookAndFeel()));\r\n    }\r\n\r\n    /**\r\n     * sets the logging threshold for the appender\r\n     */\r\n    private void initializeLoggingLevel() {\r\n        int logLevel = configurationService.getLoggingLevel();\r\n        try {\r\n            TextPaneAppender appender = (TextPaneAppender) Logger.getLogger(\"org.pdfsam\").getAppender(\"JLogPanel\");\r\n            Level loggingLevel = Level.toLevel(logLevel, Level.DEBUG);\r\n            log.info(GettextResource.gettext(getI18nResourceBundle(), \"Logging level set to \") + loggingLevel);\r\n            appender.setThreshold(loggingLevel);\r\n        } catch (Exception e) {\r\n            log.warn(GettextResource.gettext(getI18nResourceBundle(), \"Unable to set logging level.\"), e);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @return the language ResourceBundle\r\n     */\r\n    public ResourceBundle getI18nResourceBundle() {\r\n        return configurationService.getI18nResourceBundle();\r\n    }\r\n\r\n    /**\r\n     * @return the default environment\r\n     */\r\n    public String getDefaultEnvironment() {\r\n        return configurationService.getDefaultEnvironment();\r\n    }\r\n\r\n    /**\r\n     * Set the default environment path\r\n     *\r\n     * @param environmentPath\r\n     */\r\n    public void setDefaultEnvironment(String environmentPath) {\r\n        configurationService.setDefaultEnvironment(environmentPath);\r\n    }\r\n\r\n    /**\r\n     * @return the ConsoleServicesFacade\r\n     */\r\n    public ConsoleServicesFacade getConsoleServicesFacade() {\r\n        return configurationService.getConsoleServicesFacade();\r\n    }\r\n\r\n    /**\r\n     * @return the loggingLevel\r\n     */\r\n    public int getLoggingLevel() {\r\n        return configurationService.getLoggingLevel();\r\n    }\r\n\r\n    /**\r\n     * @return the checkForUpdates\r\n     */\r\n    public boolean isCheckForUpdates() {\r\n        return configurationService.isCheckForUpdates();\r\n    }\r\n\r\n    /**\r\n     * Set the check for updates\r\n     *\r\n     * @param checkForUpdateds\r\n     */\r\n    public void setCheckForUpdates(boolean checkForUpdateds) {\r\n        configurationService.setCheckForUpdates(checkForUpdateds);\r\n    }\r\n\r\n    /**\r\n     * @return the defaultWorkingDir\r\n     */\r\n    public String getDefaultWorkingDirectory() {\r\n        return configurationService.getDefaultWorkingDirectory();\r\n    }\r\n\r\n    /**\r\n     * Set the default working directory\r\n     *\r\n     * @param defaultDirectory\r\n     */\r\n    public void setDefaultWorkingDirectory(String defaultDirectory) {\r\n        configurationService.setDefaultWorkingDirectory(defaultDirectory);\r\n    }\r\n\r\n    /**\r\n     * @return the playSounds\r\n     */\r\n    public boolean isPlaySounds() {\r\n        return configurationService.isPlaySounds();\r\n    }\r\n\r\n    /**\r\n     * @param playSounds\r\n     *            the playSounds to set\r\n     */\r\n    public void setPlaySounds(boolean playSounds) {\r\n        configurationService.setPlaySounds(playSounds);\r\n    }\r\n\r\n    /**\r\n     * @return the screenResolution\r\n     */\r\n    public int getScreenResolution() {\r\n        return screenResolution;\r\n    }\r\n\r\n    /**\r\n     * @return the thumbCreatorPoolSize\r\n     */\r\n    public int getThumbCreatorPoolSize() {\r\n        return configurationService.getThumbCreatorPoolSize();\r\n    }\r\n\r\n    /**\r\n     * @return the thumbnailsCreatorIdentifier\r\n     */\r\n    public String getThumbnailsCreatorIdentifier() {\r\n        return configurationService.getThumbnailsCreatorIdentifier();\r\n    }\r\n\r\n    /**\r\n     * @param thumbnailsCreatorIdentifier\r\n     *            the thumbnailsCreatorIdentifier to set\r\n     */\r\n    public void setThumbnailsCreatorIdentifier(String thumbnailsCreatorIdentifier) {\r\n        configurationService.setThumbnailsCreatorIdentifier(thumbnailsCreatorIdentifier);\r\n    }\r\n\r\n    /**\r\n     * @return the selected language String representation\r\n     */\r\n    public String getSelectedLanguage() {\r\n        return configurationService.getLanguage();\r\n    }\r\n\r\n    /**\r\n     * Set the selected language\r\n     *\r\n     * @param language\r\n     */\r\n    public void setSelectedLanguage(String language) {\r\n        configurationService.setLanguage(language);\r\n    }\r\n\r\n    /**\r\n     * @return informations to be displayed\r\n     */\r\n    public String getConfigurationInformations() {\r\n        return configurationService.getConfigurationInformations();\r\n    }\r\n\r\n    /**\r\n     * @return the plugin absolute path\r\n     */\r\n    public String getPluginAbsolutePath() {\r\n        return configurationService.getPluginAbsolutePath();\r\n    }\r\n\r\n    /**\r\n     * @return the look and feel\r\n     */\r\n    public int getLookAndFeel() {\r\n        return configurationService.getLookAndFeel();\r\n    }\r\n\r\n    /**\r\n     * Set the look and feel\r\n     *\r\n     * @param lookAndFeel\r\n     */\r\n    public void setLookAndFeel(int lookAndFeel) {\r\n        configurationService.setLookAndFeel(lookAndFeel);\r\n    }\r\n\r\n    /**\r\n     * @return the theme\r\n     */\r\n    public int getTheme() {\r\n        return configurationService.getTheme();\r\n    }\r\n\r\n    /**\r\n     * Set the theme\r\n     *\r\n     * @param theme\r\n     */\r\n    public void setTheme(int theme) {\r\n        configurationService.setTheme(theme);\r\n    }\r\n\r\n    /**\r\n     * Set the logging level\r\n     *\r\n     * @param level\r\n     */\r\n    public void setLoggingLevel(int level) {\r\n        configurationService.setLoggingLevel(level);\r\n    }\r\n\r\n    /**\r\n     * @return the ask overwrite confirmation flag\r\n     */\r\n    public boolean isAskOverwriteConfirmation() {\r\n        return configurationService.isAskOverwriteConfirmation();\r\n    }\r\n\r\n    /**\r\n     * set the ask overwrite confirmation flag\r\n     *\r\n     * @param askOverwriteConfirmation\r\n     */\r\n    public void setAskOverwriteConfirmation(boolean askOverwriteConfirmation) {\r\n        configurationService.setAskOverwriteConfirmation(askOverwriteConfirmation);\r\n    }\r\n\r\n    /**\r\n     * @return true if high quality thumbnails\r\n     */\r\n    public boolean isHighQualityThumbnails() {\r\n        return configurationService.isHighQualityThumbnils();\r\n    }\r\n\r\n    /**\r\n     * @return\r\n     * @see org.pdfsam.guiclient.configuration.services.ConfigurationService#getThumbnailSize()\r\n     */\r\n    public int getThumbnailSize() {\r\n        return configurationService.getThumbnailSize();\r\n    }\r\n\r\n    /**\r\n     * save the current configuration\r\n     *\r\n     * @throws IOException\r\n     */\r\n    public void save() throws IOException {\r\n        configurationService.save();\r\n    }\r\n}\r\n",
		"id": "EvoSuiteBenchmark/109_pdfsam/src/main/java/org/pdfsam/guiclient/configuration/ConfigurationTest2.java",
		"test_prompt": "// ConfigurationTest2.java\npackage org.pdfsam.guiclient.configuration;\n\nimport java.awt.Toolkit;\nimport java.io.IOException;\nimport java.util.ResourceBundle;\nimport javax.swing.UIManager;\nimport org.apache.log4j.Level;\nimport org.apache.log4j.Logger;\nimport org.pdfsam.console.business.ConsoleServicesFacade;\nimport org.pdfsam.guiclient.business.TextPaneAppender;\nimport org.pdfsam.guiclient.configuration.services.ConfigurationService;\nimport org.pdfsam.guiclient.configuration.services.ConfigurationServiceLocator;\nimport org.pdfsam.guiclient.utils.ThemeUtility;\nimport org.pdfsam.i18n.GettextResource;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link Configuration}.\n* It contains ten unit test cases for the {@link Configuration#isCheckForUpdates()} method.\n*/\nclass ConfigurationTest2 {"
	},
	{
		"original_code": "// Configuration.java\n/*\r\n * Created on 21-Dec-2006\r\n * Copyright (C) 2006 by Andrea Vacondio.\r\n *\r\n * This program is free software; you can redistribute it and/or modify it under the terms of the \r\n * GNU General Public License as published by the Free Software Foundation; \r\n * either version 2 of the License.\r\n * This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; \r\n * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. \r\n * See the GNU General Public License for more details.\r\n * You should have received a copy of the GNU General Public License along with this program; \r\n * if not, write to the Free Software Foundation, Inc., \r\n *  59 Temple Place, Suite 330, Boston, MA 02111-1307 USA\r\n */\r\npackage org.pdfsam.guiclient.configuration;\r\n\r\nimport java.awt.Toolkit;\r\nimport java.io.IOException;\r\nimport java.util.ResourceBundle;\r\nimport javax.swing.UIManager;\r\nimport org.apache.log4j.Level;\r\nimport org.apache.log4j.Logger;\r\nimport org.pdfsam.console.business.ConsoleServicesFacade;\r\nimport org.pdfsam.guiclient.business.TextPaneAppender;\r\nimport org.pdfsam.guiclient.configuration.services.ConfigurationService;\r\nimport org.pdfsam.guiclient.configuration.services.ConfigurationServiceLocator;\r\nimport org.pdfsam.guiclient.utils.ThemeUtility;\r\nimport org.pdfsam.i18n.GettextResource;\r\n\r\n/**\r\n * Configuration Singleton\r\n *\r\n * @author Andrea Vacondio\r\n */\r\npublic class Configuration {\r\n\r\n    private static final Logger log = Logger.getLogger(Configuration.class.getPackage().getName());\r\n\r\n    public static final int DEFAULT_POOL_SIZE = 3;\r\n\r\n    private static Configuration configObject;\r\n\r\n    private ConfigurationService configurationService;\r\n\r\n    private int screenResolution = 0;\r\n\r\n    private Configuration() {\r\n        initialize();\r\n    }\r\n\r\n    public Object clone() throws CloneNotSupportedException {\r\n        throw new CloneNotSupportedException(\"Cannot clone configuration object.\");\r\n    }\r\n\r\n    public static synchronized Configuration getInstance() {\r\n        if (configObject == null) {\r\n            configObject = new Configuration();\r\n        }\r\n        return configObject;\r\n    }\r\n\r\n    /**\r\n     * Initialization\r\n     */\r\n    private void initialize() {\r\n        try {\r\n            configurationService = ConfigurationServiceLocator.LOCATOR.getConfigurationService();\r\n            initializeLookAndFeel();\r\n            initializeLoggingLevel();\r\n            screenResolution = Toolkit.getDefaultToolkit().getScreenResolution();\r\n        } catch (Exception e) {\r\n            log.fatal(\"Error loading configuration.\", e);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * sets the look and feel\r\n     *\r\n     * @throws Exception\r\n     */\r\n    private void initializeLookAndFeel() throws Exception {\r\n        if (ThemeUtility.isPlastic(configurationService.getLookAndFeel())) {\r\n            ThemeUtility.setTheme(configurationService.getTheme());\r\n        }\r\n        UIManager.setLookAndFeel(ThemeUtility.getLAF(configurationService.getLookAndFeel()));\r\n    }\r\n\r\n    /**\r\n     * sets the logging threshold for the appender\r\n     */\r\n    private void initializeLoggingLevel() {\r\n        int logLevel = configurationService.getLoggingLevel();\r\n        try {\r\n            TextPaneAppender appender = (TextPaneAppender) Logger.getLogger(\"org.pdfsam\").getAppender(\"JLogPanel\");\r\n            Level loggingLevel = Level.toLevel(logLevel, Level.DEBUG);\r\n            log.info(GettextResource.gettext(getI18nResourceBundle(), \"Logging level set to \") + loggingLevel);\r\n            appender.setThreshold(loggingLevel);\r\n        } catch (Exception e) {\r\n            log.warn(GettextResource.gettext(getI18nResourceBundle(), \"Unable to set logging level.\"), e);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @return the language ResourceBundle\r\n     */\r\n    public ResourceBundle getI18nResourceBundle() {\r\n        return configurationService.getI18nResourceBundle();\r\n    }\r\n\r\n    /**\r\n     * @return the default environment\r\n     */\r\n    public String getDefaultEnvironment() {\r\n        return configurationService.getDefaultEnvironment();\r\n    }\r\n\r\n    /**\r\n     * Set the default environment path\r\n     *\r\n     * @param environmentPath\r\n     */\r\n    public void setDefaultEnvironment(String environmentPath) {\r\n        configurationService.setDefaultEnvironment(environmentPath);\r\n    }\r\n\r\n    /**\r\n     * @return the ConsoleServicesFacade\r\n     */\r\n    public ConsoleServicesFacade getConsoleServicesFacade() {\r\n        return configurationService.getConsoleServicesFacade();\r\n    }\r\n\r\n    /**\r\n     * @return the loggingLevel\r\n     */\r\n    public int getLoggingLevel() {\r\n        return configurationService.getLoggingLevel();\r\n    }\r\n\r\n    /**\r\n     * @return the checkForUpdates\r\n     */\r\n    public boolean isCheckForUpdates() {\r\n        return configurationService.isCheckForUpdates();\r\n    }\r\n\r\n    /**\r\n     * Set the check for updates\r\n     *\r\n     * @param checkForUpdateds\r\n     */\r\n    public void setCheckForUpdates(boolean checkForUpdateds) {\r\n        configurationService.setCheckForUpdates(checkForUpdateds);\r\n    }\r\n\r\n    /**\r\n     * @return the defaultWorkingDir\r\n     */\r\n    public String getDefaultWorkingDirectory() {\r\n        return configurationService.getDefaultWorkingDirectory();\r\n    }\r\n\r\n    /**\r\n     * Set the default working directory\r\n     *\r\n     * @param defaultDirectory\r\n     */\r\n    public void setDefaultWorkingDirectory(String defaultDirectory) {\r\n        configurationService.setDefaultWorkingDirectory(defaultDirectory);\r\n    }\r\n\r\n    /**\r\n     * @return the playSounds\r\n     */\r\n    public boolean isPlaySounds() {\r\n        return configurationService.isPlaySounds();\r\n    }\r\n\r\n    /**\r\n     * @param playSounds\r\n     *            the playSounds to set\r\n     */\r\n    public void setPlaySounds(boolean playSounds) {\r\n        configurationService.setPlaySounds(playSounds);\r\n    }\r\n\r\n    /**\r\n     * @return the screenResolution\r\n     */\r\n    public int getScreenResolution() {\r\n        return screenResolution;\r\n    }\r\n\r\n    /**\r\n     * @return the thumbCreatorPoolSize\r\n     */\r\n    public int getThumbCreatorPoolSize() {\r\n        return configurationService.getThumbCreatorPoolSize();\r\n    }\r\n\r\n    /**\r\n     * @return the thumbnailsCreatorIdentifier\r\n     */\r\n    public String getThumbnailsCreatorIdentifier() {\r\n        return configurationService.getThumbnailsCreatorIdentifier();\r\n    }\r\n\r\n    /**\r\n     * @param thumbnailsCreatorIdentifier\r\n     *            the thumbnailsCreatorIdentifier to set\r\n     */\r\n    public void setThumbnailsCreatorIdentifier(String thumbnailsCreatorIdentifier) {\r\n        configurationService.setThumbnailsCreatorIdentifier(thumbnailsCreatorIdentifier);\r\n    }\r\n\r\n    /**\r\n     * @return the selected language String representation\r\n     */\r\n    public String getSelectedLanguage() {\r\n        return configurationService.getLanguage();\r\n    }\r\n\r\n    /**\r\n     * Set the selected language\r\n     *\r\n     * @param language\r\n     */\r\n    public void setSelectedLanguage(String language) {\r\n        configurationService.setLanguage(language);\r\n    }\r\n\r\n    /**\r\n     * @return informations to be displayed\r\n     */\r\n    public String getConfigurationInformations() {\r\n        return configurationService.getConfigurationInformations();\r\n    }\r\n\r\n    /**\r\n     * @return the plugin absolute path\r\n     */\r\n    public String getPluginAbsolutePath() {\r\n        return configurationService.getPluginAbsolutePath();\r\n    }\r\n\r\n    /**\r\n     * @return the look and feel\r\n     */\r\n    public int getLookAndFeel() {\r\n        return configurationService.getLookAndFeel();\r\n    }\r\n\r\n    /**\r\n     * Set the look and feel\r\n     *\r\n     * @param lookAndFeel\r\n     */\r\n    public void setLookAndFeel(int lookAndFeel) {\r\n        configurationService.setLookAndFeel(lookAndFeel);\r\n    }\r\n\r\n    /**\r\n     * @return the theme\r\n     */\r\n    public int getTheme() {\r\n        return configurationService.getTheme();\r\n    }\r\n\r\n    /**\r\n     * Set the theme\r\n     *\r\n     * @param theme\r\n     */\r\n    public void setTheme(int theme) {\r\n        configurationService.setTheme(theme);\r\n    }\r\n\r\n    /**\r\n     * Set the logging level\r\n     *\r\n     * @param level\r\n     */\r\n    public void setLoggingLevel(int level) {\r\n        configurationService.setLoggingLevel(level);\r\n    }\r\n\r\n    /**\r\n     * @return the ask overwrite confirmation flag\r\n     */\r\n    public boolean isAskOverwriteConfirmation() {\r\n        return configurationService.isAskOverwriteConfirmation();\r\n    }\r\n\r\n    /**\r\n     * set the ask overwrite confirmation flag\r\n     *\r\n     * @param askOverwriteConfirmation\r\n     */\r\n    public void setAskOverwriteConfirmation(boolean askOverwriteConfirmation) {\r\n        configurationService.setAskOverwriteConfirmation(askOverwriteConfirmation);\r\n    }\r\n\r\n    /**\r\n     * @return true if high quality thumbnails\r\n     */\r\n    public boolean isHighQualityThumbnails() {\r\n        return configurationService.isHighQualityThumbnils();\r\n    }\r\n\r\n    /**\r\n     * @return\r\n     * @see org.pdfsam.guiclient.configuration.services.ConfigurationService#getThumbnailSize()\r\n     */\r\n    public int getThumbnailSize() {\r\n        return configurationService.getThumbnailSize();\r\n    }\r\n\r\n    /**\r\n     * save the current configuration\r\n     *\r\n     * @throws IOException\r\n     */\r\n    public void save() throws IOException {\r\n        configurationService.save();\r\n    }\r\n}\r\n",
		"id": "EvoSuiteBenchmark/109_pdfsam/src/main/java/org/pdfsam/guiclient/configuration/ConfigurationTest3.java",
		"test_prompt": "// ConfigurationTest3.java\npackage org.pdfsam.guiclient.configuration;\n\nimport java.awt.Toolkit;\nimport java.io.IOException;\nimport java.util.ResourceBundle;\nimport javax.swing.UIManager;\nimport org.apache.log4j.Level;\nimport org.apache.log4j.Logger;\nimport org.pdfsam.console.business.ConsoleServicesFacade;\nimport org.pdfsam.guiclient.business.TextPaneAppender;\nimport org.pdfsam.guiclient.configuration.services.ConfigurationService;\nimport org.pdfsam.guiclient.configuration.services.ConfigurationServiceLocator;\nimport org.pdfsam.guiclient.utils.ThemeUtility;\nimport org.pdfsam.i18n.GettextResource;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link Configuration}.\n* It contains ten unit test cases for the {@link Configuration#isPlaySounds()} method.\n*/\nclass ConfigurationTest3 {"
	},
	{
		"original_code": "// Configuration.java\n/*\r\n * Created on 21-Dec-2006\r\n * Copyright (C) 2006 by Andrea Vacondio.\r\n *\r\n * This program is free software; you can redistribute it and/or modify it under the terms of the \r\n * GNU General Public License as published by the Free Software Foundation; \r\n * either version 2 of the License.\r\n * This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; \r\n * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. \r\n * See the GNU General Public License for more details.\r\n * You should have received a copy of the GNU General Public License along with this program; \r\n * if not, write to the Free Software Foundation, Inc., \r\n *  59 Temple Place, Suite 330, Boston, MA 02111-1307 USA\r\n */\r\npackage org.pdfsam.guiclient.configuration;\r\n\r\nimport java.awt.Toolkit;\r\nimport java.io.IOException;\r\nimport java.util.ResourceBundle;\r\nimport javax.swing.UIManager;\r\nimport org.apache.log4j.Level;\r\nimport org.apache.log4j.Logger;\r\nimport org.pdfsam.console.business.ConsoleServicesFacade;\r\nimport org.pdfsam.guiclient.business.TextPaneAppender;\r\nimport org.pdfsam.guiclient.configuration.services.ConfigurationService;\r\nimport org.pdfsam.guiclient.configuration.services.ConfigurationServiceLocator;\r\nimport org.pdfsam.guiclient.utils.ThemeUtility;\r\nimport org.pdfsam.i18n.GettextResource;\r\n\r\n/**\r\n * Configuration Singleton\r\n *\r\n * @author Andrea Vacondio\r\n */\r\npublic class Configuration {\r\n\r\n    private static final Logger log = Logger.getLogger(Configuration.class.getPackage().getName());\r\n\r\n    public static final int DEFAULT_POOL_SIZE = 3;\r\n\r\n    private static Configuration configObject;\r\n\r\n    private ConfigurationService configurationService;\r\n\r\n    private int screenResolution = 0;\r\n\r\n    private Configuration() {\r\n        initialize();\r\n    }\r\n\r\n    public Object clone() throws CloneNotSupportedException {\r\n        throw new CloneNotSupportedException(\"Cannot clone configuration object.\");\r\n    }\r\n\r\n    public static synchronized Configuration getInstance() {\r\n        if (configObject == null) {\r\n            configObject = new Configuration();\r\n        }\r\n        return configObject;\r\n    }\r\n\r\n    /**\r\n     * Initialization\r\n     */\r\n    private void initialize() {\r\n        try {\r\n            configurationService = ConfigurationServiceLocator.LOCATOR.getConfigurationService();\r\n            initializeLookAndFeel();\r\n            initializeLoggingLevel();\r\n            screenResolution = Toolkit.getDefaultToolkit().getScreenResolution();\r\n        } catch (Exception e) {\r\n            log.fatal(\"Error loading configuration.\", e);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * sets the look and feel\r\n     *\r\n     * @throws Exception\r\n     */\r\n    private void initializeLookAndFeel() throws Exception {\r\n        if (ThemeUtility.isPlastic(configurationService.getLookAndFeel())) {\r\n            ThemeUtility.setTheme(configurationService.getTheme());\r\n        }\r\n        UIManager.setLookAndFeel(ThemeUtility.getLAF(configurationService.getLookAndFeel()));\r\n    }\r\n\r\n    /**\r\n     * sets the logging threshold for the appender\r\n     */\r\n    private void initializeLoggingLevel() {\r\n        int logLevel = configurationService.getLoggingLevel();\r\n        try {\r\n            TextPaneAppender appender = (TextPaneAppender) Logger.getLogger(\"org.pdfsam\").getAppender(\"JLogPanel\");\r\n            Level loggingLevel = Level.toLevel(logLevel, Level.DEBUG);\r\n            log.info(GettextResource.gettext(getI18nResourceBundle(), \"Logging level set to \") + loggingLevel);\r\n            appender.setThreshold(loggingLevel);\r\n        } catch (Exception e) {\r\n            log.warn(GettextResource.gettext(getI18nResourceBundle(), \"Unable to set logging level.\"), e);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @return the language ResourceBundle\r\n     */\r\n    public ResourceBundle getI18nResourceBundle() {\r\n        return configurationService.getI18nResourceBundle();\r\n    }\r\n\r\n    /**\r\n     * @return the default environment\r\n     */\r\n    public String getDefaultEnvironment() {\r\n        return configurationService.getDefaultEnvironment();\r\n    }\r\n\r\n    /**\r\n     * Set the default environment path\r\n     *\r\n     * @param environmentPath\r\n     */\r\n    public void setDefaultEnvironment(String environmentPath) {\r\n        configurationService.setDefaultEnvironment(environmentPath);\r\n    }\r\n\r\n    /**\r\n     * @return the ConsoleServicesFacade\r\n     */\r\n    public ConsoleServicesFacade getConsoleServicesFacade() {\r\n        return configurationService.getConsoleServicesFacade();\r\n    }\r\n\r\n    /**\r\n     * @return the loggingLevel\r\n     */\r\n    public int getLoggingLevel() {\r\n        return configurationService.getLoggingLevel();\r\n    }\r\n\r\n    /**\r\n     * @return the checkForUpdates\r\n     */\r\n    public boolean isCheckForUpdates() {\r\n        return configurationService.isCheckForUpdates();\r\n    }\r\n\r\n    /**\r\n     * Set the check for updates\r\n     *\r\n     * @param checkForUpdateds\r\n     */\r\n    public void setCheckForUpdates(boolean checkForUpdateds) {\r\n        configurationService.setCheckForUpdates(checkForUpdateds);\r\n    }\r\n\r\n    /**\r\n     * @return the defaultWorkingDir\r\n     */\r\n    public String getDefaultWorkingDirectory() {\r\n        return configurationService.getDefaultWorkingDirectory();\r\n    }\r\n\r\n    /**\r\n     * Set the default working directory\r\n     *\r\n     * @param defaultDirectory\r\n     */\r\n    public void setDefaultWorkingDirectory(String defaultDirectory) {\r\n        configurationService.setDefaultWorkingDirectory(defaultDirectory);\r\n    }\r\n\r\n    /**\r\n     * @return the playSounds\r\n     */\r\n    public boolean isPlaySounds() {\r\n        return configurationService.isPlaySounds();\r\n    }\r\n\r\n    /**\r\n     * @param playSounds\r\n     *            the playSounds to set\r\n     */\r\n    public void setPlaySounds(boolean playSounds) {\r\n        configurationService.setPlaySounds(playSounds);\r\n    }\r\n\r\n    /**\r\n     * @return the screenResolution\r\n     */\r\n    public int getScreenResolution() {\r\n        return screenResolution;\r\n    }\r\n\r\n    /**\r\n     * @return the thumbCreatorPoolSize\r\n     */\r\n    public int getThumbCreatorPoolSize() {\r\n        return configurationService.getThumbCreatorPoolSize();\r\n    }\r\n\r\n    /**\r\n     * @return the thumbnailsCreatorIdentifier\r\n     */\r\n    public String getThumbnailsCreatorIdentifier() {\r\n        return configurationService.getThumbnailsCreatorIdentifier();\r\n    }\r\n\r\n    /**\r\n     * @param thumbnailsCreatorIdentifier\r\n     *            the thumbnailsCreatorIdentifier to set\r\n     */\r\n    public void setThumbnailsCreatorIdentifier(String thumbnailsCreatorIdentifier) {\r\n        configurationService.setThumbnailsCreatorIdentifier(thumbnailsCreatorIdentifier);\r\n    }\r\n\r\n    /**\r\n     * @return the selected language String representation\r\n     */\r\n    public String getSelectedLanguage() {\r\n        return configurationService.getLanguage();\r\n    }\r\n\r\n    /**\r\n     * Set the selected language\r\n     *\r\n     * @param language\r\n     */\r\n    public void setSelectedLanguage(String language) {\r\n        configurationService.setLanguage(language);\r\n    }\r\n\r\n    /**\r\n     * @return informations to be displayed\r\n     */\r\n    public String getConfigurationInformations() {\r\n        return configurationService.getConfigurationInformations();\r\n    }\r\n\r\n    /**\r\n     * @return the plugin absolute path\r\n     */\r\n    public String getPluginAbsolutePath() {\r\n        return configurationService.getPluginAbsolutePath();\r\n    }\r\n\r\n    /**\r\n     * @return the look and feel\r\n     */\r\n    public int getLookAndFeel() {\r\n        return configurationService.getLookAndFeel();\r\n    }\r\n\r\n    /**\r\n     * Set the look and feel\r\n     *\r\n     * @param lookAndFeel\r\n     */\r\n    public void setLookAndFeel(int lookAndFeel) {\r\n        configurationService.setLookAndFeel(lookAndFeel);\r\n    }\r\n\r\n    /**\r\n     * @return the theme\r\n     */\r\n    public int getTheme() {\r\n        return configurationService.getTheme();\r\n    }\r\n\r\n    /**\r\n     * Set the theme\r\n     *\r\n     * @param theme\r\n     */\r\n    public void setTheme(int theme) {\r\n        configurationService.setTheme(theme);\r\n    }\r\n\r\n    /**\r\n     * Set the logging level\r\n     *\r\n     * @param level\r\n     */\r\n    public void setLoggingLevel(int level) {\r\n        configurationService.setLoggingLevel(level);\r\n    }\r\n\r\n    /**\r\n     * @return the ask overwrite confirmation flag\r\n     */\r\n    public boolean isAskOverwriteConfirmation() {\r\n        return configurationService.isAskOverwriteConfirmation();\r\n    }\r\n\r\n    /**\r\n     * set the ask overwrite confirmation flag\r\n     *\r\n     * @param askOverwriteConfirmation\r\n     */\r\n    public void setAskOverwriteConfirmation(boolean askOverwriteConfirmation) {\r\n        configurationService.setAskOverwriteConfirmation(askOverwriteConfirmation);\r\n    }\r\n\r\n    /**\r\n     * @return true if high quality thumbnails\r\n     */\r\n    public boolean isHighQualityThumbnails() {\r\n        return configurationService.isHighQualityThumbnils();\r\n    }\r\n\r\n    /**\r\n     * @return\r\n     * @see org.pdfsam.guiclient.configuration.services.ConfigurationService#getThumbnailSize()\r\n     */\r\n    public int getThumbnailSize() {\r\n        return configurationService.getThumbnailSize();\r\n    }\r\n\r\n    /**\r\n     * save the current configuration\r\n     *\r\n     * @throws IOException\r\n     */\r\n    public void save() throws IOException {\r\n        configurationService.save();\r\n    }\r\n}\r\n",
		"id": "EvoSuiteBenchmark/109_pdfsam/src/main/java/org/pdfsam/guiclient/configuration/ConfigurationTest4.java",
		"test_prompt": "// ConfigurationTest4.java\npackage org.pdfsam.guiclient.configuration;\n\nimport java.awt.Toolkit;\nimport java.io.IOException;\nimport java.util.ResourceBundle;\nimport javax.swing.UIManager;\nimport org.apache.log4j.Level;\nimport org.apache.log4j.Logger;\nimport org.pdfsam.console.business.ConsoleServicesFacade;\nimport org.pdfsam.guiclient.business.TextPaneAppender;\nimport org.pdfsam.guiclient.configuration.services.ConfigurationService;\nimport org.pdfsam.guiclient.configuration.services.ConfigurationServiceLocator;\nimport org.pdfsam.guiclient.utils.ThemeUtility;\nimport org.pdfsam.i18n.GettextResource;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link Configuration}.\n* It contains ten unit test cases for the {@link Configuration#isAskOverwriteConfirmation()} method.\n*/\nclass ConfigurationTest4 {"
	},
	{
		"original_code": "// Configuration.java\n/*\r\n * Created on 21-Dec-2006\r\n * Copyright (C) 2006 by Andrea Vacondio.\r\n *\r\n * This program is free software; you can redistribute it and/or modify it under the terms of the \r\n * GNU General Public License as published by the Free Software Foundation; \r\n * either version 2 of the License.\r\n * This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; \r\n * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. \r\n * See the GNU General Public License for more details.\r\n * You should have received a copy of the GNU General Public License along with this program; \r\n * if not, write to the Free Software Foundation, Inc., \r\n *  59 Temple Place, Suite 330, Boston, MA 02111-1307 USA\r\n */\r\npackage org.pdfsam.guiclient.configuration;\r\n\r\nimport java.awt.Toolkit;\r\nimport java.io.IOException;\r\nimport java.util.ResourceBundle;\r\nimport javax.swing.UIManager;\r\nimport org.apache.log4j.Level;\r\nimport org.apache.log4j.Logger;\r\nimport org.pdfsam.console.business.ConsoleServicesFacade;\r\nimport org.pdfsam.guiclient.business.TextPaneAppender;\r\nimport org.pdfsam.guiclient.configuration.services.ConfigurationService;\r\nimport org.pdfsam.guiclient.configuration.services.ConfigurationServiceLocator;\r\nimport org.pdfsam.guiclient.utils.ThemeUtility;\r\nimport org.pdfsam.i18n.GettextResource;\r\n\r\n/**\r\n * Configuration Singleton\r\n *\r\n * @author Andrea Vacondio\r\n */\r\npublic class Configuration {\r\n\r\n    private static final Logger log = Logger.getLogger(Configuration.class.getPackage().getName());\r\n\r\n    public static final int DEFAULT_POOL_SIZE = 3;\r\n\r\n    private static Configuration configObject;\r\n\r\n    private ConfigurationService configurationService;\r\n\r\n    private int screenResolution = 0;\r\n\r\n    private Configuration() {\r\n        initialize();\r\n    }\r\n\r\n    public Object clone() throws CloneNotSupportedException {\r\n        throw new CloneNotSupportedException(\"Cannot clone configuration object.\");\r\n    }\r\n\r\n    public static synchronized Configuration getInstance() {\r\n        if (configObject == null) {\r\n            configObject = new Configuration();\r\n        }\r\n        return configObject;\r\n    }\r\n\r\n    /**\r\n     * Initialization\r\n     */\r\n    private void initialize() {\r\n        try {\r\n            configurationService = ConfigurationServiceLocator.LOCATOR.getConfigurationService();\r\n            initializeLookAndFeel();\r\n            initializeLoggingLevel();\r\n            screenResolution = Toolkit.getDefaultToolkit().getScreenResolution();\r\n        } catch (Exception e) {\r\n            log.fatal(\"Error loading configuration.\", e);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * sets the look and feel\r\n     *\r\n     * @throws Exception\r\n     */\r\n    private void initializeLookAndFeel() throws Exception {\r\n        if (ThemeUtility.isPlastic(configurationService.getLookAndFeel())) {\r\n            ThemeUtility.setTheme(configurationService.getTheme());\r\n        }\r\n        UIManager.setLookAndFeel(ThemeUtility.getLAF(configurationService.getLookAndFeel()));\r\n    }\r\n\r\n    /**\r\n     * sets the logging threshold for the appender\r\n     */\r\n    private void initializeLoggingLevel() {\r\n        int logLevel = configurationService.getLoggingLevel();\r\n        try {\r\n            TextPaneAppender appender = (TextPaneAppender) Logger.getLogger(\"org.pdfsam\").getAppender(\"JLogPanel\");\r\n            Level loggingLevel = Level.toLevel(logLevel, Level.DEBUG);\r\n            log.info(GettextResource.gettext(getI18nResourceBundle(), \"Logging level set to \") + loggingLevel);\r\n            appender.setThreshold(loggingLevel);\r\n        } catch (Exception e) {\r\n            log.warn(GettextResource.gettext(getI18nResourceBundle(), \"Unable to set logging level.\"), e);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @return the language ResourceBundle\r\n     */\r\n    public ResourceBundle getI18nResourceBundle() {\r\n        return configurationService.getI18nResourceBundle();\r\n    }\r\n\r\n    /**\r\n     * @return the default environment\r\n     */\r\n    public String getDefaultEnvironment() {\r\n        return configurationService.getDefaultEnvironment();\r\n    }\r\n\r\n    /**\r\n     * Set the default environment path\r\n     *\r\n     * @param environmentPath\r\n     */\r\n    public void setDefaultEnvironment(String environmentPath) {\r\n        configurationService.setDefaultEnvironment(environmentPath);\r\n    }\r\n\r\n    /**\r\n     * @return the ConsoleServicesFacade\r\n     */\r\n    public ConsoleServicesFacade getConsoleServicesFacade() {\r\n        return configurationService.getConsoleServicesFacade();\r\n    }\r\n\r\n    /**\r\n     * @return the loggingLevel\r\n     */\r\n    public int getLoggingLevel() {\r\n        return configurationService.getLoggingLevel();\r\n    }\r\n\r\n    /**\r\n     * @return the checkForUpdates\r\n     */\r\n    public boolean isCheckForUpdates() {\r\n        return configurationService.isCheckForUpdates();\r\n    }\r\n\r\n    /**\r\n     * Set the check for updates\r\n     *\r\n     * @param checkForUpdateds\r\n     */\r\n    public void setCheckForUpdates(boolean checkForUpdateds) {\r\n        configurationService.setCheckForUpdates(checkForUpdateds);\r\n    }\r\n\r\n    /**\r\n     * @return the defaultWorkingDir\r\n     */\r\n    public String getDefaultWorkingDirectory() {\r\n        return configurationService.getDefaultWorkingDirectory();\r\n    }\r\n\r\n    /**\r\n     * Set the default working directory\r\n     *\r\n     * @param defaultDirectory\r\n     */\r\n    public void setDefaultWorkingDirectory(String defaultDirectory) {\r\n        configurationService.setDefaultWorkingDirectory(defaultDirectory);\r\n    }\r\n\r\n    /**\r\n     * @return the playSounds\r\n     */\r\n    public boolean isPlaySounds() {\r\n        return configurationService.isPlaySounds();\r\n    }\r\n\r\n    /**\r\n     * @param playSounds\r\n     *            the playSounds to set\r\n     */\r\n    public void setPlaySounds(boolean playSounds) {\r\n        configurationService.setPlaySounds(playSounds);\r\n    }\r\n\r\n    /**\r\n     * @return the screenResolution\r\n     */\r\n    public int getScreenResolution() {\r\n        return screenResolution;\r\n    }\r\n\r\n    /**\r\n     * @return the thumbCreatorPoolSize\r\n     */\r\n    public int getThumbCreatorPoolSize() {\r\n        return configurationService.getThumbCreatorPoolSize();\r\n    }\r\n\r\n    /**\r\n     * @return the thumbnailsCreatorIdentifier\r\n     */\r\n    public String getThumbnailsCreatorIdentifier() {\r\n        return configurationService.getThumbnailsCreatorIdentifier();\r\n    }\r\n\r\n    /**\r\n     * @param thumbnailsCreatorIdentifier\r\n     *            the thumbnailsCreatorIdentifier to set\r\n     */\r\n    public void setThumbnailsCreatorIdentifier(String thumbnailsCreatorIdentifier) {\r\n        configurationService.setThumbnailsCreatorIdentifier(thumbnailsCreatorIdentifier);\r\n    }\r\n\r\n    /**\r\n     * @return the selected language String representation\r\n     */\r\n    public String getSelectedLanguage() {\r\n        return configurationService.getLanguage();\r\n    }\r\n\r\n    /**\r\n     * Set the selected language\r\n     *\r\n     * @param language\r\n     */\r\n    public void setSelectedLanguage(String language) {\r\n        configurationService.setLanguage(language);\r\n    }\r\n\r\n    /**\r\n     * @return informations to be displayed\r\n     */\r\n    public String getConfigurationInformations() {\r\n        return configurationService.getConfigurationInformations();\r\n    }\r\n\r\n    /**\r\n     * @return the plugin absolute path\r\n     */\r\n    public String getPluginAbsolutePath() {\r\n        return configurationService.getPluginAbsolutePath();\r\n    }\r\n\r\n    /**\r\n     * @return the look and feel\r\n     */\r\n    public int getLookAndFeel() {\r\n        return configurationService.getLookAndFeel();\r\n    }\r\n\r\n    /**\r\n     * Set the look and feel\r\n     *\r\n     * @param lookAndFeel\r\n     */\r\n    public void setLookAndFeel(int lookAndFeel) {\r\n        configurationService.setLookAndFeel(lookAndFeel);\r\n    }\r\n\r\n    /**\r\n     * @return the theme\r\n     */\r\n    public int getTheme() {\r\n        return configurationService.getTheme();\r\n    }\r\n\r\n    /**\r\n     * Set the theme\r\n     *\r\n     * @param theme\r\n     */\r\n    public void setTheme(int theme) {\r\n        configurationService.setTheme(theme);\r\n    }\r\n\r\n    /**\r\n     * Set the logging level\r\n     *\r\n     * @param level\r\n     */\r\n    public void setLoggingLevel(int level) {\r\n        configurationService.setLoggingLevel(level);\r\n    }\r\n\r\n    /**\r\n     * @return the ask overwrite confirmation flag\r\n     */\r\n    public boolean isAskOverwriteConfirmation() {\r\n        return configurationService.isAskOverwriteConfirmation();\r\n    }\r\n\r\n    /**\r\n     * set the ask overwrite confirmation flag\r\n     *\r\n     * @param askOverwriteConfirmation\r\n     */\r\n    public void setAskOverwriteConfirmation(boolean askOverwriteConfirmation) {\r\n        configurationService.setAskOverwriteConfirmation(askOverwriteConfirmation);\r\n    }\r\n\r\n    /**\r\n     * @return true if high quality thumbnails\r\n     */\r\n    public boolean isHighQualityThumbnails() {\r\n        return configurationService.isHighQualityThumbnils();\r\n    }\r\n\r\n    /**\r\n     * @return\r\n     * @see org.pdfsam.guiclient.configuration.services.ConfigurationService#getThumbnailSize()\r\n     */\r\n    public int getThumbnailSize() {\r\n        return configurationService.getThumbnailSize();\r\n    }\r\n\r\n    /**\r\n     * save the current configuration\r\n     *\r\n     * @throws IOException\r\n     */\r\n    public void save() throws IOException {\r\n        configurationService.save();\r\n    }\r\n}\r\n",
		"id": "EvoSuiteBenchmark/109_pdfsam/src/main/java/org/pdfsam/guiclient/configuration/ConfigurationTest5.java",
		"test_prompt": "// ConfigurationTest5.java\npackage org.pdfsam.guiclient.configuration;\n\nimport java.awt.Toolkit;\nimport java.io.IOException;\nimport java.util.ResourceBundle;\nimport javax.swing.UIManager;\nimport org.apache.log4j.Level;\nimport org.apache.log4j.Logger;\nimport org.pdfsam.console.business.ConsoleServicesFacade;\nimport org.pdfsam.guiclient.business.TextPaneAppender;\nimport org.pdfsam.guiclient.configuration.services.ConfigurationService;\nimport org.pdfsam.guiclient.configuration.services.ConfigurationServiceLocator;\nimport org.pdfsam.guiclient.utils.ThemeUtility;\nimport org.pdfsam.i18n.GettextResource;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link Configuration}.\n* It contains ten unit test cases for the {@link Configuration#isHighQualityThumbnails()} method.\n*/\nclass ConfigurationTest5 {"
	},
	{
		"original_code": "// XmlConfigurationService.java\n/*\n * Created on 24-Set-2009\n * Copyright (C) 2009 by Andrea Vacondio.\n *\n * This program is free software; you can redistribute it and/or modify it under the terms of the \n * GNU General Public License as published by the Free Software Foundation; \n * either version 2 of the License.\n * This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; \n * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. \n * See the GNU General Public License for more details.\n * You should have received a copy of the GNU General Public License along with this program; \n * if not, write to the Free Software Foundation, Inc., \n *  59 Temple Place, Suite 330, Boston, MA 02111-1307 USA\n */\npackage org.pdfsam.guiclient.configuration.services.xml;\n\nimport java.io.File;\nimport java.io.IOException;\nimport java.io.UnsupportedEncodingException;\nimport java.net.URLDecoder;\nimport java.util.ResourceBundle;\nimport org.apache.log4j.Level;\nimport org.apache.log4j.Logger;\nimport org.dom4j.Document;\nimport org.dom4j.DocumentException;\nimport org.dom4j.Node;\nimport org.pdfsam.console.business.ConsoleServicesFacade;\nimport org.pdfsam.console.utils.FileUtility;\nimport org.pdfsam.guiclient.configuration.services.ConfigurationService;\nimport org.pdfsam.guiclient.configuration.services.xml.strategy.BackwardCompatibilityXmlStrategy;\nimport org.pdfsam.guiclient.configuration.services.xml.strategy.DefaultXmlStrategy;\nimport org.pdfsam.guiclient.configuration.services.xml.strategy.XmlConfigStrategy;\nimport org.pdfsam.guiclient.exceptions.ConfigurationException;\nimport org.pdfsam.guiclient.l10n.LanguageLoader;\nimport org.pdfsam.guiclient.utils.ThemeUtility;\nimport org.pdfsam.guiclient.utils.XmlUtility;\nimport org.pdfsam.i18n.GettextResource;\n\n/**\n * Configuration service that reads the configuration from an xml file\n *\n * @author Andrea Vacondio\n */\npublic class XmlConfigurationService implements ConfigurationService {\n\n    private static final Logger log = Logger.getLogger(XmlConfigurationService.class.getPackage().getName());\n\n    private static final String VERSION_XPATH = \"/pdfsam/@config-version\";\n\n    public static final String OLD_CONFIGURATION_FILE_NAME = \"config.xml\";\n\n    public static final String CONFIGURATION_FILE_NAME = \"pdfsam-config.xml\";\n\n    public static final int DEFAULT_POOL_SIZE = 3;\n\n    public static final String DEFAULT_CONFIG_DIRECTORY = System.getProperty(\"user.home\") + \"/.pdfsam\";\n\n    private ResourceBundle i18nResourceBundle;\n\n    private ConsoleServicesFacade consoleServicesFacade;\n\n    private boolean checkForUpdates = true;\n\n    private boolean playSounds = true;\n\n    private boolean askOverwriteConfirmation = true;\n\n    private boolean thumbnailsHighQuality = false;\n\n    private String defaultWorkingDirectory = null;\n\n    private String defaultEnvironment = null;\n\n    private int thumbCreatorPoolSize = DEFAULT_POOL_SIZE;\n\n    private String thumbnailsCreatorIdentifier = \"\";\n\n    private int thumbnailsSize = 190;\n\n    private int loggingLevel;\n\n    private int lookAndFeel = 0;\n\n    private int theme = 0;\n\n    private String language;\n\n    private String pluginAbsolutePath;\n\n    private String configurationFilePath;\n\n    public XmlConfigurationService() throws ConfigurationException {\n        initializeService();\n    }\n\n    /**\n     * Initialization\n     *\n     * @throws ConfigurationException\n     */\n    private void initializeService() throws ConfigurationException {\n        log.info(\"Loading configuration..\");\n        File configurationFile = null;\n        try {\n            configurationFile = getConfigurationXmlFile(CONFIGURATION_FILE_NAME);\n            if (configurationFile == null) {\n                configurationFile = getConfigurationXmlFile(OLD_CONFIGURATION_FILE_NAME);\n                if (configurationFile == null) {\n                    throw new ConfigurationException(\"Unable to find configuration file\");\n                }\n            }\n            configurationFilePath = configurationFile.getAbsolutePath();\n            Document document = XmlUtility.parseXmlFile(configurationFile);\n            if (document != null) {\n                // setting up strategy\n                XmlConfigStrategy strategy = null;\n                Node node = document.selectSingleNode(VERSION_XPATH);\n                if (node != null && \"2\".equals(node.getText().trim())) {\n                    strategy = new DefaultXmlStrategy(document);\n                } else {\n                    strategy = new BackwardCompatibilityXmlStrategy(document);\n                }\n                initializeLocale(strategy);\n                initializeLookAndFeel(strategy);\n                initializeLoggingLevel(strategy);\n                initializePoolSize(strategy);\n                initializeThumbnailsSize(strategy);\n                defaultWorkingDirectory = strategy.getDefaultWorkingDirectoryValue();\n                defaultEnvironment = strategy.getDefaultEnvironmentValue();\n                thumbnailsCreatorIdentifier = strategy.getThumbnailsCreatorIdentifierValue();\n                checkForUpdates = isValidTrueValue(strategy.getCheckForUpdatesValue());\n                playSounds = isValidTrueValue(strategy.getPlaySoundsValue());\n                pluginAbsolutePath = strategy.getPluginAbsolutePath();\n                askOverwriteConfirmation = isValidTrueValue(strategy.getAskOverwriteConfirmation());\n                thumbnailsHighQuality = isValidTrueValue(strategy.getHighQualityThumbnails());\n                log.info(\"Thumbnails high quality \" + Boolean.toString(thumbnailsHighQuality));\n                consoleServicesFacade = new ConsoleServicesFacade();\n                strategy.close();\n            } else {\n                throw new ConfigurationException(\"Unable to parse xml configuration file.\");\n            }\n        } catch (DocumentException e) {\n            throw new ConfigurationException(e);\n        } catch (UnsupportedEncodingException ue) {\n            throw new ConfigurationException(ue);\n        }\n    }\n\n    /**\n     * thread pool size initialization\n     *\n     * @param strategy\n     */\n    private void initializePoolSize(XmlConfigStrategy strategy) {\n        String poolSizeString = strategy.getThreadPoolSizeValue();\n        if (poolSizeString.length() > 0) {\n            thumbCreatorPoolSize = Integer.parseInt(poolSizeString);\n        }\n    }\n\n    private void initializeThumbnailsSize(XmlConfigStrategy strategy) {\n        String thumbSize = strategy.getThumbnailsSize();\n        if (thumbSize.length() > 0) {\n            thumbnailsSize = Integer.parseInt(thumbSize);\n        }\n        log.info(\"Thumbnails size set to \" + thumbnailsSize);\n    }\n\n    /**\n     * locale initialization\n     *\n     * @param strategy\n     */\n    private void initializeLocale(XmlConfigStrategy strategy) {\n        log.info(\"Getting language...\");\n        language = strategy.getLocaleValue();\n        if (language.length() <= 0) {\n            log.warn(\"Unable to get language ResourceBudle, setting the default language (\" + LanguageLoader.DEFAULT_LANGUAGE + \").\");\n            language = LanguageLoader.DEFAULT_LANGUAGE;\n        }\n        i18nResourceBundle = new LanguageLoader(language, \"org.pdfsam.i18n.resources.Messages\").getBundle();\n    }\n\n    /**\n     * theme, look and feel initialization\n     *\n     * @param strategy\n     */\n    private void initializeLookAndFeel(XmlConfigStrategy strategy) {\n        log.info(GettextResource.gettext(i18nResourceBundle, \"Setting look and feel...\"));\n        String lookAndFeelString = strategy.getLookAndFeelValue();\n        if (lookAndFeelString.length() > 0) {\n            lookAndFeel = Integer.parseInt(lookAndFeelString);\n        }\n        if (ThemeUtility.isPlastic(lookAndFeel)) {\n            String themeString = strategy.getThemeValue();\n            if (themeString.length() > 0) {\n                theme = Integer.parseInt(themeString);\n            }\n        }\n    }\n\n    /**\n     * logging level initlialization\n     *\n     * @param strategy\n     */\n    private void initializeLoggingLevel(XmlConfigStrategy strategy) {\n        log.info(GettextResource.gettext(i18nResourceBundle, \"Setting logging level...\"));\n        String logLev = strategy.getLoggingLevelValue();\n        if (logLev != null && logLev.length() > 0) {\n            loggingLevel = Integer.parseInt(logLev);\n        } else {\n            log.warn(GettextResource.gettext(i18nResourceBundle, \"Unable to find log level, setting to default level (DEBUG).\"));\n            loggingLevel = Level.DEBUG_INT;\n        }\n    }\n\n    /**\n     * @param value\n     * @return true if the input param is \"true\" or \"1\"\n     */\n    private boolean isValidTrueValue(String value) {\n        boolean retVal = Boolean.parseBoolean(value);\n        if (!retVal) {\n            retVal = \"1\".equals(value);\n        }\n        return retVal;\n    }\n\n    /**\n     * It search the config file.\n     * <ul>\n     * <li>the first try uses secondaryPath=main jar path</li>\n     * <li>the second try uses secondaryPath=System.getProperty(\"user.dir\")</li>\n     * </ul>\n     *\n     * @param configurationFileName\n     *            file name to search\n     * @return the configuration file\n     * @throws UnsupportedEncodingException\n     * @throws ConfigurationException\n     */\n    private File getConfigurationXmlFile(String configurationFileName) throws UnsupportedEncodingException, ConfigurationException {\n        File retVal = null;\n        String configSearchPath = new File(URLDecoder.decode(getClass().getProtectionDomain().getCodeSource().getLocation().getPath(), \"UTF-8\")).getParent();\n        retVal = searchConfigurationFile(configSearchPath, configurationFileName);\n        if (retVal == null) {\n            log.warn(\"Unable to find \" + configurationFileName + \" into \" + configSearchPath);\n            configSearchPath = System.getProperty(\"user.dir\");\n            log.info(\"Looking for \" + configurationFileName + \" into \" + configSearchPath);\n            retVal = searchConfigurationFile(configSearchPath, configurationFileName);\n        }\n        return retVal;\n    }\n\n    /**\n     * Search the configuration file\n     * <ul>\n     * <li>in ${user.home}/.pdfsam</li>\n     * <li>if step 1 fails it search in searchPathIfFails</li>\n     * <li>if found in step 2 but is write protected it copies the file in ${user.home}/.pdfsam</li>\n     * </ul>\n     *\n     * @param searchPathIfFails\n     *            the path to search the configuration file if not found in the default path\n     * @param configurationFileName\n     *            file name to search\n     * @return the path of the configuration file\n     * @throws ConfigurationException\n     */\n    private File searchConfigurationFile(String searchPathIfFails, String configurationFileName) throws ConfigurationException {\n        File retVal = new File(DEFAULT_CONFIG_DIRECTORY, configurationFileName);\n        if (!(retVal.exists() && retVal.canWrite())) {\n            File secondaryPath = new File(searchPathIfFails, configurationFileName);\n            if (secondaryPath.exists()) {\n                if (!secondaryPath.canWrite()) {\n                    File defaultPath = new File(DEFAULT_CONFIG_DIRECTORY);\n                    if (defaultPath.mkdirs()) {\n                        log.info(\"Copying \" + configurationFileName + \" from \" + secondaryPath.getPath() + \" to \" + defaultPath.getPath());\n                        FileUtility.copyFile(secondaryPath, retVal);\n                    } else {\n                        throw new ConfigurationException(\"Unable to create \" + defaultPath);\n                    }\n                } else {\n                    retVal = secondaryPath;\n                }\n            } else {\n                retVal = null;\n            }\n        }\n        return retVal;\n    }\n\n    public boolean isCheckForUpdates() {\n        return checkForUpdates;\n    }\n\n    public void setCheckForUpdates(boolean checkForUpdates) {\n        this.checkForUpdates = checkForUpdates;\n    }\n\n    public boolean isPlaySounds() {\n        return playSounds;\n    }\n\n    public void setPlaySounds(boolean playSounds) {\n        this.playSounds = playSounds;\n    }\n\n    public String getDefaultWorkingDirectory() {\n        return defaultWorkingDirectory;\n    }\n\n    public void setDefaultWorkingDirectory(String defaultWorkingDirectory) {\n        this.defaultWorkingDirectory = defaultWorkingDirectory;\n    }\n\n    public String getDefaultEnvironment() {\n        return defaultEnvironment;\n    }\n\n    public void setDefaultEnvironment(String defaultEnvironment) {\n        this.defaultEnvironment = defaultEnvironment;\n    }\n\n    public int getThumbCreatorPoolSize() {\n        return thumbCreatorPoolSize;\n    }\n\n    public String getThumbnailsCreatorIdentifier() {\n        return thumbnailsCreatorIdentifier;\n    }\n\n    public void setThumbnailsCreatorIdentifier(String thumbnailsCreatorIdentifier) {\n        this.thumbnailsCreatorIdentifier = thumbnailsCreatorIdentifier;\n    }\n\n    public int getLoggingLevel() {\n        return loggingLevel;\n    }\n\n    public void setLoggingLevel(int loggingLevel) {\n        this.loggingLevel = loggingLevel;\n    }\n\n    public ResourceBundle getI18nResourceBundle() {\n        return i18nResourceBundle;\n    }\n\n    public ConsoleServicesFacade getConsoleServicesFacade() {\n        return consoleServicesFacade;\n    }\n\n    public int getLookAndFeel() {\n        return lookAndFeel;\n    }\n\n    public void setLookAndFeel(int lookAndFeel) {\n        this.lookAndFeel = lookAndFeel;\n    }\n\n    public int getTheme() {\n        return theme;\n    }\n\n    public void setTheme(int theme) {\n        this.theme = theme;\n    }\n\n    public String getLanguage() {\n        return language;\n    }\n\n    public void setLanguage(String language) {\n        this.language = language;\n    }\n\n    public String getConfigurationInformations() {\n        return configurationFilePath;\n    }\n\n    public String getPluginAbsolutePath() {\n        return pluginAbsolutePath;\n    }\n\n    public boolean isAskOverwriteConfirmation() {\n        return askOverwriteConfirmation;\n    }\n\n    public void setAskOverwriteConfirmation(boolean askOverwriteConfirmation) {\n        this.askOverwriteConfirmation = askOverwriteConfirmation;\n    }\n\n    public int getThumbnailSize() {\n        return thumbnailsSize;\n    }\n\n    public boolean isHighQualityThumbnils() {\n        return thumbnailsHighQuality;\n    }\n\n    public void save() throws IOException {\n        File defaultPath = new File(DEFAULT_CONFIG_DIRECTORY);\n        if (!defaultPath.exists() || !defaultPath.isDirectory()) {\n            defaultPath.mkdirs();\n        }\n        DefaultXmlStrategy.saveXmlConfigurationFile(new File(defaultPath, CONFIGURATION_FILE_NAME), this);\n    }\n}\n",
		"id": "EvoSuiteBenchmark/109_pdfsam/src/main/java/org/pdfsam/guiclient/configuration/services/xml/XmlConfigurationServiceTest0.java",
		"test_prompt": "// XmlConfigurationServiceTest0.java\npackage org.pdfsam.guiclient.configuration.services.xml;\n\nimport java.io.File;\nimport java.io.IOException;\nimport java.io.UnsupportedEncodingException;\nimport java.net.URLDecoder;\nimport java.util.ResourceBundle;\nimport org.apache.log4j.Level;\nimport org.apache.log4j.Logger;\nimport org.dom4j.Document;\nimport org.dom4j.DocumentException;\nimport org.dom4j.Node;\nimport org.pdfsam.console.business.ConsoleServicesFacade;\nimport org.pdfsam.console.utils.FileUtility;\nimport org.pdfsam.guiclient.configuration.services.ConfigurationService;\nimport org.pdfsam.guiclient.configuration.services.xml.strategy.BackwardCompatibilityXmlStrategy;\nimport org.pdfsam.guiclient.configuration.services.xml.strategy.DefaultXmlStrategy;\nimport org.pdfsam.guiclient.configuration.services.xml.strategy.XmlConfigStrategy;\nimport org.pdfsam.guiclient.exceptions.ConfigurationException;\nimport org.pdfsam.guiclient.l10n.LanguageLoader;\nimport org.pdfsam.guiclient.utils.ThemeUtility;\nimport org.pdfsam.guiclient.utils.XmlUtility;\nimport org.pdfsam.i18n.GettextResource;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link XmlConfigurationService}.\n* It contains ten unit test cases for the {@link XmlConfigurationService#isCheckForUpdates()} method.\n*/\nclass XmlConfigurationServiceTest0 {"
	},
	{
		"original_code": "// XmlConfigurationService.java\n/*\n * Created on 24-Set-2009\n * Copyright (C) 2009 by Andrea Vacondio.\n *\n * This program is free software; you can redistribute it and/or modify it under the terms of the \n * GNU General Public License as published by the Free Software Foundation; \n * either version 2 of the License.\n * This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; \n * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. \n * See the GNU General Public License for more details.\n * You should have received a copy of the GNU General Public License along with this program; \n * if not, write to the Free Software Foundation, Inc., \n *  59 Temple Place, Suite 330, Boston, MA 02111-1307 USA\n */\npackage org.pdfsam.guiclient.configuration.services.xml;\n\nimport java.io.File;\nimport java.io.IOException;\nimport java.io.UnsupportedEncodingException;\nimport java.net.URLDecoder;\nimport java.util.ResourceBundle;\nimport org.apache.log4j.Level;\nimport org.apache.log4j.Logger;\nimport org.dom4j.Document;\nimport org.dom4j.DocumentException;\nimport org.dom4j.Node;\nimport org.pdfsam.console.business.ConsoleServicesFacade;\nimport org.pdfsam.console.utils.FileUtility;\nimport org.pdfsam.guiclient.configuration.services.ConfigurationService;\nimport org.pdfsam.guiclient.configuration.services.xml.strategy.BackwardCompatibilityXmlStrategy;\nimport org.pdfsam.guiclient.configuration.services.xml.strategy.DefaultXmlStrategy;\nimport org.pdfsam.guiclient.configuration.services.xml.strategy.XmlConfigStrategy;\nimport org.pdfsam.guiclient.exceptions.ConfigurationException;\nimport org.pdfsam.guiclient.l10n.LanguageLoader;\nimport org.pdfsam.guiclient.utils.ThemeUtility;\nimport org.pdfsam.guiclient.utils.XmlUtility;\nimport org.pdfsam.i18n.GettextResource;\n\n/**\n * Configuration service that reads the configuration from an xml file\n *\n * @author Andrea Vacondio\n */\npublic class XmlConfigurationService implements ConfigurationService {\n\n    private static final Logger log = Logger.getLogger(XmlConfigurationService.class.getPackage().getName());\n\n    private static final String VERSION_XPATH = \"/pdfsam/@config-version\";\n\n    public static final String OLD_CONFIGURATION_FILE_NAME = \"config.xml\";\n\n    public static final String CONFIGURATION_FILE_NAME = \"pdfsam-config.xml\";\n\n    public static final int DEFAULT_POOL_SIZE = 3;\n\n    public static final String DEFAULT_CONFIG_DIRECTORY = System.getProperty(\"user.home\") + \"/.pdfsam\";\n\n    private ResourceBundle i18nResourceBundle;\n\n    private ConsoleServicesFacade consoleServicesFacade;\n\n    private boolean checkForUpdates = true;\n\n    private boolean playSounds = true;\n\n    private boolean askOverwriteConfirmation = true;\n\n    private boolean thumbnailsHighQuality = false;\n\n    private String defaultWorkingDirectory = null;\n\n    private String defaultEnvironment = null;\n\n    private int thumbCreatorPoolSize = DEFAULT_POOL_SIZE;\n\n    private String thumbnailsCreatorIdentifier = \"\";\n\n    private int thumbnailsSize = 190;\n\n    private int loggingLevel;\n\n    private int lookAndFeel = 0;\n\n    private int theme = 0;\n\n    private String language;\n\n    private String pluginAbsolutePath;\n\n    private String configurationFilePath;\n\n    public XmlConfigurationService() throws ConfigurationException {\n        initializeService();\n    }\n\n    /**\n     * Initialization\n     *\n     * @throws ConfigurationException\n     */\n    private void initializeService() throws ConfigurationException {\n        log.info(\"Loading configuration..\");\n        File configurationFile = null;\n        try {\n            configurationFile = getConfigurationXmlFile(CONFIGURATION_FILE_NAME);\n            if (configurationFile == null) {\n                configurationFile = getConfigurationXmlFile(OLD_CONFIGURATION_FILE_NAME);\n                if (configurationFile == null) {\n                    throw new ConfigurationException(\"Unable to find configuration file\");\n                }\n            }\n            configurationFilePath = configurationFile.getAbsolutePath();\n            Document document = XmlUtility.parseXmlFile(configurationFile);\n            if (document != null) {\n                // setting up strategy\n                XmlConfigStrategy strategy = null;\n                Node node = document.selectSingleNode(VERSION_XPATH);\n                if (node != null && \"2\".equals(node.getText().trim())) {\n                    strategy = new DefaultXmlStrategy(document);\n                } else {\n                    strategy = new BackwardCompatibilityXmlStrategy(document);\n                }\n                initializeLocale(strategy);\n                initializeLookAndFeel(strategy);\n                initializeLoggingLevel(strategy);\n                initializePoolSize(strategy);\n                initializeThumbnailsSize(strategy);\n                defaultWorkingDirectory = strategy.getDefaultWorkingDirectoryValue();\n                defaultEnvironment = strategy.getDefaultEnvironmentValue();\n                thumbnailsCreatorIdentifier = strategy.getThumbnailsCreatorIdentifierValue();\n                checkForUpdates = isValidTrueValue(strategy.getCheckForUpdatesValue());\n                playSounds = isValidTrueValue(strategy.getPlaySoundsValue());\n                pluginAbsolutePath = strategy.getPluginAbsolutePath();\n                askOverwriteConfirmation = isValidTrueValue(strategy.getAskOverwriteConfirmation());\n                thumbnailsHighQuality = isValidTrueValue(strategy.getHighQualityThumbnails());\n                log.info(\"Thumbnails high quality \" + Boolean.toString(thumbnailsHighQuality));\n                consoleServicesFacade = new ConsoleServicesFacade();\n                strategy.close();\n            } else {\n                throw new ConfigurationException(\"Unable to parse xml configuration file.\");\n            }\n        } catch (DocumentException e) {\n            throw new ConfigurationException(e);\n        } catch (UnsupportedEncodingException ue) {\n            throw new ConfigurationException(ue);\n        }\n    }\n\n    /**\n     * thread pool size initialization\n     *\n     * @param strategy\n     */\n    private void initializePoolSize(XmlConfigStrategy strategy) {\n        String poolSizeString = strategy.getThreadPoolSizeValue();\n        if (poolSizeString.length() > 0) {\n            thumbCreatorPoolSize = Integer.parseInt(poolSizeString);\n        }\n    }\n\n    private void initializeThumbnailsSize(XmlConfigStrategy strategy) {\n        String thumbSize = strategy.getThumbnailsSize();\n        if (thumbSize.length() > 0) {\n            thumbnailsSize = Integer.parseInt(thumbSize);\n        }\n        log.info(\"Thumbnails size set to \" + thumbnailsSize);\n    }\n\n    /**\n     * locale initialization\n     *\n     * @param strategy\n     */\n    private void initializeLocale(XmlConfigStrategy strategy) {\n        log.info(\"Getting language...\");\n        language = strategy.getLocaleValue();\n        if (language.length() <= 0) {\n            log.warn(\"Unable to get language ResourceBudle, setting the default language (\" + LanguageLoader.DEFAULT_LANGUAGE + \").\");\n            language = LanguageLoader.DEFAULT_LANGUAGE;\n        }\n        i18nResourceBundle = new LanguageLoader(language, \"org.pdfsam.i18n.resources.Messages\").getBundle();\n    }\n\n    /**\n     * theme, look and feel initialization\n     *\n     * @param strategy\n     */\n    private void initializeLookAndFeel(XmlConfigStrategy strategy) {\n        log.info(GettextResource.gettext(i18nResourceBundle, \"Setting look and feel...\"));\n        String lookAndFeelString = strategy.getLookAndFeelValue();\n        if (lookAndFeelString.length() > 0) {\n            lookAndFeel = Integer.parseInt(lookAndFeelString);\n        }\n        if (ThemeUtility.isPlastic(lookAndFeel)) {\n            String themeString = strategy.getThemeValue();\n            if (themeString.length() > 0) {\n                theme = Integer.parseInt(themeString);\n            }\n        }\n    }\n\n    /**\n     * logging level initlialization\n     *\n     * @param strategy\n     */\n    private void initializeLoggingLevel(XmlConfigStrategy strategy) {\n        log.info(GettextResource.gettext(i18nResourceBundle, \"Setting logging level...\"));\n        String logLev = strategy.getLoggingLevelValue();\n        if (logLev != null && logLev.length() > 0) {\n            loggingLevel = Integer.parseInt(logLev);\n        } else {\n            log.warn(GettextResource.gettext(i18nResourceBundle, \"Unable to find log level, setting to default level (DEBUG).\"));\n            loggingLevel = Level.DEBUG_INT;\n        }\n    }\n\n    /**\n     * @param value\n     * @return true if the input param is \"true\" or \"1\"\n     */\n    private boolean isValidTrueValue(String value) {\n        boolean retVal = Boolean.parseBoolean(value);\n        if (!retVal) {\n            retVal = \"1\".equals(value);\n        }\n        return retVal;\n    }\n\n    /**\n     * It search the config file.\n     * <ul>\n     * <li>the first try uses secondaryPath=main jar path</li>\n     * <li>the second try uses secondaryPath=System.getProperty(\"user.dir\")</li>\n     * </ul>\n     *\n     * @param configurationFileName\n     *            file name to search\n     * @return the configuration file\n     * @throws UnsupportedEncodingException\n     * @throws ConfigurationException\n     */\n    private File getConfigurationXmlFile(String configurationFileName) throws UnsupportedEncodingException, ConfigurationException {\n        File retVal = null;\n        String configSearchPath = new File(URLDecoder.decode(getClass().getProtectionDomain().getCodeSource().getLocation().getPath(), \"UTF-8\")).getParent();\n        retVal = searchConfigurationFile(configSearchPath, configurationFileName);\n        if (retVal == null) {\n            log.warn(\"Unable to find \" + configurationFileName + \" into \" + configSearchPath);\n            configSearchPath = System.getProperty(\"user.dir\");\n            log.info(\"Looking for \" + configurationFileName + \" into \" + configSearchPath);\n            retVal = searchConfigurationFile(configSearchPath, configurationFileName);\n        }\n        return retVal;\n    }\n\n    /**\n     * Search the configuration file\n     * <ul>\n     * <li>in ${user.home}/.pdfsam</li>\n     * <li>if step 1 fails it search in searchPathIfFails</li>\n     * <li>if found in step 2 but is write protected it copies the file in ${user.home}/.pdfsam</li>\n     * </ul>\n     *\n     * @param searchPathIfFails\n     *            the path to search the configuration file if not found in the default path\n     * @param configurationFileName\n     *            file name to search\n     * @return the path of the configuration file\n     * @throws ConfigurationException\n     */\n    private File searchConfigurationFile(String searchPathIfFails, String configurationFileName) throws ConfigurationException {\n        File retVal = new File(DEFAULT_CONFIG_DIRECTORY, configurationFileName);\n        if (!(retVal.exists() && retVal.canWrite())) {\n            File secondaryPath = new File(searchPathIfFails, configurationFileName);\n            if (secondaryPath.exists()) {\n                if (!secondaryPath.canWrite()) {\n                    File defaultPath = new File(DEFAULT_CONFIG_DIRECTORY);\n                    if (defaultPath.mkdirs()) {\n                        log.info(\"Copying \" + configurationFileName + \" from \" + secondaryPath.getPath() + \" to \" + defaultPath.getPath());\n                        FileUtility.copyFile(secondaryPath, retVal);\n                    } else {\n                        throw new ConfigurationException(\"Unable to create \" + defaultPath);\n                    }\n                } else {\n                    retVal = secondaryPath;\n                }\n            } else {\n                retVal = null;\n            }\n        }\n        return retVal;\n    }\n\n    public boolean isCheckForUpdates() {\n        return checkForUpdates;\n    }\n\n    public void setCheckForUpdates(boolean checkForUpdates) {\n        this.checkForUpdates = checkForUpdates;\n    }\n\n    public boolean isPlaySounds() {\n        return playSounds;\n    }\n\n    public void setPlaySounds(boolean playSounds) {\n        this.playSounds = playSounds;\n    }\n\n    public String getDefaultWorkingDirectory() {\n        return defaultWorkingDirectory;\n    }\n\n    public void setDefaultWorkingDirectory(String defaultWorkingDirectory) {\n        this.defaultWorkingDirectory = defaultWorkingDirectory;\n    }\n\n    public String getDefaultEnvironment() {\n        return defaultEnvironment;\n    }\n\n    public void setDefaultEnvironment(String defaultEnvironment) {\n        this.defaultEnvironment = defaultEnvironment;\n    }\n\n    public int getThumbCreatorPoolSize() {\n        return thumbCreatorPoolSize;\n    }\n\n    public String getThumbnailsCreatorIdentifier() {\n        return thumbnailsCreatorIdentifier;\n    }\n\n    public void setThumbnailsCreatorIdentifier(String thumbnailsCreatorIdentifier) {\n        this.thumbnailsCreatorIdentifier = thumbnailsCreatorIdentifier;\n    }\n\n    public int getLoggingLevel() {\n        return loggingLevel;\n    }\n\n    public void setLoggingLevel(int loggingLevel) {\n        this.loggingLevel = loggingLevel;\n    }\n\n    public ResourceBundle getI18nResourceBundle() {\n        return i18nResourceBundle;\n    }\n\n    public ConsoleServicesFacade getConsoleServicesFacade() {\n        return consoleServicesFacade;\n    }\n\n    public int getLookAndFeel() {\n        return lookAndFeel;\n    }\n\n    public void setLookAndFeel(int lookAndFeel) {\n        this.lookAndFeel = lookAndFeel;\n    }\n\n    public int getTheme() {\n        return theme;\n    }\n\n    public void setTheme(int theme) {\n        this.theme = theme;\n    }\n\n    public String getLanguage() {\n        return language;\n    }\n\n    public void setLanguage(String language) {\n        this.language = language;\n    }\n\n    public String getConfigurationInformations() {\n        return configurationFilePath;\n    }\n\n    public String getPluginAbsolutePath() {\n        return pluginAbsolutePath;\n    }\n\n    public boolean isAskOverwriteConfirmation() {\n        return askOverwriteConfirmation;\n    }\n\n    public void setAskOverwriteConfirmation(boolean askOverwriteConfirmation) {\n        this.askOverwriteConfirmation = askOverwriteConfirmation;\n    }\n\n    public int getThumbnailSize() {\n        return thumbnailsSize;\n    }\n\n    public boolean isHighQualityThumbnils() {\n        return thumbnailsHighQuality;\n    }\n\n    public void save() throws IOException {\n        File defaultPath = new File(DEFAULT_CONFIG_DIRECTORY);\n        if (!defaultPath.exists() || !defaultPath.isDirectory()) {\n            defaultPath.mkdirs();\n        }\n        DefaultXmlStrategy.saveXmlConfigurationFile(new File(defaultPath, CONFIGURATION_FILE_NAME), this);\n    }\n}\n",
		"id": "EvoSuiteBenchmark/109_pdfsam/src/main/java/org/pdfsam/guiclient/configuration/services/xml/XmlConfigurationServiceTest1.java",
		"test_prompt": "// XmlConfigurationServiceTest1.java\npackage org.pdfsam.guiclient.configuration.services.xml;\n\nimport java.io.File;\nimport java.io.IOException;\nimport java.io.UnsupportedEncodingException;\nimport java.net.URLDecoder;\nimport java.util.ResourceBundle;\nimport org.apache.log4j.Level;\nimport org.apache.log4j.Logger;\nimport org.dom4j.Document;\nimport org.dom4j.DocumentException;\nimport org.dom4j.Node;\nimport org.pdfsam.console.business.ConsoleServicesFacade;\nimport org.pdfsam.console.utils.FileUtility;\nimport org.pdfsam.guiclient.configuration.services.ConfigurationService;\nimport org.pdfsam.guiclient.configuration.services.xml.strategy.BackwardCompatibilityXmlStrategy;\nimport org.pdfsam.guiclient.configuration.services.xml.strategy.DefaultXmlStrategy;\nimport org.pdfsam.guiclient.configuration.services.xml.strategy.XmlConfigStrategy;\nimport org.pdfsam.guiclient.exceptions.ConfigurationException;\nimport org.pdfsam.guiclient.l10n.LanguageLoader;\nimport org.pdfsam.guiclient.utils.ThemeUtility;\nimport org.pdfsam.guiclient.utils.XmlUtility;\nimport org.pdfsam.i18n.GettextResource;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link XmlConfigurationService}.\n* It contains ten unit test cases for the {@link XmlConfigurationService#isPlaySounds()} method.\n*/\nclass XmlConfigurationServiceTest1 {"
	},
	{
		"original_code": "// XmlConfigurationService.java\n/*\n * Created on 24-Set-2009\n * Copyright (C) 2009 by Andrea Vacondio.\n *\n * This program is free software; you can redistribute it and/or modify it under the terms of the \n * GNU General Public License as published by the Free Software Foundation; \n * either version 2 of the License.\n * This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; \n * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. \n * See the GNU General Public License for more details.\n * You should have received a copy of the GNU General Public License along with this program; \n * if not, write to the Free Software Foundation, Inc., \n *  59 Temple Place, Suite 330, Boston, MA 02111-1307 USA\n */\npackage org.pdfsam.guiclient.configuration.services.xml;\n\nimport java.io.File;\nimport java.io.IOException;\nimport java.io.UnsupportedEncodingException;\nimport java.net.URLDecoder;\nimport java.util.ResourceBundle;\nimport org.apache.log4j.Level;\nimport org.apache.log4j.Logger;\nimport org.dom4j.Document;\nimport org.dom4j.DocumentException;\nimport org.dom4j.Node;\nimport org.pdfsam.console.business.ConsoleServicesFacade;\nimport org.pdfsam.console.utils.FileUtility;\nimport org.pdfsam.guiclient.configuration.services.ConfigurationService;\nimport org.pdfsam.guiclient.configuration.services.xml.strategy.BackwardCompatibilityXmlStrategy;\nimport org.pdfsam.guiclient.configuration.services.xml.strategy.DefaultXmlStrategy;\nimport org.pdfsam.guiclient.configuration.services.xml.strategy.XmlConfigStrategy;\nimport org.pdfsam.guiclient.exceptions.ConfigurationException;\nimport org.pdfsam.guiclient.l10n.LanguageLoader;\nimport org.pdfsam.guiclient.utils.ThemeUtility;\nimport org.pdfsam.guiclient.utils.XmlUtility;\nimport org.pdfsam.i18n.GettextResource;\n\n/**\n * Configuration service that reads the configuration from an xml file\n *\n * @author Andrea Vacondio\n */\npublic class XmlConfigurationService implements ConfigurationService {\n\n    private static final Logger log = Logger.getLogger(XmlConfigurationService.class.getPackage().getName());\n\n    private static final String VERSION_XPATH = \"/pdfsam/@config-version\";\n\n    public static final String OLD_CONFIGURATION_FILE_NAME = \"config.xml\";\n\n    public static final String CONFIGURATION_FILE_NAME = \"pdfsam-config.xml\";\n\n    public static final int DEFAULT_POOL_SIZE = 3;\n\n    public static final String DEFAULT_CONFIG_DIRECTORY = System.getProperty(\"user.home\") + \"/.pdfsam\";\n\n    private ResourceBundle i18nResourceBundle;\n\n    private ConsoleServicesFacade consoleServicesFacade;\n\n    private boolean checkForUpdates = true;\n\n    private boolean playSounds = true;\n\n    private boolean askOverwriteConfirmation = true;\n\n    private boolean thumbnailsHighQuality = false;\n\n    private String defaultWorkingDirectory = null;\n\n    private String defaultEnvironment = null;\n\n    private int thumbCreatorPoolSize = DEFAULT_POOL_SIZE;\n\n    private String thumbnailsCreatorIdentifier = \"\";\n\n    private int thumbnailsSize = 190;\n\n    private int loggingLevel;\n\n    private int lookAndFeel = 0;\n\n    private int theme = 0;\n\n    private String language;\n\n    private String pluginAbsolutePath;\n\n    private String configurationFilePath;\n\n    public XmlConfigurationService() throws ConfigurationException {\n        initializeService();\n    }\n\n    /**\n     * Initialization\n     *\n     * @throws ConfigurationException\n     */\n    private void initializeService() throws ConfigurationException {\n        log.info(\"Loading configuration..\");\n        File configurationFile = null;\n        try {\n            configurationFile = getConfigurationXmlFile(CONFIGURATION_FILE_NAME);\n            if (configurationFile == null) {\n                configurationFile = getConfigurationXmlFile(OLD_CONFIGURATION_FILE_NAME);\n                if (configurationFile == null) {\n                    throw new ConfigurationException(\"Unable to find configuration file\");\n                }\n            }\n            configurationFilePath = configurationFile.getAbsolutePath();\n            Document document = XmlUtility.parseXmlFile(configurationFile);\n            if (document != null) {\n                // setting up strategy\n                XmlConfigStrategy strategy = null;\n                Node node = document.selectSingleNode(VERSION_XPATH);\n                if (node != null && \"2\".equals(node.getText().trim())) {\n                    strategy = new DefaultXmlStrategy(document);\n                } else {\n                    strategy = new BackwardCompatibilityXmlStrategy(document);\n                }\n                initializeLocale(strategy);\n                initializeLookAndFeel(strategy);\n                initializeLoggingLevel(strategy);\n                initializePoolSize(strategy);\n                initializeThumbnailsSize(strategy);\n                defaultWorkingDirectory = strategy.getDefaultWorkingDirectoryValue();\n                defaultEnvironment = strategy.getDefaultEnvironmentValue();\n                thumbnailsCreatorIdentifier = strategy.getThumbnailsCreatorIdentifierValue();\n                checkForUpdates = isValidTrueValue(strategy.getCheckForUpdatesValue());\n                playSounds = isValidTrueValue(strategy.getPlaySoundsValue());\n                pluginAbsolutePath = strategy.getPluginAbsolutePath();\n                askOverwriteConfirmation = isValidTrueValue(strategy.getAskOverwriteConfirmation());\n                thumbnailsHighQuality = isValidTrueValue(strategy.getHighQualityThumbnails());\n                log.info(\"Thumbnails high quality \" + Boolean.toString(thumbnailsHighQuality));\n                consoleServicesFacade = new ConsoleServicesFacade();\n                strategy.close();\n            } else {\n                throw new ConfigurationException(\"Unable to parse xml configuration file.\");\n            }\n        } catch (DocumentException e) {\n            throw new ConfigurationException(e);\n        } catch (UnsupportedEncodingException ue) {\n            throw new ConfigurationException(ue);\n        }\n    }\n\n    /**\n     * thread pool size initialization\n     *\n     * @param strategy\n     */\n    private void initializePoolSize(XmlConfigStrategy strategy) {\n        String poolSizeString = strategy.getThreadPoolSizeValue();\n        if (poolSizeString.length() > 0) {\n            thumbCreatorPoolSize = Integer.parseInt(poolSizeString);\n        }\n    }\n\n    private void initializeThumbnailsSize(XmlConfigStrategy strategy) {\n        String thumbSize = strategy.getThumbnailsSize();\n        if (thumbSize.length() > 0) {\n            thumbnailsSize = Integer.parseInt(thumbSize);\n        }\n        log.info(\"Thumbnails size set to \" + thumbnailsSize);\n    }\n\n    /**\n     * locale initialization\n     *\n     * @param strategy\n     */\n    private void initializeLocale(XmlConfigStrategy strategy) {\n        log.info(\"Getting language...\");\n        language = strategy.getLocaleValue();\n        if (language.length() <= 0) {\n            log.warn(\"Unable to get language ResourceBudle, setting the default language (\" + LanguageLoader.DEFAULT_LANGUAGE + \").\");\n            language = LanguageLoader.DEFAULT_LANGUAGE;\n        }\n        i18nResourceBundle = new LanguageLoader(language, \"org.pdfsam.i18n.resources.Messages\").getBundle();\n    }\n\n    /**\n     * theme, look and feel initialization\n     *\n     * @param strategy\n     */\n    private void initializeLookAndFeel(XmlConfigStrategy strategy) {\n        log.info(GettextResource.gettext(i18nResourceBundle, \"Setting look and feel...\"));\n        String lookAndFeelString = strategy.getLookAndFeelValue();\n        if (lookAndFeelString.length() > 0) {\n            lookAndFeel = Integer.parseInt(lookAndFeelString);\n        }\n        if (ThemeUtility.isPlastic(lookAndFeel)) {\n            String themeString = strategy.getThemeValue();\n            if (themeString.length() > 0) {\n                theme = Integer.parseInt(themeString);\n            }\n        }\n    }\n\n    /**\n     * logging level initlialization\n     *\n     * @param strategy\n     */\n    private void initializeLoggingLevel(XmlConfigStrategy strategy) {\n        log.info(GettextResource.gettext(i18nResourceBundle, \"Setting logging level...\"));\n        String logLev = strategy.getLoggingLevelValue();\n        if (logLev != null && logLev.length() > 0) {\n            loggingLevel = Integer.parseInt(logLev);\n        } else {\n            log.warn(GettextResource.gettext(i18nResourceBundle, \"Unable to find log level, setting to default level (DEBUG).\"));\n            loggingLevel = Level.DEBUG_INT;\n        }\n    }\n\n    /**\n     * @param value\n     * @return true if the input param is \"true\" or \"1\"\n     */\n    private boolean isValidTrueValue(String value) {\n        boolean retVal = Boolean.parseBoolean(value);\n        if (!retVal) {\n            retVal = \"1\".equals(value);\n        }\n        return retVal;\n    }\n\n    /**\n     * It search the config file.\n     * <ul>\n     * <li>the first try uses secondaryPath=main jar path</li>\n     * <li>the second try uses secondaryPath=System.getProperty(\"user.dir\")</li>\n     * </ul>\n     *\n     * @param configurationFileName\n     *            file name to search\n     * @return the configuration file\n     * @throws UnsupportedEncodingException\n     * @throws ConfigurationException\n     */\n    private File getConfigurationXmlFile(String configurationFileName) throws UnsupportedEncodingException, ConfigurationException {\n        File retVal = null;\n        String configSearchPath = new File(URLDecoder.decode(getClass().getProtectionDomain().getCodeSource().getLocation().getPath(), \"UTF-8\")).getParent();\n        retVal = searchConfigurationFile(configSearchPath, configurationFileName);\n        if (retVal == null) {\n            log.warn(\"Unable to find \" + configurationFileName + \" into \" + configSearchPath);\n            configSearchPath = System.getProperty(\"user.dir\");\n            log.info(\"Looking for \" + configurationFileName + \" into \" + configSearchPath);\n            retVal = searchConfigurationFile(configSearchPath, configurationFileName);\n        }\n        return retVal;\n    }\n\n    /**\n     * Search the configuration file\n     * <ul>\n     * <li>in ${user.home}/.pdfsam</li>\n     * <li>if step 1 fails it search in searchPathIfFails</li>\n     * <li>if found in step 2 but is write protected it copies the file in ${user.home}/.pdfsam</li>\n     * </ul>\n     *\n     * @param searchPathIfFails\n     *            the path to search the configuration file if not found in the default path\n     * @param configurationFileName\n     *            file name to search\n     * @return the path of the configuration file\n     * @throws ConfigurationException\n     */\n    private File searchConfigurationFile(String searchPathIfFails, String configurationFileName) throws ConfigurationException {\n        File retVal = new File(DEFAULT_CONFIG_DIRECTORY, configurationFileName);\n        if (!(retVal.exists() && retVal.canWrite())) {\n            File secondaryPath = new File(searchPathIfFails, configurationFileName);\n            if (secondaryPath.exists()) {\n                if (!secondaryPath.canWrite()) {\n                    File defaultPath = new File(DEFAULT_CONFIG_DIRECTORY);\n                    if (defaultPath.mkdirs()) {\n                        log.info(\"Copying \" + configurationFileName + \" from \" + secondaryPath.getPath() + \" to \" + defaultPath.getPath());\n                        FileUtility.copyFile(secondaryPath, retVal);\n                    } else {\n                        throw new ConfigurationException(\"Unable to create \" + defaultPath);\n                    }\n                } else {\n                    retVal = secondaryPath;\n                }\n            } else {\n                retVal = null;\n            }\n        }\n        return retVal;\n    }\n\n    public boolean isCheckForUpdates() {\n        return checkForUpdates;\n    }\n\n    public void setCheckForUpdates(boolean checkForUpdates) {\n        this.checkForUpdates = checkForUpdates;\n    }\n\n    public boolean isPlaySounds() {\n        return playSounds;\n    }\n\n    public void setPlaySounds(boolean playSounds) {\n        this.playSounds = playSounds;\n    }\n\n    public String getDefaultWorkingDirectory() {\n        return defaultWorkingDirectory;\n    }\n\n    public void setDefaultWorkingDirectory(String defaultWorkingDirectory) {\n        this.defaultWorkingDirectory = defaultWorkingDirectory;\n    }\n\n    public String getDefaultEnvironment() {\n        return defaultEnvironment;\n    }\n\n    public void setDefaultEnvironment(String defaultEnvironment) {\n        this.defaultEnvironment = defaultEnvironment;\n    }\n\n    public int getThumbCreatorPoolSize() {\n        return thumbCreatorPoolSize;\n    }\n\n    public String getThumbnailsCreatorIdentifier() {\n        return thumbnailsCreatorIdentifier;\n    }\n\n    public void setThumbnailsCreatorIdentifier(String thumbnailsCreatorIdentifier) {\n        this.thumbnailsCreatorIdentifier = thumbnailsCreatorIdentifier;\n    }\n\n    public int getLoggingLevel() {\n        return loggingLevel;\n    }\n\n    public void setLoggingLevel(int loggingLevel) {\n        this.loggingLevel = loggingLevel;\n    }\n\n    public ResourceBundle getI18nResourceBundle() {\n        return i18nResourceBundle;\n    }\n\n    public ConsoleServicesFacade getConsoleServicesFacade() {\n        return consoleServicesFacade;\n    }\n\n    public int getLookAndFeel() {\n        return lookAndFeel;\n    }\n\n    public void setLookAndFeel(int lookAndFeel) {\n        this.lookAndFeel = lookAndFeel;\n    }\n\n    public int getTheme() {\n        return theme;\n    }\n\n    public void setTheme(int theme) {\n        this.theme = theme;\n    }\n\n    public String getLanguage() {\n        return language;\n    }\n\n    public void setLanguage(String language) {\n        this.language = language;\n    }\n\n    public String getConfigurationInformations() {\n        return configurationFilePath;\n    }\n\n    public String getPluginAbsolutePath() {\n        return pluginAbsolutePath;\n    }\n\n    public boolean isAskOverwriteConfirmation() {\n        return askOverwriteConfirmation;\n    }\n\n    public void setAskOverwriteConfirmation(boolean askOverwriteConfirmation) {\n        this.askOverwriteConfirmation = askOverwriteConfirmation;\n    }\n\n    public int getThumbnailSize() {\n        return thumbnailsSize;\n    }\n\n    public boolean isHighQualityThumbnils() {\n        return thumbnailsHighQuality;\n    }\n\n    public void save() throws IOException {\n        File defaultPath = new File(DEFAULT_CONFIG_DIRECTORY);\n        if (!defaultPath.exists() || !defaultPath.isDirectory()) {\n            defaultPath.mkdirs();\n        }\n        DefaultXmlStrategy.saveXmlConfigurationFile(new File(defaultPath, CONFIGURATION_FILE_NAME), this);\n    }\n}\n",
		"id": "EvoSuiteBenchmark/109_pdfsam/src/main/java/org/pdfsam/guiclient/configuration/services/xml/XmlConfigurationServiceTest2.java",
		"test_prompt": "// XmlConfigurationServiceTest2.java\npackage org.pdfsam.guiclient.configuration.services.xml;\n\nimport java.io.File;\nimport java.io.IOException;\nimport java.io.UnsupportedEncodingException;\nimport java.net.URLDecoder;\nimport java.util.ResourceBundle;\nimport org.apache.log4j.Level;\nimport org.apache.log4j.Logger;\nimport org.dom4j.Document;\nimport org.dom4j.DocumentException;\nimport org.dom4j.Node;\nimport org.pdfsam.console.business.ConsoleServicesFacade;\nimport org.pdfsam.console.utils.FileUtility;\nimport org.pdfsam.guiclient.configuration.services.ConfigurationService;\nimport org.pdfsam.guiclient.configuration.services.xml.strategy.BackwardCompatibilityXmlStrategy;\nimport org.pdfsam.guiclient.configuration.services.xml.strategy.DefaultXmlStrategy;\nimport org.pdfsam.guiclient.configuration.services.xml.strategy.XmlConfigStrategy;\nimport org.pdfsam.guiclient.exceptions.ConfigurationException;\nimport org.pdfsam.guiclient.l10n.LanguageLoader;\nimport org.pdfsam.guiclient.utils.ThemeUtility;\nimport org.pdfsam.guiclient.utils.XmlUtility;\nimport org.pdfsam.i18n.GettextResource;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link XmlConfigurationService}.\n* It contains ten unit test cases for the {@link XmlConfigurationService#isAskOverwriteConfirmation()} method.\n*/\nclass XmlConfigurationServiceTest2 {"
	},
	{
		"original_code": "// XmlConfigurationService.java\n/*\n * Created on 24-Set-2009\n * Copyright (C) 2009 by Andrea Vacondio.\n *\n * This program is free software; you can redistribute it and/or modify it under the terms of the \n * GNU General Public License as published by the Free Software Foundation; \n * either version 2 of the License.\n * This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; \n * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. \n * See the GNU General Public License for more details.\n * You should have received a copy of the GNU General Public License along with this program; \n * if not, write to the Free Software Foundation, Inc., \n *  59 Temple Place, Suite 330, Boston, MA 02111-1307 USA\n */\npackage org.pdfsam.guiclient.configuration.services.xml;\n\nimport java.io.File;\nimport java.io.IOException;\nimport java.io.UnsupportedEncodingException;\nimport java.net.URLDecoder;\nimport java.util.ResourceBundle;\nimport org.apache.log4j.Level;\nimport org.apache.log4j.Logger;\nimport org.dom4j.Document;\nimport org.dom4j.DocumentException;\nimport org.dom4j.Node;\nimport org.pdfsam.console.business.ConsoleServicesFacade;\nimport org.pdfsam.console.utils.FileUtility;\nimport org.pdfsam.guiclient.configuration.services.ConfigurationService;\nimport org.pdfsam.guiclient.configuration.services.xml.strategy.BackwardCompatibilityXmlStrategy;\nimport org.pdfsam.guiclient.configuration.services.xml.strategy.DefaultXmlStrategy;\nimport org.pdfsam.guiclient.configuration.services.xml.strategy.XmlConfigStrategy;\nimport org.pdfsam.guiclient.exceptions.ConfigurationException;\nimport org.pdfsam.guiclient.l10n.LanguageLoader;\nimport org.pdfsam.guiclient.utils.ThemeUtility;\nimport org.pdfsam.guiclient.utils.XmlUtility;\nimport org.pdfsam.i18n.GettextResource;\n\n/**\n * Configuration service that reads the configuration from an xml file\n *\n * @author Andrea Vacondio\n */\npublic class XmlConfigurationService implements ConfigurationService {\n\n    private static final Logger log = Logger.getLogger(XmlConfigurationService.class.getPackage().getName());\n\n    private static final String VERSION_XPATH = \"/pdfsam/@config-version\";\n\n    public static final String OLD_CONFIGURATION_FILE_NAME = \"config.xml\";\n\n    public static final String CONFIGURATION_FILE_NAME = \"pdfsam-config.xml\";\n\n    public static final int DEFAULT_POOL_SIZE = 3;\n\n    public static final String DEFAULT_CONFIG_DIRECTORY = System.getProperty(\"user.home\") + \"/.pdfsam\";\n\n    private ResourceBundle i18nResourceBundle;\n\n    private ConsoleServicesFacade consoleServicesFacade;\n\n    private boolean checkForUpdates = true;\n\n    private boolean playSounds = true;\n\n    private boolean askOverwriteConfirmation = true;\n\n    private boolean thumbnailsHighQuality = false;\n\n    private String defaultWorkingDirectory = null;\n\n    private String defaultEnvironment = null;\n\n    private int thumbCreatorPoolSize = DEFAULT_POOL_SIZE;\n\n    private String thumbnailsCreatorIdentifier = \"\";\n\n    private int thumbnailsSize = 190;\n\n    private int loggingLevel;\n\n    private int lookAndFeel = 0;\n\n    private int theme = 0;\n\n    private String language;\n\n    private String pluginAbsolutePath;\n\n    private String configurationFilePath;\n\n    public XmlConfigurationService() throws ConfigurationException {\n        initializeService();\n    }\n\n    /**\n     * Initialization\n     *\n     * @throws ConfigurationException\n     */\n    private void initializeService() throws ConfigurationException {\n        log.info(\"Loading configuration..\");\n        File configurationFile = null;\n        try {\n            configurationFile = getConfigurationXmlFile(CONFIGURATION_FILE_NAME);\n            if (configurationFile == null) {\n                configurationFile = getConfigurationXmlFile(OLD_CONFIGURATION_FILE_NAME);\n                if (configurationFile == null) {\n                    throw new ConfigurationException(\"Unable to find configuration file\");\n                }\n            }\n            configurationFilePath = configurationFile.getAbsolutePath();\n            Document document = XmlUtility.parseXmlFile(configurationFile);\n            if (document != null) {\n                // setting up strategy\n                XmlConfigStrategy strategy = null;\n                Node node = document.selectSingleNode(VERSION_XPATH);\n                if (node != null && \"2\".equals(node.getText().trim())) {\n                    strategy = new DefaultXmlStrategy(document);\n                } else {\n                    strategy = new BackwardCompatibilityXmlStrategy(document);\n                }\n                initializeLocale(strategy);\n                initializeLookAndFeel(strategy);\n                initializeLoggingLevel(strategy);\n                initializePoolSize(strategy);\n                initializeThumbnailsSize(strategy);\n                defaultWorkingDirectory = strategy.getDefaultWorkingDirectoryValue();\n                defaultEnvironment = strategy.getDefaultEnvironmentValue();\n                thumbnailsCreatorIdentifier = strategy.getThumbnailsCreatorIdentifierValue();\n                checkForUpdates = isValidTrueValue(strategy.getCheckForUpdatesValue());\n                playSounds = isValidTrueValue(strategy.getPlaySoundsValue());\n                pluginAbsolutePath = strategy.getPluginAbsolutePath();\n                askOverwriteConfirmation = isValidTrueValue(strategy.getAskOverwriteConfirmation());\n                thumbnailsHighQuality = isValidTrueValue(strategy.getHighQualityThumbnails());\n                log.info(\"Thumbnails high quality \" + Boolean.toString(thumbnailsHighQuality));\n                consoleServicesFacade = new ConsoleServicesFacade();\n                strategy.close();\n            } else {\n                throw new ConfigurationException(\"Unable to parse xml configuration file.\");\n            }\n        } catch (DocumentException e) {\n            throw new ConfigurationException(e);\n        } catch (UnsupportedEncodingException ue) {\n            throw new ConfigurationException(ue);\n        }\n    }\n\n    /**\n     * thread pool size initialization\n     *\n     * @param strategy\n     */\n    private void initializePoolSize(XmlConfigStrategy strategy) {\n        String poolSizeString = strategy.getThreadPoolSizeValue();\n        if (poolSizeString.length() > 0) {\n            thumbCreatorPoolSize = Integer.parseInt(poolSizeString);\n        }\n    }\n\n    private void initializeThumbnailsSize(XmlConfigStrategy strategy) {\n        String thumbSize = strategy.getThumbnailsSize();\n        if (thumbSize.length() > 0) {\n            thumbnailsSize = Integer.parseInt(thumbSize);\n        }\n        log.info(\"Thumbnails size set to \" + thumbnailsSize);\n    }\n\n    /**\n     * locale initialization\n     *\n     * @param strategy\n     */\n    private void initializeLocale(XmlConfigStrategy strategy) {\n        log.info(\"Getting language...\");\n        language = strategy.getLocaleValue();\n        if (language.length() <= 0) {\n            log.warn(\"Unable to get language ResourceBudle, setting the default language (\" + LanguageLoader.DEFAULT_LANGUAGE + \").\");\n            language = LanguageLoader.DEFAULT_LANGUAGE;\n        }\n        i18nResourceBundle = new LanguageLoader(language, \"org.pdfsam.i18n.resources.Messages\").getBundle();\n    }\n\n    /**\n     * theme, look and feel initialization\n     *\n     * @param strategy\n     */\n    private void initializeLookAndFeel(XmlConfigStrategy strategy) {\n        log.info(GettextResource.gettext(i18nResourceBundle, \"Setting look and feel...\"));\n        String lookAndFeelString = strategy.getLookAndFeelValue();\n        if (lookAndFeelString.length() > 0) {\n            lookAndFeel = Integer.parseInt(lookAndFeelString);\n        }\n        if (ThemeUtility.isPlastic(lookAndFeel)) {\n            String themeString = strategy.getThemeValue();\n            if (themeString.length() > 0) {\n                theme = Integer.parseInt(themeString);\n            }\n        }\n    }\n\n    /**\n     * logging level initlialization\n     *\n     * @param strategy\n     */\n    private void initializeLoggingLevel(XmlConfigStrategy strategy) {\n        log.info(GettextResource.gettext(i18nResourceBundle, \"Setting logging level...\"));\n        String logLev = strategy.getLoggingLevelValue();\n        if (logLev != null && logLev.length() > 0) {\n            loggingLevel = Integer.parseInt(logLev);\n        } else {\n            log.warn(GettextResource.gettext(i18nResourceBundle, \"Unable to find log level, setting to default level (DEBUG).\"));\n            loggingLevel = Level.DEBUG_INT;\n        }\n    }\n\n    /**\n     * @param value\n     * @return true if the input param is \"true\" or \"1\"\n     */\n    private boolean isValidTrueValue(String value) {\n        boolean retVal = Boolean.parseBoolean(value);\n        if (!retVal) {\n            retVal = \"1\".equals(value);\n        }\n        return retVal;\n    }\n\n    /**\n     * It search the config file.\n     * <ul>\n     * <li>the first try uses secondaryPath=main jar path</li>\n     * <li>the second try uses secondaryPath=System.getProperty(\"user.dir\")</li>\n     * </ul>\n     *\n     * @param configurationFileName\n     *            file name to search\n     * @return the configuration file\n     * @throws UnsupportedEncodingException\n     * @throws ConfigurationException\n     */\n    private File getConfigurationXmlFile(String configurationFileName) throws UnsupportedEncodingException, ConfigurationException {\n        File retVal = null;\n        String configSearchPath = new File(URLDecoder.decode(getClass().getProtectionDomain().getCodeSource().getLocation().getPath(), \"UTF-8\")).getParent();\n        retVal = searchConfigurationFile(configSearchPath, configurationFileName);\n        if (retVal == null) {\n            log.warn(\"Unable to find \" + configurationFileName + \" into \" + configSearchPath);\n            configSearchPath = System.getProperty(\"user.dir\");\n            log.info(\"Looking for \" + configurationFileName + \" into \" + configSearchPath);\n            retVal = searchConfigurationFile(configSearchPath, configurationFileName);\n        }\n        return retVal;\n    }\n\n    /**\n     * Search the configuration file\n     * <ul>\n     * <li>in ${user.home}/.pdfsam</li>\n     * <li>if step 1 fails it search in searchPathIfFails</li>\n     * <li>if found in step 2 but is write protected it copies the file in ${user.home}/.pdfsam</li>\n     * </ul>\n     *\n     * @param searchPathIfFails\n     *            the path to search the configuration file if not found in the default path\n     * @param configurationFileName\n     *            file name to search\n     * @return the path of the configuration file\n     * @throws ConfigurationException\n     */\n    private File searchConfigurationFile(String searchPathIfFails, String configurationFileName) throws ConfigurationException {\n        File retVal = new File(DEFAULT_CONFIG_DIRECTORY, configurationFileName);\n        if (!(retVal.exists() && retVal.canWrite())) {\n            File secondaryPath = new File(searchPathIfFails, configurationFileName);\n            if (secondaryPath.exists()) {\n                if (!secondaryPath.canWrite()) {\n                    File defaultPath = new File(DEFAULT_CONFIG_DIRECTORY);\n                    if (defaultPath.mkdirs()) {\n                        log.info(\"Copying \" + configurationFileName + \" from \" + secondaryPath.getPath() + \" to \" + defaultPath.getPath());\n                        FileUtility.copyFile(secondaryPath, retVal);\n                    } else {\n                        throw new ConfigurationException(\"Unable to create \" + defaultPath);\n                    }\n                } else {\n                    retVal = secondaryPath;\n                }\n            } else {\n                retVal = null;\n            }\n        }\n        return retVal;\n    }\n\n    public boolean isCheckForUpdates() {\n        return checkForUpdates;\n    }\n\n    public void setCheckForUpdates(boolean checkForUpdates) {\n        this.checkForUpdates = checkForUpdates;\n    }\n\n    public boolean isPlaySounds() {\n        return playSounds;\n    }\n\n    public void setPlaySounds(boolean playSounds) {\n        this.playSounds = playSounds;\n    }\n\n    public String getDefaultWorkingDirectory() {\n        return defaultWorkingDirectory;\n    }\n\n    public void setDefaultWorkingDirectory(String defaultWorkingDirectory) {\n        this.defaultWorkingDirectory = defaultWorkingDirectory;\n    }\n\n    public String getDefaultEnvironment() {\n        return defaultEnvironment;\n    }\n\n    public void setDefaultEnvironment(String defaultEnvironment) {\n        this.defaultEnvironment = defaultEnvironment;\n    }\n\n    public int getThumbCreatorPoolSize() {\n        return thumbCreatorPoolSize;\n    }\n\n    public String getThumbnailsCreatorIdentifier() {\n        return thumbnailsCreatorIdentifier;\n    }\n\n    public void setThumbnailsCreatorIdentifier(String thumbnailsCreatorIdentifier) {\n        this.thumbnailsCreatorIdentifier = thumbnailsCreatorIdentifier;\n    }\n\n    public int getLoggingLevel() {\n        return loggingLevel;\n    }\n\n    public void setLoggingLevel(int loggingLevel) {\n        this.loggingLevel = loggingLevel;\n    }\n\n    public ResourceBundle getI18nResourceBundle() {\n        return i18nResourceBundle;\n    }\n\n    public ConsoleServicesFacade getConsoleServicesFacade() {\n        return consoleServicesFacade;\n    }\n\n    public int getLookAndFeel() {\n        return lookAndFeel;\n    }\n\n    public void setLookAndFeel(int lookAndFeel) {\n        this.lookAndFeel = lookAndFeel;\n    }\n\n    public int getTheme() {\n        return theme;\n    }\n\n    public void setTheme(int theme) {\n        this.theme = theme;\n    }\n\n    public String getLanguage() {\n        return language;\n    }\n\n    public void setLanguage(String language) {\n        this.language = language;\n    }\n\n    public String getConfigurationInformations() {\n        return configurationFilePath;\n    }\n\n    public String getPluginAbsolutePath() {\n        return pluginAbsolutePath;\n    }\n\n    public boolean isAskOverwriteConfirmation() {\n        return askOverwriteConfirmation;\n    }\n\n    public void setAskOverwriteConfirmation(boolean askOverwriteConfirmation) {\n        this.askOverwriteConfirmation = askOverwriteConfirmation;\n    }\n\n    public int getThumbnailSize() {\n        return thumbnailsSize;\n    }\n\n    public boolean isHighQualityThumbnils() {\n        return thumbnailsHighQuality;\n    }\n\n    public void save() throws IOException {\n        File defaultPath = new File(DEFAULT_CONFIG_DIRECTORY);\n        if (!defaultPath.exists() || !defaultPath.isDirectory()) {\n            defaultPath.mkdirs();\n        }\n        DefaultXmlStrategy.saveXmlConfigurationFile(new File(defaultPath, CONFIGURATION_FILE_NAME), this);\n    }\n}\n",
		"id": "EvoSuiteBenchmark/109_pdfsam/src/main/java/org/pdfsam/guiclient/configuration/services/xml/XmlConfigurationServiceTest3.java",
		"test_prompt": "// XmlConfigurationServiceTest3.java\npackage org.pdfsam.guiclient.configuration.services.xml;\n\nimport java.io.File;\nimport java.io.IOException;\nimport java.io.UnsupportedEncodingException;\nimport java.net.URLDecoder;\nimport java.util.ResourceBundle;\nimport org.apache.log4j.Level;\nimport org.apache.log4j.Logger;\nimport org.dom4j.Document;\nimport org.dom4j.DocumentException;\nimport org.dom4j.Node;\nimport org.pdfsam.console.business.ConsoleServicesFacade;\nimport org.pdfsam.console.utils.FileUtility;\nimport org.pdfsam.guiclient.configuration.services.ConfigurationService;\nimport org.pdfsam.guiclient.configuration.services.xml.strategy.BackwardCompatibilityXmlStrategy;\nimport org.pdfsam.guiclient.configuration.services.xml.strategy.DefaultXmlStrategy;\nimport org.pdfsam.guiclient.configuration.services.xml.strategy.XmlConfigStrategy;\nimport org.pdfsam.guiclient.exceptions.ConfigurationException;\nimport org.pdfsam.guiclient.l10n.LanguageLoader;\nimport org.pdfsam.guiclient.utils.ThemeUtility;\nimport org.pdfsam.guiclient.utils.XmlUtility;\nimport org.pdfsam.i18n.GettextResource;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link XmlConfigurationService}.\n* It contains ten unit test cases for the {@link XmlConfigurationService#isHighQualityThumbnils()} method.\n*/\nclass XmlConfigurationServiceTest3 {"
	},
	{
		"original_code": "// GuiConfiguration.java\n/*\n * Created on 11-Oct-2009\n * Copyright (C) 2009 by Andrea Vacondio.\n *\n * This program is free software; you can redistribute it and/or modify it under the terms of the \n * GNU General Public License as published by the Free Software Foundation; \n * either version 2 of the License.\n * This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; \n * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. \n * See the GNU General Public License for more details.\n * You should have received a copy of the GNU General Public License along with this program; \n * if not, write to the Free Software Foundation, Inc., \n *  59 Temple Place, Suite 330, Boston, MA 02111-1307 USA\n */\npackage org.pdfsam.guiclient.configuration;\n\nimport java.awt.Dimension;\nimport java.awt.Point;\nimport java.io.IOException;\nimport java.util.Collection;\nimport org.pdfsam.guiclient.configuration.services.ConfigurationServiceLocator;\nimport org.pdfsam.guiclient.configuration.services.GuiConfigurationService;\n\n/**\n * User interface configuration singleton\n *\n * @author Andrea Vacondio\n */\npublic class GuiConfiguration {\n\n    private static GuiConfiguration instance = null;\n\n    private GuiConfigurationService guiConfigurationService;\n\n    private GuiConfiguration() {\n        initialize();\n    }\n\n    public Object clone() throws CloneNotSupportedException {\n        throw new CloneNotSupportedException(\"Cannot clone configuration object.\");\n    }\n\n    public static synchronized GuiConfiguration getInstance() {\n        if (instance == null) {\n            instance = new GuiConfiguration();\n        }\n        return instance;\n    }\n\n    /**\n     * initialize the GUI configuration service\n     */\n    private void initialize() {\n        guiConfigurationService = ConfigurationServiceLocator.LOCATOR.getGuiConfigurationService();\n    }\n\n    /**\n     * save the current gui configuration\n     *\n     * @throws IOException\n     */\n    public void save() throws IOException {\n        guiConfigurationService.save();\n    }\n\n    /**\n     * @return\n     * @see org.pdfsam.guiclient.configuration.services.GuiConfigurationService#getExtendedState()\n     */\n    public int getExtendedState() {\n        return guiConfigurationService.getExtendedState();\n    }\n\n    /**\n     * @return\n     * @see org.pdfsam.guiclient.configuration.services.GuiConfigurationService#getLocationOnScreen()\n     */\n    public Point getLocationOnScreen() {\n        return guiConfigurationService.getLocationOnScreen();\n    }\n\n    /**\n     * @return\n     * @see org.pdfsam.guiclient.configuration.services.GuiConfigurationService#getSize()\n     */\n    public Dimension getSize() {\n        return guiConfigurationService.getSize();\n    }\n\n    /**\n     * @param state\n     * @see org.pdfsam.guiclient.configuration.services.GuiConfigurationService#setExtendedState(int)\n     */\n    public void setExtendedState(int state) {\n        guiConfigurationService.setExtendedState(state);\n    }\n\n    /**\n     * @param point\n     * @see org.pdfsam.guiclient.configuration.services.GuiConfigurationService#setLocationOnScreen(java.awt.Point)\n     */\n    public void setLocationOnScreen(Point point) {\n        guiConfigurationService.setLocationOnScreen(point);\n    }\n\n    /**\n     * @param dimension\n     * @see org.pdfsam.guiclient.configuration.services.GuiConfigurationService#setSize(java.awt.Dimension)\n     */\n    public void setSize(Dimension dimension) {\n        guiConfigurationService.setSize(dimension);\n    }\n\n    /**\n     * @return\n     * @see org.pdfsam.guiclient.configuration.services.GuiConfigurationService#getHorizontalDividerLocation()\n     */\n    public int getHorizontalDividerLocation() {\n        return guiConfigurationService.getHorizontalDividerLocation();\n    }\n\n    /**\n     * @return\n     * @see org.pdfsam.guiclient.configuration.services.GuiConfigurationService#getVerticalDividerLocation()\n     */\n    public int getVerticalDividerLocation() {\n        return guiConfigurationService.getVerticalDividerLocation();\n    }\n\n    /**\n     * @param location\n     * @see org.pdfsam.guiclient.configuration.services.GuiConfigurationService#setHorizontalDividerLocation(int)\n     */\n    public void setHorizontalDividerLocation(int location) {\n        guiConfigurationService.setHorizontalDividerLocation(location);\n    }\n\n    /**\n     * @param location\n     * @see org.pdfsam.guiclient.configuration.services.GuiConfigurationService#setVerticalDividerLocation(int)\n     */\n    public void setVerticalDividerLocation(int location) {\n        guiConfigurationService.setVerticalDividerLocation(location);\n    }\n\n    /**\n     * @return\n     * @see org.pdfsam.guiclient.configuration.services.GuiConfigurationService#getHorizontalDividerDimension()\n     */\n    public Dimension getHorizontalDividerDimension() {\n        return guiConfigurationService.getHorizontalDividerDimension();\n    }\n\n    /**\n     * @param horizontalDividerDimension\n     * @see org.pdfsam.guiclient.configuration.services.GuiConfigurationService#setHorizontalDividerDimension(java.awt.Dimension)\n     */\n    public void setHorizontalDividerDimension(Dimension horizontalDividerDimension) {\n        guiConfigurationService.setHorizontalDividerDimension(horizontalDividerDimension);\n    }\n\n    /**\n     * @return\n     * @see org.pdfsam.guiclient.configuration.services.GuiConfigurationService#getVerticalDividerDimension()\n     */\n    public Dimension getVerticalDividerDimension() {\n        return guiConfigurationService.getVerticalDividerDimension();\n    }\n\n    /**\n     * @param verticalDividerDimension\n     * @see org.pdfsam.guiclient.configuration.services.GuiConfigurationService#setVerticalDividerDimension(java.awt.Dimension)\n     */\n    public void setVerticalDividerDimension(Dimension verticalDividerDimension) {\n        guiConfigurationService.setVerticalDividerDimension(verticalDividerDimension);\n    }\n\n    /**\n     * @return\n     * @see org.pdfsam.guiclient.configuration.services.GuiConfigurationService#getSelectedPlugin()\n     */\n    public String getSelectedPlugin() {\n        return guiConfigurationService.getSelectedPlugin();\n    }\n\n    /**\n     * @param selectedPlugin\n     * @see org.pdfsam.guiclient.configuration.services.GuiConfigurationService#setSelectedPlugin(java.lang.String)\n     */\n    public void setSelectedPlugin(String selectedPlugin) {\n        guiConfigurationService.setSelectedPlugin(selectedPlugin);\n    }\n\n    /**\n     * @param envPath\n     * @see org.pdfsam.guiclient.configuration.services.ConfigurationService#addRecentEnvironment(java.lang.String)\n     */\n    public void addRecentEnvironment(String envPath) {\n        guiConfigurationService.addRecentEnvironment(envPath);\n    }\n\n    /**\n     * @return\n     * @see org.pdfsam.guiclient.configuration.services.ConfigurationService#getRecentEnvironments()\n     */\n    public Collection<String> getRecentEnvironments() {\n        return guiConfigurationService.getRecentEnvironments();\n    }\n}\n",
		"id": "EvoSuiteBenchmark/109_pdfsam/src/main/java/org/pdfsam/guiclient/configuration/GuiConfigurationTest0.java",
		"test_prompt": "// GuiConfigurationTest0.java\npackage org.pdfsam.guiclient.configuration;\n\nimport java.awt.Dimension;\nimport java.awt.Point;\nimport java.io.IOException;\nimport java.util.Collection;\nimport org.pdfsam.guiclient.configuration.services.ConfigurationServiceLocator;\nimport org.pdfsam.guiclient.configuration.services.GuiConfigurationService;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link GuiConfiguration}.\n* It contains ten unit test cases for the {@link GuiConfiguration#clone()} method.\n*/\nclass GuiConfigurationTest0 {"
	},
	{
		"original_code": "// GuiConfiguration.java\n/*\n * Created on 11-Oct-2009\n * Copyright (C) 2009 by Andrea Vacondio.\n *\n * This program is free software; you can redistribute it and/or modify it under the terms of the \n * GNU General Public License as published by the Free Software Foundation; \n * either version 2 of the License.\n * This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; \n * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. \n * See the GNU General Public License for more details.\n * You should have received a copy of the GNU General Public License along with this program; \n * if not, write to the Free Software Foundation, Inc., \n *  59 Temple Place, Suite 330, Boston, MA 02111-1307 USA\n */\npackage org.pdfsam.guiclient.configuration;\n\nimport java.awt.Dimension;\nimport java.awt.Point;\nimport java.io.IOException;\nimport java.util.Collection;\nimport org.pdfsam.guiclient.configuration.services.ConfigurationServiceLocator;\nimport org.pdfsam.guiclient.configuration.services.GuiConfigurationService;\n\n/**\n * User interface configuration singleton\n *\n * @author Andrea Vacondio\n */\npublic class GuiConfiguration {\n\n    private static GuiConfiguration instance = null;\n\n    private GuiConfigurationService guiConfigurationService;\n\n    private GuiConfiguration() {\n        initialize();\n    }\n\n    public Object clone() throws CloneNotSupportedException {\n        throw new CloneNotSupportedException(\"Cannot clone configuration object.\");\n    }\n\n    public static synchronized GuiConfiguration getInstance() {\n        if (instance == null) {\n            instance = new GuiConfiguration();\n        }\n        return instance;\n    }\n\n    /**\n     * initialize the GUI configuration service\n     */\n    private void initialize() {\n        guiConfigurationService = ConfigurationServiceLocator.LOCATOR.getGuiConfigurationService();\n    }\n\n    /**\n     * save the current gui configuration\n     *\n     * @throws IOException\n     */\n    public void save() throws IOException {\n        guiConfigurationService.save();\n    }\n\n    /**\n     * @return\n     * @see org.pdfsam.guiclient.configuration.services.GuiConfigurationService#getExtendedState()\n     */\n    public int getExtendedState() {\n        return guiConfigurationService.getExtendedState();\n    }\n\n    /**\n     * @return\n     * @see org.pdfsam.guiclient.configuration.services.GuiConfigurationService#getLocationOnScreen()\n     */\n    public Point getLocationOnScreen() {\n        return guiConfigurationService.getLocationOnScreen();\n    }\n\n    /**\n     * @return\n     * @see org.pdfsam.guiclient.configuration.services.GuiConfigurationService#getSize()\n     */\n    public Dimension getSize() {\n        return guiConfigurationService.getSize();\n    }\n\n    /**\n     * @param state\n     * @see org.pdfsam.guiclient.configuration.services.GuiConfigurationService#setExtendedState(int)\n     */\n    public void setExtendedState(int state) {\n        guiConfigurationService.setExtendedState(state);\n    }\n\n    /**\n     * @param point\n     * @see org.pdfsam.guiclient.configuration.services.GuiConfigurationService#setLocationOnScreen(java.awt.Point)\n     */\n    public void setLocationOnScreen(Point point) {\n        guiConfigurationService.setLocationOnScreen(point);\n    }\n\n    /**\n     * @param dimension\n     * @see org.pdfsam.guiclient.configuration.services.GuiConfigurationService#setSize(java.awt.Dimension)\n     */\n    public void setSize(Dimension dimension) {\n        guiConfigurationService.setSize(dimension);\n    }\n\n    /**\n     * @return\n     * @see org.pdfsam.guiclient.configuration.services.GuiConfigurationService#getHorizontalDividerLocation()\n     */\n    public int getHorizontalDividerLocation() {\n        return guiConfigurationService.getHorizontalDividerLocation();\n    }\n\n    /**\n     * @return\n     * @see org.pdfsam.guiclient.configuration.services.GuiConfigurationService#getVerticalDividerLocation()\n     */\n    public int getVerticalDividerLocation() {\n        return guiConfigurationService.getVerticalDividerLocation();\n    }\n\n    /**\n     * @param location\n     * @see org.pdfsam.guiclient.configuration.services.GuiConfigurationService#setHorizontalDividerLocation(int)\n     */\n    public void setHorizontalDividerLocation(int location) {\n        guiConfigurationService.setHorizontalDividerLocation(location);\n    }\n\n    /**\n     * @param location\n     * @see org.pdfsam.guiclient.configuration.services.GuiConfigurationService#setVerticalDividerLocation(int)\n     */\n    public void setVerticalDividerLocation(int location) {\n        guiConfigurationService.setVerticalDividerLocation(location);\n    }\n\n    /**\n     * @return\n     * @see org.pdfsam.guiclient.configuration.services.GuiConfigurationService#getHorizontalDividerDimension()\n     */\n    public Dimension getHorizontalDividerDimension() {\n        return guiConfigurationService.getHorizontalDividerDimension();\n    }\n\n    /**\n     * @param horizontalDividerDimension\n     * @see org.pdfsam.guiclient.configuration.services.GuiConfigurationService#setHorizontalDividerDimension(java.awt.Dimension)\n     */\n    public void setHorizontalDividerDimension(Dimension horizontalDividerDimension) {\n        guiConfigurationService.setHorizontalDividerDimension(horizontalDividerDimension);\n    }\n\n    /**\n     * @return\n     * @see org.pdfsam.guiclient.configuration.services.GuiConfigurationService#getVerticalDividerDimension()\n     */\n    public Dimension getVerticalDividerDimension() {\n        return guiConfigurationService.getVerticalDividerDimension();\n    }\n\n    /**\n     * @param verticalDividerDimension\n     * @see org.pdfsam.guiclient.configuration.services.GuiConfigurationService#setVerticalDividerDimension(java.awt.Dimension)\n     */\n    public void setVerticalDividerDimension(Dimension verticalDividerDimension) {\n        guiConfigurationService.setVerticalDividerDimension(verticalDividerDimension);\n    }\n\n    /**\n     * @return\n     * @see org.pdfsam.guiclient.configuration.services.GuiConfigurationService#getSelectedPlugin()\n     */\n    public String getSelectedPlugin() {\n        return guiConfigurationService.getSelectedPlugin();\n    }\n\n    /**\n     * @param selectedPlugin\n     * @see org.pdfsam.guiclient.configuration.services.GuiConfigurationService#setSelectedPlugin(java.lang.String)\n     */\n    public void setSelectedPlugin(String selectedPlugin) {\n        guiConfigurationService.setSelectedPlugin(selectedPlugin);\n    }\n\n    /**\n     * @param envPath\n     * @see org.pdfsam.guiclient.configuration.services.ConfigurationService#addRecentEnvironment(java.lang.String)\n     */\n    public void addRecentEnvironment(String envPath) {\n        guiConfigurationService.addRecentEnvironment(envPath);\n    }\n\n    /**\n     * @return\n     * @see org.pdfsam.guiclient.configuration.services.ConfigurationService#getRecentEnvironments()\n     */\n    public Collection<String> getRecentEnvironments() {\n        return guiConfigurationService.getRecentEnvironments();\n    }\n}\n",
		"id": "EvoSuiteBenchmark/109_pdfsam/src/main/java/org/pdfsam/guiclient/configuration/GuiConfigurationTest1.java",
		"test_prompt": "// GuiConfigurationTest1.java\npackage org.pdfsam.guiclient.configuration;\n\nimport java.awt.Dimension;\nimport java.awt.Point;\nimport java.io.IOException;\nimport java.util.Collection;\nimport org.pdfsam.guiclient.configuration.services.ConfigurationServiceLocator;\nimport org.pdfsam.guiclient.configuration.services.GuiConfigurationService;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link GuiConfiguration}.\n* It contains ten unit test cases for the {@link GuiConfiguration#getInstance()} method.\n*/\nclass GuiConfigurationTest1 {"
	},
	{
		"original_code": "// GuiClient.java\n/*\r\n * Created on 08-Nov-2007\r\n * Copyright (C) 2006 by Andrea Vacondio.\r\n *\r\n * This program is free software; you can redistribute it and/or modify it under the terms of the \r\n * GNU General Public License as published by the Free Software Foundation; \r\n * either version 2 of the License.\r\n * This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; \r\n * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. \r\n * See the GNU General Public License for more details.\r\n * You should have received a copy of the GNU General Public License along with this program; \r\n * if not, write to the Free Software Foundation, Inc., \r\n *  59 Temple Place, Suite 330, Boston, MA 02111-1307 USA\r\n */\r\npackage org.pdfsam.guiclient;\r\n\r\nimport java.awt.Point;\r\nimport java.io.File;\r\nimport java.io.InputStream;\r\nimport java.lang.reflect.InvocationTargetException;\r\nimport java.lang.reflect.Method;\r\nimport java.net.URL;\r\nimport java.net.URLClassLoader;\r\nimport java.net.URLDecoder;\r\nimport java.util.Properties;\r\nimport org.apache.commons.lang.ArrayUtils;\r\nimport org.apache.log4j.Logger;\r\nimport org.pdfsam.guiclient.business.thumbnails.ThumbnailCreatorsRegisty;\r\nimport org.pdfsam.guiclient.configuration.Configuration;\r\nimport org.pdfsam.guiclient.configuration.GuiConfiguration;\r\nimport org.pdfsam.guiclient.gui.frames.JMainFrame;\r\nimport org.pdfsam.guiclient.utils.filters.JarFilter;\r\n\r\n/**\r\n * GUI Client for the console\r\n *\r\n * @author a.vacondio\r\n */\r\npublic class GuiClient {\r\n\r\n    private static final long serialVersionUID = -3608998690519362986L;\r\n\r\n    private static final Logger log = Logger.getLogger(GuiClient.class.getPackage().getName());\r\n\r\n    private static final String PROPERTY_FILE = \"pdfsam.properties\";\r\n\r\n    private static final String NO_GUI_RESTORE_ARG = \"-skipGui\";\r\n\r\n    public static final String AUTHOR = \"Andrea Vacondio\";\r\n\r\n    public static final String UNIXNAME = \"pdfsam\";\r\n\r\n    private static final String NAME = \"PDF Split and Merge\";\r\n\r\n    private static final String VERSION_TYPE_PROPERTY = \"pdfsam.version\";\r\n\r\n    private static final String VERSION_TYPE_DEFAULT = \"basic\";\r\n\r\n    private static final String VERSION_PROPERTY = \"pdfsam.jar.version\";\r\n\r\n    private static final String VERSION_DEFAULT = \"1.0.0\";\r\n\r\n    private static final String BUILDDATE_PROPERTY = \"pdfsam.builddate\";\r\n\r\n    private static final String BUILDDATE_DEFAULT = \"\";\r\n\r\n    private static final String BRANCH_PROPERTY = \"pdfsam.branch\";\r\n\r\n    private static final String BRANCH_DEFAULT = \"1\";\r\n\r\n    private static JMainFrame clientGUI;\r\n\r\n    private static Properties defaultProps = new Properties();\r\n\r\n    /**\r\n     * @param args\r\n     */\r\n    public static void main(String[] args) {\r\n        try {\r\n            loadApplicationProperties();\r\n            loadExtendedLibraries();\r\n            clientGUI = new JMainFrame();\r\n            initializeUserInterface(args.length > 0 && NO_GUI_RESTORE_ARG.equalsIgnoreCase(args[0]));\r\n            clientGUI.setVisible(true);\r\n            initializeExtendedState();\r\n        } catch (Throwable t) {\r\n            log.fatal(\"Error:\", t);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * load application properties\r\n     */\r\n    private static void loadApplicationProperties() {\r\n        try {\r\n            InputStream is = GuiClient.class.getClassLoader().getResourceAsStream(PROPERTY_FILE);\r\n            defaultProps.load(is);\r\n        } catch (Exception e) {\r\n            log.error(\"Unable to load pdfsam properties.\", e);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Loads the libraries in the \"ext\" subdirectory\r\n     */\r\n    private static void loadExtendedLibraries() {\r\n        try {\r\n            String configSearchPath = new File(URLDecoder.decode(GuiClient.class.getProtectionDomain().getCodeSource().getLocation().getPath(), \"UTF-8\")).getParent();\r\n            File currentDir = new File(configSearchPath, \"ext\");\r\n            File[] fileList = currentDir.listFiles(new JarFilter(false));\r\n            if (!ArrayUtils.isEmpty(fileList)) {\r\n                URLClassLoader urlClassLoader = (URLClassLoader) ClassLoader.getSystemClassLoader();\r\n                for (File currentFile : fileList) {\r\n                    addJar(currentFile.toURI().toURL(), urlClassLoader);\r\n                }\r\n                ThumbnailCreatorsRegisty.reload(urlClassLoader);\r\n            }\r\n        } catch (Exception e) {\r\n            log.error(\"Unable to load extended libraries.\", e);\r\n        }\r\n    }\r\n\r\n    private static void addJar(URL jarUrl, URLClassLoader loader) throws SecurityException, NoSuchMethodException, IllegalArgumentException, IllegalAccessException, InvocationTargetException {\r\n        Method method = URLClassLoader.class.getDeclaredMethod(\"addURL\", new Class[] { URL.class });\r\n        method.setAccessible(true);\r\n        method.invoke(loader, new Object[] { jarUrl });\r\n    }\r\n\r\n    /**\r\n     * @return application version\r\n     */\r\n    public static String getVersion() {\r\n        return defaultProps.getProperty(VERSION_PROPERTY, VERSION_DEFAULT);\r\n    }\r\n\r\n    /**\r\n     * @return application name\r\n     */\r\n    public static String getApplicationName() {\r\n        return NAME + \" \" + defaultProps.getProperty(VERSION_TYPE_PROPERTY, VERSION_TYPE_DEFAULT);\r\n    }\r\n\r\n    /**\r\n     * @return application version type (basic or enhanced)\r\n     */\r\n    public static String getVersionType() {\r\n        return defaultProps.getProperty(VERSION_TYPE_PROPERTY, VERSION_TYPE_DEFAULT);\r\n    }\r\n\r\n    /**\r\n     * @return application build date\r\n     */\r\n    public static String getBuildDate() {\r\n        return defaultProps.getProperty(BUILDDATE_PROPERTY, BUILDDATE_DEFAULT);\r\n    }\r\n\r\n    /**\r\n     * @return application branch\r\n     */\r\n    public static String getBranch() {\r\n        return defaultProps.getProperty(BRANCH_PROPERTY, BRANCH_DEFAULT);\r\n    }\r\n\r\n    private static void initializeExtendedState() {\r\n        clientGUI.setExtendedState(GuiConfiguration.getInstance().getExtendedState());\r\n    }\r\n\r\n    /**\r\n     * User interface initialization\r\n     */\r\n    private static void initializeUserInterface(boolean skipGui) {\r\n        if (!skipGui) {\r\n            if (GuiConfiguration.getInstance().getSize() != null) {\r\n                clientGUI.setSize(GuiConfiguration.getInstance().getSize());\r\n            }\r\n            Point locationOnScreen = GuiConfiguration.getInstance().getLocationOnScreen();\r\n            //see http://bugs.sun.com/bugdatabase/view_bug.do?bug_id=6189461\r\n            if (locationOnScreen != null && locationOnScreen.x != -32000 && locationOnScreen.y != -32000) {\r\n                clientGUI.setLocation(locationOnScreen);\r\n            }\r\n            if (GuiConfiguration.getInstance().getHorizontalDividerDimension() != null) {\r\n                clientGUI.setHorizontalDividerDimension(GuiConfiguration.getInstance().getHorizontalDividerDimension());\r\n            }\r\n            if (GuiConfiguration.getInstance().getHorizontalDividerLocation() > 0) {\r\n                clientGUI.setHorizontalDividerLocation(GuiConfiguration.getInstance().getHorizontalDividerLocation());\r\n            } else {\r\n                clientGUI.setHorizontalDividerLocation(155);\r\n            }\r\n            if (GuiConfiguration.getInstance().getVerticalDividerDimension() != null) {\r\n                clientGUI.setVerticalDividerDimension(GuiConfiguration.getInstance().getVerticalDividerDimension());\r\n            }\r\n            if (GuiConfiguration.getInstance().getVerticalDividerLocation() > 0) {\r\n                clientGUI.setVerticalDividerLocation(GuiConfiguration.getInstance().getVerticalDividerLocation());\r\n            }\r\n            String selectedPlugin = GuiConfiguration.getInstance().getSelectedPlugin();\r\n            if (selectedPlugin != null && selectedPlugin.length() > 0) {\r\n                // If a default environment is set, the plugin set on it has precedence\r\n                String defaultEnv = Configuration.getInstance().getDefaultEnvironment();\r\n                if (defaultEnv == null || defaultEnv.length() <= 0) {\r\n                    clientGUI.getTreePanel().setSelectedPlugin(selectedPlugin);\r\n                }\r\n            }\r\n        }\r\n        clientGUI.rebuildRecentEnvironmentsMenu();\r\n    }\r\n}\r\n",
		"id": "EvoSuiteBenchmark/109_pdfsam/src/main/java/org/pdfsam/guiclient/GuiClientTest0.java",
		"test_prompt": "// GuiClientTest0.java\npackage org.pdfsam.guiclient;\n\nimport java.awt.Point;\nimport java.io.File;\nimport java.io.InputStream;\nimport java.lang.reflect.InvocationTargetException;\nimport java.lang.reflect.Method;\nimport java.net.URL;\nimport java.net.URLClassLoader;\nimport java.net.URLDecoder;\nimport java.util.Properties;\nimport org.apache.commons.lang.ArrayUtils;\nimport org.apache.log4j.Logger;\nimport org.pdfsam.guiclient.business.thumbnails.ThumbnailCreatorsRegisty;\nimport org.pdfsam.guiclient.configuration.Configuration;\nimport org.pdfsam.guiclient.configuration.GuiConfiguration;\nimport org.pdfsam.guiclient.gui.frames.JMainFrame;\nimport org.pdfsam.guiclient.utils.filters.JarFilter;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link GuiClient}.\n* It contains ten unit test cases for the {@link GuiClient#getVersion()} method.\n*/\nclass GuiClientTest0 {"
	},
	{
		"original_code": "// GuiClient.java\n/*\r\n * Created on 08-Nov-2007\r\n * Copyright (C) 2006 by Andrea Vacondio.\r\n *\r\n * This program is free software; you can redistribute it and/or modify it under the terms of the \r\n * GNU General Public License as published by the Free Software Foundation; \r\n * either version 2 of the License.\r\n * This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; \r\n * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. \r\n * See the GNU General Public License for more details.\r\n * You should have received a copy of the GNU General Public License along with this program; \r\n * if not, write to the Free Software Foundation, Inc., \r\n *  59 Temple Place, Suite 330, Boston, MA 02111-1307 USA\r\n */\r\npackage org.pdfsam.guiclient;\r\n\r\nimport java.awt.Point;\r\nimport java.io.File;\r\nimport java.io.InputStream;\r\nimport java.lang.reflect.InvocationTargetException;\r\nimport java.lang.reflect.Method;\r\nimport java.net.URL;\r\nimport java.net.URLClassLoader;\r\nimport java.net.URLDecoder;\r\nimport java.util.Properties;\r\nimport org.apache.commons.lang.ArrayUtils;\r\nimport org.apache.log4j.Logger;\r\nimport org.pdfsam.guiclient.business.thumbnails.ThumbnailCreatorsRegisty;\r\nimport org.pdfsam.guiclient.configuration.Configuration;\r\nimport org.pdfsam.guiclient.configuration.GuiConfiguration;\r\nimport org.pdfsam.guiclient.gui.frames.JMainFrame;\r\nimport org.pdfsam.guiclient.utils.filters.JarFilter;\r\n\r\n/**\r\n * GUI Client for the console\r\n *\r\n * @author a.vacondio\r\n */\r\npublic class GuiClient {\r\n\r\n    private static final long serialVersionUID = -3608998690519362986L;\r\n\r\n    private static final Logger log = Logger.getLogger(GuiClient.class.getPackage().getName());\r\n\r\n    private static final String PROPERTY_FILE = \"pdfsam.properties\";\r\n\r\n    private static final String NO_GUI_RESTORE_ARG = \"-skipGui\";\r\n\r\n    public static final String AUTHOR = \"Andrea Vacondio\";\r\n\r\n    public static final String UNIXNAME = \"pdfsam\";\r\n\r\n    private static final String NAME = \"PDF Split and Merge\";\r\n\r\n    private static final String VERSION_TYPE_PROPERTY = \"pdfsam.version\";\r\n\r\n    private static final String VERSION_TYPE_DEFAULT = \"basic\";\r\n\r\n    private static final String VERSION_PROPERTY = \"pdfsam.jar.version\";\r\n\r\n    private static final String VERSION_DEFAULT = \"1.0.0\";\r\n\r\n    private static final String BUILDDATE_PROPERTY = \"pdfsam.builddate\";\r\n\r\n    private static final String BUILDDATE_DEFAULT = \"\";\r\n\r\n    private static final String BRANCH_PROPERTY = \"pdfsam.branch\";\r\n\r\n    private static final String BRANCH_DEFAULT = \"1\";\r\n\r\n    private static JMainFrame clientGUI;\r\n\r\n    private static Properties defaultProps = new Properties();\r\n\r\n    /**\r\n     * @param args\r\n     */\r\n    public static void main(String[] args) {\r\n        try {\r\n            loadApplicationProperties();\r\n            loadExtendedLibraries();\r\n            clientGUI = new JMainFrame();\r\n            initializeUserInterface(args.length > 0 && NO_GUI_RESTORE_ARG.equalsIgnoreCase(args[0]));\r\n            clientGUI.setVisible(true);\r\n            initializeExtendedState();\r\n        } catch (Throwable t) {\r\n            log.fatal(\"Error:\", t);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * load application properties\r\n     */\r\n    private static void loadApplicationProperties() {\r\n        try {\r\n            InputStream is = GuiClient.class.getClassLoader().getResourceAsStream(PROPERTY_FILE);\r\n            defaultProps.load(is);\r\n        } catch (Exception e) {\r\n            log.error(\"Unable to load pdfsam properties.\", e);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Loads the libraries in the \"ext\" subdirectory\r\n     */\r\n    private static void loadExtendedLibraries() {\r\n        try {\r\n            String configSearchPath = new File(URLDecoder.decode(GuiClient.class.getProtectionDomain().getCodeSource().getLocation().getPath(), \"UTF-8\")).getParent();\r\n            File currentDir = new File(configSearchPath, \"ext\");\r\n            File[] fileList = currentDir.listFiles(new JarFilter(false));\r\n            if (!ArrayUtils.isEmpty(fileList)) {\r\n                URLClassLoader urlClassLoader = (URLClassLoader) ClassLoader.getSystemClassLoader();\r\n                for (File currentFile : fileList) {\r\n                    addJar(currentFile.toURI().toURL(), urlClassLoader);\r\n                }\r\n                ThumbnailCreatorsRegisty.reload(urlClassLoader);\r\n            }\r\n        } catch (Exception e) {\r\n            log.error(\"Unable to load extended libraries.\", e);\r\n        }\r\n    }\r\n\r\n    private static void addJar(URL jarUrl, URLClassLoader loader) throws SecurityException, NoSuchMethodException, IllegalArgumentException, IllegalAccessException, InvocationTargetException {\r\n        Method method = URLClassLoader.class.getDeclaredMethod(\"addURL\", new Class[] { URL.class });\r\n        method.setAccessible(true);\r\n        method.invoke(loader, new Object[] { jarUrl });\r\n    }\r\n\r\n    /**\r\n     * @return application version\r\n     */\r\n    public static String getVersion() {\r\n        return defaultProps.getProperty(VERSION_PROPERTY, VERSION_DEFAULT);\r\n    }\r\n\r\n    /**\r\n     * @return application name\r\n     */\r\n    public static String getApplicationName() {\r\n        return NAME + \" \" + defaultProps.getProperty(VERSION_TYPE_PROPERTY, VERSION_TYPE_DEFAULT);\r\n    }\r\n\r\n    /**\r\n     * @return application version type (basic or enhanced)\r\n     */\r\n    public static String getVersionType() {\r\n        return defaultProps.getProperty(VERSION_TYPE_PROPERTY, VERSION_TYPE_DEFAULT);\r\n    }\r\n\r\n    /**\r\n     * @return application build date\r\n     */\r\n    public static String getBuildDate() {\r\n        return defaultProps.getProperty(BUILDDATE_PROPERTY, BUILDDATE_DEFAULT);\r\n    }\r\n\r\n    /**\r\n     * @return application branch\r\n     */\r\n    public static String getBranch() {\r\n        return defaultProps.getProperty(BRANCH_PROPERTY, BRANCH_DEFAULT);\r\n    }\r\n\r\n    private static void initializeExtendedState() {\r\n        clientGUI.setExtendedState(GuiConfiguration.getInstance().getExtendedState());\r\n    }\r\n\r\n    /**\r\n     * User interface initialization\r\n     */\r\n    private static void initializeUserInterface(boolean skipGui) {\r\n        if (!skipGui) {\r\n            if (GuiConfiguration.getInstance().getSize() != null) {\r\n                clientGUI.setSize(GuiConfiguration.getInstance().getSize());\r\n            }\r\n            Point locationOnScreen = GuiConfiguration.getInstance().getLocationOnScreen();\r\n            //see http://bugs.sun.com/bugdatabase/view_bug.do?bug_id=6189461\r\n            if (locationOnScreen != null && locationOnScreen.x != -32000 && locationOnScreen.y != -32000) {\r\n                clientGUI.setLocation(locationOnScreen);\r\n            }\r\n            if (GuiConfiguration.getInstance().getHorizontalDividerDimension() != null) {\r\n                clientGUI.setHorizontalDividerDimension(GuiConfiguration.getInstance().getHorizontalDividerDimension());\r\n            }\r\n            if (GuiConfiguration.getInstance().getHorizontalDividerLocation() > 0) {\r\n                clientGUI.setHorizontalDividerLocation(GuiConfiguration.getInstance().getHorizontalDividerLocation());\r\n            } else {\r\n                clientGUI.setHorizontalDividerLocation(155);\r\n            }\r\n            if (GuiConfiguration.getInstance().getVerticalDividerDimension() != null) {\r\n                clientGUI.setVerticalDividerDimension(GuiConfiguration.getInstance().getVerticalDividerDimension());\r\n            }\r\n            if (GuiConfiguration.getInstance().getVerticalDividerLocation() > 0) {\r\n                clientGUI.setVerticalDividerLocation(GuiConfiguration.getInstance().getVerticalDividerLocation());\r\n            }\r\n            String selectedPlugin = GuiConfiguration.getInstance().getSelectedPlugin();\r\n            if (selectedPlugin != null && selectedPlugin.length() > 0) {\r\n                // If a default environment is set, the plugin set on it has precedence\r\n                String defaultEnv = Configuration.getInstance().getDefaultEnvironment();\r\n                if (defaultEnv == null || defaultEnv.length() <= 0) {\r\n                    clientGUI.getTreePanel().setSelectedPlugin(selectedPlugin);\r\n                }\r\n            }\r\n        }\r\n        clientGUI.rebuildRecentEnvironmentsMenu();\r\n    }\r\n}\r\n",
		"id": "EvoSuiteBenchmark/109_pdfsam/src/main/java/org/pdfsam/guiclient/GuiClientTest1.java",
		"test_prompt": "// GuiClientTest1.java\npackage org.pdfsam.guiclient;\n\nimport java.awt.Point;\nimport java.io.File;\nimport java.io.InputStream;\nimport java.lang.reflect.InvocationTargetException;\nimport java.lang.reflect.Method;\nimport java.net.URL;\nimport java.net.URLClassLoader;\nimport java.net.URLDecoder;\nimport java.util.Properties;\nimport org.apache.commons.lang.ArrayUtils;\nimport org.apache.log4j.Logger;\nimport org.pdfsam.guiclient.business.thumbnails.ThumbnailCreatorsRegisty;\nimport org.pdfsam.guiclient.configuration.Configuration;\nimport org.pdfsam.guiclient.configuration.GuiConfiguration;\nimport org.pdfsam.guiclient.gui.frames.JMainFrame;\nimport org.pdfsam.guiclient.utils.filters.JarFilter;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link GuiClient}.\n* It contains ten unit test cases for the {@link GuiClient#getApplicationName()} method.\n*/\nclass GuiClientTest1 {"
	},
	{
		"original_code": "// GuiClient.java\n/*\r\n * Created on 08-Nov-2007\r\n * Copyright (C) 2006 by Andrea Vacondio.\r\n *\r\n * This program is free software; you can redistribute it and/or modify it under the terms of the \r\n * GNU General Public License as published by the Free Software Foundation; \r\n * either version 2 of the License.\r\n * This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; \r\n * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. \r\n * See the GNU General Public License for more details.\r\n * You should have received a copy of the GNU General Public License along with this program; \r\n * if not, write to the Free Software Foundation, Inc., \r\n *  59 Temple Place, Suite 330, Boston, MA 02111-1307 USA\r\n */\r\npackage org.pdfsam.guiclient;\r\n\r\nimport java.awt.Point;\r\nimport java.io.File;\r\nimport java.io.InputStream;\r\nimport java.lang.reflect.InvocationTargetException;\r\nimport java.lang.reflect.Method;\r\nimport java.net.URL;\r\nimport java.net.URLClassLoader;\r\nimport java.net.URLDecoder;\r\nimport java.util.Properties;\r\nimport org.apache.commons.lang.ArrayUtils;\r\nimport org.apache.log4j.Logger;\r\nimport org.pdfsam.guiclient.business.thumbnails.ThumbnailCreatorsRegisty;\r\nimport org.pdfsam.guiclient.configuration.Configuration;\r\nimport org.pdfsam.guiclient.configuration.GuiConfiguration;\r\nimport org.pdfsam.guiclient.gui.frames.JMainFrame;\r\nimport org.pdfsam.guiclient.utils.filters.JarFilter;\r\n\r\n/**\r\n * GUI Client for the console\r\n *\r\n * @author a.vacondio\r\n */\r\npublic class GuiClient {\r\n\r\n    private static final long serialVersionUID = -3608998690519362986L;\r\n\r\n    private static final Logger log = Logger.getLogger(GuiClient.class.getPackage().getName());\r\n\r\n    private static final String PROPERTY_FILE = \"pdfsam.properties\";\r\n\r\n    private static final String NO_GUI_RESTORE_ARG = \"-skipGui\";\r\n\r\n    public static final String AUTHOR = \"Andrea Vacondio\";\r\n\r\n    public static final String UNIXNAME = \"pdfsam\";\r\n\r\n    private static final String NAME = \"PDF Split and Merge\";\r\n\r\n    private static final String VERSION_TYPE_PROPERTY = \"pdfsam.version\";\r\n\r\n    private static final String VERSION_TYPE_DEFAULT = \"basic\";\r\n\r\n    private static final String VERSION_PROPERTY = \"pdfsam.jar.version\";\r\n\r\n    private static final String VERSION_DEFAULT = \"1.0.0\";\r\n\r\n    private static final String BUILDDATE_PROPERTY = \"pdfsam.builddate\";\r\n\r\n    private static final String BUILDDATE_DEFAULT = \"\";\r\n\r\n    private static final String BRANCH_PROPERTY = \"pdfsam.branch\";\r\n\r\n    private static final String BRANCH_DEFAULT = \"1\";\r\n\r\n    private static JMainFrame clientGUI;\r\n\r\n    private static Properties defaultProps = new Properties();\r\n\r\n    /**\r\n     * @param args\r\n     */\r\n    public static void main(String[] args) {\r\n        try {\r\n            loadApplicationProperties();\r\n            loadExtendedLibraries();\r\n            clientGUI = new JMainFrame();\r\n            initializeUserInterface(args.length > 0 && NO_GUI_RESTORE_ARG.equalsIgnoreCase(args[0]));\r\n            clientGUI.setVisible(true);\r\n            initializeExtendedState();\r\n        } catch (Throwable t) {\r\n            log.fatal(\"Error:\", t);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * load application properties\r\n     */\r\n    private static void loadApplicationProperties() {\r\n        try {\r\n            InputStream is = GuiClient.class.getClassLoader().getResourceAsStream(PROPERTY_FILE);\r\n            defaultProps.load(is);\r\n        } catch (Exception e) {\r\n            log.error(\"Unable to load pdfsam properties.\", e);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Loads the libraries in the \"ext\" subdirectory\r\n     */\r\n    private static void loadExtendedLibraries() {\r\n        try {\r\n            String configSearchPath = new File(URLDecoder.decode(GuiClient.class.getProtectionDomain().getCodeSource().getLocation().getPath(), \"UTF-8\")).getParent();\r\n            File currentDir = new File(configSearchPath, \"ext\");\r\n            File[] fileList = currentDir.listFiles(new JarFilter(false));\r\n            if (!ArrayUtils.isEmpty(fileList)) {\r\n                URLClassLoader urlClassLoader = (URLClassLoader) ClassLoader.getSystemClassLoader();\r\n                for (File currentFile : fileList) {\r\n                    addJar(currentFile.toURI().toURL(), urlClassLoader);\r\n                }\r\n                ThumbnailCreatorsRegisty.reload(urlClassLoader);\r\n            }\r\n        } catch (Exception e) {\r\n            log.error(\"Unable to load extended libraries.\", e);\r\n        }\r\n    }\r\n\r\n    private static void addJar(URL jarUrl, URLClassLoader loader) throws SecurityException, NoSuchMethodException, IllegalArgumentException, IllegalAccessException, InvocationTargetException {\r\n        Method method = URLClassLoader.class.getDeclaredMethod(\"addURL\", new Class[] { URL.class });\r\n        method.setAccessible(true);\r\n        method.invoke(loader, new Object[] { jarUrl });\r\n    }\r\n\r\n    /**\r\n     * @return application version\r\n     */\r\n    public static String getVersion() {\r\n        return defaultProps.getProperty(VERSION_PROPERTY, VERSION_DEFAULT);\r\n    }\r\n\r\n    /**\r\n     * @return application name\r\n     */\r\n    public static String getApplicationName() {\r\n        return NAME + \" \" + defaultProps.getProperty(VERSION_TYPE_PROPERTY, VERSION_TYPE_DEFAULT);\r\n    }\r\n\r\n    /**\r\n     * @return application version type (basic or enhanced)\r\n     */\r\n    public static String getVersionType() {\r\n        return defaultProps.getProperty(VERSION_TYPE_PROPERTY, VERSION_TYPE_DEFAULT);\r\n    }\r\n\r\n    /**\r\n     * @return application build date\r\n     */\r\n    public static String getBuildDate() {\r\n        return defaultProps.getProperty(BUILDDATE_PROPERTY, BUILDDATE_DEFAULT);\r\n    }\r\n\r\n    /**\r\n     * @return application branch\r\n     */\r\n    public static String getBranch() {\r\n        return defaultProps.getProperty(BRANCH_PROPERTY, BRANCH_DEFAULT);\r\n    }\r\n\r\n    private static void initializeExtendedState() {\r\n        clientGUI.setExtendedState(GuiConfiguration.getInstance().getExtendedState());\r\n    }\r\n\r\n    /**\r\n     * User interface initialization\r\n     */\r\n    private static void initializeUserInterface(boolean skipGui) {\r\n        if (!skipGui) {\r\n            if (GuiConfiguration.getInstance().getSize() != null) {\r\n                clientGUI.setSize(GuiConfiguration.getInstance().getSize());\r\n            }\r\n            Point locationOnScreen = GuiConfiguration.getInstance().getLocationOnScreen();\r\n            //see http://bugs.sun.com/bugdatabase/view_bug.do?bug_id=6189461\r\n            if (locationOnScreen != null && locationOnScreen.x != -32000 && locationOnScreen.y != -32000) {\r\n                clientGUI.setLocation(locationOnScreen);\r\n            }\r\n            if (GuiConfiguration.getInstance().getHorizontalDividerDimension() != null) {\r\n                clientGUI.setHorizontalDividerDimension(GuiConfiguration.getInstance().getHorizontalDividerDimension());\r\n            }\r\n            if (GuiConfiguration.getInstance().getHorizontalDividerLocation() > 0) {\r\n                clientGUI.setHorizontalDividerLocation(GuiConfiguration.getInstance().getHorizontalDividerLocation());\r\n            } else {\r\n                clientGUI.setHorizontalDividerLocation(155);\r\n            }\r\n            if (GuiConfiguration.getInstance().getVerticalDividerDimension() != null) {\r\n                clientGUI.setVerticalDividerDimension(GuiConfiguration.getInstance().getVerticalDividerDimension());\r\n            }\r\n            if (GuiConfiguration.getInstance().getVerticalDividerLocation() > 0) {\r\n                clientGUI.setVerticalDividerLocation(GuiConfiguration.getInstance().getVerticalDividerLocation());\r\n            }\r\n            String selectedPlugin = GuiConfiguration.getInstance().getSelectedPlugin();\r\n            if (selectedPlugin != null && selectedPlugin.length() > 0) {\r\n                // If a default environment is set, the plugin set on it has precedence\r\n                String defaultEnv = Configuration.getInstance().getDefaultEnvironment();\r\n                if (defaultEnv == null || defaultEnv.length() <= 0) {\r\n                    clientGUI.getTreePanel().setSelectedPlugin(selectedPlugin);\r\n                }\r\n            }\r\n        }\r\n        clientGUI.rebuildRecentEnvironmentsMenu();\r\n    }\r\n}\r\n",
		"id": "EvoSuiteBenchmark/109_pdfsam/src/main/java/org/pdfsam/guiclient/GuiClientTest2.java",
		"test_prompt": "// GuiClientTest2.java\npackage org.pdfsam.guiclient;\n\nimport java.awt.Point;\nimport java.io.File;\nimport java.io.InputStream;\nimport java.lang.reflect.InvocationTargetException;\nimport java.lang.reflect.Method;\nimport java.net.URL;\nimport java.net.URLClassLoader;\nimport java.net.URLDecoder;\nimport java.util.Properties;\nimport org.apache.commons.lang.ArrayUtils;\nimport org.apache.log4j.Logger;\nimport org.pdfsam.guiclient.business.thumbnails.ThumbnailCreatorsRegisty;\nimport org.pdfsam.guiclient.configuration.Configuration;\nimport org.pdfsam.guiclient.configuration.GuiConfiguration;\nimport org.pdfsam.guiclient.gui.frames.JMainFrame;\nimport org.pdfsam.guiclient.utils.filters.JarFilter;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link GuiClient}.\n* It contains ten unit test cases for the {@link GuiClient#getVersionType()} method.\n*/\nclass GuiClientTest2 {"
	},
	{
		"original_code": "// GuiClient.java\n/*\r\n * Created on 08-Nov-2007\r\n * Copyright (C) 2006 by Andrea Vacondio.\r\n *\r\n * This program is free software; you can redistribute it and/or modify it under the terms of the \r\n * GNU General Public License as published by the Free Software Foundation; \r\n * either version 2 of the License.\r\n * This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; \r\n * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. \r\n * See the GNU General Public License for more details.\r\n * You should have received a copy of the GNU General Public License along with this program; \r\n * if not, write to the Free Software Foundation, Inc., \r\n *  59 Temple Place, Suite 330, Boston, MA 02111-1307 USA\r\n */\r\npackage org.pdfsam.guiclient;\r\n\r\nimport java.awt.Point;\r\nimport java.io.File;\r\nimport java.io.InputStream;\r\nimport java.lang.reflect.InvocationTargetException;\r\nimport java.lang.reflect.Method;\r\nimport java.net.URL;\r\nimport java.net.URLClassLoader;\r\nimport java.net.URLDecoder;\r\nimport java.util.Properties;\r\nimport org.apache.commons.lang.ArrayUtils;\r\nimport org.apache.log4j.Logger;\r\nimport org.pdfsam.guiclient.business.thumbnails.ThumbnailCreatorsRegisty;\r\nimport org.pdfsam.guiclient.configuration.Configuration;\r\nimport org.pdfsam.guiclient.configuration.GuiConfiguration;\r\nimport org.pdfsam.guiclient.gui.frames.JMainFrame;\r\nimport org.pdfsam.guiclient.utils.filters.JarFilter;\r\n\r\n/**\r\n * GUI Client for the console\r\n *\r\n * @author a.vacondio\r\n */\r\npublic class GuiClient {\r\n\r\n    private static final long serialVersionUID = -3608998690519362986L;\r\n\r\n    private static final Logger log = Logger.getLogger(GuiClient.class.getPackage().getName());\r\n\r\n    private static final String PROPERTY_FILE = \"pdfsam.properties\";\r\n\r\n    private static final String NO_GUI_RESTORE_ARG = \"-skipGui\";\r\n\r\n    public static final String AUTHOR = \"Andrea Vacondio\";\r\n\r\n    public static final String UNIXNAME = \"pdfsam\";\r\n\r\n    private static final String NAME = \"PDF Split and Merge\";\r\n\r\n    private static final String VERSION_TYPE_PROPERTY = \"pdfsam.version\";\r\n\r\n    private static final String VERSION_TYPE_DEFAULT = \"basic\";\r\n\r\n    private static final String VERSION_PROPERTY = \"pdfsam.jar.version\";\r\n\r\n    private static final String VERSION_DEFAULT = \"1.0.0\";\r\n\r\n    private static final String BUILDDATE_PROPERTY = \"pdfsam.builddate\";\r\n\r\n    private static final String BUILDDATE_DEFAULT = \"\";\r\n\r\n    private static final String BRANCH_PROPERTY = \"pdfsam.branch\";\r\n\r\n    private static final String BRANCH_DEFAULT = \"1\";\r\n\r\n    private static JMainFrame clientGUI;\r\n\r\n    private static Properties defaultProps = new Properties();\r\n\r\n    /**\r\n     * @param args\r\n     */\r\n    public static void main(String[] args) {\r\n        try {\r\n            loadApplicationProperties();\r\n            loadExtendedLibraries();\r\n            clientGUI = new JMainFrame();\r\n            initializeUserInterface(args.length > 0 && NO_GUI_RESTORE_ARG.equalsIgnoreCase(args[0]));\r\n            clientGUI.setVisible(true);\r\n            initializeExtendedState();\r\n        } catch (Throwable t) {\r\n            log.fatal(\"Error:\", t);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * load application properties\r\n     */\r\n    private static void loadApplicationProperties() {\r\n        try {\r\n            InputStream is = GuiClient.class.getClassLoader().getResourceAsStream(PROPERTY_FILE);\r\n            defaultProps.load(is);\r\n        } catch (Exception e) {\r\n            log.error(\"Unable to load pdfsam properties.\", e);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Loads the libraries in the \"ext\" subdirectory\r\n     */\r\n    private static void loadExtendedLibraries() {\r\n        try {\r\n            String configSearchPath = new File(URLDecoder.decode(GuiClient.class.getProtectionDomain().getCodeSource().getLocation().getPath(), \"UTF-8\")).getParent();\r\n            File currentDir = new File(configSearchPath, \"ext\");\r\n            File[] fileList = currentDir.listFiles(new JarFilter(false));\r\n            if (!ArrayUtils.isEmpty(fileList)) {\r\n                URLClassLoader urlClassLoader = (URLClassLoader) ClassLoader.getSystemClassLoader();\r\n                for (File currentFile : fileList) {\r\n                    addJar(currentFile.toURI().toURL(), urlClassLoader);\r\n                }\r\n                ThumbnailCreatorsRegisty.reload(urlClassLoader);\r\n            }\r\n        } catch (Exception e) {\r\n            log.error(\"Unable to load extended libraries.\", e);\r\n        }\r\n    }\r\n\r\n    private static void addJar(URL jarUrl, URLClassLoader loader) throws SecurityException, NoSuchMethodException, IllegalArgumentException, IllegalAccessException, InvocationTargetException {\r\n        Method method = URLClassLoader.class.getDeclaredMethod(\"addURL\", new Class[] { URL.class });\r\n        method.setAccessible(true);\r\n        method.invoke(loader, new Object[] { jarUrl });\r\n    }\r\n\r\n    /**\r\n     * @return application version\r\n     */\r\n    public static String getVersion() {\r\n        return defaultProps.getProperty(VERSION_PROPERTY, VERSION_DEFAULT);\r\n    }\r\n\r\n    /**\r\n     * @return application name\r\n     */\r\n    public static String getApplicationName() {\r\n        return NAME + \" \" + defaultProps.getProperty(VERSION_TYPE_PROPERTY, VERSION_TYPE_DEFAULT);\r\n    }\r\n\r\n    /**\r\n     * @return application version type (basic or enhanced)\r\n     */\r\n    public static String getVersionType() {\r\n        return defaultProps.getProperty(VERSION_TYPE_PROPERTY, VERSION_TYPE_DEFAULT);\r\n    }\r\n\r\n    /**\r\n     * @return application build date\r\n     */\r\n    public static String getBuildDate() {\r\n        return defaultProps.getProperty(BUILDDATE_PROPERTY, BUILDDATE_DEFAULT);\r\n    }\r\n\r\n    /**\r\n     * @return application branch\r\n     */\r\n    public static String getBranch() {\r\n        return defaultProps.getProperty(BRANCH_PROPERTY, BRANCH_DEFAULT);\r\n    }\r\n\r\n    private static void initializeExtendedState() {\r\n        clientGUI.setExtendedState(GuiConfiguration.getInstance().getExtendedState());\r\n    }\r\n\r\n    /**\r\n     * User interface initialization\r\n     */\r\n    private static void initializeUserInterface(boolean skipGui) {\r\n        if (!skipGui) {\r\n            if (GuiConfiguration.getInstance().getSize() != null) {\r\n                clientGUI.setSize(GuiConfiguration.getInstance().getSize());\r\n            }\r\n            Point locationOnScreen = GuiConfiguration.getInstance().getLocationOnScreen();\r\n            //see http://bugs.sun.com/bugdatabase/view_bug.do?bug_id=6189461\r\n            if (locationOnScreen != null && locationOnScreen.x != -32000 && locationOnScreen.y != -32000) {\r\n                clientGUI.setLocation(locationOnScreen);\r\n            }\r\n            if (GuiConfiguration.getInstance().getHorizontalDividerDimension() != null) {\r\n                clientGUI.setHorizontalDividerDimension(GuiConfiguration.getInstance().getHorizontalDividerDimension());\r\n            }\r\n            if (GuiConfiguration.getInstance().getHorizontalDividerLocation() > 0) {\r\n                clientGUI.setHorizontalDividerLocation(GuiConfiguration.getInstance().getHorizontalDividerLocation());\r\n            } else {\r\n                clientGUI.setHorizontalDividerLocation(155);\r\n            }\r\n            if (GuiConfiguration.getInstance().getVerticalDividerDimension() != null) {\r\n                clientGUI.setVerticalDividerDimension(GuiConfiguration.getInstance().getVerticalDividerDimension());\r\n            }\r\n            if (GuiConfiguration.getInstance().getVerticalDividerLocation() > 0) {\r\n                clientGUI.setVerticalDividerLocation(GuiConfiguration.getInstance().getVerticalDividerLocation());\r\n            }\r\n            String selectedPlugin = GuiConfiguration.getInstance().getSelectedPlugin();\r\n            if (selectedPlugin != null && selectedPlugin.length() > 0) {\r\n                // If a default environment is set, the plugin set on it has precedence\r\n                String defaultEnv = Configuration.getInstance().getDefaultEnvironment();\r\n                if (defaultEnv == null || defaultEnv.length() <= 0) {\r\n                    clientGUI.getTreePanel().setSelectedPlugin(selectedPlugin);\r\n                }\r\n            }\r\n        }\r\n        clientGUI.rebuildRecentEnvironmentsMenu();\r\n    }\r\n}\r\n",
		"id": "EvoSuiteBenchmark/109_pdfsam/src/main/java/org/pdfsam/guiclient/GuiClientTest3.java",
		"test_prompt": "// GuiClientTest3.java\npackage org.pdfsam.guiclient;\n\nimport java.awt.Point;\nimport java.io.File;\nimport java.io.InputStream;\nimport java.lang.reflect.InvocationTargetException;\nimport java.lang.reflect.Method;\nimport java.net.URL;\nimport java.net.URLClassLoader;\nimport java.net.URLDecoder;\nimport java.util.Properties;\nimport org.apache.commons.lang.ArrayUtils;\nimport org.apache.log4j.Logger;\nimport org.pdfsam.guiclient.business.thumbnails.ThumbnailCreatorsRegisty;\nimport org.pdfsam.guiclient.configuration.Configuration;\nimport org.pdfsam.guiclient.configuration.GuiConfiguration;\nimport org.pdfsam.guiclient.gui.frames.JMainFrame;\nimport org.pdfsam.guiclient.utils.filters.JarFilter;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link GuiClient}.\n* It contains ten unit test cases for the {@link GuiClient#getBuildDate()} method.\n*/\nclass GuiClientTest3 {"
	},
	{
		"original_code": "// GuiClient.java\n/*\r\n * Created on 08-Nov-2007\r\n * Copyright (C) 2006 by Andrea Vacondio.\r\n *\r\n * This program is free software; you can redistribute it and/or modify it under the terms of the \r\n * GNU General Public License as published by the Free Software Foundation; \r\n * either version 2 of the License.\r\n * This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; \r\n * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. \r\n * See the GNU General Public License for more details.\r\n * You should have received a copy of the GNU General Public License along with this program; \r\n * if not, write to the Free Software Foundation, Inc., \r\n *  59 Temple Place, Suite 330, Boston, MA 02111-1307 USA\r\n */\r\npackage org.pdfsam.guiclient;\r\n\r\nimport java.awt.Point;\r\nimport java.io.File;\r\nimport java.io.InputStream;\r\nimport java.lang.reflect.InvocationTargetException;\r\nimport java.lang.reflect.Method;\r\nimport java.net.URL;\r\nimport java.net.URLClassLoader;\r\nimport java.net.URLDecoder;\r\nimport java.util.Properties;\r\nimport org.apache.commons.lang.ArrayUtils;\r\nimport org.apache.log4j.Logger;\r\nimport org.pdfsam.guiclient.business.thumbnails.ThumbnailCreatorsRegisty;\r\nimport org.pdfsam.guiclient.configuration.Configuration;\r\nimport org.pdfsam.guiclient.configuration.GuiConfiguration;\r\nimport org.pdfsam.guiclient.gui.frames.JMainFrame;\r\nimport org.pdfsam.guiclient.utils.filters.JarFilter;\r\n\r\n/**\r\n * GUI Client for the console\r\n *\r\n * @author a.vacondio\r\n */\r\npublic class GuiClient {\r\n\r\n    private static final long serialVersionUID = -3608998690519362986L;\r\n\r\n    private static final Logger log = Logger.getLogger(GuiClient.class.getPackage().getName());\r\n\r\n    private static final String PROPERTY_FILE = \"pdfsam.properties\";\r\n\r\n    private static final String NO_GUI_RESTORE_ARG = \"-skipGui\";\r\n\r\n    public static final String AUTHOR = \"Andrea Vacondio\";\r\n\r\n    public static final String UNIXNAME = \"pdfsam\";\r\n\r\n    private static final String NAME = \"PDF Split and Merge\";\r\n\r\n    private static final String VERSION_TYPE_PROPERTY = \"pdfsam.version\";\r\n\r\n    private static final String VERSION_TYPE_DEFAULT = \"basic\";\r\n\r\n    private static final String VERSION_PROPERTY = \"pdfsam.jar.version\";\r\n\r\n    private static final String VERSION_DEFAULT = \"1.0.0\";\r\n\r\n    private static final String BUILDDATE_PROPERTY = \"pdfsam.builddate\";\r\n\r\n    private static final String BUILDDATE_DEFAULT = \"\";\r\n\r\n    private static final String BRANCH_PROPERTY = \"pdfsam.branch\";\r\n\r\n    private static final String BRANCH_DEFAULT = \"1\";\r\n\r\n    private static JMainFrame clientGUI;\r\n\r\n    private static Properties defaultProps = new Properties();\r\n\r\n    /**\r\n     * @param args\r\n     */\r\n    public static void main(String[] args) {\r\n        try {\r\n            loadApplicationProperties();\r\n            loadExtendedLibraries();\r\n            clientGUI = new JMainFrame();\r\n            initializeUserInterface(args.length > 0 && NO_GUI_RESTORE_ARG.equalsIgnoreCase(args[0]));\r\n            clientGUI.setVisible(true);\r\n            initializeExtendedState();\r\n        } catch (Throwable t) {\r\n            log.fatal(\"Error:\", t);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * load application properties\r\n     */\r\n    private static void loadApplicationProperties() {\r\n        try {\r\n            InputStream is = GuiClient.class.getClassLoader().getResourceAsStream(PROPERTY_FILE);\r\n            defaultProps.load(is);\r\n        } catch (Exception e) {\r\n            log.error(\"Unable to load pdfsam properties.\", e);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Loads the libraries in the \"ext\" subdirectory\r\n     */\r\n    private static void loadExtendedLibraries() {\r\n        try {\r\n            String configSearchPath = new File(URLDecoder.decode(GuiClient.class.getProtectionDomain().getCodeSource().getLocation().getPath(), \"UTF-8\")).getParent();\r\n            File currentDir = new File(configSearchPath, \"ext\");\r\n            File[] fileList = currentDir.listFiles(new JarFilter(false));\r\n            if (!ArrayUtils.isEmpty(fileList)) {\r\n                URLClassLoader urlClassLoader = (URLClassLoader) ClassLoader.getSystemClassLoader();\r\n                for (File currentFile : fileList) {\r\n                    addJar(currentFile.toURI().toURL(), urlClassLoader);\r\n                }\r\n                ThumbnailCreatorsRegisty.reload(urlClassLoader);\r\n            }\r\n        } catch (Exception e) {\r\n            log.error(\"Unable to load extended libraries.\", e);\r\n        }\r\n    }\r\n\r\n    private static void addJar(URL jarUrl, URLClassLoader loader) throws SecurityException, NoSuchMethodException, IllegalArgumentException, IllegalAccessException, InvocationTargetException {\r\n        Method method = URLClassLoader.class.getDeclaredMethod(\"addURL\", new Class[] { URL.class });\r\n        method.setAccessible(true);\r\n        method.invoke(loader, new Object[] { jarUrl });\r\n    }\r\n\r\n    /**\r\n     * @return application version\r\n     */\r\n    public static String getVersion() {\r\n        return defaultProps.getProperty(VERSION_PROPERTY, VERSION_DEFAULT);\r\n    }\r\n\r\n    /**\r\n     * @return application name\r\n     */\r\n    public static String getApplicationName() {\r\n        return NAME + \" \" + defaultProps.getProperty(VERSION_TYPE_PROPERTY, VERSION_TYPE_DEFAULT);\r\n    }\r\n\r\n    /**\r\n     * @return application version type (basic or enhanced)\r\n     */\r\n    public static String getVersionType() {\r\n        return defaultProps.getProperty(VERSION_TYPE_PROPERTY, VERSION_TYPE_DEFAULT);\r\n    }\r\n\r\n    /**\r\n     * @return application build date\r\n     */\r\n    public static String getBuildDate() {\r\n        return defaultProps.getProperty(BUILDDATE_PROPERTY, BUILDDATE_DEFAULT);\r\n    }\r\n\r\n    /**\r\n     * @return application branch\r\n     */\r\n    public static String getBranch() {\r\n        return defaultProps.getProperty(BRANCH_PROPERTY, BRANCH_DEFAULT);\r\n    }\r\n\r\n    private static void initializeExtendedState() {\r\n        clientGUI.setExtendedState(GuiConfiguration.getInstance().getExtendedState());\r\n    }\r\n\r\n    /**\r\n     * User interface initialization\r\n     */\r\n    private static void initializeUserInterface(boolean skipGui) {\r\n        if (!skipGui) {\r\n            if (GuiConfiguration.getInstance().getSize() != null) {\r\n                clientGUI.setSize(GuiConfiguration.getInstance().getSize());\r\n            }\r\n            Point locationOnScreen = GuiConfiguration.getInstance().getLocationOnScreen();\r\n            //see http://bugs.sun.com/bugdatabase/view_bug.do?bug_id=6189461\r\n            if (locationOnScreen != null && locationOnScreen.x != -32000 && locationOnScreen.y != -32000) {\r\n                clientGUI.setLocation(locationOnScreen);\r\n            }\r\n            if (GuiConfiguration.getInstance().getHorizontalDividerDimension() != null) {\r\n                clientGUI.setHorizontalDividerDimension(GuiConfiguration.getInstance().getHorizontalDividerDimension());\r\n            }\r\n            if (GuiConfiguration.getInstance().getHorizontalDividerLocation() > 0) {\r\n                clientGUI.setHorizontalDividerLocation(GuiConfiguration.getInstance().getHorizontalDividerLocation());\r\n            } else {\r\n                clientGUI.setHorizontalDividerLocation(155);\r\n            }\r\n            if (GuiConfiguration.getInstance().getVerticalDividerDimension() != null) {\r\n                clientGUI.setVerticalDividerDimension(GuiConfiguration.getInstance().getVerticalDividerDimension());\r\n            }\r\n            if (GuiConfiguration.getInstance().getVerticalDividerLocation() > 0) {\r\n                clientGUI.setVerticalDividerLocation(GuiConfiguration.getInstance().getVerticalDividerLocation());\r\n            }\r\n            String selectedPlugin = GuiConfiguration.getInstance().getSelectedPlugin();\r\n            if (selectedPlugin != null && selectedPlugin.length() > 0) {\r\n                // If a default environment is set, the plugin set on it has precedence\r\n                String defaultEnv = Configuration.getInstance().getDefaultEnvironment();\r\n                if (defaultEnv == null || defaultEnv.length() <= 0) {\r\n                    clientGUI.getTreePanel().setSelectedPlugin(selectedPlugin);\r\n                }\r\n            }\r\n        }\r\n        clientGUI.rebuildRecentEnvironmentsMenu();\r\n    }\r\n}\r\n",
		"id": "EvoSuiteBenchmark/109_pdfsam/src/main/java/org/pdfsam/guiclient/GuiClientTest4.java",
		"test_prompt": "// GuiClientTest4.java\npackage org.pdfsam.guiclient;\n\nimport java.awt.Point;\nimport java.io.File;\nimport java.io.InputStream;\nimport java.lang.reflect.InvocationTargetException;\nimport java.lang.reflect.Method;\nimport java.net.URL;\nimport java.net.URLClassLoader;\nimport java.net.URLDecoder;\nimport java.util.Properties;\nimport org.apache.commons.lang.ArrayUtils;\nimport org.apache.log4j.Logger;\nimport org.pdfsam.guiclient.business.thumbnails.ThumbnailCreatorsRegisty;\nimport org.pdfsam.guiclient.configuration.Configuration;\nimport org.pdfsam.guiclient.configuration.GuiConfiguration;\nimport org.pdfsam.guiclient.gui.frames.JMainFrame;\nimport org.pdfsam.guiclient.utils.filters.JarFilter;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link GuiClient}.\n* It contains ten unit test cases for the {@link GuiClient#getBranch()} method.\n*/\nclass GuiClientTest4 {"
	},
	{
		"original_code": "// JPdfSelectionTableRenderer.java\n/*\r\n * Created on 27-Dec-2007\r\n * Copyright (C) 2006 by Andrea Vacondio.\r\n *\r\n * This program is free software; you can redistribute it and/or modify it under the terms of the \r\n * GNU General Public License as published by the Free Software Foundation; \r\n * either version 2 of the License.\r\n * This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; \r\n * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. \r\n * See the GNU General Public License for more details.\r\n * You should have received a copy of the GNU General Public License along with this program; \r\n * if not, write to the Free Software Foundation, Inc., \r\n *  59 Temple Place, Suite 330, Boston, MA 02111-1307 USA\r\n */\r\npackage org.pdfsam.guiclient.commons.renderers;\r\n\r\nimport java.awt.Color;\r\nimport java.awt.Component;\r\nimport javax.swing.ImageIcon;\r\nimport javax.swing.JLabel;\r\nimport javax.swing.JTable;\r\nimport javax.swing.UIManager;\r\nimport javax.swing.border.EmptyBorder;\r\nimport javax.swing.table.TableCellRenderer;\r\nimport org.pdfsam.guiclient.commons.models.AbstractPdfSelectionTableModel;\r\nimport org.pdfsam.guiclient.configuration.Configuration;\r\nimport org.pdfsam.i18n.GettextResource;\r\n\r\n/**\r\n * Renderer to show red background in rows loaded with errors\r\n * @author Andrea Vacondio\r\n */\r\npublic class JPdfSelectionTableRenderer extends JLabel implements TableCellRenderer {\r\n\r\n    private static final long serialVersionUID = -4780112050203181493L;\r\n\r\n    private boolean fullAccessRequired = true;\r\n\r\n    public JPdfSelectionTableRenderer() {\r\n    }\r\n\r\n    /**\r\n     * @param fullAccessRequired\r\n     */\r\n    public JPdfSelectionTableRenderer(boolean fullAccessRequired) {\r\n        super();\r\n        this.fullAccessRequired = fullAccessRequired;\r\n    }\r\n\r\n    /**\r\n     * @return the fullAccessRequired\r\n     */\r\n    public boolean isFullAccessRequired() {\r\n        return fullAccessRequired;\r\n    }\r\n\r\n    /**\r\n     * @param fullAccessRequired the fullAccessRequired to set\r\n     */\r\n    public void setFullAccessRequired(boolean fullAccessRequired) {\r\n        this.fullAccessRequired = fullAccessRequired;\r\n    }\r\n\r\n    public Component getTableCellRendererComponent(JTable table, Object value, boolean isSelected, boolean hasFocus, int row, int column) {\r\n        setOpaque(true);\r\n        setIcon(null);\r\n        setFont(table.getFont());\r\n        setToolTipText(null);\r\n        boolean loadedWithErrors = ((AbstractPdfSelectionTableModel) table.getModel()).getRow(row).isLoadedWithErrors();\r\n        boolean syntaxErrors = ((AbstractPdfSelectionTableModel) table.getModel()).getRow(row).isSyntaxErrors();\r\n        boolean fullPermission = ((AbstractPdfSelectionTableModel) table.getModel()).getRow(row).isFullPermission();\r\n        boolean encrypted = ((AbstractPdfSelectionTableModel) table.getModel()).getRow(row).isEncrypted();\r\n        //rowheader\r\n        if (column == AbstractPdfSelectionTableModel.ROW_NUM) {\r\n            setFont(table.getTableHeader().getFont());\r\n            setBackground(table.getTableHeader().getBackground());\r\n            setForeground(table.getTableHeader().getForeground());\r\n        } else {\r\n            if (isSelected) {\r\n                setForeground(table.getSelectionForeground());\r\n                setBackground(table.getSelectionBackground());\r\n            } else {\r\n                setForeground(table.getForeground());\r\n                setBackground(table.getBackground());\r\n            }\r\n            if (loadedWithErrors) {\r\n                setBackground(new Color(222, 189, 189));\r\n                if (column == AbstractPdfSelectionTableModel.FILENAME) {\r\n                    setIcon(new ImageIcon(this.getClass().getResource(\"/images/erroronload.png\")));\r\n                }\r\n            } else if (syntaxErrors || (fullAccessRequired && !fullPermission)) {\r\n                setBackground(Color.YELLOW);\r\n            }\r\n        }\r\n        //value\r\n        if (column == AbstractPdfSelectionTableModel.PASSWORD) {\r\n            if (value != null && value.toString().length() > 0) {\r\n                setText(\"**********\");\r\n            } else {\r\n                setText(\"\");\r\n            }\r\n        } else {\r\n            if (value != null) {\r\n                setText(value.toString());\r\n            } else {\r\n                setText(\"\");\r\n            }\r\n        }\r\n        //encrypt icon\r\n        if (column == AbstractPdfSelectionTableModel.FILENAME) {\r\n            if (encrypted) {\r\n                setIcon(new ImageIcon(this.getClass().getResource(\"/images/encrypted.png\")));\r\n            }\r\n        }\r\n        //focus\r\n        if (column == AbstractPdfSelectionTableModel.ROW_NUM) {\r\n            setBorder(UIManager.getBorder(\"TableHeader.cellBorder\"));\r\n        } else {\r\n            if (hasFocus) {\r\n                setBorder(UIManager.getBorder(\"Table.focusCellHighlightBorder\"));\r\n            } else {\r\n                setBorder(new EmptyBorder(1, 1, 1, 1));\r\n            }\r\n        }\r\n        //tooltip messages\r\n        if (syntaxErrors || (fullAccessRequired && !fullPermission) || loadedWithErrors) {\r\n            String toolTip = \"<html><body>\";\r\n            if (syntaxErrors) {\r\n                toolTip += \"<b>\" + GettextResource.gettext(Configuration.getInstance().getI18nResourceBundle(), \"The cross reference table cantained some error and has been rebuilt\") + \".\";\r\n            }\r\n            if ((fullAccessRequired && !fullPermission)) {\r\n                toolTip += \"<b>\" + GettextResource.gettext(Configuration.getInstance().getI18nResourceBundle(), \"The document has not been opened with the owner password. You must provide the owner password in order to manipulate the document\") + \".\";\r\n            }\r\n            if (loadedWithErrors) {\r\n                toolTip += \"<b>\" + GettextResource.gettext(Configuration.getInstance().getI18nResourceBundle(), \"An error occured while loading the document\") + \".\";\r\n            }\r\n            toolTip += \"</body></html>\";\r\n            setToolTipText(toolTip);\r\n        }\r\n        return this;\r\n    }\r\n}\r\n",
		"id": "EvoSuiteBenchmark/109_pdfsam/src/main/java/org/pdfsam/guiclient/commons/renderers/JPdfSelectionTableRendererTest.java",
		"test_prompt": "// JPdfSelectionTableRendererTest.java\npackage org.pdfsam.guiclient.commons.renderers;\n\nimport java.awt.Color;\nimport java.awt.Component;\nimport javax.swing.ImageIcon;\nimport javax.swing.JLabel;\nimport javax.swing.JTable;\nimport javax.swing.UIManager;\nimport javax.swing.border.EmptyBorder;\nimport javax.swing.table.TableCellRenderer;\nimport org.pdfsam.guiclient.commons.models.AbstractPdfSelectionTableModel;\nimport org.pdfsam.guiclient.configuration.Configuration;\nimport org.pdfsam.i18n.GettextResource;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link JPdfSelectionTableRenderer}.\n* It contains ten unit test cases for the {@link JPdfSelectionTableRenderer#isFullAccessRequired()} method.\n*/\nclass JPdfSelectionTableRendererTest {"
	},
	{
		"original_code": "// DnDSupportUtility.java\n/*\n * Created on 19-Sep-2009\n * Copyright (C) 2009 by Andrea Vacondio.\n *\n * This program is free software; you can redistribute it and/or modify it under the terms of the \n * GNU General Public License as published by the Free Software Foundation; \n * either version 2 of the License.\n * This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; \n * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. \n * See the GNU General Public License for more details.\n * You should have received a copy of the GNU General Public License along with this program; \n * if not, write to the Free Software Foundation, Inc., \n *  59 Temple Place, Suite 330, Boston, MA 02111-1307 USA\n */\npackage org.pdfsam.guiclient.commons.dnd;\n\nimport java.awt.datatransfer.DataFlavor;\nimport java.io.File;\nimport java.net.URI;\nimport java.util.List;\nimport java.util.Scanner;\nimport org.apache.log4j.Logger;\nimport org.pdfsam.guiclient.configuration.Configuration;\nimport org.pdfsam.i18n.GettextResource;\n\n/**\n * Utility in support of the DnD\n * @author Andrea Vacondio\n */\npublic final class DnDSupportUtility {\n\n    private static final Logger log = Logger.getLogger(DnDSupportUtility.class.getPackage().getName());\n\n    public static DataFlavor VISUAL_LIST_FLAVOR = null;\n\n    public static DataFlavor URI_LIST_FLAVOR = null;\n\n    private static final String URI_DELIMITER = \"\\r\\n\";\n\n    static {\n        try {\n            if (VISUAL_LIST_FLAVOR == null) {\n                VISUAL_LIST_FLAVOR = new DataFlavor(DataFlavor.javaJVMLocalObjectMimeType);\n            }\n        } catch (ClassNotFoundException e) {\n            log.error(GettextResource.gettext(Configuration.getInstance().getI18nResourceBundle(), \"Unable to initializate drag and drop support.\"), e);\n        }\n    }\n\n    static {\n        try {\n            if (URI_LIST_FLAVOR == null) {\n                URI_LIST_FLAVOR = new DataFlavor(\"text/uri-list;class=java.lang.String\");\n            }\n        } catch (ClassNotFoundException e) {\n            log.error(GettextResource.gettext(Configuration.getInstance().getI18nResourceBundle(), \"Unable to initializate drag and drop support.\"), e);\n        }\n    }\n\n    private DnDSupportUtility() {\n        //no constructor\n    }\n\n    /**\n     * @param data\n     *            the input URI sting\n     * @return a list of file\n     */\n    public static List<File> textURIListToFileList(String data) {\n        List<File> retVal = new java.util.ArrayList<File>(1);\n        Scanner scanner = new Scanner(data);\n        scanner.useDelimiter(URI_DELIMITER);\n        while (scanner.hasNext()) {\n            String token = scanner.next();\n            if (token != null && !token.startsWith(\"#\")) {\n                try {\n                    File currentFile = new File(new URI(token));\n                    if (currentFile.exists()) {\n                        retVal.add(currentFile);\n                    }\n                } catch (java.net.URISyntaxException e) {\n                    // empty on purpose\n                } catch (IllegalArgumentException e) {\n                    // empty on purpose\n                }\n            }\n        }\n        return retVal;\n    }\n}\n",
		"id": "EvoSuiteBenchmark/109_pdfsam/src/main/java/org/pdfsam/guiclient/commons/dnd/DnDSupportUtilityTest.java",
		"test_prompt": "// DnDSupportUtilityTest.java\npackage org.pdfsam.guiclient.commons.dnd;\n\nimport java.awt.datatransfer.DataFlavor;\nimport java.io.File;\nimport java.net.URI;\nimport java.util.List;\nimport java.util.Scanner;\nimport org.apache.log4j.Logger;\nimport org.pdfsam.guiclient.configuration.Configuration;\nimport org.pdfsam.i18n.GettextResource;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link DnDSupportUtility}.\n* It contains ten unit test cases for the {@link DnDSupportUtility#textURIListToFileList(String)} method.\n*/\nclass DnDSupportUtilityTest {"
	},
	{
		"original_code": "// VisualPageListTransferable.java\n/*\r\n * Created on 27-Jun-2008\r\n * Copyright (C) 2008 by Andrea Vacondio.\r\n *\r\n * This program is free software; you can redistribute it and/or modify it under the terms of the \r\n * GNU General Public License as published by the Free Software Foundation; \r\n * either version 2 of the License.\r\n * This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; \r\n * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. \r\n * See the GNU General Public License for more details.\r\n * You should have received a copy of the GNU General Public License along with this program; \r\n * if not, write to the Free Software Foundation, Inc., \r\n *  59 Temple Place, Suite 330, Boston, MA 02111-1307 USA\r\n */\r\npackage org.pdfsam.guiclient.commons.dnd.transferables;\r\n\r\nimport java.awt.datatransfer.DataFlavor;\r\nimport java.awt.datatransfer.Transferable;\r\nimport java.awt.datatransfer.UnsupportedFlavorException;\r\nimport java.io.IOException;\r\nimport org.pdfsam.guiclient.commons.dnd.DnDSupportUtility;\r\nimport org.pdfsam.guiclient.dto.VisualPageListItem;\r\n\r\n/**\r\n * Transferable for the D&D support\r\n * @author Andrea Vacondio\r\n */\r\npublic class VisualPageListTransferable implements Transferable {\r\n\r\n    private TransferableData data;\r\n\r\n    /**\r\n     * @param data\r\n     */\r\n    public VisualPageListTransferable(TransferableData data) {\r\n        super();\r\n        this.data = data;\r\n    }\r\n\r\n    public VisualPageListTransferable(VisualPageListItem[] dataList, int[] indexesList) {\r\n        super();\r\n        this.data = new TransferableData(dataList, indexesList);\r\n    }\r\n\r\n    public Object getTransferData(DataFlavor flavor) throws UnsupportedFlavorException, IOException {\r\n        if (!isDataFlavorSupported(flavor)) {\r\n            throw new UnsupportedFlavorException(flavor);\r\n        }\r\n        return data;\r\n    }\r\n\r\n    public DataFlavor[] getTransferDataFlavors() {\r\n        return new DataFlavor[] { DnDSupportUtility.VISUAL_LIST_FLAVOR };\r\n    }\r\n\r\n    public boolean isDataFlavorSupported(DataFlavor flavor) {\r\n        return ((DnDSupportUtility.VISUAL_LIST_FLAVOR != null) && (flavor != null) && (flavor.equals(DnDSupportUtility.VISUAL_LIST_FLAVOR)));\r\n    }\r\n\r\n    /**\r\n     * It models the transferred data\r\n     * @author Andrea Vacondio\r\n     */\r\n    public class TransferableData {\r\n\r\n        private VisualPageListItem[] dataList;\r\n\r\n        private int[] indexesList;\r\n\r\n        public TransferableData() {\r\n        }\r\n\r\n        /**\r\n         * @param dataList\r\n         * @param indexesList\r\n         */\r\n        public TransferableData(VisualPageListItem[] dataList, int[] indexesList) {\r\n            super();\r\n            this.dataList = dataList;\r\n            this.indexesList = indexesList;\r\n        }\r\n\r\n        /**\r\n         * @return the dataList\r\n         */\r\n        public VisualPageListItem[] getDataList() {\r\n            return dataList;\r\n        }\r\n\r\n        /**\r\n         * @param dataList the dataList to set\r\n         */\r\n        public void setDataList(VisualPageListItem[] dataList) {\r\n            this.dataList = dataList;\r\n        }\r\n\r\n        /**\r\n         * @return the indexesList\r\n         */\r\n        public int[] getIndexesList() {\r\n            return indexesList;\r\n        }\r\n\r\n        /**\r\n         * @param indexesList the indexesList to set\r\n         */\r\n        public void setIndexesList(int[] indexesList) {\r\n            this.indexesList = indexesList;\r\n        }\r\n    }\r\n}\r\n",
		"id": "EvoSuiteBenchmark/109_pdfsam/src/main/java/org/pdfsam/guiclient/commons/dnd/transferables/VisualPageListTransferableTest.java",
		"test_prompt": "// VisualPageListTransferableTest.java\npackage org.pdfsam.guiclient.commons.dnd.transferables;\n\nimport java.awt.datatransfer.DataFlavor;\nimport java.awt.datatransfer.Transferable;\nimport java.awt.datatransfer.UnsupportedFlavorException;\nimport java.io.IOException;\nimport org.pdfsam.guiclient.commons.dnd.DnDSupportUtility;\nimport org.pdfsam.guiclient.dto.VisualPageListItem;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link VisualPageListTransferable}.\n* It contains ten unit test cases for the {@link VisualPageListTransferable#isDataFlavorSupported(DataFlavor)} method.\n*/\nclass VisualPageListTransferableTest {"
	},
	{
		"original_code": "// VisualListExportTransferHandler.java\n/*\n * Created on 23-Jan-2009\n * Copyright (C) 2009 by Andrea Vacondio.\n *\n * This program is free software; you can redistribute it and/or modify it under the terms of the \n * GNU General Public License as published by the Free Software Foundation; \n * either version 2 of the License.\n * This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; \n * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. \n * See the GNU General Public License for more details.\n * You should have received a copy of the GNU General Public License along with this program; \n * if not, write to the Free Software Foundation, Inc., \n *  59 Temple Place, Suite 330, Boston, MA 02111-1307 USA\n */\npackage org.pdfsam.guiclient.commons.dnd.handlers;\n\nimport java.awt.datatransfer.DataFlavor;\nimport java.awt.datatransfer.Transferable;\nimport java.io.File;\nimport java.util.List;\nimport javax.swing.JComponent;\nimport javax.swing.TransferHandler;\nimport org.apache.log4j.Logger;\nimport org.pdfsam.guiclient.commons.business.loaders.PdfThumbnailsLoader;\nimport org.pdfsam.guiclient.commons.components.JVisualSelectionList;\nimport org.pdfsam.guiclient.commons.dnd.DnDSupportUtility;\nimport org.pdfsam.guiclient.commons.dnd.transferables.VisualPageListTransferable;\nimport org.pdfsam.guiclient.configuration.Configuration;\nimport org.pdfsam.guiclient.dto.VisualPageListItem;\nimport org.pdfsam.guiclient.utils.filters.PdfFilter;\nimport org.pdfsam.i18n.GettextResource;\n\n/**\n * Transfer Handler with the only export support\n * @author Andrea Vacondio\n */\npublic class VisualListExportTransferHandler extends TransferHandler {\n\n    private static final long serialVersionUID = -8912890262680226922L;\n\n    private static final Logger log = Logger.getLogger(VisualListExportTransferHandler.class.getPackage().getName());\n\n    private PdfThumbnailsLoader loader = null;\n\n    /**\n     * Default constructor. Cannot import files.\n     */\n    public VisualListExportTransferHandler() {\n        this(null);\n    }\n\n    /**\n     * @param loader if the loader is != null it can import files.\n     */\n    public VisualListExportTransferHandler(PdfThumbnailsLoader loader) {\n        super();\n        this.loader = loader;\n    }\n\n    public int getSourceActions(JComponent c) {\n        return COPY;\n    }\n\n    protected Transferable createTransferable(JComponent c) {\n        VisualPageListTransferable retVal = null;\n        Object[] selectedList = ((JVisualSelectionList) c).getSelectedValues();\n        if (selectedList != null && selectedList.length > 0) {\n            VisualPageListItem[] items = new VisualPageListItem[selectedList.length];\n            for (int i = 0; i < selectedList.length; i++) {\n                items[i] = (VisualPageListItem) selectedList[i];\n            }\n            int[] indexes = ((JVisualSelectionList) c).getSelectedIndices();\n            retVal = new VisualPageListTransferable(items, indexes);\n        }\n        return retVal;\n    }\n\n    public boolean canImport(TransferHandler.TransferSupport info) {\n        boolean retVal = false;\n        if (loader != null && info.getComponent() instanceof JVisualSelectionList) {\n            if (info.isDataFlavorSupported(DataFlavor.javaFileListFlavor) || info.isDataFlavorSupported(DnDSupportUtility.URI_LIST_FLAVOR)) {\n                retVal = true;\n            } else {\n                retVal = false;\n            }\n        }\n        return retVal;\n    }\n\n    /**\n     * @return the loader\n     */\n    protected PdfThumbnailsLoader getLoader() {\n        return loader;\n    }\n\n    /**\n     * @param loader the loader to set\n     */\n    protected void setLoader(PdfThumbnailsLoader loader) {\n        this.loader = loader;\n    }\n\n    @SuppressWarnings(\"unchecked\")\n    public boolean importData(TransferHandler.TransferSupport info) {\n        boolean retVal = false;\n        if (loader != null) {\n            List<File> fileList = null;\n            try {\n                if (info.isDataFlavorSupported(DataFlavor.javaFileListFlavor)) {\n                    fileList = (List<File>) info.getTransferable().getTransferData(DataFlavor.javaFileListFlavor);\n                } else if (info.isDataFlavorSupported(DnDSupportUtility.URI_LIST_FLAVOR)) {\n                    fileList = DnDSupportUtility.textURIListToFileList((String) info.getTransferable().getTransferData(DnDSupportUtility.URI_LIST_FLAVOR));\n                }\n                if (fileList != null) {\n                    if (fileList.size() != 1) {\n                        log.warn(GettextResource.gettext(Configuration.getInstance().getI18nResourceBundle(), \"Please select a single pdf document.\"));\n                    } else {\n                        File selectedFile = fileList.get(0);\n                        if (selectedFile != null && new PdfFilter(false).accept(selectedFile)) {\n                            loader.addFile(selectedFile, true);\n                            retVal = true;\n                        } else {\n                            log.warn(GettextResource.gettext(Configuration.getInstance().getI18nResourceBundle(), \"File type not supported.\"));\n                        }\n                    }\n                }\n            } catch (Exception e) {\n                log.error(GettextResource.gettext(Configuration.getInstance().getI18nResourceBundle(), \"Error during drag and drop.\"), e);\n            }\n        }\n        return retVal;\n    }\n}\n",
		"id": "EvoSuiteBenchmark/109_pdfsam/src/main/java/org/pdfsam/guiclient/commons/dnd/handlers/VisualListExportTransferHandlerTest0.java",
		"test_prompt": "// VisualListExportTransferHandlerTest0.java\npackage org.pdfsam.guiclient.commons.dnd.handlers;\n\nimport java.awt.datatransfer.DataFlavor;\nimport java.awt.datatransfer.Transferable;\nimport java.io.File;\nimport java.util.List;\nimport javax.swing.JComponent;\nimport javax.swing.TransferHandler;\nimport org.apache.log4j.Logger;\nimport org.pdfsam.guiclient.commons.business.loaders.PdfThumbnailsLoader;\nimport org.pdfsam.guiclient.commons.components.JVisualSelectionList;\nimport org.pdfsam.guiclient.commons.dnd.DnDSupportUtility;\nimport org.pdfsam.guiclient.commons.dnd.transferables.VisualPageListTransferable;\nimport org.pdfsam.guiclient.configuration.Configuration;\nimport org.pdfsam.guiclient.dto.VisualPageListItem;\nimport org.pdfsam.guiclient.utils.filters.PdfFilter;\nimport org.pdfsam.i18n.GettextResource;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link VisualListExportTransferHandler}.\n* It contains ten unit test cases for the {@link VisualListExportTransferHandler#canImport(TransferHandler.TransferSupport)} method.\n*/\nclass VisualListExportTransferHandlerTest0 {"
	},
	{
		"original_code": "// VisualListExportTransferHandler.java\n/*\n * Created on 23-Jan-2009\n * Copyright (C) 2009 by Andrea Vacondio.\n *\n * This program is free software; you can redistribute it and/or modify it under the terms of the \n * GNU General Public License as published by the Free Software Foundation; \n * either version 2 of the License.\n * This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; \n * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. \n * See the GNU General Public License for more details.\n * You should have received a copy of the GNU General Public License along with this program; \n * if not, write to the Free Software Foundation, Inc., \n *  59 Temple Place, Suite 330, Boston, MA 02111-1307 USA\n */\npackage org.pdfsam.guiclient.commons.dnd.handlers;\n\nimport java.awt.datatransfer.DataFlavor;\nimport java.awt.datatransfer.Transferable;\nimport java.io.File;\nimport java.util.List;\nimport javax.swing.JComponent;\nimport javax.swing.TransferHandler;\nimport org.apache.log4j.Logger;\nimport org.pdfsam.guiclient.commons.business.loaders.PdfThumbnailsLoader;\nimport org.pdfsam.guiclient.commons.components.JVisualSelectionList;\nimport org.pdfsam.guiclient.commons.dnd.DnDSupportUtility;\nimport org.pdfsam.guiclient.commons.dnd.transferables.VisualPageListTransferable;\nimport org.pdfsam.guiclient.configuration.Configuration;\nimport org.pdfsam.guiclient.dto.VisualPageListItem;\nimport org.pdfsam.guiclient.utils.filters.PdfFilter;\nimport org.pdfsam.i18n.GettextResource;\n\n/**\n * Transfer Handler with the only export support\n * @author Andrea Vacondio\n */\npublic class VisualListExportTransferHandler extends TransferHandler {\n\n    private static final long serialVersionUID = -8912890262680226922L;\n\n    private static final Logger log = Logger.getLogger(VisualListExportTransferHandler.class.getPackage().getName());\n\n    private PdfThumbnailsLoader loader = null;\n\n    /**\n     * Default constructor. Cannot import files.\n     */\n    public VisualListExportTransferHandler() {\n        this(null);\n    }\n\n    /**\n     * @param loader if the loader is != null it can import files.\n     */\n    public VisualListExportTransferHandler(PdfThumbnailsLoader loader) {\n        super();\n        this.loader = loader;\n    }\n\n    public int getSourceActions(JComponent c) {\n        return COPY;\n    }\n\n    protected Transferable createTransferable(JComponent c) {\n        VisualPageListTransferable retVal = null;\n        Object[] selectedList = ((JVisualSelectionList) c).getSelectedValues();\n        if (selectedList != null && selectedList.length > 0) {\n            VisualPageListItem[] items = new VisualPageListItem[selectedList.length];\n            for (int i = 0; i < selectedList.length; i++) {\n                items[i] = (VisualPageListItem) selectedList[i];\n            }\n            int[] indexes = ((JVisualSelectionList) c).getSelectedIndices();\n            retVal = new VisualPageListTransferable(items, indexes);\n        }\n        return retVal;\n    }\n\n    public boolean canImport(TransferHandler.TransferSupport info) {\n        boolean retVal = false;\n        if (loader != null && info.getComponent() instanceof JVisualSelectionList) {\n            if (info.isDataFlavorSupported(DataFlavor.javaFileListFlavor) || info.isDataFlavorSupported(DnDSupportUtility.URI_LIST_FLAVOR)) {\n                retVal = true;\n            } else {\n                retVal = false;\n            }\n        }\n        return retVal;\n    }\n\n    /**\n     * @return the loader\n     */\n    protected PdfThumbnailsLoader getLoader() {\n        return loader;\n    }\n\n    /**\n     * @param loader the loader to set\n     */\n    protected void setLoader(PdfThumbnailsLoader loader) {\n        this.loader = loader;\n    }\n\n    @SuppressWarnings(\"unchecked\")\n    public boolean importData(TransferHandler.TransferSupport info) {\n        boolean retVal = false;\n        if (loader != null) {\n            List<File> fileList = null;\n            try {\n                if (info.isDataFlavorSupported(DataFlavor.javaFileListFlavor)) {\n                    fileList = (List<File>) info.getTransferable().getTransferData(DataFlavor.javaFileListFlavor);\n                } else if (info.isDataFlavorSupported(DnDSupportUtility.URI_LIST_FLAVOR)) {\n                    fileList = DnDSupportUtility.textURIListToFileList((String) info.getTransferable().getTransferData(DnDSupportUtility.URI_LIST_FLAVOR));\n                }\n                if (fileList != null) {\n                    if (fileList.size() != 1) {\n                        log.warn(GettextResource.gettext(Configuration.getInstance().getI18nResourceBundle(), \"Please select a single pdf document.\"));\n                    } else {\n                        File selectedFile = fileList.get(0);\n                        if (selectedFile != null && new PdfFilter(false).accept(selectedFile)) {\n                            loader.addFile(selectedFile, true);\n                            retVal = true;\n                        } else {\n                            log.warn(GettextResource.gettext(Configuration.getInstance().getI18nResourceBundle(), \"File type not supported.\"));\n                        }\n                    }\n                }\n            } catch (Exception e) {\n                log.error(GettextResource.gettext(Configuration.getInstance().getI18nResourceBundle(), \"Error during drag and drop.\"), e);\n            }\n        }\n        return retVal;\n    }\n}\n",
		"id": "EvoSuiteBenchmark/109_pdfsam/src/main/java/org/pdfsam/guiclient/commons/dnd/handlers/VisualListExportTransferHandlerTest1.java",
		"test_prompt": "// VisualListExportTransferHandlerTest1.java\npackage org.pdfsam.guiclient.commons.dnd.handlers;\n\nimport java.awt.datatransfer.DataFlavor;\nimport java.awt.datatransfer.Transferable;\nimport java.io.File;\nimport java.util.List;\nimport javax.swing.JComponent;\nimport javax.swing.TransferHandler;\nimport org.apache.log4j.Logger;\nimport org.pdfsam.guiclient.commons.business.loaders.PdfThumbnailsLoader;\nimport org.pdfsam.guiclient.commons.components.JVisualSelectionList;\nimport org.pdfsam.guiclient.commons.dnd.DnDSupportUtility;\nimport org.pdfsam.guiclient.commons.dnd.transferables.VisualPageListTransferable;\nimport org.pdfsam.guiclient.configuration.Configuration;\nimport org.pdfsam.guiclient.dto.VisualPageListItem;\nimport org.pdfsam.guiclient.utils.filters.PdfFilter;\nimport org.pdfsam.i18n.GettextResource;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link VisualListExportTransferHandler}.\n* It contains ten unit test cases for the {@link VisualListExportTransferHandler#importData(TransferHandler.TransferSupport)} method.\n*/\nclass VisualListExportTransferHandlerTest1 {"
	},
	{
		"original_code": "// ClosableTabTransferHandler.java\n/*\n * Created on 17-Apr-2009\n * Copyright (C) 2009 by Andrea Vacondio.\n *\n * This program is free software; you can redistribute it and/or modify it under the terms of the \n * GNU General Public License as published by the Free Software Foundation; \n * either version 2 of the License.\n * This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; \n * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. \n * See the GNU General Public License for more details.\n * You should have received a copy of the GNU General Public License along with this program; \n * if not, write to the Free Software Foundation, Inc., \n *  59 Temple Place, Suite 330, Boston, MA 02111-1307 USA\n */\npackage org.pdfsam.guiclient.commons.dnd.handlers;\n\nimport java.awt.datatransfer.DataFlavor;\nimport java.io.File;\nimport java.util.List;\nimport javax.swing.TransferHandler;\nimport org.apache.log4j.Logger;\nimport org.pdfsam.guiclient.business.ClosableTabbedPanelAdder;\nimport org.pdfsam.guiclient.commons.components.JVisualSelectionList;\nimport org.pdfsam.guiclient.commons.panels.JVisualMultiSelectionPanel;\nimport org.pdfsam.guiclient.configuration.Configuration;\nimport org.pdfsam.i18n.GettextResource;\n\n/**\n * Used as TransferHandler for panels included into a {@link JVisualMultiSelectionPanel}\n * @author Andrea Vacondio\n */\npublic class ClosableTabTransferHandler extends VisualListExportTransferHandler {\n\n    private static final long serialVersionUID = -8007011325038959040L;\n\n    private static final Logger log = Logger.getLogger(ClosableTabTransferHandler.class.getPackage().getName());\n\n    private ClosableTabbedPanelAdder adder = null;\n\n    /**\n     * @param adder\n     */\n    public ClosableTabTransferHandler(ClosableTabbedPanelAdder adder) {\n        super();\n        this.adder = adder;\n    }\n\n    public boolean canImport(TransferHandler.TransferSupport info) {\n        boolean retVal = false;\n        if (adder != null && info.getComponent() instanceof JVisualSelectionList) {\n            if (info.isDataFlavorSupported(DataFlavor.javaFileListFlavor)) {\n                retVal = true;\n            } else {\n                retVal = false;\n            }\n        }\n        return retVal;\n    }\n\n    @SuppressWarnings(\"unchecked\")\n    public boolean importData(TransferHandler.TransferSupport info) {\n        boolean retVal = false;\n        if (adder != null && info.isDataFlavorSupported(DataFlavor.javaFileListFlavor)) {\n            try {\n                List<File> fileList = (List<File>) info.getTransferable().getTransferData(DataFlavor.javaFileListFlavor);\n                adder.addTabs(fileList);\n            } catch (Exception e) {\n                log.error(GettextResource.gettext(Configuration.getInstance().getI18nResourceBundle(), \"Error during drag and drop.\"), e);\n            }\n        }\n        return retVal;\n    }\n}\n",
		"id": "EvoSuiteBenchmark/109_pdfsam/src/main/java/org/pdfsam/guiclient/commons/dnd/handlers/ClosableTabTransferHandlerTest0.java",
		"test_prompt": "// ClosableTabTransferHandlerTest0.java\npackage org.pdfsam.guiclient.commons.dnd.handlers;\n\nimport java.awt.datatransfer.DataFlavor;\nimport java.io.File;\nimport java.util.List;\nimport javax.swing.TransferHandler;\nimport org.apache.log4j.Logger;\nimport org.pdfsam.guiclient.business.ClosableTabbedPanelAdder;\nimport org.pdfsam.guiclient.commons.components.JVisualSelectionList;\nimport org.pdfsam.guiclient.commons.panels.JVisualMultiSelectionPanel;\nimport org.pdfsam.guiclient.configuration.Configuration;\nimport org.pdfsam.i18n.GettextResource;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link ClosableTabTransferHandler}.\n* It contains ten unit test cases for the {@link ClosableTabTransferHandler#canImport(TransferHandler.TransferSupport)} method.\n*/\nclass ClosableTabTransferHandlerTest0 {"
	},
	{
		"original_code": "// ClosableTabTransferHandler.java\n/*\n * Created on 17-Apr-2009\n * Copyright (C) 2009 by Andrea Vacondio.\n *\n * This program is free software; you can redistribute it and/or modify it under the terms of the \n * GNU General Public License as published by the Free Software Foundation; \n * either version 2 of the License.\n * This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; \n * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. \n * See the GNU General Public License for more details.\n * You should have received a copy of the GNU General Public License along with this program; \n * if not, write to the Free Software Foundation, Inc., \n *  59 Temple Place, Suite 330, Boston, MA 02111-1307 USA\n */\npackage org.pdfsam.guiclient.commons.dnd.handlers;\n\nimport java.awt.datatransfer.DataFlavor;\nimport java.io.File;\nimport java.util.List;\nimport javax.swing.TransferHandler;\nimport org.apache.log4j.Logger;\nimport org.pdfsam.guiclient.business.ClosableTabbedPanelAdder;\nimport org.pdfsam.guiclient.commons.components.JVisualSelectionList;\nimport org.pdfsam.guiclient.commons.panels.JVisualMultiSelectionPanel;\nimport org.pdfsam.guiclient.configuration.Configuration;\nimport org.pdfsam.i18n.GettextResource;\n\n/**\n * Used as TransferHandler for panels included into a {@link JVisualMultiSelectionPanel}\n * @author Andrea Vacondio\n */\npublic class ClosableTabTransferHandler extends VisualListExportTransferHandler {\n\n    private static final long serialVersionUID = -8007011325038959040L;\n\n    private static final Logger log = Logger.getLogger(ClosableTabTransferHandler.class.getPackage().getName());\n\n    private ClosableTabbedPanelAdder adder = null;\n\n    /**\n     * @param adder\n     */\n    public ClosableTabTransferHandler(ClosableTabbedPanelAdder adder) {\n        super();\n        this.adder = adder;\n    }\n\n    public boolean canImport(TransferHandler.TransferSupport info) {\n        boolean retVal = false;\n        if (adder != null && info.getComponent() instanceof JVisualSelectionList) {\n            if (info.isDataFlavorSupported(DataFlavor.javaFileListFlavor)) {\n                retVal = true;\n            } else {\n                retVal = false;\n            }\n        }\n        return retVal;\n    }\n\n    @SuppressWarnings(\"unchecked\")\n    public boolean importData(TransferHandler.TransferSupport info) {\n        boolean retVal = false;\n        if (adder != null && info.isDataFlavorSupported(DataFlavor.javaFileListFlavor)) {\n            try {\n                List<File> fileList = (List<File>) info.getTransferable().getTransferData(DataFlavor.javaFileListFlavor);\n                adder.addTabs(fileList);\n            } catch (Exception e) {\n                log.error(GettextResource.gettext(Configuration.getInstance().getI18nResourceBundle(), \"Error during drag and drop.\"), e);\n            }\n        }\n        return retVal;\n    }\n}\n",
		"id": "EvoSuiteBenchmark/109_pdfsam/src/main/java/org/pdfsam/guiclient/commons/dnd/handlers/ClosableTabTransferHandlerTest1.java",
		"test_prompt": "// ClosableTabTransferHandlerTest1.java\npackage org.pdfsam.guiclient.commons.dnd.handlers;\n\nimport java.awt.datatransfer.DataFlavor;\nimport java.io.File;\nimport java.util.List;\nimport javax.swing.TransferHandler;\nimport org.apache.log4j.Logger;\nimport org.pdfsam.guiclient.business.ClosableTabbedPanelAdder;\nimport org.pdfsam.guiclient.commons.components.JVisualSelectionList;\nimport org.pdfsam.guiclient.commons.panels.JVisualMultiSelectionPanel;\nimport org.pdfsam.guiclient.configuration.Configuration;\nimport org.pdfsam.i18n.GettextResource;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link ClosableTabTransferHandler}.\n* It contains ten unit test cases for the {@link ClosableTabTransferHandler#importData(TransferHandler.TransferSupport)} method.\n*/\nclass ClosableTabTransferHandlerTest1 {"
	},
	{
		"original_code": "// VisualListTransferHandler.java\n/*\r\n * Created on 23-Jan-2009\r\n * Copyright (C) 2009 by Andrea Vacondio.\r\n *\r\n * This program is free software; you can redistribute it and/or modify it under the terms of the \r\n * GNU General Public License as published by the Free Software Foundation; \r\n * either version 2 of the License.\r\n * This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; \r\n * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. \r\n * See the GNU General Public License for more details.\r\n * You should have received a copy of the GNU General Public License along with this program; \r\n * if not, write to the Free Software Foundation, Inc., \r\n *  59 Temple Place, Suite 330, Boston, MA 02111-1307 USA\r\n */\r\npackage org.pdfsam.guiclient.commons.dnd.handlers;\r\n\r\nimport java.awt.datatransfer.DataFlavor;\r\nimport java.awt.datatransfer.Transferable;\r\nimport java.awt.datatransfer.UnsupportedFlavorException;\r\nimport java.io.IOException;\r\nimport java.util.Arrays;\r\nimport java.util.Collection;\r\nimport java.util.Vector;\r\nimport javax.swing.JComponent;\r\nimport javax.swing.JList;\r\nimport javax.swing.TransferHandler;\r\nimport org.apache.log4j.Logger;\r\nimport org.pdfsam.guiclient.commons.business.loaders.PdfThumbnailsLoader;\r\nimport org.pdfsam.guiclient.commons.components.JVisualSelectionList;\r\nimport org.pdfsam.guiclient.commons.dnd.DnDSupportUtility;\r\nimport org.pdfsam.guiclient.commons.dnd.transferables.VisualPageListTransferable.TransferableData;\r\nimport org.pdfsam.guiclient.commons.models.VisualListModel;\r\nimport org.pdfsam.guiclient.configuration.Configuration;\r\nimport org.pdfsam.guiclient.dto.VisualPageListItem;\r\nimport org.pdfsam.i18n.GettextResource;\r\n\r\n/**\r\n * Transfer handler for the JVisualSelectionList\r\n * @author Andrea Vacondio\r\n * @see JVisualSelectionList\r\n */\r\npublic class VisualListTransferHandler extends VisualListExportTransferHandler {\r\n\r\n    private static final long serialVersionUID = -6893213515673375373L;\r\n\r\n    private static final Logger log = Logger.getLogger(VisualListTransferHandler.class.getPackage().getName());\r\n\r\n    private int addIndex = 0;\r\n\r\n    public VisualListTransferHandler() {\r\n    }\r\n\r\n    /**\r\n     * @param loader\r\n     */\r\n    public VisualListTransferHandler(PdfThumbnailsLoader loader) {\r\n        super(loader);\r\n    }\r\n\r\n    public int getSourceActions(JComponent c) {\r\n        return MOVE;\r\n    }\r\n\r\n    protected void exportDone(JComponent source, Transferable data, int action) {\r\n        //clean only if MOVE\r\n        //it works only if the selection type of the JList is ListSelectionModel.SINGLE_INTERVAL_SELECTION\r\n        if (action == MOVE) {\r\n            try {\r\n                JVisualSelectionList listComponent = (JVisualSelectionList) source;\r\n                TransferableData transferredData = (TransferableData) data.getTransferData(DnDSupportUtility.VISUAL_LIST_FLAVOR);\r\n                if (transferredData != null && transferredData.getIndexesList() != null) {\r\n                    int[] dataList = transferredData.getIndexesList();\r\n                    int delta = (dataList[0] > addIndex) ? dataList.length : 0;\r\n                    ((VisualListModel) listComponent.getModel()).removeElements(dataList[0] + delta, dataList[dataList.length - 1] + delta, true);\r\n                }\r\n                addIndex = 0;\r\n            } catch (Exception e) {\r\n                log.error(GettextResource.gettext(Configuration.getInstance().getI18nResourceBundle(), \"Error during drag and drop.\"), e);\r\n            }\r\n        }\r\n    }\r\n\r\n    public boolean importData(TransferHandler.TransferSupport info) {\r\n        boolean retVal = false;\r\n        if (info.isDrop()) {\r\n            try {\r\n                Transferable t = info.getTransferable();\r\n                if (t.isDataFlavorSupported(DataFlavor.javaFileListFlavor) || t.isDataFlavorSupported(DnDSupportUtility.URI_LIST_FLAVOR)) {\r\n                    retVal = super.importData(info);\r\n                } else if (t.isDataFlavorSupported(DnDSupportUtility.VISUAL_LIST_FLAVOR)) {\r\n                    retVal = importVisualListItems(info);\r\n                }\r\n            } catch (Exception e) {\r\n                log.error(GettextResource.gettext(Configuration.getInstance().getI18nResourceBundle(), \"Error during drag and drop.\"), e);\r\n            }\r\n        }\r\n        return retVal;\r\n    }\r\n\r\n    /**\r\n     * import the data from the transferable\r\n     * @param comp\r\n     * @param t\r\n     * @return\r\n     */\r\n    private boolean importVisualListItems(TransferHandler.TransferSupport info) {\r\n        boolean retVal = false;\r\n        Transferable transferable = info.getTransferable();\r\n        //source and destination are equals or the handler accepts different components\r\n        try {\r\n            JList.DropLocation dropLocation = (JList.DropLocation) info.getDropLocation();\r\n            int index = dropLocation.getIndex();\r\n            VisualListModel destModel = ((VisualListModel) ((JVisualSelectionList) info.getComponent()).getModel());\r\n            TransferableData transferredData = (TransferableData) transferable.getTransferData(DnDSupportUtility.VISUAL_LIST_FLAVOR);\r\n            if (transferredData != null) {\r\n                VisualPageListItem[] dataList = transferredData.getDataList();\r\n                if (dataList != null && dataList.length > 0) {\r\n                    //drop at the end\r\n                    if (index == -1) {\r\n                        addIndex = destModel.getSize();\r\n                    } else {\r\n                        //check limits\r\n                        int listSize = destModel.getSize();\r\n                        if (index > listSize || index < 0) {\r\n                            addIndex = listSize;\r\n                        } else {\r\n                            addIndex = index;\r\n                        }\r\n                    }\r\n                    retVal = true;\r\n                }\r\n                if (retVal) {\r\n                    Collection<VisualPageListItem> items = Arrays.asList(dataList);\r\n                    //if moving to another component\r\n                    if (info.getSourceDropActions() == COPY) {\r\n                        Vector<VisualPageListItem> newList = new Vector<VisualPageListItem>(items.size());\r\n                        for (VisualPageListItem currItem : items) {\r\n                            newList.add((VisualPageListItem) currItem.clone());\r\n                        }\r\n                        items = newList;\r\n                    }\r\n                    destModel.addAllElements(addIndex, items);\r\n                }\r\n            }\r\n        } catch (Exception e) {\r\n            retVal = false;\r\n            log.error(GettextResource.gettext(Configuration.getInstance().getI18nResourceBundle(), \"Error during drag and drop.\"), e);\r\n        }\r\n        return retVal;\r\n    }\r\n\r\n    public boolean canImport(TransferHandler.TransferSupport info) {\r\n        boolean retVal = false;\r\n        if (super.canImport(info)) {\r\n            retVal = true;\r\n        } else if (info.getComponent() instanceof JVisualSelectionList) {\r\n            if (info.isDataFlavorSupported(DnDSupportUtility.VISUAL_LIST_FLAVOR)) {\r\n                if (info.getSourceDropActions() == MOVE) {\r\n                    try {\r\n                        TransferableData transferredData = (TransferableData) info.getTransferable().getTransferData(DnDSupportUtility.VISUAL_LIST_FLAVOR);\r\n                        JList.DropLocation dropLocation = (JList.DropLocation) info.getDropLocation();\r\n                        int index = dropLocation.getIndex();\r\n                        if (transferredData != null) {\r\n                            int[] indices = transferredData.getIndexesList();\r\n                            //prevent dropping over itself\r\n                            retVal = !(indices != null && index >= indices[0] && index <= indices[indices.length - 1] + 1);\r\n                        }\r\n                    } catch (UnsupportedFlavorException e) {\r\n                        retVal = false;\r\n                    } catch (IOException e) {\r\n                        retVal = false;\r\n                    }\r\n                } else {\r\n                    retVal = true;\r\n                }\r\n            } else {\r\n                retVal = false;\r\n            }\r\n        }\r\n        return retVal;\r\n    }\r\n}\r\n",
		"id": "EvoSuiteBenchmark/109_pdfsam/src/main/java/org/pdfsam/guiclient/commons/dnd/handlers/VisualListTransferHandlerTest0.java",
		"test_prompt": "// VisualListTransferHandlerTest0.java\npackage org.pdfsam.guiclient.commons.dnd.handlers;\n\nimport java.awt.datatransfer.DataFlavor;\nimport java.awt.datatransfer.Transferable;\nimport java.awt.datatransfer.UnsupportedFlavorException;\nimport java.io.IOException;\nimport java.util.Arrays;\nimport java.util.Collection;\nimport java.util.Vector;\nimport javax.swing.JComponent;\nimport javax.swing.JList;\nimport javax.swing.TransferHandler;\nimport org.apache.log4j.Logger;\nimport org.pdfsam.guiclient.commons.business.loaders.PdfThumbnailsLoader;\nimport org.pdfsam.guiclient.commons.components.JVisualSelectionList;\nimport org.pdfsam.guiclient.commons.dnd.DnDSupportUtility;\nimport org.pdfsam.guiclient.commons.dnd.transferables.VisualPageListTransferable.TransferableData;\nimport org.pdfsam.guiclient.commons.models.VisualListModel;\nimport org.pdfsam.guiclient.configuration.Configuration;\nimport org.pdfsam.guiclient.dto.VisualPageListItem;\nimport org.pdfsam.i18n.GettextResource;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link VisualListTransferHandler}.\n* It contains ten unit test cases for the {@link VisualListTransferHandler#importData(TransferHandler.TransferSupport)} method.\n*/\nclass VisualListTransferHandlerTest0 {"
	},
	{
		"original_code": "// VisualListTransferHandler.java\n/*\r\n * Created on 23-Jan-2009\r\n * Copyright (C) 2009 by Andrea Vacondio.\r\n *\r\n * This program is free software; you can redistribute it and/or modify it under the terms of the \r\n * GNU General Public License as published by the Free Software Foundation; \r\n * either version 2 of the License.\r\n * This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; \r\n * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. \r\n * See the GNU General Public License for more details.\r\n * You should have received a copy of the GNU General Public License along with this program; \r\n * if not, write to the Free Software Foundation, Inc., \r\n *  59 Temple Place, Suite 330, Boston, MA 02111-1307 USA\r\n */\r\npackage org.pdfsam.guiclient.commons.dnd.handlers;\r\n\r\nimport java.awt.datatransfer.DataFlavor;\r\nimport java.awt.datatransfer.Transferable;\r\nimport java.awt.datatransfer.UnsupportedFlavorException;\r\nimport java.io.IOException;\r\nimport java.util.Arrays;\r\nimport java.util.Collection;\r\nimport java.util.Vector;\r\nimport javax.swing.JComponent;\r\nimport javax.swing.JList;\r\nimport javax.swing.TransferHandler;\r\nimport org.apache.log4j.Logger;\r\nimport org.pdfsam.guiclient.commons.business.loaders.PdfThumbnailsLoader;\r\nimport org.pdfsam.guiclient.commons.components.JVisualSelectionList;\r\nimport org.pdfsam.guiclient.commons.dnd.DnDSupportUtility;\r\nimport org.pdfsam.guiclient.commons.dnd.transferables.VisualPageListTransferable.TransferableData;\r\nimport org.pdfsam.guiclient.commons.models.VisualListModel;\r\nimport org.pdfsam.guiclient.configuration.Configuration;\r\nimport org.pdfsam.guiclient.dto.VisualPageListItem;\r\nimport org.pdfsam.i18n.GettextResource;\r\n\r\n/**\r\n * Transfer handler for the JVisualSelectionList\r\n * @author Andrea Vacondio\r\n * @see JVisualSelectionList\r\n */\r\npublic class VisualListTransferHandler extends VisualListExportTransferHandler {\r\n\r\n    private static final long serialVersionUID = -6893213515673375373L;\r\n\r\n    private static final Logger log = Logger.getLogger(VisualListTransferHandler.class.getPackage().getName());\r\n\r\n    private int addIndex = 0;\r\n\r\n    public VisualListTransferHandler() {\r\n    }\r\n\r\n    /**\r\n     * @param loader\r\n     */\r\n    public VisualListTransferHandler(PdfThumbnailsLoader loader) {\r\n        super(loader);\r\n    }\r\n\r\n    public int getSourceActions(JComponent c) {\r\n        return MOVE;\r\n    }\r\n\r\n    protected void exportDone(JComponent source, Transferable data, int action) {\r\n        //clean only if MOVE\r\n        //it works only if the selection type of the JList is ListSelectionModel.SINGLE_INTERVAL_SELECTION\r\n        if (action == MOVE) {\r\n            try {\r\n                JVisualSelectionList listComponent = (JVisualSelectionList) source;\r\n                TransferableData transferredData = (TransferableData) data.getTransferData(DnDSupportUtility.VISUAL_LIST_FLAVOR);\r\n                if (transferredData != null && transferredData.getIndexesList() != null) {\r\n                    int[] dataList = transferredData.getIndexesList();\r\n                    int delta = (dataList[0] > addIndex) ? dataList.length : 0;\r\n                    ((VisualListModel) listComponent.getModel()).removeElements(dataList[0] + delta, dataList[dataList.length - 1] + delta, true);\r\n                }\r\n                addIndex = 0;\r\n            } catch (Exception e) {\r\n                log.error(GettextResource.gettext(Configuration.getInstance().getI18nResourceBundle(), \"Error during drag and drop.\"), e);\r\n            }\r\n        }\r\n    }\r\n\r\n    public boolean importData(TransferHandler.TransferSupport info) {\r\n        boolean retVal = false;\r\n        if (info.isDrop()) {\r\n            try {\r\n                Transferable t = info.getTransferable();\r\n                if (t.isDataFlavorSupported(DataFlavor.javaFileListFlavor) || t.isDataFlavorSupported(DnDSupportUtility.URI_LIST_FLAVOR)) {\r\n                    retVal = super.importData(info);\r\n                } else if (t.isDataFlavorSupported(DnDSupportUtility.VISUAL_LIST_FLAVOR)) {\r\n                    retVal = importVisualListItems(info);\r\n                }\r\n            } catch (Exception e) {\r\n                log.error(GettextResource.gettext(Configuration.getInstance().getI18nResourceBundle(), \"Error during drag and drop.\"), e);\r\n            }\r\n        }\r\n        return retVal;\r\n    }\r\n\r\n    /**\r\n     * import the data from the transferable\r\n     * @param comp\r\n     * @param t\r\n     * @return\r\n     */\r\n    private boolean importVisualListItems(TransferHandler.TransferSupport info) {\r\n        boolean retVal = false;\r\n        Transferable transferable = info.getTransferable();\r\n        //source and destination are equals or the handler accepts different components\r\n        try {\r\n            JList.DropLocation dropLocation = (JList.DropLocation) info.getDropLocation();\r\n            int index = dropLocation.getIndex();\r\n            VisualListModel destModel = ((VisualListModel) ((JVisualSelectionList) info.getComponent()).getModel());\r\n            TransferableData transferredData = (TransferableData) transferable.getTransferData(DnDSupportUtility.VISUAL_LIST_FLAVOR);\r\n            if (transferredData != null) {\r\n                VisualPageListItem[] dataList = transferredData.getDataList();\r\n                if (dataList != null && dataList.length > 0) {\r\n                    //drop at the end\r\n                    if (index == -1) {\r\n                        addIndex = destModel.getSize();\r\n                    } else {\r\n                        //check limits\r\n                        int listSize = destModel.getSize();\r\n                        if (index > listSize || index < 0) {\r\n                            addIndex = listSize;\r\n                        } else {\r\n                            addIndex = index;\r\n                        }\r\n                    }\r\n                    retVal = true;\r\n                }\r\n                if (retVal) {\r\n                    Collection<VisualPageListItem> items = Arrays.asList(dataList);\r\n                    //if moving to another component\r\n                    if (info.getSourceDropActions() == COPY) {\r\n                        Vector<VisualPageListItem> newList = new Vector<VisualPageListItem>(items.size());\r\n                        for (VisualPageListItem currItem : items) {\r\n                            newList.add((VisualPageListItem) currItem.clone());\r\n                        }\r\n                        items = newList;\r\n                    }\r\n                    destModel.addAllElements(addIndex, items);\r\n                }\r\n            }\r\n        } catch (Exception e) {\r\n            retVal = false;\r\n            log.error(GettextResource.gettext(Configuration.getInstance().getI18nResourceBundle(), \"Error during drag and drop.\"), e);\r\n        }\r\n        return retVal;\r\n    }\r\n\r\n    public boolean canImport(TransferHandler.TransferSupport info) {\r\n        boolean retVal = false;\r\n        if (super.canImport(info)) {\r\n            retVal = true;\r\n        } else if (info.getComponent() instanceof JVisualSelectionList) {\r\n            if (info.isDataFlavorSupported(DnDSupportUtility.VISUAL_LIST_FLAVOR)) {\r\n                if (info.getSourceDropActions() == MOVE) {\r\n                    try {\r\n                        TransferableData transferredData = (TransferableData) info.getTransferable().getTransferData(DnDSupportUtility.VISUAL_LIST_FLAVOR);\r\n                        JList.DropLocation dropLocation = (JList.DropLocation) info.getDropLocation();\r\n                        int index = dropLocation.getIndex();\r\n                        if (transferredData != null) {\r\n                            int[] indices = transferredData.getIndexesList();\r\n                            //prevent dropping over itself\r\n                            retVal = !(indices != null && index >= indices[0] && index <= indices[indices.length - 1] + 1);\r\n                        }\r\n                    } catch (UnsupportedFlavorException e) {\r\n                        retVal = false;\r\n                    } catch (IOException e) {\r\n                        retVal = false;\r\n                    }\r\n                } else {\r\n                    retVal = true;\r\n                }\r\n            } else {\r\n                retVal = false;\r\n            }\r\n        }\r\n        return retVal;\r\n    }\r\n}\r\n",
		"id": "EvoSuiteBenchmark/109_pdfsam/src/main/java/org/pdfsam/guiclient/commons/dnd/handlers/VisualListTransferHandlerTest1.java",
		"test_prompt": "// VisualListTransferHandlerTest1.java\npackage org.pdfsam.guiclient.commons.dnd.handlers;\n\nimport java.awt.datatransfer.DataFlavor;\nimport java.awt.datatransfer.Transferable;\nimport java.awt.datatransfer.UnsupportedFlavorException;\nimport java.io.IOException;\nimport java.util.Arrays;\nimport java.util.Collection;\nimport java.util.Vector;\nimport javax.swing.JComponent;\nimport javax.swing.JList;\nimport javax.swing.TransferHandler;\nimport org.apache.log4j.Logger;\nimport org.pdfsam.guiclient.commons.business.loaders.PdfThumbnailsLoader;\nimport org.pdfsam.guiclient.commons.components.JVisualSelectionList;\nimport org.pdfsam.guiclient.commons.dnd.DnDSupportUtility;\nimport org.pdfsam.guiclient.commons.dnd.transferables.VisualPageListTransferable.TransferableData;\nimport org.pdfsam.guiclient.commons.models.VisualListModel;\nimport org.pdfsam.guiclient.configuration.Configuration;\nimport org.pdfsam.guiclient.dto.VisualPageListItem;\nimport org.pdfsam.i18n.GettextResource;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link VisualListTransferHandler}.\n* It contains ten unit test cases for the {@link VisualListTransferHandler#canImport(TransferHandler.TransferSupport)} method.\n*/\nclass VisualListTransferHandlerTest1 {"
	},
	{
		"original_code": "// JPdfSelectionPanel.java\n/*\r\n * Created on 18-Nov-2007\r\n * Copyright (C) 2006 by Andrea Vacondio.\r\n *\r\n * This program is free software; you can redistribute it and/or modify it under the terms of the \r\n * GNU General Public License as published by the Free Software Foundation; \r\n * either version 2 of the License.\r\n * This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; \r\n * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. \r\n * See the GNU General Public License for more details.\r\n * You should have received a copy of the GNU General Public License along with this program; \r\n * if not, write to the Free Software Foundation, Inc., \r\n *  59 Temple Place, Suite 330, Boston, MA 02111-1307 USA\r\n */\r\npackage org.pdfsam.guiclient.commons.panels;\r\n\r\nimport java.awt.Color;\r\nimport java.awt.Component;\r\nimport java.awt.Dimension;\r\nimport java.awt.GridBagConstraints;\r\nimport java.awt.GridBagLayout;\r\nimport java.awt.Insets;\r\nimport java.awt.dnd.DropTarget;\r\nimport java.awt.event.KeyEvent;\r\nimport javax.swing.AbstractAction;\r\nimport javax.swing.Action;\r\nimport javax.swing.BorderFactory;\r\nimport javax.swing.Box;\r\nimport javax.swing.BoxLayout;\r\nimport javax.swing.DefaultCellEditor;\r\nimport javax.swing.DefaultListModel;\r\nimport javax.swing.JButton;\r\nimport javax.swing.JList;\r\nimport javax.swing.JMenuItem;\r\nimport javax.swing.JPanel;\r\nimport javax.swing.JPasswordField;\r\nimport javax.swing.JPopupMenu;\r\nimport javax.swing.JScrollPane;\r\nimport javax.swing.JTable;\r\nimport javax.swing.KeyStroke;\r\nimport javax.swing.ListSelectionModel;\r\nimport javax.swing.SwingUtilities;\r\nimport javax.swing.table.TableColumn;\r\nimport javax.swing.table.TableColumnModel;\r\nimport org.apache.log4j.Logger;\r\nimport org.pdfsam.guiclient.commons.business.actions.AddSelectionTableAction;\r\nimport org.pdfsam.guiclient.commons.business.actions.ClearSelectionTableAction;\r\nimport org.pdfsam.guiclient.commons.business.actions.DocumentPropertiesSelectionTableAction;\r\nimport org.pdfsam.guiclient.commons.business.actions.MoveDownSelectionTableAction;\r\nimport org.pdfsam.guiclient.commons.business.actions.MoveUpSelectionTableAction;\r\nimport org.pdfsam.guiclient.commons.business.actions.ReloadDocumentSelectionTableAction;\r\nimport org.pdfsam.guiclient.commons.business.actions.RemoveSelectionTableAction;\r\nimport org.pdfsam.guiclient.commons.business.listeners.adapters.PdfSelectionMouseHeaderAdapter;\r\nimport org.pdfsam.guiclient.commons.business.listeners.adapters.TableShowPopupMouseAdapter;\r\nimport org.pdfsam.guiclient.commons.business.loaders.PdfLoader;\r\nimport org.pdfsam.guiclient.commons.components.JPdfSelectionTable;\r\nimport org.pdfsam.guiclient.commons.components.JPdfSelectionToolTipHeader;\r\nimport org.pdfsam.guiclient.commons.dnd.droppers.JPdfSelectionTableDropper;\r\nimport org.pdfsam.guiclient.commons.models.AbstractPdfSelectionTableModel;\r\nimport org.pdfsam.guiclient.commons.models.SimplePdfSelectionTableModel;\r\nimport org.pdfsam.guiclient.commons.models.SortablePdfSelectionTableModel;\r\nimport org.pdfsam.guiclient.commons.renderers.ArrowHeaderRenderer;\r\nimport org.pdfsam.guiclient.commons.renderers.JPdfSelectionTableRenderer;\r\nimport org.pdfsam.guiclient.configuration.Configuration;\r\nimport org.pdfsam.guiclient.dto.PdfSelectionTableItem;\r\nimport org.pdfsam.i18n.GettextResource;\r\n\r\n/**\r\n * Customizable Panel for the selection of pdf documents\r\n *\r\n * @author Andrea Vacondio\r\n */\r\npublic class JPdfSelectionPanel extends JPanel {\r\n\r\n    private static final long serialVersionUID = 7231708747828566035L;\r\n\r\n    private static final Logger log = Logger.getLogger(JPdfSelectionPanel.class.getPackage().getName());\r\n\r\n    public static final int UNLIMTED_SELECTABLE_FILE_NUMBER = Integer.MAX_VALUE;\r\n\r\n    public static final int SINGLE_SELECTABLE_FILE = 1;\r\n\r\n    public static final int DOUBLE_SELECTABLE_FILE = 2;\r\n\r\n    public static final String OUTPUT_PATH_PROPERTY = \"defaultOutputPath\";\r\n\r\n    private boolean showEveryButton = false;\r\n\r\n    private boolean showRemoveButton = false;\r\n\r\n    private boolean showMoveButtons = false;\r\n\r\n    private int maxSelectableFiles = 0;\r\n\r\n    private int showedColums;\r\n\r\n    private final JPdfSelectionTable mainTable = new JPdfSelectionTable();\r\n\r\n    private AbstractPdfSelectionTableModel tableModel;\r\n\r\n    private final JList workInProgressList = new JList();\r\n\r\n    private JScrollPane tableScrollPane;\r\n\r\n    private JScrollPane wipListScrollPane;\r\n\r\n    private Configuration config;\r\n\r\n    private final JPanel buttonPanel = new JPanel();\r\n\r\n    private final JPopupMenu popupMenu = new JPopupMenu();\r\n\r\n    private PdfLoader loader = null;\r\n\r\n    private DropTarget tableDropTarget;\r\n\r\n    private DropTarget scrollPanelDropTarget;\r\n\r\n    private final JButton addFileButton = new JButton();\r\n\r\n    private final JButton removeFileButton = new JButton();\r\n\r\n    private final JButton moveUpButton = new JButton();\r\n\r\n    private final JButton moveDownButton = new JButton();\r\n\r\n    private final JButton clearButton = new JButton();\r\n\r\n    private boolean setOutputPathMenuItemEnabled = false;\r\n\r\n    /**\r\n     * default constructor shows every button and permits an unlimited number of\r\n     * selected input documents\r\n     */\r\n    public JPdfSelectionPanel() {\r\n        this(UNLIMTED_SELECTABLE_FILE_NUMBER, SimplePdfSelectionTableModel.DEFAULT_SHOWED_COLUMNS_NUMBER, true);\r\n    }\r\n\r\n    /**\r\n     * showEveryButton is true if maxSelectableFiles is > 1\r\n     *\r\n     * @param maxSelectableFiles\r\n     * @param showedColums\r\n     */\r\n    public JPdfSelectionPanel(int maxSelectableFiles, int showedColums) {\r\n        this(maxSelectableFiles, showedColums, (maxSelectableFiles > 1));\r\n    }\r\n\r\n    /**\r\n     * @param maxSelectableFiles\r\n     * @param showedColums\r\n     * @param showEveryButton\r\n     *            if true shows every button, if false hide remove button and\r\n     *            move buttons\r\n     */\r\n    public JPdfSelectionPanel(int maxSelectableFiles, int showedColums, boolean showEveryButton) {\r\n        this(maxSelectableFiles, showedColums, showEveryButton, false, false);\r\n    }\r\n\r\n    /**\r\n     * @param maxSelectableFiles\r\n     * @param showedColums\r\n     * @param showRemoveButton\r\n     *            if true shows the remove button\r\n     * @param showMoveButtons\r\n     *            if true shows the move buttons\r\n     */\r\n    public JPdfSelectionPanel(int maxSelectableFiles, int showedColums, boolean showRemoveButton, boolean showMoveButtons) {\r\n        this(maxSelectableFiles, showedColums, false, showRemoveButton, showMoveButtons);\r\n    }\r\n\r\n    /**\r\n     * Full constructor\r\n     *\r\n     * @param maxSelectableFiles\r\n     * @param showedColums\r\n     * @param showEveryButton\r\n     * @param showRemoveButton\r\n     * @param showMoveButtons\r\n     */\r\n    private JPdfSelectionPanel(int maxSelectableFiles, int showedColums, boolean showEveryButton, boolean showRemoveButton, boolean showMoveButtons) {\r\n        this.config = Configuration.getInstance();\r\n        this.maxSelectableFiles = maxSelectableFiles;\r\n        this.showedColums = showedColums;\r\n        this.showEveryButton = showEveryButton;\r\n        this.showRemoveButton = showRemoveButton;\r\n        this.showMoveButtons = showMoveButtons;\r\n        loader = new PdfLoader(this);\r\n        init();\r\n    }\r\n\r\n    /**\r\n     * @return the showEveryButton\r\n     */\r\n    public boolean isShowEveryButton() {\r\n        return showEveryButton;\r\n    }\r\n\r\n    /**\r\n     * @return the maxSelectableFiles\r\n     */\r\n    public int getMaxSelectableFiles() {\r\n        return maxSelectableFiles;\r\n    }\r\n\r\n    /**\r\n     * @return the mainTable\r\n     */\r\n    public JPdfSelectionTable getMainTable() {\r\n        return mainTable;\r\n    }\r\n\r\n    private void init() {\r\n        setLayout(new GridBagLayout());\r\n        if (maxSelectableFiles > 1) {\r\n            tableModel = new SortablePdfSelectionTableModel(showedColums, maxSelectableFiles);\r\n        } else {\r\n            tableModel = new SimplePdfSelectionTableModel(showedColums, maxSelectableFiles);\r\n        }\r\n        mainTable.setModel(tableModel);\r\n        mainTable.setDragEnabled(true);\r\n        mainTable.putClientProperty(\"terminateEditOnFocusLost\", Boolean.TRUE);\r\n        mainTable.setRowHeight(20);\r\n        mainTable.setRowMargin(5);\r\n        mainTable.setAutoResizeMode(JTable.AUTO_RESIZE_OFF);\r\n        mainTable.setSelectionForeground(Color.BLACK);\r\n        mainTable.setSelectionBackground(new Color(211, 221, 222));\r\n        mainTable.getSelectionModel().setSelectionMode(ListSelectionModel.SINGLE_INTERVAL_SELECTION);\r\n        mainTable.setGridColor(Color.LIGHT_GRAY);\r\n        mainTable.setIntercellSpacing(new Dimension(3, 3));\r\n        mainTable.setDefaultRenderer(String.class, new JPdfSelectionTableRenderer());\r\n        TableColumnModel mainTableColModel = mainTable.getColumnModel();\r\n        mainTableColModel.getColumn(AbstractPdfSelectionTableModel.PASSWORD).setCellEditor(new DefaultCellEditor(new JPasswordField()));\r\n        TableColumn tc = mainTableColModel.getColumn(AbstractPdfSelectionTableModel.ROW_NUM);\r\n        tc.setPreferredWidth(25);\r\n        tc.setMaxWidth(35);\r\n        // header tooltip\r\n        JPdfSelectionToolTipHeader toolTipHeader = new JPdfSelectionToolTipHeader(mainTableColModel);\r\n        toolTipHeader.setReorderingAllowed(false);\r\n        toolTipHeader.setToolTips(tableModel.getToolTips());\r\n        mainTable.setTableHeader(toolTipHeader);\r\n        if (maxSelectableFiles > 1) {\r\n            toolTipHeader.setDefaultRenderer(new ArrowHeaderRenderer(tableModel, toolTipHeader.getDefaultRenderer()));\r\n            toolTipHeader.addMouseListener(new PdfSelectionMouseHeaderAdapter(tableModel));\r\n        }\r\n        tableScrollPane = new JScrollPane(mainTable);\r\n        tableScrollPane.setHorizontalScrollBarPolicy(JScrollPane.HORIZONTAL_SCROLLBAR_AS_NEEDED);\r\n        // drag and drop\r\n        JPdfSelectionTableDropper dropper = new JPdfSelectionTableDropper(loader);\r\n        tableDropTarget = new DropTarget(tableScrollPane, dropper);\r\n        scrollPanelDropTarget = new DropTarget(mainTable, dropper);\r\n        buttonPanel.setLayout(new BoxLayout(buttonPanel, BoxLayout.Y_AXIS));\r\n        buttonPanel.setBorder(BorderFactory.createEmptyBorder(0, 10, 10, 10));\r\n        initAddButton();\r\n        ReloadDocumentSelectionTableAction reloadAction = new ReloadDocumentSelectionTableAction(mainTable, loader);\r\n        popupMenu.add(new JMenuItem(reloadAction));\r\n        addToMainTableKeyBindings(reloadAction);\r\n        DocumentPropertiesSelectionTableAction documentPropertiesAction = new DocumentPropertiesSelectionTableAction(mainTable);\r\n        popupMenu.add(new JMenuItem(documentPropertiesAction));\r\n        addToMainTableKeyBindings(documentPropertiesAction);\r\n        if (showEveryButton) {\r\n            initRemoveButton();\r\n            initMoveUpButton();\r\n            initMoveDownButton();\r\n        } else {\r\n            if (showRemoveButton) {\r\n                initRemoveButton();\r\n            }\r\n            if (showMoveButtons) {\r\n                initMoveUpButton();\r\n                initMoveDownButton();\r\n            }\r\n        }\r\n        initClearButton();\r\n        mainTable.addMouseListener(new TableShowPopupMouseAdapter(popupMenu, mainTable));\r\n        // work in progress list\r\n        workInProgressList.setFocusable(false);\r\n        workInProgressList.setModel(new DefaultListModel());\r\n        workInProgressList.setBackground(this.getBackground());\r\n        wipListScrollPane = new JScrollPane(workInProgressList);\r\n        int wipHeight = 30;\r\n        if (isSingleSelectableFile()) {\r\n            wipHeight = 18;\r\n        }\r\n        wipListScrollPane.setMaximumSize(new Dimension(1500, wipHeight));\r\n        wipListScrollPane.setPreferredSize(new Dimension(700, wipHeight));\r\n        wipListScrollPane.setMinimumSize(new Dimension(300, wipHeight));\r\n        wipListScrollPane.setBorder(BorderFactory.createEmptyBorder());\r\n        GridBagConstraints tableConstraints = new GridBagConstraints();\r\n        tableConstraints.fill = GridBagConstraints.BOTH;\r\n        tableConstraints.gridx = 0;\r\n        tableConstraints.gridy = 0;\r\n        tableConstraints.gridwidth = 2;\r\n        tableConstraints.gridheight = 2;\r\n        tableConstraints.insets = new Insets(5, 5, 5, 5);\r\n        tableConstraints.weightx = 1.0;\r\n        tableConstraints.weighty = 1.0;\r\n        add(tableScrollPane, tableConstraints);\r\n        GridBagConstraints buttonsConstraints = new GridBagConstraints();\r\n        buttonsConstraints.fill = GridBagConstraints.BOTH;\r\n        buttonsConstraints.gridx = 2;\r\n        buttonsConstraints.gridy = 0;\r\n        buttonsConstraints.gridwidth = 1;\r\n        buttonsConstraints.gridheight = 1;\r\n        buttonsConstraints.insets = new Insets(5, 5, 5, 5);\r\n        buttonsConstraints.weightx = 0.0;\r\n        buttonsConstraints.weighty = 1.0;\r\n        add(buttonPanel, buttonsConstraints);\r\n        GridBagConstraints wipConstraints = new GridBagConstraints();\r\n        wipConstraints.fill = GridBagConstraints.BOTH;\r\n        wipConstraints.gridx = 0;\r\n        wipConstraints.gridy = 2;\r\n        wipConstraints.gridwidth = 3;\r\n        wipConstraints.gridheight = 1;\r\n        wipConstraints.insets = new Insets(1, 5, 1, 5);\r\n        wipConstraints.weightx = 1.0;\r\n        wipConstraints.weighty = 0.0;\r\n        add(wipListScrollPane, wipConstraints);\r\n    }\r\n\r\n    /**\r\n     * add a text to say the user we are working\r\n     */\r\n    public synchronized void addWipText(final String wipText) {\r\n        Runnable runner = new Runnable() {\r\n\r\n            public void run() {\r\n                ((DefaultListModel) workInProgressList.getModel()).addElement(wipText);\r\n            }\r\n        };\r\n        SwingUtilities.invokeLater(runner);\r\n    }\r\n\r\n    /**\r\n     * remove the text to say the user we are working\r\n     */\r\n    public synchronized void removeWipText(final String wipText) {\r\n        Runnable runner = new Runnable() {\r\n\r\n            public void run() {\r\n                if (!((DefaultListModel) workInProgressList.getModel()).removeElement(wipText)) {\r\n                    log.debug(GettextResource.gettext(config.getI18nResourceBundle(), \"Unable to remove JList text \") + wipText);\r\n                }\r\n            }\r\n        };\r\n        SwingUtilities.invokeLater(runner);\r\n    }\r\n\r\n    /**\r\n     * removes every element from the list\r\n     */\r\n    public synchronized void removeWipTextAll() {\r\n        Runnable runner = new Runnable() {\r\n\r\n            public void run() {\r\n                ((DefaultListModel) workInProgressList.getModel()).removeAllElements();\r\n            }\r\n        };\r\n        SwingUtilities.invokeLater(runner);\r\n    }\r\n\r\n    /**\r\n     * @return true if some thread is loading a pdf document\r\n     */\r\n    public boolean isAdding() {\r\n        return loader.isExecuting();\r\n    }\r\n\r\n    /**\r\n     * adds a item to the table\r\n     *\r\n     * @param item\r\n     */\r\n    public synchronized void addTableRow(PdfSelectionTableItem item) {\r\n        ((AbstractPdfSelectionTableModel) mainTable.getModel()).addRow(item);\r\n        log.info(GettextResource.gettext(config.getI18nResourceBundle(), \"File selected: \") + item.getInputFile().getName());\r\n    }\r\n\r\n    /**\r\n     * update an item to the table\r\n     *\r\n     * @param index\r\n     * @param item\r\n     */\r\n    public synchronized void updateTableRow(int index, PdfSelectionTableItem item) {\r\n        ((AbstractPdfSelectionTableModel) mainTable.getModel()).updateRowAt(index, item);\r\n        log.info(GettextResource.gettext(config.getI18nResourceBundle(), \"File reloaded: \") + item.getInputFile().getName());\r\n    }\r\n\r\n    /**\r\n     * adds a button to the button panel\r\n     *\r\n     * @param button\r\n     */\r\n    private void addButtonToButtonPanel(JButton button) {\r\n        button.setMargin(new Insets(2, 2, 2, 2));\r\n        button.setAlignmentX(Component.CENTER_ALIGNMENT);\r\n        button.setMinimumSize(new Dimension(120, 25));\r\n        button.setMaximumSize(new Dimension(160, 25));\r\n        addEnterKeyBinding(button);\r\n        buttonPanel.add(button);\r\n        buttonPanel.add(Box.createRigidArea(new Dimension(0, 5)));\r\n    }\r\n\r\n    /**\r\n     * binds the enter key to the action when the button has focus\r\n     *\r\n     * @param button\r\n     */\r\n    private void addEnterKeyBinding(JButton button) {\r\n        Action action = button.getAction();\r\n        if (action != null) {\r\n            button.getInputMap().put(KeyStroke.getKeyStroke(KeyEvent.VK_ENTER, 0), action.getValue(Action.NAME));\r\n            button.getActionMap().put(action.getValue(Action.NAME), action);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @return rows of the model\r\n     */\r\n    public PdfSelectionTableItem[] getTableRows() {\r\n        return ((AbstractPdfSelectionTableModel) mainTable.getModel()).getRows();\r\n    }\r\n\r\n    /**\r\n     * binds the accelerator key of the action to the main table\r\n     *\r\n     * @param action\r\n     */\r\n    private void addToMainTableKeyBindings(Action action) {\r\n        if (action != null) {\r\n            Object keyStroke = action.getValue(Action.ACCELERATOR_KEY);\r\n            if (keyStroke != null) {\r\n                KeyStroke stroke = (KeyStroke) keyStroke;\r\n                mainTable.getInputMap(WHEN_ANCESTOR_OF_FOCUSED_COMPONENT).put(stroke, action.getValue(Action.NAME));\r\n                mainTable.getActionMap().put(action.getValue(Action.NAME), action);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * initialize the remove button\r\n     */\r\n    private void initRemoveButton() {\r\n        // remove button\r\n        RemoveSelectionTableAction removeAction = new RemoveSelectionTableAction(mainTable);\r\n        removeFileButton.setAction(removeAction);\r\n        addButtonToButtonPanel(removeFileButton);\r\n        addToMainTableKeyBindings(removeAction);\r\n        popupMenu.add(new JMenuItem(removeAction));\r\n    }\r\n\r\n    /**\r\n     * initialize the add button\r\n     */\r\n    private void initAddButton() {\r\n        // add button\r\n        AddSelectionTableAction addAction = new AddSelectionTableAction(loader, (maxSelectableFiles == 1));\r\n        addFileButton.setAction(addAction);\r\n        addButtonToButtonPanel(addFileButton);\r\n        addToMainTableKeyBindings(addAction);\r\n    }\r\n\r\n    /**\r\n     * initialize the moveUpButton\r\n     */\r\n    private void initMoveUpButton() {\r\n        // move up button\r\n        MoveUpSelectionTableAction moveUpAction = new MoveUpSelectionTableAction(mainTable);\r\n        moveUpButton.setAction(moveUpAction);\r\n        addButtonToButtonPanel(moveUpButton);\r\n        addToMainTableKeyBindings(moveUpAction);\r\n        popupMenu.add(new JMenuItem(moveUpAction));\r\n    }\r\n\r\n    /**\r\n     * initialize the move down button\r\n     */\r\n    private void initMoveDownButton() {\r\n        // move down button\r\n        MoveDownSelectionTableAction moveDownAction = new MoveDownSelectionTableAction(mainTable);\r\n        moveDownButton.setAction(moveDownAction);\r\n        addButtonToButtonPanel(moveDownButton);\r\n        addToMainTableKeyBindings(moveDownAction);\r\n        popupMenu.add(new JMenuItem(moveDownAction));\r\n    }\r\n\r\n    /**\r\n     * initialize the clear button\r\n     */\r\n    private void initClearButton() {\r\n        // clear button\r\n        ClearSelectionTableAction clearAction = new ClearSelectionTableAction(mainTable);\r\n        clearButton.setAction(clearAction);\r\n        addButtonToButtonPanel(clearButton);\r\n        addToMainTableKeyBindings(clearAction);\r\n    }\r\n\r\n    /**\r\n     * @return the pdf loader\r\n     */\r\n    public PdfLoader getLoader() {\r\n        return loader;\r\n    }\r\n\r\n    /**\r\n     * @return the addFileButton\r\n     */\r\n    public JButton getAddFileButton() {\r\n        return addFileButton;\r\n    }\r\n\r\n    /**\r\n     * @return the removeFileButton\r\n     */\r\n    public JButton getRemoveFileButton() {\r\n        return removeFileButton;\r\n    }\r\n\r\n    /**\r\n     * @return the moveUpButton\r\n     */\r\n    public JButton getMoveUpButton() {\r\n        return moveUpButton;\r\n    }\r\n\r\n    /**\r\n     * @return the moveDownButton\r\n     */\r\n    public JButton getMoveDownButton() {\r\n        return moveDownButton;\r\n    }\r\n\r\n    /**\r\n     * @return the clearButton\r\n     */\r\n    public JButton getClearButton() {\r\n        return clearButton;\r\n    }\r\n\r\n    /**\r\n     * @return the tableDropTarget\r\n     */\r\n    public DropTarget getTableDropTarget() {\r\n        return tableDropTarget;\r\n    }\r\n\r\n    /**\r\n     * @return the scrollPanelDropTarget\r\n     */\r\n    public DropTarget getScrollPanelDropTarget() {\r\n        return scrollPanelDropTarget;\r\n    }\r\n\r\n    /**\r\n     * @return the setOutputPathMenuItemEnabled\r\n     */\r\n    public boolean isSetOutputPathMenuItemEnabled() {\r\n        return setOutputPathMenuItemEnabled;\r\n    }\r\n\r\n    /**\r\n     * @return true if it's a single selectable file panel\r\n     */\r\n    public boolean isSingleSelectableFile() {\r\n        return (SINGLE_SELECTABLE_FILE == maxSelectableFiles);\r\n    }\r\n\r\n    /**\r\n     * @param action\r\n     *            adds an item to the popup menu for the given action\r\n     */\r\n    public void addPopupMenuAction(AbstractAction action) {\r\n        if (action != null) {\r\n            addToMainTableKeyBindings(action);\r\n            popupMenu.add(new JMenuItem(action));\r\n        }\r\n    }\r\n\r\n    /**\r\n     * If true, the selection table default renderer will show a tooltip message\r\n     * when the document is not opened with full permissions\r\n     *\r\n     * @param required\r\n     */\r\n    public void setFullAccessRequired(boolean required) {\r\n        mainTable.setDefaultRenderer(String.class, new JPdfSelectionTableRenderer(required));\r\n    }\r\n\r\n    /**\r\n     * Clear the selection table\r\n     */\r\n    public void clearSelectionTable() {\r\n        ((AbstractPdfSelectionTableModel) getMainTable().getModel()).clearData();\r\n    }\r\n}\r\n",
		"id": "EvoSuiteBenchmark/109_pdfsam/src/main/java/org/pdfsam/guiclient/commons/panels/JPdfSelectionPanelTest0.java",
		"test_prompt": "// JPdfSelectionPanelTest0.java\npackage org.pdfsam.guiclient.commons.panels;\n\nimport java.awt.Color;\nimport java.awt.Component;\nimport java.awt.Dimension;\nimport java.awt.GridBagConstraints;\nimport java.awt.GridBagLayout;\nimport java.awt.Insets;\nimport java.awt.dnd.DropTarget;\nimport java.awt.event.KeyEvent;\nimport javax.swing.AbstractAction;\nimport javax.swing.Action;\nimport javax.swing.BorderFactory;\nimport javax.swing.Box;\nimport javax.swing.BoxLayout;\nimport javax.swing.DefaultCellEditor;\nimport javax.swing.DefaultListModel;\nimport javax.swing.JButton;\nimport javax.swing.JList;\nimport javax.swing.JMenuItem;\nimport javax.swing.JPanel;\nimport javax.swing.JPasswordField;\nimport javax.swing.JPopupMenu;\nimport javax.swing.JScrollPane;\nimport javax.swing.JTable;\nimport javax.swing.KeyStroke;\nimport javax.swing.ListSelectionModel;\nimport javax.swing.SwingUtilities;\nimport javax.swing.table.TableColumn;\nimport javax.swing.table.TableColumnModel;\nimport org.apache.log4j.Logger;\nimport org.pdfsam.guiclient.commons.business.actions.AddSelectionTableAction;\nimport org.pdfsam.guiclient.commons.business.actions.ClearSelectionTableAction;\nimport org.pdfsam.guiclient.commons.business.actions.DocumentPropertiesSelectionTableAction;\nimport org.pdfsam.guiclient.commons.business.actions.MoveDownSelectionTableAction;\nimport org.pdfsam.guiclient.commons.business.actions.MoveUpSelectionTableAction;\nimport org.pdfsam.guiclient.commons.business.actions.ReloadDocumentSelectionTableAction;\nimport org.pdfsam.guiclient.commons.business.actions.RemoveSelectionTableAction;\nimport org.pdfsam.guiclient.commons.business.listeners.adapters.PdfSelectionMouseHeaderAdapter;\nimport org.pdfsam.guiclient.commons.business.listeners.adapters.TableShowPopupMouseAdapter;\nimport org.pdfsam.guiclient.commons.business.loaders.PdfLoader;\nimport org.pdfsam.guiclient.commons.components.JPdfSelectionTable;\nimport org.pdfsam.guiclient.commons.components.JPdfSelectionToolTipHeader;\nimport org.pdfsam.guiclient.commons.dnd.droppers.JPdfSelectionTableDropper;\nimport org.pdfsam.guiclient.commons.models.AbstractPdfSelectionTableModel;\nimport org.pdfsam.guiclient.commons.models.SimplePdfSelectionTableModel;\nimport org.pdfsam.guiclient.commons.models.SortablePdfSelectionTableModel;\nimport org.pdfsam.guiclient.commons.renderers.ArrowHeaderRenderer;\nimport org.pdfsam.guiclient.commons.renderers.JPdfSelectionTableRenderer;\nimport org.pdfsam.guiclient.configuration.Configuration;\nimport org.pdfsam.guiclient.dto.PdfSelectionTableItem;\nimport org.pdfsam.i18n.GettextResource;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link JPdfSelectionPanel}.\n* It contains ten unit test cases for the {@link JPdfSelectionPanel#isShowEveryButton()} method.\n*/\nclass JPdfSelectionPanelTest0 {"
	},
	{
		"original_code": "// JPdfSelectionPanel.java\n/*\r\n * Created on 18-Nov-2007\r\n * Copyright (C) 2006 by Andrea Vacondio.\r\n *\r\n * This program is free software; you can redistribute it and/or modify it under the terms of the \r\n * GNU General Public License as published by the Free Software Foundation; \r\n * either version 2 of the License.\r\n * This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; \r\n * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. \r\n * See the GNU General Public License for more details.\r\n * You should have received a copy of the GNU General Public License along with this program; \r\n * if not, write to the Free Software Foundation, Inc., \r\n *  59 Temple Place, Suite 330, Boston, MA 02111-1307 USA\r\n */\r\npackage org.pdfsam.guiclient.commons.panels;\r\n\r\nimport java.awt.Color;\r\nimport java.awt.Component;\r\nimport java.awt.Dimension;\r\nimport java.awt.GridBagConstraints;\r\nimport java.awt.GridBagLayout;\r\nimport java.awt.Insets;\r\nimport java.awt.dnd.DropTarget;\r\nimport java.awt.event.KeyEvent;\r\nimport javax.swing.AbstractAction;\r\nimport javax.swing.Action;\r\nimport javax.swing.BorderFactory;\r\nimport javax.swing.Box;\r\nimport javax.swing.BoxLayout;\r\nimport javax.swing.DefaultCellEditor;\r\nimport javax.swing.DefaultListModel;\r\nimport javax.swing.JButton;\r\nimport javax.swing.JList;\r\nimport javax.swing.JMenuItem;\r\nimport javax.swing.JPanel;\r\nimport javax.swing.JPasswordField;\r\nimport javax.swing.JPopupMenu;\r\nimport javax.swing.JScrollPane;\r\nimport javax.swing.JTable;\r\nimport javax.swing.KeyStroke;\r\nimport javax.swing.ListSelectionModel;\r\nimport javax.swing.SwingUtilities;\r\nimport javax.swing.table.TableColumn;\r\nimport javax.swing.table.TableColumnModel;\r\nimport org.apache.log4j.Logger;\r\nimport org.pdfsam.guiclient.commons.business.actions.AddSelectionTableAction;\r\nimport org.pdfsam.guiclient.commons.business.actions.ClearSelectionTableAction;\r\nimport org.pdfsam.guiclient.commons.business.actions.DocumentPropertiesSelectionTableAction;\r\nimport org.pdfsam.guiclient.commons.business.actions.MoveDownSelectionTableAction;\r\nimport org.pdfsam.guiclient.commons.business.actions.MoveUpSelectionTableAction;\r\nimport org.pdfsam.guiclient.commons.business.actions.ReloadDocumentSelectionTableAction;\r\nimport org.pdfsam.guiclient.commons.business.actions.RemoveSelectionTableAction;\r\nimport org.pdfsam.guiclient.commons.business.listeners.adapters.PdfSelectionMouseHeaderAdapter;\r\nimport org.pdfsam.guiclient.commons.business.listeners.adapters.TableShowPopupMouseAdapter;\r\nimport org.pdfsam.guiclient.commons.business.loaders.PdfLoader;\r\nimport org.pdfsam.guiclient.commons.components.JPdfSelectionTable;\r\nimport org.pdfsam.guiclient.commons.components.JPdfSelectionToolTipHeader;\r\nimport org.pdfsam.guiclient.commons.dnd.droppers.JPdfSelectionTableDropper;\r\nimport org.pdfsam.guiclient.commons.models.AbstractPdfSelectionTableModel;\r\nimport org.pdfsam.guiclient.commons.models.SimplePdfSelectionTableModel;\r\nimport org.pdfsam.guiclient.commons.models.SortablePdfSelectionTableModel;\r\nimport org.pdfsam.guiclient.commons.renderers.ArrowHeaderRenderer;\r\nimport org.pdfsam.guiclient.commons.renderers.JPdfSelectionTableRenderer;\r\nimport org.pdfsam.guiclient.configuration.Configuration;\r\nimport org.pdfsam.guiclient.dto.PdfSelectionTableItem;\r\nimport org.pdfsam.i18n.GettextResource;\r\n\r\n/**\r\n * Customizable Panel for the selection of pdf documents\r\n *\r\n * @author Andrea Vacondio\r\n */\r\npublic class JPdfSelectionPanel extends JPanel {\r\n\r\n    private static final long serialVersionUID = 7231708747828566035L;\r\n\r\n    private static final Logger log = Logger.getLogger(JPdfSelectionPanel.class.getPackage().getName());\r\n\r\n    public static final int UNLIMTED_SELECTABLE_FILE_NUMBER = Integer.MAX_VALUE;\r\n\r\n    public static final int SINGLE_SELECTABLE_FILE = 1;\r\n\r\n    public static final int DOUBLE_SELECTABLE_FILE = 2;\r\n\r\n    public static final String OUTPUT_PATH_PROPERTY = \"defaultOutputPath\";\r\n\r\n    private boolean showEveryButton = false;\r\n\r\n    private boolean showRemoveButton = false;\r\n\r\n    private boolean showMoveButtons = false;\r\n\r\n    private int maxSelectableFiles = 0;\r\n\r\n    private int showedColums;\r\n\r\n    private final JPdfSelectionTable mainTable = new JPdfSelectionTable();\r\n\r\n    private AbstractPdfSelectionTableModel tableModel;\r\n\r\n    private final JList workInProgressList = new JList();\r\n\r\n    private JScrollPane tableScrollPane;\r\n\r\n    private JScrollPane wipListScrollPane;\r\n\r\n    private Configuration config;\r\n\r\n    private final JPanel buttonPanel = new JPanel();\r\n\r\n    private final JPopupMenu popupMenu = new JPopupMenu();\r\n\r\n    private PdfLoader loader = null;\r\n\r\n    private DropTarget tableDropTarget;\r\n\r\n    private DropTarget scrollPanelDropTarget;\r\n\r\n    private final JButton addFileButton = new JButton();\r\n\r\n    private final JButton removeFileButton = new JButton();\r\n\r\n    private final JButton moveUpButton = new JButton();\r\n\r\n    private final JButton moveDownButton = new JButton();\r\n\r\n    private final JButton clearButton = new JButton();\r\n\r\n    private boolean setOutputPathMenuItemEnabled = false;\r\n\r\n    /**\r\n     * default constructor shows every button and permits an unlimited number of\r\n     * selected input documents\r\n     */\r\n    public JPdfSelectionPanel() {\r\n        this(UNLIMTED_SELECTABLE_FILE_NUMBER, SimplePdfSelectionTableModel.DEFAULT_SHOWED_COLUMNS_NUMBER, true);\r\n    }\r\n\r\n    /**\r\n     * showEveryButton is true if maxSelectableFiles is > 1\r\n     *\r\n     * @param maxSelectableFiles\r\n     * @param showedColums\r\n     */\r\n    public JPdfSelectionPanel(int maxSelectableFiles, int showedColums) {\r\n        this(maxSelectableFiles, showedColums, (maxSelectableFiles > 1));\r\n    }\r\n\r\n    /**\r\n     * @param maxSelectableFiles\r\n     * @param showedColums\r\n     * @param showEveryButton\r\n     *            if true shows every button, if false hide remove button and\r\n     *            move buttons\r\n     */\r\n    public JPdfSelectionPanel(int maxSelectableFiles, int showedColums, boolean showEveryButton) {\r\n        this(maxSelectableFiles, showedColums, showEveryButton, false, false);\r\n    }\r\n\r\n    /**\r\n     * @param maxSelectableFiles\r\n     * @param showedColums\r\n     * @param showRemoveButton\r\n     *            if true shows the remove button\r\n     * @param showMoveButtons\r\n     *            if true shows the move buttons\r\n     */\r\n    public JPdfSelectionPanel(int maxSelectableFiles, int showedColums, boolean showRemoveButton, boolean showMoveButtons) {\r\n        this(maxSelectableFiles, showedColums, false, showRemoveButton, showMoveButtons);\r\n    }\r\n\r\n    /**\r\n     * Full constructor\r\n     *\r\n     * @param maxSelectableFiles\r\n     * @param showedColums\r\n     * @param showEveryButton\r\n     * @param showRemoveButton\r\n     * @param showMoveButtons\r\n     */\r\n    private JPdfSelectionPanel(int maxSelectableFiles, int showedColums, boolean showEveryButton, boolean showRemoveButton, boolean showMoveButtons) {\r\n        this.config = Configuration.getInstance();\r\n        this.maxSelectableFiles = maxSelectableFiles;\r\n        this.showedColums = showedColums;\r\n        this.showEveryButton = showEveryButton;\r\n        this.showRemoveButton = showRemoveButton;\r\n        this.showMoveButtons = showMoveButtons;\r\n        loader = new PdfLoader(this);\r\n        init();\r\n    }\r\n\r\n    /**\r\n     * @return the showEveryButton\r\n     */\r\n    public boolean isShowEveryButton() {\r\n        return showEveryButton;\r\n    }\r\n\r\n    /**\r\n     * @return the maxSelectableFiles\r\n     */\r\n    public int getMaxSelectableFiles() {\r\n        return maxSelectableFiles;\r\n    }\r\n\r\n    /**\r\n     * @return the mainTable\r\n     */\r\n    public JPdfSelectionTable getMainTable() {\r\n        return mainTable;\r\n    }\r\n\r\n    private void init() {\r\n        setLayout(new GridBagLayout());\r\n        if (maxSelectableFiles > 1) {\r\n            tableModel = new SortablePdfSelectionTableModel(showedColums, maxSelectableFiles);\r\n        } else {\r\n            tableModel = new SimplePdfSelectionTableModel(showedColums, maxSelectableFiles);\r\n        }\r\n        mainTable.setModel(tableModel);\r\n        mainTable.setDragEnabled(true);\r\n        mainTable.putClientProperty(\"terminateEditOnFocusLost\", Boolean.TRUE);\r\n        mainTable.setRowHeight(20);\r\n        mainTable.setRowMargin(5);\r\n        mainTable.setAutoResizeMode(JTable.AUTO_RESIZE_OFF);\r\n        mainTable.setSelectionForeground(Color.BLACK);\r\n        mainTable.setSelectionBackground(new Color(211, 221, 222));\r\n        mainTable.getSelectionModel().setSelectionMode(ListSelectionModel.SINGLE_INTERVAL_SELECTION);\r\n        mainTable.setGridColor(Color.LIGHT_GRAY);\r\n        mainTable.setIntercellSpacing(new Dimension(3, 3));\r\n        mainTable.setDefaultRenderer(String.class, new JPdfSelectionTableRenderer());\r\n        TableColumnModel mainTableColModel = mainTable.getColumnModel();\r\n        mainTableColModel.getColumn(AbstractPdfSelectionTableModel.PASSWORD).setCellEditor(new DefaultCellEditor(new JPasswordField()));\r\n        TableColumn tc = mainTableColModel.getColumn(AbstractPdfSelectionTableModel.ROW_NUM);\r\n        tc.setPreferredWidth(25);\r\n        tc.setMaxWidth(35);\r\n        // header tooltip\r\n        JPdfSelectionToolTipHeader toolTipHeader = new JPdfSelectionToolTipHeader(mainTableColModel);\r\n        toolTipHeader.setReorderingAllowed(false);\r\n        toolTipHeader.setToolTips(tableModel.getToolTips());\r\n        mainTable.setTableHeader(toolTipHeader);\r\n        if (maxSelectableFiles > 1) {\r\n            toolTipHeader.setDefaultRenderer(new ArrowHeaderRenderer(tableModel, toolTipHeader.getDefaultRenderer()));\r\n            toolTipHeader.addMouseListener(new PdfSelectionMouseHeaderAdapter(tableModel));\r\n        }\r\n        tableScrollPane = new JScrollPane(mainTable);\r\n        tableScrollPane.setHorizontalScrollBarPolicy(JScrollPane.HORIZONTAL_SCROLLBAR_AS_NEEDED);\r\n        // drag and drop\r\n        JPdfSelectionTableDropper dropper = new JPdfSelectionTableDropper(loader);\r\n        tableDropTarget = new DropTarget(tableScrollPane, dropper);\r\n        scrollPanelDropTarget = new DropTarget(mainTable, dropper);\r\n        buttonPanel.setLayout(new BoxLayout(buttonPanel, BoxLayout.Y_AXIS));\r\n        buttonPanel.setBorder(BorderFactory.createEmptyBorder(0, 10, 10, 10));\r\n        initAddButton();\r\n        ReloadDocumentSelectionTableAction reloadAction = new ReloadDocumentSelectionTableAction(mainTable, loader);\r\n        popupMenu.add(new JMenuItem(reloadAction));\r\n        addToMainTableKeyBindings(reloadAction);\r\n        DocumentPropertiesSelectionTableAction documentPropertiesAction = new DocumentPropertiesSelectionTableAction(mainTable);\r\n        popupMenu.add(new JMenuItem(documentPropertiesAction));\r\n        addToMainTableKeyBindings(documentPropertiesAction);\r\n        if (showEveryButton) {\r\n            initRemoveButton();\r\n            initMoveUpButton();\r\n            initMoveDownButton();\r\n        } else {\r\n            if (showRemoveButton) {\r\n                initRemoveButton();\r\n            }\r\n            if (showMoveButtons) {\r\n                initMoveUpButton();\r\n                initMoveDownButton();\r\n            }\r\n        }\r\n        initClearButton();\r\n        mainTable.addMouseListener(new TableShowPopupMouseAdapter(popupMenu, mainTable));\r\n        // work in progress list\r\n        workInProgressList.setFocusable(false);\r\n        workInProgressList.setModel(new DefaultListModel());\r\n        workInProgressList.setBackground(this.getBackground());\r\n        wipListScrollPane = new JScrollPane(workInProgressList);\r\n        int wipHeight = 30;\r\n        if (isSingleSelectableFile()) {\r\n            wipHeight = 18;\r\n        }\r\n        wipListScrollPane.setMaximumSize(new Dimension(1500, wipHeight));\r\n        wipListScrollPane.setPreferredSize(new Dimension(700, wipHeight));\r\n        wipListScrollPane.setMinimumSize(new Dimension(300, wipHeight));\r\n        wipListScrollPane.setBorder(BorderFactory.createEmptyBorder());\r\n        GridBagConstraints tableConstraints = new GridBagConstraints();\r\n        tableConstraints.fill = GridBagConstraints.BOTH;\r\n        tableConstraints.gridx = 0;\r\n        tableConstraints.gridy = 0;\r\n        tableConstraints.gridwidth = 2;\r\n        tableConstraints.gridheight = 2;\r\n        tableConstraints.insets = new Insets(5, 5, 5, 5);\r\n        tableConstraints.weightx = 1.0;\r\n        tableConstraints.weighty = 1.0;\r\n        add(tableScrollPane, tableConstraints);\r\n        GridBagConstraints buttonsConstraints = new GridBagConstraints();\r\n        buttonsConstraints.fill = GridBagConstraints.BOTH;\r\n        buttonsConstraints.gridx = 2;\r\n        buttonsConstraints.gridy = 0;\r\n        buttonsConstraints.gridwidth = 1;\r\n        buttonsConstraints.gridheight = 1;\r\n        buttonsConstraints.insets = new Insets(5, 5, 5, 5);\r\n        buttonsConstraints.weightx = 0.0;\r\n        buttonsConstraints.weighty = 1.0;\r\n        add(buttonPanel, buttonsConstraints);\r\n        GridBagConstraints wipConstraints = new GridBagConstraints();\r\n        wipConstraints.fill = GridBagConstraints.BOTH;\r\n        wipConstraints.gridx = 0;\r\n        wipConstraints.gridy = 2;\r\n        wipConstraints.gridwidth = 3;\r\n        wipConstraints.gridheight = 1;\r\n        wipConstraints.insets = new Insets(1, 5, 1, 5);\r\n        wipConstraints.weightx = 1.0;\r\n        wipConstraints.weighty = 0.0;\r\n        add(wipListScrollPane, wipConstraints);\r\n    }\r\n\r\n    /**\r\n     * add a text to say the user we are working\r\n     */\r\n    public synchronized void addWipText(final String wipText) {\r\n        Runnable runner = new Runnable() {\r\n\r\n            public void run() {\r\n                ((DefaultListModel) workInProgressList.getModel()).addElement(wipText);\r\n            }\r\n        };\r\n        SwingUtilities.invokeLater(runner);\r\n    }\r\n\r\n    /**\r\n     * remove the text to say the user we are working\r\n     */\r\n    public synchronized void removeWipText(final String wipText) {\r\n        Runnable runner = new Runnable() {\r\n\r\n            public void run() {\r\n                if (!((DefaultListModel) workInProgressList.getModel()).removeElement(wipText)) {\r\n                    log.debug(GettextResource.gettext(config.getI18nResourceBundle(), \"Unable to remove JList text \") + wipText);\r\n                }\r\n            }\r\n        };\r\n        SwingUtilities.invokeLater(runner);\r\n    }\r\n\r\n    /**\r\n     * removes every element from the list\r\n     */\r\n    public synchronized void removeWipTextAll() {\r\n        Runnable runner = new Runnable() {\r\n\r\n            public void run() {\r\n                ((DefaultListModel) workInProgressList.getModel()).removeAllElements();\r\n            }\r\n        };\r\n        SwingUtilities.invokeLater(runner);\r\n    }\r\n\r\n    /**\r\n     * @return true if some thread is loading a pdf document\r\n     */\r\n    public boolean isAdding() {\r\n        return loader.isExecuting();\r\n    }\r\n\r\n    /**\r\n     * adds a item to the table\r\n     *\r\n     * @param item\r\n     */\r\n    public synchronized void addTableRow(PdfSelectionTableItem item) {\r\n        ((AbstractPdfSelectionTableModel) mainTable.getModel()).addRow(item);\r\n        log.info(GettextResource.gettext(config.getI18nResourceBundle(), \"File selected: \") + item.getInputFile().getName());\r\n    }\r\n\r\n    /**\r\n     * update an item to the table\r\n     *\r\n     * @param index\r\n     * @param item\r\n     */\r\n    public synchronized void updateTableRow(int index, PdfSelectionTableItem item) {\r\n        ((AbstractPdfSelectionTableModel) mainTable.getModel()).updateRowAt(index, item);\r\n        log.info(GettextResource.gettext(config.getI18nResourceBundle(), \"File reloaded: \") + item.getInputFile().getName());\r\n    }\r\n\r\n    /**\r\n     * adds a button to the button panel\r\n     *\r\n     * @param button\r\n     */\r\n    private void addButtonToButtonPanel(JButton button) {\r\n        button.setMargin(new Insets(2, 2, 2, 2));\r\n        button.setAlignmentX(Component.CENTER_ALIGNMENT);\r\n        button.setMinimumSize(new Dimension(120, 25));\r\n        button.setMaximumSize(new Dimension(160, 25));\r\n        addEnterKeyBinding(button);\r\n        buttonPanel.add(button);\r\n        buttonPanel.add(Box.createRigidArea(new Dimension(0, 5)));\r\n    }\r\n\r\n    /**\r\n     * binds the enter key to the action when the button has focus\r\n     *\r\n     * @param button\r\n     */\r\n    private void addEnterKeyBinding(JButton button) {\r\n        Action action = button.getAction();\r\n        if (action != null) {\r\n            button.getInputMap().put(KeyStroke.getKeyStroke(KeyEvent.VK_ENTER, 0), action.getValue(Action.NAME));\r\n            button.getActionMap().put(action.getValue(Action.NAME), action);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @return rows of the model\r\n     */\r\n    public PdfSelectionTableItem[] getTableRows() {\r\n        return ((AbstractPdfSelectionTableModel) mainTable.getModel()).getRows();\r\n    }\r\n\r\n    /**\r\n     * binds the accelerator key of the action to the main table\r\n     *\r\n     * @param action\r\n     */\r\n    private void addToMainTableKeyBindings(Action action) {\r\n        if (action != null) {\r\n            Object keyStroke = action.getValue(Action.ACCELERATOR_KEY);\r\n            if (keyStroke != null) {\r\n                KeyStroke stroke = (KeyStroke) keyStroke;\r\n                mainTable.getInputMap(WHEN_ANCESTOR_OF_FOCUSED_COMPONENT).put(stroke, action.getValue(Action.NAME));\r\n                mainTable.getActionMap().put(action.getValue(Action.NAME), action);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * initialize the remove button\r\n     */\r\n    private void initRemoveButton() {\r\n        // remove button\r\n        RemoveSelectionTableAction removeAction = new RemoveSelectionTableAction(mainTable);\r\n        removeFileButton.setAction(removeAction);\r\n        addButtonToButtonPanel(removeFileButton);\r\n        addToMainTableKeyBindings(removeAction);\r\n        popupMenu.add(new JMenuItem(removeAction));\r\n    }\r\n\r\n    /**\r\n     * initialize the add button\r\n     */\r\n    private void initAddButton() {\r\n        // add button\r\n        AddSelectionTableAction addAction = new AddSelectionTableAction(loader, (maxSelectableFiles == 1));\r\n        addFileButton.setAction(addAction);\r\n        addButtonToButtonPanel(addFileButton);\r\n        addToMainTableKeyBindings(addAction);\r\n    }\r\n\r\n    /**\r\n     * initialize the moveUpButton\r\n     */\r\n    private void initMoveUpButton() {\r\n        // move up button\r\n        MoveUpSelectionTableAction moveUpAction = new MoveUpSelectionTableAction(mainTable);\r\n        moveUpButton.setAction(moveUpAction);\r\n        addButtonToButtonPanel(moveUpButton);\r\n        addToMainTableKeyBindings(moveUpAction);\r\n        popupMenu.add(new JMenuItem(moveUpAction));\r\n    }\r\n\r\n    /**\r\n     * initialize the move down button\r\n     */\r\n    private void initMoveDownButton() {\r\n        // move down button\r\n        MoveDownSelectionTableAction moveDownAction = new MoveDownSelectionTableAction(mainTable);\r\n        moveDownButton.setAction(moveDownAction);\r\n        addButtonToButtonPanel(moveDownButton);\r\n        addToMainTableKeyBindings(moveDownAction);\r\n        popupMenu.add(new JMenuItem(moveDownAction));\r\n    }\r\n\r\n    /**\r\n     * initialize the clear button\r\n     */\r\n    private void initClearButton() {\r\n        // clear button\r\n        ClearSelectionTableAction clearAction = new ClearSelectionTableAction(mainTable);\r\n        clearButton.setAction(clearAction);\r\n        addButtonToButtonPanel(clearButton);\r\n        addToMainTableKeyBindings(clearAction);\r\n    }\r\n\r\n    /**\r\n     * @return the pdf loader\r\n     */\r\n    public PdfLoader getLoader() {\r\n        return loader;\r\n    }\r\n\r\n    /**\r\n     * @return the addFileButton\r\n     */\r\n    public JButton getAddFileButton() {\r\n        return addFileButton;\r\n    }\r\n\r\n    /**\r\n     * @return the removeFileButton\r\n     */\r\n    public JButton getRemoveFileButton() {\r\n        return removeFileButton;\r\n    }\r\n\r\n    /**\r\n     * @return the moveUpButton\r\n     */\r\n    public JButton getMoveUpButton() {\r\n        return moveUpButton;\r\n    }\r\n\r\n    /**\r\n     * @return the moveDownButton\r\n     */\r\n    public JButton getMoveDownButton() {\r\n        return moveDownButton;\r\n    }\r\n\r\n    /**\r\n     * @return the clearButton\r\n     */\r\n    public JButton getClearButton() {\r\n        return clearButton;\r\n    }\r\n\r\n    /**\r\n     * @return the tableDropTarget\r\n     */\r\n    public DropTarget getTableDropTarget() {\r\n        return tableDropTarget;\r\n    }\r\n\r\n    /**\r\n     * @return the scrollPanelDropTarget\r\n     */\r\n    public DropTarget getScrollPanelDropTarget() {\r\n        return scrollPanelDropTarget;\r\n    }\r\n\r\n    /**\r\n     * @return the setOutputPathMenuItemEnabled\r\n     */\r\n    public boolean isSetOutputPathMenuItemEnabled() {\r\n        return setOutputPathMenuItemEnabled;\r\n    }\r\n\r\n    /**\r\n     * @return true if it's a single selectable file panel\r\n     */\r\n    public boolean isSingleSelectableFile() {\r\n        return (SINGLE_SELECTABLE_FILE == maxSelectableFiles);\r\n    }\r\n\r\n    /**\r\n     * @param action\r\n     *            adds an item to the popup menu for the given action\r\n     */\r\n    public void addPopupMenuAction(AbstractAction action) {\r\n        if (action != null) {\r\n            addToMainTableKeyBindings(action);\r\n            popupMenu.add(new JMenuItem(action));\r\n        }\r\n    }\r\n\r\n    /**\r\n     * If true, the selection table default renderer will show a tooltip message\r\n     * when the document is not opened with full permissions\r\n     *\r\n     * @param required\r\n     */\r\n    public void setFullAccessRequired(boolean required) {\r\n        mainTable.setDefaultRenderer(String.class, new JPdfSelectionTableRenderer(required));\r\n    }\r\n\r\n    /**\r\n     * Clear the selection table\r\n     */\r\n    public void clearSelectionTable() {\r\n        ((AbstractPdfSelectionTableModel) getMainTable().getModel()).clearData();\r\n    }\r\n}\r\n",
		"id": "EvoSuiteBenchmark/109_pdfsam/src/main/java/org/pdfsam/guiclient/commons/panels/JPdfSelectionPanelTest1.java",
		"test_prompt": "// JPdfSelectionPanelTest1.java\npackage org.pdfsam.guiclient.commons.panels;\n\nimport java.awt.Color;\nimport java.awt.Component;\nimport java.awt.Dimension;\nimport java.awt.GridBagConstraints;\nimport java.awt.GridBagLayout;\nimport java.awt.Insets;\nimport java.awt.dnd.DropTarget;\nimport java.awt.event.KeyEvent;\nimport javax.swing.AbstractAction;\nimport javax.swing.Action;\nimport javax.swing.BorderFactory;\nimport javax.swing.Box;\nimport javax.swing.BoxLayout;\nimport javax.swing.DefaultCellEditor;\nimport javax.swing.DefaultListModel;\nimport javax.swing.JButton;\nimport javax.swing.JList;\nimport javax.swing.JMenuItem;\nimport javax.swing.JPanel;\nimport javax.swing.JPasswordField;\nimport javax.swing.JPopupMenu;\nimport javax.swing.JScrollPane;\nimport javax.swing.JTable;\nimport javax.swing.KeyStroke;\nimport javax.swing.ListSelectionModel;\nimport javax.swing.SwingUtilities;\nimport javax.swing.table.TableColumn;\nimport javax.swing.table.TableColumnModel;\nimport org.apache.log4j.Logger;\nimport org.pdfsam.guiclient.commons.business.actions.AddSelectionTableAction;\nimport org.pdfsam.guiclient.commons.business.actions.ClearSelectionTableAction;\nimport org.pdfsam.guiclient.commons.business.actions.DocumentPropertiesSelectionTableAction;\nimport org.pdfsam.guiclient.commons.business.actions.MoveDownSelectionTableAction;\nimport org.pdfsam.guiclient.commons.business.actions.MoveUpSelectionTableAction;\nimport org.pdfsam.guiclient.commons.business.actions.ReloadDocumentSelectionTableAction;\nimport org.pdfsam.guiclient.commons.business.actions.RemoveSelectionTableAction;\nimport org.pdfsam.guiclient.commons.business.listeners.adapters.PdfSelectionMouseHeaderAdapter;\nimport org.pdfsam.guiclient.commons.business.listeners.adapters.TableShowPopupMouseAdapter;\nimport org.pdfsam.guiclient.commons.business.loaders.PdfLoader;\nimport org.pdfsam.guiclient.commons.components.JPdfSelectionTable;\nimport org.pdfsam.guiclient.commons.components.JPdfSelectionToolTipHeader;\nimport org.pdfsam.guiclient.commons.dnd.droppers.JPdfSelectionTableDropper;\nimport org.pdfsam.guiclient.commons.models.AbstractPdfSelectionTableModel;\nimport org.pdfsam.guiclient.commons.models.SimplePdfSelectionTableModel;\nimport org.pdfsam.guiclient.commons.models.SortablePdfSelectionTableModel;\nimport org.pdfsam.guiclient.commons.renderers.ArrowHeaderRenderer;\nimport org.pdfsam.guiclient.commons.renderers.JPdfSelectionTableRenderer;\nimport org.pdfsam.guiclient.configuration.Configuration;\nimport org.pdfsam.guiclient.dto.PdfSelectionTableItem;\nimport org.pdfsam.i18n.GettextResource;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link JPdfSelectionPanel}.\n* It contains ten unit test cases for the {@link JPdfSelectionPanel#isAdding()} method.\n*/\nclass JPdfSelectionPanelTest1 {"
	},
	{
		"original_code": "// JPdfSelectionPanel.java\n/*\r\n * Created on 18-Nov-2007\r\n * Copyright (C) 2006 by Andrea Vacondio.\r\n *\r\n * This program is free software; you can redistribute it and/or modify it under the terms of the \r\n * GNU General Public License as published by the Free Software Foundation; \r\n * either version 2 of the License.\r\n * This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; \r\n * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. \r\n * See the GNU General Public License for more details.\r\n * You should have received a copy of the GNU General Public License along with this program; \r\n * if not, write to the Free Software Foundation, Inc., \r\n *  59 Temple Place, Suite 330, Boston, MA 02111-1307 USA\r\n */\r\npackage org.pdfsam.guiclient.commons.panels;\r\n\r\nimport java.awt.Color;\r\nimport java.awt.Component;\r\nimport java.awt.Dimension;\r\nimport java.awt.GridBagConstraints;\r\nimport java.awt.GridBagLayout;\r\nimport java.awt.Insets;\r\nimport java.awt.dnd.DropTarget;\r\nimport java.awt.event.KeyEvent;\r\nimport javax.swing.AbstractAction;\r\nimport javax.swing.Action;\r\nimport javax.swing.BorderFactory;\r\nimport javax.swing.Box;\r\nimport javax.swing.BoxLayout;\r\nimport javax.swing.DefaultCellEditor;\r\nimport javax.swing.DefaultListModel;\r\nimport javax.swing.JButton;\r\nimport javax.swing.JList;\r\nimport javax.swing.JMenuItem;\r\nimport javax.swing.JPanel;\r\nimport javax.swing.JPasswordField;\r\nimport javax.swing.JPopupMenu;\r\nimport javax.swing.JScrollPane;\r\nimport javax.swing.JTable;\r\nimport javax.swing.KeyStroke;\r\nimport javax.swing.ListSelectionModel;\r\nimport javax.swing.SwingUtilities;\r\nimport javax.swing.table.TableColumn;\r\nimport javax.swing.table.TableColumnModel;\r\nimport org.apache.log4j.Logger;\r\nimport org.pdfsam.guiclient.commons.business.actions.AddSelectionTableAction;\r\nimport org.pdfsam.guiclient.commons.business.actions.ClearSelectionTableAction;\r\nimport org.pdfsam.guiclient.commons.business.actions.DocumentPropertiesSelectionTableAction;\r\nimport org.pdfsam.guiclient.commons.business.actions.MoveDownSelectionTableAction;\r\nimport org.pdfsam.guiclient.commons.business.actions.MoveUpSelectionTableAction;\r\nimport org.pdfsam.guiclient.commons.business.actions.ReloadDocumentSelectionTableAction;\r\nimport org.pdfsam.guiclient.commons.business.actions.RemoveSelectionTableAction;\r\nimport org.pdfsam.guiclient.commons.business.listeners.adapters.PdfSelectionMouseHeaderAdapter;\r\nimport org.pdfsam.guiclient.commons.business.listeners.adapters.TableShowPopupMouseAdapter;\r\nimport org.pdfsam.guiclient.commons.business.loaders.PdfLoader;\r\nimport org.pdfsam.guiclient.commons.components.JPdfSelectionTable;\r\nimport org.pdfsam.guiclient.commons.components.JPdfSelectionToolTipHeader;\r\nimport org.pdfsam.guiclient.commons.dnd.droppers.JPdfSelectionTableDropper;\r\nimport org.pdfsam.guiclient.commons.models.AbstractPdfSelectionTableModel;\r\nimport org.pdfsam.guiclient.commons.models.SimplePdfSelectionTableModel;\r\nimport org.pdfsam.guiclient.commons.models.SortablePdfSelectionTableModel;\r\nimport org.pdfsam.guiclient.commons.renderers.ArrowHeaderRenderer;\r\nimport org.pdfsam.guiclient.commons.renderers.JPdfSelectionTableRenderer;\r\nimport org.pdfsam.guiclient.configuration.Configuration;\r\nimport org.pdfsam.guiclient.dto.PdfSelectionTableItem;\r\nimport org.pdfsam.i18n.GettextResource;\r\n\r\n/**\r\n * Customizable Panel for the selection of pdf documents\r\n *\r\n * @author Andrea Vacondio\r\n */\r\npublic class JPdfSelectionPanel extends JPanel {\r\n\r\n    private static final long serialVersionUID = 7231708747828566035L;\r\n\r\n    private static final Logger log = Logger.getLogger(JPdfSelectionPanel.class.getPackage().getName());\r\n\r\n    public static final int UNLIMTED_SELECTABLE_FILE_NUMBER = Integer.MAX_VALUE;\r\n\r\n    public static final int SINGLE_SELECTABLE_FILE = 1;\r\n\r\n    public static final int DOUBLE_SELECTABLE_FILE = 2;\r\n\r\n    public static final String OUTPUT_PATH_PROPERTY = \"defaultOutputPath\";\r\n\r\n    private boolean showEveryButton = false;\r\n\r\n    private boolean showRemoveButton = false;\r\n\r\n    private boolean showMoveButtons = false;\r\n\r\n    private int maxSelectableFiles = 0;\r\n\r\n    private int showedColums;\r\n\r\n    private final JPdfSelectionTable mainTable = new JPdfSelectionTable();\r\n\r\n    private AbstractPdfSelectionTableModel tableModel;\r\n\r\n    private final JList workInProgressList = new JList();\r\n\r\n    private JScrollPane tableScrollPane;\r\n\r\n    private JScrollPane wipListScrollPane;\r\n\r\n    private Configuration config;\r\n\r\n    private final JPanel buttonPanel = new JPanel();\r\n\r\n    private final JPopupMenu popupMenu = new JPopupMenu();\r\n\r\n    private PdfLoader loader = null;\r\n\r\n    private DropTarget tableDropTarget;\r\n\r\n    private DropTarget scrollPanelDropTarget;\r\n\r\n    private final JButton addFileButton = new JButton();\r\n\r\n    private final JButton removeFileButton = new JButton();\r\n\r\n    private final JButton moveUpButton = new JButton();\r\n\r\n    private final JButton moveDownButton = new JButton();\r\n\r\n    private final JButton clearButton = new JButton();\r\n\r\n    private boolean setOutputPathMenuItemEnabled = false;\r\n\r\n    /**\r\n     * default constructor shows every button and permits an unlimited number of\r\n     * selected input documents\r\n     */\r\n    public JPdfSelectionPanel() {\r\n        this(UNLIMTED_SELECTABLE_FILE_NUMBER, SimplePdfSelectionTableModel.DEFAULT_SHOWED_COLUMNS_NUMBER, true);\r\n    }\r\n\r\n    /**\r\n     * showEveryButton is true if maxSelectableFiles is > 1\r\n     *\r\n     * @param maxSelectableFiles\r\n     * @param showedColums\r\n     */\r\n    public JPdfSelectionPanel(int maxSelectableFiles, int showedColums) {\r\n        this(maxSelectableFiles, showedColums, (maxSelectableFiles > 1));\r\n    }\r\n\r\n    /**\r\n     * @param maxSelectableFiles\r\n     * @param showedColums\r\n     * @param showEveryButton\r\n     *            if true shows every button, if false hide remove button and\r\n     *            move buttons\r\n     */\r\n    public JPdfSelectionPanel(int maxSelectableFiles, int showedColums, boolean showEveryButton) {\r\n        this(maxSelectableFiles, showedColums, showEveryButton, false, false);\r\n    }\r\n\r\n    /**\r\n     * @param maxSelectableFiles\r\n     * @param showedColums\r\n     * @param showRemoveButton\r\n     *            if true shows the remove button\r\n     * @param showMoveButtons\r\n     *            if true shows the move buttons\r\n     */\r\n    public JPdfSelectionPanel(int maxSelectableFiles, int showedColums, boolean showRemoveButton, boolean showMoveButtons) {\r\n        this(maxSelectableFiles, showedColums, false, showRemoveButton, showMoveButtons);\r\n    }\r\n\r\n    /**\r\n     * Full constructor\r\n     *\r\n     * @param maxSelectableFiles\r\n     * @param showedColums\r\n     * @param showEveryButton\r\n     * @param showRemoveButton\r\n     * @param showMoveButtons\r\n     */\r\n    private JPdfSelectionPanel(int maxSelectableFiles, int showedColums, boolean showEveryButton, boolean showRemoveButton, boolean showMoveButtons) {\r\n        this.config = Configuration.getInstance();\r\n        this.maxSelectableFiles = maxSelectableFiles;\r\n        this.showedColums = showedColums;\r\n        this.showEveryButton = showEveryButton;\r\n        this.showRemoveButton = showRemoveButton;\r\n        this.showMoveButtons = showMoveButtons;\r\n        loader = new PdfLoader(this);\r\n        init();\r\n    }\r\n\r\n    /**\r\n     * @return the showEveryButton\r\n     */\r\n    public boolean isShowEveryButton() {\r\n        return showEveryButton;\r\n    }\r\n\r\n    /**\r\n     * @return the maxSelectableFiles\r\n     */\r\n    public int getMaxSelectableFiles() {\r\n        return maxSelectableFiles;\r\n    }\r\n\r\n    /**\r\n     * @return the mainTable\r\n     */\r\n    public JPdfSelectionTable getMainTable() {\r\n        return mainTable;\r\n    }\r\n\r\n    private void init() {\r\n        setLayout(new GridBagLayout());\r\n        if (maxSelectableFiles > 1) {\r\n            tableModel = new SortablePdfSelectionTableModel(showedColums, maxSelectableFiles);\r\n        } else {\r\n            tableModel = new SimplePdfSelectionTableModel(showedColums, maxSelectableFiles);\r\n        }\r\n        mainTable.setModel(tableModel);\r\n        mainTable.setDragEnabled(true);\r\n        mainTable.putClientProperty(\"terminateEditOnFocusLost\", Boolean.TRUE);\r\n        mainTable.setRowHeight(20);\r\n        mainTable.setRowMargin(5);\r\n        mainTable.setAutoResizeMode(JTable.AUTO_RESIZE_OFF);\r\n        mainTable.setSelectionForeground(Color.BLACK);\r\n        mainTable.setSelectionBackground(new Color(211, 221, 222));\r\n        mainTable.getSelectionModel().setSelectionMode(ListSelectionModel.SINGLE_INTERVAL_SELECTION);\r\n        mainTable.setGridColor(Color.LIGHT_GRAY);\r\n        mainTable.setIntercellSpacing(new Dimension(3, 3));\r\n        mainTable.setDefaultRenderer(String.class, new JPdfSelectionTableRenderer());\r\n        TableColumnModel mainTableColModel = mainTable.getColumnModel();\r\n        mainTableColModel.getColumn(AbstractPdfSelectionTableModel.PASSWORD).setCellEditor(new DefaultCellEditor(new JPasswordField()));\r\n        TableColumn tc = mainTableColModel.getColumn(AbstractPdfSelectionTableModel.ROW_NUM);\r\n        tc.setPreferredWidth(25);\r\n        tc.setMaxWidth(35);\r\n        // header tooltip\r\n        JPdfSelectionToolTipHeader toolTipHeader = new JPdfSelectionToolTipHeader(mainTableColModel);\r\n        toolTipHeader.setReorderingAllowed(false);\r\n        toolTipHeader.setToolTips(tableModel.getToolTips());\r\n        mainTable.setTableHeader(toolTipHeader);\r\n        if (maxSelectableFiles > 1) {\r\n            toolTipHeader.setDefaultRenderer(new ArrowHeaderRenderer(tableModel, toolTipHeader.getDefaultRenderer()));\r\n            toolTipHeader.addMouseListener(new PdfSelectionMouseHeaderAdapter(tableModel));\r\n        }\r\n        tableScrollPane = new JScrollPane(mainTable);\r\n        tableScrollPane.setHorizontalScrollBarPolicy(JScrollPane.HORIZONTAL_SCROLLBAR_AS_NEEDED);\r\n        // drag and drop\r\n        JPdfSelectionTableDropper dropper = new JPdfSelectionTableDropper(loader);\r\n        tableDropTarget = new DropTarget(tableScrollPane, dropper);\r\n        scrollPanelDropTarget = new DropTarget(mainTable, dropper);\r\n        buttonPanel.setLayout(new BoxLayout(buttonPanel, BoxLayout.Y_AXIS));\r\n        buttonPanel.setBorder(BorderFactory.createEmptyBorder(0, 10, 10, 10));\r\n        initAddButton();\r\n        ReloadDocumentSelectionTableAction reloadAction = new ReloadDocumentSelectionTableAction(mainTable, loader);\r\n        popupMenu.add(new JMenuItem(reloadAction));\r\n        addToMainTableKeyBindings(reloadAction);\r\n        DocumentPropertiesSelectionTableAction documentPropertiesAction = new DocumentPropertiesSelectionTableAction(mainTable);\r\n        popupMenu.add(new JMenuItem(documentPropertiesAction));\r\n        addToMainTableKeyBindings(documentPropertiesAction);\r\n        if (showEveryButton) {\r\n            initRemoveButton();\r\n            initMoveUpButton();\r\n            initMoveDownButton();\r\n        } else {\r\n            if (showRemoveButton) {\r\n                initRemoveButton();\r\n            }\r\n            if (showMoveButtons) {\r\n                initMoveUpButton();\r\n                initMoveDownButton();\r\n            }\r\n        }\r\n        initClearButton();\r\n        mainTable.addMouseListener(new TableShowPopupMouseAdapter(popupMenu, mainTable));\r\n        // work in progress list\r\n        workInProgressList.setFocusable(false);\r\n        workInProgressList.setModel(new DefaultListModel());\r\n        workInProgressList.setBackground(this.getBackground());\r\n        wipListScrollPane = new JScrollPane(workInProgressList);\r\n        int wipHeight = 30;\r\n        if (isSingleSelectableFile()) {\r\n            wipHeight = 18;\r\n        }\r\n        wipListScrollPane.setMaximumSize(new Dimension(1500, wipHeight));\r\n        wipListScrollPane.setPreferredSize(new Dimension(700, wipHeight));\r\n        wipListScrollPane.setMinimumSize(new Dimension(300, wipHeight));\r\n        wipListScrollPane.setBorder(BorderFactory.createEmptyBorder());\r\n        GridBagConstraints tableConstraints = new GridBagConstraints();\r\n        tableConstraints.fill = GridBagConstraints.BOTH;\r\n        tableConstraints.gridx = 0;\r\n        tableConstraints.gridy = 0;\r\n        tableConstraints.gridwidth = 2;\r\n        tableConstraints.gridheight = 2;\r\n        tableConstraints.insets = new Insets(5, 5, 5, 5);\r\n        tableConstraints.weightx = 1.0;\r\n        tableConstraints.weighty = 1.0;\r\n        add(tableScrollPane, tableConstraints);\r\n        GridBagConstraints buttonsConstraints = new GridBagConstraints();\r\n        buttonsConstraints.fill = GridBagConstraints.BOTH;\r\n        buttonsConstraints.gridx = 2;\r\n        buttonsConstraints.gridy = 0;\r\n        buttonsConstraints.gridwidth = 1;\r\n        buttonsConstraints.gridheight = 1;\r\n        buttonsConstraints.insets = new Insets(5, 5, 5, 5);\r\n        buttonsConstraints.weightx = 0.0;\r\n        buttonsConstraints.weighty = 1.0;\r\n        add(buttonPanel, buttonsConstraints);\r\n        GridBagConstraints wipConstraints = new GridBagConstraints();\r\n        wipConstraints.fill = GridBagConstraints.BOTH;\r\n        wipConstraints.gridx = 0;\r\n        wipConstraints.gridy = 2;\r\n        wipConstraints.gridwidth = 3;\r\n        wipConstraints.gridheight = 1;\r\n        wipConstraints.insets = new Insets(1, 5, 1, 5);\r\n        wipConstraints.weightx = 1.0;\r\n        wipConstraints.weighty = 0.0;\r\n        add(wipListScrollPane, wipConstraints);\r\n    }\r\n\r\n    /**\r\n     * add a text to say the user we are working\r\n     */\r\n    public synchronized void addWipText(final String wipText) {\r\n        Runnable runner = new Runnable() {\r\n\r\n            public void run() {\r\n                ((DefaultListModel) workInProgressList.getModel()).addElement(wipText);\r\n            }\r\n        };\r\n        SwingUtilities.invokeLater(runner);\r\n    }\r\n\r\n    /**\r\n     * remove the text to say the user we are working\r\n     */\r\n    public synchronized void removeWipText(final String wipText) {\r\n        Runnable runner = new Runnable() {\r\n\r\n            public void run() {\r\n                if (!((DefaultListModel) workInProgressList.getModel()).removeElement(wipText)) {\r\n                    log.debug(GettextResource.gettext(config.getI18nResourceBundle(), \"Unable to remove JList text \") + wipText);\r\n                }\r\n            }\r\n        };\r\n        SwingUtilities.invokeLater(runner);\r\n    }\r\n\r\n    /**\r\n     * removes every element from the list\r\n     */\r\n    public synchronized void removeWipTextAll() {\r\n        Runnable runner = new Runnable() {\r\n\r\n            public void run() {\r\n                ((DefaultListModel) workInProgressList.getModel()).removeAllElements();\r\n            }\r\n        };\r\n        SwingUtilities.invokeLater(runner);\r\n    }\r\n\r\n    /**\r\n     * @return true if some thread is loading a pdf document\r\n     */\r\n    public boolean isAdding() {\r\n        return loader.isExecuting();\r\n    }\r\n\r\n    /**\r\n     * adds a item to the table\r\n     *\r\n     * @param item\r\n     */\r\n    public synchronized void addTableRow(PdfSelectionTableItem item) {\r\n        ((AbstractPdfSelectionTableModel) mainTable.getModel()).addRow(item);\r\n        log.info(GettextResource.gettext(config.getI18nResourceBundle(), \"File selected: \") + item.getInputFile().getName());\r\n    }\r\n\r\n    /**\r\n     * update an item to the table\r\n     *\r\n     * @param index\r\n     * @param item\r\n     */\r\n    public synchronized void updateTableRow(int index, PdfSelectionTableItem item) {\r\n        ((AbstractPdfSelectionTableModel) mainTable.getModel()).updateRowAt(index, item);\r\n        log.info(GettextResource.gettext(config.getI18nResourceBundle(), \"File reloaded: \") + item.getInputFile().getName());\r\n    }\r\n\r\n    /**\r\n     * adds a button to the button panel\r\n     *\r\n     * @param button\r\n     */\r\n    private void addButtonToButtonPanel(JButton button) {\r\n        button.setMargin(new Insets(2, 2, 2, 2));\r\n        button.setAlignmentX(Component.CENTER_ALIGNMENT);\r\n        button.setMinimumSize(new Dimension(120, 25));\r\n        button.setMaximumSize(new Dimension(160, 25));\r\n        addEnterKeyBinding(button);\r\n        buttonPanel.add(button);\r\n        buttonPanel.add(Box.createRigidArea(new Dimension(0, 5)));\r\n    }\r\n\r\n    /**\r\n     * binds the enter key to the action when the button has focus\r\n     *\r\n     * @param button\r\n     */\r\n    private void addEnterKeyBinding(JButton button) {\r\n        Action action = button.getAction();\r\n        if (action != null) {\r\n            button.getInputMap().put(KeyStroke.getKeyStroke(KeyEvent.VK_ENTER, 0), action.getValue(Action.NAME));\r\n            button.getActionMap().put(action.getValue(Action.NAME), action);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @return rows of the model\r\n     */\r\n    public PdfSelectionTableItem[] getTableRows() {\r\n        return ((AbstractPdfSelectionTableModel) mainTable.getModel()).getRows();\r\n    }\r\n\r\n    /**\r\n     * binds the accelerator key of the action to the main table\r\n     *\r\n     * @param action\r\n     */\r\n    private void addToMainTableKeyBindings(Action action) {\r\n        if (action != null) {\r\n            Object keyStroke = action.getValue(Action.ACCELERATOR_KEY);\r\n            if (keyStroke != null) {\r\n                KeyStroke stroke = (KeyStroke) keyStroke;\r\n                mainTable.getInputMap(WHEN_ANCESTOR_OF_FOCUSED_COMPONENT).put(stroke, action.getValue(Action.NAME));\r\n                mainTable.getActionMap().put(action.getValue(Action.NAME), action);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * initialize the remove button\r\n     */\r\n    private void initRemoveButton() {\r\n        // remove button\r\n        RemoveSelectionTableAction removeAction = new RemoveSelectionTableAction(mainTable);\r\n        removeFileButton.setAction(removeAction);\r\n        addButtonToButtonPanel(removeFileButton);\r\n        addToMainTableKeyBindings(removeAction);\r\n        popupMenu.add(new JMenuItem(removeAction));\r\n    }\r\n\r\n    /**\r\n     * initialize the add button\r\n     */\r\n    private void initAddButton() {\r\n        // add button\r\n        AddSelectionTableAction addAction = new AddSelectionTableAction(loader, (maxSelectableFiles == 1));\r\n        addFileButton.setAction(addAction);\r\n        addButtonToButtonPanel(addFileButton);\r\n        addToMainTableKeyBindings(addAction);\r\n    }\r\n\r\n    /**\r\n     * initialize the moveUpButton\r\n     */\r\n    private void initMoveUpButton() {\r\n        // move up button\r\n        MoveUpSelectionTableAction moveUpAction = new MoveUpSelectionTableAction(mainTable);\r\n        moveUpButton.setAction(moveUpAction);\r\n        addButtonToButtonPanel(moveUpButton);\r\n        addToMainTableKeyBindings(moveUpAction);\r\n        popupMenu.add(new JMenuItem(moveUpAction));\r\n    }\r\n\r\n    /**\r\n     * initialize the move down button\r\n     */\r\n    private void initMoveDownButton() {\r\n        // move down button\r\n        MoveDownSelectionTableAction moveDownAction = new MoveDownSelectionTableAction(mainTable);\r\n        moveDownButton.setAction(moveDownAction);\r\n        addButtonToButtonPanel(moveDownButton);\r\n        addToMainTableKeyBindings(moveDownAction);\r\n        popupMenu.add(new JMenuItem(moveDownAction));\r\n    }\r\n\r\n    /**\r\n     * initialize the clear button\r\n     */\r\n    private void initClearButton() {\r\n        // clear button\r\n        ClearSelectionTableAction clearAction = new ClearSelectionTableAction(mainTable);\r\n        clearButton.setAction(clearAction);\r\n        addButtonToButtonPanel(clearButton);\r\n        addToMainTableKeyBindings(clearAction);\r\n    }\r\n\r\n    /**\r\n     * @return the pdf loader\r\n     */\r\n    public PdfLoader getLoader() {\r\n        return loader;\r\n    }\r\n\r\n    /**\r\n     * @return the addFileButton\r\n     */\r\n    public JButton getAddFileButton() {\r\n        return addFileButton;\r\n    }\r\n\r\n    /**\r\n     * @return the removeFileButton\r\n     */\r\n    public JButton getRemoveFileButton() {\r\n        return removeFileButton;\r\n    }\r\n\r\n    /**\r\n     * @return the moveUpButton\r\n     */\r\n    public JButton getMoveUpButton() {\r\n        return moveUpButton;\r\n    }\r\n\r\n    /**\r\n     * @return the moveDownButton\r\n     */\r\n    public JButton getMoveDownButton() {\r\n        return moveDownButton;\r\n    }\r\n\r\n    /**\r\n     * @return the clearButton\r\n     */\r\n    public JButton getClearButton() {\r\n        return clearButton;\r\n    }\r\n\r\n    /**\r\n     * @return the tableDropTarget\r\n     */\r\n    public DropTarget getTableDropTarget() {\r\n        return tableDropTarget;\r\n    }\r\n\r\n    /**\r\n     * @return the scrollPanelDropTarget\r\n     */\r\n    public DropTarget getScrollPanelDropTarget() {\r\n        return scrollPanelDropTarget;\r\n    }\r\n\r\n    /**\r\n     * @return the setOutputPathMenuItemEnabled\r\n     */\r\n    public boolean isSetOutputPathMenuItemEnabled() {\r\n        return setOutputPathMenuItemEnabled;\r\n    }\r\n\r\n    /**\r\n     * @return true if it's a single selectable file panel\r\n     */\r\n    public boolean isSingleSelectableFile() {\r\n        return (SINGLE_SELECTABLE_FILE == maxSelectableFiles);\r\n    }\r\n\r\n    /**\r\n     * @param action\r\n     *            adds an item to the popup menu for the given action\r\n     */\r\n    public void addPopupMenuAction(AbstractAction action) {\r\n        if (action != null) {\r\n            addToMainTableKeyBindings(action);\r\n            popupMenu.add(new JMenuItem(action));\r\n        }\r\n    }\r\n\r\n    /**\r\n     * If true, the selection table default renderer will show a tooltip message\r\n     * when the document is not opened with full permissions\r\n     *\r\n     * @param required\r\n     */\r\n    public void setFullAccessRequired(boolean required) {\r\n        mainTable.setDefaultRenderer(String.class, new JPdfSelectionTableRenderer(required));\r\n    }\r\n\r\n    /**\r\n     * Clear the selection table\r\n     */\r\n    public void clearSelectionTable() {\r\n        ((AbstractPdfSelectionTableModel) getMainTable().getModel()).clearData();\r\n    }\r\n}\r\n",
		"id": "EvoSuiteBenchmark/109_pdfsam/src/main/java/org/pdfsam/guiclient/commons/panels/JPdfSelectionPanelTest2.java",
		"test_prompt": "// JPdfSelectionPanelTest2.java\npackage org.pdfsam.guiclient.commons.panels;\n\nimport java.awt.Color;\nimport java.awt.Component;\nimport java.awt.Dimension;\nimport java.awt.GridBagConstraints;\nimport java.awt.GridBagLayout;\nimport java.awt.Insets;\nimport java.awt.dnd.DropTarget;\nimport java.awt.event.KeyEvent;\nimport javax.swing.AbstractAction;\nimport javax.swing.Action;\nimport javax.swing.BorderFactory;\nimport javax.swing.Box;\nimport javax.swing.BoxLayout;\nimport javax.swing.DefaultCellEditor;\nimport javax.swing.DefaultListModel;\nimport javax.swing.JButton;\nimport javax.swing.JList;\nimport javax.swing.JMenuItem;\nimport javax.swing.JPanel;\nimport javax.swing.JPasswordField;\nimport javax.swing.JPopupMenu;\nimport javax.swing.JScrollPane;\nimport javax.swing.JTable;\nimport javax.swing.KeyStroke;\nimport javax.swing.ListSelectionModel;\nimport javax.swing.SwingUtilities;\nimport javax.swing.table.TableColumn;\nimport javax.swing.table.TableColumnModel;\nimport org.apache.log4j.Logger;\nimport org.pdfsam.guiclient.commons.business.actions.AddSelectionTableAction;\nimport org.pdfsam.guiclient.commons.business.actions.ClearSelectionTableAction;\nimport org.pdfsam.guiclient.commons.business.actions.DocumentPropertiesSelectionTableAction;\nimport org.pdfsam.guiclient.commons.business.actions.MoveDownSelectionTableAction;\nimport org.pdfsam.guiclient.commons.business.actions.MoveUpSelectionTableAction;\nimport org.pdfsam.guiclient.commons.business.actions.ReloadDocumentSelectionTableAction;\nimport org.pdfsam.guiclient.commons.business.actions.RemoveSelectionTableAction;\nimport org.pdfsam.guiclient.commons.business.listeners.adapters.PdfSelectionMouseHeaderAdapter;\nimport org.pdfsam.guiclient.commons.business.listeners.adapters.TableShowPopupMouseAdapter;\nimport org.pdfsam.guiclient.commons.business.loaders.PdfLoader;\nimport org.pdfsam.guiclient.commons.components.JPdfSelectionTable;\nimport org.pdfsam.guiclient.commons.components.JPdfSelectionToolTipHeader;\nimport org.pdfsam.guiclient.commons.dnd.droppers.JPdfSelectionTableDropper;\nimport org.pdfsam.guiclient.commons.models.AbstractPdfSelectionTableModel;\nimport org.pdfsam.guiclient.commons.models.SimplePdfSelectionTableModel;\nimport org.pdfsam.guiclient.commons.models.SortablePdfSelectionTableModel;\nimport org.pdfsam.guiclient.commons.renderers.ArrowHeaderRenderer;\nimport org.pdfsam.guiclient.commons.renderers.JPdfSelectionTableRenderer;\nimport org.pdfsam.guiclient.configuration.Configuration;\nimport org.pdfsam.guiclient.dto.PdfSelectionTableItem;\nimport org.pdfsam.i18n.GettextResource;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link JPdfSelectionPanel}.\n* It contains ten unit test cases for the {@link JPdfSelectionPanel#isSetOutputPathMenuItemEnabled()} method.\n*/\nclass JPdfSelectionPanelTest2 {"
	},
	{
		"original_code": "// JPdfSelectionPanel.java\n/*\r\n * Created on 18-Nov-2007\r\n * Copyright (C) 2006 by Andrea Vacondio.\r\n *\r\n * This program is free software; you can redistribute it and/or modify it under the terms of the \r\n * GNU General Public License as published by the Free Software Foundation; \r\n * either version 2 of the License.\r\n * This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; \r\n * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. \r\n * See the GNU General Public License for more details.\r\n * You should have received a copy of the GNU General Public License along with this program; \r\n * if not, write to the Free Software Foundation, Inc., \r\n *  59 Temple Place, Suite 330, Boston, MA 02111-1307 USA\r\n */\r\npackage org.pdfsam.guiclient.commons.panels;\r\n\r\nimport java.awt.Color;\r\nimport java.awt.Component;\r\nimport java.awt.Dimension;\r\nimport java.awt.GridBagConstraints;\r\nimport java.awt.GridBagLayout;\r\nimport java.awt.Insets;\r\nimport java.awt.dnd.DropTarget;\r\nimport java.awt.event.KeyEvent;\r\nimport javax.swing.AbstractAction;\r\nimport javax.swing.Action;\r\nimport javax.swing.BorderFactory;\r\nimport javax.swing.Box;\r\nimport javax.swing.BoxLayout;\r\nimport javax.swing.DefaultCellEditor;\r\nimport javax.swing.DefaultListModel;\r\nimport javax.swing.JButton;\r\nimport javax.swing.JList;\r\nimport javax.swing.JMenuItem;\r\nimport javax.swing.JPanel;\r\nimport javax.swing.JPasswordField;\r\nimport javax.swing.JPopupMenu;\r\nimport javax.swing.JScrollPane;\r\nimport javax.swing.JTable;\r\nimport javax.swing.KeyStroke;\r\nimport javax.swing.ListSelectionModel;\r\nimport javax.swing.SwingUtilities;\r\nimport javax.swing.table.TableColumn;\r\nimport javax.swing.table.TableColumnModel;\r\nimport org.apache.log4j.Logger;\r\nimport org.pdfsam.guiclient.commons.business.actions.AddSelectionTableAction;\r\nimport org.pdfsam.guiclient.commons.business.actions.ClearSelectionTableAction;\r\nimport org.pdfsam.guiclient.commons.business.actions.DocumentPropertiesSelectionTableAction;\r\nimport org.pdfsam.guiclient.commons.business.actions.MoveDownSelectionTableAction;\r\nimport org.pdfsam.guiclient.commons.business.actions.MoveUpSelectionTableAction;\r\nimport org.pdfsam.guiclient.commons.business.actions.ReloadDocumentSelectionTableAction;\r\nimport org.pdfsam.guiclient.commons.business.actions.RemoveSelectionTableAction;\r\nimport org.pdfsam.guiclient.commons.business.listeners.adapters.PdfSelectionMouseHeaderAdapter;\r\nimport org.pdfsam.guiclient.commons.business.listeners.adapters.TableShowPopupMouseAdapter;\r\nimport org.pdfsam.guiclient.commons.business.loaders.PdfLoader;\r\nimport org.pdfsam.guiclient.commons.components.JPdfSelectionTable;\r\nimport org.pdfsam.guiclient.commons.components.JPdfSelectionToolTipHeader;\r\nimport org.pdfsam.guiclient.commons.dnd.droppers.JPdfSelectionTableDropper;\r\nimport org.pdfsam.guiclient.commons.models.AbstractPdfSelectionTableModel;\r\nimport org.pdfsam.guiclient.commons.models.SimplePdfSelectionTableModel;\r\nimport org.pdfsam.guiclient.commons.models.SortablePdfSelectionTableModel;\r\nimport org.pdfsam.guiclient.commons.renderers.ArrowHeaderRenderer;\r\nimport org.pdfsam.guiclient.commons.renderers.JPdfSelectionTableRenderer;\r\nimport org.pdfsam.guiclient.configuration.Configuration;\r\nimport org.pdfsam.guiclient.dto.PdfSelectionTableItem;\r\nimport org.pdfsam.i18n.GettextResource;\r\n\r\n/**\r\n * Customizable Panel for the selection of pdf documents\r\n *\r\n * @author Andrea Vacondio\r\n */\r\npublic class JPdfSelectionPanel extends JPanel {\r\n\r\n    private static final long serialVersionUID = 7231708747828566035L;\r\n\r\n    private static final Logger log = Logger.getLogger(JPdfSelectionPanel.class.getPackage().getName());\r\n\r\n    public static final int UNLIMTED_SELECTABLE_FILE_NUMBER = Integer.MAX_VALUE;\r\n\r\n    public static final int SINGLE_SELECTABLE_FILE = 1;\r\n\r\n    public static final int DOUBLE_SELECTABLE_FILE = 2;\r\n\r\n    public static final String OUTPUT_PATH_PROPERTY = \"defaultOutputPath\";\r\n\r\n    private boolean showEveryButton = false;\r\n\r\n    private boolean showRemoveButton = false;\r\n\r\n    private boolean showMoveButtons = false;\r\n\r\n    private int maxSelectableFiles = 0;\r\n\r\n    private int showedColums;\r\n\r\n    private final JPdfSelectionTable mainTable = new JPdfSelectionTable();\r\n\r\n    private AbstractPdfSelectionTableModel tableModel;\r\n\r\n    private final JList workInProgressList = new JList();\r\n\r\n    private JScrollPane tableScrollPane;\r\n\r\n    private JScrollPane wipListScrollPane;\r\n\r\n    private Configuration config;\r\n\r\n    private final JPanel buttonPanel = new JPanel();\r\n\r\n    private final JPopupMenu popupMenu = new JPopupMenu();\r\n\r\n    private PdfLoader loader = null;\r\n\r\n    private DropTarget tableDropTarget;\r\n\r\n    private DropTarget scrollPanelDropTarget;\r\n\r\n    private final JButton addFileButton = new JButton();\r\n\r\n    private final JButton removeFileButton = new JButton();\r\n\r\n    private final JButton moveUpButton = new JButton();\r\n\r\n    private final JButton moveDownButton = new JButton();\r\n\r\n    private final JButton clearButton = new JButton();\r\n\r\n    private boolean setOutputPathMenuItemEnabled = false;\r\n\r\n    /**\r\n     * default constructor shows every button and permits an unlimited number of\r\n     * selected input documents\r\n     */\r\n    public JPdfSelectionPanel() {\r\n        this(UNLIMTED_SELECTABLE_FILE_NUMBER, SimplePdfSelectionTableModel.DEFAULT_SHOWED_COLUMNS_NUMBER, true);\r\n    }\r\n\r\n    /**\r\n     * showEveryButton is true if maxSelectableFiles is > 1\r\n     *\r\n     * @param maxSelectableFiles\r\n     * @param showedColums\r\n     */\r\n    public JPdfSelectionPanel(int maxSelectableFiles, int showedColums) {\r\n        this(maxSelectableFiles, showedColums, (maxSelectableFiles > 1));\r\n    }\r\n\r\n    /**\r\n     * @param maxSelectableFiles\r\n     * @param showedColums\r\n     * @param showEveryButton\r\n     *            if true shows every button, if false hide remove button and\r\n     *            move buttons\r\n     */\r\n    public JPdfSelectionPanel(int maxSelectableFiles, int showedColums, boolean showEveryButton) {\r\n        this(maxSelectableFiles, showedColums, showEveryButton, false, false);\r\n    }\r\n\r\n    /**\r\n     * @param maxSelectableFiles\r\n     * @param showedColums\r\n     * @param showRemoveButton\r\n     *            if true shows the remove button\r\n     * @param showMoveButtons\r\n     *            if true shows the move buttons\r\n     */\r\n    public JPdfSelectionPanel(int maxSelectableFiles, int showedColums, boolean showRemoveButton, boolean showMoveButtons) {\r\n        this(maxSelectableFiles, showedColums, false, showRemoveButton, showMoveButtons);\r\n    }\r\n\r\n    /**\r\n     * Full constructor\r\n     *\r\n     * @param maxSelectableFiles\r\n     * @param showedColums\r\n     * @param showEveryButton\r\n     * @param showRemoveButton\r\n     * @param showMoveButtons\r\n     */\r\n    private JPdfSelectionPanel(int maxSelectableFiles, int showedColums, boolean showEveryButton, boolean showRemoveButton, boolean showMoveButtons) {\r\n        this.config = Configuration.getInstance();\r\n        this.maxSelectableFiles = maxSelectableFiles;\r\n        this.showedColums = showedColums;\r\n        this.showEveryButton = showEveryButton;\r\n        this.showRemoveButton = showRemoveButton;\r\n        this.showMoveButtons = showMoveButtons;\r\n        loader = new PdfLoader(this);\r\n        init();\r\n    }\r\n\r\n    /**\r\n     * @return the showEveryButton\r\n     */\r\n    public boolean isShowEveryButton() {\r\n        return showEveryButton;\r\n    }\r\n\r\n    /**\r\n     * @return the maxSelectableFiles\r\n     */\r\n    public int getMaxSelectableFiles() {\r\n        return maxSelectableFiles;\r\n    }\r\n\r\n    /**\r\n     * @return the mainTable\r\n     */\r\n    public JPdfSelectionTable getMainTable() {\r\n        return mainTable;\r\n    }\r\n\r\n    private void init() {\r\n        setLayout(new GridBagLayout());\r\n        if (maxSelectableFiles > 1) {\r\n            tableModel = new SortablePdfSelectionTableModel(showedColums, maxSelectableFiles);\r\n        } else {\r\n            tableModel = new SimplePdfSelectionTableModel(showedColums, maxSelectableFiles);\r\n        }\r\n        mainTable.setModel(tableModel);\r\n        mainTable.setDragEnabled(true);\r\n        mainTable.putClientProperty(\"terminateEditOnFocusLost\", Boolean.TRUE);\r\n        mainTable.setRowHeight(20);\r\n        mainTable.setRowMargin(5);\r\n        mainTable.setAutoResizeMode(JTable.AUTO_RESIZE_OFF);\r\n        mainTable.setSelectionForeground(Color.BLACK);\r\n        mainTable.setSelectionBackground(new Color(211, 221, 222));\r\n        mainTable.getSelectionModel().setSelectionMode(ListSelectionModel.SINGLE_INTERVAL_SELECTION);\r\n        mainTable.setGridColor(Color.LIGHT_GRAY);\r\n        mainTable.setIntercellSpacing(new Dimension(3, 3));\r\n        mainTable.setDefaultRenderer(String.class, new JPdfSelectionTableRenderer());\r\n        TableColumnModel mainTableColModel = mainTable.getColumnModel();\r\n        mainTableColModel.getColumn(AbstractPdfSelectionTableModel.PASSWORD).setCellEditor(new DefaultCellEditor(new JPasswordField()));\r\n        TableColumn tc = mainTableColModel.getColumn(AbstractPdfSelectionTableModel.ROW_NUM);\r\n        tc.setPreferredWidth(25);\r\n        tc.setMaxWidth(35);\r\n        // header tooltip\r\n        JPdfSelectionToolTipHeader toolTipHeader = new JPdfSelectionToolTipHeader(mainTableColModel);\r\n        toolTipHeader.setReorderingAllowed(false);\r\n        toolTipHeader.setToolTips(tableModel.getToolTips());\r\n        mainTable.setTableHeader(toolTipHeader);\r\n        if (maxSelectableFiles > 1) {\r\n            toolTipHeader.setDefaultRenderer(new ArrowHeaderRenderer(tableModel, toolTipHeader.getDefaultRenderer()));\r\n            toolTipHeader.addMouseListener(new PdfSelectionMouseHeaderAdapter(tableModel));\r\n        }\r\n        tableScrollPane = new JScrollPane(mainTable);\r\n        tableScrollPane.setHorizontalScrollBarPolicy(JScrollPane.HORIZONTAL_SCROLLBAR_AS_NEEDED);\r\n        // drag and drop\r\n        JPdfSelectionTableDropper dropper = new JPdfSelectionTableDropper(loader);\r\n        tableDropTarget = new DropTarget(tableScrollPane, dropper);\r\n        scrollPanelDropTarget = new DropTarget(mainTable, dropper);\r\n        buttonPanel.setLayout(new BoxLayout(buttonPanel, BoxLayout.Y_AXIS));\r\n        buttonPanel.setBorder(BorderFactory.createEmptyBorder(0, 10, 10, 10));\r\n        initAddButton();\r\n        ReloadDocumentSelectionTableAction reloadAction = new ReloadDocumentSelectionTableAction(mainTable, loader);\r\n        popupMenu.add(new JMenuItem(reloadAction));\r\n        addToMainTableKeyBindings(reloadAction);\r\n        DocumentPropertiesSelectionTableAction documentPropertiesAction = new DocumentPropertiesSelectionTableAction(mainTable);\r\n        popupMenu.add(new JMenuItem(documentPropertiesAction));\r\n        addToMainTableKeyBindings(documentPropertiesAction);\r\n        if (showEveryButton) {\r\n            initRemoveButton();\r\n            initMoveUpButton();\r\n            initMoveDownButton();\r\n        } else {\r\n            if (showRemoveButton) {\r\n                initRemoveButton();\r\n            }\r\n            if (showMoveButtons) {\r\n                initMoveUpButton();\r\n                initMoveDownButton();\r\n            }\r\n        }\r\n        initClearButton();\r\n        mainTable.addMouseListener(new TableShowPopupMouseAdapter(popupMenu, mainTable));\r\n        // work in progress list\r\n        workInProgressList.setFocusable(false);\r\n        workInProgressList.setModel(new DefaultListModel());\r\n        workInProgressList.setBackground(this.getBackground());\r\n        wipListScrollPane = new JScrollPane(workInProgressList);\r\n        int wipHeight = 30;\r\n        if (isSingleSelectableFile()) {\r\n            wipHeight = 18;\r\n        }\r\n        wipListScrollPane.setMaximumSize(new Dimension(1500, wipHeight));\r\n        wipListScrollPane.setPreferredSize(new Dimension(700, wipHeight));\r\n        wipListScrollPane.setMinimumSize(new Dimension(300, wipHeight));\r\n        wipListScrollPane.setBorder(BorderFactory.createEmptyBorder());\r\n        GridBagConstraints tableConstraints = new GridBagConstraints();\r\n        tableConstraints.fill = GridBagConstraints.BOTH;\r\n        tableConstraints.gridx = 0;\r\n        tableConstraints.gridy = 0;\r\n        tableConstraints.gridwidth = 2;\r\n        tableConstraints.gridheight = 2;\r\n        tableConstraints.insets = new Insets(5, 5, 5, 5);\r\n        tableConstraints.weightx = 1.0;\r\n        tableConstraints.weighty = 1.0;\r\n        add(tableScrollPane, tableConstraints);\r\n        GridBagConstraints buttonsConstraints = new GridBagConstraints();\r\n        buttonsConstraints.fill = GridBagConstraints.BOTH;\r\n        buttonsConstraints.gridx = 2;\r\n        buttonsConstraints.gridy = 0;\r\n        buttonsConstraints.gridwidth = 1;\r\n        buttonsConstraints.gridheight = 1;\r\n        buttonsConstraints.insets = new Insets(5, 5, 5, 5);\r\n        buttonsConstraints.weightx = 0.0;\r\n        buttonsConstraints.weighty = 1.0;\r\n        add(buttonPanel, buttonsConstraints);\r\n        GridBagConstraints wipConstraints = new GridBagConstraints();\r\n        wipConstraints.fill = GridBagConstraints.BOTH;\r\n        wipConstraints.gridx = 0;\r\n        wipConstraints.gridy = 2;\r\n        wipConstraints.gridwidth = 3;\r\n        wipConstraints.gridheight = 1;\r\n        wipConstraints.insets = new Insets(1, 5, 1, 5);\r\n        wipConstraints.weightx = 1.0;\r\n        wipConstraints.weighty = 0.0;\r\n        add(wipListScrollPane, wipConstraints);\r\n    }\r\n\r\n    /**\r\n     * add a text to say the user we are working\r\n     */\r\n    public synchronized void addWipText(final String wipText) {\r\n        Runnable runner = new Runnable() {\r\n\r\n            public void run() {\r\n                ((DefaultListModel) workInProgressList.getModel()).addElement(wipText);\r\n            }\r\n        };\r\n        SwingUtilities.invokeLater(runner);\r\n    }\r\n\r\n    /**\r\n     * remove the text to say the user we are working\r\n     */\r\n    public synchronized void removeWipText(final String wipText) {\r\n        Runnable runner = new Runnable() {\r\n\r\n            public void run() {\r\n                if (!((DefaultListModel) workInProgressList.getModel()).removeElement(wipText)) {\r\n                    log.debug(GettextResource.gettext(config.getI18nResourceBundle(), \"Unable to remove JList text \") + wipText);\r\n                }\r\n            }\r\n        };\r\n        SwingUtilities.invokeLater(runner);\r\n    }\r\n\r\n    /**\r\n     * removes every element from the list\r\n     */\r\n    public synchronized void removeWipTextAll() {\r\n        Runnable runner = new Runnable() {\r\n\r\n            public void run() {\r\n                ((DefaultListModel) workInProgressList.getModel()).removeAllElements();\r\n            }\r\n        };\r\n        SwingUtilities.invokeLater(runner);\r\n    }\r\n\r\n    /**\r\n     * @return true if some thread is loading a pdf document\r\n     */\r\n    public boolean isAdding() {\r\n        return loader.isExecuting();\r\n    }\r\n\r\n    /**\r\n     * adds a item to the table\r\n     *\r\n     * @param item\r\n     */\r\n    public synchronized void addTableRow(PdfSelectionTableItem item) {\r\n        ((AbstractPdfSelectionTableModel) mainTable.getModel()).addRow(item);\r\n        log.info(GettextResource.gettext(config.getI18nResourceBundle(), \"File selected: \") + item.getInputFile().getName());\r\n    }\r\n\r\n    /**\r\n     * update an item to the table\r\n     *\r\n     * @param index\r\n     * @param item\r\n     */\r\n    public synchronized void updateTableRow(int index, PdfSelectionTableItem item) {\r\n        ((AbstractPdfSelectionTableModel) mainTable.getModel()).updateRowAt(index, item);\r\n        log.info(GettextResource.gettext(config.getI18nResourceBundle(), \"File reloaded: \") + item.getInputFile().getName());\r\n    }\r\n\r\n    /**\r\n     * adds a button to the button panel\r\n     *\r\n     * @param button\r\n     */\r\n    private void addButtonToButtonPanel(JButton button) {\r\n        button.setMargin(new Insets(2, 2, 2, 2));\r\n        button.setAlignmentX(Component.CENTER_ALIGNMENT);\r\n        button.setMinimumSize(new Dimension(120, 25));\r\n        button.setMaximumSize(new Dimension(160, 25));\r\n        addEnterKeyBinding(button);\r\n        buttonPanel.add(button);\r\n        buttonPanel.add(Box.createRigidArea(new Dimension(0, 5)));\r\n    }\r\n\r\n    /**\r\n     * binds the enter key to the action when the button has focus\r\n     *\r\n     * @param button\r\n     */\r\n    private void addEnterKeyBinding(JButton button) {\r\n        Action action = button.getAction();\r\n        if (action != null) {\r\n            button.getInputMap().put(KeyStroke.getKeyStroke(KeyEvent.VK_ENTER, 0), action.getValue(Action.NAME));\r\n            button.getActionMap().put(action.getValue(Action.NAME), action);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @return rows of the model\r\n     */\r\n    public PdfSelectionTableItem[] getTableRows() {\r\n        return ((AbstractPdfSelectionTableModel) mainTable.getModel()).getRows();\r\n    }\r\n\r\n    /**\r\n     * binds the accelerator key of the action to the main table\r\n     *\r\n     * @param action\r\n     */\r\n    private void addToMainTableKeyBindings(Action action) {\r\n        if (action != null) {\r\n            Object keyStroke = action.getValue(Action.ACCELERATOR_KEY);\r\n            if (keyStroke != null) {\r\n                KeyStroke stroke = (KeyStroke) keyStroke;\r\n                mainTable.getInputMap(WHEN_ANCESTOR_OF_FOCUSED_COMPONENT).put(stroke, action.getValue(Action.NAME));\r\n                mainTable.getActionMap().put(action.getValue(Action.NAME), action);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * initialize the remove button\r\n     */\r\n    private void initRemoveButton() {\r\n        // remove button\r\n        RemoveSelectionTableAction removeAction = new RemoveSelectionTableAction(mainTable);\r\n        removeFileButton.setAction(removeAction);\r\n        addButtonToButtonPanel(removeFileButton);\r\n        addToMainTableKeyBindings(removeAction);\r\n        popupMenu.add(new JMenuItem(removeAction));\r\n    }\r\n\r\n    /**\r\n     * initialize the add button\r\n     */\r\n    private void initAddButton() {\r\n        // add button\r\n        AddSelectionTableAction addAction = new AddSelectionTableAction(loader, (maxSelectableFiles == 1));\r\n        addFileButton.setAction(addAction);\r\n        addButtonToButtonPanel(addFileButton);\r\n        addToMainTableKeyBindings(addAction);\r\n    }\r\n\r\n    /**\r\n     * initialize the moveUpButton\r\n     */\r\n    private void initMoveUpButton() {\r\n        // move up button\r\n        MoveUpSelectionTableAction moveUpAction = new MoveUpSelectionTableAction(mainTable);\r\n        moveUpButton.setAction(moveUpAction);\r\n        addButtonToButtonPanel(moveUpButton);\r\n        addToMainTableKeyBindings(moveUpAction);\r\n        popupMenu.add(new JMenuItem(moveUpAction));\r\n    }\r\n\r\n    /**\r\n     * initialize the move down button\r\n     */\r\n    private void initMoveDownButton() {\r\n        // move down button\r\n        MoveDownSelectionTableAction moveDownAction = new MoveDownSelectionTableAction(mainTable);\r\n        moveDownButton.setAction(moveDownAction);\r\n        addButtonToButtonPanel(moveDownButton);\r\n        addToMainTableKeyBindings(moveDownAction);\r\n        popupMenu.add(new JMenuItem(moveDownAction));\r\n    }\r\n\r\n    /**\r\n     * initialize the clear button\r\n     */\r\n    private void initClearButton() {\r\n        // clear button\r\n        ClearSelectionTableAction clearAction = new ClearSelectionTableAction(mainTable);\r\n        clearButton.setAction(clearAction);\r\n        addButtonToButtonPanel(clearButton);\r\n        addToMainTableKeyBindings(clearAction);\r\n    }\r\n\r\n    /**\r\n     * @return the pdf loader\r\n     */\r\n    public PdfLoader getLoader() {\r\n        return loader;\r\n    }\r\n\r\n    /**\r\n     * @return the addFileButton\r\n     */\r\n    public JButton getAddFileButton() {\r\n        return addFileButton;\r\n    }\r\n\r\n    /**\r\n     * @return the removeFileButton\r\n     */\r\n    public JButton getRemoveFileButton() {\r\n        return removeFileButton;\r\n    }\r\n\r\n    /**\r\n     * @return the moveUpButton\r\n     */\r\n    public JButton getMoveUpButton() {\r\n        return moveUpButton;\r\n    }\r\n\r\n    /**\r\n     * @return the moveDownButton\r\n     */\r\n    public JButton getMoveDownButton() {\r\n        return moveDownButton;\r\n    }\r\n\r\n    /**\r\n     * @return the clearButton\r\n     */\r\n    public JButton getClearButton() {\r\n        return clearButton;\r\n    }\r\n\r\n    /**\r\n     * @return the tableDropTarget\r\n     */\r\n    public DropTarget getTableDropTarget() {\r\n        return tableDropTarget;\r\n    }\r\n\r\n    /**\r\n     * @return the scrollPanelDropTarget\r\n     */\r\n    public DropTarget getScrollPanelDropTarget() {\r\n        return scrollPanelDropTarget;\r\n    }\r\n\r\n    /**\r\n     * @return the setOutputPathMenuItemEnabled\r\n     */\r\n    public boolean isSetOutputPathMenuItemEnabled() {\r\n        return setOutputPathMenuItemEnabled;\r\n    }\r\n\r\n    /**\r\n     * @return true if it's a single selectable file panel\r\n     */\r\n    public boolean isSingleSelectableFile() {\r\n        return (SINGLE_SELECTABLE_FILE == maxSelectableFiles);\r\n    }\r\n\r\n    /**\r\n     * @param action\r\n     *            adds an item to the popup menu for the given action\r\n     */\r\n    public void addPopupMenuAction(AbstractAction action) {\r\n        if (action != null) {\r\n            addToMainTableKeyBindings(action);\r\n            popupMenu.add(new JMenuItem(action));\r\n        }\r\n    }\r\n\r\n    /**\r\n     * If true, the selection table default renderer will show a tooltip message\r\n     * when the document is not opened with full permissions\r\n     *\r\n     * @param required\r\n     */\r\n    public void setFullAccessRequired(boolean required) {\r\n        mainTable.setDefaultRenderer(String.class, new JPdfSelectionTableRenderer(required));\r\n    }\r\n\r\n    /**\r\n     * Clear the selection table\r\n     */\r\n    public void clearSelectionTable() {\r\n        ((AbstractPdfSelectionTableModel) getMainTable().getModel()).clearData();\r\n    }\r\n}\r\n",
		"id": "EvoSuiteBenchmark/109_pdfsam/src/main/java/org/pdfsam/guiclient/commons/panels/JPdfSelectionPanelTest3.java",
		"test_prompt": "// JPdfSelectionPanelTest3.java\npackage org.pdfsam.guiclient.commons.panels;\n\nimport java.awt.Color;\nimport java.awt.Component;\nimport java.awt.Dimension;\nimport java.awt.GridBagConstraints;\nimport java.awt.GridBagLayout;\nimport java.awt.Insets;\nimport java.awt.dnd.DropTarget;\nimport java.awt.event.KeyEvent;\nimport javax.swing.AbstractAction;\nimport javax.swing.Action;\nimport javax.swing.BorderFactory;\nimport javax.swing.Box;\nimport javax.swing.BoxLayout;\nimport javax.swing.DefaultCellEditor;\nimport javax.swing.DefaultListModel;\nimport javax.swing.JButton;\nimport javax.swing.JList;\nimport javax.swing.JMenuItem;\nimport javax.swing.JPanel;\nimport javax.swing.JPasswordField;\nimport javax.swing.JPopupMenu;\nimport javax.swing.JScrollPane;\nimport javax.swing.JTable;\nimport javax.swing.KeyStroke;\nimport javax.swing.ListSelectionModel;\nimport javax.swing.SwingUtilities;\nimport javax.swing.table.TableColumn;\nimport javax.swing.table.TableColumnModel;\nimport org.apache.log4j.Logger;\nimport org.pdfsam.guiclient.commons.business.actions.AddSelectionTableAction;\nimport org.pdfsam.guiclient.commons.business.actions.ClearSelectionTableAction;\nimport org.pdfsam.guiclient.commons.business.actions.DocumentPropertiesSelectionTableAction;\nimport org.pdfsam.guiclient.commons.business.actions.MoveDownSelectionTableAction;\nimport org.pdfsam.guiclient.commons.business.actions.MoveUpSelectionTableAction;\nimport org.pdfsam.guiclient.commons.business.actions.ReloadDocumentSelectionTableAction;\nimport org.pdfsam.guiclient.commons.business.actions.RemoveSelectionTableAction;\nimport org.pdfsam.guiclient.commons.business.listeners.adapters.PdfSelectionMouseHeaderAdapter;\nimport org.pdfsam.guiclient.commons.business.listeners.adapters.TableShowPopupMouseAdapter;\nimport org.pdfsam.guiclient.commons.business.loaders.PdfLoader;\nimport org.pdfsam.guiclient.commons.components.JPdfSelectionTable;\nimport org.pdfsam.guiclient.commons.components.JPdfSelectionToolTipHeader;\nimport org.pdfsam.guiclient.commons.dnd.droppers.JPdfSelectionTableDropper;\nimport org.pdfsam.guiclient.commons.models.AbstractPdfSelectionTableModel;\nimport org.pdfsam.guiclient.commons.models.SimplePdfSelectionTableModel;\nimport org.pdfsam.guiclient.commons.models.SortablePdfSelectionTableModel;\nimport org.pdfsam.guiclient.commons.renderers.ArrowHeaderRenderer;\nimport org.pdfsam.guiclient.commons.renderers.JPdfSelectionTableRenderer;\nimport org.pdfsam.guiclient.configuration.Configuration;\nimport org.pdfsam.guiclient.dto.PdfSelectionTableItem;\nimport org.pdfsam.i18n.GettextResource;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link JPdfSelectionPanel}.\n* It contains ten unit test cases for the {@link JPdfSelectionPanel#isSingleSelectableFile()} method.\n*/\nclass JPdfSelectionPanelTest3 {"
	},
	{
		"original_code": "// JVisualPdfPageSelectionPanel.java\n/*\n * Created on 18-Jun-2008\n * Copyright (C) 2008 by Andrea Vacondio.\n *\n * This program is free software; you can redistribute it and/or modify it under the terms of the \n * GNU General Public License as published by the Free Software Foundation; \n * either version 2 of the License.\n * This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; \n * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. \n * See the GNU General Public License for more details.\n * You should have received a copy of the GNU General Public License along with this program; \n * if not, write to the Free Software Foundation, Inc., \n *  59 Temple Place, Suite 330, Boston, MA 02111-1307 USA\n */\npackage org.pdfsam.guiclient.commons.panels;\n\nimport java.awt.Component;\nimport java.awt.Dimension;\nimport java.awt.GridBagConstraints;\nimport java.awt.GridBagLayout;\nimport java.awt.Insets;\nimport java.awt.event.ActionEvent;\nimport java.awt.event.ActionListener;\nimport java.awt.event.KeyAdapter;\nimport java.awt.event.KeyEvent;\nimport java.awt.event.MouseAdapter;\nimport java.awt.event.MouseEvent;\nimport java.io.File;\nimport java.util.ArrayList;\nimport java.util.Collection;\nimport java.util.LinkedHashSet;\nimport java.util.List;\nimport java.util.Set;\nimport javax.swing.BorderFactory;\nimport javax.swing.Box;\nimport javax.swing.BoxLayout;\nimport javax.swing.DropMode;\nimport javax.swing.ImageIcon;\nimport javax.swing.JButton;\nimport javax.swing.JLabel;\nimport javax.swing.JList;\nimport javax.swing.JMenuItem;\nimport javax.swing.JPanel;\nimport javax.swing.JPopupMenu;\nimport javax.swing.JScrollPane;\nimport javax.swing.ListSelectionModel;\nimport org.apache.commons.lang.StringUtils;\nimport org.apache.log4j.Logger;\nimport org.pdfsam.console.business.dto.commands.ConcatParsedCommand;\nimport org.pdfsam.guiclient.business.PagePreviewOpener;\nimport org.pdfsam.guiclient.business.PagesWorker;\nimport org.pdfsam.guiclient.business.listeners.EnterDoClickListener;\nimport org.pdfsam.guiclient.commons.business.listeners.VisualPdfSelectionActionListener;\nimport org.pdfsam.guiclient.commons.business.listeners.adapters.PageOpenerMouseAdapter;\nimport org.pdfsam.guiclient.commons.business.listeners.adapters.VisualPdfSelectionKeyAdapter;\nimport org.pdfsam.guiclient.commons.business.listeners.adapters.VisualPdfSelectionMouseAdapter;\nimport org.pdfsam.guiclient.commons.business.listeners.mediators.PagesActionsMediator;\nimport org.pdfsam.guiclient.commons.business.loaders.PdfThumbnailsLoader;\nimport org.pdfsam.guiclient.commons.components.JVisualSelectionList;\nimport org.pdfsam.guiclient.commons.dnd.handlers.VisualListExportTransferHandler;\nimport org.pdfsam.guiclient.commons.dnd.handlers.VisualListTransferHandler;\nimport org.pdfsam.guiclient.commons.models.VisualListModel;\nimport org.pdfsam.guiclient.commons.renderers.VisualListRenderer;\nimport org.pdfsam.guiclient.configuration.Configuration;\nimport org.pdfsam.guiclient.dto.DocumentInfo;\nimport org.pdfsam.guiclient.dto.Rotation;\nimport org.pdfsam.guiclient.dto.VisualPageListItem;\nimport org.pdfsam.guiclient.dto.VisualSelectedItem;\nimport org.pdfsam.i18n.GettextResource;\n\n/**\n * Customizable panel for a visual page selection\n * @author Andrea Vacondio\n */\npublic class JVisualPdfPageSelectionPanel extends JPanel {\n\n    private static final long serialVersionUID = 1384691784810385438L;\n\n    private static final Logger log = Logger.getLogger(JVisualPdfPageSelectionPanel.class.getPackage().getName());\n\n    public static final int HORIZONTAL_ORIENTATION = 1;\n\n    public static final int VERTICAL_ORIENTATION = 2;\n\n    public static final int SINGLE_INTERVAL_SELECTION = ListSelectionModel.SINGLE_INTERVAL_SELECTION;\n\n    public static final int MULTIPLE_INTERVAL_SELECTION = ListSelectionModel.MULTIPLE_INTERVAL_SELECTION;\n\n    public static final int SINGLE_SELECTION = ListSelectionModel.SINGLE_SELECTION;\n\n    public static final int STYLE_TOP_PANEL_HIDE = 0;\n\n    public static final int STYLE_TOP_PANEL_MINIMAL = 1;\n\n    public static final int STYLE_TOP_PANEL_MEDIUM = 2;\n\n    public static final int STYLE_TOP_PANEL_FULL = 3;\n\n    public static final int DND_SUPPORT_NONE = 0;\n\n    public static final int DND_SUPPORT_FILES = 1;\n\n    public static final int DND_SUPPORT_JAVAOBJECTS = 2;\n\n    public static final int DND_SUPPORT_FILES_AND_JAVAOBJECTS = 3;\n\n    public static final String OUTPUT_PATH_PROPERTY = \"defaultOutputPath\";\n\n    private int orientation = HORIZONTAL_ORIENTATION;\n\n    private File selectedPdfDocument = null;\n\n    private String selectedPdfDocumentPassword = \"\";\n\n    private boolean showButtonPanel = true;\n\n    private int topPanelStyle = STYLE_TOP_PANEL_FULL;\n\n    private boolean showContextMenu = true;\n\n    private int dndSupport = DND_SUPPORT_NONE;\n\n    private int selectionType = SINGLE_INTERVAL_SELECTION;\n\n    private final JMenuItem menuItemSetOutputPath = new JMenuItem();\n\n    /**\n     * if true, deleted items appear with a red cross over\n     */\n    private boolean drawDeletedItems = true;\n\n    //if the JList uses wrap\n    private boolean wrap = false;\n\n    private Configuration config;\n\n    private PagesWorker pagesWorker;\n\n    //menu\n    private final JButton loadFileButton = new JButton();\n\n    private final JButton clearButton = new JButton();\n\n    private final JButton zoomInButton = new JButton();\n\n    private final JButton zoomOutButton = new JButton();\n\n    private final JLabel documentProperties = new JLabel();\n\n    private final JVisualSelectionList thumbnailList = new JVisualSelectionList();\n\n    private PdfThumbnailsLoader pdfLoader;\n\n    private VisualPdfSelectionActionListener pdfSelectionActionListener;\n\n    private PagesActionsMediator pageActionListener;\n\n    private final JPopupMenu popupMenu = new JPopupMenu();\n\n    private final JMenuItem menuItemPreview = new JMenuItem();\n\n    private final JPanel topPanel = new JPanel();\n\n    //button panel\n    private JPanel buttonPanel;\n\n    private JButton undeleteButton;\n\n    private JButton removeButton;\n\n    private JButton moveUpButton;\n\n    private JButton moveDownButton;\n\n    private JButton rotateButton;\n\n    private JButton rotateAntiButton;\n\n    private JButton reverseButton;\n\n    /**\n     * default constructor\n     */\n    public JVisualPdfPageSelectionPanel() {\n        this(HORIZONTAL_ORIENTATION);\n    }\n\n    /**\n     * draw deleted items default value (true)\n     * show button panel default value (true)\n     * @param orientation panel orientation\n     */\n    public JVisualPdfPageSelectionPanel(int orientation) {\n        this(orientation, true, true);\n    }\n\n    /**\n     * @param orientation panel orientation\n     * @param drawDeletedItems if true deleted items appear with a red cross over\n     * @param showButtonPanel true=shows button panel\n     */\n    public JVisualPdfPageSelectionPanel(int orientation, boolean drawDeletedItems, boolean showButtonPanel) {\n        this(orientation, drawDeletedItems, showButtonPanel, true, STYLE_TOP_PANEL_FULL);\n    }\n\n    /**\n     * @param orientation panel orientation\n     * @param drawDeletedItems if true deleted items appear with a red cross over\n     * @param showButtonPanel true=shows button panel\n     * @param showContextMenu\n     * @param topPanelStyle\n     */\n    public JVisualPdfPageSelectionPanel(int orientation, boolean drawDeletedItems, boolean showButtonPanel, boolean showContextMenu, int topPanelStyle) {\n        this(orientation, drawDeletedItems, showButtonPanel, showContextMenu, topPanelStyle, DND_SUPPORT_FILES_AND_JAVAOBJECTS, SINGLE_INTERVAL_SELECTION);\n    }\n\n    /**\n     * @param orientation panel orientation\n     * @param drawDeletedItems if true deleted items appear with a red cross over\n     * @param showButtonPanel true=shows button panel\n     * @param showContextMenu\n     * @param topPanelStyle top panel style\n     * @param selectionType selection type\n     */\n    public JVisualPdfPageSelectionPanel(int orientation, boolean drawDeletedItems, boolean showButtonPanel, boolean showContextMenu, int topPanelStyle, int dndSupport, int selectionType) {\n        this.orientation = orientation;\n        this.config = Configuration.getInstance();\n        this.pdfLoader = new PdfThumbnailsLoader(this);\n        this.drawDeletedItems = drawDeletedItems;\n        this.showButtonPanel = showButtonPanel;\n        this.showContextMenu = showContextMenu;\n        this.topPanelStyle = topPanelStyle;\n        this.dndSupport = dndSupport;\n        this.selectionType = selectionType;\n        init();\n    }\n\n    /**\n     * panel initialization\n     */\n    private void init() {\n        setLayout(new GridBagLayout());\n        thumbnailList.setDrawDeletedItems(drawDeletedItems);\n        if (dndSupport == DND_SUPPORT_FILES) {\n            thumbnailList.setTransferHandler(new VisualListExportTransferHandler(pdfLoader));\n        } else if (dndSupport == DND_SUPPORT_JAVAOBJECTS) {\n            thumbnailList.setTransferHandler(new VisualListTransferHandler());\n        } else if (dndSupport == DND_SUPPORT_FILES_AND_JAVAOBJECTS) {\n            thumbnailList.setTransferHandler(new VisualListTransferHandler(pdfLoader));\n        } else {\n            thumbnailList.setTransferHandler(new VisualListExportTransferHandler(null));\n        }\n        thumbnailList.setDragEnabled(true);\n        thumbnailList.setDropMode(DropMode.INSERT);\n        pagesWorker = new PagesWorker(thumbnailList);\n        thumbnailList.addKeyListener(new VisualPdfSelectionKeyAdapter(pagesWorker));\n        thumbnailList.addMouseListener(new PageOpenerMouseAdapter(thumbnailList));\n        if (showButtonPanel) {\n            initButtonPanel(pagesWorker);\n            initKeyListener();\n        }\n        //JList orientation\n        if (HORIZONTAL_ORIENTATION == orientation) {\n            thumbnailList.setLayoutOrientation(JList.HORIZONTAL_WRAP);\n        } else {\n            if (wrap) {\n                thumbnailList.setLayoutOrientation(JList.VERTICAL_WRAP);\n            }\n        }\n        topPanel.setLayout(new BoxLayout(topPanel, BoxLayout.LINE_AXIS));\n        topPanel.setPreferredSize(new Dimension(400, 30));\n        pdfSelectionActionListener = new VisualPdfSelectionActionListener(this, pdfLoader);\n        if (topPanelStyle >= STYLE_TOP_PANEL_FULL) {\n            //load button\n            loadFileButton.setMargin(new Insets(1, 1, 1, 1));\n            loadFileButton.setText(GettextResource.gettext(config.getI18nResourceBundle(), \"Open\"));\n            loadFileButton.setPreferredSize(new Dimension(100, 30));\n            loadFileButton.setToolTipText(GettextResource.gettext(config.getI18nResourceBundle(), \"Load a pdf document\"));\n            loadFileButton.setIcon(new ImageIcon(this.getClass().getResource(\"/images/add.png\")));\n            loadFileButton.addKeyListener(new EnterDoClickListener(loadFileButton));\n            loadFileButton.setAlignmentX(Component.CENTER_ALIGNMENT);\n            loadFileButton.setAlignmentY(Component.CENTER_ALIGNMENT);\n            loadFileButton.setActionCommand(VisualPdfSelectionActionListener.ADD);\n            loadFileButton.addActionListener(pdfSelectionActionListener);\n        }\n        documentProperties.setIcon(new ImageIcon(this.getClass().getResource(\"/images/info.png\")));\n        documentProperties.setVisible(false);\n        if (topPanelStyle >= STYLE_TOP_PANEL_MEDIUM) {\n            clearButton.setMargin(new Insets(1, 1, 1, 1));\n            clearButton.setMinimumSize(new Dimension(30, 30));\n            clearButton.setText(GettextResource.gettext(config.getI18nResourceBundle(), \"Clear\"));\n            clearButton.setIcon(new ImageIcon(this.getClass().getResource(\"/images/clear.png\")));\n            clearButton.addActionListener(new ActionListener() {\n\n                public void actionPerformed(ActionEvent e) {\n                    resetPanel();\n                }\n            });\n        }\n        zoomInButton.setMargin(new Insets(1, 1, 1, 1));\n        zoomInButton.setMinimumSize(new Dimension(30, 30));\n        zoomInButton.setText(GettextResource.gettext(config.getI18nResourceBundle(), \"Zoom in\"));\n        zoomInButton.setIcon(new ImageIcon(this.getClass().getResource(\"/images/zoomin.png\")));\n        zoomInButton.addActionListener(new ActionListener() {\n\n            public void actionPerformed(ActionEvent e) {\n                try {\n                    thumbnailList.incZoomLevel();\n                    zoomOutButton.setEnabled(true);\n                    if (thumbnailList.getCurrentZoomLevel() >= JVisualSelectionList.MAX_ZOOM_LEVEL) {\n                        zoomInButton.setEnabled(false);\n                    }\n                    ((VisualListModel) thumbnailList.getModel()).elementsChanged();\n                } catch (Exception ex) {\n                    log.error(GettextResource.gettext(config.getI18nResourceBundle(), \"Error setting zoom level.\"), ex);\n                }\n            }\n        });\n        zoomOutButton.setMargin(new Insets(1, 1, 1, 1));\n        zoomOutButton.setMinimumSize(new Dimension(30, 30));\n        zoomOutButton.setText(GettextResource.gettext(config.getI18nResourceBundle(), \"Zoom out\"));\n        zoomOutButton.setIcon(new ImageIcon(this.getClass().getResource(\"/images/zoomout.png\")));\n        zoomOutButton.addActionListener(new ActionListener() {\n\n            public void actionPerformed(ActionEvent e) {\n                try {\n                    thumbnailList.deincZoomLevel();\n                    zoomInButton.setEnabled(true);\n                    if (thumbnailList.getCurrentZoomLevel() <= JVisualSelectionList.MIN_ZOOM_LEVEL) {\n                        zoomOutButton.setEnabled(false);\n                    }\n                    ((VisualListModel) thumbnailList.getModel()).elementsChanged();\n                } catch (Exception ex) {\n                    log.error(GettextResource.gettext(config.getI18nResourceBundle(), \"Error setting zoom level.\"), ex);\n                }\n            }\n        });\n        thumbnailList.setModel(new VisualListModel());\n        thumbnailList.setCellRenderer(new VisualListRenderer());\n        thumbnailList.setVisibleRowCount(-1);\n        thumbnailList.setSelectionMode(selectionType);\n        JScrollPane listScroller = new JScrollPane(thumbnailList);\n        //preview item\n        menuItemPreview.setIcon(new ImageIcon(this.getClass().getResource(\"/images/preview-viewer.png\")));\n        menuItemPreview.setText(GettextResource.gettext(config.getI18nResourceBundle(), \"Preview\"));\n        menuItemPreview.addMouseListener(new MouseAdapter() {\n\n            public void mouseReleased(MouseEvent e) {\n                int[] selection = thumbnailList.getSelectedIndices();\n                if (selection != null && selection.length == 1) {\n                    VisualPageListItem item = (VisualPageListItem) thumbnailList.getModel().getElementAt(selection[0]);\n                    PagePreviewOpener.getInstance().openPreview(item.getParentFileCanonicalPath(), item.getDocumentPassword(), item.getPageNumber());\n                }\n            }\n        });\n        if (showContextMenu) {\n            //popup\n            final JMenuItem menuItemMoveUp = new JMenuItem();\n            menuItemMoveUp.setIcon(new ImageIcon(this.getClass().getResource(\"/images/up.png\")));\n            menuItemMoveUp.setText(GettextResource.gettext(config.getI18nResourceBundle(), \"Move Up\"));\n            menuItemMoveUp.addMouseListener(new VisualPdfSelectionMouseAdapter(PagesWorker.MOVE_UP, pagesWorker));\n            popupMenu.add(menuItemMoveUp);\n            final JMenuItem menuItemMoveDown = new JMenuItem();\n            menuItemMoveDown.setIcon(new ImageIcon(this.getClass().getResource(\"/images/down.png\")));\n            menuItemMoveDown.setText(GettextResource.gettext(config.getI18nResourceBundle(), \"Move Down\"));\n            menuItemMoveDown.addMouseListener(new VisualPdfSelectionMouseAdapter(PagesWorker.MOVE_DOWN, pagesWorker));\n            popupMenu.add(menuItemMoveDown);\n            final JMenuItem menuItemRemove = new JMenuItem();\n            menuItemRemove.setIcon(new ImageIcon(this.getClass().getResource(\"/images/remove.png\")));\n            menuItemRemove.setText(GettextResource.gettext(config.getI18nResourceBundle(), \"Delete\"));\n            menuItemRemove.addMouseListener(new VisualPdfSelectionMouseAdapter(PagesWorker.REMOVE, pagesWorker));\n            popupMenu.add(menuItemRemove);\n            //if elements are physically deleted i don't need this item\n            if (drawDeletedItems) {\n                final JMenuItem menuItemUndelete = new JMenuItem();\n                menuItemUndelete.setIcon(new ImageIcon(this.getClass().getResource(\"/images/remove.png\")));\n                menuItemUndelete.setText(GettextResource.gettext(config.getI18nResourceBundle(), \"Undelete\"));\n                menuItemUndelete.addMouseListener(new VisualPdfSelectionMouseAdapter(PagesWorker.UNDELETE, pagesWorker));\n                popupMenu.add(menuItemUndelete);\n            }\n            //rotate item\n            final JMenuItem menuItemRotate = new JMenuItem();\n            menuItemRotate.setIcon(new ImageIcon(this.getClass().getResource(\"/images/clockwise.png\")));\n            menuItemRotate.setText(GettextResource.gettext(config.getI18nResourceBundle(), \"Rotate clockwise\"));\n            menuItemRotate.addMouseListener(new VisualPdfSelectionMouseAdapter(PagesWorker.ROTATE_CLOCK, pagesWorker));\n            popupMenu.add(menuItemRotate);\n            //rotate anticlock item\n            final JMenuItem menuItemAntiRotate = new JMenuItem();\n            menuItemAntiRotate.setIcon(new ImageIcon(this.getClass().getResource(\"/images/anticlockwise.png\")));\n            menuItemAntiRotate.setText(GettextResource.gettext(config.getI18nResourceBundle(), \"Rotate anticlockwise\"));\n            menuItemAntiRotate.addMouseListener(new VisualPdfSelectionMouseAdapter(PagesWorker.ROTATE_ANTICLOCK, pagesWorker));\n            popupMenu.add(menuItemAntiRotate);\n            //reverse item\n            final JMenuItem menuItemReverse = new JMenuItem();\n            menuItemReverse.setIcon(new ImageIcon(this.getClass().getResource(\"/images/reverse.png\")));\n            menuItemReverse.setText(GettextResource.gettext(config.getI18nResourceBundle(), \"Reverse\"));\n            menuItemReverse.addMouseListener(new VisualPdfSelectionMouseAdapter(PagesWorker.REVERSE, pagesWorker));\n            popupMenu.add(menuItemReverse);\n            enableSetOutputPathMenuItem();\n            addPopupShower();\n        }\n        popupMenu.add(menuItemPreview);\n        if (topPanelStyle >= STYLE_TOP_PANEL_FULL) {\n            topPanel.add(Box.createRigidArea(new Dimension(5, 0)));\n            topPanel.add(loadFileButton);\n        }\n        if (topPanelStyle >= STYLE_TOP_PANEL_MEDIUM) {\n            topPanel.add(Box.createRigidArea(new Dimension(5, 0)));\n            topPanel.add(clearButton);\n        }\n        topPanel.add(Box.createRigidArea(new Dimension(5, 0)));\n        topPanel.add(documentProperties);\n        topPanel.add(Box.createHorizontalGlue());\n        topPanel.add(zoomInButton);\n        topPanel.add(Box.createRigidArea(new Dimension(5, 0)));\n        topPanel.add(zoomOutButton);\n        GridBagConstraints topConstraints = new GridBagConstraints();\n        topConstraints.fill = GridBagConstraints.BOTH;\n        topConstraints.gridx = 0;\n        topConstraints.gridy = 0;\n        topConstraints.gridwidth = 3;\n        topConstraints.gridheight = 1;\n        topConstraints.insets = new Insets(5, 5, 5, 5);\n        topConstraints.weightx = 1.0;\n        topConstraints.weighty = 0.0;\n        if (topPanelStyle > STYLE_TOP_PANEL_HIDE) {\n            add(topPanel, topConstraints);\n        }\n        GridBagConstraints thumbConstraints = new GridBagConstraints();\n        thumbConstraints.fill = GridBagConstraints.BOTH;\n        thumbConstraints.gridx = 0;\n        thumbConstraints.gridy = 1;\n        thumbConstraints.gridwidth = (showButtonPanel ? 2 : 3);\n        thumbConstraints.gridheight = 2;\n        thumbConstraints.insets = new Insets(5, 5, 5, 5);\n        thumbConstraints.weightx = 1.0;\n        thumbConstraints.weighty = 1.0;\n        add(listScroller, thumbConstraints);\n        if (showButtonPanel) {\n            GridBagConstraints buttonsConstraints = new GridBagConstraints();\n            buttonsConstraints.fill = GridBagConstraints.BOTH;\n            buttonsConstraints.gridx = 2;\n            buttonsConstraints.gridy = 1;\n            buttonsConstraints.gridwidth = 1;\n            buttonsConstraints.gridheight = 2;\n            buttonsConstraints.insets = new Insets(5, 5, 5, 5);\n            buttonsConstraints.weightx = 0.0;\n            buttonsConstraints.weighty = 1.0;\n            add(buttonPanel, buttonsConstraints);\n        }\n    }\n\n    /**\n     * adds a button to the button panel\n     * @param button\n     */\n    private void addButtonToButtonPanel(JButton button) {\n        button.setMinimumSize(new Dimension(90, 25));\n        button.setMaximumSize(new Dimension(160, 25));\n        buttonPanel.add(button);\n        buttonPanel.add(Box.createRigidArea(new Dimension(0, 5)));\n    }\n\n    private void initButtonPanel(PagesWorker pagesWorker) {\n        buttonPanel = new JPanel();\n        buttonPanel.setLayout(new BoxLayout(buttonPanel, BoxLayout.Y_AXIS));\n        buttonPanel.setBorder(BorderFactory.createEmptyBorder(0, 10, 10, 10));\n        pageActionListener = new PagesActionsMediator(pagesWorker);\n        //move up button\n        moveUpButton = new JButton();\n        moveUpButton.setMargin(new Insets(2, 2, 2, 2));\n        moveUpButton.addActionListener(pageActionListener);\n        moveUpButton.setIcon(new ImageIcon(this.getClass().getResource(\"/images/up.png\")));\n        moveUpButton.setActionCommand(PagesWorker.MOVE_UP);\n        moveUpButton.setText(GettextResource.gettext(config.getI18nResourceBundle(), \"Move Up\"));\n        moveUpButton.setToolTipText(GettextResource.gettext(config.getI18nResourceBundle(), \"Move up selected pages\") + \" \" + GettextResource.gettext(config.getI18nResourceBundle(), \"(Alt+ArrowUp)\"));\n        moveUpButton.addKeyListener(new EnterDoClickListener(moveUpButton));\n        moveUpButton.setAlignmentX(Component.CENTER_ALIGNMENT);\n        addButtonToButtonPanel(moveUpButton);\n        //move down button\n        moveDownButton = new JButton();\n        moveDownButton.addActionListener(pageActionListener);\n        moveDownButton.setIcon(new ImageIcon(this.getClass().getResource(\"/images/down.png\")));\n        moveDownButton.setActionCommand(PagesWorker.MOVE_DOWN);\n        moveDownButton.setMargin(new Insets(2, 2, 2, 2));\n        moveDownButton.setText(GettextResource.gettext(config.getI18nResourceBundle(), \"Move Down\"));\n        moveDownButton.setToolTipText(GettextResource.gettext(config.getI18nResourceBundle(), \"Move down selected pages\") + \" \" + GettextResource.gettext(config.getI18nResourceBundle(), \"(Alt+ArrowDown)\"));\n        moveDownButton.addKeyListener(new EnterDoClickListener(moveDownButton));\n        moveDownButton.setAlignmentX(Component.CENTER_ALIGNMENT);\n        addButtonToButtonPanel(moveDownButton);\n        //delete button\n        removeButton = new JButton();\n        removeButton.addActionListener(pageActionListener);\n        removeButton.setIcon(new ImageIcon(this.getClass().getResource(\"/images/remove.png\")));\n        removeButton.setActionCommand(PagesWorker.REMOVE);\n        removeButton.setMargin(new Insets(2, 2, 2, 2));\n        removeButton.setText(GettextResource.gettext(config.getI18nResourceBundle(), \"Delete\"));\n        removeButton.setToolTipText(GettextResource.gettext(config.getI18nResourceBundle(), \"Delete selected pages\") + \" \" + GettextResource.gettext(config.getI18nResourceBundle(), \"(Canc)\"));\n        removeButton.addKeyListener(new EnterDoClickListener(removeButton));\n        removeButton.setAlignmentX(Component.CENTER_ALIGNMENT);\n        addButtonToButtonPanel(removeButton);\n        //undelete button\n        if (drawDeletedItems) {\n            undeleteButton = new JButton();\n            undeleteButton.addActionListener(pageActionListener);\n            undeleteButton.setIcon(new ImageIcon(this.getClass().getResource(\"/images/remove.png\")));\n            undeleteButton.setActionCommand(PagesWorker.UNDELETE);\n            undeleteButton.setMargin(new Insets(2, 2, 2, 2));\n            undeleteButton.setText(GettextResource.gettext(config.getI18nResourceBundle(), \"Undelete\"));\n            undeleteButton.setToolTipText(GettextResource.gettext(config.getI18nResourceBundle(), \"Undelete selected pages\") + \" \" + GettextResource.gettext(config.getI18nResourceBundle(), \"(Ctrl+Z)\"));\n            undeleteButton.addKeyListener(new EnterDoClickListener(undeleteButton));\n            undeleteButton.setAlignmentX(Component.CENTER_ALIGNMENT);\n            addButtonToButtonPanel(undeleteButton);\n        }\n        //rotate button\n        rotateButton = new JButton();\n        rotateButton.addActionListener(pageActionListener);\n        rotateButton.setIcon(new ImageIcon(this.getClass().getResource(\"/images/clockwise.png\")));\n        rotateButton.setActionCommand(PagesWorker.ROTATE_CLOCK);\n        rotateButton.setMargin(new Insets(2, 2, 2, 2));\n        rotateButton.setText(GettextResource.gettext(config.getI18nResourceBundle(), \"Rotate right\"));\n        rotateButton.setToolTipText(GettextResource.gettext(config.getI18nResourceBundle(), \"Rotate clockwise selected pages\") + \" \" + GettextResource.gettext(config.getI18nResourceBundle(), \"(Alt+ArrowRight)\"));\n        rotateButton.addKeyListener(new EnterDoClickListener(rotateButton));\n        rotateButton.setAlignmentX(Component.CENTER_ALIGNMENT);\n        addButtonToButtonPanel(rotateButton);\n        //rotate button\n        rotateAntiButton = new JButton();\n        rotateAntiButton.addActionListener(pageActionListener);\n        rotateAntiButton.setIcon(new ImageIcon(this.getClass().getResource(\"/images/anticlockwise.png\")));\n        rotateAntiButton.setActionCommand(PagesWorker.ROTATE_ANTICLOCK);\n        rotateAntiButton.setMargin(new Insets(2, 2, 2, 2));\n        rotateAntiButton.setText(GettextResource.gettext(config.getI18nResourceBundle(), \"Rotate left\"));\n        rotateAntiButton.setToolTipText(GettextResource.gettext(config.getI18nResourceBundle(), \"Rotate anticlockwise selected pages\") + \" \" + GettextResource.gettext(config.getI18nResourceBundle(), \"(Alt+ArrowLeft)\"));\n        rotateAntiButton.addKeyListener(new EnterDoClickListener(rotateAntiButton));\n        rotateAntiButton.setAlignmentX(Component.CENTER_ALIGNMENT);\n        addButtonToButtonPanel(rotateAntiButton);\n        //reverse button\n        reverseButton = new JButton();\n        reverseButton.addActionListener(pageActionListener);\n        reverseButton.setIcon(new ImageIcon(this.getClass().getResource(\"/images/reverse.png\")));\n        reverseButton.setActionCommand(PagesWorker.REVERSE);\n        reverseButton.setMargin(new Insets(2, 2, 2, 2));\n        reverseButton.setText(GettextResource.gettext(config.getI18nResourceBundle(), \"Reverse\"));\n        reverseButton.setToolTipText(GettextResource.gettext(config.getI18nResourceBundle(), \"Reverse pages order\"));\n        reverseButton.addKeyListener(new EnterDoClickListener(reverseButton));\n        reverseButton.setAlignmentX(Component.CENTER_ALIGNMENT);\n        addButtonToButtonPanel(reverseButton);\n    }\n\n    private void initKeyListener() {\n        //key listener\n        thumbnailList.addKeyListener(new KeyAdapter() {\n\n            public void keyPressed(KeyEvent e) {\n                if ((e.isAltDown()) && (e.getKeyCode() == KeyEvent.VK_UP)) {\n                    moveUpButton.doClick();\n                } else if ((e.isAltDown()) && (e.getKeyCode() == KeyEvent.VK_DOWN)) {\n                    moveDownButton.doClick();\n                } else if ((e.getKeyCode() == KeyEvent.VK_DELETE)) {\n                    removeButton.doClick();\n                } else if (drawDeletedItems && (e.isControlDown()) && (e.getKeyCode() == KeyEvent.VK_Z)) {\n                    undeleteButton.doClick();\n                } else if ((e.isAltDown()) && (e.getKeyCode() == KeyEvent.VK_RIGHT)) {\n                    rotateButton.doClick();\n                } else if ((e.isAltDown()) && (e.getKeyCode() == KeyEvent.VK_LEFT)) {\n                    rotateAntiButton.doClick();\n                }\n            }\n        });\n    }\n\n    /**\n     * reset the panel\n     */\n    public void resetPanel() {\n        thumbnailList.setCurrentZoomLevel(JVisualSelectionList.DEFAULT_ZOOM_LEVEL);\n        zoomInButton.setEnabled(true);\n        zoomOutButton.setEnabled(true);\n        ((VisualListModel) thumbnailList.getModel()).clearData();\n        selectedPdfDocument = null;\n        selectedPdfDocumentPassword = \"\";\n        setDocumentPropertiesVisible(false);\n        getPdfLoader().cleanCreator();\n    }\n\n    /**\n     * Set the visible the label that shows document properties\n     * @param visible\n     */\n    public void setDocumentPropertiesVisible(boolean visible) {\n        documentProperties.setVisible(visible);\n    }\n\n    /**\n     * Set the document properties to be shown as a tooltip of the documentProperties JLabel\n     * @param documetnInfo bean containing document informations\n     */\n    public void setDocumentProperties(DocumentInfo documetnInfo) {\n        if (documetnInfo != null) {\n            String encrypted = documetnInfo.isEncrypted() ? GettextResource.gettext(config.getI18nResourceBundle(), \"Yes\") : GettextResource.gettext(config.getI18nResourceBundle(), \"No\");\n            documentProperties.setToolTipText(\"<html><body><b><p>\" + GettextResource.gettext(config.getI18nResourceBundle(), \"File: \") + \"</b>\" + documetnInfo.getFileName() + \"</p>\" + \"<p><b>\" + GettextResource.gettext(config.getI18nResourceBundle(), \"Pages: \") + \"</b>\" + documetnInfo.getPages() + \"</p>\" + \"<p><b>\" + GettextResource.gettext(config.getI18nResourceBundle(), \"Pdf version: \") + \"</b>\" + (documetnInfo.getPdfVersion() != null ? documetnInfo.getPdfVersion() : \"\") + \"</p>\" + \"<p><b>\" + GettextResource.gettext(config.getI18nResourceBundle(), \"Title: \") + \"</b>\" + StringUtils.trimToEmpty(documetnInfo.getDocumentMetaData().getTitle()) + \"</p>\" + \"<p><b>\" + GettextResource.gettext(config.getI18nResourceBundle(), \"Author: \") + \"</b>\" + StringUtils.trimToEmpty(documetnInfo.getDocumentMetaData().getAuthor()) + \"</p>\" + \"<p><b>\" + GettextResource.gettext(config.getI18nResourceBundle(), \"Creator: \") + \"</b>\" + StringUtils.trimToEmpty(documetnInfo.getDocumentMetaData().getCreator()) + \"</p>\" + \"<p><b>\" + GettextResource.gettext(config.getI18nResourceBundle(), \"Producer: \") + \"</b>\" + StringUtils.trimToEmpty(documetnInfo.getDocumentMetaData().getProducer()) + \"</p>\" + \"<p><b>\" + GettextResource.gettext(config.getI18nResourceBundle(), \"Encrypted: \") + \"</b>\" + encrypted + \"</p>\" + \"</body></html>\");\n        }\n    }\n\n    /**\n     * @return the orientation\n     */\n    public int getOrientation() {\n        return orientation;\n    }\n\n    /**\n     * @return the selectedPdfDocument\n     */\n    public File getSelectedPdfDocument() {\n        return selectedPdfDocument;\n    }\n\n    /**\n     * @return the wrap\n     */\n    public boolean isWrap() {\n        return wrap;\n    }\n\n    /**\n     * @return the thumbnailList\n     */\n    public JVisualSelectionList getThumbnailList() {\n        return thumbnailList;\n    }\n\n    /**\n     * @param selectedPdfDocument the selectedPdfDocument to set\n     */\n    public void setSelectedPdfDocument(File selectedPdfDocument) {\n        this.selectedPdfDocument = selectedPdfDocument;\n    }\n\n    /**\n     * @return the dndSupport\n     */\n    public int getDndSupport() {\n        return dndSupport;\n    }\n\n    /**\n     * @return the drawDeletedItems\n     */\n    public boolean isDrawDeletedItems() {\n        return drawDeletedItems;\n    }\n\n    /**\n     * @param drawDeletedItems the drawDeletedItems to set\n     */\n    public void setDrawDeletedItems(boolean drawDeletedItems) {\n        this.drawDeletedItems = drawDeletedItems;\n    }\n\n    /**\n     * @return the pdfLoader\n     */\n    public PdfThumbnailsLoader getPdfLoader() {\n        return pdfLoader;\n    }\n\n    /**\n     * @return the topPanel\n     */\n    public JPanel getTopPanel() {\n        return topPanel;\n    }\n\n    /**\n     * @param pages input selection set\n     * @return a String version of the input Set, ready to be used as -u parameter for the console\n     */\n    private String getSelectionString(Set<Integer> pages) {\n        StringBuilder buffer = new StringBuilder();\n        for (Integer page : pages) {\n            buffer.append(page.toString()).append(\",\");\n        }\n        return StringUtils.chomp(buffer.toString(), \",\");\n    }\n\n    /**\n     * @return an ordered List of {@link VisualSelectedItem} corresponding to the panel elements.\n     */\n    private List<VisualSelectedItem> getSelectedItemsList() {\n        List<VisualSelectedItem> retVal = new ArrayList<VisualSelectedItem>();\n        List<VisualPageListItem> validElements = ((VisualListModel) thumbnailList.getModel()).getValidElements();\n        VisualSelectedItem tmpElement = null;\n        Set<Integer> pages = new LinkedHashSet<Integer>();\n        for (VisualPageListItem currentElement : validElements) {\n            //first element\n            if (tmpElement == null) {\n                tmpElement = new VisualSelectedItem(currentElement.getParentFileCanonicalPath(), currentElement.getDocumentPassword());\n                pages.add(currentElement.getPageNumber());\n            } else {\n                //filename changed\n                if (!tmpElement.getSelectedFile().equals(currentElement.getParentFileCanonicalPath())) {\n                    tmpElement.setPagesSelection(getSelectionString(pages));\n                    retVal.add(tmpElement);\n                    tmpElement = new VisualSelectedItem(currentElement.getParentFileCanonicalPath(), currentElement.getDocumentPassword());\n                    pages.clear();\n                    pages.add(currentElement.getPageNumber());\n                } else {\n                    //page already there\n                    if (!pages.add(currentElement.getPageNumber())) {\n                        tmpElement.setPagesSelection(getSelectionString(pages));\n                        retVal.add(tmpElement);\n                        tmpElement = new VisualSelectedItem(currentElement.getParentFileCanonicalPath(), currentElement.getDocumentPassword());\n                        pages.clear();\n                        pages.add(currentElement.getPageNumber());\n                    }\n                }\n            }\n        }\n        tmpElement.setPagesSelection(getSelectionString(pages));\n        retVal.add(tmpElement);\n        return retVal;\n    }\n\n    /**\n     * A of String List that can be used as input for the console. It contains the -f and -u parameters for this panel\n     * @return\n     */\n    public List<String> getValidConsoleParameters() {\n        List<String> retVal = new ArrayList<String>();\n        StringBuilder builder = new StringBuilder();\n        for (VisualSelectedItem item : getSelectedItemsList()) {\n            builder.append(item.getPagesSelection()).append(\":\");\n            retVal.add(\"-\" + ConcatParsedCommand.F_ARG);\n            if (StringUtils.isEmpty(item.getPassword())) {\n                retVal.add(item.getSelectedFile());\n            } else {\n                retVal.add(item.getSelectedFile() + \":\" + item.getPassword());\n            }\n        }\n        retVal.add(\"-\" + ConcatParsedCommand.U_ARG);\n        retVal.add(builder.toString());\n        return retVal;\n    }\n\n    /**\n     * @return true if the panel has valid elements\n     */\n    public boolean hasValidElements() {\n        List<VisualPageListItem> elements = ((VisualListModel) thumbnailList.getModel()).getValidElements();\n        return (elements != null && !elements.isEmpty());\n    }\n\n    /**\n     * @return a String that can be used as a -r param for the pdfsam-console\n     */\n    public String getRotatedElementsString() {\n        StringBuilder retVal = new StringBuilder();\n        Collection<VisualPageListItem> validElements = ((VisualListModel) thumbnailList.getModel()).getValidElements();\n        if (validElements != null && !validElements.isEmpty()) {\n            int i = 0;\n            for (VisualPageListItem currentElement : validElements) {\n                i++;\n                if (!Rotation.DEGREES_0.equals(currentElement.getRotation())) {\n                    retVal.append(i).append(\":\").append(currentElement.getRotation().getDegrees()).append(\",\");\n                }\n            }\n        }\n        return retVal.toString();\n    }\n\n    /**\n     * Add a component on the left of the top panel\n     * @param c\n     */\n    public void addToTopPanel(Component c) {\n        topPanel.removeAll();\n        /*TODO fix this*/\n        if (c != null) {\n            topPanel.add(Box.createRigidArea(new Dimension(5, 0)));\n            topPanel.add(c);\n        }\n        if (topPanelStyle >= STYLE_TOP_PANEL_FULL) {\n            topPanel.add(Box.createRigidArea(new Dimension(5, 0)));\n            topPanel.add(loadFileButton);\n        }\n        if (topPanelStyle >= STYLE_TOP_PANEL_MEDIUM) {\n            topPanel.add(Box.createRigidArea(new Dimension(5, 0)));\n            topPanel.add(clearButton);\n        }\n        topPanel.add(Box.createRigidArea(new Dimension(5, 0)));\n        topPanel.add(documentProperties);\n        topPanel.add(Box.createHorizontalGlue());\n        topPanel.add(zoomInButton);\n        topPanel.add(Box.createRigidArea(new Dimension(5, 0)));\n        topPanel.add(zoomOutButton);\n    }\n\n    /**\n     * @return Returns an array of all the selected values, in increasing order based on their indices in the list or an empty array if nothing is selected\n     */\n    public VisualPageListItem[] getSelectedElements() {\n        Object[] elems = thumbnailList.getSelectedValues();\n        VisualPageListItem[] visElems = new VisualPageListItem[elems.length];\n        System.arraycopy(elems, 0, visElems, 0, elems.length);\n        return visElems;\n    }\n\n    /**\n     * @param c\n     * @see VisualListModel#appendAllElements(Collection)\n     */\n    public void appendElements(Collection<VisualPageListItem> c) {\n        ((VisualListModel) thumbnailList.getModel()).appendAllElements(c);\n    }\n\n    /**\n     * @param c\n     * @see VisualListModel#prependAllElements(Collection)\n     */\n    public void prependElements(Collection<VisualPageListItem> c) {\n        ((VisualListModel) thumbnailList.getModel()).prependAllElements(c);\n    }\n\n    /**\n     * Adds a item to the popup menu\n     * @param item\n     */\n    public void addMenuItem(JMenuItem item) {\n        popupMenu.add(item);\n    }\n\n    /**\n     * enables the set output path menu item\n     */\n    public void enableSetOutputPathMenuItem() {\n        menuItemSetOutputPath.setIcon(new ImageIcon(this.getClass().getResource(\"/images/set_outfile.png\")));\n        menuItemSetOutputPath.setText(GettextResource.gettext(config.getI18nResourceBundle(), \"Set output file\"));\n        menuItemSetOutputPath.addMouseListener(new MouseAdapter() {\n\n            public void mouseReleased(MouseEvent e) {\n                if (selectedPdfDocument != null) {\n                    try {\n                        String defaultOutputPath = selectedPdfDocument.getParent();\n                        firePropertyChange(OUTPUT_PATH_PROPERTY, \"\", defaultOutputPath);\n                    } catch (Exception ex) {\n                        log.error(GettextResource.gettext(config.getI18nResourceBundle(), \"Error: Unable to get the file path.\"), ex);\n                    }\n                }\n            }\n        });\n        popupMenu.add(menuItemSetOutputPath);\n        if (!showContextMenu) {\n            //show popup\n            addPopupShower();\n        }\n    }\n\n    /**\n     * adds the listener that showes the popup\n     */\n    private void addPopupShower() {\n        //show popup\n        thumbnailList.addMouseListener(new MouseAdapter() {\n\n            public void mousePressed(MouseEvent e) {\n                if (e.isPopupTrigger()) {\n                    showMenu(e);\n                }\n            }\n\n            public void mouseReleased(MouseEvent e) {\n                if (e.isPopupTrigger()) {\n                    showMenu(e);\n                }\n            }\n\n            private void showMenu(MouseEvent e) {\n                int[] selection = thumbnailList.getSelectedIndices();\n                if (!(selection != null && selection.length > 1)) {\n                    thumbnailList.setSelectedIndex(thumbnailList.locationToIndex(e.getPoint()));\n                    selection = thumbnailList.getSelectedIndices();\n                }\n                menuItemPreview.setEnabled(selection != null && selection.length == 1);\n                popupMenu.show(thumbnailList, e.getX(), e.getY());\n            }\n        });\n    }\n\n    /**\n     * remove the set ouput path menu item\n     */\n    public void disableSetOutputPathMenuItem() {\n        popupMenu.remove(menuItemSetOutputPath);\n    }\n\n    /**\n     * @return the selectedPdfDocumentPassword\n     */\n    public String getSelectedPdfDocumentPassword() {\n        return selectedPdfDocumentPassword;\n    }\n\n    /**\n     * @param selectedPdfDocumentPassword the selectedPdfDocumentPassword to set\n     */\n    public void setSelectedPdfDocumentPassword(String selectedPdfDocumentPassword) {\n        this.selectedPdfDocumentPassword = selectedPdfDocumentPassword;\n    }\n\n    /**\n     * @return the clearButton\n     */\n    public JButton getClearButton() {\n        return clearButton;\n    }\n\n    /**\n     * @return the zoomInButton\n     */\n    public JButton getZoomInButton() {\n        return zoomInButton;\n    }\n\n    /**\n     * @return the zoomOutButton\n     */\n    public JButton getZoomOutButton() {\n        return zoomOutButton;\n    }\n\n    /**\n     * @return the undeleteButton\n     */\n    public JButton getUndeleteButton() {\n        return undeleteButton;\n    }\n\n    /**\n     * @return the removeButton\n     */\n    public JButton getRemoveButton() {\n        return removeButton;\n    }\n\n    /**\n     * @return the moveUpButton\n     */\n    public JButton getMoveUpButton() {\n        return moveUpButton;\n    }\n\n    /**\n     * @return the moveDownButton\n     */\n    public JButton getMoveDownButton() {\n        return moveDownButton;\n    }\n\n    /**\n     * @return the rotateButton\n     */\n    public JButton getRotateButton() {\n        return rotateButton;\n    }\n\n    /**\n     * @return the rotateAntiButton\n     */\n    public JButton getRotateAntiButton() {\n        return rotateAntiButton;\n    }\n\n    /**\n     * @return the loadFileButton\n     */\n    public JButton getLoadFileButton() {\n        return loadFileButton;\n    }\n\n    /**\n     * @return the reverseButton\n     */\n    public JButton getReverseButton() {\n        return reverseButton;\n    }\n}\n",
		"id": "EvoSuiteBenchmark/109_pdfsam/src/main/java/org/pdfsam/guiclient/commons/panels/JVisualPdfPageSelectionPanelTest0.java",
		"test_prompt": "// JVisualPdfPageSelectionPanelTest0.java\npackage org.pdfsam.guiclient.commons.panels;\n\nimport java.awt.Component;\nimport java.awt.Dimension;\nimport java.awt.GridBagConstraints;\nimport java.awt.GridBagLayout;\nimport java.awt.Insets;\nimport java.awt.event.ActionEvent;\nimport java.awt.event.ActionListener;\nimport java.awt.event.KeyAdapter;\nimport java.awt.event.KeyEvent;\nimport java.awt.event.MouseAdapter;\nimport java.awt.event.MouseEvent;\nimport java.io.File;\nimport java.util.ArrayList;\nimport java.util.Collection;\nimport java.util.LinkedHashSet;\nimport java.util.List;\nimport java.util.Set;\nimport javax.swing.BorderFactory;\nimport javax.swing.Box;\nimport javax.swing.BoxLayout;\nimport javax.swing.DropMode;\nimport javax.swing.ImageIcon;\nimport javax.swing.JButton;\nimport javax.swing.JLabel;\nimport javax.swing.JList;\nimport javax.swing.JMenuItem;\nimport javax.swing.JPanel;\nimport javax.swing.JPopupMenu;\nimport javax.swing.JScrollPane;\nimport javax.swing.ListSelectionModel;\nimport org.apache.commons.lang.StringUtils;\nimport org.apache.log4j.Logger;\nimport org.pdfsam.console.business.dto.commands.ConcatParsedCommand;\nimport org.pdfsam.guiclient.business.PagePreviewOpener;\nimport org.pdfsam.guiclient.business.PagesWorker;\nimport org.pdfsam.guiclient.business.listeners.EnterDoClickListener;\nimport org.pdfsam.guiclient.commons.business.listeners.VisualPdfSelectionActionListener;\nimport org.pdfsam.guiclient.commons.business.listeners.adapters.PageOpenerMouseAdapter;\nimport org.pdfsam.guiclient.commons.business.listeners.adapters.VisualPdfSelectionKeyAdapter;\nimport org.pdfsam.guiclient.commons.business.listeners.adapters.VisualPdfSelectionMouseAdapter;\nimport org.pdfsam.guiclient.commons.business.listeners.mediators.PagesActionsMediator;\nimport org.pdfsam.guiclient.commons.business.loaders.PdfThumbnailsLoader;\nimport org.pdfsam.guiclient.commons.components.JVisualSelectionList;\nimport org.pdfsam.guiclient.commons.dnd.handlers.VisualListExportTransferHandler;\nimport org.pdfsam.guiclient.commons.dnd.handlers.VisualListTransferHandler;\nimport org.pdfsam.guiclient.commons.models.VisualListModel;\nimport org.pdfsam.guiclient.commons.renderers.VisualListRenderer;\nimport org.pdfsam.guiclient.configuration.Configuration;\nimport org.pdfsam.guiclient.dto.DocumentInfo;\nimport org.pdfsam.guiclient.dto.Rotation;\nimport org.pdfsam.guiclient.dto.VisualPageListItem;\nimport org.pdfsam.guiclient.dto.VisualSelectedItem;\nimport org.pdfsam.i18n.GettextResource;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link JVisualPdfPageSelectionPanel}.\n* It contains ten unit test cases for the {@link JVisualPdfPageSelectionPanel#isWrap()} method.\n*/\nclass JVisualPdfPageSelectionPanelTest0 {"
	},
	{
		"original_code": "// JVisualPdfPageSelectionPanel.java\n/*\n * Created on 18-Jun-2008\n * Copyright (C) 2008 by Andrea Vacondio.\n *\n * This program is free software; you can redistribute it and/or modify it under the terms of the \n * GNU General Public License as published by the Free Software Foundation; \n * either version 2 of the License.\n * This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; \n * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. \n * See the GNU General Public License for more details.\n * You should have received a copy of the GNU General Public License along with this program; \n * if not, write to the Free Software Foundation, Inc., \n *  59 Temple Place, Suite 330, Boston, MA 02111-1307 USA\n */\npackage org.pdfsam.guiclient.commons.panels;\n\nimport java.awt.Component;\nimport java.awt.Dimension;\nimport java.awt.GridBagConstraints;\nimport java.awt.GridBagLayout;\nimport java.awt.Insets;\nimport java.awt.event.ActionEvent;\nimport java.awt.event.ActionListener;\nimport java.awt.event.KeyAdapter;\nimport java.awt.event.KeyEvent;\nimport java.awt.event.MouseAdapter;\nimport java.awt.event.MouseEvent;\nimport java.io.File;\nimport java.util.ArrayList;\nimport java.util.Collection;\nimport java.util.LinkedHashSet;\nimport java.util.List;\nimport java.util.Set;\nimport javax.swing.BorderFactory;\nimport javax.swing.Box;\nimport javax.swing.BoxLayout;\nimport javax.swing.DropMode;\nimport javax.swing.ImageIcon;\nimport javax.swing.JButton;\nimport javax.swing.JLabel;\nimport javax.swing.JList;\nimport javax.swing.JMenuItem;\nimport javax.swing.JPanel;\nimport javax.swing.JPopupMenu;\nimport javax.swing.JScrollPane;\nimport javax.swing.ListSelectionModel;\nimport org.apache.commons.lang.StringUtils;\nimport org.apache.log4j.Logger;\nimport org.pdfsam.console.business.dto.commands.ConcatParsedCommand;\nimport org.pdfsam.guiclient.business.PagePreviewOpener;\nimport org.pdfsam.guiclient.business.PagesWorker;\nimport org.pdfsam.guiclient.business.listeners.EnterDoClickListener;\nimport org.pdfsam.guiclient.commons.business.listeners.VisualPdfSelectionActionListener;\nimport org.pdfsam.guiclient.commons.business.listeners.adapters.PageOpenerMouseAdapter;\nimport org.pdfsam.guiclient.commons.business.listeners.adapters.VisualPdfSelectionKeyAdapter;\nimport org.pdfsam.guiclient.commons.business.listeners.adapters.VisualPdfSelectionMouseAdapter;\nimport org.pdfsam.guiclient.commons.business.listeners.mediators.PagesActionsMediator;\nimport org.pdfsam.guiclient.commons.business.loaders.PdfThumbnailsLoader;\nimport org.pdfsam.guiclient.commons.components.JVisualSelectionList;\nimport org.pdfsam.guiclient.commons.dnd.handlers.VisualListExportTransferHandler;\nimport org.pdfsam.guiclient.commons.dnd.handlers.VisualListTransferHandler;\nimport org.pdfsam.guiclient.commons.models.VisualListModel;\nimport org.pdfsam.guiclient.commons.renderers.VisualListRenderer;\nimport org.pdfsam.guiclient.configuration.Configuration;\nimport org.pdfsam.guiclient.dto.DocumentInfo;\nimport org.pdfsam.guiclient.dto.Rotation;\nimport org.pdfsam.guiclient.dto.VisualPageListItem;\nimport org.pdfsam.guiclient.dto.VisualSelectedItem;\nimport org.pdfsam.i18n.GettextResource;\n\n/**\n * Customizable panel for a visual page selection\n * @author Andrea Vacondio\n */\npublic class JVisualPdfPageSelectionPanel extends JPanel {\n\n    private static final long serialVersionUID = 1384691784810385438L;\n\n    private static final Logger log = Logger.getLogger(JVisualPdfPageSelectionPanel.class.getPackage().getName());\n\n    public static final int HORIZONTAL_ORIENTATION = 1;\n\n    public static final int VERTICAL_ORIENTATION = 2;\n\n    public static final int SINGLE_INTERVAL_SELECTION = ListSelectionModel.SINGLE_INTERVAL_SELECTION;\n\n    public static final int MULTIPLE_INTERVAL_SELECTION = ListSelectionModel.MULTIPLE_INTERVAL_SELECTION;\n\n    public static final int SINGLE_SELECTION = ListSelectionModel.SINGLE_SELECTION;\n\n    public static final int STYLE_TOP_PANEL_HIDE = 0;\n\n    public static final int STYLE_TOP_PANEL_MINIMAL = 1;\n\n    public static final int STYLE_TOP_PANEL_MEDIUM = 2;\n\n    public static final int STYLE_TOP_PANEL_FULL = 3;\n\n    public static final int DND_SUPPORT_NONE = 0;\n\n    public static final int DND_SUPPORT_FILES = 1;\n\n    public static final int DND_SUPPORT_JAVAOBJECTS = 2;\n\n    public static final int DND_SUPPORT_FILES_AND_JAVAOBJECTS = 3;\n\n    public static final String OUTPUT_PATH_PROPERTY = \"defaultOutputPath\";\n\n    private int orientation = HORIZONTAL_ORIENTATION;\n\n    private File selectedPdfDocument = null;\n\n    private String selectedPdfDocumentPassword = \"\";\n\n    private boolean showButtonPanel = true;\n\n    private int topPanelStyle = STYLE_TOP_PANEL_FULL;\n\n    private boolean showContextMenu = true;\n\n    private int dndSupport = DND_SUPPORT_NONE;\n\n    private int selectionType = SINGLE_INTERVAL_SELECTION;\n\n    private final JMenuItem menuItemSetOutputPath = new JMenuItem();\n\n    /**\n     * if true, deleted items appear with a red cross over\n     */\n    private boolean drawDeletedItems = true;\n\n    //if the JList uses wrap\n    private boolean wrap = false;\n\n    private Configuration config;\n\n    private PagesWorker pagesWorker;\n\n    //menu\n    private final JButton loadFileButton = new JButton();\n\n    private final JButton clearButton = new JButton();\n\n    private final JButton zoomInButton = new JButton();\n\n    private final JButton zoomOutButton = new JButton();\n\n    private final JLabel documentProperties = new JLabel();\n\n    private final JVisualSelectionList thumbnailList = new JVisualSelectionList();\n\n    private PdfThumbnailsLoader pdfLoader;\n\n    private VisualPdfSelectionActionListener pdfSelectionActionListener;\n\n    private PagesActionsMediator pageActionListener;\n\n    private final JPopupMenu popupMenu = new JPopupMenu();\n\n    private final JMenuItem menuItemPreview = new JMenuItem();\n\n    private final JPanel topPanel = new JPanel();\n\n    //button panel\n    private JPanel buttonPanel;\n\n    private JButton undeleteButton;\n\n    private JButton removeButton;\n\n    private JButton moveUpButton;\n\n    private JButton moveDownButton;\n\n    private JButton rotateButton;\n\n    private JButton rotateAntiButton;\n\n    private JButton reverseButton;\n\n    /**\n     * default constructor\n     */\n    public JVisualPdfPageSelectionPanel() {\n        this(HORIZONTAL_ORIENTATION);\n    }\n\n    /**\n     * draw deleted items default value (true)\n     * show button panel default value (true)\n     * @param orientation panel orientation\n     */\n    public JVisualPdfPageSelectionPanel(int orientation) {\n        this(orientation, true, true);\n    }\n\n    /**\n     * @param orientation panel orientation\n     * @param drawDeletedItems if true deleted items appear with a red cross over\n     * @param showButtonPanel true=shows button panel\n     */\n    public JVisualPdfPageSelectionPanel(int orientation, boolean drawDeletedItems, boolean showButtonPanel) {\n        this(orientation, drawDeletedItems, showButtonPanel, true, STYLE_TOP_PANEL_FULL);\n    }\n\n    /**\n     * @param orientation panel orientation\n     * @param drawDeletedItems if true deleted items appear with a red cross over\n     * @param showButtonPanel true=shows button panel\n     * @param showContextMenu\n     * @param topPanelStyle\n     */\n    public JVisualPdfPageSelectionPanel(int orientation, boolean drawDeletedItems, boolean showButtonPanel, boolean showContextMenu, int topPanelStyle) {\n        this(orientation, drawDeletedItems, showButtonPanel, showContextMenu, topPanelStyle, DND_SUPPORT_FILES_AND_JAVAOBJECTS, SINGLE_INTERVAL_SELECTION);\n    }\n\n    /**\n     * @param orientation panel orientation\n     * @param drawDeletedItems if true deleted items appear with a red cross over\n     * @param showButtonPanel true=shows button panel\n     * @param showContextMenu\n     * @param topPanelStyle top panel style\n     * @param selectionType selection type\n     */\n    public JVisualPdfPageSelectionPanel(int orientation, boolean drawDeletedItems, boolean showButtonPanel, boolean showContextMenu, int topPanelStyle, int dndSupport, int selectionType) {\n        this.orientation = orientation;\n        this.config = Configuration.getInstance();\n        this.pdfLoader = new PdfThumbnailsLoader(this);\n        this.drawDeletedItems = drawDeletedItems;\n        this.showButtonPanel = showButtonPanel;\n        this.showContextMenu = showContextMenu;\n        this.topPanelStyle = topPanelStyle;\n        this.dndSupport = dndSupport;\n        this.selectionType = selectionType;\n        init();\n    }\n\n    /**\n     * panel initialization\n     */\n    private void init() {\n        setLayout(new GridBagLayout());\n        thumbnailList.setDrawDeletedItems(drawDeletedItems);\n        if (dndSupport == DND_SUPPORT_FILES) {\n            thumbnailList.setTransferHandler(new VisualListExportTransferHandler(pdfLoader));\n        } else if (dndSupport == DND_SUPPORT_JAVAOBJECTS) {\n            thumbnailList.setTransferHandler(new VisualListTransferHandler());\n        } else if (dndSupport == DND_SUPPORT_FILES_AND_JAVAOBJECTS) {\n            thumbnailList.setTransferHandler(new VisualListTransferHandler(pdfLoader));\n        } else {\n            thumbnailList.setTransferHandler(new VisualListExportTransferHandler(null));\n        }\n        thumbnailList.setDragEnabled(true);\n        thumbnailList.setDropMode(DropMode.INSERT);\n        pagesWorker = new PagesWorker(thumbnailList);\n        thumbnailList.addKeyListener(new VisualPdfSelectionKeyAdapter(pagesWorker));\n        thumbnailList.addMouseListener(new PageOpenerMouseAdapter(thumbnailList));\n        if (showButtonPanel) {\n            initButtonPanel(pagesWorker);\n            initKeyListener();\n        }\n        //JList orientation\n        if (HORIZONTAL_ORIENTATION == orientation) {\n            thumbnailList.setLayoutOrientation(JList.HORIZONTAL_WRAP);\n        } else {\n            if (wrap) {\n                thumbnailList.setLayoutOrientation(JList.VERTICAL_WRAP);\n            }\n        }\n        topPanel.setLayout(new BoxLayout(topPanel, BoxLayout.LINE_AXIS));\n        topPanel.setPreferredSize(new Dimension(400, 30));\n        pdfSelectionActionListener = new VisualPdfSelectionActionListener(this, pdfLoader);\n        if (topPanelStyle >= STYLE_TOP_PANEL_FULL) {\n            //load button\n            loadFileButton.setMargin(new Insets(1, 1, 1, 1));\n            loadFileButton.setText(GettextResource.gettext(config.getI18nResourceBundle(), \"Open\"));\n            loadFileButton.setPreferredSize(new Dimension(100, 30));\n            loadFileButton.setToolTipText(GettextResource.gettext(config.getI18nResourceBundle(), \"Load a pdf document\"));\n            loadFileButton.setIcon(new ImageIcon(this.getClass().getResource(\"/images/add.png\")));\n            loadFileButton.addKeyListener(new EnterDoClickListener(loadFileButton));\n            loadFileButton.setAlignmentX(Component.CENTER_ALIGNMENT);\n            loadFileButton.setAlignmentY(Component.CENTER_ALIGNMENT);\n            loadFileButton.setActionCommand(VisualPdfSelectionActionListener.ADD);\n            loadFileButton.addActionListener(pdfSelectionActionListener);\n        }\n        documentProperties.setIcon(new ImageIcon(this.getClass().getResource(\"/images/info.png\")));\n        documentProperties.setVisible(false);\n        if (topPanelStyle >= STYLE_TOP_PANEL_MEDIUM) {\n            clearButton.setMargin(new Insets(1, 1, 1, 1));\n            clearButton.setMinimumSize(new Dimension(30, 30));\n            clearButton.setText(GettextResource.gettext(config.getI18nResourceBundle(), \"Clear\"));\n            clearButton.setIcon(new ImageIcon(this.getClass().getResource(\"/images/clear.png\")));\n            clearButton.addActionListener(new ActionListener() {\n\n                public void actionPerformed(ActionEvent e) {\n                    resetPanel();\n                }\n            });\n        }\n        zoomInButton.setMargin(new Insets(1, 1, 1, 1));\n        zoomInButton.setMinimumSize(new Dimension(30, 30));\n        zoomInButton.setText(GettextResource.gettext(config.getI18nResourceBundle(), \"Zoom in\"));\n        zoomInButton.setIcon(new ImageIcon(this.getClass().getResource(\"/images/zoomin.png\")));\n        zoomInButton.addActionListener(new ActionListener() {\n\n            public void actionPerformed(ActionEvent e) {\n                try {\n                    thumbnailList.incZoomLevel();\n                    zoomOutButton.setEnabled(true);\n                    if (thumbnailList.getCurrentZoomLevel() >= JVisualSelectionList.MAX_ZOOM_LEVEL) {\n                        zoomInButton.setEnabled(false);\n                    }\n                    ((VisualListModel) thumbnailList.getModel()).elementsChanged();\n                } catch (Exception ex) {\n                    log.error(GettextResource.gettext(config.getI18nResourceBundle(), \"Error setting zoom level.\"), ex);\n                }\n            }\n        });\n        zoomOutButton.setMargin(new Insets(1, 1, 1, 1));\n        zoomOutButton.setMinimumSize(new Dimension(30, 30));\n        zoomOutButton.setText(GettextResource.gettext(config.getI18nResourceBundle(), \"Zoom out\"));\n        zoomOutButton.setIcon(new ImageIcon(this.getClass().getResource(\"/images/zoomout.png\")));\n        zoomOutButton.addActionListener(new ActionListener() {\n\n            public void actionPerformed(ActionEvent e) {\n                try {\n                    thumbnailList.deincZoomLevel();\n                    zoomInButton.setEnabled(true);\n                    if (thumbnailList.getCurrentZoomLevel() <= JVisualSelectionList.MIN_ZOOM_LEVEL) {\n                        zoomOutButton.setEnabled(false);\n                    }\n                    ((VisualListModel) thumbnailList.getModel()).elementsChanged();\n                } catch (Exception ex) {\n                    log.error(GettextResource.gettext(config.getI18nResourceBundle(), \"Error setting zoom level.\"), ex);\n                }\n            }\n        });\n        thumbnailList.setModel(new VisualListModel());\n        thumbnailList.setCellRenderer(new VisualListRenderer());\n        thumbnailList.setVisibleRowCount(-1);\n        thumbnailList.setSelectionMode(selectionType);\n        JScrollPane listScroller = new JScrollPane(thumbnailList);\n        //preview item\n        menuItemPreview.setIcon(new ImageIcon(this.getClass().getResource(\"/images/preview-viewer.png\")));\n        menuItemPreview.setText(GettextResource.gettext(config.getI18nResourceBundle(), \"Preview\"));\n        menuItemPreview.addMouseListener(new MouseAdapter() {\n\n            public void mouseReleased(MouseEvent e) {\n                int[] selection = thumbnailList.getSelectedIndices();\n                if (selection != null && selection.length == 1) {\n                    VisualPageListItem item = (VisualPageListItem) thumbnailList.getModel().getElementAt(selection[0]);\n                    PagePreviewOpener.getInstance().openPreview(item.getParentFileCanonicalPath(), item.getDocumentPassword(), item.getPageNumber());\n                }\n            }\n        });\n        if (showContextMenu) {\n            //popup\n            final JMenuItem menuItemMoveUp = new JMenuItem();\n            menuItemMoveUp.setIcon(new ImageIcon(this.getClass().getResource(\"/images/up.png\")));\n            menuItemMoveUp.setText(GettextResource.gettext(config.getI18nResourceBundle(), \"Move Up\"));\n            menuItemMoveUp.addMouseListener(new VisualPdfSelectionMouseAdapter(PagesWorker.MOVE_UP, pagesWorker));\n            popupMenu.add(menuItemMoveUp);\n            final JMenuItem menuItemMoveDown = new JMenuItem();\n            menuItemMoveDown.setIcon(new ImageIcon(this.getClass().getResource(\"/images/down.png\")));\n            menuItemMoveDown.setText(GettextResource.gettext(config.getI18nResourceBundle(), \"Move Down\"));\n            menuItemMoveDown.addMouseListener(new VisualPdfSelectionMouseAdapter(PagesWorker.MOVE_DOWN, pagesWorker));\n            popupMenu.add(menuItemMoveDown);\n            final JMenuItem menuItemRemove = new JMenuItem();\n            menuItemRemove.setIcon(new ImageIcon(this.getClass().getResource(\"/images/remove.png\")));\n            menuItemRemove.setText(GettextResource.gettext(config.getI18nResourceBundle(), \"Delete\"));\n            menuItemRemove.addMouseListener(new VisualPdfSelectionMouseAdapter(PagesWorker.REMOVE, pagesWorker));\n            popupMenu.add(menuItemRemove);\n            //if elements are physically deleted i don't need this item\n            if (drawDeletedItems) {\n                final JMenuItem menuItemUndelete = new JMenuItem();\n                menuItemUndelete.setIcon(new ImageIcon(this.getClass().getResource(\"/images/remove.png\")));\n                menuItemUndelete.setText(GettextResource.gettext(config.getI18nResourceBundle(), \"Undelete\"));\n                menuItemUndelete.addMouseListener(new VisualPdfSelectionMouseAdapter(PagesWorker.UNDELETE, pagesWorker));\n                popupMenu.add(menuItemUndelete);\n            }\n            //rotate item\n            final JMenuItem menuItemRotate = new JMenuItem();\n            menuItemRotate.setIcon(new ImageIcon(this.getClass().getResource(\"/images/clockwise.png\")));\n            menuItemRotate.setText(GettextResource.gettext(config.getI18nResourceBundle(), \"Rotate clockwise\"));\n            menuItemRotate.addMouseListener(new VisualPdfSelectionMouseAdapter(PagesWorker.ROTATE_CLOCK, pagesWorker));\n            popupMenu.add(menuItemRotate);\n            //rotate anticlock item\n            final JMenuItem menuItemAntiRotate = new JMenuItem();\n            menuItemAntiRotate.setIcon(new ImageIcon(this.getClass().getResource(\"/images/anticlockwise.png\")));\n            menuItemAntiRotate.setText(GettextResource.gettext(config.getI18nResourceBundle(), \"Rotate anticlockwise\"));\n            menuItemAntiRotate.addMouseListener(new VisualPdfSelectionMouseAdapter(PagesWorker.ROTATE_ANTICLOCK, pagesWorker));\n            popupMenu.add(menuItemAntiRotate);\n            //reverse item\n            final JMenuItem menuItemReverse = new JMenuItem();\n            menuItemReverse.setIcon(new ImageIcon(this.getClass().getResource(\"/images/reverse.png\")));\n            menuItemReverse.setText(GettextResource.gettext(config.getI18nResourceBundle(), \"Reverse\"));\n            menuItemReverse.addMouseListener(new VisualPdfSelectionMouseAdapter(PagesWorker.REVERSE, pagesWorker));\n            popupMenu.add(menuItemReverse);\n            enableSetOutputPathMenuItem();\n            addPopupShower();\n        }\n        popupMenu.add(menuItemPreview);\n        if (topPanelStyle >= STYLE_TOP_PANEL_FULL) {\n            topPanel.add(Box.createRigidArea(new Dimension(5, 0)));\n            topPanel.add(loadFileButton);\n        }\n        if (topPanelStyle >= STYLE_TOP_PANEL_MEDIUM) {\n            topPanel.add(Box.createRigidArea(new Dimension(5, 0)));\n            topPanel.add(clearButton);\n        }\n        topPanel.add(Box.createRigidArea(new Dimension(5, 0)));\n        topPanel.add(documentProperties);\n        topPanel.add(Box.createHorizontalGlue());\n        topPanel.add(zoomInButton);\n        topPanel.add(Box.createRigidArea(new Dimension(5, 0)));\n        topPanel.add(zoomOutButton);\n        GridBagConstraints topConstraints = new GridBagConstraints();\n        topConstraints.fill = GridBagConstraints.BOTH;\n        topConstraints.gridx = 0;\n        topConstraints.gridy = 0;\n        topConstraints.gridwidth = 3;\n        topConstraints.gridheight = 1;\n        topConstraints.insets = new Insets(5, 5, 5, 5);\n        topConstraints.weightx = 1.0;\n        topConstraints.weighty = 0.0;\n        if (topPanelStyle > STYLE_TOP_PANEL_HIDE) {\n            add(topPanel, topConstraints);\n        }\n        GridBagConstraints thumbConstraints = new GridBagConstraints();\n        thumbConstraints.fill = GridBagConstraints.BOTH;\n        thumbConstraints.gridx = 0;\n        thumbConstraints.gridy = 1;\n        thumbConstraints.gridwidth = (showButtonPanel ? 2 : 3);\n        thumbConstraints.gridheight = 2;\n        thumbConstraints.insets = new Insets(5, 5, 5, 5);\n        thumbConstraints.weightx = 1.0;\n        thumbConstraints.weighty = 1.0;\n        add(listScroller, thumbConstraints);\n        if (showButtonPanel) {\n            GridBagConstraints buttonsConstraints = new GridBagConstraints();\n            buttonsConstraints.fill = GridBagConstraints.BOTH;\n            buttonsConstraints.gridx = 2;\n            buttonsConstraints.gridy = 1;\n            buttonsConstraints.gridwidth = 1;\n            buttonsConstraints.gridheight = 2;\n            buttonsConstraints.insets = new Insets(5, 5, 5, 5);\n            buttonsConstraints.weightx = 0.0;\n            buttonsConstraints.weighty = 1.0;\n            add(buttonPanel, buttonsConstraints);\n        }\n    }\n\n    /**\n     * adds a button to the button panel\n     * @param button\n     */\n    private void addButtonToButtonPanel(JButton button) {\n        button.setMinimumSize(new Dimension(90, 25));\n        button.setMaximumSize(new Dimension(160, 25));\n        buttonPanel.add(button);\n        buttonPanel.add(Box.createRigidArea(new Dimension(0, 5)));\n    }\n\n    private void initButtonPanel(PagesWorker pagesWorker) {\n        buttonPanel = new JPanel();\n        buttonPanel.setLayout(new BoxLayout(buttonPanel, BoxLayout.Y_AXIS));\n        buttonPanel.setBorder(BorderFactory.createEmptyBorder(0, 10, 10, 10));\n        pageActionListener = new PagesActionsMediator(pagesWorker);\n        //move up button\n        moveUpButton = new JButton();\n        moveUpButton.setMargin(new Insets(2, 2, 2, 2));\n        moveUpButton.addActionListener(pageActionListener);\n        moveUpButton.setIcon(new ImageIcon(this.getClass().getResource(\"/images/up.png\")));\n        moveUpButton.setActionCommand(PagesWorker.MOVE_UP);\n        moveUpButton.setText(GettextResource.gettext(config.getI18nResourceBundle(), \"Move Up\"));\n        moveUpButton.setToolTipText(GettextResource.gettext(config.getI18nResourceBundle(), \"Move up selected pages\") + \" \" + GettextResource.gettext(config.getI18nResourceBundle(), \"(Alt+ArrowUp)\"));\n        moveUpButton.addKeyListener(new EnterDoClickListener(moveUpButton));\n        moveUpButton.setAlignmentX(Component.CENTER_ALIGNMENT);\n        addButtonToButtonPanel(moveUpButton);\n        //move down button\n        moveDownButton = new JButton();\n        moveDownButton.addActionListener(pageActionListener);\n        moveDownButton.setIcon(new ImageIcon(this.getClass().getResource(\"/images/down.png\")));\n        moveDownButton.setActionCommand(PagesWorker.MOVE_DOWN);\n        moveDownButton.setMargin(new Insets(2, 2, 2, 2));\n        moveDownButton.setText(GettextResource.gettext(config.getI18nResourceBundle(), \"Move Down\"));\n        moveDownButton.setToolTipText(GettextResource.gettext(config.getI18nResourceBundle(), \"Move down selected pages\") + \" \" + GettextResource.gettext(config.getI18nResourceBundle(), \"(Alt+ArrowDown)\"));\n        moveDownButton.addKeyListener(new EnterDoClickListener(moveDownButton));\n        moveDownButton.setAlignmentX(Component.CENTER_ALIGNMENT);\n        addButtonToButtonPanel(moveDownButton);\n        //delete button\n        removeButton = new JButton();\n        removeButton.addActionListener(pageActionListener);\n        removeButton.setIcon(new ImageIcon(this.getClass().getResource(\"/images/remove.png\")));\n        removeButton.setActionCommand(PagesWorker.REMOVE);\n        removeButton.setMargin(new Insets(2, 2, 2, 2));\n        removeButton.setText(GettextResource.gettext(config.getI18nResourceBundle(), \"Delete\"));\n        removeButton.setToolTipText(GettextResource.gettext(config.getI18nResourceBundle(), \"Delete selected pages\") + \" \" + GettextResource.gettext(config.getI18nResourceBundle(), \"(Canc)\"));\n        removeButton.addKeyListener(new EnterDoClickListener(removeButton));\n        removeButton.setAlignmentX(Component.CENTER_ALIGNMENT);\n        addButtonToButtonPanel(removeButton);\n        //undelete button\n        if (drawDeletedItems) {\n            undeleteButton = new JButton();\n            undeleteButton.addActionListener(pageActionListener);\n            undeleteButton.setIcon(new ImageIcon(this.getClass().getResource(\"/images/remove.png\")));\n            undeleteButton.setActionCommand(PagesWorker.UNDELETE);\n            undeleteButton.setMargin(new Insets(2, 2, 2, 2));\n            undeleteButton.setText(GettextResource.gettext(config.getI18nResourceBundle(), \"Undelete\"));\n            undeleteButton.setToolTipText(GettextResource.gettext(config.getI18nResourceBundle(), \"Undelete selected pages\") + \" \" + GettextResource.gettext(config.getI18nResourceBundle(), \"(Ctrl+Z)\"));\n            undeleteButton.addKeyListener(new EnterDoClickListener(undeleteButton));\n            undeleteButton.setAlignmentX(Component.CENTER_ALIGNMENT);\n            addButtonToButtonPanel(undeleteButton);\n        }\n        //rotate button\n        rotateButton = new JButton();\n        rotateButton.addActionListener(pageActionListener);\n        rotateButton.setIcon(new ImageIcon(this.getClass().getResource(\"/images/clockwise.png\")));\n        rotateButton.setActionCommand(PagesWorker.ROTATE_CLOCK);\n        rotateButton.setMargin(new Insets(2, 2, 2, 2));\n        rotateButton.setText(GettextResource.gettext(config.getI18nResourceBundle(), \"Rotate right\"));\n        rotateButton.setToolTipText(GettextResource.gettext(config.getI18nResourceBundle(), \"Rotate clockwise selected pages\") + \" \" + GettextResource.gettext(config.getI18nResourceBundle(), \"(Alt+ArrowRight)\"));\n        rotateButton.addKeyListener(new EnterDoClickListener(rotateButton));\n        rotateButton.setAlignmentX(Component.CENTER_ALIGNMENT);\n        addButtonToButtonPanel(rotateButton);\n        //rotate button\n        rotateAntiButton = new JButton();\n        rotateAntiButton.addActionListener(pageActionListener);\n        rotateAntiButton.setIcon(new ImageIcon(this.getClass().getResource(\"/images/anticlockwise.png\")));\n        rotateAntiButton.setActionCommand(PagesWorker.ROTATE_ANTICLOCK);\n        rotateAntiButton.setMargin(new Insets(2, 2, 2, 2));\n        rotateAntiButton.setText(GettextResource.gettext(config.getI18nResourceBundle(), \"Rotate left\"));\n        rotateAntiButton.setToolTipText(GettextResource.gettext(config.getI18nResourceBundle(), \"Rotate anticlockwise selected pages\") + \" \" + GettextResource.gettext(config.getI18nResourceBundle(), \"(Alt+ArrowLeft)\"));\n        rotateAntiButton.addKeyListener(new EnterDoClickListener(rotateAntiButton));\n        rotateAntiButton.setAlignmentX(Component.CENTER_ALIGNMENT);\n        addButtonToButtonPanel(rotateAntiButton);\n        //reverse button\n        reverseButton = new JButton();\n        reverseButton.addActionListener(pageActionListener);\n        reverseButton.setIcon(new ImageIcon(this.getClass().getResource(\"/images/reverse.png\")));\n        reverseButton.setActionCommand(PagesWorker.REVERSE);\n        reverseButton.setMargin(new Insets(2, 2, 2, 2));\n        reverseButton.setText(GettextResource.gettext(config.getI18nResourceBundle(), \"Reverse\"));\n        reverseButton.setToolTipText(GettextResource.gettext(config.getI18nResourceBundle(), \"Reverse pages order\"));\n        reverseButton.addKeyListener(new EnterDoClickListener(reverseButton));\n        reverseButton.setAlignmentX(Component.CENTER_ALIGNMENT);\n        addButtonToButtonPanel(reverseButton);\n    }\n\n    private void initKeyListener() {\n        //key listener\n        thumbnailList.addKeyListener(new KeyAdapter() {\n\n            public void keyPressed(KeyEvent e) {\n                if ((e.isAltDown()) && (e.getKeyCode() == KeyEvent.VK_UP)) {\n                    moveUpButton.doClick();\n                } else if ((e.isAltDown()) && (e.getKeyCode() == KeyEvent.VK_DOWN)) {\n                    moveDownButton.doClick();\n                } else if ((e.getKeyCode() == KeyEvent.VK_DELETE)) {\n                    removeButton.doClick();\n                } else if (drawDeletedItems && (e.isControlDown()) && (e.getKeyCode() == KeyEvent.VK_Z)) {\n                    undeleteButton.doClick();\n                } else if ((e.isAltDown()) && (e.getKeyCode() == KeyEvent.VK_RIGHT)) {\n                    rotateButton.doClick();\n                } else if ((e.isAltDown()) && (e.getKeyCode() == KeyEvent.VK_LEFT)) {\n                    rotateAntiButton.doClick();\n                }\n            }\n        });\n    }\n\n    /**\n     * reset the panel\n     */\n    public void resetPanel() {\n        thumbnailList.setCurrentZoomLevel(JVisualSelectionList.DEFAULT_ZOOM_LEVEL);\n        zoomInButton.setEnabled(true);\n        zoomOutButton.setEnabled(true);\n        ((VisualListModel) thumbnailList.getModel()).clearData();\n        selectedPdfDocument = null;\n        selectedPdfDocumentPassword = \"\";\n        setDocumentPropertiesVisible(false);\n        getPdfLoader().cleanCreator();\n    }\n\n    /**\n     * Set the visible the label that shows document properties\n     * @param visible\n     */\n    public void setDocumentPropertiesVisible(boolean visible) {\n        documentProperties.setVisible(visible);\n    }\n\n    /**\n     * Set the document properties to be shown as a tooltip of the documentProperties JLabel\n     * @param documetnInfo bean containing document informations\n     */\n    public void setDocumentProperties(DocumentInfo documetnInfo) {\n        if (documetnInfo != null) {\n            String encrypted = documetnInfo.isEncrypted() ? GettextResource.gettext(config.getI18nResourceBundle(), \"Yes\") : GettextResource.gettext(config.getI18nResourceBundle(), \"No\");\n            documentProperties.setToolTipText(\"<html><body><b><p>\" + GettextResource.gettext(config.getI18nResourceBundle(), \"File: \") + \"</b>\" + documetnInfo.getFileName() + \"</p>\" + \"<p><b>\" + GettextResource.gettext(config.getI18nResourceBundle(), \"Pages: \") + \"</b>\" + documetnInfo.getPages() + \"</p>\" + \"<p><b>\" + GettextResource.gettext(config.getI18nResourceBundle(), \"Pdf version: \") + \"</b>\" + (documetnInfo.getPdfVersion() != null ? documetnInfo.getPdfVersion() : \"\") + \"</p>\" + \"<p><b>\" + GettextResource.gettext(config.getI18nResourceBundle(), \"Title: \") + \"</b>\" + StringUtils.trimToEmpty(documetnInfo.getDocumentMetaData().getTitle()) + \"</p>\" + \"<p><b>\" + GettextResource.gettext(config.getI18nResourceBundle(), \"Author: \") + \"</b>\" + StringUtils.trimToEmpty(documetnInfo.getDocumentMetaData().getAuthor()) + \"</p>\" + \"<p><b>\" + GettextResource.gettext(config.getI18nResourceBundle(), \"Creator: \") + \"</b>\" + StringUtils.trimToEmpty(documetnInfo.getDocumentMetaData().getCreator()) + \"</p>\" + \"<p><b>\" + GettextResource.gettext(config.getI18nResourceBundle(), \"Producer: \") + \"</b>\" + StringUtils.trimToEmpty(documetnInfo.getDocumentMetaData().getProducer()) + \"</p>\" + \"<p><b>\" + GettextResource.gettext(config.getI18nResourceBundle(), \"Encrypted: \") + \"</b>\" + encrypted + \"</p>\" + \"</body></html>\");\n        }\n    }\n\n    /**\n     * @return the orientation\n     */\n    public int getOrientation() {\n        return orientation;\n    }\n\n    /**\n     * @return the selectedPdfDocument\n     */\n    public File getSelectedPdfDocument() {\n        return selectedPdfDocument;\n    }\n\n    /**\n     * @return the wrap\n     */\n    public boolean isWrap() {\n        return wrap;\n    }\n\n    /**\n     * @return the thumbnailList\n     */\n    public JVisualSelectionList getThumbnailList() {\n        return thumbnailList;\n    }\n\n    /**\n     * @param selectedPdfDocument the selectedPdfDocument to set\n     */\n    public void setSelectedPdfDocument(File selectedPdfDocument) {\n        this.selectedPdfDocument = selectedPdfDocument;\n    }\n\n    /**\n     * @return the dndSupport\n     */\n    public int getDndSupport() {\n        return dndSupport;\n    }\n\n    /**\n     * @return the drawDeletedItems\n     */\n    public boolean isDrawDeletedItems() {\n        return drawDeletedItems;\n    }\n\n    /**\n     * @param drawDeletedItems the drawDeletedItems to set\n     */\n    public void setDrawDeletedItems(boolean drawDeletedItems) {\n        this.drawDeletedItems = drawDeletedItems;\n    }\n\n    /**\n     * @return the pdfLoader\n     */\n    public PdfThumbnailsLoader getPdfLoader() {\n        return pdfLoader;\n    }\n\n    /**\n     * @return the topPanel\n     */\n    public JPanel getTopPanel() {\n        return topPanel;\n    }\n\n    /**\n     * @param pages input selection set\n     * @return a String version of the input Set, ready to be used as -u parameter for the console\n     */\n    private String getSelectionString(Set<Integer> pages) {\n        StringBuilder buffer = new StringBuilder();\n        for (Integer page : pages) {\n            buffer.append(page.toString()).append(\",\");\n        }\n        return StringUtils.chomp(buffer.toString(), \",\");\n    }\n\n    /**\n     * @return an ordered List of {@link VisualSelectedItem} corresponding to the panel elements.\n     */\n    private List<VisualSelectedItem> getSelectedItemsList() {\n        List<VisualSelectedItem> retVal = new ArrayList<VisualSelectedItem>();\n        List<VisualPageListItem> validElements = ((VisualListModel) thumbnailList.getModel()).getValidElements();\n        VisualSelectedItem tmpElement = null;\n        Set<Integer> pages = new LinkedHashSet<Integer>();\n        for (VisualPageListItem currentElement : validElements) {\n            //first element\n            if (tmpElement == null) {\n                tmpElement = new VisualSelectedItem(currentElement.getParentFileCanonicalPath(), currentElement.getDocumentPassword());\n                pages.add(currentElement.getPageNumber());\n            } else {\n                //filename changed\n                if (!tmpElement.getSelectedFile().equals(currentElement.getParentFileCanonicalPath())) {\n                    tmpElement.setPagesSelection(getSelectionString(pages));\n                    retVal.add(tmpElement);\n                    tmpElement = new VisualSelectedItem(currentElement.getParentFileCanonicalPath(), currentElement.getDocumentPassword());\n                    pages.clear();\n                    pages.add(currentElement.getPageNumber());\n                } else {\n                    //page already there\n                    if (!pages.add(currentElement.getPageNumber())) {\n                        tmpElement.setPagesSelection(getSelectionString(pages));\n                        retVal.add(tmpElement);\n                        tmpElement = new VisualSelectedItem(currentElement.getParentFileCanonicalPath(), currentElement.getDocumentPassword());\n                        pages.clear();\n                        pages.add(currentElement.getPageNumber());\n                    }\n                }\n            }\n        }\n        tmpElement.setPagesSelection(getSelectionString(pages));\n        retVal.add(tmpElement);\n        return retVal;\n    }\n\n    /**\n     * A of String List that can be used as input for the console. It contains the -f and -u parameters for this panel\n     * @return\n     */\n    public List<String> getValidConsoleParameters() {\n        List<String> retVal = new ArrayList<String>();\n        StringBuilder builder = new StringBuilder();\n        for (VisualSelectedItem item : getSelectedItemsList()) {\n            builder.append(item.getPagesSelection()).append(\":\");\n            retVal.add(\"-\" + ConcatParsedCommand.F_ARG);\n            if (StringUtils.isEmpty(item.getPassword())) {\n                retVal.add(item.getSelectedFile());\n            } else {\n                retVal.add(item.getSelectedFile() + \":\" + item.getPassword());\n            }\n        }\n        retVal.add(\"-\" + ConcatParsedCommand.U_ARG);\n        retVal.add(builder.toString());\n        return retVal;\n    }\n\n    /**\n     * @return true if the panel has valid elements\n     */\n    public boolean hasValidElements() {\n        List<VisualPageListItem> elements = ((VisualListModel) thumbnailList.getModel()).getValidElements();\n        return (elements != null && !elements.isEmpty());\n    }\n\n    /**\n     * @return a String that can be used as a -r param for the pdfsam-console\n     */\n    public String getRotatedElementsString() {\n        StringBuilder retVal = new StringBuilder();\n        Collection<VisualPageListItem> validElements = ((VisualListModel) thumbnailList.getModel()).getValidElements();\n        if (validElements != null && !validElements.isEmpty()) {\n            int i = 0;\n            for (VisualPageListItem currentElement : validElements) {\n                i++;\n                if (!Rotation.DEGREES_0.equals(currentElement.getRotation())) {\n                    retVal.append(i).append(\":\").append(currentElement.getRotation().getDegrees()).append(\",\");\n                }\n            }\n        }\n        return retVal.toString();\n    }\n\n    /**\n     * Add a component on the left of the top panel\n     * @param c\n     */\n    public void addToTopPanel(Component c) {\n        topPanel.removeAll();\n        /*TODO fix this*/\n        if (c != null) {\n            topPanel.add(Box.createRigidArea(new Dimension(5, 0)));\n            topPanel.add(c);\n        }\n        if (topPanelStyle >= STYLE_TOP_PANEL_FULL) {\n            topPanel.add(Box.createRigidArea(new Dimension(5, 0)));\n            topPanel.add(loadFileButton);\n        }\n        if (topPanelStyle >= STYLE_TOP_PANEL_MEDIUM) {\n            topPanel.add(Box.createRigidArea(new Dimension(5, 0)));\n            topPanel.add(clearButton);\n        }\n        topPanel.add(Box.createRigidArea(new Dimension(5, 0)));\n        topPanel.add(documentProperties);\n        topPanel.add(Box.createHorizontalGlue());\n        topPanel.add(zoomInButton);\n        topPanel.add(Box.createRigidArea(new Dimension(5, 0)));\n        topPanel.add(zoomOutButton);\n    }\n\n    /**\n     * @return Returns an array of all the selected values, in increasing order based on their indices in the list or an empty array if nothing is selected\n     */\n    public VisualPageListItem[] getSelectedElements() {\n        Object[] elems = thumbnailList.getSelectedValues();\n        VisualPageListItem[] visElems = new VisualPageListItem[elems.length];\n        System.arraycopy(elems, 0, visElems, 0, elems.length);\n        return visElems;\n    }\n\n    /**\n     * @param c\n     * @see VisualListModel#appendAllElements(Collection)\n     */\n    public void appendElements(Collection<VisualPageListItem> c) {\n        ((VisualListModel) thumbnailList.getModel()).appendAllElements(c);\n    }\n\n    /**\n     * @param c\n     * @see VisualListModel#prependAllElements(Collection)\n     */\n    public void prependElements(Collection<VisualPageListItem> c) {\n        ((VisualListModel) thumbnailList.getModel()).prependAllElements(c);\n    }\n\n    /**\n     * Adds a item to the popup menu\n     * @param item\n     */\n    public void addMenuItem(JMenuItem item) {\n        popupMenu.add(item);\n    }\n\n    /**\n     * enables the set output path menu item\n     */\n    public void enableSetOutputPathMenuItem() {\n        menuItemSetOutputPath.setIcon(new ImageIcon(this.getClass().getResource(\"/images/set_outfile.png\")));\n        menuItemSetOutputPath.setText(GettextResource.gettext(config.getI18nResourceBundle(), \"Set output file\"));\n        menuItemSetOutputPath.addMouseListener(new MouseAdapter() {\n\n            public void mouseReleased(MouseEvent e) {\n                if (selectedPdfDocument != null) {\n                    try {\n                        String defaultOutputPath = selectedPdfDocument.getParent();\n                        firePropertyChange(OUTPUT_PATH_PROPERTY, \"\", defaultOutputPath);\n                    } catch (Exception ex) {\n                        log.error(GettextResource.gettext(config.getI18nResourceBundle(), \"Error: Unable to get the file path.\"), ex);\n                    }\n                }\n            }\n        });\n        popupMenu.add(menuItemSetOutputPath);\n        if (!showContextMenu) {\n            //show popup\n            addPopupShower();\n        }\n    }\n\n    /**\n     * adds the listener that showes the popup\n     */\n    private void addPopupShower() {\n        //show popup\n        thumbnailList.addMouseListener(new MouseAdapter() {\n\n            public void mousePressed(MouseEvent e) {\n                if (e.isPopupTrigger()) {\n                    showMenu(e);\n                }\n            }\n\n            public void mouseReleased(MouseEvent e) {\n                if (e.isPopupTrigger()) {\n                    showMenu(e);\n                }\n            }\n\n            private void showMenu(MouseEvent e) {\n                int[] selection = thumbnailList.getSelectedIndices();\n                if (!(selection != null && selection.length > 1)) {\n                    thumbnailList.setSelectedIndex(thumbnailList.locationToIndex(e.getPoint()));\n                    selection = thumbnailList.getSelectedIndices();\n                }\n                menuItemPreview.setEnabled(selection != null && selection.length == 1);\n                popupMenu.show(thumbnailList, e.getX(), e.getY());\n            }\n        });\n    }\n\n    /**\n     * remove the set ouput path menu item\n     */\n    public void disableSetOutputPathMenuItem() {\n        popupMenu.remove(menuItemSetOutputPath);\n    }\n\n    /**\n     * @return the selectedPdfDocumentPassword\n     */\n    public String getSelectedPdfDocumentPassword() {\n        return selectedPdfDocumentPassword;\n    }\n\n    /**\n     * @param selectedPdfDocumentPassword the selectedPdfDocumentPassword to set\n     */\n    public void setSelectedPdfDocumentPassword(String selectedPdfDocumentPassword) {\n        this.selectedPdfDocumentPassword = selectedPdfDocumentPassword;\n    }\n\n    /**\n     * @return the clearButton\n     */\n    public JButton getClearButton() {\n        return clearButton;\n    }\n\n    /**\n     * @return the zoomInButton\n     */\n    public JButton getZoomInButton() {\n        return zoomInButton;\n    }\n\n    /**\n     * @return the zoomOutButton\n     */\n    public JButton getZoomOutButton() {\n        return zoomOutButton;\n    }\n\n    /**\n     * @return the undeleteButton\n     */\n    public JButton getUndeleteButton() {\n        return undeleteButton;\n    }\n\n    /**\n     * @return the removeButton\n     */\n    public JButton getRemoveButton() {\n        return removeButton;\n    }\n\n    /**\n     * @return the moveUpButton\n     */\n    public JButton getMoveUpButton() {\n        return moveUpButton;\n    }\n\n    /**\n     * @return the moveDownButton\n     */\n    public JButton getMoveDownButton() {\n        return moveDownButton;\n    }\n\n    /**\n     * @return the rotateButton\n     */\n    public JButton getRotateButton() {\n        return rotateButton;\n    }\n\n    /**\n     * @return the rotateAntiButton\n     */\n    public JButton getRotateAntiButton() {\n        return rotateAntiButton;\n    }\n\n    /**\n     * @return the loadFileButton\n     */\n    public JButton getLoadFileButton() {\n        return loadFileButton;\n    }\n\n    /**\n     * @return the reverseButton\n     */\n    public JButton getReverseButton() {\n        return reverseButton;\n    }\n}\n",
		"id": "EvoSuiteBenchmark/109_pdfsam/src/main/java/org/pdfsam/guiclient/commons/panels/JVisualPdfPageSelectionPanelTest1.java",
		"test_prompt": "// JVisualPdfPageSelectionPanelTest1.java\npackage org.pdfsam.guiclient.commons.panels;\n\nimport java.awt.Component;\nimport java.awt.Dimension;\nimport java.awt.GridBagConstraints;\nimport java.awt.GridBagLayout;\nimport java.awt.Insets;\nimport java.awt.event.ActionEvent;\nimport java.awt.event.ActionListener;\nimport java.awt.event.KeyAdapter;\nimport java.awt.event.KeyEvent;\nimport java.awt.event.MouseAdapter;\nimport java.awt.event.MouseEvent;\nimport java.io.File;\nimport java.util.ArrayList;\nimport java.util.Collection;\nimport java.util.LinkedHashSet;\nimport java.util.List;\nimport java.util.Set;\nimport javax.swing.BorderFactory;\nimport javax.swing.Box;\nimport javax.swing.BoxLayout;\nimport javax.swing.DropMode;\nimport javax.swing.ImageIcon;\nimport javax.swing.JButton;\nimport javax.swing.JLabel;\nimport javax.swing.JList;\nimport javax.swing.JMenuItem;\nimport javax.swing.JPanel;\nimport javax.swing.JPopupMenu;\nimport javax.swing.JScrollPane;\nimport javax.swing.ListSelectionModel;\nimport org.apache.commons.lang.StringUtils;\nimport org.apache.log4j.Logger;\nimport org.pdfsam.console.business.dto.commands.ConcatParsedCommand;\nimport org.pdfsam.guiclient.business.PagePreviewOpener;\nimport org.pdfsam.guiclient.business.PagesWorker;\nimport org.pdfsam.guiclient.business.listeners.EnterDoClickListener;\nimport org.pdfsam.guiclient.commons.business.listeners.VisualPdfSelectionActionListener;\nimport org.pdfsam.guiclient.commons.business.listeners.adapters.PageOpenerMouseAdapter;\nimport org.pdfsam.guiclient.commons.business.listeners.adapters.VisualPdfSelectionKeyAdapter;\nimport org.pdfsam.guiclient.commons.business.listeners.adapters.VisualPdfSelectionMouseAdapter;\nimport org.pdfsam.guiclient.commons.business.listeners.mediators.PagesActionsMediator;\nimport org.pdfsam.guiclient.commons.business.loaders.PdfThumbnailsLoader;\nimport org.pdfsam.guiclient.commons.components.JVisualSelectionList;\nimport org.pdfsam.guiclient.commons.dnd.handlers.VisualListExportTransferHandler;\nimport org.pdfsam.guiclient.commons.dnd.handlers.VisualListTransferHandler;\nimport org.pdfsam.guiclient.commons.models.VisualListModel;\nimport org.pdfsam.guiclient.commons.renderers.VisualListRenderer;\nimport org.pdfsam.guiclient.configuration.Configuration;\nimport org.pdfsam.guiclient.dto.DocumentInfo;\nimport org.pdfsam.guiclient.dto.Rotation;\nimport org.pdfsam.guiclient.dto.VisualPageListItem;\nimport org.pdfsam.guiclient.dto.VisualSelectedItem;\nimport org.pdfsam.i18n.GettextResource;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link JVisualPdfPageSelectionPanel}.\n* It contains ten unit test cases for the {@link JVisualPdfPageSelectionPanel#isDrawDeletedItems()} method.\n*/\nclass JVisualPdfPageSelectionPanelTest1 {"
	},
	{
		"original_code": "// JVisualPdfPageSelectionPanel.java\n/*\n * Created on 18-Jun-2008\n * Copyright (C) 2008 by Andrea Vacondio.\n *\n * This program is free software; you can redistribute it and/or modify it under the terms of the \n * GNU General Public License as published by the Free Software Foundation; \n * either version 2 of the License.\n * This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; \n * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. \n * See the GNU General Public License for more details.\n * You should have received a copy of the GNU General Public License along with this program; \n * if not, write to the Free Software Foundation, Inc., \n *  59 Temple Place, Suite 330, Boston, MA 02111-1307 USA\n */\npackage org.pdfsam.guiclient.commons.panels;\n\nimport java.awt.Component;\nimport java.awt.Dimension;\nimport java.awt.GridBagConstraints;\nimport java.awt.GridBagLayout;\nimport java.awt.Insets;\nimport java.awt.event.ActionEvent;\nimport java.awt.event.ActionListener;\nimport java.awt.event.KeyAdapter;\nimport java.awt.event.KeyEvent;\nimport java.awt.event.MouseAdapter;\nimport java.awt.event.MouseEvent;\nimport java.io.File;\nimport java.util.ArrayList;\nimport java.util.Collection;\nimport java.util.LinkedHashSet;\nimport java.util.List;\nimport java.util.Set;\nimport javax.swing.BorderFactory;\nimport javax.swing.Box;\nimport javax.swing.BoxLayout;\nimport javax.swing.DropMode;\nimport javax.swing.ImageIcon;\nimport javax.swing.JButton;\nimport javax.swing.JLabel;\nimport javax.swing.JList;\nimport javax.swing.JMenuItem;\nimport javax.swing.JPanel;\nimport javax.swing.JPopupMenu;\nimport javax.swing.JScrollPane;\nimport javax.swing.ListSelectionModel;\nimport org.apache.commons.lang.StringUtils;\nimport org.apache.log4j.Logger;\nimport org.pdfsam.console.business.dto.commands.ConcatParsedCommand;\nimport org.pdfsam.guiclient.business.PagePreviewOpener;\nimport org.pdfsam.guiclient.business.PagesWorker;\nimport org.pdfsam.guiclient.business.listeners.EnterDoClickListener;\nimport org.pdfsam.guiclient.commons.business.listeners.VisualPdfSelectionActionListener;\nimport org.pdfsam.guiclient.commons.business.listeners.adapters.PageOpenerMouseAdapter;\nimport org.pdfsam.guiclient.commons.business.listeners.adapters.VisualPdfSelectionKeyAdapter;\nimport org.pdfsam.guiclient.commons.business.listeners.adapters.VisualPdfSelectionMouseAdapter;\nimport org.pdfsam.guiclient.commons.business.listeners.mediators.PagesActionsMediator;\nimport org.pdfsam.guiclient.commons.business.loaders.PdfThumbnailsLoader;\nimport org.pdfsam.guiclient.commons.components.JVisualSelectionList;\nimport org.pdfsam.guiclient.commons.dnd.handlers.VisualListExportTransferHandler;\nimport org.pdfsam.guiclient.commons.dnd.handlers.VisualListTransferHandler;\nimport org.pdfsam.guiclient.commons.models.VisualListModel;\nimport org.pdfsam.guiclient.commons.renderers.VisualListRenderer;\nimport org.pdfsam.guiclient.configuration.Configuration;\nimport org.pdfsam.guiclient.dto.DocumentInfo;\nimport org.pdfsam.guiclient.dto.Rotation;\nimport org.pdfsam.guiclient.dto.VisualPageListItem;\nimport org.pdfsam.guiclient.dto.VisualSelectedItem;\nimport org.pdfsam.i18n.GettextResource;\n\n/**\n * Customizable panel for a visual page selection\n * @author Andrea Vacondio\n */\npublic class JVisualPdfPageSelectionPanel extends JPanel {\n\n    private static final long serialVersionUID = 1384691784810385438L;\n\n    private static final Logger log = Logger.getLogger(JVisualPdfPageSelectionPanel.class.getPackage().getName());\n\n    public static final int HORIZONTAL_ORIENTATION = 1;\n\n    public static final int VERTICAL_ORIENTATION = 2;\n\n    public static final int SINGLE_INTERVAL_SELECTION = ListSelectionModel.SINGLE_INTERVAL_SELECTION;\n\n    public static final int MULTIPLE_INTERVAL_SELECTION = ListSelectionModel.MULTIPLE_INTERVAL_SELECTION;\n\n    public static final int SINGLE_SELECTION = ListSelectionModel.SINGLE_SELECTION;\n\n    public static final int STYLE_TOP_PANEL_HIDE = 0;\n\n    public static final int STYLE_TOP_PANEL_MINIMAL = 1;\n\n    public static final int STYLE_TOP_PANEL_MEDIUM = 2;\n\n    public static final int STYLE_TOP_PANEL_FULL = 3;\n\n    public static final int DND_SUPPORT_NONE = 0;\n\n    public static final int DND_SUPPORT_FILES = 1;\n\n    public static final int DND_SUPPORT_JAVAOBJECTS = 2;\n\n    public static final int DND_SUPPORT_FILES_AND_JAVAOBJECTS = 3;\n\n    public static final String OUTPUT_PATH_PROPERTY = \"defaultOutputPath\";\n\n    private int orientation = HORIZONTAL_ORIENTATION;\n\n    private File selectedPdfDocument = null;\n\n    private String selectedPdfDocumentPassword = \"\";\n\n    private boolean showButtonPanel = true;\n\n    private int topPanelStyle = STYLE_TOP_PANEL_FULL;\n\n    private boolean showContextMenu = true;\n\n    private int dndSupport = DND_SUPPORT_NONE;\n\n    private int selectionType = SINGLE_INTERVAL_SELECTION;\n\n    private final JMenuItem menuItemSetOutputPath = new JMenuItem();\n\n    /**\n     * if true, deleted items appear with a red cross over\n     */\n    private boolean drawDeletedItems = true;\n\n    //if the JList uses wrap\n    private boolean wrap = false;\n\n    private Configuration config;\n\n    private PagesWorker pagesWorker;\n\n    //menu\n    private final JButton loadFileButton = new JButton();\n\n    private final JButton clearButton = new JButton();\n\n    private final JButton zoomInButton = new JButton();\n\n    private final JButton zoomOutButton = new JButton();\n\n    private final JLabel documentProperties = new JLabel();\n\n    private final JVisualSelectionList thumbnailList = new JVisualSelectionList();\n\n    private PdfThumbnailsLoader pdfLoader;\n\n    private VisualPdfSelectionActionListener pdfSelectionActionListener;\n\n    private PagesActionsMediator pageActionListener;\n\n    private final JPopupMenu popupMenu = new JPopupMenu();\n\n    private final JMenuItem menuItemPreview = new JMenuItem();\n\n    private final JPanel topPanel = new JPanel();\n\n    //button panel\n    private JPanel buttonPanel;\n\n    private JButton undeleteButton;\n\n    private JButton removeButton;\n\n    private JButton moveUpButton;\n\n    private JButton moveDownButton;\n\n    private JButton rotateButton;\n\n    private JButton rotateAntiButton;\n\n    private JButton reverseButton;\n\n    /**\n     * default constructor\n     */\n    public JVisualPdfPageSelectionPanel() {\n        this(HORIZONTAL_ORIENTATION);\n    }\n\n    /**\n     * draw deleted items default value (true)\n     * show button panel default value (true)\n     * @param orientation panel orientation\n     */\n    public JVisualPdfPageSelectionPanel(int orientation) {\n        this(orientation, true, true);\n    }\n\n    /**\n     * @param orientation panel orientation\n     * @param drawDeletedItems if true deleted items appear with a red cross over\n     * @param showButtonPanel true=shows button panel\n     */\n    public JVisualPdfPageSelectionPanel(int orientation, boolean drawDeletedItems, boolean showButtonPanel) {\n        this(orientation, drawDeletedItems, showButtonPanel, true, STYLE_TOP_PANEL_FULL);\n    }\n\n    /**\n     * @param orientation panel orientation\n     * @param drawDeletedItems if true deleted items appear with a red cross over\n     * @param showButtonPanel true=shows button panel\n     * @param showContextMenu\n     * @param topPanelStyle\n     */\n    public JVisualPdfPageSelectionPanel(int orientation, boolean drawDeletedItems, boolean showButtonPanel, boolean showContextMenu, int topPanelStyle) {\n        this(orientation, drawDeletedItems, showButtonPanel, showContextMenu, topPanelStyle, DND_SUPPORT_FILES_AND_JAVAOBJECTS, SINGLE_INTERVAL_SELECTION);\n    }\n\n    /**\n     * @param orientation panel orientation\n     * @param drawDeletedItems if true deleted items appear with a red cross over\n     * @param showButtonPanel true=shows button panel\n     * @param showContextMenu\n     * @param topPanelStyle top panel style\n     * @param selectionType selection type\n     */\n    public JVisualPdfPageSelectionPanel(int orientation, boolean drawDeletedItems, boolean showButtonPanel, boolean showContextMenu, int topPanelStyle, int dndSupport, int selectionType) {\n        this.orientation = orientation;\n        this.config = Configuration.getInstance();\n        this.pdfLoader = new PdfThumbnailsLoader(this);\n        this.drawDeletedItems = drawDeletedItems;\n        this.showButtonPanel = showButtonPanel;\n        this.showContextMenu = showContextMenu;\n        this.topPanelStyle = topPanelStyle;\n        this.dndSupport = dndSupport;\n        this.selectionType = selectionType;\n        init();\n    }\n\n    /**\n     * panel initialization\n     */\n    private void init() {\n        setLayout(new GridBagLayout());\n        thumbnailList.setDrawDeletedItems(drawDeletedItems);\n        if (dndSupport == DND_SUPPORT_FILES) {\n            thumbnailList.setTransferHandler(new VisualListExportTransferHandler(pdfLoader));\n        } else if (dndSupport == DND_SUPPORT_JAVAOBJECTS) {\n            thumbnailList.setTransferHandler(new VisualListTransferHandler());\n        } else if (dndSupport == DND_SUPPORT_FILES_AND_JAVAOBJECTS) {\n            thumbnailList.setTransferHandler(new VisualListTransferHandler(pdfLoader));\n        } else {\n            thumbnailList.setTransferHandler(new VisualListExportTransferHandler(null));\n        }\n        thumbnailList.setDragEnabled(true);\n        thumbnailList.setDropMode(DropMode.INSERT);\n        pagesWorker = new PagesWorker(thumbnailList);\n        thumbnailList.addKeyListener(new VisualPdfSelectionKeyAdapter(pagesWorker));\n        thumbnailList.addMouseListener(new PageOpenerMouseAdapter(thumbnailList));\n        if (showButtonPanel) {\n            initButtonPanel(pagesWorker);\n            initKeyListener();\n        }\n        //JList orientation\n        if (HORIZONTAL_ORIENTATION == orientation) {\n            thumbnailList.setLayoutOrientation(JList.HORIZONTAL_WRAP);\n        } else {\n            if (wrap) {\n                thumbnailList.setLayoutOrientation(JList.VERTICAL_WRAP);\n            }\n        }\n        topPanel.setLayout(new BoxLayout(topPanel, BoxLayout.LINE_AXIS));\n        topPanel.setPreferredSize(new Dimension(400, 30));\n        pdfSelectionActionListener = new VisualPdfSelectionActionListener(this, pdfLoader);\n        if (topPanelStyle >= STYLE_TOP_PANEL_FULL) {\n            //load button\n            loadFileButton.setMargin(new Insets(1, 1, 1, 1));\n            loadFileButton.setText(GettextResource.gettext(config.getI18nResourceBundle(), \"Open\"));\n            loadFileButton.setPreferredSize(new Dimension(100, 30));\n            loadFileButton.setToolTipText(GettextResource.gettext(config.getI18nResourceBundle(), \"Load a pdf document\"));\n            loadFileButton.setIcon(new ImageIcon(this.getClass().getResource(\"/images/add.png\")));\n            loadFileButton.addKeyListener(new EnterDoClickListener(loadFileButton));\n            loadFileButton.setAlignmentX(Component.CENTER_ALIGNMENT);\n            loadFileButton.setAlignmentY(Component.CENTER_ALIGNMENT);\n            loadFileButton.setActionCommand(VisualPdfSelectionActionListener.ADD);\n            loadFileButton.addActionListener(pdfSelectionActionListener);\n        }\n        documentProperties.setIcon(new ImageIcon(this.getClass().getResource(\"/images/info.png\")));\n        documentProperties.setVisible(false);\n        if (topPanelStyle >= STYLE_TOP_PANEL_MEDIUM) {\n            clearButton.setMargin(new Insets(1, 1, 1, 1));\n            clearButton.setMinimumSize(new Dimension(30, 30));\n            clearButton.setText(GettextResource.gettext(config.getI18nResourceBundle(), \"Clear\"));\n            clearButton.setIcon(new ImageIcon(this.getClass().getResource(\"/images/clear.png\")));\n            clearButton.addActionListener(new ActionListener() {\n\n                public void actionPerformed(ActionEvent e) {\n                    resetPanel();\n                }\n            });\n        }\n        zoomInButton.setMargin(new Insets(1, 1, 1, 1));\n        zoomInButton.setMinimumSize(new Dimension(30, 30));\n        zoomInButton.setText(GettextResource.gettext(config.getI18nResourceBundle(), \"Zoom in\"));\n        zoomInButton.setIcon(new ImageIcon(this.getClass().getResource(\"/images/zoomin.png\")));\n        zoomInButton.addActionListener(new ActionListener() {\n\n            public void actionPerformed(ActionEvent e) {\n                try {\n                    thumbnailList.incZoomLevel();\n                    zoomOutButton.setEnabled(true);\n                    if (thumbnailList.getCurrentZoomLevel() >= JVisualSelectionList.MAX_ZOOM_LEVEL) {\n                        zoomInButton.setEnabled(false);\n                    }\n                    ((VisualListModel) thumbnailList.getModel()).elementsChanged();\n                } catch (Exception ex) {\n                    log.error(GettextResource.gettext(config.getI18nResourceBundle(), \"Error setting zoom level.\"), ex);\n                }\n            }\n        });\n        zoomOutButton.setMargin(new Insets(1, 1, 1, 1));\n        zoomOutButton.setMinimumSize(new Dimension(30, 30));\n        zoomOutButton.setText(GettextResource.gettext(config.getI18nResourceBundle(), \"Zoom out\"));\n        zoomOutButton.setIcon(new ImageIcon(this.getClass().getResource(\"/images/zoomout.png\")));\n        zoomOutButton.addActionListener(new ActionListener() {\n\n            public void actionPerformed(ActionEvent e) {\n                try {\n                    thumbnailList.deincZoomLevel();\n                    zoomInButton.setEnabled(true);\n                    if (thumbnailList.getCurrentZoomLevel() <= JVisualSelectionList.MIN_ZOOM_LEVEL) {\n                        zoomOutButton.setEnabled(false);\n                    }\n                    ((VisualListModel) thumbnailList.getModel()).elementsChanged();\n                } catch (Exception ex) {\n                    log.error(GettextResource.gettext(config.getI18nResourceBundle(), \"Error setting zoom level.\"), ex);\n                }\n            }\n        });\n        thumbnailList.setModel(new VisualListModel());\n        thumbnailList.setCellRenderer(new VisualListRenderer());\n        thumbnailList.setVisibleRowCount(-1);\n        thumbnailList.setSelectionMode(selectionType);\n        JScrollPane listScroller = new JScrollPane(thumbnailList);\n        //preview item\n        menuItemPreview.setIcon(new ImageIcon(this.getClass().getResource(\"/images/preview-viewer.png\")));\n        menuItemPreview.setText(GettextResource.gettext(config.getI18nResourceBundle(), \"Preview\"));\n        menuItemPreview.addMouseListener(new MouseAdapter() {\n\n            public void mouseReleased(MouseEvent e) {\n                int[] selection = thumbnailList.getSelectedIndices();\n                if (selection != null && selection.length == 1) {\n                    VisualPageListItem item = (VisualPageListItem) thumbnailList.getModel().getElementAt(selection[0]);\n                    PagePreviewOpener.getInstance().openPreview(item.getParentFileCanonicalPath(), item.getDocumentPassword(), item.getPageNumber());\n                }\n            }\n        });\n        if (showContextMenu) {\n            //popup\n            final JMenuItem menuItemMoveUp = new JMenuItem();\n            menuItemMoveUp.setIcon(new ImageIcon(this.getClass().getResource(\"/images/up.png\")));\n            menuItemMoveUp.setText(GettextResource.gettext(config.getI18nResourceBundle(), \"Move Up\"));\n            menuItemMoveUp.addMouseListener(new VisualPdfSelectionMouseAdapter(PagesWorker.MOVE_UP, pagesWorker));\n            popupMenu.add(menuItemMoveUp);\n            final JMenuItem menuItemMoveDown = new JMenuItem();\n            menuItemMoveDown.setIcon(new ImageIcon(this.getClass().getResource(\"/images/down.png\")));\n            menuItemMoveDown.setText(GettextResource.gettext(config.getI18nResourceBundle(), \"Move Down\"));\n            menuItemMoveDown.addMouseListener(new VisualPdfSelectionMouseAdapter(PagesWorker.MOVE_DOWN, pagesWorker));\n            popupMenu.add(menuItemMoveDown);\n            final JMenuItem menuItemRemove = new JMenuItem();\n            menuItemRemove.setIcon(new ImageIcon(this.getClass().getResource(\"/images/remove.png\")));\n            menuItemRemove.setText(GettextResource.gettext(config.getI18nResourceBundle(), \"Delete\"));\n            menuItemRemove.addMouseListener(new VisualPdfSelectionMouseAdapter(PagesWorker.REMOVE, pagesWorker));\n            popupMenu.add(menuItemRemove);\n            //if elements are physically deleted i don't need this item\n            if (drawDeletedItems) {\n                final JMenuItem menuItemUndelete = new JMenuItem();\n                menuItemUndelete.setIcon(new ImageIcon(this.getClass().getResource(\"/images/remove.png\")));\n                menuItemUndelete.setText(GettextResource.gettext(config.getI18nResourceBundle(), \"Undelete\"));\n                menuItemUndelete.addMouseListener(new VisualPdfSelectionMouseAdapter(PagesWorker.UNDELETE, pagesWorker));\n                popupMenu.add(menuItemUndelete);\n            }\n            //rotate item\n            final JMenuItem menuItemRotate = new JMenuItem();\n            menuItemRotate.setIcon(new ImageIcon(this.getClass().getResource(\"/images/clockwise.png\")));\n            menuItemRotate.setText(GettextResource.gettext(config.getI18nResourceBundle(), \"Rotate clockwise\"));\n            menuItemRotate.addMouseListener(new VisualPdfSelectionMouseAdapter(PagesWorker.ROTATE_CLOCK, pagesWorker));\n            popupMenu.add(menuItemRotate);\n            //rotate anticlock item\n            final JMenuItem menuItemAntiRotate = new JMenuItem();\n            menuItemAntiRotate.setIcon(new ImageIcon(this.getClass().getResource(\"/images/anticlockwise.png\")));\n            menuItemAntiRotate.setText(GettextResource.gettext(config.getI18nResourceBundle(), \"Rotate anticlockwise\"));\n            menuItemAntiRotate.addMouseListener(new VisualPdfSelectionMouseAdapter(PagesWorker.ROTATE_ANTICLOCK, pagesWorker));\n            popupMenu.add(menuItemAntiRotate);\n            //reverse item\n            final JMenuItem menuItemReverse = new JMenuItem();\n            menuItemReverse.setIcon(new ImageIcon(this.getClass().getResource(\"/images/reverse.png\")));\n            menuItemReverse.setText(GettextResource.gettext(config.getI18nResourceBundle(), \"Reverse\"));\n            menuItemReverse.addMouseListener(new VisualPdfSelectionMouseAdapter(PagesWorker.REVERSE, pagesWorker));\n            popupMenu.add(menuItemReverse);\n            enableSetOutputPathMenuItem();\n            addPopupShower();\n        }\n        popupMenu.add(menuItemPreview);\n        if (topPanelStyle >= STYLE_TOP_PANEL_FULL) {\n            topPanel.add(Box.createRigidArea(new Dimension(5, 0)));\n            topPanel.add(loadFileButton);\n        }\n        if (topPanelStyle >= STYLE_TOP_PANEL_MEDIUM) {\n            topPanel.add(Box.createRigidArea(new Dimension(5, 0)));\n            topPanel.add(clearButton);\n        }\n        topPanel.add(Box.createRigidArea(new Dimension(5, 0)));\n        topPanel.add(documentProperties);\n        topPanel.add(Box.createHorizontalGlue());\n        topPanel.add(zoomInButton);\n        topPanel.add(Box.createRigidArea(new Dimension(5, 0)));\n        topPanel.add(zoomOutButton);\n        GridBagConstraints topConstraints = new GridBagConstraints();\n        topConstraints.fill = GridBagConstraints.BOTH;\n        topConstraints.gridx = 0;\n        topConstraints.gridy = 0;\n        topConstraints.gridwidth = 3;\n        topConstraints.gridheight = 1;\n        topConstraints.insets = new Insets(5, 5, 5, 5);\n        topConstraints.weightx = 1.0;\n        topConstraints.weighty = 0.0;\n        if (topPanelStyle > STYLE_TOP_PANEL_HIDE) {\n            add(topPanel, topConstraints);\n        }\n        GridBagConstraints thumbConstraints = new GridBagConstraints();\n        thumbConstraints.fill = GridBagConstraints.BOTH;\n        thumbConstraints.gridx = 0;\n        thumbConstraints.gridy = 1;\n        thumbConstraints.gridwidth = (showButtonPanel ? 2 : 3);\n        thumbConstraints.gridheight = 2;\n        thumbConstraints.insets = new Insets(5, 5, 5, 5);\n        thumbConstraints.weightx = 1.0;\n        thumbConstraints.weighty = 1.0;\n        add(listScroller, thumbConstraints);\n        if (showButtonPanel) {\n            GridBagConstraints buttonsConstraints = new GridBagConstraints();\n            buttonsConstraints.fill = GridBagConstraints.BOTH;\n            buttonsConstraints.gridx = 2;\n            buttonsConstraints.gridy = 1;\n            buttonsConstraints.gridwidth = 1;\n            buttonsConstraints.gridheight = 2;\n            buttonsConstraints.insets = new Insets(5, 5, 5, 5);\n            buttonsConstraints.weightx = 0.0;\n            buttonsConstraints.weighty = 1.0;\n            add(buttonPanel, buttonsConstraints);\n        }\n    }\n\n    /**\n     * adds a button to the button panel\n     * @param button\n     */\n    private void addButtonToButtonPanel(JButton button) {\n        button.setMinimumSize(new Dimension(90, 25));\n        button.setMaximumSize(new Dimension(160, 25));\n        buttonPanel.add(button);\n        buttonPanel.add(Box.createRigidArea(new Dimension(0, 5)));\n    }\n\n    private void initButtonPanel(PagesWorker pagesWorker) {\n        buttonPanel = new JPanel();\n        buttonPanel.setLayout(new BoxLayout(buttonPanel, BoxLayout.Y_AXIS));\n        buttonPanel.setBorder(BorderFactory.createEmptyBorder(0, 10, 10, 10));\n        pageActionListener = new PagesActionsMediator(pagesWorker);\n        //move up button\n        moveUpButton = new JButton();\n        moveUpButton.setMargin(new Insets(2, 2, 2, 2));\n        moveUpButton.addActionListener(pageActionListener);\n        moveUpButton.setIcon(new ImageIcon(this.getClass().getResource(\"/images/up.png\")));\n        moveUpButton.setActionCommand(PagesWorker.MOVE_UP);\n        moveUpButton.setText(GettextResource.gettext(config.getI18nResourceBundle(), \"Move Up\"));\n        moveUpButton.setToolTipText(GettextResource.gettext(config.getI18nResourceBundle(), \"Move up selected pages\") + \" \" + GettextResource.gettext(config.getI18nResourceBundle(), \"(Alt+ArrowUp)\"));\n        moveUpButton.addKeyListener(new EnterDoClickListener(moveUpButton));\n        moveUpButton.setAlignmentX(Component.CENTER_ALIGNMENT);\n        addButtonToButtonPanel(moveUpButton);\n        //move down button\n        moveDownButton = new JButton();\n        moveDownButton.addActionListener(pageActionListener);\n        moveDownButton.setIcon(new ImageIcon(this.getClass().getResource(\"/images/down.png\")));\n        moveDownButton.setActionCommand(PagesWorker.MOVE_DOWN);\n        moveDownButton.setMargin(new Insets(2, 2, 2, 2));\n        moveDownButton.setText(GettextResource.gettext(config.getI18nResourceBundle(), \"Move Down\"));\n        moveDownButton.setToolTipText(GettextResource.gettext(config.getI18nResourceBundle(), \"Move down selected pages\") + \" \" + GettextResource.gettext(config.getI18nResourceBundle(), \"(Alt+ArrowDown)\"));\n        moveDownButton.addKeyListener(new EnterDoClickListener(moveDownButton));\n        moveDownButton.setAlignmentX(Component.CENTER_ALIGNMENT);\n        addButtonToButtonPanel(moveDownButton);\n        //delete button\n        removeButton = new JButton();\n        removeButton.addActionListener(pageActionListener);\n        removeButton.setIcon(new ImageIcon(this.getClass().getResource(\"/images/remove.png\")));\n        removeButton.setActionCommand(PagesWorker.REMOVE);\n        removeButton.setMargin(new Insets(2, 2, 2, 2));\n        removeButton.setText(GettextResource.gettext(config.getI18nResourceBundle(), \"Delete\"));\n        removeButton.setToolTipText(GettextResource.gettext(config.getI18nResourceBundle(), \"Delete selected pages\") + \" \" + GettextResource.gettext(config.getI18nResourceBundle(), \"(Canc)\"));\n        removeButton.addKeyListener(new EnterDoClickListener(removeButton));\n        removeButton.setAlignmentX(Component.CENTER_ALIGNMENT);\n        addButtonToButtonPanel(removeButton);\n        //undelete button\n        if (drawDeletedItems) {\n            undeleteButton = new JButton();\n            undeleteButton.addActionListener(pageActionListener);\n            undeleteButton.setIcon(new ImageIcon(this.getClass().getResource(\"/images/remove.png\")));\n            undeleteButton.setActionCommand(PagesWorker.UNDELETE);\n            undeleteButton.setMargin(new Insets(2, 2, 2, 2));\n            undeleteButton.setText(GettextResource.gettext(config.getI18nResourceBundle(), \"Undelete\"));\n            undeleteButton.setToolTipText(GettextResource.gettext(config.getI18nResourceBundle(), \"Undelete selected pages\") + \" \" + GettextResource.gettext(config.getI18nResourceBundle(), \"(Ctrl+Z)\"));\n            undeleteButton.addKeyListener(new EnterDoClickListener(undeleteButton));\n            undeleteButton.setAlignmentX(Component.CENTER_ALIGNMENT);\n            addButtonToButtonPanel(undeleteButton);\n        }\n        //rotate button\n        rotateButton = new JButton();\n        rotateButton.addActionListener(pageActionListener);\n        rotateButton.setIcon(new ImageIcon(this.getClass().getResource(\"/images/clockwise.png\")));\n        rotateButton.setActionCommand(PagesWorker.ROTATE_CLOCK);\n        rotateButton.setMargin(new Insets(2, 2, 2, 2));\n        rotateButton.setText(GettextResource.gettext(config.getI18nResourceBundle(), \"Rotate right\"));\n        rotateButton.setToolTipText(GettextResource.gettext(config.getI18nResourceBundle(), \"Rotate clockwise selected pages\") + \" \" + GettextResource.gettext(config.getI18nResourceBundle(), \"(Alt+ArrowRight)\"));\n        rotateButton.addKeyListener(new EnterDoClickListener(rotateButton));\n        rotateButton.setAlignmentX(Component.CENTER_ALIGNMENT);\n        addButtonToButtonPanel(rotateButton);\n        //rotate button\n        rotateAntiButton = new JButton();\n        rotateAntiButton.addActionListener(pageActionListener);\n        rotateAntiButton.setIcon(new ImageIcon(this.getClass().getResource(\"/images/anticlockwise.png\")));\n        rotateAntiButton.setActionCommand(PagesWorker.ROTATE_ANTICLOCK);\n        rotateAntiButton.setMargin(new Insets(2, 2, 2, 2));\n        rotateAntiButton.setText(GettextResource.gettext(config.getI18nResourceBundle(), \"Rotate left\"));\n        rotateAntiButton.setToolTipText(GettextResource.gettext(config.getI18nResourceBundle(), \"Rotate anticlockwise selected pages\") + \" \" + GettextResource.gettext(config.getI18nResourceBundle(), \"(Alt+ArrowLeft)\"));\n        rotateAntiButton.addKeyListener(new EnterDoClickListener(rotateAntiButton));\n        rotateAntiButton.setAlignmentX(Component.CENTER_ALIGNMENT);\n        addButtonToButtonPanel(rotateAntiButton);\n        //reverse button\n        reverseButton = new JButton();\n        reverseButton.addActionListener(pageActionListener);\n        reverseButton.setIcon(new ImageIcon(this.getClass().getResource(\"/images/reverse.png\")));\n        reverseButton.setActionCommand(PagesWorker.REVERSE);\n        reverseButton.setMargin(new Insets(2, 2, 2, 2));\n        reverseButton.setText(GettextResource.gettext(config.getI18nResourceBundle(), \"Reverse\"));\n        reverseButton.setToolTipText(GettextResource.gettext(config.getI18nResourceBundle(), \"Reverse pages order\"));\n        reverseButton.addKeyListener(new EnterDoClickListener(reverseButton));\n        reverseButton.setAlignmentX(Component.CENTER_ALIGNMENT);\n        addButtonToButtonPanel(reverseButton);\n    }\n\n    private void initKeyListener() {\n        //key listener\n        thumbnailList.addKeyListener(new KeyAdapter() {\n\n            public void keyPressed(KeyEvent e) {\n                if ((e.isAltDown()) && (e.getKeyCode() == KeyEvent.VK_UP)) {\n                    moveUpButton.doClick();\n                } else if ((e.isAltDown()) && (e.getKeyCode() == KeyEvent.VK_DOWN)) {\n                    moveDownButton.doClick();\n                } else if ((e.getKeyCode() == KeyEvent.VK_DELETE)) {\n                    removeButton.doClick();\n                } else if (drawDeletedItems && (e.isControlDown()) && (e.getKeyCode() == KeyEvent.VK_Z)) {\n                    undeleteButton.doClick();\n                } else if ((e.isAltDown()) && (e.getKeyCode() == KeyEvent.VK_RIGHT)) {\n                    rotateButton.doClick();\n                } else if ((e.isAltDown()) && (e.getKeyCode() == KeyEvent.VK_LEFT)) {\n                    rotateAntiButton.doClick();\n                }\n            }\n        });\n    }\n\n    /**\n     * reset the panel\n     */\n    public void resetPanel() {\n        thumbnailList.setCurrentZoomLevel(JVisualSelectionList.DEFAULT_ZOOM_LEVEL);\n        zoomInButton.setEnabled(true);\n        zoomOutButton.setEnabled(true);\n        ((VisualListModel) thumbnailList.getModel()).clearData();\n        selectedPdfDocument = null;\n        selectedPdfDocumentPassword = \"\";\n        setDocumentPropertiesVisible(false);\n        getPdfLoader().cleanCreator();\n    }\n\n    /**\n     * Set the visible the label that shows document properties\n     * @param visible\n     */\n    public void setDocumentPropertiesVisible(boolean visible) {\n        documentProperties.setVisible(visible);\n    }\n\n    /**\n     * Set the document properties to be shown as a tooltip of the documentProperties JLabel\n     * @param documetnInfo bean containing document informations\n     */\n    public void setDocumentProperties(DocumentInfo documetnInfo) {\n        if (documetnInfo != null) {\n            String encrypted = documetnInfo.isEncrypted() ? GettextResource.gettext(config.getI18nResourceBundle(), \"Yes\") : GettextResource.gettext(config.getI18nResourceBundle(), \"No\");\n            documentProperties.setToolTipText(\"<html><body><b><p>\" + GettextResource.gettext(config.getI18nResourceBundle(), \"File: \") + \"</b>\" + documetnInfo.getFileName() + \"</p>\" + \"<p><b>\" + GettextResource.gettext(config.getI18nResourceBundle(), \"Pages: \") + \"</b>\" + documetnInfo.getPages() + \"</p>\" + \"<p><b>\" + GettextResource.gettext(config.getI18nResourceBundle(), \"Pdf version: \") + \"</b>\" + (documetnInfo.getPdfVersion() != null ? documetnInfo.getPdfVersion() : \"\") + \"</p>\" + \"<p><b>\" + GettextResource.gettext(config.getI18nResourceBundle(), \"Title: \") + \"</b>\" + StringUtils.trimToEmpty(documetnInfo.getDocumentMetaData().getTitle()) + \"</p>\" + \"<p><b>\" + GettextResource.gettext(config.getI18nResourceBundle(), \"Author: \") + \"</b>\" + StringUtils.trimToEmpty(documetnInfo.getDocumentMetaData().getAuthor()) + \"</p>\" + \"<p><b>\" + GettextResource.gettext(config.getI18nResourceBundle(), \"Creator: \") + \"</b>\" + StringUtils.trimToEmpty(documetnInfo.getDocumentMetaData().getCreator()) + \"</p>\" + \"<p><b>\" + GettextResource.gettext(config.getI18nResourceBundle(), \"Producer: \") + \"</b>\" + StringUtils.trimToEmpty(documetnInfo.getDocumentMetaData().getProducer()) + \"</p>\" + \"<p><b>\" + GettextResource.gettext(config.getI18nResourceBundle(), \"Encrypted: \") + \"</b>\" + encrypted + \"</p>\" + \"</body></html>\");\n        }\n    }\n\n    /**\n     * @return the orientation\n     */\n    public int getOrientation() {\n        return orientation;\n    }\n\n    /**\n     * @return the selectedPdfDocument\n     */\n    public File getSelectedPdfDocument() {\n        return selectedPdfDocument;\n    }\n\n    /**\n     * @return the wrap\n     */\n    public boolean isWrap() {\n        return wrap;\n    }\n\n    /**\n     * @return the thumbnailList\n     */\n    public JVisualSelectionList getThumbnailList() {\n        return thumbnailList;\n    }\n\n    /**\n     * @param selectedPdfDocument the selectedPdfDocument to set\n     */\n    public void setSelectedPdfDocument(File selectedPdfDocument) {\n        this.selectedPdfDocument = selectedPdfDocument;\n    }\n\n    /**\n     * @return the dndSupport\n     */\n    public int getDndSupport() {\n        return dndSupport;\n    }\n\n    /**\n     * @return the drawDeletedItems\n     */\n    public boolean isDrawDeletedItems() {\n        return drawDeletedItems;\n    }\n\n    /**\n     * @param drawDeletedItems the drawDeletedItems to set\n     */\n    public void setDrawDeletedItems(boolean drawDeletedItems) {\n        this.drawDeletedItems = drawDeletedItems;\n    }\n\n    /**\n     * @return the pdfLoader\n     */\n    public PdfThumbnailsLoader getPdfLoader() {\n        return pdfLoader;\n    }\n\n    /**\n     * @return the topPanel\n     */\n    public JPanel getTopPanel() {\n        return topPanel;\n    }\n\n    /**\n     * @param pages input selection set\n     * @return a String version of the input Set, ready to be used as -u parameter for the console\n     */\n    private String getSelectionString(Set<Integer> pages) {\n        StringBuilder buffer = new StringBuilder();\n        for (Integer page : pages) {\n            buffer.append(page.toString()).append(\",\");\n        }\n        return StringUtils.chomp(buffer.toString(), \",\");\n    }\n\n    /**\n     * @return an ordered List of {@link VisualSelectedItem} corresponding to the panel elements.\n     */\n    private List<VisualSelectedItem> getSelectedItemsList() {\n        List<VisualSelectedItem> retVal = new ArrayList<VisualSelectedItem>();\n        List<VisualPageListItem> validElements = ((VisualListModel) thumbnailList.getModel()).getValidElements();\n        VisualSelectedItem tmpElement = null;\n        Set<Integer> pages = new LinkedHashSet<Integer>();\n        for (VisualPageListItem currentElement : validElements) {\n            //first element\n            if (tmpElement == null) {\n                tmpElement = new VisualSelectedItem(currentElement.getParentFileCanonicalPath(), currentElement.getDocumentPassword());\n                pages.add(currentElement.getPageNumber());\n            } else {\n                //filename changed\n                if (!tmpElement.getSelectedFile().equals(currentElement.getParentFileCanonicalPath())) {\n                    tmpElement.setPagesSelection(getSelectionString(pages));\n                    retVal.add(tmpElement);\n                    tmpElement = new VisualSelectedItem(currentElement.getParentFileCanonicalPath(), currentElement.getDocumentPassword());\n                    pages.clear();\n                    pages.add(currentElement.getPageNumber());\n                } else {\n                    //page already there\n                    if (!pages.add(currentElement.getPageNumber())) {\n                        tmpElement.setPagesSelection(getSelectionString(pages));\n                        retVal.add(tmpElement);\n                        tmpElement = new VisualSelectedItem(currentElement.getParentFileCanonicalPath(), currentElement.getDocumentPassword());\n                        pages.clear();\n                        pages.add(currentElement.getPageNumber());\n                    }\n                }\n            }\n        }\n        tmpElement.setPagesSelection(getSelectionString(pages));\n        retVal.add(tmpElement);\n        return retVal;\n    }\n\n    /**\n     * A of String List that can be used as input for the console. It contains the -f and -u parameters for this panel\n     * @return\n     */\n    public List<String> getValidConsoleParameters() {\n        List<String> retVal = new ArrayList<String>();\n        StringBuilder builder = new StringBuilder();\n        for (VisualSelectedItem item : getSelectedItemsList()) {\n            builder.append(item.getPagesSelection()).append(\":\");\n            retVal.add(\"-\" + ConcatParsedCommand.F_ARG);\n            if (StringUtils.isEmpty(item.getPassword())) {\n                retVal.add(item.getSelectedFile());\n            } else {\n                retVal.add(item.getSelectedFile() + \":\" + item.getPassword());\n            }\n        }\n        retVal.add(\"-\" + ConcatParsedCommand.U_ARG);\n        retVal.add(builder.toString());\n        return retVal;\n    }\n\n    /**\n     * @return true if the panel has valid elements\n     */\n    public boolean hasValidElements() {\n        List<VisualPageListItem> elements = ((VisualListModel) thumbnailList.getModel()).getValidElements();\n        return (elements != null && !elements.isEmpty());\n    }\n\n    /**\n     * @return a String that can be used as a -r param for the pdfsam-console\n     */\n    public String getRotatedElementsString() {\n        StringBuilder retVal = new StringBuilder();\n        Collection<VisualPageListItem> validElements = ((VisualListModel) thumbnailList.getModel()).getValidElements();\n        if (validElements != null && !validElements.isEmpty()) {\n            int i = 0;\n            for (VisualPageListItem currentElement : validElements) {\n                i++;\n                if (!Rotation.DEGREES_0.equals(currentElement.getRotation())) {\n                    retVal.append(i).append(\":\").append(currentElement.getRotation().getDegrees()).append(\",\");\n                }\n            }\n        }\n        return retVal.toString();\n    }\n\n    /**\n     * Add a component on the left of the top panel\n     * @param c\n     */\n    public void addToTopPanel(Component c) {\n        topPanel.removeAll();\n        /*TODO fix this*/\n        if (c != null) {\n            topPanel.add(Box.createRigidArea(new Dimension(5, 0)));\n            topPanel.add(c);\n        }\n        if (topPanelStyle >= STYLE_TOP_PANEL_FULL) {\n            topPanel.add(Box.createRigidArea(new Dimension(5, 0)));\n            topPanel.add(loadFileButton);\n        }\n        if (topPanelStyle >= STYLE_TOP_PANEL_MEDIUM) {\n            topPanel.add(Box.createRigidArea(new Dimension(5, 0)));\n            topPanel.add(clearButton);\n        }\n        topPanel.add(Box.createRigidArea(new Dimension(5, 0)));\n        topPanel.add(documentProperties);\n        topPanel.add(Box.createHorizontalGlue());\n        topPanel.add(zoomInButton);\n        topPanel.add(Box.createRigidArea(new Dimension(5, 0)));\n        topPanel.add(zoomOutButton);\n    }\n\n    /**\n     * @return Returns an array of all the selected values, in increasing order based on their indices in the list or an empty array if nothing is selected\n     */\n    public VisualPageListItem[] getSelectedElements() {\n        Object[] elems = thumbnailList.getSelectedValues();\n        VisualPageListItem[] visElems = new VisualPageListItem[elems.length];\n        System.arraycopy(elems, 0, visElems, 0, elems.length);\n        return visElems;\n    }\n\n    /**\n     * @param c\n     * @see VisualListModel#appendAllElements(Collection)\n     */\n    public void appendElements(Collection<VisualPageListItem> c) {\n        ((VisualListModel) thumbnailList.getModel()).appendAllElements(c);\n    }\n\n    /**\n     * @param c\n     * @see VisualListModel#prependAllElements(Collection)\n     */\n    public void prependElements(Collection<VisualPageListItem> c) {\n        ((VisualListModel) thumbnailList.getModel()).prependAllElements(c);\n    }\n\n    /**\n     * Adds a item to the popup menu\n     * @param item\n     */\n    public void addMenuItem(JMenuItem item) {\n        popupMenu.add(item);\n    }\n\n    /**\n     * enables the set output path menu item\n     */\n    public void enableSetOutputPathMenuItem() {\n        menuItemSetOutputPath.setIcon(new ImageIcon(this.getClass().getResource(\"/images/set_outfile.png\")));\n        menuItemSetOutputPath.setText(GettextResource.gettext(config.getI18nResourceBundle(), \"Set output file\"));\n        menuItemSetOutputPath.addMouseListener(new MouseAdapter() {\n\n            public void mouseReleased(MouseEvent e) {\n                if (selectedPdfDocument != null) {\n                    try {\n                        String defaultOutputPath = selectedPdfDocument.getParent();\n                        firePropertyChange(OUTPUT_PATH_PROPERTY, \"\", defaultOutputPath);\n                    } catch (Exception ex) {\n                        log.error(GettextResource.gettext(config.getI18nResourceBundle(), \"Error: Unable to get the file path.\"), ex);\n                    }\n                }\n            }\n        });\n        popupMenu.add(menuItemSetOutputPath);\n        if (!showContextMenu) {\n            //show popup\n            addPopupShower();\n        }\n    }\n\n    /**\n     * adds the listener that showes the popup\n     */\n    private void addPopupShower() {\n        //show popup\n        thumbnailList.addMouseListener(new MouseAdapter() {\n\n            public void mousePressed(MouseEvent e) {\n                if (e.isPopupTrigger()) {\n                    showMenu(e);\n                }\n            }\n\n            public void mouseReleased(MouseEvent e) {\n                if (e.isPopupTrigger()) {\n                    showMenu(e);\n                }\n            }\n\n            private void showMenu(MouseEvent e) {\n                int[] selection = thumbnailList.getSelectedIndices();\n                if (!(selection != null && selection.length > 1)) {\n                    thumbnailList.setSelectedIndex(thumbnailList.locationToIndex(e.getPoint()));\n                    selection = thumbnailList.getSelectedIndices();\n                }\n                menuItemPreview.setEnabled(selection != null && selection.length == 1);\n                popupMenu.show(thumbnailList, e.getX(), e.getY());\n            }\n        });\n    }\n\n    /**\n     * remove the set ouput path menu item\n     */\n    public void disableSetOutputPathMenuItem() {\n        popupMenu.remove(menuItemSetOutputPath);\n    }\n\n    /**\n     * @return the selectedPdfDocumentPassword\n     */\n    public String getSelectedPdfDocumentPassword() {\n        return selectedPdfDocumentPassword;\n    }\n\n    /**\n     * @param selectedPdfDocumentPassword the selectedPdfDocumentPassword to set\n     */\n    public void setSelectedPdfDocumentPassword(String selectedPdfDocumentPassword) {\n        this.selectedPdfDocumentPassword = selectedPdfDocumentPassword;\n    }\n\n    /**\n     * @return the clearButton\n     */\n    public JButton getClearButton() {\n        return clearButton;\n    }\n\n    /**\n     * @return the zoomInButton\n     */\n    public JButton getZoomInButton() {\n        return zoomInButton;\n    }\n\n    /**\n     * @return the zoomOutButton\n     */\n    public JButton getZoomOutButton() {\n        return zoomOutButton;\n    }\n\n    /**\n     * @return the undeleteButton\n     */\n    public JButton getUndeleteButton() {\n        return undeleteButton;\n    }\n\n    /**\n     * @return the removeButton\n     */\n    public JButton getRemoveButton() {\n        return removeButton;\n    }\n\n    /**\n     * @return the moveUpButton\n     */\n    public JButton getMoveUpButton() {\n        return moveUpButton;\n    }\n\n    /**\n     * @return the moveDownButton\n     */\n    public JButton getMoveDownButton() {\n        return moveDownButton;\n    }\n\n    /**\n     * @return the rotateButton\n     */\n    public JButton getRotateButton() {\n        return rotateButton;\n    }\n\n    /**\n     * @return the rotateAntiButton\n     */\n    public JButton getRotateAntiButton() {\n        return rotateAntiButton;\n    }\n\n    /**\n     * @return the loadFileButton\n     */\n    public JButton getLoadFileButton() {\n        return loadFileButton;\n    }\n\n    /**\n     * @return the reverseButton\n     */\n    public JButton getReverseButton() {\n        return reverseButton;\n    }\n}\n",
		"id": "EvoSuiteBenchmark/109_pdfsam/src/main/java/org/pdfsam/guiclient/commons/panels/JVisualPdfPageSelectionPanelTest2.java",
		"test_prompt": "// JVisualPdfPageSelectionPanelTest2.java\npackage org.pdfsam.guiclient.commons.panels;\n\nimport java.awt.Component;\nimport java.awt.Dimension;\nimport java.awt.GridBagConstraints;\nimport java.awt.GridBagLayout;\nimport java.awt.Insets;\nimport java.awt.event.ActionEvent;\nimport java.awt.event.ActionListener;\nimport java.awt.event.KeyAdapter;\nimport java.awt.event.KeyEvent;\nimport java.awt.event.MouseAdapter;\nimport java.awt.event.MouseEvent;\nimport java.io.File;\nimport java.util.ArrayList;\nimport java.util.Collection;\nimport java.util.LinkedHashSet;\nimport java.util.List;\nimport java.util.Set;\nimport javax.swing.BorderFactory;\nimport javax.swing.Box;\nimport javax.swing.BoxLayout;\nimport javax.swing.DropMode;\nimport javax.swing.ImageIcon;\nimport javax.swing.JButton;\nimport javax.swing.JLabel;\nimport javax.swing.JList;\nimport javax.swing.JMenuItem;\nimport javax.swing.JPanel;\nimport javax.swing.JPopupMenu;\nimport javax.swing.JScrollPane;\nimport javax.swing.ListSelectionModel;\nimport org.apache.commons.lang.StringUtils;\nimport org.apache.log4j.Logger;\nimport org.pdfsam.console.business.dto.commands.ConcatParsedCommand;\nimport org.pdfsam.guiclient.business.PagePreviewOpener;\nimport org.pdfsam.guiclient.business.PagesWorker;\nimport org.pdfsam.guiclient.business.listeners.EnterDoClickListener;\nimport org.pdfsam.guiclient.commons.business.listeners.VisualPdfSelectionActionListener;\nimport org.pdfsam.guiclient.commons.business.listeners.adapters.PageOpenerMouseAdapter;\nimport org.pdfsam.guiclient.commons.business.listeners.adapters.VisualPdfSelectionKeyAdapter;\nimport org.pdfsam.guiclient.commons.business.listeners.adapters.VisualPdfSelectionMouseAdapter;\nimport org.pdfsam.guiclient.commons.business.listeners.mediators.PagesActionsMediator;\nimport org.pdfsam.guiclient.commons.business.loaders.PdfThumbnailsLoader;\nimport org.pdfsam.guiclient.commons.components.JVisualSelectionList;\nimport org.pdfsam.guiclient.commons.dnd.handlers.VisualListExportTransferHandler;\nimport org.pdfsam.guiclient.commons.dnd.handlers.VisualListTransferHandler;\nimport org.pdfsam.guiclient.commons.models.VisualListModel;\nimport org.pdfsam.guiclient.commons.renderers.VisualListRenderer;\nimport org.pdfsam.guiclient.configuration.Configuration;\nimport org.pdfsam.guiclient.dto.DocumentInfo;\nimport org.pdfsam.guiclient.dto.Rotation;\nimport org.pdfsam.guiclient.dto.VisualPageListItem;\nimport org.pdfsam.guiclient.dto.VisualSelectedItem;\nimport org.pdfsam.i18n.GettextResource;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link JVisualPdfPageSelectionPanel}.\n* It contains ten unit test cases for the {@link JVisualPdfPageSelectionPanel#hasValidElements()} method.\n*/\nclass JVisualPdfPageSelectionPanelTest2 {"
	},
	{
		"original_code": "// WorkExecutor.java\n/*\r\n * Created on 24-Dec-2007\r\n * Copyright (C) 2007 by Andrea Vacondio.\r\n *\r\n * This program is free software; you can redistribute it and/or modify it under the terms of the \r\n * GNU General Public License as published by the Free Software Foundation; \r\n * either version 2 of the License.\r\n * This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; \r\n * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. \r\n * See the GNU General Public License for more details.\r\n * You should have received a copy of the GNU General Public License along with this program; \r\n * if not, write to the Free Software Foundation, Inc., \r\n *  59 Temple Place, Suite 330, Boston, MA 02111-1307 USA\r\n */\r\npackage org.pdfsam.guiclient.commons.business;\r\n\r\nimport java.util.LinkedList;\r\nimport org.apache.log4j.Logger;\r\nimport org.pdfsam.guiclient.configuration.Configuration;\r\nimport org.pdfsam.i18n.GettextResource;\r\n\r\n/**\r\n * Executes the commands\r\n * @author Andrea Vacondio\r\n */\r\npublic class WorkExecutor {\r\n\r\n    private static final Logger log = Logger.getLogger(WorkExecutor.class.getPackage().getName());\r\n\r\n    private static WorkExecutor executor;\r\n\r\n    private Configuration config;\r\n\r\n    private WorkQueue workQueue;\r\n\r\n    private WorkExecutor() {\r\n        workQueue = new WorkQueue(1);\r\n        workQueue.startWorkQueue();\r\n        config = Configuration.getInstance();\r\n    }\r\n\r\n    public static synchronized WorkExecutor getInstance() {\r\n        if (executor == null) {\r\n            executor = new WorkExecutor();\r\n        }\r\n        return executor;\r\n    }\r\n\r\n    public Object clone() throws CloneNotSupportedException {\r\n        throw new CloneNotSupportedException(\"Cannot clone WorkExecutor object.\");\r\n    }\r\n\r\n    /**\r\n     * Executes the input Runnable\r\n     * @param r\r\n     */\r\n    public void execute(Runnable r) {\r\n        workQueue.execute(r);\r\n    }\r\n\r\n    /**\r\n     * @return number of running threads\r\n     */\r\n    public int getRunningThreads() {\r\n        return workQueue.getRunning();\r\n    }\r\n\r\n    public class WorkQueue {\r\n\r\n        private final PoolWorker[] threads;\r\n\r\n        private final LinkedList<Runnable> queue;\r\n\r\n        private int running = 0;\r\n\r\n        /**\r\n         * Default pool size = 1\r\n         */\r\n        public WorkQueue() {\r\n            this(1);\r\n        }\r\n\r\n        /**\r\n         * @param nThreads pool size\r\n         */\r\n        public WorkQueue(int nThreads) {\r\n            queue = new LinkedList<Runnable>();\r\n            threads = new PoolWorker[nThreads];\r\n        }\r\n\r\n        /**\r\n         * starts the work queue\r\n         */\r\n        public void startWorkQueue() {\r\n            if (threads != null) {\r\n                for (int i = 0; i < threads.length; i++) {\r\n                    threads[i] = new PoolWorker();\r\n                    threads[i].start();\r\n                }\r\n            }\r\n        }\r\n\r\n        public synchronized void incRunningCounter() {\r\n            running++;\r\n        }\r\n\r\n        public synchronized void deincRunningCounter() {\r\n            running--;\r\n        }\r\n\r\n        /**\r\n         * @return number of running threads\r\n         */\r\n        public int getRunning() {\r\n            return running;\r\n        }\r\n\r\n        public void execute(Runnable r) {\r\n            synchronized (queue) {\r\n                queue.addLast(r);\r\n                queue.notify();\r\n            }\r\n        }\r\n\r\n        private class PoolWorker extends Thread {\r\n\r\n            public void run() {\r\n                Runnable r;\r\n                while (true) {\r\n                    synchronized (queue) {\r\n                        while (queue.isEmpty()) {\r\n                            try {\r\n                                queue.wait();\r\n                            } catch (InterruptedException ignored) {\r\n                            }\r\n                        }\r\n                        r = (Runnable) queue.removeFirst();\r\n                    }\r\n                    if (r != null) {\r\n                        try {\r\n                            incRunningCounter();\r\n                            r.run();\r\n                        } catch (RuntimeException e) {\r\n                            log.error(GettextResource.gettext(config.getI18nResourceBundle(), \"Error: \"), e);\r\n                        } finally {\r\n                            deincRunningCounter();\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n",
		"id": "EvoSuiteBenchmark/109_pdfsam/src/main/java/org/pdfsam/guiclient/commons/business/WorkExecutorTest0.java",
		"test_prompt": "// WorkExecutorTest0.java\npackage org.pdfsam.guiclient.commons.business;\n\nimport java.util.LinkedList;\nimport org.apache.log4j.Logger;\nimport org.pdfsam.guiclient.configuration.Configuration;\nimport org.pdfsam.i18n.GettextResource;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link WorkExecutor}.\n* It contains ten unit test cases for the {@link WorkExecutor#getInstance()} method.\n*/\nclass WorkExecutorTest0 {"
	},
	{
		"original_code": "// WorkExecutor.java\n/*\r\n * Created on 24-Dec-2007\r\n * Copyright (C) 2007 by Andrea Vacondio.\r\n *\r\n * This program is free software; you can redistribute it and/or modify it under the terms of the \r\n * GNU General Public License as published by the Free Software Foundation; \r\n * either version 2 of the License.\r\n * This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; \r\n * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. \r\n * See the GNU General Public License for more details.\r\n * You should have received a copy of the GNU General Public License along with this program; \r\n * if not, write to the Free Software Foundation, Inc., \r\n *  59 Temple Place, Suite 330, Boston, MA 02111-1307 USA\r\n */\r\npackage org.pdfsam.guiclient.commons.business;\r\n\r\nimport java.util.LinkedList;\r\nimport org.apache.log4j.Logger;\r\nimport org.pdfsam.guiclient.configuration.Configuration;\r\nimport org.pdfsam.i18n.GettextResource;\r\n\r\n/**\r\n * Executes the commands\r\n * @author Andrea Vacondio\r\n */\r\npublic class WorkExecutor {\r\n\r\n    private static final Logger log = Logger.getLogger(WorkExecutor.class.getPackage().getName());\r\n\r\n    private static WorkExecutor executor;\r\n\r\n    private Configuration config;\r\n\r\n    private WorkQueue workQueue;\r\n\r\n    private WorkExecutor() {\r\n        workQueue = new WorkQueue(1);\r\n        workQueue.startWorkQueue();\r\n        config = Configuration.getInstance();\r\n    }\r\n\r\n    public static synchronized WorkExecutor getInstance() {\r\n        if (executor == null) {\r\n            executor = new WorkExecutor();\r\n        }\r\n        return executor;\r\n    }\r\n\r\n    public Object clone() throws CloneNotSupportedException {\r\n        throw new CloneNotSupportedException(\"Cannot clone WorkExecutor object.\");\r\n    }\r\n\r\n    /**\r\n     * Executes the input Runnable\r\n     * @param r\r\n     */\r\n    public void execute(Runnable r) {\r\n        workQueue.execute(r);\r\n    }\r\n\r\n    /**\r\n     * @return number of running threads\r\n     */\r\n    public int getRunningThreads() {\r\n        return workQueue.getRunning();\r\n    }\r\n\r\n    public class WorkQueue {\r\n\r\n        private final PoolWorker[] threads;\r\n\r\n        private final LinkedList<Runnable> queue;\r\n\r\n        private int running = 0;\r\n\r\n        /**\r\n         * Default pool size = 1\r\n         */\r\n        public WorkQueue() {\r\n            this(1);\r\n        }\r\n\r\n        /**\r\n         * @param nThreads pool size\r\n         */\r\n        public WorkQueue(int nThreads) {\r\n            queue = new LinkedList<Runnable>();\r\n            threads = new PoolWorker[nThreads];\r\n        }\r\n\r\n        /**\r\n         * starts the work queue\r\n         */\r\n        public void startWorkQueue() {\r\n            if (threads != null) {\r\n                for (int i = 0; i < threads.length; i++) {\r\n                    threads[i] = new PoolWorker();\r\n                    threads[i].start();\r\n                }\r\n            }\r\n        }\r\n\r\n        public synchronized void incRunningCounter() {\r\n            running++;\r\n        }\r\n\r\n        public synchronized void deincRunningCounter() {\r\n            running--;\r\n        }\r\n\r\n        /**\r\n         * @return number of running threads\r\n         */\r\n        public int getRunning() {\r\n            return running;\r\n        }\r\n\r\n        public void execute(Runnable r) {\r\n            synchronized (queue) {\r\n                queue.addLast(r);\r\n                queue.notify();\r\n            }\r\n        }\r\n\r\n        private class PoolWorker extends Thread {\r\n\r\n            public void run() {\r\n                Runnable r;\r\n                while (true) {\r\n                    synchronized (queue) {\r\n                        while (queue.isEmpty()) {\r\n                            try {\r\n                                queue.wait();\r\n                            } catch (InterruptedException ignored) {\r\n                            }\r\n                        }\r\n                        r = (Runnable) queue.removeFirst();\r\n                    }\r\n                    if (r != null) {\r\n                        try {\r\n                            incRunningCounter();\r\n                            r.run();\r\n                        } catch (RuntimeException e) {\r\n                            log.error(GettextResource.gettext(config.getI18nResourceBundle(), \"Error: \"), e);\r\n                        } finally {\r\n                            deincRunningCounter();\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n",
		"id": "EvoSuiteBenchmark/109_pdfsam/src/main/java/org/pdfsam/guiclient/commons/business/WorkExecutorTest1.java",
		"test_prompt": "// WorkExecutorTest1.java\npackage org.pdfsam.guiclient.commons.business;\n\nimport java.util.LinkedList;\nimport org.apache.log4j.Logger;\nimport org.pdfsam.guiclient.configuration.Configuration;\nimport org.pdfsam.i18n.GettextResource;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link WorkExecutor}.\n* It contains ten unit test cases for the {@link WorkExecutor#clone()} method.\n*/\nclass WorkExecutorTest1 {"
	},
	{
		"original_code": "// PdfThumbnailsLoader.java\n/*\r\n * Created on 22-Jun-2008\r\n * Copyright (C) 2008 by Andrea Vacondio.\r\n *\r\n * This program is free software; you can redistribute it and/or modify it under the terms of the \r\n * GNU General Public License as published by the Free Software Foundation; \r\n * either version 2 of the License.\r\n * This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; \r\n * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. \r\n * See the GNU General Public License for more details.\r\n * You should have received a copy of the GNU General Public License along with this program; \r\n * if not, write to the Free Software Foundation, Inc., \r\n *  59 Temple Place, Suite 330, Boston, MA 02111-1307 USA\r\n */\r\npackage org.pdfsam.guiclient.commons.business.loaders;\r\n\r\nimport java.io.File;\r\nimport java.util.List;\r\nimport javax.swing.JFileChooser;\r\nimport javax.swing.JOptionPane;\r\nimport org.apache.log4j.Logger;\r\nimport org.pdfsam.guiclient.business.IdManager;\r\nimport org.pdfsam.guiclient.business.thumbnails.ThumbnailCreatorsRegisty;\r\nimport org.pdfsam.guiclient.business.thumbnails.creators.ThumbnailsCreator;\r\nimport org.pdfsam.guiclient.commons.components.sharedchooser.SharedJFileChooser;\r\nimport org.pdfsam.guiclient.commons.components.sharedchooser.SharedJFileChooserType;\r\nimport org.pdfsam.guiclient.commons.panels.JVisualPdfPageSelectionPanel;\r\nimport org.pdfsam.guiclient.configuration.Configuration;\r\nimport org.pdfsam.guiclient.dto.DocumentPage;\r\nimport org.pdfsam.guiclient.exceptions.ThumbnailCreationException;\r\nimport org.pdfsam.guiclient.utils.DialogUtility;\r\nimport org.pdfsam.i18n.GettextResource;\r\n\r\n/**\r\n * Loads a document a create thumbnails\r\n * @author Andrea Vacondio\r\n */\r\npublic class PdfThumbnailsLoader {\r\n\r\n    private static final Logger log = Logger.getLogger(PdfThumbnailsLoader.class.getPackage().getName());\r\n\r\n    private JVisualPdfPageSelectionPanel panel;\r\n\r\n    private ThumbnailsCreator creator;\r\n\r\n    private long id = 0;\r\n\r\n    public PdfThumbnailsLoader(JVisualPdfPageSelectionPanel panel) {\r\n        this.panel = panel;\r\n    }\r\n\r\n    /**\r\n     * adds a file to the JList\r\n     */\r\n    public void showFileChooserAndAddFile() throws ThumbnailCreationException {\r\n        JFileChooser fileChooser = SharedJFileChooser.getInstance(SharedJFileChooserType.PDF_FILE, JFileChooser.FILES_ONLY);\r\n        if (fileChooser.showOpenDialog(panel) == JFileChooser.APPROVE_OPTION) {\r\n            if (canLoad()) {\r\n                addFile(fileChooser.getSelectedFile());\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * check if the panel is empty and, if necessary shows a dialog to ask the user\r\n     * @return true if can load\r\n     */\r\n    public boolean canLoad() {\r\n        boolean retVal = true;\r\n        if (panel.getThumbnailList().getModel().getSize() >= 1) {\r\n            //JList has elements and i want to clean\r\n            if (JOptionPane.YES_OPTION == DialogUtility.askForEmptySelectionPanel(panel)) {\r\n                //empty the model\r\n                panel.resetPanel();\r\n            } else {\r\n                retVal = false;\r\n            }\r\n        }\r\n        return retVal;\r\n    }\r\n\r\n    /**\r\n     * add a file to the JList\r\n     * @param file input file\r\n     * @param password password\r\n     * @param template pages template\r\n     */\r\n    public synchronized void addFile(final File file, final String password, List<DocumentPage> template) throws ThumbnailCreationException {\r\n        creator = ThumbnailCreatorsRegisty.getCreator(Configuration.getInstance().getThumbnailsCreatorIdentifier());\r\n        if (creator != null) {\r\n            log.debug(GettextResource.gettext(Configuration.getInstance().getI18nResourceBundle(), \"Generating thumbnails using the following library:\") + \" \" + creator.getCreatorName());\r\n            generateNewId();\r\n            creator.initThumbnailsPanel(file, password, panel, id, template);\r\n        } else {\r\n            log.error(GettextResource.gettext(Configuration.getInstance().getI18nResourceBundle(), \"Unable to initialize the thumbnails creation library.\"));\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Add file without a template\r\n     * @param file\r\n     * @param password\r\n     * @throws ThumbnailCreationException\r\n     */\r\n    public void addFile(final File file, final String password) throws ThumbnailCreationException {\r\n        this.addFile(file, password, null);\r\n    }\r\n\r\n    /**\r\n     * add a file to the JList\r\n     * @param file input file\r\n     */\r\n    public void addFile(File file) throws ThumbnailCreationException {\r\n        this.addFile(file, null);\r\n    }\r\n\r\n    /**\r\n     * add a file to the JList\r\n     * @param file\r\n     * @param checkIfAlreadyAdded if true it checks if the list is already filled, if so it asks the user\r\n     */\r\n    public void addFile(File file, boolean checkIfAlreadyAdded) throws ThumbnailCreationException {\r\n        if (!checkIfAlreadyAdded || (checkIfAlreadyAdded && canLoad())) {\r\n            addFile(file);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Clean creator\r\n     */\r\n    public synchronized void cleanCreator() {\r\n        if (creator != null) {\r\n            creator.clean(id);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * generates a new thumbnails generation ticket\r\n     */\r\n    private void generateNewId() {\r\n        id = IdManager.getInstance().getNewId();\r\n    }\r\n\r\n    /**\r\n     * @return current id\r\n     */\r\n    public long getId() {\r\n        return id;\r\n    }\r\n}\r\n",
		"id": "EvoSuiteBenchmark/109_pdfsam/src/main/java/org/pdfsam/guiclient/commons/business/loaders/PdfThumbnailsLoaderTest.java",
		"test_prompt": "// PdfThumbnailsLoaderTest.java\npackage org.pdfsam.guiclient.commons.business.loaders;\n\nimport java.io.File;\nimport java.util.List;\nimport javax.swing.JFileChooser;\nimport javax.swing.JOptionPane;\nimport org.apache.log4j.Logger;\nimport org.pdfsam.guiclient.business.IdManager;\nimport org.pdfsam.guiclient.business.thumbnails.ThumbnailCreatorsRegisty;\nimport org.pdfsam.guiclient.business.thumbnails.creators.ThumbnailsCreator;\nimport org.pdfsam.guiclient.commons.components.sharedchooser.SharedJFileChooser;\nimport org.pdfsam.guiclient.commons.components.sharedchooser.SharedJFileChooserType;\nimport org.pdfsam.guiclient.commons.panels.JVisualPdfPageSelectionPanel;\nimport org.pdfsam.guiclient.configuration.Configuration;\nimport org.pdfsam.guiclient.dto.DocumentPage;\nimport org.pdfsam.guiclient.exceptions.ThumbnailCreationException;\nimport org.pdfsam.guiclient.utils.DialogUtility;\nimport org.pdfsam.i18n.GettextResource;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link PdfThumbnailsLoader}.\n* It contains ten unit test cases for the {@link PdfThumbnailsLoader#canLoad()} method.\n*/\nclass PdfThumbnailsLoaderTest {"
	},
	{
		"original_code": "// PdfLoader.java\n/*\r\n * Created on 21-Nov-2007\r\n * Copyright (C) 2007 by Andrea Vacondio.\r\n *\r\n * This program is free software; you can redistribute it and/or modify it under the terms of the \r\n * GNU General Public License as published by the Free Software Foundation; \r\n * either version 2 of the License.\r\n * This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; \r\n * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. \r\n * See the GNU General Public License for more details.\r\n * You should have received a copy of the GNU General Public License along with this program; \r\n * if not, write to the Free Software Foundation, Inc., \r\n *  59 Temple Place, Suite 330, Boston, MA 02111-1307 USA\r\n */\r\npackage org.pdfsam.guiclient.commons.business.loaders;\r\n\r\nimport java.io.File;\r\nimport java.util.List;\r\nimport javax.swing.JFileChooser;\r\nimport javax.swing.JOptionPane;\r\nimport org.apache.log4j.Logger;\r\nimport org.pdfsam.guiclient.commons.business.loaders.callable.AddPdfDocument;\r\nimport org.pdfsam.guiclient.commons.business.loaders.callable.ReloadPdfDocument;\r\nimport org.pdfsam.guiclient.commons.components.sharedchooser.SharedJFileChooser;\r\nimport org.pdfsam.guiclient.commons.components.sharedchooser.SharedJFileChooserType;\r\nimport org.pdfsam.guiclient.commons.panels.JPdfSelectionPanel;\r\nimport org.pdfsam.guiclient.configuration.Configuration;\r\nimport org.pdfsam.i18n.GettextResource;\r\n\r\n/**\r\n * Business class whose job is to load pdf file to PdfSelectionTableItem\r\n *\r\n * @author Andrea Vacondio\r\n */\r\npublic class PdfLoader {\r\n\r\n    private static final Logger log = Logger.getLogger(PdfLoader.class.getPackage().getName());\r\n\r\n    private JPdfSelectionPanel panel;\r\n\r\n    private PdfLoaderExecutor executor = null;\r\n\r\n    private PdfDocumentLoadedHook hook = null;\r\n\r\n    public PdfLoader(JPdfSelectionPanel panel) {\r\n        this.panel = panel;\r\n        executor = new PdfLoaderExecutor();\r\n    }\r\n\r\n    /**\r\n     * adds a file or many files depending on the value of singleSelection\r\n     */\r\n    public void showFileChooserAndAddFiles(boolean singleSelection) {\r\n        if (panel.getMainTable().getModel().getRowCount() >= panel.getMaxSelectableFiles()) {\r\n            JOptionPane.showMessageDialog(panel, GettextResource.gettext(Configuration.getInstance().getI18nResourceBundle(), \"Selection table is full, please remove some pdf document.\"), GettextResource.gettext(Configuration.getInstance().getI18nResourceBundle(), \"Table full\"), JOptionPane.INFORMATION_MESSAGE);\r\n        } else {\r\n            if (!executor.isExecuting()) {\r\n                JFileChooser fileChooser = SharedJFileChooser.getInstance(SharedJFileChooserType.PDF_FILE, JFileChooser.FILES_ONLY);\r\n                fileChooser.setMultiSelectionEnabled(!singleSelection);\r\n                if (fileChooser.showOpenDialog(panel) == JFileChooser.APPROVE_OPTION) {\r\n                    if (fileChooser.isMultiSelectionEnabled()) {\r\n                        addFiles(fileChooser.getSelectedFiles());\r\n                    } else {\r\n                        addFile(fileChooser.getSelectedFile());\r\n                    }\r\n                }\r\n            } else {\r\n                log.info(GettextResource.gettext(Configuration.getInstance().getI18nResourceBundle(), \"Please wait while all files are processed..\"));\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * adds multiple selected files\r\n     */\r\n    public void showFileChooserAndAddFiles() {\r\n        showFileChooserAndAddFiles(false);\r\n    }\r\n\r\n    /**\r\n     * add a file to the selectionTable\r\n     *\r\n     * @param file\r\n     *            input file\r\n     * @param password\r\n     *            password\r\n     * @param pageSelection\r\n     *            page selection\r\n     */\r\n    public void addFile(File file, String password, String pageSelection) {\r\n        if (file != null) {\r\n            executor.execute(new AddPdfDocument(file, panel, password, pageSelection), hook);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * add a file to the selectionTable\r\n     *\r\n     * @param file\r\n     *            input file\r\n     * @param password\r\n     *            password\r\n     */\r\n    public void addFile(File file, String password) {\r\n        this.addFile(file, password, null);\r\n    }\r\n\r\n    /**\r\n     * add a file to the selectionTable\r\n     *\r\n     * @param file\r\n     *            input file\r\n     */\r\n    public void addFile(File file) {\r\n        this.addFile(file, null, null);\r\n    }\r\n\r\n    /**\r\n     * reload a file to the selectionTable\r\n     *\r\n     * @param file\r\n     *            input file\r\n     * @param password\r\n     *            password\r\n     * @param pageSelection\r\n     *            page selection\r\n     */\r\n    public void reloadFile(File file, String password, String pageSelection, int index) {\r\n        if (file != null) {\r\n            executor.execute(new ReloadPdfDocument(file, panel, password, pageSelection, index), hook);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * reload a file to the selectionTable\r\n     *\r\n     * @param file\r\n     *            input file\r\n     * @param password\r\n     *            password\r\n     */\r\n    public void reloadFile(File file, String password, int index) {\r\n        this.reloadFile(file, password, null, index);\r\n    }\r\n\r\n    /**\r\n     * reload a file to the selectionTable\r\n     *\r\n     * @param file\r\n     *            input file\r\n     */\r\n    public void reloadFile(File file, int index) {\r\n        this.reloadFile(file, null, null, index);\r\n    }\r\n\r\n    /**\r\n     * adds files to the selectionTable\r\n     *\r\n     * @param files\r\n     */\r\n    public synchronized void addFiles(File[] files) {\r\n        if (files != null) {\r\n            for (int i = 0; i < files.length; i++) {\r\n                executor.execute(new AddPdfDocument(files[i], panel), hook);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * adds files to the selectionTable\r\n     *\r\n     * @param files\r\n     *            File objects list\r\n     * @param ordered\r\n     *            files are added keeping order\r\n     */\r\n    public void addFiles(List<File> files, boolean ordered) {\r\n        if (files != null && !files.isEmpty()) {\r\n            addFiles((File[]) files.toArray(new File[files.size()]));\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Add files without keeping order\r\n     *\r\n     * @param files\r\n     */\r\n    public void addFiles(List<File> files) {\r\n        addFiles(files, false);\r\n    }\r\n\r\n    /**\r\n     * @return true if the loader is adding or reloading documents\r\n     */\r\n    public boolean isExecuting() {\r\n        return executor.isExecuting();\r\n    }\r\n\r\n    /**\r\n     * set the hook to be called after the document is loaded\r\n     *\r\n     * @param hook\r\n     *            the hook to set\r\n     */\r\n    public void setHook(PdfDocumentLoadedHook hook) {\r\n        this.hook = hook;\r\n    }\r\n}\r\n",
		"id": "EvoSuiteBenchmark/109_pdfsam/src/main/java/org/pdfsam/guiclient/commons/business/loaders/PdfLoaderTest.java",
		"test_prompt": "// PdfLoaderTest.java\npackage org.pdfsam.guiclient.commons.business.loaders;\n\nimport java.io.File;\nimport java.util.List;\nimport javax.swing.JFileChooser;\nimport javax.swing.JOptionPane;\nimport org.apache.log4j.Logger;\nimport org.pdfsam.guiclient.commons.business.loaders.callable.AddPdfDocument;\nimport org.pdfsam.guiclient.commons.business.loaders.callable.ReloadPdfDocument;\nimport org.pdfsam.guiclient.commons.components.sharedchooser.SharedJFileChooser;\nimport org.pdfsam.guiclient.commons.components.sharedchooser.SharedJFileChooserType;\nimport org.pdfsam.guiclient.commons.panels.JPdfSelectionPanel;\nimport org.pdfsam.guiclient.configuration.Configuration;\nimport org.pdfsam.i18n.GettextResource;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link PdfLoader}.\n* It contains ten unit test cases for the {@link PdfLoader#isExecuting()} method.\n*/\nclass PdfLoaderTest {"
	},
	{
		"original_code": "// PdfLoaderExecutor.java\n/*\n * Created on 29-Nov-2009\n * Copyright (C) 2009 by Andrea Vacondio.\n *\n * This program is free software; you can redistribute it and/or modify it under the terms of the \n * GNU General Public License as published by the Free Software Foundation; \n * either version 2 of the License.\n * This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; \n * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. \n * See the GNU General Public License for more details.\n * You should have received a copy of the GNU General Public License along with this program; \n * if not, write to the Free Software Foundation, Inc., \n *  59 Temple Place, Suite 330, Boston, MA 02111-1307 USA\n */\npackage org.pdfsam.guiclient.commons.business.loaders;\n\nimport java.util.ArrayList;\nimport java.util.List;\nimport java.util.concurrent.Callable;\nimport java.util.concurrent.ExecutorService;\nimport java.util.concurrent.Executors;\nimport java.util.concurrent.Future;\nimport org.pdfsam.guiclient.commons.business.loaders.callable.AddPdfDocument;\n\n/**\n * Executor that executes the load and reload threads\n *\n * @author Andrea Vacondio\n */\npublic class PdfLoaderExecutor {\n\n    private ExecutorService executor;\n\n    private List<Future<Boolean>> futures = new ArrayList<Future<Boolean>>();\n\n    /**\n     * Submit the callable for execution\n     *\n     * @param callable\n     * @param hook hook to be executed after the document has been loaded. Can be null.\n     */\n    public synchronized void execute(AddPdfDocument callable, PdfDocumentLoadedHook hook) {\n        if (executor == null) {\n            executor = Executors.newSingleThreadExecutor();\n        }\n        //clean the futures if everything is done\n        if (!isExecuting()) {\n            futures.clear();\n        }\n        futures.add(executor.submit(callable));\n        if (hook != null) {\n            executor.submit(new HookedCallable(hook));\n        }\n    }\n\n    /**\n     * @return true if the executor is executing Callable\n     */\n    public boolean isExecuting() {\n        boolean retVal = false;\n        for (Future<Boolean> future : futures) {\n            if (!future.isDone()) {\n                retVal = true;\n                break;\n            }\n        }\n        return retVal;\n    }\n\n    /**\n     * Callable hook\n     * @author Andrea Vacondio\n     */\n    private class HookedCallable implements Callable<Boolean> {\n\n        private PdfDocumentLoadedHook hook;\n\n        /**\n         * @param hook\n         */\n        public HookedCallable(PdfDocumentLoadedHook hook) {\n            super();\n            this.hook = hook;\n        }\n\n        @Override\n        public Boolean call() throws Exception {\n            hook.afterDocumentLoaded();\n            return Boolean.TRUE;\n        }\n    }\n}\n",
		"id": "EvoSuiteBenchmark/109_pdfsam/src/main/java/org/pdfsam/guiclient/commons/business/loaders/PdfLoaderExecutorTest.java",
		"test_prompt": "// PdfLoaderExecutorTest.java\npackage org.pdfsam.guiclient.commons.business.loaders;\n\nimport java.util.ArrayList;\nimport java.util.List;\nimport java.util.concurrent.Callable;\nimport java.util.concurrent.ExecutorService;\nimport java.util.concurrent.Executors;\nimport java.util.concurrent.Future;\nimport org.pdfsam.guiclient.commons.business.loaders.callable.AddPdfDocument;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link PdfLoaderExecutor}.\n* It contains ten unit test cases for the {@link PdfLoaderExecutor#isExecuting()} method.\n*/\nclass PdfLoaderExecutorTest {"
	},
	{
		"original_code": "// AddPdfDocument.java\n/*\n * Created on 29-Nov-2009\n * Copyright (C) 2009 by Andrea Vacondio.\n *\n * This program is free software; you can redistribute it and/or modify it under the terms of the \n * GNU General Public License as published by the Free Software Foundation; \n * either version 2 of the License.\n * This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; \n * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. \n * See the GNU General Public License for more details.\n * You should have received a copy of the GNU General Public License along with this program; \n * if not, write to the Free Software Foundation, Inc., \n *  59 Temple Place, Suite 330, Boston, MA 02111-1307 USA\n */\npackage org.pdfsam.guiclient.commons.business.loaders.callable;\n\nimport java.io.File;\nimport java.util.HashMap;\nimport java.util.Map;\nimport java.util.concurrent.Callable;\nimport org.apache.commons.lang.StringUtils;\nimport org.apache.log4j.Logger;\nimport org.pdfsam.guiclient.commons.panels.JPdfSelectionPanel;\nimport org.pdfsam.guiclient.configuration.Configuration;\nimport org.pdfsam.guiclient.dto.PdfSelectionTableItem;\nimport org.pdfsam.guiclient.utils.EncryptionUtility;\nimport org.pdfsam.guiclient.utils.filters.PdfFilter;\nimport org.pdfsam.i18n.GettextResource;\nimport com.lowagie.text.pdf.PdfName;\nimport com.lowagie.text.pdf.PdfReader;\nimport com.lowagie.text.pdf.PdfWriter;\nimport com.lowagie.text.pdf.RandomAccessFileOrArray;\n\n/**\n * Callable to add a pdf document to the selection panel\n * @author Andrea Vacondio\n */\npublic class AddPdfDocument implements Callable<Boolean> {\n\n    private static final Logger LOG = Logger.getLogger(AddPdfDocument.class.getPackage().getName());\n\n    /*used to find the document data*/\n    private static String TITLE = PdfName.decodeName(PdfName.TITLE.toString());\n\n    private static String PRODUCER = PdfName.decodeName(PdfName.PRODUCER.toString());\n\n    private static String AUTHOR = PdfName.decodeName(PdfName.AUTHOR.toString());\n\n    private static String SUBJECT = PdfName.decodeName(PdfName.SUBJECT.toString());\n\n    private static String CREATOR = PdfName.decodeName(PdfName.CREATOR.toString());\n\n    private static String MODDATE = PdfName.decodeName(PdfName.MODDATE.toString());\n\n    private static String CREATIONDATE = PdfName.decodeName(PdfName.CREATIONDATE.toString());\n\n    private static String KEYWORDS = PdfName.decodeName(PdfName.KEYWORDS.toString());\n\n    String wipText;\n\n    File inputFile;\n\n    String password;\n\n    String pageSelection;\n\n    JPdfSelectionPanel panel;\n\n    public AddPdfDocument(File inputFile, JPdfSelectionPanel panel) {\n        this(inputFile, panel, null, null);\n    }\n\n    public AddPdfDocument(File inputFile, JPdfSelectionPanel panel, String password, String pageSelection) {\n        this.inputFile = inputFile;\n        this.pageSelection = pageSelection;\n        this.password = password;\n        this.panel = panel;\n    }\n\n    public Boolean call() {\n        Boolean retVal = Boolean.FALSE;\n        try {\n            if (inputFile != null) {\n                if (new PdfFilter(false).accept(inputFile)) {\n                    wipText = GettextResource.gettext(Configuration.getInstance().getI18nResourceBundle(), \"Please wait while reading\") + \" \" + inputFile.getName() + \" ...\";\n                    panel.addWipText(wipText);\n                    panel.addTableRow(getPdfSelectionTableItem(inputFile, password, pageSelection));\n                    panel.removeWipText(wipText);\n                    retVal = Boolean.TRUE;\n                } else {\n                    LOG.warn(GettextResource.gettext(Configuration.getInstance().getI18nResourceBundle(), \"Selected file is not a pdf document.\") + \" \" + inputFile.getName());\n                }\n            }\n        } catch (Throwable e) {\n            LOG.error(GettextResource.gettext(Configuration.getInstance().getI18nResourceBundle(), \"Error: \"), e);\n        }\n        return retVal;\n    }\n\n    /**\n     * @param fileToAdd file to add\n     * @param password password to open the file\n     * @return the item to add to the table\n     */\n    PdfSelectionTableItem getPdfSelectionTableItem(File fileToAdd, String password, String pageSelection) {\n        PdfSelectionTableItem tableItem = null;\n        PdfReader pdfReader = null;\n        if (fileToAdd != null) {\n            tableItem = new PdfSelectionTableItem();\n            tableItem.setInputFile(fileToAdd);\n            tableItem.setPassword(password);\n            tableItem.setPageSelection(pageSelection);\n            try {\n                //fix 04/11/08 for memory usage\n                pdfReader = new PdfReader(new RandomAccessFileOrArray(fileToAdd.getAbsolutePath()), (password != null) ? password.getBytes() : null);\n                tableItem.setEncrypted(pdfReader.isEncrypted());\n                tableItem.setFullPermission(pdfReader.isOpenedWithFullPermissions());\n                if (tableItem.isEncrypted()) {\n                    tableItem.setPermissions(getPermissionsVerbose(pdfReader.getPermissions()));\n                    int cMode = pdfReader.getCryptoMode();\n                    switch(cMode) {\n                        case PdfWriter.STANDARD_ENCRYPTION_40:\n                            tableItem.setEncryptionAlgorithm(EncryptionUtility.RC4_40);\n                            break;\n                        case PdfWriter.STANDARD_ENCRYPTION_128:\n                            tableItem.setEncryptionAlgorithm(EncryptionUtility.RC4_128);\n                            break;\n                        case PdfWriter.ENCRYPTION_AES_128:\n                            tableItem.setEncryptionAlgorithm(EncryptionUtility.AES_128);\n                            break;\n                        default:\n                            break;\n                    }\n                }\n                tableItem.setPagesNumber(Integer.toString(pdfReader.getNumberOfPages()));\n                tableItem.setFileSize(fileToAdd.length());\n                tableItem.setPdfVersion(pdfReader.getPdfVersion());\n                tableItem.setSyntaxErrors(pdfReader.isRebuilt());\n                initTableItemDocumentData(pdfReader, tableItem);\n            } catch (Exception e) {\n                tableItem.setLoadedWithErrors(true);\n                LOG.error(GettextResource.gettext(Configuration.getInstance().getI18nResourceBundle(), \"Error loading \") + fileToAdd.getAbsolutePath() + \" :\", e);\n            } finally {\n                if (pdfReader != null) {\n                    pdfReader.close();\n                    pdfReader = null;\n                }\n            }\n        }\n        return tableItem;\n    }\n\n    /**\n     * It gives a human readable version of the document permissions\n     * @param permissions\n     * @return\n     */\n    private String getPermissionsVerbose(int permissions) {\n        StringBuffer buf = new StringBuffer();\n        if ((PdfWriter.ALLOW_PRINTING & permissions) == PdfWriter.ALLOW_PRINTING)\n            buf.append(GettextResource.gettext(Configuration.getInstance().getI18nResourceBundle(), \"Print\"));\n        if ((PdfWriter.ALLOW_MODIFY_CONTENTS & permissions) == PdfWriter.ALLOW_MODIFY_CONTENTS)\n            buf.append(\", \" + GettextResource.gettext(Configuration.getInstance().getI18nResourceBundle(), \"Modify\"));\n        if ((PdfWriter.ALLOW_COPY & permissions) == PdfWriter.ALLOW_COPY)\n            buf.append(\", \" + GettextResource.gettext(Configuration.getInstance().getI18nResourceBundle(), \"Copy or extract\"));\n        if ((PdfWriter.ALLOW_MODIFY_ANNOTATIONS & permissions) == PdfWriter.ALLOW_MODIFY_ANNOTATIONS)\n            buf.append(\", \" + GettextResource.gettext(Configuration.getInstance().getI18nResourceBundle(), \"Add or modify text annotations\"));\n        if ((PdfWriter.ALLOW_FILL_IN & permissions) == PdfWriter.ALLOW_FILL_IN)\n            buf.append(\", \" + GettextResource.gettext(Configuration.getInstance().getI18nResourceBundle(), \"Fill form fields\"));\n        if ((PdfWriter.ALLOW_SCREENREADERS & permissions) == PdfWriter.ALLOW_SCREENREADERS)\n            buf.append(\", \" + GettextResource.gettext(Configuration.getInstance().getI18nResourceBundle(), \"Extract for use by accessibility dev.\"));\n        if ((PdfWriter.ALLOW_ASSEMBLY & permissions) == PdfWriter.ALLOW_ASSEMBLY)\n            buf.append(\", \" + GettextResource.gettext(Configuration.getInstance().getI18nResourceBundle(), \"Manipulate pages and add bookmarks\"));\n        if ((PdfWriter.ALLOW_DEGRADED_PRINTING & permissions) == PdfWriter.ALLOW_DEGRADED_PRINTING)\n            buf.append(\", \" + GettextResource.gettext(Configuration.getInstance().getI18nResourceBundle(), \"Low quality print\"));\n        return buf.toString();\n    }\n\n    /**\n     * initialization of the document data\n     * @param reader\n     * @param tableItem\n     */\n    @SuppressWarnings(\"unchecked\")\n    private void initTableItemDocumentData(PdfReader reader, PdfSelectionTableItem tableItem) {\n        if (reader != null && tableItem != null) {\n            HashMap<String, String> info = reader.getInfo();\n            if (info != null && info.size() > 0) {\n                for (Map.Entry<String, String> entry : info.entrySet()) {\n                    if (entry != null) {\n                        String key = entry.getKey();\n                        String value = StringUtils.trimToEmpty(entry.getValue());\n                        if (key.equals(TITLE)) {\n                            tableItem.getDocumentMetaData().setTitle(value);\n                        } else if (key.equals(PRODUCER)) {\n                            tableItem.getDocumentMetaData().setProducer(value);\n                        } else if (key.equals(AUTHOR)) {\n                            tableItem.getDocumentMetaData().setAuthor(value);\n                        } else if (key.equals(SUBJECT)) {\n                            tableItem.getDocumentMetaData().setSubject(value);\n                        } else if (key.equals(CREATOR)) {\n                            tableItem.getDocumentMetaData().setCreator(value);\n                        } else if (key.equals(MODDATE)) {\n                            tableItem.getDocumentMetaData().setModificationDate(value);\n                        } else if (key.equals(CREATIONDATE)) {\n                            tableItem.getDocumentMetaData().setCreationDate(value);\n                        } else if (key.equals(KEYWORDS)) {\n                            tableItem.getDocumentMetaData().setKeywords(value);\n                        }\n                    }\n                }\n            }\n        }\n    }\n}\n",
		"id": "EvoSuiteBenchmark/109_pdfsam/src/main/java/org/pdfsam/guiclient/commons/business/loaders/callable/AddPdfDocumentTest.java",
		"test_prompt": "// AddPdfDocumentTest.java\npackage org.pdfsam.guiclient.commons.business.loaders.callable;\n\nimport java.io.File;\nimport java.util.HashMap;\nimport java.util.Map;\nimport java.util.concurrent.Callable;\nimport org.apache.commons.lang.StringUtils;\nimport org.apache.log4j.Logger;\nimport org.pdfsam.guiclient.commons.panels.JPdfSelectionPanel;\nimport org.pdfsam.guiclient.configuration.Configuration;\nimport org.pdfsam.guiclient.dto.PdfSelectionTableItem;\nimport org.pdfsam.guiclient.utils.EncryptionUtility;\nimport org.pdfsam.guiclient.utils.filters.PdfFilter;\nimport org.pdfsam.i18n.GettextResource;\nimport com.lowagie.text.pdf.PdfName;\nimport com.lowagie.text.pdf.PdfReader;\nimport com.lowagie.text.pdf.PdfWriter;\nimport com.lowagie.text.pdf.RandomAccessFileOrArray;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link AddPdfDocument}.\n* It contains ten unit test cases for the {@link AddPdfDocument#call()} method.\n*/\nclass AddPdfDocumentTest {"
	},
	{
		"original_code": "// ReloadPdfDocument.java\n/*\n * Created on 29-Nov-2009\n * Copyright (C) 2009 by Andrea Vacondio.\n *\n * This program is free software; you can redistribute it and/or modify it under the terms of the \n * GNU General Public License as published by the Free Software Foundation; \n * either version 2 of the License.\n * This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; \n * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. \n * See the GNU General Public License for more details.\n * You should have received a copy of the GNU General Public License along with this program; \n * if not, write to the Free Software Foundation, Inc., \n *  59 Temple Place, Suite 330, Boston, MA 02111-1307 USA\n */\npackage org.pdfsam.guiclient.commons.business.loaders.callable;\n\nimport java.io.File;\nimport org.apache.log4j.Logger;\nimport org.pdfsam.guiclient.commons.panels.JPdfSelectionPanel;\nimport org.pdfsam.guiclient.configuration.Configuration;\nimport org.pdfsam.guiclient.utils.filters.PdfFilter;\nimport org.pdfsam.i18n.GettextResource;\n\n/**\n * Callable to reload a pdf document\n *\n * @author Andrea Vacondio\n */\npublic class ReloadPdfDocument extends AddPdfDocument {\n\n    private static final Logger LOG = Logger.getLogger(ReloadPdfDocument.class.getPackage().getName());\n\n    private int index = 0;\n\n    public ReloadPdfDocument(File inputFile, JPdfSelectionPanel panel, String password, String pageSelection, int index) {\n        super(inputFile, panel, password, pageSelection);\n        this.index = index;\n    }\n\n    @Override\n    public Boolean call() {\n        Boolean retVal = Boolean.FALSE;\n        try {\n            if (inputFile != null) {\n                if (new PdfFilter(false).accept(inputFile)) {\n                    wipText = GettextResource.gettext(Configuration.getInstance().getI18nResourceBundle(), \"Please wait while reading\") + \" \" + inputFile.getName() + \" ...\";\n                    panel.addWipText(wipText);\n                    panel.updateTableRow(index, getPdfSelectionTableItem(inputFile, password, pageSelection));\n                    panel.removeWipText(wipText);\n                    retVal = Boolean.TRUE;\n                } else {\n                    LOG.warn(GettextResource.gettext(Configuration.getInstance().getI18nResourceBundle(), \"Selected file is not a pdf document.\") + \" \" + inputFile.getName());\n                }\n            }\n        } catch (Throwable e) {\n            LOG.error(GettextResource.gettext(Configuration.getInstance().getI18nResourceBundle(), \"Error: \"), e);\n        }\n        return retVal;\n    }\n}\n",
		"id": "EvoSuiteBenchmark/109_pdfsam/src/main/java/org/pdfsam/guiclient/commons/business/loaders/callable/ReloadPdfDocumentTest.java",
		"test_prompt": "// ReloadPdfDocumentTest.java\npackage org.pdfsam.guiclient.commons.business.loaders.callable;\n\nimport java.io.File;\nimport org.apache.log4j.Logger;\nimport org.pdfsam.guiclient.commons.panels.JPdfSelectionPanel;\nimport org.pdfsam.guiclient.configuration.Configuration;\nimport org.pdfsam.guiclient.utils.filters.PdfFilter;\nimport org.pdfsam.i18n.GettextResource;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link ReloadPdfDocument}.\n* It contains ten unit test cases for the {@link ReloadPdfDocument#call()} method.\n*/\nclass ReloadPdfDocumentTest {"
	},
	{
		"original_code": "// CleanClosedTabbedPanelListener.java\n/*\r\n * Created on 07-Oct-2008\r\n * Copyright (C) 2008 by Andrea Vacondio.\r\n *\r\n * This program is free software; you can redistribute it and/or modify it under the terms of the \r\n * GNU General Public License as published by the Free Software Foundation; \r\n * either version 2 of the License.\r\n * This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; \r\n * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. \r\n * See the GNU General Public License for more details.\r\n * You should have received a copy of the GNU General Public License along with this program; \r\n * if not, write to the Free Software Foundation, Inc., \r\n *  59 Temple Place, Suite 330, Boston, MA 02111-1307 USA\r\n */\r\npackage org.pdfsam.guiclient.commons.business.listeners;\r\n\r\nimport java.awt.Component;\r\nimport org.apache.log4j.Logger;\r\nimport org.pdfsam.guiclient.commons.panels.CloseableTabbedPane;\r\nimport org.pdfsam.guiclient.commons.panels.JVisualPdfPageSelectionPanel;\r\nimport org.pdfsam.guiclient.configuration.Configuration;\r\nimport org.pdfsam.i18n.GettextResource;\r\n\r\n/**\r\n * Clean the creator to stop thumbnails threads\r\n * @author Andrea Vacondio\r\n */\r\npublic class CleanClosedTabbedPanelListener implements CloseableTabbedPaneListener {\r\n\r\n    private static final Logger log = Logger.getLogger(CleanClosedTabbedPanelListener.class.getPackage().getName());\r\n\r\n    private CloseableTabbedPane panel;\r\n\r\n    /**\r\n     * @param panel\r\n     */\r\n    public CleanClosedTabbedPanelListener(CloseableTabbedPane panel) {\r\n        super();\r\n        this.panel = panel;\r\n    }\r\n\r\n    public boolean closeTab(int tabIndexToClose) {\r\n        try {\r\n            Component currentPanel = panel.getComponentAt(tabIndexToClose);\r\n            if (currentPanel != null) {\r\n                ((JVisualPdfPageSelectionPanel) currentPanel).getPdfLoader().cleanCreator();\r\n            }\r\n        } catch (Exception e) {\r\n            log.error(GettextResource.gettext(Configuration.getInstance().getI18nResourceBundle(), \"Unable to clean pdf loader\"), e);\r\n        }\r\n        return true;\r\n    }\r\n}\r\n",
		"id": "EvoSuiteBenchmark/109_pdfsam/src/main/java/org/pdfsam/guiclient/commons/business/listeners/CleanClosedTabbedPanelListenerTest.java",
		"test_prompt": "// CleanClosedTabbedPanelListenerTest.java\npackage org.pdfsam.guiclient.commons.business.listeners;\n\nimport java.awt.Component;\nimport org.apache.log4j.Logger;\nimport org.pdfsam.guiclient.commons.panels.CloseableTabbedPane;\nimport org.pdfsam.guiclient.commons.panels.JVisualPdfPageSelectionPanel;\nimport org.pdfsam.guiclient.configuration.Configuration;\nimport org.pdfsam.i18n.GettextResource;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link CleanClosedTabbedPanelListener}.\n* It contains ten unit test cases for the {@link CleanClosedTabbedPanelListener#closeTab(int)} method.\n*/\nclass CleanClosedTabbedPanelListenerTest {"
	},
	{
		"original_code": "// SoundPlayer.java\n/*\r\n * Created on 12-Oct-2008\r\n * Copyright (C) 2008 by Andrea Vacondio.\r\n *\r\n * This program is free software; you can redistribute it and/or modify it under the terms of the \r\n * GNU General Public License as published by the Free Software Foundation; \r\n * either version 2 of the License.\r\n * This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; \r\n * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. \r\n * See the GNU General Public License for more details.\r\n * You should have received a copy of the GNU General Public License along with this program; \r\n * if not, write to the Free Software Foundation, Inc., \r\n *  59 Temple Place, Suite 330, Boston, MA 02111-1307 USA\r\n */\r\npackage org.pdfsam.guiclient.commons.business;\r\n\r\nimport java.util.concurrent.ExecutorService;\r\nimport java.util.concurrent.Executors;\r\nimport javax.sound.sampled.AudioInputStream;\r\nimport javax.sound.sampled.AudioSystem;\r\nimport javax.sound.sampled.Clip;\r\nimport javax.sound.sampled.DataLine;\r\nimport org.apache.log4j.Logger;\r\nimport org.pdfsam.guiclient.configuration.Configuration;\r\nimport org.pdfsam.i18n.GettextResource;\r\n\r\n/**\r\n * Plays sounds\r\n *\r\n * @author Andrea Vacondio\r\n */\r\npublic class SoundPlayer {\r\n\r\n    private static final Logger log = Logger.getLogger(SoundPlayer.class.getPackage().getName());\r\n\r\n    private static final String SOUND = \"/resources/sounds/ok_sound.wav\";\r\n\r\n    private static final String ERROR_SOUND = \"/resources/sounds/error_sound.wav\";\r\n\r\n    private static SoundPlayer player = null;\r\n\r\n    private Clip errorClip;\r\n\r\n    private Clip soundClip;\r\n\r\n    private ExecutorService executor;\r\n\r\n    private SoundPlayer() {\r\n        executor = Executors.newSingleThreadExecutor();\r\n    }\r\n\r\n    public static synchronized SoundPlayer getInstance() {\r\n        if (player == null) {\r\n            player = new SoundPlayer();\r\n        }\r\n        return player;\r\n    }\r\n\r\n    /**\r\n     * Plays an error sound\r\n     */\r\n    public void playErrorSound() {\r\n        if (Configuration.getInstance().isPlaySounds()) {\r\n            try {\r\n                if (errorClip == null) {\r\n                    AudioInputStream sound = AudioSystem.getAudioInputStream(this.getClass().getResource(ERROR_SOUND));\r\n                    DataLine.Info info = new DataLine.Info(Clip.class, sound.getFormat());\r\n                    errorClip = (Clip) AudioSystem.getLine(info);\r\n                    errorClip.open(sound);\r\n                }\r\n                executor.execute(new PlayThread(errorClip));\r\n            } catch (Exception e) {\r\n                log.warn(GettextResource.gettext(Configuration.getInstance().getI18nResourceBundle(), \"Error playing sound\") + \": \" + e.getMessage());\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Plays a sound\r\n     */\r\n    public void playSound() {\r\n        if (Configuration.getInstance().isPlaySounds()) {\r\n            try {\r\n                if (soundClip == null) {\r\n                    AudioInputStream sound = AudioSystem.getAudioInputStream(this.getClass().getResource(SOUND));\r\n                    DataLine.Info info = new DataLine.Info(Clip.class, sound.getFormat());\r\n                    soundClip = (Clip) AudioSystem.getLine(info);\r\n                    soundClip.open(sound);\r\n                }\r\n                executor.execute(new PlayThread(soundClip));\r\n            } catch (Exception e) {\r\n                log.warn(GettextResource.gettext(Configuration.getInstance().getI18nResourceBundle(), \"Error playing sound\") + \": \" + e.getMessage());\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Plays the sound\r\n     *\r\n     * @author Andrea Vacondio\r\n     */\r\n    private class PlayThread extends Thread {\r\n\r\n        private Clip clip;\r\n\r\n        /**\r\n         * @param clip\r\n         */\r\n        public PlayThread(Clip clip) {\r\n            this.clip = clip;\r\n        }\r\n\r\n        public void run() {\r\n            try {\r\n                clip.setFramePosition(0);\r\n                clip.stop();\r\n                clip.start();\r\n            } catch (Exception e) {\r\n                log.error(GettextResource.gettext(Configuration.getInstance().getI18nResourceBundle(), \"Error playing sound\"), e);\r\n            }\r\n        }\r\n    }\r\n}\r\n",
		"id": "EvoSuiteBenchmark/109_pdfsam/src/main/java/org/pdfsam/guiclient/commons/business/SoundPlayerTest.java",
		"test_prompt": "// SoundPlayerTest.java\npackage org.pdfsam.guiclient.commons.business;\n\nimport java.util.concurrent.ExecutorService;\nimport java.util.concurrent.Executors;\nimport javax.sound.sampled.AudioInputStream;\nimport javax.sound.sampled.AudioSystem;\nimport javax.sound.sampled.Clip;\nimport javax.sound.sampled.DataLine;\nimport org.apache.log4j.Logger;\nimport org.pdfsam.guiclient.configuration.Configuration;\nimport org.pdfsam.i18n.GettextResource;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link SoundPlayer}.\n* It contains ten unit test cases for the {@link SoundPlayer#getInstance()} method.\n*/\nclass SoundPlayerTest {"
	},
	{
		"original_code": "// JDocumentPropertiesFrame.java\n/*\n * Created on 18-Mar-2009\n * Copyright (C) 2009 by Andrea Vacondio.\n *\n * This program is free software; you can redistribute it and/or modify it under the terms of the \n * GNU General Public License as published by the Free Software Foundation; \n * either version 2 of the License.\n * This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; \n * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. \n * See the GNU General Public License for more details.\n * You should have received a copy of the GNU General Public License along with this program; \n * if not, write to the Free Software Foundation, Inc., \n *  59 Temple Place, Suite 330, Boston, MA 02111-1307 USA\n */\npackage org.pdfsam.guiclient.commons.frames;\n\nimport java.awt.Dimension;\nimport java.awt.Font;\nimport java.awt.Insets;\nimport java.awt.Toolkit;\nimport java.awt.event.KeyEvent;\nimport java.net.URL;\nimport javax.swing.ImageIcon;\nimport javax.swing.JFrame;\nimport javax.swing.JMenu;\nimport javax.swing.JMenuBar;\nimport javax.swing.JMenuItem;\nimport javax.swing.JPanel;\nimport javax.swing.JPopupMenu;\nimport javax.swing.JScrollPane;\nimport javax.swing.JTextPane;\nimport javax.swing.border.EtchedBorder;\nimport javax.swing.text.DefaultEditorKit;\nimport org.apache.log4j.Logger;\nimport org.pdfsam.guiclient.business.actions.HideFrameAction;\nimport org.pdfsam.guiclient.configuration.Configuration;\nimport org.pdfsam.guiclient.dto.PdfSelectionTableItem;\nimport org.pdfsam.i18n.GettextResource;\n\n/**\n * Frame that shows document properties\n *\n * @author Andrea Vacondio\n */\npublic class JDocumentPropertiesFrame extends JFrame {\n\n    private static final long serialVersionUID = -3836869268177748519L;\n\n    private static final Logger log = Logger.getLogger(JDocumentPropertiesFrame.class.getPackage().getName());\n\n    private static final int HEIGHT = 480;\n\n    private static final int WIDTH = 640;\n\n    private static JDocumentPropertiesFrame instance = null;\n\n    private final JPanel mainPanel = new JPanel();\n\n    private JScrollPane mainScrollPanel;\n\n    private JTextPane textInfoArea;\n\n    private JPopupMenu jPopupMenu = new JPopupMenu();\n\n    private JDocumentPropertiesFrame() {\n        initialize();\n    }\n\n    public static synchronized JDocumentPropertiesFrame getInstance() {\n        if (instance == null) {\n            instance = new JDocumentPropertiesFrame();\n        }\n        return instance;\n    }\n\n    public synchronized void showProperties(PdfSelectionTableItem props) {\n        StringBuilder sb = new StringBuilder();\n        if (props != null) {\n            sb.append(\"<html><head></head><body style=\\\"margin: 3\\\"><b>\");\n            sb.append(GettextResource.gettext(Configuration.getInstance().getI18nResourceBundle(), \"File name\"));\n            sb.append(\":</b> \");\n            sb.append(props.getInputFile().getAbsolutePath());\n            sb.append(\"<br>\\n<b>\");\n            sb.append(GettextResource.gettext(Configuration.getInstance().getI18nResourceBundle(), \"Number of pages\"));\n            sb.append(\":</b> \");\n            sb.append(props.getPagesNumber());\n            sb.append(\"<br>\\n<b>\");\n            sb.append(GettextResource.gettext(Configuration.getInstance().getI18nResourceBundle(), \"File size\"));\n            sb.append(\":</b> \");\n            sb.append(props.getFileSize());\n            sb.append(\"B<br>\\n<b>\");\n            sb.append(GettextResource.gettext(Configuration.getInstance().getI18nResourceBundle(), \"Pdf version\"));\n            sb.append(\":</b> \");\n            sb.append(props.getPdfVersionDescription());\n            sb.append(\"<br>\\n<b>\");\n            sb.append(GettextResource.gettext(Configuration.getInstance().getI18nResourceBundle(), \"Encryption\"));\n            sb.append(\":</b> \");\n            sb.append((props.isEncrypted() ? props.getEncryptionAlgorithm() : GettextResource.gettext(Configuration.getInstance().getI18nResourceBundle(), \"Not encrypted\")));\n            sb.append(\"<br>\\n\");\n            if (props.isEncrypted()) {\n                sb.append(\"<b>\");\n                sb.append(GettextResource.gettext(Configuration.getInstance().getI18nResourceBundle(), \"Permissions\"));\n                sb.append(\":</b> \");\n                sb.append(props.getPermissions());\n                sb.append(\"<br>\\n\");\n            }\n            if (props.getDocumentMetaData() != null) {\n                sb.append(\"<b>\");\n                sb.append(GettextResource.gettext(Configuration.getInstance().getI18nResourceBundle(), \"Title\"));\n                sb.append(\":</b> \");\n                sb.append(props.getDocumentMetaData().getTitle());\n                sb.append(\"<br>\\n<b>\");\n                sb.append(GettextResource.gettext(Configuration.getInstance().getI18nResourceBundle(), \"Author\"));\n                sb.append(\":</b> \");\n                sb.append(props.getDocumentMetaData().getAuthor());\n                sb.append(\"<br>\\n<b>\");\n                sb.append(GettextResource.gettext(Configuration.getInstance().getI18nResourceBundle(), \"Subject\"));\n                sb.append(\":</b> \");\n                sb.append(props.getDocumentMetaData().getSubject());\n                sb.append(\"<br>\\n<b>\");\n                sb.append(GettextResource.gettext(Configuration.getInstance().getI18nResourceBundle(), \"Producer\"));\n                sb.append(\":</b> \");\n                sb.append(props.getDocumentMetaData().getProducer());\n                sb.append(\"<br>\\n<b>\");\n                sb.append(GettextResource.gettext(Configuration.getInstance().getI18nResourceBundle(), \"Creator\"));\n                sb.append(\":</b> \");\n                sb.append(props.getDocumentMetaData().getCreator());\n                sb.append(\"<br>\\n<b>\");\n                sb.append(GettextResource.gettext(Configuration.getInstance().getI18nResourceBundle(), \"Creation date\"));\n                sb.append(\":</b> \");\n                sb.append(props.getDocumentMetaData().getCreationDate());\n                sb.append(\"<br>\\n<b>\");\n                sb.append(GettextResource.gettext(Configuration.getInstance().getI18nResourceBundle(), \"Modification date\"));\n                sb.append(\":</b> \");\n                sb.append(props.getDocumentMetaData().getModificationDate());\n                sb.append(\"<br>\\n<b>\");\n                sb.append(GettextResource.gettext(Configuration.getInstance().getI18nResourceBundle(), \"Keywords\"));\n                sb.append(\":</b> \");\n                sb.append(props.getDocumentMetaData().getKeywords());\n                sb.append(\"<br>\\n\");\n            }\n            sb.append(\"</body></html>\");\n            textInfoArea.setMargin(new Insets(5, 5, 5, 5));\n            textInfoArea.setText(sb.toString());\n            setVisible(true);\n        }\n    }\n\n    private void initialize() {\n        try {\n            URL iconUrl = this.getClass().getResource(\"/images/info.png\");\n            setTitle(GettextResource.gettext(Configuration.getInstance().getI18nResourceBundle(), \"Document properties\"));\n            setIconImage(new ImageIcon(iconUrl).getImage());\n            setSize(WIDTH, HEIGHT);\n            setExtendedState(JFrame.NORMAL);\n            setDefaultCloseOperation(JFrame.HIDE_ON_CLOSE);\n            JMenuBar menuBar = new JMenuBar();\n            JMenu menuFile = new JMenu();\n            menuFile.setText(GettextResource.gettext(Configuration.getInstance().getI18nResourceBundle(), \"File\"));\n            menuFile.setMnemonic(KeyEvent.VK_F);\n            JMenuItem closeItem = new JMenuItem();\n            closeItem.setAction(new HideFrameAction(this));\n            menuFile.add(closeItem);\n            menuBar.add(menuFile);\n            getRootPane().setJMenuBar(menuBar);\n            textInfoArea = new JTextPane();\n            textInfoArea.setFont(new Font(\"Dialog\", Font.PLAIN, 9));\n            textInfoArea.setBorder(new EtchedBorder(EtchedBorder.LOWERED));\n            textInfoArea.setContentType(\"text/html\");\n            textInfoArea.setEditable(false);\n            mainPanel.add(textInfoArea);\n            mainScrollPanel = new JScrollPane(textInfoArea);\n            getContentPane().add(mainScrollPanel);\n            JMenuItem menuCopy = new JMenuItem(new DefaultEditorKit.CopyAction());\n            menuCopy.setText(GettextResource.gettext(Configuration.getInstance().getI18nResourceBundle(), \"Copy\"));\n            menuCopy.setIcon(new ImageIcon(this.getClass().getResource(\"/images/edit-copy.png\")));\n            jPopupMenu.add(menuCopy);\n            textInfoArea.setComponentPopupMenu(jPopupMenu);\n            // centered\n            Toolkit tk = Toolkit.getDefaultToolkit();\n            Dimension screenSize = tk.getScreenSize();\n            int screenHeight = screenSize.height;\n            int screenWidth = screenSize.width;\n            if (screenWidth > WIDTH && screenHeight > HEIGHT) {\n                setLocation((screenWidth - WIDTH) / 2, (screenHeight - HEIGHT) / 2);\n            }\n        } catch (Exception e) {\n            log.error(GettextResource.gettext(Configuration.getInstance().getI18nResourceBundle(), \"Error creating properties panel.\"), e);\n        }\n    }\n}\n",
		"id": "EvoSuiteBenchmark/109_pdfsam/src/main/java/org/pdfsam/guiclient/commons/frames/JDocumentPropertiesFrameTest.java",
		"test_prompt": "// JDocumentPropertiesFrameTest.java\npackage org.pdfsam.guiclient.commons.frames;\n\nimport java.awt.Dimension;\nimport java.awt.Font;\nimport java.awt.Insets;\nimport java.awt.Toolkit;\nimport java.awt.event.KeyEvent;\nimport java.net.URL;\nimport javax.swing.ImageIcon;\nimport javax.swing.JFrame;\nimport javax.swing.JMenu;\nimport javax.swing.JMenuBar;\nimport javax.swing.JMenuItem;\nimport javax.swing.JPanel;\nimport javax.swing.JPopupMenu;\nimport javax.swing.JScrollPane;\nimport javax.swing.JTextPane;\nimport javax.swing.border.EtchedBorder;\nimport javax.swing.text.DefaultEditorKit;\nimport org.apache.log4j.Logger;\nimport org.pdfsam.guiclient.business.actions.HideFrameAction;\nimport org.pdfsam.guiclient.configuration.Configuration;\nimport org.pdfsam.guiclient.dto.PdfSelectionTableItem;\nimport org.pdfsam.i18n.GettextResource;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link JDocumentPropertiesFrame}.\n* It contains ten unit test cases for the {@link JDocumentPropertiesFrame#getInstance()} method.\n*/\nclass JDocumentPropertiesFrameTest {"
	},
	{
		"original_code": "// AbstractPdfSelectionTableModel.java\n/*\r\n * Created on 20-Dec-2007\r\n * Copyright (C) 2007 by Andrea Vacondio.\r\n *\r\n * This program is free software; you can redistribute it and/or modify it under the terms of the \r\n * GNU General Public License as published by the Free Software Foundation; \r\n * either version 2 of the License.\r\n * This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; \r\n * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. \r\n * See the GNU General Public License for more details.\r\n * You should have received a copy of the GNU General Public License along with this program; \r\n * if not, write to the Free Software Foundation, Inc., \r\n *  59 Temple Place, Suite 330, Boston, MA 02111-1307 USA\r\n */\r\npackage org.pdfsam.guiclient.commons.models;\r\n\r\nimport java.io.Serializable;\r\nimport javax.swing.table.AbstractTableModel;\r\nimport org.pdfsam.guiclient.commons.panels.JPdfSelectionPanel;\r\nimport org.pdfsam.guiclient.dto.PdfSelectionTableItem;\r\n\r\n/**\r\n * Abstract model for the selection table\r\n * @author Andrea Vacondio\r\n */\r\npublic abstract class AbstractPdfSelectionTableModel extends AbstractTableModel {\r\n\r\n    private static final long serialVersionUID = -4626256408853242065L;\r\n\r\n    //colums order\r\n    public final static int ROW_NUM = 0;\r\n\r\n    public final static int FILENAME = 1;\r\n\r\n    public final static int PATH = 2;\r\n\r\n    public final static int PAGES = 3;\r\n\r\n    public final static int PASSWORD = 4;\r\n\r\n    public final static int PDF_DOCUMENT_VERSION = 5;\r\n\r\n    public final static int PAGESELECTION = 6;\r\n\r\n    public final static int MAX_COLUMNS_NUMBER = 7;\r\n\r\n    public final static int DEFAULT_SHOWED_COLUMNS_NUMBER = 6;\r\n\r\n    public static final int DESCENDING = -1;\r\n\r\n    public static final int NOT_SORTED = 0;\r\n\r\n    public static final int ASCENDING = 1;\r\n\r\n    //colums names\r\n    private String[] columnNames;\r\n\r\n    //tooltips\r\n    private String[] toolTips;\r\n\r\n    private int showedColumns = DEFAULT_SHOWED_COLUMNS_NUMBER;\r\n\r\n    private int maxRowsNumber = JPdfSelectionPanel.UNLIMTED_SELECTABLE_FILE_NUMBER;\r\n\r\n    private boolean sortable = false;\r\n\r\n    public AbstractPdfSelectionTableModel() {\r\n        this.sortable = false;\r\n    }\r\n\r\n    /**\r\n     * @return the columnNames\r\n     */\r\n    public String[] getColumnNames() {\r\n        return columnNames;\r\n    }\r\n\r\n    /**\r\n     * @param toolTips the toolTips to set\r\n     */\r\n    public void setToolTips(String[] toolTips) {\r\n        this.toolTips = toolTips;\r\n    }\r\n\r\n    /**\r\n     * @return Number of showed columns\r\n     */\r\n    public int getColumnCount() {\r\n        return showedColumns;\r\n    }\r\n\r\n    /**\r\n     * @return the showedColumns\r\n     */\r\n    public int getShowedColumns() {\r\n        return showedColumns;\r\n    }\r\n\r\n    public Class<?> getColumnClass(int columnIndex) {\r\n        return String.class;\r\n    }\r\n\r\n    /**\r\n     * @param showedColumns the showedColumns to set (must be positive)\r\n     */\r\n    public void setShowedColumns(int showedColumns) {\r\n        if (showedColumns < 1) {\r\n            this.showedColumns = 1;\r\n        } else if (showedColumns > MAX_COLUMNS_NUMBER) {\r\n            this.showedColumns = MAX_COLUMNS_NUMBER;\r\n        } else {\r\n            this.showedColumns = showedColumns;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @return the maxRowsNumber\r\n     */\r\n    public int getMaxRowsNumber() {\r\n        return maxRowsNumber;\r\n    }\r\n\r\n    /**\r\n     * @param maxRowsNumber the maxRowsNumber to set (must be positive)\r\n     */\r\n    public void setMaxRowsNumber(int maxRowsNumber) {\r\n        if (maxRowsNumber < 1) {\r\n            this.maxRowsNumber = 1;\r\n        } else {\r\n            this.maxRowsNumber = maxRowsNumber;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Return true if the cell is editable\r\n     */\r\n    public boolean isCellEditable(int row, int column) {\r\n        return ((PAGESELECTION == column) || (PASSWORD == column));\r\n    }\r\n\r\n    /**\r\n     * <p> Return column name\r\n     *\r\n     * @param col Column number\r\n     * @return Column name\r\n     */\r\n    public String getColumnName(int col) {\r\n        return (col < columnNames.length) ? columnNames[col] : \"\";\r\n    }\r\n\r\n    /**\r\n     * @return Returns the toolTips.\r\n     */\r\n    public String[] getToolTips() {\r\n        return toolTips;\r\n    }\r\n\r\n    /**\r\n     * @param columnNames The columnNames to set.\r\n     */\r\n    public void setColumnNames(String[] columnNames) {\r\n        this.columnNames = columnNames;\r\n    }\r\n\r\n    /**\r\n     * @param sortable the sortable to set\r\n     */\r\n    protected void setSortable(boolean sortable) {\r\n        this.sortable = sortable;\r\n    }\r\n\r\n    /**\r\n     * @return the sortable\r\n     */\r\n    public boolean isSortable() {\r\n        return sortable;\r\n    }\r\n\r\n    /**\r\n     * @return rows of the model\r\n     */\r\n    public abstract PdfSelectionTableItem[] getRows();\r\n\r\n    /**\r\n     * <p>Remove a set of rows from the table data source and fire to Listeners\r\n     *\r\n     * @param rows rows number to remove from the data source\r\n     * @throws Exception if an exception occurs\r\n     */\r\n    public abstract void deleteRows(int[] rows) throws IndexOutOfBoundsException;\r\n\r\n    /**\r\n     * <p>Remove a row from the table data source and fire to Listeners\r\n     *\r\n     * @param row row number to remove from the data source\r\n     * @throws Exception if an exception occurs\r\n     */\r\n    public abstract void deleteRow(int row) throws IndexOutOfBoundsException;\r\n\r\n    /**\r\n     * Moves down a set of rows to the table data source and fire to Listeners\r\n     * @param rows Row numbers to move from the data source\r\n     */\r\n    public abstract void moveDownRows(int[] rows) throws IndexOutOfBoundsException;\r\n\r\n    /**\r\n     * Moves down a row to the table data source and fire to Listeners\r\n     * @param row Row number to remove from the data source\r\n     */\r\n    public abstract void moveDownRow(int row) throws IndexOutOfBoundsException;\r\n\r\n    /**\r\n     * Moves up a set of rows to the table data source and fire to Listeners\r\n     * @param rows Row numbers to move from the data source\r\n     */\r\n    public abstract void moveUpRows(int[] rows) throws IndexOutOfBoundsException;\r\n\r\n    /**\r\n     * Moves up a row to the table data source and fire to Listeners\r\n     * @param row Row number to move from the data source\r\n     */\r\n    public abstract void moveUpRow(int row) throws IndexOutOfBoundsException;\r\n\r\n    /**\r\n     * Add a row to the table data source if maxRowsNumber is not reached and fire to Listeners\r\n     * @param inputData <code>PdfSelectionTableItem</code> to add to the data source\r\n     */\r\n    public abstract void addRowAt(int index, PdfSelectionTableItem inputData);\r\n\r\n    /**\r\n     * Replace a row to the table data source and fire to Listeners\r\n     * @param index index to be replaced\r\n     * @param inputData new <code>PdfSelectionTableItem</code> to replace the data source\r\n     */\r\n    public abstract void updateRowAt(int index, PdfSelectionTableItem inputData);\r\n\r\n    /**\r\n     * Add a row to the table data source if maxRowsNumber is not reached and fire to Listeners\r\n     * @param inputData <code>PdfSelectionTableItem</code> to add to the data source\r\n     */\r\n    public abstract void addRow(PdfSelectionTableItem inputData);\r\n\r\n    /**\r\n     * Removes any data source for the model\r\n     */\r\n    public abstract void clearData();\r\n\r\n    /**\r\n     * set data source for the model\r\n     * @param inputData array <code>PdfSelectionTableItem[]</code> as data source\r\n     */\r\n    public abstract void setData(PdfSelectionTableItem[] inputData);\r\n\r\n    /**\r\n     * Return the value at row\r\n     */\r\n    public abstract PdfSelectionTableItem getRow(int row);\r\n\r\n    /**\r\n     * ******************sort features **********\r\n     */\r\n    /**\r\n     * Sort the data\r\n     */\r\n    public abstract void sort();\r\n\r\n    /**\r\n     * @return the sortingState\r\n     */\r\n    public abstract SortingState getSortingState();\r\n\r\n    /**\r\n     * sets the sorting state\r\n     * @param sortingState\r\n     */\r\n    public abstract void setSortingState(SortingState sortingState);\r\n\r\n    /**\r\n     * Model of a sorting state (column and sort type)\r\n     * @author Andrea Vacondio\r\n     */\r\n    public class SortingState implements Serializable {\r\n\r\n        private static final long serialVersionUID = 3051421044350063901L;\r\n\r\n        private int col = -1;\r\n\r\n        private int sortType = NOT_SORTED;\r\n\r\n        public SortingState() {\r\n        }\r\n\r\n        /**\r\n         * @param col\r\n         * @param sortType\r\n         */\r\n        public SortingState(int col, int sortType) {\r\n            this.col = col;\r\n            this.sortType = sortType;\r\n        }\r\n\r\n        /**\r\n         * @return the col\r\n         */\r\n        public int getCol() {\r\n            return col;\r\n        }\r\n\r\n        /**\r\n         * @param col the col to set\r\n         */\r\n        public void setCol(int col) {\r\n            this.col = col;\r\n        }\r\n\r\n        /**\r\n         * @return the sortType\r\n         */\r\n        public int getSortType() {\r\n            return sortType;\r\n        }\r\n\r\n        /**\r\n         * @param sortType the sortType to set\r\n         */\r\n        public void setSortType(int sortType) {\r\n            this.sortType = sortType;\r\n        }\r\n\r\n        /**\r\n         * @return true if sorted\r\n         */\r\n        public boolean isSorted() {\r\n            return (sortType == DESCENDING || sortType == ASCENDING);\r\n        }\r\n\r\n        /* (non-Javadoc)\r\n\t\t * @see java.lang.Object#hashCode()\r\n\t\t */\r\n        public int hashCode() {\r\n            final int prime = 31;\r\n            int result = 1;\r\n            result = prime * result + col;\r\n            result = prime * result + sortType;\r\n            return result;\r\n        }\r\n\r\n        /* (non-Javadoc)\r\n\t\t * @see java.lang.Object#equals(java.lang.Object)\r\n\t\t */\r\n        public boolean equals(Object obj) {\r\n            if (this == obj) {\r\n                return true;\r\n            }\r\n            if (obj == null)\r\n                return false;\r\n            if (getClass() != obj.getClass())\r\n                return false;\r\n            final SortingState other = (SortingState) obj;\r\n            if (col != other.col)\r\n                return false;\r\n            if (sortType != other.sortType)\r\n                return false;\r\n            return true;\r\n        }\r\n\r\n        public String toString() {\r\n            return \"[col=\" + col + \" sortType=\" + sortType + \"]\";\r\n        }\r\n    }\r\n}\r\n",
		"id": "EvoSuiteBenchmark/109_pdfsam/src/main/java/org/pdfsam/guiclient/commons/models/AbstractPdfSelectionTableModelTest0.java",
		"test_prompt": "// AbstractPdfSelectionTableModelTest0.java\npackage org.pdfsam.guiclient.commons.models;\n\nimport java.io.Serializable;\nimport javax.swing.table.AbstractTableModel;\nimport org.pdfsam.guiclient.commons.panels.JPdfSelectionPanel;\nimport org.pdfsam.guiclient.dto.PdfSelectionTableItem;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link AbstractPdfSelectionTableModel}.\n* It contains ten unit test cases for the {@link AbstractPdfSelectionTableModel#isCellEditable(int, int)} method.\n*/\nclass AbstractPdfSelectionTableModelTest0 {"
	},
	{
		"original_code": "// AbstractPdfSelectionTableModel.java\n/*\r\n * Created on 20-Dec-2007\r\n * Copyright (C) 2007 by Andrea Vacondio.\r\n *\r\n * This program is free software; you can redistribute it and/or modify it under the terms of the \r\n * GNU General Public License as published by the Free Software Foundation; \r\n * either version 2 of the License.\r\n * This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; \r\n * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. \r\n * See the GNU General Public License for more details.\r\n * You should have received a copy of the GNU General Public License along with this program; \r\n * if not, write to the Free Software Foundation, Inc., \r\n *  59 Temple Place, Suite 330, Boston, MA 02111-1307 USA\r\n */\r\npackage org.pdfsam.guiclient.commons.models;\r\n\r\nimport java.io.Serializable;\r\nimport javax.swing.table.AbstractTableModel;\r\nimport org.pdfsam.guiclient.commons.panels.JPdfSelectionPanel;\r\nimport org.pdfsam.guiclient.dto.PdfSelectionTableItem;\r\n\r\n/**\r\n * Abstract model for the selection table\r\n * @author Andrea Vacondio\r\n */\r\npublic abstract class AbstractPdfSelectionTableModel extends AbstractTableModel {\r\n\r\n    private static final long serialVersionUID = -4626256408853242065L;\r\n\r\n    //colums order\r\n    public final static int ROW_NUM = 0;\r\n\r\n    public final static int FILENAME = 1;\r\n\r\n    public final static int PATH = 2;\r\n\r\n    public final static int PAGES = 3;\r\n\r\n    public final static int PASSWORD = 4;\r\n\r\n    public final static int PDF_DOCUMENT_VERSION = 5;\r\n\r\n    public final static int PAGESELECTION = 6;\r\n\r\n    public final static int MAX_COLUMNS_NUMBER = 7;\r\n\r\n    public final static int DEFAULT_SHOWED_COLUMNS_NUMBER = 6;\r\n\r\n    public static final int DESCENDING = -1;\r\n\r\n    public static final int NOT_SORTED = 0;\r\n\r\n    public static final int ASCENDING = 1;\r\n\r\n    //colums names\r\n    private String[] columnNames;\r\n\r\n    //tooltips\r\n    private String[] toolTips;\r\n\r\n    private int showedColumns = DEFAULT_SHOWED_COLUMNS_NUMBER;\r\n\r\n    private int maxRowsNumber = JPdfSelectionPanel.UNLIMTED_SELECTABLE_FILE_NUMBER;\r\n\r\n    private boolean sortable = false;\r\n\r\n    public AbstractPdfSelectionTableModel() {\r\n        this.sortable = false;\r\n    }\r\n\r\n    /**\r\n     * @return the columnNames\r\n     */\r\n    public String[] getColumnNames() {\r\n        return columnNames;\r\n    }\r\n\r\n    /**\r\n     * @param toolTips the toolTips to set\r\n     */\r\n    public void setToolTips(String[] toolTips) {\r\n        this.toolTips = toolTips;\r\n    }\r\n\r\n    /**\r\n     * @return Number of showed columns\r\n     */\r\n    public int getColumnCount() {\r\n        return showedColumns;\r\n    }\r\n\r\n    /**\r\n     * @return the showedColumns\r\n     */\r\n    public int getShowedColumns() {\r\n        return showedColumns;\r\n    }\r\n\r\n    public Class<?> getColumnClass(int columnIndex) {\r\n        return String.class;\r\n    }\r\n\r\n    /**\r\n     * @param showedColumns the showedColumns to set (must be positive)\r\n     */\r\n    public void setShowedColumns(int showedColumns) {\r\n        if (showedColumns < 1) {\r\n            this.showedColumns = 1;\r\n        } else if (showedColumns > MAX_COLUMNS_NUMBER) {\r\n            this.showedColumns = MAX_COLUMNS_NUMBER;\r\n        } else {\r\n            this.showedColumns = showedColumns;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @return the maxRowsNumber\r\n     */\r\n    public int getMaxRowsNumber() {\r\n        return maxRowsNumber;\r\n    }\r\n\r\n    /**\r\n     * @param maxRowsNumber the maxRowsNumber to set (must be positive)\r\n     */\r\n    public void setMaxRowsNumber(int maxRowsNumber) {\r\n        if (maxRowsNumber < 1) {\r\n            this.maxRowsNumber = 1;\r\n        } else {\r\n            this.maxRowsNumber = maxRowsNumber;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Return true if the cell is editable\r\n     */\r\n    public boolean isCellEditable(int row, int column) {\r\n        return ((PAGESELECTION == column) || (PASSWORD == column));\r\n    }\r\n\r\n    /**\r\n     * <p> Return column name\r\n     *\r\n     * @param col Column number\r\n     * @return Column name\r\n     */\r\n    public String getColumnName(int col) {\r\n        return (col < columnNames.length) ? columnNames[col] : \"\";\r\n    }\r\n\r\n    /**\r\n     * @return Returns the toolTips.\r\n     */\r\n    public String[] getToolTips() {\r\n        return toolTips;\r\n    }\r\n\r\n    /**\r\n     * @param columnNames The columnNames to set.\r\n     */\r\n    public void setColumnNames(String[] columnNames) {\r\n        this.columnNames = columnNames;\r\n    }\r\n\r\n    /**\r\n     * @param sortable the sortable to set\r\n     */\r\n    protected void setSortable(boolean sortable) {\r\n        this.sortable = sortable;\r\n    }\r\n\r\n    /**\r\n     * @return the sortable\r\n     */\r\n    public boolean isSortable() {\r\n        return sortable;\r\n    }\r\n\r\n    /**\r\n     * @return rows of the model\r\n     */\r\n    public abstract PdfSelectionTableItem[] getRows();\r\n\r\n    /**\r\n     * <p>Remove a set of rows from the table data source and fire to Listeners\r\n     *\r\n     * @param rows rows number to remove from the data source\r\n     * @throws Exception if an exception occurs\r\n     */\r\n    public abstract void deleteRows(int[] rows) throws IndexOutOfBoundsException;\r\n\r\n    /**\r\n     * <p>Remove a row from the table data source and fire to Listeners\r\n     *\r\n     * @param row row number to remove from the data source\r\n     * @throws Exception if an exception occurs\r\n     */\r\n    public abstract void deleteRow(int row) throws IndexOutOfBoundsException;\r\n\r\n    /**\r\n     * Moves down a set of rows to the table data source and fire to Listeners\r\n     * @param rows Row numbers to move from the data source\r\n     */\r\n    public abstract void moveDownRows(int[] rows) throws IndexOutOfBoundsException;\r\n\r\n    /**\r\n     * Moves down a row to the table data source and fire to Listeners\r\n     * @param row Row number to remove from the data source\r\n     */\r\n    public abstract void moveDownRow(int row) throws IndexOutOfBoundsException;\r\n\r\n    /**\r\n     * Moves up a set of rows to the table data source and fire to Listeners\r\n     * @param rows Row numbers to move from the data source\r\n     */\r\n    public abstract void moveUpRows(int[] rows) throws IndexOutOfBoundsException;\r\n\r\n    /**\r\n     * Moves up a row to the table data source and fire to Listeners\r\n     * @param row Row number to move from the data source\r\n     */\r\n    public abstract void moveUpRow(int row) throws IndexOutOfBoundsException;\r\n\r\n    /**\r\n     * Add a row to the table data source if maxRowsNumber is not reached and fire to Listeners\r\n     * @param inputData <code>PdfSelectionTableItem</code> to add to the data source\r\n     */\r\n    public abstract void addRowAt(int index, PdfSelectionTableItem inputData);\r\n\r\n    /**\r\n     * Replace a row to the table data source and fire to Listeners\r\n     * @param index index to be replaced\r\n     * @param inputData new <code>PdfSelectionTableItem</code> to replace the data source\r\n     */\r\n    public abstract void updateRowAt(int index, PdfSelectionTableItem inputData);\r\n\r\n    /**\r\n     * Add a row to the table data source if maxRowsNumber is not reached and fire to Listeners\r\n     * @param inputData <code>PdfSelectionTableItem</code> to add to the data source\r\n     */\r\n    public abstract void addRow(PdfSelectionTableItem inputData);\r\n\r\n    /**\r\n     * Removes any data source for the model\r\n     */\r\n    public abstract void clearData();\r\n\r\n    /**\r\n     * set data source for the model\r\n     * @param inputData array <code>PdfSelectionTableItem[]</code> as data source\r\n     */\r\n    public abstract void setData(PdfSelectionTableItem[] inputData);\r\n\r\n    /**\r\n     * Return the value at row\r\n     */\r\n    public abstract PdfSelectionTableItem getRow(int row);\r\n\r\n    /**\r\n     * ******************sort features **********\r\n     */\r\n    /**\r\n     * Sort the data\r\n     */\r\n    public abstract void sort();\r\n\r\n    /**\r\n     * @return the sortingState\r\n     */\r\n    public abstract SortingState getSortingState();\r\n\r\n    /**\r\n     * sets the sorting state\r\n     * @param sortingState\r\n     */\r\n    public abstract void setSortingState(SortingState sortingState);\r\n\r\n    /**\r\n     * Model of a sorting state (column and sort type)\r\n     * @author Andrea Vacondio\r\n     */\r\n    public class SortingState implements Serializable {\r\n\r\n        private static final long serialVersionUID = 3051421044350063901L;\r\n\r\n        private int col = -1;\r\n\r\n        private int sortType = NOT_SORTED;\r\n\r\n        public SortingState() {\r\n        }\r\n\r\n        /**\r\n         * @param col\r\n         * @param sortType\r\n         */\r\n        public SortingState(int col, int sortType) {\r\n            this.col = col;\r\n            this.sortType = sortType;\r\n        }\r\n\r\n        /**\r\n         * @return the col\r\n         */\r\n        public int getCol() {\r\n            return col;\r\n        }\r\n\r\n        /**\r\n         * @param col the col to set\r\n         */\r\n        public void setCol(int col) {\r\n            this.col = col;\r\n        }\r\n\r\n        /**\r\n         * @return the sortType\r\n         */\r\n        public int getSortType() {\r\n            return sortType;\r\n        }\r\n\r\n        /**\r\n         * @param sortType the sortType to set\r\n         */\r\n        public void setSortType(int sortType) {\r\n            this.sortType = sortType;\r\n        }\r\n\r\n        /**\r\n         * @return true if sorted\r\n         */\r\n        public boolean isSorted() {\r\n            return (sortType == DESCENDING || sortType == ASCENDING);\r\n        }\r\n\r\n        /* (non-Javadoc)\r\n\t\t * @see java.lang.Object#hashCode()\r\n\t\t */\r\n        public int hashCode() {\r\n            final int prime = 31;\r\n            int result = 1;\r\n            result = prime * result + col;\r\n            result = prime * result + sortType;\r\n            return result;\r\n        }\r\n\r\n        /* (non-Javadoc)\r\n\t\t * @see java.lang.Object#equals(java.lang.Object)\r\n\t\t */\r\n        public boolean equals(Object obj) {\r\n            if (this == obj) {\r\n                return true;\r\n            }\r\n            if (obj == null)\r\n                return false;\r\n            if (getClass() != obj.getClass())\r\n                return false;\r\n            final SortingState other = (SortingState) obj;\r\n            if (col != other.col)\r\n                return false;\r\n            if (sortType != other.sortType)\r\n                return false;\r\n            return true;\r\n        }\r\n\r\n        public String toString() {\r\n            return \"[col=\" + col + \" sortType=\" + sortType + \"]\";\r\n        }\r\n    }\r\n}\r\n",
		"id": "EvoSuiteBenchmark/109_pdfsam/src/main/java/org/pdfsam/guiclient/commons/models/AbstractPdfSelectionTableModelTest1.java",
		"test_prompt": "// AbstractPdfSelectionTableModelTest1.java\npackage org.pdfsam.guiclient.commons.models;\n\nimport java.io.Serializable;\nimport javax.swing.table.AbstractTableModel;\nimport org.pdfsam.guiclient.commons.panels.JPdfSelectionPanel;\nimport org.pdfsam.guiclient.dto.PdfSelectionTableItem;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link AbstractPdfSelectionTableModel}.\n* It contains ten unit test cases for the {@link AbstractPdfSelectionTableModel#isSortable()} method.\n*/\nclass AbstractPdfSelectionTableModelTest1 {"
	},
	{
		"original_code": "// VisualListModel.java\n/*\r\n * Created on 18-Jun-2008\r\n * Copyright (C) 2008 by Andrea Vacondio.\r\n *\r\n * This program is free software; you can redistribute it and/or modify it under the terms of the \r\n * GNU General Public License as published by the Free Software Foundation; \r\n * either version 2 of the License.\r\n * This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; \r\n * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. \r\n * See the GNU General Public License for more details.\r\n * You should have received a copy of the GNU General Public License along with this program; \r\n * if not, write to the Free Software Foundation, Inc., \r\n *  59 Temple Place, Suite 330, Boston, MA 02111-1307 USA\r\n */\r\npackage org.pdfsam.guiclient.commons.models;\r\n\r\nimport java.util.ArrayList;\r\nimport java.util.Collection;\r\nimport java.util.Collections;\r\nimport java.util.List;\r\nimport java.util.Vector;\r\nimport javax.swing.AbstractListModel;\r\nimport org.pdfsam.guiclient.dto.VisualPageListItem;\r\n\r\n/**\r\n * Model for the JList in the JVisualPdfPageSelectionPanel\r\n * @author Andrea Vacondio\r\n */\r\npublic class VisualListModel extends AbstractListModel {\r\n\r\n    private static final long serialVersionUID = -1468591826451724954L;\r\n\r\n    protected Vector<VisualPageListItem> data = new Vector<VisualPageListItem>();\r\n\r\n    public Object getElementAt(int index) {\r\n        VisualPageListItem retVal = null;\r\n        if (index < data.size()) {\r\n            retVal = (VisualPageListItem) (data.get(index));\r\n        }\r\n        return retVal;\r\n    }\r\n\r\n    /**\r\n     * @return data size\r\n     */\r\n    public int getSize() {\r\n        return (data != null) ? data.size() : 0;\r\n    }\r\n\r\n    /**\r\n     * set data source for the model\r\n     * @param inputData array <code>VisualPageListItem[]</code> as data source\r\n     */\r\n    public void setData(VisualPageListItem[] inputData) {\r\n        clearData();\r\n        int inputDataSize = inputData.length;\r\n        if (inputDataSize > 0) {\r\n            for (int i = 0; i < inputDataSize; i++) {\r\n                data.add(inputData[i]);\r\n            }\r\n            fireIntervalAdded(this, 0, inputDataSize - 1);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * set data source for the model\r\n     * @param inputData Vector of VisualPageListItem\r\n     */\r\n    public void setData(Vector<VisualPageListItem> inputData) {\r\n        clearData();\r\n        int inputDataSize = inputData.size();\r\n        if (inputDataSize > 0) {\r\n            this.data = inputData;\r\n            fireIntervalAdded(this, 0, inputDataSize - 1);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Removes any data source for the model\r\n     */\r\n    public void clearData() {\r\n        int dataSize = data.size();\r\n        data.clear();\r\n        if (dataSize > 0) {\r\n            fireIntervalRemoved(this, 0, dataSize - 1);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * removes the element at the index\r\n     * @param index\r\n     * @param physicalDeletion if true the element is removed, if false it's set as \"deleted\" (rendered with a red cross)\r\n     */\r\n    public void removeElementAt(int index, boolean physicalDeletion) {\r\n        if (physicalDeletion) {\r\n            data.remove(index);\r\n        } else {\r\n            (data.get(index)).setDeleted(true);\r\n        }\r\n        fireIntervalRemoved(this, index, index);\r\n    }\r\n\r\n    /**\r\n     * <p>Remove a set of rows from the list data source and fire to Listeners\r\n     *\r\n     * @param rows rows number to remove from the data source\r\n     * @param physicalDeletion if true the element is removed, if false it's set as \"deleted\" (rendered with a red cross)\r\n     * @throws Exception if an exception occurs\r\n     */\r\n    public void removeElements(int[] rows, boolean physicalDeletion) throws IndexOutOfBoundsException {\r\n        if (rows.length > 0 && rows.length <= data.size()) {\r\n            if (physicalDeletion) {\r\n                data.subList(rows[0], rows[rows.length - 1] + 1).clear();\r\n            } else {\r\n                for (int i = 0; i < rows.length; i++) {\r\n                    (data.get(rows[i])).setDeleted(true);\r\n                }\r\n            }\r\n            this.fireIntervalRemoved(this, rows[0], rows[rows.length - 1]);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * <p>Remove a set of rows from the list data source and fire to Listeners\r\n     *\r\n     * @param fromIndex remove from the index (inclusive)\r\n     * @param toIndex remove to the index (inclusive)\r\n     * @param physicalDeletion if true the element is removed, if false it's set as \"deleted\" (rendered with a red cross)\r\n     * @throws Exception if an exception occurs\r\n     */\r\n    public void removeElements(int fromIndex, int toIndex, boolean physicalDeletion) throws IndexOutOfBoundsException {\r\n        if (fromIndex >= 0 && toIndex < data.size() && fromIndex <= toIndex) {\r\n            if (physicalDeletion) {\r\n                data.subList(fromIndex, toIndex + 1).clear();\r\n            } else {\r\n                for (int i = fromIndex; i < toIndex; i++) {\r\n                    (data.get(i)).setDeleted(true);\r\n                }\r\n            }\r\n            this.fireIntervalRemoved(this, fromIndex, toIndex);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Add an item to the model and fire to Listeners\r\n     * @param index index to add to\r\n     * @param inputData <code>VisualPageListItem</code> to add to the data source\r\n     */\r\n    public void addElementAt(VisualPageListItem inputData, int index) {\r\n        if (inputData != null) {\r\n            data.add(index, inputData);\r\n            fireIntervalAdded(this, index, index);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Add an item to the model and fire to Listeners\r\n     * @param inputData <code>VisualPageListItem</code> to add to the data source\r\n     */\r\n    public void addElement(VisualPageListItem inputData) {\r\n        data.add(inputData);\r\n        fireIntervalAdded(this, data.size(), data.size());\r\n    }\r\n\r\n    /**\r\n     * delegated to the Vector addAll\r\n     * @param c\r\n     * @see Vector#addAll(Collection)\r\n     */\r\n    public void addAllElements(Collection<VisualPageListItem> c) {\r\n        if (c != null) {\r\n            int i = 0;\r\n            for (VisualPageListItem element : c) {\r\n                data.add(element);\r\n                i++;\r\n            }\r\n            fireIntervalAdded(this, data.size(), data.size() + i - 1);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * same as addAllElements. Appends elements to the end\r\n     * @param c\r\n     */\r\n    public void appendAllElements(Collection<VisualPageListItem> c) {\r\n        addAllElements(c);\r\n    }\r\n\r\n    /**\r\n     * Add elements at the beginning\r\n     * @param c\r\n     */\r\n    public void prependAllElements(Collection<VisualPageListItem> c) {\r\n        if (c != null && c.size() > 0) {\r\n            data.addAll(0, c);\r\n            fireIntervalAdded(this, 0, c.size() - 1);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Add elements in c at the given index\r\n     * @param index\r\n     * @param c\r\n     */\r\n    public void addAllElements(int index, Collection<VisualPageListItem> c) {\r\n        if (c != null && index >= 0 && index <= data.size()) {\r\n            int i = index;\r\n            for (VisualPageListItem element : c) {\r\n                data.add(i, element);\r\n                i++;\r\n            }\r\n            fireIntervalAdded(this, index, i - 1);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * delegated to the Vector subList\r\n     * @param fromIndex start inclusive\r\n     * @param toIndex end exclusive\r\n     * @return null if limits are not corrected\r\n     * @see Vector#subList(int, int)\r\n     */\r\n    public Collection<VisualPageListItem> subList(int fromIndex, int toIndex) {\r\n        return subList(fromIndex, toIndex, false);\r\n    }\r\n\r\n    /**\r\n     * @param fromIndex start inclusive\r\n     * @param toIndex end exclusive\r\n     * @param newInstance if false delegates to the Vector#subList(int, int) if true return a new Vector\r\n     * @return a portion of the data Vector, null if limits are not corrected\r\n     * @see Vector#subList(int, int)\r\n     */\r\n    public Collection<VisualPageListItem> subList(int fromIndex, int toIndex, boolean newInstance) {\r\n        Collection<VisualPageListItem> retVal = null;\r\n        if (fromIndex >= 0 && toIndex <= data.size()) {\r\n            if (newInstance) {\r\n                List<VisualPageListItem> itemsList = data.subList(fromIndex, toIndex);\r\n                if (itemsList != null && itemsList.size() > 0) {\r\n                    retVal = new Vector<VisualPageListItem>(itemsList.size());\r\n                    for (VisualPageListItem currItem : itemsList) {\r\n                        retVal.add((VisualPageListItem) currItem.clone());\r\n                    }\r\n                } else {\r\n                    retVal = new Vector<VisualPageListItem>();\r\n                }\r\n            } else {\r\n                retVal = data.subList(fromIndex, toIndex);\r\n            }\r\n        }\r\n        return retVal;\r\n    }\r\n\r\n    /**\r\n     * @return items of the model\r\n     */\r\n    public VisualPageListItem[] getElements() {\r\n        VisualPageListItem[] retVal = null;\r\n        if (data != null) {\r\n            retVal = (VisualPageListItem[]) data.toArray(new VisualPageListItem[data.size()]);\r\n        }\r\n        return retVal;\r\n    }\r\n\r\n    /**\r\n     * Replace an element of the model and fire to Listeners\r\n     * @param index index to be replaced\r\n     * @param inputData new <code>VisualPageListItem</code> to replace the data source\r\n     */\r\n    public void updateElementAt(int index, VisualPageListItem inputData) {\r\n        if (inputData != null && index >= 0 && index < data.size()) {\r\n            data.set(index, inputData);\r\n            this.fireContentsChanged(this, index, index);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Look for the inputData and repaint it if found\r\n     * @param inputData\r\n     */\r\n    public void elementChanged(VisualPageListItem inputData) {\r\n        if (inputData != null && data.size() > 0) {\r\n            int position = data.indexOf(inputData);\r\n            if (position >= 0) {\r\n                this.fireContentsChanged(this, position, position);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Repaints all the elements\r\n     */\r\n    public void elementsChanged() {\r\n        this.fireContentsChanged(this, 0, data.size());\r\n    }\r\n\r\n    /**\r\n     * Undelete the given elements\r\n     * @param indexes\r\n     * @throws IndexOutOfBoundsException\r\n     */\r\n    public void undeleteElements(int[] indexes) throws IndexOutOfBoundsException {\r\n        if (indexes.length > 0 && indexes.length <= data.size()) {\r\n            for (int i = 0; i < indexes.length; i++) {\r\n                (data.get(indexes[i])).setDeleted(false);\r\n            }\r\n            fireContentsChanged(this, indexes[0] - 1, indexes[indexes.length - 1]);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Reverse the given elements\r\n     * @param indexes\r\n     * @throws IndexOutOfBoundsException\r\n     */\r\n    public void reverseElements(int[] indexes) throws IndexOutOfBoundsException {\r\n        if (indexes.length > 0 && indexes.length <= data.size()) {\r\n            ArrayList<VisualPageListItem> items = new ArrayList<VisualPageListItem>(data.size());\r\n            for (int i = 0; i < indexes.length; i++) {\r\n                items.add(data.get(indexes[i]));\r\n            }\r\n            Collections.reverse(items);\r\n            for (int i = 0; i < indexes.length; i++) {\r\n                data.set(indexes[i], items.get(i));\r\n            }\r\n            fireContentsChanged(this, indexes[0] - 1, indexes[indexes.length - 1]);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * rotates the given elements\r\n     * @param indexes\r\n     * @throws IndexOutOfBoundsException\r\n     */\r\n    public void rotateClockwiseElements(int[] indexes) throws IndexOutOfBoundsException {\r\n        if (indexes.length > 0 && indexes.length <= data.size()) {\r\n            for (int i = 0; i < indexes.length; i++) {\r\n                VisualPageListItem item = data.get(indexes[i]);\r\n                item.rotateClockwise();\r\n            }\r\n            fireContentsChanged(this, indexes[0] - 1, indexes[indexes.length - 1]);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * rotates anti clockwise the given elements\r\n     * @param indexes\r\n     * @throws IndexOutOfBoundsException\r\n     */\r\n    public void rotateAnticlockwiseElements(int[] indexes) throws IndexOutOfBoundsException {\r\n        if (indexes.length > 0 && indexes.length <= data.size()) {\r\n            for (int i = 0; i < indexes.length; i++) {\r\n                VisualPageListItem item = data.get(indexes[i]);\r\n                item.rotateAnticlockwise();\r\n            }\r\n            fireContentsChanged(this, indexes[0] - 1, indexes[indexes.length - 1]);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Moves up a item at the given index fire to Listeners\r\n     * @param index element index to move from the data source\r\n     */\r\n    public void moveUpIndex(int index) throws IndexOutOfBoundsException {\r\n        if (index >= 1 && index < (data.size())) {\r\n            VisualPageListItem tmpElement = data.get(index);\r\n            data.set(index, data.get((index - 1)));\r\n            data.set((index - 1), tmpElement);\r\n            fireContentsChanged(this, index - 1, index);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Moves up a set of items at the given indexes\r\n     * @param indexes Indexes to move from the data source\r\n     */\r\n    public void moveUpIndexes(int[] indexes) throws IndexOutOfBoundsException {\r\n        if (indexes.length > 0 && indexes.length < data.size()) {\r\n            //no move up if i'm selecting the first element of the table\r\n            if (indexes[0] > 0) {\r\n                VisualPageListItem tmpElement = data.get(indexes[0] - 1);\r\n                for (int i = 0; i < indexes.length; i++) {\r\n                    if (indexes[i] > 0) {\r\n                        data.set(indexes[i] - 1, data.get(indexes[i]));\r\n                    }\r\n                }\r\n                data.set(indexes[indexes.length - 1], tmpElement);\r\n                fireContentsChanged(this, indexes[0] - 1, indexes[indexes.length - 1]);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Moves down a item at the given index fire to Listeners\r\n     * @param index element index to move from the data source\r\n     */\r\n    public void moveDownIndex(int index) throws IndexOutOfBoundsException {\r\n        if (index >= 0 && index < (data.size() - 1)) {\r\n            VisualPageListItem tmpElement = data.get(index);\r\n            data.set(index, data.get((index + 1)));\r\n            data.set((index + 1), tmpElement);\r\n            fireContentsChanged(this, index, index + 1);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Moves down a set of items at the given indexes\r\n     * @param indexes Indexes to move from the data source\r\n     */\r\n    public void moveDownIndexes(int[] indexes) throws IndexOutOfBoundsException {\r\n        if (indexes.length > 0 && indexes.length < data.size()) {\r\n            //no move down if i'm selecting the last element of the table\r\n            if (indexes[indexes.length - 1] < (data.size() - 1)) {\r\n                VisualPageListItem tmpElement = data.get(indexes[indexes.length - 1] + 1);\r\n                for (int i = (indexes.length - 1); i >= 0; i--) {\r\n                    if (indexes[indexes.length - 1] < (data.size() - 1)) {\r\n                        data.set(indexes[i] + 1, data.get(indexes[i]));\r\n                    }\r\n                }\r\n                data.set(indexes[0], tmpElement);\r\n                fireContentsChanged(this, indexes[0], indexes[indexes.length - 1] + 1);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @return a List<VisualPageListItem> of elements with the isDeleted=false, null if there are no elements\r\n     */\r\n    public List<VisualPageListItem> getValidElements() {\r\n        ArrayList<VisualPageListItem> retVal = null;\r\n        if (data != null && data.size() > 0) {\r\n            retVal = new ArrayList<VisualPageListItem>(data.size());\r\n            for (int i = 0; i < data.size(); i++) {\r\n                if (!(data.get(i)).isDeleted()) {\r\n                    retVal.add(data.get(i));\r\n                }\r\n            }\r\n        }\r\n        return retVal;\r\n    }\r\n}\r\n",
		"id": "EvoSuiteBenchmark/109_pdfsam/src/main/java/org/pdfsam/guiclient/commons/models/VisualListModelTest0.java",
		"test_prompt": "// VisualListModelTest0.java\npackage org.pdfsam.guiclient.commons.models;\n\nimport java.util.ArrayList;\nimport java.util.Collection;\nimport java.util.Collections;\nimport java.util.List;\nimport java.util.Vector;\nimport javax.swing.AbstractListModel;\nimport org.pdfsam.guiclient.dto.VisualPageListItem;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link VisualListModel}.\n* It contains ten unit test cases for the {@link VisualListModel#subList(int, int)} method.\n*/\nclass VisualListModelTest0 {"
	},
	{
		"original_code": "// VisualListModel.java\n/*\r\n * Created on 18-Jun-2008\r\n * Copyright (C) 2008 by Andrea Vacondio.\r\n *\r\n * This program is free software; you can redistribute it and/or modify it under the terms of the \r\n * GNU General Public License as published by the Free Software Foundation; \r\n * either version 2 of the License.\r\n * This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; \r\n * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. \r\n * See the GNU General Public License for more details.\r\n * You should have received a copy of the GNU General Public License along with this program; \r\n * if not, write to the Free Software Foundation, Inc., \r\n *  59 Temple Place, Suite 330, Boston, MA 02111-1307 USA\r\n */\r\npackage org.pdfsam.guiclient.commons.models;\r\n\r\nimport java.util.ArrayList;\r\nimport java.util.Collection;\r\nimport java.util.Collections;\r\nimport java.util.List;\r\nimport java.util.Vector;\r\nimport javax.swing.AbstractListModel;\r\nimport org.pdfsam.guiclient.dto.VisualPageListItem;\r\n\r\n/**\r\n * Model for the JList in the JVisualPdfPageSelectionPanel\r\n * @author Andrea Vacondio\r\n */\r\npublic class VisualListModel extends AbstractListModel {\r\n\r\n    private static final long serialVersionUID = -1468591826451724954L;\r\n\r\n    protected Vector<VisualPageListItem> data = new Vector<VisualPageListItem>();\r\n\r\n    public Object getElementAt(int index) {\r\n        VisualPageListItem retVal = null;\r\n        if (index < data.size()) {\r\n            retVal = (VisualPageListItem) (data.get(index));\r\n        }\r\n        return retVal;\r\n    }\r\n\r\n    /**\r\n     * @return data size\r\n     */\r\n    public int getSize() {\r\n        return (data != null) ? data.size() : 0;\r\n    }\r\n\r\n    /**\r\n     * set data source for the model\r\n     * @param inputData array <code>VisualPageListItem[]</code> as data source\r\n     */\r\n    public void setData(VisualPageListItem[] inputData) {\r\n        clearData();\r\n        int inputDataSize = inputData.length;\r\n        if (inputDataSize > 0) {\r\n            for (int i = 0; i < inputDataSize; i++) {\r\n                data.add(inputData[i]);\r\n            }\r\n            fireIntervalAdded(this, 0, inputDataSize - 1);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * set data source for the model\r\n     * @param inputData Vector of VisualPageListItem\r\n     */\r\n    public void setData(Vector<VisualPageListItem> inputData) {\r\n        clearData();\r\n        int inputDataSize = inputData.size();\r\n        if (inputDataSize > 0) {\r\n            this.data = inputData;\r\n            fireIntervalAdded(this, 0, inputDataSize - 1);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Removes any data source for the model\r\n     */\r\n    public void clearData() {\r\n        int dataSize = data.size();\r\n        data.clear();\r\n        if (dataSize > 0) {\r\n            fireIntervalRemoved(this, 0, dataSize - 1);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * removes the element at the index\r\n     * @param index\r\n     * @param physicalDeletion if true the element is removed, if false it's set as \"deleted\" (rendered with a red cross)\r\n     */\r\n    public void removeElementAt(int index, boolean physicalDeletion) {\r\n        if (physicalDeletion) {\r\n            data.remove(index);\r\n        } else {\r\n            (data.get(index)).setDeleted(true);\r\n        }\r\n        fireIntervalRemoved(this, index, index);\r\n    }\r\n\r\n    /**\r\n     * <p>Remove a set of rows from the list data source and fire to Listeners\r\n     *\r\n     * @param rows rows number to remove from the data source\r\n     * @param physicalDeletion if true the element is removed, if false it's set as \"deleted\" (rendered with a red cross)\r\n     * @throws Exception if an exception occurs\r\n     */\r\n    public void removeElements(int[] rows, boolean physicalDeletion) throws IndexOutOfBoundsException {\r\n        if (rows.length > 0 && rows.length <= data.size()) {\r\n            if (physicalDeletion) {\r\n                data.subList(rows[0], rows[rows.length - 1] + 1).clear();\r\n            } else {\r\n                for (int i = 0; i < rows.length; i++) {\r\n                    (data.get(rows[i])).setDeleted(true);\r\n                }\r\n            }\r\n            this.fireIntervalRemoved(this, rows[0], rows[rows.length - 1]);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * <p>Remove a set of rows from the list data source and fire to Listeners\r\n     *\r\n     * @param fromIndex remove from the index (inclusive)\r\n     * @param toIndex remove to the index (inclusive)\r\n     * @param physicalDeletion if true the element is removed, if false it's set as \"deleted\" (rendered with a red cross)\r\n     * @throws Exception if an exception occurs\r\n     */\r\n    public void removeElements(int fromIndex, int toIndex, boolean physicalDeletion) throws IndexOutOfBoundsException {\r\n        if (fromIndex >= 0 && toIndex < data.size() && fromIndex <= toIndex) {\r\n            if (physicalDeletion) {\r\n                data.subList(fromIndex, toIndex + 1).clear();\r\n            } else {\r\n                for (int i = fromIndex; i < toIndex; i++) {\r\n                    (data.get(i)).setDeleted(true);\r\n                }\r\n            }\r\n            this.fireIntervalRemoved(this, fromIndex, toIndex);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Add an item to the model and fire to Listeners\r\n     * @param index index to add to\r\n     * @param inputData <code>VisualPageListItem</code> to add to the data source\r\n     */\r\n    public void addElementAt(VisualPageListItem inputData, int index) {\r\n        if (inputData != null) {\r\n            data.add(index, inputData);\r\n            fireIntervalAdded(this, index, index);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Add an item to the model and fire to Listeners\r\n     * @param inputData <code>VisualPageListItem</code> to add to the data source\r\n     */\r\n    public void addElement(VisualPageListItem inputData) {\r\n        data.add(inputData);\r\n        fireIntervalAdded(this, data.size(), data.size());\r\n    }\r\n\r\n    /**\r\n     * delegated to the Vector addAll\r\n     * @param c\r\n     * @see Vector#addAll(Collection)\r\n     */\r\n    public void addAllElements(Collection<VisualPageListItem> c) {\r\n        if (c != null) {\r\n            int i = 0;\r\n            for (VisualPageListItem element : c) {\r\n                data.add(element);\r\n                i++;\r\n            }\r\n            fireIntervalAdded(this, data.size(), data.size() + i - 1);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * same as addAllElements. Appends elements to the end\r\n     * @param c\r\n     */\r\n    public void appendAllElements(Collection<VisualPageListItem> c) {\r\n        addAllElements(c);\r\n    }\r\n\r\n    /**\r\n     * Add elements at the beginning\r\n     * @param c\r\n     */\r\n    public void prependAllElements(Collection<VisualPageListItem> c) {\r\n        if (c != null && c.size() > 0) {\r\n            data.addAll(0, c);\r\n            fireIntervalAdded(this, 0, c.size() - 1);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Add elements in c at the given index\r\n     * @param index\r\n     * @param c\r\n     */\r\n    public void addAllElements(int index, Collection<VisualPageListItem> c) {\r\n        if (c != null && index >= 0 && index <= data.size()) {\r\n            int i = index;\r\n            for (VisualPageListItem element : c) {\r\n                data.add(i, element);\r\n                i++;\r\n            }\r\n            fireIntervalAdded(this, index, i - 1);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * delegated to the Vector subList\r\n     * @param fromIndex start inclusive\r\n     * @param toIndex end exclusive\r\n     * @return null if limits are not corrected\r\n     * @see Vector#subList(int, int)\r\n     */\r\n    public Collection<VisualPageListItem> subList(int fromIndex, int toIndex) {\r\n        return subList(fromIndex, toIndex, false);\r\n    }\r\n\r\n    /**\r\n     * @param fromIndex start inclusive\r\n     * @param toIndex end exclusive\r\n     * @param newInstance if false delegates to the Vector#subList(int, int) if true return a new Vector\r\n     * @return a portion of the data Vector, null if limits are not corrected\r\n     * @see Vector#subList(int, int)\r\n     */\r\n    public Collection<VisualPageListItem> subList(int fromIndex, int toIndex, boolean newInstance) {\r\n        Collection<VisualPageListItem> retVal = null;\r\n        if (fromIndex >= 0 && toIndex <= data.size()) {\r\n            if (newInstance) {\r\n                List<VisualPageListItem> itemsList = data.subList(fromIndex, toIndex);\r\n                if (itemsList != null && itemsList.size() > 0) {\r\n                    retVal = new Vector<VisualPageListItem>(itemsList.size());\r\n                    for (VisualPageListItem currItem : itemsList) {\r\n                        retVal.add((VisualPageListItem) currItem.clone());\r\n                    }\r\n                } else {\r\n                    retVal = new Vector<VisualPageListItem>();\r\n                }\r\n            } else {\r\n                retVal = data.subList(fromIndex, toIndex);\r\n            }\r\n        }\r\n        return retVal;\r\n    }\r\n\r\n    /**\r\n     * @return items of the model\r\n     */\r\n    public VisualPageListItem[] getElements() {\r\n        VisualPageListItem[] retVal = null;\r\n        if (data != null) {\r\n            retVal = (VisualPageListItem[]) data.toArray(new VisualPageListItem[data.size()]);\r\n        }\r\n        return retVal;\r\n    }\r\n\r\n    /**\r\n     * Replace an element of the model and fire to Listeners\r\n     * @param index index to be replaced\r\n     * @param inputData new <code>VisualPageListItem</code> to replace the data source\r\n     */\r\n    public void updateElementAt(int index, VisualPageListItem inputData) {\r\n        if (inputData != null && index >= 0 && index < data.size()) {\r\n            data.set(index, inputData);\r\n            this.fireContentsChanged(this, index, index);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Look for the inputData and repaint it if found\r\n     * @param inputData\r\n     */\r\n    public void elementChanged(VisualPageListItem inputData) {\r\n        if (inputData != null && data.size() > 0) {\r\n            int position = data.indexOf(inputData);\r\n            if (position >= 0) {\r\n                this.fireContentsChanged(this, position, position);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Repaints all the elements\r\n     */\r\n    public void elementsChanged() {\r\n        this.fireContentsChanged(this, 0, data.size());\r\n    }\r\n\r\n    /**\r\n     * Undelete the given elements\r\n     * @param indexes\r\n     * @throws IndexOutOfBoundsException\r\n     */\r\n    public void undeleteElements(int[] indexes) throws IndexOutOfBoundsException {\r\n        if (indexes.length > 0 && indexes.length <= data.size()) {\r\n            for (int i = 0; i < indexes.length; i++) {\r\n                (data.get(indexes[i])).setDeleted(false);\r\n            }\r\n            fireContentsChanged(this, indexes[0] - 1, indexes[indexes.length - 1]);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Reverse the given elements\r\n     * @param indexes\r\n     * @throws IndexOutOfBoundsException\r\n     */\r\n    public void reverseElements(int[] indexes) throws IndexOutOfBoundsException {\r\n        if (indexes.length > 0 && indexes.length <= data.size()) {\r\n            ArrayList<VisualPageListItem> items = new ArrayList<VisualPageListItem>(data.size());\r\n            for (int i = 0; i < indexes.length; i++) {\r\n                items.add(data.get(indexes[i]));\r\n            }\r\n            Collections.reverse(items);\r\n            for (int i = 0; i < indexes.length; i++) {\r\n                data.set(indexes[i], items.get(i));\r\n            }\r\n            fireContentsChanged(this, indexes[0] - 1, indexes[indexes.length - 1]);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * rotates the given elements\r\n     * @param indexes\r\n     * @throws IndexOutOfBoundsException\r\n     */\r\n    public void rotateClockwiseElements(int[] indexes) throws IndexOutOfBoundsException {\r\n        if (indexes.length > 0 && indexes.length <= data.size()) {\r\n            for (int i = 0; i < indexes.length; i++) {\r\n                VisualPageListItem item = data.get(indexes[i]);\r\n                item.rotateClockwise();\r\n            }\r\n            fireContentsChanged(this, indexes[0] - 1, indexes[indexes.length - 1]);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * rotates anti clockwise the given elements\r\n     * @param indexes\r\n     * @throws IndexOutOfBoundsException\r\n     */\r\n    public void rotateAnticlockwiseElements(int[] indexes) throws IndexOutOfBoundsException {\r\n        if (indexes.length > 0 && indexes.length <= data.size()) {\r\n            for (int i = 0; i < indexes.length; i++) {\r\n                VisualPageListItem item = data.get(indexes[i]);\r\n                item.rotateAnticlockwise();\r\n            }\r\n            fireContentsChanged(this, indexes[0] - 1, indexes[indexes.length - 1]);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Moves up a item at the given index fire to Listeners\r\n     * @param index element index to move from the data source\r\n     */\r\n    public void moveUpIndex(int index) throws IndexOutOfBoundsException {\r\n        if (index >= 1 && index < (data.size())) {\r\n            VisualPageListItem tmpElement = data.get(index);\r\n            data.set(index, data.get((index - 1)));\r\n            data.set((index - 1), tmpElement);\r\n            fireContentsChanged(this, index - 1, index);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Moves up a set of items at the given indexes\r\n     * @param indexes Indexes to move from the data source\r\n     */\r\n    public void moveUpIndexes(int[] indexes) throws IndexOutOfBoundsException {\r\n        if (indexes.length > 0 && indexes.length < data.size()) {\r\n            //no move up if i'm selecting the first element of the table\r\n            if (indexes[0] > 0) {\r\n                VisualPageListItem tmpElement = data.get(indexes[0] - 1);\r\n                for (int i = 0; i < indexes.length; i++) {\r\n                    if (indexes[i] > 0) {\r\n                        data.set(indexes[i] - 1, data.get(indexes[i]));\r\n                    }\r\n                }\r\n                data.set(indexes[indexes.length - 1], tmpElement);\r\n                fireContentsChanged(this, indexes[0] - 1, indexes[indexes.length - 1]);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Moves down a item at the given index fire to Listeners\r\n     * @param index element index to move from the data source\r\n     */\r\n    public void moveDownIndex(int index) throws IndexOutOfBoundsException {\r\n        if (index >= 0 && index < (data.size() - 1)) {\r\n            VisualPageListItem tmpElement = data.get(index);\r\n            data.set(index, data.get((index + 1)));\r\n            data.set((index + 1), tmpElement);\r\n            fireContentsChanged(this, index, index + 1);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Moves down a set of items at the given indexes\r\n     * @param indexes Indexes to move from the data source\r\n     */\r\n    public void moveDownIndexes(int[] indexes) throws IndexOutOfBoundsException {\r\n        if (indexes.length > 0 && indexes.length < data.size()) {\r\n            //no move down if i'm selecting the last element of the table\r\n            if (indexes[indexes.length - 1] < (data.size() - 1)) {\r\n                VisualPageListItem tmpElement = data.get(indexes[indexes.length - 1] + 1);\r\n                for (int i = (indexes.length - 1); i >= 0; i--) {\r\n                    if (indexes[indexes.length - 1] < (data.size() - 1)) {\r\n                        data.set(indexes[i] + 1, data.get(indexes[i]));\r\n                    }\r\n                }\r\n                data.set(indexes[0], tmpElement);\r\n                fireContentsChanged(this, indexes[0], indexes[indexes.length - 1] + 1);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @return a List<VisualPageListItem> of elements with the isDeleted=false, null if there are no elements\r\n     */\r\n    public List<VisualPageListItem> getValidElements() {\r\n        ArrayList<VisualPageListItem> retVal = null;\r\n        if (data != null && data.size() > 0) {\r\n            retVal = new ArrayList<VisualPageListItem>(data.size());\r\n            for (int i = 0; i < data.size(); i++) {\r\n                if (!(data.get(i)).isDeleted()) {\r\n                    retVal.add(data.get(i));\r\n                }\r\n            }\r\n        }\r\n        return retVal;\r\n    }\r\n}\r\n",
		"id": "EvoSuiteBenchmark/109_pdfsam/src/main/java/org/pdfsam/guiclient/commons/models/VisualListModelTest1.java",
		"test_prompt": "// VisualListModelTest1.java\npackage org.pdfsam.guiclient.commons.models;\n\nimport java.util.ArrayList;\nimport java.util.Collection;\nimport java.util.Collections;\nimport java.util.List;\nimport java.util.Vector;\nimport javax.swing.AbstractListModel;\nimport org.pdfsam.guiclient.dto.VisualPageListItem;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link VisualListModel}.\n* It contains ten unit test cases for the {@link VisualListModel#subList(int, int, boolean)} method.\n*/\nclass VisualListModelTest1 {"
	},
	{
		"original_code": "// CommonComponentsFactory.java\n/*\r\n * Created on 28-Nov-2007\r\n * Copyright (C) 2007 by Andrea Vacondio.\r\n *\r\n * This program is free software; you can redistribute it and/or modify it under the terms of the \r\n * GNU General Public License as published by the Free Software Foundation; \r\n * either version 2 of the License.\r\n * This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; \r\n * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. \r\n * See the GNU General Public License for more details.\r\n * You should have received a copy of the GNU General Public License along with this program; \r\n * if not, write to the Free Software Foundation, Inc., \r\n *  59 Temple Place, Suite 330, Boston, MA 02111-1307 USA\r\n */\r\npackage org.pdfsam.guiclient.commons.components;\r\n\r\nimport java.awt.Insets;\r\nimport javax.swing.ImageIcon;\r\nimport javax.swing.JButton;\r\nimport javax.swing.JCheckBox;\r\nimport javax.swing.JLabel;\r\nimport javax.swing.JTextField;\r\nimport javax.swing.border.EtchedBorder;\r\nimport org.pdfsam.guiclient.configuration.Configuration;\r\nimport org.pdfsam.i18n.GettextResource;\r\n\r\n/**\r\n * Factory for components commonly used by plugins\r\n * @author Andrea Vacondio\r\n */\r\npublic class CommonComponentsFactory {\r\n\r\n    public static final int SIMPLE_TEXT_FIELD_TYPE = 0;\r\n\r\n    public static final int DESTINATION_TEXT_FIELD_TYPE = 1;\r\n\r\n    public static final int PREFIX_TEXT_FIELD_TYPE = 2;\r\n\r\n    public static final int PREFIX_TEXT_FIELD_TYPE_FULL_MENU = 3;\r\n\r\n    public static final int RUN_BUTTON_TYPE = 1;\r\n\r\n    public static final int BROWSE_BUTTON_TYPE = 2;\r\n\r\n    public static final int ADD_BUTTON_TYPE = 3;\r\n\r\n    public static final int OVERWRITE_CHECKBOX_TYPE = 1;\r\n\r\n    public static final int COMPRESS_CHECKBOX_TYPE = 2;\r\n\r\n    public static final int DONT_PRESERVER_ORDER_CHECKBOX_TYPE = 3;\r\n\r\n    public static final int PDF_VERSION_LABEL = 1;\r\n\r\n    private static CommonComponentsFactory instance = null;\r\n\r\n    private Configuration config;\r\n\r\n    private CommonComponentsFactory() {\r\n        config = Configuration.getInstance();\r\n    }\r\n\r\n    /**\r\n     * @return the instance of CommonComponentsFactory\r\n     */\r\n    public static synchronized CommonComponentsFactory getInstance() {\r\n        if (instance == null) {\r\n            instance = new CommonComponentsFactory();\r\n        }\r\n        return instance;\r\n    }\r\n\r\n    /**\r\n     * @param buttonType\r\n     * @return a button instance\r\n     */\r\n    public synchronized JButton createButton(int buttonType) {\r\n        JButton retVal = new JButton();\r\n        switch(buttonType) {\r\n            case RUN_BUTTON_TYPE:\r\n                retVal.setMargin(new Insets(2, 2, 2, 2));\r\n                retVal.setIcon(new ImageIcon(this.getClass().getResource(\"/images/run.png\")));\r\n                retVal.setText(GettextResource.gettext(config.getI18nResourceBundle(), \"Run\"));\r\n                break;\r\n            case BROWSE_BUTTON_TYPE:\r\n                retVal.setMargin(new Insets(2, 2, 2, 2));\r\n                retVal.setIcon(new ImageIcon(this.getClass().getResource(\"/images/browse.png\")));\r\n                retVal.setText(GettextResource.gettext(config.getI18nResourceBundle(), \"Browse\"));\r\n                break;\r\n            case ADD_BUTTON_TYPE:\r\n                retVal.setMargin(new Insets(2, 2, 2, 2));\r\n                retVal.setIcon(new ImageIcon(this.getClass().getResource(\"/images/add.png\")));\r\n                retVal.setText(GettextResource.gettext(config.getI18nResourceBundle(), \"Add\"));\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n        return retVal;\r\n    }\r\n\r\n    /**\r\n     * @param checkboxType\r\n     * @return a JCheckBox instance\r\n     */\r\n    public synchronized JCheckBox createCheckBox(int checkboxType) {\r\n        JCheckBox retVal = new JCheckBox();\r\n        switch(checkboxType) {\r\n            case COMPRESS_CHECKBOX_TYPE:\r\n                retVal.setText(GettextResource.gettext(config.getI18nResourceBundle(), \"Compress output file/files\"));\r\n                retVal.setToolTipText(GettextResource.gettext(config.getI18nResourceBundle(), \"Pdf version required:\") + \" 1.5\");\r\n                break;\r\n            case OVERWRITE_CHECKBOX_TYPE:\r\n                retVal.setText(GettextResource.gettext(config.getI18nResourceBundle(), \"Overwrite if already exists\"));\r\n                retVal.setSelected(true);\r\n                break;\r\n            case DONT_PRESERVER_ORDER_CHECKBOX_TYPE:\r\n                retVal.setText(GettextResource.gettext(config.getI18nResourceBundle(), \"Don't preserve file order (fast load)\"));\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n        return retVal;\r\n    }\r\n\r\n    /**\r\n     * @param labelType\r\n     * @return a JLabel instance\r\n     */\r\n    public synchronized JLabel createLabel(int labelType) {\r\n        JLabel retVal = new JLabel();\r\n        switch(labelType) {\r\n            case PDF_VERSION_LABEL:\r\n                retVal.setText(GettextResource.gettext(config.getI18nResourceBundle(), \"Output document pdf version:\"));\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n        return retVal;\r\n    }\r\n\r\n    /**\r\n     * @param textFieldType\r\n     * @return a JTextField instance\r\n     */\r\n    public synchronized JTextField createTextField(int textFieldType) {\r\n        JTextField retVal = new JTextField();\r\n        retVal.setBorder(new EtchedBorder(EtchedBorder.LOWERED));\r\n        switch(textFieldType) {\r\n            case SIMPLE_TEXT_FIELD_TYPE:\r\n            case DESTINATION_TEXT_FIELD_TYPE:\r\n                retVal.setComponentPopupMenu(new DefaultPopupMenu());\r\n                break;\r\n            case PREFIX_TEXT_FIELD_TYPE:\r\n                retVal.setComponentPopupMenu(new PrefixPopupMenu(PrefixPopupMenu.BASIC_MENU, retVal));\r\n                retVal.setText(\"pdfsam_\");\r\n                break;\r\n            case PREFIX_TEXT_FIELD_TYPE_FULL_MENU:\r\n                retVal.setComponentPopupMenu(new PrefixPopupMenu(PrefixPopupMenu.FULL_MENU, retVal));\r\n                retVal.setText(\"pdfsam_\");\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n        return retVal;\r\n    }\r\n\r\n    public Object clone() throws CloneNotSupportedException {\r\n        throw new CloneNotSupportedException(\"Cannot clone ComponentFactory object.\");\r\n    }\r\n}\r\n",
		"id": "EvoSuiteBenchmark/109_pdfsam/src/main/java/org/pdfsam/guiclient/commons/components/CommonComponentsFactoryTest0.java",
		"test_prompt": "// CommonComponentsFactoryTest0.java\npackage org.pdfsam.guiclient.commons.components;\n\nimport java.awt.Insets;\nimport javax.swing.ImageIcon;\nimport javax.swing.JButton;\nimport javax.swing.JCheckBox;\nimport javax.swing.JLabel;\nimport javax.swing.JTextField;\nimport javax.swing.border.EtchedBorder;\nimport org.pdfsam.guiclient.configuration.Configuration;\nimport org.pdfsam.i18n.GettextResource;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link CommonComponentsFactory}.\n* It contains ten unit test cases for the {@link CommonComponentsFactory#getInstance()} method.\n*/\nclass CommonComponentsFactoryTest0 {"
	},
	{
		"original_code": "// CommonComponentsFactory.java\n/*\r\n * Created on 28-Nov-2007\r\n * Copyright (C) 2007 by Andrea Vacondio.\r\n *\r\n * This program is free software; you can redistribute it and/or modify it under the terms of the \r\n * GNU General Public License as published by the Free Software Foundation; \r\n * either version 2 of the License.\r\n * This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; \r\n * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. \r\n * See the GNU General Public License for more details.\r\n * You should have received a copy of the GNU General Public License along with this program; \r\n * if not, write to the Free Software Foundation, Inc., \r\n *  59 Temple Place, Suite 330, Boston, MA 02111-1307 USA\r\n */\r\npackage org.pdfsam.guiclient.commons.components;\r\n\r\nimport java.awt.Insets;\r\nimport javax.swing.ImageIcon;\r\nimport javax.swing.JButton;\r\nimport javax.swing.JCheckBox;\r\nimport javax.swing.JLabel;\r\nimport javax.swing.JTextField;\r\nimport javax.swing.border.EtchedBorder;\r\nimport org.pdfsam.guiclient.configuration.Configuration;\r\nimport org.pdfsam.i18n.GettextResource;\r\n\r\n/**\r\n * Factory for components commonly used by plugins\r\n * @author Andrea Vacondio\r\n */\r\npublic class CommonComponentsFactory {\r\n\r\n    public static final int SIMPLE_TEXT_FIELD_TYPE = 0;\r\n\r\n    public static final int DESTINATION_TEXT_FIELD_TYPE = 1;\r\n\r\n    public static final int PREFIX_TEXT_FIELD_TYPE = 2;\r\n\r\n    public static final int PREFIX_TEXT_FIELD_TYPE_FULL_MENU = 3;\r\n\r\n    public static final int RUN_BUTTON_TYPE = 1;\r\n\r\n    public static final int BROWSE_BUTTON_TYPE = 2;\r\n\r\n    public static final int ADD_BUTTON_TYPE = 3;\r\n\r\n    public static final int OVERWRITE_CHECKBOX_TYPE = 1;\r\n\r\n    public static final int COMPRESS_CHECKBOX_TYPE = 2;\r\n\r\n    public static final int DONT_PRESERVER_ORDER_CHECKBOX_TYPE = 3;\r\n\r\n    public static final int PDF_VERSION_LABEL = 1;\r\n\r\n    private static CommonComponentsFactory instance = null;\r\n\r\n    private Configuration config;\r\n\r\n    private CommonComponentsFactory() {\r\n        config = Configuration.getInstance();\r\n    }\r\n\r\n    /**\r\n     * @return the instance of CommonComponentsFactory\r\n     */\r\n    public static synchronized CommonComponentsFactory getInstance() {\r\n        if (instance == null) {\r\n            instance = new CommonComponentsFactory();\r\n        }\r\n        return instance;\r\n    }\r\n\r\n    /**\r\n     * @param buttonType\r\n     * @return a button instance\r\n     */\r\n    public synchronized JButton createButton(int buttonType) {\r\n        JButton retVal = new JButton();\r\n        switch(buttonType) {\r\n            case RUN_BUTTON_TYPE:\r\n                retVal.setMargin(new Insets(2, 2, 2, 2));\r\n                retVal.setIcon(new ImageIcon(this.getClass().getResource(\"/images/run.png\")));\r\n                retVal.setText(GettextResource.gettext(config.getI18nResourceBundle(), \"Run\"));\r\n                break;\r\n            case BROWSE_BUTTON_TYPE:\r\n                retVal.setMargin(new Insets(2, 2, 2, 2));\r\n                retVal.setIcon(new ImageIcon(this.getClass().getResource(\"/images/browse.png\")));\r\n                retVal.setText(GettextResource.gettext(config.getI18nResourceBundle(), \"Browse\"));\r\n                break;\r\n            case ADD_BUTTON_TYPE:\r\n                retVal.setMargin(new Insets(2, 2, 2, 2));\r\n                retVal.setIcon(new ImageIcon(this.getClass().getResource(\"/images/add.png\")));\r\n                retVal.setText(GettextResource.gettext(config.getI18nResourceBundle(), \"Add\"));\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n        return retVal;\r\n    }\r\n\r\n    /**\r\n     * @param checkboxType\r\n     * @return a JCheckBox instance\r\n     */\r\n    public synchronized JCheckBox createCheckBox(int checkboxType) {\r\n        JCheckBox retVal = new JCheckBox();\r\n        switch(checkboxType) {\r\n            case COMPRESS_CHECKBOX_TYPE:\r\n                retVal.setText(GettextResource.gettext(config.getI18nResourceBundle(), \"Compress output file/files\"));\r\n                retVal.setToolTipText(GettextResource.gettext(config.getI18nResourceBundle(), \"Pdf version required:\") + \" 1.5\");\r\n                break;\r\n            case OVERWRITE_CHECKBOX_TYPE:\r\n                retVal.setText(GettextResource.gettext(config.getI18nResourceBundle(), \"Overwrite if already exists\"));\r\n                retVal.setSelected(true);\r\n                break;\r\n            case DONT_PRESERVER_ORDER_CHECKBOX_TYPE:\r\n                retVal.setText(GettextResource.gettext(config.getI18nResourceBundle(), \"Don't preserve file order (fast load)\"));\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n        return retVal;\r\n    }\r\n\r\n    /**\r\n     * @param labelType\r\n     * @return a JLabel instance\r\n     */\r\n    public synchronized JLabel createLabel(int labelType) {\r\n        JLabel retVal = new JLabel();\r\n        switch(labelType) {\r\n            case PDF_VERSION_LABEL:\r\n                retVal.setText(GettextResource.gettext(config.getI18nResourceBundle(), \"Output document pdf version:\"));\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n        return retVal;\r\n    }\r\n\r\n    /**\r\n     * @param textFieldType\r\n     * @return a JTextField instance\r\n     */\r\n    public synchronized JTextField createTextField(int textFieldType) {\r\n        JTextField retVal = new JTextField();\r\n        retVal.setBorder(new EtchedBorder(EtchedBorder.LOWERED));\r\n        switch(textFieldType) {\r\n            case SIMPLE_TEXT_FIELD_TYPE:\r\n            case DESTINATION_TEXT_FIELD_TYPE:\r\n                retVal.setComponentPopupMenu(new DefaultPopupMenu());\r\n                break;\r\n            case PREFIX_TEXT_FIELD_TYPE:\r\n                retVal.setComponentPopupMenu(new PrefixPopupMenu(PrefixPopupMenu.BASIC_MENU, retVal));\r\n                retVal.setText(\"pdfsam_\");\r\n                break;\r\n            case PREFIX_TEXT_FIELD_TYPE_FULL_MENU:\r\n                retVal.setComponentPopupMenu(new PrefixPopupMenu(PrefixPopupMenu.FULL_MENU, retVal));\r\n                retVal.setText(\"pdfsam_\");\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n        return retVal;\r\n    }\r\n\r\n    public Object clone() throws CloneNotSupportedException {\r\n        throw new CloneNotSupportedException(\"Cannot clone ComponentFactory object.\");\r\n    }\r\n}\r\n",
		"id": "EvoSuiteBenchmark/109_pdfsam/src/main/java/org/pdfsam/guiclient/commons/components/CommonComponentsFactoryTest1.java",
		"test_prompt": "// CommonComponentsFactoryTest1.java\npackage org.pdfsam.guiclient.commons.components;\n\nimport java.awt.Insets;\nimport javax.swing.ImageIcon;\nimport javax.swing.JButton;\nimport javax.swing.JCheckBox;\nimport javax.swing.JLabel;\nimport javax.swing.JTextField;\nimport javax.swing.border.EtchedBorder;\nimport org.pdfsam.guiclient.configuration.Configuration;\nimport org.pdfsam.i18n.GettextResource;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link CommonComponentsFactory}.\n* It contains ten unit test cases for the {@link CommonComponentsFactory#createButton(int)} method.\n*/\nclass CommonComponentsFactoryTest1 {"
	},
	{
		"original_code": "// CommonComponentsFactory.java\n/*\r\n * Created on 28-Nov-2007\r\n * Copyright (C) 2007 by Andrea Vacondio.\r\n *\r\n * This program is free software; you can redistribute it and/or modify it under the terms of the \r\n * GNU General Public License as published by the Free Software Foundation; \r\n * either version 2 of the License.\r\n * This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; \r\n * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. \r\n * See the GNU General Public License for more details.\r\n * You should have received a copy of the GNU General Public License along with this program; \r\n * if not, write to the Free Software Foundation, Inc., \r\n *  59 Temple Place, Suite 330, Boston, MA 02111-1307 USA\r\n */\r\npackage org.pdfsam.guiclient.commons.components;\r\n\r\nimport java.awt.Insets;\r\nimport javax.swing.ImageIcon;\r\nimport javax.swing.JButton;\r\nimport javax.swing.JCheckBox;\r\nimport javax.swing.JLabel;\r\nimport javax.swing.JTextField;\r\nimport javax.swing.border.EtchedBorder;\r\nimport org.pdfsam.guiclient.configuration.Configuration;\r\nimport org.pdfsam.i18n.GettextResource;\r\n\r\n/**\r\n * Factory for components commonly used by plugins\r\n * @author Andrea Vacondio\r\n */\r\npublic class CommonComponentsFactory {\r\n\r\n    public static final int SIMPLE_TEXT_FIELD_TYPE = 0;\r\n\r\n    public static final int DESTINATION_TEXT_FIELD_TYPE = 1;\r\n\r\n    public static final int PREFIX_TEXT_FIELD_TYPE = 2;\r\n\r\n    public static final int PREFIX_TEXT_FIELD_TYPE_FULL_MENU = 3;\r\n\r\n    public static final int RUN_BUTTON_TYPE = 1;\r\n\r\n    public static final int BROWSE_BUTTON_TYPE = 2;\r\n\r\n    public static final int ADD_BUTTON_TYPE = 3;\r\n\r\n    public static final int OVERWRITE_CHECKBOX_TYPE = 1;\r\n\r\n    public static final int COMPRESS_CHECKBOX_TYPE = 2;\r\n\r\n    public static final int DONT_PRESERVER_ORDER_CHECKBOX_TYPE = 3;\r\n\r\n    public static final int PDF_VERSION_LABEL = 1;\r\n\r\n    private static CommonComponentsFactory instance = null;\r\n\r\n    private Configuration config;\r\n\r\n    private CommonComponentsFactory() {\r\n        config = Configuration.getInstance();\r\n    }\r\n\r\n    /**\r\n     * @return the instance of CommonComponentsFactory\r\n     */\r\n    public static synchronized CommonComponentsFactory getInstance() {\r\n        if (instance == null) {\r\n            instance = new CommonComponentsFactory();\r\n        }\r\n        return instance;\r\n    }\r\n\r\n    /**\r\n     * @param buttonType\r\n     * @return a button instance\r\n     */\r\n    public synchronized JButton createButton(int buttonType) {\r\n        JButton retVal = new JButton();\r\n        switch(buttonType) {\r\n            case RUN_BUTTON_TYPE:\r\n                retVal.setMargin(new Insets(2, 2, 2, 2));\r\n                retVal.setIcon(new ImageIcon(this.getClass().getResource(\"/images/run.png\")));\r\n                retVal.setText(GettextResource.gettext(config.getI18nResourceBundle(), \"Run\"));\r\n                break;\r\n            case BROWSE_BUTTON_TYPE:\r\n                retVal.setMargin(new Insets(2, 2, 2, 2));\r\n                retVal.setIcon(new ImageIcon(this.getClass().getResource(\"/images/browse.png\")));\r\n                retVal.setText(GettextResource.gettext(config.getI18nResourceBundle(), \"Browse\"));\r\n                break;\r\n            case ADD_BUTTON_TYPE:\r\n                retVal.setMargin(new Insets(2, 2, 2, 2));\r\n                retVal.setIcon(new ImageIcon(this.getClass().getResource(\"/images/add.png\")));\r\n                retVal.setText(GettextResource.gettext(config.getI18nResourceBundle(), \"Add\"));\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n        return retVal;\r\n    }\r\n\r\n    /**\r\n     * @param checkboxType\r\n     * @return a JCheckBox instance\r\n     */\r\n    public synchronized JCheckBox createCheckBox(int checkboxType) {\r\n        JCheckBox retVal = new JCheckBox();\r\n        switch(checkboxType) {\r\n            case COMPRESS_CHECKBOX_TYPE:\r\n                retVal.setText(GettextResource.gettext(config.getI18nResourceBundle(), \"Compress output file/files\"));\r\n                retVal.setToolTipText(GettextResource.gettext(config.getI18nResourceBundle(), \"Pdf version required:\") + \" 1.5\");\r\n                break;\r\n            case OVERWRITE_CHECKBOX_TYPE:\r\n                retVal.setText(GettextResource.gettext(config.getI18nResourceBundle(), \"Overwrite if already exists\"));\r\n                retVal.setSelected(true);\r\n                break;\r\n            case DONT_PRESERVER_ORDER_CHECKBOX_TYPE:\r\n                retVal.setText(GettextResource.gettext(config.getI18nResourceBundle(), \"Don't preserve file order (fast load)\"));\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n        return retVal;\r\n    }\r\n\r\n    /**\r\n     * @param labelType\r\n     * @return a JLabel instance\r\n     */\r\n    public synchronized JLabel createLabel(int labelType) {\r\n        JLabel retVal = new JLabel();\r\n        switch(labelType) {\r\n            case PDF_VERSION_LABEL:\r\n                retVal.setText(GettextResource.gettext(config.getI18nResourceBundle(), \"Output document pdf version:\"));\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n        return retVal;\r\n    }\r\n\r\n    /**\r\n     * @param textFieldType\r\n     * @return a JTextField instance\r\n     */\r\n    public synchronized JTextField createTextField(int textFieldType) {\r\n        JTextField retVal = new JTextField();\r\n        retVal.setBorder(new EtchedBorder(EtchedBorder.LOWERED));\r\n        switch(textFieldType) {\r\n            case SIMPLE_TEXT_FIELD_TYPE:\r\n            case DESTINATION_TEXT_FIELD_TYPE:\r\n                retVal.setComponentPopupMenu(new DefaultPopupMenu());\r\n                break;\r\n            case PREFIX_TEXT_FIELD_TYPE:\r\n                retVal.setComponentPopupMenu(new PrefixPopupMenu(PrefixPopupMenu.BASIC_MENU, retVal));\r\n                retVal.setText(\"pdfsam_\");\r\n                break;\r\n            case PREFIX_TEXT_FIELD_TYPE_FULL_MENU:\r\n                retVal.setComponentPopupMenu(new PrefixPopupMenu(PrefixPopupMenu.FULL_MENU, retVal));\r\n                retVal.setText(\"pdfsam_\");\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n        return retVal;\r\n    }\r\n\r\n    public Object clone() throws CloneNotSupportedException {\r\n        throw new CloneNotSupportedException(\"Cannot clone ComponentFactory object.\");\r\n    }\r\n}\r\n",
		"id": "EvoSuiteBenchmark/109_pdfsam/src/main/java/org/pdfsam/guiclient/commons/components/CommonComponentsFactoryTest2.java",
		"test_prompt": "// CommonComponentsFactoryTest2.java\npackage org.pdfsam.guiclient.commons.components;\n\nimport java.awt.Insets;\nimport javax.swing.ImageIcon;\nimport javax.swing.JButton;\nimport javax.swing.JCheckBox;\nimport javax.swing.JLabel;\nimport javax.swing.JTextField;\nimport javax.swing.border.EtchedBorder;\nimport org.pdfsam.guiclient.configuration.Configuration;\nimport org.pdfsam.i18n.GettextResource;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link CommonComponentsFactory}.\n* It contains ten unit test cases for the {@link CommonComponentsFactory#createCheckBox(int)} method.\n*/\nclass CommonComponentsFactoryTest2 {"
	},
	{
		"original_code": "// CommonComponentsFactory.java\n/*\r\n * Created on 28-Nov-2007\r\n * Copyright (C) 2007 by Andrea Vacondio.\r\n *\r\n * This program is free software; you can redistribute it and/or modify it under the terms of the \r\n * GNU General Public License as published by the Free Software Foundation; \r\n * either version 2 of the License.\r\n * This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; \r\n * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. \r\n * See the GNU General Public License for more details.\r\n * You should have received a copy of the GNU General Public License along with this program; \r\n * if not, write to the Free Software Foundation, Inc., \r\n *  59 Temple Place, Suite 330, Boston, MA 02111-1307 USA\r\n */\r\npackage org.pdfsam.guiclient.commons.components;\r\n\r\nimport java.awt.Insets;\r\nimport javax.swing.ImageIcon;\r\nimport javax.swing.JButton;\r\nimport javax.swing.JCheckBox;\r\nimport javax.swing.JLabel;\r\nimport javax.swing.JTextField;\r\nimport javax.swing.border.EtchedBorder;\r\nimport org.pdfsam.guiclient.configuration.Configuration;\r\nimport org.pdfsam.i18n.GettextResource;\r\n\r\n/**\r\n * Factory for components commonly used by plugins\r\n * @author Andrea Vacondio\r\n */\r\npublic class CommonComponentsFactory {\r\n\r\n    public static final int SIMPLE_TEXT_FIELD_TYPE = 0;\r\n\r\n    public static final int DESTINATION_TEXT_FIELD_TYPE = 1;\r\n\r\n    public static final int PREFIX_TEXT_FIELD_TYPE = 2;\r\n\r\n    public static final int PREFIX_TEXT_FIELD_TYPE_FULL_MENU = 3;\r\n\r\n    public static final int RUN_BUTTON_TYPE = 1;\r\n\r\n    public static final int BROWSE_BUTTON_TYPE = 2;\r\n\r\n    public static final int ADD_BUTTON_TYPE = 3;\r\n\r\n    public static final int OVERWRITE_CHECKBOX_TYPE = 1;\r\n\r\n    public static final int COMPRESS_CHECKBOX_TYPE = 2;\r\n\r\n    public static final int DONT_PRESERVER_ORDER_CHECKBOX_TYPE = 3;\r\n\r\n    public static final int PDF_VERSION_LABEL = 1;\r\n\r\n    private static CommonComponentsFactory instance = null;\r\n\r\n    private Configuration config;\r\n\r\n    private CommonComponentsFactory() {\r\n        config = Configuration.getInstance();\r\n    }\r\n\r\n    /**\r\n     * @return the instance of CommonComponentsFactory\r\n     */\r\n    public static synchronized CommonComponentsFactory getInstance() {\r\n        if (instance == null) {\r\n            instance = new CommonComponentsFactory();\r\n        }\r\n        return instance;\r\n    }\r\n\r\n    /**\r\n     * @param buttonType\r\n     * @return a button instance\r\n     */\r\n    public synchronized JButton createButton(int buttonType) {\r\n        JButton retVal = new JButton();\r\n        switch(buttonType) {\r\n            case RUN_BUTTON_TYPE:\r\n                retVal.setMargin(new Insets(2, 2, 2, 2));\r\n                retVal.setIcon(new ImageIcon(this.getClass().getResource(\"/images/run.png\")));\r\n                retVal.setText(GettextResource.gettext(config.getI18nResourceBundle(), \"Run\"));\r\n                break;\r\n            case BROWSE_BUTTON_TYPE:\r\n                retVal.setMargin(new Insets(2, 2, 2, 2));\r\n                retVal.setIcon(new ImageIcon(this.getClass().getResource(\"/images/browse.png\")));\r\n                retVal.setText(GettextResource.gettext(config.getI18nResourceBundle(), \"Browse\"));\r\n                break;\r\n            case ADD_BUTTON_TYPE:\r\n                retVal.setMargin(new Insets(2, 2, 2, 2));\r\n                retVal.setIcon(new ImageIcon(this.getClass().getResource(\"/images/add.png\")));\r\n                retVal.setText(GettextResource.gettext(config.getI18nResourceBundle(), \"Add\"));\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n        return retVal;\r\n    }\r\n\r\n    /**\r\n     * @param checkboxType\r\n     * @return a JCheckBox instance\r\n     */\r\n    public synchronized JCheckBox createCheckBox(int checkboxType) {\r\n        JCheckBox retVal = new JCheckBox();\r\n        switch(checkboxType) {\r\n            case COMPRESS_CHECKBOX_TYPE:\r\n                retVal.setText(GettextResource.gettext(config.getI18nResourceBundle(), \"Compress output file/files\"));\r\n                retVal.setToolTipText(GettextResource.gettext(config.getI18nResourceBundle(), \"Pdf version required:\") + \" 1.5\");\r\n                break;\r\n            case OVERWRITE_CHECKBOX_TYPE:\r\n                retVal.setText(GettextResource.gettext(config.getI18nResourceBundle(), \"Overwrite if already exists\"));\r\n                retVal.setSelected(true);\r\n                break;\r\n            case DONT_PRESERVER_ORDER_CHECKBOX_TYPE:\r\n                retVal.setText(GettextResource.gettext(config.getI18nResourceBundle(), \"Don't preserve file order (fast load)\"));\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n        return retVal;\r\n    }\r\n\r\n    /**\r\n     * @param labelType\r\n     * @return a JLabel instance\r\n     */\r\n    public synchronized JLabel createLabel(int labelType) {\r\n        JLabel retVal = new JLabel();\r\n        switch(labelType) {\r\n            case PDF_VERSION_LABEL:\r\n                retVal.setText(GettextResource.gettext(config.getI18nResourceBundle(), \"Output document pdf version:\"));\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n        return retVal;\r\n    }\r\n\r\n    /**\r\n     * @param textFieldType\r\n     * @return a JTextField instance\r\n     */\r\n    public synchronized JTextField createTextField(int textFieldType) {\r\n        JTextField retVal = new JTextField();\r\n        retVal.setBorder(new EtchedBorder(EtchedBorder.LOWERED));\r\n        switch(textFieldType) {\r\n            case SIMPLE_TEXT_FIELD_TYPE:\r\n            case DESTINATION_TEXT_FIELD_TYPE:\r\n                retVal.setComponentPopupMenu(new DefaultPopupMenu());\r\n                break;\r\n            case PREFIX_TEXT_FIELD_TYPE:\r\n                retVal.setComponentPopupMenu(new PrefixPopupMenu(PrefixPopupMenu.BASIC_MENU, retVal));\r\n                retVal.setText(\"pdfsam_\");\r\n                break;\r\n            case PREFIX_TEXT_FIELD_TYPE_FULL_MENU:\r\n                retVal.setComponentPopupMenu(new PrefixPopupMenu(PrefixPopupMenu.FULL_MENU, retVal));\r\n                retVal.setText(\"pdfsam_\");\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n        return retVal;\r\n    }\r\n\r\n    public Object clone() throws CloneNotSupportedException {\r\n        throw new CloneNotSupportedException(\"Cannot clone ComponentFactory object.\");\r\n    }\r\n}\r\n",
		"id": "EvoSuiteBenchmark/109_pdfsam/src/main/java/org/pdfsam/guiclient/commons/components/CommonComponentsFactoryTest3.java",
		"test_prompt": "// CommonComponentsFactoryTest3.java\npackage org.pdfsam.guiclient.commons.components;\n\nimport java.awt.Insets;\nimport javax.swing.ImageIcon;\nimport javax.swing.JButton;\nimport javax.swing.JCheckBox;\nimport javax.swing.JLabel;\nimport javax.swing.JTextField;\nimport javax.swing.border.EtchedBorder;\nimport org.pdfsam.guiclient.configuration.Configuration;\nimport org.pdfsam.i18n.GettextResource;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link CommonComponentsFactory}.\n* It contains ten unit test cases for the {@link CommonComponentsFactory#createLabel(int)} method.\n*/\nclass CommonComponentsFactoryTest3 {"
	},
	{
		"original_code": "// CommonComponentsFactory.java\n/*\r\n * Created on 28-Nov-2007\r\n * Copyright (C) 2007 by Andrea Vacondio.\r\n *\r\n * This program is free software; you can redistribute it and/or modify it under the terms of the \r\n * GNU General Public License as published by the Free Software Foundation; \r\n * either version 2 of the License.\r\n * This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; \r\n * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. \r\n * See the GNU General Public License for more details.\r\n * You should have received a copy of the GNU General Public License along with this program; \r\n * if not, write to the Free Software Foundation, Inc., \r\n *  59 Temple Place, Suite 330, Boston, MA 02111-1307 USA\r\n */\r\npackage org.pdfsam.guiclient.commons.components;\r\n\r\nimport java.awt.Insets;\r\nimport javax.swing.ImageIcon;\r\nimport javax.swing.JButton;\r\nimport javax.swing.JCheckBox;\r\nimport javax.swing.JLabel;\r\nimport javax.swing.JTextField;\r\nimport javax.swing.border.EtchedBorder;\r\nimport org.pdfsam.guiclient.configuration.Configuration;\r\nimport org.pdfsam.i18n.GettextResource;\r\n\r\n/**\r\n * Factory for components commonly used by plugins\r\n * @author Andrea Vacondio\r\n */\r\npublic class CommonComponentsFactory {\r\n\r\n    public static final int SIMPLE_TEXT_FIELD_TYPE = 0;\r\n\r\n    public static final int DESTINATION_TEXT_FIELD_TYPE = 1;\r\n\r\n    public static final int PREFIX_TEXT_FIELD_TYPE = 2;\r\n\r\n    public static final int PREFIX_TEXT_FIELD_TYPE_FULL_MENU = 3;\r\n\r\n    public static final int RUN_BUTTON_TYPE = 1;\r\n\r\n    public static final int BROWSE_BUTTON_TYPE = 2;\r\n\r\n    public static final int ADD_BUTTON_TYPE = 3;\r\n\r\n    public static final int OVERWRITE_CHECKBOX_TYPE = 1;\r\n\r\n    public static final int COMPRESS_CHECKBOX_TYPE = 2;\r\n\r\n    public static final int DONT_PRESERVER_ORDER_CHECKBOX_TYPE = 3;\r\n\r\n    public static final int PDF_VERSION_LABEL = 1;\r\n\r\n    private static CommonComponentsFactory instance = null;\r\n\r\n    private Configuration config;\r\n\r\n    private CommonComponentsFactory() {\r\n        config = Configuration.getInstance();\r\n    }\r\n\r\n    /**\r\n     * @return the instance of CommonComponentsFactory\r\n     */\r\n    public static synchronized CommonComponentsFactory getInstance() {\r\n        if (instance == null) {\r\n            instance = new CommonComponentsFactory();\r\n        }\r\n        return instance;\r\n    }\r\n\r\n    /**\r\n     * @param buttonType\r\n     * @return a button instance\r\n     */\r\n    public synchronized JButton createButton(int buttonType) {\r\n        JButton retVal = new JButton();\r\n        switch(buttonType) {\r\n            case RUN_BUTTON_TYPE:\r\n                retVal.setMargin(new Insets(2, 2, 2, 2));\r\n                retVal.setIcon(new ImageIcon(this.getClass().getResource(\"/images/run.png\")));\r\n                retVal.setText(GettextResource.gettext(config.getI18nResourceBundle(), \"Run\"));\r\n                break;\r\n            case BROWSE_BUTTON_TYPE:\r\n                retVal.setMargin(new Insets(2, 2, 2, 2));\r\n                retVal.setIcon(new ImageIcon(this.getClass().getResource(\"/images/browse.png\")));\r\n                retVal.setText(GettextResource.gettext(config.getI18nResourceBundle(), \"Browse\"));\r\n                break;\r\n            case ADD_BUTTON_TYPE:\r\n                retVal.setMargin(new Insets(2, 2, 2, 2));\r\n                retVal.setIcon(new ImageIcon(this.getClass().getResource(\"/images/add.png\")));\r\n                retVal.setText(GettextResource.gettext(config.getI18nResourceBundle(), \"Add\"));\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n        return retVal;\r\n    }\r\n\r\n    /**\r\n     * @param checkboxType\r\n     * @return a JCheckBox instance\r\n     */\r\n    public synchronized JCheckBox createCheckBox(int checkboxType) {\r\n        JCheckBox retVal = new JCheckBox();\r\n        switch(checkboxType) {\r\n            case COMPRESS_CHECKBOX_TYPE:\r\n                retVal.setText(GettextResource.gettext(config.getI18nResourceBundle(), \"Compress output file/files\"));\r\n                retVal.setToolTipText(GettextResource.gettext(config.getI18nResourceBundle(), \"Pdf version required:\") + \" 1.5\");\r\n                break;\r\n            case OVERWRITE_CHECKBOX_TYPE:\r\n                retVal.setText(GettextResource.gettext(config.getI18nResourceBundle(), \"Overwrite if already exists\"));\r\n                retVal.setSelected(true);\r\n                break;\r\n            case DONT_PRESERVER_ORDER_CHECKBOX_TYPE:\r\n                retVal.setText(GettextResource.gettext(config.getI18nResourceBundle(), \"Don't preserve file order (fast load)\"));\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n        return retVal;\r\n    }\r\n\r\n    /**\r\n     * @param labelType\r\n     * @return a JLabel instance\r\n     */\r\n    public synchronized JLabel createLabel(int labelType) {\r\n        JLabel retVal = new JLabel();\r\n        switch(labelType) {\r\n            case PDF_VERSION_LABEL:\r\n                retVal.setText(GettextResource.gettext(config.getI18nResourceBundle(), \"Output document pdf version:\"));\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n        return retVal;\r\n    }\r\n\r\n    /**\r\n     * @param textFieldType\r\n     * @return a JTextField instance\r\n     */\r\n    public synchronized JTextField createTextField(int textFieldType) {\r\n        JTextField retVal = new JTextField();\r\n        retVal.setBorder(new EtchedBorder(EtchedBorder.LOWERED));\r\n        switch(textFieldType) {\r\n            case SIMPLE_TEXT_FIELD_TYPE:\r\n            case DESTINATION_TEXT_FIELD_TYPE:\r\n                retVal.setComponentPopupMenu(new DefaultPopupMenu());\r\n                break;\r\n            case PREFIX_TEXT_FIELD_TYPE:\r\n                retVal.setComponentPopupMenu(new PrefixPopupMenu(PrefixPopupMenu.BASIC_MENU, retVal));\r\n                retVal.setText(\"pdfsam_\");\r\n                break;\r\n            case PREFIX_TEXT_FIELD_TYPE_FULL_MENU:\r\n                retVal.setComponentPopupMenu(new PrefixPopupMenu(PrefixPopupMenu.FULL_MENU, retVal));\r\n                retVal.setText(\"pdfsam_\");\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n        return retVal;\r\n    }\r\n\r\n    public Object clone() throws CloneNotSupportedException {\r\n        throw new CloneNotSupportedException(\"Cannot clone ComponentFactory object.\");\r\n    }\r\n}\r\n",
		"id": "EvoSuiteBenchmark/109_pdfsam/src/main/java/org/pdfsam/guiclient/commons/components/CommonComponentsFactoryTest4.java",
		"test_prompt": "// CommonComponentsFactoryTest4.java\npackage org.pdfsam.guiclient.commons.components;\n\nimport java.awt.Insets;\nimport javax.swing.ImageIcon;\nimport javax.swing.JButton;\nimport javax.swing.JCheckBox;\nimport javax.swing.JLabel;\nimport javax.swing.JTextField;\nimport javax.swing.border.EtchedBorder;\nimport org.pdfsam.guiclient.configuration.Configuration;\nimport org.pdfsam.i18n.GettextResource;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link CommonComponentsFactory}.\n* It contains ten unit test cases for the {@link CommonComponentsFactory#createTextField(int)} method.\n*/\nclass CommonComponentsFactoryTest4 {"
	},
	{
		"original_code": "// CommonComponentsFactory.java\n/*\r\n * Created on 28-Nov-2007\r\n * Copyright (C) 2007 by Andrea Vacondio.\r\n *\r\n * This program is free software; you can redistribute it and/or modify it under the terms of the \r\n * GNU General Public License as published by the Free Software Foundation; \r\n * either version 2 of the License.\r\n * This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; \r\n * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. \r\n * See the GNU General Public License for more details.\r\n * You should have received a copy of the GNU General Public License along with this program; \r\n * if not, write to the Free Software Foundation, Inc., \r\n *  59 Temple Place, Suite 330, Boston, MA 02111-1307 USA\r\n */\r\npackage org.pdfsam.guiclient.commons.components;\r\n\r\nimport java.awt.Insets;\r\nimport javax.swing.ImageIcon;\r\nimport javax.swing.JButton;\r\nimport javax.swing.JCheckBox;\r\nimport javax.swing.JLabel;\r\nimport javax.swing.JTextField;\r\nimport javax.swing.border.EtchedBorder;\r\nimport org.pdfsam.guiclient.configuration.Configuration;\r\nimport org.pdfsam.i18n.GettextResource;\r\n\r\n/**\r\n * Factory for components commonly used by plugins\r\n * @author Andrea Vacondio\r\n */\r\npublic class CommonComponentsFactory {\r\n\r\n    public static final int SIMPLE_TEXT_FIELD_TYPE = 0;\r\n\r\n    public static final int DESTINATION_TEXT_FIELD_TYPE = 1;\r\n\r\n    public static final int PREFIX_TEXT_FIELD_TYPE = 2;\r\n\r\n    public static final int PREFIX_TEXT_FIELD_TYPE_FULL_MENU = 3;\r\n\r\n    public static final int RUN_BUTTON_TYPE = 1;\r\n\r\n    public static final int BROWSE_BUTTON_TYPE = 2;\r\n\r\n    public static final int ADD_BUTTON_TYPE = 3;\r\n\r\n    public static final int OVERWRITE_CHECKBOX_TYPE = 1;\r\n\r\n    public static final int COMPRESS_CHECKBOX_TYPE = 2;\r\n\r\n    public static final int DONT_PRESERVER_ORDER_CHECKBOX_TYPE = 3;\r\n\r\n    public static final int PDF_VERSION_LABEL = 1;\r\n\r\n    private static CommonComponentsFactory instance = null;\r\n\r\n    private Configuration config;\r\n\r\n    private CommonComponentsFactory() {\r\n        config = Configuration.getInstance();\r\n    }\r\n\r\n    /**\r\n     * @return the instance of CommonComponentsFactory\r\n     */\r\n    public static synchronized CommonComponentsFactory getInstance() {\r\n        if (instance == null) {\r\n            instance = new CommonComponentsFactory();\r\n        }\r\n        return instance;\r\n    }\r\n\r\n    /**\r\n     * @param buttonType\r\n     * @return a button instance\r\n     */\r\n    public synchronized JButton createButton(int buttonType) {\r\n        JButton retVal = new JButton();\r\n        switch(buttonType) {\r\n            case RUN_BUTTON_TYPE:\r\n                retVal.setMargin(new Insets(2, 2, 2, 2));\r\n                retVal.setIcon(new ImageIcon(this.getClass().getResource(\"/images/run.png\")));\r\n                retVal.setText(GettextResource.gettext(config.getI18nResourceBundle(), \"Run\"));\r\n                break;\r\n            case BROWSE_BUTTON_TYPE:\r\n                retVal.setMargin(new Insets(2, 2, 2, 2));\r\n                retVal.setIcon(new ImageIcon(this.getClass().getResource(\"/images/browse.png\")));\r\n                retVal.setText(GettextResource.gettext(config.getI18nResourceBundle(), \"Browse\"));\r\n                break;\r\n            case ADD_BUTTON_TYPE:\r\n                retVal.setMargin(new Insets(2, 2, 2, 2));\r\n                retVal.setIcon(new ImageIcon(this.getClass().getResource(\"/images/add.png\")));\r\n                retVal.setText(GettextResource.gettext(config.getI18nResourceBundle(), \"Add\"));\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n        return retVal;\r\n    }\r\n\r\n    /**\r\n     * @param checkboxType\r\n     * @return a JCheckBox instance\r\n     */\r\n    public synchronized JCheckBox createCheckBox(int checkboxType) {\r\n        JCheckBox retVal = new JCheckBox();\r\n        switch(checkboxType) {\r\n            case COMPRESS_CHECKBOX_TYPE:\r\n                retVal.setText(GettextResource.gettext(config.getI18nResourceBundle(), \"Compress output file/files\"));\r\n                retVal.setToolTipText(GettextResource.gettext(config.getI18nResourceBundle(), \"Pdf version required:\") + \" 1.5\");\r\n                break;\r\n            case OVERWRITE_CHECKBOX_TYPE:\r\n                retVal.setText(GettextResource.gettext(config.getI18nResourceBundle(), \"Overwrite if already exists\"));\r\n                retVal.setSelected(true);\r\n                break;\r\n            case DONT_PRESERVER_ORDER_CHECKBOX_TYPE:\r\n                retVal.setText(GettextResource.gettext(config.getI18nResourceBundle(), \"Don't preserve file order (fast load)\"));\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n        return retVal;\r\n    }\r\n\r\n    /**\r\n     * @param labelType\r\n     * @return a JLabel instance\r\n     */\r\n    public synchronized JLabel createLabel(int labelType) {\r\n        JLabel retVal = new JLabel();\r\n        switch(labelType) {\r\n            case PDF_VERSION_LABEL:\r\n                retVal.setText(GettextResource.gettext(config.getI18nResourceBundle(), \"Output document pdf version:\"));\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n        return retVal;\r\n    }\r\n\r\n    /**\r\n     * @param textFieldType\r\n     * @return a JTextField instance\r\n     */\r\n    public synchronized JTextField createTextField(int textFieldType) {\r\n        JTextField retVal = new JTextField();\r\n        retVal.setBorder(new EtchedBorder(EtchedBorder.LOWERED));\r\n        switch(textFieldType) {\r\n            case SIMPLE_TEXT_FIELD_TYPE:\r\n            case DESTINATION_TEXT_FIELD_TYPE:\r\n                retVal.setComponentPopupMenu(new DefaultPopupMenu());\r\n                break;\r\n            case PREFIX_TEXT_FIELD_TYPE:\r\n                retVal.setComponentPopupMenu(new PrefixPopupMenu(PrefixPopupMenu.BASIC_MENU, retVal));\r\n                retVal.setText(\"pdfsam_\");\r\n                break;\r\n            case PREFIX_TEXT_FIELD_TYPE_FULL_MENU:\r\n                retVal.setComponentPopupMenu(new PrefixPopupMenu(PrefixPopupMenu.FULL_MENU, retVal));\r\n                retVal.setText(\"pdfsam_\");\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n        return retVal;\r\n    }\r\n\r\n    public Object clone() throws CloneNotSupportedException {\r\n        throw new CloneNotSupportedException(\"Cannot clone ComponentFactory object.\");\r\n    }\r\n}\r\n",
		"id": "EvoSuiteBenchmark/109_pdfsam/src/main/java/org/pdfsam/guiclient/commons/components/CommonComponentsFactoryTest5.java",
		"test_prompt": "// CommonComponentsFactoryTest5.java\npackage org.pdfsam.guiclient.commons.components;\n\nimport java.awt.Insets;\nimport javax.swing.ImageIcon;\nimport javax.swing.JButton;\nimport javax.swing.JCheckBox;\nimport javax.swing.JLabel;\nimport javax.swing.JTextField;\nimport javax.swing.border.EtchedBorder;\nimport org.pdfsam.guiclient.configuration.Configuration;\nimport org.pdfsam.i18n.GettextResource;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link CommonComponentsFactory}.\n* It contains ten unit test cases for the {@link CommonComponentsFactory#clone()} method.\n*/\nclass CommonComponentsFactoryTest5 {"
	},
	{
		"original_code": "// SharedJFileChooser.java\n/*\n * Created on 07-Mar-2010\n * Copyright (C) 2010 by Andrea Vacondio.\n *\n * This program is free software; you can redistribute it and/or modify it under the terms of the \n * GNU General Public License as published by the Free Software Foundation; \n * either version 2 of the License.\n * This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; \n * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. \n * See the GNU General Public License for more details.\n * You should have received a copy of the GNU General Public License along with this program; \n * if not, write to the Free Software Foundation, Inc., \n *  59 Temple Place, Suite 330, Boston, MA 02111-1307 USA\n */\npackage org.pdfsam.guiclient.commons.components.sharedchooser;\n\nimport java.io.File;\nimport javax.swing.JFileChooser;\nimport org.apache.commons.lang.StringUtils;\nimport org.pdfsam.guiclient.configuration.Configuration;\n\n/**\n * Shared JFileChooser instance used all over the application\n *\n * @author Andrea Vacondio\n */\npublic class SharedJFileChooser {\n\n    private static JFileChooser instance = null;\n\n    private SharedJFileChooser() {\n    }\n\n    /**\n     * @param type\n     *            type of file chooser\n     * @param mode\n     *            mode of the file chooser\n     * @param currentDirectory\n     *            directory where the file chooser is pointed\n     * @return a shared instance of JFileChooser given the input parameters\n     */\n    public static synchronized JFileChooser getInstance(SharedJFileChooserType type, int mode, String currentDirectory) {\n        if (instance == null) {\n            instance = new JFileChooser(Configuration.getInstance().getDefaultWorkingDirectory());\n        } else {\n            instance.resetChoosableFileFilters();\n            instance.setMultiSelectionEnabled(false);\n            instance.setSelectedFile(new File(\"\"));\n        }\n        if (StringUtils.isNotEmpty(currentDirectory)) {\n            instance.setCurrentDirectory(new File(currentDirectory));\n        }\n        instance.setFileFilter(type.getFilter());\n        instance.setFileSelectionMode(mode);\n        return instance;\n    }\n\n    /**\n     * @param type\n     *            type of file chooser\n     * @param mode\n     *            mode of the file chooser\n     * @return a shared instance of JFileChooser given the input parameters\n     */\n    public static JFileChooser getInstance(SharedJFileChooserType type, int mode) {\n        return getInstance(type, mode, null);\n    }\n}\n",
		"id": "EvoSuiteBenchmark/109_pdfsam/src/main/java/org/pdfsam/guiclient/commons/components/sharedchooser/SharedJFileChooserTest0.java",
		"test_prompt": "// SharedJFileChooserTest0.java\npackage org.pdfsam.guiclient.commons.components.sharedchooser;\n\nimport java.io.File;\nimport javax.swing.JFileChooser;\nimport org.apache.commons.lang.StringUtils;\nimport org.pdfsam.guiclient.configuration.Configuration;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link SharedJFileChooser}.\n* It contains ten unit test cases for the {@link SharedJFileChooser#getInstance(SharedJFileChooserType, int, String)} method.\n*/\nclass SharedJFileChooserTest0 {"
	},
	{
		"original_code": "// SharedJFileChooser.java\n/*\n * Created on 07-Mar-2010\n * Copyright (C) 2010 by Andrea Vacondio.\n *\n * This program is free software; you can redistribute it and/or modify it under the terms of the \n * GNU General Public License as published by the Free Software Foundation; \n * either version 2 of the License.\n * This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; \n * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. \n * See the GNU General Public License for more details.\n * You should have received a copy of the GNU General Public License along with this program; \n * if not, write to the Free Software Foundation, Inc., \n *  59 Temple Place, Suite 330, Boston, MA 02111-1307 USA\n */\npackage org.pdfsam.guiclient.commons.components.sharedchooser;\n\nimport java.io.File;\nimport javax.swing.JFileChooser;\nimport org.apache.commons.lang.StringUtils;\nimport org.pdfsam.guiclient.configuration.Configuration;\n\n/**\n * Shared JFileChooser instance used all over the application\n *\n * @author Andrea Vacondio\n */\npublic class SharedJFileChooser {\n\n    private static JFileChooser instance = null;\n\n    private SharedJFileChooser() {\n    }\n\n    /**\n     * @param type\n     *            type of file chooser\n     * @param mode\n     *            mode of the file chooser\n     * @param currentDirectory\n     *            directory where the file chooser is pointed\n     * @return a shared instance of JFileChooser given the input parameters\n     */\n    public static synchronized JFileChooser getInstance(SharedJFileChooserType type, int mode, String currentDirectory) {\n        if (instance == null) {\n            instance = new JFileChooser(Configuration.getInstance().getDefaultWorkingDirectory());\n        } else {\n            instance.resetChoosableFileFilters();\n            instance.setMultiSelectionEnabled(false);\n            instance.setSelectedFile(new File(\"\"));\n        }\n        if (StringUtils.isNotEmpty(currentDirectory)) {\n            instance.setCurrentDirectory(new File(currentDirectory));\n        }\n        instance.setFileFilter(type.getFilter());\n        instance.setFileSelectionMode(mode);\n        return instance;\n    }\n\n    /**\n     * @param type\n     *            type of file chooser\n     * @param mode\n     *            mode of the file chooser\n     * @return a shared instance of JFileChooser given the input parameters\n     */\n    public static JFileChooser getInstance(SharedJFileChooserType type, int mode) {\n        return getInstance(type, mode, null);\n    }\n}\n",
		"id": "EvoSuiteBenchmark/109_pdfsam/src/main/java/org/pdfsam/guiclient/commons/components/sharedchooser/SharedJFileChooserTest1.java",
		"test_prompt": "// SharedJFileChooserTest1.java\npackage org.pdfsam.guiclient.commons.components.sharedchooser;\n\nimport java.io.File;\nimport javax.swing.JFileChooser;\nimport org.apache.commons.lang.StringUtils;\nimport org.pdfsam.guiclient.configuration.Configuration;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link SharedJFileChooser}.\n* It contains ten unit test cases for the {@link SharedJFileChooser#getInstance(SharedJFileChooserType, int)} method.\n*/\nclass SharedJFileChooserTest1 {"
	},
	{
		"original_code": "// JVisualSelectionList.java\n/*\r\n * Created on 26-Jun-2008\r\n * Copyright (C) 2008 by Andrea Vacondio.\r\n *\r\n * This program is free software; you can redistribute it and/or modify it under the terms of the \r\n * GNU General Public License as published by the Free Software Foundation; \r\n * either version 2 of the License.\r\n * This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; \r\n * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. \r\n * See the GNU General Public License for more details.\r\n * You should have received a copy of the GNU General Public License along with this program; \r\n * if not, write to the Free Software Foundation, Inc., \r\n *  59 Temple Place, Suite 330, Boston, MA 02111-1307 USA\r\n */\r\npackage org.pdfsam.guiclient.commons.components;\r\n\r\nimport java.util.Vector;\r\nimport javax.swing.JList;\r\nimport javax.swing.ListModel;\r\n\r\n/**\r\n * JList with zoom support\r\n *\r\n * @author Andrea Vacondio\r\n */\r\npublic class JVisualSelectionList extends JList {\r\n\r\n    private static final long serialVersionUID = -491255443741363383L;\r\n\r\n    public static final int DEFAULT_ZOOM_LEVEL = -4;\r\n\r\n    public static final int MIN_ZOOM_LEVEL = -7;\r\n\r\n    public static final int MAX_ZOOM_LEVEL = 0;\r\n\r\n    private int currentZoomLevel = DEFAULT_ZOOM_LEVEL;\r\n\r\n    private boolean drawDeletedItems = true;\r\n\r\n    public JVisualSelectionList() {\r\n    }\r\n\r\n    /**\r\n     * @param dataModel\r\n     */\r\n    public JVisualSelectionList(ListModel dataModel) {\r\n        super(dataModel);\r\n    }\r\n\r\n    /**\r\n     * @param listData\r\n     */\r\n    public JVisualSelectionList(Object[] listData) {\r\n        super(listData);\r\n    }\r\n\r\n    /**\r\n     * @param listData\r\n     */\r\n    public JVisualSelectionList(Vector<?> listData) {\r\n        super(listData);\r\n    }\r\n\r\n    public JVisualSelectionList(boolean drawDeletedItems) {\r\n        this.drawDeletedItems = drawDeletedItems;\r\n    }\r\n\r\n    /**\r\n     * @return the currentZoomLevel\r\n     */\r\n    public int getCurrentZoomLevel() {\r\n        return currentZoomLevel;\r\n    }\r\n\r\n    /**\r\n     * @param currentZoomLevel\r\n     *            the currentZoomLevel to set\r\n     */\r\n    public void setCurrentZoomLevel(int currentZoomLevel) {\r\n        this.currentZoomLevel = currentZoomLevel;\r\n    }\r\n\r\n    /**\r\n     * increment the zoom level\r\n     */\r\n    public void incZoomLevel() {\r\n        if (currentZoomLevel < MAX_ZOOM_LEVEL) {\r\n            currentZoomLevel++;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * deincrement the zoom level\r\n     */\r\n    public void deincZoomLevel() {\r\n        if (currentZoomLevel > MIN_ZOOM_LEVEL) {\r\n            currentZoomLevel--;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @return the drawDeletedItems\r\n     */\r\n    public boolean isDrawDeletedItems() {\r\n        return drawDeletedItems;\r\n    }\r\n\r\n    /**\r\n     * @param drawDeletedItems\r\n     *            the drawDeletedItems to set\r\n     */\r\n    public void setDrawDeletedItems(boolean drawDeletedItems) {\r\n        this.drawDeletedItems = drawDeletedItems;\r\n    }\r\n}\r\n",
		"id": "EvoSuiteBenchmark/109_pdfsam/src/main/java/org/pdfsam/guiclient/commons/components/JVisualSelectionListTest.java",
		"test_prompt": "// JVisualSelectionListTest.java\npackage org.pdfsam.guiclient.commons.components;\n\nimport java.util.Vector;\nimport javax.swing.JList;\nimport javax.swing.ListModel;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link JVisualSelectionList}.\n* It contains ten unit test cases for the {@link JVisualSelectionList#isDrawDeletedItems()} method.\n*/\nclass JVisualSelectionListTest {"
	},
	{
		"original_code": "// PluginDataModel.java\n/*\n * Created on 10-Nov-2007\n * Copyright (C) 2007 by Andrea Vacondio.\n *\n * This program is free software; you can redistribute it and/or modify it under the terms of the \n * GNU General Public License as published by the Free Software Foundation; \n * either version 2 of the License.\n * This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; \n * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. \n * See the GNU General Public License for more details.\n * You should have received a copy of the GNU General Public License along with this program; \n * if not, write to the Free Software Foundation, Inc., \n *  59 Temple Place, Suite 330, Boston, MA 02111-1307 USA\n */\npackage org.pdfsam.guiclient.plugins.models;\n\nimport java.io.Serializable;\n\n/**\n * model for the plugins infos\n * @author Andrea Vacondio\n */\npublic class PluginDataModel implements Serializable, Comparable<PluginDataModel> {\n\n    private static final long serialVersionUID = -6370626489857359727L;\n\n    private String name;\n\n    private String version;\n\n    private String author;\n\n    private String className;\n\n    public PluginDataModel() {\n    }\n\n    public PluginDataModel(String name, String version, String author, String className) {\n        this.name = name;\n        this.version = version;\n        this.author = author;\n        this.className = className;\n    }\n\n    /**\n     * @return the author\n     */\n    public String getAuthor() {\n        return author;\n    }\n\n    /**\n     * @param author the author to set\n     */\n    public void setAuthor(String author) {\n        this.author = author;\n    }\n\n    /**\n     * @return the name\n     */\n    public String getName() {\n        return name;\n    }\n\n    /**\n     * @param name the name to set\n     */\n    public void setName(String name) {\n        this.name = name;\n    }\n\n    /**\n     * @return the version\n     */\n    public String getVersion() {\n        return version;\n    }\n\n    /**\n     * @param version the version to set\n     */\n    public void setVersion(String version) {\n        this.version = version;\n    }\n\n    /**\n     * @return the className\n     */\n    public String getClassName() {\n        return className;\n    }\n\n    /**\n     * @param className the className to set\n     */\n    public void setClassName(String className) {\n        this.className = className;\n    }\n\n    /* (non-Javadoc)\n\t * @see java.lang.Object#hashCode()\n\t */\n    @Override\n    public int hashCode() {\n        final int prime = 31;\n        int result = 1;\n        result = prime * result + ((author == null) ? 0 : author.hashCode());\n        result = prime * result + ((className == null) ? 0 : className.hashCode());\n        result = prime * result + ((name == null) ? 0 : name.hashCode());\n        result = prime * result + ((version == null) ? 0 : version.hashCode());\n        return result;\n    }\n\n    /* (non-Javadoc)\n\t * @see java.lang.Object#equals(java.lang.Object)\n\t */\n    @Override\n    public boolean equals(Object obj) {\n        if (this == obj)\n            return true;\n        if (obj == null)\n            return false;\n        if (getClass() != obj.getClass())\n            return false;\n        PluginDataModel other = (PluginDataModel) obj;\n        if (author == null) {\n            if (other.author != null)\n                return false;\n        } else if (!author.equals(other.author))\n            return false;\n        if (className == null) {\n            if (other.className != null)\n                return false;\n        } else if (!className.equals(other.className))\n            return false;\n        if (name == null) {\n            if (other.name != null)\n                return false;\n        } else if (!name.equals(other.name))\n            return false;\n        if (version == null) {\n            if (other.version != null)\n                return false;\n        } else if (!version.equals(other.version))\n            return false;\n        return true;\n    }\n\n    public String toString() {\n        return name;\n    }\n\n    public int compareTo(PluginDataModel o) {\n        if (name != null) {\n            return name.compareTo(o.getName());\n        } else {\n            throw new NullPointerException();\n        }\n    }\n}\n",
		"id": "EvoSuiteBenchmark/109_pdfsam/src/main/java/org/pdfsam/guiclient/plugins/models/PluginDataModelTest0.java",
		"test_prompt": "// PluginDataModelTest0.java\npackage org.pdfsam.guiclient.plugins.models;\n\nimport java.io.Serializable;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link PluginDataModel}.\n* It contains ten unit test cases for the {@link PluginDataModel#hashCode()} method.\n*/\nclass PluginDataModelTest0 {"
	},
	{
		"original_code": "// PluginDataModel.java\n/*\n * Created on 10-Nov-2007\n * Copyright (C) 2007 by Andrea Vacondio.\n *\n * This program is free software; you can redistribute it and/or modify it under the terms of the \n * GNU General Public License as published by the Free Software Foundation; \n * either version 2 of the License.\n * This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; \n * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. \n * See the GNU General Public License for more details.\n * You should have received a copy of the GNU General Public License along with this program; \n * if not, write to the Free Software Foundation, Inc., \n *  59 Temple Place, Suite 330, Boston, MA 02111-1307 USA\n */\npackage org.pdfsam.guiclient.plugins.models;\n\nimport java.io.Serializable;\n\n/**\n * model for the plugins infos\n * @author Andrea Vacondio\n */\npublic class PluginDataModel implements Serializable, Comparable<PluginDataModel> {\n\n    private static final long serialVersionUID = -6370626489857359727L;\n\n    private String name;\n\n    private String version;\n\n    private String author;\n\n    private String className;\n\n    public PluginDataModel() {\n    }\n\n    public PluginDataModel(String name, String version, String author, String className) {\n        this.name = name;\n        this.version = version;\n        this.author = author;\n        this.className = className;\n    }\n\n    /**\n     * @return the author\n     */\n    public String getAuthor() {\n        return author;\n    }\n\n    /**\n     * @param author the author to set\n     */\n    public void setAuthor(String author) {\n        this.author = author;\n    }\n\n    /**\n     * @return the name\n     */\n    public String getName() {\n        return name;\n    }\n\n    /**\n     * @param name the name to set\n     */\n    public void setName(String name) {\n        this.name = name;\n    }\n\n    /**\n     * @return the version\n     */\n    public String getVersion() {\n        return version;\n    }\n\n    /**\n     * @param version the version to set\n     */\n    public void setVersion(String version) {\n        this.version = version;\n    }\n\n    /**\n     * @return the className\n     */\n    public String getClassName() {\n        return className;\n    }\n\n    /**\n     * @param className the className to set\n     */\n    public void setClassName(String className) {\n        this.className = className;\n    }\n\n    /* (non-Javadoc)\n\t * @see java.lang.Object#hashCode()\n\t */\n    @Override\n    public int hashCode() {\n        final int prime = 31;\n        int result = 1;\n        result = prime * result + ((author == null) ? 0 : author.hashCode());\n        result = prime * result + ((className == null) ? 0 : className.hashCode());\n        result = prime * result + ((name == null) ? 0 : name.hashCode());\n        result = prime * result + ((version == null) ? 0 : version.hashCode());\n        return result;\n    }\n\n    /* (non-Javadoc)\n\t * @see java.lang.Object#equals(java.lang.Object)\n\t */\n    @Override\n    public boolean equals(Object obj) {\n        if (this == obj)\n            return true;\n        if (obj == null)\n            return false;\n        if (getClass() != obj.getClass())\n            return false;\n        PluginDataModel other = (PluginDataModel) obj;\n        if (author == null) {\n            if (other.author != null)\n                return false;\n        } else if (!author.equals(other.author))\n            return false;\n        if (className == null) {\n            if (other.className != null)\n                return false;\n        } else if (!className.equals(other.className))\n            return false;\n        if (name == null) {\n            if (other.name != null)\n                return false;\n        } else if (!name.equals(other.name))\n            return false;\n        if (version == null) {\n            if (other.version != null)\n                return false;\n        } else if (!version.equals(other.version))\n            return false;\n        return true;\n    }\n\n    public String toString() {\n        return name;\n    }\n\n    public int compareTo(PluginDataModel o) {\n        if (name != null) {\n            return name.compareTo(o.getName());\n        } else {\n            throw new NullPointerException();\n        }\n    }\n}\n",
		"id": "EvoSuiteBenchmark/109_pdfsam/src/main/java/org/pdfsam/guiclient/plugins/models/PluginDataModelTest1.java",
		"test_prompt": "// PluginDataModelTest1.java\npackage org.pdfsam.guiclient.plugins.models;\n\nimport java.io.Serializable;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link PluginDataModel}.\n* It contains ten unit test cases for the {@link PluginDataModel#equals(Object)} method.\n*/\nclass PluginDataModelTest1 {"
	},
	{
		"original_code": "// PluginDataModel.java\n/*\n * Created on 10-Nov-2007\n * Copyright (C) 2007 by Andrea Vacondio.\n *\n * This program is free software; you can redistribute it and/or modify it under the terms of the \n * GNU General Public License as published by the Free Software Foundation; \n * either version 2 of the License.\n * This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; \n * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. \n * See the GNU General Public License for more details.\n * You should have received a copy of the GNU General Public License along with this program; \n * if not, write to the Free Software Foundation, Inc., \n *  59 Temple Place, Suite 330, Boston, MA 02111-1307 USA\n */\npackage org.pdfsam.guiclient.plugins.models;\n\nimport java.io.Serializable;\n\n/**\n * model for the plugins infos\n * @author Andrea Vacondio\n */\npublic class PluginDataModel implements Serializable, Comparable<PluginDataModel> {\n\n    private static final long serialVersionUID = -6370626489857359727L;\n\n    private String name;\n\n    private String version;\n\n    private String author;\n\n    private String className;\n\n    public PluginDataModel() {\n    }\n\n    public PluginDataModel(String name, String version, String author, String className) {\n        this.name = name;\n        this.version = version;\n        this.author = author;\n        this.className = className;\n    }\n\n    /**\n     * @return the author\n     */\n    public String getAuthor() {\n        return author;\n    }\n\n    /**\n     * @param author the author to set\n     */\n    public void setAuthor(String author) {\n        this.author = author;\n    }\n\n    /**\n     * @return the name\n     */\n    public String getName() {\n        return name;\n    }\n\n    /**\n     * @param name the name to set\n     */\n    public void setName(String name) {\n        this.name = name;\n    }\n\n    /**\n     * @return the version\n     */\n    public String getVersion() {\n        return version;\n    }\n\n    /**\n     * @param version the version to set\n     */\n    public void setVersion(String version) {\n        this.version = version;\n    }\n\n    /**\n     * @return the className\n     */\n    public String getClassName() {\n        return className;\n    }\n\n    /**\n     * @param className the className to set\n     */\n    public void setClassName(String className) {\n        this.className = className;\n    }\n\n    /* (non-Javadoc)\n\t * @see java.lang.Object#hashCode()\n\t */\n    @Override\n    public int hashCode() {\n        final int prime = 31;\n        int result = 1;\n        result = prime * result + ((author == null) ? 0 : author.hashCode());\n        result = prime * result + ((className == null) ? 0 : className.hashCode());\n        result = prime * result + ((name == null) ? 0 : name.hashCode());\n        result = prime * result + ((version == null) ? 0 : version.hashCode());\n        return result;\n    }\n\n    /* (non-Javadoc)\n\t * @see java.lang.Object#equals(java.lang.Object)\n\t */\n    @Override\n    public boolean equals(Object obj) {\n        if (this == obj)\n            return true;\n        if (obj == null)\n            return false;\n        if (getClass() != obj.getClass())\n            return false;\n        PluginDataModel other = (PluginDataModel) obj;\n        if (author == null) {\n            if (other.author != null)\n                return false;\n        } else if (!author.equals(other.author))\n            return false;\n        if (className == null) {\n            if (other.className != null)\n                return false;\n        } else if (!className.equals(other.className))\n            return false;\n        if (name == null) {\n            if (other.name != null)\n                return false;\n        } else if (!name.equals(other.name))\n            return false;\n        if (version == null) {\n            if (other.version != null)\n                return false;\n        } else if (!version.equals(other.version))\n            return false;\n        return true;\n    }\n\n    public String toString() {\n        return name;\n    }\n\n    public int compareTo(PluginDataModel o) {\n        if (name != null) {\n            return name.compareTo(o.getName());\n        } else {\n            throw new NullPointerException();\n        }\n    }\n}\n",
		"id": "EvoSuiteBenchmark/109_pdfsam/src/main/java/org/pdfsam/guiclient/plugins/models/PluginDataModelTest2.java",
		"test_prompt": "// PluginDataModelTest2.java\npackage org.pdfsam.guiclient.plugins.models;\n\nimport java.io.Serializable;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link PluginDataModel}.\n* It contains ten unit test cases for the {@link PluginDataModel#compareTo(PluginDataModel)} method.\n*/\nclass PluginDataModelTest2 {"
	},
	{
		"original_code": "// PluginsTableModel.java\n/*\r\n * Created on 08-Feb-2006\r\n * Model for the list plugins table\r\n * Copyright (C) 2006 by Andrea Vacondio.\r\n *\r\n * This program is free software; you can redistribute it and/or modify it under the terms of the \r\n * GNU General Public License as published by the Free Software Foundation; \r\n * either version 2 of the License.\r\n * This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; \r\n * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. \r\n * See the GNU General Public License for more details.\r\n * You should have received a copy of the GNU General Public License along with this program; \r\n * if not, write to the Free Software Foundation, Inc., \r\n *  59 Temple Place, Suite 330, Boston, MA 02111-1307 USA\r\n */\r\npackage org.pdfsam.guiclient.plugins.models;\r\n\r\nimport java.util.ArrayList;\r\nimport java.util.Map;\r\nimport javax.swing.table.AbstractTableModel;\r\nimport org.pdfsam.guiclient.plugins.interfaces.AbstractPlugablePanel;\r\n\r\n/**\r\n * Table model for the info GUI table. It shows informations about loaded plugins\r\n * @author Andrea Vacondio\r\n */\r\npublic class PluginsTableModel extends AbstractTableModel {\r\n\r\n    private static final long serialVersionUID = 7807326212787111828L;\r\n\r\n    private static final int COLUMN_NAME = 0;\r\n\r\n    private static final int COLUMN_VERSION = 1;\r\n\r\n    private static final int COLUMN_AUTHOR = 2;\r\n\r\n    //colums names\r\n    private String[] columnNames = { \"Name\", \"Version\", \"Author\" };\r\n\r\n    //data array\r\n    private ArrayList<PluginDataModel> pluginsData;\r\n\r\n    public PluginsTableModel(ArrayList<PluginDataModel> pluginsData) {\r\n        this.pluginsData = pluginsData;\r\n    }\r\n\r\n    public PluginsTableModel(Map<PluginDataModel, AbstractPlugablePanel> pluginsData) {\r\n        this.pluginsData = new ArrayList<PluginDataModel>();\r\n        for (PluginDataModel item : pluginsData.keySet()) {\r\n            this.pluginsData.add(item);\r\n        }\r\n    }\r\n\r\n    public int getColumnCount() {\r\n        return columnNames.length;\r\n    }\r\n\r\n    public int getRowCount() {\r\n        return pluginsData.size();\r\n    }\r\n\r\n    public boolean isCellEditable(int row, int col) {\r\n        return false;\r\n    }\r\n\r\n    public Object getValueAt(int rowIndex, int columnIndex) {\r\n        String retVal = \"\";\r\n        PluginDataModel panelData = (PluginDataModel) pluginsData.get(rowIndex);\r\n        if (columnIndex == PluginsTableModel.COLUMN_NAME) {\r\n            retVal = panelData.getName();\r\n        } else if (columnIndex == PluginsTableModel.COLUMN_AUTHOR) {\r\n            retVal = panelData.getAuthor();\r\n        } else if (columnIndex == PluginsTableModel.COLUMN_VERSION) {\r\n            retVal = panelData.getVersion();\r\n        }\r\n        return retVal;\r\n    }\r\n\r\n    /**\r\n     * <p> Return column name\r\n     *\r\n     * @param col Column number\r\n     * @return Column name\r\n     */\r\n    public String getColumnName(int col) {\r\n        String retVal = \"\";\r\n        try {\r\n            retVal = columnNames[col];\r\n        } catch (Exception e) {\r\n            retVal = null;\r\n        }\r\n        return retVal;\r\n    }\r\n\r\n    /**\r\n     * @param columnNames The columnNames to set.\r\n     */\r\n    public void setColumnNames(String[] columnNames) {\r\n        this.columnNames = columnNames;\r\n    }\r\n}\r\n",
		"id": "EvoSuiteBenchmark/109_pdfsam/src/main/java/org/pdfsam/guiclient/plugins/models/PluginsTableModelTest.java",
		"test_prompt": "// PluginsTableModelTest.java\npackage org.pdfsam.guiclient.plugins.models;\n\nimport java.util.ArrayList;\nimport java.util.Map;\nimport javax.swing.table.AbstractTableModel;\nimport org.pdfsam.guiclient.plugins.interfaces.AbstractPlugablePanel;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link PluginsTableModel}.\n* It contains ten unit test cases for the {@link PluginsTableModel#isCellEditable(int, int)} method.\n*/\nclass PluginsTableModelTest {"
	},
	{
		"original_code": "// PlugInsLoader.java\n/*\n * Created on 12-Nov-2007\n * Copyright (C) 2006 by Andrea Vacondio.\n *\n * This program is free software; you can redistribute it and/or modify it under the terms of the \n * GNU General Public License as published by the Free Software Foundation; \n * either version 2 of the License.\n * This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; \n * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. \n * See the GNU General Public License for more details.\n * You should have received a copy of the GNU General Public License along with this program; \n * if not, write to the Free Software Foundation, Inc., \n *  59 Temple Place, Suite 330, Boston, MA 02111-1307 USA\n */\npackage org.pdfsam.guiclient.plugins;\n\nimport java.io.File;\nimport java.net.URL;\nimport java.net.URLClassLoader;\nimport java.net.URLDecoder;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.util.TreeMap;\nimport org.apache.log4j.Logger;\nimport org.dom4j.Document;\nimport org.pdfsam.guiclient.configuration.Configuration;\nimport org.pdfsam.guiclient.exceptions.PluginException;\nimport org.pdfsam.guiclient.plugins.interfaces.AbstractPlugablePanel;\nimport org.pdfsam.guiclient.plugins.models.PluginDataModel;\nimport org.pdfsam.guiclient.utils.XmlUtility;\nimport org.pdfsam.guiclient.utils.filters.JarFilter;\nimport org.pdfsam.i18n.GettextResource;\n\n/**\n * Loader for plugins. This tries to get the plugins directory if no pluginsDirectory is given.\n * @author Andrea Vacondio\n */\npublic class PlugInsLoader {\n\n    private static final Logger log = Logger.getLogger(PlugInsLoader.class.getPackage().getName());\n\n    private File pluginsDirectory;\n\n    private File[] pluginsList;\n\n    private static final Class<?> PLUGIN_SUPER_CLASS = org.pdfsam.guiclient.plugins.interfaces.AbstractPlugablePanel.class;\n\n    /**\n     * Constructor\n     * @param pluginsDirectory Plug ins absolute path. If it's null or empty it tries to find the plugins dir.\n     * @throws PluginLoadException\n     */\n    public PlugInsLoader(String pluginsDirectory) throws PluginException {\n        if (pluginsDirectory != null && pluginsDirectory.length() > 0) {\n            this.pluginsDirectory = new File(pluginsDirectory);\n        } else {\n            try {\n                String configSearchPath = new File(URLDecoder.decode(getClass().getProtectionDomain().getCodeSource().getLocation().getPath(), \"UTF-8\")).getParent();\n                this.pluginsDirectory = new File(configSearchPath, \"plugins\");\n            } catch (Exception e) {\n                throw new PluginException(GettextResource.gettext(Configuration.getInstance().getI18nResourceBundle(), \"Error getting plugins directory.\"), e);\n            }\n        }\n        pluginsList = getPlugInsList();\n    }\n\n    /**\n     * Get the list of directories under the plugins directory\n     * @return List of plugin directories\n     * @throws PluginLoadException\n     */\n    private File[] getPlugInsList() throws PluginException {\n        ArrayList<File> retVal = new ArrayList<File>();\n        if (pluginsDirectory != null) {\n            if (pluginsDirectory.isDirectory() && pluginsDirectory.canRead()) {\n                try {\n                    File[] pluginsSubDirs = pluginsDirectory.listFiles();\n                    for (int i = 0; i < pluginsSubDirs.length; i++) {\n                        if (pluginsSubDirs[i].isDirectory()) {\n                            retVal.add(pluginsSubDirs[i]);\n                        }\n                    }\n                } catch (Exception e) {\n                    throw new PluginException(\"Error getting plugins list\", e);\n                }\n            } else {\n                throw new PluginException(GettextResource.gettext(Configuration.getInstance().getI18nResourceBundle(), \"Cannot read plugins directory \") + pluginsDirectory.getAbsolutePath());\n            }\n        } else {\n            throw new PluginException(GettextResource.gettext(Configuration.getInstance().getI18nResourceBundle(), \"Plugins directory is null.\"));\n        }\n        return (File[]) retVal.toArray(new File[retVal.size()]);\n    }\n\n    /**\n     * Print an error message if the input array is empty. Returns null if the\n     * input array is empty, files[0] if the input array contains one element,\n     * the file with the highest Last Modified Date if there are 2 or more\n     * files.\n     *\n     * @param files\n     * @param parentDirectory\n     * @return\n     */\n    private File getMostRecent(File[] files, String parentDirectory) {\n        File retVal = null;\n        if (files.length > 0) {\n            if (files.length == 1) {\n                retVal = files[0];\n            } else {\n                log.warn(GettextResource.gettext(Configuration.getInstance().getI18nResourceBundle(), \"Found many plugins in \") + parentDirectory + \".\");\n                for (File currentFile : files) {\n                    if (retVal == null || currentFile.lastModified() > retVal.lastModified()) {\n                        retVal = currentFile;\n                    }\n                }\n                log.warn(retVal.getAbsolutePath() + \" \" + GettextResource.gettext(Configuration.getInstance().getI18nResourceBundle(), \"selected as the most recent plugin\") + \".\");\n            }\n        } else {\n            log.error(GettextResource.gettext(Configuration.getInstance().getI18nResourceBundle(), \"No plugin found in \") + parentDirectory);\n        }\n        return retVal;\n    }\n\n    /**\n     * load the plugins and return\n     * @return a map(k,value) where k is the pluginDataModel and value is the instance\n     * @throws PluginException\n     */\n    public Map<PluginDataModel, AbstractPlugablePanel> loadPlugins() throws PluginException {\n        Map<PluginDataModel, AbstractPlugablePanel> retMap = new TreeMap<PluginDataModel, AbstractPlugablePanel>();\n        URLClassLoader urlClassLoader = null;\n        ArrayList<URL> urlList = new ArrayList<URL>();\n        ArrayList<String> classList = new ArrayList<String>();\n        //crates a list of URL and classes\n        for (File currentDir : pluginsList) {\n            if (currentDir != null && currentDir.isDirectory()) {\n                try {\n                    Document document = XmlUtility.parseXmlFile(new File(currentDir.getAbsolutePath(), \"config.xml\"));\n                    File[] fileList = currentDir.listFiles(new JarFilter(false));\n                    File selectedFile = getMostRecent(fileList, currentDir.getAbsolutePath());\n                    if (selectedFile != null) {\n                        urlList.add(selectedFile.toURI().toURL());\n                        classList.add(XmlUtility.getXmlValue(document, \"/plugin/data/classname\"));\n                    }\n                } catch (Exception e) {\n                    log.error(GettextResource.gettext(Configuration.getInstance().getI18nResourceBundle(), \"Exception loading plugins.\"), e);\n                }\n            } else {\n                log.error(GettextResource.gettext(Configuration.getInstance().getI18nResourceBundle(), \"Cannot read plugin directory \") + currentDir);\n            }\n        }\n        urlClassLoader = new URLClassLoader((URL[]) urlList.toArray(new URL[urlList.size()]));\n        for (String className : classList) {\n            try {\n                Class<?> currentClass = urlClassLoader.loadClass(className);\n                if ((currentClass.getSuperclass().isAssignableFrom(PLUGIN_SUPER_CLASS))) {\n                    AbstractPlugablePanel instance = (AbstractPlugablePanel) currentClass.newInstance();\n                    PluginDataModel pluginDataModel = new PluginDataModel(instance.getPluginName(), instance.getVersion(), instance.getPluginAuthor(), className);\n                    retMap.put(pluginDataModel, instance);\n                    log.info(pluginDataModel.getName() + GettextResource.gettext(Configuration.getInstance().getI18nResourceBundle(), \" plugin loaded.\"));\n                } else {\n                    log.error(GettextResource.gettext(Configuration.getInstance().getI18nResourceBundle(), \"Unable to load a plugin that is not JPanel subclass.\"));\n                }\n            } catch (Exception e) {\n                log.error(GettextResource.gettext(Configuration.getInstance().getI18nResourceBundle(), \"Error loading class \") + className, e);\n            }\n        }\n        return retMap;\n    }\n}\n",
		"id": "EvoSuiteBenchmark/109_pdfsam/src/main/java/org/pdfsam/guiclient/plugins/PlugInsLoaderTest.java",
		"test_prompt": "// PlugInsLoaderTest.java\npackage org.pdfsam.guiclient.plugins;\n\nimport java.io.File;\nimport java.net.URL;\nimport java.net.URLClassLoader;\nimport java.net.URLDecoder;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.util.TreeMap;\nimport org.apache.log4j.Logger;\nimport org.dom4j.Document;\nimport org.pdfsam.guiclient.configuration.Configuration;\nimport org.pdfsam.guiclient.exceptions.PluginException;\nimport org.pdfsam.guiclient.plugins.interfaces.AbstractPlugablePanel;\nimport org.pdfsam.guiclient.plugins.models.PluginDataModel;\nimport org.pdfsam.guiclient.utils.XmlUtility;\nimport org.pdfsam.guiclient.utils.filters.JarFilter;\nimport org.pdfsam.i18n.GettextResource;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link PlugInsLoader}.\n* It contains ten unit test cases for the {@link PlugInsLoader#loadPlugins()} method.\n*/\nclass PlugInsLoaderTest {"
	},
	{
		"original_code": "// IdManager.java\n/*\n * Created on 31-Mar-2009\n * Copyright (C) 2009 by Andrea Vacondio.\n *\n * This program is free software; you can redistribute it and/or modify it under the terms of the \n * GNU General Public License as published by the Free Software Foundation; \n * either version 2 of the License.\n * This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; \n * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. \n * See the GNU General Public License for more details.\n * You should have received a copy of the GNU General Public License along with this program; \n * if not, write to the Free Software Foundation, Inc., \n *  59 Temple Place, Suite 330, Boston, MA 02111-1307 USA\n */\npackage org.pdfsam.guiclient.business;\n\nimport java.util.HashSet;\n\n/**\n * singleton to generates a unique id\n * @author Andrea Vacondio\n */\npublic class IdManager {\n\n    private static IdManager instance = null;\n\n    private long id = 0;\n\n    private HashSet<Long> cancelledExecutions = null;\n\n    private IdManager() {\n        cancelledExecutions = new HashSet<Long>();\n    }\n\n    public static synchronized IdManager getInstance() {\n        if (instance == null) {\n            instance = new IdManager();\n        }\n        return instance;\n    }\n\n    /**\n     * @return a newly generated id\n     */\n    public synchronized long getNewId() {\n        id++;\n        return id;\n    }\n\n    public Object clone() throws CloneNotSupportedException {\n        throw new CloneNotSupportedException(\"Cannot clone IdManager object.\");\n    }\n\n    /**\n     * Threads with the given id wont generate thumbnails\n     * @param id\n     */\n    public void cancelExecution(final long id) {\n        synchronized (cancelledExecutions) {\n            cancelledExecutions.add(id);\n        }\n    }\n\n    /**\n     * @param id\n     * @return true if the execution is cancelled\n     */\n    public boolean isCancelledExecution(final long id) {\n        boolean retVal = false;\n        if (cancelledExecutions.size() > 0) {\n            retVal = cancelledExecutions.contains(id);\n        }\n        return retVal;\n    }\n\n    /**\n     * remove a cancelled execution id from the table\n     * @param id\n     */\n    public void removeCancelledExecution(final long id) {\n        synchronized (cancelledExecutions) {\n            if (cancelledExecutions.size() > 0 && cancelledExecutions.contains(id)) {\n                cancelledExecutions.remove(id);\n            }\n        }\n    }\n}\n",
		"id": "EvoSuiteBenchmark/109_pdfsam/src/main/java/org/pdfsam/guiclient/business/IdManagerTest0.java",
		"test_prompt": "// IdManagerTest0.java\npackage org.pdfsam.guiclient.business;\n\nimport java.util.HashSet;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link IdManager}.\n* It contains ten unit test cases for the {@link IdManager#getInstance()} method.\n*/\nclass IdManagerTest0 {"
	},
	{
		"original_code": "// IdManager.java\n/*\n * Created on 31-Mar-2009\n * Copyright (C) 2009 by Andrea Vacondio.\n *\n * This program is free software; you can redistribute it and/or modify it under the terms of the \n * GNU General Public License as published by the Free Software Foundation; \n * either version 2 of the License.\n * This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; \n * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. \n * See the GNU General Public License for more details.\n * You should have received a copy of the GNU General Public License along with this program; \n * if not, write to the Free Software Foundation, Inc., \n *  59 Temple Place, Suite 330, Boston, MA 02111-1307 USA\n */\npackage org.pdfsam.guiclient.business;\n\nimport java.util.HashSet;\n\n/**\n * singleton to generates a unique id\n * @author Andrea Vacondio\n */\npublic class IdManager {\n\n    private static IdManager instance = null;\n\n    private long id = 0;\n\n    private HashSet<Long> cancelledExecutions = null;\n\n    private IdManager() {\n        cancelledExecutions = new HashSet<Long>();\n    }\n\n    public static synchronized IdManager getInstance() {\n        if (instance == null) {\n            instance = new IdManager();\n        }\n        return instance;\n    }\n\n    /**\n     * @return a newly generated id\n     */\n    public synchronized long getNewId() {\n        id++;\n        return id;\n    }\n\n    public Object clone() throws CloneNotSupportedException {\n        throw new CloneNotSupportedException(\"Cannot clone IdManager object.\");\n    }\n\n    /**\n     * Threads with the given id wont generate thumbnails\n     * @param id\n     */\n    public void cancelExecution(final long id) {\n        synchronized (cancelledExecutions) {\n            cancelledExecutions.add(id);\n        }\n    }\n\n    /**\n     * @param id\n     * @return true if the execution is cancelled\n     */\n    public boolean isCancelledExecution(final long id) {\n        boolean retVal = false;\n        if (cancelledExecutions.size() > 0) {\n            retVal = cancelledExecutions.contains(id);\n        }\n        return retVal;\n    }\n\n    /**\n     * remove a cancelled execution id from the table\n     * @param id\n     */\n    public void removeCancelledExecution(final long id) {\n        synchronized (cancelledExecutions) {\n            if (cancelledExecutions.size() > 0 && cancelledExecutions.contains(id)) {\n                cancelledExecutions.remove(id);\n            }\n        }\n    }\n}\n",
		"id": "EvoSuiteBenchmark/109_pdfsam/src/main/java/org/pdfsam/guiclient/business/IdManagerTest1.java",
		"test_prompt": "// IdManagerTest1.java\npackage org.pdfsam.guiclient.business;\n\nimport java.util.HashSet;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link IdManager}.\n* It contains ten unit test cases for the {@link IdManager#clone()} method.\n*/\nclass IdManagerTest1 {"
	},
	{
		"original_code": "// IdManager.java\n/*\n * Created on 31-Mar-2009\n * Copyright (C) 2009 by Andrea Vacondio.\n *\n * This program is free software; you can redistribute it and/or modify it under the terms of the \n * GNU General Public License as published by the Free Software Foundation; \n * either version 2 of the License.\n * This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; \n * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. \n * See the GNU General Public License for more details.\n * You should have received a copy of the GNU General Public License along with this program; \n * if not, write to the Free Software Foundation, Inc., \n *  59 Temple Place, Suite 330, Boston, MA 02111-1307 USA\n */\npackage org.pdfsam.guiclient.business;\n\nimport java.util.HashSet;\n\n/**\n * singleton to generates a unique id\n * @author Andrea Vacondio\n */\npublic class IdManager {\n\n    private static IdManager instance = null;\n\n    private long id = 0;\n\n    private HashSet<Long> cancelledExecutions = null;\n\n    private IdManager() {\n        cancelledExecutions = new HashSet<Long>();\n    }\n\n    public static synchronized IdManager getInstance() {\n        if (instance == null) {\n            instance = new IdManager();\n        }\n        return instance;\n    }\n\n    /**\n     * @return a newly generated id\n     */\n    public synchronized long getNewId() {\n        id++;\n        return id;\n    }\n\n    public Object clone() throws CloneNotSupportedException {\n        throw new CloneNotSupportedException(\"Cannot clone IdManager object.\");\n    }\n\n    /**\n     * Threads with the given id wont generate thumbnails\n     * @param id\n     */\n    public void cancelExecution(final long id) {\n        synchronized (cancelledExecutions) {\n            cancelledExecutions.add(id);\n        }\n    }\n\n    /**\n     * @param id\n     * @return true if the execution is cancelled\n     */\n    public boolean isCancelledExecution(final long id) {\n        boolean retVal = false;\n        if (cancelledExecutions.size() > 0) {\n            retVal = cancelledExecutions.contains(id);\n        }\n        return retVal;\n    }\n\n    /**\n     * remove a cancelled execution id from the table\n     * @param id\n     */\n    public void removeCancelledExecution(final long id) {\n        synchronized (cancelledExecutions) {\n            if (cancelledExecutions.size() > 0 && cancelledExecutions.contains(id)) {\n                cancelledExecutions.remove(id);\n            }\n        }\n    }\n}\n",
		"id": "EvoSuiteBenchmark/109_pdfsam/src/main/java/org/pdfsam/guiclient/business/IdManagerTest2.java",
		"test_prompt": "// IdManagerTest2.java\npackage org.pdfsam.guiclient.business;\n\nimport java.util.HashSet;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link IdManager}.\n* It contains ten unit test cases for the {@link IdManager#isCancelledExecution(long)} method.\n*/\nclass IdManagerTest2 {"
	},
	{
		"original_code": "// TextPaneAppender.java\n/*\n * Created on 13-Nov-2007\n * Copyright (C) 2007 by Andrea Vacondio.\n *\n * This program is free software; you can redistribute it and/or modify it under the terms of the \n * GNU General Public License as published by the Free Software Foundation; \n * either version 2 of the License.\n * This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; \n * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. \n * See the GNU General Public License for more details.\n * You should have received a copy of the GNU General Public License along with this program; \n * if not, write to the Free Software Foundation, Inc., \n *  59 Temple Place, Suite 330, Boston, MA 02111-1307 USA\n */\npackage org.pdfsam.guiclient.business;\n\nimport java.awt.Color;\nimport java.util.Hashtable;\nimport javax.swing.JTextPane;\nimport javax.swing.text.BadLocationException;\nimport javax.swing.text.DefaultCaret;\nimport javax.swing.text.MutableAttributeSet;\nimport javax.swing.text.SimpleAttributeSet;\nimport javax.swing.text.StyleConstants;\nimport javax.swing.text.StyledDocument;\nimport org.apache.log4j.AppenderSkeleton;\nimport org.apache.log4j.Level;\nimport org.apache.log4j.spi.LoggingEvent;\n\n/**\n * JTextPane appender\n * @author Andrea Vacondio\n */\npublic class TextPaneAppender extends AppenderSkeleton {\n\n    private static JTextPane logTextArea = null;\n\n    private static StyledDocument styledDocument = null;\n\n    private static Hashtable<Level, SimpleAttributeSet> attributes = null;\n\n    public TextPaneAppender() {\n        getTextPaneInstance();\n    }\n\n    public synchronized static JTextPane getTextPaneInstance() {\n        if (logTextArea == null) {\n            logTextArea = new JTextPane();\n            logTextArea.setEditable(false);\n            logTextArea.setDragEnabled(true);\n            DefaultCaret caret = (DefaultCaret) logTextArea.getCaret();\n            caret.setUpdatePolicy(DefaultCaret.ALWAYS_UPDATE);\n            styledDocument = logTextArea.getStyledDocument();\n            createTextAttributes();\n        }\n        return logTextArea;\n    }\n\n    /**\n     * creates attributes map for message style\n     */\n    private static void createTextAttributes() {\n        attributes = new Hashtable<Level, SimpleAttributeSet>();\n        attributes.put(Level.ERROR, new SimpleAttributeSet());\n        attributes.put(Level.FATAL, new SimpleAttributeSet());\n        attributes.put(Level.WARN, new SimpleAttributeSet());\n        StyleConstants.setForeground((MutableAttributeSet) attributes.get(Level.ERROR), Color.red);\n        StyleConstants.setForeground((MutableAttributeSet) attributes.get(Level.FATAL), Color.red);\n        StyleConstants.setForeground((MutableAttributeSet) attributes.get(Level.WARN), Color.blue);\n    }\n\n    protected void append(LoggingEvent arg0) {\n        if (this.layout != null) {\n            String logText = this.layout.format(arg0);\n            StringBuilder trace = new StringBuilder(\"\");\n            try {\n                if (arg0.getThrowableInformation() != null) {\n                    String[] throwableStrings = arg0.getThrowableInformation().getThrowableStrRep();\n                    for (int i = 0; i < throwableStrings.length; i++) {\n                        trace.append(throwableStrings[i]).append(\"\\n\");\n                    }\n                }\n                if (attributes.get(arg0.getLevel()) != null) {\n                    styledDocument.insertString(styledDocument.getLength(), logText + trace.toString(), (MutableAttributeSet) attributes.get(arg0.getLevel()));\n                } else {\n                    styledDocument.insertString(styledDocument.getLength(), logText, null);\n                }\n            } catch (BadLocationException e) {\n                logTextArea.setText(logTextArea.getText() + this.layout.format(arg0));\n            }\n        }\n    }\n\n    public void close() {\n        logTextArea = null;\n    }\n\n    public boolean requiresLayout() {\n        return true;\n    }\n}\n",
		"id": "EvoSuiteBenchmark/109_pdfsam/src/main/java/org/pdfsam/guiclient/business/TextPaneAppenderTest0.java",
		"test_prompt": "// TextPaneAppenderTest0.java\npackage org.pdfsam.guiclient.business;\n\nimport java.awt.Color;\nimport java.util.Hashtable;\nimport javax.swing.JTextPane;\nimport javax.swing.text.BadLocationException;\nimport javax.swing.text.DefaultCaret;\nimport javax.swing.text.MutableAttributeSet;\nimport javax.swing.text.SimpleAttributeSet;\nimport javax.swing.text.StyleConstants;\nimport javax.swing.text.StyledDocument;\nimport org.apache.log4j.AppenderSkeleton;\nimport org.apache.log4j.Level;\nimport org.apache.log4j.spi.LoggingEvent;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link TextPaneAppender}.\n* It contains ten unit test cases for the {@link TextPaneAppender#getTextPaneInstance()} method.\n*/\nclass TextPaneAppenderTest0 {"
	},
	{
		"original_code": "// TextPaneAppender.java\n/*\n * Created on 13-Nov-2007\n * Copyright (C) 2007 by Andrea Vacondio.\n *\n * This program is free software; you can redistribute it and/or modify it under the terms of the \n * GNU General Public License as published by the Free Software Foundation; \n * either version 2 of the License.\n * This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; \n * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. \n * See the GNU General Public License for more details.\n * You should have received a copy of the GNU General Public License along with this program; \n * if not, write to the Free Software Foundation, Inc., \n *  59 Temple Place, Suite 330, Boston, MA 02111-1307 USA\n */\npackage org.pdfsam.guiclient.business;\n\nimport java.awt.Color;\nimport java.util.Hashtable;\nimport javax.swing.JTextPane;\nimport javax.swing.text.BadLocationException;\nimport javax.swing.text.DefaultCaret;\nimport javax.swing.text.MutableAttributeSet;\nimport javax.swing.text.SimpleAttributeSet;\nimport javax.swing.text.StyleConstants;\nimport javax.swing.text.StyledDocument;\nimport org.apache.log4j.AppenderSkeleton;\nimport org.apache.log4j.Level;\nimport org.apache.log4j.spi.LoggingEvent;\n\n/**\n * JTextPane appender\n * @author Andrea Vacondio\n */\npublic class TextPaneAppender extends AppenderSkeleton {\n\n    private static JTextPane logTextArea = null;\n\n    private static StyledDocument styledDocument = null;\n\n    private static Hashtable<Level, SimpleAttributeSet> attributes = null;\n\n    public TextPaneAppender() {\n        getTextPaneInstance();\n    }\n\n    public synchronized static JTextPane getTextPaneInstance() {\n        if (logTextArea == null) {\n            logTextArea = new JTextPane();\n            logTextArea.setEditable(false);\n            logTextArea.setDragEnabled(true);\n            DefaultCaret caret = (DefaultCaret) logTextArea.getCaret();\n            caret.setUpdatePolicy(DefaultCaret.ALWAYS_UPDATE);\n            styledDocument = logTextArea.getStyledDocument();\n            createTextAttributes();\n        }\n        return logTextArea;\n    }\n\n    /**\n     * creates attributes map for message style\n     */\n    private static void createTextAttributes() {\n        attributes = new Hashtable<Level, SimpleAttributeSet>();\n        attributes.put(Level.ERROR, new SimpleAttributeSet());\n        attributes.put(Level.FATAL, new SimpleAttributeSet());\n        attributes.put(Level.WARN, new SimpleAttributeSet());\n        StyleConstants.setForeground((MutableAttributeSet) attributes.get(Level.ERROR), Color.red);\n        StyleConstants.setForeground((MutableAttributeSet) attributes.get(Level.FATAL), Color.red);\n        StyleConstants.setForeground((MutableAttributeSet) attributes.get(Level.WARN), Color.blue);\n    }\n\n    protected void append(LoggingEvent arg0) {\n        if (this.layout != null) {\n            String logText = this.layout.format(arg0);\n            StringBuilder trace = new StringBuilder(\"\");\n            try {\n                if (arg0.getThrowableInformation() != null) {\n                    String[] throwableStrings = arg0.getThrowableInformation().getThrowableStrRep();\n                    for (int i = 0; i < throwableStrings.length; i++) {\n                        trace.append(throwableStrings[i]).append(\"\\n\");\n                    }\n                }\n                if (attributes.get(arg0.getLevel()) != null) {\n                    styledDocument.insertString(styledDocument.getLength(), logText + trace.toString(), (MutableAttributeSet) attributes.get(arg0.getLevel()));\n                } else {\n                    styledDocument.insertString(styledDocument.getLength(), logText, null);\n                }\n            } catch (BadLocationException e) {\n                logTextArea.setText(logTextArea.getText() + this.layout.format(arg0));\n            }\n        }\n    }\n\n    public void close() {\n        logTextArea = null;\n    }\n\n    public boolean requiresLayout() {\n        return true;\n    }\n}\n",
		"id": "EvoSuiteBenchmark/109_pdfsam/src/main/java/org/pdfsam/guiclient/business/TextPaneAppenderTest1.java",
		"test_prompt": "// TextPaneAppenderTest1.java\npackage org.pdfsam.guiclient.business;\n\nimport java.awt.Color;\nimport java.util.Hashtable;\nimport javax.swing.JTextPane;\nimport javax.swing.text.BadLocationException;\nimport javax.swing.text.DefaultCaret;\nimport javax.swing.text.MutableAttributeSet;\nimport javax.swing.text.SimpleAttributeSet;\nimport javax.swing.text.StyleConstants;\nimport javax.swing.text.StyledDocument;\nimport org.apache.log4j.AppenderSkeleton;\nimport org.apache.log4j.Level;\nimport org.apache.log4j.spi.LoggingEvent;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link TextPaneAppender}.\n* It contains ten unit test cases for the {@link TextPaneAppender#requiresLayout()} method.\n*/\nclass TextPaneAppenderTest1 {"
	},
	{
		"original_code": "// PagePreviewOpener.java\n/*\n * Created on 22-Oct-2008\n * Copyright (C) 2008 by Andrea Vacondio.\n *\n * This program is free software; you can redistribute it and/or modify it under the terms of the \n * GNU General Public License as published by the Free Software Foundation; \n * either version 2 of the License.\n * This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; \n * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. \n * See the GNU General Public License for more details.\n * You should have received a copy of the GNU General Public License along with this program; \n * if not, write to the Free Software Foundation, Inc., \n *  59 Temple Place, Suite 330, Boston, MA 02111-1307 USA\n */\npackage org.pdfsam.guiclient.business;\n\nimport java.io.File;\nimport org.apache.log4j.Logger;\nimport org.pdfsam.guiclient.business.thumbnails.ThumbnailCreatorsRegisty;\nimport org.pdfsam.guiclient.business.thumbnails.creators.ThumbnailsCreator;\nimport org.pdfsam.guiclient.commons.frames.JPagePreviewFrame;\nimport org.pdfsam.guiclient.configuration.Configuration;\nimport org.pdfsam.i18n.GettextResource;\n\n/**\n * Open a preview frame with the right page preview\n * @author Andrea Vacondio\n */\npublic class PagePreviewOpener {\n\n    private static final Logger log = Logger.getLogger(PagePreviewOpener.class.getPackage().getName());\n\n    private static PagePreviewOpener instance = null;\n\n    private JPagePreviewFrame frame = null;\n\n    private Thread imageOpener = null;\n\n    private PagePreviewOpener() {\n        init();\n    }\n\n    private void init() {\n        frame = new JPagePreviewFrame();\n        frame.setTitle(GettextResource.gettext(Configuration.getInstance().getI18nResourceBundle(), \"Image viewer\"));\n    }\n\n    public static synchronized PagePreviewOpener getInstance() {\n        if (instance == null) {\n            instance = new PagePreviewOpener();\n        }\n        return instance;\n    }\n\n    /**\n     * Creates a preview of the page and opens the frame to show it\n     * @param inputFile input file\n     * @param password document password\n     * @param page\n     */\n    public synchronized void openPreview(File inputFile, String password, int page) {\n        execute(new ImageOpener(inputFile, page, password));\n    }\n\n    /**\n     * Creates a preview of the page and opens the frame to show it\n     * @param inputFilePath input file\n     * @param password document password\n     * @param page\n     */\n    public synchronized void openPreview(String inputFilePath, String password, int page) {\n        execute(new ImageOpener(inputFilePath, page, password));\n    }\n\n    public Object clone() throws CloneNotSupportedException {\n        throw new CloneNotSupportedException(\"Cannot clone PagePreviewOpener object.\");\n    }\n\n    /**\n     * executes r\n     * @param r\n     */\n    private void execute(Runnable r) {\n        if (imageOpener != null && imageOpener.isAlive()) {\n            imageOpener.interrupt();\n        }\n        imageOpener = new Thread(r);\n        imageOpener.start();\n    }\n\n    /**\n     * Page preview creator initialization\n     */\n    private ThumbnailsCreator getCreator() {\n        return ThumbnailCreatorsRegisty.getCreator(Configuration.getInstance().getThumbnailsCreatorIdentifier());\n    }\n\n    /**\n     * generates a preview image and sets visible the frame\n     * @author Andrea Vacondio\n     */\n    private class ImageOpener implements Runnable {\n\n        private File inputFile;\n\n        private String password;\n\n        private int page;\n\n        /**\n         * @param inputFile input file to be opened\n         * @param page page of the input file\n         * @param password input file password\n         */\n        public ImageOpener(File inputFile, int page, String password) {\n            super();\n            this.inputFile = inputFile;\n            this.page = page;\n            this.password = password;\n        }\n\n        /**\n         * @param inputFilePath input file to be opened\n         * @param page page of the input file\n         * @param password input file password\n         */\n        public ImageOpener(String inputFilePath, int page, String password) {\n            super();\n            this.inputFile = new File(inputFilePath);\n            this.page = page;\n            this.password = password;\n        }\n\n        public void run() {\n            try {\n                ThumbnailsCreator creator = getCreator();\n                if (creator != null) {\n                    frame.setPagePreview(creator.getPageImage(inputFile, password, page), inputFile.getAbsolutePath());\n                    frame.setVisible(true);\n                } else {\n                    log.error(GettextResource.gettext(Configuration.getInstance().getI18nResourceBundle(), \"Unable to initialize the thumbnails creation library.\"));\n                }\n            } catch (Exception e) {\n                log.error(GettextResource.gettext(Configuration.getInstance().getI18nResourceBundle(), \"Unable to open image preview\"), e);\n            }\n        }\n    }\n}\n",
		"id": "EvoSuiteBenchmark/109_pdfsam/src/main/java/org/pdfsam/guiclient/business/PagePreviewOpenerTest0.java",
		"test_prompt": "// PagePreviewOpenerTest0.java\npackage org.pdfsam.guiclient.business;\n\nimport java.io.File;\nimport org.apache.log4j.Logger;\nimport org.pdfsam.guiclient.business.thumbnails.ThumbnailCreatorsRegisty;\nimport org.pdfsam.guiclient.business.thumbnails.creators.ThumbnailsCreator;\nimport org.pdfsam.guiclient.commons.frames.JPagePreviewFrame;\nimport org.pdfsam.guiclient.configuration.Configuration;\nimport org.pdfsam.i18n.GettextResource;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link PagePreviewOpener}.\n* It contains ten unit test cases for the {@link PagePreviewOpener#getInstance()} method.\n*/\nclass PagePreviewOpenerTest0 {"
	},
	{
		"original_code": "// PagePreviewOpener.java\n/*\n * Created on 22-Oct-2008\n * Copyright (C) 2008 by Andrea Vacondio.\n *\n * This program is free software; you can redistribute it and/or modify it under the terms of the \n * GNU General Public License as published by the Free Software Foundation; \n * either version 2 of the License.\n * This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; \n * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. \n * See the GNU General Public License for more details.\n * You should have received a copy of the GNU General Public License along with this program; \n * if not, write to the Free Software Foundation, Inc., \n *  59 Temple Place, Suite 330, Boston, MA 02111-1307 USA\n */\npackage org.pdfsam.guiclient.business;\n\nimport java.io.File;\nimport org.apache.log4j.Logger;\nimport org.pdfsam.guiclient.business.thumbnails.ThumbnailCreatorsRegisty;\nimport org.pdfsam.guiclient.business.thumbnails.creators.ThumbnailsCreator;\nimport org.pdfsam.guiclient.commons.frames.JPagePreviewFrame;\nimport org.pdfsam.guiclient.configuration.Configuration;\nimport org.pdfsam.i18n.GettextResource;\n\n/**\n * Open a preview frame with the right page preview\n * @author Andrea Vacondio\n */\npublic class PagePreviewOpener {\n\n    private static final Logger log = Logger.getLogger(PagePreviewOpener.class.getPackage().getName());\n\n    private static PagePreviewOpener instance = null;\n\n    private JPagePreviewFrame frame = null;\n\n    private Thread imageOpener = null;\n\n    private PagePreviewOpener() {\n        init();\n    }\n\n    private void init() {\n        frame = new JPagePreviewFrame();\n        frame.setTitle(GettextResource.gettext(Configuration.getInstance().getI18nResourceBundle(), \"Image viewer\"));\n    }\n\n    public static synchronized PagePreviewOpener getInstance() {\n        if (instance == null) {\n            instance = new PagePreviewOpener();\n        }\n        return instance;\n    }\n\n    /**\n     * Creates a preview of the page and opens the frame to show it\n     * @param inputFile input file\n     * @param password document password\n     * @param page\n     */\n    public synchronized void openPreview(File inputFile, String password, int page) {\n        execute(new ImageOpener(inputFile, page, password));\n    }\n\n    /**\n     * Creates a preview of the page and opens the frame to show it\n     * @param inputFilePath input file\n     * @param password document password\n     * @param page\n     */\n    public synchronized void openPreview(String inputFilePath, String password, int page) {\n        execute(new ImageOpener(inputFilePath, page, password));\n    }\n\n    public Object clone() throws CloneNotSupportedException {\n        throw new CloneNotSupportedException(\"Cannot clone PagePreviewOpener object.\");\n    }\n\n    /**\n     * executes r\n     * @param r\n     */\n    private void execute(Runnable r) {\n        if (imageOpener != null && imageOpener.isAlive()) {\n            imageOpener.interrupt();\n        }\n        imageOpener = new Thread(r);\n        imageOpener.start();\n    }\n\n    /**\n     * Page preview creator initialization\n     */\n    private ThumbnailsCreator getCreator() {\n        return ThumbnailCreatorsRegisty.getCreator(Configuration.getInstance().getThumbnailsCreatorIdentifier());\n    }\n\n    /**\n     * generates a preview image and sets visible the frame\n     * @author Andrea Vacondio\n     */\n    private class ImageOpener implements Runnable {\n\n        private File inputFile;\n\n        private String password;\n\n        private int page;\n\n        /**\n         * @param inputFile input file to be opened\n         * @param page page of the input file\n         * @param password input file password\n         */\n        public ImageOpener(File inputFile, int page, String password) {\n            super();\n            this.inputFile = inputFile;\n            this.page = page;\n            this.password = password;\n        }\n\n        /**\n         * @param inputFilePath input file to be opened\n         * @param page page of the input file\n         * @param password input file password\n         */\n        public ImageOpener(String inputFilePath, int page, String password) {\n            super();\n            this.inputFile = new File(inputFilePath);\n            this.page = page;\n            this.password = password;\n        }\n\n        public void run() {\n            try {\n                ThumbnailsCreator creator = getCreator();\n                if (creator != null) {\n                    frame.setPagePreview(creator.getPageImage(inputFile, password, page), inputFile.getAbsolutePath());\n                    frame.setVisible(true);\n                } else {\n                    log.error(GettextResource.gettext(Configuration.getInstance().getI18nResourceBundle(), \"Unable to initialize the thumbnails creation library.\"));\n                }\n            } catch (Exception e) {\n                log.error(GettextResource.gettext(Configuration.getInstance().getI18nResourceBundle(), \"Unable to open image preview\"), e);\n            }\n        }\n    }\n}\n",
		"id": "EvoSuiteBenchmark/109_pdfsam/src/main/java/org/pdfsam/guiclient/business/PagePreviewOpenerTest1.java",
		"test_prompt": "// PagePreviewOpenerTest1.java\npackage org.pdfsam.guiclient.business;\n\nimport java.io.File;\nimport org.apache.log4j.Logger;\nimport org.pdfsam.guiclient.business.thumbnails.ThumbnailCreatorsRegisty;\nimport org.pdfsam.guiclient.business.thumbnails.creators.ThumbnailsCreator;\nimport org.pdfsam.guiclient.commons.frames.JPagePreviewFrame;\nimport org.pdfsam.guiclient.configuration.Configuration;\nimport org.pdfsam.i18n.GettextResource;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link PagePreviewOpener}.\n* It contains ten unit test cases for the {@link PagePreviewOpener#clone()} method.\n*/\nclass PagePreviewOpenerTest1 {"
	},
	{
		"original_code": "// ThumbnailCreatorsRegisty.java\n/*\n * Created on 15-May-2008\n * Copyright (C) 2008 by Andrea Vacondio.\n *\n * This program is free software; you can redistribute it and/or modify it under the terms of the \n * GNU General Public License as published by the Free Software Foundation; \n * either version 2 of the License.\n * This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; \n * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. \n * See the GNU General Public License for more details.\n * You should have received a copy of the GNU General Public License along with this program; \n * if not, write to the Free Software Foundation, Inc., \n *  59 Temple Place, Suite 330, Boston, MA 02111-1307 USA\n */\npackage org.pdfsam.guiclient.business.thumbnails;\n\nimport java.util.ArrayList;\nimport java.util.List;\nimport java.util.ServiceLoader;\nimport org.pdfsam.guiclient.business.thumbnails.creators.ThumbnailsCreator;\nimport org.pdfsam.guiclient.dto.StringItem;\n\n/**\n * Registy of the installed ThumbnailCreators\n *\n * @author Andrea Vacondio\n */\npublic class ThumbnailCreatorsRegisty {\n\n    private static ServiceLoader<ThumbnailsCreator> CREATORS = ServiceLoader.load(ThumbnailsCreator.class);\n\n    /**\n     * @param identifier\n     * @return The requested {@link ThumbnailsCreator} or the first available of the requested one is not available. Returns null if no {@link ThumbnailsCreator} is available.\n     */\n    public static ThumbnailsCreator getCreator(String identifier) {\n        ThumbnailsCreator retVal = null;\n        if (CREATORS != null && identifier != null && identifier.length() > 0) {\n            for (ThumbnailsCreator creator : CREATORS) {\n                if (identifier.equals(creator.getCreatorIdentifier())) {\n                    retVal = creator;\n                    break;\n                }\n            }\n        }\n        // set the default one\n        if (retVal == null) {\n            for (ThumbnailsCreator creator : CREATORS) {\n                retVal = creator;\n                break;\n            }\n        }\n        return retVal;\n    }\n\n    /**\n     * @return a list of the available CREATORS\n     */\n    public static List<StringItem> getInstalledCreators() {\n        List<StringItem> retVal = new ArrayList<StringItem>();\n        for (ThumbnailsCreator creator : CREATORS) {\n            retVal.add(new StringItem(creator.getCreatorIdentifier(), creator.getCreatorName()));\n        }\n        return retVal;\n    }\n\n    /**\n     * Creates the services from the given class loader. Useful when new jars/classes are loaded at runtime\n     */\n    public static void reload(ClassLoader cl) {\n        CREATORS = ServiceLoader.load(ThumbnailsCreator.class, cl);\n    }\n}\n",
		"id": "EvoSuiteBenchmark/109_pdfsam/src/main/java/org/pdfsam/guiclient/business/thumbnails/ThumbnailCreatorsRegistyTest0.java",
		"test_prompt": "// ThumbnailCreatorsRegistyTest0.java\npackage org.pdfsam.guiclient.business.thumbnails;\n\nimport java.util.ArrayList;\nimport java.util.List;\nimport java.util.ServiceLoader;\nimport org.pdfsam.guiclient.business.thumbnails.creators.ThumbnailsCreator;\nimport org.pdfsam.guiclient.dto.StringItem;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link ThumbnailCreatorsRegisty}.\n* It contains ten unit test cases for the {@link ThumbnailCreatorsRegisty#getCreator(String)} method.\n*/\nclass ThumbnailCreatorsRegistyTest0 {"
	},
	{
		"original_code": "// ThumbnailCreatorsRegisty.java\n/*\n * Created on 15-May-2008\n * Copyright (C) 2008 by Andrea Vacondio.\n *\n * This program is free software; you can redistribute it and/or modify it under the terms of the \n * GNU General Public License as published by the Free Software Foundation; \n * either version 2 of the License.\n * This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; \n * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. \n * See the GNU General Public License for more details.\n * You should have received a copy of the GNU General Public License along with this program; \n * if not, write to the Free Software Foundation, Inc., \n *  59 Temple Place, Suite 330, Boston, MA 02111-1307 USA\n */\npackage org.pdfsam.guiclient.business.thumbnails;\n\nimport java.util.ArrayList;\nimport java.util.List;\nimport java.util.ServiceLoader;\nimport org.pdfsam.guiclient.business.thumbnails.creators.ThumbnailsCreator;\nimport org.pdfsam.guiclient.dto.StringItem;\n\n/**\n * Registy of the installed ThumbnailCreators\n *\n * @author Andrea Vacondio\n */\npublic class ThumbnailCreatorsRegisty {\n\n    private static ServiceLoader<ThumbnailsCreator> CREATORS = ServiceLoader.load(ThumbnailsCreator.class);\n\n    /**\n     * @param identifier\n     * @return The requested {@link ThumbnailsCreator} or the first available of the requested one is not available. Returns null if no {@link ThumbnailsCreator} is available.\n     */\n    public static ThumbnailsCreator getCreator(String identifier) {\n        ThumbnailsCreator retVal = null;\n        if (CREATORS != null && identifier != null && identifier.length() > 0) {\n            for (ThumbnailsCreator creator : CREATORS) {\n                if (identifier.equals(creator.getCreatorIdentifier())) {\n                    retVal = creator;\n                    break;\n                }\n            }\n        }\n        // set the default one\n        if (retVal == null) {\n            for (ThumbnailsCreator creator : CREATORS) {\n                retVal = creator;\n                break;\n            }\n        }\n        return retVal;\n    }\n\n    /**\n     * @return a list of the available CREATORS\n     */\n    public static List<StringItem> getInstalledCreators() {\n        List<StringItem> retVal = new ArrayList<StringItem>();\n        for (ThumbnailsCreator creator : CREATORS) {\n            retVal.add(new StringItem(creator.getCreatorIdentifier(), creator.getCreatorName()));\n        }\n        return retVal;\n    }\n\n    /**\n     * Creates the services from the given class loader. Useful when new jars/classes are loaded at runtime\n     */\n    public static void reload(ClassLoader cl) {\n        CREATORS = ServiceLoader.load(ThumbnailsCreator.class, cl);\n    }\n}\n",
		"id": "EvoSuiteBenchmark/109_pdfsam/src/main/java/org/pdfsam/guiclient/business/thumbnails/ThumbnailCreatorsRegistyTest1.java",
		"test_prompt": "// ThumbnailCreatorsRegistyTest1.java\npackage org.pdfsam.guiclient.business.thumbnails;\n\nimport java.util.ArrayList;\nimport java.util.List;\nimport java.util.ServiceLoader;\nimport org.pdfsam.guiclient.business.thumbnails.creators.ThumbnailsCreator;\nimport org.pdfsam.guiclient.dto.StringItem;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link ThumbnailCreatorsRegisty}.\n* It contains ten unit test cases for the {@link ThumbnailCreatorsRegisty#getInstalledCreators()} method.\n*/\nclass ThumbnailCreatorsRegistyTest1 {"
	},
	{
		"original_code": "// JPodCreatorCloser.java\n/*\n * Created on 12-May-2009\n * Copyright (C) 2009 by Andrea Vacondio.\n *\n * This program is free software; you can redistribute it and/or modify it under the terms of the \n * GNU General Public License as published by the Free Software Foundation; \n * either version 2 of the License.\n * This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; \n * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. \n * See the GNU General Public License for more details.\n * You should have received a copy of the GNU General Public License along with this program; \n * if not, write to the Free Software Foundation, Inc., \n *  59 Temple Place, Suite 330, Boston, MA 02111-1307 USA\n */\npackage org.pdfsam.guiclient.business.thumbnails.callables;\n\nimport java.util.concurrent.Callable;\nimport org.apache.log4j.Logger;\nimport org.pdfsam.guiclient.configuration.Configuration;\nimport org.pdfsam.i18n.GettextResource;\nimport de.intarsys.pdf.pd.PDDocument;\n\n/**\n * called to close the jpod resources\n * @author Andrea Vacondio\n */\npublic class JPodCreatorCloser implements Callable<Boolean> {\n\n    private static final Logger log = Logger.getLogger(JPodCreatorCloser.class.getPackage().getName());\n\n    private PDDocument pdfDoc;\n\n    public JPodCreatorCloser(PDDocument pdfDoc) {\n        super();\n        this.pdfDoc = pdfDoc;\n    }\n\n    public Boolean call() {\n        Boolean retVal = Boolean.FALSE;\n        try {\n            if (pdfDoc != null) {\n                pdfDoc.close();\n                pdfDoc = null;\n                retVal = Boolean.TRUE;\n            }\n        } catch (Exception e) {\n            log.error(GettextResource.gettext(Configuration.getInstance().getI18nResourceBundle(), \"Unable to close thumbnail creator\"), e);\n        }\n        return retVal;\n    }\n}\n",
		"id": "EvoSuiteBenchmark/109_pdfsam/src/main/java/org/pdfsam/guiclient/business/thumbnails/callables/JPodCreatorCloserTest.java",
		"test_prompt": "// JPodCreatorCloserTest.java\npackage org.pdfsam.guiclient.business.thumbnails.callables;\n\nimport java.util.concurrent.Callable;\nimport org.apache.log4j.Logger;\nimport org.pdfsam.guiclient.configuration.Configuration;\nimport org.pdfsam.i18n.GettextResource;\nimport de.intarsys.pdf.pd.PDDocument;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link JPodCreatorCloser}.\n* It contains ten unit test cases for the {@link JPodCreatorCloser#call()} method.\n*/\nclass JPodCreatorCloserTest {"
	},
	{
		"original_code": "// IcdPdfCreatorCloser.java\n/*\n * Created on 06-Sep-2009\n * Copyright (C) 2009 by Andrea Vacondio.\n *\n * This program is free software; you can redistribute it and/or modify it under the terms of the \n * GNU General Public License as published by the Free Software Foundation; \n * either version 2 of the License.\n * This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; \n * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. \n * See the GNU General Public License for more details.\n * You should have received a copy of the GNU General Public License along with this program; \n * if not, write to the Free Software Foundation, Inc., \n *  59 Temple Place, Suite 330, Boston, MA 02111-1307 USA\n */\npackage org.pdfsam.guiclient.business.thumbnails.callables;\n\nimport java.util.concurrent.Callable;\nimport org.apache.log4j.Logger;\nimport org.icepdf.core.pobjects.Document;\nimport org.pdfsam.guiclient.configuration.Configuration;\nimport org.pdfsam.i18n.GettextResource;\n\n/**\n * called to close the ICEpdf resources\n * @author Andrea Vacondio\n */\npublic class IcdPdfCreatorCloser implements Callable<Boolean> {\n\n    private static final Logger log = Logger.getLogger(IcdPdfCreatorCloser.class.getPackage().getName());\n\n    private Document pdfDocument;\n\n    public IcdPdfCreatorCloser(Document pdfDocument) {\n        super();\n        this.pdfDocument = pdfDocument;\n    }\n\n    public Boolean call() {\n        Boolean retVal = Boolean.FALSE;\n        try {\n            if (pdfDocument != null) {\n                pdfDocument.dispose();\n                pdfDocument = null;\n                retVal = Boolean.TRUE;\n            }\n        } catch (Exception e) {\n            log.error(GettextResource.gettext(Configuration.getInstance().getI18nResourceBundle(), \"Unable to close thumbnail creator\"), e);\n        }\n        return retVal;\n    }\n}\n",
		"id": "EvoSuiteBenchmark/109_pdfsam/src/main/java/org/pdfsam/guiclient/business/thumbnails/callables/IcdPdfCreatorCloserTest.java",
		"test_prompt": "// IcdPdfCreatorCloserTest.java\npackage org.pdfsam.guiclient.business.thumbnails.callables;\n\nimport java.util.concurrent.Callable;\nimport org.apache.log4j.Logger;\nimport org.icepdf.core.pobjects.Document;\nimport org.pdfsam.guiclient.configuration.Configuration;\nimport org.pdfsam.i18n.GettextResource;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link IcdPdfCreatorCloser}.\n* It contains ten unit test cases for the {@link IcdPdfCreatorCloser#call()} method.\n*/\nclass IcdPdfCreatorCloserTest {"
	},
	{
		"original_code": "// JPodThmbnailCallable.java\n/*\n * Created on 12-May-2009\n * Copyright (C) 2009 by Andrea Vacondio.\n *\n * This program is free software; you can redistribute it and/or modify it under the terms of the \n * GNU General Public License as published by the Free Software Foundation; \n * either version 2 of the License.\n * This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; \n * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. \n * See the GNU General Public License for more details.\n * You should have received a copy of the GNU General Public License along with this program; \n * if not, write to the Free Software Foundation, Inc., \n *  59 Temple Place, Suite 330, Boston, MA 02111-1307 USA\n */\npackage org.pdfsam.guiclient.business.thumbnails.callables;\n\nimport java.awt.Color;\nimport java.awt.Graphics2D;\nimport java.awt.geom.AffineTransform;\nimport java.awt.geom.Rectangle2D;\nimport java.awt.image.BufferedImage;\nimport java.util.concurrent.Callable;\nimport org.apache.log4j.Logger;\nimport org.pdfsam.guiclient.business.IdManager;\nimport org.pdfsam.guiclient.business.thumbnails.JPodRenderer;\nimport org.pdfsam.guiclient.business.thumbnails.creators.JPodThumbnailCreator;\nimport org.pdfsam.guiclient.business.thumbnails.creators.ThumbnailsCreator;\nimport org.pdfsam.guiclient.commons.models.VisualListModel;\nimport org.pdfsam.guiclient.commons.panels.JVisualPdfPageSelectionPanel;\nimport org.pdfsam.guiclient.configuration.Configuration;\nimport org.pdfsam.guiclient.dto.Rotation;\nimport org.pdfsam.guiclient.dto.VisualPageListItem;\nimport org.pdfsam.guiclient.utils.ImageUtility;\nimport org.pdfsam.i18n.GettextResource;\nimport de.intarsys.cwt.awt.environment.CwtAwtGraphicsContext;\nimport de.intarsys.cwt.environment.IGraphicsContext;\nimport de.intarsys.pdf.content.CSContent;\nimport de.intarsys.pdf.pd.PDPage;\n\n/**\n * Callable used to generate thumbnails with JPod\n *\n * @author Andrea Vacondio\n */\npublic class JPodThmbnailCallable implements Callable<Boolean> {\n\n    private static final Logger log = Logger.getLogger(JPodThmbnailCallable.class.getPackage().getName());\n\n    private PDPage pdPage;\n\n    private JVisualPdfPageSelectionPanel panel;\n\n    private VisualPageListItem pageItem;\n\n    private long id;\n\n    /**\n     * @param pdPage\n     * @param pageItem\n     * @param panel\n     */\n    public JPodThmbnailCallable(PDPage pdPage, VisualPageListItem pageItem, JVisualPdfPageSelectionPanel panel, long id) {\n        super();\n        this.pdPage = pdPage;\n        this.pageItem = pageItem;\n        this.panel = panel;\n        this.id = id;\n    }\n\n    public Boolean call() {\n        Boolean retVal = Boolean.FALSE;\n        if (!IdManager.getInstance().isCancelledExecution(id)) {\n            IGraphicsContext graphics = null;\n            try {\n                Rectangle2D rect = pdPage.getCropBox().toNormalizedRectangle();\n                double rectHeight = rect.getHeight();\n                double recWidth = rect.getWidth();\n                double resizePercentage = getResizePercentage(rectHeight, recWidth);\n                int height = Math.round(((int) rect.getHeight()) * (float) resizePercentage);\n                int width = Math.round(((int) rect.getWidth()) * (float) resizePercentage);\n                BufferedImage imageInstance = new BufferedImage((int) recWidth, (int) rectHeight, BufferedImage.TYPE_INT_RGB);\n                Graphics2D g2 = (Graphics2D) imageInstance.getGraphics();\n                graphics = new CwtAwtGraphicsContext(g2);\n                // setup user space\n                AffineTransform imgTransform = graphics.getTransform();\n                imgTransform.scale(1, -1);\n                imgTransform.translate(-rect.getMinX(), -rect.getMaxY());\n                graphics.setTransform(imgTransform);\n                graphics.setBackgroundColor(Color.WHITE);\n                graphics.fill(rect);\n                CSContent content = pdPage.getContentStream();\n                if (content != null) {\n                    JPodRenderer renderer = new JPodRenderer(null, graphics);\n                    renderer.process(content, pdPage.getResources());\n                }\n                // pageItem.setThumbnail(scaledInstance);\n                BufferedImage scaledInstance = ImageUtility.getScaledInstance(imageInstance, width, height);\n                pageItem.setPaperFormat(recWidth, rectHeight, JPodThumbnailCreator.JPOD_RESOLUTION);\n                if (pdPage.getRotate() != 0) {\n                    pageItem.setOriginalRotation(Rotation.getRotation(pdPage.getRotate()));\n                }\n                if (pageItem.isRotated()) {\n                    pageItem.setThumbnail(ImageUtility.rotateImage(scaledInstance, pageItem.getCompleteRotation()));\n                } else {\n                    pageItem.setThumbnail(scaledInstance);\n                }\n                retVal = Boolean.TRUE;\n            } catch (Throwable t) {\n                pageItem.setThumbnail(ImageUtility.getErrorImage());\n                log.error(GettextResource.gettext(Configuration.getInstance().getI18nResourceBundle(), \"Unable to generate thumbnail\"), t);\n            } finally {\n                if (graphics != null) {\n                    graphics.dispose();\n                }\n                pdPage = null;\n            }\n            ((VisualListModel) panel.getThumbnailList().getModel()).elementChanged(pageItem);\n        }\n        return retVal;\n    }\n\n    /**\n     * @param height\n     * @param width\n     * @return percentage resize\n     */\n    private double getResizePercentage(double height, double width) {\n        double retVal = 0;\n        if (height >= width) {\n            retVal = Math.round((Configuration.getInstance().getThumbnailSize() / height) * 100.0) / 100.0;\n        } else {\n            retVal = Math.round((Configuration.getInstance().getThumbnailSize() / width) * 100.0) / 100.0;\n        }\n        return retVal < 1 ? retVal : 1d;\n    }\n}\n",
		"id": "EvoSuiteBenchmark/109_pdfsam/src/main/java/org/pdfsam/guiclient/business/thumbnails/callables/JPodThmbnailCallableTest.java",
		"test_prompt": "// JPodThmbnailCallableTest.java\npackage org.pdfsam.guiclient.business.thumbnails.callables;\n\nimport java.awt.Color;\nimport java.awt.Graphics2D;\nimport java.awt.geom.AffineTransform;\nimport java.awt.geom.Rectangle2D;\nimport java.awt.image.BufferedImage;\nimport java.util.concurrent.Callable;\nimport org.apache.log4j.Logger;\nimport org.pdfsam.guiclient.business.IdManager;\nimport org.pdfsam.guiclient.business.thumbnails.JPodRenderer;\nimport org.pdfsam.guiclient.business.thumbnails.creators.JPodThumbnailCreator;\nimport org.pdfsam.guiclient.business.thumbnails.creators.ThumbnailsCreator;\nimport org.pdfsam.guiclient.commons.models.VisualListModel;\nimport org.pdfsam.guiclient.commons.panels.JVisualPdfPageSelectionPanel;\nimport org.pdfsam.guiclient.configuration.Configuration;\nimport org.pdfsam.guiclient.dto.Rotation;\nimport org.pdfsam.guiclient.dto.VisualPageListItem;\nimport org.pdfsam.guiclient.utils.ImageUtility;\nimport org.pdfsam.i18n.GettextResource;\nimport de.intarsys.cwt.awt.environment.CwtAwtGraphicsContext;\nimport de.intarsys.cwt.environment.IGraphicsContext;\nimport de.intarsys.pdf.content.CSContent;\nimport de.intarsys.pdf.pd.PDPage;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link JPodThmbnailCallable}.\n* It contains ten unit test cases for the {@link JPodThmbnailCallable#call()} method.\n*/\nclass JPodThmbnailCallableTest {"
	},
	{
		"original_code": "// IcePdfThumbnailCallable.java\n/*\n * Created on 06-Sep-2009\n * Copyright (C) 2009 by Andrea Vacondio.\n *\n * This program is free software; you can redistribute it and/or modify it under the terms of the \n * GNU General Public License as published by the Free Software Foundation; \n * either version 2 of the License.\n * This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; \n * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. \n * See the GNU General Public License for more details.\n * You should have received a copy of the GNU General Public License along with this program; \n * if not, write to the Free Software Foundation, Inc., \n *  59 Temple Place, Suite 330, Boston, MA 02111-1307 USA\n */\npackage org.pdfsam.guiclient.business.thumbnails.callables;\n\nimport java.awt.image.BufferedImage;\nimport java.util.concurrent.Callable;\nimport org.apache.log4j.Logger;\nimport org.icepdf.core.pobjects.Document;\nimport org.icepdf.core.pobjects.PDimension;\nimport org.icepdf.core.pobjects.Page;\nimport org.icepdf.core.util.GraphicsRenderingHints;\nimport org.pdfsam.guiclient.business.IdManager;\nimport org.pdfsam.guiclient.business.thumbnails.creators.IcePdfThumbnailsCreator;\nimport org.pdfsam.guiclient.business.thumbnails.creators.ThumbnailsCreator;\nimport org.pdfsam.guiclient.commons.models.VisualListModel;\nimport org.pdfsam.guiclient.commons.panels.JVisualPdfPageSelectionPanel;\nimport org.pdfsam.guiclient.configuration.Configuration;\nimport org.pdfsam.guiclient.dto.Rotation;\nimport org.pdfsam.guiclient.dto.VisualPageListItem;\nimport org.pdfsam.guiclient.utils.ImageUtility;\nimport org.pdfsam.i18n.GettextResource;\n\n/**\n * Callable used to generate thumbnails with ICEpdf\n *\n * @author Andrea Vacondio\n */\npublic class IcePdfThumbnailCallable implements Callable<Boolean> {\n\n    private static final Logger log = Logger.getLogger(IcePdfThumbnailCallable.class.getPackage().getName());\n\n    private Document pdfDocument;\n\n    private JVisualPdfPageSelectionPanel panel;\n\n    private VisualPageListItem pageItem;\n\n    private long id;\n\n    /**\n     * @param pdfDocument\n     *            document\n     * @param panel\n     * @param pageItem\n     * @param id\n     */\n    public IcePdfThumbnailCallable(Document pdfDocument, VisualPageListItem pageItem, JVisualPdfPageSelectionPanel panel, long id) {\n        super();\n        this.pdfDocument = pdfDocument;\n        this.panel = panel;\n        this.pageItem = pageItem;\n        this.id = id;\n    }\n\n    public Boolean call() {\n        Boolean retVal = Boolean.FALSE;\n        if (!IdManager.getInstance().isCancelledExecution(id)) {\n            try {\n                int pageNumber = pageItem.getPageNumber() - 1;\n                PDimension dimensions = pdfDocument.getPageDimension(pageNumber, 0);\n                double rectHeight = dimensions.getHeight();\n                double recWidth = dimensions.getWidth();\n                float resizePercentage = (float) getResizePercentage(rectHeight, recWidth);\n                BufferedImage scaledInstance = (BufferedImage) pdfDocument.getPageImage(pageNumber, (Configuration.getInstance().isHighQualityThumbnails() ? GraphicsRenderingHints.PRINT : GraphicsRenderingHints.SCREEN), Page.BOUNDARY_CROPBOX, 0, resizePercentage);\n                pageItem.setPaperFormat(recWidth, rectHeight, IcePdfThumbnailsCreator.ICEPDF_RESOLUTION);\n                int rotation = (int) pdfDocument.getPageTree().getPage(pageNumber, this).getTotalRotation(0);\n                if (rotation != 0) {\n                    pageItem.setOriginalRotation(Rotation.getRotation(rotation));\n                }\n                pageItem.setThumbnail(scaledInstance);\n                retVal = Boolean.TRUE;\n            } catch (Throwable t) {\n                pageItem.setThumbnail(ImageUtility.getErrorImage());\n                log.error(GettextResource.gettext(Configuration.getInstance().getI18nResourceBundle(), \"Unable to generate thumbnail\"), t);\n            }\n            ((VisualListModel) panel.getThumbnailList().getModel()).elementChanged(pageItem);\n        }\n        return retVal;\n    }\n\n    /**\n     * @param height\n     * @param width\n     * @return percentage resize\n     */\n    private double getResizePercentage(double height, double width) {\n        double retVal = 0;\n        if (height >= width) {\n            retVal = Math.round((Configuration.getInstance().getThumbnailSize() / height) * 100.0) / 100.0;\n        } else {\n            retVal = Math.round((Configuration.getInstance().getThumbnailSize() / width) * 100.0) / 100.0;\n        }\n        return retVal < 1 ? retVal : 1d;\n    }\n}\n",
		"id": "EvoSuiteBenchmark/109_pdfsam/src/main/java/org/pdfsam/guiclient/business/thumbnails/callables/IcePdfThumbnailCallableTest.java",
		"test_prompt": "// IcePdfThumbnailCallableTest.java\npackage org.pdfsam.guiclient.business.thumbnails.callables;\n\nimport java.awt.image.BufferedImage;\nimport java.util.concurrent.Callable;\nimport org.apache.log4j.Logger;\nimport org.icepdf.core.pobjects.Document;\nimport org.icepdf.core.pobjects.PDimension;\nimport org.icepdf.core.pobjects.Page;\nimport org.icepdf.core.util.GraphicsRenderingHints;\nimport org.pdfsam.guiclient.business.IdManager;\nimport org.pdfsam.guiclient.business.thumbnails.creators.IcePdfThumbnailsCreator;\nimport org.pdfsam.guiclient.business.thumbnails.creators.ThumbnailsCreator;\nimport org.pdfsam.guiclient.commons.models.VisualListModel;\nimport org.pdfsam.guiclient.commons.panels.JVisualPdfPageSelectionPanel;\nimport org.pdfsam.guiclient.configuration.Configuration;\nimport org.pdfsam.guiclient.dto.Rotation;\nimport org.pdfsam.guiclient.dto.VisualPageListItem;\nimport org.pdfsam.guiclient.utils.ImageUtility;\nimport org.pdfsam.i18n.GettextResource;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link IcePdfThumbnailCallable}.\n* It contains ten unit test cases for the {@link IcePdfThumbnailCallable#call()} method.\n*/\nclass IcePdfThumbnailCallableTest {"
	},
	{
		"original_code": "// ThumbnailsExecutor.java\n/*\n * Created on 31-Mar-2009\n * Copyright (C) 2009 by Andrea Vacondio.\n *\n * This program is free software; you can redistribute it and/or modify it under the terms of the \n * GNU General Public License as published by the Free Software Foundation; \n * either version 2 of the License.\n * This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; \n * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. \n * See the GNU General Public License for more details.\n * You should have received a copy of the GNU General Public License along with this program; \n * if not, write to the Free Software Foundation, Inc., \n *  59 Temple Place, Suite 330, Boston, MA 02111-1307 USA\n */\npackage org.pdfsam.guiclient.business.thumbnails.executors;\n\nimport java.util.Collection;\nimport java.util.concurrent.Callable;\nimport java.util.concurrent.ExecutorService;\nimport java.util.concurrent.Executors;\nimport org.apache.log4j.Logger;\nimport org.pdfsam.guiclient.business.IdManager;\nimport org.pdfsam.guiclient.configuration.Configuration;\nimport org.pdfsam.i18n.GettextResource;\n\n/**\n * Singleton that executes the thumbnails creations\n *\n * @author Andrea Vacondio\n */\npublic class ThumbnailsExecutor {\n\n    private static final Logger log = Logger.getLogger(ThumbnailsExecutor.class.getPackage().getName());\n\n    private static ThumbnailsExecutor instance = null;\n\n    private ExecutorService executor = null;\n\n    private ThumbnailsExecutor() {\n        executor = Executors.newFixedThreadPool(Configuration.getInstance().getThumbCreatorPoolSize());\n    }\n\n    public static synchronized ThumbnailsExecutor getInstance() {\n        if (instance == null) {\n            instance = new ThumbnailsExecutor();\n        }\n        return instance;\n    }\n\n    public Object clone() throws CloneNotSupportedException {\n        throw new CloneNotSupportedException(\"Cannot clone ThumbnailsExecutor object.\");\n    }\n\n    /**\n     * submit c to the executor\n     *\n     * @param c\n     */\n    public synchronized void submit(Callable<?> c) {\n        getExecutor().submit(c);\n    }\n\n    /**\n     * Executes r\n     *\n     * @param r\n     */\n    public synchronized void execute(Runnable r) {\n        getExecutor().execute(r);\n    }\n\n    /**\n     * @return the executor\n     */\n    private ExecutorService getExecutor() {\n        if (executor == null || executor.isShutdown()) {\n            executor = Executors.newFixedThreadPool(Configuration.getInstance().getThumbCreatorPoolSize());\n        }\n        return executor;\n    }\n\n    /**\n     * run all the tasks and than the closeTask\n     *\n     * @param tasks\n     * @param closeTask\n     * @param id\n     */\n    public void invokeAll(Collection<? extends Callable<Boolean>> tasks, Callable<Boolean> closeTask, long id) {\n        Thread t = new Thread(new Invoker(tasks, closeTask, id));\n        t.start();\n    }\n\n    /**\n     * Used to invoke the thumbnails generation\n     *\n     * @author Andrea Vacondio\n     */\n    private class Invoker implements Runnable {\n\n        private Collection<? extends Callable<Boolean>> tasks;\n\n        private Callable<Boolean> closeTask;\n\n        private long id;\n\n        /**\n         * @param tasks\n         * @param closeTask\n         * @param id\n         */\n        public Invoker(Collection<? extends Callable<Boolean>> tasks, Callable<Boolean> closeTask, long id) {\n            super();\n            this.tasks = tasks;\n            this.closeTask = closeTask;\n            this.id = id;\n        }\n\n        public void run() {\n            try {\n                if (tasks != null && tasks.size() > 0) {\n                    long startTime = System.currentTimeMillis();\n                    getExecutor().invokeAll(tasks);\n                    // close\n                    if (closeTask != null) {\n                        getExecutor().submit(closeTask);\n                    }\n                    if (!IdManager.getInstance().isCancelledExecution(id)) {\n                        log.debug(GettextResource.gettext(Configuration.getInstance().getI18nResourceBundle(), \"Thumbnails generated in \" + (System.currentTimeMillis() - startTime) + \"ms\"));\n                    }\n                    IdManager.getInstance().removeCancelledExecution(id);\n                }\n            } catch (InterruptedException ie) {\n                log.error(GettextResource.gettext(Configuration.getInstance().getI18nResourceBundle(), \"Unable to generate thumbnail\"), ie);\n            }\n        }\n    }\n}\n",
		"id": "EvoSuiteBenchmark/109_pdfsam/src/main/java/org/pdfsam/guiclient/business/thumbnails/executors/ThumbnailsExecutorTest0.java",
		"test_prompt": "// ThumbnailsExecutorTest0.java\npackage org.pdfsam.guiclient.business.thumbnails.executors;\n\nimport java.util.Collection;\nimport java.util.concurrent.Callable;\nimport java.util.concurrent.ExecutorService;\nimport java.util.concurrent.Executors;\nimport org.apache.log4j.Logger;\nimport org.pdfsam.guiclient.business.IdManager;\nimport org.pdfsam.guiclient.configuration.Configuration;\nimport org.pdfsam.i18n.GettextResource;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link ThumbnailsExecutor}.\n* It contains ten unit test cases for the {@link ThumbnailsExecutor#getInstance()} method.\n*/\nclass ThumbnailsExecutorTest0 {"
	},
	{
		"original_code": "// ThumbnailsExecutor.java\n/*\n * Created on 31-Mar-2009\n * Copyright (C) 2009 by Andrea Vacondio.\n *\n * This program is free software; you can redistribute it and/or modify it under the terms of the \n * GNU General Public License as published by the Free Software Foundation; \n * either version 2 of the License.\n * This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; \n * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. \n * See the GNU General Public License for more details.\n * You should have received a copy of the GNU General Public License along with this program; \n * if not, write to the Free Software Foundation, Inc., \n *  59 Temple Place, Suite 330, Boston, MA 02111-1307 USA\n */\npackage org.pdfsam.guiclient.business.thumbnails.executors;\n\nimport java.util.Collection;\nimport java.util.concurrent.Callable;\nimport java.util.concurrent.ExecutorService;\nimport java.util.concurrent.Executors;\nimport org.apache.log4j.Logger;\nimport org.pdfsam.guiclient.business.IdManager;\nimport org.pdfsam.guiclient.configuration.Configuration;\nimport org.pdfsam.i18n.GettextResource;\n\n/**\n * Singleton that executes the thumbnails creations\n *\n * @author Andrea Vacondio\n */\npublic class ThumbnailsExecutor {\n\n    private static final Logger log = Logger.getLogger(ThumbnailsExecutor.class.getPackage().getName());\n\n    private static ThumbnailsExecutor instance = null;\n\n    private ExecutorService executor = null;\n\n    private ThumbnailsExecutor() {\n        executor = Executors.newFixedThreadPool(Configuration.getInstance().getThumbCreatorPoolSize());\n    }\n\n    public static synchronized ThumbnailsExecutor getInstance() {\n        if (instance == null) {\n            instance = new ThumbnailsExecutor();\n        }\n        return instance;\n    }\n\n    public Object clone() throws CloneNotSupportedException {\n        throw new CloneNotSupportedException(\"Cannot clone ThumbnailsExecutor object.\");\n    }\n\n    /**\n     * submit c to the executor\n     *\n     * @param c\n     */\n    public synchronized void submit(Callable<?> c) {\n        getExecutor().submit(c);\n    }\n\n    /**\n     * Executes r\n     *\n     * @param r\n     */\n    public synchronized void execute(Runnable r) {\n        getExecutor().execute(r);\n    }\n\n    /**\n     * @return the executor\n     */\n    private ExecutorService getExecutor() {\n        if (executor == null || executor.isShutdown()) {\n            executor = Executors.newFixedThreadPool(Configuration.getInstance().getThumbCreatorPoolSize());\n        }\n        return executor;\n    }\n\n    /**\n     * run all the tasks and than the closeTask\n     *\n     * @param tasks\n     * @param closeTask\n     * @param id\n     */\n    public void invokeAll(Collection<? extends Callable<Boolean>> tasks, Callable<Boolean> closeTask, long id) {\n        Thread t = new Thread(new Invoker(tasks, closeTask, id));\n        t.start();\n    }\n\n    /**\n     * Used to invoke the thumbnails generation\n     *\n     * @author Andrea Vacondio\n     */\n    private class Invoker implements Runnable {\n\n        private Collection<? extends Callable<Boolean>> tasks;\n\n        private Callable<Boolean> closeTask;\n\n        private long id;\n\n        /**\n         * @param tasks\n         * @param closeTask\n         * @param id\n         */\n        public Invoker(Collection<? extends Callable<Boolean>> tasks, Callable<Boolean> closeTask, long id) {\n            super();\n            this.tasks = tasks;\n            this.closeTask = closeTask;\n            this.id = id;\n        }\n\n        public void run() {\n            try {\n                if (tasks != null && tasks.size() > 0) {\n                    long startTime = System.currentTimeMillis();\n                    getExecutor().invokeAll(tasks);\n                    // close\n                    if (closeTask != null) {\n                        getExecutor().submit(closeTask);\n                    }\n                    if (!IdManager.getInstance().isCancelledExecution(id)) {\n                        log.debug(GettextResource.gettext(Configuration.getInstance().getI18nResourceBundle(), \"Thumbnails generated in \" + (System.currentTimeMillis() - startTime) + \"ms\"));\n                    }\n                    IdManager.getInstance().removeCancelledExecution(id);\n                }\n            } catch (InterruptedException ie) {\n                log.error(GettextResource.gettext(Configuration.getInstance().getI18nResourceBundle(), \"Unable to generate thumbnail\"), ie);\n            }\n        }\n    }\n}\n",
		"id": "EvoSuiteBenchmark/109_pdfsam/src/main/java/org/pdfsam/guiclient/business/thumbnails/executors/ThumbnailsExecutorTest1.java",
		"test_prompt": "// ThumbnailsExecutorTest1.java\npackage org.pdfsam.guiclient.business.thumbnails.executors;\n\nimport java.util.Collection;\nimport java.util.concurrent.Callable;\nimport java.util.concurrent.ExecutorService;\nimport java.util.concurrent.Executors;\nimport org.apache.log4j.Logger;\nimport org.pdfsam.guiclient.business.IdManager;\nimport org.pdfsam.guiclient.configuration.Configuration;\nimport org.pdfsam.i18n.GettextResource;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link ThumbnailsExecutor}.\n* It contains ten unit test cases for the {@link ThumbnailsExecutor#clone()} method.\n*/\nclass ThumbnailsExecutorTest1 {"
	},
	{
		"original_code": "// PdfVersionUtility.java\n/*\r\n * Created on 25-Dic-2007\r\n * Copyright (C) 2006 by Andrea Vacondio.\r\n *\r\n * This program is free software; you can redistribute it and/or modify it under the terms of the \r\n * GNU General Public License as published by the Free Software Foundation; \r\n * either version 2 of the License.\r\n * This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; \r\n * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. \r\n * See the GNU General Public License for more details.\r\n * You should have received a copy of the GNU General Public License along with this program; \r\n * if not, write to the Free Software Foundation, Inc., \r\n *  59 Temple Place, Suite 330, Boston, MA 02111-1307 USA\r\n */\r\npackage org.pdfsam.guiclient.utils;\r\n\r\nimport java.util.ArrayList;\r\nimport java.util.HashMap;\r\nimport org.apache.log4j.Logger;\r\nimport org.pdfsam.console.business.dto.commands.AbstractParsedCommand;\r\nimport org.pdfsam.guiclient.configuration.Configuration;\r\nimport org.pdfsam.guiclient.dto.StringItem;\r\nimport org.pdfsam.i18n.GettextResource;\r\n\r\n/**\r\n * Pdf document version utilities\r\n * @author Andrea Vacondio\r\n */\r\npublic class PdfVersionUtility {\r\n\r\n    private static final Logger log = Logger.getLogger(PdfVersionUtility.class.getPackage().getName());\r\n\r\n    private static HashMap<String, String> cache = new HashMap<String, String>();\r\n\r\n    private static ArrayList<StringItem> listCache = new ArrayList<StringItem>();\r\n\r\n    /**\r\n     * @param c pdfVersion\r\n     * @return String Version description\r\n     */\r\n    public static String getVersionDescription(char c) {\r\n        String retVal = \"\";\r\n        try {\r\n            Object description = getVersions().get(Character.toString(c));\r\n            retVal = (description != null) ? (String) description : \"\";\r\n        } catch (Exception e) {\r\n            log.error(GettextResource.gettext(Configuration.getInstance().getI18nResourceBundle(), \"Error getting pdf version description.\"), e);\r\n        }\r\n        return retVal;\r\n    }\r\n\r\n    /**\r\n     * @return a map containing every possible pdf version\r\n     */\r\n    public static HashMap<String, String> getVersions() {\r\n        if (cache.isEmpty()) {\r\n            Configuration config = Configuration.getInstance();\r\n            cache.put(Character.toString(AbstractParsedCommand.VERSION_1_2), GettextResource.gettext(config.getI18nResourceBundle(), \"Version 1.2 (Acrobat 3)\"));\r\n            cache.put(Character.toString(AbstractParsedCommand.VERSION_1_3), GettextResource.gettext(config.getI18nResourceBundle(), \"Version 1.3 (Acrobat 4)\"));\r\n            cache.put(Character.toString(AbstractParsedCommand.VERSION_1_4), GettextResource.gettext(config.getI18nResourceBundle(), \"Version 1.4 (Acrobat 5)\"));\r\n            cache.put(Character.toString(AbstractParsedCommand.VERSION_1_5), GettextResource.gettext(config.getI18nResourceBundle(), \"Version 1.5 (Acrobat 6)\"));\r\n            cache.put(Character.toString(AbstractParsedCommand.VERSION_1_6), GettextResource.gettext(config.getI18nResourceBundle(), \"Version 1.6 (Acrobat 7)\"));\r\n            cache.put(Character.toString(AbstractParsedCommand.VERSION_1_7), GettextResource.gettext(config.getI18nResourceBundle(), \"Version 1.7 (Acrobat 8)\"));\r\n        }\r\n        return cache;\r\n    }\r\n\r\n    /**\r\n     * @return a list containing every possible pdf version as a StrinItem\r\n     */\r\n    public static ArrayList<StringItem> getVersionsList() {\r\n        if (listCache.isEmpty()) {\r\n            Configuration config = Configuration.getInstance();\r\n            listCache.add(new StringItem(Character.toString(AbstractParsedCommand.VERSION_1_2), GettextResource.gettext(config.getI18nResourceBundle(), \"Version 1.2 (Acrobat 3)\")));\r\n            listCache.add(new StringItem(Character.toString(AbstractParsedCommand.VERSION_1_3), GettextResource.gettext(config.getI18nResourceBundle(), \"Version 1.3 (Acrobat 4)\")));\r\n            listCache.add(new StringItem(Character.toString(AbstractParsedCommand.VERSION_1_4), GettextResource.gettext(config.getI18nResourceBundle(), \"Version 1.4 (Acrobat 5)\")));\r\n            listCache.add(new StringItem(Character.toString(AbstractParsedCommand.VERSION_1_5), GettextResource.gettext(config.getI18nResourceBundle(), \"Version 1.5 (Acrobat 6)\")));\r\n            listCache.add(new StringItem(Character.toString(AbstractParsedCommand.VERSION_1_6), GettextResource.gettext(config.getI18nResourceBundle(), \"Version 1.6 (Acrobat 7)\")));\r\n            listCache.add(new StringItem(Character.toString(AbstractParsedCommand.VERSION_1_7), GettextResource.gettext(config.getI18nResourceBundle(), \"Version 1.7 (Acrobat 8)\")));\r\n        }\r\n        return listCache;\r\n    }\r\n}\r\n",
		"id": "EvoSuiteBenchmark/109_pdfsam/src/main/java/org/pdfsam/guiclient/utils/PdfVersionUtilityTest0.java",
		"test_prompt": "// PdfVersionUtilityTest0.java\npackage org.pdfsam.guiclient.utils;\n\nimport java.util.ArrayList;\nimport java.util.HashMap;\nimport org.apache.log4j.Logger;\nimport org.pdfsam.console.business.dto.commands.AbstractParsedCommand;\nimport org.pdfsam.guiclient.configuration.Configuration;\nimport org.pdfsam.guiclient.dto.StringItem;\nimport org.pdfsam.i18n.GettextResource;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link PdfVersionUtility}.\n* It contains ten unit test cases for the {@link PdfVersionUtility#getVersionDescription(char)} method.\n*/\nclass PdfVersionUtilityTest0 {"
	},
	{
		"original_code": "// PdfVersionUtility.java\n/*\r\n * Created on 25-Dic-2007\r\n * Copyright (C) 2006 by Andrea Vacondio.\r\n *\r\n * This program is free software; you can redistribute it and/or modify it under the terms of the \r\n * GNU General Public License as published by the Free Software Foundation; \r\n * either version 2 of the License.\r\n * This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; \r\n * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. \r\n * See the GNU General Public License for more details.\r\n * You should have received a copy of the GNU General Public License along with this program; \r\n * if not, write to the Free Software Foundation, Inc., \r\n *  59 Temple Place, Suite 330, Boston, MA 02111-1307 USA\r\n */\r\npackage org.pdfsam.guiclient.utils;\r\n\r\nimport java.util.ArrayList;\r\nimport java.util.HashMap;\r\nimport org.apache.log4j.Logger;\r\nimport org.pdfsam.console.business.dto.commands.AbstractParsedCommand;\r\nimport org.pdfsam.guiclient.configuration.Configuration;\r\nimport org.pdfsam.guiclient.dto.StringItem;\r\nimport org.pdfsam.i18n.GettextResource;\r\n\r\n/**\r\n * Pdf document version utilities\r\n * @author Andrea Vacondio\r\n */\r\npublic class PdfVersionUtility {\r\n\r\n    private static final Logger log = Logger.getLogger(PdfVersionUtility.class.getPackage().getName());\r\n\r\n    private static HashMap<String, String> cache = new HashMap<String, String>();\r\n\r\n    private static ArrayList<StringItem> listCache = new ArrayList<StringItem>();\r\n\r\n    /**\r\n     * @param c pdfVersion\r\n     * @return String Version description\r\n     */\r\n    public static String getVersionDescription(char c) {\r\n        String retVal = \"\";\r\n        try {\r\n            Object description = getVersions().get(Character.toString(c));\r\n            retVal = (description != null) ? (String) description : \"\";\r\n        } catch (Exception e) {\r\n            log.error(GettextResource.gettext(Configuration.getInstance().getI18nResourceBundle(), \"Error getting pdf version description.\"), e);\r\n        }\r\n        return retVal;\r\n    }\r\n\r\n    /**\r\n     * @return a map containing every possible pdf version\r\n     */\r\n    public static HashMap<String, String> getVersions() {\r\n        if (cache.isEmpty()) {\r\n            Configuration config = Configuration.getInstance();\r\n            cache.put(Character.toString(AbstractParsedCommand.VERSION_1_2), GettextResource.gettext(config.getI18nResourceBundle(), \"Version 1.2 (Acrobat 3)\"));\r\n            cache.put(Character.toString(AbstractParsedCommand.VERSION_1_3), GettextResource.gettext(config.getI18nResourceBundle(), \"Version 1.3 (Acrobat 4)\"));\r\n            cache.put(Character.toString(AbstractParsedCommand.VERSION_1_4), GettextResource.gettext(config.getI18nResourceBundle(), \"Version 1.4 (Acrobat 5)\"));\r\n            cache.put(Character.toString(AbstractParsedCommand.VERSION_1_5), GettextResource.gettext(config.getI18nResourceBundle(), \"Version 1.5 (Acrobat 6)\"));\r\n            cache.put(Character.toString(AbstractParsedCommand.VERSION_1_6), GettextResource.gettext(config.getI18nResourceBundle(), \"Version 1.6 (Acrobat 7)\"));\r\n            cache.put(Character.toString(AbstractParsedCommand.VERSION_1_7), GettextResource.gettext(config.getI18nResourceBundle(), \"Version 1.7 (Acrobat 8)\"));\r\n        }\r\n        return cache;\r\n    }\r\n\r\n    /**\r\n     * @return a list containing every possible pdf version as a StrinItem\r\n     */\r\n    public static ArrayList<StringItem> getVersionsList() {\r\n        if (listCache.isEmpty()) {\r\n            Configuration config = Configuration.getInstance();\r\n            listCache.add(new StringItem(Character.toString(AbstractParsedCommand.VERSION_1_2), GettextResource.gettext(config.getI18nResourceBundle(), \"Version 1.2 (Acrobat 3)\")));\r\n            listCache.add(new StringItem(Character.toString(AbstractParsedCommand.VERSION_1_3), GettextResource.gettext(config.getI18nResourceBundle(), \"Version 1.3 (Acrobat 4)\")));\r\n            listCache.add(new StringItem(Character.toString(AbstractParsedCommand.VERSION_1_4), GettextResource.gettext(config.getI18nResourceBundle(), \"Version 1.4 (Acrobat 5)\")));\r\n            listCache.add(new StringItem(Character.toString(AbstractParsedCommand.VERSION_1_5), GettextResource.gettext(config.getI18nResourceBundle(), \"Version 1.5 (Acrobat 6)\")));\r\n            listCache.add(new StringItem(Character.toString(AbstractParsedCommand.VERSION_1_6), GettextResource.gettext(config.getI18nResourceBundle(), \"Version 1.6 (Acrobat 7)\")));\r\n            listCache.add(new StringItem(Character.toString(AbstractParsedCommand.VERSION_1_7), GettextResource.gettext(config.getI18nResourceBundle(), \"Version 1.7 (Acrobat 8)\")));\r\n        }\r\n        return listCache;\r\n    }\r\n}\r\n",
		"id": "EvoSuiteBenchmark/109_pdfsam/src/main/java/org/pdfsam/guiclient/utils/PdfVersionUtilityTest1.java",
		"test_prompt": "// PdfVersionUtilityTest1.java\npackage org.pdfsam.guiclient.utils;\n\nimport java.util.ArrayList;\nimport java.util.HashMap;\nimport org.apache.log4j.Logger;\nimport org.pdfsam.console.business.dto.commands.AbstractParsedCommand;\nimport org.pdfsam.guiclient.configuration.Configuration;\nimport org.pdfsam.guiclient.dto.StringItem;\nimport org.pdfsam.i18n.GettextResource;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link PdfVersionUtility}.\n* It contains ten unit test cases for the {@link PdfVersionUtility#getVersions()} method.\n*/\nclass PdfVersionUtilityTest1 {"
	},
	{
		"original_code": "// PdfVersionUtility.java\n/*\r\n * Created on 25-Dic-2007\r\n * Copyright (C) 2006 by Andrea Vacondio.\r\n *\r\n * This program is free software; you can redistribute it and/or modify it under the terms of the \r\n * GNU General Public License as published by the Free Software Foundation; \r\n * either version 2 of the License.\r\n * This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; \r\n * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. \r\n * See the GNU General Public License for more details.\r\n * You should have received a copy of the GNU General Public License along with this program; \r\n * if not, write to the Free Software Foundation, Inc., \r\n *  59 Temple Place, Suite 330, Boston, MA 02111-1307 USA\r\n */\r\npackage org.pdfsam.guiclient.utils;\r\n\r\nimport java.util.ArrayList;\r\nimport java.util.HashMap;\r\nimport org.apache.log4j.Logger;\r\nimport org.pdfsam.console.business.dto.commands.AbstractParsedCommand;\r\nimport org.pdfsam.guiclient.configuration.Configuration;\r\nimport org.pdfsam.guiclient.dto.StringItem;\r\nimport org.pdfsam.i18n.GettextResource;\r\n\r\n/**\r\n * Pdf document version utilities\r\n * @author Andrea Vacondio\r\n */\r\npublic class PdfVersionUtility {\r\n\r\n    private static final Logger log = Logger.getLogger(PdfVersionUtility.class.getPackage().getName());\r\n\r\n    private static HashMap<String, String> cache = new HashMap<String, String>();\r\n\r\n    private static ArrayList<StringItem> listCache = new ArrayList<StringItem>();\r\n\r\n    /**\r\n     * @param c pdfVersion\r\n     * @return String Version description\r\n     */\r\n    public static String getVersionDescription(char c) {\r\n        String retVal = \"\";\r\n        try {\r\n            Object description = getVersions().get(Character.toString(c));\r\n            retVal = (description != null) ? (String) description : \"\";\r\n        } catch (Exception e) {\r\n            log.error(GettextResource.gettext(Configuration.getInstance().getI18nResourceBundle(), \"Error getting pdf version description.\"), e);\r\n        }\r\n        return retVal;\r\n    }\r\n\r\n    /**\r\n     * @return a map containing every possible pdf version\r\n     */\r\n    public static HashMap<String, String> getVersions() {\r\n        if (cache.isEmpty()) {\r\n            Configuration config = Configuration.getInstance();\r\n            cache.put(Character.toString(AbstractParsedCommand.VERSION_1_2), GettextResource.gettext(config.getI18nResourceBundle(), \"Version 1.2 (Acrobat 3)\"));\r\n            cache.put(Character.toString(AbstractParsedCommand.VERSION_1_3), GettextResource.gettext(config.getI18nResourceBundle(), \"Version 1.3 (Acrobat 4)\"));\r\n            cache.put(Character.toString(AbstractParsedCommand.VERSION_1_4), GettextResource.gettext(config.getI18nResourceBundle(), \"Version 1.4 (Acrobat 5)\"));\r\n            cache.put(Character.toString(AbstractParsedCommand.VERSION_1_5), GettextResource.gettext(config.getI18nResourceBundle(), \"Version 1.5 (Acrobat 6)\"));\r\n            cache.put(Character.toString(AbstractParsedCommand.VERSION_1_6), GettextResource.gettext(config.getI18nResourceBundle(), \"Version 1.6 (Acrobat 7)\"));\r\n            cache.put(Character.toString(AbstractParsedCommand.VERSION_1_7), GettextResource.gettext(config.getI18nResourceBundle(), \"Version 1.7 (Acrobat 8)\"));\r\n        }\r\n        return cache;\r\n    }\r\n\r\n    /**\r\n     * @return a list containing every possible pdf version as a StrinItem\r\n     */\r\n    public static ArrayList<StringItem> getVersionsList() {\r\n        if (listCache.isEmpty()) {\r\n            Configuration config = Configuration.getInstance();\r\n            listCache.add(new StringItem(Character.toString(AbstractParsedCommand.VERSION_1_2), GettextResource.gettext(config.getI18nResourceBundle(), \"Version 1.2 (Acrobat 3)\")));\r\n            listCache.add(new StringItem(Character.toString(AbstractParsedCommand.VERSION_1_3), GettextResource.gettext(config.getI18nResourceBundle(), \"Version 1.3 (Acrobat 4)\")));\r\n            listCache.add(new StringItem(Character.toString(AbstractParsedCommand.VERSION_1_4), GettextResource.gettext(config.getI18nResourceBundle(), \"Version 1.4 (Acrobat 5)\")));\r\n            listCache.add(new StringItem(Character.toString(AbstractParsedCommand.VERSION_1_5), GettextResource.gettext(config.getI18nResourceBundle(), \"Version 1.5 (Acrobat 6)\")));\r\n            listCache.add(new StringItem(Character.toString(AbstractParsedCommand.VERSION_1_6), GettextResource.gettext(config.getI18nResourceBundle(), \"Version 1.6 (Acrobat 7)\")));\r\n            listCache.add(new StringItem(Character.toString(AbstractParsedCommand.VERSION_1_7), GettextResource.gettext(config.getI18nResourceBundle(), \"Version 1.7 (Acrobat 8)\")));\r\n        }\r\n        return listCache;\r\n    }\r\n}\r\n",
		"id": "EvoSuiteBenchmark/109_pdfsam/src/main/java/org/pdfsam/guiclient/utils/PdfVersionUtilityTest2.java",
		"test_prompt": "// PdfVersionUtilityTest2.java\npackage org.pdfsam.guiclient.utils;\n\nimport java.util.ArrayList;\nimport java.util.HashMap;\nimport org.apache.log4j.Logger;\nimport org.pdfsam.console.business.dto.commands.AbstractParsedCommand;\nimport org.pdfsam.guiclient.configuration.Configuration;\nimport org.pdfsam.guiclient.dto.StringItem;\nimport org.pdfsam.i18n.GettextResource;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link PdfVersionUtility}.\n* It contains ten unit test cases for the {@link PdfVersionUtility#getVersionsList()} method.\n*/\nclass PdfVersionUtilityTest2 {"
	},
	{
		"original_code": "// PaperFormat.java\n/*\r\n * Created on 16-Jan-2009\r\n * Copyright (C) 2009 by Andrea Vacondio.\r\n *\r\n * This program is free software; you can redistribute it and/or modify it under the terms of the \r\n * GNU General Public License as published by the Free Software Foundation; \r\n * either version 2 of the License.\r\n * This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; \r\n * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. \r\n * See the GNU General Public License for more details.\r\n * You should have received a copy of the GNU General Public License along with this program; \r\n * if not, write to the Free Software Foundation, Inc., \r\n *  59 Temple Place, Suite 330, Boston, MA 02111-1307 USA\r\n */\r\npackage org.pdfsam.guiclient.utils.paper;\r\n\r\nimport java.io.Serializable;\r\n\r\n/**\r\n * Models a paper format\r\n * @author Andrea Vacondio\r\n */\r\npublic class PaperFormat implements Serializable {\r\n\r\n    private static final long serialVersionUID = 6615660207188886347L;\r\n\r\n    private double width = 0;\r\n\r\n    private double height = 0;\r\n\r\n    private String description = \"\";\r\n\r\n    private double horizontalTolerance = 0.0;\r\n\r\n    private double verticalTolerance = 0.0;\r\n\r\n    /**\r\n     */\r\n    public PaperFormat() {\r\n        super();\r\n    }\r\n\r\n    /**\r\n     * @param width\r\n     * @param height\r\n     * @param description\r\n     * @param horizontalTolerance\r\n     * @param verticalTolerance\r\n     */\r\n    public PaperFormat(double width, double height, String description, double horizontalTolerance, double verticalTolerance) {\r\n        super();\r\n        this.description = description;\r\n        this.height = height;\r\n        this.horizontalTolerance = horizontalTolerance;\r\n        this.verticalTolerance = verticalTolerance;\r\n        this.width = width;\r\n    }\r\n\r\n    /**\r\n     * @return the width\r\n     */\r\n    public double getWidth() {\r\n        return width;\r\n    }\r\n\r\n    /**\r\n     * @param width the width to set\r\n     */\r\n    public void setWidth(double width) {\r\n        this.width = width;\r\n    }\r\n\r\n    /**\r\n     * @return the height\r\n     */\r\n    public double getHeight() {\r\n        return height;\r\n    }\r\n\r\n    /**\r\n     * @param height the height to set\r\n     */\r\n    public void setHeight(double height) {\r\n        this.height = height;\r\n    }\r\n\r\n    /**\r\n     * @return the description\r\n     */\r\n    public String getDescription() {\r\n        return description;\r\n    }\r\n\r\n    /**\r\n     * @param description the description to set\r\n     */\r\n    public void setDescription(String description) {\r\n        this.description = description;\r\n    }\r\n\r\n    /**\r\n     * @return the horizontalTolerance\r\n     */\r\n    public double getHorizontalTolerance() {\r\n        return horizontalTolerance;\r\n    }\r\n\r\n    /**\r\n     * @param horizontalTolerance the horizontalTolerance to set\r\n     */\r\n    public void setHorizontalTolerance(double horizontalTolerance) {\r\n        this.horizontalTolerance = horizontalTolerance;\r\n    }\r\n\r\n    /**\r\n     * @return the verticalTolerance\r\n     */\r\n    public double getVerticalTolerance() {\r\n        return verticalTolerance;\r\n    }\r\n\r\n    /**\r\n     * @param verticalTolerance the verticalTolerance to set\r\n     */\r\n    public void setVerticalTolerance(double verticalTolerance) {\r\n        this.verticalTolerance = verticalTolerance;\r\n    }\r\n\r\n    /**\r\n     * @param obj\r\n     * @return true if the input object is tolerated by this format\r\n     */\r\n    public boolean isTolerable(PaperFormat obj) {\r\n        boolean retVal = false;\r\n        if (obj != null) {\r\n            if ((obj.getWidth() <= (width + horizontalTolerance)) && (obj.getWidth() >= (width - horizontalTolerance))) {\r\n                retVal = ((obj.getHeight() <= (height + horizontalTolerance)) && (obj.getHeight() >= (height - horizontalTolerance)));\r\n            }\r\n        }\r\n        return retVal;\r\n    }\r\n\r\n    /**\r\n     * Constructs a <code>String</code> with all attributes\r\n     * in name = value format.\r\n     *\r\n     * @return a <code>String</code> representation\r\n     * of this object.\r\n     */\r\n    public String toString() {\r\n        final String OPEN = \"[\";\r\n        final String CLOSE = \"]\";\r\n        StringBuffer retValue = new StringBuffer();\r\n        retValue.append(\"PaperFormat ( \").append(super.toString()).append(OPEN).append(\"width=\").append(this.width).append(CLOSE).append(OPEN).append(\"height=\").append(this.height).append(CLOSE).append(OPEN).append(\"description=\").append(this.description).append(CLOSE).append(OPEN).append(\"horizontalTolerance=\").append(this.horizontalTolerance).append(CLOSE).append(OPEN).append(\"verticalTolerance=\").append(this.verticalTolerance).append(CLOSE).append(\" )\");\r\n        return retValue.toString();\r\n    }\r\n}\r\n",
		"id": "EvoSuiteBenchmark/109_pdfsam/src/main/java/org/pdfsam/guiclient/utils/paper/PaperFormatTest.java",
		"test_prompt": "// PaperFormatTest.java\npackage org.pdfsam.guiclient.utils.paper;\n\nimport java.io.Serializable;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link PaperFormat}.\n* It contains ten unit test cases for the {@link PaperFormat#isTolerable(PaperFormat)} method.\n*/\nclass PaperFormatTest {"
	},
	{
		"original_code": "// PaperFormatUtility.java\n/*\r\n * Created on 16-Jan-2009\r\n * Copyright (C) 2009 by Andrea Vacondio.\r\n *\r\n * This program is free software; you can redistribute it and/or modify it under the terms of the \r\n * GNU General Public License as published by the Free Software Foundation; \r\n * either version 2 of the License.\r\n * This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; \r\n * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. \r\n * See the GNU General Public License for more details.\r\n * You should have received a copy of the GNU General Public License along with this program; \r\n * if not, write to the Free Software Foundation, Inc., \r\n *  59 Temple Place, Suite 330, Boston, MA 02111-1307 USA\r\n */\r\npackage org.pdfsam.guiclient.utils.paper;\r\n\r\nimport java.util.ArrayList;\r\n\r\n/**\r\n * Utility to get the paper format\r\n * @author Andrea Vacondio\r\n */\r\npublic class PaperFormatUtility {\r\n\r\n    private static ArrayList<PaperFormat> formats = null;\r\n\r\n    /**\r\n     * return the description of the given format\r\n     * @param width\r\n     * @param height\r\n     * @return a string representing the paper format\r\n     */\r\n    public static String getFormat(double width, double height) {\r\n        String retVal = Math.round(width) + \"x\" + Math.round(height);\r\n        initFormats();\r\n        PaperFormat inputValue = new PaperFormat(width, height, \"\", 0.0, 0.0);\r\n        for (PaperFormat value : formats) {\r\n            if (value.isTolerable(inputValue)) {\r\n                retVal = value.getDescription();\r\n                break;\r\n            }\r\n        }\r\n        return retVal;\r\n    }\r\n\r\n    /**\r\n     * init the formats array\r\n     */\r\n    private static synchronized void initFormats() {\r\n        if (formats == null) {\r\n            formats = new ArrayList<PaperFormat>(30);\r\n            formats.add(new PaperFormat(297, 420, \"A3\", 2.0, 2.0));\r\n            formats.add(new PaperFormat(210, 297, \"A4\", 2.0, 2.0));\r\n            formats.add(new PaperFormat(841, 1189, \"A0\", 3.0, 3.0));\r\n            formats.add(new PaperFormat(594, 841, \"A1\", 2.0, 3.0));\r\n            formats.add(new PaperFormat(420, 594, \"A2\", 2.0, 2.0));\r\n            formats.add(new PaperFormat(148, 210, \"A5\", 1.5, 2.0));\r\n            formats.add(new PaperFormat(105, 148, \"A6\", 1.5, 1.5));\r\n            formats.add(new PaperFormat(74, 105, \"A7\", 1.5, 1.5));\r\n            formats.add(new PaperFormat(52, 74, \"A8\", 1.5, 1.5));\r\n            formats.add(new PaperFormat(37, 52, \"A9\", 1.5, 1.5));\r\n            formats.add(new PaperFormat(26, 37, \"A10\", 1.5, 1.5));\r\n            formats.add(new PaperFormat(1000, 1414, \"B0\", 3.0, 3.0));\r\n            formats.add(new PaperFormat(707, 1000, \"B1\", 3.0, 3.0));\r\n            formats.add(new PaperFormat(500, 707, \"B2\", 2.0, 2.0));\r\n            formats.add(new PaperFormat(353, 500, \"B3\", 2.0, 2.0));\r\n            formats.add(new PaperFormat(250, 353, \"B4\", 2.0, 2.0));\r\n            formats.add(new PaperFormat(176, 250, \"B5\", 2.0, 2.0));\r\n            formats.add(new PaperFormat(125, 176, \"B6\", 1.5, 2.0));\r\n            formats.add(new PaperFormat(88, 125, \"B7\", 1.5, 1.5));\r\n            formats.add(new PaperFormat(62, 88, \"B8\", 1.5, 1.5));\r\n            formats.add(new PaperFormat(44, 62, \"B9\", 1.5, 1.5));\r\n            formats.add(new PaperFormat(31, 44, \"B10\", 1.5, 1.5));\r\n            formats.add(new PaperFormat(917, 1297, \"C0\", 3.0, 3.0));\r\n            formats.add(new PaperFormat(648, 917, \"C1\", 3.0, 3.0));\r\n            formats.add(new PaperFormat(458, 648, \"C2\", 2.0, 3.0));\r\n            formats.add(new PaperFormat(324, 458, \"C3\", 2.0, 2.0));\r\n            formats.add(new PaperFormat(229, 324, \"C4\", 2.0, 2.0));\r\n            formats.add(new PaperFormat(162, 229, \"C5\", 2.0, 2.0));\r\n            formats.add(new PaperFormat(114, 162, \"C6\", 1.5, 2.0));\r\n            formats.add(new PaperFormat(81, 114, \"C7\", 1.5, 1.5));\r\n            formats.add(new PaperFormat(57, 81, \"C8\", 1.5, 1.5));\r\n            formats.add(new PaperFormat(40, 57, \"C9\", 1.5, 1.5));\r\n            formats.add(new PaperFormat(28, 40, \"C10\", 1.5, 1.5));\r\n        }\r\n    }\r\n}\r\n",
		"id": "EvoSuiteBenchmark/109_pdfsam/src/main/java/org/pdfsam/guiclient/utils/paper/PaperFormatUtilityTest.java",
		"test_prompt": "// PaperFormatUtilityTest.java\npackage org.pdfsam.guiclient.utils.paper;\n\nimport java.util.ArrayList;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link PaperFormatUtility}.\n* It contains ten unit test cases for the {@link PaperFormatUtility#getFormat(double, double)} method.\n*/\nclass PaperFormatUtilityTest {"
	},
	{
		"original_code": "// HtmlFilter.java\n/*\r\n * Created on 26-Dec-2006\r\n * Copyright (C) 2006 by Andrea Vacondio.\r\n *\r\n * This program is free software; you can redistribute it and/or modify it under the terms of the \r\n * GNU General Public License as published by the Free Software Foundation; \r\n * either version 2 of the License.\r\n * This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; \r\n * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. \r\n * See the GNU General Public License for more details.\r\n * You should have received a copy of the GNU General Public License along with this program; \r\n * if not, write to the Free Software Foundation, Inc., \r\n *  59 Temple Place, Suite 330, Boston, MA 02111-1307 USA\r\n */\r\npackage org.pdfsam.guiclient.utils.filters;\r\n\r\nimport java.io.File;\r\nimport java.io.FileFilter;\r\n\r\n/**\r\n * Filter for the JFileChooser. Used by Log to save log to file.\r\n *\r\n * @author Andrea Vacondio\r\n * @see javax.swing.JFileChooser\r\n */\r\npublic class HtmlFilter implements FileFilter {\r\n\r\n    public boolean accept(File f) {\r\n        boolean retVal = false;\r\n        if (f != null) {\r\n            if (f.isDirectory()) {\r\n                retVal = true;\r\n            } else {\r\n                String extension = getExtension(f);\r\n                retVal = (\"html\".equals(extension) || \"htm\".equals(extension));\r\n            }\r\n        }\r\n        return retVal;\r\n    }\r\n\r\n    public String getDescription() {\r\n        return \"html files\";\r\n    }\r\n\r\n    public String getExtension(File f) {\r\n        String ext = null;\r\n        String s = f.getName();\r\n        int i = s.lastIndexOf('.');\r\n        if (i > 0 && i < s.length() - 1) {\r\n            ext = s.substring(i + 1).toLowerCase();\r\n        }\r\n        return ext;\r\n    }\r\n}\r\n",
		"id": "EvoSuiteBenchmark/109_pdfsam/src/main/java/org/pdfsam/guiclient/utils/filters/HtmlFilterTest.java",
		"test_prompt": "// HtmlFilterTest.java\npackage org.pdfsam.guiclient.utils.filters;\n\nimport java.io.File;\nimport java.io.FileFilter;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link HtmlFilter}.\n* It contains ten unit test cases for the {@link HtmlFilter#accept(File)} method.\n*/\nclass HtmlFilterTest {"
	},
	{
		"original_code": "// AbstractFileFilter.java\n/*\n * Created on 03-Nov-2007\n * Copyright (C) 2006 by Andrea Vacondio.\n *\n * This program is free software; you can redistribute it and/or modify it under the terms of the \n * GNU General Public License as published by the Free Software Foundation; \n * either version 2 of the License.\n * This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; \n * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. \n * See the GNU General Public License for more details.\n * You should have received a copy of the GNU General Public License along with this program; \n * if not, write to the Free Software Foundation, Inc., \n *  59 Temple Place, Suite 330, Boston, MA 02111-1307 USA\n */\npackage org.pdfsam.guiclient.utils.filters;\n\nimport java.io.File;\nimport javax.swing.filechooser.FileFilter;\n\n/**\n * Filters superclass\n * @author Andrea Vacondio\n */\npublic abstract class AbstractFileFilter extends FileFilter implements java.io.FileFilter {\n\n    private boolean acceptDirectory = true;\n\n    /**\n     * If true the filter accepts directories\n     * @param acceptDirectory\n     */\n    public AbstractFileFilter(boolean acceptDirectory) {\n        this.acceptDirectory = acceptDirectory;\n    }\n\n    public AbstractFileFilter() {\n        this.acceptDirectory = true;\n    }\n\n    public boolean accept(File f) {\n        boolean retVal = false;\n        if (f != null) {\n            if (f.isDirectory()) {\n                retVal = acceptDirectory;\n            } else {\n                String extension = getExtension(f);\n                retVal = getAcceptedExtension().equals(extension);\n            }\n        }\n        return retVal;\n    }\n\n    /**\n     * @return the accepted extension\n     */\n    public abstract String getAcceptedExtension();\n\n    /**\n     * Get the extension of a file.\n     */\n    public String getExtension(File f) {\n        String ext = null;\n        String s = f.getName();\n        int i = s.lastIndexOf('.');\n        if (i > 0 && i < s.length() - 1) {\n            ext = s.substring(i + 1).toLowerCase();\n        }\n        return ext;\n    }\n}\n",
		"id": "EvoSuiteBenchmark/109_pdfsam/src/main/java/org/pdfsam/guiclient/utils/filters/AbstractFileFilterTest.java",
		"test_prompt": "// AbstractFileFilterTest.java\npackage org.pdfsam.guiclient.utils.filters;\n\nimport java.io.File;\nimport javax.swing.filechooser.FileFilter;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link AbstractFileFilter}.\n* It contains ten unit test cases for the {@link AbstractFileFilter#accept(File)} method.\n*/\nclass AbstractFileFilterTest {"
	},
	{
		"original_code": "// DirFilter.java\n/*\r\n * Created on 20-Feb-2006\r\n * Copyright (C) 2006 by Andrea Vacondio.\r\n *\r\n * This program is free software; you can redistribute it and/or modify it under the terms of the \r\n * GNU General Public License as published by the Free Software Foundation; \r\n * either version 2 of the License.\r\n * This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; \r\n * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. \r\n * See the GNU General Public License for more details.\r\n * You should have received a copy of the GNU General Public License along with this program; \r\n * if not, write to the Free Software Foundation, Inc., \r\n *  59 Temple Place, Suite 330, Boston, MA 02111-1307 USA\r\n */\r\npackage org.pdfsam.guiclient.utils.filters;\r\n\r\nimport java.io.File;\r\nimport javax.swing.filechooser.FileFilter;\r\n\r\n/**\r\n * Filter for the JFileChooser. Used by split plugin to chose output directory.\r\n * @author Andrea Vacondio\r\n * @see javax.swing.JFileChooser\r\n */\r\npublic class DirFilter extends FileFilter {\r\n\r\n    public boolean accept(File f) {\r\n        boolean retVal = false;\r\n        if (f != null) {\r\n            retVal = f.isDirectory();\r\n        }\r\n        return retVal;\r\n    }\r\n\r\n    public String getDescription() {\r\n        return \"Direcotries\";\r\n    }\r\n}\r\n",
		"id": "EvoSuiteBenchmark/109_pdfsam/src/main/java/org/pdfsam/guiclient/utils/filters/DirFilterTest.java",
		"test_prompt": "// DirFilterTest.java\npackage org.pdfsam.guiclient.utils.filters;\n\nimport java.io.File;\nimport javax.swing.filechooser.FileFilter;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link DirFilter}.\n* It contains ten unit test cases for the {@link DirFilter#accept(File)} method.\n*/\nclass DirFilterTest {"
	},
	{
		"original_code": "// DialogUtility.java\n/*\r\n * Created on 12-Oct-2008\r\n * Copyright (C) 2008 by Andrea Vacondio.\r\n *\r\n * This program is free software; you can redistribute it and/or modify it under the terms of the \r\n * GNU General Public License as published by the Free Software Foundation; \r\n * either version 2 of the License.\r\n * This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; \r\n * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. \r\n * See the GNU General Public License for more details.\r\n * You should have received a copy of the GNU General Public License along with this program; \r\n * if not, write to the Free Software Foundation, Inc., \r\n *  59 Temple Place, Suite 330, Boston, MA 02111-1307 USA\r\n */\r\npackage org.pdfsam.guiclient.utils;\r\n\r\nimport java.awt.Component;\r\nimport javax.swing.JOptionPane;\r\nimport javax.swing.JPasswordField;\r\nimport org.pdfsam.guiclient.configuration.Configuration;\r\nimport org.pdfsam.i18n.GettextResource;\r\n\r\n/**\r\n * Utility to show dialogs\r\n *\r\n * @author Andrea Vacondio\r\n */\r\npublic class DialogUtility {\r\n\r\n    public static final int AT_LEAST_ONE_DOC = 0;\r\n\r\n    public static final int ONE_DOC = 1;\r\n\r\n    public static final int TWO_DOC = 2;\r\n\r\n    public static final int FILE_DESTINATION = 0;\r\n\r\n    public static final int DIRECTORY_DESTINATION = 1;\r\n\r\n    /**\r\n     * Shows a yes/no/cancel dialog to ask for change the output directory\r\n     *\r\n     * @param comp\r\n     *            parent component\r\n     * @param suggestedDir\r\n     *            suggested directory\r\n     * @return an integer indicating the option chosen by the user\r\n     */\r\n    public static int showConfirmOuputLocationDialog(Component comp, String suggestedDir) {\r\n        return JOptionPane.showOptionDialog(comp, GettextResource.gettext(Configuration.getInstance().getI18nResourceBundle(), \"Output file location is not correct\") + \".\\n\" + GettextResource.gettext(Configuration.getInstance().getI18nResourceBundle(), \"Would you like to change it to\") + \" \" + suggestedDir + \" ?\", GettextResource.gettext(Configuration.getInstance().getI18nResourceBundle(), \"Output location error\"), JOptionPane.YES_NO_CANCEL_OPTION, JOptionPane.QUESTION_MESSAGE, null, null, null);\r\n    }\r\n\r\n    /**\r\n     * Shows a warning dialog telling the user that at least one document should\r\n     * be selected\r\n     *\r\n     * @param comp\r\n     * @param msgType\r\n     *            the type of the message\r\n     */\r\n    public static void showWarningNoDocsSelected(Component comp, int msgType) {\r\n        String msg = GettextResource.gettext(Configuration.getInstance().getI18nResourceBundle(), \"Please select at least one pdf document.\");\r\n        if (TWO_DOC == msgType) {\r\n            msg = GettextResource.gettext(Configuration.getInstance().getI18nResourceBundle(), \"Please select two pdf documents.\");\r\n        } else if (ONE_DOC == msgType) {\r\n            msg = GettextResource.gettext(Configuration.getInstance().getI18nResourceBundle(), \"Please select a pdf document.\");\r\n        }\r\n        JOptionPane.showMessageDialog(comp, msg, GettextResource.gettext(Configuration.getInstance().getI18nResourceBundle(), \"Warning\"), JOptionPane.WARNING_MESSAGE);\r\n    }\r\n\r\n    /**\r\n     * Shows a warning dialog telling the user that the selection panel is still\r\n     * adding files.\r\n     *\r\n     * @param comp\r\n     * @param msgType\r\n     */\r\n    public static void showWarningAddingDocument(Component comp) {\r\n        JOptionPane.showMessageDialog(comp, GettextResource.gettext(Configuration.getInstance().getI18nResourceBundle(), \"Please wait while all files are processed.\"), GettextResource.gettext(Configuration.getInstance().getI18nResourceBundle(), \"Still adding files\"), JOptionPane.WARNING_MESSAGE);\r\n    }\r\n\r\n    /**\r\n     * Shows a warning dialog telling the user that the destination is not set\r\n     *\r\n     * @param comp\r\n     * @param msgType\r\n     */\r\n    public static void showWarningNoDestinationSelected(Component comp, int msgType) {\r\n        String msg;\r\n        if (FILE_DESTINATION == msgType) {\r\n            msg = GettextResource.gettext(Configuration.getInstance().getI18nResourceBundle(), \"Please select a destination file.\");\r\n        } else {\r\n            msg = GettextResource.gettext(Configuration.getInstance().getI18nResourceBundle(), \"Please select a destination directory.\");\r\n        }\r\n        JOptionPane.showMessageDialog(comp, msg, GettextResource.gettext(Configuration.getInstance().getI18nResourceBundle(), \"No destination selected\"), JOptionPane.WARNING_MESSAGE);\r\n    }\r\n\r\n    /**\r\n     * Shows a yes/no/cancel dialog to ask the user about overwriting output\r\n     * file\r\n     *\r\n     * @param comp\r\n     *            parent component\r\n     * @param filename\r\n     *            suggested directory\r\n     * @return an integer indicating the option chosen by the user\r\n     */\r\n    public static int askForOverwriteOutputFileDialog(Component comp, String filename) {\r\n        return JOptionPane.showOptionDialog(comp, GettextResource.gettext(Configuration.getInstance().getI18nResourceBundle(), \"Selected output file already exists \") + filename + \"\\n\" + GettextResource.gettext(Configuration.getInstance().getI18nResourceBundle(), \"Would you like to overwrite it?\"), GettextResource.gettext(Configuration.getInstance().getI18nResourceBundle(), \"Output location error\"), JOptionPane.YES_NO_CANCEL_OPTION, JOptionPane.QUESTION_MESSAGE, null, null, null);\r\n    }\r\n\r\n    /**\r\n     * Shows a yes/no/cancel asking the user for a confirmation about the\r\n     * overwrite check\r\n     *\r\n     * @param comp\r\n     * @return\r\n     */\r\n    public static int askForOverwriteConfirmation(Component comp) {\r\n        return JOptionPane.showOptionDialog(comp, GettextResource.gettext(Configuration.getInstance().getI18nResourceBundle(), \"Please note that output files will overwrite existing files of the same name without warning.\") + \"\\n\" + GettextResource.gettext(Configuration.getInstance().getI18nResourceBundle(), \"Do you confirm to overwrite?\"), GettextResource.gettext(Configuration.getInstance().getI18nResourceBundle(), \"Confirm overwrite\"), JOptionPane.YES_NO_CANCEL_OPTION, JOptionPane.QUESTION_MESSAGE, null, null, null);\r\n    }\r\n\r\n    /**\r\n     * Shows an error dialog\r\n     *\r\n     * @param comp\r\n     * @param bounds\r\n     */\r\n    public static void errorValidatingBounds(Component comp, String bounds) {\r\n        JOptionPane.showMessageDialog(comp, GettextResource.gettext(Configuration.getInstance().getI18nResourceBundle(), \"Provided pages selection is not valid\") + \" (\" + bounds + \")\\n\" + GettextResource.gettext(Configuration.getInstance().getI18nResourceBundle(), \"Limits must be a comma separated list of \\\"page_number\\\" or \\\"page_number-page_number\\\"\"), GettextResource.gettext(Configuration.getInstance().getI18nResourceBundle(), \"Limits are not valid\"), JOptionPane.ERROR_MESSAGE);\r\n    }\r\n\r\n    /**\r\n     * Generic error dialog\r\n     *\r\n     * @param comp\r\n     * @param title\r\n     * @param message\r\n     */\r\n    public static void errorGenericDialog(Component comp, String title, String message) {\r\n        JOptionPane.showMessageDialog(comp, message, title, JOptionPane.ERROR_MESSAGE);\r\n    }\r\n\r\n    /**\r\n     * Show a dialog to ask the user for the document password\r\n     *\r\n     * @param comp\r\n     * @return an integer indicating the option chosen by the user\r\n     */\r\n    public static String askForDocumentPasswordDialog(Component comp, String filename) {\r\n        String retVal = null;\r\n        JPasswordField passwordField = new JPasswordField();\r\n        Object[] message = new Object[] { GettextResource.gettext(Configuration.getInstance().getI18nResourceBundle(), \"Please provide the password to open the encrypted document\"), filename, passwordField };\r\n        passwordField.requestFocus();\r\n        if (JOptionPane.showOptionDialog(comp, message, GettextResource.gettext(Configuration.getInstance().getI18nResourceBundle(), \"Password request\"), JOptionPane.OK_CANCEL_OPTION, JOptionPane.QUESTION_MESSAGE, null, null, null) == 0) {\r\n            retVal = String.valueOf(passwordField.getPassword());\r\n        }\r\n        return retVal;\r\n    }\r\n\r\n    /**\r\n     * Shows a yes/no confirmation dialog to ask the user if he wants to empty\r\n     * the selection list\r\n     *\r\n     * @param comp\r\n     * @return an integer indicating the option chosen by the user\r\n     */\r\n    public static int askForEmptySelectionPanel(Component comp) {\r\n        return JOptionPane.showConfirmDialog(comp, GettextResource.gettext(Configuration.getInstance().getI18nResourceBundle(), \"Selection list is full, would you like to empty it and load the new document?\"), GettextResource.gettext(Configuration.getInstance().getI18nResourceBundle(), \"List full\"), JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE);\r\n    }\r\n\r\n    /**\r\n     * Shows a yes/no confirmation dialog to ask the user if he wants to\r\n     * continue even if the selected pdf version is lower than the lowest\r\n     * available\r\n     *\r\n     * @param comp\r\n     * @param lowestVersion\r\n     * @return\r\n     */\r\n    public static int askForPdfVersionConfilct(Component comp, String lowestVersion) {\r\n        return JOptionPane.showConfirmDialog(comp, GettextResource.gettext(Configuration.getInstance().getI18nResourceBundle(), \"The lowest available pdf version is \") + lowestVersion + \".\\n\" + GettextResource.gettext(Configuration.getInstance().getI18nResourceBundle(), \"You selected a lower output pdf version, continue anyway ?\"), GettextResource.gettext(Configuration.getInstance().getI18nResourceBundle(), \"Pdf version conflict\"), JOptionPane.YES_NO_OPTION, JOptionPane.WARNING_MESSAGE);\r\n    }\r\n}\r\n",
		"id": "EvoSuiteBenchmark/109_pdfsam/src/main/java/org/pdfsam/guiclient/utils/DialogUtilityTest0.java",
		"test_prompt": "// DialogUtilityTest0.java\npackage org.pdfsam.guiclient.utils;\n\nimport java.awt.Component;\nimport javax.swing.JOptionPane;\nimport javax.swing.JPasswordField;\nimport org.pdfsam.guiclient.configuration.Configuration;\nimport org.pdfsam.i18n.GettextResource;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link DialogUtility}.\n* It contains ten unit test cases for the {@link DialogUtility#showConfirmOuputLocationDialog(Component, String)} method.\n*/\nclass DialogUtilityTest0 {"
	},
	{
		"original_code": "// DialogUtility.java\n/*\r\n * Created on 12-Oct-2008\r\n * Copyright (C) 2008 by Andrea Vacondio.\r\n *\r\n * This program is free software; you can redistribute it and/or modify it under the terms of the \r\n * GNU General Public License as published by the Free Software Foundation; \r\n * either version 2 of the License.\r\n * This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; \r\n * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. \r\n * See the GNU General Public License for more details.\r\n * You should have received a copy of the GNU General Public License along with this program; \r\n * if not, write to the Free Software Foundation, Inc., \r\n *  59 Temple Place, Suite 330, Boston, MA 02111-1307 USA\r\n */\r\npackage org.pdfsam.guiclient.utils;\r\n\r\nimport java.awt.Component;\r\nimport javax.swing.JOptionPane;\r\nimport javax.swing.JPasswordField;\r\nimport org.pdfsam.guiclient.configuration.Configuration;\r\nimport org.pdfsam.i18n.GettextResource;\r\n\r\n/**\r\n * Utility to show dialogs\r\n *\r\n * @author Andrea Vacondio\r\n */\r\npublic class DialogUtility {\r\n\r\n    public static final int AT_LEAST_ONE_DOC = 0;\r\n\r\n    public static final int ONE_DOC = 1;\r\n\r\n    public static final int TWO_DOC = 2;\r\n\r\n    public static final int FILE_DESTINATION = 0;\r\n\r\n    public static final int DIRECTORY_DESTINATION = 1;\r\n\r\n    /**\r\n     * Shows a yes/no/cancel dialog to ask for change the output directory\r\n     *\r\n     * @param comp\r\n     *            parent component\r\n     * @param suggestedDir\r\n     *            suggested directory\r\n     * @return an integer indicating the option chosen by the user\r\n     */\r\n    public static int showConfirmOuputLocationDialog(Component comp, String suggestedDir) {\r\n        return JOptionPane.showOptionDialog(comp, GettextResource.gettext(Configuration.getInstance().getI18nResourceBundle(), \"Output file location is not correct\") + \".\\n\" + GettextResource.gettext(Configuration.getInstance().getI18nResourceBundle(), \"Would you like to change it to\") + \" \" + suggestedDir + \" ?\", GettextResource.gettext(Configuration.getInstance().getI18nResourceBundle(), \"Output location error\"), JOptionPane.YES_NO_CANCEL_OPTION, JOptionPane.QUESTION_MESSAGE, null, null, null);\r\n    }\r\n\r\n    /**\r\n     * Shows a warning dialog telling the user that at least one document should\r\n     * be selected\r\n     *\r\n     * @param comp\r\n     * @param msgType\r\n     *            the type of the message\r\n     */\r\n    public static void showWarningNoDocsSelected(Component comp, int msgType) {\r\n        String msg = GettextResource.gettext(Configuration.getInstance().getI18nResourceBundle(), \"Please select at least one pdf document.\");\r\n        if (TWO_DOC == msgType) {\r\n            msg = GettextResource.gettext(Configuration.getInstance().getI18nResourceBundle(), \"Please select two pdf documents.\");\r\n        } else if (ONE_DOC == msgType) {\r\n            msg = GettextResource.gettext(Configuration.getInstance().getI18nResourceBundle(), \"Please select a pdf document.\");\r\n        }\r\n        JOptionPane.showMessageDialog(comp, msg, GettextResource.gettext(Configuration.getInstance().getI18nResourceBundle(), \"Warning\"), JOptionPane.WARNING_MESSAGE);\r\n    }\r\n\r\n    /**\r\n     * Shows a warning dialog telling the user that the selection panel is still\r\n     * adding files.\r\n     *\r\n     * @param comp\r\n     * @param msgType\r\n     */\r\n    public static void showWarningAddingDocument(Component comp) {\r\n        JOptionPane.showMessageDialog(comp, GettextResource.gettext(Configuration.getInstance().getI18nResourceBundle(), \"Please wait while all files are processed.\"), GettextResource.gettext(Configuration.getInstance().getI18nResourceBundle(), \"Still adding files\"), JOptionPane.WARNING_MESSAGE);\r\n    }\r\n\r\n    /**\r\n     * Shows a warning dialog telling the user that the destination is not set\r\n     *\r\n     * @param comp\r\n     * @param msgType\r\n     */\r\n    public static void showWarningNoDestinationSelected(Component comp, int msgType) {\r\n        String msg;\r\n        if (FILE_DESTINATION == msgType) {\r\n            msg = GettextResource.gettext(Configuration.getInstance().getI18nResourceBundle(), \"Please select a destination file.\");\r\n        } else {\r\n            msg = GettextResource.gettext(Configuration.getInstance().getI18nResourceBundle(), \"Please select a destination directory.\");\r\n        }\r\n        JOptionPane.showMessageDialog(comp, msg, GettextResource.gettext(Configuration.getInstance().getI18nResourceBundle(), \"No destination selected\"), JOptionPane.WARNING_MESSAGE);\r\n    }\r\n\r\n    /**\r\n     * Shows a yes/no/cancel dialog to ask the user about overwriting output\r\n     * file\r\n     *\r\n     * @param comp\r\n     *            parent component\r\n     * @param filename\r\n     *            suggested directory\r\n     * @return an integer indicating the option chosen by the user\r\n     */\r\n    public static int askForOverwriteOutputFileDialog(Component comp, String filename) {\r\n        return JOptionPane.showOptionDialog(comp, GettextResource.gettext(Configuration.getInstance().getI18nResourceBundle(), \"Selected output file already exists \") + filename + \"\\n\" + GettextResource.gettext(Configuration.getInstance().getI18nResourceBundle(), \"Would you like to overwrite it?\"), GettextResource.gettext(Configuration.getInstance().getI18nResourceBundle(), \"Output location error\"), JOptionPane.YES_NO_CANCEL_OPTION, JOptionPane.QUESTION_MESSAGE, null, null, null);\r\n    }\r\n\r\n    /**\r\n     * Shows a yes/no/cancel asking the user for a confirmation about the\r\n     * overwrite check\r\n     *\r\n     * @param comp\r\n     * @return\r\n     */\r\n    public static int askForOverwriteConfirmation(Component comp) {\r\n        return JOptionPane.showOptionDialog(comp, GettextResource.gettext(Configuration.getInstance().getI18nResourceBundle(), \"Please note that output files will overwrite existing files of the same name without warning.\") + \"\\n\" + GettextResource.gettext(Configuration.getInstance().getI18nResourceBundle(), \"Do you confirm to overwrite?\"), GettextResource.gettext(Configuration.getInstance().getI18nResourceBundle(), \"Confirm overwrite\"), JOptionPane.YES_NO_CANCEL_OPTION, JOptionPane.QUESTION_MESSAGE, null, null, null);\r\n    }\r\n\r\n    /**\r\n     * Shows an error dialog\r\n     *\r\n     * @param comp\r\n     * @param bounds\r\n     */\r\n    public static void errorValidatingBounds(Component comp, String bounds) {\r\n        JOptionPane.showMessageDialog(comp, GettextResource.gettext(Configuration.getInstance().getI18nResourceBundle(), \"Provided pages selection is not valid\") + \" (\" + bounds + \")\\n\" + GettextResource.gettext(Configuration.getInstance().getI18nResourceBundle(), \"Limits must be a comma separated list of \\\"page_number\\\" or \\\"page_number-page_number\\\"\"), GettextResource.gettext(Configuration.getInstance().getI18nResourceBundle(), \"Limits are not valid\"), JOptionPane.ERROR_MESSAGE);\r\n    }\r\n\r\n    /**\r\n     * Generic error dialog\r\n     *\r\n     * @param comp\r\n     * @param title\r\n     * @param message\r\n     */\r\n    public static void errorGenericDialog(Component comp, String title, String message) {\r\n        JOptionPane.showMessageDialog(comp, message, title, JOptionPane.ERROR_MESSAGE);\r\n    }\r\n\r\n    /**\r\n     * Show a dialog to ask the user for the document password\r\n     *\r\n     * @param comp\r\n     * @return an integer indicating the option chosen by the user\r\n     */\r\n    public static String askForDocumentPasswordDialog(Component comp, String filename) {\r\n        String retVal = null;\r\n        JPasswordField passwordField = new JPasswordField();\r\n        Object[] message = new Object[] { GettextResource.gettext(Configuration.getInstance().getI18nResourceBundle(), \"Please provide the password to open the encrypted document\"), filename, passwordField };\r\n        passwordField.requestFocus();\r\n        if (JOptionPane.showOptionDialog(comp, message, GettextResource.gettext(Configuration.getInstance().getI18nResourceBundle(), \"Password request\"), JOptionPane.OK_CANCEL_OPTION, JOptionPane.QUESTION_MESSAGE, null, null, null) == 0) {\r\n            retVal = String.valueOf(passwordField.getPassword());\r\n        }\r\n        return retVal;\r\n    }\r\n\r\n    /**\r\n     * Shows a yes/no confirmation dialog to ask the user if he wants to empty\r\n     * the selection list\r\n     *\r\n     * @param comp\r\n     * @return an integer indicating the option chosen by the user\r\n     */\r\n    public static int askForEmptySelectionPanel(Component comp) {\r\n        return JOptionPane.showConfirmDialog(comp, GettextResource.gettext(Configuration.getInstance().getI18nResourceBundle(), \"Selection list is full, would you like to empty it and load the new document?\"), GettextResource.gettext(Configuration.getInstance().getI18nResourceBundle(), \"List full\"), JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE);\r\n    }\r\n\r\n    /**\r\n     * Shows a yes/no confirmation dialog to ask the user if he wants to\r\n     * continue even if the selected pdf version is lower than the lowest\r\n     * available\r\n     *\r\n     * @param comp\r\n     * @param lowestVersion\r\n     * @return\r\n     */\r\n    public static int askForPdfVersionConfilct(Component comp, String lowestVersion) {\r\n        return JOptionPane.showConfirmDialog(comp, GettextResource.gettext(Configuration.getInstance().getI18nResourceBundle(), \"The lowest available pdf version is \") + lowestVersion + \".\\n\" + GettextResource.gettext(Configuration.getInstance().getI18nResourceBundle(), \"You selected a lower output pdf version, continue anyway ?\"), GettextResource.gettext(Configuration.getInstance().getI18nResourceBundle(), \"Pdf version conflict\"), JOptionPane.YES_NO_OPTION, JOptionPane.WARNING_MESSAGE);\r\n    }\r\n}\r\n",
		"id": "EvoSuiteBenchmark/109_pdfsam/src/main/java/org/pdfsam/guiclient/utils/DialogUtilityTest1.java",
		"test_prompt": "// DialogUtilityTest1.java\npackage org.pdfsam.guiclient.utils;\n\nimport java.awt.Component;\nimport javax.swing.JOptionPane;\nimport javax.swing.JPasswordField;\nimport org.pdfsam.guiclient.configuration.Configuration;\nimport org.pdfsam.i18n.GettextResource;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link DialogUtility}.\n* It contains ten unit test cases for the {@link DialogUtility#askForOverwriteOutputFileDialog(Component, String)} method.\n*/\nclass DialogUtilityTest1 {"
	},
	{
		"original_code": "// DialogUtility.java\n/*\r\n * Created on 12-Oct-2008\r\n * Copyright (C) 2008 by Andrea Vacondio.\r\n *\r\n * This program is free software; you can redistribute it and/or modify it under the terms of the \r\n * GNU General Public License as published by the Free Software Foundation; \r\n * either version 2 of the License.\r\n * This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; \r\n * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. \r\n * See the GNU General Public License for more details.\r\n * You should have received a copy of the GNU General Public License along with this program; \r\n * if not, write to the Free Software Foundation, Inc., \r\n *  59 Temple Place, Suite 330, Boston, MA 02111-1307 USA\r\n */\r\npackage org.pdfsam.guiclient.utils;\r\n\r\nimport java.awt.Component;\r\nimport javax.swing.JOptionPane;\r\nimport javax.swing.JPasswordField;\r\nimport org.pdfsam.guiclient.configuration.Configuration;\r\nimport org.pdfsam.i18n.GettextResource;\r\n\r\n/**\r\n * Utility to show dialogs\r\n *\r\n * @author Andrea Vacondio\r\n */\r\npublic class DialogUtility {\r\n\r\n    public static final int AT_LEAST_ONE_DOC = 0;\r\n\r\n    public static final int ONE_DOC = 1;\r\n\r\n    public static final int TWO_DOC = 2;\r\n\r\n    public static final int FILE_DESTINATION = 0;\r\n\r\n    public static final int DIRECTORY_DESTINATION = 1;\r\n\r\n    /**\r\n     * Shows a yes/no/cancel dialog to ask for change the output directory\r\n     *\r\n     * @param comp\r\n     *            parent component\r\n     * @param suggestedDir\r\n     *            suggested directory\r\n     * @return an integer indicating the option chosen by the user\r\n     */\r\n    public static int showConfirmOuputLocationDialog(Component comp, String suggestedDir) {\r\n        return JOptionPane.showOptionDialog(comp, GettextResource.gettext(Configuration.getInstance().getI18nResourceBundle(), \"Output file location is not correct\") + \".\\n\" + GettextResource.gettext(Configuration.getInstance().getI18nResourceBundle(), \"Would you like to change it to\") + \" \" + suggestedDir + \" ?\", GettextResource.gettext(Configuration.getInstance().getI18nResourceBundle(), \"Output location error\"), JOptionPane.YES_NO_CANCEL_OPTION, JOptionPane.QUESTION_MESSAGE, null, null, null);\r\n    }\r\n\r\n    /**\r\n     * Shows a warning dialog telling the user that at least one document should\r\n     * be selected\r\n     *\r\n     * @param comp\r\n     * @param msgType\r\n     *            the type of the message\r\n     */\r\n    public static void showWarningNoDocsSelected(Component comp, int msgType) {\r\n        String msg = GettextResource.gettext(Configuration.getInstance().getI18nResourceBundle(), \"Please select at least one pdf document.\");\r\n        if (TWO_DOC == msgType) {\r\n            msg = GettextResource.gettext(Configuration.getInstance().getI18nResourceBundle(), \"Please select two pdf documents.\");\r\n        } else if (ONE_DOC == msgType) {\r\n            msg = GettextResource.gettext(Configuration.getInstance().getI18nResourceBundle(), \"Please select a pdf document.\");\r\n        }\r\n        JOptionPane.showMessageDialog(comp, msg, GettextResource.gettext(Configuration.getInstance().getI18nResourceBundle(), \"Warning\"), JOptionPane.WARNING_MESSAGE);\r\n    }\r\n\r\n    /**\r\n     * Shows a warning dialog telling the user that the selection panel is still\r\n     * adding files.\r\n     *\r\n     * @param comp\r\n     * @param msgType\r\n     */\r\n    public static void showWarningAddingDocument(Component comp) {\r\n        JOptionPane.showMessageDialog(comp, GettextResource.gettext(Configuration.getInstance().getI18nResourceBundle(), \"Please wait while all files are processed.\"), GettextResource.gettext(Configuration.getInstance().getI18nResourceBundle(), \"Still adding files\"), JOptionPane.WARNING_MESSAGE);\r\n    }\r\n\r\n    /**\r\n     * Shows a warning dialog telling the user that the destination is not set\r\n     *\r\n     * @param comp\r\n     * @param msgType\r\n     */\r\n    public static void showWarningNoDestinationSelected(Component comp, int msgType) {\r\n        String msg;\r\n        if (FILE_DESTINATION == msgType) {\r\n            msg = GettextResource.gettext(Configuration.getInstance().getI18nResourceBundle(), \"Please select a destination file.\");\r\n        } else {\r\n            msg = GettextResource.gettext(Configuration.getInstance().getI18nResourceBundle(), \"Please select a destination directory.\");\r\n        }\r\n        JOptionPane.showMessageDialog(comp, msg, GettextResource.gettext(Configuration.getInstance().getI18nResourceBundle(), \"No destination selected\"), JOptionPane.WARNING_MESSAGE);\r\n    }\r\n\r\n    /**\r\n     * Shows a yes/no/cancel dialog to ask the user about overwriting output\r\n     * file\r\n     *\r\n     * @param comp\r\n     *            parent component\r\n     * @param filename\r\n     *            suggested directory\r\n     * @return an integer indicating the option chosen by the user\r\n     */\r\n    public static int askForOverwriteOutputFileDialog(Component comp, String filename) {\r\n        return JOptionPane.showOptionDialog(comp, GettextResource.gettext(Configuration.getInstance().getI18nResourceBundle(), \"Selected output file already exists \") + filename + \"\\n\" + GettextResource.gettext(Configuration.getInstance().getI18nResourceBundle(), \"Would you like to overwrite it?\"), GettextResource.gettext(Configuration.getInstance().getI18nResourceBundle(), \"Output location error\"), JOptionPane.YES_NO_CANCEL_OPTION, JOptionPane.QUESTION_MESSAGE, null, null, null);\r\n    }\r\n\r\n    /**\r\n     * Shows a yes/no/cancel asking the user for a confirmation about the\r\n     * overwrite check\r\n     *\r\n     * @param comp\r\n     * @return\r\n     */\r\n    public static int askForOverwriteConfirmation(Component comp) {\r\n        return JOptionPane.showOptionDialog(comp, GettextResource.gettext(Configuration.getInstance().getI18nResourceBundle(), \"Please note that output files will overwrite existing files of the same name without warning.\") + \"\\n\" + GettextResource.gettext(Configuration.getInstance().getI18nResourceBundle(), \"Do you confirm to overwrite?\"), GettextResource.gettext(Configuration.getInstance().getI18nResourceBundle(), \"Confirm overwrite\"), JOptionPane.YES_NO_CANCEL_OPTION, JOptionPane.QUESTION_MESSAGE, null, null, null);\r\n    }\r\n\r\n    /**\r\n     * Shows an error dialog\r\n     *\r\n     * @param comp\r\n     * @param bounds\r\n     */\r\n    public static void errorValidatingBounds(Component comp, String bounds) {\r\n        JOptionPane.showMessageDialog(comp, GettextResource.gettext(Configuration.getInstance().getI18nResourceBundle(), \"Provided pages selection is not valid\") + \" (\" + bounds + \")\\n\" + GettextResource.gettext(Configuration.getInstance().getI18nResourceBundle(), \"Limits must be a comma separated list of \\\"page_number\\\" or \\\"page_number-page_number\\\"\"), GettextResource.gettext(Configuration.getInstance().getI18nResourceBundle(), \"Limits are not valid\"), JOptionPane.ERROR_MESSAGE);\r\n    }\r\n\r\n    /**\r\n     * Generic error dialog\r\n     *\r\n     * @param comp\r\n     * @param title\r\n     * @param message\r\n     */\r\n    public static void errorGenericDialog(Component comp, String title, String message) {\r\n        JOptionPane.showMessageDialog(comp, message, title, JOptionPane.ERROR_MESSAGE);\r\n    }\r\n\r\n    /**\r\n     * Show a dialog to ask the user for the document password\r\n     *\r\n     * @param comp\r\n     * @return an integer indicating the option chosen by the user\r\n     */\r\n    public static String askForDocumentPasswordDialog(Component comp, String filename) {\r\n        String retVal = null;\r\n        JPasswordField passwordField = new JPasswordField();\r\n        Object[] message = new Object[] { GettextResource.gettext(Configuration.getInstance().getI18nResourceBundle(), \"Please provide the password to open the encrypted document\"), filename, passwordField };\r\n        passwordField.requestFocus();\r\n        if (JOptionPane.showOptionDialog(comp, message, GettextResource.gettext(Configuration.getInstance().getI18nResourceBundle(), \"Password request\"), JOptionPane.OK_CANCEL_OPTION, JOptionPane.QUESTION_MESSAGE, null, null, null) == 0) {\r\n            retVal = String.valueOf(passwordField.getPassword());\r\n        }\r\n        return retVal;\r\n    }\r\n\r\n    /**\r\n     * Shows a yes/no confirmation dialog to ask the user if he wants to empty\r\n     * the selection list\r\n     *\r\n     * @param comp\r\n     * @return an integer indicating the option chosen by the user\r\n     */\r\n    public static int askForEmptySelectionPanel(Component comp) {\r\n        return JOptionPane.showConfirmDialog(comp, GettextResource.gettext(Configuration.getInstance().getI18nResourceBundle(), \"Selection list is full, would you like to empty it and load the new document?\"), GettextResource.gettext(Configuration.getInstance().getI18nResourceBundle(), \"List full\"), JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE);\r\n    }\r\n\r\n    /**\r\n     * Shows a yes/no confirmation dialog to ask the user if he wants to\r\n     * continue even if the selected pdf version is lower than the lowest\r\n     * available\r\n     *\r\n     * @param comp\r\n     * @param lowestVersion\r\n     * @return\r\n     */\r\n    public static int askForPdfVersionConfilct(Component comp, String lowestVersion) {\r\n        return JOptionPane.showConfirmDialog(comp, GettextResource.gettext(Configuration.getInstance().getI18nResourceBundle(), \"The lowest available pdf version is \") + lowestVersion + \".\\n\" + GettextResource.gettext(Configuration.getInstance().getI18nResourceBundle(), \"You selected a lower output pdf version, continue anyway ?\"), GettextResource.gettext(Configuration.getInstance().getI18nResourceBundle(), \"Pdf version conflict\"), JOptionPane.YES_NO_OPTION, JOptionPane.WARNING_MESSAGE);\r\n    }\r\n}\r\n",
		"id": "EvoSuiteBenchmark/109_pdfsam/src/main/java/org/pdfsam/guiclient/utils/DialogUtilityTest2.java",
		"test_prompt": "// DialogUtilityTest2.java\npackage org.pdfsam.guiclient.utils;\n\nimport java.awt.Component;\nimport javax.swing.JOptionPane;\nimport javax.swing.JPasswordField;\nimport org.pdfsam.guiclient.configuration.Configuration;\nimport org.pdfsam.i18n.GettextResource;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link DialogUtility}.\n* It contains ten unit test cases for the {@link DialogUtility#askForOverwriteConfirmation(Component)} method.\n*/\nclass DialogUtilityTest2 {"
	},
	{
		"original_code": "// DialogUtility.java\n/*\r\n * Created on 12-Oct-2008\r\n * Copyright (C) 2008 by Andrea Vacondio.\r\n *\r\n * This program is free software; you can redistribute it and/or modify it under the terms of the \r\n * GNU General Public License as published by the Free Software Foundation; \r\n * either version 2 of the License.\r\n * This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; \r\n * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. \r\n * See the GNU General Public License for more details.\r\n * You should have received a copy of the GNU General Public License along with this program; \r\n * if not, write to the Free Software Foundation, Inc., \r\n *  59 Temple Place, Suite 330, Boston, MA 02111-1307 USA\r\n */\r\npackage org.pdfsam.guiclient.utils;\r\n\r\nimport java.awt.Component;\r\nimport javax.swing.JOptionPane;\r\nimport javax.swing.JPasswordField;\r\nimport org.pdfsam.guiclient.configuration.Configuration;\r\nimport org.pdfsam.i18n.GettextResource;\r\n\r\n/**\r\n * Utility to show dialogs\r\n *\r\n * @author Andrea Vacondio\r\n */\r\npublic class DialogUtility {\r\n\r\n    public static final int AT_LEAST_ONE_DOC = 0;\r\n\r\n    public static final int ONE_DOC = 1;\r\n\r\n    public static final int TWO_DOC = 2;\r\n\r\n    public static final int FILE_DESTINATION = 0;\r\n\r\n    public static final int DIRECTORY_DESTINATION = 1;\r\n\r\n    /**\r\n     * Shows a yes/no/cancel dialog to ask for change the output directory\r\n     *\r\n     * @param comp\r\n     *            parent component\r\n     * @param suggestedDir\r\n     *            suggested directory\r\n     * @return an integer indicating the option chosen by the user\r\n     */\r\n    public static int showConfirmOuputLocationDialog(Component comp, String suggestedDir) {\r\n        return JOptionPane.showOptionDialog(comp, GettextResource.gettext(Configuration.getInstance().getI18nResourceBundle(), \"Output file location is not correct\") + \".\\n\" + GettextResource.gettext(Configuration.getInstance().getI18nResourceBundle(), \"Would you like to change it to\") + \" \" + suggestedDir + \" ?\", GettextResource.gettext(Configuration.getInstance().getI18nResourceBundle(), \"Output location error\"), JOptionPane.YES_NO_CANCEL_OPTION, JOptionPane.QUESTION_MESSAGE, null, null, null);\r\n    }\r\n\r\n    /**\r\n     * Shows a warning dialog telling the user that at least one document should\r\n     * be selected\r\n     *\r\n     * @param comp\r\n     * @param msgType\r\n     *            the type of the message\r\n     */\r\n    public static void showWarningNoDocsSelected(Component comp, int msgType) {\r\n        String msg = GettextResource.gettext(Configuration.getInstance().getI18nResourceBundle(), \"Please select at least one pdf document.\");\r\n        if (TWO_DOC == msgType) {\r\n            msg = GettextResource.gettext(Configuration.getInstance().getI18nResourceBundle(), \"Please select two pdf documents.\");\r\n        } else if (ONE_DOC == msgType) {\r\n            msg = GettextResource.gettext(Configuration.getInstance().getI18nResourceBundle(), \"Please select a pdf document.\");\r\n        }\r\n        JOptionPane.showMessageDialog(comp, msg, GettextResource.gettext(Configuration.getInstance().getI18nResourceBundle(), \"Warning\"), JOptionPane.WARNING_MESSAGE);\r\n    }\r\n\r\n    /**\r\n     * Shows a warning dialog telling the user that the selection panel is still\r\n     * adding files.\r\n     *\r\n     * @param comp\r\n     * @param msgType\r\n     */\r\n    public static void showWarningAddingDocument(Component comp) {\r\n        JOptionPane.showMessageDialog(comp, GettextResource.gettext(Configuration.getInstance().getI18nResourceBundle(), \"Please wait while all files are processed.\"), GettextResource.gettext(Configuration.getInstance().getI18nResourceBundle(), \"Still adding files\"), JOptionPane.WARNING_MESSAGE);\r\n    }\r\n\r\n    /**\r\n     * Shows a warning dialog telling the user that the destination is not set\r\n     *\r\n     * @param comp\r\n     * @param msgType\r\n     */\r\n    public static void showWarningNoDestinationSelected(Component comp, int msgType) {\r\n        String msg;\r\n        if (FILE_DESTINATION == msgType) {\r\n            msg = GettextResource.gettext(Configuration.getInstance().getI18nResourceBundle(), \"Please select a destination file.\");\r\n        } else {\r\n            msg = GettextResource.gettext(Configuration.getInstance().getI18nResourceBundle(), \"Please select a destination directory.\");\r\n        }\r\n        JOptionPane.showMessageDialog(comp, msg, GettextResource.gettext(Configuration.getInstance().getI18nResourceBundle(), \"No destination selected\"), JOptionPane.WARNING_MESSAGE);\r\n    }\r\n\r\n    /**\r\n     * Shows a yes/no/cancel dialog to ask the user about overwriting output\r\n     * file\r\n     *\r\n     * @param comp\r\n     *            parent component\r\n     * @param filename\r\n     *            suggested directory\r\n     * @return an integer indicating the option chosen by the user\r\n     */\r\n    public static int askForOverwriteOutputFileDialog(Component comp, String filename) {\r\n        return JOptionPane.showOptionDialog(comp, GettextResource.gettext(Configuration.getInstance().getI18nResourceBundle(), \"Selected output file already exists \") + filename + \"\\n\" + GettextResource.gettext(Configuration.getInstance().getI18nResourceBundle(), \"Would you like to overwrite it?\"), GettextResource.gettext(Configuration.getInstance().getI18nResourceBundle(), \"Output location error\"), JOptionPane.YES_NO_CANCEL_OPTION, JOptionPane.QUESTION_MESSAGE, null, null, null);\r\n    }\r\n\r\n    /**\r\n     * Shows a yes/no/cancel asking the user for a confirmation about the\r\n     * overwrite check\r\n     *\r\n     * @param comp\r\n     * @return\r\n     */\r\n    public static int askForOverwriteConfirmation(Component comp) {\r\n        return JOptionPane.showOptionDialog(comp, GettextResource.gettext(Configuration.getInstance().getI18nResourceBundle(), \"Please note that output files will overwrite existing files of the same name without warning.\") + \"\\n\" + GettextResource.gettext(Configuration.getInstance().getI18nResourceBundle(), \"Do you confirm to overwrite?\"), GettextResource.gettext(Configuration.getInstance().getI18nResourceBundle(), \"Confirm overwrite\"), JOptionPane.YES_NO_CANCEL_OPTION, JOptionPane.QUESTION_MESSAGE, null, null, null);\r\n    }\r\n\r\n    /**\r\n     * Shows an error dialog\r\n     *\r\n     * @param comp\r\n     * @param bounds\r\n     */\r\n    public static void errorValidatingBounds(Component comp, String bounds) {\r\n        JOptionPane.showMessageDialog(comp, GettextResource.gettext(Configuration.getInstance().getI18nResourceBundle(), \"Provided pages selection is not valid\") + \" (\" + bounds + \")\\n\" + GettextResource.gettext(Configuration.getInstance().getI18nResourceBundle(), \"Limits must be a comma separated list of \\\"page_number\\\" or \\\"page_number-page_number\\\"\"), GettextResource.gettext(Configuration.getInstance().getI18nResourceBundle(), \"Limits are not valid\"), JOptionPane.ERROR_MESSAGE);\r\n    }\r\n\r\n    /**\r\n     * Generic error dialog\r\n     *\r\n     * @param comp\r\n     * @param title\r\n     * @param message\r\n     */\r\n    public static void errorGenericDialog(Component comp, String title, String message) {\r\n        JOptionPane.showMessageDialog(comp, message, title, JOptionPane.ERROR_MESSAGE);\r\n    }\r\n\r\n    /**\r\n     * Show a dialog to ask the user for the document password\r\n     *\r\n     * @param comp\r\n     * @return an integer indicating the option chosen by the user\r\n     */\r\n    public static String askForDocumentPasswordDialog(Component comp, String filename) {\r\n        String retVal = null;\r\n        JPasswordField passwordField = new JPasswordField();\r\n        Object[] message = new Object[] { GettextResource.gettext(Configuration.getInstance().getI18nResourceBundle(), \"Please provide the password to open the encrypted document\"), filename, passwordField };\r\n        passwordField.requestFocus();\r\n        if (JOptionPane.showOptionDialog(comp, message, GettextResource.gettext(Configuration.getInstance().getI18nResourceBundle(), \"Password request\"), JOptionPane.OK_CANCEL_OPTION, JOptionPane.QUESTION_MESSAGE, null, null, null) == 0) {\r\n            retVal = String.valueOf(passwordField.getPassword());\r\n        }\r\n        return retVal;\r\n    }\r\n\r\n    /**\r\n     * Shows a yes/no confirmation dialog to ask the user if he wants to empty\r\n     * the selection list\r\n     *\r\n     * @param comp\r\n     * @return an integer indicating the option chosen by the user\r\n     */\r\n    public static int askForEmptySelectionPanel(Component comp) {\r\n        return JOptionPane.showConfirmDialog(comp, GettextResource.gettext(Configuration.getInstance().getI18nResourceBundle(), \"Selection list is full, would you like to empty it and load the new document?\"), GettextResource.gettext(Configuration.getInstance().getI18nResourceBundle(), \"List full\"), JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE);\r\n    }\r\n\r\n    /**\r\n     * Shows a yes/no confirmation dialog to ask the user if he wants to\r\n     * continue even if the selected pdf version is lower than the lowest\r\n     * available\r\n     *\r\n     * @param comp\r\n     * @param lowestVersion\r\n     * @return\r\n     */\r\n    public static int askForPdfVersionConfilct(Component comp, String lowestVersion) {\r\n        return JOptionPane.showConfirmDialog(comp, GettextResource.gettext(Configuration.getInstance().getI18nResourceBundle(), \"The lowest available pdf version is \") + lowestVersion + \".\\n\" + GettextResource.gettext(Configuration.getInstance().getI18nResourceBundle(), \"You selected a lower output pdf version, continue anyway ?\"), GettextResource.gettext(Configuration.getInstance().getI18nResourceBundle(), \"Pdf version conflict\"), JOptionPane.YES_NO_OPTION, JOptionPane.WARNING_MESSAGE);\r\n    }\r\n}\r\n",
		"id": "EvoSuiteBenchmark/109_pdfsam/src/main/java/org/pdfsam/guiclient/utils/DialogUtilityTest3.java",
		"test_prompt": "// DialogUtilityTest3.java\npackage org.pdfsam.guiclient.utils;\n\nimport java.awt.Component;\nimport javax.swing.JOptionPane;\nimport javax.swing.JPasswordField;\nimport org.pdfsam.guiclient.configuration.Configuration;\nimport org.pdfsam.i18n.GettextResource;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link DialogUtility}.\n* It contains ten unit test cases for the {@link DialogUtility#askForDocumentPasswordDialog(Component, String)} method.\n*/\nclass DialogUtilityTest3 {"
	},
	{
		"original_code": "// DialogUtility.java\n/*\r\n * Created on 12-Oct-2008\r\n * Copyright (C) 2008 by Andrea Vacondio.\r\n *\r\n * This program is free software; you can redistribute it and/or modify it under the terms of the \r\n * GNU General Public License as published by the Free Software Foundation; \r\n * either version 2 of the License.\r\n * This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; \r\n * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. \r\n * See the GNU General Public License for more details.\r\n * You should have received a copy of the GNU General Public License along with this program; \r\n * if not, write to the Free Software Foundation, Inc., \r\n *  59 Temple Place, Suite 330, Boston, MA 02111-1307 USA\r\n */\r\npackage org.pdfsam.guiclient.utils;\r\n\r\nimport java.awt.Component;\r\nimport javax.swing.JOptionPane;\r\nimport javax.swing.JPasswordField;\r\nimport org.pdfsam.guiclient.configuration.Configuration;\r\nimport org.pdfsam.i18n.GettextResource;\r\n\r\n/**\r\n * Utility to show dialogs\r\n *\r\n * @author Andrea Vacondio\r\n */\r\npublic class DialogUtility {\r\n\r\n    public static final int AT_LEAST_ONE_DOC = 0;\r\n\r\n    public static final int ONE_DOC = 1;\r\n\r\n    public static final int TWO_DOC = 2;\r\n\r\n    public static final int FILE_DESTINATION = 0;\r\n\r\n    public static final int DIRECTORY_DESTINATION = 1;\r\n\r\n    /**\r\n     * Shows a yes/no/cancel dialog to ask for change the output directory\r\n     *\r\n     * @param comp\r\n     *            parent component\r\n     * @param suggestedDir\r\n     *            suggested directory\r\n     * @return an integer indicating the option chosen by the user\r\n     */\r\n    public static int showConfirmOuputLocationDialog(Component comp, String suggestedDir) {\r\n        return JOptionPane.showOptionDialog(comp, GettextResource.gettext(Configuration.getInstance().getI18nResourceBundle(), \"Output file location is not correct\") + \".\\n\" + GettextResource.gettext(Configuration.getInstance().getI18nResourceBundle(), \"Would you like to change it to\") + \" \" + suggestedDir + \" ?\", GettextResource.gettext(Configuration.getInstance().getI18nResourceBundle(), \"Output location error\"), JOptionPane.YES_NO_CANCEL_OPTION, JOptionPane.QUESTION_MESSAGE, null, null, null);\r\n    }\r\n\r\n    /**\r\n     * Shows a warning dialog telling the user that at least one document should\r\n     * be selected\r\n     *\r\n     * @param comp\r\n     * @param msgType\r\n     *            the type of the message\r\n     */\r\n    public static void showWarningNoDocsSelected(Component comp, int msgType) {\r\n        String msg = GettextResource.gettext(Configuration.getInstance().getI18nResourceBundle(), \"Please select at least one pdf document.\");\r\n        if (TWO_DOC == msgType) {\r\n            msg = GettextResource.gettext(Configuration.getInstance().getI18nResourceBundle(), \"Please select two pdf documents.\");\r\n        } else if (ONE_DOC == msgType) {\r\n            msg = GettextResource.gettext(Configuration.getInstance().getI18nResourceBundle(), \"Please select a pdf document.\");\r\n        }\r\n        JOptionPane.showMessageDialog(comp, msg, GettextResource.gettext(Configuration.getInstance().getI18nResourceBundle(), \"Warning\"), JOptionPane.WARNING_MESSAGE);\r\n    }\r\n\r\n    /**\r\n     * Shows a warning dialog telling the user that the selection panel is still\r\n     * adding files.\r\n     *\r\n     * @param comp\r\n     * @param msgType\r\n     */\r\n    public static void showWarningAddingDocument(Component comp) {\r\n        JOptionPane.showMessageDialog(comp, GettextResource.gettext(Configuration.getInstance().getI18nResourceBundle(), \"Please wait while all files are processed.\"), GettextResource.gettext(Configuration.getInstance().getI18nResourceBundle(), \"Still adding files\"), JOptionPane.WARNING_MESSAGE);\r\n    }\r\n\r\n    /**\r\n     * Shows a warning dialog telling the user that the destination is not set\r\n     *\r\n     * @param comp\r\n     * @param msgType\r\n     */\r\n    public static void showWarningNoDestinationSelected(Component comp, int msgType) {\r\n        String msg;\r\n        if (FILE_DESTINATION == msgType) {\r\n            msg = GettextResource.gettext(Configuration.getInstance().getI18nResourceBundle(), \"Please select a destination file.\");\r\n        } else {\r\n            msg = GettextResource.gettext(Configuration.getInstance().getI18nResourceBundle(), \"Please select a destination directory.\");\r\n        }\r\n        JOptionPane.showMessageDialog(comp, msg, GettextResource.gettext(Configuration.getInstance().getI18nResourceBundle(), \"No destination selected\"), JOptionPane.WARNING_MESSAGE);\r\n    }\r\n\r\n    /**\r\n     * Shows a yes/no/cancel dialog to ask the user about overwriting output\r\n     * file\r\n     *\r\n     * @param comp\r\n     *            parent component\r\n     * @param filename\r\n     *            suggested directory\r\n     * @return an integer indicating the option chosen by the user\r\n     */\r\n    public static int askForOverwriteOutputFileDialog(Component comp, String filename) {\r\n        return JOptionPane.showOptionDialog(comp, GettextResource.gettext(Configuration.getInstance().getI18nResourceBundle(), \"Selected output file already exists \") + filename + \"\\n\" + GettextResource.gettext(Configuration.getInstance().getI18nResourceBundle(), \"Would you like to overwrite it?\"), GettextResource.gettext(Configuration.getInstance().getI18nResourceBundle(), \"Output location error\"), JOptionPane.YES_NO_CANCEL_OPTION, JOptionPane.QUESTION_MESSAGE, null, null, null);\r\n    }\r\n\r\n    /**\r\n     * Shows a yes/no/cancel asking the user for a confirmation about the\r\n     * overwrite check\r\n     *\r\n     * @param comp\r\n     * @return\r\n     */\r\n    public static int askForOverwriteConfirmation(Component comp) {\r\n        return JOptionPane.showOptionDialog(comp, GettextResource.gettext(Configuration.getInstance().getI18nResourceBundle(), \"Please note that output files will overwrite existing files of the same name without warning.\") + \"\\n\" + GettextResource.gettext(Configuration.getInstance().getI18nResourceBundle(), \"Do you confirm to overwrite?\"), GettextResource.gettext(Configuration.getInstance().getI18nResourceBundle(), \"Confirm overwrite\"), JOptionPane.YES_NO_CANCEL_OPTION, JOptionPane.QUESTION_MESSAGE, null, null, null);\r\n    }\r\n\r\n    /**\r\n     * Shows an error dialog\r\n     *\r\n     * @param comp\r\n     * @param bounds\r\n     */\r\n    public static void errorValidatingBounds(Component comp, String bounds) {\r\n        JOptionPane.showMessageDialog(comp, GettextResource.gettext(Configuration.getInstance().getI18nResourceBundle(), \"Provided pages selection is not valid\") + \" (\" + bounds + \")\\n\" + GettextResource.gettext(Configuration.getInstance().getI18nResourceBundle(), \"Limits must be a comma separated list of \\\"page_number\\\" or \\\"page_number-page_number\\\"\"), GettextResource.gettext(Configuration.getInstance().getI18nResourceBundle(), \"Limits are not valid\"), JOptionPane.ERROR_MESSAGE);\r\n    }\r\n\r\n    /**\r\n     * Generic error dialog\r\n     *\r\n     * @param comp\r\n     * @param title\r\n     * @param message\r\n     */\r\n    public static void errorGenericDialog(Component comp, String title, String message) {\r\n        JOptionPane.showMessageDialog(comp, message, title, JOptionPane.ERROR_MESSAGE);\r\n    }\r\n\r\n    /**\r\n     * Show a dialog to ask the user for the document password\r\n     *\r\n     * @param comp\r\n     * @return an integer indicating the option chosen by the user\r\n     */\r\n    public static String askForDocumentPasswordDialog(Component comp, String filename) {\r\n        String retVal = null;\r\n        JPasswordField passwordField = new JPasswordField();\r\n        Object[] message = new Object[] { GettextResource.gettext(Configuration.getInstance().getI18nResourceBundle(), \"Please provide the password to open the encrypted document\"), filename, passwordField };\r\n        passwordField.requestFocus();\r\n        if (JOptionPane.showOptionDialog(comp, message, GettextResource.gettext(Configuration.getInstance().getI18nResourceBundle(), \"Password request\"), JOptionPane.OK_CANCEL_OPTION, JOptionPane.QUESTION_MESSAGE, null, null, null) == 0) {\r\n            retVal = String.valueOf(passwordField.getPassword());\r\n        }\r\n        return retVal;\r\n    }\r\n\r\n    /**\r\n     * Shows a yes/no confirmation dialog to ask the user if he wants to empty\r\n     * the selection list\r\n     *\r\n     * @param comp\r\n     * @return an integer indicating the option chosen by the user\r\n     */\r\n    public static int askForEmptySelectionPanel(Component comp) {\r\n        return JOptionPane.showConfirmDialog(comp, GettextResource.gettext(Configuration.getInstance().getI18nResourceBundle(), \"Selection list is full, would you like to empty it and load the new document?\"), GettextResource.gettext(Configuration.getInstance().getI18nResourceBundle(), \"List full\"), JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE);\r\n    }\r\n\r\n    /**\r\n     * Shows a yes/no confirmation dialog to ask the user if he wants to\r\n     * continue even if the selected pdf version is lower than the lowest\r\n     * available\r\n     *\r\n     * @param comp\r\n     * @param lowestVersion\r\n     * @return\r\n     */\r\n    public static int askForPdfVersionConfilct(Component comp, String lowestVersion) {\r\n        return JOptionPane.showConfirmDialog(comp, GettextResource.gettext(Configuration.getInstance().getI18nResourceBundle(), \"The lowest available pdf version is \") + lowestVersion + \".\\n\" + GettextResource.gettext(Configuration.getInstance().getI18nResourceBundle(), \"You selected a lower output pdf version, continue anyway ?\"), GettextResource.gettext(Configuration.getInstance().getI18nResourceBundle(), \"Pdf version conflict\"), JOptionPane.YES_NO_OPTION, JOptionPane.WARNING_MESSAGE);\r\n    }\r\n}\r\n",
		"id": "EvoSuiteBenchmark/109_pdfsam/src/main/java/org/pdfsam/guiclient/utils/DialogUtilityTest4.java",
		"test_prompt": "// DialogUtilityTest4.java\npackage org.pdfsam.guiclient.utils;\n\nimport java.awt.Component;\nimport javax.swing.JOptionPane;\nimport javax.swing.JPasswordField;\nimport org.pdfsam.guiclient.configuration.Configuration;\nimport org.pdfsam.i18n.GettextResource;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link DialogUtility}.\n* It contains ten unit test cases for the {@link DialogUtility#askForEmptySelectionPanel(Component)} method.\n*/\nclass DialogUtilityTest4 {"
	},
	{
		"original_code": "// DialogUtility.java\n/*\r\n * Created on 12-Oct-2008\r\n * Copyright (C) 2008 by Andrea Vacondio.\r\n *\r\n * This program is free software; you can redistribute it and/or modify it under the terms of the \r\n * GNU General Public License as published by the Free Software Foundation; \r\n * either version 2 of the License.\r\n * This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; \r\n * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. \r\n * See the GNU General Public License for more details.\r\n * You should have received a copy of the GNU General Public License along with this program; \r\n * if not, write to the Free Software Foundation, Inc., \r\n *  59 Temple Place, Suite 330, Boston, MA 02111-1307 USA\r\n */\r\npackage org.pdfsam.guiclient.utils;\r\n\r\nimport java.awt.Component;\r\nimport javax.swing.JOptionPane;\r\nimport javax.swing.JPasswordField;\r\nimport org.pdfsam.guiclient.configuration.Configuration;\r\nimport org.pdfsam.i18n.GettextResource;\r\n\r\n/**\r\n * Utility to show dialogs\r\n *\r\n * @author Andrea Vacondio\r\n */\r\npublic class DialogUtility {\r\n\r\n    public static final int AT_LEAST_ONE_DOC = 0;\r\n\r\n    public static final int ONE_DOC = 1;\r\n\r\n    public static final int TWO_DOC = 2;\r\n\r\n    public static final int FILE_DESTINATION = 0;\r\n\r\n    public static final int DIRECTORY_DESTINATION = 1;\r\n\r\n    /**\r\n     * Shows a yes/no/cancel dialog to ask for change the output directory\r\n     *\r\n     * @param comp\r\n     *            parent component\r\n     * @param suggestedDir\r\n     *            suggested directory\r\n     * @return an integer indicating the option chosen by the user\r\n     */\r\n    public static int showConfirmOuputLocationDialog(Component comp, String suggestedDir) {\r\n        return JOptionPane.showOptionDialog(comp, GettextResource.gettext(Configuration.getInstance().getI18nResourceBundle(), \"Output file location is not correct\") + \".\\n\" + GettextResource.gettext(Configuration.getInstance().getI18nResourceBundle(), \"Would you like to change it to\") + \" \" + suggestedDir + \" ?\", GettextResource.gettext(Configuration.getInstance().getI18nResourceBundle(), \"Output location error\"), JOptionPane.YES_NO_CANCEL_OPTION, JOptionPane.QUESTION_MESSAGE, null, null, null);\r\n    }\r\n\r\n    /**\r\n     * Shows a warning dialog telling the user that at least one document should\r\n     * be selected\r\n     *\r\n     * @param comp\r\n     * @param msgType\r\n     *            the type of the message\r\n     */\r\n    public static void showWarningNoDocsSelected(Component comp, int msgType) {\r\n        String msg = GettextResource.gettext(Configuration.getInstance().getI18nResourceBundle(), \"Please select at least one pdf document.\");\r\n        if (TWO_DOC == msgType) {\r\n            msg = GettextResource.gettext(Configuration.getInstance().getI18nResourceBundle(), \"Please select two pdf documents.\");\r\n        } else if (ONE_DOC == msgType) {\r\n            msg = GettextResource.gettext(Configuration.getInstance().getI18nResourceBundle(), \"Please select a pdf document.\");\r\n        }\r\n        JOptionPane.showMessageDialog(comp, msg, GettextResource.gettext(Configuration.getInstance().getI18nResourceBundle(), \"Warning\"), JOptionPane.WARNING_MESSAGE);\r\n    }\r\n\r\n    /**\r\n     * Shows a warning dialog telling the user that the selection panel is still\r\n     * adding files.\r\n     *\r\n     * @param comp\r\n     * @param msgType\r\n     */\r\n    public static void showWarningAddingDocument(Component comp) {\r\n        JOptionPane.showMessageDialog(comp, GettextResource.gettext(Configuration.getInstance().getI18nResourceBundle(), \"Please wait while all files are processed.\"), GettextResource.gettext(Configuration.getInstance().getI18nResourceBundle(), \"Still adding files\"), JOptionPane.WARNING_MESSAGE);\r\n    }\r\n\r\n    /**\r\n     * Shows a warning dialog telling the user that the destination is not set\r\n     *\r\n     * @param comp\r\n     * @param msgType\r\n     */\r\n    public static void showWarningNoDestinationSelected(Component comp, int msgType) {\r\n        String msg;\r\n        if (FILE_DESTINATION == msgType) {\r\n            msg = GettextResource.gettext(Configuration.getInstance().getI18nResourceBundle(), \"Please select a destination file.\");\r\n        } else {\r\n            msg = GettextResource.gettext(Configuration.getInstance().getI18nResourceBundle(), \"Please select a destination directory.\");\r\n        }\r\n        JOptionPane.showMessageDialog(comp, msg, GettextResource.gettext(Configuration.getInstance().getI18nResourceBundle(), \"No destination selected\"), JOptionPane.WARNING_MESSAGE);\r\n    }\r\n\r\n    /**\r\n     * Shows a yes/no/cancel dialog to ask the user about overwriting output\r\n     * file\r\n     *\r\n     * @param comp\r\n     *            parent component\r\n     * @param filename\r\n     *            suggested directory\r\n     * @return an integer indicating the option chosen by the user\r\n     */\r\n    public static int askForOverwriteOutputFileDialog(Component comp, String filename) {\r\n        return JOptionPane.showOptionDialog(comp, GettextResource.gettext(Configuration.getInstance().getI18nResourceBundle(), \"Selected output file already exists \") + filename + \"\\n\" + GettextResource.gettext(Configuration.getInstance().getI18nResourceBundle(), \"Would you like to overwrite it?\"), GettextResource.gettext(Configuration.getInstance().getI18nResourceBundle(), \"Output location error\"), JOptionPane.YES_NO_CANCEL_OPTION, JOptionPane.QUESTION_MESSAGE, null, null, null);\r\n    }\r\n\r\n    /**\r\n     * Shows a yes/no/cancel asking the user for a confirmation about the\r\n     * overwrite check\r\n     *\r\n     * @param comp\r\n     * @return\r\n     */\r\n    public static int askForOverwriteConfirmation(Component comp) {\r\n        return JOptionPane.showOptionDialog(comp, GettextResource.gettext(Configuration.getInstance().getI18nResourceBundle(), \"Please note that output files will overwrite existing files of the same name without warning.\") + \"\\n\" + GettextResource.gettext(Configuration.getInstance().getI18nResourceBundle(), \"Do you confirm to overwrite?\"), GettextResource.gettext(Configuration.getInstance().getI18nResourceBundle(), \"Confirm overwrite\"), JOptionPane.YES_NO_CANCEL_OPTION, JOptionPane.QUESTION_MESSAGE, null, null, null);\r\n    }\r\n\r\n    /**\r\n     * Shows an error dialog\r\n     *\r\n     * @param comp\r\n     * @param bounds\r\n     */\r\n    public static void errorValidatingBounds(Component comp, String bounds) {\r\n        JOptionPane.showMessageDialog(comp, GettextResource.gettext(Configuration.getInstance().getI18nResourceBundle(), \"Provided pages selection is not valid\") + \" (\" + bounds + \")\\n\" + GettextResource.gettext(Configuration.getInstance().getI18nResourceBundle(), \"Limits must be a comma separated list of \\\"page_number\\\" or \\\"page_number-page_number\\\"\"), GettextResource.gettext(Configuration.getInstance().getI18nResourceBundle(), \"Limits are not valid\"), JOptionPane.ERROR_MESSAGE);\r\n    }\r\n\r\n    /**\r\n     * Generic error dialog\r\n     *\r\n     * @param comp\r\n     * @param title\r\n     * @param message\r\n     */\r\n    public static void errorGenericDialog(Component comp, String title, String message) {\r\n        JOptionPane.showMessageDialog(comp, message, title, JOptionPane.ERROR_MESSAGE);\r\n    }\r\n\r\n    /**\r\n     * Show a dialog to ask the user for the document password\r\n     *\r\n     * @param comp\r\n     * @return an integer indicating the option chosen by the user\r\n     */\r\n    public static String askForDocumentPasswordDialog(Component comp, String filename) {\r\n        String retVal = null;\r\n        JPasswordField passwordField = new JPasswordField();\r\n        Object[] message = new Object[] { GettextResource.gettext(Configuration.getInstance().getI18nResourceBundle(), \"Please provide the password to open the encrypted document\"), filename, passwordField };\r\n        passwordField.requestFocus();\r\n        if (JOptionPane.showOptionDialog(comp, message, GettextResource.gettext(Configuration.getInstance().getI18nResourceBundle(), \"Password request\"), JOptionPane.OK_CANCEL_OPTION, JOptionPane.QUESTION_MESSAGE, null, null, null) == 0) {\r\n            retVal = String.valueOf(passwordField.getPassword());\r\n        }\r\n        return retVal;\r\n    }\r\n\r\n    /**\r\n     * Shows a yes/no confirmation dialog to ask the user if he wants to empty\r\n     * the selection list\r\n     *\r\n     * @param comp\r\n     * @return an integer indicating the option chosen by the user\r\n     */\r\n    public static int askForEmptySelectionPanel(Component comp) {\r\n        return JOptionPane.showConfirmDialog(comp, GettextResource.gettext(Configuration.getInstance().getI18nResourceBundle(), \"Selection list is full, would you like to empty it and load the new document?\"), GettextResource.gettext(Configuration.getInstance().getI18nResourceBundle(), \"List full\"), JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE);\r\n    }\r\n\r\n    /**\r\n     * Shows a yes/no confirmation dialog to ask the user if he wants to\r\n     * continue even if the selected pdf version is lower than the lowest\r\n     * available\r\n     *\r\n     * @param comp\r\n     * @param lowestVersion\r\n     * @return\r\n     */\r\n    public static int askForPdfVersionConfilct(Component comp, String lowestVersion) {\r\n        return JOptionPane.showConfirmDialog(comp, GettextResource.gettext(Configuration.getInstance().getI18nResourceBundle(), \"The lowest available pdf version is \") + lowestVersion + \".\\n\" + GettextResource.gettext(Configuration.getInstance().getI18nResourceBundle(), \"You selected a lower output pdf version, continue anyway ?\"), GettextResource.gettext(Configuration.getInstance().getI18nResourceBundle(), \"Pdf version conflict\"), JOptionPane.YES_NO_OPTION, JOptionPane.WARNING_MESSAGE);\r\n    }\r\n}\r\n",
		"id": "EvoSuiteBenchmark/109_pdfsam/src/main/java/org/pdfsam/guiclient/utils/DialogUtilityTest5.java",
		"test_prompt": "// DialogUtilityTest5.java\npackage org.pdfsam.guiclient.utils;\n\nimport java.awt.Component;\nimport javax.swing.JOptionPane;\nimport javax.swing.JPasswordField;\nimport org.pdfsam.guiclient.configuration.Configuration;\nimport org.pdfsam.i18n.GettextResource;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link DialogUtility}.\n* It contains ten unit test cases for the {@link DialogUtility#askForPdfVersionConfilct(Component, String)} method.\n*/\nclass DialogUtilityTest5 {"
	},
	{
		"original_code": "// EncryptionUtility.java\n/*\n * Created on 18-Mar-2009\n * Copyright (C) 2006 by Andrea Vacondio.\n *\n * This program is free software; you can redistribute it and/or modify it under the terms of the \n * GNU General Public License as published by the Free Software Foundation; \n * either version 2 of the License.\n * This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; \n * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. \n * See the GNU General Public License for more details.\n * You should have received a copy of the GNU General Public License along with this program; \n * if not, write to the Free Software Foundation, Inc., \n *  59 Temple Place, Suite 330, Boston, MA 02111-1307 USA\n */\npackage org.pdfsam.guiclient.utils;\n\nimport org.pdfsam.console.business.dto.commands.EncryptParsedCommand;\n\n/**\n * Support to the encryption\n * @author Andrea Vacondio\n */\npublic class EncryptionUtility {\n\n    public final static String RC4_40 = \"RC4-40b\";\n\n    public final static String RC4_128 = \"RC4-128b\";\n\n    public final static String AES_128 = \"AES-128b\";\n\n    /**\n     * @return Console parameter for the selected encryption algorithm from the JComboBox\n     */\n    public static String getEncAlgorithm(String algorithm) {\n        String retval = EncryptParsedCommand.E_RC4_40;\n        if (algorithm != null) {\n            if (algorithm.equals(RC4_40)) {\n                retval = EncryptParsedCommand.E_RC4_40;\n            } else if (algorithm.equals(RC4_128)) {\n                retval = EncryptParsedCommand.E_RC4_128;\n            } else if (algorithm.equals(AES_128)) {\n                retval = EncryptParsedCommand.E_AES_128;\n            }\n        }\n        return retval;\n    }\n}\n",
		"id": "EvoSuiteBenchmark/109_pdfsam/src/main/java/org/pdfsam/guiclient/utils/EncryptionUtilityTest.java",
		"test_prompt": "// EncryptionUtilityTest.java\npackage org.pdfsam.guiclient.utils;\n\nimport org.pdfsam.console.business.dto.commands.EncryptParsedCommand;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link EncryptionUtility}.\n* It contains ten unit test cases for the {@link EncryptionUtility#getEncAlgorithm(String)} method.\n*/\nclass EncryptionUtilityTest {"
	},
	{
		"original_code": "// FileExtensionUtility.java\n/*\n * Created on 09-Mar-2010\n * Copyright (C) 2010 by Andrea Vacondio.\n *\n * This program is free software; you can redistribute it and/or modify it under the terms of the \n * GNU General Public License as published by the Free Software Foundation; \n * either version 2 of the License.\n * This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; \n * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. \n * See the GNU General Public License for more details.\n * You should have received a copy of the GNU General Public License along with this program; \n * if not, write to the Free Software Foundation, Inc., \n *  59 Temple Place, Suite 330, Boston, MA 02111-1307 USA\n */\npackage org.pdfsam.guiclient.utils;\n\nimport java.io.File;\nimport org.apache.commons.lang.StringUtils;\n\n/**\n * Utility class for the file extensions related tasks\n *\n * @author Andrea Vacondio\n */\npublic final class FileExtensionUtility {\n\n    public static final String PDF_EXTENSION = \"pdf\";\n\n    public static final String XML_EXTENSION = \"xml\";\n\n    public static final String TXT_EXTENSION = \"txt\";\n\n    private FileExtensionUtility() {\n        // on purpose\n    }\n\n    /**\n     * Ensures that the file path in input has the input file extension, if not\n     * it adds the extension.\n     *\n     * @param filePath\n     * @param fileExtension\n     *            the file extension without leading dot (Ex. pdf)\n     * @return the correct file path (with file extension added if necessasy)\n     */\n    public static String ensureExtension(String filePath, String fileExtension) {\n        String retVal = filePath;\n        if (StringUtils.isNotEmpty(filePath)) {\n            if (!(filePath.toLowerCase().endsWith('.' + fileExtension.toLowerCase()))) {\n                retVal = new StringBuilder(filePath).append('.').append(fileExtension).toString();\n            }\n        }\n        return retVal;\n    }\n\n    /**\n     * Ensures that the file in input has the input file extension, if not it\n     * adds the extension.\n     *\n     * @param file\n     * @param fileExtension\n     *            the file extension without leading dot (Ex. pdf)\n     * @return the correct file path (with file extension added if necessasy)\n     */\n    public static File ensureExtension(File file, String fileExtension) {\n        return new File(ensureExtension(file.getAbsolutePath(), fileExtension));\n    }\n}\n",
		"id": "EvoSuiteBenchmark/109_pdfsam/src/main/java/org/pdfsam/guiclient/utils/FileExtensionUtilityTest0.java",
		"test_prompt": "// FileExtensionUtilityTest0.java\npackage org.pdfsam.guiclient.utils;\n\nimport java.io.File;\nimport org.apache.commons.lang.StringUtils;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link FileExtensionUtility}.\n* It contains ten unit test cases for the {@link FileExtensionUtility#ensureExtension(String, String)} method.\n*/\nclass FileExtensionUtilityTest0 {"
	},
	{
		"original_code": "// FileExtensionUtility.java\n/*\n * Created on 09-Mar-2010\n * Copyright (C) 2010 by Andrea Vacondio.\n *\n * This program is free software; you can redistribute it and/or modify it under the terms of the \n * GNU General Public License as published by the Free Software Foundation; \n * either version 2 of the License.\n * This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; \n * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. \n * See the GNU General Public License for more details.\n * You should have received a copy of the GNU General Public License along with this program; \n * if not, write to the Free Software Foundation, Inc., \n *  59 Temple Place, Suite 330, Boston, MA 02111-1307 USA\n */\npackage org.pdfsam.guiclient.utils;\n\nimport java.io.File;\nimport org.apache.commons.lang.StringUtils;\n\n/**\n * Utility class for the file extensions related tasks\n *\n * @author Andrea Vacondio\n */\npublic final class FileExtensionUtility {\n\n    public static final String PDF_EXTENSION = \"pdf\";\n\n    public static final String XML_EXTENSION = \"xml\";\n\n    public static final String TXT_EXTENSION = \"txt\";\n\n    private FileExtensionUtility() {\n        // on purpose\n    }\n\n    /**\n     * Ensures that the file path in input has the input file extension, if not\n     * it adds the extension.\n     *\n     * @param filePath\n     * @param fileExtension\n     *            the file extension without leading dot (Ex. pdf)\n     * @return the correct file path (with file extension added if necessasy)\n     */\n    public static String ensureExtension(String filePath, String fileExtension) {\n        String retVal = filePath;\n        if (StringUtils.isNotEmpty(filePath)) {\n            if (!(filePath.toLowerCase().endsWith('.' + fileExtension.toLowerCase()))) {\n                retVal = new StringBuilder(filePath).append('.').append(fileExtension).toString();\n            }\n        }\n        return retVal;\n    }\n\n    /**\n     * Ensures that the file in input has the input file extension, if not it\n     * adds the extension.\n     *\n     * @param file\n     * @param fileExtension\n     *            the file extension without leading dot (Ex. pdf)\n     * @return the correct file path (with file extension added if necessasy)\n     */\n    public static File ensureExtension(File file, String fileExtension) {\n        return new File(ensureExtension(file.getAbsolutePath(), fileExtension));\n    }\n}\n",
		"id": "EvoSuiteBenchmark/109_pdfsam/src/main/java/org/pdfsam/guiclient/utils/FileExtensionUtilityTest1.java",
		"test_prompt": "// FileExtensionUtilityTest1.java\npackage org.pdfsam.guiclient.utils;\n\nimport java.io.File;\nimport org.apache.commons.lang.StringUtils;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link FileExtensionUtility}.\n* It contains ten unit test cases for the {@link FileExtensionUtility#ensureExtension(File, String)} method.\n*/\nclass FileExtensionUtilityTest1 {"
	},
	{
		"original_code": "// XmlUtility.java\n/*\n * Created on 22-Jul-2008\n * Copyright (C) 2008 by Andrea Vacondio.\n *\n * This program is free software; you can redistribute it and/or modify it under the terms of the \n * GNU General Public License as published by the Free Software Foundation; \n * either version 2 of the License.\n * This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; \n * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. \n * See the GNU General Public License for more details.\n * You should have received a copy of the GNU General Public License along with this program; \n * if not, write to the Free Software Foundation, Inc., \n *  59 Temple Place, Suite 330, Boston, MA 02111-1307 USA\n */\npackage org.pdfsam.guiclient.utils;\n\nimport java.io.BufferedOutputStream;\nimport java.io.File;\nimport java.io.FileOutputStream;\nimport java.io.IOException;\nimport java.net.URL;\nimport java.util.Collection;\nimport java.util.LinkedHashSet;\nimport java.util.List;\nimport java.util.Set;\nimport org.apache.commons.lang.StringUtils;\nimport org.apache.log4j.Logger;\nimport org.dom4j.Document;\nimport org.dom4j.DocumentException;\nimport org.dom4j.Element;\nimport org.dom4j.Node;\nimport org.dom4j.io.OutputFormat;\nimport org.dom4j.io.SAXReader;\nimport org.dom4j.io.XMLWriter;\nimport org.pdfsam.guiclient.configuration.Configuration;\nimport org.pdfsam.guiclient.dto.DocumentPage;\nimport org.pdfsam.guiclient.dto.Rotation;\nimport org.pdfsam.i18n.GettextResource;\n\n/**\n * Utility class to deal with xml\n *\n * @author Andrea Vacondio\n */\npublic final class XmlUtility {\n\n    private static final Logger LOG = Logger.getLogger(XmlUtility.class.getPackage().getName());\n\n    private XmlUtility() {\n        // no constructor\n    }\n\n    /**\n     * @param pageNode\n     * @return given a page dom4j node it returns a DocumentPage object\n     */\n    public static DocumentPage getDocumentPage(Node pageNode) {\n        DocumentPage retVal = null;\n        try {\n            if (pageNode != null) {\n                retVal = new DocumentPage();\n                Node deletedNode = (Node) pageNode.selectSingleNode(\"@deleted\");\n                if (deletedNode != null && deletedNode.getText().length() > 0) {\n                    retVal.setDeleted(Boolean.valueOf(deletedNode.getText()));\n                }\n                Node numberNode = (Node) pageNode.selectSingleNode(\"@number\");\n                if (numberNode != null && numberNode.getText().length() > 0) {\n                    retVal.setPageNumber(Integer.valueOf(numberNode.getText()));\n                }\n                Node rotationNode = (Node) pageNode.selectSingleNode(\"@rotation\");\n                if (rotationNode != null && rotationNode.getText().length() > 0) {\n                    retVal.setRotation(Rotation.getRotation(Integer.valueOf(rotationNode.getText())));\n                }\n            }\n        } catch (Exception e) {\n            LOG.warn(GettextResource.gettext(Configuration.getInstance().getI18nResourceBundle(), \"Error retrieving page saved informations\"), e);\n        }\n        return retVal;\n    }\n\n    /**\n     * Write the DOM to the xml file\n     *\n     * @param domDoc\n     *            Document to write\n     * @param outFile\n     *            xml File to write\n     * @throws IOException\n     */\n    public static void writeXmlFile(Document domDoc, File outFile) throws IOException {\n        BufferedOutputStream bos = new BufferedOutputStream(new FileOutputStream(outFile));\n        OutputFormat format = OutputFormat.createPrettyPrint();\n        format.setEncoding(\"UTF-8\");\n        XMLWriter xmlFileWriter = new XMLWriter(bos, format);\n        xmlFileWriter.write(domDoc);\n        xmlFileWriter.flush();\n        xmlFileWriter.close();\n    }\n\n    /**\n     * @param document\n     * @param xpath\n     * @return The xml tag values for the given xpath\n     * @throws Exception\n     */\n    public static String getXmlValue(Document document, String xpath) {\n        String retVal = \"\";\n        Node node = document.selectSingleNode(xpath);\n        if (node != null) {\n            retVal = node.getText().trim();\n        }\n        return retVal;\n    }\n\n    /**\n     * @param document\n     * @param xpath\n     * @return a list of values for the given xpath\n     * @throws Exception\n     */\n    public static Set<String> getXmlValues(Document document, String xpath) {\n        Set<String> retVal = new LinkedHashSet<String>();\n        for (Node node : (List<Node>) document.selectNodes(xpath)) {\n            if (StringUtils.isNotBlank(node.getText())) {\n                retVal.add(node.getText().trim());\n            }\n        }\n        return retVal;\n    }\n\n    /**\n     * Parse the xml file converting the given path\n     *\n     * @param fullPath\n     * @return parsed Document\n     * @throws DocumentException\n     */\n    public static Document parseXmlFile(String fullPath) throws DocumentException {\n        return parseXmlFile(new File(fullPath));\n    }\n\n    /**\n     * parse the xml input file\n     *\n     * @param inputFile\n     * @return parsed Document\n     * @throws DocumentException\n     */\n    public static Document parseXmlFile(File inputFile) throws DocumentException {\n        Document document = null;\n        if (inputFile.isFile()) {\n            SAXReader reader = new SAXReader();\n            document = reader.read(inputFile);\n        } else {\n            throw new DocumentException(\"Unable to read \" + inputFile + \".\");\n        }\n        return document;\n    }\n\n    /**\n     * Parse the url\n     *\n     * @return The DOM object\n     */\n    public static Document parseXmlFile(URL url) throws DocumentException {\n        Document document = null;\n        SAXReader reader = new SAXReader();\n        document = reader.read(url);\n        return document;\n    }\n\n    /**\n     * Adds the to rootElement the given xpath and, if the xpath contains an attribute, sets the attribute value.\n     *\n     * @param rootElement\n     * @param xpath\n     * @param attributeValue\n     * @return the added element\n     */\n    public static Element processXPath(Element rootElement, String xpath, String attributeValue) {\n        String[] values = xpath.split(\"@\");\n        if (values.length == 2) {\n            return addXmlNodeAndAttribute(rootElement, values[0], values[1], attributeValue);\n        }\n        return addXmlNodeAndAttribute(rootElement, values[0], null, null);\n    }\n\n    /**\n     * Adds to the rootElement the nodes specified by nodeXPath. If not null it adds the attibuteName with the give Attribute Value\n     *\n     * @param rootElement\n     * @param nodeXPath\n     * @param attributeName\n     * @param AttributeValue\n     * @return the added element\n     */\n    public static Element addXmlNodeAndAttribute(Element rootElement, String nodeXPath, String attributeName, String attributeValue) {\n        String[] nodes = nodeXPath.split(\"/\");\n        Element currentElement = rootElement;\n        for (String node : nodes) {\n            if (StringUtils.isNotBlank(node)) {\n                Element tmpElement = (Element) currentElement.selectSingleNode(node);\n                if (tmpElement != null) {\n                    currentElement = tmpElement;\n                } else {\n                    currentElement = currentElement.addElement(node);\n                }\n            }\n        }\n        if (attributeName != null && attributeValue != null) {\n            currentElement.addAttribute(attributeName, attributeValue);\n        }\n        return currentElement;\n    }\n\n    /**\n     * Adds multiple nodes to the parent element, one for each attributeValues and each of them with an attribute with the given name and value.\n     * @param parentElement\n     * @param nodeName\n     * @param attributeName\n     * @param attributeValues\n     */\n    public static void addXmlNodesAndAttribute(Element parentElement, String nodeName, String attributeName, Collection<String> attributeValues) {\n        for (String attributeValue : attributeValues) {\n            if (StringUtils.isNotBlank(attributeValue)) {\n                Element currentElement = parentElement.addElement(nodeName);\n                currentElement.addAttribute(attributeName, attributeValue);\n            }\n        }\n    }\n}\n",
		"id": "EvoSuiteBenchmark/109_pdfsam/src/main/java/org/pdfsam/guiclient/utils/XmlUtilityTest0.java",
		"test_prompt": "// XmlUtilityTest0.java\npackage org.pdfsam.guiclient.utils;\n\nimport java.io.BufferedOutputStream;\nimport java.io.File;\nimport java.io.FileOutputStream;\nimport java.io.IOException;\nimport java.net.URL;\nimport java.util.Collection;\nimport java.util.LinkedHashSet;\nimport java.util.List;\nimport java.util.Set;\nimport org.apache.commons.lang.StringUtils;\nimport org.apache.log4j.Logger;\nimport org.dom4j.Document;\nimport org.dom4j.DocumentException;\nimport org.dom4j.Element;\nimport org.dom4j.Node;\nimport org.dom4j.io.OutputFormat;\nimport org.dom4j.io.SAXReader;\nimport org.dom4j.io.XMLWriter;\nimport org.pdfsam.guiclient.configuration.Configuration;\nimport org.pdfsam.guiclient.dto.DocumentPage;\nimport org.pdfsam.guiclient.dto.Rotation;\nimport org.pdfsam.i18n.GettextResource;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link XmlUtility}.\n* It contains ten unit test cases for the {@link XmlUtility#getDocumentPage(Node)} method.\n*/\nclass XmlUtilityTest0 {"
	},
	{
		"original_code": "// XmlUtility.java\n/*\n * Created on 22-Jul-2008\n * Copyright (C) 2008 by Andrea Vacondio.\n *\n * This program is free software; you can redistribute it and/or modify it under the terms of the \n * GNU General Public License as published by the Free Software Foundation; \n * either version 2 of the License.\n * This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; \n * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. \n * See the GNU General Public License for more details.\n * You should have received a copy of the GNU General Public License along with this program; \n * if not, write to the Free Software Foundation, Inc., \n *  59 Temple Place, Suite 330, Boston, MA 02111-1307 USA\n */\npackage org.pdfsam.guiclient.utils;\n\nimport java.io.BufferedOutputStream;\nimport java.io.File;\nimport java.io.FileOutputStream;\nimport java.io.IOException;\nimport java.net.URL;\nimport java.util.Collection;\nimport java.util.LinkedHashSet;\nimport java.util.List;\nimport java.util.Set;\nimport org.apache.commons.lang.StringUtils;\nimport org.apache.log4j.Logger;\nimport org.dom4j.Document;\nimport org.dom4j.DocumentException;\nimport org.dom4j.Element;\nimport org.dom4j.Node;\nimport org.dom4j.io.OutputFormat;\nimport org.dom4j.io.SAXReader;\nimport org.dom4j.io.XMLWriter;\nimport org.pdfsam.guiclient.configuration.Configuration;\nimport org.pdfsam.guiclient.dto.DocumentPage;\nimport org.pdfsam.guiclient.dto.Rotation;\nimport org.pdfsam.i18n.GettextResource;\n\n/**\n * Utility class to deal with xml\n *\n * @author Andrea Vacondio\n */\npublic final class XmlUtility {\n\n    private static final Logger LOG = Logger.getLogger(XmlUtility.class.getPackage().getName());\n\n    private XmlUtility() {\n        // no constructor\n    }\n\n    /**\n     * @param pageNode\n     * @return given a page dom4j node it returns a DocumentPage object\n     */\n    public static DocumentPage getDocumentPage(Node pageNode) {\n        DocumentPage retVal = null;\n        try {\n            if (pageNode != null) {\n                retVal = new DocumentPage();\n                Node deletedNode = (Node) pageNode.selectSingleNode(\"@deleted\");\n                if (deletedNode != null && deletedNode.getText().length() > 0) {\n                    retVal.setDeleted(Boolean.valueOf(deletedNode.getText()));\n                }\n                Node numberNode = (Node) pageNode.selectSingleNode(\"@number\");\n                if (numberNode != null && numberNode.getText().length() > 0) {\n                    retVal.setPageNumber(Integer.valueOf(numberNode.getText()));\n                }\n                Node rotationNode = (Node) pageNode.selectSingleNode(\"@rotation\");\n                if (rotationNode != null && rotationNode.getText().length() > 0) {\n                    retVal.setRotation(Rotation.getRotation(Integer.valueOf(rotationNode.getText())));\n                }\n            }\n        } catch (Exception e) {\n            LOG.warn(GettextResource.gettext(Configuration.getInstance().getI18nResourceBundle(), \"Error retrieving page saved informations\"), e);\n        }\n        return retVal;\n    }\n\n    /**\n     * Write the DOM to the xml file\n     *\n     * @param domDoc\n     *            Document to write\n     * @param outFile\n     *            xml File to write\n     * @throws IOException\n     */\n    public static void writeXmlFile(Document domDoc, File outFile) throws IOException {\n        BufferedOutputStream bos = new BufferedOutputStream(new FileOutputStream(outFile));\n        OutputFormat format = OutputFormat.createPrettyPrint();\n        format.setEncoding(\"UTF-8\");\n        XMLWriter xmlFileWriter = new XMLWriter(bos, format);\n        xmlFileWriter.write(domDoc);\n        xmlFileWriter.flush();\n        xmlFileWriter.close();\n    }\n\n    /**\n     * @param document\n     * @param xpath\n     * @return The xml tag values for the given xpath\n     * @throws Exception\n     */\n    public static String getXmlValue(Document document, String xpath) {\n        String retVal = \"\";\n        Node node = document.selectSingleNode(xpath);\n        if (node != null) {\n            retVal = node.getText().trim();\n        }\n        return retVal;\n    }\n\n    /**\n     * @param document\n     * @param xpath\n     * @return a list of values for the given xpath\n     * @throws Exception\n     */\n    public static Set<String> getXmlValues(Document document, String xpath) {\n        Set<String> retVal = new LinkedHashSet<String>();\n        for (Node node : (List<Node>) document.selectNodes(xpath)) {\n            if (StringUtils.isNotBlank(node.getText())) {\n                retVal.add(node.getText().trim());\n            }\n        }\n        return retVal;\n    }\n\n    /**\n     * Parse the xml file converting the given path\n     *\n     * @param fullPath\n     * @return parsed Document\n     * @throws DocumentException\n     */\n    public static Document parseXmlFile(String fullPath) throws DocumentException {\n        return parseXmlFile(new File(fullPath));\n    }\n\n    /**\n     * parse the xml input file\n     *\n     * @param inputFile\n     * @return parsed Document\n     * @throws DocumentException\n     */\n    public static Document parseXmlFile(File inputFile) throws DocumentException {\n        Document document = null;\n        if (inputFile.isFile()) {\n            SAXReader reader = new SAXReader();\n            document = reader.read(inputFile);\n        } else {\n            throw new DocumentException(\"Unable to read \" + inputFile + \".\");\n        }\n        return document;\n    }\n\n    /**\n     * Parse the url\n     *\n     * @return The DOM object\n     */\n    public static Document parseXmlFile(URL url) throws DocumentException {\n        Document document = null;\n        SAXReader reader = new SAXReader();\n        document = reader.read(url);\n        return document;\n    }\n\n    /**\n     * Adds the to rootElement the given xpath and, if the xpath contains an attribute, sets the attribute value.\n     *\n     * @param rootElement\n     * @param xpath\n     * @param attributeValue\n     * @return the added element\n     */\n    public static Element processXPath(Element rootElement, String xpath, String attributeValue) {\n        String[] values = xpath.split(\"@\");\n        if (values.length == 2) {\n            return addXmlNodeAndAttribute(rootElement, values[0], values[1], attributeValue);\n        }\n        return addXmlNodeAndAttribute(rootElement, values[0], null, null);\n    }\n\n    /**\n     * Adds to the rootElement the nodes specified by nodeXPath. If not null it adds the attibuteName with the give Attribute Value\n     *\n     * @param rootElement\n     * @param nodeXPath\n     * @param attributeName\n     * @param AttributeValue\n     * @return the added element\n     */\n    public static Element addXmlNodeAndAttribute(Element rootElement, String nodeXPath, String attributeName, String attributeValue) {\n        String[] nodes = nodeXPath.split(\"/\");\n        Element currentElement = rootElement;\n        for (String node : nodes) {\n            if (StringUtils.isNotBlank(node)) {\n                Element tmpElement = (Element) currentElement.selectSingleNode(node);\n                if (tmpElement != null) {\n                    currentElement = tmpElement;\n                } else {\n                    currentElement = currentElement.addElement(node);\n                }\n            }\n        }\n        if (attributeName != null && attributeValue != null) {\n            currentElement.addAttribute(attributeName, attributeValue);\n        }\n        return currentElement;\n    }\n\n    /**\n     * Adds multiple nodes to the parent element, one for each attributeValues and each of them with an attribute with the given name and value.\n     * @param parentElement\n     * @param nodeName\n     * @param attributeName\n     * @param attributeValues\n     */\n    public static void addXmlNodesAndAttribute(Element parentElement, String nodeName, String attributeName, Collection<String> attributeValues) {\n        for (String attributeValue : attributeValues) {\n            if (StringUtils.isNotBlank(attributeValue)) {\n                Element currentElement = parentElement.addElement(nodeName);\n                currentElement.addAttribute(attributeName, attributeValue);\n            }\n        }\n    }\n}\n",
		"id": "EvoSuiteBenchmark/109_pdfsam/src/main/java/org/pdfsam/guiclient/utils/XmlUtilityTest1.java",
		"test_prompt": "// XmlUtilityTest1.java\npackage org.pdfsam.guiclient.utils;\n\nimport java.io.BufferedOutputStream;\nimport java.io.File;\nimport java.io.FileOutputStream;\nimport java.io.IOException;\nimport java.net.URL;\nimport java.util.Collection;\nimport java.util.LinkedHashSet;\nimport java.util.List;\nimport java.util.Set;\nimport org.apache.commons.lang.StringUtils;\nimport org.apache.log4j.Logger;\nimport org.dom4j.Document;\nimport org.dom4j.DocumentException;\nimport org.dom4j.Element;\nimport org.dom4j.Node;\nimport org.dom4j.io.OutputFormat;\nimport org.dom4j.io.SAXReader;\nimport org.dom4j.io.XMLWriter;\nimport org.pdfsam.guiclient.configuration.Configuration;\nimport org.pdfsam.guiclient.dto.DocumentPage;\nimport org.pdfsam.guiclient.dto.Rotation;\nimport org.pdfsam.i18n.GettextResource;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link XmlUtility}.\n* It contains ten unit test cases for the {@link XmlUtility#getXmlValue(Document, String)} method.\n*/\nclass XmlUtilityTest1 {"
	},
	{
		"original_code": "// XmlUtility.java\n/*\n * Created on 22-Jul-2008\n * Copyright (C) 2008 by Andrea Vacondio.\n *\n * This program is free software; you can redistribute it and/or modify it under the terms of the \n * GNU General Public License as published by the Free Software Foundation; \n * either version 2 of the License.\n * This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; \n * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. \n * See the GNU General Public License for more details.\n * You should have received a copy of the GNU General Public License along with this program; \n * if not, write to the Free Software Foundation, Inc., \n *  59 Temple Place, Suite 330, Boston, MA 02111-1307 USA\n */\npackage org.pdfsam.guiclient.utils;\n\nimport java.io.BufferedOutputStream;\nimport java.io.File;\nimport java.io.FileOutputStream;\nimport java.io.IOException;\nimport java.net.URL;\nimport java.util.Collection;\nimport java.util.LinkedHashSet;\nimport java.util.List;\nimport java.util.Set;\nimport org.apache.commons.lang.StringUtils;\nimport org.apache.log4j.Logger;\nimport org.dom4j.Document;\nimport org.dom4j.DocumentException;\nimport org.dom4j.Element;\nimport org.dom4j.Node;\nimport org.dom4j.io.OutputFormat;\nimport org.dom4j.io.SAXReader;\nimport org.dom4j.io.XMLWriter;\nimport org.pdfsam.guiclient.configuration.Configuration;\nimport org.pdfsam.guiclient.dto.DocumentPage;\nimport org.pdfsam.guiclient.dto.Rotation;\nimport org.pdfsam.i18n.GettextResource;\n\n/**\n * Utility class to deal with xml\n *\n * @author Andrea Vacondio\n */\npublic final class XmlUtility {\n\n    private static final Logger LOG = Logger.getLogger(XmlUtility.class.getPackage().getName());\n\n    private XmlUtility() {\n        // no constructor\n    }\n\n    /**\n     * @param pageNode\n     * @return given a page dom4j node it returns a DocumentPage object\n     */\n    public static DocumentPage getDocumentPage(Node pageNode) {\n        DocumentPage retVal = null;\n        try {\n            if (pageNode != null) {\n                retVal = new DocumentPage();\n                Node deletedNode = (Node) pageNode.selectSingleNode(\"@deleted\");\n                if (deletedNode != null && deletedNode.getText().length() > 0) {\n                    retVal.setDeleted(Boolean.valueOf(deletedNode.getText()));\n                }\n                Node numberNode = (Node) pageNode.selectSingleNode(\"@number\");\n                if (numberNode != null && numberNode.getText().length() > 0) {\n                    retVal.setPageNumber(Integer.valueOf(numberNode.getText()));\n                }\n                Node rotationNode = (Node) pageNode.selectSingleNode(\"@rotation\");\n                if (rotationNode != null && rotationNode.getText().length() > 0) {\n                    retVal.setRotation(Rotation.getRotation(Integer.valueOf(rotationNode.getText())));\n                }\n            }\n        } catch (Exception e) {\n            LOG.warn(GettextResource.gettext(Configuration.getInstance().getI18nResourceBundle(), \"Error retrieving page saved informations\"), e);\n        }\n        return retVal;\n    }\n\n    /**\n     * Write the DOM to the xml file\n     *\n     * @param domDoc\n     *            Document to write\n     * @param outFile\n     *            xml File to write\n     * @throws IOException\n     */\n    public static void writeXmlFile(Document domDoc, File outFile) throws IOException {\n        BufferedOutputStream bos = new BufferedOutputStream(new FileOutputStream(outFile));\n        OutputFormat format = OutputFormat.createPrettyPrint();\n        format.setEncoding(\"UTF-8\");\n        XMLWriter xmlFileWriter = new XMLWriter(bos, format);\n        xmlFileWriter.write(domDoc);\n        xmlFileWriter.flush();\n        xmlFileWriter.close();\n    }\n\n    /**\n     * @param document\n     * @param xpath\n     * @return The xml tag values for the given xpath\n     * @throws Exception\n     */\n    public static String getXmlValue(Document document, String xpath) {\n        String retVal = \"\";\n        Node node = document.selectSingleNode(xpath);\n        if (node != null) {\n            retVal = node.getText().trim();\n        }\n        return retVal;\n    }\n\n    /**\n     * @param document\n     * @param xpath\n     * @return a list of values for the given xpath\n     * @throws Exception\n     */\n    public static Set<String> getXmlValues(Document document, String xpath) {\n        Set<String> retVal = new LinkedHashSet<String>();\n        for (Node node : (List<Node>) document.selectNodes(xpath)) {\n            if (StringUtils.isNotBlank(node.getText())) {\n                retVal.add(node.getText().trim());\n            }\n        }\n        return retVal;\n    }\n\n    /**\n     * Parse the xml file converting the given path\n     *\n     * @param fullPath\n     * @return parsed Document\n     * @throws DocumentException\n     */\n    public static Document parseXmlFile(String fullPath) throws DocumentException {\n        return parseXmlFile(new File(fullPath));\n    }\n\n    /**\n     * parse the xml input file\n     *\n     * @param inputFile\n     * @return parsed Document\n     * @throws DocumentException\n     */\n    public static Document parseXmlFile(File inputFile) throws DocumentException {\n        Document document = null;\n        if (inputFile.isFile()) {\n            SAXReader reader = new SAXReader();\n            document = reader.read(inputFile);\n        } else {\n            throw new DocumentException(\"Unable to read \" + inputFile + \".\");\n        }\n        return document;\n    }\n\n    /**\n     * Parse the url\n     *\n     * @return The DOM object\n     */\n    public static Document parseXmlFile(URL url) throws DocumentException {\n        Document document = null;\n        SAXReader reader = new SAXReader();\n        document = reader.read(url);\n        return document;\n    }\n\n    /**\n     * Adds the to rootElement the given xpath and, if the xpath contains an attribute, sets the attribute value.\n     *\n     * @param rootElement\n     * @param xpath\n     * @param attributeValue\n     * @return the added element\n     */\n    public static Element processXPath(Element rootElement, String xpath, String attributeValue) {\n        String[] values = xpath.split(\"@\");\n        if (values.length == 2) {\n            return addXmlNodeAndAttribute(rootElement, values[0], values[1], attributeValue);\n        }\n        return addXmlNodeAndAttribute(rootElement, values[0], null, null);\n    }\n\n    /**\n     * Adds to the rootElement the nodes specified by nodeXPath. If not null it adds the attibuteName with the give Attribute Value\n     *\n     * @param rootElement\n     * @param nodeXPath\n     * @param attributeName\n     * @param AttributeValue\n     * @return the added element\n     */\n    public static Element addXmlNodeAndAttribute(Element rootElement, String nodeXPath, String attributeName, String attributeValue) {\n        String[] nodes = nodeXPath.split(\"/\");\n        Element currentElement = rootElement;\n        for (String node : nodes) {\n            if (StringUtils.isNotBlank(node)) {\n                Element tmpElement = (Element) currentElement.selectSingleNode(node);\n                if (tmpElement != null) {\n                    currentElement = tmpElement;\n                } else {\n                    currentElement = currentElement.addElement(node);\n                }\n            }\n        }\n        if (attributeName != null && attributeValue != null) {\n            currentElement.addAttribute(attributeName, attributeValue);\n        }\n        return currentElement;\n    }\n\n    /**\n     * Adds multiple nodes to the parent element, one for each attributeValues and each of them with an attribute with the given name and value.\n     * @param parentElement\n     * @param nodeName\n     * @param attributeName\n     * @param attributeValues\n     */\n    public static void addXmlNodesAndAttribute(Element parentElement, String nodeName, String attributeName, Collection<String> attributeValues) {\n        for (String attributeValue : attributeValues) {\n            if (StringUtils.isNotBlank(attributeValue)) {\n                Element currentElement = parentElement.addElement(nodeName);\n                currentElement.addAttribute(attributeName, attributeValue);\n            }\n        }\n    }\n}\n",
		"id": "EvoSuiteBenchmark/109_pdfsam/src/main/java/org/pdfsam/guiclient/utils/XmlUtilityTest2.java",
		"test_prompt": "// XmlUtilityTest2.java\npackage org.pdfsam.guiclient.utils;\n\nimport java.io.BufferedOutputStream;\nimport java.io.File;\nimport java.io.FileOutputStream;\nimport java.io.IOException;\nimport java.net.URL;\nimport java.util.Collection;\nimport java.util.LinkedHashSet;\nimport java.util.List;\nimport java.util.Set;\nimport org.apache.commons.lang.StringUtils;\nimport org.apache.log4j.Logger;\nimport org.dom4j.Document;\nimport org.dom4j.DocumentException;\nimport org.dom4j.Element;\nimport org.dom4j.Node;\nimport org.dom4j.io.OutputFormat;\nimport org.dom4j.io.SAXReader;\nimport org.dom4j.io.XMLWriter;\nimport org.pdfsam.guiclient.configuration.Configuration;\nimport org.pdfsam.guiclient.dto.DocumentPage;\nimport org.pdfsam.guiclient.dto.Rotation;\nimport org.pdfsam.i18n.GettextResource;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link XmlUtility}.\n* It contains ten unit test cases for the {@link XmlUtility#getXmlValues(Document, String)} method.\n*/\nclass XmlUtilityTest2 {"
	},
	{
		"original_code": "// XmlUtility.java\n/*\n * Created on 22-Jul-2008\n * Copyright (C) 2008 by Andrea Vacondio.\n *\n * This program is free software; you can redistribute it and/or modify it under the terms of the \n * GNU General Public License as published by the Free Software Foundation; \n * either version 2 of the License.\n * This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; \n * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. \n * See the GNU General Public License for more details.\n * You should have received a copy of the GNU General Public License along with this program; \n * if not, write to the Free Software Foundation, Inc., \n *  59 Temple Place, Suite 330, Boston, MA 02111-1307 USA\n */\npackage org.pdfsam.guiclient.utils;\n\nimport java.io.BufferedOutputStream;\nimport java.io.File;\nimport java.io.FileOutputStream;\nimport java.io.IOException;\nimport java.net.URL;\nimport java.util.Collection;\nimport java.util.LinkedHashSet;\nimport java.util.List;\nimport java.util.Set;\nimport org.apache.commons.lang.StringUtils;\nimport org.apache.log4j.Logger;\nimport org.dom4j.Document;\nimport org.dom4j.DocumentException;\nimport org.dom4j.Element;\nimport org.dom4j.Node;\nimport org.dom4j.io.OutputFormat;\nimport org.dom4j.io.SAXReader;\nimport org.dom4j.io.XMLWriter;\nimport org.pdfsam.guiclient.configuration.Configuration;\nimport org.pdfsam.guiclient.dto.DocumentPage;\nimport org.pdfsam.guiclient.dto.Rotation;\nimport org.pdfsam.i18n.GettextResource;\n\n/**\n * Utility class to deal with xml\n *\n * @author Andrea Vacondio\n */\npublic final class XmlUtility {\n\n    private static final Logger LOG = Logger.getLogger(XmlUtility.class.getPackage().getName());\n\n    private XmlUtility() {\n        // no constructor\n    }\n\n    /**\n     * @param pageNode\n     * @return given a page dom4j node it returns a DocumentPage object\n     */\n    public static DocumentPage getDocumentPage(Node pageNode) {\n        DocumentPage retVal = null;\n        try {\n            if (pageNode != null) {\n                retVal = new DocumentPage();\n                Node deletedNode = (Node) pageNode.selectSingleNode(\"@deleted\");\n                if (deletedNode != null && deletedNode.getText().length() > 0) {\n                    retVal.setDeleted(Boolean.valueOf(deletedNode.getText()));\n                }\n                Node numberNode = (Node) pageNode.selectSingleNode(\"@number\");\n                if (numberNode != null && numberNode.getText().length() > 0) {\n                    retVal.setPageNumber(Integer.valueOf(numberNode.getText()));\n                }\n                Node rotationNode = (Node) pageNode.selectSingleNode(\"@rotation\");\n                if (rotationNode != null && rotationNode.getText().length() > 0) {\n                    retVal.setRotation(Rotation.getRotation(Integer.valueOf(rotationNode.getText())));\n                }\n            }\n        } catch (Exception e) {\n            LOG.warn(GettextResource.gettext(Configuration.getInstance().getI18nResourceBundle(), \"Error retrieving page saved informations\"), e);\n        }\n        return retVal;\n    }\n\n    /**\n     * Write the DOM to the xml file\n     *\n     * @param domDoc\n     *            Document to write\n     * @param outFile\n     *            xml File to write\n     * @throws IOException\n     */\n    public static void writeXmlFile(Document domDoc, File outFile) throws IOException {\n        BufferedOutputStream bos = new BufferedOutputStream(new FileOutputStream(outFile));\n        OutputFormat format = OutputFormat.createPrettyPrint();\n        format.setEncoding(\"UTF-8\");\n        XMLWriter xmlFileWriter = new XMLWriter(bos, format);\n        xmlFileWriter.write(domDoc);\n        xmlFileWriter.flush();\n        xmlFileWriter.close();\n    }\n\n    /**\n     * @param document\n     * @param xpath\n     * @return The xml tag values for the given xpath\n     * @throws Exception\n     */\n    public static String getXmlValue(Document document, String xpath) {\n        String retVal = \"\";\n        Node node = document.selectSingleNode(xpath);\n        if (node != null) {\n            retVal = node.getText().trim();\n        }\n        return retVal;\n    }\n\n    /**\n     * @param document\n     * @param xpath\n     * @return a list of values for the given xpath\n     * @throws Exception\n     */\n    public static Set<String> getXmlValues(Document document, String xpath) {\n        Set<String> retVal = new LinkedHashSet<String>();\n        for (Node node : (List<Node>) document.selectNodes(xpath)) {\n            if (StringUtils.isNotBlank(node.getText())) {\n                retVal.add(node.getText().trim());\n            }\n        }\n        return retVal;\n    }\n\n    /**\n     * Parse the xml file converting the given path\n     *\n     * @param fullPath\n     * @return parsed Document\n     * @throws DocumentException\n     */\n    public static Document parseXmlFile(String fullPath) throws DocumentException {\n        return parseXmlFile(new File(fullPath));\n    }\n\n    /**\n     * parse the xml input file\n     *\n     * @param inputFile\n     * @return parsed Document\n     * @throws DocumentException\n     */\n    public static Document parseXmlFile(File inputFile) throws DocumentException {\n        Document document = null;\n        if (inputFile.isFile()) {\n            SAXReader reader = new SAXReader();\n            document = reader.read(inputFile);\n        } else {\n            throw new DocumentException(\"Unable to read \" + inputFile + \".\");\n        }\n        return document;\n    }\n\n    /**\n     * Parse the url\n     *\n     * @return The DOM object\n     */\n    public static Document parseXmlFile(URL url) throws DocumentException {\n        Document document = null;\n        SAXReader reader = new SAXReader();\n        document = reader.read(url);\n        return document;\n    }\n\n    /**\n     * Adds the to rootElement the given xpath and, if the xpath contains an attribute, sets the attribute value.\n     *\n     * @param rootElement\n     * @param xpath\n     * @param attributeValue\n     * @return the added element\n     */\n    public static Element processXPath(Element rootElement, String xpath, String attributeValue) {\n        String[] values = xpath.split(\"@\");\n        if (values.length == 2) {\n            return addXmlNodeAndAttribute(rootElement, values[0], values[1], attributeValue);\n        }\n        return addXmlNodeAndAttribute(rootElement, values[0], null, null);\n    }\n\n    /**\n     * Adds to the rootElement the nodes specified by nodeXPath. If not null it adds the attibuteName with the give Attribute Value\n     *\n     * @param rootElement\n     * @param nodeXPath\n     * @param attributeName\n     * @param AttributeValue\n     * @return the added element\n     */\n    public static Element addXmlNodeAndAttribute(Element rootElement, String nodeXPath, String attributeName, String attributeValue) {\n        String[] nodes = nodeXPath.split(\"/\");\n        Element currentElement = rootElement;\n        for (String node : nodes) {\n            if (StringUtils.isNotBlank(node)) {\n                Element tmpElement = (Element) currentElement.selectSingleNode(node);\n                if (tmpElement != null) {\n                    currentElement = tmpElement;\n                } else {\n                    currentElement = currentElement.addElement(node);\n                }\n            }\n        }\n        if (attributeName != null && attributeValue != null) {\n            currentElement.addAttribute(attributeName, attributeValue);\n        }\n        return currentElement;\n    }\n\n    /**\n     * Adds multiple nodes to the parent element, one for each attributeValues and each of them with an attribute with the given name and value.\n     * @param parentElement\n     * @param nodeName\n     * @param attributeName\n     * @param attributeValues\n     */\n    public static void addXmlNodesAndAttribute(Element parentElement, String nodeName, String attributeName, Collection<String> attributeValues) {\n        for (String attributeValue : attributeValues) {\n            if (StringUtils.isNotBlank(attributeValue)) {\n                Element currentElement = parentElement.addElement(nodeName);\n                currentElement.addAttribute(attributeName, attributeValue);\n            }\n        }\n    }\n}\n",
		"id": "EvoSuiteBenchmark/109_pdfsam/src/main/java/org/pdfsam/guiclient/utils/XmlUtilityTest3.java",
		"test_prompt": "// XmlUtilityTest3.java\npackage org.pdfsam.guiclient.utils;\n\nimport java.io.BufferedOutputStream;\nimport java.io.File;\nimport java.io.FileOutputStream;\nimport java.io.IOException;\nimport java.net.URL;\nimport java.util.Collection;\nimport java.util.LinkedHashSet;\nimport java.util.List;\nimport java.util.Set;\nimport org.apache.commons.lang.StringUtils;\nimport org.apache.log4j.Logger;\nimport org.dom4j.Document;\nimport org.dom4j.DocumentException;\nimport org.dom4j.Element;\nimport org.dom4j.Node;\nimport org.dom4j.io.OutputFormat;\nimport org.dom4j.io.SAXReader;\nimport org.dom4j.io.XMLWriter;\nimport org.pdfsam.guiclient.configuration.Configuration;\nimport org.pdfsam.guiclient.dto.DocumentPage;\nimport org.pdfsam.guiclient.dto.Rotation;\nimport org.pdfsam.i18n.GettextResource;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link XmlUtility}.\n* It contains ten unit test cases for the {@link XmlUtility#parseXmlFile(String)} method.\n*/\nclass XmlUtilityTest3 {"
	},
	{
		"original_code": "// XmlUtility.java\n/*\n * Created on 22-Jul-2008\n * Copyright (C) 2008 by Andrea Vacondio.\n *\n * This program is free software; you can redistribute it and/or modify it under the terms of the \n * GNU General Public License as published by the Free Software Foundation; \n * either version 2 of the License.\n * This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; \n * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. \n * See the GNU General Public License for more details.\n * You should have received a copy of the GNU General Public License along with this program; \n * if not, write to the Free Software Foundation, Inc., \n *  59 Temple Place, Suite 330, Boston, MA 02111-1307 USA\n */\npackage org.pdfsam.guiclient.utils;\n\nimport java.io.BufferedOutputStream;\nimport java.io.File;\nimport java.io.FileOutputStream;\nimport java.io.IOException;\nimport java.net.URL;\nimport java.util.Collection;\nimport java.util.LinkedHashSet;\nimport java.util.List;\nimport java.util.Set;\nimport org.apache.commons.lang.StringUtils;\nimport org.apache.log4j.Logger;\nimport org.dom4j.Document;\nimport org.dom4j.DocumentException;\nimport org.dom4j.Element;\nimport org.dom4j.Node;\nimport org.dom4j.io.OutputFormat;\nimport org.dom4j.io.SAXReader;\nimport org.dom4j.io.XMLWriter;\nimport org.pdfsam.guiclient.configuration.Configuration;\nimport org.pdfsam.guiclient.dto.DocumentPage;\nimport org.pdfsam.guiclient.dto.Rotation;\nimport org.pdfsam.i18n.GettextResource;\n\n/**\n * Utility class to deal with xml\n *\n * @author Andrea Vacondio\n */\npublic final class XmlUtility {\n\n    private static final Logger LOG = Logger.getLogger(XmlUtility.class.getPackage().getName());\n\n    private XmlUtility() {\n        // no constructor\n    }\n\n    /**\n     * @param pageNode\n     * @return given a page dom4j node it returns a DocumentPage object\n     */\n    public static DocumentPage getDocumentPage(Node pageNode) {\n        DocumentPage retVal = null;\n        try {\n            if (pageNode != null) {\n                retVal = new DocumentPage();\n                Node deletedNode = (Node) pageNode.selectSingleNode(\"@deleted\");\n                if (deletedNode != null && deletedNode.getText().length() > 0) {\n                    retVal.setDeleted(Boolean.valueOf(deletedNode.getText()));\n                }\n                Node numberNode = (Node) pageNode.selectSingleNode(\"@number\");\n                if (numberNode != null && numberNode.getText().length() > 0) {\n                    retVal.setPageNumber(Integer.valueOf(numberNode.getText()));\n                }\n                Node rotationNode = (Node) pageNode.selectSingleNode(\"@rotation\");\n                if (rotationNode != null && rotationNode.getText().length() > 0) {\n                    retVal.setRotation(Rotation.getRotation(Integer.valueOf(rotationNode.getText())));\n                }\n            }\n        } catch (Exception e) {\n            LOG.warn(GettextResource.gettext(Configuration.getInstance().getI18nResourceBundle(), \"Error retrieving page saved informations\"), e);\n        }\n        return retVal;\n    }\n\n    /**\n     * Write the DOM to the xml file\n     *\n     * @param domDoc\n     *            Document to write\n     * @param outFile\n     *            xml File to write\n     * @throws IOException\n     */\n    public static void writeXmlFile(Document domDoc, File outFile) throws IOException {\n        BufferedOutputStream bos = new BufferedOutputStream(new FileOutputStream(outFile));\n        OutputFormat format = OutputFormat.createPrettyPrint();\n        format.setEncoding(\"UTF-8\");\n        XMLWriter xmlFileWriter = new XMLWriter(bos, format);\n        xmlFileWriter.write(domDoc);\n        xmlFileWriter.flush();\n        xmlFileWriter.close();\n    }\n\n    /**\n     * @param document\n     * @param xpath\n     * @return The xml tag values for the given xpath\n     * @throws Exception\n     */\n    public static String getXmlValue(Document document, String xpath) {\n        String retVal = \"\";\n        Node node = document.selectSingleNode(xpath);\n        if (node != null) {\n            retVal = node.getText().trim();\n        }\n        return retVal;\n    }\n\n    /**\n     * @param document\n     * @param xpath\n     * @return a list of values for the given xpath\n     * @throws Exception\n     */\n    public static Set<String> getXmlValues(Document document, String xpath) {\n        Set<String> retVal = new LinkedHashSet<String>();\n        for (Node node : (List<Node>) document.selectNodes(xpath)) {\n            if (StringUtils.isNotBlank(node.getText())) {\n                retVal.add(node.getText().trim());\n            }\n        }\n        return retVal;\n    }\n\n    /**\n     * Parse the xml file converting the given path\n     *\n     * @param fullPath\n     * @return parsed Document\n     * @throws DocumentException\n     */\n    public static Document parseXmlFile(String fullPath) throws DocumentException {\n        return parseXmlFile(new File(fullPath));\n    }\n\n    /**\n     * parse the xml input file\n     *\n     * @param inputFile\n     * @return parsed Document\n     * @throws DocumentException\n     */\n    public static Document parseXmlFile(File inputFile) throws DocumentException {\n        Document document = null;\n        if (inputFile.isFile()) {\n            SAXReader reader = new SAXReader();\n            document = reader.read(inputFile);\n        } else {\n            throw new DocumentException(\"Unable to read \" + inputFile + \".\");\n        }\n        return document;\n    }\n\n    /**\n     * Parse the url\n     *\n     * @return The DOM object\n     */\n    public static Document parseXmlFile(URL url) throws DocumentException {\n        Document document = null;\n        SAXReader reader = new SAXReader();\n        document = reader.read(url);\n        return document;\n    }\n\n    /**\n     * Adds the to rootElement the given xpath and, if the xpath contains an attribute, sets the attribute value.\n     *\n     * @param rootElement\n     * @param xpath\n     * @param attributeValue\n     * @return the added element\n     */\n    public static Element processXPath(Element rootElement, String xpath, String attributeValue) {\n        String[] values = xpath.split(\"@\");\n        if (values.length == 2) {\n            return addXmlNodeAndAttribute(rootElement, values[0], values[1], attributeValue);\n        }\n        return addXmlNodeAndAttribute(rootElement, values[0], null, null);\n    }\n\n    /**\n     * Adds to the rootElement the nodes specified by nodeXPath. If not null it adds the attibuteName with the give Attribute Value\n     *\n     * @param rootElement\n     * @param nodeXPath\n     * @param attributeName\n     * @param AttributeValue\n     * @return the added element\n     */\n    public static Element addXmlNodeAndAttribute(Element rootElement, String nodeXPath, String attributeName, String attributeValue) {\n        String[] nodes = nodeXPath.split(\"/\");\n        Element currentElement = rootElement;\n        for (String node : nodes) {\n            if (StringUtils.isNotBlank(node)) {\n                Element tmpElement = (Element) currentElement.selectSingleNode(node);\n                if (tmpElement != null) {\n                    currentElement = tmpElement;\n                } else {\n                    currentElement = currentElement.addElement(node);\n                }\n            }\n        }\n        if (attributeName != null && attributeValue != null) {\n            currentElement.addAttribute(attributeName, attributeValue);\n        }\n        return currentElement;\n    }\n\n    /**\n     * Adds multiple nodes to the parent element, one for each attributeValues and each of them with an attribute with the given name and value.\n     * @param parentElement\n     * @param nodeName\n     * @param attributeName\n     * @param attributeValues\n     */\n    public static void addXmlNodesAndAttribute(Element parentElement, String nodeName, String attributeName, Collection<String> attributeValues) {\n        for (String attributeValue : attributeValues) {\n            if (StringUtils.isNotBlank(attributeValue)) {\n                Element currentElement = parentElement.addElement(nodeName);\n                currentElement.addAttribute(attributeName, attributeValue);\n            }\n        }\n    }\n}\n",
		"id": "EvoSuiteBenchmark/109_pdfsam/src/main/java/org/pdfsam/guiclient/utils/XmlUtilityTest4.java",
		"test_prompt": "// XmlUtilityTest4.java\npackage org.pdfsam.guiclient.utils;\n\nimport java.io.BufferedOutputStream;\nimport java.io.File;\nimport java.io.FileOutputStream;\nimport java.io.IOException;\nimport java.net.URL;\nimport java.util.Collection;\nimport java.util.LinkedHashSet;\nimport java.util.List;\nimport java.util.Set;\nimport org.apache.commons.lang.StringUtils;\nimport org.apache.log4j.Logger;\nimport org.dom4j.Document;\nimport org.dom4j.DocumentException;\nimport org.dom4j.Element;\nimport org.dom4j.Node;\nimport org.dom4j.io.OutputFormat;\nimport org.dom4j.io.SAXReader;\nimport org.dom4j.io.XMLWriter;\nimport org.pdfsam.guiclient.configuration.Configuration;\nimport org.pdfsam.guiclient.dto.DocumentPage;\nimport org.pdfsam.guiclient.dto.Rotation;\nimport org.pdfsam.i18n.GettextResource;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link XmlUtility}.\n* It contains ten unit test cases for the {@link XmlUtility#parseXmlFile(File)} method.\n*/\nclass XmlUtilityTest4 {"
	},
	{
		"original_code": "// XmlUtility.java\n/*\n * Created on 22-Jul-2008\n * Copyright (C) 2008 by Andrea Vacondio.\n *\n * This program is free software; you can redistribute it and/or modify it under the terms of the \n * GNU General Public License as published by the Free Software Foundation; \n * either version 2 of the License.\n * This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; \n * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. \n * See the GNU General Public License for more details.\n * You should have received a copy of the GNU General Public License along with this program; \n * if not, write to the Free Software Foundation, Inc., \n *  59 Temple Place, Suite 330, Boston, MA 02111-1307 USA\n */\npackage org.pdfsam.guiclient.utils;\n\nimport java.io.BufferedOutputStream;\nimport java.io.File;\nimport java.io.FileOutputStream;\nimport java.io.IOException;\nimport java.net.URL;\nimport java.util.Collection;\nimport java.util.LinkedHashSet;\nimport java.util.List;\nimport java.util.Set;\nimport org.apache.commons.lang.StringUtils;\nimport org.apache.log4j.Logger;\nimport org.dom4j.Document;\nimport org.dom4j.DocumentException;\nimport org.dom4j.Element;\nimport org.dom4j.Node;\nimport org.dom4j.io.OutputFormat;\nimport org.dom4j.io.SAXReader;\nimport org.dom4j.io.XMLWriter;\nimport org.pdfsam.guiclient.configuration.Configuration;\nimport org.pdfsam.guiclient.dto.DocumentPage;\nimport org.pdfsam.guiclient.dto.Rotation;\nimport org.pdfsam.i18n.GettextResource;\n\n/**\n * Utility class to deal with xml\n *\n * @author Andrea Vacondio\n */\npublic final class XmlUtility {\n\n    private static final Logger LOG = Logger.getLogger(XmlUtility.class.getPackage().getName());\n\n    private XmlUtility() {\n        // no constructor\n    }\n\n    /**\n     * @param pageNode\n     * @return given a page dom4j node it returns a DocumentPage object\n     */\n    public static DocumentPage getDocumentPage(Node pageNode) {\n        DocumentPage retVal = null;\n        try {\n            if (pageNode != null) {\n                retVal = new DocumentPage();\n                Node deletedNode = (Node) pageNode.selectSingleNode(\"@deleted\");\n                if (deletedNode != null && deletedNode.getText().length() > 0) {\n                    retVal.setDeleted(Boolean.valueOf(deletedNode.getText()));\n                }\n                Node numberNode = (Node) pageNode.selectSingleNode(\"@number\");\n                if (numberNode != null && numberNode.getText().length() > 0) {\n                    retVal.setPageNumber(Integer.valueOf(numberNode.getText()));\n                }\n                Node rotationNode = (Node) pageNode.selectSingleNode(\"@rotation\");\n                if (rotationNode != null && rotationNode.getText().length() > 0) {\n                    retVal.setRotation(Rotation.getRotation(Integer.valueOf(rotationNode.getText())));\n                }\n            }\n        } catch (Exception e) {\n            LOG.warn(GettextResource.gettext(Configuration.getInstance().getI18nResourceBundle(), \"Error retrieving page saved informations\"), e);\n        }\n        return retVal;\n    }\n\n    /**\n     * Write the DOM to the xml file\n     *\n     * @param domDoc\n     *            Document to write\n     * @param outFile\n     *            xml File to write\n     * @throws IOException\n     */\n    public static void writeXmlFile(Document domDoc, File outFile) throws IOException {\n        BufferedOutputStream bos = new BufferedOutputStream(new FileOutputStream(outFile));\n        OutputFormat format = OutputFormat.createPrettyPrint();\n        format.setEncoding(\"UTF-8\");\n        XMLWriter xmlFileWriter = new XMLWriter(bos, format);\n        xmlFileWriter.write(domDoc);\n        xmlFileWriter.flush();\n        xmlFileWriter.close();\n    }\n\n    /**\n     * @param document\n     * @param xpath\n     * @return The xml tag values for the given xpath\n     * @throws Exception\n     */\n    public static String getXmlValue(Document document, String xpath) {\n        String retVal = \"\";\n        Node node = document.selectSingleNode(xpath);\n        if (node != null) {\n            retVal = node.getText().trim();\n        }\n        return retVal;\n    }\n\n    /**\n     * @param document\n     * @param xpath\n     * @return a list of values for the given xpath\n     * @throws Exception\n     */\n    public static Set<String> getXmlValues(Document document, String xpath) {\n        Set<String> retVal = new LinkedHashSet<String>();\n        for (Node node : (List<Node>) document.selectNodes(xpath)) {\n            if (StringUtils.isNotBlank(node.getText())) {\n                retVal.add(node.getText().trim());\n            }\n        }\n        return retVal;\n    }\n\n    /**\n     * Parse the xml file converting the given path\n     *\n     * @param fullPath\n     * @return parsed Document\n     * @throws DocumentException\n     */\n    public static Document parseXmlFile(String fullPath) throws DocumentException {\n        return parseXmlFile(new File(fullPath));\n    }\n\n    /**\n     * parse the xml input file\n     *\n     * @param inputFile\n     * @return parsed Document\n     * @throws DocumentException\n     */\n    public static Document parseXmlFile(File inputFile) throws DocumentException {\n        Document document = null;\n        if (inputFile.isFile()) {\n            SAXReader reader = new SAXReader();\n            document = reader.read(inputFile);\n        } else {\n            throw new DocumentException(\"Unable to read \" + inputFile + \".\");\n        }\n        return document;\n    }\n\n    /**\n     * Parse the url\n     *\n     * @return The DOM object\n     */\n    public static Document parseXmlFile(URL url) throws DocumentException {\n        Document document = null;\n        SAXReader reader = new SAXReader();\n        document = reader.read(url);\n        return document;\n    }\n\n    /**\n     * Adds the to rootElement the given xpath and, if the xpath contains an attribute, sets the attribute value.\n     *\n     * @param rootElement\n     * @param xpath\n     * @param attributeValue\n     * @return the added element\n     */\n    public static Element processXPath(Element rootElement, String xpath, String attributeValue) {\n        String[] values = xpath.split(\"@\");\n        if (values.length == 2) {\n            return addXmlNodeAndAttribute(rootElement, values[0], values[1], attributeValue);\n        }\n        return addXmlNodeAndAttribute(rootElement, values[0], null, null);\n    }\n\n    /**\n     * Adds to the rootElement the nodes specified by nodeXPath. If not null it adds the attibuteName with the give Attribute Value\n     *\n     * @param rootElement\n     * @param nodeXPath\n     * @param attributeName\n     * @param AttributeValue\n     * @return the added element\n     */\n    public static Element addXmlNodeAndAttribute(Element rootElement, String nodeXPath, String attributeName, String attributeValue) {\n        String[] nodes = nodeXPath.split(\"/\");\n        Element currentElement = rootElement;\n        for (String node : nodes) {\n            if (StringUtils.isNotBlank(node)) {\n                Element tmpElement = (Element) currentElement.selectSingleNode(node);\n                if (tmpElement != null) {\n                    currentElement = tmpElement;\n                } else {\n                    currentElement = currentElement.addElement(node);\n                }\n            }\n        }\n        if (attributeName != null && attributeValue != null) {\n            currentElement.addAttribute(attributeName, attributeValue);\n        }\n        return currentElement;\n    }\n\n    /**\n     * Adds multiple nodes to the parent element, one for each attributeValues and each of them with an attribute with the given name and value.\n     * @param parentElement\n     * @param nodeName\n     * @param attributeName\n     * @param attributeValues\n     */\n    public static void addXmlNodesAndAttribute(Element parentElement, String nodeName, String attributeName, Collection<String> attributeValues) {\n        for (String attributeValue : attributeValues) {\n            if (StringUtils.isNotBlank(attributeValue)) {\n                Element currentElement = parentElement.addElement(nodeName);\n                currentElement.addAttribute(attributeName, attributeValue);\n            }\n        }\n    }\n}\n",
		"id": "EvoSuiteBenchmark/109_pdfsam/src/main/java/org/pdfsam/guiclient/utils/XmlUtilityTest5.java",
		"test_prompt": "// XmlUtilityTest5.java\npackage org.pdfsam.guiclient.utils;\n\nimport java.io.BufferedOutputStream;\nimport java.io.File;\nimport java.io.FileOutputStream;\nimport java.io.IOException;\nimport java.net.URL;\nimport java.util.Collection;\nimport java.util.LinkedHashSet;\nimport java.util.List;\nimport java.util.Set;\nimport org.apache.commons.lang.StringUtils;\nimport org.apache.log4j.Logger;\nimport org.dom4j.Document;\nimport org.dom4j.DocumentException;\nimport org.dom4j.Element;\nimport org.dom4j.Node;\nimport org.dom4j.io.OutputFormat;\nimport org.dom4j.io.SAXReader;\nimport org.dom4j.io.XMLWriter;\nimport org.pdfsam.guiclient.configuration.Configuration;\nimport org.pdfsam.guiclient.dto.DocumentPage;\nimport org.pdfsam.guiclient.dto.Rotation;\nimport org.pdfsam.i18n.GettextResource;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link XmlUtility}.\n* It contains ten unit test cases for the {@link XmlUtility#parseXmlFile(URL)} method.\n*/\nclass XmlUtilityTest5 {"
	},
	{
		"original_code": "// XmlUtility.java\n/*\n * Created on 22-Jul-2008\n * Copyright (C) 2008 by Andrea Vacondio.\n *\n * This program is free software; you can redistribute it and/or modify it under the terms of the \n * GNU General Public License as published by the Free Software Foundation; \n * either version 2 of the License.\n * This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; \n * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. \n * See the GNU General Public License for more details.\n * You should have received a copy of the GNU General Public License along with this program; \n * if not, write to the Free Software Foundation, Inc., \n *  59 Temple Place, Suite 330, Boston, MA 02111-1307 USA\n */\npackage org.pdfsam.guiclient.utils;\n\nimport java.io.BufferedOutputStream;\nimport java.io.File;\nimport java.io.FileOutputStream;\nimport java.io.IOException;\nimport java.net.URL;\nimport java.util.Collection;\nimport java.util.LinkedHashSet;\nimport java.util.List;\nimport java.util.Set;\nimport org.apache.commons.lang.StringUtils;\nimport org.apache.log4j.Logger;\nimport org.dom4j.Document;\nimport org.dom4j.DocumentException;\nimport org.dom4j.Element;\nimport org.dom4j.Node;\nimport org.dom4j.io.OutputFormat;\nimport org.dom4j.io.SAXReader;\nimport org.dom4j.io.XMLWriter;\nimport org.pdfsam.guiclient.configuration.Configuration;\nimport org.pdfsam.guiclient.dto.DocumentPage;\nimport org.pdfsam.guiclient.dto.Rotation;\nimport org.pdfsam.i18n.GettextResource;\n\n/**\n * Utility class to deal with xml\n *\n * @author Andrea Vacondio\n */\npublic final class XmlUtility {\n\n    private static final Logger LOG = Logger.getLogger(XmlUtility.class.getPackage().getName());\n\n    private XmlUtility() {\n        // no constructor\n    }\n\n    /**\n     * @param pageNode\n     * @return given a page dom4j node it returns a DocumentPage object\n     */\n    public static DocumentPage getDocumentPage(Node pageNode) {\n        DocumentPage retVal = null;\n        try {\n            if (pageNode != null) {\n                retVal = new DocumentPage();\n                Node deletedNode = (Node) pageNode.selectSingleNode(\"@deleted\");\n                if (deletedNode != null && deletedNode.getText().length() > 0) {\n                    retVal.setDeleted(Boolean.valueOf(deletedNode.getText()));\n                }\n                Node numberNode = (Node) pageNode.selectSingleNode(\"@number\");\n                if (numberNode != null && numberNode.getText().length() > 0) {\n                    retVal.setPageNumber(Integer.valueOf(numberNode.getText()));\n                }\n                Node rotationNode = (Node) pageNode.selectSingleNode(\"@rotation\");\n                if (rotationNode != null && rotationNode.getText().length() > 0) {\n                    retVal.setRotation(Rotation.getRotation(Integer.valueOf(rotationNode.getText())));\n                }\n            }\n        } catch (Exception e) {\n            LOG.warn(GettextResource.gettext(Configuration.getInstance().getI18nResourceBundle(), \"Error retrieving page saved informations\"), e);\n        }\n        return retVal;\n    }\n\n    /**\n     * Write the DOM to the xml file\n     *\n     * @param domDoc\n     *            Document to write\n     * @param outFile\n     *            xml File to write\n     * @throws IOException\n     */\n    public static void writeXmlFile(Document domDoc, File outFile) throws IOException {\n        BufferedOutputStream bos = new BufferedOutputStream(new FileOutputStream(outFile));\n        OutputFormat format = OutputFormat.createPrettyPrint();\n        format.setEncoding(\"UTF-8\");\n        XMLWriter xmlFileWriter = new XMLWriter(bos, format);\n        xmlFileWriter.write(domDoc);\n        xmlFileWriter.flush();\n        xmlFileWriter.close();\n    }\n\n    /**\n     * @param document\n     * @param xpath\n     * @return The xml tag values for the given xpath\n     * @throws Exception\n     */\n    public static String getXmlValue(Document document, String xpath) {\n        String retVal = \"\";\n        Node node = document.selectSingleNode(xpath);\n        if (node != null) {\n            retVal = node.getText().trim();\n        }\n        return retVal;\n    }\n\n    /**\n     * @param document\n     * @param xpath\n     * @return a list of values for the given xpath\n     * @throws Exception\n     */\n    public static Set<String> getXmlValues(Document document, String xpath) {\n        Set<String> retVal = new LinkedHashSet<String>();\n        for (Node node : (List<Node>) document.selectNodes(xpath)) {\n            if (StringUtils.isNotBlank(node.getText())) {\n                retVal.add(node.getText().trim());\n            }\n        }\n        return retVal;\n    }\n\n    /**\n     * Parse the xml file converting the given path\n     *\n     * @param fullPath\n     * @return parsed Document\n     * @throws DocumentException\n     */\n    public static Document parseXmlFile(String fullPath) throws DocumentException {\n        return parseXmlFile(new File(fullPath));\n    }\n\n    /**\n     * parse the xml input file\n     *\n     * @param inputFile\n     * @return parsed Document\n     * @throws DocumentException\n     */\n    public static Document parseXmlFile(File inputFile) throws DocumentException {\n        Document document = null;\n        if (inputFile.isFile()) {\n            SAXReader reader = new SAXReader();\n            document = reader.read(inputFile);\n        } else {\n            throw new DocumentException(\"Unable to read \" + inputFile + \".\");\n        }\n        return document;\n    }\n\n    /**\n     * Parse the url\n     *\n     * @return The DOM object\n     */\n    public static Document parseXmlFile(URL url) throws DocumentException {\n        Document document = null;\n        SAXReader reader = new SAXReader();\n        document = reader.read(url);\n        return document;\n    }\n\n    /**\n     * Adds the to rootElement the given xpath and, if the xpath contains an attribute, sets the attribute value.\n     *\n     * @param rootElement\n     * @param xpath\n     * @param attributeValue\n     * @return the added element\n     */\n    public static Element processXPath(Element rootElement, String xpath, String attributeValue) {\n        String[] values = xpath.split(\"@\");\n        if (values.length == 2) {\n            return addXmlNodeAndAttribute(rootElement, values[0], values[1], attributeValue);\n        }\n        return addXmlNodeAndAttribute(rootElement, values[0], null, null);\n    }\n\n    /**\n     * Adds to the rootElement the nodes specified by nodeXPath. If not null it adds the attibuteName with the give Attribute Value\n     *\n     * @param rootElement\n     * @param nodeXPath\n     * @param attributeName\n     * @param AttributeValue\n     * @return the added element\n     */\n    public static Element addXmlNodeAndAttribute(Element rootElement, String nodeXPath, String attributeName, String attributeValue) {\n        String[] nodes = nodeXPath.split(\"/\");\n        Element currentElement = rootElement;\n        for (String node : nodes) {\n            if (StringUtils.isNotBlank(node)) {\n                Element tmpElement = (Element) currentElement.selectSingleNode(node);\n                if (tmpElement != null) {\n                    currentElement = tmpElement;\n                } else {\n                    currentElement = currentElement.addElement(node);\n                }\n            }\n        }\n        if (attributeName != null && attributeValue != null) {\n            currentElement.addAttribute(attributeName, attributeValue);\n        }\n        return currentElement;\n    }\n\n    /**\n     * Adds multiple nodes to the parent element, one for each attributeValues and each of them with an attribute with the given name and value.\n     * @param parentElement\n     * @param nodeName\n     * @param attributeName\n     * @param attributeValues\n     */\n    public static void addXmlNodesAndAttribute(Element parentElement, String nodeName, String attributeName, Collection<String> attributeValues) {\n        for (String attributeValue : attributeValues) {\n            if (StringUtils.isNotBlank(attributeValue)) {\n                Element currentElement = parentElement.addElement(nodeName);\n                currentElement.addAttribute(attributeName, attributeValue);\n            }\n        }\n    }\n}\n",
		"id": "EvoSuiteBenchmark/109_pdfsam/src/main/java/org/pdfsam/guiclient/utils/XmlUtilityTest6.java",
		"test_prompt": "// XmlUtilityTest6.java\npackage org.pdfsam.guiclient.utils;\n\nimport java.io.BufferedOutputStream;\nimport java.io.File;\nimport java.io.FileOutputStream;\nimport java.io.IOException;\nimport java.net.URL;\nimport java.util.Collection;\nimport java.util.LinkedHashSet;\nimport java.util.List;\nimport java.util.Set;\nimport org.apache.commons.lang.StringUtils;\nimport org.apache.log4j.Logger;\nimport org.dom4j.Document;\nimport org.dom4j.DocumentException;\nimport org.dom4j.Element;\nimport org.dom4j.Node;\nimport org.dom4j.io.OutputFormat;\nimport org.dom4j.io.SAXReader;\nimport org.dom4j.io.XMLWriter;\nimport org.pdfsam.guiclient.configuration.Configuration;\nimport org.pdfsam.guiclient.dto.DocumentPage;\nimport org.pdfsam.guiclient.dto.Rotation;\nimport org.pdfsam.i18n.GettextResource;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link XmlUtility}.\n* It contains ten unit test cases for the {@link XmlUtility#processXPath(Element, String, String)} method.\n*/\nclass XmlUtilityTest6 {"
	},
	{
		"original_code": "// XmlUtility.java\n/*\n * Created on 22-Jul-2008\n * Copyright (C) 2008 by Andrea Vacondio.\n *\n * This program is free software; you can redistribute it and/or modify it under the terms of the \n * GNU General Public License as published by the Free Software Foundation; \n * either version 2 of the License.\n * This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; \n * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. \n * See the GNU General Public License for more details.\n * You should have received a copy of the GNU General Public License along with this program; \n * if not, write to the Free Software Foundation, Inc., \n *  59 Temple Place, Suite 330, Boston, MA 02111-1307 USA\n */\npackage org.pdfsam.guiclient.utils;\n\nimport java.io.BufferedOutputStream;\nimport java.io.File;\nimport java.io.FileOutputStream;\nimport java.io.IOException;\nimport java.net.URL;\nimport java.util.Collection;\nimport java.util.LinkedHashSet;\nimport java.util.List;\nimport java.util.Set;\nimport org.apache.commons.lang.StringUtils;\nimport org.apache.log4j.Logger;\nimport org.dom4j.Document;\nimport org.dom4j.DocumentException;\nimport org.dom4j.Element;\nimport org.dom4j.Node;\nimport org.dom4j.io.OutputFormat;\nimport org.dom4j.io.SAXReader;\nimport org.dom4j.io.XMLWriter;\nimport org.pdfsam.guiclient.configuration.Configuration;\nimport org.pdfsam.guiclient.dto.DocumentPage;\nimport org.pdfsam.guiclient.dto.Rotation;\nimport org.pdfsam.i18n.GettextResource;\n\n/**\n * Utility class to deal with xml\n *\n * @author Andrea Vacondio\n */\npublic final class XmlUtility {\n\n    private static final Logger LOG = Logger.getLogger(XmlUtility.class.getPackage().getName());\n\n    private XmlUtility() {\n        // no constructor\n    }\n\n    /**\n     * @param pageNode\n     * @return given a page dom4j node it returns a DocumentPage object\n     */\n    public static DocumentPage getDocumentPage(Node pageNode) {\n        DocumentPage retVal = null;\n        try {\n            if (pageNode != null) {\n                retVal = new DocumentPage();\n                Node deletedNode = (Node) pageNode.selectSingleNode(\"@deleted\");\n                if (deletedNode != null && deletedNode.getText().length() > 0) {\n                    retVal.setDeleted(Boolean.valueOf(deletedNode.getText()));\n                }\n                Node numberNode = (Node) pageNode.selectSingleNode(\"@number\");\n                if (numberNode != null && numberNode.getText().length() > 0) {\n                    retVal.setPageNumber(Integer.valueOf(numberNode.getText()));\n                }\n                Node rotationNode = (Node) pageNode.selectSingleNode(\"@rotation\");\n                if (rotationNode != null && rotationNode.getText().length() > 0) {\n                    retVal.setRotation(Rotation.getRotation(Integer.valueOf(rotationNode.getText())));\n                }\n            }\n        } catch (Exception e) {\n            LOG.warn(GettextResource.gettext(Configuration.getInstance().getI18nResourceBundle(), \"Error retrieving page saved informations\"), e);\n        }\n        return retVal;\n    }\n\n    /**\n     * Write the DOM to the xml file\n     *\n     * @param domDoc\n     *            Document to write\n     * @param outFile\n     *            xml File to write\n     * @throws IOException\n     */\n    public static void writeXmlFile(Document domDoc, File outFile) throws IOException {\n        BufferedOutputStream bos = new BufferedOutputStream(new FileOutputStream(outFile));\n        OutputFormat format = OutputFormat.createPrettyPrint();\n        format.setEncoding(\"UTF-8\");\n        XMLWriter xmlFileWriter = new XMLWriter(bos, format);\n        xmlFileWriter.write(domDoc);\n        xmlFileWriter.flush();\n        xmlFileWriter.close();\n    }\n\n    /**\n     * @param document\n     * @param xpath\n     * @return The xml tag values for the given xpath\n     * @throws Exception\n     */\n    public static String getXmlValue(Document document, String xpath) {\n        String retVal = \"\";\n        Node node = document.selectSingleNode(xpath);\n        if (node != null) {\n            retVal = node.getText().trim();\n        }\n        return retVal;\n    }\n\n    /**\n     * @param document\n     * @param xpath\n     * @return a list of values for the given xpath\n     * @throws Exception\n     */\n    public static Set<String> getXmlValues(Document document, String xpath) {\n        Set<String> retVal = new LinkedHashSet<String>();\n        for (Node node : (List<Node>) document.selectNodes(xpath)) {\n            if (StringUtils.isNotBlank(node.getText())) {\n                retVal.add(node.getText().trim());\n            }\n        }\n        return retVal;\n    }\n\n    /**\n     * Parse the xml file converting the given path\n     *\n     * @param fullPath\n     * @return parsed Document\n     * @throws DocumentException\n     */\n    public static Document parseXmlFile(String fullPath) throws DocumentException {\n        return parseXmlFile(new File(fullPath));\n    }\n\n    /**\n     * parse the xml input file\n     *\n     * @param inputFile\n     * @return parsed Document\n     * @throws DocumentException\n     */\n    public static Document parseXmlFile(File inputFile) throws DocumentException {\n        Document document = null;\n        if (inputFile.isFile()) {\n            SAXReader reader = new SAXReader();\n            document = reader.read(inputFile);\n        } else {\n            throw new DocumentException(\"Unable to read \" + inputFile + \".\");\n        }\n        return document;\n    }\n\n    /**\n     * Parse the url\n     *\n     * @return The DOM object\n     */\n    public static Document parseXmlFile(URL url) throws DocumentException {\n        Document document = null;\n        SAXReader reader = new SAXReader();\n        document = reader.read(url);\n        return document;\n    }\n\n    /**\n     * Adds the to rootElement the given xpath and, if the xpath contains an attribute, sets the attribute value.\n     *\n     * @param rootElement\n     * @param xpath\n     * @param attributeValue\n     * @return the added element\n     */\n    public static Element processXPath(Element rootElement, String xpath, String attributeValue) {\n        String[] values = xpath.split(\"@\");\n        if (values.length == 2) {\n            return addXmlNodeAndAttribute(rootElement, values[0], values[1], attributeValue);\n        }\n        return addXmlNodeAndAttribute(rootElement, values[0], null, null);\n    }\n\n    /**\n     * Adds to the rootElement the nodes specified by nodeXPath. If not null it adds the attibuteName with the give Attribute Value\n     *\n     * @param rootElement\n     * @param nodeXPath\n     * @param attributeName\n     * @param AttributeValue\n     * @return the added element\n     */\n    public static Element addXmlNodeAndAttribute(Element rootElement, String nodeXPath, String attributeName, String attributeValue) {\n        String[] nodes = nodeXPath.split(\"/\");\n        Element currentElement = rootElement;\n        for (String node : nodes) {\n            if (StringUtils.isNotBlank(node)) {\n                Element tmpElement = (Element) currentElement.selectSingleNode(node);\n                if (tmpElement != null) {\n                    currentElement = tmpElement;\n                } else {\n                    currentElement = currentElement.addElement(node);\n                }\n            }\n        }\n        if (attributeName != null && attributeValue != null) {\n            currentElement.addAttribute(attributeName, attributeValue);\n        }\n        return currentElement;\n    }\n\n    /**\n     * Adds multiple nodes to the parent element, one for each attributeValues and each of them with an attribute with the given name and value.\n     * @param parentElement\n     * @param nodeName\n     * @param attributeName\n     * @param attributeValues\n     */\n    public static void addXmlNodesAndAttribute(Element parentElement, String nodeName, String attributeName, Collection<String> attributeValues) {\n        for (String attributeValue : attributeValues) {\n            if (StringUtils.isNotBlank(attributeValue)) {\n                Element currentElement = parentElement.addElement(nodeName);\n                currentElement.addAttribute(attributeName, attributeValue);\n            }\n        }\n    }\n}\n",
		"id": "EvoSuiteBenchmark/109_pdfsam/src/main/java/org/pdfsam/guiclient/utils/XmlUtilityTest7.java",
		"test_prompt": "// XmlUtilityTest7.java\npackage org.pdfsam.guiclient.utils;\n\nimport java.io.BufferedOutputStream;\nimport java.io.File;\nimport java.io.FileOutputStream;\nimport java.io.IOException;\nimport java.net.URL;\nimport java.util.Collection;\nimport java.util.LinkedHashSet;\nimport java.util.List;\nimport java.util.Set;\nimport org.apache.commons.lang.StringUtils;\nimport org.apache.log4j.Logger;\nimport org.dom4j.Document;\nimport org.dom4j.DocumentException;\nimport org.dom4j.Element;\nimport org.dom4j.Node;\nimport org.dom4j.io.OutputFormat;\nimport org.dom4j.io.SAXReader;\nimport org.dom4j.io.XMLWriter;\nimport org.pdfsam.guiclient.configuration.Configuration;\nimport org.pdfsam.guiclient.dto.DocumentPage;\nimport org.pdfsam.guiclient.dto.Rotation;\nimport org.pdfsam.i18n.GettextResource;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link XmlUtility}.\n* It contains ten unit test cases for the {@link XmlUtility#addXmlNodeAndAttribute(Element, String, String, String)} method.\n*/\nclass XmlUtilityTest7 {"
	},
	{
		"original_code": "// ConversionUtility.java\n/*\r\n * Created on 16-Jan-2009\r\n * Copyright (C) 2009 by Andrea Vacondio.\r\n *\r\n * This program is free software; you can redistribute it and/or modify it under the terms of the \r\n * GNU General Public License as published by the Free Software Foundation; \r\n * either version 2 of the License.\r\n * This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; \r\n * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. \r\n * See the GNU General Public License for more details.\r\n * You should have received a copy of the GNU General Public License along with this program; \r\n * if not, write to the Free Software Foundation, Inc., \r\n *  59 Temple Place, Suite 330, Boston, MA 02111-1307 USA\r\n */\r\npackage org.pdfsam.guiclient.utils;\r\n\r\n/**\r\n * Conversion utility\r\n * @author Andrea Vacondio\r\n */\r\npublic class ConversionUtility {\r\n\r\n    public static final double INCH = 2.54d;\r\n\r\n    public static final double CM = 0.393700787d;\r\n\r\n    /**\r\n     * @param cm\r\n     * @return the inches value\r\n     */\r\n    public static double toInches(double cm) {\r\n        return cm * CM;\r\n    }\r\n\r\n    /**\r\n     * @param inches\r\n     * @return the centimeters value\r\n     */\r\n    public static double toCentimeters(double inches) {\r\n        return inches * INCH;\r\n    }\r\n}\r\n",
		"id": "EvoSuiteBenchmark/109_pdfsam/src/main/java/org/pdfsam/guiclient/utils/ConversionUtilityTest0.java",
		"test_prompt": "// ConversionUtilityTest0.java\npackage org.pdfsam.guiclient.utils;\n\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link ConversionUtility}.\n* It contains ten unit test cases for the {@link ConversionUtility#toInches(double)} method.\n*/\nclass ConversionUtilityTest0 {"
	},
	{
		"original_code": "// ConversionUtility.java\n/*\r\n * Created on 16-Jan-2009\r\n * Copyright (C) 2009 by Andrea Vacondio.\r\n *\r\n * This program is free software; you can redistribute it and/or modify it under the terms of the \r\n * GNU General Public License as published by the Free Software Foundation; \r\n * either version 2 of the License.\r\n * This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; \r\n * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. \r\n * See the GNU General Public License for more details.\r\n * You should have received a copy of the GNU General Public License along with this program; \r\n * if not, write to the Free Software Foundation, Inc., \r\n *  59 Temple Place, Suite 330, Boston, MA 02111-1307 USA\r\n */\r\npackage org.pdfsam.guiclient.utils;\r\n\r\n/**\r\n * Conversion utility\r\n * @author Andrea Vacondio\r\n */\r\npublic class ConversionUtility {\r\n\r\n    public static final double INCH = 2.54d;\r\n\r\n    public static final double CM = 0.393700787d;\r\n\r\n    /**\r\n     * @param cm\r\n     * @return the inches value\r\n     */\r\n    public static double toInches(double cm) {\r\n        return cm * CM;\r\n    }\r\n\r\n    /**\r\n     * @param inches\r\n     * @return the centimeters value\r\n     */\r\n    public static double toCentimeters(double inches) {\r\n        return inches * INCH;\r\n    }\r\n}\r\n",
		"id": "EvoSuiteBenchmark/109_pdfsam/src/main/java/org/pdfsam/guiclient/utils/ConversionUtilityTest1.java",
		"test_prompt": "// ConversionUtilityTest1.java\npackage org.pdfsam.guiclient.utils;\n\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link ConversionUtility}.\n* It contains ten unit test cases for the {@link ConversionUtility#toCentimeters(double)} method.\n*/\nclass ConversionUtilityTest1 {"
	},
	{
		"original_code": "// ThemeUtility.java\n/*\r\n * Created on 22-feb-2005\r\n *\r\n * Ritorna il LookAndFeel specificato dal file di configurazione\r\n * Copyright (C) 2006 by Andrea Vacondio.\r\n *\r\n * This program is free software; you can redistribute it and/or modify it under the terms of the \r\n * GNU General Public License as published by the Free Software Foundation; \r\n * either version 2 of the License.\r\n * This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; \r\n * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. \r\n * See the GNU General Public License for more details.\r\n * You should have received a copy of the GNU General Public License along with this program; \r\n * if not, write to the Free Software Foundation, Inc., \r\n *  59 Temple Place, Suite 330, Boston, MA 02111-1307 USA\r\n */\r\npackage org.pdfsam.guiclient.utils;\r\n\r\nimport java.util.LinkedList;\r\nimport javax.swing.UIManager;\r\nimport org.pdfsam.guiclient.dto.StringItem;\r\nimport com.jgoodies.looks.plastic.PlasticLookAndFeel;\r\nimport com.jgoodies.looks.plastic.theme.BrownSugar;\r\nimport com.jgoodies.looks.plastic.theme.DarkStar;\r\nimport com.jgoodies.looks.plastic.theme.DesertBlue;\r\nimport com.jgoodies.looks.plastic.theme.DesertGreen;\r\nimport com.jgoodies.looks.plastic.theme.DesertRed;\r\nimport com.jgoodies.looks.plastic.theme.ExperienceBlue;\r\nimport com.jgoodies.looks.plastic.theme.ExperienceGreen;\r\nimport com.jgoodies.looks.plastic.theme.Silver;\r\nimport com.jgoodies.looks.plastic.theme.SkyBlue;\r\nimport com.jgoodies.looks.plastic.theme.SkyBluer;\r\nimport com.jgoodies.looks.plastic.theme.SkyGreen;\r\nimport com.jgoodies.looks.plastic.theme.SkyKrupp;\r\nimport com.jgoodies.looks.plastic.theme.SkyPink;\r\nimport com.jgoodies.looks.plastic.theme.SkyYellow;\r\n\r\n/**\r\n * ThemeSelector utility. It provides functions to let the user select the GUI theme\r\n * @author Andrea Vacondio\r\n */\r\npublic class ThemeUtility {\r\n\r\n    /**\r\n     * @param lafNumber\r\n     * @return le LookAndFeel\r\n     */\r\n    public static String getLAF(int lafNumber) {\r\n        String ThemeSelected;\r\n        switch(lafNumber) {\r\n            case 1:\r\n                ThemeSelected = UIManager.getSystemLookAndFeelClassName();\r\n                break;\r\n            case 2:\r\n                ThemeSelected = \"javax.swing.plaf.metal.MetalLookAndFeel\";\r\n                break;\r\n            case 3:\r\n                ThemeSelected = \"com.jgoodies.looks.plastic.Plastic3DLookAndFeel\";\r\n                break;\r\n            case 4:\r\n                ThemeSelected = \"com.jgoodies.looks.plastic.PlasticLookAndFeel\";\r\n                break;\r\n            case 5:\r\n                ThemeSelected = \"com.jgoodies.looks.plastic.PlasticXPLookAndFeel\";\r\n                break;\r\n            case 6:\r\n                ThemeSelected = \"com.jgoodies.looks.windows.WindowsLookAndFeel\";\r\n                break;\r\n            default:\r\n                ThemeSelected = UIManager.getCrossPlatformLookAndFeelClassName();\r\n                break;\r\n        }\r\n        return ThemeSelected;\r\n    }\r\n\r\n    /**\r\n     * @return a LinkedList of ListItem objects with the availales LAF\r\n     */\r\n    public static LinkedList<StringItem> getLAFList() {\r\n        LinkedList<StringItem> retval = new LinkedList<StringItem>();\r\n        retval.add(new StringItem(\"0\", \"Java\"));\r\n        retval.add(new StringItem(\"1\", \"System\"));\r\n        retval.add(new StringItem(\"2\", \"Metal\"));\r\n        retval.add(new StringItem(\"3\", \"Plastic3D\"));\r\n        retval.add(new StringItem(\"4\", \"Plastic\"));\r\n        retval.add(new StringItem(\"5\", \"PlasticXP\"));\r\n        retval.add(new StringItem(\"6\", \"Windows\"));\r\n        return retval;\r\n    }\r\n\r\n    /**\r\n     * @return  LinkedList of ListItem objects with the available Themes form Plastic\r\n     */\r\n    public static LinkedList<StringItem> getThemeList() {\r\n        LinkedList<StringItem> retval = new LinkedList<StringItem>();\r\n        retval.add(new StringItem(\"0\", \"None\"));\r\n        retval.add(new StringItem(\"1\", \"DesertBlue\"));\r\n        retval.add(new StringItem(\"2\", \"DesertRed\"));\r\n        retval.add(new StringItem(\"3\", \"Silver\"));\r\n        retval.add(new StringItem(\"4\", \"SkyPink\"));\r\n        retval.add(new StringItem(\"5\", \"SkyKrupp\"));\r\n        retval.add(new StringItem(\"6\", \"SkyYellow\"));\r\n        retval.add(new StringItem(\"7\", \"SkyGreen\"));\r\n        retval.add(new StringItem(\"8\", \"DarkStar\"));\r\n        retval.add(new StringItem(\"9\", \"BrownSugar\"));\r\n        retval.add(new StringItem(\"10\", \"DesertGreen\"));\r\n        retval.add(new StringItem(\"11\", \"ExperienceBlue\"));\r\n        retval.add(new StringItem(\"12\", \"ExperienceGreen\"));\r\n        retval.add(new StringItem(\"13\", \"SkyBlue\"));\r\n        retval.add(new StringItem(\"14\", \"SkyBluer\"));\r\n        return retval;\r\n    }\r\n\r\n    /**\r\n     * @param lafNumber\r\n     * @return true if the LookAndFeel is Plastic type\r\n     */\r\n    public static boolean isPlastic(int lafNumber) {\r\n        return ((lafNumber >= 3) && (lafNumber <= 5));\r\n    }\r\n\r\n    /**\r\n     * Sets the theme\r\n     * @param themeNumber Theme number\r\n     */\r\n    public static void setTheme(int themeNumber) {\r\n        switch(themeNumber) {\r\n            case 1:\r\n                PlasticLookAndFeel.setPlasticTheme(new DesertBlue());\r\n                break;\r\n            case 2:\r\n                PlasticLookAndFeel.setPlasticTheme(new DesertRed());\r\n                break;\r\n            case 3:\r\n                PlasticLookAndFeel.setPlasticTheme(new Silver());\r\n                break;\r\n            case 4:\r\n                PlasticLookAndFeel.setPlasticTheme(new SkyPink());\r\n                break;\r\n            case 5:\r\n                PlasticLookAndFeel.setPlasticTheme(new SkyKrupp());\r\n                break;\r\n            case 6:\r\n                PlasticLookAndFeel.setPlasticTheme(new SkyYellow());\r\n                break;\r\n            case 7:\r\n                PlasticLookAndFeel.setPlasticTheme(new SkyGreen());\r\n                break;\r\n            case 8:\r\n                PlasticLookAndFeel.setPlasticTheme(new DarkStar());\r\n                break;\r\n            case 9:\r\n                PlasticLookAndFeel.setPlasticTheme(new BrownSugar());\r\n                break;\r\n            case 10:\r\n                PlasticLookAndFeel.setPlasticTheme(new DesertGreen());\r\n                break;\r\n            case 11:\r\n                PlasticLookAndFeel.setPlasticTheme(new ExperienceBlue());\r\n                break;\r\n            case 12:\r\n                PlasticLookAndFeel.setPlasticTheme(new ExperienceGreen());\r\n                break;\r\n            case 13:\r\n                PlasticLookAndFeel.setPlasticTheme(new SkyBlue());\r\n                break;\r\n            case 14:\r\n                PlasticLookAndFeel.setPlasticTheme(new SkyBluer());\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n    }\r\n}\r\n",
		"id": "EvoSuiteBenchmark/109_pdfsam/src/main/java/org/pdfsam/guiclient/utils/ThemeUtilityTest0.java",
		"test_prompt": "// ThemeUtilityTest0.java\npackage org.pdfsam.guiclient.utils;\n\nimport java.util.LinkedList;\nimport javax.swing.UIManager;\nimport org.pdfsam.guiclient.dto.StringItem;\nimport com.jgoodies.looks.plastic.PlasticLookAndFeel;\nimport com.jgoodies.looks.plastic.theme.BrownSugar;\nimport com.jgoodies.looks.plastic.theme.DarkStar;\nimport com.jgoodies.looks.plastic.theme.DesertBlue;\nimport com.jgoodies.looks.plastic.theme.DesertGreen;\nimport com.jgoodies.looks.plastic.theme.DesertRed;\nimport com.jgoodies.looks.plastic.theme.ExperienceBlue;\nimport com.jgoodies.looks.plastic.theme.ExperienceGreen;\nimport com.jgoodies.looks.plastic.theme.Silver;\nimport com.jgoodies.looks.plastic.theme.SkyBlue;\nimport com.jgoodies.looks.plastic.theme.SkyBluer;\nimport com.jgoodies.looks.plastic.theme.SkyGreen;\nimport com.jgoodies.looks.plastic.theme.SkyKrupp;\nimport com.jgoodies.looks.plastic.theme.SkyPink;\nimport com.jgoodies.looks.plastic.theme.SkyYellow;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link ThemeUtility}.\n* It contains ten unit test cases for the {@link ThemeUtility#getLAF(int)} method.\n*/\nclass ThemeUtilityTest0 {"
	},
	{
		"original_code": "// ThemeUtility.java\n/*\r\n * Created on 22-feb-2005\r\n *\r\n * Ritorna il LookAndFeel specificato dal file di configurazione\r\n * Copyright (C) 2006 by Andrea Vacondio.\r\n *\r\n * This program is free software; you can redistribute it and/or modify it under the terms of the \r\n * GNU General Public License as published by the Free Software Foundation; \r\n * either version 2 of the License.\r\n * This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; \r\n * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. \r\n * See the GNU General Public License for more details.\r\n * You should have received a copy of the GNU General Public License along with this program; \r\n * if not, write to the Free Software Foundation, Inc., \r\n *  59 Temple Place, Suite 330, Boston, MA 02111-1307 USA\r\n */\r\npackage org.pdfsam.guiclient.utils;\r\n\r\nimport java.util.LinkedList;\r\nimport javax.swing.UIManager;\r\nimport org.pdfsam.guiclient.dto.StringItem;\r\nimport com.jgoodies.looks.plastic.PlasticLookAndFeel;\r\nimport com.jgoodies.looks.plastic.theme.BrownSugar;\r\nimport com.jgoodies.looks.plastic.theme.DarkStar;\r\nimport com.jgoodies.looks.plastic.theme.DesertBlue;\r\nimport com.jgoodies.looks.plastic.theme.DesertGreen;\r\nimport com.jgoodies.looks.plastic.theme.DesertRed;\r\nimport com.jgoodies.looks.plastic.theme.ExperienceBlue;\r\nimport com.jgoodies.looks.plastic.theme.ExperienceGreen;\r\nimport com.jgoodies.looks.plastic.theme.Silver;\r\nimport com.jgoodies.looks.plastic.theme.SkyBlue;\r\nimport com.jgoodies.looks.plastic.theme.SkyBluer;\r\nimport com.jgoodies.looks.plastic.theme.SkyGreen;\r\nimport com.jgoodies.looks.plastic.theme.SkyKrupp;\r\nimport com.jgoodies.looks.plastic.theme.SkyPink;\r\nimport com.jgoodies.looks.plastic.theme.SkyYellow;\r\n\r\n/**\r\n * ThemeSelector utility. It provides functions to let the user select the GUI theme\r\n * @author Andrea Vacondio\r\n */\r\npublic class ThemeUtility {\r\n\r\n    /**\r\n     * @param lafNumber\r\n     * @return le LookAndFeel\r\n     */\r\n    public static String getLAF(int lafNumber) {\r\n        String ThemeSelected;\r\n        switch(lafNumber) {\r\n            case 1:\r\n                ThemeSelected = UIManager.getSystemLookAndFeelClassName();\r\n                break;\r\n            case 2:\r\n                ThemeSelected = \"javax.swing.plaf.metal.MetalLookAndFeel\";\r\n                break;\r\n            case 3:\r\n                ThemeSelected = \"com.jgoodies.looks.plastic.Plastic3DLookAndFeel\";\r\n                break;\r\n            case 4:\r\n                ThemeSelected = \"com.jgoodies.looks.plastic.PlasticLookAndFeel\";\r\n                break;\r\n            case 5:\r\n                ThemeSelected = \"com.jgoodies.looks.plastic.PlasticXPLookAndFeel\";\r\n                break;\r\n            case 6:\r\n                ThemeSelected = \"com.jgoodies.looks.windows.WindowsLookAndFeel\";\r\n                break;\r\n            default:\r\n                ThemeSelected = UIManager.getCrossPlatformLookAndFeelClassName();\r\n                break;\r\n        }\r\n        return ThemeSelected;\r\n    }\r\n\r\n    /**\r\n     * @return a LinkedList of ListItem objects with the availales LAF\r\n     */\r\n    public static LinkedList<StringItem> getLAFList() {\r\n        LinkedList<StringItem> retval = new LinkedList<StringItem>();\r\n        retval.add(new StringItem(\"0\", \"Java\"));\r\n        retval.add(new StringItem(\"1\", \"System\"));\r\n        retval.add(new StringItem(\"2\", \"Metal\"));\r\n        retval.add(new StringItem(\"3\", \"Plastic3D\"));\r\n        retval.add(new StringItem(\"4\", \"Plastic\"));\r\n        retval.add(new StringItem(\"5\", \"PlasticXP\"));\r\n        retval.add(new StringItem(\"6\", \"Windows\"));\r\n        return retval;\r\n    }\r\n\r\n    /**\r\n     * @return  LinkedList of ListItem objects with the available Themes form Plastic\r\n     */\r\n    public static LinkedList<StringItem> getThemeList() {\r\n        LinkedList<StringItem> retval = new LinkedList<StringItem>();\r\n        retval.add(new StringItem(\"0\", \"None\"));\r\n        retval.add(new StringItem(\"1\", \"DesertBlue\"));\r\n        retval.add(new StringItem(\"2\", \"DesertRed\"));\r\n        retval.add(new StringItem(\"3\", \"Silver\"));\r\n        retval.add(new StringItem(\"4\", \"SkyPink\"));\r\n        retval.add(new StringItem(\"5\", \"SkyKrupp\"));\r\n        retval.add(new StringItem(\"6\", \"SkyYellow\"));\r\n        retval.add(new StringItem(\"7\", \"SkyGreen\"));\r\n        retval.add(new StringItem(\"8\", \"DarkStar\"));\r\n        retval.add(new StringItem(\"9\", \"BrownSugar\"));\r\n        retval.add(new StringItem(\"10\", \"DesertGreen\"));\r\n        retval.add(new StringItem(\"11\", \"ExperienceBlue\"));\r\n        retval.add(new StringItem(\"12\", \"ExperienceGreen\"));\r\n        retval.add(new StringItem(\"13\", \"SkyBlue\"));\r\n        retval.add(new StringItem(\"14\", \"SkyBluer\"));\r\n        return retval;\r\n    }\r\n\r\n    /**\r\n     * @param lafNumber\r\n     * @return true if the LookAndFeel is Plastic type\r\n     */\r\n    public static boolean isPlastic(int lafNumber) {\r\n        return ((lafNumber >= 3) && (lafNumber <= 5));\r\n    }\r\n\r\n    /**\r\n     * Sets the theme\r\n     * @param themeNumber Theme number\r\n     */\r\n    public static void setTheme(int themeNumber) {\r\n        switch(themeNumber) {\r\n            case 1:\r\n                PlasticLookAndFeel.setPlasticTheme(new DesertBlue());\r\n                break;\r\n            case 2:\r\n                PlasticLookAndFeel.setPlasticTheme(new DesertRed());\r\n                break;\r\n            case 3:\r\n                PlasticLookAndFeel.setPlasticTheme(new Silver());\r\n                break;\r\n            case 4:\r\n                PlasticLookAndFeel.setPlasticTheme(new SkyPink());\r\n                break;\r\n            case 5:\r\n                PlasticLookAndFeel.setPlasticTheme(new SkyKrupp());\r\n                break;\r\n            case 6:\r\n                PlasticLookAndFeel.setPlasticTheme(new SkyYellow());\r\n                break;\r\n            case 7:\r\n                PlasticLookAndFeel.setPlasticTheme(new SkyGreen());\r\n                break;\r\n            case 8:\r\n                PlasticLookAndFeel.setPlasticTheme(new DarkStar());\r\n                break;\r\n            case 9:\r\n                PlasticLookAndFeel.setPlasticTheme(new BrownSugar());\r\n                break;\r\n            case 10:\r\n                PlasticLookAndFeel.setPlasticTheme(new DesertGreen());\r\n                break;\r\n            case 11:\r\n                PlasticLookAndFeel.setPlasticTheme(new ExperienceBlue());\r\n                break;\r\n            case 12:\r\n                PlasticLookAndFeel.setPlasticTheme(new ExperienceGreen());\r\n                break;\r\n            case 13:\r\n                PlasticLookAndFeel.setPlasticTheme(new SkyBlue());\r\n                break;\r\n            case 14:\r\n                PlasticLookAndFeel.setPlasticTheme(new SkyBluer());\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n    }\r\n}\r\n",
		"id": "EvoSuiteBenchmark/109_pdfsam/src/main/java/org/pdfsam/guiclient/utils/ThemeUtilityTest1.java",
		"test_prompt": "// ThemeUtilityTest1.java\npackage org.pdfsam.guiclient.utils;\n\nimport java.util.LinkedList;\nimport javax.swing.UIManager;\nimport org.pdfsam.guiclient.dto.StringItem;\nimport com.jgoodies.looks.plastic.PlasticLookAndFeel;\nimport com.jgoodies.looks.plastic.theme.BrownSugar;\nimport com.jgoodies.looks.plastic.theme.DarkStar;\nimport com.jgoodies.looks.plastic.theme.DesertBlue;\nimport com.jgoodies.looks.plastic.theme.DesertGreen;\nimport com.jgoodies.looks.plastic.theme.DesertRed;\nimport com.jgoodies.looks.plastic.theme.ExperienceBlue;\nimport com.jgoodies.looks.plastic.theme.ExperienceGreen;\nimport com.jgoodies.looks.plastic.theme.Silver;\nimport com.jgoodies.looks.plastic.theme.SkyBlue;\nimport com.jgoodies.looks.plastic.theme.SkyBluer;\nimport com.jgoodies.looks.plastic.theme.SkyGreen;\nimport com.jgoodies.looks.plastic.theme.SkyKrupp;\nimport com.jgoodies.looks.plastic.theme.SkyPink;\nimport com.jgoodies.looks.plastic.theme.SkyYellow;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link ThemeUtility}.\n* It contains ten unit test cases for the {@link ThemeUtility#getLAFList()} method.\n*/\nclass ThemeUtilityTest1 {"
	},
	{
		"original_code": "// ThemeUtility.java\n/*\r\n * Created on 22-feb-2005\r\n *\r\n * Ritorna il LookAndFeel specificato dal file di configurazione\r\n * Copyright (C) 2006 by Andrea Vacondio.\r\n *\r\n * This program is free software; you can redistribute it and/or modify it under the terms of the \r\n * GNU General Public License as published by the Free Software Foundation; \r\n * either version 2 of the License.\r\n * This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; \r\n * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. \r\n * See the GNU General Public License for more details.\r\n * You should have received a copy of the GNU General Public License along with this program; \r\n * if not, write to the Free Software Foundation, Inc., \r\n *  59 Temple Place, Suite 330, Boston, MA 02111-1307 USA\r\n */\r\npackage org.pdfsam.guiclient.utils;\r\n\r\nimport java.util.LinkedList;\r\nimport javax.swing.UIManager;\r\nimport org.pdfsam.guiclient.dto.StringItem;\r\nimport com.jgoodies.looks.plastic.PlasticLookAndFeel;\r\nimport com.jgoodies.looks.plastic.theme.BrownSugar;\r\nimport com.jgoodies.looks.plastic.theme.DarkStar;\r\nimport com.jgoodies.looks.plastic.theme.DesertBlue;\r\nimport com.jgoodies.looks.plastic.theme.DesertGreen;\r\nimport com.jgoodies.looks.plastic.theme.DesertRed;\r\nimport com.jgoodies.looks.plastic.theme.ExperienceBlue;\r\nimport com.jgoodies.looks.plastic.theme.ExperienceGreen;\r\nimport com.jgoodies.looks.plastic.theme.Silver;\r\nimport com.jgoodies.looks.plastic.theme.SkyBlue;\r\nimport com.jgoodies.looks.plastic.theme.SkyBluer;\r\nimport com.jgoodies.looks.plastic.theme.SkyGreen;\r\nimport com.jgoodies.looks.plastic.theme.SkyKrupp;\r\nimport com.jgoodies.looks.plastic.theme.SkyPink;\r\nimport com.jgoodies.looks.plastic.theme.SkyYellow;\r\n\r\n/**\r\n * ThemeSelector utility. It provides functions to let the user select the GUI theme\r\n * @author Andrea Vacondio\r\n */\r\npublic class ThemeUtility {\r\n\r\n    /**\r\n     * @param lafNumber\r\n     * @return le LookAndFeel\r\n     */\r\n    public static String getLAF(int lafNumber) {\r\n        String ThemeSelected;\r\n        switch(lafNumber) {\r\n            case 1:\r\n                ThemeSelected = UIManager.getSystemLookAndFeelClassName();\r\n                break;\r\n            case 2:\r\n                ThemeSelected = \"javax.swing.plaf.metal.MetalLookAndFeel\";\r\n                break;\r\n            case 3:\r\n                ThemeSelected = \"com.jgoodies.looks.plastic.Plastic3DLookAndFeel\";\r\n                break;\r\n            case 4:\r\n                ThemeSelected = \"com.jgoodies.looks.plastic.PlasticLookAndFeel\";\r\n                break;\r\n            case 5:\r\n                ThemeSelected = \"com.jgoodies.looks.plastic.PlasticXPLookAndFeel\";\r\n                break;\r\n            case 6:\r\n                ThemeSelected = \"com.jgoodies.looks.windows.WindowsLookAndFeel\";\r\n                break;\r\n            default:\r\n                ThemeSelected = UIManager.getCrossPlatformLookAndFeelClassName();\r\n                break;\r\n        }\r\n        return ThemeSelected;\r\n    }\r\n\r\n    /**\r\n     * @return a LinkedList of ListItem objects with the availales LAF\r\n     */\r\n    public static LinkedList<StringItem> getLAFList() {\r\n        LinkedList<StringItem> retval = new LinkedList<StringItem>();\r\n        retval.add(new StringItem(\"0\", \"Java\"));\r\n        retval.add(new StringItem(\"1\", \"System\"));\r\n        retval.add(new StringItem(\"2\", \"Metal\"));\r\n        retval.add(new StringItem(\"3\", \"Plastic3D\"));\r\n        retval.add(new StringItem(\"4\", \"Plastic\"));\r\n        retval.add(new StringItem(\"5\", \"PlasticXP\"));\r\n        retval.add(new StringItem(\"6\", \"Windows\"));\r\n        return retval;\r\n    }\r\n\r\n    /**\r\n     * @return  LinkedList of ListItem objects with the available Themes form Plastic\r\n     */\r\n    public static LinkedList<StringItem> getThemeList() {\r\n        LinkedList<StringItem> retval = new LinkedList<StringItem>();\r\n        retval.add(new StringItem(\"0\", \"None\"));\r\n        retval.add(new StringItem(\"1\", \"DesertBlue\"));\r\n        retval.add(new StringItem(\"2\", \"DesertRed\"));\r\n        retval.add(new StringItem(\"3\", \"Silver\"));\r\n        retval.add(new StringItem(\"4\", \"SkyPink\"));\r\n        retval.add(new StringItem(\"5\", \"SkyKrupp\"));\r\n        retval.add(new StringItem(\"6\", \"SkyYellow\"));\r\n        retval.add(new StringItem(\"7\", \"SkyGreen\"));\r\n        retval.add(new StringItem(\"8\", \"DarkStar\"));\r\n        retval.add(new StringItem(\"9\", \"BrownSugar\"));\r\n        retval.add(new StringItem(\"10\", \"DesertGreen\"));\r\n        retval.add(new StringItem(\"11\", \"ExperienceBlue\"));\r\n        retval.add(new StringItem(\"12\", \"ExperienceGreen\"));\r\n        retval.add(new StringItem(\"13\", \"SkyBlue\"));\r\n        retval.add(new StringItem(\"14\", \"SkyBluer\"));\r\n        return retval;\r\n    }\r\n\r\n    /**\r\n     * @param lafNumber\r\n     * @return true if the LookAndFeel is Plastic type\r\n     */\r\n    public static boolean isPlastic(int lafNumber) {\r\n        return ((lafNumber >= 3) && (lafNumber <= 5));\r\n    }\r\n\r\n    /**\r\n     * Sets the theme\r\n     * @param themeNumber Theme number\r\n     */\r\n    public static void setTheme(int themeNumber) {\r\n        switch(themeNumber) {\r\n            case 1:\r\n                PlasticLookAndFeel.setPlasticTheme(new DesertBlue());\r\n                break;\r\n            case 2:\r\n                PlasticLookAndFeel.setPlasticTheme(new DesertRed());\r\n                break;\r\n            case 3:\r\n                PlasticLookAndFeel.setPlasticTheme(new Silver());\r\n                break;\r\n            case 4:\r\n                PlasticLookAndFeel.setPlasticTheme(new SkyPink());\r\n                break;\r\n            case 5:\r\n                PlasticLookAndFeel.setPlasticTheme(new SkyKrupp());\r\n                break;\r\n            case 6:\r\n                PlasticLookAndFeel.setPlasticTheme(new SkyYellow());\r\n                break;\r\n            case 7:\r\n                PlasticLookAndFeel.setPlasticTheme(new SkyGreen());\r\n                break;\r\n            case 8:\r\n                PlasticLookAndFeel.setPlasticTheme(new DarkStar());\r\n                break;\r\n            case 9:\r\n                PlasticLookAndFeel.setPlasticTheme(new BrownSugar());\r\n                break;\r\n            case 10:\r\n                PlasticLookAndFeel.setPlasticTheme(new DesertGreen());\r\n                break;\r\n            case 11:\r\n                PlasticLookAndFeel.setPlasticTheme(new ExperienceBlue());\r\n                break;\r\n            case 12:\r\n                PlasticLookAndFeel.setPlasticTheme(new ExperienceGreen());\r\n                break;\r\n            case 13:\r\n                PlasticLookAndFeel.setPlasticTheme(new SkyBlue());\r\n                break;\r\n            case 14:\r\n                PlasticLookAndFeel.setPlasticTheme(new SkyBluer());\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n    }\r\n}\r\n",
		"id": "EvoSuiteBenchmark/109_pdfsam/src/main/java/org/pdfsam/guiclient/utils/ThemeUtilityTest2.java",
		"test_prompt": "// ThemeUtilityTest2.java\npackage org.pdfsam.guiclient.utils;\n\nimport java.util.LinkedList;\nimport javax.swing.UIManager;\nimport org.pdfsam.guiclient.dto.StringItem;\nimport com.jgoodies.looks.plastic.PlasticLookAndFeel;\nimport com.jgoodies.looks.plastic.theme.BrownSugar;\nimport com.jgoodies.looks.plastic.theme.DarkStar;\nimport com.jgoodies.looks.plastic.theme.DesertBlue;\nimport com.jgoodies.looks.plastic.theme.DesertGreen;\nimport com.jgoodies.looks.plastic.theme.DesertRed;\nimport com.jgoodies.looks.plastic.theme.ExperienceBlue;\nimport com.jgoodies.looks.plastic.theme.ExperienceGreen;\nimport com.jgoodies.looks.plastic.theme.Silver;\nimport com.jgoodies.looks.plastic.theme.SkyBlue;\nimport com.jgoodies.looks.plastic.theme.SkyBluer;\nimport com.jgoodies.looks.plastic.theme.SkyGreen;\nimport com.jgoodies.looks.plastic.theme.SkyKrupp;\nimport com.jgoodies.looks.plastic.theme.SkyPink;\nimport com.jgoodies.looks.plastic.theme.SkyYellow;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link ThemeUtility}.\n* It contains ten unit test cases for the {@link ThemeUtility#getThemeList()} method.\n*/\nclass ThemeUtilityTest2 {"
	},
	{
		"original_code": "// ThemeUtility.java\n/*\r\n * Created on 22-feb-2005\r\n *\r\n * Ritorna il LookAndFeel specificato dal file di configurazione\r\n * Copyright (C) 2006 by Andrea Vacondio.\r\n *\r\n * This program is free software; you can redistribute it and/or modify it under the terms of the \r\n * GNU General Public License as published by the Free Software Foundation; \r\n * either version 2 of the License.\r\n * This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; \r\n * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. \r\n * See the GNU General Public License for more details.\r\n * You should have received a copy of the GNU General Public License along with this program; \r\n * if not, write to the Free Software Foundation, Inc., \r\n *  59 Temple Place, Suite 330, Boston, MA 02111-1307 USA\r\n */\r\npackage org.pdfsam.guiclient.utils;\r\n\r\nimport java.util.LinkedList;\r\nimport javax.swing.UIManager;\r\nimport org.pdfsam.guiclient.dto.StringItem;\r\nimport com.jgoodies.looks.plastic.PlasticLookAndFeel;\r\nimport com.jgoodies.looks.plastic.theme.BrownSugar;\r\nimport com.jgoodies.looks.plastic.theme.DarkStar;\r\nimport com.jgoodies.looks.plastic.theme.DesertBlue;\r\nimport com.jgoodies.looks.plastic.theme.DesertGreen;\r\nimport com.jgoodies.looks.plastic.theme.DesertRed;\r\nimport com.jgoodies.looks.plastic.theme.ExperienceBlue;\r\nimport com.jgoodies.looks.plastic.theme.ExperienceGreen;\r\nimport com.jgoodies.looks.plastic.theme.Silver;\r\nimport com.jgoodies.looks.plastic.theme.SkyBlue;\r\nimport com.jgoodies.looks.plastic.theme.SkyBluer;\r\nimport com.jgoodies.looks.plastic.theme.SkyGreen;\r\nimport com.jgoodies.looks.plastic.theme.SkyKrupp;\r\nimport com.jgoodies.looks.plastic.theme.SkyPink;\r\nimport com.jgoodies.looks.plastic.theme.SkyYellow;\r\n\r\n/**\r\n * ThemeSelector utility. It provides functions to let the user select the GUI theme\r\n * @author Andrea Vacondio\r\n */\r\npublic class ThemeUtility {\r\n\r\n    /**\r\n     * @param lafNumber\r\n     * @return le LookAndFeel\r\n     */\r\n    public static String getLAF(int lafNumber) {\r\n        String ThemeSelected;\r\n        switch(lafNumber) {\r\n            case 1:\r\n                ThemeSelected = UIManager.getSystemLookAndFeelClassName();\r\n                break;\r\n            case 2:\r\n                ThemeSelected = \"javax.swing.plaf.metal.MetalLookAndFeel\";\r\n                break;\r\n            case 3:\r\n                ThemeSelected = \"com.jgoodies.looks.plastic.Plastic3DLookAndFeel\";\r\n                break;\r\n            case 4:\r\n                ThemeSelected = \"com.jgoodies.looks.plastic.PlasticLookAndFeel\";\r\n                break;\r\n            case 5:\r\n                ThemeSelected = \"com.jgoodies.looks.plastic.PlasticXPLookAndFeel\";\r\n                break;\r\n            case 6:\r\n                ThemeSelected = \"com.jgoodies.looks.windows.WindowsLookAndFeel\";\r\n                break;\r\n            default:\r\n                ThemeSelected = UIManager.getCrossPlatformLookAndFeelClassName();\r\n                break;\r\n        }\r\n        return ThemeSelected;\r\n    }\r\n\r\n    /**\r\n     * @return a LinkedList of ListItem objects with the availales LAF\r\n     */\r\n    public static LinkedList<StringItem> getLAFList() {\r\n        LinkedList<StringItem> retval = new LinkedList<StringItem>();\r\n        retval.add(new StringItem(\"0\", \"Java\"));\r\n        retval.add(new StringItem(\"1\", \"System\"));\r\n        retval.add(new StringItem(\"2\", \"Metal\"));\r\n        retval.add(new StringItem(\"3\", \"Plastic3D\"));\r\n        retval.add(new StringItem(\"4\", \"Plastic\"));\r\n        retval.add(new StringItem(\"5\", \"PlasticXP\"));\r\n        retval.add(new StringItem(\"6\", \"Windows\"));\r\n        return retval;\r\n    }\r\n\r\n    /**\r\n     * @return  LinkedList of ListItem objects with the available Themes form Plastic\r\n     */\r\n    public static LinkedList<StringItem> getThemeList() {\r\n        LinkedList<StringItem> retval = new LinkedList<StringItem>();\r\n        retval.add(new StringItem(\"0\", \"None\"));\r\n        retval.add(new StringItem(\"1\", \"DesertBlue\"));\r\n        retval.add(new StringItem(\"2\", \"DesertRed\"));\r\n        retval.add(new StringItem(\"3\", \"Silver\"));\r\n        retval.add(new StringItem(\"4\", \"SkyPink\"));\r\n        retval.add(new StringItem(\"5\", \"SkyKrupp\"));\r\n        retval.add(new StringItem(\"6\", \"SkyYellow\"));\r\n        retval.add(new StringItem(\"7\", \"SkyGreen\"));\r\n        retval.add(new StringItem(\"8\", \"DarkStar\"));\r\n        retval.add(new StringItem(\"9\", \"BrownSugar\"));\r\n        retval.add(new StringItem(\"10\", \"DesertGreen\"));\r\n        retval.add(new StringItem(\"11\", \"ExperienceBlue\"));\r\n        retval.add(new StringItem(\"12\", \"ExperienceGreen\"));\r\n        retval.add(new StringItem(\"13\", \"SkyBlue\"));\r\n        retval.add(new StringItem(\"14\", \"SkyBluer\"));\r\n        return retval;\r\n    }\r\n\r\n    /**\r\n     * @param lafNumber\r\n     * @return true if the LookAndFeel is Plastic type\r\n     */\r\n    public static boolean isPlastic(int lafNumber) {\r\n        return ((lafNumber >= 3) && (lafNumber <= 5));\r\n    }\r\n\r\n    /**\r\n     * Sets the theme\r\n     * @param themeNumber Theme number\r\n     */\r\n    public static void setTheme(int themeNumber) {\r\n        switch(themeNumber) {\r\n            case 1:\r\n                PlasticLookAndFeel.setPlasticTheme(new DesertBlue());\r\n                break;\r\n            case 2:\r\n                PlasticLookAndFeel.setPlasticTheme(new DesertRed());\r\n                break;\r\n            case 3:\r\n                PlasticLookAndFeel.setPlasticTheme(new Silver());\r\n                break;\r\n            case 4:\r\n                PlasticLookAndFeel.setPlasticTheme(new SkyPink());\r\n                break;\r\n            case 5:\r\n                PlasticLookAndFeel.setPlasticTheme(new SkyKrupp());\r\n                break;\r\n            case 6:\r\n                PlasticLookAndFeel.setPlasticTheme(new SkyYellow());\r\n                break;\r\n            case 7:\r\n                PlasticLookAndFeel.setPlasticTheme(new SkyGreen());\r\n                break;\r\n            case 8:\r\n                PlasticLookAndFeel.setPlasticTheme(new DarkStar());\r\n                break;\r\n            case 9:\r\n                PlasticLookAndFeel.setPlasticTheme(new BrownSugar());\r\n                break;\r\n            case 10:\r\n                PlasticLookAndFeel.setPlasticTheme(new DesertGreen());\r\n                break;\r\n            case 11:\r\n                PlasticLookAndFeel.setPlasticTheme(new ExperienceBlue());\r\n                break;\r\n            case 12:\r\n                PlasticLookAndFeel.setPlasticTheme(new ExperienceGreen());\r\n                break;\r\n            case 13:\r\n                PlasticLookAndFeel.setPlasticTheme(new SkyBlue());\r\n                break;\r\n            case 14:\r\n                PlasticLookAndFeel.setPlasticTheme(new SkyBluer());\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n    }\r\n}\r\n",
		"id": "EvoSuiteBenchmark/109_pdfsam/src/main/java/org/pdfsam/guiclient/utils/ThemeUtilityTest3.java",
		"test_prompt": "// ThemeUtilityTest3.java\npackage org.pdfsam.guiclient.utils;\n\nimport java.util.LinkedList;\nimport javax.swing.UIManager;\nimport org.pdfsam.guiclient.dto.StringItem;\nimport com.jgoodies.looks.plastic.PlasticLookAndFeel;\nimport com.jgoodies.looks.plastic.theme.BrownSugar;\nimport com.jgoodies.looks.plastic.theme.DarkStar;\nimport com.jgoodies.looks.plastic.theme.DesertBlue;\nimport com.jgoodies.looks.plastic.theme.DesertGreen;\nimport com.jgoodies.looks.plastic.theme.DesertRed;\nimport com.jgoodies.looks.plastic.theme.ExperienceBlue;\nimport com.jgoodies.looks.plastic.theme.ExperienceGreen;\nimport com.jgoodies.looks.plastic.theme.Silver;\nimport com.jgoodies.looks.plastic.theme.SkyBlue;\nimport com.jgoodies.looks.plastic.theme.SkyBluer;\nimport com.jgoodies.looks.plastic.theme.SkyGreen;\nimport com.jgoodies.looks.plastic.theme.SkyKrupp;\nimport com.jgoodies.looks.plastic.theme.SkyPink;\nimport com.jgoodies.looks.plastic.theme.SkyYellow;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link ThemeUtility}.\n* It contains ten unit test cases for the {@link ThemeUtility#isPlastic(int)} method.\n*/\nclass ThemeUtilityTest3 {"
	},
	{
		"original_code": "// ImageUtility.java\n/*\n * Created on 17-Jan-2009\n * Copyright (C) 2009 by Andrea Vacondio.\n *\n * This program is free software; you can redistribute it and/or modify it under the terms of the \n * GNU General Public License as published by the Free Software Foundation; \n * either version 2 of the License.\n * This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; \n * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. \n * See the GNU General Public License for more details.\n * You should have received a copy of the GNU General Public License along with this program; \n * if not, write to the Free Software Foundation, Inc., \n *  59 Temple Place, Suite 330, Boston, MA 02111-1307 USA\n */\npackage org.pdfsam.guiclient.utils;\n\nimport java.awt.Graphics2D;\nimport java.awt.Image;\nimport java.awt.RenderingHints;\nimport java.awt.RenderingHints.Key;\nimport java.awt.image.BufferedImage;\nimport java.awt.image.BufferedImageOp;\nimport java.awt.image.ConvolveOp;\nimport java.awt.image.Kernel;\nimport java.awt.image.RenderedImage;\nimport java.awt.image.renderable.ParameterBlock;\nimport java.io.ByteArrayInputStream;\nimport java.io.ByteArrayOutputStream;\nimport java.io.IOException;\nimport java.io.InputStream;\nimport java.util.HashMap;\nimport java.util.Map;\nimport javax.imageio.ImageIO;\nimport javax.media.jai.InterpolationNearest;\nimport javax.media.jai.JAI;\nimport javax.media.jai.PlanarImage;\nimport javax.media.jai.RenderedOp;\nimport javax.media.jai.operator.TransposeDescriptor;\nimport javax.media.jai.operator.TransposeType;\nimport org.apache.log4j.Logger;\nimport org.pdfsam.guiclient.configuration.Configuration;\nimport org.pdfsam.i18n.GettextResource;\n\n/**\n * Image utility\n *\n * @author Andrea Vacondio\n */\npublic class ImageUtility {\n\n    private static final Logger LOG = Logger.getLogger(ImageUtility.class.getPackage().getName());\n\n    private static BufferedImage ERROR_IMAGE = null;\n\n    private static BufferedImage HOURGLASS = null;\n\n    static {\n        System.setProperty(\"com.sun.media.jai.disableMediaLib\", \"true\");\n    }\n\n    /**\n     * @param inputImage\n     * @param degrees\n     * @return rotated image\n     */\n    public static BufferedImage rotateImage(Image inputImage, int degrees) {\n        BufferedImage retVal = null;\n        RenderedImage ri = JAI.create(\"awtImage\", inputImage);\n        ParameterBlock pb = new ParameterBlock();\n        pb.addSource(ri);\n        TransposeType rotOp = null;\n        RenderedOp op = null;\n        if (degrees == 90) {\n            rotOp = TransposeDescriptor.ROTATE_90;\n        } else if (degrees == 180) {\n            rotOp = TransposeDescriptor.ROTATE_180;\n        } else if (degrees == 270) {\n            rotOp = TransposeDescriptor.ROTATE_270;\n        }\n        if (rotOp != null) {\n            // use Transpose operation\n            pb.add(rotOp);\n            op = JAI.create(\"transpose\", pb);\n        } else {\n            // setup \"normal\" rotation\n            pb.add(ri.getWidth() / 2.0f);\n            pb.add(ri.getHeight() / 2.0f);\n            pb.add((float) Math.toRadians(degrees));\n            pb.add(new InterpolationNearest());\n            op = JAI.create(\"Rotate\", pb, null);\n        }\n        PlanarImage myPlanar = op.createInstance();\n        retVal = myPlanar.getAsBufferedImage();\n        return retVal;\n    }\n\n    /**\n     * @return an image displaying an error message\n     */\n    public static BufferedImage getErrorImage() {\n        try {\n            if (ERROR_IMAGE == null) {\n                InputStream is = ImageUtility.class.getResourceAsStream(\"/images/thumbnailerror.png\");\n                BufferedImage img = ImageIO.read(is);\n                is.close();\n                // convert to TYPE_INT_RGB\n                ERROR_IMAGE = new BufferedImage(img.getWidth(), img.getHeight(), BufferedImage.TYPE_INT_RGB);\n                Graphics2D g2d = (Graphics2D) ERROR_IMAGE.getGraphics();\n                g2d.drawImage(img, 0, 0, img.getWidth(), img.getHeight(), null);\n                g2d.dispose();\n            }\n        } catch (IOException e) {\n            LOG.error(GettextResource.gettext(Configuration.getInstance().getI18nResourceBundle(), \"Unable to create error image.\"));\n        }\n        return ERROR_IMAGE;\n    }\n\n    /**\n     * @return am image displaying an hourglass\n     */\n    public static BufferedImage getHourglassImage() {\n        try {\n            if (HOURGLASS == null) {\n                InputStream is = ImageUtility.class.getResourceAsStream(\"/images/hourglass.png\");\n                BufferedImage img = ImageIO.read(is);\n                is.close();\n                // convert to TYPE_INT_RGB\n                HOURGLASS = new BufferedImage(img.getWidth(), img.getHeight(), BufferedImage.TYPE_INT_RGB);\n                Graphics2D g2d = (Graphics2D) HOURGLASS.getGraphics();\n                g2d.drawImage(img, 0, 0, img.getWidth(), img.getHeight(), null);\n                g2d.dispose();\n            }\n        } catch (IOException e) {\n            LOG.error(GettextResource.gettext(Configuration.getInstance().getI18nResourceBundle(), \"Unable to create error image.\"));\n        }\n        return HOURGLASS;\n    }\n\n    /**\n     * @param o\n     * @return a byte[] representing the input image\n     * @throws IOException\n     */\n    public static byte[] toByteArray(BufferedImage o) throws IOException {\n        if (o != null) {\n            BufferedImage image = o;\n            ByteArrayOutputStream baos = new ByteArrayOutputStream(1024);\n            ImageIO.write(image, \"jpeg\", baos);\n            byte[] b = baos.toByteArray();\n            return b;\n        }\n        return new byte[0];\n    }\n\n    /**\n     * @param imagebytes\n     * @return the Buffered image represented by the byte[]\n     * @throws IOException\n     */\n    public static BufferedImage fromByteArray(byte[] imagebytes) throws IOException {\n        BufferedImage retVal = null;\n        if (imagebytes != null && (imagebytes.length > 0)) {\n            retVal = ImageIO.read(new ByteArrayInputStream(imagebytes));\n        }\n        return retVal;\n    }\n\n    /**\n     * @param img\n     *            input image\n     * @param targetWidth\n     * @param targetHeight\n     * @return a scaled image\n     */\n    public static BufferedImage getScaledInstance(BufferedImage img, int targetWidth, int targetHeight) {\n        int type = (img.getTransparency() == java.awt.Transparency.OPAQUE) ? BufferedImage.TYPE_INT_RGB : BufferedImage.TYPE_INT_ARGB;\n        BufferedImage ret = (BufferedImage) img;\n        int w = img.getWidth();\n        int h = img.getHeight();\n        do {\n            if (w > targetWidth) {\n                w /= 2;\n                if (w < targetWidth) {\n                    w = targetWidth;\n                }\n            }\n            if (h > targetHeight) {\n                h /= 2;\n                if (h < targetHeight) {\n                    h = targetHeight;\n                }\n            }\n            BufferedImage tmp = new BufferedImage(w, h, type);\n            Graphics2D g2 = tmp.createGraphics();\n            g2.setRenderingHint(java.awt.RenderingHints.KEY_INTERPOLATION, RenderingHints.VALUE_INTERPOLATION_BILINEAR);\n            g2.setRenderingHint(RenderingHints.KEY_RENDERING, RenderingHints.VALUE_RENDER_QUALITY);\n            g2.setRenderingHint(RenderingHints.KEY_ANTIALIASING, RenderingHints.VALUE_ANTIALIAS_ON);\n            g2.drawImage(ret, 0, 0, w, h, null);\n            g2.dispose();\n            ret = tmp;\n        } while (w != targetWidth || h != targetHeight);\n        return ret;\n    }\n}\n",
		"id": "EvoSuiteBenchmark/109_pdfsam/src/main/java/org/pdfsam/guiclient/utils/ImageUtilityTest0.java",
		"test_prompt": "// ImageUtilityTest0.java\npackage org.pdfsam.guiclient.utils;\n\nimport java.awt.Graphics2D;\nimport java.awt.Image;\nimport java.awt.RenderingHints;\nimport java.awt.RenderingHints.Key;\nimport java.awt.image.BufferedImage;\nimport java.awt.image.BufferedImageOp;\nimport java.awt.image.ConvolveOp;\nimport java.awt.image.Kernel;\nimport java.awt.image.RenderedImage;\nimport java.awt.image.renderable.ParameterBlock;\nimport java.io.ByteArrayInputStream;\nimport java.io.ByteArrayOutputStream;\nimport java.io.IOException;\nimport java.io.InputStream;\nimport java.util.HashMap;\nimport java.util.Map;\nimport javax.imageio.ImageIO;\nimport javax.media.jai.InterpolationNearest;\nimport javax.media.jai.JAI;\nimport javax.media.jai.PlanarImage;\nimport javax.media.jai.RenderedOp;\nimport javax.media.jai.operator.TransposeDescriptor;\nimport javax.media.jai.operator.TransposeType;\nimport org.apache.log4j.Logger;\nimport org.pdfsam.guiclient.configuration.Configuration;\nimport org.pdfsam.i18n.GettextResource;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link ImageUtility}.\n* It contains ten unit test cases for the {@link ImageUtility#rotateImage(Image, int)} method.\n*/\nclass ImageUtilityTest0 {"
	},
	{
		"original_code": "// ImageUtility.java\n/*\n * Created on 17-Jan-2009\n * Copyright (C) 2009 by Andrea Vacondio.\n *\n * This program is free software; you can redistribute it and/or modify it under the terms of the \n * GNU General Public License as published by the Free Software Foundation; \n * either version 2 of the License.\n * This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; \n * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. \n * See the GNU General Public License for more details.\n * You should have received a copy of the GNU General Public License along with this program; \n * if not, write to the Free Software Foundation, Inc., \n *  59 Temple Place, Suite 330, Boston, MA 02111-1307 USA\n */\npackage org.pdfsam.guiclient.utils;\n\nimport java.awt.Graphics2D;\nimport java.awt.Image;\nimport java.awt.RenderingHints;\nimport java.awt.RenderingHints.Key;\nimport java.awt.image.BufferedImage;\nimport java.awt.image.BufferedImageOp;\nimport java.awt.image.ConvolveOp;\nimport java.awt.image.Kernel;\nimport java.awt.image.RenderedImage;\nimport java.awt.image.renderable.ParameterBlock;\nimport java.io.ByteArrayInputStream;\nimport java.io.ByteArrayOutputStream;\nimport java.io.IOException;\nimport java.io.InputStream;\nimport java.util.HashMap;\nimport java.util.Map;\nimport javax.imageio.ImageIO;\nimport javax.media.jai.InterpolationNearest;\nimport javax.media.jai.JAI;\nimport javax.media.jai.PlanarImage;\nimport javax.media.jai.RenderedOp;\nimport javax.media.jai.operator.TransposeDescriptor;\nimport javax.media.jai.operator.TransposeType;\nimport org.apache.log4j.Logger;\nimport org.pdfsam.guiclient.configuration.Configuration;\nimport org.pdfsam.i18n.GettextResource;\n\n/**\n * Image utility\n *\n * @author Andrea Vacondio\n */\npublic class ImageUtility {\n\n    private static final Logger LOG = Logger.getLogger(ImageUtility.class.getPackage().getName());\n\n    private static BufferedImage ERROR_IMAGE = null;\n\n    private static BufferedImage HOURGLASS = null;\n\n    static {\n        System.setProperty(\"com.sun.media.jai.disableMediaLib\", \"true\");\n    }\n\n    /**\n     * @param inputImage\n     * @param degrees\n     * @return rotated image\n     */\n    public static BufferedImage rotateImage(Image inputImage, int degrees) {\n        BufferedImage retVal = null;\n        RenderedImage ri = JAI.create(\"awtImage\", inputImage);\n        ParameterBlock pb = new ParameterBlock();\n        pb.addSource(ri);\n        TransposeType rotOp = null;\n        RenderedOp op = null;\n        if (degrees == 90) {\n            rotOp = TransposeDescriptor.ROTATE_90;\n        } else if (degrees == 180) {\n            rotOp = TransposeDescriptor.ROTATE_180;\n        } else if (degrees == 270) {\n            rotOp = TransposeDescriptor.ROTATE_270;\n        }\n        if (rotOp != null) {\n            // use Transpose operation\n            pb.add(rotOp);\n            op = JAI.create(\"transpose\", pb);\n        } else {\n            // setup \"normal\" rotation\n            pb.add(ri.getWidth() / 2.0f);\n            pb.add(ri.getHeight() / 2.0f);\n            pb.add((float) Math.toRadians(degrees));\n            pb.add(new InterpolationNearest());\n            op = JAI.create(\"Rotate\", pb, null);\n        }\n        PlanarImage myPlanar = op.createInstance();\n        retVal = myPlanar.getAsBufferedImage();\n        return retVal;\n    }\n\n    /**\n     * @return an image displaying an error message\n     */\n    public static BufferedImage getErrorImage() {\n        try {\n            if (ERROR_IMAGE == null) {\n                InputStream is = ImageUtility.class.getResourceAsStream(\"/images/thumbnailerror.png\");\n                BufferedImage img = ImageIO.read(is);\n                is.close();\n                // convert to TYPE_INT_RGB\n                ERROR_IMAGE = new BufferedImage(img.getWidth(), img.getHeight(), BufferedImage.TYPE_INT_RGB);\n                Graphics2D g2d = (Graphics2D) ERROR_IMAGE.getGraphics();\n                g2d.drawImage(img, 0, 0, img.getWidth(), img.getHeight(), null);\n                g2d.dispose();\n            }\n        } catch (IOException e) {\n            LOG.error(GettextResource.gettext(Configuration.getInstance().getI18nResourceBundle(), \"Unable to create error image.\"));\n        }\n        return ERROR_IMAGE;\n    }\n\n    /**\n     * @return am image displaying an hourglass\n     */\n    public static BufferedImage getHourglassImage() {\n        try {\n            if (HOURGLASS == null) {\n                InputStream is = ImageUtility.class.getResourceAsStream(\"/images/hourglass.png\");\n                BufferedImage img = ImageIO.read(is);\n                is.close();\n                // convert to TYPE_INT_RGB\n                HOURGLASS = new BufferedImage(img.getWidth(), img.getHeight(), BufferedImage.TYPE_INT_RGB);\n                Graphics2D g2d = (Graphics2D) HOURGLASS.getGraphics();\n                g2d.drawImage(img, 0, 0, img.getWidth(), img.getHeight(), null);\n                g2d.dispose();\n            }\n        } catch (IOException e) {\n            LOG.error(GettextResource.gettext(Configuration.getInstance().getI18nResourceBundle(), \"Unable to create error image.\"));\n        }\n        return HOURGLASS;\n    }\n\n    /**\n     * @param o\n     * @return a byte[] representing the input image\n     * @throws IOException\n     */\n    public static byte[] toByteArray(BufferedImage o) throws IOException {\n        if (o != null) {\n            BufferedImage image = o;\n            ByteArrayOutputStream baos = new ByteArrayOutputStream(1024);\n            ImageIO.write(image, \"jpeg\", baos);\n            byte[] b = baos.toByteArray();\n            return b;\n        }\n        return new byte[0];\n    }\n\n    /**\n     * @param imagebytes\n     * @return the Buffered image represented by the byte[]\n     * @throws IOException\n     */\n    public static BufferedImage fromByteArray(byte[] imagebytes) throws IOException {\n        BufferedImage retVal = null;\n        if (imagebytes != null && (imagebytes.length > 0)) {\n            retVal = ImageIO.read(new ByteArrayInputStream(imagebytes));\n        }\n        return retVal;\n    }\n\n    /**\n     * @param img\n     *            input image\n     * @param targetWidth\n     * @param targetHeight\n     * @return a scaled image\n     */\n    public static BufferedImage getScaledInstance(BufferedImage img, int targetWidth, int targetHeight) {\n        int type = (img.getTransparency() == java.awt.Transparency.OPAQUE) ? BufferedImage.TYPE_INT_RGB : BufferedImage.TYPE_INT_ARGB;\n        BufferedImage ret = (BufferedImage) img;\n        int w = img.getWidth();\n        int h = img.getHeight();\n        do {\n            if (w > targetWidth) {\n                w /= 2;\n                if (w < targetWidth) {\n                    w = targetWidth;\n                }\n            }\n            if (h > targetHeight) {\n                h /= 2;\n                if (h < targetHeight) {\n                    h = targetHeight;\n                }\n            }\n            BufferedImage tmp = new BufferedImage(w, h, type);\n            Graphics2D g2 = tmp.createGraphics();\n            g2.setRenderingHint(java.awt.RenderingHints.KEY_INTERPOLATION, RenderingHints.VALUE_INTERPOLATION_BILINEAR);\n            g2.setRenderingHint(RenderingHints.KEY_RENDERING, RenderingHints.VALUE_RENDER_QUALITY);\n            g2.setRenderingHint(RenderingHints.KEY_ANTIALIASING, RenderingHints.VALUE_ANTIALIAS_ON);\n            g2.drawImage(ret, 0, 0, w, h, null);\n            g2.dispose();\n            ret = tmp;\n        } while (w != targetWidth || h != targetHeight);\n        return ret;\n    }\n}\n",
		"id": "EvoSuiteBenchmark/109_pdfsam/src/main/java/org/pdfsam/guiclient/utils/ImageUtilityTest1.java",
		"test_prompt": "// ImageUtilityTest1.java\npackage org.pdfsam.guiclient.utils;\n\nimport java.awt.Graphics2D;\nimport java.awt.Image;\nimport java.awt.RenderingHints;\nimport java.awt.RenderingHints.Key;\nimport java.awt.image.BufferedImage;\nimport java.awt.image.BufferedImageOp;\nimport java.awt.image.ConvolveOp;\nimport java.awt.image.Kernel;\nimport java.awt.image.RenderedImage;\nimport java.awt.image.renderable.ParameterBlock;\nimport java.io.ByteArrayInputStream;\nimport java.io.ByteArrayOutputStream;\nimport java.io.IOException;\nimport java.io.InputStream;\nimport java.util.HashMap;\nimport java.util.Map;\nimport javax.imageio.ImageIO;\nimport javax.media.jai.InterpolationNearest;\nimport javax.media.jai.JAI;\nimport javax.media.jai.PlanarImage;\nimport javax.media.jai.RenderedOp;\nimport javax.media.jai.operator.TransposeDescriptor;\nimport javax.media.jai.operator.TransposeType;\nimport org.apache.log4j.Logger;\nimport org.pdfsam.guiclient.configuration.Configuration;\nimport org.pdfsam.i18n.GettextResource;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link ImageUtility}.\n* It contains ten unit test cases for the {@link ImageUtility#getErrorImage()} method.\n*/\nclass ImageUtilityTest1 {"
	},
	{
		"original_code": "// ImageUtility.java\n/*\n * Created on 17-Jan-2009\n * Copyright (C) 2009 by Andrea Vacondio.\n *\n * This program is free software; you can redistribute it and/or modify it under the terms of the \n * GNU General Public License as published by the Free Software Foundation; \n * either version 2 of the License.\n * This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; \n * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. \n * See the GNU General Public License for more details.\n * You should have received a copy of the GNU General Public License along with this program; \n * if not, write to the Free Software Foundation, Inc., \n *  59 Temple Place, Suite 330, Boston, MA 02111-1307 USA\n */\npackage org.pdfsam.guiclient.utils;\n\nimport java.awt.Graphics2D;\nimport java.awt.Image;\nimport java.awt.RenderingHints;\nimport java.awt.RenderingHints.Key;\nimport java.awt.image.BufferedImage;\nimport java.awt.image.BufferedImageOp;\nimport java.awt.image.ConvolveOp;\nimport java.awt.image.Kernel;\nimport java.awt.image.RenderedImage;\nimport java.awt.image.renderable.ParameterBlock;\nimport java.io.ByteArrayInputStream;\nimport java.io.ByteArrayOutputStream;\nimport java.io.IOException;\nimport java.io.InputStream;\nimport java.util.HashMap;\nimport java.util.Map;\nimport javax.imageio.ImageIO;\nimport javax.media.jai.InterpolationNearest;\nimport javax.media.jai.JAI;\nimport javax.media.jai.PlanarImage;\nimport javax.media.jai.RenderedOp;\nimport javax.media.jai.operator.TransposeDescriptor;\nimport javax.media.jai.operator.TransposeType;\nimport org.apache.log4j.Logger;\nimport org.pdfsam.guiclient.configuration.Configuration;\nimport org.pdfsam.i18n.GettextResource;\n\n/**\n * Image utility\n *\n * @author Andrea Vacondio\n */\npublic class ImageUtility {\n\n    private static final Logger LOG = Logger.getLogger(ImageUtility.class.getPackage().getName());\n\n    private static BufferedImage ERROR_IMAGE = null;\n\n    private static BufferedImage HOURGLASS = null;\n\n    static {\n        System.setProperty(\"com.sun.media.jai.disableMediaLib\", \"true\");\n    }\n\n    /**\n     * @param inputImage\n     * @param degrees\n     * @return rotated image\n     */\n    public static BufferedImage rotateImage(Image inputImage, int degrees) {\n        BufferedImage retVal = null;\n        RenderedImage ri = JAI.create(\"awtImage\", inputImage);\n        ParameterBlock pb = new ParameterBlock();\n        pb.addSource(ri);\n        TransposeType rotOp = null;\n        RenderedOp op = null;\n        if (degrees == 90) {\n            rotOp = TransposeDescriptor.ROTATE_90;\n        } else if (degrees == 180) {\n            rotOp = TransposeDescriptor.ROTATE_180;\n        } else if (degrees == 270) {\n            rotOp = TransposeDescriptor.ROTATE_270;\n        }\n        if (rotOp != null) {\n            // use Transpose operation\n            pb.add(rotOp);\n            op = JAI.create(\"transpose\", pb);\n        } else {\n            // setup \"normal\" rotation\n            pb.add(ri.getWidth() / 2.0f);\n            pb.add(ri.getHeight() / 2.0f);\n            pb.add((float) Math.toRadians(degrees));\n            pb.add(new InterpolationNearest());\n            op = JAI.create(\"Rotate\", pb, null);\n        }\n        PlanarImage myPlanar = op.createInstance();\n        retVal = myPlanar.getAsBufferedImage();\n        return retVal;\n    }\n\n    /**\n     * @return an image displaying an error message\n     */\n    public static BufferedImage getErrorImage() {\n        try {\n            if (ERROR_IMAGE == null) {\n                InputStream is = ImageUtility.class.getResourceAsStream(\"/images/thumbnailerror.png\");\n                BufferedImage img = ImageIO.read(is);\n                is.close();\n                // convert to TYPE_INT_RGB\n                ERROR_IMAGE = new BufferedImage(img.getWidth(), img.getHeight(), BufferedImage.TYPE_INT_RGB);\n                Graphics2D g2d = (Graphics2D) ERROR_IMAGE.getGraphics();\n                g2d.drawImage(img, 0, 0, img.getWidth(), img.getHeight(), null);\n                g2d.dispose();\n            }\n        } catch (IOException e) {\n            LOG.error(GettextResource.gettext(Configuration.getInstance().getI18nResourceBundle(), \"Unable to create error image.\"));\n        }\n        return ERROR_IMAGE;\n    }\n\n    /**\n     * @return am image displaying an hourglass\n     */\n    public static BufferedImage getHourglassImage() {\n        try {\n            if (HOURGLASS == null) {\n                InputStream is = ImageUtility.class.getResourceAsStream(\"/images/hourglass.png\");\n                BufferedImage img = ImageIO.read(is);\n                is.close();\n                // convert to TYPE_INT_RGB\n                HOURGLASS = new BufferedImage(img.getWidth(), img.getHeight(), BufferedImage.TYPE_INT_RGB);\n                Graphics2D g2d = (Graphics2D) HOURGLASS.getGraphics();\n                g2d.drawImage(img, 0, 0, img.getWidth(), img.getHeight(), null);\n                g2d.dispose();\n            }\n        } catch (IOException e) {\n            LOG.error(GettextResource.gettext(Configuration.getInstance().getI18nResourceBundle(), \"Unable to create error image.\"));\n        }\n        return HOURGLASS;\n    }\n\n    /**\n     * @param o\n     * @return a byte[] representing the input image\n     * @throws IOException\n     */\n    public static byte[] toByteArray(BufferedImage o) throws IOException {\n        if (o != null) {\n            BufferedImage image = o;\n            ByteArrayOutputStream baos = new ByteArrayOutputStream(1024);\n            ImageIO.write(image, \"jpeg\", baos);\n            byte[] b = baos.toByteArray();\n            return b;\n        }\n        return new byte[0];\n    }\n\n    /**\n     * @param imagebytes\n     * @return the Buffered image represented by the byte[]\n     * @throws IOException\n     */\n    public static BufferedImage fromByteArray(byte[] imagebytes) throws IOException {\n        BufferedImage retVal = null;\n        if (imagebytes != null && (imagebytes.length > 0)) {\n            retVal = ImageIO.read(new ByteArrayInputStream(imagebytes));\n        }\n        return retVal;\n    }\n\n    /**\n     * @param img\n     *            input image\n     * @param targetWidth\n     * @param targetHeight\n     * @return a scaled image\n     */\n    public static BufferedImage getScaledInstance(BufferedImage img, int targetWidth, int targetHeight) {\n        int type = (img.getTransparency() == java.awt.Transparency.OPAQUE) ? BufferedImage.TYPE_INT_RGB : BufferedImage.TYPE_INT_ARGB;\n        BufferedImage ret = (BufferedImage) img;\n        int w = img.getWidth();\n        int h = img.getHeight();\n        do {\n            if (w > targetWidth) {\n                w /= 2;\n                if (w < targetWidth) {\n                    w = targetWidth;\n                }\n            }\n            if (h > targetHeight) {\n                h /= 2;\n                if (h < targetHeight) {\n                    h = targetHeight;\n                }\n            }\n            BufferedImage tmp = new BufferedImage(w, h, type);\n            Graphics2D g2 = tmp.createGraphics();\n            g2.setRenderingHint(java.awt.RenderingHints.KEY_INTERPOLATION, RenderingHints.VALUE_INTERPOLATION_BILINEAR);\n            g2.setRenderingHint(RenderingHints.KEY_RENDERING, RenderingHints.VALUE_RENDER_QUALITY);\n            g2.setRenderingHint(RenderingHints.KEY_ANTIALIASING, RenderingHints.VALUE_ANTIALIAS_ON);\n            g2.drawImage(ret, 0, 0, w, h, null);\n            g2.dispose();\n            ret = tmp;\n        } while (w != targetWidth || h != targetHeight);\n        return ret;\n    }\n}\n",
		"id": "EvoSuiteBenchmark/109_pdfsam/src/main/java/org/pdfsam/guiclient/utils/ImageUtilityTest2.java",
		"test_prompt": "// ImageUtilityTest2.java\npackage org.pdfsam.guiclient.utils;\n\nimport java.awt.Graphics2D;\nimport java.awt.Image;\nimport java.awt.RenderingHints;\nimport java.awt.RenderingHints.Key;\nimport java.awt.image.BufferedImage;\nimport java.awt.image.BufferedImageOp;\nimport java.awt.image.ConvolveOp;\nimport java.awt.image.Kernel;\nimport java.awt.image.RenderedImage;\nimport java.awt.image.renderable.ParameterBlock;\nimport java.io.ByteArrayInputStream;\nimport java.io.ByteArrayOutputStream;\nimport java.io.IOException;\nimport java.io.InputStream;\nimport java.util.HashMap;\nimport java.util.Map;\nimport javax.imageio.ImageIO;\nimport javax.media.jai.InterpolationNearest;\nimport javax.media.jai.JAI;\nimport javax.media.jai.PlanarImage;\nimport javax.media.jai.RenderedOp;\nimport javax.media.jai.operator.TransposeDescriptor;\nimport javax.media.jai.operator.TransposeType;\nimport org.apache.log4j.Logger;\nimport org.pdfsam.guiclient.configuration.Configuration;\nimport org.pdfsam.i18n.GettextResource;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link ImageUtility}.\n* It contains ten unit test cases for the {@link ImageUtility#getHourglassImage()} method.\n*/\nclass ImageUtilityTest2 {"
	},
	{
		"original_code": "// ImageUtility.java\n/*\n * Created on 17-Jan-2009\n * Copyright (C) 2009 by Andrea Vacondio.\n *\n * This program is free software; you can redistribute it and/or modify it under the terms of the \n * GNU General Public License as published by the Free Software Foundation; \n * either version 2 of the License.\n * This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; \n * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. \n * See the GNU General Public License for more details.\n * You should have received a copy of the GNU General Public License along with this program; \n * if not, write to the Free Software Foundation, Inc., \n *  59 Temple Place, Suite 330, Boston, MA 02111-1307 USA\n */\npackage org.pdfsam.guiclient.utils;\n\nimport java.awt.Graphics2D;\nimport java.awt.Image;\nimport java.awt.RenderingHints;\nimport java.awt.RenderingHints.Key;\nimport java.awt.image.BufferedImage;\nimport java.awt.image.BufferedImageOp;\nimport java.awt.image.ConvolveOp;\nimport java.awt.image.Kernel;\nimport java.awt.image.RenderedImage;\nimport java.awt.image.renderable.ParameterBlock;\nimport java.io.ByteArrayInputStream;\nimport java.io.ByteArrayOutputStream;\nimport java.io.IOException;\nimport java.io.InputStream;\nimport java.util.HashMap;\nimport java.util.Map;\nimport javax.imageio.ImageIO;\nimport javax.media.jai.InterpolationNearest;\nimport javax.media.jai.JAI;\nimport javax.media.jai.PlanarImage;\nimport javax.media.jai.RenderedOp;\nimport javax.media.jai.operator.TransposeDescriptor;\nimport javax.media.jai.operator.TransposeType;\nimport org.apache.log4j.Logger;\nimport org.pdfsam.guiclient.configuration.Configuration;\nimport org.pdfsam.i18n.GettextResource;\n\n/**\n * Image utility\n *\n * @author Andrea Vacondio\n */\npublic class ImageUtility {\n\n    private static final Logger LOG = Logger.getLogger(ImageUtility.class.getPackage().getName());\n\n    private static BufferedImage ERROR_IMAGE = null;\n\n    private static BufferedImage HOURGLASS = null;\n\n    static {\n        System.setProperty(\"com.sun.media.jai.disableMediaLib\", \"true\");\n    }\n\n    /**\n     * @param inputImage\n     * @param degrees\n     * @return rotated image\n     */\n    public static BufferedImage rotateImage(Image inputImage, int degrees) {\n        BufferedImage retVal = null;\n        RenderedImage ri = JAI.create(\"awtImage\", inputImage);\n        ParameterBlock pb = new ParameterBlock();\n        pb.addSource(ri);\n        TransposeType rotOp = null;\n        RenderedOp op = null;\n        if (degrees == 90) {\n            rotOp = TransposeDescriptor.ROTATE_90;\n        } else if (degrees == 180) {\n            rotOp = TransposeDescriptor.ROTATE_180;\n        } else if (degrees == 270) {\n            rotOp = TransposeDescriptor.ROTATE_270;\n        }\n        if (rotOp != null) {\n            // use Transpose operation\n            pb.add(rotOp);\n            op = JAI.create(\"transpose\", pb);\n        } else {\n            // setup \"normal\" rotation\n            pb.add(ri.getWidth() / 2.0f);\n            pb.add(ri.getHeight() / 2.0f);\n            pb.add((float) Math.toRadians(degrees));\n            pb.add(new InterpolationNearest());\n            op = JAI.create(\"Rotate\", pb, null);\n        }\n        PlanarImage myPlanar = op.createInstance();\n        retVal = myPlanar.getAsBufferedImage();\n        return retVal;\n    }\n\n    /**\n     * @return an image displaying an error message\n     */\n    public static BufferedImage getErrorImage() {\n        try {\n            if (ERROR_IMAGE == null) {\n                InputStream is = ImageUtility.class.getResourceAsStream(\"/images/thumbnailerror.png\");\n                BufferedImage img = ImageIO.read(is);\n                is.close();\n                // convert to TYPE_INT_RGB\n                ERROR_IMAGE = new BufferedImage(img.getWidth(), img.getHeight(), BufferedImage.TYPE_INT_RGB);\n                Graphics2D g2d = (Graphics2D) ERROR_IMAGE.getGraphics();\n                g2d.drawImage(img, 0, 0, img.getWidth(), img.getHeight(), null);\n                g2d.dispose();\n            }\n        } catch (IOException e) {\n            LOG.error(GettextResource.gettext(Configuration.getInstance().getI18nResourceBundle(), \"Unable to create error image.\"));\n        }\n        return ERROR_IMAGE;\n    }\n\n    /**\n     * @return am image displaying an hourglass\n     */\n    public static BufferedImage getHourglassImage() {\n        try {\n            if (HOURGLASS == null) {\n                InputStream is = ImageUtility.class.getResourceAsStream(\"/images/hourglass.png\");\n                BufferedImage img = ImageIO.read(is);\n                is.close();\n                // convert to TYPE_INT_RGB\n                HOURGLASS = new BufferedImage(img.getWidth(), img.getHeight(), BufferedImage.TYPE_INT_RGB);\n                Graphics2D g2d = (Graphics2D) HOURGLASS.getGraphics();\n                g2d.drawImage(img, 0, 0, img.getWidth(), img.getHeight(), null);\n                g2d.dispose();\n            }\n        } catch (IOException e) {\n            LOG.error(GettextResource.gettext(Configuration.getInstance().getI18nResourceBundle(), \"Unable to create error image.\"));\n        }\n        return HOURGLASS;\n    }\n\n    /**\n     * @param o\n     * @return a byte[] representing the input image\n     * @throws IOException\n     */\n    public static byte[] toByteArray(BufferedImage o) throws IOException {\n        if (o != null) {\n            BufferedImage image = o;\n            ByteArrayOutputStream baos = new ByteArrayOutputStream(1024);\n            ImageIO.write(image, \"jpeg\", baos);\n            byte[] b = baos.toByteArray();\n            return b;\n        }\n        return new byte[0];\n    }\n\n    /**\n     * @param imagebytes\n     * @return the Buffered image represented by the byte[]\n     * @throws IOException\n     */\n    public static BufferedImage fromByteArray(byte[] imagebytes) throws IOException {\n        BufferedImage retVal = null;\n        if (imagebytes != null && (imagebytes.length > 0)) {\n            retVal = ImageIO.read(new ByteArrayInputStream(imagebytes));\n        }\n        return retVal;\n    }\n\n    /**\n     * @param img\n     *            input image\n     * @param targetWidth\n     * @param targetHeight\n     * @return a scaled image\n     */\n    public static BufferedImage getScaledInstance(BufferedImage img, int targetWidth, int targetHeight) {\n        int type = (img.getTransparency() == java.awt.Transparency.OPAQUE) ? BufferedImage.TYPE_INT_RGB : BufferedImage.TYPE_INT_ARGB;\n        BufferedImage ret = (BufferedImage) img;\n        int w = img.getWidth();\n        int h = img.getHeight();\n        do {\n            if (w > targetWidth) {\n                w /= 2;\n                if (w < targetWidth) {\n                    w = targetWidth;\n                }\n            }\n            if (h > targetHeight) {\n                h /= 2;\n                if (h < targetHeight) {\n                    h = targetHeight;\n                }\n            }\n            BufferedImage tmp = new BufferedImage(w, h, type);\n            Graphics2D g2 = tmp.createGraphics();\n            g2.setRenderingHint(java.awt.RenderingHints.KEY_INTERPOLATION, RenderingHints.VALUE_INTERPOLATION_BILINEAR);\n            g2.setRenderingHint(RenderingHints.KEY_RENDERING, RenderingHints.VALUE_RENDER_QUALITY);\n            g2.setRenderingHint(RenderingHints.KEY_ANTIALIASING, RenderingHints.VALUE_ANTIALIAS_ON);\n            g2.drawImage(ret, 0, 0, w, h, null);\n            g2.dispose();\n            ret = tmp;\n        } while (w != targetWidth || h != targetHeight);\n        return ret;\n    }\n}\n",
		"id": "EvoSuiteBenchmark/109_pdfsam/src/main/java/org/pdfsam/guiclient/utils/ImageUtilityTest3.java",
		"test_prompt": "// ImageUtilityTest3.java\npackage org.pdfsam.guiclient.utils;\n\nimport java.awt.Graphics2D;\nimport java.awt.Image;\nimport java.awt.RenderingHints;\nimport java.awt.RenderingHints.Key;\nimport java.awt.image.BufferedImage;\nimport java.awt.image.BufferedImageOp;\nimport java.awt.image.ConvolveOp;\nimport java.awt.image.Kernel;\nimport java.awt.image.RenderedImage;\nimport java.awt.image.renderable.ParameterBlock;\nimport java.io.ByteArrayInputStream;\nimport java.io.ByteArrayOutputStream;\nimport java.io.IOException;\nimport java.io.InputStream;\nimport java.util.HashMap;\nimport java.util.Map;\nimport javax.imageio.ImageIO;\nimport javax.media.jai.InterpolationNearest;\nimport javax.media.jai.JAI;\nimport javax.media.jai.PlanarImage;\nimport javax.media.jai.RenderedOp;\nimport javax.media.jai.operator.TransposeDescriptor;\nimport javax.media.jai.operator.TransposeType;\nimport org.apache.log4j.Logger;\nimport org.pdfsam.guiclient.configuration.Configuration;\nimport org.pdfsam.i18n.GettextResource;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link ImageUtility}.\n* It contains ten unit test cases for the {@link ImageUtility#toByteArray(BufferedImage)} method.\n*/\nclass ImageUtilityTest3 {"
	},
	{
		"original_code": "// ImageUtility.java\n/*\n * Created on 17-Jan-2009\n * Copyright (C) 2009 by Andrea Vacondio.\n *\n * This program is free software; you can redistribute it and/or modify it under the terms of the \n * GNU General Public License as published by the Free Software Foundation; \n * either version 2 of the License.\n * This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; \n * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. \n * See the GNU General Public License for more details.\n * You should have received a copy of the GNU General Public License along with this program; \n * if not, write to the Free Software Foundation, Inc., \n *  59 Temple Place, Suite 330, Boston, MA 02111-1307 USA\n */\npackage org.pdfsam.guiclient.utils;\n\nimport java.awt.Graphics2D;\nimport java.awt.Image;\nimport java.awt.RenderingHints;\nimport java.awt.RenderingHints.Key;\nimport java.awt.image.BufferedImage;\nimport java.awt.image.BufferedImageOp;\nimport java.awt.image.ConvolveOp;\nimport java.awt.image.Kernel;\nimport java.awt.image.RenderedImage;\nimport java.awt.image.renderable.ParameterBlock;\nimport java.io.ByteArrayInputStream;\nimport java.io.ByteArrayOutputStream;\nimport java.io.IOException;\nimport java.io.InputStream;\nimport java.util.HashMap;\nimport java.util.Map;\nimport javax.imageio.ImageIO;\nimport javax.media.jai.InterpolationNearest;\nimport javax.media.jai.JAI;\nimport javax.media.jai.PlanarImage;\nimport javax.media.jai.RenderedOp;\nimport javax.media.jai.operator.TransposeDescriptor;\nimport javax.media.jai.operator.TransposeType;\nimport org.apache.log4j.Logger;\nimport org.pdfsam.guiclient.configuration.Configuration;\nimport org.pdfsam.i18n.GettextResource;\n\n/**\n * Image utility\n *\n * @author Andrea Vacondio\n */\npublic class ImageUtility {\n\n    private static final Logger LOG = Logger.getLogger(ImageUtility.class.getPackage().getName());\n\n    private static BufferedImage ERROR_IMAGE = null;\n\n    private static BufferedImage HOURGLASS = null;\n\n    static {\n        System.setProperty(\"com.sun.media.jai.disableMediaLib\", \"true\");\n    }\n\n    /**\n     * @param inputImage\n     * @param degrees\n     * @return rotated image\n     */\n    public static BufferedImage rotateImage(Image inputImage, int degrees) {\n        BufferedImage retVal = null;\n        RenderedImage ri = JAI.create(\"awtImage\", inputImage);\n        ParameterBlock pb = new ParameterBlock();\n        pb.addSource(ri);\n        TransposeType rotOp = null;\n        RenderedOp op = null;\n        if (degrees == 90) {\n            rotOp = TransposeDescriptor.ROTATE_90;\n        } else if (degrees == 180) {\n            rotOp = TransposeDescriptor.ROTATE_180;\n        } else if (degrees == 270) {\n            rotOp = TransposeDescriptor.ROTATE_270;\n        }\n        if (rotOp != null) {\n            // use Transpose operation\n            pb.add(rotOp);\n            op = JAI.create(\"transpose\", pb);\n        } else {\n            // setup \"normal\" rotation\n            pb.add(ri.getWidth() / 2.0f);\n            pb.add(ri.getHeight() / 2.0f);\n            pb.add((float) Math.toRadians(degrees));\n            pb.add(new InterpolationNearest());\n            op = JAI.create(\"Rotate\", pb, null);\n        }\n        PlanarImage myPlanar = op.createInstance();\n        retVal = myPlanar.getAsBufferedImage();\n        return retVal;\n    }\n\n    /**\n     * @return an image displaying an error message\n     */\n    public static BufferedImage getErrorImage() {\n        try {\n            if (ERROR_IMAGE == null) {\n                InputStream is = ImageUtility.class.getResourceAsStream(\"/images/thumbnailerror.png\");\n                BufferedImage img = ImageIO.read(is);\n                is.close();\n                // convert to TYPE_INT_RGB\n                ERROR_IMAGE = new BufferedImage(img.getWidth(), img.getHeight(), BufferedImage.TYPE_INT_RGB);\n                Graphics2D g2d = (Graphics2D) ERROR_IMAGE.getGraphics();\n                g2d.drawImage(img, 0, 0, img.getWidth(), img.getHeight(), null);\n                g2d.dispose();\n            }\n        } catch (IOException e) {\n            LOG.error(GettextResource.gettext(Configuration.getInstance().getI18nResourceBundle(), \"Unable to create error image.\"));\n        }\n        return ERROR_IMAGE;\n    }\n\n    /**\n     * @return am image displaying an hourglass\n     */\n    public static BufferedImage getHourglassImage() {\n        try {\n            if (HOURGLASS == null) {\n                InputStream is = ImageUtility.class.getResourceAsStream(\"/images/hourglass.png\");\n                BufferedImage img = ImageIO.read(is);\n                is.close();\n                // convert to TYPE_INT_RGB\n                HOURGLASS = new BufferedImage(img.getWidth(), img.getHeight(), BufferedImage.TYPE_INT_RGB);\n                Graphics2D g2d = (Graphics2D) HOURGLASS.getGraphics();\n                g2d.drawImage(img, 0, 0, img.getWidth(), img.getHeight(), null);\n                g2d.dispose();\n            }\n        } catch (IOException e) {\n            LOG.error(GettextResource.gettext(Configuration.getInstance().getI18nResourceBundle(), \"Unable to create error image.\"));\n        }\n        return HOURGLASS;\n    }\n\n    /**\n     * @param o\n     * @return a byte[] representing the input image\n     * @throws IOException\n     */\n    public static byte[] toByteArray(BufferedImage o) throws IOException {\n        if (o != null) {\n            BufferedImage image = o;\n            ByteArrayOutputStream baos = new ByteArrayOutputStream(1024);\n            ImageIO.write(image, \"jpeg\", baos);\n            byte[] b = baos.toByteArray();\n            return b;\n        }\n        return new byte[0];\n    }\n\n    /**\n     * @param imagebytes\n     * @return the Buffered image represented by the byte[]\n     * @throws IOException\n     */\n    public static BufferedImage fromByteArray(byte[] imagebytes) throws IOException {\n        BufferedImage retVal = null;\n        if (imagebytes != null && (imagebytes.length > 0)) {\n            retVal = ImageIO.read(new ByteArrayInputStream(imagebytes));\n        }\n        return retVal;\n    }\n\n    /**\n     * @param img\n     *            input image\n     * @param targetWidth\n     * @param targetHeight\n     * @return a scaled image\n     */\n    public static BufferedImage getScaledInstance(BufferedImage img, int targetWidth, int targetHeight) {\n        int type = (img.getTransparency() == java.awt.Transparency.OPAQUE) ? BufferedImage.TYPE_INT_RGB : BufferedImage.TYPE_INT_ARGB;\n        BufferedImage ret = (BufferedImage) img;\n        int w = img.getWidth();\n        int h = img.getHeight();\n        do {\n            if (w > targetWidth) {\n                w /= 2;\n                if (w < targetWidth) {\n                    w = targetWidth;\n                }\n            }\n            if (h > targetHeight) {\n                h /= 2;\n                if (h < targetHeight) {\n                    h = targetHeight;\n                }\n            }\n            BufferedImage tmp = new BufferedImage(w, h, type);\n            Graphics2D g2 = tmp.createGraphics();\n            g2.setRenderingHint(java.awt.RenderingHints.KEY_INTERPOLATION, RenderingHints.VALUE_INTERPOLATION_BILINEAR);\n            g2.setRenderingHint(RenderingHints.KEY_RENDERING, RenderingHints.VALUE_RENDER_QUALITY);\n            g2.setRenderingHint(RenderingHints.KEY_ANTIALIASING, RenderingHints.VALUE_ANTIALIAS_ON);\n            g2.drawImage(ret, 0, 0, w, h, null);\n            g2.dispose();\n            ret = tmp;\n        } while (w != targetWidth || h != targetHeight);\n        return ret;\n    }\n}\n",
		"id": "EvoSuiteBenchmark/109_pdfsam/src/main/java/org/pdfsam/guiclient/utils/ImageUtilityTest4.java",
		"test_prompt": "// ImageUtilityTest4.java\npackage org.pdfsam.guiclient.utils;\n\nimport java.awt.Graphics2D;\nimport java.awt.Image;\nimport java.awt.RenderingHints;\nimport java.awt.RenderingHints.Key;\nimport java.awt.image.BufferedImage;\nimport java.awt.image.BufferedImageOp;\nimport java.awt.image.ConvolveOp;\nimport java.awt.image.Kernel;\nimport java.awt.image.RenderedImage;\nimport java.awt.image.renderable.ParameterBlock;\nimport java.io.ByteArrayInputStream;\nimport java.io.ByteArrayOutputStream;\nimport java.io.IOException;\nimport java.io.InputStream;\nimport java.util.HashMap;\nimport java.util.Map;\nimport javax.imageio.ImageIO;\nimport javax.media.jai.InterpolationNearest;\nimport javax.media.jai.JAI;\nimport javax.media.jai.PlanarImage;\nimport javax.media.jai.RenderedOp;\nimport javax.media.jai.operator.TransposeDescriptor;\nimport javax.media.jai.operator.TransposeType;\nimport org.apache.log4j.Logger;\nimport org.pdfsam.guiclient.configuration.Configuration;\nimport org.pdfsam.i18n.GettextResource;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link ImageUtility}.\n* It contains ten unit test cases for the {@link ImageUtility#fromByteArray(byte[])} method.\n*/\nclass ImageUtilityTest4 {"
	},
	{
		"original_code": "// ImageUtility.java\n/*\n * Created on 17-Jan-2009\n * Copyright (C) 2009 by Andrea Vacondio.\n *\n * This program is free software; you can redistribute it and/or modify it under the terms of the \n * GNU General Public License as published by the Free Software Foundation; \n * either version 2 of the License.\n * This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; \n * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. \n * See the GNU General Public License for more details.\n * You should have received a copy of the GNU General Public License along with this program; \n * if not, write to the Free Software Foundation, Inc., \n *  59 Temple Place, Suite 330, Boston, MA 02111-1307 USA\n */\npackage org.pdfsam.guiclient.utils;\n\nimport java.awt.Graphics2D;\nimport java.awt.Image;\nimport java.awt.RenderingHints;\nimport java.awt.RenderingHints.Key;\nimport java.awt.image.BufferedImage;\nimport java.awt.image.BufferedImageOp;\nimport java.awt.image.ConvolveOp;\nimport java.awt.image.Kernel;\nimport java.awt.image.RenderedImage;\nimport java.awt.image.renderable.ParameterBlock;\nimport java.io.ByteArrayInputStream;\nimport java.io.ByteArrayOutputStream;\nimport java.io.IOException;\nimport java.io.InputStream;\nimport java.util.HashMap;\nimport java.util.Map;\nimport javax.imageio.ImageIO;\nimport javax.media.jai.InterpolationNearest;\nimport javax.media.jai.JAI;\nimport javax.media.jai.PlanarImage;\nimport javax.media.jai.RenderedOp;\nimport javax.media.jai.operator.TransposeDescriptor;\nimport javax.media.jai.operator.TransposeType;\nimport org.apache.log4j.Logger;\nimport org.pdfsam.guiclient.configuration.Configuration;\nimport org.pdfsam.i18n.GettextResource;\n\n/**\n * Image utility\n *\n * @author Andrea Vacondio\n */\npublic class ImageUtility {\n\n    private static final Logger LOG = Logger.getLogger(ImageUtility.class.getPackage().getName());\n\n    private static BufferedImage ERROR_IMAGE = null;\n\n    private static BufferedImage HOURGLASS = null;\n\n    static {\n        System.setProperty(\"com.sun.media.jai.disableMediaLib\", \"true\");\n    }\n\n    /**\n     * @param inputImage\n     * @param degrees\n     * @return rotated image\n     */\n    public static BufferedImage rotateImage(Image inputImage, int degrees) {\n        BufferedImage retVal = null;\n        RenderedImage ri = JAI.create(\"awtImage\", inputImage);\n        ParameterBlock pb = new ParameterBlock();\n        pb.addSource(ri);\n        TransposeType rotOp = null;\n        RenderedOp op = null;\n        if (degrees == 90) {\n            rotOp = TransposeDescriptor.ROTATE_90;\n        } else if (degrees == 180) {\n            rotOp = TransposeDescriptor.ROTATE_180;\n        } else if (degrees == 270) {\n            rotOp = TransposeDescriptor.ROTATE_270;\n        }\n        if (rotOp != null) {\n            // use Transpose operation\n            pb.add(rotOp);\n            op = JAI.create(\"transpose\", pb);\n        } else {\n            // setup \"normal\" rotation\n            pb.add(ri.getWidth() / 2.0f);\n            pb.add(ri.getHeight() / 2.0f);\n            pb.add((float) Math.toRadians(degrees));\n            pb.add(new InterpolationNearest());\n            op = JAI.create(\"Rotate\", pb, null);\n        }\n        PlanarImage myPlanar = op.createInstance();\n        retVal = myPlanar.getAsBufferedImage();\n        return retVal;\n    }\n\n    /**\n     * @return an image displaying an error message\n     */\n    public static BufferedImage getErrorImage() {\n        try {\n            if (ERROR_IMAGE == null) {\n                InputStream is = ImageUtility.class.getResourceAsStream(\"/images/thumbnailerror.png\");\n                BufferedImage img = ImageIO.read(is);\n                is.close();\n                // convert to TYPE_INT_RGB\n                ERROR_IMAGE = new BufferedImage(img.getWidth(), img.getHeight(), BufferedImage.TYPE_INT_RGB);\n                Graphics2D g2d = (Graphics2D) ERROR_IMAGE.getGraphics();\n                g2d.drawImage(img, 0, 0, img.getWidth(), img.getHeight(), null);\n                g2d.dispose();\n            }\n        } catch (IOException e) {\n            LOG.error(GettextResource.gettext(Configuration.getInstance().getI18nResourceBundle(), \"Unable to create error image.\"));\n        }\n        return ERROR_IMAGE;\n    }\n\n    /**\n     * @return am image displaying an hourglass\n     */\n    public static BufferedImage getHourglassImage() {\n        try {\n            if (HOURGLASS == null) {\n                InputStream is = ImageUtility.class.getResourceAsStream(\"/images/hourglass.png\");\n                BufferedImage img = ImageIO.read(is);\n                is.close();\n                // convert to TYPE_INT_RGB\n                HOURGLASS = new BufferedImage(img.getWidth(), img.getHeight(), BufferedImage.TYPE_INT_RGB);\n                Graphics2D g2d = (Graphics2D) HOURGLASS.getGraphics();\n                g2d.drawImage(img, 0, 0, img.getWidth(), img.getHeight(), null);\n                g2d.dispose();\n            }\n        } catch (IOException e) {\n            LOG.error(GettextResource.gettext(Configuration.getInstance().getI18nResourceBundle(), \"Unable to create error image.\"));\n        }\n        return HOURGLASS;\n    }\n\n    /**\n     * @param o\n     * @return a byte[] representing the input image\n     * @throws IOException\n     */\n    public static byte[] toByteArray(BufferedImage o) throws IOException {\n        if (o != null) {\n            BufferedImage image = o;\n            ByteArrayOutputStream baos = new ByteArrayOutputStream(1024);\n            ImageIO.write(image, \"jpeg\", baos);\n            byte[] b = baos.toByteArray();\n            return b;\n        }\n        return new byte[0];\n    }\n\n    /**\n     * @param imagebytes\n     * @return the Buffered image represented by the byte[]\n     * @throws IOException\n     */\n    public static BufferedImage fromByteArray(byte[] imagebytes) throws IOException {\n        BufferedImage retVal = null;\n        if (imagebytes != null && (imagebytes.length > 0)) {\n            retVal = ImageIO.read(new ByteArrayInputStream(imagebytes));\n        }\n        return retVal;\n    }\n\n    /**\n     * @param img\n     *            input image\n     * @param targetWidth\n     * @param targetHeight\n     * @return a scaled image\n     */\n    public static BufferedImage getScaledInstance(BufferedImage img, int targetWidth, int targetHeight) {\n        int type = (img.getTransparency() == java.awt.Transparency.OPAQUE) ? BufferedImage.TYPE_INT_RGB : BufferedImage.TYPE_INT_ARGB;\n        BufferedImage ret = (BufferedImage) img;\n        int w = img.getWidth();\n        int h = img.getHeight();\n        do {\n            if (w > targetWidth) {\n                w /= 2;\n                if (w < targetWidth) {\n                    w = targetWidth;\n                }\n            }\n            if (h > targetHeight) {\n                h /= 2;\n                if (h < targetHeight) {\n                    h = targetHeight;\n                }\n            }\n            BufferedImage tmp = new BufferedImage(w, h, type);\n            Graphics2D g2 = tmp.createGraphics();\n            g2.setRenderingHint(java.awt.RenderingHints.KEY_INTERPOLATION, RenderingHints.VALUE_INTERPOLATION_BILINEAR);\n            g2.setRenderingHint(RenderingHints.KEY_RENDERING, RenderingHints.VALUE_RENDER_QUALITY);\n            g2.setRenderingHint(RenderingHints.KEY_ANTIALIASING, RenderingHints.VALUE_ANTIALIAS_ON);\n            g2.drawImage(ret, 0, 0, w, h, null);\n            g2.dispose();\n            ret = tmp;\n        } while (w != targetWidth || h != targetHeight);\n        return ret;\n    }\n}\n",
		"id": "EvoSuiteBenchmark/109_pdfsam/src/main/java/org/pdfsam/guiclient/utils/ImageUtilityTest5.java",
		"test_prompt": "// ImageUtilityTest5.java\npackage org.pdfsam.guiclient.utils;\n\nimport java.awt.Graphics2D;\nimport java.awt.Image;\nimport java.awt.RenderingHints;\nimport java.awt.RenderingHints.Key;\nimport java.awt.image.BufferedImage;\nimport java.awt.image.BufferedImageOp;\nimport java.awt.image.ConvolveOp;\nimport java.awt.image.Kernel;\nimport java.awt.image.RenderedImage;\nimport java.awt.image.renderable.ParameterBlock;\nimport java.io.ByteArrayInputStream;\nimport java.io.ByteArrayOutputStream;\nimport java.io.IOException;\nimport java.io.InputStream;\nimport java.util.HashMap;\nimport java.util.Map;\nimport javax.imageio.ImageIO;\nimport javax.media.jai.InterpolationNearest;\nimport javax.media.jai.JAI;\nimport javax.media.jai.PlanarImage;\nimport javax.media.jai.RenderedOp;\nimport javax.media.jai.operator.TransposeDescriptor;\nimport javax.media.jai.operator.TransposeType;\nimport org.apache.log4j.Logger;\nimport org.pdfsam.guiclient.configuration.Configuration;\nimport org.pdfsam.i18n.GettextResource;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link ImageUtility}.\n* It contains ten unit test cases for the {@link ImageUtility#getScaledInstance(BufferedImage, int, int)} method.\n*/\nclass ImageUtilityTest5 {"
	},
	{
		"original_code": "// UpdateManager.java\n/*\r\n * Created on 26-Feb-2008\r\n * Copyright (C) 2008 by Andrea Vacondio.\r\n *\r\n * This program is free software; you can redistribute it and/or modify it under the terms of the \r\n * GNU General Public License as published by the Free Software Foundation; \r\n * either version 2 of the License.\r\n * This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; \r\n * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. \r\n * See the GNU General Public License for more details.\r\n * You should have received a copy of the GNU General Public License along with this program; \r\n * if not, write to the Free Software Foundation, Inc., \r\n *  59 Temple Place, Suite 330, Boston, MA 02111-1307 USA\r\n */\r\npackage org.pdfsam.guiclient.updates;\r\n\r\nimport java.net.URL;\r\nimport org.apache.commons.lang.StringUtils;\r\nimport org.apache.log4j.Logger;\r\nimport org.pdfsam.guiclient.GuiClient;\r\nimport org.pdfsam.guiclient.configuration.Configuration;\r\nimport org.pdfsam.guiclient.updates.checkers.HttpUpdateChecker;\r\nimport org.pdfsam.guiclient.updates.checkers.UpdateChecker;\r\nimport org.pdfsam.i18n.GettextResource;\r\n\r\n/**\r\n * Statefull manager to check for an available new version\r\n *\r\n * @author Andrea Vacondio\r\n */\r\npublic class UpdateManager {\r\n\r\n    private static Logger LOG = Logger.getLogger(UpdateManager.class.getPackage().getName());\r\n\r\n    private UpdateChecker checker = null;\r\n\r\n    private boolean checked = false;\r\n\r\n    private String availableVersion = \"\";\r\n\r\n    /**\r\n     * @param httpUrl\r\n     */\r\n    public UpdateManager(String httpUrl) {\r\n        this.checker = new HttpUpdateChecker(httpUrl);\r\n    }\r\n\r\n    /**\r\n     * @return true if there is an available version and this version is different from the current version\r\n     */\r\n    public boolean isNewVersionAvailable() {\r\n        return StringUtils.isNotBlank(availableVersion) && StringUtils.equalsIgnoreCase(GuiClient.getVersion(), availableVersion);\r\n    }\r\n\r\n    /**\r\n     * @return the availableVersion\r\n     */\r\n    public String getAvailableVersion() {\r\n        return availableVersion;\r\n    }\r\n\r\n    /**\r\n     * Check for a new version available if not already checked.\r\n     *\r\n     * @param forceRecheck\r\n     *            force to recheck for a new version available\r\n     */\r\n    public void checkForNewVersion(boolean forceRecheck) {\r\n        if (forceRecheck) {\r\n            resetStatus();\r\n        }\r\n        if (!checked) {\r\n            LOG.debug(GettextResource.gettext(Configuration.getInstance().getI18nResourceBundle(), \"Checking for a new version available.\"));\r\n            try {\r\n                availableVersion = checker.getLatestVersion();\r\n            } catch (Exception e) {\r\n                LOG.warn(GettextResource.gettext(Configuration.getInstance().getI18nResourceBundle(), \"Error checking for a new version available.\"), e);\r\n            } finally {\r\n                checked = true;\r\n            }\r\n        }\r\n    }\r\n\r\n    private void resetStatus() {\r\n        this.checked = false;\r\n        this.availableVersion = \"\";\r\n    }\r\n\r\n    /**\r\n     * Check for a new version available\r\n     */\r\n    public void checkForNewVersion() {\r\n        checkForNewVersion(true);\r\n    }\r\n}\r\n",
		"id": "EvoSuiteBenchmark/109_pdfsam/src/main/java/org/pdfsam/guiclient/updates/UpdateManagerTest.java",
		"test_prompt": "// UpdateManagerTest.java\npackage org.pdfsam.guiclient.updates;\n\nimport java.net.URL;\nimport org.apache.commons.lang.StringUtils;\nimport org.apache.log4j.Logger;\nimport org.pdfsam.guiclient.GuiClient;\nimport org.pdfsam.guiclient.configuration.Configuration;\nimport org.pdfsam.guiclient.updates.checkers.HttpUpdateChecker;\nimport org.pdfsam.guiclient.updates.checkers.UpdateChecker;\nimport org.pdfsam.i18n.GettextResource;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link UpdateManager}.\n* It contains ten unit test cases for the {@link UpdateManager#isNewVersionAvailable()} method.\n*/\nclass UpdateManagerTest {"
	},
	{
		"original_code": "// JStatusPanel.java\n/*\r\n * Created on 19-Dec-2006\r\n * Copyright (C) 2006 by Andrea Vacondio.\r\n *\r\n * This program is free software; you can redistribute it and/or modify it under the terms of the \r\n * GNU General Public License as published by the Free Software Foundation; \r\n * either version 2 of the License.\r\n * This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; \r\n * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. \r\n * See the GNU General Public License for more details.\r\n * You should have received a copy of the GNU General Public License along with this program; \r\n * if not, write to the Free Software Foundation, Inc., \r\n *  59 Temple Place, Suite 330, Boston, MA 02111-1307 USA\r\n */\r\npackage org.pdfsam.guiclient.gui.panels;\r\n\r\nimport java.awt.Component;\r\nimport java.awt.Dimension;\r\nimport java.text.DecimalFormat;\r\nimport java.util.Observable;\r\nimport java.util.Observer;\r\nimport javax.swing.Box;\r\nimport javax.swing.BoxLayout;\r\nimport javax.swing.Icon;\r\nimport javax.swing.ImageIcon;\r\nimport javax.swing.JLabel;\r\nimport javax.swing.JPanel;\r\nimport javax.swing.JProgressBar;\r\nimport javax.swing.JSeparator;\r\nimport javax.swing.SwingUtilities;\r\nimport javax.swing.border.EtchedBorder;\r\nimport javax.swing.border.SoftBevelBorder;\r\nimport org.apache.log4j.Logger;\r\nimport org.pdfsam.console.business.dto.WorkDoneDataModel;\r\nimport org.pdfsam.guiclient.configuration.Configuration;\r\nimport org.pdfsam.i18n.GettextResource;\r\n\r\n/**\r\n * Status bar for the main GUI\r\n *\r\n * @author Andrea Vacondio\r\n * @see javax.swing.JPanel\r\n */\r\npublic class JStatusPanel extends JPanel implements Observer {\r\n\r\n    private static final long serialVersionUID = 4178557129723539075L;\r\n\r\n    private static final Logger log = Logger.getLogger(JStatusPanel.class.getPackage().getName());\r\n\r\n    private final JLabel plugIcon = new JLabel();\r\n\r\n    private final JLabel updatesAvailableIcon = new JLabel();\r\n\r\n    private final JLabel plugDesc = new JLabel();\r\n\r\n    private final JProgressBar progressBar = new JProgressBar();\r\n\r\n    private final Configuration config;\r\n\r\n    private final String updateIconUrl = \"/images/updates_available.png\";\r\n\r\n    public JStatusPanel() {\r\n        this(null, \"\", 1000);\r\n    }\r\n\r\n    public JStatusPanel(Icon icon, String desc) {\r\n        this(icon, desc, 1000);\r\n    }\r\n\r\n    public JStatusPanel(Icon icon, String desc, int maxValue) {\r\n        config = Configuration.getInstance();\r\n        plugIcon.setIcon(icon);\r\n        updatesAvailableIcon.setIcon(new ImageIcon(this.getClass().getResource(updateIconUrl)));\r\n        plugDesc.setText(desc);\r\n        progressBar.setMaximum(maxValue);\r\n        init();\r\n    }\r\n\r\n    /**\r\n     * Sets the panel icon\r\n     * @param icon\r\n     */\r\n    public void setIcon(Icon icon) {\r\n        plugIcon.setIcon(icon);\r\n    }\r\n\r\n    /**\r\n     * sets the panel text\r\n     * @param text\r\n     */\r\n    public void setText(String text) {\r\n        plugDesc.setText(text);\r\n    }\r\n\r\n    /**\r\n     * Delegate to progressBar\r\n     * @param value\r\n     */\r\n    public void setBarIndeterminate(boolean value) {\r\n        progressBar.setIndeterminate(value);\r\n    }\r\n\r\n    /**\r\n     * Delegate to progressBar\r\n     * @param value\r\n     */\r\n    public void setBarValue(int value) {\r\n        progressBar.setValue(value);\r\n    }\r\n\r\n    /**\r\n     * Delegate to progressBar\r\n     * @param value\r\n     */\r\n    public void setMaximum(int value) {\r\n        progressBar.setMaximum(value);\r\n    }\r\n\r\n    /**\r\n     * Delegate to progressBar\r\n     * @param value\r\n     */\r\n    public void setBarString(String value) {\r\n        progressBar.setString(value);\r\n    }\r\n\r\n    /**\r\n     * Delegate to progressBar\r\n     * @param value\r\n     */\r\n    public void setBarStringPainted(boolean value) {\r\n        progressBar.setStringPainted(value);\r\n    }\r\n\r\n    /**\r\n     * Delegate to progressBar\r\n     * @return true if the string is painted\r\n     */\r\n    public boolean isBarStringPainted() {\r\n        return progressBar.isStringPainted();\r\n    }\r\n\r\n    /**\r\n     * Delegate to progressBar\r\n     * @return progressBar value\r\n     */\r\n    public int getBarValue() {\r\n        return progressBar.getValue();\r\n    }\r\n\r\n    /**\r\n     * Delegate to progressBar\r\n     * @return percent completed\r\n     */\r\n    public double getPercentComplete() {\r\n        return progressBar.getPercentComplete();\r\n    }\r\n\r\n    /**\r\n     * Shows the update available icon\r\n     * @param version new available version\r\n     */\r\n    public void setNewAvailableVersion(String version) {\r\n        updatesAvailableIcon.setToolTipText(GettextResource.gettext(Configuration.getInstance().getI18nResourceBundle(), \"New version available: \") + version);\r\n        updatesAvailableIcon.setVisible(true);\r\n    }\r\n\r\n    private void init() {\r\n        setLayout(new BoxLayout(this, BoxLayout.X_AXIS));\r\n        setPreferredSize(new Dimension(600, 24));\r\n        setBorder(new SoftBevelBorder(SoftBevelBorder.LOWERED));\r\n        plugIcon.setMinimumSize(new Dimension(20, 20));\r\n        updatesAvailableIcon.setMinimumSize(new Dimension(20, 20));\r\n        plugDesc.setMinimumSize(new Dimension(100, 20));\r\n        plugDesc.setMaximumSize(new Dimension(Short.MAX_VALUE, Short.MAX_VALUE));\r\n        plugIcon.setAlignmentX(Component.CENTER_ALIGNMENT);\r\n        updatesAvailableIcon.setAlignmentX(Component.CENTER_ALIGNMENT);\r\n        plugDesc.setAlignmentX(Component.LEFT_ALIGNMENT);\r\n        updatesAvailableIcon.setVisible(false);\r\n        progressBar.setBorderPainted(true);\r\n        progressBar.setOrientation(JProgressBar.HORIZONTAL);\r\n        progressBar.setMinimum(0);\r\n        progressBar.setMinimumSize(new Dimension(150, 20));\r\n        progressBar.setPreferredSize(new Dimension(350, 20));\r\n        progressBar.setMaximumSize(new Dimension(350, 20));\r\n        progressBar.setBorder(new EtchedBorder(EtchedBorder.RAISED));\r\n        final JSeparator separator = new JSeparator(JSeparator.VERTICAL);\r\n        separator.setMaximumSize(new Dimension(10, 20));\r\n        add(Box.createRigidArea(new Dimension(5, 0)));\r\n        add(plugIcon);\r\n        add(Box.createRigidArea(new Dimension(5, 0)));\r\n        add(separator);\r\n        add(Box.createRigidArea(new Dimension(5, 0)));\r\n        add(plugDesc);\r\n        add(Box.createHorizontalGlue());\r\n        add(updatesAvailableIcon);\r\n        add(Box.createRigidArea(new Dimension(5, 0)));\r\n        add(progressBar);\r\n    }\r\n\r\n    public void update(Observable o, Object arg) {\r\n        try {\r\n            final WorkDoneDataModel dto = (WorkDoneDataModel) arg;\r\n            Runnable runner = new Runnable() {\r\n\r\n                public void run() {\r\n                    int percentage = dto.getPercentage();\r\n                    if (percentage == WorkDoneDataModel.INDETERMINATE) {\r\n                        setBarIndeterminate(true);\r\n                        setBarStringPainted(false);\r\n                    } else if (percentage == WorkDoneDataModel.MAX_PERGENTAGE) {\r\n                        setBarIndeterminate(false);\r\n                        setBarStringPainted(true);\r\n                        setBarValue(WorkDoneDataModel.MAX_PERGENTAGE);\r\n                        setBarString(new DecimalFormat(\"0.# %\").format(getPercentComplete()));\r\n                        if (config.isPlaySounds()) {\r\n                            try {\r\n                                //TODO play sound\r\n                            } catch (Exception ex) {\r\n                                log.error(GettextResource.gettext(config.getI18nResourceBundle(), \"Unable to play sound.\"));\r\n                            }\r\n                        }\r\n                    } else {\r\n                        setBarValue(percentage);\r\n                        setBarStringPainted(true);\r\n                        setBarString(new DecimalFormat(\"0.# %\").format(getPercentComplete()));\r\n                    }\r\n                }\r\n            };\r\n            SwingUtilities.invokeLater(runner);\r\n        } catch (Exception e) {\r\n            if (config.isPlaySounds()) {\r\n                try {\r\n                    //TODO play error sound\r\n                } catch (Exception ex) {\r\n                    log.error(GettextResource.gettext(config.getI18nResourceBundle(), \"Unable to play sound.\"));\r\n                }\r\n            }\r\n            log.error(GettextResource.gettext(config.getI18nResourceBundle(), \"Error: \"), e);\r\n        }\r\n    }\r\n}\r\n",
		"id": "EvoSuiteBenchmark/109_pdfsam/src/main/java/org/pdfsam/guiclient/gui/panels/JStatusPanelTest.java",
		"test_prompt": "// JStatusPanelTest.java\npackage org.pdfsam.guiclient.gui.panels;\n\nimport java.awt.Component;\nimport java.awt.Dimension;\nimport java.text.DecimalFormat;\nimport java.util.Observable;\nimport java.util.Observer;\nimport javax.swing.Box;\nimport javax.swing.BoxLayout;\nimport javax.swing.Icon;\nimport javax.swing.ImageIcon;\nimport javax.swing.JLabel;\nimport javax.swing.JPanel;\nimport javax.swing.JProgressBar;\nimport javax.swing.JSeparator;\nimport javax.swing.SwingUtilities;\nimport javax.swing.border.EtchedBorder;\nimport javax.swing.border.SoftBevelBorder;\nimport org.apache.log4j.Logger;\nimport org.pdfsam.console.business.dto.WorkDoneDataModel;\nimport org.pdfsam.guiclient.configuration.Configuration;\nimport org.pdfsam.i18n.GettextResource;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link JStatusPanel}.\n* It contains ten unit test cases for the {@link JStatusPanel#isBarStringPainted()} method.\n*/\nclass JStatusPanelTest {"
	},
	{
		"original_code": "// ExceptionMessageProvider.java\n/*\r\n * Created on 19-June-2006\r\n * Copyright (C) 2007 by Andrea Vacondio.\r\n *\r\n * This library is provided under dual licenses.\r\n * You may choose the terms of the Lesser General Public License version 2.1 or the General Public License version 2\r\n * License at your discretion.\r\n * \r\n * \r\n * This library is free software; you can redistribute it and/or\r\n * modify it under the terms of the GNU Lesser General Public\r\n * License as published by the Free Software Foundation;\r\n * version 2.1 of the License.\r\n * \r\n * This library is distributed in the hope that it will be useful,\r\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\r\n * Lesser General Public License for more details.\r\n * \r\n * You should have received a copy of the GNU Lesser General Public\r\n * License along with this library; if not, write to the Free Software\r\n * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA\r\n * \r\n * \r\n * \r\n * This program is free software; you can redistribute it and/or modify it under the terms of the \r\n * GNU General Public License as published by the Free Software Foundation; \r\n * either version 2 of the License.\r\n * \r\n * This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; \r\n * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. \r\n * See the GNU General Public License for more details.\r\n * You should have received a copy of the GNU General Public License along with this program; \r\n * if not, write to the Free Software Foundation, Inc., \r\n *  59 Temple Place, Suite 330, Boston, MA 02111-1307 USA\r\n */\r\npackage org.pdfsam.emp4j.providers;\r\n\r\nimport java.io.File;\r\nimport java.io.Serializable;\r\nimport java.lang.reflect.Constructor;\r\nimport java.net.URL;\r\nimport org.apache.log4j.Logger;\r\nimport org.dom4j.Document;\r\nimport org.dom4j.Node;\r\nimport org.dom4j.io.SAXReader;\r\nimport org.pdfsam.emp4j.messages.interfaces.InquirableMessagesSource;\r\n\r\n/**\r\n * Exception messages provider. Singleton.\r\n * @author a.vacondio\r\n */\r\npublic class ExceptionMessageProvider implements Serializable {\r\n\r\n    private static final long serialVersionUID = -3579371571520612008L;\r\n\r\n    public static final String CONFIGURATION_PATH_PARAM = \"emp4j.configuration\";\r\n\r\n    public static final String CONFIGURATION_PATH_DEFAULT = \"emp4j.xml\";\r\n\r\n    private static ExceptionMessageProvider providerInstance;\r\n\r\n    private InquirableMessagesSource source;\r\n\r\n    private static boolean errorOnCreate = false;\r\n\r\n    /**\r\n     * logger\r\n     */\r\n    private static transient Logger log;\r\n\r\n    private ExceptionMessageProvider() throws Exception {\r\n        Document document = getConfiguration();\r\n        Node classNode = document.selectSingleNode(\"/exception-message-provider/source/@class\");\r\n        if (classNode != null) {\r\n            Class fileSourceClass = Class.forName(classNode.getText());\r\n            Node sourceNode = document.selectSingleNode(\"/exception-message-provider/source\");\r\n            Constructor constructor = fileSourceClass.getConstructor(new Class[] { Node.class });\r\n            source = (InquirableMessagesSource) constructor.newInstance(new Object[] { sourceNode });\r\n        } else {\r\n            throw new Exception(\"Unable to find MessagesSource class name\");\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @return the ExceptionMessageProvider instance\r\n     */\r\n    public static synchronized ExceptionMessageProvider getInstance() throws Exception {\r\n        try {\r\n            if (providerInstance == null) {\r\n                if (!ExceptionMessageProvider.errorOnCreate) {\r\n                    providerInstance = new ExceptionMessageProvider();\r\n                }\r\n            }\r\n        } catch (Throwable t) {\r\n            ExceptionMessageProvider.errorOnCreate = true;\r\n            getLog().fatal(\"Error creating instance of ExceptionMessageProvider.\", t);\r\n        }\r\n        return providerInstance;\r\n    }\r\n\r\n    /**\r\n     * This method tries to get the Document containing the ExceptionMessageProvider configuration.\r\n     * It gets the value of the property emp4j.configuration assigning it the default value 'emp4j.xml' if the property is empty.\r\n     * First it tries using the value of emp4j.configuration as an absolute path.\r\n     * Second it tries using the value of emp4j.configuration Resource name or a SystemResource name.\r\n     * @return the Document object\r\n     * @throws Exception\r\n     */\r\n    private Document getConfiguration() throws Exception {\r\n        Document retVal;\r\n        SAXReader reader = new SAXReader();\r\n        String configPath = System.getProperty(CONFIGURATION_PATH_PARAM, CONFIGURATION_PATH_DEFAULT);\r\n        File configFile = new File(configPath);\r\n        if (configFile.exists()) {\r\n            retVal = reader.read(configFile);\r\n        } else {\r\n            ClassLoader cl = ExceptionMessageProvider.class.getClassLoader();\r\n            URL resourceUrl = null;\r\n            if (cl != null) {\r\n                resourceUrl = cl.getResource(configPath);\r\n                if (resourceUrl == null) {\r\n                    resourceUrl = cl.getResource(configPath);\r\n                }\r\n            } else {\r\n                resourceUrl = ClassLoader.getSystemResource(configPath);\r\n            }\r\n            if (resourceUrl != null) {\r\n                retVal = reader.read(resourceUrl);\r\n            } else {\r\n                throw new NullPointerException(\"Cannot locate ExceptionMessageProvider configuration file.\");\r\n            }\r\n        }\r\n        return retVal;\r\n    }\r\n\r\n    /**\r\n     * cannot clone a singleton\r\n     */\r\n    public Object clone() throws CloneNotSupportedException {\r\n        throw new CloneNotSupportedException(\"Cannot clone ExceptionMessageProvider object.\");\r\n    }\r\n\r\n    /**\r\n     * @param exceptionTypeKey Exception type code\r\n     * @param exceptionErrorCode Exception error code\r\n     * @return the exception message\r\n     * @throws Exception\r\n     */\r\n    public synchronized String getExceptionMessage(Object exceptionTypeKey, int exceptionErrorCode) throws Exception {\r\n        return source.getExceptionMessage(exceptionTypeKey, exceptionErrorCode);\r\n    }\r\n\r\n    /**\r\n     * @param exceptionTypeKey Exception type code\r\n     * @param exceptionErrorCode Exception error code\r\n     * @param args Strings to be substituted to the message\r\n     * @return the exception message\r\n     * @throws Exception\r\n     */\r\n    public synchronized String getExceptionMessage(Object exceptionTypeKey, int exceptionErrorCode, String[] args) throws Exception {\r\n        return source.getExceptionMessage(exceptionTypeKey, exceptionErrorCode, args);\r\n    }\r\n\r\n    /**\r\n     * @param exceptionTypeKey Exception type code\r\n     * @param exceptionErrorCode Exception error code\r\n     * @return the localized exception message\r\n     * @throws Exception\r\n     */\r\n    public synchronized String getLocalizedExceptionMessage(Object exceptionTypeKey, int exceptionErrorCode) throws Exception {\r\n        return source.getLocalizedExceptionMessage(exceptionTypeKey, exceptionErrorCode);\r\n    }\r\n\r\n    /**\r\n     * @param exceptionTypeKey Exception type code\r\n     * @param exceptionErrorCode Exception error code\r\n     * @param args Strings to be substituted to the message\r\n     * @return the localized exception message\r\n     * @throws Exception\r\n     */\r\n    public synchronized String getLocalizedExceptionMessage(Object exceptionTypeKey, int exceptionErrorCode, String[] args) throws Exception {\r\n        return source.getLocalizedExceptionMessage(exceptionTypeKey, exceptionErrorCode, args);\r\n    }\r\n\r\n    /**\r\n     * @return Logger\r\n     */\r\n    private static Logger getLog() {\r\n        if (log == null) {\r\n            log = Logger.getLogger(ExceptionMessageProvider.class.getPackage().getName());\r\n        }\r\n        return log;\r\n    }\r\n}\r\n",
		"id": "EvoSuiteBenchmark/109_pdfsam/src/main/java/org/pdfsam/emp4j/providers/ExceptionMessageProviderTest0.java",
		"test_prompt": "// ExceptionMessageProviderTest0.java\npackage org.pdfsam.emp4j.providers;\n\nimport java.io.File;\nimport java.io.Serializable;\nimport java.lang.reflect.Constructor;\nimport java.net.URL;\nimport org.apache.log4j.Logger;\nimport org.dom4j.Document;\nimport org.dom4j.Node;\nimport org.dom4j.io.SAXReader;\nimport org.pdfsam.emp4j.messages.interfaces.InquirableMessagesSource;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link ExceptionMessageProvider}.\n* It contains ten unit test cases for the {@link ExceptionMessageProvider#getInstance()} method.\n*/\nclass ExceptionMessageProviderTest0 {"
	},
	{
		"original_code": "// ExceptionMessageProvider.java\n/*\r\n * Created on 19-June-2006\r\n * Copyright (C) 2007 by Andrea Vacondio.\r\n *\r\n * This library is provided under dual licenses.\r\n * You may choose the terms of the Lesser General Public License version 2.1 or the General Public License version 2\r\n * License at your discretion.\r\n * \r\n * \r\n * This library is free software; you can redistribute it and/or\r\n * modify it under the terms of the GNU Lesser General Public\r\n * License as published by the Free Software Foundation;\r\n * version 2.1 of the License.\r\n * \r\n * This library is distributed in the hope that it will be useful,\r\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\r\n * Lesser General Public License for more details.\r\n * \r\n * You should have received a copy of the GNU Lesser General Public\r\n * License along with this library; if not, write to the Free Software\r\n * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA\r\n * \r\n * \r\n * \r\n * This program is free software; you can redistribute it and/or modify it under the terms of the \r\n * GNU General Public License as published by the Free Software Foundation; \r\n * either version 2 of the License.\r\n * \r\n * This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; \r\n * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. \r\n * See the GNU General Public License for more details.\r\n * You should have received a copy of the GNU General Public License along with this program; \r\n * if not, write to the Free Software Foundation, Inc., \r\n *  59 Temple Place, Suite 330, Boston, MA 02111-1307 USA\r\n */\r\npackage org.pdfsam.emp4j.providers;\r\n\r\nimport java.io.File;\r\nimport java.io.Serializable;\r\nimport java.lang.reflect.Constructor;\r\nimport java.net.URL;\r\nimport org.apache.log4j.Logger;\r\nimport org.dom4j.Document;\r\nimport org.dom4j.Node;\r\nimport org.dom4j.io.SAXReader;\r\nimport org.pdfsam.emp4j.messages.interfaces.InquirableMessagesSource;\r\n\r\n/**\r\n * Exception messages provider. Singleton.\r\n * @author a.vacondio\r\n */\r\npublic class ExceptionMessageProvider implements Serializable {\r\n\r\n    private static final long serialVersionUID = -3579371571520612008L;\r\n\r\n    public static final String CONFIGURATION_PATH_PARAM = \"emp4j.configuration\";\r\n\r\n    public static final String CONFIGURATION_PATH_DEFAULT = \"emp4j.xml\";\r\n\r\n    private static ExceptionMessageProvider providerInstance;\r\n\r\n    private InquirableMessagesSource source;\r\n\r\n    private static boolean errorOnCreate = false;\r\n\r\n    /**\r\n     * logger\r\n     */\r\n    private static transient Logger log;\r\n\r\n    private ExceptionMessageProvider() throws Exception {\r\n        Document document = getConfiguration();\r\n        Node classNode = document.selectSingleNode(\"/exception-message-provider/source/@class\");\r\n        if (classNode != null) {\r\n            Class fileSourceClass = Class.forName(classNode.getText());\r\n            Node sourceNode = document.selectSingleNode(\"/exception-message-provider/source\");\r\n            Constructor constructor = fileSourceClass.getConstructor(new Class[] { Node.class });\r\n            source = (InquirableMessagesSource) constructor.newInstance(new Object[] { sourceNode });\r\n        } else {\r\n            throw new Exception(\"Unable to find MessagesSource class name\");\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @return the ExceptionMessageProvider instance\r\n     */\r\n    public static synchronized ExceptionMessageProvider getInstance() throws Exception {\r\n        try {\r\n            if (providerInstance == null) {\r\n                if (!ExceptionMessageProvider.errorOnCreate) {\r\n                    providerInstance = new ExceptionMessageProvider();\r\n                }\r\n            }\r\n        } catch (Throwable t) {\r\n            ExceptionMessageProvider.errorOnCreate = true;\r\n            getLog().fatal(\"Error creating instance of ExceptionMessageProvider.\", t);\r\n        }\r\n        return providerInstance;\r\n    }\r\n\r\n    /**\r\n     * This method tries to get the Document containing the ExceptionMessageProvider configuration.\r\n     * It gets the value of the property emp4j.configuration assigning it the default value 'emp4j.xml' if the property is empty.\r\n     * First it tries using the value of emp4j.configuration as an absolute path.\r\n     * Second it tries using the value of emp4j.configuration Resource name or a SystemResource name.\r\n     * @return the Document object\r\n     * @throws Exception\r\n     */\r\n    private Document getConfiguration() throws Exception {\r\n        Document retVal;\r\n        SAXReader reader = new SAXReader();\r\n        String configPath = System.getProperty(CONFIGURATION_PATH_PARAM, CONFIGURATION_PATH_DEFAULT);\r\n        File configFile = new File(configPath);\r\n        if (configFile.exists()) {\r\n            retVal = reader.read(configFile);\r\n        } else {\r\n            ClassLoader cl = ExceptionMessageProvider.class.getClassLoader();\r\n            URL resourceUrl = null;\r\n            if (cl != null) {\r\n                resourceUrl = cl.getResource(configPath);\r\n                if (resourceUrl == null) {\r\n                    resourceUrl = cl.getResource(configPath);\r\n                }\r\n            } else {\r\n                resourceUrl = ClassLoader.getSystemResource(configPath);\r\n            }\r\n            if (resourceUrl != null) {\r\n                retVal = reader.read(resourceUrl);\r\n            } else {\r\n                throw new NullPointerException(\"Cannot locate ExceptionMessageProvider configuration file.\");\r\n            }\r\n        }\r\n        return retVal;\r\n    }\r\n\r\n    /**\r\n     * cannot clone a singleton\r\n     */\r\n    public Object clone() throws CloneNotSupportedException {\r\n        throw new CloneNotSupportedException(\"Cannot clone ExceptionMessageProvider object.\");\r\n    }\r\n\r\n    /**\r\n     * @param exceptionTypeKey Exception type code\r\n     * @param exceptionErrorCode Exception error code\r\n     * @return the exception message\r\n     * @throws Exception\r\n     */\r\n    public synchronized String getExceptionMessage(Object exceptionTypeKey, int exceptionErrorCode) throws Exception {\r\n        return source.getExceptionMessage(exceptionTypeKey, exceptionErrorCode);\r\n    }\r\n\r\n    /**\r\n     * @param exceptionTypeKey Exception type code\r\n     * @param exceptionErrorCode Exception error code\r\n     * @param args Strings to be substituted to the message\r\n     * @return the exception message\r\n     * @throws Exception\r\n     */\r\n    public synchronized String getExceptionMessage(Object exceptionTypeKey, int exceptionErrorCode, String[] args) throws Exception {\r\n        return source.getExceptionMessage(exceptionTypeKey, exceptionErrorCode, args);\r\n    }\r\n\r\n    /**\r\n     * @param exceptionTypeKey Exception type code\r\n     * @param exceptionErrorCode Exception error code\r\n     * @return the localized exception message\r\n     * @throws Exception\r\n     */\r\n    public synchronized String getLocalizedExceptionMessage(Object exceptionTypeKey, int exceptionErrorCode) throws Exception {\r\n        return source.getLocalizedExceptionMessage(exceptionTypeKey, exceptionErrorCode);\r\n    }\r\n\r\n    /**\r\n     * @param exceptionTypeKey Exception type code\r\n     * @param exceptionErrorCode Exception error code\r\n     * @param args Strings to be substituted to the message\r\n     * @return the localized exception message\r\n     * @throws Exception\r\n     */\r\n    public synchronized String getLocalizedExceptionMessage(Object exceptionTypeKey, int exceptionErrorCode, String[] args) throws Exception {\r\n        return source.getLocalizedExceptionMessage(exceptionTypeKey, exceptionErrorCode, args);\r\n    }\r\n\r\n    /**\r\n     * @return Logger\r\n     */\r\n    private static Logger getLog() {\r\n        if (log == null) {\r\n            log = Logger.getLogger(ExceptionMessageProvider.class.getPackage().getName());\r\n        }\r\n        return log;\r\n    }\r\n}\r\n",
		"id": "EvoSuiteBenchmark/109_pdfsam/src/main/java/org/pdfsam/emp4j/providers/ExceptionMessageProviderTest1.java",
		"test_prompt": "// ExceptionMessageProviderTest1.java\npackage org.pdfsam.emp4j.providers;\n\nimport java.io.File;\nimport java.io.Serializable;\nimport java.lang.reflect.Constructor;\nimport java.net.URL;\nimport org.apache.log4j.Logger;\nimport org.dom4j.Document;\nimport org.dom4j.Node;\nimport org.dom4j.io.SAXReader;\nimport org.pdfsam.emp4j.messages.interfaces.InquirableMessagesSource;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link ExceptionMessageProvider}.\n* It contains ten unit test cases for the {@link ExceptionMessageProvider#clone()} method.\n*/\nclass ExceptionMessageProviderTest1 {"
	},
	{
		"original_code": "// JSplitSizeCombo.java\n/*\r\n * Created on 30-Nov-2007\r\n * Copyright (C) 2007 by Andrea Vacondio.\r\n *\r\n * This program is free software; you can redistribute it and/or modify it under the terms of the \r\n * GNU General Public License as published by the Free Software Foundation; \r\n * either version 2 of the License.\r\n * This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; \r\n * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. \r\n * See the GNU General Public License for more details.\r\n * You should have received a copy of the GNU General Public License along with this program; \r\n * if not, write to the Free Software Foundation, Inc., \r\n *  59 Temple Place, Suite 330, Boston, MA 02111-1307 USA\r\n */\r\npackage org.pdfsam.plugin.split.components;\r\n\r\nimport java.math.BigDecimal;\r\nimport java.util.regex.Matcher;\r\nimport java.util.regex.Pattern;\r\nimport javax.swing.JComboBox;\r\nimport org.pdfsam.guiclient.configuration.Configuration;\r\nimport org.pdfsam.i18n.GettextResource;\r\n\r\n/**\r\n * Combo for the size selection\r\n * @author Andrea Vacondio\r\n */\r\npublic class JSplitSizeCombo extends JComboBox {\r\n\r\n    private static final long serialVersionUID = 1342525636090510279L;\r\n\r\n    private Pattern pattern = Pattern.compile(\"^(\\\\d+[.[0-9]+]*)(\\\\s*)([KB||MB]+)\", Pattern.CASE_INSENSITIVE);\r\n\r\n    public static final String KB = \"KB\";\r\n\r\n    public static final String MB = \"MB\";\r\n\r\n    public JSplitSizeCombo() {\r\n        init();\r\n    }\r\n\r\n    private void init() {\r\n        setEditable(true);\r\n        addItem(\"\");\r\n        addItem(\"500 \" + KB);\r\n        addItem(\"1 \" + MB);\r\n        addItem(\"3 \" + MB);\r\n        addItem(\"5 \" + MB);\r\n        addItem(\"10 \" + MB);\r\n    }\r\n\r\n    /**\r\n     * @return Bytes of the selected item\r\n     * @throws Exception\r\n     */\r\n    public long getSelectedBytes() throws Exception {\r\n        long retVal = 0;\r\n        if (isValidSelectedItem()) {\r\n            Matcher m = pattern.matcher((String) getSelectedItem());\r\n            m.reset();\r\n            m.matches();\r\n            BigDecimal value = new BigDecimal(m.group(1));\r\n            String unit = m.group(3);\r\n            if (KB.equals(unit.toUpperCase())) {\r\n                value = value.multiply(new BigDecimal(1024));\r\n            } else if (MB.equals(unit.toUpperCase())) {\r\n                value = value.multiply(new BigDecimal(1024 * 1024));\r\n            } else {\r\n                throw new Exception(GettextResource.gettext(Configuration.getInstance().getI18nResourceBundle(), \"Invalid unit: \") + unit);\r\n            }\r\n            retVal = value.longValue();\r\n        }\r\n        return retVal;\r\n    }\r\n\r\n    /**\r\n     * @return true if the selected item is valid\r\n     */\r\n    public boolean isValidSelectedItem() {\r\n        pattern.matcher((String) getSelectedItem()).reset();\r\n        return pattern.matcher((String) getSelectedItem()).matches();\r\n    }\r\n\r\n    /**\r\n     * @return if a not empty item is selected\r\n     */\r\n    public boolean isSelectedItem() {\r\n        return (getSelectedItem() != null && ((String) getSelectedItem()).trim().length() > 0);\r\n    }\r\n}\r\n",
		"id": "EvoSuiteBenchmark/109_pdfsam/src/main/java/org/pdfsam/plugin/split/components/JSplitSizeComboTest0.java",
		"test_prompt": "// JSplitSizeComboTest0.java\npackage org.pdfsam.plugin.split.components;\n\nimport java.math.BigDecimal;\nimport java.util.regex.Matcher;\nimport java.util.regex.Pattern;\nimport javax.swing.JComboBox;\nimport org.pdfsam.guiclient.configuration.Configuration;\nimport org.pdfsam.i18n.GettextResource;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link JSplitSizeCombo}.\n* It contains ten unit test cases for the {@link JSplitSizeCombo#isValidSelectedItem()} method.\n*/\nclass JSplitSizeComboTest0 {"
	},
	{
		"original_code": "// JSplitSizeCombo.java\n/*\r\n * Created on 30-Nov-2007\r\n * Copyright (C) 2007 by Andrea Vacondio.\r\n *\r\n * This program is free software; you can redistribute it and/or modify it under the terms of the \r\n * GNU General Public License as published by the Free Software Foundation; \r\n * either version 2 of the License.\r\n * This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; \r\n * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. \r\n * See the GNU General Public License for more details.\r\n * You should have received a copy of the GNU General Public License along with this program; \r\n * if not, write to the Free Software Foundation, Inc., \r\n *  59 Temple Place, Suite 330, Boston, MA 02111-1307 USA\r\n */\r\npackage org.pdfsam.plugin.split.components;\r\n\r\nimport java.math.BigDecimal;\r\nimport java.util.regex.Matcher;\r\nimport java.util.regex.Pattern;\r\nimport javax.swing.JComboBox;\r\nimport org.pdfsam.guiclient.configuration.Configuration;\r\nimport org.pdfsam.i18n.GettextResource;\r\n\r\n/**\r\n * Combo for the size selection\r\n * @author Andrea Vacondio\r\n */\r\npublic class JSplitSizeCombo extends JComboBox {\r\n\r\n    private static final long serialVersionUID = 1342525636090510279L;\r\n\r\n    private Pattern pattern = Pattern.compile(\"^(\\\\d+[.[0-9]+]*)(\\\\s*)([KB||MB]+)\", Pattern.CASE_INSENSITIVE);\r\n\r\n    public static final String KB = \"KB\";\r\n\r\n    public static final String MB = \"MB\";\r\n\r\n    public JSplitSizeCombo() {\r\n        init();\r\n    }\r\n\r\n    private void init() {\r\n        setEditable(true);\r\n        addItem(\"\");\r\n        addItem(\"500 \" + KB);\r\n        addItem(\"1 \" + MB);\r\n        addItem(\"3 \" + MB);\r\n        addItem(\"5 \" + MB);\r\n        addItem(\"10 \" + MB);\r\n    }\r\n\r\n    /**\r\n     * @return Bytes of the selected item\r\n     * @throws Exception\r\n     */\r\n    public long getSelectedBytes() throws Exception {\r\n        long retVal = 0;\r\n        if (isValidSelectedItem()) {\r\n            Matcher m = pattern.matcher((String) getSelectedItem());\r\n            m.reset();\r\n            m.matches();\r\n            BigDecimal value = new BigDecimal(m.group(1));\r\n            String unit = m.group(3);\r\n            if (KB.equals(unit.toUpperCase())) {\r\n                value = value.multiply(new BigDecimal(1024));\r\n            } else if (MB.equals(unit.toUpperCase())) {\r\n                value = value.multiply(new BigDecimal(1024 * 1024));\r\n            } else {\r\n                throw new Exception(GettextResource.gettext(Configuration.getInstance().getI18nResourceBundle(), \"Invalid unit: \") + unit);\r\n            }\r\n            retVal = value.longValue();\r\n        }\r\n        return retVal;\r\n    }\r\n\r\n    /**\r\n     * @return true if the selected item is valid\r\n     */\r\n    public boolean isValidSelectedItem() {\r\n        pattern.matcher((String) getSelectedItem()).reset();\r\n        return pattern.matcher((String) getSelectedItem()).matches();\r\n    }\r\n\r\n    /**\r\n     * @return if a not empty item is selected\r\n     */\r\n    public boolean isSelectedItem() {\r\n        return (getSelectedItem() != null && ((String) getSelectedItem()).trim().length() > 0);\r\n    }\r\n}\r\n",
		"id": "EvoSuiteBenchmark/109_pdfsam/src/main/java/org/pdfsam/plugin/split/components/JSplitSizeComboTest1.java",
		"test_prompt": "// JSplitSizeComboTest1.java\npackage org.pdfsam.plugin.split.components;\n\nimport java.math.BigDecimal;\nimport java.util.regex.Matcher;\nimport java.util.regex.Pattern;\nimport javax.swing.JComboBox;\nimport org.pdfsam.guiclient.configuration.Configuration;\nimport org.pdfsam.i18n.GettextResource;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link JSplitSizeCombo}.\n* It contains ten unit test cases for the {@link JSplitSizeCombo#isSelectedItem()} method.\n*/\nclass JSplitSizeComboTest1 {"
	},
	{
		"original_code": "// GettextResource.java\n/* GNU gettext for Java\n * Copyright (C) 2001 Free Software Foundation, Inc.\n *\n * This program is free software; you can redistribute it and/or modify it\n * under the terms of the GNU Library General Public License as published\n * by the Free Software Foundation; either version 2, or (at your option)\n * any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n * Library General Public License for more details.\n *\n * You should have received a copy of the GNU Library General Public\n * License along with this program; if not, write to the Free Software\n * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n * USA.\n */\npackage org.pdfsam.i18n;\n\nimport java.lang.reflect.InvocationTargetException;\nimport java.lang.reflect.Method;\nimport java.lang.reflect.Modifier;\nimport java.util.MissingResourceException;\nimport java.util.ResourceBundle;\n\n/**\n * This class implements the main GNU libintl functions in Java.\n * <P>\n * Using the GNU gettext approach, compiled message catalogs are normal\n * Java ResourceBundle classes and are thus interoperable with standard\n * ResourceBundle based code.\n * <P>\n * The main differences between the Sun ResourceBundle approach and the\n * GNU gettext approach are:\n * <UL>\n *   <LI>In the Sun approach, the keys are abstract textual shortcuts.\n *       In the GNU gettext approach, the keys are the English/ASCII version\n *       of the messages.\n *   <LI>In the Sun approach, the translation files are called\n *       \"<VAR>Resource</VAR>_<VAR>locale</VAR>.properties\" and have non-ASCII\n *       characters encoded in the Java\n *       <CODE>\\</CODE><CODE>u<VAR>nnnn</VAR></CODE> syntax. Very few editors\n *       can natively display international characters in this format. In the\n *       GNU gettext approach, the translation files are called\n *       \"<VAR>Resource</VAR>.<VAR>locale</VAR>.po\"\n *       and are in the encoding the translator has chosen. Many editors\n *       can be used. There are at least three GUI translating tools\n *       (Emacs PO mode, KDE KBabel, GNOME gtranslator).\n *   <LI>In the Sun approach, the function\n *       <CODE>ResourceBundle.getString</CODE> throws a\n *       <CODE>MissingResourceException</CODE> when no translation is found.\n *       In the GNU gettext approach, the <CODE>gettext</CODE> function\n *       returns the (English) message key in that case.\n *   <LI>In the Sun approach, there is no support for plural handling.\n *       Even the most elaborate MessageFormat strings cannot provide decent\n *       plural handling. In the GNU gettext approach, we have the\n *       <CODE>ngettext</CODE> function.\n * </UL>\n * <P>\n * To compile GNU gettext message catalogs into Java ResourceBundle classes,\n * the <CODE>msgfmt</CODE> program can be used.\n *\n * @author Bruno Haible\n */\npublic abstract class GettextResource extends ResourceBundle {\n\n    public static final boolean verbose = false;\n\n    /**\n     * Returns the translation of <VAR>msgid</VAR>.\n     * @param catalog a ResourceBundle\n     * @param msgid the key string to be translated, an ASCII string\n     * @return the translation of <VAR>msgid</VAR>, or <VAR>msgid</VAR> if\n     *         none is found\n     */\n    public static String gettext(ResourceBundle catalog, String msgid) {\n        try {\n            String result = (String) catalog.getObject(msgid);\n            if (result != null)\n                return result;\n        } catch (MissingResourceException e) {\n        }\n        return msgid;\n    }\n\n    /**\n     * Returns the plural form for <VAR>n</VAR> of the translation of\n     * <VAR>msgid</VAR>.\n     * @param catalog a ResourceBundle\n     * @param msgid the key string to be translated, an ASCII string\n     * @param msgid_plural its English plural form\n     * @return the translation of <VAR>msgid</VAR> depending on <VAR>n</VAR>,\n     *         or <VAR>msgid</VAR> or <VAR>msgid_plural</VAR> if none is found\n     */\n    public static String ngettext(ResourceBundle catalog, String msgid, String msgid_plural, long n) {\n        // The reason why we use so many reflective API calls instead of letting\n        // the GNU gettext generated ResourceBundles implement some interface,\n        // is that we want the generated ResourceBundles to be completely\n        // standalone, so that migration from the Sun approach to the GNU gettext\n        // approach (without use of plurals) is as straightforward as possible.\n        //ResourceBundle origCatalog = catalog;\n        do {\n            // Try catalog itself.\n            if (verbose)\n                System.out.println(\"ngettext on \" + catalog);\n            Method handleGetObjectMethod = null;\n            Method getParentMethod = null;\n            try {\n                handleGetObjectMethod = catalog.getClass().getMethod(\"handleGetObject\", new Class[] { java.lang.String.class });\n                getParentMethod = catalog.getClass().getMethod(\"getParent\", new Class[0]);\n            } catch (NoSuchMethodException e) {\n            } catch (SecurityException e) {\n            }\n            if (verbose)\n                System.out.println(\"handleGetObject = \" + (handleGetObjectMethod != null) + \", getParent = \" + (getParentMethod != null));\n            if (handleGetObjectMethod != null && Modifier.isPublic(handleGetObjectMethod.getModifiers()) && getParentMethod != null) {\n                // A GNU gettext created class.\n                Method lookupMethod = null;\n                Method pluralEvalMethod = null;\n                try {\n                    lookupMethod = catalog.getClass().getMethod(\"lookup\", new Class[] { java.lang.String.class });\n                    pluralEvalMethod = catalog.getClass().getMethod(\"pluralEval\", new Class[] { Long.TYPE });\n                } catch (NoSuchMethodException e) {\n                } catch (SecurityException e) {\n                }\n                if (verbose)\n                    System.out.println(\"lookup = \" + (lookupMethod != null) + \", pluralEval = \" + (pluralEvalMethod != null));\n                if (lookupMethod != null && pluralEvalMethod != null) {\n                    // A GNU gettext created class with plural handling.\n                    Object localValue = null;\n                    try {\n                        localValue = lookupMethod.invoke(catalog, new Object[] { msgid });\n                    } catch (IllegalAccessException e) {\n                        e.printStackTrace();\n                    } catch (InvocationTargetException e) {\n                        e.getTargetException().printStackTrace();\n                    }\n                    if (localValue != null) {\n                        if (verbose)\n                            System.out.println(\"localValue = \" + localValue);\n                        if (localValue instanceof String)\n                            // Found the value. It doesn't depend on n in this case.\n                            return (String) localValue;\n                        else {\n                            String[] pluralforms = (String[]) localValue;\n                            long i = 0;\n                            try {\n                                i = ((Long) pluralEvalMethod.invoke(catalog, new Object[] { new Long(n) })).longValue();\n                                if (!(i >= 0 && i < pluralforms.length))\n                                    i = 0;\n                            } catch (IllegalAccessException e) {\n                                e.printStackTrace();\n                            } catch (InvocationTargetException e) {\n                                e.getTargetException().printStackTrace();\n                            }\n                            return pluralforms[(int) i];\n                        }\n                    }\n                } else {\n                    // A GNU gettext created class without plural handling.\n                    Object localValue = null;\n                    try {\n                        localValue = handleGetObjectMethod.invoke(catalog, new Object[] { msgid });\n                    } catch (IllegalAccessException e) {\n                        e.printStackTrace();\n                    } catch (InvocationTargetException e) {\n                        e.getTargetException().printStackTrace();\n                    }\n                    if (localValue != null) {\n                        // Found the value. It doesn't depend on n in this case.\n                        if (verbose)\n                            System.out.println(\"localValue = \" + localValue);\n                        return (String) localValue;\n                    }\n                }\n                Object parentCatalog = catalog;\n                try {\n                    parentCatalog = getParentMethod.invoke(catalog, new Object[0]);\n                } catch (IllegalAccessException e) {\n                    e.printStackTrace();\n                } catch (InvocationTargetException e) {\n                    e.getTargetException().printStackTrace();\n                }\n                if (parentCatalog != catalog)\n                    catalog = (ResourceBundle) parentCatalog;\n                else\n                    break;\n            } else\n                // Not a GNU gettext created class.\n                break;\n        } while (catalog != null);\n        // The end of chain of GNU gettext ResourceBundles is reached.\n        if (catalog != null) {\n            // For a non-GNU ResourceBundle we cannot access 'parent' and\n            // 'handleGetObject', so make a single call to catalog and all\n            // its parent catalogs at once.\n            Object value;\n            try {\n                value = catalog.getObject(msgid);\n            } catch (MissingResourceException e) {\n                value = null;\n            }\n            if (value != null)\n                // Found the value. It doesn't depend on n in this case.\n                return (String) value;\n        }\n        // Default: English strings and Germanic plural rule.\n        return (n != 1 ? msgid_plural : msgid);\n    }\n}\n",
		"id": "EvoSuiteBenchmark/109_pdfsam/src/main/java/org/pdfsam/i18n/GettextResourceTest0.java",
		"test_prompt": "// GettextResourceTest0.java\npackage org.pdfsam.i18n;\n\nimport java.lang.reflect.InvocationTargetException;\nimport java.lang.reflect.Method;\nimport java.lang.reflect.Modifier;\nimport java.util.MissingResourceException;\nimport java.util.ResourceBundle;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link GettextResource}.\n* It contains ten unit test cases for the {@link GettextResource#gettext(ResourceBundle, String)} method.\n*/\nclass GettextResourceTest0 {"
	},
	{
		"original_code": "// GettextResource.java\n/* GNU gettext for Java\n * Copyright (C) 2001 Free Software Foundation, Inc.\n *\n * This program is free software; you can redistribute it and/or modify it\n * under the terms of the GNU Library General Public License as published\n * by the Free Software Foundation; either version 2, or (at your option)\n * any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n * Library General Public License for more details.\n *\n * You should have received a copy of the GNU Library General Public\n * License along with this program; if not, write to the Free Software\n * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n * USA.\n */\npackage org.pdfsam.i18n;\n\nimport java.lang.reflect.InvocationTargetException;\nimport java.lang.reflect.Method;\nimport java.lang.reflect.Modifier;\nimport java.util.MissingResourceException;\nimport java.util.ResourceBundle;\n\n/**\n * This class implements the main GNU libintl functions in Java.\n * <P>\n * Using the GNU gettext approach, compiled message catalogs are normal\n * Java ResourceBundle classes and are thus interoperable with standard\n * ResourceBundle based code.\n * <P>\n * The main differences between the Sun ResourceBundle approach and the\n * GNU gettext approach are:\n * <UL>\n *   <LI>In the Sun approach, the keys are abstract textual shortcuts.\n *       In the GNU gettext approach, the keys are the English/ASCII version\n *       of the messages.\n *   <LI>In the Sun approach, the translation files are called\n *       \"<VAR>Resource</VAR>_<VAR>locale</VAR>.properties\" and have non-ASCII\n *       characters encoded in the Java\n *       <CODE>\\</CODE><CODE>u<VAR>nnnn</VAR></CODE> syntax. Very few editors\n *       can natively display international characters in this format. In the\n *       GNU gettext approach, the translation files are called\n *       \"<VAR>Resource</VAR>.<VAR>locale</VAR>.po\"\n *       and are in the encoding the translator has chosen. Many editors\n *       can be used. There are at least three GUI translating tools\n *       (Emacs PO mode, KDE KBabel, GNOME gtranslator).\n *   <LI>In the Sun approach, the function\n *       <CODE>ResourceBundle.getString</CODE> throws a\n *       <CODE>MissingResourceException</CODE> when no translation is found.\n *       In the GNU gettext approach, the <CODE>gettext</CODE> function\n *       returns the (English) message key in that case.\n *   <LI>In the Sun approach, there is no support for plural handling.\n *       Even the most elaborate MessageFormat strings cannot provide decent\n *       plural handling. In the GNU gettext approach, we have the\n *       <CODE>ngettext</CODE> function.\n * </UL>\n * <P>\n * To compile GNU gettext message catalogs into Java ResourceBundle classes,\n * the <CODE>msgfmt</CODE> program can be used.\n *\n * @author Bruno Haible\n */\npublic abstract class GettextResource extends ResourceBundle {\n\n    public static final boolean verbose = false;\n\n    /**\n     * Returns the translation of <VAR>msgid</VAR>.\n     * @param catalog a ResourceBundle\n     * @param msgid the key string to be translated, an ASCII string\n     * @return the translation of <VAR>msgid</VAR>, or <VAR>msgid</VAR> if\n     *         none is found\n     */\n    public static String gettext(ResourceBundle catalog, String msgid) {\n        try {\n            String result = (String) catalog.getObject(msgid);\n            if (result != null)\n                return result;\n        } catch (MissingResourceException e) {\n        }\n        return msgid;\n    }\n\n    /**\n     * Returns the plural form for <VAR>n</VAR> of the translation of\n     * <VAR>msgid</VAR>.\n     * @param catalog a ResourceBundle\n     * @param msgid the key string to be translated, an ASCII string\n     * @param msgid_plural its English plural form\n     * @return the translation of <VAR>msgid</VAR> depending on <VAR>n</VAR>,\n     *         or <VAR>msgid</VAR> or <VAR>msgid_plural</VAR> if none is found\n     */\n    public static String ngettext(ResourceBundle catalog, String msgid, String msgid_plural, long n) {\n        // The reason why we use so many reflective API calls instead of letting\n        // the GNU gettext generated ResourceBundles implement some interface,\n        // is that we want the generated ResourceBundles to be completely\n        // standalone, so that migration from the Sun approach to the GNU gettext\n        // approach (without use of plurals) is as straightforward as possible.\n        //ResourceBundle origCatalog = catalog;\n        do {\n            // Try catalog itself.\n            if (verbose)\n                System.out.println(\"ngettext on \" + catalog);\n            Method handleGetObjectMethod = null;\n            Method getParentMethod = null;\n            try {\n                handleGetObjectMethod = catalog.getClass().getMethod(\"handleGetObject\", new Class[] { java.lang.String.class });\n                getParentMethod = catalog.getClass().getMethod(\"getParent\", new Class[0]);\n            } catch (NoSuchMethodException e) {\n            } catch (SecurityException e) {\n            }\n            if (verbose)\n                System.out.println(\"handleGetObject = \" + (handleGetObjectMethod != null) + \", getParent = \" + (getParentMethod != null));\n            if (handleGetObjectMethod != null && Modifier.isPublic(handleGetObjectMethod.getModifiers()) && getParentMethod != null) {\n                // A GNU gettext created class.\n                Method lookupMethod = null;\n                Method pluralEvalMethod = null;\n                try {\n                    lookupMethod = catalog.getClass().getMethod(\"lookup\", new Class[] { java.lang.String.class });\n                    pluralEvalMethod = catalog.getClass().getMethod(\"pluralEval\", new Class[] { Long.TYPE });\n                } catch (NoSuchMethodException e) {\n                } catch (SecurityException e) {\n                }\n                if (verbose)\n                    System.out.println(\"lookup = \" + (lookupMethod != null) + \", pluralEval = \" + (pluralEvalMethod != null));\n                if (lookupMethod != null && pluralEvalMethod != null) {\n                    // A GNU gettext created class with plural handling.\n                    Object localValue = null;\n                    try {\n                        localValue = lookupMethod.invoke(catalog, new Object[] { msgid });\n                    } catch (IllegalAccessException e) {\n                        e.printStackTrace();\n                    } catch (InvocationTargetException e) {\n                        e.getTargetException().printStackTrace();\n                    }\n                    if (localValue != null) {\n                        if (verbose)\n                            System.out.println(\"localValue = \" + localValue);\n                        if (localValue instanceof String)\n                            // Found the value. It doesn't depend on n in this case.\n                            return (String) localValue;\n                        else {\n                            String[] pluralforms = (String[]) localValue;\n                            long i = 0;\n                            try {\n                                i = ((Long) pluralEvalMethod.invoke(catalog, new Object[] { new Long(n) })).longValue();\n                                if (!(i >= 0 && i < pluralforms.length))\n                                    i = 0;\n                            } catch (IllegalAccessException e) {\n                                e.printStackTrace();\n                            } catch (InvocationTargetException e) {\n                                e.getTargetException().printStackTrace();\n                            }\n                            return pluralforms[(int) i];\n                        }\n                    }\n                } else {\n                    // A GNU gettext created class without plural handling.\n                    Object localValue = null;\n                    try {\n                        localValue = handleGetObjectMethod.invoke(catalog, new Object[] { msgid });\n                    } catch (IllegalAccessException e) {\n                        e.printStackTrace();\n                    } catch (InvocationTargetException e) {\n                        e.getTargetException().printStackTrace();\n                    }\n                    if (localValue != null) {\n                        // Found the value. It doesn't depend on n in this case.\n                        if (verbose)\n                            System.out.println(\"localValue = \" + localValue);\n                        return (String) localValue;\n                    }\n                }\n                Object parentCatalog = catalog;\n                try {\n                    parentCatalog = getParentMethod.invoke(catalog, new Object[0]);\n                } catch (IllegalAccessException e) {\n                    e.printStackTrace();\n                } catch (InvocationTargetException e) {\n                    e.getTargetException().printStackTrace();\n                }\n                if (parentCatalog != catalog)\n                    catalog = (ResourceBundle) parentCatalog;\n                else\n                    break;\n            } else\n                // Not a GNU gettext created class.\n                break;\n        } while (catalog != null);\n        // The end of chain of GNU gettext ResourceBundles is reached.\n        if (catalog != null) {\n            // For a non-GNU ResourceBundle we cannot access 'parent' and\n            // 'handleGetObject', so make a single call to catalog and all\n            // its parent catalogs at once.\n            Object value;\n            try {\n                value = catalog.getObject(msgid);\n            } catch (MissingResourceException e) {\n                value = null;\n            }\n            if (value != null)\n                // Found the value. It doesn't depend on n in this case.\n                return (String) value;\n        }\n        // Default: English strings and Germanic plural rule.\n        return (n != 1 ? msgid_plural : msgid);\n    }\n}\n",
		"id": "EvoSuiteBenchmark/109_pdfsam/src/main/java/org/pdfsam/i18n/GettextResourceTest1.java",
		"test_prompt": "// GettextResourceTest1.java\npackage org.pdfsam.i18n;\n\nimport java.lang.reflect.InvocationTargetException;\nimport java.lang.reflect.Method;\nimport java.lang.reflect.Modifier;\nimport java.util.MissingResourceException;\nimport java.util.ResourceBundle;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link GettextResource}.\n* It contains ten unit test cases for the {@link GettextResource#ngettext(ResourceBundle, String, String, long)} method.\n*/\nclass GettextResourceTest1 {"
	},
	{
		"original_code": "// Transition.java\n/*\r\n * Created on 08-Mar-2008\r\n * Copyright (C) 2008 by Andrea Vacondio.\r\n *\r\n *\r\n * This library is provided under dual licenses.\r\n * You may choose the terms of the Lesser General Public License version 2.1 or the General Public License version 2\r\n * License at your discretion.\r\n * \r\n * \r\n * This library is free software; you can redistribute it and/or\r\n * modify it under the terms of the GNU Lesser General Public\r\n * License as published by the Free Software Foundation;\r\n * version 2.1 of the License.\r\n * \r\n * This library is distributed in the hope that it will be useful,\r\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\r\n * Lesser General Public License for more details.\r\n * \r\n * You should have received a copy of the GNU Lesser General Public\r\n * License along with this library; if not, write to the Free Software\r\n * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA\r\n * \r\n * \r\n * \r\n * This program is free software; you can redistribute it and/or modify it under the terms of the \r\n * GNU General Public License as published by the Free Software Foundation; \r\n * either version 2 of the License.\r\n * \r\n * This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; \r\n * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. \r\n * See the GNU General Public License for more details.\r\n * You should have received a copy of the GNU General Public License along with this program; \r\n * if not, write to the Free Software Foundation, Inc., \r\n *  59 Temple Place, Suite 330, Boston, MA 02111-1307 USA\r\n */\r\npackage org.pdfsam.console.business.dto;\r\n\r\nimport java.io.Serializable;\r\n\r\n/**\r\n * DTO that maps a transition\r\n * @author Andrea Vacondio\r\n */\r\npublic class Transition implements Serializable {\r\n\r\n    private static final long serialVersionUID = 1064001681041759674L;\r\n\r\n    /**\r\n     *  Out Vertical Split\r\n     */\r\n    public static final String T_SPLITVOUT = \"splitvout\";\r\n\r\n    /**\r\n     *  Out Horizontal Split\r\n     */\r\n    public static final String T_SPLITHOUT = \"splithout\";\r\n\r\n    /**\r\n     *  In Vertical Split\r\n     */\r\n    public static final String T_SPLITVIN = \"splitvin\";\r\n\r\n    /**\r\n     *  In Horizontal Split\r\n     */\r\n    public static final String T_SPLITHIN = \"splithin\";\r\n\r\n    /**\r\n     *  Vertical Blinds\r\n     */\r\n    public static final String T_BLINDV = \"blindv\";\r\n\r\n    /**\r\n     *  Vertical Blinds\r\n     */\r\n    public static final String T_BLINDH = \"blindh\";\r\n\r\n    /**\r\n     *  Inward Box\r\n     */\r\n    public static final String T_INBOX = \"inwardbox\";\r\n\r\n    /**\r\n     *  Outward Box\r\n     */\r\n    public static final String T_OUTBOX = \"outwardbox\";\r\n\r\n    /**\r\n     *  Left-Right Wipe\r\n     */\r\n    public static final String T_LRWIPE = \"wipel2r\";\r\n\r\n    /**\r\n     *  Right-Left Wipe\r\n     */\r\n    public static final String T_RLWIPE = \"wiper2l\";\r\n\r\n    /**\r\n     *  Bottom-Top Wipe\r\n     */\r\n    public static final String T_BTWIPE = \"wipeb2t\";\r\n\r\n    /**\r\n     *  Top-Bottom Wipe\r\n     */\r\n    public static final String T_TBWIPE = \"wipet2b\";\r\n\r\n    /**\r\n     *  Dissolve\r\n     */\r\n    public static final String T_DISSOLVE = \"dissolve\";\r\n\r\n    /**\r\n     *  Left-Right Glitter\r\n     */\r\n    public static final String T_LRGLITTER = \"glitterl2r\";\r\n\r\n    /**\r\n     *  Top-Bottom Glitter\r\n     */\r\n    public static final String T_TBGLITTER = \"glittert2b\";\r\n\r\n    /**\r\n     *  Diagonal Glitter\r\n     */\r\n    public static final String T_DGLITTER = \"glitterd\";\r\n\r\n    public static final int EVERY_PAGE = 0;\r\n\r\n    private int pageNumber = EVERY_PAGE;\r\n\r\n    private int transitionDuration = 1;\r\n\r\n    private String transition = \"\";\r\n\r\n    private int duration = 3;\r\n\r\n    /**\r\n     * @param pageNumber\r\n     * @param transitionDuration\r\n     * @param transition\r\n     * @param duration\r\n     */\r\n    public Transition(int pageNumber, int transitionDuration, String transition, int duration) {\r\n        this.pageNumber = pageNumber;\r\n        this.transitionDuration = transitionDuration;\r\n        this.transition = transition;\r\n        this.duration = duration;\r\n    }\r\n\r\n    public Transition() {\r\n    }\r\n\r\n    /**\r\n     * @return the pageNumber\r\n     */\r\n    public int getPageNumber() {\r\n        return pageNumber;\r\n    }\r\n\r\n    /**\r\n     * @param pageNumber the pageNumber to set\r\n     */\r\n    public void setPageNumber(int pageNumber) {\r\n        this.pageNumber = pageNumber;\r\n    }\r\n\r\n    /**\r\n     * @return the transitionDuration\r\n     */\r\n    public int getTransitionDuration() {\r\n        return transitionDuration;\r\n    }\r\n\r\n    /**\r\n     * @param transitionDuration the transitionDuration to set\r\n     */\r\n    public void setTransitionDuration(int transitionDuration) {\r\n        this.transitionDuration = transitionDuration;\r\n    }\r\n\r\n    /**\r\n     * @return the transition\r\n     */\r\n    public String getTransition() {\r\n        return transition;\r\n    }\r\n\r\n    /**\r\n     * @param transition the transition to set\r\n     */\r\n    public void setTransition(String transition) {\r\n        this.transition = transition;\r\n    }\r\n\r\n    /**\r\n     * @return the duration\r\n     */\r\n    public int getDuration() {\r\n        return duration;\r\n    }\r\n\r\n    /**\r\n     * @param duration the duration to set\r\n     */\r\n    public void setDuration(int duration) {\r\n        this.duration = duration;\r\n    }\r\n\r\n    /* (non-Javadoc)\r\n\t * @see java.lang.Object#hashCode()\r\n\t */\r\n    public int hashCode() {\r\n        final int prime = 31;\r\n        int result = 1;\r\n        result = prime * result + duration;\r\n        result = prime * result + pageNumber;\r\n        result = prime * result + ((transition == null) ? 0 : transition.hashCode());\r\n        result = prime * result + transitionDuration;\r\n        return result;\r\n    }\r\n\r\n    /* (non-Javadoc)\r\n\t * @see java.lang.Object#equals(java.lang.Object)\r\n\t */\r\n    public boolean equals(Object obj) {\r\n        if (this == obj)\r\n            return true;\r\n        if (obj == null)\r\n            return false;\r\n        if (getClass() != obj.getClass())\r\n            return false;\r\n        final Transition other = (Transition) obj;\r\n        if (duration != other.duration)\r\n            return false;\r\n        if (pageNumber != other.pageNumber)\r\n            return false;\r\n        if (transition == null) {\r\n            if (other.transition != null)\r\n                return false;\r\n        } else if (!transition.equals(other.transition))\r\n            return false;\r\n        if (transitionDuration != other.transitionDuration)\r\n            return false;\r\n        return true;\r\n    }\r\n\r\n    public String toString() {\r\n        StringBuffer retVal = new StringBuffer();\r\n        retVal.append(super.toString());\r\n        retVal.append(\"[transition=\" + transition + \"]\");\r\n        retVal.append(\"[duration=\" + duration + \"]\");\r\n        retVal.append(\"[transitionDuration=\" + transitionDuration + \"]\");\r\n        retVal.append(\"[pageNumber=\" + pageNumber + \"]\");\r\n        return retVal.toString();\r\n    }\r\n}\r\n",
		"id": "EvoSuiteBenchmark/109_pdfsam/src/main/java/org/pdfsam/console/business/dto/TransitionTest0.java",
		"test_prompt": "// TransitionTest0.java\npackage org.pdfsam.console.business.dto;\n\nimport java.io.Serializable;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link Transition}.\n* It contains ten unit test cases for the {@link Transition#hashCode()} method.\n*/\nclass TransitionTest0 {"
	},
	{
		"original_code": "// Transition.java\n/*\r\n * Created on 08-Mar-2008\r\n * Copyright (C) 2008 by Andrea Vacondio.\r\n *\r\n *\r\n * This library is provided under dual licenses.\r\n * You may choose the terms of the Lesser General Public License version 2.1 or the General Public License version 2\r\n * License at your discretion.\r\n * \r\n * \r\n * This library is free software; you can redistribute it and/or\r\n * modify it under the terms of the GNU Lesser General Public\r\n * License as published by the Free Software Foundation;\r\n * version 2.1 of the License.\r\n * \r\n * This library is distributed in the hope that it will be useful,\r\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\r\n * Lesser General Public License for more details.\r\n * \r\n * You should have received a copy of the GNU Lesser General Public\r\n * License along with this library; if not, write to the Free Software\r\n * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA\r\n * \r\n * \r\n * \r\n * This program is free software; you can redistribute it and/or modify it under the terms of the \r\n * GNU General Public License as published by the Free Software Foundation; \r\n * either version 2 of the License.\r\n * \r\n * This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; \r\n * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. \r\n * See the GNU General Public License for more details.\r\n * You should have received a copy of the GNU General Public License along with this program; \r\n * if not, write to the Free Software Foundation, Inc., \r\n *  59 Temple Place, Suite 330, Boston, MA 02111-1307 USA\r\n */\r\npackage org.pdfsam.console.business.dto;\r\n\r\nimport java.io.Serializable;\r\n\r\n/**\r\n * DTO that maps a transition\r\n * @author Andrea Vacondio\r\n */\r\npublic class Transition implements Serializable {\r\n\r\n    private static final long serialVersionUID = 1064001681041759674L;\r\n\r\n    /**\r\n     *  Out Vertical Split\r\n     */\r\n    public static final String T_SPLITVOUT = \"splitvout\";\r\n\r\n    /**\r\n     *  Out Horizontal Split\r\n     */\r\n    public static final String T_SPLITHOUT = \"splithout\";\r\n\r\n    /**\r\n     *  In Vertical Split\r\n     */\r\n    public static final String T_SPLITVIN = \"splitvin\";\r\n\r\n    /**\r\n     *  In Horizontal Split\r\n     */\r\n    public static final String T_SPLITHIN = \"splithin\";\r\n\r\n    /**\r\n     *  Vertical Blinds\r\n     */\r\n    public static final String T_BLINDV = \"blindv\";\r\n\r\n    /**\r\n     *  Vertical Blinds\r\n     */\r\n    public static final String T_BLINDH = \"blindh\";\r\n\r\n    /**\r\n     *  Inward Box\r\n     */\r\n    public static final String T_INBOX = \"inwardbox\";\r\n\r\n    /**\r\n     *  Outward Box\r\n     */\r\n    public static final String T_OUTBOX = \"outwardbox\";\r\n\r\n    /**\r\n     *  Left-Right Wipe\r\n     */\r\n    public static final String T_LRWIPE = \"wipel2r\";\r\n\r\n    /**\r\n     *  Right-Left Wipe\r\n     */\r\n    public static final String T_RLWIPE = \"wiper2l\";\r\n\r\n    /**\r\n     *  Bottom-Top Wipe\r\n     */\r\n    public static final String T_BTWIPE = \"wipeb2t\";\r\n\r\n    /**\r\n     *  Top-Bottom Wipe\r\n     */\r\n    public static final String T_TBWIPE = \"wipet2b\";\r\n\r\n    /**\r\n     *  Dissolve\r\n     */\r\n    public static final String T_DISSOLVE = \"dissolve\";\r\n\r\n    /**\r\n     *  Left-Right Glitter\r\n     */\r\n    public static final String T_LRGLITTER = \"glitterl2r\";\r\n\r\n    /**\r\n     *  Top-Bottom Glitter\r\n     */\r\n    public static final String T_TBGLITTER = \"glittert2b\";\r\n\r\n    /**\r\n     *  Diagonal Glitter\r\n     */\r\n    public static final String T_DGLITTER = \"glitterd\";\r\n\r\n    public static final int EVERY_PAGE = 0;\r\n\r\n    private int pageNumber = EVERY_PAGE;\r\n\r\n    private int transitionDuration = 1;\r\n\r\n    private String transition = \"\";\r\n\r\n    private int duration = 3;\r\n\r\n    /**\r\n     * @param pageNumber\r\n     * @param transitionDuration\r\n     * @param transition\r\n     * @param duration\r\n     */\r\n    public Transition(int pageNumber, int transitionDuration, String transition, int duration) {\r\n        this.pageNumber = pageNumber;\r\n        this.transitionDuration = transitionDuration;\r\n        this.transition = transition;\r\n        this.duration = duration;\r\n    }\r\n\r\n    public Transition() {\r\n    }\r\n\r\n    /**\r\n     * @return the pageNumber\r\n     */\r\n    public int getPageNumber() {\r\n        return pageNumber;\r\n    }\r\n\r\n    /**\r\n     * @param pageNumber the pageNumber to set\r\n     */\r\n    public void setPageNumber(int pageNumber) {\r\n        this.pageNumber = pageNumber;\r\n    }\r\n\r\n    /**\r\n     * @return the transitionDuration\r\n     */\r\n    public int getTransitionDuration() {\r\n        return transitionDuration;\r\n    }\r\n\r\n    /**\r\n     * @param transitionDuration the transitionDuration to set\r\n     */\r\n    public void setTransitionDuration(int transitionDuration) {\r\n        this.transitionDuration = transitionDuration;\r\n    }\r\n\r\n    /**\r\n     * @return the transition\r\n     */\r\n    public String getTransition() {\r\n        return transition;\r\n    }\r\n\r\n    /**\r\n     * @param transition the transition to set\r\n     */\r\n    public void setTransition(String transition) {\r\n        this.transition = transition;\r\n    }\r\n\r\n    /**\r\n     * @return the duration\r\n     */\r\n    public int getDuration() {\r\n        return duration;\r\n    }\r\n\r\n    /**\r\n     * @param duration the duration to set\r\n     */\r\n    public void setDuration(int duration) {\r\n        this.duration = duration;\r\n    }\r\n\r\n    /* (non-Javadoc)\r\n\t * @see java.lang.Object#hashCode()\r\n\t */\r\n    public int hashCode() {\r\n        final int prime = 31;\r\n        int result = 1;\r\n        result = prime * result + duration;\r\n        result = prime * result + pageNumber;\r\n        result = prime * result + ((transition == null) ? 0 : transition.hashCode());\r\n        result = prime * result + transitionDuration;\r\n        return result;\r\n    }\r\n\r\n    /* (non-Javadoc)\r\n\t * @see java.lang.Object#equals(java.lang.Object)\r\n\t */\r\n    public boolean equals(Object obj) {\r\n        if (this == obj)\r\n            return true;\r\n        if (obj == null)\r\n            return false;\r\n        if (getClass() != obj.getClass())\r\n            return false;\r\n        final Transition other = (Transition) obj;\r\n        if (duration != other.duration)\r\n            return false;\r\n        if (pageNumber != other.pageNumber)\r\n            return false;\r\n        if (transition == null) {\r\n            if (other.transition != null)\r\n                return false;\r\n        } else if (!transition.equals(other.transition))\r\n            return false;\r\n        if (transitionDuration != other.transitionDuration)\r\n            return false;\r\n        return true;\r\n    }\r\n\r\n    public String toString() {\r\n        StringBuffer retVal = new StringBuffer();\r\n        retVal.append(super.toString());\r\n        retVal.append(\"[transition=\" + transition + \"]\");\r\n        retVal.append(\"[duration=\" + duration + \"]\");\r\n        retVal.append(\"[transitionDuration=\" + transitionDuration + \"]\");\r\n        retVal.append(\"[pageNumber=\" + pageNumber + \"]\");\r\n        return retVal.toString();\r\n    }\r\n}\r\n",
		"id": "EvoSuiteBenchmark/109_pdfsam/src/main/java/org/pdfsam/console/business/dto/TransitionTest1.java",
		"test_prompt": "// TransitionTest1.java\npackage org.pdfsam.console.business.dto;\n\nimport java.io.Serializable;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link Transition}.\n* It contains ten unit test cases for the {@link Transition#equals(Object)} method.\n*/\nclass TransitionTest1 {"
	},
	{
		"original_code": "// PdfFile.java\n/*\r\n * Created on 11-Dec-2007\r\n * Copyright (C) 2007 by Andrea Vacondio.\r\n *\r\n *\r\n * This library is provided under dual licenses.\r\n * You may choose the terms of the Lesser General Public License version 2.1 or the General Public License version 2\r\n * License at your discretion.\r\n * \r\n * \r\n * This library is free software; you can redistribute it and/or\r\n * modify it under the terms of the GNU Lesser General Public\r\n * License as published by the Free Software Foundation;\r\n * version 2.1 of the License.\r\n * \r\n * This library is distributed in the hope that it will be useful,\r\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\r\n * Lesser General Public License for more details.\r\n * \r\n * You should have received a copy of the GNU Lesser General Public\r\n * License along with this library; if not, write to the Free Software\r\n * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA\r\n * \r\n * \r\n * \r\n * This program is free software; you can redistribute it and/or modify it under the terms of the \r\n * GNU General Public License as published by the Free Software Foundation; \r\n * either version 2 of the License.\r\n * \r\n * This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; \r\n * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. \r\n * See the GNU General Public License for more details.\r\n * You should have received a copy of the GNU General Public License along with this program; \r\n * if not, write to the Free Software Foundation, Inc., \r\n *  59 Temple Place, Suite 330, Boston, MA 02111-1307 USA\r\n */\r\npackage org.pdfsam.console.business.dto;\r\n\r\nimport java.io.File;\r\nimport java.io.Serializable;\r\n\r\n/**\r\n * Model of a password protected pdf file\r\n * @author Andrea Vacondio\r\n */\r\npublic class PdfFile implements Serializable {\r\n\r\n    private static final long serialVersionUID = -389852483075260271L;\r\n\r\n    private File file;\r\n\r\n    private String password;\r\n\r\n    public PdfFile() {\r\n    }\r\n\r\n    /**\r\n     * @param file\r\n     * @param password\r\n     */\r\n    public PdfFile(File file, String password) {\r\n        this.file = file;\r\n        this.password = password;\r\n    }\r\n\r\n    /**\r\n     * @param filePath\r\n     * @param password\r\n     */\r\n    public PdfFile(String filePath, String password) {\r\n        this.file = new File(filePath);\r\n        this.password = password;\r\n    }\r\n\r\n    /**\r\n     * @return the file\r\n     */\r\n    public File getFile() {\r\n        return file;\r\n    }\r\n\r\n    /**\r\n     * @param file the file to set\r\n     */\r\n    public void setFile(File file) {\r\n        this.file = file;\r\n    }\r\n\r\n    /**\r\n     * @return the password\r\n     */\r\n    public String getPassword() {\r\n        return password;\r\n    }\r\n\r\n    /**\r\n     * @return the password in bytes or null\r\n     */\r\n    public byte[] getPasswordBytes() {\r\n        return (password != null) ? password.getBytes() : null;\r\n    }\r\n\r\n    /**\r\n     * @param password the password to set\r\n     */\r\n    public void setPassword(String password) {\r\n        this.password = password;\r\n    }\r\n\r\n    /* (non-Javadoc)\r\n\t * @see java.lang.Object#hashCode()\r\n\t */\r\n    public int hashCode() {\r\n        final int prime = 31;\r\n        int result = 1;\r\n        result = prime * result + ((file == null) ? 0 : file.hashCode());\r\n        result = prime * result + ((password == null) ? 0 : password.hashCode());\r\n        return result;\r\n    }\r\n\r\n    /* (non-Javadoc)\r\n\t * @see java.lang.Object#equals(java.lang.Object)\r\n\t */\r\n    public boolean equals(Object obj) {\r\n        if (this == obj)\r\n            return true;\r\n        if (obj == null)\r\n            return false;\r\n        if (getClass() != obj.getClass())\r\n            return false;\r\n        final PdfFile other = (PdfFile) obj;\r\n        if (file == null) {\r\n            if (other.file != null)\r\n                return false;\r\n        } else if (!file.equals(other.file))\r\n            return false;\r\n        if (password == null) {\r\n            if (other.password != null)\r\n                return false;\r\n        } else if (!password.equals(other.password))\r\n            return false;\r\n        return true;\r\n    }\r\n\r\n    public String toString() {\r\n        StringBuffer retVal = new StringBuffer();\r\n        retVal.append(super.toString());\r\n        retVal.append((file == null) ? \"\" : \"[file=\" + file.getAbsolutePath() + \"]\");\r\n        retVal.append(\"[password=\" + password + \"]\");\r\n        return retVal.toString();\r\n    }\r\n}\r\n",
		"id": "EvoSuiteBenchmark/109_pdfsam/src/main/java/org/pdfsam/console/business/dto/PdfFileTest0.java",
		"test_prompt": "// PdfFileTest0.java\npackage org.pdfsam.console.business.dto;\n\nimport java.io.File;\nimport java.io.Serializable;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link PdfFile}.\n* It contains ten unit test cases for the {@link PdfFile#hashCode()} method.\n*/\nclass PdfFileTest0 {"
	},
	{
		"original_code": "// PdfFile.java\n/*\r\n * Created on 11-Dec-2007\r\n * Copyright (C) 2007 by Andrea Vacondio.\r\n *\r\n *\r\n * This library is provided under dual licenses.\r\n * You may choose the terms of the Lesser General Public License version 2.1 or the General Public License version 2\r\n * License at your discretion.\r\n * \r\n * \r\n * This library is free software; you can redistribute it and/or\r\n * modify it under the terms of the GNU Lesser General Public\r\n * License as published by the Free Software Foundation;\r\n * version 2.1 of the License.\r\n * \r\n * This library is distributed in the hope that it will be useful,\r\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\r\n * Lesser General Public License for more details.\r\n * \r\n * You should have received a copy of the GNU Lesser General Public\r\n * License along with this library; if not, write to the Free Software\r\n * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA\r\n * \r\n * \r\n * \r\n * This program is free software; you can redistribute it and/or modify it under the terms of the \r\n * GNU General Public License as published by the Free Software Foundation; \r\n * either version 2 of the License.\r\n * \r\n * This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; \r\n * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. \r\n * See the GNU General Public License for more details.\r\n * You should have received a copy of the GNU General Public License along with this program; \r\n * if not, write to the Free Software Foundation, Inc., \r\n *  59 Temple Place, Suite 330, Boston, MA 02111-1307 USA\r\n */\r\npackage org.pdfsam.console.business.dto;\r\n\r\nimport java.io.File;\r\nimport java.io.Serializable;\r\n\r\n/**\r\n * Model of a password protected pdf file\r\n * @author Andrea Vacondio\r\n */\r\npublic class PdfFile implements Serializable {\r\n\r\n    private static final long serialVersionUID = -389852483075260271L;\r\n\r\n    private File file;\r\n\r\n    private String password;\r\n\r\n    public PdfFile() {\r\n    }\r\n\r\n    /**\r\n     * @param file\r\n     * @param password\r\n     */\r\n    public PdfFile(File file, String password) {\r\n        this.file = file;\r\n        this.password = password;\r\n    }\r\n\r\n    /**\r\n     * @param filePath\r\n     * @param password\r\n     */\r\n    public PdfFile(String filePath, String password) {\r\n        this.file = new File(filePath);\r\n        this.password = password;\r\n    }\r\n\r\n    /**\r\n     * @return the file\r\n     */\r\n    public File getFile() {\r\n        return file;\r\n    }\r\n\r\n    /**\r\n     * @param file the file to set\r\n     */\r\n    public void setFile(File file) {\r\n        this.file = file;\r\n    }\r\n\r\n    /**\r\n     * @return the password\r\n     */\r\n    public String getPassword() {\r\n        return password;\r\n    }\r\n\r\n    /**\r\n     * @return the password in bytes or null\r\n     */\r\n    public byte[] getPasswordBytes() {\r\n        return (password != null) ? password.getBytes() : null;\r\n    }\r\n\r\n    /**\r\n     * @param password the password to set\r\n     */\r\n    public void setPassword(String password) {\r\n        this.password = password;\r\n    }\r\n\r\n    /* (non-Javadoc)\r\n\t * @see java.lang.Object#hashCode()\r\n\t */\r\n    public int hashCode() {\r\n        final int prime = 31;\r\n        int result = 1;\r\n        result = prime * result + ((file == null) ? 0 : file.hashCode());\r\n        result = prime * result + ((password == null) ? 0 : password.hashCode());\r\n        return result;\r\n    }\r\n\r\n    /* (non-Javadoc)\r\n\t * @see java.lang.Object#equals(java.lang.Object)\r\n\t */\r\n    public boolean equals(Object obj) {\r\n        if (this == obj)\r\n            return true;\r\n        if (obj == null)\r\n            return false;\r\n        if (getClass() != obj.getClass())\r\n            return false;\r\n        final PdfFile other = (PdfFile) obj;\r\n        if (file == null) {\r\n            if (other.file != null)\r\n                return false;\r\n        } else if (!file.equals(other.file))\r\n            return false;\r\n        if (password == null) {\r\n            if (other.password != null)\r\n                return false;\r\n        } else if (!password.equals(other.password))\r\n            return false;\r\n        return true;\r\n    }\r\n\r\n    public String toString() {\r\n        StringBuffer retVal = new StringBuffer();\r\n        retVal.append(super.toString());\r\n        retVal.append((file == null) ? \"\" : \"[file=\" + file.getAbsolutePath() + \"]\");\r\n        retVal.append(\"[password=\" + password + \"]\");\r\n        return retVal.toString();\r\n    }\r\n}\r\n",
		"id": "EvoSuiteBenchmark/109_pdfsam/src/main/java/org/pdfsam/console/business/dto/PdfFileTest1.java",
		"test_prompt": "// PdfFileTest1.java\npackage org.pdfsam.console.business.dto;\n\nimport java.io.File;\nimport java.io.Serializable;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link PdfFile}.\n* It contains ten unit test cases for the {@link PdfFile#equals(Object)} method.\n*/\nclass PdfFileTest1 {"
	},
	{
		"original_code": "// Bounds.java\n/*\n * Created on 21-Nov-2009\n * Copyright (C) 2009 by Andrea Vacondio.\n *\n *\n * This library is provided under dual licenses.\n * You may choose the terms of the Lesser General Public License version 2.1 or the General Public License version 2\n * License at your discretion.\n * \n * \n * This library is free software; you can redistribute it and/or\n * modify it under the terms of the GNU Lesser General Public\n * License as published by the Free Software Foundation;\n * version 2.1 of the License.\n * \n * This library is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n * Lesser General Public License for more details.\n * \n * You should have received a copy of the GNU Lesser General Public\n * License along with this library; if not, write to the Free Software\n * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA\n * \n * \n * \n * This program is free software; you can redistribute it and/or modify it under the terms of the \n * GNU General Public License as published by the Free Software Foundation; \n * either version 2 of the License.\n * \n * This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; \n * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. \n * See the GNU General Public License for more details.\n * You should have received a copy of the GNU General Public License along with this program; \n * if not, write to the Free Software Foundation, Inc., \n *  59 Temple Place, Suite 330, Boston, MA 02111-1307 USA\n */\npackage org.pdfsam.console.business.dto;\n\nimport java.io.Serializable;\n\n/**\n * Maps the limit of the concat command, start and end\n * @author Andrea Vacondio\n */\npublic class Bounds implements Serializable {\n\n    private static final long serialVersionUID = 1093984828590806028L;\n\n    private int start;\n\n    private int end;\n\n    public Bounds() {\n    }\n\n    /**\n     * @param start\n     * @param end\n     */\n    public Bounds(int start, int end) {\n        super();\n        this.start = start;\n        this.end = end;\n    }\n\n    /**\n     * @return the start\n     */\n    public int getStart() {\n        return start;\n    }\n\n    /**\n     * @param start\n     *        the start to set\n     */\n    public void setStart(int start) {\n        this.start = start;\n    }\n\n    /**\n     * @return the end\n     */\n    public int getEnd() {\n        return end;\n    }\n\n    /**\n     * @param end\n     *        the end to set\n     */\n    public void setEnd(int end) {\n        this.end = end;\n    }\n\n    public String toString() {\n        return start + \"-\" + end;\n    }\n\n    /**\n     * @param bounds\n     * @return true if the input bounds intersects this Bounds instance\n     */\n    public boolean intersects(Bounds bounds) {\n        return ((bounds.getStart() >= start && bounds.getStart() <= end) || (bounds.getEnd() >= start && bounds.getEnd() <= end));\n    }\n}\n",
		"id": "EvoSuiteBenchmark/109_pdfsam/src/main/java/org/pdfsam/console/business/dto/BoundsTest.java",
		"test_prompt": "// BoundsTest.java\npackage org.pdfsam.console.business.dto;\n\nimport java.io.Serializable;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link Bounds}.\n* It contains ten unit test cases for the {@link Bounds#intersects(Bounds)} method.\n*/\nclass BoundsTest {"
	},
	{
		"original_code": "// MixParsedCommand.java\n/*\n * Created on 1-Oct-2007\n * Copyright (C) 2007 by Andrea Vacondio.\n *\n *\n * This library is provided under dual licenses.\n * You may choose the terms of the Lesser General Public License version 2.1 or the General Public License version 2\n * License at your discretion.\n * \n * \n * This library is free software; you can redistribute it and/or\n * modify it under the terms of the GNU Lesser General Public\n * License as published by the Free Software Foundation;\n * version 2.1 of the License.\n * \n * This library is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n * Lesser General Public License for more details.\n * \n * You should have received a copy of the GNU Lesser General Public\n * License along with this library; if not, write to the Free Software\n * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA\n * \n * \n * \n * This program is free software; you can redistribute it and/or modify it under the terms of the \n * GNU General Public License as published by the Free Software Foundation; \n * either version 2 of the License.\n * \n * This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; \n * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. \n * See the GNU General Public License for more details.\n * You should have received a copy of the GNU General Public License along with this program; \n * if not, write to the Free Software Foundation, Inc., \n *  59 Temple Place, Suite 330, Boston, MA 02111-1307 USA\n */\npackage org.pdfsam.console.business.dto.commands;\n\nimport java.io.File;\nimport org.pdfsam.console.business.dto.PdfFile;\n\n/**\n * Mix parsed command dto filled by parsing service and used by worker service\n * @author Andrea Vacondio\n */\npublic class MixParsedCommand extends AbstractParsedCommand {\n\n    private static final long serialVersionUID = -2646601665244663267L;\n\n    public static final int DEFAULT_STEP = 1;\n\n    public static final String F1_ARG = \"f1\";\n\n    public static final String REVERSE_FIRST_ARG = \"reversefirst\";\n\n    public static final String F2_ARG = \"f2\";\n\n    public static final String REVERSE_SECOND_ARG = \"reversesecond\";\n\n    public static final String O_ARG = \"o\";\n\n    public static final String STEP_ARG = \"step\";\n\n    public static final String SECOND_STEP_ARG = \"secondstep\";\n\n    private File outputFile;\n\n    private PdfFile firstInputFile;\n\n    private PdfFile secondInputFile;\n\n    private boolean reverseFirst = false;\n\n    private boolean reverseSecond = false;\n\n    private int step = DEFAULT_STEP;\n\n    private int secondStep = DEFAULT_STEP;\n\n    public MixParsedCommand() {\n    }\n\n    public MixParsedCommand(File outputFile, PdfFile firstInputFile, PdfFile secondInputFile, boolean reverseFirst, boolean reverseSecond, int step, int secondStep) {\n        super();\n        this.outputFile = outputFile;\n        this.firstInputFile = firstInputFile;\n        this.secondInputFile = secondInputFile;\n        this.reverseFirst = reverseFirst;\n        this.reverseSecond = reverseSecond;\n        this.step = step;\n        this.secondStep = secondStep;\n    }\n\n    /**\n     * @deprecated use the constructor without the logFile parameter\n     */\n    public MixParsedCommand(File outputFile, PdfFile firstInputFile, PdfFile secondInputFile, boolean reverseFirst, boolean reverseSecond, int step, boolean overwrite, boolean compress, File logFile, char outputPdfVersion) {\n        super(overwrite, compress, logFile, outputPdfVersion);\n        this.outputFile = outputFile;\n        this.firstInputFile = firstInputFile;\n        this.secondInputFile = secondInputFile;\n        this.reverseFirst = reverseFirst;\n        this.reverseSecond = reverseSecond;\n        this.step = step;\n    }\n\n    public MixParsedCommand(File outputFile, PdfFile firstInputFile, PdfFile secondInputFile, boolean reverseFirst, boolean reverseSecond, int step, int secondStep, boolean overwrite, boolean compress, char outputPdfVersion) {\n        super(overwrite, compress, outputPdfVersion);\n        this.outputFile = outputFile;\n        this.firstInputFile = firstInputFile;\n        this.secondInputFile = secondInputFile;\n        this.reverseFirst = reverseFirst;\n        this.reverseSecond = reverseSecond;\n        this.step = step;\n        this.secondStep = secondStep;\n    }\n\n    /**\n     * @return the outputFile\n     */\n    public File getOutputFile() {\n        return outputFile;\n    }\n\n    /**\n     * @param outputFile the outputFile to set\n     */\n    public void setOutputFile(File outputFile) {\n        this.outputFile = outputFile;\n    }\n\n    /**\n     * @return the firstInputFile\n     */\n    public PdfFile getFirstInputFile() {\n        return firstInputFile;\n    }\n\n    /**\n     * @param firstInputFile the firstInputFile to set\n     */\n    public void setFirstInputFile(PdfFile firstInputFile) {\n        this.firstInputFile = firstInputFile;\n    }\n\n    /**\n     * @return the secondInputFile\n     */\n    public PdfFile getSecondInputFile() {\n        return secondInputFile;\n    }\n\n    /**\n     * @param secondInputFile the secondInputFile to set\n     */\n    public void setSecondInputFile(PdfFile secondInputFile) {\n        this.secondInputFile = secondInputFile;\n    }\n\n    /**\n     * @return the reverseFirst\n     */\n    public boolean isReverseFirst() {\n        return reverseFirst;\n    }\n\n    /**\n     * @param reverseFirst the reverseFirst to set\n     */\n    public void setReverseFirst(boolean reverseFirst) {\n        this.reverseFirst = reverseFirst;\n    }\n\n    /**\n     * @return the reverseSecond\n     */\n    public boolean isReverseSecond() {\n        return reverseSecond;\n    }\n\n    /**\n     * @param reverseSecond the reverseSecond to set\n     */\n    public void setReverseSecond(boolean reverseSecond) {\n        this.reverseSecond = reverseSecond;\n    }\n\n    public final String getCommand() {\n        return COMMAND_MIX;\n    }\n\n    /**\n     * @return the step\n     */\n    public int getStep() {\n        return step;\n    }\n\n    /**\n     * @param step the step to set\n     */\n    public void setStep(int step) {\n        this.step = step;\n    }\n\n    /**\n     * @return the secondStep\n     */\n    public int getSecondStep() {\n        return secondStep;\n    }\n\n    /**\n     * @param secondStep the secondStep to set\n     */\n    public void setSecondStep(int secondStep) {\n        this.secondStep = secondStep;\n    }\n\n    public String toString() {\n        StringBuffer retVal = new StringBuffer();\n        retVal.append(super.toString());\n        retVal.append((firstInputFile == null) ? \"\" : \"[firstInputFile=\" + firstInputFile.getFile().getAbsolutePath() + \"]\");\n        retVal.append((secondInputFile == null) ? \"\" : \"[secondInputFile=\" + secondInputFile.getFile().getAbsolutePath() + \"]\");\n        retVal.append(\"[reverseFirst=\" + reverseFirst + \"]\");\n        retVal.append(\"[reverseSecond=\" + reverseSecond + \"]\");\n        retVal.append(\"[step=\" + step + \"]\");\n        retVal.append(\"[secondStep=\" + secondStep + \"]\");\n        retVal.append(\"[command=\" + getCommand() + \"]\");\n        return retVal.toString();\n    }\n}\n",
		"id": "EvoSuiteBenchmark/109_pdfsam/src/main/java/org/pdfsam/console/business/dto/commands/MixParsedCommandTest0.java",
		"test_prompt": "// MixParsedCommandTest0.java\npackage org.pdfsam.console.business.dto.commands;\n\nimport java.io.File;\nimport org.pdfsam.console.business.dto.PdfFile;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link MixParsedCommand}.\n* It contains ten unit test cases for the {@link MixParsedCommand#isReverseFirst()} method.\n*/\nclass MixParsedCommandTest0 {"
	},
	{
		"original_code": "// MixParsedCommand.java\n/*\n * Created on 1-Oct-2007\n * Copyright (C) 2007 by Andrea Vacondio.\n *\n *\n * This library is provided under dual licenses.\n * You may choose the terms of the Lesser General Public License version 2.1 or the General Public License version 2\n * License at your discretion.\n * \n * \n * This library is free software; you can redistribute it and/or\n * modify it under the terms of the GNU Lesser General Public\n * License as published by the Free Software Foundation;\n * version 2.1 of the License.\n * \n * This library is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n * Lesser General Public License for more details.\n * \n * You should have received a copy of the GNU Lesser General Public\n * License along with this library; if not, write to the Free Software\n * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA\n * \n * \n * \n * This program is free software; you can redistribute it and/or modify it under the terms of the \n * GNU General Public License as published by the Free Software Foundation; \n * either version 2 of the License.\n * \n * This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; \n * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. \n * See the GNU General Public License for more details.\n * You should have received a copy of the GNU General Public License along with this program; \n * if not, write to the Free Software Foundation, Inc., \n *  59 Temple Place, Suite 330, Boston, MA 02111-1307 USA\n */\npackage org.pdfsam.console.business.dto.commands;\n\nimport java.io.File;\nimport org.pdfsam.console.business.dto.PdfFile;\n\n/**\n * Mix parsed command dto filled by parsing service and used by worker service\n * @author Andrea Vacondio\n */\npublic class MixParsedCommand extends AbstractParsedCommand {\n\n    private static final long serialVersionUID = -2646601665244663267L;\n\n    public static final int DEFAULT_STEP = 1;\n\n    public static final String F1_ARG = \"f1\";\n\n    public static final String REVERSE_FIRST_ARG = \"reversefirst\";\n\n    public static final String F2_ARG = \"f2\";\n\n    public static final String REVERSE_SECOND_ARG = \"reversesecond\";\n\n    public static final String O_ARG = \"o\";\n\n    public static final String STEP_ARG = \"step\";\n\n    public static final String SECOND_STEP_ARG = \"secondstep\";\n\n    private File outputFile;\n\n    private PdfFile firstInputFile;\n\n    private PdfFile secondInputFile;\n\n    private boolean reverseFirst = false;\n\n    private boolean reverseSecond = false;\n\n    private int step = DEFAULT_STEP;\n\n    private int secondStep = DEFAULT_STEP;\n\n    public MixParsedCommand() {\n    }\n\n    public MixParsedCommand(File outputFile, PdfFile firstInputFile, PdfFile secondInputFile, boolean reverseFirst, boolean reverseSecond, int step, int secondStep) {\n        super();\n        this.outputFile = outputFile;\n        this.firstInputFile = firstInputFile;\n        this.secondInputFile = secondInputFile;\n        this.reverseFirst = reverseFirst;\n        this.reverseSecond = reverseSecond;\n        this.step = step;\n        this.secondStep = secondStep;\n    }\n\n    /**\n     * @deprecated use the constructor without the logFile parameter\n     */\n    public MixParsedCommand(File outputFile, PdfFile firstInputFile, PdfFile secondInputFile, boolean reverseFirst, boolean reverseSecond, int step, boolean overwrite, boolean compress, File logFile, char outputPdfVersion) {\n        super(overwrite, compress, logFile, outputPdfVersion);\n        this.outputFile = outputFile;\n        this.firstInputFile = firstInputFile;\n        this.secondInputFile = secondInputFile;\n        this.reverseFirst = reverseFirst;\n        this.reverseSecond = reverseSecond;\n        this.step = step;\n    }\n\n    public MixParsedCommand(File outputFile, PdfFile firstInputFile, PdfFile secondInputFile, boolean reverseFirst, boolean reverseSecond, int step, int secondStep, boolean overwrite, boolean compress, char outputPdfVersion) {\n        super(overwrite, compress, outputPdfVersion);\n        this.outputFile = outputFile;\n        this.firstInputFile = firstInputFile;\n        this.secondInputFile = secondInputFile;\n        this.reverseFirst = reverseFirst;\n        this.reverseSecond = reverseSecond;\n        this.step = step;\n        this.secondStep = secondStep;\n    }\n\n    /**\n     * @return the outputFile\n     */\n    public File getOutputFile() {\n        return outputFile;\n    }\n\n    /**\n     * @param outputFile the outputFile to set\n     */\n    public void setOutputFile(File outputFile) {\n        this.outputFile = outputFile;\n    }\n\n    /**\n     * @return the firstInputFile\n     */\n    public PdfFile getFirstInputFile() {\n        return firstInputFile;\n    }\n\n    /**\n     * @param firstInputFile the firstInputFile to set\n     */\n    public void setFirstInputFile(PdfFile firstInputFile) {\n        this.firstInputFile = firstInputFile;\n    }\n\n    /**\n     * @return the secondInputFile\n     */\n    public PdfFile getSecondInputFile() {\n        return secondInputFile;\n    }\n\n    /**\n     * @param secondInputFile the secondInputFile to set\n     */\n    public void setSecondInputFile(PdfFile secondInputFile) {\n        this.secondInputFile = secondInputFile;\n    }\n\n    /**\n     * @return the reverseFirst\n     */\n    public boolean isReverseFirst() {\n        return reverseFirst;\n    }\n\n    /**\n     * @param reverseFirst the reverseFirst to set\n     */\n    public void setReverseFirst(boolean reverseFirst) {\n        this.reverseFirst = reverseFirst;\n    }\n\n    /**\n     * @return the reverseSecond\n     */\n    public boolean isReverseSecond() {\n        return reverseSecond;\n    }\n\n    /**\n     * @param reverseSecond the reverseSecond to set\n     */\n    public void setReverseSecond(boolean reverseSecond) {\n        this.reverseSecond = reverseSecond;\n    }\n\n    public final String getCommand() {\n        return COMMAND_MIX;\n    }\n\n    /**\n     * @return the step\n     */\n    public int getStep() {\n        return step;\n    }\n\n    /**\n     * @param step the step to set\n     */\n    public void setStep(int step) {\n        this.step = step;\n    }\n\n    /**\n     * @return the secondStep\n     */\n    public int getSecondStep() {\n        return secondStep;\n    }\n\n    /**\n     * @param secondStep the secondStep to set\n     */\n    public void setSecondStep(int secondStep) {\n        this.secondStep = secondStep;\n    }\n\n    public String toString() {\n        StringBuffer retVal = new StringBuffer();\n        retVal.append(super.toString());\n        retVal.append((firstInputFile == null) ? \"\" : \"[firstInputFile=\" + firstInputFile.getFile().getAbsolutePath() + \"]\");\n        retVal.append((secondInputFile == null) ? \"\" : \"[secondInputFile=\" + secondInputFile.getFile().getAbsolutePath() + \"]\");\n        retVal.append(\"[reverseFirst=\" + reverseFirst + \"]\");\n        retVal.append(\"[reverseSecond=\" + reverseSecond + \"]\");\n        retVal.append(\"[step=\" + step + \"]\");\n        retVal.append(\"[secondStep=\" + secondStep + \"]\");\n        retVal.append(\"[command=\" + getCommand() + \"]\");\n        return retVal.toString();\n    }\n}\n",
		"id": "EvoSuiteBenchmark/109_pdfsam/src/main/java/org/pdfsam/console/business/dto/commands/MixParsedCommandTest1.java",
		"test_prompt": "// MixParsedCommandTest1.java\npackage org.pdfsam.console.business.dto.commands;\n\nimport java.io.File;\nimport org.pdfsam.console.business.dto.PdfFile;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link MixParsedCommand}.\n* It contains ten unit test cases for the {@link MixParsedCommand#isReverseSecond()} method.\n*/\nclass MixParsedCommandTest1 {"
	},
	{
		"original_code": "// SlideShowParsedCommand.java\n/*\r\n * Created on 07-Mar-2008\r\n * Copyright (C) 2008 by Andrea Vacondio.\r\n *\r\n *\r\n * This library is provided under dual licenses.\r\n * You may choose the terms of the Lesser General Public License version 2.1 or the General Public License version 2\r\n * License at your discretion.\r\n * \r\n * \r\n * This library is free software; you can redistribute it and/or\r\n * modify it under the terms of the GNU Lesser General Public\r\n * License as published by the Free Software Foundation;\r\n * version 2.1 of the License.\r\n * \r\n * This library is distributed in the hope that it will be useful,\r\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\r\n * Lesser General Public License for more details.\r\n * \r\n * You should have received a copy of the GNU Lesser General Public\r\n * License along with this library; if not, write to the Free Software\r\n * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA\r\n * \r\n * \r\n * \r\n * This program is free software; you can redistribute it and/or modify it under the terms of the \r\n * GNU General Public License as published by the Free Software Foundation; \r\n * either version 2 of the License.\r\n * \r\n * This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; \r\n * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. \r\n * See the GNU General Public License for more details.\r\n * You should have received a copy of the GNU General Public License along with this program; \r\n * if not, write to the Free Software Foundation, Inc., \r\n *  59 Temple Place, Suite 330, Boston, MA 02111-1307 USA\r\n */\r\npackage org.pdfsam.console.business.dto.commands;\r\n\r\nimport java.io.File;\r\nimport org.pdfsam.console.business.dto.PdfFile;\r\nimport org.pdfsam.console.business.dto.Transition;\r\n\r\n/**\r\n * SlideShow parsed command dto filled by parsing service and used by worker service\r\n * @author Andrea Vacondio\r\n */\r\npublic class SlideShowParsedCommand extends AbstractParsedCommand {\r\n\r\n    private static final long serialVersionUID = 498418601794673447L;\r\n\r\n    public static final String F_ARG = \"f\";\r\n\r\n    public static final String P_ARG = \"p\";\r\n\r\n    public static final String O_ARG = \"o\";\r\n\r\n    public static final String L_ARG = \"l\";\r\n\r\n    public static final String T_ARG = \"t\";\r\n\r\n    public static final String DT_ARG = \"dt\";\r\n\r\n    public static final String FULLSCREEN_ARG = \"fullscreen\";\r\n\r\n    private File outputFile;\r\n\r\n    private PdfFile inputFile;\r\n\r\n    private boolean fullScreen = false;\r\n\r\n    private Transition defaultTransition;\r\n\r\n    private Transition[] transitions;\r\n\r\n    private File inputXmlFile;\r\n\r\n    private String outputFilesPrefix = \"\";\r\n\r\n    public SlideShowParsedCommand() {\r\n    }\r\n\r\n    public SlideShowParsedCommand(File outputFile, PdfFile inputFile, boolean fullScreen, Transition defaultTransition, Transition[] transitions, File inputXmlFile) {\r\n        super();\r\n        this.outputFile = outputFile;\r\n        this.inputFile = inputFile;\r\n        this.fullScreen = fullScreen;\r\n        this.defaultTransition = defaultTransition;\r\n        this.transitions = transitions;\r\n        this.inputXmlFile = inputXmlFile;\r\n    }\r\n\r\n    /**\r\n     * @deprecated use the constructor without the logFile parameter\r\n     */\r\n    public SlideShowParsedCommand(File outputFile, PdfFile inputFile, boolean fullScreen, Transition defaultTransition, Transition[] transitions, File inputXmlFile, boolean overwrite, boolean compress, File logFile, char outputPdfVersion) {\r\n        super(overwrite, compress, logFile, outputPdfVersion);\r\n        this.outputFile = outputFile;\r\n        this.inputFile = inputFile;\r\n        this.fullScreen = fullScreen;\r\n        this.defaultTransition = defaultTransition;\r\n        this.transitions = transitions;\r\n        this.inputXmlFile = inputXmlFile;\r\n    }\r\n\r\n    public SlideShowParsedCommand(File outputFile, PdfFile inputFile, boolean fullScreen, Transition defaultTransition, Transition[] transitions, File inputXmlFile, boolean overwrite, boolean compress, char outputPdfVersion) {\r\n        super(overwrite, compress, outputPdfVersion);\r\n        this.outputFile = outputFile;\r\n        this.inputFile = inputFile;\r\n        this.fullScreen = fullScreen;\r\n        this.defaultTransition = defaultTransition;\r\n        this.transitions = transitions;\r\n        this.inputXmlFile = inputXmlFile;\r\n    }\r\n\r\n    /**\r\n     * @return the outputFile\r\n     */\r\n    public File getOutputFile() {\r\n        return outputFile;\r\n    }\r\n\r\n    /**\r\n     * @param outputFile the outputFile to set\r\n     */\r\n    public void setOutputFile(File outputFile) {\r\n        this.outputFile = outputFile;\r\n    }\r\n\r\n    /**\r\n     * @return the inputFile\r\n     */\r\n    public PdfFile getInputFile() {\r\n        return inputFile;\r\n    }\r\n\r\n    /**\r\n     * @param inputFile the inputFile to set\r\n     */\r\n    public void setInputFile(PdfFile inputFile) {\r\n        this.inputFile = inputFile;\r\n    }\r\n\r\n    /**\r\n     * @return the fullScreen\r\n     */\r\n    public boolean isFullScreen() {\r\n        return fullScreen;\r\n    }\r\n\r\n    /**\r\n     * @param fullScreen the fullScreen to set\r\n     */\r\n    public void setFullScreen(boolean fullScreen) {\r\n        this.fullScreen = fullScreen;\r\n    }\r\n\r\n    /**\r\n     * @return the defaultTransition\r\n     */\r\n    public Transition getDefaultTransition() {\r\n        return defaultTransition;\r\n    }\r\n\r\n    /**\r\n     * @param defaultTransition the defaultTransition to set\r\n     */\r\n    public void setDefaultTransition(Transition defaultTransition) {\r\n        this.defaultTransition = defaultTransition;\r\n    }\r\n\r\n    /**\r\n     * @return the transitions\r\n     */\r\n    public Transition[] getTransitions() {\r\n        return transitions;\r\n    }\r\n\r\n    /**\r\n     * @param transitions the transitions to set\r\n     */\r\n    public void setTransitions(Transition[] transitions) {\r\n        this.transitions = transitions;\r\n    }\r\n\r\n    /**\r\n     * @return the inputXmlFile\r\n     */\r\n    public File getInputXmlFile() {\r\n        return inputXmlFile;\r\n    }\r\n\r\n    /**\r\n     * @param inputXmlFile the inputXmlFile to set\r\n     */\r\n    public void setInputXmlFile(File inputXmlFile) {\r\n        this.inputXmlFile = inputXmlFile;\r\n    }\r\n\r\n    public String getCommand() {\r\n        return SlideShowParsedCommand.COMMAND_SLIDESHOW;\r\n    }\r\n\r\n    /**\r\n     * @return the outputFilesPrefix\r\n     */\r\n    public String getOutputFilesPrefix() {\r\n        return outputFilesPrefix;\r\n    }\r\n\r\n    /**\r\n     * @param outputFilesPrefix the outputFilesPrefix to set\r\n     */\r\n    public void setOutputFilesPrefix(String outputFilesPrefix) {\r\n        this.outputFilesPrefix = outputFilesPrefix;\r\n    }\r\n\r\n    public String toString() {\r\n        StringBuffer retVal = new StringBuffer();\r\n        retVal.append(super.toString());\r\n        retVal.append((outputFile == null) ? \"\" : \"[outputFile=\" + outputFile.getAbsolutePath() + \"]\");\r\n        retVal.append((inputFile == null) ? \"\" : \"[outputFile=\" + outputFile.getAbsolutePath() + \"]\");\r\n        if (transitions != null) {\r\n            retVal.append(\"[transitions.length=\" + transitions.length + \"]\");\r\n        }\r\n        retVal.append(\"[defaultTransition=\" + defaultTransition + \"]\");\r\n        retVal.append(\"[fullScreen=\" + fullScreen + \"]\");\r\n        retVal.append(\"[inputXmlFile=\" + inputXmlFile + \"]\");\r\n        retVal.append(\"[outputFilesPrefix=\" + outputFilesPrefix + \"]\");\r\n        retVal.append(\"[command=\" + getCommand() + \"]\");\r\n        return retVal.toString();\r\n    }\r\n}\r\n",
		"id": "EvoSuiteBenchmark/109_pdfsam/src/main/java/org/pdfsam/console/business/dto/commands/SlideShowParsedCommandTest.java",
		"test_prompt": "// SlideShowParsedCommandTest.java\npackage org.pdfsam.console.business.dto.commands;\n\nimport java.io.File;\nimport org.pdfsam.console.business.dto.PdfFile;\nimport org.pdfsam.console.business.dto.Transition;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link SlideShowParsedCommand}.\n* It contains ten unit test cases for the {@link SlideShowParsedCommand#isFullScreen()} method.\n*/\nclass SlideShowParsedCommandTest {"
	},
	{
		"original_code": "// AbstractParsedCommand.java\n/*\r\n * Created on 1-Oct-2007\r\n * Copyright (C) 2006 by Andrea Vacondio.\r\n *\r\n *\r\n * This library is provided under dual licenses.\r\n * You may choose the terms of the Lesser General Public License version 2.1 or the General Public License version 2\r\n * License at your discretion.\r\n * \r\n * \r\n * This library is free software; you can redistribute it and/or\r\n * modify it under the terms of the GNU Lesser General Public\r\n * License as published by the Free Software Foundation;\r\n * version 2.1 of the License.\r\n * \r\n * This library is distributed in the hope that it will be useful,\r\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\r\n * Lesser General Public License for more details.\r\n * \r\n * You should have received a copy of the GNU Lesser General Public\r\n * License along with this library; if not, write to the Free Software\r\n * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA\r\n * \r\n * \r\n * \r\n * This program is free software; you can redistribute it and/or modify it under the terms of the \r\n * GNU General Public License as published by the Free Software Foundation; \r\n * either version 2 of the License.\r\n * \r\n * This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; \r\n * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. \r\n * See the GNU General Public License for more details.\r\n * You should have received a copy of the GNU General Public License along with this program; \r\n * if not, write to the Free Software Foundation, Inc., \r\n *  59 Temple Place, Suite 330, Boston, MA 02111-1307 USA\r\n */\r\npackage org.pdfsam.console.business.dto.commands;\r\n\r\nimport java.io.File;\r\nimport java.io.Serializable;\r\nimport org.apache.commons.lang.builder.ToStringBuilder;\r\nimport com.lowagie.text.pdf.PdfWriter;\r\n\r\n/**\r\n * Abstract parsed command dto filled by parsing service and used by worker service\r\n * @author Andrea Vacondio\r\n */\r\npublic abstract class AbstractParsedCommand implements Serializable {\r\n\r\n    private static final long serialVersionUID = -7162638813535213378L;\r\n\r\n    public static final String COMMAND_CONCAT = \"concat\";\r\n\r\n    public static final String COMMAND_SPLIT = \"split\";\r\n\r\n    public static final String COMMAND_ENCRYPT = \"encrypt\";\r\n\r\n    public static final String COMMAND_DECRYPT = \"decrypt\";\r\n\r\n    public static final String COMMAND_MIX = \"mix\";\r\n\r\n    public static final String COMMAND_UNPACK = \"unpack\";\r\n\r\n    public static final String COMMAND_SETVIEWER = \"setviewer\";\r\n\r\n    public static final String COMMAND_SLIDESHOW = \"slideshow\";\r\n\r\n    public static final String COMMAND_ROTATE = \"rotate\";\r\n\r\n    public static final String COMMAND_PAGELABELS = \"pagelabels\";\r\n\r\n    public static final String COMMAND_SETDOCINFO = \"setdocinfo\";\r\n\r\n    public static final char VERSION_1_2 = PdfWriter.VERSION_1_2;\r\n\r\n    public static final char VERSION_1_3 = PdfWriter.VERSION_1_3;\r\n\r\n    public static final char VERSION_1_4 = PdfWriter.VERSION_1_4;\r\n\r\n    public static final char VERSION_1_5 = PdfWriter.VERSION_1_5;\r\n\r\n    public static final char VERSION_1_6 = PdfWriter.VERSION_1_6;\r\n\r\n    public static final char VERSION_1_7 = PdfWriter.VERSION_1_7;\r\n\r\n    public static final String PDFVERSION_ARG = \"pdfversion\";\r\n\r\n    public static final String OVERWRITE_ARG = \"overwrite\";\r\n\r\n    public static final String COMPRESSED_ARG = \"compressed\";\r\n\r\n    public static final String LOG_ARG = \"log\";\r\n\r\n    /**\r\n     * <code>true</code> if output file overwrite is enabled\r\n     */\r\n    private boolean overwrite = false;\r\n\r\n    /**\r\n     * <code>true</code> if output file must be compressed\r\n     */\r\n    private boolean compress = false;\r\n\r\n    /**\r\n     * log file\r\n     */\r\n    private File logFile = null;\r\n\r\n    /**\r\n     * Version of the output document/documents\r\n     */\r\n    private Character outputPdfVersion = null;\r\n\r\n    public AbstractParsedCommand() {\r\n    }\r\n\r\n    /**\r\n     * @deprecated use the constructor without the logFile parameter\r\n     */\r\n    public AbstractParsedCommand(boolean overwrite, boolean compress, File logFile, char outputPdfVersion) {\r\n        this(overwrite, compress, outputPdfVersion);\r\n    }\r\n\r\n    public AbstractParsedCommand(boolean overwrite, boolean compress, char outputPdfVersion) {\r\n        this.overwrite = overwrite;\r\n        this.compress = compress;\r\n        this.outputPdfVersion = new Character(outputPdfVersion);\r\n    }\r\n\r\n    /**\r\n     * @return the overwrite\r\n     */\r\n    public boolean isOverwrite() {\r\n        return overwrite;\r\n    }\r\n\r\n    /**\r\n     * @param overwrite\r\n     *        the overwrite to set\r\n     */\r\n    public void setOverwrite(boolean overwrite) {\r\n        this.overwrite = overwrite;\r\n    }\r\n\r\n    /**\r\n     * @return the compress\r\n     */\r\n    public boolean isCompress() {\r\n        return compress;\r\n    }\r\n\r\n    /**\r\n     * @param compress\r\n     *        the compress to set\r\n     */\r\n    public void setCompress(boolean compress) {\r\n        this.compress = compress;\r\n    }\r\n\r\n    /**\r\n     * @return the logFile\r\n     * @deprecated -log option is no longer used\r\n     */\r\n    public File getLogFile() {\r\n        return logFile;\r\n    }\r\n\r\n    /**\r\n     * @param logFile\r\n     *        the logFile to set\r\n     * @deprecated -log option is no longer used\r\n     */\r\n    public void setLogFile(File logFile) {\r\n        this.logFile = logFile;\r\n    }\r\n\r\n    /**\r\n     * @return the outputPdfVersion\r\n     */\r\n    public Character getOutputPdfVersion() {\r\n        return outputPdfVersion;\r\n    }\r\n\r\n    /**\r\n     * @param outputPdfVersion\r\n     *        the outputPdfVersion to set\r\n     */\r\n    public void setOutputPdfVersion(char outputPdfVersion) {\r\n        this.outputPdfVersion = new Character(outputPdfVersion);\r\n    }\r\n\r\n    /**\r\n     * @param outputPdfVersion\r\n     *        the outputPdfVersion to set\r\n     */\r\n    public void setOutputPdfVersion(Character outputPdfVersion) {\r\n        this.outputPdfVersion = outputPdfVersion;\r\n    }\r\n\r\n    /**\r\n     * @return The command associated with this dto\r\n     */\r\n    public abstract String getCommand();\r\n\r\n    public String toString() {\r\n        return new ToStringBuilder(this).append(overwrite).append(compress).append(outputPdfVersion).toString();\r\n    }\r\n}\r\n",
		"id": "EvoSuiteBenchmark/109_pdfsam/src/main/java/org/pdfsam/console/business/dto/commands/AbstractParsedCommandTest0.java",
		"test_prompt": "// AbstractParsedCommandTest0.java\npackage org.pdfsam.console.business.dto.commands;\n\nimport java.io.File;\nimport java.io.Serializable;\nimport org.apache.commons.lang.builder.ToStringBuilder;\nimport com.lowagie.text.pdf.PdfWriter;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link AbstractParsedCommand}.\n* It contains ten unit test cases for the {@link AbstractParsedCommand#isOverwrite()} method.\n*/\nclass AbstractParsedCommandTest0 {"
	},
	{
		"original_code": "// AbstractParsedCommand.java\n/*\r\n * Created on 1-Oct-2007\r\n * Copyright (C) 2006 by Andrea Vacondio.\r\n *\r\n *\r\n * This library is provided under dual licenses.\r\n * You may choose the terms of the Lesser General Public License version 2.1 or the General Public License version 2\r\n * License at your discretion.\r\n * \r\n * \r\n * This library is free software; you can redistribute it and/or\r\n * modify it under the terms of the GNU Lesser General Public\r\n * License as published by the Free Software Foundation;\r\n * version 2.1 of the License.\r\n * \r\n * This library is distributed in the hope that it will be useful,\r\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\r\n * Lesser General Public License for more details.\r\n * \r\n * You should have received a copy of the GNU Lesser General Public\r\n * License along with this library; if not, write to the Free Software\r\n * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA\r\n * \r\n * \r\n * \r\n * This program is free software; you can redistribute it and/or modify it under the terms of the \r\n * GNU General Public License as published by the Free Software Foundation; \r\n * either version 2 of the License.\r\n * \r\n * This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; \r\n * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. \r\n * See the GNU General Public License for more details.\r\n * You should have received a copy of the GNU General Public License along with this program; \r\n * if not, write to the Free Software Foundation, Inc., \r\n *  59 Temple Place, Suite 330, Boston, MA 02111-1307 USA\r\n */\r\npackage org.pdfsam.console.business.dto.commands;\r\n\r\nimport java.io.File;\r\nimport java.io.Serializable;\r\nimport org.apache.commons.lang.builder.ToStringBuilder;\r\nimport com.lowagie.text.pdf.PdfWriter;\r\n\r\n/**\r\n * Abstract parsed command dto filled by parsing service and used by worker service\r\n * @author Andrea Vacondio\r\n */\r\npublic abstract class AbstractParsedCommand implements Serializable {\r\n\r\n    private static final long serialVersionUID = -7162638813535213378L;\r\n\r\n    public static final String COMMAND_CONCAT = \"concat\";\r\n\r\n    public static final String COMMAND_SPLIT = \"split\";\r\n\r\n    public static final String COMMAND_ENCRYPT = \"encrypt\";\r\n\r\n    public static final String COMMAND_DECRYPT = \"decrypt\";\r\n\r\n    public static final String COMMAND_MIX = \"mix\";\r\n\r\n    public static final String COMMAND_UNPACK = \"unpack\";\r\n\r\n    public static final String COMMAND_SETVIEWER = \"setviewer\";\r\n\r\n    public static final String COMMAND_SLIDESHOW = \"slideshow\";\r\n\r\n    public static final String COMMAND_ROTATE = \"rotate\";\r\n\r\n    public static final String COMMAND_PAGELABELS = \"pagelabels\";\r\n\r\n    public static final String COMMAND_SETDOCINFO = \"setdocinfo\";\r\n\r\n    public static final char VERSION_1_2 = PdfWriter.VERSION_1_2;\r\n\r\n    public static final char VERSION_1_3 = PdfWriter.VERSION_1_3;\r\n\r\n    public static final char VERSION_1_4 = PdfWriter.VERSION_1_4;\r\n\r\n    public static final char VERSION_1_5 = PdfWriter.VERSION_1_5;\r\n\r\n    public static final char VERSION_1_6 = PdfWriter.VERSION_1_6;\r\n\r\n    public static final char VERSION_1_7 = PdfWriter.VERSION_1_7;\r\n\r\n    public static final String PDFVERSION_ARG = \"pdfversion\";\r\n\r\n    public static final String OVERWRITE_ARG = \"overwrite\";\r\n\r\n    public static final String COMPRESSED_ARG = \"compressed\";\r\n\r\n    public static final String LOG_ARG = \"log\";\r\n\r\n    /**\r\n     * <code>true</code> if output file overwrite is enabled\r\n     */\r\n    private boolean overwrite = false;\r\n\r\n    /**\r\n     * <code>true</code> if output file must be compressed\r\n     */\r\n    private boolean compress = false;\r\n\r\n    /**\r\n     * log file\r\n     */\r\n    private File logFile = null;\r\n\r\n    /**\r\n     * Version of the output document/documents\r\n     */\r\n    private Character outputPdfVersion = null;\r\n\r\n    public AbstractParsedCommand() {\r\n    }\r\n\r\n    /**\r\n     * @deprecated use the constructor without the logFile parameter\r\n     */\r\n    public AbstractParsedCommand(boolean overwrite, boolean compress, File logFile, char outputPdfVersion) {\r\n        this(overwrite, compress, outputPdfVersion);\r\n    }\r\n\r\n    public AbstractParsedCommand(boolean overwrite, boolean compress, char outputPdfVersion) {\r\n        this.overwrite = overwrite;\r\n        this.compress = compress;\r\n        this.outputPdfVersion = new Character(outputPdfVersion);\r\n    }\r\n\r\n    /**\r\n     * @return the overwrite\r\n     */\r\n    public boolean isOverwrite() {\r\n        return overwrite;\r\n    }\r\n\r\n    /**\r\n     * @param overwrite\r\n     *        the overwrite to set\r\n     */\r\n    public void setOverwrite(boolean overwrite) {\r\n        this.overwrite = overwrite;\r\n    }\r\n\r\n    /**\r\n     * @return the compress\r\n     */\r\n    public boolean isCompress() {\r\n        return compress;\r\n    }\r\n\r\n    /**\r\n     * @param compress\r\n     *        the compress to set\r\n     */\r\n    public void setCompress(boolean compress) {\r\n        this.compress = compress;\r\n    }\r\n\r\n    /**\r\n     * @return the logFile\r\n     * @deprecated -log option is no longer used\r\n     */\r\n    public File getLogFile() {\r\n        return logFile;\r\n    }\r\n\r\n    /**\r\n     * @param logFile\r\n     *        the logFile to set\r\n     * @deprecated -log option is no longer used\r\n     */\r\n    public void setLogFile(File logFile) {\r\n        this.logFile = logFile;\r\n    }\r\n\r\n    /**\r\n     * @return the outputPdfVersion\r\n     */\r\n    public Character getOutputPdfVersion() {\r\n        return outputPdfVersion;\r\n    }\r\n\r\n    /**\r\n     * @param outputPdfVersion\r\n     *        the outputPdfVersion to set\r\n     */\r\n    public void setOutputPdfVersion(char outputPdfVersion) {\r\n        this.outputPdfVersion = new Character(outputPdfVersion);\r\n    }\r\n\r\n    /**\r\n     * @param outputPdfVersion\r\n     *        the outputPdfVersion to set\r\n     */\r\n    public void setOutputPdfVersion(Character outputPdfVersion) {\r\n        this.outputPdfVersion = outputPdfVersion;\r\n    }\r\n\r\n    /**\r\n     * @return The command associated with this dto\r\n     */\r\n    public abstract String getCommand();\r\n\r\n    public String toString() {\r\n        return new ToStringBuilder(this).append(overwrite).append(compress).append(outputPdfVersion).toString();\r\n    }\r\n}\r\n",
		"id": "EvoSuiteBenchmark/109_pdfsam/src/main/java/org/pdfsam/console/business/dto/commands/AbstractParsedCommandTest1.java",
		"test_prompt": "// AbstractParsedCommandTest1.java\npackage org.pdfsam.console.business.dto.commands;\n\nimport java.io.File;\nimport java.io.Serializable;\nimport org.apache.commons.lang.builder.ToStringBuilder;\nimport com.lowagie.text.pdf.PdfWriter;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link AbstractParsedCommand}.\n* It contains ten unit test cases for the {@link AbstractParsedCommand#isCompress()} method.\n*/\nclass AbstractParsedCommandTest1 {"
	},
	{
		"original_code": "// ConcatParsedCommand.java\n/*\r\n * Created on 1-Oct-2007\r\n * Copyright (C) 2007 by Andrea Vacondio.\r\n *\r\n *\r\n * This library is provided under dual licenses.\r\n * You may choose the terms of the Lesser General Public License version 2.1 or the General Public License version 2\r\n * License at your discretion.\r\n * \r\n * \r\n * This library is free software; you can redistribute it and/or\r\n * modify it under the terms of the GNU Lesser General Public\r\n * License as published by the Free Software Foundation;\r\n * version 2.1 of the License.\r\n * \r\n * This library is distributed in the hope that it will be useful,\r\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\r\n * Lesser General Public License for more details.\r\n * \r\n * You should have received a copy of the GNU Lesser General Public\r\n * License along with this library; if not, write to the Free Software\r\n * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA\r\n * \r\n * \r\n * \r\n * This program is free software; you can redistribute it and/or modify it under the terms of the \r\n * GNU General Public License as published by the Free Software Foundation; \r\n * either version 2 of the License.\r\n * \r\n * This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; \r\n * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. \r\n * See the GNU General Public License for more details.\r\n * You should have received a copy of the GNU General Public License along with this program; \r\n * if not, write to the Free Software Foundation, Inc., \r\n *  59 Temple Place, Suite 330, Boston, MA 02111-1307 USA\r\n *   */\r\npackage org.pdfsam.console.business.dto.commands;\r\n\r\nimport java.io.File;\r\nimport org.pdfsam.console.business.dto.PageRotation;\r\nimport org.pdfsam.console.business.dto.PdfFile;\r\n\r\n/**\r\n * Concat parsed command dto filled by parsing service and used by worker service\r\n * @author Andrea Vacondio\r\n */\r\npublic class ConcatParsedCommand extends AbstractParsedCommand {\r\n\r\n    private static final long serialVersionUID = 2204294454175542123L;\r\n\r\n    public static final String F_ARG = \"f\";\r\n\r\n    public static final String COPYFIELDS_ARG = \"copyfields\";\r\n\r\n    public static final String L_ARG = \"l\";\r\n\r\n    public static final String U_ARG = \"u\";\r\n\r\n    public static final String O_ARG = \"o\";\r\n\r\n    public static final String R_ARG = \"r\";\r\n\r\n    public static final String D_ARG = \"d\";\r\n\r\n    private File outputFile;\r\n\r\n    private File inputCvsOrXmlFile;\r\n\r\n    private File inputDirectory;\r\n\r\n    private PdfFile[] inputFileList;\r\n\r\n    private String[] pageSelections;\r\n\r\n    private PageRotation[] rotations = null;\r\n\r\n    private boolean copyFields = false;\r\n\r\n    public ConcatParsedCommand() {\r\n    }\r\n\r\n    public ConcatParsedCommand(File outputFile, File inputCvsOrXmlFile, PdfFile[] inputFileList, String[] pageSelections, boolean copyFields, PageRotation[] rotations, File inputDirectory) {\r\n        super();\r\n        this.outputFile = outputFile;\r\n        this.inputCvsOrXmlFile = inputCvsOrXmlFile;\r\n        this.inputFileList = inputFileList;\r\n        this.pageSelections = pageSelections;\r\n        this.copyFields = copyFields;\r\n        this.rotations = rotations;\r\n        this.inputDirectory = inputDirectory;\r\n    }\r\n\r\n    public ConcatParsedCommand(File outputFile, File inputCvsOrXmlFile, PdfFile[] inputFileList, String[] pageSelections, boolean copyFields, PageRotation[] rotations, File inputDirectory, boolean overwrite, boolean compress, char outputPdfVersion) {\r\n        super(overwrite, compress, outputPdfVersion);\r\n        this.outputFile = outputFile;\r\n        this.inputCvsOrXmlFile = inputCvsOrXmlFile;\r\n        this.inputFileList = inputFileList;\r\n        this.pageSelections = pageSelections;\r\n        this.copyFields = copyFields;\r\n        this.rotations = rotations;\r\n        this.inputDirectory = inputDirectory;\r\n    }\r\n\r\n    /**\r\n     * @deprecated use the constructor without the logFile parameter\r\n     */\r\n    public ConcatParsedCommand(File outputFile, File inputCvsOrXmlFile, PdfFile[] inputFileList, String pageSelection, boolean copyFields, PageRotation[] rotations, File inputDirectory, boolean overwrite, boolean compress, File logFile, char outputPdfVersion) {\r\n        super(overwrite, compress, logFile, outputPdfVersion);\r\n        this.outputFile = outputFile;\r\n        this.inputCvsOrXmlFile = inputCvsOrXmlFile;\r\n        this.inputFileList = inputFileList;\r\n        this.copyFields = copyFields;\r\n        this.rotations = rotations;\r\n        this.inputDirectory = inputDirectory;\r\n    }\r\n\r\n    /**\r\n     * @return the outputFile\r\n     */\r\n    public File getOutputFile() {\r\n        return outputFile;\r\n    }\r\n\r\n    /**\r\n     * @param outputFile the outputFile to set\r\n     */\r\n    public void setOutputFile(File outputFile) {\r\n        this.outputFile = outputFile;\r\n    }\r\n\r\n    /**\r\n     * @return the inputCvsOrXmlFile\r\n     */\r\n    public File getInputCvsOrXmlFile() {\r\n        return inputCvsOrXmlFile;\r\n    }\r\n\r\n    /**\r\n     * @param inputCvsOrXmlFile the inputCvsOrXmlFile to set\r\n     */\r\n    public void setInputCvsOrXmlFile(File inputCvsOrXmlFile) {\r\n        this.inputCvsOrXmlFile = inputCvsOrXmlFile;\r\n    }\r\n\r\n    /**\r\n     * @return the inputFileList\r\n     */\r\n    public PdfFile[] getInputFileList() {\r\n        return inputFileList;\r\n    }\r\n\r\n    /**\r\n     * @param inputFileList the inputFileList to set\r\n     */\r\n    public void setInputFileList(PdfFile[] inputFileList) {\r\n        this.inputFileList = inputFileList;\r\n    }\r\n\r\n    /**\r\n     * @return the pageSelections\r\n     */\r\n    public String[] getPageSelections() {\r\n        return pageSelections;\r\n    }\r\n\r\n    /**\r\n     * @param pageSelections the pageSelection to set\r\n     */\r\n    public void setPageSelections(String[] pageSelections) {\r\n        this.pageSelections = pageSelections;\r\n    }\r\n\r\n    /**\r\n     * @return the copyFields\r\n     */\r\n    public boolean isCopyFields() {\r\n        return copyFields;\r\n    }\r\n\r\n    /**\r\n     * @param copyFields the copyFields to set\r\n     */\r\n    public void setCopyFields(boolean copyFields) {\r\n        this.copyFields = copyFields;\r\n    }\r\n\r\n    /**\r\n     * @return the rotations\r\n     */\r\n    public PageRotation[] getRotations() {\r\n        return rotations;\r\n    }\r\n\r\n    /**\r\n     * @param rotations the rotations to set\r\n     */\r\n    public void setRotations(PageRotation[] rotations) {\r\n        this.rotations = rotations;\r\n    }\r\n\r\n    /**\r\n     * @return the inputDirectory\r\n     */\r\n    public File getInputDirectory() {\r\n        return inputDirectory;\r\n    }\r\n\r\n    /**\r\n     * @param inputDirectory the inputDirectory to set\r\n     */\r\n    public void setInputDirectory(File inputDirectory) {\r\n        this.inputDirectory = inputDirectory;\r\n    }\r\n\r\n    public final String getCommand() {\r\n        return COMMAND_CONCAT;\r\n    }\r\n\r\n    public String toString() {\r\n        StringBuffer retVal = new StringBuffer();\r\n        retVal.append(super.toString());\r\n        retVal.append((outputFile == null) ? \"\" : \"[outputFile=\" + outputFile.getAbsolutePath() + \"]\");\r\n        retVal.append((inputDirectory == null) ? \"\" : \"[inputDirectory=\" + inputDirectory.getAbsolutePath() + \"]\");\r\n        if (inputFileList != null) {\r\n            for (int i = 0; i < inputFileList.length; i++) {\r\n                retVal.append((inputFileList[i] == null) ? \"\" : \"[inputFileList[\" + i + \"]=\" + inputFileList[i].getFile().getAbsolutePath() + \"]\");\r\n            }\r\n        }\r\n        if (rotations != null) {\r\n            retVal.append(\"[rotations.length=\" + rotations.length + \"]\");\r\n        }\r\n        retVal.append((inputCvsOrXmlFile == null) ? \"\" : \"[inputCvsOrXmlFile=\" + inputCvsOrXmlFile.getAbsolutePath() + \"]\");\r\n        if (pageSelections != null) {\r\n            retVal.append(\"[pageSelections=\" + pageSelections + \"]\");\r\n        }\r\n        retVal.append(\"[copyFields=\" + copyFields + \"]\");\r\n        retVal.append(\"[command=\" + getCommand() + \"]\");\r\n        return retVal.toString();\r\n    }\r\n}\r\n",
		"id": "EvoSuiteBenchmark/109_pdfsam/src/main/java/org/pdfsam/console/business/dto/commands/ConcatParsedCommandTest.java",
		"test_prompt": "// ConcatParsedCommandTest.java\npackage org.pdfsam.console.business.dto.commands;\n\nimport java.io.File;\nimport org.pdfsam.console.business.dto.PageRotation;\nimport org.pdfsam.console.business.dto.PdfFile;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link ConcatParsedCommand}.\n* It contains ten unit test cases for the {@link ConcatParsedCommand#isCopyFields()} method.\n*/\nclass ConcatParsedCommandTest {"
	},
	{
		"original_code": "// SetViewerParsedCommand.java\n/*\n * Created on 06-Mar-2008\n * Copyright (C) 2008 by Andrea Vacondio.\n *\n *\n * This library is provided under dual licenses.\n * You may choose the terms of the Lesser General Public License version 2.1 or the General Public License version 2\n * License at your discretion.\n * \n * \n * This library is free software; you can redistribute it and/or\n * modify it under the terms of the GNU Lesser General Public\n * License as published by the Free Software Foundation;\n * version 2.1 of the License.\n * \n * This library is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n * Lesser General Public License for more details.\n * \n * You should have received a copy of the GNU Lesser General Public\n * License along with this library; if not, write to the Free Software\n * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA\n * \n * \n * \n * This program is free software; you can redistribute it and/or modify it under the terms of the \n * GNU General Public License as published by the Free Software Foundation; \n * either version 2 of the License.\n * \n * This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; \n * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. \n * See the GNU General Public License for more details.\n * You should have received a copy of the GNU General Public License along with this program; \n * if not, write to the Free Software Foundation, Inc., \n *  59 Temple Place, Suite 330, Boston, MA 02111-1307 USA\n */\npackage org.pdfsam.console.business.dto.commands;\n\nimport java.io.File;\nimport org.pdfsam.console.business.dto.PdfFile;\n\n/**\n * SetViewer parsed command dto filled by parsing service and used by worker service\n * @author Andrea Vacondio\n */\npublic class SetViewerParsedCommand extends AbstractParsedCommand {\n\n    private static final long serialVersionUID = -8634290084366871560L;\n\n    //arguments\n    public static final String F_ARG = \"f\";\n\n    public static final String O_ARG = \"o\";\n\n    public static final String P_ARG = \"p\";\n\n    public static final String D_ARG = \"d\";\n\n    public static final String M_ARG = \"mode\";\n\n    public static final String NFSM_ARG = \"nfsmode\";\n\n    public static final String L_ARG = \"layout\";\n\n    public static final String DIRECTION_ARG = \"direction\";\n\n    public static final String HIDETOOLBAR_ARG = \"hidetoolbar\";\n\n    public static final String HIDEMENU_ARG = \"hidemenu\";\n\n    public static final String HIDEWINDOWUI_ARG = \"hidewindowui\";\n\n    public static final String FITWINDOW_ARG = \"fitwindow\";\n\n    public static final String CENTERWINDOW_ARG = \"centerwindow\";\n\n    public static final String DOCTITLE_ARG = \"displaydoctitle\";\n\n    public static final String NOPRINTSCALING_ARG = \"noprintscaling\";\n\n    //layouts\n    public static final String L_SINGLEPAGE = \"singlepage\";\n\n    public static final String L_ONECOLUMN = \"onecolumn\";\n\n    public static final String L_TWOCOLUMNLEFT = \"twocolumnl\";\n\n    public static final String L_TWOCOLUMNRIGHT = \"twocolumnr\";\n\n    public static final String L_TWOPAGELEFT = \"twopagel\";\n\n    public static final String L_TWOPAGERIGHT = \"twopager\";\n\n    //modes\n    public static final String M_NONE = \"none\";\n\n    public static final String M_OUTLINES = \"outlines\";\n\n    public static final String M_THUMBS = \"thumbs\";\n\n    public static final String M_FULLSCREEN = \"fullscreen\";\n\n    public static final String M_OCONTENT = \"ocontent\";\n\n    public static final String M_ATTACHMENTS = \"attachments\";\n\n    //non full screen modes\n    public static final String NFSM_NONE = \"nfsnone\";\n\n    public static final String NFSM_OUTLINES = \"nfsoutlines\";\n\n    public static final String NFSM_THUMBS = \"nfsthumbs\";\n\n    public static final String NFSM_OCONTENT = \"nfsocontent\";\n\n    //directions\n    public static final String D_L2R = \"l2r\";\n\n    public static final String D_R2L = \"r2l\";\n\n    private File outputFile;\n\n    private int mode = 0;\n\n    private int layout = 0;\n\n    private int nfsmode = 0;\n\n    private int direction = 0;\n\n    private PdfFile[] inputFileList;\n\n    private File inputDirectory;\n\n    private String outputFilesPrefix = \"\";\n\n    private boolean hideToolBar = false;\n\n    private boolean hideMenu = false;\n\n    private boolean hideWindowUI = false;\n\n    private boolean fitWindow = false;\n\n    private boolean centerWindow = false;\n\n    private boolean displayDocTitle = false;\n\n    private boolean noPrintScaling = false;\n\n    public SetViewerParsedCommand() {\n    }\n\n    public SetViewerParsedCommand(File outputFile, int mode, int layout, int nfsmode, int direction, PdfFile[] inputFileList, String outputFilesPrefix, boolean hideToolBar, boolean hideMenu, boolean hideWindowUI, boolean fitWindow, boolean centerWindow, boolean displayDocTitle, boolean noPrintScaling, File inputDirectory) {\n        super();\n        this.outputFile = outputFile;\n        this.mode = mode;\n        this.layout = layout;\n        this.nfsmode = nfsmode;\n        this.direction = direction;\n        this.inputFileList = inputFileList;\n        this.outputFilesPrefix = outputFilesPrefix;\n        this.hideToolBar = hideToolBar;\n        this.hideMenu = hideMenu;\n        this.hideWindowUI = hideWindowUI;\n        this.fitWindow = fitWindow;\n        this.centerWindow = centerWindow;\n        this.displayDocTitle = displayDocTitle;\n        this.noPrintScaling = noPrintScaling;\n        this.inputDirectory = inputDirectory;\n    }\n\n    /**\n     * @deprecated use the constructor without the logFile parameter\n     */\n    public SetViewerParsedCommand(File outputFile, int mode, int layout, int nfsmode, int direction, PdfFile[] inputFileList, String outputFilesPrefix, boolean hideToolBar, boolean hideMenu, boolean hideWindowUI, boolean fitWindow, boolean centerWindow, boolean displayDocTitle, boolean noPrintScaling, File inputDirectory, boolean overwrite, boolean compress, File logFile, char outputPdfVersion) {\n        super(overwrite, compress, logFile, outputPdfVersion);\n        this.outputFile = outputFile;\n        this.mode = mode;\n        this.layout = layout;\n        this.nfsmode = nfsmode;\n        this.direction = direction;\n        this.inputFileList = inputFileList;\n        this.outputFilesPrefix = outputFilesPrefix;\n        this.hideToolBar = hideToolBar;\n        this.hideMenu = hideMenu;\n        this.hideWindowUI = hideWindowUI;\n        this.fitWindow = fitWindow;\n        this.centerWindow = centerWindow;\n        this.displayDocTitle = displayDocTitle;\n        this.noPrintScaling = noPrintScaling;\n        this.inputDirectory = inputDirectory;\n    }\n\n    public SetViewerParsedCommand(File outputFile, int mode, int layout, int nfsmode, int direction, PdfFile[] inputFileList, String outputFilesPrefix, boolean hideToolBar, boolean hideMenu, boolean hideWindowUI, boolean fitWindow, boolean centerWindow, boolean displayDocTitle, boolean noPrintScaling, File inputDirectory, boolean overwrite, boolean compress, char outputPdfVersion) {\n        super(overwrite, compress, outputPdfVersion);\n        this.outputFile = outputFile;\n        this.mode = mode;\n        this.layout = layout;\n        this.nfsmode = nfsmode;\n        this.direction = direction;\n        this.inputFileList = inputFileList;\n        this.outputFilesPrefix = outputFilesPrefix;\n        this.hideToolBar = hideToolBar;\n        this.hideMenu = hideMenu;\n        this.hideWindowUI = hideWindowUI;\n        this.fitWindow = fitWindow;\n        this.centerWindow = centerWindow;\n        this.displayDocTitle = displayDocTitle;\n        this.noPrintScaling = noPrintScaling;\n        this.inputDirectory = inputDirectory;\n    }\n\n    /**\n     * @return the outputFile\n     */\n    public File getOutputFile() {\n        return outputFile;\n    }\n\n    /**\n     * @param outputFile the outputFile to set\n     */\n    public void setOutputFile(File outputFile) {\n        this.outputFile = outputFile;\n    }\n\n    /**\n     * @return the mode\n     */\n    public int getMode() {\n        return mode;\n    }\n\n    /**\n     * @param mode the mode to set\n     */\n    public void setMode(int mode) {\n        this.mode = mode;\n    }\n\n    /**\n     * @return the layout\n     */\n    public int getLayout() {\n        return layout;\n    }\n\n    /**\n     * @param layout the layout to set\n     */\n    public void setLayout(int layout) {\n        this.layout = layout;\n    }\n\n    /**\n     * @return the nfsmode\n     */\n    public int getNfsmode() {\n        return nfsmode;\n    }\n\n    /**\n     * @param nfsmode the nfsmode to set\n     */\n    public void setNfsmode(int nfsmode) {\n        this.nfsmode = nfsmode;\n    }\n\n    /**\n     * @return the direction\n     */\n    public int getDirection() {\n        return direction;\n    }\n\n    /**\n     * @param direction the direction to set\n     */\n    public void setDirection(int direction) {\n        this.direction = direction;\n    }\n\n    /**\n     * @return the inputFileList\n     */\n    public PdfFile[] getInputFileList() {\n        return inputFileList;\n    }\n\n    /**\n     * @param inputFileList the inputFileList to set\n     */\n    public void setInputFileList(PdfFile[] inputFileList) {\n        this.inputFileList = inputFileList;\n    }\n\n    /**\n     * @return the outputFilesPrefix\n     */\n    public String getOutputFilesPrefix() {\n        return outputFilesPrefix;\n    }\n\n    /**\n     * @param outputFilesPrefix the outputFilesPrefix to set\n     */\n    public void setOutputFilesPrefix(String outputFilesPrefix) {\n        this.outputFilesPrefix = outputFilesPrefix;\n    }\n\n    /**\n     * @return the hideToolBar\n     */\n    public boolean isHideToolBar() {\n        return hideToolBar;\n    }\n\n    /**\n     * @param hideToolBar the hideToolBar to set\n     */\n    public void setHideToolBar(boolean hideToolBar) {\n        this.hideToolBar = hideToolBar;\n    }\n\n    /**\n     * @return the hideMenu\n     */\n    public boolean isHideMenu() {\n        return hideMenu;\n    }\n\n    /**\n     * @param hideMenu the hideMenu to set\n     */\n    public void setHideMenu(boolean hideMenu) {\n        this.hideMenu = hideMenu;\n    }\n\n    /**\n     * @return the hideWindowUI\n     */\n    public boolean isHideWindowUI() {\n        return hideWindowUI;\n    }\n\n    /**\n     * @param hideWindowUI the hideWindowUI to set\n     */\n    public void setHideWindowUI(boolean hideWindowUI) {\n        this.hideWindowUI = hideWindowUI;\n    }\n\n    /**\n     * @return the fitWindow\n     */\n    public boolean isFitWindow() {\n        return fitWindow;\n    }\n\n    /**\n     * @param fitWindow the fitWindow to set\n     */\n    public void setFitWindow(boolean fitWindow) {\n        this.fitWindow = fitWindow;\n    }\n\n    /**\n     * @return the centerWindow\n     */\n    public boolean isCenterWindow() {\n        return centerWindow;\n    }\n\n    /**\n     * @param centerWindow the centerWindow to set\n     */\n    public void setCenterWindow(boolean centerWindow) {\n        this.centerWindow = centerWindow;\n    }\n\n    /**\n     * @return the displayDocTitle\n     */\n    public boolean isDisplayDocTitle() {\n        return displayDocTitle;\n    }\n\n    /**\n     * @param displayDocTitle the displayDocTitle to set\n     */\n    public void setDisplayDocTitle(boolean displayDocTitle) {\n        this.displayDocTitle = displayDocTitle;\n    }\n\n    /**\n     * @return the noPrintScaling\n     */\n    public boolean isNoPrintScaling() {\n        return noPrintScaling;\n    }\n\n    /**\n     * @param noPrintScaling the noPrintScaling to set\n     */\n    public void setNoPrintScaling(boolean noPrintScaling) {\n        this.noPrintScaling = noPrintScaling;\n    }\n\n    public String getCommand() {\n        return COMMAND_SETVIEWER;\n    }\n\n    public String toString() {\n        StringBuffer retVal = new StringBuffer();\n        retVal.append(super.toString());\n        retVal.append((outputFile == null) ? \"\" : \"[outputDir=\" + outputFile.getAbsolutePath() + \"]\");\n        if (inputFileList != null) {\n            for (int i = 0; i < inputFileList.length; i++) {\n                retVal.append((inputFileList[i] == null) ? \"\" : \"[inputFileList[\" + i + \"]=\" + inputFileList[i].getFile().getAbsolutePath() + \"]\");\n            }\n        }\n        retVal.append(\"[mode=\" + mode + \"]\");\n        retVal.append(\"[layout=\" + layout + \"]\");\n        retVal.append(\"[nfsmode=\" + nfsmode + \"]\");\n        retVal.append(\"[direction=\" + direction + \"]\");\n        retVal.append(\"[hideToolBar=\" + hideToolBar + \"]\");\n        retVal.append(\"[hideWindowUI=\" + hideWindowUI + \"]\");\n        retVal.append(\"[fitWindow=\" + fitWindow + \"]\");\n        retVal.append(\"[centerWindow=\" + centerWindow + \"]\");\n        retVal.append(\"[displayDocTitle=\" + displayDocTitle + \"]\");\n        retVal.append(\"[noPrintScaling=\" + noPrintScaling + \"]\");\n        retVal.append((inputDirectory == null) ? \"\" : \"[inputDirectory=\" + inputDirectory.getAbsolutePath() + \"]\");\n        retVal.append(\"[command=\" + getCommand() + \"]\");\n        return retVal.toString();\n    }\n\n    /**\n     * @return the inputDirectory\n     */\n    public File getInputDirectory() {\n        return inputDirectory;\n    }\n\n    /**\n     * @param inputDirectory the inputDirectory to set\n     */\n    public void setInputDirectory(File inputDirectory) {\n        this.inputDirectory = inputDirectory;\n    }\n}\n",
		"id": "EvoSuiteBenchmark/109_pdfsam/src/main/java/org/pdfsam/console/business/dto/commands/SetViewerParsedCommandTest0.java",
		"test_prompt": "// SetViewerParsedCommandTest0.java\npackage org.pdfsam.console.business.dto.commands;\n\nimport java.io.File;\nimport org.pdfsam.console.business.dto.PdfFile;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link SetViewerParsedCommand}.\n* It contains ten unit test cases for the {@link SetViewerParsedCommand#isHideToolBar()} method.\n*/\nclass SetViewerParsedCommandTest0 {"
	},
	{
		"original_code": "// SetViewerParsedCommand.java\n/*\n * Created on 06-Mar-2008\n * Copyright (C) 2008 by Andrea Vacondio.\n *\n *\n * This library is provided under dual licenses.\n * You may choose the terms of the Lesser General Public License version 2.1 or the General Public License version 2\n * License at your discretion.\n * \n * \n * This library is free software; you can redistribute it and/or\n * modify it under the terms of the GNU Lesser General Public\n * License as published by the Free Software Foundation;\n * version 2.1 of the License.\n * \n * This library is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n * Lesser General Public License for more details.\n * \n * You should have received a copy of the GNU Lesser General Public\n * License along with this library; if not, write to the Free Software\n * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA\n * \n * \n * \n * This program is free software; you can redistribute it and/or modify it under the terms of the \n * GNU General Public License as published by the Free Software Foundation; \n * either version 2 of the License.\n * \n * This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; \n * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. \n * See the GNU General Public License for more details.\n * You should have received a copy of the GNU General Public License along with this program; \n * if not, write to the Free Software Foundation, Inc., \n *  59 Temple Place, Suite 330, Boston, MA 02111-1307 USA\n */\npackage org.pdfsam.console.business.dto.commands;\n\nimport java.io.File;\nimport org.pdfsam.console.business.dto.PdfFile;\n\n/**\n * SetViewer parsed command dto filled by parsing service and used by worker service\n * @author Andrea Vacondio\n */\npublic class SetViewerParsedCommand extends AbstractParsedCommand {\n\n    private static final long serialVersionUID = -8634290084366871560L;\n\n    //arguments\n    public static final String F_ARG = \"f\";\n\n    public static final String O_ARG = \"o\";\n\n    public static final String P_ARG = \"p\";\n\n    public static final String D_ARG = \"d\";\n\n    public static final String M_ARG = \"mode\";\n\n    public static final String NFSM_ARG = \"nfsmode\";\n\n    public static final String L_ARG = \"layout\";\n\n    public static final String DIRECTION_ARG = \"direction\";\n\n    public static final String HIDETOOLBAR_ARG = \"hidetoolbar\";\n\n    public static final String HIDEMENU_ARG = \"hidemenu\";\n\n    public static final String HIDEWINDOWUI_ARG = \"hidewindowui\";\n\n    public static final String FITWINDOW_ARG = \"fitwindow\";\n\n    public static final String CENTERWINDOW_ARG = \"centerwindow\";\n\n    public static final String DOCTITLE_ARG = \"displaydoctitle\";\n\n    public static final String NOPRINTSCALING_ARG = \"noprintscaling\";\n\n    //layouts\n    public static final String L_SINGLEPAGE = \"singlepage\";\n\n    public static final String L_ONECOLUMN = \"onecolumn\";\n\n    public static final String L_TWOCOLUMNLEFT = \"twocolumnl\";\n\n    public static final String L_TWOCOLUMNRIGHT = \"twocolumnr\";\n\n    public static final String L_TWOPAGELEFT = \"twopagel\";\n\n    public static final String L_TWOPAGERIGHT = \"twopager\";\n\n    //modes\n    public static final String M_NONE = \"none\";\n\n    public static final String M_OUTLINES = \"outlines\";\n\n    public static final String M_THUMBS = \"thumbs\";\n\n    public static final String M_FULLSCREEN = \"fullscreen\";\n\n    public static final String M_OCONTENT = \"ocontent\";\n\n    public static final String M_ATTACHMENTS = \"attachments\";\n\n    //non full screen modes\n    public static final String NFSM_NONE = \"nfsnone\";\n\n    public static final String NFSM_OUTLINES = \"nfsoutlines\";\n\n    public static final String NFSM_THUMBS = \"nfsthumbs\";\n\n    public static final String NFSM_OCONTENT = \"nfsocontent\";\n\n    //directions\n    public static final String D_L2R = \"l2r\";\n\n    public static final String D_R2L = \"r2l\";\n\n    private File outputFile;\n\n    private int mode = 0;\n\n    private int layout = 0;\n\n    private int nfsmode = 0;\n\n    private int direction = 0;\n\n    private PdfFile[] inputFileList;\n\n    private File inputDirectory;\n\n    private String outputFilesPrefix = \"\";\n\n    private boolean hideToolBar = false;\n\n    private boolean hideMenu = false;\n\n    private boolean hideWindowUI = false;\n\n    private boolean fitWindow = false;\n\n    private boolean centerWindow = false;\n\n    private boolean displayDocTitle = false;\n\n    private boolean noPrintScaling = false;\n\n    public SetViewerParsedCommand() {\n    }\n\n    public SetViewerParsedCommand(File outputFile, int mode, int layout, int nfsmode, int direction, PdfFile[] inputFileList, String outputFilesPrefix, boolean hideToolBar, boolean hideMenu, boolean hideWindowUI, boolean fitWindow, boolean centerWindow, boolean displayDocTitle, boolean noPrintScaling, File inputDirectory) {\n        super();\n        this.outputFile = outputFile;\n        this.mode = mode;\n        this.layout = layout;\n        this.nfsmode = nfsmode;\n        this.direction = direction;\n        this.inputFileList = inputFileList;\n        this.outputFilesPrefix = outputFilesPrefix;\n        this.hideToolBar = hideToolBar;\n        this.hideMenu = hideMenu;\n        this.hideWindowUI = hideWindowUI;\n        this.fitWindow = fitWindow;\n        this.centerWindow = centerWindow;\n        this.displayDocTitle = displayDocTitle;\n        this.noPrintScaling = noPrintScaling;\n        this.inputDirectory = inputDirectory;\n    }\n\n    /**\n     * @deprecated use the constructor without the logFile parameter\n     */\n    public SetViewerParsedCommand(File outputFile, int mode, int layout, int nfsmode, int direction, PdfFile[] inputFileList, String outputFilesPrefix, boolean hideToolBar, boolean hideMenu, boolean hideWindowUI, boolean fitWindow, boolean centerWindow, boolean displayDocTitle, boolean noPrintScaling, File inputDirectory, boolean overwrite, boolean compress, File logFile, char outputPdfVersion) {\n        super(overwrite, compress, logFile, outputPdfVersion);\n        this.outputFile = outputFile;\n        this.mode = mode;\n        this.layout = layout;\n        this.nfsmode = nfsmode;\n        this.direction = direction;\n        this.inputFileList = inputFileList;\n        this.outputFilesPrefix = outputFilesPrefix;\n        this.hideToolBar = hideToolBar;\n        this.hideMenu = hideMenu;\n        this.hideWindowUI = hideWindowUI;\n        this.fitWindow = fitWindow;\n        this.centerWindow = centerWindow;\n        this.displayDocTitle = displayDocTitle;\n        this.noPrintScaling = noPrintScaling;\n        this.inputDirectory = inputDirectory;\n    }\n\n    public SetViewerParsedCommand(File outputFile, int mode, int layout, int nfsmode, int direction, PdfFile[] inputFileList, String outputFilesPrefix, boolean hideToolBar, boolean hideMenu, boolean hideWindowUI, boolean fitWindow, boolean centerWindow, boolean displayDocTitle, boolean noPrintScaling, File inputDirectory, boolean overwrite, boolean compress, char outputPdfVersion) {\n        super(overwrite, compress, outputPdfVersion);\n        this.outputFile = outputFile;\n        this.mode = mode;\n        this.layout = layout;\n        this.nfsmode = nfsmode;\n        this.direction = direction;\n        this.inputFileList = inputFileList;\n        this.outputFilesPrefix = outputFilesPrefix;\n        this.hideToolBar = hideToolBar;\n        this.hideMenu = hideMenu;\n        this.hideWindowUI = hideWindowUI;\n        this.fitWindow = fitWindow;\n        this.centerWindow = centerWindow;\n        this.displayDocTitle = displayDocTitle;\n        this.noPrintScaling = noPrintScaling;\n        this.inputDirectory = inputDirectory;\n    }\n\n    /**\n     * @return the outputFile\n     */\n    public File getOutputFile() {\n        return outputFile;\n    }\n\n    /**\n     * @param outputFile the outputFile to set\n     */\n    public void setOutputFile(File outputFile) {\n        this.outputFile = outputFile;\n    }\n\n    /**\n     * @return the mode\n     */\n    public int getMode() {\n        return mode;\n    }\n\n    /**\n     * @param mode the mode to set\n     */\n    public void setMode(int mode) {\n        this.mode = mode;\n    }\n\n    /**\n     * @return the layout\n     */\n    public int getLayout() {\n        return layout;\n    }\n\n    /**\n     * @param layout the layout to set\n     */\n    public void setLayout(int layout) {\n        this.layout = layout;\n    }\n\n    /**\n     * @return the nfsmode\n     */\n    public int getNfsmode() {\n        return nfsmode;\n    }\n\n    /**\n     * @param nfsmode the nfsmode to set\n     */\n    public void setNfsmode(int nfsmode) {\n        this.nfsmode = nfsmode;\n    }\n\n    /**\n     * @return the direction\n     */\n    public int getDirection() {\n        return direction;\n    }\n\n    /**\n     * @param direction the direction to set\n     */\n    public void setDirection(int direction) {\n        this.direction = direction;\n    }\n\n    /**\n     * @return the inputFileList\n     */\n    public PdfFile[] getInputFileList() {\n        return inputFileList;\n    }\n\n    /**\n     * @param inputFileList the inputFileList to set\n     */\n    public void setInputFileList(PdfFile[] inputFileList) {\n        this.inputFileList = inputFileList;\n    }\n\n    /**\n     * @return the outputFilesPrefix\n     */\n    public String getOutputFilesPrefix() {\n        return outputFilesPrefix;\n    }\n\n    /**\n     * @param outputFilesPrefix the outputFilesPrefix to set\n     */\n    public void setOutputFilesPrefix(String outputFilesPrefix) {\n        this.outputFilesPrefix = outputFilesPrefix;\n    }\n\n    /**\n     * @return the hideToolBar\n     */\n    public boolean isHideToolBar() {\n        return hideToolBar;\n    }\n\n    /**\n     * @param hideToolBar the hideToolBar to set\n     */\n    public void setHideToolBar(boolean hideToolBar) {\n        this.hideToolBar = hideToolBar;\n    }\n\n    /**\n     * @return the hideMenu\n     */\n    public boolean isHideMenu() {\n        return hideMenu;\n    }\n\n    /**\n     * @param hideMenu the hideMenu to set\n     */\n    public void setHideMenu(boolean hideMenu) {\n        this.hideMenu = hideMenu;\n    }\n\n    /**\n     * @return the hideWindowUI\n     */\n    public boolean isHideWindowUI() {\n        return hideWindowUI;\n    }\n\n    /**\n     * @param hideWindowUI the hideWindowUI to set\n     */\n    public void setHideWindowUI(boolean hideWindowUI) {\n        this.hideWindowUI = hideWindowUI;\n    }\n\n    /**\n     * @return the fitWindow\n     */\n    public boolean isFitWindow() {\n        return fitWindow;\n    }\n\n    /**\n     * @param fitWindow the fitWindow to set\n     */\n    public void setFitWindow(boolean fitWindow) {\n        this.fitWindow = fitWindow;\n    }\n\n    /**\n     * @return the centerWindow\n     */\n    public boolean isCenterWindow() {\n        return centerWindow;\n    }\n\n    /**\n     * @param centerWindow the centerWindow to set\n     */\n    public void setCenterWindow(boolean centerWindow) {\n        this.centerWindow = centerWindow;\n    }\n\n    /**\n     * @return the displayDocTitle\n     */\n    public boolean isDisplayDocTitle() {\n        return displayDocTitle;\n    }\n\n    /**\n     * @param displayDocTitle the displayDocTitle to set\n     */\n    public void setDisplayDocTitle(boolean displayDocTitle) {\n        this.displayDocTitle = displayDocTitle;\n    }\n\n    /**\n     * @return the noPrintScaling\n     */\n    public boolean isNoPrintScaling() {\n        return noPrintScaling;\n    }\n\n    /**\n     * @param noPrintScaling the noPrintScaling to set\n     */\n    public void setNoPrintScaling(boolean noPrintScaling) {\n        this.noPrintScaling = noPrintScaling;\n    }\n\n    public String getCommand() {\n        return COMMAND_SETVIEWER;\n    }\n\n    public String toString() {\n        StringBuffer retVal = new StringBuffer();\n        retVal.append(super.toString());\n        retVal.append((outputFile == null) ? \"\" : \"[outputDir=\" + outputFile.getAbsolutePath() + \"]\");\n        if (inputFileList != null) {\n            for (int i = 0; i < inputFileList.length; i++) {\n                retVal.append((inputFileList[i] == null) ? \"\" : \"[inputFileList[\" + i + \"]=\" + inputFileList[i].getFile().getAbsolutePath() + \"]\");\n            }\n        }\n        retVal.append(\"[mode=\" + mode + \"]\");\n        retVal.append(\"[layout=\" + layout + \"]\");\n        retVal.append(\"[nfsmode=\" + nfsmode + \"]\");\n        retVal.append(\"[direction=\" + direction + \"]\");\n        retVal.append(\"[hideToolBar=\" + hideToolBar + \"]\");\n        retVal.append(\"[hideWindowUI=\" + hideWindowUI + \"]\");\n        retVal.append(\"[fitWindow=\" + fitWindow + \"]\");\n        retVal.append(\"[centerWindow=\" + centerWindow + \"]\");\n        retVal.append(\"[displayDocTitle=\" + displayDocTitle + \"]\");\n        retVal.append(\"[noPrintScaling=\" + noPrintScaling + \"]\");\n        retVal.append((inputDirectory == null) ? \"\" : \"[inputDirectory=\" + inputDirectory.getAbsolutePath() + \"]\");\n        retVal.append(\"[command=\" + getCommand() + \"]\");\n        return retVal.toString();\n    }\n\n    /**\n     * @return the inputDirectory\n     */\n    public File getInputDirectory() {\n        return inputDirectory;\n    }\n\n    /**\n     * @param inputDirectory the inputDirectory to set\n     */\n    public void setInputDirectory(File inputDirectory) {\n        this.inputDirectory = inputDirectory;\n    }\n}\n",
		"id": "EvoSuiteBenchmark/109_pdfsam/src/main/java/org/pdfsam/console/business/dto/commands/SetViewerParsedCommandTest1.java",
		"test_prompt": "// SetViewerParsedCommandTest1.java\npackage org.pdfsam.console.business.dto.commands;\n\nimport java.io.File;\nimport org.pdfsam.console.business.dto.PdfFile;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link SetViewerParsedCommand}.\n* It contains ten unit test cases for the {@link SetViewerParsedCommand#isHideMenu()} method.\n*/\nclass SetViewerParsedCommandTest1 {"
	},
	{
		"original_code": "// SetViewerParsedCommand.java\n/*\n * Created on 06-Mar-2008\n * Copyright (C) 2008 by Andrea Vacondio.\n *\n *\n * This library is provided under dual licenses.\n * You may choose the terms of the Lesser General Public License version 2.1 or the General Public License version 2\n * License at your discretion.\n * \n * \n * This library is free software; you can redistribute it and/or\n * modify it under the terms of the GNU Lesser General Public\n * License as published by the Free Software Foundation;\n * version 2.1 of the License.\n * \n * This library is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n * Lesser General Public License for more details.\n * \n * You should have received a copy of the GNU Lesser General Public\n * License along with this library; if not, write to the Free Software\n * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA\n * \n * \n * \n * This program is free software; you can redistribute it and/or modify it under the terms of the \n * GNU General Public License as published by the Free Software Foundation; \n * either version 2 of the License.\n * \n * This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; \n * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. \n * See the GNU General Public License for more details.\n * You should have received a copy of the GNU General Public License along with this program; \n * if not, write to the Free Software Foundation, Inc., \n *  59 Temple Place, Suite 330, Boston, MA 02111-1307 USA\n */\npackage org.pdfsam.console.business.dto.commands;\n\nimport java.io.File;\nimport org.pdfsam.console.business.dto.PdfFile;\n\n/**\n * SetViewer parsed command dto filled by parsing service and used by worker service\n * @author Andrea Vacondio\n */\npublic class SetViewerParsedCommand extends AbstractParsedCommand {\n\n    private static final long serialVersionUID = -8634290084366871560L;\n\n    //arguments\n    public static final String F_ARG = \"f\";\n\n    public static final String O_ARG = \"o\";\n\n    public static final String P_ARG = \"p\";\n\n    public static final String D_ARG = \"d\";\n\n    public static final String M_ARG = \"mode\";\n\n    public static final String NFSM_ARG = \"nfsmode\";\n\n    public static final String L_ARG = \"layout\";\n\n    public static final String DIRECTION_ARG = \"direction\";\n\n    public static final String HIDETOOLBAR_ARG = \"hidetoolbar\";\n\n    public static final String HIDEMENU_ARG = \"hidemenu\";\n\n    public static final String HIDEWINDOWUI_ARG = \"hidewindowui\";\n\n    public static final String FITWINDOW_ARG = \"fitwindow\";\n\n    public static final String CENTERWINDOW_ARG = \"centerwindow\";\n\n    public static final String DOCTITLE_ARG = \"displaydoctitle\";\n\n    public static final String NOPRINTSCALING_ARG = \"noprintscaling\";\n\n    //layouts\n    public static final String L_SINGLEPAGE = \"singlepage\";\n\n    public static final String L_ONECOLUMN = \"onecolumn\";\n\n    public static final String L_TWOCOLUMNLEFT = \"twocolumnl\";\n\n    public static final String L_TWOCOLUMNRIGHT = \"twocolumnr\";\n\n    public static final String L_TWOPAGELEFT = \"twopagel\";\n\n    public static final String L_TWOPAGERIGHT = \"twopager\";\n\n    //modes\n    public static final String M_NONE = \"none\";\n\n    public static final String M_OUTLINES = \"outlines\";\n\n    public static final String M_THUMBS = \"thumbs\";\n\n    public static final String M_FULLSCREEN = \"fullscreen\";\n\n    public static final String M_OCONTENT = \"ocontent\";\n\n    public static final String M_ATTACHMENTS = \"attachments\";\n\n    //non full screen modes\n    public static final String NFSM_NONE = \"nfsnone\";\n\n    public static final String NFSM_OUTLINES = \"nfsoutlines\";\n\n    public static final String NFSM_THUMBS = \"nfsthumbs\";\n\n    public static final String NFSM_OCONTENT = \"nfsocontent\";\n\n    //directions\n    public static final String D_L2R = \"l2r\";\n\n    public static final String D_R2L = \"r2l\";\n\n    private File outputFile;\n\n    private int mode = 0;\n\n    private int layout = 0;\n\n    private int nfsmode = 0;\n\n    private int direction = 0;\n\n    private PdfFile[] inputFileList;\n\n    private File inputDirectory;\n\n    private String outputFilesPrefix = \"\";\n\n    private boolean hideToolBar = false;\n\n    private boolean hideMenu = false;\n\n    private boolean hideWindowUI = false;\n\n    private boolean fitWindow = false;\n\n    private boolean centerWindow = false;\n\n    private boolean displayDocTitle = false;\n\n    private boolean noPrintScaling = false;\n\n    public SetViewerParsedCommand() {\n    }\n\n    public SetViewerParsedCommand(File outputFile, int mode, int layout, int nfsmode, int direction, PdfFile[] inputFileList, String outputFilesPrefix, boolean hideToolBar, boolean hideMenu, boolean hideWindowUI, boolean fitWindow, boolean centerWindow, boolean displayDocTitle, boolean noPrintScaling, File inputDirectory) {\n        super();\n        this.outputFile = outputFile;\n        this.mode = mode;\n        this.layout = layout;\n        this.nfsmode = nfsmode;\n        this.direction = direction;\n        this.inputFileList = inputFileList;\n        this.outputFilesPrefix = outputFilesPrefix;\n        this.hideToolBar = hideToolBar;\n        this.hideMenu = hideMenu;\n        this.hideWindowUI = hideWindowUI;\n        this.fitWindow = fitWindow;\n        this.centerWindow = centerWindow;\n        this.displayDocTitle = displayDocTitle;\n        this.noPrintScaling = noPrintScaling;\n        this.inputDirectory = inputDirectory;\n    }\n\n    /**\n     * @deprecated use the constructor without the logFile parameter\n     */\n    public SetViewerParsedCommand(File outputFile, int mode, int layout, int nfsmode, int direction, PdfFile[] inputFileList, String outputFilesPrefix, boolean hideToolBar, boolean hideMenu, boolean hideWindowUI, boolean fitWindow, boolean centerWindow, boolean displayDocTitle, boolean noPrintScaling, File inputDirectory, boolean overwrite, boolean compress, File logFile, char outputPdfVersion) {\n        super(overwrite, compress, logFile, outputPdfVersion);\n        this.outputFile = outputFile;\n        this.mode = mode;\n        this.layout = layout;\n        this.nfsmode = nfsmode;\n        this.direction = direction;\n        this.inputFileList = inputFileList;\n        this.outputFilesPrefix = outputFilesPrefix;\n        this.hideToolBar = hideToolBar;\n        this.hideMenu = hideMenu;\n        this.hideWindowUI = hideWindowUI;\n        this.fitWindow = fitWindow;\n        this.centerWindow = centerWindow;\n        this.displayDocTitle = displayDocTitle;\n        this.noPrintScaling = noPrintScaling;\n        this.inputDirectory = inputDirectory;\n    }\n\n    public SetViewerParsedCommand(File outputFile, int mode, int layout, int nfsmode, int direction, PdfFile[] inputFileList, String outputFilesPrefix, boolean hideToolBar, boolean hideMenu, boolean hideWindowUI, boolean fitWindow, boolean centerWindow, boolean displayDocTitle, boolean noPrintScaling, File inputDirectory, boolean overwrite, boolean compress, char outputPdfVersion) {\n        super(overwrite, compress, outputPdfVersion);\n        this.outputFile = outputFile;\n        this.mode = mode;\n        this.layout = layout;\n        this.nfsmode = nfsmode;\n        this.direction = direction;\n        this.inputFileList = inputFileList;\n        this.outputFilesPrefix = outputFilesPrefix;\n        this.hideToolBar = hideToolBar;\n        this.hideMenu = hideMenu;\n        this.hideWindowUI = hideWindowUI;\n        this.fitWindow = fitWindow;\n        this.centerWindow = centerWindow;\n        this.displayDocTitle = displayDocTitle;\n        this.noPrintScaling = noPrintScaling;\n        this.inputDirectory = inputDirectory;\n    }\n\n    /**\n     * @return the outputFile\n     */\n    public File getOutputFile() {\n        return outputFile;\n    }\n\n    /**\n     * @param outputFile the outputFile to set\n     */\n    public void setOutputFile(File outputFile) {\n        this.outputFile = outputFile;\n    }\n\n    /**\n     * @return the mode\n     */\n    public int getMode() {\n        return mode;\n    }\n\n    /**\n     * @param mode the mode to set\n     */\n    public void setMode(int mode) {\n        this.mode = mode;\n    }\n\n    /**\n     * @return the layout\n     */\n    public int getLayout() {\n        return layout;\n    }\n\n    /**\n     * @param layout the layout to set\n     */\n    public void setLayout(int layout) {\n        this.layout = layout;\n    }\n\n    /**\n     * @return the nfsmode\n     */\n    public int getNfsmode() {\n        return nfsmode;\n    }\n\n    /**\n     * @param nfsmode the nfsmode to set\n     */\n    public void setNfsmode(int nfsmode) {\n        this.nfsmode = nfsmode;\n    }\n\n    /**\n     * @return the direction\n     */\n    public int getDirection() {\n        return direction;\n    }\n\n    /**\n     * @param direction the direction to set\n     */\n    public void setDirection(int direction) {\n        this.direction = direction;\n    }\n\n    /**\n     * @return the inputFileList\n     */\n    public PdfFile[] getInputFileList() {\n        return inputFileList;\n    }\n\n    /**\n     * @param inputFileList the inputFileList to set\n     */\n    public void setInputFileList(PdfFile[] inputFileList) {\n        this.inputFileList = inputFileList;\n    }\n\n    /**\n     * @return the outputFilesPrefix\n     */\n    public String getOutputFilesPrefix() {\n        return outputFilesPrefix;\n    }\n\n    /**\n     * @param outputFilesPrefix the outputFilesPrefix to set\n     */\n    public void setOutputFilesPrefix(String outputFilesPrefix) {\n        this.outputFilesPrefix = outputFilesPrefix;\n    }\n\n    /**\n     * @return the hideToolBar\n     */\n    public boolean isHideToolBar() {\n        return hideToolBar;\n    }\n\n    /**\n     * @param hideToolBar the hideToolBar to set\n     */\n    public void setHideToolBar(boolean hideToolBar) {\n        this.hideToolBar = hideToolBar;\n    }\n\n    /**\n     * @return the hideMenu\n     */\n    public boolean isHideMenu() {\n        return hideMenu;\n    }\n\n    /**\n     * @param hideMenu the hideMenu to set\n     */\n    public void setHideMenu(boolean hideMenu) {\n        this.hideMenu = hideMenu;\n    }\n\n    /**\n     * @return the hideWindowUI\n     */\n    public boolean isHideWindowUI() {\n        return hideWindowUI;\n    }\n\n    /**\n     * @param hideWindowUI the hideWindowUI to set\n     */\n    public void setHideWindowUI(boolean hideWindowUI) {\n        this.hideWindowUI = hideWindowUI;\n    }\n\n    /**\n     * @return the fitWindow\n     */\n    public boolean isFitWindow() {\n        return fitWindow;\n    }\n\n    /**\n     * @param fitWindow the fitWindow to set\n     */\n    public void setFitWindow(boolean fitWindow) {\n        this.fitWindow = fitWindow;\n    }\n\n    /**\n     * @return the centerWindow\n     */\n    public boolean isCenterWindow() {\n        return centerWindow;\n    }\n\n    /**\n     * @param centerWindow the centerWindow to set\n     */\n    public void setCenterWindow(boolean centerWindow) {\n        this.centerWindow = centerWindow;\n    }\n\n    /**\n     * @return the displayDocTitle\n     */\n    public boolean isDisplayDocTitle() {\n        return displayDocTitle;\n    }\n\n    /**\n     * @param displayDocTitle the displayDocTitle to set\n     */\n    public void setDisplayDocTitle(boolean displayDocTitle) {\n        this.displayDocTitle = displayDocTitle;\n    }\n\n    /**\n     * @return the noPrintScaling\n     */\n    public boolean isNoPrintScaling() {\n        return noPrintScaling;\n    }\n\n    /**\n     * @param noPrintScaling the noPrintScaling to set\n     */\n    public void setNoPrintScaling(boolean noPrintScaling) {\n        this.noPrintScaling = noPrintScaling;\n    }\n\n    public String getCommand() {\n        return COMMAND_SETVIEWER;\n    }\n\n    public String toString() {\n        StringBuffer retVal = new StringBuffer();\n        retVal.append(super.toString());\n        retVal.append((outputFile == null) ? \"\" : \"[outputDir=\" + outputFile.getAbsolutePath() + \"]\");\n        if (inputFileList != null) {\n            for (int i = 0; i < inputFileList.length; i++) {\n                retVal.append((inputFileList[i] == null) ? \"\" : \"[inputFileList[\" + i + \"]=\" + inputFileList[i].getFile().getAbsolutePath() + \"]\");\n            }\n        }\n        retVal.append(\"[mode=\" + mode + \"]\");\n        retVal.append(\"[layout=\" + layout + \"]\");\n        retVal.append(\"[nfsmode=\" + nfsmode + \"]\");\n        retVal.append(\"[direction=\" + direction + \"]\");\n        retVal.append(\"[hideToolBar=\" + hideToolBar + \"]\");\n        retVal.append(\"[hideWindowUI=\" + hideWindowUI + \"]\");\n        retVal.append(\"[fitWindow=\" + fitWindow + \"]\");\n        retVal.append(\"[centerWindow=\" + centerWindow + \"]\");\n        retVal.append(\"[displayDocTitle=\" + displayDocTitle + \"]\");\n        retVal.append(\"[noPrintScaling=\" + noPrintScaling + \"]\");\n        retVal.append((inputDirectory == null) ? \"\" : \"[inputDirectory=\" + inputDirectory.getAbsolutePath() + \"]\");\n        retVal.append(\"[command=\" + getCommand() + \"]\");\n        return retVal.toString();\n    }\n\n    /**\n     * @return the inputDirectory\n     */\n    public File getInputDirectory() {\n        return inputDirectory;\n    }\n\n    /**\n     * @param inputDirectory the inputDirectory to set\n     */\n    public void setInputDirectory(File inputDirectory) {\n        this.inputDirectory = inputDirectory;\n    }\n}\n",
		"id": "EvoSuiteBenchmark/109_pdfsam/src/main/java/org/pdfsam/console/business/dto/commands/SetViewerParsedCommandTest2.java",
		"test_prompt": "// SetViewerParsedCommandTest2.java\npackage org.pdfsam.console.business.dto.commands;\n\nimport java.io.File;\nimport org.pdfsam.console.business.dto.PdfFile;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link SetViewerParsedCommand}.\n* It contains ten unit test cases for the {@link SetViewerParsedCommand#isHideWindowUI()} method.\n*/\nclass SetViewerParsedCommandTest2 {"
	},
	{
		"original_code": "// SetViewerParsedCommand.java\n/*\n * Created on 06-Mar-2008\n * Copyright (C) 2008 by Andrea Vacondio.\n *\n *\n * This library is provided under dual licenses.\n * You may choose the terms of the Lesser General Public License version 2.1 or the General Public License version 2\n * License at your discretion.\n * \n * \n * This library is free software; you can redistribute it and/or\n * modify it under the terms of the GNU Lesser General Public\n * License as published by the Free Software Foundation;\n * version 2.1 of the License.\n * \n * This library is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n * Lesser General Public License for more details.\n * \n * You should have received a copy of the GNU Lesser General Public\n * License along with this library; if not, write to the Free Software\n * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA\n * \n * \n * \n * This program is free software; you can redistribute it and/or modify it under the terms of the \n * GNU General Public License as published by the Free Software Foundation; \n * either version 2 of the License.\n * \n * This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; \n * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. \n * See the GNU General Public License for more details.\n * You should have received a copy of the GNU General Public License along with this program; \n * if not, write to the Free Software Foundation, Inc., \n *  59 Temple Place, Suite 330, Boston, MA 02111-1307 USA\n */\npackage org.pdfsam.console.business.dto.commands;\n\nimport java.io.File;\nimport org.pdfsam.console.business.dto.PdfFile;\n\n/**\n * SetViewer parsed command dto filled by parsing service and used by worker service\n * @author Andrea Vacondio\n */\npublic class SetViewerParsedCommand extends AbstractParsedCommand {\n\n    private static final long serialVersionUID = -8634290084366871560L;\n\n    //arguments\n    public static final String F_ARG = \"f\";\n\n    public static final String O_ARG = \"o\";\n\n    public static final String P_ARG = \"p\";\n\n    public static final String D_ARG = \"d\";\n\n    public static final String M_ARG = \"mode\";\n\n    public static final String NFSM_ARG = \"nfsmode\";\n\n    public static final String L_ARG = \"layout\";\n\n    public static final String DIRECTION_ARG = \"direction\";\n\n    public static final String HIDETOOLBAR_ARG = \"hidetoolbar\";\n\n    public static final String HIDEMENU_ARG = \"hidemenu\";\n\n    public static final String HIDEWINDOWUI_ARG = \"hidewindowui\";\n\n    public static final String FITWINDOW_ARG = \"fitwindow\";\n\n    public static final String CENTERWINDOW_ARG = \"centerwindow\";\n\n    public static final String DOCTITLE_ARG = \"displaydoctitle\";\n\n    public static final String NOPRINTSCALING_ARG = \"noprintscaling\";\n\n    //layouts\n    public static final String L_SINGLEPAGE = \"singlepage\";\n\n    public static final String L_ONECOLUMN = \"onecolumn\";\n\n    public static final String L_TWOCOLUMNLEFT = \"twocolumnl\";\n\n    public static final String L_TWOCOLUMNRIGHT = \"twocolumnr\";\n\n    public static final String L_TWOPAGELEFT = \"twopagel\";\n\n    public static final String L_TWOPAGERIGHT = \"twopager\";\n\n    //modes\n    public static final String M_NONE = \"none\";\n\n    public static final String M_OUTLINES = \"outlines\";\n\n    public static final String M_THUMBS = \"thumbs\";\n\n    public static final String M_FULLSCREEN = \"fullscreen\";\n\n    public static final String M_OCONTENT = \"ocontent\";\n\n    public static final String M_ATTACHMENTS = \"attachments\";\n\n    //non full screen modes\n    public static final String NFSM_NONE = \"nfsnone\";\n\n    public static final String NFSM_OUTLINES = \"nfsoutlines\";\n\n    public static final String NFSM_THUMBS = \"nfsthumbs\";\n\n    public static final String NFSM_OCONTENT = \"nfsocontent\";\n\n    //directions\n    public static final String D_L2R = \"l2r\";\n\n    public static final String D_R2L = \"r2l\";\n\n    private File outputFile;\n\n    private int mode = 0;\n\n    private int layout = 0;\n\n    private int nfsmode = 0;\n\n    private int direction = 0;\n\n    private PdfFile[] inputFileList;\n\n    private File inputDirectory;\n\n    private String outputFilesPrefix = \"\";\n\n    private boolean hideToolBar = false;\n\n    private boolean hideMenu = false;\n\n    private boolean hideWindowUI = false;\n\n    private boolean fitWindow = false;\n\n    private boolean centerWindow = false;\n\n    private boolean displayDocTitle = false;\n\n    private boolean noPrintScaling = false;\n\n    public SetViewerParsedCommand() {\n    }\n\n    public SetViewerParsedCommand(File outputFile, int mode, int layout, int nfsmode, int direction, PdfFile[] inputFileList, String outputFilesPrefix, boolean hideToolBar, boolean hideMenu, boolean hideWindowUI, boolean fitWindow, boolean centerWindow, boolean displayDocTitle, boolean noPrintScaling, File inputDirectory) {\n        super();\n        this.outputFile = outputFile;\n        this.mode = mode;\n        this.layout = layout;\n        this.nfsmode = nfsmode;\n        this.direction = direction;\n        this.inputFileList = inputFileList;\n        this.outputFilesPrefix = outputFilesPrefix;\n        this.hideToolBar = hideToolBar;\n        this.hideMenu = hideMenu;\n        this.hideWindowUI = hideWindowUI;\n        this.fitWindow = fitWindow;\n        this.centerWindow = centerWindow;\n        this.displayDocTitle = displayDocTitle;\n        this.noPrintScaling = noPrintScaling;\n        this.inputDirectory = inputDirectory;\n    }\n\n    /**\n     * @deprecated use the constructor without the logFile parameter\n     */\n    public SetViewerParsedCommand(File outputFile, int mode, int layout, int nfsmode, int direction, PdfFile[] inputFileList, String outputFilesPrefix, boolean hideToolBar, boolean hideMenu, boolean hideWindowUI, boolean fitWindow, boolean centerWindow, boolean displayDocTitle, boolean noPrintScaling, File inputDirectory, boolean overwrite, boolean compress, File logFile, char outputPdfVersion) {\n        super(overwrite, compress, logFile, outputPdfVersion);\n        this.outputFile = outputFile;\n        this.mode = mode;\n        this.layout = layout;\n        this.nfsmode = nfsmode;\n        this.direction = direction;\n        this.inputFileList = inputFileList;\n        this.outputFilesPrefix = outputFilesPrefix;\n        this.hideToolBar = hideToolBar;\n        this.hideMenu = hideMenu;\n        this.hideWindowUI = hideWindowUI;\n        this.fitWindow = fitWindow;\n        this.centerWindow = centerWindow;\n        this.displayDocTitle = displayDocTitle;\n        this.noPrintScaling = noPrintScaling;\n        this.inputDirectory = inputDirectory;\n    }\n\n    public SetViewerParsedCommand(File outputFile, int mode, int layout, int nfsmode, int direction, PdfFile[] inputFileList, String outputFilesPrefix, boolean hideToolBar, boolean hideMenu, boolean hideWindowUI, boolean fitWindow, boolean centerWindow, boolean displayDocTitle, boolean noPrintScaling, File inputDirectory, boolean overwrite, boolean compress, char outputPdfVersion) {\n        super(overwrite, compress, outputPdfVersion);\n        this.outputFile = outputFile;\n        this.mode = mode;\n        this.layout = layout;\n        this.nfsmode = nfsmode;\n        this.direction = direction;\n        this.inputFileList = inputFileList;\n        this.outputFilesPrefix = outputFilesPrefix;\n        this.hideToolBar = hideToolBar;\n        this.hideMenu = hideMenu;\n        this.hideWindowUI = hideWindowUI;\n        this.fitWindow = fitWindow;\n        this.centerWindow = centerWindow;\n        this.displayDocTitle = displayDocTitle;\n        this.noPrintScaling = noPrintScaling;\n        this.inputDirectory = inputDirectory;\n    }\n\n    /**\n     * @return the outputFile\n     */\n    public File getOutputFile() {\n        return outputFile;\n    }\n\n    /**\n     * @param outputFile the outputFile to set\n     */\n    public void setOutputFile(File outputFile) {\n        this.outputFile = outputFile;\n    }\n\n    /**\n     * @return the mode\n     */\n    public int getMode() {\n        return mode;\n    }\n\n    /**\n     * @param mode the mode to set\n     */\n    public void setMode(int mode) {\n        this.mode = mode;\n    }\n\n    /**\n     * @return the layout\n     */\n    public int getLayout() {\n        return layout;\n    }\n\n    /**\n     * @param layout the layout to set\n     */\n    public void setLayout(int layout) {\n        this.layout = layout;\n    }\n\n    /**\n     * @return the nfsmode\n     */\n    public int getNfsmode() {\n        return nfsmode;\n    }\n\n    /**\n     * @param nfsmode the nfsmode to set\n     */\n    public void setNfsmode(int nfsmode) {\n        this.nfsmode = nfsmode;\n    }\n\n    /**\n     * @return the direction\n     */\n    public int getDirection() {\n        return direction;\n    }\n\n    /**\n     * @param direction the direction to set\n     */\n    public void setDirection(int direction) {\n        this.direction = direction;\n    }\n\n    /**\n     * @return the inputFileList\n     */\n    public PdfFile[] getInputFileList() {\n        return inputFileList;\n    }\n\n    /**\n     * @param inputFileList the inputFileList to set\n     */\n    public void setInputFileList(PdfFile[] inputFileList) {\n        this.inputFileList = inputFileList;\n    }\n\n    /**\n     * @return the outputFilesPrefix\n     */\n    public String getOutputFilesPrefix() {\n        return outputFilesPrefix;\n    }\n\n    /**\n     * @param outputFilesPrefix the outputFilesPrefix to set\n     */\n    public void setOutputFilesPrefix(String outputFilesPrefix) {\n        this.outputFilesPrefix = outputFilesPrefix;\n    }\n\n    /**\n     * @return the hideToolBar\n     */\n    public boolean isHideToolBar() {\n        return hideToolBar;\n    }\n\n    /**\n     * @param hideToolBar the hideToolBar to set\n     */\n    public void setHideToolBar(boolean hideToolBar) {\n        this.hideToolBar = hideToolBar;\n    }\n\n    /**\n     * @return the hideMenu\n     */\n    public boolean isHideMenu() {\n        return hideMenu;\n    }\n\n    /**\n     * @param hideMenu the hideMenu to set\n     */\n    public void setHideMenu(boolean hideMenu) {\n        this.hideMenu = hideMenu;\n    }\n\n    /**\n     * @return the hideWindowUI\n     */\n    public boolean isHideWindowUI() {\n        return hideWindowUI;\n    }\n\n    /**\n     * @param hideWindowUI the hideWindowUI to set\n     */\n    public void setHideWindowUI(boolean hideWindowUI) {\n        this.hideWindowUI = hideWindowUI;\n    }\n\n    /**\n     * @return the fitWindow\n     */\n    public boolean isFitWindow() {\n        return fitWindow;\n    }\n\n    /**\n     * @param fitWindow the fitWindow to set\n     */\n    public void setFitWindow(boolean fitWindow) {\n        this.fitWindow = fitWindow;\n    }\n\n    /**\n     * @return the centerWindow\n     */\n    public boolean isCenterWindow() {\n        return centerWindow;\n    }\n\n    /**\n     * @param centerWindow the centerWindow to set\n     */\n    public void setCenterWindow(boolean centerWindow) {\n        this.centerWindow = centerWindow;\n    }\n\n    /**\n     * @return the displayDocTitle\n     */\n    public boolean isDisplayDocTitle() {\n        return displayDocTitle;\n    }\n\n    /**\n     * @param displayDocTitle the displayDocTitle to set\n     */\n    public void setDisplayDocTitle(boolean displayDocTitle) {\n        this.displayDocTitle = displayDocTitle;\n    }\n\n    /**\n     * @return the noPrintScaling\n     */\n    public boolean isNoPrintScaling() {\n        return noPrintScaling;\n    }\n\n    /**\n     * @param noPrintScaling the noPrintScaling to set\n     */\n    public void setNoPrintScaling(boolean noPrintScaling) {\n        this.noPrintScaling = noPrintScaling;\n    }\n\n    public String getCommand() {\n        return COMMAND_SETVIEWER;\n    }\n\n    public String toString() {\n        StringBuffer retVal = new StringBuffer();\n        retVal.append(super.toString());\n        retVal.append((outputFile == null) ? \"\" : \"[outputDir=\" + outputFile.getAbsolutePath() + \"]\");\n        if (inputFileList != null) {\n            for (int i = 0; i < inputFileList.length; i++) {\n                retVal.append((inputFileList[i] == null) ? \"\" : \"[inputFileList[\" + i + \"]=\" + inputFileList[i].getFile().getAbsolutePath() + \"]\");\n            }\n        }\n        retVal.append(\"[mode=\" + mode + \"]\");\n        retVal.append(\"[layout=\" + layout + \"]\");\n        retVal.append(\"[nfsmode=\" + nfsmode + \"]\");\n        retVal.append(\"[direction=\" + direction + \"]\");\n        retVal.append(\"[hideToolBar=\" + hideToolBar + \"]\");\n        retVal.append(\"[hideWindowUI=\" + hideWindowUI + \"]\");\n        retVal.append(\"[fitWindow=\" + fitWindow + \"]\");\n        retVal.append(\"[centerWindow=\" + centerWindow + \"]\");\n        retVal.append(\"[displayDocTitle=\" + displayDocTitle + \"]\");\n        retVal.append(\"[noPrintScaling=\" + noPrintScaling + \"]\");\n        retVal.append((inputDirectory == null) ? \"\" : \"[inputDirectory=\" + inputDirectory.getAbsolutePath() + \"]\");\n        retVal.append(\"[command=\" + getCommand() + \"]\");\n        return retVal.toString();\n    }\n\n    /**\n     * @return the inputDirectory\n     */\n    public File getInputDirectory() {\n        return inputDirectory;\n    }\n\n    /**\n     * @param inputDirectory the inputDirectory to set\n     */\n    public void setInputDirectory(File inputDirectory) {\n        this.inputDirectory = inputDirectory;\n    }\n}\n",
		"id": "EvoSuiteBenchmark/109_pdfsam/src/main/java/org/pdfsam/console/business/dto/commands/SetViewerParsedCommandTest3.java",
		"test_prompt": "// SetViewerParsedCommandTest3.java\npackage org.pdfsam.console.business.dto.commands;\n\nimport java.io.File;\nimport org.pdfsam.console.business.dto.PdfFile;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link SetViewerParsedCommand}.\n* It contains ten unit test cases for the {@link SetViewerParsedCommand#isFitWindow()} method.\n*/\nclass SetViewerParsedCommandTest3 {"
	},
	{
		"original_code": "// SetViewerParsedCommand.java\n/*\n * Created on 06-Mar-2008\n * Copyright (C) 2008 by Andrea Vacondio.\n *\n *\n * This library is provided under dual licenses.\n * You may choose the terms of the Lesser General Public License version 2.1 or the General Public License version 2\n * License at your discretion.\n * \n * \n * This library is free software; you can redistribute it and/or\n * modify it under the terms of the GNU Lesser General Public\n * License as published by the Free Software Foundation;\n * version 2.1 of the License.\n * \n * This library is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n * Lesser General Public License for more details.\n * \n * You should have received a copy of the GNU Lesser General Public\n * License along with this library; if not, write to the Free Software\n * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA\n * \n * \n * \n * This program is free software; you can redistribute it and/or modify it under the terms of the \n * GNU General Public License as published by the Free Software Foundation; \n * either version 2 of the License.\n * \n * This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; \n * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. \n * See the GNU General Public License for more details.\n * You should have received a copy of the GNU General Public License along with this program; \n * if not, write to the Free Software Foundation, Inc., \n *  59 Temple Place, Suite 330, Boston, MA 02111-1307 USA\n */\npackage org.pdfsam.console.business.dto.commands;\n\nimport java.io.File;\nimport org.pdfsam.console.business.dto.PdfFile;\n\n/**\n * SetViewer parsed command dto filled by parsing service and used by worker service\n * @author Andrea Vacondio\n */\npublic class SetViewerParsedCommand extends AbstractParsedCommand {\n\n    private static final long serialVersionUID = -8634290084366871560L;\n\n    //arguments\n    public static final String F_ARG = \"f\";\n\n    public static final String O_ARG = \"o\";\n\n    public static final String P_ARG = \"p\";\n\n    public static final String D_ARG = \"d\";\n\n    public static final String M_ARG = \"mode\";\n\n    public static final String NFSM_ARG = \"nfsmode\";\n\n    public static final String L_ARG = \"layout\";\n\n    public static final String DIRECTION_ARG = \"direction\";\n\n    public static final String HIDETOOLBAR_ARG = \"hidetoolbar\";\n\n    public static final String HIDEMENU_ARG = \"hidemenu\";\n\n    public static final String HIDEWINDOWUI_ARG = \"hidewindowui\";\n\n    public static final String FITWINDOW_ARG = \"fitwindow\";\n\n    public static final String CENTERWINDOW_ARG = \"centerwindow\";\n\n    public static final String DOCTITLE_ARG = \"displaydoctitle\";\n\n    public static final String NOPRINTSCALING_ARG = \"noprintscaling\";\n\n    //layouts\n    public static final String L_SINGLEPAGE = \"singlepage\";\n\n    public static final String L_ONECOLUMN = \"onecolumn\";\n\n    public static final String L_TWOCOLUMNLEFT = \"twocolumnl\";\n\n    public static final String L_TWOCOLUMNRIGHT = \"twocolumnr\";\n\n    public static final String L_TWOPAGELEFT = \"twopagel\";\n\n    public static final String L_TWOPAGERIGHT = \"twopager\";\n\n    //modes\n    public static final String M_NONE = \"none\";\n\n    public static final String M_OUTLINES = \"outlines\";\n\n    public static final String M_THUMBS = \"thumbs\";\n\n    public static final String M_FULLSCREEN = \"fullscreen\";\n\n    public static final String M_OCONTENT = \"ocontent\";\n\n    public static final String M_ATTACHMENTS = \"attachments\";\n\n    //non full screen modes\n    public static final String NFSM_NONE = \"nfsnone\";\n\n    public static final String NFSM_OUTLINES = \"nfsoutlines\";\n\n    public static final String NFSM_THUMBS = \"nfsthumbs\";\n\n    public static final String NFSM_OCONTENT = \"nfsocontent\";\n\n    //directions\n    public static final String D_L2R = \"l2r\";\n\n    public static final String D_R2L = \"r2l\";\n\n    private File outputFile;\n\n    private int mode = 0;\n\n    private int layout = 0;\n\n    private int nfsmode = 0;\n\n    private int direction = 0;\n\n    private PdfFile[] inputFileList;\n\n    private File inputDirectory;\n\n    private String outputFilesPrefix = \"\";\n\n    private boolean hideToolBar = false;\n\n    private boolean hideMenu = false;\n\n    private boolean hideWindowUI = false;\n\n    private boolean fitWindow = false;\n\n    private boolean centerWindow = false;\n\n    private boolean displayDocTitle = false;\n\n    private boolean noPrintScaling = false;\n\n    public SetViewerParsedCommand() {\n    }\n\n    public SetViewerParsedCommand(File outputFile, int mode, int layout, int nfsmode, int direction, PdfFile[] inputFileList, String outputFilesPrefix, boolean hideToolBar, boolean hideMenu, boolean hideWindowUI, boolean fitWindow, boolean centerWindow, boolean displayDocTitle, boolean noPrintScaling, File inputDirectory) {\n        super();\n        this.outputFile = outputFile;\n        this.mode = mode;\n        this.layout = layout;\n        this.nfsmode = nfsmode;\n        this.direction = direction;\n        this.inputFileList = inputFileList;\n        this.outputFilesPrefix = outputFilesPrefix;\n        this.hideToolBar = hideToolBar;\n        this.hideMenu = hideMenu;\n        this.hideWindowUI = hideWindowUI;\n        this.fitWindow = fitWindow;\n        this.centerWindow = centerWindow;\n        this.displayDocTitle = displayDocTitle;\n        this.noPrintScaling = noPrintScaling;\n        this.inputDirectory = inputDirectory;\n    }\n\n    /**\n     * @deprecated use the constructor without the logFile parameter\n     */\n    public SetViewerParsedCommand(File outputFile, int mode, int layout, int nfsmode, int direction, PdfFile[] inputFileList, String outputFilesPrefix, boolean hideToolBar, boolean hideMenu, boolean hideWindowUI, boolean fitWindow, boolean centerWindow, boolean displayDocTitle, boolean noPrintScaling, File inputDirectory, boolean overwrite, boolean compress, File logFile, char outputPdfVersion) {\n        super(overwrite, compress, logFile, outputPdfVersion);\n        this.outputFile = outputFile;\n        this.mode = mode;\n        this.layout = layout;\n        this.nfsmode = nfsmode;\n        this.direction = direction;\n        this.inputFileList = inputFileList;\n        this.outputFilesPrefix = outputFilesPrefix;\n        this.hideToolBar = hideToolBar;\n        this.hideMenu = hideMenu;\n        this.hideWindowUI = hideWindowUI;\n        this.fitWindow = fitWindow;\n        this.centerWindow = centerWindow;\n        this.displayDocTitle = displayDocTitle;\n        this.noPrintScaling = noPrintScaling;\n        this.inputDirectory = inputDirectory;\n    }\n\n    public SetViewerParsedCommand(File outputFile, int mode, int layout, int nfsmode, int direction, PdfFile[] inputFileList, String outputFilesPrefix, boolean hideToolBar, boolean hideMenu, boolean hideWindowUI, boolean fitWindow, boolean centerWindow, boolean displayDocTitle, boolean noPrintScaling, File inputDirectory, boolean overwrite, boolean compress, char outputPdfVersion) {\n        super(overwrite, compress, outputPdfVersion);\n        this.outputFile = outputFile;\n        this.mode = mode;\n        this.layout = layout;\n        this.nfsmode = nfsmode;\n        this.direction = direction;\n        this.inputFileList = inputFileList;\n        this.outputFilesPrefix = outputFilesPrefix;\n        this.hideToolBar = hideToolBar;\n        this.hideMenu = hideMenu;\n        this.hideWindowUI = hideWindowUI;\n        this.fitWindow = fitWindow;\n        this.centerWindow = centerWindow;\n        this.displayDocTitle = displayDocTitle;\n        this.noPrintScaling = noPrintScaling;\n        this.inputDirectory = inputDirectory;\n    }\n\n    /**\n     * @return the outputFile\n     */\n    public File getOutputFile() {\n        return outputFile;\n    }\n\n    /**\n     * @param outputFile the outputFile to set\n     */\n    public void setOutputFile(File outputFile) {\n        this.outputFile = outputFile;\n    }\n\n    /**\n     * @return the mode\n     */\n    public int getMode() {\n        return mode;\n    }\n\n    /**\n     * @param mode the mode to set\n     */\n    public void setMode(int mode) {\n        this.mode = mode;\n    }\n\n    /**\n     * @return the layout\n     */\n    public int getLayout() {\n        return layout;\n    }\n\n    /**\n     * @param layout the layout to set\n     */\n    public void setLayout(int layout) {\n        this.layout = layout;\n    }\n\n    /**\n     * @return the nfsmode\n     */\n    public int getNfsmode() {\n        return nfsmode;\n    }\n\n    /**\n     * @param nfsmode the nfsmode to set\n     */\n    public void setNfsmode(int nfsmode) {\n        this.nfsmode = nfsmode;\n    }\n\n    /**\n     * @return the direction\n     */\n    public int getDirection() {\n        return direction;\n    }\n\n    /**\n     * @param direction the direction to set\n     */\n    public void setDirection(int direction) {\n        this.direction = direction;\n    }\n\n    /**\n     * @return the inputFileList\n     */\n    public PdfFile[] getInputFileList() {\n        return inputFileList;\n    }\n\n    /**\n     * @param inputFileList the inputFileList to set\n     */\n    public void setInputFileList(PdfFile[] inputFileList) {\n        this.inputFileList = inputFileList;\n    }\n\n    /**\n     * @return the outputFilesPrefix\n     */\n    public String getOutputFilesPrefix() {\n        return outputFilesPrefix;\n    }\n\n    /**\n     * @param outputFilesPrefix the outputFilesPrefix to set\n     */\n    public void setOutputFilesPrefix(String outputFilesPrefix) {\n        this.outputFilesPrefix = outputFilesPrefix;\n    }\n\n    /**\n     * @return the hideToolBar\n     */\n    public boolean isHideToolBar() {\n        return hideToolBar;\n    }\n\n    /**\n     * @param hideToolBar the hideToolBar to set\n     */\n    public void setHideToolBar(boolean hideToolBar) {\n        this.hideToolBar = hideToolBar;\n    }\n\n    /**\n     * @return the hideMenu\n     */\n    public boolean isHideMenu() {\n        return hideMenu;\n    }\n\n    /**\n     * @param hideMenu the hideMenu to set\n     */\n    public void setHideMenu(boolean hideMenu) {\n        this.hideMenu = hideMenu;\n    }\n\n    /**\n     * @return the hideWindowUI\n     */\n    public boolean isHideWindowUI() {\n        return hideWindowUI;\n    }\n\n    /**\n     * @param hideWindowUI the hideWindowUI to set\n     */\n    public void setHideWindowUI(boolean hideWindowUI) {\n        this.hideWindowUI = hideWindowUI;\n    }\n\n    /**\n     * @return the fitWindow\n     */\n    public boolean isFitWindow() {\n        return fitWindow;\n    }\n\n    /**\n     * @param fitWindow the fitWindow to set\n     */\n    public void setFitWindow(boolean fitWindow) {\n        this.fitWindow = fitWindow;\n    }\n\n    /**\n     * @return the centerWindow\n     */\n    public boolean isCenterWindow() {\n        return centerWindow;\n    }\n\n    /**\n     * @param centerWindow the centerWindow to set\n     */\n    public void setCenterWindow(boolean centerWindow) {\n        this.centerWindow = centerWindow;\n    }\n\n    /**\n     * @return the displayDocTitle\n     */\n    public boolean isDisplayDocTitle() {\n        return displayDocTitle;\n    }\n\n    /**\n     * @param displayDocTitle the displayDocTitle to set\n     */\n    public void setDisplayDocTitle(boolean displayDocTitle) {\n        this.displayDocTitle = displayDocTitle;\n    }\n\n    /**\n     * @return the noPrintScaling\n     */\n    public boolean isNoPrintScaling() {\n        return noPrintScaling;\n    }\n\n    /**\n     * @param noPrintScaling the noPrintScaling to set\n     */\n    public void setNoPrintScaling(boolean noPrintScaling) {\n        this.noPrintScaling = noPrintScaling;\n    }\n\n    public String getCommand() {\n        return COMMAND_SETVIEWER;\n    }\n\n    public String toString() {\n        StringBuffer retVal = new StringBuffer();\n        retVal.append(super.toString());\n        retVal.append((outputFile == null) ? \"\" : \"[outputDir=\" + outputFile.getAbsolutePath() + \"]\");\n        if (inputFileList != null) {\n            for (int i = 0; i < inputFileList.length; i++) {\n                retVal.append((inputFileList[i] == null) ? \"\" : \"[inputFileList[\" + i + \"]=\" + inputFileList[i].getFile().getAbsolutePath() + \"]\");\n            }\n        }\n        retVal.append(\"[mode=\" + mode + \"]\");\n        retVal.append(\"[layout=\" + layout + \"]\");\n        retVal.append(\"[nfsmode=\" + nfsmode + \"]\");\n        retVal.append(\"[direction=\" + direction + \"]\");\n        retVal.append(\"[hideToolBar=\" + hideToolBar + \"]\");\n        retVal.append(\"[hideWindowUI=\" + hideWindowUI + \"]\");\n        retVal.append(\"[fitWindow=\" + fitWindow + \"]\");\n        retVal.append(\"[centerWindow=\" + centerWindow + \"]\");\n        retVal.append(\"[displayDocTitle=\" + displayDocTitle + \"]\");\n        retVal.append(\"[noPrintScaling=\" + noPrintScaling + \"]\");\n        retVal.append((inputDirectory == null) ? \"\" : \"[inputDirectory=\" + inputDirectory.getAbsolutePath() + \"]\");\n        retVal.append(\"[command=\" + getCommand() + \"]\");\n        return retVal.toString();\n    }\n\n    /**\n     * @return the inputDirectory\n     */\n    public File getInputDirectory() {\n        return inputDirectory;\n    }\n\n    /**\n     * @param inputDirectory the inputDirectory to set\n     */\n    public void setInputDirectory(File inputDirectory) {\n        this.inputDirectory = inputDirectory;\n    }\n}\n",
		"id": "EvoSuiteBenchmark/109_pdfsam/src/main/java/org/pdfsam/console/business/dto/commands/SetViewerParsedCommandTest4.java",
		"test_prompt": "// SetViewerParsedCommandTest4.java\npackage org.pdfsam.console.business.dto.commands;\n\nimport java.io.File;\nimport org.pdfsam.console.business.dto.PdfFile;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link SetViewerParsedCommand}.\n* It contains ten unit test cases for the {@link SetViewerParsedCommand#isCenterWindow()} method.\n*/\nclass SetViewerParsedCommandTest4 {"
	},
	{
		"original_code": "// SetViewerParsedCommand.java\n/*\n * Created on 06-Mar-2008\n * Copyright (C) 2008 by Andrea Vacondio.\n *\n *\n * This library is provided under dual licenses.\n * You may choose the terms of the Lesser General Public License version 2.1 or the General Public License version 2\n * License at your discretion.\n * \n * \n * This library is free software; you can redistribute it and/or\n * modify it under the terms of the GNU Lesser General Public\n * License as published by the Free Software Foundation;\n * version 2.1 of the License.\n * \n * This library is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n * Lesser General Public License for more details.\n * \n * You should have received a copy of the GNU Lesser General Public\n * License along with this library; if not, write to the Free Software\n * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA\n * \n * \n * \n * This program is free software; you can redistribute it and/or modify it under the terms of the \n * GNU General Public License as published by the Free Software Foundation; \n * either version 2 of the License.\n * \n * This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; \n * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. \n * See the GNU General Public License for more details.\n * You should have received a copy of the GNU General Public License along with this program; \n * if not, write to the Free Software Foundation, Inc., \n *  59 Temple Place, Suite 330, Boston, MA 02111-1307 USA\n */\npackage org.pdfsam.console.business.dto.commands;\n\nimport java.io.File;\nimport org.pdfsam.console.business.dto.PdfFile;\n\n/**\n * SetViewer parsed command dto filled by parsing service and used by worker service\n * @author Andrea Vacondio\n */\npublic class SetViewerParsedCommand extends AbstractParsedCommand {\n\n    private static final long serialVersionUID = -8634290084366871560L;\n\n    //arguments\n    public static final String F_ARG = \"f\";\n\n    public static final String O_ARG = \"o\";\n\n    public static final String P_ARG = \"p\";\n\n    public static final String D_ARG = \"d\";\n\n    public static final String M_ARG = \"mode\";\n\n    public static final String NFSM_ARG = \"nfsmode\";\n\n    public static final String L_ARG = \"layout\";\n\n    public static final String DIRECTION_ARG = \"direction\";\n\n    public static final String HIDETOOLBAR_ARG = \"hidetoolbar\";\n\n    public static final String HIDEMENU_ARG = \"hidemenu\";\n\n    public static final String HIDEWINDOWUI_ARG = \"hidewindowui\";\n\n    public static final String FITWINDOW_ARG = \"fitwindow\";\n\n    public static final String CENTERWINDOW_ARG = \"centerwindow\";\n\n    public static final String DOCTITLE_ARG = \"displaydoctitle\";\n\n    public static final String NOPRINTSCALING_ARG = \"noprintscaling\";\n\n    //layouts\n    public static final String L_SINGLEPAGE = \"singlepage\";\n\n    public static final String L_ONECOLUMN = \"onecolumn\";\n\n    public static final String L_TWOCOLUMNLEFT = \"twocolumnl\";\n\n    public static final String L_TWOCOLUMNRIGHT = \"twocolumnr\";\n\n    public static final String L_TWOPAGELEFT = \"twopagel\";\n\n    public static final String L_TWOPAGERIGHT = \"twopager\";\n\n    //modes\n    public static final String M_NONE = \"none\";\n\n    public static final String M_OUTLINES = \"outlines\";\n\n    public static final String M_THUMBS = \"thumbs\";\n\n    public static final String M_FULLSCREEN = \"fullscreen\";\n\n    public static final String M_OCONTENT = \"ocontent\";\n\n    public static final String M_ATTACHMENTS = \"attachments\";\n\n    //non full screen modes\n    public static final String NFSM_NONE = \"nfsnone\";\n\n    public static final String NFSM_OUTLINES = \"nfsoutlines\";\n\n    public static final String NFSM_THUMBS = \"nfsthumbs\";\n\n    public static final String NFSM_OCONTENT = \"nfsocontent\";\n\n    //directions\n    public static final String D_L2R = \"l2r\";\n\n    public static final String D_R2L = \"r2l\";\n\n    private File outputFile;\n\n    private int mode = 0;\n\n    private int layout = 0;\n\n    private int nfsmode = 0;\n\n    private int direction = 0;\n\n    private PdfFile[] inputFileList;\n\n    private File inputDirectory;\n\n    private String outputFilesPrefix = \"\";\n\n    private boolean hideToolBar = false;\n\n    private boolean hideMenu = false;\n\n    private boolean hideWindowUI = false;\n\n    private boolean fitWindow = false;\n\n    private boolean centerWindow = false;\n\n    private boolean displayDocTitle = false;\n\n    private boolean noPrintScaling = false;\n\n    public SetViewerParsedCommand() {\n    }\n\n    public SetViewerParsedCommand(File outputFile, int mode, int layout, int nfsmode, int direction, PdfFile[] inputFileList, String outputFilesPrefix, boolean hideToolBar, boolean hideMenu, boolean hideWindowUI, boolean fitWindow, boolean centerWindow, boolean displayDocTitle, boolean noPrintScaling, File inputDirectory) {\n        super();\n        this.outputFile = outputFile;\n        this.mode = mode;\n        this.layout = layout;\n        this.nfsmode = nfsmode;\n        this.direction = direction;\n        this.inputFileList = inputFileList;\n        this.outputFilesPrefix = outputFilesPrefix;\n        this.hideToolBar = hideToolBar;\n        this.hideMenu = hideMenu;\n        this.hideWindowUI = hideWindowUI;\n        this.fitWindow = fitWindow;\n        this.centerWindow = centerWindow;\n        this.displayDocTitle = displayDocTitle;\n        this.noPrintScaling = noPrintScaling;\n        this.inputDirectory = inputDirectory;\n    }\n\n    /**\n     * @deprecated use the constructor without the logFile parameter\n     */\n    public SetViewerParsedCommand(File outputFile, int mode, int layout, int nfsmode, int direction, PdfFile[] inputFileList, String outputFilesPrefix, boolean hideToolBar, boolean hideMenu, boolean hideWindowUI, boolean fitWindow, boolean centerWindow, boolean displayDocTitle, boolean noPrintScaling, File inputDirectory, boolean overwrite, boolean compress, File logFile, char outputPdfVersion) {\n        super(overwrite, compress, logFile, outputPdfVersion);\n        this.outputFile = outputFile;\n        this.mode = mode;\n        this.layout = layout;\n        this.nfsmode = nfsmode;\n        this.direction = direction;\n        this.inputFileList = inputFileList;\n        this.outputFilesPrefix = outputFilesPrefix;\n        this.hideToolBar = hideToolBar;\n        this.hideMenu = hideMenu;\n        this.hideWindowUI = hideWindowUI;\n        this.fitWindow = fitWindow;\n        this.centerWindow = centerWindow;\n        this.displayDocTitle = displayDocTitle;\n        this.noPrintScaling = noPrintScaling;\n        this.inputDirectory = inputDirectory;\n    }\n\n    public SetViewerParsedCommand(File outputFile, int mode, int layout, int nfsmode, int direction, PdfFile[] inputFileList, String outputFilesPrefix, boolean hideToolBar, boolean hideMenu, boolean hideWindowUI, boolean fitWindow, boolean centerWindow, boolean displayDocTitle, boolean noPrintScaling, File inputDirectory, boolean overwrite, boolean compress, char outputPdfVersion) {\n        super(overwrite, compress, outputPdfVersion);\n        this.outputFile = outputFile;\n        this.mode = mode;\n        this.layout = layout;\n        this.nfsmode = nfsmode;\n        this.direction = direction;\n        this.inputFileList = inputFileList;\n        this.outputFilesPrefix = outputFilesPrefix;\n        this.hideToolBar = hideToolBar;\n        this.hideMenu = hideMenu;\n        this.hideWindowUI = hideWindowUI;\n        this.fitWindow = fitWindow;\n        this.centerWindow = centerWindow;\n        this.displayDocTitle = displayDocTitle;\n        this.noPrintScaling = noPrintScaling;\n        this.inputDirectory = inputDirectory;\n    }\n\n    /**\n     * @return the outputFile\n     */\n    public File getOutputFile() {\n        return outputFile;\n    }\n\n    /**\n     * @param outputFile the outputFile to set\n     */\n    public void setOutputFile(File outputFile) {\n        this.outputFile = outputFile;\n    }\n\n    /**\n     * @return the mode\n     */\n    public int getMode() {\n        return mode;\n    }\n\n    /**\n     * @param mode the mode to set\n     */\n    public void setMode(int mode) {\n        this.mode = mode;\n    }\n\n    /**\n     * @return the layout\n     */\n    public int getLayout() {\n        return layout;\n    }\n\n    /**\n     * @param layout the layout to set\n     */\n    public void setLayout(int layout) {\n        this.layout = layout;\n    }\n\n    /**\n     * @return the nfsmode\n     */\n    public int getNfsmode() {\n        return nfsmode;\n    }\n\n    /**\n     * @param nfsmode the nfsmode to set\n     */\n    public void setNfsmode(int nfsmode) {\n        this.nfsmode = nfsmode;\n    }\n\n    /**\n     * @return the direction\n     */\n    public int getDirection() {\n        return direction;\n    }\n\n    /**\n     * @param direction the direction to set\n     */\n    public void setDirection(int direction) {\n        this.direction = direction;\n    }\n\n    /**\n     * @return the inputFileList\n     */\n    public PdfFile[] getInputFileList() {\n        return inputFileList;\n    }\n\n    /**\n     * @param inputFileList the inputFileList to set\n     */\n    public void setInputFileList(PdfFile[] inputFileList) {\n        this.inputFileList = inputFileList;\n    }\n\n    /**\n     * @return the outputFilesPrefix\n     */\n    public String getOutputFilesPrefix() {\n        return outputFilesPrefix;\n    }\n\n    /**\n     * @param outputFilesPrefix the outputFilesPrefix to set\n     */\n    public void setOutputFilesPrefix(String outputFilesPrefix) {\n        this.outputFilesPrefix = outputFilesPrefix;\n    }\n\n    /**\n     * @return the hideToolBar\n     */\n    public boolean isHideToolBar() {\n        return hideToolBar;\n    }\n\n    /**\n     * @param hideToolBar the hideToolBar to set\n     */\n    public void setHideToolBar(boolean hideToolBar) {\n        this.hideToolBar = hideToolBar;\n    }\n\n    /**\n     * @return the hideMenu\n     */\n    public boolean isHideMenu() {\n        return hideMenu;\n    }\n\n    /**\n     * @param hideMenu the hideMenu to set\n     */\n    public void setHideMenu(boolean hideMenu) {\n        this.hideMenu = hideMenu;\n    }\n\n    /**\n     * @return the hideWindowUI\n     */\n    public boolean isHideWindowUI() {\n        return hideWindowUI;\n    }\n\n    /**\n     * @param hideWindowUI the hideWindowUI to set\n     */\n    public void setHideWindowUI(boolean hideWindowUI) {\n        this.hideWindowUI = hideWindowUI;\n    }\n\n    /**\n     * @return the fitWindow\n     */\n    public boolean isFitWindow() {\n        return fitWindow;\n    }\n\n    /**\n     * @param fitWindow the fitWindow to set\n     */\n    public void setFitWindow(boolean fitWindow) {\n        this.fitWindow = fitWindow;\n    }\n\n    /**\n     * @return the centerWindow\n     */\n    public boolean isCenterWindow() {\n        return centerWindow;\n    }\n\n    /**\n     * @param centerWindow the centerWindow to set\n     */\n    public void setCenterWindow(boolean centerWindow) {\n        this.centerWindow = centerWindow;\n    }\n\n    /**\n     * @return the displayDocTitle\n     */\n    public boolean isDisplayDocTitle() {\n        return displayDocTitle;\n    }\n\n    /**\n     * @param displayDocTitle the displayDocTitle to set\n     */\n    public void setDisplayDocTitle(boolean displayDocTitle) {\n        this.displayDocTitle = displayDocTitle;\n    }\n\n    /**\n     * @return the noPrintScaling\n     */\n    public boolean isNoPrintScaling() {\n        return noPrintScaling;\n    }\n\n    /**\n     * @param noPrintScaling the noPrintScaling to set\n     */\n    public void setNoPrintScaling(boolean noPrintScaling) {\n        this.noPrintScaling = noPrintScaling;\n    }\n\n    public String getCommand() {\n        return COMMAND_SETVIEWER;\n    }\n\n    public String toString() {\n        StringBuffer retVal = new StringBuffer();\n        retVal.append(super.toString());\n        retVal.append((outputFile == null) ? \"\" : \"[outputDir=\" + outputFile.getAbsolutePath() + \"]\");\n        if (inputFileList != null) {\n            for (int i = 0; i < inputFileList.length; i++) {\n                retVal.append((inputFileList[i] == null) ? \"\" : \"[inputFileList[\" + i + \"]=\" + inputFileList[i].getFile().getAbsolutePath() + \"]\");\n            }\n        }\n        retVal.append(\"[mode=\" + mode + \"]\");\n        retVal.append(\"[layout=\" + layout + \"]\");\n        retVal.append(\"[nfsmode=\" + nfsmode + \"]\");\n        retVal.append(\"[direction=\" + direction + \"]\");\n        retVal.append(\"[hideToolBar=\" + hideToolBar + \"]\");\n        retVal.append(\"[hideWindowUI=\" + hideWindowUI + \"]\");\n        retVal.append(\"[fitWindow=\" + fitWindow + \"]\");\n        retVal.append(\"[centerWindow=\" + centerWindow + \"]\");\n        retVal.append(\"[displayDocTitle=\" + displayDocTitle + \"]\");\n        retVal.append(\"[noPrintScaling=\" + noPrintScaling + \"]\");\n        retVal.append((inputDirectory == null) ? \"\" : \"[inputDirectory=\" + inputDirectory.getAbsolutePath() + \"]\");\n        retVal.append(\"[command=\" + getCommand() + \"]\");\n        return retVal.toString();\n    }\n\n    /**\n     * @return the inputDirectory\n     */\n    public File getInputDirectory() {\n        return inputDirectory;\n    }\n\n    /**\n     * @param inputDirectory the inputDirectory to set\n     */\n    public void setInputDirectory(File inputDirectory) {\n        this.inputDirectory = inputDirectory;\n    }\n}\n",
		"id": "EvoSuiteBenchmark/109_pdfsam/src/main/java/org/pdfsam/console/business/dto/commands/SetViewerParsedCommandTest5.java",
		"test_prompt": "// SetViewerParsedCommandTest5.java\npackage org.pdfsam.console.business.dto.commands;\n\nimport java.io.File;\nimport org.pdfsam.console.business.dto.PdfFile;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link SetViewerParsedCommand}.\n* It contains ten unit test cases for the {@link SetViewerParsedCommand#isDisplayDocTitle()} method.\n*/\nclass SetViewerParsedCommandTest5 {"
	},
	{
		"original_code": "// SetViewerParsedCommand.java\n/*\n * Created on 06-Mar-2008\n * Copyright (C) 2008 by Andrea Vacondio.\n *\n *\n * This library is provided under dual licenses.\n * You may choose the terms of the Lesser General Public License version 2.1 or the General Public License version 2\n * License at your discretion.\n * \n * \n * This library is free software; you can redistribute it and/or\n * modify it under the terms of the GNU Lesser General Public\n * License as published by the Free Software Foundation;\n * version 2.1 of the License.\n * \n * This library is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n * Lesser General Public License for more details.\n * \n * You should have received a copy of the GNU Lesser General Public\n * License along with this library; if not, write to the Free Software\n * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA\n * \n * \n * \n * This program is free software; you can redistribute it and/or modify it under the terms of the \n * GNU General Public License as published by the Free Software Foundation; \n * either version 2 of the License.\n * \n * This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; \n * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. \n * See the GNU General Public License for more details.\n * You should have received a copy of the GNU General Public License along with this program; \n * if not, write to the Free Software Foundation, Inc., \n *  59 Temple Place, Suite 330, Boston, MA 02111-1307 USA\n */\npackage org.pdfsam.console.business.dto.commands;\n\nimport java.io.File;\nimport org.pdfsam.console.business.dto.PdfFile;\n\n/**\n * SetViewer parsed command dto filled by parsing service and used by worker service\n * @author Andrea Vacondio\n */\npublic class SetViewerParsedCommand extends AbstractParsedCommand {\n\n    private static final long serialVersionUID = -8634290084366871560L;\n\n    //arguments\n    public static final String F_ARG = \"f\";\n\n    public static final String O_ARG = \"o\";\n\n    public static final String P_ARG = \"p\";\n\n    public static final String D_ARG = \"d\";\n\n    public static final String M_ARG = \"mode\";\n\n    public static final String NFSM_ARG = \"nfsmode\";\n\n    public static final String L_ARG = \"layout\";\n\n    public static final String DIRECTION_ARG = \"direction\";\n\n    public static final String HIDETOOLBAR_ARG = \"hidetoolbar\";\n\n    public static final String HIDEMENU_ARG = \"hidemenu\";\n\n    public static final String HIDEWINDOWUI_ARG = \"hidewindowui\";\n\n    public static final String FITWINDOW_ARG = \"fitwindow\";\n\n    public static final String CENTERWINDOW_ARG = \"centerwindow\";\n\n    public static final String DOCTITLE_ARG = \"displaydoctitle\";\n\n    public static final String NOPRINTSCALING_ARG = \"noprintscaling\";\n\n    //layouts\n    public static final String L_SINGLEPAGE = \"singlepage\";\n\n    public static final String L_ONECOLUMN = \"onecolumn\";\n\n    public static final String L_TWOCOLUMNLEFT = \"twocolumnl\";\n\n    public static final String L_TWOCOLUMNRIGHT = \"twocolumnr\";\n\n    public static final String L_TWOPAGELEFT = \"twopagel\";\n\n    public static final String L_TWOPAGERIGHT = \"twopager\";\n\n    //modes\n    public static final String M_NONE = \"none\";\n\n    public static final String M_OUTLINES = \"outlines\";\n\n    public static final String M_THUMBS = \"thumbs\";\n\n    public static final String M_FULLSCREEN = \"fullscreen\";\n\n    public static final String M_OCONTENT = \"ocontent\";\n\n    public static final String M_ATTACHMENTS = \"attachments\";\n\n    //non full screen modes\n    public static final String NFSM_NONE = \"nfsnone\";\n\n    public static final String NFSM_OUTLINES = \"nfsoutlines\";\n\n    public static final String NFSM_THUMBS = \"nfsthumbs\";\n\n    public static final String NFSM_OCONTENT = \"nfsocontent\";\n\n    //directions\n    public static final String D_L2R = \"l2r\";\n\n    public static final String D_R2L = \"r2l\";\n\n    private File outputFile;\n\n    private int mode = 0;\n\n    private int layout = 0;\n\n    private int nfsmode = 0;\n\n    private int direction = 0;\n\n    private PdfFile[] inputFileList;\n\n    private File inputDirectory;\n\n    private String outputFilesPrefix = \"\";\n\n    private boolean hideToolBar = false;\n\n    private boolean hideMenu = false;\n\n    private boolean hideWindowUI = false;\n\n    private boolean fitWindow = false;\n\n    private boolean centerWindow = false;\n\n    private boolean displayDocTitle = false;\n\n    private boolean noPrintScaling = false;\n\n    public SetViewerParsedCommand() {\n    }\n\n    public SetViewerParsedCommand(File outputFile, int mode, int layout, int nfsmode, int direction, PdfFile[] inputFileList, String outputFilesPrefix, boolean hideToolBar, boolean hideMenu, boolean hideWindowUI, boolean fitWindow, boolean centerWindow, boolean displayDocTitle, boolean noPrintScaling, File inputDirectory) {\n        super();\n        this.outputFile = outputFile;\n        this.mode = mode;\n        this.layout = layout;\n        this.nfsmode = nfsmode;\n        this.direction = direction;\n        this.inputFileList = inputFileList;\n        this.outputFilesPrefix = outputFilesPrefix;\n        this.hideToolBar = hideToolBar;\n        this.hideMenu = hideMenu;\n        this.hideWindowUI = hideWindowUI;\n        this.fitWindow = fitWindow;\n        this.centerWindow = centerWindow;\n        this.displayDocTitle = displayDocTitle;\n        this.noPrintScaling = noPrintScaling;\n        this.inputDirectory = inputDirectory;\n    }\n\n    /**\n     * @deprecated use the constructor without the logFile parameter\n     */\n    public SetViewerParsedCommand(File outputFile, int mode, int layout, int nfsmode, int direction, PdfFile[] inputFileList, String outputFilesPrefix, boolean hideToolBar, boolean hideMenu, boolean hideWindowUI, boolean fitWindow, boolean centerWindow, boolean displayDocTitle, boolean noPrintScaling, File inputDirectory, boolean overwrite, boolean compress, File logFile, char outputPdfVersion) {\n        super(overwrite, compress, logFile, outputPdfVersion);\n        this.outputFile = outputFile;\n        this.mode = mode;\n        this.layout = layout;\n        this.nfsmode = nfsmode;\n        this.direction = direction;\n        this.inputFileList = inputFileList;\n        this.outputFilesPrefix = outputFilesPrefix;\n        this.hideToolBar = hideToolBar;\n        this.hideMenu = hideMenu;\n        this.hideWindowUI = hideWindowUI;\n        this.fitWindow = fitWindow;\n        this.centerWindow = centerWindow;\n        this.displayDocTitle = displayDocTitle;\n        this.noPrintScaling = noPrintScaling;\n        this.inputDirectory = inputDirectory;\n    }\n\n    public SetViewerParsedCommand(File outputFile, int mode, int layout, int nfsmode, int direction, PdfFile[] inputFileList, String outputFilesPrefix, boolean hideToolBar, boolean hideMenu, boolean hideWindowUI, boolean fitWindow, boolean centerWindow, boolean displayDocTitle, boolean noPrintScaling, File inputDirectory, boolean overwrite, boolean compress, char outputPdfVersion) {\n        super(overwrite, compress, outputPdfVersion);\n        this.outputFile = outputFile;\n        this.mode = mode;\n        this.layout = layout;\n        this.nfsmode = nfsmode;\n        this.direction = direction;\n        this.inputFileList = inputFileList;\n        this.outputFilesPrefix = outputFilesPrefix;\n        this.hideToolBar = hideToolBar;\n        this.hideMenu = hideMenu;\n        this.hideWindowUI = hideWindowUI;\n        this.fitWindow = fitWindow;\n        this.centerWindow = centerWindow;\n        this.displayDocTitle = displayDocTitle;\n        this.noPrintScaling = noPrintScaling;\n        this.inputDirectory = inputDirectory;\n    }\n\n    /**\n     * @return the outputFile\n     */\n    public File getOutputFile() {\n        return outputFile;\n    }\n\n    /**\n     * @param outputFile the outputFile to set\n     */\n    public void setOutputFile(File outputFile) {\n        this.outputFile = outputFile;\n    }\n\n    /**\n     * @return the mode\n     */\n    public int getMode() {\n        return mode;\n    }\n\n    /**\n     * @param mode the mode to set\n     */\n    public void setMode(int mode) {\n        this.mode = mode;\n    }\n\n    /**\n     * @return the layout\n     */\n    public int getLayout() {\n        return layout;\n    }\n\n    /**\n     * @param layout the layout to set\n     */\n    public void setLayout(int layout) {\n        this.layout = layout;\n    }\n\n    /**\n     * @return the nfsmode\n     */\n    public int getNfsmode() {\n        return nfsmode;\n    }\n\n    /**\n     * @param nfsmode the nfsmode to set\n     */\n    public void setNfsmode(int nfsmode) {\n        this.nfsmode = nfsmode;\n    }\n\n    /**\n     * @return the direction\n     */\n    public int getDirection() {\n        return direction;\n    }\n\n    /**\n     * @param direction the direction to set\n     */\n    public void setDirection(int direction) {\n        this.direction = direction;\n    }\n\n    /**\n     * @return the inputFileList\n     */\n    public PdfFile[] getInputFileList() {\n        return inputFileList;\n    }\n\n    /**\n     * @param inputFileList the inputFileList to set\n     */\n    public void setInputFileList(PdfFile[] inputFileList) {\n        this.inputFileList = inputFileList;\n    }\n\n    /**\n     * @return the outputFilesPrefix\n     */\n    public String getOutputFilesPrefix() {\n        return outputFilesPrefix;\n    }\n\n    /**\n     * @param outputFilesPrefix the outputFilesPrefix to set\n     */\n    public void setOutputFilesPrefix(String outputFilesPrefix) {\n        this.outputFilesPrefix = outputFilesPrefix;\n    }\n\n    /**\n     * @return the hideToolBar\n     */\n    public boolean isHideToolBar() {\n        return hideToolBar;\n    }\n\n    /**\n     * @param hideToolBar the hideToolBar to set\n     */\n    public void setHideToolBar(boolean hideToolBar) {\n        this.hideToolBar = hideToolBar;\n    }\n\n    /**\n     * @return the hideMenu\n     */\n    public boolean isHideMenu() {\n        return hideMenu;\n    }\n\n    /**\n     * @param hideMenu the hideMenu to set\n     */\n    public void setHideMenu(boolean hideMenu) {\n        this.hideMenu = hideMenu;\n    }\n\n    /**\n     * @return the hideWindowUI\n     */\n    public boolean isHideWindowUI() {\n        return hideWindowUI;\n    }\n\n    /**\n     * @param hideWindowUI the hideWindowUI to set\n     */\n    public void setHideWindowUI(boolean hideWindowUI) {\n        this.hideWindowUI = hideWindowUI;\n    }\n\n    /**\n     * @return the fitWindow\n     */\n    public boolean isFitWindow() {\n        return fitWindow;\n    }\n\n    /**\n     * @param fitWindow the fitWindow to set\n     */\n    public void setFitWindow(boolean fitWindow) {\n        this.fitWindow = fitWindow;\n    }\n\n    /**\n     * @return the centerWindow\n     */\n    public boolean isCenterWindow() {\n        return centerWindow;\n    }\n\n    /**\n     * @param centerWindow the centerWindow to set\n     */\n    public void setCenterWindow(boolean centerWindow) {\n        this.centerWindow = centerWindow;\n    }\n\n    /**\n     * @return the displayDocTitle\n     */\n    public boolean isDisplayDocTitle() {\n        return displayDocTitle;\n    }\n\n    /**\n     * @param displayDocTitle the displayDocTitle to set\n     */\n    public void setDisplayDocTitle(boolean displayDocTitle) {\n        this.displayDocTitle = displayDocTitle;\n    }\n\n    /**\n     * @return the noPrintScaling\n     */\n    public boolean isNoPrintScaling() {\n        return noPrintScaling;\n    }\n\n    /**\n     * @param noPrintScaling the noPrintScaling to set\n     */\n    public void setNoPrintScaling(boolean noPrintScaling) {\n        this.noPrintScaling = noPrintScaling;\n    }\n\n    public String getCommand() {\n        return COMMAND_SETVIEWER;\n    }\n\n    public String toString() {\n        StringBuffer retVal = new StringBuffer();\n        retVal.append(super.toString());\n        retVal.append((outputFile == null) ? \"\" : \"[outputDir=\" + outputFile.getAbsolutePath() + \"]\");\n        if (inputFileList != null) {\n            for (int i = 0; i < inputFileList.length; i++) {\n                retVal.append((inputFileList[i] == null) ? \"\" : \"[inputFileList[\" + i + \"]=\" + inputFileList[i].getFile().getAbsolutePath() + \"]\");\n            }\n        }\n        retVal.append(\"[mode=\" + mode + \"]\");\n        retVal.append(\"[layout=\" + layout + \"]\");\n        retVal.append(\"[nfsmode=\" + nfsmode + \"]\");\n        retVal.append(\"[direction=\" + direction + \"]\");\n        retVal.append(\"[hideToolBar=\" + hideToolBar + \"]\");\n        retVal.append(\"[hideWindowUI=\" + hideWindowUI + \"]\");\n        retVal.append(\"[fitWindow=\" + fitWindow + \"]\");\n        retVal.append(\"[centerWindow=\" + centerWindow + \"]\");\n        retVal.append(\"[displayDocTitle=\" + displayDocTitle + \"]\");\n        retVal.append(\"[noPrintScaling=\" + noPrintScaling + \"]\");\n        retVal.append((inputDirectory == null) ? \"\" : \"[inputDirectory=\" + inputDirectory.getAbsolutePath() + \"]\");\n        retVal.append(\"[command=\" + getCommand() + \"]\");\n        return retVal.toString();\n    }\n\n    /**\n     * @return the inputDirectory\n     */\n    public File getInputDirectory() {\n        return inputDirectory;\n    }\n\n    /**\n     * @param inputDirectory the inputDirectory to set\n     */\n    public void setInputDirectory(File inputDirectory) {\n        this.inputDirectory = inputDirectory;\n    }\n}\n",
		"id": "EvoSuiteBenchmark/109_pdfsam/src/main/java/org/pdfsam/console/business/dto/commands/SetViewerParsedCommandTest6.java",
		"test_prompt": "// SetViewerParsedCommandTest6.java\npackage org.pdfsam.console.business.dto.commands;\n\nimport java.io.File;\nimport org.pdfsam.console.business.dto.PdfFile;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link SetViewerParsedCommand}.\n* It contains ten unit test cases for the {@link SetViewerParsedCommand#isNoPrintScaling()} method.\n*/\nclass SetViewerParsedCommandTest6 {"
	},
	{
		"original_code": "// PageLabel.java\n/*\n * Created on 19-Aug-2009\n * Copyright (C) 2009 by Andrea Vacondio.\n *\n *\n * This library is provided under dual licenses.\n * You may choose the terms of the Lesser General Public License version 2.1 or the General Public License version 2\n * License at your discretion.\n * \n * \n * This library is free software; you can redistribute it and/or\n * modify it under the terms of the GNU Lesser General Public\n * License as published by the Free Software Foundation;\n * version 2.1 of the License.\n * \n * This library is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n * Lesser General Public License for more details.\n * \n * You should have received a copy of the GNU Lesser General Public\n * License along with this library; if not, write to the Free Software\n * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA\n * \n * \n * \n * This program is free software; you can redistribute it and/or modify it under the terms of the \n * GNU General Public License as published by the Free Software Foundation; \n * either version 2 of the License.\n * \n * This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; \n * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. \n * See the GNU General Public License for more details.\n * You should have received a copy of the GNU General Public License along with this program; \n * if not, write to the Free Software Foundation, Inc., \n *  59 Temple Place, Suite 330, Boston, MA 02111-1307 USA\n */\npackage org.pdfsam.console.business.dto;\n\nimport java.io.Serializable;\n\n/**\n * DTO to store page label settings\n * @author Andrea Vacondio\n */\npublic class PageLabel implements Serializable {\n\n    private static final long serialVersionUID = 4519061789420708363L;\n\n    public static final String ARABIC = \"arabic\";\n\n    public static final String UROMAN = \"uroman\";\n\n    public static final String LROMAN = \"lroman\";\n\n    public static final String ULETTER = \"uletter\";\n\n    public static final String LLETTER = \"lletter\";\n\n    public static final String EMPTY = \"empty\";\n\n    private int pageNumber = 1;\n\n    private int logicalPageNumber = 1;\n\n    private String prefix;\n\n    private String style = ARABIC;\n\n    /**\n     * @return the pageNumber\n     */\n    public int getPageNumber() {\n        return pageNumber;\n    }\n\n    /**\n     * @param pageNumber the pageNumber to set\n     */\n    public void setPageNumber(int pageNumber) {\n        this.pageNumber = pageNumber;\n    }\n\n    /**\n     * @return the logicalPageNumber\n     */\n    public int getLogicalPageNumber() {\n        return logicalPageNumber;\n    }\n\n    /**\n     * @param logicalPageNumber the logicalPageNumber to set\n     */\n    public void setLogicalPageNumber(int logicalPageNumber) {\n        this.logicalPageNumber = logicalPageNumber;\n    }\n\n    /**\n     * @return the prefix\n     */\n    public String getPrefix() {\n        return prefix;\n    }\n\n    /**\n     * @param prefix the prefix to set\n     */\n    public void setPrefix(String prefix) {\n        this.prefix = prefix;\n    }\n\n    /**\n     * @return the style\n     */\n    public String getStyle() {\n        return style;\n    }\n\n    /**\n     * @param style the style to set\n     */\n    public void setStyle(String style) {\n        this.style = style;\n    }\n\n    /* (non-Javadoc)\n\t * @see java.lang.Object#toString()\n\t */\n    public String toString() {\n        StringBuffer buffer = new StringBuffer();\n        buffer.append(\"PageLabel [logicalPageNumber=\");\n        buffer.append(logicalPageNumber);\n        buffer.append(\", pageNumber=\");\n        buffer.append(pageNumber);\n        buffer.append(\", prefix=\");\n        buffer.append(prefix);\n        buffer.append(\", style=\");\n        buffer.append(style);\n        buffer.append(\"]\");\n        return buffer.toString();\n    }\n\n    /* (non-Javadoc)\n\t * @see java.lang.Object#hashCode()\n\t */\n    public int hashCode() {\n        final int prime = 31;\n        int result = 1;\n        result = prime * result + logicalPageNumber;\n        result = prime * result + pageNumber;\n        result = prime * result + ((prefix == null) ? 0 : prefix.hashCode());\n        result = prime * result + ((style == null) ? 0 : style.hashCode());\n        return result;\n    }\n\n    /* (non-Javadoc)\n\t * @see java.lang.Object#equals(java.lang.Object)\n\t */\n    public boolean equals(Object obj) {\n        if (this == obj)\n            return true;\n        if (obj == null)\n            return false;\n        if (getClass() != obj.getClass())\n            return false;\n        PageLabel other = (PageLabel) obj;\n        if (logicalPageNumber != other.logicalPageNumber)\n            return false;\n        if (pageNumber != other.pageNumber)\n            return false;\n        if (prefix == null) {\n            if (other.prefix != null)\n                return false;\n        } else if (!prefix.equals(other.prefix))\n            return false;\n        if (style == null) {\n            if (other.style != null)\n                return false;\n        } else if (!style.equals(other.style))\n            return false;\n        return true;\n    }\n}\n",
		"id": "EvoSuiteBenchmark/109_pdfsam/src/main/java/org/pdfsam/console/business/dto/PageLabelTest0.java",
		"test_prompt": "// PageLabelTest0.java\npackage org.pdfsam.console.business.dto;\n\nimport java.io.Serializable;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link PageLabel}.\n* It contains ten unit test cases for the {@link PageLabel#hashCode()} method.\n*/\nclass PageLabelTest0 {"
	},
	{
		"original_code": "// PageLabel.java\n/*\n * Created on 19-Aug-2009\n * Copyright (C) 2009 by Andrea Vacondio.\n *\n *\n * This library is provided under dual licenses.\n * You may choose the terms of the Lesser General Public License version 2.1 or the General Public License version 2\n * License at your discretion.\n * \n * \n * This library is free software; you can redistribute it and/or\n * modify it under the terms of the GNU Lesser General Public\n * License as published by the Free Software Foundation;\n * version 2.1 of the License.\n * \n * This library is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n * Lesser General Public License for more details.\n * \n * You should have received a copy of the GNU Lesser General Public\n * License along with this library; if not, write to the Free Software\n * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA\n * \n * \n * \n * This program is free software; you can redistribute it and/or modify it under the terms of the \n * GNU General Public License as published by the Free Software Foundation; \n * either version 2 of the License.\n * \n * This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; \n * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. \n * See the GNU General Public License for more details.\n * You should have received a copy of the GNU General Public License along with this program; \n * if not, write to the Free Software Foundation, Inc., \n *  59 Temple Place, Suite 330, Boston, MA 02111-1307 USA\n */\npackage org.pdfsam.console.business.dto;\n\nimport java.io.Serializable;\n\n/**\n * DTO to store page label settings\n * @author Andrea Vacondio\n */\npublic class PageLabel implements Serializable {\n\n    private static final long serialVersionUID = 4519061789420708363L;\n\n    public static final String ARABIC = \"arabic\";\n\n    public static final String UROMAN = \"uroman\";\n\n    public static final String LROMAN = \"lroman\";\n\n    public static final String ULETTER = \"uletter\";\n\n    public static final String LLETTER = \"lletter\";\n\n    public static final String EMPTY = \"empty\";\n\n    private int pageNumber = 1;\n\n    private int logicalPageNumber = 1;\n\n    private String prefix;\n\n    private String style = ARABIC;\n\n    /**\n     * @return the pageNumber\n     */\n    public int getPageNumber() {\n        return pageNumber;\n    }\n\n    /**\n     * @param pageNumber the pageNumber to set\n     */\n    public void setPageNumber(int pageNumber) {\n        this.pageNumber = pageNumber;\n    }\n\n    /**\n     * @return the logicalPageNumber\n     */\n    public int getLogicalPageNumber() {\n        return logicalPageNumber;\n    }\n\n    /**\n     * @param logicalPageNumber the logicalPageNumber to set\n     */\n    public void setLogicalPageNumber(int logicalPageNumber) {\n        this.logicalPageNumber = logicalPageNumber;\n    }\n\n    /**\n     * @return the prefix\n     */\n    public String getPrefix() {\n        return prefix;\n    }\n\n    /**\n     * @param prefix the prefix to set\n     */\n    public void setPrefix(String prefix) {\n        this.prefix = prefix;\n    }\n\n    /**\n     * @return the style\n     */\n    public String getStyle() {\n        return style;\n    }\n\n    /**\n     * @param style the style to set\n     */\n    public void setStyle(String style) {\n        this.style = style;\n    }\n\n    /* (non-Javadoc)\n\t * @see java.lang.Object#toString()\n\t */\n    public String toString() {\n        StringBuffer buffer = new StringBuffer();\n        buffer.append(\"PageLabel [logicalPageNumber=\");\n        buffer.append(logicalPageNumber);\n        buffer.append(\", pageNumber=\");\n        buffer.append(pageNumber);\n        buffer.append(\", prefix=\");\n        buffer.append(prefix);\n        buffer.append(\", style=\");\n        buffer.append(style);\n        buffer.append(\"]\");\n        return buffer.toString();\n    }\n\n    /* (non-Javadoc)\n\t * @see java.lang.Object#hashCode()\n\t */\n    public int hashCode() {\n        final int prime = 31;\n        int result = 1;\n        result = prime * result + logicalPageNumber;\n        result = prime * result + pageNumber;\n        result = prime * result + ((prefix == null) ? 0 : prefix.hashCode());\n        result = prime * result + ((style == null) ? 0 : style.hashCode());\n        return result;\n    }\n\n    /* (non-Javadoc)\n\t * @see java.lang.Object#equals(java.lang.Object)\n\t */\n    public boolean equals(Object obj) {\n        if (this == obj)\n            return true;\n        if (obj == null)\n            return false;\n        if (getClass() != obj.getClass())\n            return false;\n        PageLabel other = (PageLabel) obj;\n        if (logicalPageNumber != other.logicalPageNumber)\n            return false;\n        if (pageNumber != other.pageNumber)\n            return false;\n        if (prefix == null) {\n            if (other.prefix != null)\n                return false;\n        } else if (!prefix.equals(other.prefix))\n            return false;\n        if (style == null) {\n            if (other.style != null)\n                return false;\n        } else if (!style.equals(other.style))\n            return false;\n        return true;\n    }\n}\n",
		"id": "EvoSuiteBenchmark/109_pdfsam/src/main/java/org/pdfsam/console/business/dto/PageLabelTest1.java",
		"test_prompt": "// PageLabelTest1.java\npackage org.pdfsam.console.business.dto;\n\nimport java.io.Serializable;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link PageLabel}.\n* It contains ten unit test cases for the {@link PageLabel#equals(Object)} method.\n*/\nclass PageLabelTest1 {"
	},
	{
		"original_code": "// WorkDoneDataModel.java\n/*\n * Created on 21-oct-2007\n * Copyright (C) 2006 by Andrea Vacondio.\n *\n *\n * This library is provided under dual licenses.\n * You may choose the terms of the Lesser General Public License version 2.1 or the General Public License version 2\n * License at your discretion.\n * \n * \n * This library is free software; you can redistribute it and/or\n * modify it under the terms of the GNU Lesser General Public\n * License as published by the Free Software Foundation;\n * version 2.1 of the License.\n * \n * This library is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n * Lesser General Public License for more details.\n * \n * You should have received a copy of the GNU Lesser General Public\n * License along with this library; if not, write to the Free Software\n * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA\n * \n * \n * \n * This program is free software; you can redistribute it and/or modify it under the terms of the \n * GNU General Public License as published by the Free Software Foundation; \n * either version 2 of the License.\n * \n * This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; \n * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. \n * See the GNU General Public License for more details.\n * You should have received a copy of the GNU General Public License along with this program; \n * if not, write to the Free Software Foundation, Inc., \n *  59 Temple Place, Suite 330, Boston, MA 02111-1307 USA\n */\npackage org.pdfsam.console.business.dto;\n\nimport java.io.Serializable;\n\n/**\n * Percentage of work done\n * @author Andrea Vacondio\n */\npublic class WorkDoneDataModel implements Serializable {\n\n    private static final long serialVersionUID = 2224240472572871331L;\n\n    public static final int INDETERMINATE = -1;\n\n    public static final int MAX_PERGENTAGE = 1000;\n\n    private int percentage = 0;\n\n    public WorkDoneDataModel() {\n        this.percentage = 0;\n    }\n\n    /**\n     * @return the percentage\n     */\n    public int getPercentage() {\n        return percentage;\n    }\n\n    /**\n     * sets the percentage to indeterminate\n     */\n    public void setPercentageIndeterminate() {\n        percentage = INDETERMINATE;\n    }\n\n    /**\n     * sets the percentage to the max value\n     */\n    public void setPercentageMax() {\n        percentage = MAX_PERGENTAGE;\n    }\n\n    /**\n     * @param percentage the percentage to set (0 to MAX_PERCENTAGE or -1 to set the percentage indeterminate)\n     */\n    public void setPercentage(int percentage) {\n        if (percentage > MAX_PERGENTAGE) {\n            this.percentage = MAX_PERGENTAGE;\n        } else if (percentage < INDETERMINATE) {\n            this.percentage = INDETERMINATE;\n        } else {\n            this.percentage = percentage;\n        }\n    }\n\n    /**\n     * reset the percentage\n     */\n    public void resetPercentage() {\n        this.percentage = 0;\n    }\n\n    public String toString() {\n        return percentage + \"\";\n    }\n\n    /**\n     * @see java.lang.Object#hashCode()\n     */\n    public int hashCode() {\n        final int prime = 31;\n        int result = 1;\n        result = prime * result + percentage;\n        return result;\n    }\n\n    /**\n     * @see java.lang.Object#equals(java.lang.Object)\n     */\n    public boolean equals(Object obj) {\n        boolean retVal = false;\n        if (this == obj) {\n            retVal = true;\n        } else {\n            if ((obj != null) && (getClass() == obj.getClass()) && (percentage == ((WorkDoneDataModel) obj).percentage)) {\n                retVal = true;\n            }\n        }\n        return retVal;\n    }\n}\n",
		"id": "EvoSuiteBenchmark/109_pdfsam/src/main/java/org/pdfsam/console/business/dto/WorkDoneDataModelTest0.java",
		"test_prompt": "// WorkDoneDataModelTest0.java\npackage org.pdfsam.console.business.dto;\n\nimport java.io.Serializable;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link WorkDoneDataModel}.\n* It contains ten unit test cases for the {@link WorkDoneDataModel#hashCode()} method.\n*/\nclass WorkDoneDataModelTest0 {"
	},
	{
		"original_code": "// WorkDoneDataModel.java\n/*\n * Created on 21-oct-2007\n * Copyright (C) 2006 by Andrea Vacondio.\n *\n *\n * This library is provided under dual licenses.\n * You may choose the terms of the Lesser General Public License version 2.1 or the General Public License version 2\n * License at your discretion.\n * \n * \n * This library is free software; you can redistribute it and/or\n * modify it under the terms of the GNU Lesser General Public\n * License as published by the Free Software Foundation;\n * version 2.1 of the License.\n * \n * This library is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n * Lesser General Public License for more details.\n * \n * You should have received a copy of the GNU Lesser General Public\n * License along with this library; if not, write to the Free Software\n * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA\n * \n * \n * \n * This program is free software; you can redistribute it and/or modify it under the terms of the \n * GNU General Public License as published by the Free Software Foundation; \n * either version 2 of the License.\n * \n * This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; \n * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. \n * See the GNU General Public License for more details.\n * You should have received a copy of the GNU General Public License along with this program; \n * if not, write to the Free Software Foundation, Inc., \n *  59 Temple Place, Suite 330, Boston, MA 02111-1307 USA\n */\npackage org.pdfsam.console.business.dto;\n\nimport java.io.Serializable;\n\n/**\n * Percentage of work done\n * @author Andrea Vacondio\n */\npublic class WorkDoneDataModel implements Serializable {\n\n    private static final long serialVersionUID = 2224240472572871331L;\n\n    public static final int INDETERMINATE = -1;\n\n    public static final int MAX_PERGENTAGE = 1000;\n\n    private int percentage = 0;\n\n    public WorkDoneDataModel() {\n        this.percentage = 0;\n    }\n\n    /**\n     * @return the percentage\n     */\n    public int getPercentage() {\n        return percentage;\n    }\n\n    /**\n     * sets the percentage to indeterminate\n     */\n    public void setPercentageIndeterminate() {\n        percentage = INDETERMINATE;\n    }\n\n    /**\n     * sets the percentage to the max value\n     */\n    public void setPercentageMax() {\n        percentage = MAX_PERGENTAGE;\n    }\n\n    /**\n     * @param percentage the percentage to set (0 to MAX_PERCENTAGE or -1 to set the percentage indeterminate)\n     */\n    public void setPercentage(int percentage) {\n        if (percentage > MAX_PERGENTAGE) {\n            this.percentage = MAX_PERGENTAGE;\n        } else if (percentage < INDETERMINATE) {\n            this.percentage = INDETERMINATE;\n        } else {\n            this.percentage = percentage;\n        }\n    }\n\n    /**\n     * reset the percentage\n     */\n    public void resetPercentage() {\n        this.percentage = 0;\n    }\n\n    public String toString() {\n        return percentage + \"\";\n    }\n\n    /**\n     * @see java.lang.Object#hashCode()\n     */\n    public int hashCode() {\n        final int prime = 31;\n        int result = 1;\n        result = prime * result + percentage;\n        return result;\n    }\n\n    /**\n     * @see java.lang.Object#equals(java.lang.Object)\n     */\n    public boolean equals(Object obj) {\n        boolean retVal = false;\n        if (this == obj) {\n            retVal = true;\n        } else {\n            if ((obj != null) && (getClass() == obj.getClass()) && (percentage == ((WorkDoneDataModel) obj).percentage)) {\n                retVal = true;\n            }\n        }\n        return retVal;\n    }\n}\n",
		"id": "EvoSuiteBenchmark/109_pdfsam/src/main/java/org/pdfsam/console/business/dto/WorkDoneDataModelTest1.java",
		"test_prompt": "// WorkDoneDataModelTest1.java\npackage org.pdfsam.console.business.dto;\n\nimport java.io.Serializable;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link WorkDoneDataModel}.\n* It contains ten unit test cases for the {@link WorkDoneDataModel#equals(Object)} method.\n*/\nclass WorkDoneDataModelTest1 {"
	},
	{
		"original_code": "// ConsoleServicesFacade.java\n/*\n * Created on 02-Nov-2007\n * Copyright (C) 2007 by Andrea Vacondio.\n *\n * This library is provided under dual licenses.\n * You may choose the terms of the Lesser General Public License version 2.1 or the General Public License version 2\n * License at your discretion.\n * \n * \n * This library is free software; you can redistribute it and/or\n * modify it under the terms of the GNU Lesser General Public\n * License as published by the Free Software Foundation;\n * version 2.1 of the License.\n * \n * This library is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n * Lesser General Public License for more details.\n * \n * You should have received a copy of the GNU Lesser General Public\n * License along with this library; if not, write to the Free Software\n * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA\n * \n * \n * \n * This program is free software; you can redistribute it and/or modify it under the terms of the \n * GNU General Public License as published by the Free Software Foundation; \n * either version 2 of the License.\n * \n * This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; \n * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. \n * See the GNU General Public License for more details.\n * You should have received a copy of the GNU General Public License along with this program; \n * if not, write to the Free Software Foundation, Inc., \n *  59 Temple Place, Suite 330, Boston, MA 02111-1307 USA\n */\npackage org.pdfsam.console.business;\n\nimport java.util.Observer;\nimport org.apache.log4j.Logger;\nimport org.pdfsam.console.business.dto.commands.AbstractParsedCommand;\nimport org.pdfsam.console.business.parser.CmdParseManager;\nimport org.pdfsam.console.business.pdf.CmdExecuteManager;\nimport org.pdfsam.console.exceptions.console.ConsoleException;\n\n/**\n * Facade for the console services\n *\n * @author Andrea Vacondio\n */\npublic class ConsoleServicesFacade {\n\n    private static final Logger LOG = Logger.getLogger(ConsoleServicesFacade.class.getPackage().getName());\n\n    public static final String VERSION = \"2.4.1e\";\n\n    public static final String CREATOR = \"pdfsam-console (Ver. \" + ConsoleServicesFacade.VERSION + \")\";\n\n    private CmdParseManager cmdParserManager;\n\n    private CmdExecuteManager cmdExecuteManager;\n\n    public ConsoleServicesFacade() {\n        cmdParserManager = new CmdParseManager();\n        cmdExecuteManager = new CmdExecuteManager();\n    }\n\n    /**\n     * execute parsedCommand\n     *\n     * @param parsedCommand\n     * @throws ConsoleException.\n     */\n    public synchronized void execute(AbstractParsedCommand parsedCommand) throws ConsoleException {\n        cmdExecuteManager.execute(parsedCommand);\n    }\n\n    /**\n     * parse and validate the input arguments\n     *\n     * @param inputArguments\n     *            input string arguments\n     * @return the parsed command\n     * @throws Exception.\n     */\n    public synchronized AbstractParsedCommand parseAndValidate(String[] inputArguments) throws Exception {\n        try {\n            AbstractParsedCommand retVal = null;\n            if (cmdParserManager.parse(inputArguments)) {\n                retVal = cmdParserManager.validate();\n            } else {\n                LOG.error(\"Parse failed.\");\n            }\n            return retVal;\n        } catch (ConsoleException ce) {\n            throw new Exception(ce);\n        }\n    }\n\n    /**\n     * Adds an observer that observe the execution. No duplicate allowed.\n     *\n     * @param observer\n     * @throws NullPointerException\n     *             if the observer is null\n     */\n    public synchronized void addExecutionObserver(Observer observer) throws NullPointerException {\n        cmdExecuteManager.addObserver(observer);\n    }\n\n    /**\n     * @return the License String\n     */\n    public static String getLicense() {\n        StringBuffer sb = new StringBuffer();\n        sb.append(ConsoleServicesFacade.CREATOR + \"  Copyright (C) 2007  Andrea Vacondio\\n\");\n        sb.append(\"This library is provided under dual license.\\n\");\n        sb.append(\"You may choose the terms of the Lesser General Public License version 2.1 or the General Public License version 2\\n\");\n        sb.append(\"License at your discretion.\\n\\n\");\n        sb.append(\"This library is free software; you can redistribute it and/or\\n\");\n        sb.append(\"modify it under the terms of the GNU Lesser General Public\\n\");\n        sb.append(\"License as published by the Free Software Foundation;\\n\");\n        sb.append(\"version 2.1 of the License.\\n\\n\");\n        sb.append(\"This library is distributed in the hope that it will be useful,\\n\");\n        sb.append(\"but WITHOUT ANY WARRANTY; without even the implied warranty of\\n\");\n        sb.append(\"MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\\n\");\n        sb.append(\"Lesser General Public License for more details.\\n\\n\");\n        sb.append(\"You should have received a copy of the GNU Lesser General Public\\n\");\n        sb.append(\"License along with this library; if not, write to the Free Software\\n\");\n        sb.append(\"Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA\\n\\n\\n\");\n        sb.append(\"This program is free software: you can redistribute it and/or modify\\n\");\n        sb.append(\"it under the terms of the GNU General Public License as published by\\n\");\n        sb.append(\"the Free Software Foundation,version 2 of the License\\n\\n\");\n        sb.append(\"This program is distributed in the hope that it will be useful,\\n\");\n        sb.append(\"but WITHOUT ANY WARRANTY; without even the implied warranty of\\n\");\n        sb.append(\"MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n\");\n        sb.append(\"GNU General Public License for more details.\\n\\n\");\n        sb.append(\"You should have received a copy of the GNU General Public License\\n\");\n        sb.append(\"along with this program.  If not, see <http://www.gnu.org/licenses/>..\\n\");\n        sb.append(\"This is free software, and you are welcome to redistribute it\\n\");\n        sb.append(\"under certain conditions;\\n\");\n        return sb.toString();\n    }\n}\n",
		"id": "EvoSuiteBenchmark/109_pdfsam/src/main/java/org/pdfsam/console/business/ConsoleServicesFacadeTest0.java",
		"test_prompt": "// ConsoleServicesFacadeTest0.java\npackage org.pdfsam.console.business;\n\nimport java.util.Observer;\nimport org.apache.log4j.Logger;\nimport org.pdfsam.console.business.dto.commands.AbstractParsedCommand;\nimport org.pdfsam.console.business.parser.CmdParseManager;\nimport org.pdfsam.console.business.pdf.CmdExecuteManager;\nimport org.pdfsam.console.exceptions.console.ConsoleException;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link ConsoleServicesFacade}.\n* It contains ten unit test cases for the {@link ConsoleServicesFacade#parseAndValidate(String[])} method.\n*/\nclass ConsoleServicesFacadeTest0 {"
	},
	{
		"original_code": "// ConsoleServicesFacade.java\n/*\n * Created on 02-Nov-2007\n * Copyright (C) 2007 by Andrea Vacondio.\n *\n * This library is provided under dual licenses.\n * You may choose the terms of the Lesser General Public License version 2.1 or the General Public License version 2\n * License at your discretion.\n * \n * \n * This library is free software; you can redistribute it and/or\n * modify it under the terms of the GNU Lesser General Public\n * License as published by the Free Software Foundation;\n * version 2.1 of the License.\n * \n * This library is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n * Lesser General Public License for more details.\n * \n * You should have received a copy of the GNU Lesser General Public\n * License along with this library; if not, write to the Free Software\n * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA\n * \n * \n * \n * This program is free software; you can redistribute it and/or modify it under the terms of the \n * GNU General Public License as published by the Free Software Foundation; \n * either version 2 of the License.\n * \n * This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; \n * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. \n * See the GNU General Public License for more details.\n * You should have received a copy of the GNU General Public License along with this program; \n * if not, write to the Free Software Foundation, Inc., \n *  59 Temple Place, Suite 330, Boston, MA 02111-1307 USA\n */\npackage org.pdfsam.console.business;\n\nimport java.util.Observer;\nimport org.apache.log4j.Logger;\nimport org.pdfsam.console.business.dto.commands.AbstractParsedCommand;\nimport org.pdfsam.console.business.parser.CmdParseManager;\nimport org.pdfsam.console.business.pdf.CmdExecuteManager;\nimport org.pdfsam.console.exceptions.console.ConsoleException;\n\n/**\n * Facade for the console services\n *\n * @author Andrea Vacondio\n */\npublic class ConsoleServicesFacade {\n\n    private static final Logger LOG = Logger.getLogger(ConsoleServicesFacade.class.getPackage().getName());\n\n    public static final String VERSION = \"2.4.1e\";\n\n    public static final String CREATOR = \"pdfsam-console (Ver. \" + ConsoleServicesFacade.VERSION + \")\";\n\n    private CmdParseManager cmdParserManager;\n\n    private CmdExecuteManager cmdExecuteManager;\n\n    public ConsoleServicesFacade() {\n        cmdParserManager = new CmdParseManager();\n        cmdExecuteManager = new CmdExecuteManager();\n    }\n\n    /**\n     * execute parsedCommand\n     *\n     * @param parsedCommand\n     * @throws ConsoleException.\n     */\n    public synchronized void execute(AbstractParsedCommand parsedCommand) throws ConsoleException {\n        cmdExecuteManager.execute(parsedCommand);\n    }\n\n    /**\n     * parse and validate the input arguments\n     *\n     * @param inputArguments\n     *            input string arguments\n     * @return the parsed command\n     * @throws Exception.\n     */\n    public synchronized AbstractParsedCommand parseAndValidate(String[] inputArguments) throws Exception {\n        try {\n            AbstractParsedCommand retVal = null;\n            if (cmdParserManager.parse(inputArguments)) {\n                retVal = cmdParserManager.validate();\n            } else {\n                LOG.error(\"Parse failed.\");\n            }\n            return retVal;\n        } catch (ConsoleException ce) {\n            throw new Exception(ce);\n        }\n    }\n\n    /**\n     * Adds an observer that observe the execution. No duplicate allowed.\n     *\n     * @param observer\n     * @throws NullPointerException\n     *             if the observer is null\n     */\n    public synchronized void addExecutionObserver(Observer observer) throws NullPointerException {\n        cmdExecuteManager.addObserver(observer);\n    }\n\n    /**\n     * @return the License String\n     */\n    public static String getLicense() {\n        StringBuffer sb = new StringBuffer();\n        sb.append(ConsoleServicesFacade.CREATOR + \"  Copyright (C) 2007  Andrea Vacondio\\n\");\n        sb.append(\"This library is provided under dual license.\\n\");\n        sb.append(\"You may choose the terms of the Lesser General Public License version 2.1 or the General Public License version 2\\n\");\n        sb.append(\"License at your discretion.\\n\\n\");\n        sb.append(\"This library is free software; you can redistribute it and/or\\n\");\n        sb.append(\"modify it under the terms of the GNU Lesser General Public\\n\");\n        sb.append(\"License as published by the Free Software Foundation;\\n\");\n        sb.append(\"version 2.1 of the License.\\n\\n\");\n        sb.append(\"This library is distributed in the hope that it will be useful,\\n\");\n        sb.append(\"but WITHOUT ANY WARRANTY; without even the implied warranty of\\n\");\n        sb.append(\"MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\\n\");\n        sb.append(\"Lesser General Public License for more details.\\n\\n\");\n        sb.append(\"You should have received a copy of the GNU Lesser General Public\\n\");\n        sb.append(\"License along with this library; if not, write to the Free Software\\n\");\n        sb.append(\"Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA\\n\\n\\n\");\n        sb.append(\"This program is free software: you can redistribute it and/or modify\\n\");\n        sb.append(\"it under the terms of the GNU General Public License as published by\\n\");\n        sb.append(\"the Free Software Foundation,version 2 of the License\\n\\n\");\n        sb.append(\"This program is distributed in the hope that it will be useful,\\n\");\n        sb.append(\"but WITHOUT ANY WARRANTY; without even the implied warranty of\\n\");\n        sb.append(\"MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n\");\n        sb.append(\"GNU General Public License for more details.\\n\\n\");\n        sb.append(\"You should have received a copy of the GNU General Public License\\n\");\n        sb.append(\"along with this program.  If not, see <http://www.gnu.org/licenses/>..\\n\");\n        sb.append(\"This is free software, and you are welcome to redistribute it\\n\");\n        sb.append(\"under certain conditions;\\n\");\n        return sb.toString();\n    }\n}\n",
		"id": "EvoSuiteBenchmark/109_pdfsam/src/main/java/org/pdfsam/console/business/ConsoleServicesFacadeTest1.java",
		"test_prompt": "// ConsoleServicesFacadeTest1.java\npackage org.pdfsam.console.business;\n\nimport java.util.Observer;\nimport org.apache.log4j.Logger;\nimport org.pdfsam.console.business.dto.commands.AbstractParsedCommand;\nimport org.pdfsam.console.business.parser.CmdParseManager;\nimport org.pdfsam.console.business.pdf.CmdExecuteManager;\nimport org.pdfsam.console.exceptions.console.ConsoleException;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link ConsoleServicesFacade}.\n* It contains ten unit test cases for the {@link ConsoleServicesFacade#getLicense()} method.\n*/\nclass ConsoleServicesFacadeTest1 {"
	},
	{
		"original_code": "// BookmarksProcessor.java\n/*\n * Created on 10-Jan-2010\n * Copyright (C) 2010 by Andrea Vacondio.\n *\n * This library is provided under dual licenses.\n * You may choose the terms of the Lesser General Public License version 2.1 or the General Public License version 2\n * License at your discretion.\n * \n * \n * This library is free software; you can redistribute it and/or\n * modify it under the terms of the GNU Lesser General Public\n * License as published by the Free Software Foundation;\n * version 2.1 of the License.\n * \n * This library is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n * Lesser General Public License for more details.\n * \n * You should have received a copy of the GNU Lesser General Public\n * License along with this library; if not, write to the Free Software\n * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA\n * \n * \n * \n * This program is free software; you can redistribute it and/or modify it under the terms of the \n * GNU General Public License as published by the Free Software Foundation; \n * either version 2 of the License.\n * \n * This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; \n * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. \n * See the GNU General Public License for more details.\n * You should have received a copy of the GNU General Public License along with this program; \n * if not, write to the Free Software Foundation, Inc., \n *  59 Temple Place, Suite 330, Boston, MA 02111-1307 USA\n */\npackage org.pdfsam.console.business.pdf.bookmarks;\n\nimport java.util.ArrayList;\nimport java.util.Collections;\nimport java.util.HashMap;\nimport java.util.Iterator;\nimport java.util.List;\nimport java.util.Map.Entry;\nimport java.util.Set;\nimport com.lowagie.text.pdf.SimpleBookmark;\n\n/**\n * Helper class used to process bookmarks\n *\n * @author Andrea Vacondio\n */\npublic class BookmarksProcessor {\n\n    private List bookmarks;\n\n    private int numberOfPages;\n\n    /**\n     * @param bookmarks\n     * @param numberOfPages\n     */\n    public BookmarksProcessor(List bookmarks, int numberOfPages) {\n        super();\n        if (bookmarks != null) {\n            this.bookmarks = Collections.unmodifiableList(bookmarks);\n        }\n        this.numberOfPages = numberOfPages;\n    }\n\n    /**\n     * Process the bookmarks returning a view of the whole list that contains only pages comprehended among the two limits (included) with page number shifted if necessary.\n     *\n     * @param startPage\n     *            start page number\n     * @param endPage\n     *            end page number\n     * @param pageOffset\n     *            if not 0 pages are shifted of the given amount\n     * @return\n     */\n    public List processBookmarks(int startPage, int endPage, int pageOffset) {\n        List books = null;\n        if (bookmarks != null) {\n            books = getCopyBookmarks(bookmarks);\n            if (endPage < numberOfPages) {\n                SimpleBookmark.eliminatePages(books, new int[] { endPage + 1, numberOfPages });\n            }\n            if (startPage > 1) {\n                SimpleBookmark.eliminatePages(books, new int[] { 1, startPage - 1 });\n                SimpleBookmark.shiftPageNumbers(books, -(startPage - 1), null);\n            }\n            if (pageOffset != 0) {\n                SimpleBookmark.shiftPageNumbers(books, pageOffset, null);\n            }\n        }\n        return books;\n    }\n\n    /**\n     * Process the bookmarks returning a view of the whole list that contains only pages comprehended among the two limits (included) with page number shifted if necessary.\n     *\n     * @param startPage\n     *            start page number\n     * @param endPage\n     *            end page number\n     * @return\n     * @see BookmarksProcessor#processBookmarks(int, int, int)\n     */\n    public List processBookmarks(int startPage, int endPage) {\n        return processBookmarks(startPage, endPage, 0);\n    }\n\n    private List getCopyBookmarks(List inputBook) {\n        List retVal = new ArrayList();\n        for (Iterator it = inputBook.listIterator(); it.hasNext(); ) {\n            HashMap map = (HashMap) it.next();\n            retVal.add(getCopyMap(map));\n        }\n        return retVal;\n    }\n\n    /**\n     * @param map\n     * @return\n     */\n    private HashMap getCopyMap(HashMap map) {\n        HashMap retVal = new HashMap();\n        if (map != null) {\n            Set entries = map.entrySet();\n            for (Iterator it = entries.iterator(); it.hasNext(); ) {\n                Entry entry = (Entry) it.next();\n                if (entry.getValue() instanceof List) {\n                    retVal.put(entry.getKey(), getCopyBookmarks((List) entry.getValue()));\n                } else {\n                    retVal.put(entry.getKey(), entry.getValue());\n                }\n            }\n        }\n        return retVal;\n    }\n}\n",
		"id": "EvoSuiteBenchmark/109_pdfsam/src/main/java/org/pdfsam/console/business/pdf/bookmarks/BookmarksProcessorTest0.java",
		"test_prompt": "// BookmarksProcessorTest0.java\npackage org.pdfsam.console.business.pdf.bookmarks;\n\nimport java.util.ArrayList;\nimport java.util.Collections;\nimport java.util.HashMap;\nimport java.util.Iterator;\nimport java.util.List;\nimport java.util.Map.Entry;\nimport java.util.Set;\nimport com.lowagie.text.pdf.SimpleBookmark;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link BookmarksProcessor}.\n* It contains ten unit test cases for the {@link BookmarksProcessor#processBookmarks(int, int, int)} method.\n*/\nclass BookmarksProcessorTest0 {"
	},
	{
		"original_code": "// BookmarksProcessor.java\n/*\n * Created on 10-Jan-2010\n * Copyright (C) 2010 by Andrea Vacondio.\n *\n * This library is provided under dual licenses.\n * You may choose the terms of the Lesser General Public License version 2.1 or the General Public License version 2\n * License at your discretion.\n * \n * \n * This library is free software; you can redistribute it and/or\n * modify it under the terms of the GNU Lesser General Public\n * License as published by the Free Software Foundation;\n * version 2.1 of the License.\n * \n * This library is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n * Lesser General Public License for more details.\n * \n * You should have received a copy of the GNU Lesser General Public\n * License along with this library; if not, write to the Free Software\n * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA\n * \n * \n * \n * This program is free software; you can redistribute it and/or modify it under the terms of the \n * GNU General Public License as published by the Free Software Foundation; \n * either version 2 of the License.\n * \n * This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; \n * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. \n * See the GNU General Public License for more details.\n * You should have received a copy of the GNU General Public License along with this program; \n * if not, write to the Free Software Foundation, Inc., \n *  59 Temple Place, Suite 330, Boston, MA 02111-1307 USA\n */\npackage org.pdfsam.console.business.pdf.bookmarks;\n\nimport java.util.ArrayList;\nimport java.util.Collections;\nimport java.util.HashMap;\nimport java.util.Iterator;\nimport java.util.List;\nimport java.util.Map.Entry;\nimport java.util.Set;\nimport com.lowagie.text.pdf.SimpleBookmark;\n\n/**\n * Helper class used to process bookmarks\n *\n * @author Andrea Vacondio\n */\npublic class BookmarksProcessor {\n\n    private List bookmarks;\n\n    private int numberOfPages;\n\n    /**\n     * @param bookmarks\n     * @param numberOfPages\n     */\n    public BookmarksProcessor(List bookmarks, int numberOfPages) {\n        super();\n        if (bookmarks != null) {\n            this.bookmarks = Collections.unmodifiableList(bookmarks);\n        }\n        this.numberOfPages = numberOfPages;\n    }\n\n    /**\n     * Process the bookmarks returning a view of the whole list that contains only pages comprehended among the two limits (included) with page number shifted if necessary.\n     *\n     * @param startPage\n     *            start page number\n     * @param endPage\n     *            end page number\n     * @param pageOffset\n     *            if not 0 pages are shifted of the given amount\n     * @return\n     */\n    public List processBookmarks(int startPage, int endPage, int pageOffset) {\n        List books = null;\n        if (bookmarks != null) {\n            books = getCopyBookmarks(bookmarks);\n            if (endPage < numberOfPages) {\n                SimpleBookmark.eliminatePages(books, new int[] { endPage + 1, numberOfPages });\n            }\n            if (startPage > 1) {\n                SimpleBookmark.eliminatePages(books, new int[] { 1, startPage - 1 });\n                SimpleBookmark.shiftPageNumbers(books, -(startPage - 1), null);\n            }\n            if (pageOffset != 0) {\n                SimpleBookmark.shiftPageNumbers(books, pageOffset, null);\n            }\n        }\n        return books;\n    }\n\n    /**\n     * Process the bookmarks returning a view of the whole list that contains only pages comprehended among the two limits (included) with page number shifted if necessary.\n     *\n     * @param startPage\n     *            start page number\n     * @param endPage\n     *            end page number\n     * @return\n     * @see BookmarksProcessor#processBookmarks(int, int, int)\n     */\n    public List processBookmarks(int startPage, int endPage) {\n        return processBookmarks(startPage, endPage, 0);\n    }\n\n    private List getCopyBookmarks(List inputBook) {\n        List retVal = new ArrayList();\n        for (Iterator it = inputBook.listIterator(); it.hasNext(); ) {\n            HashMap map = (HashMap) it.next();\n            retVal.add(getCopyMap(map));\n        }\n        return retVal;\n    }\n\n    /**\n     * @param map\n     * @return\n     */\n    private HashMap getCopyMap(HashMap map) {\n        HashMap retVal = new HashMap();\n        if (map != null) {\n            Set entries = map.entrySet();\n            for (Iterator it = entries.iterator(); it.hasNext(); ) {\n                Entry entry = (Entry) it.next();\n                if (entry.getValue() instanceof List) {\n                    retVal.put(entry.getKey(), getCopyBookmarks((List) entry.getValue()));\n                } else {\n                    retVal.put(entry.getKey(), entry.getValue());\n                }\n            }\n        }\n        return retVal;\n    }\n}\n",
		"id": "EvoSuiteBenchmark/109_pdfsam/src/main/java/org/pdfsam/console/business/pdf/bookmarks/BookmarksProcessorTest1.java",
		"test_prompt": "// BookmarksProcessorTest1.java\npackage org.pdfsam.console.business.pdf.bookmarks;\n\nimport java.util.ArrayList;\nimport java.util.Collections;\nimport java.util.HashMap;\nimport java.util.Iterator;\nimport java.util.List;\nimport java.util.Map.Entry;\nimport java.util.Set;\nimport com.lowagie.text.pdf.SimpleBookmark;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link BookmarksProcessor}.\n* It contains ten unit test cases for the {@link BookmarksProcessor#processBookmarks(int, int)} method.\n*/\nclass BookmarksProcessorTest1 {"
	},
	{
		"original_code": "// CmdParseManager.java\n/*\r\n * Created on 21-Sep-2007\r\n * Copyright (C) 2006 by Andrea Vacondio.\r\n *\r\n *\r\n * This library is provided under dual licenses.\r\n * You may choose the terms of the Lesser General Public License version 2.1 or the General Public License version 2\r\n * License at your discretion.\r\n * \r\n * \r\n * This library is free software; you can redistribute it and/or\r\n * modify it under the terms of the GNU Lesser General Public\r\n * License as published by the Free Software Foundation;\r\n * version 2.1 of the License.\r\n * \r\n * This library is distributed in the hope that it will be useful,\r\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\r\n * Lesser General Public License for more details.\r\n * \r\n * You should have received a copy of the GNU Lesser General Public\r\n * License along with this library; if not, write to the Free Software\r\n * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA\r\n * \r\n * \r\n * \r\n * This program is free software; you can redistribute it and/or modify it under the terms of the \r\n * GNU General Public License as published by the Free Software Foundation; \r\n * either version 2 of the License.\r\n * \r\n * This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; \r\n * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. \r\n * See the GNU General Public License for more details.\r\n * You should have received a copy of the GNU General Public License along with this program; \r\n * if not, write to the Free Software Foundation, Inc., \r\n *  59 Temple Place, Suite 330, Boston, MA 02111-1307 USA\r\n */\r\npackage org.pdfsam.console.business.parser;\r\n\r\nimport jcmdline.CmdLineHandler;\r\nimport org.apache.commons.lang.time.DurationFormatUtils;\r\nimport org.apache.commons.lang.time.StopWatch;\r\nimport org.apache.log4j.Logger;\r\nimport org.pdfsam.console.business.dto.commands.AbstractParsedCommand;\r\nimport org.pdfsam.console.business.dto.commands.ConcatParsedCommand;\r\nimport org.pdfsam.console.business.dto.commands.DecryptParsedCommand;\r\nimport org.pdfsam.console.business.dto.commands.DocumentInfoParsedCommand;\r\nimport org.pdfsam.console.business.dto.commands.EncryptParsedCommand;\r\nimport org.pdfsam.console.business.dto.commands.MixParsedCommand;\r\nimport org.pdfsam.console.business.dto.commands.PageLabelsParsedCommand;\r\nimport org.pdfsam.console.business.dto.commands.RotateParsedCommand;\r\nimport org.pdfsam.console.business.dto.commands.SetViewerParsedCommand;\r\nimport org.pdfsam.console.business.dto.commands.SlideShowParsedCommand;\r\nimport org.pdfsam.console.business.dto.commands.SplitParsedCommand;\r\nimport org.pdfsam.console.business.dto.commands.UnpackParsedCommand;\r\nimport org.pdfsam.console.business.parser.handlers.ConcatCmdHandler;\r\nimport org.pdfsam.console.business.parser.handlers.DecryptCmdHandler;\r\nimport org.pdfsam.console.business.parser.handlers.DefaultCmdHandler;\r\nimport org.pdfsam.console.business.parser.handlers.DocumentInfoCmdHandler;\r\nimport org.pdfsam.console.business.parser.handlers.EncryptCmdHandler;\r\nimport org.pdfsam.console.business.parser.handlers.MixCmdHandler;\r\nimport org.pdfsam.console.business.parser.handlers.PageLabelsCmdHandler;\r\nimport org.pdfsam.console.business.parser.handlers.RotateCmdHandler;\r\nimport org.pdfsam.console.business.parser.handlers.SetViewerCmdHandler;\r\nimport org.pdfsam.console.business.parser.handlers.SlideShowCmdHandler;\r\nimport org.pdfsam.console.business.parser.handlers.SplitCmdHandler;\r\nimport org.pdfsam.console.business.parser.handlers.UnpackCmdHandler;\r\nimport org.pdfsam.console.business.parser.handlers.interfaces.CmdHandler;\r\nimport org.pdfsam.console.business.parser.validators.ConcatCmdValidator;\r\nimport org.pdfsam.console.business.parser.validators.DecryptCmdValidator;\r\nimport org.pdfsam.console.business.parser.validators.DocumentInfoCmdValidator;\r\nimport org.pdfsam.console.business.parser.validators.EncryptCmdValidator;\r\nimport org.pdfsam.console.business.parser.validators.MixCmdValidator;\r\nimport org.pdfsam.console.business.parser.validators.PageLabelsCmdValidator;\r\nimport org.pdfsam.console.business.parser.validators.RotateCmdValidator;\r\nimport org.pdfsam.console.business.parser.validators.SetViewerCmdValidator;\r\nimport org.pdfsam.console.business.parser.validators.SlideShowCmdValidator;\r\nimport org.pdfsam.console.business.parser.validators.SplitCmdValidator;\r\nimport org.pdfsam.console.business.parser.validators.UnpackCmdValidator;\r\nimport org.pdfsam.console.business.parser.validators.interfaces.CmdValidator;\r\nimport org.pdfsam.console.exceptions.console.ConsoleException;\r\nimport org.pdfsam.console.exceptions.console.ParseException;\r\n\r\n/**\r\n * Main command parser\r\n * @author Andrea Vacondio\r\n */\r\npublic class CmdParseManager {\r\n\r\n    private final Logger log = Logger.getLogger(CmdParseManager.class.getPackage().getName());\r\n\r\n    private String[] inputArguments;\r\n\r\n    private CmdHandler cmdHandler;\r\n\r\n    private CmdValidator cmdValidator;\r\n\r\n    private final StopWatch stopWatch = new StopWatch();\r\n\r\n    public CmdParseManager() {\r\n        setInputArguments(null);\r\n    }\r\n\r\n    public CmdParseManager(String[] inputArguments) {\r\n        setInputArguments(inputArguments);\r\n    }\r\n\r\n    /**\r\n     * @return the input command\r\n     */\r\n    private String getInputCommand() {\r\n        String retVal;\r\n        retVal = (inputArguments != null && inputArguments.length > 0) ? inputArguments[inputArguments.length - 1] : \"\";\r\n        return retVal;\r\n    }\r\n\r\n    /**\r\n     * Sets the input arguments creating the properCmdHandler and CmdValidator\r\n     * @param inputArguments\r\n     */\r\n    public void setInputArguments(String[] inputArguments) {\r\n        this.inputArguments = inputArguments;\r\n        String inputCommand = getInputCommand();\r\n        if (MixParsedCommand.COMMAND_MIX.equals(inputCommand)) {\r\n            cmdHandler = new MixCmdHandler();\r\n            cmdValidator = new MixCmdValidator();\r\n        } else if (ConcatParsedCommand.COMMAND_CONCAT.equals(inputCommand)) {\r\n            cmdHandler = new ConcatCmdHandler();\r\n            cmdValidator = new ConcatCmdValidator();\r\n        } else if (SplitParsedCommand.COMMAND_SPLIT.equals(inputCommand)) {\r\n            cmdHandler = new SplitCmdHandler();\r\n            cmdValidator = new SplitCmdValidator();\r\n        } else if (EncryptParsedCommand.COMMAND_ENCRYPT.equals(inputCommand)) {\r\n            cmdHandler = new EncryptCmdHandler();\r\n            cmdValidator = new EncryptCmdValidator();\r\n        } else if (UnpackParsedCommand.COMMAND_UNPACK.equals(inputCommand)) {\r\n            cmdHandler = new UnpackCmdHandler();\r\n            cmdValidator = new UnpackCmdValidator();\r\n        } else if (SetViewerParsedCommand.COMMAND_SETVIEWER.equals(inputCommand)) {\r\n            cmdHandler = new SetViewerCmdHandler();\r\n            cmdValidator = new SetViewerCmdValidator();\r\n        } else if (SlideShowParsedCommand.COMMAND_SLIDESHOW.equals(inputCommand)) {\r\n            cmdHandler = new SlideShowCmdHandler();\r\n            cmdValidator = new SlideShowCmdValidator();\r\n        } else if (DecryptParsedCommand.COMMAND_DECRYPT.equals(inputCommand)) {\r\n            cmdHandler = new DecryptCmdHandler();\r\n            cmdValidator = new DecryptCmdValidator();\r\n        } else if (RotateParsedCommand.COMMAND_ROTATE.equals(inputCommand)) {\r\n            cmdHandler = new RotateCmdHandler();\r\n            cmdValidator = new RotateCmdValidator();\r\n        } else if (PageLabelsParsedCommand.COMMAND_PAGELABELS.equals(inputCommand)) {\r\n            cmdHandler = new PageLabelsCmdHandler();\r\n            cmdValidator = new PageLabelsCmdValidator();\r\n        } else if (DocumentInfoParsedCommand.COMMAND_SETDOCINFO.equals(inputCommand)) {\r\n            cmdHandler = new DocumentInfoCmdHandler();\r\n            cmdValidator = new DocumentInfoCmdValidator();\r\n        } else {\r\n            cmdHandler = new DefaultCmdHandler();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Perform command line parsing\r\n     * @return true if parsed correctly\r\n     * @throws ConsoleException\r\n     */\r\n    public boolean parse() throws ConsoleException {\r\n        stopWatch.reset();\r\n        stopWatch.start();\r\n        boolean retVal = false;\r\n        try {\r\n            if (cmdHandler != null) {\r\n                CmdLineHandler cmdLineHandler = cmdHandler.getCommandLineHandler();\r\n                log.debug(\"Starting arguments parsing.\");\r\n                if (cmdLineHandler != null) {\r\n                    retVal = cmdLineHandler.parse(inputArguments);\r\n                    if (!retVal) {\r\n                        throw new ParseException(ParseException.ERR_PARSE, new String[] { cmdLineHandler.getParseError() });\r\n                    }\r\n                } else {\r\n                    throw new ConsoleException(ConsoleException.CMD_LINE_HANDLER_NULL);\r\n                }\r\n            } else {\r\n                throw new ConsoleException(ConsoleException.CMD_LINE_HANDLER_NULL);\r\n            }\r\n        } finally {\r\n            stopWatch.stop();\r\n            log.debug(\"Command '\" + getInputCommand() + \"' parsed in \" + DurationFormatUtils.formatDurationWords(stopWatch.getTime(), true, true));\r\n        }\r\n        return retVal;\r\n    }\r\n\r\n    /**\r\n     * Perform command line parsing for the input arguments\r\n     * @return true if parsed correctly\r\n     * @throws ConsoleException\r\n     */\r\n    public boolean parse(String[] inputArguments) throws ConsoleException {\r\n        setInputArguments(inputArguments);\r\n        return parse();\r\n    }\r\n\r\n    /**\r\n     * Perform command validation\r\n     * @return parsed command\r\n     * @throws ConsoleException\r\n     */\r\n    public AbstractParsedCommand validate() throws ConsoleException {\r\n        stopWatch.reset();\r\n        stopWatch.start();\r\n        AbstractParsedCommand retVal = null;\r\n        try {\r\n            if (cmdHandler != null) {\r\n                CmdLineHandler cmdLineHandler = cmdHandler.getCommandLineHandler();\r\n                log.debug(\"Starting arguments validation.\");\r\n                if (cmdLineHandler != null) {\r\n                    if (cmdValidator != null) {\r\n                        retVal = cmdValidator.validate(cmdLineHandler);\r\n                    } else {\r\n                        throw new ConsoleException(ConsoleException.CMD_LINE_VALIDATOR_NULL);\r\n                    }\r\n                } else {\r\n                    throw new ConsoleException(ConsoleException.CMD_LINE_HANDLER_NULL);\r\n                }\r\n            } else {\r\n                throw new ConsoleException(ConsoleException.CMD_LINE_HANDLER_NULL);\r\n            }\r\n        } finally {\r\n            stopWatch.stop();\r\n            log.debug(\"Command '\" + getInputCommand() + \"' validated in \" + DurationFormatUtils.formatDurationWords(stopWatch.getTime(), true, true));\r\n        }\r\n        return retVal;\r\n    }\r\n}\r\n",
		"id": "EvoSuiteBenchmark/109_pdfsam/src/main/java/org/pdfsam/console/business/parser/CmdParseManagerTest0.java",
		"test_prompt": "// CmdParseManagerTest0.java\npackage org.pdfsam.console.business.parser;\n\nimport jcmdline.CmdLineHandler;\nimport org.apache.commons.lang.time.DurationFormatUtils;\nimport org.apache.commons.lang.time.StopWatch;\nimport org.apache.log4j.Logger;\nimport org.pdfsam.console.business.dto.commands.AbstractParsedCommand;\nimport org.pdfsam.console.business.dto.commands.ConcatParsedCommand;\nimport org.pdfsam.console.business.dto.commands.DecryptParsedCommand;\nimport org.pdfsam.console.business.dto.commands.DocumentInfoParsedCommand;\nimport org.pdfsam.console.business.dto.commands.EncryptParsedCommand;\nimport org.pdfsam.console.business.dto.commands.MixParsedCommand;\nimport org.pdfsam.console.business.dto.commands.PageLabelsParsedCommand;\nimport org.pdfsam.console.business.dto.commands.RotateParsedCommand;\nimport org.pdfsam.console.business.dto.commands.SetViewerParsedCommand;\nimport org.pdfsam.console.business.dto.commands.SlideShowParsedCommand;\nimport org.pdfsam.console.business.dto.commands.SplitParsedCommand;\nimport org.pdfsam.console.business.dto.commands.UnpackParsedCommand;\nimport org.pdfsam.console.business.parser.handlers.ConcatCmdHandler;\nimport org.pdfsam.console.business.parser.handlers.DecryptCmdHandler;\nimport org.pdfsam.console.business.parser.handlers.DefaultCmdHandler;\nimport org.pdfsam.console.business.parser.handlers.DocumentInfoCmdHandler;\nimport org.pdfsam.console.business.parser.handlers.EncryptCmdHandler;\nimport org.pdfsam.console.business.parser.handlers.MixCmdHandler;\nimport org.pdfsam.console.business.parser.handlers.PageLabelsCmdHandler;\nimport org.pdfsam.console.business.parser.handlers.RotateCmdHandler;\nimport org.pdfsam.console.business.parser.handlers.SetViewerCmdHandler;\nimport org.pdfsam.console.business.parser.handlers.SlideShowCmdHandler;\nimport org.pdfsam.console.business.parser.handlers.SplitCmdHandler;\nimport org.pdfsam.console.business.parser.handlers.UnpackCmdHandler;\nimport org.pdfsam.console.business.parser.handlers.interfaces.CmdHandler;\nimport org.pdfsam.console.business.parser.validators.ConcatCmdValidator;\nimport org.pdfsam.console.business.parser.validators.DecryptCmdValidator;\nimport org.pdfsam.console.business.parser.validators.DocumentInfoCmdValidator;\nimport org.pdfsam.console.business.parser.validators.EncryptCmdValidator;\nimport org.pdfsam.console.business.parser.validators.MixCmdValidator;\nimport org.pdfsam.console.business.parser.validators.PageLabelsCmdValidator;\nimport org.pdfsam.console.business.parser.validators.RotateCmdValidator;\nimport org.pdfsam.console.business.parser.validators.SetViewerCmdValidator;\nimport org.pdfsam.console.business.parser.validators.SlideShowCmdValidator;\nimport org.pdfsam.console.business.parser.validators.SplitCmdValidator;\nimport org.pdfsam.console.business.parser.validators.UnpackCmdValidator;\nimport org.pdfsam.console.business.parser.validators.interfaces.CmdValidator;\nimport org.pdfsam.console.exceptions.console.ConsoleException;\nimport org.pdfsam.console.exceptions.console.ParseException;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link CmdParseManager}.\n* It contains ten unit test cases for the {@link CmdParseManager#parse()} method.\n*/\nclass CmdParseManagerTest0 {"
	},
	{
		"original_code": "// CmdParseManager.java\n/*\r\n * Created on 21-Sep-2007\r\n * Copyright (C) 2006 by Andrea Vacondio.\r\n *\r\n *\r\n * This library is provided under dual licenses.\r\n * You may choose the terms of the Lesser General Public License version 2.1 or the General Public License version 2\r\n * License at your discretion.\r\n * \r\n * \r\n * This library is free software; you can redistribute it and/or\r\n * modify it under the terms of the GNU Lesser General Public\r\n * License as published by the Free Software Foundation;\r\n * version 2.1 of the License.\r\n * \r\n * This library is distributed in the hope that it will be useful,\r\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\r\n * Lesser General Public License for more details.\r\n * \r\n * You should have received a copy of the GNU Lesser General Public\r\n * License along with this library; if not, write to the Free Software\r\n * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA\r\n * \r\n * \r\n * \r\n * This program is free software; you can redistribute it and/or modify it under the terms of the \r\n * GNU General Public License as published by the Free Software Foundation; \r\n * either version 2 of the License.\r\n * \r\n * This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; \r\n * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. \r\n * See the GNU General Public License for more details.\r\n * You should have received a copy of the GNU General Public License along with this program; \r\n * if not, write to the Free Software Foundation, Inc., \r\n *  59 Temple Place, Suite 330, Boston, MA 02111-1307 USA\r\n */\r\npackage org.pdfsam.console.business.parser;\r\n\r\nimport jcmdline.CmdLineHandler;\r\nimport org.apache.commons.lang.time.DurationFormatUtils;\r\nimport org.apache.commons.lang.time.StopWatch;\r\nimport org.apache.log4j.Logger;\r\nimport org.pdfsam.console.business.dto.commands.AbstractParsedCommand;\r\nimport org.pdfsam.console.business.dto.commands.ConcatParsedCommand;\r\nimport org.pdfsam.console.business.dto.commands.DecryptParsedCommand;\r\nimport org.pdfsam.console.business.dto.commands.DocumentInfoParsedCommand;\r\nimport org.pdfsam.console.business.dto.commands.EncryptParsedCommand;\r\nimport org.pdfsam.console.business.dto.commands.MixParsedCommand;\r\nimport org.pdfsam.console.business.dto.commands.PageLabelsParsedCommand;\r\nimport org.pdfsam.console.business.dto.commands.RotateParsedCommand;\r\nimport org.pdfsam.console.business.dto.commands.SetViewerParsedCommand;\r\nimport org.pdfsam.console.business.dto.commands.SlideShowParsedCommand;\r\nimport org.pdfsam.console.business.dto.commands.SplitParsedCommand;\r\nimport org.pdfsam.console.business.dto.commands.UnpackParsedCommand;\r\nimport org.pdfsam.console.business.parser.handlers.ConcatCmdHandler;\r\nimport org.pdfsam.console.business.parser.handlers.DecryptCmdHandler;\r\nimport org.pdfsam.console.business.parser.handlers.DefaultCmdHandler;\r\nimport org.pdfsam.console.business.parser.handlers.DocumentInfoCmdHandler;\r\nimport org.pdfsam.console.business.parser.handlers.EncryptCmdHandler;\r\nimport org.pdfsam.console.business.parser.handlers.MixCmdHandler;\r\nimport org.pdfsam.console.business.parser.handlers.PageLabelsCmdHandler;\r\nimport org.pdfsam.console.business.parser.handlers.RotateCmdHandler;\r\nimport org.pdfsam.console.business.parser.handlers.SetViewerCmdHandler;\r\nimport org.pdfsam.console.business.parser.handlers.SlideShowCmdHandler;\r\nimport org.pdfsam.console.business.parser.handlers.SplitCmdHandler;\r\nimport org.pdfsam.console.business.parser.handlers.UnpackCmdHandler;\r\nimport org.pdfsam.console.business.parser.handlers.interfaces.CmdHandler;\r\nimport org.pdfsam.console.business.parser.validators.ConcatCmdValidator;\r\nimport org.pdfsam.console.business.parser.validators.DecryptCmdValidator;\r\nimport org.pdfsam.console.business.parser.validators.DocumentInfoCmdValidator;\r\nimport org.pdfsam.console.business.parser.validators.EncryptCmdValidator;\r\nimport org.pdfsam.console.business.parser.validators.MixCmdValidator;\r\nimport org.pdfsam.console.business.parser.validators.PageLabelsCmdValidator;\r\nimport org.pdfsam.console.business.parser.validators.RotateCmdValidator;\r\nimport org.pdfsam.console.business.parser.validators.SetViewerCmdValidator;\r\nimport org.pdfsam.console.business.parser.validators.SlideShowCmdValidator;\r\nimport org.pdfsam.console.business.parser.validators.SplitCmdValidator;\r\nimport org.pdfsam.console.business.parser.validators.UnpackCmdValidator;\r\nimport org.pdfsam.console.business.parser.validators.interfaces.CmdValidator;\r\nimport org.pdfsam.console.exceptions.console.ConsoleException;\r\nimport org.pdfsam.console.exceptions.console.ParseException;\r\n\r\n/**\r\n * Main command parser\r\n * @author Andrea Vacondio\r\n */\r\npublic class CmdParseManager {\r\n\r\n    private final Logger log = Logger.getLogger(CmdParseManager.class.getPackage().getName());\r\n\r\n    private String[] inputArguments;\r\n\r\n    private CmdHandler cmdHandler;\r\n\r\n    private CmdValidator cmdValidator;\r\n\r\n    private final StopWatch stopWatch = new StopWatch();\r\n\r\n    public CmdParseManager() {\r\n        setInputArguments(null);\r\n    }\r\n\r\n    public CmdParseManager(String[] inputArguments) {\r\n        setInputArguments(inputArguments);\r\n    }\r\n\r\n    /**\r\n     * @return the input command\r\n     */\r\n    private String getInputCommand() {\r\n        String retVal;\r\n        retVal = (inputArguments != null && inputArguments.length > 0) ? inputArguments[inputArguments.length - 1] : \"\";\r\n        return retVal;\r\n    }\r\n\r\n    /**\r\n     * Sets the input arguments creating the properCmdHandler and CmdValidator\r\n     * @param inputArguments\r\n     */\r\n    public void setInputArguments(String[] inputArguments) {\r\n        this.inputArguments = inputArguments;\r\n        String inputCommand = getInputCommand();\r\n        if (MixParsedCommand.COMMAND_MIX.equals(inputCommand)) {\r\n            cmdHandler = new MixCmdHandler();\r\n            cmdValidator = new MixCmdValidator();\r\n        } else if (ConcatParsedCommand.COMMAND_CONCAT.equals(inputCommand)) {\r\n            cmdHandler = new ConcatCmdHandler();\r\n            cmdValidator = new ConcatCmdValidator();\r\n        } else if (SplitParsedCommand.COMMAND_SPLIT.equals(inputCommand)) {\r\n            cmdHandler = new SplitCmdHandler();\r\n            cmdValidator = new SplitCmdValidator();\r\n        } else if (EncryptParsedCommand.COMMAND_ENCRYPT.equals(inputCommand)) {\r\n            cmdHandler = new EncryptCmdHandler();\r\n            cmdValidator = new EncryptCmdValidator();\r\n        } else if (UnpackParsedCommand.COMMAND_UNPACK.equals(inputCommand)) {\r\n            cmdHandler = new UnpackCmdHandler();\r\n            cmdValidator = new UnpackCmdValidator();\r\n        } else if (SetViewerParsedCommand.COMMAND_SETVIEWER.equals(inputCommand)) {\r\n            cmdHandler = new SetViewerCmdHandler();\r\n            cmdValidator = new SetViewerCmdValidator();\r\n        } else if (SlideShowParsedCommand.COMMAND_SLIDESHOW.equals(inputCommand)) {\r\n            cmdHandler = new SlideShowCmdHandler();\r\n            cmdValidator = new SlideShowCmdValidator();\r\n        } else if (DecryptParsedCommand.COMMAND_DECRYPT.equals(inputCommand)) {\r\n            cmdHandler = new DecryptCmdHandler();\r\n            cmdValidator = new DecryptCmdValidator();\r\n        } else if (RotateParsedCommand.COMMAND_ROTATE.equals(inputCommand)) {\r\n            cmdHandler = new RotateCmdHandler();\r\n            cmdValidator = new RotateCmdValidator();\r\n        } else if (PageLabelsParsedCommand.COMMAND_PAGELABELS.equals(inputCommand)) {\r\n            cmdHandler = new PageLabelsCmdHandler();\r\n            cmdValidator = new PageLabelsCmdValidator();\r\n        } else if (DocumentInfoParsedCommand.COMMAND_SETDOCINFO.equals(inputCommand)) {\r\n            cmdHandler = new DocumentInfoCmdHandler();\r\n            cmdValidator = new DocumentInfoCmdValidator();\r\n        } else {\r\n            cmdHandler = new DefaultCmdHandler();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Perform command line parsing\r\n     * @return true if parsed correctly\r\n     * @throws ConsoleException\r\n     */\r\n    public boolean parse() throws ConsoleException {\r\n        stopWatch.reset();\r\n        stopWatch.start();\r\n        boolean retVal = false;\r\n        try {\r\n            if (cmdHandler != null) {\r\n                CmdLineHandler cmdLineHandler = cmdHandler.getCommandLineHandler();\r\n                log.debug(\"Starting arguments parsing.\");\r\n                if (cmdLineHandler != null) {\r\n                    retVal = cmdLineHandler.parse(inputArguments);\r\n                    if (!retVal) {\r\n                        throw new ParseException(ParseException.ERR_PARSE, new String[] { cmdLineHandler.getParseError() });\r\n                    }\r\n                } else {\r\n                    throw new ConsoleException(ConsoleException.CMD_LINE_HANDLER_NULL);\r\n                }\r\n            } else {\r\n                throw new ConsoleException(ConsoleException.CMD_LINE_HANDLER_NULL);\r\n            }\r\n        } finally {\r\n            stopWatch.stop();\r\n            log.debug(\"Command '\" + getInputCommand() + \"' parsed in \" + DurationFormatUtils.formatDurationWords(stopWatch.getTime(), true, true));\r\n        }\r\n        return retVal;\r\n    }\r\n\r\n    /**\r\n     * Perform command line parsing for the input arguments\r\n     * @return true if parsed correctly\r\n     * @throws ConsoleException\r\n     */\r\n    public boolean parse(String[] inputArguments) throws ConsoleException {\r\n        setInputArguments(inputArguments);\r\n        return parse();\r\n    }\r\n\r\n    /**\r\n     * Perform command validation\r\n     * @return parsed command\r\n     * @throws ConsoleException\r\n     */\r\n    public AbstractParsedCommand validate() throws ConsoleException {\r\n        stopWatch.reset();\r\n        stopWatch.start();\r\n        AbstractParsedCommand retVal = null;\r\n        try {\r\n            if (cmdHandler != null) {\r\n                CmdLineHandler cmdLineHandler = cmdHandler.getCommandLineHandler();\r\n                log.debug(\"Starting arguments validation.\");\r\n                if (cmdLineHandler != null) {\r\n                    if (cmdValidator != null) {\r\n                        retVal = cmdValidator.validate(cmdLineHandler);\r\n                    } else {\r\n                        throw new ConsoleException(ConsoleException.CMD_LINE_VALIDATOR_NULL);\r\n                    }\r\n                } else {\r\n                    throw new ConsoleException(ConsoleException.CMD_LINE_HANDLER_NULL);\r\n                }\r\n            } else {\r\n                throw new ConsoleException(ConsoleException.CMD_LINE_HANDLER_NULL);\r\n            }\r\n        } finally {\r\n            stopWatch.stop();\r\n            log.debug(\"Command '\" + getInputCommand() + \"' validated in \" + DurationFormatUtils.formatDurationWords(stopWatch.getTime(), true, true));\r\n        }\r\n        return retVal;\r\n    }\r\n}\r\n",
		"id": "EvoSuiteBenchmark/109_pdfsam/src/main/java/org/pdfsam/console/business/parser/CmdParseManagerTest1.java",
		"test_prompt": "// CmdParseManagerTest1.java\npackage org.pdfsam.console.business.parser;\n\nimport jcmdline.CmdLineHandler;\nimport org.apache.commons.lang.time.DurationFormatUtils;\nimport org.apache.commons.lang.time.StopWatch;\nimport org.apache.log4j.Logger;\nimport org.pdfsam.console.business.dto.commands.AbstractParsedCommand;\nimport org.pdfsam.console.business.dto.commands.ConcatParsedCommand;\nimport org.pdfsam.console.business.dto.commands.DecryptParsedCommand;\nimport org.pdfsam.console.business.dto.commands.DocumentInfoParsedCommand;\nimport org.pdfsam.console.business.dto.commands.EncryptParsedCommand;\nimport org.pdfsam.console.business.dto.commands.MixParsedCommand;\nimport org.pdfsam.console.business.dto.commands.PageLabelsParsedCommand;\nimport org.pdfsam.console.business.dto.commands.RotateParsedCommand;\nimport org.pdfsam.console.business.dto.commands.SetViewerParsedCommand;\nimport org.pdfsam.console.business.dto.commands.SlideShowParsedCommand;\nimport org.pdfsam.console.business.dto.commands.SplitParsedCommand;\nimport org.pdfsam.console.business.dto.commands.UnpackParsedCommand;\nimport org.pdfsam.console.business.parser.handlers.ConcatCmdHandler;\nimport org.pdfsam.console.business.parser.handlers.DecryptCmdHandler;\nimport org.pdfsam.console.business.parser.handlers.DefaultCmdHandler;\nimport org.pdfsam.console.business.parser.handlers.DocumentInfoCmdHandler;\nimport org.pdfsam.console.business.parser.handlers.EncryptCmdHandler;\nimport org.pdfsam.console.business.parser.handlers.MixCmdHandler;\nimport org.pdfsam.console.business.parser.handlers.PageLabelsCmdHandler;\nimport org.pdfsam.console.business.parser.handlers.RotateCmdHandler;\nimport org.pdfsam.console.business.parser.handlers.SetViewerCmdHandler;\nimport org.pdfsam.console.business.parser.handlers.SlideShowCmdHandler;\nimport org.pdfsam.console.business.parser.handlers.SplitCmdHandler;\nimport org.pdfsam.console.business.parser.handlers.UnpackCmdHandler;\nimport org.pdfsam.console.business.parser.handlers.interfaces.CmdHandler;\nimport org.pdfsam.console.business.parser.validators.ConcatCmdValidator;\nimport org.pdfsam.console.business.parser.validators.DecryptCmdValidator;\nimport org.pdfsam.console.business.parser.validators.DocumentInfoCmdValidator;\nimport org.pdfsam.console.business.parser.validators.EncryptCmdValidator;\nimport org.pdfsam.console.business.parser.validators.MixCmdValidator;\nimport org.pdfsam.console.business.parser.validators.PageLabelsCmdValidator;\nimport org.pdfsam.console.business.parser.validators.RotateCmdValidator;\nimport org.pdfsam.console.business.parser.validators.SetViewerCmdValidator;\nimport org.pdfsam.console.business.parser.validators.SlideShowCmdValidator;\nimport org.pdfsam.console.business.parser.validators.SplitCmdValidator;\nimport org.pdfsam.console.business.parser.validators.UnpackCmdValidator;\nimport org.pdfsam.console.business.parser.validators.interfaces.CmdValidator;\nimport org.pdfsam.console.exceptions.console.ConsoleException;\nimport org.pdfsam.console.exceptions.console.ParseException;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link CmdParseManager}.\n* It contains ten unit test cases for the {@link CmdParseManager#parse(String[])} method.\n*/\nclass CmdParseManagerTest1 {"
	},
	{
		"original_code": "// CmdParseManager.java\n/*\r\n * Created on 21-Sep-2007\r\n * Copyright (C) 2006 by Andrea Vacondio.\r\n *\r\n *\r\n * This library is provided under dual licenses.\r\n * You may choose the terms of the Lesser General Public License version 2.1 or the General Public License version 2\r\n * License at your discretion.\r\n * \r\n * \r\n * This library is free software; you can redistribute it and/or\r\n * modify it under the terms of the GNU Lesser General Public\r\n * License as published by the Free Software Foundation;\r\n * version 2.1 of the License.\r\n * \r\n * This library is distributed in the hope that it will be useful,\r\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\r\n * Lesser General Public License for more details.\r\n * \r\n * You should have received a copy of the GNU Lesser General Public\r\n * License along with this library; if not, write to the Free Software\r\n * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA\r\n * \r\n * \r\n * \r\n * This program is free software; you can redistribute it and/or modify it under the terms of the \r\n * GNU General Public License as published by the Free Software Foundation; \r\n * either version 2 of the License.\r\n * \r\n * This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; \r\n * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. \r\n * See the GNU General Public License for more details.\r\n * You should have received a copy of the GNU General Public License along with this program; \r\n * if not, write to the Free Software Foundation, Inc., \r\n *  59 Temple Place, Suite 330, Boston, MA 02111-1307 USA\r\n */\r\npackage org.pdfsam.console.business.parser;\r\n\r\nimport jcmdline.CmdLineHandler;\r\nimport org.apache.commons.lang.time.DurationFormatUtils;\r\nimport org.apache.commons.lang.time.StopWatch;\r\nimport org.apache.log4j.Logger;\r\nimport org.pdfsam.console.business.dto.commands.AbstractParsedCommand;\r\nimport org.pdfsam.console.business.dto.commands.ConcatParsedCommand;\r\nimport org.pdfsam.console.business.dto.commands.DecryptParsedCommand;\r\nimport org.pdfsam.console.business.dto.commands.DocumentInfoParsedCommand;\r\nimport org.pdfsam.console.business.dto.commands.EncryptParsedCommand;\r\nimport org.pdfsam.console.business.dto.commands.MixParsedCommand;\r\nimport org.pdfsam.console.business.dto.commands.PageLabelsParsedCommand;\r\nimport org.pdfsam.console.business.dto.commands.RotateParsedCommand;\r\nimport org.pdfsam.console.business.dto.commands.SetViewerParsedCommand;\r\nimport org.pdfsam.console.business.dto.commands.SlideShowParsedCommand;\r\nimport org.pdfsam.console.business.dto.commands.SplitParsedCommand;\r\nimport org.pdfsam.console.business.dto.commands.UnpackParsedCommand;\r\nimport org.pdfsam.console.business.parser.handlers.ConcatCmdHandler;\r\nimport org.pdfsam.console.business.parser.handlers.DecryptCmdHandler;\r\nimport org.pdfsam.console.business.parser.handlers.DefaultCmdHandler;\r\nimport org.pdfsam.console.business.parser.handlers.DocumentInfoCmdHandler;\r\nimport org.pdfsam.console.business.parser.handlers.EncryptCmdHandler;\r\nimport org.pdfsam.console.business.parser.handlers.MixCmdHandler;\r\nimport org.pdfsam.console.business.parser.handlers.PageLabelsCmdHandler;\r\nimport org.pdfsam.console.business.parser.handlers.RotateCmdHandler;\r\nimport org.pdfsam.console.business.parser.handlers.SetViewerCmdHandler;\r\nimport org.pdfsam.console.business.parser.handlers.SlideShowCmdHandler;\r\nimport org.pdfsam.console.business.parser.handlers.SplitCmdHandler;\r\nimport org.pdfsam.console.business.parser.handlers.UnpackCmdHandler;\r\nimport org.pdfsam.console.business.parser.handlers.interfaces.CmdHandler;\r\nimport org.pdfsam.console.business.parser.validators.ConcatCmdValidator;\r\nimport org.pdfsam.console.business.parser.validators.DecryptCmdValidator;\r\nimport org.pdfsam.console.business.parser.validators.DocumentInfoCmdValidator;\r\nimport org.pdfsam.console.business.parser.validators.EncryptCmdValidator;\r\nimport org.pdfsam.console.business.parser.validators.MixCmdValidator;\r\nimport org.pdfsam.console.business.parser.validators.PageLabelsCmdValidator;\r\nimport org.pdfsam.console.business.parser.validators.RotateCmdValidator;\r\nimport org.pdfsam.console.business.parser.validators.SetViewerCmdValidator;\r\nimport org.pdfsam.console.business.parser.validators.SlideShowCmdValidator;\r\nimport org.pdfsam.console.business.parser.validators.SplitCmdValidator;\r\nimport org.pdfsam.console.business.parser.validators.UnpackCmdValidator;\r\nimport org.pdfsam.console.business.parser.validators.interfaces.CmdValidator;\r\nimport org.pdfsam.console.exceptions.console.ConsoleException;\r\nimport org.pdfsam.console.exceptions.console.ParseException;\r\n\r\n/**\r\n * Main command parser\r\n * @author Andrea Vacondio\r\n */\r\npublic class CmdParseManager {\r\n\r\n    private final Logger log = Logger.getLogger(CmdParseManager.class.getPackage().getName());\r\n\r\n    private String[] inputArguments;\r\n\r\n    private CmdHandler cmdHandler;\r\n\r\n    private CmdValidator cmdValidator;\r\n\r\n    private final StopWatch stopWatch = new StopWatch();\r\n\r\n    public CmdParseManager() {\r\n        setInputArguments(null);\r\n    }\r\n\r\n    public CmdParseManager(String[] inputArguments) {\r\n        setInputArguments(inputArguments);\r\n    }\r\n\r\n    /**\r\n     * @return the input command\r\n     */\r\n    private String getInputCommand() {\r\n        String retVal;\r\n        retVal = (inputArguments != null && inputArguments.length > 0) ? inputArguments[inputArguments.length - 1] : \"\";\r\n        return retVal;\r\n    }\r\n\r\n    /**\r\n     * Sets the input arguments creating the properCmdHandler and CmdValidator\r\n     * @param inputArguments\r\n     */\r\n    public void setInputArguments(String[] inputArguments) {\r\n        this.inputArguments = inputArguments;\r\n        String inputCommand = getInputCommand();\r\n        if (MixParsedCommand.COMMAND_MIX.equals(inputCommand)) {\r\n            cmdHandler = new MixCmdHandler();\r\n            cmdValidator = new MixCmdValidator();\r\n        } else if (ConcatParsedCommand.COMMAND_CONCAT.equals(inputCommand)) {\r\n            cmdHandler = new ConcatCmdHandler();\r\n            cmdValidator = new ConcatCmdValidator();\r\n        } else if (SplitParsedCommand.COMMAND_SPLIT.equals(inputCommand)) {\r\n            cmdHandler = new SplitCmdHandler();\r\n            cmdValidator = new SplitCmdValidator();\r\n        } else if (EncryptParsedCommand.COMMAND_ENCRYPT.equals(inputCommand)) {\r\n            cmdHandler = new EncryptCmdHandler();\r\n            cmdValidator = new EncryptCmdValidator();\r\n        } else if (UnpackParsedCommand.COMMAND_UNPACK.equals(inputCommand)) {\r\n            cmdHandler = new UnpackCmdHandler();\r\n            cmdValidator = new UnpackCmdValidator();\r\n        } else if (SetViewerParsedCommand.COMMAND_SETVIEWER.equals(inputCommand)) {\r\n            cmdHandler = new SetViewerCmdHandler();\r\n            cmdValidator = new SetViewerCmdValidator();\r\n        } else if (SlideShowParsedCommand.COMMAND_SLIDESHOW.equals(inputCommand)) {\r\n            cmdHandler = new SlideShowCmdHandler();\r\n            cmdValidator = new SlideShowCmdValidator();\r\n        } else if (DecryptParsedCommand.COMMAND_DECRYPT.equals(inputCommand)) {\r\n            cmdHandler = new DecryptCmdHandler();\r\n            cmdValidator = new DecryptCmdValidator();\r\n        } else if (RotateParsedCommand.COMMAND_ROTATE.equals(inputCommand)) {\r\n            cmdHandler = new RotateCmdHandler();\r\n            cmdValidator = new RotateCmdValidator();\r\n        } else if (PageLabelsParsedCommand.COMMAND_PAGELABELS.equals(inputCommand)) {\r\n            cmdHandler = new PageLabelsCmdHandler();\r\n            cmdValidator = new PageLabelsCmdValidator();\r\n        } else if (DocumentInfoParsedCommand.COMMAND_SETDOCINFO.equals(inputCommand)) {\r\n            cmdHandler = new DocumentInfoCmdHandler();\r\n            cmdValidator = new DocumentInfoCmdValidator();\r\n        } else {\r\n            cmdHandler = new DefaultCmdHandler();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Perform command line parsing\r\n     * @return true if parsed correctly\r\n     * @throws ConsoleException\r\n     */\r\n    public boolean parse() throws ConsoleException {\r\n        stopWatch.reset();\r\n        stopWatch.start();\r\n        boolean retVal = false;\r\n        try {\r\n            if (cmdHandler != null) {\r\n                CmdLineHandler cmdLineHandler = cmdHandler.getCommandLineHandler();\r\n                log.debug(\"Starting arguments parsing.\");\r\n                if (cmdLineHandler != null) {\r\n                    retVal = cmdLineHandler.parse(inputArguments);\r\n                    if (!retVal) {\r\n                        throw new ParseException(ParseException.ERR_PARSE, new String[] { cmdLineHandler.getParseError() });\r\n                    }\r\n                } else {\r\n                    throw new ConsoleException(ConsoleException.CMD_LINE_HANDLER_NULL);\r\n                }\r\n            } else {\r\n                throw new ConsoleException(ConsoleException.CMD_LINE_HANDLER_NULL);\r\n            }\r\n        } finally {\r\n            stopWatch.stop();\r\n            log.debug(\"Command '\" + getInputCommand() + \"' parsed in \" + DurationFormatUtils.formatDurationWords(stopWatch.getTime(), true, true));\r\n        }\r\n        return retVal;\r\n    }\r\n\r\n    /**\r\n     * Perform command line parsing for the input arguments\r\n     * @return true if parsed correctly\r\n     * @throws ConsoleException\r\n     */\r\n    public boolean parse(String[] inputArguments) throws ConsoleException {\r\n        setInputArguments(inputArguments);\r\n        return parse();\r\n    }\r\n\r\n    /**\r\n     * Perform command validation\r\n     * @return parsed command\r\n     * @throws ConsoleException\r\n     */\r\n    public AbstractParsedCommand validate() throws ConsoleException {\r\n        stopWatch.reset();\r\n        stopWatch.start();\r\n        AbstractParsedCommand retVal = null;\r\n        try {\r\n            if (cmdHandler != null) {\r\n                CmdLineHandler cmdLineHandler = cmdHandler.getCommandLineHandler();\r\n                log.debug(\"Starting arguments validation.\");\r\n                if (cmdLineHandler != null) {\r\n                    if (cmdValidator != null) {\r\n                        retVal = cmdValidator.validate(cmdLineHandler);\r\n                    } else {\r\n                        throw new ConsoleException(ConsoleException.CMD_LINE_VALIDATOR_NULL);\r\n                    }\r\n                } else {\r\n                    throw new ConsoleException(ConsoleException.CMD_LINE_HANDLER_NULL);\r\n                }\r\n            } else {\r\n                throw new ConsoleException(ConsoleException.CMD_LINE_HANDLER_NULL);\r\n            }\r\n        } finally {\r\n            stopWatch.stop();\r\n            log.debug(\"Command '\" + getInputCommand() + \"' validated in \" + DurationFormatUtils.formatDurationWords(stopWatch.getTime(), true, true));\r\n        }\r\n        return retVal;\r\n    }\r\n}\r\n",
		"id": "EvoSuiteBenchmark/109_pdfsam/src/main/java/org/pdfsam/console/business/parser/CmdParseManagerTest2.java",
		"test_prompt": "// CmdParseManagerTest2.java\npackage org.pdfsam.console.business.parser;\n\nimport jcmdline.CmdLineHandler;\nimport org.apache.commons.lang.time.DurationFormatUtils;\nimport org.apache.commons.lang.time.StopWatch;\nimport org.apache.log4j.Logger;\nimport org.pdfsam.console.business.dto.commands.AbstractParsedCommand;\nimport org.pdfsam.console.business.dto.commands.ConcatParsedCommand;\nimport org.pdfsam.console.business.dto.commands.DecryptParsedCommand;\nimport org.pdfsam.console.business.dto.commands.DocumentInfoParsedCommand;\nimport org.pdfsam.console.business.dto.commands.EncryptParsedCommand;\nimport org.pdfsam.console.business.dto.commands.MixParsedCommand;\nimport org.pdfsam.console.business.dto.commands.PageLabelsParsedCommand;\nimport org.pdfsam.console.business.dto.commands.RotateParsedCommand;\nimport org.pdfsam.console.business.dto.commands.SetViewerParsedCommand;\nimport org.pdfsam.console.business.dto.commands.SlideShowParsedCommand;\nimport org.pdfsam.console.business.dto.commands.SplitParsedCommand;\nimport org.pdfsam.console.business.dto.commands.UnpackParsedCommand;\nimport org.pdfsam.console.business.parser.handlers.ConcatCmdHandler;\nimport org.pdfsam.console.business.parser.handlers.DecryptCmdHandler;\nimport org.pdfsam.console.business.parser.handlers.DefaultCmdHandler;\nimport org.pdfsam.console.business.parser.handlers.DocumentInfoCmdHandler;\nimport org.pdfsam.console.business.parser.handlers.EncryptCmdHandler;\nimport org.pdfsam.console.business.parser.handlers.MixCmdHandler;\nimport org.pdfsam.console.business.parser.handlers.PageLabelsCmdHandler;\nimport org.pdfsam.console.business.parser.handlers.RotateCmdHandler;\nimport org.pdfsam.console.business.parser.handlers.SetViewerCmdHandler;\nimport org.pdfsam.console.business.parser.handlers.SlideShowCmdHandler;\nimport org.pdfsam.console.business.parser.handlers.SplitCmdHandler;\nimport org.pdfsam.console.business.parser.handlers.UnpackCmdHandler;\nimport org.pdfsam.console.business.parser.handlers.interfaces.CmdHandler;\nimport org.pdfsam.console.business.parser.validators.ConcatCmdValidator;\nimport org.pdfsam.console.business.parser.validators.DecryptCmdValidator;\nimport org.pdfsam.console.business.parser.validators.DocumentInfoCmdValidator;\nimport org.pdfsam.console.business.parser.validators.EncryptCmdValidator;\nimport org.pdfsam.console.business.parser.validators.MixCmdValidator;\nimport org.pdfsam.console.business.parser.validators.PageLabelsCmdValidator;\nimport org.pdfsam.console.business.parser.validators.RotateCmdValidator;\nimport org.pdfsam.console.business.parser.validators.SetViewerCmdValidator;\nimport org.pdfsam.console.business.parser.validators.SlideShowCmdValidator;\nimport org.pdfsam.console.business.parser.validators.SplitCmdValidator;\nimport org.pdfsam.console.business.parser.validators.UnpackCmdValidator;\nimport org.pdfsam.console.business.parser.validators.interfaces.CmdValidator;\nimport org.pdfsam.console.exceptions.console.ConsoleException;\nimport org.pdfsam.console.exceptions.console.ParseException;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link CmdParseManager}.\n* It contains ten unit test cases for the {@link CmdParseManager#validate()} method.\n*/\nclass CmdParseManagerTest2 {"
	},
	{
		"original_code": "// MixCmdValidator.java\n/*\r\n * Created on 21-Sep-2007\r\n * Copyright (C) 2007 by Andrea Vacondio.\r\n *\r\n *\r\n * This library is provided under dual licenses.\r\n * You may choose the terms of the Lesser General Public License version 2.1 or the General Public License version 2\r\n * License at your discretion.\r\n * \r\n * \r\n * This library is free software; you can redistribute it and/or\r\n * modify it under the terms of the GNU Lesser General Public\r\n * License as published by the Free Software Foundation;\r\n * version 2.1 of the License.\r\n * \r\n * This library is distributed in the hope that it will be useful,\r\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\r\n * Lesser General Public License for more details.\r\n * \r\n * You should have received a copy of the GNU Lesser General Public\r\n * License along with this library; if not, write to the Free Software\r\n * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA\r\n * \r\n * \r\n * \r\n * This program is free software; you can redistribute it and/or modify it under the terms of the \r\n * GNU General Public License as published by the Free Software Foundation; \r\n * either version 2 of the License.\r\n * \r\n * This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; \r\n * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. \r\n * See the GNU General Public License for more details.\r\n * You should have received a copy of the GNU General Public License along with this program; \r\n * if not, write to the Free Software Foundation, Inc., \r\n *  59 Temple Place, Suite 330, Boston, MA 02111-1307 USA\r\n */\r\npackage org.pdfsam.console.business.parser.validators;\r\n\r\nimport java.io.File;\r\nimport jcmdline.BooleanParam;\r\nimport jcmdline.CmdLineHandler;\r\nimport jcmdline.FileParam;\r\nimport jcmdline.IntParam;\r\nimport jcmdline.PdfFileParam;\r\nimport jcmdline.dto.PdfFile;\r\nimport org.pdfsam.console.business.dto.commands.AbstractParsedCommand;\r\nimport org.pdfsam.console.business.dto.commands.MixParsedCommand;\r\nimport org.pdfsam.console.business.parser.validators.interfaces.AbstractCmdValidator;\r\nimport org.pdfsam.console.exceptions.console.ConsoleException;\r\nimport org.pdfsam.console.exceptions.console.ParseException;\r\nimport org.pdfsam.console.utils.FileUtility;\r\nimport org.pdfsam.console.utils.ValidationUtility;\r\n\r\n/**\r\n * CmdValidator for the mix command\r\n * @author Andrea Vacondio\r\n */\r\npublic class MixCmdValidator extends AbstractCmdValidator {\r\n\r\n    public AbstractParsedCommand validateArguments(CmdLineHandler cmdLineHandler) throws ConsoleException {\r\n        MixParsedCommand parsedCommandDTO = new MixParsedCommand();\r\n        if (cmdLineHandler != null) {\r\n            //-o\r\n            FileParam oOption = (FileParam) cmdLineHandler.getOption(MixParsedCommand.O_ARG);\r\n            if ((oOption.isSet())) {\r\n                File outFile = oOption.getFile();\r\n                //checking extension\r\n                ValidationUtility.assertValidPdfExtension(outFile.getName());\r\n                parsedCommandDTO.setOutputFile(outFile);\r\n            } else {\r\n                throw new ParseException(ParseException.ERR_NO_O);\r\n            }\r\n            //-f1\r\n            PdfFileParam f1Option = (PdfFileParam) cmdLineHandler.getOption(MixParsedCommand.F1_ARG);\r\n            if (f1Option.isSet()) {\r\n                PdfFile firstFile = f1Option.getPdfFile();\r\n                //checking extension\r\n                ValidationUtility.assertValidPdfExtension(firstFile.getFile().getName());\r\n                parsedCommandDTO.setFirstInputFile(FileUtility.getPdfFile(firstFile));\r\n            } else {\r\n                throw new ParseException(ParseException.ERR_NO_F1);\r\n            }\r\n            //-f2\r\n            PdfFileParam f2Option = (PdfFileParam) cmdLineHandler.getOption(MixParsedCommand.F2_ARG);\r\n            if (f2Option.isSet()) {\r\n                PdfFile secondFile = f2Option.getPdfFile();\r\n                //checking extension\r\n                ValidationUtility.assertValidPdfExtension(secondFile.getFile().getName());\r\n                parsedCommandDTO.setSecondInputFile(FileUtility.getPdfFile(secondFile));\r\n            } else {\r\n                throw new ParseException(ParseException.ERR_NO_F2);\r\n            }\r\n            //-step\r\n            IntParam stepOption = (IntParam) cmdLineHandler.getOption(MixParsedCommand.STEP_ARG);\r\n            if (stepOption.isSet()) {\r\n                int step = stepOption.intValue();\r\n                if (step > 0) {\r\n                    parsedCommandDTO.setStep(stepOption.intValue());\r\n                } else {\r\n                    throw new ParseException(ParseException.ERR_STEP_ZERO_OR_NEGATIVE);\r\n                }\r\n            } else {\r\n                parsedCommandDTO.setStep(MixParsedCommand.DEFAULT_STEP);\r\n            }\r\n            //-secondstep\r\n            IntParam secondStepOption = (IntParam) cmdLineHandler.getOption(MixParsedCommand.SECOND_STEP_ARG);\r\n            if (secondStepOption.isSet()) {\r\n                int step = secondStepOption.intValue();\r\n                if (step > 0) {\r\n                    parsedCommandDTO.setSecondStep(secondStepOption.intValue());\r\n                } else {\r\n                    throw new ParseException(ParseException.ERR_STEP_ZERO_OR_NEGATIVE);\r\n                }\r\n            } else {\r\n                parsedCommandDTO.setSecondStep(parsedCommandDTO.getStep());\r\n            }\r\n            //-reversefirst\r\n            parsedCommandDTO.setReverseFirst(((BooleanParam) cmdLineHandler.getOption(MixParsedCommand.REVERSE_FIRST_ARG)).isTrue());\r\n            //-reversesecond\r\n            parsedCommandDTO.setReverseSecond(((BooleanParam) cmdLineHandler.getOption(MixParsedCommand.REVERSE_SECOND_ARG)).isTrue());\r\n        } else {\r\n            throw new ConsoleException(ConsoleException.CMD_LINE_HANDLER_NULL);\r\n        }\r\n        return parsedCommandDTO;\r\n    }\r\n}\r\n",
		"id": "EvoSuiteBenchmark/109_pdfsam/src/main/java/org/pdfsam/console/business/parser/validators/MixCmdValidatorTest.java",
		"test_prompt": "// MixCmdValidatorTest.java\npackage org.pdfsam.console.business.parser.validators;\n\nimport java.io.File;\nimport jcmdline.BooleanParam;\nimport jcmdline.CmdLineHandler;\nimport jcmdline.FileParam;\nimport jcmdline.IntParam;\nimport jcmdline.PdfFileParam;\nimport jcmdline.dto.PdfFile;\nimport org.pdfsam.console.business.dto.commands.AbstractParsedCommand;\nimport org.pdfsam.console.business.dto.commands.MixParsedCommand;\nimport org.pdfsam.console.business.parser.validators.interfaces.AbstractCmdValidator;\nimport org.pdfsam.console.exceptions.console.ConsoleException;\nimport org.pdfsam.console.exceptions.console.ParseException;\nimport org.pdfsam.console.utils.FileUtility;\nimport org.pdfsam.console.utils.ValidationUtility;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link MixCmdValidator}.\n* It contains ten unit test cases for the {@link MixCmdValidator#validateArguments(CmdLineHandler)} method.\n*/\nclass MixCmdValidatorTest {"
	},
	{
		"original_code": "// SplitCmdValidator.java\n/*\r\n * Created on 12-Oct-2007\r\n * Copyright (C) 2006 by Andrea Vacondio.\r\n *\r\n *\r\n * This library is provided under dual licenses.\r\n * You may choose the terms of the Lesser General Public License version 2.1 or the General Public License version 2\r\n * License at your discretion.\r\n * \r\n * \r\n * This library is free software; you can redistribute it and/or\r\n * modify it under the terms of the GNU Lesser General Public\r\n * License as published by the Free Software Foundation;\r\n * version 2.1 of the License.\r\n * \r\n * This library is distributed in the hope that it will be useful,\r\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\r\n * Lesser General Public License for more details.\r\n * \r\n * You should have received a copy of the GNU Lesser General Public\r\n * License along with this library; if not, write to the Free Software\r\n * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA\r\n * \r\n * \r\n * \r\n * This program is free software; you can redistribute it and/or modify it under the terms of the \r\n * GNU General Public License as published by the Free Software Foundation; \r\n * either version 2 of the License.\r\n * \r\n * This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; \r\n * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. \r\n * See the GNU General Public License for more details.\r\n * You should have received a copy of the GNU General Public License along with this program; \r\n * if not, write to the Free Software Foundation, Inc., \r\n *  59 Temple Place, Suite 330, Boston, MA 02111-1307 USA\r\n */\r\npackage org.pdfsam.console.business.parser.validators;\r\n\r\nimport java.io.File;\r\nimport java.util.ArrayList;\r\nimport java.util.regex.Pattern;\r\nimport jcmdline.CmdLineHandler;\r\nimport jcmdline.FileParam;\r\nimport jcmdline.IntParam;\r\nimport jcmdline.LongParam;\r\nimport jcmdline.PdfFileParam;\r\nimport jcmdline.StringParam;\r\nimport jcmdline.dto.PdfFile;\r\nimport org.pdfsam.console.business.dto.commands.AbstractParsedCommand;\r\nimport org.pdfsam.console.business.dto.commands.SplitParsedCommand;\r\nimport org.pdfsam.console.business.parser.validators.interfaces.AbstractCmdValidator;\r\nimport org.pdfsam.console.exceptions.console.ConsoleException;\r\nimport org.pdfsam.console.exceptions.console.ParseException;\r\nimport org.pdfsam.console.utils.FileUtility;\r\nimport org.pdfsam.console.utils.ValidationUtility;\r\n\r\n/**\r\n * CmdValidator for the split command\r\n *\r\n * @author Andrea Vacondio\r\n */\r\npublic class SplitCmdValidator extends AbstractCmdValidator {\r\n\r\n    public AbstractParsedCommand validateArguments(CmdLineHandler cmdLineHandler) throws ConsoleException {\r\n        SplitParsedCommand parsedCommandDTO = new SplitParsedCommand();\r\n        if (cmdLineHandler != null) {\r\n            // -o\r\n            FileParam oOption = (FileParam) cmdLineHandler.getOption(SplitParsedCommand.O_ARG);\r\n            if ((oOption.isSet())) {\r\n                File outFile = oOption.getFile();\r\n                ValidationUtility.assertValidDirectory(outFile);\r\n                parsedCommandDTO.setOutputFile(outFile);\r\n            } else {\r\n                throw new ParseException(ParseException.ERR_NO_O);\r\n            }\r\n            // -p\r\n            StringParam pOption = (StringParam) cmdLineHandler.getOption(SplitParsedCommand.P_ARG);\r\n            if (pOption.isSet()) {\r\n                parsedCommandDTO.setOutputFilesPrefix(pOption.getValue());\r\n            }\r\n            // -f\r\n            PdfFileParam fOption = (PdfFileParam) cmdLineHandler.getOption(SplitParsedCommand.F_ARG);\r\n            if (fOption.isSet()) {\r\n                PdfFile inputFile = fOption.getPdfFile();\r\n                ValidationUtility.assertValidPdfExtension(inputFile.getFile().getName());\r\n                parsedCommandDTO.setInputFile(FileUtility.getPdfFile(inputFile));\r\n            } else {\r\n                throw new ParseException(ParseException.ERR_NO_F);\r\n            }\r\n            // -s\r\n            StringParam sOption = (StringParam) cmdLineHandler.getOption(SplitParsedCommand.S_ARG);\r\n            if (sOption.isSet()) {\r\n                parsedCommandDTO.setSplitType(sOption.getValue());\r\n            } else {\r\n                throw new ParseException(ParseException.ERR_NO_S);\r\n            }\r\n            // -b\r\n            LongParam bOption = (LongParam) cmdLineHandler.getOption(SplitParsedCommand.B_ARG);\r\n            if (SplitParsedCommand.S_SIZE.equals(parsedCommandDTO.getSplitType())) {\r\n                if (bOption.isSet()) {\r\n                    parsedCommandDTO.setSplitSize(new Long(bOption.longValue()));\r\n                } else {\r\n                    throw new ParseException(ParseException.ERR_NO_B);\r\n                }\r\n            } else {\r\n                if (bOption.isSet()) {\r\n                    throw new ParseException(ParseException.ERR_B_NOT_NEEDED);\r\n                }\r\n            }\r\n            // -bl\r\n            IntParam blOption = (IntParam) cmdLineHandler.getOption(SplitParsedCommand.BL_ARG);\r\n            StringParam bregexpOption = (StringParam) cmdLineHandler.getOption(SplitParsedCommand.BREGEXP_ARG);\r\n            if (SplitParsedCommand.S_BLEVEL.equals(parsedCommandDTO.getSplitType())) {\r\n                if (blOption.isSet()) {\r\n                    parsedCommandDTO.setBookmarksLevel(new Integer(blOption.intValue()));\r\n                } else {\r\n                    throw new ParseException(ParseException.ERR_NO_BL);\r\n                }\r\n                if (bregexpOption.isSet()) {\r\n                    parsedCommandDTO.setBookmarkRegexp(bregexpOption.getValue());\r\n                }\r\n            } else {\r\n                if (blOption.isSet()) {\r\n                    throw new ParseException(ParseException.ERR_BL_NOT_NEEDED);\r\n                }\r\n                if (bregexpOption.isSet()) {\r\n                    throw new ParseException(ParseException.ERR_BREGEXP_NOT_NEEDED);\r\n                }\r\n            }\r\n            // -n\r\n            StringParam nOption = (StringParam) cmdLineHandler.getOption(SplitParsedCommand.N_ARG);\r\n            if (SplitParsedCommand.S_NSPLIT.equals(parsedCommandDTO.getSplitType()) || SplitParsedCommand.S_SPLIT.equals(parsedCommandDTO.getSplitType())) {\r\n                if (nOption.isSet()) {\r\n                    String nValue = nOption.getValue().trim().replaceAll(\",\", \"-\").replaceAll(\" \", \"-\");\r\n                    if (SplitParsedCommand.S_NSPLIT.equals(parsedCommandDTO.getSplitType())) {\r\n                        Pattern p = Pattern.compile(\"([0-9]+)*\");\r\n                        if (!(p.matcher(nValue).matches())) {\r\n                            throw new ParseException(ParseException.ERR_N_NOT_NUM);\r\n                        }\r\n                    }\r\n                    if (SplitParsedCommand.S_SPLIT.equals(parsedCommandDTO.getSplitType())) {\r\n                        Pattern p = Pattern.compile(\"([0-9]+)([-][0-9]+)*\");\r\n                        if (!(p.matcher(nValue).matches())) {\r\n                            throw new ParseException(ParseException.ERR_N_NOT_NUM_OR_SEQ);\r\n                        }\r\n                    }\r\n                    parsedCommandDTO.setSplitPageNumbers(getSplitPageNumbers(nValue));\r\n                } else {\r\n                    throw new ParseException(ParseException.ERR_NO_N);\r\n                }\r\n            } else {\r\n                if (nOption.isSet()) {\r\n                    throw new ParseException(ParseException.ERR_N_NOT_NEEDED);\r\n                }\r\n            }\r\n        } else {\r\n            throw new ConsoleException(ConsoleException.CMD_LINE_HANDLER_NULL);\r\n        }\r\n        return parsedCommandDTO;\r\n    }\r\n\r\n    /**\r\n     * Converts a string like num-num-num... in an Integer array\r\n     *\r\n     * @param nValue\r\n     * @return integer array\r\n     * @throws ParseException\r\n     */\r\n    private Integer[] getSplitPageNumbers(String nValue) throws ParseException {\r\n        ArrayList retVal = new ArrayList();\r\n        try {\r\n            String[] limits = nValue.split(\"-\");\r\n            for (int i = 0; i < limits.length; i++) {\r\n                retVal.add(new Integer(limits[i]));\r\n            }\r\n        } catch (NumberFormatException nfe) {\r\n            throw new ParseException(ParseException.ERR_N_NOT_NUM_OR_SEQ, nfe);\r\n        }\r\n        return (Integer[]) retVal.toArray(new Integer[0]);\r\n    }\r\n}\r\n",
		"id": "EvoSuiteBenchmark/109_pdfsam/src/main/java/org/pdfsam/console/business/parser/validators/SplitCmdValidatorTest.java",
		"test_prompt": "// SplitCmdValidatorTest.java\npackage org.pdfsam.console.business.parser.validators;\n\nimport java.io.File;\nimport java.util.ArrayList;\nimport java.util.regex.Pattern;\nimport jcmdline.CmdLineHandler;\nimport jcmdline.FileParam;\nimport jcmdline.IntParam;\nimport jcmdline.LongParam;\nimport jcmdline.PdfFileParam;\nimport jcmdline.StringParam;\nimport jcmdline.dto.PdfFile;\nimport org.pdfsam.console.business.dto.commands.AbstractParsedCommand;\nimport org.pdfsam.console.business.dto.commands.SplitParsedCommand;\nimport org.pdfsam.console.business.parser.validators.interfaces.AbstractCmdValidator;\nimport org.pdfsam.console.exceptions.console.ConsoleException;\nimport org.pdfsam.console.exceptions.console.ParseException;\nimport org.pdfsam.console.utils.FileUtility;\nimport org.pdfsam.console.utils.ValidationUtility;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link SplitCmdValidator}.\n* It contains ten unit test cases for the {@link SplitCmdValidator#validateArguments(CmdLineHandler)} method.\n*/\nclass SplitCmdValidatorTest {"
	},
	{
		"original_code": "// ConcatCmdValidator.java\n/*\r\n * Created on 01-Oct-2007\r\n * Copyright (C) 2006 by Andrea Vacondio.\r\n *\r\n *\r\n * This library is provided under dual licenses.\r\n * You may choose the terms of the Lesser General Public License version 2.1 or the General Public License version 2\r\n * License at your discretion.\r\n * \r\n * \r\n * This library is free software; you can redistribute it and/or\r\n * modify it under the terms of the GNU Lesser General Public\r\n * License as published by the Free Software Foundation;\r\n * version 2.1 of the License.\r\n * \r\n * This library is distributed in the hope that it will be useful,\r\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\r\n * Lesser General Public License for more details.\r\n * \r\n * You should have received a copy of the GNU Lesser General Public\r\n * License along with this library; if not, write to the Free Software\r\n * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA\r\n * \r\n * \r\n * \r\n * This program is free software; you can redistribute it and/or modify it under the terms of the \r\n * GNU General Public License as published by the Free Software Foundation; \r\n * either version 2 of the License.\r\n * \r\n * This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; \r\n * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. \r\n * See the GNU General Public License for more details.\r\n * You should have received a copy of the GNU General Public License along with this program; \r\n * if not, write to the Free Software Foundation, Inc., \r\n *  59 Temple Place, Suite 330, Boston, MA 02111-1307 USA\r\n */\r\npackage org.pdfsam.console.business.parser.validators;\r\n\r\nimport java.io.File;\r\nimport java.util.Iterator;\r\nimport jcmdline.BooleanParam;\r\nimport jcmdline.CmdLineHandler;\r\nimport jcmdline.FileParam;\r\nimport jcmdline.PdfFileParam;\r\nimport jcmdline.StringParam;\r\nimport jcmdline.dto.PdfFile;\r\nimport org.apache.commons.lang.StringUtils;\r\nimport org.pdfsam.console.business.dto.PageRotation;\r\nimport org.pdfsam.console.business.dto.commands.AbstractParsedCommand;\r\nimport org.pdfsam.console.business.dto.commands.ConcatParsedCommand;\r\nimport org.pdfsam.console.business.parser.validators.interfaces.AbstractCmdValidator;\r\nimport org.pdfsam.console.exceptions.console.ConsoleException;\r\nimport org.pdfsam.console.exceptions.console.ParseException;\r\nimport org.pdfsam.console.utils.FileUtility;\r\nimport org.pdfsam.console.utils.ValidationUtility;\r\n\r\n/**\r\n * CmdValidator for the concat command\r\n * @author Andrea Vacondio\r\n */\r\npublic class ConcatCmdValidator extends AbstractCmdValidator {\r\n\r\n    public AbstractParsedCommand validateArguments(CmdLineHandler cmdLineHandler) throws ConsoleException {\r\n        ConcatParsedCommand parsedCommandDTO = new ConcatParsedCommand();\r\n        if (cmdLineHandler != null) {\r\n            //-o\r\n            FileParam oOption = (FileParam) cmdLineHandler.getOption(ConcatParsedCommand.O_ARG);\r\n            if ((oOption.isSet())) {\r\n                File outFile = oOption.getFile();\r\n                //checking extension\r\n                ValidationUtility.assertValidPdfExtension(outFile.getName());\r\n                parsedCommandDTO.setOutputFile(outFile);\r\n            } else {\r\n                throw new ParseException(ParseException.ERR_NO_O);\r\n            }\r\n            //-f -l -d\r\n            FileParam lOption = (FileParam) cmdLineHandler.getOption(ConcatParsedCommand.L_ARG);\r\n            PdfFileParam fOption = (PdfFileParam) cmdLineHandler.getOption(ConcatParsedCommand.F_ARG);\r\n            FileParam dOption = (FileParam) cmdLineHandler.getOption(ConcatParsedCommand.D_ARG);\r\n            if (lOption.isSet() || fOption.isSet() || dOption.isSet()) {\r\n                if (lOption.isSet() ^ fOption.isSet() ^ dOption.isSet()) {\r\n                    if (fOption.isSet()) {\r\n                        //validate file extensions\r\n                        for (Iterator fIterator = fOption.getPdfFiles().iterator(); fIterator.hasNext(); ) {\r\n                            PdfFile currentFile = (PdfFile) fIterator.next();\r\n                            if (!((currentFile.getFile().getName().toLowerCase().endsWith(PDF_EXTENSION)) && (currentFile.getFile().getName().length() > PDF_EXTENSION.length()))) {\r\n                                throw new ParseException(ParseException.ERR_IN_NOT_PDF, new String[] { currentFile.getFile().getPath() });\r\n                            }\r\n                        }\r\n                        parsedCommandDTO.setInputFileList(FileUtility.getPdfFiles(fOption.getPdfFiles()));\r\n                    } else if (lOption.isSet()) {\r\n                        if (lOption.getFile().getPath().toLowerCase().endsWith(CSV_EXTENSION) || lOption.getFile().getPath().toLowerCase().endsWith(XML_EXTENSION)) {\r\n                            parsedCommandDTO.setInputCvsOrXmlFile(lOption.getFile());\r\n                        } else {\r\n                            throw new ParseException(ParseException.ERR_NOT_CSV_OR_XML);\r\n                        }\r\n                    } else {\r\n                        if ((dOption.isSet())) {\r\n                            File inputDir = dOption.getFile();\r\n                            ValidationUtility.assertValidDirectory(inputDir);\r\n                            parsedCommandDTO.setInputDirectory(inputDir);\r\n                        }\r\n                    }\r\n                } else {\r\n                    throw new ParseException(ParseException.ERR_BOTH_F_OR_L_OR_D);\r\n                }\r\n            } else {\r\n                throw new ParseException(ParseException.ERR_NO_F_OR_L_OR_D);\r\n            }\r\n            //-u\r\n            StringParam uOption = (StringParam) cmdLineHandler.getOption(ConcatParsedCommand.U_ARG);\r\n            //if it's set we proceed with validation\r\n            if (uOption.isSet()) {\r\n                String[] selections = StringUtils.split(uOption.getValue(), \":\");\r\n                String[] trimmedSelection = new String[selections.length];\r\n                for (int i = 0; i < selections.length; i++) {\r\n                    trimmedSelection[i] = selections[i].trim();\r\n                }\r\n                ValidationUtility.assertValidPageSelectionsArray(trimmedSelection);\r\n                parsedCommandDTO.setPageSelections(trimmedSelection);\r\n            }\r\n            //-copyfields\r\n            parsedCommandDTO.setCopyFields(((BooleanParam) cmdLineHandler.getOption(ConcatParsedCommand.COPYFIELDS_ARG)).isTrue());\r\n            //-r\r\n            StringParam rOption = (StringParam) cmdLineHandler.getOption(ConcatParsedCommand.R_ARG);\r\n            if (rOption.isSet()) {\r\n                PageRotation[] rotations = ValidationUtility.getPagesRotation(rOption.getValue());\r\n                parsedCommandDTO.setRotations(rotations);\r\n            }\r\n        } else {\r\n            throw new ConsoleException(ConsoleException.CMD_LINE_HANDLER_NULL);\r\n        }\r\n        return parsedCommandDTO;\r\n    }\r\n}\r\n",
		"id": "EvoSuiteBenchmark/109_pdfsam/src/main/java/org/pdfsam/console/business/parser/validators/ConcatCmdValidatorTest.java",
		"test_prompt": "// ConcatCmdValidatorTest.java\npackage org.pdfsam.console.business.parser.validators;\n\nimport java.io.File;\nimport java.util.Iterator;\nimport jcmdline.BooleanParam;\nimport jcmdline.CmdLineHandler;\nimport jcmdline.FileParam;\nimport jcmdline.PdfFileParam;\nimport jcmdline.StringParam;\nimport jcmdline.dto.PdfFile;\nimport org.apache.commons.lang.StringUtils;\nimport org.pdfsam.console.business.dto.PageRotation;\nimport org.pdfsam.console.business.dto.commands.AbstractParsedCommand;\nimport org.pdfsam.console.business.dto.commands.ConcatParsedCommand;\nimport org.pdfsam.console.business.parser.validators.interfaces.AbstractCmdValidator;\nimport org.pdfsam.console.exceptions.console.ConsoleException;\nimport org.pdfsam.console.exceptions.console.ParseException;\nimport org.pdfsam.console.utils.FileUtility;\nimport org.pdfsam.console.utils.ValidationUtility;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link ConcatCmdValidator}.\n* It contains ten unit test cases for the {@link ConcatCmdValidator#validateArguments(CmdLineHandler)} method.\n*/\nclass ConcatCmdValidatorTest {"
	},
	{
		"original_code": "// EncryptCmdValidator.java\n/*\r\n * Created on 17-Oct-2007\r\n * Copyright (C) 2007 by Andrea Vacondio.\r\n *\r\n *\r\n * This library is provided under dual licenses.\r\n * You may choose the terms of the Lesser General Public License version 2.1 or the General Public License version 2\r\n * License at your discretion.\r\n * \r\n * \r\n * This library is free software; you can redistribute it and/or\r\n * modify it under the terms of the GNU Lesser General Public\r\n * License as published by the Free Software Foundation;\r\n * version 2.1 of the License.\r\n * \r\n * This library is distributed in the hope that it will be useful,\r\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\r\n * Lesser General Public License for more details.\r\n * \r\n * You should have received a copy of the GNU Lesser General Public\r\n * License along with this library; if not, write to the Free Software\r\n * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA\r\n * \r\n * \r\n * \r\n * This program is free software; you can redistribute it and/or modify it under the terms of the \r\n * GNU General Public License as published by the Free Software Foundation; \r\n * either version 2 of the License.\r\n * \r\n * This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; \r\n * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. \r\n * See the GNU General Public License for more details.\r\n * You should have received a copy of the GNU General Public License along with this program; \r\n * if not, write to the Free Software Foundation, Inc., \r\n *  59 Temple Place, Suite 330, Boston, MA 02111-1307 USA\r\n */\r\npackage org.pdfsam.console.business.parser.validators;\r\n\r\nimport java.io.File;\r\nimport java.util.Hashtable;\r\nimport java.util.Iterator;\r\nimport jcmdline.CmdLineHandler;\r\nimport jcmdline.FileParam;\r\nimport jcmdline.PdfFileParam;\r\nimport jcmdline.StringParam;\r\nimport jcmdline.dto.PdfFile;\r\nimport org.pdfsam.console.business.dto.commands.AbstractParsedCommand;\r\nimport org.pdfsam.console.business.dto.commands.EncryptParsedCommand;\r\nimport org.pdfsam.console.business.parser.validators.interfaces.AbstractCmdValidator;\r\nimport org.pdfsam.console.exceptions.console.ConsoleException;\r\nimport org.pdfsam.console.exceptions.console.ParseException;\r\nimport org.pdfsam.console.utils.FileUtility;\r\nimport org.pdfsam.console.utils.ValidationUtility;\r\nimport com.lowagie.text.pdf.PdfWriter;\r\n\r\n/**\r\n * CmdValidator for the encrypt command\r\n * @author Andrea Vacondio\r\n */\r\npublic class EncryptCmdValidator extends AbstractCmdValidator {\r\n\r\n    public AbstractParsedCommand validateArguments(CmdLineHandler cmdLineHandler) throws ConsoleException {\r\n        EncryptParsedCommand parsedCommandDTO = new EncryptParsedCommand();\r\n        if (cmdLineHandler != null) {\r\n            //-o\r\n            FileParam oOption = (FileParam) cmdLineHandler.getOption(EncryptParsedCommand.O_ARG);\r\n            if ((oOption.isSet())) {\r\n                File outFile = oOption.getFile();\r\n                ValidationUtility.assertValidDirectory(outFile);\r\n                parsedCommandDTO.setOutputFile(outFile);\r\n            } else {\r\n                throw new ParseException(ParseException.ERR_NO_O);\r\n            }\r\n            //-p\r\n            StringParam pOption = (StringParam) cmdLineHandler.getOption(EncryptParsedCommand.P_ARG);\r\n            if (pOption.isSet()) {\r\n                parsedCommandDTO.setOutputFilesPrefix(pOption.getValue());\r\n            }\r\n            //-apwd\r\n            StringParam apwdOption = (StringParam) cmdLineHandler.getOption(EncryptParsedCommand.APWD_ARG);\r\n            if (apwdOption.isSet()) {\r\n                parsedCommandDTO.setOwnerPwd(apwdOption.getValue());\r\n            }\r\n            //-upwd\r\n            StringParam upwdOption = (StringParam) cmdLineHandler.getOption(EncryptParsedCommand.UPWD_ARG);\r\n            if (upwdOption.isSet()) {\r\n                parsedCommandDTO.setUserPwd(upwdOption.getValue());\r\n            }\r\n            //-etype\r\n            StringParam etypeOption = (StringParam) cmdLineHandler.getOption(EncryptParsedCommand.ETYPE_ARG);\r\n            if (etypeOption.isSet()) {\r\n                parsedCommandDTO.setEncryptionType(etypeOption.getValue());\r\n            }\r\n            //-f - d\r\n            PdfFileParam fOption = (PdfFileParam) cmdLineHandler.getOption(EncryptParsedCommand.F_ARG);\r\n            FileParam dOption = (FileParam) cmdLineHandler.getOption(EncryptParsedCommand.D_ARG);\r\n            if (fOption.isSet() || dOption.isSet()) {\r\n                //-f\r\n                if (fOption.isSet()) {\r\n                    //validate file extensions\r\n                    for (Iterator fIterator = fOption.getPdfFiles().iterator(); fIterator.hasNext(); ) {\r\n                        PdfFile currentFile = (PdfFile) fIterator.next();\r\n                        ValidationUtility.assertValidPdfExtension(currentFile.getFile().getName());\r\n                    }\r\n                    parsedCommandDTO.setInputFileList(FileUtility.getPdfFiles(fOption.getPdfFiles()));\r\n                }\r\n                //-d\r\n                if ((dOption.isSet())) {\r\n                    File inputDir = dOption.getFile();\r\n                    ValidationUtility.assertValidDirectory(inputDir);\r\n                    parsedCommandDTO.setInputDirectory(inputDir);\r\n                }\r\n            } else {\r\n                throw new ParseException(ParseException.ERR_NO_F_OR_D);\r\n            }\r\n            //-allow\r\n            StringParam allowOption = (StringParam) cmdLineHandler.getOption(EncryptParsedCommand.ALLOW_ARG);\r\n            if (allowOption.isSet()) {\r\n                Hashtable permissionsMap = getPermissionsMap(parsedCommandDTO.getEncryptionType());\r\n                int permissions = 0;\r\n                if (!permissionsMap.isEmpty()) {\r\n                    for (Iterator permIterator = allowOption.getValues().iterator(); permIterator.hasNext(); ) {\r\n                        String currentPermission = (String) permIterator.next();\r\n                        Object value = permissionsMap.get(currentPermission);\r\n                        if (value != null) {\r\n                            permissions |= ((Integer) value).intValue();\r\n                        }\r\n                    }\r\n                }\r\n                permissionsMap = null;\r\n                parsedCommandDTO.setPermissions(permissions);\r\n            }\r\n        } else {\r\n            throw new ConsoleException(ConsoleException.CMD_LINE_HANDLER_NULL);\r\n        }\r\n        return parsedCommandDTO;\r\n    }\r\n\r\n    /**\r\n     * @param encryptionType encryption algorithm\r\n     * @return The permissions map based on the chosen encryption\r\n     */\r\n    private Hashtable getPermissionsMap(String encryptionType) {\r\n        Hashtable retMap = new Hashtable(12);\r\n        if (EncryptParsedCommand.E_RC4_40.equals(encryptionType)) {\r\n            retMap.put(EncryptParsedCommand.E_PRINT, new Integer(PdfWriter.ALLOW_PRINTING));\r\n            retMap.put(EncryptParsedCommand.E_MODIFY, new Integer(PdfWriter.ALLOW_MODIFY_CONTENTS));\r\n            retMap.put(EncryptParsedCommand.E_COPY, new Integer(PdfWriter.ALLOW_COPY));\r\n            retMap.put(EncryptParsedCommand.E_ANNOTATION, new Integer(PdfWriter.ALLOW_MODIFY_ANNOTATIONS));\r\n        } else {\r\n            retMap.put(EncryptParsedCommand.E_PRINT, new Integer(PdfWriter.ALLOW_PRINTING));\r\n            retMap.put(EncryptParsedCommand.E_MODIFY, new Integer(PdfWriter.ALLOW_MODIFY_CONTENTS));\r\n            retMap.put(EncryptParsedCommand.E_COPY, new Integer(PdfWriter.ALLOW_COPY));\r\n            retMap.put(EncryptParsedCommand.E_ANNOTATION, new Integer(PdfWriter.ALLOW_MODIFY_ANNOTATIONS));\r\n            retMap.put(EncryptParsedCommand.E_FILL, new Integer(PdfWriter.ALLOW_FILL_IN));\r\n            retMap.put(EncryptParsedCommand.E_SCREEN, new Integer(PdfWriter.ALLOW_SCREENREADERS));\r\n            retMap.put(EncryptParsedCommand.E_ASSEMBLY, new Integer(PdfWriter.ALLOW_ASSEMBLY));\r\n            retMap.put(EncryptParsedCommand.E_DPRINT, new Integer(PdfWriter.ALLOW_DEGRADED_PRINTING));\r\n        }\r\n        return retMap;\r\n    }\r\n}\r\n",
		"id": "EvoSuiteBenchmark/109_pdfsam/src/main/java/org/pdfsam/console/business/parser/validators/EncryptCmdValidatorTest.java",
		"test_prompt": "// EncryptCmdValidatorTest.java\npackage org.pdfsam.console.business.parser.validators;\n\nimport java.io.File;\nimport java.util.Hashtable;\nimport java.util.Iterator;\nimport jcmdline.CmdLineHandler;\nimport jcmdline.FileParam;\nimport jcmdline.PdfFileParam;\nimport jcmdline.StringParam;\nimport jcmdline.dto.PdfFile;\nimport org.pdfsam.console.business.dto.commands.AbstractParsedCommand;\nimport org.pdfsam.console.business.dto.commands.EncryptParsedCommand;\nimport org.pdfsam.console.business.parser.validators.interfaces.AbstractCmdValidator;\nimport org.pdfsam.console.exceptions.console.ConsoleException;\nimport org.pdfsam.console.exceptions.console.ParseException;\nimport org.pdfsam.console.utils.FileUtility;\nimport org.pdfsam.console.utils.ValidationUtility;\nimport com.lowagie.text.pdf.PdfWriter;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link EncryptCmdValidator}.\n* It contains ten unit test cases for the {@link EncryptCmdValidator#validateArguments(CmdLineHandler)} method.\n*/\nclass EncryptCmdValidatorTest {"
	},
	{
		"original_code": "// SetViewerCmdValidator.java\n/*\r\n * Created on 06-Mar-2008\r\n * Copyright (C) 2008 by Andrea Vacondio.\r\n *\r\n *\r\n * This library is provided under dual licenses.\r\n * You may choose the terms of the Lesser General Public License version 2.1 or the General Public License version 2\r\n * License at your discretion.\r\n * \r\n * \r\n * This library is free software; you can redistribute it and/or\r\n * modify it under the terms of the GNU Lesser General Public\r\n * License as published by the Free Software Foundation;\r\n * version 2.1 of the License.\r\n * \r\n * This library is distributed in the hope that it will be useful,\r\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\r\n * Lesser General Public License for more details.\r\n * \r\n * You should have received a copy of the GNU Lesser General Public\r\n * License along with this library; if not, write to the Free Software\r\n * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA\r\n * \r\n * \r\n * \r\n * This program is free software; you can redistribute it and/or modify it under the terms of the \r\n * GNU General Public License as published by the Free Software Foundation; \r\n * either version 2 of the License.\r\n * \r\n * This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; \r\n * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. \r\n * See the GNU General Public License for more details.\r\n * You should have received a copy of the GNU General Public License along with this program; \r\n * if not, write to the Free Software Foundation, Inc., \r\n *  59 Temple Place, Suite 330, Boston, MA 02111-1307 USA\r\n */\r\npackage org.pdfsam.console.business.parser.validators;\r\n\r\nimport java.io.File;\r\nimport java.util.Iterator;\r\nimport jcmdline.BooleanParam;\r\nimport jcmdline.CmdLineHandler;\r\nimport jcmdline.FileParam;\r\nimport jcmdline.PdfFileParam;\r\nimport jcmdline.StringParam;\r\nimport jcmdline.dto.PdfFile;\r\nimport org.pdfsam.console.business.dto.commands.AbstractParsedCommand;\r\nimport org.pdfsam.console.business.dto.commands.SetViewerParsedCommand;\r\nimport org.pdfsam.console.business.parser.validators.interfaces.AbstractCmdValidator;\r\nimport org.pdfsam.console.exceptions.console.ConsoleException;\r\nimport org.pdfsam.console.exceptions.console.ParseException;\r\nimport org.pdfsam.console.utils.FileUtility;\r\nimport org.pdfsam.console.utils.ValidationUtility;\r\nimport com.lowagie.text.pdf.PdfWriter;\r\n\r\n/**\r\n * CmdValidator for the setviewer command\r\n * @author Andrea Vacondio\r\n */\r\npublic class SetViewerCmdValidator extends AbstractCmdValidator {\r\n\r\n    public AbstractParsedCommand validateArguments(CmdLineHandler cmdLineHandler) throws ConsoleException {\r\n        SetViewerParsedCommand parsedCommandDTO = new SetViewerParsedCommand();\r\n        if (cmdLineHandler != null) {\r\n            //-o\r\n            FileParam oOption = (FileParam) cmdLineHandler.getOption(SetViewerParsedCommand.O_ARG);\r\n            if ((oOption.isSet())) {\r\n                File outFile = oOption.getFile();\r\n                ValidationUtility.assertValidDirectory(outFile);\r\n                parsedCommandDTO.setOutputFile(outFile);\r\n            } else {\r\n                throw new ParseException(ParseException.ERR_NO_O);\r\n            }\r\n            //-p\r\n            StringParam pOption = (StringParam) cmdLineHandler.getOption(SetViewerParsedCommand.P_ARG);\r\n            if (pOption.isSet()) {\r\n                parsedCommandDTO.setOutputFilesPrefix(pOption.getValue());\r\n            }\r\n            //-mode\r\n            StringParam mOption = (StringParam) cmdLineHandler.getOption(SetViewerParsedCommand.M_ARG);\r\n            if (mOption.isSet()) {\r\n                parsedCommandDTO.setMode(getMode(mOption.getValue()));\r\n            }\r\n            //-layout\r\n            StringParam lOption = (StringParam) cmdLineHandler.getOption(SetViewerParsedCommand.L_ARG);\r\n            if (lOption.isSet()) {\r\n                parsedCommandDTO.setLayout(getLayout(lOption.getValue()));\r\n            }\r\n            //-nfsmode\r\n            StringParam nfsmOption = (StringParam) cmdLineHandler.getOption(SetViewerParsedCommand.NFSM_ARG);\r\n            if (nfsmOption.isSet()) {\r\n                parsedCommandDTO.setNfsmode(getNFSMode(nfsmOption.getValue()));\r\n            }\r\n            //-direction\r\n            StringParam directionOption = (StringParam) cmdLineHandler.getOption(SetViewerParsedCommand.DIRECTION_ARG);\r\n            if (directionOption.isSet()) {\r\n                parsedCommandDTO.setDirection(getDirection(directionOption.getValue()));\r\n            }\r\n            //-f -d\r\n            PdfFileParam fOption = (PdfFileParam) cmdLineHandler.getOption(SetViewerParsedCommand.F_ARG);\r\n            FileParam dOption = (FileParam) cmdLineHandler.getOption(SetViewerParsedCommand.D_ARG);\r\n            if (fOption.isSet() || dOption.isSet()) {\r\n                //-f\r\n                if (fOption.isSet()) {\r\n                    //validate file extensions\r\n                    for (Iterator fIterator = fOption.getPdfFiles().iterator(); fIterator.hasNext(); ) {\r\n                        PdfFile currentFile = (PdfFile) fIterator.next();\r\n                        ValidationUtility.assertValidPdfExtension(currentFile.getFile().getName());\r\n                    }\r\n                    parsedCommandDTO.setInputFileList(FileUtility.getPdfFiles(fOption.getPdfFiles()));\r\n                }\r\n                //-d\r\n                if ((dOption.isSet())) {\r\n                    File inputDir = dOption.getFile();\r\n                    ValidationUtility.assertValidDirectory(inputDir);\r\n                    parsedCommandDTO.setInputDirectory(inputDir);\r\n                }\r\n            } else {\r\n                throw new ParseException(ParseException.ERR_NO_F_OR_D);\r\n            }\r\n            //-hidemenu\r\n            parsedCommandDTO.setHideMenu(((BooleanParam) cmdLineHandler.getOption(SetViewerParsedCommand.HIDEMENU_ARG)).isTrue());\r\n            //-hidetoolbar\r\n            parsedCommandDTO.setHideToolBar(((BooleanParam) cmdLineHandler.getOption(SetViewerParsedCommand.HIDETOOLBAR_ARG)).isTrue());\r\n            //-hide window ui\r\n            parsedCommandDTO.setHideWindowUI(((BooleanParam) cmdLineHandler.getOption(SetViewerParsedCommand.HIDEWINDOWUI_ARG)).isTrue());\r\n            //-fit window\r\n            parsedCommandDTO.setFitWindow(((BooleanParam) cmdLineHandler.getOption(SetViewerParsedCommand.FITWINDOW_ARG)).isTrue());\r\n            //-center window\r\n            parsedCommandDTO.setCenterWindow(((BooleanParam) cmdLineHandler.getOption(SetViewerParsedCommand.CENTERWINDOW_ARG)).isTrue());\r\n            //-display doc title\r\n            parsedCommandDTO.setDisplayDocTitle(((BooleanParam) cmdLineHandler.getOption(SetViewerParsedCommand.DOCTITLE_ARG)).isTrue());\r\n            //-noprintscaling\r\n            parsedCommandDTO.setNoPrintScaling(((BooleanParam) cmdLineHandler.getOption(SetViewerParsedCommand.NOPRINTSCALING_ARG)).isTrue());\r\n        } else {\r\n            throw new ConsoleException(ConsoleException.CMD_LINE_HANDLER_NULL);\r\n        }\r\n        return parsedCommandDTO;\r\n    }\r\n\r\n    /**\r\n     * @param direction\r\n     * @return The direction to iText\r\n     */\r\n    private int getDirection(String direction) {\r\n        int retVal = 0;\r\n        if (SetViewerParsedCommand.D_R2L.equals(direction)) {\r\n            retVal = PdfWriter.DirectionR2L;\r\n        } else if (SetViewerParsedCommand.D_L2R.equals(direction)) {\r\n            retVal = PdfWriter.DirectionL2R;\r\n        }\r\n        return retVal;\r\n    }\r\n\r\n    /**\r\n     * @param mode\r\n     * @return The mode to iText\r\n     */\r\n    private int getMode(String mode) {\r\n        int retVal = PdfWriter.PageModeUseNone;\r\n        if (SetViewerParsedCommand.M_ATTACHMENTS.equals(mode)) {\r\n            retVal = PdfWriter.PageModeUseAttachments;\r\n        } else if (SetViewerParsedCommand.M_FULLSCREEN.equals(mode)) {\r\n            retVal = PdfWriter.PageModeFullScreen;\r\n        } else if (SetViewerParsedCommand.M_OCONTENT.equals(mode)) {\r\n            retVal = PdfWriter.PageModeUseOC;\r\n        } else if (SetViewerParsedCommand.M_OUTLINES.equals(mode)) {\r\n            retVal = PdfWriter.PageModeUseOutlines;\r\n        } else if (SetViewerParsedCommand.M_THUMBS.equals(mode)) {\r\n            retVal = PdfWriter.PageModeUseThumbs;\r\n        }\r\n        return retVal;\r\n    }\r\n\r\n    /**\r\n     * @param nfsmode\r\n     * @return the non full screen mode to iText\r\n     */\r\n    private int getNFSMode(String nfsmode) {\r\n        int retVal = PdfWriter.NonFullScreenPageModeUseNone;\r\n        if (SetViewerParsedCommand.NFSM_OCONTENT.equals(nfsmode)) {\r\n            retVal = PdfWriter.NonFullScreenPageModeUseOC;\r\n        } else if (SetViewerParsedCommand.NFSM_OUTLINES.equals(nfsmode)) {\r\n            retVal = PdfWriter.NonFullScreenPageModeUseOutlines;\r\n        } else if (SetViewerParsedCommand.NFSM_THUMBS.equals(nfsmode)) {\r\n            retVal = PdfWriter.NonFullScreenPageModeUseThumbs;\r\n        }\r\n        return retVal;\r\n    }\r\n\r\n    /**\r\n     * @param layout\r\n     * @return the layout to iText\r\n     */\r\n    private int getLayout(String layout) {\r\n        int retVal = PdfWriter.PageLayoutOneColumn;\r\n        if (SetViewerParsedCommand.L_SINGLEPAGE.equals(layout)) {\r\n            retVal = PdfWriter.PageLayoutSinglePage;\r\n        } else if (SetViewerParsedCommand.L_TWOCOLUMNLEFT.equals(layout)) {\r\n            retVal = PdfWriter.PageLayoutTwoColumnLeft;\r\n        } else if (SetViewerParsedCommand.L_TWOCOLUMNRIGHT.equals(layout)) {\r\n            retVal = PdfWriter.PageLayoutTwoColumnRight;\r\n        } else if (SetViewerParsedCommand.L_TWOPAGELEFT.equals(layout)) {\r\n            retVal = PdfWriter.PageLayoutTwoPageLeft;\r\n        } else if (SetViewerParsedCommand.L_TWOPAGERIGHT.equals(layout)) {\r\n            retVal = PdfWriter.PageLayoutTwoPageRight;\r\n        }\r\n        return retVal;\r\n    }\r\n}\r\n",
		"id": "EvoSuiteBenchmark/109_pdfsam/src/main/java/org/pdfsam/console/business/parser/validators/SetViewerCmdValidatorTest.java",
		"test_prompt": "// SetViewerCmdValidatorTest.java\npackage org.pdfsam.console.business.parser.validators;\n\nimport java.io.File;\nimport java.util.Iterator;\nimport jcmdline.BooleanParam;\nimport jcmdline.CmdLineHandler;\nimport jcmdline.FileParam;\nimport jcmdline.PdfFileParam;\nimport jcmdline.StringParam;\nimport jcmdline.dto.PdfFile;\nimport org.pdfsam.console.business.dto.commands.AbstractParsedCommand;\nimport org.pdfsam.console.business.dto.commands.SetViewerParsedCommand;\nimport org.pdfsam.console.business.parser.validators.interfaces.AbstractCmdValidator;\nimport org.pdfsam.console.exceptions.console.ConsoleException;\nimport org.pdfsam.console.exceptions.console.ParseException;\nimport org.pdfsam.console.utils.FileUtility;\nimport org.pdfsam.console.utils.ValidationUtility;\nimport com.lowagie.text.pdf.PdfWriter;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link SetViewerCmdValidator}.\n* It contains ten unit test cases for the {@link SetViewerCmdValidator#validateArguments(CmdLineHandler)} method.\n*/\nclass SetViewerCmdValidatorTest {"
	},
	{
		"original_code": "// AbstractCmdValidator.java\n/*\r\n * Created on 16-Oct-2007\r\n * Copyright (C) 2007 by Andrea Vacondio.\r\n *\r\n *\r\n * This library is provided under dual licenses.\r\n * You may choose the terms of the Lesser General Public License version 2.1 or the General Public License version 2\r\n * License at your discretion.\r\n * \r\n * \r\n * This library is free software; you can redistribute it and/or\r\n * modify it under the terms of the GNU Lesser General Public\r\n * License as published by the Free Software Foundation;\r\n * version 2.1 of the License.\r\n * \r\n * This library is distributed in the hope that it will be useful,\r\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\r\n * Lesser General Public License for more details.\r\n * \r\n * You should have received a copy of the GNU Lesser General Public\r\n * License along with this library; if not, write to the Free Software\r\n * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA\r\n * \r\n * \r\n * \r\n * This program is free software; you can redistribute it and/or modify it under the terms of the \r\n * GNU General Public License as published by the Free Software Foundation; \r\n * either version 2 of the License.\r\n * \r\n * This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; \r\n * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. \r\n * See the GNU General Public License for more details.\r\n * You should have received a copy of the GNU General Public License along with this program; \r\n * if not, write to the Free Software Foundation, Inc., \r\n *  59 Temple Place, Suite 330, Boston, MA 02111-1307 USA\r\n */\r\npackage org.pdfsam.console.business.parser.validators.interfaces;\r\n\r\nimport jcmdline.BooleanParam;\r\nimport jcmdline.CmdLineHandler;\r\nimport jcmdline.StringParam;\r\nimport org.pdfsam.console.business.dto.commands.AbstractParsedCommand;\r\nimport org.pdfsam.console.exceptions.console.ConsoleException;\r\n\r\n/**\r\n * Abstract command validator\r\n * @author Andrea Vacondio\r\n */\r\npublic abstract class AbstractCmdValidator implements CmdValidator {\r\n\r\n    public AbstractParsedCommand validate(CmdLineHandler cmdLineHandler) throws ConsoleException {\r\n        AbstractParsedCommand parsedCommand = validateArguments(cmdLineHandler);\r\n        if (cmdLineHandler.getOption(AbstractParsedCommand.OVERWRITE_ARG) != null) {\r\n            parsedCommand.setOverwrite(((BooleanParam) cmdLineHandler.getOption(AbstractParsedCommand.OVERWRITE_ARG)).isTrue());\r\n        }\r\n        if (cmdLineHandler.getOption(AbstractParsedCommand.COMPRESSED_ARG) != null) {\r\n            parsedCommand.setCompress(((BooleanParam) cmdLineHandler.getOption(AbstractParsedCommand.COMPRESSED_ARG)).isTrue());\r\n        }\r\n        if (cmdLineHandler.getOption(AbstractParsedCommand.PDFVERSION_ARG) != null) {\r\n            StringParam pdfversionOption = (StringParam) cmdLineHandler.getOption(AbstractParsedCommand.PDFVERSION_ARG);\r\n            if (pdfversionOption.isSet()) {\r\n                parsedCommand.setOutputPdfVersion(pdfversionOption.getValue().charAt(0));\r\n            }\r\n        }\r\n        return parsedCommand;\r\n    }\r\n\r\n    /**\r\n     * Perform validation for the specific CmdHandler\r\n     * @param cmdLineHandler\r\n     * @return the parsed command\r\n     * @throws ConsoleException\r\n     */\r\n    protected abstract AbstractParsedCommand validateArguments(CmdLineHandler cmdLineHandler) throws ConsoleException;\r\n}\r\n",
		"id": "EvoSuiteBenchmark/109_pdfsam/src/main/java/org/pdfsam/console/business/parser/validators/interfaces/AbstractCmdValidatorTest.java",
		"test_prompt": "// AbstractCmdValidatorTest.java\npackage org.pdfsam.console.business.parser.validators.interfaces;\n\nimport jcmdline.BooleanParam;\nimport jcmdline.CmdLineHandler;\nimport jcmdline.StringParam;\nimport org.pdfsam.console.business.dto.commands.AbstractParsedCommand;\nimport org.pdfsam.console.exceptions.console.ConsoleException;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link AbstractCmdValidator}.\n* It contains ten unit test cases for the {@link AbstractCmdValidator#validate(CmdLineHandler)} method.\n*/\nclass AbstractCmdValidatorTest {"
	},
	{
		"original_code": "// PdfUtility.java\n/*\r\n * Created on 24-DEC-2008\r\n * Copyright (C) 2008 by Andrea Vacondio.\r\n *\r\n *\r\n * This library is provided under dual licenses.\r\n * You may choose the terms of the Lesser General Public License version 2.1 or the General Public License version 2\r\n * License at your discretion.\r\n * \r\n * \r\n * This library is free software; you can redistribute it and/or\r\n * modify it under the terms of the GNU Lesser General Public\r\n * License as published by the Free Software Foundation;\r\n * version 2.1 of the License.\r\n * \r\n * This library is distributed in the hope that it will be useful,\r\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\r\n * Lesser General Public License for more details.\r\n * \r\n * You should have received a copy of the GNU Lesser General Public\r\n * License along with this library; if not, write to the Free Software\r\n * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA\r\n * \r\n * \r\n * \r\n * This program is free software; you can redistribute it and/or modify it under the terms of the \r\n * GNU General Public License as published by the Free Software Foundation; \r\n * either version 2 of the License.\r\n * \r\n * This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; \r\n * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. \r\n * See the GNU General Public License for more details.\r\n * You should have received a copy of the GNU General Public License along with this program; \r\n * if not, write to the Free Software Foundation, Inc., \r\n *  59 Temple Place, Suite 330, Boston, MA 02111-1307 USA\r\n */\r\npackage org.pdfsam.console.utils;\r\n\r\nimport java.io.InputStream;\r\nimport java.util.List;\r\nimport org.dom4j.io.SAXReader;\r\n\r\n/**\r\n * Utility class for pdf documents\r\n *\r\n * @author Andrea Vacondio\r\n */\r\npublic final class PdfUtility {\r\n\r\n    private PdfUtility() {\r\n        // no contructor\r\n    }\r\n\r\n    /**\r\n     * @param bookmarks\r\n     *            the stream to read the xml. Stream is not closed.\r\n     * @return the max depth of the bookmarks tree. 0 if no bookmark.\r\n     */\r\n    public static int getMaxBookmarksDepth(InputStream bookmarks) throws Exception {\r\n        int retVal = 0;\r\n        if (bookmarks != null) {\r\n            SAXReader reader = new SAXReader();\r\n            org.dom4j.Document document = reader.read(bookmarks);\r\n            StringBuffer buffer = new StringBuffer(\"/Bookmark/Title[@Action=\\\"GoTo\\\"]\");\r\n            List nodes = document.selectNodes(buffer.toString());\r\n            while ((nodes != null && nodes.size() > 0)) {\r\n                retVal++;\r\n                buffer.append(\"/Title[@Action=\\\"GoTo\\\"]\");\r\n                nodes = document.selectNodes(buffer.toString());\r\n            }\r\n        }\r\n        return retVal;\r\n    }\r\n}\r\n",
		"id": "EvoSuiteBenchmark/109_pdfsam/src/main/java/org/pdfsam/console/utils/PdfUtilityTest.java",
		"test_prompt": "// PdfUtilityTest.java\npackage org.pdfsam.console.utils;\n\nimport java.io.InputStream;\nimport java.util.List;\nimport org.dom4j.io.SAXReader;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link PdfUtility}.\n* It contains ten unit test cases for the {@link PdfUtility#getMaxBookmarksDepth(InputStream)} method.\n*/\nclass PdfUtilityTest {"
	},
	{
		"original_code": "// PrefixParser.java\n/*\r\n * Created on 02-Apr-2007\r\n * Copyright (C) 2007 by Andrea Vacondio.\r\n *\r\n *\r\n * This library is provided under dual licenses.\r\n * You may choose the terms of the Lesser General Public License version 2.1 or the General Public License version 2\r\n * License at your discretion.\r\n * \r\n * \r\n * This library is free software; you can redistribute it and/or\r\n * modify it under the terms of the GNU Lesser General Public\r\n * License as published by the Free Software Foundation;\r\n * version 2.1 of the License.\r\n * \r\n * This library is distributed in the hope that it will be useful,\r\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\r\n * Lesser General Public License for more details.\r\n * \r\n * You should have received a copy of the GNU Lesser General Public\r\n * License along with this library; if not, write to the Free Software\r\n * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA\r\n * \r\n * \r\n * \r\n * This program is free software; you can redistribute it and/or modify it under the terms of the \r\n * GNU General Public License as published by the Free Software Foundation; \r\n * either version 2 of the License.\r\n * \r\n * This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; \r\n * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. \r\n * See the GNU General Public License for more details.\r\n * You should have received a copy of the GNU General Public License along with this program; \r\n * if not, write to the Free Software Foundation, Inc., \r\n *  59 Temple Place, Suite 330, Boston, MA 02111-1307 USA\r\n */\r\npackage org.pdfsam.console.utils.perfix;\r\n\r\nimport java.text.DecimalFormat;\r\nimport java.text.SimpleDateFormat;\r\nimport java.util.Date;\r\nimport java.util.regex.Matcher;\r\nimport java.util.regex.Pattern;\r\nimport org.pdfsam.console.exceptions.console.ConsoleException;\r\n\r\n/**\r\n * Used to parse the prefix and generate the output filename. If the prefix doesn't contain \"[CURRENTPAGE]\" or \"[TIMESTAMP]\" it generates oldstyle file name (Ex.\r\n * 005_prefixFileName.pdf. If it contains \"[CURRENTPAGE]\", \"[TIMESTAMP]\" or [FILENUMBER] and depending on the generateFileName method you call, it performs variable substitution.\r\n * (Ex. [BASENAME]_prefix_[CURRENTPAGE] generates FileName_prefix_005.pdf) Available variables: [CURRENTPAGE], [TIMESTAMP], [BASENAME], [FILENUMBER]. [CURRENTPAGE] and [FILENUMBER]\r\n * accept the notation [FILENUMBER####] to specify the output pattern (Ex if the prefix is [FILENUMBER####] and file number is 5 the resulting prefix will be 0005)\r\n *\r\n * @author a.vacondio\r\n */\r\npublic class PrefixParser {\r\n\r\n    private static final int SIMPLE_PREFIX = 0x00;\r\n\r\n    private static final int CURRENT_PAGE = 0x01;\r\n\r\n    private static final int TIMESTAMP = 0x02;\r\n\r\n    private static final int BASENAME = 0x04;\r\n\r\n    private static final int FILE_NUMBER = 0x08;\r\n\r\n    private static final int BOOKMARK_NAME = 0x10;\r\n\r\n    private static final String PDF_EXTENSION = \".pdf\";\r\n\r\n    // regexp to match\r\n    private static final String CURRENT_PAGE_REGX = \"(.)*(\\\\[CURRENTPAGE(#*)\\\\])+(.)*\";\r\n\r\n    private static final String FILE_NUMBER_REGX = \"(.)*(\\\\[FILENUMBER(#*)(\\\\d*)\\\\])+(.)*\";\r\n\r\n    private static final String TIMESTAMP_STRING = \"[TIMESTAMP]\";\r\n\r\n    private static final String BASENAME_STRING = \"[BASENAME]\";\r\n\r\n    private static final String BOOKMARK_NAME_STRING = \"[BOOKMARK_NAME]\";\r\n\r\n    // regexp to replace\r\n    private static final String CURRENT_PAGE_REPLACE_REGX = \"\\\\[CURRENTPAGE(#+)*\\\\]\";\r\n\r\n    private static final String FILE_NUMBER_REPLACE_REGX = \"\\\\[FILENUMBER(#+)*(\\\\d+)*\\\\]\";\r\n\r\n    private static final String TIMESTAMP_REPLACE_RGX = \"\\\\[TIMESTAMP\\\\]\";\r\n\r\n    private static final String BASENAME_REPLACE_REGX = \"\\\\[BASENAME\\\\]\";\r\n\r\n    private static final String BOOKMARK_NAME_REPLACE_REGX = \"\\\\[BOOKMARK_NAME\\\\]\";\r\n\r\n    private static final String INVALID_WIN_FILENAME_CHARS_REGEXP = \"[\\\\\\\\/:*?\\\\\\\"<>|]\";\r\n\r\n    private String prefix = \"\";\r\n\r\n    private String fileName = \"\";\r\n\r\n    private int currentPrefixType = SIMPLE_PREFIX;\r\n\r\n    /**\r\n     * @param prefix\r\n     *            prefix to use. (Can be empty)\r\n     * @param fileName\r\n     *            Original file name\r\n     * @throws ConsoleException\r\n     *             if the original fileName in empty or null\r\n     */\r\n    public PrefixParser(String prefix, String fileName) throws ConsoleException {\r\n        if (prefix != null) {\r\n            this.prefix = prefix;\r\n            if (prefix.indexOf(TIMESTAMP_STRING) > -1) {\r\n                currentPrefixType |= TIMESTAMP;\r\n            }\r\n            if (prefix.indexOf(BASENAME_STRING) > -1) {\r\n                currentPrefixType |= BASENAME;\r\n            }\r\n            if (prefix.indexOf(BOOKMARK_NAME_STRING) > -1) {\r\n                currentPrefixType |= BOOKMARK_NAME;\r\n            }\r\n            if (prefix.matches(CURRENT_PAGE_REGX)) {\r\n                currentPrefixType |= CURRENT_PAGE;\r\n            }\r\n            if (prefix.matches(FILE_NUMBER_REGX)) {\r\n                currentPrefixType |= FILE_NUMBER;\r\n            }\r\n        }\r\n        if (fileName != null && fileName.length() > 0) {\r\n            // check if the filename contains '.' and it's at least in second position (Ex. a.pdf)\r\n            if (fileName.lastIndexOf('.') >= 1) {\r\n                this.fileName = fileName.substring(0, fileName.lastIndexOf('.'));\r\n            } else {\r\n                this.fileName = fileName;\r\n            }\r\n        } else {\r\n            throw new ConsoleException(ConsoleException.EMPTY_FILENAME);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Generates the filename depending on the type of prefix. If it contains \"[CURRENTPAGE]\",\"[TIMESTAMP]\",\"[BOOKMARK_NAME]\" or \"[FILENUMBER]\" it performs variable substitution.\r\n     *\r\n     * @param request\r\n     *            input parameter\r\n     * @return filename generated\r\n     */\r\n    public String generateFileName(FileNameRequest request) {\r\n        String retVal = \"\";\r\n        if (request != null && !request.isEmpty()) {\r\n            if (isComplexPrefix(request)) {\r\n                retVal = generateSimpleFileName(true);\r\n                if ((currentPrefixType & BOOKMARK_NAME) == BOOKMARK_NAME && (request.getBookmarkName() != null) && (request.getBookmarkName().length() > 0)) {\r\n                    retVal = applyBookmarkname(retVal, request.getBookmarkName());\r\n                }\r\n                if ((currentPrefixType & CURRENT_PAGE) == CURRENT_PAGE && request.getPageNumber() != null) {\r\n                    retVal = applyPagenumber(retVal, request.getPageNumber());\r\n                }\r\n                if ((currentPrefixType & FILE_NUMBER) == FILE_NUMBER && request.getFileNumber() != null) {\r\n                    retVal = applyFilenumber(retVal, request.getFileNumber());\r\n                }\r\n            } else {\r\n                retVal = generateSimpleFileName(fileName, false);\r\n                if (request.getPageNumber() != null) {\r\n                    retVal = getFileNumberFormatter(request.getPageNumber()).format(request.getPageNumber().intValue()) + \"_\" + retVal;\r\n                }\r\n            }\r\n        } else {\r\n            retVal = generateSimpleFileName(fileName, isComplexPrefix());\r\n        }\r\n        return applyExtension(retVal);\r\n    }\r\n\r\n    /**\r\n     * Generates the filename depending on the type of prefix. If it contains \"[TIMESTAMP]\" or \"[BASENAME]\" it performs variable substitution.\r\n     *\r\n     * @return filename generated\r\n     */\r\n    public String generateFileName() {\r\n        return generateFileName(new FileNameRequest());\r\n    }\r\n\r\n    /**\r\n     * If it contains \"[CURRENTPAGE]\" and request.getPageNumber()!=null or it contains \"[TIMESTAMP]\" or it contains \"[BOOKMARK_NAME]\" and request.getBookmarkName()!=null or it\r\n     * contains \"[FILENUMBER]\" and request.getFileNumber()!=null it's a complex prefix.\r\n     *\r\n     * @param request\r\n     * @return true if it's a complex prefix\r\n     */\r\n    private boolean isComplexPrefix(FileNameRequest request) {\r\n        boolean retVal = false;\r\n        retVal = ((currentPrefixType & BOOKMARK_NAME) == BOOKMARK_NAME && (request.getBookmarkName() != null) && (request.getBookmarkName().length() > 0)) || ((currentPrefixType & CURRENT_PAGE) == CURRENT_PAGE && request.getPageNumber() != null) || ((currentPrefixType & FILE_NUMBER) == FILE_NUMBER && request.getFileNumber() != null) || isComplexPrefix();\r\n        return retVal;\r\n    }\r\n\r\n    /**\r\n     * @return true if the prefix contains \"[TIMESTAMP]\"\r\n     */\r\n    private boolean isComplexPrefix() {\r\n        return ((currentPrefixType & TIMESTAMP) == TIMESTAMP);\r\n    }\r\n\r\n    /**\r\n     * Generates the filename depending on the type of prefix. If performSubstitution is true it performs variable substitution replacing [TIMESTAMP] and [BASENAME] when necessary,\r\n     * if not the returned value is prefix+defaultPosponedName\r\n     *\r\n     * @param defaultPostponedName\r\n     * @param performSubstitution\r\n     *            if true perform substitution\r\n     * @return filename generated\r\n     */\r\n    private String generateSimpleFileName(String defaultPostponedName, boolean performSubstitution) {\r\n        String retVal = prefix;\r\n        if (performSubstitution) {\r\n            if ((currentPrefixType & TIMESTAMP) == TIMESTAMP) {\r\n                retVal = applyTimestamp(retVal);\r\n            }\r\n            if ((currentPrefixType & BASENAME) == BASENAME) {\r\n                retVal = applyFilename(retVal, fileName);\r\n            }\r\n        } else {\r\n            retVal += defaultPostponedName;\r\n        }\r\n        return retVal;\r\n    }\r\n\r\n    /**\r\n     * Generates the filename depending on the type of prefix. If performSubstitution is true it performs variable substitution replacing [TIMESTAMP] and [BASENAME] when necessary,\r\n     * if not the returned value is {@link PrefixParser#prefix}\r\n     *\r\n     * @param performSubstitution\r\n     *            if true perform substitution\r\n     * @return filename generated\r\n     */\r\n    private String generateSimpleFileName(boolean performSubstitution) {\r\n        return generateSimpleFileName(\"\", performSubstitution);\r\n    }\r\n\r\n    /**\r\n     * Applies the PDF extension to the input string\r\n     *\r\n     * @param arg0\r\n     * @return\r\n     */\r\n    private String applyExtension(String arg0) {\r\n        String retVal = arg0;\r\n        if (arg0 != null && !arg0.endsWith(PDF_EXTENSION)) {\r\n            retVal += PDF_EXTENSION;\r\n        }\r\n        return retVal;\r\n    }\r\n\r\n    /**\r\n     * Apply FILE_NUMBER_REGX variable substitution to the input argument\r\n     *\r\n     * @param arg0\r\n     * @param pageNumber\r\n     * @return\r\n     */\r\n    private String applyFilenumber(String arg0, Integer fileNumber) {\r\n        String retVal = arg0;\r\n        if (fileNumber != null) {\r\n            String numberPatter = \"\";\r\n            String startingValue = \"\";\r\n            Matcher m = Pattern.compile(FILE_NUMBER_REGX).matcher(arg0);\r\n            if (m.matches()) {\r\n                numberPatter = m.group(3);\r\n                startingValue = m.group(4);\r\n            }\r\n            int fileNum = 0;\r\n            // user entered a starting number\r\n            if (startingValue != null && startingValue.length() > 0) {\r\n                fileNum = Integer.parseInt(startingValue);\r\n            }\r\n            fileNum += fileNumber.intValue();\r\n            String replacement = \"\";\r\n            if (numberPatter != null && numberPatter.length() > 0) {\r\n                replacement = getFileNumberFormatter(numberPatter).format(fileNum);\r\n            } else {\r\n                replacement = getFileNumberFormatter(fileNum).format(fileNum);\r\n            }\r\n            retVal = arg0.replaceAll(FILE_NUMBER_REPLACE_REGX, replacement);\r\n        }\r\n        return retVal;\r\n    }\r\n\r\n    /**\r\n     * Apply CURRENT_PAGE_REPLACE_REGX variable substitution to the input argument\r\n     *\r\n     * @param arg0\r\n     * @param pageNumber\r\n     * @return\r\n     */\r\n    private String applyPagenumber(String arg0, Integer pageNumber) {\r\n        String retVal = arg0;\r\n        if (pageNumber != null) {\r\n            String numberPatter = \"\";\r\n            Matcher m = Pattern.compile(CURRENT_PAGE_REGX).matcher(arg0);\r\n            if (m.matches()) {\r\n                numberPatter = m.group(3);\r\n            }\r\n            String replacement = \"\";\r\n            if (numberPatter != null && numberPatter.length() > 0) {\r\n                replacement = getFileNumberFormatter(numberPatter).format(pageNumber.intValue());\r\n            } else {\r\n                replacement = getFileNumberFormatter(pageNumber.intValue()).format(pageNumber.intValue());\r\n            }\r\n            retVal = arg0.replaceAll(CURRENT_PAGE_REPLACE_REGX, replacement);\r\n        }\r\n        return retVal;\r\n    }\r\n\r\n    /**\r\n     * Apply BOOKMARK_NAME_REPLACE_REGX variable substitution to the input argument. Some Win32 invalid chars are stripped by the bookmark name.\r\n     *\r\n     * @param arg0\r\n     * @param bookmarkName\r\n     * @return\r\n     */\r\n    private String applyBookmarkname(String arg0, String bookmarkName) {\r\n        String retVal = arg0;\r\n        if (bookmarkName != null) {\r\n            // fix #2789961\r\n            bookmarkName = bookmarkName.replaceAll(INVALID_WIN_FILENAME_CHARS_REGEXP, \"\");\r\n            retVal = arg0.replaceAll(BOOKMARK_NAME_REPLACE_REGX, bookmarkName);\r\n        }\r\n        return retVal;\r\n    }\r\n\r\n    /**\r\n     * Apply BASENAME_REPLACE_REGX variable substitution to the input argument\r\n     *\r\n     * @param arg0\r\n     * @param fileName\r\n     * @return\r\n     */\r\n    private String applyFilename(String arg0, String fileName) {\r\n        String retVal = arg0;\r\n        if (fileName != null) {\r\n            retVal = arg0.replaceAll(BASENAME_REPLACE_REGX, fileName);\r\n        }\r\n        return retVal;\r\n    }\r\n\r\n    /**\r\n     * Apply TIMESTAMP_REPLACE_RGX variable substitution to the input argument\r\n     *\r\n     * @param arg0\r\n     * @return\r\n     */\r\n    private String applyTimestamp(String arg0) {\r\n        String retVal = arg0;\r\n        String timestamp = new SimpleDateFormat(\"yyyyMMdd_HHmmssSS\").format(new Date());\r\n        retVal = retVal.replaceAll(TIMESTAMP_REPLACE_RGX, timestamp);\r\n        return retVal;\r\n    }\r\n\r\n    /**\r\n     * @param n\r\n     *            numbero of pages\r\n     * @return\r\n     */\r\n    private DecimalFormat getFileNumberFormatter(Integer n) {\r\n        DecimalFormat retVal = null;\r\n        if (n != null) {\r\n            retVal = getFileNumberFormatter(n.intValue());\r\n        } else {\r\n            retVal = new DecimalFormat();\r\n            retVal.applyPattern(\"00000\");\r\n        }\r\n        return retVal;\r\n    }\r\n\r\n    /**\r\n     * @param n\r\n     *            number of pages\r\n     * @return the DecimalFormat\r\n     */\r\n    private DecimalFormat getFileNumberFormatter(int n) {\r\n        DecimalFormat retVal = new DecimalFormat();\r\n        try {\r\n            retVal.applyPattern(Integer.toString(n).replaceAll(\"\\\\d\", \"0\"));\r\n        } catch (Exception fe) {\r\n            retVal.applyPattern(\"00000\");\r\n        }\r\n        return retVal;\r\n    }\r\n\r\n    /**\r\n     * @param arg0\r\n     *            the input string of the type \"####\"\r\n     * @return\r\n     */\r\n    private DecimalFormat getFileNumberFormatter(String arg0) {\r\n        DecimalFormat retVal = new DecimalFormat();\r\n        try {\r\n            if (arg0 != null && arg0.length() > 0) {\r\n                retVal.applyPattern(arg0.replaceAll(\"#\", \"0\"));\r\n            } else {\r\n                retVal.applyPattern(\"00000\");\r\n            }\r\n        } catch (Exception fe) {\r\n            retVal.applyPattern(\"00000\");\r\n        }\r\n        return retVal;\r\n    }\r\n}\r\n",
		"id": "EvoSuiteBenchmark/109_pdfsam/src/main/java/org/pdfsam/console/utils/perfix/PrefixParserTest0.java",
		"test_prompt": "// PrefixParserTest0.java\npackage org.pdfsam.console.utils.perfix;\n\nimport java.text.DecimalFormat;\nimport java.text.SimpleDateFormat;\nimport java.util.Date;\nimport java.util.regex.Matcher;\nimport java.util.regex.Pattern;\nimport org.pdfsam.console.exceptions.console.ConsoleException;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link PrefixParser}.\n* It contains ten unit test cases for the {@link PrefixParser#generateFileName(FileNameRequest)} method.\n*/\nclass PrefixParserTest0 {"
	},
	{
		"original_code": "// PrefixParser.java\n/*\r\n * Created on 02-Apr-2007\r\n * Copyright (C) 2007 by Andrea Vacondio.\r\n *\r\n *\r\n * This library is provided under dual licenses.\r\n * You may choose the terms of the Lesser General Public License version 2.1 or the General Public License version 2\r\n * License at your discretion.\r\n * \r\n * \r\n * This library is free software; you can redistribute it and/or\r\n * modify it under the terms of the GNU Lesser General Public\r\n * License as published by the Free Software Foundation;\r\n * version 2.1 of the License.\r\n * \r\n * This library is distributed in the hope that it will be useful,\r\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\r\n * Lesser General Public License for more details.\r\n * \r\n * You should have received a copy of the GNU Lesser General Public\r\n * License along with this library; if not, write to the Free Software\r\n * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA\r\n * \r\n * \r\n * \r\n * This program is free software; you can redistribute it and/or modify it under the terms of the \r\n * GNU General Public License as published by the Free Software Foundation; \r\n * either version 2 of the License.\r\n * \r\n * This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; \r\n * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. \r\n * See the GNU General Public License for more details.\r\n * You should have received a copy of the GNU General Public License along with this program; \r\n * if not, write to the Free Software Foundation, Inc., \r\n *  59 Temple Place, Suite 330, Boston, MA 02111-1307 USA\r\n */\r\npackage org.pdfsam.console.utils.perfix;\r\n\r\nimport java.text.DecimalFormat;\r\nimport java.text.SimpleDateFormat;\r\nimport java.util.Date;\r\nimport java.util.regex.Matcher;\r\nimport java.util.regex.Pattern;\r\nimport org.pdfsam.console.exceptions.console.ConsoleException;\r\n\r\n/**\r\n * Used to parse the prefix and generate the output filename. If the prefix doesn't contain \"[CURRENTPAGE]\" or \"[TIMESTAMP]\" it generates oldstyle file name (Ex.\r\n * 005_prefixFileName.pdf. If it contains \"[CURRENTPAGE]\", \"[TIMESTAMP]\" or [FILENUMBER] and depending on the generateFileName method you call, it performs variable substitution.\r\n * (Ex. [BASENAME]_prefix_[CURRENTPAGE] generates FileName_prefix_005.pdf) Available variables: [CURRENTPAGE], [TIMESTAMP], [BASENAME], [FILENUMBER]. [CURRENTPAGE] and [FILENUMBER]\r\n * accept the notation [FILENUMBER####] to specify the output pattern (Ex if the prefix is [FILENUMBER####] and file number is 5 the resulting prefix will be 0005)\r\n *\r\n * @author a.vacondio\r\n */\r\npublic class PrefixParser {\r\n\r\n    private static final int SIMPLE_PREFIX = 0x00;\r\n\r\n    private static final int CURRENT_PAGE = 0x01;\r\n\r\n    private static final int TIMESTAMP = 0x02;\r\n\r\n    private static final int BASENAME = 0x04;\r\n\r\n    private static final int FILE_NUMBER = 0x08;\r\n\r\n    private static final int BOOKMARK_NAME = 0x10;\r\n\r\n    private static final String PDF_EXTENSION = \".pdf\";\r\n\r\n    // regexp to match\r\n    private static final String CURRENT_PAGE_REGX = \"(.)*(\\\\[CURRENTPAGE(#*)\\\\])+(.)*\";\r\n\r\n    private static final String FILE_NUMBER_REGX = \"(.)*(\\\\[FILENUMBER(#*)(\\\\d*)\\\\])+(.)*\";\r\n\r\n    private static final String TIMESTAMP_STRING = \"[TIMESTAMP]\";\r\n\r\n    private static final String BASENAME_STRING = \"[BASENAME]\";\r\n\r\n    private static final String BOOKMARK_NAME_STRING = \"[BOOKMARK_NAME]\";\r\n\r\n    // regexp to replace\r\n    private static final String CURRENT_PAGE_REPLACE_REGX = \"\\\\[CURRENTPAGE(#+)*\\\\]\";\r\n\r\n    private static final String FILE_NUMBER_REPLACE_REGX = \"\\\\[FILENUMBER(#+)*(\\\\d+)*\\\\]\";\r\n\r\n    private static final String TIMESTAMP_REPLACE_RGX = \"\\\\[TIMESTAMP\\\\]\";\r\n\r\n    private static final String BASENAME_REPLACE_REGX = \"\\\\[BASENAME\\\\]\";\r\n\r\n    private static final String BOOKMARK_NAME_REPLACE_REGX = \"\\\\[BOOKMARK_NAME\\\\]\";\r\n\r\n    private static final String INVALID_WIN_FILENAME_CHARS_REGEXP = \"[\\\\\\\\/:*?\\\\\\\"<>|]\";\r\n\r\n    private String prefix = \"\";\r\n\r\n    private String fileName = \"\";\r\n\r\n    private int currentPrefixType = SIMPLE_PREFIX;\r\n\r\n    /**\r\n     * @param prefix\r\n     *            prefix to use. (Can be empty)\r\n     * @param fileName\r\n     *            Original file name\r\n     * @throws ConsoleException\r\n     *             if the original fileName in empty or null\r\n     */\r\n    public PrefixParser(String prefix, String fileName) throws ConsoleException {\r\n        if (prefix != null) {\r\n            this.prefix = prefix;\r\n            if (prefix.indexOf(TIMESTAMP_STRING) > -1) {\r\n                currentPrefixType |= TIMESTAMP;\r\n            }\r\n            if (prefix.indexOf(BASENAME_STRING) > -1) {\r\n                currentPrefixType |= BASENAME;\r\n            }\r\n            if (prefix.indexOf(BOOKMARK_NAME_STRING) > -1) {\r\n                currentPrefixType |= BOOKMARK_NAME;\r\n            }\r\n            if (prefix.matches(CURRENT_PAGE_REGX)) {\r\n                currentPrefixType |= CURRENT_PAGE;\r\n            }\r\n            if (prefix.matches(FILE_NUMBER_REGX)) {\r\n                currentPrefixType |= FILE_NUMBER;\r\n            }\r\n        }\r\n        if (fileName != null && fileName.length() > 0) {\r\n            // check if the filename contains '.' and it's at least in second position (Ex. a.pdf)\r\n            if (fileName.lastIndexOf('.') >= 1) {\r\n                this.fileName = fileName.substring(0, fileName.lastIndexOf('.'));\r\n            } else {\r\n                this.fileName = fileName;\r\n            }\r\n        } else {\r\n            throw new ConsoleException(ConsoleException.EMPTY_FILENAME);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Generates the filename depending on the type of prefix. If it contains \"[CURRENTPAGE]\",\"[TIMESTAMP]\",\"[BOOKMARK_NAME]\" or \"[FILENUMBER]\" it performs variable substitution.\r\n     *\r\n     * @param request\r\n     *            input parameter\r\n     * @return filename generated\r\n     */\r\n    public String generateFileName(FileNameRequest request) {\r\n        String retVal = \"\";\r\n        if (request != null && !request.isEmpty()) {\r\n            if (isComplexPrefix(request)) {\r\n                retVal = generateSimpleFileName(true);\r\n                if ((currentPrefixType & BOOKMARK_NAME) == BOOKMARK_NAME && (request.getBookmarkName() != null) && (request.getBookmarkName().length() > 0)) {\r\n                    retVal = applyBookmarkname(retVal, request.getBookmarkName());\r\n                }\r\n                if ((currentPrefixType & CURRENT_PAGE) == CURRENT_PAGE && request.getPageNumber() != null) {\r\n                    retVal = applyPagenumber(retVal, request.getPageNumber());\r\n                }\r\n                if ((currentPrefixType & FILE_NUMBER) == FILE_NUMBER && request.getFileNumber() != null) {\r\n                    retVal = applyFilenumber(retVal, request.getFileNumber());\r\n                }\r\n            } else {\r\n                retVal = generateSimpleFileName(fileName, false);\r\n                if (request.getPageNumber() != null) {\r\n                    retVal = getFileNumberFormatter(request.getPageNumber()).format(request.getPageNumber().intValue()) + \"_\" + retVal;\r\n                }\r\n            }\r\n        } else {\r\n            retVal = generateSimpleFileName(fileName, isComplexPrefix());\r\n        }\r\n        return applyExtension(retVal);\r\n    }\r\n\r\n    /**\r\n     * Generates the filename depending on the type of prefix. If it contains \"[TIMESTAMP]\" or \"[BASENAME]\" it performs variable substitution.\r\n     *\r\n     * @return filename generated\r\n     */\r\n    public String generateFileName() {\r\n        return generateFileName(new FileNameRequest());\r\n    }\r\n\r\n    /**\r\n     * If it contains \"[CURRENTPAGE]\" and request.getPageNumber()!=null or it contains \"[TIMESTAMP]\" or it contains \"[BOOKMARK_NAME]\" and request.getBookmarkName()!=null or it\r\n     * contains \"[FILENUMBER]\" and request.getFileNumber()!=null it's a complex prefix.\r\n     *\r\n     * @param request\r\n     * @return true if it's a complex prefix\r\n     */\r\n    private boolean isComplexPrefix(FileNameRequest request) {\r\n        boolean retVal = false;\r\n        retVal = ((currentPrefixType & BOOKMARK_NAME) == BOOKMARK_NAME && (request.getBookmarkName() != null) && (request.getBookmarkName().length() > 0)) || ((currentPrefixType & CURRENT_PAGE) == CURRENT_PAGE && request.getPageNumber() != null) || ((currentPrefixType & FILE_NUMBER) == FILE_NUMBER && request.getFileNumber() != null) || isComplexPrefix();\r\n        return retVal;\r\n    }\r\n\r\n    /**\r\n     * @return true if the prefix contains \"[TIMESTAMP]\"\r\n     */\r\n    private boolean isComplexPrefix() {\r\n        return ((currentPrefixType & TIMESTAMP) == TIMESTAMP);\r\n    }\r\n\r\n    /**\r\n     * Generates the filename depending on the type of prefix. If performSubstitution is true it performs variable substitution replacing [TIMESTAMP] and [BASENAME] when necessary,\r\n     * if not the returned value is prefix+defaultPosponedName\r\n     *\r\n     * @param defaultPostponedName\r\n     * @param performSubstitution\r\n     *            if true perform substitution\r\n     * @return filename generated\r\n     */\r\n    private String generateSimpleFileName(String defaultPostponedName, boolean performSubstitution) {\r\n        String retVal = prefix;\r\n        if (performSubstitution) {\r\n            if ((currentPrefixType & TIMESTAMP) == TIMESTAMP) {\r\n                retVal = applyTimestamp(retVal);\r\n            }\r\n            if ((currentPrefixType & BASENAME) == BASENAME) {\r\n                retVal = applyFilename(retVal, fileName);\r\n            }\r\n        } else {\r\n            retVal += defaultPostponedName;\r\n        }\r\n        return retVal;\r\n    }\r\n\r\n    /**\r\n     * Generates the filename depending on the type of prefix. If performSubstitution is true it performs variable substitution replacing [TIMESTAMP] and [BASENAME] when necessary,\r\n     * if not the returned value is {@link PrefixParser#prefix}\r\n     *\r\n     * @param performSubstitution\r\n     *            if true perform substitution\r\n     * @return filename generated\r\n     */\r\n    private String generateSimpleFileName(boolean performSubstitution) {\r\n        return generateSimpleFileName(\"\", performSubstitution);\r\n    }\r\n\r\n    /**\r\n     * Applies the PDF extension to the input string\r\n     *\r\n     * @param arg0\r\n     * @return\r\n     */\r\n    private String applyExtension(String arg0) {\r\n        String retVal = arg0;\r\n        if (arg0 != null && !arg0.endsWith(PDF_EXTENSION)) {\r\n            retVal += PDF_EXTENSION;\r\n        }\r\n        return retVal;\r\n    }\r\n\r\n    /**\r\n     * Apply FILE_NUMBER_REGX variable substitution to the input argument\r\n     *\r\n     * @param arg0\r\n     * @param pageNumber\r\n     * @return\r\n     */\r\n    private String applyFilenumber(String arg0, Integer fileNumber) {\r\n        String retVal = arg0;\r\n        if (fileNumber != null) {\r\n            String numberPatter = \"\";\r\n            String startingValue = \"\";\r\n            Matcher m = Pattern.compile(FILE_NUMBER_REGX).matcher(arg0);\r\n            if (m.matches()) {\r\n                numberPatter = m.group(3);\r\n                startingValue = m.group(4);\r\n            }\r\n            int fileNum = 0;\r\n            // user entered a starting number\r\n            if (startingValue != null && startingValue.length() > 0) {\r\n                fileNum = Integer.parseInt(startingValue);\r\n            }\r\n            fileNum += fileNumber.intValue();\r\n            String replacement = \"\";\r\n            if (numberPatter != null && numberPatter.length() > 0) {\r\n                replacement = getFileNumberFormatter(numberPatter).format(fileNum);\r\n            } else {\r\n                replacement = getFileNumberFormatter(fileNum).format(fileNum);\r\n            }\r\n            retVal = arg0.replaceAll(FILE_NUMBER_REPLACE_REGX, replacement);\r\n        }\r\n        return retVal;\r\n    }\r\n\r\n    /**\r\n     * Apply CURRENT_PAGE_REPLACE_REGX variable substitution to the input argument\r\n     *\r\n     * @param arg0\r\n     * @param pageNumber\r\n     * @return\r\n     */\r\n    private String applyPagenumber(String arg0, Integer pageNumber) {\r\n        String retVal = arg0;\r\n        if (pageNumber != null) {\r\n            String numberPatter = \"\";\r\n            Matcher m = Pattern.compile(CURRENT_PAGE_REGX).matcher(arg0);\r\n            if (m.matches()) {\r\n                numberPatter = m.group(3);\r\n            }\r\n            String replacement = \"\";\r\n            if (numberPatter != null && numberPatter.length() > 0) {\r\n                replacement = getFileNumberFormatter(numberPatter).format(pageNumber.intValue());\r\n            } else {\r\n                replacement = getFileNumberFormatter(pageNumber.intValue()).format(pageNumber.intValue());\r\n            }\r\n            retVal = arg0.replaceAll(CURRENT_PAGE_REPLACE_REGX, replacement);\r\n        }\r\n        return retVal;\r\n    }\r\n\r\n    /**\r\n     * Apply BOOKMARK_NAME_REPLACE_REGX variable substitution to the input argument. Some Win32 invalid chars are stripped by the bookmark name.\r\n     *\r\n     * @param arg0\r\n     * @param bookmarkName\r\n     * @return\r\n     */\r\n    private String applyBookmarkname(String arg0, String bookmarkName) {\r\n        String retVal = arg0;\r\n        if (bookmarkName != null) {\r\n            // fix #2789961\r\n            bookmarkName = bookmarkName.replaceAll(INVALID_WIN_FILENAME_CHARS_REGEXP, \"\");\r\n            retVal = arg0.replaceAll(BOOKMARK_NAME_REPLACE_REGX, bookmarkName);\r\n        }\r\n        return retVal;\r\n    }\r\n\r\n    /**\r\n     * Apply BASENAME_REPLACE_REGX variable substitution to the input argument\r\n     *\r\n     * @param arg0\r\n     * @param fileName\r\n     * @return\r\n     */\r\n    private String applyFilename(String arg0, String fileName) {\r\n        String retVal = arg0;\r\n        if (fileName != null) {\r\n            retVal = arg0.replaceAll(BASENAME_REPLACE_REGX, fileName);\r\n        }\r\n        return retVal;\r\n    }\r\n\r\n    /**\r\n     * Apply TIMESTAMP_REPLACE_RGX variable substitution to the input argument\r\n     *\r\n     * @param arg0\r\n     * @return\r\n     */\r\n    private String applyTimestamp(String arg0) {\r\n        String retVal = arg0;\r\n        String timestamp = new SimpleDateFormat(\"yyyyMMdd_HHmmssSS\").format(new Date());\r\n        retVal = retVal.replaceAll(TIMESTAMP_REPLACE_RGX, timestamp);\r\n        return retVal;\r\n    }\r\n\r\n    /**\r\n     * @param n\r\n     *            numbero of pages\r\n     * @return\r\n     */\r\n    private DecimalFormat getFileNumberFormatter(Integer n) {\r\n        DecimalFormat retVal = null;\r\n        if (n != null) {\r\n            retVal = getFileNumberFormatter(n.intValue());\r\n        } else {\r\n            retVal = new DecimalFormat();\r\n            retVal.applyPattern(\"00000\");\r\n        }\r\n        return retVal;\r\n    }\r\n\r\n    /**\r\n     * @param n\r\n     *            number of pages\r\n     * @return the DecimalFormat\r\n     */\r\n    private DecimalFormat getFileNumberFormatter(int n) {\r\n        DecimalFormat retVal = new DecimalFormat();\r\n        try {\r\n            retVal.applyPattern(Integer.toString(n).replaceAll(\"\\\\d\", \"0\"));\r\n        } catch (Exception fe) {\r\n            retVal.applyPattern(\"00000\");\r\n        }\r\n        return retVal;\r\n    }\r\n\r\n    /**\r\n     * @param arg0\r\n     *            the input string of the type \"####\"\r\n     * @return\r\n     */\r\n    private DecimalFormat getFileNumberFormatter(String arg0) {\r\n        DecimalFormat retVal = new DecimalFormat();\r\n        try {\r\n            if (arg0 != null && arg0.length() > 0) {\r\n                retVal.applyPattern(arg0.replaceAll(\"#\", \"0\"));\r\n            } else {\r\n                retVal.applyPattern(\"00000\");\r\n            }\r\n        } catch (Exception fe) {\r\n            retVal.applyPattern(\"00000\");\r\n        }\r\n        return retVal;\r\n    }\r\n}\r\n",
		"id": "EvoSuiteBenchmark/109_pdfsam/src/main/java/org/pdfsam/console/utils/perfix/PrefixParserTest1.java",
		"test_prompt": "// PrefixParserTest1.java\npackage org.pdfsam.console.utils.perfix;\n\nimport java.text.DecimalFormat;\nimport java.text.SimpleDateFormat;\nimport java.util.Date;\nimport java.util.regex.Matcher;\nimport java.util.regex.Pattern;\nimport org.pdfsam.console.exceptions.console.ConsoleException;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link PrefixParser}.\n* It contains ten unit test cases for the {@link PrefixParser#generateFileName()} method.\n*/\nclass PrefixParserTest1 {"
	},
	{
		"original_code": "// FileNameRequest.java\n/*\n * Created on 11-Apr-2009\n * Copyright (C) 2009 by Andrea Vacondio.\n *\n *\n * This library is provided under dual licenses.\n * You may choose the terms of the Lesser General Public License version 2.1 or the General Public License version 2\n * License at your discretion.\n * \n * \n * This library is free software; you can redistribute it and/or\n * modify it under the terms of the GNU Lesser General Public\n * License as published by the Free Software Foundation;\n * version 2.1 of the License.\n * \n * This library is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n * Lesser General Public License for more details.\n * \n * You should have received a copy of the GNU Lesser General Public\n * License along with this library; if not, write to the Free Software\n * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA\n * \n * \n * \n * This program is free software; you can redistribute it and/or modify it under the terms of the \n * GNU General Public License as published by the Free Software Foundation; \n * either version 2 of the License.\n * \n * This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; \n * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. \n * See the GNU General Public License for more details.\n * You should have received a copy of the GNU General Public License along with this program; \n * if not, write to the Free Software Foundation, Inc., \n *  59 Temple Place, Suite 330, Boston, MA 02111-1307 USA\n */\npackage org.pdfsam.console.utils.perfix;\n\nimport java.io.Serializable;\n\npublic class FileNameRequest implements Serializable {\n\n    private static final long serialVersionUID = -4901506757147449856L;\n\n    private Integer pageNumber = null;\n\n    private Integer fileNumber = null;\n\n    private String bookmarkName = null;\n\n    /**\n     * @param pageNumber\n     * @param fileNumber\n     * @param bookmarkName\n     */\n    public FileNameRequest(Integer pageNumber, Integer fileNumber, String bookmarkName) {\n        super();\n        this.pageNumber = pageNumber;\n        this.fileNumber = fileNumber;\n        this.bookmarkName = bookmarkName;\n    }\n\n    public FileNameRequest(int pageNumber, int fileNumber, String bookmarkName) {\n        this(new Integer(pageNumber), new Integer(fileNumber), bookmarkName);\n    }\n\n    public FileNameRequest() {\n    }\n\n    /**\n     * @return the pageNumber\n     */\n    public Integer getPageNumber() {\n        return pageNumber;\n    }\n\n    /**\n     * @param pageNumber the pageNumber to set\n     */\n    public void setPageNumber(Integer pageNumber) {\n        this.pageNumber = pageNumber;\n    }\n\n    /**\n     * @return the fileNumber\n     */\n    public Integer getFileNumber() {\n        return fileNumber;\n    }\n\n    /**\n     * @param fileNumber the fileNumber to set\n     */\n    public void setFileNumber(Integer fileNumber) {\n        this.fileNumber = fileNumber;\n    }\n\n    /**\n     * @return the bookmarkName\n     */\n    public String getBookmarkName() {\n        return bookmarkName;\n    }\n\n    /**\n     * @param bookmarkName the bookmarkName to set\n     */\n    public void setBookmarkName(String bookmarkName) {\n        this.bookmarkName = bookmarkName;\n    }\n\n    /**\n     * @return true if all the instance variables are null or empty\n     */\n    public boolean isEmpty() {\n        return ((bookmarkName == null || bookmarkName.length() == 0) && (fileNumber == null) && (pageNumber == null));\n    }\n}\n",
		"id": "EvoSuiteBenchmark/109_pdfsam/src/main/java/org/pdfsam/console/utils/perfix/FileNameRequestTest.java",
		"test_prompt": "// FileNameRequestTest.java\npackage org.pdfsam.console.utils.perfix;\n\nimport java.io.Serializable;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link FileNameRequest}.\n* It contains ten unit test cases for the {@link FileNameRequest#isEmpty()} method.\n*/\nclass FileNameRequestTest {"
	},
	{
		"original_code": "// FileUtility.java\n/*\n * Created on 21-oct-2007\n * Copyright (C) 2006 by Andrea Vacondio.\n *\n *\n * This library is provided under dual licenses.\n * You may choose the terms of the Lesser General Public License version 2.1 or the General Public License version 2\n * License at your discretion.\n * \n * \n * This library is free software; you can redistribute it and/or\n * modify it under the terms of the GNU Lesser General Public\n * License as published by the Free Software Foundation;\n * version 2.1 of the License.\n * \n * This library is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n * Lesser General Public License for more details.\n * \n * You should have received a copy of the GNU Lesser General Public\n * License along with this library; if not, write to the Free Software\n * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA\n * \n * \n * \n * This program is free software; you can redistribute it and/or modify it under the terms of the \n * GNU General Public License as published by the Free Software Foundation; \n * either version 2 of the License.\n * \n * This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; \n * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. \n * See the GNU General Public License for more details.\n * You should have received a copy of the GNU General Public License along with this program; \n * if not, write to the Free Software Foundation, Inc., \n *  59 Temple Place, Suite 330, Boston, MA 02111-1307 USA\n */\npackage org.pdfsam.console.utils;\n\nimport java.io.File;\nimport java.io.FileInputStream;\nimport java.io.FileOutputStream;\nimport java.nio.MappedByteBuffer;\nimport java.nio.channels.FileChannel;\nimport java.util.ArrayList;\nimport java.util.Collection;\nimport java.util.Random;\nimport org.apache.log4j.Logger;\nimport org.pdfsam.console.business.dto.PdfFile;\nimport org.pdfsam.console.exceptions.console.ConsoleException;\n\n/**\n * Utility class for file handling\n *\n * @author Andrea Vacondio\n */\npublic final class FileUtility {\n\n    private static final Logger LOG = Logger.getLogger(FileUtility.class.getPackage().getName());\n\n    public static final String BUFFER_NAME = \"PDFsamTMPbuffer\";\n\n    private FileUtility() {\n        // no constructor\n    }\n\n    /**\n     * Generates a not existing temporary file\n     *\n     * @param filePath\n     *            path where the temporary file is created\n     * @return a temporary file\n     */\n    public static File generateTmpFile(String filePath) {\n        LOG.debug(\"Creating temporary file..\");\n        File retVal = null;\n        boolean alreadyExists = true;\n        int enthropy = 0;\n        String fileName = \"\";\n        // generates a random 4 char string\n        StringBuffer randomString = new StringBuffer();\n        Random random = new Random();\n        for (int i = 0; i < 5; i++) {\n            char ascii = (char) ((random.nextInt(26)) + 'A');\n            randomString.append(ascii);\n        }\n        while (alreadyExists) {\n            fileName = FileUtility.BUFFER_NAME + randomString + Integer.toString(++enthropy) + \".pdf\";\n            File tmpFile = new File(filePath + File.separator + fileName);\n            if (!(alreadyExists = tmpFile.exists())) {\n                retVal = tmpFile;\n            }\n        }\n        return retVal;\n    }\n\n    /**\n     * @param filename\n     *            filename or directory name\n     * @return a random file generated in directory or in the containing directory of filename\n     */\n    public static File generateTmpFile(File filename) {\n        File retVal = null;\n        if (filename != null) {\n            if (filename.isDirectory()) {\n                retVal = generateTmpFile(filename.getPath());\n            } else {\n                retVal = generateTmpFile(filename.getParent());\n            }\n        }\n        return retVal;\n    }\n\n    /**\n     * rename temporary file to output file\n     *\n     * @param tmpFile\n     *            temporary file to rename\n     * @param outputFile\n     *            file to rename to\n     * @param overwrite\n     *            overwrite existing file\n     */\n    public static void renameTemporaryFile(File tmpFile, File outputFile, boolean overwrite) throws ConsoleException {\n        if (tmpFile != null && outputFile != null) {\n            if (outputFile.exists()) {\n                // check if overwrite is allowed\n                if (overwrite) {\n                    if (outputFile.delete()) {\n                        renameFile(tmpFile, outputFile);\n                    } else {\n                        throw new ConsoleException(ConsoleException.UNABLE_TO_OVERWRITE, new String[] { tmpFile.getName() });\n                    }\n                } else {\n                    throw new ConsoleException(ConsoleException.OVERWRITE_IS_FALSE, new String[] { tmpFile.getName() });\n                }\n            } else {\n                renameFile(tmpFile, outputFile);\n            }\n        } else {\n            LOG.error(\"Exception renaming temporary file, source or destination are null.\");\n        }\n    }\n\n    /**\n     * Rename the file\n     *\n     * @param tmpFile\n     * @param outputFile\n     * @throws ConsoleException\n     *             if an error occur\n     */\n    private static void renameFile(File tmpFile, File outputFile) throws ConsoleException {\n        if (!tmpFile.renameTo(outputFile)) {\n            throw new ConsoleException(ConsoleException.UNABLE_TO_RENAME, new String[] { tmpFile.getName(), outputFile.getName() });\n        }\n    }\n\n    /**\n     * deletes the file\n     *\n     * @param tmpFile\n     * @return true if file is deleted\n     */\n    public static boolean deleteFile(File tmpFile) {\n        boolean retVal = false;\n        try {\n            if (!tmpFile.delete()) {\n                LOG.error(\"Unable to delete file \" + tmpFile.getName());\n            }\n        } catch (Exception e) {\n            LOG.error(\"Unable to delete file \" + tmpFile.getName(), e);\n        }\n        return retVal;\n    }\n\n    /**\n     * copy source to dest\n     *\n     * @param source\n     * @param dest\n     */\n    public static void copyFile(File source, File dest) {\n        FileChannel in = null;\n        FileChannel out = null;\n        try {\n            in = new FileInputStream(source).getChannel();\n            out = new FileOutputStream(dest).getChannel();\n            long size = in.size();\n            MappedByteBuffer buf = in.map(FileChannel.MapMode.READ_ONLY, 0, size);\n            out.write(buf);\n            if (in != null) {\n                in.close();\n            }\n            if (out != null) {\n                out.close();\n            }\n        } catch (Exception e) {\n            LOG.error(\"Unable to copy \" + source + \" to \" + dest);\n        }\n    }\n\n    /**\n     * Mapping from jcmdline.dto.PdfFile to org.pdfsam.console.business.dto.PdfFile\n     *\n     * @param pdfFile\n     * @return a PdfFile\n     */\n    public static PdfFile getPdfFile(jcmdline.dto.PdfFile pdfFile) {\n        return new PdfFile(pdfFile.getFile(), pdfFile.getPassword());\n    }\n\n    /**\n     * Mapping from an array of jcmdline.dto.PdfFile to an array of org.pdfsam.console.business.dto.PdfFile\n     *\n     * @param pdfFiles\n     * @return a PdfFile[]\n     */\n    public static PdfFile[] getPdfFiles(jcmdline.dto.PdfFile[] pdfFiles) {\n        ArrayList retVal = new ArrayList();\n        for (int i = 0; i < pdfFiles.length; i++) {\n            retVal.add(new PdfFile(pdfFiles[i].getFile(), pdfFiles[i].getPassword()));\n        }\n        return (PdfFile[]) retVal.toArray(new PdfFile[pdfFiles.length]);\n    }\n\n    /**\n     * Mapping from a Collection of jcmdline.dto.PdfFile to an array of org.pdfsam.console.business.dto.PdfFile\n     *\n     * @param pdfFiles\n     * @return a PdfFile[]\n     */\n    public static PdfFile[] getPdfFiles(Collection pdfFiles) {\n        return getPdfFiles((jcmdline.dto.PdfFile[]) pdfFiles.toArray(new jcmdline.dto.PdfFile[pdfFiles.size()]));\n    }\n}\n",
		"id": "EvoSuiteBenchmark/109_pdfsam/src/main/java/org/pdfsam/console/utils/FileUtilityTest0.java",
		"test_prompt": "// FileUtilityTest0.java\npackage org.pdfsam.console.utils;\n\nimport java.io.File;\nimport java.io.FileInputStream;\nimport java.io.FileOutputStream;\nimport java.nio.MappedByteBuffer;\nimport java.nio.channels.FileChannel;\nimport java.util.ArrayList;\nimport java.util.Collection;\nimport java.util.Random;\nimport org.apache.log4j.Logger;\nimport org.pdfsam.console.business.dto.PdfFile;\nimport org.pdfsam.console.exceptions.console.ConsoleException;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link FileUtility}.\n* It contains ten unit test cases for the {@link FileUtility#generateTmpFile(String)} method.\n*/\nclass FileUtilityTest0 {"
	},
	{
		"original_code": "// FileUtility.java\n/*\n * Created on 21-oct-2007\n * Copyright (C) 2006 by Andrea Vacondio.\n *\n *\n * This library is provided under dual licenses.\n * You may choose the terms of the Lesser General Public License version 2.1 or the General Public License version 2\n * License at your discretion.\n * \n * \n * This library is free software; you can redistribute it and/or\n * modify it under the terms of the GNU Lesser General Public\n * License as published by the Free Software Foundation;\n * version 2.1 of the License.\n * \n * This library is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n * Lesser General Public License for more details.\n * \n * You should have received a copy of the GNU Lesser General Public\n * License along with this library; if not, write to the Free Software\n * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA\n * \n * \n * \n * This program is free software; you can redistribute it and/or modify it under the terms of the \n * GNU General Public License as published by the Free Software Foundation; \n * either version 2 of the License.\n * \n * This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; \n * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. \n * See the GNU General Public License for more details.\n * You should have received a copy of the GNU General Public License along with this program; \n * if not, write to the Free Software Foundation, Inc., \n *  59 Temple Place, Suite 330, Boston, MA 02111-1307 USA\n */\npackage org.pdfsam.console.utils;\n\nimport java.io.File;\nimport java.io.FileInputStream;\nimport java.io.FileOutputStream;\nimport java.nio.MappedByteBuffer;\nimport java.nio.channels.FileChannel;\nimport java.util.ArrayList;\nimport java.util.Collection;\nimport java.util.Random;\nimport org.apache.log4j.Logger;\nimport org.pdfsam.console.business.dto.PdfFile;\nimport org.pdfsam.console.exceptions.console.ConsoleException;\n\n/**\n * Utility class for file handling\n *\n * @author Andrea Vacondio\n */\npublic final class FileUtility {\n\n    private static final Logger LOG = Logger.getLogger(FileUtility.class.getPackage().getName());\n\n    public static final String BUFFER_NAME = \"PDFsamTMPbuffer\";\n\n    private FileUtility() {\n        // no constructor\n    }\n\n    /**\n     * Generates a not existing temporary file\n     *\n     * @param filePath\n     *            path where the temporary file is created\n     * @return a temporary file\n     */\n    public static File generateTmpFile(String filePath) {\n        LOG.debug(\"Creating temporary file..\");\n        File retVal = null;\n        boolean alreadyExists = true;\n        int enthropy = 0;\n        String fileName = \"\";\n        // generates a random 4 char string\n        StringBuffer randomString = new StringBuffer();\n        Random random = new Random();\n        for (int i = 0; i < 5; i++) {\n            char ascii = (char) ((random.nextInt(26)) + 'A');\n            randomString.append(ascii);\n        }\n        while (alreadyExists) {\n            fileName = FileUtility.BUFFER_NAME + randomString + Integer.toString(++enthropy) + \".pdf\";\n            File tmpFile = new File(filePath + File.separator + fileName);\n            if (!(alreadyExists = tmpFile.exists())) {\n                retVal = tmpFile;\n            }\n        }\n        return retVal;\n    }\n\n    /**\n     * @param filename\n     *            filename or directory name\n     * @return a random file generated in directory or in the containing directory of filename\n     */\n    public static File generateTmpFile(File filename) {\n        File retVal = null;\n        if (filename != null) {\n            if (filename.isDirectory()) {\n                retVal = generateTmpFile(filename.getPath());\n            } else {\n                retVal = generateTmpFile(filename.getParent());\n            }\n        }\n        return retVal;\n    }\n\n    /**\n     * rename temporary file to output file\n     *\n     * @param tmpFile\n     *            temporary file to rename\n     * @param outputFile\n     *            file to rename to\n     * @param overwrite\n     *            overwrite existing file\n     */\n    public static void renameTemporaryFile(File tmpFile, File outputFile, boolean overwrite) throws ConsoleException {\n        if (tmpFile != null && outputFile != null) {\n            if (outputFile.exists()) {\n                // check if overwrite is allowed\n                if (overwrite) {\n                    if (outputFile.delete()) {\n                        renameFile(tmpFile, outputFile);\n                    } else {\n                        throw new ConsoleException(ConsoleException.UNABLE_TO_OVERWRITE, new String[] { tmpFile.getName() });\n                    }\n                } else {\n                    throw new ConsoleException(ConsoleException.OVERWRITE_IS_FALSE, new String[] { tmpFile.getName() });\n                }\n            } else {\n                renameFile(tmpFile, outputFile);\n            }\n        } else {\n            LOG.error(\"Exception renaming temporary file, source or destination are null.\");\n        }\n    }\n\n    /**\n     * Rename the file\n     *\n     * @param tmpFile\n     * @param outputFile\n     * @throws ConsoleException\n     *             if an error occur\n     */\n    private static void renameFile(File tmpFile, File outputFile) throws ConsoleException {\n        if (!tmpFile.renameTo(outputFile)) {\n            throw new ConsoleException(ConsoleException.UNABLE_TO_RENAME, new String[] { tmpFile.getName(), outputFile.getName() });\n        }\n    }\n\n    /**\n     * deletes the file\n     *\n     * @param tmpFile\n     * @return true if file is deleted\n     */\n    public static boolean deleteFile(File tmpFile) {\n        boolean retVal = false;\n        try {\n            if (!tmpFile.delete()) {\n                LOG.error(\"Unable to delete file \" + tmpFile.getName());\n            }\n        } catch (Exception e) {\n            LOG.error(\"Unable to delete file \" + tmpFile.getName(), e);\n        }\n        return retVal;\n    }\n\n    /**\n     * copy source to dest\n     *\n     * @param source\n     * @param dest\n     */\n    public static void copyFile(File source, File dest) {\n        FileChannel in = null;\n        FileChannel out = null;\n        try {\n            in = new FileInputStream(source).getChannel();\n            out = new FileOutputStream(dest).getChannel();\n            long size = in.size();\n            MappedByteBuffer buf = in.map(FileChannel.MapMode.READ_ONLY, 0, size);\n            out.write(buf);\n            if (in != null) {\n                in.close();\n            }\n            if (out != null) {\n                out.close();\n            }\n        } catch (Exception e) {\n            LOG.error(\"Unable to copy \" + source + \" to \" + dest);\n        }\n    }\n\n    /**\n     * Mapping from jcmdline.dto.PdfFile to org.pdfsam.console.business.dto.PdfFile\n     *\n     * @param pdfFile\n     * @return a PdfFile\n     */\n    public static PdfFile getPdfFile(jcmdline.dto.PdfFile pdfFile) {\n        return new PdfFile(pdfFile.getFile(), pdfFile.getPassword());\n    }\n\n    /**\n     * Mapping from an array of jcmdline.dto.PdfFile to an array of org.pdfsam.console.business.dto.PdfFile\n     *\n     * @param pdfFiles\n     * @return a PdfFile[]\n     */\n    public static PdfFile[] getPdfFiles(jcmdline.dto.PdfFile[] pdfFiles) {\n        ArrayList retVal = new ArrayList();\n        for (int i = 0; i < pdfFiles.length; i++) {\n            retVal.add(new PdfFile(pdfFiles[i].getFile(), pdfFiles[i].getPassword()));\n        }\n        return (PdfFile[]) retVal.toArray(new PdfFile[pdfFiles.length]);\n    }\n\n    /**\n     * Mapping from a Collection of jcmdline.dto.PdfFile to an array of org.pdfsam.console.business.dto.PdfFile\n     *\n     * @param pdfFiles\n     * @return a PdfFile[]\n     */\n    public static PdfFile[] getPdfFiles(Collection pdfFiles) {\n        return getPdfFiles((jcmdline.dto.PdfFile[]) pdfFiles.toArray(new jcmdline.dto.PdfFile[pdfFiles.size()]));\n    }\n}\n",
		"id": "EvoSuiteBenchmark/109_pdfsam/src/main/java/org/pdfsam/console/utils/FileUtilityTest1.java",
		"test_prompt": "// FileUtilityTest1.java\npackage org.pdfsam.console.utils;\n\nimport java.io.File;\nimport java.io.FileInputStream;\nimport java.io.FileOutputStream;\nimport java.nio.MappedByteBuffer;\nimport java.nio.channels.FileChannel;\nimport java.util.ArrayList;\nimport java.util.Collection;\nimport java.util.Random;\nimport org.apache.log4j.Logger;\nimport org.pdfsam.console.business.dto.PdfFile;\nimport org.pdfsam.console.exceptions.console.ConsoleException;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link FileUtility}.\n* It contains ten unit test cases for the {@link FileUtility#generateTmpFile(File)} method.\n*/\nclass FileUtilityTest1 {"
	},
	{
		"original_code": "// FileUtility.java\n/*\n * Created on 21-oct-2007\n * Copyright (C) 2006 by Andrea Vacondio.\n *\n *\n * This library is provided under dual licenses.\n * You may choose the terms of the Lesser General Public License version 2.1 or the General Public License version 2\n * License at your discretion.\n * \n * \n * This library is free software; you can redistribute it and/or\n * modify it under the terms of the GNU Lesser General Public\n * License as published by the Free Software Foundation;\n * version 2.1 of the License.\n * \n * This library is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n * Lesser General Public License for more details.\n * \n * You should have received a copy of the GNU Lesser General Public\n * License along with this library; if not, write to the Free Software\n * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA\n * \n * \n * \n * This program is free software; you can redistribute it and/or modify it under the terms of the \n * GNU General Public License as published by the Free Software Foundation; \n * either version 2 of the License.\n * \n * This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; \n * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. \n * See the GNU General Public License for more details.\n * You should have received a copy of the GNU General Public License along with this program; \n * if not, write to the Free Software Foundation, Inc., \n *  59 Temple Place, Suite 330, Boston, MA 02111-1307 USA\n */\npackage org.pdfsam.console.utils;\n\nimport java.io.File;\nimport java.io.FileInputStream;\nimport java.io.FileOutputStream;\nimport java.nio.MappedByteBuffer;\nimport java.nio.channels.FileChannel;\nimport java.util.ArrayList;\nimport java.util.Collection;\nimport java.util.Random;\nimport org.apache.log4j.Logger;\nimport org.pdfsam.console.business.dto.PdfFile;\nimport org.pdfsam.console.exceptions.console.ConsoleException;\n\n/**\n * Utility class for file handling\n *\n * @author Andrea Vacondio\n */\npublic final class FileUtility {\n\n    private static final Logger LOG = Logger.getLogger(FileUtility.class.getPackage().getName());\n\n    public static final String BUFFER_NAME = \"PDFsamTMPbuffer\";\n\n    private FileUtility() {\n        // no constructor\n    }\n\n    /**\n     * Generates a not existing temporary file\n     *\n     * @param filePath\n     *            path where the temporary file is created\n     * @return a temporary file\n     */\n    public static File generateTmpFile(String filePath) {\n        LOG.debug(\"Creating temporary file..\");\n        File retVal = null;\n        boolean alreadyExists = true;\n        int enthropy = 0;\n        String fileName = \"\";\n        // generates a random 4 char string\n        StringBuffer randomString = new StringBuffer();\n        Random random = new Random();\n        for (int i = 0; i < 5; i++) {\n            char ascii = (char) ((random.nextInt(26)) + 'A');\n            randomString.append(ascii);\n        }\n        while (alreadyExists) {\n            fileName = FileUtility.BUFFER_NAME + randomString + Integer.toString(++enthropy) + \".pdf\";\n            File tmpFile = new File(filePath + File.separator + fileName);\n            if (!(alreadyExists = tmpFile.exists())) {\n                retVal = tmpFile;\n            }\n        }\n        return retVal;\n    }\n\n    /**\n     * @param filename\n     *            filename or directory name\n     * @return a random file generated in directory or in the containing directory of filename\n     */\n    public static File generateTmpFile(File filename) {\n        File retVal = null;\n        if (filename != null) {\n            if (filename.isDirectory()) {\n                retVal = generateTmpFile(filename.getPath());\n            } else {\n                retVal = generateTmpFile(filename.getParent());\n            }\n        }\n        return retVal;\n    }\n\n    /**\n     * rename temporary file to output file\n     *\n     * @param tmpFile\n     *            temporary file to rename\n     * @param outputFile\n     *            file to rename to\n     * @param overwrite\n     *            overwrite existing file\n     */\n    public static void renameTemporaryFile(File tmpFile, File outputFile, boolean overwrite) throws ConsoleException {\n        if (tmpFile != null && outputFile != null) {\n            if (outputFile.exists()) {\n                // check if overwrite is allowed\n                if (overwrite) {\n                    if (outputFile.delete()) {\n                        renameFile(tmpFile, outputFile);\n                    } else {\n                        throw new ConsoleException(ConsoleException.UNABLE_TO_OVERWRITE, new String[] { tmpFile.getName() });\n                    }\n                } else {\n                    throw new ConsoleException(ConsoleException.OVERWRITE_IS_FALSE, new String[] { tmpFile.getName() });\n                }\n            } else {\n                renameFile(tmpFile, outputFile);\n            }\n        } else {\n            LOG.error(\"Exception renaming temporary file, source or destination are null.\");\n        }\n    }\n\n    /**\n     * Rename the file\n     *\n     * @param tmpFile\n     * @param outputFile\n     * @throws ConsoleException\n     *             if an error occur\n     */\n    private static void renameFile(File tmpFile, File outputFile) throws ConsoleException {\n        if (!tmpFile.renameTo(outputFile)) {\n            throw new ConsoleException(ConsoleException.UNABLE_TO_RENAME, new String[] { tmpFile.getName(), outputFile.getName() });\n        }\n    }\n\n    /**\n     * deletes the file\n     *\n     * @param tmpFile\n     * @return true if file is deleted\n     */\n    public static boolean deleteFile(File tmpFile) {\n        boolean retVal = false;\n        try {\n            if (!tmpFile.delete()) {\n                LOG.error(\"Unable to delete file \" + tmpFile.getName());\n            }\n        } catch (Exception e) {\n            LOG.error(\"Unable to delete file \" + tmpFile.getName(), e);\n        }\n        return retVal;\n    }\n\n    /**\n     * copy source to dest\n     *\n     * @param source\n     * @param dest\n     */\n    public static void copyFile(File source, File dest) {\n        FileChannel in = null;\n        FileChannel out = null;\n        try {\n            in = new FileInputStream(source).getChannel();\n            out = new FileOutputStream(dest).getChannel();\n            long size = in.size();\n            MappedByteBuffer buf = in.map(FileChannel.MapMode.READ_ONLY, 0, size);\n            out.write(buf);\n            if (in != null) {\n                in.close();\n            }\n            if (out != null) {\n                out.close();\n            }\n        } catch (Exception e) {\n            LOG.error(\"Unable to copy \" + source + \" to \" + dest);\n        }\n    }\n\n    /**\n     * Mapping from jcmdline.dto.PdfFile to org.pdfsam.console.business.dto.PdfFile\n     *\n     * @param pdfFile\n     * @return a PdfFile\n     */\n    public static PdfFile getPdfFile(jcmdline.dto.PdfFile pdfFile) {\n        return new PdfFile(pdfFile.getFile(), pdfFile.getPassword());\n    }\n\n    /**\n     * Mapping from an array of jcmdline.dto.PdfFile to an array of org.pdfsam.console.business.dto.PdfFile\n     *\n     * @param pdfFiles\n     * @return a PdfFile[]\n     */\n    public static PdfFile[] getPdfFiles(jcmdline.dto.PdfFile[] pdfFiles) {\n        ArrayList retVal = new ArrayList();\n        for (int i = 0; i < pdfFiles.length; i++) {\n            retVal.add(new PdfFile(pdfFiles[i].getFile(), pdfFiles[i].getPassword()));\n        }\n        return (PdfFile[]) retVal.toArray(new PdfFile[pdfFiles.length]);\n    }\n\n    /**\n     * Mapping from a Collection of jcmdline.dto.PdfFile to an array of org.pdfsam.console.business.dto.PdfFile\n     *\n     * @param pdfFiles\n     * @return a PdfFile[]\n     */\n    public static PdfFile[] getPdfFiles(Collection pdfFiles) {\n        return getPdfFiles((jcmdline.dto.PdfFile[]) pdfFiles.toArray(new jcmdline.dto.PdfFile[pdfFiles.size()]));\n    }\n}\n",
		"id": "EvoSuiteBenchmark/109_pdfsam/src/main/java/org/pdfsam/console/utils/FileUtilityTest2.java",
		"test_prompt": "// FileUtilityTest2.java\npackage org.pdfsam.console.utils;\n\nimport java.io.File;\nimport java.io.FileInputStream;\nimport java.io.FileOutputStream;\nimport java.nio.MappedByteBuffer;\nimport java.nio.channels.FileChannel;\nimport java.util.ArrayList;\nimport java.util.Collection;\nimport java.util.Random;\nimport org.apache.log4j.Logger;\nimport org.pdfsam.console.business.dto.PdfFile;\nimport org.pdfsam.console.exceptions.console.ConsoleException;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link FileUtility}.\n* It contains ten unit test cases for the {@link FileUtility#deleteFile(File)} method.\n*/\nclass FileUtilityTest2 {"
	},
	{
		"original_code": "// FileUtility.java\n/*\n * Created on 21-oct-2007\n * Copyright (C) 2006 by Andrea Vacondio.\n *\n *\n * This library is provided under dual licenses.\n * You may choose the terms of the Lesser General Public License version 2.1 or the General Public License version 2\n * License at your discretion.\n * \n * \n * This library is free software; you can redistribute it and/or\n * modify it under the terms of the GNU Lesser General Public\n * License as published by the Free Software Foundation;\n * version 2.1 of the License.\n * \n * This library is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n * Lesser General Public License for more details.\n * \n * You should have received a copy of the GNU Lesser General Public\n * License along with this library; if not, write to the Free Software\n * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA\n * \n * \n * \n * This program is free software; you can redistribute it and/or modify it under the terms of the \n * GNU General Public License as published by the Free Software Foundation; \n * either version 2 of the License.\n * \n * This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; \n * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. \n * See the GNU General Public License for more details.\n * You should have received a copy of the GNU General Public License along with this program; \n * if not, write to the Free Software Foundation, Inc., \n *  59 Temple Place, Suite 330, Boston, MA 02111-1307 USA\n */\npackage org.pdfsam.console.utils;\n\nimport java.io.File;\nimport java.io.FileInputStream;\nimport java.io.FileOutputStream;\nimport java.nio.MappedByteBuffer;\nimport java.nio.channels.FileChannel;\nimport java.util.ArrayList;\nimport java.util.Collection;\nimport java.util.Random;\nimport org.apache.log4j.Logger;\nimport org.pdfsam.console.business.dto.PdfFile;\nimport org.pdfsam.console.exceptions.console.ConsoleException;\n\n/**\n * Utility class for file handling\n *\n * @author Andrea Vacondio\n */\npublic final class FileUtility {\n\n    private static final Logger LOG = Logger.getLogger(FileUtility.class.getPackage().getName());\n\n    public static final String BUFFER_NAME = \"PDFsamTMPbuffer\";\n\n    private FileUtility() {\n        // no constructor\n    }\n\n    /**\n     * Generates a not existing temporary file\n     *\n     * @param filePath\n     *            path where the temporary file is created\n     * @return a temporary file\n     */\n    public static File generateTmpFile(String filePath) {\n        LOG.debug(\"Creating temporary file..\");\n        File retVal = null;\n        boolean alreadyExists = true;\n        int enthropy = 0;\n        String fileName = \"\";\n        // generates a random 4 char string\n        StringBuffer randomString = new StringBuffer();\n        Random random = new Random();\n        for (int i = 0; i < 5; i++) {\n            char ascii = (char) ((random.nextInt(26)) + 'A');\n            randomString.append(ascii);\n        }\n        while (alreadyExists) {\n            fileName = FileUtility.BUFFER_NAME + randomString + Integer.toString(++enthropy) + \".pdf\";\n            File tmpFile = new File(filePath + File.separator + fileName);\n            if (!(alreadyExists = tmpFile.exists())) {\n                retVal = tmpFile;\n            }\n        }\n        return retVal;\n    }\n\n    /**\n     * @param filename\n     *            filename or directory name\n     * @return a random file generated in directory or in the containing directory of filename\n     */\n    public static File generateTmpFile(File filename) {\n        File retVal = null;\n        if (filename != null) {\n            if (filename.isDirectory()) {\n                retVal = generateTmpFile(filename.getPath());\n            } else {\n                retVal = generateTmpFile(filename.getParent());\n            }\n        }\n        return retVal;\n    }\n\n    /**\n     * rename temporary file to output file\n     *\n     * @param tmpFile\n     *            temporary file to rename\n     * @param outputFile\n     *            file to rename to\n     * @param overwrite\n     *            overwrite existing file\n     */\n    public static void renameTemporaryFile(File tmpFile, File outputFile, boolean overwrite) throws ConsoleException {\n        if (tmpFile != null && outputFile != null) {\n            if (outputFile.exists()) {\n                // check if overwrite is allowed\n                if (overwrite) {\n                    if (outputFile.delete()) {\n                        renameFile(tmpFile, outputFile);\n                    } else {\n                        throw new ConsoleException(ConsoleException.UNABLE_TO_OVERWRITE, new String[] { tmpFile.getName() });\n                    }\n                } else {\n                    throw new ConsoleException(ConsoleException.OVERWRITE_IS_FALSE, new String[] { tmpFile.getName() });\n                }\n            } else {\n                renameFile(tmpFile, outputFile);\n            }\n        } else {\n            LOG.error(\"Exception renaming temporary file, source or destination are null.\");\n        }\n    }\n\n    /**\n     * Rename the file\n     *\n     * @param tmpFile\n     * @param outputFile\n     * @throws ConsoleException\n     *             if an error occur\n     */\n    private static void renameFile(File tmpFile, File outputFile) throws ConsoleException {\n        if (!tmpFile.renameTo(outputFile)) {\n            throw new ConsoleException(ConsoleException.UNABLE_TO_RENAME, new String[] { tmpFile.getName(), outputFile.getName() });\n        }\n    }\n\n    /**\n     * deletes the file\n     *\n     * @param tmpFile\n     * @return true if file is deleted\n     */\n    public static boolean deleteFile(File tmpFile) {\n        boolean retVal = false;\n        try {\n            if (!tmpFile.delete()) {\n                LOG.error(\"Unable to delete file \" + tmpFile.getName());\n            }\n        } catch (Exception e) {\n            LOG.error(\"Unable to delete file \" + tmpFile.getName(), e);\n        }\n        return retVal;\n    }\n\n    /**\n     * copy source to dest\n     *\n     * @param source\n     * @param dest\n     */\n    public static void copyFile(File source, File dest) {\n        FileChannel in = null;\n        FileChannel out = null;\n        try {\n            in = new FileInputStream(source).getChannel();\n            out = new FileOutputStream(dest).getChannel();\n            long size = in.size();\n            MappedByteBuffer buf = in.map(FileChannel.MapMode.READ_ONLY, 0, size);\n            out.write(buf);\n            if (in != null) {\n                in.close();\n            }\n            if (out != null) {\n                out.close();\n            }\n        } catch (Exception e) {\n            LOG.error(\"Unable to copy \" + source + \" to \" + dest);\n        }\n    }\n\n    /**\n     * Mapping from jcmdline.dto.PdfFile to org.pdfsam.console.business.dto.PdfFile\n     *\n     * @param pdfFile\n     * @return a PdfFile\n     */\n    public static PdfFile getPdfFile(jcmdline.dto.PdfFile pdfFile) {\n        return new PdfFile(pdfFile.getFile(), pdfFile.getPassword());\n    }\n\n    /**\n     * Mapping from an array of jcmdline.dto.PdfFile to an array of org.pdfsam.console.business.dto.PdfFile\n     *\n     * @param pdfFiles\n     * @return a PdfFile[]\n     */\n    public static PdfFile[] getPdfFiles(jcmdline.dto.PdfFile[] pdfFiles) {\n        ArrayList retVal = new ArrayList();\n        for (int i = 0; i < pdfFiles.length; i++) {\n            retVal.add(new PdfFile(pdfFiles[i].getFile(), pdfFiles[i].getPassword()));\n        }\n        return (PdfFile[]) retVal.toArray(new PdfFile[pdfFiles.length]);\n    }\n\n    /**\n     * Mapping from a Collection of jcmdline.dto.PdfFile to an array of org.pdfsam.console.business.dto.PdfFile\n     *\n     * @param pdfFiles\n     * @return a PdfFile[]\n     */\n    public static PdfFile[] getPdfFiles(Collection pdfFiles) {\n        return getPdfFiles((jcmdline.dto.PdfFile[]) pdfFiles.toArray(new jcmdline.dto.PdfFile[pdfFiles.size()]));\n    }\n}\n",
		"id": "EvoSuiteBenchmark/109_pdfsam/src/main/java/org/pdfsam/console/utils/FileUtilityTest3.java",
		"test_prompt": "// FileUtilityTest3.java\npackage org.pdfsam.console.utils;\n\nimport java.io.File;\nimport java.io.FileInputStream;\nimport java.io.FileOutputStream;\nimport java.nio.MappedByteBuffer;\nimport java.nio.channels.FileChannel;\nimport java.util.ArrayList;\nimport java.util.Collection;\nimport java.util.Random;\nimport org.apache.log4j.Logger;\nimport org.pdfsam.console.business.dto.PdfFile;\nimport org.pdfsam.console.exceptions.console.ConsoleException;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link FileUtility}.\n* It contains ten unit test cases for the {@link FileUtility#getPdfFile(jcmdline.dto.PdfFile)} method.\n*/\nclass FileUtilityTest3 {"
	},
	{
		"original_code": "// FileUtility.java\n/*\n * Created on 21-oct-2007\n * Copyright (C) 2006 by Andrea Vacondio.\n *\n *\n * This library is provided under dual licenses.\n * You may choose the terms of the Lesser General Public License version 2.1 or the General Public License version 2\n * License at your discretion.\n * \n * \n * This library is free software; you can redistribute it and/or\n * modify it under the terms of the GNU Lesser General Public\n * License as published by the Free Software Foundation;\n * version 2.1 of the License.\n * \n * This library is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n * Lesser General Public License for more details.\n * \n * You should have received a copy of the GNU Lesser General Public\n * License along with this library; if not, write to the Free Software\n * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA\n * \n * \n * \n * This program is free software; you can redistribute it and/or modify it under the terms of the \n * GNU General Public License as published by the Free Software Foundation; \n * either version 2 of the License.\n * \n * This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; \n * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. \n * See the GNU General Public License for more details.\n * You should have received a copy of the GNU General Public License along with this program; \n * if not, write to the Free Software Foundation, Inc., \n *  59 Temple Place, Suite 330, Boston, MA 02111-1307 USA\n */\npackage org.pdfsam.console.utils;\n\nimport java.io.File;\nimport java.io.FileInputStream;\nimport java.io.FileOutputStream;\nimport java.nio.MappedByteBuffer;\nimport java.nio.channels.FileChannel;\nimport java.util.ArrayList;\nimport java.util.Collection;\nimport java.util.Random;\nimport org.apache.log4j.Logger;\nimport org.pdfsam.console.business.dto.PdfFile;\nimport org.pdfsam.console.exceptions.console.ConsoleException;\n\n/**\n * Utility class for file handling\n *\n * @author Andrea Vacondio\n */\npublic final class FileUtility {\n\n    private static final Logger LOG = Logger.getLogger(FileUtility.class.getPackage().getName());\n\n    public static final String BUFFER_NAME = \"PDFsamTMPbuffer\";\n\n    private FileUtility() {\n        // no constructor\n    }\n\n    /**\n     * Generates a not existing temporary file\n     *\n     * @param filePath\n     *            path where the temporary file is created\n     * @return a temporary file\n     */\n    public static File generateTmpFile(String filePath) {\n        LOG.debug(\"Creating temporary file..\");\n        File retVal = null;\n        boolean alreadyExists = true;\n        int enthropy = 0;\n        String fileName = \"\";\n        // generates a random 4 char string\n        StringBuffer randomString = new StringBuffer();\n        Random random = new Random();\n        for (int i = 0; i < 5; i++) {\n            char ascii = (char) ((random.nextInt(26)) + 'A');\n            randomString.append(ascii);\n        }\n        while (alreadyExists) {\n            fileName = FileUtility.BUFFER_NAME + randomString + Integer.toString(++enthropy) + \".pdf\";\n            File tmpFile = new File(filePath + File.separator + fileName);\n            if (!(alreadyExists = tmpFile.exists())) {\n                retVal = tmpFile;\n            }\n        }\n        return retVal;\n    }\n\n    /**\n     * @param filename\n     *            filename or directory name\n     * @return a random file generated in directory or in the containing directory of filename\n     */\n    public static File generateTmpFile(File filename) {\n        File retVal = null;\n        if (filename != null) {\n            if (filename.isDirectory()) {\n                retVal = generateTmpFile(filename.getPath());\n            } else {\n                retVal = generateTmpFile(filename.getParent());\n            }\n        }\n        return retVal;\n    }\n\n    /**\n     * rename temporary file to output file\n     *\n     * @param tmpFile\n     *            temporary file to rename\n     * @param outputFile\n     *            file to rename to\n     * @param overwrite\n     *            overwrite existing file\n     */\n    public static void renameTemporaryFile(File tmpFile, File outputFile, boolean overwrite) throws ConsoleException {\n        if (tmpFile != null && outputFile != null) {\n            if (outputFile.exists()) {\n                // check if overwrite is allowed\n                if (overwrite) {\n                    if (outputFile.delete()) {\n                        renameFile(tmpFile, outputFile);\n                    } else {\n                        throw new ConsoleException(ConsoleException.UNABLE_TO_OVERWRITE, new String[] { tmpFile.getName() });\n                    }\n                } else {\n                    throw new ConsoleException(ConsoleException.OVERWRITE_IS_FALSE, new String[] { tmpFile.getName() });\n                }\n            } else {\n                renameFile(tmpFile, outputFile);\n            }\n        } else {\n            LOG.error(\"Exception renaming temporary file, source or destination are null.\");\n        }\n    }\n\n    /**\n     * Rename the file\n     *\n     * @param tmpFile\n     * @param outputFile\n     * @throws ConsoleException\n     *             if an error occur\n     */\n    private static void renameFile(File tmpFile, File outputFile) throws ConsoleException {\n        if (!tmpFile.renameTo(outputFile)) {\n            throw new ConsoleException(ConsoleException.UNABLE_TO_RENAME, new String[] { tmpFile.getName(), outputFile.getName() });\n        }\n    }\n\n    /**\n     * deletes the file\n     *\n     * @param tmpFile\n     * @return true if file is deleted\n     */\n    public static boolean deleteFile(File tmpFile) {\n        boolean retVal = false;\n        try {\n            if (!tmpFile.delete()) {\n                LOG.error(\"Unable to delete file \" + tmpFile.getName());\n            }\n        } catch (Exception e) {\n            LOG.error(\"Unable to delete file \" + tmpFile.getName(), e);\n        }\n        return retVal;\n    }\n\n    /**\n     * copy source to dest\n     *\n     * @param source\n     * @param dest\n     */\n    public static void copyFile(File source, File dest) {\n        FileChannel in = null;\n        FileChannel out = null;\n        try {\n            in = new FileInputStream(source).getChannel();\n            out = new FileOutputStream(dest).getChannel();\n            long size = in.size();\n            MappedByteBuffer buf = in.map(FileChannel.MapMode.READ_ONLY, 0, size);\n            out.write(buf);\n            if (in != null) {\n                in.close();\n            }\n            if (out != null) {\n                out.close();\n            }\n        } catch (Exception e) {\n            LOG.error(\"Unable to copy \" + source + \" to \" + dest);\n        }\n    }\n\n    /**\n     * Mapping from jcmdline.dto.PdfFile to org.pdfsam.console.business.dto.PdfFile\n     *\n     * @param pdfFile\n     * @return a PdfFile\n     */\n    public static PdfFile getPdfFile(jcmdline.dto.PdfFile pdfFile) {\n        return new PdfFile(pdfFile.getFile(), pdfFile.getPassword());\n    }\n\n    /**\n     * Mapping from an array of jcmdline.dto.PdfFile to an array of org.pdfsam.console.business.dto.PdfFile\n     *\n     * @param pdfFiles\n     * @return a PdfFile[]\n     */\n    public static PdfFile[] getPdfFiles(jcmdline.dto.PdfFile[] pdfFiles) {\n        ArrayList retVal = new ArrayList();\n        for (int i = 0; i < pdfFiles.length; i++) {\n            retVal.add(new PdfFile(pdfFiles[i].getFile(), pdfFiles[i].getPassword()));\n        }\n        return (PdfFile[]) retVal.toArray(new PdfFile[pdfFiles.length]);\n    }\n\n    /**\n     * Mapping from a Collection of jcmdline.dto.PdfFile to an array of org.pdfsam.console.business.dto.PdfFile\n     *\n     * @param pdfFiles\n     * @return a PdfFile[]\n     */\n    public static PdfFile[] getPdfFiles(Collection pdfFiles) {\n        return getPdfFiles((jcmdline.dto.PdfFile[]) pdfFiles.toArray(new jcmdline.dto.PdfFile[pdfFiles.size()]));\n    }\n}\n",
		"id": "EvoSuiteBenchmark/109_pdfsam/src/main/java/org/pdfsam/console/utils/FileUtilityTest4.java",
		"test_prompt": "// FileUtilityTest4.java\npackage org.pdfsam.console.utils;\n\nimport java.io.File;\nimport java.io.FileInputStream;\nimport java.io.FileOutputStream;\nimport java.nio.MappedByteBuffer;\nimport java.nio.channels.FileChannel;\nimport java.util.ArrayList;\nimport java.util.Collection;\nimport java.util.Random;\nimport org.apache.log4j.Logger;\nimport org.pdfsam.console.business.dto.PdfFile;\nimport org.pdfsam.console.exceptions.console.ConsoleException;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link FileUtility}.\n* It contains ten unit test cases for the {@link FileUtility#getPdfFiles(jcmdline.dto.PdfFile[])} method.\n*/\nclass FileUtilityTest4 {"
	},
	{
		"original_code": "// FileUtility.java\n/*\n * Created on 21-oct-2007\n * Copyright (C) 2006 by Andrea Vacondio.\n *\n *\n * This library is provided under dual licenses.\n * You may choose the terms of the Lesser General Public License version 2.1 or the General Public License version 2\n * License at your discretion.\n * \n * \n * This library is free software; you can redistribute it and/or\n * modify it under the terms of the GNU Lesser General Public\n * License as published by the Free Software Foundation;\n * version 2.1 of the License.\n * \n * This library is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n * Lesser General Public License for more details.\n * \n * You should have received a copy of the GNU Lesser General Public\n * License along with this library; if not, write to the Free Software\n * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA\n * \n * \n * \n * This program is free software; you can redistribute it and/or modify it under the terms of the \n * GNU General Public License as published by the Free Software Foundation; \n * either version 2 of the License.\n * \n * This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; \n * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. \n * See the GNU General Public License for more details.\n * You should have received a copy of the GNU General Public License along with this program; \n * if not, write to the Free Software Foundation, Inc., \n *  59 Temple Place, Suite 330, Boston, MA 02111-1307 USA\n */\npackage org.pdfsam.console.utils;\n\nimport java.io.File;\nimport java.io.FileInputStream;\nimport java.io.FileOutputStream;\nimport java.nio.MappedByteBuffer;\nimport java.nio.channels.FileChannel;\nimport java.util.ArrayList;\nimport java.util.Collection;\nimport java.util.Random;\nimport org.apache.log4j.Logger;\nimport org.pdfsam.console.business.dto.PdfFile;\nimport org.pdfsam.console.exceptions.console.ConsoleException;\n\n/**\n * Utility class for file handling\n *\n * @author Andrea Vacondio\n */\npublic final class FileUtility {\n\n    private static final Logger LOG = Logger.getLogger(FileUtility.class.getPackage().getName());\n\n    public static final String BUFFER_NAME = \"PDFsamTMPbuffer\";\n\n    private FileUtility() {\n        // no constructor\n    }\n\n    /**\n     * Generates a not existing temporary file\n     *\n     * @param filePath\n     *            path where the temporary file is created\n     * @return a temporary file\n     */\n    public static File generateTmpFile(String filePath) {\n        LOG.debug(\"Creating temporary file..\");\n        File retVal = null;\n        boolean alreadyExists = true;\n        int enthropy = 0;\n        String fileName = \"\";\n        // generates a random 4 char string\n        StringBuffer randomString = new StringBuffer();\n        Random random = new Random();\n        for (int i = 0; i < 5; i++) {\n            char ascii = (char) ((random.nextInt(26)) + 'A');\n            randomString.append(ascii);\n        }\n        while (alreadyExists) {\n            fileName = FileUtility.BUFFER_NAME + randomString + Integer.toString(++enthropy) + \".pdf\";\n            File tmpFile = new File(filePath + File.separator + fileName);\n            if (!(alreadyExists = tmpFile.exists())) {\n                retVal = tmpFile;\n            }\n        }\n        return retVal;\n    }\n\n    /**\n     * @param filename\n     *            filename or directory name\n     * @return a random file generated in directory or in the containing directory of filename\n     */\n    public static File generateTmpFile(File filename) {\n        File retVal = null;\n        if (filename != null) {\n            if (filename.isDirectory()) {\n                retVal = generateTmpFile(filename.getPath());\n            } else {\n                retVal = generateTmpFile(filename.getParent());\n            }\n        }\n        return retVal;\n    }\n\n    /**\n     * rename temporary file to output file\n     *\n     * @param tmpFile\n     *            temporary file to rename\n     * @param outputFile\n     *            file to rename to\n     * @param overwrite\n     *            overwrite existing file\n     */\n    public static void renameTemporaryFile(File tmpFile, File outputFile, boolean overwrite) throws ConsoleException {\n        if (tmpFile != null && outputFile != null) {\n            if (outputFile.exists()) {\n                // check if overwrite is allowed\n                if (overwrite) {\n                    if (outputFile.delete()) {\n                        renameFile(tmpFile, outputFile);\n                    } else {\n                        throw new ConsoleException(ConsoleException.UNABLE_TO_OVERWRITE, new String[] { tmpFile.getName() });\n                    }\n                } else {\n                    throw new ConsoleException(ConsoleException.OVERWRITE_IS_FALSE, new String[] { tmpFile.getName() });\n                }\n            } else {\n                renameFile(tmpFile, outputFile);\n            }\n        } else {\n            LOG.error(\"Exception renaming temporary file, source or destination are null.\");\n        }\n    }\n\n    /**\n     * Rename the file\n     *\n     * @param tmpFile\n     * @param outputFile\n     * @throws ConsoleException\n     *             if an error occur\n     */\n    private static void renameFile(File tmpFile, File outputFile) throws ConsoleException {\n        if (!tmpFile.renameTo(outputFile)) {\n            throw new ConsoleException(ConsoleException.UNABLE_TO_RENAME, new String[] { tmpFile.getName(), outputFile.getName() });\n        }\n    }\n\n    /**\n     * deletes the file\n     *\n     * @param tmpFile\n     * @return true if file is deleted\n     */\n    public static boolean deleteFile(File tmpFile) {\n        boolean retVal = false;\n        try {\n            if (!tmpFile.delete()) {\n                LOG.error(\"Unable to delete file \" + tmpFile.getName());\n            }\n        } catch (Exception e) {\n            LOG.error(\"Unable to delete file \" + tmpFile.getName(), e);\n        }\n        return retVal;\n    }\n\n    /**\n     * copy source to dest\n     *\n     * @param source\n     * @param dest\n     */\n    public static void copyFile(File source, File dest) {\n        FileChannel in = null;\n        FileChannel out = null;\n        try {\n            in = new FileInputStream(source).getChannel();\n            out = new FileOutputStream(dest).getChannel();\n            long size = in.size();\n            MappedByteBuffer buf = in.map(FileChannel.MapMode.READ_ONLY, 0, size);\n            out.write(buf);\n            if (in != null) {\n                in.close();\n            }\n            if (out != null) {\n                out.close();\n            }\n        } catch (Exception e) {\n            LOG.error(\"Unable to copy \" + source + \" to \" + dest);\n        }\n    }\n\n    /**\n     * Mapping from jcmdline.dto.PdfFile to org.pdfsam.console.business.dto.PdfFile\n     *\n     * @param pdfFile\n     * @return a PdfFile\n     */\n    public static PdfFile getPdfFile(jcmdline.dto.PdfFile pdfFile) {\n        return new PdfFile(pdfFile.getFile(), pdfFile.getPassword());\n    }\n\n    /**\n     * Mapping from an array of jcmdline.dto.PdfFile to an array of org.pdfsam.console.business.dto.PdfFile\n     *\n     * @param pdfFiles\n     * @return a PdfFile[]\n     */\n    public static PdfFile[] getPdfFiles(jcmdline.dto.PdfFile[] pdfFiles) {\n        ArrayList retVal = new ArrayList();\n        for (int i = 0; i < pdfFiles.length; i++) {\n            retVal.add(new PdfFile(pdfFiles[i].getFile(), pdfFiles[i].getPassword()));\n        }\n        return (PdfFile[]) retVal.toArray(new PdfFile[pdfFiles.length]);\n    }\n\n    /**\n     * Mapping from a Collection of jcmdline.dto.PdfFile to an array of org.pdfsam.console.business.dto.PdfFile\n     *\n     * @param pdfFiles\n     * @return a PdfFile[]\n     */\n    public static PdfFile[] getPdfFiles(Collection pdfFiles) {\n        return getPdfFiles((jcmdline.dto.PdfFile[]) pdfFiles.toArray(new jcmdline.dto.PdfFile[pdfFiles.size()]));\n    }\n}\n",
		"id": "EvoSuiteBenchmark/109_pdfsam/src/main/java/org/pdfsam/console/utils/FileUtilityTest5.java",
		"test_prompt": "// FileUtilityTest5.java\npackage org.pdfsam.console.utils;\n\nimport java.io.File;\nimport java.io.FileInputStream;\nimport java.io.FileOutputStream;\nimport java.nio.MappedByteBuffer;\nimport java.nio.channels.FileChannel;\nimport java.util.ArrayList;\nimport java.util.Collection;\nimport java.util.Random;\nimport org.apache.log4j.Logger;\nimport org.pdfsam.console.business.dto.PdfFile;\nimport org.pdfsam.console.exceptions.console.ConsoleException;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link FileUtility}.\n* It contains ten unit test cases for the {@link FileUtility#getPdfFiles(Collection)} method.\n*/\nclass FileUtilityTest5 {"
	},
	{
		"original_code": "// ValidationUtility.java\n/*\n * Created on 25-Jul-2009\n * Copyright (C) 2009 by Andrea Vacondio.\n *\n *\n * This library is provided under dual licenses.\n * You may choose the terms of the Lesser General Public License version 2.1 or the General Public License version 2\n * License at your discretion.\n * \n * \n * This library is free software; you can redistribute it and/or\n * modify it under the terms of the GNU Lesser General Public\n * License as published by the Free Software Foundation;\n * version 2.1 of the License.\n * \n * This library is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n * Lesser General Public License for more details.\n * \n * You should have received a copy of the GNU Lesser General Public\n * License along with this library; if not, write to the Free Software\n * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA\n * \n * \n * \n * This program is free software; you can redistribute it and/or modify it under the terms of the \n * GNU General Public License as published by the Free Software Foundation; \n * either version 2 of the License.\n * \n * This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; \n * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. \n * See the GNU General Public License for more details.\n * You should have received a copy of the GNU General Public License along with this program; \n * if not, write to the Free Software Foundation, Inc., \n *  59 Temple Place, Suite 330, Boston, MA 02111-1307 USA\n */\npackage org.pdfsam.console.utils;\n\nimport java.io.File;\nimport java.util.ArrayList;\nimport java.util.List;\nimport java.util.regex.Pattern;\nimport org.apache.commons.lang.ArrayUtils;\nimport org.apache.log4j.Logger;\nimport org.pdfsam.console.business.dto.Bounds;\nimport org.pdfsam.console.business.dto.PageLabel;\nimport org.pdfsam.console.business.dto.PageRotation;\nimport org.pdfsam.console.exceptions.console.ValidationException;\n\n/**\n * Utility for the arguments validation\n * @author Andrea Vacondio\n */\npublic final class ValidationUtility {\n\n    private static final Logger LOG = Logger.getLogger(ValidationUtility.class.getPackage().getName());\n\n    public static final String ALL_STRING = \"all\";\n\n    public static final String ODD_STRING = \"odd\";\n\n    public static final String EVEN_STRING = \"even\";\n\n    private static final String SELECTION_REGEXP = \"(?:(?:[\\\\d]+[-]?[\\\\d]*)(?:,(?:[\\\\d]+[-]?[\\\\d]*))*)+\";\n\n    public static final String PDF_EXTENSION = \".pdf\";\n\n    private ValidationUtility() {\n        // no constructor\n    }\n\n    /**\n     * all, odd and even pages rotation cannot be mixed together or with single pages rotations\n     * @param inputString\n     *        the input command line string for the -r param\n     * @param allowSinglePagesRotation\n     *        if true single pages rotation are allowd, if false only all, odd end even pages rotations are allowed\n     * @return the rotations array\n     * @throws ValidationException\n     */\n    public static PageRotation[] getPagesRotation(final String inputString, final boolean allowSinglePagesRotation) throws ValidationException {\n        ArrayList retVal = new ArrayList();\n        try {\n            if (inputString != null && inputString.length() > 0) {\n                String[] rotateParams = inputString.split(\",\");\n                for (int i = 0; i < rotateParams.length; i++) {\n                    String currentRotation = rotateParams[i];\n                    if (currentRotation.length() > 3) {\n                        String[] rotationParams = currentRotation.split(\":\");\n                        if (rotationParams.length == 2) {\n                            String pageNumber = rotationParams[0].trim();\n                            int degrees = Integer.parseInt(rotationParams[1]) % 360;\n                            // must be a multiple of 90\n                            if ((degrees % 90) != 0) {\n                                throw new ValidationException(ValidationException.ERR_DEGREES_NOT_ALLOWED, new String[] { Integer.toString(degrees) });\n                            }\n                            // rotate all\n                            if (ALL_STRING.equals(pageNumber)) {\n                                if (!retVal.isEmpty()) {\n                                    LOG.warn(\"Page rotation for every page found, other rotations removed\");\n                                    retVal.clear();\n                                }\n                                retVal.add(new PageRotation(PageRotation.NO_PAGE, degrees, PageRotation.ALL_PAGES));\n                                break;\n                            } else if (ODD_STRING.equals(pageNumber)) {\n                                if (!retVal.isEmpty()) {\n                                    LOG.warn(\"Page rotation for odd pages found, other rotations removed\");\n                                    retVal.clear();\n                                }\n                                retVal.add(new PageRotation(PageRotation.NO_PAGE, degrees, PageRotation.ODD_PAGES));\n                                break;\n                            } else if (EVEN_STRING.equals(pageNumber)) {\n                                if (!retVal.isEmpty()) {\n                                    LOG.warn(\"Page rotation for even pages found, other rotations removed\");\n                                    retVal.clear();\n                                }\n                                retVal.add(new PageRotation(PageRotation.NO_PAGE, degrees, PageRotation.EVEN_PAGES));\n                                break;\n                            } else {\n                                if (allowSinglePagesRotation) {\n                                    retVal.add(new PageRotation(Integer.parseInt(pageNumber), degrees));\n                                }\n                            }\n                        } else {\n                            throw new ValidationException(ValidationException.ERR_PARAM_ROTATION, new String[] { currentRotation });\n                        }\n                    } else {\n                        throw new ValidationException(ValidationException.ERR_PARAM_ROTATION, new String[] { currentRotation });\n                    }\n                }\n            }\n        } catch (Exception e) {\n            throw new ValidationException(ValidationException.ERR_WRONG_ROTATION, e);\n        }\n        return (PageRotation[]) retVal.toArray(new PageRotation[retVal.size()]);\n    }\n\n    /**\n     * @param inputString\n     * @return the PageLabel object resulting by the -l option value\n     */\n    public static PageLabel getPageLabel(final String inputString) throws ValidationException {\n        PageLabel retVal = null;\n        if (inputString != null && inputString.length() > 0) {\n            String[] values = inputString.split(\":\");\n            if (values.length >= 2) {\n                try {\n                    retVal = new PageLabel();\n                    retVal.setPageNumber(Integer.parseInt(values[0]));\n                    if (values.length == 3) {\n                        retVal.setLogicalPageNumber(Integer.parseInt(values[2]));\n                    }\n                } catch (Exception e) {\n                    throw new ValidationException(ValidationException.ERR_WRONG_PAGE_LABEL, new String[] { inputString }, e);\n                }\n                // style\n                retVal.setStyle(getPageLabelStyle(values[1]));\n            } else {\n                throw new ValidationException(ValidationException.ERR_WRONG_PAGE_LABEL, new String[] { inputString });\n            }\n        }\n        return retVal;\n    }\n\n    /**\n     * @param inputString\n     * @return a valid page label style\n     * @throws ValidationException\n     *         if the input string is not a valid label style\n     */\n    private static String getPageLabelStyle(final String inputString) throws ValidationException {\n        String retVal = null;\n        if (inputString != null && inputString.length() > 0) {\n            if (PageLabel.ARABIC.equals(inputString) || PageLabel.EMPTY.equals(inputString) || PageLabel.LLETTER.equals(inputString) || PageLabel.LROMAN.equals(inputString) || PageLabel.ULETTER.equals(inputString) || PageLabel.UROMAN.equals(inputString)) {\n                retVal = inputString;\n            } else {\n                throw new ValidationException(ValidationException.ERR_UNK_LABEL_STYLE, new String[] { inputString });\n            }\n        } else {\n            throw new ValidationException(ValidationException.ERR_UNK_LABEL_STYLE, new String[] { inputString });\n        }\n        return retVal;\n    }\n\n    /**\n     * Overloaded {@link ValidationUtility#getPagesRotation(String, boolean)}. Allow single pages rotation.\n     * @param inputString\n     * @return the rotations array\n     * @throws ValidationException\n     * @see {@link ValidationUtility#getPagesRotation(String, boolean)}\n     */\n    public static PageRotation[] getPagesRotation(final String inputString) throws ValidationException {\n        return getPagesRotation(inputString, true);\n    }\n\n    /**\n     * check if the given file path identifies a pdf format file\n     * @param inputFileName\n     * @throws ValidationException\n     *         if not a pdf format\n     */\n    public static void assertValidPdfExtension(final String inputFileName) throws ValidationException {\n        if (!((inputFileName.toLowerCase().endsWith(PDF_EXTENSION)) && (inputFileName.length() > PDF_EXTENSION.length()))) {\n            throw new ValidationException(ValidationException.ERR_NOT_PDF, new String[] { inputFileName });\n        }\n    }\n\n    /**\n     * check if the given file is a directory\n     * @param inputDir\n     * @throws ValidationException\n     *         if not a directory\n     */\n    public static void assertValidDirectory(File inputDir) throws ValidationException {\n        if (!inputDir.isDirectory()) {\n            throw new ValidationException(ValidationException.ERR_NOT_DIR, new String[] { inputDir.getAbsolutePath() });\n        }\n    }\n\n    /**\n     * validates the selections array. Every array item must be a valid selection string.\n     * @param selections\n     * @throws ValidationException\n     */\n    public static void assertValidPageSelectionsArray(String[] selections) throws ValidationException {\n        if (!isValidPageSelectionsArray(selections)) {\n            throw new ValidationException(ValidationException.ERR_ILLEGAL_U);\n        }\n    }\n\n    /**\n     * validates the selections array\n     * @param selections\n     * @return true if the array is valid\n     */\n    public static boolean isValidPageSelectionsArray(String[] selections) {\n        boolean retVal = true;\n        if (!ArrayUtils.isEmpty(selections)) {\n            Pattern pattern = Pattern.compile(SELECTION_REGEXP, Pattern.CASE_INSENSITIVE);\n            for (int i = 0; i < selections.length; i++) {\n                String currentSelection = selections[i];\n                if (!ALL_STRING.equalsIgnoreCase(currentSelection)) {\n                    if (!(pattern.matcher(currentSelection).matches())) {\n                        retVal = false;\n                        break;\n                    }\n                }\n            }\n        }\n        return retVal;\n    }\n\n    /**\n     * validates the input Bounds object\n     * @param bounds\n     * @param pdfNumberOfPages\n     *        number of total pages\n     * @throws ValidationException\n     */\n    public static void assertValidBounds(Bounds bounds, int pdfNumberOfPages) throws ValidationException {\n        if (bounds.getStart() <= 0) {\n            throw new ValidationException(ValidationException.ERR_NOT_POSITIVE, new String[] { Integer.toString(bounds.getStart()), bounds.toString() });\n        } else if (bounds.getEnd() > pdfNumberOfPages) {\n            throw new ValidationException(ValidationException.ERR_CANNOT_MERGE, new String[] { Integer.toString(bounds.getEnd()) });\n        } else if (bounds.getStart() > bounds.getEnd()) {\n            throw new ValidationException(ValidationException.ERR_START_BIGGER_THAN_END, new String[] { Integer.toString(bounds.getStart()), Integer.toString(bounds.getEnd()), bounds.toString() });\n        }\n    }\n\n    /**\n     * validates the input bounds list ensuring that there is no intersections between the objects of the input list\n     * @param bounds\n     */\n    public static void assertNotIntersectedBoundsList(List bounds) throws ValidationException {\n        for (int i = 0; i < bounds.size(); i++) {\n            Bounds victim = (Bounds) bounds.get(i);\n            for (int j = i + 1; j < bounds.size(); j++) {\n                Bounds current = (Bounds) bounds.get(j);\n                if (victim.intersects(current)) {\n                    throw new ValidationException(ValidationException.ERR_BOUNDS_INTERSECTS, new String[] { victim.toString(), current.toString() });\n                }\n            }\n        }\n    }\n}\n",
		"id": "EvoSuiteBenchmark/109_pdfsam/src/main/java/org/pdfsam/console/utils/ValidationUtilityTest0.java",
		"test_prompt": "// ValidationUtilityTest0.java\npackage org.pdfsam.console.utils;\n\nimport java.io.File;\nimport java.util.ArrayList;\nimport java.util.List;\nimport java.util.regex.Pattern;\nimport org.apache.commons.lang.ArrayUtils;\nimport org.apache.log4j.Logger;\nimport org.pdfsam.console.business.dto.Bounds;\nimport org.pdfsam.console.business.dto.PageLabel;\nimport org.pdfsam.console.business.dto.PageRotation;\nimport org.pdfsam.console.exceptions.console.ValidationException;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link ValidationUtility}.\n* It contains ten unit test cases for the {@link ValidationUtility#getPagesRotation(String, boolean)} method.\n*/\nclass ValidationUtilityTest0 {"
	},
	{
		"original_code": "// ValidationUtility.java\n/*\n * Created on 25-Jul-2009\n * Copyright (C) 2009 by Andrea Vacondio.\n *\n *\n * This library is provided under dual licenses.\n * You may choose the terms of the Lesser General Public License version 2.1 or the General Public License version 2\n * License at your discretion.\n * \n * \n * This library is free software; you can redistribute it and/or\n * modify it under the terms of the GNU Lesser General Public\n * License as published by the Free Software Foundation;\n * version 2.1 of the License.\n * \n * This library is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n * Lesser General Public License for more details.\n * \n * You should have received a copy of the GNU Lesser General Public\n * License along with this library; if not, write to the Free Software\n * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA\n * \n * \n * \n * This program is free software; you can redistribute it and/or modify it under the terms of the \n * GNU General Public License as published by the Free Software Foundation; \n * either version 2 of the License.\n * \n * This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; \n * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. \n * See the GNU General Public License for more details.\n * You should have received a copy of the GNU General Public License along with this program; \n * if not, write to the Free Software Foundation, Inc., \n *  59 Temple Place, Suite 330, Boston, MA 02111-1307 USA\n */\npackage org.pdfsam.console.utils;\n\nimport java.io.File;\nimport java.util.ArrayList;\nimport java.util.List;\nimport java.util.regex.Pattern;\nimport org.apache.commons.lang.ArrayUtils;\nimport org.apache.log4j.Logger;\nimport org.pdfsam.console.business.dto.Bounds;\nimport org.pdfsam.console.business.dto.PageLabel;\nimport org.pdfsam.console.business.dto.PageRotation;\nimport org.pdfsam.console.exceptions.console.ValidationException;\n\n/**\n * Utility for the arguments validation\n * @author Andrea Vacondio\n */\npublic final class ValidationUtility {\n\n    private static final Logger LOG = Logger.getLogger(ValidationUtility.class.getPackage().getName());\n\n    public static final String ALL_STRING = \"all\";\n\n    public static final String ODD_STRING = \"odd\";\n\n    public static final String EVEN_STRING = \"even\";\n\n    private static final String SELECTION_REGEXP = \"(?:(?:[\\\\d]+[-]?[\\\\d]*)(?:,(?:[\\\\d]+[-]?[\\\\d]*))*)+\";\n\n    public static final String PDF_EXTENSION = \".pdf\";\n\n    private ValidationUtility() {\n        // no constructor\n    }\n\n    /**\n     * all, odd and even pages rotation cannot be mixed together or with single pages rotations\n     * @param inputString\n     *        the input command line string for the -r param\n     * @param allowSinglePagesRotation\n     *        if true single pages rotation are allowd, if false only all, odd end even pages rotations are allowed\n     * @return the rotations array\n     * @throws ValidationException\n     */\n    public static PageRotation[] getPagesRotation(final String inputString, final boolean allowSinglePagesRotation) throws ValidationException {\n        ArrayList retVal = new ArrayList();\n        try {\n            if (inputString != null && inputString.length() > 0) {\n                String[] rotateParams = inputString.split(\",\");\n                for (int i = 0; i < rotateParams.length; i++) {\n                    String currentRotation = rotateParams[i];\n                    if (currentRotation.length() > 3) {\n                        String[] rotationParams = currentRotation.split(\":\");\n                        if (rotationParams.length == 2) {\n                            String pageNumber = rotationParams[0].trim();\n                            int degrees = Integer.parseInt(rotationParams[1]) % 360;\n                            // must be a multiple of 90\n                            if ((degrees % 90) != 0) {\n                                throw new ValidationException(ValidationException.ERR_DEGREES_NOT_ALLOWED, new String[] { Integer.toString(degrees) });\n                            }\n                            // rotate all\n                            if (ALL_STRING.equals(pageNumber)) {\n                                if (!retVal.isEmpty()) {\n                                    LOG.warn(\"Page rotation for every page found, other rotations removed\");\n                                    retVal.clear();\n                                }\n                                retVal.add(new PageRotation(PageRotation.NO_PAGE, degrees, PageRotation.ALL_PAGES));\n                                break;\n                            } else if (ODD_STRING.equals(pageNumber)) {\n                                if (!retVal.isEmpty()) {\n                                    LOG.warn(\"Page rotation for odd pages found, other rotations removed\");\n                                    retVal.clear();\n                                }\n                                retVal.add(new PageRotation(PageRotation.NO_PAGE, degrees, PageRotation.ODD_PAGES));\n                                break;\n                            } else if (EVEN_STRING.equals(pageNumber)) {\n                                if (!retVal.isEmpty()) {\n                                    LOG.warn(\"Page rotation for even pages found, other rotations removed\");\n                                    retVal.clear();\n                                }\n                                retVal.add(new PageRotation(PageRotation.NO_PAGE, degrees, PageRotation.EVEN_PAGES));\n                                break;\n                            } else {\n                                if (allowSinglePagesRotation) {\n                                    retVal.add(new PageRotation(Integer.parseInt(pageNumber), degrees));\n                                }\n                            }\n                        } else {\n                            throw new ValidationException(ValidationException.ERR_PARAM_ROTATION, new String[] { currentRotation });\n                        }\n                    } else {\n                        throw new ValidationException(ValidationException.ERR_PARAM_ROTATION, new String[] { currentRotation });\n                    }\n                }\n            }\n        } catch (Exception e) {\n            throw new ValidationException(ValidationException.ERR_WRONG_ROTATION, e);\n        }\n        return (PageRotation[]) retVal.toArray(new PageRotation[retVal.size()]);\n    }\n\n    /**\n     * @param inputString\n     * @return the PageLabel object resulting by the -l option value\n     */\n    public static PageLabel getPageLabel(final String inputString) throws ValidationException {\n        PageLabel retVal = null;\n        if (inputString != null && inputString.length() > 0) {\n            String[] values = inputString.split(\":\");\n            if (values.length >= 2) {\n                try {\n                    retVal = new PageLabel();\n                    retVal.setPageNumber(Integer.parseInt(values[0]));\n                    if (values.length == 3) {\n                        retVal.setLogicalPageNumber(Integer.parseInt(values[2]));\n                    }\n                } catch (Exception e) {\n                    throw new ValidationException(ValidationException.ERR_WRONG_PAGE_LABEL, new String[] { inputString }, e);\n                }\n                // style\n                retVal.setStyle(getPageLabelStyle(values[1]));\n            } else {\n                throw new ValidationException(ValidationException.ERR_WRONG_PAGE_LABEL, new String[] { inputString });\n            }\n        }\n        return retVal;\n    }\n\n    /**\n     * @param inputString\n     * @return a valid page label style\n     * @throws ValidationException\n     *         if the input string is not a valid label style\n     */\n    private static String getPageLabelStyle(final String inputString) throws ValidationException {\n        String retVal = null;\n        if (inputString != null && inputString.length() > 0) {\n            if (PageLabel.ARABIC.equals(inputString) || PageLabel.EMPTY.equals(inputString) || PageLabel.LLETTER.equals(inputString) || PageLabel.LROMAN.equals(inputString) || PageLabel.ULETTER.equals(inputString) || PageLabel.UROMAN.equals(inputString)) {\n                retVal = inputString;\n            } else {\n                throw new ValidationException(ValidationException.ERR_UNK_LABEL_STYLE, new String[] { inputString });\n            }\n        } else {\n            throw new ValidationException(ValidationException.ERR_UNK_LABEL_STYLE, new String[] { inputString });\n        }\n        return retVal;\n    }\n\n    /**\n     * Overloaded {@link ValidationUtility#getPagesRotation(String, boolean)}. Allow single pages rotation.\n     * @param inputString\n     * @return the rotations array\n     * @throws ValidationException\n     * @see {@link ValidationUtility#getPagesRotation(String, boolean)}\n     */\n    public static PageRotation[] getPagesRotation(final String inputString) throws ValidationException {\n        return getPagesRotation(inputString, true);\n    }\n\n    /**\n     * check if the given file path identifies a pdf format file\n     * @param inputFileName\n     * @throws ValidationException\n     *         if not a pdf format\n     */\n    public static void assertValidPdfExtension(final String inputFileName) throws ValidationException {\n        if (!((inputFileName.toLowerCase().endsWith(PDF_EXTENSION)) && (inputFileName.length() > PDF_EXTENSION.length()))) {\n            throw new ValidationException(ValidationException.ERR_NOT_PDF, new String[] { inputFileName });\n        }\n    }\n\n    /**\n     * check if the given file is a directory\n     * @param inputDir\n     * @throws ValidationException\n     *         if not a directory\n     */\n    public static void assertValidDirectory(File inputDir) throws ValidationException {\n        if (!inputDir.isDirectory()) {\n            throw new ValidationException(ValidationException.ERR_NOT_DIR, new String[] { inputDir.getAbsolutePath() });\n        }\n    }\n\n    /**\n     * validates the selections array. Every array item must be a valid selection string.\n     * @param selections\n     * @throws ValidationException\n     */\n    public static void assertValidPageSelectionsArray(String[] selections) throws ValidationException {\n        if (!isValidPageSelectionsArray(selections)) {\n            throw new ValidationException(ValidationException.ERR_ILLEGAL_U);\n        }\n    }\n\n    /**\n     * validates the selections array\n     * @param selections\n     * @return true if the array is valid\n     */\n    public static boolean isValidPageSelectionsArray(String[] selections) {\n        boolean retVal = true;\n        if (!ArrayUtils.isEmpty(selections)) {\n            Pattern pattern = Pattern.compile(SELECTION_REGEXP, Pattern.CASE_INSENSITIVE);\n            for (int i = 0; i < selections.length; i++) {\n                String currentSelection = selections[i];\n                if (!ALL_STRING.equalsIgnoreCase(currentSelection)) {\n                    if (!(pattern.matcher(currentSelection).matches())) {\n                        retVal = false;\n                        break;\n                    }\n                }\n            }\n        }\n        return retVal;\n    }\n\n    /**\n     * validates the input Bounds object\n     * @param bounds\n     * @param pdfNumberOfPages\n     *        number of total pages\n     * @throws ValidationException\n     */\n    public static void assertValidBounds(Bounds bounds, int pdfNumberOfPages) throws ValidationException {\n        if (bounds.getStart() <= 0) {\n            throw new ValidationException(ValidationException.ERR_NOT_POSITIVE, new String[] { Integer.toString(bounds.getStart()), bounds.toString() });\n        } else if (bounds.getEnd() > pdfNumberOfPages) {\n            throw new ValidationException(ValidationException.ERR_CANNOT_MERGE, new String[] { Integer.toString(bounds.getEnd()) });\n        } else if (bounds.getStart() > bounds.getEnd()) {\n            throw new ValidationException(ValidationException.ERR_START_BIGGER_THAN_END, new String[] { Integer.toString(bounds.getStart()), Integer.toString(bounds.getEnd()), bounds.toString() });\n        }\n    }\n\n    /**\n     * validates the input bounds list ensuring that there is no intersections between the objects of the input list\n     * @param bounds\n     */\n    public static void assertNotIntersectedBoundsList(List bounds) throws ValidationException {\n        for (int i = 0; i < bounds.size(); i++) {\n            Bounds victim = (Bounds) bounds.get(i);\n            for (int j = i + 1; j < bounds.size(); j++) {\n                Bounds current = (Bounds) bounds.get(j);\n                if (victim.intersects(current)) {\n                    throw new ValidationException(ValidationException.ERR_BOUNDS_INTERSECTS, new String[] { victim.toString(), current.toString() });\n                }\n            }\n        }\n    }\n}\n",
		"id": "EvoSuiteBenchmark/109_pdfsam/src/main/java/org/pdfsam/console/utils/ValidationUtilityTest1.java",
		"test_prompt": "// ValidationUtilityTest1.java\npackage org.pdfsam.console.utils;\n\nimport java.io.File;\nimport java.util.ArrayList;\nimport java.util.List;\nimport java.util.regex.Pattern;\nimport org.apache.commons.lang.ArrayUtils;\nimport org.apache.log4j.Logger;\nimport org.pdfsam.console.business.dto.Bounds;\nimport org.pdfsam.console.business.dto.PageLabel;\nimport org.pdfsam.console.business.dto.PageRotation;\nimport org.pdfsam.console.exceptions.console.ValidationException;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link ValidationUtility}.\n* It contains ten unit test cases for the {@link ValidationUtility#getPageLabel(String)} method.\n*/\nclass ValidationUtilityTest1 {"
	},
	{
		"original_code": "// ValidationUtility.java\n/*\n * Created on 25-Jul-2009\n * Copyright (C) 2009 by Andrea Vacondio.\n *\n *\n * This library is provided under dual licenses.\n * You may choose the terms of the Lesser General Public License version 2.1 or the General Public License version 2\n * License at your discretion.\n * \n * \n * This library is free software; you can redistribute it and/or\n * modify it under the terms of the GNU Lesser General Public\n * License as published by the Free Software Foundation;\n * version 2.1 of the License.\n * \n * This library is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n * Lesser General Public License for more details.\n * \n * You should have received a copy of the GNU Lesser General Public\n * License along with this library; if not, write to the Free Software\n * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA\n * \n * \n * \n * This program is free software; you can redistribute it and/or modify it under the terms of the \n * GNU General Public License as published by the Free Software Foundation; \n * either version 2 of the License.\n * \n * This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; \n * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. \n * See the GNU General Public License for more details.\n * You should have received a copy of the GNU General Public License along with this program; \n * if not, write to the Free Software Foundation, Inc., \n *  59 Temple Place, Suite 330, Boston, MA 02111-1307 USA\n */\npackage org.pdfsam.console.utils;\n\nimport java.io.File;\nimport java.util.ArrayList;\nimport java.util.List;\nimport java.util.regex.Pattern;\nimport org.apache.commons.lang.ArrayUtils;\nimport org.apache.log4j.Logger;\nimport org.pdfsam.console.business.dto.Bounds;\nimport org.pdfsam.console.business.dto.PageLabel;\nimport org.pdfsam.console.business.dto.PageRotation;\nimport org.pdfsam.console.exceptions.console.ValidationException;\n\n/**\n * Utility for the arguments validation\n * @author Andrea Vacondio\n */\npublic final class ValidationUtility {\n\n    private static final Logger LOG = Logger.getLogger(ValidationUtility.class.getPackage().getName());\n\n    public static final String ALL_STRING = \"all\";\n\n    public static final String ODD_STRING = \"odd\";\n\n    public static final String EVEN_STRING = \"even\";\n\n    private static final String SELECTION_REGEXP = \"(?:(?:[\\\\d]+[-]?[\\\\d]*)(?:,(?:[\\\\d]+[-]?[\\\\d]*))*)+\";\n\n    public static final String PDF_EXTENSION = \".pdf\";\n\n    private ValidationUtility() {\n        // no constructor\n    }\n\n    /**\n     * all, odd and even pages rotation cannot be mixed together or with single pages rotations\n     * @param inputString\n     *        the input command line string for the -r param\n     * @param allowSinglePagesRotation\n     *        if true single pages rotation are allowd, if false only all, odd end even pages rotations are allowed\n     * @return the rotations array\n     * @throws ValidationException\n     */\n    public static PageRotation[] getPagesRotation(final String inputString, final boolean allowSinglePagesRotation) throws ValidationException {\n        ArrayList retVal = new ArrayList();\n        try {\n            if (inputString != null && inputString.length() > 0) {\n                String[] rotateParams = inputString.split(\",\");\n                for (int i = 0; i < rotateParams.length; i++) {\n                    String currentRotation = rotateParams[i];\n                    if (currentRotation.length() > 3) {\n                        String[] rotationParams = currentRotation.split(\":\");\n                        if (rotationParams.length == 2) {\n                            String pageNumber = rotationParams[0].trim();\n                            int degrees = Integer.parseInt(rotationParams[1]) % 360;\n                            // must be a multiple of 90\n                            if ((degrees % 90) != 0) {\n                                throw new ValidationException(ValidationException.ERR_DEGREES_NOT_ALLOWED, new String[] { Integer.toString(degrees) });\n                            }\n                            // rotate all\n                            if (ALL_STRING.equals(pageNumber)) {\n                                if (!retVal.isEmpty()) {\n                                    LOG.warn(\"Page rotation for every page found, other rotations removed\");\n                                    retVal.clear();\n                                }\n                                retVal.add(new PageRotation(PageRotation.NO_PAGE, degrees, PageRotation.ALL_PAGES));\n                                break;\n                            } else if (ODD_STRING.equals(pageNumber)) {\n                                if (!retVal.isEmpty()) {\n                                    LOG.warn(\"Page rotation for odd pages found, other rotations removed\");\n                                    retVal.clear();\n                                }\n                                retVal.add(new PageRotation(PageRotation.NO_PAGE, degrees, PageRotation.ODD_PAGES));\n                                break;\n                            } else if (EVEN_STRING.equals(pageNumber)) {\n                                if (!retVal.isEmpty()) {\n                                    LOG.warn(\"Page rotation for even pages found, other rotations removed\");\n                                    retVal.clear();\n                                }\n                                retVal.add(new PageRotation(PageRotation.NO_PAGE, degrees, PageRotation.EVEN_PAGES));\n                                break;\n                            } else {\n                                if (allowSinglePagesRotation) {\n                                    retVal.add(new PageRotation(Integer.parseInt(pageNumber), degrees));\n                                }\n                            }\n                        } else {\n                            throw new ValidationException(ValidationException.ERR_PARAM_ROTATION, new String[] { currentRotation });\n                        }\n                    } else {\n                        throw new ValidationException(ValidationException.ERR_PARAM_ROTATION, new String[] { currentRotation });\n                    }\n                }\n            }\n        } catch (Exception e) {\n            throw new ValidationException(ValidationException.ERR_WRONG_ROTATION, e);\n        }\n        return (PageRotation[]) retVal.toArray(new PageRotation[retVal.size()]);\n    }\n\n    /**\n     * @param inputString\n     * @return the PageLabel object resulting by the -l option value\n     */\n    public static PageLabel getPageLabel(final String inputString) throws ValidationException {\n        PageLabel retVal = null;\n        if (inputString != null && inputString.length() > 0) {\n            String[] values = inputString.split(\":\");\n            if (values.length >= 2) {\n                try {\n                    retVal = new PageLabel();\n                    retVal.setPageNumber(Integer.parseInt(values[0]));\n                    if (values.length == 3) {\n                        retVal.setLogicalPageNumber(Integer.parseInt(values[2]));\n                    }\n                } catch (Exception e) {\n                    throw new ValidationException(ValidationException.ERR_WRONG_PAGE_LABEL, new String[] { inputString }, e);\n                }\n                // style\n                retVal.setStyle(getPageLabelStyle(values[1]));\n            } else {\n                throw new ValidationException(ValidationException.ERR_WRONG_PAGE_LABEL, new String[] { inputString });\n            }\n        }\n        return retVal;\n    }\n\n    /**\n     * @param inputString\n     * @return a valid page label style\n     * @throws ValidationException\n     *         if the input string is not a valid label style\n     */\n    private static String getPageLabelStyle(final String inputString) throws ValidationException {\n        String retVal = null;\n        if (inputString != null && inputString.length() > 0) {\n            if (PageLabel.ARABIC.equals(inputString) || PageLabel.EMPTY.equals(inputString) || PageLabel.LLETTER.equals(inputString) || PageLabel.LROMAN.equals(inputString) || PageLabel.ULETTER.equals(inputString) || PageLabel.UROMAN.equals(inputString)) {\n                retVal = inputString;\n            } else {\n                throw new ValidationException(ValidationException.ERR_UNK_LABEL_STYLE, new String[] { inputString });\n            }\n        } else {\n            throw new ValidationException(ValidationException.ERR_UNK_LABEL_STYLE, new String[] { inputString });\n        }\n        return retVal;\n    }\n\n    /**\n     * Overloaded {@link ValidationUtility#getPagesRotation(String, boolean)}. Allow single pages rotation.\n     * @param inputString\n     * @return the rotations array\n     * @throws ValidationException\n     * @see {@link ValidationUtility#getPagesRotation(String, boolean)}\n     */\n    public static PageRotation[] getPagesRotation(final String inputString) throws ValidationException {\n        return getPagesRotation(inputString, true);\n    }\n\n    /**\n     * check if the given file path identifies a pdf format file\n     * @param inputFileName\n     * @throws ValidationException\n     *         if not a pdf format\n     */\n    public static void assertValidPdfExtension(final String inputFileName) throws ValidationException {\n        if (!((inputFileName.toLowerCase().endsWith(PDF_EXTENSION)) && (inputFileName.length() > PDF_EXTENSION.length()))) {\n            throw new ValidationException(ValidationException.ERR_NOT_PDF, new String[] { inputFileName });\n        }\n    }\n\n    /**\n     * check if the given file is a directory\n     * @param inputDir\n     * @throws ValidationException\n     *         if not a directory\n     */\n    public static void assertValidDirectory(File inputDir) throws ValidationException {\n        if (!inputDir.isDirectory()) {\n            throw new ValidationException(ValidationException.ERR_NOT_DIR, new String[] { inputDir.getAbsolutePath() });\n        }\n    }\n\n    /**\n     * validates the selections array. Every array item must be a valid selection string.\n     * @param selections\n     * @throws ValidationException\n     */\n    public static void assertValidPageSelectionsArray(String[] selections) throws ValidationException {\n        if (!isValidPageSelectionsArray(selections)) {\n            throw new ValidationException(ValidationException.ERR_ILLEGAL_U);\n        }\n    }\n\n    /**\n     * validates the selections array\n     * @param selections\n     * @return true if the array is valid\n     */\n    public static boolean isValidPageSelectionsArray(String[] selections) {\n        boolean retVal = true;\n        if (!ArrayUtils.isEmpty(selections)) {\n            Pattern pattern = Pattern.compile(SELECTION_REGEXP, Pattern.CASE_INSENSITIVE);\n            for (int i = 0; i < selections.length; i++) {\n                String currentSelection = selections[i];\n                if (!ALL_STRING.equalsIgnoreCase(currentSelection)) {\n                    if (!(pattern.matcher(currentSelection).matches())) {\n                        retVal = false;\n                        break;\n                    }\n                }\n            }\n        }\n        return retVal;\n    }\n\n    /**\n     * validates the input Bounds object\n     * @param bounds\n     * @param pdfNumberOfPages\n     *        number of total pages\n     * @throws ValidationException\n     */\n    public static void assertValidBounds(Bounds bounds, int pdfNumberOfPages) throws ValidationException {\n        if (bounds.getStart() <= 0) {\n            throw new ValidationException(ValidationException.ERR_NOT_POSITIVE, new String[] { Integer.toString(bounds.getStart()), bounds.toString() });\n        } else if (bounds.getEnd() > pdfNumberOfPages) {\n            throw new ValidationException(ValidationException.ERR_CANNOT_MERGE, new String[] { Integer.toString(bounds.getEnd()) });\n        } else if (bounds.getStart() > bounds.getEnd()) {\n            throw new ValidationException(ValidationException.ERR_START_BIGGER_THAN_END, new String[] { Integer.toString(bounds.getStart()), Integer.toString(bounds.getEnd()), bounds.toString() });\n        }\n    }\n\n    /**\n     * validates the input bounds list ensuring that there is no intersections between the objects of the input list\n     * @param bounds\n     */\n    public static void assertNotIntersectedBoundsList(List bounds) throws ValidationException {\n        for (int i = 0; i < bounds.size(); i++) {\n            Bounds victim = (Bounds) bounds.get(i);\n            for (int j = i + 1; j < bounds.size(); j++) {\n                Bounds current = (Bounds) bounds.get(j);\n                if (victim.intersects(current)) {\n                    throw new ValidationException(ValidationException.ERR_BOUNDS_INTERSECTS, new String[] { victim.toString(), current.toString() });\n                }\n            }\n        }\n    }\n}\n",
		"id": "EvoSuiteBenchmark/109_pdfsam/src/main/java/org/pdfsam/console/utils/ValidationUtilityTest2.java",
		"test_prompt": "// ValidationUtilityTest2.java\npackage org.pdfsam.console.utils;\n\nimport java.io.File;\nimport java.util.ArrayList;\nimport java.util.List;\nimport java.util.regex.Pattern;\nimport org.apache.commons.lang.ArrayUtils;\nimport org.apache.log4j.Logger;\nimport org.pdfsam.console.business.dto.Bounds;\nimport org.pdfsam.console.business.dto.PageLabel;\nimport org.pdfsam.console.business.dto.PageRotation;\nimport org.pdfsam.console.exceptions.console.ValidationException;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link ValidationUtility}.\n* It contains ten unit test cases for the {@link ValidationUtility#getPagesRotation(String)} method.\n*/\nclass ValidationUtilityTest2 {"
	},
	{
		"original_code": "// ValidationUtility.java\n/*\n * Created on 25-Jul-2009\n * Copyright (C) 2009 by Andrea Vacondio.\n *\n *\n * This library is provided under dual licenses.\n * You may choose the terms of the Lesser General Public License version 2.1 or the General Public License version 2\n * License at your discretion.\n * \n * \n * This library is free software; you can redistribute it and/or\n * modify it under the terms of the GNU Lesser General Public\n * License as published by the Free Software Foundation;\n * version 2.1 of the License.\n * \n * This library is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n * Lesser General Public License for more details.\n * \n * You should have received a copy of the GNU Lesser General Public\n * License along with this library; if not, write to the Free Software\n * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA\n * \n * \n * \n * This program is free software; you can redistribute it and/or modify it under the terms of the \n * GNU General Public License as published by the Free Software Foundation; \n * either version 2 of the License.\n * \n * This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; \n * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. \n * See the GNU General Public License for more details.\n * You should have received a copy of the GNU General Public License along with this program; \n * if not, write to the Free Software Foundation, Inc., \n *  59 Temple Place, Suite 330, Boston, MA 02111-1307 USA\n */\npackage org.pdfsam.console.utils;\n\nimport java.io.File;\nimport java.util.ArrayList;\nimport java.util.List;\nimport java.util.regex.Pattern;\nimport org.apache.commons.lang.ArrayUtils;\nimport org.apache.log4j.Logger;\nimport org.pdfsam.console.business.dto.Bounds;\nimport org.pdfsam.console.business.dto.PageLabel;\nimport org.pdfsam.console.business.dto.PageRotation;\nimport org.pdfsam.console.exceptions.console.ValidationException;\n\n/**\n * Utility for the arguments validation\n * @author Andrea Vacondio\n */\npublic final class ValidationUtility {\n\n    private static final Logger LOG = Logger.getLogger(ValidationUtility.class.getPackage().getName());\n\n    public static final String ALL_STRING = \"all\";\n\n    public static final String ODD_STRING = \"odd\";\n\n    public static final String EVEN_STRING = \"even\";\n\n    private static final String SELECTION_REGEXP = \"(?:(?:[\\\\d]+[-]?[\\\\d]*)(?:,(?:[\\\\d]+[-]?[\\\\d]*))*)+\";\n\n    public static final String PDF_EXTENSION = \".pdf\";\n\n    private ValidationUtility() {\n        // no constructor\n    }\n\n    /**\n     * all, odd and even pages rotation cannot be mixed together or with single pages rotations\n     * @param inputString\n     *        the input command line string for the -r param\n     * @param allowSinglePagesRotation\n     *        if true single pages rotation are allowd, if false only all, odd end even pages rotations are allowed\n     * @return the rotations array\n     * @throws ValidationException\n     */\n    public static PageRotation[] getPagesRotation(final String inputString, final boolean allowSinglePagesRotation) throws ValidationException {\n        ArrayList retVal = new ArrayList();\n        try {\n            if (inputString != null && inputString.length() > 0) {\n                String[] rotateParams = inputString.split(\",\");\n                for (int i = 0; i < rotateParams.length; i++) {\n                    String currentRotation = rotateParams[i];\n                    if (currentRotation.length() > 3) {\n                        String[] rotationParams = currentRotation.split(\":\");\n                        if (rotationParams.length == 2) {\n                            String pageNumber = rotationParams[0].trim();\n                            int degrees = Integer.parseInt(rotationParams[1]) % 360;\n                            // must be a multiple of 90\n                            if ((degrees % 90) != 0) {\n                                throw new ValidationException(ValidationException.ERR_DEGREES_NOT_ALLOWED, new String[] { Integer.toString(degrees) });\n                            }\n                            // rotate all\n                            if (ALL_STRING.equals(pageNumber)) {\n                                if (!retVal.isEmpty()) {\n                                    LOG.warn(\"Page rotation for every page found, other rotations removed\");\n                                    retVal.clear();\n                                }\n                                retVal.add(new PageRotation(PageRotation.NO_PAGE, degrees, PageRotation.ALL_PAGES));\n                                break;\n                            } else if (ODD_STRING.equals(pageNumber)) {\n                                if (!retVal.isEmpty()) {\n                                    LOG.warn(\"Page rotation for odd pages found, other rotations removed\");\n                                    retVal.clear();\n                                }\n                                retVal.add(new PageRotation(PageRotation.NO_PAGE, degrees, PageRotation.ODD_PAGES));\n                                break;\n                            } else if (EVEN_STRING.equals(pageNumber)) {\n                                if (!retVal.isEmpty()) {\n                                    LOG.warn(\"Page rotation for even pages found, other rotations removed\");\n                                    retVal.clear();\n                                }\n                                retVal.add(new PageRotation(PageRotation.NO_PAGE, degrees, PageRotation.EVEN_PAGES));\n                                break;\n                            } else {\n                                if (allowSinglePagesRotation) {\n                                    retVal.add(new PageRotation(Integer.parseInt(pageNumber), degrees));\n                                }\n                            }\n                        } else {\n                            throw new ValidationException(ValidationException.ERR_PARAM_ROTATION, new String[] { currentRotation });\n                        }\n                    } else {\n                        throw new ValidationException(ValidationException.ERR_PARAM_ROTATION, new String[] { currentRotation });\n                    }\n                }\n            }\n        } catch (Exception e) {\n            throw new ValidationException(ValidationException.ERR_WRONG_ROTATION, e);\n        }\n        return (PageRotation[]) retVal.toArray(new PageRotation[retVal.size()]);\n    }\n\n    /**\n     * @param inputString\n     * @return the PageLabel object resulting by the -l option value\n     */\n    public static PageLabel getPageLabel(final String inputString) throws ValidationException {\n        PageLabel retVal = null;\n        if (inputString != null && inputString.length() > 0) {\n            String[] values = inputString.split(\":\");\n            if (values.length >= 2) {\n                try {\n                    retVal = new PageLabel();\n                    retVal.setPageNumber(Integer.parseInt(values[0]));\n                    if (values.length == 3) {\n                        retVal.setLogicalPageNumber(Integer.parseInt(values[2]));\n                    }\n                } catch (Exception e) {\n                    throw new ValidationException(ValidationException.ERR_WRONG_PAGE_LABEL, new String[] { inputString }, e);\n                }\n                // style\n                retVal.setStyle(getPageLabelStyle(values[1]));\n            } else {\n                throw new ValidationException(ValidationException.ERR_WRONG_PAGE_LABEL, new String[] { inputString });\n            }\n        }\n        return retVal;\n    }\n\n    /**\n     * @param inputString\n     * @return a valid page label style\n     * @throws ValidationException\n     *         if the input string is not a valid label style\n     */\n    private static String getPageLabelStyle(final String inputString) throws ValidationException {\n        String retVal = null;\n        if (inputString != null && inputString.length() > 0) {\n            if (PageLabel.ARABIC.equals(inputString) || PageLabel.EMPTY.equals(inputString) || PageLabel.LLETTER.equals(inputString) || PageLabel.LROMAN.equals(inputString) || PageLabel.ULETTER.equals(inputString) || PageLabel.UROMAN.equals(inputString)) {\n                retVal = inputString;\n            } else {\n                throw new ValidationException(ValidationException.ERR_UNK_LABEL_STYLE, new String[] { inputString });\n            }\n        } else {\n            throw new ValidationException(ValidationException.ERR_UNK_LABEL_STYLE, new String[] { inputString });\n        }\n        return retVal;\n    }\n\n    /**\n     * Overloaded {@link ValidationUtility#getPagesRotation(String, boolean)}. Allow single pages rotation.\n     * @param inputString\n     * @return the rotations array\n     * @throws ValidationException\n     * @see {@link ValidationUtility#getPagesRotation(String, boolean)}\n     */\n    public static PageRotation[] getPagesRotation(final String inputString) throws ValidationException {\n        return getPagesRotation(inputString, true);\n    }\n\n    /**\n     * check if the given file path identifies a pdf format file\n     * @param inputFileName\n     * @throws ValidationException\n     *         if not a pdf format\n     */\n    public static void assertValidPdfExtension(final String inputFileName) throws ValidationException {\n        if (!((inputFileName.toLowerCase().endsWith(PDF_EXTENSION)) && (inputFileName.length() > PDF_EXTENSION.length()))) {\n            throw new ValidationException(ValidationException.ERR_NOT_PDF, new String[] { inputFileName });\n        }\n    }\n\n    /**\n     * check if the given file is a directory\n     * @param inputDir\n     * @throws ValidationException\n     *         if not a directory\n     */\n    public static void assertValidDirectory(File inputDir) throws ValidationException {\n        if (!inputDir.isDirectory()) {\n            throw new ValidationException(ValidationException.ERR_NOT_DIR, new String[] { inputDir.getAbsolutePath() });\n        }\n    }\n\n    /**\n     * validates the selections array. Every array item must be a valid selection string.\n     * @param selections\n     * @throws ValidationException\n     */\n    public static void assertValidPageSelectionsArray(String[] selections) throws ValidationException {\n        if (!isValidPageSelectionsArray(selections)) {\n            throw new ValidationException(ValidationException.ERR_ILLEGAL_U);\n        }\n    }\n\n    /**\n     * validates the selections array\n     * @param selections\n     * @return true if the array is valid\n     */\n    public static boolean isValidPageSelectionsArray(String[] selections) {\n        boolean retVal = true;\n        if (!ArrayUtils.isEmpty(selections)) {\n            Pattern pattern = Pattern.compile(SELECTION_REGEXP, Pattern.CASE_INSENSITIVE);\n            for (int i = 0; i < selections.length; i++) {\n                String currentSelection = selections[i];\n                if (!ALL_STRING.equalsIgnoreCase(currentSelection)) {\n                    if (!(pattern.matcher(currentSelection).matches())) {\n                        retVal = false;\n                        break;\n                    }\n                }\n            }\n        }\n        return retVal;\n    }\n\n    /**\n     * validates the input Bounds object\n     * @param bounds\n     * @param pdfNumberOfPages\n     *        number of total pages\n     * @throws ValidationException\n     */\n    public static void assertValidBounds(Bounds bounds, int pdfNumberOfPages) throws ValidationException {\n        if (bounds.getStart() <= 0) {\n            throw new ValidationException(ValidationException.ERR_NOT_POSITIVE, new String[] { Integer.toString(bounds.getStart()), bounds.toString() });\n        } else if (bounds.getEnd() > pdfNumberOfPages) {\n            throw new ValidationException(ValidationException.ERR_CANNOT_MERGE, new String[] { Integer.toString(bounds.getEnd()) });\n        } else if (bounds.getStart() > bounds.getEnd()) {\n            throw new ValidationException(ValidationException.ERR_START_BIGGER_THAN_END, new String[] { Integer.toString(bounds.getStart()), Integer.toString(bounds.getEnd()), bounds.toString() });\n        }\n    }\n\n    /**\n     * validates the input bounds list ensuring that there is no intersections between the objects of the input list\n     * @param bounds\n     */\n    public static void assertNotIntersectedBoundsList(List bounds) throws ValidationException {\n        for (int i = 0; i < bounds.size(); i++) {\n            Bounds victim = (Bounds) bounds.get(i);\n            for (int j = i + 1; j < bounds.size(); j++) {\n                Bounds current = (Bounds) bounds.get(j);\n                if (victim.intersects(current)) {\n                    throw new ValidationException(ValidationException.ERR_BOUNDS_INTERSECTS, new String[] { victim.toString(), current.toString() });\n                }\n            }\n        }\n    }\n}\n",
		"id": "EvoSuiteBenchmark/109_pdfsam/src/main/java/org/pdfsam/console/utils/ValidationUtilityTest3.java",
		"test_prompt": "// ValidationUtilityTest3.java\npackage org.pdfsam.console.utils;\n\nimport java.io.File;\nimport java.util.ArrayList;\nimport java.util.List;\nimport java.util.regex.Pattern;\nimport org.apache.commons.lang.ArrayUtils;\nimport org.apache.log4j.Logger;\nimport org.pdfsam.console.business.dto.Bounds;\nimport org.pdfsam.console.business.dto.PageLabel;\nimport org.pdfsam.console.business.dto.PageRotation;\nimport org.pdfsam.console.exceptions.console.ValidationException;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link ValidationUtility}.\n* It contains ten unit test cases for the {@link ValidationUtility#isValidPageSelectionsArray(String[])} method.\n*/\nclass ValidationUtilityTest3 {"
	},
	{
		"original_code": "// FilenameComparator.java\n/*\r\n * Created on 27-Jan-2009\r\n * Copyright (C) 2009 by Andrea Vacondio.\r\n *\r\n *\r\n * This library is provided under dual licenses.\r\n * You may choose the terms of the Lesser General Public License version 2.1 or the General Public License version 2\r\n * License at your discretion.\r\n * \r\n * \r\n * This library is free software; you can redistribute it and/or\r\n * modify it under the terms of the GNU Lesser General Public\r\n * License as published by the Free Software Foundation;\r\n * version 2.1 of the License.\r\n * \r\n * This library is distributed in the hope that it will be useful,\r\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\r\n * Lesser General Public License for more details.\r\n * \r\n * You should have received a copy of the GNU Lesser General Public\r\n * License along with this library; if not, write to the Free Software\r\n * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA\r\n * \r\n * \r\n * \r\n * This program is free software; you can redistribute it and/or modify it under the terms of the \r\n * GNU General Public License as published by the Free Software Foundation; \r\n * either version 2 of the License.\r\n * \r\n * This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; \r\n * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. \r\n * See the GNU General Public License for more details.\r\n * You should have received a copy of the GNU General Public License along with this program; \r\n * if not, write to the Free Software Foundation, Inc., \r\n *  59 Temple Place, Suite 330, Boston, MA 02111-1307 USA\r\n */\r\npackage org.pdfsam.console.utils;\r\n\r\nimport java.io.File;\r\nimport java.io.Serializable;\r\nimport java.util.Comparator;\r\n\r\n/**\r\n * Comparator for the file names\r\n * @author Andrea Vacondio\r\n */\r\npublic class FilenameComparator implements Comparator, Serializable {\r\n\r\n    private static final long serialVersionUID = 6767839068739066392L;\r\n\r\n    public int compare(Object arg0, Object arg1) {\r\n        if (arg0 == null || arg1 == null) {\r\n            throw new NullPointerException(\"Input files must not be null.\");\r\n        }\r\n        if (!(arg0 instanceof File) || !(arg1 instanceof File)) {\r\n            throw new ClassCastException(\"Input arguments must be File.\");\r\n        }\r\n        return ((File) arg0).compareTo((File) arg1);\r\n    }\r\n}\r\n",
		"id": "EvoSuiteBenchmark/109_pdfsam/src/main/java/org/pdfsam/console/utils/FilenameComparatorTest.java",
		"test_prompt": "// FilenameComparatorTest.java\npackage org.pdfsam.console.utils;\n\nimport java.io.File;\nimport java.io.Serializable;\nimport java.util.Comparator;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link FilenameComparator}.\n* It contains ten unit test cases for the {@link FilenameComparator#compare(Object, Object)} method.\n*/\nclass FilenameComparatorTest {"
	},
	{
		"original_code": "// PdfFilter.java\n/*\r\n * Created on 31-Jan-2008\r\n * Copyright (C) 2008 by Andrea Vacondio.\r\n *\r\n *\r\n * This library is provided under dual licenses.\r\n * You may choose the terms of the Lesser General Public License version 2.1 or the General Public License version 2\r\n * License at your discretion.\r\n * \r\n * \r\n * This library is free software; you can redistribute it and/or\r\n * modify it under the terms of the GNU Lesser General Public\r\n * License as published by the Free Software Foundation;\r\n * version 2.1 of the License.\r\n * \r\n * This library is distributed in the hope that it will be useful,\r\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\r\n * Lesser General Public License for more details.\r\n * \r\n * You should have received a copy of the GNU Lesser General Public\r\n * License along with this library; if not, write to the Free Software\r\n * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA\r\n * \r\n * \r\n * \r\n * This program is free software; you can redistribute it and/or modify it under the terms of the \r\n * GNU General Public License as published by the Free Software Foundation; \r\n * either version 2 of the License.\r\n * \r\n * This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; \r\n * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. \r\n * See the GNU General Public License for more details.\r\n * You should have received a copy of the GNU General Public License along with this program; \r\n * if not, write to the Free Software Foundation, Inc., \r\n *  59 Temple Place, Suite 330, Boston, MA 02111-1307 USA\r\n */\r\npackage org.pdfsam.console.utils;\r\n\r\nimport java.io.File;\r\nimport java.io.FileFilter;\r\n\r\n/**\r\n * Pdf filter\r\n * @author Andrea Vacondio\r\n */\r\npublic class PdfFilter implements FileFilter {\r\n\r\n    private static final String EXTENSION = \"pdf\";\r\n\r\n    public boolean accept(File arg0) {\r\n        boolean retVal = false;\r\n        if (arg0 != null && !arg0.isDirectory()) {\r\n            String extension = getExtension(arg0);\r\n            retVal = EXTENSION.equals(extension);\r\n        }\r\n        return retVal;\r\n    }\r\n\r\n    /**\r\n     * Get the extension of a file.\r\n     */\r\n    public String getExtension(File f) {\r\n        String ext = null;\r\n        String s = f.getName();\r\n        int i = s.lastIndexOf('.');\r\n        if (i > 0 && i < s.length() - 1) {\r\n            ext = s.substring(i + 1).toLowerCase();\r\n        }\r\n        return ext;\r\n    }\r\n}\r\n",
		"id": "EvoSuiteBenchmark/109_pdfsam/src/main/java/org/pdfsam/console/utils/PdfFilterTest.java",
		"test_prompt": "// PdfFilterTest.java\npackage org.pdfsam.console.utils;\n\nimport java.io.File;\nimport java.io.FileFilter;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link PdfFilter}.\n* It contains ten unit test cases for the {@link PdfFilter#accept(File)} method.\n*/\nclass PdfFilterTest {"
	},
	{
		"original_code": "// Configuration.java\n/*\r\n * Created on 21-Dec-2006\r\n * Copyright (C) 2006 by Andrea Vacondio.\r\n *\r\n * This program is free software; you can redistribute it and/or modify it under the terms of the \r\n * GNU General Public License as published by the Free Software Foundation; \r\n * either version 2 of the License.\r\n * This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; \r\n * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. \r\n * See the GNU General Public License for more details.\r\n * You should have received a copy of the GNU General Public License along with this program; \r\n * if not, write to the Free Software Foundation, Inc., \r\n *  59 Temple Place, Suite 330, Boston, MA 02111-1307 USA\r\n */\r\npackage it.pdfsam.configuration;\r\n\r\nimport it.pdfsam.console.MainConsole;\r\nimport it.pdfsam.types.ListItem;\r\nimport it.pdfsam.utils.XMLConfig;\r\nimport java.io.Serializable;\r\nimport java.util.Collections;\r\nimport java.util.List;\r\nimport java.util.ResourceBundle;\r\nimport java.util.Vector;\r\n\r\n/**\r\n * Configuration Singleton\r\n * @author a.vacondio\r\n */\r\npublic class Configuration implements Serializable {\r\n\r\n    private static final long serialVersionUID = -1987140465838537628L;\r\n\r\n    private static Configuration configObject;\r\n\r\n    private ResourceBundle i18n_messages;\r\n\r\n    private XMLConfig xmlConfigObject;\r\n\r\n    private MainConsole mc;\r\n\r\n    private Vector langs;\r\n\r\n    private Configuration() {\r\n        mc = new MainConsole();\r\n    }\r\n\r\n    public static synchronized Configuration getInstance() {\r\n        if (configObject == null) {\r\n            configObject = new Configuration();\r\n        }\r\n        return configObject;\r\n    }\r\n\r\n    /**\r\n     * Sets the language ResourceBundle\r\n     * @param i18n_messages ResourceBundle\r\n     */\r\n    public synchronized void setI18nResourceBundle(ResourceBundle i18n_messages) {\r\n        this.i18n_messages = i18n_messages;\r\n    }\r\n\r\n    /**\r\n     * @return the language ResourceBundle\r\n     */\r\n    public synchronized ResourceBundle getI18nResourceBundle() {\r\n        return i18n_messages;\r\n    }\r\n\r\n    /**\r\n     * @return the XMLConfig\r\n     */\r\n    public synchronized XMLConfig getXmlConfigObject() {\r\n        return xmlConfigObject;\r\n    }\r\n\r\n    /**\r\n     * sets the XMLConfig\r\n     * @param xmlConfigObject\r\n     */\r\n    public synchronized void setXmlConfigObject(XMLConfig xmlConfigObject) {\r\n        this.xmlConfigObject = xmlConfigObject;\r\n    }\r\n\r\n    /**\r\n     * cannot clone a singleton\r\n     */\r\n    public Object clone() throws CloneNotSupportedException {\r\n        throw new CloneNotSupportedException(\"Cannot clone configuration object.\");\r\n    }\r\n\r\n    /**\r\n     * @return the MainConsole\r\n     */\r\n    public MainConsole getMainConsole() {\r\n        return mc;\r\n    }\r\n\r\n    /**\r\n     * @return language list\r\n     */\r\n    public List getLanguagesList() {\r\n        Collections.sort(langs);\r\n        return langs;\r\n    }\r\n\r\n    /**\r\n     * @param languageList languages list\r\n     */\r\n    public synchronized void setLanguageList(Vector languageList) {\r\n        try {\r\n            langs = new Vector(languageList.size(), 1);\r\n            langs.addAll(languageList);\r\n        } catch (Exception e) {\r\n            langs = new Vector(1, 1);\r\n            langs.add(new ListItem(\"en_GB\", \"English\"));\r\n        }\r\n    }\r\n}\r\n",
		"id": "EvoSuiteBenchmark/109_pdfsam/src/main/java/it/pdfsam/configuration/ConfigurationTest0.java",
		"test_prompt": "// ConfigurationTest0.java\npackage it.pdfsam.configuration;\n\nimport it.pdfsam.console.MainConsole;\nimport it.pdfsam.types.ListItem;\nimport it.pdfsam.utils.XMLConfig;\nimport java.io.Serializable;\nimport java.util.Collections;\nimport java.util.List;\nimport java.util.ResourceBundle;\nimport java.util.Vector;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link Configuration}.\n* It contains ten unit test cases for the {@link Configuration#getInstance()} method.\n*/\nclass ConfigurationTest0 {"
	},
	{
		"original_code": "// Configuration.java\n/*\r\n * Created on 21-Dec-2006\r\n * Copyright (C) 2006 by Andrea Vacondio.\r\n *\r\n * This program is free software; you can redistribute it and/or modify it under the terms of the \r\n * GNU General Public License as published by the Free Software Foundation; \r\n * either version 2 of the License.\r\n * This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; \r\n * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. \r\n * See the GNU General Public License for more details.\r\n * You should have received a copy of the GNU General Public License along with this program; \r\n * if not, write to the Free Software Foundation, Inc., \r\n *  59 Temple Place, Suite 330, Boston, MA 02111-1307 USA\r\n */\r\npackage it.pdfsam.configuration;\r\n\r\nimport it.pdfsam.console.MainConsole;\r\nimport it.pdfsam.types.ListItem;\r\nimport it.pdfsam.utils.XMLConfig;\r\nimport java.io.Serializable;\r\nimport java.util.Collections;\r\nimport java.util.List;\r\nimport java.util.ResourceBundle;\r\nimport java.util.Vector;\r\n\r\n/**\r\n * Configuration Singleton\r\n * @author a.vacondio\r\n */\r\npublic class Configuration implements Serializable {\r\n\r\n    private static final long serialVersionUID = -1987140465838537628L;\r\n\r\n    private static Configuration configObject;\r\n\r\n    private ResourceBundle i18n_messages;\r\n\r\n    private XMLConfig xmlConfigObject;\r\n\r\n    private MainConsole mc;\r\n\r\n    private Vector langs;\r\n\r\n    private Configuration() {\r\n        mc = new MainConsole();\r\n    }\r\n\r\n    public static synchronized Configuration getInstance() {\r\n        if (configObject == null) {\r\n            configObject = new Configuration();\r\n        }\r\n        return configObject;\r\n    }\r\n\r\n    /**\r\n     * Sets the language ResourceBundle\r\n     * @param i18n_messages ResourceBundle\r\n     */\r\n    public synchronized void setI18nResourceBundle(ResourceBundle i18n_messages) {\r\n        this.i18n_messages = i18n_messages;\r\n    }\r\n\r\n    /**\r\n     * @return the language ResourceBundle\r\n     */\r\n    public synchronized ResourceBundle getI18nResourceBundle() {\r\n        return i18n_messages;\r\n    }\r\n\r\n    /**\r\n     * @return the XMLConfig\r\n     */\r\n    public synchronized XMLConfig getXmlConfigObject() {\r\n        return xmlConfigObject;\r\n    }\r\n\r\n    /**\r\n     * sets the XMLConfig\r\n     * @param xmlConfigObject\r\n     */\r\n    public synchronized void setXmlConfigObject(XMLConfig xmlConfigObject) {\r\n        this.xmlConfigObject = xmlConfigObject;\r\n    }\r\n\r\n    /**\r\n     * cannot clone a singleton\r\n     */\r\n    public Object clone() throws CloneNotSupportedException {\r\n        throw new CloneNotSupportedException(\"Cannot clone configuration object.\");\r\n    }\r\n\r\n    /**\r\n     * @return the MainConsole\r\n     */\r\n    public MainConsole getMainConsole() {\r\n        return mc;\r\n    }\r\n\r\n    /**\r\n     * @return language list\r\n     */\r\n    public List getLanguagesList() {\r\n        Collections.sort(langs);\r\n        return langs;\r\n    }\r\n\r\n    /**\r\n     * @param languageList languages list\r\n     */\r\n    public synchronized void setLanguageList(Vector languageList) {\r\n        try {\r\n            langs = new Vector(languageList.size(), 1);\r\n            langs.addAll(languageList);\r\n        } catch (Exception e) {\r\n            langs = new Vector(1, 1);\r\n            langs.add(new ListItem(\"en_GB\", \"English\"));\r\n        }\r\n    }\r\n}\r\n",
		"id": "EvoSuiteBenchmark/109_pdfsam/src/main/java/it/pdfsam/configuration/ConfigurationTest1.java",
		"test_prompt": "// ConfigurationTest1.java\npackage it.pdfsam.configuration;\n\nimport it.pdfsam.console.MainConsole;\nimport it.pdfsam.types.ListItem;\nimport it.pdfsam.utils.XMLConfig;\nimport java.io.Serializable;\nimport java.util.Collections;\nimport java.util.List;\nimport java.util.ResourceBundle;\nimport java.util.Vector;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link Configuration}.\n* It contains ten unit test cases for the {@link Configuration#clone()} method.\n*/\nclass ConfigurationTest1 {"
	},
	{
		"original_code": "// ListItem.java\n/*\r\n * Created on 3-mar-2005\r\n * Copyright (C) 2006 by Andrea Vacondio.\r\n *\r\n * This program is free software; you can redistribute it and/or modify it under the terms of the \r\n * GNU General Public License as published by the Free Software Foundation; \r\n * either version 2 of the License.\r\n * This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; \r\n * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. \r\n * See the GNU General Public License for more details.\r\n * You should have received a copy of the GNU General Public License along with this program; \r\n * if not, write to the Free Software Foundation, Inc., \r\n *  59 Temple Place, Suite 330, Boston, MA 02111-1307 USA\r\n */\r\npackage it.pdfsam.types;\r\n\r\n/**\r\n * Utility class used in theme selector\r\n * @author  Andrea Vacondio\r\n * @see     it.pdfsam.utils.ThemeSelector\r\n */\r\npublic class ListItem implements Comparable {\r\n\r\n    private String value;\r\n\r\n    private String id;\r\n\r\n    /**\r\n     * Constructor\r\n     */\r\n    public ListItem() {\r\n        this.value = \"\";\r\n        this.id = \"\";\r\n    }\r\n\r\n    /**\r\n     * Constructor.\r\n     * @param id\r\n     * @param value\r\n     */\r\n    public ListItem(String id, String value) {\r\n        this.value = value;\r\n        this.id = id;\r\n    }\r\n\r\n    /**\r\n     * Constructor.\r\n     * @param id\r\n     * @param value\r\n     */\r\n    public ListItem(int id, String value) {\r\n        try {\r\n            this.value = value;\r\n            this.id = Integer.toString(id);\r\n        } catch (Exception e) {\r\n            this.value = \"\";\r\n            this.id = \"\";\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @return value\r\n     */\r\n    public String getValue() {\r\n        return value;\r\n    }\r\n\r\n    /**\r\n     * @return id\r\n     */\r\n    public String getId() {\r\n        return id;\r\n    }\r\n\r\n    /**\r\n     * sets the <code>inputvalue</code> property\r\n     * @param inputvalue\r\n     */\r\n    public void setValue(String inputvalue) {\r\n        this.value = inputvalue;\r\n    }\r\n\r\n    /**\r\n     * sets the <code>inputid</code> property\r\n     * @param inputid\r\n     */\r\n    public void setId(String inputid) {\r\n        this.id = inputid;\r\n    }\r\n\r\n    /**\r\n     * Compare two objects\r\n     */\r\n    public int compareTo(Object arg0) {\r\n        int retVal = 0;\r\n        if (!(arg0 instanceof ListItem)) {\r\n            throw new ClassCastException(\"ListItem object expected.\");\r\n        } else {\r\n            retVal = this.getValue().compareTo(((ListItem) arg0).getValue());\r\n        }\r\n        return retVal;\r\n    }\r\n}\r\n",
		"id": "EvoSuiteBenchmark/109_pdfsam/src/main/java/it/pdfsam/types/ListItemTest.java",
		"test_prompt": "// ListItemTest.java\npackage it.pdfsam.types;\n\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link ListItem}.\n* It contains ten unit test cases for the {@link ListItem#compareTo(Object)} method.\n*/\nclass ListItemTest {"
	},
	{
		"original_code": "// MergeItemType.java\n/*\r\n * Created on 03-Feb-2006\r\n * Copyright (C) 2006 by Andrea Vacondio.\r\n *\r\n * This program is free software; you can redistribute it and/or modify it under the terms of the \r\n * GNU General Public License as published by the Free Software Foundation; \r\n * either version 2 of the License.\r\n * This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; \r\n * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. \r\n * See the GNU General Public License for more details.\r\n * You should have received a copy of the GNU General Public License along with this program; \r\n * if not, write to the Free Software Foundation, Inc., \r\n *  59 Temple Place, Suite 330, Boston, MA 02111-1307 USA\r\n */\r\npackage it.pdfsam.plugin.merge.type;\r\n\r\n/**\r\n * Item class for Merge table\r\n * @author  Andrea Vacondio\r\n * @see     javax.swing.table.AbstractTableModel\r\n * @see     it.pdfsam.plugin.merge.model.MergeTableModel\r\n */\r\npublic class MergeItemType {\r\n\r\n    private String file_name;\r\n\r\n    private String file_path;\r\n\r\n    private String num_pages;\r\n\r\n    private String page_selection;\r\n\r\n    private boolean encrypted;\r\n\r\n    //colums order\r\n    public final static int FILENAME = it.pdfsam.plugin.merge.model.MergeTableModel.FILENAME;\r\n\r\n    public final static int PATH = it.pdfsam.plugin.merge.model.MergeTableModel.PATH;\r\n\r\n    public final static int PAGES = it.pdfsam.plugin.merge.model.MergeTableModel.PAGES;\r\n\r\n    public final static int PAGESELECTION = it.pdfsam.plugin.merge.model.MergeTableModel.PAGESELECTION;\r\n\r\n    /**\r\n     * Constructor\r\n     */\r\n    public MergeItemType() {\r\n        this.file_name = null;\r\n        this.file_path = null;\r\n        this.num_pages = null;\r\n        this.page_selection = \"all\";\r\n        this.encrypted = false;\r\n    }\r\n\r\n    /**\r\n     * Constructor\r\n     * @param string_rappresentation The string rappresentation of the object\r\n     */\r\n    public MergeItemType(String string_rappresentation) {\r\n        try {\r\n            String[] values = string_rappresentation.split(\"::\");\r\n            this.file_name = values[0];\r\n            this.file_path = values[1];\r\n            this.num_pages = values[2];\r\n            this.page_selection = values[3];\r\n            this.encrypted = Boolean.valueOf(values[4]).booleanValue();\r\n        } catch (Exception e) {\r\n            this.file_name = null;\r\n            this.file_path = null;\r\n            this.num_pages = null;\r\n            this.page_selection = \"all\";\r\n            this.encrypted = false;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Constructor\r\n     * @param f_name File name to show in talbe\r\n     * @param f_path File path to show in table\r\n     * @param n_pages Number of pages of the pdf\r\n     * @param p_selection Page selection to merge\r\n     * @param isencrypted True id pdf encrypted\r\n     */\r\n    public MergeItemType(String f_name, String f_path, String n_pages, String p_selection, boolean isencrypted) {\r\n        this.file_name = f_name;\r\n        this.file_path = f_path;\r\n        this.num_pages = n_pages;\r\n        this.page_selection = p_selection;\r\n        this.encrypted = isencrypted;\r\n    }\r\n\r\n    /**\r\n     * Constructor\r\n     * @param item MergeItemType to duplicate\r\n     */\r\n    public MergeItemType(MergeItemType item) {\r\n        this.file_name = item.getFileName();\r\n        this.file_path = item.getFilePath();\r\n        this.num_pages = item.getNumPages();\r\n        this.page_selection = item.getPageSelection();\r\n        this.encrypted = item.isEncrypted();\r\n    }\r\n\r\n    /**\r\n     * @return Returns the file_name.\r\n     */\r\n    public String getFileName() {\r\n        return file_name;\r\n    }\r\n\r\n    /**\r\n     * @param file_name The file_name to set.\r\n     */\r\n    public void setFileName(String file_name) {\r\n        this.file_name = file_name;\r\n    }\r\n\r\n    /**\r\n     * @return Returns the file_path.\r\n     */\r\n    public String getFilePath() {\r\n        return file_path;\r\n    }\r\n\r\n    /**\r\n     * @param file_path The file_path to set.\r\n     */\r\n    public void setFilePath(String file_path) {\r\n        this.file_path = file_path;\r\n    }\r\n\r\n    /**\r\n     * @param item_number\r\n     * @return item value based on input number\r\n     */\r\n    public String getValue(int item_number) {\r\n        switch(item_number) {\r\n            case FILENAME:\r\n                return getFileName();\r\n            case PATH:\r\n                return getFilePath();\r\n            case PAGES:\r\n                return getNumPages();\r\n            case PAGESELECTION:\r\n                return getPageSelection();\r\n            default:\r\n                return null;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @return Returns a string rappresentation of the object: \"|\" separated.\r\n     */\r\n    /*  public String getStringRappresentation() {\r\n        return this.getFileName()+\"::\"+this.getFilePath()+\"::\"+this.getNumPages()+\"::\"+this.getPageSelection()+\"::\"+Boolean.toString(this.isEncrypted());\r\n    }*/\r\n    /**\r\n     * @return Returns the num_pages.\r\n     */\r\n    public String getNumPages() {\r\n        return num_pages;\r\n    }\r\n\r\n    /**\r\n     * @param num_pages The num_pages to set.\r\n     */\r\n    public void setNumPages(String num_pages) {\r\n        this.num_pages = num_pages;\r\n    }\r\n\r\n    /**\r\n     * @return Returns the encrypted.\r\n     */\r\n    public boolean isEncrypted() {\r\n        return encrypted;\r\n    }\r\n\r\n    /**\r\n     * @param encrypted The encrypted to set.\r\n     */\r\n    public void setEncrypted(boolean encrypted) {\r\n        this.encrypted = encrypted;\r\n    }\r\n\r\n    /**\r\n     * @return Returns the page_selection.\r\n     */\r\n    public String getPageSelection() {\r\n        return page_selection;\r\n    }\r\n\r\n    /**\r\n     * @param page_selection The page_selection to set.\r\n     */\r\n    public void setPageSelection(String page_selection) {\r\n        this.page_selection = page_selection;\r\n    }\r\n}\r\n",
		"id": "EvoSuiteBenchmark/109_pdfsam/src/main/java/it/pdfsam/plugin/merge/type/MergeItemTypeTest.java",
		"test_prompt": "// MergeItemTypeTest.java\npackage it.pdfsam.plugin.merge.type;\n\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link MergeItemType}.\n* It contains ten unit test cases for the {@link MergeItemType#isEncrypted()} method.\n*/\nclass MergeItemTypeTest {"
	},
	{
		"original_code": "// MergeItemTransfer.java\n/*\r\n * Created on 26-May-2006\r\n * \r\n * This program is free software; you can redistribute it and/or modify it under the terms of the \r\n * GNU General Public License as published by the Free Software Foundation; \r\n * either version 2 of the License.\r\n * This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; \r\n * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. \r\n * See the GNU General Public License for more details.\r\n * You should have received a copy of the GNU General Public License along with this program; \r\n * if not, write to the Free Software Foundation, Inc., \r\n *  59 Temple Place, Suite 330, Boston, MA 02111-1307 USA\r\n */\r\npackage it.pdfsam.plugin.merge.type;\r\n\r\nimport java.awt.datatransfer.DataFlavor;\r\nimport java.awt.datatransfer.Transferable;\r\nimport java.awt.datatransfer.UnsupportedFlavorException;\r\nimport java.io.IOException;\r\nimport java.util.ArrayList;\r\nimport javax.swing.JComponent;\r\n\r\n/**\r\n * Class used to transfer MergeItem in drag and drop process.\r\n * @author Andrea Vacondio\r\n * @see it.pdfsam.plugin.merge.type.TableTransferHandler\r\n */\r\npublic class MergeItemTransfer implements Transferable {\r\n\r\n    public static DataFlavor MERGEITEMFLAVOUR;\r\n\r\n    //public static DataFlavor FILELISTFLAVOUR = DataFlavor.javaFileListFlavor;\r\n    static {\r\n        try {\r\n            MERGEITEMFLAVOUR = new DataFlavor(DataFlavor.javaJVMLocalObjectMimeType);\r\n        } catch (Exception ex) {\r\n            ex.printStackTrace();\r\n        }\r\n    }\r\n\r\n    protected JComponent mit_source;\r\n\r\n    protected ArrayList mit_data;\r\n\r\n    public MergeItemTransfer(JComponent source, ArrayList data) {\r\n        mit_source = source;\r\n        mit_data = data;\r\n    }\r\n\r\n    /**\r\n     * @param flavor the DataFlavour\r\n     * @return this transferable\r\n     */\r\n    public Object getTransferData(DataFlavor flavor) throws UnsupportedFlavorException, IOException {\r\n        if (!isDataFlavorSupported(flavor)) {\r\n            throw new UnsupportedFlavorException(flavor);\r\n        }\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * @return true if flavour is supported\r\n     */\r\n    public boolean isDataFlavorSupported(DataFlavor flavor) {\r\n        return (MERGEITEMFLAVOUR.equals(flavor));\r\n    }\r\n\r\n    /**\r\n     * @return DataFlavours of this transferable\r\n     */\r\n    public DataFlavor[] getTransferDataFlavors() {\r\n        return new DataFlavor[] { MERGEITEMFLAVOUR };\r\n    }\r\n\r\n    /**\r\n     * @return source component\r\n     */\r\n    public JComponent getSource() {\r\n        return mit_source;\r\n    }\r\n\r\n    /**\r\n     * @return data to transfer\r\n     */\r\n    public ArrayList getData() {\r\n        return mit_data;\r\n    }\r\n}\r\n",
		"id": "EvoSuiteBenchmark/109_pdfsam/src/main/java/it/pdfsam/plugin/merge/type/MergeItemTransferTest.java",
		"test_prompt": "// MergeItemTransferTest.java\npackage it.pdfsam.plugin.merge.type;\n\nimport java.awt.datatransfer.DataFlavor;\nimport java.awt.datatransfer.Transferable;\nimport java.awt.datatransfer.UnsupportedFlavorException;\nimport java.io.IOException;\nimport java.util.ArrayList;\nimport javax.swing.JComponent;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link MergeItemTransfer}.\n* It contains ten unit test cases for the {@link MergeItemTransfer#isDataFlavorSupported(DataFlavor)} method.\n*/\nclass MergeItemTransferTest {"
	},
	{
		"original_code": "// TableTransferHandler.java\n/*\r\n * Created on 23-Mar-2006\r\n *\r\n * Copyright notice: this code is based on concat_pdf class by Mark Thompson. Copyright (c) 2002 Mark Thompson.\r\n * Copyright (C) 2006 by Andrea Vacondio.\r\n *\r\n * This program is free software; you can redistribute it and/or modify it under the terms of the \r\n * GNU General Public License as published by the Free Software Foundation; \r\n * either version 2 of the License.\r\n * This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; \r\n * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. \r\n * See the GNU General Public License for more details.\r\n * You should have received a copy of the GNU General Public License along with this program; \r\n * if not, write to the Free Software Foundation, Inc., \r\n *  59 Temple Place, Suite 330, Boston, MA 02111-1307 USA\r\n */\r\npackage it.pdfsam.plugin.merge.type;\r\n\r\nimport it.pdfsam.plugin.merge.component.JMergeTable;\r\nimport it.pdfsam.plugin.merge.model.MergeTableModel;\r\nimport java.awt.datatransfer.DataFlavor;\r\nimport java.awt.datatransfer.Transferable;\r\nimport java.awt.datatransfer.UnsupportedFlavorException;\r\nimport java.io.File;\r\nimport java.io.IOException;\r\nimport java.util.ArrayList;\r\nimport java.util.List;\r\nimport javax.swing.JComponent;\r\nimport javax.swing.TransferHandler;\r\nimport com.lowagie.text.pdf.PdfReader;\r\n\r\n/**\r\n * Class used to manage drag and drop in merge table.\r\n * @author Andrea Vacondio\r\n * @see javax.swing.TransferHandler\r\n * @see it.pdfsam.plugin.merge.type.MergeItemTransfer\r\n */\r\npublic class TableTransferHandler extends TransferHandler {\r\n\r\n    /**\r\n     */\r\n    private static final long serialVersionUID = -1025963121787698726L;\r\n\r\n    //multiple selection\r\n    private int[] rows = null;\r\n\r\n    //Location where items were added\r\n    private int addIndex = -1;\r\n\r\n    //Number of items added.\r\n    private int addCount = 0;\r\n\r\n    /**\r\n     * Export selected row\r\n     * @param c component holding data\r\n     * @return MergeItem we are trying to move inside the MergeTable\r\n     */\r\n    protected ArrayList exportMergeItem(JComponent c) {\r\n        ArrayList data = new ArrayList();\r\n        if (!(c instanceof JMergeTable)) {\r\n            return null;\r\n        }\r\n        JMergeTable merge_table = (JMergeTable) c;\r\n        rows = merge_table.getSelectedRows();\r\n        if (rows != null) {\r\n            for (int i = 0; i < rows.length; i++) {\r\n                data.add(((MergeTableModel) merge_table.getModel()).getRow(rows[i]));\r\n            }\r\n        }\r\n        return data;\r\n        //return (rows == -1)? null: ((MergeTableModel)merge_table.getModel()).getRow(rows);\r\n    }\r\n\r\n    /**\r\n     * @param c component to drop the item to\r\n     * @param list_item items list to drop\r\n     */\r\n    protected void importMergeItem(JComponent c, ArrayList list_item) {\r\n        if (!(c instanceof JMergeTable)) {\r\n            return;\r\n        }\r\n        JMergeTable target_merge_table = (JMergeTable) c;\r\n        MergeTableModel model = (MergeTableModel) (target_merge_table.getModel());\r\n        int index = target_merge_table.getSelectedRow();\r\n        //Prevent the user from dropping data back on itself.\r\n        //For example, if the user is moving rows #4,#5,#6 and #7 and\r\n        //attempts to insert the rows after row #5, this would\r\n        //be problematic when removing the original rows.\r\n        if ((rows != null) && (index > (rows[0] - 1)) && (index <= rows[rows.length - 1])) {\r\n            //needed to avoid cleanup\r\n            rows = null;\r\n            return;\r\n        }\r\n        //GET_DROP_INDEX\r\n        int max = model.getRowCount();\r\n        if (index < 0) {\r\n            index = max;\r\n        } else {\r\n            if (rows == null) {\r\n                index++;\r\n            } else {\r\n                if (rows[0] < index) {\r\n                    index++;\r\n                }\r\n            }\r\n            if (index > max) {\r\n                index = max;\r\n            }\r\n        }\r\n        addIndex = index;\r\n        //GET_DROP_INDEX_END\r\n        try {\r\n            for (int i = 0; i < list_item.size(); i++) {\r\n                if (list_item.get(i) instanceof MergeItemType) {\r\n                    MergeItemType item = (MergeItemType) list_item.get(i);\r\n                    model.addRowAt(index++, item);\r\n                    addCount++;\r\n                }\r\n            }\r\n            target_merge_table.setRowSelectionInterval(addIndex, index - 1);\r\n        } catch (IndexOutOfBoundsException ioobe) {\r\n            return;\r\n        }\r\n    }\r\n\r\n    protected void cleanup(JComponent c, boolean remove) {\r\n        JMergeTable source = (JMergeTable) c;\r\n        if (remove && rows != null) {\r\n            MergeTableModel model = (MergeTableModel) source.getModel();\r\n            //If we are moving items around in the same table, we\r\n            //need to adjust the rows accordingly, since those\r\n            //after the insertion point have moved.\r\n            if (addCount > 0) {\r\n                for (int i = 0; i < rows.length; i++) {\r\n                    if (rows[i] > addIndex) {\r\n                        rows[i] += addCount;\r\n                    }\r\n                }\r\n            }\r\n            for (int i = rows.length - 1; i >= 0; i--) {\r\n                model.deleteRow(rows[i]);\r\n            }\r\n        }\r\n        rows = null;\r\n        addCount = 0;\r\n        addIndex = -1;\r\n    }\r\n\r\n    /**\r\n     * Creates the Transferable object to manage drag and drop\r\n     * @return Transferable object\r\n     */\r\n    protected Transferable createTransferable(JComponent c) {\r\n        ArrayList arr = exportMergeItem(c);\r\n        return new MergeItemTransfer(c, arr);\r\n        //return new StringSelection(exportMergeItem(c));\r\n    }\r\n\r\n    public int getSourceActions(JComponent c) {\r\n        return MOVE;\r\n    }\r\n\r\n    /**\r\n     * Drop the MergeItem\r\n     */\r\n    public boolean importData(JComponent c, Transferable t) {\r\n        if (!(c instanceof JMergeTable)) {\r\n            return false;\r\n        }\r\n        if (canImport(c, t.getTransferDataFlavors())) {\r\n            try {\r\n                if (hasMergeItemFlavor(t)) {\r\n                    Object obj = t.getTransferData(MergeItemTransfer.MERGEITEMFLAVOUR);\r\n                    if (!(obj instanceof MergeItemTransfer))\r\n                        return false;\r\n                    MergeItemTransfer mit = (MergeItemTransfer) obj;\r\n                    ArrayList merge_item_obj = mit.getData();\r\n                    importMergeItem(c, merge_item_obj);\r\n                    return true;\r\n                } else if (hasFileFlavor(t)) {\r\n                    List file_list = (List) t.getTransferData(DataFlavor.javaFileListFlavor);\r\n                    ArrayList row_items = new ArrayList();\r\n                    for (int i = 0; i < file_list.size(); i++) {\r\n                        File file_item = (File) file_list.get(i);\r\n                        boolean encrypt = false;\r\n                        String num_pages = \"\";\r\n                        try {\r\n                            PdfReader pdf_reader = new PdfReader(file_item.getAbsolutePath());\r\n                            encrypt = pdf_reader.isEncrypted();\r\n                            // we retrieve the total number of pages\r\n                            num_pages = Integer.toString(pdf_reader.getNumberOfPages());\r\n                        } catch (Exception ex) {\r\n                            num_pages = ex.getMessage();\r\n                        }\r\n                        MergeItemType merge_item_obj = new MergeItemType(file_item.getName(), file_item.getAbsolutePath(), num_pages, \"All\", encrypt);\r\n                        row_items.add(merge_item_obj);\r\n                    }\r\n                    importMergeItem(c, row_items);\r\n                    return true;\r\n                } else {\r\n                    return false;\r\n                }\r\n            } catch (UnsupportedFlavorException ufe) {\r\n            } catch (IOException ioe) {\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n\r\n    private boolean hasFileFlavor(Transferable t) {\r\n        DataFlavor[] flavors;\r\n        flavors = t.getTransferDataFlavors();\r\n        for (int i = 0; i < flavors.length; i++) {\r\n            if (flavors[i].equals(DataFlavor.javaFileListFlavor)) {\r\n                return true;\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n\r\n    private boolean hasMergeItemFlavor(Transferable t) {\r\n        DataFlavor[] flavors;\r\n        flavors = t.getTransferDataFlavors();\r\n        for (int i = 0; i < flavors.length; i++) {\r\n            if (flavors[i].equals(MergeItemTransfer.MERGEITEMFLAVOUR)) {\r\n                return true;\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n\r\n    protected void exportDone(JComponent c, Transferable data, int action) {\r\n        if (!(c instanceof JMergeTable)) {\r\n            return;\r\n        }\r\n        cleanup(c, action == MOVE);\r\n    }\r\n\r\n    /**\r\n     * Check if the item can be imported\r\n     */\r\n    public boolean canImport(JComponent c, DataFlavor[] flavors) {\r\n        for (int i = 0; i < flavors.length; i++) {\r\n            if (flavors[i].equals(MergeItemTransfer.MERGEITEMFLAVOUR) || flavors[i].equals(DataFlavor.javaFileListFlavor)) {\r\n                return true;\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n}\r\n",
		"id": "EvoSuiteBenchmark/109_pdfsam/src/main/java/it/pdfsam/plugin/merge/type/TableTransferHandlerTest0.java",
		"test_prompt": "// TableTransferHandlerTest0.java\npackage it.pdfsam.plugin.merge.type;\n\nimport it.pdfsam.plugin.merge.component.JMergeTable;\nimport it.pdfsam.plugin.merge.model.MergeTableModel;\nimport java.awt.datatransfer.DataFlavor;\nimport java.awt.datatransfer.Transferable;\nimport java.awt.datatransfer.UnsupportedFlavorException;\nimport java.io.File;\nimport java.io.IOException;\nimport java.util.ArrayList;\nimport java.util.List;\nimport javax.swing.JComponent;\nimport javax.swing.TransferHandler;\nimport com.lowagie.text.pdf.PdfReader;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link TableTransferHandler}.\n* It contains ten unit test cases for the {@link TableTransferHandler#importData(JComponent, Transferable)} method.\n*/\nclass TableTransferHandlerTest0 {"
	},
	{
		"original_code": "// TableTransferHandler.java\n/*\r\n * Created on 23-Mar-2006\r\n *\r\n * Copyright notice: this code is based on concat_pdf class by Mark Thompson. Copyright (c) 2002 Mark Thompson.\r\n * Copyright (C) 2006 by Andrea Vacondio.\r\n *\r\n * This program is free software; you can redistribute it and/or modify it under the terms of the \r\n * GNU General Public License as published by the Free Software Foundation; \r\n * either version 2 of the License.\r\n * This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; \r\n * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. \r\n * See the GNU General Public License for more details.\r\n * You should have received a copy of the GNU General Public License along with this program; \r\n * if not, write to the Free Software Foundation, Inc., \r\n *  59 Temple Place, Suite 330, Boston, MA 02111-1307 USA\r\n */\r\npackage it.pdfsam.plugin.merge.type;\r\n\r\nimport it.pdfsam.plugin.merge.component.JMergeTable;\r\nimport it.pdfsam.plugin.merge.model.MergeTableModel;\r\nimport java.awt.datatransfer.DataFlavor;\r\nimport java.awt.datatransfer.Transferable;\r\nimport java.awt.datatransfer.UnsupportedFlavorException;\r\nimport java.io.File;\r\nimport java.io.IOException;\r\nimport java.util.ArrayList;\r\nimport java.util.List;\r\nimport javax.swing.JComponent;\r\nimport javax.swing.TransferHandler;\r\nimport com.lowagie.text.pdf.PdfReader;\r\n\r\n/**\r\n * Class used to manage drag and drop in merge table.\r\n * @author Andrea Vacondio\r\n * @see javax.swing.TransferHandler\r\n * @see it.pdfsam.plugin.merge.type.MergeItemTransfer\r\n */\r\npublic class TableTransferHandler extends TransferHandler {\r\n\r\n    /**\r\n     */\r\n    private static final long serialVersionUID = -1025963121787698726L;\r\n\r\n    //multiple selection\r\n    private int[] rows = null;\r\n\r\n    //Location where items were added\r\n    private int addIndex = -1;\r\n\r\n    //Number of items added.\r\n    private int addCount = 0;\r\n\r\n    /**\r\n     * Export selected row\r\n     * @param c component holding data\r\n     * @return MergeItem we are trying to move inside the MergeTable\r\n     */\r\n    protected ArrayList exportMergeItem(JComponent c) {\r\n        ArrayList data = new ArrayList();\r\n        if (!(c instanceof JMergeTable)) {\r\n            return null;\r\n        }\r\n        JMergeTable merge_table = (JMergeTable) c;\r\n        rows = merge_table.getSelectedRows();\r\n        if (rows != null) {\r\n            for (int i = 0; i < rows.length; i++) {\r\n                data.add(((MergeTableModel) merge_table.getModel()).getRow(rows[i]));\r\n            }\r\n        }\r\n        return data;\r\n        //return (rows == -1)? null: ((MergeTableModel)merge_table.getModel()).getRow(rows);\r\n    }\r\n\r\n    /**\r\n     * @param c component to drop the item to\r\n     * @param list_item items list to drop\r\n     */\r\n    protected void importMergeItem(JComponent c, ArrayList list_item) {\r\n        if (!(c instanceof JMergeTable)) {\r\n            return;\r\n        }\r\n        JMergeTable target_merge_table = (JMergeTable) c;\r\n        MergeTableModel model = (MergeTableModel) (target_merge_table.getModel());\r\n        int index = target_merge_table.getSelectedRow();\r\n        //Prevent the user from dropping data back on itself.\r\n        //For example, if the user is moving rows #4,#5,#6 and #7 and\r\n        //attempts to insert the rows after row #5, this would\r\n        //be problematic when removing the original rows.\r\n        if ((rows != null) && (index > (rows[0] - 1)) && (index <= rows[rows.length - 1])) {\r\n            //needed to avoid cleanup\r\n            rows = null;\r\n            return;\r\n        }\r\n        //GET_DROP_INDEX\r\n        int max = model.getRowCount();\r\n        if (index < 0) {\r\n            index = max;\r\n        } else {\r\n            if (rows == null) {\r\n                index++;\r\n            } else {\r\n                if (rows[0] < index) {\r\n                    index++;\r\n                }\r\n            }\r\n            if (index > max) {\r\n                index = max;\r\n            }\r\n        }\r\n        addIndex = index;\r\n        //GET_DROP_INDEX_END\r\n        try {\r\n            for (int i = 0; i < list_item.size(); i++) {\r\n                if (list_item.get(i) instanceof MergeItemType) {\r\n                    MergeItemType item = (MergeItemType) list_item.get(i);\r\n                    model.addRowAt(index++, item);\r\n                    addCount++;\r\n                }\r\n            }\r\n            target_merge_table.setRowSelectionInterval(addIndex, index - 1);\r\n        } catch (IndexOutOfBoundsException ioobe) {\r\n            return;\r\n        }\r\n    }\r\n\r\n    protected void cleanup(JComponent c, boolean remove) {\r\n        JMergeTable source = (JMergeTable) c;\r\n        if (remove && rows != null) {\r\n            MergeTableModel model = (MergeTableModel) source.getModel();\r\n            //If we are moving items around in the same table, we\r\n            //need to adjust the rows accordingly, since those\r\n            //after the insertion point have moved.\r\n            if (addCount > 0) {\r\n                for (int i = 0; i < rows.length; i++) {\r\n                    if (rows[i] > addIndex) {\r\n                        rows[i] += addCount;\r\n                    }\r\n                }\r\n            }\r\n            for (int i = rows.length - 1; i >= 0; i--) {\r\n                model.deleteRow(rows[i]);\r\n            }\r\n        }\r\n        rows = null;\r\n        addCount = 0;\r\n        addIndex = -1;\r\n    }\r\n\r\n    /**\r\n     * Creates the Transferable object to manage drag and drop\r\n     * @return Transferable object\r\n     */\r\n    protected Transferable createTransferable(JComponent c) {\r\n        ArrayList arr = exportMergeItem(c);\r\n        return new MergeItemTransfer(c, arr);\r\n        //return new StringSelection(exportMergeItem(c));\r\n    }\r\n\r\n    public int getSourceActions(JComponent c) {\r\n        return MOVE;\r\n    }\r\n\r\n    /**\r\n     * Drop the MergeItem\r\n     */\r\n    public boolean importData(JComponent c, Transferable t) {\r\n        if (!(c instanceof JMergeTable)) {\r\n            return false;\r\n        }\r\n        if (canImport(c, t.getTransferDataFlavors())) {\r\n            try {\r\n                if (hasMergeItemFlavor(t)) {\r\n                    Object obj = t.getTransferData(MergeItemTransfer.MERGEITEMFLAVOUR);\r\n                    if (!(obj instanceof MergeItemTransfer))\r\n                        return false;\r\n                    MergeItemTransfer mit = (MergeItemTransfer) obj;\r\n                    ArrayList merge_item_obj = mit.getData();\r\n                    importMergeItem(c, merge_item_obj);\r\n                    return true;\r\n                } else if (hasFileFlavor(t)) {\r\n                    List file_list = (List) t.getTransferData(DataFlavor.javaFileListFlavor);\r\n                    ArrayList row_items = new ArrayList();\r\n                    for (int i = 0; i < file_list.size(); i++) {\r\n                        File file_item = (File) file_list.get(i);\r\n                        boolean encrypt = false;\r\n                        String num_pages = \"\";\r\n                        try {\r\n                            PdfReader pdf_reader = new PdfReader(file_item.getAbsolutePath());\r\n                            encrypt = pdf_reader.isEncrypted();\r\n                            // we retrieve the total number of pages\r\n                            num_pages = Integer.toString(pdf_reader.getNumberOfPages());\r\n                        } catch (Exception ex) {\r\n                            num_pages = ex.getMessage();\r\n                        }\r\n                        MergeItemType merge_item_obj = new MergeItemType(file_item.getName(), file_item.getAbsolutePath(), num_pages, \"All\", encrypt);\r\n                        row_items.add(merge_item_obj);\r\n                    }\r\n                    importMergeItem(c, row_items);\r\n                    return true;\r\n                } else {\r\n                    return false;\r\n                }\r\n            } catch (UnsupportedFlavorException ufe) {\r\n            } catch (IOException ioe) {\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n\r\n    private boolean hasFileFlavor(Transferable t) {\r\n        DataFlavor[] flavors;\r\n        flavors = t.getTransferDataFlavors();\r\n        for (int i = 0; i < flavors.length; i++) {\r\n            if (flavors[i].equals(DataFlavor.javaFileListFlavor)) {\r\n                return true;\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n\r\n    private boolean hasMergeItemFlavor(Transferable t) {\r\n        DataFlavor[] flavors;\r\n        flavors = t.getTransferDataFlavors();\r\n        for (int i = 0; i < flavors.length; i++) {\r\n            if (flavors[i].equals(MergeItemTransfer.MERGEITEMFLAVOUR)) {\r\n                return true;\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n\r\n    protected void exportDone(JComponent c, Transferable data, int action) {\r\n        if (!(c instanceof JMergeTable)) {\r\n            return;\r\n        }\r\n        cleanup(c, action == MOVE);\r\n    }\r\n\r\n    /**\r\n     * Check if the item can be imported\r\n     */\r\n    public boolean canImport(JComponent c, DataFlavor[] flavors) {\r\n        for (int i = 0; i < flavors.length; i++) {\r\n            if (flavors[i].equals(MergeItemTransfer.MERGEITEMFLAVOUR) || flavors[i].equals(DataFlavor.javaFileListFlavor)) {\r\n                return true;\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n}\r\n",
		"id": "EvoSuiteBenchmark/109_pdfsam/src/main/java/it/pdfsam/plugin/merge/type/TableTransferHandlerTest1.java",
		"test_prompt": "// TableTransferHandlerTest1.java\npackage it.pdfsam.plugin.merge.type;\n\nimport it.pdfsam.plugin.merge.component.JMergeTable;\nimport it.pdfsam.plugin.merge.model.MergeTableModel;\nimport java.awt.datatransfer.DataFlavor;\nimport java.awt.datatransfer.Transferable;\nimport java.awt.datatransfer.UnsupportedFlavorException;\nimport java.io.File;\nimport java.io.IOException;\nimport java.util.ArrayList;\nimport java.util.List;\nimport javax.swing.JComponent;\nimport javax.swing.TransferHandler;\nimport com.lowagie.text.pdf.PdfReader;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link TableTransferHandler}.\n* It contains ten unit test cases for the {@link TableTransferHandler#canImport(JComponent, DataFlavor[])} method.\n*/\nclass TableTransferHandlerTest1 {"
	},
	{
		"original_code": "// MergeTableModel.java\n/*\r\n * Created on 03-Feb-2006\r\n * Copyright (C) 2006 by Andrea Vacondio.\r\n *\r\n * This program is free software; you can redistribute it and/or modify it under the terms of the \r\n * GNU General Public License as published by the Free Software Foundation; \r\n * either version 2 of the License.\r\n * This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; \r\n * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. \r\n * See the GNU General Public License for more details.\r\n * You should have received a copy of the GNU General Public License along with this program; \r\n * if not, write to the Free Software Foundation, Inc., \r\n *  59 Temple Place, Suite 330, Boston, MA 02111-1307 USA\r\n */\r\npackage it.pdfsam.plugin.merge.model;\r\n\r\nimport it.pdfsam.plugin.merge.type.MergeItemType;\r\nimport java.util.ArrayList;\r\nimport java.util.LinkedList;\r\nimport javax.swing.table.AbstractTableModel;\r\n\r\n/**\r\n * Model for the Merge table\r\n * @author  Andrea Vacondio\r\n * @see     javax.swing.table.AbstractTableModel\r\n */\r\npublic class MergeTableModel extends AbstractTableModel {\r\n\r\n    /**\r\n     */\r\n    private static final long serialVersionUID = 3829562657030134592L;\r\n\r\n    private final int SHOWED_COLS = 4;\r\n\r\n    //colums order\r\n    public final static int FILENAME = 0;\r\n\r\n    public final static int PATH = 1;\r\n\r\n    public final static int PAGES = 2;\r\n\r\n    public final static int PAGESELECTION = 3;\r\n\r\n    //colums names\r\n    private String[] columnNames = { \"File name\", \"Path\", \"Pages\", \"Page Selection\" };\r\n\r\n    //tooltips\r\n    private String[] toolTips = { \"\", \"\", \"Total pages of the document\", \"Double click to set pages you want to merge (ex: 2 or All or 5-23 or 2,5-7,12)\" };\r\n\r\n    //data array\r\n    private ArrayList data = new ArrayList();\r\n\r\n    /**\r\n     * @return Number of showed columns in Merge table\r\n     */\r\n    public int getColumnCount() {\r\n        return SHOWED_COLS;\r\n    }\r\n\r\n    /**\r\n     * @return Rows number in Merge table\r\n     */\r\n    public int getRowCount() {\r\n        try {\r\n            return data.size();\r\n        } catch (NullPointerException e) {\r\n            return 0;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Return the value at row, col\r\n     */\r\n    public Object getValueAt(int row, int col) {\r\n        return ((MergeItemType) data.get(row)).getValue(col);\r\n    }\r\n\r\n    /**\r\n     * Return the value at row, col\r\n     */\r\n    public MergeItemType getRow(int row) {\r\n        return ((MergeItemType) data.get(row));\r\n    }\r\n\r\n    /**\r\n     * <p>set data source for the model\r\n     *\r\n     * @param input_data array <code>MergeItemType[]</code> as data source\r\n     */\r\n    public void setData(MergeItemType[] input_data) {\r\n        data.clear();\r\n        for (int i = 0; i < input_data.length; i++) {\r\n            data.add(input_data[i]);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * <p>Remove any data source for the model\r\n     */\r\n    public void clearData() {\r\n        data.clear();\r\n        this.fireTableDataChanged();\r\n    }\r\n\r\n    /**\r\n     * Return true if the cell is editable\r\n     */\r\n    public boolean isCellEditable(int row, int column) {\r\n        if (PAGESELECTION == column) {\r\n            return true;\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    /**\r\n     *  This empty implementation is provided so users don't have to implement\r\n     *  this method if their data model is not editable.\r\n     *\r\n     *  @param  value   value to assign to cell\r\n     *  @param  row   row of cell\r\n     *  @param  column  column of cell\r\n     */\r\n    public void setValueAt(Object value, int row, int column) {\r\n        switch(column) {\r\n            case FILENAME:\r\n                ((MergeItemType) data.get(row)).setFileName(value.toString());\r\n            case PATH:\r\n                ((MergeItemType) data.get(row)).setFilePath(value.toString());\r\n            case PAGES:\r\n                ((MergeItemType) data.get(row)).setNumPages(value.toString());\r\n            case PAGESELECTION:\r\n                ((MergeItemType) data.get(row)).setPageSelection(value.toString());\r\n        }\r\n    }\r\n\r\n    /**\r\n     * <p>Add a row to the table data source and fire to Listeners\r\n     *\r\n     * @param input_data <code>MergeItemType</code> to add to the data source\r\n     */\r\n    public void addRow(MergeItemType input_data) {\r\n        if (input_data != null) {\r\n            data.add(input_data);\r\n            int row_num = data.size();\r\n            this.fireTableRowsInserted(row_num, row_num);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * <p>Add a row to the table data source and fire to Listeners\r\n     *\r\n     * @param input_data <code>MergeItemType</code> to add to the data source\r\n     */\r\n    public void addRowAt(int index, MergeItemType input_data) {\r\n        if (input_data != null) {\r\n            data.add(index, input_data);\r\n            this.fireTableRowsInserted(index, index);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * <p>Moves up a row to the table data source and fire to Listeners\r\n     *\r\n     * @param row Row number to move from the data source\r\n     */\r\n    public void moveUpRow(int row) throws IndexOutOfBoundsException {\r\n        if (row >= 1) {\r\n            MergeItemType tmp_element = (MergeItemType) data.get(row);\r\n            data.set(row, data.get((row - 1)));\r\n            data.set((row - 1), tmp_element);\r\n            fireTableRowsUpdated(row - 1, row);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * <p>Moves up a set of rows to the table data source and fire to Listeners\r\n     *\r\n     * @param rows Row numbers to move from the data source\r\n     */\r\n    public void moveUpRows(int[] rows) throws IndexOutOfBoundsException {\r\n        if (rows.length > 0) {\r\n            MergeItemType tmp_element;\r\n            //no moveup if i'm selecting the first elemento in the table\r\n            if (rows[0] > 0) {\r\n                tmp_element = (MergeItemType) data.get(rows[0] - 1);\r\n                for (int i = 0; i < rows.length; i++) {\r\n                    if (rows[i] > 0) {\r\n                        data.set(rows[i] - 1, data.get(rows[i]));\r\n                    }\r\n                }\r\n                data.set(rows[rows.length - 1], tmp_element);\r\n            }\r\n            if (rows[0] >= 1) {\r\n                fireTableRowsUpdated(rows[0] - 1, rows[rows.length - 1]);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * <p>Moves down a row to the table data source and fire to Listeners\r\n     *\r\n     * @param row Row number to remove from the data source\r\n     */\r\n    public void moveDownRow(int row) throws IndexOutOfBoundsException {\r\n        if (row < (data.size() - 1)) {\r\n            MergeItemType tmp_element = (MergeItemType) data.get(row);\r\n            data.set(row, data.get((row + 1)));\r\n            data.set((row + 1), tmp_element);\r\n            fireTableRowsUpdated(row, row + 1);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * <p>Moves up a set of rows to the table data source and fire to Listeners\r\n     *\r\n     * @param rows Row numbers to move from the data source\r\n     */\r\n    public void moveDownRows(int[] rows) throws IndexOutOfBoundsException {\r\n        if (rows.length > 0) {\r\n            MergeItemType tmp_element;\r\n            //no moveup if i'm selecting the first elemento in the table\r\n            if (rows[rows.length - 1] < (data.size() - 1)) {\r\n                tmp_element = (MergeItemType) data.get(rows[rows.length - 1] + 1);\r\n                for (int i = (rows.length - 1); i >= 0; i--) {\r\n                    if (rows[rows.length - 1] < (data.size() - 1)) {\r\n                        data.set(rows[i] + 1, data.get(rows[i]));\r\n                    }\r\n                }\r\n                data.set(rows[0], tmp_element);\r\n            }\r\n            if (rows[rows.length - 1] < (data.size() - 1)) {\r\n                fireTableRowsUpdated(rows[0], rows[rows.length - 1] + 1);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * <p>Remove a row from the table data source and fire to Listeners\r\n     *\r\n     * @param row row number to remove from the data source\r\n     * @throws Exception if an exception occurs\r\n     */\r\n    public void deleteRow(int row) throws IndexOutOfBoundsException {\r\n        data.remove(row);\r\n        fireTableRowsDeleted(row, row);\r\n    }\r\n\r\n    /**\r\n     * <p>Remove a set of rows from the table data source and fire to Listeners\r\n     *\r\n     * @param rows rows number to remove from the data source\r\n     * @throws Exception if an exception occurs\r\n     */\r\n    public void deleteRows(int[] rows) throws IndexOutOfBoundsException {\r\n        if (rows.length > 0) {\r\n            LinkedList data_to_remove = new LinkedList();\r\n            for (int i = 0; i < rows.length; i++) {\r\n                data_to_remove.add(data.get(rows[i]));\r\n            }\r\n            for (int i = 0; i < data_to_remove.size(); i++) {\r\n                data.remove(data_to_remove.get(i));\r\n            }\r\n            this.fireTableRowsDeleted(rows[0], rows[rows.length - 1]);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * <p> Return column name\r\n     *\r\n     * @param col Column number\r\n     * @return Column name\r\n     */\r\n    public String getColumnName(int col) {\r\n        try {\r\n            return columnNames[col];\r\n        } catch (Exception e) {\r\n            return null;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @return Returns the toolTips.\r\n     */\r\n    public String[] getToolTips() {\r\n        return toolTips;\r\n    }\r\n\r\n    /**\r\n     * @param columnNames The columnNames to set.\r\n     */\r\n    public void setColumnNames(String[] columnNames) {\r\n        this.columnNames = columnNames;\r\n    }\r\n}\r\n",
		"id": "EvoSuiteBenchmark/109_pdfsam/src/main/java/it/pdfsam/plugin/merge/model/MergeTableModelTest.java",
		"test_prompt": "// MergeTableModelTest.java\npackage it.pdfsam.plugin.merge.model;\n\nimport it.pdfsam.plugin.merge.type.MergeItemType;\nimport java.util.ArrayList;\nimport java.util.LinkedList;\nimport javax.swing.table.AbstractTableModel;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link MergeTableModel}.\n* It contains ten unit test cases for the {@link MergeTableModel#isCellEditable(int, int)} method.\n*/\nclass MergeTableModelTest {"
	},
	{
		"original_code": "// JarFilter.java\n/*\n * Created on 03-Feb-2006\n * Copyright (C) 2006 by Andrea Vacondio.\n *\n * This program is free software; you can redistribute it and/or modify it under the terms of the \n * GNU General Public License as published by the Free Software Foundation; \n * either version 2 of the License.\n * This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; \n * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. \n * See the GNU General Public License for more details.\n * You should have received a copy of the GNU General Public License along with this program; \n * if not, write to the Free Software Foundation, Inc., \n *  59 Temple Place, Suite 330, Boston, MA 02111-1307 USA\n */\npackage it.pdfsam.utils;\n\nimport java.io.File;\nimport java.io.FileFilter;\n\n/**\n * Filter for the PlugInsLoader. Used to load only jar files.\n *\n * @author Andrea Vacondio\n * @see javax.swing.JFileChooser\n */\npublic class JarFilter implements FileFilter {\n\n    public boolean accept(File f) {\n        if (f.isDirectory()) {\n            return true;\n        }\n        String extension = JarFilter.getExtension(f);\n        if (extension != null) {\n            if (extension.equals(\"JAR\".toLowerCase())) {\n                return true;\n            } else {\n                return false;\n            }\n        }\n        return false;\n    }\n\n    public String getDescription() {\n        return \"Jar files\";\n    }\n\n    /**\n     * Get the extension of a file.\n     */\n    public static String getExtension(File f) {\n        String ext = null;\n        String s = f.getName();\n        int i = s.lastIndexOf('.');\n        if (i > 0 && i < s.length() - 1) {\n            ext = s.substring(i + 1).toLowerCase();\n        }\n        return ext;\n    }\n}\n",
		"id": "EvoSuiteBenchmark/109_pdfsam/src/main/java/it/pdfsam/utils/JarFilterTest0.java",
		"test_prompt": "// JarFilterTest0.java\npackage it.pdfsam.utils;\n\nimport java.io.File;\nimport java.io.FileFilter;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link JarFilter}.\n* It contains ten unit test cases for the {@link JarFilter#accept(File)} method.\n*/\nclass JarFilterTest0 {"
	},
	{
		"original_code": "// JarFilter.java\n/*\n * Created on 03-Feb-2006\n * Copyright (C) 2006 by Andrea Vacondio.\n *\n * This program is free software; you can redistribute it and/or modify it under the terms of the \n * GNU General Public License as published by the Free Software Foundation; \n * either version 2 of the License.\n * This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; \n * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. \n * See the GNU General Public License for more details.\n * You should have received a copy of the GNU General Public License along with this program; \n * if not, write to the Free Software Foundation, Inc., \n *  59 Temple Place, Suite 330, Boston, MA 02111-1307 USA\n */\npackage it.pdfsam.utils;\n\nimport java.io.File;\nimport java.io.FileFilter;\n\n/**\n * Filter for the PlugInsLoader. Used to load only jar files.\n *\n * @author Andrea Vacondio\n * @see javax.swing.JFileChooser\n */\npublic class JarFilter implements FileFilter {\n\n    public boolean accept(File f) {\n        if (f.isDirectory()) {\n            return true;\n        }\n        String extension = JarFilter.getExtension(f);\n        if (extension != null) {\n            if (extension.equals(\"JAR\".toLowerCase())) {\n                return true;\n            } else {\n                return false;\n            }\n        }\n        return false;\n    }\n\n    public String getDescription() {\n        return \"Jar files\";\n    }\n\n    /**\n     * Get the extension of a file.\n     */\n    public static String getExtension(File f) {\n        String ext = null;\n        String s = f.getName();\n        int i = s.lastIndexOf('.');\n        if (i > 0 && i < s.length() - 1) {\n            ext = s.substring(i + 1).toLowerCase();\n        }\n        return ext;\n    }\n}\n",
		"id": "EvoSuiteBenchmark/109_pdfsam/src/main/java/it/pdfsam/utils/JarFilterTest1.java",
		"test_prompt": "// JarFilterTest1.java\npackage it.pdfsam.utils;\n\nimport java.io.File;\nimport java.io.FileFilter;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link JarFilter}.\n* It contains ten unit test cases for the {@link JarFilter#getExtension(File)} method.\n*/\nclass JarFilterTest1 {"
	},
	{
		"original_code": "// DirFilter.java\n/*\r\n * Created on 20-Feb-2006\r\n * Copyright (C) 2006 by Andrea Vacondio.\r\n *\r\n * This program is free software; you can redistribute it and/or modify it under the terms of the \r\n * GNU General Public License as published by the Free Software Foundation; \r\n * either version 2 of the License.\r\n * This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; \r\n * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. \r\n * See the GNU General Public License for more details.\r\n * You should have received a copy of the GNU General Public License along with this program; \r\n * if not, write to the Free Software Foundation, Inc., \r\n *  59 Temple Place, Suite 330, Boston, MA 02111-1307 USA\r\n */\r\npackage it.pdfsam.utils;\r\n\r\nimport java.io.File;\r\nimport javax.swing.filechooser.FileFilter;\r\n\r\n/**\r\n * Filter for the JFileChooser. Used by split plugin to chose output directory.\r\n * @author Andrea Vacondio\r\n * @see javax.swing.JFileChooser\r\n */\r\npublic class DirFilter extends FileFilter {\r\n\r\n    public boolean accept(File f) {\r\n        if (f.isDirectory()) {\r\n            return true;\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    public String getDescription() {\r\n        return \"Direcotries\";\r\n    }\r\n}\r\n",
		"id": "EvoSuiteBenchmark/109_pdfsam/src/main/java/it/pdfsam/utils/DirFilterTest.java",
		"test_prompt": "// DirFilterTest.java\npackage it.pdfsam.utils;\n\nimport java.io.File;\nimport javax.swing.filechooser.FileFilter;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link DirFilter}.\n* It contains ten unit test cases for the {@link DirFilter#accept(File)} method.\n*/\nclass DirFilterTest {"
	},
	{
		"original_code": "// PdfFilter.java\n/*\r\n * Created on 03-Feb-2006\r\n * Copyright (C) 2006 by Andrea Vacondio.\r\n *\r\n * This program is free software; you can redistribute it and/or modify it under the terms of the \r\n * GNU General Public License as published by the Free Software Foundation; \r\n * either version 2 of the License.\r\n * This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; \r\n * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. \r\n * See the GNU General Public License for more details.\r\n * You should have received a copy of the GNU General Public License along with this program; \r\n * if not, write to the Free Software Foundation, Inc., \r\n *  59 Temple Place, Suite 330, Boston, MA 02111-1307 USA\r\n */\r\npackage it.pdfsam.utils;\r\n\r\nimport java.io.File;\r\nimport javax.swing.filechooser.FileFilter;\r\n\r\n/**\r\n * Filter for the JFileChooser. Used by merge and split plugin to chose input files.\r\n *\r\n * @author Andrea Vacondio\r\n * @see javax.swing.JFileChooser\r\n */\r\npublic class PdfFilter extends FileFilter {\r\n\r\n    public boolean accept(File f) {\r\n        if (f.isDirectory()) {\r\n            return true;\r\n        }\r\n        String extension = PdfFilter.getExtension(f);\r\n        if (extension != null) {\r\n            if (extension.equals(\"PDF\".toLowerCase())) {\r\n                return true;\r\n            } else {\r\n                return false;\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n\r\n    public String getDescription() {\r\n        return \"PDF files\";\r\n    }\r\n\r\n    /**\r\n     * Get the extension of a file.\r\n     */\r\n    public static String getExtension(File f) {\r\n        String ext = null;\r\n        String s = f.getName();\r\n        int i = s.lastIndexOf('.');\r\n        if (i > 0 && i < s.length() - 1) {\r\n            ext = s.substring(i + 1).toLowerCase();\r\n        }\r\n        return ext;\r\n    }\r\n}\r\n",
		"id": "EvoSuiteBenchmark/109_pdfsam/src/main/java/it/pdfsam/utils/PdfFilterTest0.java",
		"test_prompt": "// PdfFilterTest0.java\npackage it.pdfsam.utils;\n\nimport java.io.File;\nimport javax.swing.filechooser.FileFilter;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link PdfFilter}.\n* It contains ten unit test cases for the {@link PdfFilter#accept(File)} method.\n*/\nclass PdfFilterTest0 {"
	},
	{
		"original_code": "// PdfFilter.java\n/*\r\n * Created on 03-Feb-2006\r\n * Copyright (C) 2006 by Andrea Vacondio.\r\n *\r\n * This program is free software; you can redistribute it and/or modify it under the terms of the \r\n * GNU General Public License as published by the Free Software Foundation; \r\n * either version 2 of the License.\r\n * This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; \r\n * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. \r\n * See the GNU General Public License for more details.\r\n * You should have received a copy of the GNU General Public License along with this program; \r\n * if not, write to the Free Software Foundation, Inc., \r\n *  59 Temple Place, Suite 330, Boston, MA 02111-1307 USA\r\n */\r\npackage it.pdfsam.utils;\r\n\r\nimport java.io.File;\r\nimport javax.swing.filechooser.FileFilter;\r\n\r\n/**\r\n * Filter for the JFileChooser. Used by merge and split plugin to chose input files.\r\n *\r\n * @author Andrea Vacondio\r\n * @see javax.swing.JFileChooser\r\n */\r\npublic class PdfFilter extends FileFilter {\r\n\r\n    public boolean accept(File f) {\r\n        if (f.isDirectory()) {\r\n            return true;\r\n        }\r\n        String extension = PdfFilter.getExtension(f);\r\n        if (extension != null) {\r\n            if (extension.equals(\"PDF\".toLowerCase())) {\r\n                return true;\r\n            } else {\r\n                return false;\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n\r\n    public String getDescription() {\r\n        return \"PDF files\";\r\n    }\r\n\r\n    /**\r\n     * Get the extension of a file.\r\n     */\r\n    public static String getExtension(File f) {\r\n        String ext = null;\r\n        String s = f.getName();\r\n        int i = s.lastIndexOf('.');\r\n        if (i > 0 && i < s.length() - 1) {\r\n            ext = s.substring(i + 1).toLowerCase();\r\n        }\r\n        return ext;\r\n    }\r\n}\r\n",
		"id": "EvoSuiteBenchmark/109_pdfsam/src/main/java/it/pdfsam/utils/PdfFilterTest1.java",
		"test_prompt": "// PdfFilterTest1.java\npackage it.pdfsam.utils;\n\nimport java.io.File;\nimport javax.swing.filechooser.FileFilter;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link PdfFilter}.\n* It contains ten unit test cases for the {@link PdfFilter#getExtension(File)} method.\n*/\nclass PdfFilterTest1 {"
	},
	{
		"original_code": "// PlugInsLoader.java\n/*\n * Created on 4-feb-2006\n * Copyright (C) 2006 by Andrea Vacondio.\n *\n * This program is free software; you can redistribute it and/or modify it under the terms of the \n * GNU General Public License as published by the Free Software Foundation; \n * either version 2 of the License.\n * This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; \n * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. \n * See the GNU General Public License for more details.\n * You should have received a copy of the GNU General Public License along with this program; \n * if not, write to the Free Software Foundation, Inc., \n *  59 Temple Place, Suite 330, Boston, MA 02111-1307 USA\n */\npackage it.pdfsam.utils;\n\nimport it.pdfsam.exceptions.PluginLoadException;\nimport java.io.File;\nimport java.net.MalformedURLException;\nimport java.net.URL;\nimport java.net.URLClassLoader;\nimport java.net.URLDecoder;\nimport java.util.ArrayList;\n\n/**\n * Loader for plugins. This tryes to get the plugins directory if no plugs_dir is given.\n * The plugins directory list is loaded and than the MainGUI tryes to load plugins one by one.\n * @author Andrea Vacondio\n * @see it.pdfsam.exceptions.PluginLoadException\n * @see it.pdfsam.interfaces.PlugablePanel\n * @see it.pdfsam.GUI.MainGUI\n */\npublic class PlugInsLoader {\n\n    private String pluginsdir;\n\n    private ArrayList p_list;\n\n    private int p_number;\n\n    private String jar_name;\n\n    static final Class PLUGIN_INTERFACE_CLASS = it.pdfsam.interfaces.PlugablePanel.class;\n\n    /**\n     * Constructor\n     * @param plugs_dir Plug ins absolute path. If it's null or empty it tryies to find the plugins dir.\n     * @throws PluginLoadException\n     */\n    public PlugInsLoader(String plugs_dir) throws PluginLoadException {\n        if (plugs_dir != null) {\n            if (plugs_dir.trim().equals(\"\")) {\n                try {\n                    File plugs_path = new File(URLDecoder.decode(getClass().getProtectionDomain().getCodeSource().getLocation().getPath(), \"UTF-8\"));\n                    pluginsdir = plugs_path.getParent() + \"/plugins\";\n                } catch (NullPointerException np_exception) {\n                    throw new PluginLoadException(\"Error getting pdfsam.jar file path\", np_exception);\n                } catch (Exception n_exception) {\n                    throw new PluginLoadException(\"Error creating PlugInsLoader object\", n_exception);\n                }\n            } else {\n                pluginsdir = plugs_dir;\n            }\n        }\n        p_list = getPlugInsList();\n        p_number = p_list.size();\n    }\n\n    /**\n     * Get the list of directories under the plugins directory\n     * @return List of plugin directories\n     * @throws PluginLoadException\n     */\n    private ArrayList getPlugInsList() throws PluginLoadException {\n        File pi_dir;\n        //System.out.print(pluginsdir+\"\\n\");\n        try {\n            pi_dir = new File(pluginsdir);\n        } catch (NullPointerException np_exception) {\n            throw new PluginLoadException(\"Error getting working directory: \" + np_exception);\n        }\n        ArrayList retval = new ArrayList();\n        //fix 22/01/07\n        // Get all the files and directory under plugins diretcory\n        try {\n            File[] strFilesDirs = pi_dir.listFiles();\n            for (int i = 0; i < strFilesDirs.length; i++) {\n                if (strFilesDirs[i].isDirectory()) {\n                    //     System.out.print(strFilesDirs[i]+\"\\n\");\n                    retval.add(strFilesDirs[i]);\n                }\n            }\n        } catch (Exception exception) {\n            throw new PluginLoadException(\"Error getting plugins list: \" + exception.getMessage());\n        }\n        return retval;\n    }\n\n    /**\n     * Load the plugin number <code>num</code>. Where the plugin list is made while creaing PlugInsLoader instance.\n     * @param num Number of plugin to load\n     * @throws PluginLoadException\n     */\n    public Object loadPlugin(int num) throws PluginLoadException {\n        int counter = 0;\n        URLClassLoader urlcl = null;\n        //plugin dir\n        File currdir = ((File) p_list.get(num));\n        XMLConfig xml_plugin_object;\n        boolean found_interface = false;\n        boolean found_superclass = false;\n        //load config file\n        try {\n            //TODO find a good way\n            xml_plugin_object = new XMLConfig(currdir.toString() + \"/\");\n        } catch (Exception xml_exception) {\n            throw new PluginLoadException(\"Error getting plugin file config.xml\", xml_exception);\n        }\n        //scan dir\n        // This is a directory. Attempt to find jar files in that directory.\n        File[] str_files_dirs = currdir.listFiles(new JarFilter());\n        for (int i = 0; i < str_files_dirs.length; i++) {\n            //not a dir\n            if (!(str_files_dirs[i].isDirectory())) {\n                counter++;\n                jar_name = str_files_dirs[i].getName();\n            }\n        }\n        if (counter != 1) {\n            throw new PluginLoadException(\"Found zero or many jars in plugin directory \" + currdir);\n        } else {\n            //create url to the jar file\n            URL file_url;\n            try {\n                file_url = new File(p_list.get(num) + \"/\" + jar_name).toURL();\n            } catch (MalformedURLException url_exception) {\n                throw new PluginLoadException(\"Error creating URL to the jar file\", url_exception);\n            }\n            //create classloader\n            urlcl = new URLClassLoader(new URL[] { file_url });\n            Class cls;\n            try {\n                //get plugin class\n                cls = urlcl.loadClass(xml_plugin_object.getXMLConfigValue(\"/plugin/data/classname\"));\n            } catch (ClassNotFoundException cnf_exception) {\n                throw new PluginLoadException(\"Unable to load class, class not found\");\n            } catch (Exception e_exception) {\n                throw new PluginLoadException(e_exception.getMessage());\n            }\n            //get interfaces\n            Class[] class_array = cls.getInterfaces();\n            //check interfaces\n            for (int i = 0; i < class_array.length; i++) {\n                if (class_array[i].equals(PLUGIN_INTERFACE_CLASS)) {\n                    found_interface = true;\n                    break;\n                }\n            }\n            if (!found_interface) {\n                throw new PluginLoadException(\"Plugin \" + PLUGIN_INTERFACE_CLASS + \" not implemented\");\n            }\n            Class superclass = cls.getSuperclass();\n            if (superclass.isAssignableFrom(javax.swing.JPanel.class)) {\n                found_superclass = true;\n            }\n            if (!found_superclass) {\n                throw new PluginLoadException(\"Unable to load a plugin that is not JPanel subclass\");\n            } else {\n                try {\n                    return cls.newInstance();\n                } catch (InstantiationException i_exception) {\n                    throw new PluginLoadException(\"Unable to create class instance\", i_exception);\n                } catch (IllegalAccessException ia_exception) {\n                    throw new PluginLoadException(\"Unable access class file\", ia_exception);\n                }\n            }\n        }\n    }\n\n    /**\n     * @return Returns the number of directories under the plugins directory.\n     */\n    public int getPNumber() {\n        return p_number;\n    }\n}\n",
		"id": "EvoSuiteBenchmark/109_pdfsam/src/main/java/it/pdfsam/utils/PlugInsLoaderTest.java",
		"test_prompt": "// PlugInsLoaderTest.java\npackage it.pdfsam.utils;\n\nimport it.pdfsam.exceptions.PluginLoadException;\nimport java.io.File;\nimport java.net.MalformedURLException;\nimport java.net.URL;\nimport java.net.URLClassLoader;\nimport java.net.URLDecoder;\nimport java.util.ArrayList;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link PlugInsLoader}.\n* It contains ten unit test cases for the {@link PlugInsLoader#loadPlugin(int)} method.\n*/\nclass PlugInsLoaderTest {"
	},
	{
		"original_code": "// ThemeSelector.java\n/*\r\n * Created on 22-feb-2005\r\n *\r\n * Ritorna il LookAndFeel specificato dal file di configurazione\r\n * Copyright (C) 2006 by Andrea Vacondio.\r\n *\r\n * This program is free software; you can redistribute it and/or modify it under the terms of the \r\n * GNU General Public License as published by the Free Software Foundation; \r\n * either version 2 of the License.\r\n * This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; \r\n * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. \r\n * See the GNU General Public License for more details.\r\n * You should have received a copy of the GNU General Public License along with this program; \r\n * if not, write to the Free Software Foundation, Inc., \r\n *  59 Temple Place, Suite 330, Boston, MA 02111-1307 USA\r\n */\r\npackage it.pdfsam.utils;\r\n\r\nimport it.pdfsam.types.ListItem;\r\nimport java.util.LinkedList;\r\nimport javax.swing.UIManager;\r\nimport com.jgoodies.looks.plastic.PlasticLookAndFeel;\r\nimport com.jgoodies.looks.plastic.theme.BrownSugar;\r\nimport com.jgoodies.looks.plastic.theme.DarkStar;\r\nimport com.jgoodies.looks.plastic.theme.DesertBlue;\r\nimport com.jgoodies.looks.plastic.theme.DesertGreen;\r\nimport com.jgoodies.looks.plastic.theme.DesertRed;\r\nimport com.jgoodies.looks.plastic.theme.ExperienceBlue;\r\nimport com.jgoodies.looks.plastic.theme.ExperienceGreen;\r\nimport com.jgoodies.looks.plastic.theme.Silver;\r\nimport com.jgoodies.looks.plastic.theme.SkyBlue;\r\nimport com.jgoodies.looks.plastic.theme.SkyGreen;\r\nimport com.jgoodies.looks.plastic.theme.SkyKrupp;\r\nimport com.jgoodies.looks.plastic.theme.SkyPink;\r\nimport com.jgoodies.looks.plastic.theme.SkyYellow;\r\n\r\n/**\r\n * ThemeSelector class, it provides functions to let the user select the GUI theme\r\n * A GUI for this is not yet implemented\r\n * @author Andrea Vacondio\r\n */\r\npublic class ThemeSelector {\r\n\r\n    /*\r\n     * \r\n     */\r\n    public String getLAF(String LAF_number) {\r\n        String ThemeSelected;\r\n        try {\r\n            switch(Integer.parseInt(LAF_number)) {\r\n                case 1:\r\n                    ThemeSelected = UIManager.getSystemLookAndFeelClassName();\r\n                    break;\r\n                case 2:\r\n                    ThemeSelected = \"javax.swing.plaf.metal.MetalLookAndFeel\";\r\n                    break;\r\n                case 3:\r\n                    ThemeSelected = \"com.jgoodies.looks.plastic.Plastic3DLookAndFeel\";\r\n                    break;\r\n                case 4:\r\n                    ThemeSelected = \"com.jgoodies.looks.plastic.PlasticLookAndFeel\";\r\n                    break;\r\n                case 5:\r\n                    ThemeSelected = \"com.jgoodies.looks.plastic.PlasticXPLookAndFeel\";\r\n                    break;\r\n                case 6:\r\n                    ThemeSelected = \"com.jgoodies.looks.windows.WindowsLookAndFeel\";\r\n                    break;\r\n                default:\r\n                    ThemeSelected = UIManager.getCrossPlatformLookAndFeelClassName();\r\n                    break;\r\n            }\r\n            return ThemeSelected;\r\n        } catch (NumberFormatException e) {\r\n            return UIManager.getCrossPlatformLookAndFeelClassName();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Prints the available LAFs\r\n     */\r\n    public static void availableLAF() {\r\n        UIManager.LookAndFeelInfo[] info = UIManager.getInstalledLookAndFeels();\r\n        for (int i = 0; i < info.length; i++) {\r\n            // Get the name of the look and feel that is suitable for display to the user\r\n            String humanReadableName = info[i].getName();\r\n            String className = info[i].getClassName();\r\n            System.out.println(humanReadableName + \" \" + className);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @return a LinkedList of ListItem objects with the availales LAF\r\n     */\r\n    public static LinkedList getLAFList() {\r\n        LinkedList retval = new LinkedList();\r\n        retval.add(new ListItem(\"0\", \"Java\"));\r\n        retval.add(new ListItem(\"1\", \"System\"));\r\n        retval.add(new ListItem(\"2\", \"Metal\"));\r\n        retval.add(new ListItem(\"3\", \"Plastic3D\"));\r\n        retval.add(new ListItem(\"4\", \"Plastic\"));\r\n        retval.add(new ListItem(\"5\", \"PlasticXP\"));\r\n        retval.add(new ListItem(\"6\", \"Windows\"));\r\n        return retval;\r\n    }\r\n\r\n    /**\r\n     * @return  LinkedList of ListItem objects with the availales Themes form Plastic\r\n     */\r\n    public static LinkedList getThemeList() {\r\n        LinkedList retval = new LinkedList();\r\n        retval.add(new ListItem(\"0\", \"None\"));\r\n        retval.add(new ListItem(\"1\", \"DesertBlue\"));\r\n        retval.add(new ListItem(\"2\", \"DesertRed\"));\r\n        retval.add(new ListItem(\"3\", \"Silver\"));\r\n        retval.add(new ListItem(\"4\", \"SkyPink\"));\r\n        retval.add(new ListItem(\"5\", \"SkyKrupp\"));\r\n        retval.add(new ListItem(\"6\", \"SkyYellow\"));\r\n        retval.add(new ListItem(\"7\", \"SkyGreen\"));\r\n        retval.add(new ListItem(\"8\", \"DarkStar\"));\r\n        retval.add(new ListItem(\"9\", \"BrownSugar\"));\r\n        retval.add(new ListItem(\"10\", \"DesertGreen\"));\r\n        retval.add(new ListItem(\"11\", \"ExperienceBlue\"));\r\n        retval.add(new ListItem(\"12\", \"ExperienceGreen\"));\r\n        retval.add(new ListItem(\"13\", \"SkyBlue\"));\r\n        return retval;\r\n    }\r\n\r\n    /**\r\n     * @param LAF_number\r\n     * @return true if the LookAndFeel is Plastic type\r\n     */\r\n    public static boolean isPlastic(String LAF_number) {\r\n        try {\r\n            int tn = Integer.parseInt(LAF_number);\r\n            return ((tn >= 3) && (tn <= 5)) ? true : false;\r\n        } catch (NumberFormatException e) {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Sets the theme\r\n     * @param theme_number Theme number\r\n     * @return true if no exception in threw\r\n     */\r\n    public boolean setTheme(String theme_number) {\r\n        try {\r\n            switch(Integer.parseInt(theme_number)) {\r\n                case 1:\r\n                    PlasticLookAndFeel.setPlasticTheme(new DesertBlue());\r\n                    break;\r\n                case 2:\r\n                    PlasticLookAndFeel.setPlasticTheme(new DesertRed());\r\n                    break;\r\n                case 3:\r\n                    PlasticLookAndFeel.setPlasticTheme(new Silver());\r\n                    break;\r\n                case 4:\r\n                    PlasticLookAndFeel.setPlasticTheme(new SkyPink());\r\n                    break;\r\n                case 5:\r\n                    PlasticLookAndFeel.setPlasticTheme(new SkyKrupp());\r\n                    break;\r\n                case 6:\r\n                    PlasticLookAndFeel.setPlasticTheme(new SkyYellow());\r\n                    break;\r\n                case 7:\r\n                    PlasticLookAndFeel.setPlasticTheme(new SkyGreen());\r\n                    break;\r\n                case 8:\r\n                    PlasticLookAndFeel.setPlasticTheme(new DarkStar());\r\n                    break;\r\n                case 9:\r\n                    PlasticLookAndFeel.setPlasticTheme(new BrownSugar());\r\n                    break;\r\n                case 10:\r\n                    PlasticLookAndFeel.setPlasticTheme(new DesertGreen());\r\n                    break;\r\n                case 11:\r\n                    PlasticLookAndFeel.setPlasticTheme(new ExperienceBlue());\r\n                    break;\r\n                case 12:\r\n                    PlasticLookAndFeel.setPlasticTheme(new ExperienceGreen());\r\n                    break;\r\n                case 13:\r\n                    PlasticLookAndFeel.setPlasticTheme(new SkyBlue());\r\n                    break;\r\n                default:\r\n                    break;\r\n            }\r\n            return true;\r\n        } catch (NumberFormatException e) {\r\n            return false;\r\n        }\r\n    }\r\n}\r\n",
		"id": "EvoSuiteBenchmark/109_pdfsam/src/main/java/it/pdfsam/utils/ThemeSelectorTest0.java",
		"test_prompt": "// ThemeSelectorTest0.java\npackage it.pdfsam.utils;\n\nimport it.pdfsam.types.ListItem;\nimport java.util.LinkedList;\nimport javax.swing.UIManager;\nimport com.jgoodies.looks.plastic.PlasticLookAndFeel;\nimport com.jgoodies.looks.plastic.theme.BrownSugar;\nimport com.jgoodies.looks.plastic.theme.DarkStar;\nimport com.jgoodies.looks.plastic.theme.DesertBlue;\nimport com.jgoodies.looks.plastic.theme.DesertGreen;\nimport com.jgoodies.looks.plastic.theme.DesertRed;\nimport com.jgoodies.looks.plastic.theme.ExperienceBlue;\nimport com.jgoodies.looks.plastic.theme.ExperienceGreen;\nimport com.jgoodies.looks.plastic.theme.Silver;\nimport com.jgoodies.looks.plastic.theme.SkyBlue;\nimport com.jgoodies.looks.plastic.theme.SkyGreen;\nimport com.jgoodies.looks.plastic.theme.SkyKrupp;\nimport com.jgoodies.looks.plastic.theme.SkyPink;\nimport com.jgoodies.looks.plastic.theme.SkyYellow;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link ThemeSelector}.\n* It contains ten unit test cases for the {@link ThemeSelector#getLAFList()} method.\n*/\nclass ThemeSelectorTest0 {"
	},
	{
		"original_code": "// ThemeSelector.java\n/*\r\n * Created on 22-feb-2005\r\n *\r\n * Ritorna il LookAndFeel specificato dal file di configurazione\r\n * Copyright (C) 2006 by Andrea Vacondio.\r\n *\r\n * This program is free software; you can redistribute it and/or modify it under the terms of the \r\n * GNU General Public License as published by the Free Software Foundation; \r\n * either version 2 of the License.\r\n * This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; \r\n * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. \r\n * See the GNU General Public License for more details.\r\n * You should have received a copy of the GNU General Public License along with this program; \r\n * if not, write to the Free Software Foundation, Inc., \r\n *  59 Temple Place, Suite 330, Boston, MA 02111-1307 USA\r\n */\r\npackage it.pdfsam.utils;\r\n\r\nimport it.pdfsam.types.ListItem;\r\nimport java.util.LinkedList;\r\nimport javax.swing.UIManager;\r\nimport com.jgoodies.looks.plastic.PlasticLookAndFeel;\r\nimport com.jgoodies.looks.plastic.theme.BrownSugar;\r\nimport com.jgoodies.looks.plastic.theme.DarkStar;\r\nimport com.jgoodies.looks.plastic.theme.DesertBlue;\r\nimport com.jgoodies.looks.plastic.theme.DesertGreen;\r\nimport com.jgoodies.looks.plastic.theme.DesertRed;\r\nimport com.jgoodies.looks.plastic.theme.ExperienceBlue;\r\nimport com.jgoodies.looks.plastic.theme.ExperienceGreen;\r\nimport com.jgoodies.looks.plastic.theme.Silver;\r\nimport com.jgoodies.looks.plastic.theme.SkyBlue;\r\nimport com.jgoodies.looks.plastic.theme.SkyGreen;\r\nimport com.jgoodies.looks.plastic.theme.SkyKrupp;\r\nimport com.jgoodies.looks.plastic.theme.SkyPink;\r\nimport com.jgoodies.looks.plastic.theme.SkyYellow;\r\n\r\n/**\r\n * ThemeSelector class, it provides functions to let the user select the GUI theme\r\n * A GUI for this is not yet implemented\r\n * @author Andrea Vacondio\r\n */\r\npublic class ThemeSelector {\r\n\r\n    /*\r\n     * \r\n     */\r\n    public String getLAF(String LAF_number) {\r\n        String ThemeSelected;\r\n        try {\r\n            switch(Integer.parseInt(LAF_number)) {\r\n                case 1:\r\n                    ThemeSelected = UIManager.getSystemLookAndFeelClassName();\r\n                    break;\r\n                case 2:\r\n                    ThemeSelected = \"javax.swing.plaf.metal.MetalLookAndFeel\";\r\n                    break;\r\n                case 3:\r\n                    ThemeSelected = \"com.jgoodies.looks.plastic.Plastic3DLookAndFeel\";\r\n                    break;\r\n                case 4:\r\n                    ThemeSelected = \"com.jgoodies.looks.plastic.PlasticLookAndFeel\";\r\n                    break;\r\n                case 5:\r\n                    ThemeSelected = \"com.jgoodies.looks.plastic.PlasticXPLookAndFeel\";\r\n                    break;\r\n                case 6:\r\n                    ThemeSelected = \"com.jgoodies.looks.windows.WindowsLookAndFeel\";\r\n                    break;\r\n                default:\r\n                    ThemeSelected = UIManager.getCrossPlatformLookAndFeelClassName();\r\n                    break;\r\n            }\r\n            return ThemeSelected;\r\n        } catch (NumberFormatException e) {\r\n            return UIManager.getCrossPlatformLookAndFeelClassName();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Prints the available LAFs\r\n     */\r\n    public static void availableLAF() {\r\n        UIManager.LookAndFeelInfo[] info = UIManager.getInstalledLookAndFeels();\r\n        for (int i = 0; i < info.length; i++) {\r\n            // Get the name of the look and feel that is suitable for display to the user\r\n            String humanReadableName = info[i].getName();\r\n            String className = info[i].getClassName();\r\n            System.out.println(humanReadableName + \" \" + className);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @return a LinkedList of ListItem objects with the availales LAF\r\n     */\r\n    public static LinkedList getLAFList() {\r\n        LinkedList retval = new LinkedList();\r\n        retval.add(new ListItem(\"0\", \"Java\"));\r\n        retval.add(new ListItem(\"1\", \"System\"));\r\n        retval.add(new ListItem(\"2\", \"Metal\"));\r\n        retval.add(new ListItem(\"3\", \"Plastic3D\"));\r\n        retval.add(new ListItem(\"4\", \"Plastic\"));\r\n        retval.add(new ListItem(\"5\", \"PlasticXP\"));\r\n        retval.add(new ListItem(\"6\", \"Windows\"));\r\n        return retval;\r\n    }\r\n\r\n    /**\r\n     * @return  LinkedList of ListItem objects with the availales Themes form Plastic\r\n     */\r\n    public static LinkedList getThemeList() {\r\n        LinkedList retval = new LinkedList();\r\n        retval.add(new ListItem(\"0\", \"None\"));\r\n        retval.add(new ListItem(\"1\", \"DesertBlue\"));\r\n        retval.add(new ListItem(\"2\", \"DesertRed\"));\r\n        retval.add(new ListItem(\"3\", \"Silver\"));\r\n        retval.add(new ListItem(\"4\", \"SkyPink\"));\r\n        retval.add(new ListItem(\"5\", \"SkyKrupp\"));\r\n        retval.add(new ListItem(\"6\", \"SkyYellow\"));\r\n        retval.add(new ListItem(\"7\", \"SkyGreen\"));\r\n        retval.add(new ListItem(\"8\", \"DarkStar\"));\r\n        retval.add(new ListItem(\"9\", \"BrownSugar\"));\r\n        retval.add(new ListItem(\"10\", \"DesertGreen\"));\r\n        retval.add(new ListItem(\"11\", \"ExperienceBlue\"));\r\n        retval.add(new ListItem(\"12\", \"ExperienceGreen\"));\r\n        retval.add(new ListItem(\"13\", \"SkyBlue\"));\r\n        return retval;\r\n    }\r\n\r\n    /**\r\n     * @param LAF_number\r\n     * @return true if the LookAndFeel is Plastic type\r\n     */\r\n    public static boolean isPlastic(String LAF_number) {\r\n        try {\r\n            int tn = Integer.parseInt(LAF_number);\r\n            return ((tn >= 3) && (tn <= 5)) ? true : false;\r\n        } catch (NumberFormatException e) {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Sets the theme\r\n     * @param theme_number Theme number\r\n     * @return true if no exception in threw\r\n     */\r\n    public boolean setTheme(String theme_number) {\r\n        try {\r\n            switch(Integer.parseInt(theme_number)) {\r\n                case 1:\r\n                    PlasticLookAndFeel.setPlasticTheme(new DesertBlue());\r\n                    break;\r\n                case 2:\r\n                    PlasticLookAndFeel.setPlasticTheme(new DesertRed());\r\n                    break;\r\n                case 3:\r\n                    PlasticLookAndFeel.setPlasticTheme(new Silver());\r\n                    break;\r\n                case 4:\r\n                    PlasticLookAndFeel.setPlasticTheme(new SkyPink());\r\n                    break;\r\n                case 5:\r\n                    PlasticLookAndFeel.setPlasticTheme(new SkyKrupp());\r\n                    break;\r\n                case 6:\r\n                    PlasticLookAndFeel.setPlasticTheme(new SkyYellow());\r\n                    break;\r\n                case 7:\r\n                    PlasticLookAndFeel.setPlasticTheme(new SkyGreen());\r\n                    break;\r\n                case 8:\r\n                    PlasticLookAndFeel.setPlasticTheme(new DarkStar());\r\n                    break;\r\n                case 9:\r\n                    PlasticLookAndFeel.setPlasticTheme(new BrownSugar());\r\n                    break;\r\n                case 10:\r\n                    PlasticLookAndFeel.setPlasticTheme(new DesertGreen());\r\n                    break;\r\n                case 11:\r\n                    PlasticLookAndFeel.setPlasticTheme(new ExperienceBlue());\r\n                    break;\r\n                case 12:\r\n                    PlasticLookAndFeel.setPlasticTheme(new ExperienceGreen());\r\n                    break;\r\n                case 13:\r\n                    PlasticLookAndFeel.setPlasticTheme(new SkyBlue());\r\n                    break;\r\n                default:\r\n                    break;\r\n            }\r\n            return true;\r\n        } catch (NumberFormatException e) {\r\n            return false;\r\n        }\r\n    }\r\n}\r\n",
		"id": "EvoSuiteBenchmark/109_pdfsam/src/main/java/it/pdfsam/utils/ThemeSelectorTest1.java",
		"test_prompt": "// ThemeSelectorTest1.java\npackage it.pdfsam.utils;\n\nimport it.pdfsam.types.ListItem;\nimport java.util.LinkedList;\nimport javax.swing.UIManager;\nimport com.jgoodies.looks.plastic.PlasticLookAndFeel;\nimport com.jgoodies.looks.plastic.theme.BrownSugar;\nimport com.jgoodies.looks.plastic.theme.DarkStar;\nimport com.jgoodies.looks.plastic.theme.DesertBlue;\nimport com.jgoodies.looks.plastic.theme.DesertGreen;\nimport com.jgoodies.looks.plastic.theme.DesertRed;\nimport com.jgoodies.looks.plastic.theme.ExperienceBlue;\nimport com.jgoodies.looks.plastic.theme.ExperienceGreen;\nimport com.jgoodies.looks.plastic.theme.Silver;\nimport com.jgoodies.looks.plastic.theme.SkyBlue;\nimport com.jgoodies.looks.plastic.theme.SkyGreen;\nimport com.jgoodies.looks.plastic.theme.SkyKrupp;\nimport com.jgoodies.looks.plastic.theme.SkyPink;\nimport com.jgoodies.looks.plastic.theme.SkyYellow;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link ThemeSelector}.\n* It contains ten unit test cases for the {@link ThemeSelector#getThemeList()} method.\n*/\nclass ThemeSelectorTest1 {"
	},
	{
		"original_code": "// ThemeSelector.java\n/*\r\n * Created on 22-feb-2005\r\n *\r\n * Ritorna il LookAndFeel specificato dal file di configurazione\r\n * Copyright (C) 2006 by Andrea Vacondio.\r\n *\r\n * This program is free software; you can redistribute it and/or modify it under the terms of the \r\n * GNU General Public License as published by the Free Software Foundation; \r\n * either version 2 of the License.\r\n * This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; \r\n * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. \r\n * See the GNU General Public License for more details.\r\n * You should have received a copy of the GNU General Public License along with this program; \r\n * if not, write to the Free Software Foundation, Inc., \r\n *  59 Temple Place, Suite 330, Boston, MA 02111-1307 USA\r\n */\r\npackage it.pdfsam.utils;\r\n\r\nimport it.pdfsam.types.ListItem;\r\nimport java.util.LinkedList;\r\nimport javax.swing.UIManager;\r\nimport com.jgoodies.looks.plastic.PlasticLookAndFeel;\r\nimport com.jgoodies.looks.plastic.theme.BrownSugar;\r\nimport com.jgoodies.looks.plastic.theme.DarkStar;\r\nimport com.jgoodies.looks.plastic.theme.DesertBlue;\r\nimport com.jgoodies.looks.plastic.theme.DesertGreen;\r\nimport com.jgoodies.looks.plastic.theme.DesertRed;\r\nimport com.jgoodies.looks.plastic.theme.ExperienceBlue;\r\nimport com.jgoodies.looks.plastic.theme.ExperienceGreen;\r\nimport com.jgoodies.looks.plastic.theme.Silver;\r\nimport com.jgoodies.looks.plastic.theme.SkyBlue;\r\nimport com.jgoodies.looks.plastic.theme.SkyGreen;\r\nimport com.jgoodies.looks.plastic.theme.SkyKrupp;\r\nimport com.jgoodies.looks.plastic.theme.SkyPink;\r\nimport com.jgoodies.looks.plastic.theme.SkyYellow;\r\n\r\n/**\r\n * ThemeSelector class, it provides functions to let the user select the GUI theme\r\n * A GUI for this is not yet implemented\r\n * @author Andrea Vacondio\r\n */\r\npublic class ThemeSelector {\r\n\r\n    /*\r\n     * \r\n     */\r\n    public String getLAF(String LAF_number) {\r\n        String ThemeSelected;\r\n        try {\r\n            switch(Integer.parseInt(LAF_number)) {\r\n                case 1:\r\n                    ThemeSelected = UIManager.getSystemLookAndFeelClassName();\r\n                    break;\r\n                case 2:\r\n                    ThemeSelected = \"javax.swing.plaf.metal.MetalLookAndFeel\";\r\n                    break;\r\n                case 3:\r\n                    ThemeSelected = \"com.jgoodies.looks.plastic.Plastic3DLookAndFeel\";\r\n                    break;\r\n                case 4:\r\n                    ThemeSelected = \"com.jgoodies.looks.plastic.PlasticLookAndFeel\";\r\n                    break;\r\n                case 5:\r\n                    ThemeSelected = \"com.jgoodies.looks.plastic.PlasticXPLookAndFeel\";\r\n                    break;\r\n                case 6:\r\n                    ThemeSelected = \"com.jgoodies.looks.windows.WindowsLookAndFeel\";\r\n                    break;\r\n                default:\r\n                    ThemeSelected = UIManager.getCrossPlatformLookAndFeelClassName();\r\n                    break;\r\n            }\r\n            return ThemeSelected;\r\n        } catch (NumberFormatException e) {\r\n            return UIManager.getCrossPlatformLookAndFeelClassName();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Prints the available LAFs\r\n     */\r\n    public static void availableLAF() {\r\n        UIManager.LookAndFeelInfo[] info = UIManager.getInstalledLookAndFeels();\r\n        for (int i = 0; i < info.length; i++) {\r\n            // Get the name of the look and feel that is suitable for display to the user\r\n            String humanReadableName = info[i].getName();\r\n            String className = info[i].getClassName();\r\n            System.out.println(humanReadableName + \" \" + className);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @return a LinkedList of ListItem objects with the availales LAF\r\n     */\r\n    public static LinkedList getLAFList() {\r\n        LinkedList retval = new LinkedList();\r\n        retval.add(new ListItem(\"0\", \"Java\"));\r\n        retval.add(new ListItem(\"1\", \"System\"));\r\n        retval.add(new ListItem(\"2\", \"Metal\"));\r\n        retval.add(new ListItem(\"3\", \"Plastic3D\"));\r\n        retval.add(new ListItem(\"4\", \"Plastic\"));\r\n        retval.add(new ListItem(\"5\", \"PlasticXP\"));\r\n        retval.add(new ListItem(\"6\", \"Windows\"));\r\n        return retval;\r\n    }\r\n\r\n    /**\r\n     * @return  LinkedList of ListItem objects with the availales Themes form Plastic\r\n     */\r\n    public static LinkedList getThemeList() {\r\n        LinkedList retval = new LinkedList();\r\n        retval.add(new ListItem(\"0\", \"None\"));\r\n        retval.add(new ListItem(\"1\", \"DesertBlue\"));\r\n        retval.add(new ListItem(\"2\", \"DesertRed\"));\r\n        retval.add(new ListItem(\"3\", \"Silver\"));\r\n        retval.add(new ListItem(\"4\", \"SkyPink\"));\r\n        retval.add(new ListItem(\"5\", \"SkyKrupp\"));\r\n        retval.add(new ListItem(\"6\", \"SkyYellow\"));\r\n        retval.add(new ListItem(\"7\", \"SkyGreen\"));\r\n        retval.add(new ListItem(\"8\", \"DarkStar\"));\r\n        retval.add(new ListItem(\"9\", \"BrownSugar\"));\r\n        retval.add(new ListItem(\"10\", \"DesertGreen\"));\r\n        retval.add(new ListItem(\"11\", \"ExperienceBlue\"));\r\n        retval.add(new ListItem(\"12\", \"ExperienceGreen\"));\r\n        retval.add(new ListItem(\"13\", \"SkyBlue\"));\r\n        return retval;\r\n    }\r\n\r\n    /**\r\n     * @param LAF_number\r\n     * @return true if the LookAndFeel is Plastic type\r\n     */\r\n    public static boolean isPlastic(String LAF_number) {\r\n        try {\r\n            int tn = Integer.parseInt(LAF_number);\r\n            return ((tn >= 3) && (tn <= 5)) ? true : false;\r\n        } catch (NumberFormatException e) {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Sets the theme\r\n     * @param theme_number Theme number\r\n     * @return true if no exception in threw\r\n     */\r\n    public boolean setTheme(String theme_number) {\r\n        try {\r\n            switch(Integer.parseInt(theme_number)) {\r\n                case 1:\r\n                    PlasticLookAndFeel.setPlasticTheme(new DesertBlue());\r\n                    break;\r\n                case 2:\r\n                    PlasticLookAndFeel.setPlasticTheme(new DesertRed());\r\n                    break;\r\n                case 3:\r\n                    PlasticLookAndFeel.setPlasticTheme(new Silver());\r\n                    break;\r\n                case 4:\r\n                    PlasticLookAndFeel.setPlasticTheme(new SkyPink());\r\n                    break;\r\n                case 5:\r\n                    PlasticLookAndFeel.setPlasticTheme(new SkyKrupp());\r\n                    break;\r\n                case 6:\r\n                    PlasticLookAndFeel.setPlasticTheme(new SkyYellow());\r\n                    break;\r\n                case 7:\r\n                    PlasticLookAndFeel.setPlasticTheme(new SkyGreen());\r\n                    break;\r\n                case 8:\r\n                    PlasticLookAndFeel.setPlasticTheme(new DarkStar());\r\n                    break;\r\n                case 9:\r\n                    PlasticLookAndFeel.setPlasticTheme(new BrownSugar());\r\n                    break;\r\n                case 10:\r\n                    PlasticLookAndFeel.setPlasticTheme(new DesertGreen());\r\n                    break;\r\n                case 11:\r\n                    PlasticLookAndFeel.setPlasticTheme(new ExperienceBlue());\r\n                    break;\r\n                case 12:\r\n                    PlasticLookAndFeel.setPlasticTheme(new ExperienceGreen());\r\n                    break;\r\n                case 13:\r\n                    PlasticLookAndFeel.setPlasticTheme(new SkyBlue());\r\n                    break;\r\n                default:\r\n                    break;\r\n            }\r\n            return true;\r\n        } catch (NumberFormatException e) {\r\n            return false;\r\n        }\r\n    }\r\n}\r\n",
		"id": "EvoSuiteBenchmark/109_pdfsam/src/main/java/it/pdfsam/utils/ThemeSelectorTest2.java",
		"test_prompt": "// ThemeSelectorTest2.java\npackage it.pdfsam.utils;\n\nimport it.pdfsam.types.ListItem;\nimport java.util.LinkedList;\nimport javax.swing.UIManager;\nimport com.jgoodies.looks.plastic.PlasticLookAndFeel;\nimport com.jgoodies.looks.plastic.theme.BrownSugar;\nimport com.jgoodies.looks.plastic.theme.DarkStar;\nimport com.jgoodies.looks.plastic.theme.DesertBlue;\nimport com.jgoodies.looks.plastic.theme.DesertGreen;\nimport com.jgoodies.looks.plastic.theme.DesertRed;\nimport com.jgoodies.looks.plastic.theme.ExperienceBlue;\nimport com.jgoodies.looks.plastic.theme.ExperienceGreen;\nimport com.jgoodies.looks.plastic.theme.Silver;\nimport com.jgoodies.looks.plastic.theme.SkyBlue;\nimport com.jgoodies.looks.plastic.theme.SkyGreen;\nimport com.jgoodies.looks.plastic.theme.SkyKrupp;\nimport com.jgoodies.looks.plastic.theme.SkyPink;\nimport com.jgoodies.looks.plastic.theme.SkyYellow;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link ThemeSelector}.\n* It contains ten unit test cases for the {@link ThemeSelector#isPlastic(String)} method.\n*/\nclass ThemeSelectorTest2 {"
	},
	{
		"original_code": "// XMLParser.java\n/*\r\n * Created on 19-feb-2005\r\n *\r\n * Copyright (C) 2006 by Andrea Vacondio.\r\n *\r\n * This program is free software; you can redistribute it and/or modify it under the terms of the \r\n * GNU General Public License as published by the Free Software Foundation; \r\n * either version 2 of the License.\r\n * This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; \r\n * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. \r\n * See the GNU General Public License for more details.\r\n * You should have received a copy of the GNU General Public License along with this program; \r\n * if not, write to the Free Software Foundation, Inc., \r\n *  59 Temple Place, Suite 330, Boston, MA 02111-1307 USA\r\n */\r\npackage it.pdfsam.utils;\r\n\r\nimport java.io.BufferedOutputStream;\r\nimport java.io.File;\r\nimport java.io.FileOutputStream;\r\nimport java.net.URL;\r\nimport org.dom4j.Document;\r\nimport org.dom4j.io.OutputFormat;\r\nimport org.dom4j.io.SAXReader;\r\nimport org.dom4j.io.XMLWriter;\r\n\r\n/**\r\n * Parser XML. Given and XML file, it's parsed and the DOM object created. If and error occur\r\n * an exception is thrown.\r\n * @author Andrea Vacondio\r\n * @see it.pdfsam.utils.XMLConfig\r\n */\r\npublic class XMLParser {\r\n\r\n    /**\r\n     * Parse the xml file\r\n     * @return The DOM object\r\n     */\r\n    public static Document parseXmlFile(String full_path) throws Exception {\r\n        Document document = null;\r\n        try {\r\n            File inputFile = new File(full_path);\r\n            if (inputFile.isFile()) {\r\n                SAXReader reader = new SAXReader();\r\n                document = reader.read(inputFile);\r\n            } else {\r\n                throw new Exception(\"Unable to read \" + full_path + \".\");\r\n            }\r\n        } catch (Exception e) {\r\n            throw new Exception(\"Exception creating Document.\", e);\r\n        }\r\n        return document;\r\n    }\r\n\r\n    /**\r\n     * Parse the url\r\n     * @return The DOM object\r\n     */\r\n    public static Document parseXmlFile(URL url) throws Exception {\r\n        Document document = null;\r\n        try {\r\n            SAXReader reader = new SAXReader();\r\n            document = reader.read(url);\r\n        } catch (Exception e) {\r\n            throw new Exception(\"Exception reading \" + url + \":\" + e.getMessage(), e);\r\n        }\r\n        return document;\r\n    }\r\n\r\n    /**\r\n     * Write the DOM to the xml file\r\n     * @param domDoc Document to write\r\n     * @param full_path Full path to the xml file to write\r\n     * @throws Exception\r\n     */\r\n    public static void writeXmlFile(Document domDoc, String full_path) throws Exception {\r\n        BufferedOutputStream bos = new BufferedOutputStream(new FileOutputStream(full_path));\r\n        OutputFormat format = OutputFormat.createPrettyPrint();\r\n        format.setEncoding(\"UTF-8\");\r\n        XMLWriter xml_file_writer = new XMLWriter(bos, format);\r\n        xml_file_writer.write(domDoc);\r\n        xml_file_writer.flush();\r\n        xml_file_writer.close();\r\n    }\r\n}\r\n",
		"id": "EvoSuiteBenchmark/109_pdfsam/src/main/java/it/pdfsam/utils/XMLParserTest0.java",
		"test_prompt": "// XMLParserTest0.java\npackage it.pdfsam.utils;\n\nimport java.io.BufferedOutputStream;\nimport java.io.File;\nimport java.io.FileOutputStream;\nimport java.net.URL;\nimport org.dom4j.Document;\nimport org.dom4j.io.OutputFormat;\nimport org.dom4j.io.SAXReader;\nimport org.dom4j.io.XMLWriter;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link XMLParser}.\n* It contains ten unit test cases for the {@link XMLParser#parseXmlFile(String)} method.\n*/\nclass XMLParserTest0 {"
	},
	{
		"original_code": "// XMLParser.java\n/*\r\n * Created on 19-feb-2005\r\n *\r\n * Copyright (C) 2006 by Andrea Vacondio.\r\n *\r\n * This program is free software; you can redistribute it and/or modify it under the terms of the \r\n * GNU General Public License as published by the Free Software Foundation; \r\n * either version 2 of the License.\r\n * This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; \r\n * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. \r\n * See the GNU General Public License for more details.\r\n * You should have received a copy of the GNU General Public License along with this program; \r\n * if not, write to the Free Software Foundation, Inc., \r\n *  59 Temple Place, Suite 330, Boston, MA 02111-1307 USA\r\n */\r\npackage it.pdfsam.utils;\r\n\r\nimport java.io.BufferedOutputStream;\r\nimport java.io.File;\r\nimport java.io.FileOutputStream;\r\nimport java.net.URL;\r\nimport org.dom4j.Document;\r\nimport org.dom4j.io.OutputFormat;\r\nimport org.dom4j.io.SAXReader;\r\nimport org.dom4j.io.XMLWriter;\r\n\r\n/**\r\n * Parser XML. Given and XML file, it's parsed and the DOM object created. If and error occur\r\n * an exception is thrown.\r\n * @author Andrea Vacondio\r\n * @see it.pdfsam.utils.XMLConfig\r\n */\r\npublic class XMLParser {\r\n\r\n    /**\r\n     * Parse the xml file\r\n     * @return The DOM object\r\n     */\r\n    public static Document parseXmlFile(String full_path) throws Exception {\r\n        Document document = null;\r\n        try {\r\n            File inputFile = new File(full_path);\r\n            if (inputFile.isFile()) {\r\n                SAXReader reader = new SAXReader();\r\n                document = reader.read(inputFile);\r\n            } else {\r\n                throw new Exception(\"Unable to read \" + full_path + \".\");\r\n            }\r\n        } catch (Exception e) {\r\n            throw new Exception(\"Exception creating Document.\", e);\r\n        }\r\n        return document;\r\n    }\r\n\r\n    /**\r\n     * Parse the url\r\n     * @return The DOM object\r\n     */\r\n    public static Document parseXmlFile(URL url) throws Exception {\r\n        Document document = null;\r\n        try {\r\n            SAXReader reader = new SAXReader();\r\n            document = reader.read(url);\r\n        } catch (Exception e) {\r\n            throw new Exception(\"Exception reading \" + url + \":\" + e.getMessage(), e);\r\n        }\r\n        return document;\r\n    }\r\n\r\n    /**\r\n     * Write the DOM to the xml file\r\n     * @param domDoc Document to write\r\n     * @param full_path Full path to the xml file to write\r\n     * @throws Exception\r\n     */\r\n    public static void writeXmlFile(Document domDoc, String full_path) throws Exception {\r\n        BufferedOutputStream bos = new BufferedOutputStream(new FileOutputStream(full_path));\r\n        OutputFormat format = OutputFormat.createPrettyPrint();\r\n        format.setEncoding(\"UTF-8\");\r\n        XMLWriter xml_file_writer = new XMLWriter(bos, format);\r\n        xml_file_writer.write(domDoc);\r\n        xml_file_writer.flush();\r\n        xml_file_writer.close();\r\n    }\r\n}\r\n",
		"id": "EvoSuiteBenchmark/109_pdfsam/src/main/java/it/pdfsam/utils/XMLParserTest1.java",
		"test_prompt": "// XMLParserTest1.java\npackage it.pdfsam.utils;\n\nimport java.io.BufferedOutputStream;\nimport java.io.File;\nimport java.io.FileOutputStream;\nimport java.net.URL;\nimport org.dom4j.Document;\nimport org.dom4j.io.OutputFormat;\nimport org.dom4j.io.SAXReader;\nimport org.dom4j.io.XMLWriter;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link XMLParser}.\n* It contains ten unit test cases for the {@link XMLParser#parseXmlFile(URL)} method.\n*/\nclass XMLParserTest1 {"
	},
	{
		"original_code": "// PluginsModel.java\n/*\r\n * Created on 08-Feb-2006\r\n * Model for the list plugins table\r\n * Copyright (C) 2006 by Andrea Vacondio.\r\n *\r\n * This program is free software; you can redistribute it and/or modify it under the terms of the \r\n * GNU General Public License as published by the Free Software Foundation; \r\n * either version 2 of the License.\r\n * This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; \r\n * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. \r\n * See the GNU General Public License for more details.\r\n * You should have received a copy of the GNU General Public License along with this program; \r\n * if not, write to the Free Software Foundation, Inc., \r\n *  59 Temple Place, Suite 330, Boston, MA 02111-1307 USA\r\n */\r\npackage it.pdfsam.models;\r\n\r\nimport java.util.ArrayList;\r\nimport javax.swing.table.AbstractTableModel;\r\n\r\n/**\r\n * Table model for the info GUI table. It shows informations about loaded plugins\r\n * @author Andrea Vacondio\r\n * @see it.pdfsam.GUI.InfoGUI\r\n */\r\npublic class PluginsModel extends AbstractTableModel {\r\n\r\n    /**\r\n     */\r\n    private static final long serialVersionUID = 6035234312626809873L;\r\n\r\n    //colums names\r\n    private String[] columnNames = { \"Name\", \"Version\", \"Author\" };\r\n\r\n    //data array\r\n    private ArrayList data = new ArrayList();\r\n\r\n    public PluginsModel(ArrayList input_data) {\r\n        super();\r\n        data = input_data;\r\n    }\r\n\r\n    public int getColumnCount() {\r\n        return columnNames.length;\r\n    }\r\n\r\n    public int getRowCount() {\r\n        return data.size();\r\n    }\r\n\r\n    public boolean isCellEditable(int row, int col) {\r\n        return false;\r\n    }\r\n\r\n    public Object getValueAt(int rowIndex, int columnIndex) {\r\n        return ((Object[]) data.get(rowIndex))[columnIndex];\r\n    }\r\n\r\n    /**\r\n     * <p> Return column name\r\n     *\r\n     * @param col Column number\r\n     * @return Column name\r\n     */\r\n    public String getColumnName(int col) {\r\n        try {\r\n            return columnNames[col];\r\n        } catch (Exception e) {\r\n            return null;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @param columnNames The columnNames to set.\r\n     */\r\n    public void setColumnNames(String[] columnNames) {\r\n        this.columnNames = columnNames;\r\n    }\r\n}\r\n",
		"id": "EvoSuiteBenchmark/109_pdfsam/src/main/java/it/pdfsam/models/PluginsModelTest.java",
		"test_prompt": "// PluginsModelTest.java\npackage it.pdfsam.models;\n\nimport java.util.ArrayList;\nimport javax.swing.table.AbstractTableModel;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link PluginsModel}.\n* It contains ten unit test cases for the {@link PluginsModel#isCellEditable(int, int)} method.\n*/\nclass PluginsModelTest {"
	},
	{
		"original_code": "// GettextResource.java\n/* GNU gettext for Java\n * Copyright (C) 2001 Free Software Foundation, Inc.\n *\n * This program is free software; you can redistribute it and/or modify it\n * under the terms of the GNU Library General Public License as published\n * by the Free Software Foundation; either version 2, or (at your option)\n * any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n * Library General Public License for more details.\n *\n * You should have received a copy of the GNU Library General Public\n * License along with this program; if not, write to the Free Software\n * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n * USA.\n */\npackage it.pdfsam.gnu.gettext;\n\nimport java.lang.reflect.InvocationTargetException;\nimport java.lang.reflect.Method;\nimport java.lang.reflect.Modifier;\nimport java.util.MissingResourceException;\nimport java.util.ResourceBundle;\n\n/**\n * This class implements the main GNU libintl functions in Java.\n * <P>\n * Using the GNU gettext approach, compiled message catalogs are normal\n * Java ResourceBundle classes and are thus interoperable with standard\n * ResourceBundle based code.\n * <P>\n * The main differences between the Sun ResourceBundle approach and the\n * GNU gettext approach are:\n * <UL>\n *   <LI>In the Sun approach, the keys are abstract textual shortcuts.\n *       In the GNU gettext approach, the keys are the English/ASCII version\n *       of the messages.\n *   <LI>In the Sun approach, the translation files are called\n *       \"<VAR>Resource</VAR>_<VAR>locale</VAR>.properties\" and have non-ASCII\n *       characters encoded in the Java\n *       <CODE>\\</CODE><CODE>u<VAR>nnnn</VAR></CODE> syntax. Very few editors\n *       can natively display international characters in this format. In the\n *       GNU gettext approach, the translation files are called\n *       \"<VAR>Resource</VAR>.<VAR>locale</VAR>.po\"\n *       and are in the encoding the translator has chosen. Many editors\n *       can be used. There are at least three GUI translating tools\n *       (Emacs PO mode, KDE KBabel, GNOME gtranslator).\n *   <LI>In the Sun approach, the function\n *       <CODE>ResourceBundle.getString</CODE> throws a\n *       <CODE>MissingResourceException</CODE> when no translation is found.\n *       In the GNU gettext approach, the <CODE>gettext</CODE> function\n *       returns the (English) message key in that case.\n *   <LI>In the Sun approach, there is no support for plural handling.\n *       Even the most elaborate MessageFormat strings cannot provide decent\n *       plural handling. In the GNU gettext approach, we have the\n *       <CODE>ngettext</CODE> function.\n * </UL>\n * <P>\n * To compile GNU gettext message catalogs into Java ResourceBundle classes,\n * the <CODE>msgfmt</CODE> program can be used.\n *\n * @author Bruno Haible\n */\npublic abstract class GettextResource extends ResourceBundle {\n\n    public static final boolean verbose = false;\n\n    /**\n     * Returns the translation of <VAR>msgid</VAR>.\n     * @param catalog a ResourceBundle\n     * @param msgid the key string to be translated, an ASCII string\n     * @return the translation of <VAR>msgid</VAR>, or <VAR>msgid</VAR> if\n     *         none is found\n     */\n    public static String gettext(ResourceBundle catalog, String msgid) {\n        try {\n            String result = (String) catalog.getObject(msgid);\n            if (result != null)\n                return result;\n        } catch (MissingResourceException e) {\n        }\n        return msgid;\n    }\n\n    /**\n     * Returns the plural form for <VAR>n</VAR> of the translation of\n     * <VAR>msgid</VAR>.\n     * @param catalog a ResourceBundle\n     * @param msgid the key string to be translated, an ASCII string\n     * @param msgid_plural its English plural form\n     * @return the translation of <VAR>msgid</VAR> depending on <VAR>n</VAR>,\n     *         or <VAR>msgid</VAR> or <VAR>msgid_plural</VAR> if none is found\n     */\n    public static String ngettext(ResourceBundle catalog, String msgid, String msgid_plural, long n) {\n        // The reason why we use so many reflective API calls instead of letting\n        // the GNU gettext generated ResourceBundles implement some interface,\n        // is that we want the generated ResourceBundles to be completely\n        // standalone, so that migration from the Sun approach to the GNU gettext\n        // approach (without use of plurals) is as straightforward as possible.\n        //ResourceBundle origCatalog = catalog;\n        do {\n            // Try catalog itself.\n            if (verbose)\n                System.out.println(\"ngettext on \" + catalog);\n            Method handleGetObjectMethod = null;\n            Method getParentMethod = null;\n            try {\n                handleGetObjectMethod = catalog.getClass().getMethod(\"handleGetObject\", new Class[] { java.lang.String.class });\n                getParentMethod = catalog.getClass().getMethod(\"getParent\", new Class[0]);\n            } catch (NoSuchMethodException e) {\n            } catch (SecurityException e) {\n            }\n            if (verbose)\n                System.out.println(\"handleGetObject = \" + (handleGetObjectMethod != null) + \", getParent = \" + (getParentMethod != null));\n            if (handleGetObjectMethod != null && Modifier.isPublic(handleGetObjectMethod.getModifiers()) && getParentMethod != null) {\n                // A GNU gettext created class.\n                Method lookupMethod = null;\n                Method pluralEvalMethod = null;\n                try {\n                    lookupMethod = catalog.getClass().getMethod(\"lookup\", new Class[] { java.lang.String.class });\n                    pluralEvalMethod = catalog.getClass().getMethod(\"pluralEval\", new Class[] { Long.TYPE });\n                } catch (NoSuchMethodException e) {\n                } catch (SecurityException e) {\n                }\n                if (verbose)\n                    System.out.println(\"lookup = \" + (lookupMethod != null) + \", pluralEval = \" + (pluralEvalMethod != null));\n                if (lookupMethod != null && pluralEvalMethod != null) {\n                    // A GNU gettext created class with plural handling.\n                    Object localValue = null;\n                    try {\n                        localValue = lookupMethod.invoke(catalog, new Object[] { msgid });\n                    } catch (IllegalAccessException e) {\n                        e.printStackTrace();\n                    } catch (InvocationTargetException e) {\n                        e.getTargetException().printStackTrace();\n                    }\n                    if (localValue != null) {\n                        if (verbose)\n                            System.out.println(\"localValue = \" + localValue);\n                        if (localValue instanceof String)\n                            // Found the value. It doesn't depend on n in this case.\n                            return (String) localValue;\n                        else {\n                            String[] pluralforms = (String[]) localValue;\n                            long i = 0;\n                            try {\n                                i = ((Long) pluralEvalMethod.invoke(catalog, new Object[] { new Long(n) })).longValue();\n                                if (!(i >= 0 && i < pluralforms.length))\n                                    i = 0;\n                            } catch (IllegalAccessException e) {\n                                e.printStackTrace();\n                            } catch (InvocationTargetException e) {\n                                e.getTargetException().printStackTrace();\n                            }\n                            return pluralforms[(int) i];\n                        }\n                    }\n                } else {\n                    // A GNU gettext created class without plural handling.\n                    Object localValue = null;\n                    try {\n                        localValue = handleGetObjectMethod.invoke(catalog, new Object[] { msgid });\n                    } catch (IllegalAccessException e) {\n                        e.printStackTrace();\n                    } catch (InvocationTargetException e) {\n                        e.getTargetException().printStackTrace();\n                    }\n                    if (localValue != null) {\n                        // Found the value. It doesn't depend on n in this case.\n                        if (verbose)\n                            System.out.println(\"localValue = \" + localValue);\n                        return (String) localValue;\n                    }\n                }\n                Object parentCatalog = catalog;\n                try {\n                    parentCatalog = getParentMethod.invoke(catalog, new Object[0]);\n                } catch (IllegalAccessException e) {\n                    e.printStackTrace();\n                } catch (InvocationTargetException e) {\n                    e.getTargetException().printStackTrace();\n                }\n                if (parentCatalog != catalog)\n                    catalog = (ResourceBundle) parentCatalog;\n                else\n                    break;\n            } else\n                // Not a GNU gettext created class.\n                break;\n        } while (catalog != null);\n        // The end of chain of GNU gettext ResourceBundles is reached.\n        if (catalog != null) {\n            // For a non-GNU ResourceBundle we cannot access 'parent' and\n            // 'handleGetObject', so make a single call to catalog and all\n            // its parent catalogs at once.\n            Object value;\n            try {\n                value = catalog.getObject(msgid);\n            } catch (MissingResourceException e) {\n                value = null;\n            }\n            if (value != null)\n                // Found the value. It doesn't depend on n in this case.\n                return (String) value;\n        }\n        // Default: English strings and Germanic plural rule.\n        return (n != 1 ? msgid_plural : msgid);\n    }\n}\n",
		"id": "EvoSuiteBenchmark/109_pdfsam/src/main/java/it/pdfsam/gnu/gettext/GettextResourceTest0.java",
		"test_prompt": "// GettextResourceTest0.java\npackage it.pdfsam.gnu.gettext;\n\nimport java.lang.reflect.InvocationTargetException;\nimport java.lang.reflect.Method;\nimport java.lang.reflect.Modifier;\nimport java.util.MissingResourceException;\nimport java.util.ResourceBundle;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link GettextResource}.\n* It contains ten unit test cases for the {@link GettextResource#gettext(ResourceBundle, String)} method.\n*/\nclass GettextResourceTest0 {"
	},
	{
		"original_code": "// GettextResource.java\n/* GNU gettext for Java\n * Copyright (C) 2001 Free Software Foundation, Inc.\n *\n * This program is free software; you can redistribute it and/or modify it\n * under the terms of the GNU Library General Public License as published\n * by the Free Software Foundation; either version 2, or (at your option)\n * any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n * Library General Public License for more details.\n *\n * You should have received a copy of the GNU Library General Public\n * License along with this program; if not, write to the Free Software\n * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n * USA.\n */\npackage it.pdfsam.gnu.gettext;\n\nimport java.lang.reflect.InvocationTargetException;\nimport java.lang.reflect.Method;\nimport java.lang.reflect.Modifier;\nimport java.util.MissingResourceException;\nimport java.util.ResourceBundle;\n\n/**\n * This class implements the main GNU libintl functions in Java.\n * <P>\n * Using the GNU gettext approach, compiled message catalogs are normal\n * Java ResourceBundle classes and are thus interoperable with standard\n * ResourceBundle based code.\n * <P>\n * The main differences between the Sun ResourceBundle approach and the\n * GNU gettext approach are:\n * <UL>\n *   <LI>In the Sun approach, the keys are abstract textual shortcuts.\n *       In the GNU gettext approach, the keys are the English/ASCII version\n *       of the messages.\n *   <LI>In the Sun approach, the translation files are called\n *       \"<VAR>Resource</VAR>_<VAR>locale</VAR>.properties\" and have non-ASCII\n *       characters encoded in the Java\n *       <CODE>\\</CODE><CODE>u<VAR>nnnn</VAR></CODE> syntax. Very few editors\n *       can natively display international characters in this format. In the\n *       GNU gettext approach, the translation files are called\n *       \"<VAR>Resource</VAR>.<VAR>locale</VAR>.po\"\n *       and are in the encoding the translator has chosen. Many editors\n *       can be used. There are at least three GUI translating tools\n *       (Emacs PO mode, KDE KBabel, GNOME gtranslator).\n *   <LI>In the Sun approach, the function\n *       <CODE>ResourceBundle.getString</CODE> throws a\n *       <CODE>MissingResourceException</CODE> when no translation is found.\n *       In the GNU gettext approach, the <CODE>gettext</CODE> function\n *       returns the (English) message key in that case.\n *   <LI>In the Sun approach, there is no support for plural handling.\n *       Even the most elaborate MessageFormat strings cannot provide decent\n *       plural handling. In the GNU gettext approach, we have the\n *       <CODE>ngettext</CODE> function.\n * </UL>\n * <P>\n * To compile GNU gettext message catalogs into Java ResourceBundle classes,\n * the <CODE>msgfmt</CODE> program can be used.\n *\n * @author Bruno Haible\n */\npublic abstract class GettextResource extends ResourceBundle {\n\n    public static final boolean verbose = false;\n\n    /**\n     * Returns the translation of <VAR>msgid</VAR>.\n     * @param catalog a ResourceBundle\n     * @param msgid the key string to be translated, an ASCII string\n     * @return the translation of <VAR>msgid</VAR>, or <VAR>msgid</VAR> if\n     *         none is found\n     */\n    public static String gettext(ResourceBundle catalog, String msgid) {\n        try {\n            String result = (String) catalog.getObject(msgid);\n            if (result != null)\n                return result;\n        } catch (MissingResourceException e) {\n        }\n        return msgid;\n    }\n\n    /**\n     * Returns the plural form for <VAR>n</VAR> of the translation of\n     * <VAR>msgid</VAR>.\n     * @param catalog a ResourceBundle\n     * @param msgid the key string to be translated, an ASCII string\n     * @param msgid_plural its English plural form\n     * @return the translation of <VAR>msgid</VAR> depending on <VAR>n</VAR>,\n     *         or <VAR>msgid</VAR> or <VAR>msgid_plural</VAR> if none is found\n     */\n    public static String ngettext(ResourceBundle catalog, String msgid, String msgid_plural, long n) {\n        // The reason why we use so many reflective API calls instead of letting\n        // the GNU gettext generated ResourceBundles implement some interface,\n        // is that we want the generated ResourceBundles to be completely\n        // standalone, so that migration from the Sun approach to the GNU gettext\n        // approach (without use of plurals) is as straightforward as possible.\n        //ResourceBundle origCatalog = catalog;\n        do {\n            // Try catalog itself.\n            if (verbose)\n                System.out.println(\"ngettext on \" + catalog);\n            Method handleGetObjectMethod = null;\n            Method getParentMethod = null;\n            try {\n                handleGetObjectMethod = catalog.getClass().getMethod(\"handleGetObject\", new Class[] { java.lang.String.class });\n                getParentMethod = catalog.getClass().getMethod(\"getParent\", new Class[0]);\n            } catch (NoSuchMethodException e) {\n            } catch (SecurityException e) {\n            }\n            if (verbose)\n                System.out.println(\"handleGetObject = \" + (handleGetObjectMethod != null) + \", getParent = \" + (getParentMethod != null));\n            if (handleGetObjectMethod != null && Modifier.isPublic(handleGetObjectMethod.getModifiers()) && getParentMethod != null) {\n                // A GNU gettext created class.\n                Method lookupMethod = null;\n                Method pluralEvalMethod = null;\n                try {\n                    lookupMethod = catalog.getClass().getMethod(\"lookup\", new Class[] { java.lang.String.class });\n                    pluralEvalMethod = catalog.getClass().getMethod(\"pluralEval\", new Class[] { Long.TYPE });\n                } catch (NoSuchMethodException e) {\n                } catch (SecurityException e) {\n                }\n                if (verbose)\n                    System.out.println(\"lookup = \" + (lookupMethod != null) + \", pluralEval = \" + (pluralEvalMethod != null));\n                if (lookupMethod != null && pluralEvalMethod != null) {\n                    // A GNU gettext created class with plural handling.\n                    Object localValue = null;\n                    try {\n                        localValue = lookupMethod.invoke(catalog, new Object[] { msgid });\n                    } catch (IllegalAccessException e) {\n                        e.printStackTrace();\n                    } catch (InvocationTargetException e) {\n                        e.getTargetException().printStackTrace();\n                    }\n                    if (localValue != null) {\n                        if (verbose)\n                            System.out.println(\"localValue = \" + localValue);\n                        if (localValue instanceof String)\n                            // Found the value. It doesn't depend on n in this case.\n                            return (String) localValue;\n                        else {\n                            String[] pluralforms = (String[]) localValue;\n                            long i = 0;\n                            try {\n                                i = ((Long) pluralEvalMethod.invoke(catalog, new Object[] { new Long(n) })).longValue();\n                                if (!(i >= 0 && i < pluralforms.length))\n                                    i = 0;\n                            } catch (IllegalAccessException e) {\n                                e.printStackTrace();\n                            } catch (InvocationTargetException e) {\n                                e.getTargetException().printStackTrace();\n                            }\n                            return pluralforms[(int) i];\n                        }\n                    }\n                } else {\n                    // A GNU gettext created class without plural handling.\n                    Object localValue = null;\n                    try {\n                        localValue = handleGetObjectMethod.invoke(catalog, new Object[] { msgid });\n                    } catch (IllegalAccessException e) {\n                        e.printStackTrace();\n                    } catch (InvocationTargetException e) {\n                        e.getTargetException().printStackTrace();\n                    }\n                    if (localValue != null) {\n                        // Found the value. It doesn't depend on n in this case.\n                        if (verbose)\n                            System.out.println(\"localValue = \" + localValue);\n                        return (String) localValue;\n                    }\n                }\n                Object parentCatalog = catalog;\n                try {\n                    parentCatalog = getParentMethod.invoke(catalog, new Object[0]);\n                } catch (IllegalAccessException e) {\n                    e.printStackTrace();\n                } catch (InvocationTargetException e) {\n                    e.getTargetException().printStackTrace();\n                }\n                if (parentCatalog != catalog)\n                    catalog = (ResourceBundle) parentCatalog;\n                else\n                    break;\n            } else\n                // Not a GNU gettext created class.\n                break;\n        } while (catalog != null);\n        // The end of chain of GNU gettext ResourceBundles is reached.\n        if (catalog != null) {\n            // For a non-GNU ResourceBundle we cannot access 'parent' and\n            // 'handleGetObject', so make a single call to catalog and all\n            // its parent catalogs at once.\n            Object value;\n            try {\n                value = catalog.getObject(msgid);\n            } catch (MissingResourceException e) {\n                value = null;\n            }\n            if (value != null)\n                // Found the value. It doesn't depend on n in this case.\n                return (String) value;\n        }\n        // Default: English strings and Germanic plural rule.\n        return (n != 1 ? msgid_plural : msgid);\n    }\n}\n",
		"id": "EvoSuiteBenchmark/109_pdfsam/src/main/java/it/pdfsam/gnu/gettext/GettextResourceTest1.java",
		"test_prompt": "// GettextResourceTest1.java\npackage it.pdfsam.gnu.gettext;\n\nimport java.lang.reflect.InvocationTargetException;\nimport java.lang.reflect.Method;\nimport java.lang.reflect.Modifier;\nimport java.util.MissingResourceException;\nimport java.util.ResourceBundle;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link GettextResource}.\n* It contains ten unit test cases for the {@link GettextResource#ngettext(ResourceBundle, String, String, long)} method.\n*/\nclass GettextResourceTest1 {"
	},
	{
		"original_code": "// CmdParser.java\n/*\r\n * Created on 10-Feb-2006\r\n * Copyright (C) 2006 by Andrea Vacondio.\r\n *\r\n * This program is free software; you can redistribute it and/or modify it under the terms of the \r\n * GNU General Public License as published by the Free Software Foundation; \r\n * either version 2 of the License.\r\n * This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; \r\n * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. \r\n * See the GNU General Public License for more details.\r\n * You should have received a copy of the GNU General Public License along with this program; \r\n * if not, write to the Free Software Foundation, Inc., \r\n *  59 Temple Place, Suite 330, Boston, MA 02111-1307 USA\r\n */\r\npackage it.pdfsam.console.tools;\r\n\r\nimport it.pdfsam.console.MainConsole;\r\nimport it.pdfsam.console.exception.ParseException;\r\nimport java.io.File;\r\nimport java.util.Collection;\r\nimport java.util.regex.Pattern;\r\nimport jcmdline.BooleanParam;\r\nimport jcmdline.CmdLineHandler;\r\nimport jcmdline.FileParam;\r\nimport jcmdline.HelpCmdLineHandler;\r\nimport jcmdline.Parameter;\r\nimport jcmdline.StringParam;\r\nimport jcmdline.VersionCmdLineHandler;\r\n\r\n/**\r\n * Parser and core for the console. It creates a command line handler and parses input args.\r\n * If input command is correct (split or concat) it creates the right command line handler for the selected command\r\n * and it parses input args. If everything is correct, the right command is executed; an exception is thrwon otherwise.\r\n *\r\n * @author Andrea Vacondio\r\n * @see it.pdfsam.console.tools.pdf.PdfSplit\r\n * @see it.pdfsam.console.tools.pdf.PdfConcat\r\n */\r\npublic class CmdParser {\r\n\r\n    //constants used to get the split mode\r\n    final static public String S_BURST = \"BURST\";\r\n\r\n    final static public String S_SPLIT = \"SPLIT\";\r\n\r\n    final static public String S_NSPLIT = \"NSPLIT\";\r\n\r\n    final static public String S_EVEN = \"EVEN\";\r\n\r\n    final static public String S_ODD = \"ODD\";\r\n\r\n    //handler\r\n    private CmdLineHandler command_line_handler;\r\n\r\n    //input arguments\r\n    private String[] in_args;\r\n\r\n    //CONCAT\r\n    //-f value\r\n    private Collection cf_value;\r\n\r\n    //-l value\r\n    private File cl_value;\r\n\r\n    //-u value\r\n    private String cu_value;\r\n\r\n    //-copyfields value\r\n    private boolean copyfields_value = false;\r\n\r\n    //SPLIT\r\n    //-p value\r\n    private String sp_value;\r\n\r\n    //-l value\r\n    private File sf_value;\r\n\r\n    //-s value\r\n    private String ss_value;\r\n\r\n    //number_page argument\r\n    private String sn_value;\r\n\r\n    //ANY\r\n    //-o value\r\n    private File o_value;\r\n\r\n    //-log value\r\n    private File log_value = null;\r\n\r\n    //-overwrite value\r\n    private boolean overwrite_value = false;\r\n\r\n    //-compressed value\r\n    private boolean compressed_value = false;\r\n\r\n    //input command\r\n    private byte input_command = 0x00;\r\n\r\n    //input option\r\n    private byte input_option = 0x00;\r\n\r\n    //constants\r\n    final static public byte F_OPT = 0x01;\r\n\r\n    final static public byte L_OPT = 0x02;\r\n\r\n    //constants\r\n    final static public byte C_CONCAT = 0x01;\r\n\r\n    final static public byte C_SPLIT = 0x02;\r\n\r\n    final static private String COMMAND = \"java -jar pdfsam-console\";\r\n\r\n    final static private String DESCRIPTION = \"concat, split pdf files\";\r\n\r\n    //concat options if concat command is given\r\n    private final Parameter[] concat_opts = new Parameter[] { new FileParam(\"o\", \"pdf output file: if it doesn't exist it's created, if it exists it must be writeable\", ((FileParam.DOESNT_EXIST) | (FileParam.EXISTS & FileParam.IS_FILE & FileParam.IS_WRITEABLE)), FileParam.REQUIRED, FileParam.SINGLE_VALUED), new FileParam(\"f\", \"pdf files to concat: a list of existing pdf files (EX. -f /tmp/file1.pdf -f /tmp/file2.pdf)\", FileParam.IS_FILE & FileParam.IS_READABLE, FileParam.OPTIONAL, FileParam.MULTI_VALUED), new StringParam(\"u\", \"page selection script. You can set a subset of pages to merge. Accepted values: \\\"all\\\" or \\\"num1-num2\\\" (EX. -f /tmp/file1.pdf -f /tmp/file2.pdf -u all:all:), (EX. -f /tmp/file1.pdf -f /tmp/file2.pdf -u all:12-14:) to merge file1.pdf and pages 12,13,14 of file2.pdf. If -u is not set default behaviour is to merge document completely\", StringParam.OPTIONAL), new FileParam(\"l\", \"xml or csv file containing pdf files list to concat. If cvs file in comma separated value format; if xml file <filelist><file value=\\\"filepath\\\" /></filelist>\", FileParam.IS_FILE & FileParam.IS_READABLE, FileParam.OPTIONAL, FileParam.SINGLE_VALUED), new FileParam(\"log\", \"text file to log output messages\", ((FileParam.DOESNT_EXIST) | (FileParam.EXISTS & FileParam.IS_FILE & FileParam.IS_WRITEABLE)), FileParam.OPTIONAL, FileParam.SINGLE_VALUED), new BooleanParam(\"overwrite\", \"overwrite existing output file\"), new BooleanParam(\"compressed\", \"compress output file\"), new BooleanParam(\"copyfields\", \"input pdf documents contain forms (high memory usage)\") };\r\n\r\n    //split options if slit command is given\r\n    private final Parameter[] split_opts = new Parameter[] { new FileParam(\"o\", \"output directory\", ((FileParam.IS_DIR & FileParam.EXISTS)), FileParam.REQUIRED, FileParam.SINGLE_VALUED), new FileParam(\"f\", \"input pdf file to split\", FileParam.IS_FILE & FileParam.IS_READABLE, FileParam.REQUIRED, FileParam.SINGLE_VALUED), new StringParam(\"p\", \"prefix for the output files name\", StringParam.OPTIONAL), new StringParam(\"s\", \"split type {[\" + CmdParser.S_BURST + \"], [\" + CmdParser.S_ODD + \"], [\" + CmdParser.S_EVEN + \"], [\" + CmdParser.S_SPLIT + \"], [\" + CmdParser.S_NSPLIT + \"]}\", new String[] { CmdParser.S_BURST, CmdParser.S_ODD, CmdParser.S_EVEN, CmdParser.S_SPLIT, CmdParser.S_NSPLIT }, StringParam.REQUIRED), new StringParam(\"n\", \"page number to spli at if -s is \" + CmdParser.S_SPLIT + \" or \" + CmdParser.S_NSPLIT, StringParam.OPTIONAL), new FileParam(\"log\", \"text file to log output messages\", ((FileParam.DOESNT_EXIST) | (FileParam.EXISTS & FileParam.IS_FILE & FileParam.IS_WRITEABLE)), FileParam.OPTIONAL, FileParam.SINGLE_VALUED), new BooleanParam(\"overwrite\", \"overwrite existing output file\"), new BooleanParam(\"compressed\", \"compress output file\") };\r\n\r\n    /**\r\n     * The arguments for split command\r\n     */\r\n    private final Parameter[] split_arguments = new Parameter[] { new StringParam(\"command\", \"command to execute {[split]}\", new String[] { \"split\" }, StringParam.REQUIRED) };\r\n\r\n    /**\r\n     * The arguments for concat command\r\n     */\r\n    private final Parameter[] concat_arguments = new Parameter[] { new StringParam(\"command\", \"command to execute {[concat]}\", new String[] { \"concat\" }, StringParam.REQUIRED) };\r\n\r\n    /**\r\n     * The arguments this program takes\r\n     */\r\n    private final Parameter[] arguments = new Parameter[] { new StringParam(\"command\", \"command to execute {[concat], [split]}\", new String[] { \"concat\", \"split\" }, StringParam.REQUIRED) };\r\n\r\n    /**\r\n     * The help text for this program\r\n     */\r\n    public static final String concat_helpText = \"Concatenate pdf files. \" + \"you must specify the '-o /home/user/outfile.pdf' option to set the output file and the source file list:\\n\" + \"'-f /tmp/file1.pdf /tmp/file2.pdf -f /tmp/file3.pdf [...]' to specify a file list or at least one file to concat.\\n\" + \"'-l /tmp/list.csv' a csv file containing the list of files to concat, separated by a comma.\\n\" + \"'-l /tmp/list.xml' a xml file containing the list of files to concat, <filelist><file value=\\\"filepath\\\" /></filelist>\\n\" + \"'-u All:All:3-15' is optional to set pages selection. You can set a subset of pages to merge. Accepted values: \\\"all\\\" or \\\"num1-num2\\\" (EX. -f /tmp/file1.pdf -f /tmp/file2.pdf -u all:all:), (EX. -f /tmp/file1.pdf -f /tmp/file2.pdf -u all:12-14:) to merge file1.pdf and pages 12,13,14 of file2.pdf. If -u is not set default behaviour is to merge document completely\\n\" + \"Note: You can use only one of these options not both in the same command line\\n\\n\\n\" + \"'-overwrite' to overwrite output file if already exists.\\n\" + \"'-compress' to compress output file.\\n\" + \"'-copyfields' to deal with forms. Use this if input documents contain forms. This option will lead to a high memory usage.\\n\" + \"Example: java -jar pdfsam-console.jar -o /tmp/outfile.pdf -f /tmp/1.pdf -f /tmp/2.pdf concat\\n\" + \"Example: java -jar pdfsam-console.jar -l c:\\\\docs\\\\list.csv concat\";\r\n\r\n    /**\r\n     * The help text for this program\r\n     */\r\n    public static final String split_helpText = \"Split pdf file. \" + \"You must specify '-f /home/user/infile.pdf' option to set the input file you want to split.\\n\" + \"You must specify '-o /home/user' to set the output directory.\\n\" + \"You must specify '-s split_type' to set the split type. Possible values: {[\" + CmdParser.S_BURST + \"], [\" + CmdParser.S_ODD + \"], [\" + CmdParser.S_EVEN + \"], [\" + CmdParser.S_SPLIT + \"], [\" + CmdParser.S_NSPLIT + \"]}\\n\" + \"'-p prefix_' to specify a prefix for output names of files. If it contains \\\"[CURRENTPAGE]\\\" or \\\"[TIMESTAMP]\\\" it performs variable substitution. (Ex. [BASENAME]_prefix_[CURRENTPAGE] generates FileName_prefix_005.pdf)\\n\" + \"Available prefix variables: [CURRENTPAGE], [TIMESTAMP], [BASENAME].\\n\" + \"'-n number' to specify a page number to splip at if -s is SPLIT or NSPLIT.\\n\\n\\n\" + \"'-overwrite' to overwrite output file if already exists.\\n\" + \"'-compress' to compress output file.\\n\" + \"Example: java -jar pdfsam-console.jar -f /tmp/1.pdf -o /tmp -s BURST -p splitted_ split\\n\" + \"Example: java -jar pdfsam-console.jar -f /tmp/1.pdf -o /tmp -s NSPLIT -n 4 split\\n\";\r\n\r\n    /**\r\n     * The help text for this program\r\n     */\r\n    public static final String helpText = CmdParser.COMMAND + \" -h [command] for commands help. \";\r\n\r\n    /**\r\n     * Costructor\r\n     * @param input_args Arguments to parse\r\n     */\r\n    public CmdParser(String[] input_args) {\r\n        //cmd handler creation\r\n        in_args = input_args;\r\n    }\r\n\r\n    /**\r\n     * Parse the in_args to get the input command type. It creates the right command handler for split or concat command\r\n     * and it parses in_args again. Executes concat or split of pdf files if everything is ok, an exception is thrown otherwise.\r\n     */\r\n    public void parse() throws Exception {\r\n        String i_command = \"\";\r\n        if (in_args == null || in_args.length == 0) {\r\n            //create a new handler\r\n            command_line_handler = new VersionCmdLineHandler(\"pdfsam-console ver.\" + MainConsole.VERSION, new HelpCmdLineHandler(CmdParser.helpText, CmdParser.COMMAND, CmdParser.DESCRIPTION, null, arguments));\r\n        } else {\r\n            i_command = in_args[in_args.length - 1];\r\n            //parse command\r\n            if (i_command.equals(\"concat\")) {\r\n                input_command = CmdParser.C_CONCAT;\r\n                //create a new handler specific for concat\r\n                command_line_handler = new VersionCmdLineHandler(\"pdfsam-console ver.\" + MainConsole.VERSION, new HelpCmdLineHandler(CmdParser.concat_helpText, CmdParser.COMMAND, CmdParser.DESCRIPTION, concat_opts, concat_arguments));\r\n            } else if (i_command.equals(\"split\")) {\r\n                input_command = CmdParser.C_SPLIT;\r\n                //create a new handler specific for split\r\n                command_line_handler = new VersionCmdLineHandler(\"pdfsam-console ver.\" + MainConsole.VERSION, new HelpCmdLineHandler(CmdParser.split_helpText, CmdParser.COMMAND, CmdParser.DESCRIPTION, split_opts, split_arguments));\r\n            } else {\r\n                //create a new handler\r\n                command_line_handler = new VersionCmdLineHandler(\"pdfsam-console ver.\" + MainConsole.VERSION, new HelpCmdLineHandler(CmdParser.helpText, CmdParser.COMMAND, CmdParser.DESCRIPTION, null, arguments));\r\n            }\r\n        }\r\n        command_line_handler.setDieOnParseError(false);\r\n        if (command_line_handler.parse(in_args)) {\r\n            if (i_command.equals(\"concat\")) {\r\n                ParseConcatCommand();\r\n            } else if (i_command.equals(\"split\")) {\r\n                ParseSplitCommand();\r\n            }\r\n        } else {\r\n            throw new ParseException(\"ParseError: \" + command_line_handler.getParseError());\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Parser for the command line input with the \"concat\" argument. Input is validated and, if no exception is thrown,\r\n     * is processed. Files extension must be of the right type. Options -l and -f can't be together in the input line.\r\n     * @return true if the command is parsed correctly, exception otherwise.\r\n     * @throws Exception\r\n     */\r\n    private boolean ParseConcatCommand() throws Exception {\r\n        //PARSE -o\r\n        FileParam o_opts = (FileParam) command_line_handler.getOption(\"o\");\r\n        //no output option given\r\n        if (!(o_opts.isSet())) {\r\n            throw new ParseException(\"OutputNotFound: missing or illegal -o option.\");\r\n        } else //output is given\r\n        {\r\n            File out_file;\r\n            out_file = o_opts.getFile();\r\n            //output is given but is not a pdf file\r\n            if (!(out_file.getPath().toLowerCase().endsWith(\".pdf\"))) {\r\n                throw new ParseException(\"ParseConcatCommand: output file not a pdf format.\");\r\n            } else if (out_file.getName().toLowerCase().equals(\".pdf\")) {\r\n                throw new ParseException(\"ParseConcatCommand: no output file name.\");\r\n            } else {\r\n                o_value = out_file;\r\n            }\r\n        }\r\n        //END_PARSE -o\r\n        //PARSE -l -f\r\n        FileParam l_opts = (FileParam) command_line_handler.getOption(\"l\");\r\n        FileParam f_opts = (FileParam) command_line_handler.getOption(\"f\");\r\n        //both not set, no input given\r\n        if ((!(l_opts.isSet())) && (!(f_opts.isSet()))) {\r\n            throw new ParseException(\"InputNotFound: no -f or -l option given.\");\r\n        } else //both are set\r\n        if ((l_opts.isSet()) && (f_opts.isSet())) {\r\n            throw new ParseException(\"TooManyInputSources: both -f and -l options given.\");\r\n        } else //-l option error: no csv file given\r\n        if ((!(f_opts.isSet())) && (!(l_opts.getFile().getPath().toLowerCase().endsWith(\".csv\"))) && !(l_opts.getFile().getPath().toLowerCase().endsWith(\".xml\"))) {\r\n            throw new ParseException(\"ParseConcatCommand: input list file not a csv or xml format.\");\r\n        } else //only f_opts is set\r\n        if ((f_opts.isSet()) && (!(l_opts.isSet()))) {\r\n            File input_file = f_opts.getFile();\r\n            if (!(input_file.getPath().toLowerCase().endsWith(\".pdf\"))) {\r\n                throw new ParseException(\"ParseConcatCommand: input file \" + input_file.getName() + \" is not a pdf format.\");\r\n            }\r\n            input_option = CmdParser.F_OPT;\r\n            cf_value = f_opts.getFiles();\r\n        } else //only l_opts is set\r\n        if ((l_opts.isSet()) && (!(f_opts.isSet()))) {\r\n            //-l option error: no csv file given\r\n            if (!(l_opts.getFile().getPath().toLowerCase().endsWith(\".csv\")) && !(l_opts.getFile().getPath().toLowerCase().endsWith(\".xml\"))) {\r\n                throw new ParseException(\"ParseConcatCommand: input list file not a csv or xml format.\");\r\n            } else {\r\n                input_option = CmdParser.L_OPT;\r\n                cl_value = l_opts.getFile();\r\n            }\r\n        }\r\n        //END_PARSE -l -f\r\n        //PARSE -log\r\n        FileParam log_opts = (FileParam) command_line_handler.getOption(\"log\");\r\n        if (log_opts.isSet()) {\r\n            log_value = log_opts.getFile();\r\n        }\r\n        //END_PARSE -log\r\n        //PARSE -u\r\n        StringParam u_opts = (StringParam) command_line_handler.getOption(\"u\");\r\n        //if it's set we proceed with validation\r\n        if (u_opts.isSet()) {\r\n            //regexp pattern\r\n            Pattern p = Pattern.compile(\"(([0-9]*[-][0-9]*[:])|(all:))*\", Pattern.CASE_INSENSITIVE);\r\n            if ((p.matcher(u_opts.getValue()).matches())) {\r\n                cu_value = u_opts.getValue();\r\n            } else {\r\n                throw new ParseException(\"ParseConcatCommand: -u value parsing error. The string must be \\\"num1-num2:\\\" or \\\"all:\\\" repeated for each pdf file in input.\");\r\n            }\r\n        }\r\n        //END_PARSE -u\r\n        //PARSE -overwrite\r\n        overwrite_value = ((BooleanParam) command_line_handler.getOption(\"overwrite\")).isTrue();\r\n        //END PARSE -overwrite\r\n        //PARSE -compress\r\n        compressed_value = ((BooleanParam) command_line_handler.getOption(\"compressed\")).isTrue();\r\n        //END PARSE -compress\r\n        //PARSE -copyfields\r\n        copyfields_value = ((BooleanParam) command_line_handler.getOption(\"copyfields\")).isTrue();\r\n        //END PARSE -copyfields\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Parser for the command line input with the \"split\" argument. Input is validated and, if no exception is thrown,\r\n     * is processed. Files extension must be of the right type.\r\n     * @return true if the command is parsed correctly, exception otherwise.\r\n     * @throws Exception\r\n     */\r\n    private boolean ParseSplitCommand() throws Exception {\r\n        //PARSE -o\r\n        FileParam o_opts = (FileParam) command_line_handler.getOption(\"o\");\r\n        //no output option given\r\n        if ((o_opts.isSet())) {\r\n            File out_file;\r\n            out_file = o_opts.getFile();\r\n            //output is given but is not a pdf file\r\n            if (!(out_file.isDirectory())) {\r\n                throw new ParseException(\"ParseSplitCommand: output is not a directory.\");\r\n            } else {\r\n                o_value = out_file;\r\n            }\r\n        } else {\r\n            throw new ParseException(\"OutputNotFound: missing or illegal -o option.\");\r\n        }\r\n        //END_PARSE -o\r\n        //PARSE -log\r\n        FileParam log_opts = (FileParam) command_line_handler.getOption(\"log\");\r\n        if (log_opts.isSet()) {\r\n            log_value = log_opts.getFile();\r\n        }\r\n        //END_PARSE -log\r\n        StringParam p_opts = (StringParam) command_line_handler.getOption(\"p\");\r\n        FileParam f_opts = (FileParam) command_line_handler.getOption(\"f\");\r\n        StringParam s_opts = (StringParam) command_line_handler.getOption(\"s\");\r\n        StringParam n_opts = (StringParam) command_line_handler.getOption(\"n\");\r\n        //PARSE -p\r\n        if (p_opts.isSet()) {\r\n            sp_value = p_opts.getValue();\r\n        } else {\r\n            sp_value = \"\";\r\n        }\r\n        //END_PARSE -p\r\n        //PARSE -f\r\n        File input_file;\r\n        input_file = f_opts.getFile();\r\n        //input is given but is not a pdf file\r\n        if ((input_file.getPath().toLowerCase().endsWith(\".pdf\"))) {\r\n            sf_value = input_file;\r\n        } else {\r\n            throw new ParseException(\"ParseSplitCommand: input file not a pdf format.\");\r\n        }\r\n        //END_PARSE -f\r\n        //PARSE -s\r\n        if ((s_opts.isSet())) {\r\n            ss_value = s_opts.getValue();\r\n        } else {\r\n            throw new ParseException(\"SplitTypeNotFound: not -s option given.\");\r\n        }\r\n        //END_PARSE -s\r\n        //PARSE -n\r\n        if ((ss_value.equals(CmdParser.S_SPLIT)) || (ss_value.equals(CmdParser.S_NSPLIT))) {\r\n            if (n_opts.isSet()) {\r\n                sn_value = n_opts.getValue().trim();\r\n                //if nsplit -n option must be a number\r\n                if (ss_value.equals(CmdParser.S_NSPLIT)) {\r\n                    try {\r\n                        Integer.parseInt(sn_value);\r\n                    } catch (NumberFormatException nfe) {\r\n                        throw new ParseException(\"ParseSplitCommand: -n option not a numeric value.\");\r\n                    }\r\n                }\r\n                //if split i must validate the sequence\r\n                if (ss_value.equals(CmdParser.S_SPLIT)) {\r\n                    /*                Pattern p = Pattern.compile(\"(([0-9]*[-][0-9]*[:])|(all:))*\", Pattern.CASE_INSENSITIVE);\r\n                if (!(p.matcher(u_opts.getValue()).matches())){\r\n                    throw new ParseException(\"ParseConcatCommand: -u value parsing error. The string must be \\\"num1-num2:\\\" or \\\"all:\\\" repeated for each pdf file in input.\");\r\n                }\r\n*/\r\n                    //i can use \",\" or \" \" or \"-\" as separator\r\n                    sn_value = sn_value.replaceAll(\",\", \"-\").replaceAll(\" \", \"-\");\r\n                    Pattern p = Pattern.compile(\"([0-9]+)([-][0-9]+)*\");\r\n                    if (!(p.matcher(sn_value).matches())) {\r\n                        throw new ParseException(\"ParseSplitCommand: -n option must be a number or a sequence number-number-number...\");\r\n                    }\r\n                }\r\n            } else {\r\n                throw new ParseException(\"ParseSplitCommand: unable to find required option -n for the selected split mode.\");\r\n            }\r\n        } else {\r\n            if (n_opts.isSet()) {\r\n                throw new ParseException(\"ParseSplitCommand: unnecessary option -n for the selected split mode.\");\r\n            } else {\r\n                sn_value = \"0\";\r\n            }\r\n        }\r\n        //END_PARSE -n\r\n        //PARSE -compress\r\n        compressed_value = ((BooleanParam) command_line_handler.getOption(\"compressed\")).isTrue();\r\n        //END PARSE -compress\r\n        //PARSE -overwrite\r\n        overwrite_value = ((BooleanParam) command_line_handler.getOption(\"overwrite\")).isTrue();\r\n        //END PARSE -overwrite\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @return Returns the -f option value in concat command.\r\n     */\r\n    public Collection getCFValue() {\r\n        return cf_value;\r\n    }\r\n\r\n    /**\r\n     * @return Returns the -l option value in concat command.\r\n     */\r\n    public File getCLValue() {\r\n        return cl_value;\r\n    }\r\n\r\n    /**\r\n     * @return Returns the -u option value in concat command.\r\n     */\r\n    public String getCUValue() {\r\n        return cu_value;\r\n    }\r\n\r\n    /**\r\n     * @return\tReturns the -copyfields option value in concat command.\r\n     */\r\n    public boolean isCCopyFields() {\r\n        return copyfields_value;\r\n    }\r\n\r\n    /**\r\n     * @return Returns the -overwrite option value in concat command.\r\n     * @deprecated use <code>isOverwrite()</code>.\r\n     */\r\n    public boolean COverwrite() {\r\n        return overwrite_value;\r\n    }\r\n\r\n    /**\r\n     * @return Returns the -o option value. in concat command\r\n     */\r\n    public File getOValue() {\r\n        return o_value;\r\n    }\r\n\r\n    /**\r\n     * @return Returns the -o option value. in concat command\r\n     */\r\n    public File getLogValue() {\r\n        return log_value;\r\n    }\r\n\r\n    /**\r\n     * @return Returns the input_option.\r\n     */\r\n    public byte getInputOption() {\r\n        return input_option;\r\n    }\r\n\r\n    /**\r\n     * @return Returns the input_command.\r\n     */\r\n    public byte getInputCommand() {\r\n        return input_command;\r\n    }\r\n\r\n    /**\r\n     * @return Returns the sf_value.\r\n     */\r\n    public File getSFValue() {\r\n        return sf_value;\r\n    }\r\n\r\n    /**\r\n     * @return Returns the snumber_pages_value.\r\n     */\r\n    public String getSNumberPageValue() {\r\n        return sn_value;\r\n    }\r\n\r\n    /**\r\n     * @return Returns the sp_value.\r\n     */\r\n    public String getSPValue() {\r\n        return sp_value;\r\n    }\r\n\r\n    /**\r\n     * @return Returns the ss_value.\r\n     */\r\n    public String getSSValue() {\r\n        return ss_value;\r\n    }\r\n\r\n    /**\r\n     * @return Returns the -overwrite option value.\r\n     */\r\n    public boolean isOverwrite() {\r\n        return overwrite_value;\r\n    }\r\n\r\n    /**\r\n     * @return Returns the -compress option value.\r\n     */\r\n    public boolean isCompressed() {\r\n        return compressed_value;\r\n    }\r\n\r\n    /**\r\n     * @return Returns the -overwrite option value in concat command.\r\n     * @deprecated use <code>isOverwrite()</code>. This method is no longer working\r\n     */\r\n    public boolean MOverwrite() {\r\n        return false;\r\n    }\r\n}\r\n",
		"id": "EvoSuiteBenchmark/109_pdfsam/src/main/java/it/pdfsam/console/tools/CmdParserTest0.java",
		"test_prompt": "// CmdParserTest0.java\npackage it.pdfsam.console.tools;\n\nimport it.pdfsam.console.MainConsole;\nimport it.pdfsam.console.exception.ParseException;\nimport java.io.File;\nimport java.util.Collection;\nimport java.util.regex.Pattern;\nimport jcmdline.BooleanParam;\nimport jcmdline.CmdLineHandler;\nimport jcmdline.FileParam;\nimport jcmdline.HelpCmdLineHandler;\nimport jcmdline.Parameter;\nimport jcmdline.StringParam;\nimport jcmdline.VersionCmdLineHandler;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link CmdParser}.\n* It contains ten unit test cases for the {@link CmdParser#isCCopyFields()} method.\n*/\nclass CmdParserTest0 {"
	},
	{
		"original_code": "// CmdParser.java\n/*\r\n * Created on 10-Feb-2006\r\n * Copyright (C) 2006 by Andrea Vacondio.\r\n *\r\n * This program is free software; you can redistribute it and/or modify it under the terms of the \r\n * GNU General Public License as published by the Free Software Foundation; \r\n * either version 2 of the License.\r\n * This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; \r\n * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. \r\n * See the GNU General Public License for more details.\r\n * You should have received a copy of the GNU General Public License along with this program; \r\n * if not, write to the Free Software Foundation, Inc., \r\n *  59 Temple Place, Suite 330, Boston, MA 02111-1307 USA\r\n */\r\npackage it.pdfsam.console.tools;\r\n\r\nimport it.pdfsam.console.MainConsole;\r\nimport it.pdfsam.console.exception.ParseException;\r\nimport java.io.File;\r\nimport java.util.Collection;\r\nimport java.util.regex.Pattern;\r\nimport jcmdline.BooleanParam;\r\nimport jcmdline.CmdLineHandler;\r\nimport jcmdline.FileParam;\r\nimport jcmdline.HelpCmdLineHandler;\r\nimport jcmdline.Parameter;\r\nimport jcmdline.StringParam;\r\nimport jcmdline.VersionCmdLineHandler;\r\n\r\n/**\r\n * Parser and core for the console. It creates a command line handler and parses input args.\r\n * If input command is correct (split or concat) it creates the right command line handler for the selected command\r\n * and it parses input args. If everything is correct, the right command is executed; an exception is thrwon otherwise.\r\n *\r\n * @author Andrea Vacondio\r\n * @see it.pdfsam.console.tools.pdf.PdfSplit\r\n * @see it.pdfsam.console.tools.pdf.PdfConcat\r\n */\r\npublic class CmdParser {\r\n\r\n    //constants used to get the split mode\r\n    final static public String S_BURST = \"BURST\";\r\n\r\n    final static public String S_SPLIT = \"SPLIT\";\r\n\r\n    final static public String S_NSPLIT = \"NSPLIT\";\r\n\r\n    final static public String S_EVEN = \"EVEN\";\r\n\r\n    final static public String S_ODD = \"ODD\";\r\n\r\n    //handler\r\n    private CmdLineHandler command_line_handler;\r\n\r\n    //input arguments\r\n    private String[] in_args;\r\n\r\n    //CONCAT\r\n    //-f value\r\n    private Collection cf_value;\r\n\r\n    //-l value\r\n    private File cl_value;\r\n\r\n    //-u value\r\n    private String cu_value;\r\n\r\n    //-copyfields value\r\n    private boolean copyfields_value = false;\r\n\r\n    //SPLIT\r\n    //-p value\r\n    private String sp_value;\r\n\r\n    //-l value\r\n    private File sf_value;\r\n\r\n    //-s value\r\n    private String ss_value;\r\n\r\n    //number_page argument\r\n    private String sn_value;\r\n\r\n    //ANY\r\n    //-o value\r\n    private File o_value;\r\n\r\n    //-log value\r\n    private File log_value = null;\r\n\r\n    //-overwrite value\r\n    private boolean overwrite_value = false;\r\n\r\n    //-compressed value\r\n    private boolean compressed_value = false;\r\n\r\n    //input command\r\n    private byte input_command = 0x00;\r\n\r\n    //input option\r\n    private byte input_option = 0x00;\r\n\r\n    //constants\r\n    final static public byte F_OPT = 0x01;\r\n\r\n    final static public byte L_OPT = 0x02;\r\n\r\n    //constants\r\n    final static public byte C_CONCAT = 0x01;\r\n\r\n    final static public byte C_SPLIT = 0x02;\r\n\r\n    final static private String COMMAND = \"java -jar pdfsam-console\";\r\n\r\n    final static private String DESCRIPTION = \"concat, split pdf files\";\r\n\r\n    //concat options if concat command is given\r\n    private final Parameter[] concat_opts = new Parameter[] { new FileParam(\"o\", \"pdf output file: if it doesn't exist it's created, if it exists it must be writeable\", ((FileParam.DOESNT_EXIST) | (FileParam.EXISTS & FileParam.IS_FILE & FileParam.IS_WRITEABLE)), FileParam.REQUIRED, FileParam.SINGLE_VALUED), new FileParam(\"f\", \"pdf files to concat: a list of existing pdf files (EX. -f /tmp/file1.pdf -f /tmp/file2.pdf)\", FileParam.IS_FILE & FileParam.IS_READABLE, FileParam.OPTIONAL, FileParam.MULTI_VALUED), new StringParam(\"u\", \"page selection script. You can set a subset of pages to merge. Accepted values: \\\"all\\\" or \\\"num1-num2\\\" (EX. -f /tmp/file1.pdf -f /tmp/file2.pdf -u all:all:), (EX. -f /tmp/file1.pdf -f /tmp/file2.pdf -u all:12-14:) to merge file1.pdf and pages 12,13,14 of file2.pdf. If -u is not set default behaviour is to merge document completely\", StringParam.OPTIONAL), new FileParam(\"l\", \"xml or csv file containing pdf files list to concat. If cvs file in comma separated value format; if xml file <filelist><file value=\\\"filepath\\\" /></filelist>\", FileParam.IS_FILE & FileParam.IS_READABLE, FileParam.OPTIONAL, FileParam.SINGLE_VALUED), new FileParam(\"log\", \"text file to log output messages\", ((FileParam.DOESNT_EXIST) | (FileParam.EXISTS & FileParam.IS_FILE & FileParam.IS_WRITEABLE)), FileParam.OPTIONAL, FileParam.SINGLE_VALUED), new BooleanParam(\"overwrite\", \"overwrite existing output file\"), new BooleanParam(\"compressed\", \"compress output file\"), new BooleanParam(\"copyfields\", \"input pdf documents contain forms (high memory usage)\") };\r\n\r\n    //split options if slit command is given\r\n    private final Parameter[] split_opts = new Parameter[] { new FileParam(\"o\", \"output directory\", ((FileParam.IS_DIR & FileParam.EXISTS)), FileParam.REQUIRED, FileParam.SINGLE_VALUED), new FileParam(\"f\", \"input pdf file to split\", FileParam.IS_FILE & FileParam.IS_READABLE, FileParam.REQUIRED, FileParam.SINGLE_VALUED), new StringParam(\"p\", \"prefix for the output files name\", StringParam.OPTIONAL), new StringParam(\"s\", \"split type {[\" + CmdParser.S_BURST + \"], [\" + CmdParser.S_ODD + \"], [\" + CmdParser.S_EVEN + \"], [\" + CmdParser.S_SPLIT + \"], [\" + CmdParser.S_NSPLIT + \"]}\", new String[] { CmdParser.S_BURST, CmdParser.S_ODD, CmdParser.S_EVEN, CmdParser.S_SPLIT, CmdParser.S_NSPLIT }, StringParam.REQUIRED), new StringParam(\"n\", \"page number to spli at if -s is \" + CmdParser.S_SPLIT + \" or \" + CmdParser.S_NSPLIT, StringParam.OPTIONAL), new FileParam(\"log\", \"text file to log output messages\", ((FileParam.DOESNT_EXIST) | (FileParam.EXISTS & FileParam.IS_FILE & FileParam.IS_WRITEABLE)), FileParam.OPTIONAL, FileParam.SINGLE_VALUED), new BooleanParam(\"overwrite\", \"overwrite existing output file\"), new BooleanParam(\"compressed\", \"compress output file\") };\r\n\r\n    /**\r\n     * The arguments for split command\r\n     */\r\n    private final Parameter[] split_arguments = new Parameter[] { new StringParam(\"command\", \"command to execute {[split]}\", new String[] { \"split\" }, StringParam.REQUIRED) };\r\n\r\n    /**\r\n     * The arguments for concat command\r\n     */\r\n    private final Parameter[] concat_arguments = new Parameter[] { new StringParam(\"command\", \"command to execute {[concat]}\", new String[] { \"concat\" }, StringParam.REQUIRED) };\r\n\r\n    /**\r\n     * The arguments this program takes\r\n     */\r\n    private final Parameter[] arguments = new Parameter[] { new StringParam(\"command\", \"command to execute {[concat], [split]}\", new String[] { \"concat\", \"split\" }, StringParam.REQUIRED) };\r\n\r\n    /**\r\n     * The help text for this program\r\n     */\r\n    public static final String concat_helpText = \"Concatenate pdf files. \" + \"you must specify the '-o /home/user/outfile.pdf' option to set the output file and the source file list:\\n\" + \"'-f /tmp/file1.pdf /tmp/file2.pdf -f /tmp/file3.pdf [...]' to specify a file list or at least one file to concat.\\n\" + \"'-l /tmp/list.csv' a csv file containing the list of files to concat, separated by a comma.\\n\" + \"'-l /tmp/list.xml' a xml file containing the list of files to concat, <filelist><file value=\\\"filepath\\\" /></filelist>\\n\" + \"'-u All:All:3-15' is optional to set pages selection. You can set a subset of pages to merge. Accepted values: \\\"all\\\" or \\\"num1-num2\\\" (EX. -f /tmp/file1.pdf -f /tmp/file2.pdf -u all:all:), (EX. -f /tmp/file1.pdf -f /tmp/file2.pdf -u all:12-14:) to merge file1.pdf and pages 12,13,14 of file2.pdf. If -u is not set default behaviour is to merge document completely\\n\" + \"Note: You can use only one of these options not both in the same command line\\n\\n\\n\" + \"'-overwrite' to overwrite output file if already exists.\\n\" + \"'-compress' to compress output file.\\n\" + \"'-copyfields' to deal with forms. Use this if input documents contain forms. This option will lead to a high memory usage.\\n\" + \"Example: java -jar pdfsam-console.jar -o /tmp/outfile.pdf -f /tmp/1.pdf -f /tmp/2.pdf concat\\n\" + \"Example: java -jar pdfsam-console.jar -l c:\\\\docs\\\\list.csv concat\";\r\n\r\n    /**\r\n     * The help text for this program\r\n     */\r\n    public static final String split_helpText = \"Split pdf file. \" + \"You must specify '-f /home/user/infile.pdf' option to set the input file you want to split.\\n\" + \"You must specify '-o /home/user' to set the output directory.\\n\" + \"You must specify '-s split_type' to set the split type. Possible values: {[\" + CmdParser.S_BURST + \"], [\" + CmdParser.S_ODD + \"], [\" + CmdParser.S_EVEN + \"], [\" + CmdParser.S_SPLIT + \"], [\" + CmdParser.S_NSPLIT + \"]}\\n\" + \"'-p prefix_' to specify a prefix for output names of files. If it contains \\\"[CURRENTPAGE]\\\" or \\\"[TIMESTAMP]\\\" it performs variable substitution. (Ex. [BASENAME]_prefix_[CURRENTPAGE] generates FileName_prefix_005.pdf)\\n\" + \"Available prefix variables: [CURRENTPAGE], [TIMESTAMP], [BASENAME].\\n\" + \"'-n number' to specify a page number to splip at if -s is SPLIT or NSPLIT.\\n\\n\\n\" + \"'-overwrite' to overwrite output file if already exists.\\n\" + \"'-compress' to compress output file.\\n\" + \"Example: java -jar pdfsam-console.jar -f /tmp/1.pdf -o /tmp -s BURST -p splitted_ split\\n\" + \"Example: java -jar pdfsam-console.jar -f /tmp/1.pdf -o /tmp -s NSPLIT -n 4 split\\n\";\r\n\r\n    /**\r\n     * The help text for this program\r\n     */\r\n    public static final String helpText = CmdParser.COMMAND + \" -h [command] for commands help. \";\r\n\r\n    /**\r\n     * Costructor\r\n     * @param input_args Arguments to parse\r\n     */\r\n    public CmdParser(String[] input_args) {\r\n        //cmd handler creation\r\n        in_args = input_args;\r\n    }\r\n\r\n    /**\r\n     * Parse the in_args to get the input command type. It creates the right command handler for split or concat command\r\n     * and it parses in_args again. Executes concat or split of pdf files if everything is ok, an exception is thrown otherwise.\r\n     */\r\n    public void parse() throws Exception {\r\n        String i_command = \"\";\r\n        if (in_args == null || in_args.length == 0) {\r\n            //create a new handler\r\n            command_line_handler = new VersionCmdLineHandler(\"pdfsam-console ver.\" + MainConsole.VERSION, new HelpCmdLineHandler(CmdParser.helpText, CmdParser.COMMAND, CmdParser.DESCRIPTION, null, arguments));\r\n        } else {\r\n            i_command = in_args[in_args.length - 1];\r\n            //parse command\r\n            if (i_command.equals(\"concat\")) {\r\n                input_command = CmdParser.C_CONCAT;\r\n                //create a new handler specific for concat\r\n                command_line_handler = new VersionCmdLineHandler(\"pdfsam-console ver.\" + MainConsole.VERSION, new HelpCmdLineHandler(CmdParser.concat_helpText, CmdParser.COMMAND, CmdParser.DESCRIPTION, concat_opts, concat_arguments));\r\n            } else if (i_command.equals(\"split\")) {\r\n                input_command = CmdParser.C_SPLIT;\r\n                //create a new handler specific for split\r\n                command_line_handler = new VersionCmdLineHandler(\"pdfsam-console ver.\" + MainConsole.VERSION, new HelpCmdLineHandler(CmdParser.split_helpText, CmdParser.COMMAND, CmdParser.DESCRIPTION, split_opts, split_arguments));\r\n            } else {\r\n                //create a new handler\r\n                command_line_handler = new VersionCmdLineHandler(\"pdfsam-console ver.\" + MainConsole.VERSION, new HelpCmdLineHandler(CmdParser.helpText, CmdParser.COMMAND, CmdParser.DESCRIPTION, null, arguments));\r\n            }\r\n        }\r\n        command_line_handler.setDieOnParseError(false);\r\n        if (command_line_handler.parse(in_args)) {\r\n            if (i_command.equals(\"concat\")) {\r\n                ParseConcatCommand();\r\n            } else if (i_command.equals(\"split\")) {\r\n                ParseSplitCommand();\r\n            }\r\n        } else {\r\n            throw new ParseException(\"ParseError: \" + command_line_handler.getParseError());\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Parser for the command line input with the \"concat\" argument. Input is validated and, if no exception is thrown,\r\n     * is processed. Files extension must be of the right type. Options -l and -f can't be together in the input line.\r\n     * @return true if the command is parsed correctly, exception otherwise.\r\n     * @throws Exception\r\n     */\r\n    private boolean ParseConcatCommand() throws Exception {\r\n        //PARSE -o\r\n        FileParam o_opts = (FileParam) command_line_handler.getOption(\"o\");\r\n        //no output option given\r\n        if (!(o_opts.isSet())) {\r\n            throw new ParseException(\"OutputNotFound: missing or illegal -o option.\");\r\n        } else //output is given\r\n        {\r\n            File out_file;\r\n            out_file = o_opts.getFile();\r\n            //output is given but is not a pdf file\r\n            if (!(out_file.getPath().toLowerCase().endsWith(\".pdf\"))) {\r\n                throw new ParseException(\"ParseConcatCommand: output file not a pdf format.\");\r\n            } else if (out_file.getName().toLowerCase().equals(\".pdf\")) {\r\n                throw new ParseException(\"ParseConcatCommand: no output file name.\");\r\n            } else {\r\n                o_value = out_file;\r\n            }\r\n        }\r\n        //END_PARSE -o\r\n        //PARSE -l -f\r\n        FileParam l_opts = (FileParam) command_line_handler.getOption(\"l\");\r\n        FileParam f_opts = (FileParam) command_line_handler.getOption(\"f\");\r\n        //both not set, no input given\r\n        if ((!(l_opts.isSet())) && (!(f_opts.isSet()))) {\r\n            throw new ParseException(\"InputNotFound: no -f or -l option given.\");\r\n        } else //both are set\r\n        if ((l_opts.isSet()) && (f_opts.isSet())) {\r\n            throw new ParseException(\"TooManyInputSources: both -f and -l options given.\");\r\n        } else //-l option error: no csv file given\r\n        if ((!(f_opts.isSet())) && (!(l_opts.getFile().getPath().toLowerCase().endsWith(\".csv\"))) && !(l_opts.getFile().getPath().toLowerCase().endsWith(\".xml\"))) {\r\n            throw new ParseException(\"ParseConcatCommand: input list file not a csv or xml format.\");\r\n        } else //only f_opts is set\r\n        if ((f_opts.isSet()) && (!(l_opts.isSet()))) {\r\n            File input_file = f_opts.getFile();\r\n            if (!(input_file.getPath().toLowerCase().endsWith(\".pdf\"))) {\r\n                throw new ParseException(\"ParseConcatCommand: input file \" + input_file.getName() + \" is not a pdf format.\");\r\n            }\r\n            input_option = CmdParser.F_OPT;\r\n            cf_value = f_opts.getFiles();\r\n        } else //only l_opts is set\r\n        if ((l_opts.isSet()) && (!(f_opts.isSet()))) {\r\n            //-l option error: no csv file given\r\n            if (!(l_opts.getFile().getPath().toLowerCase().endsWith(\".csv\")) && !(l_opts.getFile().getPath().toLowerCase().endsWith(\".xml\"))) {\r\n                throw new ParseException(\"ParseConcatCommand: input list file not a csv or xml format.\");\r\n            } else {\r\n                input_option = CmdParser.L_OPT;\r\n                cl_value = l_opts.getFile();\r\n            }\r\n        }\r\n        //END_PARSE -l -f\r\n        //PARSE -log\r\n        FileParam log_opts = (FileParam) command_line_handler.getOption(\"log\");\r\n        if (log_opts.isSet()) {\r\n            log_value = log_opts.getFile();\r\n        }\r\n        //END_PARSE -log\r\n        //PARSE -u\r\n        StringParam u_opts = (StringParam) command_line_handler.getOption(\"u\");\r\n        //if it's set we proceed with validation\r\n        if (u_opts.isSet()) {\r\n            //regexp pattern\r\n            Pattern p = Pattern.compile(\"(([0-9]*[-][0-9]*[:])|(all:))*\", Pattern.CASE_INSENSITIVE);\r\n            if ((p.matcher(u_opts.getValue()).matches())) {\r\n                cu_value = u_opts.getValue();\r\n            } else {\r\n                throw new ParseException(\"ParseConcatCommand: -u value parsing error. The string must be \\\"num1-num2:\\\" or \\\"all:\\\" repeated for each pdf file in input.\");\r\n            }\r\n        }\r\n        //END_PARSE -u\r\n        //PARSE -overwrite\r\n        overwrite_value = ((BooleanParam) command_line_handler.getOption(\"overwrite\")).isTrue();\r\n        //END PARSE -overwrite\r\n        //PARSE -compress\r\n        compressed_value = ((BooleanParam) command_line_handler.getOption(\"compressed\")).isTrue();\r\n        //END PARSE -compress\r\n        //PARSE -copyfields\r\n        copyfields_value = ((BooleanParam) command_line_handler.getOption(\"copyfields\")).isTrue();\r\n        //END PARSE -copyfields\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Parser for the command line input with the \"split\" argument. Input is validated and, if no exception is thrown,\r\n     * is processed. Files extension must be of the right type.\r\n     * @return true if the command is parsed correctly, exception otherwise.\r\n     * @throws Exception\r\n     */\r\n    private boolean ParseSplitCommand() throws Exception {\r\n        //PARSE -o\r\n        FileParam o_opts = (FileParam) command_line_handler.getOption(\"o\");\r\n        //no output option given\r\n        if ((o_opts.isSet())) {\r\n            File out_file;\r\n            out_file = o_opts.getFile();\r\n            //output is given but is not a pdf file\r\n            if (!(out_file.isDirectory())) {\r\n                throw new ParseException(\"ParseSplitCommand: output is not a directory.\");\r\n            } else {\r\n                o_value = out_file;\r\n            }\r\n        } else {\r\n            throw new ParseException(\"OutputNotFound: missing or illegal -o option.\");\r\n        }\r\n        //END_PARSE -o\r\n        //PARSE -log\r\n        FileParam log_opts = (FileParam) command_line_handler.getOption(\"log\");\r\n        if (log_opts.isSet()) {\r\n            log_value = log_opts.getFile();\r\n        }\r\n        //END_PARSE -log\r\n        StringParam p_opts = (StringParam) command_line_handler.getOption(\"p\");\r\n        FileParam f_opts = (FileParam) command_line_handler.getOption(\"f\");\r\n        StringParam s_opts = (StringParam) command_line_handler.getOption(\"s\");\r\n        StringParam n_opts = (StringParam) command_line_handler.getOption(\"n\");\r\n        //PARSE -p\r\n        if (p_opts.isSet()) {\r\n            sp_value = p_opts.getValue();\r\n        } else {\r\n            sp_value = \"\";\r\n        }\r\n        //END_PARSE -p\r\n        //PARSE -f\r\n        File input_file;\r\n        input_file = f_opts.getFile();\r\n        //input is given but is not a pdf file\r\n        if ((input_file.getPath().toLowerCase().endsWith(\".pdf\"))) {\r\n            sf_value = input_file;\r\n        } else {\r\n            throw new ParseException(\"ParseSplitCommand: input file not a pdf format.\");\r\n        }\r\n        //END_PARSE -f\r\n        //PARSE -s\r\n        if ((s_opts.isSet())) {\r\n            ss_value = s_opts.getValue();\r\n        } else {\r\n            throw new ParseException(\"SplitTypeNotFound: not -s option given.\");\r\n        }\r\n        //END_PARSE -s\r\n        //PARSE -n\r\n        if ((ss_value.equals(CmdParser.S_SPLIT)) || (ss_value.equals(CmdParser.S_NSPLIT))) {\r\n            if (n_opts.isSet()) {\r\n                sn_value = n_opts.getValue().trim();\r\n                //if nsplit -n option must be a number\r\n                if (ss_value.equals(CmdParser.S_NSPLIT)) {\r\n                    try {\r\n                        Integer.parseInt(sn_value);\r\n                    } catch (NumberFormatException nfe) {\r\n                        throw new ParseException(\"ParseSplitCommand: -n option not a numeric value.\");\r\n                    }\r\n                }\r\n                //if split i must validate the sequence\r\n                if (ss_value.equals(CmdParser.S_SPLIT)) {\r\n                    /*                Pattern p = Pattern.compile(\"(([0-9]*[-][0-9]*[:])|(all:))*\", Pattern.CASE_INSENSITIVE);\r\n                if (!(p.matcher(u_opts.getValue()).matches())){\r\n                    throw new ParseException(\"ParseConcatCommand: -u value parsing error. The string must be \\\"num1-num2:\\\" or \\\"all:\\\" repeated for each pdf file in input.\");\r\n                }\r\n*/\r\n                    //i can use \",\" or \" \" or \"-\" as separator\r\n                    sn_value = sn_value.replaceAll(\",\", \"-\").replaceAll(\" \", \"-\");\r\n                    Pattern p = Pattern.compile(\"([0-9]+)([-][0-9]+)*\");\r\n                    if (!(p.matcher(sn_value).matches())) {\r\n                        throw new ParseException(\"ParseSplitCommand: -n option must be a number or a sequence number-number-number...\");\r\n                    }\r\n                }\r\n            } else {\r\n                throw new ParseException(\"ParseSplitCommand: unable to find required option -n for the selected split mode.\");\r\n            }\r\n        } else {\r\n            if (n_opts.isSet()) {\r\n                throw new ParseException(\"ParseSplitCommand: unnecessary option -n for the selected split mode.\");\r\n            } else {\r\n                sn_value = \"0\";\r\n            }\r\n        }\r\n        //END_PARSE -n\r\n        //PARSE -compress\r\n        compressed_value = ((BooleanParam) command_line_handler.getOption(\"compressed\")).isTrue();\r\n        //END PARSE -compress\r\n        //PARSE -overwrite\r\n        overwrite_value = ((BooleanParam) command_line_handler.getOption(\"overwrite\")).isTrue();\r\n        //END PARSE -overwrite\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @return Returns the -f option value in concat command.\r\n     */\r\n    public Collection getCFValue() {\r\n        return cf_value;\r\n    }\r\n\r\n    /**\r\n     * @return Returns the -l option value in concat command.\r\n     */\r\n    public File getCLValue() {\r\n        return cl_value;\r\n    }\r\n\r\n    /**\r\n     * @return Returns the -u option value in concat command.\r\n     */\r\n    public String getCUValue() {\r\n        return cu_value;\r\n    }\r\n\r\n    /**\r\n     * @return\tReturns the -copyfields option value in concat command.\r\n     */\r\n    public boolean isCCopyFields() {\r\n        return copyfields_value;\r\n    }\r\n\r\n    /**\r\n     * @return Returns the -overwrite option value in concat command.\r\n     * @deprecated use <code>isOverwrite()</code>.\r\n     */\r\n    public boolean COverwrite() {\r\n        return overwrite_value;\r\n    }\r\n\r\n    /**\r\n     * @return Returns the -o option value. in concat command\r\n     */\r\n    public File getOValue() {\r\n        return o_value;\r\n    }\r\n\r\n    /**\r\n     * @return Returns the -o option value. in concat command\r\n     */\r\n    public File getLogValue() {\r\n        return log_value;\r\n    }\r\n\r\n    /**\r\n     * @return Returns the input_option.\r\n     */\r\n    public byte getInputOption() {\r\n        return input_option;\r\n    }\r\n\r\n    /**\r\n     * @return Returns the input_command.\r\n     */\r\n    public byte getInputCommand() {\r\n        return input_command;\r\n    }\r\n\r\n    /**\r\n     * @return Returns the sf_value.\r\n     */\r\n    public File getSFValue() {\r\n        return sf_value;\r\n    }\r\n\r\n    /**\r\n     * @return Returns the snumber_pages_value.\r\n     */\r\n    public String getSNumberPageValue() {\r\n        return sn_value;\r\n    }\r\n\r\n    /**\r\n     * @return Returns the sp_value.\r\n     */\r\n    public String getSPValue() {\r\n        return sp_value;\r\n    }\r\n\r\n    /**\r\n     * @return Returns the ss_value.\r\n     */\r\n    public String getSSValue() {\r\n        return ss_value;\r\n    }\r\n\r\n    /**\r\n     * @return Returns the -overwrite option value.\r\n     */\r\n    public boolean isOverwrite() {\r\n        return overwrite_value;\r\n    }\r\n\r\n    /**\r\n     * @return Returns the -compress option value.\r\n     */\r\n    public boolean isCompressed() {\r\n        return compressed_value;\r\n    }\r\n\r\n    /**\r\n     * @return Returns the -overwrite option value in concat command.\r\n     * @deprecated use <code>isOverwrite()</code>. This method is no longer working\r\n     */\r\n    public boolean MOverwrite() {\r\n        return false;\r\n    }\r\n}\r\n",
		"id": "EvoSuiteBenchmark/109_pdfsam/src/main/java/it/pdfsam/console/tools/CmdParserTest1.java",
		"test_prompt": "// CmdParserTest1.java\npackage it.pdfsam.console.tools;\n\nimport it.pdfsam.console.MainConsole;\nimport it.pdfsam.console.exception.ParseException;\nimport java.io.File;\nimport java.util.Collection;\nimport java.util.regex.Pattern;\nimport jcmdline.BooleanParam;\nimport jcmdline.CmdLineHandler;\nimport jcmdline.FileParam;\nimport jcmdline.HelpCmdLineHandler;\nimport jcmdline.Parameter;\nimport jcmdline.StringParam;\nimport jcmdline.VersionCmdLineHandler;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link CmdParser}.\n* It contains ten unit test cases for the {@link CmdParser#COverwrite()} method.\n*/\nclass CmdParserTest1 {"
	},
	{
		"original_code": "// CmdParser.java\n/*\r\n * Created on 10-Feb-2006\r\n * Copyright (C) 2006 by Andrea Vacondio.\r\n *\r\n * This program is free software; you can redistribute it and/or modify it under the terms of the \r\n * GNU General Public License as published by the Free Software Foundation; \r\n * either version 2 of the License.\r\n * This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; \r\n * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. \r\n * See the GNU General Public License for more details.\r\n * You should have received a copy of the GNU General Public License along with this program; \r\n * if not, write to the Free Software Foundation, Inc., \r\n *  59 Temple Place, Suite 330, Boston, MA 02111-1307 USA\r\n */\r\npackage it.pdfsam.console.tools;\r\n\r\nimport it.pdfsam.console.MainConsole;\r\nimport it.pdfsam.console.exception.ParseException;\r\nimport java.io.File;\r\nimport java.util.Collection;\r\nimport java.util.regex.Pattern;\r\nimport jcmdline.BooleanParam;\r\nimport jcmdline.CmdLineHandler;\r\nimport jcmdline.FileParam;\r\nimport jcmdline.HelpCmdLineHandler;\r\nimport jcmdline.Parameter;\r\nimport jcmdline.StringParam;\r\nimport jcmdline.VersionCmdLineHandler;\r\n\r\n/**\r\n * Parser and core for the console. It creates a command line handler and parses input args.\r\n * If input command is correct (split or concat) it creates the right command line handler for the selected command\r\n * and it parses input args. If everything is correct, the right command is executed; an exception is thrwon otherwise.\r\n *\r\n * @author Andrea Vacondio\r\n * @see it.pdfsam.console.tools.pdf.PdfSplit\r\n * @see it.pdfsam.console.tools.pdf.PdfConcat\r\n */\r\npublic class CmdParser {\r\n\r\n    //constants used to get the split mode\r\n    final static public String S_BURST = \"BURST\";\r\n\r\n    final static public String S_SPLIT = \"SPLIT\";\r\n\r\n    final static public String S_NSPLIT = \"NSPLIT\";\r\n\r\n    final static public String S_EVEN = \"EVEN\";\r\n\r\n    final static public String S_ODD = \"ODD\";\r\n\r\n    //handler\r\n    private CmdLineHandler command_line_handler;\r\n\r\n    //input arguments\r\n    private String[] in_args;\r\n\r\n    //CONCAT\r\n    //-f value\r\n    private Collection cf_value;\r\n\r\n    //-l value\r\n    private File cl_value;\r\n\r\n    //-u value\r\n    private String cu_value;\r\n\r\n    //-copyfields value\r\n    private boolean copyfields_value = false;\r\n\r\n    //SPLIT\r\n    //-p value\r\n    private String sp_value;\r\n\r\n    //-l value\r\n    private File sf_value;\r\n\r\n    //-s value\r\n    private String ss_value;\r\n\r\n    //number_page argument\r\n    private String sn_value;\r\n\r\n    //ANY\r\n    //-o value\r\n    private File o_value;\r\n\r\n    //-log value\r\n    private File log_value = null;\r\n\r\n    //-overwrite value\r\n    private boolean overwrite_value = false;\r\n\r\n    //-compressed value\r\n    private boolean compressed_value = false;\r\n\r\n    //input command\r\n    private byte input_command = 0x00;\r\n\r\n    //input option\r\n    private byte input_option = 0x00;\r\n\r\n    //constants\r\n    final static public byte F_OPT = 0x01;\r\n\r\n    final static public byte L_OPT = 0x02;\r\n\r\n    //constants\r\n    final static public byte C_CONCAT = 0x01;\r\n\r\n    final static public byte C_SPLIT = 0x02;\r\n\r\n    final static private String COMMAND = \"java -jar pdfsam-console\";\r\n\r\n    final static private String DESCRIPTION = \"concat, split pdf files\";\r\n\r\n    //concat options if concat command is given\r\n    private final Parameter[] concat_opts = new Parameter[] { new FileParam(\"o\", \"pdf output file: if it doesn't exist it's created, if it exists it must be writeable\", ((FileParam.DOESNT_EXIST) | (FileParam.EXISTS & FileParam.IS_FILE & FileParam.IS_WRITEABLE)), FileParam.REQUIRED, FileParam.SINGLE_VALUED), new FileParam(\"f\", \"pdf files to concat: a list of existing pdf files (EX. -f /tmp/file1.pdf -f /tmp/file2.pdf)\", FileParam.IS_FILE & FileParam.IS_READABLE, FileParam.OPTIONAL, FileParam.MULTI_VALUED), new StringParam(\"u\", \"page selection script. You can set a subset of pages to merge. Accepted values: \\\"all\\\" or \\\"num1-num2\\\" (EX. -f /tmp/file1.pdf -f /tmp/file2.pdf -u all:all:), (EX. -f /tmp/file1.pdf -f /tmp/file2.pdf -u all:12-14:) to merge file1.pdf and pages 12,13,14 of file2.pdf. If -u is not set default behaviour is to merge document completely\", StringParam.OPTIONAL), new FileParam(\"l\", \"xml or csv file containing pdf files list to concat. If cvs file in comma separated value format; if xml file <filelist><file value=\\\"filepath\\\" /></filelist>\", FileParam.IS_FILE & FileParam.IS_READABLE, FileParam.OPTIONAL, FileParam.SINGLE_VALUED), new FileParam(\"log\", \"text file to log output messages\", ((FileParam.DOESNT_EXIST) | (FileParam.EXISTS & FileParam.IS_FILE & FileParam.IS_WRITEABLE)), FileParam.OPTIONAL, FileParam.SINGLE_VALUED), new BooleanParam(\"overwrite\", \"overwrite existing output file\"), new BooleanParam(\"compressed\", \"compress output file\"), new BooleanParam(\"copyfields\", \"input pdf documents contain forms (high memory usage)\") };\r\n\r\n    //split options if slit command is given\r\n    private final Parameter[] split_opts = new Parameter[] { new FileParam(\"o\", \"output directory\", ((FileParam.IS_DIR & FileParam.EXISTS)), FileParam.REQUIRED, FileParam.SINGLE_VALUED), new FileParam(\"f\", \"input pdf file to split\", FileParam.IS_FILE & FileParam.IS_READABLE, FileParam.REQUIRED, FileParam.SINGLE_VALUED), new StringParam(\"p\", \"prefix for the output files name\", StringParam.OPTIONAL), new StringParam(\"s\", \"split type {[\" + CmdParser.S_BURST + \"], [\" + CmdParser.S_ODD + \"], [\" + CmdParser.S_EVEN + \"], [\" + CmdParser.S_SPLIT + \"], [\" + CmdParser.S_NSPLIT + \"]}\", new String[] { CmdParser.S_BURST, CmdParser.S_ODD, CmdParser.S_EVEN, CmdParser.S_SPLIT, CmdParser.S_NSPLIT }, StringParam.REQUIRED), new StringParam(\"n\", \"page number to spli at if -s is \" + CmdParser.S_SPLIT + \" or \" + CmdParser.S_NSPLIT, StringParam.OPTIONAL), new FileParam(\"log\", \"text file to log output messages\", ((FileParam.DOESNT_EXIST) | (FileParam.EXISTS & FileParam.IS_FILE & FileParam.IS_WRITEABLE)), FileParam.OPTIONAL, FileParam.SINGLE_VALUED), new BooleanParam(\"overwrite\", \"overwrite existing output file\"), new BooleanParam(\"compressed\", \"compress output file\") };\r\n\r\n    /**\r\n     * The arguments for split command\r\n     */\r\n    private final Parameter[] split_arguments = new Parameter[] { new StringParam(\"command\", \"command to execute {[split]}\", new String[] { \"split\" }, StringParam.REQUIRED) };\r\n\r\n    /**\r\n     * The arguments for concat command\r\n     */\r\n    private final Parameter[] concat_arguments = new Parameter[] { new StringParam(\"command\", \"command to execute {[concat]}\", new String[] { \"concat\" }, StringParam.REQUIRED) };\r\n\r\n    /**\r\n     * The arguments this program takes\r\n     */\r\n    private final Parameter[] arguments = new Parameter[] { new StringParam(\"command\", \"command to execute {[concat], [split]}\", new String[] { \"concat\", \"split\" }, StringParam.REQUIRED) };\r\n\r\n    /**\r\n     * The help text for this program\r\n     */\r\n    public static final String concat_helpText = \"Concatenate pdf files. \" + \"you must specify the '-o /home/user/outfile.pdf' option to set the output file and the source file list:\\n\" + \"'-f /tmp/file1.pdf /tmp/file2.pdf -f /tmp/file3.pdf [...]' to specify a file list or at least one file to concat.\\n\" + \"'-l /tmp/list.csv' a csv file containing the list of files to concat, separated by a comma.\\n\" + \"'-l /tmp/list.xml' a xml file containing the list of files to concat, <filelist><file value=\\\"filepath\\\" /></filelist>\\n\" + \"'-u All:All:3-15' is optional to set pages selection. You can set a subset of pages to merge. Accepted values: \\\"all\\\" or \\\"num1-num2\\\" (EX. -f /tmp/file1.pdf -f /tmp/file2.pdf -u all:all:), (EX. -f /tmp/file1.pdf -f /tmp/file2.pdf -u all:12-14:) to merge file1.pdf and pages 12,13,14 of file2.pdf. If -u is not set default behaviour is to merge document completely\\n\" + \"Note: You can use only one of these options not both in the same command line\\n\\n\\n\" + \"'-overwrite' to overwrite output file if already exists.\\n\" + \"'-compress' to compress output file.\\n\" + \"'-copyfields' to deal with forms. Use this if input documents contain forms. This option will lead to a high memory usage.\\n\" + \"Example: java -jar pdfsam-console.jar -o /tmp/outfile.pdf -f /tmp/1.pdf -f /tmp/2.pdf concat\\n\" + \"Example: java -jar pdfsam-console.jar -l c:\\\\docs\\\\list.csv concat\";\r\n\r\n    /**\r\n     * The help text for this program\r\n     */\r\n    public static final String split_helpText = \"Split pdf file. \" + \"You must specify '-f /home/user/infile.pdf' option to set the input file you want to split.\\n\" + \"You must specify '-o /home/user' to set the output directory.\\n\" + \"You must specify '-s split_type' to set the split type. Possible values: {[\" + CmdParser.S_BURST + \"], [\" + CmdParser.S_ODD + \"], [\" + CmdParser.S_EVEN + \"], [\" + CmdParser.S_SPLIT + \"], [\" + CmdParser.S_NSPLIT + \"]}\\n\" + \"'-p prefix_' to specify a prefix for output names of files. If it contains \\\"[CURRENTPAGE]\\\" or \\\"[TIMESTAMP]\\\" it performs variable substitution. (Ex. [BASENAME]_prefix_[CURRENTPAGE] generates FileName_prefix_005.pdf)\\n\" + \"Available prefix variables: [CURRENTPAGE], [TIMESTAMP], [BASENAME].\\n\" + \"'-n number' to specify a page number to splip at if -s is SPLIT or NSPLIT.\\n\\n\\n\" + \"'-overwrite' to overwrite output file if already exists.\\n\" + \"'-compress' to compress output file.\\n\" + \"Example: java -jar pdfsam-console.jar -f /tmp/1.pdf -o /tmp -s BURST -p splitted_ split\\n\" + \"Example: java -jar pdfsam-console.jar -f /tmp/1.pdf -o /tmp -s NSPLIT -n 4 split\\n\";\r\n\r\n    /**\r\n     * The help text for this program\r\n     */\r\n    public static final String helpText = CmdParser.COMMAND + \" -h [command] for commands help. \";\r\n\r\n    /**\r\n     * Costructor\r\n     * @param input_args Arguments to parse\r\n     */\r\n    public CmdParser(String[] input_args) {\r\n        //cmd handler creation\r\n        in_args = input_args;\r\n    }\r\n\r\n    /**\r\n     * Parse the in_args to get the input command type. It creates the right command handler for split or concat command\r\n     * and it parses in_args again. Executes concat or split of pdf files if everything is ok, an exception is thrown otherwise.\r\n     */\r\n    public void parse() throws Exception {\r\n        String i_command = \"\";\r\n        if (in_args == null || in_args.length == 0) {\r\n            //create a new handler\r\n            command_line_handler = new VersionCmdLineHandler(\"pdfsam-console ver.\" + MainConsole.VERSION, new HelpCmdLineHandler(CmdParser.helpText, CmdParser.COMMAND, CmdParser.DESCRIPTION, null, arguments));\r\n        } else {\r\n            i_command = in_args[in_args.length - 1];\r\n            //parse command\r\n            if (i_command.equals(\"concat\")) {\r\n                input_command = CmdParser.C_CONCAT;\r\n                //create a new handler specific for concat\r\n                command_line_handler = new VersionCmdLineHandler(\"pdfsam-console ver.\" + MainConsole.VERSION, new HelpCmdLineHandler(CmdParser.concat_helpText, CmdParser.COMMAND, CmdParser.DESCRIPTION, concat_opts, concat_arguments));\r\n            } else if (i_command.equals(\"split\")) {\r\n                input_command = CmdParser.C_SPLIT;\r\n                //create a new handler specific for split\r\n                command_line_handler = new VersionCmdLineHandler(\"pdfsam-console ver.\" + MainConsole.VERSION, new HelpCmdLineHandler(CmdParser.split_helpText, CmdParser.COMMAND, CmdParser.DESCRIPTION, split_opts, split_arguments));\r\n            } else {\r\n                //create a new handler\r\n                command_line_handler = new VersionCmdLineHandler(\"pdfsam-console ver.\" + MainConsole.VERSION, new HelpCmdLineHandler(CmdParser.helpText, CmdParser.COMMAND, CmdParser.DESCRIPTION, null, arguments));\r\n            }\r\n        }\r\n        command_line_handler.setDieOnParseError(false);\r\n        if (command_line_handler.parse(in_args)) {\r\n            if (i_command.equals(\"concat\")) {\r\n                ParseConcatCommand();\r\n            } else if (i_command.equals(\"split\")) {\r\n                ParseSplitCommand();\r\n            }\r\n        } else {\r\n            throw new ParseException(\"ParseError: \" + command_line_handler.getParseError());\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Parser for the command line input with the \"concat\" argument. Input is validated and, if no exception is thrown,\r\n     * is processed. Files extension must be of the right type. Options -l and -f can't be together in the input line.\r\n     * @return true if the command is parsed correctly, exception otherwise.\r\n     * @throws Exception\r\n     */\r\n    private boolean ParseConcatCommand() throws Exception {\r\n        //PARSE -o\r\n        FileParam o_opts = (FileParam) command_line_handler.getOption(\"o\");\r\n        //no output option given\r\n        if (!(o_opts.isSet())) {\r\n            throw new ParseException(\"OutputNotFound: missing or illegal -o option.\");\r\n        } else //output is given\r\n        {\r\n            File out_file;\r\n            out_file = o_opts.getFile();\r\n            //output is given but is not a pdf file\r\n            if (!(out_file.getPath().toLowerCase().endsWith(\".pdf\"))) {\r\n                throw new ParseException(\"ParseConcatCommand: output file not a pdf format.\");\r\n            } else if (out_file.getName().toLowerCase().equals(\".pdf\")) {\r\n                throw new ParseException(\"ParseConcatCommand: no output file name.\");\r\n            } else {\r\n                o_value = out_file;\r\n            }\r\n        }\r\n        //END_PARSE -o\r\n        //PARSE -l -f\r\n        FileParam l_opts = (FileParam) command_line_handler.getOption(\"l\");\r\n        FileParam f_opts = (FileParam) command_line_handler.getOption(\"f\");\r\n        //both not set, no input given\r\n        if ((!(l_opts.isSet())) && (!(f_opts.isSet()))) {\r\n            throw new ParseException(\"InputNotFound: no -f or -l option given.\");\r\n        } else //both are set\r\n        if ((l_opts.isSet()) && (f_opts.isSet())) {\r\n            throw new ParseException(\"TooManyInputSources: both -f and -l options given.\");\r\n        } else //-l option error: no csv file given\r\n        if ((!(f_opts.isSet())) && (!(l_opts.getFile().getPath().toLowerCase().endsWith(\".csv\"))) && !(l_opts.getFile().getPath().toLowerCase().endsWith(\".xml\"))) {\r\n            throw new ParseException(\"ParseConcatCommand: input list file not a csv or xml format.\");\r\n        } else //only f_opts is set\r\n        if ((f_opts.isSet()) && (!(l_opts.isSet()))) {\r\n            File input_file = f_opts.getFile();\r\n            if (!(input_file.getPath().toLowerCase().endsWith(\".pdf\"))) {\r\n                throw new ParseException(\"ParseConcatCommand: input file \" + input_file.getName() + \" is not a pdf format.\");\r\n            }\r\n            input_option = CmdParser.F_OPT;\r\n            cf_value = f_opts.getFiles();\r\n        } else //only l_opts is set\r\n        if ((l_opts.isSet()) && (!(f_opts.isSet()))) {\r\n            //-l option error: no csv file given\r\n            if (!(l_opts.getFile().getPath().toLowerCase().endsWith(\".csv\")) && !(l_opts.getFile().getPath().toLowerCase().endsWith(\".xml\"))) {\r\n                throw new ParseException(\"ParseConcatCommand: input list file not a csv or xml format.\");\r\n            } else {\r\n                input_option = CmdParser.L_OPT;\r\n                cl_value = l_opts.getFile();\r\n            }\r\n        }\r\n        //END_PARSE -l -f\r\n        //PARSE -log\r\n        FileParam log_opts = (FileParam) command_line_handler.getOption(\"log\");\r\n        if (log_opts.isSet()) {\r\n            log_value = log_opts.getFile();\r\n        }\r\n        //END_PARSE -log\r\n        //PARSE -u\r\n        StringParam u_opts = (StringParam) command_line_handler.getOption(\"u\");\r\n        //if it's set we proceed with validation\r\n        if (u_opts.isSet()) {\r\n            //regexp pattern\r\n            Pattern p = Pattern.compile(\"(([0-9]*[-][0-9]*[:])|(all:))*\", Pattern.CASE_INSENSITIVE);\r\n            if ((p.matcher(u_opts.getValue()).matches())) {\r\n                cu_value = u_opts.getValue();\r\n            } else {\r\n                throw new ParseException(\"ParseConcatCommand: -u value parsing error. The string must be \\\"num1-num2:\\\" or \\\"all:\\\" repeated for each pdf file in input.\");\r\n            }\r\n        }\r\n        //END_PARSE -u\r\n        //PARSE -overwrite\r\n        overwrite_value = ((BooleanParam) command_line_handler.getOption(\"overwrite\")).isTrue();\r\n        //END PARSE -overwrite\r\n        //PARSE -compress\r\n        compressed_value = ((BooleanParam) command_line_handler.getOption(\"compressed\")).isTrue();\r\n        //END PARSE -compress\r\n        //PARSE -copyfields\r\n        copyfields_value = ((BooleanParam) command_line_handler.getOption(\"copyfields\")).isTrue();\r\n        //END PARSE -copyfields\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Parser for the command line input with the \"split\" argument. Input is validated and, if no exception is thrown,\r\n     * is processed. Files extension must be of the right type.\r\n     * @return true if the command is parsed correctly, exception otherwise.\r\n     * @throws Exception\r\n     */\r\n    private boolean ParseSplitCommand() throws Exception {\r\n        //PARSE -o\r\n        FileParam o_opts = (FileParam) command_line_handler.getOption(\"o\");\r\n        //no output option given\r\n        if ((o_opts.isSet())) {\r\n            File out_file;\r\n            out_file = o_opts.getFile();\r\n            //output is given but is not a pdf file\r\n            if (!(out_file.isDirectory())) {\r\n                throw new ParseException(\"ParseSplitCommand: output is not a directory.\");\r\n            } else {\r\n                o_value = out_file;\r\n            }\r\n        } else {\r\n            throw new ParseException(\"OutputNotFound: missing or illegal -o option.\");\r\n        }\r\n        //END_PARSE -o\r\n        //PARSE -log\r\n        FileParam log_opts = (FileParam) command_line_handler.getOption(\"log\");\r\n        if (log_opts.isSet()) {\r\n            log_value = log_opts.getFile();\r\n        }\r\n        //END_PARSE -log\r\n        StringParam p_opts = (StringParam) command_line_handler.getOption(\"p\");\r\n        FileParam f_opts = (FileParam) command_line_handler.getOption(\"f\");\r\n        StringParam s_opts = (StringParam) command_line_handler.getOption(\"s\");\r\n        StringParam n_opts = (StringParam) command_line_handler.getOption(\"n\");\r\n        //PARSE -p\r\n        if (p_opts.isSet()) {\r\n            sp_value = p_opts.getValue();\r\n        } else {\r\n            sp_value = \"\";\r\n        }\r\n        //END_PARSE -p\r\n        //PARSE -f\r\n        File input_file;\r\n        input_file = f_opts.getFile();\r\n        //input is given but is not a pdf file\r\n        if ((input_file.getPath().toLowerCase().endsWith(\".pdf\"))) {\r\n            sf_value = input_file;\r\n        } else {\r\n            throw new ParseException(\"ParseSplitCommand: input file not a pdf format.\");\r\n        }\r\n        //END_PARSE -f\r\n        //PARSE -s\r\n        if ((s_opts.isSet())) {\r\n            ss_value = s_opts.getValue();\r\n        } else {\r\n            throw new ParseException(\"SplitTypeNotFound: not -s option given.\");\r\n        }\r\n        //END_PARSE -s\r\n        //PARSE -n\r\n        if ((ss_value.equals(CmdParser.S_SPLIT)) || (ss_value.equals(CmdParser.S_NSPLIT))) {\r\n            if (n_opts.isSet()) {\r\n                sn_value = n_opts.getValue().trim();\r\n                //if nsplit -n option must be a number\r\n                if (ss_value.equals(CmdParser.S_NSPLIT)) {\r\n                    try {\r\n                        Integer.parseInt(sn_value);\r\n                    } catch (NumberFormatException nfe) {\r\n                        throw new ParseException(\"ParseSplitCommand: -n option not a numeric value.\");\r\n                    }\r\n                }\r\n                //if split i must validate the sequence\r\n                if (ss_value.equals(CmdParser.S_SPLIT)) {\r\n                    /*                Pattern p = Pattern.compile(\"(([0-9]*[-][0-9]*[:])|(all:))*\", Pattern.CASE_INSENSITIVE);\r\n                if (!(p.matcher(u_opts.getValue()).matches())){\r\n                    throw new ParseException(\"ParseConcatCommand: -u value parsing error. The string must be \\\"num1-num2:\\\" or \\\"all:\\\" repeated for each pdf file in input.\");\r\n                }\r\n*/\r\n                    //i can use \",\" or \" \" or \"-\" as separator\r\n                    sn_value = sn_value.replaceAll(\",\", \"-\").replaceAll(\" \", \"-\");\r\n                    Pattern p = Pattern.compile(\"([0-9]+)([-][0-9]+)*\");\r\n                    if (!(p.matcher(sn_value).matches())) {\r\n                        throw new ParseException(\"ParseSplitCommand: -n option must be a number or a sequence number-number-number...\");\r\n                    }\r\n                }\r\n            } else {\r\n                throw new ParseException(\"ParseSplitCommand: unable to find required option -n for the selected split mode.\");\r\n            }\r\n        } else {\r\n            if (n_opts.isSet()) {\r\n                throw new ParseException(\"ParseSplitCommand: unnecessary option -n for the selected split mode.\");\r\n            } else {\r\n                sn_value = \"0\";\r\n            }\r\n        }\r\n        //END_PARSE -n\r\n        //PARSE -compress\r\n        compressed_value = ((BooleanParam) command_line_handler.getOption(\"compressed\")).isTrue();\r\n        //END PARSE -compress\r\n        //PARSE -overwrite\r\n        overwrite_value = ((BooleanParam) command_line_handler.getOption(\"overwrite\")).isTrue();\r\n        //END PARSE -overwrite\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @return Returns the -f option value in concat command.\r\n     */\r\n    public Collection getCFValue() {\r\n        return cf_value;\r\n    }\r\n\r\n    /**\r\n     * @return Returns the -l option value in concat command.\r\n     */\r\n    public File getCLValue() {\r\n        return cl_value;\r\n    }\r\n\r\n    /**\r\n     * @return Returns the -u option value in concat command.\r\n     */\r\n    public String getCUValue() {\r\n        return cu_value;\r\n    }\r\n\r\n    /**\r\n     * @return\tReturns the -copyfields option value in concat command.\r\n     */\r\n    public boolean isCCopyFields() {\r\n        return copyfields_value;\r\n    }\r\n\r\n    /**\r\n     * @return Returns the -overwrite option value in concat command.\r\n     * @deprecated use <code>isOverwrite()</code>.\r\n     */\r\n    public boolean COverwrite() {\r\n        return overwrite_value;\r\n    }\r\n\r\n    /**\r\n     * @return Returns the -o option value. in concat command\r\n     */\r\n    public File getOValue() {\r\n        return o_value;\r\n    }\r\n\r\n    /**\r\n     * @return Returns the -o option value. in concat command\r\n     */\r\n    public File getLogValue() {\r\n        return log_value;\r\n    }\r\n\r\n    /**\r\n     * @return Returns the input_option.\r\n     */\r\n    public byte getInputOption() {\r\n        return input_option;\r\n    }\r\n\r\n    /**\r\n     * @return Returns the input_command.\r\n     */\r\n    public byte getInputCommand() {\r\n        return input_command;\r\n    }\r\n\r\n    /**\r\n     * @return Returns the sf_value.\r\n     */\r\n    public File getSFValue() {\r\n        return sf_value;\r\n    }\r\n\r\n    /**\r\n     * @return Returns the snumber_pages_value.\r\n     */\r\n    public String getSNumberPageValue() {\r\n        return sn_value;\r\n    }\r\n\r\n    /**\r\n     * @return Returns the sp_value.\r\n     */\r\n    public String getSPValue() {\r\n        return sp_value;\r\n    }\r\n\r\n    /**\r\n     * @return Returns the ss_value.\r\n     */\r\n    public String getSSValue() {\r\n        return ss_value;\r\n    }\r\n\r\n    /**\r\n     * @return Returns the -overwrite option value.\r\n     */\r\n    public boolean isOverwrite() {\r\n        return overwrite_value;\r\n    }\r\n\r\n    /**\r\n     * @return Returns the -compress option value.\r\n     */\r\n    public boolean isCompressed() {\r\n        return compressed_value;\r\n    }\r\n\r\n    /**\r\n     * @return Returns the -overwrite option value in concat command.\r\n     * @deprecated use <code>isOverwrite()</code>. This method is no longer working\r\n     */\r\n    public boolean MOverwrite() {\r\n        return false;\r\n    }\r\n}\r\n",
		"id": "EvoSuiteBenchmark/109_pdfsam/src/main/java/it/pdfsam/console/tools/CmdParserTest2.java",
		"test_prompt": "// CmdParserTest2.java\npackage it.pdfsam.console.tools;\n\nimport it.pdfsam.console.MainConsole;\nimport it.pdfsam.console.exception.ParseException;\nimport java.io.File;\nimport java.util.Collection;\nimport java.util.regex.Pattern;\nimport jcmdline.BooleanParam;\nimport jcmdline.CmdLineHandler;\nimport jcmdline.FileParam;\nimport jcmdline.HelpCmdLineHandler;\nimport jcmdline.Parameter;\nimport jcmdline.StringParam;\nimport jcmdline.VersionCmdLineHandler;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link CmdParser}.\n* It contains ten unit test cases for the {@link CmdParser#isOverwrite()} method.\n*/\nclass CmdParserTest2 {"
	},
	{
		"original_code": "// CmdParser.java\n/*\r\n * Created on 10-Feb-2006\r\n * Copyright (C) 2006 by Andrea Vacondio.\r\n *\r\n * This program is free software; you can redistribute it and/or modify it under the terms of the \r\n * GNU General Public License as published by the Free Software Foundation; \r\n * either version 2 of the License.\r\n * This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; \r\n * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. \r\n * See the GNU General Public License for more details.\r\n * You should have received a copy of the GNU General Public License along with this program; \r\n * if not, write to the Free Software Foundation, Inc., \r\n *  59 Temple Place, Suite 330, Boston, MA 02111-1307 USA\r\n */\r\npackage it.pdfsam.console.tools;\r\n\r\nimport it.pdfsam.console.MainConsole;\r\nimport it.pdfsam.console.exception.ParseException;\r\nimport java.io.File;\r\nimport java.util.Collection;\r\nimport java.util.regex.Pattern;\r\nimport jcmdline.BooleanParam;\r\nimport jcmdline.CmdLineHandler;\r\nimport jcmdline.FileParam;\r\nimport jcmdline.HelpCmdLineHandler;\r\nimport jcmdline.Parameter;\r\nimport jcmdline.StringParam;\r\nimport jcmdline.VersionCmdLineHandler;\r\n\r\n/**\r\n * Parser and core for the console. It creates a command line handler and parses input args.\r\n * If input command is correct (split or concat) it creates the right command line handler for the selected command\r\n * and it parses input args. If everything is correct, the right command is executed; an exception is thrwon otherwise.\r\n *\r\n * @author Andrea Vacondio\r\n * @see it.pdfsam.console.tools.pdf.PdfSplit\r\n * @see it.pdfsam.console.tools.pdf.PdfConcat\r\n */\r\npublic class CmdParser {\r\n\r\n    //constants used to get the split mode\r\n    final static public String S_BURST = \"BURST\";\r\n\r\n    final static public String S_SPLIT = \"SPLIT\";\r\n\r\n    final static public String S_NSPLIT = \"NSPLIT\";\r\n\r\n    final static public String S_EVEN = \"EVEN\";\r\n\r\n    final static public String S_ODD = \"ODD\";\r\n\r\n    //handler\r\n    private CmdLineHandler command_line_handler;\r\n\r\n    //input arguments\r\n    private String[] in_args;\r\n\r\n    //CONCAT\r\n    //-f value\r\n    private Collection cf_value;\r\n\r\n    //-l value\r\n    private File cl_value;\r\n\r\n    //-u value\r\n    private String cu_value;\r\n\r\n    //-copyfields value\r\n    private boolean copyfields_value = false;\r\n\r\n    //SPLIT\r\n    //-p value\r\n    private String sp_value;\r\n\r\n    //-l value\r\n    private File sf_value;\r\n\r\n    //-s value\r\n    private String ss_value;\r\n\r\n    //number_page argument\r\n    private String sn_value;\r\n\r\n    //ANY\r\n    //-o value\r\n    private File o_value;\r\n\r\n    //-log value\r\n    private File log_value = null;\r\n\r\n    //-overwrite value\r\n    private boolean overwrite_value = false;\r\n\r\n    //-compressed value\r\n    private boolean compressed_value = false;\r\n\r\n    //input command\r\n    private byte input_command = 0x00;\r\n\r\n    //input option\r\n    private byte input_option = 0x00;\r\n\r\n    //constants\r\n    final static public byte F_OPT = 0x01;\r\n\r\n    final static public byte L_OPT = 0x02;\r\n\r\n    //constants\r\n    final static public byte C_CONCAT = 0x01;\r\n\r\n    final static public byte C_SPLIT = 0x02;\r\n\r\n    final static private String COMMAND = \"java -jar pdfsam-console\";\r\n\r\n    final static private String DESCRIPTION = \"concat, split pdf files\";\r\n\r\n    //concat options if concat command is given\r\n    private final Parameter[] concat_opts = new Parameter[] { new FileParam(\"o\", \"pdf output file: if it doesn't exist it's created, if it exists it must be writeable\", ((FileParam.DOESNT_EXIST) | (FileParam.EXISTS & FileParam.IS_FILE & FileParam.IS_WRITEABLE)), FileParam.REQUIRED, FileParam.SINGLE_VALUED), new FileParam(\"f\", \"pdf files to concat: a list of existing pdf files (EX. -f /tmp/file1.pdf -f /tmp/file2.pdf)\", FileParam.IS_FILE & FileParam.IS_READABLE, FileParam.OPTIONAL, FileParam.MULTI_VALUED), new StringParam(\"u\", \"page selection script. You can set a subset of pages to merge. Accepted values: \\\"all\\\" or \\\"num1-num2\\\" (EX. -f /tmp/file1.pdf -f /tmp/file2.pdf -u all:all:), (EX. -f /tmp/file1.pdf -f /tmp/file2.pdf -u all:12-14:) to merge file1.pdf and pages 12,13,14 of file2.pdf. If -u is not set default behaviour is to merge document completely\", StringParam.OPTIONAL), new FileParam(\"l\", \"xml or csv file containing pdf files list to concat. If cvs file in comma separated value format; if xml file <filelist><file value=\\\"filepath\\\" /></filelist>\", FileParam.IS_FILE & FileParam.IS_READABLE, FileParam.OPTIONAL, FileParam.SINGLE_VALUED), new FileParam(\"log\", \"text file to log output messages\", ((FileParam.DOESNT_EXIST) | (FileParam.EXISTS & FileParam.IS_FILE & FileParam.IS_WRITEABLE)), FileParam.OPTIONAL, FileParam.SINGLE_VALUED), new BooleanParam(\"overwrite\", \"overwrite existing output file\"), new BooleanParam(\"compressed\", \"compress output file\"), new BooleanParam(\"copyfields\", \"input pdf documents contain forms (high memory usage)\") };\r\n\r\n    //split options if slit command is given\r\n    private final Parameter[] split_opts = new Parameter[] { new FileParam(\"o\", \"output directory\", ((FileParam.IS_DIR & FileParam.EXISTS)), FileParam.REQUIRED, FileParam.SINGLE_VALUED), new FileParam(\"f\", \"input pdf file to split\", FileParam.IS_FILE & FileParam.IS_READABLE, FileParam.REQUIRED, FileParam.SINGLE_VALUED), new StringParam(\"p\", \"prefix for the output files name\", StringParam.OPTIONAL), new StringParam(\"s\", \"split type {[\" + CmdParser.S_BURST + \"], [\" + CmdParser.S_ODD + \"], [\" + CmdParser.S_EVEN + \"], [\" + CmdParser.S_SPLIT + \"], [\" + CmdParser.S_NSPLIT + \"]}\", new String[] { CmdParser.S_BURST, CmdParser.S_ODD, CmdParser.S_EVEN, CmdParser.S_SPLIT, CmdParser.S_NSPLIT }, StringParam.REQUIRED), new StringParam(\"n\", \"page number to spli at if -s is \" + CmdParser.S_SPLIT + \" or \" + CmdParser.S_NSPLIT, StringParam.OPTIONAL), new FileParam(\"log\", \"text file to log output messages\", ((FileParam.DOESNT_EXIST) | (FileParam.EXISTS & FileParam.IS_FILE & FileParam.IS_WRITEABLE)), FileParam.OPTIONAL, FileParam.SINGLE_VALUED), new BooleanParam(\"overwrite\", \"overwrite existing output file\"), new BooleanParam(\"compressed\", \"compress output file\") };\r\n\r\n    /**\r\n     * The arguments for split command\r\n     */\r\n    private final Parameter[] split_arguments = new Parameter[] { new StringParam(\"command\", \"command to execute {[split]}\", new String[] { \"split\" }, StringParam.REQUIRED) };\r\n\r\n    /**\r\n     * The arguments for concat command\r\n     */\r\n    private final Parameter[] concat_arguments = new Parameter[] { new StringParam(\"command\", \"command to execute {[concat]}\", new String[] { \"concat\" }, StringParam.REQUIRED) };\r\n\r\n    /**\r\n     * The arguments this program takes\r\n     */\r\n    private final Parameter[] arguments = new Parameter[] { new StringParam(\"command\", \"command to execute {[concat], [split]}\", new String[] { \"concat\", \"split\" }, StringParam.REQUIRED) };\r\n\r\n    /**\r\n     * The help text for this program\r\n     */\r\n    public static final String concat_helpText = \"Concatenate pdf files. \" + \"you must specify the '-o /home/user/outfile.pdf' option to set the output file and the source file list:\\n\" + \"'-f /tmp/file1.pdf /tmp/file2.pdf -f /tmp/file3.pdf [...]' to specify a file list or at least one file to concat.\\n\" + \"'-l /tmp/list.csv' a csv file containing the list of files to concat, separated by a comma.\\n\" + \"'-l /tmp/list.xml' a xml file containing the list of files to concat, <filelist><file value=\\\"filepath\\\" /></filelist>\\n\" + \"'-u All:All:3-15' is optional to set pages selection. You can set a subset of pages to merge. Accepted values: \\\"all\\\" or \\\"num1-num2\\\" (EX. -f /tmp/file1.pdf -f /tmp/file2.pdf -u all:all:), (EX. -f /tmp/file1.pdf -f /tmp/file2.pdf -u all:12-14:) to merge file1.pdf and pages 12,13,14 of file2.pdf. If -u is not set default behaviour is to merge document completely\\n\" + \"Note: You can use only one of these options not both in the same command line\\n\\n\\n\" + \"'-overwrite' to overwrite output file if already exists.\\n\" + \"'-compress' to compress output file.\\n\" + \"'-copyfields' to deal with forms. Use this if input documents contain forms. This option will lead to a high memory usage.\\n\" + \"Example: java -jar pdfsam-console.jar -o /tmp/outfile.pdf -f /tmp/1.pdf -f /tmp/2.pdf concat\\n\" + \"Example: java -jar pdfsam-console.jar -l c:\\\\docs\\\\list.csv concat\";\r\n\r\n    /**\r\n     * The help text for this program\r\n     */\r\n    public static final String split_helpText = \"Split pdf file. \" + \"You must specify '-f /home/user/infile.pdf' option to set the input file you want to split.\\n\" + \"You must specify '-o /home/user' to set the output directory.\\n\" + \"You must specify '-s split_type' to set the split type. Possible values: {[\" + CmdParser.S_BURST + \"], [\" + CmdParser.S_ODD + \"], [\" + CmdParser.S_EVEN + \"], [\" + CmdParser.S_SPLIT + \"], [\" + CmdParser.S_NSPLIT + \"]}\\n\" + \"'-p prefix_' to specify a prefix for output names of files. If it contains \\\"[CURRENTPAGE]\\\" or \\\"[TIMESTAMP]\\\" it performs variable substitution. (Ex. [BASENAME]_prefix_[CURRENTPAGE] generates FileName_prefix_005.pdf)\\n\" + \"Available prefix variables: [CURRENTPAGE], [TIMESTAMP], [BASENAME].\\n\" + \"'-n number' to specify a page number to splip at if -s is SPLIT or NSPLIT.\\n\\n\\n\" + \"'-overwrite' to overwrite output file if already exists.\\n\" + \"'-compress' to compress output file.\\n\" + \"Example: java -jar pdfsam-console.jar -f /tmp/1.pdf -o /tmp -s BURST -p splitted_ split\\n\" + \"Example: java -jar pdfsam-console.jar -f /tmp/1.pdf -o /tmp -s NSPLIT -n 4 split\\n\";\r\n\r\n    /**\r\n     * The help text for this program\r\n     */\r\n    public static final String helpText = CmdParser.COMMAND + \" -h [command] for commands help. \";\r\n\r\n    /**\r\n     * Costructor\r\n     * @param input_args Arguments to parse\r\n     */\r\n    public CmdParser(String[] input_args) {\r\n        //cmd handler creation\r\n        in_args = input_args;\r\n    }\r\n\r\n    /**\r\n     * Parse the in_args to get the input command type. It creates the right command handler for split or concat command\r\n     * and it parses in_args again. Executes concat or split of pdf files if everything is ok, an exception is thrown otherwise.\r\n     */\r\n    public void parse() throws Exception {\r\n        String i_command = \"\";\r\n        if (in_args == null || in_args.length == 0) {\r\n            //create a new handler\r\n            command_line_handler = new VersionCmdLineHandler(\"pdfsam-console ver.\" + MainConsole.VERSION, new HelpCmdLineHandler(CmdParser.helpText, CmdParser.COMMAND, CmdParser.DESCRIPTION, null, arguments));\r\n        } else {\r\n            i_command = in_args[in_args.length - 1];\r\n            //parse command\r\n            if (i_command.equals(\"concat\")) {\r\n                input_command = CmdParser.C_CONCAT;\r\n                //create a new handler specific for concat\r\n                command_line_handler = new VersionCmdLineHandler(\"pdfsam-console ver.\" + MainConsole.VERSION, new HelpCmdLineHandler(CmdParser.concat_helpText, CmdParser.COMMAND, CmdParser.DESCRIPTION, concat_opts, concat_arguments));\r\n            } else if (i_command.equals(\"split\")) {\r\n                input_command = CmdParser.C_SPLIT;\r\n                //create a new handler specific for split\r\n                command_line_handler = new VersionCmdLineHandler(\"pdfsam-console ver.\" + MainConsole.VERSION, new HelpCmdLineHandler(CmdParser.split_helpText, CmdParser.COMMAND, CmdParser.DESCRIPTION, split_opts, split_arguments));\r\n            } else {\r\n                //create a new handler\r\n                command_line_handler = new VersionCmdLineHandler(\"pdfsam-console ver.\" + MainConsole.VERSION, new HelpCmdLineHandler(CmdParser.helpText, CmdParser.COMMAND, CmdParser.DESCRIPTION, null, arguments));\r\n            }\r\n        }\r\n        command_line_handler.setDieOnParseError(false);\r\n        if (command_line_handler.parse(in_args)) {\r\n            if (i_command.equals(\"concat\")) {\r\n                ParseConcatCommand();\r\n            } else if (i_command.equals(\"split\")) {\r\n                ParseSplitCommand();\r\n            }\r\n        } else {\r\n            throw new ParseException(\"ParseError: \" + command_line_handler.getParseError());\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Parser for the command line input with the \"concat\" argument. Input is validated and, if no exception is thrown,\r\n     * is processed. Files extension must be of the right type. Options -l and -f can't be together in the input line.\r\n     * @return true if the command is parsed correctly, exception otherwise.\r\n     * @throws Exception\r\n     */\r\n    private boolean ParseConcatCommand() throws Exception {\r\n        //PARSE -o\r\n        FileParam o_opts = (FileParam) command_line_handler.getOption(\"o\");\r\n        //no output option given\r\n        if (!(o_opts.isSet())) {\r\n            throw new ParseException(\"OutputNotFound: missing or illegal -o option.\");\r\n        } else //output is given\r\n        {\r\n            File out_file;\r\n            out_file = o_opts.getFile();\r\n            //output is given but is not a pdf file\r\n            if (!(out_file.getPath().toLowerCase().endsWith(\".pdf\"))) {\r\n                throw new ParseException(\"ParseConcatCommand: output file not a pdf format.\");\r\n            } else if (out_file.getName().toLowerCase().equals(\".pdf\")) {\r\n                throw new ParseException(\"ParseConcatCommand: no output file name.\");\r\n            } else {\r\n                o_value = out_file;\r\n            }\r\n        }\r\n        //END_PARSE -o\r\n        //PARSE -l -f\r\n        FileParam l_opts = (FileParam) command_line_handler.getOption(\"l\");\r\n        FileParam f_opts = (FileParam) command_line_handler.getOption(\"f\");\r\n        //both not set, no input given\r\n        if ((!(l_opts.isSet())) && (!(f_opts.isSet()))) {\r\n            throw new ParseException(\"InputNotFound: no -f or -l option given.\");\r\n        } else //both are set\r\n        if ((l_opts.isSet()) && (f_opts.isSet())) {\r\n            throw new ParseException(\"TooManyInputSources: both -f and -l options given.\");\r\n        } else //-l option error: no csv file given\r\n        if ((!(f_opts.isSet())) && (!(l_opts.getFile().getPath().toLowerCase().endsWith(\".csv\"))) && !(l_opts.getFile().getPath().toLowerCase().endsWith(\".xml\"))) {\r\n            throw new ParseException(\"ParseConcatCommand: input list file not a csv or xml format.\");\r\n        } else //only f_opts is set\r\n        if ((f_opts.isSet()) && (!(l_opts.isSet()))) {\r\n            File input_file = f_opts.getFile();\r\n            if (!(input_file.getPath().toLowerCase().endsWith(\".pdf\"))) {\r\n                throw new ParseException(\"ParseConcatCommand: input file \" + input_file.getName() + \" is not a pdf format.\");\r\n            }\r\n            input_option = CmdParser.F_OPT;\r\n            cf_value = f_opts.getFiles();\r\n        } else //only l_opts is set\r\n        if ((l_opts.isSet()) && (!(f_opts.isSet()))) {\r\n            //-l option error: no csv file given\r\n            if (!(l_opts.getFile().getPath().toLowerCase().endsWith(\".csv\")) && !(l_opts.getFile().getPath().toLowerCase().endsWith(\".xml\"))) {\r\n                throw new ParseException(\"ParseConcatCommand: input list file not a csv or xml format.\");\r\n            } else {\r\n                input_option = CmdParser.L_OPT;\r\n                cl_value = l_opts.getFile();\r\n            }\r\n        }\r\n        //END_PARSE -l -f\r\n        //PARSE -log\r\n        FileParam log_opts = (FileParam) command_line_handler.getOption(\"log\");\r\n        if (log_opts.isSet()) {\r\n            log_value = log_opts.getFile();\r\n        }\r\n        //END_PARSE -log\r\n        //PARSE -u\r\n        StringParam u_opts = (StringParam) command_line_handler.getOption(\"u\");\r\n        //if it's set we proceed with validation\r\n        if (u_opts.isSet()) {\r\n            //regexp pattern\r\n            Pattern p = Pattern.compile(\"(([0-9]*[-][0-9]*[:])|(all:))*\", Pattern.CASE_INSENSITIVE);\r\n            if ((p.matcher(u_opts.getValue()).matches())) {\r\n                cu_value = u_opts.getValue();\r\n            } else {\r\n                throw new ParseException(\"ParseConcatCommand: -u value parsing error. The string must be \\\"num1-num2:\\\" or \\\"all:\\\" repeated for each pdf file in input.\");\r\n            }\r\n        }\r\n        //END_PARSE -u\r\n        //PARSE -overwrite\r\n        overwrite_value = ((BooleanParam) command_line_handler.getOption(\"overwrite\")).isTrue();\r\n        //END PARSE -overwrite\r\n        //PARSE -compress\r\n        compressed_value = ((BooleanParam) command_line_handler.getOption(\"compressed\")).isTrue();\r\n        //END PARSE -compress\r\n        //PARSE -copyfields\r\n        copyfields_value = ((BooleanParam) command_line_handler.getOption(\"copyfields\")).isTrue();\r\n        //END PARSE -copyfields\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Parser for the command line input with the \"split\" argument. Input is validated and, if no exception is thrown,\r\n     * is processed. Files extension must be of the right type.\r\n     * @return true if the command is parsed correctly, exception otherwise.\r\n     * @throws Exception\r\n     */\r\n    private boolean ParseSplitCommand() throws Exception {\r\n        //PARSE -o\r\n        FileParam o_opts = (FileParam) command_line_handler.getOption(\"o\");\r\n        //no output option given\r\n        if ((o_opts.isSet())) {\r\n            File out_file;\r\n            out_file = o_opts.getFile();\r\n            //output is given but is not a pdf file\r\n            if (!(out_file.isDirectory())) {\r\n                throw new ParseException(\"ParseSplitCommand: output is not a directory.\");\r\n            } else {\r\n                o_value = out_file;\r\n            }\r\n        } else {\r\n            throw new ParseException(\"OutputNotFound: missing or illegal -o option.\");\r\n        }\r\n        //END_PARSE -o\r\n        //PARSE -log\r\n        FileParam log_opts = (FileParam) command_line_handler.getOption(\"log\");\r\n        if (log_opts.isSet()) {\r\n            log_value = log_opts.getFile();\r\n        }\r\n        //END_PARSE -log\r\n        StringParam p_opts = (StringParam) command_line_handler.getOption(\"p\");\r\n        FileParam f_opts = (FileParam) command_line_handler.getOption(\"f\");\r\n        StringParam s_opts = (StringParam) command_line_handler.getOption(\"s\");\r\n        StringParam n_opts = (StringParam) command_line_handler.getOption(\"n\");\r\n        //PARSE -p\r\n        if (p_opts.isSet()) {\r\n            sp_value = p_opts.getValue();\r\n        } else {\r\n            sp_value = \"\";\r\n        }\r\n        //END_PARSE -p\r\n        //PARSE -f\r\n        File input_file;\r\n        input_file = f_opts.getFile();\r\n        //input is given but is not a pdf file\r\n        if ((input_file.getPath().toLowerCase().endsWith(\".pdf\"))) {\r\n            sf_value = input_file;\r\n        } else {\r\n            throw new ParseException(\"ParseSplitCommand: input file not a pdf format.\");\r\n        }\r\n        //END_PARSE -f\r\n        //PARSE -s\r\n        if ((s_opts.isSet())) {\r\n            ss_value = s_opts.getValue();\r\n        } else {\r\n            throw new ParseException(\"SplitTypeNotFound: not -s option given.\");\r\n        }\r\n        //END_PARSE -s\r\n        //PARSE -n\r\n        if ((ss_value.equals(CmdParser.S_SPLIT)) || (ss_value.equals(CmdParser.S_NSPLIT))) {\r\n            if (n_opts.isSet()) {\r\n                sn_value = n_opts.getValue().trim();\r\n                //if nsplit -n option must be a number\r\n                if (ss_value.equals(CmdParser.S_NSPLIT)) {\r\n                    try {\r\n                        Integer.parseInt(sn_value);\r\n                    } catch (NumberFormatException nfe) {\r\n                        throw new ParseException(\"ParseSplitCommand: -n option not a numeric value.\");\r\n                    }\r\n                }\r\n                //if split i must validate the sequence\r\n                if (ss_value.equals(CmdParser.S_SPLIT)) {\r\n                    /*                Pattern p = Pattern.compile(\"(([0-9]*[-][0-9]*[:])|(all:))*\", Pattern.CASE_INSENSITIVE);\r\n                if (!(p.matcher(u_opts.getValue()).matches())){\r\n                    throw new ParseException(\"ParseConcatCommand: -u value parsing error. The string must be \\\"num1-num2:\\\" or \\\"all:\\\" repeated for each pdf file in input.\");\r\n                }\r\n*/\r\n                    //i can use \",\" or \" \" or \"-\" as separator\r\n                    sn_value = sn_value.replaceAll(\",\", \"-\").replaceAll(\" \", \"-\");\r\n                    Pattern p = Pattern.compile(\"([0-9]+)([-][0-9]+)*\");\r\n                    if (!(p.matcher(sn_value).matches())) {\r\n                        throw new ParseException(\"ParseSplitCommand: -n option must be a number or a sequence number-number-number...\");\r\n                    }\r\n                }\r\n            } else {\r\n                throw new ParseException(\"ParseSplitCommand: unable to find required option -n for the selected split mode.\");\r\n            }\r\n        } else {\r\n            if (n_opts.isSet()) {\r\n                throw new ParseException(\"ParseSplitCommand: unnecessary option -n for the selected split mode.\");\r\n            } else {\r\n                sn_value = \"0\";\r\n            }\r\n        }\r\n        //END_PARSE -n\r\n        //PARSE -compress\r\n        compressed_value = ((BooleanParam) command_line_handler.getOption(\"compressed\")).isTrue();\r\n        //END PARSE -compress\r\n        //PARSE -overwrite\r\n        overwrite_value = ((BooleanParam) command_line_handler.getOption(\"overwrite\")).isTrue();\r\n        //END PARSE -overwrite\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @return Returns the -f option value in concat command.\r\n     */\r\n    public Collection getCFValue() {\r\n        return cf_value;\r\n    }\r\n\r\n    /**\r\n     * @return Returns the -l option value in concat command.\r\n     */\r\n    public File getCLValue() {\r\n        return cl_value;\r\n    }\r\n\r\n    /**\r\n     * @return Returns the -u option value in concat command.\r\n     */\r\n    public String getCUValue() {\r\n        return cu_value;\r\n    }\r\n\r\n    /**\r\n     * @return\tReturns the -copyfields option value in concat command.\r\n     */\r\n    public boolean isCCopyFields() {\r\n        return copyfields_value;\r\n    }\r\n\r\n    /**\r\n     * @return Returns the -overwrite option value in concat command.\r\n     * @deprecated use <code>isOverwrite()</code>.\r\n     */\r\n    public boolean COverwrite() {\r\n        return overwrite_value;\r\n    }\r\n\r\n    /**\r\n     * @return Returns the -o option value. in concat command\r\n     */\r\n    public File getOValue() {\r\n        return o_value;\r\n    }\r\n\r\n    /**\r\n     * @return Returns the -o option value. in concat command\r\n     */\r\n    public File getLogValue() {\r\n        return log_value;\r\n    }\r\n\r\n    /**\r\n     * @return Returns the input_option.\r\n     */\r\n    public byte getInputOption() {\r\n        return input_option;\r\n    }\r\n\r\n    /**\r\n     * @return Returns the input_command.\r\n     */\r\n    public byte getInputCommand() {\r\n        return input_command;\r\n    }\r\n\r\n    /**\r\n     * @return Returns the sf_value.\r\n     */\r\n    public File getSFValue() {\r\n        return sf_value;\r\n    }\r\n\r\n    /**\r\n     * @return Returns the snumber_pages_value.\r\n     */\r\n    public String getSNumberPageValue() {\r\n        return sn_value;\r\n    }\r\n\r\n    /**\r\n     * @return Returns the sp_value.\r\n     */\r\n    public String getSPValue() {\r\n        return sp_value;\r\n    }\r\n\r\n    /**\r\n     * @return Returns the ss_value.\r\n     */\r\n    public String getSSValue() {\r\n        return ss_value;\r\n    }\r\n\r\n    /**\r\n     * @return Returns the -overwrite option value.\r\n     */\r\n    public boolean isOverwrite() {\r\n        return overwrite_value;\r\n    }\r\n\r\n    /**\r\n     * @return Returns the -compress option value.\r\n     */\r\n    public boolean isCompressed() {\r\n        return compressed_value;\r\n    }\r\n\r\n    /**\r\n     * @return Returns the -overwrite option value in concat command.\r\n     * @deprecated use <code>isOverwrite()</code>. This method is no longer working\r\n     */\r\n    public boolean MOverwrite() {\r\n        return false;\r\n    }\r\n}\r\n",
		"id": "EvoSuiteBenchmark/109_pdfsam/src/main/java/it/pdfsam/console/tools/CmdParserTest3.java",
		"test_prompt": "// CmdParserTest3.java\npackage it.pdfsam.console.tools;\n\nimport it.pdfsam.console.MainConsole;\nimport it.pdfsam.console.exception.ParseException;\nimport java.io.File;\nimport java.util.Collection;\nimport java.util.regex.Pattern;\nimport jcmdline.BooleanParam;\nimport jcmdline.CmdLineHandler;\nimport jcmdline.FileParam;\nimport jcmdline.HelpCmdLineHandler;\nimport jcmdline.Parameter;\nimport jcmdline.StringParam;\nimport jcmdline.VersionCmdLineHandler;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link CmdParser}.\n* It contains ten unit test cases for the {@link CmdParser#isCompressed()} method.\n*/\nclass CmdParserTest3 {"
	},
	{
		"original_code": "// CmdParser.java\n/*\r\n * Created on 10-Feb-2006\r\n * Copyright (C) 2006 by Andrea Vacondio.\r\n *\r\n * This program is free software; you can redistribute it and/or modify it under the terms of the \r\n * GNU General Public License as published by the Free Software Foundation; \r\n * either version 2 of the License.\r\n * This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; \r\n * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. \r\n * See the GNU General Public License for more details.\r\n * You should have received a copy of the GNU General Public License along with this program; \r\n * if not, write to the Free Software Foundation, Inc., \r\n *  59 Temple Place, Suite 330, Boston, MA 02111-1307 USA\r\n */\r\npackage it.pdfsam.console.tools;\r\n\r\nimport it.pdfsam.console.MainConsole;\r\nimport it.pdfsam.console.exception.ParseException;\r\nimport java.io.File;\r\nimport java.util.Collection;\r\nimport java.util.regex.Pattern;\r\nimport jcmdline.BooleanParam;\r\nimport jcmdline.CmdLineHandler;\r\nimport jcmdline.FileParam;\r\nimport jcmdline.HelpCmdLineHandler;\r\nimport jcmdline.Parameter;\r\nimport jcmdline.StringParam;\r\nimport jcmdline.VersionCmdLineHandler;\r\n\r\n/**\r\n * Parser and core for the console. It creates a command line handler and parses input args.\r\n * If input command is correct (split or concat) it creates the right command line handler for the selected command\r\n * and it parses input args. If everything is correct, the right command is executed; an exception is thrwon otherwise.\r\n *\r\n * @author Andrea Vacondio\r\n * @see it.pdfsam.console.tools.pdf.PdfSplit\r\n * @see it.pdfsam.console.tools.pdf.PdfConcat\r\n */\r\npublic class CmdParser {\r\n\r\n    //constants used to get the split mode\r\n    final static public String S_BURST = \"BURST\";\r\n\r\n    final static public String S_SPLIT = \"SPLIT\";\r\n\r\n    final static public String S_NSPLIT = \"NSPLIT\";\r\n\r\n    final static public String S_EVEN = \"EVEN\";\r\n\r\n    final static public String S_ODD = \"ODD\";\r\n\r\n    //handler\r\n    private CmdLineHandler command_line_handler;\r\n\r\n    //input arguments\r\n    private String[] in_args;\r\n\r\n    //CONCAT\r\n    //-f value\r\n    private Collection cf_value;\r\n\r\n    //-l value\r\n    private File cl_value;\r\n\r\n    //-u value\r\n    private String cu_value;\r\n\r\n    //-copyfields value\r\n    private boolean copyfields_value = false;\r\n\r\n    //SPLIT\r\n    //-p value\r\n    private String sp_value;\r\n\r\n    //-l value\r\n    private File sf_value;\r\n\r\n    //-s value\r\n    private String ss_value;\r\n\r\n    //number_page argument\r\n    private String sn_value;\r\n\r\n    //ANY\r\n    //-o value\r\n    private File o_value;\r\n\r\n    //-log value\r\n    private File log_value = null;\r\n\r\n    //-overwrite value\r\n    private boolean overwrite_value = false;\r\n\r\n    //-compressed value\r\n    private boolean compressed_value = false;\r\n\r\n    //input command\r\n    private byte input_command = 0x00;\r\n\r\n    //input option\r\n    private byte input_option = 0x00;\r\n\r\n    //constants\r\n    final static public byte F_OPT = 0x01;\r\n\r\n    final static public byte L_OPT = 0x02;\r\n\r\n    //constants\r\n    final static public byte C_CONCAT = 0x01;\r\n\r\n    final static public byte C_SPLIT = 0x02;\r\n\r\n    final static private String COMMAND = \"java -jar pdfsam-console\";\r\n\r\n    final static private String DESCRIPTION = \"concat, split pdf files\";\r\n\r\n    //concat options if concat command is given\r\n    private final Parameter[] concat_opts = new Parameter[] { new FileParam(\"o\", \"pdf output file: if it doesn't exist it's created, if it exists it must be writeable\", ((FileParam.DOESNT_EXIST) | (FileParam.EXISTS & FileParam.IS_FILE & FileParam.IS_WRITEABLE)), FileParam.REQUIRED, FileParam.SINGLE_VALUED), new FileParam(\"f\", \"pdf files to concat: a list of existing pdf files (EX. -f /tmp/file1.pdf -f /tmp/file2.pdf)\", FileParam.IS_FILE & FileParam.IS_READABLE, FileParam.OPTIONAL, FileParam.MULTI_VALUED), new StringParam(\"u\", \"page selection script. You can set a subset of pages to merge. Accepted values: \\\"all\\\" or \\\"num1-num2\\\" (EX. -f /tmp/file1.pdf -f /tmp/file2.pdf -u all:all:), (EX. -f /tmp/file1.pdf -f /tmp/file2.pdf -u all:12-14:) to merge file1.pdf and pages 12,13,14 of file2.pdf. If -u is not set default behaviour is to merge document completely\", StringParam.OPTIONAL), new FileParam(\"l\", \"xml or csv file containing pdf files list to concat. If cvs file in comma separated value format; if xml file <filelist><file value=\\\"filepath\\\" /></filelist>\", FileParam.IS_FILE & FileParam.IS_READABLE, FileParam.OPTIONAL, FileParam.SINGLE_VALUED), new FileParam(\"log\", \"text file to log output messages\", ((FileParam.DOESNT_EXIST) | (FileParam.EXISTS & FileParam.IS_FILE & FileParam.IS_WRITEABLE)), FileParam.OPTIONAL, FileParam.SINGLE_VALUED), new BooleanParam(\"overwrite\", \"overwrite existing output file\"), new BooleanParam(\"compressed\", \"compress output file\"), new BooleanParam(\"copyfields\", \"input pdf documents contain forms (high memory usage)\") };\r\n\r\n    //split options if slit command is given\r\n    private final Parameter[] split_opts = new Parameter[] { new FileParam(\"o\", \"output directory\", ((FileParam.IS_DIR & FileParam.EXISTS)), FileParam.REQUIRED, FileParam.SINGLE_VALUED), new FileParam(\"f\", \"input pdf file to split\", FileParam.IS_FILE & FileParam.IS_READABLE, FileParam.REQUIRED, FileParam.SINGLE_VALUED), new StringParam(\"p\", \"prefix for the output files name\", StringParam.OPTIONAL), new StringParam(\"s\", \"split type {[\" + CmdParser.S_BURST + \"], [\" + CmdParser.S_ODD + \"], [\" + CmdParser.S_EVEN + \"], [\" + CmdParser.S_SPLIT + \"], [\" + CmdParser.S_NSPLIT + \"]}\", new String[] { CmdParser.S_BURST, CmdParser.S_ODD, CmdParser.S_EVEN, CmdParser.S_SPLIT, CmdParser.S_NSPLIT }, StringParam.REQUIRED), new StringParam(\"n\", \"page number to spli at if -s is \" + CmdParser.S_SPLIT + \" or \" + CmdParser.S_NSPLIT, StringParam.OPTIONAL), new FileParam(\"log\", \"text file to log output messages\", ((FileParam.DOESNT_EXIST) | (FileParam.EXISTS & FileParam.IS_FILE & FileParam.IS_WRITEABLE)), FileParam.OPTIONAL, FileParam.SINGLE_VALUED), new BooleanParam(\"overwrite\", \"overwrite existing output file\"), new BooleanParam(\"compressed\", \"compress output file\") };\r\n\r\n    /**\r\n     * The arguments for split command\r\n     */\r\n    private final Parameter[] split_arguments = new Parameter[] { new StringParam(\"command\", \"command to execute {[split]}\", new String[] { \"split\" }, StringParam.REQUIRED) };\r\n\r\n    /**\r\n     * The arguments for concat command\r\n     */\r\n    private final Parameter[] concat_arguments = new Parameter[] { new StringParam(\"command\", \"command to execute {[concat]}\", new String[] { \"concat\" }, StringParam.REQUIRED) };\r\n\r\n    /**\r\n     * The arguments this program takes\r\n     */\r\n    private final Parameter[] arguments = new Parameter[] { new StringParam(\"command\", \"command to execute {[concat], [split]}\", new String[] { \"concat\", \"split\" }, StringParam.REQUIRED) };\r\n\r\n    /**\r\n     * The help text for this program\r\n     */\r\n    public static final String concat_helpText = \"Concatenate pdf files. \" + \"you must specify the '-o /home/user/outfile.pdf' option to set the output file and the source file list:\\n\" + \"'-f /tmp/file1.pdf /tmp/file2.pdf -f /tmp/file3.pdf [...]' to specify a file list or at least one file to concat.\\n\" + \"'-l /tmp/list.csv' a csv file containing the list of files to concat, separated by a comma.\\n\" + \"'-l /tmp/list.xml' a xml file containing the list of files to concat, <filelist><file value=\\\"filepath\\\" /></filelist>\\n\" + \"'-u All:All:3-15' is optional to set pages selection. You can set a subset of pages to merge. Accepted values: \\\"all\\\" or \\\"num1-num2\\\" (EX. -f /tmp/file1.pdf -f /tmp/file2.pdf -u all:all:), (EX. -f /tmp/file1.pdf -f /tmp/file2.pdf -u all:12-14:) to merge file1.pdf and pages 12,13,14 of file2.pdf. If -u is not set default behaviour is to merge document completely\\n\" + \"Note: You can use only one of these options not both in the same command line\\n\\n\\n\" + \"'-overwrite' to overwrite output file if already exists.\\n\" + \"'-compress' to compress output file.\\n\" + \"'-copyfields' to deal with forms. Use this if input documents contain forms. This option will lead to a high memory usage.\\n\" + \"Example: java -jar pdfsam-console.jar -o /tmp/outfile.pdf -f /tmp/1.pdf -f /tmp/2.pdf concat\\n\" + \"Example: java -jar pdfsam-console.jar -l c:\\\\docs\\\\list.csv concat\";\r\n\r\n    /**\r\n     * The help text for this program\r\n     */\r\n    public static final String split_helpText = \"Split pdf file. \" + \"You must specify '-f /home/user/infile.pdf' option to set the input file you want to split.\\n\" + \"You must specify '-o /home/user' to set the output directory.\\n\" + \"You must specify '-s split_type' to set the split type. Possible values: {[\" + CmdParser.S_BURST + \"], [\" + CmdParser.S_ODD + \"], [\" + CmdParser.S_EVEN + \"], [\" + CmdParser.S_SPLIT + \"], [\" + CmdParser.S_NSPLIT + \"]}\\n\" + \"'-p prefix_' to specify a prefix for output names of files. If it contains \\\"[CURRENTPAGE]\\\" or \\\"[TIMESTAMP]\\\" it performs variable substitution. (Ex. [BASENAME]_prefix_[CURRENTPAGE] generates FileName_prefix_005.pdf)\\n\" + \"Available prefix variables: [CURRENTPAGE], [TIMESTAMP], [BASENAME].\\n\" + \"'-n number' to specify a page number to splip at if -s is SPLIT or NSPLIT.\\n\\n\\n\" + \"'-overwrite' to overwrite output file if already exists.\\n\" + \"'-compress' to compress output file.\\n\" + \"Example: java -jar pdfsam-console.jar -f /tmp/1.pdf -o /tmp -s BURST -p splitted_ split\\n\" + \"Example: java -jar pdfsam-console.jar -f /tmp/1.pdf -o /tmp -s NSPLIT -n 4 split\\n\";\r\n\r\n    /**\r\n     * The help text for this program\r\n     */\r\n    public static final String helpText = CmdParser.COMMAND + \" -h [command] for commands help. \";\r\n\r\n    /**\r\n     * Costructor\r\n     * @param input_args Arguments to parse\r\n     */\r\n    public CmdParser(String[] input_args) {\r\n        //cmd handler creation\r\n        in_args = input_args;\r\n    }\r\n\r\n    /**\r\n     * Parse the in_args to get the input command type. It creates the right command handler for split or concat command\r\n     * and it parses in_args again. Executes concat or split of pdf files if everything is ok, an exception is thrown otherwise.\r\n     */\r\n    public void parse() throws Exception {\r\n        String i_command = \"\";\r\n        if (in_args == null || in_args.length == 0) {\r\n            //create a new handler\r\n            command_line_handler = new VersionCmdLineHandler(\"pdfsam-console ver.\" + MainConsole.VERSION, new HelpCmdLineHandler(CmdParser.helpText, CmdParser.COMMAND, CmdParser.DESCRIPTION, null, arguments));\r\n        } else {\r\n            i_command = in_args[in_args.length - 1];\r\n            //parse command\r\n            if (i_command.equals(\"concat\")) {\r\n                input_command = CmdParser.C_CONCAT;\r\n                //create a new handler specific for concat\r\n                command_line_handler = new VersionCmdLineHandler(\"pdfsam-console ver.\" + MainConsole.VERSION, new HelpCmdLineHandler(CmdParser.concat_helpText, CmdParser.COMMAND, CmdParser.DESCRIPTION, concat_opts, concat_arguments));\r\n            } else if (i_command.equals(\"split\")) {\r\n                input_command = CmdParser.C_SPLIT;\r\n                //create a new handler specific for split\r\n                command_line_handler = new VersionCmdLineHandler(\"pdfsam-console ver.\" + MainConsole.VERSION, new HelpCmdLineHandler(CmdParser.split_helpText, CmdParser.COMMAND, CmdParser.DESCRIPTION, split_opts, split_arguments));\r\n            } else {\r\n                //create a new handler\r\n                command_line_handler = new VersionCmdLineHandler(\"pdfsam-console ver.\" + MainConsole.VERSION, new HelpCmdLineHandler(CmdParser.helpText, CmdParser.COMMAND, CmdParser.DESCRIPTION, null, arguments));\r\n            }\r\n        }\r\n        command_line_handler.setDieOnParseError(false);\r\n        if (command_line_handler.parse(in_args)) {\r\n            if (i_command.equals(\"concat\")) {\r\n                ParseConcatCommand();\r\n            } else if (i_command.equals(\"split\")) {\r\n                ParseSplitCommand();\r\n            }\r\n        } else {\r\n            throw new ParseException(\"ParseError: \" + command_line_handler.getParseError());\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Parser for the command line input with the \"concat\" argument. Input is validated and, if no exception is thrown,\r\n     * is processed. Files extension must be of the right type. Options -l and -f can't be together in the input line.\r\n     * @return true if the command is parsed correctly, exception otherwise.\r\n     * @throws Exception\r\n     */\r\n    private boolean ParseConcatCommand() throws Exception {\r\n        //PARSE -o\r\n        FileParam o_opts = (FileParam) command_line_handler.getOption(\"o\");\r\n        //no output option given\r\n        if (!(o_opts.isSet())) {\r\n            throw new ParseException(\"OutputNotFound: missing or illegal -o option.\");\r\n        } else //output is given\r\n        {\r\n            File out_file;\r\n            out_file = o_opts.getFile();\r\n            //output is given but is not a pdf file\r\n            if (!(out_file.getPath().toLowerCase().endsWith(\".pdf\"))) {\r\n                throw new ParseException(\"ParseConcatCommand: output file not a pdf format.\");\r\n            } else if (out_file.getName().toLowerCase().equals(\".pdf\")) {\r\n                throw new ParseException(\"ParseConcatCommand: no output file name.\");\r\n            } else {\r\n                o_value = out_file;\r\n            }\r\n        }\r\n        //END_PARSE -o\r\n        //PARSE -l -f\r\n        FileParam l_opts = (FileParam) command_line_handler.getOption(\"l\");\r\n        FileParam f_opts = (FileParam) command_line_handler.getOption(\"f\");\r\n        //both not set, no input given\r\n        if ((!(l_opts.isSet())) && (!(f_opts.isSet()))) {\r\n            throw new ParseException(\"InputNotFound: no -f or -l option given.\");\r\n        } else //both are set\r\n        if ((l_opts.isSet()) && (f_opts.isSet())) {\r\n            throw new ParseException(\"TooManyInputSources: both -f and -l options given.\");\r\n        } else //-l option error: no csv file given\r\n        if ((!(f_opts.isSet())) && (!(l_opts.getFile().getPath().toLowerCase().endsWith(\".csv\"))) && !(l_opts.getFile().getPath().toLowerCase().endsWith(\".xml\"))) {\r\n            throw new ParseException(\"ParseConcatCommand: input list file not a csv or xml format.\");\r\n        } else //only f_opts is set\r\n        if ((f_opts.isSet()) && (!(l_opts.isSet()))) {\r\n            File input_file = f_opts.getFile();\r\n            if (!(input_file.getPath().toLowerCase().endsWith(\".pdf\"))) {\r\n                throw new ParseException(\"ParseConcatCommand: input file \" + input_file.getName() + \" is not a pdf format.\");\r\n            }\r\n            input_option = CmdParser.F_OPT;\r\n            cf_value = f_opts.getFiles();\r\n        } else //only l_opts is set\r\n        if ((l_opts.isSet()) && (!(f_opts.isSet()))) {\r\n            //-l option error: no csv file given\r\n            if (!(l_opts.getFile().getPath().toLowerCase().endsWith(\".csv\")) && !(l_opts.getFile().getPath().toLowerCase().endsWith(\".xml\"))) {\r\n                throw new ParseException(\"ParseConcatCommand: input list file not a csv or xml format.\");\r\n            } else {\r\n                input_option = CmdParser.L_OPT;\r\n                cl_value = l_opts.getFile();\r\n            }\r\n        }\r\n        //END_PARSE -l -f\r\n        //PARSE -log\r\n        FileParam log_opts = (FileParam) command_line_handler.getOption(\"log\");\r\n        if (log_opts.isSet()) {\r\n            log_value = log_opts.getFile();\r\n        }\r\n        //END_PARSE -log\r\n        //PARSE -u\r\n        StringParam u_opts = (StringParam) command_line_handler.getOption(\"u\");\r\n        //if it's set we proceed with validation\r\n        if (u_opts.isSet()) {\r\n            //regexp pattern\r\n            Pattern p = Pattern.compile(\"(([0-9]*[-][0-9]*[:])|(all:))*\", Pattern.CASE_INSENSITIVE);\r\n            if ((p.matcher(u_opts.getValue()).matches())) {\r\n                cu_value = u_opts.getValue();\r\n            } else {\r\n                throw new ParseException(\"ParseConcatCommand: -u value parsing error. The string must be \\\"num1-num2:\\\" or \\\"all:\\\" repeated for each pdf file in input.\");\r\n            }\r\n        }\r\n        //END_PARSE -u\r\n        //PARSE -overwrite\r\n        overwrite_value = ((BooleanParam) command_line_handler.getOption(\"overwrite\")).isTrue();\r\n        //END PARSE -overwrite\r\n        //PARSE -compress\r\n        compressed_value = ((BooleanParam) command_line_handler.getOption(\"compressed\")).isTrue();\r\n        //END PARSE -compress\r\n        //PARSE -copyfields\r\n        copyfields_value = ((BooleanParam) command_line_handler.getOption(\"copyfields\")).isTrue();\r\n        //END PARSE -copyfields\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Parser for the command line input with the \"split\" argument. Input is validated and, if no exception is thrown,\r\n     * is processed. Files extension must be of the right type.\r\n     * @return true if the command is parsed correctly, exception otherwise.\r\n     * @throws Exception\r\n     */\r\n    private boolean ParseSplitCommand() throws Exception {\r\n        //PARSE -o\r\n        FileParam o_opts = (FileParam) command_line_handler.getOption(\"o\");\r\n        //no output option given\r\n        if ((o_opts.isSet())) {\r\n            File out_file;\r\n            out_file = o_opts.getFile();\r\n            //output is given but is not a pdf file\r\n            if (!(out_file.isDirectory())) {\r\n                throw new ParseException(\"ParseSplitCommand: output is not a directory.\");\r\n            } else {\r\n                o_value = out_file;\r\n            }\r\n        } else {\r\n            throw new ParseException(\"OutputNotFound: missing or illegal -o option.\");\r\n        }\r\n        //END_PARSE -o\r\n        //PARSE -log\r\n        FileParam log_opts = (FileParam) command_line_handler.getOption(\"log\");\r\n        if (log_opts.isSet()) {\r\n            log_value = log_opts.getFile();\r\n        }\r\n        //END_PARSE -log\r\n        StringParam p_opts = (StringParam) command_line_handler.getOption(\"p\");\r\n        FileParam f_opts = (FileParam) command_line_handler.getOption(\"f\");\r\n        StringParam s_opts = (StringParam) command_line_handler.getOption(\"s\");\r\n        StringParam n_opts = (StringParam) command_line_handler.getOption(\"n\");\r\n        //PARSE -p\r\n        if (p_opts.isSet()) {\r\n            sp_value = p_opts.getValue();\r\n        } else {\r\n            sp_value = \"\";\r\n        }\r\n        //END_PARSE -p\r\n        //PARSE -f\r\n        File input_file;\r\n        input_file = f_opts.getFile();\r\n        //input is given but is not a pdf file\r\n        if ((input_file.getPath().toLowerCase().endsWith(\".pdf\"))) {\r\n            sf_value = input_file;\r\n        } else {\r\n            throw new ParseException(\"ParseSplitCommand: input file not a pdf format.\");\r\n        }\r\n        //END_PARSE -f\r\n        //PARSE -s\r\n        if ((s_opts.isSet())) {\r\n            ss_value = s_opts.getValue();\r\n        } else {\r\n            throw new ParseException(\"SplitTypeNotFound: not -s option given.\");\r\n        }\r\n        //END_PARSE -s\r\n        //PARSE -n\r\n        if ((ss_value.equals(CmdParser.S_SPLIT)) || (ss_value.equals(CmdParser.S_NSPLIT))) {\r\n            if (n_opts.isSet()) {\r\n                sn_value = n_opts.getValue().trim();\r\n                //if nsplit -n option must be a number\r\n                if (ss_value.equals(CmdParser.S_NSPLIT)) {\r\n                    try {\r\n                        Integer.parseInt(sn_value);\r\n                    } catch (NumberFormatException nfe) {\r\n                        throw new ParseException(\"ParseSplitCommand: -n option not a numeric value.\");\r\n                    }\r\n                }\r\n                //if split i must validate the sequence\r\n                if (ss_value.equals(CmdParser.S_SPLIT)) {\r\n                    /*                Pattern p = Pattern.compile(\"(([0-9]*[-][0-9]*[:])|(all:))*\", Pattern.CASE_INSENSITIVE);\r\n                if (!(p.matcher(u_opts.getValue()).matches())){\r\n                    throw new ParseException(\"ParseConcatCommand: -u value parsing error. The string must be \\\"num1-num2:\\\" or \\\"all:\\\" repeated for each pdf file in input.\");\r\n                }\r\n*/\r\n                    //i can use \",\" or \" \" or \"-\" as separator\r\n                    sn_value = sn_value.replaceAll(\",\", \"-\").replaceAll(\" \", \"-\");\r\n                    Pattern p = Pattern.compile(\"([0-9]+)([-][0-9]+)*\");\r\n                    if (!(p.matcher(sn_value).matches())) {\r\n                        throw new ParseException(\"ParseSplitCommand: -n option must be a number or a sequence number-number-number...\");\r\n                    }\r\n                }\r\n            } else {\r\n                throw new ParseException(\"ParseSplitCommand: unable to find required option -n for the selected split mode.\");\r\n            }\r\n        } else {\r\n            if (n_opts.isSet()) {\r\n                throw new ParseException(\"ParseSplitCommand: unnecessary option -n for the selected split mode.\");\r\n            } else {\r\n                sn_value = \"0\";\r\n            }\r\n        }\r\n        //END_PARSE -n\r\n        //PARSE -compress\r\n        compressed_value = ((BooleanParam) command_line_handler.getOption(\"compressed\")).isTrue();\r\n        //END PARSE -compress\r\n        //PARSE -overwrite\r\n        overwrite_value = ((BooleanParam) command_line_handler.getOption(\"overwrite\")).isTrue();\r\n        //END PARSE -overwrite\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @return Returns the -f option value in concat command.\r\n     */\r\n    public Collection getCFValue() {\r\n        return cf_value;\r\n    }\r\n\r\n    /**\r\n     * @return Returns the -l option value in concat command.\r\n     */\r\n    public File getCLValue() {\r\n        return cl_value;\r\n    }\r\n\r\n    /**\r\n     * @return Returns the -u option value in concat command.\r\n     */\r\n    public String getCUValue() {\r\n        return cu_value;\r\n    }\r\n\r\n    /**\r\n     * @return\tReturns the -copyfields option value in concat command.\r\n     */\r\n    public boolean isCCopyFields() {\r\n        return copyfields_value;\r\n    }\r\n\r\n    /**\r\n     * @return Returns the -overwrite option value in concat command.\r\n     * @deprecated use <code>isOverwrite()</code>.\r\n     */\r\n    public boolean COverwrite() {\r\n        return overwrite_value;\r\n    }\r\n\r\n    /**\r\n     * @return Returns the -o option value. in concat command\r\n     */\r\n    public File getOValue() {\r\n        return o_value;\r\n    }\r\n\r\n    /**\r\n     * @return Returns the -o option value. in concat command\r\n     */\r\n    public File getLogValue() {\r\n        return log_value;\r\n    }\r\n\r\n    /**\r\n     * @return Returns the input_option.\r\n     */\r\n    public byte getInputOption() {\r\n        return input_option;\r\n    }\r\n\r\n    /**\r\n     * @return Returns the input_command.\r\n     */\r\n    public byte getInputCommand() {\r\n        return input_command;\r\n    }\r\n\r\n    /**\r\n     * @return Returns the sf_value.\r\n     */\r\n    public File getSFValue() {\r\n        return sf_value;\r\n    }\r\n\r\n    /**\r\n     * @return Returns the snumber_pages_value.\r\n     */\r\n    public String getSNumberPageValue() {\r\n        return sn_value;\r\n    }\r\n\r\n    /**\r\n     * @return Returns the sp_value.\r\n     */\r\n    public String getSPValue() {\r\n        return sp_value;\r\n    }\r\n\r\n    /**\r\n     * @return Returns the ss_value.\r\n     */\r\n    public String getSSValue() {\r\n        return ss_value;\r\n    }\r\n\r\n    /**\r\n     * @return Returns the -overwrite option value.\r\n     */\r\n    public boolean isOverwrite() {\r\n        return overwrite_value;\r\n    }\r\n\r\n    /**\r\n     * @return Returns the -compress option value.\r\n     */\r\n    public boolean isCompressed() {\r\n        return compressed_value;\r\n    }\r\n\r\n    /**\r\n     * @return Returns the -overwrite option value in concat command.\r\n     * @deprecated use <code>isOverwrite()</code>. This method is no longer working\r\n     */\r\n    public boolean MOverwrite() {\r\n        return false;\r\n    }\r\n}\r\n",
		"id": "EvoSuiteBenchmark/109_pdfsam/src/main/java/it/pdfsam/console/tools/CmdParserTest4.java",
		"test_prompt": "// CmdParserTest4.java\npackage it.pdfsam.console.tools;\n\nimport it.pdfsam.console.MainConsole;\nimport it.pdfsam.console.exception.ParseException;\nimport java.io.File;\nimport java.util.Collection;\nimport java.util.regex.Pattern;\nimport jcmdline.BooleanParam;\nimport jcmdline.CmdLineHandler;\nimport jcmdline.FileParam;\nimport jcmdline.HelpCmdLineHandler;\nimport jcmdline.Parameter;\nimport jcmdline.StringParam;\nimport jcmdline.VersionCmdLineHandler;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link CmdParser}.\n* It contains ten unit test cases for the {@link CmdParser#MOverwrite()} method.\n*/\nclass CmdParserTest4 {"
	},
	{
		"original_code": "// PrefixParser.java\n/*\r\n * Created on 02-April-2007\r\n * Copyright notice: this code is based on Split and Burst classes by Mark Thompson. Copyright (c) 2002 Mark Thompson.\r\n * Copyright (C) 2006 by Andrea Vacondio.\r\n *\r\n * This program is free software; you can redistribute it and/or modify it under the terms of the \r\n * GNU General Public License as published by the Free Software Foundation; \r\n * either version 2 of the License.\r\n * This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; \r\n * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. \r\n * See the GNU General Public License for more details.\r\n * You should have received a copy of the GNU General Public License along with this program; \r\n * if not, write to the Free Software Foundation, Inc., \r\n *  59 Temple Place, Suite 330, Boston, MA 02111-1307 USA\r\n */\r\npackage it.pdfsam.console.tools;\r\n\r\nimport it.pdfsam.console.exception.ConsoleException;\r\nimport java.text.SimpleDateFormat;\r\nimport java.util.Date;\r\n\r\n/**\r\n * Used to parse the prefix and generate the output filename.\r\n * If the prefix doesn't contain \"[CURRENTPAGE]\" or \"[TIMESTAMP]\" it generates oldstyle file name (Ex. 005_prefixFileName.pdf.\r\n * If it contains \"[CURRENTPAGE]\" or \"[TIMESTAMP]\" it performs variable substitution. (Ex. [BASENAME]_prefix_[CURRENTPAGE] generates FileName_prefix_005.pdf)\r\n * Available variables: [CURRENTPAGE], [TIMESTAMP], [BASENAME].\r\n * @author a.vacondio\r\n */\r\npublic class PrefixParser {\r\n\r\n    private final String CURRENT_PAGE = \"[CURRENTPAGE]\";\r\n\r\n    private final String TIMESTAMP = \"[TIMESTAMP]\";\r\n\r\n    //private final String BASE_NAME = \"[BASENAME]\";\r\n    private final String TIMESTAMP_RGX = \"\\\\[TIMESTAMP\\\\]\";\r\n\r\n    private final String CURRENT_PAGE_REGX = \"\\\\[CURRENTPAGE\\\\]\";\r\n\r\n    private final String BASE_NAME_REGX = \"\\\\[BASENAME\\\\]\";\r\n\r\n    private String prefix = \"\";\r\n\r\n    private String fileName = \"\";\r\n\r\n    /**\r\n     * @param prefix prefix to use. (Can be empty)\r\n     * @param fileName Original file name\r\n     * @throws ConsoleException if the original fileName in empty or null\r\n     */\r\n    public PrefixParser(String prefix, String fileName) throws ConsoleException {\r\n        if (prefix != null) {\r\n            this.prefix = prefix;\r\n        }\r\n        if (fileName != null && fileName.length() > 0) {\r\n            //check if the filename contains '.' and it's at least in second position (Ex. a.pdf)\r\n            if (fileName.lastIndexOf('.') > 1) {\r\n                this.fileName = fileName.substring(0, fileName.lastIndexOf('.'));\r\n            } else {\r\n                this.fileName = fileName;\r\n            }\r\n        } else {\r\n            throw new ConsoleException(\"Filename length is 0.\");\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Generates the filename depending on the type of prefix. If it contains \"[CURRENTPAGE]\" or \"[TIMESTAMP]\" it performs variable substitution.\r\n     * @param page_number The page number used in variable substitution or in simple prefix\r\n     * @return filename generated\r\n     */\r\n    public String generateFileName(String page_number) {\r\n        String timestamp = new SimpleDateFormat(\"yyyyMMdd_HHmmssSS\").format(new Date());\r\n        String retVal = \"\";\r\n        if (isComplexPrefix(true)) {\r\n            retVal = prefix;\r\n            retVal = retVal.replaceAll(CURRENT_PAGE_REGX, page_number);\r\n            retVal = retVal.replaceAll(BASE_NAME_REGX, fileName);\r\n            retVal = retVal.replaceAll(TIMESTAMP_RGX, timestamp);\r\n            retVal += \".pdf\";\r\n        } else {\r\n            retVal = page_number + \"_\" + prefix + fileName + \".pdf\";\r\n        }\r\n        return retVal;\r\n    }\r\n\r\n    /**\r\n     * Generates the filename depending on the type of prefix. If it contains \"[TIMESTAMP]\" it performs variable substitution.\r\n     * @return filename generated\r\n     */\r\n    public String generateFileName() {\r\n        String timestamp = new SimpleDateFormat(\"yyyyMMdd_HHmmssSS\").format(new Date());\r\n        String retVal = \"\";\r\n        if (isComplexPrefix(false)) {\r\n            retVal = prefix;\r\n            retVal = retVal.replaceAll(BASE_NAME_REGX, fileName);\r\n            retVal = retVal.replaceAll(TIMESTAMP_RGX, timestamp);\r\n            retVal += \".pdf\";\r\n        } else {\r\n            retVal = prefix + fileName + \".pdf\";\r\n        }\r\n        return retVal;\r\n    }\r\n\r\n    /**\r\n     * @return <code>true</code> if it's a complex prefix\r\n     */\r\n    private boolean isComplexPrefix(boolean havePageNumber) {\r\n        boolean retVal = false;\r\n        if (havePageNumber) {\r\n            //it must contain [CURRENTPAGE] or [TIMESTAMP] to be a copmplex prefix\r\n            retVal = ((this.prefix.indexOf(CURRENT_PAGE) > -1) || (this.prefix.indexOf(TIMESTAMP) > -1)) ? true : false;\r\n        } else {\r\n            //it must contain [TIMESTAMP] to be a copmplex prefix\r\n            retVal = (this.prefix.indexOf(TIMESTAMP) > -1) ? true : false;\r\n        }\r\n        return retVal;\r\n    }\r\n}\r\n",
		"id": "EvoSuiteBenchmark/109_pdfsam/src/main/java/it/pdfsam/console/tools/PrefixParserTest0.java",
		"test_prompt": "// PrefixParserTest0.java\npackage it.pdfsam.console.tools;\n\nimport it.pdfsam.console.exception.ConsoleException;\nimport java.text.SimpleDateFormat;\nimport java.util.Date;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link PrefixParser}.\n* It contains ten unit test cases for the {@link PrefixParser#generateFileName(String)} method.\n*/\nclass PrefixParserTest0 {"
	},
	{
		"original_code": "// PrefixParser.java\n/*\r\n * Created on 02-April-2007\r\n * Copyright notice: this code is based on Split and Burst classes by Mark Thompson. Copyright (c) 2002 Mark Thompson.\r\n * Copyright (C) 2006 by Andrea Vacondio.\r\n *\r\n * This program is free software; you can redistribute it and/or modify it under the terms of the \r\n * GNU General Public License as published by the Free Software Foundation; \r\n * either version 2 of the License.\r\n * This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; \r\n * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. \r\n * See the GNU General Public License for more details.\r\n * You should have received a copy of the GNU General Public License along with this program; \r\n * if not, write to the Free Software Foundation, Inc., \r\n *  59 Temple Place, Suite 330, Boston, MA 02111-1307 USA\r\n */\r\npackage it.pdfsam.console.tools;\r\n\r\nimport it.pdfsam.console.exception.ConsoleException;\r\nimport java.text.SimpleDateFormat;\r\nimport java.util.Date;\r\n\r\n/**\r\n * Used to parse the prefix and generate the output filename.\r\n * If the prefix doesn't contain \"[CURRENTPAGE]\" or \"[TIMESTAMP]\" it generates oldstyle file name (Ex. 005_prefixFileName.pdf.\r\n * If it contains \"[CURRENTPAGE]\" or \"[TIMESTAMP]\" it performs variable substitution. (Ex. [BASENAME]_prefix_[CURRENTPAGE] generates FileName_prefix_005.pdf)\r\n * Available variables: [CURRENTPAGE], [TIMESTAMP], [BASENAME].\r\n * @author a.vacondio\r\n */\r\npublic class PrefixParser {\r\n\r\n    private final String CURRENT_PAGE = \"[CURRENTPAGE]\";\r\n\r\n    private final String TIMESTAMP = \"[TIMESTAMP]\";\r\n\r\n    //private final String BASE_NAME = \"[BASENAME]\";\r\n    private final String TIMESTAMP_RGX = \"\\\\[TIMESTAMP\\\\]\";\r\n\r\n    private final String CURRENT_PAGE_REGX = \"\\\\[CURRENTPAGE\\\\]\";\r\n\r\n    private final String BASE_NAME_REGX = \"\\\\[BASENAME\\\\]\";\r\n\r\n    private String prefix = \"\";\r\n\r\n    private String fileName = \"\";\r\n\r\n    /**\r\n     * @param prefix prefix to use. (Can be empty)\r\n     * @param fileName Original file name\r\n     * @throws ConsoleException if the original fileName in empty or null\r\n     */\r\n    public PrefixParser(String prefix, String fileName) throws ConsoleException {\r\n        if (prefix != null) {\r\n            this.prefix = prefix;\r\n        }\r\n        if (fileName != null && fileName.length() > 0) {\r\n            //check if the filename contains '.' and it's at least in second position (Ex. a.pdf)\r\n            if (fileName.lastIndexOf('.') > 1) {\r\n                this.fileName = fileName.substring(0, fileName.lastIndexOf('.'));\r\n            } else {\r\n                this.fileName = fileName;\r\n            }\r\n        } else {\r\n            throw new ConsoleException(\"Filename length is 0.\");\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Generates the filename depending on the type of prefix. If it contains \"[CURRENTPAGE]\" or \"[TIMESTAMP]\" it performs variable substitution.\r\n     * @param page_number The page number used in variable substitution or in simple prefix\r\n     * @return filename generated\r\n     */\r\n    public String generateFileName(String page_number) {\r\n        String timestamp = new SimpleDateFormat(\"yyyyMMdd_HHmmssSS\").format(new Date());\r\n        String retVal = \"\";\r\n        if (isComplexPrefix(true)) {\r\n            retVal = prefix;\r\n            retVal = retVal.replaceAll(CURRENT_PAGE_REGX, page_number);\r\n            retVal = retVal.replaceAll(BASE_NAME_REGX, fileName);\r\n            retVal = retVal.replaceAll(TIMESTAMP_RGX, timestamp);\r\n            retVal += \".pdf\";\r\n        } else {\r\n            retVal = page_number + \"_\" + prefix + fileName + \".pdf\";\r\n        }\r\n        return retVal;\r\n    }\r\n\r\n    /**\r\n     * Generates the filename depending on the type of prefix. If it contains \"[TIMESTAMP]\" it performs variable substitution.\r\n     * @return filename generated\r\n     */\r\n    public String generateFileName() {\r\n        String timestamp = new SimpleDateFormat(\"yyyyMMdd_HHmmssSS\").format(new Date());\r\n        String retVal = \"\";\r\n        if (isComplexPrefix(false)) {\r\n            retVal = prefix;\r\n            retVal = retVal.replaceAll(BASE_NAME_REGX, fileName);\r\n            retVal = retVal.replaceAll(TIMESTAMP_RGX, timestamp);\r\n            retVal += \".pdf\";\r\n        } else {\r\n            retVal = prefix + fileName + \".pdf\";\r\n        }\r\n        return retVal;\r\n    }\r\n\r\n    /**\r\n     * @return <code>true</code> if it's a complex prefix\r\n     */\r\n    private boolean isComplexPrefix(boolean havePageNumber) {\r\n        boolean retVal = false;\r\n        if (havePageNumber) {\r\n            //it must contain [CURRENTPAGE] or [TIMESTAMP] to be a copmplex prefix\r\n            retVal = ((this.prefix.indexOf(CURRENT_PAGE) > -1) || (this.prefix.indexOf(TIMESTAMP) > -1)) ? true : false;\r\n        } else {\r\n            //it must contain [TIMESTAMP] to be a copmplex prefix\r\n            retVal = (this.prefix.indexOf(TIMESTAMP) > -1) ? true : false;\r\n        }\r\n        return retVal;\r\n    }\r\n}\r\n",
		"id": "EvoSuiteBenchmark/109_pdfsam/src/main/java/it/pdfsam/console/tools/PrefixParserTest1.java",
		"test_prompt": "// PrefixParserTest1.java\npackage it.pdfsam.console.tools;\n\nimport it.pdfsam.console.exception.ConsoleException;\nimport java.text.SimpleDateFormat;\nimport java.util.Date;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link PrefixParser}.\n* It contains ten unit test cases for the {@link PrefixParser#generateFileName()} method.\n*/\nclass PrefixParserTest1 {"
	},
	{
		"original_code": "// StrNumComparator.java\n/*\r\n * Created on 10-Jul-2006\r\n * Copyright (C) 2006 by Andrea Vacondio.\r\n *\r\n * This program is free software; you can redistribute it and/or modify it under the terms of the \r\n * GNU General Public License as published by the Free Software Foundation; \r\n * either version 2 of the License.\r\n * This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; \r\n * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. \r\n * See the GNU General Public License for more details.\r\n * You should have received a copy of the GNU General Public License along with this program; \r\n * if not, write to the Free Software Foundation, Inc., \r\n *  59 Temple Place, Suite 330, Boston, MA 02111-1307 USA\r\n */\r\npackage it.pdfsam.console.tools;\r\n\r\nimport java.io.Serializable;\r\nimport java.util.Comparator;\r\n\r\n/**\r\n * Class used to compare page numbers when \"split after these pages\" option is selected\r\n * @author Andrea Vacondio\r\n * @see it.pdfsam.console.tools.pdf.PdfSplit#doSplit()\r\n */\r\npublic class StrNumComparator implements Comparator, Serializable {\r\n\r\n    private static final long serialVersionUID = 3414191133281918424L;\r\n\r\n    /**\r\n     * Constructor\r\n     */\r\n    public StrNumComparator() {\r\n    }\r\n\r\n    /**\r\n     * Implements Comparator\r\n     */\r\n    public int compare(Object obj1, Object obj2) {\r\n        try {\r\n            return new Integer((String) obj1).compareTo(new Integer((String) obj2));\r\n        } catch (Exception e) {\r\n            return 0;\r\n        }\r\n    }\r\n}\r\n",
		"id": "EvoSuiteBenchmark/109_pdfsam/src/main/java/it/pdfsam/console/tools/StrNumComparatorTest.java",
		"test_prompt": "// StrNumComparatorTest.java\npackage it.pdfsam.console.tools;\n\nimport java.io.Serializable;\nimport java.util.Comparator;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link StrNumComparator}.\n* It contains ten unit test cases for the {@link StrNumComparator#compare(Object, Object)} method.\n*/\nclass StrNumComparatorTest {"
	},
	{
		"original_code": "// HtmlTags.java\n/*\r\n * Created on 27-Feb-2006 \r\n * Copyright (C) 2006 by Andrea Vacondio.\r\n *\r\n * This program is free software; you can redistribute it and/or modify it under the terms of the \r\n * GNU General Public License as published by the Free Software Foundation; \r\n * either version 2 of the License.\r\n * This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; \r\n * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. \r\n * See the GNU General Public License for more details.\r\n * You should have received a copy of the GNU General Public License along with this program; \r\n * if not, write to the Free Software Foundation, Inc., \r\n *  59 Temple Place, Suite 330, Boston, MA 02111-1307 USA\r\n */\r\npackage it.pdfsam.console.tools;\r\n\r\n/**\r\n * @author Andrea Vacondio\r\n * Used to replace '<' and '>' with their html entities\r\n */\r\npublic class HtmlTags {\r\n\r\n    /**\r\n     * Replace every \"<\" and \">\" with its html entity\r\n     * @param input_text\r\n     * @return Plain text with html tags disabled\r\n     */\r\n    public static String disable(String input_text) {\r\n        return input_text.replaceAll(\"<\", \"&lt;\").replaceAll(\">\", \"&gt;\");\r\n    }\r\n}\r\n",
		"id": "EvoSuiteBenchmark/109_pdfsam/src/main/java/it/pdfsam/console/tools/HtmlTagsTest.java",
		"test_prompt": "// HtmlTagsTest.java\npackage it.pdfsam.console.tools;\n\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link HtmlTags}.\n* It contains ten unit test cases for the {@link HtmlTags#disable(String)} method.\n*/\nclass HtmlTagsTest {"
	},
	{
		"original_code": "// LogFormatter.java\n/*\r\n * Created on 27-Jun-2006\r\n * Copyright notice: this code is based on Split and Burst classes by Mark Thompson. Copyright (c) 2002 Mark Thompson.\r\n * Copyright (C) 2006 by Andrea Vacondio.\r\n *\r\n * This program is free software; you can redistribute it and/or modify it under the terms of the \r\n * GNU General Public License as published by the Free Software Foundation; \r\n * either version 2 of the License.\r\n * This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; \r\n * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. \r\n * See the GNU General Public License for more details.\r\n * You should have received a copy of the GNU General Public License along with this program; \r\n * if not, write to the Free Software Foundation, Inc., \r\n *  59 Temple Place, Suite 330, Boston, MA 02111-1307 USA\r\n */\r\npackage it.pdfsam.console.tools;\r\n\r\nimport java.text.DateFormat;\r\nimport java.util.Date;\r\n\r\npublic class LogFormatter {\r\n\r\n    /**\r\n     * Format the input message for the log TextBox\r\n     * @param message\r\n     * @return formatted message\r\n     */\r\n    public static String formatMessage(String message) {\r\n        return \"[\" + DateFormat.getDateTimeInstance(DateFormat.SHORT, DateFormat.MEDIUM).format(new Date()) + \"] \" + message;\r\n    }\r\n}\r\n",
		"id": "EvoSuiteBenchmark/109_pdfsam/src/main/java/it/pdfsam/console/tools/LogFormatterTest.java",
		"test_prompt": "// LogFormatterTest.java\npackage it.pdfsam.console.tools;\n\nimport java.text.DateFormat;\nimport java.util.Date;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link LogFormatter}.\n* It contains ten unit test cases for the {@link LogFormatter#formatMessage(String)} method.\n*/\nclass LogFormatterTest {"
	},
	{
		"original_code": "// TmpFileNameGenerator.java\n/*\r\n * Created on 4-giu-2006\r\n * Copyright (C) 2006 by Andrea Vacondio.\r\n *\r\n * This program is free software; you can redistribute it and/or modify it under the terms of the \r\n * GNU General Public License as published by the Free Software Foundation; \r\n * either version 2 of the License.\r\n * This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; \r\n * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. \r\n * See the GNU General Public License for more details.\r\n * You should have received a copy of the GNU General Public License along with this program; \r\n * if not, write to the Free Software Foundation, Inc., \r\n *  59 Temple Place, Suite 330, Boston, MA 02111-1307 USA\r\n */\r\npackage it.pdfsam.console.tools;\r\n\r\nimport java.io.File;\r\nimport java.util.Random;\r\n\r\n/**\r\n * Class used to create a temporary file.\r\n * @author Andrea Vacondio\r\n * @see it.pdfsam.console.tools.pdf.PdfConcat\r\n */\r\npublic class TmpFileNameGenerator {\r\n\r\n    /**\r\n     * Generates a not existing temporary file\r\n     * @param file_path path where the temporary file is created\r\n     * @return a temporary file\r\n     */\r\n    public static File generateTmpFile(String file_path) {\r\n        File retVal = null;\r\n        boolean already_exist = true;\r\n        int enthropy = 0;\r\n        String file_name = \"\";\r\n        // generates a random 4 char string\r\n        StringBuffer randomString = new StringBuffer();\r\n        Random random = new Random();\r\n        for (int i = 0; i < 5; i++) {\r\n            char ascii = (char) ((random.nextInt(26)) + 'A');\r\n            randomString.append(ascii);\r\n        }\r\n        while (already_exist) {\r\n            file_name = \"PDFsamTMPbuffer\" + randomString + Integer.toString(++enthropy) + \".pdf\";\r\n            File tmp_file = new File(file_path + File.separator + file_name);\r\n            if (!(already_exist = tmp_file.exists())) {\r\n                retVal = tmp_file;\r\n            }\r\n        }\r\n        return retVal;\r\n    }\r\n\r\n    /**\r\n     * @param filename Filename or Dirname\r\n     * @return a random file generated in Dirname or in the containing directory of Filename\r\n     */\r\n    public static File generateTmpFile(File filename) {\r\n        if (filename != null) {\r\n            if (filename.isDirectory()) {\r\n                return generateTmpFile(filename.getPath());\r\n            } else {\r\n                return generateTmpFile(filename.getParent());\r\n            }\r\n        } else {\r\n            return null;\r\n        }\r\n    }\r\n}\r\n",
		"id": "EvoSuiteBenchmark/109_pdfsam/src/main/java/it/pdfsam/console/tools/TmpFileNameGeneratorTest0.java",
		"test_prompt": "// TmpFileNameGeneratorTest0.java\npackage it.pdfsam.console.tools;\n\nimport java.io.File;\nimport java.util.Random;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link TmpFileNameGenerator}.\n* It contains ten unit test cases for the {@link TmpFileNameGenerator#generateTmpFile(String)} method.\n*/\nclass TmpFileNameGeneratorTest0 {"
	},
	{
		"original_code": "// TmpFileNameGenerator.java\n/*\r\n * Created on 4-giu-2006\r\n * Copyright (C) 2006 by Andrea Vacondio.\r\n *\r\n * This program is free software; you can redistribute it and/or modify it under the terms of the \r\n * GNU General Public License as published by the Free Software Foundation; \r\n * either version 2 of the License.\r\n * This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; \r\n * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. \r\n * See the GNU General Public License for more details.\r\n * You should have received a copy of the GNU General Public License along with this program; \r\n * if not, write to the Free Software Foundation, Inc., \r\n *  59 Temple Place, Suite 330, Boston, MA 02111-1307 USA\r\n */\r\npackage it.pdfsam.console.tools;\r\n\r\nimport java.io.File;\r\nimport java.util.Random;\r\n\r\n/**\r\n * Class used to create a temporary file.\r\n * @author Andrea Vacondio\r\n * @see it.pdfsam.console.tools.pdf.PdfConcat\r\n */\r\npublic class TmpFileNameGenerator {\r\n\r\n    /**\r\n     * Generates a not existing temporary file\r\n     * @param file_path path where the temporary file is created\r\n     * @return a temporary file\r\n     */\r\n    public static File generateTmpFile(String file_path) {\r\n        File retVal = null;\r\n        boolean already_exist = true;\r\n        int enthropy = 0;\r\n        String file_name = \"\";\r\n        // generates a random 4 char string\r\n        StringBuffer randomString = new StringBuffer();\r\n        Random random = new Random();\r\n        for (int i = 0; i < 5; i++) {\r\n            char ascii = (char) ((random.nextInt(26)) + 'A');\r\n            randomString.append(ascii);\r\n        }\r\n        while (already_exist) {\r\n            file_name = \"PDFsamTMPbuffer\" + randomString + Integer.toString(++enthropy) + \".pdf\";\r\n            File tmp_file = new File(file_path + File.separator + file_name);\r\n            if (!(already_exist = tmp_file.exists())) {\r\n                retVal = tmp_file;\r\n            }\r\n        }\r\n        return retVal;\r\n    }\r\n\r\n    /**\r\n     * @param filename Filename or Dirname\r\n     * @return a random file generated in Dirname or in the containing directory of Filename\r\n     */\r\n    public static File generateTmpFile(File filename) {\r\n        if (filename != null) {\r\n            if (filename.isDirectory()) {\r\n                return generateTmpFile(filename.getPath());\r\n            } else {\r\n                return generateTmpFile(filename.getParent());\r\n            }\r\n        } else {\r\n            return null;\r\n        }\r\n    }\r\n}\r\n",
		"id": "EvoSuiteBenchmark/109_pdfsam/src/main/java/it/pdfsam/console/tools/TmpFileNameGeneratorTest1.java",
		"test_prompt": "// TmpFileNameGeneratorTest1.java\npackage it.pdfsam.console.tools;\n\nimport java.io.File;\nimport java.util.Random;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link TmpFileNameGenerator}.\n* It contains ten unit test cases for the {@link TmpFileNameGenerator#generateTmpFile(File)} method.\n*/\nclass TmpFileNameGeneratorTest1 {"
	},
	{
		"original_code": "// MainConsole.java\n/*\r\n * Created on 09-Feb-2006\r\n * Copyright (C) 2006 by Andrea Vacondio.\r\n *\r\n * This program is free software; you can redistribute it and/or modify it under the terms of the \r\n * GNU General Public License as published by the Free Software Foundation; \r\n * either version 2 of the License.\r\n * This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; \r\n * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. \r\n * See the GNU General Public License for more details.\r\n * You should have received a copy of the GNU General Public License along with this program; \r\n * if not, write to the Free Software Foundation, Inc., \r\n *  59 Temple Place, Suite 330, Boston, MA 02111-1307 USA\r\n */\r\npackage it.pdfsam.console;\r\n\r\nimport it.pdfsam.console.events.WorkDoneEvent;\r\nimport it.pdfsam.console.interfaces.WorkDoneListener;\r\nimport it.pdfsam.console.tools.CmdParser;\r\nimport it.pdfsam.console.tools.pdf.GenericPdfTool;\r\nimport it.pdfsam.console.tools.pdf.PdfConcat;\r\nimport it.pdfsam.console.tools.pdf.PdfSplit;\r\nimport java.io.BufferedReader;\r\nimport java.io.BufferedWriter;\r\nimport java.io.File;\r\nimport java.io.FileOutputStream;\r\nimport java.io.FileReader;\r\nimport java.io.IOException;\r\nimport java.io.OutputStreamWriter;\r\nimport java.io.Serializable;\r\nimport java.util.ArrayList;\r\nimport java.util.Arrays;\r\nimport java.util.Collection;\r\nimport java.util.List;\r\nimport javax.swing.event.EventListenerList;\r\nimport org.dom4j.Node;\r\nimport org.dom4j.io.SAXReader;\r\nimport com.lowagie.text.Document;\r\n\r\n/**\r\n * Console class.\r\n * It takes input arguments, parse them and execute the right operation on pdf files.\r\n *\r\n * @author Andrea Vacondio\r\n * @see it.pdfsam.console.tools.CmdParser\r\n * @see it.pdfsam.console.tools.pdf.PdfConcat\r\n * @see it.pdfsam.console.tools.pdf.PdfSplit\r\n * @see it.pdfsam.console.exception.ParseException\r\n * @see it.pdfsam.console.exception.SplitException\r\n */\r\npublic class MainConsole implements Serializable {\r\n\r\n    private static final long serialVersionUID = -8692849576712411540L;\r\n\r\n    //list of listeners\r\n    private EventListenerList listeners = new EventListenerList();\r\n\r\n    /**\r\n     * Console version\r\n     */\r\n    public static final String VERSION = \"0.7.3\";\r\n\r\n    public static final String CREATOR = \"pdfsam-console (Ver. \" + MainConsole.VERSION + \")\";\r\n\r\n    public static void main(String[] args) {\r\n        try {\r\n            MainConsole mc = new MainConsole();\r\n            System.out.println(mc.mainAction(args, false));\r\n        } catch (Exception ex) {\r\n            System.out.println(ex.getMessage());\r\n        }\r\n    }\r\n\r\n    /**\r\n     * It takes input parameters, parse them. If no exception is thrown it executes the right function (split, concat..)\r\n     * and return the output message.\r\n     *\r\n     * @param args Arguments String array.\r\n     * @param html_output  If the output message is HTML or plain text.\r\n     * @return Output message.\r\n     * @throws Exception If something goes wrong an exception is thrown.\r\n     */\r\n    public synchronized String mainAction(String[] args, boolean html_output) throws Exception {\r\n        String out_msg = \"\";\r\n        //command parser creation\r\n        CmdParser cmdp = new CmdParser(args);\r\n        //parsing\r\n        cmdp.parse();\r\n        //pdf tool\r\n        GenericPdfTool pdfTool = null;\r\n        //if it's a concat\r\n        if ((cmdp.getInputCommand()) == CmdParser.C_CONCAT) {\r\n            Collection file_list = null;\r\n            //and it a -f option\r\n            if (cmdp.getInputOption() == CmdParser.F_OPT) {\r\n                file_list = cmdp.getCFValue();\r\n            } else if (cmdp.getInputOption() == CmdParser.L_OPT) {\r\n                File l_file = cmdp.getCLValue();\r\n                if (getExtension(l_file).equals(\"XML\".toLowerCase())) {\r\n                    file_list = parseXmlFile(l_file);\r\n                }\r\n                if (getExtension(l_file).equals(\"CSV\".toLowerCase())) {\r\n                    file_list = parseCsvFile(l_file);\r\n                }\r\n            }\r\n            //i found a file list\r\n            if (file_list == null) {\r\n                out_msg = \"Error reading csv or xml file-\";\r\n            } else {\r\n                pdfTool = new PdfConcat(file_list, cmdp.getOValue(), cmdp.getCUValue(), cmdp.isOverwrite(), cmdp.isCCopyFields(), this);\r\n            }\r\n        } else if ((cmdp.getInputCommand()) == CmdParser.C_SPLIT) {\r\n            pdfTool = new PdfSplit(cmdp.getOValue(), cmdp.getSFValue(), cmdp.getSPValue(), cmdp.getSSValue(), cmdp.getSNumberPageValue(), cmdp.isOverwrite(), this);\r\n        }\r\n        //everythig is ok, i created pdfTool\r\n        if (pdfTool != null) {\r\n            pdfTool.execute();\r\n            out_msg = (html_output) ? pdfTool.getOutHTMLMessage() : pdfTool.getOutMessage();\r\n        } else {\r\n            //        \tan error occured creating the pdfTool\r\n            out_msg += \"Unable to create a pdfTool to execute.\";\r\n        }\r\n        //try to write on output file\r\n        try {\r\n            File log_out_file = cmdp.getLogValue();\r\n            if (log_out_file != null) {\r\n                /*writer encoding UTF-8*/\r\n                BufferedWriter writer = new BufferedWriter(new OutputStreamWriter(new FileOutputStream(log_out_file), \"UTF8\"));\r\n                writer.write(out_msg.replaceAll(\"<br>\", \"\\n\"));\r\n                writer.close();\r\n            }\r\n        } catch (Exception e) {\r\n            out_msg += \"Unable to write on log output file: \" + e.getMessage();\r\n        }\r\n        return out_msg;\r\n    }\r\n\r\n    /**\r\n     * Reads the input cvs file and return a Collection of files\r\n     * @param csv_file CSV input file (separator \",\")\r\n     * @return Collection of files absolute path\r\n     */\r\n    private Collection parseCsvFile(File csv_file) {\r\n        String cache_content = \"\";\r\n        try {\r\n            FileReader file_reader = new FileReader(csv_file);\r\n            BufferedReader buffer_reader = new BufferedReader(file_reader);\r\n            String temp = \"\";\r\n            //read file\r\n            while ((temp = buffer_reader.readLine()) != null) {\r\n                cache_content += temp;\r\n            }\r\n            buffer_reader.close();\r\n        } catch (IOException e) {\r\n            return null;\r\n        }\r\n        //gives back the collection\r\n        return Arrays.asList(cache_content.split(\",\"));\r\n    }\r\n\r\n    /**\r\n     * Reads the input xml file and return a Collection of files\r\n     * @param xml_file XML input file\r\n     * @return Collection of files absolute path\r\n     */\r\n    private Collection parseXmlFile(File xml_file) {\r\n        List file_list = new ArrayList();\r\n        try {\r\n            SAXReader reader = new SAXReader();\r\n            org.dom4j.Document document = reader.read(xml_file);\r\n            List pdf_file_list = document.selectNodes(\"/filelist/file\");\r\n            for (int i = 0; pdf_file_list != null && i < pdf_file_list.size(); i++) {\r\n                Node pdf_node = (Node) pdf_file_list.get(i);\r\n                file_list.add(pdf_node.selectSingleNode(\"@value\").getText().trim());\r\n            }\r\n            return file_list;\r\n        } catch (Exception e) {\r\n            return null;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Sets the Meta data \"Creator\" of the document\r\n     * @param doc_to_set The document to set the creator\r\n     */\r\n    public static void setDocumentCreator(Document doc_to_set) {\r\n        doc_to_set.addCreator(MainConsole.CREATOR);\r\n    }\r\n\r\n    /**\r\n     * Adds a listener to the list\r\n     * @param wdl listener to add\r\n     */\r\n    public void addWorkDoneListener(WorkDoneListener wdl) {\r\n        listeners.add(WorkDoneListener.class, wdl);\r\n    }\r\n\r\n    /**\r\n     * Removes a listener to the list\r\n     * @param wdl listener to remove\r\n     */\r\n    public void removeWorkDoneListener(WorkDoneListener wdl) {\r\n        listeners.remove(WorkDoneListener.class, wdl);\r\n    }\r\n\r\n    /**\r\n     * Tells the listeners that the percentage of work done has changed\r\n     * @param wde Event\r\n     */\r\n    public void fireWorkDoneEvent(WorkDoneEvent wde) {\r\n        Object[] listeners_list = listeners.getListenerList();\r\n        // loop through each listener and pass on the event if needed\r\n        for (int i = listeners_list.length - 2; i >= 0; i -= 2) {\r\n            if (listeners_list[i] == WorkDoneListener.class) {\r\n                wde.dispatch((WorkDoneListener) listeners_list[i + 1]);\r\n                //  ((WorkDoneListener)listeners_list[i]).percentageOfWorkDoneChanged(wde);\r\n            }\r\n        }\r\n    }\r\n\r\n    private String getExtension(File f) {\r\n        String ext = null;\r\n        String s = f.getName();\r\n        int i = s.lastIndexOf('.');\r\n        if (i > 0 && i < s.length() - 1) {\r\n            ext = s.substring(i + 1).toLowerCase();\r\n        }\r\n        return ext;\r\n    }\r\n}\r\n",
		"id": "EvoSuiteBenchmark/109_pdfsam/src/main/java/it/pdfsam/console/MainConsoleTest.java",
		"test_prompt": "// MainConsoleTest.java\npackage it.pdfsam.console;\n\nimport it.pdfsam.console.events.WorkDoneEvent;\nimport it.pdfsam.console.interfaces.WorkDoneListener;\nimport it.pdfsam.console.tools.CmdParser;\nimport it.pdfsam.console.tools.pdf.GenericPdfTool;\nimport it.pdfsam.console.tools.pdf.PdfConcat;\nimport it.pdfsam.console.tools.pdf.PdfSplit;\nimport java.io.BufferedReader;\nimport java.io.BufferedWriter;\nimport java.io.File;\nimport java.io.FileOutputStream;\nimport java.io.FileReader;\nimport java.io.IOException;\nimport java.io.OutputStreamWriter;\nimport java.io.Serializable;\nimport java.util.ArrayList;\nimport java.util.Arrays;\nimport java.util.Collection;\nimport java.util.List;\nimport javax.swing.event.EventListenerList;\nimport org.dom4j.Node;\nimport org.dom4j.io.SAXReader;\nimport com.lowagie.text.Document;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link MainConsole}.\n* It contains ten unit test cases for the {@link MainConsole#mainAction(String[], boolean)} method.\n*/\nclass MainConsoleTest {"
	},
	{
		"original_code": "// PdfFile.java\n/*\r\n * PdfFile.java\r\n *\r\n * Classes:\r\n *   public   PdfFile\r\n *   \r\n * ***** BEGIN LICENSE BLOCK *****\r\n * Version: MPL 1.1\r\n *\r\n * The contents of this file are subject to the Mozilla Public License Version\r\n * 1.1 (the \"License\"); you may not use this file except in compliance with\r\n * the License. You may obtain a copy of the License at\r\n * http://www.mozilla.org/MPL/\r\n *\r\n * Software distributed under the License is distributed on an \"AS IS\" basis,\r\n * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License\r\n * for the specific language governing rights and limitations under the\r\n * License.\r\n *\r\n * The Original Code is the Java jcmdline (command line management) package.\r\n *\r\n * The Initial Developer of the Original Code is Lynne Lawrence.\r\n * \r\n * Portions created by the Initial Developer are Copyright (C) 2002\r\n * the Initial Developer. All Rights Reserved.\r\n *\r\n * Contributor(s):  Andrea Vacondio <andrea.vacondio@gmail.com>\r\n *\r\n * ***** END LICENSE BLOCK *****\r\n */\r\npackage jcmdline.dto;\r\n\r\nimport java.io.File;\r\nimport java.io.Serializable;\r\n\r\npublic class PdfFile implements Serializable {\r\n\r\n    private static final long serialVersionUID = 7010970222698392953L;\r\n\r\n    private File file;\r\n\r\n    private String password;\r\n\r\n    public PdfFile() {\r\n    }\r\n\r\n    /**\r\n     * @param file\r\n     * @param password\r\n     */\r\n    public PdfFile(File file, String password) {\r\n        this.file = file;\r\n        this.password = password;\r\n    }\r\n\r\n    /**\r\n     * @param filePath\r\n     * @param password\r\n     */\r\n    public PdfFile(String filePath, String password) {\r\n        this.file = new File(filePath);\r\n        this.password = password;\r\n    }\r\n\r\n    /**\r\n     * @return the file\r\n     */\r\n    public File getFile() {\r\n        return file;\r\n    }\r\n\r\n    /**\r\n     * @param file the file to set\r\n     */\r\n    public void setFile(File file) {\r\n        this.file = file;\r\n    }\r\n\r\n    /**\r\n     * @return the password\r\n     */\r\n    public String getPassword() {\r\n        return password;\r\n    }\r\n\r\n    /**\r\n     * @return the password in bytes or null\r\n     */\r\n    public byte[] getPasswordBytes() {\r\n        return (password != null) ? password.getBytes() : null;\r\n    }\r\n\r\n    /**\r\n     * @param password the password to set\r\n     */\r\n    public void setPassword(String password) {\r\n        this.password = password;\r\n    }\r\n\r\n    /* (non-Javadoc)\r\n\t * @see java.lang.Object#hashCode()\r\n\t */\r\n    public int hashCode() {\r\n        final int prime = 31;\r\n        int result = 1;\r\n        result = prime * result + ((file == null) ? 0 : file.hashCode());\r\n        result = prime * result + ((password == null) ? 0 : password.hashCode());\r\n        return result;\r\n    }\r\n\r\n    /* (non-Javadoc)\r\n\t * @see java.lang.Object#equals(java.lang.Object)\r\n\t */\r\n    public boolean equals(Object obj) {\r\n        if (this == obj)\r\n            return true;\r\n        if (obj == null)\r\n            return false;\r\n        if (getClass() != obj.getClass())\r\n            return false;\r\n        final PdfFile other = (PdfFile) obj;\r\n        if (file == null) {\r\n            if (other.file != null)\r\n                return false;\r\n        } else if (!file.equals(other.file))\r\n            return false;\r\n        if (password == null) {\r\n            if (other.password != null)\r\n                return false;\r\n        } else if (!password.equals(other.password))\r\n            return false;\r\n        return true;\r\n    }\r\n\r\n    public String toString() {\r\n        StringBuffer retVal = new StringBuffer();\r\n        retVal.append(super.toString());\r\n        retVal.append((file == null) ? \"\" : \"[file=\" + file.getAbsolutePath() + \"]\");\r\n        retVal.append(\"[password=\" + password + \"]\");\r\n        return retVal.toString();\r\n    }\r\n}\r\n",
		"id": "EvoSuiteBenchmark/109_pdfsam/src/main/java/jcmdline/dto/PdfFileTest0.java",
		"test_prompt": "// PdfFileTest0.java\npackage jcmdline.dto;\n\nimport java.io.File;\nimport java.io.Serializable;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link PdfFile}.\n* It contains ten unit test cases for the {@link PdfFile#hashCode()} method.\n*/\nclass PdfFileTest0 {"
	},
	{
		"original_code": "// PdfFile.java\n/*\r\n * PdfFile.java\r\n *\r\n * Classes:\r\n *   public   PdfFile\r\n *   \r\n * ***** BEGIN LICENSE BLOCK *****\r\n * Version: MPL 1.1\r\n *\r\n * The contents of this file are subject to the Mozilla Public License Version\r\n * 1.1 (the \"License\"); you may not use this file except in compliance with\r\n * the License. You may obtain a copy of the License at\r\n * http://www.mozilla.org/MPL/\r\n *\r\n * Software distributed under the License is distributed on an \"AS IS\" basis,\r\n * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License\r\n * for the specific language governing rights and limitations under the\r\n * License.\r\n *\r\n * The Original Code is the Java jcmdline (command line management) package.\r\n *\r\n * The Initial Developer of the Original Code is Lynne Lawrence.\r\n * \r\n * Portions created by the Initial Developer are Copyright (C) 2002\r\n * the Initial Developer. All Rights Reserved.\r\n *\r\n * Contributor(s):  Andrea Vacondio <andrea.vacondio@gmail.com>\r\n *\r\n * ***** END LICENSE BLOCK *****\r\n */\r\npackage jcmdline.dto;\r\n\r\nimport java.io.File;\r\nimport java.io.Serializable;\r\n\r\npublic class PdfFile implements Serializable {\r\n\r\n    private static final long serialVersionUID = 7010970222698392953L;\r\n\r\n    private File file;\r\n\r\n    private String password;\r\n\r\n    public PdfFile() {\r\n    }\r\n\r\n    /**\r\n     * @param file\r\n     * @param password\r\n     */\r\n    public PdfFile(File file, String password) {\r\n        this.file = file;\r\n        this.password = password;\r\n    }\r\n\r\n    /**\r\n     * @param filePath\r\n     * @param password\r\n     */\r\n    public PdfFile(String filePath, String password) {\r\n        this.file = new File(filePath);\r\n        this.password = password;\r\n    }\r\n\r\n    /**\r\n     * @return the file\r\n     */\r\n    public File getFile() {\r\n        return file;\r\n    }\r\n\r\n    /**\r\n     * @param file the file to set\r\n     */\r\n    public void setFile(File file) {\r\n        this.file = file;\r\n    }\r\n\r\n    /**\r\n     * @return the password\r\n     */\r\n    public String getPassword() {\r\n        return password;\r\n    }\r\n\r\n    /**\r\n     * @return the password in bytes or null\r\n     */\r\n    public byte[] getPasswordBytes() {\r\n        return (password != null) ? password.getBytes() : null;\r\n    }\r\n\r\n    /**\r\n     * @param password the password to set\r\n     */\r\n    public void setPassword(String password) {\r\n        this.password = password;\r\n    }\r\n\r\n    /* (non-Javadoc)\r\n\t * @see java.lang.Object#hashCode()\r\n\t */\r\n    public int hashCode() {\r\n        final int prime = 31;\r\n        int result = 1;\r\n        result = prime * result + ((file == null) ? 0 : file.hashCode());\r\n        result = prime * result + ((password == null) ? 0 : password.hashCode());\r\n        return result;\r\n    }\r\n\r\n    /* (non-Javadoc)\r\n\t * @see java.lang.Object#equals(java.lang.Object)\r\n\t */\r\n    public boolean equals(Object obj) {\r\n        if (this == obj)\r\n            return true;\r\n        if (obj == null)\r\n            return false;\r\n        if (getClass() != obj.getClass())\r\n            return false;\r\n        final PdfFile other = (PdfFile) obj;\r\n        if (file == null) {\r\n            if (other.file != null)\r\n                return false;\r\n        } else if (!file.equals(other.file))\r\n            return false;\r\n        if (password == null) {\r\n            if (other.password != null)\r\n                return false;\r\n        } else if (!password.equals(other.password))\r\n            return false;\r\n        return true;\r\n    }\r\n\r\n    public String toString() {\r\n        StringBuffer retVal = new StringBuffer();\r\n        retVal.append(super.toString());\r\n        retVal.append((file == null) ? \"\" : \"[file=\" + file.getAbsolutePath() + \"]\");\r\n        retVal.append(\"[password=\" + password + \"]\");\r\n        return retVal.toString();\r\n    }\r\n}\r\n",
		"id": "EvoSuiteBenchmark/109_pdfsam/src/main/java/jcmdline/dto/PdfFileTest1.java",
		"test_prompt": "// PdfFileTest1.java\npackage jcmdline.dto;\n\nimport java.io.File;\nimport java.io.Serializable;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link PdfFile}.\n* It contains ten unit test cases for the {@link PdfFile#equals(Object)} method.\n*/\nclass PdfFileTest1 {"
	},
	{
		"original_code": "// LongParam.java\n/*\r\n * LongParam.java\r\n *\r\n * Classes:\r\n *   public   LongParam\r\n *   \r\n * ***** BEGIN LICENSE BLOCK *****\r\n * Version: MPL 1.1\r\n *\r\n * The contents of this file are subject to the Mozilla Public License Version\r\n * 1.1 (the \"License\"); you may not use this file except in compliance with\r\n * the License. You may obtain a copy of the License at\r\n * http://www.mozilla.org/MPL/\r\n *\r\n * Software distributed under the License is distributed on an \"AS IS\" basis,\r\n * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License\r\n * for the specific language governing rights and limitations under the\r\n * License.\r\n *\r\n * The Original Code is the Java jcmdline (command line management) package.\r\n *\r\n * The Initial Developer of the Original Code is Lynne Lawrence.\r\n * \r\n * Portions created by the Initial Developer are Copyright (C) 2002\r\n * the Initial Developer. All Rights Reserved.\r\n *\r\n * Contributor(s):  Andrea Vacondio\r\n *\r\n * ***** END LICENSE BLOCK *****\r\n */\r\npackage jcmdline;\r\n\r\n/**\r\n * Encapsulate a command line parameter whose value will be a signed\r\n * long in the same range as a java long.\r\n * @author a.vacondio\r\n */\r\npublic class LongParam extends AbstractParameter {\r\n\r\n    /**\r\n     * the default label that will represent option values for this Parameter\r\n     * when displaying usage.  The following demonstrates a possible usage\r\n     * excerpt for a LongParam option, where the option label is '&lt;n&gt;':\r\n     * <pre>\r\n     *    count &lt;n&gt;  Specifies the maximum number of files to be\r\n     *               produced by this program.\r\n     * </pre>\r\n     * @see AbstractParameter#setOptionLabel(String) setOptionLabel()\r\n     * @see \"<i>LongParam.defaultOptionLabel</i> in 'strings' properties file\"\r\n     */\r\n    public static final String DEFAULT_OPTION_LABEL = Strings.get(\"LongParam.defaultOptionLabel\");\r\n\r\n    /**\r\n     * the maximum acceptable number - defaults to Long.MAX_VALUE\r\n     */\r\n    protected long max = Long.MAX_VALUE;\r\n\r\n    /**\r\n     * the minimum acceptable number - defaults to Long.MIN_VALUE\r\n     */\r\n    protected long min = Long.MIN_VALUE;\r\n\r\n    /**\r\n     * constructor - creates single-valued, optional, public\r\n     * parameter which will\r\n     * accept an long between Long.MIN_VALUE and Long.MAX_VALUE.\r\n     *\r\n     * @param tag           a unique identifier for this parameter\r\n     * @param desc          a description of the parameter, suitable for display\r\n     *                      in a usage statement\r\n     * @throws              IllegalArgumentException if <code>tag</code>\r\n     *                      or <desc> are invalid.\r\n     * @see                 AbstractParameter#setTag(String) setTag()\r\n     * @see                 AbstractParameter#setDesc(String) setDesc()\r\n     */\r\n    public LongParam(String tag, String desc) {\r\n        this(tag, desc, Long.MIN_VALUE, Long.MAX_VALUE, OPTIONAL, SINGLE_VALUED, PUBLIC);\r\n    }\r\n\r\n    /**\r\n     * constructor - creates single-valued, public parameter which will\r\n     * accept an long between Long.MIN_VALUE and Long.MAX_VALUE, and\r\n     * will be either optional or required, as specified.\r\n     *\r\n     * @param tag           a unique identifier for this parameter\r\n     * @param desc          a description of the parameter, suitable for display\r\n     *                      in a usage statement\r\n     * @param optional      {@link Parameter#OPTIONAL OPTIONAL} if\r\n     *                      optional,\r\n     *                      {@link Parameter#REQUIRED REQUIRED} if required\r\n     * @throws              IllegalArgumentException if any of the specified\r\n     *                      parameters are invalid.\r\n     * @see                 AbstractParameter#setTag(String) setTag()\r\n     * @see                 AbstractParameter#setDesc(String) setDesc()\r\n     */\r\n    public LongParam(String tag, String desc, boolean optional) {\r\n        this(tag, desc, Long.MIN_VALUE, Long.MAX_VALUE, optional, SINGLE_VALUED, PUBLIC);\r\n    }\r\n\r\n    /**\r\n     * constructor - creates a public parameter which will\r\n     * accept an long between Long.MIN_VALUE and Long.MAX_VALUE, and\r\n     * will be either optional or required, and/or multi-valued, as specified.\r\n     *\r\n     * @param tag           a unique identifier for this parameter\r\n     * @param desc          a description of the parameter, suitable for display\r\n     *                      in a usage statement\r\n     * @param optional      {@link Parameter#OPTIONAL OPTIONAL} if\r\n     *                      optional,\r\n     *                      {@link Parameter#REQUIRED REQUIRED} if required\r\n     * @param multiValued   {@link Parameter#MULTI_VALUED MULTI_VALUED} if\r\n     *                      the parameter can accept multiple values,\r\n     *                      {@link Parameter#SINGLE_VALUED SINGLE_VALUED}\r\n     *                      if the parameter can contain only a single value\r\n     * @throws              IllegalArgumentException if any of the specified\r\n     *                      parameters are invalid.\r\n     * @see                 AbstractParameter#setTag(String) setTag()\r\n     * @see                 AbstractParameter#setDesc(String) setDesc()\r\n     * @see                 Parameter#SINGLE_VALUED SINGLE_VALUED\r\n     * @see                 Parameter#MULTI_VALUED MULTI_VALUED\r\n     */\r\n    public LongParam(String tag, String desc, boolean optional, boolean multiValued) {\r\n        this(tag, desc, Long.MIN_VALUE, Long.MAX_VALUE, optional, multiValued, PUBLIC);\r\n    }\r\n\r\n    /**\r\n     * constructor - creates a parameter which will\r\n     * accept an long between Long.MIN_VALUE and Long.MAX_VALUE, and\r\n     * will be either optional or required, and/or multi-valued, as specified.\r\n     *\r\n     * @param tag           a unique identifier for this parameter\r\n     * @param desc          a description of the parameter, suitable for display\r\n     *                      in a usage statement\r\n     * @param optional      {@link Parameter#OPTIONAL OPTIONAL} if\r\n     *                      optional,\r\n     *                      {@link Parameter#REQUIRED REQUIRED} if required\r\n     * @param multiValued   {@link Parameter#MULTI_VALUED MULTI_VALUED} if\r\n     *                      the parameter can accept multiple values,\r\n     *                      {@link Parameter#SINGLE_VALUED SINGLE_VALUED}\r\n     *                      if the parameter can contain only a single value\r\n     * @param hidden        {@link Parameter#HIDDEN HIDDEN} if parameter is\r\n     *                      not to be listed in the usage,\r\n     *                      {@link Parameter#PUBLIC PUBLIC} otherwise.\r\n     * @throws              IllegalArgumentException if any of the specified\r\n     *                      parameters are invalid.\r\n     * @see                 AbstractParameter#setTag(String) setTag()\r\n     * @see                 AbstractParameter#setDesc(String) setDesc()\r\n     * @see                 Parameter#SINGLE_VALUED SINGLE_VALUED\r\n     * @see                 Parameter#MULTI_VALUED MULTI_VALUED\r\n     * @see                 Parameter#HIDDEN HIDDEN\r\n     * @see                 Parameter#PUBLIC PUBLIC\r\n     */\r\n    public LongParam(String tag, String desc, boolean optional, boolean multiValued, boolean hidden) {\r\n        this(tag, desc, Long.MIN_VALUE, Long.MAX_VALUE, optional, multiValued, hidden);\r\n    }\r\n\r\n    /**\r\n     * constructor - creates a single-valued, optional, public, parameter\r\n     * that will accept an long between the specifed minimum and maximum\r\n     * values.\r\n     *\r\n     * @param tag           a unique identifier for this parameter\r\n     * @param desc          a description of the parameter, suitable for display\r\n     *                      in a usage statement\r\n     * @param min           the minimum acceptable value\r\n     * @param max           the maximum acceptable value\r\n     * @throws              IllegalArgumentException if any parameter is\r\n     *                      invalid.\r\n     * @see                 AbstractParameter#setTag(String) setTag()\r\n     * @see                 AbstractParameter#setDesc(String) setDesc()\r\n     * @see                 #setMin(int) setMin()\r\n     * @see                 #setMax(int) setMax()\r\n     */\r\n    public LongParam(String tag, String desc, long min, long max) {\r\n        this(tag, desc, min, max, OPTIONAL, SINGLE_VALUED, PUBLIC);\r\n    }\r\n\r\n    /**\r\n     * constructor - creates a single-valued, public parameter\r\n     * that will accept an long between the specifed minimum and maximum\r\n     * values, and which is required or optional, as specified.\r\n     *\r\n     * @param tag           a unique identifier for this parameter\r\n     * @param desc          a description of the parameter, suitable for display\r\n     *                      in a usage statement\r\n     * @param min           the minimum acceptable value\r\n     * @param max           the maximum acceptable value\r\n     * @param optional      {@link Parameter#OPTIONAL OPTIONAL} if\r\n     *                      optional,\r\n     *                      {@link Parameter#REQUIRED REQUIRED} if required\r\n     * @throws              IllegalArgumentException if any parameter is\r\n     *                      invalid.\r\n     * @see                 AbstractParameter#setTag(String) setTag()\r\n     * @see                 AbstractParameter#setDesc(String) setDesc()\r\n     * @see                 #setMin(int) setMin()\r\n     * @see                 #setMax(int) setMax()\r\n     * @see                 Parameter#OPTIONAL OPTIONAL\r\n     * @see                 Parameter#REQUIRED REQUIRED\r\n     */\r\n    public LongParam(String tag, String desc, long min, long max, boolean optional) {\r\n        this(tag, desc, min, max, optional, SINGLE_VALUED, PUBLIC);\r\n    }\r\n\r\n    /**\r\n     * constructor - creates a public parameter\r\n     * that will accept an long between the specifed minimum and maximum\r\n     * values, and which is required or optional and/or multi-valued,\r\n     * as specified.\r\n     *\r\n     * @param tag           a unique identifier for this parameter\r\n     * @param desc          a description of the parameter, suitable for display\r\n     *                      in a usage statement\r\n     * @param min           the minimum acceptable value\r\n     * @param max           the maximum acceptable value\r\n     * @param optional      {@link Parameter#OPTIONAL OPTIONAL} if\r\n     *                      optional,\r\n     *                      {@link Parameter#REQUIRED REQUIRED} if required\r\n     * @param multiValued   {@link Parameter#MULTI_VALUED MULTI_VALUED} if\r\n     *                      the parameter can accept multiple values,\r\n     *                      {@link Parameter#SINGLE_VALUED SINGLE_VALUED}\r\n     *                      if the parameter can contain only a single value\r\n     * @throws              IllegalArgumentException if any parameter is\r\n     *                      invalid.\r\n     * @see                 AbstractParameter#setTag(String) setTag()\r\n     * @see                 AbstractParameter#setDesc(String) setDesc()\r\n     * @see                 #setMin(int) setMin()\r\n     * @see                 #setMax(int) setMax()\r\n     * @see                 Parameter#OPTIONAL OPTIONAL\r\n     * @see                 Parameter#REQUIRED REQUIRED\r\n     * @see                 Parameter#SINGLE_VALUED SINGLE_VALUED\r\n     * @see                 Parameter#MULTI_VALUED MULTI_VALUED\r\n     */\r\n    public LongParam(String tag, String desc, long min, long max, boolean optional, boolean multiValued) {\r\n        this(tag, desc, min, max, optional, multiValued, PUBLIC);\r\n    }\r\n\r\n    /**\r\n     * constructor - creates a parameter\r\n     * that will accept an long between the specifed minimum and maximum\r\n     * values, and for which all other options are specified.\r\n     *\r\n     * @param tag           a unique identifier for this parameter\r\n     * @param desc          a description of the parameter, suitable for display\r\n     *                      in a usage statement\r\n     * @param min           the minimum acceptable value\r\n     * @param max           the maximum acceptable value\r\n     * @param optional      {@link Parameter#OPTIONAL OPTIONAL} if\r\n     *                      optional,\r\n     *                      {@link Parameter#REQUIRED REQUIRED} if required\r\n     * @param multiValued   {@link Parameter#MULTI_VALUED MULTI_VALUED} if\r\n     *                      the parameter can accept multiple values,\r\n     *                      {@link Parameter#SINGLE_VALUED SINGLE_VALUED}\r\n     *                      if the parameter can contain only a single value\r\n     * @param hidden        {@link Parameter#HIDDEN HIDDEN} if parameter is\r\n     *                      not to be listed in the usage,\r\n     *                      {@link Parameter#PUBLIC PUBLIC} otherwise.\r\n     * @throws              IllegalArgumentException if any parameter is\r\n     *                      invalid.\r\n     * @see                 AbstractParameter#setTag(String) setTag()\r\n     * @see                 AbstractParameter#setDesc(String) setDesc()\r\n     * @see                 #setMin(int) setMin()\r\n     * @see                 #setMax(int) setMax()\r\n     * @see                 Parameter#OPTIONAL OPTIONAL\r\n     * @see                 Parameter#REQUIRED REQUIRED\r\n     * @see                 Parameter#SINGLE_VALUED SINGLE_VALUED\r\n     * @see                 Parameter#MULTI_VALUED MULTI_VALUED\r\n     * @see                 Parameter#HIDDEN HIDDEN\r\n     * @see                 Parameter#PUBLIC PUBLIC\r\n     */\r\n    public LongParam(String tag, String desc, long min, long max, boolean optional, boolean multiValued, boolean hidden) {\r\n        this.setTag(tag);\r\n        this.setMin(min);\r\n        this.setMax(max);\r\n        this.setDesc(desc);\r\n        this.setOptional(optional);\r\n        this.setMultiValued(multiValued);\r\n        this.setHidden(hidden);\r\n        this.setOptionLabel(DEFAULT_OPTION_LABEL);\r\n    }\r\n\r\n    /**\r\n     * constructor - creates a single-valued, optional, public,\r\n     * number parameter whose value must be one of the specified values.\r\n     *\r\n     * @param tag           the tag associated with this parameter\r\n     * @param desc          a description of the parameter, suitable for display\r\n     *                      in a usage statement\r\n     * @param acceptableValues  the acceptable values for the parameter\r\n     * @throws              IllegalArgumentException if any parameter is\r\n     *                      invalid.\r\n     * @see                 AbstractParameter#setTag(String) setTag()\r\n     * @see                 AbstractParameter#setDesc(String) setDesc()\r\n     * @see                 #setAcceptablesLongValues(int[]) setAcceptableIntValues()\r\n     */\r\n    public LongParam(String tag, String desc, long[] acceptableValues) {\r\n        this(tag, desc, acceptableValues, OPTIONAL, SINGLE_VALUED, PUBLIC);\r\n    }\r\n\r\n    /**\r\n     * constructor - creates a single-valued, public,\r\n     * number parameter whose value must be one of the specified values,\r\n     * and which is required or optional, as specified.\r\n     *\r\n     * @param tag           the tag associated with this parameter\r\n     * @param desc          a description of the parameter, suitable for display\r\n     *                      in a usage statement\r\n     * @param acceptableValues  the acceptable values for the parameter\r\n     * @param optional      {@link Parameter#OPTIONAL OPTIONAL} if\r\n     *                      optional,\r\n     *                      {@link Parameter#REQUIRED REQUIRED} if required\r\n     * @throws              IllegalArgumentException if any parameter is\r\n     *                      invalid.\r\n     * @see                 AbstractParameter#setTag(String) setTag()\r\n     * @see                 AbstractParameter#setDesc(String) setDesc()\r\n     * @see                 #setAcceptablesLongValues(int[]) setAcceptableIntValues()\r\n     * @see                 Parameter#OPTIONAL OPTIONAL\r\n     * @see                 Parameter#REQUIRED REQUIRED\r\n     */\r\n    public LongParam(String tag, String desc, long[] acceptableValues, boolean optional) {\r\n        this(tag, desc, acceptableValues, optional, SINGLE_VALUED, PUBLIC);\r\n    }\r\n\r\n    /**\r\n     * constructor - creates a public\r\n     * number parameter whose value must be one of the specified values,\r\n     * and which is required or optional and/or multi-valued, as specified.\r\n     *\r\n     * @param tag           the tag associated with this parameter\r\n     * @param desc          a description of the parameter, suitable for display\r\n     *                      in a usage statement\r\n     * @param acceptableValues  the acceptable values for the parameter\r\n     * @param optional      {@link Parameter#OPTIONAL OPTIONAL} if\r\n     *                      optional,\r\n     *                      {@link Parameter#REQUIRED REQUIRED} if required\r\n     * @param multiValued   {@link Parameter#MULTI_VALUED MULTI_VALUED} if\r\n     *                      the parameter can accept multiple values,\r\n     *                      {@link Parameter#SINGLE_VALUED SINGLE_VALUED}\r\n     *                      if the parameter can contain only a single value\r\n     * @throws              IllegalArgumentException if any parameter is\r\n     *                      invalid.\r\n     * @see                 AbstractParameter#setTag(String) setTag()\r\n     * @see                 AbstractParameter#setDesc(String) setDesc()\r\n     * @see                 #setAcceptablesLongValues(int[]) setAcceptableIntValues()\r\n     * @see                 Parameter#OPTIONAL OPTIONAL\r\n     * @see                 Parameter#REQUIRED REQUIRED\r\n     * @see                 Parameter#SINGLE_VALUED SINGLE_VALUED\r\n     * @see                 Parameter#MULTI_VALUED MULTI_VALUED\r\n     */\r\n    public LongParam(String tag, String desc, long[] acceptableValues, boolean optional, boolean multiValued) {\r\n        this(tag, desc, acceptableValues, optional, multiValued, PUBLIC);\r\n    }\r\n\r\n    /**\r\n     * constructor - creates a\r\n     * number parameter whose value must be one of the specified values,\r\n     * and all of whose other options are specified.\r\n     *\r\n     * @param tag           the tag associated with this parameter\r\n     * @param desc          a description of the parameter, suitable for display\r\n     *                      in a usage statement\r\n     * @param acceptableValues  the acceptable values for the parameter\r\n     * @param optional      {@link Parameter#OPTIONAL OPTIONAL} if\r\n     *                      optional,\r\n     *                      {@link Parameter#REQUIRED REQUIRED} if required\r\n     * @param multiValued   {@link Parameter#MULTI_VALUED MULTI_VALUED} if\r\n     *                      the parameter can accept multiple values,\r\n     *                      {@link Parameter#SINGLE_VALUED SINGLE_VALUED}\r\n     *                      if the parameter can contain only a single value\r\n     * @param hidden        {@link Parameter#HIDDEN HIDDEN} if parameter is\r\n     *                      not to be listed in the usage,\r\n     *                      {@link Parameter#PUBLIC PUBLIC} otherwise.\r\n     * @throws              IllegalArgumentException if any parameter is\r\n     *                      invalid.\r\n     * @see                 AbstractParameter#setTag(String) setTag()\r\n     * @see                 AbstractParameter#setDesc(String) setDesc()\r\n     * @see                 #setAcceptablesLongValues(int[]) setAcceptableIntValues()\r\n     * @see                 Parameter#OPTIONAL OPTIONAL\r\n     * @see                 Parameter#REQUIRED REQUIRED\r\n     * @see                 Parameter#SINGLE_VALUED SINGLE_VALUED\r\n     * @see                 Parameter#MULTI_VALUED MULTI_VALUED\r\n     * @see                 Parameter#HIDDEN HIDDEN\r\n     * @see                 Parameter#PUBLIC PUBLIC\r\n     */\r\n    public LongParam(String tag, String desc, long[] acceptableValues, boolean optional, boolean multiValued, boolean hidden) {\r\n        this.setTag(tag);\r\n        this.setAcceptablesLongValues(acceptableValues);\r\n        this.setDesc(desc);\r\n        this.setOptional(optional);\r\n        this.setMultiValued(multiValued);\r\n        this.setHidden(hidden);\r\n        this.setOptionLabel(DEFAULT_OPTION_LABEL);\r\n    }\r\n\r\n    /**\r\n     * Sets the minimum acceptable value for the parameter's value.\r\n     * <P>\r\n     * If both <code>acceptableValues</code> and/or a minimum or maximum\r\n     * limit for the parameter value are specified, a valid value must\r\n     * satisfy <b>all</b> of the constraints.\r\n     *\r\n     * @param min       the minimum acceptable value\r\n     * @throws          IllegalArgumentException if <code>min</code> is\r\n     *                  greater than <code>max</code>\r\n     */\r\n    public void setMin(long min) {\r\n        if (min > max) {\r\n            throw new IllegalArgumentException(Strings.get(\"LongParam.maxLessThanMin\", new Object[] { tag }));\r\n        }\r\n        this.min = min;\r\n    }\r\n\r\n    /**\r\n     * Gets the value of the LongParam as in int.  If the LongParam is\r\n     * multi-valued, only the first value is returned.\r\n     *\r\n     * @return              the value as an int\r\n     * @throws              RuntimeException if the value of the LongParam\r\n     *                      has not been set.\r\n     * @see Parameter#isSet()\r\n     */\r\n    public long longValue() {\r\n        if (!set) {\r\n            throw new RuntimeException(Strings.get(\"LongParam.valueNotSet\", new Object[] { tag }));\r\n        }\r\n        return Long.parseLong((String) values.get(0));\r\n    }\r\n\r\n    /**\r\n     * Gets the values of the LongParam as an int array.  Note that if the\r\n     * LongParam has no values, an empty array is returned.\r\n     *\r\n     * @return              an array of int values\r\n     * @see Parameter#isSet()\r\n     */\r\n    public long[] longValues() {\r\n        long[] vals = new long[values.size()];\r\n        for (int i = 0; i < vals.length; i++) {\r\n            vals[i] = Long.parseLong((String) values.get(i));\r\n        }\r\n        return vals;\r\n    }\r\n\r\n    /**\r\n     * gets minimum acceptable value for the parameter's value\r\n     *\r\n     * @return              the minimum acceptable value\r\n     */\r\n    public long getMin() {\r\n        return min;\r\n    }\r\n\r\n    /**\r\n     * Sets the maximum acceptable value for the parameter.\r\n     * <P>\r\n     * If both <code>acceptableValues</code> and/or a minimum or maximum\r\n     * limit for the parameter value are specified, a valid value must\r\n     * satisfy <b>all</b> of the constraints.\r\n     *\r\n     * @param max       the maximum acceptable value\r\n     * @throws          IllegalArgumentException if <code>min</code> is\r\n     *                  greater than <code>max</code>\r\n     */\r\n    public void setMax(long max) {\r\n        if (min > max) {\r\n            throw new IllegalArgumentException(Strings.get(\"LongParam.maxLessThanMin\", new Object[] { tag }));\r\n        }\r\n        this.max = max;\r\n    }\r\n\r\n    /**\r\n     * gets the maximum acceptable value for the parameter\r\n     *\r\n     * @return              the maximum acceptable value\r\n     */\r\n    public long getMax() {\r\n        return max;\r\n    }\r\n\r\n    /**\r\n     * Sets the acceptable values for this parameter.\r\n     * <P>\r\n     * If both <code>acceptableValues</code> and/or a minimum or maximum\r\n     * limit for the parameter value are specified, a valid value must\r\n     * satisfy <b>all</b> of the constraints.\r\n     *\r\n     * @param acceptableValues  An array of acceptable long values that\r\n     *                          the parameter's values must match.  If null,\r\n     *                          the parameter's values can be any long.\r\n     */\r\n    public void setAcceptablesLongValues(long[] longValues) {\r\n        String[] sValues = new String[longValues.length];\r\n        for (int i = 0; i < longValues.length; i++) {\r\n            sValues[i] = Long.toString(longValues[i]);\r\n        }\r\n        setAcceptableValues(sValues);\r\n    }\r\n\r\n    /**\r\n     * gets the acceptable values for this parameter\r\n     *\r\n     * @return              The acceptable values for this parameter.  If no\r\n     *                      acceptable values have been specified, this\r\n     *                      method returns null.\r\n     */\r\n    public long[] getAcceptableLongValues() {\r\n        String[] sValues = getAcceptableValues();\r\n        long[] longValues = new long[sValues.length];\r\n        for (int i = 0; i < sValues.length; i++) {\r\n            longValues[i] = Long.parseLong(sValues[i]);\r\n        }\r\n        return longValues;\r\n    }\r\n\r\n    /**\r\n     * Validates a prospective value with regards to the minimum and maximum\r\n     * values and the acceptableValues called by add/setValue(s)().\r\n     *\r\n     * @param val           the prospective value to validate\r\n     * @throws              CmdLineException if\r\n     *                      <code>value</code> is not valid with regard to\r\n     *     #                      the minimum and\r\n     *                      maximum values, and the acceptableValues.\r\n     */\r\n    public void validateValue(String val) throws CmdLineException {\r\n        // Strip off any leading 0s before calling\r\n        // AbstractParameter.validateValue() because the Strings we sent\r\n        // as acceptable values were without.\r\n        int offset = 0;\r\n        while (val.startsWith(\"0\", offset)) {\r\n            offset++;\r\n        }\r\n        super.validateValue(val.substring(offset));\r\n        CmdLineException exception = new CmdLineException(Strings.get(\"LongParam.validValues\", new Object[] { tag, new Long(min), new Long(max) }));\r\n        long longVal = 0;\r\n        try {\r\n            longVal = Long.parseLong(val);\r\n        } catch (NumberFormatException e) {\r\n            throw exception;\r\n        }\r\n        if (longVal < min || longVal > max) {\r\n            throw exception;\r\n        }\r\n    }\r\n}\r\n",
		"id": "EvoSuiteBenchmark/109_pdfsam/src/main/java/jcmdline/LongParamTest0.java",
		"test_prompt": "// LongParamTest0.java\npackage jcmdline;\n\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link LongParam}.\n* It contains ten unit test cases for the {@link LongParam#longValue()} method.\n*/\nclass LongParamTest0 {"
	},
	{
		"original_code": "// LongParam.java\n/*\r\n * LongParam.java\r\n *\r\n * Classes:\r\n *   public   LongParam\r\n *   \r\n * ***** BEGIN LICENSE BLOCK *****\r\n * Version: MPL 1.1\r\n *\r\n * The contents of this file are subject to the Mozilla Public License Version\r\n * 1.1 (the \"License\"); you may not use this file except in compliance with\r\n * the License. You may obtain a copy of the License at\r\n * http://www.mozilla.org/MPL/\r\n *\r\n * Software distributed under the License is distributed on an \"AS IS\" basis,\r\n * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License\r\n * for the specific language governing rights and limitations under the\r\n * License.\r\n *\r\n * The Original Code is the Java jcmdline (command line management) package.\r\n *\r\n * The Initial Developer of the Original Code is Lynne Lawrence.\r\n * \r\n * Portions created by the Initial Developer are Copyright (C) 2002\r\n * the Initial Developer. All Rights Reserved.\r\n *\r\n * Contributor(s):  Andrea Vacondio\r\n *\r\n * ***** END LICENSE BLOCK *****\r\n */\r\npackage jcmdline;\r\n\r\n/**\r\n * Encapsulate a command line parameter whose value will be a signed\r\n * long in the same range as a java long.\r\n * @author a.vacondio\r\n */\r\npublic class LongParam extends AbstractParameter {\r\n\r\n    /**\r\n     * the default label that will represent option values for this Parameter\r\n     * when displaying usage.  The following demonstrates a possible usage\r\n     * excerpt for a LongParam option, where the option label is '&lt;n&gt;':\r\n     * <pre>\r\n     *    count &lt;n&gt;  Specifies the maximum number of files to be\r\n     *               produced by this program.\r\n     * </pre>\r\n     * @see AbstractParameter#setOptionLabel(String) setOptionLabel()\r\n     * @see \"<i>LongParam.defaultOptionLabel</i> in 'strings' properties file\"\r\n     */\r\n    public static final String DEFAULT_OPTION_LABEL = Strings.get(\"LongParam.defaultOptionLabel\");\r\n\r\n    /**\r\n     * the maximum acceptable number - defaults to Long.MAX_VALUE\r\n     */\r\n    protected long max = Long.MAX_VALUE;\r\n\r\n    /**\r\n     * the minimum acceptable number - defaults to Long.MIN_VALUE\r\n     */\r\n    protected long min = Long.MIN_VALUE;\r\n\r\n    /**\r\n     * constructor - creates single-valued, optional, public\r\n     * parameter which will\r\n     * accept an long between Long.MIN_VALUE and Long.MAX_VALUE.\r\n     *\r\n     * @param tag           a unique identifier for this parameter\r\n     * @param desc          a description of the parameter, suitable for display\r\n     *                      in a usage statement\r\n     * @throws              IllegalArgumentException if <code>tag</code>\r\n     *                      or <desc> are invalid.\r\n     * @see                 AbstractParameter#setTag(String) setTag()\r\n     * @see                 AbstractParameter#setDesc(String) setDesc()\r\n     */\r\n    public LongParam(String tag, String desc) {\r\n        this(tag, desc, Long.MIN_VALUE, Long.MAX_VALUE, OPTIONAL, SINGLE_VALUED, PUBLIC);\r\n    }\r\n\r\n    /**\r\n     * constructor - creates single-valued, public parameter which will\r\n     * accept an long between Long.MIN_VALUE and Long.MAX_VALUE, and\r\n     * will be either optional or required, as specified.\r\n     *\r\n     * @param tag           a unique identifier for this parameter\r\n     * @param desc          a description of the parameter, suitable for display\r\n     *                      in a usage statement\r\n     * @param optional      {@link Parameter#OPTIONAL OPTIONAL} if\r\n     *                      optional,\r\n     *                      {@link Parameter#REQUIRED REQUIRED} if required\r\n     * @throws              IllegalArgumentException if any of the specified\r\n     *                      parameters are invalid.\r\n     * @see                 AbstractParameter#setTag(String) setTag()\r\n     * @see                 AbstractParameter#setDesc(String) setDesc()\r\n     */\r\n    public LongParam(String tag, String desc, boolean optional) {\r\n        this(tag, desc, Long.MIN_VALUE, Long.MAX_VALUE, optional, SINGLE_VALUED, PUBLIC);\r\n    }\r\n\r\n    /**\r\n     * constructor - creates a public parameter which will\r\n     * accept an long between Long.MIN_VALUE and Long.MAX_VALUE, and\r\n     * will be either optional or required, and/or multi-valued, as specified.\r\n     *\r\n     * @param tag           a unique identifier for this parameter\r\n     * @param desc          a description of the parameter, suitable for display\r\n     *                      in a usage statement\r\n     * @param optional      {@link Parameter#OPTIONAL OPTIONAL} if\r\n     *                      optional,\r\n     *                      {@link Parameter#REQUIRED REQUIRED} if required\r\n     * @param multiValued   {@link Parameter#MULTI_VALUED MULTI_VALUED} if\r\n     *                      the parameter can accept multiple values,\r\n     *                      {@link Parameter#SINGLE_VALUED SINGLE_VALUED}\r\n     *                      if the parameter can contain only a single value\r\n     * @throws              IllegalArgumentException if any of the specified\r\n     *                      parameters are invalid.\r\n     * @see                 AbstractParameter#setTag(String) setTag()\r\n     * @see                 AbstractParameter#setDesc(String) setDesc()\r\n     * @see                 Parameter#SINGLE_VALUED SINGLE_VALUED\r\n     * @see                 Parameter#MULTI_VALUED MULTI_VALUED\r\n     */\r\n    public LongParam(String tag, String desc, boolean optional, boolean multiValued) {\r\n        this(tag, desc, Long.MIN_VALUE, Long.MAX_VALUE, optional, multiValued, PUBLIC);\r\n    }\r\n\r\n    /**\r\n     * constructor - creates a parameter which will\r\n     * accept an long between Long.MIN_VALUE and Long.MAX_VALUE, and\r\n     * will be either optional or required, and/or multi-valued, as specified.\r\n     *\r\n     * @param tag           a unique identifier for this parameter\r\n     * @param desc          a description of the parameter, suitable for display\r\n     *                      in a usage statement\r\n     * @param optional      {@link Parameter#OPTIONAL OPTIONAL} if\r\n     *                      optional,\r\n     *                      {@link Parameter#REQUIRED REQUIRED} if required\r\n     * @param multiValued   {@link Parameter#MULTI_VALUED MULTI_VALUED} if\r\n     *                      the parameter can accept multiple values,\r\n     *                      {@link Parameter#SINGLE_VALUED SINGLE_VALUED}\r\n     *                      if the parameter can contain only a single value\r\n     * @param hidden        {@link Parameter#HIDDEN HIDDEN} if parameter is\r\n     *                      not to be listed in the usage,\r\n     *                      {@link Parameter#PUBLIC PUBLIC} otherwise.\r\n     * @throws              IllegalArgumentException if any of the specified\r\n     *                      parameters are invalid.\r\n     * @see                 AbstractParameter#setTag(String) setTag()\r\n     * @see                 AbstractParameter#setDesc(String) setDesc()\r\n     * @see                 Parameter#SINGLE_VALUED SINGLE_VALUED\r\n     * @see                 Parameter#MULTI_VALUED MULTI_VALUED\r\n     * @see                 Parameter#HIDDEN HIDDEN\r\n     * @see                 Parameter#PUBLIC PUBLIC\r\n     */\r\n    public LongParam(String tag, String desc, boolean optional, boolean multiValued, boolean hidden) {\r\n        this(tag, desc, Long.MIN_VALUE, Long.MAX_VALUE, optional, multiValued, hidden);\r\n    }\r\n\r\n    /**\r\n     * constructor - creates a single-valued, optional, public, parameter\r\n     * that will accept an long between the specifed minimum and maximum\r\n     * values.\r\n     *\r\n     * @param tag           a unique identifier for this parameter\r\n     * @param desc          a description of the parameter, suitable for display\r\n     *                      in a usage statement\r\n     * @param min           the minimum acceptable value\r\n     * @param max           the maximum acceptable value\r\n     * @throws              IllegalArgumentException if any parameter is\r\n     *                      invalid.\r\n     * @see                 AbstractParameter#setTag(String) setTag()\r\n     * @see                 AbstractParameter#setDesc(String) setDesc()\r\n     * @see                 #setMin(int) setMin()\r\n     * @see                 #setMax(int) setMax()\r\n     */\r\n    public LongParam(String tag, String desc, long min, long max) {\r\n        this(tag, desc, min, max, OPTIONAL, SINGLE_VALUED, PUBLIC);\r\n    }\r\n\r\n    /**\r\n     * constructor - creates a single-valued, public parameter\r\n     * that will accept an long between the specifed minimum and maximum\r\n     * values, and which is required or optional, as specified.\r\n     *\r\n     * @param tag           a unique identifier for this parameter\r\n     * @param desc          a description of the parameter, suitable for display\r\n     *                      in a usage statement\r\n     * @param min           the minimum acceptable value\r\n     * @param max           the maximum acceptable value\r\n     * @param optional      {@link Parameter#OPTIONAL OPTIONAL} if\r\n     *                      optional,\r\n     *                      {@link Parameter#REQUIRED REQUIRED} if required\r\n     * @throws              IllegalArgumentException if any parameter is\r\n     *                      invalid.\r\n     * @see                 AbstractParameter#setTag(String) setTag()\r\n     * @see                 AbstractParameter#setDesc(String) setDesc()\r\n     * @see                 #setMin(int) setMin()\r\n     * @see                 #setMax(int) setMax()\r\n     * @see                 Parameter#OPTIONAL OPTIONAL\r\n     * @see                 Parameter#REQUIRED REQUIRED\r\n     */\r\n    public LongParam(String tag, String desc, long min, long max, boolean optional) {\r\n        this(tag, desc, min, max, optional, SINGLE_VALUED, PUBLIC);\r\n    }\r\n\r\n    /**\r\n     * constructor - creates a public parameter\r\n     * that will accept an long between the specifed minimum and maximum\r\n     * values, and which is required or optional and/or multi-valued,\r\n     * as specified.\r\n     *\r\n     * @param tag           a unique identifier for this parameter\r\n     * @param desc          a description of the parameter, suitable for display\r\n     *                      in a usage statement\r\n     * @param min           the minimum acceptable value\r\n     * @param max           the maximum acceptable value\r\n     * @param optional      {@link Parameter#OPTIONAL OPTIONAL} if\r\n     *                      optional,\r\n     *                      {@link Parameter#REQUIRED REQUIRED} if required\r\n     * @param multiValued   {@link Parameter#MULTI_VALUED MULTI_VALUED} if\r\n     *                      the parameter can accept multiple values,\r\n     *                      {@link Parameter#SINGLE_VALUED SINGLE_VALUED}\r\n     *                      if the parameter can contain only a single value\r\n     * @throws              IllegalArgumentException if any parameter is\r\n     *                      invalid.\r\n     * @see                 AbstractParameter#setTag(String) setTag()\r\n     * @see                 AbstractParameter#setDesc(String) setDesc()\r\n     * @see                 #setMin(int) setMin()\r\n     * @see                 #setMax(int) setMax()\r\n     * @see                 Parameter#OPTIONAL OPTIONAL\r\n     * @see                 Parameter#REQUIRED REQUIRED\r\n     * @see                 Parameter#SINGLE_VALUED SINGLE_VALUED\r\n     * @see                 Parameter#MULTI_VALUED MULTI_VALUED\r\n     */\r\n    public LongParam(String tag, String desc, long min, long max, boolean optional, boolean multiValued) {\r\n        this(tag, desc, min, max, optional, multiValued, PUBLIC);\r\n    }\r\n\r\n    /**\r\n     * constructor - creates a parameter\r\n     * that will accept an long between the specifed minimum and maximum\r\n     * values, and for which all other options are specified.\r\n     *\r\n     * @param tag           a unique identifier for this parameter\r\n     * @param desc          a description of the parameter, suitable for display\r\n     *                      in a usage statement\r\n     * @param min           the minimum acceptable value\r\n     * @param max           the maximum acceptable value\r\n     * @param optional      {@link Parameter#OPTIONAL OPTIONAL} if\r\n     *                      optional,\r\n     *                      {@link Parameter#REQUIRED REQUIRED} if required\r\n     * @param multiValued   {@link Parameter#MULTI_VALUED MULTI_VALUED} if\r\n     *                      the parameter can accept multiple values,\r\n     *                      {@link Parameter#SINGLE_VALUED SINGLE_VALUED}\r\n     *                      if the parameter can contain only a single value\r\n     * @param hidden        {@link Parameter#HIDDEN HIDDEN} if parameter is\r\n     *                      not to be listed in the usage,\r\n     *                      {@link Parameter#PUBLIC PUBLIC} otherwise.\r\n     * @throws              IllegalArgumentException if any parameter is\r\n     *                      invalid.\r\n     * @see                 AbstractParameter#setTag(String) setTag()\r\n     * @see                 AbstractParameter#setDesc(String) setDesc()\r\n     * @see                 #setMin(int) setMin()\r\n     * @see                 #setMax(int) setMax()\r\n     * @see                 Parameter#OPTIONAL OPTIONAL\r\n     * @see                 Parameter#REQUIRED REQUIRED\r\n     * @see                 Parameter#SINGLE_VALUED SINGLE_VALUED\r\n     * @see                 Parameter#MULTI_VALUED MULTI_VALUED\r\n     * @see                 Parameter#HIDDEN HIDDEN\r\n     * @see                 Parameter#PUBLIC PUBLIC\r\n     */\r\n    public LongParam(String tag, String desc, long min, long max, boolean optional, boolean multiValued, boolean hidden) {\r\n        this.setTag(tag);\r\n        this.setMin(min);\r\n        this.setMax(max);\r\n        this.setDesc(desc);\r\n        this.setOptional(optional);\r\n        this.setMultiValued(multiValued);\r\n        this.setHidden(hidden);\r\n        this.setOptionLabel(DEFAULT_OPTION_LABEL);\r\n    }\r\n\r\n    /**\r\n     * constructor - creates a single-valued, optional, public,\r\n     * number parameter whose value must be one of the specified values.\r\n     *\r\n     * @param tag           the tag associated with this parameter\r\n     * @param desc          a description of the parameter, suitable for display\r\n     *                      in a usage statement\r\n     * @param acceptableValues  the acceptable values for the parameter\r\n     * @throws              IllegalArgumentException if any parameter is\r\n     *                      invalid.\r\n     * @see                 AbstractParameter#setTag(String) setTag()\r\n     * @see                 AbstractParameter#setDesc(String) setDesc()\r\n     * @see                 #setAcceptablesLongValues(int[]) setAcceptableIntValues()\r\n     */\r\n    public LongParam(String tag, String desc, long[] acceptableValues) {\r\n        this(tag, desc, acceptableValues, OPTIONAL, SINGLE_VALUED, PUBLIC);\r\n    }\r\n\r\n    /**\r\n     * constructor - creates a single-valued, public,\r\n     * number parameter whose value must be one of the specified values,\r\n     * and which is required or optional, as specified.\r\n     *\r\n     * @param tag           the tag associated with this parameter\r\n     * @param desc          a description of the parameter, suitable for display\r\n     *                      in a usage statement\r\n     * @param acceptableValues  the acceptable values for the parameter\r\n     * @param optional      {@link Parameter#OPTIONAL OPTIONAL} if\r\n     *                      optional,\r\n     *                      {@link Parameter#REQUIRED REQUIRED} if required\r\n     * @throws              IllegalArgumentException if any parameter is\r\n     *                      invalid.\r\n     * @see                 AbstractParameter#setTag(String) setTag()\r\n     * @see                 AbstractParameter#setDesc(String) setDesc()\r\n     * @see                 #setAcceptablesLongValues(int[]) setAcceptableIntValues()\r\n     * @see                 Parameter#OPTIONAL OPTIONAL\r\n     * @see                 Parameter#REQUIRED REQUIRED\r\n     */\r\n    public LongParam(String tag, String desc, long[] acceptableValues, boolean optional) {\r\n        this(tag, desc, acceptableValues, optional, SINGLE_VALUED, PUBLIC);\r\n    }\r\n\r\n    /**\r\n     * constructor - creates a public\r\n     * number parameter whose value must be one of the specified values,\r\n     * and which is required or optional and/or multi-valued, as specified.\r\n     *\r\n     * @param tag           the tag associated with this parameter\r\n     * @param desc          a description of the parameter, suitable for display\r\n     *                      in a usage statement\r\n     * @param acceptableValues  the acceptable values for the parameter\r\n     * @param optional      {@link Parameter#OPTIONAL OPTIONAL} if\r\n     *                      optional,\r\n     *                      {@link Parameter#REQUIRED REQUIRED} if required\r\n     * @param multiValued   {@link Parameter#MULTI_VALUED MULTI_VALUED} if\r\n     *                      the parameter can accept multiple values,\r\n     *                      {@link Parameter#SINGLE_VALUED SINGLE_VALUED}\r\n     *                      if the parameter can contain only a single value\r\n     * @throws              IllegalArgumentException if any parameter is\r\n     *                      invalid.\r\n     * @see                 AbstractParameter#setTag(String) setTag()\r\n     * @see                 AbstractParameter#setDesc(String) setDesc()\r\n     * @see                 #setAcceptablesLongValues(int[]) setAcceptableIntValues()\r\n     * @see                 Parameter#OPTIONAL OPTIONAL\r\n     * @see                 Parameter#REQUIRED REQUIRED\r\n     * @see                 Parameter#SINGLE_VALUED SINGLE_VALUED\r\n     * @see                 Parameter#MULTI_VALUED MULTI_VALUED\r\n     */\r\n    public LongParam(String tag, String desc, long[] acceptableValues, boolean optional, boolean multiValued) {\r\n        this(tag, desc, acceptableValues, optional, multiValued, PUBLIC);\r\n    }\r\n\r\n    /**\r\n     * constructor - creates a\r\n     * number parameter whose value must be one of the specified values,\r\n     * and all of whose other options are specified.\r\n     *\r\n     * @param tag           the tag associated with this parameter\r\n     * @param desc          a description of the parameter, suitable for display\r\n     *                      in a usage statement\r\n     * @param acceptableValues  the acceptable values for the parameter\r\n     * @param optional      {@link Parameter#OPTIONAL OPTIONAL} if\r\n     *                      optional,\r\n     *                      {@link Parameter#REQUIRED REQUIRED} if required\r\n     * @param multiValued   {@link Parameter#MULTI_VALUED MULTI_VALUED} if\r\n     *                      the parameter can accept multiple values,\r\n     *                      {@link Parameter#SINGLE_VALUED SINGLE_VALUED}\r\n     *                      if the parameter can contain only a single value\r\n     * @param hidden        {@link Parameter#HIDDEN HIDDEN} if parameter is\r\n     *                      not to be listed in the usage,\r\n     *                      {@link Parameter#PUBLIC PUBLIC} otherwise.\r\n     * @throws              IllegalArgumentException if any parameter is\r\n     *                      invalid.\r\n     * @see                 AbstractParameter#setTag(String) setTag()\r\n     * @see                 AbstractParameter#setDesc(String) setDesc()\r\n     * @see                 #setAcceptablesLongValues(int[]) setAcceptableIntValues()\r\n     * @see                 Parameter#OPTIONAL OPTIONAL\r\n     * @see                 Parameter#REQUIRED REQUIRED\r\n     * @see                 Parameter#SINGLE_VALUED SINGLE_VALUED\r\n     * @see                 Parameter#MULTI_VALUED MULTI_VALUED\r\n     * @see                 Parameter#HIDDEN HIDDEN\r\n     * @see                 Parameter#PUBLIC PUBLIC\r\n     */\r\n    public LongParam(String tag, String desc, long[] acceptableValues, boolean optional, boolean multiValued, boolean hidden) {\r\n        this.setTag(tag);\r\n        this.setAcceptablesLongValues(acceptableValues);\r\n        this.setDesc(desc);\r\n        this.setOptional(optional);\r\n        this.setMultiValued(multiValued);\r\n        this.setHidden(hidden);\r\n        this.setOptionLabel(DEFAULT_OPTION_LABEL);\r\n    }\r\n\r\n    /**\r\n     * Sets the minimum acceptable value for the parameter's value.\r\n     * <P>\r\n     * If both <code>acceptableValues</code> and/or a minimum or maximum\r\n     * limit for the parameter value are specified, a valid value must\r\n     * satisfy <b>all</b> of the constraints.\r\n     *\r\n     * @param min       the minimum acceptable value\r\n     * @throws          IllegalArgumentException if <code>min</code> is\r\n     *                  greater than <code>max</code>\r\n     */\r\n    public void setMin(long min) {\r\n        if (min > max) {\r\n            throw new IllegalArgumentException(Strings.get(\"LongParam.maxLessThanMin\", new Object[] { tag }));\r\n        }\r\n        this.min = min;\r\n    }\r\n\r\n    /**\r\n     * Gets the value of the LongParam as in int.  If the LongParam is\r\n     * multi-valued, only the first value is returned.\r\n     *\r\n     * @return              the value as an int\r\n     * @throws              RuntimeException if the value of the LongParam\r\n     *                      has not been set.\r\n     * @see Parameter#isSet()\r\n     */\r\n    public long longValue() {\r\n        if (!set) {\r\n            throw new RuntimeException(Strings.get(\"LongParam.valueNotSet\", new Object[] { tag }));\r\n        }\r\n        return Long.parseLong((String) values.get(0));\r\n    }\r\n\r\n    /**\r\n     * Gets the values of the LongParam as an int array.  Note that if the\r\n     * LongParam has no values, an empty array is returned.\r\n     *\r\n     * @return              an array of int values\r\n     * @see Parameter#isSet()\r\n     */\r\n    public long[] longValues() {\r\n        long[] vals = new long[values.size()];\r\n        for (int i = 0; i < vals.length; i++) {\r\n            vals[i] = Long.parseLong((String) values.get(i));\r\n        }\r\n        return vals;\r\n    }\r\n\r\n    /**\r\n     * gets minimum acceptable value for the parameter's value\r\n     *\r\n     * @return              the minimum acceptable value\r\n     */\r\n    public long getMin() {\r\n        return min;\r\n    }\r\n\r\n    /**\r\n     * Sets the maximum acceptable value for the parameter.\r\n     * <P>\r\n     * If both <code>acceptableValues</code> and/or a minimum or maximum\r\n     * limit for the parameter value are specified, a valid value must\r\n     * satisfy <b>all</b> of the constraints.\r\n     *\r\n     * @param max       the maximum acceptable value\r\n     * @throws          IllegalArgumentException if <code>min</code> is\r\n     *                  greater than <code>max</code>\r\n     */\r\n    public void setMax(long max) {\r\n        if (min > max) {\r\n            throw new IllegalArgumentException(Strings.get(\"LongParam.maxLessThanMin\", new Object[] { tag }));\r\n        }\r\n        this.max = max;\r\n    }\r\n\r\n    /**\r\n     * gets the maximum acceptable value for the parameter\r\n     *\r\n     * @return              the maximum acceptable value\r\n     */\r\n    public long getMax() {\r\n        return max;\r\n    }\r\n\r\n    /**\r\n     * Sets the acceptable values for this parameter.\r\n     * <P>\r\n     * If both <code>acceptableValues</code> and/or a minimum or maximum\r\n     * limit for the parameter value are specified, a valid value must\r\n     * satisfy <b>all</b> of the constraints.\r\n     *\r\n     * @param acceptableValues  An array of acceptable long values that\r\n     *                          the parameter's values must match.  If null,\r\n     *                          the parameter's values can be any long.\r\n     */\r\n    public void setAcceptablesLongValues(long[] longValues) {\r\n        String[] sValues = new String[longValues.length];\r\n        for (int i = 0; i < longValues.length; i++) {\r\n            sValues[i] = Long.toString(longValues[i]);\r\n        }\r\n        setAcceptableValues(sValues);\r\n    }\r\n\r\n    /**\r\n     * gets the acceptable values for this parameter\r\n     *\r\n     * @return              The acceptable values for this parameter.  If no\r\n     *                      acceptable values have been specified, this\r\n     *                      method returns null.\r\n     */\r\n    public long[] getAcceptableLongValues() {\r\n        String[] sValues = getAcceptableValues();\r\n        long[] longValues = new long[sValues.length];\r\n        for (int i = 0; i < sValues.length; i++) {\r\n            longValues[i] = Long.parseLong(sValues[i]);\r\n        }\r\n        return longValues;\r\n    }\r\n\r\n    /**\r\n     * Validates a prospective value with regards to the minimum and maximum\r\n     * values and the acceptableValues called by add/setValue(s)().\r\n     *\r\n     * @param val           the prospective value to validate\r\n     * @throws              CmdLineException if\r\n     *                      <code>value</code> is not valid with regard to\r\n     *     #                      the minimum and\r\n     *                      maximum values, and the acceptableValues.\r\n     */\r\n    public void validateValue(String val) throws CmdLineException {\r\n        // Strip off any leading 0s before calling\r\n        // AbstractParameter.validateValue() because the Strings we sent\r\n        // as acceptable values were without.\r\n        int offset = 0;\r\n        while (val.startsWith(\"0\", offset)) {\r\n            offset++;\r\n        }\r\n        super.validateValue(val.substring(offset));\r\n        CmdLineException exception = new CmdLineException(Strings.get(\"LongParam.validValues\", new Object[] { tag, new Long(min), new Long(max) }));\r\n        long longVal = 0;\r\n        try {\r\n            longVal = Long.parseLong(val);\r\n        } catch (NumberFormatException e) {\r\n            throw exception;\r\n        }\r\n        if (longVal < min || longVal > max) {\r\n            throw exception;\r\n        }\r\n    }\r\n}\r\n",
		"id": "EvoSuiteBenchmark/109_pdfsam/src/main/java/jcmdline/LongParamTest1.java",
		"test_prompt": "// LongParamTest1.java\npackage jcmdline;\n\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link LongParam}.\n* It contains ten unit test cases for the {@link LongParam#longValues()} method.\n*/\nclass LongParamTest1 {"
	},
	{
		"original_code": "// DateTimeParam.java\n/*\n * DateTimeParam.java\n *\n * jcmdline Rel. @VERSION@ $Id: DateTimeParam.java,v 1.2 2002/12/07 14:22:06 lglawrence Exp $\n *\n * Classes:\n *   public   DateTimeParam\n *   \n * ***** BEGIN LICENSE BLOCK *****\n * Version: MPL 1.1\n *\n * The contents of this file are subject to the Mozilla Public License Version\n * 1.1 (the \"License\"); you may not use this file except in compliance with\n * the License. You may obtain a copy of the License at\n * http://www.mozilla.org/MPL/\n *\n * Software distributed under the License is distributed on an \"AS IS\" basis,\n * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License\n * for the specific language governing rights and limitations under the\n * License.\n *\n * The Original Code is the Java jcmdline (command line management) package.\n *\n * The Initial Developer of the Original Code is Lynne Lawrence.\n * \n * Portions created by the Initial Developer are Copyright (C) 2002\n * the Initial Developer. All Rights Reserved.\n *\n * Contributor(s):  Lynne Lawrence <lgl@visuallink.com>\n *\n * ***** END LICENSE BLOCK *****\n */\npackage jcmdline;\n\nimport java.text.DecimalFormat;\nimport java.text.ParseException;\nimport java.text.SimpleDateFormat;\nimport java.util.Collection;\nimport java.util.Date;\nimport java.util.Iterator;\n\n/**\n * A parameter that accepts a date and time as its value.\n * <p>\n * The format for the date is taken from the <code>strings</code>\n * ResourceBundle.  The format for the time is \"HH:mm:ss:SSS\", where\n * the seconds and/or milliseconds portion may be left off by the user,\n * in which case they will be defaulted.\n * <P>\n *  Sample Usage:\n *  <pre>\n *     DateTimeParam startTimeParam =\n *         new DateTimeParam(\"startTime\",\n *                           \"start time of report\",\n *                           DateTimeParam.REQUIRED);\n *     DateTimeParam endTimeParam =\n *         new DateTimeParam(\"endTime\",\n *                           \"end time of report\",\n *                           DateTimeParam.REQUIRED);\n *\n *     // Seconds and millis for startTime will both be 0 by default.\n *     // Set the seconds and millis for the end of the report to be the end\n *     // of a minute.\n *     endTimeParam.setDefaultSeconds(59);\n *     endTimeParam.setDefaultMilliSeconds(999);\n *\n *     CmdLineHandler cl = new DefaultCmdLineHandler(\n *         \"myreport\", \"generate activity report\",\n *         new Parameter[] {},\n *         new Parameter[] { startTimeParam, endTimeParam });\n *\n *     cl.parse();\n *\n *     // Don't need to check isSet() because params are REQUIRED\n *     Date stTime = startTimeParam.getDate();\n *     Date enTime = endTimeParam.getDate();\n *     .\n *     .\n *  </pre>\n *  This will result in a command line that may be executed as:\n *  <pre>\n *   myreport \"09/23/59 10:12\" \"09/23/59 23:34\"\n *  </pre>\n *  or\n *  <pre>\n *   myreport \"09/23/59 10:12:34:567\" \"09/23/59 23:34:34:567\"\n *  </pre>\n *\n * @author          Lynne Lawrence\n * @version         jcmdline Rel. @VERSION@ $Id: DateTimeParam.java,v 1.2 2002/12/07 14:22:06 lglawrence Exp $\n * @see DateParam\n * @see TimeParam\n */\npublic class DateTimeParam extends AbstractParameter {\n\n    private static final String sDateFmt = Strings.get(\"DateTimeParam.dateFormat\");\n\n    private static final String sTimeFmt = \"HH:mm:ss:SSS\";\n\n    private static final String sTimeFmtDisplay = \"HH:mm[:ss[:SSS]]\";\n\n    private static final SimpleDateFormat dateFmt = new SimpleDateFormat(sDateFmt + \" \" + sTimeFmt);\n\n    private static final DecimalFormat secondFmt = new DecimalFormat(\"00\");\n\n    private static final DecimalFormat msFmt = new DecimalFormat(\"000\");\n\n    private Date date = null;\n\n    /**\n     * The seconds default to use if not specified by the user.\n     * This will default to 0 if never specified for a DateTimeParam object.\n     * @see #setDefaultSeconds(int) setDefaultSeconds()\n     * @see #getDefaultSeconds()\n     */\n    private int defaultSeconds = 0;\n\n    /**\n     * The default millisecond value to use if not specified by the user.\n     * This will default to 0 if never specified for a DateTimeParam object.\n     * @see #setDefaultMilliSeconds(int) setDefaultMilliSeconds()\n     * @see #getDefaultMilliSeconds()\n     */\n    private int defaultMilliSeconds = 0;\n\n    /**\n     * constructor - creates single-valued, optional, public\n     * parameter\n     *\n     * @param tag           a unique identifier for this parameter\n     * @param desc          a description of the parameter, suitable for display\n     *                      in a usage statement\n     * @throws              IllegalArgumentException if <code>tag</code>\n     *                      or <desc> are invalid.\n     * @see                 AbstractParameter#setTag(String) setTag()\n     * @see                 AbstractParameter#setDesc(String) setDesc()\n     */\n    public DateTimeParam(String tag, String desc) {\n        this(tag, desc, OPTIONAL, SINGLE_VALUED, PUBLIC);\n    }\n\n    /**\n     * constructor - creates single-valued, public parameter which will\n     * will be either optional or required, as specified.\n     *\n     * @param tag           a unique identifier for this parameter\n     * @param desc          a description of the parameter, suitable for display\n     *                      in a usage statement\n     * @param optional      {@link Parameter#OPTIONAL OPTIONAL} if\n     *                      optional,\n     *                      {@link Parameter#REQUIRED REQUIRED} if required\n     * @throws              IllegalArgumentException if any of the specified\n     *                      parameters are invalid.\n     * @see                 AbstractParameter#setTag(String) setTag()\n     * @see                 AbstractParameter#setDesc(String) setDesc()\n     */\n    public DateTimeParam(String tag, String desc, boolean optional) {\n        this(tag, desc, optional, SINGLE_VALUED, PUBLIC);\n    }\n\n    /**\n     * constructor - creates a public parameter which will\n     * will be either optional or required, and/or multi-valued, as specified.\n     *\n     * @param tag           a unique identifier for this parameter\n     * @param desc          a description of the parameter, suitable for display\n     *                      in a usage statement\n     * @param optional      {@link Parameter#OPTIONAL OPTIONAL} if\n     *                      optional,\n     *                      {@link Parameter#REQUIRED REQUIRED} if required\n     * @param multiValued   {@link Parameter#MULTI_VALUED MULTI_VALUED} if\n     *                      the parameter can accept multiple values,\n     *                      {@link Parameter#SINGLE_VALUED SINGLE_VALUED}\n     *                      if the parameter can contain only a single value\n     * @throws              IllegalArgumentException if any of the specified\n     *                      parameters are invalid.\n     * @see                 AbstractParameter#setTag(String) setTag()\n     * @see                 AbstractParameter#setDesc(String) setDesc()\n     * @see                 Parameter#SINGLE_VALUED SINGLE_VALUED\n     * @see                 Parameter#MULTI_VALUED MULTI_VALUED\n     */\n    public DateTimeParam(String tag, String desc, boolean optional, boolean multiValued) {\n        this(tag, desc, optional, multiValued, PUBLIC);\n    }\n\n    /**\n     * constructor - creates a parameter which will\n     * will be either optional or required, single or multi-valued, and\n     * hidden or public as specified.\n     *\n     * @param tag           a unique identifier for this parameter\n     * @param desc          a description of the parameter, suitable for display\n     *                      in a usage statement\n     * @param optional      {@link Parameter#OPTIONAL OPTIONAL} if\n     *                      optional,\n     *                      {@link Parameter#REQUIRED REQUIRED} if required\n     * @param multiValued   {@link Parameter#MULTI_VALUED MULTI_VALUED} if\n     *                      the parameter can accept multiple values,\n     *                      {@link Parameter#SINGLE_VALUED SINGLE_VALUED}\n     *                      if the parameter can contain only a single value\n     * @param hidden        {@link Parameter#HIDDEN HIDDEN} if parameter is\n     *                      not to be listed in the usage,\n     *                      {@link Parameter#PUBLIC PUBLIC} otherwise.\n     * @throws              IllegalArgumentException if any of the specified\n     *                      parameters are invalid.\n     * @see                 AbstractParameter#setTag(String) setTag()\n     * @see                 AbstractParameter#setDesc(String) setDesc()\n     * @see                 Parameter#SINGLE_VALUED SINGLE_VALUED\n     * @see                 Parameter#MULTI_VALUED MULTI_VALUED\n     * @see                 Parameter#HIDDEN HIDDEN\n     * @see                 Parameter#PUBLIC PUBLIC\n     */\n    public DateTimeParam(String tag, String desc, boolean optional, boolean multiValued, boolean hidden) {\n        this.setTag(tag);\n        this.setDesc(desc);\n        this.setOptional(optional);\n        this.setMultiValued(multiValued);\n        this.setHidden(hidden);\n        this.setOptionLabel(sDateFmt + \" \" + sTimeFmtDisplay);\n    }\n\n    /**\n     * constructor - creates a single-valued, optional, public,\n     * number parameter whose value must be one of the specified values.\n     *\n     * @param tag           the tag associated with this parameter\n     * @param desc          a description of the parameter, suitable for display\n     *                      in a usage statement\n     * @param acceptableValues  the acceptable values for the parameter\n     * @throws              IllegalArgumentException if any parameter is\n     *                      invalid.\n     * @see                 AbstractParameter#setTag(String) setTag()\n     * @see                 AbstractParameter#setDesc(String) setDesc()\n     * @see                 #setAcceptableDates(Date[]) setAcceptableDates()\n     */\n    public DateTimeParam(String tag, String desc, Date[] acceptableValues) {\n        this(tag, desc, acceptableValues, OPTIONAL, SINGLE_VALUED, PUBLIC);\n    }\n\n    /**\n     * constructor - creates a single-valued, public,\n     * number parameter whose value must be one of the specified values,\n     * and which is required or optional, as specified.\n     *\n     * @param tag           the tag associated with this parameter\n     * @param desc          a description of the parameter, suitable for display\n     *                      in a usage statement\n     * @param acceptableValues  the acceptable values for the parameter\n     * @param optional      {@link Parameter#OPTIONAL OPTIONAL} if\n     *                      optional,\n     *                      {@link Parameter#REQUIRED REQUIRED} if required\n     * @throws              IllegalArgumentException if any parameter is\n     *                      invalid.\n     * @see                 AbstractParameter#setTag(String) setTag()\n     * @see                 AbstractParameter#setDesc(String) setDesc()\n     * @see                 #setAcceptableDates(Date[]) setAcceptableDates()\n     * @see                 Parameter#OPTIONAL OPTIONAL\n     * @see                 Parameter#REQUIRED REQUIRED\n     */\n    public DateTimeParam(String tag, String desc, Date[] acceptableValues, boolean optional) {\n        this(tag, desc, acceptableValues, optional, SINGLE_VALUED, PUBLIC);\n    }\n\n    /**\n     * constructor - creates a public\n     * number parameter whose value must be one of the specified values,\n     * and which is required or optional and/or multi-valued, as specified.\n     *\n     * @param tag           the tag associated with this parameter\n     * @param desc          a description of the parameter, suitable for display\n     *                      in a usage statement\n     * @param acceptableValues  the acceptable values for the parameter\n     * @param optional      {@link Parameter#OPTIONAL OPTIONAL} if\n     *                      optional,\n     *                      {@link Parameter#REQUIRED REQUIRED} if required\n     * @param multiValued   {@link Parameter#MULTI_VALUED MULTI_VALUED} if\n     *                      the parameter can accept multiple values,\n     *                      {@link Parameter#SINGLE_VALUED SINGLE_VALUED}\n     *                      if the parameter can contain only a single value\n     * @throws              IllegalArgumentException if any parameter is\n     *                      invalid.\n     * @see                 AbstractParameter#setTag(String) setTag()\n     * @see                 AbstractParameter#setDesc(String) setDesc()\n     * @see                 #setAcceptableDates(Date[]) setAcceptableDates()\n     * @see                 Parameter#OPTIONAL OPTIONAL\n     * @see                 Parameter#REQUIRED REQUIRED\n     * @see                 Parameter#SINGLE_VALUED SINGLE_VALUED\n     * @see                 Parameter#MULTI_VALUED MULTI_VALUED\n     */\n    public DateTimeParam(String tag, String desc, Date[] acceptableValues, boolean optional, boolean multiValued) {\n        this(tag, desc, acceptableValues, optional, multiValued, PUBLIC);\n    }\n\n    /**\n     * constructor - creates a\n     * Parameter, all of whose options are specified.\n     *\n     * @param tag           the tag associated with this parameter\n     * @param desc          a description of the parameter, suitable for display\n     *                      in a usage statement\n     * @param acceptableValues  the acceptable values for the parameter\n     * @param optional      {@link Parameter#OPTIONAL OPTIONAL} if\n     *                      optional,\n     *                      {@link Parameter#REQUIRED REQUIRED} if required\n     * @param multiValued   {@link Parameter#MULTI_VALUED MULTI_VALUED} if\n     *                      the parameter can accept multiple values,\n     *                      {@link Parameter#SINGLE_VALUED SINGLE_VALUED}\n     *                      if the parameter can contain only a single value\n     * @param hidden        {@link Parameter#HIDDEN HIDDEN} if parameter is\n     *                      not to be listed in the usage,\n     *                      {@link Parameter#PUBLIC PUBLIC} otherwise.\n     * @throws              IllegalArgumentException if any parameter is\n     *                      invalid.\n     * @see                 AbstractParameter#setTag(String) setTag()\n     * @see                 AbstractParameter#setDesc(String) setDesc()\n     * @see                 #setAcceptableDates(Date[]) setAcceptableDates()\n     * @see                 Parameter#OPTIONAL OPTIONAL\n     * @see                 Parameter#REQUIRED REQUIRED\n     * @see                 Parameter#SINGLE_VALUED SINGLE_VALUED\n     * @see                 Parameter#MULTI_VALUED MULTI_VALUED\n     * @see                 Parameter#HIDDEN HIDDEN\n     * @see                 Parameter#PUBLIC PUBLIC\n     */\n    public DateTimeParam(String tag, String desc, Date[] acceptableValues, boolean optional, boolean multiValued, boolean hidden) {\n        this.setTag(tag);\n        this.setAcceptableDates(acceptableValues);\n        this.setDesc(desc);\n        this.setOptional(optional);\n        this.setMultiValued(multiValued);\n        this.setHidden(hidden);\n        this.setOptionLabel(sDateFmt + \" \" + sTimeFmtDisplay);\n    }\n\n    /**\n     * Verifies that <code>value</code> is valid for this entity - called by\n     * add/setValue(s)().\n     *\n     * @param value         the value to be validated\n     * @throws              CmdLineException if <code>value</code> is not valid.\n     */\n    public void validateValue(String val) throws CmdLineException {\n        super.validateValue(val);\n        try {\n            stringToDate(val);\n        } catch (ParseException e) {\n            throw new CmdLineException(Strings.get(\"DateTimeParam.invalidDate\", new Object[] { getTag(), sDateFmt + \" \" + sTimeFmtDisplay }));\n        }\n    }\n\n    /**\n     * Returns the value of this Parameter as a java.util.Date object.\n     * Should there be more than one value for this Parameter, the first\n     * value will be returned.\n     *\n     * @return              the value of this Parameter as a Date object\n     */\n    public Date getDate() {\n        String sVal = getValue();\n        Date date = null;\n        if (sVal != null) {\n            try {\n                date = stringToDate(sVal);\n            } catch (ParseException e) {\n                // Should never get here because all values would have been\n                // parsed as part of validateValue().\n                throw new RuntimeException(e);\n            }\n        }\n        return date;\n    }\n\n    /**\n     * Returns the values of this Parameter as java.util.Date objects.\n     *\n     * @return              The values of this Parameter as Date objects.  Note\n     *                      the the return value may be an empty array if no\n     *                      values have been set.\n     */\n    public Date[] getDates() {\n        Collection sVals = getValues();\n        Date[] dates = new Date[sVals.size()];\n        int i = 0;\n        for (Iterator itr = sVals.iterator(); itr.hasNext(); ) {\n            try {\n                dates[i] = stringToDate((String) itr.next());\n                i++;\n            } catch (ParseException e) {\n                // Should never get here because all values would have been\n                // parsed as part of validateValue().\n                throw new RuntimeException(e);\n            }\n        }\n        return dates;\n    }\n\n    /**\n     * Sets the seconds default to use if not specified by the user.\n     * This will default to 0 if never specified for a DateTimeParam object.\n     *\n     * @param defaultSeconds      the seconds default to use if not specified\n     *                            by the user\n     * @see #getDefaultSeconds()\n     */\n    public void setDefaultSeconds(int defaultSeconds) {\n        this.defaultSeconds = defaultSeconds;\n    }\n\n    /**\n     * Gets the seconds default to use if not specified by the user.\n     * This will default to 0 if never specified for a DateTimeParam object.\n     *\n     * @return              the seconds default to use if not specified by\n     *                      the user\n     * @see #setDefaultSeconds(int) setDefaultSeconds()\n     */\n    public int getDefaultSeconds() {\n        return defaultSeconds;\n    }\n\n    /**\n     * Sets the default millisecond value to use if not specified by the user.\n     * This will default to 0 if never specified for a DateTimeParam object.\n     *\n     * @param defaultMilliSeconds       the default millisecond value to use if\n     *                                  not specified by the user\n     * @see #getDefaultMilliSeconds()\n     */\n    public void setDefaultMilliSeconds(int defaultMilliSeconds) {\n        this.defaultMilliSeconds = defaultMilliSeconds;\n    }\n\n    /**\n     * Gets the default millisecond value to use if not specified by the user.\n     * This will default to 0 if never specified for a DateTimeParam object.\n     *\n     * @return              the default millisecond value to use if not\n     *                      specified by the user\n     * @see #setDefaultMilliSeconds(int) setDefaultMilliSeconds()\n     */\n    public int getDefaultMilliSeconds() {\n        return defaultMilliSeconds;\n    }\n\n    /**\n     * Gets the format used to parse the date/time values.\n     *\n     * @return              the format used to parse the date/time values\n     */\n    public static String getParseFormat() {\n        return dateFmt.toLocalizedPattern();\n    }\n\n    /**\n     * Sets the values that will be acceptable for this Parameter using\n     * Date objects.\n     *\n     * @param dates         an array of acceptable dates\n     */\n    public void setAcceptableDates(Date[] dates) {\n        String[] sDates = new String[dates.length];\n        for (int i = 0; i < dates.length; i++) {\n            sDates[i] = dateFmt.format(dates[i]);\n        }\n        super.setAcceptableValues(sDates);\n    }\n\n    /**\n     * Gets the acceptable values as Date objects.\n     *\n     * @return              The acceptable values as an array of Date objects.\n     *                      Note that null is returned if acceptable\n     *                      values have not been set.\n     */\n    public Date[] getAcceptableDates() {\n        String[] sVals = getAcceptableValues();\n        if (sVals == null) {\n            return null;\n        }\n        Date[] dates = new Date[sVals.length];\n        for (int i = 0; i < sVals.length; i++) {\n            try {\n                dates[i] = stringToDate(sVals[i]);\n            } catch (Exception e) {\n                // should never get here - acceptable values parsed on the\n                // way in\n                throw new RuntimeException(e);\n            }\n        }\n        return dates;\n    }\n\n    /**\n     * Sets acceptable values for this Parameter.\n     *\n     * @param vals          a Collection of java.util.Date objects representing\n     *                      the acceptable values.\n     * @throws  ClassCastException if any member of <code>vals</code> is not\n     *          a Date object.\n     */\n    public void setAcceptableDates(Collection vals) {\n        String[] sVals = new String[vals.size()];\n        int i = 0;\n        for (Iterator itr = vals.iterator(); itr.hasNext(); ) {\n            date = (Date) itr.next();\n            sVals[i] = dateFmt.format(date);\n            i++;\n        }\n        super.setAcceptableValues(sVals);\n    }\n\n    /**\n     * Unsupported.  This method is unsupported because, with the date format\n     * coming from a resource bundle, it is not reasonable to code string\n     * values for acceptable values - better to use Date objects.\n     *\n     * @throws  UnsupportedOperationException;\n     * @see #setAcceptableDates(Date[])\n     * @see #setAcceptableDates(Collection)\n     */\n    public void setAcceptableValues(Collection vals) {\n        throw new UnsupportedOperationException();\n    }\n\n    /**\n     * Unsupported.  This method is unsupported because, with the date format\n     * coming from a resource bundle, it is not reasonable to code string\n     * values for acceptable values - better to use Date objects.\n     *\n     * @throws  UnsupportedOperationException;\n     * @see #setAcceptableDates(Date[])\n     * @see #setAcceptableDates(Collection)\n     */\n    public void setAcceptableValues(String[] vals) {\n        throw new UnsupportedOperationException();\n    }\n\n    /**\n     * Converts a String value to its Date equivalent, filling in default\n     * seconds and milliseconds as necessary.\n     *\n     * @param val           the String to be converted\n     * @return              the Date object represented by <code>val</code>\n     * @throws  ParseException if <code>val</code> will not parse to a Date.\n     */\n    private Date stringToDate(String val) throws ParseException {\n        if (val.length() == sDateFmt.length() + 6) {\n            val = val + \":\" + secondFmt.format(defaultSeconds);\n        }\n        if (val.length() == sDateFmt.length() + 9) {\n            val = val + \":\" + msFmt.format(defaultMilliSeconds);\n        }\n        return dateFmt.parse(val);\n    }\n}\n",
		"id": "EvoSuiteBenchmark/109_pdfsam/src/main/java/jcmdline/DateTimeParamTest.java",
		"test_prompt": "// DateTimeParamTest.java\npackage jcmdline;\n\nimport java.text.DecimalFormat;\nimport java.text.ParseException;\nimport java.text.SimpleDateFormat;\nimport java.util.Collection;\nimport java.util.Date;\nimport java.util.Iterator;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link DateTimeParam}.\n* It contains ten unit test cases for the {@link DateTimeParam#getParseFormat()} method.\n*/\nclass DateTimeParamTest {"
	},
	{
		"original_code": "// TextUsageFormatter.java\n/*\n * TextUsageFormatter.java\n *\n * Classes:\n *   public   TextUsageFormatter\n *   \n * ***** BEGIN LICENSE BLOCK *****\n * Version: MPL 1.1\n *\n * The contents of this file are subject to the Mozilla Public License Version\n * 1.1 (the \"License\"); you may not use this file except in compliance with\n * the License. You may obtain a copy of the License at\n * http://www.mozilla.org/MPL/\n *\n * Software distributed under the License is distributed on an \"AS IS\" basis,\n * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License\n * for the specific language governing rights and limitations under the\n * License.\n *\n * The Original Code is the Java jcmdline (command line management) package.\n *\n * The Initial Developer of the Original Code is Lynne Lawrence.\n * \n * Portions created by the Initial Developer are Copyright (C) 2002\n * the Initial Developer. All Rights Reserved.\n *\n * Contributor(s):  Lynne Lawrence <lgl@visuallink.com>\n *\n * ***** END LICENSE BLOCK *****\n */\npackage jcmdline;\n\nimport java.util.ArrayList;\nimport java.util.Collections;\nimport java.util.Iterator;\nimport java.util.List;\nimport java.util.Map;\n\n/**\n * Used to format a command's usage.\n *\n * @author          Lynne Lawrence\n * @version         jcmdline Rel. @VERSION@ $Id: TextUsageFormatter.java,v 1.2 2002/12/07 14:22:06 lglawrence Exp $\n * @see CmdLineHandler\n */\npublic class TextUsageFormatter implements UsageFormatter {\n\n    /**\n     * the maximum line length to use for usage display - defaults to 80.\n     * @see #setLineLength(int) setLineLength()\n     * @see #getLineLength()\n     */\n    private int lineLength = 80;\n\n    /**\n     * a Helper for usage formatting\n     */\n    private StringFormatHelper sHelper = StringFormatHelper.getHelper();\n\n    /**\n     * constructor\n     */\n    public TextUsageFormatter() {\n    }\n\n    /**\n     * gets the usage for the command\n     *\n     * @param cmdName       the command name\n     * @param cmdDesc       the command description\n     * @param opts          a Map of command options; keys are the option\n     *                      tags, values are the option objects\n     * @param args          the command arguments\n     * @param showHidden    if <code>true</code>, hidden parameters will be\n     *                      displayed\n     * @return              the usage for the command\n     */\n    public String formatUsage(String cmdName, String cmdDesc, Map opts, List args, boolean showHidden) {\n        String s;\n        int maxExpectedStringLen = 2048;\n        StringBuffer sb = new StringBuffer(maxExpectedStringLen);\n        // Format command name and description\n        s = sHelper.formatHangingIndent(cmdName + \" - \" + cmdDesc, cmdName.length() + 3, lineLength);\n        sb.append(s + \"\\n\\n\");\n        // Format options and arguments\n        int lineStartIdx = sb.length();\n        sb.append(Strings.get(\"TextUsageFormatter.usage\")).append(\" \").append(cmdName).append(\" \");\n        if (opts.size() > 0) {\n            sb.append(haveRequiredOpt(opts) ? Strings.get(\"TextUsageFormatter.usageWReqOpt\") : Strings.get(\"TextUsageFormatter.usageWOReqOpt\")).append(\" \");\n        }\n        if (args.size() > 0) {\n            StringBuffer sb2 = argsOnOneLine(args, showHidden);\n            if (sb.length() - lineStartIdx + sb2.length() > lineLength) {\n                sb2 = argsOnSeparateLines(args, sb.length() - lineStartIdx, showHidden);\n            }\n            sb.append(sb2.toString()).append(\"\\n\").append(getArgDescriptions(args, showHidden));\n        }\n        if (opts.size() > 0) {\n            sb.append(\"\\n\\n\");\n            if (args.size() > 0) {\n                sb.append(Strings.get(\"TextUsageFormatter.optIntroWArgs\"));\n            } else {\n                sb.append(Strings.get(\"TextUsageFormatter.optIntroNoArgs\"));\n            }\n            sb.append(\"\\n\\n\").append(getOptDescriptions(opts, showHidden));\n            sb.append(\"\\n\\n\").append(sHelper.formatHangingIndent(Strings.get(\"TextUsageFormatter.stdOptionHelp\"), 0, lineLength));\n        }\n        return sb.toString();\n    }\n\n    /**\n     * Gets an error message, reformatted in a manner to \"go well with\"\n     * the usage statement.  This implementation returns:\n     * <pre>\n     *    ERROR: invalid filename\n     * </pre>\n     * when called as:\n     * <pre>\n     *    formatErrorMsg(\"invalid filename\")\n     * </pre>\n     *\n     * @param msg           the text of the error message\n     * @return              the reformatted error message\n     */\n    public String formatErrorMsg(String msg) {\n        String error = Strings.get(\"TextUsageFormatter.errorPrefix\");\n        return sHelper.formatHangingIndent(error + \" \" + msg, error.length() + 1, lineLength);\n    }\n\n    public String formatText(String text, int indent, int lineLen) {\n        return sHelper.formatBlockedText(text, indent, lineLen);\n    }\n\n    /**\n     * Sets the maximum line length to use for usage display - default is 80.\n     *\n     * @param lineLength      the maximum line length to use for usage display\n     * @see #getLineLength()\n     */\n    public void setLineLength(int lineLength) {\n        this.lineLength = lineLength;\n    }\n\n    /**\n     * Gets the maximum line length to use for usage display.\n     *\n     * @return              the maximum line length to use for usage display\n     * @see #setLineLength(int) setLineLength()\n     */\n    public int getLineLength() {\n        return lineLength;\n    }\n\n    /**\n     * Returns <code>true</code> if any of the command line options are\n     * required.\n     *\n     * @return              true if any option is required\n     */\n    private boolean haveRequiredOpt(Map options) {\n        boolean haveRequiredOpt = false;\n        for (Iterator itr = options.values().iterator(); itr.hasNext(); ) {\n            if (!((Parameter) itr.next()).isOptional()) {\n                haveRequiredOpt = true;\n                break;\n            }\n        }\n        return haveRequiredOpt;\n    }\n\n    /**\n     * Get command line arguments, one per line, with each line but the\n     * first having the specified indent.\n     *\n     * @param indent        the indent\n     * @return              the formatted arguments\n     */\n    private StringBuffer argsOnSeparateLines(List args, int indent, boolean showHidden) {\n        int maxExpectedStringLen = 240;\n        StringBuffer sb2 = new StringBuffer(maxExpectedStringLen);\n        Parameter p;\n        int optIdx = 0;\n        sb2 = new StringBuffer(maxExpectedStringLen);\n        for (Iterator itr = args.iterator(); itr.hasNext(); ) {\n            p = (Parameter) itr.next();\n            if (p.isHidden() && !showHidden) {\n                continue;\n            }\n            for (int i = 0; i < optIdx; i++) {\n                sb2.append(' ');\n            }\n            sb2.append(argTagToString(p)).append(\" \\\\\\n\");\n            optIdx = indent;\n        }\n        // trim off trailing space, backslash, and newline\n        return sb2.delete(sb2.length() - 3, sb2.length());\n    }\n\n    /**\n     * Get command line arguments, all on one line\n     *\n     * @return              the formatted arguments\n     */\n    private StringBuffer argsOnOneLine(List args, boolean showHidden) {\n        int maxExpectedStringLen = 800;\n        StringBuffer sb2 = new StringBuffer(maxExpectedStringLen);\n        Parameter p;\n        for (Iterator itr = args.iterator(); itr.hasNext(); ) {\n            p = (Parameter) itr.next();\n            if (p.isHidden() && !showHidden) {\n                continue;\n            }\n            sb2.append(argTagToString(p)).append(\" \");\n        }\n        // trim off trailing space\n        if (sb2.length() > 0) {\n            sb2.deleteCharAt(sb2.length() - 1);\n        }\n        return sb2;\n    }\n\n    /**\n     * Get a command line argument's tag, enclosing in brackets if optional,\n     * and twice, followed by '...', if multi-valued.\n     *\n     * @param p             the argument\n     * @return              the argument's tag, as a string\n     */\n    private String argTagToString(Parameter p) {\n        int maxExpectedStringLen = 50;\n        StringBuffer sb2 = new StringBuffer(maxExpectedStringLen);\n        String argstr;\n        if (p.isOptional()) {\n            argstr = \"[\" + p.getTag() + \"]\";\n        } else {\n            argstr = p.getTag();\n        }\n        sb2.append(argstr);\n        if (p.isMultiValued()) {\n            sb2.append(\",\" + argstr + \"...\");\n        }\n        return sb2.toString();\n    }\n\n    /**\n     * Gets the argument descriptions as a String.\n     *\n     * @param showHidden    true if hidden arguments are to be included.\n     * @return              the argument descriptions\n     */\n    private String getArgDescriptions(List args, boolean showHidden) {\n        StringBuffer sb = new StringBuffer(1024);\n        Parameter p;\n        if (args.size() == 0) {\n            return \"\";\n        }\n        sb.append(\"\\n\").append(Strings.get(\"TextUsageFormatter.where\")).append(\"\\n\\n\");\n        ArrayList tags = new ArrayList(args.size());\n        ArrayList desc = new ArrayList(args.size());\n        for (Iterator itr = args.iterator(); itr.hasNext(); ) {\n            p = (Parameter) itr.next();\n            if (p.isHidden() && !showHidden) {\n                continue;\n            }\n            tags.add(p.getTag());\n            desc.add(p.getDesc() + \" (\" + ((p.isOptional()) ? Strings.get(\"TextUsageFormatter.optional\") : Strings.get(\"TextUsageFormatter.required\")) + \")\" + ((p.isHidden()) ? (\" (\" + Strings.get(\"TextUsageFormatter.hidden\") + \")\") : \"\"));\n        }\n        sb.append(sHelper.formatLabeledList((String[]) tags.toArray(new String[tags.size()]), (String[]) desc.toArray(new String[desc.size()]), \" = \", 20, lineLength));\n        // remove trailing newline\n        return sb.deleteCharAt(sb.length() - 1).toString();\n    }\n\n    /**\n     * Gets the option descriptions as a String.\n     *\n     * @param showHidden    true if hidden options are to be included.\n     * @return              the option descriptions\n     */\n    private String getOptDescriptions(Map options, boolean showHidden) {\n        if (options.size() == 0) {\n            return \"\";\n        }\n        ArrayList sortedOptions = new ArrayList(options.keySet());\n        Collections.sort(sortedOptions);\n        ArrayList labels = new ArrayList(options.size());\n        ArrayList desc = new ArrayList(options.size());\n        Parameter p;\n        for (Iterator itr = sortedOptions.iterator(); itr.hasNext(); ) {\n            p = (Parameter) options.get(itr.next());\n            if (p.isHidden() && !showHidden) {\n                continue;\n            }\n            labels.add(\"-\" + p.getTag() + \" \" + p.getOptionLabel());\n            desc.add(p.getDesc() + \" (\" + ((p.isOptional()) ? Strings.get(\"TextUsageFormatter.optional\") : Strings.get(\"TextUsageFormatter.required\")) + \")\" + ((p.isHidden()) ? (\" (\" + Strings.get(\"TextUsageFormatter.hidden\") + \")\") : \"\"));\n        }\n        StringBuffer sb = new StringBuffer((sHelper.formatLabeledList((String[]) labels.toArray(new String[labels.size()]), (String[]) desc.toArray(new String[desc.size()]), \" \", 20, lineLength)));\n        // remove trailing newline\n        return sb.deleteCharAt(sb.length() - 1).toString();\n    }\n}\n",
		"id": "EvoSuiteBenchmark/109_pdfsam/src/main/java/jcmdline/TextUsageFormatterTest0.java",
		"test_prompt": "// TextUsageFormatterTest0.java\npackage jcmdline;\n\nimport java.util.ArrayList;\nimport java.util.Collections;\nimport java.util.Iterator;\nimport java.util.List;\nimport java.util.Map;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link TextUsageFormatter}.\n* It contains ten unit test cases for the {@link TextUsageFormatter#formatUsage(String, String, Map, List, boolean)} method.\n*/\nclass TextUsageFormatterTest0 {"
	},
	{
		"original_code": "// TextUsageFormatter.java\n/*\n * TextUsageFormatter.java\n *\n * Classes:\n *   public   TextUsageFormatter\n *   \n * ***** BEGIN LICENSE BLOCK *****\n * Version: MPL 1.1\n *\n * The contents of this file are subject to the Mozilla Public License Version\n * 1.1 (the \"License\"); you may not use this file except in compliance with\n * the License. You may obtain a copy of the License at\n * http://www.mozilla.org/MPL/\n *\n * Software distributed under the License is distributed on an \"AS IS\" basis,\n * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License\n * for the specific language governing rights and limitations under the\n * License.\n *\n * The Original Code is the Java jcmdline (command line management) package.\n *\n * The Initial Developer of the Original Code is Lynne Lawrence.\n * \n * Portions created by the Initial Developer are Copyright (C) 2002\n * the Initial Developer. All Rights Reserved.\n *\n * Contributor(s):  Lynne Lawrence <lgl@visuallink.com>\n *\n * ***** END LICENSE BLOCK *****\n */\npackage jcmdline;\n\nimport java.util.ArrayList;\nimport java.util.Collections;\nimport java.util.Iterator;\nimport java.util.List;\nimport java.util.Map;\n\n/**\n * Used to format a command's usage.\n *\n * @author          Lynne Lawrence\n * @version         jcmdline Rel. @VERSION@ $Id: TextUsageFormatter.java,v 1.2 2002/12/07 14:22:06 lglawrence Exp $\n * @see CmdLineHandler\n */\npublic class TextUsageFormatter implements UsageFormatter {\n\n    /**\n     * the maximum line length to use for usage display - defaults to 80.\n     * @see #setLineLength(int) setLineLength()\n     * @see #getLineLength()\n     */\n    private int lineLength = 80;\n\n    /**\n     * a Helper for usage formatting\n     */\n    private StringFormatHelper sHelper = StringFormatHelper.getHelper();\n\n    /**\n     * constructor\n     */\n    public TextUsageFormatter() {\n    }\n\n    /**\n     * gets the usage for the command\n     *\n     * @param cmdName       the command name\n     * @param cmdDesc       the command description\n     * @param opts          a Map of command options; keys are the option\n     *                      tags, values are the option objects\n     * @param args          the command arguments\n     * @param showHidden    if <code>true</code>, hidden parameters will be\n     *                      displayed\n     * @return              the usage for the command\n     */\n    public String formatUsage(String cmdName, String cmdDesc, Map opts, List args, boolean showHidden) {\n        String s;\n        int maxExpectedStringLen = 2048;\n        StringBuffer sb = new StringBuffer(maxExpectedStringLen);\n        // Format command name and description\n        s = sHelper.formatHangingIndent(cmdName + \" - \" + cmdDesc, cmdName.length() + 3, lineLength);\n        sb.append(s + \"\\n\\n\");\n        // Format options and arguments\n        int lineStartIdx = sb.length();\n        sb.append(Strings.get(\"TextUsageFormatter.usage\")).append(\" \").append(cmdName).append(\" \");\n        if (opts.size() > 0) {\n            sb.append(haveRequiredOpt(opts) ? Strings.get(\"TextUsageFormatter.usageWReqOpt\") : Strings.get(\"TextUsageFormatter.usageWOReqOpt\")).append(\" \");\n        }\n        if (args.size() > 0) {\n            StringBuffer sb2 = argsOnOneLine(args, showHidden);\n            if (sb.length() - lineStartIdx + sb2.length() > lineLength) {\n                sb2 = argsOnSeparateLines(args, sb.length() - lineStartIdx, showHidden);\n            }\n            sb.append(sb2.toString()).append(\"\\n\").append(getArgDescriptions(args, showHidden));\n        }\n        if (opts.size() > 0) {\n            sb.append(\"\\n\\n\");\n            if (args.size() > 0) {\n                sb.append(Strings.get(\"TextUsageFormatter.optIntroWArgs\"));\n            } else {\n                sb.append(Strings.get(\"TextUsageFormatter.optIntroNoArgs\"));\n            }\n            sb.append(\"\\n\\n\").append(getOptDescriptions(opts, showHidden));\n            sb.append(\"\\n\\n\").append(sHelper.formatHangingIndent(Strings.get(\"TextUsageFormatter.stdOptionHelp\"), 0, lineLength));\n        }\n        return sb.toString();\n    }\n\n    /**\n     * Gets an error message, reformatted in a manner to \"go well with\"\n     * the usage statement.  This implementation returns:\n     * <pre>\n     *    ERROR: invalid filename\n     * </pre>\n     * when called as:\n     * <pre>\n     *    formatErrorMsg(\"invalid filename\")\n     * </pre>\n     *\n     * @param msg           the text of the error message\n     * @return              the reformatted error message\n     */\n    public String formatErrorMsg(String msg) {\n        String error = Strings.get(\"TextUsageFormatter.errorPrefix\");\n        return sHelper.formatHangingIndent(error + \" \" + msg, error.length() + 1, lineLength);\n    }\n\n    public String formatText(String text, int indent, int lineLen) {\n        return sHelper.formatBlockedText(text, indent, lineLen);\n    }\n\n    /**\n     * Sets the maximum line length to use for usage display - default is 80.\n     *\n     * @param lineLength      the maximum line length to use for usage display\n     * @see #getLineLength()\n     */\n    public void setLineLength(int lineLength) {\n        this.lineLength = lineLength;\n    }\n\n    /**\n     * Gets the maximum line length to use for usage display.\n     *\n     * @return              the maximum line length to use for usage display\n     * @see #setLineLength(int) setLineLength()\n     */\n    public int getLineLength() {\n        return lineLength;\n    }\n\n    /**\n     * Returns <code>true</code> if any of the command line options are\n     * required.\n     *\n     * @return              true if any option is required\n     */\n    private boolean haveRequiredOpt(Map options) {\n        boolean haveRequiredOpt = false;\n        for (Iterator itr = options.values().iterator(); itr.hasNext(); ) {\n            if (!((Parameter) itr.next()).isOptional()) {\n                haveRequiredOpt = true;\n                break;\n            }\n        }\n        return haveRequiredOpt;\n    }\n\n    /**\n     * Get command line arguments, one per line, with each line but the\n     * first having the specified indent.\n     *\n     * @param indent        the indent\n     * @return              the formatted arguments\n     */\n    private StringBuffer argsOnSeparateLines(List args, int indent, boolean showHidden) {\n        int maxExpectedStringLen = 240;\n        StringBuffer sb2 = new StringBuffer(maxExpectedStringLen);\n        Parameter p;\n        int optIdx = 0;\n        sb2 = new StringBuffer(maxExpectedStringLen);\n        for (Iterator itr = args.iterator(); itr.hasNext(); ) {\n            p = (Parameter) itr.next();\n            if (p.isHidden() && !showHidden) {\n                continue;\n            }\n            for (int i = 0; i < optIdx; i++) {\n                sb2.append(' ');\n            }\n            sb2.append(argTagToString(p)).append(\" \\\\\\n\");\n            optIdx = indent;\n        }\n        // trim off trailing space, backslash, and newline\n        return sb2.delete(sb2.length() - 3, sb2.length());\n    }\n\n    /**\n     * Get command line arguments, all on one line\n     *\n     * @return              the formatted arguments\n     */\n    private StringBuffer argsOnOneLine(List args, boolean showHidden) {\n        int maxExpectedStringLen = 800;\n        StringBuffer sb2 = new StringBuffer(maxExpectedStringLen);\n        Parameter p;\n        for (Iterator itr = args.iterator(); itr.hasNext(); ) {\n            p = (Parameter) itr.next();\n            if (p.isHidden() && !showHidden) {\n                continue;\n            }\n            sb2.append(argTagToString(p)).append(\" \");\n        }\n        // trim off trailing space\n        if (sb2.length() > 0) {\n            sb2.deleteCharAt(sb2.length() - 1);\n        }\n        return sb2;\n    }\n\n    /**\n     * Get a command line argument's tag, enclosing in brackets if optional,\n     * and twice, followed by '...', if multi-valued.\n     *\n     * @param p             the argument\n     * @return              the argument's tag, as a string\n     */\n    private String argTagToString(Parameter p) {\n        int maxExpectedStringLen = 50;\n        StringBuffer sb2 = new StringBuffer(maxExpectedStringLen);\n        String argstr;\n        if (p.isOptional()) {\n            argstr = \"[\" + p.getTag() + \"]\";\n        } else {\n            argstr = p.getTag();\n        }\n        sb2.append(argstr);\n        if (p.isMultiValued()) {\n            sb2.append(\",\" + argstr + \"...\");\n        }\n        return sb2.toString();\n    }\n\n    /**\n     * Gets the argument descriptions as a String.\n     *\n     * @param showHidden    true if hidden arguments are to be included.\n     * @return              the argument descriptions\n     */\n    private String getArgDescriptions(List args, boolean showHidden) {\n        StringBuffer sb = new StringBuffer(1024);\n        Parameter p;\n        if (args.size() == 0) {\n            return \"\";\n        }\n        sb.append(\"\\n\").append(Strings.get(\"TextUsageFormatter.where\")).append(\"\\n\\n\");\n        ArrayList tags = new ArrayList(args.size());\n        ArrayList desc = new ArrayList(args.size());\n        for (Iterator itr = args.iterator(); itr.hasNext(); ) {\n            p = (Parameter) itr.next();\n            if (p.isHidden() && !showHidden) {\n                continue;\n            }\n            tags.add(p.getTag());\n            desc.add(p.getDesc() + \" (\" + ((p.isOptional()) ? Strings.get(\"TextUsageFormatter.optional\") : Strings.get(\"TextUsageFormatter.required\")) + \")\" + ((p.isHidden()) ? (\" (\" + Strings.get(\"TextUsageFormatter.hidden\") + \")\") : \"\"));\n        }\n        sb.append(sHelper.formatLabeledList((String[]) tags.toArray(new String[tags.size()]), (String[]) desc.toArray(new String[desc.size()]), \" = \", 20, lineLength));\n        // remove trailing newline\n        return sb.deleteCharAt(sb.length() - 1).toString();\n    }\n\n    /**\n     * Gets the option descriptions as a String.\n     *\n     * @param showHidden    true if hidden options are to be included.\n     * @return              the option descriptions\n     */\n    private String getOptDescriptions(Map options, boolean showHidden) {\n        if (options.size() == 0) {\n            return \"\";\n        }\n        ArrayList sortedOptions = new ArrayList(options.keySet());\n        Collections.sort(sortedOptions);\n        ArrayList labels = new ArrayList(options.size());\n        ArrayList desc = new ArrayList(options.size());\n        Parameter p;\n        for (Iterator itr = sortedOptions.iterator(); itr.hasNext(); ) {\n            p = (Parameter) options.get(itr.next());\n            if (p.isHidden() && !showHidden) {\n                continue;\n            }\n            labels.add(\"-\" + p.getTag() + \" \" + p.getOptionLabel());\n            desc.add(p.getDesc() + \" (\" + ((p.isOptional()) ? Strings.get(\"TextUsageFormatter.optional\") : Strings.get(\"TextUsageFormatter.required\")) + \")\" + ((p.isHidden()) ? (\" (\" + Strings.get(\"TextUsageFormatter.hidden\") + \")\") : \"\"));\n        }\n        StringBuffer sb = new StringBuffer((sHelper.formatLabeledList((String[]) labels.toArray(new String[labels.size()]), (String[]) desc.toArray(new String[desc.size()]), \" \", 20, lineLength)));\n        // remove trailing newline\n        return sb.deleteCharAt(sb.length() - 1).toString();\n    }\n}\n",
		"id": "EvoSuiteBenchmark/109_pdfsam/src/main/java/jcmdline/TextUsageFormatterTest1.java",
		"test_prompt": "// TextUsageFormatterTest1.java\npackage jcmdline;\n\nimport java.util.ArrayList;\nimport java.util.Collections;\nimport java.util.Iterator;\nimport java.util.List;\nimport java.util.Map;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link TextUsageFormatter}.\n* It contains ten unit test cases for the {@link TextUsageFormatter#formatErrorMsg(String)} method.\n*/\nclass TextUsageFormatterTest1 {"
	},
	{
		"original_code": "// TextUsageFormatter.java\n/*\n * TextUsageFormatter.java\n *\n * Classes:\n *   public   TextUsageFormatter\n *   \n * ***** BEGIN LICENSE BLOCK *****\n * Version: MPL 1.1\n *\n * The contents of this file are subject to the Mozilla Public License Version\n * 1.1 (the \"License\"); you may not use this file except in compliance with\n * the License. You may obtain a copy of the License at\n * http://www.mozilla.org/MPL/\n *\n * Software distributed under the License is distributed on an \"AS IS\" basis,\n * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License\n * for the specific language governing rights and limitations under the\n * License.\n *\n * The Original Code is the Java jcmdline (command line management) package.\n *\n * The Initial Developer of the Original Code is Lynne Lawrence.\n * \n * Portions created by the Initial Developer are Copyright (C) 2002\n * the Initial Developer. All Rights Reserved.\n *\n * Contributor(s):  Lynne Lawrence <lgl@visuallink.com>\n *\n * ***** END LICENSE BLOCK *****\n */\npackage jcmdline;\n\nimport java.util.ArrayList;\nimport java.util.Collections;\nimport java.util.Iterator;\nimport java.util.List;\nimport java.util.Map;\n\n/**\n * Used to format a command's usage.\n *\n * @author          Lynne Lawrence\n * @version         jcmdline Rel. @VERSION@ $Id: TextUsageFormatter.java,v 1.2 2002/12/07 14:22:06 lglawrence Exp $\n * @see CmdLineHandler\n */\npublic class TextUsageFormatter implements UsageFormatter {\n\n    /**\n     * the maximum line length to use for usage display - defaults to 80.\n     * @see #setLineLength(int) setLineLength()\n     * @see #getLineLength()\n     */\n    private int lineLength = 80;\n\n    /**\n     * a Helper for usage formatting\n     */\n    private StringFormatHelper sHelper = StringFormatHelper.getHelper();\n\n    /**\n     * constructor\n     */\n    public TextUsageFormatter() {\n    }\n\n    /**\n     * gets the usage for the command\n     *\n     * @param cmdName       the command name\n     * @param cmdDesc       the command description\n     * @param opts          a Map of command options; keys are the option\n     *                      tags, values are the option objects\n     * @param args          the command arguments\n     * @param showHidden    if <code>true</code>, hidden parameters will be\n     *                      displayed\n     * @return              the usage for the command\n     */\n    public String formatUsage(String cmdName, String cmdDesc, Map opts, List args, boolean showHidden) {\n        String s;\n        int maxExpectedStringLen = 2048;\n        StringBuffer sb = new StringBuffer(maxExpectedStringLen);\n        // Format command name and description\n        s = sHelper.formatHangingIndent(cmdName + \" - \" + cmdDesc, cmdName.length() + 3, lineLength);\n        sb.append(s + \"\\n\\n\");\n        // Format options and arguments\n        int lineStartIdx = sb.length();\n        sb.append(Strings.get(\"TextUsageFormatter.usage\")).append(\" \").append(cmdName).append(\" \");\n        if (opts.size() > 0) {\n            sb.append(haveRequiredOpt(opts) ? Strings.get(\"TextUsageFormatter.usageWReqOpt\") : Strings.get(\"TextUsageFormatter.usageWOReqOpt\")).append(\" \");\n        }\n        if (args.size() > 0) {\n            StringBuffer sb2 = argsOnOneLine(args, showHidden);\n            if (sb.length() - lineStartIdx + sb2.length() > lineLength) {\n                sb2 = argsOnSeparateLines(args, sb.length() - lineStartIdx, showHidden);\n            }\n            sb.append(sb2.toString()).append(\"\\n\").append(getArgDescriptions(args, showHidden));\n        }\n        if (opts.size() > 0) {\n            sb.append(\"\\n\\n\");\n            if (args.size() > 0) {\n                sb.append(Strings.get(\"TextUsageFormatter.optIntroWArgs\"));\n            } else {\n                sb.append(Strings.get(\"TextUsageFormatter.optIntroNoArgs\"));\n            }\n            sb.append(\"\\n\\n\").append(getOptDescriptions(opts, showHidden));\n            sb.append(\"\\n\\n\").append(sHelper.formatHangingIndent(Strings.get(\"TextUsageFormatter.stdOptionHelp\"), 0, lineLength));\n        }\n        return sb.toString();\n    }\n\n    /**\n     * Gets an error message, reformatted in a manner to \"go well with\"\n     * the usage statement.  This implementation returns:\n     * <pre>\n     *    ERROR: invalid filename\n     * </pre>\n     * when called as:\n     * <pre>\n     *    formatErrorMsg(\"invalid filename\")\n     * </pre>\n     *\n     * @param msg           the text of the error message\n     * @return              the reformatted error message\n     */\n    public String formatErrorMsg(String msg) {\n        String error = Strings.get(\"TextUsageFormatter.errorPrefix\");\n        return sHelper.formatHangingIndent(error + \" \" + msg, error.length() + 1, lineLength);\n    }\n\n    public String formatText(String text, int indent, int lineLen) {\n        return sHelper.formatBlockedText(text, indent, lineLen);\n    }\n\n    /**\n     * Sets the maximum line length to use for usage display - default is 80.\n     *\n     * @param lineLength      the maximum line length to use for usage display\n     * @see #getLineLength()\n     */\n    public void setLineLength(int lineLength) {\n        this.lineLength = lineLength;\n    }\n\n    /**\n     * Gets the maximum line length to use for usage display.\n     *\n     * @return              the maximum line length to use for usage display\n     * @see #setLineLength(int) setLineLength()\n     */\n    public int getLineLength() {\n        return lineLength;\n    }\n\n    /**\n     * Returns <code>true</code> if any of the command line options are\n     * required.\n     *\n     * @return              true if any option is required\n     */\n    private boolean haveRequiredOpt(Map options) {\n        boolean haveRequiredOpt = false;\n        for (Iterator itr = options.values().iterator(); itr.hasNext(); ) {\n            if (!((Parameter) itr.next()).isOptional()) {\n                haveRequiredOpt = true;\n                break;\n            }\n        }\n        return haveRequiredOpt;\n    }\n\n    /**\n     * Get command line arguments, one per line, with each line but the\n     * first having the specified indent.\n     *\n     * @param indent        the indent\n     * @return              the formatted arguments\n     */\n    private StringBuffer argsOnSeparateLines(List args, int indent, boolean showHidden) {\n        int maxExpectedStringLen = 240;\n        StringBuffer sb2 = new StringBuffer(maxExpectedStringLen);\n        Parameter p;\n        int optIdx = 0;\n        sb2 = new StringBuffer(maxExpectedStringLen);\n        for (Iterator itr = args.iterator(); itr.hasNext(); ) {\n            p = (Parameter) itr.next();\n            if (p.isHidden() && !showHidden) {\n                continue;\n            }\n            for (int i = 0; i < optIdx; i++) {\n                sb2.append(' ');\n            }\n            sb2.append(argTagToString(p)).append(\" \\\\\\n\");\n            optIdx = indent;\n        }\n        // trim off trailing space, backslash, and newline\n        return sb2.delete(sb2.length() - 3, sb2.length());\n    }\n\n    /**\n     * Get command line arguments, all on one line\n     *\n     * @return              the formatted arguments\n     */\n    private StringBuffer argsOnOneLine(List args, boolean showHidden) {\n        int maxExpectedStringLen = 800;\n        StringBuffer sb2 = new StringBuffer(maxExpectedStringLen);\n        Parameter p;\n        for (Iterator itr = args.iterator(); itr.hasNext(); ) {\n            p = (Parameter) itr.next();\n            if (p.isHidden() && !showHidden) {\n                continue;\n            }\n            sb2.append(argTagToString(p)).append(\" \");\n        }\n        // trim off trailing space\n        if (sb2.length() > 0) {\n            sb2.deleteCharAt(sb2.length() - 1);\n        }\n        return sb2;\n    }\n\n    /**\n     * Get a command line argument's tag, enclosing in brackets if optional,\n     * and twice, followed by '...', if multi-valued.\n     *\n     * @param p             the argument\n     * @return              the argument's tag, as a string\n     */\n    private String argTagToString(Parameter p) {\n        int maxExpectedStringLen = 50;\n        StringBuffer sb2 = new StringBuffer(maxExpectedStringLen);\n        String argstr;\n        if (p.isOptional()) {\n            argstr = \"[\" + p.getTag() + \"]\";\n        } else {\n            argstr = p.getTag();\n        }\n        sb2.append(argstr);\n        if (p.isMultiValued()) {\n            sb2.append(\",\" + argstr + \"...\");\n        }\n        return sb2.toString();\n    }\n\n    /**\n     * Gets the argument descriptions as a String.\n     *\n     * @param showHidden    true if hidden arguments are to be included.\n     * @return              the argument descriptions\n     */\n    private String getArgDescriptions(List args, boolean showHidden) {\n        StringBuffer sb = new StringBuffer(1024);\n        Parameter p;\n        if (args.size() == 0) {\n            return \"\";\n        }\n        sb.append(\"\\n\").append(Strings.get(\"TextUsageFormatter.where\")).append(\"\\n\\n\");\n        ArrayList tags = new ArrayList(args.size());\n        ArrayList desc = new ArrayList(args.size());\n        for (Iterator itr = args.iterator(); itr.hasNext(); ) {\n            p = (Parameter) itr.next();\n            if (p.isHidden() && !showHidden) {\n                continue;\n            }\n            tags.add(p.getTag());\n            desc.add(p.getDesc() + \" (\" + ((p.isOptional()) ? Strings.get(\"TextUsageFormatter.optional\") : Strings.get(\"TextUsageFormatter.required\")) + \")\" + ((p.isHidden()) ? (\" (\" + Strings.get(\"TextUsageFormatter.hidden\") + \")\") : \"\"));\n        }\n        sb.append(sHelper.formatLabeledList((String[]) tags.toArray(new String[tags.size()]), (String[]) desc.toArray(new String[desc.size()]), \" = \", 20, lineLength));\n        // remove trailing newline\n        return sb.deleteCharAt(sb.length() - 1).toString();\n    }\n\n    /**\n     * Gets the option descriptions as a String.\n     *\n     * @param showHidden    true if hidden options are to be included.\n     * @return              the option descriptions\n     */\n    private String getOptDescriptions(Map options, boolean showHidden) {\n        if (options.size() == 0) {\n            return \"\";\n        }\n        ArrayList sortedOptions = new ArrayList(options.keySet());\n        Collections.sort(sortedOptions);\n        ArrayList labels = new ArrayList(options.size());\n        ArrayList desc = new ArrayList(options.size());\n        Parameter p;\n        for (Iterator itr = sortedOptions.iterator(); itr.hasNext(); ) {\n            p = (Parameter) options.get(itr.next());\n            if (p.isHidden() && !showHidden) {\n                continue;\n            }\n            labels.add(\"-\" + p.getTag() + \" \" + p.getOptionLabel());\n            desc.add(p.getDesc() + \" (\" + ((p.isOptional()) ? Strings.get(\"TextUsageFormatter.optional\") : Strings.get(\"TextUsageFormatter.required\")) + \")\" + ((p.isHidden()) ? (\" (\" + Strings.get(\"TextUsageFormatter.hidden\") + \")\") : \"\"));\n        }\n        StringBuffer sb = new StringBuffer((sHelper.formatLabeledList((String[]) labels.toArray(new String[labels.size()]), (String[]) desc.toArray(new String[desc.size()]), \" \", 20, lineLength)));\n        // remove trailing newline\n        return sb.deleteCharAt(sb.length() - 1).toString();\n    }\n}\n",
		"id": "EvoSuiteBenchmark/109_pdfsam/src/main/java/jcmdline/TextUsageFormatterTest2.java",
		"test_prompt": "// TextUsageFormatterTest2.java\npackage jcmdline;\n\nimport java.util.ArrayList;\nimport java.util.Collections;\nimport java.util.Iterator;\nimport java.util.List;\nimport java.util.Map;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link TextUsageFormatter}.\n* It contains ten unit test cases for the {@link TextUsageFormatter#formatText(String, int, int)} method.\n*/\nclass TextUsageFormatterTest2 {"
	},
	{
		"original_code": "// StringFormatHelper.java\n/*\n * StringFormatHelper.java\n *\n * jcmdline Rel. @VERSION@ $Id: StringFormatHelper.java,v 1.2 2002/12/07 14:22:06 lglawrence Exp $\n *\n * Classes:\n *   public   StringFormatHelper\n *   \n * ***** BEGIN LICENSE BLOCK *****\n * Version: MPL 1.1\n *\n * The contents of this file are subject to the Mozilla Public License Version\n * 1.1 (the \"License\"); you may not use this file except in compliance with\n * the License. You may obtain a copy of the License at\n * http://www.mozilla.org/MPL/\n *\n * Software distributed under the License is distributed on an \"AS IS\" basis,\n * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License\n * for the specific language governing rights and limitations under the\n * License.\n *\n * The Original Code is the Java jcmdline (command line management) package.\n *\n * The Initial Developer of the Original Code is Lynne Lawrence.\n * \n * Portions created by the Initial Developer are Copyright (C) 2002\n * the Initial Developer. All Rights Reserved.\n *\n * Contributor(s):  Lynne Lawrence <lgl@visuallink.com>\n *\n * ***** END LICENSE BLOCK *****\n */\npackage jcmdline;\n\n/**\n * A class used to facilitate common String formatting tasks.\n * <P>\n * Objects of this class contain no data.  As such, this class is\n * implemented as a Singleton.\n *\n * @author          Lynne Lawrence\n * @version         jcmdline Rel. @VERSION@ $Id: StringFormatHelper.java,v 1.2 2002/12/07 14:22:06 lglawrence Exp $\n */\npublic class StringFormatHelper {\n\n    /**\n     * The one and only instance of the StringFormatHelper\n     */\n    private static StringFormatHelper helper;\n\n    /**\n     * constructor - private\n     */\n    private StringFormatHelper() {\n    }\n\n    /**\n     * Gets the one and only instance of the StringFormatHelper\n     * @return              the one and only instance of the StringFormatHelper\n     */\n    public static StringFormatHelper getHelper() {\n        if (helper == null) {\n            helper = new StringFormatHelper();\n        }\n        return helper;\n    }\n\n    /**\n     * Formats a string with a hanging indent.\n     * <P>The returned String is formated such that:\n     * <ul>\n     * <li>all lines it contains have length &lt;= <code>lineLen</code>\n     * <li>all lines except for the first on are indented <code>indent</code>\n     *     spaces\n     * </ul>\n     *\n     * @param indent        the number of spaces to indent all but the\n     *                      first line (may be 0)\n     * @param lineLen     the maximum line length\n     * @param s             the string to be formatted\n     * @return              the formatted string\n     * @throws  IllegalArgumentException if <code>lineLen</code> is less than\n     *          <code>indent</code> or if <code>lineLen</code> is less than 0.\n     */\n    public String formatHangingIndent(String s, int indent, int lineLen) {\n        if (s == null || s.length() == 0) {\n            return \"\";\n        }\n        if (lineLen <= indent) {\n            throw new IllegalArgumentException(Strings.get(\"StringFormatHelper.lineLenLessThanIndent\"));\n        }\n        if (lineLen <= 0) {\n            throw new IllegalArgumentException(Strings.get(\"StringFormatHelper.lineLenZero\"));\n        }\n        // guesstimate required buffer length, leaving enough room for line\n        // terminators\n        StringBuffer sb = new StringBuffer(s.length() + (s.length() / lineLen - indent) + 20);\n        String[] a = breakString(s, lineLen);\n        sb.append(a[0]);\n        if (a[1] != null) {\n            sb.append(formatBlockedText(a[1], indent, lineLen));\n        }\n        return sb.toString();\n    }\n\n    /**\n     * Splits the specified String into lines that are indented by the\n     * specified indent and are of length less than or equal to the\n     * specified line length.\n     * <P>\n     * If <code>s</code> is null or empty, an empty String is returned.\n     *\n     * @param s             the String to be formatted\n     * @param indent        the length of the indent for the text block\n     * @param lineLen       the maximum line length for the text block,\n     *                      including the indent\n     * @return              the formatted text block\n     * @throws  IllegalArgumentException if <code>lineLen</code> is less than\n     *          <code>indent</code> or if <code>lineLen</code> is less than 0.\n     */\n    public String formatBlockedText(String s, int indent, int lineLen) {\n        if (s == null || s.length() == 0) {\n            return \"\";\n        }\n        if (lineLen <= indent) {\n            throw new IllegalArgumentException(Strings.get(\"StringFormatHelper.lineLenLessThanIndent\"));\n        }\n        if (lineLen <= 0) {\n            throw new IllegalArgumentException(Strings.get(\"StringFormatHelper.lineLenZero\"));\n        }\n        // guesstimate required buffer length, leaving enough room for line\n        // terminators\n        StringBuffer sb = new StringBuffer(s.length() + (s.length() / lineLen - indent) + 20);\n        StringBuffer indentBuf = new StringBuffer(indent);\n        for (int i = 0; i < indent; i++) {\n            indentBuf.append(\" \");\n        }\n        int splitLen = lineLen - indent;\n        String[] a = breakString(s, splitLen);\n        while (a[1] != null) {\n            sb.append(indentBuf).append(a[0]);\n            a = breakString(a[1], splitLen);\n        }\n        sb.append(indentBuf).append(a[0]);\n        return sb.toString();\n    }\n\n    /**\n     * Breaks a String along word boundarys to the specified maximum length.\n     * <p>\n     * This method returns an array of two strings:\n     * <p>\n     * The first String is a line, of length less than <code>maxLen</code>.\n     * If this String is not the entire passed String, it will\n     * be terminated with a newline.\n     * <P>\n     * The second String is the remainder of the original String.  If the\n     * original String had been broken on a space (as opposed to a newline\n     * that had been in the original String) all leading spaces will have\n     * been removed.  If there is no remainder, null is returned as the\n     * second String and no newline will have been appended to the first\n     * String.\n     *\n     * @param s             The String to be broken.  If null, will be\n     *                      converted to an empty string.\n     * @param maxLen        the maximum line length of the first returned\n     *                      string\n     * @return              see the method description\n     */\n    protected String[] breakString(String s, int maxLen) {\n        s = (s == null) ? \"\" : s;\n        String line = null;\n        String remainder = null;\n        int idx;\n        if ((idx = s.indexOf('\\n')) != -1 && idx <= maxLen) {\n            // point to next char\n            idx++;\n            line = s.substring(0, idx);\n            if (idx < s.length()) {\n                remainder = s.substring(idx);\n            }\n        } else if (s.length() <= maxLen) {\n            line = s;\n        } else if ((idx = s.lastIndexOf(' ', maxLen)) != -1) {\n            line = s.substring(0, idx);\n            while (idx < s.length() && s.charAt(idx) == ' ') {\n                idx++;\n            }\n            if (idx < s.length()) {\n                line += \"\\n\";\n                remainder = s.substring(idx);\n            }\n        } else {\n            line = s.substring(0, maxLen) + \"\\n\";\n            remainder = s.substring(maxLen);\n        }\n        return new String[] { line, remainder };\n    }\n\n    /**\n     * Formats a \"labeled list\" (like a bullet or numbered list, only with\n     * labels for each item).\n     * <P>\n     * Example:\n     * <p><pre>\n     * System.out.println(formatLabeledList(\n     *    new String[] { \"old_file\", \"new_file\" },\n     *    new String[] { \"the name of the file to copy - this file \" +\n     *                       \"must already exist, be readable, and \" +\n     *                       \"end with '.html'\",\n     *                   \"the name of the file to receive the copy\" },\n     *    \" = \", 20, 80));\n     * </pre>\n     * produces....\n     * <pre>\n     * old_file = the name of the file to copy - this file must already exist, be\n     *            readable, and end with '.html'\n     * new_file = the name of the file to copy to\n     * </pre>\n     *\n     * @param labels        An array of labels.\n     * @param texts         An array of texts to go with the labels.\n     * @param divider       The divider to go between the labels and texts.  This\n     *                      will be right-aligned against the texts.\n     * @param maxIndent     Specifies the maximum indent for the text to be\n     *                      written out.  If the combination of a label and\n     *                      divider is longer than maxIndent, the text will\n     *                      be written out in a block starting on the line\n     *                      following the label and divider, rather than on the\n     *                      same line.\n     * @param lineLen       The maximum length of returned lines.\n     * @return              The formatted list.  It will be terminated with a\n     *                      newline.\n     * @throws  IllegalArgumentException if <code>labels</code> and <code>text\n     *          </code> do not have the same number of elements.\n     */\n    public String formatLabeledList(String[] labels, String[] texts, String divider, int maxIndent, int lineLen) {\n        if (labels.length != texts.length) {\n            throw new IllegalArgumentException(Strings.get(\"StringFormatHelper.labelDescriptionError\", new Object[] { new Integer(labels.length), new Integer(texts.length) }));\n        }\n        // Figure out description indents\n        int indent = 0;\n        int dividerlen = divider.length();\n        int currlen;\n        for (int i = 0; i < labels.length; i++) {\n            currlen = labels[i].length() + dividerlen;\n            if (currlen > maxIndent) {\n                continue;\n            } else if (currlen > indent) {\n                indent = currlen;\n            }\n        }\n        // All labels+divider > maxIndent? - use indent of 10\n        indent = (indent == 0) ? 10 : indent;\n        // will fit 20 80-char lines without expansion\n        StringBuffer list = new StringBuffer(1600);\n        // will fit 5 lines per list item without expansion\n        StringBuffer item = new StringBuffer(400);\n        for (int i = 0; i < labels.length; i++) {\n            item.delete(0, item.length());\n            item.append(labels[i]);\n            int spacefill = indent - divider.length();\n            while (item.length() < spacefill) {\n                item.append(' ');\n            }\n            item.append(divider);\n            if (item.length() > indent) {\n                item.append(\"\\n\");\n            }\n            item.append(texts[i]);\n            list.append(formatHangingIndent(item.toString() + \"\\n\", indent, lineLen));\n        }\n        return list.toString();\n    }\n}\n",
		"id": "EvoSuiteBenchmark/109_pdfsam/src/main/java/jcmdline/StringFormatHelperTest0.java",
		"test_prompt": "// StringFormatHelperTest0.java\npackage jcmdline;\n\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link StringFormatHelper}.\n* It contains ten unit test cases for the {@link StringFormatHelper#getHelper()} method.\n*/\nclass StringFormatHelperTest0 {"
	},
	{
		"original_code": "// StringFormatHelper.java\n/*\n * StringFormatHelper.java\n *\n * jcmdline Rel. @VERSION@ $Id: StringFormatHelper.java,v 1.2 2002/12/07 14:22:06 lglawrence Exp $\n *\n * Classes:\n *   public   StringFormatHelper\n *   \n * ***** BEGIN LICENSE BLOCK *****\n * Version: MPL 1.1\n *\n * The contents of this file are subject to the Mozilla Public License Version\n * 1.1 (the \"License\"); you may not use this file except in compliance with\n * the License. You may obtain a copy of the License at\n * http://www.mozilla.org/MPL/\n *\n * Software distributed under the License is distributed on an \"AS IS\" basis,\n * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License\n * for the specific language governing rights and limitations under the\n * License.\n *\n * The Original Code is the Java jcmdline (command line management) package.\n *\n * The Initial Developer of the Original Code is Lynne Lawrence.\n * \n * Portions created by the Initial Developer are Copyright (C) 2002\n * the Initial Developer. All Rights Reserved.\n *\n * Contributor(s):  Lynne Lawrence <lgl@visuallink.com>\n *\n * ***** END LICENSE BLOCK *****\n */\npackage jcmdline;\n\n/**\n * A class used to facilitate common String formatting tasks.\n * <P>\n * Objects of this class contain no data.  As such, this class is\n * implemented as a Singleton.\n *\n * @author          Lynne Lawrence\n * @version         jcmdline Rel. @VERSION@ $Id: StringFormatHelper.java,v 1.2 2002/12/07 14:22:06 lglawrence Exp $\n */\npublic class StringFormatHelper {\n\n    /**\n     * The one and only instance of the StringFormatHelper\n     */\n    private static StringFormatHelper helper;\n\n    /**\n     * constructor - private\n     */\n    private StringFormatHelper() {\n    }\n\n    /**\n     * Gets the one and only instance of the StringFormatHelper\n     * @return              the one and only instance of the StringFormatHelper\n     */\n    public static StringFormatHelper getHelper() {\n        if (helper == null) {\n            helper = new StringFormatHelper();\n        }\n        return helper;\n    }\n\n    /**\n     * Formats a string with a hanging indent.\n     * <P>The returned String is formated such that:\n     * <ul>\n     * <li>all lines it contains have length &lt;= <code>lineLen</code>\n     * <li>all lines except for the first on are indented <code>indent</code>\n     *     spaces\n     * </ul>\n     *\n     * @param indent        the number of spaces to indent all but the\n     *                      first line (may be 0)\n     * @param lineLen     the maximum line length\n     * @param s             the string to be formatted\n     * @return              the formatted string\n     * @throws  IllegalArgumentException if <code>lineLen</code> is less than\n     *          <code>indent</code> or if <code>lineLen</code> is less than 0.\n     */\n    public String formatHangingIndent(String s, int indent, int lineLen) {\n        if (s == null || s.length() == 0) {\n            return \"\";\n        }\n        if (lineLen <= indent) {\n            throw new IllegalArgumentException(Strings.get(\"StringFormatHelper.lineLenLessThanIndent\"));\n        }\n        if (lineLen <= 0) {\n            throw new IllegalArgumentException(Strings.get(\"StringFormatHelper.lineLenZero\"));\n        }\n        // guesstimate required buffer length, leaving enough room for line\n        // terminators\n        StringBuffer sb = new StringBuffer(s.length() + (s.length() / lineLen - indent) + 20);\n        String[] a = breakString(s, lineLen);\n        sb.append(a[0]);\n        if (a[1] != null) {\n            sb.append(formatBlockedText(a[1], indent, lineLen));\n        }\n        return sb.toString();\n    }\n\n    /**\n     * Splits the specified String into lines that are indented by the\n     * specified indent and are of length less than or equal to the\n     * specified line length.\n     * <P>\n     * If <code>s</code> is null or empty, an empty String is returned.\n     *\n     * @param s             the String to be formatted\n     * @param indent        the length of the indent for the text block\n     * @param lineLen       the maximum line length for the text block,\n     *                      including the indent\n     * @return              the formatted text block\n     * @throws  IllegalArgumentException if <code>lineLen</code> is less than\n     *          <code>indent</code> or if <code>lineLen</code> is less than 0.\n     */\n    public String formatBlockedText(String s, int indent, int lineLen) {\n        if (s == null || s.length() == 0) {\n            return \"\";\n        }\n        if (lineLen <= indent) {\n            throw new IllegalArgumentException(Strings.get(\"StringFormatHelper.lineLenLessThanIndent\"));\n        }\n        if (lineLen <= 0) {\n            throw new IllegalArgumentException(Strings.get(\"StringFormatHelper.lineLenZero\"));\n        }\n        // guesstimate required buffer length, leaving enough room for line\n        // terminators\n        StringBuffer sb = new StringBuffer(s.length() + (s.length() / lineLen - indent) + 20);\n        StringBuffer indentBuf = new StringBuffer(indent);\n        for (int i = 0; i < indent; i++) {\n            indentBuf.append(\" \");\n        }\n        int splitLen = lineLen - indent;\n        String[] a = breakString(s, splitLen);\n        while (a[1] != null) {\n            sb.append(indentBuf).append(a[0]);\n            a = breakString(a[1], splitLen);\n        }\n        sb.append(indentBuf).append(a[0]);\n        return sb.toString();\n    }\n\n    /**\n     * Breaks a String along word boundarys to the specified maximum length.\n     * <p>\n     * This method returns an array of two strings:\n     * <p>\n     * The first String is a line, of length less than <code>maxLen</code>.\n     * If this String is not the entire passed String, it will\n     * be terminated with a newline.\n     * <P>\n     * The second String is the remainder of the original String.  If the\n     * original String had been broken on a space (as opposed to a newline\n     * that had been in the original String) all leading spaces will have\n     * been removed.  If there is no remainder, null is returned as the\n     * second String and no newline will have been appended to the first\n     * String.\n     *\n     * @param s             The String to be broken.  If null, will be\n     *                      converted to an empty string.\n     * @param maxLen        the maximum line length of the first returned\n     *                      string\n     * @return              see the method description\n     */\n    protected String[] breakString(String s, int maxLen) {\n        s = (s == null) ? \"\" : s;\n        String line = null;\n        String remainder = null;\n        int idx;\n        if ((idx = s.indexOf('\\n')) != -1 && idx <= maxLen) {\n            // point to next char\n            idx++;\n            line = s.substring(0, idx);\n            if (idx < s.length()) {\n                remainder = s.substring(idx);\n            }\n        } else if (s.length() <= maxLen) {\n            line = s;\n        } else if ((idx = s.lastIndexOf(' ', maxLen)) != -1) {\n            line = s.substring(0, idx);\n            while (idx < s.length() && s.charAt(idx) == ' ') {\n                idx++;\n            }\n            if (idx < s.length()) {\n                line += \"\\n\";\n                remainder = s.substring(idx);\n            }\n        } else {\n            line = s.substring(0, maxLen) + \"\\n\";\n            remainder = s.substring(maxLen);\n        }\n        return new String[] { line, remainder };\n    }\n\n    /**\n     * Formats a \"labeled list\" (like a bullet or numbered list, only with\n     * labels for each item).\n     * <P>\n     * Example:\n     * <p><pre>\n     * System.out.println(formatLabeledList(\n     *    new String[] { \"old_file\", \"new_file\" },\n     *    new String[] { \"the name of the file to copy - this file \" +\n     *                       \"must already exist, be readable, and \" +\n     *                       \"end with '.html'\",\n     *                   \"the name of the file to receive the copy\" },\n     *    \" = \", 20, 80));\n     * </pre>\n     * produces....\n     * <pre>\n     * old_file = the name of the file to copy - this file must already exist, be\n     *            readable, and end with '.html'\n     * new_file = the name of the file to copy to\n     * </pre>\n     *\n     * @param labels        An array of labels.\n     * @param texts         An array of texts to go with the labels.\n     * @param divider       The divider to go between the labels and texts.  This\n     *                      will be right-aligned against the texts.\n     * @param maxIndent     Specifies the maximum indent for the text to be\n     *                      written out.  If the combination of a label and\n     *                      divider is longer than maxIndent, the text will\n     *                      be written out in a block starting on the line\n     *                      following the label and divider, rather than on the\n     *                      same line.\n     * @param lineLen       The maximum length of returned lines.\n     * @return              The formatted list.  It will be terminated with a\n     *                      newline.\n     * @throws  IllegalArgumentException if <code>labels</code> and <code>text\n     *          </code> do not have the same number of elements.\n     */\n    public String formatLabeledList(String[] labels, String[] texts, String divider, int maxIndent, int lineLen) {\n        if (labels.length != texts.length) {\n            throw new IllegalArgumentException(Strings.get(\"StringFormatHelper.labelDescriptionError\", new Object[] { new Integer(labels.length), new Integer(texts.length) }));\n        }\n        // Figure out description indents\n        int indent = 0;\n        int dividerlen = divider.length();\n        int currlen;\n        for (int i = 0; i < labels.length; i++) {\n            currlen = labels[i].length() + dividerlen;\n            if (currlen > maxIndent) {\n                continue;\n            } else if (currlen > indent) {\n                indent = currlen;\n            }\n        }\n        // All labels+divider > maxIndent? - use indent of 10\n        indent = (indent == 0) ? 10 : indent;\n        // will fit 20 80-char lines without expansion\n        StringBuffer list = new StringBuffer(1600);\n        // will fit 5 lines per list item without expansion\n        StringBuffer item = new StringBuffer(400);\n        for (int i = 0; i < labels.length; i++) {\n            item.delete(0, item.length());\n            item.append(labels[i]);\n            int spacefill = indent - divider.length();\n            while (item.length() < spacefill) {\n                item.append(' ');\n            }\n            item.append(divider);\n            if (item.length() > indent) {\n                item.append(\"\\n\");\n            }\n            item.append(texts[i]);\n            list.append(formatHangingIndent(item.toString() + \"\\n\", indent, lineLen));\n        }\n        return list.toString();\n    }\n}\n",
		"id": "EvoSuiteBenchmark/109_pdfsam/src/main/java/jcmdline/StringFormatHelperTest1.java",
		"test_prompt": "// StringFormatHelperTest1.java\npackage jcmdline;\n\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link StringFormatHelper}.\n* It contains ten unit test cases for the {@link StringFormatHelper#formatHangingIndent(String, int, int)} method.\n*/\nclass StringFormatHelperTest1 {"
	},
	{
		"original_code": "// StringFormatHelper.java\n/*\n * StringFormatHelper.java\n *\n * jcmdline Rel. @VERSION@ $Id: StringFormatHelper.java,v 1.2 2002/12/07 14:22:06 lglawrence Exp $\n *\n * Classes:\n *   public   StringFormatHelper\n *   \n * ***** BEGIN LICENSE BLOCK *****\n * Version: MPL 1.1\n *\n * The contents of this file are subject to the Mozilla Public License Version\n * 1.1 (the \"License\"); you may not use this file except in compliance with\n * the License. You may obtain a copy of the License at\n * http://www.mozilla.org/MPL/\n *\n * Software distributed under the License is distributed on an \"AS IS\" basis,\n * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License\n * for the specific language governing rights and limitations under the\n * License.\n *\n * The Original Code is the Java jcmdline (command line management) package.\n *\n * The Initial Developer of the Original Code is Lynne Lawrence.\n * \n * Portions created by the Initial Developer are Copyright (C) 2002\n * the Initial Developer. All Rights Reserved.\n *\n * Contributor(s):  Lynne Lawrence <lgl@visuallink.com>\n *\n * ***** END LICENSE BLOCK *****\n */\npackage jcmdline;\n\n/**\n * A class used to facilitate common String formatting tasks.\n * <P>\n * Objects of this class contain no data.  As such, this class is\n * implemented as a Singleton.\n *\n * @author          Lynne Lawrence\n * @version         jcmdline Rel. @VERSION@ $Id: StringFormatHelper.java,v 1.2 2002/12/07 14:22:06 lglawrence Exp $\n */\npublic class StringFormatHelper {\n\n    /**\n     * The one and only instance of the StringFormatHelper\n     */\n    private static StringFormatHelper helper;\n\n    /**\n     * constructor - private\n     */\n    private StringFormatHelper() {\n    }\n\n    /**\n     * Gets the one and only instance of the StringFormatHelper\n     * @return              the one and only instance of the StringFormatHelper\n     */\n    public static StringFormatHelper getHelper() {\n        if (helper == null) {\n            helper = new StringFormatHelper();\n        }\n        return helper;\n    }\n\n    /**\n     * Formats a string with a hanging indent.\n     * <P>The returned String is formated such that:\n     * <ul>\n     * <li>all lines it contains have length &lt;= <code>lineLen</code>\n     * <li>all lines except for the first on are indented <code>indent</code>\n     *     spaces\n     * </ul>\n     *\n     * @param indent        the number of spaces to indent all but the\n     *                      first line (may be 0)\n     * @param lineLen     the maximum line length\n     * @param s             the string to be formatted\n     * @return              the formatted string\n     * @throws  IllegalArgumentException if <code>lineLen</code> is less than\n     *          <code>indent</code> or if <code>lineLen</code> is less than 0.\n     */\n    public String formatHangingIndent(String s, int indent, int lineLen) {\n        if (s == null || s.length() == 0) {\n            return \"\";\n        }\n        if (lineLen <= indent) {\n            throw new IllegalArgumentException(Strings.get(\"StringFormatHelper.lineLenLessThanIndent\"));\n        }\n        if (lineLen <= 0) {\n            throw new IllegalArgumentException(Strings.get(\"StringFormatHelper.lineLenZero\"));\n        }\n        // guesstimate required buffer length, leaving enough room for line\n        // terminators\n        StringBuffer sb = new StringBuffer(s.length() + (s.length() / lineLen - indent) + 20);\n        String[] a = breakString(s, lineLen);\n        sb.append(a[0]);\n        if (a[1] != null) {\n            sb.append(formatBlockedText(a[1], indent, lineLen));\n        }\n        return sb.toString();\n    }\n\n    /**\n     * Splits the specified String into lines that are indented by the\n     * specified indent and are of length less than or equal to the\n     * specified line length.\n     * <P>\n     * If <code>s</code> is null or empty, an empty String is returned.\n     *\n     * @param s             the String to be formatted\n     * @param indent        the length of the indent for the text block\n     * @param lineLen       the maximum line length for the text block,\n     *                      including the indent\n     * @return              the formatted text block\n     * @throws  IllegalArgumentException if <code>lineLen</code> is less than\n     *          <code>indent</code> or if <code>lineLen</code> is less than 0.\n     */\n    public String formatBlockedText(String s, int indent, int lineLen) {\n        if (s == null || s.length() == 0) {\n            return \"\";\n        }\n        if (lineLen <= indent) {\n            throw new IllegalArgumentException(Strings.get(\"StringFormatHelper.lineLenLessThanIndent\"));\n        }\n        if (lineLen <= 0) {\n            throw new IllegalArgumentException(Strings.get(\"StringFormatHelper.lineLenZero\"));\n        }\n        // guesstimate required buffer length, leaving enough room for line\n        // terminators\n        StringBuffer sb = new StringBuffer(s.length() + (s.length() / lineLen - indent) + 20);\n        StringBuffer indentBuf = new StringBuffer(indent);\n        for (int i = 0; i < indent; i++) {\n            indentBuf.append(\" \");\n        }\n        int splitLen = lineLen - indent;\n        String[] a = breakString(s, splitLen);\n        while (a[1] != null) {\n            sb.append(indentBuf).append(a[0]);\n            a = breakString(a[1], splitLen);\n        }\n        sb.append(indentBuf).append(a[0]);\n        return sb.toString();\n    }\n\n    /**\n     * Breaks a String along word boundarys to the specified maximum length.\n     * <p>\n     * This method returns an array of two strings:\n     * <p>\n     * The first String is a line, of length less than <code>maxLen</code>.\n     * If this String is not the entire passed String, it will\n     * be terminated with a newline.\n     * <P>\n     * The second String is the remainder of the original String.  If the\n     * original String had been broken on a space (as opposed to a newline\n     * that had been in the original String) all leading spaces will have\n     * been removed.  If there is no remainder, null is returned as the\n     * second String and no newline will have been appended to the first\n     * String.\n     *\n     * @param s             The String to be broken.  If null, will be\n     *                      converted to an empty string.\n     * @param maxLen        the maximum line length of the first returned\n     *                      string\n     * @return              see the method description\n     */\n    protected String[] breakString(String s, int maxLen) {\n        s = (s == null) ? \"\" : s;\n        String line = null;\n        String remainder = null;\n        int idx;\n        if ((idx = s.indexOf('\\n')) != -1 && idx <= maxLen) {\n            // point to next char\n            idx++;\n            line = s.substring(0, idx);\n            if (idx < s.length()) {\n                remainder = s.substring(idx);\n            }\n        } else if (s.length() <= maxLen) {\n            line = s;\n        } else if ((idx = s.lastIndexOf(' ', maxLen)) != -1) {\n            line = s.substring(0, idx);\n            while (idx < s.length() && s.charAt(idx) == ' ') {\n                idx++;\n            }\n            if (idx < s.length()) {\n                line += \"\\n\";\n                remainder = s.substring(idx);\n            }\n        } else {\n            line = s.substring(0, maxLen) + \"\\n\";\n            remainder = s.substring(maxLen);\n        }\n        return new String[] { line, remainder };\n    }\n\n    /**\n     * Formats a \"labeled list\" (like a bullet or numbered list, only with\n     * labels for each item).\n     * <P>\n     * Example:\n     * <p><pre>\n     * System.out.println(formatLabeledList(\n     *    new String[] { \"old_file\", \"new_file\" },\n     *    new String[] { \"the name of the file to copy - this file \" +\n     *                       \"must already exist, be readable, and \" +\n     *                       \"end with '.html'\",\n     *                   \"the name of the file to receive the copy\" },\n     *    \" = \", 20, 80));\n     * </pre>\n     * produces....\n     * <pre>\n     * old_file = the name of the file to copy - this file must already exist, be\n     *            readable, and end with '.html'\n     * new_file = the name of the file to copy to\n     * </pre>\n     *\n     * @param labels        An array of labels.\n     * @param texts         An array of texts to go with the labels.\n     * @param divider       The divider to go between the labels and texts.  This\n     *                      will be right-aligned against the texts.\n     * @param maxIndent     Specifies the maximum indent for the text to be\n     *                      written out.  If the combination of a label and\n     *                      divider is longer than maxIndent, the text will\n     *                      be written out in a block starting on the line\n     *                      following the label and divider, rather than on the\n     *                      same line.\n     * @param lineLen       The maximum length of returned lines.\n     * @return              The formatted list.  It will be terminated with a\n     *                      newline.\n     * @throws  IllegalArgumentException if <code>labels</code> and <code>text\n     *          </code> do not have the same number of elements.\n     */\n    public String formatLabeledList(String[] labels, String[] texts, String divider, int maxIndent, int lineLen) {\n        if (labels.length != texts.length) {\n            throw new IllegalArgumentException(Strings.get(\"StringFormatHelper.labelDescriptionError\", new Object[] { new Integer(labels.length), new Integer(texts.length) }));\n        }\n        // Figure out description indents\n        int indent = 0;\n        int dividerlen = divider.length();\n        int currlen;\n        for (int i = 0; i < labels.length; i++) {\n            currlen = labels[i].length() + dividerlen;\n            if (currlen > maxIndent) {\n                continue;\n            } else if (currlen > indent) {\n                indent = currlen;\n            }\n        }\n        // All labels+divider > maxIndent? - use indent of 10\n        indent = (indent == 0) ? 10 : indent;\n        // will fit 20 80-char lines without expansion\n        StringBuffer list = new StringBuffer(1600);\n        // will fit 5 lines per list item without expansion\n        StringBuffer item = new StringBuffer(400);\n        for (int i = 0; i < labels.length; i++) {\n            item.delete(0, item.length());\n            item.append(labels[i]);\n            int spacefill = indent - divider.length();\n            while (item.length() < spacefill) {\n                item.append(' ');\n            }\n            item.append(divider);\n            if (item.length() > indent) {\n                item.append(\"\\n\");\n            }\n            item.append(texts[i]);\n            list.append(formatHangingIndent(item.toString() + \"\\n\", indent, lineLen));\n        }\n        return list.toString();\n    }\n}\n",
		"id": "EvoSuiteBenchmark/109_pdfsam/src/main/java/jcmdline/StringFormatHelperTest2.java",
		"test_prompt": "// StringFormatHelperTest2.java\npackage jcmdline;\n\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link StringFormatHelper}.\n* It contains ten unit test cases for the {@link StringFormatHelper#formatBlockedText(String, int, int)} method.\n*/\nclass StringFormatHelperTest2 {"
	},
	{
		"original_code": "// StringFormatHelper.java\n/*\n * StringFormatHelper.java\n *\n * jcmdline Rel. @VERSION@ $Id: StringFormatHelper.java,v 1.2 2002/12/07 14:22:06 lglawrence Exp $\n *\n * Classes:\n *   public   StringFormatHelper\n *   \n * ***** BEGIN LICENSE BLOCK *****\n * Version: MPL 1.1\n *\n * The contents of this file are subject to the Mozilla Public License Version\n * 1.1 (the \"License\"); you may not use this file except in compliance with\n * the License. You may obtain a copy of the License at\n * http://www.mozilla.org/MPL/\n *\n * Software distributed under the License is distributed on an \"AS IS\" basis,\n * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License\n * for the specific language governing rights and limitations under the\n * License.\n *\n * The Original Code is the Java jcmdline (command line management) package.\n *\n * The Initial Developer of the Original Code is Lynne Lawrence.\n * \n * Portions created by the Initial Developer are Copyright (C) 2002\n * the Initial Developer. All Rights Reserved.\n *\n * Contributor(s):  Lynne Lawrence <lgl@visuallink.com>\n *\n * ***** END LICENSE BLOCK *****\n */\npackage jcmdline;\n\n/**\n * A class used to facilitate common String formatting tasks.\n * <P>\n * Objects of this class contain no data.  As such, this class is\n * implemented as a Singleton.\n *\n * @author          Lynne Lawrence\n * @version         jcmdline Rel. @VERSION@ $Id: StringFormatHelper.java,v 1.2 2002/12/07 14:22:06 lglawrence Exp $\n */\npublic class StringFormatHelper {\n\n    /**\n     * The one and only instance of the StringFormatHelper\n     */\n    private static StringFormatHelper helper;\n\n    /**\n     * constructor - private\n     */\n    private StringFormatHelper() {\n    }\n\n    /**\n     * Gets the one and only instance of the StringFormatHelper\n     * @return              the one and only instance of the StringFormatHelper\n     */\n    public static StringFormatHelper getHelper() {\n        if (helper == null) {\n            helper = new StringFormatHelper();\n        }\n        return helper;\n    }\n\n    /**\n     * Formats a string with a hanging indent.\n     * <P>The returned String is formated such that:\n     * <ul>\n     * <li>all lines it contains have length &lt;= <code>lineLen</code>\n     * <li>all lines except for the first on are indented <code>indent</code>\n     *     spaces\n     * </ul>\n     *\n     * @param indent        the number of spaces to indent all but the\n     *                      first line (may be 0)\n     * @param lineLen     the maximum line length\n     * @param s             the string to be formatted\n     * @return              the formatted string\n     * @throws  IllegalArgumentException if <code>lineLen</code> is less than\n     *          <code>indent</code> or if <code>lineLen</code> is less than 0.\n     */\n    public String formatHangingIndent(String s, int indent, int lineLen) {\n        if (s == null || s.length() == 0) {\n            return \"\";\n        }\n        if (lineLen <= indent) {\n            throw new IllegalArgumentException(Strings.get(\"StringFormatHelper.lineLenLessThanIndent\"));\n        }\n        if (lineLen <= 0) {\n            throw new IllegalArgumentException(Strings.get(\"StringFormatHelper.lineLenZero\"));\n        }\n        // guesstimate required buffer length, leaving enough room for line\n        // terminators\n        StringBuffer sb = new StringBuffer(s.length() + (s.length() / lineLen - indent) + 20);\n        String[] a = breakString(s, lineLen);\n        sb.append(a[0]);\n        if (a[1] != null) {\n            sb.append(formatBlockedText(a[1], indent, lineLen));\n        }\n        return sb.toString();\n    }\n\n    /**\n     * Splits the specified String into lines that are indented by the\n     * specified indent and are of length less than or equal to the\n     * specified line length.\n     * <P>\n     * If <code>s</code> is null or empty, an empty String is returned.\n     *\n     * @param s             the String to be formatted\n     * @param indent        the length of the indent for the text block\n     * @param lineLen       the maximum line length for the text block,\n     *                      including the indent\n     * @return              the formatted text block\n     * @throws  IllegalArgumentException if <code>lineLen</code> is less than\n     *          <code>indent</code> or if <code>lineLen</code> is less than 0.\n     */\n    public String formatBlockedText(String s, int indent, int lineLen) {\n        if (s == null || s.length() == 0) {\n            return \"\";\n        }\n        if (lineLen <= indent) {\n            throw new IllegalArgumentException(Strings.get(\"StringFormatHelper.lineLenLessThanIndent\"));\n        }\n        if (lineLen <= 0) {\n            throw new IllegalArgumentException(Strings.get(\"StringFormatHelper.lineLenZero\"));\n        }\n        // guesstimate required buffer length, leaving enough room for line\n        // terminators\n        StringBuffer sb = new StringBuffer(s.length() + (s.length() / lineLen - indent) + 20);\n        StringBuffer indentBuf = new StringBuffer(indent);\n        for (int i = 0; i < indent; i++) {\n            indentBuf.append(\" \");\n        }\n        int splitLen = lineLen - indent;\n        String[] a = breakString(s, splitLen);\n        while (a[1] != null) {\n            sb.append(indentBuf).append(a[0]);\n            a = breakString(a[1], splitLen);\n        }\n        sb.append(indentBuf).append(a[0]);\n        return sb.toString();\n    }\n\n    /**\n     * Breaks a String along word boundarys to the specified maximum length.\n     * <p>\n     * This method returns an array of two strings:\n     * <p>\n     * The first String is a line, of length less than <code>maxLen</code>.\n     * If this String is not the entire passed String, it will\n     * be terminated with a newline.\n     * <P>\n     * The second String is the remainder of the original String.  If the\n     * original String had been broken on a space (as opposed to a newline\n     * that had been in the original String) all leading spaces will have\n     * been removed.  If there is no remainder, null is returned as the\n     * second String and no newline will have been appended to the first\n     * String.\n     *\n     * @param s             The String to be broken.  If null, will be\n     *                      converted to an empty string.\n     * @param maxLen        the maximum line length of the first returned\n     *                      string\n     * @return              see the method description\n     */\n    protected String[] breakString(String s, int maxLen) {\n        s = (s == null) ? \"\" : s;\n        String line = null;\n        String remainder = null;\n        int idx;\n        if ((idx = s.indexOf('\\n')) != -1 && idx <= maxLen) {\n            // point to next char\n            idx++;\n            line = s.substring(0, idx);\n            if (idx < s.length()) {\n                remainder = s.substring(idx);\n            }\n        } else if (s.length() <= maxLen) {\n            line = s;\n        } else if ((idx = s.lastIndexOf(' ', maxLen)) != -1) {\n            line = s.substring(0, idx);\n            while (idx < s.length() && s.charAt(idx) == ' ') {\n                idx++;\n            }\n            if (idx < s.length()) {\n                line += \"\\n\";\n                remainder = s.substring(idx);\n            }\n        } else {\n            line = s.substring(0, maxLen) + \"\\n\";\n            remainder = s.substring(maxLen);\n        }\n        return new String[] { line, remainder };\n    }\n\n    /**\n     * Formats a \"labeled list\" (like a bullet or numbered list, only with\n     * labels for each item).\n     * <P>\n     * Example:\n     * <p><pre>\n     * System.out.println(formatLabeledList(\n     *    new String[] { \"old_file\", \"new_file\" },\n     *    new String[] { \"the name of the file to copy - this file \" +\n     *                       \"must already exist, be readable, and \" +\n     *                       \"end with '.html'\",\n     *                   \"the name of the file to receive the copy\" },\n     *    \" = \", 20, 80));\n     * </pre>\n     * produces....\n     * <pre>\n     * old_file = the name of the file to copy - this file must already exist, be\n     *            readable, and end with '.html'\n     * new_file = the name of the file to copy to\n     * </pre>\n     *\n     * @param labels        An array of labels.\n     * @param texts         An array of texts to go with the labels.\n     * @param divider       The divider to go between the labels and texts.  This\n     *                      will be right-aligned against the texts.\n     * @param maxIndent     Specifies the maximum indent for the text to be\n     *                      written out.  If the combination of a label and\n     *                      divider is longer than maxIndent, the text will\n     *                      be written out in a block starting on the line\n     *                      following the label and divider, rather than on the\n     *                      same line.\n     * @param lineLen       The maximum length of returned lines.\n     * @return              The formatted list.  It will be terminated with a\n     *                      newline.\n     * @throws  IllegalArgumentException if <code>labels</code> and <code>text\n     *          </code> do not have the same number of elements.\n     */\n    public String formatLabeledList(String[] labels, String[] texts, String divider, int maxIndent, int lineLen) {\n        if (labels.length != texts.length) {\n            throw new IllegalArgumentException(Strings.get(\"StringFormatHelper.labelDescriptionError\", new Object[] { new Integer(labels.length), new Integer(texts.length) }));\n        }\n        // Figure out description indents\n        int indent = 0;\n        int dividerlen = divider.length();\n        int currlen;\n        for (int i = 0; i < labels.length; i++) {\n            currlen = labels[i].length() + dividerlen;\n            if (currlen > maxIndent) {\n                continue;\n            } else if (currlen > indent) {\n                indent = currlen;\n            }\n        }\n        // All labels+divider > maxIndent? - use indent of 10\n        indent = (indent == 0) ? 10 : indent;\n        // will fit 20 80-char lines without expansion\n        StringBuffer list = new StringBuffer(1600);\n        // will fit 5 lines per list item without expansion\n        StringBuffer item = new StringBuffer(400);\n        for (int i = 0; i < labels.length; i++) {\n            item.delete(0, item.length());\n            item.append(labels[i]);\n            int spacefill = indent - divider.length();\n            while (item.length() < spacefill) {\n                item.append(' ');\n            }\n            item.append(divider);\n            if (item.length() > indent) {\n                item.append(\"\\n\");\n            }\n            item.append(texts[i]);\n            list.append(formatHangingIndent(item.toString() + \"\\n\", indent, lineLen));\n        }\n        return list.toString();\n    }\n}\n",
		"id": "EvoSuiteBenchmark/109_pdfsam/src/main/java/jcmdline/StringFormatHelperTest3.java",
		"test_prompt": "// StringFormatHelperTest3.java\npackage jcmdline;\n\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link StringFormatHelper}.\n* It contains ten unit test cases for the {@link StringFormatHelper#formatLabeledList(String[], String[], String, int, int)} method.\n*/\nclass StringFormatHelperTest3 {"
	},
	{
		"original_code": "// PdfFileParam.java\n/*\r\n * PdfFileParam.java\r\n *\r\n * Classes:\r\n *   public   FileParam\r\n *   \r\n * ***** BEGIN LICENSE BLOCK *****\r\n * Version: MPL 1.1\r\n *\r\n * The contents of this file are subject to the Mozilla Public License Version\r\n * 1.1 (the \"License\"); you may not use this file except in compliance with\r\n * the License. You may obtain a copy of the License at\r\n * http://www.mozilla.org/MPL/\r\n *\r\n * Software distributed under the License is distributed on an \"AS IS\" basis,\r\n * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License\r\n * for the specific language governing rights and limitations under the\r\n * License.\r\n *\r\n * The Original Code is the Java jcmdline (command line management) package.\r\n *\r\n * The Initial Developer of the Original Code is Lynne Lawrence.\r\n * \r\n * Portions created by the Initial Developer are Copyright (C) 2002\r\n * the Initial Developer. All Rights Reserved.\r\n *\r\n * Contributor(s):  Andrea Vacondio <andrea.vacondio@gmail.com>\r\n *\r\n * ***** END LICENSE BLOCK *****\r\n */\r\npackage jcmdline;\r\n\r\nimport java.io.File;\r\nimport java.util.ArrayList;\r\nimport java.util.Collection;\r\nimport java.util.Iterator;\r\nimport jcmdline.dto.PdfFile;\r\n\r\n/**\r\n * Encapsulate a command line parameter whose value will be the name of\r\n * a pdf document amd its password (Ex. file.pdf:pwd).  Attributes, such as whether\r\n * it must be readable, etc, may be specified and will be validated.\r\n * <p>\r\n * Usage:\r\n * <pre>\r\n * public static void main(String[] args) {\r\n *\r\n *     PdfFileParam filesArg =\r\n *         new PdfFileParam(\"file\",\r\n *                       \"a file to be processed - defaults to stdin\",\r\n *                       PdfFileParam.IS_READABLE,\r\n *                       PdfFileParam.OPTIONAL,\r\n *                       PdfFileParam.MULTI_VALUED);\r\n *\r\n * }\r\n * </pre>\r\n *\r\n * @author          Andrea Vacondio\r\n * @version         jcmdline Rel. @VERSION@ $Id: PdfFileParam.java\r\n * @see CmdLineParser\r\n */\r\npublic class PdfFileParam extends AbstractParameter {\r\n\r\n    // Note: attributes are specified with kind of a \"reverse map\" so\r\n    // that they can be \"ANDed\" together when set, which is more natural\r\n    // since that is the way they are processed.\r\n    /**\r\n     * indicates that no file/dir attributes are required or will be checked\r\n     * @see #setAttributes(int) setAttributes()\r\n     */\r\n    public static final int NO_ATTRIBUTES = 0xffff;\r\n\r\n    /**\r\n     * indicates that a file specified as a value for this\r\n     * PdfFileParam must exist\r\n     * @see #setAttributes(int) setAttributes()\r\n     */\r\n    public static final int EXISTS = 0xfffe;\r\n\r\n    /**\r\n     * indicates that a value specified for this PdfFileParam must name an\r\n     * existing file for which the caller has read access\r\n     * @see #setAttributes(int) setAttributes()\r\n     */\r\n    public static final int IS_READABLE = 0xffef;\r\n\r\n    /**\r\n     * indicates that a value specified for this PdfFileParam must name an\r\n     * existing file for which the caller has write access\r\n     * @see #setAttributes(int) setAttributes()\r\n     */\r\n    public static final int IS_WRITEABLE = 0xffdf;\r\n\r\n    /**\r\n     * the default label that will represent option values for this Parameter.\r\n     * The following demonstrates a possible usage for a PdfFileParam option,\r\n     * where the option label is '&lt;file&gt;':\r\n     * <pre>\r\n     *    out &lt;file&gt;  the output file\r\n     * </pre>\r\n     * @see AbstractParameter#setOptionLabel(String) setOptionLabel()\r\n     * @see \"<i>PdfFileParam.defaultFileOptionLabel</i> in 'strings' properties\r\n     *      file\"\r\n     */\r\n    public static final String DEFAULT_FILE_OPTION_LABEL = Strings.get(\"PdfFileParam.defaultFileOptionLabel\");\r\n\r\n    /**\r\n     * Attributes which a file/directory value must have\r\n     * @see #setAttributes(int) setAttributes()\r\n     * @see #getAttributes()\r\n     */\r\n    private int attributes;\r\n\r\n    /**\r\n     * constructor - creates single-valued, optional, public parameter\r\n     * which accepts any valid file name as its value\r\n     *\r\n     * @param tag           a unique identifier for this parameter\r\n     * @param desc          a description of the parameter, suitable for display\r\n     *                      in a usage statement\r\n     * @throws              IllegalArgumentException if <code>tag</code>\r\n     *                      or <desc> are invalid.\r\n     * @see                 AbstractParameter#setTag(String) setTag()\r\n     * @see                 AbstractParameter#setDesc(String) setDesc()\r\n     */\r\n    public PdfFileParam(String tag, String desc) {\r\n        this(tag, desc, NO_ATTRIBUTES, OPTIONAL, SINGLE_VALUED, PUBLIC);\r\n    }\r\n\r\n    /**\r\n     * constructor - creates single-valued, public parameter which accepts\r\n     * any valid file name as its value and is optional or\r\n     * required, as specified.\r\n     *\r\n     * @param tag           a unique identifier for this parameter\r\n     * @param desc          a description of the parameter, suitable for display\r\n     *                      in a usage statement\r\n     * @param optional      {@link Parameter#OPTIONAL OPTIONAL} if\r\n     *                      optional,\r\n     *                      {@link Parameter#REQUIRED REQUIRED} if required\r\n     * @throws              IllegalArgumentException if any of the specified\r\n     *                      parameters are invalid.\r\n     * @see                 AbstractParameter#setTag(String) setTag()\r\n     * @see                 AbstractParameter#setDesc(String) setDesc()\r\n     * @see                 Parameter#OPTIONAL OPTIONAL\r\n     * @see                 Parameter#REQUIRED REQUIRED\r\n     */\r\n    public PdfFileParam(String tag, String desc, boolean optional) {\r\n        this(tag, desc, NO_ATTRIBUTES, optional, SINGLE_VALUED, PUBLIC);\r\n    }\r\n\r\n    /**\r\n     * constructor - creates a single-valued, optional, public, parameter\r\n     * accepts a file name with the specified attributes.\r\n     *\r\n     * @param tag           a unique identifier for this parameter\r\n     * @param desc          a description of the parameter, suitable for display\r\n     *                      in a usage statement\r\n     * @param attributes    the attributes that must apply to a file or\r\n     *                      directory specified as a value to this FileParam\r\n     * @throws              IllegalArgumentException if any parameter is\r\n     *                      invalid.\r\n     * @see                 AbstractParameter#setTag(String) setTag()\r\n     * @see                 AbstractParameter#setDesc(String) setDesc()\r\n     * @see                 #setAttributes(int) setAttributes()\r\n     */\r\n    public PdfFileParam(String tag, String desc, int attributes) {\r\n        this(tag, desc, attributes, OPTIONAL, SINGLE_VALUED, PUBLIC);\r\n    }\r\n\r\n    /**\r\n     * constructor - creates a single-valued, public, parameter\r\n     * that accepts a file name with the specified attributes,\r\n     * and which is required or optional, as specified.\r\n     *\r\n     * @param tag           a unique identifier for this parameter\r\n     * @param desc          a description of the parameter, suitable for display\r\n     *                      in a usage statement\r\n     * @param attributes    the attributes that must apply to a file or\r\n     *                      directory specified as a value to this FileParam\r\n     * @param optional      {@link Parameter#OPTIONAL OPTIONAL} if\r\n     *                      optional,\r\n     *                      {@link Parameter#REQUIRED REQUIRED} if required\r\n     * @throws              IllegalArgumentException if any parameter is\r\n     *                      invalid.\r\n     * @see                 AbstractParameter#setTag(String) setTag()\r\n     * @see                 AbstractParameter#setDesc(String) setDesc()\r\n     * @see                 #setAttributes(int) setAttributes()\r\n     * @see                 Parameter#OPTIONAL OPTIONAL\r\n     * @see                 Parameter#REQUIRED REQUIRED\r\n     */\r\n    public PdfFileParam(String tag, String desc, int attributes, boolean optional) {\r\n        this(tag, desc, attributes, optional, SINGLE_VALUED, PUBLIC);\r\n    }\r\n\r\n    /**\r\n     * constructor - creates a public parameter that accepts a file\r\n     * name with the specified attributes, and which is required\r\n     * or optional and/or multi-valued, as specified.\r\n     *\r\n     * @param tag           a unique identifier for this parameter\r\n     * @param desc          a description of the parameter, suitable for display\r\n     *                      in a usage statement\r\n     * @param attributes    the attributes that must apply to a file or\r\n     *                      directory specified as a value to this FileParam\r\n     * @param optional      {@link Parameter#OPTIONAL OPTIONAL} if\r\n     *                      optional,\r\n     *                      {@link Parameter#REQUIRED REQUIRED} if required\r\n     * @param multiValued   {@link Parameter#MULTI_VALUED MULTI_VALUED} if\r\n     *                      the parameter can accept multiple values,\r\n     *                      {@link Parameter#SINGLE_VALUED SINGLE_VALUED}\r\n     *                      if the parameter can contain only a single value\r\n     * @throws              IllegalArgumentException if any parameter is\r\n     *                      invalid.\r\n     * @see                 AbstractParameter#setTag(String) setTag()\r\n     * @see                 AbstractParameter#setDesc(String) setDesc()\r\n     * @see                 #setAttributes(int) setAttributes()\r\n     * @see                 Parameter#OPTIONAL OPTIONAL\r\n     * @see                 Parameter#REQUIRED REQUIRED\r\n     * @see                 Parameter#SINGLE_VALUED SINGLE_VALUED\r\n     * @see                 Parameter#MULTI_VALUED MULTI_VALUED\r\n     */\r\n    public PdfFileParam(String tag, String desc, int attributes, boolean optional, boolean multiValued) {\r\n        this(tag, desc, attributes, optional, multiValued, PUBLIC);\r\n    }\r\n\r\n    /**\r\n     * constructor - creates a parameter that accepts a file\r\n     * name with the specified attributes, and which is required or optional\r\n     * and/or multi-valued or hidden, as specified.\r\n     * <P>\r\n     * If the <code>IS_DIR</code> attribute is specified, the option label for\r\n     * this FileParam will be set to {@link #DEFAULT_DIR_OPTION_LABEL},\r\n     * else it will be {@link #DEFAULT_FILE_OPTION_LABEL}.\r\n     *\r\n     * @param tag           a unique identifier for this parameter\r\n     * @param desc          a description of the parameter, suitable for display\r\n     *                      in a usage statement\r\n     * @param attributes    the attributes that must apply to a file or\r\n     *                      directory specified as a value to this FileParam\r\n     * @param optional      {@link Parameter#OPTIONAL OPTIONAL} if\r\n     *                      optional,\r\n     *                      {@link Parameter#REQUIRED REQUIRED} if required\r\n     * @param multiValued   {@link Parameter#MULTI_VALUED MULTI_VALUED} if\r\n     *                      the parameter can accept multiple values,\r\n     *                      {@link Parameter#SINGLE_VALUED SINGLE_VALUED}\r\n     *                      if the parameter can contain only a single value\r\n     * @param hidden        {@link Parameter#HIDDEN HIDDEN} if parameter is\r\n     *                      not to be listed in the usage,\r\n     *                      {@link Parameter#PUBLIC PUBLIC} otherwise.\r\n     * @throws              IllegalArgumentException if any parameter is\r\n     *                      invalid.\r\n     * @see                 AbstractParameter#setTag(String) setTag()\r\n     * @see                 AbstractParameter#setDesc(String) setDesc()\r\n     * @see                 AbstractParameter#setOptionLabel(String) setOptionLabel()\r\n     * @see                 #setAttributes(int) setAttributes()\r\n     * @see                 Parameter#OPTIONAL OPTIONAL\r\n     * @see                 Parameter#REQUIRED REQUIRED\r\n     * @see                 Parameter#SINGLE_VALUED SINGLE_VALUED\r\n     * @see                 Parameter#MULTI_VALUED MULTI_VALUED\r\n     * @see                 Parameter#HIDDEN HIDDEN\r\n     * @see                 Parameter#PUBLIC PUBLIC\r\n     */\r\n    public PdfFileParam(String tag, String desc, int attributes, boolean optional, boolean multiValued, boolean hidden) {\r\n        this.setTag(tag);\r\n        this.setAttributes(attributes);\r\n        this.setDesc(desc);\r\n        this.optional = optional;\r\n        this.multiValued = multiValued;\r\n        this.hidden = hidden;\r\n        this.setOptionLabel(DEFAULT_FILE_OPTION_LABEL);\r\n    }\r\n\r\n    /**\r\n     * Gets the value of the PdfFileParam as a PdfFileParam object.  If the PdfFileParam is\r\n     * multi-valued, the first value is returned.\r\n     *\r\n     * @return              the value as a PdfFile object\r\n     * @throws              RuntimeException if the value of the FileParam\r\n     *                      has not been set.\r\n     * @see Parameter#isSet()\r\n     */\r\n    public PdfFile getPdfFile() {\r\n        PdfFile retVal = null;\r\n        if (!set) {\r\n            throw new RuntimeException(Strings.get(\"PdfFileParam.valueNotSet\", new Object[] { tag }));\r\n        }\r\n        retVal = getPdfFile((String) values.get(0));\r\n        return retVal;\r\n    }\r\n\r\n    /**\r\n     * Gets the values of the PdfFileParam as a Collection of PdfFile objects.\r\n     * If the PdfFileParam has no values, an empty Collection is returned.\r\n     *\r\n     * @return              a Collection of PdfFile objects, possibly empty\r\n     * @see Parameter#isSet()\r\n     */\r\n    public Collection getPdfFiles() {\r\n        ArrayList vals = new ArrayList(values.size());\r\n        for (Iterator itr = values.iterator(); itr.hasNext(); ) {\r\n            vals.add(getPdfFile((String) itr.next()));\r\n        }\r\n        return vals;\r\n    }\r\n\r\n    /**\r\n     * Validates a prospective value for the PdfFileParam - called by\r\n     * add/setValue(s)().  All of the attributes are validated and the a\r\n     * CmdLineException is thrown if any are not satisfied.\r\n     *\r\n     * @param val           the value to validate\r\n     * @throws              CmdLineException if <code>value</code> is not valid.\r\n     * @see #setAttributes(int) setAttributes()\r\n     */\r\n    public void validateValue(String val) throws CmdLineException {\r\n        super.validateValue(val);\r\n        PdfFile f = null;\r\n        try {\r\n            f = getPdfFile(val);\r\n        } catch (Exception e) {\r\n            throwIllegalValueException(val);\r\n        }\r\n        if (attrSpecified(EXISTS) && !f.getFile().exists()) {\r\n            throwIllegalValueException(val);\r\n        }\r\n        if (attrSpecified(IS_READABLE) && !f.getFile().canRead()) {\r\n            throwIllegalValueException(val);\r\n        }\r\n        if (attrSpecified(IS_WRITEABLE) && !f.getFile().canWrite()) {\r\n            throwIllegalValueException(val);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Indicates whether an attribute has been specified for this FileParam.\r\n     *\r\n     * @param attr          one of {@link #NO_ATTRIBUTES}, {@link #EXISTS},\r\n     *                      {@link #IS_READABLE}, or\r\n     *                      {@link #IS_WRITEABLE}\r\n     * @return              <code>true</code> if the attribute is set,\r\n     *                      <code>false</code> if the attribute is not set or\r\n     *                      <code>attr</code> is not a valid attribute\r\n     */\r\n    public boolean attrSpecified(int attr) {\r\n        if (!(attr == EXISTS || attr == NO_ATTRIBUTES || attr == IS_READABLE || attr == IS_WRITEABLE)) {\r\n            return false;\r\n        }\r\n        return (((attributes | attr) ^ 0xffff) != 0);\r\n    }\r\n\r\n    /**\r\n     * Sets the value of attributes.  Multiple attributes may be specified\r\n     * by ANDing them together.  If multiple attributes are specified,\r\n     * all conditions must be met for a parameter value to be considered\r\n     * valid.  For example:\r\n     * <pre>\r\n     *    FileParam fp = new FileParam(\"tempDir\",\r\n     *            \"a directory in which temporary files can be stored\",\r\n     *            FileParam.IS_DIR & FileParam.IS_WRITEABLE);\r\n     * </pre>\r\n     * In this case, a valid parameter value would have to be both a\r\n     * directory and writeable.\r\n     * <P>\r\n     * Specify <code>NO_ATTRIBUTES</code> if none of the other attributes is\r\n     * required.\r\n     *\r\n     * @param attributes    a combination of {@link #NO_ATTRIBUTES},\r\n     *                      {@link #EXISTS},\r\n     *                      {@link #IS_READABLE}, and {@link #IS_WRITEABLE}\r\n     * @throws      IllegalArgumentException if the attributes value\r\n     *              is invalid.\r\n     * @see #getAttributes()\r\n     */\r\n    public void setAttributes(int attributes) {\r\n        if ((attributes ^ 0xffff) >= ((IS_WRITEABLE ^ 0xffff) * 2)) {\r\n            throw new IllegalArgumentException(Strings.get(\"PdfFileParam.invalidAttributes\", new Object[] { new Integer(attributes) }));\r\n        }\r\n        this.attributes = attributes;\r\n    }\r\n\r\n    /**\r\n     * gets the value of attributes\r\n     *\r\n     * @return              The attributes specified for this FileParam\r\n     * @see #setAttributes(int) setAttributes()\r\n     */\r\n    public int getAttributes() {\r\n        return attributes;\r\n    }\r\n\r\n    /**\r\n     * Throws a nicely formatted error message when an invalid value is\r\n     * attempted to be validated.\r\n     *\r\n     * @param val           the value that failed validation\r\n     * @return              doesn't - throws a CmdLineException\r\n     * @throws              CmdLineException - that's its goal!\r\n     */\r\n    private void throwIllegalValueException(String val) throws CmdLineException {\r\n        String s1 = Strings.get(\"FileParam.file\");\r\n        String s2;\r\n        if (attrSpecified(EXISTS) || attrSpecified(IS_READABLE) || attrSpecified(IS_WRITEABLE)) {\r\n            s2 = Strings.get(\"PdfFileParam.an_existing\");\r\n        } else {\r\n            s2 = Strings.get(\"PdfFileParam.a\");\r\n        }\r\n        String s3 = \"\";\r\n        if (attrSpecified(IS_READABLE)) {\r\n            if (attrSpecified(IS_WRITEABLE)) {\r\n                s3 = Strings.get(\"FileParam.readable_writeable\");\r\n            } else {\r\n                s3 = Strings.get(\"PdfFileParam.readable\");\r\n            }\r\n        } else if (attrSpecified(IS_WRITEABLE)) {\r\n            s3 = Strings.get(\"PdfFileParam.writeable\");\r\n        }\r\n        throw new CmdLineException(Strings.get(\"PdfFileParam.illegalValue\", new Object[] { s2, s1, s3, val, tag }));\r\n    }\r\n\r\n    /**\r\n     * @param value\r\n     * @return the PdfFile\r\n     */\r\n    private PdfFile getPdfFile(String value) {\r\n        PdfFile retVal = null;\r\n        int k = value.toLowerCase().lastIndexOf(\".pdf:\");\r\n        if (k < 0) {\r\n            retVal = new PdfFile(new File(value), null);\r\n        } else {\r\n            retVal = new PdfFile(new File(value.substring(0, k + 4)), value.substring(k + 5, value.length()));\r\n        }\r\n        return retVal;\r\n    }\r\n}\r\n",
		"id": "EvoSuiteBenchmark/109_pdfsam/src/main/java/jcmdline/PdfFileParamTest.java",
		"test_prompt": "// PdfFileParamTest.java\npackage jcmdline;\n\nimport java.io.File;\nimport java.util.ArrayList;\nimport java.util.Collection;\nimport java.util.Iterator;\nimport jcmdline.dto.PdfFile;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link PdfFileParam}.\n* It contains ten unit test cases for the {@link PdfFileParam#attrSpecified(int)} method.\n*/\nclass PdfFileParamTest {"
	},
	{
		"original_code": "// Strings.java\n/*\n * Strings.java\n *\n * jcmdline Rel. @VERSION@ $Id: Strings.java,v 1.2 2002/12/07 14:22:06 lglawrence Exp $\n *\n * Classes:\n *   public   Strings\n *   \n * ***** BEGIN LICENSE BLOCK *****\n * Version: MPL 1.1\n *\n * The contents of this file are subject to the Mozilla Public License Version\n * 1.1 (the \"License\"); you may not use this file except in compliance with\n * the License. You may obtain a copy of the License at\n * http://www.mozilla.org/MPL/\n *\n * Software distributed under the License is distributed on an \"AS IS\" basis,\n * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License\n * for the specific language governing rights and limitations under the\n * License.\n *\n * The Original Code is the Java jcmdline (command line management) package.\n *\n * The Initial Developer of the Original Code is Lynne Lawrence.\n * \n * Portions created by the Initial Developer are Copyright (C) 2002\n * the Initial Developer. All Rights Reserved.\n *\n * Contributor(s):  Lynne Lawrence <lgl@visuallink.com>\n *\n * ***** END LICENSE BLOCK *****\n */\npackage jcmdline;\n\nimport java.text.MessageFormat;\nimport java.util.ResourceBundle;\n\n/**\n * A helper class used to obtain Strings for this package.  Strings are\n * retrieved from the ResourceBundle in \"jcmdline.strings\" which may be\n * localized as necessary.\n *\n * @author          Lynne Lawrence\n * @version         jcmdline Rel. @VERSION@ $Id: Strings.java,v 1.2 2002/12/07 14:22:06 lglawrence Exp $\n * @see java.util.ResourceBundle\n */\npublic class Strings {\n\n    /**\n     * The resource bundle for this package.\n     */\n    private static final ResourceBundle rb = ResourceBundle.getBundle(\"jcmdline.strings\");\n\n    /**\n     * The String that prefaces return values when a key is not defined\n     * in the ResourceBundle.  Note that this is checked for in the unit\n     * tests (see BetterTestCase) so a change in methodology here will\n     * require a change to the unit tests.\n     */\n    private static final String missingKeyMsg = rb.getString(\"Strings.missingKey\") + \" \";\n\n    /**\n     * Gets a String, filling in the supplied parameters.\n     *\n     * @param key           the key with which to look up the String in the\n     *                      ResourceBundle\n     * @param params        parameters to be plugged into the String\n     * @return              The String, associated with <code>key</code>, with\n     *                      the supplied <code>params</code> plugged in as\n     *                      described for <code>java.text.MessageFormat</code>.\n     *                      Should <code>key</code> not exist in the\n     *                      ResourceBundle a String containing the key and a list\n     *                      of the parameters is returned.\n     * @see java.text.MessageFormat\n     * @see java.util.ResourceBundle\n     */\n    public static String get(String key, Object[] params) {\n        String ret = missingKeyMsg + key;\n        try {\n            ret = rb.getString(key);\n            ret = MessageFormat.format(ret, params);\n        } catch (Exception e) {\n            ret += \"; params: \";\n            for (int i = 0; i < params.length; i++) {\n                ret += \"[\" + params[i] + \"] \";\n            }\n        }\n        return ret;\n    }\n\n    /**\n     * Gets a String.\n     *\n     * @param key           the key with which to look up the String in the\n     *                      ResourceBundle\n     * @return              The String, associated with <code>key</code>.\n     *                      Should <code>key</code> not exist in the\n     *                      ResourceBundle a String consisting of the key\n     *                      is returned.\n     * @see java.util.ResourceBundle\n     */\n    public static String get(String key) {\n        String ret = missingKeyMsg + key;\n        try {\n            ret = rb.getString(key);\n        } catch (Exception e) {\n            // ignore - return the key\n        }\n        return ret;\n    }\n}\n",
		"id": "EvoSuiteBenchmark/109_pdfsam/src/main/java/jcmdline/StringsTest0.java",
		"test_prompt": "// StringsTest0.java\npackage jcmdline;\n\nimport java.text.MessageFormat;\nimport java.util.ResourceBundle;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link Strings}.\n* It contains ten unit test cases for the {@link Strings#get(String, Object[])} method.\n*/\nclass StringsTest0 {"
	},
	{
		"original_code": "// Strings.java\n/*\n * Strings.java\n *\n * jcmdline Rel. @VERSION@ $Id: Strings.java,v 1.2 2002/12/07 14:22:06 lglawrence Exp $\n *\n * Classes:\n *   public   Strings\n *   \n * ***** BEGIN LICENSE BLOCK *****\n * Version: MPL 1.1\n *\n * The contents of this file are subject to the Mozilla Public License Version\n * 1.1 (the \"License\"); you may not use this file except in compliance with\n * the License. You may obtain a copy of the License at\n * http://www.mozilla.org/MPL/\n *\n * Software distributed under the License is distributed on an \"AS IS\" basis,\n * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License\n * for the specific language governing rights and limitations under the\n * License.\n *\n * The Original Code is the Java jcmdline (command line management) package.\n *\n * The Initial Developer of the Original Code is Lynne Lawrence.\n * \n * Portions created by the Initial Developer are Copyright (C) 2002\n * the Initial Developer. All Rights Reserved.\n *\n * Contributor(s):  Lynne Lawrence <lgl@visuallink.com>\n *\n * ***** END LICENSE BLOCK *****\n */\npackage jcmdline;\n\nimport java.text.MessageFormat;\nimport java.util.ResourceBundle;\n\n/**\n * A helper class used to obtain Strings for this package.  Strings are\n * retrieved from the ResourceBundle in \"jcmdline.strings\" which may be\n * localized as necessary.\n *\n * @author          Lynne Lawrence\n * @version         jcmdline Rel. @VERSION@ $Id: Strings.java,v 1.2 2002/12/07 14:22:06 lglawrence Exp $\n * @see java.util.ResourceBundle\n */\npublic class Strings {\n\n    /**\n     * The resource bundle for this package.\n     */\n    private static final ResourceBundle rb = ResourceBundle.getBundle(\"jcmdline.strings\");\n\n    /**\n     * The String that prefaces return values when a key is not defined\n     * in the ResourceBundle.  Note that this is checked for in the unit\n     * tests (see BetterTestCase) so a change in methodology here will\n     * require a change to the unit tests.\n     */\n    private static final String missingKeyMsg = rb.getString(\"Strings.missingKey\") + \" \";\n\n    /**\n     * Gets a String, filling in the supplied parameters.\n     *\n     * @param key           the key with which to look up the String in the\n     *                      ResourceBundle\n     * @param params        parameters to be plugged into the String\n     * @return              The String, associated with <code>key</code>, with\n     *                      the supplied <code>params</code> plugged in as\n     *                      described for <code>java.text.MessageFormat</code>.\n     *                      Should <code>key</code> not exist in the\n     *                      ResourceBundle a String containing the key and a list\n     *                      of the parameters is returned.\n     * @see java.text.MessageFormat\n     * @see java.util.ResourceBundle\n     */\n    public static String get(String key, Object[] params) {\n        String ret = missingKeyMsg + key;\n        try {\n            ret = rb.getString(key);\n            ret = MessageFormat.format(ret, params);\n        } catch (Exception e) {\n            ret += \"; params: \";\n            for (int i = 0; i < params.length; i++) {\n                ret += \"[\" + params[i] + \"] \";\n            }\n        }\n        return ret;\n    }\n\n    /**\n     * Gets a String.\n     *\n     * @param key           the key with which to look up the String in the\n     *                      ResourceBundle\n     * @return              The String, associated with <code>key</code>.\n     *                      Should <code>key</code> not exist in the\n     *                      ResourceBundle a String consisting of the key\n     *                      is returned.\n     * @see java.util.ResourceBundle\n     */\n    public static String get(String key) {\n        String ret = missingKeyMsg + key;\n        try {\n            ret = rb.getString(key);\n        } catch (Exception e) {\n            // ignore - return the key\n        }\n        return ret;\n    }\n}\n",
		"id": "EvoSuiteBenchmark/109_pdfsam/src/main/java/jcmdline/StringsTest1.java",
		"test_prompt": "// StringsTest1.java\npackage jcmdline;\n\nimport java.text.MessageFormat;\nimport java.util.ResourceBundle;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link Strings}.\n* It contains ten unit test cases for the {@link Strings#get(String)} method.\n*/\nclass StringsTest1 {"
	},
	{
		"original_code": "// AbstractHandlerDecorator.java\n/*\n * AbstractHandlerDecorator.java\n *\n * Classes:\n *   public   AbstractHandlerDecorator\n *   \n * ***** BEGIN LICENSE BLOCK *****\n * Version: MPL 1.1\n *\n * The contents of this file are subject to the Mozilla Public License Version\n * 1.1 (the \"License\"); you may not use this file except in compliance with\n * the License. You may obtain a copy of the License at\n * http://www.mozilla.org/MPL/\n *\n * Software distributed under the License is distributed on an \"AS IS\" basis,\n * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License\n * for the specific language governing rights and limitations under the\n * License.\n *\n * The Original Code is the Java jcmdline (command line management) package.\n *\n * The Initial Developer of the Original Code is Lynne Lawrence.\n * \n * Portions created by the Initial Developer are Copyright (C) 2002\n * the Initial Developer. All Rights Reserved.\n *\n * Contributor(s):  Lynne Lawrence <lgl@visuallink.com>\n *\n * ***** END LICENSE BLOCK *****\n */\npackage jcmdline;\n\nimport java.util.Collection;\nimport java.util.List;\n\n/**\n * An abstract class implementing the Decorator design pattern for\n * decoration of CmdLineHandler subclasses.  This\n * class implements all methods of the CmdLineHandler interface by\n * delegating them to a contained instance of CmdLineHandler.\n * The intended use for this class is specification and implementation of\n * a command option that can be reused, and can be used in series with\n * others of the same ilk.  More information on CmdLineHandlers\n * and decorator classes can be found in the\n * <a href=\"doc-files/userguide.html#clh\">\n * jcmdline User Guide</a>.\n * <P>\n * <b>Subclassing this Class</b>\n * <p>\n * In order to subclass this class, do the following:\n * <ul>\n *    <li>With regard to the subclass constructor(s):\n *        <ul>\n *        <li>All constructors should accept a <code>CmdLineHandler</code>\n *            argument or create a <code>CmdLineHandler</code> to which\n *            most method calls will be delegated.\n *        <li>They should include a call to this class's\n *            constructor, passing their contained <code>CmdLineHandler</code>\n *            along as an argument (<code>super(handler)</code>) as\n *            the first line of the constructor.\n *        <li>In the constructor of the subclass, call setCustomOptions,\n *            specifying the options supported by the subclass.  This ensures\n *            that the options are added to the contained handler, and that\n *            they will be restored should setOptions() be called on the\n *            contained handler.\n *        </ul>\n *    <li>Implement the processParsedOptions() method.  This method will be\n *        called after the command line has been parsed by the contained\n *        handler.  It is in this method that a subclass should do its\n *        option processing.\n * </ul>\n * An example of a subclass follows (note that, but for the lack of additional\n * constructors, this is basically how the {@link VersionCmdLineHandler}\n * is implemented).\n * <pre>\n *  public class VersionCmdLineHandler\n *          extends AbstractHandlerDecorator {\n *\n *      private BooleanParam versionOpt;\n *      private String version;\n *\n *      public MyCmdLineHandler (String version,\n *                               CmdLineHandler handler) {\n *          super(handler);\n *          if (version == null || version.length() == 0) {\n *              throw new IllegalArgumentException(\n *                          \"version must be specified\");\n *          }\n *          this.version = version;\n *          versionOpt = new BooleanParam(\n *              Strings.get(\"version\"),\n *              Strings.get(\"displays the version and exits\"));\n *          versionOpt.setIgnoreRequired(true);\n *          setCustomOptions(new Parameter[] { versionOpt });\n *      }\n *\n *      protected boolean processParsedOptions(boolean parseOk) {\n *          if (parseOk) {\n *              if (versionOpt.isTrue()) {\n *                  System.out.println(version);\n *                  System.exit(0);\n *              }\n *          }\n *          return parseOk;\n *      }\n *  }\n * </pre>\n * <p>\n * <b>A Note on Option Processing</b>\n * <p>\n * CmdLineHandler decorator classes are particularly useful for options\n * that perform a task and call System.exit(), such as -help or\n * -version options.  Options such as these should have the <code>\n * ignoreRequired</code> attribute set to <code>true</code>.  If not,\n * and the command has required parameters, the option will never\n * be accepted unless the required parameters are also specified.\n * <p>\n * <b>Notes on the {@link #processParsedOptions(boolean) processParsedOptions()}\n * method</b>\n * <p>\n * The following should be kept in mind when coding the <code>\n * processParsedOptions()</code> method:\n * <ul>\n *    <li>This method may never be reached.  If the <code>dieOnParseError</code>\n *        option is set <code>true</code> for the contained CmdLineHandler\n *        (which it is by default), a parse error will cause the program\n *        to exit before calling any <code>processParsedOptions()</code>\n *        methods.\n *    <li>If this method post-processes its option value and finds it to\n *        be in error, it should either call {@link #exitUsageError(String)\n *        exitUsageError()} or return false, as appropriate based on\n *        the value returned by {@link #getDieOnParseError()}.  For example:\n *        <pre>\n *    if ((errorMsg = postProcess(myOpt.getValue()) != null) {\n *        // oops - have an error condition\n *        if (getDieOnParseError()) {\n *            exitUsageError(errorMsg);\n *        } else {\n *            return false;\n *        }\n *    }\n *        </pre>\n *    <li>If this method does not call <code>System.exit()</code> or return\n *        its own error, it should\n *        always return the parse error that was passed to it.\n * </ul>\n *\n * @author          Lynne Lawrence\n * @version         jcmdline Rel. @VERSION@ $Id: AbstractHandlerDecorator.java,v 1.2 2002/12/07 14:22:06 lglawrence Exp $\n */\npublic abstract class AbstractHandlerDecorator implements CmdLineHandler {\n\n    /**\n     * the instance of CmdLineHandler this class decorates.\n     */\n    private CmdLineHandler handler;\n\n    /**\n     * options specific to a subclass\n     * @see #setCustomOptions(Parameter[]) setCustomOptions()\n     * @see #getCustomOptions()\n     */\n    private Parameter[] customOptions;\n\n    /**\n     * constructor\n     *\n     * @param handler       the CmdLineHandler to which most methods will be\n     *                      delegated\n     */\n    protected AbstractHandlerDecorator(CmdLineHandler handler) {\n        this.handler = handler;\n    }\n\n    /**\n     * Sets options specific to a subclass.\n     *\n     * @param customOptions      options specific to a subclass\n     * @see #getCustomOptions()\n     */\n    protected void setCustomOptions(Parameter[] customOptions) {\n        if (customOptions == null) {\n            customOptions = new Parameter[] {};\n        }\n        this.customOptions = customOptions;\n        for (int i = 0; i < customOptions.length; i++) {\n            handler.addOption(customOptions[i]);\n        }\n    }\n\n    /**\n     * Gets options specific to a subclass.\n     *\n     * @return              options specific to a subclass\n     * @see #setCustomOptions(Parameter[]) setCustomOptions()\n     */\n    protected Parameter[] getCustomOptions() {\n        return customOptions;\n    }\n\n    /**\n     * Called from the parse() method after the command line has been\n     * parsed.  This is where a subclass performs processing specific to\n     * its custom options.\n     *\n     * @param parseStatus   the results of the parse() call. Note that\n     *                      if <code>dieOnParseError</code> is set, or some\n     *                      other AbstractHandlerDecorator exits first, this\n     *                      method may never be called.\n     * @return              <code>true</code> if there were no problems\n     *                      concerning the custom options, else\n     *                      <code>false</code>.  The return value from this\n     *                      method will be returned from\n     *                      {@link #parse(String[]) parse()}.\n     */\n    protected abstract boolean processParsedOptions(boolean parseStatus);\n\n    /**\n     * Sets a flag indicating that the program should exit in the case of\n     * a parse error (after displaying the usage and an error message).\n     * This flag defaults to <code>true</code>.\n     *\n     * @param val           <code>true</code> (the default) if the <code>\n     *                      parse</code> method should call System.exit() in\n     *                      case of a parse error, <code>false</code> if\n     *                      <code>parse()</code> should return to the user\n     *                      for error processing.\n     * @see     #parse(String[]) parse()\n     */\n    public void setDieOnParseError(boolean val) {\n        handler.setDieOnParseError(val);\n    }\n\n    /**\n     * Gets a flag indicating that the program should exit in the case of\n     * a parse error (after displaying the usage and an error message).\n     *\n     * @return              <code>true</code> (the default) if the <code>\n     *                      parse</code> method should call System.exit() in\n     *                      case of a parse error, <code>false</code> if\n     *                      <code>parse()</code> should return to the user\n     *                      for error processing.\n     * @see     #parse(String[]) parse()\n     */\n    public boolean getDieOnParseError() {\n        return handler.getDieOnParseError();\n    }\n\n    /**\n     * parse the specified command line arguments\n     *\n     * @param clargs   command line arguments passed to the main() method\n     *                 of CmdLineHandler's creating class.\n     * @return  This method will exit, rather than returning, if one of the\n     *          following conditions is met:\n     *          <ul>\n     *          <li><i>-h</i>, or\n     *              <i>-h!</i>, or\n     *              <i>-?</i>,\n     *              are amongst the command line arguments - the\n     *              appropriate information is displayed on stdout,\n     *              and the program exits with status 0.\n     *          <li>OR, dieOnParseError is set to true AND:\n     *          <ul>\n     *              <li>a command line argument is incorrectly specified -\n     *                  an error message is displayed and the program\n     *                  exits with status 1.\n     *              <li>a required command line argument is missing - an error\n     *                  message is displayed and the program exits with status 1.\n     *          </ul>\n     *          </ul>\n     *          If <code>dieOnParseError</code> is set to <code>false</code>,\n     *          this method will return true if there are no parse errors.  If\n     *          there are parse errors, <code>false</code>is returned and\n     *          an appropriate error message may be obtained by calling\n     *          {@link #getParseError()}.\n     */\n    public boolean parse(String[] clargs) {\n        boolean parseStatus = handler.parse(clargs);\n        return processParsedOptions(parseStatus);\n    }\n\n    /**\n     * Sets the parser to be used to parse the command line.\n     *\n     * @param parser      the parser to be used to parse the command line\n     * @see #getParser()\n     */\n    public void setParser(CmdLineParser parser) {\n        handler.setParser(parser);\n    }\n\n    /**\n     * Gets the parser to be used to parse the command line.\n     *\n     * @return              the parser to be used to parse the command line\n     * @see #setParser(CmdLineParser) setParser()\n     */\n    public CmdLineParser getParser() {\n        return handler.getParser();\n    }\n\n    /**\n     * sets the value of the arguments (what is left on the command line after\n     * all options, and their parameters, have been processed) associated\n     * with the command\n     *\n     * @param args          A Collection of {@link Parameter} objects.  This may\n     *                      be null if the command accepts no command line\n     *                      arguments.\n     */\n    public void setArgs(Parameter[] args) {\n        handler.setArgs(args);\n    }\n\n    /**\n     * Adds a command line arguement.\n     *\n     * @param arg           the new command line argument\n     * @throws              IllegalArgumentException if <code>arg</code>\n     *                      is null.\n     */\n    public void addArg(Parameter arg) {\n        handler.addArg(arg);\n    }\n\n    /**\n     * gets the value of the arguments (what is left on the command line after\n     * all options, and their parameters, have been processed) associated\n     * with the command\n     *\n     * @return              the command's options\n     */\n    public List getArgs() {\n        return handler.getArgs();\n    }\n\n    /**\n     * gets the argument specified by <code>tag</code>\n     *\n     * @param tag           identifies the argument to be returned\n     * @return              The argument associated with <code>tag</code>.\n     *                      If no matching argument is found, null is returned.\n     */\n    public Parameter getArg(String tag) {\n        return handler.getArg(tag);\n    }\n\n    /**\n     * Sets the value of the options associated with the command\n     *\n     * @param options       A Collection of {@link Parameter} objects.  This may\n     *                      be null if the command accepts no command line\n     *                      options.\n     */\n    public void setOptions(Parameter[] options) {\n        handler.setOptions(options);\n        for (int i = 0; i < customOptions.length; i++) {\n            handler.addOption(customOptions[i]);\n        }\n    }\n\n    /**\n     * Adds a command line option.  If an option with same tag has already been\n     * added to this CmdLineHandler, this new option will override the old.\n     *\n     * @param opt           the new command line option\n     * @throws              IllegalArgumentException if the tag associated with\n     *                      <code>opt</code> has already been defined for an\n     *                      option.\n     */\n    public void addOption(Parameter opt) {\n        handler.addOption(opt);\n    }\n\n    /**\n     * gets the value of the options associated with the command\n     *\n     * @return              the command's options\n     */\n    public Collection getOptions() {\n        return handler.getOptions();\n    }\n\n    /**\n     * gets the option specified by <code>tag</code>\n     *\n     * @param tag           identifies the option to be returned\n     * @return              the option associated with <code>tag</code>\n     */\n    public Parameter getOption(String tag) {\n        return handler.getOption(tag);\n    }\n\n    /**\n     * sets a description of the command's purpose\n     *\n     * @param cmdDesc     a short description of the command's purpose\n     * @throws              IllegalArgumentException if <code>cmdDesc\n     *                      </code> is null or of 0 length.\n     */\n    public void setCmdDesc(String cmdDesc) {\n        handler.setCmdDesc(cmdDesc);\n    }\n\n    /**\n     * gets a description of the command's purpose\n     *\n     * @return              the command's description\n     */\n    public String getCmdDesc() {\n        return handler.getCmdDesc();\n    }\n\n    /**\n     * sets the value of the command name associated with this CmdLineHandler\n     *\n     * @param cmdName       the name of the command associated with this\n     *                      CmdLineHandler\n     * @throws              IllegalArgumentException if cmdName is null,\n     *                      or of 0 length\n     */\n    public void setCmdName(String cmdName) {\n        handler.setCmdName(cmdName);\n    }\n\n    /**\n     * gets the value of the command name associated with this CmdLineHandler\n     *\n     * @return              the command name\n     */\n    public String getCmdName() {\n        return handler.getCmdName();\n    }\n\n    /**\n     * Gets the usage statement associated with the command.\n     *\n     * @param hidden        indicates whether hidden options are to be included\n     *                      in the usage.\n     * @return              the usage statement associated with the command\n     */\n    public String getUsage(boolean hidden) {\n        return handler.getUsage(hidden);\n    }\n\n    /**\n     * Sets the error message from the last call to parse().\n     *\n     * @param parseError      the error message from the last call to parse()\n     * @see #getParseError()\n     */\n    public void setParseError(String parseError) {\n        handler.setParseError(parseError);\n    }\n\n    /**\n     * Gets the error message from the last call to parse().\n     *\n     * @return              the error message from the last call to parse()\n     */\n    public String getParseError() {\n        return handler.getParseError();\n    }\n\n    /**\n     * Prints the usage, followed by the specified error message, to stderr\n     * and exits the program with exit status = 1.  The error message will\n     * be prefaced with 'ERROR: '.\n     *\n     * @param errMsg        the error message\n     * @return              Doesn't return - exits the program with exit status\n     *                      of 1.\n     */\n    public void exitUsageError(String errMsg) {\n        handler.exitUsageError(errMsg);\n    }\n}\n",
		"id": "EvoSuiteBenchmark/109_pdfsam/src/main/java/jcmdline/AbstractHandlerDecoratorTest.java",
		"test_prompt": "// AbstractHandlerDecoratorTest.java\npackage jcmdline;\n\nimport java.util.Collection;\nimport java.util.List;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link AbstractHandlerDecorator}.\n* It contains ten unit test cases for the {@link AbstractHandlerDecorator#parse(String[])} method.\n*/\nclass AbstractHandlerDecoratorTest {"
	},
	{
		"original_code": "// DateParam.java\n/*\n * DateParam.java\n *\n * jcmdline Rel. @VERSION@ $Id: DateParam.java,v 1.2 2002/12/07 14:22:06 lglawrence Exp $\n *\n * Classes:\n *   public   DateParam\n *   \n * ***** BEGIN LICENSE BLOCK *****\n * Version: MPL 1.1\n *\n * The contents of this file are subject to the Mozilla Public License Version\n * 1.1 (the \"License\"); you may not use this file except in compliance with\n * the License. You may obtain a copy of the License at\n * http://www.mozilla.org/MPL/\n *\n * Software distributed under the License is distributed on an \"AS IS\" basis,\n * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License\n * for the specific language governing rights and limitations under the\n * License.\n *\n * The Original Code is the Java jcmdline (command line management) package.\n *\n * The Initial Developer of the Original Code is Lynne Lawrence.\n * \n * Portions created by the Initial Developer are Copyright (C) 2002\n * the Initial Developer. All Rights Reserved.\n *\n * Contributor(s):  Lynne Lawrence <lgl@visuallink.com>\n *\n * ***** END LICENSE BLOCK *****\n */\npackage jcmdline;\n\nimport java.text.DecimalFormat;\nimport java.text.ParseException;\nimport java.text.SimpleDateFormat;\nimport java.util.Collection;\nimport java.util.Date;\nimport java.util.Iterator;\n\n/**\n * A parameter that accepts a date as its value.\n * <p>\n * The format for the date is taken from the <code>strings</code>\n * ResourceBundle.\n *  <p>\n *  Sample Usage:\n *  <pre>\n *     DateParam startDateParam =\n *         new DateParam(\"startDate\",\n *                       \"start date of report\",\n *                       DateParam.REQUIRED);\n *     DateParam endDateParam =\n *         new DateParam(\"endDate\",\n *                       \"end date of report\",\n *                       DateParam.REQUIRED);\n *\n *     // Time for startDate will be the beginning of the day by default.\n *     // Set the time for the end of the report to be the end of the day.\n *     endDateParam.setDefaultTime(23, 59, 58, 999);\n *\n *     CmdLineHandler cl = new DefaultCmdLineHandler(\n *         \"myreport\", \"report of activity over days\",\n *         new Parameter[] {},\n *         new Parameter[] { startDateParam, endDateParam });\n *\n *     cl.parse();\n *\n *     // Don't need to check isSet() because params are REQUIRED\n *     Date stDate = startDateParam.getDate();\n *     Date enDate = endDateParam.getDate();\n *     .\n *     .\n *  </pre>\n *\n * @author          Lynne Lawrence\n * @version         jcmdline Rel. @VERSION@ $Id: DateParam.java,v 1.2 2002/12/07 14:22:06 lglawrence Exp $\n * @see DateTimeParam\n * @see TimeParam\n */\npublic class DateParam extends AbstractParameter {\n\n    private static final String sDateFmt = Strings.get(\"DateParam.dateFormat\");\n\n    private static final String sTimeFmt = \"HH:mm:ss:SSS\";\n\n    private static final SimpleDateFormat dateFmt = new SimpleDateFormat(sDateFmt);\n\n    private static final SimpleDateFormat dateFmtWTime = new SimpleDateFormat(sDateFmt + \" \" + sTimeFmt);\n\n    private static final DecimalFormat hmsFmt = new DecimalFormat(\"00\");\n\n    private static final DecimalFormat msFmt = new DecimalFormat(\"000\");\n\n    private Date date = null;\n\n    /**\n     * The default hours to be added to the date - defaults to 0\n     * @see #setDefaultTime(int,int,int,int) setDefaultTime()\n     * @see #getDefaultTime()\n     */\n    private int defaultHours = 0;\n\n    /**\n     * The default minutes to be added to the date - defaults to 0\n     * @see #setDefaultTime(int,int,int,int) setDefaultTime()\n     * @see #getDefaultTime()\n     */\n    private int defaultMinutes = 0;\n\n    /**\n     * The default seconds to be added to the date - defaults to 0\n     * @see #setDefaultTime(int,int,int,int) setDefaultTime()\n     * @see #getDefaultTime()\n     */\n    private int defaultSeconds = 0;\n\n    /**\n     * The default milliseconds to be added to the date - defaults to 0\n     * @see #setDefaultTime(int,int,int,int) setDefaultTime()\n     * @see #getDefaultTime()\n     */\n    private int defaultMilliSeconds = 0;\n\n    /**\n     * constructor - creates single-valued, optional, public\n     * parameter\n     *\n     * @param tag           a unique identifier for this parameter\n     * @param desc          a description of the parameter, suitable for display\n     *                      in a usage statement\n     * @throws              IllegalArgumentException if <code>tag</code>\n     *                      or <desc> are invalid.\n     * @see                 AbstractParameter#setTag(String) setTag()\n     * @see                 AbstractParameter#setDesc(String) setDesc()\n     */\n    public DateParam(String tag, String desc) {\n        this(tag, desc, OPTIONAL, SINGLE_VALUED, PUBLIC);\n    }\n\n    /**\n     * constructor - creates single-valued, public parameter which will\n     * will be either optional or required, as specified.\n     *\n     * @param tag           a unique identifier for this parameter\n     * @param desc          a description of the parameter, suitable for display\n     *                      in a usage statement\n     * @param optional      {@link Parameter#OPTIONAL OPTIONAL} if\n     *                      optional,\n     *                      {@link Parameter#REQUIRED REQUIRED} if required\n     * @throws              IllegalArgumentException if any of the specified\n     *                      parameters are invalid.\n     * @see                 AbstractParameter#setTag(String) setTag()\n     * @see                 AbstractParameter#setDesc(String) setDesc()\n     */\n    public DateParam(String tag, String desc, boolean optional) {\n        this(tag, desc, optional, SINGLE_VALUED, PUBLIC);\n    }\n\n    /**\n     * constructor - creates a public parameter which will\n     * will be either optional or required, and/or multi-valued, as specified.\n     *\n     * @param tag           a unique identifier for this parameter\n     * @param desc          a description of the parameter, suitable for display\n     *                      in a usage statement\n     * @param optional      {@link Parameter#OPTIONAL OPTIONAL} if\n     *                      optional,\n     *                      {@link Parameter#REQUIRED REQUIRED} if required\n     * @param multiValued   {@link Parameter#MULTI_VALUED MULTI_VALUED} if\n     *                      the parameter can accept multiple values,\n     *                      {@link Parameter#SINGLE_VALUED SINGLE_VALUED}\n     *                      if the parameter can contain only a single value\n     * @throws              IllegalArgumentException if any of the specified\n     *                      parameters are invalid.\n     * @see                 AbstractParameter#setTag(String) setTag()\n     * @see                 AbstractParameter#setDesc(String) setDesc()\n     * @see                 Parameter#SINGLE_VALUED SINGLE_VALUED\n     * @see                 Parameter#MULTI_VALUED MULTI_VALUED\n     */\n    public DateParam(String tag, String desc, boolean optional, boolean multiValued) {\n        this(tag, desc, optional, multiValued, PUBLIC);\n    }\n\n    /**\n     * constructor - creates a parameter which will\n     * will be either optional or required, single or multi-valued, and\n     * hidden or public as specified.\n     *\n     * @param tag           a unique identifier for this parameter\n     * @param desc          a description of the parameter, suitable for display\n     *                      in a usage statement\n     * @param optional      {@link Parameter#OPTIONAL OPTIONAL} if\n     *                      optional,\n     *                      {@link Parameter#REQUIRED REQUIRED} if required\n     * @param multiValued   {@link Parameter#MULTI_VALUED MULTI_VALUED} if\n     *                      the parameter can accept multiple values,\n     *                      {@link Parameter#SINGLE_VALUED SINGLE_VALUED}\n     *                      if the parameter can contain only a single value\n     * @param hidden        {@link Parameter#HIDDEN HIDDEN} if parameter is\n     *                      not to be listed in the usage,\n     *                      {@link Parameter#PUBLIC PUBLIC} otherwise.\n     * @throws              IllegalArgumentException if any of the specified\n     *                      parameters are invalid.\n     * @see                 AbstractParameter#setTag(String) setTag()\n     * @see                 AbstractParameter#setDesc(String) setDesc()\n     * @see                 Parameter#SINGLE_VALUED SINGLE_VALUED\n     * @see                 Parameter#MULTI_VALUED MULTI_VALUED\n     * @see                 Parameter#HIDDEN HIDDEN\n     * @see                 Parameter#PUBLIC PUBLIC\n     */\n    public DateParam(String tag, String desc, boolean optional, boolean multiValued, boolean hidden) {\n        this.setTag(tag);\n        this.setDesc(desc);\n        this.setOptional(optional);\n        this.setMultiValued(multiValued);\n        this.setHidden(hidden);\n        this.setOptionLabel(sDateFmt);\n    }\n\n    /**\n     * constructor - creates a single-valued, optional, public,\n     * number parameter whose value must be one of the specified values.\n     *\n     * @param tag           the tag associated with this parameter\n     * @param desc          a description of the parameter, suitable for display\n     *                      in a usage statement\n     * @param acceptableValues  the acceptable values for the parameter\n     * @throws              IllegalArgumentException if any parameter is\n     *                      invalid.\n     * @see                 AbstractParameter#setTag(String) setTag()\n     * @see                 AbstractParameter#setDesc(String) setDesc()\n     * @see                 #setAcceptableDates(Date[]) setAcceptableDates()\n     */\n    public DateParam(String tag, String desc, Date[] acceptableValues) {\n        this(tag, desc, acceptableValues, OPTIONAL, SINGLE_VALUED, PUBLIC);\n    }\n\n    /**\n     * constructor - creates a single-valued, public,\n     * number parameter whose value must be one of the specified values,\n     * and which is required or optional, as specified.\n     *\n     * @param tag           the tag associated with this parameter\n     * @param desc          a description of the parameter, suitable for display\n     *                      in a usage statement\n     * @param acceptableValues  the acceptable values for the parameter\n     * @param optional      {@link Parameter#OPTIONAL OPTIONAL} if\n     *                      optional,\n     *                      {@link Parameter#REQUIRED REQUIRED} if required\n     * @throws              IllegalArgumentException if any parameter is\n     *                      invalid.\n     * @see                 AbstractParameter#setTag(String) setTag()\n     * @see                 AbstractParameter#setDesc(String) setDesc()\n     * @see                 #setAcceptableDates(Date[]) setAcceptableDates()\n     * @see                 Parameter#OPTIONAL OPTIONAL\n     * @see                 Parameter#REQUIRED REQUIRED\n     */\n    public DateParam(String tag, String desc, Date[] acceptableValues, boolean optional) {\n        this(tag, desc, acceptableValues, optional, SINGLE_VALUED, PUBLIC);\n    }\n\n    /**\n     * constructor - creates a public\n     * number parameter whose value must be one of the specified values,\n     * and which is required or optional and/or multi-valued, as specified.\n     *\n     * @param tag           the tag associated with this parameter\n     * @param desc          a description of the parameter, suitable for display\n     *                      in a usage statement\n     * @param acceptableValues  the acceptable values for the parameter\n     * @param optional      {@link Parameter#OPTIONAL OPTIONAL} if\n     *                      optional,\n     *                      {@link Parameter#REQUIRED REQUIRED} if required\n     * @param multiValued   {@link Parameter#MULTI_VALUED MULTI_VALUED} if\n     *                      the parameter can accept multiple values,\n     *                      {@link Parameter#SINGLE_VALUED SINGLE_VALUED}\n     *                      if the parameter can contain only a single value\n     * @throws              IllegalArgumentException if any parameter is\n     *                      invalid.\n     * @see                 AbstractParameter#setTag(String) setTag()\n     * @see                 AbstractParameter#setDesc(String) setDesc()\n     * @see                 #setAcceptableDates(Date[]) setAcceptableDates()\n     * @see                 Parameter#OPTIONAL OPTIONAL\n     * @see                 Parameter#REQUIRED REQUIRED\n     * @see                 Parameter#SINGLE_VALUED SINGLE_VALUED\n     * @see                 Parameter#MULTI_VALUED MULTI_VALUED\n     */\n    public DateParam(String tag, String desc, Date[] acceptableValues, boolean optional, boolean multiValued) {\n        this(tag, desc, acceptableValues, optional, multiValued, PUBLIC);\n    }\n\n    /**\n     * constructor - creates a\n     * Parameter, all of whose options are specified.\n     *\n     * @param tag           the tag associated with this parameter\n     * @param desc          a description of the parameter, suitable for display\n     *                      in a usage statement\n     * @param acceptableValues  the acceptable values for the parameter\n     * @param optional      {@link Parameter#OPTIONAL OPTIONAL} if\n     *                      optional,\n     *                      {@link Parameter#REQUIRED REQUIRED} if required\n     * @param multiValued   {@link Parameter#MULTI_VALUED MULTI_VALUED} if\n     *                      the parameter can accept multiple values,\n     *                      {@link Parameter#SINGLE_VALUED SINGLE_VALUED}\n     *                      if the parameter can contain only a single value\n     * @param hidden        {@link Parameter#HIDDEN HIDDEN} if parameter is\n     *                      not to be listed in the usage,\n     *                      {@link Parameter#PUBLIC PUBLIC} otherwise.\n     * @throws              IllegalArgumentException if any parameter is\n     *                      invalid.\n     * @see                 AbstractParameter#setTag(String) setTag()\n     * @see                 AbstractParameter#setDesc(String) setDesc()\n     * @see                 #setAcceptableDates(Date[]) setAcceptableDates()\n     * @see                 Parameter#OPTIONAL OPTIONAL\n     * @see                 Parameter#REQUIRED REQUIRED\n     * @see                 Parameter#SINGLE_VALUED SINGLE_VALUED\n     * @see                 Parameter#MULTI_VALUED MULTI_VALUED\n     * @see                 Parameter#HIDDEN HIDDEN\n     * @see                 Parameter#PUBLIC PUBLIC\n     */\n    public DateParam(String tag, String desc, Date[] acceptableValues, boolean optional, boolean multiValued, boolean hidden) {\n        this.setTag(tag);\n        this.setAcceptableDates(acceptableValues);\n        this.setDesc(desc);\n        this.setOptional(optional);\n        this.setMultiValued(multiValued);\n        this.setHidden(hidden);\n        this.setOptionLabel(sDateFmt);\n    }\n\n    /**\n     * Verifies that <code>value</code> is valid for this entity - called by\n     * add/setValue(s)().\n     *\n     * @param value         the value to be validated\n     * @throws              CmdLineException if <code>value</code> is not valid.\n     */\n    public void validateValue(String val) throws CmdLineException {\n        super.validateValue(val);\n        try {\n            stringToDate(val);\n        } catch (ParseException e) {\n            throw new CmdLineException(Strings.get(\"DateParam.invalidDate\", new Object[] { getTag(), sDateFmt }));\n        }\n    }\n\n    /**\n     * Returns the value of this Parameter as a java.util.Date object.\n     * Should there be more than one value for this Parameter, the first\n     * value will be returned.\n     *\n     * @return              the value of this Parameter as a Date object\n     */\n    public Date getDate() {\n        String sVal = getValue();\n        Date date = null;\n        if (sVal != null) {\n            try {\n                date = stringToDate(sVal);\n            } catch (ParseException e) {\n                // Should never get here because all values would have been\n                // parsed as part of validateValue().\n                throw new RuntimeException(e);\n            }\n        }\n        return date;\n    }\n\n    /**\n     * Returns the values of this Parameter as java.util.Date objects.\n     *\n     * @return              The values of this Parameter as Date objects.  Note\n     *                      the the return value may be an empty array if no\n     *                      values have been set.\n     */\n    public Date[] getDates() {\n        Collection sVals = getValues();\n        Date[] dates = new Date[sVals.size()];\n        int i = 0;\n        for (Iterator itr = sVals.iterator(); itr.hasNext(); ) {\n            try {\n                dates[i] = stringToDate((String) itr.next());\n                i++;\n            } catch (ParseException e) {\n                // Should never get here because all values would have been\n                // parsed as part of validateValue().\n                throw new RuntimeException(e);\n            }\n        }\n        return dates;\n    }\n\n    /**\n     * Gets the format used to parse the date/time values.\n     *\n     * @return              the format used to parse the date/time values\n     */\n    public static String getParseFormat() {\n        return dateFmt.toLocalizedPattern();\n    }\n\n    /**\n     * Sets the values that will be acceptable for this Parameter using\n     * Date objects.  Any time portion of the Date objects will be stripped.\n     *\n     * @param dates         an array of acceptable dates\n     */\n    public void setAcceptableDates(Date[] dates) {\n        String[] sDates = new String[dates.length];\n        for (int i = 0; i < dates.length; i++) {\n            sDates[i] = dateFmt.format(dates[i]);\n        }\n        super.setAcceptableValues(sDates);\n    }\n\n    /**\n     * Gets the acceptable values as Date objects.\n     *\n     * @return              The acceptable values as an array of Date objects.\n     *                      Note that null is returned if acceptable\n     *                      values have not been set.\n     */\n    public Date[] getAcceptableDates() {\n        String[] sVals = getAcceptableValues();\n        if (sVals == null) {\n            return null;\n        }\n        Date[] dates = new Date[sVals.length];\n        for (int i = 0; i < sVals.length; i++) {\n            try {\n                dates[i] = stringToDate(sVals[i]);\n            } catch (Exception e) {\n                // should never get here - acceptable values parsed on the\n                // way in\n                throw new RuntimeException(e);\n            }\n        }\n        return dates;\n    }\n\n    /**\n     * Sets acceptable values for this Parameter from a Collection of\n     * Date objects.  Any time portion of the Date objects will be stripped.\n     *\n     * @param vals          a Collection of java.util.Date objects representing\n     *                      the acceptable values.\n     * @throws  ClassCastException if any member of <code>vals</code> is not\n     *          a Date object.\n     */\n    public void setAcceptableDates(Collection vals) {\n        String[] sVals = new String[vals.size()];\n        int i = 0;\n        for (Iterator itr = vals.iterator(); itr.hasNext(); ) {\n            date = (Date) itr.next();\n            sVals[i] = dateFmt.format(date);\n            i++;\n        }\n        super.setAcceptableValues(sVals);\n    }\n\n    /**\n     * Unsupported.  This method is unsupported because, with the date format\n     * coming from a resource bundle, it is not reasonable to code string\n     * values for acceptable values - better to use Date objects.\n     *\n     * @throws  UnsupportedOperationException\n     * @see #setAcceptableDates(Date[])\n     * @see #setAcceptableDates(Collection)\n     */\n    public void setAcceptableValues(Collection vals) {\n        throw new UnsupportedOperationException();\n    }\n\n    /**\n     * Unsupported.  This method is unsupported because, with the date format\n     * coming from a resource bundle, it is not reasonable to code string\n     * values for acceptable values - better to use Date objects.\n     *\n     * @throws  UnsupportedOperationException\n     * @see #setAcceptableDates(Date[])\n     * @see #setAcceptableDates(Collection)\n     */\n    public void setAcceptableValues(String[] vals) {\n        throw new UnsupportedOperationException();\n    }\n\n    /**\n     * Sets default values for the time component used to generate the Date\n     * value.\n     *\n     * @param h             the hours - 0-23 - defaults to 0\n     * @param m             the minutes - 0-59 - defaults to 0\n     * @param s             the seconds - 0-59 - defaults to 0\n     * @param ms            the milliseconds - 0-999 - defaults to 0\n     * @throws  IllegalArgumentException if any of the parameters are in\n     *          error.\n     */\n    public void setDefaultTime(int h, int m, int s, int ms) {\n        if (h < 0 || h > 23) {\n            throw new IllegalArgumentException(Strings.get(\"DateParam.invalidHours\", new Object[] { new Integer(h) }));\n        }\n        if (m < 0 || m > 59) {\n            throw new IllegalArgumentException(Strings.get(\"DateParam.invalidMinutes\", new Object[] { new Integer(m) }));\n        }\n        if (s < 0 || s > 59) {\n            throw new IllegalArgumentException(Strings.get(\"DateParam.invalidSeconds\", new Object[] { new Integer(s) }));\n        }\n        if (ms < 0 || ms > 999) {\n            throw new IllegalArgumentException(Strings.get(\"DateParam.invalidMilliSeconds\", new Object[] { new Integer(ms) }));\n        }\n        defaultHours = h;\n        defaultMinutes = m;\n        defaultSeconds = s;\n        defaultMilliSeconds = ms;\n    }\n\n    /**\n     * Gets default values for the time component used to generate the Date\n     * value.\n     *\n     * @return  a 4 element <code>int</code> array, where the elements are\n     *          the default hours, minutes, seconds, and milliseconds, in\n     *          that order\n     */\n    public int[] getDefaultTime() {\n        return new int[] { defaultHours, defaultMinutes, defaultSeconds, defaultMilliSeconds };\n    }\n\n    /**\n     * Converts a String value to its Date equivalent, filling in default\n     * seconds and milliseconds as necessary.\n     *\n     * @param val           the String to be converted\n     * @return              the Date object represented by <code>val</code>\n     * @throws  ParseException if <code>val</code> will not parse to a Date.\n     */\n    private Date stringToDate(String val) throws ParseException {\n        String sTime = hmsFmt.format(defaultHours) + \":\" + hmsFmt.format(defaultMinutes) + \":\" + hmsFmt.format(defaultSeconds) + \":\" + msFmt.format(defaultMilliSeconds);\n        return dateFmtWTime.parse(val + \" \" + sTime);\n    }\n}\n",
		"id": "EvoSuiteBenchmark/109_pdfsam/src/main/java/jcmdline/DateParamTest.java",
		"test_prompt": "// DateParamTest.java\npackage jcmdline;\n\nimport java.text.DecimalFormat;\nimport java.text.ParseException;\nimport java.text.SimpleDateFormat;\nimport java.util.Collection;\nimport java.util.Date;\nimport java.util.Iterator;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link DateParam}.\n* It contains ten unit test cases for the {@link DateParam#getParseFormat()} method.\n*/\nclass DateParamTest {"
	},
	{
		"original_code": "// BooleanParam.java\n/*\n * BooleanParam.java\n *\n * Classes:\n *   public   BooleanParam\n *   \n * ***** BEGIN LICENSE BLOCK *****\n * Version: MPL 1.1\n *\n * The contents of this file are subject to the Mozilla Public License Version\n * 1.1 (the \"License\"); you may not use this file except in compliance with\n * the License. You may obtain a copy of the License at\n * http://www.mozilla.org/MPL/\n *\n * Software distributed under the License is distributed on an \"AS IS\" basis,\n * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License\n * for the specific language governing rights and limitations under the\n * License.\n *\n * The Original Code is the Java jcmdline (command line management) package.\n *\n * The Initial Developer of the Original Code is Lynne Lawrence.\n * \n * Portions created by the Initial Developer are Copyright (C) 2002\n * the Initial Developer. All Rights Reserved.\n *\n * Contributor(s):  Lynne Lawrence <lgl@visuallink.com>\n *\n * ***** END LICENSE BLOCK *****\n */\npackage jcmdline;\n\n/**\n * Encapsulate a boolean command line parameter.  This parameter defaults\n * to \"false\" if not set by the user.\n * <p>\n * Sample usage:\n * <pre>\n *    BooleanParam deleteOpt =\n *        new BooleanParam(&quot;delete&quot;, &quot;delete original file&quot;);\n *    FileParam outfileOpt =\n *        new FileParam(&quot;outfile&quot;, &quot;the outfile file - defaults to stdout&quot;,\n *                      FileParam.DOESNT_EXIST);\n *    FileParam infileArg =\n *        new FileParam(&quot;infile&quot;, &quot;the input file - defaults to stdin&quot;,\n *                      FileParam.IS_READABLE &amp; FileParam.IS_FILE);\n *    CmdLineHandler clh = new DefaultCmdLineHandler(\n *        &quot;filter&quot;,\n *        &quot;filters files for obscenities&quot;,\n *        new Parameter[] { deleteOpt, outfileOpt },\n *        new Parameter[] { infileArg }\n *    );\n *    clh.parse(args);\n *    if (deleteOpt.isTrue()) {\n *        ....\n *    }\n * </pre>\n *\n * @author          Lynne Lawrence\n * @version         jcmdline Rel. @VERSION@ $Id: BooleanParam.java,v 1.2 2002/12/07 14:22:06 lglawrence Exp $\n * @see CmdLineParser\n */\npublic class BooleanParam extends AbstractParameter implements OptionTakesNoValue {\n\n    /**\n     * The String value associated with boolean true (i.e. \"true\" in English).\n     */\n    private String trueValue = Strings.get(\"BooleanParam.true\");\n\n    /**\n     * The String value associated with boolean false (i.e. \"false\" in English).\n     */\n    private String falseValue = Strings.get(\"BooleanParam.false\");\n\n    /**\n     * constructor - creates a public boolean parameter\n     *\n     * @param tag           a unique identifier for this parameter\n     * @param desc          a description of the parameter, suitable for display\n     *                      in a usage statement\n     * @throws              IllegalArgumentException if any specified\n     *                      parameter is invalid.\n     * @see                 AbstractParameter#setTag(String) setTag()\n     * @see                 AbstractParameter#setDesc(String) setDesc()\n     */\n    public BooleanParam(String tag, String desc) {\n        this(tag, desc, PUBLIC);\n    }\n\n    /**\n     * constructor - creates a boolean parameter that is public or hidden, as\n     * specified\n     *\n     * @param tag           a unique identifier for this parameter\n     * @param desc          a description of the parameter, suitable for display\n     *                      in a usage statement\n     * @param hidden        {@link Parameter#HIDDEN HIDDEN} if parameter is\n     *                      not to be listed in the usage,\n     *                      {@link Parameter#PUBLIC PUBLIC}\n     *                      otherwise.\n     * @throws              IllegalArgumentException if any specified\n     *                      parameter is invalid.\n     * @see                 AbstractParameter#setTag(String) setTag()\n     * @see                 AbstractParameter#setDesc(String) setDesc()\n     * @see                 Parameter#HIDDEN HIDDEN\n     * @see                 Parameter#PUBLIC PUBLIC\n     */\n    public BooleanParam(String tag, String desc, boolean hidden) {\n        this.setTag(tag);\n        this.setDesc(desc);\n        this.setOptional(optional);\n        this.setMultiValued(SINGLE_VALUED);\n        this.setHidden(hidden);\n        this.setOptionLabel(\"\");\n        this.setAcceptableValues(new String[] { trueValue, falseValue });\n        try {\n            // defaults to false\n            this.addValue(falseValue);\n            this.set = false;\n        } catch (Exception e) {\n            // Should never get here\n            throw new RuntimeException(Strings.get(\"BooleanParam.setValueProgError\"));\n        }\n    }\n\n    /**\n     * Sets the specified string as a value for this BooleanParam.  Any\n     * previously set value will be discarded.\n     *\n     * @param value the value to be set\n     * @throws      CmdLineException\n     *              if {@link #validateValue(String) validateValue()}\n     *              detects a problem.\n     */\n    public void addValue(String value) throws CmdLineException {\n        validateValue(value);\n        values.clear();\n        values.add(value);\n        set = true;\n    }\n\n    /**\n     * Gets the default value of this Parameter when used as a command line\n     * option, and specified just by its tag.\n     *\n     * @return              the default value of this Parameter\n     * @see                 OptionTakesNoValue\n     */\n    public String getDefaultValue() {\n        return trueValue;\n    }\n\n    /**\n     * Returns the value of the parameter as a boolean.\n     *\n     * @return              the parameter value as a boolean\n     */\n    public boolean isTrue() {\n        return (values.get(0).equals(trueValue) ? true : false);\n    }\n\n    /**\n     * Verifies that <code>value</code> is either \"true\" or \"false\" -\n     * called by add/setValue(s)().\n     *\n     * @param value         the value to be validated\n     * @throws              CmdLineException if <code>value</code> is not valid.\n     */\n    public void validateValue(String value) throws CmdLineException {\n        super.validateValue(value);\n    }\n}\n",
		"id": "EvoSuiteBenchmark/109_pdfsam/src/main/java/jcmdline/BooleanParamTest.java",
		"test_prompt": "// BooleanParamTest.java\npackage jcmdline;\n\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link BooleanParam}.\n* It contains ten unit test cases for the {@link BooleanParam#isTrue()} method.\n*/\nclass BooleanParamTest {"
	},
	{
		"original_code": "// AbstractParameter.java\n/*\n * AbstractParameter.java\n *\n * Classes:\n *   public   AbstractParameter\n *   \n * ***** BEGIN LICENSE BLOCK *****\n * Version: MPL 1.1\n *\n * The contents of this file are subject to the Mozilla Public License Version\n * 1.1 (the \"License\"); you may not use this file except in compliance with\n * the License. You may obtain a copy of the License at\n * http://www.mozilla.org/MPL/\n *\n * Software distributed under the License is distributed on an \"AS IS\" basis,\n * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License\n * for the specific language governing rights and limitations under the\n * License.\n *\n * The Original Code is the Java jcmdline (command line management) package.\n *\n * The Initial Developer of the Original Code is Lynne Lawrence.\n * \n * Portions created by the Initial Developer are Copyright (C) 2002\n * the Initial Developer. All Rights Reserved.\n *\n * Contributor(s):  Lynne Lawrence <lgl@visuallink.com>\n *\n * ***** END LICENSE BLOCK *****\n */\npackage jcmdline;\n\nimport java.util.ArrayList;\nimport java.util.Collection;\nimport java.util.Iterator;\n\n/**\n * Base class for command line parameters.\n * <P>\n *  To implement a concrete Parameter class by subclassing this class,\n *  the following should be done:\n *  <ul>\n *     <li>Override the {@link #validateValue(String) validateValue()} method.\n *         This method is called any time an attempt is made to add or set\n *         values.\n *     <li>Implement constructors applicable for the new type of Parameter.\n *     <li>Call {@link #setOptionLabel(String) setOptionLabel()} from the\n *         constructors to set a\n *         reasonable option label for the new type of parameter.\n *     <li>Provide type-specific access methods for retrieval of the Parameter\n *         value.  For instance, {@link FileParam} provides the\n *         <code>getFiles()</code> method to retrieve its values as <code>File\n *         </code> objects.\n *  </ul>\n * <p>\n * A simple Parameter class that accepts only strings of a specified length\n * might look as follows:\n * <pre>\n * public class FixedLenParam extends AbstractParameter {\n *\n *     private int length;\n *\n *     public FixedLenParam(String tag, String desc, int length) {\n *         setTag(tag);\n *         setDesc(desc);\n *         this.length = length;\n *         setOptionLabel(\"&lt;s&gt;\");\n *     }\n *\n *     public void validateValue(String val) throws CmdLineException {\n *         super.validateValue(val); // check acceptable values, etc..\n *         if (val.length() != length) {\n *             throw new CmdLineException(getTag() + \" must be a string of \" +\n *                                        length + \" characters in length\");\n *         }\n *\n *     }\n * }\n * </pre>\n *\n * @author          Lynne Lawrence\n * @version         jcmdline Rel. @VERSION@ $Id: AbstractParameter.java,v 1.2 2002/12/07 14:22:06 lglawrence Exp $\n */\npublic abstract class AbstractParameter implements Parameter {\n\n    /**\n     * the tag which uniquely identifies the parameter, and will be used to\n     * identify the parameter on the command line if the parameter is used\n     * as an option\n     */\n    protected String tag;\n\n    /**\n     * Indicates whether or not the parameter is optional.  The default is\n     * <code>true</code>, indicating that the parameter is optional.\n     */\n    protected boolean optional = true;\n\n    /**\n     * Indicates whether the parameter can have multiple values.\n     * The default is\n     * false, indicating that the parameter can only accept a single value.\n     */\n    protected boolean multiValued = false;\n\n    /**\n     * a description of the parameter to be displayed in the usage\n     */\n    protected String desc;\n\n    /**\n     * indicates that the parameter is hidden and will not be displayed in the\n     * normal usage - default is <code>false</code>\n     */\n    protected boolean hidden = false;\n\n    /**\n     * indicates that the value of the parameter has been set\n     */\n    protected boolean set;\n\n    /**\n     * the value(s) of the entity\n     */\n    protected ArrayList values = new ArrayList();\n\n    /**\n     * The label that should be used for a Parameter option's value in the\n     * usage\n     * @see #setOptionLabel(String) setOptionLabel()\n     * @see #getOptionLabel()\n     */\n    protected String optionLabel = null;\n\n    /**\n     * a set of restricted values the Parameter may take\n     * @see #setAcceptableValues(String[]) setAcceptableValues()\n     * @see #getAcceptableValues()\n     */\n    protected String[] acceptableValues;\n\n    /**\n     * During parse, ignore missing required Parameters if this Parameter is\n     * set.  Typically used by Parameters that cause an action then call\n     * System.exit(), like \"-help\".\n     * @see #setIgnoreRequired(boolean) setIgnoreRequired()\n     * @see #getIgnoreRequired()\n     */\n    protected boolean ignoreRequired;\n\n    /**\n     * gets an indicator that the parameter's value has been set\n     *\n     * @return              true if the parameter's value has been set, false\n     *                      otherwise\n     */\n    public boolean isSet() {\n        return set;\n    }\n\n    /**\n     * sets the value of the hidden indicator\n     *\n     * @param hidden    true ({@link #HIDDEN}) if the parameter is a\n     *                  hidden parameter\n     */\n    public void setHidden(boolean hidden) {\n        this.hidden = hidden;\n    }\n\n    /**\n     * gets the value of the hidden indicator\n     *\n     * @return          true ({@link #HIDDEN}) if the parameter is a\n     *                  hidden parameter\n     */\n    public boolean isHidden() {\n        return hidden;\n    }\n\n    /**\n     * sets the value of this parameter's description\n     *\n     * @param desc      a description of the parameter, suitable for display in\n     *                  the command's usage\n     * @throws          IllegalArgumentException if <code>desc</code> is\n     *                  fewer than 5 charaters.\n     */\n    public void setDesc(String desc) throws IllegalArgumentException {\n        int minDescLen = 5;\n        if (desc.length() < minDescLen) {\n            throw new IllegalArgumentException(Strings.get(\"AbstractParameter.descTooShort\", new Object[] { tag }));\n        }\n        this.desc = desc;\n    }\n\n    /**\n     * gets the value of the parameter's description\n     *\n     * @return              this parameter's description\n     */\n    public String getDesc() {\n        return desc;\n    }\n\n    /**\n     * sets the value of tag\n     *\n     * @param tag       a unique identifier for this parameter.  If the\n     *                  parameter is used as an option, it will be used to\n     *                  identify the option on the command line.  In the case\n     *                  where the parameter is used as an argument, it will\n     *                  only be used to identify the argument in the usage\n     *                  statement.  Tags must be made up of any character but\n     *                  '='.\n     * @throws          IllegalArgumentException if the length of <code>tag\n     *                  </code> is less than 1, or <code>tag</code> contains an\n     *                  invalid character.\n     */\n    public void setTag(String tag) throws IllegalArgumentException {\n        if (tag == null || tag.length() < 1) {\n            throw new IllegalArgumentException(Strings.get(\"AbstractParameter.emptyTag\"));\n        }\n        if (tag.indexOf(\"=\") != -1) {\n            throw new IllegalArgumentException(Strings.get(\"AbstractParameter.illegalCharInTag\", new Object[] { tag, \"=\" }));\n        }\n        this.tag = tag;\n    }\n\n    /**\n     * gets the value of tag\n     *\n     * @return          a unique identifier for this parameter\n     * @see             #setTag(String) setTag()\n     */\n    public String getTag() {\n        return tag;\n    }\n\n    /**\n     * sets the value of the multiValued indicator\n     *\n     * @param multiValued      true if the parameter can have multiple values\n     */\n    public void setMultiValued(boolean multiValued) {\n        this.multiValued = multiValued;\n    }\n\n    /**\n     * gets the value of multiValued indicator\n     *\n     * @return              true if the parameter can have multiple values\n     */\n    public boolean isMultiValued() {\n        return multiValued;\n    }\n\n    /**\n     * indicates whether or not the parameter is optional\n     *\n     * @param optional      true if the parameter is optional\n     */\n    public void setOptional(boolean optional) {\n        this.optional = optional;\n    }\n\n    /**\n     * returns the value of the optional indicator\n     *\n     * @return              true if the parameter is optional\n     */\n    public boolean isOptional() {\n        return optional;\n    }\n\n    /**\n     * Gets the values that are acceptable for this parameter, if a restricted\n     * set exists.  If there is no restricted set of acceptable values, null\n     * is returned.\n     *\n     * @return              a set of acceptable values for the Parameter, or\n     *                      null if there is none.\n     * @see #setAcceptableValues(String[]) setAcceptableValues()\n     */\n    public String[] getAcceptableValues() {\n        return acceptableValues;\n    }\n\n    /**\n     * Sets the values that are acceptable for this parameter, if a restricted\n     * set exists.  A null <code>vals</code> value, or an empty <code>vals</code>\n     * array, will result in any previously set acceptable values being cleared.\n     *\n     * @param vals          the new acceptable values\n     * @see #getAcceptableValues()\n     */\n    public void setAcceptableValues(String[] vals) {\n        if (vals == null || vals.length == 0) {\n            acceptableValues = null;\n        } else {\n            acceptableValues = vals;\n        }\n    }\n\n    /**\n     * Sets the values that are acceptable for this parameter, if a restricted\n     * set exists.  A null <code>vals</code> value, or an empty <code>vals</code>\n     * Collection, will result in any previously set acceptable values being\n     * cleared.\n     * <P>\n     * The <code>toString()</code> values of the Objects in <code>vals</code>\n     * will be used for the acceptable values.\n     *\n     * @param vals          the new acceptable values\n     */\n    public void setAcceptableValues(Collection vals) {\n        if (vals == null || vals.size() == 0) {\n            acceptableValues = null;\n        } else {\n            acceptableValues = new String[vals.size()];\n            int i = 0;\n            for (Iterator itr = vals.iterator(); itr.hasNext(); ) {\n                acceptableValues[i] = itr.next().toString();\n                i++;\n            }\n        }\n    }\n\n    /**\n     * Adds the specified string as a value for this entity after calling\n     * validateValue() to validate.\n     *\n     * @param value the value to be added\n     * @throws      CmdLineException if the value of the entity\n     *              has already been set and <code>multiValued</code> is\n     *              not <code>true</code>, or if\n     *              {@link #validateValue(String) validateValue()}\n     *              detects a problem.\n     */\n    public void addValue(String value) throws CmdLineException {\n        if (values.size() >= 1 && !multiValued) {\n            throw new CmdLineException(Strings.get(\"AbstractParameter.specifiedMoreThanOnce\", new Object[] { tag }));\n        }\n        validateValue(value);\n        values.add(value);\n        set = true;\n    }\n\n    /**\n     * Sets the value of the parameter to the specified string after calling\n     * validateValue() to validate.\n     *\n     * @param value         the new value of the parameter\n     * @throws      if {@link #validateValue(String) validateValue()}\n     *              detects a problem.\n     */\n    public void setValue(String value) throws CmdLineException {\n        values.clear();\n        // Let addValue() validate\n        addValue(value);\n    }\n\n    /**\n     * Sets the values of the parameter to those specified after calling\n     * validateValue() to validate.\n     *\n     * @param values        A collection of String objects to be used as the\n     *                      parameter's values.\n     * @throws      ClassCastException if the Collection contains object that\n     *              are not Strings.\n     * @throws      CmdLineException if more than one value is specified\n     *              and <code>multiValued</code> is not <code>true</code>, or\n     *              if {@link #validateValue(String) validateValue()}\n     *              detects a problem.\n     */\n    public void setValues(Collection values) throws CmdLineException {\n        this.values.clear();\n        for (Iterator itr = values.iterator(); itr.hasNext(); ) {\n            // let addValue() validate\n            addValue((String) itr.next());\n        }\n    }\n\n    /**\n     * Sets the values of the parameter to those specified after calling\n     * validateValue() to validate.\n     *\n     * @param values        The String objects to be used as the\n     *                      parameter's values.\n     * @throws      CmdLineException if more than one value is specified\n     *              and <code>multiValued</code> is not <code>true</code>, or\n     *              if {@link #validateValue(String) validateValue()}\n     *              detects a problem.\n     */\n    public void setValues(String[] values) throws CmdLineException {\n        this.values.clear();\n        for (int i = 0; i < values.length; i++) {\n            // let addValue() validate\n            addValue(values[i]);\n        }\n    }\n\n    /**\n     * Verifies that <code>value</code> is valid for this entity.\n     * <p>\n     * The implementation in AbstractParameter is to verify that, if there\n     * are specific acceptableValues associated with the Parameter, the\n     * value is one of those specified.  Any additional validation must\n     * be done by a subclass.  Because the validation performed by this\n     * method is applicable to most, if not all Parameters, it is recommended\n     * that subclasses call it from within their override methods:\n     * <pre>\n     * public void validateValue(String value) throws CmdLineException {\n     *    super.validateValue(value);\n     *    // do some subclass-specific validation\n     *    .\n     *    .\n     * }\n     * </pre>\n     *\n     * @param value         the value to be validated\n     * @throws              CmdLineException if <code>value</code> is not valid.\n     */\n    public void validateValue(String value) throws CmdLineException {\n        if (acceptableValues != null) {\n            for (int i = 0; i < acceptableValues.length; i++) {\n                if (value.equals(acceptableValues[i])) {\n                    return;\n                }\n            }\n            int maxExpectedAVLen = 200;\n            StringBuffer b = new StringBuffer(maxExpectedAVLen);\n            for (int i = 0; i < acceptableValues.length; i++) {\n                b.append(\"\\n   \" + acceptableValues[i]);\n            }\n            throw new CmdLineException(Strings.get(\"Parameter.valNotAcceptableVal\", new Object[] { value, tag, b.toString() }));\n        }\n    }\n\n    /**\n     * The value of the parameter, in the case where the parameter is not\n     * multi-valued.  For a multi-valued parameter, the first value specified\n     * is returned.\n     *\n     * @return              The value of the parameter as a String, or null if\n     *                      the paramter has not been set.\n     * @see                 #getValues()\n     */\n    public String getValue() {\n        if (values.size() == 0) {\n            return null;\n        }\n        return (String) values.get(0);\n    }\n\n    /**\n     * gets the values associated with this Parameter\n     *\n     * @return              The values associated with this Parameter.  Note\n     *                      that this might be an empty Collection if the\n     *                      Parameter has not been set.\n     * @see #isSet()\n     */\n    public Collection getValues() {\n        return values;\n    }\n\n    /**\n     * Sets the value of optionLabel.\n     * This label will be used when the usage for the command is displayed.\n     * For instance, a date parameter might use \"&lt;mm/dd/yy&gt;\".  This could\n     * then be displayed as in the following usage.\n     * <PRE>\n     * st_date &lt;mm/dd/yy&gt;  the start date of the report\n     * </PRE>\n     * The default is the empty string.\n     * @param optionLabel       The string used as a label for the parameter's\n     *                          value.  If null, an empty string is used.\n     * @see #getOptionLabel()\n     */\n    public void setOptionLabel(String optionLabel) {\n        this.optionLabel = optionLabel;\n    }\n\n    /**\n     * gets the value of optionLabel\n     *\n     * @return              the string used as a label for the parameter's\n     *                      value\n     * @see #setOptionLabel(String) setOptionLabel()\n     */\n    public String getOptionLabel() {\n        return ((optionLabel == null) ? \"\" : optionLabel);\n    }\n\n    /**\n     * Sets a flag such that during parse, missing required Parameters are\n     * ignored\n     * if this Parameter is set.  Typically used by Parameters that cause an\n     * action then call System.exit(), like \"-help\".\n     *\n     * @param ignoreRequired    set to <code>true</code> to ignore missing\n     *                          required Parameters if this Parameter is set\n     * @see #getIgnoreRequired()\n     */\n    public void setIgnoreRequired(boolean ignoreRequired) {\n        this.ignoreRequired = ignoreRequired;\n    }\n\n    /**\n     * Gets the flag indicating that during parse, missing required\n     * Parameters are ignored\n     * if this Parameter is set.  Typically used by Parameters that cause an\n     * action then call System.exit(), like \"-help\".\n     *\n     * @return              <code>true</code> if missing required Parameters\n     *                      will be ignored when this Parameter is set.\n     * @see #setIgnoreRequired(boolean) setIgnoreRequired()\n     */\n    public boolean getIgnoreRequired() {\n        return ignoreRequired;\n    }\n}\n",
		"id": "EvoSuiteBenchmark/109_pdfsam/src/main/java/jcmdline/AbstractParameterTest0.java",
		"test_prompt": "// AbstractParameterTest0.java\npackage jcmdline;\n\nimport java.util.ArrayList;\nimport java.util.Collection;\nimport java.util.Iterator;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link AbstractParameter}.\n* It contains ten unit test cases for the {@link AbstractParameter#isSet()} method.\n*/\nclass AbstractParameterTest0 {"
	},
	{
		"original_code": "// AbstractParameter.java\n/*\n * AbstractParameter.java\n *\n * Classes:\n *   public   AbstractParameter\n *   \n * ***** BEGIN LICENSE BLOCK *****\n * Version: MPL 1.1\n *\n * The contents of this file are subject to the Mozilla Public License Version\n * 1.1 (the \"License\"); you may not use this file except in compliance with\n * the License. You may obtain a copy of the License at\n * http://www.mozilla.org/MPL/\n *\n * Software distributed under the License is distributed on an \"AS IS\" basis,\n * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License\n * for the specific language governing rights and limitations under the\n * License.\n *\n * The Original Code is the Java jcmdline (command line management) package.\n *\n * The Initial Developer of the Original Code is Lynne Lawrence.\n * \n * Portions created by the Initial Developer are Copyright (C) 2002\n * the Initial Developer. All Rights Reserved.\n *\n * Contributor(s):  Lynne Lawrence <lgl@visuallink.com>\n *\n * ***** END LICENSE BLOCK *****\n */\npackage jcmdline;\n\nimport java.util.ArrayList;\nimport java.util.Collection;\nimport java.util.Iterator;\n\n/**\n * Base class for command line parameters.\n * <P>\n *  To implement a concrete Parameter class by subclassing this class,\n *  the following should be done:\n *  <ul>\n *     <li>Override the {@link #validateValue(String) validateValue()} method.\n *         This method is called any time an attempt is made to add or set\n *         values.\n *     <li>Implement constructors applicable for the new type of Parameter.\n *     <li>Call {@link #setOptionLabel(String) setOptionLabel()} from the\n *         constructors to set a\n *         reasonable option label for the new type of parameter.\n *     <li>Provide type-specific access methods for retrieval of the Parameter\n *         value.  For instance, {@link FileParam} provides the\n *         <code>getFiles()</code> method to retrieve its values as <code>File\n *         </code> objects.\n *  </ul>\n * <p>\n * A simple Parameter class that accepts only strings of a specified length\n * might look as follows:\n * <pre>\n * public class FixedLenParam extends AbstractParameter {\n *\n *     private int length;\n *\n *     public FixedLenParam(String tag, String desc, int length) {\n *         setTag(tag);\n *         setDesc(desc);\n *         this.length = length;\n *         setOptionLabel(\"&lt;s&gt;\");\n *     }\n *\n *     public void validateValue(String val) throws CmdLineException {\n *         super.validateValue(val); // check acceptable values, etc..\n *         if (val.length() != length) {\n *             throw new CmdLineException(getTag() + \" must be a string of \" +\n *                                        length + \" characters in length\");\n *         }\n *\n *     }\n * }\n * </pre>\n *\n * @author          Lynne Lawrence\n * @version         jcmdline Rel. @VERSION@ $Id: AbstractParameter.java,v 1.2 2002/12/07 14:22:06 lglawrence Exp $\n */\npublic abstract class AbstractParameter implements Parameter {\n\n    /**\n     * the tag which uniquely identifies the parameter, and will be used to\n     * identify the parameter on the command line if the parameter is used\n     * as an option\n     */\n    protected String tag;\n\n    /**\n     * Indicates whether or not the parameter is optional.  The default is\n     * <code>true</code>, indicating that the parameter is optional.\n     */\n    protected boolean optional = true;\n\n    /**\n     * Indicates whether the parameter can have multiple values.\n     * The default is\n     * false, indicating that the parameter can only accept a single value.\n     */\n    protected boolean multiValued = false;\n\n    /**\n     * a description of the parameter to be displayed in the usage\n     */\n    protected String desc;\n\n    /**\n     * indicates that the parameter is hidden and will not be displayed in the\n     * normal usage - default is <code>false</code>\n     */\n    protected boolean hidden = false;\n\n    /**\n     * indicates that the value of the parameter has been set\n     */\n    protected boolean set;\n\n    /**\n     * the value(s) of the entity\n     */\n    protected ArrayList values = new ArrayList();\n\n    /**\n     * The label that should be used for a Parameter option's value in the\n     * usage\n     * @see #setOptionLabel(String) setOptionLabel()\n     * @see #getOptionLabel()\n     */\n    protected String optionLabel = null;\n\n    /**\n     * a set of restricted values the Parameter may take\n     * @see #setAcceptableValues(String[]) setAcceptableValues()\n     * @see #getAcceptableValues()\n     */\n    protected String[] acceptableValues;\n\n    /**\n     * During parse, ignore missing required Parameters if this Parameter is\n     * set.  Typically used by Parameters that cause an action then call\n     * System.exit(), like \"-help\".\n     * @see #setIgnoreRequired(boolean) setIgnoreRequired()\n     * @see #getIgnoreRequired()\n     */\n    protected boolean ignoreRequired;\n\n    /**\n     * gets an indicator that the parameter's value has been set\n     *\n     * @return              true if the parameter's value has been set, false\n     *                      otherwise\n     */\n    public boolean isSet() {\n        return set;\n    }\n\n    /**\n     * sets the value of the hidden indicator\n     *\n     * @param hidden    true ({@link #HIDDEN}) if the parameter is a\n     *                  hidden parameter\n     */\n    public void setHidden(boolean hidden) {\n        this.hidden = hidden;\n    }\n\n    /**\n     * gets the value of the hidden indicator\n     *\n     * @return          true ({@link #HIDDEN}) if the parameter is a\n     *                  hidden parameter\n     */\n    public boolean isHidden() {\n        return hidden;\n    }\n\n    /**\n     * sets the value of this parameter's description\n     *\n     * @param desc      a description of the parameter, suitable for display in\n     *                  the command's usage\n     * @throws          IllegalArgumentException if <code>desc</code> is\n     *                  fewer than 5 charaters.\n     */\n    public void setDesc(String desc) throws IllegalArgumentException {\n        int minDescLen = 5;\n        if (desc.length() < minDescLen) {\n            throw new IllegalArgumentException(Strings.get(\"AbstractParameter.descTooShort\", new Object[] { tag }));\n        }\n        this.desc = desc;\n    }\n\n    /**\n     * gets the value of the parameter's description\n     *\n     * @return              this parameter's description\n     */\n    public String getDesc() {\n        return desc;\n    }\n\n    /**\n     * sets the value of tag\n     *\n     * @param tag       a unique identifier for this parameter.  If the\n     *                  parameter is used as an option, it will be used to\n     *                  identify the option on the command line.  In the case\n     *                  where the parameter is used as an argument, it will\n     *                  only be used to identify the argument in the usage\n     *                  statement.  Tags must be made up of any character but\n     *                  '='.\n     * @throws          IllegalArgumentException if the length of <code>tag\n     *                  </code> is less than 1, or <code>tag</code> contains an\n     *                  invalid character.\n     */\n    public void setTag(String tag) throws IllegalArgumentException {\n        if (tag == null || tag.length() < 1) {\n            throw new IllegalArgumentException(Strings.get(\"AbstractParameter.emptyTag\"));\n        }\n        if (tag.indexOf(\"=\") != -1) {\n            throw new IllegalArgumentException(Strings.get(\"AbstractParameter.illegalCharInTag\", new Object[] { tag, \"=\" }));\n        }\n        this.tag = tag;\n    }\n\n    /**\n     * gets the value of tag\n     *\n     * @return          a unique identifier for this parameter\n     * @see             #setTag(String) setTag()\n     */\n    public String getTag() {\n        return tag;\n    }\n\n    /**\n     * sets the value of the multiValued indicator\n     *\n     * @param multiValued      true if the parameter can have multiple values\n     */\n    public void setMultiValued(boolean multiValued) {\n        this.multiValued = multiValued;\n    }\n\n    /**\n     * gets the value of multiValued indicator\n     *\n     * @return              true if the parameter can have multiple values\n     */\n    public boolean isMultiValued() {\n        return multiValued;\n    }\n\n    /**\n     * indicates whether or not the parameter is optional\n     *\n     * @param optional      true if the parameter is optional\n     */\n    public void setOptional(boolean optional) {\n        this.optional = optional;\n    }\n\n    /**\n     * returns the value of the optional indicator\n     *\n     * @return              true if the parameter is optional\n     */\n    public boolean isOptional() {\n        return optional;\n    }\n\n    /**\n     * Gets the values that are acceptable for this parameter, if a restricted\n     * set exists.  If there is no restricted set of acceptable values, null\n     * is returned.\n     *\n     * @return              a set of acceptable values for the Parameter, or\n     *                      null if there is none.\n     * @see #setAcceptableValues(String[]) setAcceptableValues()\n     */\n    public String[] getAcceptableValues() {\n        return acceptableValues;\n    }\n\n    /**\n     * Sets the values that are acceptable for this parameter, if a restricted\n     * set exists.  A null <code>vals</code> value, or an empty <code>vals</code>\n     * array, will result in any previously set acceptable values being cleared.\n     *\n     * @param vals          the new acceptable values\n     * @see #getAcceptableValues()\n     */\n    public void setAcceptableValues(String[] vals) {\n        if (vals == null || vals.length == 0) {\n            acceptableValues = null;\n        } else {\n            acceptableValues = vals;\n        }\n    }\n\n    /**\n     * Sets the values that are acceptable for this parameter, if a restricted\n     * set exists.  A null <code>vals</code> value, or an empty <code>vals</code>\n     * Collection, will result in any previously set acceptable values being\n     * cleared.\n     * <P>\n     * The <code>toString()</code> values of the Objects in <code>vals</code>\n     * will be used for the acceptable values.\n     *\n     * @param vals          the new acceptable values\n     */\n    public void setAcceptableValues(Collection vals) {\n        if (vals == null || vals.size() == 0) {\n            acceptableValues = null;\n        } else {\n            acceptableValues = new String[vals.size()];\n            int i = 0;\n            for (Iterator itr = vals.iterator(); itr.hasNext(); ) {\n                acceptableValues[i] = itr.next().toString();\n                i++;\n            }\n        }\n    }\n\n    /**\n     * Adds the specified string as a value for this entity after calling\n     * validateValue() to validate.\n     *\n     * @param value the value to be added\n     * @throws      CmdLineException if the value of the entity\n     *              has already been set and <code>multiValued</code> is\n     *              not <code>true</code>, or if\n     *              {@link #validateValue(String) validateValue()}\n     *              detects a problem.\n     */\n    public void addValue(String value) throws CmdLineException {\n        if (values.size() >= 1 && !multiValued) {\n            throw new CmdLineException(Strings.get(\"AbstractParameter.specifiedMoreThanOnce\", new Object[] { tag }));\n        }\n        validateValue(value);\n        values.add(value);\n        set = true;\n    }\n\n    /**\n     * Sets the value of the parameter to the specified string after calling\n     * validateValue() to validate.\n     *\n     * @param value         the new value of the parameter\n     * @throws      if {@link #validateValue(String) validateValue()}\n     *              detects a problem.\n     */\n    public void setValue(String value) throws CmdLineException {\n        values.clear();\n        // Let addValue() validate\n        addValue(value);\n    }\n\n    /**\n     * Sets the values of the parameter to those specified after calling\n     * validateValue() to validate.\n     *\n     * @param values        A collection of String objects to be used as the\n     *                      parameter's values.\n     * @throws      ClassCastException if the Collection contains object that\n     *              are not Strings.\n     * @throws      CmdLineException if more than one value is specified\n     *              and <code>multiValued</code> is not <code>true</code>, or\n     *              if {@link #validateValue(String) validateValue()}\n     *              detects a problem.\n     */\n    public void setValues(Collection values) throws CmdLineException {\n        this.values.clear();\n        for (Iterator itr = values.iterator(); itr.hasNext(); ) {\n            // let addValue() validate\n            addValue((String) itr.next());\n        }\n    }\n\n    /**\n     * Sets the values of the parameter to those specified after calling\n     * validateValue() to validate.\n     *\n     * @param values        The String objects to be used as the\n     *                      parameter's values.\n     * @throws      CmdLineException if more than one value is specified\n     *              and <code>multiValued</code> is not <code>true</code>, or\n     *              if {@link #validateValue(String) validateValue()}\n     *              detects a problem.\n     */\n    public void setValues(String[] values) throws CmdLineException {\n        this.values.clear();\n        for (int i = 0; i < values.length; i++) {\n            // let addValue() validate\n            addValue(values[i]);\n        }\n    }\n\n    /**\n     * Verifies that <code>value</code> is valid for this entity.\n     * <p>\n     * The implementation in AbstractParameter is to verify that, if there\n     * are specific acceptableValues associated with the Parameter, the\n     * value is one of those specified.  Any additional validation must\n     * be done by a subclass.  Because the validation performed by this\n     * method is applicable to most, if not all Parameters, it is recommended\n     * that subclasses call it from within their override methods:\n     * <pre>\n     * public void validateValue(String value) throws CmdLineException {\n     *    super.validateValue(value);\n     *    // do some subclass-specific validation\n     *    .\n     *    .\n     * }\n     * </pre>\n     *\n     * @param value         the value to be validated\n     * @throws              CmdLineException if <code>value</code> is not valid.\n     */\n    public void validateValue(String value) throws CmdLineException {\n        if (acceptableValues != null) {\n            for (int i = 0; i < acceptableValues.length; i++) {\n                if (value.equals(acceptableValues[i])) {\n                    return;\n                }\n            }\n            int maxExpectedAVLen = 200;\n            StringBuffer b = new StringBuffer(maxExpectedAVLen);\n            for (int i = 0; i < acceptableValues.length; i++) {\n                b.append(\"\\n   \" + acceptableValues[i]);\n            }\n            throw new CmdLineException(Strings.get(\"Parameter.valNotAcceptableVal\", new Object[] { value, tag, b.toString() }));\n        }\n    }\n\n    /**\n     * The value of the parameter, in the case where the parameter is not\n     * multi-valued.  For a multi-valued parameter, the first value specified\n     * is returned.\n     *\n     * @return              The value of the parameter as a String, or null if\n     *                      the paramter has not been set.\n     * @see                 #getValues()\n     */\n    public String getValue() {\n        if (values.size() == 0) {\n            return null;\n        }\n        return (String) values.get(0);\n    }\n\n    /**\n     * gets the values associated with this Parameter\n     *\n     * @return              The values associated with this Parameter.  Note\n     *                      that this might be an empty Collection if the\n     *                      Parameter has not been set.\n     * @see #isSet()\n     */\n    public Collection getValues() {\n        return values;\n    }\n\n    /**\n     * Sets the value of optionLabel.\n     * This label will be used when the usage for the command is displayed.\n     * For instance, a date parameter might use \"&lt;mm/dd/yy&gt;\".  This could\n     * then be displayed as in the following usage.\n     * <PRE>\n     * st_date &lt;mm/dd/yy&gt;  the start date of the report\n     * </PRE>\n     * The default is the empty string.\n     * @param optionLabel       The string used as a label for the parameter's\n     *                          value.  If null, an empty string is used.\n     * @see #getOptionLabel()\n     */\n    public void setOptionLabel(String optionLabel) {\n        this.optionLabel = optionLabel;\n    }\n\n    /**\n     * gets the value of optionLabel\n     *\n     * @return              the string used as a label for the parameter's\n     *                      value\n     * @see #setOptionLabel(String) setOptionLabel()\n     */\n    public String getOptionLabel() {\n        return ((optionLabel == null) ? \"\" : optionLabel);\n    }\n\n    /**\n     * Sets a flag such that during parse, missing required Parameters are\n     * ignored\n     * if this Parameter is set.  Typically used by Parameters that cause an\n     * action then call System.exit(), like \"-help\".\n     *\n     * @param ignoreRequired    set to <code>true</code> to ignore missing\n     *                          required Parameters if this Parameter is set\n     * @see #getIgnoreRequired()\n     */\n    public void setIgnoreRequired(boolean ignoreRequired) {\n        this.ignoreRequired = ignoreRequired;\n    }\n\n    /**\n     * Gets the flag indicating that during parse, missing required\n     * Parameters are ignored\n     * if this Parameter is set.  Typically used by Parameters that cause an\n     * action then call System.exit(), like \"-help\".\n     *\n     * @return              <code>true</code> if missing required Parameters\n     *                      will be ignored when this Parameter is set.\n     * @see #setIgnoreRequired(boolean) setIgnoreRequired()\n     */\n    public boolean getIgnoreRequired() {\n        return ignoreRequired;\n    }\n}\n",
		"id": "EvoSuiteBenchmark/109_pdfsam/src/main/java/jcmdline/AbstractParameterTest1.java",
		"test_prompt": "// AbstractParameterTest1.java\npackage jcmdline;\n\nimport java.util.ArrayList;\nimport java.util.Collection;\nimport java.util.Iterator;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link AbstractParameter}.\n* It contains ten unit test cases for the {@link AbstractParameter#isHidden()} method.\n*/\nclass AbstractParameterTest1 {"
	},
	{
		"original_code": "// AbstractParameter.java\n/*\n * AbstractParameter.java\n *\n * Classes:\n *   public   AbstractParameter\n *   \n * ***** BEGIN LICENSE BLOCK *****\n * Version: MPL 1.1\n *\n * The contents of this file are subject to the Mozilla Public License Version\n * 1.1 (the \"License\"); you may not use this file except in compliance with\n * the License. You may obtain a copy of the License at\n * http://www.mozilla.org/MPL/\n *\n * Software distributed under the License is distributed on an \"AS IS\" basis,\n * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License\n * for the specific language governing rights and limitations under the\n * License.\n *\n * The Original Code is the Java jcmdline (command line management) package.\n *\n * The Initial Developer of the Original Code is Lynne Lawrence.\n * \n * Portions created by the Initial Developer are Copyright (C) 2002\n * the Initial Developer. All Rights Reserved.\n *\n * Contributor(s):  Lynne Lawrence <lgl@visuallink.com>\n *\n * ***** END LICENSE BLOCK *****\n */\npackage jcmdline;\n\nimport java.util.ArrayList;\nimport java.util.Collection;\nimport java.util.Iterator;\n\n/**\n * Base class for command line parameters.\n * <P>\n *  To implement a concrete Parameter class by subclassing this class,\n *  the following should be done:\n *  <ul>\n *     <li>Override the {@link #validateValue(String) validateValue()} method.\n *         This method is called any time an attempt is made to add or set\n *         values.\n *     <li>Implement constructors applicable for the new type of Parameter.\n *     <li>Call {@link #setOptionLabel(String) setOptionLabel()} from the\n *         constructors to set a\n *         reasonable option label for the new type of parameter.\n *     <li>Provide type-specific access methods for retrieval of the Parameter\n *         value.  For instance, {@link FileParam} provides the\n *         <code>getFiles()</code> method to retrieve its values as <code>File\n *         </code> objects.\n *  </ul>\n * <p>\n * A simple Parameter class that accepts only strings of a specified length\n * might look as follows:\n * <pre>\n * public class FixedLenParam extends AbstractParameter {\n *\n *     private int length;\n *\n *     public FixedLenParam(String tag, String desc, int length) {\n *         setTag(tag);\n *         setDesc(desc);\n *         this.length = length;\n *         setOptionLabel(\"&lt;s&gt;\");\n *     }\n *\n *     public void validateValue(String val) throws CmdLineException {\n *         super.validateValue(val); // check acceptable values, etc..\n *         if (val.length() != length) {\n *             throw new CmdLineException(getTag() + \" must be a string of \" +\n *                                        length + \" characters in length\");\n *         }\n *\n *     }\n * }\n * </pre>\n *\n * @author          Lynne Lawrence\n * @version         jcmdline Rel. @VERSION@ $Id: AbstractParameter.java,v 1.2 2002/12/07 14:22:06 lglawrence Exp $\n */\npublic abstract class AbstractParameter implements Parameter {\n\n    /**\n     * the tag which uniquely identifies the parameter, and will be used to\n     * identify the parameter on the command line if the parameter is used\n     * as an option\n     */\n    protected String tag;\n\n    /**\n     * Indicates whether or not the parameter is optional.  The default is\n     * <code>true</code>, indicating that the parameter is optional.\n     */\n    protected boolean optional = true;\n\n    /**\n     * Indicates whether the parameter can have multiple values.\n     * The default is\n     * false, indicating that the parameter can only accept a single value.\n     */\n    protected boolean multiValued = false;\n\n    /**\n     * a description of the parameter to be displayed in the usage\n     */\n    protected String desc;\n\n    /**\n     * indicates that the parameter is hidden and will not be displayed in the\n     * normal usage - default is <code>false</code>\n     */\n    protected boolean hidden = false;\n\n    /**\n     * indicates that the value of the parameter has been set\n     */\n    protected boolean set;\n\n    /**\n     * the value(s) of the entity\n     */\n    protected ArrayList values = new ArrayList();\n\n    /**\n     * The label that should be used for a Parameter option's value in the\n     * usage\n     * @see #setOptionLabel(String) setOptionLabel()\n     * @see #getOptionLabel()\n     */\n    protected String optionLabel = null;\n\n    /**\n     * a set of restricted values the Parameter may take\n     * @see #setAcceptableValues(String[]) setAcceptableValues()\n     * @see #getAcceptableValues()\n     */\n    protected String[] acceptableValues;\n\n    /**\n     * During parse, ignore missing required Parameters if this Parameter is\n     * set.  Typically used by Parameters that cause an action then call\n     * System.exit(), like \"-help\".\n     * @see #setIgnoreRequired(boolean) setIgnoreRequired()\n     * @see #getIgnoreRequired()\n     */\n    protected boolean ignoreRequired;\n\n    /**\n     * gets an indicator that the parameter's value has been set\n     *\n     * @return              true if the parameter's value has been set, false\n     *                      otherwise\n     */\n    public boolean isSet() {\n        return set;\n    }\n\n    /**\n     * sets the value of the hidden indicator\n     *\n     * @param hidden    true ({@link #HIDDEN}) if the parameter is a\n     *                  hidden parameter\n     */\n    public void setHidden(boolean hidden) {\n        this.hidden = hidden;\n    }\n\n    /**\n     * gets the value of the hidden indicator\n     *\n     * @return          true ({@link #HIDDEN}) if the parameter is a\n     *                  hidden parameter\n     */\n    public boolean isHidden() {\n        return hidden;\n    }\n\n    /**\n     * sets the value of this parameter's description\n     *\n     * @param desc      a description of the parameter, suitable for display in\n     *                  the command's usage\n     * @throws          IllegalArgumentException if <code>desc</code> is\n     *                  fewer than 5 charaters.\n     */\n    public void setDesc(String desc) throws IllegalArgumentException {\n        int minDescLen = 5;\n        if (desc.length() < minDescLen) {\n            throw new IllegalArgumentException(Strings.get(\"AbstractParameter.descTooShort\", new Object[] { tag }));\n        }\n        this.desc = desc;\n    }\n\n    /**\n     * gets the value of the parameter's description\n     *\n     * @return              this parameter's description\n     */\n    public String getDesc() {\n        return desc;\n    }\n\n    /**\n     * sets the value of tag\n     *\n     * @param tag       a unique identifier for this parameter.  If the\n     *                  parameter is used as an option, it will be used to\n     *                  identify the option on the command line.  In the case\n     *                  where the parameter is used as an argument, it will\n     *                  only be used to identify the argument in the usage\n     *                  statement.  Tags must be made up of any character but\n     *                  '='.\n     * @throws          IllegalArgumentException if the length of <code>tag\n     *                  </code> is less than 1, or <code>tag</code> contains an\n     *                  invalid character.\n     */\n    public void setTag(String tag) throws IllegalArgumentException {\n        if (tag == null || tag.length() < 1) {\n            throw new IllegalArgumentException(Strings.get(\"AbstractParameter.emptyTag\"));\n        }\n        if (tag.indexOf(\"=\") != -1) {\n            throw new IllegalArgumentException(Strings.get(\"AbstractParameter.illegalCharInTag\", new Object[] { tag, \"=\" }));\n        }\n        this.tag = tag;\n    }\n\n    /**\n     * gets the value of tag\n     *\n     * @return          a unique identifier for this parameter\n     * @see             #setTag(String) setTag()\n     */\n    public String getTag() {\n        return tag;\n    }\n\n    /**\n     * sets the value of the multiValued indicator\n     *\n     * @param multiValued      true if the parameter can have multiple values\n     */\n    public void setMultiValued(boolean multiValued) {\n        this.multiValued = multiValued;\n    }\n\n    /**\n     * gets the value of multiValued indicator\n     *\n     * @return              true if the parameter can have multiple values\n     */\n    public boolean isMultiValued() {\n        return multiValued;\n    }\n\n    /**\n     * indicates whether or not the parameter is optional\n     *\n     * @param optional      true if the parameter is optional\n     */\n    public void setOptional(boolean optional) {\n        this.optional = optional;\n    }\n\n    /**\n     * returns the value of the optional indicator\n     *\n     * @return              true if the parameter is optional\n     */\n    public boolean isOptional() {\n        return optional;\n    }\n\n    /**\n     * Gets the values that are acceptable for this parameter, if a restricted\n     * set exists.  If there is no restricted set of acceptable values, null\n     * is returned.\n     *\n     * @return              a set of acceptable values for the Parameter, or\n     *                      null if there is none.\n     * @see #setAcceptableValues(String[]) setAcceptableValues()\n     */\n    public String[] getAcceptableValues() {\n        return acceptableValues;\n    }\n\n    /**\n     * Sets the values that are acceptable for this parameter, if a restricted\n     * set exists.  A null <code>vals</code> value, or an empty <code>vals</code>\n     * array, will result in any previously set acceptable values being cleared.\n     *\n     * @param vals          the new acceptable values\n     * @see #getAcceptableValues()\n     */\n    public void setAcceptableValues(String[] vals) {\n        if (vals == null || vals.length == 0) {\n            acceptableValues = null;\n        } else {\n            acceptableValues = vals;\n        }\n    }\n\n    /**\n     * Sets the values that are acceptable for this parameter, if a restricted\n     * set exists.  A null <code>vals</code> value, or an empty <code>vals</code>\n     * Collection, will result in any previously set acceptable values being\n     * cleared.\n     * <P>\n     * The <code>toString()</code> values of the Objects in <code>vals</code>\n     * will be used for the acceptable values.\n     *\n     * @param vals          the new acceptable values\n     */\n    public void setAcceptableValues(Collection vals) {\n        if (vals == null || vals.size() == 0) {\n            acceptableValues = null;\n        } else {\n            acceptableValues = new String[vals.size()];\n            int i = 0;\n            for (Iterator itr = vals.iterator(); itr.hasNext(); ) {\n                acceptableValues[i] = itr.next().toString();\n                i++;\n            }\n        }\n    }\n\n    /**\n     * Adds the specified string as a value for this entity after calling\n     * validateValue() to validate.\n     *\n     * @param value the value to be added\n     * @throws      CmdLineException if the value of the entity\n     *              has already been set and <code>multiValued</code> is\n     *              not <code>true</code>, or if\n     *              {@link #validateValue(String) validateValue()}\n     *              detects a problem.\n     */\n    public void addValue(String value) throws CmdLineException {\n        if (values.size() >= 1 && !multiValued) {\n            throw new CmdLineException(Strings.get(\"AbstractParameter.specifiedMoreThanOnce\", new Object[] { tag }));\n        }\n        validateValue(value);\n        values.add(value);\n        set = true;\n    }\n\n    /**\n     * Sets the value of the parameter to the specified string after calling\n     * validateValue() to validate.\n     *\n     * @param value         the new value of the parameter\n     * @throws      if {@link #validateValue(String) validateValue()}\n     *              detects a problem.\n     */\n    public void setValue(String value) throws CmdLineException {\n        values.clear();\n        // Let addValue() validate\n        addValue(value);\n    }\n\n    /**\n     * Sets the values of the parameter to those specified after calling\n     * validateValue() to validate.\n     *\n     * @param values        A collection of String objects to be used as the\n     *                      parameter's values.\n     * @throws      ClassCastException if the Collection contains object that\n     *              are not Strings.\n     * @throws      CmdLineException if more than one value is specified\n     *              and <code>multiValued</code> is not <code>true</code>, or\n     *              if {@link #validateValue(String) validateValue()}\n     *              detects a problem.\n     */\n    public void setValues(Collection values) throws CmdLineException {\n        this.values.clear();\n        for (Iterator itr = values.iterator(); itr.hasNext(); ) {\n            // let addValue() validate\n            addValue((String) itr.next());\n        }\n    }\n\n    /**\n     * Sets the values of the parameter to those specified after calling\n     * validateValue() to validate.\n     *\n     * @param values        The String objects to be used as the\n     *                      parameter's values.\n     * @throws      CmdLineException if more than one value is specified\n     *              and <code>multiValued</code> is not <code>true</code>, or\n     *              if {@link #validateValue(String) validateValue()}\n     *              detects a problem.\n     */\n    public void setValues(String[] values) throws CmdLineException {\n        this.values.clear();\n        for (int i = 0; i < values.length; i++) {\n            // let addValue() validate\n            addValue(values[i]);\n        }\n    }\n\n    /**\n     * Verifies that <code>value</code> is valid for this entity.\n     * <p>\n     * The implementation in AbstractParameter is to verify that, if there\n     * are specific acceptableValues associated with the Parameter, the\n     * value is one of those specified.  Any additional validation must\n     * be done by a subclass.  Because the validation performed by this\n     * method is applicable to most, if not all Parameters, it is recommended\n     * that subclasses call it from within their override methods:\n     * <pre>\n     * public void validateValue(String value) throws CmdLineException {\n     *    super.validateValue(value);\n     *    // do some subclass-specific validation\n     *    .\n     *    .\n     * }\n     * </pre>\n     *\n     * @param value         the value to be validated\n     * @throws              CmdLineException if <code>value</code> is not valid.\n     */\n    public void validateValue(String value) throws CmdLineException {\n        if (acceptableValues != null) {\n            for (int i = 0; i < acceptableValues.length; i++) {\n                if (value.equals(acceptableValues[i])) {\n                    return;\n                }\n            }\n            int maxExpectedAVLen = 200;\n            StringBuffer b = new StringBuffer(maxExpectedAVLen);\n            for (int i = 0; i < acceptableValues.length; i++) {\n                b.append(\"\\n   \" + acceptableValues[i]);\n            }\n            throw new CmdLineException(Strings.get(\"Parameter.valNotAcceptableVal\", new Object[] { value, tag, b.toString() }));\n        }\n    }\n\n    /**\n     * The value of the parameter, in the case where the parameter is not\n     * multi-valued.  For a multi-valued parameter, the first value specified\n     * is returned.\n     *\n     * @return              The value of the parameter as a String, or null if\n     *                      the paramter has not been set.\n     * @see                 #getValues()\n     */\n    public String getValue() {\n        if (values.size() == 0) {\n            return null;\n        }\n        return (String) values.get(0);\n    }\n\n    /**\n     * gets the values associated with this Parameter\n     *\n     * @return              The values associated with this Parameter.  Note\n     *                      that this might be an empty Collection if the\n     *                      Parameter has not been set.\n     * @see #isSet()\n     */\n    public Collection getValues() {\n        return values;\n    }\n\n    /**\n     * Sets the value of optionLabel.\n     * This label will be used when the usage for the command is displayed.\n     * For instance, a date parameter might use \"&lt;mm/dd/yy&gt;\".  This could\n     * then be displayed as in the following usage.\n     * <PRE>\n     * st_date &lt;mm/dd/yy&gt;  the start date of the report\n     * </PRE>\n     * The default is the empty string.\n     * @param optionLabel       The string used as a label for the parameter's\n     *                          value.  If null, an empty string is used.\n     * @see #getOptionLabel()\n     */\n    public void setOptionLabel(String optionLabel) {\n        this.optionLabel = optionLabel;\n    }\n\n    /**\n     * gets the value of optionLabel\n     *\n     * @return              the string used as a label for the parameter's\n     *                      value\n     * @see #setOptionLabel(String) setOptionLabel()\n     */\n    public String getOptionLabel() {\n        return ((optionLabel == null) ? \"\" : optionLabel);\n    }\n\n    /**\n     * Sets a flag such that during parse, missing required Parameters are\n     * ignored\n     * if this Parameter is set.  Typically used by Parameters that cause an\n     * action then call System.exit(), like \"-help\".\n     *\n     * @param ignoreRequired    set to <code>true</code> to ignore missing\n     *                          required Parameters if this Parameter is set\n     * @see #getIgnoreRequired()\n     */\n    public void setIgnoreRequired(boolean ignoreRequired) {\n        this.ignoreRequired = ignoreRequired;\n    }\n\n    /**\n     * Gets the flag indicating that during parse, missing required\n     * Parameters are ignored\n     * if this Parameter is set.  Typically used by Parameters that cause an\n     * action then call System.exit(), like \"-help\".\n     *\n     * @return              <code>true</code> if missing required Parameters\n     *                      will be ignored when this Parameter is set.\n     * @see #setIgnoreRequired(boolean) setIgnoreRequired()\n     */\n    public boolean getIgnoreRequired() {\n        return ignoreRequired;\n    }\n}\n",
		"id": "EvoSuiteBenchmark/109_pdfsam/src/main/java/jcmdline/AbstractParameterTest2.java",
		"test_prompt": "// AbstractParameterTest2.java\npackage jcmdline;\n\nimport java.util.ArrayList;\nimport java.util.Collection;\nimport java.util.Iterator;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link AbstractParameter}.\n* It contains ten unit test cases for the {@link AbstractParameter#isMultiValued()} method.\n*/\nclass AbstractParameterTest2 {"
	},
	{
		"original_code": "// AbstractParameter.java\n/*\n * AbstractParameter.java\n *\n * Classes:\n *   public   AbstractParameter\n *   \n * ***** BEGIN LICENSE BLOCK *****\n * Version: MPL 1.1\n *\n * The contents of this file are subject to the Mozilla Public License Version\n * 1.1 (the \"License\"); you may not use this file except in compliance with\n * the License. You may obtain a copy of the License at\n * http://www.mozilla.org/MPL/\n *\n * Software distributed under the License is distributed on an \"AS IS\" basis,\n * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License\n * for the specific language governing rights and limitations under the\n * License.\n *\n * The Original Code is the Java jcmdline (command line management) package.\n *\n * The Initial Developer of the Original Code is Lynne Lawrence.\n * \n * Portions created by the Initial Developer are Copyright (C) 2002\n * the Initial Developer. All Rights Reserved.\n *\n * Contributor(s):  Lynne Lawrence <lgl@visuallink.com>\n *\n * ***** END LICENSE BLOCK *****\n */\npackage jcmdline;\n\nimport java.util.ArrayList;\nimport java.util.Collection;\nimport java.util.Iterator;\n\n/**\n * Base class for command line parameters.\n * <P>\n *  To implement a concrete Parameter class by subclassing this class,\n *  the following should be done:\n *  <ul>\n *     <li>Override the {@link #validateValue(String) validateValue()} method.\n *         This method is called any time an attempt is made to add or set\n *         values.\n *     <li>Implement constructors applicable for the new type of Parameter.\n *     <li>Call {@link #setOptionLabel(String) setOptionLabel()} from the\n *         constructors to set a\n *         reasonable option label for the new type of parameter.\n *     <li>Provide type-specific access methods for retrieval of the Parameter\n *         value.  For instance, {@link FileParam} provides the\n *         <code>getFiles()</code> method to retrieve its values as <code>File\n *         </code> objects.\n *  </ul>\n * <p>\n * A simple Parameter class that accepts only strings of a specified length\n * might look as follows:\n * <pre>\n * public class FixedLenParam extends AbstractParameter {\n *\n *     private int length;\n *\n *     public FixedLenParam(String tag, String desc, int length) {\n *         setTag(tag);\n *         setDesc(desc);\n *         this.length = length;\n *         setOptionLabel(\"&lt;s&gt;\");\n *     }\n *\n *     public void validateValue(String val) throws CmdLineException {\n *         super.validateValue(val); // check acceptable values, etc..\n *         if (val.length() != length) {\n *             throw new CmdLineException(getTag() + \" must be a string of \" +\n *                                        length + \" characters in length\");\n *         }\n *\n *     }\n * }\n * </pre>\n *\n * @author          Lynne Lawrence\n * @version         jcmdline Rel. @VERSION@ $Id: AbstractParameter.java,v 1.2 2002/12/07 14:22:06 lglawrence Exp $\n */\npublic abstract class AbstractParameter implements Parameter {\n\n    /**\n     * the tag which uniquely identifies the parameter, and will be used to\n     * identify the parameter on the command line if the parameter is used\n     * as an option\n     */\n    protected String tag;\n\n    /**\n     * Indicates whether or not the parameter is optional.  The default is\n     * <code>true</code>, indicating that the parameter is optional.\n     */\n    protected boolean optional = true;\n\n    /**\n     * Indicates whether the parameter can have multiple values.\n     * The default is\n     * false, indicating that the parameter can only accept a single value.\n     */\n    protected boolean multiValued = false;\n\n    /**\n     * a description of the parameter to be displayed in the usage\n     */\n    protected String desc;\n\n    /**\n     * indicates that the parameter is hidden and will not be displayed in the\n     * normal usage - default is <code>false</code>\n     */\n    protected boolean hidden = false;\n\n    /**\n     * indicates that the value of the parameter has been set\n     */\n    protected boolean set;\n\n    /**\n     * the value(s) of the entity\n     */\n    protected ArrayList values = new ArrayList();\n\n    /**\n     * The label that should be used for a Parameter option's value in the\n     * usage\n     * @see #setOptionLabel(String) setOptionLabel()\n     * @see #getOptionLabel()\n     */\n    protected String optionLabel = null;\n\n    /**\n     * a set of restricted values the Parameter may take\n     * @see #setAcceptableValues(String[]) setAcceptableValues()\n     * @see #getAcceptableValues()\n     */\n    protected String[] acceptableValues;\n\n    /**\n     * During parse, ignore missing required Parameters if this Parameter is\n     * set.  Typically used by Parameters that cause an action then call\n     * System.exit(), like \"-help\".\n     * @see #setIgnoreRequired(boolean) setIgnoreRequired()\n     * @see #getIgnoreRequired()\n     */\n    protected boolean ignoreRequired;\n\n    /**\n     * gets an indicator that the parameter's value has been set\n     *\n     * @return              true if the parameter's value has been set, false\n     *                      otherwise\n     */\n    public boolean isSet() {\n        return set;\n    }\n\n    /**\n     * sets the value of the hidden indicator\n     *\n     * @param hidden    true ({@link #HIDDEN}) if the parameter is a\n     *                  hidden parameter\n     */\n    public void setHidden(boolean hidden) {\n        this.hidden = hidden;\n    }\n\n    /**\n     * gets the value of the hidden indicator\n     *\n     * @return          true ({@link #HIDDEN}) if the parameter is a\n     *                  hidden parameter\n     */\n    public boolean isHidden() {\n        return hidden;\n    }\n\n    /**\n     * sets the value of this parameter's description\n     *\n     * @param desc      a description of the parameter, suitable for display in\n     *                  the command's usage\n     * @throws          IllegalArgumentException if <code>desc</code> is\n     *                  fewer than 5 charaters.\n     */\n    public void setDesc(String desc) throws IllegalArgumentException {\n        int minDescLen = 5;\n        if (desc.length() < minDescLen) {\n            throw new IllegalArgumentException(Strings.get(\"AbstractParameter.descTooShort\", new Object[] { tag }));\n        }\n        this.desc = desc;\n    }\n\n    /**\n     * gets the value of the parameter's description\n     *\n     * @return              this parameter's description\n     */\n    public String getDesc() {\n        return desc;\n    }\n\n    /**\n     * sets the value of tag\n     *\n     * @param tag       a unique identifier for this parameter.  If the\n     *                  parameter is used as an option, it will be used to\n     *                  identify the option on the command line.  In the case\n     *                  where the parameter is used as an argument, it will\n     *                  only be used to identify the argument in the usage\n     *                  statement.  Tags must be made up of any character but\n     *                  '='.\n     * @throws          IllegalArgumentException if the length of <code>tag\n     *                  </code> is less than 1, or <code>tag</code> contains an\n     *                  invalid character.\n     */\n    public void setTag(String tag) throws IllegalArgumentException {\n        if (tag == null || tag.length() < 1) {\n            throw new IllegalArgumentException(Strings.get(\"AbstractParameter.emptyTag\"));\n        }\n        if (tag.indexOf(\"=\") != -1) {\n            throw new IllegalArgumentException(Strings.get(\"AbstractParameter.illegalCharInTag\", new Object[] { tag, \"=\" }));\n        }\n        this.tag = tag;\n    }\n\n    /**\n     * gets the value of tag\n     *\n     * @return          a unique identifier for this parameter\n     * @see             #setTag(String) setTag()\n     */\n    public String getTag() {\n        return tag;\n    }\n\n    /**\n     * sets the value of the multiValued indicator\n     *\n     * @param multiValued      true if the parameter can have multiple values\n     */\n    public void setMultiValued(boolean multiValued) {\n        this.multiValued = multiValued;\n    }\n\n    /**\n     * gets the value of multiValued indicator\n     *\n     * @return              true if the parameter can have multiple values\n     */\n    public boolean isMultiValued() {\n        return multiValued;\n    }\n\n    /**\n     * indicates whether or not the parameter is optional\n     *\n     * @param optional      true if the parameter is optional\n     */\n    public void setOptional(boolean optional) {\n        this.optional = optional;\n    }\n\n    /**\n     * returns the value of the optional indicator\n     *\n     * @return              true if the parameter is optional\n     */\n    public boolean isOptional() {\n        return optional;\n    }\n\n    /**\n     * Gets the values that are acceptable for this parameter, if a restricted\n     * set exists.  If there is no restricted set of acceptable values, null\n     * is returned.\n     *\n     * @return              a set of acceptable values for the Parameter, or\n     *                      null if there is none.\n     * @see #setAcceptableValues(String[]) setAcceptableValues()\n     */\n    public String[] getAcceptableValues() {\n        return acceptableValues;\n    }\n\n    /**\n     * Sets the values that are acceptable for this parameter, if a restricted\n     * set exists.  A null <code>vals</code> value, or an empty <code>vals</code>\n     * array, will result in any previously set acceptable values being cleared.\n     *\n     * @param vals          the new acceptable values\n     * @see #getAcceptableValues()\n     */\n    public void setAcceptableValues(String[] vals) {\n        if (vals == null || vals.length == 0) {\n            acceptableValues = null;\n        } else {\n            acceptableValues = vals;\n        }\n    }\n\n    /**\n     * Sets the values that are acceptable for this parameter, if a restricted\n     * set exists.  A null <code>vals</code> value, or an empty <code>vals</code>\n     * Collection, will result in any previously set acceptable values being\n     * cleared.\n     * <P>\n     * The <code>toString()</code> values of the Objects in <code>vals</code>\n     * will be used for the acceptable values.\n     *\n     * @param vals          the new acceptable values\n     */\n    public void setAcceptableValues(Collection vals) {\n        if (vals == null || vals.size() == 0) {\n            acceptableValues = null;\n        } else {\n            acceptableValues = new String[vals.size()];\n            int i = 0;\n            for (Iterator itr = vals.iterator(); itr.hasNext(); ) {\n                acceptableValues[i] = itr.next().toString();\n                i++;\n            }\n        }\n    }\n\n    /**\n     * Adds the specified string as a value for this entity after calling\n     * validateValue() to validate.\n     *\n     * @param value the value to be added\n     * @throws      CmdLineException if the value of the entity\n     *              has already been set and <code>multiValued</code> is\n     *              not <code>true</code>, or if\n     *              {@link #validateValue(String) validateValue()}\n     *              detects a problem.\n     */\n    public void addValue(String value) throws CmdLineException {\n        if (values.size() >= 1 && !multiValued) {\n            throw new CmdLineException(Strings.get(\"AbstractParameter.specifiedMoreThanOnce\", new Object[] { tag }));\n        }\n        validateValue(value);\n        values.add(value);\n        set = true;\n    }\n\n    /**\n     * Sets the value of the parameter to the specified string after calling\n     * validateValue() to validate.\n     *\n     * @param value         the new value of the parameter\n     * @throws      if {@link #validateValue(String) validateValue()}\n     *              detects a problem.\n     */\n    public void setValue(String value) throws CmdLineException {\n        values.clear();\n        // Let addValue() validate\n        addValue(value);\n    }\n\n    /**\n     * Sets the values of the parameter to those specified after calling\n     * validateValue() to validate.\n     *\n     * @param values        A collection of String objects to be used as the\n     *                      parameter's values.\n     * @throws      ClassCastException if the Collection contains object that\n     *              are not Strings.\n     * @throws      CmdLineException if more than one value is specified\n     *              and <code>multiValued</code> is not <code>true</code>, or\n     *              if {@link #validateValue(String) validateValue()}\n     *              detects a problem.\n     */\n    public void setValues(Collection values) throws CmdLineException {\n        this.values.clear();\n        for (Iterator itr = values.iterator(); itr.hasNext(); ) {\n            // let addValue() validate\n            addValue((String) itr.next());\n        }\n    }\n\n    /**\n     * Sets the values of the parameter to those specified after calling\n     * validateValue() to validate.\n     *\n     * @param values        The String objects to be used as the\n     *                      parameter's values.\n     * @throws      CmdLineException if more than one value is specified\n     *              and <code>multiValued</code> is not <code>true</code>, or\n     *              if {@link #validateValue(String) validateValue()}\n     *              detects a problem.\n     */\n    public void setValues(String[] values) throws CmdLineException {\n        this.values.clear();\n        for (int i = 0; i < values.length; i++) {\n            // let addValue() validate\n            addValue(values[i]);\n        }\n    }\n\n    /**\n     * Verifies that <code>value</code> is valid for this entity.\n     * <p>\n     * The implementation in AbstractParameter is to verify that, if there\n     * are specific acceptableValues associated with the Parameter, the\n     * value is one of those specified.  Any additional validation must\n     * be done by a subclass.  Because the validation performed by this\n     * method is applicable to most, if not all Parameters, it is recommended\n     * that subclasses call it from within their override methods:\n     * <pre>\n     * public void validateValue(String value) throws CmdLineException {\n     *    super.validateValue(value);\n     *    // do some subclass-specific validation\n     *    .\n     *    .\n     * }\n     * </pre>\n     *\n     * @param value         the value to be validated\n     * @throws              CmdLineException if <code>value</code> is not valid.\n     */\n    public void validateValue(String value) throws CmdLineException {\n        if (acceptableValues != null) {\n            for (int i = 0; i < acceptableValues.length; i++) {\n                if (value.equals(acceptableValues[i])) {\n                    return;\n                }\n            }\n            int maxExpectedAVLen = 200;\n            StringBuffer b = new StringBuffer(maxExpectedAVLen);\n            for (int i = 0; i < acceptableValues.length; i++) {\n                b.append(\"\\n   \" + acceptableValues[i]);\n            }\n            throw new CmdLineException(Strings.get(\"Parameter.valNotAcceptableVal\", new Object[] { value, tag, b.toString() }));\n        }\n    }\n\n    /**\n     * The value of the parameter, in the case where the parameter is not\n     * multi-valued.  For a multi-valued parameter, the first value specified\n     * is returned.\n     *\n     * @return              The value of the parameter as a String, or null if\n     *                      the paramter has not been set.\n     * @see                 #getValues()\n     */\n    public String getValue() {\n        if (values.size() == 0) {\n            return null;\n        }\n        return (String) values.get(0);\n    }\n\n    /**\n     * gets the values associated with this Parameter\n     *\n     * @return              The values associated with this Parameter.  Note\n     *                      that this might be an empty Collection if the\n     *                      Parameter has not been set.\n     * @see #isSet()\n     */\n    public Collection getValues() {\n        return values;\n    }\n\n    /**\n     * Sets the value of optionLabel.\n     * This label will be used when the usage for the command is displayed.\n     * For instance, a date parameter might use \"&lt;mm/dd/yy&gt;\".  This could\n     * then be displayed as in the following usage.\n     * <PRE>\n     * st_date &lt;mm/dd/yy&gt;  the start date of the report\n     * </PRE>\n     * The default is the empty string.\n     * @param optionLabel       The string used as a label for the parameter's\n     *                          value.  If null, an empty string is used.\n     * @see #getOptionLabel()\n     */\n    public void setOptionLabel(String optionLabel) {\n        this.optionLabel = optionLabel;\n    }\n\n    /**\n     * gets the value of optionLabel\n     *\n     * @return              the string used as a label for the parameter's\n     *                      value\n     * @see #setOptionLabel(String) setOptionLabel()\n     */\n    public String getOptionLabel() {\n        return ((optionLabel == null) ? \"\" : optionLabel);\n    }\n\n    /**\n     * Sets a flag such that during parse, missing required Parameters are\n     * ignored\n     * if this Parameter is set.  Typically used by Parameters that cause an\n     * action then call System.exit(), like \"-help\".\n     *\n     * @param ignoreRequired    set to <code>true</code> to ignore missing\n     *                          required Parameters if this Parameter is set\n     * @see #getIgnoreRequired()\n     */\n    public void setIgnoreRequired(boolean ignoreRequired) {\n        this.ignoreRequired = ignoreRequired;\n    }\n\n    /**\n     * Gets the flag indicating that during parse, missing required\n     * Parameters are ignored\n     * if this Parameter is set.  Typically used by Parameters that cause an\n     * action then call System.exit(), like \"-help\".\n     *\n     * @return              <code>true</code> if missing required Parameters\n     *                      will be ignored when this Parameter is set.\n     * @see #setIgnoreRequired(boolean) setIgnoreRequired()\n     */\n    public boolean getIgnoreRequired() {\n        return ignoreRequired;\n    }\n}\n",
		"id": "EvoSuiteBenchmark/109_pdfsam/src/main/java/jcmdline/AbstractParameterTest3.java",
		"test_prompt": "// AbstractParameterTest3.java\npackage jcmdline;\n\nimport java.util.ArrayList;\nimport java.util.Collection;\nimport java.util.Iterator;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link AbstractParameter}.\n* It contains ten unit test cases for the {@link AbstractParameter#isOptional()} method.\n*/\nclass AbstractParameterTest3 {"
	},
	{
		"original_code": "// BasicCmdLineHandler.java\n/*\n * BasicCmdLineHandler.java\n *\n * Classes:\n *   public   BasicCmdLineHandler\n *   \n * ***** BEGIN LICENSE BLOCK *****\n * Version: MPL 1.1\n *\n * The contents of this file are subject to the Mozilla Public License Version\n * 1.1 (the \"License\"); you may not use this file except in compliance with\n * the License. You may obtain a copy of the License at\n * http://www.mozilla.org/MPL/\n *\n * Software distributed under the License is distributed on an \"AS IS\" basis,\n * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License\n * for the specific language governing rights and limitations under the\n * License.\n *\n * The Original Code is the Java jcmdline (command line management) package.\n *\n * The Initial Developer of the Original Code is Lynne Lawrence.\n * \n * Portions created by the Initial Developer are Copyright (C) 2002\n * the Initial Developer. All Rights Reserved.\n *\n * Contributor(s):  Lynne Lawrence <lgl@visuallink.com>\n *\n * ***** END LICENSE BLOCK *****\n */\npackage jcmdline;\n\nimport java.util.ArrayList;\nimport java.util.Collection;\nimport java.util.HashMap;\nimport java.util.Iterator;\nimport java.util.List;\n\n/**\n * Used to define, parse, and validate the parameters associated with an\n * executable's command line.\n * <P>\n * Objects of this class use a {@link CmdLineParser} to do the actual\n * parsing of the command line.  By default, this class uses a\n * {@link PosixCmdLineParser}.\n * <p>\n * The following semantics are used throughout the documentation for this\n * class.  A command line <i>parameter</i> refers to either a command line\n * <i>option</i>, or a command line <i>argument</i>.\n * <P>\n * A command line <i>option</i> is identified by a <i>tag</i> and may or\n * not have an associated value.  For instance, in the following posix-type\n * option, \"outfile\" is the <i>tag</i> and \"/tmp/myoutfile\" is the\n * <i>value</i>:\n * <pre>\n *  --outfile /tmp/myoutfile\n * </pre>\n * <P>Command line\n * <i>arguments</i> are what are left on the command line after all\n * options have been processed.  For example, again using a posix style\n * command line, \"filename1\" and \"filename2\" would be the <i>arguments</i>:\n * <pre>\n *  -e 's/red/blue/' filename1 filename2\n * </pre>\n * <P>\n * Parameters may be designated as <i>hidden</i>.\n * <i>Hidden parameters</i> are those that can be specified,\n * but whose documentation\n * is not displayed to the user when a normal usage is printed.\n * <P>\n * This class is used as in the following example of a 'cat' facsimile in java:\n * <pre>\n * public class Concat {\n *     static FileParam outfile = new FileParam(\n *             &quot;out&quot;,\n *             &quot;a file to receive the concatenated files (default is stdout)&quot;);\n *     static BooleanParam delete = new BooleanParam(\n *             &quot;delete&quot;,\n *             &quot;specifies that all of the original files are to be deleted&quot;);\n *     static FileParam infiles = new FileParam(\n *             &quot;filename&quot;,\n *             &quot;files to be concatenated&quot;,\n *             FileParam.IS_FILE &amp; FileParam.IS_READABLE,\n *             FileParam.REQUIRED,\n *             FileParam.MULTI_VALUED);\n *\n *     public static void main(String[] args) {\n *         outfile.setOptionLabel(&quot;outfile&quot;);\n *         BasicCmdLineHandler clp = new BasicCmdLineHandler(\n *                 &quot;Concat&quot;, &quot;concatenates the specified files&quot;,\n *                 new Parameter[] { outfile, delete },\n *                 new Parameter[] { infiles });\n *         clp.parse(args);\n *\n *         if (outfile.isSet()) {\n *             ....\n *         } else {\n *             ...\n *         }\n *         for (Iterator itr = infiles.getFiles().iterator(); itr.hasNext(); ) {\n *             ...\n *         }\n *         if (delete.isTrue()) {\n *             ...\n *         }\n *     }\n * }\n *\n * </pre>\n * <P>\n * This class implements no options on its own.  It it typically used in\n * conjunction with one or more of the {@link AbstractHandlerDecorator}\n * classes that provide some useful options.\n * <P>\n * <b>Post Processing Command Line Parameters</b>\n * <P>\n * It may be the case that none of the supplied Parameter types fully\n * accomodates a program's needs.  For instance, a program may require\n * a filename option that is an html filename, ending with '.html'.  In\n * this case, the programmer has the options of creating their own\n * Parameter subclass, or post-processing the returned FileParam parameter\n * and generating their own error message.  The\n * {@link #exitUsageError(String) exitUsageError()} method is\n * provided so that programs that post-process parameters can take\n * the same exit as would be taken for \"normal\" parameter processing\n * failures.  For instance, in the case just described, the following\n * code could be used to exit the program if the specified file did not\n * end with '.html' (<code>myfile</code>\n * being a FileParam object, and <code>cl</code>\n * being the BasicCmdLineHandler object):\n * <pre>\n *    cl.parse(args);\n *    if (! myfile.getFile().getPath().endsWith(&quot;.html&quot;)) {\n *        cl.exitUsageError(&quot;Filename specified for '&quot; +\n *                          myfile.getTag() + &quot;' must end with '.html'&quot;);\n *    }\n * </pre>\n *\n * @author          Lynne Lawrence\n * @version         jcmdline Rel. @VERSION@ $Id: BasicCmdLineHandler.java,v 1.4 2005/02/06 13:19:19 lglawrence Exp $\n * @see Parameter\n * @see CmdLineParser\n */\npublic class BasicCmdLineHandler implements CmdLineHandler {\n\n    /**\n     * the name of the command whose command line is to be parsed\n     */\n    private String cmdName;\n\n    /**\n     * a short description of the command's purpose\n     */\n    private String cmdDesc;\n\n    /**\n     * the options associated with the command\n     */\n    private HashMap options = new HashMap();\n\n    /**\n     * the arguments (after the options have been processed) associated\n     * with the command\n     */\n    private ArrayList args = new ArrayList();\n\n    /**\n     * the parser to be used to parse the command line\n     * @see #setParser(CmdLineParser) setParser()\n     * @see #getParser()\n     */\n    private CmdLineParser parser;\n\n    /**\n     * indicates that the command usage should be displayed, and System.exit(1)\n     * called in the case of a parse error.\n     * @see     #setDieOnParseError(boolean) setDieOnParseError()\n     */\n    private boolean dieOnParseError = true;\n\n    /**\n     * the error message from the last call to parse()\n     * @see #setParseError(String) setParseError()\n     * @see #getParseError()\n     */\n    private String parseError;\n\n    /**\n     * constructor\n     *\n     * @param cmdName       the name of the command\n     * @param cmdDesc       a short description of the command\n     * @param options       a collection of Parameter objects, describing the\n     *                      command's command-line options\n     * @param args          a collection of Parameter objects, describing the\n     *                      command's command-line arguments (what is left on\n     *                      the command line after all options and their\n     *                      parameters have been processed)\n     * @param parser        a CmdLineParser to be used to parse the command line\n     * @throws              IllegalArgumentException if any of the\n     *                      parameters are not correctly specified.\n     * @see                 #setCmdName(String) setCmdName()\n     * @see                 #setCmdDesc(String) setCmdDesc()\n     * @see                 #setOptions(Parameter[]) setOptions()\n     * @see                 #setArgs(Parameter[]) setArgs()\n     * @see                 #setParser(CmdLineParser) setParser()\n     */\n    public BasicCmdLineHandler(String cmdName, String cmdDesc, Parameter[] options, Parameter[] args, CmdLineParser parser) {\n        setCmdName(cmdName);\n        setCmdDesc(cmdDesc);\n        setOptions(options);\n        setArgs(args);\n        setParser(parser);\n    }\n\n    /**\n     * constructor - uses the PosixCmdLineParser to parse the command line\n     *\n     * @param cmdName       the name of the command\n     * @param cmdDesc       a short description of the command\n     * @param options       a collection of Parameter objects, describing the\n     *                      command's command-line options\n     * @param args          a collection of Parameter objects, describing the\n     *                      command's command-line arguments (what is left on\n     *                      the command line after all options and their\n     *                      parameters have been processed)\n     * @throws              IllegalArgumentException if any of the\n     *                      parameters are not correctly specified.\n     * @see                 #setCmdName(String) setCmdName()\n     * @see                 #setCmdDesc(String) setCmdDesc()\n     * @see                 #setOptions(Parameter[]) setOptions()\n     * @see                 #setArgs(Parameter[]) setArgs()\n     * @see                 PosixCmdLineParser\n     */\n    public BasicCmdLineHandler(String cmdName, String cmdDesc, Parameter[] options, Parameter[] args) {\n        this(cmdName, cmdDesc, options, args, new PosixCmdLineParser());\n    }\n\n    /**\n     * constructor - uses the PosixCmdLineParser to parse the command line\n     *\n     * @param cmdName       the name of the command creating this\n     *                      BasicCmdLineHandler\n     * @param cmdDesc       a short description of the command's purpose\n     * @param options       a collection of Parameter objects, describing the\n     *                      command's command-line options\n     * @param args          a collection of Parameter objects, describing the\n     *                      command's command-line arguments (what is left on\n     *                      the command line after all options and their\n     *                      parameters have been processed)\n     * @throws              IllegalArgumentException if any of the\n     *                      parameters are not correctly specified.\n     * @see                 #setCmdName(String) setCmdName()\n     * @see                 #setCmdDesc(String) setCmdDesc()\n     * @see                 #setOptions(Parameter[]) setOptions()\n     * @see                 PosixCmdLineParser\n     */\n    public BasicCmdLineHandler(String cmdName, String cmdDesc, Collection options, Collection args) {\n        this(cmdName, cmdDesc, (Parameter[]) options.toArray(new Parameter[0]), (Parameter[]) args.toArray(new Parameter[0]));\n    }\n\n    /**\n     * Parse the specified command line arguments.  This method will fail if:\n     * <ul>\n     *    <li>the CmdLineParser is unable to parse the command line\n     *        parameters into the required options and arguments.\n     *    <li>a required Parameter has not been set by the parser.\n     * </ul>\n     *\n     * @param clargs   command line arguments passed to the main() method\n     *                 of BasicCmdLineHandler's creating class.\n     * @return  If <code>dieOnParseError</code> is set to <code>false</code>,\n     *          this method will return true if there are no parse errors.  If\n     *          there are parse errors, <code>false</code>is returned and\n     *          an appropriate error message may be obtained by calling\n     *          {@link #getParseError()}.\n     *          <P>\n     *          If <code>dieOnParseError</code> is set to <code>true</code>\n     *          and the method fails, the program will exit with exit code 1\n     *          after printing the usage to stderr.\n     */\n    public boolean parse(String[] clargs) {\n        if (clargs == null) {\n            clargs = new String[] {};\n        }\n        try {\n            parser.parse(clargs, options, args);\n            if (!canSkipRequiredCheck()) {\n                checkForRequired();\n            }\n        } catch (CmdLineException e) {\n            if (dieOnParseError) {\n                exitUsageError(e.getMessage());\n            } else {\n                parseError = e.getMessage();\n                return false;\n            }\n        }\n        return true;\n    }\n\n    /**\n     * Sets the parser to be used to parse the command line.\n     *\n     * @param parser      the parser to be used to parse the command line\n     * @see #getParser()\n     */\n    public void setParser(CmdLineParser parser) {\n        this.parser = parser;\n    }\n\n    /**\n     * Gets the parser to be used to parse the command line.\n     *\n     * @return              the parser to be used to parse the command line\n     * @see #setParser(CmdLineParser) setParser()\n     */\n    public CmdLineParser getParser() {\n        return parser;\n    }\n\n    /**\n     * Sets a flag indicating that the program should exit in the case of\n     * a parse error (after displaying the usage and an error message) -\n     * defaults to <code>true</code>.\n     *\n     * @param val           <code>true</code> (the default) if the <code>\n     *                      parse</code> method should call System.exit() in\n     *                      case of a parse error, <code>false</code> if\n     *                      <code>parse()</code> should return to the user\n     *                      for error processing.\n     * @see     #parse(String[]) parse()\n     */\n    public void setDieOnParseError(boolean val) {\n        dieOnParseError = val;\n    }\n\n    /**\n     * Gets a flag indicating that the program should exit in the case of\n     * a parse error (after displaying the usage and an error message).\n     *\n     * @return              <code>true</code> (the default) if the <code>\n     *                      parse</code> method should call System.exit() in\n     *                      case of a parse error, <code>false</code> if\n     *                      <code>parse()</code> should return to the user\n     *                      for error processing.\n     * @see     #parse(String[]) parse()\n     */\n    public boolean getDieOnParseError() {\n        return dieOnParseError;\n    }\n\n    /**\n     * Prints the usage, followed by the specified error message, to stderr\n     * and exits the program with exit status = 1.  The error message will\n     * be prefaced with 'ERROR: '.\n     *\n     * @param errMsg        the error message\n     * @return              Doesn't return - exits the program with exit status\n     *                      of 1.\n     */\n    public void exitUsageError(String errMsg) {\n        System.err.println(getUsage(false));\n        System.err.println(\"\\n\" + parser.getUsageFormatter().formatErrorMsg(errMsg));\n        quitProgram(1);\n    }\n\n    /**\n     * sets the value of the arguments (what is left on the command line after\n     * all options, and their parameters, have been processed) associated\n     * with the command\n     *\n     * @param args          A Collection of {@link Parameter} objects.  This may\n     *                      be null if the command accepts no command line\n     *                      arguments.\n     */\n    public void setArgs(Parameter[] args) {\n        this.args.clear();\n        if (args != null) {\n            for (int i = 0; i < args.length; i++) {\n                addArg(args[i]);\n            }\n        }\n    }\n\n    /**\n     * Adds a command line arguement.  Command line arguments must be added\n     * in the order that they will be specified on the command line.\n     *\n     * @param arg           the new command line argument\n     * @throws  IllegalArgumentException if:\n     *          <ul>\n     *              <li><code>arg</code> is null\n     *              <li>the previously added argument was multi-valued (only\n     *                  the last argument can be multi-valued)\n     *              <li><code>arg</code> is a required argument but the\n     *                  previous argument was optional\n     *          </ul>\n     */\n    public void addArg(Parameter arg) {\n        if (arg == null) {\n            throw new IllegalArgumentException(Strings.get(\"BasicCmdLineHandler.nullArgNotAllowed\"));\n        }\n        if (args.size() > 0) {\n            Parameter lastArg = (Parameter) args.get(args.size() - 1);\n            if (lastArg.isMultiValued()) {\n                throw new IllegalArgumentException(Strings.get(\"BasicCmdLineHandler.multiValueArgNotLast\", new Object[] { lastArg.getTag() }));\n            }\n            if (!arg.isOptional() && lastArg.isOptional()) {\n                throw new IllegalArgumentException(Strings.get(\"BasicCmdLineHandler.requiredArgAfterOptArg\", new Object[] { arg.getTag(), lastArg.getTag() }));\n            }\n        }\n        args.add(arg);\n    }\n\n    /**\n     * gets the value of the arguments (what is left on the command line after\n     * all options, and their parameters, have been processed) associated\n     * with the command\n     *\n     * @return              the command's options\n     */\n    public List getArgs() {\n        return args;\n    }\n\n    /**\n     * gets the argument specified by <code>tag</code>\n     *\n     * @param tag           identifies the argument to be returned\n     * @return              The argument associated with <code>tag</code>.\n     *                      If no matching argument is found, null is returned.\n     */\n    public Parameter getArg(String tag) {\n        Parameter arg;\n        for (Iterator itr = args.iterator(); itr.hasNext(); ) {\n            arg = (Parameter) itr.next();\n            if (arg.getTag().equals(tag)) {\n                return arg;\n            }\n        }\n        return null;\n    }\n\n    /**\n     * Sets the value of the options associated with the command\n     *\n     * @param options       A Collection of {@link Parameter} objects.  This may\n     *                      be null if the command accepts no command line\n     *                      options.\n     */\n    public void setOptions(Parameter[] options) {\n        this.options.clear();\n        if (options != null) {\n            for (int i = 0; i < options.length; i++) {\n                addOption(options[i]);\n            }\n        }\n    }\n\n    /**\n     * Adds a command line option.\n     *\n     * @param opt           the new command line option\n     * @throws              NullPointerException if <code>opt</code> is null.\n     * @throws              IllegalArgumentException if an option with the\n     *                      same tag has already been added.\n     */\n    public void addOption(Parameter opt) {\n        if (opt == null) {\n            throw new NullPointerException();\n        }\n        if (options.containsKey(opt.getTag())) {\n            throw new IllegalArgumentException(Strings.get(\"BasicCmdLineHandler.duplicateOption\", new Object[] { opt.getTag() }));\n        }\n        options.put(opt.getTag().toLowerCase(), opt);\n    }\n\n    /**\n     * gets the value of the options associated with the command\n     *\n     * @return              the command's options\n     */\n    public Collection getOptions() {\n        return options.values();\n    }\n\n    /**\n     * gets the option specified by <code>tag</code>\n     *\n     * @param tag           identifies the option to be returned\n     * @return              the option associated with <code>tag</code>\n     */\n    public Parameter getOption(String tag) {\n        return (Parameter) options.get(tag);\n    }\n\n    /**\n     * sets a description of the command's purpose\n     *\n     * @param cmdDesc     a short description of the command's purpose\n     * @throws              IllegalArgumentException if <code>cmdDesc\n     *                      </code> is null or of 0 length.\n     */\n    public void setCmdDesc(String cmdDesc) {\n        if (cmdDesc == null || cmdDesc.length() <= 0) {\n            throw new IllegalArgumentException(Strings.get(\"BasicCmdLineHandler.cmdDescTooShort\", new Object[] { cmdDesc }));\n        }\n        this.cmdDesc = cmdDesc;\n    }\n\n    /**\n     * gets a description of the command's purpose\n     *\n     * @return              the command's description\n     */\n    public String getCmdDesc() {\n        return cmdDesc;\n    }\n\n    /**\n     * sets the value of the command name associated with this BasicCmdLineHandler\n     *\n     * @param cmdName       the name of the command associated with this\n     *                      BasicCmdLineHandler\n     * @throws              IllegalArgumentException if cmdName is null,\n     *                      or of 0 length\n     */\n    public void setCmdName(String cmdName) {\n        if (cmdName == null || cmdName.length() <= 0) {\n            throw new IllegalArgumentException(Strings.get(\"BasicCmdLineHandler.cmdNameTooShort\", new Object[] { cmdName }));\n        }\n        this.cmdName = cmdName;\n    }\n\n    /**\n     * gets the value of the command name associated with this\n     * BasicCmdLineHandler\n     *\n     * @return              the command name\n     */\n    public String getCmdName() {\n        return cmdName;\n    }\n\n    /**\n     * Gets the usage statement associated with the command.\n     *\n     * @param hidden        indicates whether hidden options are to be included\n     *                      in the usage.\n     * @return              the usage statement associated with the command\n     */\n    public String getUsage(boolean hidden) {\n        return parser.getUsageFormatter().formatUsage(cmdName, cmdDesc, options, args, hidden);\n    }\n\n    /**\n     * Sets the error message from the last call to parse().\n     *\n     * @param parseError      the error message from the last call to parse()\n     * @see #getParseError()\n     */\n    public void setParseError(String parseError) {\n        this.parseError = parseError;\n    }\n\n    /**\n     * Gets the error message from the last call to parse().\n     *\n     * @return              the error message from the last call to parse()\n     * @see #setParseError(String) setParseError()\n     */\n    public String getParseError() {\n        return parseError;\n    }\n\n    /**\n     * Indicates whether the check for required Parameters can be skipped\n     * due to a Parameter with flag <code>ignoreRequired = true</code>\n     * having been set.\n     *\n     * @return              true if the check for required parameters may be\n     *                      skipped\n     */\n    private boolean canSkipRequiredCheck() {\n        Parameter p;\n        for (Iterator itr = options.values().iterator(); itr.hasNext(); ) {\n            p = (Parameter) itr.next();\n            if (p.getIgnoreRequired() && p.isSet()) {\n                return true;\n            }\n        }\n        for (Iterator itr = args.iterator(); itr.hasNext(); ) {\n            p = (Parameter) itr.next();\n            if (p.getIgnoreRequired() && p.isSet()) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n    /**\n     * Verifies that all required options and arguments have been specified.\n     *\n     * @throws  CmdLineException if a required option or argument is not set.\n     */\n    private void checkForRequired() throws CmdLineException {\n        Parameter p;\n        for (Iterator itr = options.values().iterator(); itr.hasNext(); ) {\n            p = (Parameter) itr.next();\n            if (!p.isOptional() && !p.isSet()) {\n                throw new CmdLineException(Strings.get(\"BasicCmdLineHandler.missingRequiredOpt\", new Object[] { p.getTag() }));\n            }\n        }\n        for (Iterator itr = args.iterator(); itr.hasNext(); ) {\n            p = (Parameter) itr.next();\n            if (!p.isOptional() && !p.isSet()) {\n                throw new CmdLineException(Strings.get(\"BasicCmdLineHandler.missingRequiredArg\", new Object[] { p.getTag() }));\n            }\n        }\n    }\n\n    /**\n     * Exits the program with the specified exit status.\n     *\n     * @param exitStatus    the program's exit status\n     * @return              this method never returns - the program is\n     *                      terminated\n     */\n    private void quitProgram(int exitStatus) {\n        System.exit(exitStatus);\n    }\n}\n",
		"id": "EvoSuiteBenchmark/109_pdfsam/src/main/java/jcmdline/BasicCmdLineHandlerTest.java",
		"test_prompt": "// BasicCmdLineHandlerTest.java\npackage jcmdline;\n\nimport java.util.ArrayList;\nimport java.util.Collection;\nimport java.util.HashMap;\nimport java.util.Iterator;\nimport java.util.List;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link BasicCmdLineHandler}.\n* It contains ten unit test cases for the {@link BasicCmdLineHandler#parse(String[])} method.\n*/\nclass BasicCmdLineHandlerTest {"
	},
	{
		"original_code": "// IntParam.java\n/*\n * IntParam.java\n *\n * Classes:\n *   public   IntParam\n *   \n * ***** BEGIN LICENSE BLOCK *****\n * Version: MPL 1.1\n *\n * The contents of this file are subject to the Mozilla Public License Version\n * 1.1 (the \"License\"); you may not use this file except in compliance with\n * the License. You may obtain a copy of the License at\n * http://www.mozilla.org/MPL/\n *\n * Software distributed under the License is distributed on an \"AS IS\" basis,\n * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License\n * for the specific language governing rights and limitations under the\n * License.\n *\n * The Original Code is the Java jcmdline (command line management) package.\n *\n * The Initial Developer of the Original Code is Lynne Lawrence.\n * \n * Portions created by the Initial Developer are Copyright (C) 2002\n * the Initial Developer. All Rights Reserved.\n *\n * Contributor(s):  Lynne Lawrence <lgl@visuallink.com>\n *\n * ***** END LICENSE BLOCK *****\n */\npackage jcmdline;\n\n/**\n * Encapsulate a command line parameter whose value will be a signed\n * integer in the same range as a java int.\n *\n * @author          Lynne Lawrence\n * @version         jcmdline Rel. @VERSION@ $Id: IntParam.java,v 1.2 2002/12/07 14:22:06 lglawrence Exp $\n * @see CmdLineParser\n */\npublic class IntParam extends AbstractParameter {\n\n    /**\n     * the default label that will represent option values for this Parameter\n     * when displaying usage.  The following demonstrates a possible usage\n     * excerpt for a IntParam option, where the option label is '&lt;n&gt;':\n     * <pre>\n     *    count &lt;n&gt;  Specifies the maximum number of files to be\n     *               produced by this program.\n     * </pre>\n     * @see AbstractParameter#setOptionLabel(String) setOptionLabel()\n     * @see \"<i>IntParam.defaultOptionLabel</i> in 'strings' properties file\"\n     */\n    public static final String DEFAULT_OPTION_LABEL = Strings.get(\"IntParam.defaultOptionLabel\");\n\n    /**\n     * the maximum acceptable number - defaults to Integer.MAX_VALUE\n     */\n    protected int max = Integer.MAX_VALUE;\n\n    /**\n     * the minimum acceptable number - defaults to Integer.MIN_VALUE\n     */\n    protected int min = Integer.MIN_VALUE;\n\n    /**\n     * constructor - creates single-valued, optional, public\n     * parameter which will\n     * accept an integer between Integer.MIN_VALUE and Integer.MAX_VALUE.\n     *\n     * @param tag           a unique identifier for this parameter\n     * @param desc          a description of the parameter, suitable for display\n     *                      in a usage statement\n     * @throws              IllegalArgumentException if <code>tag</code>\n     *                      or <desc> are invalid.\n     * @see                 AbstractParameter#setTag(String) setTag()\n     * @see                 AbstractParameter#setDesc(String) setDesc()\n     */\n    public IntParam(String tag, String desc) {\n        this(tag, desc, Integer.MIN_VALUE, Integer.MAX_VALUE, OPTIONAL, SINGLE_VALUED, PUBLIC);\n    }\n\n    /**\n     * constructor - creates single-valued, public parameter which will\n     * accept an integer between Integer.MIN_VALUE and Integer.MAX_VALUE, and\n     * will be either optional or required, as specified.\n     *\n     * @param tag           a unique identifier for this parameter\n     * @param desc          a description of the parameter, suitable for display\n     *                      in a usage statement\n     * @param optional      {@link Parameter#OPTIONAL OPTIONAL} if\n     *                      optional,\n     *                      {@link Parameter#REQUIRED REQUIRED} if required\n     * @throws              IllegalArgumentException if any of the specified\n     *                      parameters are invalid.\n     * @see                 AbstractParameter#setTag(String) setTag()\n     * @see                 AbstractParameter#setDesc(String) setDesc()\n     */\n    public IntParam(String tag, String desc, boolean optional) {\n        this(tag, desc, Integer.MIN_VALUE, Integer.MAX_VALUE, optional, SINGLE_VALUED, PUBLIC);\n    }\n\n    /**\n     * constructor - creates a public parameter which will\n     * accept an integer between Integer.MIN_VALUE and Integer.MAX_VALUE, and\n     * will be either optional or required, and/or multi-valued, as specified.\n     *\n     * @param tag           a unique identifier for this parameter\n     * @param desc          a description of the parameter, suitable for display\n     *                      in a usage statement\n     * @param optional      {@link Parameter#OPTIONAL OPTIONAL} if\n     *                      optional,\n     *                      {@link Parameter#REQUIRED REQUIRED} if required\n     * @param multiValued   {@link Parameter#MULTI_VALUED MULTI_VALUED} if\n     *                      the parameter can accept multiple values,\n     *                      {@link Parameter#SINGLE_VALUED SINGLE_VALUED}\n     *                      if the parameter can contain only a single value\n     * @throws              IllegalArgumentException if any of the specified\n     *                      parameters are invalid.\n     * @see                 AbstractParameter#setTag(String) setTag()\n     * @see                 AbstractParameter#setDesc(String) setDesc()\n     * @see                 Parameter#SINGLE_VALUED SINGLE_VALUED\n     * @see                 Parameter#MULTI_VALUED MULTI_VALUED\n     */\n    public IntParam(String tag, String desc, boolean optional, boolean multiValued) {\n        this(tag, desc, Integer.MIN_VALUE, Integer.MAX_VALUE, optional, multiValued, PUBLIC);\n    }\n\n    /**\n     * constructor - creates a parameter which will\n     * accept an integer between Integer.MIN_VALUE and Integer.MAX_VALUE, and\n     * will be either optional or required, and/or multi-valued, as specified.\n     *\n     * @param tag           a unique identifier for this parameter\n     * @param desc          a description of the parameter, suitable for display\n     *                      in a usage statement\n     * @param optional      {@link Parameter#OPTIONAL OPTIONAL} if\n     *                      optional,\n     *                      {@link Parameter#REQUIRED REQUIRED} if required\n     * @param multiValued   {@link Parameter#MULTI_VALUED MULTI_VALUED} if\n     *                      the parameter can accept multiple values,\n     *                      {@link Parameter#SINGLE_VALUED SINGLE_VALUED}\n     *                      if the parameter can contain only a single value\n     * @param hidden        {@link Parameter#HIDDEN HIDDEN} if parameter is\n     *                      not to be listed in the usage,\n     *                      {@link Parameter#PUBLIC PUBLIC} otherwise.\n     * @throws              IllegalArgumentException if any of the specified\n     *                      parameters are invalid.\n     * @see                 AbstractParameter#setTag(String) setTag()\n     * @see                 AbstractParameter#setDesc(String) setDesc()\n     * @see                 Parameter#SINGLE_VALUED SINGLE_VALUED\n     * @see                 Parameter#MULTI_VALUED MULTI_VALUED\n     * @see                 Parameter#HIDDEN HIDDEN\n     * @see                 Parameter#PUBLIC PUBLIC\n     */\n    public IntParam(String tag, String desc, boolean optional, boolean multiValued, boolean hidden) {\n        this(tag, desc, Integer.MIN_VALUE, Integer.MAX_VALUE, optional, multiValued, hidden);\n    }\n\n    /**\n     * constructor - creates a single-valued, optional, public, parameter\n     * that will accept an integer between the specifed minimum and maximum\n     * values.\n     *\n     * @param tag           a unique identifier for this parameter\n     * @param desc          a description of the parameter, suitable for display\n     *                      in a usage statement\n     * @param min           the minimum acceptable value\n     * @param max           the maximum acceptable value\n     * @throws              IllegalArgumentException if any parameter is\n     *                      invalid.\n     * @see                 AbstractParameter#setTag(String) setTag()\n     * @see                 AbstractParameter#setDesc(String) setDesc()\n     * @see                 #setMin(int) setMin()\n     * @see                 #setMax(int) setMax()\n     */\n    public IntParam(String tag, String desc, int min, int max) {\n        this(tag, desc, min, max, OPTIONAL, SINGLE_VALUED, PUBLIC);\n    }\n\n    /**\n     * constructor - creates a single-valued, public parameter\n     * that will accept an integer between the specifed minimum and maximum\n     * values, and which is required or optional, as specified.\n     *\n     * @param tag           a unique identifier for this parameter\n     * @param desc          a description of the parameter, suitable for display\n     *                      in a usage statement\n     * @param min           the minimum acceptable value\n     * @param max           the maximum acceptable value\n     * @param optional      {@link Parameter#OPTIONAL OPTIONAL} if\n     *                      optional,\n     *                      {@link Parameter#REQUIRED REQUIRED} if required\n     * @throws              IllegalArgumentException if any parameter is\n     *                      invalid.\n     * @see                 AbstractParameter#setTag(String) setTag()\n     * @see                 AbstractParameter#setDesc(String) setDesc()\n     * @see                 #setMin(int) setMin()\n     * @see                 #setMax(int) setMax()\n     * @see                 Parameter#OPTIONAL OPTIONAL\n     * @see                 Parameter#REQUIRED REQUIRED\n     */\n    public IntParam(String tag, String desc, int min, int max, boolean optional) {\n        this(tag, desc, min, max, optional, SINGLE_VALUED, PUBLIC);\n    }\n\n    /**\n     * constructor - creates a public parameter\n     * that will accept an integer between the specifed minimum and maximum\n     * values, and which is required or optional and/or multi-valued,\n     * as specified.\n     *\n     * @param tag           a unique identifier for this parameter\n     * @param desc          a description of the parameter, suitable for display\n     *                      in a usage statement\n     * @param min           the minimum acceptable value\n     * @param max           the maximum acceptable value\n     * @param optional      {@link Parameter#OPTIONAL OPTIONAL} if\n     *                      optional,\n     *                      {@link Parameter#REQUIRED REQUIRED} if required\n     * @param multiValued   {@link Parameter#MULTI_VALUED MULTI_VALUED} if\n     *                      the parameter can accept multiple values,\n     *                      {@link Parameter#SINGLE_VALUED SINGLE_VALUED}\n     *                      if the parameter can contain only a single value\n     * @throws              IllegalArgumentException if any parameter is\n     *                      invalid.\n     * @see                 AbstractParameter#setTag(String) setTag()\n     * @see                 AbstractParameter#setDesc(String) setDesc()\n     * @see                 #setMin(int) setMin()\n     * @see                 #setMax(int) setMax()\n     * @see                 Parameter#OPTIONAL OPTIONAL\n     * @see                 Parameter#REQUIRED REQUIRED\n     * @see                 Parameter#SINGLE_VALUED SINGLE_VALUED\n     * @see                 Parameter#MULTI_VALUED MULTI_VALUED\n     */\n    public IntParam(String tag, String desc, int min, int max, boolean optional, boolean multiValued) {\n        this(tag, desc, min, max, optional, multiValued, PUBLIC);\n    }\n\n    /**\n     * constructor - creates a parameter\n     * that will accept an integer between the specifed minimum and maximum\n     * values, and for which all other options are specified.\n     *\n     * @param tag           a unique identifier for this parameter\n     * @param desc          a description of the parameter, suitable for display\n     *                      in a usage statement\n     * @param min           the minimum acceptable value\n     * @param max           the maximum acceptable value\n     * @param optional      {@link Parameter#OPTIONAL OPTIONAL} if\n     *                      optional,\n     *                      {@link Parameter#REQUIRED REQUIRED} if required\n     * @param multiValued   {@link Parameter#MULTI_VALUED MULTI_VALUED} if\n     *                      the parameter can accept multiple values,\n     *                      {@link Parameter#SINGLE_VALUED SINGLE_VALUED}\n     *                      if the parameter can contain only a single value\n     * @param hidden        {@link Parameter#HIDDEN HIDDEN} if parameter is\n     *                      not to be listed in the usage,\n     *                      {@link Parameter#PUBLIC PUBLIC} otherwise.\n     * @throws              IllegalArgumentException if any parameter is\n     *                      invalid.\n     * @see                 AbstractParameter#setTag(String) setTag()\n     * @see                 AbstractParameter#setDesc(String) setDesc()\n     * @see                 #setMin(int) setMin()\n     * @see                 #setMax(int) setMax()\n     * @see                 Parameter#OPTIONAL OPTIONAL\n     * @see                 Parameter#REQUIRED REQUIRED\n     * @see                 Parameter#SINGLE_VALUED SINGLE_VALUED\n     * @see                 Parameter#MULTI_VALUED MULTI_VALUED\n     * @see                 Parameter#HIDDEN HIDDEN\n     * @see                 Parameter#PUBLIC PUBLIC\n     */\n    public IntParam(String tag, String desc, int min, int max, boolean optional, boolean multiValued, boolean hidden) {\n        this.setTag(tag);\n        this.setMin(min);\n        this.setMax(max);\n        this.setDesc(desc);\n        this.setOptional(optional);\n        this.setMultiValued(multiValued);\n        this.setHidden(hidden);\n        this.setOptionLabel(DEFAULT_OPTION_LABEL);\n    }\n\n    /**\n     * constructor - creates a single-valued, optional, public,\n     * number parameter whose value must be one of the specified values.\n     *\n     * @param tag           the tag associated with this parameter\n     * @param desc          a description of the parameter, suitable for display\n     *                      in a usage statement\n     * @param acceptableValues  the acceptable values for the parameter\n     * @throws              IllegalArgumentException if any parameter is\n     *                      invalid.\n     * @see                 AbstractParameter#setTag(String) setTag()\n     * @see                 AbstractParameter#setDesc(String) setDesc()\n     * @see                 #setAcceptableIntValues(int[]) setAcceptableIntValues()\n     */\n    public IntParam(String tag, String desc, int[] acceptableValues) {\n        this(tag, desc, acceptableValues, OPTIONAL, SINGLE_VALUED, PUBLIC);\n    }\n\n    /**\n     * constructor - creates a single-valued, public,\n     * number parameter whose value must be one of the specified values,\n     * and which is required or optional, as specified.\n     *\n     * @param tag           the tag associated with this parameter\n     * @param desc          a description of the parameter, suitable for display\n     *                      in a usage statement\n     * @param acceptableValues  the acceptable values for the parameter\n     * @param optional      {@link Parameter#OPTIONAL OPTIONAL} if\n     *                      optional,\n     *                      {@link Parameter#REQUIRED REQUIRED} if required\n     * @throws              IllegalArgumentException if any parameter is\n     *                      invalid.\n     * @see                 AbstractParameter#setTag(String) setTag()\n     * @see                 AbstractParameter#setDesc(String) setDesc()\n     * @see                 #setAcceptableIntValues(int[]) setAcceptableIntValues()\n     * @see                 Parameter#OPTIONAL OPTIONAL\n     * @see                 Parameter#REQUIRED REQUIRED\n     */\n    public IntParam(String tag, String desc, int[] acceptableValues, boolean optional) {\n        this(tag, desc, acceptableValues, optional, SINGLE_VALUED, PUBLIC);\n    }\n\n    /**\n     * constructor - creates a public\n     * number parameter whose value must be one of the specified values,\n     * and which is required or optional and/or multi-valued, as specified.\n     *\n     * @param tag           the tag associated with this parameter\n     * @param desc          a description of the parameter, suitable for display\n     *                      in a usage statement\n     * @param acceptableValues  the acceptable values for the parameter\n     * @param optional      {@link Parameter#OPTIONAL OPTIONAL} if\n     *                      optional,\n     *                      {@link Parameter#REQUIRED REQUIRED} if required\n     * @param multiValued   {@link Parameter#MULTI_VALUED MULTI_VALUED} if\n     *                      the parameter can accept multiple values,\n     *                      {@link Parameter#SINGLE_VALUED SINGLE_VALUED}\n     *                      if the parameter can contain only a single value\n     * @throws              IllegalArgumentException if any parameter is\n     *                      invalid.\n     * @see                 AbstractParameter#setTag(String) setTag()\n     * @see                 AbstractParameter#setDesc(String) setDesc()\n     * @see                 #setAcceptableIntValues(int[]) setAcceptableIntValues()\n     * @see                 Parameter#OPTIONAL OPTIONAL\n     * @see                 Parameter#REQUIRED REQUIRED\n     * @see                 Parameter#SINGLE_VALUED SINGLE_VALUED\n     * @see                 Parameter#MULTI_VALUED MULTI_VALUED\n     */\n    public IntParam(String tag, String desc, int[] acceptableValues, boolean optional, boolean multiValued) {\n        this(tag, desc, acceptableValues, optional, multiValued, PUBLIC);\n    }\n\n    /**\n     * constructor - creates a\n     * number parameter whose value must be one of the specified values,\n     * and all of whose other options are specified.\n     *\n     * @param tag           the tag associated with this parameter\n     * @param desc          a description of the parameter, suitable for display\n     *                      in a usage statement\n     * @param acceptableValues  the acceptable values for the parameter\n     * @param optional      {@link Parameter#OPTIONAL OPTIONAL} if\n     *                      optional,\n     *                      {@link Parameter#REQUIRED REQUIRED} if required\n     * @param multiValued   {@link Parameter#MULTI_VALUED MULTI_VALUED} if\n     *                      the parameter can accept multiple values,\n     *                      {@link Parameter#SINGLE_VALUED SINGLE_VALUED}\n     *                      if the parameter can contain only a single value\n     * @param hidden        {@link Parameter#HIDDEN HIDDEN} if parameter is\n     *                      not to be listed in the usage,\n     *                      {@link Parameter#PUBLIC PUBLIC} otherwise.\n     * @throws              IllegalArgumentException if any parameter is\n     *                      invalid.\n     * @see                 AbstractParameter#setTag(String) setTag()\n     * @see                 AbstractParameter#setDesc(String) setDesc()\n     * @see                 #setAcceptableIntValues(int[]) setAcceptableIntValues()\n     * @see                 Parameter#OPTIONAL OPTIONAL\n     * @see                 Parameter#REQUIRED REQUIRED\n     * @see                 Parameter#SINGLE_VALUED SINGLE_VALUED\n     * @see                 Parameter#MULTI_VALUED MULTI_VALUED\n     * @see                 Parameter#HIDDEN HIDDEN\n     * @see                 Parameter#PUBLIC PUBLIC\n     */\n    public IntParam(String tag, String desc, int[] acceptableValues, boolean optional, boolean multiValued, boolean hidden) {\n        this.setTag(tag);\n        this.setAcceptableIntValues(acceptableValues);\n        this.setDesc(desc);\n        this.setOptional(optional);\n        this.setMultiValued(multiValued);\n        this.setHidden(hidden);\n        this.setOptionLabel(DEFAULT_OPTION_LABEL);\n    }\n\n    /**\n     * Sets the minimum acceptable value for the parameter's value.\n     * <P>\n     * If both <code>acceptableValues</code> and/or a minimum or maximum\n     * limit for the parameter value are specified, a valid value must\n     * satisfy <b>all</b> of the constraints.\n     *\n     * @param min       the minimum acceptable value\n     * @throws          IllegalArgumentException if <code>min</code> is\n     *                  greater than <code>max</code>\n     */\n    public void setMin(int min) {\n        if (min > max) {\n            throw new IllegalArgumentException(Strings.get(\"IntParam.maxLessThanMin\", new Object[] { tag }));\n        }\n        this.min = min;\n    }\n\n    /**\n     * Gets the value of the IntParam as in int.  If the IntParam is\n     * multi-valued, only the first value is returned.\n     *\n     * @return              the value as an int\n     * @throws              RuntimeException if the value of the IntParam\n     *                      has not been set.\n     * @see Parameter#isSet()\n     */\n    public int intValue() {\n        if (!set) {\n            throw new RuntimeException(Strings.get(\"IntParam.valueNotSet\", new Object[] { tag }));\n        }\n        return Integer.parseInt((String) values.get(0));\n    }\n\n    /**\n     * Gets the values of the IntParam as an int array.  Note that if the\n     * IntParam has no values, an empty array is returned.\n     *\n     * @return              an array of int values\n     * @see Parameter#isSet()\n     */\n    public int[] intValues() {\n        int[] vals = new int[values.size()];\n        for (int i = 0; i < vals.length; i++) {\n            vals[i] = Integer.parseInt((String) values.get(i));\n        }\n        return vals;\n    }\n\n    /**\n     * gets minimum acceptable value for the parameter's value\n     *\n     * @return              the minimum acceptable value\n     */\n    public int getMin() {\n        return min;\n    }\n\n    /**\n     * Sets the maximum acceptable value for the parameter.\n     * <P>\n     * If both <code>acceptableValues</code> and/or a minimum or maximum\n     * limit for the parameter value are specified, a valid value must\n     * satisfy <b>all</b> of the constraints.\n     *\n     * @param max       the maximum acceptable value\n     * @throws          IllegalArgumentException if <code>min</code> is\n     *                  greater than <code>max</code>\n     */\n    public void setMax(int max) {\n        if (min > max) {\n            throw new IllegalArgumentException(Strings.get(\"IntParam.maxLessThanMin\", new Object[] { tag }));\n        }\n        this.max = max;\n    }\n\n    /**\n     * gets the maximum acceptable value for the parameter\n     *\n     * @return              the maximum acceptable value\n     */\n    public int getMax() {\n        return max;\n    }\n\n    /**\n     * Sets the acceptable values for this parameter.\n     * <P>\n     * If both <code>acceptableValues</code> and/or a minimum or maximum\n     * limit for the parameter value are specified, a valid value must\n     * satisfy <b>all</b> of the constraints.\n     *\n     * @param acceptableValues  An array of acceptable int values that\n     *                          the parameter's values must match.  If null,\n     *                          the parameter's values can be any int.\n     */\n    public void setAcceptableIntValues(int[] intValues) {\n        String[] sValues = new String[intValues.length];\n        for (int i = 0; i < intValues.length; i++) {\n            sValues[i] = Integer.toString(intValues[i]);\n        }\n        setAcceptableValues(sValues);\n    }\n\n    /**\n     * gets the acceptable values for this parameter\n     *\n     * @return              The acceptable values for this parameter.  If no\n     *                      acceptable values have been specified, this\n     *                      method returns null.\n     */\n    public int[] getAcceptableIntValues() {\n        String[] sValues = getAcceptableValues();\n        int[] intValues = new int[sValues.length];\n        for (int i = 0; i < sValues.length; i++) {\n            intValues[i] = Integer.parseInt(sValues[i]);\n        }\n        return intValues;\n    }\n\n    /**\n     * Validates a prospective value with regards to the minimum and maximum\n     * values and the acceptableValues called by add/setValue(s)().\n     *\n     * @param val           the prospective value to validate\n     * @throws              CmdLineException if\n     *                      <code>value</code> is not valid with regard to\n     *     #                      the minimum and\n     *                      maximum values, and the acceptableValues.\n     */\n    public void validateValue(String val) throws CmdLineException {\n        // Strip off any leading 0s before calling\n        // AbstractParameter.validateValue() because the Strings we sent\n        // as acceptable values were without.\n        int offset = 0;\n        while (val.startsWith(\"0\", offset)) {\n            offset++;\n        }\n        super.validateValue(val.substring(offset));\n        CmdLineException exception = new CmdLineException(Strings.get(\"IntParam.validValues\", new Object[] { tag, new Integer(min), new Integer(max) }));\n        int intVal = 0;\n        try {\n            intVal = Integer.parseInt(val);\n        } catch (NumberFormatException e) {\n            throw exception;\n        }\n        if (intVal < min || intVal > max) {\n            throw exception;\n        }\n    }\n}\n",
		"id": "EvoSuiteBenchmark/109_pdfsam/src/main/java/jcmdline/IntParamTest0.java",
		"test_prompt": "// IntParamTest0.java\npackage jcmdline;\n\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link IntParam}.\n* It contains ten unit test cases for the {@link IntParam#intValue()} method.\n*/\nclass IntParamTest0 {"
	},
	{
		"original_code": "// IntParam.java\n/*\n * IntParam.java\n *\n * Classes:\n *   public   IntParam\n *   \n * ***** BEGIN LICENSE BLOCK *****\n * Version: MPL 1.1\n *\n * The contents of this file are subject to the Mozilla Public License Version\n * 1.1 (the \"License\"); you may not use this file except in compliance with\n * the License. You may obtain a copy of the License at\n * http://www.mozilla.org/MPL/\n *\n * Software distributed under the License is distributed on an \"AS IS\" basis,\n * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License\n * for the specific language governing rights and limitations under the\n * License.\n *\n * The Original Code is the Java jcmdline (command line management) package.\n *\n * The Initial Developer of the Original Code is Lynne Lawrence.\n * \n * Portions created by the Initial Developer are Copyright (C) 2002\n * the Initial Developer. All Rights Reserved.\n *\n * Contributor(s):  Lynne Lawrence <lgl@visuallink.com>\n *\n * ***** END LICENSE BLOCK *****\n */\npackage jcmdline;\n\n/**\n * Encapsulate a command line parameter whose value will be a signed\n * integer in the same range as a java int.\n *\n * @author          Lynne Lawrence\n * @version         jcmdline Rel. @VERSION@ $Id: IntParam.java,v 1.2 2002/12/07 14:22:06 lglawrence Exp $\n * @see CmdLineParser\n */\npublic class IntParam extends AbstractParameter {\n\n    /**\n     * the default label that will represent option values for this Parameter\n     * when displaying usage.  The following demonstrates a possible usage\n     * excerpt for a IntParam option, where the option label is '&lt;n&gt;':\n     * <pre>\n     *    count &lt;n&gt;  Specifies the maximum number of files to be\n     *               produced by this program.\n     * </pre>\n     * @see AbstractParameter#setOptionLabel(String) setOptionLabel()\n     * @see \"<i>IntParam.defaultOptionLabel</i> in 'strings' properties file\"\n     */\n    public static final String DEFAULT_OPTION_LABEL = Strings.get(\"IntParam.defaultOptionLabel\");\n\n    /**\n     * the maximum acceptable number - defaults to Integer.MAX_VALUE\n     */\n    protected int max = Integer.MAX_VALUE;\n\n    /**\n     * the minimum acceptable number - defaults to Integer.MIN_VALUE\n     */\n    protected int min = Integer.MIN_VALUE;\n\n    /**\n     * constructor - creates single-valued, optional, public\n     * parameter which will\n     * accept an integer between Integer.MIN_VALUE and Integer.MAX_VALUE.\n     *\n     * @param tag           a unique identifier for this parameter\n     * @param desc          a description of the parameter, suitable for display\n     *                      in a usage statement\n     * @throws              IllegalArgumentException if <code>tag</code>\n     *                      or <desc> are invalid.\n     * @see                 AbstractParameter#setTag(String) setTag()\n     * @see                 AbstractParameter#setDesc(String) setDesc()\n     */\n    public IntParam(String tag, String desc) {\n        this(tag, desc, Integer.MIN_VALUE, Integer.MAX_VALUE, OPTIONAL, SINGLE_VALUED, PUBLIC);\n    }\n\n    /**\n     * constructor - creates single-valued, public parameter which will\n     * accept an integer between Integer.MIN_VALUE and Integer.MAX_VALUE, and\n     * will be either optional or required, as specified.\n     *\n     * @param tag           a unique identifier for this parameter\n     * @param desc          a description of the parameter, suitable for display\n     *                      in a usage statement\n     * @param optional      {@link Parameter#OPTIONAL OPTIONAL} if\n     *                      optional,\n     *                      {@link Parameter#REQUIRED REQUIRED} if required\n     * @throws              IllegalArgumentException if any of the specified\n     *                      parameters are invalid.\n     * @see                 AbstractParameter#setTag(String) setTag()\n     * @see                 AbstractParameter#setDesc(String) setDesc()\n     */\n    public IntParam(String tag, String desc, boolean optional) {\n        this(tag, desc, Integer.MIN_VALUE, Integer.MAX_VALUE, optional, SINGLE_VALUED, PUBLIC);\n    }\n\n    /**\n     * constructor - creates a public parameter which will\n     * accept an integer between Integer.MIN_VALUE and Integer.MAX_VALUE, and\n     * will be either optional or required, and/or multi-valued, as specified.\n     *\n     * @param tag           a unique identifier for this parameter\n     * @param desc          a description of the parameter, suitable for display\n     *                      in a usage statement\n     * @param optional      {@link Parameter#OPTIONAL OPTIONAL} if\n     *                      optional,\n     *                      {@link Parameter#REQUIRED REQUIRED} if required\n     * @param multiValued   {@link Parameter#MULTI_VALUED MULTI_VALUED} if\n     *                      the parameter can accept multiple values,\n     *                      {@link Parameter#SINGLE_VALUED SINGLE_VALUED}\n     *                      if the parameter can contain only a single value\n     * @throws              IllegalArgumentException if any of the specified\n     *                      parameters are invalid.\n     * @see                 AbstractParameter#setTag(String) setTag()\n     * @see                 AbstractParameter#setDesc(String) setDesc()\n     * @see                 Parameter#SINGLE_VALUED SINGLE_VALUED\n     * @see                 Parameter#MULTI_VALUED MULTI_VALUED\n     */\n    public IntParam(String tag, String desc, boolean optional, boolean multiValued) {\n        this(tag, desc, Integer.MIN_VALUE, Integer.MAX_VALUE, optional, multiValued, PUBLIC);\n    }\n\n    /**\n     * constructor - creates a parameter which will\n     * accept an integer between Integer.MIN_VALUE and Integer.MAX_VALUE, and\n     * will be either optional or required, and/or multi-valued, as specified.\n     *\n     * @param tag           a unique identifier for this parameter\n     * @param desc          a description of the parameter, suitable for display\n     *                      in a usage statement\n     * @param optional      {@link Parameter#OPTIONAL OPTIONAL} if\n     *                      optional,\n     *                      {@link Parameter#REQUIRED REQUIRED} if required\n     * @param multiValued   {@link Parameter#MULTI_VALUED MULTI_VALUED} if\n     *                      the parameter can accept multiple values,\n     *                      {@link Parameter#SINGLE_VALUED SINGLE_VALUED}\n     *                      if the parameter can contain only a single value\n     * @param hidden        {@link Parameter#HIDDEN HIDDEN} if parameter is\n     *                      not to be listed in the usage,\n     *                      {@link Parameter#PUBLIC PUBLIC} otherwise.\n     * @throws              IllegalArgumentException if any of the specified\n     *                      parameters are invalid.\n     * @see                 AbstractParameter#setTag(String) setTag()\n     * @see                 AbstractParameter#setDesc(String) setDesc()\n     * @see                 Parameter#SINGLE_VALUED SINGLE_VALUED\n     * @see                 Parameter#MULTI_VALUED MULTI_VALUED\n     * @see                 Parameter#HIDDEN HIDDEN\n     * @see                 Parameter#PUBLIC PUBLIC\n     */\n    public IntParam(String tag, String desc, boolean optional, boolean multiValued, boolean hidden) {\n        this(tag, desc, Integer.MIN_VALUE, Integer.MAX_VALUE, optional, multiValued, hidden);\n    }\n\n    /**\n     * constructor - creates a single-valued, optional, public, parameter\n     * that will accept an integer between the specifed minimum and maximum\n     * values.\n     *\n     * @param tag           a unique identifier for this parameter\n     * @param desc          a description of the parameter, suitable for display\n     *                      in a usage statement\n     * @param min           the minimum acceptable value\n     * @param max           the maximum acceptable value\n     * @throws              IllegalArgumentException if any parameter is\n     *                      invalid.\n     * @see                 AbstractParameter#setTag(String) setTag()\n     * @see                 AbstractParameter#setDesc(String) setDesc()\n     * @see                 #setMin(int) setMin()\n     * @see                 #setMax(int) setMax()\n     */\n    public IntParam(String tag, String desc, int min, int max) {\n        this(tag, desc, min, max, OPTIONAL, SINGLE_VALUED, PUBLIC);\n    }\n\n    /**\n     * constructor - creates a single-valued, public parameter\n     * that will accept an integer between the specifed minimum and maximum\n     * values, and which is required or optional, as specified.\n     *\n     * @param tag           a unique identifier for this parameter\n     * @param desc          a description of the parameter, suitable for display\n     *                      in a usage statement\n     * @param min           the minimum acceptable value\n     * @param max           the maximum acceptable value\n     * @param optional      {@link Parameter#OPTIONAL OPTIONAL} if\n     *                      optional,\n     *                      {@link Parameter#REQUIRED REQUIRED} if required\n     * @throws              IllegalArgumentException if any parameter is\n     *                      invalid.\n     * @see                 AbstractParameter#setTag(String) setTag()\n     * @see                 AbstractParameter#setDesc(String) setDesc()\n     * @see                 #setMin(int) setMin()\n     * @see                 #setMax(int) setMax()\n     * @see                 Parameter#OPTIONAL OPTIONAL\n     * @see                 Parameter#REQUIRED REQUIRED\n     */\n    public IntParam(String tag, String desc, int min, int max, boolean optional) {\n        this(tag, desc, min, max, optional, SINGLE_VALUED, PUBLIC);\n    }\n\n    /**\n     * constructor - creates a public parameter\n     * that will accept an integer between the specifed minimum and maximum\n     * values, and which is required or optional and/or multi-valued,\n     * as specified.\n     *\n     * @param tag           a unique identifier for this parameter\n     * @param desc          a description of the parameter, suitable for display\n     *                      in a usage statement\n     * @param min           the minimum acceptable value\n     * @param max           the maximum acceptable value\n     * @param optional      {@link Parameter#OPTIONAL OPTIONAL} if\n     *                      optional,\n     *                      {@link Parameter#REQUIRED REQUIRED} if required\n     * @param multiValued   {@link Parameter#MULTI_VALUED MULTI_VALUED} if\n     *                      the parameter can accept multiple values,\n     *                      {@link Parameter#SINGLE_VALUED SINGLE_VALUED}\n     *                      if the parameter can contain only a single value\n     * @throws              IllegalArgumentException if any parameter is\n     *                      invalid.\n     * @see                 AbstractParameter#setTag(String) setTag()\n     * @see                 AbstractParameter#setDesc(String) setDesc()\n     * @see                 #setMin(int) setMin()\n     * @see                 #setMax(int) setMax()\n     * @see                 Parameter#OPTIONAL OPTIONAL\n     * @see                 Parameter#REQUIRED REQUIRED\n     * @see                 Parameter#SINGLE_VALUED SINGLE_VALUED\n     * @see                 Parameter#MULTI_VALUED MULTI_VALUED\n     */\n    public IntParam(String tag, String desc, int min, int max, boolean optional, boolean multiValued) {\n        this(tag, desc, min, max, optional, multiValued, PUBLIC);\n    }\n\n    /**\n     * constructor - creates a parameter\n     * that will accept an integer between the specifed minimum and maximum\n     * values, and for which all other options are specified.\n     *\n     * @param tag           a unique identifier for this parameter\n     * @param desc          a description of the parameter, suitable for display\n     *                      in a usage statement\n     * @param min           the minimum acceptable value\n     * @param max           the maximum acceptable value\n     * @param optional      {@link Parameter#OPTIONAL OPTIONAL} if\n     *                      optional,\n     *                      {@link Parameter#REQUIRED REQUIRED} if required\n     * @param multiValued   {@link Parameter#MULTI_VALUED MULTI_VALUED} if\n     *                      the parameter can accept multiple values,\n     *                      {@link Parameter#SINGLE_VALUED SINGLE_VALUED}\n     *                      if the parameter can contain only a single value\n     * @param hidden        {@link Parameter#HIDDEN HIDDEN} if parameter is\n     *                      not to be listed in the usage,\n     *                      {@link Parameter#PUBLIC PUBLIC} otherwise.\n     * @throws              IllegalArgumentException if any parameter is\n     *                      invalid.\n     * @see                 AbstractParameter#setTag(String) setTag()\n     * @see                 AbstractParameter#setDesc(String) setDesc()\n     * @see                 #setMin(int) setMin()\n     * @see                 #setMax(int) setMax()\n     * @see                 Parameter#OPTIONAL OPTIONAL\n     * @see                 Parameter#REQUIRED REQUIRED\n     * @see                 Parameter#SINGLE_VALUED SINGLE_VALUED\n     * @see                 Parameter#MULTI_VALUED MULTI_VALUED\n     * @see                 Parameter#HIDDEN HIDDEN\n     * @see                 Parameter#PUBLIC PUBLIC\n     */\n    public IntParam(String tag, String desc, int min, int max, boolean optional, boolean multiValued, boolean hidden) {\n        this.setTag(tag);\n        this.setMin(min);\n        this.setMax(max);\n        this.setDesc(desc);\n        this.setOptional(optional);\n        this.setMultiValued(multiValued);\n        this.setHidden(hidden);\n        this.setOptionLabel(DEFAULT_OPTION_LABEL);\n    }\n\n    /**\n     * constructor - creates a single-valued, optional, public,\n     * number parameter whose value must be one of the specified values.\n     *\n     * @param tag           the tag associated with this parameter\n     * @param desc          a description of the parameter, suitable for display\n     *                      in a usage statement\n     * @param acceptableValues  the acceptable values for the parameter\n     * @throws              IllegalArgumentException if any parameter is\n     *                      invalid.\n     * @see                 AbstractParameter#setTag(String) setTag()\n     * @see                 AbstractParameter#setDesc(String) setDesc()\n     * @see                 #setAcceptableIntValues(int[]) setAcceptableIntValues()\n     */\n    public IntParam(String tag, String desc, int[] acceptableValues) {\n        this(tag, desc, acceptableValues, OPTIONAL, SINGLE_VALUED, PUBLIC);\n    }\n\n    /**\n     * constructor - creates a single-valued, public,\n     * number parameter whose value must be one of the specified values,\n     * and which is required or optional, as specified.\n     *\n     * @param tag           the tag associated with this parameter\n     * @param desc          a description of the parameter, suitable for display\n     *                      in a usage statement\n     * @param acceptableValues  the acceptable values for the parameter\n     * @param optional      {@link Parameter#OPTIONAL OPTIONAL} if\n     *                      optional,\n     *                      {@link Parameter#REQUIRED REQUIRED} if required\n     * @throws              IllegalArgumentException if any parameter is\n     *                      invalid.\n     * @see                 AbstractParameter#setTag(String) setTag()\n     * @see                 AbstractParameter#setDesc(String) setDesc()\n     * @see                 #setAcceptableIntValues(int[]) setAcceptableIntValues()\n     * @see                 Parameter#OPTIONAL OPTIONAL\n     * @see                 Parameter#REQUIRED REQUIRED\n     */\n    public IntParam(String tag, String desc, int[] acceptableValues, boolean optional) {\n        this(tag, desc, acceptableValues, optional, SINGLE_VALUED, PUBLIC);\n    }\n\n    /**\n     * constructor - creates a public\n     * number parameter whose value must be one of the specified values,\n     * and which is required or optional and/or multi-valued, as specified.\n     *\n     * @param tag           the tag associated with this parameter\n     * @param desc          a description of the parameter, suitable for display\n     *                      in a usage statement\n     * @param acceptableValues  the acceptable values for the parameter\n     * @param optional      {@link Parameter#OPTIONAL OPTIONAL} if\n     *                      optional,\n     *                      {@link Parameter#REQUIRED REQUIRED} if required\n     * @param multiValued   {@link Parameter#MULTI_VALUED MULTI_VALUED} if\n     *                      the parameter can accept multiple values,\n     *                      {@link Parameter#SINGLE_VALUED SINGLE_VALUED}\n     *                      if the parameter can contain only a single value\n     * @throws              IllegalArgumentException if any parameter is\n     *                      invalid.\n     * @see                 AbstractParameter#setTag(String) setTag()\n     * @see                 AbstractParameter#setDesc(String) setDesc()\n     * @see                 #setAcceptableIntValues(int[]) setAcceptableIntValues()\n     * @see                 Parameter#OPTIONAL OPTIONAL\n     * @see                 Parameter#REQUIRED REQUIRED\n     * @see                 Parameter#SINGLE_VALUED SINGLE_VALUED\n     * @see                 Parameter#MULTI_VALUED MULTI_VALUED\n     */\n    public IntParam(String tag, String desc, int[] acceptableValues, boolean optional, boolean multiValued) {\n        this(tag, desc, acceptableValues, optional, multiValued, PUBLIC);\n    }\n\n    /**\n     * constructor - creates a\n     * number parameter whose value must be one of the specified values,\n     * and all of whose other options are specified.\n     *\n     * @param tag           the tag associated with this parameter\n     * @param desc          a description of the parameter, suitable for display\n     *                      in a usage statement\n     * @param acceptableValues  the acceptable values for the parameter\n     * @param optional      {@link Parameter#OPTIONAL OPTIONAL} if\n     *                      optional,\n     *                      {@link Parameter#REQUIRED REQUIRED} if required\n     * @param multiValued   {@link Parameter#MULTI_VALUED MULTI_VALUED} if\n     *                      the parameter can accept multiple values,\n     *                      {@link Parameter#SINGLE_VALUED SINGLE_VALUED}\n     *                      if the parameter can contain only a single value\n     * @param hidden        {@link Parameter#HIDDEN HIDDEN} if parameter is\n     *                      not to be listed in the usage,\n     *                      {@link Parameter#PUBLIC PUBLIC} otherwise.\n     * @throws              IllegalArgumentException if any parameter is\n     *                      invalid.\n     * @see                 AbstractParameter#setTag(String) setTag()\n     * @see                 AbstractParameter#setDesc(String) setDesc()\n     * @see                 #setAcceptableIntValues(int[]) setAcceptableIntValues()\n     * @see                 Parameter#OPTIONAL OPTIONAL\n     * @see                 Parameter#REQUIRED REQUIRED\n     * @see                 Parameter#SINGLE_VALUED SINGLE_VALUED\n     * @see                 Parameter#MULTI_VALUED MULTI_VALUED\n     * @see                 Parameter#HIDDEN HIDDEN\n     * @see                 Parameter#PUBLIC PUBLIC\n     */\n    public IntParam(String tag, String desc, int[] acceptableValues, boolean optional, boolean multiValued, boolean hidden) {\n        this.setTag(tag);\n        this.setAcceptableIntValues(acceptableValues);\n        this.setDesc(desc);\n        this.setOptional(optional);\n        this.setMultiValued(multiValued);\n        this.setHidden(hidden);\n        this.setOptionLabel(DEFAULT_OPTION_LABEL);\n    }\n\n    /**\n     * Sets the minimum acceptable value for the parameter's value.\n     * <P>\n     * If both <code>acceptableValues</code> and/or a minimum or maximum\n     * limit for the parameter value are specified, a valid value must\n     * satisfy <b>all</b> of the constraints.\n     *\n     * @param min       the minimum acceptable value\n     * @throws          IllegalArgumentException if <code>min</code> is\n     *                  greater than <code>max</code>\n     */\n    public void setMin(int min) {\n        if (min > max) {\n            throw new IllegalArgumentException(Strings.get(\"IntParam.maxLessThanMin\", new Object[] { tag }));\n        }\n        this.min = min;\n    }\n\n    /**\n     * Gets the value of the IntParam as in int.  If the IntParam is\n     * multi-valued, only the first value is returned.\n     *\n     * @return              the value as an int\n     * @throws              RuntimeException if the value of the IntParam\n     *                      has not been set.\n     * @see Parameter#isSet()\n     */\n    public int intValue() {\n        if (!set) {\n            throw new RuntimeException(Strings.get(\"IntParam.valueNotSet\", new Object[] { tag }));\n        }\n        return Integer.parseInt((String) values.get(0));\n    }\n\n    /**\n     * Gets the values of the IntParam as an int array.  Note that if the\n     * IntParam has no values, an empty array is returned.\n     *\n     * @return              an array of int values\n     * @see Parameter#isSet()\n     */\n    public int[] intValues() {\n        int[] vals = new int[values.size()];\n        for (int i = 0; i < vals.length; i++) {\n            vals[i] = Integer.parseInt((String) values.get(i));\n        }\n        return vals;\n    }\n\n    /**\n     * gets minimum acceptable value for the parameter's value\n     *\n     * @return              the minimum acceptable value\n     */\n    public int getMin() {\n        return min;\n    }\n\n    /**\n     * Sets the maximum acceptable value for the parameter.\n     * <P>\n     * If both <code>acceptableValues</code> and/or a minimum or maximum\n     * limit for the parameter value are specified, a valid value must\n     * satisfy <b>all</b> of the constraints.\n     *\n     * @param max       the maximum acceptable value\n     * @throws          IllegalArgumentException if <code>min</code> is\n     *                  greater than <code>max</code>\n     */\n    public void setMax(int max) {\n        if (min > max) {\n            throw new IllegalArgumentException(Strings.get(\"IntParam.maxLessThanMin\", new Object[] { tag }));\n        }\n        this.max = max;\n    }\n\n    /**\n     * gets the maximum acceptable value for the parameter\n     *\n     * @return              the maximum acceptable value\n     */\n    public int getMax() {\n        return max;\n    }\n\n    /**\n     * Sets the acceptable values for this parameter.\n     * <P>\n     * If both <code>acceptableValues</code> and/or a minimum or maximum\n     * limit for the parameter value are specified, a valid value must\n     * satisfy <b>all</b> of the constraints.\n     *\n     * @param acceptableValues  An array of acceptable int values that\n     *                          the parameter's values must match.  If null,\n     *                          the parameter's values can be any int.\n     */\n    public void setAcceptableIntValues(int[] intValues) {\n        String[] sValues = new String[intValues.length];\n        for (int i = 0; i < intValues.length; i++) {\n            sValues[i] = Integer.toString(intValues[i]);\n        }\n        setAcceptableValues(sValues);\n    }\n\n    /**\n     * gets the acceptable values for this parameter\n     *\n     * @return              The acceptable values for this parameter.  If no\n     *                      acceptable values have been specified, this\n     *                      method returns null.\n     */\n    public int[] getAcceptableIntValues() {\n        String[] sValues = getAcceptableValues();\n        int[] intValues = new int[sValues.length];\n        for (int i = 0; i < sValues.length; i++) {\n            intValues[i] = Integer.parseInt(sValues[i]);\n        }\n        return intValues;\n    }\n\n    /**\n     * Validates a prospective value with regards to the minimum and maximum\n     * values and the acceptableValues called by add/setValue(s)().\n     *\n     * @param val           the prospective value to validate\n     * @throws              CmdLineException if\n     *                      <code>value</code> is not valid with regard to\n     *     #                      the minimum and\n     *                      maximum values, and the acceptableValues.\n     */\n    public void validateValue(String val) throws CmdLineException {\n        // Strip off any leading 0s before calling\n        // AbstractParameter.validateValue() because the Strings we sent\n        // as acceptable values were without.\n        int offset = 0;\n        while (val.startsWith(\"0\", offset)) {\n            offset++;\n        }\n        super.validateValue(val.substring(offset));\n        CmdLineException exception = new CmdLineException(Strings.get(\"IntParam.validValues\", new Object[] { tag, new Integer(min), new Integer(max) }));\n        int intVal = 0;\n        try {\n            intVal = Integer.parseInt(val);\n        } catch (NumberFormatException e) {\n            throw exception;\n        }\n        if (intVal < min || intVal > max) {\n            throw exception;\n        }\n    }\n}\n",
		"id": "EvoSuiteBenchmark/109_pdfsam/src/main/java/jcmdline/IntParamTest1.java",
		"test_prompt": "// IntParamTest1.java\npackage jcmdline;\n\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link IntParam}.\n* It contains ten unit test cases for the {@link IntParam#intValues()} method.\n*/\nclass IntParamTest1 {"
	},
	{
		"original_code": "// FileParam.java\n/*\n * FileParam.java\n *\n * Classes:\n *   public   FileParam\n *   \n * ***** BEGIN LICENSE BLOCK *****\n * Version: MPL 1.1\n *\n * The contents of this file are subject to the Mozilla Public License Version\n * 1.1 (the \"License\"); you may not use this file except in compliance with\n * the License. You may obtain a copy of the License at\n * http://www.mozilla.org/MPL/\n *\n * Software distributed under the License is distributed on an \"AS IS\" basis,\n * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License\n * for the specific language governing rights and limitations under the\n * License.\n *\n * The Original Code is the Java jcmdline (command line management) package.\n *\n * The Initial Developer of the Original Code is Lynne Lawrence.\n * \n * Portions created by the Initial Developer are Copyright (C) 2002\n * the Initial Developer. All Rights Reserved.\n *\n * Contributor(s):  Lynne Lawrence <lgl@visuallink.com>\n *\n * ***** END LICENSE BLOCK *****\n */\npackage jcmdline;\n\nimport java.io.File;\nimport java.util.ArrayList;\nimport java.util.Collection;\nimport java.util.Iterator;\n\n/**\n * Encapsulate a command line parameter whose value will be the name of\n * a file or directory.  Attributes, such as whether the value is to be\n * a file or directory, whether it must be readable, etc, may be specified\n * and will be validated.\n * <p>\n * Usage:\n * <pre>\n * public static void main(String[] args) {\n *\n *     FileParam filesArg =\n *         new FileParam(\"file\",\n *                       \"a file to be processed - defaults to stdin\",\n *                       FileParam.IS_FILE & FileParam.IS_READABLE,\n *                       FileParam.OPTIONAL,\n *                       FileParam.MULTI_VALUED);\n *\n *     CmdLineHandler cl =\n *         new VersionCmdLineHandler(\"V 1.0\",\n *             \"echoFiles\",\n *             \"echos specified files to stdout\",\n *             new Parameter[] {},\n *             new Parameter[] { filesArg } ));\n *\n *     cl.parse(args);\n *\n *     if (filesArg.isSet()) {\n *         for (Iterator itr = filesArg.getFiles().iterator();\n *              itr.hasNext();) {\n *             processStream(new FileInputStream((File)itr.next()));\n *         }\n *     } else {\n *         processStream(System.in);\n *     }\n * }\n * </pre>\n *\n * @author          Lynne Lawrence\n * @version         jcmdline Rel. @VERSION@ $Id: FileParam.java,v 1.2 2002/12/07 14:22:06 lglawrence Exp $\n * @see CmdLineParser\n */\npublic class FileParam extends AbstractParameter {\n\n    // Note: attributes are specified with kind of a \"reverse map\" so\n    // that they can be \"ANDed\" together when set, which is more natural\n    // since that is the way they are processed.\n    /**\n     * indicates that no file/dir attributes are required or will be checked\n     * @see #setAttributes(int) setAttributes()\n     */\n    public static final int NO_ATTRIBUTES = 0xffff;\n\n    /**\n     * indicates that a file or directory specified as a value for this\n     * FileParam must exist\n     * @see #setAttributes(int) setAttributes()\n     */\n    public static final int EXISTS = 0xfffe;\n\n    /**\n     * indicates that a file or directory specified as a value for this\n     * FileParam must <b>not</b> exist\n     * @see #setAttributes(int) setAttributes()\n     */\n    public static final int DOESNT_EXIST = 0xfffd;\n\n    /**\n     * indicates that a value specified for this FileParam must name an\n     * existing file\n     * @see #setAttributes(int) setAttributes()\n     */\n    public static final int IS_FILE = 0xfffb;\n\n    /**\n     * indicates that a value specified for this FileParam must name an\n     * existing directory\n     * @see #setAttributes(int) setAttributes()\n     */\n    public static final int IS_DIR = 0xfff7;\n\n    /**\n     * indicates that a value specified for this FileParam must name an\n     * existing file or directory for which the caller has read access\n     * @see #setAttributes(int) setAttributes()\n     */\n    public static final int IS_READABLE = 0xffef;\n\n    /**\n     * indicates that a value specified for this FileParam must name an\n     * existing file or directory for which the caller has write access\n     * @see #setAttributes(int) setAttributes()\n     */\n    public static final int IS_WRITEABLE = 0xffdf;\n\n    /**\n     * the default label that will represent option values for this Parameter\n     * where {@link #IS_DIR} is <b>not</b> set.\n     * The following demonstrates a possible usage for a FileParam option,\n     * where the option label is '&lt;file&gt;':\n     * <pre>\n     *    out &lt;file&gt;  the output file\n     * </pre>\n     * @see AbstractParameter#setOptionLabel(String) setOptionLabel()\n     * @see \"<i>FileParam.defaultFileOptionLabel</i> in 'strings' properties\n     *      file\"\n     */\n    public static final String DEFAULT_FILE_OPTION_LABEL = Strings.get(\"FileParam.defaultFileOptionLabel\");\n\n    /**\n     * the default label that will represent option values for this Parameter\n     * where {@link #IS_DIR} is set.  The following demonstrates a possible\n     * usage for a FileParam option, where the option label is\n     * '&lt;dir&gt;':\n     * <pre>\n     *    out &lt;dir&gt;  the directory in which files will be created\n     * </pre>\n     * @see AbstractParameter#setOptionLabel(String) setOptionLabel()\n     * @see \"<i>FileParam.defaultDirOptionLabel</i> in 'strings' properties\n     *      file\"\n     */\n    public static final String DEFAULT_DIR_OPTION_LABEL = Strings.get(\"FileParam.defaultDirOptionLabel\");\n\n    /**\n     * Attributes which a file/directory value must have\n     * @see #setAttributes(int) setAttributes()\n     * @see #getAttributes()\n     */\n    private int attributes;\n\n    /**\n     * constructor - creates single-valued, optional, public parameter\n     * which accepts any valid file or directory name as its value\n     *\n     * @param tag           a unique identifier for this parameter\n     * @param desc          a description of the parameter, suitable for display\n     *                      in a usage statement\n     * @throws              IllegalArgumentException if <code>tag</code>\n     *                      or <desc> are invalid.\n     * @see                 AbstractParameter#setTag(String) setTag()\n     * @see                 AbstractParameter#setDesc(String) setDesc()\n     */\n    public FileParam(String tag, String desc) {\n        this(tag, desc, NO_ATTRIBUTES, OPTIONAL, SINGLE_VALUED, PUBLIC);\n    }\n\n    /**\n     * constructor - creates single-valued, public parameter which accepts\n     * any valid file or directory name as its value and is optional or\n     * required, as specified.\n     *\n     * @param tag           a unique identifier for this parameter\n     * @param desc          a description of the parameter, suitable for display\n     *                      in a usage statement\n     * @param optional      {@link Parameter#OPTIONAL OPTIONAL} if\n     *                      optional,\n     *                      {@link Parameter#REQUIRED REQUIRED} if required\n     * @throws              IllegalArgumentException if any of the specified\n     *                      parameters are invalid.\n     * @see                 AbstractParameter#setTag(String) setTag()\n     * @see                 AbstractParameter#setDesc(String) setDesc()\n     * @see                 Parameter#OPTIONAL OPTIONAL\n     * @see                 Parameter#REQUIRED REQUIRED\n     */\n    public FileParam(String tag, String desc, boolean optional) {\n        this(tag, desc, NO_ATTRIBUTES, optional, SINGLE_VALUED, PUBLIC);\n    }\n\n    /**\n     * constructor - creates a single-valued, optional, public, parameter\n     * accepts a file or directory name with the specified attributes.\n     *\n     * @param tag           a unique identifier for this parameter\n     * @param desc          a description of the parameter, suitable for display\n     *                      in a usage statement\n     * @param attributes    the attributes that must apply to a file or\n     *                      directory specified as a value to this FileParam\n     * @throws              IllegalArgumentException if any parameter is\n     *                      invalid.\n     * @see                 AbstractParameter#setTag(String) setTag()\n     * @see                 AbstractParameter#setDesc(String) setDesc()\n     * @see                 #setAttributes(int) setAttributes()\n     */\n    public FileParam(String tag, String desc, int attributes) {\n        this(tag, desc, attributes, OPTIONAL, SINGLE_VALUED, PUBLIC);\n    }\n\n    /**\n     * constructor - creates a single-valued, public, parameter\n     * that accepts a file or directory name with the specified attributes,\n     * and which is required or optional, as specified.\n     *\n     * @param tag           a unique identifier for this parameter\n     * @param desc          a description of the parameter, suitable for display\n     *                      in a usage statement\n     * @param attributes    the attributes that must apply to a file or\n     *                      directory specified as a value to this FileParam\n     * @param optional      {@link Parameter#OPTIONAL OPTIONAL} if\n     *                      optional,\n     *                      {@link Parameter#REQUIRED REQUIRED} if required\n     * @throws              IllegalArgumentException if any parameter is\n     *                      invalid.\n     * @see                 AbstractParameter#setTag(String) setTag()\n     * @see                 AbstractParameter#setDesc(String) setDesc()\n     * @see                 #setAttributes(int) setAttributes()\n     * @see                 Parameter#OPTIONAL OPTIONAL\n     * @see                 Parameter#REQUIRED REQUIRED\n     */\n    public FileParam(String tag, String desc, int attributes, boolean optional) {\n        this(tag, desc, attributes, optional, SINGLE_VALUED, PUBLIC);\n    }\n\n    /**\n     * constructor - creates a public parameter that accepts a file or\n     * directory name with the specified attributes, and which is required\n     * or optional and/or multi-valued, as specified.\n     *\n     * @param tag           a unique identifier for this parameter\n     * @param desc          a description of the parameter, suitable for display\n     *                      in a usage statement\n     * @param attributes    the attributes that must apply to a file or\n     *                      directory specified as a value to this FileParam\n     * @param optional      {@link Parameter#OPTIONAL OPTIONAL} if\n     *                      optional,\n     *                      {@link Parameter#REQUIRED REQUIRED} if required\n     * @param multiValued   {@link Parameter#MULTI_VALUED MULTI_VALUED} if\n     *                      the parameter can accept multiple values,\n     *                      {@link Parameter#SINGLE_VALUED SINGLE_VALUED}\n     *                      if the parameter can contain only a single value\n     * @throws              IllegalArgumentException if any parameter is\n     *                      invalid.\n     * @see                 AbstractParameter#setTag(String) setTag()\n     * @see                 AbstractParameter#setDesc(String) setDesc()\n     * @see                 #setAttributes(int) setAttributes()\n     * @see                 Parameter#OPTIONAL OPTIONAL\n     * @see                 Parameter#REQUIRED REQUIRED\n     * @see                 Parameter#SINGLE_VALUED SINGLE_VALUED\n     * @see                 Parameter#MULTI_VALUED MULTI_VALUED\n     */\n    public FileParam(String tag, String desc, int attributes, boolean optional, boolean multiValued) {\n        this(tag, desc, attributes, optional, multiValued, PUBLIC);\n    }\n\n    /**\n     * constructor - creates a parameter that accepts a file or directory\n     * name with the specified attributes, and which is required or optional\n     * and/or multi-valued or hidden, as specified.\n     * <P>\n     * If the <code>IS_DIR</code> attribute is specified, the option label for\n     * this FileParam will be set to {@link #DEFAULT_DIR_OPTION_LABEL},\n     * else it will be {@link #DEFAULT_FILE_OPTION_LABEL}.\n     *\n     * @param tag           a unique identifier for this parameter\n     * @param desc          a description of the parameter, suitable for display\n     *                      in a usage statement\n     * @param attributes    the attributes that must apply to a file or\n     *                      directory specified as a value to this FileParam\n     * @param optional      {@link Parameter#OPTIONAL OPTIONAL} if\n     *                      optional,\n     *                      {@link Parameter#REQUIRED REQUIRED} if required\n     * @param multiValued   {@link Parameter#MULTI_VALUED MULTI_VALUED} if\n     *                      the parameter can accept multiple values,\n     *                      {@link Parameter#SINGLE_VALUED SINGLE_VALUED}\n     *                      if the parameter can contain only a single value\n     * @param hidden        {@link Parameter#HIDDEN HIDDEN} if parameter is\n     *                      not to be listed in the usage,\n     *                      {@link Parameter#PUBLIC PUBLIC} otherwise.\n     * @throws              IllegalArgumentException if any parameter is\n     *                      invalid.\n     * @see                 AbstractParameter#setTag(String) setTag()\n     * @see                 AbstractParameter#setDesc(String) setDesc()\n     * @see                 AbstractParameter#setOptionLabel(String) setOptionLabel()\n     * @see                 #setAttributes(int) setAttributes()\n     * @see                 Parameter#OPTIONAL OPTIONAL\n     * @see                 Parameter#REQUIRED REQUIRED\n     * @see                 Parameter#SINGLE_VALUED SINGLE_VALUED\n     * @see                 Parameter#MULTI_VALUED MULTI_VALUED\n     * @see                 Parameter#HIDDEN HIDDEN\n     * @see                 Parameter#PUBLIC PUBLIC\n     */\n    public FileParam(String tag, String desc, int attributes, boolean optional, boolean multiValued, boolean hidden) {\n        this.setTag(tag);\n        this.setAttributes(attributes);\n        this.setDesc(desc);\n        this.optional = optional;\n        this.multiValued = multiValued;\n        this.hidden = hidden;\n        this.setOptionLabel(attrSpecified(IS_DIR) ? DEFAULT_DIR_OPTION_LABEL : DEFAULT_FILE_OPTION_LABEL);\n    }\n\n    /**\n     * Gets the value of the FileParam as a File object.  If the FileParam is\n     * multi-valued, the first value is returned.\n     *\n     * @return              the value as a File object\n     * @throws              RuntimeException if the value of the FileParam\n     *                      has not been set.\n     * @see Parameter#isSet()\n     */\n    public File getFile() {\n        if (!set) {\n            throw new RuntimeException(Strings.get(\"FileParam.valueNotSet\", new Object[] { tag }));\n        }\n        return new File((String) values.get(0));\n    }\n\n    /**\n     * Gets the values of the FileParam as a Collection of File objects.\n     * If the FileParam has no values, an empty Collection is returned.\n     *\n     * @return              a Collection of File objects, possibly empty\n     * @see Parameter#isSet()\n     */\n    public Collection getFiles() {\n        ArrayList vals = new ArrayList(values.size());\n        for (Iterator itr = values.iterator(); itr.hasNext(); ) {\n            vals.add(new File((String) itr.next()));\n        }\n        return vals;\n    }\n\n    /**\n     * Validates a prospective value for the FileParam - called by\n     * add/setValue(s)().  All of the attributes are validated and the a\n     * CmdLineException is thrown if any are not satisfied.\n     *\n     * @param val           the value to validate\n     * @throws              CmdLineException if <code>value</code> is not valid.\n     * @see #setAttributes(int) setAttributes()\n     */\n    public void validateValue(String val) throws CmdLineException {\n        super.validateValue(val);\n        File f = null;\n        try {\n            f = new File(val);\n        } catch (Exception e) {\n            throwIllegalValueException(val);\n        }\n        if (attrSpecified(IS_DIR) && !f.isDirectory()) {\n            throwIllegalValueException(val);\n        }\n        if (attrSpecified(IS_FILE) && !f.isFile()) {\n            throwIllegalValueException(val);\n        }\n        if (attrSpecified(EXISTS) && !f.exists()) {\n            throwIllegalValueException(val);\n        }\n        if (attrSpecified(DOESNT_EXIST) && f.exists()) {\n            throwIllegalValueException(val);\n        }\n        if (attrSpecified(IS_READABLE) && !f.canRead()) {\n            throwIllegalValueException(val);\n        }\n        if (attrSpecified(IS_WRITEABLE) && !f.canWrite()) {\n            throwIllegalValueException(val);\n        }\n    }\n\n    /**\n     * Indicates whether an attribute has been specified for this FileParam.\n     *\n     * @param attr          one of {@link #NO_ATTRIBUTES}, {@link #EXISTS},\n     *                      {@link #DOESNT_EXIST}, {@link #IS_DIR},\n     *                      {@link #IS_FILE}, {@link #IS_READABLE}, or\n     *                      {@link #IS_WRITEABLE}\n     * @return              <code>true</code> if the attribute is set,\n     *                      <code>false</code> if the attribute is not set or\n     *                      <code>attr</code> is not a valid attribute\n     */\n    public boolean attrSpecified(int attr) {\n        if (!(attr == EXISTS || attr == NO_ATTRIBUTES || attr == DOESNT_EXIST || attr == IS_DIR || attr == IS_FILE || attr == IS_READABLE || attr == IS_WRITEABLE)) {\n            return false;\n        }\n        return (((attributes | attr) ^ 0xffff) != 0);\n    }\n\n    /**\n     * Sets the value of attributes.  Multiple attributes may be specified\n     * by ANDing them together.  If multiple attributes are specified,\n     * all conditions must be met for a parameter value to be considered\n     * valid.  For example:\n     * <pre>\n     *    FileParam fp = new FileParam(\"tempDir\",\n     *            \"a directory in which temporary files can be stored\",\n     *            FileParam.IS_DIR & FileParam.IS_WRITEABLE);\n     * </pre>\n     * In this case, a valid parameter value would have to be both a\n     * directory and writeable.\n     * <P>\n     * Specify <code>NO_ATTRIBUTES</code> if none of the other attributes is\n     * required.\n     *\n     * @param attributes    a combination of {@link #NO_ATTRIBUTES},\n     *                      {@link #EXISTS},\n     *                      {@link #DOESNT_EXIST},\n     *                      {@link #IS_DIR}, {@link #IS_FILE},\n     *                      {@link #IS_READABLE}, and {@link #IS_WRITEABLE}\n     * @throws      IllegalArgumentException if the attributes value\n     *              is invalid.\n     * @see #getAttributes()\n     */\n    public void setAttributes(int attributes) {\n        if ((attributes ^ 0xffff) >= ((IS_WRITEABLE ^ 0xffff) * 2)) {\n            throw new IllegalArgumentException(Strings.get(\"FileParam.invalidAttributes\", new Object[] { new Integer(attributes) }));\n        }\n        this.attributes = attributes;\n    }\n\n    /**\n     * gets the value of attributes\n     *\n     * @return              The attributes specified for this FileParam\n     * @see #setAttributes(int) setAttributes()\n     */\n    public int getAttributes() {\n        return attributes;\n    }\n\n    /**\n     * Throws a nicely formatted error message when an invalid value is\n     * attempted to be validated.\n     *\n     * @param val           the value that failed validation\n     * @return              doesn't - throws a CmdLineException\n     * @throws              CmdLineException - that's its goal!\n     */\n    private void throwIllegalValueException(String val) throws CmdLineException {\n        String s1;\n        if (attrSpecified(IS_DIR)) {\n            s1 = Strings.get(\"FileParam.directory\");\n        } else if (attrSpecified(IS_FILE)) {\n            s1 = Strings.get(\"FileParam.file\");\n        } else {\n            s1 = Strings.get(\"FileParam.file_dir\");\n        }\n        String s2;\n        if (attrSpecified(EXISTS) || attrSpecified(IS_DIR) || attrSpecified(IS_FILE) || attrSpecified(IS_READABLE) || attrSpecified(IS_WRITEABLE)) {\n            s2 = Strings.get(\"FileParam.an_existing\");\n        } else {\n            s2 = Strings.get(\"FileParam.a\");\n        }\n        String s3 = \"\";\n        if (attrSpecified(IS_READABLE)) {\n            if (attrSpecified(IS_WRITEABLE)) {\n                s3 = Strings.get(\"FileParam.readable_writeable\");\n            } else {\n                s3 = Strings.get(\"FileParam.readable\");\n            }\n        } else if (attrSpecified(IS_WRITEABLE)) {\n            s3 = Strings.get(\"FileParam.writeable\");\n        }\n        throw new CmdLineException(Strings.get(\"FileParam.illegalValue\", new Object[] { s2, s1, s3, val, tag }));\n    }\n}\n",
		"id": "EvoSuiteBenchmark/109_pdfsam/src/main/java/jcmdline/FileParamTest.java",
		"test_prompt": "// FileParamTest.java\npackage jcmdline;\n\nimport java.io.File;\nimport java.util.ArrayList;\nimport java.util.Collection;\nimport java.util.Iterator;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link FileParam}.\n* It contains ten unit test cases for the {@link FileParam#attrSpecified(int)} method.\n*/\nclass FileParamTest {"
	}
]