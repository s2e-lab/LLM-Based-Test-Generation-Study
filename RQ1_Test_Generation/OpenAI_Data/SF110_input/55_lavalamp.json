[
	{
		"original_code": "// DeviceBuildsFactory.java\npackage net.sf.lavalamp.factories;\r\n\r\nimport net.sf.lavalamp.site.Build;\r\nimport net.sf.lavalamp.site.Builds;\r\nimport net.sf.lavalamp.device.Device;\r\nimport net.sf.lavalamp.site.BuildProperties;\r\nimport net.sf.lavalamp.device.DeviceProperties;\r\nimport net.sf.lavalamp.site.SiteFactory;\r\nimport net.sf.lavalamp.site.SiteProperties;\r\n\r\npublic class DeviceBuildsFactory {\r\n\r\n    public Device make(DeviceProperties properties) throws InstantiationException, IllegalAccessException, ClassNotFoundException {\r\n        String deviceClass = properties.getClassName();\r\n        Device device = (Device) Class.forName(deviceClass).newInstance();\r\n        device.setProperties(properties);\r\n        device.init();\r\n        Builds builds = initBuilds(properties);\r\n        device.setBuilds(builds);\r\n        return device;\r\n    }\r\n\r\n    private Builds initBuilds(DeviceProperties properties) throws InstantiationException, IllegalAccessException, ClassNotFoundException {\r\n        Builds builds = new Builds();\r\n        for (BuildProperties buildProperties : properties.getBuildProperties()) {\r\n            Build build = new Build(buildProperties.getBuild());\r\n            SiteProperties siteProperties = buildProperties.getSiteProperties();\r\n            if (siteProperties != null) {\r\n                build.setBuildSite(new SiteFactory().make(siteProperties));\r\n            }\r\n            builds.add(build);\r\n        }\r\n        return builds;\r\n    }\r\n}\r\n",
		"id": "EvoSuiteBenchmark/55_lavalamp/src/main/java/net/sf/lavalamp/factories/DeviceBuildsFactoryTest.java",
		"test_prompt": "// DeviceBuildsFactoryTest.java\npackage net.sf.lavalamp.factories;\n\nimport net.sf.lavalamp.site.Build;\nimport net.sf.lavalamp.site.Builds;\nimport net.sf.lavalamp.device.Device;\nimport net.sf.lavalamp.site.BuildProperties;\nimport net.sf.lavalamp.device.DeviceProperties;\nimport net.sf.lavalamp.site.SiteFactory;\nimport net.sf.lavalamp.site.SiteProperties;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link DeviceBuildsFactory}.\n* It contains ten unit test cases for the {@link DeviceBuildsFactory#make(DeviceProperties)} method.\n*/\nclass DeviceBuildsFactoryTest {"
	},
	{
		"original_code": "// BuildChecker.java\npackage net.sf.lavalamp.site;\r\n\r\nimport java.io.IOException;\r\nimport net.sf.lavalamp.LavaLogger;\r\n\r\npublic class BuildChecker {\r\n\r\n    private static final long serialVersionUID = 8983123487221293458L;\r\n\r\n    private final transient LavaLogger logger = new LavaLogger();\r\n\r\n    public boolean check(Build build, Console console) throws IOException, LoginFailedException {\r\n        logger.info(\"checking \" + build.getIdentity());\r\n        BuildSite site = build.getBuildSite();\r\n        try {\r\n            return site.wasLastBuildSuccessful(build);\r\n        } catch (LoginRequiredException e) {\r\n            site.setCredentials(console);\r\n            return checkAgainAfterLoginAttempt(build, site);\r\n        }\r\n    }\r\n\r\n    protected boolean checkAgainAfterLoginAttempt(Build build, BuildSite site) throws IOException, LoginFailedException {\r\n        try {\r\n            site.login();\r\n            return site.wasLastBuildSuccessful(build);\r\n        } catch (LoginRequiredException e) {\r\n            throw new LoginFailedException(e);\r\n        }\r\n    }\r\n}\r\n",
		"id": "EvoSuiteBenchmark/55_lavalamp/src/main/java/net/sf/lavalamp/site/BuildCheckerTest.java",
		"test_prompt": "// BuildCheckerTest.java\npackage net.sf.lavalamp.site;\n\nimport java.io.IOException;\nimport net.sf.lavalamp.LavaLogger;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link BuildChecker}.\n* It contains ten unit test cases for the {@link BuildChecker#check(Build, Console)} method.\n*/\nclass BuildCheckerTest {"
	},
	{
		"original_code": "// Hudson.java\npackage net.sf.lavalamp.site.impl;\r\n\r\nimport java.io.IOException;\r\nimport java.io.Serializable;\r\nimport net.sf.lavalamp.site.AuthBuildSite;\r\nimport net.sf.lavalamp.site.Build;\r\nimport net.sf.lavalamp.site.LoginRequiredException;\r\n\r\npublic class Hudson extends AuthBuildSite implements Serializable {\r\n\r\n    private static final long serialVersionUID = -8206817273748385973L;\r\n\r\n    public static final String URL_LASTBUILD = \"/job\";\r\n\r\n    @Override\r\n    public String getLastBuildUrl(Build build) {\r\n        return String.format(\"%s%s/%s/lastBuild/buildNumber\", url, URL_LASTBUILD, build.getIdentity());\r\n    }\r\n\r\n    public String getLastSuccessfulBuildUrl(Build build) {\r\n        return String.format(\"%s%s/%s/lastSuccessfulBuild/buildNumber\", url, URL_LASTBUILD, build.getIdentity());\r\n    }\r\n\r\n    @Override\r\n    public boolean wasLastBuildSuccessful(Build build) throws LoginRequiredException, IOException {\r\n        if (credentials.get(url) != null) {\r\n            urlGetter.setCredentials(credentials.get(url));\r\n        }\r\n        String lastBuildNumber = urlGetter.get(getLastBuildUrl(build));\r\n        String lastSuccessfulBuildNumber = urlGetter.get(getLastSuccessfulBuildUrl(build));\r\n        if (lastBuildNumber.equals(lastSuccessfulBuildNumber)) {\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n}\r\n",
		"id": "EvoSuiteBenchmark/55_lavalamp/src/main/java/net/sf/lavalamp/site/impl/HudsonTest.java",
		"test_prompt": "// HudsonTest.java\npackage net.sf.lavalamp.site.impl;\n\nimport java.io.IOException;\nimport java.io.Serializable;\nimport net.sf.lavalamp.site.AuthBuildSite;\nimport net.sf.lavalamp.site.Build;\nimport net.sf.lavalamp.site.LoginRequiredException;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link Hudson}.\n* It contains ten unit test cases for the {@link Hudson#wasLastBuildSuccessful(Build)} method.\n*/\nclass HudsonTest {"
	},
	{
		"original_code": "// BambooRestApi.java\npackage net.sf.lavalamp.site.impl;\r\n\r\nimport java.io.IOException;\r\nimport java.io.Serializable;\r\nimport java.io.UnsupportedEncodingException;\r\nimport net.sf.lavalamp.site.AuthBuildSite;\r\nimport net.sf.lavalamp.site.Build;\r\nimport net.sf.lavalamp.site.LoginRequiredException;\r\n\r\n/**\r\n * Uses rest api available from Bamboo 2.3\r\n *\r\n * @author stehal\r\n * @see BambooRemoteApi\r\n */\r\npublic class BambooRestApi extends AuthBuildSite implements Serializable {\r\n\r\n    private static final long serialVersionUID = -3039410670557839775L;\r\n\r\n    @Override\r\n    public String getLastBuildUrl(Build build) throws UnsupportedEncodingException {\r\n        String authType = \"\";\r\n        authType = setCredentials(\"?\", authType);\r\n        return String.format(\"%s/rest/api/latest/build/%s/latest%s\", url, build.getIdentity(), authType);\r\n    }\r\n\r\n    protected String setCredentials(String prefix, String authType) {\r\n        if (credentials.get(url) != null) {\r\n            authType = prefix + \"os_authType=basic\";\r\n            urlGetter.setCredentials(credentials.get(url));\r\n        }\r\n        return authType;\r\n    }\r\n\r\n    @Override\r\n    public boolean wasLastBuildSuccessful(Build build) throws LoginRequiredException, IOException {\r\n        String lastBuildUrl = getLastBuildUrl(build);\r\n        String response = urlGetter.get(lastBuildUrl);\r\n        if (response.contains(\"state=\\\"Successful\\\"\")) {\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n}\r\n",
		"id": "EvoSuiteBenchmark/55_lavalamp/src/main/java/net/sf/lavalamp/site/impl/BambooRestApiTest.java",
		"test_prompt": "// BambooRestApiTest.java\npackage net.sf.lavalamp.site.impl;\n\nimport java.io.IOException;\nimport java.io.Serializable;\nimport java.io.UnsupportedEncodingException;\nimport net.sf.lavalamp.site.AuthBuildSite;\nimport net.sf.lavalamp.site.Build;\nimport net.sf.lavalamp.site.LoginRequiredException;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link BambooRestApi}.\n* It contains ten unit test cases for the {@link BambooRestApi#wasLastBuildSuccessful(Build)} method.\n*/\nclass BambooRestApiTest {"
	},
	{
		"original_code": "// BambooRemoteApi.java\npackage net.sf.lavalamp.site.impl;\r\n\r\nimport java.io.IOException;\r\nimport java.util.HashMap;\r\nimport java.util.Map;\r\nimport java.util.regex.Matcher;\r\nimport java.util.regex.Pattern;\r\nimport net.sf.lavalamp.site.AuthBuildSite;\r\nimport net.sf.lavalamp.site.Build;\r\nimport net.sf.lavalamp.site.LoginFailedException;\r\nimport net.sf.lavalamp.site.LoginRequiredException;\r\n\r\n/**\r\n * Uses the remote api (superceded by rest api in Bamboo 2.3 and deprecated in 2.5)\r\n *\r\n * @author stehal\r\n * @see BambooRestApi\r\n */\r\n@Deprecated\r\npublic class BambooRemoteApi extends AuthBuildSite {\r\n\r\n    private static final long serialVersionUID = -5856767171663531516L;\r\n\r\n    private static Map<String, String> keys = new HashMap<String, String>();\r\n\r\n    public static final String URL_LOGIN = \"/api/rest/login.action\";\r\n\r\n    public static final String URL_LASTBUILD = \"/api/rest/getLatestBuildResults.action\";\r\n\r\n    @Override\r\n    public void login() throws IOException, LoginRequiredException, LoginFailedException {\r\n        logger.debug(\"login\");\r\n        String response = urlGetter.get(getLoginUrl(credentials.get(url).getUserName()), credentials.get(url).getPassword().toCharArray());\r\n        if (response.contains(\"<error>\")) {\r\n            throw new LoginFailedException(response);\r\n        }\r\n        keys.put(url, findAuth(response));\r\n    }\r\n\r\n    protected String findAuth(String response) {\r\n        Pattern pattern = Pattern.compile(\"<auth>(.*)</auth>\");\r\n        Matcher matcher = pattern.matcher(response);\r\n        matcher.find();\r\n        return matcher.group(1);\r\n    }\r\n\r\n    protected String getLoginUrl(String userid) {\r\n        return String.format(\"%s%s?username=%s&password=\", url, URL_LOGIN, userid);\r\n    }\r\n\r\n    public String getLastBuildUrl(Build build) {\r\n        return String.format(\"%s%s?buildKey=%s&auth=%s\", url, URL_LASTBUILD, build.getIdentity(), keys.get(url));\r\n    }\r\n\r\n    @Override\r\n    public boolean wasLastBuildSuccessful(Build build) throws LoginRequiredException, IOException {\r\n        return wasBuildSuccessful(urlGetter.get(getLastBuildUrl(build)));\r\n    }\r\n\r\n    public String getAuthenticationKey() {\r\n        return keys.get(url);\r\n    }\r\n\r\n    public boolean wasBuildSuccessful(String response) throws LoginRequiredException {\r\n        if (response.contains(\"<buildState>Successful</buildState>\")) {\r\n            return true;\r\n        }\r\n        if (response.contains(\"<error>User not authenticated\")) {\r\n            throw new LoginRequiredException();\r\n        }\r\n        return false;\r\n    }\r\n}\r\n",
		"id": "EvoSuiteBenchmark/55_lavalamp/src/main/java/net/sf/lavalamp/site/impl/BambooRemoteApiTest0.java",
		"test_prompt": "// BambooRemoteApiTest0.java\npackage net.sf.lavalamp.site.impl;\n\nimport java.io.IOException;\nimport java.util.HashMap;\nimport java.util.Map;\nimport java.util.regex.Matcher;\nimport java.util.regex.Pattern;\nimport net.sf.lavalamp.site.AuthBuildSite;\nimport net.sf.lavalamp.site.Build;\nimport net.sf.lavalamp.site.LoginFailedException;\nimport net.sf.lavalamp.site.LoginRequiredException;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link BambooRemoteApi}.\n* It contains ten unit test cases for the {@link BambooRemoteApi#wasLastBuildSuccessful(Build)} method.\n*/\nclass BambooRemoteApiTest0 {"
	},
	{
		"original_code": "// BambooRemoteApi.java\npackage net.sf.lavalamp.site.impl;\r\n\r\nimport java.io.IOException;\r\nimport java.util.HashMap;\r\nimport java.util.Map;\r\nimport java.util.regex.Matcher;\r\nimport java.util.regex.Pattern;\r\nimport net.sf.lavalamp.site.AuthBuildSite;\r\nimport net.sf.lavalamp.site.Build;\r\nimport net.sf.lavalamp.site.LoginFailedException;\r\nimport net.sf.lavalamp.site.LoginRequiredException;\r\n\r\n/**\r\n * Uses the remote api (superceded by rest api in Bamboo 2.3 and deprecated in 2.5)\r\n *\r\n * @author stehal\r\n * @see BambooRestApi\r\n */\r\n@Deprecated\r\npublic class BambooRemoteApi extends AuthBuildSite {\r\n\r\n    private static final long serialVersionUID = -5856767171663531516L;\r\n\r\n    private static Map<String, String> keys = new HashMap<String, String>();\r\n\r\n    public static final String URL_LOGIN = \"/api/rest/login.action\";\r\n\r\n    public static final String URL_LASTBUILD = \"/api/rest/getLatestBuildResults.action\";\r\n\r\n    @Override\r\n    public void login() throws IOException, LoginRequiredException, LoginFailedException {\r\n        logger.debug(\"login\");\r\n        String response = urlGetter.get(getLoginUrl(credentials.get(url).getUserName()), credentials.get(url).getPassword().toCharArray());\r\n        if (response.contains(\"<error>\")) {\r\n            throw new LoginFailedException(response);\r\n        }\r\n        keys.put(url, findAuth(response));\r\n    }\r\n\r\n    protected String findAuth(String response) {\r\n        Pattern pattern = Pattern.compile(\"<auth>(.*)</auth>\");\r\n        Matcher matcher = pattern.matcher(response);\r\n        matcher.find();\r\n        return matcher.group(1);\r\n    }\r\n\r\n    protected String getLoginUrl(String userid) {\r\n        return String.format(\"%s%s?username=%s&password=\", url, URL_LOGIN, userid);\r\n    }\r\n\r\n    public String getLastBuildUrl(Build build) {\r\n        return String.format(\"%s%s?buildKey=%s&auth=%s\", url, URL_LASTBUILD, build.getIdentity(), keys.get(url));\r\n    }\r\n\r\n    @Override\r\n    public boolean wasLastBuildSuccessful(Build build) throws LoginRequiredException, IOException {\r\n        return wasBuildSuccessful(urlGetter.get(getLastBuildUrl(build)));\r\n    }\r\n\r\n    public String getAuthenticationKey() {\r\n        return keys.get(url);\r\n    }\r\n\r\n    public boolean wasBuildSuccessful(String response) throws LoginRequiredException {\r\n        if (response.contains(\"<buildState>Successful</buildState>\")) {\r\n            return true;\r\n        }\r\n        if (response.contains(\"<error>User not authenticated\")) {\r\n            throw new LoginRequiredException();\r\n        }\r\n        return false;\r\n    }\r\n}\r\n",
		"id": "EvoSuiteBenchmark/55_lavalamp/src/main/java/net/sf/lavalamp/site/impl/BambooRemoteApiTest1.java",
		"test_prompt": "// BambooRemoteApiTest1.java\npackage net.sf.lavalamp.site.impl;\n\nimport java.io.IOException;\nimport java.util.HashMap;\nimport java.util.Map;\nimport java.util.regex.Matcher;\nimport java.util.regex.Pattern;\nimport net.sf.lavalamp.site.AuthBuildSite;\nimport net.sf.lavalamp.site.Build;\nimport net.sf.lavalamp.site.LoginFailedException;\nimport net.sf.lavalamp.site.LoginRequiredException;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link BambooRemoteApi}.\n* It contains ten unit test cases for the {@link BambooRemoteApi#wasBuildSuccessful(String)} method.\n*/\nclass BambooRemoteApiTest1 {"
	},
	{
		"original_code": "// Build.java\npackage net.sf.lavalamp.site;\r\n\r\nimport java.io.Serializable;\r\n\r\n/**\r\n * An identified build on a build server\r\n */\r\npublic class Build implements Serializable {\r\n\r\n    private static final long serialVersionUID = -1924673982176690L;\r\n\r\n    private final String identity;\r\n\r\n    private boolean isSuccessful = true;\r\n\r\n    private BuildSite buildSite;\r\n\r\n    public BuildSite getBuildSite() {\r\n        return buildSite;\r\n    }\r\n\r\n    public void setBuildSite(BuildSite buildServer) {\r\n        this.buildSite = buildServer;\r\n    }\r\n\r\n    public String getIdentity() {\r\n        return identity;\r\n    }\r\n\r\n    public boolean isSuccessful() {\r\n        return isSuccessful;\r\n    }\r\n\r\n    public void setSuccessful(boolean isSuccessful) {\r\n        this.isSuccessful = isSuccessful;\r\n    }\r\n\r\n    public Build(String identity) {\r\n        this.identity = identity;\r\n    }\r\n\r\n    public String toString() {\r\n        String colour = \"<font color='red'>\";\r\n        String successful = \"failed\";\r\n        if (isSuccessful) {\r\n            successful = \"successful\";\r\n            colour = \"<font color='green'>\";\r\n        }\r\n        return String.format(\"%s build %s %s (%s)</font>\", colour, identity, successful, buildSite);\r\n    }\r\n}\r\n",
		"id": "EvoSuiteBenchmark/55_lavalamp/src/main/java/net/sf/lavalamp/site/BuildTest.java",
		"test_prompt": "// BuildTest.java\npackage net.sf.lavalamp.site;\n\nimport java.io.Serializable;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link Build}.\n* It contains ten unit test cases for the {@link Build#isSuccessful()} method.\n*/\nclass BuildTest {"
	},
	{
		"original_code": "// Builds.java\npackage net.sf.lavalamp.site;\r\n\r\nimport java.io.Serializable;\r\nimport java.util.ArrayList;\r\nimport java.util.List;\r\nimport net.sf.lavalamp.LavaLogger;\r\n\r\npublic class Builds implements Serializable {\r\n\r\n    private static final long serialVersionUID = -5036800757512568965L;\r\n\r\n    private final List<Build> builds;\r\n\r\n    private final transient LavaLogger logger = new LavaLogger();\r\n\r\n    public Builds() {\r\n        this.builds = new ArrayList<Build>();\r\n    }\r\n\r\n    public void add(Build build) {\r\n        builds.add(build);\r\n    }\r\n\r\n    public List<Build> getBuilds() {\r\n        return builds;\r\n    }\r\n\r\n    public boolean allSuccessful() {\r\n        for (Build build : builds) {\r\n            boolean successful = build.isSuccessful();\r\n            logger.debug(\"buildId=\" + build.getIdentity() + \" successful=\" + successful);\r\n            if (!successful) {\r\n                return false;\r\n            }\r\n        }\r\n        return true;\r\n    }\r\n\r\n    public Build getBuild(String buildId) throws MissingBuildException {\r\n        for (Build build : builds) {\r\n            if (build.getIdentity().equals(buildId)) {\r\n                logger.debug(\"found build \" + buildId);\r\n                return build;\r\n            }\r\n        }\r\n        throw new MissingBuildException(buildId + \" not found\");\r\n    }\r\n}\r\n",
		"id": "EvoSuiteBenchmark/55_lavalamp/src/main/java/net/sf/lavalamp/site/BuildsTest.java",
		"test_prompt": "// BuildsTest.java\npackage net.sf.lavalamp.site;\n\nimport java.io.Serializable;\nimport java.util.ArrayList;\nimport java.util.List;\nimport net.sf.lavalamp.LavaLogger;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link Builds}.\n* It contains ten unit test cases for the {@link Builds#allSuccessful()} method.\n*/\nclass BuildsTest {"
	},
	{
		"original_code": "// SiteFactory.java\npackage net.sf.lavalamp.site;\r\n\r\npublic class SiteFactory {\r\n\r\n    public BuildSite make(SiteProperties properties) throws InstantiationException, IllegalAccessException, ClassNotFoundException {\r\n        BuildSite site = (BuildSite) Class.forName(properties.getClassName()).newInstance();\r\n        site.setProperties(properties);\r\n        Getter getter = (Getter) Class.forName(properties.getGetterClass()).newInstance();\r\n        site.setUrlGetter(getter);\r\n        return site;\r\n    }\r\n}\r\n",
		"id": "EvoSuiteBenchmark/55_lavalamp/src/main/java/net/sf/lavalamp/site/SiteFactoryTest.java",
		"test_prompt": "// SiteFactoryTest.java\npackage net.sf.lavalamp.site;\n\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link SiteFactory}.\n* It contains ten unit test cases for the {@link SiteFactory#make(SiteProperties)} method.\n*/\nclass SiteFactoryTest {"
	},
	{
		"original_code": "// Console.java\npackage net.sf.lavalamp.site;\r\n\r\npublic class Console {\r\n\r\n    public char[] readPassword(String fmt, Object... args) {\r\n        return System.console().readPassword(fmt, args);\r\n    }\r\n\r\n    public String readLine(String fmt, Object... args) {\r\n        return System.console().readLine(fmt, args);\r\n    }\r\n}\r\n",
		"id": "EvoSuiteBenchmark/55_lavalamp/src/main/java/net/sf/lavalamp/site/ConsoleTest0.java",
		"test_prompt": "// ConsoleTest0.java\npackage net.sf.lavalamp.site;\n\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link Console}.\n* It contains ten unit test cases for the {@link Console#readPassword(String, Object[])} method.\n*/\nclass ConsoleTest0 {"
	},
	{
		"original_code": "// Console.java\npackage net.sf.lavalamp.site;\r\n\r\npublic class Console {\r\n\r\n    public char[] readPassword(String fmt, Object... args) {\r\n        return System.console().readPassword(fmt, args);\r\n    }\r\n\r\n    public String readLine(String fmt, Object... args) {\r\n        return System.console().readLine(fmt, args);\r\n    }\r\n}\r\n",
		"id": "EvoSuiteBenchmark/55_lavalamp/src/main/java/net/sf/lavalamp/site/ConsoleTest1.java",
		"test_prompt": "// ConsoleTest1.java\npackage net.sf.lavalamp.site;\n\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link Console}.\n* It contains ten unit test cases for the {@link Console#readLine(String, Object[])} method.\n*/\nclass ConsoleTest1 {"
	},
	{
		"original_code": "// DeviceProperties.java\npackage net.sf.lavalamp.device;\r\n\r\nimport java.io.Serializable;\r\nimport java.util.Arrays;\r\nimport net.sf.lavalamp.properties.MissingPropertyException;\r\nimport net.sf.lavalamp.properties.Off;\r\nimport net.sf.lavalamp.site.BuildProperties;\r\n\r\npublic class DeviceProperties implements Serializable {\r\n\r\n    private static final long serialVersionUID = -7368737596438032435L;\r\n\r\n    private String identity;\r\n\r\n    private String className;\r\n\r\n    private String path;\r\n\r\n    private boolean onWhenSuccessful = false;\r\n\r\n    private OnError onError = OnError.BLINK;\r\n\r\n    private BuildProperties[] buildProperties;\r\n\r\n    private transient Off off = new Off();\r\n\r\n    public BuildProperties[] getBuildProperties() {\r\n        return buildProperties;\r\n    }\r\n\r\n    @Override\r\n    public String toString() {\r\n        return \"\\n\\tdevice=\" + identity + \", className=\" + className + \",  off=\" + off + \", onError=\" + onError + \", onWhenSuccessful=\" + onWhenSuccessful + \", path=\" + path + Arrays.toString(buildProperties);\r\n    }\r\n\r\n    public void check() {\r\n        if (identity == null) {\r\n            throw new MissingPropertyException(\"identity must be specified in properties file\");\r\n        }\r\n        if (className == null) {\r\n            throw new MissingPropertyException(\"className must be specified in properties file\");\r\n        }\r\n        for (BuildProperties properties : buildProperties) {\r\n            properties.check();\r\n        }\r\n    }\r\n\r\n    public String getIdentity() {\r\n        return identity;\r\n    }\r\n\r\n    public void setIdentity(String identity) {\r\n        this.identity = identity;\r\n    }\r\n\r\n    public void setBuildProperties(BuildProperties[] buildProperties) {\r\n        this.buildProperties = buildProperties;\r\n    }\r\n\r\n    public OnError getOnError() {\r\n        return onError;\r\n    }\r\n\r\n    public void setOnError(OnError onError) {\r\n        this.onError = onError;\r\n    }\r\n\r\n    public Off getOff() {\r\n        return off;\r\n    }\r\n\r\n    public void setOff(Off off) {\r\n        this.off = off;\r\n    }\r\n\r\n    public String getClassName() {\r\n        return className;\r\n    }\r\n\r\n    public void setClassName(String className) {\r\n        this.className = className;\r\n    }\r\n\r\n    public String getPath() {\r\n        return path;\r\n    }\r\n\r\n    public void setPath(String path) {\r\n        this.path = path;\r\n    }\r\n\r\n    public boolean isOnWhenSuccessful() {\r\n        return onWhenSuccessful;\r\n    }\r\n\r\n    public void setOnWhenSuccessful(boolean onWhenSuccessful) {\r\n        this.onWhenSuccessful = onWhenSuccessful;\r\n    }\r\n}\r\n",
		"id": "EvoSuiteBenchmark/55_lavalamp/src/main/java/net/sf/lavalamp/device/DevicePropertiesTest.java",
		"test_prompt": "// DevicePropertiesTest.java\npackage net.sf.lavalamp.device;\n\nimport java.io.Serializable;\nimport java.util.Arrays;\nimport net.sf.lavalamp.properties.MissingPropertyException;\nimport net.sf.lavalamp.properties.Off;\nimport net.sf.lavalamp.site.BuildProperties;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link DeviceProperties}.\n* It contains ten unit test cases for the {@link DeviceProperties#isOnWhenSuccessful()} method.\n*/\nclass DevicePropertiesTest {"
	},
	{
		"original_code": "// DeviceController.java\npackage net.sf.lavalamp.device;\r\n\r\nimport java.io.Serializable;\r\nimport java.util.ArrayList;\r\nimport java.util.Calendar;\r\nimport java.util.List;\r\nimport net.sf.lavalamp.site.Build;\r\nimport net.sf.lavalamp.site.Builds;\r\nimport net.sf.lavalamp.LavaLogger;\r\nimport net.sf.lavalamp.site.MissingBuildException;\r\n\r\n/**\r\n * Controller which links the devices to the builds.\r\n *\r\n * @author Steven Hale\r\n */\r\npublic class DeviceController implements Serializable {\r\n\r\n    private static final long serialVersionUID = 8064874239904630283L;\r\n\r\n    private transient LavaLogger logger = new LavaLogger();\r\n\r\n    private final List<Device> devices;\r\n\r\n    public void setLogger(LavaLogger logger) {\r\n        this.logger = logger;\r\n    }\r\n\r\n    public void setStatusForBuild(String buildId, boolean successful) throws MissingBuildException {\r\n        getBuild(buildId).setSuccessful(successful);\r\n    }\r\n\r\n    public Build getBuild(String buildId) throws MissingBuildException {\r\n        for (Device device : devices) {\r\n            try {\r\n                return device.getBuilds().getBuild(buildId);\r\n            } catch (MissingBuildException e) {\r\n                logger.debug(\"Build \" + buildId + \" not found for device \" + device);\r\n            }\r\n        }\r\n        throw new MissingBuildException(buildId + \" not found\");\r\n    }\r\n\r\n    public DeviceController(List<Device> devices) {\r\n        this.devices = devices;\r\n    }\r\n\r\n    /**\r\n     * Switches devices off or on depending on status of builds.\r\n     *\r\n     * @param calendar\r\n     * @return list of events\r\n     */\r\n    public List<String> switchDevices(Calendar calendar) {\r\n        logger.debug(\"checking\");\r\n        List<String> events = new ArrayList<String>();\r\n        for (Device device : devices) {\r\n            switchDevice(calendar, events, device);\r\n        }\r\n        return events;\r\n    }\r\n\r\n    protected void switchDevice(Calendar calendar, List<String> events, Device device) {\r\n        Builds builds = device.getBuilds();\r\n        logger.debug(\"device \" + device);\r\n        if (device.isAlwaysOff(calendar)) {\r\n            events.add(device + \" turned off during always off period\");\r\n            device.turnOff();\r\n        } else {\r\n            turnOffOrOn(events, builds, device);\r\n        }\r\n    }\r\n\r\n    protected void turnOffOrOn(List<String> events, Builds builds, Device device) {\r\n        if (builds.allSuccessful()) {\r\n            device.getActions().getSuccessAction().perform(events, device);\r\n        } else {\r\n            device.getActions().getFailureAction().perform(events, device);\r\n        }\r\n    }\r\n\r\n    public List<Device> getDevices() {\r\n        return devices;\r\n    }\r\n}\r\n",
		"id": "EvoSuiteBenchmark/55_lavalamp/src/main/java/net/sf/lavalamp/device/DeviceControllerTest.java",
		"test_prompt": "// DeviceControllerTest.java\npackage net.sf.lavalamp.device;\n\nimport java.io.Serializable;\nimport java.util.ArrayList;\nimport java.util.Calendar;\nimport java.util.List;\nimport net.sf.lavalamp.site.Build;\nimport net.sf.lavalamp.site.Builds;\nimport net.sf.lavalamp.LavaLogger;\nimport net.sf.lavalamp.site.MissingBuildException;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link DeviceController}.\n* It contains ten unit test cases for the {@link DeviceController#switchDevices(Calendar)} method.\n*/\nclass DeviceControllerTest {"
	},
	{
		"original_code": "// TimeOfDay.java\npackage net.sf.lavalamp.device;\n\npublic class TimeOfDay implements Comparable<TimeOfDay> {\n\n    private Integer hours;\n\n    private Integer minutes;\n\n    public TimeOfDay(int hours, int minutes) {\n        this.hours = hours;\n        this.minutes = minutes;\n    }\n\n    public TimeOfDay(String time) {\n        this.hours = new Integer(time.substring(0, 2));\n        this.minutes = new Integer(time.substring(3, 5));\n    }\n\n    @Override\n    public int compareTo(TimeOfDay that) {\n        int hourComparison = this.hours.compareTo(that.hours);\n        if (hourComparison != 0) {\n            return hourComparison;\n        }\n        return this.minutes.compareTo(that.minutes);\n    }\n\n    public Integer getHours() {\n        return hours;\n    }\n\n    public Integer getMinutes() {\n        return minutes;\n    }\n\n    @Override\n    public String toString() {\n        return hours + \":\" + minutes;\n    }\n\n    @Override\n    public int hashCode() {\n        return new Integer(100 * hours + minutes).hashCode();\n    }\n\n    @Override\n    public boolean equals(Object obj) {\n        if (this == obj)\n            return true;\n        if (obj == null)\n            return false;\n        if (getClass() != obj.getClass())\n            return false;\n        TimeOfDay other = (TimeOfDay) obj;\n        if (!hours.equals(other.hours))\n            return false;\n        if (!minutes.equals(other.minutes))\n            return false;\n        return true;\n    }\n}\n",
		"id": "EvoSuiteBenchmark/55_lavalamp/src/main/java/net/sf/lavalamp/device/TimeOfDayTest0.java",
		"test_prompt": "// TimeOfDayTest0.java\npackage net.sf.lavalamp.device;\n\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link TimeOfDay}.\n* It contains ten unit test cases for the {@link TimeOfDay#compareTo(TimeOfDay)} method.\n*/\nclass TimeOfDayTest0 {"
	},
	{
		"original_code": "// TimeOfDay.java\npackage net.sf.lavalamp.device;\n\npublic class TimeOfDay implements Comparable<TimeOfDay> {\n\n    private Integer hours;\n\n    private Integer minutes;\n\n    public TimeOfDay(int hours, int minutes) {\n        this.hours = hours;\n        this.minutes = minutes;\n    }\n\n    public TimeOfDay(String time) {\n        this.hours = new Integer(time.substring(0, 2));\n        this.minutes = new Integer(time.substring(3, 5));\n    }\n\n    @Override\n    public int compareTo(TimeOfDay that) {\n        int hourComparison = this.hours.compareTo(that.hours);\n        if (hourComparison != 0) {\n            return hourComparison;\n        }\n        return this.minutes.compareTo(that.minutes);\n    }\n\n    public Integer getHours() {\n        return hours;\n    }\n\n    public Integer getMinutes() {\n        return minutes;\n    }\n\n    @Override\n    public String toString() {\n        return hours + \":\" + minutes;\n    }\n\n    @Override\n    public int hashCode() {\n        return new Integer(100 * hours + minutes).hashCode();\n    }\n\n    @Override\n    public boolean equals(Object obj) {\n        if (this == obj)\n            return true;\n        if (obj == null)\n            return false;\n        if (getClass() != obj.getClass())\n            return false;\n        TimeOfDay other = (TimeOfDay) obj;\n        if (!hours.equals(other.hours))\n            return false;\n        if (!minutes.equals(other.minutes))\n            return false;\n        return true;\n    }\n}\n",
		"id": "EvoSuiteBenchmark/55_lavalamp/src/main/java/net/sf/lavalamp/device/TimeOfDayTest1.java",
		"test_prompt": "// TimeOfDayTest1.java\npackage net.sf.lavalamp.device;\n\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link TimeOfDay}.\n* It contains ten unit test cases for the {@link TimeOfDay#hashCode()} method.\n*/\nclass TimeOfDayTest1 {"
	},
	{
		"original_code": "// TimeOfDay.java\npackage net.sf.lavalamp.device;\n\npublic class TimeOfDay implements Comparable<TimeOfDay> {\n\n    private Integer hours;\n\n    private Integer minutes;\n\n    public TimeOfDay(int hours, int minutes) {\n        this.hours = hours;\n        this.minutes = minutes;\n    }\n\n    public TimeOfDay(String time) {\n        this.hours = new Integer(time.substring(0, 2));\n        this.minutes = new Integer(time.substring(3, 5));\n    }\n\n    @Override\n    public int compareTo(TimeOfDay that) {\n        int hourComparison = this.hours.compareTo(that.hours);\n        if (hourComparison != 0) {\n            return hourComparison;\n        }\n        return this.minutes.compareTo(that.minutes);\n    }\n\n    public Integer getHours() {\n        return hours;\n    }\n\n    public Integer getMinutes() {\n        return minutes;\n    }\n\n    @Override\n    public String toString() {\n        return hours + \":\" + minutes;\n    }\n\n    @Override\n    public int hashCode() {\n        return new Integer(100 * hours + minutes).hashCode();\n    }\n\n    @Override\n    public boolean equals(Object obj) {\n        if (this == obj)\n            return true;\n        if (obj == null)\n            return false;\n        if (getClass() != obj.getClass())\n            return false;\n        TimeOfDay other = (TimeOfDay) obj;\n        if (!hours.equals(other.hours))\n            return false;\n        if (!minutes.equals(other.minutes))\n            return false;\n        return true;\n    }\n}\n",
		"id": "EvoSuiteBenchmark/55_lavalamp/src/main/java/net/sf/lavalamp/device/TimeOfDayTest2.java",
		"test_prompt": "// TimeOfDayTest2.java\npackage net.sf.lavalamp.device;\n\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link TimeOfDay}.\n* It contains ten unit test cases for the {@link TimeOfDay#equals(Object)} method.\n*/\nclass TimeOfDayTest2 {"
	},
	{
		"original_code": "// HtmlFormatter.java\npackage net.sf.lavalamp.device;\n\nimport java.util.List;\nimport net.sf.lavalamp.site.Build;\n\npublic class HtmlFormatter {\n\n    private final List<Device> devices;\n\n    public HtmlFormatter(List<Device> devices) {\n        this.devices = devices;\n    }\n\n    public String toHtml() {\n        StringBuffer buffer = new StringBuffer();\n        for (Device device : devices) {\n            appendHeader(buffer, device);\n            appendList(buffer, device);\n        }\n        return buffer.toString();\n    }\n\n    private void appendHeader(StringBuffer buffer, Device device) {\n        buffer.append(\"<h2>\");\n        buffer.append(device.toString());\n        buffer.append(\"</h2>\");\n    }\n\n    private void appendList(StringBuffer buffer, Device device) {\n        buffer.append(\"<ul>\");\n        for (Build build : device.getBuilds().getBuilds()) {\n            appendListItem(buffer, build);\n        }\n        buffer.append(\"</ul>\");\n    }\n\n    private void appendListItem(StringBuffer buffer, Build build) {\n        buffer.append(\"<li>\");\n        buffer.append(build.toString());\n        buffer.append(\"</li>\");\n    }\n}\n",
		"id": "EvoSuiteBenchmark/55_lavalamp/src/main/java/net/sf/lavalamp/device/HtmlFormatterTest.java",
		"test_prompt": "// HtmlFormatterTest.java\npackage net.sf.lavalamp.device;\n\nimport java.util.List;\nimport net.sf.lavalamp.site.Build;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link HtmlFormatter}.\n* It contains ten unit test cases for the {@link HtmlFormatter#toHtml()} method.\n*/\nclass HtmlFormatterTest {"
	},
	{
		"original_code": "// AbstractDevice.java\npackage net.sf.lavalamp.device;\r\n\r\nimport java.io.Serializable;\r\nimport java.util.Calendar;\r\nimport net.sf.lavalamp.LavaLogger;\r\nimport net.sf.lavalamp.site.Builds;\r\n\r\npublic abstract class AbstractDevice implements Device, Serializable {\r\n\r\n    private static final long serialVersionUID = -707948956275520549L;\r\n\r\n    protected transient LavaLogger logger = new LavaLogger();\r\n\r\n    protected String identity;\r\n\r\n    protected Period offPeriod;\r\n\r\n    protected DeviceProperties properties;\r\n\r\n    private transient Actions actions;\r\n\r\n    protected Builds builds;\r\n\r\n    @Override\r\n    public Actions getActions() {\r\n        return actions;\r\n    }\r\n\r\n    @Override\r\n    public void setProperties(DeviceProperties properties) {\r\n        this.properties = properties;\r\n        identity = properties.getIdentity();\r\n        makeActions();\r\n        offPeriod = new Period(new TimeOfDay(properties.getOff().getStart()), new TimeOfDay(properties.getOff().getEnd()));\r\n    }\r\n\r\n    @Override\r\n    public String toString() {\r\n        return String.format(\"device %s\", identity);\r\n    }\r\n\r\n    @Override\r\n    public void turnOn() {\r\n        logger.info(\"turning on \" + this.toString());\r\n    }\r\n\r\n    @Override\r\n    public void turnOff() {\r\n        logger.info(\"turning off \" + this.toString());\r\n    }\r\n\r\n    private void makeActions() {\r\n        Action successAction = null;\r\n        Action failureAction = null;\r\n        Action errorAction = null;\r\n        if (properties.isOnWhenSuccessful()) {\r\n            successAction = new TurnOn();\r\n            failureAction = new TurnOff();\r\n        } else {\r\n            successAction = new TurnOff();\r\n            failureAction = new TurnOn();\r\n        }\r\n        errorAction = makeErrorAction();\r\n        actions = new Actions(successAction, failureAction, errorAction);\r\n    }\r\n\r\n    private Action makeErrorAction() {\r\n        Action errorAction;\r\n        OnError onError = properties.getOnError();\r\n        if (onError.equals(OnError.CRASH)) {\r\n            errorAction = new Crash();\r\n        } else if (onError.equals(OnError.STATUSQUO)) {\r\n            errorAction = new StatusQuo();\r\n        } else {\r\n            errorAction = new Blink();\r\n        }\r\n        return errorAction;\r\n    }\r\n\r\n    @Override\r\n    public void setAlwaysOffPeriod(Period period) {\r\n        this.offPeriod = period;\r\n    }\r\n\r\n    @Override\r\n    public boolean isAlwaysOff(Calendar now) {\r\n        return offPeriod.isInPeriod(now);\r\n    }\r\n\r\n    @Override\r\n    public Builds getBuilds() {\r\n        return builds;\r\n    }\r\n\r\n    @Override\r\n    public void setBuilds(Builds builds) {\r\n        this.builds = builds;\r\n    }\r\n}\r\n",
		"id": "EvoSuiteBenchmark/55_lavalamp/src/main/java/net/sf/lavalamp/device/AbstractDeviceTest.java",
		"test_prompt": "// AbstractDeviceTest.java\npackage net.sf.lavalamp.device;\n\nimport java.io.Serializable;\nimport java.util.Calendar;\nimport net.sf.lavalamp.LavaLogger;\nimport net.sf.lavalamp.site.Builds;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link AbstractDevice}.\n* It contains ten unit test cases for the {@link AbstractDevice#isAlwaysOff(Calendar)} method.\n*/\nclass AbstractDeviceTest {"
	},
	{
		"original_code": "// Period.java\npackage net.sf.lavalamp.device;\r\n\r\nimport java.util.Calendar;\r\nimport net.sf.lavalamp.LavaLogger;\r\n\r\n/**\r\n * A time period\r\n * @author stehal\r\n */\r\npublic class Period {\r\n\r\n    private final LavaLogger logger = new LavaLogger();\r\n\r\n    private final TimeOfDay startTime;\r\n\r\n    private final TimeOfDay endTime;\r\n\r\n    public Period(TimeOfDay startTime, TimeOfDay endTime) {\r\n        this.startTime = startTime;\r\n        this.endTime = endTime;\r\n    }\r\n\r\n    public boolean isInPeriod(Calendar now) {\r\n        TimeOfDay nowTime = new TimeOfDay(now.get(Calendar.HOUR_OF_DAY), now.get(Calendar.MINUTE));\r\n        if (startTime.compareTo(endTime) < 0) {\r\n            return isInPeriodWhenStartAndEndOnSameDay(nowTime);\r\n        } else if (!startTime.equals(endTime)) {\r\n            return isInPeriodWhenEndIsNextDay(nowTime);\r\n        }\r\n        return false;\r\n    }\r\n\r\n    private boolean isInPeriodWhenEndIsNextDay(TimeOfDay nowTime) {\r\n        assert startTime.compareTo(endTime) > 0;\r\n        if (nowTime.compareTo(startTime) > 0 || nowTime.compareTo(endTime) < 0) {\r\n            logger.debug(\"In period \" + startTime + \"-\" + endTime);\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    private boolean isInPeriodWhenStartAndEndOnSameDay(TimeOfDay nowTime) {\r\n        assert startTime.compareTo(endTime) < 0;\r\n        if (nowTime.compareTo(startTime) > 0 && nowTime.compareTo(endTime) < 0) {\r\n            logger.debug(\"In period \" + startTime + \"-\" + endTime);\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n}\r\n",
		"id": "EvoSuiteBenchmark/55_lavalamp/src/main/java/net/sf/lavalamp/device/PeriodTest.java",
		"test_prompt": "// PeriodTest.java\npackage net.sf.lavalamp.device;\n\nimport java.util.Calendar;\nimport net.sf.lavalamp.LavaLogger;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link Period}.\n* It contains ten unit test cases for the {@link Period#isInPeriod(Calendar)} method.\n*/\nclass PeriodTest {"
	},
	{
		"original_code": "// ApplicationProperties.java\npackage net.sf.lavalamp.application;\r\n\r\nimport java.util.Arrays;\r\nimport net.sf.lavalamp.device.DeviceProperties;\r\n\r\npublic class ApplicationProperties {\r\n\r\n    private int runInterval = 30000;\r\n\r\n    private int port;\r\n\r\n    private boolean debug = false;\r\n\r\n    private DeviceProperties[] deviceProperties;\r\n\r\n    public void check() {\r\n        for (DeviceProperties properties : deviceProperties) {\r\n            properties.check();\r\n        }\r\n    }\r\n\r\n    public int getPort() {\r\n        return port;\r\n    }\r\n\r\n    public void setPort(int port) {\r\n        this.port = port;\r\n    }\r\n\r\n    public int getRunInterval() {\r\n        return runInterval;\r\n    }\r\n\r\n    public void setRunInterval(int runInterval) {\r\n        this.runInterval = runInterval;\r\n    }\r\n\r\n    public boolean isDebug() {\r\n        return debug;\r\n    }\r\n\r\n    public void setDebug(boolean debug) {\r\n        this.debug = debug;\r\n    }\r\n\r\n    public DeviceProperties[] getDeviceProperties() {\r\n        return deviceProperties;\r\n    }\r\n\r\n    public void setDeviceProperties(DeviceProperties[] deviceProperties) {\r\n        this.deviceProperties = deviceProperties;\r\n    }\r\n\r\n    @Override\r\n    public String toString() {\r\n        return \"debug=\" + debug + \", port=\" + port + \", runInterval=\" + runInterval + \", \" + Arrays.toString(deviceProperties);\r\n    }\r\n}\r\n",
		"id": "EvoSuiteBenchmark/55_lavalamp/src/main/java/net/sf/lavalamp/application/ApplicationPropertiesTest.java",
		"test_prompt": "// ApplicationPropertiesTest.java\npackage net.sf.lavalamp.application;\n\nimport java.util.Arrays;\nimport net.sf.lavalamp.device.DeviceProperties;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link ApplicationProperties}.\n* It contains ten unit test cases for the {@link ApplicationProperties#isDebug()} method.\n*/\nclass ApplicationPropertiesTest {"
	},
	{
		"original_code": "// ApplicationPropertiesLoader.java\npackage net.sf.lavalamp.application;\r\n\r\nimport java.io.File;\r\nimport java.io.FileNotFoundException;\r\nimport org.ho.yaml.Yaml;\r\n\r\npublic class ApplicationPropertiesLoader {\r\n\r\n    public ApplicationProperties load(String fileName) throws FileNotFoundException {\r\n        File input = new File(fileName);\r\n        ApplicationProperties applicationProperties = Yaml.loadType(input, ApplicationProperties.class);\r\n        applicationProperties.check();\r\n        return applicationProperties;\r\n    }\r\n}\r\n",
		"id": "EvoSuiteBenchmark/55_lavalamp/src/main/java/net/sf/lavalamp/application/ApplicationPropertiesLoaderTest.java",
		"test_prompt": "// ApplicationPropertiesLoaderTest.java\npackage net.sf.lavalamp.application;\n\nimport java.io.File;\nimport java.io.FileNotFoundException;\nimport org.ho.yaml.Yaml;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link ApplicationPropertiesLoader}.\n* It contains ten unit test cases for the {@link ApplicationPropertiesLoader#load(String)} method.\n*/\nclass ApplicationPropertiesLoaderTest {"
	}
]