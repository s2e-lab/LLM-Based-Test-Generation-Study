[
	{
		"original_code": "// bcModule.java\n/* Battlecry V0.1\n * Copyright (C) 2003  Marek \"Wansti\" Moeckel\n *\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU General Public License\n * as published by the Free Software Foundation; either version 2\n * of the License, or (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program; if not, write to the Free Software\n * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.\n */\npackage bcry;\n\nimport java.io.*;\nimport java.util.*;\nimport java.util.zip.*;\nimport java.util.List.*;\n\n/* THE BATTLECRY MODULE CLASS\n * This class represents a Battlecry Module.\n */\nclass bcModule {\n\n    private final String DEFAULT_DATA = \"data/modules/battlecry.bcm\";\n\n    private final String DICT_FILE = \"data/cmudict.0.6-2-bcry\";\n\n    private static final String DEMO_TEMPLATE = \"data/bcDemoModule.template\";\n\n    private Properties grammar;\n\n    private Properties info;\n\n    //Cointains String objects\n    private List layout;\n\n    //Contains bcWordList objects\n    private List wordLists;\n\n    private int sylTolerance = 0;\n\n    private int metTolerance = 1;\n\n    private boolean initialized = false;\n\n    private bcVoice voice = null;\n\n    private bcDictionary dict = null;\n\n    /* CLASS CONSTRUCTOR\n    * If no dictionary is being handed to the constructor, bcModule will initialize it automatically.\n    * If you (re-)load a module, you can use getDictionary() from the old module to save loading time.\n    */\n    public bcModule(String data, String customLayout, bcVoice v) {\n        voice = v;\n        if (data.equals(\"\")) {\n            data = DEFAULT_DATA;\n        }\n        if (data.equals(\"DEMO\")) {\n            initialized = initializeDemoModule();\n        } else {\n            dict = new bcDictionary(DICT_FILE, voice);\n            initialized = initialize(data, customLayout);\n        }\n    }\n\n    public bcModule(String data, String customLayout, bcVoice v, bcDictionary d) {\n        voice = v;\n        if (data.equals(\"\")) {\n            data = DEFAULT_DATA;\n        }\n        if (data.equals(\"DEMO\")) {\n            initialized = initializeDemoModule();\n        } else {\n            dict = d;\n            initialized = initialize(data, customLayout);\n        }\n    }\n\n    // ---------------- CONSTRUCTOR AUXILIARY METHODS ----------------\n    private boolean initialize(String data, String customLayout) {\n        boolean result = false;\n        File test = new File(data);\n        if (test.isDirectory()) {\n            voice.verbose(\"Using directory \" + data);\n            if (openDirectory(data, customLayout)) {\n                result = true;\n                voice.verbose(\"Directory opened successfully.\");\n            }\n        } else if (test.isFile()) {\n            voice.verbose(\"Using module \" + data);\n            if (openZipFile(data, customLayout)) {\n                result = true;\n                voice.verbose(\"Module opened successfully.\");\n            }\n        } else {\n            voice.sysout(\"Error: File or directory not found: \" + test);\n        }\n        return result;\n    }\n\n    /* The following method initializes a hard-coded version of the default Battlecry module\n    * stored in the bcDemoModule class.\n    * This is used for the applet version of Battlecry (\"Battlecry Live\") which cannot\n    * load modules from data files for security reasons.\n    * Custom demo modules can be generated from any standard module using the --demo option.\n    */\n    private boolean initializeDemoModule() {\n        boolean result = false;\n        voice.verbose(\"Running in Demo Mode\");\n        bcDemoModule demo = new bcDemoModule();\n        grammar = demo.getGrammar();\n        info = demo.getInfo();\n        layout = demo.getLayout();\n        wordLists = demo.getWordLists();\n        if ((grammar != null) && (info != null) && (layout != null) && (wordLists != null)) {\n            result = true;\n        }\n        return result;\n    }\n\n    // ---------------- MODULE LOADING METHODS ----------------\n    /* openZipFile\n    * This method parses the data archives and passes its files to the corresponding methods.\n    */\n    private boolean openZipFile(String dataFile, String layoutFile) {\n        boolean result = true;\n        boolean needLayout = true;\n        int complete = 0;\n        if (!layoutFile.equals(\"\")) {\n            try {\n                voice.verbose(\"Using custom layout \" + layoutFile);\n                if (!loadLayout(new FileInputStream(layoutFile))) {\n                    voice.sysout(\"Warning: Failed to load custom layout file. Trying to load from data file...\");\n                } else {\n                    needLayout = false;\n                }\n            } catch (IOException e) {\n                voice.sysout(\"Warning: Failed to open custom layout file. Trying data file...\");\n            }\n        }\n        try {\n            ZipFile zipFile = new ZipFile(dataFile);\n            Enumeration entries = zipFile.entries();\n            while (entries.hasMoreElements()) {\n                ZipEntry entry = (ZipEntry) entries.nextElement();\n                if (entry.isDirectory()) {\n                    voice.sysout(\"Warning: Directory detected inside data file; this can cause problems.\");\n                    continue;\n                }\n                if (entry.getName().equals(\"info.dat\")) {\n                    complete++;\n                    voice.verbose(\"Loading file: \" + entry.getName());\n                    if (!loadInfo(zipFile.getInputStream(entry))) {\n                        voice.sysout(\"Error: Unable to parse info file.\");\n                        result = false;\n                    }\n                } else if (entry.getName().equals(\"layout.dat\")) {\n                    complete++;\n                    voice.verbose(\"Loading file: \" + entry.getName());\n                    if (needLayout) {\n                        if (!loadLayout(zipFile.getInputStream(entry))) {\n                            voice.sysout(\"Error: Unable to parse layout file.\");\n                            result = false;\n                        }\n                    } else {\n                        continue;\n                    }\n                } else if (entry.getName().equals(\"grammar.dat\")) {\n                    complete++;\n                    voice.verbose(\"Loading file: \" + entry.getName());\n                    if (!loadGrammar(zipFile.getInputStream(entry))) {\n                        voice.sysout(\"Error: Unable to parse grammar file.\");\n                        result = false;\n                    }\n                } else if (entry.getName().equals(\"words.dat\")) {\n                    complete++;\n                    voice.verbose(\"Loading file: \" + entry.getName());\n                    if (!loadWordLists(zipFile.getInputStream(entry))) {\n                        voice.sysout(\"Error: Unable to parse word list \" + entry.getName());\n                        result = false;\n                    }\n                } else {\n                    voice.sysout(\"Warning: Ignoring unknown file type \" + entry.getName());\n                }\n            }\n            zipFile.close();\n        } catch (IOException e) {\n            voice.sysout(\"Error: Could not open data file \" + dataFile);\n            result = false;\n        }\n        if (complete != 4) {\n            voice.sysout(\"Error: Module \" + dataFile + \" does not contain all necessary files.\");\n            result = false;\n        }\n        return result;\n    }\n\n    /* openDirectory\n    * This method opens the module files inside the given directory.\n    */\n    private boolean openDirectory(String dataFile, String layoutFile) {\n        boolean result = true;\n        boolean needLayout = true;\n        if (!layoutFile.equals(\"\")) {\n            try {\n                voice.verbose(\"Using custom layout \" + layoutFile);\n                if (!loadLayout(new FileInputStream(layoutFile))) {\n                    voice.sysout(\"Warning: Failed to load custom layout file. Trying to load from data file...\");\n                } else {\n                    needLayout = false;\n                }\n            } catch (IOException e) {\n                voice.sysout(\"Warning: Failed to open custom layout file. Trying data file...\");\n            }\n        }\n        try {\n            int complete = 0;\n            File[] fileList = new File(dataFile).listFiles();\n            for (int i = 0; i < fileList.length; i++) {\n                if ((fileList[i].toString().endsWith(\"info.dat\")) || (fileList[i].toString().endsWith(\"layout.dat\")) || (fileList[i].toString().endsWith(\"grammar.dat\")) || (fileList[i].toString().endsWith(\"words.dat\"))) {\n                    complete++;\n                }\n            }\n            if (complete != 4) {\n                voice.sysout(\"Error: Directory \" + dataFile + \" does not contain all necessary files.\");\n                result = false;\n            } else {\n                for (int i = 0; i < fileList.length; i++) {\n                    if (fileList[i].getName().equals(\"info.dat\")) {\n                        voice.verbose(\"Loading file: \" + fileList[i].toString());\n                        if (!loadInfo(new FileInputStream(fileList[i].toString()))) {\n                            voice.sysout(\"Error: Unable to parse info file.\");\n                            result = false;\n                        }\n                    } else if (fileList[i].getName().equals(\"layout.dat\")) {\n                        voice.verbose(\"Loading file: \" + fileList[i].toString());\n                        if (needLayout) {\n                            if (!loadLayout(new FileInputStream(fileList[i].toString()))) {\n                                voice.sysout(\"Error: Unable to parse layout file.\");\n                                result = false;\n                            }\n                        } else {\n                            continue;\n                        }\n                    } else if (fileList[i].getName().equals(\"grammar.dat\")) {\n                        voice.verbose(\"Loading file: \" + fileList[i].toString());\n                        if (!loadGrammar(new FileInputStream(fileList[i].toString()))) {\n                            voice.sysout(\"Error: Unable to parse grammar file.\");\n                            result = false;\n                        }\n                    } else if (fileList[i].getName().equals(\"words.dat\")) {\n                        voice.verbose(\"Loading file: \" + fileList[i].toString());\n                        if (!loadWordLists(new FileInputStream(fileList[i].toString()))) {\n                            voice.sysout(\"Error: Unable to parse word list \" + fileList[i].toString());\n                            result = false;\n                        }\n                    } else {\n                        voice.sysout(\"Warning: Ignoring unknown file type \" + fileList[i].toString());\n                    }\n                }\n            }\n        } catch (IOException e) {\n            voice.sysout(\"Error: \" + dataFile + \" does not contain valid battlecry data.\");\n            result = false;\n        }\n        return result;\n    }\n\n    /* loadWordLists\n    * Takes a word file (and its name) and adds it to the wordLists array.\n    */\n    private boolean loadWordLists(InputStream wordFile) {\n        if (wordLists == null) {\n            wordLists = new LinkedList();\n        }\n        bcWordList tempList = new bcWordList(\"BC_DUMMY_LIST\");\n        //Create an extra list for single words\n        bcWordList splitList = new bcWordList(\"BC_SPLIT_STRINGS\");\n        String line;\n        boolean result = true;\n        try {\n            BufferedReader list = new BufferedReader(new InputStreamReader(wordFile));\n            while ((line = list.readLine()) != null) {\n                if (!line.equals(\"\")) {\n                    if ((line.startsWith(\"[\")) && (line.endsWith(\"]\"))) {\n                        //create a new list, add the current list to wordLists first\n                        if (!tempList.getFileName().equals(\"BC_DUMMY_LIST\")) {\n                            wordLists.add(tempList);\n                        }\n                        voice.verbose(\"Adding word list: \" + line.substring(1, line.length() - 1));\n                        tempList = new bcWordList(line.substring(1, line.length() - 1));\n                    } else {\n                        //add this word\n                        if (!line.startsWith(\"#\")) {\n                            if (line.indexOf(\"=\") == -1) {\n                                if (tempList.getItem(line) == null)\n                                    tempList.addWord(line, dict.getPhonemes(line));\n                                if (line.indexOf(\" \") != -1) {\n                                    String[] temp = line.split(\" \");\n                                    for (int i = 0; i < temp.length; i++) {\n                                        if (splitList.getItem(temp[i]) == null)\n                                            splitList.addWord(temp[i], dict.getPhonemes(temp[i]));\n                                    }\n                                }\n                            } else {\n                                //word is set equal to another\n                                //TODO: Split words at \"blank\"\n                                String[] splitLine = line.split(\"=\");\n                                bcWord tempWord = new bcWord(splitLine[0], dict.getPhonemes(splitLine[0]));\n                                tempWord.setEqualWord(splitLine[1], dict.getPhonemes(splitLine[1]));\n                                tempList.addWord(tempWord);\n                            }\n                        }\n                    }\n                }\n            }\n            if (tempList.getFileName().equals(\"BC_DUMMY_LIST\")) {\n                voice.sysout(\"Error: Syntax error in words.dat - see documentation for help.\");\n                result = false;\n            }\n            wordLists.add(tempList);\n            list.close();\n        } catch (Exception e) {\n            voice.sysout(\"Error: Unable to load word lists - \" + e.toString());\n            result = false;\n        }\n        //Parse grammar for strings, add them to the word lists\n        tempList = new bcWordList(\"BC_FROM_GRAMMAR\");\n        String[] temp1;\n        String[] temp2;\n        Enumeration entries = grammar.propertyNames();\n        while (entries.hasMoreElements()) {\n            temp1 = grammar.getProperty(entries.nextElement().toString()).split(\"'\");\n            for (int i = 1; i < temp1.length; i++) {\n                //add the whole string\n                if (tempList.getItem(temp1[i]) == null)\n                    tempList.addWord(temp1[i], dict.getPhonemes(temp1[i]));\n                //if string is more than one word, add single words to splitList\n                if (temp1[i].indexOf(\" \") != -1) {\n                    temp2 = temp1[i].split(\" \");\n                    for (int j = 0; j < temp2.length; j++) {\n                        if (splitList.getItem(temp2[j]) == null)\n                            splitList.addWord(temp2[j], dict.getPhonemes(temp2[j]));\n                    }\n                }\n                //only every second element is a valid string, so increase i by 1 to skip the others\n                i++;\n            }\n        }\n        //hack to prevent program from crashing when xLiner produces an empty string; fix this in xLiner!\n        splitList.addWord(\"\", \"\");\n        wordLists.add(tempList);\n        if (splitList.getNumberOfWords() != 0)\n            wordLists.add(splitList);\n        return result;\n    }\n\n    /* loadLayout\n    * Takes the layout.dat file and stores its data into the Layout array.\n    */\n    private boolean loadLayout(InputStream layoutFile) {\n        int i;\n        String line;\n        boolean result = true;\n        try {\n            layout = new LinkedList();\n            BufferedReader lo = new BufferedReader(new InputStreamReader(layoutFile));\n            while ((line = lo.readLine()) != null) {\n                layout.add(line);\n            }\n            lo.close();\n        } catch (Exception e) {\n            voice.sysout(e.toString());\n            result = false;\n        }\n        return result;\n    }\n\n    /* loadGrammar\n    * Takes the grammar.dat file and stores its information in the \"grammar\" Properties variable.\n    */\n    private boolean loadGrammar(InputStream grammarFile) {\n        boolean result = true;\n        try {\n            grammar = new Properties();\n            grammar.load(grammarFile);\n        } catch (Exception e) {\n            voice.sysout(e.toString());\n            result = false;\n        }\n        return result;\n    }\n\n    /* loadInfo\n    * Takes the info.dat file and stores its information in the \"info\" Properties variable.\n    * It also reads the options from that file;\n    */\n    private boolean loadInfo(InputStream infoFile) {\n        boolean result = true;\n        try {\n            info = new Properties();\n            info.load(infoFile);\n            if (!(info.getProperty(\"OPTION_SYLLABLE_TOLERANCE\") == null)) {\n                sylTolerance = Integer.parseInt(info.getProperty(\"OPTION_SYLLABLE_TOLERANCE\"));\n            } else {\n                voice.verbose(\"OPTION_SYLLABLE_TOLERANCE not set in info.dat, using default.\");\n            }\n            if (!(info.getProperty(\"OPTION_METRIC_TOLERANCE\") == null)) {\n                metTolerance = Integer.parseInt(info.getProperty(\"OPTION_METRIC_TOLERANCE\"));\n            } else {\n                voice.verbose(\"OPTION_METRIC_TOLERANCE not set in info.dat, using default.\");\n            }\n        } catch (NumberFormatException e) {\n            voice.sysout(\"Warning: Option with an invalid value found, using default.\");\n        } catch (Exception e) {\n            voice.sysout(e.toString());\n            result = false;\n        }\n        return result;\n    }\n\n    // ---------------- DEMO CLASS GENERATOR ----------------\n    /* toDemoClass()\n    * creates a bcDemoModule class from this module\n    */\n    public void toDemoClass(String outputFile) {\n        try {\n            int c = 0;\n            String line;\n            String nextLine;\n            String temp;\n            Enumeration entries;\n            BufferedReader template = new BufferedReader(new FileReader(DEMO_TEMPLATE));\n            BufferedWriter output = new BufferedWriter(new FileWriter(outputFile));\n            while ((line = template.readLine()) != null) {\n                //Add grammar entries\n                if (line.equals(\"//DEMOMAKER: INSERT GRAMMAR HERE!\")) {\n                    entries = grammar.propertyNames();\n                    while (entries.hasMoreElements()) {\n                        temp = entries.nextElement().toString();\n                        nextLine = \"      grammar.setProperty(\\\"\" + temp + \"\\\",\\\"\" + grammar.getProperty(temp) + \"\\\");\";\n                        output.write(nextLine);\n                        output.newLine();\n                        c++;\n                    }\n                    voice.verbose(c + \" grammar entries added.\");\n                    c = 0;\n                } else if (line.equals(\"//DEMOMAKER: INSERT INFO HERE!\")) {\n                    entries = info.propertyNames();\n                    while (entries.hasMoreElements()) {\n                        temp = entries.nextElement().toString();\n                        nextLine = \"      info.setProperty(\\\"\" + temp + \"\\\",\\\"\" + info.getProperty(temp) + \"\\\");\";\n                        output.write(nextLine);\n                        output.newLine();\n                        c++;\n                    }\n                    voice.verbose(c + \" info entries added.\");\n                    c = 0;\n                } else if (line.equals(\"//DEMOMAKER: INSERT LAYOUT HERE!\")) {\n                    for (int i = 0; i < layout.size(); i++) {\n                        nextLine = \"      layout.add(\\\"\" + layout.get(i) + \"\\\");\";\n                        output.write(nextLine);\n                        output.newLine();\n                        c++;\n                    }\n                    voice.verbose(c + \" layout entries added.\");\n                    c = 0;\n                } else if (line.equals(\"//DEMOMAKER: INSERT WORDLISTS HERE!\")) {\n                    for (int i = 0; i < wordLists.size(); i++) {\n                        bcWordList tempL = (bcWordList) wordLists.get(i);\n                        output.write(\"      tempList = new bcWordList(\\\"\" + tempL.getFileName() + \"\\\");\");\n                        output.newLine();\n                        for (int j = 0; j < tempL.getNumberOfWords(); j++) {\n                            nextLine = \"      tempList.addWord(\\\"\" + tempL.getItem(j).getWord() + \"\\\",\\\"\" + tempL.getItem(j).getPhonemes() + \"\\\");\";\n                            output.write(nextLine);\n                            output.newLine();\n                            c++;\n                        }\n                        output.write(\"      wordLists.add(tempList);\");\n                        output.newLine();\n                        output.newLine();\n                    }\n                    voice.verbose(c + \" word list entries added.\");\n                    c = 0;\n                } else {\n                    output.write(line);\n                    output.newLine();\n                }\n            }\n            template.close();\n            output.close();\n        } catch (IOException e) {\n            voice.sysout(\"Error: Could not create demo module - \" + e.toString());\n        }\n        voice.sysout(\"bcDemoModule class created at \" + outputFile + \".\");\n    }\n\n    // ---------------- PUBLIC METHODS ----------------\n    public Properties getGrammar() {\n        return grammar;\n    }\n\n    public Properties getInfo() {\n        return info;\n    }\n\n    public List getLayout() {\n        return layout;\n    }\n\n    public List getWordLists() {\n        return wordLists;\n    }\n\n    public bcWordList getWordList(String listName) {\n        bcWordList result = null;\n        for (int i = 0; i < wordLists.size(); i++) {\n            bcWordList temp = (bcWordList) wordLists.get(i);\n            if (temp.getFileName().equals(listName)) {\n                result = temp;\n                break;\n            }\n        }\n        return result;\n    }\n\n    public int getSyllableTolerance() {\n        return sylTolerance;\n    }\n\n    public int getMetricTolerance() {\n        return metTolerance;\n    }\n\n    public boolean isInitialized() {\n        return initialized;\n    }\n\n    public bcDictionary getDictionary() {\n        return dict;\n    }\n}\n",
		"id": "/EvoSuiteBenchmark/72_battlecry/src/main/java/bcry/bcModule.java",
		"test_prompt": "// bcModuleTest.java\npackage bcry;\n\nimport java.io.*;\nimport java.util.*;\nimport java.util.zip.*;\nimport java.util.List.*;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link bcModule}.\n* It contains ten unit test cases for the {@link bcModule#isInitialized()} method.\n*/\nclass bcModuleTest {"
	},
	{
		"original_code": "// bcWord.java\n/* Battlecry V0.1\n * Copyright (C) 2003  Marek \"Wansti\" Moeckel\n *\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU General Public License\n * as published by the Free Software Foundation; either version 2\n * of the License, or (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program; if not, write to the Free Software\n * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.\n */\npackage bcry;\n\n/* BATTLECRY WORD OBJECT\n * This class holds data from word files - single words and their phoneme structure.\n * It also counts the syllables of the stored word and extracts its rhyme key.\n */\nclass bcWord {\n\n    private String word;\n\n    private String phonemes;\n\n    private int syllables;\n\n    private String equalWord;\n\n    private String metricCode;\n\n    public bcWord(String w, String p) {\n        word = w;\n        phonemes = p;\n        metricCode = \"\";\n        syllables = 0;\n        equalWord = w;\n        parsePhonemes();\n    }\n\n    public String getWord() {\n        return word;\n    }\n\n    public String getPhonemes() {\n        return phonemes;\n    }\n\n    public int getSyllables() {\n        return syllables;\n    }\n\n    public String getMetricCode() {\n        return metricCode;\n    }\n\n    /* setEqualWord()\n    * use this to set this word equal with another to prevent them from rhyming\n    * (example: \"battlecry\" should be set equal to \"cry\", so they don't rhyme)\n    */\n    public void setEqualWord(String w, String p) {\n        //TODO: Get correct metric code\n        equalWord = w;\n        phonemes = p;\n    }\n\n    /* equalTo()\n    * check if this word is equal to another.\n    */\n    public boolean equalTo(String equal) {\n        boolean result = false;\n        if ((equal.toLowerCase().equals(equalWord.toLowerCase())) || (equal.toLowerCase().equals(word.toLowerCase()))) {\n            result = true;\n        }\n        return result;\n    }\n\n    /* parsePhonemes()\n    * Searches the phoneme string for valuable information,\n    * i.e. syllable count and metric code.\n    */\n    private void parsePhonemes() {\n        String c;\n        for (int i = 0; i < phonemes.length(); i++) {\n            c = phonemes.substring(i, i + 1);\n            if ((c.equals(\"0\")) || (c.equals(\"1\")) || (c.equals(\"2\"))) {\n                syllables++;\n                metricCode += c;\n            }\n        }\n        //if word has only one syllable, mark it with O,I or Z\n        //in the generator, these will be handled with extra tolerance\n        if (metricCode.equals(\"0\")) {\n            metricCode = \"O\";\n        } else if (metricCode.equals(\"1\")) {\n            metricCode = \"I\";\n        } else if (metricCode.equals(\"2\")) {\n            metricCode = \"Z\";\n        }\n        //most probably, THERE IS NO SUCH THING AS Z\n    }\n\n    /* getRhymeKey()\n    * Extracts the rhyme key from a phoneme string\n    * Set lastSyllableOnly to \"true\" if you want to check the last syllable only\n    * This is important if a longer word should rhyme with a one-syllable word\n    */\n    public String getRhymeKey(boolean lastSyllableOnly) {\n        int syl = syllables;\n        if ((syl <= 1) || (lastSyllableOnly)) {\n            syl = 1;\n        } else {\n            syl = 2;\n        }\n        int i = phonemes.length() - 1;\n        for (int s = 0; s < syl; s++) {\n            while ((i >= 0) && (!phonemes.substring(i, i + 1).equals(\"0\")) && (!phonemes.substring(i, i + 1).equals(\"1\")) && (!phonemes.substring(i, i + 1).equals(\"2\"))) {\n                i--;\n            }\n            while ((i >= 0) && (!phonemes.substring(i, i + 1).equals(\" \"))) {\n                i--;\n            }\n        }\n        return phonemes.substring(i + 1);\n    }\n}\n",
		"id": "/EvoSuiteBenchmark/72_battlecry/src/main/java/bcry/bcWord.java",
		"test_prompt": "// bcWordTest.java\npackage bcry;\n\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link bcWord}.\n* It contains ten unit test cases for the {@link bcWord#equalTo(String)} method.\n*/\nclass bcWordTest {"
	},
	{
		"original_code": "// bcFileDialog.java\n/* Battlecry V0.1\n * Copyright (C) 2003  Marek \"Wansti\" Moeckel\n *\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU General Public License\n * as published by the Free Software Foundation; either version 2\n * of the License, or (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program; if not, write to the Free Software\n * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.\n */\npackage bcry;\n\nimport java.io.*;\nimport java.awt.*;\nimport javax.swing.*;\nimport java.util.*;\n\n/* Adapted from MFileDialog, written by Florian Turowski for the Maze Invaders Project */\npublic class bcFileDialog extends Component {\n\n    private String path;\n\n    private File file;\n\n    private Frame frame;\n\n    private JFrame jframe;\n\n    private boolean swing;\n\n    private String ffilter;\n\n    private String recentFile;\n\n    private String fdes;\n\n    private JFileChooser fc;\n\n    /* Constructor\n     */\n    public bcFileDialog(String f) {\n        super();\n        ffilter = f;\n        recentFile = \"data/temp/recent\";\n        fdes = \"\";\n        path = getLastPath();\n        init(path);\n    }\n\n    /* Constructor\n     * @param f String - Filter\n     * @param d String - Description of File Type\n     */\n    public bcFileDialog(String f, String d) {\n        super();\n        ffilter = f;\n        recentFile = \"data/temp/recent\";\n        fdes = d;\n        path = getLastPath();\n        init(path);\n    }\n\n    private String getLastPath() {\n        String path;\n        BufferedReader br;\n        try {\n            br = new BufferedReader(new FileReader(recentFile));\n            path = br.readLine();\n            br.close();\n            return path;\n        } catch (FileNotFoundException e) {\n            File f = new File(recentFile);\n        } catch (IOException e) {\n        }\n        return null;\n    }\n\n    private void setLastPath(String p) {\n        BufferedWriter bw;\n        try {\n            bw = new BufferedWriter(new FileWriter(recentFile));\n            bw.write(p, 0, p.length());\n            bw.close();\n        } catch (FileNotFoundException e) {\n        } catch (IOException e) {\n        }\n    }\n\n    private void init(String p) {\n        if (p == null) {\n            fc = new JFileChooser();\n            fc.setDragEnabled(true);\n            MFileFilter filter = new MFileFilter();\n            filter.addExtension(ffilter);\n            filter.setDescription(fdes);\n            fc.addChoosableFileFilter(filter);\n        } else {\n            fc = new JFileChooser(new File(p));\n            fc.setDragEnabled(true);\n            MFileFilter filter = new MFileFilter();\n            filter.addExtension(ffilter);\n            filter.setDescription(fdes);\n            fc.addChoosableFileFilter(filter);\n        }\n    }\n\n    public File openDialog() {\n        File f = new File(\"\");\n        int val = fc.showOpenDialog(null);\n        if (val == JFileChooser.APPROVE_OPTION) {\n            path = fc.getCurrentDirectory().getAbsolutePath();\n            f = fc.getSelectedFile();\n            //System.out.println(path);\n            setLastPath(path);\n        }\n        return f;\n    }\n\n    public File openSaveDialog() {\n        File f = new File(\"\");\n        int val = fc.showSaveDialog(null);\n        if (val == JFileChooser.APPROVE_OPTION) {\n            path = fc.getCurrentDirectory().getAbsolutePath();\n            f = fc.getSelectedFile();\n            //System.out.println(path);\n            setLastPath(path);\n        }\n        return f;\n    }\n\n    /*\n     * Auxiliary class for filter usage\n     */\n    class MFileFilter extends javax.swing.filechooser.FileFilter {\n\n        private Hashtable filters = null;\n\n        private String description = null;\n\n        private String fullDescription = null;\n\n        private boolean useExtensionsInDescription = true;\n\n        public MFileFilter() {\n            this.filters = new Hashtable();\n        }\n\n        public MFileFilter(String extension, String description) {\n            this();\n            if (extension != null)\n                addExtension(extension);\n            if (description != null)\n                setDescription(description);\n        }\n\n        public void addExtension(String extension) {\n            if (filters == null) {\n                filters = new Hashtable(5);\n            }\n            filters.put(extension.toLowerCase(), this);\n            fullDescription = null;\n        }\n\n        public String getDescription() {\n            if (fullDescription == null) {\n                if (description == null || isExtensionListInDescription()) {\n                    fullDescription = description == null ? \"(\" : description + \" (\";\n                    Enumeration extensions = filters.keys();\n                    if (extensions != null) {\n                        fullDescription += \".\" + (String) extensions.nextElement();\n                        while (extensions.hasMoreElements()) {\n                            fullDescription += \", .\" + (String) extensions.nextElement();\n                        }\n                    }\n                    fullDescription += \")\";\n                } else {\n                    fullDescription = description;\n                }\n            }\n            return fullDescription;\n        }\n\n        public void setDescription(String description) {\n            this.description = description;\n            fullDescription = null;\n        }\n\n        public boolean isExtensionListInDescription() {\n            return useExtensionsInDescription;\n        }\n\n        public void setExtensionListInDescription(boolean b) {\n            useExtensionsInDescription = b;\n            fullDescription = null;\n        }\n\n        public String getExtension(File f) {\n            if (f != null) {\n                String filename = f.getName();\n                int i = filename.lastIndexOf('.');\n                if (i > 0 && i < filename.length() - 1) {\n                    return filename.substring(i + 1).toLowerCase();\n                }\n                ;\n            }\n            return null;\n        }\n\n        public boolean accept(File f) {\n            if (f != null) {\n                if (f.isDirectory()) {\n                    return true;\n                }\n                String extension = getExtension(f);\n                if (extension != null && filters.get(getExtension(f)) != null) {\n                    return true;\n                }\n                ;\n            }\n            return false;\n        }\n    }\n}\n",
		"id": "/EvoSuiteBenchmark/72_battlecry/src/main/java/bcry/bcFileDialog_0Test.java",
		"test_prompt": "// bcFileDialog_0Test.java\npackage bcry;\n\nimport java.io.*;\nimport java.awt.*;\nimport javax.swing.*;\nimport java.util.*;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link bcFileDialog}.\n* It contains ten unit test cases for the {@link bcFileDialog#openDialog()} method.\n*/\nclass bcFileDialog_0Test {"
	},
	{
		"original_code": "// bcFileDialog.java\n/* Battlecry V0.1\n * Copyright (C) 2003  Marek \"Wansti\" Moeckel\n *\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU General Public License\n * as published by the Free Software Foundation; either version 2\n * of the License, or (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program; if not, write to the Free Software\n * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.\n */\npackage bcry;\n\nimport java.io.*;\nimport java.awt.*;\nimport javax.swing.*;\nimport java.util.*;\n\n/* Adapted from MFileDialog, written by Florian Turowski for the Maze Invaders Project */\npublic class bcFileDialog extends Component {\n\n    private String path;\n\n    private File file;\n\n    private Frame frame;\n\n    private JFrame jframe;\n\n    private boolean swing;\n\n    private String ffilter;\n\n    private String recentFile;\n\n    private String fdes;\n\n    private JFileChooser fc;\n\n    /* Constructor\n     */\n    public bcFileDialog(String f) {\n        super();\n        ffilter = f;\n        recentFile = \"data/temp/recent\";\n        fdes = \"\";\n        path = getLastPath();\n        init(path);\n    }\n\n    /* Constructor\n     * @param f String - Filter\n     * @param d String - Description of File Type\n     */\n    public bcFileDialog(String f, String d) {\n        super();\n        ffilter = f;\n        recentFile = \"data/temp/recent\";\n        fdes = d;\n        path = getLastPath();\n        init(path);\n    }\n\n    private String getLastPath() {\n        String path;\n        BufferedReader br;\n        try {\n            br = new BufferedReader(new FileReader(recentFile));\n            path = br.readLine();\n            br.close();\n            return path;\n        } catch (FileNotFoundException e) {\n            File f = new File(recentFile);\n        } catch (IOException e) {\n        }\n        return null;\n    }\n\n    private void setLastPath(String p) {\n        BufferedWriter bw;\n        try {\n            bw = new BufferedWriter(new FileWriter(recentFile));\n            bw.write(p, 0, p.length());\n            bw.close();\n        } catch (FileNotFoundException e) {\n        } catch (IOException e) {\n        }\n    }\n\n    private void init(String p) {\n        if (p == null) {\n            fc = new JFileChooser();\n            fc.setDragEnabled(true);\n            MFileFilter filter = new MFileFilter();\n            filter.addExtension(ffilter);\n            filter.setDescription(fdes);\n            fc.addChoosableFileFilter(filter);\n        } else {\n            fc = new JFileChooser(new File(p));\n            fc.setDragEnabled(true);\n            MFileFilter filter = new MFileFilter();\n            filter.addExtension(ffilter);\n            filter.setDescription(fdes);\n            fc.addChoosableFileFilter(filter);\n        }\n    }\n\n    public File openDialog() {\n        File f = new File(\"\");\n        int val = fc.showOpenDialog(null);\n        if (val == JFileChooser.APPROVE_OPTION) {\n            path = fc.getCurrentDirectory().getAbsolutePath();\n            f = fc.getSelectedFile();\n            //System.out.println(path);\n            setLastPath(path);\n        }\n        return f;\n    }\n\n    public File openSaveDialog() {\n        File f = new File(\"\");\n        int val = fc.showSaveDialog(null);\n        if (val == JFileChooser.APPROVE_OPTION) {\n            path = fc.getCurrentDirectory().getAbsolutePath();\n            f = fc.getSelectedFile();\n            //System.out.println(path);\n            setLastPath(path);\n        }\n        return f;\n    }\n\n    /*\n     * Auxiliary class for filter usage\n     */\n    class MFileFilter extends javax.swing.filechooser.FileFilter {\n\n        private Hashtable filters = null;\n\n        private String description = null;\n\n        private String fullDescription = null;\n\n        private boolean useExtensionsInDescription = true;\n\n        public MFileFilter() {\n            this.filters = new Hashtable();\n        }\n\n        public MFileFilter(String extension, String description) {\n            this();\n            if (extension != null)\n                addExtension(extension);\n            if (description != null)\n                setDescription(description);\n        }\n\n        public void addExtension(String extension) {\n            if (filters == null) {\n                filters = new Hashtable(5);\n            }\n            filters.put(extension.toLowerCase(), this);\n            fullDescription = null;\n        }\n\n        public String getDescription() {\n            if (fullDescription == null) {\n                if (description == null || isExtensionListInDescription()) {\n                    fullDescription = description == null ? \"(\" : description + \" (\";\n                    Enumeration extensions = filters.keys();\n                    if (extensions != null) {\n                        fullDescription += \".\" + (String) extensions.nextElement();\n                        while (extensions.hasMoreElements()) {\n                            fullDescription += \", .\" + (String) extensions.nextElement();\n                        }\n                    }\n                    fullDescription += \")\";\n                } else {\n                    fullDescription = description;\n                }\n            }\n            return fullDescription;\n        }\n\n        public void setDescription(String description) {\n            this.description = description;\n            fullDescription = null;\n        }\n\n        public boolean isExtensionListInDescription() {\n            return useExtensionsInDescription;\n        }\n\n        public void setExtensionListInDescription(boolean b) {\n            useExtensionsInDescription = b;\n            fullDescription = null;\n        }\n\n        public String getExtension(File f) {\n            if (f != null) {\n                String filename = f.getName();\n                int i = filename.lastIndexOf('.');\n                if (i > 0 && i < filename.length() - 1) {\n                    return filename.substring(i + 1).toLowerCase();\n                }\n                ;\n            }\n            return null;\n        }\n\n        public boolean accept(File f) {\n            if (f != null) {\n                if (f.isDirectory()) {\n                    return true;\n                }\n                String extension = getExtension(f);\n                if (extension != null && filters.get(getExtension(f)) != null) {\n                    return true;\n                }\n                ;\n            }\n            return false;\n        }\n    }\n}\n",
		"id": "/EvoSuiteBenchmark/72_battlecry/src/main/java/bcry/bcFileDialog_1Test.java",
		"test_prompt": "// bcFileDialog_1Test.java\npackage bcry;\n\nimport java.io.*;\nimport java.awt.*;\nimport javax.swing.*;\nimport java.util.*;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link bcFileDialog}.\n* It contains ten unit test cases for the {@link bcFileDialog#openSaveDialog()} method.\n*/\nclass bcFileDialog_1Test {"
	}
]