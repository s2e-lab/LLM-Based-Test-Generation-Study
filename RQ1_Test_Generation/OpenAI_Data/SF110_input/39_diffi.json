[
	{
		"original_code": "// StringIncrementor.java\n/*\n * Diff.java\n *\n * Created on 31.10.2007, 14:03:08\n *\n * To change this template, choose Tools | Templates\n * and open the template in the editor.\n */\npackage de.beiri22.stringincrementor;\n\nimport de.beiri22.stringincrementor.helper.ExtBoolArray;\nimport de.beiri22.stringincrementor.helper.IndexedString;\nimport de.beiri22.stringincrementor.relativestring.RelativeString;\nimport de.beiri22.stringincrementor.relativestring.StringLink;\n\n/**\n * @author Rico\n */\npublic class StringIncrementor {\n\n    public static RelativeString diff(String a, String b) {\n        return diff(a, b, false);\n    }\n\n    public static RelativeString diff(String a, String b, boolean verbose) {\n        RelativeString result = new RelativeString();\n        ExtBoolArray vergeben = new ExtBoolArray(b.length());\n        System.out.println(\"Creating index...\");\n        IndexedString ai = new IndexedString(a);\n        System.out.println(\"Searching links...\");\n        char[] target = new char[13];\n        for (int posB = 0; posB < b.length() - 12; posB++) {\n            int l = 13;\n            //  int posA = ai.indexOf(b.substring(posB, posB + l));\n            b.getChars(posB, posB + 13, target, 0);\n            int posA = ai.indexOf(target);\n            if (posA == -1) {\n                if (verbose && posB % (b.length() / 1000) == 0) {\n                    System.out.println(\"@ \" + (Math.round(posB / (double) b.length() * 1000) / 10.0) + \"%\");\n                }\n                continue;\n            }\n            int posALast = posA;\n            while (posA != -1 && posB + l < b.length() && posA + l < a.length()) {\n                l++;\n                if (a.charAt(posA + l - 1) != b.charAt(posB + l - 1)) {\n                    posALast = posA;\n                    //posA = ai.indexOf(b.substring(posB, posB + l));\n                    char[] target2 = new char[l];\n                    b.getChars(posB, posB + l, target2, 0);\n                    posA = ai.indexOf(target2);\n                }\n            }\n            if (posA == -1) {\n                l--;\n                posA = posALast;\n            }\n            vergeben.setTrue(posB, posB + l - 1);\n            StringLink sl = new StringLink(posA, posB, l);\n            if (verbose) {\n                System.out.println(sl + \" @ \" + (Math.round(posB / (double) b.length() * 1000) / 10.0) + \"%\");\n            }\n            result.addLink(sl);\n            posB += l - 1;\n        }\n        StringBuilder rest = new StringBuilder();\n        synchronized (rest) {\n            for (int i = 0; i < b.length(); i++) {\n                if (vergeben.isFalse(i, i)) {\n                    rest.append(b.charAt(i));\n                }\n            }\n        }\n        result.setAbsolute(rest.toString());\n        return result;\n    }\n\n    public static String patch(String a, RelativeString r) {\n        return patch(a, r, false);\n    }\n\n    public static String patch(String a, RelativeString r, boolean verbose) {\n        StringBuilder result = new StringBuilder(r.getLength());\n        int posAbs = 0;\n        for (int i = 0; i < r.linksCount(); i++) {\n            StringLink si = r.getLink(i);\n            if (result.length() != si.getPosNew()) {\n                int diff = si.getPosNew() - result.length();\n                if (verbose) {\n                    System.out.println(\"Adding \" + diff + \" absolute Bytes from pos#\" + posAbs);\n                }\n                result.append(r.getAbsolute().substring(posAbs, posAbs + diff));\n                posAbs += diff;\n            }\n            if (verbose) {\n                System.out.println(\"Adding Link: \" + si);\n            }\n            result.append(a.substring(si.getPosOrig(), si.getPosOrig() + si.getLen()));\n        }\n        result.append(r.getAbsolute().substring(posAbs));\n        return result.toString();\n    }\n}\n",
		"id": "EvoSuiteBenchmark/39_diffi/src/main/java/de/beiri22/stringincrementor/StringIncrementorTest0.java",
		"test_prompt": "// StringIncrementorTest0.java\npackage de.beiri22.stringincrementor;\n\nimport de.beiri22.stringincrementor.helper.ExtBoolArray;\nimport de.beiri22.stringincrementor.helper.IndexedString;\nimport de.beiri22.stringincrementor.relativestring.RelativeString;\nimport de.beiri22.stringincrementor.relativestring.StringLink;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link StringIncrementor}.\n* It contains ten unit test cases for the {@link StringIncrementor#diff(String, String)} method.\n*/\nclass StringIncrementorTest0 {"
	},
	{
		"original_code": "// StringIncrementor.java\n/*\n * Diff.java\n *\n * Created on 31.10.2007, 14:03:08\n *\n * To change this template, choose Tools | Templates\n * and open the template in the editor.\n */\npackage de.beiri22.stringincrementor;\n\nimport de.beiri22.stringincrementor.helper.ExtBoolArray;\nimport de.beiri22.stringincrementor.helper.IndexedString;\nimport de.beiri22.stringincrementor.relativestring.RelativeString;\nimport de.beiri22.stringincrementor.relativestring.StringLink;\n\n/**\n * @author Rico\n */\npublic class StringIncrementor {\n\n    public static RelativeString diff(String a, String b) {\n        return diff(a, b, false);\n    }\n\n    public static RelativeString diff(String a, String b, boolean verbose) {\n        RelativeString result = new RelativeString();\n        ExtBoolArray vergeben = new ExtBoolArray(b.length());\n        System.out.println(\"Creating index...\");\n        IndexedString ai = new IndexedString(a);\n        System.out.println(\"Searching links...\");\n        char[] target = new char[13];\n        for (int posB = 0; posB < b.length() - 12; posB++) {\n            int l = 13;\n            //  int posA = ai.indexOf(b.substring(posB, posB + l));\n            b.getChars(posB, posB + 13, target, 0);\n            int posA = ai.indexOf(target);\n            if (posA == -1) {\n                if (verbose && posB % (b.length() / 1000) == 0) {\n                    System.out.println(\"@ \" + (Math.round(posB / (double) b.length() * 1000) / 10.0) + \"%\");\n                }\n                continue;\n            }\n            int posALast = posA;\n            while (posA != -1 && posB + l < b.length() && posA + l < a.length()) {\n                l++;\n                if (a.charAt(posA + l - 1) != b.charAt(posB + l - 1)) {\n                    posALast = posA;\n                    //posA = ai.indexOf(b.substring(posB, posB + l));\n                    char[] target2 = new char[l];\n                    b.getChars(posB, posB + l, target2, 0);\n                    posA = ai.indexOf(target2);\n                }\n            }\n            if (posA == -1) {\n                l--;\n                posA = posALast;\n            }\n            vergeben.setTrue(posB, posB + l - 1);\n            StringLink sl = new StringLink(posA, posB, l);\n            if (verbose) {\n                System.out.println(sl + \" @ \" + (Math.round(posB / (double) b.length() * 1000) / 10.0) + \"%\");\n            }\n            result.addLink(sl);\n            posB += l - 1;\n        }\n        StringBuilder rest = new StringBuilder();\n        synchronized (rest) {\n            for (int i = 0; i < b.length(); i++) {\n                if (vergeben.isFalse(i, i)) {\n                    rest.append(b.charAt(i));\n                }\n            }\n        }\n        result.setAbsolute(rest.toString());\n        return result;\n    }\n\n    public static String patch(String a, RelativeString r) {\n        return patch(a, r, false);\n    }\n\n    public static String patch(String a, RelativeString r, boolean verbose) {\n        StringBuilder result = new StringBuilder(r.getLength());\n        int posAbs = 0;\n        for (int i = 0; i < r.linksCount(); i++) {\n            StringLink si = r.getLink(i);\n            if (result.length() != si.getPosNew()) {\n                int diff = si.getPosNew() - result.length();\n                if (verbose) {\n                    System.out.println(\"Adding \" + diff + \" absolute Bytes from pos#\" + posAbs);\n                }\n                result.append(r.getAbsolute().substring(posAbs, posAbs + diff));\n                posAbs += diff;\n            }\n            if (verbose) {\n                System.out.println(\"Adding Link: \" + si);\n            }\n            result.append(a.substring(si.getPosOrig(), si.getPosOrig() + si.getLen()));\n        }\n        result.append(r.getAbsolute().substring(posAbs));\n        return result.toString();\n    }\n}\n",
		"id": "EvoSuiteBenchmark/39_diffi/src/main/java/de/beiri22/stringincrementor/StringIncrementorTest1.java",
		"test_prompt": "// StringIncrementorTest1.java\npackage de.beiri22.stringincrementor;\n\nimport de.beiri22.stringincrementor.helper.ExtBoolArray;\nimport de.beiri22.stringincrementor.helper.IndexedString;\nimport de.beiri22.stringincrementor.relativestring.RelativeString;\nimport de.beiri22.stringincrementor.relativestring.StringLink;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link StringIncrementor}.\n* It contains ten unit test cases for the {@link StringIncrementor#diff(String, String, boolean)} method.\n*/\nclass StringIncrementorTest1 {"
	},
	{
		"original_code": "// StringIncrementor.java\n/*\n * Diff.java\n *\n * Created on 31.10.2007, 14:03:08\n *\n * To change this template, choose Tools | Templates\n * and open the template in the editor.\n */\npackage de.beiri22.stringincrementor;\n\nimport de.beiri22.stringincrementor.helper.ExtBoolArray;\nimport de.beiri22.stringincrementor.helper.IndexedString;\nimport de.beiri22.stringincrementor.relativestring.RelativeString;\nimport de.beiri22.stringincrementor.relativestring.StringLink;\n\n/**\n * @author Rico\n */\npublic class StringIncrementor {\n\n    public static RelativeString diff(String a, String b) {\n        return diff(a, b, false);\n    }\n\n    public static RelativeString diff(String a, String b, boolean verbose) {\n        RelativeString result = new RelativeString();\n        ExtBoolArray vergeben = new ExtBoolArray(b.length());\n        System.out.println(\"Creating index...\");\n        IndexedString ai = new IndexedString(a);\n        System.out.println(\"Searching links...\");\n        char[] target = new char[13];\n        for (int posB = 0; posB < b.length() - 12; posB++) {\n            int l = 13;\n            //  int posA = ai.indexOf(b.substring(posB, posB + l));\n            b.getChars(posB, posB + 13, target, 0);\n            int posA = ai.indexOf(target);\n            if (posA == -1) {\n                if (verbose && posB % (b.length() / 1000) == 0) {\n                    System.out.println(\"@ \" + (Math.round(posB / (double) b.length() * 1000) / 10.0) + \"%\");\n                }\n                continue;\n            }\n            int posALast = posA;\n            while (posA != -1 && posB + l < b.length() && posA + l < a.length()) {\n                l++;\n                if (a.charAt(posA + l - 1) != b.charAt(posB + l - 1)) {\n                    posALast = posA;\n                    //posA = ai.indexOf(b.substring(posB, posB + l));\n                    char[] target2 = new char[l];\n                    b.getChars(posB, posB + l, target2, 0);\n                    posA = ai.indexOf(target2);\n                }\n            }\n            if (posA == -1) {\n                l--;\n                posA = posALast;\n            }\n            vergeben.setTrue(posB, posB + l - 1);\n            StringLink sl = new StringLink(posA, posB, l);\n            if (verbose) {\n                System.out.println(sl + \" @ \" + (Math.round(posB / (double) b.length() * 1000) / 10.0) + \"%\");\n            }\n            result.addLink(sl);\n            posB += l - 1;\n        }\n        StringBuilder rest = new StringBuilder();\n        synchronized (rest) {\n            for (int i = 0; i < b.length(); i++) {\n                if (vergeben.isFalse(i, i)) {\n                    rest.append(b.charAt(i));\n                }\n            }\n        }\n        result.setAbsolute(rest.toString());\n        return result;\n    }\n\n    public static String patch(String a, RelativeString r) {\n        return patch(a, r, false);\n    }\n\n    public static String patch(String a, RelativeString r, boolean verbose) {\n        StringBuilder result = new StringBuilder(r.getLength());\n        int posAbs = 0;\n        for (int i = 0; i < r.linksCount(); i++) {\n            StringLink si = r.getLink(i);\n            if (result.length() != si.getPosNew()) {\n                int diff = si.getPosNew() - result.length();\n                if (verbose) {\n                    System.out.println(\"Adding \" + diff + \" absolute Bytes from pos#\" + posAbs);\n                }\n                result.append(r.getAbsolute().substring(posAbs, posAbs + diff));\n                posAbs += diff;\n            }\n            if (verbose) {\n                System.out.println(\"Adding Link: \" + si);\n            }\n            result.append(a.substring(si.getPosOrig(), si.getPosOrig() + si.getLen()));\n        }\n        result.append(r.getAbsolute().substring(posAbs));\n        return result.toString();\n    }\n}\n",
		"id": "EvoSuiteBenchmark/39_diffi/src/main/java/de/beiri22/stringincrementor/StringIncrementorTest2.java",
		"test_prompt": "// StringIncrementorTest2.java\npackage de.beiri22.stringincrementor;\n\nimport de.beiri22.stringincrementor.helper.ExtBoolArray;\nimport de.beiri22.stringincrementor.helper.IndexedString;\nimport de.beiri22.stringincrementor.relativestring.RelativeString;\nimport de.beiri22.stringincrementor.relativestring.StringLink;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link StringIncrementor}.\n* It contains ten unit test cases for the {@link StringIncrementor#patch(String, RelativeString)} method.\n*/\nclass StringIncrementorTest2 {"
	},
	{
		"original_code": "// StringIncrementor.java\n/*\n * Diff.java\n *\n * Created on 31.10.2007, 14:03:08\n *\n * To change this template, choose Tools | Templates\n * and open the template in the editor.\n */\npackage de.beiri22.stringincrementor;\n\nimport de.beiri22.stringincrementor.helper.ExtBoolArray;\nimport de.beiri22.stringincrementor.helper.IndexedString;\nimport de.beiri22.stringincrementor.relativestring.RelativeString;\nimport de.beiri22.stringincrementor.relativestring.StringLink;\n\n/**\n * @author Rico\n */\npublic class StringIncrementor {\n\n    public static RelativeString diff(String a, String b) {\n        return diff(a, b, false);\n    }\n\n    public static RelativeString diff(String a, String b, boolean verbose) {\n        RelativeString result = new RelativeString();\n        ExtBoolArray vergeben = new ExtBoolArray(b.length());\n        System.out.println(\"Creating index...\");\n        IndexedString ai = new IndexedString(a);\n        System.out.println(\"Searching links...\");\n        char[] target = new char[13];\n        for (int posB = 0; posB < b.length() - 12; posB++) {\n            int l = 13;\n            //  int posA = ai.indexOf(b.substring(posB, posB + l));\n            b.getChars(posB, posB + 13, target, 0);\n            int posA = ai.indexOf(target);\n            if (posA == -1) {\n                if (verbose && posB % (b.length() / 1000) == 0) {\n                    System.out.println(\"@ \" + (Math.round(posB / (double) b.length() * 1000) / 10.0) + \"%\");\n                }\n                continue;\n            }\n            int posALast = posA;\n            while (posA != -1 && posB + l < b.length() && posA + l < a.length()) {\n                l++;\n                if (a.charAt(posA + l - 1) != b.charAt(posB + l - 1)) {\n                    posALast = posA;\n                    //posA = ai.indexOf(b.substring(posB, posB + l));\n                    char[] target2 = new char[l];\n                    b.getChars(posB, posB + l, target2, 0);\n                    posA = ai.indexOf(target2);\n                }\n            }\n            if (posA == -1) {\n                l--;\n                posA = posALast;\n            }\n            vergeben.setTrue(posB, posB + l - 1);\n            StringLink sl = new StringLink(posA, posB, l);\n            if (verbose) {\n                System.out.println(sl + \" @ \" + (Math.round(posB / (double) b.length() * 1000) / 10.0) + \"%\");\n            }\n            result.addLink(sl);\n            posB += l - 1;\n        }\n        StringBuilder rest = new StringBuilder();\n        synchronized (rest) {\n            for (int i = 0; i < b.length(); i++) {\n                if (vergeben.isFalse(i, i)) {\n                    rest.append(b.charAt(i));\n                }\n            }\n        }\n        result.setAbsolute(rest.toString());\n        return result;\n    }\n\n    public static String patch(String a, RelativeString r) {\n        return patch(a, r, false);\n    }\n\n    public static String patch(String a, RelativeString r, boolean verbose) {\n        StringBuilder result = new StringBuilder(r.getLength());\n        int posAbs = 0;\n        for (int i = 0; i < r.linksCount(); i++) {\n            StringLink si = r.getLink(i);\n            if (result.length() != si.getPosNew()) {\n                int diff = si.getPosNew() - result.length();\n                if (verbose) {\n                    System.out.println(\"Adding \" + diff + \" absolute Bytes from pos#\" + posAbs);\n                }\n                result.append(r.getAbsolute().substring(posAbs, posAbs + diff));\n                posAbs += diff;\n            }\n            if (verbose) {\n                System.out.println(\"Adding Link: \" + si);\n            }\n            result.append(a.substring(si.getPosOrig(), si.getPosOrig() + si.getLen()));\n        }\n        result.append(r.getAbsolute().substring(posAbs));\n        return result.toString();\n    }\n}\n",
		"id": "EvoSuiteBenchmark/39_diffi/src/main/java/de/beiri22/stringincrementor/StringIncrementorTest3.java",
		"test_prompt": "// StringIncrementorTest3.java\npackage de.beiri22.stringincrementor;\n\nimport de.beiri22.stringincrementor.helper.ExtBoolArray;\nimport de.beiri22.stringincrementor.helper.IndexedString;\nimport de.beiri22.stringincrementor.relativestring.RelativeString;\nimport de.beiri22.stringincrementor.relativestring.StringLink;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link StringIncrementor}.\n* It contains ten unit test cases for the {@link StringIncrementor#patch(String, RelativeString, boolean)} method.\n*/\nclass StringIncrementorTest3 {"
	},
	{
		"original_code": "// StringLink.java\n/*\n * StringLink.java\n *\n * Created on 01.11.2007, 14:14:01\n *\n * To change this template, choose Tools | Templates\n * and open the template in the editor.\n */\npackage de.beiri22.stringincrementor.relativestring;\n\nimport java.io.ByteArrayInputStream;\nimport java.io.ByteArrayOutputStream;\nimport java.io.DataInputStream;\nimport java.io.DataOutputStream;\nimport java.io.IOException;\n\n/**\n * @author Rico\n */\npublic class StringLink {\n\n    private int posOrig;\n\n    private int posNew;\n\n    private int len;\n\n    public StringLink(int posOrig, int posNew, int len) {\n        this.posOrig = posOrig;\n        this.posNew = posNew;\n        this.len = len;\n    }\n\n    public StringLink(byte[] data) {\n        DataInputStream iis = null;\n        try {\n            ByteArrayInputStream bos = new ByteArrayInputStream(data);\n            iis = new DataInputStream(bos);\n            len = iis.readInt();\n            posOrig = iis.readInt();\n            posNew = iis.readInt();\n        } catch (IOException ex) {\n            ex.printStackTrace();\n        } finally {\n            try {\n                iis.close();\n            } catch (IOException ex) {\n                ex.printStackTrace();\n            }\n        }\n    }\n\n    public int getLen() {\n        return len;\n    }\n\n    public int getPosNew() {\n        return posNew;\n    }\n\n    public int getPosOrig() {\n        return posOrig;\n    }\n\n    @Override\n    public String toString() {\n        return \"{\" + len + \": \" + posOrig + \"-->\" + posNew + \"}\";\n    }\n\n    public byte[] toBytes() {\n        DataOutputStream oos = null;\n        try {\n            ByteArrayOutputStream bos = new ByteArrayOutputStream(12);\n            oos = new DataOutputStream(bos);\n            oos.writeInt(len);\n            oos.writeInt(posOrig);\n            oos.writeInt(posNew);\n            oos.flush();\n            return bos.toByteArray();\n        } catch (IOException ex) {\n            ex.printStackTrace();\n        } finally {\n            try {\n                oos.close();\n            } catch (IOException ex) {\n                ex.printStackTrace();\n            }\n        }\n        return null;\n    }\n}\n",
		"id": "EvoSuiteBenchmark/39_diffi/src/main/java/de/beiri22/stringincrementor/relativestring/StringLinkTest.java",
		"test_prompt": "// StringLinkTest.java\npackage de.beiri22.stringincrementor.relativestring;\n\nimport java.io.ByteArrayInputStream;\nimport java.io.ByteArrayOutputStream;\nimport java.io.DataInputStream;\nimport java.io.DataOutputStream;\nimport java.io.IOException;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link StringLink}.\n* It contains ten unit test cases for the {@link StringLink#toBytes()} method.\n*/\nclass StringLinkTest {"
	},
	{
		"original_code": "// RelativeString.java\n/*\n * RelativeString.java\n *\n * Created on 01.11.2007, 14:25:42\n *\n * To change this template, choose Tools | Templates\n * and open the template in the editor.\n */\npackage de.beiri22.stringincrementor.relativestring;\n\nimport java.io.DataInputStream;\nimport java.io.DataOutputStream;\nimport java.io.IOException;\nimport java.io.InputStream;\nimport java.io.OutputStream;\nimport java.util.Vector;\n\n/**\n * @author Rico\n */\npublic final class RelativeString {\n\n    private Vector<StringLink> links;\n\n    private String absolute;\n\n    public RelativeString() {\n        links = new Vector<StringLink>();\n        absolute = \"\";\n    }\n\n    public RelativeString(InputStream I) {\n        this();\n        try {\n            DataInputStream iis = new DataInputStream(I);\n            int linkcount = iis.readInt();\n            byte[] data = new byte[12];\n            for (int i = 0; i < linkcount; i++) {\n                iis.read(data);\n                links.add(new StringLink(data));\n            }\n            int abslen = iis.readInt();\n            data = new byte[abslen];\n            iis.read(data);\n            StringBuilder sb = new StringBuilder();\n            for (int i = 0; i < abslen; i++) sb.append((char) data[i]);\n            absolute = sb.toString();\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n    }\n\n    public String getAbsolute() {\n        return absolute;\n    }\n\n    public void setAbsolute(String absolute) {\n        this.absolute = absolute;\n    }\n\n    public int linksCount() {\n        return links.size();\n    }\n\n    public StringLink getLink(int index) {\n        return links.elementAt(index);\n    }\n\n    public boolean addLink(StringLink e) {\n        return links.add(e);\n    }\n\n    @Override\n    public String toString() {\n        return linksCount() + \" links, \" + absolute.length() + \" absolute chars (\" + (8 + absolute.length() + linksCount() * 12) + \" Bytes ^= -\" + bytessaved() + \"Bytes)\";\n    }\n\n    public void debugPrint() {\n        System.out.println(\"Debugprint: \" + this);\n        for (int i = 0; i < links.size(); i++) {\n            System.out.format(\"(%0\" + (Math.round(Math.floor(Math.log10(links.size()))) + 1) + \"d)\", i);\n            System.out.println(\" \" + links.elementAt(i));\n        }\n        System.out.println(\"[\" + absolute + \"]\");\n    }\n\n    public void bytesToStream(OutputStream os) {\n        try {\n            DataOutputStream oos = null;\n            oos = new DataOutputStream(os);\n            oos.writeInt(links.size());\n            for (int i = 0; i < links.size(); i++) {\n                oos.write(links.elementAt(i).toBytes());\n            }\n            oos.writeInt(absolute.length());\n            oos.writeBytes(absolute);\n            oos.flush();\n        } catch (IOException ex) {\n            ex.printStackTrace();\n        }\n    }\n\n    private int bytessaved() {\n        int result = -8;\n        for (int i = 0; i < links.size(); i++) {\n            result += (links.elementAt(i).getLen() - 12);\n        }\n        return result;\n    }\n\n    public int getLength() {\n        int result = absolute.length();\n        for (int i = 0; i < links.size(); i++) {\n            result += (links.elementAt(i).getLen());\n        }\n        return result;\n    }\n}\n",
		"id": "EvoSuiteBenchmark/39_diffi/src/main/java/de/beiri22/stringincrementor/relativestring/RelativeStringTest0.java",
		"test_prompt": "// RelativeStringTest0.java\npackage de.beiri22.stringincrementor.relativestring;\n\nimport java.io.DataInputStream;\nimport java.io.DataOutputStream;\nimport java.io.IOException;\nimport java.io.InputStream;\nimport java.io.OutputStream;\nimport java.util.Vector;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link RelativeString}.\n* It contains ten unit test cases for the {@link RelativeString#linksCount()} method.\n*/\nclass RelativeStringTest0 {"
	},
	{
		"original_code": "// RelativeString.java\n/*\n * RelativeString.java\n *\n * Created on 01.11.2007, 14:25:42\n *\n * To change this template, choose Tools | Templates\n * and open the template in the editor.\n */\npackage de.beiri22.stringincrementor.relativestring;\n\nimport java.io.DataInputStream;\nimport java.io.DataOutputStream;\nimport java.io.IOException;\nimport java.io.InputStream;\nimport java.io.OutputStream;\nimport java.util.Vector;\n\n/**\n * @author Rico\n */\npublic final class RelativeString {\n\n    private Vector<StringLink> links;\n\n    private String absolute;\n\n    public RelativeString() {\n        links = new Vector<StringLink>();\n        absolute = \"\";\n    }\n\n    public RelativeString(InputStream I) {\n        this();\n        try {\n            DataInputStream iis = new DataInputStream(I);\n            int linkcount = iis.readInt();\n            byte[] data = new byte[12];\n            for (int i = 0; i < linkcount; i++) {\n                iis.read(data);\n                links.add(new StringLink(data));\n            }\n            int abslen = iis.readInt();\n            data = new byte[abslen];\n            iis.read(data);\n            StringBuilder sb = new StringBuilder();\n            for (int i = 0; i < abslen; i++) sb.append((char) data[i]);\n            absolute = sb.toString();\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n    }\n\n    public String getAbsolute() {\n        return absolute;\n    }\n\n    public void setAbsolute(String absolute) {\n        this.absolute = absolute;\n    }\n\n    public int linksCount() {\n        return links.size();\n    }\n\n    public StringLink getLink(int index) {\n        return links.elementAt(index);\n    }\n\n    public boolean addLink(StringLink e) {\n        return links.add(e);\n    }\n\n    @Override\n    public String toString() {\n        return linksCount() + \" links, \" + absolute.length() + \" absolute chars (\" + (8 + absolute.length() + linksCount() * 12) + \" Bytes ^= -\" + bytessaved() + \"Bytes)\";\n    }\n\n    public void debugPrint() {\n        System.out.println(\"Debugprint: \" + this);\n        for (int i = 0; i < links.size(); i++) {\n            System.out.format(\"(%0\" + (Math.round(Math.floor(Math.log10(links.size()))) + 1) + \"d)\", i);\n            System.out.println(\" \" + links.elementAt(i));\n        }\n        System.out.println(\"[\" + absolute + \"]\");\n    }\n\n    public void bytesToStream(OutputStream os) {\n        try {\n            DataOutputStream oos = null;\n            oos = new DataOutputStream(os);\n            oos.writeInt(links.size());\n            for (int i = 0; i < links.size(); i++) {\n                oos.write(links.elementAt(i).toBytes());\n            }\n            oos.writeInt(absolute.length());\n            oos.writeBytes(absolute);\n            oos.flush();\n        } catch (IOException ex) {\n            ex.printStackTrace();\n        }\n    }\n\n    private int bytessaved() {\n        int result = -8;\n        for (int i = 0; i < links.size(); i++) {\n            result += (links.elementAt(i).getLen() - 12);\n        }\n        return result;\n    }\n\n    public int getLength() {\n        int result = absolute.length();\n        for (int i = 0; i < links.size(); i++) {\n            result += (links.elementAt(i).getLen());\n        }\n        return result;\n    }\n}\n",
		"id": "EvoSuiteBenchmark/39_diffi/src/main/java/de/beiri22/stringincrementor/relativestring/RelativeStringTest1.java",
		"test_prompt": "// RelativeStringTest1.java\npackage de.beiri22.stringincrementor.relativestring;\n\nimport java.io.DataInputStream;\nimport java.io.DataOutputStream;\nimport java.io.IOException;\nimport java.io.InputStream;\nimport java.io.OutputStream;\nimport java.util.Vector;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link RelativeString}.\n* It contains ten unit test cases for the {@link RelativeString#addLink(StringLink)} method.\n*/\nclass RelativeStringTest1 {"
	},
	{
		"original_code": "// IndexedString.java\n/*\n * IndexedString.java\n *\n * Created on 03.11.2007, 14:41:10\n *\n * To change this template, choose Tools | Templates\n * and open the template in the editor.\n */\npackage de.beiri22.stringincrementor.helper;\n\n/**\n * @author Rico\n */\npublic final class IndexedString {\n\n    private char[] values;\n\n    private int[][] index;\n\n    private int count(char c) {\n        int result = 0;\n        for (int i = 0; i < values.length; i++) {\n            if (values[i] == c) {\n                result++;\n            }\n        }\n        return result;\n    }\n\n    public IndexedString(String s) {\n        values = new char[s.length()];\n        s.getChars(0, s.length(), values, 0);\n        index = new int[256][];\n        for (char c = 0; c < 256; c++) {\n            index[c] = new int[count(c)];\n            int idx = 0;\n            for (int i = 0; i < values.length; i++) {\n                if (values[i] == c) {\n                    index[c][idx++] = i;\n                }\n            }\n        }\n    }\n\n    public int indexOf(char[] target) {\n        char first = target[0];\n        int tl = target.length;\n        int max = values.length - tl;\n        int[] idxa = index[first];\n        int idxl = idxa.length;\n        int j;\n        int end;\n        for (int idx = 0; idx < idxl; idx++) {\n            /* Look for first character. */\n            int i = idxa[idx];\n            /* Found first character, now look at the rest of v2 */\n            if (i <= max) {\n                j = i + 1;\n                end = i + tl;\n                for (int k = 1; j < end && values[j] == target[k]; j++, k++) {\n                    ;\n                }\n                if (j == end) {\n                    /* Found whole string. */\n                    return i;\n                }\n            }\n        }\n        return -1;\n    }\n}\n",
		"id": "EvoSuiteBenchmark/39_diffi/src/main/java/de/beiri22/stringincrementor/helper/IndexedStringTest.java",
		"test_prompt": "// IndexedStringTest.java\npackage de.beiri22.stringincrementor.helper;\n\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link IndexedString}.\n* It contains ten unit test cases for the {@link IndexedString#indexOf(char[])} method.\n*/\nclass IndexedStringTest {"
	},
	{
		"original_code": "// StringFromFile.java\n/*\n * StringFromFile.java\n *\n * Created on 03.11.2007, 13:32:58\n *\n * To change this template, choose Tools | Templates\n * and open the template in the editor.\n */\npackage de.beiri22.stringincrementor.helper;\n\nimport java.io.BufferedInputStream;\nimport java.io.FileInputStream;\nimport java.io.IOException;\n\n/**\n * @author Rico\n */\npublic final class StringFromFile {\n\n    public static String readString(String fn) throws IOException {\n        FileInputStream A = new FileInputStream(fn);\n        BufferedInputStream B = new BufferedInputStream(A);\n        byte b;\n        StringBuffer sb = new StringBuffer();\n        synchronized (sb) {\n            while (B.available() > 0) {\n                sb.append((char) B.read());\n            }\n        }\n        B.close();\n        return sb.toString();\n    }\n}\n",
		"id": "EvoSuiteBenchmark/39_diffi/src/main/java/de/beiri22/stringincrementor/helper/StringFromFileTest.java",
		"test_prompt": "// StringFromFileTest.java\npackage de.beiri22.stringincrementor.helper;\n\nimport java.io.BufferedInputStream;\nimport java.io.FileInputStream;\nimport java.io.IOException;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link StringFromFile}.\n* It contains ten unit test cases for the {@link StringFromFile#readString(String)} method.\n*/\nclass StringFromFileTest {"
	},
	{
		"original_code": "// ExtBoolArray.java\n/*\n * ExtBoolArray.java\n *\n * Created on 31.10.2007, 14:34:55\n *\n * To change this template, choose Tools | Templates\n * and open the template in the editor.\n */\npackage de.beiri22.stringincrementor.helper;\n\n/**\n * @author Rico\n */\npublic final class ExtBoolArray {\n\n    /**\n     * Enthaelt die Booleanwerte\n     */\n    private boolean[] werte;\n\n    /**\n     * erstellt ein neues ExtBoolArray mit allen Werten False.\n     * @param len Anzahl der Booleanwerte\n     */\n    public ExtBoolArray(int len) {\n        werte = new boolean[len];\n    }\n\n    /**\n     * setzt den Bereich mit den Indexen a bis b auf True.\n     * @param a Startindex\n     * @param b Endindex\n     */\n    public void setTrue(int a, int b) {\n        for (int i = a; i <= b; i++) {\n            werte[i] = true;\n        }\n    }\n\n    /**\n     * prueft, ob der Bereich mit den Indexen a bis b ausschließlich False-Werte\n     * enthaelt.\n     * @param a Startindex\n     * @param b Endindex\n     * @return True - wenn alles False-Werte sind.\n     */\n    public boolean isFalse(int a, int b) {\n        for (int i = a; i <= b; i++) {\n            if (werte[i]) {\n                return false;\n            }\n        }\n        return true;\n    }\n\n    /**\n     * Zahl die uebriggebliebenen False-Werte.\n     * @return Anzahl der False-Werte.\n     */\n    public int left() {\n        int result = 0;\n        for (int i = 0; i < werte.length; i++) {\n            if (!werte[i]) {\n                result++;\n            }\n        }\n        return result;\n    }\n}\n",
		"id": "EvoSuiteBenchmark/39_diffi/src/main/java/de/beiri22/stringincrementor/helper/ExtBoolArrayTest0.java",
		"test_prompt": "// ExtBoolArrayTest0.java\npackage de.beiri22.stringincrementor.helper;\n\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link ExtBoolArray}.\n* It contains ten unit test cases for the {@link ExtBoolArray#isFalse(int, int)} method.\n*/\nclass ExtBoolArrayTest0 {"
	},
	{
		"original_code": "// ExtBoolArray.java\n/*\n * ExtBoolArray.java\n *\n * Created on 31.10.2007, 14:34:55\n *\n * To change this template, choose Tools | Templates\n * and open the template in the editor.\n */\npackage de.beiri22.stringincrementor.helper;\n\n/**\n * @author Rico\n */\npublic final class ExtBoolArray {\n\n    /**\n     * Enthaelt die Booleanwerte\n     */\n    private boolean[] werte;\n\n    /**\n     * erstellt ein neues ExtBoolArray mit allen Werten False.\n     * @param len Anzahl der Booleanwerte\n     */\n    public ExtBoolArray(int len) {\n        werte = new boolean[len];\n    }\n\n    /**\n     * setzt den Bereich mit den Indexen a bis b auf True.\n     * @param a Startindex\n     * @param b Endindex\n     */\n    public void setTrue(int a, int b) {\n        for (int i = a; i <= b; i++) {\n            werte[i] = true;\n        }\n    }\n\n    /**\n     * prueft, ob der Bereich mit den Indexen a bis b ausschließlich False-Werte\n     * enthaelt.\n     * @param a Startindex\n     * @param b Endindex\n     * @return True - wenn alles False-Werte sind.\n     */\n    public boolean isFalse(int a, int b) {\n        for (int i = a; i <= b; i++) {\n            if (werte[i]) {\n                return false;\n            }\n        }\n        return true;\n    }\n\n    /**\n     * Zahl die uebriggebliebenen False-Werte.\n     * @return Anzahl der False-Werte.\n     */\n    public int left() {\n        int result = 0;\n        for (int i = 0; i < werte.length; i++) {\n            if (!werte[i]) {\n                result++;\n            }\n        }\n        return result;\n    }\n}\n",
		"id": "EvoSuiteBenchmark/39_diffi/src/main/java/de/beiri22/stringincrementor/helper/ExtBoolArrayTest1.java",
		"test_prompt": "// ExtBoolArrayTest1.java\npackage de.beiri22.stringincrementor.helper;\n\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link ExtBoolArray}.\n* It contains ten unit test cases for the {@link ExtBoolArray#left()} method.\n*/\nclass ExtBoolArrayTest1 {"
	},
	{
		"original_code": "// Option.java\n/*\n * Option.java\n *\n * Created on 04.11.2007, 16:58:29\n *\n * To change this template, choose Tools | Templates\n * and open the template in the editor.\n */\npackage de.beiri22.commandline;\n\n/**\n * Klasse, die eine Kommandozeilenoption darstellt.\n * \\author Rico\n */\npublic class Option {\n\n    ///<Optionsname\n    private String mname;\n\n    ///<Beschreibung der Option fuer eine Debugausgabe.\n    private String mbeschriebung;\n\n    ///<Trennzeichen zwischen Option und uebergebenem Wert.\n    private String mdelim;\n\n    ///<Gibt an, ob ein Wert zu dieser Option erwartet wird.\n    private boolean mhasArg;\n\n    ///<Defaultwert, der verwendet wird, wenn kein Wert uebergeben wurde.\n    private String mdefaultv;\n\n    ///<Uebergebener Wert, der nach Durchlauf des Checks abgerufen werden kann.\n    private String mvalue;\n\n    ///<Gibt an, ob diese Option bereits gesetzt ist.\n    private boolean misSet;\n\n    /**\n     * erstellt eine neue Option.\n     * \\param name Optionsname\n     * \\param beschreibung Optionsbeschreibung\n     * \\param hasArg erwartet die Option einen Wert?\n     * \\param delim Trennzeichen zwischen Option und uebergebenem Wert\n     * \\param defaultv Defaultwert, der verwendet wird, wenn kein Wert uebergeben wurde\n     */\n    public Option(String name, String beschreibung, boolean hasArg, String delim, String defaultv) {\n        this.mname = name;\n        this.mbeschriebung = beschreibung;\n        this.mdelim = delim;\n        this.mhasArg = hasArg;\n        this.mdefaultv = defaultv;\n        misSet = false;\n    }\n\n    /**\n     * erstellt eine neue Option, die keine Parameter erwartet.\n     * \\param name Optionsname\n     * \\param beschreibung Optionsbeschreibung\n     */\n    public Option(String name, String beschreibung) {\n        this(name, beschreibung, false, \"\", \"\");\n    }\n\n    /**\n     * erstellt eine neue Option, die keine Parameter erwartet und keine Beschreibung\n     * enthaelt.\n     * \\param name Optionsname\n     */\n    public Option(String name) {\n        this(name, \"\", false, \"\", \"\");\n    }\n\n    /**\n     * erstellt eine neue Option ohne Beschreibung.\n     * \\param name Optionsname\n     * \\param hasArg erwartet die Option einen Wert?\n     * \\param delim Trennzeichen zwischen Option und uebergebenem Wert\n     * \\param defaultv Defaultwert, der verwendet wird, wenn kein Wert uebergeben wurde\n     */\n    public Option(String name, boolean hasArg, String delim, String defaultv) {\n        this(name, \"\", hasArg, delim, defaultv);\n    }\n\n    /**\n     * gibt die Beschreibung zurück.\n     * \\return Beschreibung der Option\n     */\n    public String getBeschriebung() {\n        return mbeschriebung;\n    }\n\n    /**\n     * gibt das Trennzeichen zurück.\n     * \\return Trennezeichen zwischen Optionsname und Wert\n     */\n    public String getDelim() {\n        return mdelim;\n    }\n\n    /**\n     * gibt zurück, ob die Option einen Wert erwartet.\n     * \\return braucht Option?\n     */\n    public boolean isHasArg() {\n        return mhasArg;\n    }\n\n    /**\n     * gibt den Namen zurück.\n     * \\return Name der Option\n     */\n    public String getName() {\n        return mname;\n    }\n\n    /**\n     * gibt den Defaultwert zurück.\n     * \\return Defaultwert der Option\n     */\n    public String getDefaultv() {\n        return mdefaultv;\n    }\n\n    /**\n     * gibt zurück, ob die Option schon gesetzt ist.\n     * \\return schon gesetzt?\n     */\n    public boolean isIsSet() {\n        return misSet;\n    }\n\n    /**\n     * gibt den uebergebenen Wert zurück.\n     * \\return uebergebener Wert\n     * \\throws RuntimeException falls die Option nicht gesetzt wurde oder keinen\n     * Wert besitzt.\n     */\n    public String getValue() {\n        if (!mhasArg) {\n            throw new RuntimeException(\"Option has no argument.\");\n        }\n        if (!misSet) {\n            throw new RuntimeException(\"Option is not set.\");\n        }\n        return mvalue;\n    }\n\n    /**\n     * prueft, ob der uebergebene String zu dieser Option passt(sie darstellt)\n     * \\param s zu pruefender String.\n     * \\return Ergebnis dieser Prüfung\n     */\n    public boolean is(String s) {\n        return s.startsWith((mname.isEmpty() ? \"\" : \"-\") + mname + (mhasArg ? mdelim : \"\")) && !misSet;\n    }\n\n    /**\n     * liest den Wert, falls erwartet, ein und setzt die Option.\n     * \\param s zu parsender String.\n     */\n    public void parse(String s) {\n        misSet = true;\n        if (mhasArg) {\n            mvalue = s.substring(mname.length() + (mname.isEmpty() ? 0 : 1) + mdelim.length());\n        } else {\n            mvalue = mdefaultv;\n        }\n    }\n}\n",
		"id": "EvoSuiteBenchmark/39_diffi/src/main/java/de/beiri22/commandline/OptionTest0.java",
		"test_prompt": "// OptionTest0.java\npackage de.beiri22.commandline;\n\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link Option}.\n* It contains ten unit test cases for the {@link Option#isHasArg()} method.\n*/\nclass OptionTest0 {"
	},
	{
		"original_code": "// Option.java\n/*\n * Option.java\n *\n * Created on 04.11.2007, 16:58:29\n *\n * To change this template, choose Tools | Templates\n * and open the template in the editor.\n */\npackage de.beiri22.commandline;\n\n/**\n * Klasse, die eine Kommandozeilenoption darstellt.\n * \\author Rico\n */\npublic class Option {\n\n    ///<Optionsname\n    private String mname;\n\n    ///<Beschreibung der Option fuer eine Debugausgabe.\n    private String mbeschriebung;\n\n    ///<Trennzeichen zwischen Option und uebergebenem Wert.\n    private String mdelim;\n\n    ///<Gibt an, ob ein Wert zu dieser Option erwartet wird.\n    private boolean mhasArg;\n\n    ///<Defaultwert, der verwendet wird, wenn kein Wert uebergeben wurde.\n    private String mdefaultv;\n\n    ///<Uebergebener Wert, der nach Durchlauf des Checks abgerufen werden kann.\n    private String mvalue;\n\n    ///<Gibt an, ob diese Option bereits gesetzt ist.\n    private boolean misSet;\n\n    /**\n     * erstellt eine neue Option.\n     * \\param name Optionsname\n     * \\param beschreibung Optionsbeschreibung\n     * \\param hasArg erwartet die Option einen Wert?\n     * \\param delim Trennzeichen zwischen Option und uebergebenem Wert\n     * \\param defaultv Defaultwert, der verwendet wird, wenn kein Wert uebergeben wurde\n     */\n    public Option(String name, String beschreibung, boolean hasArg, String delim, String defaultv) {\n        this.mname = name;\n        this.mbeschriebung = beschreibung;\n        this.mdelim = delim;\n        this.mhasArg = hasArg;\n        this.mdefaultv = defaultv;\n        misSet = false;\n    }\n\n    /**\n     * erstellt eine neue Option, die keine Parameter erwartet.\n     * \\param name Optionsname\n     * \\param beschreibung Optionsbeschreibung\n     */\n    public Option(String name, String beschreibung) {\n        this(name, beschreibung, false, \"\", \"\");\n    }\n\n    /**\n     * erstellt eine neue Option, die keine Parameter erwartet und keine Beschreibung\n     * enthaelt.\n     * \\param name Optionsname\n     */\n    public Option(String name) {\n        this(name, \"\", false, \"\", \"\");\n    }\n\n    /**\n     * erstellt eine neue Option ohne Beschreibung.\n     * \\param name Optionsname\n     * \\param hasArg erwartet die Option einen Wert?\n     * \\param delim Trennzeichen zwischen Option und uebergebenem Wert\n     * \\param defaultv Defaultwert, der verwendet wird, wenn kein Wert uebergeben wurde\n     */\n    public Option(String name, boolean hasArg, String delim, String defaultv) {\n        this(name, \"\", hasArg, delim, defaultv);\n    }\n\n    /**\n     * gibt die Beschreibung zurück.\n     * \\return Beschreibung der Option\n     */\n    public String getBeschriebung() {\n        return mbeschriebung;\n    }\n\n    /**\n     * gibt das Trennzeichen zurück.\n     * \\return Trennezeichen zwischen Optionsname und Wert\n     */\n    public String getDelim() {\n        return mdelim;\n    }\n\n    /**\n     * gibt zurück, ob die Option einen Wert erwartet.\n     * \\return braucht Option?\n     */\n    public boolean isHasArg() {\n        return mhasArg;\n    }\n\n    /**\n     * gibt den Namen zurück.\n     * \\return Name der Option\n     */\n    public String getName() {\n        return mname;\n    }\n\n    /**\n     * gibt den Defaultwert zurück.\n     * \\return Defaultwert der Option\n     */\n    public String getDefaultv() {\n        return mdefaultv;\n    }\n\n    /**\n     * gibt zurück, ob die Option schon gesetzt ist.\n     * \\return schon gesetzt?\n     */\n    public boolean isIsSet() {\n        return misSet;\n    }\n\n    /**\n     * gibt den uebergebenen Wert zurück.\n     * \\return uebergebener Wert\n     * \\throws RuntimeException falls die Option nicht gesetzt wurde oder keinen\n     * Wert besitzt.\n     */\n    public String getValue() {\n        if (!mhasArg) {\n            throw new RuntimeException(\"Option has no argument.\");\n        }\n        if (!misSet) {\n            throw new RuntimeException(\"Option is not set.\");\n        }\n        return mvalue;\n    }\n\n    /**\n     * prueft, ob der uebergebene String zu dieser Option passt(sie darstellt)\n     * \\param s zu pruefender String.\n     * \\return Ergebnis dieser Prüfung\n     */\n    public boolean is(String s) {\n        return s.startsWith((mname.isEmpty() ? \"\" : \"-\") + mname + (mhasArg ? mdelim : \"\")) && !misSet;\n    }\n\n    /**\n     * liest den Wert, falls erwartet, ein und setzt die Option.\n     * \\param s zu parsender String.\n     */\n    public void parse(String s) {\n        misSet = true;\n        if (mhasArg) {\n            mvalue = s.substring(mname.length() + (mname.isEmpty() ? 0 : 1) + mdelim.length());\n        } else {\n            mvalue = mdefaultv;\n        }\n    }\n}\n",
		"id": "EvoSuiteBenchmark/39_diffi/src/main/java/de/beiri22/commandline/OptionTest1.java",
		"test_prompt": "// OptionTest1.java\npackage de.beiri22.commandline;\n\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link Option}.\n* It contains ten unit test cases for the {@link Option#isIsSet()} method.\n*/\nclass OptionTest1 {"
	},
	{
		"original_code": "// Option.java\n/*\n * Option.java\n *\n * Created on 04.11.2007, 16:58:29\n *\n * To change this template, choose Tools | Templates\n * and open the template in the editor.\n */\npackage de.beiri22.commandline;\n\n/**\n * Klasse, die eine Kommandozeilenoption darstellt.\n * \\author Rico\n */\npublic class Option {\n\n    ///<Optionsname\n    private String mname;\n\n    ///<Beschreibung der Option fuer eine Debugausgabe.\n    private String mbeschriebung;\n\n    ///<Trennzeichen zwischen Option und uebergebenem Wert.\n    private String mdelim;\n\n    ///<Gibt an, ob ein Wert zu dieser Option erwartet wird.\n    private boolean mhasArg;\n\n    ///<Defaultwert, der verwendet wird, wenn kein Wert uebergeben wurde.\n    private String mdefaultv;\n\n    ///<Uebergebener Wert, der nach Durchlauf des Checks abgerufen werden kann.\n    private String mvalue;\n\n    ///<Gibt an, ob diese Option bereits gesetzt ist.\n    private boolean misSet;\n\n    /**\n     * erstellt eine neue Option.\n     * \\param name Optionsname\n     * \\param beschreibung Optionsbeschreibung\n     * \\param hasArg erwartet die Option einen Wert?\n     * \\param delim Trennzeichen zwischen Option und uebergebenem Wert\n     * \\param defaultv Defaultwert, der verwendet wird, wenn kein Wert uebergeben wurde\n     */\n    public Option(String name, String beschreibung, boolean hasArg, String delim, String defaultv) {\n        this.mname = name;\n        this.mbeschriebung = beschreibung;\n        this.mdelim = delim;\n        this.mhasArg = hasArg;\n        this.mdefaultv = defaultv;\n        misSet = false;\n    }\n\n    /**\n     * erstellt eine neue Option, die keine Parameter erwartet.\n     * \\param name Optionsname\n     * \\param beschreibung Optionsbeschreibung\n     */\n    public Option(String name, String beschreibung) {\n        this(name, beschreibung, false, \"\", \"\");\n    }\n\n    /**\n     * erstellt eine neue Option, die keine Parameter erwartet und keine Beschreibung\n     * enthaelt.\n     * \\param name Optionsname\n     */\n    public Option(String name) {\n        this(name, \"\", false, \"\", \"\");\n    }\n\n    /**\n     * erstellt eine neue Option ohne Beschreibung.\n     * \\param name Optionsname\n     * \\param hasArg erwartet die Option einen Wert?\n     * \\param delim Trennzeichen zwischen Option und uebergebenem Wert\n     * \\param defaultv Defaultwert, der verwendet wird, wenn kein Wert uebergeben wurde\n     */\n    public Option(String name, boolean hasArg, String delim, String defaultv) {\n        this(name, \"\", hasArg, delim, defaultv);\n    }\n\n    /**\n     * gibt die Beschreibung zurück.\n     * \\return Beschreibung der Option\n     */\n    public String getBeschriebung() {\n        return mbeschriebung;\n    }\n\n    /**\n     * gibt das Trennzeichen zurück.\n     * \\return Trennezeichen zwischen Optionsname und Wert\n     */\n    public String getDelim() {\n        return mdelim;\n    }\n\n    /**\n     * gibt zurück, ob die Option einen Wert erwartet.\n     * \\return braucht Option?\n     */\n    public boolean isHasArg() {\n        return mhasArg;\n    }\n\n    /**\n     * gibt den Namen zurück.\n     * \\return Name der Option\n     */\n    public String getName() {\n        return mname;\n    }\n\n    /**\n     * gibt den Defaultwert zurück.\n     * \\return Defaultwert der Option\n     */\n    public String getDefaultv() {\n        return mdefaultv;\n    }\n\n    /**\n     * gibt zurück, ob die Option schon gesetzt ist.\n     * \\return schon gesetzt?\n     */\n    public boolean isIsSet() {\n        return misSet;\n    }\n\n    /**\n     * gibt den uebergebenen Wert zurück.\n     * \\return uebergebener Wert\n     * \\throws RuntimeException falls die Option nicht gesetzt wurde oder keinen\n     * Wert besitzt.\n     */\n    public String getValue() {\n        if (!mhasArg) {\n            throw new RuntimeException(\"Option has no argument.\");\n        }\n        if (!misSet) {\n            throw new RuntimeException(\"Option is not set.\");\n        }\n        return mvalue;\n    }\n\n    /**\n     * prueft, ob der uebergebene String zu dieser Option passt(sie darstellt)\n     * \\param s zu pruefender String.\n     * \\return Ergebnis dieser Prüfung\n     */\n    public boolean is(String s) {\n        return s.startsWith((mname.isEmpty() ? \"\" : \"-\") + mname + (mhasArg ? mdelim : \"\")) && !misSet;\n    }\n\n    /**\n     * liest den Wert, falls erwartet, ein und setzt die Option.\n     * \\param s zu parsender String.\n     */\n    public void parse(String s) {\n        misSet = true;\n        if (mhasArg) {\n            mvalue = s.substring(mname.length() + (mname.isEmpty() ? 0 : 1) + mdelim.length());\n        } else {\n            mvalue = mdefaultv;\n        }\n    }\n}\n",
		"id": "EvoSuiteBenchmark/39_diffi/src/main/java/de/beiri22/commandline/OptionTest2.java",
		"test_prompt": "// OptionTest2.java\npackage de.beiri22.commandline;\n\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link Option}.\n* It contains ten unit test cases for the {@link Option#is(String)} method.\n*/\nclass OptionTest2 {"
	}
]